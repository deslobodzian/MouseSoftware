
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 19 00 20 71 2b 00 00 fb 69 00 00 45 2b 00 00     ... q+...i..E+..
  10:	45 2b 00 00 45 2b 00 00 45 2b 00 00 00 00 00 00     E+..E+..E+......
	...
  2c:	c5 24 00 00 45 2b 00 00 00 00 00 00 71 24 00 00     .$..E+......q$..
  3c:	45 2b 00 00                                         E+..

00000040 <_irq_vector_table>:
  40:	75 25 00 00 d9 3c 00 00 75 25 00 00 75 25 00 00     u%...<..u%..u%..
  50:	75 25 00 00 75 25 00 00 75 25 00 00 75 25 00 00     u%..u%..u%..u%..
  60:	75 25 00 00 75 25 00 00 ad 6c 00 00 75 25 00 00     u%..u%...l..u%..
  70:	75 25 00 00 75 25 00 00 75 25 00 00 75 25 00 00     u%..u%..u%..u%..
  80:	75 25 00 00 75 25 00 00 75 25 00 00 75 25 00 00     u%..u%..u%..u%..
  90:	49 3d 00 00 75 25 00 00 75 25 00 00 75 25 00 00     I=..u%..u%..u%..
  a0:	75 25 00 00 75 25 00 00 75 25 00 00 75 25 00 00     u%..u%..u%..u%..
  b0:	75 25 00 00 75 25 00 00 75 25 00 00 75 25 00 00     u%..u%..u%..u%..
  c0:	75 25 00 00 75 25 00 00 75 25 00 00 75 25 00 00     u%..u%..u%..u%..
  d0:	75 25 00 00 75 25 00 00 75 25 00 00 75 25 00 00     u%..u%..u%..u%..

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295
      f0:	f04f 30ff 	movne.w	r0, #4294967295
      f4:	f000 b80c 	b.w	110 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f808 	bl	114 <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__aeabi_idiv0>:
     110:	4770      	bx	lr
     112:	bf00      	nop

00000114 <__udivmoddi4>:
     114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     118:	4607      	mov	r7, r0
     11a:	468c      	mov	ip, r1
     11c:	4608      	mov	r0, r1
     11e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     120:	4615      	mov	r5, r2
     122:	463c      	mov	r4, r7
     124:	4619      	mov	r1, r3
     126:	2b00      	cmp	r3, #0
     128:	f040 80c6 	bne.w	2b8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xc4>
     12c:	4282      	cmp	r2, r0
     12e:	fab2 f782 	clz	r7, r2
     132:	d946      	bls.n	1c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x55>
     134:	b14f      	cbz	r7, 14a <__udivmoddi4+0x36>
     136:	f1c7 0e20 	rsb	lr, r7, #32
     13a:	fa24 fe0e 	lsr.w	lr, r4, lr
     13e:	fa00 f307 	lsl.w	r3, r0, r7
     142:	40bd      	lsls	r5, r7
     144:	ea4e 0c03 	orr.w	ip, lr, r3
     148:	40bc      	lsls	r4, r7
     14a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     14e:	fa1f fe85 	uxth.w	lr, r5
     152:	fbbc f9f8 	udiv	r9, ip, r8
     156:	0c22      	lsrs	r2, r4, #16
     158:	fb08 c319 	mls	r3, r8, r9, ip
     15c:	fb09 fa0e 	mul.w	sl, r9, lr
     160:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     164:	459a      	cmp	sl, r3
     166:	d928      	bls.n	1ba <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4d>
     168:	18eb      	adds	r3, r5, r3
     16a:	f109 30ff 	add.w	r0, r9, #4294967295
     16e:	d204      	bcs.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     170:	459a      	cmp	sl, r3
     172:	d902      	bls.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     174:	f1a9 0002 	sub.w	r0, r9, #2
     178:	442b      	add	r3, r5
     17a:	eba3 030a 	sub.w	r3, r3, sl
     17e:	b2a4      	uxth	r4, r4
     180:	fbb3 f2f8 	udiv	r2, r3, r8
     184:	fb08 3312 	mls	r3, r8, r2, r3
     188:	fb02 fe0e 	mul.w	lr, r2, lr
     18c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     190:	45a6      	cmp	lr, r4
     192:	d914      	bls.n	1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     194:	192c      	adds	r4, r5, r4
     196:	f102 33ff 	add.w	r3, r2, #4294967295
     19a:	d203      	bcs.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     19c:	45a6      	cmp	lr, r4
     19e:	d901      	bls.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     1a0:	1e93      	subs	r3, r2, #2
     1a2:	442c      	add	r4, r5
     1a4:	eba4 040e 	sub.w	r4, r4, lr
     1a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1ac:	b11e      	cbz	r6, 1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     1ae:	40fc      	lsrs	r4, r7
     1b0:	2300      	movs	r3, #0
     1b2:	6034      	str	r4, [r6, #0]
     1b4:	6073      	str	r3, [r6, #4]
     1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1ba:	4648      	mov	r0, r9
     1bc:	e7dd      	b.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     1be:	4613      	mov	r3, r2
     1c0:	e7f0      	b.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     1c2:	b902      	cbnz	r2, 1c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x59>
     1c4:	deff      	udf	#255	; 0xff
     1c6:	bb87      	cbnz	r7, 22a <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x36>
     1c8:	1a83      	subs	r3, r0, r2
     1ca:	2101      	movs	r1, #1
     1cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1d0:	b2aa      	uxth	r2, r5
     1d2:	fbb3 fcfe 	udiv	ip, r3, lr
     1d6:	0c20      	lsrs	r0, r4, #16
     1d8:	fb0e 331c 	mls	r3, lr, ip, r3
     1dc:	fb0c f802 	mul.w	r8, ip, r2
     1e0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1e4:	4598      	cmp	r8, r3
     1e6:	d963      	bls.n	2b0 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xbc>
     1e8:	18eb      	adds	r3, r5, r3
     1ea:	f10c 30ff 	add.w	r0, ip, #4294967295
     1ee:	d204      	bcs.n	1fa <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6>
     1f0:	4598      	cmp	r8, r3
     1f2:	d902      	bls.n	1fa <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6>
     1f4:	f1ac 0002 	sub.w	r0, ip, #2
     1f8:	442b      	add	r3, r5
     1fa:	eba3 0308 	sub.w	r3, r3, r8
     1fe:	b2a4      	uxth	r4, r4
     200:	fbb3 fcfe 	udiv	ip, r3, lr
     204:	fb0e 331c 	mls	r3, lr, ip, r3
     208:	fb0c f202 	mul.w	r2, ip, r2
     20c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     210:	42a2      	cmp	r2, r4
     212:	d94f      	bls.n	2b4 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xc0>
     214:	192c      	adds	r4, r5, r4
     216:	f10c 33ff 	add.w	r3, ip, #4294967295
     21a:	d204      	bcs.n	226 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x32>
     21c:	42a2      	cmp	r2, r4
     21e:	d902      	bls.n	226 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x32>
     220:	f1ac 0302 	sub.w	r3, ip, #2
     224:	442c      	add	r4, r5
     226:	1aa4      	subs	r4, r4, r2
     228:	e7be      	b.n	1a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3b>
     22a:	f1c7 0c20 	rsb	ip, r7, #32
     22e:	fa20 f80c 	lsr.w	r8, r0, ip
     232:	fa00 f307 	lsl.w	r3, r0, r7
     236:	fa24 fc0c 	lsr.w	ip, r4, ip
     23a:	40bd      	lsls	r5, r7
     23c:	ea4c 0203 	orr.w	r2, ip, r3
     240:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     244:	b2ab      	uxth	r3, r5
     246:	fbb8 fcfe 	udiv	ip, r8, lr
     24a:	0c11      	lsrs	r1, r2, #16
     24c:	fb0e 801c 	mls	r0, lr, ip, r8
     250:	fb0c f903 	mul.w	r9, ip, r3
     254:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     258:	4581      	cmp	r9, r0
     25a:	fa04 f407 	lsl.w	r4, r4, r7
     25e:	d923      	bls.n	2a8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xb4>
     260:	1828      	adds	r0, r5, r0
     262:	f10c 31ff 	add.w	r1, ip, #4294967295
     266:	d204      	bcs.n	272 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x7e>
     268:	4581      	cmp	r9, r0
     26a:	d902      	bls.n	272 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x7e>
     26c:	f1ac 0102 	sub.w	r1, ip, #2
     270:	4428      	add	r0, r5
     272:	eba0 0009 	sub.w	r0, r0, r9
     276:	b292      	uxth	r2, r2
     278:	fbb0 fcfe 	udiv	ip, r0, lr
     27c:	fb0e 001c 	mls	r0, lr, ip, r0
     280:	fb0c f803 	mul.w	r8, ip, r3
     284:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     288:	4598      	cmp	r8, r3
     28a:	d90f      	bls.n	2ac <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xb8>
     28c:	18eb      	adds	r3, r5, r3
     28e:	f10c 32ff 	add.w	r2, ip, #4294967295
     292:	d204      	bcs.n	29e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xaa>
     294:	4598      	cmp	r8, r3
     296:	d902      	bls.n	29e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xaa>
     298:	f1ac 0202 	sub.w	r2, ip, #2
     29c:	442b      	add	r3, r5
     29e:	eba3 0308 	sub.w	r3, r3, r8
     2a2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2a6:	e791      	b.n	1cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5f>
     2a8:	4661      	mov	r1, ip
     2aa:	e7e2      	b.n	272 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x7e>
     2ac:	4662      	mov	r2, ip
     2ae:	e7f6      	b.n	29e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xaa>
     2b0:	4660      	mov	r0, ip
     2b2:	e7a2      	b.n	1fa <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6>
     2b4:	4663      	mov	r3, ip
     2b6:	e7b6      	b.n	226 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x32>
     2b8:	4283      	cmp	r3, r0
     2ba:	d905      	bls.n	2c8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xd4>
     2bc:	b10e      	cbz	r6, 2c2 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xce>
     2be:	e9c6 7000 	strd	r7, r0, [r6]
     2c2:	2100      	movs	r1, #0
     2c4:	4608      	mov	r0, r1
     2c6:	e776      	b.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     2c8:	fab3 f183 	clz	r1, r3
     2cc:	b981      	cbnz	r1, 2f0 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xfc>
     2ce:	4283      	cmp	r3, r0
     2d0:	d301      	bcc.n	2d6 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xe2>
     2d2:	42ba      	cmp	r2, r7
     2d4:	d80a      	bhi.n	2ec <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xf8>
     2d6:	1abc      	subs	r4, r7, r2
     2d8:	eb60 0303 	sbc.w	r3, r0, r3
     2dc:	2001      	movs	r0, #1
     2de:	469c      	mov	ip, r3
     2e0:	2e00      	cmp	r6, #0
     2e2:	d068      	beq.n	3b6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb6>
     2e4:	e9c6 4c00 	strd	r4, ip, [r6]
     2e8:	2100      	movs	r1, #0
     2ea:	e764      	b.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     2ec:	4608      	mov	r0, r1
     2ee:	e7f7      	b.n	2e0 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xec>
     2f0:	f1c1 0c20 	rsb	ip, r1, #32
     2f4:	408b      	lsls	r3, r1
     2f6:	fa22 f40c 	lsr.w	r4, r2, ip
     2fa:	431c      	orrs	r4, r3
     2fc:	fa02 f501 	lsl.w	r5, r2, r1
     300:	fa00 f301 	lsl.w	r3, r0, r1
     304:	fa27 f20c 	lsr.w	r2, r7, ip
     308:	fa20 fb0c 	lsr.w	fp, r0, ip
     30c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     310:	4313      	orrs	r3, r2
     312:	fbbb f8f9 	udiv	r8, fp, r9
     316:	fa1f fe84 	uxth.w	lr, r4
     31a:	fb09 bb18 	mls	fp, r9, r8, fp
     31e:	0c1a      	lsrs	r2, r3, #16
     320:	fb08 fa0e 	mul.w	sl, r8, lr
     324:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     328:	4592      	cmp	sl, r2
     32a:	fa07 f701 	lsl.w	r7, r7, r1
     32e:	d93e      	bls.n	3ae <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xae>
     330:	18a2      	adds	r2, r4, r2
     332:	f108 30ff 	add.w	r0, r8, #4294967295
     336:	d204      	bcs.n	342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     338:	4592      	cmp	sl, r2
     33a:	d902      	bls.n	342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     33c:	f1a8 0002 	sub.w	r0, r8, #2
     340:	4422      	add	r2, r4
     342:	eba2 020a 	sub.w	r2, r2, sl
     346:	b29b      	uxth	r3, r3
     348:	fbb2 f8f9 	udiv	r8, r2, r9
     34c:	fb09 2218 	mls	r2, r9, r8, r2
     350:	fb08 fe0e 	mul.w	lr, r8, lr
     354:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     358:	4596      	cmp	lr, r2
     35a:	d92a      	bls.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     35c:	18a2      	adds	r2, r4, r2
     35e:	f108 33ff 	add.w	r3, r8, #4294967295
     362:	d204      	bcs.n	36e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6e>
     364:	4596      	cmp	lr, r2
     366:	d902      	bls.n	36e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6e>
     368:	f1a8 0302 	sub.w	r3, r8, #2
     36c:	4422      	add	r2, r4
     36e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     372:	fba0 9305 	umull	r9, r3, r0, r5
     376:	eba2 020e 	sub.w	r2, r2, lr
     37a:	429a      	cmp	r2, r3
     37c:	46ce      	mov	lr, r9
     37e:	4698      	mov	r8, r3
     380:	d302      	bcc.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>
     382:	d106      	bne.n	392 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x92>
     384:	454f      	cmp	r7, r9
     386:	d204      	bcs.n	392 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x92>
     388:	ebb9 0e05 	subs.w	lr, r9, r5
     38c:	eb63 0804 	sbc.w	r8, r3, r4
     390:	3801      	subs	r0, #1
     392:	b186      	cbz	r6, 3b6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb6>
     394:	ebb7 030e 	subs.w	r3, r7, lr
     398:	eb62 0708 	sbc.w	r7, r2, r8
     39c:	fa07 fc0c 	lsl.w	ip, r7, ip
     3a0:	40cb      	lsrs	r3, r1
     3a2:	ea4c 0303 	orr.w	r3, ip, r3
     3a6:	40cf      	lsrs	r7, r1
     3a8:	e9c6 3700 	strd	r3, r7, [r6]
     3ac:	e79c      	b.n	2e8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xf4>
     3ae:	4640      	mov	r0, r8
     3b0:	e7c7      	b.n	342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     3b2:	4643      	mov	r3, r8
     3b4:	e7db      	b.n	36e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6e>
     3b6:	4631      	mov	r1, r6
     3b8:	e6fd      	b.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
	...

000003bc <main>:
#include <logging/log.h>
#include "receiver.h"

LOG_MODULE_REGISTER(main, CONFIG_LOG_DEFAULT_LEVEL);

void main(void) {
     3bc:	b530      	push	{r4, r5, lr}
     3be:	b091      	sub	sp, #68	; 0x44
	struct esb_payload dummy;
	init_esb();
     3c0:	f000 f87c 	bl	4bc <init_esb>
	for (;;) {
		dummy = get_payload();
		len = dummy.length;
		x = dummy.data[0];
		y = dummy.data[1];
		LOG_INF("Test");
     3c4:	4d07      	ldr	r5, [pc, #28]	; (3e4 <main+0x28>)
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
     3c6:	4c08      	ldr	r4, [pc, #32]	; (3e8 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS>)
		dummy = get_payload();
     3c8:	a806      	add	r0, sp, #24
     3ca:	f000 f8cb 	bl	564 <get_payload>
		LOG_INF("Test");
     3ce:	2302      	movs	r3, #2
     3d0:	9505      	str	r5, [sp, #20]
     3d2:	9304      	str	r3, [sp, #16]
     3d4:	2300      	movs	r3, #0
     3d6:	aa04      	add	r2, sp, #16
     3d8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     3dc:	4620      	mov	r0, r4
     3de:	f006 fabf 	bl	6960 <z_impl_z_log_msg2_static_create>
     3e2:	e7f1      	b.n	3c8 <main+0xc>
     3e4:	0000764c 	.word	0x0000764c
     3e8:	00007470 	.word	0x00007470

000003ec <event_handler>:
#include "receiver.h"

LOG_MODULE_REGISTER(esb_receiver, CONFIG_LOG_DEFAULT_LEVEL);

void event_handler(struct esb_evt const *event) {
     3ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     3f0:	b086      	sub	sp, #24
    switch (event->evt_id) {
     3f2:	7805      	ldrb	r5, [r0, #0]
     3f4:	2d01      	cmp	r5, #1
void event_handler(struct esb_evt const *event) {
     3f6:	af00      	add	r7, sp, #0
    switch (event->evt_id) {
     3f8:	d016      	beq.n	428 <CONFIG_LOG_BUFFER_SIZE+0x28>
     3fa:	2d02      	cmp	r5, #2
     3fc:	d019      	beq.n	432 <CONFIG_LOG_BUFFER_SIZE+0x32>
     3fe:	b97d      	cbnz	r5, 420 <CONFIG_LOG_BUFFER_SIZE+0x20>
        case ESB_EVENT_TX_SUCCESS:
            LOG_DBG("TX SUCCESS EVENT");
     400:	466c      	mov	r4, sp
     402:	4b27      	ldr	r3, [pc, #156]	; (4a0 <CONFIG_LOG_BUFFER_SIZE+0xa0>)
     404:	b088      	sub	sp, #32
     406:	466a      	mov	r2, sp
            break;
        case ESB_EVENT_TX_FAILED:
            LOG_DBG("TX FAILED EVENT");
     408:	6153      	str	r3, [r2, #20]
     40a:	4b26      	ldr	r3, [pc, #152]	; (4a4 <CONFIG_LOG_BUFFER_SIZE+0xa4>)
     40c:	6193      	str	r3, [r2, #24]
     40e:	2303      	movs	r3, #3
     410:	f842 3f10 	str.w	r3, [r2, #16]!
     414:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
            break;
        case ESB_EVENT_RX_RECEIVED:
            if (esb_read_rx_payload(&rx_payload) == 0) {
                LOG_DBG("Packet received, len %d : "
     418:	4823      	ldr	r0, [pc, #140]	; (4a8 <CONFIG_LOG_BUFFER_SIZE+0xa8>)
     41a:	f005 fe6d 	bl	60f8 <z_log_msg2_static_create.constprop.0>
     41e:	46a5      	mov	sp, r4
                LOG_ERR("Error while reading rx packet");
            }
            break;
    }

}
     420:	3718      	adds	r7, #24
     422:	46bd      	mov	sp, r7
     424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            LOG_DBG("TX FAILED EVENT");
     428:	466c      	mov	r4, sp
     42a:	b088      	sub	sp, #32
     42c:	4b1f      	ldr	r3, [pc, #124]	; (4ac <CONFIG_LOG_BUFFER_SIZE+0xac>)
     42e:	466a      	mov	r2, sp
     430:	e7ea      	b.n	408 <CONFIG_LOG_BUFFER_SIZE+0x8>
            if (esb_read_rx_payload(&rx_payload) == 0) {
     432:	4c1f      	ldr	r4, [pc, #124]	; (4b0 <CONFIG_LOG_BUFFER_SIZE+0xb0>)
     434:	4620      	mov	r0, r4
     436:	f003 fe39 	bl	40ac <esb_read_rx_payload>
     43a:	bb28      	cbnz	r0, 488 <CONFIG_LOG_BUFFER_SIZE+0x88>
                LOG_DBG("Packet received, len %d : "
     43c:	7ae1      	ldrb	r1, [r4, #11]
     43e:	7b23      	ldrb	r3, [r4, #12]
     440:	f894 9000 	ldrb.w	r9, [r4]
     444:	f894 8005 	ldrb.w	r8, [r4, #5]
     448:	f894 e006 	ldrb.w	lr, [r4, #6]
     44c:	f894 c007 	ldrb.w	ip, [r4, #7]
     450:	7a26      	ldrb	r6, [r4, #8]
     452:	7a65      	ldrb	r5, [r4, #9]
     454:	7aa0      	ldrb	r0, [r4, #10]
     456:	f8df a05c 	ldr.w	sl, [pc, #92]	; 4b4 <CONFIG_LOG_BUFFER_SIZE+0xb4>
     45a:	466c      	mov	r4, sp
     45c:	b090      	sub	sp, #64	; 0x40
     45e:	466a      	mov	r2, sp
     460:	e9c2 130e 	strd	r1, r3, [r2, #56]	; 0x38
     464:	f8c2 a014 	str.w	sl, [r2, #20]
     468:	f8df a038 	ldr.w	sl, [pc, #56]	; 4a4 <CONFIG_LOG_BUFFER_SIZE+0xa4>
     46c:	230c      	movs	r3, #12
     46e:	e9c2 a906 	strd	sl, r9, [r2, #24]
     472:	e9c2 8e08 	strd	r8, lr, [r2, #32]
     476:	e9c2 c60a 	strd	ip, r6, [r2, #40]	; 0x28
     47a:	e9c2 500c 	strd	r5, r0, [r2, #48]	; 0x30
     47e:	f44f 41c2 	mov.w	r1, #24832	; 0x6100
     482:	f842 3f10 	str.w	r3, [r2, #16]!
     486:	e7c7      	b.n	418 <CONFIG_LOG_BUFFER_SIZE+0x18>
                LOG_ERR("Error while reading rx packet");
     488:	4b0b      	ldr	r3, [pc, #44]	; (4b8 <CONFIG_LOG_BUFFER_SIZE+0xb8>)
     48a:	4807      	ldr	r0, [pc, #28]	; (4a8 <CONFIG_LOG_BUFFER_SIZE+0xa8>)
     48c:	f107 0210 	add.w	r2, r7, #16
     490:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     494:	e9c7 5304 	strd	r5, r3, [r7, #16]
     498:	f005 fe2e 	bl	60f8 <z_log_msg2_static_create.constprop.0>
}
     49c:	e7c0      	b.n	420 <CONFIG_LOG_BUFFER_SIZE+0x20>
     49e:	bf00      	nop
     4a0:	00007656 	.word	0x00007656
     4a4:	0000777e 	.word	0x0000777e
     4a8:	00007458 	.word	0x00007458
     4ac:	0000766b 	.word	0x0000766b
     4b0:	20000b26 	.word	0x20000b26
     4b4:	0000767f 	.word	0x0000767f
     4b8:	000076dc 	.word	0x000076dc

000004bc <init_esb>:

    LOG_DBG("HF clock started");
    return 0;
}

int init_esb(void) {
     4bc:	b530      	push	{r4, r5, lr}
    int err;
    /* These are arbitrary default addresses. In end user products
	 * different addresses should be used for each set of devices.
	 */
	uint8_t base_addr_0[4] = {0xE7, 0xE7, 0xE7, 0xE7};
	uint8_t base_addr_1[4] = {0xC2, 0xC2, 0xC2, 0xC2};
     4be:	f04f 32e7 	mov.w	r2, #3890735079	; 0xe7e7e7e7
int init_esb(void) {
     4c2:	b091      	sub	sp, #68	; 0x44
	uint8_t base_addr_1[4] = {0xC2, 0xC2, 0xC2, 0xC2};
     4c4:	f04f 33c2 	mov.w	r3, #3267543746	; 0xc2c2c2c2
     4c8:	e9cd 2301 	strd	r2, r3, [sp, #4]
	uint8_t addr_prefix[8] = {0xE7, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8};
     4cc:	4a1d      	ldr	r2, [pc, #116]	; (544 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x5c>)

    struct esb_config config = ESB_DEFAULT_CONFIG;
     4ce:	4d1e      	ldr	r5, [pc, #120]	; (548 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x60>)
	uint8_t addr_prefix[8] = {0xE7, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8};
     4d0:	6810      	ldr	r0, [r2, #0]
     4d2:	6851      	ldr	r1, [r2, #4]
     4d4:	ab03      	add	r3, sp, #12
     4d6:	c303      	stmia	r3!, {r0, r1}
    struct esb_config config = ESB_DEFAULT_CONFIG;
     4d8:	461c      	mov	r4, r3
     4da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     4dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     4de:	682b      	ldr	r3, [r5, #0]
     4e0:	6023      	str	r3, [r4, #0]

    config.protocol = ESB_PROTOCOL_ESB_DPL;
    config.bitrate = ESB_BITRATE_2MBPS;
    config.mode = ESB_MODE_PRX;
    config.event_handler = event_handler;
     4e2:	4a1a      	ldr	r2, [pc, #104]	; (54c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x64>)
     4e4:	9206      	str	r2, [sp, #24]
    config.mode = ESB_MODE_PRX;
     4e6:	2301      	movs	r3, #1
    config.selective_auto_ack = true;

    err = esb_init(&config);
     4e8:	a805      	add	r0, sp, #20
    config.mode = ESB_MODE_PRX;
     4ea:	f88d 3015 	strb.w	r3, [sp, #21]
    config.selective_auto_ack = true;
     4ee:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    err = esb_init(&config);
     4f2:	f003 fc9f 	bl	3e34 <esb_init>

    if (err) {
     4f6:	4604      	mov	r4, r0
     4f8:	b160      	cbz	r0, 514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>
        LOG_ERR("Error initializing esb");
     4fa:	4b15      	ldr	r3, [pc, #84]	; (550 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x68>)
        return err;
    }   

    err = esb_set_prefixes(addr_prefix, ARRAY_SIZE(addr_prefix));
    if (err) {
        LOG_ERR("Error setting address prefix");
     4fc:	930f      	str	r3, [sp, #60]	; 0x3c
     4fe:	4815      	ldr	r0, [pc, #84]	; (554 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x6c>)
     500:	2302      	movs	r3, #2
     502:	aa0e      	add	r2, sp, #56	; 0x38
     504:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     508:	930e      	str	r3, [sp, #56]	; 0x38
     50a:	f005 fdf5 	bl	60f8 <z_log_msg2_static_create.constprop.0>
        return err;
    }   

    return 0;

}
     50e:	4620      	mov	r0, r4
     510:	b011      	add	sp, #68	; 0x44
     512:	bd30      	pop	{r4, r5, pc}
    err = esb_set_base_address_0(base_addr_0);
     514:	a801      	add	r0, sp, #4
     516:	f003 fe07 	bl	4128 <esb_set_base_address_0>
    if (err) {
     51a:	4604      	mov	r4, r0
     51c:	b108      	cbz	r0, 522 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3a>
        LOG_ERR("Error setting base address 0");
     51e:	4b0e      	ldr	r3, [pc, #56]	; (558 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x70>)
     520:	e7ec      	b.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
    err = esb_set_base_address_1(base_addr_1);
     522:	a802      	add	r0, sp, #8
     524:	f003 fe22 	bl	416c <esb_set_base_address_1>
    if (err) {
     528:	4604      	mov	r4, r0
     52a:	b108      	cbz	r0, 530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>
        LOG_ERR("Error setting base address 1");
     52c:	4b0b      	ldr	r3, [pc, #44]	; (55c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x74>)
     52e:	e7e5      	b.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
    err = esb_set_prefixes(addr_prefix, ARRAY_SIZE(addr_prefix));
     530:	2108      	movs	r1, #8
     532:	a803      	add	r0, sp, #12
     534:	f003 fe3c 	bl	41b0 <esb_set_prefixes>
    if (err) {
     538:	4604      	mov	r4, r0
     53a:	2800      	cmp	r0, #0
     53c:	d0e7      	beq.n	50e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x26>
        LOG_ERR("Error setting address prefix");
     53e:	4b08      	ldr	r3, [pc, #32]	; (560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>)
     540:	e7dc      	b.n	4fc <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x14>
     542:	bf00      	nop
     544:	00007768 	.word	0x00007768
     548:	000074d0 	.word	0x000074d0
     54c:	000003ed 	.word	0x000003ed
     550:	000076fa 	.word	0x000076fa
     554:	00007458 	.word	0x00007458
     558:	00007711 	.word	0x00007711
     55c:	0000772e 	.word	0x0000772e
     560:	0000774b 	.word	0x0000774b

00000564 <get_payload>:

    LOG_INF("Initialization complete");
    return 0;
}

struct esb_payload get_payload() {
     564:	b510      	push	{r4, lr}
    return rx_payload;
     566:	4b06      	ldr	r3, [pc, #24]	; (580 <get_payload+0x1c>)
     568:	4602      	mov	r2, r0
     56a:	f103 0124 	add.w	r1, r3, #36	; 0x24
     56e:	f853 4b04 	ldr.w	r4, [r3], #4
     572:	f842 4b04 	str.w	r4, [r2], #4
     576:	428b      	cmp	r3, r1
     578:	d1f9      	bne.n	56e <get_payload+0xa>
     57a:	781b      	ldrb	r3, [r3, #0]
     57c:	7013      	strb	r3, [r2, #0]
}
     57e:	bd10      	pop	{r4, pc}
     580:	20000b26 	.word	0x20000b26

00000584 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     588:	b08d      	sub	sp, #52	; 0x34
     58a:	461f      	mov	r7, r3
     58c:	9b16      	ldr	r3, [sp, #88]	; 0x58
     58e:	9202      	str	r2, [sp, #8]
     590:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     592:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     596:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     59a:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     59c:	1c53      	adds	r3, r2, #1

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     59e:	0782      	lsls	r2, r0, #30
{
     5a0:	4605      	mov	r5, r0
     5a2:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     5a4:	9304      	str	r3, [sp, #16]
	if ((uintptr_t)packaged % sizeof(void *)) {
     5a6:	f040 8221 	bne.w	9ec <CONFIG_ISR_STACK_SIZE+0x1ec>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     5aa:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     5ac:	2800      	cmp	r0, #0
     5ae:	f040 8220 	bne.w	9f2 <CONFIG_ISR_STACK_SIZE+0x1f2>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     5b2:	f001 0607 	and.w	r6, r1, #7
     5b6:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     5b8:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     5bc:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
     5c0:	f04f 0804 	mov.w	r8, #4
	s = fmt--;
     5c4:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     5c6:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     5ca:	4652      	mov	r2, sl
	bool parsing = false;
     5cc:	46d1      	mov	r9, sl
	size = sizeof(char *);
     5ce:	4641      	mov	r1, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     5d0:	b105      	cbz	r5, 5d4 <cbvprintf_package+0x50>
				*(const char **)buf = s;
     5d2:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     5d4:	9804      	ldr	r0, [sp, #16]
     5d6:	2800      	cmp	r0, #0
     5d8:	dc07      	bgt.n	5ea <cbvprintf_package+0x66>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     5da:	48cb      	ldr	r0, [pc, #812]	; (908 <CONFIG_ISR_STACK_SIZE+0x108>)
     5dc:	4287      	cmp	r7, r0
     5de:	f0c0 8141 	bcc.w	864 <CONFIG_ISR_STACK_SIZE+0x64>
     5e2:	48ca      	ldr	r0, [pc, #808]	; (90c <CONFIG_ISR_STACK_SIZE+0x10c>)
     5e4:	4287      	cmp	r7, r0
     5e6:	f080 813d 	bcs.w	864 <CONFIG_ISR_STACK_SIZE+0x64>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     5ea:	9802      	ldr	r0, [sp, #8]
     5ec:	f010 0e02 	ands.w	lr, r0, #2
     5f0:	f000 8151 	beq.w	896 <CONFIG_ISR_STACK_SIZE+0x96>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     5f4:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     5f8:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     5fa:	f1be 0f00 	cmp.w	lr, #0
     5fe:	f000 8137 	beq.w	870 <CONFIG_ISR_STACK_SIZE+0x70>
     602:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
     606:	f0c0 8133 	bcc.w	870 <CONFIG_ISR_STACK_SIZE+0x70>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
     60a:	f06f 0015 	mvn.w	r0, #21
     60e:	e0fe      	b.n	80e <CONFIG_ISR_STACK_SIZE+0xe>
		if (!parsing) {
     610:	f1b9 0f00 	cmp.w	r9, #0
     614:	d108      	bne.n	628 <cbvprintf_package+0xa4>
			if (*fmt == '%') {
     616:	2825      	cmp	r0, #37	; 0x25
     618:	f040 8141 	bne.w	89e <CONFIG_ISR_STACK_SIZE+0x9e>
				parsing = true;
     61c:	f04f 0901 	mov.w	r9, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
     620:	f04f 0804 	mov.w	r8, #4
			size = sizeof(intmax_t);
     624:	4641      	mov	r1, r8
     626:	e13a      	b.n	89e <CONFIG_ISR_STACK_SIZE+0x9e>
		switch (*fmt) {
     628:	282b      	cmp	r0, #43	; 0x2b
     62a:	d825      	bhi.n	678 <cbvprintf_package+0xf4>
     62c:	281f      	cmp	r0, #31
     62e:	d802      	bhi.n	636 <cbvprintf_package+0xb2>
			parsing = false;
     630:	f04f 0900 	mov.w	r9, #0
     634:	e133      	b.n	89e <CONFIG_ISR_STACK_SIZE+0x9e>
		switch (*fmt) {
     636:	f1a0 0c20 	sub.w	ip, r0, #32
     63a:	f1bc 0f0b 	cmp.w	ip, #11
     63e:	d8f7      	bhi.n	630 <cbvprintf_package+0xac>
     640:	f20f 0e04 	addw	lr, pc, #4
     644:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
     648:	0000089f 	.word	0x0000089f
     64c:	00000631 	.word	0x00000631
     650:	00000631 	.word	0x00000631
     654:	0000089f 	.word	0x0000089f
     658:	00000631 	.word	0x00000631
     65c:	00000631 	.word	0x00000631
     660:	00000631 	.word	0x00000631
     664:	00000631 	.word	0x00000631
     668:	00000631 	.word	0x00000631
     66c:	00000631 	.word	0x00000631
     670:	0000082f 	.word	0x0000082f
     674:	0000089f 	.word	0x0000089f
     678:	f1a0 0c2d 	sub.w	ip, r0, #45	; 0x2d
     67c:	fa5f fe8c 	uxtb.w	lr, ip
     680:	f1be 0f4d 	cmp.w	lr, #77	; 0x4d
     684:	d8d4      	bhi.n	630 <cbvprintf_package+0xac>
     686:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
     68a:	d8d1      	bhi.n	630 <cbvprintf_package+0xac>
     68c:	f20f 0e04 	addw	lr, pc, #4
     690:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
     694:	0000089f 	.word	0x0000089f
     698:	0000089f 	.word	0x0000089f
     69c:	00000631 	.word	0x00000631
     6a0:	0000089f 	.word	0x0000089f
     6a4:	0000089f 	.word	0x0000089f
     6a8:	0000089f 	.word	0x0000089f
     6ac:	0000089f 	.word	0x0000089f
     6b0:	0000089f 	.word	0x0000089f
     6b4:	0000089f 	.word	0x0000089f
     6b8:	0000089f 	.word	0x0000089f
     6bc:	0000089f 	.word	0x0000089f
     6c0:	0000089f 	.word	0x0000089f
     6c4:	0000089f 	.word	0x0000089f
     6c8:	00000631 	.word	0x00000631
     6cc:	00000631 	.word	0x00000631
     6d0:	00000631 	.word	0x00000631
     6d4:	00000631 	.word	0x00000631
     6d8:	00000631 	.word	0x00000631
     6dc:	00000631 	.word	0x00000631
     6e0:	00000631 	.word	0x00000631
     6e4:	000007eb 	.word	0x000007eb
     6e8:	00000631 	.word	0x00000631
     6ec:	00000631 	.word	0x00000631
     6f0:	00000631 	.word	0x00000631
     6f4:	000007eb 	.word	0x000007eb
     6f8:	000007eb 	.word	0x000007eb
     6fc:	000007eb 	.word	0x000007eb
     700:	00000631 	.word	0x00000631
     704:	00000631 	.word	0x00000631
     708:	00000631 	.word	0x00000631
     70c:	00000631 	.word	0x00000631
     710:	0000089f 	.word	0x0000089f
     714:	00000631 	.word	0x00000631
     718:	00000631 	.word	0x00000631
     71c:	00000631 	.word	0x00000631
     720:	00000631 	.word	0x00000631
     724:	00000631 	.word	0x00000631
     728:	00000631 	.word	0x00000631
     72c:	00000631 	.word	0x00000631
     730:	00000631 	.word	0x00000631
     734:	00000631 	.word	0x00000631
     738:	00000631 	.word	0x00000631
     73c:	00000631 	.word	0x00000631
     740:	000007cd 	.word	0x000007cd
     744:	00000631 	.word	0x00000631
     748:	00000631 	.word	0x00000631
     74c:	00000631 	.word	0x00000631
     750:	00000631 	.word	0x00000631
     754:	00000631 	.word	0x00000631
     758:	00000631 	.word	0x00000631
     75c:	00000631 	.word	0x00000631
     760:	00000631 	.word	0x00000631
     764:	000007eb 	.word	0x000007eb
     768:	00000631 	.word	0x00000631
     76c:	000007cd 	.word	0x000007cd
     770:	000007cd 	.word	0x000007cd
     774:	000007eb 	.word	0x000007eb
     778:	000007eb 	.word	0x000007eb
     77c:	000007eb 	.word	0x000007eb
     780:	0000089f 	.word	0x0000089f
     784:	000007cd 	.word	0x000007cd
     788:	0000081f 	.word	0x0000081f
     78c:	00000631 	.word	0x00000631
     790:	0000089f 	.word	0x0000089f
     794:	00000631 	.word	0x00000631
     798:	00000825 	.word	0x00000825
     79c:	000007cd 	.word	0x000007cd
     7a0:	00000825 	.word	0x00000825
     7a4:	00000631 	.word	0x00000631
     7a8:	00000631 	.word	0x00000631
     7ac:	00000825 	.word	0x00000825
     7b0:	00000621 	.word	0x00000621
     7b4:	000007cd 	.word	0x000007cd
     7b8:	00000631 	.word	0x00000631
     7bc:	00000631 	.word	0x00000631
     7c0:	000007cd 	.word	0x000007cd
     7c4:	00000631 	.word	0x00000631
     7c8:	00000621 	.word	0x00000621
			if (fmt[-1] == 'l') {
     7cc:	f813 cc01 	ldrb.w	ip, [r3, #-1]
     7d0:	f1bc 0f6c 	cmp.w	ip, #108	; 0x6c
     7d4:	d129      	bne.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
				if (fmt[-2] == 'l') {
     7d6:	f813 1c02 	ldrb.w	r1, [r3, #-2]
     7da:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
     7dc:	f04f 0900 	mov.w	r9, #0
				if (fmt[-2] == 'l') {
     7e0:	d03d      	beq.n	85e <CONFIG_ISR_STACK_SIZE+0x5e>
			align = VA_STACK_ALIGN(void *);
     7e2:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long long);
     7e6:	4641      	mov	r1, r8
     7e8:	e021      	b.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
				v.ld = va_arg(ap, long double);
     7ea:	9800      	ldr	r0, [sp, #0]
     7ec:	f100 0b07 	add.w	fp, r0, #7
     7f0:	f02b 0007 	bic.w	r0, fp, #7
     7f4:	e8f0 8902 	ldrd	r8, r9, [r0], #8
			buf = (void *) ROUND_UP(buf, align);
     7f8:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
     7fa:	9000      	str	r0, [sp, #0]
			buf = (void *) ROUND_UP(buf, align);
     7fc:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
     800:	b155      	cbz	r5, 818 <CONFIG_ISR_STACK_SIZE+0x18>
				if (BUF_OFFSET + size > len) {
     802:	9805      	ldr	r0, [sp, #20]
     804:	4420      	add	r0, r4
     806:	42b0      	cmp	r0, r6
     808:	d904      	bls.n	814 <CONFIG_ISR_STACK_SIZE+0x14>
					return -ENOSPC;
     80a:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     80e:	b00d      	add	sp, #52	; 0x34
     810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
     814:	e9c4 8900 	strd	r8, r9, [r4]
			buf += size;
     818:	3408      	adds	r4, #8
			parsing = false;
     81a:	f04f 0900 	mov.w	r9, #0
			align = VA_STACK_ALIGN(intmax_t);
     81e:	f04f 0808 	mov.w	r8, #8
     822:	e6ff      	b.n	624 <cbvprintf_package+0xa0>
			parsing = false;
     824:	f04f 0900 	mov.w	r9, #0
     828:	e7db      	b.n	7e2 <cbvprintf_package+0x25e>
			parsing = false;
     82a:	f04f 0900 	mov.w	r9, #0
		buf = (void *) ROUND_UP(buf, align);
     82e:	3c01      	subs	r4, #1
     830:	4444      	add	r4, r8
     832:	f1c8 0c00 	rsb	ip, r8, #0
     836:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     83a:	b125      	cbz	r5, 846 <CONFIG_ISR_STACK_SIZE+0x46>
     83c:	eba1 0c05 	sub.w	ip, r1, r5
     840:	44a4      	add	ip, r4
     842:	45b4      	cmp	ip, r6
     844:	d8e1      	bhi.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
		if (*fmt == 's') {
     846:	2873      	cmp	r0, #115	; 0x73
     848:	d152      	bne.n	8f0 <CONFIG_ISR_STACK_SIZE+0xf0>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     84a:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
     84c:	f8dd b000 	ldr.w	fp, [sp]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     850:	3801      	subs	r0, #1
			s = va_arg(ap, char *);
     852:	f85b 7b04 	ldr.w	r7, [fp], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     856:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
     858:	f8cd b000 	str.w	fp, [sp]
     85c:	e6b8      	b.n	5d0 <cbvprintf_package+0x4c>
					align = VA_STACK_ALIGN(long long);
     85e:	f04f 0808 	mov.w	r8, #8
     862:	e7c0      	b.n	7e6 <cbvprintf_package+0x262>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     864:	9802      	ldr	r0, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     866:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     86a:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
     86e:	e6c3      	b.n	5f8 <cbvprintf_package+0x74>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     870:	2a0f      	cmp	r2, #15
     872:	f63f aeca 	bhi.w	60a <cbvprintf_package+0x86>
				if (buf0 != NULL) {
     876:	b345      	cbz	r5, 8ca <CONFIG_ISR_STACK_SIZE+0xca>
					str_ptr_pos[s_idx] = s_ptr_idx;
     878:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
     87c:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
     880:	4496      	add	lr, r2
     882:	f1bc 0f00 	cmp.w	ip, #0
     886:	d01a      	beq.n	8be <CONFIG_ISR_STACK_SIZE+0xbe>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     888:	f060 007f 	orn	r0, r0, #127	; 0x7f
     88c:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
     890:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
     894:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
     896:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
     89a:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
     89c:	9005      	str	r0, [sp, #20]
	while (*++fmt != '\0') {
     89e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     8a2:	2800      	cmp	r0, #0
     8a4:	f47f aeb4 	bne.w	610 <cbvprintf_package+0x8c>
	if (BUF_OFFSET / sizeof(int) > 255) {
     8a8:	1b61      	subs	r1, r4, r5
     8aa:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
     8ae:	f4bf aeac 	bcs.w	60a <cbvprintf_package+0x86>
	if (buf0 == NULL) {
     8b2:	2d00      	cmp	r5, #0
     8b4:	d13e      	bne.n	934 <CONFIG_ISR_STACK_SIZE+0x134>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     8b6:	f1a6 0408 	sub.w	r4, r6, #8
     8ba:	1860      	adds	r0, r4, r1
     8bc:	e7a7      	b.n	80e <CONFIG_ISR_STACK_SIZE+0xe>
					str_ptr_pos[s_idx] = s_ptr_idx;
     8be:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
     8c2:	9803      	ldr	r0, [sp, #12]
     8c4:	3001      	adds	r0, #1
     8c6:	9003      	str	r0, [sp, #12]
     8c8:	e7e4      	b.n	894 <CONFIG_ISR_STACK_SIZE+0x94>
				} else if (is_ro || rws_pos_en) {
     8ca:	f1bc 0f00 	cmp.w	ip, #0
     8ce:	d101      	bne.n	8d4 <CONFIG_ISR_STACK_SIZE+0xd4>
     8d0:	9801      	ldr	r0, [sp, #4]
     8d2:	b108      	cbz	r0, 8d8 <CONFIG_ISR_STACK_SIZE+0xd8>
					len += 1;
     8d4:	3601      	adds	r6, #1
     8d6:	e7dd      	b.n	894 <CONFIG_ISR_STACK_SIZE+0x94>
					len += strlen(s) + 1 + 1;
     8d8:	4638      	mov	r0, r7
     8da:	e9cd 1206 	strd	r1, r2, [sp, #24]
     8de:	9305      	str	r3, [sp, #20]
     8e0:	f006 f89f 	bl	6a22 <strlen>
     8e4:	3602      	adds	r6, #2
     8e6:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
     8ea:	9b05      	ldr	r3, [sp, #20]
     8ec:	4406      	add	r6, r0
     8ee:	e7d1      	b.n	894 <CONFIG_ISR_STACK_SIZE+0x94>
		} else if (size == sizeof(int)) {
     8f0:	2904      	cmp	r1, #4
     8f2:	d10d      	bne.n	910 <CONFIG_ISR_STACK_SIZE+0x110>
			int v = va_arg(ap, int);
     8f4:	9800      	ldr	r0, [sp, #0]
     8f6:	f100 0c04 	add.w	ip, r0, #4
			if (buf0 != NULL) {
     8fa:	b10d      	cbz	r5, 900 <CONFIG_ISR_STACK_SIZE+0x100>
			int v = va_arg(ap, int);
     8fc:	6800      	ldr	r0, [r0, #0]
				*(int *)buf = v;
     8fe:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
     900:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
     902:	f8cd c000 	str.w	ip, [sp]
     906:	e7ca      	b.n	89e <CONFIG_ISR_STACK_SIZE+0x9e>
     908:	00007270 	.word	0x00007270
     90c:	00007de4 	.word	0x00007de4
		} else if (size == sizeof(long long)) {
     910:	2908      	cmp	r1, #8
     912:	f47f ae7a 	bne.w	60a <cbvprintf_package+0x86>
			long long v = va_arg(ap, long long);
     916:	9800      	ldr	r0, [sp, #0]
     918:	3007      	adds	r0, #7
     91a:	f020 0007 	bic.w	r0, r0, #7
     91e:	f100 0c08 	add.w	ip, r0, #8
     922:	f8cd c000 	str.w	ip, [sp]
			if (buf0 != NULL) {
     926:	b11d      	cbz	r5, 930 <CONFIG_ISR_STACK_SIZE+0x130>
			long long v = va_arg(ap, long long);
     928:	e9d0 bc00 	ldrd	fp, ip, [r0]
     92c:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
     930:	3408      	adds	r4, #8
     932:	e7b4      	b.n	89e <CONFIG_ISR_STACK_SIZE+0x9e>
	if (rws_pos_en) {
     934:	9b01      	ldr	r3, [sp, #4]
	*(char **)buf0 = NULL;
     936:	6028      	str	r0, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
     938:	0889      	lsrs	r1, r1, #2
     93a:	7029      	strb	r1, [r5, #0]
		buf0[3] = s_rw_cnt;
     93c:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
     940:	b1a3      	cbz	r3, 96c <CONFIG_ISR_STACK_SIZE+0x16c>
		buf0[1] = 0;
     942:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
     944:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
     946:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
     94a:	f1ba 0f00 	cmp.w	sl, #0
     94e:	d006      	beq.n	95e <CONFIG_ISR_STACK_SIZE+0x15e>
     950:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
     952:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
     956:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
     95a:	4562      	cmp	r2, ip
     95c:	d10a      	bne.n	974 <CONFIG_ISR_STACK_SIZE+0x174>
     95e:	f10d 0820 	add.w	r8, sp, #32
     962:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
     966:	f1c5 0b01 	rsb	fp, r5, #1
     96a:	e039      	b.n	9e0 <CONFIG_ISR_STACK_SIZE+0x1e0>
		buf0[3] = 0;
     96c:	9b01      	ldr	r3, [sp, #4]
		buf0[1] = s_rw_cnt;
     96e:	7069      	strb	r1, [r5, #1]
		buf0[3] = 0;
     970:	70eb      	strb	r3, [r5, #3]
     972:	e7e8      	b.n	946 <CONFIG_ISR_STACK_SIZE+0x146>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     974:	f810 1b01 	ldrb.w	r1, [r0], #1
     978:	060b      	lsls	r3, r1, #24
     97a:	d508      	bpl.n	98e <CONFIG_ISR_STACK_SIZE+0x18e>
			if (BUF_OFFSET + 1 > len) {
     97c:	eb04 080e 	add.w	r8, r4, lr
     980:	45b0      	cmp	r8, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     982:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     986:	f63f af40 	bhi.w	80a <CONFIG_ISR_STACK_SIZE+0xa>
			*buf++ = pos;
     98a:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
     98e:	f10c 0c01 	add.w	ip, ip, #1
     992:	e7e2      	b.n	95a <CONFIG_ISR_STACK_SIZE+0x15a>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     994:	f1ba 0f00 	cmp.w	sl, #0
     998:	d003      	beq.n	9a2 <CONFIG_ISR_STACK_SIZE+0x1a2>
     99a:	f998 2000 	ldrsb.w	r2, [r8]
     99e:	2a00      	cmp	r2, #0
     9a0:	db1c      	blt.n	9dc <CONFIG_ISR_STACK_SIZE+0x1dc>
		if (rws_pos_en) {
     9a2:	9b01      	ldr	r3, [sp, #4]
     9a4:	bb03      	cbnz	r3, 9e8 <CONFIG_ISR_STACK_SIZE+0x1e8>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     9a6:	f898 2000 	ldrb.w	r2, [r8]
     9aa:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     9ae:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
     9b2:	4638      	mov	r0, r7
     9b4:	f006 f835 	bl	6a22 <strlen>
     9b8:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
     9ba:	eb04 010b 	add.w	r1, r4, fp
     9be:	4411      	add	r1, r2
     9c0:	42b1      	cmp	r1, r6
     9c2:	f63f af22 	bhi.w	80a <CONFIG_ISR_STACK_SIZE+0xa>
		*buf++ = str_ptr_pos[i];
     9c6:	f898 1000 	ldrb.w	r1, [r8]
     9ca:	f804 1b01 	strb.w	r1, [r4], #1
		memcpy(buf, s, size);
     9ce:	4639      	mov	r1, r7
     9d0:	4620      	mov	r0, r4
     9d2:	9200      	str	r2, [sp, #0]
     9d4:	f006 f835 	bl	6a42 <memcpy>
		buf += size;
     9d8:	9a00      	ldr	r2, [sp, #0]
     9da:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
     9dc:	f108 0801 	add.w	r8, r8, #1
     9e0:	45c1      	cmp	r9, r8
     9e2:	d1d7      	bne.n	994 <CONFIG_ISR_STACK_SIZE+0x194>
	return BUF_OFFSET;
     9e4:	1b60      	subs	r0, r4, r5
     9e6:	e712      	b.n	80e <CONFIG_ISR_STACK_SIZE+0xe>
			size = 0;
     9e8:	2200      	movs	r2, #0
     9ea:	e7e6      	b.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
		return -EFAULT;
     9ec:	f06f 000d 	mvn.w	r0, #13
     9f0:	e70d      	b.n	80e <CONFIG_ISR_STACK_SIZE+0xe>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     9f2:	2907      	cmp	r1, #7
     9f4:	f63f ade2 	bhi.w	5bc <cbvprintf_package+0x38>
     9f8:	e707      	b.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
     9fa:	bf00      	nop

000009fc <cbprintf_package_copy>:
			  void *packaged,
			  size_t len,
			  uint32_t flags,
			  uint16_t *strl,
			  size_t strl_len)
{
     9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a00:	b08b      	sub	sp, #44	; 0x2c
     a02:	4606      	mov	r6, r0
     a04:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
     a08:	9304      	str	r3, [sp, #16]
     a0a:	4614      	mov	r4, r2
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;

	in_len != 0 ? in_len : get_package_len(in_packaged);
     a0c:	460f      	mov	r7, r1
     a0e:	b1b1      	cbz	r1, a3e <cbprintf_package_copy+0x42>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = buf[2];
     a10:	78b5      	ldrb	r5, [r6, #2]
     a12:	9505      	str	r5, [sp, #20]
	ro_cpy = ros_nbr &&
     a14:	bb35      	cbnz	r5, a64 <cbprintf_package_copy+0x68>
     a16:	46aa      	mov	sl, r5
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = buf[3];
     a18:	78f3      	ldrb	r3, [r6, #3]
     a1a:	9301      	str	r3, [sp, #4]
	rw_cpy = rws_nbr > 0 &&
     a1c:	b113      	cbz	r3, a24 <cbprintf_package_copy+0x28>

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
     a1e:	f01b 0f02 	tst.w	fp, #2
     a22:	d122      	bne.n	a6a <cbprintf_package_copy+0x6e>
     a24:	f1ba 0f00 	cmp.w	sl, #0
     a28:	d11f      	bne.n	a6a <cbprintf_package_copy+0x6e>
		if (packaged) {
     a2a:	b124      	cbz	r4, a36 <cbprintf_package_copy+0x3a>
			memcpy(packaged, in_packaged, in_len);
     a2c:	463a      	mov	r2, r7
     a2e:	4631      	mov	r1, r6
     a30:	4620      	mov	r0, r4
     a32:	f006 f806 	bl	6a42 <memcpy>
			}

			str_pos++;
		}

		return out_len;
     a36:	4638      	mov	r0, r7
		rem -= cpy_len;
		dst += cpy_len;
	}

	return len - rem;
}
     a38:	b00b      	add	sp, #44	; 0x2c
     a3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s_nbr     = buf[1];
     a3e:	f890 9001 	ldrb.w	r9, [r0, #1]
	buf += ros_nbr;
     a42:	78b5      	ldrb	r5, [r6, #2]
     a44:	7800      	ldrb	r0, [r0, #0]
     a46:	eb05 0580 	add.w	r5, r5, r0, lsl #2
     a4a:	4435      	add	r5, r6
	for (int i = 0; i < s_nbr; i++) {
     a4c:	468a      	mov	sl, r1
     a4e:	45ca      	cmp	sl, r9
     a50:	d2de      	bcs.n	a10 <cbprintf_package_copy+0x14>
		buf++;
     a52:	3501      	adds	r5, #1
		buf += strlen((const char *)buf) + 1;
     a54:	4628      	mov	r0, r5
     a56:	f005 ffe4 	bl	6a22 <strlen>
     a5a:	3001      	adds	r0, #1
     a5c:	4405      	add	r5, r0
	for (int i = 0; i < s_nbr; i++) {
     a5e:	f10a 0a01 	add.w	sl, sl, #1
     a62:	e7f4      	b.n	a4e <cbprintf_package_copy+0x52>
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
     a64:	f00b 0a01 	and.w	sl, fp, #1
     a68:	e7d6      	b.n	a18 <cbprintf_package_copy+0x1c>
	args_size = buf[0] * sizeof(int);
     a6a:	f896 9000 	ldrb.w	r9, [r6]
     a6e:	ea4f 0389 	mov.w	r3, r9, lsl #2
     a72:	9303      	str	r3, [sp, #12]
	uint8_t *str_pos = &buf[args_size];
     a74:	eb06 0989 	add.w	r9, r6, r9, lsl #2
	if (packaged == NULL) {
     a78:	2c00      	cmp	r4, #0
     a7a:	d15b      	bne.n	b34 <cbprintf_package_copy+0x138>
		if (ro_cpy) {
     a7c:	f1ba 0f00 	cmp.w	sl, #0
     a80:	d032      	beq.n	ae8 <cbprintf_package_copy+0xec>
     a82:	444d      	add	r5, r9
			for (int i = 0; i < ros_nbr; i++) {
     a84:	454d      	cmp	r5, r9
     a86:	d11d      	bne.n	ac4 <cbprintf_package_copy+0xc8>
     a88:	46a9      	mov	r9, r5
		bool drop_ro_str_pos = !(flags &
     a8a:	f8dd a004 	ldr.w	sl, [sp, #4]
     a8e:	f8df c204 	ldr.w	ip, [pc, #516]	; c94 <cbprintf_package_copy+0x298>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     a92:	4981      	ldr	r1, [pc, #516]	; (c98 <cbprintf_package_copy+0x29c>)
		bool drop_ro_str_pos = !(flags &
     a94:	f00b 0805 	and.w	r8, fp, #5
		for (int i = 0; i < rws_nbr; i++) {
     a98:	464d      	mov	r5, r9
     a9a:	44ca      	add	sl, r9
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     a9c:	f00b 0202 	and.w	r2, fp, #2
		for (int i = 0; i < rws_nbr; i++) {
     aa0:	45aa      	cmp	sl, r5
     aa2:	d0c8      	beq.n	a36 <cbprintf_package_copy+0x3a>
			const char *str = *(const char **)&buf32[*str_pos];
     aa4:	f815 0b01 	ldrb.w	r0, [r5], #1
     aa8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
     aac:	4560      	cmp	r0, ip
     aae:	d324      	bcc.n	afa <cbprintf_package_copy+0xfe>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     ab0:	4288      	cmp	r0, r1
     ab2:	d222      	bcs.n	afa <cbprintf_package_copy+0xfe>
     ab4:	f01b 0f01 	tst.w	fp, #1
     ab8:	d139      	bne.n	b2e <cbprintf_package_copy+0x132>
			if (is_ro && drop_ro_str_pos) {
     aba:	f1b8 0f00 	cmp.w	r8, #0
     abe:	d1ef      	bne.n	aa0 <cbprintf_package_copy+0xa4>
				out_len--;
     ac0:	3f01      	subs	r7, #1
		for (int i = 0; i < rws_nbr; i++) {
     ac2:	e7ed      	b.n	aa0 <cbprintf_package_copy+0xa4>
				const char *str = *(const char **)&buf32[*str_pos];
     ac4:	f819 3b01 	ldrb.w	r3, [r9], #1
		return 1 + strlen(str);
     ac8:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
     acc:	f005 ffa9 	bl	6a22 <strlen>
				if (strl && strl_cnt < strl_len) {
     ad0:	9b15      	ldr	r3, [sp, #84]	; 0x54
		return 1 + strlen(str);
     ad2:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     ad4:	b133      	cbz	r3, ae4 <cbprintf_package_copy+0xe8>
     ad6:	9b16      	ldr	r3, [sp, #88]	; 0x58
     ad8:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
     ada:	bf3e      	ittt	cc
     adc:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
     ade:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
     ae2:	3401      	addcc	r4, #1
				out_len += len;
     ae4:	4407      	add	r7, r0
			for (int i = 0; i < ros_nbr; i++) {
     ae6:	e7cd      	b.n	a84 <cbprintf_package_copy+0x88>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     ae8:	b12d      	cbz	r5, af6 <cbprintf_package_copy+0xfa>
     aea:	f01b 0404 	ands.w	r4, fp, #4
     aee:	d0cc      	beq.n	a8a <cbprintf_package_copy+0x8e>
				str_pos += ros_nbr;
     af0:	44a9      	add	r9, r5
	size_t strl_cnt = 0;
     af2:	4654      	mov	r4, sl
     af4:	e7c9      	b.n	a8a <cbprintf_package_copy+0x8e>
     af6:	462c      	mov	r4, r5
     af8:	e7c7      	b.n	a8a <cbprintf_package_copy+0x8e>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     afa:	2a00      	cmp	r2, #0
     afc:	d0d0      	beq.n	aa0 <cbprintf_package_copy+0xa4>
     afe:	f04f 0900 	mov.w	r9, #0
		return 1 + strlen(str);
     b02:	9201      	str	r2, [sp, #4]
     b04:	f005 ff8d 	bl	6a22 <strlen>
				if (strl && strl_cnt < strl_len) {
     b08:	9b15      	ldr	r3, [sp, #84]	; 0x54
     b0a:	f8df c188 	ldr.w	ip, [pc, #392]	; c94 <cbprintf_package_copy+0x298>
     b0e:	9a01      	ldr	r2, [sp, #4]
     b10:	4961      	ldr	r1, [pc, #388]	; (c98 <cbprintf_package_copy+0x29c>)
		return 1 + strlen(str);
     b12:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     b14:	b133      	cbz	r3, b24 <cbprintf_package_copy+0x128>
     b16:	9b16      	ldr	r3, [sp, #88]	; 0x58
     b18:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
     b1a:	bf3e      	ittt	cc
     b1c:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
     b1e:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
     b22:	3401      	addcc	r4, #1
				out_len += len;
     b24:	4407      	add	r7, r0
			if (is_ro && drop_ro_str_pos) {
     b26:	f1b9 0f00 	cmp.w	r9, #0
     b2a:	d0b9      	beq.n	aa0 <cbprintf_package_copy+0xa4>
     b2c:	e7c5      	b.n	aba <cbprintf_package_copy+0xbe>
     b2e:	f04f 0901 	mov.w	r9, #1
     b32:	e7e6      	b.n	b02 <cbprintf_package_copy+0x106>
	memcpy(dst, in_packaged, args_size);
     b34:	9a03      	ldr	r2, [sp, #12]
     b36:	4631      	mov	r1, r6
     b38:	4620      	mov	r0, r4
     b3a:	f005 ff82 	bl	6a42 <memcpy>
	dst += args_size;
     b3e:	9b03      	ldr	r3, [sp, #12]
     b40:	18e3      	adds	r3, r4, r3
     b42:	9302      	str	r3, [sp, #8]
	if (ro_cpy) {
     b44:	f1ba 0f00 	cmp.w	sl, #0
     b48:	d00a      	beq.n	b60 <cbprintf_package_copy+0x164>
		memcpy(cpy_str_pos, str_pos, ros_nbr);
     b4a:	4649      	mov	r1, r9
     b4c:	462a      	mov	r2, r5
     b4e:	a806      	add	r0, sp, #24
     b50:	f005 ff77 	bl	6a42 <memcpy>
		dst_hdr[2] = 0;
     b54:	2300      	movs	r3, #0
     b56:	70a3      	strb	r3, [r4, #2]
		str_pos += ros_nbr;
     b58:	44a9      	add	r9, r5
	dst += args_size;
     b5a:	f8dd 8008 	ldr.w	r8, [sp, #8]
     b5e:	e00d      	b.n	b7c <cbprintf_package_copy+0x180>
		if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     b60:	b1bd      	cbz	r5, b92 <cbprintf_package_copy+0x196>
     b62:	f01b 0f04 	tst.w	fp, #4
     b66:	d014      	beq.n	b92 <cbprintf_package_copy+0x196>
			memcpy(dst, str_pos, ros_nbr);
     b68:	462a      	mov	r2, r5
     b6a:	4649      	mov	r1, r9
     b6c:	9802      	ldr	r0, [sp, #8]
     b6e:	f005 ff68 	bl	6a42 <memcpy>
			dst += ros_nbr;
     b72:	9b02      	ldr	r3, [sp, #8]
			str_pos += ros_nbr;
     b74:	44a9      	add	r9, r5
			dst += ros_nbr;
     b76:	eb03 0805 	add.w	r8, r3, r5
		scpy_cnt = 0;
     b7a:	4655      	mov	r5, sl
     b7c:	9b01      	ldr	r3, [sp, #4]
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     b7e:	f00b 0e02 	and.w	lr, fp, #2
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     b82:	f00b 0001 	and.w	r0, fp, #1
     b86:	464a      	mov	r2, r9
     b88:	eb09 0c03 	add.w	ip, r9, r3
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     b8c:	f00b 0b04 	and.w	fp, fp, #4
     b90:	e025      	b.n	bde <cbprintf_package_copy+0x1e2>
			dst_hdr[2] = 0;
     b92:	2500      	movs	r5, #0
     b94:	70a5      	strb	r5, [r4, #2]
     b96:	e7e0      	b.n	b5a <cbprintf_package_copy+0x15e>
		const char *str = *(const char **)&buf32[*str_pos];
     b98:	f812 3b01 	ldrb.w	r3, [r2], #1
     b9c:	f8df a0f4 	ldr.w	sl, [pc, #244]	; c94 <cbprintf_package_copy+0x298>
     ba0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
     ba4:	4551      	cmp	r1, sl
     ba6:	d303      	bcc.n	bb0 <cbprintf_package_copy+0x1b4>
     ba8:	f8df a0ec 	ldr.w	sl, [pc, #236]	; c98 <cbprintf_package_copy+0x29c>
     bac:	4551      	cmp	r1, sl
     bae:	d305      	bcc.n	bbc <cbprintf_package_copy+0x1c0>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     bb0:	f1be 0f00 	cmp.w	lr, #0
     bb4:	d103      	bne.n	bbe <cbprintf_package_copy+0x1c2>
				*dst++ = *str_pos;
     bb6:	f808 3b01 	strb.w	r3, [r8], #1
	for (int i = 0; i < rws_nbr; i++) {
     bba:	e010      	b.n	bde <cbprintf_package_copy+0x1e2>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     bbc:	b138      	cbz	r0, bce <cbprintf_package_copy+0x1d2>
				cpy_str_pos[scpy_cnt++] = *str_pos;
     bbe:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
     bc2:	1c69      	adds	r1, r5, #1
     bc4:	4455      	add	r5, sl
     bc6:	f805 3c10 	strb.w	r3, [r5, #-16]
     bca:	b2cd      	uxtb	r5, r1
     bcc:	e007      	b.n	bde <cbprintf_package_copy+0x1e2>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     bce:	f1bb 0f00 	cmp.w	fp, #0
     bd2:	d004      	beq.n	bde <cbprintf_package_copy+0x1e2>
				*dst++ = *str_pos;
     bd4:	f808 3b01 	strb.w	r3, [r8], #1
				dst_hdr[2]++;
     bd8:	78a3      	ldrb	r3, [r4, #2]
     bda:	3301      	adds	r3, #1
     bdc:	70a3      	strb	r3, [r4, #2]
	for (int i = 0; i < rws_nbr; i++) {
     bde:	4594      	cmp	ip, r2
     be0:	d1da      	bne.n	b98 <cbprintf_package_copy+0x19c>
	dst_hdr[1] += scpy_cnt;
     be2:	7863      	ldrb	r3, [r4, #1]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     be4:	9a01      	ldr	r2, [sp, #4]
	dst_hdr[1] += scpy_cnt;
     be6:	442b      	add	r3, r5
     be8:	7063      	strb	r3, [r4, #1]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
     bea:	9b02      	ldr	r3, [sp, #8]
     bec:	eba8 0b03 	sub.w	fp, r8, r3
     bf0:	78a3      	ldrb	r3, [r4, #2]
     bf2:	ebab 0b03 	sub.w	fp, fp, r3
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     bf6:	9b05      	ldr	r3, [sp, #20]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
     bf8:	f884 b003 	strb.w	fp, [r4, #3]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     bfc:	4413      	add	r3, r2
     bfe:	1aff      	subs	r7, r7, r3
     c00:	9b03      	ldr	r3, [sp, #12]
     c02:	1aff      	subs	r7, r7, r3
	memcpy(dst, str_pos, strs_len);
     c04:	9b01      	ldr	r3, [sp, #4]
     c06:	4640      	mov	r0, r8
     c08:	463a      	mov	r2, r7
     c0a:	eb09 0103 	add.w	r1, r9, r3
	dst += strs_len;
     c0e:	44b8      	add	r8, r7
	memcpy(dst, str_pos, strs_len);
     c10:	f005 ff17 	bl	6a42 <memcpy>
		return dst - dst_hdr;
     c14:	eba8 0004 	sub.w	r0, r8, r4
	if (scpy_cnt == 0) {
     c18:	2d00      	cmp	r5, #0
     c1a:	f43f af0d 	beq.w	a38 <cbprintf_package_copy+0x3c>
	size_t rem = len - ((size_t)(uintptr_t)(dst - dst_hdr));
     c1e:	9b04      	ldr	r3, [sp, #16]
     c20:	1a1c      	subs	r4, r3, r0
	if (rem <= scpy_cnt) {
     c22:	42a5      	cmp	r5, r4
     c24:	d302      	bcc.n	c2c <cbprintf_package_copy+0x230>
		return -ENOSPC;
     c26:	f06f 001b 	mvn.w	r0, #27
     c2a:	e705      	b.n	a38 <cbprintf_package_copy+0x3c>
	for (int i = 0; i < scpy_cnt; i++) {
     c2c:	f04f 0900 	mov.w	r9, #0
		uint8_t loc = cpy_str_pos[i];
     c30:	ab06      	add	r3, sp, #24
		uint16_t str_len = strl ? strl[i] : 0;
     c32:	9a15      	ldr	r2, [sp, #84]	; 0x54
		uint8_t loc = cpy_str_pos[i];
     c34:	f813 3009 	ldrb.w	r3, [r3, r9]
		const char *str = *(const char **)&buf32[loc];
     c38:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
     c3c:	b1c2      	cbz	r2, c70 <cbprintf_package_copy+0x274>
     c3e:	f832 7019 	ldrh.w	r7, [r2, r9, lsl #1]
		*dst = loc;
     c42:	46c2      	mov	sl, r8
		rem--;
     c44:	f104 3bff 	add.w	fp, r4, #4294967295
		*dst = loc;
     c48:	f80a 3b01 	strb.w	r3, [sl], #1
	if (strl) {
     c4c:	b197      	cbz	r7, c74 <cbprintf_package_copy+0x278>
		memcpy(dst, str, strl);
     c4e:	463a      	mov	r2, r7
     c50:	4650      	mov	r0, sl
     c52:	f005 fef6 	bl	6a42 <memcpy>
	for (int i = 0; i < scpy_cnt; i++) {
     c56:	f109 0901 	add.w	r9, r9, #1
     c5a:	454d      	cmp	r5, r9
		rem -= cpy_len;
     c5c:	ebab 0407 	sub.w	r4, fp, r7
		dst += cpy_len;
     c60:	eb0a 0807 	add.w	r8, sl, r7
	for (int i = 0; i < scpy_cnt; i++) {
     c64:	dce4      	bgt.n	c30 <cbprintf_package_copy+0x234>
	return len - rem;
     c66:	9b04      	ldr	r3, [sp, #16]
     c68:	441f      	add	r7, r3
     c6a:	eba7 000b 	sub.w	r0, r7, fp
     c6e:	e6e3      	b.n	a38 <cbprintf_package_copy+0x3c>
		uint16_t str_len = strl ? strl[i] : 0;
     c70:	9f15      	ldr	r7, [sp, #84]	; 0x54
     c72:	e7e6      	b.n	c42 <cbprintf_package_copy+0x246>
     c74:	3901      	subs	r1, #1
	if (strl) {
     c76:	2301      	movs	r3, #1
	for (size_t i = 0; i < num; i++) {
     c78:	429c      	cmp	r4, r3
     c7a:	d0d4      	beq.n	c26 <cbprintf_package_copy+0x22a>
		dst[i] = src[i];
     c7c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     c80:	f808 2003 	strb.w	r2, [r8, r3]
		if (src[i] == '\0') {
     c84:	1c58      	adds	r0, r3, #1
     c86:	b912      	cbnz	r2, c8e <cbprintf_package_copy+0x292>
		if (cpy_len < 0) {
     c88:	1e1f      	subs	r7, r3, #0
     c8a:	dae4      	bge.n	c56 <cbprintf_package_copy+0x25a>
     c8c:	e7cb      	b.n	c26 <cbprintf_package_copy+0x22a>
     c8e:	4603      	mov	r3, r0
     c90:	e7f2      	b.n	c78 <cbprintf_package_copy+0x27c>
     c92:	bf00      	nop
     c94:	00007270 	.word	0x00007270
     c98:	00007de4 	.word	0x00007de4

00000c9c <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
     c9c:	4b01      	ldr	r3, [pc, #4]	; (ca4 <__printk_hook_install+0x8>)
     c9e:	6018      	str	r0, [r3, #0]
}
     ca0:	4770      	bx	lr
     ca2:	bf00      	nop
     ca4:	20000000 	.word	0x20000000

00000ca8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     ca8:	b530      	push	{r4, r5, lr}
     caa:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     cac:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     cb0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     cb2:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
     cb4:	a901      	add	r1, sp, #4
     cb6:	4805      	ldr	r0, [pc, #20]	; (ccc <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     cb8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
     cba:	f000 f8e9 	bl	e90 <cbvprintf>

	if (ctx.count < ctx.max) {
     cbe:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     cc2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     cc4:	bfb8      	it	lt
     cc6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     cc8:	b005      	add	sp, #20
     cca:	bd30      	pop	{r4, r5, pc}
     ccc:	00006199 	.word	0x00006199

00000cd0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     cd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     cd4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     cd8:	f019 0808 	ands.w	r8, r9, #8
{
     cdc:	4604      	mov	r4, r0
     cde:	4693      	mov	fp, r2
	if (processing) {
     ce0:	d00d      	beq.n	cfe <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     ce2:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     ce4:	bf0c      	ite	eq
     ce6:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     cea:	f049 0920 	orrne.w	r9, r9, #32
     cee:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     cf2:	f38b 8811 	msr	BASEPRI, fp
     cf6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     cfa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     cfe:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     d02:	2902      	cmp	r1, #2
     d04:	d107      	bne.n	d16 <process_event+0x46>
			evt = process_recheck(mgr);
     d06:	4620      	mov	r0, r4
     d08:	f005 fa73 	bl	61f2 <process_recheck>
		if (evt == EVT_NOP) {
     d0c:	2800      	cmp	r0, #0
     d0e:	d0f0      	beq.n	cf2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     d10:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d12:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     d14:	d14e      	bne.n	db4 <process_event+0xe4>
			res = mgr->last_res;
     d16:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d18:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     d1a:	2f00      	cmp	r7, #0
     d1c:	da15      	bge.n	d4a <process_event+0x7a>
		*clients = mgr->clients;
     d1e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d20:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     d24:	e9c4 8800 	strd	r8, r8, [r4]
     d28:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     d2c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     d2e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     d30:	8b21      	ldrh	r1, [r4, #24]
     d32:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     d36:	45ca      	cmp	sl, r9
     d38:	d002      	beq.n	d40 <process_event+0x70>
		if (do_monitors
     d3a:	68a3      	ldr	r3, [r4, #8]
     d3c:	2b00      	cmp	r3, #0
     d3e:	d15a      	bne.n	df6 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     d40:	b90d      	cbnz	r5, d46 <process_event+0x76>
		    || (transit != NULL)) {
     d42:	2e00      	cmp	r6, #0
     d44:	d071      	beq.n	e2a <process_event+0x15a>
     d46:	2300      	movs	r3, #0
     d48:	e056      	b.n	df8 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d4a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     d4e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     d50:	2a01      	cmp	r2, #1
     d52:	d81e      	bhi.n	d92 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d54:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     d58:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     d5a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d5c:	b289      	uxth	r1, r1
     d5e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     d62:	d10a      	bne.n	d7a <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     d64:	b13d      	cbz	r5, d76 <process_event+0xa6>
     d66:	8b63      	ldrh	r3, [r4, #26]
     d68:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     d6a:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     d6c:	3301      	adds	r3, #1
     d6e:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     d70:	2a00      	cmp	r2, #0
     d72:	d1fa      	bne.n	d6a <process_event+0x9a>
     d74:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d76:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     d7a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     d7c:	4620      	mov	r0, r4
     d7e:	f005 fa38 	bl	61f2 <process_recheck>
     d82:	4606      	mov	r6, r0
     d84:	2800      	cmp	r0, #0
     d86:	d0d3      	beq.n	d30 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     d88:	8b23      	ldrh	r3, [r4, #24]
     d8a:	f043 0320 	orr.w	r3, r3, #32
     d8e:	8323      	strh	r3, [r4, #24]
     d90:	e7cd      	b.n	d2e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     d92:	2b04      	cmp	r3, #4
     d94:	d10c      	bne.n	db0 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d96:	f021 0107 	bic.w	r1, r1, #7
     d9a:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     d9c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     d9e:	4620      	mov	r0, r4
     da0:	f005 fa27 	bl	61f2 <process_recheck>
     da4:	4605      	mov	r5, r0
     da6:	2800      	cmp	r0, #0
     da8:	d0c1      	beq.n	d2e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     daa:	f041 0120 	orr.w	r1, r1, #32
     dae:	8321      	strh	r1, [r4, #24]
     db0:	2500      	movs	r5, #0
     db2:	e7bc      	b.n	d2e <process_event+0x5e>
		} else if (evt == EVT_START) {
     db4:	2803      	cmp	r0, #3
     db6:	d109      	bne.n	dcc <process_event+0xfc>
			transit = mgr->transitions->start;
     db8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dba:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     dbe:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dc0:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     dc4:	8323      	strh	r3, [r4, #24]
}
     dc6:	2500      	movs	r5, #0
		res = 0;
     dc8:	462f      	mov	r7, r5
     dca:	e7b1      	b.n	d30 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     dcc:	2804      	cmp	r0, #4
     dce:	d106      	bne.n	dde <process_event+0x10e>
			transit = mgr->transitions->stop;
     dd0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dd2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     dd6:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dd8:	f043 0304 	orr.w	r3, r3, #4
     ddc:	e7f2      	b.n	dc4 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     dde:	2805      	cmp	r0, #5
     de0:	d106      	bne.n	df0 <process_event+0x120>
			transit = mgr->transitions->reset;
     de2:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     de4:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     de8:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dea:	f043 0305 	orr.w	r3, r3, #5
     dee:	e7e9      	b.n	dc4 <process_event+0xf4>
     df0:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     df2:	462e      	mov	r6, r5
     df4:	e7e8      	b.n	dc8 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     df6:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     df8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     dfc:	8321      	strh	r1, [r4, #24]
     dfe:	f38b 8811 	msr	BASEPRI, fp
     e02:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     e06:	b9fb      	cbnz	r3, e48 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     e08:	bb85      	cbnz	r5, e6c <process_event+0x19c>
			if (transit != NULL) {
     e0a:	b116      	cbz	r6, e12 <process_event+0x142>
				transit(mgr, transition_complete);
     e0c:	491f      	ldr	r1, [pc, #124]	; (e8c <process_event+0x1bc>)
     e0e:	4620      	mov	r0, r4
     e10:	47b0      	blx	r6
	__asm__ volatile(
     e12:	f04f 0320 	mov.w	r3, #32
     e16:	f3ef 8b11 	mrs	fp, BASEPRI
     e1a:	f383 8812 	msr	BASEPRI_MAX, r3
     e1e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     e22:	8b23      	ldrh	r3, [r4, #24]
     e24:	f023 0308 	bic.w	r3, r3, #8
     e28:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     e2a:	8b23      	ldrh	r3, [r4, #24]
     e2c:	06da      	lsls	r2, r3, #27
     e2e:	d525      	bpl.n	e7c <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     e30:	f023 0310 	bic.w	r3, r3, #16
     e34:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     e36:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     e38:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     e3c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     e40:	2900      	cmp	r1, #0
     e42:	f47f af5e 	bne.w	d02 <process_event+0x32>
out:
     e46:	e754      	b.n	cf2 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     e48:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     e4a:	2900      	cmp	r1, #0
     e4c:	d0dc      	beq.n	e08 <process_event+0x138>
	return node->next;
     e4e:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     e52:	f8d1 b004 	ldr.w	fp, [r1, #4]
     e56:	463b      	mov	r3, r7
     e58:	4652      	mov	r2, sl
     e5a:	4620      	mov	r0, r4
     e5c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     e5e:	f1b9 0f00 	cmp.w	r9, #0
     e62:	d0d1      	beq.n	e08 <process_event+0x138>
     e64:	4649      	mov	r1, r9
     e66:	f8d9 9000 	ldr.w	r9, [r9]
     e6a:	e7f2      	b.n	e52 <process_event+0x182>
     e6c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     e6e:	463b      	mov	r3, r7
     e70:	4652      	mov	r2, sl
     e72:	4620      	mov	r0, r4
     e74:	682d      	ldr	r5, [r5, #0]
     e76:	f005 f9d8 	bl	622a <notify_one>
     e7a:	e7c5      	b.n	e08 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     e7c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     e80:	bf1e      	ittt	ne
     e82:	f023 0320 	bicne.w	r3, r3, #32
     e86:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     e88:	2102      	movne	r1, #2
     e8a:	e7d5      	b.n	e38 <process_event+0x168>
     e8c:	00006257 	.word	0x00006257

00000e90 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     e94:	b091      	sub	sp, #68	; 0x44
     e96:	468b      	mov	fp, r1
     e98:	9002      	str	r0, [sp, #8]
     e9a:	4692      	mov	sl, r2
     e9c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     e9e:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     ea0:	f89a 0000 	ldrb.w	r0, [sl]
     ea4:	b908      	cbnz	r0, eaa <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     ea6:	4628      	mov	r0, r5
     ea8:	e35f      	b.n	156a <CONFIG_FPROTECT_BLOCK_SIZE+0x56a>
		if (*fp != '%') {
     eaa:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     eac:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     eb0:	d007      	beq.n	ec2 <cbvprintf+0x32>
			OUTC('%');
     eb2:	9b02      	ldr	r3, [sp, #8]
     eb4:	4659      	mov	r1, fp
     eb6:	4798      	blx	r3
     eb8:	2800      	cmp	r0, #0
     eba:	f2c0 8356 	blt.w	156a <CONFIG_FPROTECT_BLOCK_SIZE+0x56a>
     ebe:	3501      	adds	r5, #1
			break;
     ec0:	e212      	b.n	12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>
		} state = {
     ec2:	2218      	movs	r2, #24
     ec4:	2100      	movs	r1, #0
     ec6:	a80a      	add	r0, sp, #40	; 0x28
     ec8:	f005 fdc6 	bl	6a58 <memset>
	if (*sp == '%') {
     ecc:	f89a 3001 	ldrb.w	r3, [sl, #1]
     ed0:	2b25      	cmp	r3, #37	; 0x25
     ed2:	d078      	beq.n	fc6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x26>
     ed4:	2200      	movs	r2, #0
     ed6:	4610      	mov	r0, r2
     ed8:	4696      	mov	lr, r2
     eda:	4694      	mov	ip, r2
     edc:	4616      	mov	r6, r2
     ede:	4639      	mov	r1, r7
		switch (*sp) {
     ee0:	f817 3b01 	ldrb.w	r3, [r7], #1
     ee4:	2b2b      	cmp	r3, #43	; 0x2b
     ee6:	f000 809d 	beq.w	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
     eea:	f200 8094 	bhi.w	1016 <CONFIG_FPROTECT_BLOCK_SIZE+0x16>
     eee:	2b20      	cmp	r3, #32
     ef0:	f000 809b 	beq.w	102a <CONFIG_FPROTECT_BLOCK_SIZE+0x2a>
     ef4:	2b23      	cmp	r3, #35	; 0x23
     ef6:	f000 809b 	beq.w	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
     efa:	b12e      	cbz	r6, f08 <cbvprintf+0x78>
     efc:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     f00:	f046 0604 	orr.w	r6, r6, #4
     f04:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     f08:	f1bc 0f00 	cmp.w	ip, #0
     f0c:	d005      	beq.n	f1a <cbvprintf+0x8a>
     f0e:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     f12:	f046 0608 	orr.w	r6, r6, #8
     f16:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     f1a:	f1be 0f00 	cmp.w	lr, #0
     f1e:	d005      	beq.n	f2c <cbvprintf+0x9c>
     f20:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     f24:	f046 0610 	orr.w	r6, r6, #16
     f28:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     f2c:	b128      	cbz	r0, f3a <cbvprintf+0xaa>
     f2e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     f32:	f040 0020 	orr.w	r0, r0, #32
     f36:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     f3a:	b12a      	cbz	r2, f48 <cbvprintf+0xb8>
     f3c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     f40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     f44:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     f48:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     f4c:	f002 0044 	and.w	r0, r2, #68	; 0x44
     f50:	2844      	cmp	r0, #68	; 0x44
     f52:	d103      	bne.n	f5c <cbvprintf+0xcc>
		conv->flag_zero = false;
     f54:	f36f 1286 	bfc	r2, #6, #1
     f58:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     f5c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     f60:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     f62:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     f66:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     f6a:	d17b      	bne.n	1064 <CONFIG_FPROTECT_BLOCK_SIZE+0x64>
		conv->width_star = true;
     f6c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     f70:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     f74:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     f76:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     f7a:	781a      	ldrb	r2, [r3, #0]
     f7c:	2a2e      	cmp	r2, #46	; 0x2e
     f7e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     f82:	bf0c      	ite	eq
     f84:	2101      	moveq	r1, #1
     f86:	2100      	movne	r1, #0
     f88:	f361 0241 	bfi	r2, r1, #1, #1
     f8c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     f90:	d174      	bne.n	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
	if (*sp == '*') {
     f92:	785a      	ldrb	r2, [r3, #1]
     f94:	2a2a      	cmp	r2, #42	; 0x2a
     f96:	d06a      	beq.n	106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
	++sp;
     f98:	3301      	adds	r3, #1
	size_t val = 0;
     f9a:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     f9c:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     f9e:	4618      	mov	r0, r3
     fa0:	f810 2b01 	ldrb.w	r2, [r0], #1
     fa4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     fa8:	2f09      	cmp	r7, #9
     faa:	f240 808e 	bls.w	10ca <CONFIG_FPROTECT_BLOCK_SIZE+0xca>
	conv->unsupported |= ((conv->prec_value < 0)
     fae:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     fb2:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     fb4:	f3c2 0040 	ubfx	r0, r2, #1, #1
     fb8:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     fbc:	f361 0241 	bfi	r2, r1, #1, #1
     fc0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     fc4:	e05a      	b.n	107c <CONFIG_FPROTECT_BLOCK_SIZE+0x7c>
		conv->specifier = *sp++;
     fc6:	f10a 0702 	add.w	r7, sl, #2
     fca:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     fce:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     fd2:	07d9      	lsls	r1, r3, #31
     fd4:	f140 8149 	bpl.w	126a <CONFIG_FPROTECT_BLOCK_SIZE+0x26a>
			width = va_arg(ap, int);
     fd8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     fdc:	f1b9 0f00 	cmp.w	r9, #0
     fe0:	da07      	bge.n	ff2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x52>
				conv->flag_dash = true;
     fe2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     fe6:	f042 0204 	orr.w	r2, r2, #4
     fea:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     fee:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     ff2:	075a      	lsls	r2, r3, #29
     ff4:	f140 8142 	bpl.w	127c <CONFIG_FPROTECT_BLOCK_SIZE+0x27c>
			int arg = va_arg(ap, int);
     ff8:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     ffc:	f1b8 0f00 	cmp.w	r8, #0
    1000:	f280 8141 	bge.w	1286 <CONFIG_FPROTECT_BLOCK_SIZE+0x286>
				conv->prec_present = false;
    1004:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1008:	f36f 0341 	bfc	r3, #1, #1
    100c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1010:	f04f 38ff 	mov.w	r8, #4294967295
    1014:	e137      	b.n	1286 <CONFIG_FPROTECT_BLOCK_SIZE+0x286>
		switch (*sp) {
    1016:	2b2d      	cmp	r3, #45	; 0x2d
    1018:	d00c      	beq.n	1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>
    101a:	2b30      	cmp	r3, #48	; 0x30
    101c:	f47f af6d 	bne.w	efa <cbvprintf+0x6a>
			conv->flag_zero = true;
    1020:	2201      	movs	r2, #1
	} while (loop);
    1022:	e75c      	b.n	ede <cbvprintf+0x4e>
			conv->flag_plus = true;
    1024:	f04f 0c01 	mov.w	ip, #1
    1028:	e759      	b.n	ede <cbvprintf+0x4e>
			conv->flag_space = true;
    102a:	f04f 0e01 	mov.w	lr, #1
    102e:	e756      	b.n	ede <cbvprintf+0x4e>
			conv->flag_hash = true;
    1030:	2001      	movs	r0, #1
    1032:	e754      	b.n	ede <cbvprintf+0x4e>
		switch (*sp) {
    1034:	2601      	movs	r6, #1
    1036:	e752      	b.n	ede <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    1038:	fb0c 0202 	mla	r2, ip, r2, r0
    103c:	3a30      	subs	r2, #48	; 0x30
    103e:	4633      	mov	r3, r6
    1040:	461e      	mov	r6, r3
    1042:	f816 0b01 	ldrb.w	r0, [r6], #1
    1046:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    104a:	2f09      	cmp	r7, #9
    104c:	d9f4      	bls.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
	if (sp != wp) {
    104e:	4299      	cmp	r1, r3
    1050:	d093      	beq.n	f7a <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1052:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    1056:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    1058:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    105a:	f362 0141 	bfi	r1, r2, #1, #1
    105e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    1062:	e78a      	b.n	f7a <cbvprintf+0xea>
    1064:	460b      	mov	r3, r1
	size_t val = 0;
    1066:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1068:	f04f 0c0a 	mov.w	ip, #10
    106c:	e7e8      	b.n	1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>
		conv->prec_star = true;
    106e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1072:	f042 0204 	orr.w	r2, r2, #4
    1076:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    107a:	3302      	adds	r3, #2
	switch (*sp) {
    107c:	461f      	mov	r7, r3
    107e:	f817 2b01 	ldrb.w	r2, [r7], #1
    1082:	2a6c      	cmp	r2, #108	; 0x6c
    1084:	d041      	beq.n	110a <CONFIG_FPROTECT_BLOCK_SIZE+0x10a>
    1086:	d825      	bhi.n	10d4 <CONFIG_FPROTECT_BLOCK_SIZE+0xd4>
    1088:	2a68      	cmp	r2, #104	; 0x68
    108a:	d02b      	beq.n	10e4 <CONFIG_FPROTECT_BLOCK_SIZE+0xe4>
    108c:	2a6a      	cmp	r2, #106	; 0x6a
    108e:	d046      	beq.n	111e <CONFIG_FPROTECT_BLOCK_SIZE+0x11e>
    1090:	2a4c      	cmp	r2, #76	; 0x4c
    1092:	d04c      	beq.n	112e <CONFIG_FPROTECT_BLOCK_SIZE+0x12e>
    1094:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    1096:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    109a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    109e:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    10a2:	2a78      	cmp	r2, #120	; 0x78
    10a4:	f200 80d9 	bhi.w	125a <CONFIG_FPROTECT_BLOCK_SIZE+0x25a>
    10a8:	2a57      	cmp	r2, #87	; 0x57
    10aa:	d84d      	bhi.n	1148 <CONFIG_FPROTECT_BLOCK_SIZE+0x148>
    10ac:	2a41      	cmp	r2, #65	; 0x41
    10ae:	d003      	beq.n	10b8 <CONFIG_FPROTECT_BLOCK_SIZE+0xb8>
    10b0:	3a45      	subs	r2, #69	; 0x45
    10b2:	2a02      	cmp	r2, #2
    10b4:	f200 80d1 	bhi.w	125a <CONFIG_FPROTECT_BLOCK_SIZE+0x25a>
		conv->specifier_cat = SPECIFIER_FP;
    10b8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    10bc:	2204      	movs	r2, #4
    10be:	f362 0302 	bfi	r3, r2, #0, #3
    10c2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    10c6:	2301      	movs	r3, #1
			break;
    10c8:	e09e      	b.n	1208 <CONFIG_FPROTECT_BLOCK_SIZE+0x208>
		val = 10U * val + *sp++ - '0';
    10ca:	fb06 2101 	mla	r1, r6, r1, r2
    10ce:	3930      	subs	r1, #48	; 0x30
    10d0:	4603      	mov	r3, r0
    10d2:	e764      	b.n	f9e <cbvprintf+0x10e>
	switch (*sp) {
    10d4:	2a74      	cmp	r2, #116	; 0x74
    10d6:	d026      	beq.n	1126 <CONFIG_FPROTECT_BLOCK_SIZE+0x126>
    10d8:	2a7a      	cmp	r2, #122	; 0x7a
    10da:	d1db      	bne.n	1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
		conv->length_mod = LENGTH_Z;
    10dc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    10e0:	2206      	movs	r2, #6
    10e2:	e00d      	b.n	1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>
		if (*++sp == 'h') {
    10e4:	785a      	ldrb	r2, [r3, #1]
    10e6:	2a68      	cmp	r2, #104	; 0x68
    10e8:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    10ec:	d106      	bne.n	10fc <CONFIG_FPROTECT_BLOCK_SIZE+0xfc>
			conv->length_mod = LENGTH_HH;
    10ee:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    10f0:	f361 02c6 	bfi	r2, r1, #3, #4
    10f4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    10f8:	1c9f      	adds	r7, r3, #2
    10fa:	e7cc      	b.n	1096 <CONFIG_FPROTECT_BLOCK_SIZE+0x96>
			conv->length_mod = LENGTH_H;
    10fc:	4613      	mov	r3, r2
    10fe:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1100:	f362 03c6 	bfi	r3, r2, #3, #4
    1104:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    1108:	e7c5      	b.n	1096 <CONFIG_FPROTECT_BLOCK_SIZE+0x96>
		if (*++sp == 'l') {
    110a:	785a      	ldrb	r2, [r3, #1]
    110c:	2a6c      	cmp	r2, #108	; 0x6c
    110e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1112:	d101      	bne.n	1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>
			conv->length_mod = LENGTH_LL;
    1114:	2104      	movs	r1, #4
    1116:	e7eb      	b.n	10f0 <CONFIG_FPROTECT_BLOCK_SIZE+0xf0>
			conv->length_mod = LENGTH_L;
    1118:	4613      	mov	r3, r2
    111a:	2203      	movs	r2, #3
    111c:	e7f0      	b.n	1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>
		conv->length_mod = LENGTH_J;
    111e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1122:	2205      	movs	r2, #5
    1124:	e7ec      	b.n	1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>
		conv->length_mod = LENGTH_T;
    1126:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    112a:	2207      	movs	r2, #7
    112c:	e7e8      	b.n	1100 <CONFIG_FPROTECT_BLOCK_SIZE+0x100>
		conv->unsupported = true;
    112e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1132:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1136:	f023 0302 	bic.w	r3, r3, #2
    113a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    113e:	f043 0302 	orr.w	r3, r3, #2
    1142:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    1146:	e7a6      	b.n	1096 <CONFIG_FPROTECT_BLOCK_SIZE+0x96>
	switch (conv->specifier) {
    1148:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    114c:	2920      	cmp	r1, #32
    114e:	f200 8084 	bhi.w	125a <CONFIG_FPROTECT_BLOCK_SIZE+0x25a>
    1152:	a001      	add	r0, pc, #4	; (adr r0, 1158 <CONFIG_FPROTECT_BLOCK_SIZE+0x158>)
    1154:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1158:	0000121d 	.word	0x0000121d
    115c:	0000125b 	.word	0x0000125b
    1160:	0000125b 	.word	0x0000125b
    1164:	0000125b 	.word	0x0000125b
    1168:	0000125b 	.word	0x0000125b
    116c:	0000125b 	.word	0x0000125b
    1170:	0000125b 	.word	0x0000125b
    1174:	0000125b 	.word	0x0000125b
    1178:	0000125b 	.word	0x0000125b
    117c:	000010b9 	.word	0x000010b9
    1180:	0000125b 	.word	0x0000125b
    1184:	0000121d 	.word	0x0000121d
    1188:	000011dd 	.word	0x000011dd
    118c:	000010b9 	.word	0x000010b9
    1190:	000010b9 	.word	0x000010b9
    1194:	000010b9 	.word	0x000010b9
    1198:	0000125b 	.word	0x0000125b
    119c:	000011dd 	.word	0x000011dd
    11a0:	0000125b 	.word	0x0000125b
    11a4:	0000125b 	.word	0x0000125b
    11a8:	0000125b 	.word	0x0000125b
    11ac:	0000125b 	.word	0x0000125b
    11b0:	00001225 	.word	0x00001225
    11b4:	0000121d 	.word	0x0000121d
    11b8:	00001241 	.word	0x00001241
    11bc:	0000125b 	.word	0x0000125b
    11c0:	0000125b 	.word	0x0000125b
    11c4:	00001241 	.word	0x00001241
    11c8:	0000125b 	.word	0x0000125b
    11cc:	0000121d 	.word	0x0000121d
    11d0:	0000125b 	.word	0x0000125b
    11d4:	0000125b 	.word	0x0000125b
    11d8:	0000121d 	.word	0x0000121d
		conv->specifier_cat = SPECIFIER_SINT;
    11dc:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    11e0:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    11e2:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    11e6:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    11ea:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    11ec:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    11f0:	bf02      	ittt	eq
    11f2:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    11f6:	f041 0101 	orreq.w	r1, r1, #1
    11fa:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    11fe:	2a63      	cmp	r2, #99	; 0x63
    1200:	d131      	bne.n	1266 <CONFIG_FPROTECT_BLOCK_SIZE+0x266>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1202:	3b00      	subs	r3, #0
    1204:	bf18      	it	ne
    1206:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1208:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    120c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1210:	430b      	orrs	r3, r1
    1212:	f363 0241 	bfi	r2, r3, #1, #1
    1216:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    121a:	e6d8      	b.n	fce <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x2e>
		conv->specifier_cat = SPECIFIER_UINT;
    121c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1220:	2002      	movs	r0, #2
    1222:	e7de      	b.n	11e2 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e2>
		conv->specifier_cat = SPECIFIER_PTR;
    1224:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1228:	f003 0378 	and.w	r3, r3, #120	; 0x78
    122c:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1230:	2103      	movs	r1, #3
    1232:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1236:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    1238:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    123c:	4143      	adcs	r3, r0
    123e:	e7e3      	b.n	1208 <CONFIG_FPROTECT_BLOCK_SIZE+0x208>
		conv->specifier_cat = SPECIFIER_PTR;
    1240:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1244:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    1246:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    124a:	f361 0202 	bfi	r2, r1, #0, #3
    124e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1252:	bf14      	ite	ne
    1254:	2301      	movne	r3, #1
    1256:	2300      	moveq	r3, #0
    1258:	e7d6      	b.n	1208 <CONFIG_FPROTECT_BLOCK_SIZE+0x208>
		conv->invalid = true;
    125a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    125e:	f043 0301 	orr.w	r3, r3, #1
    1262:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    1266:	2300      	movs	r3, #0
    1268:	e7ce      	b.n	1208 <CONFIG_FPROTECT_BLOCK_SIZE+0x208>
		} else if (conv->width_present) {
    126a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    126e:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1270:	bfb4      	ite	lt
    1272:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    1276:	f04f 39ff 	movge.w	r9, #4294967295
    127a:	e6ba      	b.n	ff2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x52>
		} else if (conv->prec_present) {
    127c:	079b      	lsls	r3, r3, #30
    127e:	f57f aec7 	bpl.w	1010 <CONFIG_FPROTECT_BLOCK_SIZE+0x10>
			precision = conv->prec_value;
    1282:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    1286:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    128a:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    128c:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    1290:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    1294:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1298:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    129a:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    129e:	d138      	bne.n	1312 <CONFIG_FPROTECT_BLOCK_SIZE+0x312>
			switch (length_mod) {
    12a0:	1ecb      	subs	r3, r1, #3
    12a2:	2b04      	cmp	r3, #4
    12a4:	d822      	bhi.n	12ec <CONFIG_FPROTECT_BLOCK_SIZE+0x2ec>
    12a6:	e8df f003 	tbb	[pc, r3]
    12aa:	0903      	.short	0x0903
    12ac:	2109      	.short	0x2109
    12ae:	21          	.byte	0x21
    12af:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    12b0:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    12b4:	17da      	asrs	r2, r3, #31
    12b6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    12ba:	e006      	b.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
					(sint_value_type)va_arg(ap, intmax_t);
    12bc:	3407      	adds	r4, #7
    12be:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    12c2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    12c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    12ca:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    12ce:	f013 0603 	ands.w	r6, r3, #3
    12d2:	d056      	beq.n	1382 <CONFIG_FPROTECT_BLOCK_SIZE+0x382>
			OUTS(sp, fp);
    12d4:	9802      	ldr	r0, [sp, #8]
    12d6:	463b      	mov	r3, r7
    12d8:	4652      	mov	r2, sl
    12da:	4659      	mov	r1, fp
    12dc:	f005 f8a9 	bl	6432 <outs>
    12e0:	2800      	cmp	r0, #0
    12e2:	f2c0 8142 	blt.w	156a <CONFIG_FPROTECT_BLOCK_SIZE+0x56a>
    12e6:	4405      	add	r5, r0
			continue;
    12e8:	46ba      	mov	sl, r7
    12ea:	e5d9      	b.n	ea0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    12ec:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    12f0:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    12f2:	ea4f 72e3 	mov.w	r2, r3, asr #31
    12f6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    12fa:	d105      	bne.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
				value->uint = (unsigned char)value->uint;
    12fc:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    1300:	930a      	str	r3, [sp, #40]	; 0x28
    1302:	2300      	movs	r3, #0
    1304:	930b      	str	r3, [sp, #44]	; 0x2c
    1306:	e7e0      	b.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
			} else if (length_mod == LENGTH_H) {
    1308:	2902      	cmp	r1, #2
    130a:	d1de      	bne.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
				value->sint = (short)value->sint;
    130c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    1310:	e7d0      	b.n	12b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b4>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1312:	2b02      	cmp	r3, #2
    1314:	d123      	bne.n	135e <CONFIG_FPROTECT_BLOCK_SIZE+0x35e>
			switch (length_mod) {
    1316:	1ecb      	subs	r3, r1, #3
    1318:	2b04      	cmp	r3, #4
    131a:	d813      	bhi.n	1344 <CONFIG_FPROTECT_BLOCK_SIZE+0x344>
    131c:	e8df f003 	tbb	[pc, r3]
    1320:	120a0a03 	.word	0x120a0a03
    1324:	12          	.byte	0x12
    1325:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    1326:	6822      	ldr	r2, [r4, #0]
    1328:	920a      	str	r2, [sp, #40]	; 0x28
    132a:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    132c:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    132e:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    1330:	4604      	mov	r4, r0
    1332:	e7ca      	b.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
					(uint_value_type)va_arg(ap,
    1334:	1de0      	adds	r0, r4, #7
    1336:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    133a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    133e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    1342:	e7f5      	b.n	1330 <CONFIG_FPROTECT_BLOCK_SIZE+0x330>
					(uint_value_type)va_arg(ap, size_t);
    1344:	f854 3b04 	ldr.w	r3, [r4], #4
    1348:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    134a:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    134c:	f04f 0300 	mov.w	r3, #0
    1350:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    1352:	d0d3      	beq.n	12fc <CONFIG_FPROTECT_BLOCK_SIZE+0x2fc>
			} else if (length_mod == LENGTH_H) {
    1354:	2902      	cmp	r1, #2
    1356:	d1b8      	bne.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
				value->uint = (unsigned short)value->uint;
    1358:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    135c:	e7d0      	b.n	1300 <CONFIG_FPROTECT_BLOCK_SIZE+0x300>
		} else if (specifier_cat == SPECIFIER_FP) {
    135e:	2b04      	cmp	r3, #4
    1360:	d109      	bne.n	1376 <CONFIG_FPROTECT_BLOCK_SIZE+0x376>
					(sint_value_type)va_arg(ap, long long);
    1362:	1de3      	adds	r3, r4, #7
    1364:	f023 0307 	bic.w	r3, r3, #7
    1368:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    136c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1370:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    1374:	e7a9      	b.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1376:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1378:	bf04      	itt	eq
    137a:	f854 3b04 	ldreq.w	r3, [r4], #4
    137e:	930a      	streq	r3, [sp, #40]	; 0x28
    1380:	e7a3      	b.n	12ca <CONFIG_FPROTECT_BLOCK_SIZE+0x2ca>
		switch (conv->specifier) {
    1382:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1386:	2878      	cmp	r0, #120	; 0x78
    1388:	d8ae      	bhi.n	12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>
    138a:	2862      	cmp	r0, #98	; 0x62
    138c:	d822      	bhi.n	13d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d4>
    138e:	2825      	cmp	r0, #37	; 0x25
    1390:	f43f ad8f 	beq.w	eb2 <cbvprintf+0x22>
    1394:	2858      	cmp	r0, #88	; 0x58
    1396:	d1a7      	bne.n	12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1398:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    139c:	9300      	str	r3, [sp, #0]
    139e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    13a2:	ab04      	add	r3, sp, #16
    13a4:	aa0c      	add	r2, sp, #48	; 0x30
    13a6:	f004 fffe 	bl	63a6 <encode_uint>
    13aa:	4682      	mov	sl, r0
			if (precision >= 0) {
    13ac:	f1b8 0f00 	cmp.w	r8, #0
    13b0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    13b4:	db0c      	blt.n	13d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d0>
				conv->flag_zero = false;
    13b6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    13ba:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    13be:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    13c2:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    13c4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    13c8:	d902      	bls.n	13d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d0>
					conv->pad0_value = precision - (int)len;
    13ca:	eba8 0303 	sub.w	r3, r8, r3
    13ce:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    13d0:	4680      	mov	r8, r0
    13d2:	e03d      	b.n	1450 <CONFIG_FPROTECT_BLOCK_SIZE+0x450>
		switch (conv->specifier) {
    13d4:	3863      	subs	r0, #99	; 0x63
    13d6:	2815      	cmp	r0, #21
    13d8:	d886      	bhi.n	12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>
    13da:	a201      	add	r2, pc, #4	; (adr r2, 13e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3e0>)
    13dc:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    13e0:	00001461 	.word	0x00001461
    13e4:	000014c5 	.word	0x000014c5
    13e8:	000012e9 	.word	0x000012e9
    13ec:	000012e9 	.word	0x000012e9
    13f0:	000012e9 	.word	0x000012e9
    13f4:	000012e9 	.word	0x000012e9
    13f8:	000014c5 	.word	0x000014c5
    13fc:	000012e9 	.word	0x000012e9
    1400:	000012e9 	.word	0x000012e9
    1404:	000012e9 	.word	0x000012e9
    1408:	000012e9 	.word	0x000012e9
    140c:	0000151f 	.word	0x0000151f
    1410:	000014ed 	.word	0x000014ed
    1414:	000014f1 	.word	0x000014f1
    1418:	000012e9 	.word	0x000012e9
    141c:	000012e9 	.word	0x000012e9
    1420:	00001439 	.word	0x00001439
    1424:	000012e9 	.word	0x000012e9
    1428:	000014ed 	.word	0x000014ed
    142c:	000012e9 	.word	0x000012e9
    1430:	000012e9 	.word	0x000012e9
    1434:	000014ed 	.word	0x000014ed
			if (precision >= 0) {
    1438:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    143c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1440:	db0a      	blt.n	1458 <CONFIG_FPROTECT_BLOCK_SIZE+0x458>
				len = strnlen(bps, precision);
    1442:	4641      	mov	r1, r8
    1444:	4650      	mov	r0, sl
    1446:	f005 faf3 	bl	6a30 <strnlen>
			bpe = bps + len;
    144a:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    144e:	2600      	movs	r6, #0
		if (bps == NULL) {
    1450:	f1ba 0f00 	cmp.w	sl, #0
    1454:	d10c      	bne.n	1470 <CONFIG_FPROTECT_BLOCK_SIZE+0x470>
    1456:	e747      	b.n	12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>
				len = strlen(bps);
    1458:	4650      	mov	r0, sl
    145a:	f005 fae2 	bl	6a22 <strlen>
    145e:	e7f4      	b.n	144a <CONFIG_FPROTECT_BLOCK_SIZE+0x44a>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1462:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    1466:	2600      	movs	r6, #0
			bps = buf;
    1468:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    146c:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    1470:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1474:	b106      	cbz	r6, 1478 <CONFIG_FPROTECT_BLOCK_SIZE+0x478>
			nj_len += 1U;
    1476:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1478:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    147c:	06d0      	lsls	r0, r2, #27
    147e:	d568      	bpl.n	1552 <CONFIG_FPROTECT_BLOCK_SIZE+0x552>
			nj_len += 2U;
    1480:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    1482:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1484:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    1486:	bf48      	it	mi
    1488:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    148a:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    148c:	bf48      	it	mi
    148e:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1490:	f1b9 0f00 	cmp.w	r9, #0
    1494:	dd76      	ble.n	1584 <CONFIG_FPROTECT_BLOCK_SIZE+0x584>
			if (!conv->flag_dash) {
    1496:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    149a:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    149e:	f3c2 0380 	ubfx	r3, r2, #2, #1
    14a2:	9303      	str	r3, [sp, #12]
    14a4:	0753      	lsls	r3, r2, #29
    14a6:	d46d      	bmi.n	1584 <CONFIG_FPROTECT_BLOCK_SIZE+0x584>
				if (conv->flag_zero) {
    14a8:	0650      	lsls	r0, r2, #25
    14aa:	d561      	bpl.n	1570 <CONFIG_FPROTECT_BLOCK_SIZE+0x570>
					if (sign != 0) {
    14ac:	b146      	cbz	r6, 14c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4c0>
						OUTC(sign);
    14ae:	9b02      	ldr	r3, [sp, #8]
    14b0:	4659      	mov	r1, fp
    14b2:	4630      	mov	r0, r6
    14b4:	4798      	blx	r3
    14b6:	2800      	cmp	r0, #0
    14b8:	db57      	blt.n	156a <CONFIG_FPROTECT_BLOCK_SIZE+0x56a>
						sign = 0;
    14ba:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    14bc:	3501      	adds	r5, #1
						sign = 0;
    14be:	461e      	mov	r6, r3
					pad = '0';
    14c0:	2330      	movs	r3, #48	; 0x30
    14c2:	e056      	b.n	1572 <CONFIG_FPROTECT_BLOCK_SIZE+0x572>
			if (conv->flag_plus) {
    14c4:	071e      	lsls	r6, r3, #28
    14c6:	d40f      	bmi.n	14e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e8>
				sign = ' ';
    14c8:	f013 0610 	ands.w	r6, r3, #16
    14cc:	bf18      	it	ne
    14ce:	2620      	movne	r6, #32
			sint = value->sint;
    14d0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    14d4:	2b00      	cmp	r3, #0
    14d6:	f6bf af5f 	bge.w	1398 <CONFIG_FPROTECT_BLOCK_SIZE+0x398>
				value->uint = (uint_value_type)-sint;
    14da:	4252      	negs	r2, r2
    14dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    14e0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    14e4:	262d      	movs	r6, #45	; 0x2d
    14e6:	e757      	b.n	1398 <CONFIG_FPROTECT_BLOCK_SIZE+0x398>
				sign = '+';
    14e8:	262b      	movs	r6, #43	; 0x2b
    14ea:	e7f1      	b.n	14d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4d0>
		switch (conv->specifier) {
    14ec:	2600      	movs	r6, #0
    14ee:	e753      	b.n	1398 <CONFIG_FPROTECT_BLOCK_SIZE+0x398>
			if (value->ptr != NULL) {
    14f0:	980a      	ldr	r0, [sp, #40]	; 0x28
    14f2:	b340      	cbz	r0, 1546 <CONFIG_FPROTECT_BLOCK_SIZE+0x546>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    14f4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    14f8:	9300      	str	r3, [sp, #0]
    14fa:	aa0c      	add	r2, sp, #48	; 0x30
    14fc:	ab04      	add	r3, sp, #16
    14fe:	2100      	movs	r1, #0
    1500:	f004 ff51 	bl	63a6 <encode_uint>
				conv->altform_0c = true;
    1504:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    1508:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    150c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1510:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1514:	4682      	mov	sl, r0
				conv->altform_0c = true;
    1516:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    151a:	2600      	movs	r6, #0
				goto prec_int_pad0;
    151c:	e746      	b.n	13ac <CONFIG_FPROTECT_BLOCK_SIZE+0x3ac>
				store_count(conv, value->ptr, count);
    151e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1520:	2907      	cmp	r1, #7
    1522:	f63f aee1 	bhi.w	12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>
    1526:	e8df f001 	tbb	[pc, r1]
    152a:	040c      	.short	0x040c
    152c:	08080c06 	.word	0x08080c06
    1530:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    1532:	701d      	strb	r5, [r3, #0]
		break;
    1534:	e6d8      	b.n	12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>
		*(short *)dp = (short)count;
    1536:	801d      	strh	r5, [r3, #0]
		break;
    1538:	e6d6      	b.n	12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>
		*(intmax_t *)dp = (intmax_t)count;
    153a:	17ea      	asrs	r2, r5, #31
    153c:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    1540:	e6d2      	b.n	12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1542:	601d      	str	r5, [r3, #0]
		break;
    1544:	e6d0      	b.n	12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>
			bps = "(nil)";
    1546:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1610 <CONFIG_FPROTECT_BLOCK_SIZE+0x610>
    154a:	4606      	mov	r6, r0
			bpe = bps + 5;
    154c:	f10a 0805 	add.w	r8, sl, #5
    1550:	e78e      	b.n	1470 <CONFIG_FPROTECT_BLOCK_SIZE+0x470>
		} else if (conv->altform_0) {
    1552:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1554:	bf48      	it	mi
    1556:	3301      	addmi	r3, #1
    1558:	e793      	b.n	1482 <CONFIG_FPROTECT_BLOCK_SIZE+0x482>
					OUTC(pad);
    155a:	4618      	mov	r0, r3
    155c:	9303      	str	r3, [sp, #12]
    155e:	4659      	mov	r1, fp
    1560:	9b02      	ldr	r3, [sp, #8]
    1562:	4798      	blx	r3
    1564:	2800      	cmp	r0, #0
    1566:	9b03      	ldr	r3, [sp, #12]
    1568:	da04      	bge.n	1574 <CONFIG_FPROTECT_BLOCK_SIZE+0x574>
#undef OUTS
#undef OUTC
}
    156a:	b011      	add	sp, #68	; 0x44
    156c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1570:	2320      	movs	r3, #32
    1572:	444d      	add	r5, r9
    1574:	464a      	mov	r2, r9
				while (width-- > 0) {
    1576:	2a00      	cmp	r2, #0
    1578:	eba5 0109 	sub.w	r1, r5, r9
    157c:	f109 39ff 	add.w	r9, r9, #4294967295
    1580:	dceb      	bgt.n	155a <CONFIG_FPROTECT_BLOCK_SIZE+0x55a>
    1582:	460d      	mov	r5, r1
		if (sign != 0) {
    1584:	b136      	cbz	r6, 1594 <CONFIG_FPROTECT_BLOCK_SIZE+0x594>
			OUTC(sign);
    1586:	9b02      	ldr	r3, [sp, #8]
    1588:	4659      	mov	r1, fp
    158a:	4630      	mov	r0, r6
    158c:	4798      	blx	r3
    158e:	2800      	cmp	r0, #0
    1590:	dbeb      	blt.n	156a <CONFIG_FPROTECT_BLOCK_SIZE+0x56a>
    1592:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1594:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1598:	06d9      	lsls	r1, r3, #27
    159a:	d401      	bmi.n	15a0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5a0>
    159c:	071a      	lsls	r2, r3, #28
    159e:	d506      	bpl.n	15ae <CONFIG_FPROTECT_BLOCK_SIZE+0x5ae>
				OUTC('0');
    15a0:	9b02      	ldr	r3, [sp, #8]
    15a2:	4659      	mov	r1, fp
    15a4:	2030      	movs	r0, #48	; 0x30
    15a6:	4798      	blx	r3
    15a8:	2800      	cmp	r0, #0
    15aa:	dbde      	blt.n	156a <CONFIG_FPROTECT_BLOCK_SIZE+0x56a>
    15ac:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    15ae:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    15b2:	06db      	lsls	r3, r3, #27
    15b4:	d507      	bpl.n	15c6 <CONFIG_FPROTECT_BLOCK_SIZE+0x5c6>
				OUTC(conv->specifier);
    15b6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    15ba:	9b02      	ldr	r3, [sp, #8]
    15bc:	4659      	mov	r1, fp
    15be:	4798      	blx	r3
    15c0:	2800      	cmp	r0, #0
    15c2:	dbd2      	blt.n	156a <CONFIG_FPROTECT_BLOCK_SIZE+0x56a>
    15c4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    15c6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    15c8:	442e      	add	r6, r5
    15ca:	1b73      	subs	r3, r6, r5
    15cc:	2b00      	cmp	r3, #0
    15ce:	dc16      	bgt.n	15fe <CONFIG_FPROTECT_BLOCK_SIZE+0x5fe>
			OUTS(bps, bpe);
    15d0:	9802      	ldr	r0, [sp, #8]
    15d2:	4643      	mov	r3, r8
    15d4:	4652      	mov	r2, sl
    15d6:	4659      	mov	r1, fp
    15d8:	f004 ff2b 	bl	6432 <outs>
    15dc:	2800      	cmp	r0, #0
    15de:	dbc4      	blt.n	156a <CONFIG_FPROTECT_BLOCK_SIZE+0x56a>
    15e0:	4405      	add	r5, r0
		while (width > 0) {
    15e2:	44a9      	add	r9, r5
    15e4:	eba9 0305 	sub.w	r3, r9, r5
    15e8:	2b00      	cmp	r3, #0
    15ea:	f77f ae7d 	ble.w	12e8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2e8>
			OUTC(' ');
    15ee:	9b02      	ldr	r3, [sp, #8]
    15f0:	4659      	mov	r1, fp
    15f2:	2020      	movs	r0, #32
    15f4:	4798      	blx	r3
    15f6:	2800      	cmp	r0, #0
    15f8:	dbb7      	blt.n	156a <CONFIG_FPROTECT_BLOCK_SIZE+0x56a>
    15fa:	3501      	adds	r5, #1
			--width;
    15fc:	e7f2      	b.n	15e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5e4>
				OUTC('0');
    15fe:	9b02      	ldr	r3, [sp, #8]
    1600:	4659      	mov	r1, fp
    1602:	2030      	movs	r0, #48	; 0x30
    1604:	4798      	blx	r3
    1606:	2800      	cmp	r0, #0
    1608:	dbaf      	blt.n	156a <CONFIG_FPROTECT_BLOCK_SIZE+0x56a>
    160a:	3501      	adds	r5, #1
    160c:	e7dd      	b.n	15ca <CONFIG_FPROTECT_BLOCK_SIZE+0x5ca>
    160e:	bf00      	nop
    1610:	0000778c 	.word	0x0000778c

00001614 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    1614:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    1616:	4910      	ldr	r1, [pc, #64]	; (1658 <enable_logger+0x44>)
    1618:	4810      	ldr	r0, [pc, #64]	; (165c <enable_logger+0x48>)
{
    161a:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    161c:	2200      	movs	r2, #0
    161e:	f005 fdf6 	bl	720e <k_timer_init>
		};
		return (k_tid_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1622:	4d0f      	ldr	r5, [pc, #60]	; (1660 <enable_logger+0x4c>)
    1624:	490f      	ldr	r1, [pc, #60]	; (1664 <enable_logger+0x50>)
    1626:	2200      	movs	r2, #0
    1628:	2300      	movs	r3, #0
    162a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    162e:	2400      	movs	r4, #0
    1630:	230e      	movs	r3, #14
    1632:	e9cd 3403 	strd	r3, r4, [sp, #12]
    1636:	e9cd 4401 	strd	r4, r4, [sp, #4]
    163a:	4b0b      	ldr	r3, [pc, #44]	; (1668 <enable_logger+0x54>)
    163c:	9400      	str	r4, [sp, #0]
    163e:	f44f 7240 	mov.w	r2, #768	; 0x300
    1642:	4628      	mov	r0, r5
    1644:	f003 fd22 	bl	508c <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    1648:	4908      	ldr	r1, [pc, #32]	; (166c <enable_logger+0x58>)
    164a:	4628      	mov	r0, r5
    164c:	f005 fc56 	bl	6efc <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    1650:	4620      	mov	r0, r4
    1652:	b009      	add	sp, #36	; 0x24
    1654:	bd30      	pop	{r4, r5, pc}
    1656:	bf00      	nop
    1658:	00001671 	.word	0x00001671
    165c:	20000510 	.word	0x20000510
    1660:	20000548 	.word	0x20000548
    1664:	200011e0 	.word	0x200011e0
    1668:	00001895 	.word	0x00001895
    166c:	00007792 	.word	0x00007792

00001670 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1670:	4801      	ldr	r0, [pc, #4]	; (1678 <log_process_thread_timer_expiry_fn+0x8>)
    1672:	f003 be69 	b.w	5348 <z_impl_k_sem_give>
    1676:	bf00      	nop
    1678:	200000fc 	.word	0x200000fc

0000167c <log_format_func_t_get>:
}
    167c:	4b01      	ldr	r3, [pc, #4]	; (1684 <log_format_func_t_get+0x8>)
    167e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1682:	4770      	bx	lr
    1684:	000074f8 	.word	0x000074f8

00001688 <log_init>:
{
    1688:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    168a:	4b12      	ldr	r3, [pc, #72]	; (16d4 <log_init+0x4c>)
    168c:	f3bf 8f5b 	dmb	ish
    1690:	e853 5f00 	ldrex	r5, [r3]
    1694:	1c6a      	adds	r2, r5, #1
    1696:	e843 2100 	strex	r1, r2, [r3]
    169a:	2900      	cmp	r1, #0
    169c:	d1f8      	bne.n	1690 <log_init+0x8>
    169e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    16a2:	b92d      	cbnz	r5, 16b0 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    16a4:	4c0c      	ldr	r4, [pc, #48]	; (16d8 <log_init+0x50>)
    16a6:	4e0d      	ldr	r6, [pc, #52]	; (16dc <log_init+0x54>)
    16a8:	1b36      	subs	r6, r6, r4
    16aa:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    16ac:	42b5      	cmp	r5, r6
    16ae:	db00      	blt.n	16b2 <log_init+0x2a>
}
    16b0:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    16b2:	7b23      	ldrb	r3, [r4, #12]
    16b4:	b153      	cbz	r3, 16cc <log_init+0x44>
			if (backend->api->init != NULL) {
    16b6:	6823      	ldr	r3, [r4, #0]
    16b8:	699b      	ldr	r3, [r3, #24]
    16ba:	b10b      	cbz	r3, 16c0 <log_init+0x38>
				backend->api->init(backend);
    16bc:	4620      	mov	r0, r4
    16be:	4798      	blx	r3
			log_backend_enable(backend,
    16c0:	6863      	ldr	r3, [r4, #4]
    16c2:	2204      	movs	r2, #4
    16c4:	6819      	ldr	r1, [r3, #0]
    16c6:	4620      	mov	r0, r4
    16c8:	f000 f992 	bl	19f0 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    16cc:	3501      	adds	r5, #1
    16ce:	3410      	adds	r4, #16
    16d0:	e7ec      	b.n	16ac <log_init+0x24>
    16d2:	bf00      	nop
    16d4:	20000798 	.word	0x20000798
    16d8:	000074a0 	.word	0x000074a0
    16dc:	000074b0 	.word	0x000074b0

000016e0 <z_log_notify_backend_enabled>:
{
    16e0:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    16e2:	4c04      	ldr	r4, [pc, #16]	; (16f4 <z_log_notify_backend_enabled+0x14>)
    16e4:	7823      	ldrb	r3, [r4, #0]
    16e6:	b913      	cbnz	r3, 16ee <z_log_notify_backend_enabled+0xe>
    16e8:	4803      	ldr	r0, [pc, #12]	; (16f8 <z_log_notify_backend_enabled+0x18>)
    16ea:	f003 fe2d 	bl	5348 <z_impl_k_sem_give>
	backend_attached = true;
    16ee:	2301      	movs	r3, #1
    16f0:	7023      	strb	r3, [r4, #0]
}
    16f2:	bd10      	pop	{r4, pc}
    16f4:	20000b4b 	.word	0x20000b4b
    16f8:	200000fc 	.word	0x200000fc

000016fc <z_log_dropped>:
    16fc:	4b0c      	ldr	r3, [pc, #48]	; (1730 <z_log_dropped+0x34>)
    16fe:	f3bf 8f5b 	dmb	ish
    1702:	e853 2f00 	ldrex	r2, [r3]
    1706:	3201      	adds	r2, #1
    1708:	e843 2100 	strex	r1, r2, [r3]
    170c:	2900      	cmp	r1, #0
    170e:	d1f8      	bne.n	1702 <z_log_dropped+0x6>
    1710:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    1714:	b158      	cbz	r0, 172e <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1716:	f3bf 8f5b 	dmb	ish
    171a:	4b06      	ldr	r3, [pc, #24]	; (1734 <z_log_dropped+0x38>)
    171c:	e853 2f00 	ldrex	r2, [r3]
    1720:	3a01      	subs	r2, #1
    1722:	e843 2100 	strex	r1, r2, [r3]
    1726:	2900      	cmp	r1, #0
    1728:	d1f8      	bne.n	171c <z_log_dropped+0x20>
    172a:	f3bf 8f5b 	dmb	ish
}
    172e:	4770      	bx	lr
    1730:	20000794 	.word	0x20000794
    1734:	20000790 	.word	0x20000790

00001738 <z_log_dropped_read_and_clear>:
}
    1738:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    173a:	4b06      	ldr	r3, [pc, #24]	; (1754 <z_log_dropped_read_and_clear+0x1c>)
    173c:	f3bf 8f5b 	dmb	ish
    1740:	4602      	mov	r2, r0
    1742:	e853 0f00 	ldrex	r0, [r3]
    1746:	e843 2100 	strex	r1, r2, [r3]
    174a:	2900      	cmp	r1, #0
    174c:	d1f9      	bne.n	1742 <z_log_dropped_read_and_clear+0xa>
    174e:	f3bf 8f5b 	dmb	ish
    1752:	4770      	bx	lr
    1754:	20000794 	.word	0x20000794

00001758 <dropped_notify>:
{
    1758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    175a:	f7ff ffed 	bl	1738 <z_log_dropped_read_and_clear>
    175e:	4c0a      	ldr	r4, [pc, #40]	; (1788 <dropped_notify+0x30>)
    1760:	4d0a      	ldr	r5, [pc, #40]	; (178c <dropped_notify+0x34>)
    1762:	1b2d      	subs	r5, r5, r4
    1764:	4607      	mov	r7, r0
    1766:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1768:	2600      	movs	r6, #0
    176a:	42ae      	cmp	r6, r5
    176c:	db00      	blt.n	1770 <dropped_notify+0x18>
}
    176e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    1770:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1772:	795b      	ldrb	r3, [r3, #5]
    1774:	b12b      	cbz	r3, 1782 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    1776:	6823      	ldr	r3, [r4, #0]
    1778:	691b      	ldr	r3, [r3, #16]
    177a:	b113      	cbz	r3, 1782 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    177c:	4639      	mov	r1, r7
    177e:	4620      	mov	r0, r4
    1780:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1782:	3601      	adds	r6, #1
    1784:	3410      	adds	r4, #16
    1786:	e7f0      	b.n	176a <dropped_notify+0x12>
    1788:	000074a0 	.word	0x000074a0
    178c:	000074b0 	.word	0x000074b0

00001790 <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    1790:	4901      	ldr	r1, [pc, #4]	; (1798 <z_log_msg2_init+0x8>)
    1792:	4802      	ldr	r0, [pc, #8]	; (179c <z_log_msg2_init+0xc>)
    1794:	f004 bf18 	b.w	65c8 <mpsc_pbuf_init>
    1798:	00007504 	.word	0x00007504
    179c:	2000079c 	.word	0x2000079c

000017a0 <log_core_init>:
	panic_mode = false;
    17a0:	4a08      	ldr	r2, [pc, #32]	; (17c4 <log_core_init+0x24>)
{
    17a2:	b508      	push	{r3, lr}
	panic_mode = false;
    17a4:	2300      	movs	r3, #0
    17a6:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    17a8:	4a07      	ldr	r2, [pc, #28]	; (17c8 <log_core_init+0x28>)
    17aa:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    17ac:	4b07      	ldr	r3, [pc, #28]	; (17cc <log_core_init+0x2c>)
    17ae:	4a08      	ldr	r2, [pc, #32]	; (17d0 <log_core_init+0x30>)
    17b0:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    17b2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    17b6:	f000 fafb 	bl	1db0 <log_output_timestamp_freq_set>
}
    17ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg2_init();
    17be:	f7ff bfe7 	b.w	1790 <z_log_msg2_init>
    17c2:	bf00      	nop
    17c4:	20000b4c 	.word	0x20000b4c
    17c8:	20000794 	.word	0x20000794
    17cc:	20000004 	.word	0x20000004
    17d0:	00006871 	.word	0x00006871

000017d4 <z_log_msg2_alloc>:
{
    17d4:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    17d6:	2200      	movs	r2, #0
    17d8:	4801      	ldr	r0, [pc, #4]	; (17e0 <z_log_msg2_alloc+0xc>)
    17da:	2300      	movs	r3, #0
    17dc:	f004 bf15 	b.w	660a <mpsc_pbuf_alloc>
    17e0:	2000079c 	.word	0x2000079c

000017e4 <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    17e4:	4801      	ldr	r0, [pc, #4]	; (17ec <z_log_msg2_claim+0x8>)
    17e6:	f004 bfa6 	b.w	6736 <mpsc_pbuf_claim>
    17ea:	bf00      	nop
    17ec:	2000079c 	.word	0x2000079c

000017f0 <z_log_msg2_free>:
{
    17f0:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    17f2:	4801      	ldr	r0, [pc, #4]	; (17f8 <z_log_msg2_free+0x8>)
    17f4:	f004 bfeb 	b.w	67ce <mpsc_pbuf_free>
    17f8:	2000079c 	.word	0x2000079c

000017fc <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    17fc:	4801      	ldr	r0, [pc, #4]	; (1804 <z_log_msg2_pending+0x8>)
    17fe:	f005 b81a 	b.w	6836 <mpsc_pbuf_is_pending>
    1802:	bf00      	nop
    1804:	2000079c 	.word	0x2000079c

00001808 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    1808:	4b1d      	ldr	r3, [pc, #116]	; (1880 <z_impl_log_process+0x78>)
    180a:	781b      	ldrb	r3, [r3, #0]
{
    180c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1810:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    1812:	b903      	cbnz	r3, 1816 <z_impl_log_process+0xe>
    1814:	b388      	cbz	r0, 187a <z_impl_log_process+0x72>
	msg = get_msg();
    1816:	f005 f840 	bl	689a <get_msg>
	if (msg.msg) {
    181a:	4606      	mov	r6, r0
    181c:	b118      	cbz	r0, 1826 <z_impl_log_process+0x1e>
		if (!bypass) {
    181e:	b16d      	cbz	r5, 183c <z_impl_log_process+0x34>
		z_log_msg2_free(msg.msg2);
    1820:	4630      	mov	r0, r6
    1822:	f7ff ffe5 	bl	17f0 <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
    1826:	b92d      	cbnz	r5, 1834 <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
    1828:	4b16      	ldr	r3, [pc, #88]	; (1884 <z_impl_log_process+0x7c>)
	if (!bypass && z_log_dropped_pending()) {
    182a:	681b      	ldr	r3, [r3, #0]
    182c:	2b00      	cmp	r3, #0
    182e:	dd01      	ble.n	1834 <z_impl_log_process+0x2c>
		dropped_notify();
    1830:	f7ff ff92 	bl	1758 <dropped_notify>
}
    1834:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_log_msg2_pending();
    1838:	f7ff bfe0 	b.w	17fc <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    183c:	4b12      	ldr	r3, [pc, #72]	; (1888 <z_impl_log_process+0x80>)
    183e:	f3bf 8f5b 	dmb	ish
    1842:	e853 2f00 	ldrex	r2, [r3]
    1846:	3a01      	subs	r2, #1
    1848:	e843 2100 	strex	r1, r2, [r3]
    184c:	2900      	cmp	r1, #0
    184e:	d1f8      	bne.n	1842 <z_impl_log_process+0x3a>
    1850:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
    1854:	4c0d      	ldr	r4, [pc, #52]	; (188c <z_impl_log_process+0x84>)
    1856:	4f0e      	ldr	r7, [pc, #56]	; (1890 <z_impl_log_process+0x88>)
    1858:	1b3f      	subs	r7, r7, r4
    185a:	113f      	asrs	r7, r7, #4
    185c:	46a8      	mov	r8, r5
		for (int i = 0; i < log_backend_count_get(); i++) {
    185e:	45b8      	cmp	r8, r7
    1860:	dade      	bge.n	1820 <z_impl_log_process+0x18>
	return backend->cb->active;
    1862:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    1864:	795b      	ldrb	r3, [r3, #5]
    1866:	b123      	cbz	r3, 1872 <z_impl_log_process+0x6a>
	backend->api->process(backend, msg);
    1868:	6823      	ldr	r3, [r4, #0]
    186a:	4631      	mov	r1, r6
    186c:	681b      	ldr	r3, [r3, #0]
    186e:	4620      	mov	r0, r4
    1870:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    1872:	f108 0801 	add.w	r8, r8, #1
    1876:	3410      	adds	r4, #16
    1878:	e7f1      	b.n	185e <z_impl_log_process+0x56>
}
    187a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    187e:	bf00      	nop
    1880:	20000b4b 	.word	0x20000b4b
    1884:	20000794 	.word	0x20000794
    1888:	20000790 	.word	0x20000790
    188c:	000074a0 	.word	0x000074a0
    1890:	000074b0 	.word	0x000074b0

00001894 <log_process_thread_func>:
{
    1894:	b510      	push	{r4, lr}
	log_init();
    1896:	f7ff fef7 	bl	1688 <log_init>
	return z_impl_z_current_get();
    189a:	f004 f9b3 	bl	5c04 <z_impl_z_current_get>
	proc_tid = process_tid;
    189e:	4b0c      	ldr	r3, [pc, #48]	; (18d0 <log_process_thread_func+0x3c>)
    18a0:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    18a2:	b130      	cbz	r0, 18b2 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    18a4:	4b0b      	ldr	r3, [pc, #44]	; (18d4 <log_process_thread_func+0x40>)
	    process_tid &&
    18a6:	681b      	ldr	r3, [r3, #0]
    18a8:	2b09      	cmp	r3, #9
    18aa:	dd02      	ble.n	18b2 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    18ac:	480a      	ldr	r0, [pc, #40]	; (18d8 <log_process_thread_func+0x44>)
    18ae:	f003 fd4b 	bl	5348 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    18b2:	4c09      	ldr	r4, [pc, #36]	; (18d8 <log_process_thread_func+0x44>)
		union { uintptr_t x; bool val; } parm0 = { .val = bypass };
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    18b4:	2000      	movs	r0, #0
    18b6:	f7ff ffa7 	bl	1808 <z_impl_log_process>
		if (log_process(false) == false) {
    18ba:	2800      	cmp	r0, #0
    18bc:	d1fa      	bne.n	18b4 <log_process_thread_func+0x20>
    18be:	f04f 32ff 	mov.w	r2, #4294967295
    18c2:	f04f 33ff 	mov.w	r3, #4294967295
    18c6:	4620      	mov	r0, r4
    18c8:	f003 fd5e 	bl	5388 <z_impl_k_sem_take>
    18cc:	e7f2      	b.n	18b4 <log_process_thread_func+0x20>
    18ce:	bf00      	nop
    18d0:	200007d4 	.word	0x200007d4
    18d4:	20000790 	.word	0x20000790
    18d8:	200000fc 	.word	0x200000fc

000018dc <z_log_msg_post_finalize>:
{
    18dc:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    18de:	4b1d      	ldr	r3, [pc, #116]	; (1954 <z_log_msg_post_finalize+0x78>)
    18e0:	f3bf 8f5b 	dmb	ish
    18e4:	e853 2f00 	ldrex	r2, [r3]
    18e8:	1c51      	adds	r1, r2, #1
    18ea:	e843 1000 	strex	r0, r1, [r3]
    18ee:	2800      	cmp	r0, #0
    18f0:	d1f8      	bne.n	18e4 <z_log_msg_post_finalize+0x8>
    18f2:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    18f6:	4b18      	ldr	r3, [pc, #96]	; (1958 <z_log_msg_post_finalize+0x7c>)
    18f8:	781b      	ldrb	r3, [r3, #0]
    18fa:	b183      	cbz	r3, 191e <z_log_msg_post_finalize+0x42>
    18fc:	f04f 0320 	mov.w	r3, #32
    1900:	f3ef 8411 	mrs	r4, BASEPRI
    1904:	f383 8812 	msr	BASEPRI_MAX, r3
    1908:	f3bf 8f6f 	isb	sy
    190c:	2000      	movs	r0, #0
    190e:	f7ff ff7b 	bl	1808 <z_impl_log_process>
	__asm__ volatile(
    1912:	f384 8811 	msr	BASEPRI, r4
    1916:	f3bf 8f6f 	isb	sy
}
    191a:	b002      	add	sp, #8
    191c:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
    191e:	4b0f      	ldr	r3, [pc, #60]	; (195c <z_log_msg_post_finalize+0x80>)
    1920:	681b      	ldr	r3, [r3, #0]
    1922:	2b00      	cmp	r3, #0
    1924:	d0f9      	beq.n	191a <z_log_msg_post_finalize+0x3e>
    1926:	b952      	cbnz	r2, 193e <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
    1928:	2200      	movs	r2, #0
    192a:	2300      	movs	r3, #0
    192c:	e9cd 2300 	strd	r2, r3, [sp]
    1930:	480b      	ldr	r0, [pc, #44]	; (1960 <z_log_msg_post_finalize+0x84>)
    1932:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1936:	2300      	movs	r3, #0
    1938:	f004 fb66 	bl	6008 <z_impl_k_timer_start>
    193c:	e7ed      	b.n	191a <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    193e:	2a0a      	cmp	r2, #10
    1940:	d1eb      	bne.n	191a <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
    1942:	4807      	ldr	r0, [pc, #28]	; (1960 <z_log_msg_post_finalize+0x84>)
    1944:	f005 fc6f 	bl	7226 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1948:	4806      	ldr	r0, [pc, #24]	; (1964 <z_log_msg_post_finalize+0x88>)
}
    194a:	b002      	add	sp, #8
    194c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1950:	f003 bcfa 	b.w	5348 <z_impl_k_sem_give>
    1954:	20000790 	.word	0x20000790
    1958:	20000b4c 	.word	0x20000b4c
    195c:	200007d4 	.word	0x200007d4
    1960:	20000510 	.word	0x20000510
    1964:	200000fc 	.word	0x200000fc

00001968 <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
    1968:	4b06      	ldr	r3, [pc, #24]	; (1984 <z_log_msg2_commit+0x1c>)
{
    196a:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    196c:	681b      	ldr	r3, [r3, #0]
{
    196e:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1970:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1972:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    1974:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1976:	4804      	ldr	r0, [pc, #16]	; (1988 <z_log_msg2_commit+0x20>)
    1978:	f004 febd 	bl	66f6 <mpsc_pbuf_commit>
}
    197c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    1980:	f7ff bfac 	b.w	18dc <z_log_msg_post_finalize>
    1984:	20000004 	.word	0x20000004
    1988:	2000079c 	.word	0x2000079c

0000198c <z_impl_log_panic>:
{
    198c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    198e:	4f0e      	ldr	r7, [pc, #56]	; (19c8 <z_impl_log_panic+0x3c>)
    1990:	783d      	ldrb	r5, [r7, #0]
    1992:	b975      	cbnz	r5, 19b2 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    1994:	4c0d      	ldr	r4, [pc, #52]	; (19cc <z_impl_log_panic+0x40>)
    1996:	4e0e      	ldr	r6, [pc, #56]	; (19d0 <z_impl_log_panic+0x44>)
	log_init();
    1998:	f7ff fe76 	bl	1688 <log_init>
    199c:	1b36      	subs	r6, r6, r4
    199e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    19a0:	42b5      	cmp	r5, r6
    19a2:	db07      	blt.n	19b4 <z_impl_log_panic+0x28>
    19a4:	2000      	movs	r0, #0
    19a6:	f7ff ff2f 	bl	1808 <z_impl_log_process>
		while (log_process(false) == true) {
    19aa:	2800      	cmp	r0, #0
    19ac:	d1fa      	bne.n	19a4 <z_impl_log_panic+0x18>
	panic_mode = true;
    19ae:	2301      	movs	r3, #1
    19b0:	703b      	strb	r3, [r7, #0]
}
    19b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    19b4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    19b6:	795b      	ldrb	r3, [r3, #5]
    19b8:	b11b      	cbz	r3, 19c2 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    19ba:	6823      	ldr	r3, [r4, #0]
    19bc:	4620      	mov	r0, r4
    19be:	695b      	ldr	r3, [r3, #20]
    19c0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    19c2:	3501      	adds	r5, #1
    19c4:	3410      	adds	r4, #16
    19c6:	e7eb      	b.n	19a0 <z_impl_log_panic+0x14>
    19c8:	20000b4c 	.word	0x20000b4c
    19cc:	000074a0 	.word	0x000074a0
    19d0:	000074b0 	.word	0x000074b0

000019d4 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    19d4:	4a04      	ldr	r2, [pc, #16]	; (19e8 <log_source_name_get+0x14>)
    19d6:	4b05      	ldr	r3, [pc, #20]	; (19ec <log_source_name_get+0x18>)
    19d8:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    19da:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    19de:	bf34      	ite	cc
    19e0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    19e4:	2000      	movcs	r0, #0
}
    19e6:	4770      	bx	lr
    19e8:	00007450 	.word	0x00007450
    19ec:	000074a0 	.word	0x000074a0

000019f0 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    19f0:	4a05      	ldr	r2, [pc, #20]	; (1a08 <log_backend_enable+0x18>)
	backend->cb->id = id;
    19f2:	6843      	ldr	r3, [r0, #4]
    19f4:	1a80      	subs	r0, r0, r2
    19f6:	1100      	asrs	r0, r0, #4
    19f8:	3001      	adds	r0, #1
	backend->cb->active = true;
    19fa:	2201      	movs	r2, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
	}

	log_backend_id_set(backend, id);
    19fc:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
    19fe:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1a00:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    1a02:	f7ff be6d 	b.w	16e0 <z_log_notify_backend_enabled>
    1a06:	bf00      	nop
    1a08:	000074a0 	.word	0x000074a0

00001a0c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1a0c:	b40e      	push	{r1, r2, r3}
    1a0e:	b503      	push	{r0, r1, lr}
    1a10:	ab03      	add	r3, sp, #12
    1a12:	4601      	mov	r1, r0
    1a14:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1a18:	4804      	ldr	r0, [pc, #16]	; (1a2c <print_formatted+0x20>)
	va_start(args, fmt);
    1a1a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1a1c:	f7ff fa38 	bl	e90 <cbvprintf>
	va_end(args);

	return length;
}
    1a20:	b002      	add	sp, #8
    1a22:	f85d eb04 	ldr.w	lr, [sp], #4
    1a26:	b003      	add	sp, #12
    1a28:	4770      	bx	lr
    1a2a:	bf00      	nop
    1a2c:	000068db 	.word	0x000068db

00001a30 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    1a30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1a34:	461d      	mov	r5, r3
    1a36:	9b08      	ldr	r3, [sp, #32]
    1a38:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1a3a:	06da      	lsls	r2, r3, #27
{
    1a3c:	4604      	mov	r4, r0
    1a3e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1a40:	d405      	bmi.n	1a4e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1a42:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    1a44:	bf4c      	ite	mi
    1a46:	492a      	ldrmi	r1, [pc, #168]	; (1af0 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    1a48:	492a      	ldrpl	r1, [pc, #168]	; (1af4 <hexdump_line_print+0xc4>)
    1a4a:	f7ff ffdf 	bl	1a0c <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    1a4e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1af8 <hexdump_line_print+0xc8>
{
    1a52:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    1a56:	45a8      	cmp	r8, r5
    1a58:	db2a      	blt.n	1ab0 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    1a5a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1afc <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    1a5e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1b00 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    1a62:	f8df a094 	ldr.w	sl, [pc, #148]	; 1af8 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1a66:	2500      	movs	r5, #0
		if (i < length) {
    1a68:	42bd      	cmp	r5, r7
    1a6a:	d22f      	bcs.n	1acc <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    1a6c:	5d72      	ldrb	r2, [r6, r5]
    1a6e:	4649      	mov	r1, r9
    1a70:	4620      	mov	r0, r4
    1a72:	f7ff ffcb 	bl	1a0c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1a76:	3501      	adds	r5, #1
    1a78:	2d10      	cmp	r5, #16
    1a7a:	d120      	bne.n	1abe <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    1a7c:	4921      	ldr	r1, [pc, #132]	; (1b04 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    1a7e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1af8 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    1a82:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1b08 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    1a86:	4620      	mov	r0, r4
    1a88:	f7ff ffc0 	bl	1a0c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1a8c:	2500      	movs	r5, #0
		if (i < length) {
    1a8e:	42af      	cmp	r7, r5
    1a90:	d928      	bls.n	1ae4 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    1a92:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    1a94:	f1a2 0320 	sub.w	r3, r2, #32
    1a98:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    1a9a:	bf28      	it	cs
    1a9c:	222e      	movcs	r2, #46	; 0x2e
    1a9e:	4649      	mov	r1, r9
    1aa0:	4620      	mov	r0, r4
    1aa2:	f7ff ffb3 	bl	1a0c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1aa6:	3501      	adds	r5, #1
    1aa8:	2d10      	cmp	r5, #16
    1aaa:	d114      	bne.n	1ad6 <hexdump_line_print+0xa6>
		}
	}
}
    1aac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    1ab0:	4649      	mov	r1, r9
    1ab2:	4620      	mov	r0, r4
    1ab4:	f7ff ffaa 	bl	1a0c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1ab8:	f108 0801 	add.w	r8, r8, #1
    1abc:	e7cb      	b.n	1a56 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    1abe:	076a      	lsls	r2, r5, #29
    1ac0:	d1d2      	bne.n	1a68 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    1ac2:	4651      	mov	r1, sl
    1ac4:	4620      	mov	r0, r4
    1ac6:	f7ff ffa1 	bl	1a0c <print_formatted>
    1aca:	e7cd      	b.n	1a68 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    1acc:	4641      	mov	r1, r8
    1ace:	4620      	mov	r0, r4
    1ad0:	f7ff ff9c 	bl	1a0c <print_formatted>
    1ad4:	e7cf      	b.n	1a76 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    1ad6:	076b      	lsls	r3, r5, #29
    1ad8:	d1d9      	bne.n	1a8e <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    1ada:	4641      	mov	r1, r8
    1adc:	4620      	mov	r0, r4
    1ade:	f7ff ff95 	bl	1a0c <print_formatted>
    1ae2:	e7d4      	b.n	1a8e <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    1ae4:	4641      	mov	r1, r8
    1ae6:	4620      	mov	r0, r4
    1ae8:	f7ff ff90 	bl	1a0c <print_formatted>
    1aec:	e7db      	b.n	1aa6 <hexdump_line_print+0x76>
    1aee:	bf00      	nop
    1af0:	0000779f 	.word	0x0000779f
    1af4:	0000779e 	.word	0x0000779e
    1af8:	000077a9 	.word	0x000077a9
    1afc:	000077a7 	.word	0x000077a7
    1b00:	000077a1 	.word	0x000077a1
    1b04:	000077ab 	.word	0x000077ab
    1b08:	000077ad 	.word	0x000077ad

00001b0c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    1b0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b10:	b087      	sub	sp, #28
    1b12:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1b14:	f001 0301 	and.w	r3, r1, #1
{
    1b18:	9205      	str	r2, [sp, #20]
    1b1a:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    1b1e:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1b22:	9304      	str	r3, [sp, #16]
{
    1b24:	4607      	mov	r7, r0
    1b26:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1b28:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1b2c:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    1b30:	f004 feb7 	bl	68a2 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    1b34:	4602      	mov	r2, r0
    1b36:	2800      	cmp	r0, #0
    1b38:	d044      	beq.n	1bc4 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    1b3a:	493a      	ldr	r1, [pc, #232]	; (1c24 <prefix_print+0x118>)
    1b3c:	4638      	mov	r0, r7
    1b3e:	f7ff ff65 	bl	1a0c <print_formatted>
    1b42:	4605      	mov	r5, r0
	}

	if (stamp) {
    1b44:	f1bb 0f00 	cmp.w	fp, #0
    1b48:	d008      	beq.n	1b5c <prefix_print+0x50>
	if (!format) {
    1b4a:	f018 0f44 	tst.w	r8, #68	; 0x44
    1b4e:	d13b      	bne.n	1bc8 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    1b50:	4935      	ldr	r1, [pc, #212]	; (1c28 <prefix_print+0x11c>)
    1b52:	4622      	mov	r2, r4
    1b54:	4638      	mov	r0, r7
    1b56:	f7ff ff59 	bl	1a0c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    1b5a:	4405      	add	r5, r0
	if (color) {
    1b5c:	9b04      	ldr	r3, [sp, #16]
    1b5e:	b153      	cbz	r3, 1b76 <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    1b60:	4b32      	ldr	r3, [pc, #200]	; (1c2c <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    1b62:	4933      	ldr	r1, [pc, #204]	; (1c30 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    1b64:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    1b68:	4b32      	ldr	r3, [pc, #200]	; (1c34 <prefix_print+0x128>)
    1b6a:	4638      	mov	r0, r7
    1b6c:	2a00      	cmp	r2, #0
    1b6e:	bf08      	it	eq
    1b70:	461a      	moveq	r2, r3
    1b72:	f7ff ff4b 	bl	1a0c <print_formatted>
	if (level_on) {
    1b76:	b13e      	cbz	r6, 1b88 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    1b78:	4b2f      	ldr	r3, [pc, #188]	; (1c38 <prefix_print+0x12c>)
    1b7a:	4930      	ldr	r1, [pc, #192]	; (1c3c <prefix_print+0x130>)
    1b7c:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    1b80:	4638      	mov	r0, r7
    1b82:	f7ff ff43 	bl	1a0c <print_formatted>
    1b86:	4606      	mov	r6, r0
	if (source_id >= 0) {
    1b88:	f1ba 0f00 	cmp.w	sl, #0
    1b8c:	db16      	blt.n	1bbc <prefix_print+0xb0>
		total += print_formatted(output,
    1b8e:	9b05      	ldr	r3, [sp, #20]
    1b90:	2b00      	cmp	r3, #0
    1b92:	d045      	beq.n	1c20 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1b94:	2301      	movs	r3, #1
    1b96:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    1b9a:	4b29      	ldr	r3, [pc, #164]	; (1c40 <prefix_print+0x134>)
    1b9c:	4c29      	ldr	r4, [pc, #164]	; (1c44 <prefix_print+0x138>)
    1b9e:	f019 0f10 	tst.w	r9, #16
    1ba2:	bf18      	it	ne
    1ba4:	461c      	movne	r4, r3
    1ba6:	4651      	mov	r1, sl
    1ba8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    1bac:	f7ff ff12 	bl	19d4 <log_source_name_get>
    1bb0:	4621      	mov	r1, r4
    1bb2:	4602      	mov	r2, r0
    1bb4:	4638      	mov	r0, r7
    1bb6:	f7ff ff29 	bl	1a0c <print_formatted>
    1bba:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    1bbc:	1970      	adds	r0, r6, r5
    1bbe:	b007      	add	sp, #28
    1bc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    1bc4:	4605      	mov	r5, r0
    1bc6:	e7bd      	b.n	1b44 <prefix_print+0x38>
	} else if (freq != 0U) {
    1bc8:	4b1f      	ldr	r3, [pc, #124]	; (1c48 <prefix_print+0x13c>)
    1bca:	6818      	ldr	r0, [r3, #0]
    1bcc:	2800      	cmp	r0, #0
    1bce:	d0c4      	beq.n	1b5a <prefix_print+0x4e>
		timestamp /= timestamp_div;
    1bd0:	4b1e      	ldr	r3, [pc, #120]	; (1c4c <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    1bd2:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1bd6:	681b      	ldr	r3, [r3, #0]
    1bd8:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    1bdc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    1be0:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    1be4:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    1be8:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    1bec:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    1bf0:	fbb3 f2f1 	udiv	r2, r3, r1
    1bf4:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1bf8:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    1bfc:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1c00:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    1c04:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1c08:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    1c0c:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1c0e:	fbb4 f0f0 	udiv	r0, r4, r0
				length = print_formatted(output,
    1c12:	490f      	ldr	r1, [pc, #60]	; (1c50 <prefix_print+0x144>)
    1c14:	e9cd e001 	strd	lr, r0, [sp, #4]
    1c18:	4638      	mov	r0, r7
    1c1a:	f7ff fef7 	bl	1a0c <print_formatted>
    1c1e:	e79c      	b.n	1b5a <prefix_print+0x4e>
		total += print_formatted(output,
    1c20:	4c08      	ldr	r4, [pc, #32]	; (1c44 <prefix_print+0x138>)
    1c22:	e7c0      	b.n	1ba6 <prefix_print+0x9a>
    1c24:	000077be 	.word	0x000077be
    1c28:	000077c2 	.word	0x000077c2
    1c2c:	00007518 	.word	0x00007518
    1c30:	000077e7 	.word	0x000077e7
    1c34:	000077b0 	.word	0x000077b0
    1c38:	0000752c 	.word	0x0000752c
    1c3c:	000077ea 	.word	0x000077ea
    1c40:	000077ba 	.word	0x000077ba
    1c44:	000077b5 	.word	0x000077b5
    1c48:	200007d8 	.word	0x200007d8
    1c4c:	200007dc 	.word	0x200007dc
    1c50:	000077cb 	.word	0x000077cb

00001c54 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    1c54:	b538      	push	{r3, r4, r5, lr}
    1c56:	460c      	mov	r4, r1
	if (color) {
    1c58:	07e1      	lsls	r1, r4, #31
{
    1c5a:	4605      	mov	r5, r0
	if (color) {
    1c5c:	d503      	bpl.n	1c66 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    1c5e:	4a08      	ldr	r2, [pc, #32]	; (1c80 <postfix_print+0x2c>)
    1c60:	4908      	ldr	r1, [pc, #32]	; (1c84 <postfix_print+0x30>)
    1c62:	f7ff fed3 	bl	1a0c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1c66:	06e2      	lsls	r2, r4, #27
    1c68:	d408      	bmi.n	1c7c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1c6a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    1c6c:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    1c6e:	bf4c      	ite	mi
    1c70:	4905      	ldrmi	r1, [pc, #20]	; (1c88 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    1c72:	4906      	ldrpl	r1, [pc, #24]	; (1c8c <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    1c74:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    1c78:	f7ff bec8 	b.w	1a0c <print_formatted>
}
    1c7c:	bd38      	pop	{r3, r4, r5, pc}
    1c7e:	bf00      	nop
    1c80:	000077b0 	.word	0x000077b0
    1c84:	000077e7 	.word	0x000077e7
    1c88:	0000779f 	.word	0x0000779f
    1c8c:	0000779e 	.word	0x0000779e

00001c90 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    1c90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    1c94:	880b      	ldrh	r3, [r1, #0]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    1c96:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    1c9a:	4606      	mov	r6, r0
    1c9c:	460c      	mov	r4, r1
    1c9e:	4690      	mov	r8, r2
    1ca0:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    1ca4:	d04d      	beq.n	1d42 <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
    1ca6:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    1ca8:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    1caa:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    1cae:	2b00      	cmp	r3, #0
    1cb0:	d044      	beq.n	1d3c <log_output_msg2_process+0xac>
    1cb2:	4925      	ldr	r1, [pc, #148]	; (1d48 <log_output_msg2_process+0xb8>)
    1cb4:	1a5b      	subs	r3, r3, r1
    1cb6:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    1cba:	e9cd 2301 	strd	r2, r3, [sp, #4]
    1cbe:	f8cd 9000 	str.w	r9, [sp]
    1cc2:	68a3      	ldr	r3, [r4, #8]
    1cc4:	2200      	movs	r2, #0
    1cc6:	4641      	mov	r1, r8
    1cc8:	4630      	mov	r0, r6
    1cca:	f7ff ff1f 	bl	1b0c <prefix_print>
    1cce:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    1cd0:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    1cd2:	f855 3b10 	ldr.w	r3, [r5], #16
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    1cd6:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1cda:	b153      	cbz	r3, 1cf2 <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    1cdc:	4f1b      	ldr	r7, [pc, #108]	; (1d4c <log_output_msg2_process+0xbc>)
    1cde:	481c      	ldr	r0, [pc, #112]	; (1d50 <log_output_msg2_process+0xc0>)
    1ce0:	491c      	ldr	r1, [pc, #112]	; (1d54 <log_output_msg2_process+0xc4>)
    1ce2:	462b      	mov	r3, r5
    1ce4:	4632      	mov	r2, r6
    1ce6:	f1b9 0f00 	cmp.w	r9, #0
    1cea:	bf08      	it	eq
    1cec:	4638      	moveq	r0, r7
    1cee:	f004 fa06 	bl	60fe <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    1cf2:	8867      	ldrh	r7, [r4, #2]
    1cf4:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    1cf8:	b197      	cbz	r7, 1d20 <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
    1cfa:	6823      	ldr	r3, [r4, #0]
    1cfc:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1d00:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1d02:	2f10      	cmp	r7, #16
    1d04:	463c      	mov	r4, r7
    1d06:	bf28      	it	cs
    1d08:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    1d0a:	4629      	mov	r1, r5
    1d0c:	f8cd 8000 	str.w	r8, [sp]
    1d10:	4653      	mov	r3, sl
    1d12:	4622      	mov	r2, r4
    1d14:	4630      	mov	r0, r6
    1d16:	f7ff fe8b 	bl	1a30 <hexdump_line_print>
	} while (len);
    1d1a:	1b3f      	subs	r7, r7, r4
		data += length;
    1d1c:	4425      	add	r5, r4
	} while (len);
    1d1e:	d1f0      	bne.n	1d02 <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    1d20:	f1b9 0f00 	cmp.w	r9, #0
    1d24:	d004      	beq.n	1d30 <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
    1d26:	464a      	mov	r2, r9
    1d28:	4641      	mov	r1, r8
    1d2a:	4630      	mov	r0, r6
    1d2c:	f7ff ff92 	bl	1c54 <postfix_print>
	}

	log_output_flush(output);
    1d30:	4630      	mov	r0, r6
}
    1d32:	b004      	add	sp, #16
    1d34:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    1d38:	f004 bdc2 	b.w	68c0 <log_output_flush>
		int16_t source_id = source ?
    1d3c:	f04f 33ff 	mov.w	r3, #4294967295
    1d40:	e7bb      	b.n	1cba <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    1d42:	46ca      	mov	sl, r9
    1d44:	e7c4      	b.n	1cd0 <log_output_msg2_process+0x40>
    1d46:	bf00      	nop
    1d48:	00007450 	.word	0x00007450
    1d4c:	00006911 	.word	0x00006911
    1d50:	000068db 	.word	0x000068db
    1d54:	00000e91 	.word	0x00000e91

00001d58 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    1d58:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1d5a:	f242 730f 	movw	r3, #9999	; 0x270f
    1d5e:	428b      	cmp	r3, r1
    1d60:	bf28      	it	cs
    1d62:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    1d64:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1d66:	4a0f      	ldr	r2, [pc, #60]	; (1da4 <log_output_dropped_process+0x4c>)
{
    1d68:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1d6a:	2105      	movs	r1, #5
    1d6c:	4668      	mov	r0, sp
    1d6e:	f004 fa33 	bl	61d8 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1d72:	6863      	ldr	r3, [r4, #4]
    1d74:	490c      	ldr	r1, [pc, #48]	; (1da8 <log_output_dropped_process+0x50>)
    1d76:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1d78:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1d7a:	220b      	movs	r2, #11
    1d7c:	4628      	mov	r0, r5
    1d7e:	f004 fd92 	bl	68a6 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    1d82:	6863      	ldr	r3, [r4, #4]
    1d84:	4632      	mov	r2, r6
    1d86:	4669      	mov	r1, sp
    1d88:	4628      	mov	r0, r5
    1d8a:	685b      	ldr	r3, [r3, #4]
    1d8c:	f004 fd8b 	bl	68a6 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    1d90:	6863      	ldr	r3, [r4, #4]
    1d92:	4906      	ldr	r1, [pc, #24]	; (1dac <log_output_dropped_process+0x54>)
    1d94:	685b      	ldr	r3, [r3, #4]
    1d96:	221b      	movs	r2, #27
    1d98:	4628      	mov	r0, r5
    1d9a:	f004 fd84 	bl	68a6 <buffer_write>
		     output->control_block->ctx);
}
    1d9e:	b002      	add	sp, #8
    1da0:	bd70      	pop	{r4, r5, r6, pc}
    1da2:	bf00      	nop
    1da4:	00007d1a 	.word	0x00007d1a
    1da8:	0000782c 	.word	0x0000782c
    1dac:	00007810 	.word	0x00007810

00001db0 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    1db0:	4a08      	ldr	r2, [pc, #32]	; (1dd4 <log_output_timestamp_freq_set+0x24>)
{
    1db2:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    1db4:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1db6:	4c08      	ldr	r4, [pc, #32]	; (1dd8 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    1db8:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1dba:	2100      	movs	r1, #0
    1dbc:	42a0      	cmp	r0, r4
    1dbe:	d804      	bhi.n	1dca <log_output_timestamp_freq_set+0x1a>
    1dc0:	b101      	cbz	r1, 1dc4 <log_output_timestamp_freq_set+0x14>
    1dc2:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1dc4:	4b05      	ldr	r3, [pc, #20]	; (1ddc <log_output_timestamp_freq_set+0x2c>)
    1dc6:	6018      	str	r0, [r3, #0]
}
    1dc8:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    1dca:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1dcc:	005b      	lsls	r3, r3, #1
    1dce:	2101      	movs	r1, #1
    1dd0:	e7f4      	b.n	1dbc <log_output_timestamp_freq_set+0xc>
    1dd2:	bf00      	nop
    1dd4:	200007dc 	.word	0x200007dc
    1dd8:	000f4240 	.word	0x000f4240
    1ddc:	200007d8 	.word	0x200007d8

00001de0 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    1de0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1de4:	b087      	sub	sp, #28
    1de6:	e9dd 5711 	ldrd	r5, r7, [sp, #68]	; 0x44
    1dea:	469a      	mov	sl, r3
    1dec:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1dee:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    1df2:	9303      	str	r3, [sp, #12]
    1df4:	4604      	mov	r4, r0
    1df6:	4689      	mov	r9, r1
    1df8:	4690      	mov	r8, r2
	int plen;

	if (fmt) {
    1dfa:	b3cf      	cbz	r7, 1e70 <z_impl_z_log_msg2_runtime_vcreate+0x90>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    1dfc:	f8cd b000 	str.w	fp, [sp]
    1e00:	463b      	mov	r3, r7
    1e02:	462a      	mov	r2, r5
    1e04:	2110      	movs	r1, #16
    1e06:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    1e08:	f8cd b014 	str.w	fp, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    1e0c:	f7fe fbba 	bl	584 <cbvprintf_package>
    1e10:	4606      	mov	r6, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    1e12:	9a03      	ldr	r2, [sp, #12]
    1e14:	f008 0307 	and.w	r3, r8, #7
    1e18:	f004 0807 	and.w	r8, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1e1c:	f102 0017 	add.w	r0, r2, #23
	struct log_msg2_desc desc =
    1e20:	4c14      	ldr	r4, [pc, #80]	; (1e74 <z_impl_z_log_msg2_runtime_vcreate+0x94>)
    1e22:	ea4f 08c8 	mov.w	r8, r8, lsl #3
    1e26:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1e2a:	4430      	add	r0, r6
	struct log_msg2_desc desc =
    1e2c:	4b12      	ldr	r3, [pc, #72]	; (1e78 <z_impl_z_log_msg2_runtime_vcreate+0x98>)
    1e2e:	ea04 2446 	and.w	r4, r4, r6, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1e32:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg2_desc desc =
    1e36:	ea48 0804 	orr.w	r8, r8, r4
    1e3a:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg2_alloc(msg_wlen);
    1e3e:	0880      	lsrs	r0, r0, #2
	struct log_msg2_desc desc =
    1e40:	ea48 0803 	orr.w	r8, r8, r3
		msg = z_log_msg2_alloc(msg_wlen);
    1e44:	f7ff fcc6 	bl	17d4 <z_log_msg2_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    1e48:	4604      	mov	r4, r0
    1e4a:	b140      	cbz	r0, 1e5e <z_impl_z_log_msg2_runtime_vcreate+0x7e>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    1e4c:	b13f      	cbz	r7, 1e5e <z_impl_z_log_msg2_runtime_vcreate+0x7e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    1e4e:	f8cd b000 	str.w	fp, [sp]
    1e52:	463b      	mov	r3, r7
    1e54:	462a      	mov	r2, r5
    1e56:	4631      	mov	r1, r6
    1e58:	3010      	adds	r0, #16
    1e5a:	f7fe fb93 	bl	584 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    1e5e:	4653      	mov	r3, sl
    1e60:	4642      	mov	r2, r8
    1e62:	4649      	mov	r1, r9
    1e64:	4620      	mov	r0, r4
	}
}
    1e66:	b007      	add	sp, #28
    1e68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg2_finalize(msg, source, desc, data);
    1e6c:	f004 bd5d 	b.w	692a <z_log_msg2_finalize>
		plen = 0;
    1e70:	463e      	mov	r6, r7
    1e72:	e7ce      	b.n	1e12 <z_impl_z_log_msg2_runtime_vcreate+0x32>
    1e74:	0007fe00 	.word	0x0007fe00
    1e78:	7ff80000 	.word	0x7ff80000

00001e7c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    1e7c:	4b01      	ldr	r3, [pc, #4]	; (1e84 <log_backend_rtt_init+0x8>)
    1e7e:	2201      	movs	r2, #1
    1e80:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    1e82:	4770      	bx	lr
    1e84:	20000b5d 	.word	0x20000b5d

00001e88 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    1e88:	4b01      	ldr	r3, [pc, #4]	; (1e90 <format_set+0x8>)
	return 0;
}
    1e8a:	2000      	movs	r0, #0
	log_format_current = log_type;
    1e8c:	6019      	str	r1, [r3, #0]
}
    1e8e:	4770      	bx	lr
    1e90:	200007e8 	.word	0x200007e8

00001e94 <panic>:
	panic_mode = true;
    1e94:	4b02      	ldr	r3, [pc, #8]	; (1ea0 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    1e96:	4803      	ldr	r0, [pc, #12]	; (1ea4 <panic+0x10>)
    1e98:	2201      	movs	r2, #1
    1e9a:	701a      	strb	r2, [r3, #0]
    1e9c:	f004 bd10 	b.w	68c0 <log_output_flush>
    1ea0:	20000b5e 	.word	0x20000b5e
    1ea4:	00007560 	.word	0x00007560

00001ea8 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    1ea8:	4801      	ldr	r0, [pc, #4]	; (1eb0 <dropped+0x8>)
    1eaa:	f7ff bf55 	b.w	1d58 <log_output_dropped_process>
    1eae:	bf00      	nop
    1eb0:	00007560 	.word	0x00007560

00001eb4 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1eb4:	4b06      	ldr	r3, [pc, #24]	; (1ed0 <process+0x1c>)
{
    1eb6:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1eb8:	6818      	ldr	r0, [r3, #0]
{
    1eba:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1ebc:	f7ff fbde 	bl	167c <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    1ec0:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1ec2:	4603      	mov	r3, r0
}
    1ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    1ec8:	4802      	ldr	r0, [pc, #8]	; (1ed4 <process+0x20>)
    1eca:	220f      	movs	r2, #15
    1ecc:	4718      	bx	r3
    1ece:	bf00      	nop
    1ed0:	200007e8 	.word	0x200007e8
    1ed4:	00007560 	.word	0x00007560

00001ed8 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    1ed8:	4b05      	ldr	r3, [pc, #20]	; (1ef0 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    1eda:	781b      	ldrb	r3, [r3, #0]
    1edc:	b11b      	cbz	r3, 1ee6 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    1ede:	f241 3088 	movw	r0, #5000	; 0x1388
    1ee2:	f005 b990 	b.w	7206 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    1ee6:	20a4      	movs	r0, #164	; 0xa4
    1ee8:	2100      	movs	r1, #0
    1eea:	f003 be71 	b.w	5bd0 <z_impl_k_sleep>
    1eee:	bf00      	nop
    1ef0:	20000b5e 	.word	0x20000b5e

00001ef4 <data_out_block_mode>:
{
    1ef4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    1ef8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1f88 <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
    1efc:	f8df a08c 	ldr.w	sl, [pc, #140]	; 1f8c <data_out_block_mode+0x98>
{
    1f00:	4680      	mov	r8, r0
    1f02:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    1f04:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    1f06:	f899 5000 	ldrb.w	r5, [r9]
    1f0a:	b9cd      	cbnz	r5, 1f40 <data_out_block_mode+0x4c>
    1f0c:	f04f 33ff 	mov.w	r3, #4294967295
    1f10:	f04f 32ff 	mov.w	r2, #4294967295
    1f14:	4650      	mov	r0, sl
    1f16:	f003 f95d 	bl	51d4 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1f1a:	463a      	mov	r2, r7
    1f1c:	4641      	mov	r1, r8
    1f1e:	4628      	mov	r0, r5
    1f20:	f002 fe74 	bl	4c0c <SEGGER_RTT_WriteSkipNoLock>
    1f24:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    1f26:	4650      	mov	r0, sl
    1f28:	f003 f9cc 	bl	52c4 <z_impl_k_mutex_unlock>
		if (ret) {
    1f2c:	4d18      	ldr	r5, [pc, #96]	; (1f90 <data_out_block_mode+0x9c>)
    1f2e:	b1fe      	cbz	r6, 1f70 <data_out_block_mode+0x7c>
	host_present = true;
    1f30:	2301      	movs	r3, #1
    1f32:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    1f34:	f899 3000 	ldrb.w	r3, [r9]
    1f38:	b96b      	cbnz	r3, 1f56 <data_out_block_mode+0x62>
}
    1f3a:	4638      	mov	r0, r7
    1f3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1f40:	463a      	mov	r2, r7
    1f42:	4641      	mov	r1, r8
    1f44:	2000      	movs	r0, #0
    1f46:	f002 fe61 	bl	4c0c <SEGGER_RTT_WriteSkipNoLock>
    1f4a:	4606      	mov	r6, r0
    1f4c:	e7ee      	b.n	1f2c <data_out_block_mode+0x38>
	if (retry_cnt == 0) {
    1f4e:	b95c      	cbnz	r4, 1f68 <data_out_block_mode+0x74>
		host_present = false;
    1f50:	702c      	strb	r4, [r5, #0]
    1f52:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    1f56:	2000      	movs	r0, #0
    1f58:	f002 fed4 	bl	4d04 <SEGGER_RTT_HasDataUp>
    1f5c:	2800      	cmp	r0, #0
    1f5e:	d0ec      	beq.n	1f3a <data_out_block_mode+0x46>
    1f60:	782b      	ldrb	r3, [r5, #0]
    1f62:	2b00      	cmp	r3, #0
    1f64:	d1f3      	bne.n	1f4e <data_out_block_mode+0x5a>
    1f66:	e7e8      	b.n	1f3a <data_out_block_mode+0x46>
			on_failed_write(retry_cnt--);
    1f68:	3c01      	subs	r4, #1
    1f6a:	f7ff ffb5 	bl	1ed8 <on_failed_write.part.0>
    1f6e:	e7f2      	b.n	1f56 <data_out_block_mode+0x62>
		} else if (host_present) {
    1f70:	782b      	ldrb	r3, [r5, #0]
    1f72:	b113      	cbz	r3, 1f7a <data_out_block_mode+0x86>
	if (retry_cnt == 0) {
    1f74:	3c01      	subs	r4, #1
    1f76:	d104      	bne.n	1f82 <data_out_block_mode+0x8e>
		host_present = false;
    1f78:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    1f7a:	782b      	ldrb	r3, [r5, #0]
    1f7c:	2b00      	cmp	r3, #0
    1f7e:	d1c2      	bne.n	1f06 <data_out_block_mode+0x12>
    1f80:	e7db      	b.n	1f3a <data_out_block_mode+0x46>
    1f82:	f7ff ffa9 	bl	1ed8 <on_failed_write.part.0>
    1f86:	e7f8      	b.n	1f7a <data_out_block_mode+0x86>
    1f88:	20000b5e 	.word	0x20000b5e
    1f8c:	200000e8 	.word	0x200000e8
    1f90:	20000b5d 	.word	0x20000b5d

00001f94 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    1f94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    1f98:	4605      	mov	r5, r0
	__asm__ volatile(
    1f9a:	f04f 0320 	mov.w	r3, #32
    1f9e:	f3ef 8611 	mrs	r6, BASEPRI
    1fa2:	f383 8812 	msr	BASEPRI_MAX, r3
    1fa6:	f3bf 8f6f 	isb	sy
	return list->head;
    1faa:	4b0e      	ldr	r3, [pc, #56]	; (1fe4 <pm_state_notify+0x50>)
    1fac:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1fae:	b19c      	cbz	r4, 1fd8 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1fb0:	4f0d      	ldr	r7, [pc, #52]	; (1fe8 <pm_state_notify+0x54>)
    1fb2:	f8df 8038 	ldr.w	r8, [pc, #56]	; 1fec <pm_state_notify+0x58>
    1fb6:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    1fba:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    1fbe:	2d00      	cmp	r5, #0
    1fc0:	bf08      	it	eq
    1fc2:	4613      	moveq	r3, r2
		if (callback) {
    1fc4:	b12b      	cbz	r3, 1fd2 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    1fc6:	f898 2014 	ldrb.w	r2, [r8, #20]
    1fca:	fb09 f202 	mul.w	r2, r9, r2
    1fce:	5cb8      	ldrb	r0, [r7, r2]
    1fd0:	4798      	blx	r3
	return node->next;
    1fd2:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    1fd4:	2c00      	cmp	r4, #0
    1fd6:	d1f0      	bne.n	1fba <pm_state_notify+0x26>
	__asm__ volatile(
    1fd8:	f386 8811 	msr	BASEPRI, r6
    1fdc:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    1fe0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    1fe4:	200007f8 	.word	0x200007f8
    1fe8:	20000800 	.word	0x20000800
    1fec:	20000ac4 	.word	0x20000ac4

00001ff0 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    1ff0:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    1ff2:	2301      	movs	r3, #1
    1ff4:	f000 001f 	and.w	r0, r0, #31
    1ff8:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1ffc:	4b07      	ldr	r3, [pc, #28]	; (201c <atomic_clear_bit.constprop.0+0x2c>)
    1ffe:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2002:	43c0      	mvns	r0, r0
    2004:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2008:	e853 2f00 	ldrex	r2, [r3]
    200c:	4002      	ands	r2, r0
    200e:	e843 2100 	strex	r1, r2, [r3]
    2012:	2900      	cmp	r1, #0
    2014:	d1f8      	bne.n	2008 <atomic_clear_bit.constprop.0+0x18>
    2016:	f3bf 8f5b 	dmb	ish
}
    201a:	4770      	bx	lr
    201c:	2000080c 	.word	0x2000080c

00002020 <pm_system_resume>:

void pm_system_resume(void)
{
    2020:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    2022:	4b1a      	ldr	r3, [pc, #104]	; (208c <pm_system_resume+0x6c>)
    2024:	7d1c      	ldrb	r4, [r3, #20]
    2026:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    202a:	f004 031f 	and.w	r3, r4, #31
    202e:	2201      	movs	r2, #1
    2030:	409a      	lsls	r2, r3
    2032:	4b17      	ldr	r3, [pc, #92]	; (2090 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2034:	0961      	lsrs	r1, r4, #5
    2036:	43d0      	mvns	r0, r2
    2038:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    203c:	e853 1f00 	ldrex	r1, [r3]
    2040:	ea01 0500 	and.w	r5, r1, r0
    2044:	e843 5c00 	strex	ip, r5, [r3]
    2048:	f1bc 0f00 	cmp.w	ip, #0
    204c:	d1f6      	bne.n	203c <pm_system_resume+0x1c>
    204e:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2052:	4211      	tst	r1, r2
    2054:	d013      	beq.n	207e <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    2056:	4b0f      	ldr	r3, [pc, #60]	; (2094 <pm_system_resume+0x74>)
    2058:	4d0f      	ldr	r5, [pc, #60]	; (2098 <pm_system_resume+0x78>)
    205a:	b18b      	cbz	r3, 2080 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    205c:	230c      	movs	r3, #12
    205e:	4363      	muls	r3, r4
    2060:	18ea      	adds	r2, r5, r3
    2062:	5ce8      	ldrb	r0, [r5, r3]
    2064:	7851      	ldrb	r1, [r2, #1]
    2066:	f004 fd1d 	bl	6aa4 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    206a:	2000      	movs	r0, #0
    206c:	f7ff ff92 	bl	1f94 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2070:	230c      	movs	r3, #12
    2072:	435c      	muls	r4, r3
    2074:	192a      	adds	r2, r5, r4
    2076:	2300      	movs	r3, #0
    2078:	512b      	str	r3, [r5, r4]
    207a:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    207e:	bd38      	pop	{r3, r4, r5, pc}
    2080:	f383 8811 	msr	BASEPRI, r3
    2084:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2088:	e7ef      	b.n	206a <pm_system_resume+0x4a>
    208a:	bf00      	nop
    208c:	20000ac4 	.word	0x20000ac4
    2090:	20000810 	.word	0x20000810
    2094:	00006aa5 	.word	0x00006aa5
    2098:	20000800 	.word	0x20000800

0000209c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    209c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    20a0:	4b32      	ldr	r3, [pc, #200]	; (216c <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    20a2:	4a33      	ldr	r2, [pc, #204]	; (2170 <pm_system_suspend+0xd4>)
    20a4:	7d1c      	ldrb	r4, [r3, #20]
    20a6:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    20aa:	0963      	lsrs	r3, r4, #5
    20ac:	ea4f 0983 	mov.w	r9, r3, lsl #2
    20b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    20b4:	4e2f      	ldr	r6, [pc, #188]	; (2174 <pm_system_suspend+0xd8>)
    20b6:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    20ba:	f004 081f 	and.w	r8, r4, #31
    20be:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    20c2:	f013 0f01 	tst.w	r3, #1
{
    20c6:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    20c8:	d10a      	bne.n	20e0 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    20ca:	4601      	mov	r1, r0
    20cc:	4620      	mov	r0, r4
    20ce:	f000 f869 	bl	21a4 <pm_policy_next_state>
		if (info != NULL) {
    20d2:	b128      	cbz	r0, 20e0 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    20d4:	c807      	ldmia	r0, {r0, r1, r2}
    20d6:	230c      	movs	r3, #12
    20d8:	fb03 6304 	mla	r3, r3, r4, r6
    20dc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    20e0:	230c      	movs	r3, #12
    20e2:	4363      	muls	r3, r4
    20e4:	18f2      	adds	r2, r6, r3
    20e6:	5cf5      	ldrb	r5, [r6, r3]
    20e8:	b92d      	cbnz	r5, 20f6 <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    20ea:	4620      	mov	r0, r4
    20ec:	f7ff ff80 	bl	1ff0 <atomic_clear_bit.constprop.0>
		ret = false;
    20f0:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    20f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    20f6:	1c7b      	adds	r3, r7, #1
    20f8:	d00f      	beq.n	211a <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    20fa:	f8d2 c008 	ldr.w	ip, [r2, #8]
    20fe:	481e      	ldr	r0, [pc, #120]	; (2178 <pm_system_suspend+0xdc>)
    2100:	4a1e      	ldr	r2, [pc, #120]	; (217c <pm_system_suspend+0xe0>)
    2102:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    2106:	2100      	movs	r1, #0
    2108:	2300      	movs	r3, #0
    210a:	fbec 0105 	umlal	r0, r1, ip, r5
    210e:	f7fd ffe7 	bl	e0 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    2112:	2101      	movs	r1, #1
    2114:	1a38      	subs	r0, r7, r0
    2116:	f005 f858 	bl	71ca <z_set_timeout_expiry>
	k_sched_lock();
    211a:	f003 fad9 	bl	56d0 <k_sched_lock>
	pm_state_notify(true);
    211e:	2001      	movs	r0, #1
    2120:	f7ff ff38 	bl	1f94 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2124:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2128:	2301      	movs	r3, #1
    212a:	fa03 f808 	lsl.w	r8, r3, r8
    212e:	4b14      	ldr	r3, [pc, #80]	; (2180 <pm_system_suspend+0xe4>)
    2130:	4499      	add	r9, r3
    2132:	e859 3f00 	ldrex	r3, [r9]
    2136:	ea43 0308 	orr.w	r3, r3, r8
    213a:	e849 3200 	strex	r2, r3, [r9]
    213e:	2a00      	cmp	r2, #0
    2140:	d1f7      	bne.n	2132 <pm_system_suspend+0x96>
    2142:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    2146:	4b0f      	ldr	r3, [pc, #60]	; (2184 <pm_system_suspend+0xe8>)
    2148:	b133      	cbz	r3, 2158 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    214a:	230c      	movs	r3, #12
    214c:	4363      	muls	r3, r4
    214e:	18f2      	adds	r2, r6, r3
    2150:	5cf0      	ldrb	r0, [r6, r3]
    2152:	7851      	ldrb	r1, [r2, #1]
    2154:	f004 fc9a 	bl	6a8c <pm_state_set>
	pm_system_resume();
    2158:	f7ff ff62 	bl	2020 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    215c:	4620      	mov	r0, r4
    215e:	f7ff ff47 	bl	1ff0 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    2162:	f003 fc85 	bl	5a70 <k_sched_unlock>
	bool ret = true;
    2166:	2001      	movs	r0, #1
    2168:	e7c3      	b.n	20f2 <pm_system_suspend+0x56>
    216a:	bf00      	nop
    216c:	20000ac4 	.word	0x20000ac4
    2170:	2000080c 	.word	0x2000080c
    2174:	20000800 	.word	0x20000800
    2178:	000f423f 	.word	0x000f423f
    217c:	000f4240 	.word	0x000f4240
    2180:	20000810 	.word	0x20000810
    2184:	00006a8d 	.word	0x00006a8d

00002188 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2188:	4b05      	ldr	r3, [pc, #20]	; (21a0 <pm_policy_state_lock_is_active+0x18>)
    218a:	f3bf 8f5b 	dmb	ish
    218e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2192:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    2196:	3800      	subs	r0, #0
    2198:	bf18      	it	ne
    219a:	2001      	movne	r0, #1
    219c:	4770      	bx	lr
    219e:	bf00      	nop
    21a0:	20000814 	.word	0x20000814

000021a4 <pm_policy_next_state>:
{
    21a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21a8:	b085      	sub	sp, #20
    21aa:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    21ac:	a903      	add	r1, sp, #12
    21ae:	f000 f847 	bl	2240 <pm_state_cpu_get_all>
    21b2:	f8df 8080 	ldr.w	r8, [pc, #128]	; 2234 <pm_policy_next_state+0x90>
    21b6:	f8df a080 	ldr.w	sl, [pc, #128]	; 2238 <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    21ba:	1e44      	subs	r4, r0, #1
    21bc:	b224      	sxth	r4, r4
    21be:	f04f 0b00 	mov.w	fp, #0
    21c2:	1c63      	adds	r3, r4, #1
    21c4:	d104      	bne.n	21d0 <pm_policy_next_state+0x2c>
	return NULL;
    21c6:	2600      	movs	r6, #0
}
    21c8:	4630      	mov	r0, r6
    21ca:	b005      	add	sp, #20
    21cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    21d0:	9a03      	ldr	r2, [sp, #12]
    21d2:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    21d6:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    21da:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    21de:	f7ff ffd3 	bl	2188 <pm_policy_state_lock_is_active>
    21e2:	4605      	mov	r5, r0
    21e4:	bb10      	cbnz	r0, 222c <pm_policy_next_state+0x88>
    21e6:	6870      	ldr	r0, [r6, #4]
    21e8:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    21ec:	46c4      	mov	ip, r8
    21ee:	4629      	mov	r1, r5
    21f0:	fbe0 c109 	umlal	ip, r1, r0, r9
    21f4:	4652      	mov	r2, sl
    21f6:	465b      	mov	r3, fp
    21f8:	4660      	mov	r0, ip
    21fa:	f7fd ff71 	bl	e0 <__aeabi_uldivmod>
    21fe:	9001      	str	r0, [sp, #4]
    2200:	68b0      	ldr	r0, [r6, #8]
    2202:	46c4      	mov	ip, r8
    2204:	4629      	mov	r1, r5
    2206:	fbe0 c109 	umlal	ip, r1, r0, r9
    220a:	465b      	mov	r3, fp
    220c:	4652      	mov	r2, sl
    220e:	4660      	mov	r0, ip
    2210:	f7fd ff66 	bl	e0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2214:	4b09      	ldr	r3, [pc, #36]	; (223c <pm_policy_next_state+0x98>)
    2216:	681b      	ldr	r3, [r3, #0]
    2218:	1c59      	adds	r1, r3, #1
    221a:	d001      	beq.n	2220 <pm_policy_next_state+0x7c>
    221c:	4283      	cmp	r3, r0
    221e:	d905      	bls.n	222c <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    2220:	1c7a      	adds	r2, r7, #1
    2222:	d0d1      	beq.n	21c8 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    2224:	9b01      	ldr	r3, [sp, #4]
    2226:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    2228:	42b8      	cmp	r0, r7
    222a:	d9cd      	bls.n	21c8 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    222c:	3c01      	subs	r4, #1
    222e:	b224      	sxth	r4, r4
    2230:	e7c7      	b.n	21c2 <pm_policy_next_state+0x1e>
    2232:	bf00      	nop
    2234:	000f423f 	.word	0x000f423f
    2238:	000f4240 	.word	0x000f4240
    223c:	20000008 	.word	0x20000008

00002240 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2240:	b908      	cbnz	r0, 2246 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2242:	4b02      	ldr	r3, [pc, #8]	; (224c <pm_state_cpu_get_all+0xc>)
    2244:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2246:	2000      	movs	r0, #0
    2248:	4770      	bx	lr
    224a:	bf00      	nop
    224c:	00007570 	.word	0x00007570

00002250 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2250:	4901      	ldr	r1, [pc, #4]	; (2258 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2252:	2210      	movs	r2, #16
	str	r2, [r1]
    2254:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2256:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2258:	e000ed10 	.word	0xe000ed10

0000225c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    225c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    225e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2260:	f380 8811 	msr	BASEPRI, r0
	isb
    2264:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2268:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    226c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    226e:	b662      	cpsie	i
	isb
    2270:	f3bf 8f6f 	isb	sy

	bx	lr
    2274:	4770      	bx	lr
    2276:	bf00      	nop

00002278 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2278:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    227a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    227c:	f381 8811 	msr	BASEPRI, r1

	wfe
    2280:	bf20      	wfe

	msr	BASEPRI, r0
    2282:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2286:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2288:	4770      	bx	lr
    228a:	bf00      	nop

0000228c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    228c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2290:	4681      	mov	r9, r0
    2292:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    2294:	460c      	mov	r4, r1
    2296:	2900      	cmp	r1, #0
    2298:	d04c      	beq.n	2334 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    229a:	466e      	mov	r6, sp
    229c:	b08a      	sub	sp, #40	; 0x28
    229e:	466d      	mov	r5, sp
    22a0:	e9d1 1200 	ldrd	r1, r2, [r1]
    22a4:	68a3      	ldr	r3, [r4, #8]
    22a6:	4827      	ldr	r0, [pc, #156]	; (2344 <z_arm_fatal_error+0xb8>)
    22a8:	46a8      	mov	r8, r5
    22aa:	f04f 0a05 	mov.w	sl, #5
    22ae:	e9c5 0105 	strd	r0, r1, [r5, #20]
    22b2:	e9c5 2307 	strd	r2, r3, [r5, #28]
    22b6:	f848 af10 	str.w	sl, [r8, #16]!
    22ba:	4823      	ldr	r0, [pc, #140]	; (2348 <z_arm_fatal_error+0xbc>)
    22bc:	4642      	mov	r2, r8
    22be:	2300      	movs	r3, #0
    22c0:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    22c4:	f004 fb4c 	bl	6960 <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    22c8:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    22cc:	6963      	ldr	r3, [r4, #20]
    22ce:	481f      	ldr	r0, [pc, #124]	; (234c <z_arm_fatal_error+0xc0>)
    22d0:	f8c5 a010 	str.w	sl, [r5, #16]
    22d4:	46b5      	mov	sp, r6
    22d6:	e9c5 0105 	strd	r0, r1, [r5, #20]
    22da:	46ad      	mov	sp, r5
    22dc:	e9c5 2307 	strd	r2, r3, [r5, #28]
    22e0:	4819      	ldr	r0, [pc, #100]	; (2348 <z_arm_fatal_error+0xbc>)
    22e2:	4642      	mov	r2, r8
    22e4:	2300      	movs	r3, #0
    22e6:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    22ea:	f004 fb39 	bl	6960 <z_impl_z_log_msg2_static_create>
    22ee:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    22f0:	b088      	sub	sp, #32
    22f2:	466d      	mov	r5, sp
    22f4:	69e3      	ldr	r3, [r4, #28]
    22f6:	4a16      	ldr	r2, [pc, #88]	; (2350 <z_arm_fatal_error+0xc4>)
    22f8:	46a8      	mov	r8, r5
    22fa:	f04f 0a03 	mov.w	sl, #3
    22fe:	e9c5 2305 	strd	r2, r3, [r5, #20]
    2302:	f848 af10 	str.w	sl, [r8, #16]!
    2306:	4810      	ldr	r0, [pc, #64]	; (2348 <z_arm_fatal_error+0xbc>)
    2308:	4642      	mov	r2, r8
    230a:	2300      	movs	r3, #0
    230c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2310:	f004 fb26 	bl	6960 <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2314:	4a0f      	ldr	r2, [pc, #60]	; (2354 <z_arm_fatal_error+0xc8>)
    2316:	69a3      	ldr	r3, [r4, #24]
    2318:	f8c5 a010 	str.w	sl, [r5, #16]
    231c:	46b5      	mov	sp, r6
    231e:	e9c5 2305 	strd	r2, r3, [r5, #20]
    2322:	46ad      	mov	sp, r5
    2324:	4808      	ldr	r0, [pc, #32]	; (2348 <z_arm_fatal_error+0xbc>)
    2326:	2300      	movs	r3, #0
    2328:	4642      	mov	r2, r8
    232a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    232e:	f004 fb17 	bl	6960 <z_impl_z_log_msg2_static_create>
    2332:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2334:	4621      	mov	r1, r4
    2336:	4648      	mov	r0, r9
    2338:	f002 fd0e 	bl	4d58 <z_fatal_error>
}
    233c:	46bd      	mov	sp, r7
    233e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2342:	bf00      	nop
    2344:	0000784b 	.word	0x0000784b
    2348:	00007480 	.word	0x00007480
    234c:	0000787a 	.word	0x0000787a
    2350:	000078a9 	.word	0x000078a9
    2354:	000078b8 	.word	0x000078b8

00002358 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2358:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    235a:	2b00      	cmp	r3, #0
    235c:	db08      	blt.n	2370 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    235e:	2201      	movs	r2, #1
    2360:	f000 001f 	and.w	r0, r0, #31
    2364:	fa02 f000 	lsl.w	r0, r2, r0
    2368:	095b      	lsrs	r3, r3, #5
    236a:	4a02      	ldr	r2, [pc, #8]	; (2374 <arch_irq_enable+0x1c>)
    236c:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2370:	4770      	bx	lr
    2372:	bf00      	nop
    2374:	e000e100 	.word	0xe000e100

00002378 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    2378:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    237a:	2b00      	cmp	r3, #0
    237c:	db0d      	blt.n	239a <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    237e:	2201      	movs	r2, #1
    2380:	095b      	lsrs	r3, r3, #5
    2382:	f000 001f 	and.w	r0, r0, #31
    2386:	fa02 f000 	lsl.w	r0, r2, r0
    238a:	3320      	adds	r3, #32
    238c:	4a03      	ldr	r2, [pc, #12]	; (239c <arch_irq_disable+0x24>)
    238e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2392:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2396:	f3bf 8f6f 	isb	sy
}
    239a:	4770      	bx	lr
    239c:	e000e100 	.word	0xe000e100

000023a0 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    23a0:	4b05      	ldr	r3, [pc, #20]	; (23b8 <arch_irq_is_enabled+0x18>)
    23a2:	0942      	lsrs	r2, r0, #5
    23a4:	f000 001f 	and.w	r0, r0, #31
    23a8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    23ac:	2301      	movs	r3, #1
    23ae:	fa03 f000 	lsl.w	r0, r3, r0
}
    23b2:	4010      	ands	r0, r2
    23b4:	4770      	bx	lr
    23b6:	bf00      	nop
    23b8:	e000e100 	.word	0xe000e100

000023bc <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    23bc:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    23be:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    23c0:	bfa8      	it	ge
    23c2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    23c6:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    23ca:	bfb8      	it	lt
    23cc:	4b06      	ldrlt	r3, [pc, #24]	; (23e8 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    23ce:	ea4f 1141 	mov.w	r1, r1, lsl #5
    23d2:	bfac      	ite	ge
    23d4:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    23d8:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    23dc:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    23de:	bfb4      	ite	lt
    23e0:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    23e2:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    23e6:	4770      	bx	lr
    23e8:	e000ed14 	.word	0xe000ed14

000023ec <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    23ec:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    23ee:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    23f0:	4b04      	ldr	r3, [pc, #16]	; (2404 <_arch_isr_direct_pm+0x18>)
    23f2:	699a      	ldr	r2, [r3, #24]
    23f4:	b11a      	cbz	r2, 23fe <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    23f6:	2200      	movs	r2, #0
    23f8:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    23fa:	f004 fd86 	bl	6f0a <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    23fe:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    2400:	bd08      	pop	{r3, pc}
    2402:	bf00      	nop
    2404:	20000ac4 	.word	0x20000ac4

00002408 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2408:	bf30      	wfi
    b z_SysNmiOnReset
    240a:	f7ff bffd 	b.w	2408 <z_SysNmiOnReset>
    240e:	bf00      	nop

00002410 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2410:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2412:	4b08      	ldr	r3, [pc, #32]	; (2434 <z_arm_prep_c+0x24>)
    2414:	4a08      	ldr	r2, [pc, #32]	; (2438 <z_arm_prep_c+0x28>)
    2416:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    241a:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    241c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2420:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2424:	f002 fd30 	bl	4e88 <z_bss_zero>
	z_data_copy();
    2428:	f003 fc56 	bl	5cd8 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    242c:	f000 fb94 	bl	2b58 <z_arm_interrupt_init>
	z_cstart();
    2430:	f002 fd6e 	bl	4f10 <z_cstart>
    2434:	00000000 	.word	0x00000000
    2438:	e000ed00 	.word	0xe000ed00

0000243c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    243c:	4a09      	ldr	r2, [pc, #36]	; (2464 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    243e:	490a      	ldr	r1, [pc, #40]	; (2468 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2440:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2442:	6809      	ldr	r1, [r1, #0]
    2444:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2446:	4909      	ldr	r1, [pc, #36]	; (246c <arch_swap+0x30>)
	_current->arch.basepri = key;
    2448:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    244a:	684b      	ldr	r3, [r1, #4]
    244c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2450:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    2452:	2300      	movs	r3, #0
    2454:	f383 8811 	msr	BASEPRI, r3
    2458:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    245c:	6893      	ldr	r3, [r2, #8]
}
    245e:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2460:	4770      	bx	lr
    2462:	bf00      	nop
    2464:	20000ac4 	.word	0x20000ac4
    2468:	00007634 	.word	0x00007634
    246c:	e000ed00 	.word	0xe000ed00

00002470 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2470:	4912      	ldr	r1, [pc, #72]	; (24bc <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2472:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2474:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2478:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    247a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    247e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2482:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2484:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2488:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    248c:	4f0c      	ldr	r7, [pc, #48]	; (24c0 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    248e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2492:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2494:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2496:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2498:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    249a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    249c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    249e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    24a2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    24a4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    24a6:	f000 fbf3 	bl	2c90 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    24aa:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    24ae:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    24b2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    24b6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    24ba:	4770      	bx	lr
    ldr r1, =_kernel
    24bc:	20000ac4 	.word	0x20000ac4
    ldr v4, =_SCS_ICSR
    24c0:	e000ed04 	.word	0xe000ed04

000024c4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    24c4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    24c8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    24ca:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    24ce:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    24d2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    24d4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    24d8:	2902      	cmp	r1, #2
    beq _oops
    24da:	d0ff      	beq.n	24dc <_oops>

000024dc <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    24dc:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    24de:	f004 fa84 	bl	69ea <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    24e2:	bd01      	pop	{r0, pc}

000024e4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    24e4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    24e8:	9b00      	ldr	r3, [sp, #0]
    24ea:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    24ee:	490a      	ldr	r1, [pc, #40]	; (2518 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    24f0:	9b01      	ldr	r3, [sp, #4]
    24f2:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    24f6:	9b02      	ldr	r3, [sp, #8]
    24f8:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    24fc:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2500:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2504:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2508:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    250c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    250e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2510:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2512:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2514:	4770      	bx	lr
    2516:	bf00      	nop
    2518:	00006393 	.word	0x00006393

0000251c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    251c:	4a09      	ldr	r2, [pc, #36]	; (2544 <z_check_thread_stack_fail+0x28>)
{
    251e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    2520:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    2522:	b170      	cbz	r0, 2542 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2524:	f113 0f16 	cmn.w	r3, #22
    2528:	6e40      	ldr	r0, [r0, #100]	; 0x64
    252a:	d005      	beq.n	2538 <z_check_thread_stack_fail+0x1c>
    252c:	f1a0 0220 	sub.w	r2, r0, #32
    2530:	429a      	cmp	r2, r3
    2532:	d805      	bhi.n	2540 <z_check_thread_stack_fail+0x24>
    2534:	4283      	cmp	r3, r0
    2536:	d203      	bcs.n	2540 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2538:	4281      	cmp	r1, r0
    253a:	bf28      	it	cs
    253c:	2000      	movcs	r0, #0
    253e:	4770      	bx	lr
    2540:	2000      	movs	r0, #0
}
    2542:	4770      	bx	lr
    2544:	20000ac4 	.word	0x20000ac4

00002548 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2548:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    254a:	4b09      	ldr	r3, [pc, #36]	; (2570 <arch_switch_to_main_thread+0x28>)
    254c:	6098      	str	r0, [r3, #8]
{
    254e:	460d      	mov	r5, r1
    2550:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2552:	f000 fb9d 	bl	2c90 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2556:	4620      	mov	r0, r4
    2558:	f385 8809 	msr	PSP, r5
    255c:	2100      	movs	r1, #0
    255e:	b663      	cpsie	if
    2560:	f381 8811 	msr	BASEPRI, r1
    2564:	f3bf 8f6f 	isb	sy
    2568:	2200      	movs	r2, #0
    256a:	2300      	movs	r3, #0
    256c:	f003 ff11 	bl	6392 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2570:	20000ac4 	.word	0x20000ac4

00002574 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2574:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2576:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2578:	4a0b      	ldr	r2, [pc, #44]	; (25a8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    257a:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    257c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    257e:	bf1e      	ittt	ne
	movne	r1, #0
    2580:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2582:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2584:	f004 fcc1 	blne	6f0a <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2588:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    258a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    258e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2592:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2596:	4905      	ldr	r1, [pc, #20]	; (25ac <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2598:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    259a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    259c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    259e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    25a2:	4903      	ldr	r1, [pc, #12]	; (25b0 <_isr_wrapper+0x3c>)
	bx r1
    25a4:	4708      	bx	r1
    25a6:	0000      	.short	0x0000
	ldr r2, =_kernel
    25a8:	20000ac4 	.word	0x20000ac4
	ldr r1, =_sw_isr_table
    25ac:	00007310 	.word	0x00007310
	ldr r1, =z_arm_int_exit
    25b0:	000025b5 	.word	0x000025b5

000025b4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    25b4:	4b04      	ldr	r3, [pc, #16]	; (25c8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    25b6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    25b8:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    25ba:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    25bc:	d003      	beq.n	25c6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    25be:	4903      	ldr	r1, [pc, #12]	; (25cc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    25c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    25c4:	600a      	str	r2, [r1, #0]

000025c6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    25c6:	4770      	bx	lr
	ldr r3, =_kernel
    25c8:	20000ac4 	.word	0x20000ac4
	ldr r1, =_SCS_ICSR
    25cc:	e000ed04 	.word	0xe000ed04

000025d0 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    25d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    25d4:	b086      	sub	sp, #24
    25d6:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    25d8:	4b3c      	ldr	r3, [pc, #240]	; (26cc <bus_fault.constprop.0+0xfc>)
    25da:	617b      	str	r3, [r7, #20]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    25dc:	4606      	mov	r6, r0
    25de:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    25e0:	483b      	ldr	r0, [pc, #236]	; (26d0 <bus_fault.constprop.0+0x100>)
    25e2:	2402      	movs	r4, #2
    25e4:	f107 0210 	add.w	r2, r7, #16
    25e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    25ec:	613c      	str	r4, [r7, #16]
    25ee:	f004 fa0b 	bl	6a08 <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    25f2:	4b38      	ldr	r3, [pc, #224]	; (26d4 <bus_fault.constprop.0+0x104>)
    25f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    25f6:	04db      	lsls	r3, r3, #19
    25f8:	d509      	bpl.n	260e <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
    25fa:	4b37      	ldr	r3, [pc, #220]	; (26d8 <bus_fault.constprop.0+0x108>)
    25fc:	4834      	ldr	r0, [pc, #208]	; (26d0 <bus_fault.constprop.0+0x100>)
    25fe:	f107 0210 	add.w	r2, r7, #16
    2602:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2606:	e9c7 4304 	strd	r4, r3, [r7, #16]
    260a:	f004 f9fd 	bl	6a08 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    260e:	4b31      	ldr	r3, [pc, #196]	; (26d4 <bus_fault.constprop.0+0x104>)
    2610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2612:	051c      	lsls	r4, r3, #20
    2614:	d50a      	bpl.n	262c <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    2616:	4b31      	ldr	r3, [pc, #196]	; (26dc <bus_fault.constprop.0+0x10c>)
    2618:	617b      	str	r3, [r7, #20]
    261a:	482d      	ldr	r0, [pc, #180]	; (26d0 <bus_fault.constprop.0+0x100>)
    261c:	2302      	movs	r3, #2
    261e:	f107 0210 	add.w	r2, r7, #16
    2622:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2626:	613b      	str	r3, [r7, #16]
    2628:	f004 f9ee 	bl	6a08 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    262c:	4c29      	ldr	r4, [pc, #164]	; (26d4 <bus_fault.constprop.0+0x104>)
    262e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2630:	0598      	lsls	r0, r3, #22
    2632:	d522      	bpl.n	267a <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
    2634:	4b2a      	ldr	r3, [pc, #168]	; (26e0 <bus_fault.constprop.0+0x110>)
    2636:	617b      	str	r3, [r7, #20]
    2638:	f107 0210 	add.w	r2, r7, #16
    263c:	2302      	movs	r3, #2
    263e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2642:	4823      	ldr	r0, [pc, #140]	; (26d0 <bus_fault.constprop.0+0x100>)
    2644:	613b      	str	r3, [r7, #16]
    2646:	f004 f9df 	bl	6a08 <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    264a:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    264c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    264e:	0411      	lsls	r1, r2, #16
		PR_FAULT_INFO("  Precise data bus error");
    2650:	46e8      	mov	r8, sp
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2652:	d512      	bpl.n	267a <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2654:	b088      	sub	sp, #32
    2656:	4923      	ldr	r1, [pc, #140]	; (26e4 <bus_fault.constprop.0+0x114>)
    2658:	481d      	ldr	r0, [pc, #116]	; (26d0 <bus_fault.constprop.0+0x100>)
    265a:	466a      	mov	r2, sp
    265c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2660:	2303      	movs	r3, #3
    2662:	f842 3f10 	str.w	r3, [r2, #16]!
    2666:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    266a:	f004 f9cd 	bl	6a08 <z_log_msg2_static_create.constprop.0>
    266e:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    2670:	b11e      	cbz	r6, 267a <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2672:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2674:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2678:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    267a:	4b16      	ldr	r3, [pc, #88]	; (26d4 <bus_fault.constprop.0+0x104>)
    267c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    267e:	055a      	lsls	r2, r3, #21
    2680:	d50a      	bpl.n	2698 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
    2682:	4b19      	ldr	r3, [pc, #100]	; (26e8 <bus_fault.constprop.0+0x118>)
    2684:	617b      	str	r3, [r7, #20]
    2686:	4812      	ldr	r0, [pc, #72]	; (26d0 <bus_fault.constprop.0+0x100>)
    2688:	2302      	movs	r3, #2
    268a:	f107 0210 	add.w	r2, r7, #16
    268e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2692:	613b      	str	r3, [r7, #16]
    2694:	f004 f9b8 	bl	6a08 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2698:	4b0e      	ldr	r3, [pc, #56]	; (26d4 <bus_fault.constprop.0+0x104>)
    269a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    269c:	05db      	lsls	r3, r3, #23
    269e:	d50a      	bpl.n	26b6 <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    26a0:	4b12      	ldr	r3, [pc, #72]	; (26ec <bus_fault.constprop.0+0x11c>)
    26a2:	617b      	str	r3, [r7, #20]
    26a4:	480a      	ldr	r0, [pc, #40]	; (26d0 <bus_fault.constprop.0+0x100>)
    26a6:	2302      	movs	r3, #2
    26a8:	f107 0210 	add.w	r2, r7, #16
    26ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    26b0:	613b      	str	r3, [r7, #16]
    26b2:	f004 f9a9 	bl	6a08 <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    26b6:	4a07      	ldr	r2, [pc, #28]	; (26d4 <bus_fault.constprop.0+0x104>)
    26b8:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    26ba:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    26bc:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
    26c0:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    26c2:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    26c4:	7028      	strb	r0, [r5, #0]
}
    26c6:	46bd      	mov	sp, r7
    26c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    26cc:	000078e6 	.word	0x000078e6
    26d0:	00007480 	.word	0x00007480
    26d4:	e000ed00 	.word	0xe000ed00
    26d8:	000078fc 	.word	0x000078fc
    26dc:	0000790d 	.word	0x0000790d
    26e0:	00007920 	.word	0x00007920
    26e4:	00007939 	.word	0x00007939
    26e8:	0000794e 	.word	0x0000794e
    26ec:	00007969 	.word	0x00007969

000026f0 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    26f0:	b510      	push	{r4, lr}
    26f2:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    26f4:	4b33      	ldr	r3, [pc, #204]	; (27c4 <usage_fault.constprop.0+0xd4>)
    26f6:	4834      	ldr	r0, [pc, #208]	; (27c8 <usage_fault.constprop.0+0xd8>)
    26f8:	9305      	str	r3, [sp, #20]
    26fa:	2402      	movs	r4, #2
    26fc:	aa04      	add	r2, sp, #16
    26fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2702:	9404      	str	r4, [sp, #16]
    2704:	f004 f980 	bl	6a08 <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2708:	4b30      	ldr	r3, [pc, #192]	; (27cc <usage_fault.constprop.0+0xdc>)
    270a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    270c:	019b      	lsls	r3, r3, #6
    270e:	d508      	bpl.n	2722 <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
    2710:	4b2f      	ldr	r3, [pc, #188]	; (27d0 <usage_fault.constprop.0+0xe0>)
    2712:	482d      	ldr	r0, [pc, #180]	; (27c8 <usage_fault.constprop.0+0xd8>)
    2714:	aa04      	add	r2, sp, #16
    2716:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    271a:	e9cd 4304 	strd	r4, r3, [sp, #16]
    271e:	f004 f973 	bl	6a08 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2722:	4b2a      	ldr	r3, [pc, #168]	; (27cc <usage_fault.constprop.0+0xdc>)
    2724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2726:	01dc      	lsls	r4, r3, #7
    2728:	d509      	bpl.n	273e <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
    272a:	4b2a      	ldr	r3, [pc, #168]	; (27d4 <usage_fault.constprop.0+0xe4>)
    272c:	9305      	str	r3, [sp, #20]
    272e:	4826      	ldr	r0, [pc, #152]	; (27c8 <usage_fault.constprop.0+0xd8>)
    2730:	2302      	movs	r3, #2
    2732:	aa04      	add	r2, sp, #16
    2734:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2738:	9304      	str	r3, [sp, #16]
    273a:	f004 f965 	bl	6a08 <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    273e:	4b23      	ldr	r3, [pc, #140]	; (27cc <usage_fault.constprop.0+0xdc>)
    2740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2742:	0318      	lsls	r0, r3, #12
    2744:	d509      	bpl.n	275a <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
    2746:	4b24      	ldr	r3, [pc, #144]	; (27d8 <usage_fault.constprop.0+0xe8>)
    2748:	9305      	str	r3, [sp, #20]
    274a:	481f      	ldr	r0, [pc, #124]	; (27c8 <usage_fault.constprop.0+0xd8>)
    274c:	2302      	movs	r3, #2
    274e:	aa04      	add	r2, sp, #16
    2750:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2754:	9304      	str	r3, [sp, #16]
    2756:	f004 f957 	bl	6a08 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    275a:	4b1c      	ldr	r3, [pc, #112]	; (27cc <usage_fault.constprop.0+0xdc>)
    275c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    275e:	0359      	lsls	r1, r3, #13
    2760:	d509      	bpl.n	2776 <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2762:	4b1e      	ldr	r3, [pc, #120]	; (27dc <usage_fault.constprop.0+0xec>)
    2764:	9305      	str	r3, [sp, #20]
    2766:	4818      	ldr	r0, [pc, #96]	; (27c8 <usage_fault.constprop.0+0xd8>)
    2768:	2302      	movs	r3, #2
    276a:	aa04      	add	r2, sp, #16
    276c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2770:	9304      	str	r3, [sp, #16]
    2772:	f004 f949 	bl	6a08 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2776:	4b15      	ldr	r3, [pc, #84]	; (27cc <usage_fault.constprop.0+0xdc>)
    2778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    277a:	039a      	lsls	r2, r3, #14
    277c:	d509      	bpl.n	2792 <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    277e:	4b18      	ldr	r3, [pc, #96]	; (27e0 <usage_fault.constprop.0+0xf0>)
    2780:	9305      	str	r3, [sp, #20]
    2782:	4811      	ldr	r0, [pc, #68]	; (27c8 <usage_fault.constprop.0+0xd8>)
    2784:	2302      	movs	r3, #2
    2786:	aa04      	add	r2, sp, #16
    2788:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    278c:	9304      	str	r3, [sp, #16]
    278e:	f004 f93b 	bl	6a08 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2792:	4b0e      	ldr	r3, [pc, #56]	; (27cc <usage_fault.constprop.0+0xdc>)
    2794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2796:	03db      	lsls	r3, r3, #15
    2798:	d509      	bpl.n	27ae <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    279a:	4b12      	ldr	r3, [pc, #72]	; (27e4 <usage_fault.constprop.0+0xf4>)
    279c:	9305      	str	r3, [sp, #20]
    279e:	480a      	ldr	r0, [pc, #40]	; (27c8 <usage_fault.constprop.0+0xd8>)
    27a0:	2302      	movs	r3, #2
    27a2:	aa04      	add	r2, sp, #16
    27a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    27a8:	9304      	str	r3, [sp, #16]
    27aa:	f004 f92d 	bl	6a08 <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    27ae:	4a07      	ldr	r2, [pc, #28]	; (27cc <usage_fault.constprop.0+0xdc>)
    27b0:	6a93      	ldr	r3, [r2, #40]	; 0x28
    27b2:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    27b6:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    27ba:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    27bc:	6293      	str	r3, [r2, #40]	; 0x28
}
    27be:	b006      	add	sp, #24
    27c0:	bd10      	pop	{r4, pc}
    27c2:	bf00      	nop
    27c4:	00007981 	.word	0x00007981
    27c8:	00007480 	.word	0x00007480
    27cc:	e000ed00 	.word	0xe000ed00
    27d0:	00007999 	.word	0x00007999
    27d4:	000079ac 	.word	0x000079ac
    27d8:	000079c6 	.word	0x000079c6
    27dc:	000079e4 	.word	0x000079e4
    27e0:	00007a09 	.word	0x00007a09
    27e4:	00007a23 	.word	0x00007a23

000027e8 <mem_manage_fault>:
{
    27e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    27ec:	b086      	sub	sp, #24
    27ee:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** MPU FAULT *****");
    27f0:	4b43      	ldr	r3, [pc, #268]	; (2900 <mem_manage_fault+0x118>)
    27f2:	617b      	str	r3, [r7, #20]
{
    27f4:	4606      	mov	r6, r0
    27f6:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    27f8:	4842      	ldr	r0, [pc, #264]	; (2904 <mem_manage_fault+0x11c>)
{
    27fa:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    27fc:	2402      	movs	r4, #2
    27fe:	f107 0210 	add.w	r2, r7, #16
    2802:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2806:	613c      	str	r4, [r7, #16]
    2808:	f004 f8fe 	bl	6a08 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    280c:	4b3e      	ldr	r3, [pc, #248]	; (2908 <mem_manage_fault+0x120>)
    280e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2810:	06d8      	lsls	r0, r3, #27
    2812:	d509      	bpl.n	2828 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2814:	4b3d      	ldr	r3, [pc, #244]	; (290c <mem_manage_fault+0x124>)
    2816:	483b      	ldr	r0, [pc, #236]	; (2904 <mem_manage_fault+0x11c>)
    2818:	f107 0210 	add.w	r2, r7, #16
    281c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2820:	e9c7 4304 	strd	r4, r3, [r7, #16]
    2824:	f004 f8f0 	bl	6a08 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2828:	4b37      	ldr	r3, [pc, #220]	; (2908 <mem_manage_fault+0x120>)
    282a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    282c:	0719      	lsls	r1, r3, #28
    282e:	d50a      	bpl.n	2846 <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Unstacking error");
    2830:	4b37      	ldr	r3, [pc, #220]	; (2910 <mem_manage_fault+0x128>)
    2832:	617b      	str	r3, [r7, #20]
    2834:	4833      	ldr	r0, [pc, #204]	; (2904 <mem_manage_fault+0x11c>)
    2836:	2302      	movs	r3, #2
    2838:	f107 0210 	add.w	r2, r7, #16
    283c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2840:	613b      	str	r3, [r7, #16]
    2842:	f004 f8e1 	bl	6a08 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2846:	4c30      	ldr	r4, [pc, #192]	; (2908 <mem_manage_fault+0x120>)
    2848:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    284a:	079a      	lsls	r2, r3, #30
    284c:	d423      	bmi.n	2896 <mem_manage_fault+0xae>
	uint32_t mmfar = -EINVAL;
    284e:	f06f 0a15 	mvn.w	sl, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2852:	4b2d      	ldr	r3, [pc, #180]	; (2908 <mem_manage_fault+0x120>)
    2854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2856:	07d8      	lsls	r0, r3, #31
    2858:	d50a      	bpl.n	2870 <mem_manage_fault+0x88>
		PR_FAULT_INFO("  Instruction Access Violation");
    285a:	4b2e      	ldr	r3, [pc, #184]	; (2914 <mem_manage_fault+0x12c>)
    285c:	617b      	str	r3, [r7, #20]
    285e:	4829      	ldr	r0, [pc, #164]	; (2904 <mem_manage_fault+0x11c>)
    2860:	2302      	movs	r3, #2
    2862:	f107 0210 	add.w	r2, r7, #16
    2866:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    286a:	613b      	str	r3, [r7, #16]
    286c:	f004 f8cc 	bl	6a08 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2870:	4b25      	ldr	r3, [pc, #148]	; (2908 <mem_manage_fault+0x120>)
    2872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2874:	06d1      	lsls	r1, r2, #27
    2876:	d435      	bmi.n	28e4 <mem_manage_fault+0xfc>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2878:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    287a:	0792      	lsls	r2, r2, #30
    287c:	d432      	bmi.n	28e4 <mem_manage_fault+0xfc>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    287e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2880:	4a21      	ldr	r2, [pc, #132]	; (2908 <mem_manage_fault+0x120>)
    2882:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2884:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2888:	6293      	str	r3, [r2, #40]	; 0x28
}
    288a:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    288c:	2300      	movs	r3, #0
    288e:	702b      	strb	r3, [r5, #0]
}
    2890:	46bd      	mov	sp, r7
    2892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    2896:	4b20      	ldr	r3, [pc, #128]	; (2918 <mem_manage_fault+0x130>)
    2898:	617b      	str	r3, [r7, #20]
    289a:	481a      	ldr	r0, [pc, #104]	; (2904 <mem_manage_fault+0x11c>)
    289c:	2302      	movs	r3, #2
    289e:	f107 0210 	add.w	r2, r7, #16
    28a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    28a6:	613b      	str	r3, [r7, #16]
    28a8:	f004 f8ae 	bl	6a08 <z_log_msg2_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    28ac:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    28b0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    28b2:	061b      	lsls	r3, r3, #24
		PR_FAULT_INFO("  Data Access Violation");
    28b4:	46e9      	mov	r9, sp
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    28b6:	d5ca      	bpl.n	284e <mem_manage_fault+0x66>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    28b8:	b088      	sub	sp, #32
    28ba:	4b18      	ldr	r3, [pc, #96]	; (291c <mem_manage_fault+0x134>)
    28bc:	4811      	ldr	r0, [pc, #68]	; (2904 <mem_manage_fault+0x11c>)
    28be:	466a      	mov	r2, sp
    28c0:	e9c2 3a05 	strd	r3, sl, [r2, #20]
    28c4:	2303      	movs	r3, #3
    28c6:	f842 3f10 	str.w	r3, [r2, #16]!
    28ca:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    28ce:	f004 f89b 	bl	6a08 <z_log_msg2_static_create.constprop.0>
    28d2:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
    28d4:	f1b8 0f00 	cmp.w	r8, #0
    28d8:	d0bb      	beq.n	2852 <mem_manage_fault+0x6a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    28da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    28dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    28e0:	62a3      	str	r3, [r4, #40]	; 0x28
    28e2:	e7b6      	b.n	2852 <mem_manage_fault+0x6a>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    28e4:	685b      	ldr	r3, [r3, #4]
    28e6:	051b      	lsls	r3, r3, #20
    28e8:	d5c9      	bpl.n	287e <mem_manage_fault+0x96>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    28ea:	4631      	mov	r1, r6
    28ec:	4650      	mov	r0, sl
    28ee:	f7ff fe15 	bl	251c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    28f2:	2800      	cmp	r0, #0
    28f4:	d0c3      	beq.n	287e <mem_manage_fault+0x96>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    28f6:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    28fa:	2002      	movs	r0, #2
    28fc:	e7c0      	b.n	2880 <mem_manage_fault+0x98>
    28fe:	bf00      	nop
    2900:	00007a4e 	.word	0x00007a4e
    2904:	00007480 	.word	0x00007480
    2908:	e000ed00 	.word	0xe000ed00
    290c:	00007a64 	.word	0x00007a64
    2910:	0000790d 	.word	0x0000790d
    2914:	00007ac5 	.word	0x00007ac5
    2918:	00007a97 	.word	0x00007a97
    291c:	00007aaf 	.word	0x00007aaf

00002920 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2924:	4b76      	ldr	r3, [pc, #472]	; (2b00 <z_arm_fault+0x1e0>)
{
    2926:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2928:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    292c:	af00      	add	r7, sp, #0
    292e:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2930:	f3c8 0408 	ubfx	r4, r8, #0, #9
    2934:	2600      	movs	r6, #0
    2936:	f386 8811 	msr	BASEPRI, r6
    293a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    293e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2942:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2946:	d10e      	bne.n	2966 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2948:	f002 030c 	and.w	r3, r2, #12
    294c:	2b08      	cmp	r3, #8
    294e:	d10c      	bne.n	296a <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2950:	4b6c      	ldr	r3, [pc, #432]	; (2b04 <z_arm_fault+0x1e4>)
    2952:	61fb      	str	r3, [r7, #28]
    2954:	486c      	ldr	r0, [pc, #432]	; (2b08 <z_arm_fault+0x1e8>)
    2956:	2302      	movs	r3, #2
    2958:	f107 0218 	add.w	r2, r7, #24
    295c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2960:	61bb      	str	r3, [r7, #24]
    2962:	f004 f851 	bl	6a08 <z_log_msg2_static_create.constprop.0>
		return NULL;
    2966:	4635      	mov	r5, r6
    2968:	e003      	b.n	2972 <z_arm_fault+0x52>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    296a:	0712      	lsls	r2, r2, #28
    296c:	d401      	bmi.n	2972 <z_arm_fault+0x52>
			ptr_esf = (z_arch_esf_t *)msp;
    296e:	4605      	mov	r5, r0
			*nested_exc = true;
    2970:	2601      	movs	r6, #1
	*recoverable = false;
    2972:	2300      	movs	r3, #0
    2974:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    2976:	1ee3      	subs	r3, r4, #3
    2978:	2b09      	cmp	r3, #9
    297a:	f200 80a1 	bhi.w	2ac0 <z_arm_fault+0x1a0>
    297e:	e8df f003 	tbb	[pc, r3]
    2982:	9405      	.short	0x9405
    2984:	9f9f9197 	.word	0x9f9f9197
    2988:	9a9f9f9f 	.word	0x9a9f9f9f
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    298c:	f8df 8170 	ldr.w	r8, [pc, #368]	; 2b00 <z_arm_fault+0x1e0>
	PR_FAULT_INFO("***** HARD FAULT *****");
    2990:	4b5e      	ldr	r3, [pc, #376]	; (2b0c <z_arm_fault+0x1ec>)
    2992:	485d      	ldr	r0, [pc, #372]	; (2b08 <z_arm_fault+0x1e8>)
    2994:	61fb      	str	r3, [r7, #28]
    2996:	f04f 0a02 	mov.w	sl, #2
    299a:	f107 0218 	add.w	r2, r7, #24
    299e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    29a2:	f8c7 a018 	str.w	sl, [r7, #24]
    29a6:	f004 f82f 	bl	6a08 <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    29aa:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    29ae:	f04f 0b00 	mov.w	fp, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    29b2:	ea14 040a 	ands.w	r4, r4, sl
	PR_FAULT_INFO("***** HARD FAULT *****");
    29b6:	46e9      	mov	r9, sp
	*recoverable = false;
    29b8:	f887 b007 	strb.w	fp, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    29bc:	d00b      	beq.n	29d6 <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
    29be:	4b54      	ldr	r3, [pc, #336]	; (2b10 <z_arm_fault+0x1f0>)
    29c0:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
    29c4:	4850      	ldr	r0, [pc, #320]	; (2b08 <z_arm_fault+0x1e8>)
    29c6:	f107 0218 	add.w	r2, r7, #24
    29ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    29ce:	f004 f81b 	bl	6a08 <z_log_msg2_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    29d2:	2400      	movs	r4, #0
}
    29d4:	e00d      	b.n	29f2 <z_arm_fault+0xd2>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    29d6:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    29da:	2b00      	cmp	r3, #0
    29dc:	da25      	bge.n	2a2a <z_arm_fault+0x10a>
		PR_EXC("  Debug event");
    29de:	4b4d      	ldr	r3, [pc, #308]	; (2b14 <z_arm_fault+0x1f4>)
    29e0:	4849      	ldr	r0, [pc, #292]	; (2b08 <z_arm_fault+0x1e8>)
    29e2:	f107 0218 	add.w	r2, r7, #24
    29e6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    29ea:	e9c7 a306 	strd	sl, r3, [r7, #24]
    29ee:	f004 f80b 	bl	6a08 <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    29f2:	79fb      	ldrb	r3, [r7, #7]
    29f4:	b9ab      	cbnz	r3, 2a22 <z_arm_fault+0x102>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    29f6:	2220      	movs	r2, #32
    29f8:	4629      	mov	r1, r5
    29fa:	f107 0008 	add.w	r0, r7, #8
    29fe:	f004 f820 	bl	6a42 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2a04:	2e00      	cmp	r6, #0
    2a06:	d076      	beq.n	2af6 <z_arm_fault+0x1d6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2a08:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2a0c:	b922      	cbnz	r2, 2a18 <z_arm_fault+0xf8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2a0e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2a12:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2a16:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2a18:	f107 0108 	add.w	r1, r7, #8
    2a1c:	4620      	mov	r0, r4
    2a1e:	f7ff fc35 	bl	228c <z_arm_fatal_error>
}
    2a22:	372c      	adds	r7, #44	; 0x2c
    2a24:	46bd      	mov	sp, r7
    2a26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2a2a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    2a2e:	005b      	lsls	r3, r3, #1
    2a30:	d5df      	bpl.n	29f2 <z_arm_fault+0xd2>
		PR_EXC("  Fault escalation (see below)");
    2a32:	4b39      	ldr	r3, [pc, #228]	; (2b18 <z_arm_fault+0x1f8>)
    2a34:	4834      	ldr	r0, [pc, #208]	; (2b08 <z_arm_fault+0x1e8>)
    2a36:	f107 0218 	add.w	r2, r7, #24
    2a3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2a3e:	e9c7 a306 	strd	sl, r3, [r7, #24]
    2a42:	f003 ffe1 	bl	6a08 <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    2a46:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2a48:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    2a4c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2a50:	429a      	cmp	r2, r3
    2a52:	d009      	beq.n	2a68 <z_arm_fault+0x148>
		} else if (SCB_MMFSR != 0) {
    2a54:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    2a58:	b1bb      	cbz	r3, 2a8a <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    2a5a:	1dfa      	adds	r2, r7, #7
    2a5c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2a5e:	4628      	mov	r0, r5
    2a60:	f7ff fec2 	bl	27e8 <mem_manage_fault>
    2a64:	4604      	mov	r4, r0
		break;
    2a66:	e7c4      	b.n	29f2 <z_arm_fault+0xd2>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    2a68:	b088      	sub	sp, #32
    2a6a:	682b      	ldr	r3, [r5, #0]
    2a6c:	492b      	ldr	r1, [pc, #172]	; (2b1c <z_arm_fault+0x1fc>)
    2a6e:	4826      	ldr	r0, [pc, #152]	; (2b08 <z_arm_fault+0x1e8>)
    2a70:	466a      	mov	r2, sp
    2a72:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2a76:	2303      	movs	r3, #3
    2a78:	f842 3f10 	str.w	r3, [r2, #16]!
    2a7c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2a80:	f003 ffc2 	bl	6a08 <z_log_msg2_static_create.constprop.0>
    2a84:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    2a86:	682c      	ldr	r4, [r5, #0]
    2a88:	e7b3      	b.n	29f2 <z_arm_fault+0xd2>
		} else if (SCB_BFSR != 0) {
    2a8a:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    2a8e:	b123      	cbz	r3, 2a9a <z_arm_fault+0x17a>
			reason = bus_fault(esf, 1, recoverable);
    2a90:	1df9      	adds	r1, r7, #7
    2a92:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2a94:	f7ff fd9c 	bl	25d0 <bus_fault.constprop.0>
    2a98:	e7e4      	b.n	2a64 <z_arm_fault+0x144>
		} else if (SCB_UFSR != 0) {
    2a9a:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    2a9e:	b29b      	uxth	r3, r3
    2aa0:	2b00      	cmp	r3, #0
    2aa2:	d0a6      	beq.n	29f2 <z_arm_fault+0xd2>
		reason = usage_fault(esf);
    2aa4:	f7ff fe24 	bl	26f0 <usage_fault.constprop.0>
    2aa8:	e7dc      	b.n	2a64 <z_arm_fault+0x144>
		reason = mem_manage_fault(esf, 0, recoverable);
    2aaa:	1dfa      	adds	r2, r7, #7
    2aac:	2100      	movs	r1, #0
    2aae:	e7d6      	b.n	2a5e <z_arm_fault+0x13e>
		reason = bus_fault(esf, 0, recoverable);
    2ab0:	1df9      	adds	r1, r7, #7
    2ab2:	2000      	movs	r0, #0
    2ab4:	e7ee      	b.n	2a94 <z_arm_fault+0x174>
	PR_FAULT_INFO(
    2ab6:	4b1a      	ldr	r3, [pc, #104]	; (2b20 <z_arm_fault+0x200>)
    2ab8:	61fb      	str	r3, [r7, #28]
    2aba:	2302      	movs	r3, #2
    2abc:	61bb      	str	r3, [r7, #24]
    2abe:	e781      	b.n	29c4 <z_arm_fault+0xa4>
	PR_FAULT_INFO("***** %s %d) *****",
    2ac0:	4a18      	ldr	r2, [pc, #96]	; (2b24 <z_arm_fault+0x204>)
    2ac2:	4b19      	ldr	r3, [pc, #100]	; (2b28 <z_arm_fault+0x208>)
    2ac4:	4919      	ldr	r1, [pc, #100]	; (2b2c <z_arm_fault+0x20c>)
    2ac6:	4810      	ldr	r0, [pc, #64]	; (2b08 <z_arm_fault+0x1e8>)
    2ac8:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    2acc:	46e8      	mov	r8, sp
    2ace:	b08a      	sub	sp, #40	; 0x28
    2ad0:	bf18      	it	ne
    2ad2:	4613      	movne	r3, r2
    2ad4:	466a      	mov	r2, sp
    2ad6:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2ada:	2302      	movs	r3, #2
    2adc:	f882 3020 	strb.w	r3, [r2, #32]
    2ae0:	3c10      	subs	r4, #16
    2ae2:	4b13      	ldr	r3, [pc, #76]	; (2b30 <z_arm_fault+0x210>)
    2ae4:	61d4      	str	r4, [r2, #28]
    2ae6:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    2aea:	f842 3f10 	str.w	r3, [r2, #16]!
    2aee:	f003 ff8b 	bl	6a08 <z_log_msg2_static_create.constprop.0>
    2af2:	46c5      	mov	sp, r8
    2af4:	e76d      	b.n	29d2 <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2af6:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2afa:	f023 0301 	bic.w	r3, r3, #1
    2afe:	e78a      	b.n	2a16 <z_arm_fault+0xf6>
    2b00:	e000ed00 	.word	0xe000ed00
    2b04:	00007b12 	.word	0x00007b12
    2b08:	00007480 	.word	0x00007480
    2b0c:	00007b3d 	.word	0x00007b3d
    2b10:	00007b54 	.word	0x00007b54
    2b14:	00007b75 	.word	0x00007b75
    2b18:	00007b83 	.word	0x00007b83
    2b1c:	00007ba2 	.word	0x00007ba2
    2b20:	00007bbe 	.word	0x00007bbe
    2b24:	00007af9 	.word	0x00007af9
    2b28:	00007ae4 	.word	0x00007ae4
    2b2c:	00007be2 	.word	0x00007be2
    2b30:	01000004 	.word	0x01000004

00002b34 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2b34:	4a02      	ldr	r2, [pc, #8]	; (2b40 <z_arm_fault_init+0xc>)
    2b36:	6953      	ldr	r3, [r2, #20]
    2b38:	f043 0310 	orr.w	r3, r3, #16
    2b3c:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    2b3e:	4770      	bx	lr
    2b40:	e000ed00 	.word	0xe000ed00

00002b44 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2b44:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2b48:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2b4c:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2b4e:	4672      	mov	r2, lr
	bl z_arm_fault
    2b50:	f7ff fee6 	bl	2920 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2b54:	bd01      	pop	{r0, pc}
    2b56:	bf00      	nop

00002b58 <z_arm_interrupt_init>:
    2b58:	4804      	ldr	r0, [pc, #16]	; (2b6c <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2b5a:	2300      	movs	r3, #0
    2b5c:	2120      	movs	r1, #32
    2b5e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2b60:	3301      	adds	r3, #1
    2b62:	2b28      	cmp	r3, #40	; 0x28
    2b64:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2b68:	d1f9      	bne.n	2b5e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2b6a:	4770      	bx	lr
    2b6c:	e000e100 	.word	0xe000e100

00002b70 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2b70:	2000      	movs	r0, #0
    msr CONTROL, r0
    2b72:	f380 8814 	msr	CONTROL, r0
    isb
    2b76:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2b7a:	f004 fb73 	bl	7264 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2b7e:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2b80:	490d      	ldr	r1, [pc, #52]	; (2bb8 <__start+0x48>)
    str r0, [r1]
    2b82:	6008      	str	r0, [r1, #0]
    dsb
    2b84:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2b88:	480c      	ldr	r0, [pc, #48]	; (2bbc <__start+0x4c>)
    msr msp, r0
    2b8a:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2b8e:	f000 f82b 	bl	2be8 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2b92:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2b94:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2b98:	4809      	ldr	r0, [pc, #36]	; (2bc0 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2b9a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    2b9e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2ba0:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2ba4:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2ba8:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2baa:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2bac:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2bb0:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2bb4:	f7ff fc2c 	bl	2410 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2bb8:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2bbc:	20001900 	.word	0x20001900
    ldr r0, =z_interrupt_stacks
    2bc0:	20001a40 	.word	0x20001a40

00002bc4 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2bc4:	4907      	ldr	r1, [pc, #28]	; (2be4 <z_arm_clear_arm_mpu_config+0x20>)
    2bc6:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    2bca:	2300      	movs	r3, #0
	int num_regions =
    2bcc:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2bd0:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2bd2:	4293      	cmp	r3, r2
    2bd4:	d100      	bne.n	2bd8 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    2bd6:	4770      	bx	lr
  MPU->RNR = rnr;
    2bd8:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    2bdc:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    2be0:	3301      	adds	r3, #1
    2be2:	e7f6      	b.n	2bd2 <z_arm_clear_arm_mpu_config+0xe>
    2be4:	e000ed00 	.word	0xe000ed00

00002be8 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2be8:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2bea:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2bec:	2300      	movs	r3, #0
    2bee:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2bf2:	f7ff ffe7 	bl	2bc4 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2bf6:	4b14      	ldr	r3, [pc, #80]	; (2c48 <z_arm_init_arch_hw_at_boot+0x60>)
    2bf8:	f04f 32ff 	mov.w	r2, #4294967295
    2bfc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2c00:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2c04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2c08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2c0c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2c10:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2c14:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2c18:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2c1c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2c20:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2c24:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    2c28:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2c2c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2c30:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2c34:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2c38:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2c3c:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2c3e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2c42:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2c46:	bd08      	pop	{r3, pc}
    2c48:	e000e100 	.word	0xe000e100

00002c4c <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2c4c:	4b08      	ldr	r3, [pc, #32]	; (2c70 <z_impl_k_thread_abort+0x24>)
    2c4e:	689b      	ldr	r3, [r3, #8]
    2c50:	4283      	cmp	r3, r0
    2c52:	d10b      	bne.n	2c6c <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2c54:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2c58:	b143      	cbz	r3, 2c6c <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2c5a:	4b06      	ldr	r3, [pc, #24]	; (2c74 <z_impl_k_thread_abort+0x28>)
    2c5c:	685a      	ldr	r2, [r3, #4]
    2c5e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    2c62:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    2c64:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2c66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2c6a:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    2c6c:	f002 bfd0 	b.w	5c10 <z_thread_abort>
    2c70:	20000ac4 	.word	0x20000ac4
    2c74:	e000ed00 	.word	0xe000ed00

00002c78 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2c78:	4b02      	ldr	r3, [pc, #8]	; (2c84 <z_arm_configure_static_mpu_regions+0xc>)
    2c7a:	4a03      	ldr	r2, [pc, #12]	; (2c88 <z_arm_configure_static_mpu_regions+0x10>)
    2c7c:	4803      	ldr	r0, [pc, #12]	; (2c8c <z_arm_configure_static_mpu_regions+0x14>)
    2c7e:	2101      	movs	r1, #1
    2c80:	f000 b890 	b.w	2da4 <arm_core_mpu_configure_static_mpu_regions>
    2c84:	20008000 	.word	0x20008000
    2c88:	20000000 	.word	0x20000000
    2c8c:	00007570 	.word	0x00007570

00002c90 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2c90:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2c92:	4b05      	ldr	r3, [pc, #20]	; (2ca8 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2c94:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    2c96:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2c98:	4a04      	ldr	r2, [pc, #16]	; (2cac <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2c9a:	2120      	movs	r1, #32
    2c9c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2ca0:	4618      	mov	r0, r3
    2ca2:	2101      	movs	r1, #1
    2ca4:	f000 b888 	b.w	2db8 <arm_core_mpu_configure_dynamic_mpu_regions>
    2ca8:	20000830 	.word	0x20000830
    2cac:	150b0000 	.word	0x150b0000

00002cb0 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2cb2:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 2d68 <mpu_configure_regions+0xb8>
    2cb6:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2cb8:	2500      	movs	r5, #0
    2cba:	428d      	cmp	r5, r1
    2cbc:	da1a      	bge.n	2cf4 <mpu_configure_regions+0x44>
		if (regions[i].size == 0U) {
    2cbe:	6844      	ldr	r4, [r0, #4]
    2cc0:	2c00      	cmp	r4, #0
    2cc2:	d04d      	beq.n	2d60 <mpu_configure_regions+0xb0>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    2cc4:	b1fb      	cbz	r3, 2d06 <mpu_configure_regions+0x56>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2cc6:	f104 3eff 	add.w	lr, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2cca:	ea14 0f0e 	tst.w	r4, lr
    2cce:	d014      	beq.n	2cfa <mpu_configure_regions+0x4a>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    2cd0:	4b26      	ldr	r3, [pc, #152]	; (2d6c <mpu_configure_regions+0xbc>)
    2cd2:	466c      	mov	r4, sp
    2cd4:	b088      	sub	sp, #32
    2cd6:	466a      	mov	r2, sp
    2cd8:	e9c2 3505 	strd	r3, r5, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2cdc:	2303      	movs	r3, #3
    2cde:	f842 3f10 	str.w	r3, [r2, #16]!
    2ce2:	4823      	ldr	r0, [pc, #140]	; (2d70 <mpu_configure_regions+0xc0>)
    2ce4:	2300      	movs	r3, #0
    2ce6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2cea:	f003 fe39 	bl	6960 <z_impl_z_log_msg2_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2cee:	f06f 0215 	mvn.w	r2, #21
    2cf2:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2cf4:	4610      	mov	r0, r2
    2cf6:	46bd      	mov	sp, r7
    2cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    2cfa:	2c1f      	cmp	r4, #31
    2cfc:	d9e8      	bls.n	2cd0 <mpu_configure_regions+0x20>
		((part->start & (part->size - 1U)) == 0U);
    2cfe:	6806      	ldr	r6, [r0, #0]
		&&
    2d00:	ea1e 0f06 	tst.w	lr, r6
    2d04:	d1e4      	bne.n	2cd0 <mpu_configure_regions+0x20>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2d06:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2d08:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2d0a:	f8d0 e008 	ldr.w	lr, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2d0e:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    2d10:	d914      	bls.n	2d3c <mpu_configure_regions+0x8c>
	if (size > (1UL << 31)) {
    2d12:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2d16:	d813      	bhi.n	2d40 <mpu_configure_regions+0x90>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2d18:	3c01      	subs	r4, #1
    2d1a:	fab4 f484 	clz	r4, r4
    2d1e:	f1c4 041f 	rsb	r4, r4, #31
    2d22:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2d24:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2d26:	ea4e 0404 	orr.w	r4, lr, r4
    2d2a:	d90b      	bls.n	2d44 <mpu_configure_regions+0x94>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2d2c:	4911      	ldr	r1, [pc, #68]	; (2d74 <mpu_configure_regions+0xc4>)
    2d2e:	466c      	mov	r4, sp
    2d30:	b088      	sub	sp, #32
    2d32:	466b      	mov	r3, sp
    2d34:	e9c3 1205 	strd	r1, r2, [r3, #20]
    2d38:	461a      	mov	r2, r3
    2d3a:	e7cf      	b.n	2cdc <mpu_configure_regions+0x2c>
		return REGION_32B;
    2d3c:	2408      	movs	r4, #8
    2d3e:	e7f1      	b.n	2d24 <mpu_configure_regions+0x74>
		return REGION_4G;
    2d40:	243e      	movs	r4, #62	; 0x3e
    2d42:	e7ef      	b.n	2d24 <mpu_configure_regions+0x74>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2d44:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
    2d48:	4316      	orrs	r6, r2
    2d4a:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2d4e:	f044 0401 	orr.w	r4, r4, #1
    2d52:	f8cc 2098 	str.w	r2, [ip, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2d56:	f8cc 609c 	str.w	r6, [ip, #156]	; 0x9c
		reg_index++;
    2d5a:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2d5c:	f8cc 40a0 	str.w	r4, [ip, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    2d60:	3501      	adds	r5, #1
    2d62:	300c      	adds	r0, #12
    2d64:	e7a9      	b.n	2cba <mpu_configure_regions+0xa>
    2d66:	bf00      	nop
    2d68:	e000ed00 	.word	0xe000ed00
    2d6c:	00007bf9 	.word	0x00007bf9
    2d70:	00007478 	.word	0x00007478
    2d74:	00007c1c 	.word	0x00007c1c

00002d78 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2d78:	4b04      	ldr	r3, [pc, #16]	; (2d8c <arm_core_mpu_enable+0x14>)
    2d7a:	2205      	movs	r2, #5
    2d7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2d80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d84:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2d88:	4770      	bx	lr
    2d8a:	bf00      	nop
    2d8c:	e000ed00 	.word	0xe000ed00

00002d90 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2d90:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2d94:	4b02      	ldr	r3, [pc, #8]	; (2da0 <arm_core_mpu_disable+0x10>)
    2d96:	2200      	movs	r2, #0
    2d98:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2d9c:	4770      	bx	lr
    2d9e:	bf00      	nop
    2da0:	e000ed00 	.word	0xe000ed00

00002da4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2da4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2da6:	4c03      	ldr	r4, [pc, #12]	; (2db4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2da8:	2301      	movs	r3, #1
    2daa:	7822      	ldrb	r2, [r4, #0]
    2dac:	f7ff ff80 	bl	2cb0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2db0:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    2db2:	bd10      	pop	{r4, pc}
    2db4:	20000b5f 	.word	0x20000b5f

00002db8 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2db8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2dba:	4a09      	ldr	r2, [pc, #36]	; (2de0 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    2dbc:	2300      	movs	r3, #0
    2dbe:	7812      	ldrb	r2, [r2, #0]
    2dc0:	f7ff ff76 	bl	2cb0 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2dc4:	f110 0f16 	cmn.w	r0, #22
    2dc8:	d003      	beq.n	2dd2 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    2dca:	4b06      	ldr	r3, [pc, #24]	; (2de4 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    2dcc:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2dce:	2807      	cmp	r0, #7
    2dd0:	dd00      	ble.n	2dd4 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2dd2:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    2dd4:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    2dd8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    2ddc:	3001      	adds	r0, #1
    2dde:	e7f6      	b.n	2dce <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    2de0:	20000b5f 	.word	0x20000b5f
    2de4:	e000ed00 	.word	0xe000ed00

00002de8 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2de8:	4914      	ldr	r1, [pc, #80]	; (2e3c <z_arm_mpu_init+0x54>)
    2dea:	6808      	ldr	r0, [r1, #0]
    2dec:	2808      	cmp	r0, #8
{
    2dee:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2df0:	d821      	bhi.n	2e36 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    2df2:	f7ff ffcd 	bl	2d90 <arm_core_mpu_disable>
    2df6:	4c12      	ldr	r4, [pc, #72]	; (2e40 <z_arm_mpu_init+0x58>)
    2df8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2dfa:	2200      	movs	r2, #0
    2dfc:	4290      	cmp	r0, r2
    2dfe:	f101 010c 	add.w	r1, r1, #12
    2e02:	d105      	bne.n	2e10 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    2e04:	4b0f      	ldr	r3, [pc, #60]	; (2e44 <z_arm_mpu_init+0x5c>)
    2e06:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    2e08:	f7ff ffb6 	bl	2d78 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    2e0c:	2000      	movs	r0, #0
}
    2e0e:	bd10      	pop	{r4, pc}
    2e10:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2e14:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    2e18:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2e1c:	4313      	orrs	r3, r2
    2e1e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2e22:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2e26:	f851 3c04 	ldr.w	r3, [r1, #-4]
    2e2a:	f043 0301 	orr.w	r3, r3, #1
    2e2e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2e32:	3201      	adds	r2, #1
    2e34:	e7e2      	b.n	2dfc <z_arm_mpu_init+0x14>
		return -1;
    2e36:	f04f 30ff 	mov.w	r0, #4294967295
    2e3a:	e7e8      	b.n	2e0e <z_arm_mpu_init+0x26>
    2e3c:	0000757c 	.word	0x0000757c
    2e40:	e000ed00 	.word	0xe000ed00
    2e44:	20000b5f 	.word	0x20000b5f

00002e48 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    2e48:	4b01      	ldr	r3, [pc, #4]	; (2e50 <__stdout_hook_install+0x8>)
    2e4a:	6018      	str	r0, [r3, #0]
}
    2e4c:	4770      	bx	lr
    2e4e:	bf00      	nop
    2e50:	2000000c 	.word	0x2000000c

00002e54 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    2e54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e58:	b2c0      	uxtb	r0, r0
    2e5a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    2e5e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2e62:	4905      	ldr	r1, [pc, #20]	; (2e78 <sys_arch_reboot+0x24>)
    2e64:	4b05      	ldr	r3, [pc, #20]	; (2e7c <sys_arch_reboot+0x28>)
    2e66:	68ca      	ldr	r2, [r1, #12]
    2e68:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2e6c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2e6e:	60cb      	str	r3, [r1, #12]
    2e70:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    2e74:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2e76:	e7fd      	b.n	2e74 <sys_arch_reboot+0x20>
    2e78:	e000ed00 	.word	0xe000ed00
    2e7c:	05fa0004 	.word	0x05fa0004

00002e80 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    2e80:	b120      	cbz	r0, 2e8c <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    2e82:	4b03      	ldr	r3, [pc, #12]	; (2e90 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    2e84:	0180      	lsls	r0, r0, #6
    2e86:	f043 0301 	orr.w	r3, r3, #1
    2e8a:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    2e8c:	4770      	bx	lr
    2e8e:	bf00      	nop
    2e90:	000074f0 	.word	0x000074f0

00002e94 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    2e94:	4b08      	ldr	r3, [pc, #32]	; (2eb8 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2e96:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2e98:	1ac3      	subs	r3, r0, r3
{
    2e9a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2e9c:	4907      	ldr	r1, [pc, #28]	; (2ebc <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    2e9e:	109b      	asrs	r3, r3, #2
{
    2ea0:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2ea2:	4359      	muls	r1, r3
    2ea4:	4806      	ldr	r0, [pc, #24]	; (2ec0 <onoff_stop+0x2c>)
    2ea6:	2240      	movs	r2, #64	; 0x40
    2ea8:	f003 fe1e 	bl	6ae8 <stop>
	notify(mgr, res);
    2eac:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    2eae:	4601      	mov	r1, r0
	notify(mgr, res);
    2eb0:	4620      	mov	r0, r4
}
    2eb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    2eb6:	4718      	bx	r3
    2eb8:	2000084c 	.word	0x2000084c
    2ebc:	b6db6db7 	.word	0xb6db6db7
    2ec0:	000072c8 	.word	0x000072c8

00002ec4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    2ec4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    2ec6:	4c0c      	ldr	r4, [pc, #48]	; (2ef8 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2ec8:	4a0c      	ldr	r2, [pc, #48]	; (2efc <onoff_start+0x38>)
    2eca:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    2ecc:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2ece:	9300      	str	r3, [sp, #0]
{
    2ed0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2ed2:	460b      	mov	r3, r1
    2ed4:	490a      	ldr	r1, [pc, #40]	; (2f00 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    2ed6:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2ed8:	4361      	muls	r1, r4
{
    2eda:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    2edc:	4809      	ldr	r0, [pc, #36]	; (2f04 <onoff_start+0x40>)
    2ede:	f003 fe30 	bl	6b42 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    2ee2:	1e01      	subs	r1, r0, #0
    2ee4:	da05      	bge.n	2ef2 <onoff_start+0x2e>
		notify(mgr, err);
    2ee6:	4630      	mov	r0, r6
    2ee8:	462b      	mov	r3, r5
	}
}
    2eea:	b002      	add	sp, #8
    2eec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    2ef0:	4718      	bx	r3
}
    2ef2:	b002      	add	sp, #8
    2ef4:	bd70      	pop	{r4, r5, r6, pc}
    2ef6:	bf00      	nop
    2ef8:	2000084c 	.word	0x2000084c
    2efc:	00006bb1 	.word	0x00006bb1
    2f00:	b6db6db7 	.word	0xb6db6db7
    2f04:	000072c8 	.word	0x000072c8

00002f08 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2f08:	2200      	movs	r2, #0
{
    2f0a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2f0c:	2101      	movs	r1, #1
{
    2f0e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    2f10:	4610      	mov	r0, r2
    2f12:	f7ff fa53 	bl	23bc <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    2f16:	4811      	ldr	r0, [pc, #68]	; (2f5c <clk_init+0x54>)
    2f18:	f001 fa7a 	bl	4410 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    2f1c:	4b10      	ldr	r3, [pc, #64]	; (2f60 <clk_init+0x58>)
    2f1e:	4298      	cmp	r0, r3
    2f20:	d118      	bne.n	2f54 <clk_init+0x4c>
	hfclkaudio_init();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_DRIVER_CALIBRATION)) {
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
    2f22:	6920      	ldr	r0, [r4, #16]
    2f24:	f000 f9dc 	bl	32e0 <z_nrf_clock_calibration_init>
	}

	nrfx_clock_enable();
    2f28:	f003 ff29 	bl	6d7e <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    2f2c:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    2f2e:	490d      	ldr	r1, [pc, #52]	; (2f64 <clk_init+0x5c>)
    2f30:	4630      	mov	r0, r6
    2f32:	f003 f9ad 	bl	6290 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    2f36:	2800      	cmp	r0, #0
    2f38:	db0b      	blt.n	2f52 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    2f3a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2f3c:	4909      	ldr	r1, [pc, #36]	; (2f64 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2f3e:	2501      	movs	r5, #1
    2f40:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    2f42:	f104 001c 	add.w	r0, r4, #28
    2f46:	f003 f9a3 	bl	6290 <onoff_manager_init>
		if (err < 0) {
    2f4a:	2800      	cmp	r0, #0
    2f4c:	db01      	blt.n	2f52 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    2f4e:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    2f50:	2000      	movs	r0, #0
}
    2f52:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    2f54:	f06f 0004 	mvn.w	r0, #4
    2f58:	e7fb      	b.n	2f52 <clk_init+0x4a>
    2f5a:	bf00      	nop
    2f5c:	00002f9d 	.word	0x00002f9d
    2f60:	0bad0000 	.word	0x0bad0000
    2f64:	000075cc 	.word	0x000075cc

00002f68 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    2f68:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    2f6a:	230c      	movs	r3, #12
    2f6c:	4809      	ldr	r0, [pc, #36]	; (2f94 <clkstarted_handle.constprop.0+0x2c>)
    2f6e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    2f70:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    2f72:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    2f74:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    2f78:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    2f7a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    2f7c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    2f7e:	4418      	add	r0, r3
    2f80:	f003 fd9f 	bl	6ac2 <set_on_state>
	if (callback) {
    2f84:	b12d      	cbz	r5, 2f92 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    2f86:	4632      	mov	r2, r6
    2f88:	462b      	mov	r3, r5
    2f8a:	4803      	ldr	r0, [pc, #12]	; (2f98 <clkstarted_handle.constprop.0+0x30>)
}
    2f8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    2f90:	4718      	bx	r3
}
    2f92:	bd70      	pop	{r4, r5, r6, pc}
    2f94:	2000084c 	.word	0x2000084c
    2f98:	000072c8 	.word	0x000072c8

00002f9c <clock_event_handler>:
	switch (event) {
    2f9c:	2801      	cmp	r0, #1
{
    2f9e:	b510      	push	{r4, lr}
    2fa0:	4604      	mov	r4, r0
	switch (event) {
    2fa2:	d00a      	beq.n	2fba <clock_event_handler+0x1e>
    2fa4:	2803      	cmp	r0, #3
    2fa6:	d00c      	beq.n	2fc2 <clock_event_handler+0x26>
    2fa8:	b978      	cbnz	r0, 2fca <clock_event_handler+0x2e>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    2faa:	4b08      	ldr	r3, [pc, #32]	; (2fcc <clock_event_handler+0x30>)
    2fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    2fae:	075b      	lsls	r3, r3, #29
    2fb0:	d10b      	bne.n	2fca <clock_event_handler+0x2e>
}
    2fb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2fb6:	f7ff bfd7 	b.w	2f68 <clkstarted_handle.constprop.0>
			z_nrf_clock_calibration_lfclk_started();
    2fba:	f000 f99f 	bl	32fc <z_nrf_clock_calibration_lfclk_started>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    2fbe:	4620      	mov	r0, r4
    2fc0:	e7f7      	b.n	2fb2 <clock_event_handler+0x16>
}
    2fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			z_nrf_clock_calibration_done_handler();
    2fc6:	f000 b9a7 	b.w	3318 <z_nrf_clock_calibration_done_handler>
}
    2fca:	bd10      	pop	{r4, pc}
    2fcc:	2000084c 	.word	0x2000084c

00002fd0 <generic_hfclk_start>:
{
    2fd0:	b508      	push	{r3, lr}
	__asm__ volatile(
    2fd2:	f04f 0320 	mov.w	r3, #32
    2fd6:	f3ef 8111 	mrs	r1, BASEPRI
    2fda:	f383 8812 	msr	BASEPRI_MAX, r3
    2fde:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    2fe2:	4a12      	ldr	r2, [pc, #72]	; (302c <generic_hfclk_start+0x5c>)
    2fe4:	6813      	ldr	r3, [r2, #0]
    2fe6:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    2fea:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    2fee:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    2ff0:	d00c      	beq.n	300c <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    2ff2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    2ff6:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    2ffa:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    2ffe:	f013 0301 	ands.w	r3, r3, #1
    3002:	d003      	beq.n	300c <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    3004:	480a      	ldr	r0, [pc, #40]	; (3030 <generic_hfclk_start+0x60>)
    3006:	f003 fd5c 	bl	6ac2 <set_on_state>
			already_started = true;
    300a:	2301      	movs	r3, #1
	__asm__ volatile(
    300c:	f381 8811 	msr	BASEPRI, r1
    3010:	f3bf 8f6f 	isb	sy
	if (already_started) {
    3014:	b123      	cbz	r3, 3020 <generic_hfclk_start+0x50>
}
    3016:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    301a:	2000      	movs	r0, #0
    301c:	f7ff bfa4 	b.w	2f68 <clkstarted_handle.constprop.0>
}
    3020:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    3024:	2001      	movs	r0, #1
    3026:	f003 beb7 	b.w	6d98 <nrfx_clock_start>
    302a:	bf00      	nop
    302c:	2000089c 	.word	0x2000089c
    3030:	2000088c 	.word	0x2000088c

00003034 <api_blocking_start>:
{
    3034:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3036:	2200      	movs	r2, #0
    3038:	2301      	movs	r3, #1
    303a:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    303e:	4a09      	ldr	r2, [pc, #36]	; (3064 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3040:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3044:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3046:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    304a:	f003 fdaa 	bl	6ba2 <api_start>
	if (err < 0) {
    304e:	2800      	cmp	r0, #0
    3050:	db05      	blt.n	305e <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    3052:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3056:	2300      	movs	r3, #0
    3058:	4668      	mov	r0, sp
    305a:	f002 f995 	bl	5388 <z_impl_k_sem_take>
}
    305e:	b005      	add	sp, #20
    3060:	f85d fb04 	ldr.w	pc, [sp], #4
    3064:	00006bc9 	.word	0x00006bc9

00003068 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3068:	4b09      	ldr	r3, [pc, #36]	; (3090 <generic_hfclk_stop+0x28>)
    306a:	f3bf 8f5b 	dmb	ish
    306e:	e853 2f00 	ldrex	r2, [r3]
    3072:	f022 0102 	bic.w	r1, r2, #2
    3076:	e843 1000 	strex	r0, r1, [r3]
    307a:	2800      	cmp	r0, #0
    307c:	d1f7      	bne.n	306e <generic_hfclk_stop+0x6>
    307e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    3082:	07d3      	lsls	r3, r2, #31
    3084:	d402      	bmi.n	308c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    3086:	2001      	movs	r0, #1
    3088:	f003 bebe 	b.w	6e08 <nrfx_clock_stop>
}
    308c:	4770      	bx	lr
    308e:	bf00      	nop
    3090:	2000089c 	.word	0x2000089c

00003094 <z_nrf_clock_control_get_onoff>:
}
    3094:	4a02      	ldr	r2, [pc, #8]	; (30a0 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    3096:	b2c3      	uxtb	r3, r0
}
    3098:	201c      	movs	r0, #28
    309a:	fb03 2000 	mla	r0, r3, r0, r2
    309e:	4770      	bx	lr
    30a0:	2000084c 	.word	0x2000084c

000030a4 <z_nrf_clock_control_lf_on>:
{
    30a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    30a6:	4928      	ldr	r1, [pc, #160]	; (3148 <z_nrf_clock_control_lf_on+0xa4>)
    30a8:	f3bf 8f5b 	dmb	ish
    30ac:	4606      	mov	r6, r0
    30ae:	2201      	movs	r2, #1
    30b0:	e851 3f00 	ldrex	r3, [r1]
    30b4:	e841 2000 	strex	r0, r2, [r1]
    30b8:	2800      	cmp	r0, #0
    30ba:	d1f9      	bne.n	30b0 <z_nrf_clock_control_lf_on+0xc>
    30bc:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    30c0:	b933      	cbnz	r3, 30d0 <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    30c2:	4922      	ldr	r1, [pc, #136]	; (314c <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
    30c4:	4822      	ldr	r0, [pc, #136]	; (3150 <z_nrf_clock_control_lf_on+0xac>)
    30c6:	604b      	str	r3, [r1, #4]
    30c8:	60cb      	str	r3, [r1, #12]
    30ca:	608a      	str	r2, [r1, #8]
    30cc:	f003 f8f3 	bl	62b6 <onoff_request>
	switch (start_mode) {
    30d0:	1e73      	subs	r3, r6, #1
    30d2:	2b01      	cmp	r3, #1
    30d4:	d820      	bhi.n	3118 <z_nrf_clock_control_lf_on+0x74>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    30d6:	f003 ff0b 	bl	6ef0 <k_is_in_isr>
    30da:	4604      	mov	r4, r0
    30dc:	b910      	cbnz	r0, 30e4 <z_nrf_clock_control_lf_on+0x40>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    30de:	4b1d      	ldr	r3, [pc, #116]	; (3154 <z_nrf_clock_control_lf_on+0xb0>)
	int key = isr_mode ? irq_lock() : 0;
    30e0:	781b      	ldrb	r3, [r3, #0]
    30e2:	bb53      	cbnz	r3, 313a <z_nrf_clock_control_lf_on+0x96>
	__asm__ volatile(
    30e4:	f04f 0320 	mov.w	r3, #32
    30e8:	f3ef 8511 	mrs	r5, BASEPRI
    30ec:	f383 8812 	msr	BASEPRI_MAX, r3
    30f0:	f3bf 8f6f 	isb	sy
    30f4:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    30f6:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    30fa:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    30fe:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
    3102:	03d2      	lsls	r2, r2, #15
    3104:	d509      	bpl.n	311a <z_nrf_clock_control_lf_on+0x76>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    3106:	079b      	lsls	r3, r3, #30
    3108:	d001      	beq.n	310e <z_nrf_clock_control_lf_on+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    310a:	2e01      	cmp	r6, #1
    310c:	d105      	bne.n	311a <z_nrf_clock_control_lf_on+0x76>
	if (isr_mode) {
    310e:	b174      	cbz	r4, 312e <z_nrf_clock_control_lf_on+0x8a>
	__asm__ volatile(
    3110:	f385 8811 	msr	BASEPRI, r5
    3114:	f3bf 8f6f 	isb	sy
}
    3118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    311a:	b11c      	cbz	r4, 3124 <z_nrf_clock_control_lf_on+0x80>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    311c:	4628      	mov	r0, r5
    311e:	f7ff f8ab 	bl	2278 <arch_cpu_atomic_idle>
}
    3122:	e7ea      	b.n	30fa <z_nrf_clock_control_lf_on+0x56>
	return z_impl_k_sleep(timeout);
    3124:	2100      	movs	r1, #0
    3126:	2021      	movs	r0, #33	; 0x21
    3128:	f002 fd52 	bl	5bd0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    312c:	e7e5      	b.n	30fa <z_nrf_clock_control_lf_on+0x56>
    p_reg->INTENSET = mask;
    312e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3132:	2202      	movs	r2, #2
    3134:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3138:	e7ee      	b.n	3118 <z_nrf_clock_control_lf_on+0x74>
    p_reg->INTENCLR = mask;
    313a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    313e:	2202      	movs	r2, #2
    3140:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    3144:	4605      	mov	r5, r0
}
    3146:	e7d6      	b.n	30f6 <z_nrf_clock_control_lf_on+0x52>
    3148:	200008a0 	.word	0x200008a0
    314c:	2000083c 	.word	0x2000083c
    3150:	20000868 	.word	0x20000868
    3154:	200011d0 	.word	0x200011d0

00003158 <temp_sensor_init.part.0>:
	total_cnt = 0;
	total_skips_cnt = 0;
}

#if CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP
static int temp_sensor_init(const struct device *arg)
    3158:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
{
	temp_sensor = DEVICE_DT_GET_OR_NULL(TEMP_NODE);
	if ((temp_sensor != NULL) && !device_is_ready(temp_sensor)) {
		LOG_ERR("Temperature sensor not ready");
    315a:	4b08      	ldr	r3, [pc, #32]	; (317c <temp_sensor_init.part.0+0x24>)
    315c:	9305      	str	r3, [sp, #20]
    315e:	2302      	movs	r3, #2
    3160:	9304      	str	r3, [sp, #16]
    3162:	4807      	ldr	r0, [pc, #28]	; (3180 <temp_sensor_init.part.0+0x28>)
    3164:	2300      	movs	r3, #0
    3166:	aa04      	add	r2, sp, #16
    3168:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    316c:	f003 fbf8 	bl	6960 <z_impl_z_log_msg2_static_create>
		return -ENODEV;
	}

	return 0;
}
    3170:	f06f 0012 	mvn.w	r0, #18
    3174:	b007      	add	sp, #28
    3176:	f85d fb04 	ldr.w	pc, [sp], #4
    317a:	bf00      	nop
    317c:	00007c75 	.word	0x00007c75
    3180:	00007450 	.word	0x00007450

00003184 <start_cal_process>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3184:	4b0d      	ldr	r3, [pc, #52]	; (31bc <start_cal_process+0x38>)
    3186:	f3bf 8f5b 	dmb	ish
    318a:	2201      	movs	r2, #1
    318c:	e853 1f00 	ldrex	r1, [r3]
    3190:	2900      	cmp	r1, #0
    3192:	d103      	bne.n	319c <start_cal_process+0x18>
    3194:	e843 2000 	strex	r0, r2, [r3]
    3198:	2800      	cmp	r0, #0
    319a:	d1f7      	bne.n	318c <start_cal_process+0x8>
    319c:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&cal_process_in_progress, 0, 1) == false) {
    31a0:	d10a      	bne.n	31b8 <start_cal_process+0x34>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    31a2:	4907      	ldr	r1, [pc, #28]	; (31c0 <start_cal_process+0x3c>)
    31a4:	2300      	movs	r3, #0
    31a6:	60cb      	str	r3, [r1, #12]
    31a8:	4b06      	ldr	r3, [pc, #24]	; (31c4 <start_cal_process+0x40>)
    31aa:	604b      	str	r3, [r1, #4]
    31ac:	2303      	movs	r3, #3
    31ae:	608b      	str	r3, [r1, #8]
	err = onoff_request(mgr, cli);
    31b0:	4b05      	ldr	r3, [pc, #20]	; (31c8 <start_cal_process+0x44>)
    31b2:	6818      	ldr	r0, [r3, #0]
    31b4:	f003 b87f 	b.w	62b6 <onoff_request>
}
    31b8:	4770      	bx	lr
    31ba:	bf00      	nop
    31bc:	200008a4 	.word	0x200008a4
    31c0:	200008a8 	.word	0x200008a8
    31c4:	000032b5 	.word	0x000032b5
    31c8:	200008b8 	.word	0x200008b8

000031cc <temp_sensor_init>:
{
    31cc:	b508      	push	{r3, lr}
	temp_sensor = DEVICE_DT_GET_OR_NULL(TEMP_NODE);
    31ce:	4b06      	ldr	r3, [pc, #24]	; (31e8 <temp_sensor_init+0x1c>)
    31d0:	4806      	ldr	r0, [pc, #24]	; (31ec <temp_sensor_init+0x20>)
    31d2:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    31d4:	f003 fe7e 	bl	6ed4 <z_device_is_ready>
	if ((temp_sensor != NULL) && !device_is_ready(temp_sensor)) {
    31d8:	b918      	cbnz	r0, 31e2 <temp_sensor_init+0x16>
}
    31da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    31de:	f7ff bfbb 	b.w	3158 <temp_sensor_init.part.0>
    31e2:	2000      	movs	r0, #0
    31e4:	bd08      	pop	{r3, pc}
    31e6:	bf00      	nop
    31e8:	200008bc 	.word	0x200008bc
    31ec:	000072f8 	.word	0x000072f8

000031f0 <start_cycle>:
{
    31f0:	b507      	push	{r0, r1, r2, lr}
	z_impl_k_timer_start(timer, duration, period);
    31f2:	2200      	movs	r2, #0
    31f4:	2300      	movs	r3, #0
    31f6:	e9cd 2300 	strd	r2, r3, [sp]
    31fa:	4808      	ldr	r0, [pc, #32]	; (321c <start_cycle+0x2c>)
    31fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3200:	2300      	movs	r3, #0
    3202:	f002 ff01 	bl	6008 <z_impl_k_timer_start>
	clk_release(&mgrs[CLOCK_CONTROL_NRF_TYPE_HFCLK]);
    3206:	4b06      	ldr	r3, [pc, #24]	; (3220 <start_cycle+0x30>)
	err = onoff_release(mgr);
    3208:	6818      	ldr	r0, [r3, #0]
    320a:	f003 f89d 	bl	6348 <onoff_release>
	cal_process_in_progress = 0;
    320e:	4b05      	ldr	r3, [pc, #20]	; (3224 <start_cycle+0x34>)
    3210:	2200      	movs	r2, #0
    3212:	601a      	str	r2, [r3, #0]
}
    3214:	b003      	add	sp, #12
    3216:	f85d fb04 	ldr.w	pc, [sp], #4
    321a:	bf00      	nop
    321c:	200000b0 	.word	0x200000b0
    3220:	200008b8 	.word	0x200008b8
    3224:	200008a4 	.word	0x200008a4

00003228 <measure_temperature>:
{
    3228:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int rc = sensor_sample_fetch(temp_sensor);
    322a:	4d1d      	ldr	r5, [pc, #116]	; (32a0 <measure_temperature+0x78>)
    322c:	6828      	ldr	r0, [r5, #0]
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    322e:	6883      	ldr	r3, [r0, #8]
    3230:	4c1c      	ldr	r4, [pc, #112]	; (32a4 <measure_temperature+0x7c>)
    3232:	68db      	ldr	r3, [r3, #12]
    3234:	2139      	movs	r1, #57	; 0x39
    3236:	4798      	blx	r3
	if (rc == 0) {
    3238:	b170      	cbz	r0, 3258 <measure_temperature+0x30>
		calib_skip_cnt = 0;
    323a:	2300      	movs	r3, #0
    323c:	7023      	strb	r3, [r4, #0]
	int16_t diff = 0;
    323e:	461a      	mov	r2, r3
	if ((calib_skip_cnt == 0) ||
    3240:	7821      	ldrb	r1, [r4, #0]
    3242:	b109      	cbz	r1, 3248 <measure_temperature+0x20>
    3244:	2a01      	cmp	r2, #1
    3246:	dd20      	ble.n	328a <measure_temperature+0x62>
		prev_temperature = temperature;
    3248:	4a17      	ldr	r2, [pc, #92]	; (32a8 <measure_temperature+0x80>)
    324a:	8013      	strh	r3, [r2, #0]
	nrfx_clock_calibration_start();
    324c:	f001 f8f2 	bl	4434 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    3250:	2301      	movs	r3, #1
    3252:	7023      	strb	r3, [r4, #0]
}
    3254:	b003      	add	sp, #12
    3256:	bd30      	pop	{r4, r5, pc}
		rc = sensor_channel_get(temp_sensor, SENSOR_CHAN_DIE_TEMP,
    3258:	6828      	ldr	r0, [r5, #0]
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
    325a:	6883      	ldr	r3, [r0, #8]
    325c:	466a      	mov	r2, sp
    325e:	691b      	ldr	r3, [r3, #16]
    3260:	210c      	movs	r1, #12
    3262:	4798      	blx	r3
	if (rc == 0) {
    3264:	2800      	cmp	r0, #0
    3266:	d1e8      	bne.n	323a <measure_temperature+0x12>
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    3268:	4a10      	ldr	r2, [pc, #64]	; (32ac <measure_temperature+0x84>)
    326a:	9b01      	ldr	r3, [sp, #4]
    326c:	fb93 f3f2 	sdiv	r3, r3, r2
    3270:	9a00      	ldr	r2, [sp, #0]
    3272:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		diff = abs(temperature - prev_temperature);
    3276:	4a0c      	ldr	r2, [pc, #48]	; (32a8 <measure_temperature+0x80>)
    3278:	f9b2 2000 	ldrsh.w	r2, [r2]
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    327c:	b21b      	sxth	r3, r3
		diff = abs(temperature - prev_temperature);
    327e:	1a9a      	subs	r2, r3, r2
void srand(unsigned int seed);
#endif /* CONFIG_MINIMAL_LIBC_RAND */

static inline int abs(int __n)
{
	return (__n < 0) ? -__n : __n;
    3280:	2a00      	cmp	r2, #0
    3282:	bfb8      	it	lt
    3284:	4252      	neglt	r2, r2
    3286:	b212      	sxth	r2, r2
    3288:	e7da      	b.n	3240 <measure_temperature+0x18>
		total_skips_cnt++;
    328a:	4a09      	ldr	r2, [pc, #36]	; (32b0 <measure_temperature+0x88>)
    328c:	6813      	ldr	r3, [r2, #0]
		calib_skip_cnt--;
    328e:	3901      	subs	r1, #1
		total_skips_cnt++;
    3290:	3301      	adds	r3, #1
		calib_skip_cnt--;
    3292:	7021      	strb	r1, [r4, #0]
		total_skips_cnt++;
    3294:	6013      	str	r3, [r2, #0]
}
    3296:	b003      	add	sp, #12
    3298:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		start_cycle();
    329c:	f7ff bfa8 	b.w	31f0 <start_cycle>
    32a0:	200008bc 	.word	0x200008bc
    32a4:	20000b60 	.word	0x20000b60
    32a8:	20000b04 	.word	0x20000b04
    32ac:	0003d090 	.word	0x0003d090
    32b0:	200008c4 	.word	0x200008c4

000032b4 <cal_hf_callback>:
{
    32b4:	b508      	push	{r3, lr}
	if ((temp_sensor == NULL) || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    32b6:	4b07      	ldr	r3, [pc, #28]	; (32d4 <cal_hf_callback+0x20>)
    32b8:	681b      	ldr	r3, [r3, #0]
    32ba:	b92b      	cbnz	r3, 32c8 <cal_hf_callback+0x14>
	nrfx_clock_calibration_start();
    32bc:	f001 f8ba 	bl	4434 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    32c0:	4b05      	ldr	r3, [pc, #20]	; (32d8 <cal_hf_callback+0x24>)
    32c2:	2201      	movs	r2, #1
    32c4:	701a      	strb	r2, [r3, #0]
}
    32c6:	bd08      	pop	{r3, pc}
    32c8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_submit(&temp_measure_work);
    32cc:	4803      	ldr	r0, [pc, #12]	; (32dc <cal_hf_callback+0x28>)
    32ce:	f002 b969 	b.w	55a4 <k_work_submit>
    32d2:	bf00      	nop
    32d4:	200008bc 	.word	0x200008bc
    32d8:	20000b60 	.word	0x20000b60
    32dc:	20000010 	.word	0x20000010

000032e0 <z_nrf_clock_calibration_init>:
	mgrs = onoff_mgrs;
    32e0:	4b03      	ldr	r3, [pc, #12]	; (32f0 <z_nrf_clock_calibration_init+0x10>)
	total_cnt = 0;
    32e2:	4a04      	ldr	r2, [pc, #16]	; (32f4 <z_nrf_clock_calibration_init+0x14>)
	mgrs = onoff_mgrs;
    32e4:	6018      	str	r0, [r3, #0]
	total_cnt = 0;
    32e6:	2300      	movs	r3, #0
    32e8:	6013      	str	r3, [r2, #0]
	total_skips_cnt = 0;
    32ea:	4a03      	ldr	r2, [pc, #12]	; (32f8 <z_nrf_clock_calibration_init+0x18>)
    32ec:	6013      	str	r3, [r2, #0]
}
    32ee:	4770      	bx	lr
    32f0:	200008b8 	.word	0x200008b8
    32f4:	200008c0 	.word	0x200008c0
    32f8:	200008c4 	.word	0x200008c4

000032fc <z_nrf_clock_calibration_lfclk_started>:
SYS_INIT(temp_sensor_init, APPLICATION, 0);
#endif /* CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP */

static void start_unconditional_cal_process(void)
{
	calib_skip_cnt = 0;
    32fc:	4b02      	ldr	r3, [pc, #8]	; (3308 <z_nrf_clock_calibration_lfclk_started+0xc>)
    32fe:	2200      	movs	r2, #0
    3300:	701a      	strb	r2, [r3, #0]
	start_cal_process();
    3302:	f7ff bf3f 	b.w	3184 <start_cal_process>
    3306:	bf00      	nop
    3308:	20000b60 	.word	0x20000b60

0000330c <z_nrf_clock_calibration_lfclk_stopped>:
	z_impl_k_timer_stop(timer);
    330c:	4801      	ldr	r0, [pc, #4]	; (3314 <z_nrf_clock_calibration_lfclk_stopped+0x8>)
    330e:	f003 bf8a 	b.w	7226 <z_impl_k_timer_stop>
    3312:	bf00      	nop
    3314:	200000b0 	.word	0x200000b0

00003318 <z_nrf_clock_calibration_done_handler>:
	LOG_DBG("Calibration stopped");
}

void z_nrf_clock_calibration_done_handler(void)
{
	total_cnt++;
    3318:	4a02      	ldr	r2, [pc, #8]	; (3324 <z_nrf_clock_calibration_done_handler+0xc>)
    331a:	6813      	ldr	r3, [r2, #0]
    331c:	3301      	adds	r3, #1
    331e:	6013      	str	r3, [r2, #0]
	LOG_DBG("Calibration done.");

	start_cycle();
    3320:	f7ff bf66 	b.w	31f0 <start_cycle>
    3324:	200008c0 	.word	0x200008c0

00003328 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    3328:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    332a:	4c04      	ldr	r4, [pc, #16]	; (333c <rtt_console_init+0x14>)
    332c:	4620      	mov	r0, r4
    332e:	f7fd fcb5 	bl	c9c <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    3332:	4620      	mov	r0, r4
    3334:	f7ff fd88 	bl	2e48 <__stdout_hook_install>

	return 0;
}
    3338:	2000      	movs	r0, #0
    333a:	bd10      	pop	{r4, pc}
    333c:	00003341 	.word	0x00003341

00003340 <rtt_console_out>:
{
    3340:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    3344:	f8df 805c 	ldr.w	r8, [pc, #92]	; 33a4 <rtt_console_out+0x64>
    3348:	4e17      	ldr	r6, [pc, #92]	; (33a8 <rtt_console_out+0x68>)
	char c = (char)character;
    334a:	f88d 0007 	strb.w	r0, [sp, #7]
{
    334e:	4604      	mov	r4, r0
	char c = (char)character;
    3350:	2503      	movs	r5, #3
    3352:	f04f 33ff 	mov.w	r3, #4294967295
    3356:	f04f 32ff 	mov.w	r2, #4294967295
    335a:	4640      	mov	r0, r8
    335c:	f001 ff3a 	bl	51d4 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    3360:	2201      	movs	r2, #1
    3362:	f10d 0107 	add.w	r1, sp, #7
    3366:	2000      	movs	r0, #0
    3368:	f001 fc9c 	bl	4ca4 <SEGGER_RTT_WriteNoLock>
    336c:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    336e:	4640      	mov	r0, r8
    3370:	f001 ffa8 	bl	52c4 <z_impl_k_mutex_unlock>
		if (cnt) {
    3374:	b12f      	cbz	r7, 3382 <rtt_console_out+0x42>
			host_present = true;
    3376:	2301      	movs	r3, #1
    3378:	7033      	strb	r3, [r6, #0]
}
    337a:	4620      	mov	r0, r4
    337c:	b002      	add	sp, #8
    337e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    3382:	7833      	ldrb	r3, [r6, #0]
    3384:	2b00      	cmp	r3, #0
    3386:	d0f8      	beq.n	337a <rtt_console_out+0x3a>
			if (max_cnt) {
    3388:	3d01      	subs	r5, #1
    338a:	d008      	beq.n	339e <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    338c:	f003 fdb0 	bl	6ef0 <k_is_in_isr>
    3390:	2800      	cmp	r0, #0
    3392:	d1de      	bne.n	3352 <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    3394:	2100      	movs	r1, #0
    3396:	2042      	movs	r0, #66	; 0x42
    3398:	f002 fc1a 	bl	5bd0 <z_impl_k_sleep>
    339c:	e7d9      	b.n	3352 <rtt_console_out+0x12>
				host_present = false;
    339e:	7035      	strb	r5, [r6, #0]
    33a0:	e7eb      	b.n	337a <rtt_console_out+0x3a>
    33a2:	bf00      	nop
    33a4:	200000e8 	.word	0x200000e8
    33a8:	20000b61 	.word	0x20000b61

000033ac <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    33ac:	b530      	push	{r4, r5, lr}
	return port->config;
    33ae:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    33b0:	7b04      	ldrb	r4, [r0, #12]
    33b2:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    33b6:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    33ba:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    33be:	b085      	sub	sp, #20
    33c0:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    33c4:	d104      	bne.n	33d0 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    33c6:	4628      	mov	r0, r5
    33c8:	f001 facc 	bl	4964 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    33cc:	2000      	movs	r0, #0
    33ce:	e02e      	b.n	342e <gpio_nrfx_pin_interrupt_configure+0x82>
	if (mode == GPIO_INT_MODE_LEVEL) {
    33d0:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    33d4:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    33d8:	d12b      	bne.n	3432 <gpio_nrfx_pin_interrupt_configure+0x86>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    33da:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    33de:	bf0c      	ite	eq
    33e0:	2304      	moveq	r3, #4
    33e2:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    33e4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    33e8:	6883      	ldr	r3, [r0, #8]
    33ea:	fa23 f101 	lsr.w	r1, r3, r1
    33ee:	07c9      	lsls	r1, r1, #31
    33f0:	d42b      	bmi.n	344a <gpio_nrfx_pin_interrupt_configure+0x9e>
    33f2:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    33f6:	d128      	bne.n	344a <gpio_nrfx_pin_interrupt_configure+0x9e>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    33f8:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    33fc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3400:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3404:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    3408:	07db      	lsls	r3, r3, #31
    340a:	d41e      	bmi.n	344a <gpio_nrfx_pin_interrupt_configure+0x9e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    340c:	f10d 0407 	add.w	r4, sp, #7
    3410:	4621      	mov	r1, r4
    3412:	4628      	mov	r0, r5
    3414:	f001 fa0e 	bl	4834 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    3418:	4b14      	ldr	r3, [pc, #80]	; (346c <gpio_nrfx_pin_interrupt_configure+0xc0>)
    341a:	4298      	cmp	r0, r3
    341c:	d114      	bne.n	3448 <gpio_nrfx_pin_interrupt_configure+0x9c>
			err = nrfx_gpiote_channel_alloc(&ch);
    341e:	4620      	mov	r0, r4
    3420:	f001 fa56 	bl	48d0 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    3424:	4b12      	ldr	r3, [pc, #72]	; (3470 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    3426:	4298      	cmp	r0, r3
    3428:	d00e      	beq.n	3448 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
    342a:	f06f 000b 	mvn.w	r0, #11
}
    342e:	b005      	add	sp, #20
    3430:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3432:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    3436:	d005      	beq.n	3444 <gpio_nrfx_pin_interrupt_configure+0x98>
    3438:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    343c:	bf0c      	ite	eq
    343e:	2302      	moveq	r3, #2
    3440:	2301      	movne	r3, #1
    3442:	e7cf      	b.n	33e4 <gpio_nrfx_pin_interrupt_configure+0x38>
    3444:	2303      	movs	r3, #3
    3446:	e7cd      	b.n	33e4 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    3448:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    344a:	2300      	movs	r3, #0
    344c:	4619      	mov	r1, r3
    344e:	aa02      	add	r2, sp, #8
    3450:	4628      	mov	r0, r5
    3452:	f001 f8c7 	bl	45e4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3456:	4b06      	ldr	r3, [pc, #24]	; (3470 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    3458:	4298      	cmp	r0, r3
    345a:	d104      	bne.n	3466 <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    345c:	2101      	movs	r1, #1
    345e:	4628      	mov	r0, r5
    3460:	f001 fa3c 	bl	48dc <nrfx_gpiote_trigger_enable>
    3464:	e7b2      	b.n	33cc <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    3466:	f06f 0004 	mvn.w	r0, #4
    346a:	e7e0      	b.n	342e <gpio_nrfx_pin_interrupt_configure+0x82>
    346c:	0bad0004 	.word	0x0bad0004
    3470:	0bad0000 	.word	0x0bad0000

00003474 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3474:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    3476:	f001 fa1b 	bl	48b0 <nrfx_gpiote_is_init>
    347a:	4604      	mov	r4, r0
    347c:	b968      	cbnz	r0, 349a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    347e:	f001 f9ef 	bl	4860 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    3482:	4b08      	ldr	r3, [pc, #32]	; (34a4 <gpio_nrfx_init+0x30>)
    3484:	4298      	cmp	r0, r3
    3486:	d10a      	bne.n	349e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3488:	4807      	ldr	r0, [pc, #28]	; (34a8 <gpio_nrfx_init+0x34>)
    348a:	4621      	mov	r1, r4
    348c:	f001 f9cc 	bl	4828 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3490:	4622      	mov	r2, r4
    3492:	2105      	movs	r1, #5
    3494:	2006      	movs	r0, #6
    3496:	f7fe ff91 	bl	23bc <z_arm_irq_priority_set>
		return 0;
    349a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    349c:	bd10      	pop	{r4, pc}
		return -EIO;
    349e:	f06f 0004 	mvn.w	r0, #4
    34a2:	e7fb      	b.n	349c <gpio_nrfx_init+0x28>
    34a4:	0bad0000 	.word	0x0bad0000
    34a8:	000034ad 	.word	0x000034ad

000034ac <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    34ac:	0943      	lsrs	r3, r0, #5
{
    34ae:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    34b0:	d110      	bne.n	34d4 <nrfx_gpio_handler+0x28>
	return list->head;
    34b2:	4b09      	ldr	r3, [pc, #36]	; (34d8 <nrfx_gpio_handler+0x2c>)
    34b4:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    34b6:	b169      	cbz	r1, 34d4 <nrfx_gpio_handler+0x28>
	gpio_fire_callbacks(list, port, BIT(pin));
    34b8:	2501      	movs	r5, #1
	return node->next;
    34ba:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    34bc:	4e07      	ldr	r6, [pc, #28]	; (34dc <nrfx_gpio_handler+0x30>)
    34be:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
    34c0:	688a      	ldr	r2, [r1, #8]
    34c2:	402a      	ands	r2, r5
    34c4:	d002      	beq.n	34cc <nrfx_gpio_handler+0x20>
			cb->handler(port, cb, cb->pin_mask & pins);
    34c6:	684b      	ldr	r3, [r1, #4]
    34c8:	4630      	mov	r0, r6
    34ca:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    34cc:	b114      	cbz	r4, 34d4 <nrfx_gpio_handler+0x28>
    34ce:	4621      	mov	r1, r4
    34d0:	6824      	ldr	r4, [r4, #0]
    34d2:	e7f5      	b.n	34c0 <nrfx_gpio_handler+0x14>
}
    34d4:	bd70      	pop	{r4, r5, r6, pc}
    34d6:	bf00      	nop
    34d8:	200008c8 	.word	0x200008c8
    34dc:	000072e0 	.word	0x000072e0

000034e0 <gpio_nrfx_pin_configure>:
{
    34e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    34e4:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    34e6:	7b3b      	ldrb	r3, [r7, #12]
    34e8:	f001 051f 	and.w	r5, r1, #31
{
    34ec:	b085      	sub	sp, #20
    34ee:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    34f0:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    34f4:	4614      	mov	r4, r2
    34f6:	b9ca      	cbnz	r2, 352c <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    34f8:	a902      	add	r1, sp, #8
    34fa:	4628      	mov	r0, r5
    34fc:	f001 f99a 	bl	4834 <nrfx_gpiote_channel_get>
    3500:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    3502:	4628      	mov	r0, r5
    3504:	f001 fa56 	bl	49b4 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    3508:	4b4a      	ldr	r3, [pc, #296]	; (3634 <gpio_nrfx_pin_configure+0x154>)
    350a:	4298      	cmp	r0, r3
    350c:	d004      	beq.n	3518 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    350e:	f06f 0004 	mvn.w	r0, #4
}
    3512:	b005      	add	sp, #20
    3514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    3518:	4284      	cmp	r4, r0
    351a:	d105      	bne.n	3528 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    351c:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3520:	f001 f9d0 	bl	48c4 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    3524:	42a0      	cmp	r0, r4
    3526:	d1f2      	bne.n	350e <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3528:	2000      	movs	r0, #0
    352a:	e7f2      	b.n	3512 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    352c:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    3530:	f10d 0103 	add.w	r1, sp, #3
    3534:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    3536:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    353a:	f001 f97b 	bl	4834 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    353e:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    3540:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3542:	aa02      	add	r2, sp, #8
    3544:	4649      	mov	r1, r9
    3546:	4628      	mov	r0, r5
    3548:	f001 f84c 	bl	45e4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    354c:	4b39      	ldr	r3, [pc, #228]	; (3634 <gpio_nrfx_pin_configure+0x154>)
    354e:	4298      	cmp	r0, r3
    3550:	d002      	beq.n	3558 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    3552:	f06f 0015 	mvn.w	r0, #21
    3556:	e7dc      	b.n	3512 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    3558:	4580      	cmp	r8, r0
    355a:	d103      	bne.n	3564 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    355c:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3560:	f001 f9b0 	bl	48c4 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    3564:	03a3      	lsls	r3, r4, #14
    3566:	d551      	bpl.n	360c <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    3568:	f240 6306 	movw	r3, #1542	; 0x606
    356c:	4023      	ands	r3, r4
    356e:	f240 2206 	movw	r2, #518	; 0x206
    3572:	4293      	cmp	r3, r2
    3574:	d03b      	beq.n	35ee <gpio_nrfx_pin_configure+0x10e>
    3576:	d80c      	bhi.n	3592 <gpio_nrfx_pin_configure+0xb2>
    3578:	2b06      	cmp	r3, #6
    357a:	d015      	beq.n	35a8 <gpio_nrfx_pin_configure+0xc8>
    357c:	d804      	bhi.n	3588 <gpio_nrfx_pin_configure+0xa8>
    357e:	b19b      	cbz	r3, 35a8 <gpio_nrfx_pin_configure+0xc8>
    3580:	2b02      	cmp	r3, #2
    3582:	d1e6      	bne.n	3552 <gpio_nrfx_pin_configure+0x72>
    3584:	2304      	movs	r3, #4
    3586:	e00f      	b.n	35a8 <gpio_nrfx_pin_configure+0xc8>
    3588:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    358c:	d1e1      	bne.n	3552 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    358e:	2301      	movs	r3, #1
    3590:	e00a      	b.n	35a8 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    3592:	f240 4202 	movw	r2, #1026	; 0x402
    3596:	4293      	cmp	r3, r2
    3598:	d02b      	beq.n	35f2 <gpio_nrfx_pin_configure+0x112>
    359a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    359e:	d02a      	beq.n	35f6 <gpio_nrfx_pin_configure+0x116>
    35a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    35a4:	d1d5      	bne.n	3552 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    35a6:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    35a8:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    35ac:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    35b0:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    35b4:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    35b6:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    35ba:	bf54      	ite	pl
    35bc:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    35c0:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    35c2:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    35c4:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    35c8:	d517      	bpl.n	35fa <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    35ca:	687b      	ldr	r3, [r7, #4]
    35cc:	2101      	movs	r1, #1
    35ce:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    35d2:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    35d6:	2200      	movs	r2, #0
    35d8:	a901      	add	r1, sp, #4
    35da:	4628      	mov	r0, r5
    35dc:	f001 f8ac 	bl	4738 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    35e0:	4b14      	ldr	r3, [pc, #80]	; (3634 <gpio_nrfx_pin_configure+0x154>)
    35e2:	4298      	cmp	r0, r3
    35e4:	bf14      	ite	ne
    35e6:	f06f 0015 	mvnne.w	r0, #21
    35ea:	2000      	moveq	r0, #0
    35ec:	e791      	b.n	3512 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    35ee:	2307      	movs	r3, #7
    35f0:	e7da      	b.n	35a8 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    35f2:	2305      	movs	r3, #5
    35f4:	e7d8      	b.n	35a8 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    35f6:	2303      	movs	r3, #3
    35f8:	e7d6      	b.n	35a8 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    35fa:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    35fc:	bf41      	itttt	mi
    35fe:	687b      	ldrmi	r3, [r7, #4]
    3600:	2101      	movmi	r1, #1
    3602:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    3606:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    360a:	e7e4      	b.n	35d6 <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    360c:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    360e:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    3612:	bf54      	ite	pl
    3614:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    3618:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    361a:	461a      	mov	r2, r3
    361c:	a901      	add	r1, sp, #4
    361e:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    3620:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3624:	f000 ffde 	bl	45e4 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3628:	4b02      	ldr	r3, [pc, #8]	; (3634 <gpio_nrfx_pin_configure+0x154>)
    362a:	4298      	cmp	r0, r3
    362c:	f43f af7c 	beq.w	3528 <gpio_nrfx_pin_configure+0x48>
    3630:	e78f      	b.n	3552 <gpio_nrfx_pin_configure+0x72>
    3632:	bf00      	nop
    3634:	0bad0000 	.word	0x0bad0000

00003638 <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    3638:	4b01      	ldr	r3, [pc, #4]	; (3640 <hfclk_on_callback+0x8>)
    363a:	2201      	movs	r2, #1
    363c:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    363e:	4770      	bx	lr
    3640:	4000c000 	.word	0x4000c000

00003644 <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    3644:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
    3646:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
    3648:	d10b      	bne.n	3662 <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    364a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    364c:	4906      	ldr	r1, [pc, #24]	; (3668 <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
    364e:	4807      	ldr	r0, [pc, #28]	; (366c <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    3650:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
    3652:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
    3656:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
    365a:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    365c:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    365e:	2000      	movs	r0, #0
    3660:	4770      	bx	lr
		return -ENOTSUP;
    3662:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    3666:	4770      	bx	lr
    3668:	0003d090 	.word	0x0003d090
    366c:	000f4240 	.word	0x000f4240

00003670 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3670:	4b04      	ldr	r3, [pc, #16]	; (3684 <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
    3672:	6900      	ldr	r0, [r0, #16]
    3674:	2200      	movs	r2, #0
    3676:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    367a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	z_impl_k_sem_give(sem);
    367e:	f001 be63 	b.w	5348 <z_impl_k_sem_give>
    3682:	bf00      	nop
    3684:	4000c000 	.word	0x4000c000

00003688 <temp_nrf5_sample_fetch>:
{
    3688:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
    368a:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
    368c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    368e:	b363      	cbz	r3, 36ea <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    3690:	2939      	cmp	r1, #57	; 0x39
    3692:	d001      	beq.n	3698 <temp_nrf5_sample_fetch+0x10>
    3694:	290c      	cmp	r1, #12
    3696:	d12b      	bne.n	36f0 <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
    3698:	f105 0610 	add.w	r6, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    369c:	f04f 32ff 	mov.w	r2, #4294967295
    36a0:	f04f 33ff 	mov.w	r3, #4294967295
    36a4:	4630      	mov	r0, r6
    36a6:	f001 fd95 	bl	51d4 <z_impl_k_mutex_lock>
    36aa:	4b13      	ldr	r3, [pc, #76]	; (36f8 <temp_nrf5_sample_fetch+0x70>)
    36ac:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
    36ae:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    36b0:	2303      	movs	r3, #3
    36b2:	2400      	movs	r4, #0
    36b4:	4669      	mov	r1, sp
    36b6:	9403      	str	r4, [sp, #12]
    36b8:	9302      	str	r3, [sp, #8]
    36ba:	f002 fdfc 	bl	62b6 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    36be:	f04f 32ff 	mov.w	r2, #4294967295
    36c2:	f04f 33ff 	mov.w	r3, #4294967295
    36c6:	4628      	mov	r0, r5
    36c8:	f001 fe5e 	bl	5388 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    36cc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    36ce:	f002 fe3b 	bl	6348 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    36d2:	4b0a      	ldr	r3, [pc, #40]	; (36fc <temp_nrf5_sample_fetch+0x74>)
    36d4:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    36d8:	626a      	str	r2, [r5, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    36da:	2201      	movs	r2, #1
    36dc:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    36de:	4630      	mov	r0, r6
    36e0:	f001 fdf0 	bl	52c4 <z_impl_k_mutex_unlock>
	return 0;
    36e4:	4620      	mov	r0, r4
}
    36e6:	b004      	add	sp, #16
    36e8:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    36ea:	f06f 000a 	mvn.w	r0, #10
    36ee:	e7fa      	b.n	36e6 <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
    36f0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    36f4:	e7f7      	b.n	36e6 <temp_nrf5_sample_fetch+0x5e>
    36f6:	bf00      	nop
    36f8:	00003639 	.word	0x00003639
    36fc:	4000c000 	.word	0x4000c000

00003700 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    3700:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    3702:	6904      	ldr	r4, [r0, #16]

	LOG_DBG("");

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    3704:	2000      	movs	r0, #0
    3706:	f7ff fcc5 	bl	3094 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    370a:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    370c:	f04f 32ff 	mov.w	r2, #4294967295
    3710:	2100      	movs	r1, #0
    3712:	4620      	mov	r0, r4
    3714:	f003 fc0f 	bl	6f36 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
    3718:	f104 0010 	add.w	r0, r4, #16
    371c:	f003 fc04 	bl	6f28 <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
    3720:	2200      	movs	r2, #0
    3722:	2101      	movs	r1, #1
    3724:	200c      	movs	r0, #12
    3726:	f7fe fe49 	bl	23bc <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    372a:	200c      	movs	r0, #12
    372c:	f7fe fe14 	bl	2358 <arch_irq_enable>
    p_reg->INTENSET = mask;
    3730:	4b02      	ldr	r3, [pc, #8]	; (373c <temp_nrf5_init+0x3c>)
    3732:	2201      	movs	r2, #1
    3734:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    3738:	2000      	movs	r0, #0
    373a:	bd10      	pop	{r4, pc}
    373c:	4000c000 	.word	0x4000c000

00003740 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    3740:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3742:	2301      	movs	r3, #1
    3744:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3746:	4a11      	ldr	r2, [pc, #68]	; (378c <compare_int_lock+0x4c>)
    3748:	f3bf 8f5b 	dmb	ish
    374c:	43dc      	mvns	r4, r3
    374e:	e852 1f00 	ldrex	r1, [r2]
    3752:	ea01 0c04 	and.w	ip, r1, r4
    3756:	e842 ce00 	strex	lr, ip, [r2]
    375a:	f1be 0f00 	cmp.w	lr, #0
    375e:	d1f6      	bne.n	374e <compare_int_lock+0xe>
    3760:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3764:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3768:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    376c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3770:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    3774:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3778:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    377c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3780:	420b      	tst	r3, r1
}
    3782:	bf14      	ite	ne
    3784:	2001      	movne	r0, #1
    3786:	2000      	moveq	r0, #0
    3788:	bd10      	pop	{r4, pc}
    378a:	bf00      	nop
    378c:	20000904 	.word	0x20000904

00003790 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3790:	4919      	ldr	r1, [pc, #100]	; (37f8 <sys_clock_timeout_handler+0x68>)
{
    3792:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3794:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    3796:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    379a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    379c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    37a0:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    37a4:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    37a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    37aa:	d222      	bcs.n	37f2 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    37ac:	4b13      	ldr	r3, [pc, #76]	; (37fc <sys_clock_timeout_handler+0x6c>)
    37ae:	681b      	ldr	r3, [r3, #0]
    37b0:	0a1a      	lsrs	r2, r3, #8
    37b2:	061b      	lsls	r3, r3, #24
    37b4:	195e      	adds	r6, r3, r5
    37b6:	4b12      	ldr	r3, [pc, #72]	; (3800 <sys_clock_timeout_handler+0x70>)
    37b8:	f142 0700 	adc.w	r7, r2, #0
    37bc:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    37c0:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    37c2:	f002 fb67 	bl	5e94 <sys_clock_announce>
    return p_reg->CC[ch];
    37c6:	00a3      	lsls	r3, r4, #2
    37c8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    37cc:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    37d0:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    37d4:	42aa      	cmp	r2, r5
    37d6:	d10b      	bne.n	37f0 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    37d8:	b91e      	cbnz	r6, 37e2 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    37da:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    37de:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    37e2:	4b08      	ldr	r3, [pc, #32]	; (3804 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    37e4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    37e8:	fa00 f404 	lsl.w	r4, r0, r4
    37ec:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    37f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    37f2:	2600      	movs	r6, #0
    37f4:	e7e5      	b.n	37c2 <sys_clock_timeout_handler+0x32>
    37f6:	bf00      	nop
    37f8:	200005e0 	.word	0x200005e0
    37fc:	20000908 	.word	0x20000908
    3800:	200005c8 	.word	0x200005c8
    3804:	40011000 	.word	0x40011000

00003808 <compare_int_unlock>:
	if (key) {
    3808:	b319      	cbz	r1, 3852 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    380a:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    380e:	2301      	movs	r3, #1
    3810:	4a10      	ldr	r2, [pc, #64]	; (3854 <compare_int_unlock+0x4c>)
    3812:	4083      	lsls	r3, r0
    3814:	e852 1f00 	ldrex	r1, [r2]
    3818:	4319      	orrs	r1, r3
    381a:	e842 1c00 	strex	ip, r1, [r2]
    381e:	f1bc 0f00 	cmp.w	ip, #0
    3822:	d1f7      	bne.n	3814 <compare_int_unlock+0xc>
    3824:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    3828:	4a0b      	ldr	r2, [pc, #44]	; (3858 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    382a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    382e:	4083      	lsls	r3, r0
    3830:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3834:	4b09      	ldr	r3, [pc, #36]	; (385c <compare_int_unlock+0x54>)
    3836:	f3bf 8f5b 	dmb	ish
    383a:	681b      	ldr	r3, [r3, #0]
    383c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3840:	fa23 f000 	lsr.w	r0, r3, r0
    3844:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3846:	bf42      	ittt	mi
    3848:	4b05      	ldrmi	r3, [pc, #20]	; (3860 <compare_int_unlock+0x58>)
    384a:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    384e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3852:	4770      	bx	lr
    3854:	20000904 	.word	0x20000904
    3858:	40011000 	.word	0x40011000
    385c:	20000900 	.word	0x20000900
    3860:	e000e100 	.word	0xe000e100

00003864 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3864:	4b0d      	ldr	r3, [pc, #52]	; (389c <z_nrf_rtc_timer_read+0x38>)
    3866:	6818      	ldr	r0, [r3, #0]
    3868:	0a01      	lsrs	r1, r0, #8
    386a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    386c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3870:	4b0b      	ldr	r3, [pc, #44]	; (38a0 <z_nrf_rtc_timer_read+0x3c>)
    3872:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3876:	1818      	adds	r0, r3, r0
    3878:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    387c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3880:	d20a      	bcs.n	3898 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3882:	4b08      	ldr	r3, [pc, #32]	; (38a4 <z_nrf_rtc_timer_read+0x40>)
    3884:	e9d3 2300 	ldrd	r2, r3, [r3]
    3888:	4290      	cmp	r0, r2
    388a:	eb71 0303 	sbcs.w	r3, r1, r3
    388e:	d203      	bcs.n	3898 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    3890:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    3894:	f141 0100 	adc.w	r1, r1, #0
}
    3898:	4770      	bx	lr
    389a:	bf00      	nop
    389c:	20000908 	.word	0x20000908
    38a0:	40011000 	.word	0x40011000
    38a4:	200005c8 	.word	0x200005c8

000038a8 <compare_set>:
{
    38a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    38ac:	b085      	sub	sp, #20
    38ae:	4616      	mov	r6, r2
    38b0:	4698      	mov	r8, r3
    38b2:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    38b4:	f7ff ff44 	bl	3740 <compare_int_lock>
    38b8:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    38ba:	f7ff ffd3 	bl	3864 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    38be:	42b0      	cmp	r0, r6
    38c0:	eb71 0308 	sbcs.w	r3, r1, r8
    38c4:	d278      	bcs.n	39b8 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    38c6:	4b46      	ldr	r3, [pc, #280]	; (39e0 <compare_set+0x138>)
    38c8:	1a30      	subs	r0, r6, r0
    38ca:	eb68 0101 	sbc.w	r1, r8, r1
    38ce:	4298      	cmp	r0, r3
    38d0:	f171 0300 	sbcs.w	r3, r1, #0
    38d4:	f080 8081 	bcs.w	39da <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    38d8:	4b42      	ldr	r3, [pc, #264]	; (39e4 <compare_set+0x13c>)
    38da:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    38de:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    38e2:	45d8      	cmp	r8, fp
    38e4:	bf08      	it	eq
    38e6:	4556      	cmpeq	r6, sl
    38e8:	d051      	beq.n	398e <compare_set+0xe6>
    38ea:	ea4f 0985 	mov.w	r9, r5, lsl #2
    38ee:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    38f2:	f105 0750 	add.w	r7, r5, #80	; 0x50
    38f6:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    38fa:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    38fc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    3900:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3904:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    3906:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    390a:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    390e:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    3910:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    3914:	4b34      	ldr	r3, [pc, #208]	; (39e8 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3916:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    391a:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    391c:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    3920:	1a40      	subs	r0, r0, r1
    3922:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3926:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    392a:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    392c:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    3930:	d107      	bne.n	3942 <compare_set+0x9a>
    3932:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    3936:	2013      	movs	r0, #19
    3938:	f003 fc65 	bl	7206 <z_impl_k_busy_wait>
    393c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    3940:	4b29      	ldr	r3, [pc, #164]	; (39e8 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    3942:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    3946:	eba4 000c 	sub.w	r0, r4, ip
    394a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    394e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3952:	bf88      	it	hi
    3954:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3956:	2000      	movs	r0, #0
    3958:	6038      	str	r0, [r7, #0]
    395a:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    395c:	9801      	ldr	r0, [sp, #4]
    395e:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    3962:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    3966:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    396a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    396e:	4281      	cmp	r1, r0
    3970:	d006      	beq.n	3980 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    3972:	1a20      	subs	r0, r4, r0
    3974:	3802      	subs	r0, #2
    3976:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    397a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    397e:	d819      	bhi.n	39b4 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    3980:	1aa4      	subs	r4, r4, r2
    3982:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    3986:	eb14 0a06 	adds.w	sl, r4, r6
    398a:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    398e:	4915      	ldr	r1, [pc, #84]	; (39e4 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    3990:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    3992:	012b      	lsls	r3, r5, #4
    3994:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    3998:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    399c:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    399e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    39a0:	6053      	str	r3, [r2, #4]
	return ret;
    39a2:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    39a4:	4628      	mov	r0, r5
    39a6:	9900      	ldr	r1, [sp, #0]
    39a8:	f7ff ff2e 	bl	3808 <compare_int_unlock>
}
    39ac:	4620      	mov	r0, r4
    39ae:	b005      	add	sp, #20
    39b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    39b4:	4620      	mov	r0, r4
    39b6:	e7b1      	b.n	391c <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    39b8:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    39ba:	4a0c      	ldr	r2, [pc, #48]	; (39ec <compare_set+0x144>)
    39bc:	f3bf 8f5b 	dmb	ish
    39c0:	40ab      	lsls	r3, r5
    39c2:	e852 1f00 	ldrex	r1, [r2]
    39c6:	4319      	orrs	r1, r3
    39c8:	e842 1000 	strex	r0, r1, [r2]
    39cc:	2800      	cmp	r0, #0
    39ce:	d1f8      	bne.n	39c2 <compare_set+0x11a>
    39d0:	f3bf 8f5b 	dmb	ish
    39d4:	46b2      	mov	sl, r6
    39d6:	46c3      	mov	fp, r8
    39d8:	e7d9      	b.n	398e <compare_set+0xe6>
			return -EINVAL;
    39da:	f06f 0415 	mvn.w	r4, #21
    39de:	e7e1      	b.n	39a4 <compare_set+0xfc>
    39e0:	01000001 	.word	0x01000001
    39e4:	200005d0 	.word	0x200005d0
    39e8:	40011000 	.word	0x40011000
    39ec:	20000900 	.word	0x20000900

000039f0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    39f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    39f2:	4b19      	ldr	r3, [pc, #100]	; (3a58 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    39f4:	4d19      	ldr	r5, [pc, #100]	; (3a5c <sys_clock_driver_init+0x6c>)
    39f6:	2400      	movs	r4, #0
    39f8:	f04f 30ff 	mov.w	r0, #4294967295
    39fc:	f04f 31ff 	mov.w	r1, #4294967295
    3a00:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    3a04:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    3a08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3a0c:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3a10:	4b13      	ldr	r3, [pc, #76]	; (3a60 <sys_clock_driver_init+0x70>)
    3a12:	2602      	movs	r6, #2
    3a14:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    3a18:	2101      	movs	r1, #1
    3a1a:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    3a1e:	2011      	movs	r0, #17
    3a20:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3a24:	4622      	mov	r2, r4
    3a26:	f7fe fcc9 	bl	23bc <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    3a2a:	2011      	movs	r0, #17
    3a2c:	f7fe fc94 	bl	2358 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    3a30:	4a0c      	ldr	r2, [pc, #48]	; (3a64 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    3a32:	2301      	movs	r3, #1
    3a34:	60ab      	str	r3, [r5, #8]
    3a36:	602b      	str	r3, [r5, #0]
    3a38:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    3a3a:	4b0b      	ldr	r3, [pc, #44]	; (3a68 <sys_clock_driver_init+0x78>)
    3a3c:	4a0b      	ldr	r2, [pc, #44]	; (3a6c <sys_clock_driver_init+0x7c>)
    3a3e:	9300      	str	r3, [sp, #0]
    3a40:	9401      	str	r4, [sp, #4]
    3a42:	2300      	movs	r3, #0
    3a44:	4620      	mov	r0, r4
    3a46:	f7ff ff2f 	bl	38a8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    3a4a:	4630      	mov	r0, r6
    3a4c:	f7ff fb2a 	bl	30a4 <z_nrf_clock_control_lf_on>

	return 0;
}
    3a50:	4620      	mov	r0, r4
    3a52:	b002      	add	sp, #8
    3a54:	bd70      	pop	{r4, r5, r6, pc}
    3a56:	bf00      	nop
    3a58:	200005d0 	.word	0x200005d0
    3a5c:	40011000 	.word	0x40011000
    3a60:	e000e100 	.word	0xe000e100
    3a64:	20000904 	.word	0x20000904
    3a68:	00003791 	.word	0x00003791
    3a6c:	007fffff 	.word	0x007fffff

00003a70 <rtc_nrf_isr>:
{
    3a70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    3a74:	4c35      	ldr	r4, [pc, #212]	; (3b4c <rtc_nrf_isr+0xdc>)
    3a76:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    3a7a:	079a      	lsls	r2, r3, #30
    3a7c:	d50b      	bpl.n	3a96 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3a7e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3a82:	b143      	cbz	r3, 3a96 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    3a84:	4a32      	ldr	r2, [pc, #200]	; (3b50 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3a86:	2300      	movs	r3, #0
    3a88:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    3a8c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    3a90:	6813      	ldr	r3, [r2, #0]
    3a92:	3301      	adds	r3, #1
    3a94:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    3a96:	f04f 0320 	mov.w	r3, #32
    3a9a:	f3ef 8211 	mrs	r2, BASEPRI
    3a9e:	f383 8812 	msr	BASEPRI_MAX, r3
    3aa2:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    3aa6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    3aaa:	03db      	lsls	r3, r3, #15
    3aac:	d512      	bpl.n	3ad4 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3aae:	f3bf 8f5b 	dmb	ish
    3ab2:	4b28      	ldr	r3, [pc, #160]	; (3b54 <rtc_nrf_isr+0xe4>)
    3ab4:	e853 1f00 	ldrex	r1, [r3]
    3ab8:	f021 0001 	bic.w	r0, r1, #1
    3abc:	e843 0600 	strex	r6, r0, [r3]
    3ac0:	2e00      	cmp	r6, #0
    3ac2:	d1f7      	bne.n	3ab4 <rtc_nrf_isr+0x44>
    3ac4:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3ac8:	2900      	cmp	r1, #0
    3aca:	d136      	bne.n	3b3a <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3acc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    3ad0:	2b00      	cmp	r3, #0
    3ad2:	d132      	bne.n	3b3a <rtc_nrf_isr+0xca>
{
    3ad4:	2300      	movs	r3, #0
	__asm__ volatile(
    3ad6:	f382 8811 	msr	BASEPRI, r2
    3ada:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    3ade:	b34b      	cbz	r3, 3b34 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    3ae0:	f7ff fec0 	bl	3864 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    3ae4:	f04f 0320 	mov.w	r3, #32
    3ae8:	f3ef 8c11 	mrs	ip, BASEPRI
    3aec:	f383 8812 	msr	BASEPRI_MAX, r3
    3af0:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    3af4:	4b18      	ldr	r3, [pc, #96]	; (3b58 <rtc_nrf_isr+0xe8>)
    3af6:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    3afa:	42b0      	cmp	r0, r6
    3afc:	eb71 0207 	sbcs.w	r2, r1, r7
    3b00:	f04f 0200 	mov.w	r2, #0
    3b04:	d320      	bcc.n	3b48 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3b06:	f04f 38ff 	mov.w	r8, #4294967295
    3b0a:	f04f 39ff 	mov.w	r9, #4294967295
			user_context = cc_data[chan].user_context;
    3b0e:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    3b12:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    3b16:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    3b18:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3b1c:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    3b20:	f38c 8811 	msr	BASEPRI, ip
    3b24:	f3bf 8f6f 	isb	sy
		if (handler) {
    3b28:	b121      	cbz	r1, 3b34 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    3b2a:	9500      	str	r5, [sp, #0]
    3b2c:	4632      	mov	r2, r6
    3b2e:	463b      	mov	r3, r7
    3b30:	2000      	movs	r0, #0
    3b32:	4788      	blx	r1
}
    3b34:	b003      	add	sp, #12
    3b36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3b3a:	2300      	movs	r3, #0
    3b3c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    3b40:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    3b44:	2301      	movs	r3, #1
}
    3b46:	e7c6      	b.n	3ad6 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    3b48:	4611      	mov	r1, r2
    3b4a:	e7e9      	b.n	3b20 <rtc_nrf_isr+0xb0>
    3b4c:	40011000 	.word	0x40011000
    3b50:	20000908 	.word	0x20000908
    3b54:	20000900 	.word	0x20000900
    3b58:	200005d0 	.word	0x200005d0

00003b5c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3b5c:	1c43      	adds	r3, r0, #1
{
    3b5e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3b60:	d021      	beq.n	3ba6 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3b62:	2801      	cmp	r0, #1
    3b64:	dd21      	ble.n	3baa <sys_clock_set_timeout+0x4e>
    3b66:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3b6a:	da20      	bge.n	3bae <sys_clock_set_timeout+0x52>
    3b6c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    3b6e:	f7ff fe79 	bl	3864 <z_nrf_rtc_timer_read>
    3b72:	4b10      	ldr	r3, [pc, #64]	; (3bb4 <sys_clock_set_timeout+0x58>)
    3b74:	e9d3 1300 	ldrd	r1, r3, [r3]
    3b78:	1a40      	subs	r0, r0, r1
		ticks = 0;
    3b7a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    3b7e:	bf28      	it	cs
    3b80:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    3b82:	3001      	adds	r0, #1
    3b84:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    3b86:	480c      	ldr	r0, [pc, #48]	; (3bb8 <sys_clock_set_timeout+0x5c>)
    3b88:	4282      	cmp	r2, r0
    3b8a:	bf28      	it	cs
    3b8c:	4602      	movcs	r2, r0
    3b8e:	1852      	adds	r2, r2, r1
    3b90:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    3b94:	4909      	ldr	r1, [pc, #36]	; (3bbc <sys_clock_set_timeout+0x60>)
    3b96:	9001      	str	r0, [sp, #4]
    3b98:	9100      	str	r1, [sp, #0]
    3b9a:	f143 0300 	adc.w	r3, r3, #0
    3b9e:	f7ff fe83 	bl	38a8 <compare_set>
}
    3ba2:	b002      	add	sp, #8
    3ba4:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    3ba6:	4804      	ldr	r0, [pc, #16]	; (3bb8 <sys_clock_set_timeout+0x5c>)
    3ba8:	e7e0      	b.n	3b6c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    3baa:	2400      	movs	r4, #0
    3bac:	e7df      	b.n	3b6e <sys_clock_set_timeout+0x12>
    3bae:	4c02      	ldr	r4, [pc, #8]	; (3bb8 <sys_clock_set_timeout+0x5c>)
    3bb0:	e7dd      	b.n	3b6e <sys_clock_set_timeout+0x12>
    3bb2:	bf00      	nop
    3bb4:	200005e0 	.word	0x200005e0
    3bb8:	007fffff 	.word	0x007fffff
    3bbc:	00003791 	.word	0x00003791

00003bc0 <sys_clock_elapsed>:
{
    3bc0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    3bc2:	f7ff fe4f 	bl	3864 <z_nrf_rtc_timer_read>
    3bc6:	4b02      	ldr	r3, [pc, #8]	; (3bd0 <sys_clock_elapsed+0x10>)
    3bc8:	681b      	ldr	r3, [r3, #0]
}
    3bca:	1ac0      	subs	r0, r0, r3
    3bcc:	bd08      	pop	{r3, pc}
    3bce:	bf00      	nop
    3bd0:	200005e0 	.word	0x200005e0

00003bd4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    3bd4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    3bd6:	f7fd fed9 	bl	198c <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    3bda:	4b07      	ldr	r3, [pc, #28]	; (3bf8 <k_sys_fatal_error_handler+0x24>)
    3bdc:	9305      	str	r3, [sp, #20]
    3bde:	2302      	movs	r3, #2
    3be0:	9304      	str	r3, [sp, #16]
    3be2:	4806      	ldr	r0, [pc, #24]	; (3bfc <k_sys_fatal_error_handler+0x28>)
    3be4:	2300      	movs	r3, #0
    3be6:	aa04      	add	r2, sp, #16
    3be8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3bec:	f002 feb8 	bl	6960 <z_impl_z_log_msg2_static_create>
		sys_arch_reboot(0);
    3bf0:	2000      	movs	r0, #0
    3bf2:	f7ff f92f 	bl	2e54 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    3bf6:	bf00      	nop
    3bf8:	00007caa 	.word	0x00007caa
    3bfc:	00007460 	.word	0x00007460

00003c00 <update_rf_payload_format_esb_dpl>:

static void update_rf_payload_format_esb_dpl(uint32_t payload_length)
{
#if (CONFIG_ESB_MAX_PAYLOAD_LENGTH <= 32)
	/* Using 6 bits for length */
	NRF_RADIO->PCNF0 = (0 << RADIO_PCNF0_S0LEN_Pos) |
    3c00:	4906      	ldr	r1, [pc, #24]	; (3c1c <update_rf_payload_format_esb_dpl+0x1c>)
    3c02:	4b07      	ldr	r3, [pc, #28]	; (3c20 <update_rf_payload_format_esb_dpl+0x20>)
    3c04:	f8c1 3514 	str.w	r3, [r1, #1300]	; 0x514
			   (3 << RADIO_PCNF0_S1LEN_Pos);
#endif
	NRF_RADIO->PCNF1 =
		(RADIO_PCNF1_WHITEEN_Disabled << RADIO_PCNF1_WHITEEN_Pos) |
		(RADIO_PCNF1_ENDIAN_Big << RADIO_PCNF1_ENDIAN_Pos) |
		((esb_addr.addr_length - 1) << RADIO_PCNF1_BALEN_Pos) |
    3c08:	4b06      	ldr	r3, [pc, #24]	; (3c24 <update_rf_payload_format_esb_dpl+0x24>)
    3c0a:	7c5b      	ldrb	r3, [r3, #17]
    3c0c:	1e5a      	subs	r2, r3, #1
		(0 << RADIO_PCNF1_STATLEN_Pos) |
    3c0e:	4b06      	ldr	r3, [pc, #24]	; (3c28 <update_rf_payload_format_esb_dpl+0x28>)
    3c10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	NRF_RADIO->PCNF1 =
    3c14:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
		(CONFIG_ESB_MAX_PAYLOAD_LENGTH << RADIO_PCNF1_MAXLEN_Pos);
}
    3c18:	4770      	bx	lr
    3c1a:	bf00      	nop
    3c1c:	40001000 	.word	0x40001000
    3c20:	00030006 	.word	0x00030006
    3c24:	20000020 	.word	0x20000020
    3c28:	01000020 	.word	0x01000020

00003c2c <update_rf_payload_format_esb>:

static void update_rf_payload_format_esb(uint32_t payload_length)
{
	NRF_RADIO->PCNF0 = (1 << RADIO_PCNF0_S0LEN_Pos) |
    3c2c:	4a07      	ldr	r2, [pc, #28]	; (3c4c <update_rf_payload_format_esb+0x20>)
    3c2e:	4b08      	ldr	r3, [pc, #32]	; (3c50 <update_rf_payload_format_esb+0x24>)
    3c30:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			   (1 << RADIO_PCNF0_S1LEN_Pos);

	NRF_RADIO->PCNF1 =
		(RADIO_PCNF1_WHITEEN_Disabled << RADIO_PCNF1_WHITEEN_Pos) |
		(RADIO_PCNF1_ENDIAN_Big << RADIO_PCNF1_ENDIAN_Pos) |
		((esb_addr.addr_length - 1) << RADIO_PCNF1_BALEN_Pos) |
    3c34:	4b07      	ldr	r3, [pc, #28]	; (3c54 <update_rf_payload_format_esb+0x28>)
    3c36:	7c5b      	ldrb	r3, [r3, #17]
    3c38:	3b01      	subs	r3, #1
		(payload_length << RADIO_PCNF1_STATLEN_Pos) |
    3c3a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    3c3e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    3c42:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
	NRF_RADIO->PCNF1 =
    3c46:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
		(payload_length << RADIO_PCNF1_MAXLEN_Pos);
}
    3c4a:	4770      	bx	lr
    3c4c:	40001000 	.word	0x40001000
    3c50:	00010100 	.word	0x00010100
    3c54:	20000020 	.word	0x20000020

00003c58 <update_radio_bitrate>:
			     << RADIO_TXPOWER_TXPOWER_Pos;
}

static bool update_radio_bitrate(void)
{
	NRF_RADIO->MODE = esb_cfg.bitrate << RADIO_MODE_MODE_Pos;
    3c58:	4b0b      	ldr	r3, [pc, #44]	; (3c88 <update_radio_bitrate+0x30>)
    3c5a:	4a0c      	ldr	r2, [pc, #48]	; (3c8c <update_radio_bitrate+0x34>)
    3c5c:	7a1b      	ldrb	r3, [r3, #8]
    3c5e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	switch (esb_cfg.bitrate) {
    3c62:	2b04      	cmp	r3, #4
    3c64:	d80d      	bhi.n	3c82 <update_radio_bitrate+0x2a>
    3c66:	e8df f003 	tbb	[pc, r3]
    3c6a:	0308      	.short	0x0308
    3c6c:	080c      	.short	0x080c
    3c6e:	03          	.byte	0x03
    3c6f:	00          	.byte	0x00
	case ESB_BITRATE_2MBPS:
#if defined(CONFIG_SOC_SERIES_NRF52X) || defined(CONFIG_SOC_NRF5340_CPUNET)
	case ESB_BITRATE_2MBPS_BLE:
#endif
		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_2MBPS;
    3c70:	4b07      	ldr	r3, [pc, #28]	; (3c90 <update_radio_bitrate+0x38>)
    3c72:	22a0      	movs	r2, #160	; 0xa0
		break;

	case ESB_BITRATE_1MBPS:
		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_1MBPS;
    3c74:	601a      	str	r2, [r3, #0]
	default:
		/* Should not be reached */
		return false;
	}

	return true;
    3c76:	2001      	movs	r0, #1
		break;
    3c78:	4770      	bx	lr
		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_1MBPS;
    3c7a:	4b05      	ldr	r3, [pc, #20]	; (3c90 <update_radio_bitrate+0x38>)
    3c7c:	f44f 7296 	mov.w	r2, #300	; 0x12c
    3c80:	e7f8      	b.n	3c74 <update_radio_bitrate+0x1c>
	switch (esb_cfg.bitrate) {
    3c82:	2000      	movs	r0, #0
}
    3c84:	4770      	bx	lr
    3c86:	bf00      	nop
    3c88:	2000098c 	.word	0x2000098c
    3c8c:	40001000 	.word	0x40001000
    3c90:	20000a10 	.word	0x20000a10

00003c94 <reset_fifos>:
	return params_valid;
}

static void reset_fifos(void)
{
	tx_fifo.back = 0;
    3c94:	4a04      	ldr	r2, [pc, #16]	; (3ca8 <reset_fifos+0x14>)
    3c96:	2300      	movs	r3, #0
	tx_fifo.front = 0;
    3c98:	e9c2 3308 	strd	r3, r3, [r2, #32]
	tx_fifo.count = 0;
    3c9c:	6293      	str	r3, [r2, #40]	; 0x28

	rx_fifo.back = 0;
    3c9e:	4a03      	ldr	r2, [pc, #12]	; (3cac <reset_fifos+0x18>)
	rx_fifo.front = 0;
    3ca0:	e9c2 3308 	strd	r3, r3, [r2, #32]
	rx_fifo.count = 0;
    3ca4:	6293      	str	r3, [r2, #40]	; 0x28
}
    3ca6:	4770      	bx	lr
    3ca8:	200009e0 	.word	0x200009e0
    3cac:	200009b4 	.word	0x200009b4

00003cb0 <update_radio_addresses.part.0>:
static void update_radio_addresses(uint8_t update_mask)
    3cb0:	b510      	push	{r4, lr}
			bytewise_bit_swap(&esb_addr.pipe_prefixes[0]);
    3cb2:	4c07      	ldr	r4, [pc, #28]	; (3cd0 <update_radio_addresses.part.0+0x20>)
		NRF_RADIO->PREFIX0 =
    3cb4:	4907      	ldr	r1, [pc, #28]	; (3cd4 <update_radio_addresses.part.0+0x24>)
			bytewise_bit_swap(&esb_addr.pipe_prefixes[0]);
    3cb6:	f104 0008 	add.w	r0, r4, #8
    3cba:	f002 ffe8 	bl	6c8e <bytewise_bit_swap>
		NRF_RADIO->PREFIX0 =
    3cbe:	f8c1 0524 	str.w	r0, [r1, #1316]	; 0x524
			bytewise_bit_swap(&esb_addr.pipe_prefixes[4]);
    3cc2:	f104 000c 	add.w	r0, r4, #12
    3cc6:	f002 ffe2 	bl	6c8e <bytewise_bit_swap>
		NRF_RADIO->PREFIX1 =
    3cca:	f8c1 0528 	str.w	r0, [r1, #1320]	; 0x528
}
    3cce:	bd10      	pop	{r4, pc}
    3cd0:	20000020 	.word	0x20000020
    3cd4:	40001000 	.word	0x40001000

00003cd8 <RADIO_IRQHandler>:
	irq_unlock(key);
}

static void radio_irq_handler(void)
{
	if (NRF_RADIO->EVENTS_READY &&
    3cd8:	4b19      	ldr	r3, [pc, #100]	; (3d40 <RADIO_IRQHandler+0x68>)
			event_handler(&event);
		}
	}
}

ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    3cda:	4668      	mov	r0, sp
    3cdc:	f020 0107 	bic.w	r1, r0, #7
	if (NRF_RADIO->EVENTS_READY &&
    3ce0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    3ce4:	468d      	mov	sp, r1
    3ce6:	b501      	push	{r0, lr}
	if (NRF_RADIO->EVENTS_READY &&
    3ce8:	b14a      	cbz	r2, 3cfe <RADIO_IRQHandler+0x26>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_READY_Msk)) {
    3cea:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_READY &&
    3cee:	07d0      	lsls	r0, r2, #31
		NRF_RADIO->EVENTS_READY = 0;
    3cf0:	bf41      	itttt	mi
    3cf2:	2200      	movmi	r2, #0
    3cf4:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
		ESB_SYS_TIMER->TASKS_START;
    3cf8:	f503 4310 	addmi.w	r3, r3, #36864	; 0x9000
    3cfc:	681b      	ldrmi	r3, [r3, #0]
	if (NRF_RADIO->EVENTS_END &&
    3cfe:	4b10      	ldr	r3, [pc, #64]	; (3d40 <RADIO_IRQHandler+0x68>)
    3d00:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    3d04:	b132      	cbz	r2, 3d14 <RADIO_IRQHandler+0x3c>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_END_Msk)) {
    3d06:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_END &&
    3d0a:	0711      	lsls	r1, r2, #28
		NRF_RADIO->EVENTS_END = 0;
    3d0c:	bf44      	itt	mi
    3d0e:	2200      	movmi	r2, #0
    3d10:	f8c3 210c 	strmi.w	r2, [r3, #268]	; 0x10c
	if (NRF_RADIO->EVENTS_DISABLED &&
    3d14:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    3d18:	b152      	cbz	r2, 3d30 <RADIO_IRQHandler+0x58>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_DISABLED_Msk)) {
    3d1a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_DISABLED &&
    3d1e:	06d2      	lsls	r2, r2, #27
    3d20:	d506      	bpl.n	3d30 <RADIO_IRQHandler+0x58>
		NRF_RADIO->EVENTS_DISABLED = 0;
    3d22:	2200      	movs	r2, #0
    3d24:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		if (on_radio_disabled) {
    3d28:	4b06      	ldr	r3, [pc, #24]	; (3d44 <RADIO_IRQHandler+0x6c>)
    3d2a:	681b      	ldr	r3, [r3, #0]
    3d2c:	b103      	cbz	r3, 3d30 <RADIO_IRQHandler+0x58>
			on_radio_disabled();
    3d2e:	4798      	blx	r3
{
	radio_irq_handler();

	ISR_DIRECT_PM();
    3d30:	f7fe fb5c 	bl	23ec <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
    3d34:	f7fe fc3e 	bl	25b4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    3d38:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    3d3c:	4685      	mov	sp, r0
    3d3e:	4770      	bx	lr
    3d40:	40001000 	.word	0x40001000
    3d44:	200009ac 	.word	0x200009ac

00003d48 <SWI0_EGU0_IRQHandler>:

	return 1;
}


ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    3d48:	4668      	mov	r0, sp
    3d4a:	f020 0107 	bic.w	r1, r0, #7
    3d4e:	468d      	mov	sp, r1
    3d50:	b531      	push	{r0, r4, r5, lr}
	event.tx_attempts = last_tx_attempts;
    3d52:	4b1b      	ldr	r3, [pc, #108]	; (3dc0 <SWI0_EGU0_IRQHandler+0x78>)
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    3d54:	b082      	sub	sp, #8
	event.tx_attempts = last_tx_attempts;
    3d56:	681b      	ldr	r3, [r3, #0]
    3d58:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
    3d5a:	f04f 0320 	mov.w	r3, #32
    3d5e:	f3ef 8111 	mrs	r1, BASEPRI
    3d62:	f383 8812 	msr	BASEPRI_MAX, r3
    3d66:	f3bf 8f6f 	isb	sy
	*interrupts = interrupt_flags;
    3d6a:	4b16      	ldr	r3, [pc, #88]	; (3dc4 <SWI0_EGU0_IRQHandler+0x7c>)
	interrupt_flags = 0;
    3d6c:	2200      	movs	r2, #0
	*interrupts = interrupt_flags;
    3d6e:	681d      	ldr	r5, [r3, #0]
	interrupt_flags = 0;
    3d70:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    3d72:	f381 8811 	msr	BASEPRI, r1
    3d76:	f3bf 8f6f 	isb	sy
	if (event_handler != NULL) {
    3d7a:	4c13      	ldr	r4, [pc, #76]	; (3dc8 <SWI0_EGU0_IRQHandler+0x80>)
    3d7c:	6823      	ldr	r3, [r4, #0]
    3d7e:	b1ab      	cbz	r3, 3dac <SWI0_EGU0_IRQHandler+0x64>
		if (interrupts & INT_TX_SUCCESS_MSK) {
    3d80:	07e9      	lsls	r1, r5, #31
    3d82:	d503      	bpl.n	3d8c <SWI0_EGU0_IRQHandler+0x44>
			event.evt_id = ESB_EVENT_TX_SUCCESS;
    3d84:	f88d 2000 	strb.w	r2, [sp]
			event_handler(&event);
    3d88:	4668      	mov	r0, sp
    3d8a:	4798      	blx	r3
		if (interrupts & INT_TX_FAILED_MSK) {
    3d8c:	07aa      	lsls	r2, r5, #30
    3d8e:	d505      	bpl.n	3d9c <SWI0_EGU0_IRQHandler+0x54>
			event.evt_id = ESB_EVENT_TX_FAILED;
    3d90:	2301      	movs	r3, #1
    3d92:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    3d96:	4668      	mov	r0, sp
    3d98:	6823      	ldr	r3, [r4, #0]
    3d9a:	4798      	blx	r3
		if (interrupts & INT_RX_DATA_RECEIVED_MSK) {
    3d9c:	076b      	lsls	r3, r5, #29
    3d9e:	d505      	bpl.n	3dac <SWI0_EGU0_IRQHandler+0x64>
			event.evt_id = ESB_EVENT_RX_RECEIVED;
    3da0:	2302      	movs	r3, #2
    3da2:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    3da6:	4668      	mov	r0, sp
    3da8:	6823      	ldr	r3, [r4, #0]
    3daa:	4798      	blx	r3
{
	esb_evt_irq_handler();

	ISR_DIRECT_PM();
    3dac:	f7fe fb1e 	bl	23ec <_arch_isr_direct_pm>
    3db0:	f7fe fc00 	bl	25b4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    3db4:	b002      	add	sp, #8
    3db6:	e8bd 4031 	ldmia.w	sp!, {r0, r4, r5, lr}
    3dba:	4685      	mov	sp, r0
    3dbc:	4770      	bx	lr
    3dbe:	bf00      	nop
    3dc0:	200009a8 	.word	0x200009a8
    3dc4:	200009a4 	.word	0x200009a4
    3dc8:	200009a0 	.word	0x200009a0

00003dcc <esb_disable>:
}

void esb_disable(void)
{
	/*  Clear PPI */
	nrfx_gppi_channels_disable(ppi_all_channels_mask);
    3dcc:	4b12      	ldr	r3, [pc, #72]	; (3e18 <esb_disable+0x4c>)
	esb_state = ESB_STATE_IDLE;
	esb_initialized = false;

	reset_fifos();

	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    3dce:	4813      	ldr	r0, [pc, #76]	; (3e1c <esb_disable+0x50>)
	nrfx_gppi_channels_disable(ppi_all_channels_mask);
    3dd0:	681a      	ldr	r2, [r3, #0]
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
    3dd2:	4b13      	ldr	r3, [pc, #76]	; (3e20 <esb_disable+0x54>)
{
    3dd4:	b510      	push	{r4, lr}
    3dd6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	esb_state = ESB_STATE_IDLE;
    3dda:	4b12      	ldr	r3, [pc, #72]	; (3e24 <esb_disable+0x58>)
    3ddc:	2400      	movs	r4, #0
    3dde:	701c      	strb	r4, [r3, #0]
	esb_initialized = false;
    3de0:	4b11      	ldr	r3, [pc, #68]	; (3e28 <esb_disable+0x5c>)
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    3de2:	4621      	mov	r1, r4
	esb_initialized = false;
    3de4:	701c      	strb	r4, [r3, #0]
	reset_fifos();
    3de6:	f7ff ff55 	bl	3c94 <reset_fifos>
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    3dea:	2220      	movs	r2, #32
    3dec:	f002 fe34 	bl	6a58 <memset>
	memset(pids, 0, sizeof(pids));
    3df0:	2208      	movs	r2, #8
    3df2:	4621      	mov	r1, r4
    3df4:	480d      	ldr	r0, [pc, #52]	; (3e2c <esb_disable+0x60>)
    3df6:	f002 fe2f 	bl	6a58 <memset>

	/*  Disable the interrupts used by ESB */
	irq_disable(RADIO_IRQn);
    3dfa:	2001      	movs	r0, #1
    3dfc:	f7fe fabc 	bl	2378 <arch_irq_disable>
	irq_disable(ESB_SYS_TIMER_IRQn);
    3e00:	200a      	movs	r0, #10
    3e02:	f7fe fab9 	bl	2378 <arch_irq_disable>
	irq_disable(ESB_EVT_IRQ);
    3e06:	2014      	movs	r0, #20
    3e08:	f7fe fab6 	bl	2378 <arch_irq_disable>

	NRF_RADIO->SHORTS =
    3e0c:	4b08      	ldr	r3, [pc, #32]	; (3e30 <esb_disable+0x64>)
    3e0e:	2203      	movs	r2, #3
    3e10:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    RADIO_SHORTS_READY_START_Enabled << RADIO_SHORTS_READY_START_Pos |
	    RADIO_SHORTS_END_DISABLE_Enabled << RADIO_SHORTS_END_DISABLE_Pos;
}
    3e14:	bd10      	pop	{r4, pc}
    3e16:	bf00      	nop
    3e18:	200009b0 	.word	0x200009b0
    3e1c:	20000b06 	.word	0x20000b06
    3e20:	4001f000 	.word	0x4001f000
    3e24:	20000b63 	.word	0x20000b63
    3e28:	20000b62 	.word	0x20000b62
    3e2c:	20000b64 	.word	0x20000b64
    3e30:	40001000 	.word	0x40001000

00003e34 <esb_init>:
{
    3e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (config == NULL) {
    3e38:	4605      	mov	r5, r0
    3e3a:	2800      	cmp	r0, #0
    3e3c:	f000 80f3 	beq.w	4026 <esb_init+0x1f2>
	if (esb_initialized) {
    3e40:	4e7a      	ldr	r6, [pc, #488]	; (402c <esb_init+0x1f8>)
    3e42:	7833      	ldrb	r3, [r6, #0]
    3e44:	b10b      	cbz	r3, 3e4a <esb_init+0x16>
		esb_disable();
    3e46:	f7ff ffc1 	bl	3dcc <esb_disable>
	event_handler = config->event_handler;
    3e4a:	4b79      	ldr	r3, [pc, #484]	; (4030 <esb_init+0x1fc>)
	memcpy(&esb_cfg, config, sizeof(esb_cfg));
    3e4c:	4c79      	ldr	r4, [pc, #484]	; (4034 <esb_init+0x200>)
	event_handler = config->event_handler;
    3e4e:	686a      	ldr	r2, [r5, #4]
    3e50:	601a      	str	r2, [r3, #0]
	memcpy(&esb_cfg, config, sizeof(esb_cfg));
    3e52:	4629      	mov	r1, r5
    3e54:	2214      	movs	r2, #20
    3e56:	4620      	mov	r0, r4
    3e58:	f002 fdf3 	bl	6a42 <memcpy>
	interrupt_flags = 0;
    3e5c:	2500      	movs	r5, #0
    3e5e:	4b76      	ldr	r3, [pc, #472]	; (4038 <esb_init+0x204>)
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    3e60:	4876      	ldr	r0, [pc, #472]	; (403c <esb_init+0x208>)
	interrupt_flags = 0;
    3e62:	601d      	str	r5, [r3, #0]
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    3e64:	2220      	movs	r2, #32
    3e66:	4629      	mov	r1, r5
    3e68:	f002 fdf6 	bl	6a58 <memset>
	memset(pids, 0, sizeof(pids));
    3e6c:	2208      	movs	r2, #8
    3e6e:	4874      	ldr	r0, [pc, #464]	; (4040 <esb_init+0x20c>)
    3e70:	4629      	mov	r1, r5
    3e72:	f002 fdf1 	bl	6a58 <memset>
	NRF_RADIO->TXPOWER = esb_cfg.tx_output_power
    3e76:	4b73      	ldr	r3, [pc, #460]	; (4044 <esb_init+0x210>)
			     << RADIO_TXPOWER_TXPOWER_Pos;
    3e78:	7aa2      	ldrb	r2, [r4, #10]
	NRF_RADIO->TXPOWER = esb_cfg.tx_output_power
    3e7a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
	params_valid &= update_radio_bitrate();
    3e7e:	f7ff feeb 	bl	3c58 <update_radio_bitrate>
	switch (esb_cfg.protocol) {
    3e82:	7823      	ldrb	r3, [r4, #0]
    3e84:	4a70      	ldr	r2, [pc, #448]	; (4048 <esb_init+0x214>)
    3e86:	2b00      	cmp	r3, #0
    3e88:	f000 80bd 	beq.w	4006 <esb_init+0x1d2>
    3e8c:	2b01      	cmp	r3, #1
    3e8e:	d101      	bne.n	3e94 <esb_init+0x60>
		update_rf_payload_format = update_rf_payload_format_esb_dpl;
    3e90:	4b6e      	ldr	r3, [pc, #440]	; (404c <esb_init+0x218>)
		update_rf_payload_format = update_rf_payload_format_esb;
    3e92:	6013      	str	r3, [r2, #0]
	switch (esb_cfg.crc) {
    3e94:	7a61      	ldrb	r1, [r4, #9]
    3e96:	4b6b      	ldr	r3, [pc, #428]	; (4044 <esb_init+0x210>)
    3e98:	2901      	cmp	r1, #1
    3e9a:	f000 80be 	beq.w	401a <esb_init+0x1e6>
    3e9e:	2902      	cmp	r1, #2
    3ea0:	f000 80b3 	beq.w	400a <esb_init+0x1d6>
    3ea4:	b949      	cbnz	r1, 3eba <esb_init+0x86>
	NRF_RADIO->CRCINIT = 0xFFFFUL;  /* Initial value */
    3ea6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    3eaa:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
	NRF_RADIO->CRCPOLY = 0x11021UL; /* CRC poly: x^16+x^12^x^5+1 */
    3eae:	4968      	ldr	r1, [pc, #416]	; (4050 <esb_init+0x21c>)
    3eb0:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
	NRF_RADIO->CRCCNF = ESB_CRC_16BIT << RADIO_CRCCNF_LEN_Pos;
    3eb4:	2102      	movs	r1, #2
    3eb6:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
	update_rf_payload_format(esb_cfg.payload_length);
    3eba:	6813      	ldr	r3, [r2, #0]
    3ebc:	7c60      	ldrb	r0, [r4, #17]
    3ebe:	4798      	blx	r3
	NRF_RADIO->BASE0 = 0xE7E7E7E7;
    3ec0:	4b60      	ldr	r3, [pc, #384]	; (4044 <esb_init+0x210>)
    3ec2:	4964      	ldr	r1, [pc, #400]	; (4054 <esb_init+0x220>)
    3ec4:	4864      	ldr	r0, [pc, #400]	; (4058 <esb_init+0x224>)
    3ec6:	f04f 32e7 	mov.w	r2, #3890735079	; 0xe7e7e7e7
    3eca:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
	NRF_RADIO->BASE1 = 0x43434343;
    3ece:	f04f 3243 	mov.w	r2, #1128481603	; 0x43434343
    3ed2:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
	NRF_RADIO->PREFIX0 = 0x23C343E7;
    3ed6:	4a61      	ldr	r2, [pc, #388]	; (405c <esb_init+0x228>)
    3ed8:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	NRF_RADIO->PREFIX1 = 0x13E363A3;
    3edc:	4a60      	ldr	r2, [pc, #384]	; (4060 <esb_init+0x22c>)
    3ede:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	reset_fifos();
    3ee2:	f7ff fed7 	bl	3c94 <reset_fifos>
    3ee6:	460a      	mov	r2, r1
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    3ee8:	2300      	movs	r3, #0
    3eea:	3301      	adds	r3, #1
    3eec:	2b08      	cmp	r3, #8
		tx_fifo.payload[i] = &tx_payload[i];
    3eee:	f840 2b04 	str.w	r2, [r0], #4
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    3ef2:	f102 0225 	add.w	r2, r2, #37	; 0x25
    3ef6:	d1f8      	bne.n	3eea <esb_init+0xb6>
    3ef8:	4a5a      	ldr	r2, [pc, #360]	; (4064 <esb_init+0x230>)
    3efa:	485b      	ldr	r0, [pc, #364]	; (4068 <esb_init+0x234>)
	for (size_t i = 0; i < CONFIG_ESB_RX_FIFO_SIZE; i++) {
    3efc:	2300      	movs	r3, #0
    3efe:	3301      	adds	r3, #1
    3f00:	2b08      	cmp	r3, #8
		rx_fifo.payload[i] = &rx_payload[i];
    3f02:	f840 2b04 	str.w	r2, [r0], #4
	for (size_t i = 0; i < CONFIG_ESB_RX_FIFO_SIZE; i++) {
    3f06:	f102 0225 	add.w	r2, r2, #37	; 0x25
    3f0a:	d1f8      	bne.n	3efe <esb_init+0xca>
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    3f0c:	2200      	movs	r2, #0
    3f0e:	4b57      	ldr	r3, [pc, #348]	; (406c <esb_init+0x238>)
		ack_pl_wrap[i].in_use = false;
    3f10:	4614      	mov	r4, r2
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    3f12:	3201      	adds	r2, #1
    3f14:	2a08      	cmp	r2, #8
		ack_pl_wrap[i].p_payload = &tx_payload[i];
    3f16:	6019      	str	r1, [r3, #0]
		ack_pl_wrap[i].in_use = false;
    3f18:	711c      	strb	r4, [r3, #4]
		ack_pl_wrap[i].p_next = 0;
    3f1a:	609c      	str	r4, [r3, #8]
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    3f1c:	f101 0125 	add.w	r1, r1, #37	; 0x25
    3f20:	f103 030c 	add.w	r3, r3, #12
    3f24:	d1f5      	bne.n	3f12 <esb_init+0xde>
		ack_pl_wrap_pipe[i] = 0;
    3f26:	4b52      	ldr	r3, [pc, #328]	; (4070 <esb_init+0x23c>)
	ESB_SYS_TIMER->PRESCALER = 4;
    3f28:	4d52      	ldr	r5, [pc, #328]	; (4074 <esb_init+0x240>)
	nrfx_ppi_channel_alloc(&ppi_ch_radio_ready_timer_start);
    3f2a:	f8df a14c 	ldr.w	sl, [pc, #332]	; 4078 <esb_init+0x244>
	nrfx_ppi_channel_alloc(&ppi_ch_radio_address_timer_stop);
    3f2e:	f8df 914c 	ldr.w	r9, [pc, #332]	; 407c <esb_init+0x248>
	nrfx_ppi_channel_alloc(&ppi_ch_timer_compare0_radio_disable);
    3f32:	f8df 814c 	ldr.w	r8, [pc, #332]	; 4080 <esb_init+0x24c>
	nrfx_ppi_channel_alloc(&ppi_ch_timer_compare1_radio_txen);
    3f36:	4f53      	ldr	r7, [pc, #332]	; (4084 <esb_init+0x250>)
		ack_pl_wrap_pipe[i] = 0;
    3f38:	e9c3 4400 	strd	r4, r4, [r3]
    3f3c:	e9c3 4402 	strd	r4, r4, [r3, #8]
    3f40:	e9c3 4404 	strd	r4, r4, [r3, #16]
    3f44:	e9c3 4406 	strd	r4, r4, [r3, #24]
	ESB_SYS_TIMER->PRESCALER = 4;
    3f48:	2304      	movs	r3, #4
    3f4a:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	ESB_SYS_TIMER->SHORTS = TIMER_SHORTS_COMPARE1_CLEAR_Msk |
    3f4e:	f240 2302 	movw	r3, #514	; 0x202
	ESB_SYS_TIMER->BITMODE = TIMER_BITMODE_BITMODE_16Bit;
    3f52:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	nrfx_ppi_channel_alloc(&ppi_ch_radio_ready_timer_start);
    3f56:	4650      	mov	r0, sl
	ESB_SYS_TIMER->SHORTS = TIMER_SHORTS_COMPARE1_CLEAR_Msk |
    3f58:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
	nrfx_ppi_channel_alloc(&ppi_ch_radio_ready_timer_start);
    3f5c:	f000 fdf4 	bl	4b48 <nrfx_ppi_channel_alloc>
	nrfx_ppi_channel_alloc(&ppi_ch_radio_address_timer_stop);
    3f60:	4648      	mov	r0, r9
    3f62:	f000 fdf1 	bl	4b48 <nrfx_ppi_channel_alloc>
	nrfx_ppi_channel_alloc(&ppi_ch_timer_compare0_radio_disable);
    3f66:	4640      	mov	r0, r8
    3f68:	f000 fdee 	bl	4b48 <nrfx_ppi_channel_alloc>
	nrfx_ppi_channel_alloc(&ppi_ch_timer_compare1_radio_txen);
    3f6c:	4638      	mov	r0, r7
    3f6e:	f000 fdeb 	bl	4b48 <nrfx_ppi_channel_alloc>
	nrfx_ppi_channel_assign(ppi_ch_radio_ready_timer_start,
    3f72:	462a      	mov	r2, r5
    3f74:	4944      	ldr	r1, [pc, #272]	; (4088 <esb_init+0x254>)
    3f76:	f89a 0000 	ldrb.w	r0, [sl]
    3f7a:	f000 fdeb 	bl	4b54 <nrfx_ppi_channel_assign>
	nrfx_ppi_channel_assign(ppi_ch_radio_address_timer_stop,
    3f7e:	4a43      	ldr	r2, [pc, #268]	; (408c <esb_init+0x258>)
    3f80:	4943      	ldr	r1, [pc, #268]	; (4090 <esb_init+0x25c>)
    3f82:	f899 0000 	ldrb.w	r0, [r9]
    3f86:	f000 fde5 	bl	4b54 <nrfx_ppi_channel_assign>
	nrfx_ppi_channel_assign(ppi_ch_timer_compare0_radio_disable,
    3f8a:	4a42      	ldr	r2, [pc, #264]	; (4094 <esb_init+0x260>)
    3f8c:	4942      	ldr	r1, [pc, #264]	; (4098 <esb_init+0x264>)
    3f8e:	f898 0000 	ldrb.w	r0, [r8]
    3f92:	f000 fddf 	bl	4b54 <nrfx_ppi_channel_assign>
	nrfx_ppi_channel_assign(ppi_ch_timer_compare1_radio_txen,
    3f96:	4a2b      	ldr	r2, [pc, #172]	; (4044 <esb_init+0x210>)
    3f98:	4940      	ldr	r1, [pc, #256]	; (409c <esb_init+0x268>)
    3f9a:	7838      	ldrb	r0, [r7, #0]
    3f9c:	f000 fdda 	bl	4b54 <nrfx_ppi_channel_assign>
	ppi_all_channels_mask = (1 << ppi_ch_radio_ready_timer_start) | (1 << ppi_ch_radio_address_timer_stop) |
    3fa0:	f89a 3000 	ldrb.w	r3, [sl]
    3fa4:	f899 2000 	ldrb.w	r2, [r9]
    3fa8:	2501      	movs	r5, #1
    3faa:	fa05 f202 	lsl.w	r2, r5, r2
    3fae:	fa05 f303 	lsl.w	r3, r5, r3
    3fb2:	4313      	orrs	r3, r2
							(1 << ppi_ch_timer_compare0_radio_disable) | (1 << ppi_ch_timer_compare1_radio_txen);
    3fb4:	f898 2000 	ldrb.w	r2, [r8]
    3fb8:	fa05 f202 	lsl.w	r2, r5, r2
	ppi_all_channels_mask = (1 << ppi_ch_radio_ready_timer_start) | (1 << ppi_ch_radio_address_timer_stop) |
    3fbc:	4313      	orrs	r3, r2
							(1 << ppi_ch_timer_compare0_radio_disable) | (1 << ppi_ch_timer_compare1_radio_txen);
    3fbe:	783a      	ldrb	r2, [r7, #0]
    3fc0:	fa05 f202 	lsl.w	r2, r5, r2
    3fc4:	4313      	orrs	r3, r2
	ppi_all_channels_mask = (1 << ppi_ch_radio_ready_timer_start) | (1 << ppi_ch_radio_address_timer_stop) |
    3fc6:	4a36      	ldr	r2, [pc, #216]	; (40a0 <esb_init+0x26c>)
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_ESB_RADIO_IRQ_PRIORITY,
    3fc8:	4629      	mov	r1, r5
	ppi_all_channels_mask = (1 << ppi_ch_radio_ready_timer_start) | (1 << ppi_ch_radio_address_timer_stop) |
    3fca:	6013      	str	r3, [r2, #0]
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_ESB_RADIO_IRQ_PRIORITY,
    3fcc:	4628      	mov	r0, r5
    3fce:	2200      	movs	r2, #0
    3fd0:	f7fe f9f4 	bl	23bc <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(ESB_EVT_IRQ, CONFIG_ESB_EVENT_IRQ_PRIORITY,
    3fd4:	2200      	movs	r2, #0
    3fd6:	2102      	movs	r1, #2
    3fd8:	2014      	movs	r0, #20
    3fda:	f7fe f9ef 	bl	23bc <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(ESB_SYS_TIMER_IRQn, CONFIG_ESB_EVENT_IRQ_PRIORITY,
    3fde:	2200      	movs	r2, #0
    3fe0:	2102      	movs	r1, #2
    3fe2:	200a      	movs	r0, #10
    3fe4:	f7fe f9ea 	bl	23bc <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
    3fe8:	4628      	mov	r0, r5
    3fea:	f7fe f9b5 	bl	2358 <arch_irq_enable>
	irq_enable(ESB_EVT_IRQ);
    3fee:	2014      	movs	r0, #20
    3ff0:	f7fe f9b2 	bl	2358 <arch_irq_enable>
	irq_enable(ESB_SYS_TIMER_IRQn);
    3ff4:	200a      	movs	r0, #10
    3ff6:	f7fe f9af 	bl	2358 <arch_irq_enable>
	esb_state = ESB_STATE_IDLE;
    3ffa:	4b2a      	ldr	r3, [pc, #168]	; (40a4 <esb_init+0x270>)
	esb_initialized = true;
    3ffc:	7035      	strb	r5, [r6, #0]
	esb_state = ESB_STATE_IDLE;
    3ffe:	701c      	strb	r4, [r3, #0]
	return 0;
    4000:	2000      	movs	r0, #0
}
    4002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		update_rf_payload_format = update_rf_payload_format_esb;
    4006:	4b28      	ldr	r3, [pc, #160]	; (40a8 <esb_init+0x274>)
    4008:	e743      	b.n	3e92 <esb_init+0x5e>
		NRF_RADIO->CRCINIT = 0xFFFFUL;  /* Initial value */
    400a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    400e:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
		NRF_RADIO->CRCPOLY = 0x11021UL; /* CRC poly: x^16+x^12^x^5+1 */
    4012:	490f      	ldr	r1, [pc, #60]	; (4050 <esb_init+0x21c>)
		NRF_RADIO->CRCPOLY = 0x107UL; /* CRC poly: x^8+x^2^x^1+1 */
    4014:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
		break;
    4018:	e745      	b.n	3ea6 <esb_init+0x72>
		NRF_RADIO->CRCINIT = 0xFFUL;  /* Initial value */
    401a:	21ff      	movs	r1, #255	; 0xff
    401c:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
		NRF_RADIO->CRCPOLY = 0x107UL; /* CRC poly: x^8+x^2^x^1+1 */
    4020:	f240 1107 	movw	r1, #263	; 0x107
    4024:	e7f6      	b.n	4014 <esb_init+0x1e0>
		return -EINVAL;
    4026:	f06f 0015 	mvn.w	r0, #21
    402a:	e7ea      	b.n	4002 <esb_init+0x1ce>
    402c:	20000b62 	.word	0x20000b62
    4030:	200009a0 	.word	0x200009a0
    4034:	2000098c 	.word	0x2000098c
    4038:	200009a4 	.word	0x200009a4
    403c:	20000b06 	.word	0x20000b06
    4040:	20000b64 	.word	0x20000b64
    4044:	40001000 	.word	0x40001000
    4048:	20000a0c 	.word	0x20000a0c
    404c:	00003c01 	.word	0x00003c01
    4050:	00011021 	.word	0x00011021
    4054:	20000c98 	.word	0x20000c98
    4058:	200009e0 	.word	0x200009e0
    405c:	23c343e7 	.word	0x23c343e7
    4060:	13e363a3 	.word	0x13e363a3
    4064:	20000b70 	.word	0x20000b70
    4068:	200009b4 	.word	0x200009b4
    406c:	2000090c 	.word	0x2000090c
    4070:	2000096c 	.word	0x2000096c
    4074:	4000a000 	.word	0x4000a000
    4078:	20000b6d 	.word	0x20000b6d
    407c:	20000b6c 	.word	0x20000b6c
    4080:	20000b6e 	.word	0x20000b6e
    4084:	20000b6f 	.word	0x20000b6f
    4088:	40001100 	.word	0x40001100
    408c:	4000a010 	.word	0x4000a010
    4090:	40001104 	.word	0x40001104
    4094:	40001010 	.word	0x40001010
    4098:	4000a140 	.word	0x4000a140
    409c:	4000a144 	.word	0x4000a144
    40a0:	200009b0 	.word	0x200009b0
    40a4:	20000b63 	.word	0x20000b63
    40a8:	00003c2d 	.word	0x00003c2d

000040ac <esb_read_rx_payload>:

	return 0;
}

int esb_read_rx_payload(struct esb_payload *payload)
{
    40ac:	b538      	push	{r3, r4, r5, lr}
	if (!esb_initialized) {
    40ae:	4b1c      	ldr	r3, [pc, #112]	; (4120 <esb_read_rx_payload+0x74>)
    40b0:	781b      	ldrb	r3, [r3, #0]
    40b2:	b363      	cbz	r3, 410e <esb_read_rx_payload+0x62>
		return -EACCES;
	}
	if (payload == NULL) {
    40b4:	b370      	cbz	r0, 4114 <esb_read_rx_payload+0x68>
		return -EINVAL;
	}

	if (rx_fifo.count == 0) {
    40b6:	4c1b      	ldr	r4, [pc, #108]	; (4124 <esb_read_rx_payload+0x78>)
    40b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    40ba:	b373      	cbz	r3, 411a <esb_read_rx_payload+0x6e>
	__asm__ volatile(
    40bc:	f04f 0320 	mov.w	r3, #32
    40c0:	f3ef 8511 	mrs	r5, BASEPRI
    40c4:	f383 8812 	msr	BASEPRI_MAX, r3
    40c8:	f3bf 8f6f 	isb	sy
		return -ENODATA;
	}

	uint32_t key = irq_lock();

	payload->length = rx_fifo.payload[rx_fifo.front]->length;
    40cc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    40ce:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    40d2:	780a      	ldrb	r2, [r1, #0]
    40d4:	7002      	strb	r2, [r0, #0]
	payload->pipe = rx_fifo.payload[rx_fifo.front]->pipe;
    40d6:	784b      	ldrb	r3, [r1, #1]
    40d8:	7043      	strb	r3, [r0, #1]
	payload->rssi = rx_fifo.payload[rx_fifo.front]->rssi;
    40da:	f991 3002 	ldrsb.w	r3, [r1, #2]
    40de:	7083      	strb	r3, [r0, #2]
	payload->pid = rx_fifo.payload[rx_fifo.front]->pid;
    40e0:	790b      	ldrb	r3, [r1, #4]
    40e2:	7103      	strb	r3, [r0, #4]
	payload->noack = rx_fifo.payload[rx_fifo.front]->noack;
    40e4:	78cb      	ldrb	r3, [r1, #3]
    40e6:	70c3      	strb	r3, [r0, #3]
	memcpy(payload->data, rx_fifo.payload[rx_fifo.front]->data,
    40e8:	3105      	adds	r1, #5
    40ea:	3005      	adds	r0, #5
    40ec:	f002 fca9 	bl	6a42 <memcpy>
	       payload->length);

	if (++rx_fifo.front >= CONFIG_ESB_RX_FIFO_SIZE) {
    40f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    40f2:	3301      	adds	r3, #1
    40f4:	2b07      	cmp	r3, #7
		rx_fifo.front = 0;
    40f6:	bf88      	it	hi
    40f8:	2300      	movhi	r3, #0
    40fa:	6263      	str	r3, [r4, #36]	; 0x24
	}

	rx_fifo.count--;
    40fc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    40fe:	3b01      	subs	r3, #1
    4100:	62a3      	str	r3, [r4, #40]	; 0x28
	__asm__ volatile(
    4102:	f385 8811 	msr	BASEPRI, r5
    4106:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	return 0;
    410a:	2000      	movs	r0, #0
}
    410c:	bd38      	pop	{r3, r4, r5, pc}
		return -EACCES;
    410e:	f06f 000c 	mvn.w	r0, #12
    4112:	e7fb      	b.n	410c <esb_read_rx_payload+0x60>
		return -EINVAL;
    4114:	f06f 0015 	mvn.w	r0, #21
    4118:	e7f8      	b.n	410c <esb_read_rx_payload+0x60>
		return -ENODATA;
    411a:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    411e:	e7f5      	b.n	410c <esb_read_rx_payload+0x60>
    4120:	20000b62 	.word	0x20000b62
    4124:	200009b4 	.word	0x200009b4

00004128 <esb_set_base_address_0>:

	return 0;
}

int esb_set_base_address_0(const uint8_t *addr)
{
    4128:	b510      	push	{r4, lr}
	if (esb_state != ESB_STATE_IDLE) {
    412a:	4b0d      	ldr	r3, [pc, #52]	; (4160 <esb_set_base_address_0+0x38>)
    412c:	781b      	ldrb	r3, [r3, #0]
{
    412e:	4601      	mov	r1, r0
	if (esb_state != ESB_STATE_IDLE) {
    4130:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    4134:	b96b      	cbnz	r3, 4152 <esb_set_base_address_0+0x2a>
		return -EBUSY;
	}
	if (addr == NULL) {
    4136:	b178      	cbz	r0, 4158 <esb_set_base_address_0+0x30>
		return -EINVAL;
	}

	memcpy(esb_addr.base_addr_p0, addr, sizeof(esb_addr.base_addr_p0));
    4138:	2204      	movs	r2, #4
    413a:	480a      	ldr	r0, [pc, #40]	; (4164 <esb_set_base_address_0+0x3c>)
    413c:	f002 fc81 	bl	6a42 <memcpy>
	return __REV(bytewise_bit_swap(addr));
    4140:	4808      	ldr	r0, [pc, #32]	; (4164 <esb_set_base_address_0+0x3c>)
    4142:	f002 fda4 	bl	6c8e <bytewise_bit_swap>
		NRF_RADIO->BASE0 = addr_conv(esb_addr.base_addr_p0);
    4146:	4b08      	ldr	r3, [pc, #32]	; (4168 <esb_set_base_address_0+0x40>)
  return __builtin_bswap32(value);
    4148:	ba00      	rev	r0, r0
    414a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c

	update_radio_addresses(ADDR_UPDATE_MASK_BASE0);

	return 0;
    414e:	4620      	mov	r0, r4
}
    4150:	bd10      	pop	{r4, pc}
		return -EBUSY;
    4152:	f06f 000f 	mvn.w	r0, #15
    4156:	e7fb      	b.n	4150 <esb_set_base_address_0+0x28>
		return -EINVAL;
    4158:	f06f 0015 	mvn.w	r0, #21
    415c:	e7f8      	b.n	4150 <esb_set_base_address_0+0x28>
    415e:	bf00      	nop
    4160:	20000b63 	.word	0x20000b63
    4164:	20000020 	.word	0x20000020
    4168:	40001000 	.word	0x40001000

0000416c <esb_set_base_address_1>:

int esb_set_base_address_1(const uint8_t *addr)
{
    416c:	b510      	push	{r4, lr}
	if (esb_state != ESB_STATE_IDLE) {
    416e:	4b0d      	ldr	r3, [pc, #52]	; (41a4 <esb_set_base_address_1+0x38>)
    4170:	781b      	ldrb	r3, [r3, #0]
{
    4172:	4601      	mov	r1, r0
	if (esb_state != ESB_STATE_IDLE) {
    4174:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    4178:	b96b      	cbnz	r3, 4196 <esb_set_base_address_1+0x2a>
		return -EBUSY;
	}
	if (addr == NULL) {
    417a:	b178      	cbz	r0, 419c <esb_set_base_address_1+0x30>
		return -EINVAL;
	}

	memcpy(esb_addr.base_addr_p1, addr, sizeof(esb_addr.base_addr_p1));
    417c:	2204      	movs	r2, #4
    417e:	480a      	ldr	r0, [pc, #40]	; (41a8 <esb_set_base_address_1+0x3c>)
    4180:	f002 fc5f 	bl	6a42 <memcpy>
	return __REV(bytewise_bit_swap(addr));
    4184:	4808      	ldr	r0, [pc, #32]	; (41a8 <esb_set_base_address_1+0x3c>)
    4186:	f002 fd82 	bl	6c8e <bytewise_bit_swap>
		NRF_RADIO->BASE1 = addr_conv(esb_addr.base_addr_p1);
    418a:	4b08      	ldr	r3, [pc, #32]	; (41ac <esb_set_base_address_1+0x40>)
    418c:	ba00      	rev	r0, r0
    418e:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520

	update_radio_addresses(ADDR_UPDATE_MASK_BASE1);

	return 0;
    4192:	4620      	mov	r0, r4
}
    4194:	bd10      	pop	{r4, pc}
		return -EBUSY;
    4196:	f06f 000f 	mvn.w	r0, #15
    419a:	e7fb      	b.n	4194 <esb_set_base_address_1+0x28>
		return -EINVAL;
    419c:	f06f 0015 	mvn.w	r0, #21
    41a0:	e7f8      	b.n	4194 <esb_set_base_address_1+0x28>
    41a2:	bf00      	nop
    41a4:	20000b63 	.word	0x20000b63
    41a8:	20000024 	.word	0x20000024
    41ac:	40001000 	.word	0x40001000

000041b0 <esb_set_prefixes>:

int esb_set_prefixes(const uint8_t *prefixes, uint8_t num_pipes)
{
    41b0:	b570      	push	{r4, r5, r6, lr}
	if (esb_state != ESB_STATE_IDLE) {
    41b2:	4b10      	ldr	r3, [pc, #64]	; (41f4 <esb_set_prefixes+0x44>)
    41b4:	781b      	ldrb	r3, [r3, #0]
{
    41b6:	460c      	mov	r4, r1
	if (esb_state != ESB_STATE_IDLE) {
    41b8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    41bc:	b9a3      	cbnz	r3, 41e8 <esb_set_prefixes+0x38>
		return -EBUSY;
	}
	if (prefixes == NULL) {
    41be:	b1b0      	cbz	r0, 41ee <esb_set_prefixes+0x3e>
		return -EINVAL;
	}
	if (!(num_pipes <= CONFIG_ESB_PIPE_COUNT)) {
    41c0:	2908      	cmp	r1, #8
    41c2:	d814      	bhi.n	41ee <esb_set_prefixes+0x3e>
		return -EINVAL;
	}

	memcpy(esb_addr.pipe_prefixes, prefixes, num_pipes);
    41c4:	4e0c      	ldr	r6, [pc, #48]	; (41f8 <esb_set_prefixes+0x48>)
    41c6:	460a      	mov	r2, r1
    41c8:	4601      	mov	r1, r0
    41ca:	f106 0008 	add.w	r0, r6, #8
    41ce:	f002 fc38 	bl	6a42 <memcpy>
	esb_addr.num_pipes = num_pipes;
    41d2:	7434      	strb	r4, [r6, #16]
	esb_addr.rx_pipes_enabled = BIT_MASK_UINT_8(num_pipes);
    41d4:	22ff      	movs	r2, #255	; 0xff
    41d6:	f1c4 0408 	rsb	r4, r4, #8
    41da:	fa42 f404 	asr.w	r4, r2, r4
    41de:	74b4      	strb	r4, [r6, #18]
	if ((update_mask & ADDR_UPDATE_MASK_PREFIX) != 0) {
    41e0:	f7ff fd66 	bl	3cb0 <update_radio_addresses.part.0>

	update_radio_addresses(ADDR_UPDATE_MASK_PREFIX);

	return 0;
    41e4:	4628      	mov	r0, r5
}
    41e6:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
    41e8:	f06f 000f 	mvn.w	r0, #15
    41ec:	e7fb      	b.n	41e6 <esb_set_prefixes+0x36>
		return -EINVAL;
    41ee:	f06f 0015 	mvn.w	r0, #21
    41f2:	e7f8      	b.n	41e6 <esb_set_prefixes+0x36>
    41f4:	20000b63 	.word	0x20000b63
    41f8:	20000020 	.word	0x20000020

000041fc <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    41fc:	4a02      	ldr	r2, [pc, #8]	; (4208 <nvmc_wait+0xc>)
    41fe:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    4202:	2b00      	cmp	r3, #0
    4204:	d0fb      	beq.n	41fe <nvmc_wait+0x2>
}
    4206:	4770      	bx	lr
    4208:	4001e000 	.word	0x4001e000

0000420c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    420c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    420e:	f002 fd5a 	bl	6cc6 <nrf52_errata_136>
    4212:	b140      	cbz	r0, 4226 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    4214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4218:	2200      	movs	r2, #0
    421a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    421e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    4222:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    4226:	f002 fd4e 	bl	6cc6 <nrf52_errata_136>
    422a:	2800      	cmp	r0, #0
    422c:	d046      	beq.n	42bc <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    422e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    4232:	4b4c      	ldr	r3, [pc, #304]	; (4364 <SystemInit+0x158>)
    4234:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    4238:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    423c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    4240:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    4244:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    4248:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    424c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    4250:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    4254:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    4258:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    425c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    4260:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    4264:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    4268:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    426c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    4270:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    4274:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    4278:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    427c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    4280:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    4284:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    4288:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    428c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    4290:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    4294:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    4298:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    429c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    42a0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    42a4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    42a8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    42ac:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    42b0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    42b4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    42b8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    42bc:	f002 fd03 	bl	6cc6 <nrf52_errata_136>
    42c0:	b148      	cbz	r0, 42d6 <SystemInit+0xca>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    42c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    42c6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    42ca:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    42cc:	bf44      	itt	mi
    42ce:	f06f 0201 	mvnmi.w	r2, #1
    42d2:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    42d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)
            if (var1 == 0x10)
    42da:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    42de:	2a10      	cmp	r2, #16
    42e0:	d10e      	bne.n	4300 <SystemInit+0xf4>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    42e2:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    42e6:	2b03      	cmp	r3, #3
    42e8:	d802      	bhi.n	42f0 <SystemInit+0xe4>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    42ea:	4a1f      	ldr	r2, [pc, #124]	; (4368 <SystemInit+0x15c>)
    42ec:	5cd3      	ldrb	r3, [r2, r3]
    42ee:	b13b      	cbz	r3, 4300 <SystemInit+0xf4>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    42f0:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    42f4:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    42f8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    42fc:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4300:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    4304:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    4308:	2a00      	cmp	r2, #0
    430a:	db03      	blt.n	4314 <SystemInit+0x108>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    430c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    4310:	2b00      	cmp	r3, #0
    4312:	da22      	bge.n	435a <SystemInit+0x14e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4314:	4915      	ldr	r1, [pc, #84]	; (436c <SystemInit+0x160>)
    4316:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4318:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    431c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4320:	2412      	movs	r4, #18
    nvmc_wait();
    4322:	f7ff ff6b 	bl	41fc <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    4326:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    432a:	f7ff ff67 	bl	41fc <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    432e:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    4332:	f7ff ff63 	bl	41fc <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    4336:	2300      	movs	r3, #0
    4338:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    433c:	f7ff ff5e 	bl	41fc <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    4340:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4344:	490a      	ldr	r1, [pc, #40]	; (4370 <SystemInit+0x164>)
    4346:	4b0b      	ldr	r3, [pc, #44]	; (4374 <SystemInit+0x168>)
    4348:	68ca      	ldr	r2, [r1, #12]
    434a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    434e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4350:	60cb      	str	r3, [r1, #12]
    4352:	f3bf 8f4f 	dsb	sy
    __NOP();
    4356:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4358:	e7fd      	b.n	4356 <SystemInit+0x14a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    435a:	4b07      	ldr	r3, [pc, #28]	; (4378 <SystemInit+0x16c>)
    435c:	4a07      	ldr	r2, [pc, #28]	; (437c <SystemInit+0x170>)
    435e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    4360:	bd10      	pop	{r4, pc}
    4362:	bf00      	nop
    4364:	4000c000 	.word	0x4000c000
    4368:	00007cc7 	.word	0x00007cc7
    436c:	4001e000 	.word	0x4001e000
    4370:	e000ed00 	.word	0xe000ed00
    4374:	05fa0004 	.word	0x05fa0004
    4378:	20000034 	.word	0x20000034
    437c:	03d09000 	.word	0x03d09000

00004380 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4380:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    4382:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4384:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    4386:	fab2 f382 	clz	r3, r2
    438a:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    438e:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    4390:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    4392:	d014      	beq.n	43be <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4394:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    4398:	fa05 f303 	lsl.w	r3, r5, r3
    439c:	ea22 0303 	bic.w	r3, r2, r3
    43a0:	e850 6f00 	ldrex	r6, [r0]
    43a4:	4296      	cmp	r6, r2
    43a6:	d104      	bne.n	43b2 <nrfx_flag32_alloc+0x32>
    43a8:	e840 3c00 	strex	ip, r3, [r0]
    43ac:	f1bc 0f00 	cmp.w	ip, #0
    43b0:	d1f6      	bne.n	43a0 <nrfx_flag32_alloc+0x20>
    43b2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    43b6:	d1e5      	bne.n	4384 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    43b8:	4802      	ldr	r0, [pc, #8]	; (43c4 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    43ba:	700c      	strb	r4, [r1, #0]
}
    43bc:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    43be:	4802      	ldr	r0, [pc, #8]	; (43c8 <nrfx_flag32_alloc+0x48>)
    43c0:	e7fc      	b.n	43bc <nrfx_flag32_alloc+0x3c>
    43c2:	bf00      	nop
    43c4:	0bad0000 	.word	0x0bad0000
    43c8:	0bad0002 	.word	0x0bad0002

000043cc <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    43cc:	6803      	ldr	r3, [r0, #0]
    43ce:	40cb      	lsrs	r3, r1
    43d0:	07db      	lsls	r3, r3, #31
{
    43d2:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    43d4:	d415      	bmi.n	4402 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    43d6:	2301      	movs	r3, #1
    43d8:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    43dc:	6803      	ldr	r3, [r0, #0]
    43de:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    43e2:	ea41 0203 	orr.w	r2, r1, r3
    43e6:	e850 4f00 	ldrex	r4, [r0]
    43ea:	429c      	cmp	r4, r3
    43ec:	d104      	bne.n	43f8 <nrfx_flag32_free+0x2c>
    43ee:	e840 2c00 	strex	ip, r2, [r0]
    43f2:	f1bc 0f00 	cmp.w	ip, #0
    43f6:	d1f6      	bne.n	43e6 <nrfx_flag32_free+0x1a>
    43f8:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    43fc:	d1ee      	bne.n	43dc <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    43fe:	4802      	ldr	r0, [pc, #8]	; (4408 <nrfx_flag32_free+0x3c>)
}
    4400:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4402:	4802      	ldr	r0, [pc, #8]	; (440c <nrfx_flag32_free+0x40>)
    4404:	e7fc      	b.n	4400 <nrfx_flag32_free+0x34>
    4406:	bf00      	nop
    4408:	0bad0000 	.word	0x0bad0000
    440c:	0bad0004 	.word	0x0bad0004

00004410 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4410:	4b05      	ldr	r3, [pc, #20]	; (4428 <nrfx_clock_init+0x18>)
    4412:	791a      	ldrb	r2, [r3, #4]
    4414:	b92a      	cbnz	r2, 4422 <nrfx_clock_init+0x12>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    }
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    4416:	715a      	strb	r2, [r3, #5]
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4418:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    441a:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    441c:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    441e:	4803      	ldr	r0, [pc, #12]	; (442c <nrfx_clock_init+0x1c>)
    4420:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4422:	4803      	ldr	r0, [pc, #12]	; (4430 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4424:	4770      	bx	lr
    4426:	bf00      	nop
    4428:	20000a14 	.word	0x20000a14
    442c:	0bad0000 	.word	0x0bad0000
    4430:	0bad000c 	.word	0x0bad000c

00004434 <nrfx_clock_calibration_start>:
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4434:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4438:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    443c:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    4440:	03c8      	lsls	r0, r1, #15
    4442:	d516      	bpl.n	4472 <nrfx_clock_calibration_start+0x3e>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &clk_src))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)
    4444:	07d1      	lsls	r1, r2, #31
    4446:	d514      	bpl.n	4472 <nrfx_clock_calibration_start+0x3e>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4448:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    444c:	03d2      	lsls	r2, r2, #15
    444e:	d510      	bpl.n	4472 <nrfx_clock_calibration_start+0x3e>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_LFCLK, NULL))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (m_clock_cb.cal_state == CAL_STATE_IDLE)
    4450:	490a      	ldr	r1, [pc, #40]	; (447c <nrfx_clock_calibration_start+0x48>)
    4452:	794a      	ldrb	r2, [r1, #5]
    4454:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    4458:	b96a      	cbnz	r2, 4476 <nrfx_clock_calibration_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    445a:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    445e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    nrfx_err_t err_code = NRFX_SUCCESS;
    4462:	4807      	ldr	r0, [pc, #28]	; (4480 <nrfx_clock_calibration_start+0x4c>)
    p_reg->INTENSET = mask;
    4464:	2208      	movs	r2, #8
    4466:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_CAL;
    446a:	2201      	movs	r2, #1
    446c:	714a      	strb	r2, [r1, #5]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    446e:	611a      	str	r2, [r3, #16]
}
    4470:	4770      	bx	lr
        return NRFX_ERROR_INVALID_STATE;
    4472:	4804      	ldr	r0, [pc, #16]	; (4484 <nrfx_clock_calibration_start+0x50>)
    4474:	4770      	bx	lr
#endif
        nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_CAL);
    }
    else
    {
        err_code = NRFX_ERROR_BUSY;
    4476:	4804      	ldr	r0, [pc, #16]	; (4488 <nrfx_clock_calibration_start+0x54>)

    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4478:	4770      	bx	lr
    447a:	bf00      	nop
    447c:	20000a14 	.word	0x20000a14
    4480:	0bad0000 	.word	0x0bad0000
    4484:	0bad0005 	.word	0x0bad0005
    4488:	0bad000b 	.word	0x0bad000b

0000448c <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    448c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4490:	b510      	push	{r4, lr}
    4492:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4496:	b152      	cbz	r2, 44ae <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4498:	2000      	movs	r0, #0
    449a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    449e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    44a2:	2201      	movs	r2, #1
    44a4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    44a8:	4b16      	ldr	r3, [pc, #88]	; (4504 <nrfx_power_clock_irq_handler+0x78>)
    44aa:	681b      	ldr	r3, [r3, #0]
    44ac:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    44ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    44b2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    44b6:	b15a      	cbz	r2, 44d0 <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    44b8:	2200      	movs	r2, #0
    44ba:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    44be:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENCLR = mask;
    44c2:	2202      	movs	r2, #2
    44c4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    44c8:	4b0e      	ldr	r3, [pc, #56]	; (4504 <nrfx_power_clock_irq_handler+0x78>)
    44ca:	2001      	movs	r0, #1
    44cc:	681b      	ldr	r3, [r3, #0]
    44ce:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    44d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    44d4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CTTO);
    }
#endif // NRF_CLOCK_HAS_CALIBRATION_TIMER && NRFX_CHECK(NRFX_CLOCK_CONFIG_CT_ENABLED)

    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_DONE) &&
    44d8:	b192      	cbz	r2, 4500 <nrfx_power_clock_irq_handler+0x74>
    return p_reg->INTENSET & mask;
    44da:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    44de:	0712      	lsls	r2, r2, #28
    44e0:	d50e      	bpl.n	4500 <nrfx_power_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    44e2:	2200      	movs	r2, #0
    44e4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    44e8:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    p_reg->INTENCLR = mask;
    44ec:	2108      	movs	r1, #8
    44ee:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
        *(volatile uint32_t *)0x40000C34 = 0x00000000;
#endif
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_DONE");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    44f2:	4b04      	ldr	r3, [pc, #16]	; (4504 <nrfx_power_clock_irq_handler+0x78>)
    44f4:	715a      	strb	r2, [r3, #5]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    44f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    44fa:	681b      	ldr	r3, [r3, #0]
    44fc:	2003      	movs	r0, #3
    44fe:	4718      	bx	r3
}
    4500:	bd10      	pop	{r4, pc}
    4502:	bf00      	nop
    4504:	20000a14 	.word	0x20000a14

00004508 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4508:	4b03      	ldr	r3, [pc, #12]	; (4518 <pin_in_use_by_te+0x10>)
    450a:	3008      	adds	r0, #8
    450c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    4510:	f3c0 1040 	ubfx	r0, r0, #5, #1
    4514:	4770      	bx	lr
    4516:	bf00      	nop
    4518:	20000038 	.word	0x20000038

0000451c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    451c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    451e:	f100 0308 	add.w	r3, r0, #8
    4522:	4c0c      	ldr	r4, [pc, #48]	; (4554 <call_handler+0x38>)
    4524:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    4528:	05da      	lsls	r2, r3, #23
{
    452a:	4605      	mov	r5, r0
    452c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    452e:	d507      	bpl.n	4540 <call_handler+0x24>
    4530:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4534:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4538:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    453c:	6852      	ldr	r2, [r2, #4]
    453e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4540:	68a3      	ldr	r3, [r4, #8]
    4542:	b12b      	cbz	r3, 4550 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4544:	68e2      	ldr	r2, [r4, #12]
    4546:	4631      	mov	r1, r6
    4548:	4628      	mov	r0, r5
    }
}
    454a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    454e:	4718      	bx	r3
}
    4550:	bd70      	pop	{r4, r5, r6, pc}
    4552:	bf00      	nop
    4554:	20000038 	.word	0x20000038

00004558 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4558:	4a12      	ldr	r2, [pc, #72]	; (45a4 <release_handler+0x4c>)
    455a:	3008      	adds	r0, #8
{
    455c:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    455e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    4562:	05d9      	lsls	r1, r3, #23
    4564:	d51b      	bpl.n	459e <release_handler+0x46>
    4566:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    456a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    456e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4572:	f102 0410 	add.w	r4, r2, #16
    4576:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4578:	f834 3b02 	ldrh.w	r3, [r4], #2
    457c:	f413 7f80 	tst.w	r3, #256	; 0x100
    4580:	d003      	beq.n	458a <release_handler+0x32>
    4582:	f3c3 2343 	ubfx	r3, r3, #9, #4
    4586:	4299      	cmp	r1, r3
    4588:	d009      	beq.n	459e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    458a:	3001      	adds	r0, #1
    458c:	2820      	cmp	r0, #32
    458e:	d1f3      	bne.n	4578 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4590:	2300      	movs	r3, #0
    4592:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4596:	4804      	ldr	r0, [pc, #16]	; (45a8 <release_handler+0x50>)
}
    4598:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    459a:	f7ff bf17 	b.w	43cc <nrfx_flag32_free>
}
    459e:	bc10      	pop	{r4}
    45a0:	4770      	bx	lr
    45a2:	bf00      	nop
    45a4:	20000038 	.word	0x20000038
    45a8:	2000008c 	.word	0x2000008c

000045ac <pin_handler_trigger_uninit>:
{
    45ac:	b538      	push	{r3, r4, r5, lr}
    45ae:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    45b0:	f7ff ffaa 	bl	4508 <pin_in_use_by_te>
    45b4:	4c09      	ldr	r4, [pc, #36]	; (45dc <pin_handler_trigger_uninit+0x30>)
    45b6:	f102 0508 	add.w	r5, r2, #8
    45ba:	b140      	cbz	r0, 45ce <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    45bc:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    45c0:	4907      	ldr	r1, [pc, #28]	; (45e0 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    45c2:	0b5b      	lsrs	r3, r3, #13
    45c4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    45c8:	2000      	movs	r0, #0
    45ca:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    45ce:	4610      	mov	r0, r2
    45d0:	f7ff ffc2 	bl	4558 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    45d4:	2300      	movs	r3, #0
    45d6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    45da:	bd38      	pop	{r3, r4, r5, pc}
    45dc:	20000038 	.word	0x20000038
    45e0:	40006000 	.word	0x40006000

000045e4 <nrfx_gpiote_input_configure>:
{
    45e4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    45e8:	4604      	mov	r4, r0
    45ea:	461e      	mov	r6, r3
    if (p_input_config)
    45ec:	b309      	cbz	r1, 4632 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    45ee:	4f4d      	ldr	r7, [pc, #308]	; (4724 <nrfx_gpiote_input_configure+0x140>)
    45f0:	f100 0808 	add.w	r8, r0, #8
    45f4:	f837 5018 	ldrh.w	r5, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    45f8:	07ab      	lsls	r3, r5, #30
    45fa:	d506      	bpl.n	460a <nrfx_gpiote_input_configure+0x26>
    45fc:	f7ff ff84 	bl	4508 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    4600:	b118      	cbz	r0, 460a <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    4602:	4849      	ldr	r0, [pc, #292]	; (4728 <nrfx_gpiote_input_configure+0x144>)
}
    4604:	b002      	add	sp, #8
    4606:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    460a:	f004 001f 	and.w	r0, r4, #31
    460e:	0080      	lsls	r0, r0, #2
    4610:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4614:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4616:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    461a:	f025 0502 	bic.w	r5, r5, #2
    cnf &= ~to_update;
    461e:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4622:	f045 0501 	orr.w	r5, r5, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4626:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    462a:	f827 5018 	strh.w	r5, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    462e:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_trigger_config)
    4632:	b192      	cbz	r2, 465a <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4634:	4b3b      	ldr	r3, [pc, #236]	; (4724 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4636:	7815      	ldrb	r5, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4638:	6852      	ldr	r2, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    463a:	f104 0008 	add.w	r0, r4, #8
    463e:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    4642:	078f      	lsls	r7, r1, #30
    4644:	d50c      	bpl.n	4660 <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
    4646:	2a00      	cmp	r2, #0
    4648:	d1db      	bne.n	4602 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    464a:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    464e:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4652:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    4656:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    465a:	bbce      	cbnz	r6, 46d0 <nrfx_gpiote_input_configure+0xec>
    return NRFX_SUCCESS;
    465c:	4833      	ldr	r0, [pc, #204]	; (472c <nrfx_gpiote_input_configure+0x148>)
    465e:	e7d1      	b.n	4604 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4660:	f021 0120 	bic.w	r1, r1, #32
    4664:	04c9      	lsls	r1, r1, #19
    4666:	0cc9      	lsrs	r1, r1, #19
    4668:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    466c:	2a00      	cmp	r2, #0
    466e:	d0ec      	beq.n	464a <nrfx_gpiote_input_configure+0x66>
                if (!edge)
    4670:	2d03      	cmp	r5, #3
    4672:	d8c6      	bhi.n	4602 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4674:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4676:	b92d      	cbnz	r5, 4684 <nrfx_gpiote_input_configure+0xa0>
    4678:	4a2d      	ldr	r2, [pc, #180]	; (4730 <nrfx_gpiote_input_configure+0x14c>)
    467a:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    467e:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    4682:	e7e2      	b.n	464a <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4684:	00ba      	lsls	r2, r7, #2
    4686:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    468a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    468e:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    4692:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4696:	f02c 0c03 	bic.w	ip, ip, #3
    469a:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    469e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    46a2:	f42c 3c47 	bic.w	ip, ip, #203776	; 0x31c00
    46a6:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    46aa:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    46ae:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    46b2:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    46b6:	f40c 5cf8 	and.w	ip, ip, #7936	; 0x1f00
    46ba:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
    46be:	ea4c 0c0e 	orr.w	ip, ip, lr
    46c2:	f041 0120 	orr.w	r1, r1, #32
    46c6:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    46ca:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    46ce:	e7bc      	b.n	464a <nrfx_gpiote_input_configure+0x66>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    46d0:	e9d6 7600 	ldrd	r7, r6, [r6]
    release_handler(pin);
    46d4:	4620      	mov	r0, r4
    46d6:	f7ff ff3f 	bl	4558 <release_handler>
    if (!handler)
    46da:	2f00      	cmp	r7, #0
    46dc:	d0be      	beq.n	465c <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    46de:	4d11      	ldr	r5, [pc, #68]	; (4724 <nrfx_gpiote_input_configure+0x140>)
    46e0:	682b      	ldr	r3, [r5, #0]
    46e2:	429f      	cmp	r7, r3
    46e4:	d104      	bne.n	46f0 <nrfx_gpiote_input_configure+0x10c>
    46e6:	686b      	ldr	r3, [r5, #4]
    46e8:	429e      	cmp	r6, r3
    46ea:	d101      	bne.n	46f0 <nrfx_gpiote_input_configure+0x10c>
    46ec:	2200      	movs	r2, #0
    46ee:	e009      	b.n	4704 <nrfx_gpiote_input_configure+0x120>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    46f0:	4810      	ldr	r0, [pc, #64]	; (4734 <nrfx_gpiote_input_configure+0x150>)
    46f2:	f10d 0107 	add.w	r1, sp, #7
    46f6:	f7ff fe43 	bl	4380 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    46fa:	4b0c      	ldr	r3, [pc, #48]	; (472c <nrfx_gpiote_input_configure+0x148>)
    46fc:	4298      	cmp	r0, r3
    46fe:	d181      	bne.n	4604 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    4700:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    4704:	f845 7032 	str.w	r7, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    4708:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    470c:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    470e:	605e      	str	r6, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4710:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    4714:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    4718:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    471c:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    4720:	e79c      	b.n	465c <nrfx_gpiote_input_configure+0x78>
    4722:	bf00      	nop
    4724:	20000038 	.word	0x20000038
    4728:	0bad0004 	.word	0x0bad0004
    472c:	0bad0000 	.word	0x0bad0000
    4730:	40006000 	.word	0x40006000
    4734:	2000008c 	.word	0x2000008c

00004738 <nrfx_gpiote_output_configure>:
{
    4738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    473a:	4604      	mov	r4, r0
    if (p_config)
    473c:	b371      	cbz	r1, 479c <nrfx_gpiote_output_configure+0x64>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    473e:	4e37      	ldr	r6, [pc, #220]	; (481c <nrfx_gpiote_output_configure+0xe4>)
    4740:	f100 0708 	add.w	r7, r0, #8
    4744:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4748:	07ab      	lsls	r3, r5, #30
    474a:	d404      	bmi.n	4756 <nrfx_gpiote_output_configure+0x1e>
    474c:	f7ff fedc 	bl	4508 <pin_in_use_by_te>
    4750:	b108      	cbz	r0, 4756 <nrfx_gpiote_output_configure+0x1e>
    return NRFX_SUCCESS;
    4752:	4833      	ldr	r0, [pc, #204]	; (4820 <nrfx_gpiote_output_configure+0xe8>)
}
    4754:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4756:	f015 0f1c 	tst.w	r5, #28
    475a:	784b      	ldrb	r3, [r1, #1]
    475c:	d001      	beq.n	4762 <nrfx_gpiote_output_configure+0x2a>
    475e:	2b01      	cmp	r3, #1
    4760:	d0f7      	beq.n	4752 <nrfx_gpiote_output_configure+0x1a>
    *p_pin = pin_number & 0x1F;
    4762:	f004 001f 	and.w	r0, r4, #31
    4766:	0080      	lsls	r0, r0, #2
    4768:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    476c:	f891 e000 	ldrb.w	lr, [r1]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4770:	f8d0 c700 	ldr.w	ip, [r0, #1792]	; 0x700
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    4774:	7889      	ldrb	r1, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    4776:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    4778:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    477c:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    4780:	f02c 0c07 	bic.w	ip, ip, #7
    4784:	ea43 030c 	orr.w	r3, r3, ip
    4788:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    478c:	f045 0503 	orr.w	r5, r5, #3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4790:	f043 0301 	orr.w	r3, r3, #1
    4794:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    4798:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_task_config)
    479c:	b90a      	cbnz	r2, 47a2 <nrfx_gpiote_output_configure+0x6a>
    return NRFX_SUCCESS;
    479e:	4821      	ldr	r0, [pc, #132]	; (4824 <nrfx_gpiote_output_configure+0xec>)
    47a0:	e7d8      	b.n	4754 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    47a2:	4e1e      	ldr	r6, [pc, #120]	; (481c <nrfx_gpiote_output_configure+0xe4>)
    47a4:	f104 0708 	add.w	r7, r4, #8
    47a8:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    47ac:	0783      	lsls	r3, r0, #30
    47ae:	d5d0      	bpl.n	4752 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    47b0:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    47b4:	4661      	mov	r1, ip
    47b6:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    47b8:	f020 0020 	bic.w	r0, r0, #32
    47bc:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    47c0:	04c0      	lsls	r0, r0, #19
    47c2:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    47c6:	0cc0      	lsrs	r0, r0, #19
    47c8:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    47cc:	2300      	movs	r3, #0
    47ce:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    47d2:	7855      	ldrb	r5, [r2, #1]
    47d4:	2d00      	cmp	r5, #0
    47d6:	d0e2      	beq.n	479e <nrfx_gpiote_output_configure+0x66>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    47d8:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    47dc:	7892      	ldrb	r2, [r2, #2]
    47de:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    47e2:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    47e6:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    47ea:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    47ee:	0223      	lsls	r3, r4, #8
    47f0:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    47f4:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    47f6:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    47fa:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    47fe:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4800:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4802:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4806:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    480a:	4313      	orrs	r3, r2
    480c:	f040 0020 	orr.w	r0, r0, #32
    4810:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4814:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4818:	e7c1      	b.n	479e <nrfx_gpiote_output_configure+0x66>
    481a:	bf00      	nop
    481c:	20000038 	.word	0x20000038
    4820:	0bad0004 	.word	0x0bad0004
    4824:	0bad0000 	.word	0x0bad0000

00004828 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4828:	4b01      	ldr	r3, [pc, #4]	; (4830 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    482a:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    482e:	4770      	bx	lr
    4830:	20000038 	.word	0x20000038

00004834 <nrfx_gpiote_channel_get>:
{
    4834:	b508      	push	{r3, lr}
    4836:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    4838:	f7ff fe66 	bl	4508 <pin_in_use_by_te>
    483c:	b138      	cbz	r0, 484e <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    483e:	4b05      	ldr	r3, [pc, #20]	; (4854 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    4840:	4805      	ldr	r0, [pc, #20]	; (4858 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4842:	3208      	adds	r2, #8
    4844:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    4848:	0b5b      	lsrs	r3, r3, #13
    484a:	700b      	strb	r3, [r1, #0]
}
    484c:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    484e:	4803      	ldr	r0, [pc, #12]	; (485c <nrfx_gpiote_channel_get+0x28>)
    4850:	e7fc      	b.n	484c <nrfx_gpiote_channel_get+0x18>
    4852:	bf00      	nop
    4854:	20000038 	.word	0x20000038
    4858:	0bad0000 	.word	0x0bad0000
    485c:	0bad0004 	.word	0x0bad0004

00004860 <nrfx_gpiote_init>:
{
    4860:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4862:	4c0f      	ldr	r4, [pc, #60]	; (48a0 <nrfx_gpiote_init+0x40>)
    4864:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    4868:	b9bd      	cbnz	r5, 489a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    486a:	2240      	movs	r2, #64	; 0x40
    486c:	4629      	mov	r1, r5
    486e:	f104 0010 	add.w	r0, r4, #16
    4872:	f002 f8f1 	bl	6a58 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4876:	2006      	movs	r0, #6
    4878:	f7fd fd6e 	bl	2358 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    487c:	4b09      	ldr	r3, [pc, #36]	; (48a4 <nrfx_gpiote_init+0x44>)
    return err_code;
    487e:	480a      	ldr	r0, [pc, #40]	; (48a8 <nrfx_gpiote_init+0x48>)
    4880:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    4884:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    4888:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    488c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4890:	2301      	movs	r3, #1
    4892:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4896:	6563      	str	r3, [r4, #84]	; 0x54
}
    4898:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    489a:	4804      	ldr	r0, [pc, #16]	; (48ac <nrfx_gpiote_init+0x4c>)
    489c:	e7fc      	b.n	4898 <nrfx_gpiote_init+0x38>
    489e:	bf00      	nop
    48a0:	20000038 	.word	0x20000038
    48a4:	40006000 	.word	0x40006000
    48a8:	0bad0000 	.word	0x0bad0000
    48ac:	0bad0005 	.word	0x0bad0005

000048b0 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    48b0:	4b03      	ldr	r3, [pc, #12]	; (48c0 <nrfx_gpiote_is_init+0x10>)
    48b2:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    48b6:	3800      	subs	r0, #0
    48b8:	bf18      	it	ne
    48ba:	2001      	movne	r0, #1
    48bc:	4770      	bx	lr
    48be:	bf00      	nop
    48c0:	20000038 	.word	0x20000038

000048c4 <nrfx_gpiote_channel_free>:
{
    48c4:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    48c6:	4801      	ldr	r0, [pc, #4]	; (48cc <nrfx_gpiote_channel_free+0x8>)
    48c8:	f7ff bd80 	b.w	43cc <nrfx_flag32_free>
    48cc:	20000088 	.word	0x20000088

000048d0 <nrfx_gpiote_channel_alloc>:
{
    48d0:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    48d2:	4801      	ldr	r0, [pc, #4]	; (48d8 <nrfx_gpiote_channel_alloc+0x8>)
    48d4:	f7ff bd54 	b.w	4380 <nrfx_flag32_alloc>
    48d8:	20000088 	.word	0x20000088

000048dc <nrfx_gpiote_trigger_enable>:
{
    48dc:	b510      	push	{r4, lr}
    48de:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    48e0:	f7ff fe12 	bl	4508 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    48e4:	f102 0408 	add.w	r4, r2, #8
    48e8:	4b1c      	ldr	r3, [pc, #112]	; (495c <nrfx_gpiote_trigger_enable+0x80>)
    48ea:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    48ee:	b1e0      	cbz	r0, 492a <nrfx_gpiote_trigger_enable+0x4e>
    48f0:	f013 0402 	ands.w	r4, r3, #2
    48f4:	d119      	bne.n	492a <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    48f6:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    48f8:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    48fa:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    48fe:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    4902:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4906:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    490a:	6004      	str	r4, [r0, #0]
    490c:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    490e:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    4912:	f040 0001 	orr.w	r0, r0, #1
    4916:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    491a:	b129      	cbz	r1, 4928 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    491c:	2201      	movs	r2, #1
    491e:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    4922:	4a0f      	ldr	r2, [pc, #60]	; (4960 <nrfx_gpiote_trigger_enable+0x84>)
    4924:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    4928:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    492a:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    492e:	2b04      	cmp	r3, #4
    4930:	d010      	beq.n	4954 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    4932:	2b05      	cmp	r3, #5
    4934:	d010      	beq.n	4958 <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    4936:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    493a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    493e:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    4942:	40d9      	lsrs	r1, r3
    4944:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4948:	3102      	adds	r1, #2
}
    494a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    494e:	4610      	mov	r0, r2
    4950:	f002 ba5c 	b.w	6e0c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    4954:	2103      	movs	r1, #3
    4956:	e7f8      	b.n	494a <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    4958:	2102      	movs	r1, #2
    495a:	e7f6      	b.n	494a <nrfx_gpiote_trigger_enable+0x6e>
    495c:	20000038 	.word	0x20000038
    4960:	40006000 	.word	0x40006000

00004964 <nrfx_gpiote_trigger_disable>:
{
    4964:	b508      	push	{r3, lr}
    4966:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4968:	f7ff fdce 	bl	4508 <pin_in_use_by_te>
    496c:	b1c0      	cbz	r0, 49a0 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    496e:	f102 0108 	add.w	r1, r2, #8
    4972:	4b0e      	ldr	r3, [pc, #56]	; (49ac <nrfx_gpiote_trigger_disable+0x48>)
    4974:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4978:	0799      	lsls	r1, r3, #30
    497a:	d411      	bmi.n	49a0 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    497c:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    497e:	2201      	movs	r2, #1
    4980:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    4982:	009b      	lsls	r3, r3, #2
    4984:	490a      	ldr	r1, [pc, #40]	; (49b0 <nrfx_gpiote_trigger_disable+0x4c>)
    4986:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    498a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    498e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4992:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    4996:	f022 0203 	bic.w	r2, r2, #3
    499a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    499e:	bd08      	pop	{r3, pc}
    49a0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    49a4:	2100      	movs	r1, #0
    49a6:	4610      	mov	r0, r2
    49a8:	f002 ba30 	b.w	6e0c <nrf_gpio_cfg_sense_set>
    49ac:	20000038 	.word	0x20000038
    49b0:	40006000 	.word	0x40006000

000049b4 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    49b4:	4b0d      	ldr	r3, [pc, #52]	; (49ec <nrfx_gpiote_pin_uninit+0x38>)
    49b6:	f100 0208 	add.w	r2, r0, #8
{
    49ba:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    49bc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    49c0:	07db      	lsls	r3, r3, #31
{
    49c2:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    49c4:	d50f      	bpl.n	49e6 <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    49c6:	f7ff ffcd 	bl	4964 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    49ca:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    49cc:	f004 041f 	and.w	r4, r4, #31
    49d0:	f7ff fdec 	bl	45ac <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    49d4:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    49d8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    49dc:	2202      	movs	r2, #2
    49de:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    49e2:	4803      	ldr	r0, [pc, #12]	; (49f0 <nrfx_gpiote_pin_uninit+0x3c>)
}
    49e4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    49e6:	4803      	ldr	r0, [pc, #12]	; (49f4 <nrfx_gpiote_pin_uninit+0x40>)
    49e8:	e7fc      	b.n	49e4 <nrfx_gpiote_pin_uninit+0x30>
    49ea:	bf00      	nop
    49ec:	20000038 	.word	0x20000038
    49f0:	0bad0000 	.word	0x0bad0000
    49f4:	0bad0004 	.word	0x0bad0004

000049f8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    49f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    49fc:	4b4e      	ldr	r3, [pc, #312]	; (4b38 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    49fe:	484f      	ldr	r0, [pc, #316]	; (4b3c <nrfx_gpiote_irq_handler+0x144>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4a00:	494f      	ldr	r1, [pc, #316]	; (4b40 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t status = 0;
    4a02:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    4a04:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4a06:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4a08:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    4a0a:	b136      	cbz	r6, 4a1a <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    4a0c:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    4a10:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4a12:	bf1e      	ittt	ne
    4a14:	601c      	strne	r4, [r3, #0]
    4a16:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    4a18:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4a1a:	3304      	adds	r3, #4
    4a1c:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    4a1e:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    4a22:	d1f1      	bne.n	4a08 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4a24:	4b45      	ldr	r3, [pc, #276]	; (4b3c <nrfx_gpiote_irq_handler+0x144>)
    4a26:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    4a2a:	b1bb      	cbz	r3, 4a5c <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    4a2c:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    4a30:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    4a34:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    4a36:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    4a3a:	af01      	add	r7, sp, #4
    4a3c:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    4a40:	9c01      	ldr	r4, [sp, #4]
    4a42:	b96c      	cbnz	r4, 4a60 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4a44:	4b3d      	ldr	r3, [pc, #244]	; (4b3c <nrfx_gpiote_irq_handler+0x144>)
    4a46:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    4a4a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    4a4e:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    4a52:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    4a54:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    4a58:	2b00      	cmp	r3, #0
    4a5a:	d1ee      	bne.n	4a3a <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    4a5c:	2401      	movs	r4, #1
    4a5e:	e066      	b.n	4b2e <nrfx_gpiote_irq_handler+0x136>
                uint32_t pin = NRF_CTZ(latch[i]);
    4a60:	fa94 f4a4 	rbit	r4, r4
    4a64:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4a68:	4a36      	ldr	r2, [pc, #216]	; (4b44 <nrfx_gpiote_irq_handler+0x14c>)
    4a6a:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    4a6e:	08e0      	lsrs	r0, r4, #3
    4a70:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
    4a74:	f004 0307 	and.w	r3, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    4a78:	fa08 f203 	lsl.w	r2, r8, r3
    4a7c:	5c3b      	ldrb	r3, [r7, r0]
    4a7e:	ea23 0302 	bic.w	r3, r3, r2
    4a82:	543b      	strb	r3, [r7, r0]
    4a84:	00a3      	lsls	r3, r4, #2
    4a86:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    4a8a:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4a8e:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    4a92:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    4a94:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    4a96:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    4a9a:	d518      	bpl.n	4ace <nrfx_gpiote_irq_handler+0xd6>
        call_handler(pin, trigger);
    4a9c:	4659      	mov	r1, fp
    4a9e:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    4aa0:	fa5f fa82 	uxtb.w	sl, r2
    4aa4:	f7ff fd3a 	bl	451c <call_handler>
    4aa8:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    4aac:	f3c3 4301 	ubfx	r3, r3, #16, #2
    4ab0:	459a      	cmp	sl, r3
    4ab2:	d107      	bne.n	4ac4 <nrfx_gpiote_irq_handler+0xcc>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    4ab4:	2100      	movs	r1, #0
    4ab6:	4620      	mov	r0, r4
    4ab8:	f002 f9a8 	bl	6e0c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    4abc:	4651      	mov	r1, sl
    4abe:	4620      	mov	r0, r4
    4ac0:	f002 f9a4 	bl	6e0c <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    4ac4:	fa08 f404 	lsl.w	r4, r8, r4
    4ac8:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    4acc:	e7b8      	b.n	4a40 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    4ace:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    4ad0:	bf0c      	ite	eq
    4ad2:	2103      	moveq	r1, #3
    4ad4:	2102      	movne	r1, #2
    4ad6:	4620      	mov	r0, r4
    4ad8:	f002 f998 	bl	6e0c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    4adc:	f1ba 0f03 	cmp.w	sl, #3
    4ae0:	d004      	beq.n	4aec <nrfx_gpiote_irq_handler+0xf4>
    4ae2:	2a02      	cmp	r2, #2
    4ae4:	d107      	bne.n	4af6 <nrfx_gpiote_irq_handler+0xfe>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4ae6:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4aea:	d1eb      	bne.n	4ac4 <nrfx_gpiote_irq_handler+0xcc>
            call_handler(pin, trigger);
    4aec:	4659      	mov	r1, fp
    4aee:	4620      	mov	r0, r4
    4af0:	f7ff fd14 	bl	451c <call_handler>
    4af4:	e7e6      	b.n	4ac4 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    4af6:	2a03      	cmp	r2, #3
    4af8:	d1e4      	bne.n	4ac4 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    4afa:	f1ba 0f02 	cmp.w	sl, #2
    4afe:	e7f4      	b.n	4aea <nrfx_gpiote_irq_handler+0xf2>
        uint32_t ch = NRF_CTZ(mask);
    4b00:	fa95 f3a5 	rbit	r3, r5
    4b04:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    4b08:	fa04 f203 	lsl.w	r2, r4, r3
    4b0c:	009b      	lsls	r3, r3, #2
    4b0e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4b12:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    4b16:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    4b1a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    4b1e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    4b22:	f3c0 2004 	ubfx	r0, r0, #8, #5
    4b26:	f3c1 4101 	ubfx	r1, r1, #16, #2
    4b2a:	f7ff fcf7 	bl	451c <call_handler>
    while (mask)
    4b2e:	2d00      	cmp	r5, #0
    4b30:	d1e6      	bne.n	4b00 <nrfx_gpiote_irq_handler+0x108>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    4b32:	b003      	add	sp, #12
    4b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4b38:	40006100 	.word	0x40006100
    4b3c:	40006000 	.word	0x40006000
    4b40:	40006120 	.word	0x40006120
    4b44:	20000038 	.word	0x20000038

00004b48 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    4b48:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    4b4a:	4801      	ldr	r0, [pc, #4]	; (4b50 <nrfx_ppi_channel_alloc+0x8>)
    4b4c:	f7ff bc18 	b.w	4380 <nrfx_flag32_alloc>
    4b50:	20000094 	.word	0x20000094

00004b54 <nrfx_ppi_channel_assign>:
    return nrfx_flag32_free(&m_channels_allocated, channel);
}


nrfx_err_t nrfx_ppi_channel_assign(nrf_ppi_channel_t channel, uint32_t eep, uint32_t tep)
{
    4b54:	b570      	push	{r4, r5, r6, lr}
    4b56:	4604      	mov	r4, r0
    4b58:	4615      	mov	r5, r2
    if ((uint32_t *)eep == NULL || (uint32_t *)tep == NULL)
    4b5a:	460e      	mov	r6, r1
    4b5c:	b1b1      	cbz	r1, 4b8c <nrfx_ppi_channel_assign+0x38>
    4b5e:	b1aa      	cbz	r2, 4b8c <nrfx_ppi_channel_assign+0x38>
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    4b60:	2301      	movs	r3, #1
    4b62:	4083      	lsls	r3, r0
    return ((NRFX_PPI_PROG_APP_CHANNELS_MASK & nrfx_ppi_channel_to_mask(channel)) != 0);
    4b64:	f3c3 0313 	ubfx	r3, r3, #0, #20
        return NRFX_ERROR_NULL;
    }

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_programmable_app_channel(channel))
    4b68:	b193      	cbz	r3, 4b90 <nrfx_ppi_channel_assign+0x3c>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else if (!nrfx_flag32_is_allocated(m_channels_allocated, channel))
    4b6a:	4b0b      	ldr	r3, [pc, #44]	; (4b98 <nrfx_ppi_channel_assign+0x44>)
    4b6c:	4601      	mov	r1, r0
    4b6e:	6818      	ldr	r0, [r3, #0]
    4b70:	f002 f8b5 	bl	6cde <nrfx_flag32_is_allocated>
    4b74:	b170      	cbz	r0, 4b94 <nrfx_ppi_channel_assign+0x40>
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    4b76:	00e0      	lsls	r0, r4, #3
    4b78:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    4b7c:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    4b80:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    4b84:	f8c0 5514 	str.w	r5, [r0, #1300]	; 0x514
    nrfx_err_t err_code = NRFX_SUCCESS;
    4b88:	4804      	ldr	r0, [pc, #16]	; (4b9c <nrfx_ppi_channel_assign+0x48>)
                      eep,
                      tep);
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4b8a:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_NULL;
    4b8c:	4804      	ldr	r0, [pc, #16]	; (4ba0 <nrfx_ppi_channel_assign+0x4c>)
    4b8e:	e7fc      	b.n	4b8a <nrfx_ppi_channel_assign+0x36>
        err_code = NRFX_ERROR_INVALID_PARAM;
    4b90:	4804      	ldr	r0, [pc, #16]	; (4ba4 <nrfx_ppi_channel_assign+0x50>)
    4b92:	e7fa      	b.n	4b8a <nrfx_ppi_channel_assign+0x36>
        err_code = NRFX_ERROR_INVALID_STATE;
    4b94:	4804      	ldr	r0, [pc, #16]	; (4ba8 <nrfx_ppi_channel_assign+0x54>)
    4b96:	e7f8      	b.n	4b8a <nrfx_ppi_channel_assign+0x36>
    4b98:	20000094 	.word	0x20000094
    4b9c:	0bad0000 	.word	0x0bad0000
    4ba0:	0bad0009 	.word	0x0bad0009
    4ba4:	0bad0004 	.word	0x0bad0004
    4ba8:	0bad0005 	.word	0x0bad0005

00004bac <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    4bac:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4bae:	4c11      	ldr	r4, [pc, #68]	; (4bf4 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    4bb0:	4a11      	ldr	r2, [pc, #68]	; (4bf8 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    4bb2:	4912      	ldr	r1, [pc, #72]	; (4bfc <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    4bb4:	2303      	movs	r3, #3
    4bb6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    4bb8:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4bba:	4b11      	ldr	r3, [pc, #68]	; (4c00 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    4bbc:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    4bbe:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    4bc0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    4bc4:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    4bc6:	2300      	movs	r3, #0
    4bc8:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    4bca:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4bcc:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    4bce:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    4bd0:	4a0c      	ldr	r2, [pc, #48]	; (4c04 <_DoInit+0x58>)
    4bd2:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    4bd4:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    4bd6:	2210      	movs	r2, #16
    4bd8:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    4bda:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    4bdc:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    4bde:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    4be0:	f001 ff15 	bl	6a0e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    4be4:	4908      	ldr	r1, [pc, #32]	; (4c08 <_DoInit+0x5c>)
    4be6:	4620      	mov	r0, r4
    4be8:	f001 ff11 	bl	6a0e <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    4bec:	2320      	movs	r3, #32
    4bee:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    4bf0:	bd10      	pop	{r4, pc}
    4bf2:	bf00      	nop
    4bf4:	20000a1c 	.word	0x20000a1c
    4bf8:	00007ccb 	.word	0x00007ccb
    4bfc:	00007cd4 	.word	0x00007cd4
    4c00:	20000dd0 	.word	0x20000dd0
    4c04:	20000dc0 	.word	0x20000dc0
    4c08:	00007cd8 	.word	0x00007cd8

00004c0c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4c0c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    4c10:	4f23      	ldr	r7, [pc, #140]	; (4ca0 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    4c12:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4c16:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    4c18:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4c1c:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    4c1e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    4c20:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    4c22:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4c24:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    4c26:	d834      	bhi.n	4c92 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    4c28:	f8d2 a020 	ldr.w	sl, [r2, #32]
    4c2c:	ebaa 0905 	sub.w	r9, sl, r5
    4c30:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    4c34:	4294      	cmp	r4, r2
    4c36:	d811      	bhi.n	4c5c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4c38:	f04f 0918 	mov.w	r9, #24
    4c3c:	fb06 9309 	mla	r3, r6, r9, r9
    4c40:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    4c42:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4c44:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    4c46:	4641      	mov	r1, r8
    4c48:	4428      	add	r0, r5
    4c4a:	f001 fefa 	bl	6a42 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    4c4e:	fb09 7606 	mla	r6, r9, r6, r7
    4c52:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    4c54:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    4c56:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    4c58:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    4c5c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    4c5e:	429c      	cmp	r4, r3
    4c60:	d81b      	bhi.n	4c9a <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4c62:	fb00 bb0b 	mla	fp, r0, fp, fp
    4c66:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    4c68:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    4c6a:	f8db 0004 	ldr.w	r0, [fp, #4]
    4c6e:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    4c70:	4428      	add	r0, r5
    4c72:	f001 fee6 	bl	6a42 <memcpy>
      if (NumBytes) {
    4c76:	ebb4 040a 	subs.w	r4, r4, sl
    4c7a:	d006      	beq.n	4c8a <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    4c7c:	f8db 0004 	ldr.w	r0, [fp, #4]
    4c80:	4622      	mov	r2, r4
    4c82:	eb08 0109 	add.w	r1, r8, r9
    4c86:	f001 fedc 	bl	6a42 <memcpy>
      pRing->WrOff = NumBytes;
    4c8a:	2018      	movs	r0, #24
    4c8c:	fb00 7606 	mla	r6, r0, r6, r7
    4c90:	e7e0      	b.n	4c54 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    4c92:	3b01      	subs	r3, #1
    4c94:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    4c96:	42a3      	cmp	r3, r4
    4c98:	d2ce      	bcs.n	4c38 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    4c9a:	2000      	movs	r0, #0
    4c9c:	e7dc      	b.n	4c58 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    4c9e:	bf00      	nop
    4ca0:	20000a1c 	.word	0x20000a1c

00004ca4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4ca4:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    4ca6:	4b16      	ldr	r3, [pc, #88]	; (4d00 <SEGGER_RTT_WriteNoLock+0x5c>)
    4ca8:	2418      	movs	r4, #24
    4caa:	fb00 4504 	mla	r5, r0, r4, r4
    4cae:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    4cb0:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    4cb4:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    4cb6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    4cb8:	2c01      	cmp	r4, #1
    4cba:	d00e      	beq.n	4cda <SEGGER_RTT_WriteNoLock+0x36>
    4cbc:	2c02      	cmp	r4, #2
    4cbe:	d018      	beq.n	4cf2 <SEGGER_RTT_WriteNoLock+0x4e>
    4cc0:	b9e4      	cbnz	r4, 4cfc <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    4cc2:	4628      	mov	r0, r5
    4cc4:	f002 f8b0 	bl	6e28 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    4cc8:	4286      	cmp	r6, r0
    4cca:	d804      	bhi.n	4cd6 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    4ccc:	4632      	mov	r2, r6
    4cce:	4628      	mov	r0, r5
    4cd0:	f002 f8b3 	bl	6e3a <_WriteNoCheck>
    4cd4:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    4cd6:	4620      	mov	r0, r4
    4cd8:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    4cda:	4628      	mov	r0, r5
    4cdc:	f002 f8a4 	bl	6e28 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    4ce0:	4286      	cmp	r6, r0
    4ce2:	4634      	mov	r4, r6
    4ce4:	bf28      	it	cs
    4ce6:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    4ce8:	4622      	mov	r2, r4
    4cea:	4628      	mov	r0, r5
    4cec:	f002 f8a5 	bl	6e3a <_WriteNoCheck>
    break;
    4cf0:	e7f1      	b.n	4cd6 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    4cf2:	4628      	mov	r0, r5
}
    4cf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    4cf8:	f002 b8bb 	b.w	6e72 <_WriteBlocking>
  switch (pRing->Flags) {
    4cfc:	2400      	movs	r4, #0
  return Status;
    4cfe:	e7ea      	b.n	4cd6 <SEGGER_RTT_WriteNoLock+0x32>
    4d00:	20000a1c 	.word	0x20000a1c

00004d04 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    4d04:	4b03      	ldr	r3, [pc, #12]	; (4d14 <SEGGER_RTT_HasDataUp+0x10>)
    4d06:	2218      	movs	r2, #24
    4d08:	fb02 3300 	mla	r3, r2, r0, r3
    4d0c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    4d0e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    4d10:	1a80      	subs	r0, r0, r2
    4d12:	4770      	bx	lr
    4d14:	20000a1c 	.word	0x20000a1c

00004d18 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4d18:	4b0e      	ldr	r3, [pc, #56]	; (4d54 <z_sys_init_run_level+0x3c>)
{
    4d1a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4d1c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    4d20:	3001      	adds	r0, #1
    4d22:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    4d26:	42a6      	cmp	r6, r4
    4d28:	d800      	bhi.n	4d2c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    4d2a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    4d2c:	e9d4 3500 	ldrd	r3, r5, [r4]
    4d30:	4628      	mov	r0, r5
    4d32:	4798      	blx	r3
		if (dev != NULL) {
    4d34:	b165      	cbz	r5, 4d50 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    4d36:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    4d38:	b130      	cbz	r0, 4d48 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    4d3a:	2800      	cmp	r0, #0
    4d3c:	bfb8      	it	lt
    4d3e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    4d40:	28ff      	cmp	r0, #255	; 0xff
    4d42:	bfa8      	it	ge
    4d44:	20ff      	movge	r0, #255	; 0xff
    4d46:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    4d48:	785a      	ldrb	r2, [r3, #1]
    4d4a:	f042 0201 	orr.w	r2, r2, #1
    4d4e:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    4d50:	3408      	adds	r4, #8
    4d52:	e7e8      	b.n	4d26 <z_sys_init_run_level+0xe>
    4d54:	00007620 	.word	0x00007620

00004d58 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4d58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d5c:	b086      	sub	sp, #24
    4d5e:	4605      	mov	r5, r0
    4d60:	af00      	add	r7, sp, #0
    4d62:	460e      	mov	r6, r1
	__asm__ volatile(
    4d64:	f04f 0320 	mov.w	r3, #32
    4d68:	f3ef 8811 	mrs	r8, BASEPRI
    4d6c:	f383 8812 	msr	BASEPRI_MAX, r3
    4d70:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    4d74:	f000 ff46 	bl	5c04 <z_impl_z_current_get>
    4d78:	2d04      	cmp	r5, #4
    4d7a:	bf96      	itet	ls
    4d7c:	4b2c      	ldrls	r3, [pc, #176]	; (4e30 <z_fatal_error+0xd8>)
    4d7e:	4b2d      	ldrhi	r3, [pc, #180]	; (4e34 <z_fatal_error+0xdc>)
    4d80:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    4d84:	492c      	ldr	r1, [pc, #176]	; (4e38 <z_fatal_error+0xe0>)
    4d86:	46e9      	mov	r9, sp
    4d88:	b08a      	sub	sp, #40	; 0x28
    4d8a:	466a      	mov	r2, sp
    4d8c:	f04f 0a00 	mov.w	sl, #0
    4d90:	61d3      	str	r3, [r2, #28]
    4d92:	2303      	movs	r3, #3
    4d94:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    4d98:	4b28      	ldr	r3, [pc, #160]	; (4e3c <z_fatal_error+0xe4>)
    4d9a:	f8c2 a020 	str.w	sl, [r2, #32]
    4d9e:	e9c2 1505 	strd	r1, r5, [r2, #20]
    4da2:	4604      	mov	r4, r0
    4da4:	f842 3f10 	str.w	r3, [r2, #16]!
    4da8:	4825      	ldr	r0, [pc, #148]	; (4e40 <z_fatal_error+0xe8>)
    4daa:	4653      	mov	r3, sl
    4dac:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
    4db0:	f001 fdd6 	bl	6960 <z_impl_z_log_msg2_static_create>
    4db4:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    4db6:	b17e      	cbz	r6, 4dd8 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    4db8:	69f3      	ldr	r3, [r6, #28]
    4dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
    4dbe:	b15b      	cbz	r3, 4dd8 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    4dc0:	4b20      	ldr	r3, [pc, #128]	; (4e44 <z_fatal_error+0xec>)
    4dc2:	617b      	str	r3, [r7, #20]
    4dc4:	2302      	movs	r3, #2
    4dc6:	613b      	str	r3, [r7, #16]
    4dc8:	481d      	ldr	r0, [pc, #116]	; (4e40 <z_fatal_error+0xe8>)
    4dca:	4653      	mov	r3, sl
    4dcc:	f107 0210 	add.w	r2, r7, #16
    4dd0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4dd4:	f001 fdc4 	bl	6960 <z_impl_z_log_msg2_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    4dd8:	b12c      	cbz	r4, 4de6 <z_fatal_error+0x8e>
    4dda:	4620      	mov	r0, r4
    4ddc:	f002 f891 	bl	6f02 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    4de0:	b108      	cbz	r0, 4de6 <z_fatal_error+0x8e>
    4de2:	7803      	ldrb	r3, [r0, #0]
    4de4:	b903      	cbnz	r3, 4de8 <z_fatal_error+0x90>
		thread_name = "unknown";
    4de6:	4818      	ldr	r0, [pc, #96]	; (4e48 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    4de8:	4b18      	ldr	r3, [pc, #96]	; (4e4c <z_fatal_error+0xf4>)
    4dea:	46e9      	mov	r9, sp
    4dec:	b08a      	sub	sp, #40	; 0x28
    4dee:	466a      	mov	r2, sp
    4df0:	e9c2 3405 	strd	r3, r4, [r2, #20]
    4df4:	2303      	movs	r3, #3
    4df6:	f882 3020 	strb.w	r3, [r2, #32]
    4dfa:	4b15      	ldr	r3, [pc, #84]	; (4e50 <z_fatal_error+0xf8>)
    4dfc:	61d0      	str	r0, [r2, #28]
    4dfe:	f842 3f10 	str.w	r3, [r2, #16]!
    4e02:	2300      	movs	r3, #0
    4e04:	480e      	ldr	r0, [pc, #56]	; (4e40 <z_fatal_error+0xe8>)
    4e06:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    4e0a:	f001 fda9 	bl	6960 <z_impl_z_log_msg2_static_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4e0e:	4631      	mov	r1, r6
    4e10:	46cd      	mov	sp, r9
    4e12:	4628      	mov	r0, r5
    4e14:	f7fe fede 	bl	3bd4 <k_sys_fatal_error_handler>
	__asm__ volatile(
    4e18:	f388 8811 	msr	BASEPRI, r8
    4e1c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4e20:	4620      	mov	r0, r4
    4e22:	f7fd ff13 	bl	2c4c <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4e26:	3718      	adds	r7, #24
    4e28:	46bd      	mov	sp, r7
    4e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4e2e:	bf00      	nop
    4e30:	00007638 	.word	0x00007638
    4e34:	00007cdf 	.word	0x00007cdf
    4e38:	00007cf5 	.word	0x00007cf5
    4e3c:	01000005 	.word	0x01000005
    4e40:	00007480 	.word	0x00007480
    4e44:	00007d1d 	.word	0x00007d1d
    4e48:	00007ced 	.word	0x00007ced
    4e4c:	00007d3e 	.word	0x00007d3e
    4e50:	01000004 	.word	0x01000004

00004e54 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    4e54:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    4e56:	4b0a      	ldr	r3, [pc, #40]	; (4e80 <bg_thread_main+0x2c>)
    4e58:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4e5a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    4e5c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    4e5e:	f7ff ff5b 	bl	4d18 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    4e62:	f001 f923 	bl	60ac <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    4e66:	2003      	movs	r0, #3
    4e68:	f7ff ff56 	bl	4d18 <z_sys_init_run_level>

	z_init_static_threads();
    4e6c:	f000 f93a 	bl	50e4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    4e70:	f7fb faa4 	bl	3bc <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    4e74:	4a03      	ldr	r2, [pc, #12]	; (4e84 <bg_thread_main+0x30>)
    4e76:	7b13      	ldrb	r3, [r2, #12]
    4e78:	f023 0301 	bic.w	r3, r3, #1
    4e7c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    4e7e:	bd08      	pop	{r3, pc}
    4e80:	200011d0 	.word	0x200011d0
    4e84:	20000668 	.word	0x20000668

00004e88 <z_bss_zero>:
{
    4e88:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    4e8a:	4803      	ldr	r0, [pc, #12]	; (4e98 <z_bss_zero+0x10>)
    4e8c:	4a03      	ldr	r2, [pc, #12]	; (4e9c <z_bss_zero+0x14>)
    4e8e:	2100      	movs	r1, #0
    4e90:	1a12      	subs	r2, r2, r0
    4e92:	f002 f829 	bl	6ee8 <z_early_memset>
}
    4e96:	bd08      	pop	{r3, pc}
    4e98:	20000110 	.word	0x20000110
    4e9c:	200011d4 	.word	0x200011d4

00004ea0 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    4ea0:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    4ea2:	2300      	movs	r3, #0
{
    4ea4:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    4ea6:	2201      	movs	r2, #1
    4ea8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    4eac:	4e13      	ldr	r6, [pc, #76]	; (4efc <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4eae:	4d14      	ldr	r5, [pc, #80]	; (4f00 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    4eb0:	9301      	str	r3, [sp, #4]
    4eb2:	220f      	movs	r2, #15
    4eb4:	e9cd 3202 	strd	r3, r2, [sp, #8]
    4eb8:	4912      	ldr	r1, [pc, #72]	; (4f04 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    4eba:	2318      	movs	r3, #24
    4ebc:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    4ec0:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    4ec4:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    4ec6:	f44f 7090 	mov.w	r0, #288	; 0x120
    4eca:	fb00 1104 	mla	r1, r0, r4, r1
    4ece:	4b0e      	ldr	r3, [pc, #56]	; (4f08 <z_init_cpu+0x68>)
    4ed0:	9500      	str	r5, [sp, #0]
    4ed2:	f44f 7280 	mov.w	r2, #256	; 0x100
    4ed6:	4630      	mov	r0, r6
    4ed8:	f000 f8a6 	bl	5028 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    4edc:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4ede:	480b      	ldr	r0, [pc, #44]	; (4f0c <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    4ee0:	752c      	strb	r4, [r5, #20]
    4ee2:	f023 0304 	bic.w	r3, r3, #4
    4ee6:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    4ee8:	f44f 6302 	mov.w	r3, #2080	; 0x820
    4eec:	fb03 0404 	mla	r4, r3, r4, r0
    4ef0:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    4ef2:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    4ef4:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    4ef6:	b006      	add	sp, #24
    4ef8:	bd70      	pop	{r4, r5, r6, pc}
    4efa:	bf00      	nop
    4efc:	200005e8 	.word	0x200005e8
    4f00:	20000ac4 	.word	0x20000ac4
    4f04:	20001920 	.word	0x20001920
    4f08:	0000519d 	.word	0x0000519d
    4f0c:	20001a40 	.word	0x20001a40

00004f10 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    4f10:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    4f12:	4b2d      	ldr	r3, [pc, #180]	; (4fc8 <z_cstart+0xb8>)
    4f14:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    4f16:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    4f1a:	4d2c      	ldr	r5, [pc, #176]	; (4fcc <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    4f1c:	4e2c      	ldr	r6, [pc, #176]	; (4fd0 <z_cstart+0xc0>)
    4f1e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4f20:	4f2c      	ldr	r7, [pc, #176]	; (4fd4 <z_cstart+0xc4>)
    4f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4f26:	2400      	movs	r4, #0
    4f28:	616b      	str	r3, [r5, #20]
    4f2a:	23e0      	movs	r3, #224	; 0xe0
    4f2c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4f30:	77ec      	strb	r4, [r5, #31]
    4f32:	762c      	strb	r4, [r5, #24]
    4f34:	766c      	strb	r4, [r5, #25]
    4f36:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    4f38:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    4f3a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    4f3e:	626b      	str	r3, [r5, #36]	; 0x24
    4f40:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    4f44:	f7fd fdf6 	bl	2b34 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    4f48:	f7fd f982 	bl	2250 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    4f4c:	f04f 33ff 	mov.w	r3, #4294967295
    4f50:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    4f52:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    4f54:	f7fd ff48 	bl	2de8 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    4f58:	f7fd fe8e 	bl	2c78 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    4f5c:	f7fc fc20 	bl	17a0 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    4f60:	f240 1301 	movw	r3, #257	; 0x101
    4f64:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    4f68:	ab06      	add	r3, sp, #24
    4f6a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    4f6c:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    4f70:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    4f72:	f001 ffae 	bl	6ed2 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    4f76:	4620      	mov	r0, r4
    4f78:	f7ff fece 	bl	4d18 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4f7c:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    4f7e:	4d16      	ldr	r5, [pc, #88]	; (4fd8 <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    4f80:	f7ff feca 	bl	4d18 <z_sys_init_run_level>
	z_sched_init();
    4f84:	f000 fd90 	bl	5aa8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4f88:	4b14      	ldr	r3, [pc, #80]	; (4fdc <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
    4f8a:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    4f8c:	9305      	str	r3, [sp, #20]
    4f8e:	2301      	movs	r3, #1
    4f90:	4913      	ldr	r1, [pc, #76]	; (4fe0 <z_cstart+0xd0>)
    4f92:	9400      	str	r4, [sp, #0]
    4f94:	e9cd 4303 	strd	r4, r3, [sp, #12]
    4f98:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4f9c:	463b      	mov	r3, r7
    4f9e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    4fa2:	4628      	mov	r0, r5
    4fa4:	f000 f840 	bl	5028 <z_setup_new_thread>
    4fa8:	7b6a      	ldrb	r2, [r5, #13]
    4faa:	4606      	mov	r6, r0
    4fac:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    4fb0:	4628      	mov	r0, r5
    4fb2:	736a      	strb	r2, [r5, #13]
    4fb4:	f002 f83d 	bl	7032 <z_ready_thread>
	z_init_cpu(0);
    4fb8:	4620      	mov	r0, r4
    4fba:	f7ff ff71 	bl	4ea0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    4fbe:	463a      	mov	r2, r7
    4fc0:	4631      	mov	r1, r6
    4fc2:	4628      	mov	r0, r5
    4fc4:	f7fd fac0 	bl	2548 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    4fc8:	20002260 	.word	0x20002260
    4fcc:	e000ed00 	.word	0xe000ed00
    4fd0:	20000ac4 	.word	0x20000ac4
    4fd4:	00004e55 	.word	0x00004e55
    4fd8:	20000668 	.word	0x20000668
    4fdc:	00007651 	.word	0x00007651
    4fe0:	20001500 	.word	0x20001500

00004fe4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    4fe4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    4fe6:	4b0e      	ldr	r3, [pc, #56]	; (5020 <init_mem_slab_module+0x3c>)
    4fe8:	4c0e      	ldr	r4, [pc, #56]	; (5024 <init_mem_slab_module+0x40>)
    4fea:	42a3      	cmp	r3, r4
    4fec:	d301      	bcc.n	4ff2 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    4fee:	2000      	movs	r0, #0
	return rc;
}
    4ff0:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    4ff2:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    4ff6:	ea41 0200 	orr.w	r2, r1, r0
    4ffa:	f012 0203 	ands.w	r2, r2, #3
    4ffe:	d10b      	bne.n	5018 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    5000:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    5002:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    5004:	42aa      	cmp	r2, r5
    5006:	d101      	bne.n	500c <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5008:	331c      	adds	r3, #28
    500a:	e7ee      	b.n	4fea <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    500c:	695e      	ldr	r6, [r3, #20]
    500e:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    5010:	3201      	adds	r2, #1
		slab->free_list = p;
    5012:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    5014:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    5016:	e7f5      	b.n	5004 <init_mem_slab_module+0x20>
	return rc;
    5018:	f06f 0015 	mvn.w	r0, #21
    501c:	e7e8      	b.n	4ff0 <init_mem_slab_module+0xc>
    501e:	bf00      	nop
    5020:	200000e8 	.word	0x200000e8
    5024:	200000e8 	.word	0x200000e8

00005028 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    5028:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    502c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    502e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    5030:	2604      	movs	r6, #4
    5032:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    5034:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    5036:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    5038:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    503c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    503e:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    5040:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5044:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    5046:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    5048:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    504c:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    504e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    5052:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    5056:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    5058:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    505a:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    505c:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5060:	9202      	str	r2, [sp, #8]
    5062:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    5064:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    5066:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5068:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    506a:	9200      	str	r2, [sp, #0]
    506c:	4642      	mov	r2, r8
{
    506e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    5070:	f7fd fa38 	bl	24e4 <arch_new_thread>
	if (!_current) {
    5074:	4b04      	ldr	r3, [pc, #16]	; (5088 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    5076:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    5078:	689b      	ldr	r3, [r3, #8]
    507a:	b103      	cbz	r3, 507e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    507c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    507e:	6723      	str	r3, [r4, #112]	; 0x70
}
    5080:	4640      	mov	r0, r8
    5082:	b004      	add	sp, #16
    5084:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5088:	20000ac4 	.word	0x20000ac4

0000508c <z_impl_k_thread_create>:
{
    508c:	b5f0      	push	{r4, r5, r6, r7, lr}
    508e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    5090:	2700      	movs	r7, #0
    5092:	9705      	str	r7, [sp, #20]
    5094:	9f10      	ldr	r7, [sp, #64]	; 0x40
    5096:	9704      	str	r7, [sp, #16]
    5098:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    509a:	9703      	str	r7, [sp, #12]
    509c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    509e:	9702      	str	r7, [sp, #8]
{
    50a0:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    50a4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    50a6:	9701      	str	r7, [sp, #4]
    50a8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    50aa:	9700      	str	r7, [sp, #0]
{
    50ac:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    50ae:	f7ff ffbb 	bl	5028 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    50b2:	f1b5 3fff 	cmp.w	r5, #4294967295
    50b6:	bf08      	it	eq
    50b8:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    50bc:	d005      	beq.n	50ca <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    50be:	ea55 0306 	orrs.w	r3, r5, r6
    50c2:	d105      	bne.n	50d0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    50c4:	4620      	mov	r0, r4
    50c6:	f000 fbe9 	bl	589c <z_sched_start>
}
    50ca:	4620      	mov	r0, r4
    50cc:	b007      	add	sp, #28
    50ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    50d0:	4903      	ldr	r1, [pc, #12]	; (50e0 <z_impl_k_thread_create+0x54>)
    50d2:	4632      	mov	r2, r6
    50d4:	462b      	mov	r3, r5
    50d6:	f104 0018 	add.w	r0, r4, #24
    50da:	f000 fe61 	bl	5da0 <z_add_timeout>
    50de:	e7f4      	b.n	50ca <z_impl_k_thread_create+0x3e>
    50e0:	00007053 	.word	0x00007053

000050e4 <z_init_static_threads>:
{
    50e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    50e8:	4c29      	ldr	r4, [pc, #164]	; (5190 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    50ea:	4d2a      	ldr	r5, [pc, #168]	; (5194 <z_init_static_threads+0xb0>)
{
    50ec:	b087      	sub	sp, #28
    50ee:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    50f0:	42ae      	cmp	r6, r5
    50f2:	f104 0430 	add.w	r4, r4, #48	; 0x30
    50f6:	d30f      	bcc.n	5118 <z_init_static_threads+0x34>
	k_sched_lock();
    50f8:	f000 faea 	bl	56d0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    50fc:	4c24      	ldr	r4, [pc, #144]	; (5190 <z_init_static_threads+0xac>)
    50fe:	f8df 9098 	ldr.w	r9, [pc, #152]	; 5198 <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    5102:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    5106:	f240 37e7 	movw	r7, #999	; 0x3e7
    510a:	42ac      	cmp	r4, r5
    510c:	d320      	bcc.n	5150 <z_init_static_threads+0x6c>
}
    510e:	b007      	add	sp, #28
    5110:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    5114:	f000 bcac 	b.w	5a70 <k_sched_unlock>
		z_setup_new_thread(
    5118:	f854 3c04 	ldr.w	r3, [r4, #-4]
    511c:	9305      	str	r3, [sp, #20]
    511e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    5122:	9304      	str	r3, [sp, #16]
    5124:	f854 3c14 	ldr.w	r3, [r4, #-20]
    5128:	9303      	str	r3, [sp, #12]
    512a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    512e:	9302      	str	r3, [sp, #8]
    5130:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    5134:	9301      	str	r3, [sp, #4]
    5136:	f854 3c20 	ldr.w	r3, [r4, #-32]
    513a:	9300      	str	r3, [sp, #0]
    513c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    5140:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    5144:	f7ff ff70 	bl	5028 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    5148:	f854 3c30 	ldr.w	r3, [r4, #-48]
    514c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    514e:	e7ce      	b.n	50ee <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    5150:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5152:	1c5a      	adds	r2, r3, #1
    5154:	d00d      	beq.n	5172 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    5156:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    515a:	2100      	movs	r1, #0
    515c:	4638      	mov	r0, r7
    515e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    5162:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    5166:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    516a:	d104      	bne.n	5176 <z_init_static_threads+0x92>
	z_sched_start(thread);
    516c:	4640      	mov	r0, r8
    516e:	f000 fb95 	bl	589c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    5172:	3430      	adds	r4, #48	; 0x30
    5174:	e7c9      	b.n	510a <z_init_static_threads+0x26>
    5176:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    517a:	2300      	movs	r3, #0
    517c:	f7fa ffb0 	bl	e0 <__aeabi_uldivmod>
    5180:	4602      	mov	r2, r0
    5182:	460b      	mov	r3, r1
    5184:	f108 0018 	add.w	r0, r8, #24
    5188:	4649      	mov	r1, r9
    518a:	f000 fe09 	bl	5da0 <z_add_timeout>
    518e:	e7f0      	b.n	5172 <z_init_static_threads+0x8e>
    5190:	200000ac 	.word	0x200000ac
    5194:	200000ac 	.word	0x200000ac
    5198:	00007053 	.word	0x00007053

0000519c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    519c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    519e:	4c0b      	ldr	r4, [pc, #44]	; (51cc <idle+0x30>)
	return !z_sys_post_kernel;
    51a0:	4d0b      	ldr	r5, [pc, #44]	; (51d0 <idle+0x34>)
	__asm__ volatile(
    51a2:	f04f 0220 	mov.w	r2, #32
    51a6:	f3ef 8311 	mrs	r3, BASEPRI
    51aa:	f382 8812 	msr	BASEPRI_MAX, r2
    51ae:	f3bf 8f6f 	isb	sy
    51b2:	f001 fffa 	bl	71aa <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    51b6:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    51b8:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    51ba:	b913      	cbnz	r3, 51c2 <idle+0x26>
	arch_cpu_idle();
    51bc:	f7fd f84e 	bl	225c <arch_cpu_idle>
}
    51c0:	e7ef      	b.n	51a2 <idle+0x6>
    51c2:	f7fc ff6b 	bl	209c <pm_system_suspend>
    51c6:	2800      	cmp	r0, #0
    51c8:	d1eb      	bne.n	51a2 <idle+0x6>
    51ca:	e7f7      	b.n	51bc <idle+0x20>
    51cc:	20000ac4 	.word	0x20000ac4
    51d0:	200011d0 	.word	0x200011d0

000051d4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    51d4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    51d8:	4604      	mov	r4, r0
    51da:	4617      	mov	r7, r2
    51dc:	461e      	mov	r6, r3
    51de:	f04f 0320 	mov.w	r3, #32
    51e2:	f3ef 8811 	mrs	r8, BASEPRI
    51e6:	f383 8812 	msr	BASEPRI_MAX, r3
    51ea:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    51ee:	68c3      	ldr	r3, [r0, #12]
    51f0:	4a32      	ldr	r2, [pc, #200]	; (52bc <z_impl_k_mutex_lock+0xe8>)
    51f2:	b16b      	cbz	r3, 5210 <z_impl_k_mutex_lock+0x3c>
    51f4:	6880      	ldr	r0, [r0, #8]
    51f6:	6891      	ldr	r1, [r2, #8]
    51f8:	4288      	cmp	r0, r1
    51fa:	d019      	beq.n	5230 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    51fc:	ea57 0306 	orrs.w	r3, r7, r6
    5200:	d118      	bne.n	5234 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    5202:	f388 8811 	msr	BASEPRI, r8
    5206:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    520a:	f06f 000f 	mvn.w	r0, #15
    520e:	e00c      	b.n	522a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    5210:	6891      	ldr	r1, [r2, #8]
    5212:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5216:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    5218:	3301      	adds	r3, #1
    521a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    521c:	6893      	ldr	r3, [r2, #8]
    521e:	60a3      	str	r3, [r4, #8]
    5220:	f388 8811 	msr	BASEPRI, r8
    5224:	f3bf 8f6f 	isb	sy
		return 0;
    5228:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    522a:	b002      	add	sp, #8
    522c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    5230:	6921      	ldr	r1, [r4, #16]
    5232:	e7f0      	b.n	5216 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5234:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5238:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    523c:	4299      	cmp	r1, r3
    523e:	bfa8      	it	ge
    5240:	4619      	movge	r1, r3
    5242:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    5246:	4291      	cmp	r1, r2
    5248:	bfb8      	it	lt
    524a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    524c:	428b      	cmp	r3, r1
    524e:	dd2e      	ble.n	52ae <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    5250:	f001 fe62 	bl	6f18 <adjust_owner_prio.isra.0>
    5254:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5256:	e9cd 7600 	strd	r7, r6, [sp]
    525a:	4819      	ldr	r0, [pc, #100]	; (52c0 <z_impl_k_mutex_lock+0xec>)
    525c:	4622      	mov	r2, r4
    525e:	4641      	mov	r1, r8
    5260:	f000 fb78 	bl	5954 <z_pend_curr>
	if (got_mutex == 0) {
    5264:	2800      	cmp	r0, #0
    5266:	d0e0      	beq.n	522a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    5268:	f04f 0320 	mov.w	r3, #32
    526c:	f3ef 8611 	mrs	r6, BASEPRI
    5270:	f383 8812 	msr	BASEPRI_MAX, r3
    5274:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5278:	6823      	ldr	r3, [r4, #0]
    527a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    527c:	429c      	cmp	r4, r3
    527e:	d00a      	beq.n	5296 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    5280:	b14b      	cbz	r3, 5296 <z_impl_k_mutex_lock+0xc2>
    5282:	f993 300e 	ldrsb.w	r3, [r3, #14]
    5286:	4299      	cmp	r1, r3
    5288:	bfa8      	it	ge
    528a:	4619      	movge	r1, r3
    528c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    5290:	4299      	cmp	r1, r3
    5292:	bfb8      	it	lt
    5294:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    5296:	68a0      	ldr	r0, [r4, #8]
    5298:	f001 fe3e 	bl	6f18 <adjust_owner_prio.isra.0>
    529c:	b900      	cbnz	r0, 52a0 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    529e:	b145      	cbz	r5, 52b2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    52a0:	4807      	ldr	r0, [pc, #28]	; (52c0 <z_impl_k_mutex_lock+0xec>)
    52a2:	4631      	mov	r1, r6
    52a4:	f000 fa02 	bl	56ac <z_reschedule>
	return -EAGAIN;
    52a8:	f06f 000a 	mvn.w	r0, #10
    52ac:	e7bd      	b.n	522a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    52ae:	2500      	movs	r5, #0
    52b0:	e7d1      	b.n	5256 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    52b2:	f386 8811 	msr	BASEPRI, r6
    52b6:	f3bf 8f6f 	isb	sy
    52ba:	e7f5      	b.n	52a8 <z_impl_k_mutex_lock+0xd4>
    52bc:	20000ac4 	.word	0x20000ac4
    52c0:	200011d1 	.word	0x200011d1

000052c4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    52c4:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    52c6:	6883      	ldr	r3, [r0, #8]
{
    52c8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    52ca:	2b00      	cmp	r3, #0
    52cc:	d032      	beq.n	5334 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    52ce:	4a1c      	ldr	r2, [pc, #112]	; (5340 <z_impl_k_mutex_unlock+0x7c>)
    52d0:	6892      	ldr	r2, [r2, #8]
    52d2:	4293      	cmp	r3, r2
    52d4:	d131      	bne.n	533a <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    52d6:	7bda      	ldrb	r2, [r3, #15]
    52d8:	3a01      	subs	r2, #1
    52da:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    52dc:	68c3      	ldr	r3, [r0, #12]
    52de:	2b01      	cmp	r3, #1
    52e0:	d905      	bls.n	52ee <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    52e2:	3b01      	subs	r3, #1
    52e4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    52e6:	f000 fbc3 	bl	5a70 <k_sched_unlock>

	return 0;
    52ea:	2000      	movs	r0, #0
}
    52ec:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    52ee:	f04f 0320 	mov.w	r3, #32
    52f2:	f3ef 8511 	mrs	r5, BASEPRI
    52f6:	f383 8812 	msr	BASEPRI_MAX, r3
    52fa:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    52fe:	6901      	ldr	r1, [r0, #16]
    5300:	6880      	ldr	r0, [r0, #8]
    5302:	f001 fe09 	bl	6f18 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    5306:	4620      	mov	r0, r4
    5308:	f001 ff04 	bl	7114 <z_unpend_first_thread>
	mutex->owner = new_owner;
    530c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    530e:	b158      	cbz	r0, 5328 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    5310:	f990 200e 	ldrsb.w	r2, [r0, #14]
    5314:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5316:	2200      	movs	r2, #0
    5318:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    531a:	f001 fe8a 	bl	7032 <z_ready_thread>
		z_reschedule(&lock, key);
    531e:	4809      	ldr	r0, [pc, #36]	; (5344 <z_impl_k_mutex_unlock+0x80>)
    5320:	4629      	mov	r1, r5
    5322:	f000 f9c3 	bl	56ac <z_reschedule>
    5326:	e7de      	b.n	52e6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    5328:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    532a:	f385 8811 	msr	BASEPRI, r5
    532e:	f3bf 8f6f 	isb	sy
    5332:	e7d8      	b.n	52e6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    5334:	f06f 0015 	mvn.w	r0, #21
    5338:	e7d8      	b.n	52ec <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    533a:	f04f 30ff 	mov.w	r0, #4294967295
    533e:	e7d5      	b.n	52ec <z_impl_k_mutex_unlock+0x28>
    5340:	20000ac4 	.word	0x20000ac4
    5344:	200011d1 	.word	0x200011d1

00005348 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    5348:	b538      	push	{r3, r4, r5, lr}
    534a:	4604      	mov	r4, r0
	__asm__ volatile(
    534c:	f04f 0320 	mov.w	r3, #32
    5350:	f3ef 8511 	mrs	r5, BASEPRI
    5354:	f383 8812 	msr	BASEPRI_MAX, r3
    5358:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    535c:	f001 feda 	bl	7114 <z_unpend_first_thread>

	if (thread != NULL) {
    5360:	b148      	cbz	r0, 5376 <z_impl_k_sem_give+0x2e>
    5362:	2200      	movs	r2, #0
    5364:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    5366:	f001 fe64 	bl	7032 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    536a:	4629      	mov	r1, r5
    536c:	4805      	ldr	r0, [pc, #20]	; (5384 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    536e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    5372:	f000 b99b 	b.w	56ac <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    5376:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    537a:	429a      	cmp	r2, r3
    537c:	bf18      	it	ne
    537e:	3301      	addne	r3, #1
    5380:	60a3      	str	r3, [r4, #8]
}
    5382:	e7f2      	b.n	536a <z_impl_k_sem_give+0x22>
    5384:	200011d1 	.word	0x200011d1

00005388 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    5388:	b513      	push	{r0, r1, r4, lr}
    538a:	f04f 0420 	mov.w	r4, #32
    538e:	f3ef 8111 	mrs	r1, BASEPRI
    5392:	f384 8812 	msr	BASEPRI_MAX, r4
    5396:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    539a:	6884      	ldr	r4, [r0, #8]
    539c:	b144      	cbz	r4, 53b0 <z_impl_k_sem_take+0x28>
		sem->count--;
    539e:	3c01      	subs	r4, #1
    53a0:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    53a2:	f381 8811 	msr	BASEPRI, r1
    53a6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    53aa:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    53ac:	b002      	add	sp, #8
    53ae:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    53b0:	ea52 0403 	orrs.w	r4, r2, r3
    53b4:	d106      	bne.n	53c4 <z_impl_k_sem_take+0x3c>
    53b6:	f381 8811 	msr	BASEPRI, r1
    53ba:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    53be:	f06f 000f 	mvn.w	r0, #15
    53c2:	e7f3      	b.n	53ac <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    53c4:	e9cd 2300 	strd	r2, r3, [sp]
    53c8:	4602      	mov	r2, r0
    53ca:	4802      	ldr	r0, [pc, #8]	; (53d4 <z_impl_k_sem_take+0x4c>)
    53cc:	f000 fac2 	bl	5954 <z_pend_curr>
	return ret;
    53d0:	e7ec      	b.n	53ac <z_impl_k_sem_take+0x24>
    53d2:	bf00      	nop
    53d4:	200011d1 	.word	0x200011d1

000053d8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    53d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    53dc:	4e47      	ldr	r6, [pc, #284]	; (54fc <work_queue_main+0x124>)
    53de:	b085      	sub	sp, #20
    53e0:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    53e2:	f04f 38ff 	mov.w	r8, #4294967295
    53e6:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
    53ea:	f04f 0320 	mov.w	r3, #32
    53ee:	f3ef 8711 	mrs	r7, BASEPRI
    53f2:	f383 8812 	msr	BASEPRI_MAX, r3
    53f6:	f3bf 8f6f 	isb	sy
    53fa:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    53fe:	b98d      	cbnz	r5, 5424 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    5400:	2102      	movs	r1, #2
    5402:	f104 0098 	add.w	r0, r4, #152	; 0x98
    5406:	f001 fda2 	bl	6f4e <flag_test_and_clear>
    540a:	2800      	cmp	r0, #0
    540c:	d135      	bne.n	547a <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    540e:	2300      	movs	r3, #0
    5410:	e9cd 8900 	strd	r8, r9, [sp]
    5414:	9302      	str	r3, [sp, #8]
    5416:	f104 0288 	add.w	r2, r4, #136	; 0x88
    541a:	4639      	mov	r1, r7
    541c:	4838      	ldr	r0, [pc, #224]	; (5500 <work_queue_main+0x128>)
    541e:	f000 fc49 	bl	5cb4 <z_sched_wait>
			continue;
    5422:	e7e2      	b.n	53ea <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    5424:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    5428:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    542a:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    542e:	4295      	cmp	r5, r2
    5430:	d101      	bne.n	5436 <work_queue_main+0x5e>
	list->tail = node;
    5432:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    5436:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    543a:	f043 0302 	orr.w	r3, r3, #2
    543e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    5442:	68eb      	ldr	r3, [r5, #12]
    5444:	f023 0304 	bic.w	r3, r3, #4
    5448:	f043 0301 	orr.w	r3, r3, #1
    544c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    544e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    5450:	f387 8811 	msr	BASEPRI, r7
    5454:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    5458:	4628      	mov	r0, r5
    545a:	4798      	blx	r3
	__asm__ volatile(
    545c:	f04f 0320 	mov.w	r3, #32
    5460:	f3ef 8b11 	mrs	fp, BASEPRI
    5464:	f383 8812 	msr	BASEPRI_MAX, r3
    5468:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    546c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    546e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    5470:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    5474:	d40b      	bmi.n	548e <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
    5476:	60ea      	str	r2, [r5, #12]
    5478:	e00e      	b.n	5498 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    547a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    547e:	2200      	movs	r2, #0
    5480:	2101      	movs	r1, #1
    5482:	4628      	mov	r0, r5
    5484:	f001 fe5e 	bl	7144 <z_sched_wake>
    5488:	2800      	cmp	r0, #0
    548a:	d1f8      	bne.n	547e <work_queue_main+0xa6>
    548c:	e7bf      	b.n	540e <work_queue_main+0x36>
	return list->head;
    548e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    5490:	f023 0303 	bic.w	r3, r3, #3
    5494:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    5496:	b970      	cbnz	r0, 54b6 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
    5498:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    549c:	f023 0302 	bic.w	r3, r3, #2
    54a0:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    54a4:	f38b 8811 	msr	BASEPRI, fp
    54a8:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    54ac:	05d8      	lsls	r0, r3, #23
    54ae:	d49c      	bmi.n	53ea <work_queue_main+0x12>
	z_impl_k_yield();
    54b0:	f000 fb06 	bl	5ac0 <z_impl_k_yield>
}
    54b4:	e799      	b.n	53ea <work_queue_main+0x12>
	return node->next;
    54b6:	2700      	movs	r7, #0
    54b8:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    54bc:	463b      	mov	r3, r7
		if (wc->work == work) {
    54be:	6842      	ldr	r2, [r0, #4]
    54c0:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    54c2:	4601      	mov	r1, r0
		if (wc->work == work) {
    54c4:	d10c      	bne.n	54e0 <work_queue_main+0x108>
	return node->next;
    54c6:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    54c8:	b997      	cbnz	r7, 54f0 <work_queue_main+0x118>
    54ca:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    54cc:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    54ce:	4282      	cmp	r2, r0
    54d0:	d100      	bne.n	54d4 <work_queue_main+0xfc>
	list->tail = node;
    54d2:	6071      	str	r1, [r6, #4]
	parent->next = child;
    54d4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    54d8:	f7ff ff36 	bl	5348 <z_impl_k_sem_give>
}
    54dc:	4639      	mov	r1, r7
    54de:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    54e0:	f1ba 0f00 	cmp.w	sl, #0
    54e4:	d0d8      	beq.n	5498 <work_queue_main+0xc0>
	return node->next;
    54e6:	4650      	mov	r0, sl
    54e8:	460f      	mov	r7, r1
    54ea:	f8da a000 	ldr.w	sl, [sl]
    54ee:	e7e6      	b.n	54be <work_queue_main+0xe6>
	return list->tail;
    54f0:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
    54f2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    54f4:	4290      	cmp	r0, r2
	list->tail = node;
    54f6:	bf08      	it	eq
    54f8:	6077      	streq	r7, [r6, #4]
}
    54fa:	e7eb      	b.n	54d4 <work_queue_main+0xfc>
    54fc:	20000aec 	.word	0x20000aec
    5500:	200011d1 	.word	0x200011d1

00005504 <submit_to_queue_locked>:
{
    5504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    5506:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    5508:	079a      	lsls	r2, r3, #30
{
    550a:	4604      	mov	r4, r0
    550c:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    550e:	f3c3 0540 	ubfx	r5, r3, #1, #1
    5512:	d41f      	bmi.n	5554 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    5514:	075f      	lsls	r7, r3, #29
    5516:	d41f      	bmi.n	5558 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    5518:	680a      	ldr	r2, [r1, #0]
    551a:	b90a      	cbnz	r2, 5520 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    551c:	6882      	ldr	r2, [r0, #8]
    551e:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    5520:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    5522:	bf44      	itt	mi
    5524:	68a3      	ldrmi	r3, [r4, #8]
    5526:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    5528:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    552a:	bf4c      	ite	mi
    552c:	2502      	movmi	r5, #2
		ret = 1;
    552e:	2501      	movpl	r5, #1
	if (queue == NULL) {
    5530:	b37f      	cbz	r7, 5592 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    5532:	4b1b      	ldr	r3, [pc, #108]	; (55a0 <submit_to_queue_locked+0x9c>)
    5534:	689b      	ldr	r3, [r3, #8]
    5536:	42bb      	cmp	r3, r7
    5538:	d111      	bne.n	555e <submit_to_queue_locked+0x5a>
    553a:	f001 fcd9 	bl	6ef0 <k_is_in_isr>
    553e:	f080 0001 	eor.w	r0, r0, #1
    5542:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
    5544:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    5548:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    554a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    554e:	d523      	bpl.n	5598 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    5550:	b13a      	cbz	r2, 5562 <submit_to_queue_locked+0x5e>
    5552:	b940      	cbnz	r0, 5566 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    5554:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    5558:	2300      	movs	r3, #0
    555a:	6033      	str	r3, [r6, #0]
	return ret;
    555c:	e013      	b.n	5586 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    555e:	2000      	movs	r0, #0
    5560:	e7f0      	b.n	5544 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    5562:	071b      	lsls	r3, r3, #28
    5564:	d4f6      	bmi.n	5554 <submit_to_queue_locked+0x50>
	parent->next = child;
    5566:	2300      	movs	r3, #0
    5568:	6023      	str	r3, [r4, #0]
	return list->tail;
    556a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    556e:	b963      	cbnz	r3, 558a <submit_to_queue_locked+0x86>
	list->head = node;
    5570:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    5574:	4638      	mov	r0, r7
    5576:	f001 fcf5 	bl	6f64 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    557a:	68e3      	ldr	r3, [r4, #12]
    557c:	f043 0304 	orr.w	r3, r3, #4
    5580:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    5582:	6833      	ldr	r3, [r6, #0]
    5584:	60a3      	str	r3, [r4, #8]
}
    5586:	4628      	mov	r0, r5
    5588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    558a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    558c:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    5590:	e7f0      	b.n	5574 <submit_to_queue_locked+0x70>
		return -EINVAL;
    5592:	f06f 0515 	mvn.w	r5, #21
    5596:	e7df      	b.n	5558 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    5598:	f06f 0512 	mvn.w	r5, #18
    559c:	e7dc      	b.n	5558 <submit_to_queue_locked+0x54>
    559e:	bf00      	nop
    55a0:	20000ac4 	.word	0x20000ac4

000055a4 <k_work_submit>:
{
    55a4:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    55a6:	4801      	ldr	r0, [pc, #4]	; (55ac <k_work_submit+0x8>)
    55a8:	f001 bce3 	b.w	6f72 <k_work_submit_to_queue>
    55ac:	200006f0 	.word	0x200006f0

000055b0 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    55b0:	b5f0      	push	{r4, r5, r6, r7, lr}
    55b2:	b089      	sub	sp, #36	; 0x24
    55b4:	4604      	mov	r4, r0
	list->head = NULL;
    55b6:	2000      	movs	r0, #0
	list->tail = NULL;
    55b8:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    55bc:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    55be:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    55c2:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    55c6:	f104 0090 	add.w	r0, r4, #144	; 0x90
    55ca:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    55ce:	b31d      	cbz	r5, 5618 <k_work_queue_start+0x68>
    55d0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    55d2:	2800      	cmp	r0, #0
    55d4:	f240 1001 	movw	r0, #257	; 0x101
    55d8:	bf08      	it	eq
    55da:	2001      	moveq	r0, #1
	*flagp = flags;
    55dc:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    55e0:	2000      	movs	r0, #0
    55e2:	f04f 36ff 	mov.w	r6, #4294967295
    55e6:	f04f 37ff 	mov.w	r7, #4294967295
    55ea:	e9cd 3003 	strd	r3, r0, [sp, #12]
    55ee:	e9cd 0001 	strd	r0, r0, [sp, #4]
    55f2:	e9cd 6706 	strd	r6, r7, [sp, #24]
    55f6:	4b09      	ldr	r3, [pc, #36]	; (561c <k_work_queue_start+0x6c>)
    55f8:	9400      	str	r4, [sp, #0]
    55fa:	4620      	mov	r0, r4
    55fc:	f7ff fd46 	bl	508c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    5600:	b125      	cbz	r5, 560c <k_work_queue_start+0x5c>
    5602:	6829      	ldr	r1, [r5, #0]
    5604:	b111      	cbz	r1, 560c <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    5606:	4620      	mov	r0, r4
    5608:	f001 fc78 	bl	6efc <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    560c:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    560e:	b009      	add	sp, #36	; 0x24
    5610:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    5614:	f001 bc77 	b.w	6f06 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    5618:	2001      	movs	r0, #1
    561a:	e7df      	b.n	55dc <k_work_queue_start+0x2c>
    561c:	000053d9 	.word	0x000053d9

00005620 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    5620:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    5622:	4d07      	ldr	r5, [pc, #28]	; (5640 <z_reset_time_slice+0x20>)
    5624:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    5626:	b154      	cbz	r4, 563e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    5628:	f7fe faca 	bl	3bc0 <sys_clock_elapsed>
    562c:	4b05      	ldr	r3, [pc, #20]	; (5644 <z_reset_time_slice+0x24>)
    562e:	4404      	add	r4, r0
    5630:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    5632:	6828      	ldr	r0, [r5, #0]
    5634:	2100      	movs	r1, #0
	}
}
    5636:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    563a:	f001 bdc6 	b.w	71ca <z_set_timeout_expiry>
}
    563e:	bd38      	pop	{r3, r4, r5, pc}
    5640:	20000afc 	.word	0x20000afc
    5644:	20000ac4 	.word	0x20000ac4

00005648 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    5648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    564a:	4604      	mov	r4, r0
    564c:	460d      	mov	r5, r1
	__asm__ volatile(
    564e:	f04f 0320 	mov.w	r3, #32
    5652:	f3ef 8711 	mrs	r7, BASEPRI
    5656:	f383 8812 	msr	BASEPRI_MAX, r3
    565a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    565e:	4e10      	ldr	r6, [pc, #64]	; (56a0 <k_sched_time_slice_set+0x58>)
    5660:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    5662:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    5666:	f240 30e7 	movw	r0, #999	; 0x3e7
    566a:	6131      	str	r1, [r6, #16]
    566c:	2300      	movs	r3, #0
    566e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5672:	fbe4 010c 	umlal	r0, r1, r4, ip
    5676:	f7fa fd33 	bl	e0 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    567a:	2c00      	cmp	r4, #0
    567c:	4b09      	ldr	r3, [pc, #36]	; (56a4 <k_sched_time_slice_set+0x5c>)
    567e:	dc0a      	bgt.n	5696 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    5680:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    5682:	4b09      	ldr	r3, [pc, #36]	; (56a8 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    5684:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    5686:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    5688:	f7ff ffca 	bl	5620 <z_reset_time_slice>
	__asm__ volatile(
    568c:	f387 8811 	msr	BASEPRI, r7
    5690:	f3bf 8f6f 	isb	sy
	}
}
    5694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    5696:	2802      	cmp	r0, #2
    5698:	bfb8      	it	lt
    569a:	2002      	movlt	r0, #2
    569c:	e7f0      	b.n	5680 <k_sched_time_slice_set+0x38>
    569e:	bf00      	nop
    56a0:	20000ac4 	.word	0x20000ac4
    56a4:	20000afc 	.word	0x20000afc
    56a8:	20000af8 	.word	0x20000af8

000056ac <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    56ac:	b949      	cbnz	r1, 56c2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    56ae:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    56b2:	b930      	cbnz	r0, 56c2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    56b4:	4b05      	ldr	r3, [pc, #20]	; (56cc <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    56b6:	69da      	ldr	r2, [r3, #28]
    56b8:	689b      	ldr	r3, [r3, #8]
    56ba:	429a      	cmp	r2, r3
    56bc:	d001      	beq.n	56c2 <z_reschedule+0x16>
	ret = arch_swap(key);
    56be:	f7fc bebd 	b.w	243c <arch_swap>
    56c2:	f381 8811 	msr	BASEPRI, r1
    56c6:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    56ca:	4770      	bx	lr
    56cc:	20000ac4 	.word	0x20000ac4

000056d0 <k_sched_lock>:
	__asm__ volatile(
    56d0:	f04f 0320 	mov.w	r3, #32
    56d4:	f3ef 8111 	mrs	r1, BASEPRI
    56d8:	f383 8812 	msr	BASEPRI_MAX, r3
    56dc:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    56e0:	4b04      	ldr	r3, [pc, #16]	; (56f4 <k_sched_lock+0x24>)
    56e2:	689a      	ldr	r2, [r3, #8]
    56e4:	7bd3      	ldrb	r3, [r2, #15]
    56e6:	3b01      	subs	r3, #1
    56e8:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    56ea:	f381 8811 	msr	BASEPRI, r1
    56ee:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    56f2:	4770      	bx	lr
    56f4:	20000ac4 	.word	0x20000ac4

000056f8 <update_cache>:
{
    56f8:	b538      	push	{r3, r4, r5, lr}
    56fa:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    56fc:	480c      	ldr	r0, [pc, #48]	; (5730 <update_cache+0x38>)
    56fe:	4d0d      	ldr	r5, [pc, #52]	; (5734 <update_cache+0x3c>)
    5700:	f001 fc91 	bl	7026 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    5704:	4604      	mov	r4, r0
    5706:	b900      	cbnz	r0, 570a <update_cache+0x12>
    5708:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    570a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    570c:	b94a      	cbnz	r2, 5722 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    570e:	7b5a      	ldrb	r2, [r3, #13]
    5710:	06d2      	lsls	r2, r2, #27
    5712:	d106      	bne.n	5722 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    5714:	69a2      	ldr	r2, [r4, #24]
    5716:	b922      	cbnz	r2, 5722 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    5718:	89da      	ldrh	r2, [r3, #14]
    571a:	2a7f      	cmp	r2, #127	; 0x7f
    571c:	d901      	bls.n	5722 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    571e:	61eb      	str	r3, [r5, #28]
}
    5720:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    5722:	429c      	cmp	r4, r3
    5724:	d002      	beq.n	572c <update_cache+0x34>
			z_reset_time_slice(thread);
    5726:	4620      	mov	r0, r4
    5728:	f7ff ff7a 	bl	5620 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    572c:	61ec      	str	r4, [r5, #28]
}
    572e:	e7f7      	b.n	5720 <update_cache+0x28>
    5730:	20000ae4 	.word	0x20000ae4
    5734:	20000ac4 	.word	0x20000ac4

00005738 <move_thread_to_end_of_prio_q>:
{
    5738:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    573a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    573e:	7b43      	ldrb	r3, [r0, #13]
    5740:	2a00      	cmp	r2, #0
{
    5742:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    5744:	da04      	bge.n	5750 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5746:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    574a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    574c:	f001 fc33 	bl	6fb6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    5750:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    5752:	4a15      	ldr	r2, [pc, #84]	; (57a8 <move_thread_to_end_of_prio_q+0x70>)
    5754:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5758:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    575a:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    575e:	f102 0520 	add.w	r5, r2, #32
    5762:	42ab      	cmp	r3, r5
    5764:	d01b      	beq.n	579e <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5766:	b1d3      	cbz	r3, 579e <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    5768:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    576c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    5770:	4286      	cmp	r6, r0
    5772:	d00f      	beq.n	5794 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    5774:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5776:	2800      	cmp	r0, #0
    5778:	dd0c      	ble.n	5794 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    577a:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    577c:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    5780:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    5782:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    5784:	6890      	ldr	r0, [r2, #8]
    5786:	1a43      	subs	r3, r0, r1
    5788:	4258      	negs	r0, r3
}
    578a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    578e:	4158      	adcs	r0, r3
    5790:	f7ff bfb2 	b.w	56f8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    5794:	42a3      	cmp	r3, r4
    5796:	d002      	beq.n	579e <move_thread_to_end_of_prio_q+0x66>
    5798:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    579a:	2b00      	cmp	r3, #0
    579c:	d1e6      	bne.n	576c <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    579e:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    57a2:	6021      	str	r1, [r4, #0]
	list->tail = node;
    57a4:	6251      	str	r1, [r2, #36]	; 0x24
}
    57a6:	e7ed      	b.n	5784 <move_thread_to_end_of_prio_q+0x4c>
    57a8:	20000ac4 	.word	0x20000ac4

000057ac <z_time_slice>:
{
    57ac:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    57ae:	f04f 0320 	mov.w	r3, #32
    57b2:	f3ef 8511 	mrs	r5, BASEPRI
    57b6:	f383 8812 	msr	BASEPRI_MAX, r3
    57ba:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    57be:	4b17      	ldr	r3, [pc, #92]	; (581c <z_time_slice+0x70>)
    57c0:	4a17      	ldr	r2, [pc, #92]	; (5820 <z_time_slice+0x74>)
    57c2:	689c      	ldr	r4, [r3, #8]
    57c4:	6811      	ldr	r1, [r2, #0]
    57c6:	428c      	cmp	r4, r1
    57c8:	d107      	bne.n	57da <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    57ca:	4620      	mov	r0, r4
    57cc:	f7ff ff28 	bl	5620 <z_reset_time_slice>
	__asm__ volatile(
    57d0:	f385 8811 	msr	BASEPRI, r5
    57d4:	f3bf 8f6f 	isb	sy
}
    57d8:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    57da:	2100      	movs	r1, #0
    57dc:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    57de:	4a11      	ldr	r2, [pc, #68]	; (5824 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    57e0:	6812      	ldr	r2, [r2, #0]
    57e2:	b1c2      	cbz	r2, 5816 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    57e4:	89e2      	ldrh	r2, [r4, #14]
    57e6:	2a7f      	cmp	r2, #127	; 0x7f
    57e8:	d815      	bhi.n	5816 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    57ea:	7b62      	ldrb	r2, [r4, #13]
    57ec:	06d2      	lsls	r2, r2, #27
    57ee:	d112      	bne.n	5816 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    57f0:	4a0d      	ldr	r2, [pc, #52]	; (5828 <z_time_slice+0x7c>)
    57f2:	f994 100e 	ldrsb.w	r1, [r4, #14]
    57f6:	6812      	ldr	r2, [r2, #0]
    57f8:	4291      	cmp	r1, r2
    57fa:	db0c      	blt.n	5816 <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    57fc:	4a0b      	ldr	r2, [pc, #44]	; (582c <z_time_slice+0x80>)
    57fe:	4294      	cmp	r4, r2
    5800:	d009      	beq.n	5816 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    5802:	691a      	ldr	r2, [r3, #16]
    5804:	4282      	cmp	r2, r0
    5806:	dc03      	bgt.n	5810 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    5808:	4620      	mov	r0, r4
    580a:	f7ff ff95 	bl	5738 <move_thread_to_end_of_prio_q>
    580e:	e7dc      	b.n	57ca <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    5810:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    5812:	611a      	str	r2, [r3, #16]
    5814:	e7dc      	b.n	57d0 <z_time_slice+0x24>
    5816:	2200      	movs	r2, #0
    5818:	e7fb      	b.n	5812 <z_time_slice+0x66>
    581a:	bf00      	nop
    581c:	20000ac4 	.word	0x20000ac4
    5820:	20000af4 	.word	0x20000af4
    5824:	20000afc 	.word	0x20000afc
    5828:	20000af8 	.word	0x20000af8
    582c:	200005e8 	.word	0x200005e8

00005830 <ready_thread>:
{
    5830:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    5832:	f990 200d 	ldrsb.w	r2, [r0, #13]
    5836:	7b43      	ldrb	r3, [r0, #13]
    5838:	2a00      	cmp	r2, #0
    583a:	db2a      	blt.n	5892 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    583c:	06da      	lsls	r2, r3, #27
    583e:	d128      	bne.n	5892 <ready_thread+0x62>
    5840:	6982      	ldr	r2, [r0, #24]
    5842:	bb32      	cbnz	r2, 5892 <ready_thread+0x62>
	return list->head == list;
    5844:	4a14      	ldr	r2, [pc, #80]	; (5898 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    5846:	f063 037f 	orn	r3, r3, #127	; 0x7f
    584a:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    584c:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5850:	f102 0520 	add.w	r5, r2, #32
    5854:	42ab      	cmp	r3, r5
    5856:	d017      	beq.n	5888 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5858:	b1b3      	cbz	r3, 5888 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    585a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    585e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    5862:	428e      	cmp	r6, r1
    5864:	d00b      	beq.n	587e <ready_thread+0x4e>
		return b2 - b1;
    5866:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5868:	2900      	cmp	r1, #0
    586a:	dd08      	ble.n	587e <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    586c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    586e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    5872:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    5874:	6058      	str	r0, [r3, #4]
}
    5876:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    5878:	2000      	movs	r0, #0
    587a:	f7ff bf3d 	b.w	56f8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    587e:	42a3      	cmp	r3, r4
    5880:	d002      	beq.n	5888 <ready_thread+0x58>
    5882:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5884:	2b00      	cmp	r3, #0
    5886:	d1ea      	bne.n	585e <ready_thread+0x2e>
	node->prev = tail;
    5888:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    588c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    588e:	6250      	str	r0, [r2, #36]	; 0x24
}
    5890:	e7f1      	b.n	5876 <ready_thread+0x46>
}
    5892:	bc70      	pop	{r4, r5, r6}
    5894:	4770      	bx	lr
    5896:	bf00      	nop
    5898:	20000ac4 	.word	0x20000ac4

0000589c <z_sched_start>:
{
    589c:	b510      	push	{r4, lr}
	__asm__ volatile(
    589e:	f04f 0220 	mov.w	r2, #32
    58a2:	f3ef 8411 	mrs	r4, BASEPRI
    58a6:	f382 8812 	msr	BASEPRI_MAX, r2
    58aa:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    58ae:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    58b0:	0751      	lsls	r1, r2, #29
    58b2:	d404      	bmi.n	58be <z_sched_start+0x22>
	__asm__ volatile(
    58b4:	f384 8811 	msr	BASEPRI, r4
    58b8:	f3bf 8f6f 	isb	sy
}
    58bc:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    58be:	f022 0204 	bic.w	r2, r2, #4
    58c2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    58c4:	f7ff ffb4 	bl	5830 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    58c8:	4621      	mov	r1, r4
    58ca:	4802      	ldr	r0, [pc, #8]	; (58d4 <z_sched_start+0x38>)
}
    58cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    58d0:	f7ff beec 	b.w	56ac <z_reschedule>
    58d4:	200011d1 	.word	0x200011d1

000058d8 <unready_thread>:
{
    58d8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    58da:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    58de:	7b43      	ldrb	r3, [r0, #13]
    58e0:	2a00      	cmp	r2, #0
{
    58e2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    58e4:	da04      	bge.n	58f0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    58e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    58ea:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    58ec:	f001 fb63 	bl	6fb6 <sys_dlist_remove>
	update_cache(thread == _current);
    58f0:	4b04      	ldr	r3, [pc, #16]	; (5904 <unready_thread+0x2c>)
    58f2:	6898      	ldr	r0, [r3, #8]
    58f4:	1a43      	subs	r3, r0, r1
    58f6:	4258      	negs	r0, r3
    58f8:	4158      	adcs	r0, r3
}
    58fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    58fe:	f7ff befb 	b.w	56f8 <update_cache>
    5902:	bf00      	nop
    5904:	20000ac4 	.word	0x20000ac4

00005908 <pend>:
{
    5908:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    590c:	4606      	mov	r6, r0
    590e:	4615      	mov	r5, r2
    5910:	461c      	mov	r4, r3
	__asm__ volatile(
    5912:	f04f 0320 	mov.w	r3, #32
    5916:	f3ef 8711 	mrs	r7, BASEPRI
    591a:	f383 8812 	msr	BASEPRI_MAX, r3
    591e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    5922:	f001 fbb8 	bl	7096 <add_to_waitq_locked>
	__asm__ volatile(
    5926:	f387 8811 	msr	BASEPRI, r7
    592a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    592e:	f1b4 3fff 	cmp.w	r4, #4294967295
    5932:	bf08      	it	eq
    5934:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    5938:	d008      	beq.n	594c <pend+0x44>
    593a:	462a      	mov	r2, r5
    593c:	4623      	mov	r3, r4
    593e:	f106 0018 	add.w	r0, r6, #24
    5942:	4903      	ldr	r1, [pc, #12]	; (5950 <pend+0x48>)
}
    5944:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    5948:	f000 ba2a 	b.w	5da0 <z_add_timeout>
    594c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5950:	00007053 	.word	0x00007053

00005954 <z_pend_curr>:
{
    5954:	b510      	push	{r4, lr}
	pending_current = _current;
    5956:	4b07      	ldr	r3, [pc, #28]	; (5974 <z_pend_curr+0x20>)
    5958:	6898      	ldr	r0, [r3, #8]
    595a:	4b07      	ldr	r3, [pc, #28]	; (5978 <z_pend_curr+0x24>)
{
    595c:	460c      	mov	r4, r1
	pending_current = _current;
    595e:	6018      	str	r0, [r3, #0]
{
    5960:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    5962:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    5966:	f7ff ffcf 	bl	5908 <pend>
    596a:	4620      	mov	r0, r4
}
    596c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5970:	f7fc bd64 	b.w	243c <arch_swap>
    5974:	20000ac4 	.word	0x20000ac4
    5978:	20000af4 	.word	0x20000af4

0000597c <z_set_prio>:
{
    597c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    597e:	4604      	mov	r4, r0
	__asm__ volatile(
    5980:	f04f 0320 	mov.w	r3, #32
    5984:	f3ef 8611 	mrs	r6, BASEPRI
    5988:	f383 8812 	msr	BASEPRI_MAX, r3
    598c:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    5990:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    5992:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    5994:	b249      	sxtb	r1, r1
    5996:	d133      	bne.n	5a00 <z_set_prio+0x84>
		if (need_sched) {
    5998:	6982      	ldr	r2, [r0, #24]
    599a:	bb8a      	cbnz	r2, 5a00 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    599c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    59a0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    59a2:	f001 fb08 	bl	6fb6 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    59a6:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    59a8:	4a17      	ldr	r2, [pc, #92]	; (5a08 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    59aa:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    59ac:	f063 037f 	orn	r3, r3, #127	; 0x7f
    59b0:	7343      	strb	r3, [r0, #13]
    59b2:	4610      	mov	r0, r2
    59b4:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    59b8:	4283      	cmp	r3, r0
    59ba:	d01b      	beq.n	59f4 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    59bc:	b1d3      	cbz	r3, 59f4 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    59be:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    59c0:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    59c4:	42a9      	cmp	r1, r5
    59c6:	d010      	beq.n	59ea <z_set_prio+0x6e>
		return b2 - b1;
    59c8:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    59ca:	2d00      	cmp	r5, #0
    59cc:	dd0d      	ble.n	59ea <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    59ce:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    59d0:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    59d4:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    59d6:	605c      	str	r4, [r3, #4]
			update_cache(1);
    59d8:	2001      	movs	r0, #1
    59da:	f7ff fe8d 	bl	56f8 <update_cache>
    59de:	2001      	movs	r0, #1
	__asm__ volatile(
    59e0:	f386 8811 	msr	BASEPRI, r6
    59e4:	f3bf 8f6f 	isb	sy
}
    59e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    59ea:	42bb      	cmp	r3, r7
    59ec:	d002      	beq.n	59f4 <z_set_prio+0x78>
    59ee:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    59f0:	2b00      	cmp	r3, #0
    59f2:	d1e5      	bne.n	59c0 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    59f4:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    59f6:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    59fa:	601c      	str	r4, [r3, #0]
	list->tail = node;
    59fc:	6254      	str	r4, [r2, #36]	; 0x24
}
    59fe:	e7eb      	b.n	59d8 <z_set_prio+0x5c>
			thread->base.prio = prio;
    5a00:	73a1      	strb	r1, [r4, #14]
    5a02:	2000      	movs	r0, #0
    5a04:	e7ec      	b.n	59e0 <z_set_prio+0x64>
    5a06:	bf00      	nop
    5a08:	20000ac4 	.word	0x20000ac4

00005a0c <z_impl_k_thread_suspend>:
{
    5a0c:	b570      	push	{r4, r5, r6, lr}
    5a0e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    5a10:	3018      	adds	r0, #24
    5a12:	f001 fbb4 	bl	717e <z_abort_timeout>
	__asm__ volatile(
    5a16:	f04f 0320 	mov.w	r3, #32
    5a1a:	f3ef 8611 	mrs	r6, BASEPRI
    5a1e:	f383 8812 	msr	BASEPRI_MAX, r3
    5a22:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    5a26:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    5a2a:	7b63      	ldrb	r3, [r4, #13]
    5a2c:	2a00      	cmp	r2, #0
    5a2e:	da05      	bge.n	5a3c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5a30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5a34:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5a36:	4620      	mov	r0, r4
    5a38:	f001 fabd 	bl	6fb6 <sys_dlist_remove>
		update_cache(thread == _current);
    5a3c:	4d0b      	ldr	r5, [pc, #44]	; (5a6c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    5a3e:	7b63      	ldrb	r3, [r4, #13]
    5a40:	68a8      	ldr	r0, [r5, #8]
    5a42:	f043 0310 	orr.w	r3, r3, #16
    5a46:	7363      	strb	r3, [r4, #13]
    5a48:	1b03      	subs	r3, r0, r4
    5a4a:	4258      	negs	r0, r3
    5a4c:	4158      	adcs	r0, r3
    5a4e:	f7ff fe53 	bl	56f8 <update_cache>
	__asm__ volatile(
    5a52:	f386 8811 	msr	BASEPRI, r6
    5a56:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    5a5a:	68ab      	ldr	r3, [r5, #8]
    5a5c:	42a3      	cmp	r3, r4
    5a5e:	d103      	bne.n	5a68 <z_impl_k_thread_suspend+0x5c>
}
    5a60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    5a64:	f001 bad5 	b.w	7012 <z_reschedule_unlocked>
}
    5a68:	bd70      	pop	{r4, r5, r6, pc}
    5a6a:	bf00      	nop
    5a6c:	20000ac4 	.word	0x20000ac4

00005a70 <k_sched_unlock>:
{
    5a70:	b510      	push	{r4, lr}
	__asm__ volatile(
    5a72:	f04f 0320 	mov.w	r3, #32
    5a76:	f3ef 8411 	mrs	r4, BASEPRI
    5a7a:	f383 8812 	msr	BASEPRI_MAX, r3
    5a7e:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    5a82:	4b08      	ldr	r3, [pc, #32]	; (5aa4 <k_sched_unlock+0x34>)
    5a84:	689a      	ldr	r2, [r3, #8]
    5a86:	7bd3      	ldrb	r3, [r2, #15]
    5a88:	3301      	adds	r3, #1
    5a8a:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    5a8c:	2000      	movs	r0, #0
    5a8e:	f7ff fe33 	bl	56f8 <update_cache>
	__asm__ volatile(
    5a92:	f384 8811 	msr	BASEPRI, r4
    5a96:	f3bf 8f6f 	isb	sy
}
    5a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    5a9e:	f001 bab8 	b.w	7012 <z_reschedule_unlocked>
    5aa2:	bf00      	nop
    5aa4:	20000ac4 	.word	0x20000ac4

00005aa8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    5aa8:	4b04      	ldr	r3, [pc, #16]	; (5abc <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    5aaa:	2100      	movs	r1, #0
    5aac:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    5ab0:	e9c3 2208 	strd	r2, r2, [r3, #32]
    5ab4:	4608      	mov	r0, r1
    5ab6:	f7ff bdc7 	b.w	5648 <k_sched_time_slice_set>
    5aba:	bf00      	nop
    5abc:	20000ac4 	.word	0x20000ac4

00005ac0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    5ac0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    5ac2:	f04f 0320 	mov.w	r3, #32
    5ac6:	f3ef 8511 	mrs	r5, BASEPRI
    5aca:	f383 8812 	msr	BASEPRI_MAX, r3
    5ace:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    5ad2:	491a      	ldr	r1, [pc, #104]	; (5b3c <z_impl_k_yield+0x7c>)
    5ad4:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5ad6:	7b43      	ldrb	r3, [r0, #13]
    5ad8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5adc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5ade:	f001 fa6a 	bl	6fb6 <sys_dlist_remove>
	}
	queue_thread(_current);
    5ae2:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    5ae4:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    5ae6:	4608      	mov	r0, r1
    5ae8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    5aec:	735a      	strb	r2, [r3, #13]
    5aee:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5af2:	4282      	cmp	r2, r0
    5af4:	d01c      	beq.n	5b30 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5af6:	b1da      	cbz	r2, 5b30 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    5af8:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    5afa:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    5afe:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    5b02:	42a6      	cmp	r6, r4
    5b04:	d00f      	beq.n	5b26 <z_impl_k_yield+0x66>
		return b2 - b1;
    5b06:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    5b08:	2c00      	cmp	r4, #0
    5b0a:	dd0c      	ble.n	5b26 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    5b0c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    5b0e:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    5b12:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    5b14:	6053      	str	r3, [r2, #4]
	update_cache(1);
    5b16:	2001      	movs	r0, #1
    5b18:	f7ff fdee 	bl	56f8 <update_cache>
    5b1c:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    5b1e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5b22:	f7fc bc8b 	b.w	243c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    5b26:	42ba      	cmp	r2, r7
    5b28:	d002      	beq.n	5b30 <z_impl_k_yield+0x70>
    5b2a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    5b2c:	2a00      	cmp	r2, #0
    5b2e:	d1e6      	bne.n	5afe <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    5b30:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    5b32:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    5b36:	6013      	str	r3, [r2, #0]
	list->tail = node;
    5b38:	624b      	str	r3, [r1, #36]	; 0x24
}
    5b3a:	e7ec      	b.n	5b16 <z_impl_k_yield+0x56>
    5b3c:	20000ac4 	.word	0x20000ac4

00005b40 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    5b40:	ea50 0301 	orrs.w	r3, r0, r1
{
    5b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5b48:	4605      	mov	r5, r0
    5b4a:	460e      	mov	r6, r1
	if (ticks == 0) {
    5b4c:	d103      	bne.n	5b56 <z_tick_sleep+0x16>
	z_impl_k_yield();
    5b4e:	f7ff ffb7 	bl	5ac0 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    5b52:	2000      	movs	r0, #0
    5b54:	e033      	b.n	5bbe <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    5b56:	f06f 0401 	mvn.w	r4, #1
    5b5a:	1a24      	subs	r4, r4, r0
    5b5c:	f04f 33ff 	mov.w	r3, #4294967295
    5b60:	eb63 0301 	sbc.w	r3, r3, r1
    5b64:	2c01      	cmp	r4, #1
    5b66:	f173 0300 	sbcs.w	r3, r3, #0
    5b6a:	da02      	bge.n	5b72 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    5b6c:	f001 fb47 	bl	71fe <sys_clock_tick_get_32>
    5b70:	1944      	adds	r4, r0, r5
    5b72:	f04f 0320 	mov.w	r3, #32
    5b76:	f3ef 8811 	mrs	r8, BASEPRI
    5b7a:	f383 8812 	msr	BASEPRI_MAX, r3
    5b7e:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    5b82:	4f10      	ldr	r7, [pc, #64]	; (5bc4 <z_tick_sleep+0x84>)
    5b84:	4b10      	ldr	r3, [pc, #64]	; (5bc8 <z_tick_sleep+0x88>)
    5b86:	68b8      	ldr	r0, [r7, #8]
    5b88:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    5b8a:	f7ff fea5 	bl	58d8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    5b8e:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    5b90:	490e      	ldr	r1, [pc, #56]	; (5bcc <z_tick_sleep+0x8c>)
    5b92:	462a      	mov	r2, r5
    5b94:	4633      	mov	r3, r6
    5b96:	3018      	adds	r0, #24
    5b98:	f000 f902 	bl	5da0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    5b9c:	68ba      	ldr	r2, [r7, #8]
    5b9e:	7b53      	ldrb	r3, [r2, #13]
    5ba0:	f043 0310 	orr.w	r3, r3, #16
    5ba4:	7353      	strb	r3, [r2, #13]
    5ba6:	4640      	mov	r0, r8
    5ba8:	f7fc fc48 	bl	243c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    5bac:	f001 fb27 	bl	71fe <sys_clock_tick_get_32>
    5bb0:	1a20      	subs	r0, r4, r0
    5bb2:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    5bb6:	2801      	cmp	r0, #1
    5bb8:	f173 0300 	sbcs.w	r3, r3, #0
    5bbc:	dbc9      	blt.n	5b52 <z_tick_sleep+0x12>
}
    5bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5bc2:	bf00      	nop
    5bc4:	20000ac4 	.word	0x20000ac4
    5bc8:	20000af4 	.word	0x20000af4
    5bcc:	00007053 	.word	0x00007053

00005bd0 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5bd0:	f1b1 3fff 	cmp.w	r1, #4294967295
    5bd4:	bf08      	it	eq
    5bd6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    5bda:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5bdc:	d106      	bne.n	5bec <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    5bde:	4b08      	ldr	r3, [pc, #32]	; (5c00 <z_impl_k_sleep+0x30>)
    5be0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    5be2:	f7ff ff13 	bl	5a0c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    5be6:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    5bea:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    5bec:	f7ff ffa8 	bl	5b40 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    5bf0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    5bf4:	fb80 0303 	smull	r0, r3, r0, r3
    5bf8:	0bc0      	lsrs	r0, r0, #15
    5bfa:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    5bfe:	e7f4      	b.n	5bea <z_impl_k_sleep+0x1a>
    5c00:	20000ac4 	.word	0x20000ac4

00005c04 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    5c04:	4b01      	ldr	r3, [pc, #4]	; (5c0c <z_impl_z_current_get+0x8>)
    5c06:	6898      	ldr	r0, [r3, #8]
    5c08:	4770      	bx	lr
    5c0a:	bf00      	nop
    5c0c:	20000ac4 	.word	0x20000ac4

00005c10 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    5c10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5c14:	4604      	mov	r4, r0
    5c16:	f04f 0320 	mov.w	r3, #32
    5c1a:	f3ef 8611 	mrs	r6, BASEPRI
    5c1e:	f383 8812 	msr	BASEPRI_MAX, r3
    5c22:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    5c26:	7b43      	ldrb	r3, [r0, #13]
    5c28:	071a      	lsls	r2, r3, #28
    5c2a:	d505      	bpl.n	5c38 <z_thread_abort+0x28>
	__asm__ volatile(
    5c2c:	f386 8811 	msr	BASEPRI, r6
    5c30:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    5c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5c38:	f023 0220 	bic.w	r2, r3, #32
    5c3c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    5c40:	09d2      	lsrs	r2, r2, #7
    5c42:	d120      	bne.n	5c86 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    5c44:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    5c46:	68a3      	ldr	r3, [r4, #8]
    5c48:	b113      	cbz	r3, 5c50 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    5c4a:	4620      	mov	r0, r4
    5c4c:	f001 f9bb 	bl	6fc6 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    5c50:	f104 0018 	add.w	r0, r4, #24
    5c54:	f001 fa93 	bl	717e <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    5c58:	f104 0758 	add.w	r7, r4, #88	; 0x58
    5c5c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    5c60:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5c62:	42bd      	cmp	r5, r7
    5c64:	d000      	beq.n	5c68 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    5c66:	b9b5      	cbnz	r5, 5c96 <z_thread_abort+0x86>
		update_cache(1);
    5c68:	2001      	movs	r0, #1
    5c6a:	f7ff fd45 	bl	56f8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    5c6e:	4b10      	ldr	r3, [pc, #64]	; (5cb0 <z_thread_abort+0xa0>)
    5c70:	689b      	ldr	r3, [r3, #8]
    5c72:	42a3      	cmp	r3, r4
    5c74:	d1da      	bne.n	5c2c <z_thread_abort+0x1c>
    5c76:	f3ef 8305 	mrs	r3, IPSR
    5c7a:	2b00      	cmp	r3, #0
    5c7c:	d1d6      	bne.n	5c2c <z_thread_abort+0x1c>
    5c7e:	4630      	mov	r0, r6
    5c80:	f7fc fbdc 	bl	243c <arch_swap>
	return ret;
    5c84:	e7d2      	b.n	5c2c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    5c86:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    5c8a:	f043 0308 	orr.w	r3, r3, #8
    5c8e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    5c90:	f001 f991 	bl	6fb6 <sys_dlist_remove>
}
    5c94:	e7d7      	b.n	5c46 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    5c96:	4628      	mov	r0, r5
    5c98:	f001 f995 	bl	6fc6 <unpend_thread_no_timeout>
    5c9c:	f105 0018 	add.w	r0, r5, #24
    5ca0:	f001 fa6d 	bl	717e <z_abort_timeout>
    5ca4:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    5ca8:	4628      	mov	r0, r5
    5caa:	f7ff fdc1 	bl	5830 <ready_thread>
    5cae:	e7d7      	b.n	5c60 <z_thread_abort+0x50>
    5cb0:	20000ac4 	.word	0x20000ac4

00005cb4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    5cb4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    5cb6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    5cba:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    5cbc:	e9cd 6700 	strd	r6, r7, [sp]
    5cc0:	f7ff fe48 	bl	5954 <z_pend_curr>

	if (data != NULL) {
    5cc4:	b11c      	cbz	r4, 5cce <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    5cc6:	4b03      	ldr	r3, [pc, #12]	; (5cd4 <z_sched_wait+0x20>)
    5cc8:	689b      	ldr	r3, [r3, #8]
    5cca:	695b      	ldr	r3, [r3, #20]
    5ccc:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    5cce:	b002      	add	sp, #8
    5cd0:	bdd0      	pop	{r4, r6, r7, pc}
    5cd2:	bf00      	nop
    5cd4:	20000ac4 	.word	0x20000ac4

00005cd8 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    5cd8:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    5cda:	4806      	ldr	r0, [pc, #24]	; (5cf4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    5cdc:	4a06      	ldr	r2, [pc, #24]	; (5cf8 <z_data_copy+0x20>)
    5cde:	4907      	ldr	r1, [pc, #28]	; (5cfc <z_data_copy+0x24>)
    5ce0:	1a12      	subs	r2, r2, r0
    5ce2:	f001 f903 	bl	6eec <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    5ce6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    5cea:	4a05      	ldr	r2, [pc, #20]	; (5d00 <z_data_copy+0x28>)
    5cec:	4905      	ldr	r1, [pc, #20]	; (5d04 <z_data_copy+0x2c>)
    5cee:	4806      	ldr	r0, [pc, #24]	; (5d08 <z_data_copy+0x30>)
    5cf0:	f001 b8fc 	b.w	6eec <z_early_memcpy>
    5cf4:	20000000 	.word	0x20000000
    5cf8:	2000010c 	.word	0x2000010c
    5cfc:	00007de4 	.word	0x00007de4
    5d00:	00000000 	.word	0x00000000
    5d04:	00007de4 	.word	0x00007de4
    5d08:	20000000 	.word	0x20000000

00005d0c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    5d0c:	4b03      	ldr	r3, [pc, #12]	; (5d1c <elapsed+0x10>)
    5d0e:	681b      	ldr	r3, [r3, #0]
    5d10:	b90b      	cbnz	r3, 5d16 <elapsed+0xa>
    5d12:	f7fd bf55 	b.w	3bc0 <sys_clock_elapsed>
}
    5d16:	2000      	movs	r0, #0
    5d18:	4770      	bx	lr
    5d1a:	bf00      	nop
    5d1c:	20000b00 	.word	0x20000b00

00005d20 <next_timeout>:
	return list->head == list;
    5d20:	4b10      	ldr	r3, [pc, #64]	; (5d64 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    5d22:	b510      	push	{r4, lr}
    5d24:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5d26:	429c      	cmp	r4, r3
    5d28:	bf08      	it	eq
    5d2a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    5d2c:	f7ff ffee 	bl	5d0c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    5d30:	b1a4      	cbz	r4, 5d5c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    5d32:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    5d36:	1a1b      	subs	r3, r3, r0
    5d38:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    5d3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    5d40:	f170 0200 	sbcs.w	r2, r0, #0
    5d44:	da0a      	bge.n	5d5c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    5d46:	2800      	cmp	r0, #0
    5d48:	bfac      	ite	ge
    5d4a:	4618      	movge	r0, r3
    5d4c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    5d4e:	4b06      	ldr	r3, [pc, #24]	; (5d68 <next_timeout+0x48>)
    5d50:	691b      	ldr	r3, [r3, #16]
    5d52:	b113      	cbz	r3, 5d5a <next_timeout+0x3a>
    5d54:	4298      	cmp	r0, r3
    5d56:	bfa8      	it	ge
    5d58:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    5d5a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    5d5c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    5d60:	e7f5      	b.n	5d4e <next_timeout+0x2e>
    5d62:	bf00      	nop
    5d64:	20000098 	.word	0x20000098
    5d68:	20000ac4 	.word	0x20000ac4

00005d6c <remove_timeout>:
{
    5d6c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    5d6e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    5d70:	b168      	cbz	r0, 5d8e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    5d72:	4a0a      	ldr	r2, [pc, #40]	; (5d9c <remove_timeout+0x30>)
    5d74:	6852      	ldr	r2, [r2, #4]
    5d76:	4290      	cmp	r0, r2
    5d78:	d009      	beq.n	5d8e <remove_timeout+0x22>
	if (next(t) != NULL) {
    5d7a:	b143      	cbz	r3, 5d8e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    5d7c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    5d80:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    5d84:	1912      	adds	r2, r2, r4
    5d86:	eb41 0105 	adc.w	r1, r1, r5
    5d8a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    5d8e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    5d90:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    5d92:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    5d94:	2300      	movs	r3, #0
	node->prev = NULL;
    5d96:	e9c0 3300 	strd	r3, r3, [r0]
}
    5d9a:	bd30      	pop	{r4, r5, pc}
    5d9c:	20000098 	.word	0x20000098

00005da0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5da0:	f1b3 3fff 	cmp.w	r3, #4294967295
    5da4:	bf08      	it	eq
    5da6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    5daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5dac:	4604      	mov	r4, r0
    5dae:	461f      	mov	r7, r3
    5db0:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    5db2:	d067      	beq.n	5e84 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    5db4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    5db6:	f04f 0320 	mov.w	r3, #32
    5dba:	f3ef 8611 	mrs	r6, BASEPRI
    5dbe:	f383 8812 	msr	BASEPRI_MAX, r3
    5dc2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    5dc6:	f06f 0201 	mvn.w	r2, #1
    5dca:	1b53      	subs	r3, r2, r5
    5dcc:	f04f 3cff 	mov.w	ip, #4294967295
    5dd0:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    5dd4:	2b00      	cmp	r3, #0
    5dd6:	db1b      	blt.n	5e10 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    5dd8:	4b2b      	ldr	r3, [pc, #172]	; (5e88 <z_add_timeout+0xe8>)
    5dda:	e9d3 1300 	ldrd	r1, r3, [r3]
    5dde:	1a52      	subs	r2, r2, r1
    5de0:	eb6c 0303 	sbc.w	r3, ip, r3
    5de4:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    5de6:	eb63 0307 	sbc.w	r3, r3, r7
    5dea:	2d01      	cmp	r5, #1
    5dec:	f173 0200 	sbcs.w	r2, r3, #0
    5df0:	bfbc      	itt	lt
    5df2:	2501      	movlt	r5, #1
    5df4:	2300      	movlt	r3, #0
    5df6:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    5dfa:	4824      	ldr	r0, [pc, #144]	; (5e8c <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    5dfc:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5e00:	4283      	cmp	r3, r0
    5e02:	d118      	bne.n	5e36 <z_add_timeout+0x96>
	node->prev = tail;
    5e04:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    5e08:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    5e0c:	6044      	str	r4, [r0, #4]
}
    5e0e:	e026      	b.n	5e5e <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    5e10:	f7ff ff7c 	bl	5d0c <elapsed>
    5e14:	3501      	adds	r5, #1
    5e16:	f147 0700 	adc.w	r7, r7, #0
    5e1a:	182d      	adds	r5, r5, r0
    5e1c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    5e20:	e9c4 5704 	strd	r5, r7, [r4, #16]
    5e24:	e7e9      	b.n	5dfa <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    5e26:	1a52      	subs	r2, r2, r1
    5e28:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    5e2c:	459c      	cmp	ip, r3
    5e2e:	e9c4 2504 	strd	r2, r5, [r4, #16]
    5e32:	d0e7      	beq.n	5e04 <z_add_timeout+0x64>
    5e34:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    5e36:	2b00      	cmp	r3, #0
    5e38:	d0e4      	beq.n	5e04 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    5e3a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    5e3e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    5e42:	428a      	cmp	r2, r1
    5e44:	eb75 0e07 	sbcs.w	lr, r5, r7
    5e48:	daed      	bge.n	5e26 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    5e4a:	1a8a      	subs	r2, r1, r2
    5e4c:	eb67 0505 	sbc.w	r5, r7, r5
    5e50:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    5e54:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    5e56:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    5e5a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    5e5c:	605c      	str	r4, [r3, #4]
	return list->head == list;
    5e5e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5e60:	4283      	cmp	r3, r0
    5e62:	d00b      	beq.n	5e7c <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    5e64:	429c      	cmp	r4, r3
    5e66:	d109      	bne.n	5e7c <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    5e68:	f7ff ff5a 	bl	5d20 <next_timeout>

			if (next_time == 0 ||
    5e6c:	b118      	cbz	r0, 5e76 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    5e6e:	4b08      	ldr	r3, [pc, #32]	; (5e90 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    5e70:	691b      	ldr	r3, [r3, #16]
    5e72:	4283      	cmp	r3, r0
    5e74:	d002      	beq.n	5e7c <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    5e76:	2100      	movs	r1, #0
    5e78:	f7fd fe70 	bl	3b5c <sys_clock_set_timeout>
	__asm__ volatile(
    5e7c:	f386 8811 	msr	BASEPRI, r6
    5e80:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    5e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5e86:	bf00      	nop
    5e88:	200006e8 	.word	0x200006e8
    5e8c:	20000098 	.word	0x20000098
    5e90:	20000ac4 	.word	0x20000ac4

00005e94 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    5e94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5e98:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    5e9a:	f7ff fc87 	bl	57ac <z_time_slice>
	__asm__ volatile(
    5e9e:	f04f 0320 	mov.w	r3, #32
    5ea2:	f3ef 8411 	mrs	r4, BASEPRI
    5ea6:	f383 8812 	msr	BASEPRI_MAX, r3
    5eaa:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    5eae:	4e24      	ldr	r6, [pc, #144]	; (5f40 <sys_clock_announce+0xac>)
	return list->head == list;
    5eb0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 5f44 <sys_clock_announce+0xb0>
    5eb4:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    5eb6:	4d24      	ldr	r5, [pc, #144]	; (5f48 <sys_clock_announce+0xb4>)
    5eb8:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5ebc:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5ebe:	4540      	cmp	r0, r8
		curr_tick += dt;
    5ec0:	e9d5 1e00 	ldrd	r1, lr, [r5]
    5ec4:	ea4f 77e2 	mov.w	r7, r2, asr #31
    5ec8:	d00b      	beq.n	5ee2 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    5eca:	b150      	cbz	r0, 5ee2 <sys_clock_announce+0x4e>
    5ecc:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    5ed0:	429a      	cmp	r2, r3
    5ed2:	eb77 090c 	sbcs.w	r9, r7, ip
    5ed6:	da16      	bge.n	5f06 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    5ed8:	1a9b      	subs	r3, r3, r2
    5eda:	eb6c 0c07 	sbc.w	ip, ip, r7
    5ede:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    5ee2:	1852      	adds	r2, r2, r1
    5ee4:	eb4e 0707 	adc.w	r7, lr, r7
    5ee8:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    5eec:	2500      	movs	r5, #0
    5eee:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    5ef0:	f7ff ff16 	bl	5d20 <next_timeout>
    5ef4:	4629      	mov	r1, r5
    5ef6:	f7fd fe31 	bl	3b5c <sys_clock_set_timeout>
	__asm__ volatile(
    5efa:	f384 8811 	msr	BASEPRI, r4
    5efe:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    5f02:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    5f06:	1859      	adds	r1, r3, r1
    5f08:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    5f0c:	1ad3      	subs	r3, r2, r3
    5f0e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    5f10:	2200      	movs	r2, #0
    5f12:	2300      	movs	r3, #0
    5f14:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    5f18:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    5f1c:	f7ff ff26 	bl	5d6c <remove_timeout>
    5f20:	f384 8811 	msr	BASEPRI, r4
    5f24:	f3bf 8f6f 	isb	sy
		t->fn(t);
    5f28:	6883      	ldr	r3, [r0, #8]
    5f2a:	4798      	blx	r3
	__asm__ volatile(
    5f2c:	f04f 0320 	mov.w	r3, #32
    5f30:	f3ef 8411 	mrs	r4, BASEPRI
    5f34:	f383 8812 	msr	BASEPRI_MAX, r3
    5f38:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    5f3c:	e7bc      	b.n	5eb8 <sys_clock_announce+0x24>
    5f3e:	bf00      	nop
    5f40:	20000b00 	.word	0x20000b00
    5f44:	20000098 	.word	0x20000098
    5f48:	200006e8 	.word	0x200006e8

00005f4c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    5f4c:	b510      	push	{r4, lr}
    5f4e:	f04f 0320 	mov.w	r3, #32
    5f52:	f3ef 8411 	mrs	r4, BASEPRI
    5f56:	f383 8812 	msr	BASEPRI_MAX, r3
    5f5a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    5f5e:	f7fd fe2f 	bl	3bc0 <sys_clock_elapsed>
    5f62:	4a05      	ldr	r2, [pc, #20]	; (5f78 <sys_clock_tick_get+0x2c>)
    5f64:	e9d2 3100 	ldrd	r3, r1, [r2]
    5f68:	18c0      	adds	r0, r0, r3
    5f6a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    5f6e:	f384 8811 	msr	BASEPRI, r4
    5f72:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    5f76:	bd10      	pop	{r4, pc}
    5f78:	200006e8 	.word	0x200006e8

00005f7c <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    5f7c:	b570      	push	{r4, r5, r6, lr}
    5f7e:	4604      	mov	r4, r0
	__asm__ volatile(
    5f80:	f04f 0320 	mov.w	r3, #32
    5f84:	f3ef 8511 	mrs	r5, BASEPRI
    5f88:	f383 8812 	msr	BASEPRI_MAX, r3
    5f8c:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    5f90:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    5f94:	3301      	adds	r3, #1
    5f96:	f142 0200 	adc.w	r2, r2, #0
    5f9a:	2b02      	cmp	r3, #2
    5f9c:	f172 0300 	sbcs.w	r3, r2, #0
    5fa0:	d304      	bcc.n	5fac <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    5fa2:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    5fa6:	4917      	ldr	r1, [pc, #92]	; (6004 <z_timer_expiration_handler+0x88>)
    5fa8:	f7ff fefa 	bl	5da0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    5fac:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5fae:	3301      	adds	r3, #1
    5fb0:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    5fb2:	6a23      	ldr	r3, [r4, #32]
    5fb4:	b173      	cbz	r3, 5fd4 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
    5fb6:	f385 8811 	msr	BASEPRI, r5
    5fba:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    5fbe:	6a23      	ldr	r3, [r4, #32]
    5fc0:	4620      	mov	r0, r4
    5fc2:	4798      	blx	r3
	__asm__ volatile(
    5fc4:	f04f 0320 	mov.w	r3, #32
    5fc8:	f3ef 8511 	mrs	r5, BASEPRI
    5fcc:	f383 8812 	msr	BASEPRI_MAX, r3
    5fd0:	f3bf 8f6f 	isb	sy
	return list->head == list;
    5fd4:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    5fd8:	42a6      	cmp	r6, r4
    5fda:	d000      	beq.n	5fde <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    5fdc:	b926      	cbnz	r6, 5fe8 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
    5fde:	f385 8811 	msr	BASEPRI, r5
    5fe2:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    5fe6:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    5fe8:	4630      	mov	r0, r6
    5fea:	f000 fff6 	bl	6fda <z_unpend_thread_no_timeout>
    5fee:	2300      	movs	r3, #0
    5ff0:	67b3      	str	r3, [r6, #120]	; 0x78
    5ff2:	f385 8811 	msr	BASEPRI, r5
    5ff6:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    5ffa:	4630      	mov	r0, r6
}
    5ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    6000:	f001 b817 	b.w	7032 <z_ready_thread>
    6004:	00005f7d 	.word	0x00005f7d

00006008 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    6008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    600c:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    600e:	f1b3 3fff 	cmp.w	r3, #4294967295
    6012:	bf08      	it	eq
    6014:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
    6018:	4606      	mov	r6, r0
    601a:	461c      	mov	r4, r3
    601c:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    6020:	4689      	mov	r9, r1
    6022:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    6024:	d03e      	beq.n	60a4 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    6026:	f1b0 3fff 	cmp.w	r0, #4294967295
    602a:	bf08      	it	eq
    602c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    6030:	4615      	mov	r5, r2
    6032:	4607      	mov	r7, r0
    6034:	d014      	beq.n	6060 <z_impl_k_timer_start+0x58>
    6036:	ea50 0302 	orrs.w	r3, r0, r2
    603a:	d011      	beq.n	6060 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    603c:	f06f 0301 	mvn.w	r3, #1
    6040:	1a9b      	subs	r3, r3, r2
    6042:	f04f 33ff 	mov.w	r3, #4294967295
    6046:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    604a:	2b00      	cmp	r3, #0
    604c:	da08      	bge.n	6060 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    604e:	2a02      	cmp	r2, #2
    6050:	f170 0300 	sbcs.w	r3, r0, #0
    6054:	bfbc      	itt	lt
    6056:	2502      	movlt	r5, #2
    6058:	2700      	movlt	r7, #0
    605a:	3d01      	subs	r5, #1
    605c:	f147 37ff 	adc.w	r7, r7, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    6060:	f06f 0301 	mvn.w	r3, #1
    6064:	1a5b      	subs	r3, r3, r1
    6066:	f04f 33ff 	mov.w	r3, #4294967295
    606a:	eb63 0304 	sbc.w	r3, r3, r4
    606e:	2b00      	cmp	r3, #0
    6070:	da09      	bge.n	6086 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    6072:	2901      	cmp	r1, #1
    6074:	f174 0300 	sbcs.w	r3, r4, #0
    6078:	bfbc      	itt	lt
    607a:	2101      	movlt	r1, #1
    607c:	2400      	movlt	r4, #0
    607e:	f111 39ff 	adds.w	r9, r1, #4294967295
    6082:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    6086:	4630      	mov	r0, r6
    6088:	f001 f879 	bl	717e <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    608c:	2300      	movs	r3, #0
    608e:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
    6090:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    6094:	464a      	mov	r2, r9
    6096:	4643      	mov	r3, r8
    6098:	4630      	mov	r0, r6
    609a:	4903      	ldr	r1, [pc, #12]	; (60a8 <z_impl_k_timer_start+0xa0>)
		     duration);
}
    609c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    60a0:	f7ff be7e 	b.w	5da0 <z_add_timeout>
}
    60a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    60a8:	00005f7d 	.word	0x00005f7d

000060ac <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    60ac:	4a02      	ldr	r2, [pc, #8]	; (60b8 <boot_banner+0xc>)
    60ae:	4903      	ldr	r1, [pc, #12]	; (60bc <boot_banner+0x10>)
    60b0:	4803      	ldr	r0, [pc, #12]	; (60c0 <boot_banner+0x14>)
    60b2:	f000 b884 	b.w	61be <printk>
    60b6:	bf00      	nop
    60b8:	000077a0 	.word	0x000077a0
    60bc:	00007da3 	.word	0x00007da3
    60c0:	00007db2 	.word	0x00007db2

000060c4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    60c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    60c6:	4b09      	ldr	r3, [pc, #36]	; (60ec <k_sys_work_q_init+0x28>)
    60c8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    60ca:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    60cc:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    60ce:	9300      	str	r3, [sp, #0]
    60d0:	4907      	ldr	r1, [pc, #28]	; (60f0 <k_sys_work_q_init+0x2c>)
    60d2:	4808      	ldr	r0, [pc, #32]	; (60f4 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    60d4:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    60d8:	f04f 33ff 	mov.w	r3, #4294967295
    60dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    60e0:	f7ff fa66 	bl	55b0 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    60e4:	4620      	mov	r0, r4
    60e6:	b004      	add	sp, #16
    60e8:	bd10      	pop	{r4, pc}
    60ea:	bf00      	nop
    60ec:	00007dd9 	.word	0x00007dd9
    60f0:	20002260 	.word	0x20002260
    60f4:	200006f0 	.word	0x200006f0

000060f8 <z_log_msg2_static_create.constprop.0>:
    60f8:	2300      	movs	r3, #0
    60fa:	f000 bc31 	b.w	6960 <z_impl_z_log_msg2_static_create>

000060fe <cbpprintf_external>:
{
    60fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6102:	4607      	mov	r7, r0
    6104:	460e      	mov	r6, r1
    6106:	4690      	mov	r8, r2
	if (buf == NULL) {
    6108:	461d      	mov	r5, r3
    610a:	b30b      	cbz	r3, 6150 <cbpprintf_external+0x52>
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    610c:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = buf[2];
    610e:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
    6110:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = buf[3];
    6114:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    6116:	441c      	add	r4, r3
    6118:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    611c:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
    611e:	f04f 0900 	mov.w	r9, #0
    6122:	45d1      	cmp	r9, sl
    6124:	d308      	bcc.n	6138 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    6126:	686a      	ldr	r2, [r5, #4]
    6128:	f105 0308 	add.w	r3, r5, #8
    612c:	4641      	mov	r1, r8
    612e:	4638      	mov	r0, r7
    6130:	46b4      	mov	ip, r6
}
    6132:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    6136:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    6138:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    613c:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    6140:	4620      	mov	r0, r4
    6142:	f000 fc6e 	bl	6a22 <strlen>
    6146:	3001      	adds	r0, #1
    6148:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    614a:	f109 0901 	add.w	r9, r9, #1
    614e:	e7e8      	b.n	6122 <cbpprintf_external+0x24>
}
    6150:	f06f 0015 	mvn.w	r0, #21
    6154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00006158 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    6158:	4603      	mov	r3, r0
    615a:	b158      	cbz	r0, 6174 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    615c:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    615e:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    6162:	2a01      	cmp	r2, #1
    6164:	d003      	beq.n	616e <sys_notify_validate+0x16>
    6166:	2a03      	cmp	r2, #3
    6168:	d104      	bne.n	6174 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    616a:	6802      	ldr	r2, [r0, #0]
    616c:	b112      	cbz	r2, 6174 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    616e:	2000      	movs	r0, #0
    6170:	6098      	str	r0, [r3, #8]
    6172:	4770      	bx	lr
		return -EINVAL;
    6174:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    6178:	4770      	bx	lr

0000617a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    617a:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    617c:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    617e:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    6182:	2a03      	cmp	r2, #3
    6184:	f04f 0200 	mov.w	r2, #0
{
    6188:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    618a:	bf0c      	ite	eq
    618c:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    618e:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    6190:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    6192:	4770      	bx	lr

00006194 <arch_printk_char_out>:
}
    6194:	2000      	movs	r0, #0
    6196:	4770      	bx	lr

00006198 <str_out>:
{
    6198:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    619a:	688a      	ldr	r2, [r1, #8]
    619c:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    619e:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    61a0:	b114      	cbz	r4, 61a8 <str_out+0x10>
    61a2:	684b      	ldr	r3, [r1, #4]
    61a4:	4293      	cmp	r3, r2
    61a6:	dc01      	bgt.n	61ac <str_out+0x14>
		ctx->count++;
    61a8:	608d      	str	r5, [r1, #8]
}
    61aa:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    61ac:	3b01      	subs	r3, #1
    61ae:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    61b0:	bf08      	it	eq
    61b2:	2200      	moveq	r2, #0
    61b4:	608d      	str	r5, [r1, #8]
    61b6:	bf0c      	ite	eq
    61b8:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    61ba:	54a0      	strbne	r0, [r4, r2]
    61bc:	e7f5      	b.n	61aa <str_out+0x12>

000061be <printk>:
{
    61be:	b40f      	push	{r0, r1, r2, r3}
    61c0:	b507      	push	{r0, r1, r2, lr}
    61c2:	a904      	add	r1, sp, #16
    61c4:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    61c8:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    61ca:	f000 fb55 	bl	6878 <z_log_vprintk>
}
    61ce:	b003      	add	sp, #12
    61d0:	f85d eb04 	ldr.w	lr, [sp], #4
    61d4:	b004      	add	sp, #16
    61d6:	4770      	bx	lr

000061d8 <snprintk>:
{
    61d8:	b40c      	push	{r2, r3}
    61da:	b507      	push	{r0, r1, r2, lr}
    61dc:	ab04      	add	r3, sp, #16
    61de:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    61e2:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    61e4:	f7fa fd60 	bl	ca8 <vsnprintk>
}
    61e8:	b003      	add	sp, #12
    61ea:	f85d eb04 	ldr.w	lr, [sp], #4
    61ee:	b002      	add	sp, #8
    61f0:	4770      	bx	lr

000061f2 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    61f2:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    61f4:	f013 0307 	ands.w	r3, r3, #7
    61f8:	d105      	bne.n	6206 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    61fa:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    61fc:	2b00      	cmp	r3, #0
    61fe:	bf0c      	ite	eq
    6200:	2000      	moveq	r0, #0
    6202:	2003      	movne	r0, #3
    6204:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    6206:	2b02      	cmp	r3, #2
    6208:	d105      	bne.n	6216 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    620a:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    620c:	2b00      	cmp	r3, #0
    620e:	bf14      	ite	ne
    6210:	2000      	movne	r0, #0
    6212:	2004      	moveq	r0, #4
    6214:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    6216:	2b01      	cmp	r3, #1
    6218:	d105      	bne.n	6226 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    621a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    621c:	2b00      	cmp	r3, #0
    621e:	bf0c      	ite	eq
    6220:	2000      	moveq	r0, #0
    6222:	2005      	movne	r0, #5
    6224:	4770      	bx	lr
	int evt = EVT_NOP;
    6226:	2000      	movs	r0, #0
}
    6228:	4770      	bx	lr

0000622a <notify_one>:
{
    622a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    622e:	460d      	mov	r5, r1
    6230:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    6232:	4619      	mov	r1, r3
    6234:	1d28      	adds	r0, r5, #4
{
    6236:	4690      	mov	r8, r2
    6238:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    623a:	f7ff ff9e 	bl	617a <sys_notify_finalize>
	if (cb) {
    623e:	4604      	mov	r4, r0
    6240:	b138      	cbz	r0, 6252 <notify_one+0x28>
		cb(mgr, cli, state, res);
    6242:	4633      	mov	r3, r6
    6244:	4642      	mov	r2, r8
    6246:	4629      	mov	r1, r5
    6248:	4638      	mov	r0, r7
    624a:	46a4      	mov	ip, r4
}
    624c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    6250:	4760      	bx	ip
}
    6252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006256 <transition_complete>:
{
    6256:	b410      	push	{r4}
	__asm__ volatile(
    6258:	f04f 0420 	mov.w	r4, #32
    625c:	f3ef 8211 	mrs	r2, BASEPRI
    6260:	f384 8812 	msr	BASEPRI_MAX, r4
    6264:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    6268:	6141      	str	r1, [r0, #20]
}
    626a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    626c:	2101      	movs	r1, #1
    626e:	f7fa bd2f 	b.w	cd0 <process_event>

00006272 <validate_args>:
{
    6272:	b510      	push	{r4, lr}
    6274:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    6276:	b140      	cbz	r0, 628a <validate_args+0x18>
    6278:	b139      	cbz	r1, 628a <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    627a:	1d08      	adds	r0, r1, #4
    627c:	f7ff ff6c 	bl	6158 <sys_notify_validate>
	if ((rv == 0)
    6280:	b928      	cbnz	r0, 628e <validate_args+0x1c>
	    && ((cli->notify.flags
    6282:	68a3      	ldr	r3, [r4, #8]
    6284:	f033 0303 	bics.w	r3, r3, #3
    6288:	d001      	beq.n	628e <validate_args+0x1c>
		rv = -EINVAL;
    628a:	f06f 0015 	mvn.w	r0, #21
}
    628e:	bd10      	pop	{r4, pc}

00006290 <onoff_manager_init>:
{
    6290:	b538      	push	{r3, r4, r5, lr}
    6292:	460c      	mov	r4, r1
	if ((mgr == NULL)
    6294:	4605      	mov	r5, r0
    6296:	b158      	cbz	r0, 62b0 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    6298:	b151      	cbz	r1, 62b0 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    629a:	680b      	ldr	r3, [r1, #0]
    629c:	b143      	cbz	r3, 62b0 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    629e:	684b      	ldr	r3, [r1, #4]
    62a0:	b133      	cbz	r3, 62b0 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    62a2:	221c      	movs	r2, #28
    62a4:	2100      	movs	r1, #0
    62a6:	f000 fbd7 	bl	6a58 <memset>
    62aa:	612c      	str	r4, [r5, #16]
	return 0;
    62ac:	2000      	movs	r0, #0
}
    62ae:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    62b0:	f06f 0015 	mvn.w	r0, #21
    62b4:	e7fb      	b.n	62ae <onoff_manager_init+0x1e>

000062b6 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    62b6:	b570      	push	{r4, r5, r6, lr}
    62b8:	4604      	mov	r4, r0
    62ba:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    62bc:	f7ff ffd9 	bl	6272 <validate_args>

	if (rv < 0) {
    62c0:	1e05      	subs	r5, r0, #0
    62c2:	db31      	blt.n	6328 <onoff_request+0x72>
    62c4:	f04f 0320 	mov.w	r3, #32
    62c8:	f3ef 8111 	mrs	r1, BASEPRI
    62cc:	f383 8812 	msr	BASEPRI_MAX, r3
    62d0:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    62d4:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    62d6:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    62d8:	f64f 75ff 	movw	r5, #65535	; 0xffff
    62dc:	42ab      	cmp	r3, r5
    62de:	f000 0207 	and.w	r2, r0, #7
    62e2:	d02e      	beq.n	6342 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    62e4:	2a02      	cmp	r2, #2
    62e6:	d10e      	bne.n	6306 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    62e8:	3301      	adds	r3, #1
    62ea:	8363      	strh	r3, [r4, #26]
	rv = state;
    62ec:	4615      	mov	r5, r2
		notify = true;
    62ee:	2301      	movs	r3, #1
	__asm__ volatile(
    62f0:	f381 8811 	msr	BASEPRI, r1
    62f4:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    62f8:	b1b3      	cbz	r3, 6328 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    62fa:	2300      	movs	r3, #0
    62fc:	4631      	mov	r1, r6
    62fe:	4620      	mov	r0, r4
    6300:	f7ff ff93 	bl	622a <notify_one>
    6304:	e010      	b.n	6328 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    6306:	0783      	lsls	r3, r0, #30
    6308:	d001      	beq.n	630e <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    630a:	2a06      	cmp	r2, #6
    630c:	d10e      	bne.n	632c <onoff_request+0x76>
	parent->next = child;
    630e:	2300      	movs	r3, #0
    6310:	6033      	str	r3, [r6, #0]
	return list->tail;
    6312:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    6314:	b993      	cbnz	r3, 633c <onoff_request+0x86>
	list->head = node;
    6316:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    631a:	4615      	mov	r5, r2
    631c:	b962      	cbnz	r2, 6338 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    631e:	460a      	mov	r2, r1
    6320:	4620      	mov	r0, r4
    6322:	2102      	movs	r1, #2
    6324:	f7fa fcd4 	bl	cd0 <process_event>
		}
	}

	return rv;
}
    6328:	4628      	mov	r0, r5
    632a:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    632c:	2a05      	cmp	r2, #5
    632e:	bf0c      	ite	eq
    6330:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    6334:	f06f 0504 	mvnne.w	r5, #4
    6338:	2300      	movs	r3, #0
    633a:	e7d9      	b.n	62f0 <onoff_request+0x3a>
	parent->next = child;
    633c:	601e      	str	r6, [r3, #0]
	list->tail = node;
    633e:	6066      	str	r6, [r4, #4]
}
    6340:	e7eb      	b.n	631a <onoff_request+0x64>
		rv = -EAGAIN;
    6342:	f06f 050a 	mvn.w	r5, #10
    6346:	e7f7      	b.n	6338 <onoff_request+0x82>

00006348 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    6348:	b510      	push	{r4, lr}
	__asm__ volatile(
    634a:	f04f 0320 	mov.w	r3, #32
    634e:	f3ef 8211 	mrs	r2, BASEPRI
    6352:	f383 8812 	msr	BASEPRI_MAX, r3
    6356:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    635a:	8b04      	ldrh	r4, [r0, #24]
    635c:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    6360:	2c02      	cmp	r4, #2
    6362:	d00a      	beq.n	637a <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    6364:	2c01      	cmp	r4, #1
    6366:	bf0c      	ite	eq
    6368:	f06f 0004 	mvneq.w	r0, #4
    636c:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    6370:	f382 8811 	msr	BASEPRI, r2
    6374:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    6378:	e008      	b.n	638c <onoff_release+0x44>
	mgr->refs -= 1U;
    637a:	8b43      	ldrh	r3, [r0, #26]
    637c:	3b01      	subs	r3, #1
    637e:	b29b      	uxth	r3, r3
    6380:	8343      	strh	r3, [r0, #26]
	if (stop) {
    6382:	b923      	cbnz	r3, 638e <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    6384:	4621      	mov	r1, r4
    6386:	f7fa fca3 	bl	cd0 <process_event>
	int rv = state;
    638a:	4620      	mov	r0, r4
}
    638c:	bd10      	pop	{r4, pc}
	int rv = state;
    638e:	4620      	mov	r0, r4
    6390:	e7ee      	b.n	6370 <onoff_release+0x28>

00006392 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    6392:	4604      	mov	r4, r0
    6394:	b508      	push	{r3, lr}
    6396:	4608      	mov	r0, r1
    6398:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    639a:	461a      	mov	r2, r3
    639c:	47a0      	blx	r4
	return z_impl_z_current_get();
    639e:	f7ff fc31 	bl	5c04 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    63a2:	f7fc fc53 	bl	2c4c <z_impl_k_thread_abort>

000063a6 <encode_uint>:
{
    63a6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    63aa:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    63ac:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    63ae:	2b6f      	cmp	r3, #111	; 0x6f
{
    63b0:	4680      	mov	r8, r0
    63b2:	460f      	mov	r7, r1
    63b4:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    63b6:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    63ba:	d029      	beq.n	6410 <encode_uint+0x6a>
    63bc:	d824      	bhi.n	6408 <encode_uint+0x62>
		return 16;
    63be:	2b58      	cmp	r3, #88	; 0x58
    63c0:	bf14      	ite	ne
    63c2:	260a      	movne	r6, #10
    63c4:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    63c6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    63ca:	4632      	mov	r2, r6
    63cc:	2300      	movs	r3, #0
    63ce:	4640      	mov	r0, r8
    63d0:	4639      	mov	r1, r7
    63d2:	f7f9 fe85 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    63d6:	2a09      	cmp	r2, #9
    63d8:	b2d4      	uxtb	r4, r2
    63da:	d81e      	bhi.n	641a <encode_uint+0x74>
    63dc:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    63de:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    63e0:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    63e2:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    63e6:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    63ea:	d301      	bcc.n	63f0 <encode_uint+0x4a>
    63ec:	45d1      	cmp	r9, sl
    63ee:	d811      	bhi.n	6414 <encode_uint+0x6e>
	if (conv->flag_hash) {
    63f0:	782b      	ldrb	r3, [r5, #0]
    63f2:	069b      	lsls	r3, r3, #26
    63f4:	d505      	bpl.n	6402 <encode_uint+0x5c>
		if (radix == 8) {
    63f6:	2e08      	cmp	r6, #8
    63f8:	d115      	bne.n	6426 <encode_uint+0x80>
			conv->altform_0 = true;
    63fa:	78ab      	ldrb	r3, [r5, #2]
    63fc:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    6400:	70ab      	strb	r3, [r5, #2]
}
    6402:	4648      	mov	r0, r9
    6404:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    6408:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    640c:	2b70      	cmp	r3, #112	; 0x70
    640e:	e7d7      	b.n	63c0 <encode_uint+0x1a>
	switch (specifier) {
    6410:	2608      	movs	r6, #8
    6412:	e7d8      	b.n	63c6 <encode_uint+0x20>
		value /= radix;
    6414:	4680      	mov	r8, r0
    6416:	460f      	mov	r7, r1
    6418:	e7d7      	b.n	63ca <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    641a:	f1bb 0f19 	cmp.w	fp, #25
    641e:	bf94      	ite	ls
    6420:	3437      	addls	r4, #55	; 0x37
    6422:	3457      	addhi	r4, #87	; 0x57
    6424:	e7db      	b.n	63de <encode_uint+0x38>
		} else if (radix == 16) {
    6426:	2e10      	cmp	r6, #16
    6428:	d1eb      	bne.n	6402 <encode_uint+0x5c>
			conv->altform_0c = true;
    642a:	78ab      	ldrb	r3, [r5, #2]
    642c:	f043 0310 	orr.w	r3, r3, #16
    6430:	e7e6      	b.n	6400 <encode_uint+0x5a>

00006432 <outs>:
{
    6432:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6436:	4607      	mov	r7, r0
    6438:	4688      	mov	r8, r1
    643a:	4615      	mov	r5, r2
    643c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    643e:	4614      	mov	r4, r2
    6440:	42b4      	cmp	r4, r6
    6442:	eba4 0005 	sub.w	r0, r4, r5
    6446:	d302      	bcc.n	644e <outs+0x1c>
    6448:	b93e      	cbnz	r6, 645a <outs+0x28>
    644a:	7823      	ldrb	r3, [r4, #0]
    644c:	b12b      	cbz	r3, 645a <outs+0x28>
		int rc = out((int)*sp++, ctx);
    644e:	f814 0b01 	ldrb.w	r0, [r4], #1
    6452:	4641      	mov	r1, r8
    6454:	47b8      	blx	r7
		if (rc < 0) {
    6456:	2800      	cmp	r0, #0
    6458:	daf2      	bge.n	6440 <outs+0xe>
}
    645a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000645e <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    645e:	4602      	mov	r2, r0
    6460:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    6462:	68c0      	ldr	r0, [r0, #12]
    6464:	6814      	ldr	r4, [r2, #0]
    6466:	42a0      	cmp	r0, r4
    6468:	d904      	bls.n	6474 <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    646a:	3801      	subs	r0, #1
    646c:	1b00      	subs	r0, r0, r4
    646e:	6008      	str	r0, [r1, #0]

		return false;
    6470:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
    6472:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    6474:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
    6476:	b918      	cbnz	r0, 6480 <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    6478:	3b01      	subs	r3, #1
    647a:	1b1b      	subs	r3, r3, r4
    647c:	600b      	str	r3, [r1, #0]
		return false;
    647e:	e7f8      	b.n	6472 <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
    6480:	1b1b      	subs	r3, r3, r4
    6482:	600b      	str	r3, [r1, #0]
	return true;
    6484:	2001      	movs	r0, #1
    6486:	e7f4      	b.n	6472 <free_space+0x14>

00006488 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    6488:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    648a:	a901      	add	r1, sp, #4
{
    648c:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    648e:	f7ff ffe6 	bl	645e <free_space>
    6492:	b120      	cbz	r0, 649e <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    6494:	9b01      	ldr	r3, [sp, #4]
    6496:	68e2      	ldr	r2, [r4, #12]
    6498:	3b01      	subs	r3, #1
    649a:	4413      	add	r3, r2
    649c:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    649e:	9801      	ldr	r0, [sp, #4]
    64a0:	6a23      	ldr	r3, [r4, #32]
    64a2:	43c0      	mvns	r0, r0
}
    64a4:	4418      	add	r0, r3
    64a6:	b002      	add	sp, #8
    64a8:	bd10      	pop	{r4, pc}

000064aa <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
    64aa:	b510      	push	{r4, lr}
    64ac:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    64ae:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    64b0:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    64b2:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    64b4:	07d2      	lsls	r2, r2, #31
    64b6:	d502      	bpl.n	64be <idx_inc+0x14>
		return i & (buffer->size - 1);
    64b8:	3b01      	subs	r3, #1
    64ba:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    64bc:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    64be:	4298      	cmp	r0, r3
    64c0:	bf28      	it	cs
    64c2:	1ac0      	subcs	r0, r0, r3
    64c4:	e7fa      	b.n	64bc <idx_inc+0x12>

000064c6 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    64c6:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    64c8:	69c2      	ldr	r2, [r0, #28]
{
    64ca:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
    64cc:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    64ce:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    64d0:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    64d4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    64d8:	462a      	mov	r2, r5
    64da:	6801      	ldr	r1, [r0, #0]
{
    64dc:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    64de:	f7ff ffe4 	bl	64aa <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    64e2:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    64e4:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    64e6:	462a      	mov	r2, r5
    64e8:	4620      	mov	r0, r4
    64ea:	f7ff ffde 	bl	64aa <idx_inc>
    64ee:	6060      	str	r0, [r4, #4]
}
    64f0:	bd38      	pop	{r3, r4, r5, pc}

000064f2 <max_utilization_update>:
{
    64f2:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    64f4:	6903      	ldr	r3, [r0, #16]
    64f6:	075b      	lsls	r3, r3, #29
{
    64f8:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    64fa:	d506      	bpl.n	650a <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    64fc:	6a45      	ldr	r5, [r0, #36]	; 0x24
    64fe:	f7ff ffc3 	bl	6488 <get_usage>
    6502:	4285      	cmp	r5, r0
    6504:	d902      	bls.n	650c <max_utilization_update+0x1a>
    6506:	6a60      	ldr	r0, [r4, #36]	; 0x24
    6508:	6260      	str	r0, [r4, #36]	; 0x24
}
    650a:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    650c:	4620      	mov	r0, r4
    650e:	f7ff ffbb 	bl	6488 <get_usage>
    6512:	e7f9      	b.n	6508 <max_utilization_update+0x16>

00006514 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    6514:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    6518:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    651c:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
    6520:	461f      	mov	r7, r3
	*user_packet = false;
    6522:	2300      	movs	r3, #0
    6524:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
    6526:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    652a:	f003 0303 	and.w	r3, r3, #3
    652e:	2b02      	cmp	r3, #2
{
    6530:	4604      	mov	r4, r0
    6532:	468b      	mov	fp, r1
    6534:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    6536:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    653a:	d103      	bne.n	6544 <drop_item_locked+0x30>
		return item->skip.len;
    653c:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    6540:	08ad      	lsrs	r5, r5, #2
    6542:	d12e      	bne.n	65a2 <drop_item_locked+0x8e>
    6544:	69a3      	ldr	r3, [r4, #24]
    6546:	4630      	mov	r0, r6
    6548:	4798      	blx	r3
    654a:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
    654c:	f1b8 0f00 	cmp.w	r8, #0
    6550:	d036      	beq.n	65c0 <drop_item_locked+0xac>
		if (item->hdr.busy) {
    6552:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    6556:	079b      	lsls	r3, r3, #30
    6558:	d52f      	bpl.n	65ba <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
    655a:	f10b 0101 	add.w	r1, fp, #1
    655e:	4620      	mov	r0, r4
    6560:	f7ff ffb1 	bl	64c6 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    6564:	6861      	ldr	r1, [r4, #4]
    6566:	462a      	mov	r2, r5
    6568:	4620      	mov	r0, r4
    656a:	f7ff ff9e 	bl	64aa <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    656e:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    6570:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    6572:	462a      	mov	r2, r5
    6574:	4620      	mov	r0, r4
    6576:	f7ff ff98 	bl	64aa <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    657a:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    657c:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    657e:	68e1      	ldr	r1, [r4, #12]
    6580:	4620      	mov	r0, r4
    6582:	f7ff ff92 	bl	64aa <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    6586:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
    6588:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
    658c:	f002 0203 	and.w	r2, r2, #3
    6590:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    6592:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    6596:	d10c      	bne.n	65b2 <drop_item_locked+0x9e>
		return item->skip.len;
    6598:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
    659c:	089b      	lsrs	r3, r3, #2
    659e:	d008      	beq.n	65b2 <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
    65a0:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    65a2:	68e1      	ldr	r1, [r4, #12]
    65a4:	462a      	mov	r2, r5
    65a6:	4620      	mov	r0, r4
    65a8:	f7ff ff7f 	bl	64aa <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    65ac:	e9c4 0002 	strd	r0, r0, [r4, #8]
    65b0:	e007      	b.n	65c2 <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
    65b2:	69a3      	ldr	r3, [r4, #24]
    65b4:	4630      	mov	r0, r6
    65b6:	4798      	blx	r3
    65b8:	4405      	add	r5, r0
			*user_packet = true;
    65ba:	2301      	movs	r3, #1
    65bc:	703b      	strb	r3, [r7, #0]
    65be:	e7f0      	b.n	65a2 <drop_item_locked+0x8e>
		item = NULL;
    65c0:	4646      	mov	r6, r8
	}

	return item;
}
    65c2:	4630      	mov	r0, r6
    65c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000065c8 <mpsc_pbuf_init>:
{
    65c8:	b538      	push	{r3, r4, r5, lr}
    65ca:	460d      	mov	r5, r1
    65cc:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    65ce:	221c      	movs	r2, #28
    65d0:	2100      	movs	r1, #0
    65d2:	f000 fa41 	bl	6a58 <memset>
	buffer->get_wlen = cfg->get_wlen;
    65d6:	68eb      	ldr	r3, [r5, #12]
    65d8:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    65da:	68ab      	ldr	r3, [r5, #8]
	buffer->size = cfg->size;
    65dc:	686a      	ldr	r2, [r5, #4]
	buffer->notify_drop = cfg->notify_drop;
    65de:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    65e0:	682b      	ldr	r3, [r5, #0]
    65e2:	61e3      	str	r3, [r4, #28]
	buffer->max_usage = 0;
    65e4:	2300      	movs	r3, #0
    65e6:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->size = cfg->size;
    65e8:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
    65ea:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    65ec:	b122      	cbz	r2, 65f8 <mpsc_pbuf_init+0x30>
    65ee:	1e51      	subs	r1, r2, #1
    65f0:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    65f2:	bf08      	it	eq
    65f4:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
    65f8:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    65fa:	2201      	movs	r2, #1
    65fc:	f104 0028 	add.w	r0, r4, #40	; 0x28
    6600:	2100      	movs	r1, #0
}
    6602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6606:	f000 bc96 	b.w	6f36 <z_impl_k_sem_init>

0000660a <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    660a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    660e:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    6610:	6a03      	ldr	r3, [r0, #32]
    6612:	3b01      	subs	r3, #1
    6614:	428b      	cmp	r3, r1
{
    6616:	b085      	sub	sp, #20
    6618:	4604      	mov	r4, r0
    661a:	460f      	mov	r7, r1
    661c:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
    661e:	d364      	bcc.n	66ea <mpsc_pbuf_alloc+0xe0>
	union mpsc_pbuf_generic *dropped_item = NULL;
    6620:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
    6622:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
    6624:	f100 0b28 	add.w	fp, r0, #40	; 0x28
	__asm__ volatile(
    6628:	f04f 0320 	mov.w	r3, #32
    662c:	f3ef 8611 	mrs	r6, BASEPRI
    6630:	f383 8812 	msr	BASEPRI_MAX, r3
    6634:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
    6638:	a903      	add	r1, sp, #12
    663a:	4620      	mov	r0, r4
    663c:	f7ff ff0f 	bl	645e <free_space>
		if (free_wlen >= wlen) {
    6640:	9903      	ldr	r1, [sp, #12]
    6642:	42b9      	cmp	r1, r7
    6644:	d321      	bcc.n	668a <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    6646:	6821      	ldr	r1, [r4, #0]
			item =
    6648:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    664a:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
    664e:	f022 0203 	bic.w	r2, r2, #3
    6652:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    6656:	4620      	mov	r0, r4
    6658:	463a      	mov	r2, r7
			item =
    665a:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
    665e:	f7ff ff24 	bl	64aa <idx_inc>
		cont = false;
    6662:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    6664:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
    6666:	f386 8811 	msr	BASEPRI, r6
    666a:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    666e:	2b00      	cmp	r3, #0
    6670:	d03d      	beq.n	66ee <mpsc_pbuf_alloc+0xe4>
    6672:	2d00      	cmp	r5, #0
    6674:	d0d8      	beq.n	6628 <mpsc_pbuf_alloc+0x1e>
    6676:	f89d 300b 	ldrb.w	r3, [sp, #11]
    667a:	2b00      	cmp	r3, #0
    667c:	d0d4      	beq.n	6628 <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
    667e:	4629      	mov	r1, r5
    6680:	6963      	ldr	r3, [r4, #20]
    6682:	4620      	mov	r0, r4
    6684:	4798      	blx	r3
			dropped_item = NULL;
    6686:	2500      	movs	r5, #0
    6688:	e7ce      	b.n	6628 <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
    668a:	b128      	cbz	r0, 6698 <mpsc_pbuf_alloc+0x8e>
    668c:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
    668e:	4620      	mov	r0, r4
    6690:	f7ff ff19 	bl	64c6 <add_skip_item>
			cont = true;
    6694:	9b01      	ldr	r3, [sp, #4]
    6696:	e7e6      	b.n	6666 <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    6698:	ea58 0309 	orrs.w	r3, r8, r9
    669c:	d017      	beq.n	66ce <mpsc_pbuf_alloc+0xc4>
			   !k_is_in_isr()) {
    669e:	f000 fc27 	bl	6ef0 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    66a2:	b9a0      	cbnz	r0, 66ce <mpsc_pbuf_alloc+0xc4>
    66a4:	f386 8811 	msr	BASEPRI, r6
    66a8:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    66ac:	4642      	mov	r2, r8
    66ae:	464b      	mov	r3, r9
    66b0:	4658      	mov	r0, fp
    66b2:	f7fe fe69 	bl	5388 <z_impl_k_sem_take>
	__asm__ volatile(
    66b6:	f04f 0320 	mov.w	r3, #32
    66ba:	f3ef 8611 	mrs	r6, BASEPRI
    66be:	f383 8812 	msr	BASEPRI_MAX, r3
    66c2:	f3bf 8f6f 	isb	sy
			if (err == 0) {
    66c6:	fab0 f380 	clz	r3, r0
    66ca:	095b      	lsrs	r3, r3, #5
    66cc:	e7cb      	b.n	6666 <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    66ce:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    66d0:	9903      	ldr	r1, [sp, #12]
    66d2:	f10d 030b 	add.w	r3, sp, #11
    66d6:	f3c2 0240 	ubfx	r2, r2, #1, #1
    66da:	4620      	mov	r0, r4
    66dc:	f7ff ff1a 	bl	6514 <drop_item_locked>
			cont = dropped_item != NULL;
    66e0:	1e03      	subs	r3, r0, #0
    66e2:	4605      	mov	r5, r0
    66e4:	bf18      	it	ne
    66e6:	2301      	movne	r3, #1
    66e8:	e7bd      	b.n	6666 <mpsc_pbuf_alloc+0x5c>
		return NULL;
    66ea:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    66ee:	4650      	mov	r0, sl
    66f0:	b005      	add	sp, #20
    66f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000066f6 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    66f6:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    66f8:	6983      	ldr	r3, [r0, #24]
{
    66fa:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    66fc:	4608      	mov	r0, r1
{
    66fe:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    6700:	4798      	blx	r3
    6702:	4602      	mov	r2, r0
    6704:	f04f 0320 	mov.w	r3, #32
    6708:	f3ef 8611 	mrs	r6, BASEPRI
    670c:	f383 8812 	msr	BASEPRI_MAX, r3
    6710:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    6714:	782b      	ldrb	r3, [r5, #0]
    6716:	f043 0301 	orr.w	r3, r3, #1
    671a:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    671c:	6861      	ldr	r1, [r4, #4]
    671e:	4620      	mov	r0, r4
    6720:	f7ff fec3 	bl	64aa <idx_inc>
    6724:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    6726:	4620      	mov	r0, r4
    6728:	f7ff fee3 	bl	64f2 <max_utilization_update>
	__asm__ volatile(
    672c:	f386 8811 	msr	BASEPRI, r6
    6730:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    6734:	bd70      	pop	{r4, r5, r6, pc}

00006736 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    6736:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    673a:	4604      	mov	r4, r0
	__asm__ volatile(
    673c:	f04f 0320 	mov.w	r3, #32
    6740:	f3ef 8611 	mrs	r6, BASEPRI
    6744:	f383 8812 	msr	BASEPRI_MAX, r3
    6748:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    674c:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
    6750:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    6752:	bf88      	it	hi
    6754:	6a23      	ldrhi	r3, [r4, #32]
    6756:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    6758:	b1f3      	cbz	r3, 6798 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
    675a:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
    675c:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
    6760:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
    6764:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
    6768:	d016      	beq.n	6798 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
    676a:	2b02      	cmp	r3, #2
    676c:	d103      	bne.n	6776 <mpsc_pbuf_claim+0x40>
		return item->skip.len;
    676e:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    6772:	08ad      	lsrs	r5, r5, #2
    6774:	d115      	bne.n	67a2 <mpsc_pbuf_claim+0x6c>
    6776:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
    6778:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
    677a:	d50f      	bpl.n	679c <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
    677c:	f042 0202 	orr.w	r2, r2, #2
    6780:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
    6784:	4640      	mov	r0, r8
    6786:	4798      	blx	r3
    6788:	4639      	mov	r1, r7
    678a:	4602      	mov	r2, r0
    678c:	4620      	mov	r0, r4
    678e:	f7ff fe8c 	bl	64aa <idx_inc>
		cont = false;
    6792:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
    6794:	60a0      	str	r0, [r4, #8]
    6796:	e011      	b.n	67bc <mpsc_pbuf_claim+0x86>
			item = NULL;
    6798:	4698      	mov	r8, r3
    679a:	e00f      	b.n	67bc <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
    679c:	4640      	mov	r0, r8
    679e:	4798      	blx	r3
    67a0:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    67a2:	68a1      	ldr	r1, [r4, #8]
    67a4:	462a      	mov	r2, r5
    67a6:	4620      	mov	r0, r4
    67a8:	f7ff fe7f 	bl	64aa <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
    67ac:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    67ae:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    67b0:	462a      	mov	r2, r5
    67b2:	4620      	mov	r0, r4
    67b4:	f7ff fe79 	bl	64aa <idx_inc>
				cont = true;
    67b8:	2301      	movs	r3, #1
				buffer->rd_idx =
    67ba:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    67bc:	f386 8811 	msr	BASEPRI, r6
    67c0:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    67c4:	2b00      	cmp	r3, #0
    67c6:	d1b9      	bne.n	673c <mpsc_pbuf_claim+0x6>

	return item;
}
    67c8:	4640      	mov	r0, r8
    67ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000067ce <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    67ce:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    67d0:	6983      	ldr	r3, [r0, #24]
{
    67d2:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    67d4:	4608      	mov	r0, r1
{
    67d6:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    67d8:	4798      	blx	r3
    67da:	4602      	mov	r2, r0
	__asm__ volatile(
    67dc:	f04f 0320 	mov.w	r3, #32
    67e0:	f3ef 8611 	mrs	r6, BASEPRI
    67e4:	f383 8812 	msr	BASEPRI_MAX, r3
    67e8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    67ec:	782b      	ldrb	r3, [r5, #0]
    67ee:	f36f 0300 	bfc	r3, #0, #1
    67f2:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    67f4:	6923      	ldr	r3, [r4, #16]
    67f6:	079b      	lsls	r3, r3, #30
    67f8:	d505      	bpl.n	6806 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    67fa:	68e1      	ldr	r1, [r4, #12]
    67fc:	69e3      	ldr	r3, [r4, #28]
    67fe:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    6802:	429d      	cmp	r5, r3
    6804:	d112      	bne.n	682c <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
    6806:	782b      	ldrb	r3, [r5, #0]
    6808:	f36f 0341 	bfc	r3, #1, #1
    680c:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    680e:	68e1      	ldr	r1, [r4, #12]
    6810:	4620      	mov	r0, r4
    6812:	f7ff fe4a 	bl	64aa <idx_inc>
    6816:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    6818:	f386 8811 	msr	BASEPRI, r6
    681c:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    6820:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    6824:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    6828:	f7fe bd8e 	b.w	5348 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    682c:	682b      	ldr	r3, [r5, #0]
    682e:	f360 039f 	bfi	r3, r0, #2, #30
    6832:	602b      	str	r3, [r5, #0]
    6834:	e7f0      	b.n	6818 <mpsc_pbuf_free+0x4a>

00006836 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    6836:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    683a:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    683c:	bf8a      	itet	hi
    683e:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    6840:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    6842:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    6844:	1e18      	subs	r0, r3, #0
    6846:	bf18      	it	ne
    6848:	2001      	movne	r0, #1
    684a:	4770      	bx	lr

0000684c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    684c:	4770      	bx	lr

0000684e <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    684e:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    6850:	075b      	lsls	r3, r3, #29
    6852:	d40b      	bmi.n	686c <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    6854:	6803      	ldr	r3, [r0, #0]
    6856:	8840      	ldrh	r0, [r0, #2]
    6858:	f3c3 2349 	ubfx	r3, r3, #9, #10
    685c:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    6860:	4418      	add	r0, r3
    6862:	3017      	adds	r0, #23
    6864:	f020 0007 	bic.w	r0, r0, #7
    6868:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
    686a:	4770      	bx	lr
	return 0;
    686c:	2000      	movs	r0, #0
}
    686e:	4770      	bx	lr

00006870 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    6870:	f000 ba09 	b.w	6c86 <sys_clock_cycle_get_32>

00006874 <dummy_timestamp>:
    6874:	2000      	movs	r0, #0
    6876:	4770      	bx	lr

00006878 <z_log_vprintk>:
{
    6878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    687a:	2300      	movs	r3, #0
    687c:	e9cd 0102 	strd	r0, r1, [sp, #8]
    6880:	e9cd 3300 	strd	r3, r3, [sp]
    6884:	461a      	mov	r2, r3
    6886:	4619      	mov	r1, r3
    6888:	4618      	mov	r0, r3
    688a:	f7fb faa9 	bl	1de0 <z_impl_z_log_msg2_runtime_vcreate>
}
    688e:	b005      	add	sp, #20
    6890:	f85d fb04 	ldr.w	pc, [sp], #4

00006894 <notify_drop>:
	z_log_dropped(true);
    6894:	2001      	movs	r0, #1
    6896:	f7fa bf31 	b.w	16fc <z_log_dropped>

0000689a <get_msg>:
{
    689a:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
    689c:	f7fa ffa2 	bl	17e4 <z_log_msg2_claim>
}
    68a0:	bd08      	pop	{r3, pc}

000068a2 <z_log_get_tag>:
}
    68a2:	2000      	movs	r0, #0
    68a4:	4770      	bx	lr

000068a6 <buffer_write>:
{
    68a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    68a8:	4606      	mov	r6, r0
    68aa:	460d      	mov	r5, r1
    68ac:	4614      	mov	r4, r2
    68ae:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    68b0:	4621      	mov	r1, r4
    68b2:	4628      	mov	r0, r5
    68b4:	463a      	mov	r2, r7
    68b6:	47b0      	blx	r6
	} while (len != 0);
    68b8:	1a24      	subs	r4, r4, r0
		buf += processed;
    68ba:	4405      	add	r5, r0
	} while (len != 0);
    68bc:	d1f8      	bne.n	68b0 <buffer_write+0xa>
}
    68be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000068c0 <log_output_flush>:
		     output->control_block->offset,
    68c0:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    68c2:	6881      	ldr	r1, [r0, #8]
{
    68c4:	b510      	push	{r4, lr}
    68c6:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    68c8:	e9d2 2300 	ldrd	r2, r3, [r2]
    68cc:	6800      	ldr	r0, [r0, #0]
    68ce:	f7ff ffea 	bl	68a6 <buffer_write>
	output->control_block->offset = 0;
    68d2:	6863      	ldr	r3, [r4, #4]
    68d4:	2200      	movs	r2, #0
    68d6:	601a      	str	r2, [r3, #0]
}
    68d8:	bd10      	pop	{r4, pc}

000068da <out_func>:
{
    68da:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    68dc:	684b      	ldr	r3, [r1, #4]
    68de:	681a      	ldr	r2, [r3, #0]
    68e0:	68cb      	ldr	r3, [r1, #12]
    68e2:	429a      	cmp	r2, r3
{
    68e4:	4605      	mov	r5, r0
    68e6:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    68e8:	d102      	bne.n	68f0 <out_func+0x16>
		log_output_flush(out_ctx);
    68ea:	4608      	mov	r0, r1
    68ec:	f7ff ffe8 	bl	68c0 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    68f0:	6863      	ldr	r3, [r4, #4]
    68f2:	f3bf 8f5b 	dmb	ish
    68f6:	e853 2f00 	ldrex	r2, [r3]
    68fa:	1c51      	adds	r1, r2, #1
    68fc:	e843 1000 	strex	r0, r1, [r3]
    6900:	2800      	cmp	r0, #0
    6902:	d1f8      	bne.n	68f6 <out_func+0x1c>
    6904:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    6908:	68a3      	ldr	r3, [r4, #8]
    690a:	549d      	strb	r5, [r3, r2]
}
    690c:	2000      	movs	r0, #0
    690e:	bd38      	pop	{r3, r4, r5, pc}

00006910 <cr_out_func>:
{
    6910:	b538      	push	{r3, r4, r5, lr}
    6912:	4605      	mov	r5, r0
    6914:	460c      	mov	r4, r1
	out_func(c, ctx);
    6916:	f7ff ffe0 	bl	68da <out_func>
	if (c == '\n') {
    691a:	2d0a      	cmp	r5, #10
    691c:	d103      	bne.n	6926 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    691e:	4621      	mov	r1, r4
    6920:	200d      	movs	r0, #13
    6922:	f7ff ffda 	bl	68da <out_func>
}
    6926:	2000      	movs	r0, #0
    6928:	bd38      	pop	{r3, r4, r5, pc}

0000692a <z_log_msg2_finalize>:
{
    692a:	b570      	push	{r4, r5, r6, lr}
    692c:	460e      	mov	r6, r1
    692e:	4615      	mov	r5, r2
    6930:	4619      	mov	r1, r3
	if (!msg) {
    6932:	4604      	mov	r4, r0
    6934:	b918      	cbnz	r0, 693e <z_log_msg2_finalize+0x14>
}
    6936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    693a:	f7fa bedf 	b.w	16fc <z_log_dropped>
	if (data) {
    693e:	b143      	cbz	r3, 6952 <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
    6940:	f100 0310 	add.w	r3, r0, #16
    6944:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    6948:	4418      	add	r0, r3
    694a:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    694e:	f000 f878 	bl	6a42 <memcpy>
	msg->hdr.source = source;
    6952:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    6956:	4620      	mov	r0, r4
}
    6958:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    695c:	f7fb b804 	b.w	1968 <z_log_msg2_commit>

00006960 <z_impl_z_log_msg2_static_create>:
{
    6960:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    6964:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    6968:	f3c1 2649 	ubfx	r6, r1, #9, #10
    696c:	b089      	sub	sp, #36	; 0x24
    696e:	4681      	mov	r9, r0
    6970:	460d      	mov	r5, r1
    6972:	4690      	mov	r8, r2
    6974:	469a      	mov	sl, r3
    6976:	3417      	adds	r4, #23
	if (inlen > 0) {
    6978:	b386      	cbz	r6, 69dc <z_impl_z_log_msg2_static_create+0x7c>
		len = cbprintf_package_copy(package, inlen,
    697a:	2302      	movs	r3, #2
    697c:	9300      	str	r3, [sp, #0]
    697e:	f04f 0b04 	mov.w	fp, #4
    6982:	2300      	movs	r3, #0
    6984:	af06      	add	r7, sp, #24
    6986:	4631      	mov	r1, r6
    6988:	461a      	mov	r2, r3
    698a:	f8cd b008 	str.w	fp, [sp, #8]
    698e:	9701      	str	r7, [sp, #4]
    6990:	4640      	mov	r0, r8
    6992:	9605      	str	r6, [sp, #20]
    6994:	f7fa f832 	bl	9fc <cbprintf_package_copy>
		out_desc.package_len = len;
    6998:	f3c0 0309 	ubfx	r3, r0, #0, #10
    699c:	1918      	adds	r0, r3, r4
    699e:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    69a2:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    69a4:	461e      	mov	r6, r3
    69a6:	9304      	str	r3, [sp, #16]
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    69a8:	f7fa ff14 	bl	17d4 <z_log_msg2_alloc>
		if (msg) {
    69ac:	4604      	mov	r4, r0
    69ae:	b150      	cbz	r0, 69c6 <z_impl_z_log_msg2_static_create+0x66>
			len = cbprintf_package_copy(package, inlen,
    69b0:	2302      	movs	r3, #2
    69b2:	9300      	str	r3, [sp, #0]
    69b4:	f100 0210 	add.w	r2, r0, #16
    69b8:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    69bc:	9b04      	ldr	r3, [sp, #16]
    69be:	9905      	ldr	r1, [sp, #20]
    69c0:	4640      	mov	r0, r8
    69c2:	f7fa f81b 	bl	9fc <cbprintf_package_copy>
	z_log_msg2_finalize(msg, source, out_desc, data);
    69c6:	f366 2552 	bfi	r5, r6, #9, #10
    69ca:	4653      	mov	r3, sl
    69cc:	462a      	mov	r2, r5
    69ce:	4649      	mov	r1, r9
    69d0:	4620      	mov	r0, r4
}
    69d2:	b009      	add	sp, #36	; 0x24
    69d4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg2_finalize(msg, source, out_desc, data);
    69d8:	f7ff bfa7 	b.w	692a <z_log_msg2_finalize>
    69dc:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    69e0:	0880      	lsrs	r0, r0, #2
    69e2:	f7fa fef7 	bl	17d4 <z_log_msg2_alloc>
    69e6:	4604      	mov	r4, r0
    69e8:	e7ed      	b.n	69c6 <z_impl_z_log_msg2_static_create+0x66>

000069ea <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    69ea:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    69ec:	6800      	ldr	r0, [r0, #0]
    69ee:	f7fb bc4d 	b.w	228c <z_arm_fatal_error>

000069f2 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    69f2:	2100      	movs	r1, #0
    69f4:	2001      	movs	r0, #1
    69f6:	f7fb bc49 	b.w	228c <z_arm_fatal_error>

000069fa <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    69fa:	b508      	push	{r3, lr}
	handler();
    69fc:	f7fb fd04 	bl	2408 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    6a00:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    6a04:	f7fb bdd6 	b.w	25b4 <z_arm_exc_exit>

00006a08 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    6a08:	2300      	movs	r3, #0
    6a0a:	f7ff bfa9 	b.w	6960 <z_impl_z_log_msg2_static_create>

00006a0e <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    6a0e:	3901      	subs	r1, #1
    6a10:	4603      	mov	r3, r0
    6a12:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    6a16:	b90a      	cbnz	r2, 6a1c <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    6a18:	701a      	strb	r2, [r3, #0]

	return dest;
}
    6a1a:	4770      	bx	lr
		*d = *s;
    6a1c:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    6a20:	e7f7      	b.n	6a12 <strcpy+0x4>

00006a22 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    6a22:	4603      	mov	r3, r0
	size_t n = 0;
    6a24:	2000      	movs	r0, #0

	while (*s != '\0') {
    6a26:	5c1a      	ldrb	r2, [r3, r0]
    6a28:	b902      	cbnz	r2, 6a2c <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    6a2a:	4770      	bx	lr
		n++;
    6a2c:	3001      	adds	r0, #1
    6a2e:	e7fa      	b.n	6a26 <strlen+0x4>

00006a30 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    6a30:	4603      	mov	r3, r0
	size_t n = 0;
    6a32:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    6a34:	5c1a      	ldrb	r2, [r3, r0]
    6a36:	b10a      	cbz	r2, 6a3c <strnlen+0xc>
    6a38:	4288      	cmp	r0, r1
    6a3a:	d100      	bne.n	6a3e <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    6a3c:	4770      	bx	lr
		n++;
    6a3e:	3001      	adds	r0, #1
    6a40:	e7f8      	b.n	6a34 <strnlen+0x4>

00006a42 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    6a42:	b510      	push	{r4, lr}
    6a44:	1e43      	subs	r3, r0, #1
    6a46:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    6a48:	4291      	cmp	r1, r2
    6a4a:	d100      	bne.n	6a4e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    6a4c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    6a4e:	f811 4b01 	ldrb.w	r4, [r1], #1
    6a52:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    6a56:	e7f7      	b.n	6a48 <memcpy+0x6>

00006a58 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    6a58:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    6a5a:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    6a5c:	4603      	mov	r3, r0
	while (n > 0) {
    6a5e:	4293      	cmp	r3, r2
    6a60:	d100      	bne.n	6a64 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    6a62:	4770      	bx	lr
		*(d_byte++) = c_byte;
    6a64:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    6a68:	e7f9      	b.n	6a5e <memset+0x6>

00006a6a <_stdout_hook_default>:
}
    6a6a:	f04f 30ff 	mov.w	r0, #4294967295
    6a6e:	4770      	bx	lr

00006a70 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    6a70:	f04f 0220 	mov.w	r2, #32
    6a74:	f3ef 8311 	mrs	r3, BASEPRI
    6a78:	f382 8812 	msr	BASEPRI_MAX, r2
    6a7c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    6a80:	f383 8811 	msr	BASEPRI, r3
    6a84:	f3bf 8f6f 	isb	sy
}
    6a88:	2000      	movs	r0, #0
    6a8a:	4770      	bx	lr

00006a8c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    6a8c:	2806      	cmp	r0, #6
    6a8e:	d108      	bne.n	6aa2 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    6a90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6a94:	2201      	movs	r2, #1
    6a96:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    6a9a:	f3bf 8f4f 	dsb	sy
        __WFE();
    6a9e:	bf20      	wfe
    while (true)
    6aa0:	e7fd      	b.n	6a9e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    6aa2:	4770      	bx	lr

00006aa4 <pm_state_exit_post_ops>:
    6aa4:	2300      	movs	r3, #0
    6aa6:	f383 8811 	msr	BASEPRI, r3
    6aaa:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    6aae:	4770      	bx	lr

00006ab0 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    6ab0:	6903      	ldr	r3, [r0, #16]
    6ab2:	b2c9      	uxtb	r1, r1
    6ab4:	220c      	movs	r2, #12
    6ab6:	fb01 3302 	mla	r3, r1, r2, r3
    6aba:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    6abc:	f000 0007 	and.w	r0, r0, #7
    6ac0:	4770      	bx	lr

00006ac2 <set_on_state>:
	__asm__ volatile(
    6ac2:	f04f 0320 	mov.w	r3, #32
    6ac6:	f3ef 8211 	mrs	r2, BASEPRI
    6aca:	f383 8812 	msr	BASEPRI_MAX, r3
    6ace:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    6ad2:	6803      	ldr	r3, [r0, #0]
    6ad4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    6ad8:	f043 0302 	orr.w	r3, r3, #2
    6adc:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    6ade:	f382 8811 	msr	BASEPRI, r2
    6ae2:	f3bf 8f6f 	isb	sy
}
    6ae6:	4770      	bx	lr

00006ae8 <stop>:
{
    6ae8:	4603      	mov	r3, r0
    6aea:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    6aec:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    6aee:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    6af0:	f04f 0420 	mov.w	r4, #32
    6af4:	f3ef 8611 	mrs	r6, BASEPRI
    6af8:	f384 8812 	msr	BASEPRI_MAX, r4
    6afc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6b00:	250c      	movs	r5, #12
    6b02:	fb05 0401 	mla	r4, r5, r1, r0
    6b06:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    6b08:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    6b0c:	d001      	beq.n	6b12 <stop+0x2a>
    6b0e:	42a2      	cmp	r2, r4
    6b10:	d111      	bne.n	6b36 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    6b12:	fb05 0001 	mla	r0, r5, r1, r0
    6b16:	2201      	movs	r2, #1
    6b18:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    6b1a:	2000      	movs	r0, #0
	__asm__ volatile(
    6b1c:	f386 8811 	msr	BASEPRI, r6
    6b20:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    6b24:	b930      	cbnz	r0, 6b34 <stop+0x4c>
	get_sub_config(dev, type)->stop();
    6b26:	685b      	ldr	r3, [r3, #4]
    6b28:	220c      	movs	r2, #12
    6b2a:	fb02 3101 	mla	r1, r2, r1, r3
    6b2e:	684b      	ldr	r3, [r1, #4]
    6b30:	4798      	blx	r3
	return 0;
    6b32:	2000      	movs	r0, #0
}
    6b34:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    6b36:	f04f 30ff 	mov.w	r0, #4294967295
    6b3a:	e7ef      	b.n	6b1c <stop+0x34>

00006b3c <api_stop>:
	return stop(dev, subsys, CTX_API);
    6b3c:	2280      	movs	r2, #128	; 0x80
    6b3e:	f7ff bfd3 	b.w	6ae8 <stop>

00006b42 <async_start>:
{
    6b42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b44:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    6b46:	6904      	ldr	r4, [r0, #16]
{
    6b48:	4605      	mov	r5, r0
    6b4a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    6b4c:	f04f 0020 	mov.w	r0, #32
    6b50:	f3ef 8c11 	mrs	ip, BASEPRI
    6b54:	f380 8812 	msr	BASEPRI_MAX, r0
    6b58:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    6b5c:	260c      	movs	r6, #12
    6b5e:	fb06 4601 	mla	r6, r6, r1, r4
    6b62:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    6b64:	f000 0e07 	and.w	lr, r0, #7
    6b68:	f1be 0f01 	cmp.w	lr, #1
    6b6c:	d110      	bne.n	6b90 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    6b6e:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    6b70:	2600      	movs	r6, #0
	__asm__ volatile(
    6b72:	f38c 8811 	msr	BASEPRI, ip
    6b76:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    6b7a:	b93e      	cbnz	r6, 6b8c <async_start+0x4a>
	subdata->cb = cb;
    6b7c:	200c      	movs	r0, #12
    6b7e:	4341      	muls	r1, r0
    6b80:	440c      	add	r4, r1
	subdata->user_data = user_data;
    6b82:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    6b86:	686b      	ldr	r3, [r5, #4]
    6b88:	585b      	ldr	r3, [r3, r1]
    6b8a:	4798      	blx	r3
}
    6b8c:	4630      	mov	r0, r6
    6b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    6b90:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    6b94:	4287      	cmp	r7, r0
    6b96:	bf14      	ite	ne
    6b98:	f04f 36ff 	movne.w	r6, #4294967295
    6b9c:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    6ba0:	e7e7      	b.n	6b72 <async_start+0x30>

00006ba2 <api_start>:
{
    6ba2:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    6ba4:	2480      	movs	r4, #128	; 0x80
    6ba6:	9400      	str	r4, [sp, #0]
    6ba8:	f7ff ffcb 	bl	6b42 <async_start>
}
    6bac:	b002      	add	sp, #8
    6bae:	bd10      	pop	{r4, pc}

00006bb0 <onoff_started_callback>:
	return &data->mgr[type];
    6bb0:	6900      	ldr	r0, [r0, #16]
{
    6bb2:	b410      	push	{r4}
	return &data->mgr[type];
    6bb4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    6bb6:	241c      	movs	r4, #28
    6bb8:	fb03 0004 	mla	r0, r3, r4, r0
    6bbc:	2100      	movs	r1, #0
}
    6bbe:	bc10      	pop	{r4}
	notify(mgr, 0);
    6bc0:	4710      	bx	r2

00006bc2 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    6bc2:	2000      	movs	r0, #0
    6bc4:	f000 b8e8 	b.w	6d98 <nrfx_clock_start>

00006bc8 <blocking_start_callback>:
{
    6bc8:	4610      	mov	r0, r2
    6bca:	f7fe bbbd 	b.w	5348 <z_impl_k_sem_give>

00006bce <lfclk_stop>:
{
    6bce:	b508      	push	{r3, lr}
		z_nrf_clock_calibration_lfclk_stopped();
    6bd0:	f7fc fb9c 	bl	330c <z_nrf_clock_calibration_lfclk_stopped>
}
    6bd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6bd8:	2000      	movs	r0, #0
    6bda:	f000 b915 	b.w	6e08 <nrfx_clock_stop>

00006bde <timeout_handler>:
	start_cal_process();
    6bde:	f7fc bad1 	b.w	3184 <start_cal_process>

00006be2 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6be2:	6843      	ldr	r3, [r0, #4]
    6be4:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    6be6:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    6bea:	600b      	str	r3, [r1, #0]
}
    6bec:	2000      	movs	r0, #0
    6bee:	4770      	bx	lr

00006bf0 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6bf0:	6843      	ldr	r3, [r0, #4]
    6bf2:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    6bf4:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    6bf8:	4042      	eors	r2, r0
    6bfa:	400a      	ands	r2, r1
    6bfc:	4042      	eors	r2, r0
    p_reg->OUT = value;
    6bfe:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    6c02:	2000      	movs	r0, #0
    6c04:	4770      	bx	lr

00006c06 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6c06:	6843      	ldr	r3, [r0, #4]
    6c08:	685b      	ldr	r3, [r3, #4]
}
    6c0a:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    6c0c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    6c10:	4770      	bx	lr

00006c12 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6c12:	6843      	ldr	r3, [r0, #4]
    6c14:	685b      	ldr	r3, [r3, #4]
}
    6c16:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    6c18:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    6c1c:	4770      	bx	lr

00006c1e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    6c1e:	6843      	ldr	r3, [r0, #4]
    6c20:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    6c22:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    6c26:	404b      	eors	r3, r1
    p_reg->OUT = value;
    6c28:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    6c2c:	2000      	movs	r0, #0
    6c2e:	4770      	bx	lr

00006c30 <gpio_nrfx_manage_callback>:
	return port->data;
    6c30:	6903      	ldr	r3, [r0, #16]
	return list->head;
    6c32:	6858      	ldr	r0, [r3, #4]
{
    6c34:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    6c36:	b158      	cbz	r0, 6c50 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6c38:	2400      	movs	r4, #0
    6c3a:	4281      	cmp	r1, r0
    6c3c:	d112      	bne.n	6c64 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    6c3e:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    6c40:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    6c42:	b954      	cbnz	r4, 6c5a <gpio_nrfx_manage_callback+0x2a>
    6c44:	428d      	cmp	r5, r1
	list->head = node;
    6c46:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    6c48:	d100      	bne.n	6c4c <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    6c4a:	6098      	str	r0, [r3, #8]
	parent->next = child;
    6c4c:	2000      	movs	r0, #0
    6c4e:	6008      	str	r0, [r1, #0]
	if (set) {
    6c50:	b96a      	cbnz	r2, 6c6e <gpio_nrfx_manage_callback+0x3e>
	return 0;
    6c52:	2000      	movs	r0, #0
}
    6c54:	bd30      	pop	{r4, r5, pc}
    6c56:	4628      	mov	r0, r5
    6c58:	e7ef      	b.n	6c3a <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    6c5a:	428d      	cmp	r5, r1
	parent->next = child;
    6c5c:	6020      	str	r0, [r4, #0]
	list->tail = node;
    6c5e:	bf08      	it	eq
    6c60:	609c      	streq	r4, [r3, #8]
}
    6c62:	e7f3      	b.n	6c4c <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    6c64:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    6c66:	4604      	mov	r4, r0
    6c68:	2d00      	cmp	r5, #0
    6c6a:	d1f4      	bne.n	6c56 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    6c6c:	b13a      	cbz	r2, 6c7e <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    6c6e:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    6c70:	685a      	ldr	r2, [r3, #4]
    6c72:	600a      	str	r2, [r1, #0]
	list->head = node;
    6c74:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    6c76:	2800      	cmp	r0, #0
    6c78:	d1eb      	bne.n	6c52 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    6c7a:	6099      	str	r1, [r3, #8]
}
    6c7c:	e7ea      	b.n	6c54 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    6c7e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    6c82:	e7e7      	b.n	6c54 <gpio_nrfx_manage_callback+0x24>

00006c84 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    6c84:	4770      	bx	lr

00006c86 <sys_clock_cycle_get_32>:
{
    6c86:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    6c88:	f7fc fdec 	bl	3864 <z_nrf_rtc_timer_read>
}
    6c8c:	bd08      	pop	{r3, pc}

00006c8e <bytewise_bit_swap>:
	uint32_t inp = (*(uint32_t *)input);
    6c8e:	6803      	ldr	r3, [r0, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    6c90:	fa93 f3a3 	rbit	r3, r3
	return sys_cpu_to_be32((uint32_t)__RBIT(inp));
    6c94:	0618      	lsls	r0, r3, #24
    6c96:	0a1a      	lsrs	r2, r3, #8
    6c98:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
    6c9c:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    6ca0:	021b      	lsls	r3, r3, #8
    6ca2:	4310      	orrs	r0, r2
    6ca4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
}
    6ca8:	4318      	orrs	r0, r3
    6caa:	4770      	bx	lr

00006cac <ESB_SYS_TIMER_IRQHandler>:
ISR_DIRECT_DECLARE(ESB_SYS_TIMER_IRQHandler)
    6cac:	4668      	mov	r0, sp
    6cae:	f020 0107 	bic.w	r1, r0, #7
    6cb2:	468d      	mov	sp, r1
    6cb4:	b501      	push	{r0, lr}
	ISR_DIRECT_PM();
    6cb6:	f7fb fb99 	bl	23ec <_arch_isr_direct_pm>
    6cba:	f7fb fc7b 	bl	25b4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_SYS_TIMER_IRQHandler)
    6cbe:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    6cc2:	4685      	mov	sp, r0
    6cc4:	4770      	bx	lr

00006cc6 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6cc6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x10)
    6cca:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    6cce:	f1a0 0310 	sub.w	r3, r0, #16
    6cd2:	4258      	negs	r0, r3
    6cd4:	4158      	adcs	r0, r3
    6cd6:	4770      	bx	lr

00006cd8 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    6cd8:	4700      	bx	r0

00006cda <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    6cda:	f000 ba94 	b.w	7206 <z_impl_k_busy_wait>

00006cde <nrfx_flag32_is_allocated>:
    return (mask & NRFX_BIT(bitpos)) ? false : true;
    6cde:	40c8      	lsrs	r0, r1
    6ce0:	43c0      	mvns	r0, r0
}
    6ce2:	f000 0001 	and.w	r0, r0, #1
    6ce6:	4770      	bx	lr

00006ce8 <clock_stop>:
{
    6ce8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    6cea:	4604      	mov	r4, r0
    6cec:	b118      	cbz	r0, 6cf6 <clock_stop+0xe>
    6cee:	2801      	cmp	r0, #1
    6cf0:	d024      	beq.n	6d3c <clock_stop+0x54>
}
    6cf2:	b003      	add	sp, #12
    6cf4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6cf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6cfa:	2202      	movs	r2, #2
    6cfc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6d00:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    6d04:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6d08:	2201      	movs	r2, #1
    6d0a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    6d0c:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6d0e:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    6d10:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    6d14:	bf14      	ite	ne
    6d16:	2500      	movne	r5, #0
    6d18:	f10d 0507 	addeq.w	r5, sp, #7
    6d1c:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6d20:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    6d24:	b1ac      	cbz	r4, 6d52 <clock_stop+0x6a>
    6d26:	2c01      	cmp	r4, #1
    6d28:	d1e3      	bne.n	6cf2 <clock_stop+0xa>
            if (p_clk_src != NULL)
    6d2a:	b125      	cbz	r5, 6d36 <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6d2c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6d30:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    6d34:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6d36:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    6d3a:	e012      	b.n	6d62 <clock_stop+0x7a>
    p_reg->INTENCLR = mask;
    6d3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6d40:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    6d42:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6d46:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6d4a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6d4e:	6058      	str	r0, [r3, #4]
}
    6d50:	e7dc      	b.n	6d0c <clock_stop+0x24>
            if (p_clk_src != NULL)
    6d52:	b125      	cbz	r5, 6d5e <clock_stop+0x76>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6d54:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6d58:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    6d5c:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6d5e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    6d62:	03db      	lsls	r3, r3, #15
    6d64:	d5c5      	bpl.n	6cf2 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    6d66:	b92d      	cbnz	r5, 6d74 <clock_stop+0x8c>
    6d68:	2001      	movs	r0, #1
    6d6a:	f7ff ffb6 	bl	6cda <nrfx_busy_wait>
    6d6e:	3f01      	subs	r7, #1
    6d70:	d1d8      	bne.n	6d24 <clock_stop+0x3c>
    6d72:	e7be      	b.n	6cf2 <clock_stop+0xa>
    6d74:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6d78:	2b01      	cmp	r3, #1
    6d7a:	d0f5      	beq.n	6d68 <clock_stop+0x80>
    6d7c:	e7b9      	b.n	6cf2 <clock_stop+0xa>

00006d7e <nrfx_clock_enable>:
{
    6d7e:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6d80:	2000      	movs	r0, #0
    6d82:	f7fb fb0d 	bl	23a0 <arch_irq_is_enabled>
    6d86:	b908      	cbnz	r0, 6d8c <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6d88:	f7fb fae6 	bl	2358 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    6d8c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6d90:	2200      	movs	r2, #0
    6d92:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    6d96:	bd08      	pop	{r3, pc}

00006d98 <nrfx_clock_start>:
{
    6d98:	b508      	push	{r3, lr}
    switch (domain)
    6d9a:	b110      	cbz	r0, 6da2 <nrfx_clock_start+0xa>
    6d9c:	2801      	cmp	r0, #1
    6d9e:	d028      	beq.n	6df2 <nrfx_clock_start+0x5a>
}
    6da0:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6da2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6da6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6daa:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    6dae:	03c9      	lsls	r1, r1, #15
    6db0:	d40b      	bmi.n	6dca <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    6db2:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    6db6:	07d0      	lsls	r0, r2, #31
    6db8:	d50c      	bpl.n	6dd4 <nrfx_clock_start+0x3c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6dba:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
    if (!is_correct_clk)
    6dbe:	0792      	lsls	r2, r2, #30
    6dc0:	d105      	bne.n	6dce <nrfx_clock_start+0x36>
    p_reg->INTENSET = mask;
    6dc2:	2202      	movs	r2, #2
    6dc4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    6dc8:	e7ea      	b.n	6da0 <nrfx_clock_start+0x8>
    if (!is_correct_clk)
    6dca:	0791      	lsls	r1, r2, #30
    6dcc:	d002      	beq.n	6dd4 <nrfx_clock_start+0x3c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    6dce:	2000      	movs	r0, #0
    6dd0:	f7ff ff8a 	bl	6ce8 <clock_stop>
    p_reg->LFCLKSRC = (uint32_t)(source);
    6dd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6dd8:	2200      	movs	r2, #0
    6dda:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6dde:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6de2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    6de6:	2202      	movs	r2, #2
    6de8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6dec:	2201      	movs	r2, #1
    6dee:	609a      	str	r2, [r3, #8]
}
    6df0:	e7d6      	b.n	6da0 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6df2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6df6:	2200      	movs	r2, #0
    6df8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    6dfc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    6e00:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6e04:	6018      	str	r0, [r3, #0]
}
    6e06:	e7cb      	b.n	6da0 <nrfx_clock_start+0x8>

00006e08 <nrfx_clock_stop>:
    clock_stop(domain);
    6e08:	f7ff bf6e 	b.w	6ce8 <clock_stop>

00006e0c <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    6e0c:	f000 001f 	and.w	r0, r0, #31
    6e10:	0080      	lsls	r0, r0, #2
    6e12:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6e16:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    6e1a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6e1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    6e22:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    6e26:	4770      	bx	lr

00006e28 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    6e28:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    6e2a:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    6e2c:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    6e2e:	bf9c      	itt	ls
    6e30:	6880      	ldrls	r0, [r0, #8]
    6e32:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
    6e34:	3b01      	subs	r3, #1
    6e36:	1a98      	subs	r0, r3, r2
}
    6e38:	4770      	bx	lr

00006e3a <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    6e3a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    6e3e:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    6e42:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    6e44:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6e48:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    6e4a:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6e4c:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    6e4e:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    6e50:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    6e52:	d904      	bls.n	6e5e <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    6e54:	f7ff fdf5 	bl	6a42 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
    6e58:	60ec      	str	r4, [r5, #12]
}
    6e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    6e5e:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
    6e60:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    6e64:	f7ff fded 	bl	6a42 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    6e68:	6868      	ldr	r0, [r5, #4]
    6e6a:	4622      	mov	r2, r4
    6e6c:	eb07 0108 	add.w	r1, r7, r8
    6e70:	e7f0      	b.n	6e54 <_WriteNoCheck+0x1a>

00006e72 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    6e72:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    6e76:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    6e78:	4606      	mov	r6, r0
    6e7a:	4689      	mov	r9, r1
    6e7c:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    6e7e:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    6e82:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    6e84:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6e86:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    6e88:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    6e8a:	bf28      	it	cs
    6e8c:	18e4      	addcs	r4, r4, r3
    6e8e:	3c01      	subs	r4, #1
    6e90:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    6e92:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    6e94:	42bc      	cmp	r4, r7
    6e96:	bf28      	it	cs
    6e98:	463c      	movcs	r4, r7
    6e9a:	4294      	cmp	r4, r2
    6e9c:	bf28      	it	cs
    6e9e:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    6ea0:	4649      	mov	r1, r9
    6ea2:	4428      	add	r0, r5
    6ea4:	4622      	mov	r2, r4
    6ea6:	f7ff fdcc 	bl	6a42 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    6eaa:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    6eac:	4425      	add	r5, r4
      WrOff = 0u;
    6eae:	42ab      	cmp	r3, r5
    6eb0:	bf08      	it	eq
    6eb2:	2500      	moveq	r5, #0
  } while (NumBytes);
    6eb4:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    6eb6:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    6eb8:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    6eba:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    6ebc:	d1e1      	bne.n	6e82 <_WriteBlocking+0x10>
}
    6ebe:	4640      	mov	r0, r8
    6ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00006ec4 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    6ec4:	f7fd be72 	b.w	4bac <_DoInit>

00006ec8 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    6ec8:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    6eca:	f7ff fffb 	bl	6ec4 <SEGGER_RTT_Init>

	return 0;
}
    6ece:	2000      	movs	r0, #0
    6ed0:	bd08      	pop	{r3, pc}

00006ed2 <z_device_state_init>:
}
    6ed2:	4770      	bx	lr

00006ed4 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    6ed4:	b138      	cbz	r0, 6ee6 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    6ed6:	68c3      	ldr	r3, [r0, #12]
    6ed8:	8818      	ldrh	r0, [r3, #0]
    6eda:	f3c0 0008 	ubfx	r0, r0, #0, #9
    6ede:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    6ee2:	4258      	negs	r0, r3
    6ee4:	4158      	adcs	r0, r3
}
    6ee6:	4770      	bx	lr

00006ee8 <z_early_memset>:
	(void) memset(dst, c, n);
    6ee8:	f7ff bdb6 	b.w	6a58 <memset>

00006eec <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    6eec:	f7ff bda9 	b.w	6a42 <memcpy>

00006ef0 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    6ef0:	f3ef 8005 	mrs	r0, IPSR
}
    6ef4:	3800      	subs	r0, #0
    6ef6:	bf18      	it	ne
    6ef8:	2001      	movne	r0, #1
    6efa:	4770      	bx	lr

00006efc <z_impl_k_thread_name_set>:
}
    6efc:	f06f 0057 	mvn.w	r0, #87	; 0x57
    6f00:	4770      	bx	lr

00006f02 <k_thread_name_get>:
}
    6f02:	2000      	movs	r0, #0
    6f04:	4770      	bx	lr

00006f06 <z_impl_k_thread_start>:
	z_sched_start(thread);
    6f06:	f7fe bcc9 	b.w	589c <z_sched_start>

00006f0a <z_pm_save_idle_exit>:
{
    6f0a:	b508      	push	{r3, lr}
	pm_system_resume();
    6f0c:	f7fb f888 	bl	2020 <pm_system_resume>
}
    6f10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    6f14:	f7ff beb6 	b.w	6c84 <sys_clock_idle_exit>

00006f18 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    6f18:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6f1c:	428b      	cmp	r3, r1
    6f1e:	d001      	beq.n	6f24 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    6f20:	f7fe bd2c 	b.w	597c <z_set_prio>
}
    6f24:	2000      	movs	r0, #0
    6f26:	4770      	bx	lr

00006f28 <z_impl_k_mutex_init>:
{
    6f28:	4603      	mov	r3, r0
	mutex->owner = NULL;
    6f2a:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    6f2c:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
    6f30:	e9c3 3300 	strd	r3, r3, [r3]
}
    6f34:	4770      	bx	lr

00006f36 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    6f36:	b13a      	cbz	r2, 6f48 <z_impl_k_sem_init+0x12>
    6f38:	428a      	cmp	r2, r1
    6f3a:	d305      	bcc.n	6f48 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    6f3c:	e9c0 1202 	strd	r1, r2, [r0, #8]
    6f40:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    6f44:	2000      	movs	r0, #0
    6f46:	4770      	bx	lr
		return -EINVAL;
    6f48:	f06f 0015 	mvn.w	r0, #21
}
    6f4c:	4770      	bx	lr

00006f4e <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    6f4e:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    6f50:	2301      	movs	r3, #1
    6f52:	408b      	lsls	r3, r1
    6f54:	ea22 0303 	bic.w	r3, r2, r3
    6f58:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    6f5a:	fa22 f001 	lsr.w	r0, r2, r1
}
    6f5e:	f000 0001 	and.w	r0, r0, #1
    6f62:	4770      	bx	lr

00006f64 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    6f64:	b120      	cbz	r0, 6f70 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    6f66:	2200      	movs	r2, #0
    6f68:	4611      	mov	r1, r2
    6f6a:	3088      	adds	r0, #136	; 0x88
    6f6c:	f000 b8ea 	b.w	7144 <z_sched_wake>
}
    6f70:	4770      	bx	lr

00006f72 <k_work_submit_to_queue>:
{
    6f72:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6f74:	9001      	str	r0, [sp, #4]
    6f76:	4608      	mov	r0, r1
	__asm__ volatile(
    6f78:	f04f 0320 	mov.w	r3, #32
    6f7c:	f3ef 8511 	mrs	r5, BASEPRI
    6f80:	f383 8812 	msr	BASEPRI_MAX, r3
    6f84:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    6f88:	a901      	add	r1, sp, #4
    6f8a:	f7fe fabb 	bl	5504 <submit_to_queue_locked>
    6f8e:	4604      	mov	r4, r0
	__asm__ volatile(
    6f90:	f385 8811 	msr	BASEPRI, r5
    6f94:	f3bf 8f6f 	isb	sy
	if (ret > 0) {
    6f98:	2800      	cmp	r0, #0
    6f9a:	dd09      	ble.n	6fb0 <k_work_submit_to_queue+0x3e>
	__asm__ volatile(
    6f9c:	f04f 0320 	mov.w	r3, #32
    6fa0:	f3ef 8011 	mrs	r0, BASEPRI
    6fa4:	f383 8812 	msr	BASEPRI_MAX, r3
    6fa8:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    6fac:	f000 f825 	bl	6ffa <z_reschedule_irqlock>
}
    6fb0:	4620      	mov	r0, r4
    6fb2:	b003      	add	sp, #12
    6fb4:	bd30      	pop	{r4, r5, pc}

00006fb6 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    6fb6:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    6fba:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6fbc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6fbe:	2300      	movs	r3, #0
	node->prev = NULL;
    6fc0:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    6fc4:	4770      	bx	lr

00006fc6 <unpend_thread_no_timeout>:
{
    6fc6:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    6fc8:	f7ff fff5 	bl	6fb6 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6fcc:	7b43      	ldrb	r3, [r0, #13]
    6fce:	f023 0302 	bic.w	r3, r3, #2
    6fd2:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    6fd4:	2300      	movs	r3, #0
    6fd6:	6083      	str	r3, [r0, #8]
}
    6fd8:	bd08      	pop	{r3, pc}

00006fda <z_unpend_thread_no_timeout>:
{
    6fda:	b508      	push	{r3, lr}
    6fdc:	f04f 0320 	mov.w	r3, #32
    6fe0:	f3ef 8111 	mrs	r1, BASEPRI
    6fe4:	f383 8812 	msr	BASEPRI_MAX, r3
    6fe8:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    6fec:	f7ff ffeb 	bl	6fc6 <unpend_thread_no_timeout>
	__asm__ volatile(
    6ff0:	f381 8811 	msr	BASEPRI, r1
    6ff4:	f3bf 8f6f 	isb	sy
}
    6ff8:	bd08      	pop	{r3, pc}

00006ffa <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    6ffa:	4603      	mov	r3, r0
    6ffc:	b920      	cbnz	r0, 7008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>
    6ffe:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    7002:	b90a      	cbnz	r2, 7008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>
	ret = arch_swap(key);
    7004:	f7fb ba1a 	b.w	243c <arch_swap>
    7008:	f383 8811 	msr	BASEPRI, r3
    700c:	f3bf 8f6f 	isb	sy
}
    7010:	4770      	bx	lr

00007012 <z_reschedule_unlocked>:
	__asm__ volatile(
    7012:	f04f 0320 	mov.w	r3, #32
    7016:	f3ef 8011 	mrs	r0, BASEPRI
    701a:	f383 8812 	msr	BASEPRI_MAX, r3
    701e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    7022:	f7ff bfea 	b.w	6ffa <z_reschedule_irqlock>

00007026 <z_priq_dumb_best>:
{
    7026:	4603      	mov	r3, r0
	return list->head == list;
    7028:	6800      	ldr	r0, [r0, #0]
}
    702a:	4283      	cmp	r3, r0
    702c:	bf08      	it	eq
    702e:	2000      	moveq	r0, #0
    7030:	4770      	bx	lr

00007032 <z_ready_thread>:
{
    7032:	b510      	push	{r4, lr}
    7034:	f04f 0320 	mov.w	r3, #32
    7038:	f3ef 8411 	mrs	r4, BASEPRI
    703c:	f383 8812 	msr	BASEPRI_MAX, r3
    7040:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    7044:	f7fe fbf4 	bl	5830 <ready_thread>
	__asm__ volatile(
    7048:	f384 8811 	msr	BASEPRI, r4
    704c:	f3bf 8f6f 	isb	sy
}
    7050:	bd10      	pop	{r4, pc}

00007052 <z_thread_timeout>:
{
    7052:	b510      	push	{r4, lr}
    7054:	4601      	mov	r1, r0
	__asm__ volatile(
    7056:	f04f 0320 	mov.w	r3, #32
    705a:	f3ef 8411 	mrs	r4, BASEPRI
    705e:	f383 8812 	msr	BASEPRI_MAX, r3
    7062:	f3bf 8f6f 	isb	sy
		if (!killed) {
    7066:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    706a:	f013 0f28 	tst.w	r3, #40	; 0x28
    706e:	d10d      	bne.n	708c <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    7070:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    7074:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    7076:	b10b      	cbz	r3, 707c <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    7078:	f7ff ffa5 	bl	6fc6 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    707c:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    7080:	f023 0314 	bic.w	r3, r3, #20
    7084:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    7088:	f7fe fbd2 	bl	5830 <ready_thread>
	__asm__ volatile(
    708c:	f384 8811 	msr	BASEPRI, r4
    7090:	f3bf 8f6f 	isb	sy
}
    7094:	bd10      	pop	{r4, pc}

00007096 <add_to_waitq_locked>:
{
    7096:	b538      	push	{r3, r4, r5, lr}
    7098:	4604      	mov	r4, r0
    709a:	460d      	mov	r5, r1
	unready_thread(thread);
    709c:	f7fe fc1c 	bl	58d8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    70a0:	7b63      	ldrb	r3, [r4, #13]
    70a2:	f043 0302 	orr.w	r3, r3, #2
    70a6:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    70a8:	b195      	cbz	r5, 70d0 <add_to_waitq_locked+0x3a>
    70aa:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    70ac:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    70ae:	429d      	cmp	r5, r3
    70b0:	d015      	beq.n	70de <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    70b2:	b1a3      	cbz	r3, 70de <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    70b4:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    70b8:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    70bc:	4291      	cmp	r1, r2
    70be:	d008      	beq.n	70d2 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    70c0:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    70c2:	2a00      	cmp	r2, #0
    70c4:	dd05      	ble.n	70d2 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    70c6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    70c8:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    70cc:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    70ce:	605c      	str	r4, [r3, #4]
}
    70d0:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    70d2:	686a      	ldr	r2, [r5, #4]
    70d4:	4293      	cmp	r3, r2
    70d6:	d002      	beq.n	70de <add_to_waitq_locked+0x48>
    70d8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    70da:	2b00      	cmp	r3, #0
    70dc:	d1ec      	bne.n	70b8 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    70de:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    70e0:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    70e4:	601c      	str	r4, [r3, #0]
	list->tail = node;
    70e6:	606c      	str	r4, [r5, #4]
}
    70e8:	e7f2      	b.n	70d0 <add_to_waitq_locked+0x3a>

000070ea <z_unpend1_no_timeout>:
{
    70ea:	b510      	push	{r4, lr}
	__asm__ volatile(
    70ec:	f04f 0320 	mov.w	r3, #32
    70f0:	f3ef 8411 	mrs	r4, BASEPRI
    70f4:	f383 8812 	msr	BASEPRI_MAX, r3
    70f8:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    70fc:	f7ff ff93 	bl	7026 <z_priq_dumb_best>
		if (thread != NULL) {
    7100:	4601      	mov	r1, r0
    7102:	b108      	cbz	r0, 7108 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    7104:	f7ff ff5f 	bl	6fc6 <unpend_thread_no_timeout>
	__asm__ volatile(
    7108:	f384 8811 	msr	BASEPRI, r4
    710c:	f3bf 8f6f 	isb	sy
}
    7110:	4608      	mov	r0, r1
    7112:	bd10      	pop	{r4, pc}

00007114 <z_unpend_first_thread>:
{
    7114:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7116:	f04f 0320 	mov.w	r3, #32
    711a:	f3ef 8511 	mrs	r5, BASEPRI
    711e:	f383 8812 	msr	BASEPRI_MAX, r3
    7122:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    7126:	f7ff ff7e 	bl	7026 <z_priq_dumb_best>
		if (thread != NULL) {
    712a:	4604      	mov	r4, r0
    712c:	b120      	cbz	r0, 7138 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    712e:	f7ff ff4a 	bl	6fc6 <unpend_thread_no_timeout>
    7132:	3018      	adds	r0, #24
    7134:	f000 f823 	bl	717e <z_abort_timeout>
	__asm__ volatile(
    7138:	f385 8811 	msr	BASEPRI, r5
    713c:	f3bf 8f6f 	isb	sy
}
    7140:	4620      	mov	r0, r4
    7142:	bd38      	pop	{r3, r4, r5, pc}

00007144 <z_sched_wake>:
{
    7144:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7146:	f04f 0320 	mov.w	r3, #32
    714a:	f3ef 8511 	mrs	r5, BASEPRI
    714e:	f383 8812 	msr	BASEPRI_MAX, r3
    7152:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    7156:	f7ff ff66 	bl	7026 <z_priq_dumb_best>
		if (thread != NULL) {
    715a:	4604      	mov	r4, r0
    715c:	b150      	cbz	r0, 7174 <z_sched_wake+0x30>
    715e:	6781      	str	r1, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    7160:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    7162:	f7ff ff30 	bl	6fc6 <unpend_thread_no_timeout>
    7166:	3018      	adds	r0, #24
    7168:	f000 f809 	bl	717e <z_abort_timeout>
			ready_thread(thread);
    716c:	4620      	mov	r0, r4
    716e:	f7fe fb5f 	bl	5830 <ready_thread>
			ret = true;
    7172:	2001      	movs	r0, #1
	__asm__ volatile(
    7174:	f385 8811 	msr	BASEPRI, r5
    7178:	f3bf 8f6f 	isb	sy
}
    717c:	bd38      	pop	{r3, r4, r5, pc}

0000717e <z_abort_timeout>:
{
    717e:	b510      	push	{r4, lr}
	__asm__ volatile(
    7180:	f04f 0220 	mov.w	r2, #32
    7184:	f3ef 8411 	mrs	r4, BASEPRI
    7188:	f382 8812 	msr	BASEPRI_MAX, r2
    718c:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    7190:	6803      	ldr	r3, [r0, #0]
    7192:	b13b      	cbz	r3, 71a4 <z_abort_timeout+0x26>
			remove_timeout(to);
    7194:	f7fe fdea 	bl	5d6c <remove_timeout>
			ret = 0;
    7198:	2000      	movs	r0, #0
	__asm__ volatile(
    719a:	f384 8811 	msr	BASEPRI, r4
    719e:	f3bf 8f6f 	isb	sy
}
    71a2:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    71a4:	f06f 0015 	mvn.w	r0, #21
    71a8:	e7f7      	b.n	719a <z_abort_timeout+0x1c>

000071aa <z_get_next_timeout_expiry>:
{
    71aa:	b510      	push	{r4, lr}
	__asm__ volatile(
    71ac:	f04f 0320 	mov.w	r3, #32
    71b0:	f3ef 8411 	mrs	r4, BASEPRI
    71b4:	f383 8812 	msr	BASEPRI_MAX, r3
    71b8:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    71bc:	f7fe fdb0 	bl	5d20 <next_timeout>
	__asm__ volatile(
    71c0:	f384 8811 	msr	BASEPRI, r4
    71c4:	f3bf 8f6f 	isb	sy
}
    71c8:	bd10      	pop	{r4, pc}

000071ca <z_set_timeout_expiry>:
{
    71ca:	b570      	push	{r4, r5, r6, lr}
    71cc:	4604      	mov	r4, r0
    71ce:	460d      	mov	r5, r1
	__asm__ volatile(
    71d0:	f04f 0320 	mov.w	r3, #32
    71d4:	f3ef 8611 	mrs	r6, BASEPRI
    71d8:	f383 8812 	msr	BASEPRI_MAX, r3
    71dc:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    71e0:	f7fe fd9e 	bl	5d20 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    71e4:	2801      	cmp	r0, #1
    71e6:	dd05      	ble.n	71f4 <z_set_timeout_expiry+0x2a>
    71e8:	42a0      	cmp	r0, r4
    71ea:	db03      	blt.n	71f4 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    71ec:	4629      	mov	r1, r5
    71ee:	4620      	mov	r0, r4
    71f0:	f7fc fcb4 	bl	3b5c <sys_clock_set_timeout>
	__asm__ volatile(
    71f4:	f386 8811 	msr	BASEPRI, r6
    71f8:	f3bf 8f6f 	isb	sy
}
    71fc:	bd70      	pop	{r4, r5, r6, pc}

000071fe <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    71fe:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    7200:	f7fe fea4 	bl	5f4c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    7204:	bd08      	pop	{r3, pc}

00007206 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    7206:	b108      	cbz	r0, 720c <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    7208:	f7fb be3a 	b.w	2e80 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    720c:	4770      	bx	lr

0000720e <k_timer_init>:
	timer->status = 0U;
    720e:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    7210:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    7214:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    7218:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    721c:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    7220:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    7222:	6343      	str	r3, [r0, #52]	; 0x34
}
    7224:	4770      	bx	lr

00007226 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    7226:	b510      	push	{r4, lr}
    7228:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    722a:	f7ff ffa8 	bl	717e <z_abort_timeout>

	if (inactive) {
    722e:	b9b0      	cbnz	r0, 725e <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    7230:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7232:	b10b      	cbz	r3, 7238 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    7234:	4620      	mov	r0, r4
    7236:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    7238:	f104 0018 	add.w	r0, r4, #24
    723c:	f7ff ff55 	bl	70ea <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    7240:	b168      	cbz	r0, 725e <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    7242:	f7ff fef6 	bl	7032 <z_ready_thread>
	__asm__ volatile(
    7246:	f04f 0320 	mov.w	r3, #32
    724a:	f3ef 8011 	mrs	r0, BASEPRI
    724e:	f383 8812 	msr	BASEPRI_MAX, r3
    7252:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    7256:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    725a:	f7ff bece 	b.w	6ffa <z_reschedule_irqlock>
    725e:	bd10      	pop	{r4, pc}

00007260 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    7260:	4770      	bx	lr
	...

00007264 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    7264:	f7fc bfd2 	b.w	420c <SystemInit>
