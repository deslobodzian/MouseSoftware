
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 24 00 20 39 32 00 00 bf 84 00 00 0d 32 00 00     .$. 92.......2..
  10:	0d 32 00 00 0d 32 00 00 0d 32 00 00 00 00 00 00     .2...2...2......
	...
  2c:	61 2b 00 00 0d 32 00 00 00 00 00 00 0d 2b 00 00     a+...2.......+..
  3c:	0d 32 00 00                                         .2..

00000040 <_irq_vector_table>:
  40:	11 2c 00 00 21 4b 00 00 11 2c 00 00 11 2c 00 00     .,..!K...,...,..
  50:	11 2c 00 00 11 2c 00 00 11 2c 00 00 11 2c 00 00     .,...,...,...,..
  60:	11 2c 00 00 11 2c 00 00 61 64 00 00 11 2c 00 00     .,...,..ad...,..
  70:	11 2c 00 00 11 2c 00 00 11 2c 00 00 11 2c 00 00     .,...,...,...,..
  80:	11 2c 00 00 11 2c 00 00 11 2c 00 00 11 2c 00 00     .,...,...,...,..
  90:	65 4b 00 00 11 2c 00 00 11 2c 00 00 11 2c 00 00     eK...,...,...,..
  a0:	11 2c 00 00 11 2c 00 00 11 2c 00 00 11 2c 00 00     .,...,...,...,..
  b0:	11 2c 00 00 11 2c 00 00 11 2c 00 00 11 2c 00 00     .,...,...,...,..
  c0:	11 2c 00 00 11 2c 00 00 11 2c 00 00 11 2c 00 00     .,...,...,...,..
  d0:	11 2c 00 00 11 2c 00 00 11 2c 00 00 11 2c 00 00     .,...,...,...,..

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295
      f0:	f04f 30ff 	movne.w	r0, #4294967295
      f4:	f000 b80c 	b.w	110 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f904 	bl	30c <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__aeabi_idiv0>:
     110:	4770      	bx	lr
     112:	bf00      	nop

00000114 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
     114:	b570      	push	{r4, r5, r6, lr}
     116:	4c17      	ldr	r4, [pc, #92]	; (174 <__data_size+0x4>)
     118:	7860      	ldrb	r0, [r4, #1]
     11a:	2800      	cmp	r0, #0
     11c:	d123      	bne.n	166 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
     11e:	2001      	movs	r0, #1
     120:	7060      	strb	r0, [r4, #1]
     122:	f000 fa61 	bl	5e8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
     126:	f06f 0527 	mvn.w	r5, #39	; 0x27
     12a:	b928      	cbnz	r0, 138 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     12c:	f000 fa72 	bl	614 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
     130:	b910      	cbnz	r0, 138 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     132:	f000 fa79 	bl	628 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
     136:	b120      	cbz	r0, 142 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
     138:	480f      	ldr	r0, [pc, #60]	; (178 <__data_size+0x8>)
     13a:	6060      	str	r0, [r4, #4]
     13c:	70a5      	strb	r5, [r4, #2]
     13e:	2008      	movs	r0, #8
     140:	e010      	b.n	164 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
     142:	f000 fa33 	bl	5ac <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
     146:	b940      	cbnz	r0, 15a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     148:	f000 fa3a 	bl	5c0 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
     14c:	b928      	cbnz	r0, 15a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     14e:	f000 fa41 	bl	5d4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
     152:	b910      	cbnz	r0, 15a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     154:	f000 fa52 	bl	5fc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
     158:	b130      	cbz	r0, 168 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
     15a:	4807      	ldr	r0, [pc, #28]	; (178 <__data_size+0x8>)
     15c:	3031      	adds	r0, #49	; 0x31
     15e:	6060      	str	r0, [r4, #4]
     160:	70a5      	strb	r5, [r4, #2]
     162:	2004      	movs	r0, #4
     164:	70e0      	strb	r0, [r4, #3]
     166:	bd70      	pop	{r4, r5, r6, pc}
     168:	f240 113f 	movw	r1, #319	; 0x13f
     16c:	2074      	movs	r0, #116	; 0x74
     16e:	f000 f855 	bl	21c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     172:	0000      	.short	0x0000
     174:	20000000 	.word	0x20000000
     178:	000006d4 	.word	0x000006d4

0000017c <mpsl_tx_power_radio_supported_power_adjust>:
     17c:	4a06      	ldr	r2, [pc, #24]	; (198 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
     17e:	b500      	push	{lr}
     180:	f992 2003 	ldrsb.w	r2, [r2, #3]
     184:	4290      	cmp	r0, r2
     186:	db01      	blt.n	18c <mpsl_tx_power_radio_supported_power_adjust+0x10>
     188:	4610      	mov	r0, r2
     18a:	bd00      	pop	{pc}
     18c:	f000 f808 	bl	1a0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
     190:	4902      	ldr	r1, [pc, #8]	; (19c <mpsl_tx_power_radio_supported_power_adjust+0x20>)
     192:	5608      	ldrsb	r0, [r1, r0]
     194:	bd00      	pop	{pc}
     196:	0000      	.short	0x0000
     198:	20000000 	.word	0x20000000
     19c:	000006c6 	.word	0x000006c6

000001a0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
     1a0:	4602      	mov	r2, r0
     1a2:	4813      	ldr	r0, [pc, #76]	; (1f0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
     1a4:	b510      	push	{r4, lr}
     1a6:	f990 3003 	ldrsb.w	r3, [r0, #3]
     1aa:	429a      	cmp	r2, r3
     1ac:	db01      	blt.n	1b2 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
     1ae:	200d      	movs	r0, #13
     1b0:	bd10      	pop	{r4, pc}
     1b2:	f990 3002 	ldrsb.w	r3, [r0, #2]
     1b6:	429a      	cmp	r2, r3
     1b8:	dc01      	bgt.n	1be <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
     1ba:	2000      	movs	r0, #0
     1bc:	bd10      	pop	{r4, pc}
     1be:	b101      	cbz	r1, 1c2 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
     1c0:	2101      	movs	r1, #1
     1c2:	1ad4      	subs	r4, r2, r3
     1c4:	6843      	ldr	r3, [r0, #4]
     1c6:	5d18      	ldrb	r0, [r3, r4]
     1c8:	4c0a      	ldr	r4, [pc, #40]	; (1f4 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY>)
     1ca:	5624      	ldrsb	r4, [r4, r0]
     1cc:	4294      	cmp	r4, r2
     1ce:	d0f5      	beq.n	1bc <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
     1d0:	4c08      	ldr	r4, [pc, #32]	; (1f4 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY>)
     1d2:	4408      	add	r0, r1
     1d4:	343f      	adds	r4, #63	; 0x3f
     1d6:	b2c0      	uxtb	r0, r0
     1d8:	b2d2      	uxtb	r2, r2
     1da:	42a3      	cmp	r3, r4
     1dc:	d1ee      	bne.n	1bc <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
     1de:	2900      	cmp	r1, #0
     1e0:	d0ec      	beq.n	1bc <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
     1e2:	2a01      	cmp	r2, #1
     1e4:	d001      	beq.n	1ea <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
     1e6:	2a02      	cmp	r2, #2
     1e8:	d1e8      	bne.n	1bc <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
     1ea:	1c40      	adds	r0, r0, #1
     1ec:	b2c0      	uxtb	r0, r0
     1ee:	bd10      	pop	{r4, pc}
     1f0:	20000000 	.word	0x20000000
     1f4:	000006c6 	.word	0x000006c6
     1f8:	f3bf 8f4f 	dsb	sy
     1fc:	4805      	ldr	r0, [pc, #20]	; (214 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x20>)
     1fe:	6801      	ldr	r1, [r0, #0]
     200:	4a05      	ldr	r2, [pc, #20]	; (218 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x24>)
     202:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     206:	4311      	orrs	r1, r2
     208:	6001      	str	r1, [r0, #0]
     20a:	f3bf 8f4f 	dsb	sy
     20e:	bf00      	nop
     210:	e7fd      	b.n	20e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x1a>
     212:	0000      	.short	0x0000
     214:	e000ed0c 	.word	0xe000ed0c
     218:	05fa0004 	.word	0x05fa0004

0000021c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
     21c:	b50e      	push	{r1, r2, r3, lr}
     21e:	b672      	cpsid	i
     220:	4a0f      	ldr	r2, [pc, #60]	; (260 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
     222:	6855      	ldr	r5, [r2, #4]
     224:	b1d5      	cbz	r5, 25c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
     226:	2200      	movs	r2, #0
     228:	4603      	mov	r3, r0
     22a:	466e      	mov	r6, sp
     22c:	240a      	movs	r4, #10
     22e:	e003      	b.n	238 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
     230:	fbb0 f0f4 	udiv	r0, r0, r4
     234:	1c52      	adds	r2, r2, #1
     236:	b2d2      	uxtb	r2, r2
     238:	2800      	cmp	r0, #0
     23a:	d1f9      	bne.n	230 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
     23c:	54b0      	strb	r0, [r6, r2]
     23e:	e009      	b.n	254 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
     240:	fbb3 f0f4 	udiv	r0, r3, r4
     244:	fb04 3010 	mls	r0, r4, r0, r3
     248:	fbb3 f3f4 	udiv	r3, r3, r4
     24c:	1e52      	subs	r2, r2, #1
     24e:	b2d2      	uxtb	r2, r2
     250:	3030      	adds	r0, #48	; 0x30
     252:	54b0      	strb	r0, [r6, r2]
     254:	2a00      	cmp	r2, #0
     256:	d1f3      	bne.n	240 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
     258:	4630      	mov	r0, r6
     25a:	47a8      	blx	r5
     25c:	f7ff ffcc 	bl	1f8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x4>
     260:	20000008 	.word	0x20000008

00000264 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
     264:	00000655 0000068d 00000677 00000665     U.......w...e...
     274:	00000671 0000065f 00000653 00000651     q..._...S...Q...
     284:	00000689 0000067d 0000066b 00000659     ....}...k...Y...
     294:	0000064b 00000643 00000647 0000063d     K...C...G...=...

000002a4 <mpsl_fem_deactivate_now>:
     2a4:	4901      	ldr	r1, [pc, #4]	; (2ac <mpsl_fem_deactivate_now+0x8>)
     2a6:	6809      	ldr	r1, [r1, #0]
     2a8:	6989      	ldr	r1, [r1, #24]
     2aa:	4708      	bx	r1
     2ac:	20000010 	.word	0x20000010

000002b0 <mpsl_fem_disable>:
     2b0:	4801      	ldr	r0, [pc, #4]	; (2b8 <mpsl_fem_disable+0x8>)
     2b2:	6800      	ldr	r0, [r0, #0]
     2b4:	6800      	ldr	r0, [r0, #0]
     2b6:	4700      	bx	r0
     2b8:	20000010 	.word	0x20000010

000002bc <mpsl_fem_lna_configuration_clear>:
     2bc:	4801      	ldr	r0, [pc, #4]	; (2c4 <mpsl_fem_lna_configuration_clear+0x8>)
     2be:	6800      	ldr	r0, [r0, #0]
     2c0:	6940      	ldr	r0, [r0, #20]
     2c2:	4700      	bx	r0
     2c4:	20000010 	.word	0x20000010

000002c8 <mpsl_fem_lna_configuration_set>:
     2c8:	4a01      	ldr	r2, [pc, #4]	; (2d0 <mpsl_fem_lna_configuration_set+0x8>)
     2ca:	6812      	ldr	r2, [r2, #0]
     2cc:	68d2      	ldr	r2, [r2, #12]
     2ce:	4710      	bx	r2
     2d0:	20000010 	.word	0x20000010

000002d4 <mpsl_fem_pa_configuration_clear>:
     2d4:	4801      	ldr	r0, [pc, #4]	; (2dc <mpsl_fem_pa_configuration_clear+0x8>)
     2d6:	6800      	ldr	r0, [r0, #0]
     2d8:	6900      	ldr	r0, [r0, #16]
     2da:	4700      	bx	r0
     2dc:	20000010 	.word	0x20000010

000002e0 <mpsl_fem_pa_configuration_set>:
     2e0:	4a01      	ldr	r2, [pc, #4]	; (2e8 <mpsl_fem_pa_configuration_set+0x8>)
     2e2:	6812      	ldr	r2, [r2, #0]
     2e4:	6892      	ldr	r2, [r2, #8]
     2e6:	4710      	bx	r2
     2e8:	20000010 	.word	0x20000010

000002ec <mpsl_fem_pa_gain_set>:
     2ec:	4901      	ldr	r1, [pc, #4]	; (2f4 <mpsl_fem_pa_gain_set+0x8>)
     2ee:	6809      	ldr	r1, [r1, #0]
     2f0:	6a49      	ldr	r1, [r1, #36]	; 0x24
     2f2:	4708      	bx	r1
     2f4:	20000010 	.word	0x20000010

000002f8 <mpsl_fem_tx_power_split>:
     2f8:	b430      	push	{r4, r5}
     2fa:	4c03      	ldr	r4, [pc, #12]	; (308 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8>)
     2fc:	6824      	ldr	r4, [r4, #0]
     2fe:	6864      	ldr	r4, [r4, #4]
     300:	46a4      	mov	ip, r4
     302:	bc30      	pop	{r4, r5}
     304:	4760      	bx	ip
     306:	0000      	.short	0x0000
     308:	20000010 	.word	0x20000010

0000030c <__udivmoddi4>:
     30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     310:	4686      	mov	lr, r0
     312:	468c      	mov	ip, r1
     314:	4608      	mov	r0, r1
     316:	9e08      	ldr	r6, [sp, #32]
     318:	4615      	mov	r5, r2
     31a:	4674      	mov	r4, lr
     31c:	4619      	mov	r1, r3
     31e:	2b00      	cmp	r3, #0
     320:	f040 80c2 	bne.w	4a8 <CONFIG_LOG_BUFFER_SIZE+0xa8>
     324:	4285      	cmp	r5, r0
     326:	fab2 f282 	clz	r2, r2
     32a:	d945      	bls.n	3b8 <__udivmoddi4+0xac>
     32c:	b14a      	cbz	r2, 342 <__udivmoddi4+0x36>
     32e:	f1c2 0320 	rsb	r3, r2, #32
     332:	fa00 fc02 	lsl.w	ip, r0, r2
     336:	fa2e f303 	lsr.w	r3, lr, r3
     33a:	4095      	lsls	r5, r2
     33c:	ea43 0c0c 	orr.w	ip, r3, ip
     340:	4094      	lsls	r4, r2
     342:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     346:	b2a8      	uxth	r0, r5
     348:	fbbc f8fe 	udiv	r8, ip, lr
     34c:	0c23      	lsrs	r3, r4, #16
     34e:	fb0e cc18 	mls	ip, lr, r8, ip
     352:	fb08 f900 	mul.w	r9, r8, r0
     356:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     35a:	4599      	cmp	r9, r3
     35c:	d928      	bls.n	3b0 <__udivmoddi4+0xa4>
     35e:	18eb      	adds	r3, r5, r3
     360:	f108 37ff 	add.w	r7, r8, #4294967295
     364:	d204      	bcs.n	370 <__udivmoddi4+0x64>
     366:	4599      	cmp	r9, r3
     368:	d902      	bls.n	370 <__udivmoddi4+0x64>
     36a:	f1a8 0702 	sub.w	r7, r8, #2
     36e:	442b      	add	r3, r5
     370:	eba3 0309 	sub.w	r3, r3, r9
     374:	b2a4      	uxth	r4, r4
     376:	fbb3 fcfe 	udiv	ip, r3, lr
     37a:	fb0e 331c 	mls	r3, lr, ip, r3
     37e:	fb0c f000 	mul.w	r0, ip, r0
     382:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     386:	42a0      	cmp	r0, r4
     388:	d914      	bls.n	3b4 <__udivmoddi4+0xa8>
     38a:	192c      	adds	r4, r5, r4
     38c:	f10c 33ff 	add.w	r3, ip, #4294967295
     390:	d204      	bcs.n	39c <__udivmoddi4+0x90>
     392:	42a0      	cmp	r0, r4
     394:	d902      	bls.n	39c <__udivmoddi4+0x90>
     396:	f1ac 0302 	sub.w	r3, ip, #2
     39a:	442c      	add	r4, r5
     39c:	1a24      	subs	r4, r4, r0
     39e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     3a2:	b11e      	cbz	r6, 3ac <__udivmoddi4+0xa0>
     3a4:	40d4      	lsrs	r4, r2
     3a6:	2300      	movs	r3, #0
     3a8:	6034      	str	r4, [r6, #0]
     3aa:	6073      	str	r3, [r6, #4]
     3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3b0:	4647      	mov	r7, r8
     3b2:	e7dd      	b.n	370 <__udivmoddi4+0x64>
     3b4:	4663      	mov	r3, ip
     3b6:	e7f1      	b.n	39c <__udivmoddi4+0x90>
     3b8:	bb92      	cbnz	r2, 420 <CONFIG_LOG_BUFFER_SIZE+0x20>
     3ba:	1b43      	subs	r3, r0, r5
     3bc:	2101      	movs	r1, #1
     3be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     3c2:	b2af      	uxth	r7, r5
     3c4:	fbb3 fcfe 	udiv	ip, r3, lr
     3c8:	0c20      	lsrs	r0, r4, #16
     3ca:	fb0e 331c 	mls	r3, lr, ip, r3
     3ce:	fb0c f807 	mul.w	r8, ip, r7
     3d2:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     3d6:	4598      	cmp	r8, r3
     3d8:	d962      	bls.n	4a0 <CONFIG_LOG_BUFFER_SIZE+0xa0>
     3da:	18eb      	adds	r3, r5, r3
     3dc:	f10c 30ff 	add.w	r0, ip, #4294967295
     3e0:	d204      	bcs.n	3ec <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x4>
     3e2:	4598      	cmp	r8, r3
     3e4:	d902      	bls.n	3ec <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x4>
     3e6:	f1ac 0002 	sub.w	r0, ip, #2
     3ea:	442b      	add	r3, r5
     3ec:	eba3 0308 	sub.w	r3, r3, r8
     3f0:	b2a4      	uxth	r4, r4
     3f2:	fbb3 fcfe 	udiv	ip, r3, lr
     3f6:	fb0e 331c 	mls	r3, lr, ip, r3
     3fa:	fb0c f707 	mul.w	r7, ip, r7
     3fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     402:	42a7      	cmp	r7, r4
     404:	d94e      	bls.n	4a4 <CONFIG_LOG_BUFFER_SIZE+0xa4>
     406:	192c      	adds	r4, r5, r4
     408:	f10c 33ff 	add.w	r3, ip, #4294967295
     40c:	d204      	bcs.n	418 <CONFIG_LOG_BUFFER_SIZE+0x18>
     40e:	42a7      	cmp	r7, r4
     410:	d902      	bls.n	418 <CONFIG_LOG_BUFFER_SIZE+0x18>
     412:	f1ac 0302 	sub.w	r3, ip, #2
     416:	442c      	add	r4, r5
     418:	1be4      	subs	r4, r4, r7
     41a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     41e:	e7c0      	b.n	3a2 <__udivmoddi4+0x96>
     420:	f1c2 0320 	rsb	r3, r2, #32
     424:	fa20 f103 	lsr.w	r1, r0, r3
     428:	4095      	lsls	r5, r2
     42a:	4090      	lsls	r0, r2
     42c:	fa2e f303 	lsr.w	r3, lr, r3
     430:	4303      	orrs	r3, r0
     432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     436:	b2af      	uxth	r7, r5
     438:	fbb1 fcfe 	udiv	ip, r1, lr
     43c:	fb0e 101c 	mls	r0, lr, ip, r1
     440:	0c19      	lsrs	r1, r3, #16
     442:	fb0c f807 	mul.w	r8, ip, r7
     446:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     44a:	4588      	cmp	r8, r1
     44c:	fa04 f402 	lsl.w	r4, r4, r2
     450:	d922      	bls.n	498 <CONFIG_LOG_BUFFER_SIZE+0x98>
     452:	1869      	adds	r1, r5, r1
     454:	f10c 30ff 	add.w	r0, ip, #4294967295
     458:	d204      	bcs.n	464 <CONFIG_LOG_BUFFER_SIZE+0x64>
     45a:	4588      	cmp	r8, r1
     45c:	d902      	bls.n	464 <CONFIG_LOG_BUFFER_SIZE+0x64>
     45e:	f1ac 0002 	sub.w	r0, ip, #2
     462:	4429      	add	r1, r5
     464:	eba1 0108 	sub.w	r1, r1, r8
     468:	b29b      	uxth	r3, r3
     46a:	fbb1 fcfe 	udiv	ip, r1, lr
     46e:	fb0e 111c 	mls	r1, lr, ip, r1
     472:	fb0c f707 	mul.w	r7, ip, r7
     476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     47a:	429f      	cmp	r7, r3
     47c:	d90e      	bls.n	49c <CONFIG_LOG_BUFFER_SIZE+0x9c>
     47e:	18eb      	adds	r3, r5, r3
     480:	f10c 31ff 	add.w	r1, ip, #4294967295
     484:	d204      	bcs.n	490 <CONFIG_LOG_BUFFER_SIZE+0x90>
     486:	429f      	cmp	r7, r3
     488:	d902      	bls.n	490 <CONFIG_LOG_BUFFER_SIZE+0x90>
     48a:	f1ac 0102 	sub.w	r1, ip, #2
     48e:	442b      	add	r3, r5
     490:	1bdb      	subs	r3, r3, r7
     492:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     496:	e792      	b.n	3be <__udivmoddi4+0xb2>
     498:	4660      	mov	r0, ip
     49a:	e7e3      	b.n	464 <CONFIG_LOG_BUFFER_SIZE+0x64>
     49c:	4661      	mov	r1, ip
     49e:	e7f7      	b.n	490 <CONFIG_LOG_BUFFER_SIZE+0x90>
     4a0:	4660      	mov	r0, ip
     4a2:	e7a3      	b.n	3ec <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x4>
     4a4:	4663      	mov	r3, ip
     4a6:	e7b7      	b.n	418 <CONFIG_LOG_BUFFER_SIZE+0x18>
     4a8:	4283      	cmp	r3, r0
     4aa:	d906      	bls.n	4ba <CONFIG_LOG_BUFFER_SIZE+0xba>
     4ac:	b916      	cbnz	r6, 4b4 <CONFIG_LOG_BUFFER_SIZE+0xb4>
     4ae:	2100      	movs	r1, #0
     4b0:	4608      	mov	r0, r1
     4b2:	e77b      	b.n	3ac <__udivmoddi4+0xa0>
     4b4:	e9c6 e000 	strd	lr, r0, [r6]
     4b8:	e7f9      	b.n	4ae <CONFIG_LOG_BUFFER_SIZE+0xae>
     4ba:	fab3 f783 	clz	r7, r3
     4be:	b98f      	cbnz	r7, 4e4 <CONFIG_LOG_BUFFER_SIZE+0xe4>
     4c0:	4283      	cmp	r3, r0
     4c2:	d301      	bcc.n	4c8 <CONFIG_LOG_BUFFER_SIZE+0xc8>
     4c4:	4572      	cmp	r2, lr
     4c6:	d808      	bhi.n	4da <CONFIG_LOG_BUFFER_SIZE+0xda>
     4c8:	ebbe 0402 	subs.w	r4, lr, r2
     4cc:	eb60 0303 	sbc.w	r3, r0, r3
     4d0:	2001      	movs	r0, #1
     4d2:	469c      	mov	ip, r3
     4d4:	b91e      	cbnz	r6, 4de <CONFIG_LOG_BUFFER_SIZE+0xde>
     4d6:	2100      	movs	r1, #0
     4d8:	e768      	b.n	3ac <__udivmoddi4+0xa0>
     4da:	4638      	mov	r0, r7
     4dc:	e7fa      	b.n	4d4 <CONFIG_LOG_BUFFER_SIZE+0xd4>
     4de:	e9c6 4c00 	strd	r4, ip, [r6]
     4e2:	e7f8      	b.n	4d6 <CONFIG_LOG_BUFFER_SIZE+0xd6>
     4e4:	f1c7 0c20 	rsb	ip, r7, #32
     4e8:	40bb      	lsls	r3, r7
     4ea:	fa22 f40c 	lsr.w	r4, r2, ip
     4ee:	431c      	orrs	r4, r3
     4f0:	fa2e f10c 	lsr.w	r1, lr, ip
     4f4:	fa20 f30c 	lsr.w	r3, r0, ip
     4f8:	40b8      	lsls	r0, r7
     4fa:	4301      	orrs	r1, r0
     4fc:	ea4f 4914 	mov.w	r9, r4, lsr #16
     500:	fa0e f507 	lsl.w	r5, lr, r7
     504:	fbb3 f8f9 	udiv	r8, r3, r9
     508:	fa1f fe84 	uxth.w	lr, r4
     50c:	fb09 3018 	mls	r0, r9, r8, r3
     510:	0c0b      	lsrs	r3, r1, #16
     512:	fb08 fa0e 	mul.w	sl, r8, lr
     516:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     51a:	459a      	cmp	sl, r3
     51c:	fa02 f207 	lsl.w	r2, r2, r7
     520:	d940      	bls.n	5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>
     522:	18e3      	adds	r3, r4, r3
     524:	f108 30ff 	add.w	r0, r8, #4294967295
     528:	d204      	bcs.n	534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>
     52a:	459a      	cmp	sl, r3
     52c:	d902      	bls.n	534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>
     52e:	f1a8 0002 	sub.w	r0, r8, #2
     532:	4423      	add	r3, r4
     534:	eba3 030a 	sub.w	r3, r3, sl
     538:	b289      	uxth	r1, r1
     53a:	fbb3 f8f9 	udiv	r8, r3, r9
     53e:	fb09 3318 	mls	r3, r9, r8, r3
     542:	fb08 fe0e 	mul.w	lr, r8, lr
     546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     54a:	458e      	cmp	lr, r1
     54c:	d92c      	bls.n	5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>
     54e:	1861      	adds	r1, r4, r1
     550:	f108 33ff 	add.w	r3, r8, #4294967295
     554:	d204      	bcs.n	560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>
     556:	458e      	cmp	lr, r1
     558:	d902      	bls.n	560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>
     55a:	f1a8 0302 	sub.w	r3, r8, #2
     55e:	4421      	add	r1, r4
     560:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     564:	fba0 9802 	umull	r9, r8, r0, r2
     568:	eba1 010e 	sub.w	r1, r1, lr
     56c:	4541      	cmp	r1, r8
     56e:	46ce      	mov	lr, r9
     570:	4643      	mov	r3, r8
     572:	d302      	bcc.n	57a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x92>
     574:	d106      	bne.n	584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>
     576:	454d      	cmp	r5, r9
     578:	d204      	bcs.n	584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>
     57a:	ebb9 0e02 	subs.w	lr, r9, r2
     57e:	eb68 0304 	sbc.w	r3, r8, r4
     582:	3801      	subs	r0, #1
     584:	2e00      	cmp	r6, #0
     586:	d0a6      	beq.n	4d6 <CONFIG_LOG_BUFFER_SIZE+0xd6>
     588:	ebb5 020e 	subs.w	r2, r5, lr
     58c:	eb61 0103 	sbc.w	r1, r1, r3
     590:	fa01 fc0c 	lsl.w	ip, r1, ip
     594:	fa22 f307 	lsr.w	r3, r2, r7
     598:	ea4c 0303 	orr.w	r3, ip, r3
     59c:	40f9      	lsrs	r1, r7
     59e:	e9c6 3100 	strd	r3, r1, [r6]
     5a2:	e798      	b.n	4d6 <CONFIG_LOG_BUFFER_SIZE+0xd6>
     5a4:	4640      	mov	r0, r8
     5a6:	e7c5      	b.n	534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>
     5a8:	4643      	mov	r3, r8
     5aa:	e7d9      	b.n	560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>

000005ac <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
     5ac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     5b0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     5b4:	280f      	cmp	r0, #15
     5b6:	d001      	beq.n	5bc <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
     5b8:	2000      	movs	r0, #0
     5ba:	4770      	bx	lr
     5bc:	2001      	movs	r0, #1
     5be:	4770      	bx	lr

000005c0 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
     5c0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     5c4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     5c8:	280a      	cmp	r0, #10
     5ca:	d001      	beq.n	5d0 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
     5cc:	2000      	movs	r0, #0
     5ce:	4770      	bx	lr
     5d0:	2001      	movs	r0, #1
     5d2:	4770      	bx	lr

000005d4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
     5d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     5d8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     5dc:	280e      	cmp	r0, #14
     5de:	d001      	beq.n	5e4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
     5e0:	2000      	movs	r0, #0
     5e2:	4770      	bx	lr
     5e4:	2001      	movs	r0, #1
     5e6:	4770      	bx	lr

000005e8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
     5e8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     5ec:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     5f0:	2810      	cmp	r0, #16
     5f2:	d001      	beq.n	5f8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
     5f4:	2000      	movs	r0, #0
     5f6:	4770      	bx	lr
     5f8:	2001      	movs	r0, #1
     5fa:	4770      	bx	lr

000005fc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
     5fc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     600:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     604:	2806      	cmp	r0, #6
     606:	d003      	beq.n	610 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
     608:	1c40      	adds	r0, r0, #1
     60a:	d001      	beq.n	610 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
     60c:	2000      	movs	r0, #0
     60e:	4770      	bx	lr
     610:	2001      	movs	r0, #1
     612:	4770      	bx	lr

00000614 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
     614:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     618:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     61c:	280d      	cmp	r0, #13
     61e:	d001      	beq.n	624 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
     620:	2000      	movs	r0, #0
     622:	4770      	bx	lr
     624:	2001      	movs	r0, #1
     626:	4770      	bx	lr

00000628 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
     628:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     62c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     630:	2808      	cmp	r0, #8
     632:	d001      	beq.n	638 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
     634:	2000      	movs	r0, #0
     636:	4770      	bx	lr
     638:	2001      	movs	r0, #1
     63a:	4770      	bx	lr
     63c:	f04f 30ff 	mov.w	r0, #4294967295
     640:	4770      	bx	lr
     642:	2000      	movs	r0, #0
     644:	4770      	bx	lr
     646:	2000      	movs	r0, #0
     648:	4770      	bx	lr
     64a:	f04f 30ff 	mov.w	r0, #4294967295
     64e:	4770      	bx	lr
     650:	4770      	bx	lr
     652:	4770      	bx	lr
     654:	2000      	movs	r0, #0
     656:	4770      	bx	lr
     658:	2100      	movs	r1, #0
     65a:	7001      	strb	r1, [r0, #0]
     65c:	4770      	bx	lr
     65e:	f04f 30ff 	mov.w	r0, #4294967295
     662:	4770      	bx	lr
     664:	f04f 30ff 	mov.w	r0, #4294967295
     668:	4770      	bx	lr
     66a:	2100      	movs	r1, #0
     66c:	7001      	strb	r1, [r0, #0]
     66e:	4770      	bx	lr
     670:	f04f 30ff 	mov.w	r0, #4294967295
     674:	4770      	bx	lr
     676:	f04f 30ff 	mov.w	r0, #4294967295
     67a:	4770      	bx	lr
     67c:	7800      	ldrb	r0, [r0, #0]
     67e:	2800      	cmp	r0, #0
     680:	d001      	beq.n	686 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x5e>
     682:	f06f 0015 	mvn.w	r0, #21
     686:	4770      	bx	lr
     688:	2000      	movs	r0, #0
     68a:	4770      	bx	lr
     68c:	2200      	movs	r2, #0
     68e:	f000 b802 	b.w	696 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00000692 <mpsl_fem_init>:
     692:	f7ff bd3f 	b.w	114 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

00000696 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
     696:	b570      	push	{r4, r5, r6, lr}
     698:	4614      	mov	r4, r2
     69a:	460d      	mov	r5, r1
     69c:	1b00      	subs	r0, r0, r4
     69e:	f06f 017f 	mvn.w	r1, #127	; 0x7f
     6a2:	4288      	cmp	r0, r1
     6a4:	da01      	bge.n	6aa <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
     6a6:	4608      	mov	r0, r1
     6a8:	e002      	b.n	6b0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
     6aa:	287f      	cmp	r0, #127	; 0x7f
     6ac:	dd00      	ble.n	6b0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
     6ae:	207f      	movs	r0, #127	; 0x7f
     6b0:	4619      	mov	r1, r3
     6b2:	b240      	sxtb	r0, r0
     6b4:	f7ff fd62 	bl	17c <mpsl_tx_power_radio_supported_power_adjust>
     6b8:	7028      	strb	r0, [r5, #0]
     6ba:	706c      	strb	r4, [r5, #1]
     6bc:	2100      	movs	r1, #0
     6be:	4420      	add	r0, r4
     6c0:	70a9      	strb	r1, [r5, #2]
     6c2:	b240      	sxtb	r0, r0
     6c4:	bd70      	pop	{r4, r5, r6, pc}
     6c6:	ecd8      	.short	0xecd8
     6c8:	fcf8f4f0 	.word	0xfcf8f4f0
     6cc:	04030200 	.word	0x04030200
     6d0:	08070605 	.word	0x08070605
	...
     6e8:	01010101 	.word	0x01010101
     6ec:	02020202 	.word	0x02020202
     6f0:	03030303 	.word	0x03030303
     6f4:	04040404 	.word	0x04040404
     6f8:	05050505 	.word	0x05050505
     6fc:	08070606 	.word	0x08070606
     700:	0c0b0a09 	.word	0x0c0b0a09
     704:	0000000d 	.word	0x0000000d
	...
     718:	01010100 	.word	0x01010100
     71c:	02020201 	.word	0x02020201
     720:	03030302 	.word	0x03030302
     724:	04040403 	.word	0x04040403
     728:	05050504 	.word	0x05050504
     72c:	06060605 	.word	0x06060605
     730:	00000908 	.word	0x00000908

00000734 <init_pic32_spi>:

LOG_MODULE_REGISTER(nrf_to_pic32, CONFIG_LOG_DEFAULT_LEVEL);

struct spi_dt_spec spi_com = SPI_DT_SPEC_GET(SPI_DEV, SPI_OP, 0);

void init_pic32_spi(void) {
     734:	b570      	push	{r4, r5, r6, lr}
 * @retval false if the SPI bus (or the CS gpio defined) is not ready for use.
 */
static inline bool spi_is_ready_dt(const struct spi_dt_spec *spec)
{
	/* Validate bus is ready */
	if (!device_is_ready(spec->bus)) {
     736:	4c13      	ldr	r4, [pc, #76]	; (784 <init_pic32_spi+0x50>)
    while(!spi_is_ready_dt(&spi_com)) {
        LOG_ERR("SPI NOT READY");
     738:	4d13      	ldr	r5, [pc, #76]	; (788 <init_pic32_spi+0x54>)
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
     73a:	4e14      	ldr	r6, [pc, #80]	; (78c <init_pic32_spi+0x58>)
void init_pic32_spi(void) {
     73c:	b086      	sub	sp, #24
     73e:	6820      	ldr	r0, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     740:	f008 fa63 	bl	8c0a <z_device_is_ready>
     744:	b198      	cbz	r0, 76e <init_pic32_spi+0x3a>
		return false;
	}
	/* Validate CS gpio port is ready, if it is used */
	if (spec->config.cs &&
     746:	68e3      	ldr	r3, [r4, #12]
     748:	b963      	cbnz	r3, 764 <init_pic32_spi+0x30>
    }
    LOG_INF("SPI is ready");
     74a:	4b11      	ldr	r3, [pc, #68]	; (790 <init_pic32_spi+0x5c>)
     74c:	9305      	str	r3, [sp, #20]
     74e:	2302      	movs	r3, #2
     750:	9304      	str	r3, [sp, #16]
     752:	480e      	ldr	r0, [pc, #56]	; (78c <init_pic32_spi+0x58>)
     754:	2300      	movs	r3, #0
     756:	aa04      	add	r2, sp, #16
     758:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     75c:	f001 fc54 	bl	2008 <z_impl_z_log_msg_static_create>
} 
     760:	b006      	add	sp, #24
     762:	bd70      	pop	{r4, r5, r6, pc}
	    !device_is_ready(spec->config.cs->gpio.port)) {
     764:	6818      	ldr	r0, [r3, #0]
     766:	f008 fa50 	bl	8c0a <z_device_is_ready>
	if (spec->config.cs &&
     76a:	2800      	cmp	r0, #0
     76c:	d1ed      	bne.n	74a <init_pic32_spi+0x16>
        LOG_ERR("SPI NOT READY");
     76e:	2302      	movs	r3, #2
     770:	9505      	str	r5, [sp, #20]
     772:	9304      	str	r3, [sp, #16]
     774:	2300      	movs	r3, #0
     776:	aa04      	add	r2, sp, #16
     778:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     77c:	4630      	mov	r0, r6
     77e:	f001 fc43 	bl	2008 <z_impl_z_log_msg_static_create>
     782:	e7dc      	b.n	73e <init_pic32_spi+0xa>
     784:	20000014 	.word	0x20000014
     788:	00009579 	.word	0x00009579
     78c:	00009318 	.word	0x00009318
     790:	00009587 	.word	0x00009587

00000794 <event_handler.part.0>:
LOG_MODULE_REGISTER(esb_receiver, CONFIG_LOG_DEFAULT_LEVEL);

static struct esb_payload rx_payload;
static receiver_data_t rx_data;

void event_handler(struct esb_evt const *event) {
     794:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
                    message_t msg = {
                        .data = rx_data.rx_payload.data,
                        .len = rx_data.rx_payload.length,
                    };
                    // pic32_spi_write(&msg);
                    LOG_INF("Wrote SPI Message");
     796:	4b06      	ldr	r3, [pc, #24]	; (7b0 <event_handler.part.0+0x1c>)
     798:	9305      	str	r3, [sp, #20]
     79a:	4806      	ldr	r0, [pc, #24]	; (7b4 <event_handler.part.0+0x20>)
     79c:	2302      	movs	r3, #2
     79e:	aa04      	add	r2, sp, #16
     7a0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     7a4:	9304      	str	r3, [sp, #16]
     7a6:	f007 f984 	bl	7ab2 <z_log_msg_static_create.constprop.0>
                //     LOG_ERR("Failed to read packet");
            }
            break;
        }
    }
}
     7aa:	b007      	add	sp, #28
     7ac:	f85d fb04 	ldr.w	pc, [sp], #4
     7b0:	000095a1 	.word	0x000095a1
     7b4:	000092e8 	.word	0x000092e8

000007b8 <event_handler>:
void event_handler(struct esb_evt const *event) {
     7b8:	b508      	push	{r3, lr}
     7ba:	4603      	mov	r3, r0
    if (rx_data.ready) {
     7bc:	4807      	ldr	r0, [pc, #28]	; (7dc <event_handler+0x24>)
     7be:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
     7c2:	b14a      	cbz	r2, 7d8 <event_handler+0x20>
        switch (event->evt_id) {
     7c4:	781b      	ldrb	r3, [r3, #0]
     7c6:	2b02      	cmp	r3, #2
     7c8:	d106      	bne.n	7d8 <event_handler+0x20>
                if (esb_read_rx_payload(&rx_data.rx_payload) == 0) {
     7ca:	f004 fc93 	bl	50f4 <esb_read_rx_payload>
     7ce:	b918      	cbnz	r0, 7d8 <event_handler+0x20>
}
     7d0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
     7d4:	f7ff bfde 	b.w	794 <event_handler.part.0>
     7d8:	bd08      	pop	{r3, pc}
     7da:	bf00      	nop
     7dc:	20000c42 	.word	0x20000c42

000007e0 <clocks_start>:

int clocks_start(void) {
     7e0:	b5b0      	push	{r4, r5, r7, lr}
     7e2:	b08a      	sub	sp, #40	; 0x28
    int err;
    int res;
    struct onoff_manager *clk_mgr;
    struct onoff_client clk_cli;

    clk_mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
     7e4:	2000      	movs	r0, #0
int clocks_start(void) {
     7e6:	af00      	add	r7, sp, #0
    clk_mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
     7e8:	f002 ffc2 	bl	3770 <z_nrf_clock_control_get_onoff>
    if (!clk_mgr) {
     7ec:	b980      	cbnz	r0, 810 <CONFIG_ISR_STACK_SIZE+0x10>
        LOG_ERR("Unable to get the Clock manager");
     7ee:	4b20      	ldr	r3, [pc, #128]	; (870 <__z_interrupt_stack_SIZEOF+0x30>)
     7f0:	627b      	str	r3, [r7, #36]	; 0x24
     7f2:	2302      	movs	r3, #2
     7f4:	481f      	ldr	r0, [pc, #124]	; (874 <__z_interrupt_stack_SIZEOF+0x34>)
     7f6:	623b      	str	r3, [r7, #32]
     7f8:	f107 0220 	add.w	r2, r7, #32
     7fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
        return -ENXIO;
     800:	f06f 0405 	mvn.w	r4, #5
        LOG_ERR("Unable to get the Clock manager");
     804:	f007 f955 	bl	7ab2 <z_log_msg_static_create.constprop.0>
        }
    } while (err);

    LOG_INF("HF clock started");
    return 0;
}
     808:	4620      	mov	r0, r4
     80a:	3728      	adds	r7, #40	; 0x28
     80c:	46bd      	mov	sp, r7
     80e:	bdb0      	pop	{r4, r5, r7, pc}
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
     810:	2300      	movs	r3, #0
     812:	607b      	str	r3, [r7, #4]
     814:	60fb      	str	r3, [r7, #12]
    err = onoff_request(clk_mgr, &clk_cli);
     816:	4639      	mov	r1, r7
     818:	2301      	movs	r3, #1
     81a:	60bb      	str	r3, [r7, #8]
     81c:	f007 fa3e 	bl	7c9c <onoff_request>
    if (err < 0) {
     820:	1e04      	subs	r4, r0, #0
     822:	da0f      	bge.n	844 <__z_interrupt_stack_SIZEOF+0x4>
        LOG_ERR("Clock request failed: %d", err);
     824:	466d      	mov	r5, sp
     826:	b088      	sub	sp, #32
     828:	466a      	mov	r2, sp
     82a:	4b13      	ldr	r3, [pc, #76]	; (878 <__z_interrupt_stack_SIZEOF+0x38>)
            LOG_ERR("Clock could not be started: %d", res);
     82c:	4811      	ldr	r0, [pc, #68]	; (874 <__z_interrupt_stack_SIZEOF+0x34>)
     82e:	e9c2 3405 	strd	r3, r4, [r2, #20]
     832:	2303      	movs	r3, #3
     834:	f842 3f10 	str.w	r3, [r2, #16]!
     838:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
     83c:	f007 f939 	bl	7ab2 <z_log_msg_static_create.constprop.0>
     840:	46ad      	mov	sp, r5
            return res;
     842:	e7e1      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     844:	68bb      	ldr	r3, [r7, #8]
	if (sys_notify_get_method(notify) == SYS_NOTIFY_METHOD_COMPLETED) {
     846:	079b      	lsls	r3, r3, #30
     848:	d1fc      	bne.n	844 <__z_interrupt_stack_SIZEOF+0x4>
		*result = notify->result;
     84a:	68fc      	ldr	r4, [r7, #12]
        if (!err && res) {
     84c:	b124      	cbz	r4, 858 <__z_interrupt_stack_SIZEOF+0x18>
            LOG_ERR("Clock could not be started: %d", res);
     84e:	466d      	mov	r5, sp
     850:	b088      	sub	sp, #32
     852:	466a      	mov	r2, sp
     854:	4b09      	ldr	r3, [pc, #36]	; (87c <__z_interrupt_stack_SIZEOF+0x3c>)
     856:	e7e9      	b.n	82c <CONFIG_ISR_STACK_SIZE+0x2c>
    LOG_INF("HF clock started");
     858:	4b09      	ldr	r3, [pc, #36]	; (880 <__z_interrupt_stack_SIZEOF+0x40>)
     85a:	627b      	str	r3, [r7, #36]	; 0x24
     85c:	2302      	movs	r3, #2
     85e:	4805      	ldr	r0, [pc, #20]	; (874 <__z_interrupt_stack_SIZEOF+0x34>)
     860:	623b      	str	r3, [r7, #32]
     862:	f107 0220 	add.w	r2, r7, #32
     866:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     86a:	f007 f922 	bl	7ab2 <z_log_msg_static_create.constprop.0>
    return 0;
     86e:	e7cb      	b.n	808 <CONFIG_ISR_STACK_SIZE+0x8>
     870:	000095b3 	.word	0x000095b3
     874:	000092e8 	.word	0x000092e8
     878:	000095d3 	.word	0x000095d3
     87c:	000095ec 	.word	0x000095ec
     880:	0000960b 	.word	0x0000960b

00000884 <init_esb>:

int init_esb(void) {
     884:	b530      	push	{r4, r5, lr}
    int err;
    /* These are arbitrary default addresses. In end user products
	 * different addresses should be used for each set of devices.
	 */
	uint8_t base_addr_0[4] = {0xE7, 0xE7, 0xE7, 0xE7};
	uint8_t base_addr_1[4] = {0xC2, 0xC2, 0xC2, 0xC2};
     886:	f04f 32e7 	mov.w	r2, #3890735079	; 0xe7e7e7e7
int init_esb(void) {
     88a:	b091      	sub	sp, #68	; 0x44
	uint8_t base_addr_1[4] = {0xC2, 0xC2, 0xC2, 0xC2};
     88c:	f04f 33c2 	mov.w	r3, #3267543746	; 0xc2c2c2c2
     890:	e9cd 2301 	strd	r2, r3, [sp, #4]
	uint8_t addr_prefix[8] = {0xE7, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8};
     894:	4a1d      	ldr	r2, [pc, #116]	; (90c <init_esb+0x88>)

    struct esb_config config = ESB_DEFAULT_CONFIG;
     896:	4d1e      	ldr	r5, [pc, #120]	; (910 <init_esb+0x8c>)
	uint8_t addr_prefix[8] = {0xE7, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8};
     898:	6810      	ldr	r0, [r2, #0]
     89a:	6851      	ldr	r1, [r2, #4]
     89c:	ab03      	add	r3, sp, #12
     89e:	c303      	stmia	r3!, {r0, r1}
    struct esb_config config = ESB_DEFAULT_CONFIG;
     8a0:	461c      	mov	r4, r3
     8a2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     8a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     8a6:	682b      	ldr	r3, [r5, #0]
     8a8:	6023      	str	r3, [r4, #0]

    config.protocol = ESB_PROTOCOL_ESB_DPL;
    config.bitrate = ESB_BITRATE_2MBPS;
    config.mode = ESB_MODE_PRX;
    config.event_handler = event_handler;
     8aa:	4a1a      	ldr	r2, [pc, #104]	; (914 <init_esb+0x90>)
     8ac:	9206      	str	r2, [sp, #24]
    config.mode = ESB_MODE_PRX;
     8ae:	2301      	movs	r3, #1
    config.selective_auto_ack = true;

    err = esb_init(&config);
     8b0:	a805      	add	r0, sp, #20
    config.mode = ESB_MODE_PRX;
     8b2:	f88d 3015 	strb.w	r3, [sp, #21]
    config.selective_auto_ack = true;
     8b6:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    err = esb_init(&config);
     8ba:	f004 faed 	bl	4e98 <esb_init>

    if (err) {
     8be:	4604      	mov	r4, r0
     8c0:	b160      	cbz	r0, 8dc <init_esb+0x58>
        LOG_ERR("Error initializing esb");
     8c2:	4b15      	ldr	r3, [pc, #84]	; (918 <init_esb+0x94>)
        return err;
    }   

    err = esb_set_prefixes(addr_prefix, ARRAY_SIZE(addr_prefix));
    if (err) {
        LOG_ERR("Error setting address prefix");
     8c4:	930f      	str	r3, [sp, #60]	; 0x3c
     8c6:	4815      	ldr	r0, [pc, #84]	; (91c <init_esb+0x98>)
     8c8:	2302      	movs	r3, #2
     8ca:	aa0e      	add	r2, sp, #56	; 0x38
     8cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     8d0:	930e      	str	r3, [sp, #56]	; 0x38
     8d2:	f007 f8ee 	bl	7ab2 <z_log_msg_static_create.constprop.0>
        return err;
    }   

    return 0;

}
     8d6:	4620      	mov	r0, r4
     8d8:	b011      	add	sp, #68	; 0x44
     8da:	bd30      	pop	{r4, r5, pc}
    err = esb_set_base_address_0(base_addr_0);
     8dc:	a801      	add	r0, sp, #4
     8de:	f004 fcb1 	bl	5244 <esb_set_base_address_0>
    if (err) {
     8e2:	4604      	mov	r4, r0
     8e4:	b108      	cbz	r0, 8ea <init_esb+0x66>
        LOG_ERR("Error setting base address 0");
     8e6:	4b0e      	ldr	r3, [pc, #56]	; (920 <init_esb+0x9c>)
     8e8:	e7ec      	b.n	8c4 <init_esb+0x40>
    err = esb_set_base_address_1(base_addr_1);
     8ea:	a802      	add	r0, sp, #8
     8ec:	f004 fccc 	bl	5288 <esb_set_base_address_1>
    if (err) {
     8f0:	4604      	mov	r4, r0
     8f2:	b108      	cbz	r0, 8f8 <init_esb+0x74>
        LOG_ERR("Error setting base address 1");
     8f4:	4b0b      	ldr	r3, [pc, #44]	; (924 <init_esb+0xa0>)
     8f6:	e7e5      	b.n	8c4 <init_esb+0x40>
    err = esb_set_prefixes(addr_prefix, ARRAY_SIZE(addr_prefix));
     8f8:	2108      	movs	r1, #8
     8fa:	a803      	add	r0, sp, #12
     8fc:	f004 fce6 	bl	52cc <esb_set_prefixes>
    if (err) {
     900:	4604      	mov	r4, r0
     902:	2800      	cmp	r0, #0
     904:	d0e7      	beq.n	8d6 <init_esb+0x52>
        LOG_ERR("Error setting address prefix");
     906:	4b08      	ldr	r3, [pc, #32]	; (928 <init_esb+0xa4>)
     908:	e7dc      	b.n	8c4 <init_esb+0x40>
     90a:	bf00      	nop
     90c:	0000968a 	.word	0x0000968a
     910:	00009360 	.word	0x00009360
     914:	000007b9 	.word	0x000007b9
     918:	0000961c 	.word	0x0000961c
     91c:	000092e8 	.word	0x000092e8
     920:	00009633 	.word	0x00009633
     924:	00009650 	.word	0x00009650
     928:	0000966d 	.word	0x0000966d

0000092c <init_receiver>:

int init_receiver(void) {
     92c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int err;
    rx_data.ready = false;
     92e:	4e1d      	ldr	r6, [pc, #116]	; (9a4 <init_receiver+0x78>)
int init_receiver(void) {
     930:	b087      	sub	sp, #28
    rx_data.ready = false;
     932:	2500      	movs	r5, #0
int init_receiver(void) {
     934:	af00      	add	r7, sp, #0
    rx_data.ready = false;
     936:	f886 5025 	strb.w	r5, [r6, #37]	; 0x25
    ("Staring Dongle Board Receiver");
    err = clocks_start();
     93a:	f7ff ff51 	bl	7e0 <clocks_start>
    if (err < 0) {
     93e:	1e04      	subs	r4, r0, #0
     940:	db12      	blt.n	968 <init_receiver+0x3c>
        return err;
    }

    err = init_esb();
     942:	f7ff ff9f 	bl	884 <init_esb>
    if (err < 0) {
     946:	1e04      	subs	r4, r0, #0
     948:	da12      	bge.n	970 <init_receiver+0x44>
        LOG_ERR("ESB init failed, err %d", err);
     94a:	466d      	mov	r5, sp
     94c:	b088      	sub	sp, #32
     94e:	466a      	mov	r2, sp
     950:	4b15      	ldr	r3, [pc, #84]	; (9a8 <init_receiver+0x7c>)
        return err;
    }

    err = esb_start_rx();
    if (err < 0) {
        LOG_ERR("RX setup failed, err %d", err);
     952:	4816      	ldr	r0, [pc, #88]	; (9ac <init_receiver+0x80>)
     954:	e9c2 3405 	strd	r3, r4, [r2, #20]
     958:	2303      	movs	r3, #3
     95a:	f842 3f10 	str.w	r3, [r2, #16]!
     95e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
     962:	f007 f8a6 	bl	7ab2 <z_log_msg_static_create.constprop.0>
     966:	46ad      	mov	sp, r5
    }

    LOG_INF("Initialization complete");
    rx_data.ready = true;
    return 0;
}
     968:	4620      	mov	r0, r4
     96a:	371c      	adds	r7, #28
     96c:	46bd      	mov	sp, r7
     96e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    err = esb_start_rx();
     970:	f004 fc10 	bl	5194 <esb_start_rx>
    if (err < 0) {
     974:	1e04      	subs	r4, r0, #0
     976:	da04      	bge.n	982 <init_receiver+0x56>
        LOG_ERR("RX setup failed, err %d", err);
     978:	466d      	mov	r5, sp
     97a:	b088      	sub	sp, #32
     97c:	466a      	mov	r2, sp
     97e:	4b0c      	ldr	r3, [pc, #48]	; (9b0 <init_receiver+0x84>)
     980:	e7e7      	b.n	952 <init_receiver+0x26>
    LOG_INF("Initialization complete");
     982:	4b0c      	ldr	r3, [pc, #48]	; (9b4 <init_receiver+0x88>)
     984:	617b      	str	r3, [r7, #20]
     986:	4809      	ldr	r0, [pc, #36]	; (9ac <init_receiver+0x80>)
     988:	2302      	movs	r3, #2
     98a:	f107 0210 	add.w	r2, r7, #16
     98e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     992:	613b      	str	r3, [r7, #16]
     994:	f007 f88d 	bl	7ab2 <z_log_msg_static_create.constprop.0>
    rx_data.ready = true;
     998:	2301      	movs	r3, #1
     99a:	f886 3025 	strb.w	r3, [r6, #37]	; 0x25
    return 0;
     99e:	462c      	mov	r4, r5
     9a0:	e7e2      	b.n	968 <init_receiver+0x3c>
     9a2:	bf00      	nop
     9a4:	20000c42 	.word	0x20000c42
     9a8:	00009693 	.word	0x00009693
     9ac:	000092e8 	.word	0x000092e8
     9b0:	000096ab 	.word	0x000096ab
     9b4:	000096c3 	.word	0x000096c3

000009b8 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     9bc:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     9be:	0784      	lsls	r4, r0, #30
{
     9c0:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     9c2:	f002 0304 	and.w	r3, r2, #4
     9c6:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     9c8:	f3c2 03c2 	ubfx	r3, r2, #3, #3
     9cc:	f103 0301 	add.w	r3, r3, #1
     9d0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
     9d4:	9203      	str	r2, [sp, #12]
     9d6:	4605      	mov	r5, r0
     9d8:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     9da:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
     9dc:	f040 81be 	bne.w	d5c <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
     9e0:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     9e2:	b130      	cbz	r0, 9f2 <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     9e4:	2907      	cmp	r1, #7
     9e6:	d809      	bhi.n	9fc <cbvprintf_package+0x44>
		return -ENOSPC;
     9e8:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     9ec:	b011      	add	sp, #68	; 0x44
     9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     9f2:	f001 0607 	and.w	r6, r1, #7
     9f6:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     9f8:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
     9fc:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     9fe:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
     a02:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
     a04:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
     a08:	f04f 33ff 	mov.w	r3, #4294967295
     a0c:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     a0e:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     a12:	464f      	mov	r7, r9
	bool parsing = false;
     a14:	46cb      	mov	fp, r9
	size = sizeof(char *);
     a16:	4653      	mov	r3, sl
			if (buf0 != NULL) {
     a18:	b10d      	cbz	r5, a1e <cbvprintf_package+0x66>
				*(const char **)buf = s;
     a1a:	9a00      	ldr	r2, [sp, #0]
     a1c:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     a1e:	9805      	ldr	r0, [sp, #20]
     a20:	2800      	cmp	r0, #0
     a22:	f300 80eb 	bgt.w	bfc <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     a26:	489a      	ldr	r0, [pc, #616]	; (c90 <cbvprintf_package+0x2d8>)
     a28:	9a00      	ldr	r2, [sp, #0]
     a2a:	4282      	cmp	r2, r0
     a2c:	d303      	bcc.n	a36 <cbvprintf_package+0x7e>
     a2e:	4899      	ldr	r0, [pc, #612]	; (c94 <cbvprintf_package+0x2dc>)
     a30:	4282      	cmp	r2, r0
     a32:	f0c0 80e3 	bcc.w	bfc <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     a36:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     a38:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     a3c:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     a3e:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     a42:	f100 8106 	bmi.w	c52 <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     a46:	2f0f      	cmp	r7, #15
     a48:	f200 80b4 	bhi.w	bb4 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
     a4c:	2d00      	cmp	r5, #0
     a4e:	f000 8108 	beq.w	c62 <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
     a52:	f107 0240 	add.w	r2, r7, #64	; 0x40
     a56:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
     a5a:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
     a5c:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
     a60:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
     a64:	9804      	ldr	r0, [sp, #16]
     a66:	3001      	adds	r0, #1
     a68:	9004      	str	r0, [sp, #16]
     a6a:	e0ea      	b.n	c42 <cbvprintf_package+0x28a>
			switch (*fmt) {
     a6c:	287a      	cmp	r0, #122	; 0x7a
     a6e:	d860      	bhi.n	b32 <cbvprintf_package+0x17a>
     a70:	284b      	cmp	r0, #75	; 0x4b
     a72:	d80e      	bhi.n	a92 <cbvprintf_package+0xda>
     a74:	2847      	cmp	r0, #71	; 0x47
     a76:	d85c      	bhi.n	b32 <cbvprintf_package+0x17a>
     a78:	2829      	cmp	r0, #41	; 0x29
     a7a:	d82f      	bhi.n	adc <cbvprintf_package+0x124>
     a7c:	2825      	cmp	r0, #37	; 0x25
     a7e:	d055      	beq.n	b2c <cbvprintf_package+0x174>
     a80:	d857      	bhi.n	b32 <cbvprintf_package+0x17a>
     a82:	2820      	cmp	r0, #32
     a84:	d07d      	beq.n	b82 <cbvprintf_package+0x1ca>
     a86:	3823      	subs	r0, #35	; 0x23
     a88:	f1d0 0b00 	rsbs	fp, r0, #0
     a8c:	eb4b 0b00 	adc.w	fp, fp, r0
     a90:	e077      	b.n	b82 <cbvprintf_package+0x1ca>
     a92:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
     a96:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
     a9a:	d84a      	bhi.n	b32 <cbvprintf_package+0x17a>
     a9c:	e8df f00c 	tbb	[pc, ip]
     aa0:	49494971 	.word	0x49494971
     aa4:	49494949 	.word	0x49494949
     aa8:	49494949 	.word	0x49494949
     aac:	4949494c 	.word	0x4949494c
     ab0:	49494949 	.word	0x49494949
     ab4:	4c495a49 	.word	0x4c495a49
     ab8:	5a5a5a4c 	.word	0x5a5a5a4c
     abc:	496e4c71 	.word	0x496e4c71
     ac0:	4c184971 	.word	0x4c184971
     ac4:	83494918 	.word	0x83494918
     ac8:	49494c80 	.word	0x49494c80
     acc:	494c      	.short	0x494c
     ace:	80          	.byte	0x80
     acf:	00          	.byte	0x00
     ad0:	2000      	movs	r0, #0
     ad2:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
     ad6:	f04f 0a04 	mov.w	sl, #4
     ada:	e039      	b.n	b50 <cbvprintf_package+0x198>
			switch (*fmt) {
     adc:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
     ae0:	fa5f fc8c 	uxtb.w	ip, ip
     ae4:	2201      	movs	r2, #1
     ae6:	fa02 fc0c 	lsl.w	ip, r2, ip
     aea:	ea1c 0f0e 	tst.w	ip, lr
     aee:	d148      	bne.n	b82 <cbvprintf_package+0x1ca>
     af0:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
     af4:	d12e      	bne.n	b54 <cbvprintf_package+0x19c>
     af6:	ea1c 0b02 	ands.w	fp, ip, r2
     afa:	d042      	beq.n	b82 <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
     afc:	3c01      	subs	r4, #1
     afe:	4454      	add	r4, sl
     b00:	f1ca 0c00 	rsb	ip, sl, #0
     b04:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     b08:	2d00      	cmp	r5, #0
     b0a:	d061      	beq.n	bd0 <cbvprintf_package+0x218>
     b0c:	eba3 0c05 	sub.w	ip, r3, r5
     b10:	44a4      	add	ip, r4
     b12:	45b4      	cmp	ip, r6
     b14:	f63f af68 	bhi.w	9e8 <cbvprintf_package+0x30>
		if (is_str_arg) {
     b18:	2800      	cmp	r0, #0
     b1a:	d168      	bne.n	bee <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
     b1c:	2b04      	cmp	r3, #4
     b1e:	d147      	bne.n	bb0 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
     b20:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
     b24:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
     b26:	3404      	adds	r4, #4
     b28:	2304      	movs	r3, #4
     b2a:	e02a      	b.n	b82 <cbvprintf_package+0x1ca>
				arg_idx--;
     b2c:	9a01      	ldr	r2, [sp, #4]
     b2e:	3a01      	subs	r2, #1
     b30:	9201      	str	r2, [sp, #4]
				parsing = false;
     b32:	f04f 0b00 	mov.w	fp, #0
				continue;
     b36:	e024      	b.n	b82 <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
     b38:	f811 0c01 	ldrb.w	r0, [r1, #-1]
     b3c:	286c      	cmp	r0, #108	; 0x6c
     b3e:	d134      	bne.n	baa <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
     b40:	f811 3c02 	ldrb.w	r3, [r1, #-2]
     b44:	2000      	movs	r0, #0
     b46:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
     b48:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
     b4a:	d1c4      	bne.n	ad6 <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
     b4c:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
     b50:	4653      	mov	r3, sl
     b52:	e7d3      	b.n	afc <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
     b54:	f108 0807 	add.w	r8, r8, #7
     b58:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
     b5c:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
     b5e:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
     b62:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
     b66:	b135      	cbz	r5, b76 <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
     b68:	9806      	ldr	r0, [sp, #24]
     b6a:	4420      	add	r0, r4
     b6c:	42b0      	cmp	r0, r6
     b6e:	f63f af3b 	bhi.w	9e8 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
     b72:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
     b76:	3408      	adds	r4, #8
				parsing = false;
     b78:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
     b7c:	f04f 0a08 	mov.w	sl, #8
     b80:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
     b82:	f811 0f01 	ldrb.w	r0, [r1, #1]!
     b86:	2800      	cmp	r0, #0
     b88:	d078      	beq.n	c7c <cbvprintf_package+0x2c4>
			if (!parsing) {
     b8a:	f1bb 0f00 	cmp.w	fp, #0
     b8e:	f47f af6d 	bne.w	a6c <cbvprintf_package+0xb4>
				if (*fmt == '%') {
     b92:	2825      	cmp	r0, #37	; 0x25
     b94:	d1f5      	bne.n	b82 <cbvprintf_package+0x1ca>
					arg_idx++;
     b96:	9b01      	ldr	r3, [sp, #4]
     b98:	3301      	adds	r3, #1
     b9a:	9301      	str	r3, [sp, #4]
					parsing = true;
     b9c:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
     ba0:	f04f 0a04 	mov.w	sl, #4
     ba4:	e7ec      	b.n	b80 <cbvprintf_package+0x1c8>
			switch (*fmt) {
     ba6:	4658      	mov	r0, fp
     ba8:	e793      	b.n	ad2 <cbvprintf_package+0x11a>
     baa:	2000      	movs	r0, #0
				parsing = false;
     bac:	4683      	mov	fp, r0
     bae:	e7a5      	b.n	afc <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
     bb0:	2b08      	cmp	r3, #8
     bb2:	d002      	beq.n	bba <cbvprintf_package+0x202>
					return -EINVAL;
     bb4:	f06f 0015 	mvn.w	r0, #21
     bb8:	e718      	b.n	9ec <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
     bba:	f108 0807 	add.w	r8, r8, #7
     bbe:	f028 0807 	bic.w	r8, r8, #7
     bc2:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
     bc6:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
     bca:	3408      	adds	r4, #8
     bcc:	2308      	movs	r3, #8
     bce:	e7d8      	b.n	b82 <cbvprintf_package+0x1ca>
		if (is_str_arg) {
     bd0:	b968      	cbnz	r0, bee <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
     bd2:	2b04      	cmp	r3, #4
     bd4:	d102      	bne.n	bdc <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
     bd6:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
     bda:	e7a4      	b.n	b26 <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
     bdc:	2b08      	cmp	r3, #8
     bde:	d1e9      	bne.n	bb4 <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
     be0:	f108 0807 	add.w	r8, r8, #7
     be4:	f028 0807 	bic.w	r8, r8, #7
     be8:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
     bec:	e7ed      	b.n	bca <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     bee:	9a05      	ldr	r2, [sp, #20]
     bf0:	3a01      	subs	r2, #1
     bf2:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
     bf4:	f858 2b04 	ldr.w	r2, [r8], #4
     bf8:	9200      	str	r2, [sp, #0]
     bfa:	e70d      	b.n	a18 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
     bfc:	9a03      	ldr	r2, [sp, #12]
     bfe:	0790      	lsls	r0, r2, #30
     c00:	d520      	bpl.n	c44 <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     c02:	eba4 0e05 	sub.w	lr, r4, r5
     c06:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     c0a:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     c0e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
     c12:	d2cf      	bcs.n	bb4 <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     c14:	2f0f      	cmp	r7, #15
     c16:	d8cd      	bhi.n	bb4 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
     c18:	b1f5      	cbz	r5, c58 <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
     c1a:	f107 0240 	add.w	r2, r7, #64	; 0x40
     c1e:	eb0d 0e02 	add.w	lr, sp, r2
     c22:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
     c24:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
     c26:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
     c2a:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
     c2e:	f1bc 0f00 	cmp.w	ip, #0
     c32:	f43f af17 	beq.w	a64 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     c36:	f060 007f 	orn	r0, r0, #127	; 0x7f
     c3a:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
     c3e:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
     c42:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
     c44:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
     c48:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
     c4a:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
     c4c:	f64f 7eda 	movw	lr, #65498	; 0xffda
     c50:	e797      	b.n	b82 <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     c52:	f04f 0c00 	mov.w	ip, #0
     c56:	e7da      	b.n	c0e <cbvprintf_package+0x256>
				} else if (is_ro) {
     c58:	f1bc 0f00 	cmp.w	ip, #0
     c5c:	d001      	beq.n	c62 <cbvprintf_package+0x2aa>
					len += 1;
     c5e:	3601      	adds	r6, #1
     c60:	e7ef      	b.n	c42 <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
     c62:	9802      	ldr	r0, [sp, #8]
					len += 2;
     c64:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
     c66:	2800      	cmp	r0, #0
     c68:	d1eb      	bne.n	c42 <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
     c6a:	9800      	ldr	r0, [sp, #0]
     c6c:	e9cd 3106 	strd	r3, r1, [sp, #24]
     c70:	f007 fc39 	bl	84e6 <strlen>
     c74:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
     c78:	4406      	add	r6, r0
     c7a:	e7e2      	b.n	c42 <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
     c7c:	1b63      	subs	r3, r4, r5
     c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     c82:	d297      	bcs.n	bb4 <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
     c84:	b945      	cbnz	r5, c98 <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     c86:	f1a6 0408 	sub.w	r4, r6, #8
     c8a:	18e0      	adds	r0, r4, r3
     c8c:	e6ae      	b.n	9ec <cbvprintf_package+0x34>
     c8e:	bf00      	nop
     c90:	00009094 	.word	0x00009094
     c94:	0000a074 	.word	0x0000a074
	if (rws_pos_en) {
     c98:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
     c9a:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     c9c:	089b      	lsrs	r3, r3, #2
     c9e:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     ca0:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
     ca4:	b1c2      	cbz	r2, cd8 <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     ca6:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     ca8:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
     cac:	f1b9 0f00 	cmp.w	r9, #0
     cb0:	d005      	beq.n	cbe <cbvprintf_package+0x306>
     cb2:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
     cb4:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
     cb6:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
     cba:	4297      	cmp	r7, r2
     cbc:	d10e      	bne.n	cdc <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
     cbe:	f1c5 0301 	rsb	r3, r5, #1
     cc2:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
     cc6:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
     cca:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
     ccc:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
     cd0:	4557      	cmp	r7, sl
     cd2:	d112      	bne.n	cfa <cbvprintf_package+0x342>
	return BUF_OFFSET;
     cd4:	1b60      	subs	r0, r4, r5
     cd6:	e689      	b.n	9ec <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
     cd8:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
     cda:	e7e5      	b.n	ca8 <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     cdc:	f810 3b01 	ldrb.w	r3, [r0], #1
     ce0:	0619      	lsls	r1, r3, #24
     ce2:	d508      	bpl.n	cf6 <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
     ce4:	eb04 0e0c 	add.w	lr, r4, ip
     ce8:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     cea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     cee:	f63f ae7b 	bhi.w	9e8 <cbvprintf_package+0x30>
			*buf++ = pos;
     cf2:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
     cf6:	3201      	adds	r2, #1
     cf8:	e7df      	b.n	cba <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     cfa:	f1b9 0f00 	cmp.w	r9, #0
     cfe:	d003      	beq.n	d08 <cbvprintf_package+0x350>
     d00:	f998 2000 	ldrsb.w	r2, [r8]
     d04:	2a00      	cmp	r2, #0
     d06:	db17      	blt.n	d38 <cbvprintf_package+0x380>
		if (rws_pos_en) {
     d08:	9b02      	ldr	r3, [sp, #8]
     d0a:	b1d3      	cbz	r3, d42 <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
     d0c:	f81a 200b 	ldrb.w	r2, [sl, fp]
     d10:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
     d14:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
     d16:	9b01      	ldr	r3, [sp, #4]
     d18:	1898      	adds	r0, r3, r2
     d1a:	4420      	add	r0, r4
     d1c:	42b0      	cmp	r0, r6
     d1e:	f63f ae63 	bhi.w	9e8 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
     d22:	f898 0000 	ldrb.w	r0, [r8]
     d26:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
     d2a:	9900      	ldr	r1, [sp, #0]
     d2c:	9203      	str	r2, [sp, #12]
     d2e:	4620      	mov	r0, r4
     d30:	f007 fbe9 	bl	8506 <memcpy>
		buf += size;
     d34:	9a03      	ldr	r2, [sp, #12]
     d36:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
     d38:	f10a 0a01 	add.w	sl, sl, #1
     d3c:	f108 0801 	add.w	r8, r8, #1
     d40:	e7c6      	b.n	cd0 <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     d42:	f898 2000 	ldrb.w	r2, [r8]
     d46:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
     d4a:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     d4c:	9b02      	ldr	r3, [sp, #8]
     d4e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
     d52:	9800      	ldr	r0, [sp, #0]
     d54:	f007 fbc7 	bl	84e6 <strlen>
     d58:	1c42      	adds	r2, r0, #1
     d5a:	e7dc      	b.n	d16 <cbvprintf_package+0x35e>
		return -EFAULT;
     d5c:	f06f 000d 	mvn.w	r0, #13
     d60:	e644      	b.n	9ec <cbvprintf_package+0x34>
     d62:	bf00      	nop

00000d64 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
     d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     d68:	b095      	sub	sp, #84	; 0x54
     d6a:	af00      	add	r7, sp, #0
     d6c:	4604      	mov	r4, r0
     d6e:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
     d72:	61bb      	str	r3, [r7, #24]
     d74:	f3cb 03c0 	ubfx	r3, fp, #3, #1
     d78:	627a      	str	r2, [r7, #36]	; 0x24
     d7a:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
     d7c:	6239      	str	r1, [r7, #32]
     d7e:	b951      	cbnz	r1, d96 <cbprintf_package_convert+0x32>
	buf += ros_nbr;
     d80:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
     d82:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
     d84:	7880      	ldrb	r0, [r0, #2]
     d86:	eb00 0083 	add.w	r0, r0, r3, lsl #2
     d8a:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
     d8c:	6a3b      	ldr	r3, [r7, #32]
     d8e:	429e      	cmp	r6, r3
     d90:	d81a      	bhi.n	dc8 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
     d92:	1b03      	subs	r3, r0, r4
     d94:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
     d96:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
     d9a:	78e3      	ldrb	r3, [r4, #3]
     d9c:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
     d9e:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
     da0:	f1ba 0f00 	cmp.w	sl, #0
     da4:	d002      	beq.n	dac <cbprintf_package_convert+0x48>
     da6:	f01b 0f01 	tst.w	fp, #1
     daa:	d117      	bne.n	ddc <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
     dac:	697b      	ldr	r3, [r7, #20]
     dae:	bb5b      	cbnz	r3, e08 <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
     db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     db2:	b11b      	cbz	r3, dbc <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
     db4:	69ba      	ldr	r2, [r7, #24]
     db6:	6a39      	ldr	r1, [r7, #32]
     db8:	4620      	mov	r0, r4
     dba:	4798      	blx	r3
		}

		return in_len;
     dbc:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
     dbe:	4628      	mov	r0, r5
     dc0:	3754      	adds	r7, #84	; 0x54
     dc2:	46bd      	mov	sp, r7
     dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
     dc8:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
     dca:	4628      	mov	r0, r5
     dcc:	f007 fb8b 	bl	84e6 <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
     dd0:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
     dd2:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
     dd4:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
     dd6:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
     dd8:	623b      	str	r3, [r7, #32]
     dda:	e7d7      	b.n	d8c <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
     ddc:	f894 8000 	ldrb.w	r8, [r4]
     de0:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
     de2:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
     de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
     de6:	ea4f 0288 	mov.w	r2, r8, lsl #2
     dea:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
     dec:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
     df0:	2b00      	cmp	r3, #0
     df2:	f040 8101 	bne.w	ff8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x58>
		out_len = (int)in_len;
     df6:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
     df8:	46c1      	mov	r9, r8
     dfa:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
     dfe:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
     e00:	454b      	cmp	r3, r9
     e02:	d14e      	bne.n	ea2 <cbprintf_package_convert+0x13e>
     e04:	44d0      	add	r8, sl
     e06:	e013      	b.n	e30 <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
     e08:	f01b 0f02 	tst.w	fp, #2
     e0c:	d0d0      	beq.n	db0 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
     e0e:	f894 8000 	ldrb.w	r8, [r4]
     e12:	ea4f 0388 	mov.w	r3, r8, lsl #2
     e16:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
     e18:	6863      	ldr	r3, [r4, #4]
     e1a:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
     e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
     e1e:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
     e22:	2b00      	cmp	r3, #0
     e24:	d178      	bne.n	f18 <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
     e26:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     e28:	f1ba 0f00 	cmp.w	sl, #0
     e2c:	d14e      	bne.n	ecc <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
     e2e:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
     e30:	f01b 0f05 	tst.w	fp, #5
     e34:	bf0c      	ite	eq
     e36:	2302      	moveq	r3, #2
     e38:	2301      	movne	r3, #1
     e3a:	627b      	str	r3, [r7, #36]	; 0x24
     e3c:	697b      	ldr	r3, [r7, #20]
     e3e:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     e42:	f00b 0302 	and.w	r3, fp, #2
     e46:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
     e48:	45d0      	cmp	r8, sl
     e4a:	d0b8      	beq.n	dbe <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
     e4c:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
     e50:	f818 3c01 	ldrb.w	r3, [r8, #-1]
     e54:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
     e58:	4bac      	ldr	r3, [pc, #688]	; (110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>)
     e5a:	4599      	cmp	r9, r3
     e5c:	d302      	bcc.n	e64 <cbprintf_package_convert+0x100>
     e5e:	4bac      	ldr	r3, [pc, #688]	; (1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
     e60:	4599      	cmp	r9, r3
     e62:	d339      	bcc.n	ed8 <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
     e64:	693b      	ldr	r3, [r7, #16]
     e66:	2b00      	cmp	r3, #0
     e68:	d043      	beq.n	ef2 <cbprintf_package_convert+0x18e>
     e6a:	69f8      	ldr	r0, [r7, #28]
     e6c:	f006 fe55 	bl	7b1a <is_ptr>
     e70:	2800      	cmp	r0, #0
     e72:	d03e      	beq.n	ef2 <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
     e74:	46e9      	mov	r9, sp
     e76:	b08a      	sub	sp, #40	; 0x28
     e78:	466a      	mov	r2, sp
     e7a:	4ba6      	ldr	r3, [pc, #664]	; (1114 <CONFIG_FPROTECT_BLOCK_SIZE+0x114>)
     e7c:	6153      	str	r3, [r2, #20]
     e7e:	69fb      	ldr	r3, [r7, #28]
     e80:	e9c2 3106 	strd	r3, r1, [r2, #24]
     e84:	f44f 7300 	mov.w	r3, #512	; 0x200
     e88:	8413      	strh	r3, [r2, #32]
     e8a:	4ba3      	ldr	r3, [pc, #652]	; (1118 <CONFIG_FPROTECT_BLOCK_SIZE+0x118>)
     e8c:	f842 3f10 	str.w	r3, [r2, #16]!
     e90:	48a2      	ldr	r0, [pc, #648]	; (111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>)
     e92:	2300      	movs	r3, #0
     e94:	f44f 5112 	mov.w	r1, #9344	; 0x2480
     e98:	f001 f8b6 	bl	2008 <z_impl_z_log_msg_static_create>
				out_len -= 2;
     e9c:	3d02      	subs	r5, #2
     e9e:	46cd      	mov	sp, r9
				continue;
     ea0:	e7d2      	b.n	e48 <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
     ea2:	f819 2b01 	ldrb.w	r2, [r9], #1
     ea6:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
     ea8:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
     eac:	f007 fb1b 	bl	84e6 <strlen>
				if (strl && strl_cnt < strl_len) {
     eb0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
     eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
     eb4:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     eb6:	b13a      	cbz	r2, ec8 <cbprintf_package_convert+0x164>
     eb8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
     ebc:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
     ebe:	bf3e      	ittt	cc
     ec0:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
     ec2:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
     ec6:	3601      	addcc	r6, #1
				out_len += len;
     ec8:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
     eca:	e799      	b.n	e00 <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     ecc:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
     ed0:	bf1c      	itt	ne
     ed2:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
     ed4:	44d0      	addne	r8, sl
     ed6:	e7ab      	b.n	e30 <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
     ed8:	693b      	ldr	r3, [r7, #16]
     eda:	b123      	cbz	r3, ee6 <cbprintf_package_convert+0x182>
     edc:	69f8      	ldr	r0, [r7, #28]
     ede:	f006 fe1c 	bl	7b1a <is_ptr>
     ee2:	2800      	cmp	r0, #0
     ee4:	d1c6      	bne.n	e74 <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
     ee6:	f01b 0f01 	tst.w	fp, #1
     eea:	d105      	bne.n	ef8 <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
     eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     eee:	1aed      	subs	r5, r5, r3
     ef0:	e7aa      	b.n	e48 <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     ef2:	6a3b      	ldr	r3, [r7, #32]
     ef4:	2b00      	cmp	r3, #0
     ef6:	d0a7      	beq.n	e48 <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
     ef8:	4648      	mov	r0, r9
     efa:	f007 faf4 	bl	84e6 <strlen>
				if (strl && strl_cnt < strl_len) {
     efe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
     f00:	b143      	cbz	r3, f14 <cbprintf_package_convert+0x1b0>
     f02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
     f06:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
     f08:	bf3f      	itttt	cc
     f0a:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
     f0c:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
     f0e:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
     f12:	3601      	addcc	r6, #1
				out_len += (len - 1);
     f14:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
     f16:	e797      	b.n	e48 <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
     f18:	f1ba 0f00 	cmp.w	sl, #0
     f1c:	d071      	beq.n	1002 <CONFIG_FPROTECT_BLOCK_SIZE+0x2>
     f1e:	f01b 0604 	ands.w	r6, fp, #4
     f22:	d071      	beq.n	1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
		keep_cnt = ros_nbr;
     f24:	46d1      	mov	r9, sl
		scpy_cnt = 0;
     f26:	2600      	movs	r6, #0
		dst = keep_str_pos;
     f28:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
     f2c:	4652      	mov	r2, sl
     f2e:	4641      	mov	r1, r8
     f30:	f007 fae9 	bl	8506 <memcpy>
	str_pos += ros_nbr;
     f34:	697b      	ldr	r3, [r7, #20]
     f36:	005b      	lsls	r3, r3, #1
     f38:	60bb      	str	r3, [r7, #8]
     f3a:	697b      	ldr	r3, [r7, #20]
     f3c:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
     f3e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
     f42:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
     f44:	f00b 0302 	and.w	r3, fp, #2
     f48:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
     f4a:	697b      	ldr	r3, [r7, #20]
     f4c:	4598      	cmp	r8, r3
     f4e:	d15d      	bne.n	100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
	out_desc.len = in_desc->len;
     f50:	7823      	ldrb	r3, [r4, #0]
     f52:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     f54:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
     f56:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     f5a:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
     f5e:	bf0c      	ite	eq
     f60:	ea4f 0159 	moveq.w	r1, r9, lsr #1
     f64:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     f66:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
     f6a:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
     f6c:	f040 809d 	bne.w	10aa <CONFIG_FPROTECT_BLOCK_SIZE+0xaa>
     f70:	f01b 0f04 	tst.w	fp, #4
     f74:	bf14      	ite	ne
     f76:	4648      	movne	r0, r9
     f78:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
     f7a:	f894 b002 	ldrb.w	fp, [r4, #2]
     f7e:	f894 8003 	ldrb.w	r8, [r4, #3]
     f82:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
     f84:	7062      	strb	r2, [r4, #1]
     f86:	70a0      	strb	r0, [r4, #2]
     f88:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
     f8a:	69ba      	ldr	r2, [r7, #24]
     f8c:	68f9      	ldr	r1, [r7, #12]
     f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     f90:	4620      	mov	r0, r4
     f92:	4798      	blx	r3
	if (rv < 0) {
     f94:	1e05      	subs	r5, r0, #0
     f96:	f6ff af12 	blt.w	dbe <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
     f9a:	69fb      	ldr	r3, [r7, #28]
     f9c:	7023      	strb	r3, [r4, #0]
     f9e:	693b      	ldr	r3, [r7, #16]
     fa0:	7063      	strb	r3, [r4, #1]
     fa2:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     fa6:	69ba      	ldr	r2, [r7, #24]
     fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
     faa:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
     fae:	4649      	mov	r1, r9
     fb0:	f107 0040 	add.w	r0, r7, #64	; 0x40
     fb4:	4798      	blx	r3
	if (rv < 0) {
     fb6:	f1b0 0800 	subs.w	r8, r0, #0
     fba:	f2c0 80a3 	blt.w	1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
     fbe:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
     fc0:	69ba      	ldr	r2, [r7, #24]
     fc2:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
     fc4:	eba3 010a 	sub.w	r1, r3, sl
     fc8:	68fb      	ldr	r3, [r7, #12]
     fca:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
     fcc:	68bb      	ldr	r3, [r7, #8]
     fce:	1ac9      	subs	r1, r1, r3
     fd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     fd2:	4798      	blx	r3
	if (rv < 0) {
     fd4:	2800      	cmp	r0, #0
     fd6:	f2c0 8097 	blt.w	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
	out_len += rv;
     fda:	44a8      	add	r8, r5
	out_len += rv;
     fdc:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
     fe0:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
     fe4:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
     fe8:	45b3      	cmp	fp, r6
     fea:	d360      	bcc.n	10ae <CONFIG_FPROTECT_BLOCK_SIZE+0xae>
	(void)cb(NULL, 0, ctx);
     fec:	2100      	movs	r1, #0
     fee:	69ba      	ldr	r2, [r7, #24]
     ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     ff2:	4608      	mov	r0, r1
     ff4:	4798      	blx	r3
	return out_len;
     ff6:	e6e2      	b.n	dbe <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
     ff8:	f04f 0900 	mov.w	r9, #0
     ffc:	f107 0030 	add.w	r0, r7, #48	; 0x30
    1000:	e794      	b.n	f2c <cbprintf_package_convert+0x1c8>
		scpy_cnt = 0;
    1002:	4656      	mov	r6, sl
		keep_cnt = 0;
    1004:	46d1      	mov	r9, sl
    1006:	e795      	b.n	f34 <cbprintf_package_convert+0x1d0>
    1008:	46b1      	mov	r9, r6
    100a:	e793      	b.n	f34 <cbprintf_package_convert+0x1d0>
		uint8_t arg_idx = *str_pos++;
    100c:	f818 1b02 	ldrb.w	r1, [r8], #2
    1010:	4a3e      	ldr	r2, [pc, #248]	; (110c <CONFIG_FPROTECT_BLOCK_SIZE+0x10c>)
		uint8_t arg_pos = *str_pos++;
    1012:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    1016:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    101a:	4293      	cmp	r3, r2
    101c:	d302      	bcc.n	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
    101e:	4a3c      	ldr	r2, [pc, #240]	; (1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>)
    1020:	4293      	cmp	r3, r2
    1022:	d31c      	bcc.n	105e <CONFIG_FPROTECT_BLOCK_SIZE+0x5e>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    1024:	693b      	ldr	r3, [r7, #16]
    1026:	b123      	cbz	r3, 1032 <CONFIG_FPROTECT_BLOCK_SIZE+0x32>
    1028:	69f8      	ldr	r0, [r7, #28]
    102a:	f006 fd76 	bl	7b1a <is_ptr>
    102e:	2800      	cmp	r0, #0
    1030:	d18b      	bne.n	f4a <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1032:	687b      	ldr	r3, [r7, #4]
    1034:	b9f3      	cbnz	r3, 1074 <CONFIG_FPROTECT_BLOCK_SIZE+0x74>
				keep_str_pos[keep_cnt++] = arg_idx;
    1036:	f109 0228 	add.w	r2, r9, #40	; 0x28
    103a:	f107 0028 	add.w	r0, r7, #40	; 0x28
    103e:	4402      	add	r2, r0
    1040:	f109 0301 	add.w	r3, r9, #1
    1044:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    1048:	f107 0250 	add.w	r2, r7, #80	; 0x50
    104c:	fa52 f383 	uxtab	r3, r2, r3
    1050:	f109 0902 	add.w	r9, r9, #2
    1054:	fa5f f989 	uxtb.w	r9, r9
    1058:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    105c:	e775      	b.n	f4a <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    105e:	693b      	ldr	r3, [r7, #16]
    1060:	b12b      	cbz	r3, 106e <CONFIG_FPROTECT_BLOCK_SIZE+0x6e>
    1062:	69f8      	ldr	r0, [r7, #28]
    1064:	f006 fd59 	bl	7b1a <is_ptr>
    1068:	2800      	cmp	r0, #0
    106a:	f47f af6e 	bne.w	f4a <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    106e:	f01b 0f01 	tst.w	fp, #1
    1072:	d009      	beq.n	1088 <CONFIG_FPROTECT_BLOCK_SIZE+0x88>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    1074:	f106 0228 	add.w	r2, r6, #40	; 0x28
    1078:	f107 0128 	add.w	r1, r7, #40	; 0x28
    107c:	1c73      	adds	r3, r6, #1
    107e:	1856      	adds	r6, r2, r1
    1080:	f806 5c20 	strb.w	r5, [r6, #-32]
    1084:	b2de      	uxtb	r6, r3
    1086:	e760      	b.n	f4a <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1088:	f01b 0f04 	tst.w	fp, #4
    108c:	f43f af5d 	beq.w	f4a <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
    1090:	f109 0228 	add.w	r2, r9, #40	; 0x28
    1094:	f107 0128 	add.w	r1, r7, #40	; 0x28
    1098:	f109 0301 	add.w	r3, r9, #1
    109c:	eb02 0901 	add.w	r9, r2, r1
    10a0:	f809 5c10 	strb.w	r5, [r9, #-16]
    10a4:	fa5f f983 	uxtb.w	r9, r3
    10a8:	e74f      	b.n	f4a <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    10aa:	2000      	movs	r0, #0
    10ac:	e765      	b.n	f7a <cbprintf_package_convert+0x216>
		uint8_t loc = cpy_str_pos[i];
    10ae:	f81b 300a 	ldrb.w	r3, [fp, sl]
    10b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
    10b6:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
    10ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    10bc:	b1fb      	cbz	r3, 10fe <CONFIG_FPROTECT_BLOCK_SIZE+0xfe>
    10be:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    10c2:	69ba      	ldr	r2, [r7, #24]
    10c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10c6:	2101      	movs	r1, #1
    10c8:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    10cc:	4798      	blx	r3
		if (rv < 0) {
    10ce:	2800      	cmp	r0, #0
    10d0:	db1a      	blt.n	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
		out_len += rv;
    10d2:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    10d4:	f1b8 0f00 	cmp.w	r8, #0
    10d8:	d106      	bne.n	10e8 <CONFIG_FPROTECT_BLOCK_SIZE+0xe8>
    10da:	4648      	mov	r0, r9
    10dc:	f007 fa03 	bl	84e6 <strlen>
    10e0:	f100 0801 	add.w	r8, r0, #1
    10e4:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    10e8:	69ba      	ldr	r2, [r7, #24]
    10ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10ec:	4641      	mov	r1, r8
    10ee:	4648      	mov	r0, r9
    10f0:	4798      	blx	r3
		if (rv < 0) {
    10f2:	2800      	cmp	r0, #0
    10f4:	db08      	blt.n	1108 <CONFIG_FPROTECT_BLOCK_SIZE+0x108>
		out_len += rv;
    10f6:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    10f8:	f10b 0b01 	add.w	fp, fp, #1
    10fc:	e774      	b.n	fe8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x48>
		uint16_t str_len = strl ? strl[i] : 0;
    10fe:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    1102:	e7de      	b.n	10c2 <CONFIG_FPROTECT_BLOCK_SIZE+0xc2>
    1104:	4645      	mov	r5, r8
    1106:	e65a      	b.n	dbe <cbprintf_package_convert+0x5a>
    1108:	4605      	mov	r5, r0
    110a:	e658      	b.n	dbe <cbprintf_package_convert+0x5a>
    110c:	00009094 	.word	0x00009094
    1110:	0000a074 	.word	0x0000a074
    1114:	000096e8 	.word	0x000096e8
    1118:	01000004 	.word	0x01000004
    111c:	000092d0 	.word	0x000092d0

00001120 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    1120:	4b01      	ldr	r3, [pc, #4]	; (1128 <__printk_hook_install+0x8>)
    1122:	6018      	str	r0, [r3, #0]
}
    1124:	4770      	bx	lr
    1126:	bf00      	nop
    1128:	20000030 	.word	0x20000030

0000112c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    112c:	b530      	push	{r4, r5, lr}
    112e:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    1130:	2500      	movs	r5, #0
    1132:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    1136:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1138:	9500      	str	r5, [sp, #0]
    113a:	a903      	add	r1, sp, #12
    113c:	4805      	ldr	r0, [pc, #20]	; (1154 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    113e:	9505      	str	r5, [sp, #20]
    1140:	f000 f918 	bl	1374 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    1144:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    1148:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    114a:	bfb8      	it	lt
    114c:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    114e:	b007      	add	sp, #28
    1150:	bd30      	pop	{r4, r5, pc}
    1152:	bf00      	nop
    1154:	00007b69 	.word	0x00007b69

00001158 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    115c:	8b05      	ldrh	r5, [r0, #24]
{
    115e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1160:	0728      	lsls	r0, r5, #28
{
    1162:	4690      	mov	r8, r2
	if (processing) {
    1164:	d411      	bmi.n	118a <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    1166:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1168:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    116c:	f040 80cd 	bne.w	130a <process_event+0x1b2>
			evt = process_recheck(mgr);
    1170:	4620      	mov	r0, r4
    1172:	f006 fd30 	bl	7bd6 <process_recheck>
		}

		if (evt == EVT_NOP) {
    1176:	b178      	cbz	r0, 1198 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    1178:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    117a:	8b21      	ldrh	r1, [r4, #24]
    117c:	2804      	cmp	r0, #4
    117e:	d811      	bhi.n	11a4 <process_event+0x4c>
    1180:	e8df f000 	tbb	[pc, r0]
    1184:	856d10c3 	.word	0x856d10c3
    1188:	95          	.byte	0x95
    1189:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    118a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    118c:	bf0c      	ite	eq
    118e:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1192:	f045 0520 	orrne.w	r5, r5, #32
    1196:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1198:	f388 8811 	msr	BASEPRI, r8
    119c:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    11a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    11a4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    11a8:	45aa      	cmp	sl, r5
    11aa:	f000 80a6 	beq.w	12fa <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    11ae:	2700      	movs	r7, #0
    11b0:	46b9      	mov	r9, r7
    11b2:	463e      	mov	r6, r7
    11b4:	68a3      	ldr	r3, [r4, #8]
    11b6:	2b00      	cmp	r3, #0
    11b8:	f000 80bd 	beq.w	1336 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    11bc:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    11c0:	8321      	strh	r1, [r4, #24]
    11c2:	f388 8811 	msr	BASEPRI, r8
    11c6:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    11ca:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    11cc:	2900      	cmp	r1, #0
    11ce:	f000 80bb 	beq.w	1348 <process_event+0x1f0>
	return node->next;
    11d2:	680d      	ldr	r5, [r1, #0]
    11d4:	2900      	cmp	r1, #0
    11d6:	f000 80b7 	beq.w	1348 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    11da:	f8d1 8004 	ldr.w	r8, [r1, #4]
    11de:	4633      	mov	r3, r6
    11e0:	4652      	mov	r2, sl
    11e2:	4620      	mov	r0, r4
    11e4:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    11e6:	2d00      	cmp	r5, #0
    11e8:	d076      	beq.n	12d8 <process_event+0x180>
    11ea:	682b      	ldr	r3, [r5, #0]
    11ec:	4629      	mov	r1, r5
    11ee:	461d      	mov	r5, r3
    11f0:	e7f0      	b.n	11d4 <process_event+0x7c>
    11f2:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    11f6:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    11f8:	2a01      	cmp	r2, #1
    11fa:	d81b      	bhi.n	1234 <process_event+0xdc>
	list->head = NULL;
    11fc:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    11fe:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1202:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1204:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1206:	b289      	uxth	r1, r1
	list->tail = NULL;
    1208:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    120c:	d109      	bne.n	1222 <process_event+0xca>
    120e:	463b      	mov	r3, r7
    1210:	e003      	b.n	121a <process_event+0xc2>
				mgr->refs += 1U;
    1212:	8b62      	ldrh	r2, [r4, #26]
    1214:	3201      	adds	r2, #1
    1216:	8362      	strh	r2, [r4, #26]
	return node->next;
    1218:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    121a:	2b00      	cmp	r3, #0
    121c:	d1f9      	bne.n	1212 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    121e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1222:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1224:	4620      	mov	r0, r4
    1226:	f006 fcd6 	bl	7bd6 <process_recheck>
    122a:	2800      	cmp	r0, #0
    122c:	d07b      	beq.n	1326 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    122e:	f041 0120 	orr.w	r1, r1, #32
    1232:	e077      	b.n	1324 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1234:	2b04      	cmp	r3, #4
    1236:	d10a      	bne.n	124e <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1238:	f021 0107 	bic.w	r1, r1, #7
    123c:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    123e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1240:	4620      	mov	r0, r4
    1242:	f006 fcc8 	bl	7bd6 <process_recheck>
    1246:	b110      	cbz	r0, 124e <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1248:	f041 0120 	orr.w	r1, r1, #32
    124c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    124e:	8b21      	ldrh	r1, [r4, #24]
    1250:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1254:	45aa      	cmp	sl, r5
    1256:	d050      	beq.n	12fa <process_event+0x1a2>
    1258:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    125a:	46b9      	mov	r9, r7
    125c:	e7aa      	b.n	11b4 <process_event+0x5c>
			transit = mgr->transitions->start;
    125e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1260:	f021 0107 	bic.w	r1, r1, #7
    1264:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1268:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    126a:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    126e:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1270:	d12d      	bne.n	12ce <process_event+0x176>
		    || (transit != NULL)) {
    1272:	f1b9 0f00 	cmp.w	r9, #0
    1276:	d040      	beq.n	12fa <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1278:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    127c:	8321      	strh	r1, [r4, #24]
    127e:	f388 8811 	msr	BASEPRI, r8
    1282:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    1286:	493a      	ldr	r1, [pc, #232]	; (1370 <process_event+0x218>)
    1288:	4620      	mov	r0, r4
    128a:	47c8      	blx	r9
    128c:	e029      	b.n	12e2 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    128e:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    1292:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1294:	f041 0104 	orr.w	r1, r1, #4
    1298:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    129a:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    129c:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    12a0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    12a2:	d0e6      	beq.n	1272 <process_event+0x11a>
    12a4:	2700      	movs	r7, #0
		res = 0;
    12a6:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    12a8:	f04f 0a04 	mov.w	sl, #4
    12ac:	e782      	b.n	11b4 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    12ae:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    12b2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    12b4:	f041 0105 	orr.w	r1, r1, #5
    12b8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    12ba:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    12bc:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    12c0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    12c2:	d0d6      	beq.n	1272 <process_event+0x11a>
    12c4:	2700      	movs	r7, #0
		res = 0;
    12c6:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    12c8:	f04f 0a05 	mov.w	sl, #5
    12cc:	e772      	b.n	11b4 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    12ce:	2700      	movs	r7, #0
		res = 0;
    12d0:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    12d2:	f04f 0a06 	mov.w	sl, #6
    12d6:	e76d      	b.n	11b4 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    12d8:	462b      	mov	r3, r5
    12da:	e787      	b.n	11ec <process_event+0x94>
			if (transit != NULL) {
    12dc:	f1b9 0f00 	cmp.w	r9, #0
    12e0:	d1d1      	bne.n	1286 <process_event+0x12e>
	__asm__ volatile(
    12e2:	f04f 0340 	mov.w	r3, #64	; 0x40
    12e6:	f3ef 8811 	mrs	r8, BASEPRI
    12ea:	f383 8812 	msr	BASEPRI_MAX, r3
    12ee:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    12f2:	8b23      	ldrh	r3, [r4, #24]
    12f4:	f023 0308 	bic.w	r3, r3, #8
    12f8:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    12fa:	8b25      	ldrh	r5, [r4, #24]
    12fc:	06ea      	lsls	r2, r5, #27
    12fe:	d52e      	bpl.n	135e <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1300:	f025 0310 	bic.w	r3, r5, #16
    1304:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1306:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    130a:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    130c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    130e:	2e00      	cmp	r6, #0
    1310:	f6bf af6f 	bge.w	11f2 <process_event+0x9a>
	list->head = NULL;
    1314:	2300      	movs	r3, #0
		*clients = mgr->clients;
    1316:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1318:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    131c:	f021 0107 	bic.w	r1, r1, #7
    1320:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1324:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1326:	8b21      	ldrh	r1, [r4, #24]
    1328:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    132c:	45aa      	cmp	sl, r5
    132e:	f04f 0900 	mov.w	r9, #0
    1332:	f47f af3f 	bne.w	11b4 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    1336:	2f00      	cmp	r7, #0
    1338:	d09b      	beq.n	1272 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    133a:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    133e:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    1340:	f388 8811 	msr	BASEPRI, r8
    1344:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    1348:	2f00      	cmp	r7, #0
    134a:	d0c7      	beq.n	12dc <process_event+0x184>
	return node->next;
    134c:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    134e:	4639      	mov	r1, r7
    1350:	4633      	mov	r3, r6
    1352:	4652      	mov	r2, sl
    1354:	4620      	mov	r0, r4
    1356:	f006 fc6a 	bl	7c2e <notify_one>
	list->head = node;
    135a:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    135c:	e7f4      	b.n	1348 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    135e:	06ab      	lsls	r3, r5, #26
    1360:	f57f af1a 	bpl.w	1198 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1364:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1368:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    136a:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    136e:	e6ff      	b.n	1170 <process_event+0x18>
    1370:	00007c5b 	.word	0x00007c5b

00001374 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    1374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1378:	4681      	mov	r9, r0
    137a:	b095      	sub	sp, #84	; 0x54
    137c:	468b      	mov	fp, r1
    137e:	4617      	mov	r7, r2
    1380:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1382:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1384:	7838      	ldrb	r0, [r7, #0]
    1386:	b908      	cbnz	r0, 138c <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1388:	4628      	mov	r0, r5
    138a:	e358      	b.n	1a3e <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
    138c:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    138e:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1390:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    1392:	d006      	beq.n	13a2 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    1394:	4659      	mov	r1, fp
    1396:	47c8      	blx	r9
    1398:	2800      	cmp	r0, #0
    139a:	f2c0 8350 	blt.w	1a3e <z_cbvprintf_impl+0x6ca>
    139e:	3501      	adds	r5, #1
		if (bps == NULL) {
    13a0:	e1fb      	b.n	179a <z_cbvprintf_impl+0x426>
		} state = {
    13a2:	2218      	movs	r2, #24
    13a4:	2100      	movs	r1, #0
    13a6:	a80e      	add	r0, sp, #56	; 0x38
    13a8:	f007 f8b8 	bl	851c <memset>
	if (*sp == '%') {
    13ac:	787b      	ldrb	r3, [r7, #1]
    13ae:	2b25      	cmp	r3, #37	; 0x25
    13b0:	d07d      	beq.n	14ae <z_cbvprintf_impl+0x13a>
    13b2:	2300      	movs	r3, #0
    13b4:	1c78      	adds	r0, r7, #1
    13b6:	4698      	mov	r8, r3
    13b8:	469e      	mov	lr, r3
    13ba:	469c      	mov	ip, r3
    13bc:	461e      	mov	r6, r3
    13be:	4601      	mov	r1, r0
		switch (*sp) {
    13c0:	f810 2b01 	ldrb.w	r2, [r0], #1
    13c4:	2a2b      	cmp	r2, #43	; 0x2b
    13c6:	f000 80a1 	beq.w	150c <z_cbvprintf_impl+0x198>
    13ca:	f200 8098 	bhi.w	14fe <z_cbvprintf_impl+0x18a>
    13ce:	2a20      	cmp	r2, #32
    13d0:	f000 809f 	beq.w	1512 <z_cbvprintf_impl+0x19e>
    13d4:	2a23      	cmp	r2, #35	; 0x23
    13d6:	f000 809f 	beq.w	1518 <z_cbvprintf_impl+0x1a4>
    13da:	b12b      	cbz	r3, 13e8 <z_cbvprintf_impl+0x74>
    13dc:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    13e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    13e4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    13e8:	f1b8 0f00 	cmp.w	r8, #0
    13ec:	d005      	beq.n	13fa <z_cbvprintf_impl+0x86>
    13ee:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    13f2:	f043 0320 	orr.w	r3, r3, #32
    13f6:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    13fa:	f1be 0f00 	cmp.w	lr, #0
    13fe:	d005      	beq.n	140c <z_cbvprintf_impl+0x98>
    1400:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1404:	f043 0310 	orr.w	r3, r3, #16
    1408:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    140c:	f1bc 0f00 	cmp.w	ip, #0
    1410:	d005      	beq.n	141e <z_cbvprintf_impl+0xaa>
    1412:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1416:	f043 0308 	orr.w	r3, r3, #8
    141a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    141e:	b12e      	cbz	r6, 142c <z_cbvprintf_impl+0xb8>
    1420:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1424:	f043 0304 	orr.w	r3, r3, #4
    1428:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    142c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1430:	f003 0044 	and.w	r0, r3, #68	; 0x44
    1434:	2844      	cmp	r0, #68	; 0x44
    1436:	d103      	bne.n	1440 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    1438:	f36f 1386 	bfc	r3, #6, #1
    143c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    1440:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    1444:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    1446:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    144a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    144e:	d17f      	bne.n	1550 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    1450:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1454:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    1458:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    145a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    145e:	781a      	ldrb	r2, [r3, #0]
    1460:	2a2e      	cmp	r2, #46	; 0x2e
    1462:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1466:	bf0c      	ite	eq
    1468:	2101      	moveq	r1, #1
    146a:	2100      	movne	r1, #0
    146c:	f361 0241 	bfi	r2, r1, #1, #1
    1470:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    1474:	d178      	bne.n	1568 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    1476:	785a      	ldrb	r2, [r3, #1]
    1478:	2a2a      	cmp	r2, #42	; 0x2a
    147a:	d06e      	beq.n	155a <z_cbvprintf_impl+0x1e6>
	++sp;
    147c:	3301      	adds	r3, #1
	size_t val = 0;
    147e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1480:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1484:	4619      	mov	r1, r3
    1486:	f811 0b01 	ldrb.w	r0, [r1], #1
    148a:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    148e:	2e09      	cmp	r6, #9
    1490:	f240 8095 	bls.w	15be <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    1494:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    1498:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    149a:	f3c1 0040 	ubfx	r0, r1, #1, #1
    149e:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    14a2:	460a      	mov	r2, r1
    14a4:	f360 0241 	bfi	r2, r0, #1, #1
    14a8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    14ac:	e05c      	b.n	1568 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    14ae:	1cba      	adds	r2, r7, #2
    14b0:	9203      	str	r2, [sp, #12]
    14b2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    14b6:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    14ba:	07da      	lsls	r2, r3, #31
    14bc:	f140 812e 	bpl.w	171c <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    14c0:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    14c4:	f1b8 0f00 	cmp.w	r8, #0
    14c8:	da07      	bge.n	14da <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    14ca:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    14ce:	f042 0204 	orr.w	r2, r2, #4
    14d2:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
    14d6:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    14da:	075e      	lsls	r6, r3, #29
    14dc:	f140 8127 	bpl.w	172e <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    14e0:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    14e4:	f1ba 0f00 	cmp.w	sl, #0
    14e8:	f280 8126 	bge.w	1738 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    14ec:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    14f0:	f36f 0341 	bfc	r3, #1, #1
    14f4:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    14f8:	f04f 3aff 	mov.w	sl, #4294967295
    14fc:	e11c      	b.n	1738 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    14fe:	2a2d      	cmp	r2, #45	; 0x2d
    1500:	d00d      	beq.n	151e <z_cbvprintf_impl+0x1aa>
    1502:	2a30      	cmp	r2, #48	; 0x30
    1504:	f47f af69 	bne.w	13da <z_cbvprintf_impl+0x66>
    1508:	2301      	movs	r3, #1
	} while (loop);
    150a:	e758      	b.n	13be <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    150c:	f04f 0c01 	mov.w	ip, #1
    1510:	e755      	b.n	13be <z_cbvprintf_impl+0x4a>
    1512:	f04f 0e01 	mov.w	lr, #1
    1516:	e752      	b.n	13be <z_cbvprintf_impl+0x4a>
    1518:	f04f 0801 	mov.w	r8, #1
    151c:	e74f      	b.n	13be <z_cbvprintf_impl+0x4a>
    151e:	2601      	movs	r6, #1
    1520:	e74d      	b.n	13be <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    1522:	fb0e 6202 	mla	r2, lr, r2, r6
    1526:	3a30      	subs	r2, #48	; 0x30
    1528:	4603      	mov	r3, r0
    152a:	4618      	mov	r0, r3
    152c:	f810 6b01 	ldrb.w	r6, [r0], #1
    1530:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    1534:	f1bc 0f09 	cmp.w	ip, #9
    1538:	d9f3      	bls.n	1522 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    153a:	4299      	cmp	r1, r3
    153c:	d08f      	beq.n	145e <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    153e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    1542:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    1544:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1546:	f362 0141 	bfi	r1, r2, #1, #1
    154a:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    154e:	e786      	b.n	145e <z_cbvprintf_impl+0xea>
    1550:	460b      	mov	r3, r1
	size_t val = 0;
    1552:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1554:	f04f 0e0a 	mov.w	lr, #10
    1558:	e7e7      	b.n	152a <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    155a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    155e:	f042 0204 	orr.w	r2, r2, #4
    1562:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    1566:	3302      	adds	r3, #2
	switch (*sp) {
    1568:	781a      	ldrb	r2, [r3, #0]
    156a:	2a6c      	cmp	r2, #108	; 0x6c
    156c:	d047      	beq.n	15fe <z_cbvprintf_impl+0x28a>
    156e:	d82b      	bhi.n	15c8 <z_cbvprintf_impl+0x254>
    1570:	2a68      	cmp	r2, #104	; 0x68
    1572:	d031      	beq.n	15d8 <z_cbvprintf_impl+0x264>
    1574:	2a6a      	cmp	r2, #106	; 0x6a
    1576:	d04b      	beq.n	1610 <z_cbvprintf_impl+0x29c>
    1578:	2a4c      	cmp	r2, #76	; 0x4c
    157a:	d051      	beq.n	1620 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    157c:	461a      	mov	r2, r3
    157e:	f812 3b01 	ldrb.w	r3, [r2], #1
    1582:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    1584:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    1586:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    158a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    158e:	f200 80be 	bhi.w	170e <z_cbvprintf_impl+0x39a>
    1592:	2b6d      	cmp	r3, #109	; 0x6d
    1594:	d851      	bhi.n	163a <z_cbvprintf_impl+0x2c6>
    1596:	2b69      	cmp	r3, #105	; 0x69
    1598:	f200 80b9 	bhi.w	170e <z_cbvprintf_impl+0x39a>
    159c:	2b57      	cmp	r3, #87	; 0x57
    159e:	d867      	bhi.n	1670 <z_cbvprintf_impl+0x2fc>
    15a0:	2b41      	cmp	r3, #65	; 0x41
    15a2:	d003      	beq.n	15ac <z_cbvprintf_impl+0x238>
    15a4:	3b45      	subs	r3, #69	; 0x45
    15a6:	2b02      	cmp	r3, #2
    15a8:	f200 80b1 	bhi.w	170e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    15ac:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    15b0:	2204      	movs	r2, #4
    15b2:	f362 0302 	bfi	r3, r2, #0, #3
    15b6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    15ba:	2301      	movs	r3, #1
			break;
    15bc:	e073      	b.n	16a6 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    15be:	fb0c 0202 	mla	r2, ip, r2, r0
    15c2:	3a30      	subs	r2, #48	; 0x30
    15c4:	460b      	mov	r3, r1
    15c6:	e75d      	b.n	1484 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    15c8:	2a74      	cmp	r2, #116	; 0x74
    15ca:	d025      	beq.n	1618 <z_cbvprintf_impl+0x2a4>
    15cc:	2a7a      	cmp	r2, #122	; 0x7a
    15ce:	d1d5      	bne.n	157c <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    15d0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    15d4:	2106      	movs	r1, #6
    15d6:	e00c      	b.n	15f2 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    15d8:	785a      	ldrb	r2, [r3, #1]
    15da:	2a68      	cmp	r2, #104	; 0x68
    15dc:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    15e0:	d106      	bne.n	15f0 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    15e2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    15e4:	f361 02c6 	bfi	r2, r1, #3, #4
    15e8:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    15ec:	3302      	adds	r3, #2
    15ee:	e7c5      	b.n	157c <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    15f0:	2102      	movs	r1, #2
    15f2:	f361 02c6 	bfi	r2, r1, #3, #4
    15f6:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    15fa:	3301      	adds	r3, #1
    15fc:	e7be      	b.n	157c <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    15fe:	785a      	ldrb	r2, [r3, #1]
    1600:	2a6c      	cmp	r2, #108	; 0x6c
    1602:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1606:	d101      	bne.n	160c <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    1608:	2104      	movs	r1, #4
    160a:	e7eb      	b.n	15e4 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    160c:	2103      	movs	r1, #3
    160e:	e7f0      	b.n	15f2 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    1610:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1614:	2105      	movs	r1, #5
    1616:	e7ec      	b.n	15f2 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    1618:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    161c:	2107      	movs	r1, #7
    161e:	e7e8      	b.n	15f2 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    1620:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    1624:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    1628:	f022 0202 	bic.w	r2, r2, #2
    162c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    1630:	f042 0202 	orr.w	r2, r2, #2
    1634:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    1638:	e7df      	b.n	15fa <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    163a:	3b6e      	subs	r3, #110	; 0x6e
    163c:	b2d9      	uxtb	r1, r3
    163e:	2301      	movs	r3, #1
    1640:	408b      	lsls	r3, r1
    1642:	f240 4182 	movw	r1, #1154	; 0x482
    1646:	420b      	tst	r3, r1
    1648:	d137      	bne.n	16ba <z_cbvprintf_impl+0x346>
    164a:	f013 0f24 	tst.w	r3, #36	; 0x24
    164e:	d151      	bne.n	16f4 <z_cbvprintf_impl+0x380>
    1650:	07d8      	lsls	r0, r3, #31
    1652:	d55c      	bpl.n	170e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    1654:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1658:	2103      	movs	r1, #3
    165a:	f361 0302 	bfi	r3, r1, #0, #3
    165e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    1662:	f002 0378 	and.w	r3, r2, #120	; 0x78
    1666:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    166a:	424b      	negs	r3, r1
    166c:	414b      	adcs	r3, r1
    166e:	e01a      	b.n	16a6 <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
    1670:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    1674:	b2c9      	uxtb	r1, r1
    1676:	2001      	movs	r0, #1
    1678:	fa00 f101 	lsl.w	r1, r0, r1
    167c:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    1680:	d194      	bne.n	15ac <z_cbvprintf_impl+0x238>
    1682:	f640 0601 	movw	r6, #2049	; 0x801
    1686:	4231      	tst	r1, r6
    1688:	d11d      	bne.n	16c6 <z_cbvprintf_impl+0x352>
    168a:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    168e:	d03e      	beq.n	170e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    1690:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1694:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1698:	f002 0278 	and.w	r2, r2, #120	; 0x78
    169c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    169e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    16a2:	d034      	beq.n	170e <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    16a4:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    16a6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    16aa:	f3c2 0140 	ubfx	r1, r2, #1, #1
    16ae:	430b      	orrs	r3, r1
    16b0:	f363 0241 	bfi	r2, r3, #1, #1
    16b4:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    16b8:	e6fd      	b.n	14b6 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    16ba:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    16be:	2102      	movs	r1, #2
    16c0:	f361 0302 	bfi	r3, r1, #0, #3
    16c4:	e7e8      	b.n	1698 <z_cbvprintf_impl+0x324>
    16c6:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    16ca:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    16cc:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    16d0:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    16d4:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    16d6:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    16da:	bf02      	ittt	eq
    16dc:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    16e0:	f041 0101 	orreq.w	r1, r1, #1
    16e4:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    16e8:	2b63      	cmp	r3, #99	; 0x63
    16ea:	d1db      	bne.n	16a4 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    16ec:	1e13      	subs	r3, r2, #0
    16ee:	bf18      	it	ne
    16f0:	2301      	movne	r3, #1
    16f2:	e7d8      	b.n	16a6 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    16f4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    16f8:	2103      	movs	r1, #3
    16fa:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    16fe:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1702:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    1706:	bf14      	ite	ne
    1708:	2301      	movne	r3, #1
    170a:	2300      	moveq	r3, #0
    170c:	e7cb      	b.n	16a6 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    170e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1712:	f043 0301 	orr.w	r3, r3, #1
    1716:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    171a:	e7c3      	b.n	16a4 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    171c:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    1720:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1722:	bfb4      	ite	lt
    1724:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    1728:	f04f 38ff 	movge.w	r8, #4294967295
    172c:	e6d5      	b.n	14da <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    172e:	0798      	lsls	r0, r3, #30
    1730:	f57f aee2 	bpl.w	14f8 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    1734:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    1738:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    173c:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    173e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    1742:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    1746:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    174a:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    174c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1750:	d133      	bne.n	17ba <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    1752:	1ecb      	subs	r3, r1, #3
    1754:	2b04      	cmp	r3, #4
    1756:	d804      	bhi.n	1762 <z_cbvprintf_impl+0x3ee>
    1758:	e8df f003 	tbb	[pc, r3]
    175c:	21464621 	.word	0x21464621
    1760:	21          	.byte	0x21
    1761:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    1762:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    1764:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    1766:	ea4f 72e3 	mov.w	r2, r3, asr #31
    176a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    176e:	d11c      	bne.n	17aa <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    1770:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    1774:	17da      	asrs	r2, r3, #31
    1776:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    177a:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    177c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1780:	f013 0603 	ands.w	r6, r3, #3
    1784:	d050      	beq.n	1828 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    1786:	9b03      	ldr	r3, [sp, #12]
    1788:	463a      	mov	r2, r7
    178a:	4659      	mov	r1, fp
    178c:	4648      	mov	r0, r9
    178e:	f006 fb75 	bl	7e7c <outs>
    1792:	2800      	cmp	r0, #0
    1794:	f2c0 8153 	blt.w	1a3e <z_cbvprintf_impl+0x6ca>
    1798:	4405      	add	r5, r0
			continue;
    179a:	9f03      	ldr	r7, [sp, #12]
    179c:	e5f2      	b.n	1384 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    179e:	f854 3b04 	ldr.w	r3, [r4], #4
    17a2:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    17a4:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    17a8:	e7e8      	b.n	177c <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    17aa:	2902      	cmp	r1, #2
    17ac:	d1e5      	bne.n	177a <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    17ae:	b21a      	sxth	r2, r3
    17b0:	f343 33c0 	sbfx	r3, r3, #15, #1
    17b4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    17b8:	e7df      	b.n	177a <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    17ba:	2b02      	cmp	r3, #2
    17bc:	d124      	bne.n	1808 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    17be:	1ecb      	subs	r3, r1, #3
    17c0:	2b04      	cmp	r3, #4
    17c2:	d804      	bhi.n	17ce <z_cbvprintf_impl+0x45a>
    17c4:	e8df f003 	tbb	[pc, r3]
    17c8:	18101018 	.word	0x18101018
    17cc:	18          	.byte	0x18
    17cd:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    17ce:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    17d0:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    17d4:	f04f 0200 	mov.w	r2, #0
    17d8:	d014      	beq.n	1804 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    17da:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    17dc:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    17e0:	d1cc      	bne.n	177c <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    17e2:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    17e4:	930e      	str	r3, [sp, #56]	; 0x38
    17e6:	e7c9      	b.n	177c <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    17e8:	3407      	adds	r4, #7
    17ea:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    17ee:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    17f2:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    17f6:	e7c1      	b.n	177c <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    17f8:	f854 3b04 	ldr.w	r3, [r4], #4
    17fc:	930e      	str	r3, [sp, #56]	; 0x38
    17fe:	2300      	movs	r3, #0
    1800:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    1802:	e7bb      	b.n	177c <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    1804:	b2db      	uxtb	r3, r3
    1806:	e7cd      	b.n	17a4 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    1808:	2b04      	cmp	r3, #4
    180a:	d108      	bne.n	181e <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    180c:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    180e:	f024 0407 	bic.w	r4, r4, #7
    1812:	e9d4 2300 	ldrd	r2, r3, [r4]
    1816:	3408      	adds	r4, #8
    1818:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    181c:	e7ae      	b.n	177c <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    181e:	2b03      	cmp	r3, #3
    1820:	d1ac      	bne.n	177c <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    1822:	f854 3b04 	ldr.w	r3, [r4], #4
    1826:	e7dd      	b.n	17e4 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    1828:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    182c:	2878      	cmp	r0, #120	; 0x78
    182e:	d8b4      	bhi.n	179a <z_cbvprintf_impl+0x426>
    1830:	2862      	cmp	r0, #98	; 0x62
    1832:	d81c      	bhi.n	186e <z_cbvprintf_impl+0x4fa>
    1834:	2825      	cmp	r0, #37	; 0x25
    1836:	f43f adad 	beq.w	1394 <z_cbvprintf_impl+0x20>
    183a:	2858      	cmp	r0, #88	; 0x58
    183c:	d1ad      	bne.n	179a <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    183e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1842:	9300      	str	r3, [sp, #0]
    1844:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    1848:	ab08      	add	r3, sp, #32
    184a:	aa10      	add	r2, sp, #64	; 0x40
    184c:	f006 fad0 	bl	7df0 <encode_uint>
			if (precision >= 0) {
    1850:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    1854:	4607      	mov	r7, r0
			if (precision >= 0) {
    1856:	f280 809a 	bge.w	198e <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
    185a:	2f00      	cmp	r7, #0
    185c:	d09d      	beq.n	179a <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    185e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1862:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    1864:	2e00      	cmp	r6, #0
    1866:	f000 80c1 	beq.w	19ec <z_cbvprintf_impl+0x678>
			nj_len += 1U;
    186a:	3001      	adds	r0, #1
    186c:	e0be      	b.n	19ec <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
    186e:	3863      	subs	r0, #99	; 0x63
    1870:	2815      	cmp	r0, #21
    1872:	d892      	bhi.n	179a <z_cbvprintf_impl+0x426>
    1874:	a201      	add	r2, pc, #4	; (adr r2, 187c <z_cbvprintf_impl+0x508>)
    1876:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    187a:	bf00      	nop
    187c:	00001951 	.word	0x00001951
    1880:	00001963 	.word	0x00001963
    1884:	0000179b 	.word	0x0000179b
    1888:	0000179b 	.word	0x0000179b
    188c:	0000179b 	.word	0x0000179b
    1890:	0000179b 	.word	0x0000179b
    1894:	00001963 	.word	0x00001963
    1898:	0000179b 	.word	0x0000179b
    189c:	0000179b 	.word	0x0000179b
    18a0:	0000179b 	.word	0x0000179b
    18a4:	0000179b 	.word	0x0000179b
    18a8:	000019f1 	.word	0x000019f1
    18ac:	00001989 	.word	0x00001989
    18b0:	000019af 	.word	0x000019af
    18b4:	0000179b 	.word	0x0000179b
    18b8:	0000179b 	.word	0x0000179b
    18bc:	000018d5 	.word	0x000018d5
    18c0:	0000179b 	.word	0x0000179b
    18c4:	00001989 	.word	0x00001989
    18c8:	0000179b 	.word	0x0000179b
    18cc:	0000179b 	.word	0x0000179b
    18d0:	00001989 	.word	0x00001989
			if (precision >= 0) {
    18d4:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    18d8:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    18da:	db35      	blt.n	1948 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    18dc:	4651      	mov	r1, sl
    18de:	4638      	mov	r0, r7
    18e0:	f006 fe08 	bl	84f4 <strnlen>
			bpe = bps + len;
    18e4:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    18e8:	2f00      	cmp	r7, #0
    18ea:	f43f af56 	beq.w	179a <z_cbvprintf_impl+0x426>
		char sign = 0;
    18ee:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    18f0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    18f4:	f013 0210 	ands.w	r2, r3, #16
    18f8:	9205      	str	r2, [sp, #20]
    18fa:	f000 8093 	beq.w	1a24 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
    18fe:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    1900:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    1902:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    1904:	bf48      	it	mi
    1906:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    1908:	9204      	str	r2, [sp, #16]
    190a:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    190c:	bf48      	it	mi
    190e:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    1910:	f1b8 0f00 	cmp.w	r8, #0
    1914:	f340 80a0 	ble.w	1a58 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
    1918:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    191c:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    1920:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1924:	0750      	lsls	r0, r2, #29
    1926:	9306      	str	r3, [sp, #24]
    1928:	f100 8096 	bmi.w	1a58 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
    192c:	0651      	lsls	r1, r2, #25
    192e:	f140 8089 	bpl.w	1a44 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
    1932:	b13e      	cbz	r6, 1944 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    1934:	4659      	mov	r1, fp
    1936:	4630      	mov	r0, r6
    1938:	47c8      	blx	r9
    193a:	2800      	cmp	r0, #0
    193c:	db7f      	blt.n	1a3e <z_cbvprintf_impl+0x6ca>
    193e:	9b06      	ldr	r3, [sp, #24]
    1940:	3501      	adds	r5, #1
    1942:	461e      	mov	r6, r3
					pad = '0';
    1944:	2230      	movs	r2, #48	; 0x30
    1946:	e07e      	b.n	1a46 <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
    1948:	4638      	mov	r0, r7
    194a:	f006 fdcc 	bl	84e6 <strlen>
    194e:	e7c9      	b.n	18e4 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1950:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1952:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    1956:	2600      	movs	r6, #0
			bps = buf;
    1958:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    195a:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    195e:	2001      	movs	r0, #1
    1960:	e7c6      	b.n	18f0 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    1962:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    1964:	bf5c      	itt	pl
    1966:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    196a:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    196c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    1970:	bf48      	it	mi
    1972:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    1974:	2b00      	cmp	r3, #0
    1976:	f6bf af62 	bge.w	183e <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    197a:	4252      	negs	r2, r2
    197c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1980:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    1984:	262d      	movs	r6, #45	; 0x2d
    1986:	e75a      	b.n	183e <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    1988:	2600      	movs	r6, #0
    198a:	e758      	b.n	183e <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    198c:	2600      	movs	r6, #0
				conv->flag_zero = false;
    198e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    1992:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1996:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    1998:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    199c:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    199e:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    19a2:	f67f af5a 	bls.w	185a <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    19a6:	ebaa 0303 	sub.w	r3, sl, r3
    19aa:	9311      	str	r3, [sp, #68]	; 0x44
    19ac:	e755      	b.n	185a <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    19ae:	980e      	ldr	r0, [sp, #56]	; 0x38
    19b0:	b390      	cbz	r0, 1a18 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    19b2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    19b6:	9300      	str	r3, [sp, #0]
    19b8:	aa10      	add	r2, sp, #64	; 0x40
    19ba:	ab08      	add	r3, sp, #32
    19bc:	2100      	movs	r1, #0
    19be:	f006 fa17 	bl	7df0 <encode_uint>
				conv->altform_0c = true;
    19c2:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    19c6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    19ca:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    19ce:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    19d2:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    19d6:	4607      	mov	r7, r0
				conv->altform_0c = true;
    19d8:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    19dc:	dad6      	bge.n	198c <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    19de:	2800      	cmp	r0, #0
    19e0:	f43f aedb 	beq.w	179a <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    19e4:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    19e8:	1a18      	subs	r0, r3, r0
		char sign = 0;
    19ea:	2600      	movs	r6, #0
    19ec:	469a      	mov	sl, r3
    19ee:	e77f      	b.n	18f0 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    19f0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    19f2:	2907      	cmp	r1, #7
    19f4:	f63f aed1 	bhi.w	179a <z_cbvprintf_impl+0x426>
    19f8:	e8df f001 	tbb	[pc, r1]
    19fc:	0c06040c 	.word	0x0c06040c
    1a00:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    1a04:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    1a06:	e6c8      	b.n	179a <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    1a08:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    1a0a:	e6c6      	b.n	179a <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    1a0c:	17ea      	asrs	r2, r5, #31
    1a0e:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    1a12:	e6c2      	b.n	179a <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1a14:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    1a16:	e6c0      	b.n	179a <z_cbvprintf_impl+0x426>
    1a18:	4f2e      	ldr	r7, [pc, #184]	; (1ad4 <z_cbvprintf_impl+0x760>)
		char sign = 0;
    1a1a:	4606      	mov	r6, r0
			bpe = bps + 5;
    1a1c:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    1a20:	2005      	movs	r0, #5
    1a22:	e765      	b.n	18f0 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    1a24:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    1a26:	bf48      	it	mi
    1a28:	3001      	addmi	r0, #1
    1a2a:	e769      	b.n	1900 <z_cbvprintf_impl+0x58c>
    1a2c:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    1a2e:	4610      	mov	r0, r2
    1a30:	9206      	str	r2, [sp, #24]
    1a32:	4659      	mov	r1, fp
    1a34:	47c8      	blx	r9
    1a36:	2800      	cmp	r0, #0
    1a38:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1a3c:	da04      	bge.n	1a48 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
    1a3e:	b015      	add	sp, #84	; 0x54
    1a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1a44:	2220      	movs	r2, #32
					pad = '0';
    1a46:	4643      	mov	r3, r8
				while (width-- > 0) {
    1a48:	4619      	mov	r1, r3
    1a4a:	2900      	cmp	r1, #0
    1a4c:	f103 33ff 	add.w	r3, r3, #4294967295
    1a50:	dcec      	bgt.n	1a2c <z_cbvprintf_impl+0x6b8>
    1a52:	4445      	add	r5, r8
    1a54:	1a6d      	subs	r5, r5, r1
    1a56:	4698      	mov	r8, r3
		if (sign != 0) {
    1a58:	b12e      	cbz	r6, 1a66 <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
    1a5a:	4659      	mov	r1, fp
    1a5c:	4630      	mov	r0, r6
    1a5e:	47c8      	blx	r9
    1a60:	2800      	cmp	r0, #0
    1a62:	dbec      	blt.n	1a3e <z_cbvprintf_impl+0x6ca>
    1a64:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1a66:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1a6a:	06da      	lsls	r2, r3, #27
    1a6c:	d401      	bmi.n	1a72 <z_cbvprintf_impl+0x6fe>
    1a6e:	071b      	lsls	r3, r3, #28
    1a70:	d505      	bpl.n	1a7e <z_cbvprintf_impl+0x70a>
				OUTC('0');
    1a72:	4659      	mov	r1, fp
    1a74:	2030      	movs	r0, #48	; 0x30
    1a76:	47c8      	blx	r9
    1a78:	2800      	cmp	r0, #0
    1a7a:	dbe0      	blt.n	1a3e <z_cbvprintf_impl+0x6ca>
    1a7c:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1a7e:	9b05      	ldr	r3, [sp, #20]
    1a80:	b133      	cbz	r3, 1a90 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
    1a82:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    1a86:	4659      	mov	r1, fp
    1a88:	47c8      	blx	r9
    1a8a:	2800      	cmp	r0, #0
    1a8c:	dbd7      	blt.n	1a3e <z_cbvprintf_impl+0x6ca>
    1a8e:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1a90:	9e04      	ldr	r6, [sp, #16]
    1a92:	442e      	add	r6, r5
    1a94:	e005      	b.n	1aa2 <z_cbvprintf_impl+0x72e>
				OUTC('0');
    1a96:	4659      	mov	r1, fp
    1a98:	2030      	movs	r0, #48	; 0x30
    1a9a:	47c8      	blx	r9
    1a9c:	2800      	cmp	r0, #0
    1a9e:	dbce      	blt.n	1a3e <z_cbvprintf_impl+0x6ca>
    1aa0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1aa2:	1b73      	subs	r3, r6, r5
    1aa4:	2b00      	cmp	r3, #0
    1aa6:	dcf6      	bgt.n	1a96 <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
    1aa8:	4653      	mov	r3, sl
    1aaa:	463a      	mov	r2, r7
    1aac:	4659      	mov	r1, fp
    1aae:	4648      	mov	r0, r9
    1ab0:	f006 f9e4 	bl	7e7c <outs>
    1ab4:	2800      	cmp	r0, #0
    1ab6:	dbc2      	blt.n	1a3e <z_cbvprintf_impl+0x6ca>
    1ab8:	4405      	add	r5, r0
		while (width > 0) {
    1aba:	44a8      	add	r8, r5
    1abc:	eba8 0305 	sub.w	r3, r8, r5
    1ac0:	2b00      	cmp	r3, #0
    1ac2:	f77f ae6a 	ble.w	179a <z_cbvprintf_impl+0x426>
			OUTC(' ');
    1ac6:	4659      	mov	r1, fp
    1ac8:	2020      	movs	r0, #32
    1aca:	47c8      	blx	r9
    1acc:	2800      	cmp	r0, #0
    1ace:	dbb6      	blt.n	1a3e <z_cbvprintf_impl+0x6ca>
    1ad0:	3501      	adds	r5, #1
			--width;
    1ad2:	e7f3      	b.n	1abc <z_cbvprintf_impl+0x748>
    1ad4:	0000979c 	.word	0x0000979c

00001ad8 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1ad8:	f003 bdfc 	b.w	56d4 <SystemInit>

00001adc <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    1adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1ae0:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1b3c <activate_foreach_backend+0x60>
{
    1ae4:	4604      	mov	r4, r0
	while (mask_cpy) {
    1ae6:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    1ae8:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
    1aec:	b914      	cbnz	r4, 1af4 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    1aee:	4638      	mov	r0, r7
    1af0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    1af4:	fa94 f5a4 	rbit	r5, r4
    1af8:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    1afc:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1b00:	012e      	lsls	r6, r5, #4
    1b02:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    1b06:	ea6f 0a03 	mvn.w	sl, r3
    1b0a:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1b0e:	7b2b      	ldrb	r3, [r5, #12]
    1b10:	2b00      	cmp	r3, #0
    1b12:	d0eb      	beq.n	1aec <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    1b14:	f858 3006 	ldr.w	r3, [r8, r6]
    1b18:	691b      	ldr	r3, [r3, #16]
    1b1a:	b94b      	cbnz	r3, 1b30 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    1b1c:	4446      	add	r6, r8
			log_backend_enable(backend,
    1b1e:	2204      	movs	r2, #4
    1b20:	6873      	ldr	r3, [r6, #4]
    1b22:	4628      	mov	r0, r5
    1b24:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    1b26:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    1b2a:	f000 fa59 	bl	1fe0 <log_backend_enable>
    1b2e:	e7dd      	b.n	1aec <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    1b30:	4628      	mov	r0, r5
    1b32:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1b34:	2800      	cmp	r0, #0
    1b36:	d1d9      	bne.n	1aec <activate_foreach_backend+0x10>
    1b38:	e7f0      	b.n	1b1c <activate_foreach_backend+0x40>
    1b3a:	bf00      	nop
    1b3c:	00009348 	.word	0x00009348

00001b40 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    1b40:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    1b42:	4910      	ldr	r1, [pc, #64]	; (1b84 <enable_logger+0x44>)
    1b44:	4810      	ldr	r0, [pc, #64]	; (1b88 <enable_logger+0x48>)
{
    1b46:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    1b48:	2200      	movs	r2, #0
    1b4a:	f007 fa0d 	bl	8f68 <k_timer_init>
		};
		return (k_tid_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1b4e:	4d0f      	ldr	r5, [pc, #60]	; (1b8c <enable_logger+0x4c>)
    1b50:	490f      	ldr	r1, [pc, #60]	; (1b90 <enable_logger+0x50>)
    1b52:	2200      	movs	r2, #0
    1b54:	2300      	movs	r3, #0
    1b56:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1b5a:	2400      	movs	r4, #0
    1b5c:	230e      	movs	r3, #14
    1b5e:	e9cd 3403 	strd	r3, r4, [sp, #12]
    1b62:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1b66:	4b0b      	ldr	r3, [pc, #44]	; (1b94 <enable_logger+0x54>)
    1b68:	9400      	str	r4, [sp, #0]
    1b6a:	f44f 7240 	mov.w	r2, #768	; 0x300
    1b6e:	4628      	mov	r0, r5
    1b70:	f004 fefc 	bl	696c <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    1b74:	4908      	ldr	r1, [pc, #32]	; (1b98 <enable_logger+0x58>)
    1b76:	4628      	mov	r0, r5
    1b78:	f007 f85c 	bl	8c34 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    1b7c:	4620      	mov	r0, r4
    1b7e:	b009      	add	sp, #36	; 0x24
    1b80:	bd30      	pop	{r4, r5, pc}
    1b82:	bf00      	nop
    1b84:	00001b9d 	.word	0x00001b9d
    1b88:	200006b0 	.word	0x200006b0
    1b8c:	20000228 	.word	0x20000228
    1b90:	20001340 	.word	0x20001340
    1b94:	00001e8d 	.word	0x00001e8d
    1b98:	000097a2 	.word	0x000097a2

00001b9c <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1b9c:	4801      	ldr	r0, [pc, #4]	; (1ba4 <log_process_thread_timer_expiry_fn+0x8>)
    1b9e:	f005 b83f 	b.w	6c20 <z_impl_k_sem_give>
    1ba2:	bf00      	nop
    1ba4:	2000020c 	.word	0x2000020c

00001ba8 <z_log_init>:
{
    1ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1bac:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    1bae:	481f      	ldr	r0, [pc, #124]	; (1c2c <z_log_init+0x84>)
{
    1bb0:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    1bb2:	f006 fbe3 	bl	837c <atomic_inc>
    1bb6:	4606      	mov	r6, r0
    1bb8:	2800      	cmp	r0, #0
    1bba:	d030      	beq.n	1c1e <z_log_init+0x76>
	uint32_t mask = 0;
    1bbc:	2500      	movs	r5, #0
}
    1bbe:	4628      	mov	r0, r5
    1bc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    1bc4:	7b23      	ldrb	r3, [r4, #12]
    1bc6:	b173      	cbz	r3, 1be6 <z_log_init+0x3e>
	if (backend->api->init) {
    1bc8:	6823      	ldr	r3, [r4, #0]
    1bca:	68db      	ldr	r3, [r3, #12]
    1bcc:	b10b      	cbz	r3, 1bd2 <z_log_init+0x2a>
		backend->api->init(backend);
    1bce:	4620      	mov	r0, r4
    1bd0:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    1bd2:	6823      	ldr	r3, [r4, #0]
    1bd4:	691b      	ldr	r3, [r3, #16]
    1bd6:	b9d3      	cbnz	r3, 1c0e <z_log_init+0x66>
				log_backend_enable(backend,
    1bd8:	6863      	ldr	r3, [r4, #4]
    1bda:	2204      	movs	r2, #4
    1bdc:	6819      	ldr	r1, [r3, #0]
    1bde:	4620      	mov	r0, r4
    1be0:	f000 f9fe 	bl	1fe0 <log_backend_enable>
			i++;
    1be4:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1be6:	3410      	adds	r4, #16
    1be8:	454c      	cmp	r4, r9
    1bea:	d3eb      	bcc.n	1bc4 <z_log_init+0x1c>
	if (blocking) {
    1bec:	f1b8 0f00 	cmp.w	r8, #0
    1bf0:	d0e5      	beq.n	1bbe <z_log_init+0x16>
		while (mask) {
    1bf2:	2d00      	cmp	r5, #0
    1bf4:	d0e2      	beq.n	1bbc <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    1bf6:	4628      	mov	r0, r5
    1bf8:	f7ff ff70 	bl	1adc <activate_foreach_backend>
    1bfc:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    1bfe:	2f00      	cmp	r7, #0
    1c00:	d0f7      	beq.n	1bf2 <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    1c02:	2100      	movs	r1, #0
    1c04:	f44f 70a4 	mov.w	r0, #328	; 0x148
    1c08:	f005 fc70 	bl	74ec <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    1c0c:	e7f1      	b.n	1bf2 <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    1c0e:	4620      	mov	r0, r4
    1c10:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    1c12:	2800      	cmp	r0, #0
    1c14:	d0e0      	beq.n	1bd8 <z_log_init+0x30>
				mask |= BIT(i);
    1c16:	fa0a f306 	lsl.w	r3, sl, r6
    1c1a:	431d      	orrs	r5, r3
    1c1c:	e7e2      	b.n	1be4 <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1c1e:	4c04      	ldr	r4, [pc, #16]	; (1c30 <z_log_init+0x88>)
    1c20:	f8df 9010 	ldr.w	r9, [pc, #16]	; 1c34 <z_log_init+0x8c>
	uint32_t mask = 0;
    1c24:	4605      	mov	r5, r0
				mask |= BIT(i);
    1c26:	f04f 0a01 	mov.w	sl, #1
    1c2a:	e7dd      	b.n	1be8 <z_log_init+0x40>
    1c2c:	200008d8 	.word	0x200008d8
    1c30:	00009348 	.word	0x00009348
    1c34:	00009358 	.word	0x00009358

00001c38 <log_format_func_t_get>:
}
    1c38:	4b01      	ldr	r3, [pc, #4]	; (1c40 <log_format_func_t_get+0x8>)
    1c3a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1c3e:	4770      	bx	lr
    1c40:	0000939c 	.word	0x0000939c

00001c44 <log_set_timestamp_func>:
{
    1c44:	b508      	push	{r3, lr}
    1c46:	4603      	mov	r3, r0
    1c48:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    1c4a:	b12b      	cbz	r3, 1c58 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    1c4c:	4a04      	ldr	r2, [pc, #16]	; (1c60 <log_set_timestamp_func+0x1c>)
    1c4e:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    1c50:	f000 fc78 	bl	2544 <log_output_timestamp_freq_set>
	return 0;
    1c54:	2000      	movs	r0, #0
}
    1c56:	bd08      	pop	{r3, pc}
		return -EINVAL;
    1c58:	f06f 0015 	mvn.w	r0, #21
    1c5c:	e7fb      	b.n	1c56 <log_set_timestamp_func+0x12>
    1c5e:	bf00      	nop
    1c60:	20000034 	.word	0x20000034

00001c64 <z_log_notify_backend_enabled>:
{
    1c64:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    1c66:	4c04      	ldr	r4, [pc, #16]	; (1c78 <z_log_notify_backend_enabled+0x14>)
    1c68:	7823      	ldrb	r3, [r4, #0]
    1c6a:	b913      	cbnz	r3, 1c72 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    1c6c:	4803      	ldr	r0, [pc, #12]	; (1c7c <z_log_notify_backend_enabled+0x18>)
    1c6e:	f004 ffd7 	bl	6c20 <z_impl_k_sem_give>
	backend_attached = true;
    1c72:	2301      	movs	r3, #1
    1c74:	7023      	strb	r3, [r4, #0]
}
    1c76:	bd10      	pop	{r4, pc}
    1c78:	20000c68 	.word	0x20000c68
    1c7c:	2000020c 	.word	0x2000020c

00001c80 <z_log_dropped>:
{
    1c80:	b510      	push	{r4, lr}
    1c82:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    1c84:	4808      	ldr	r0, [pc, #32]	; (1ca8 <z_log_dropped+0x28>)
    1c86:	f006 fb79 	bl	837c <atomic_inc>
	if (buffered) {
    1c8a:	b15c      	cbz	r4, 1ca4 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1c8c:	f3bf 8f5b 	dmb	ish
    1c90:	4b06      	ldr	r3, [pc, #24]	; (1cac <z_log_dropped+0x2c>)
    1c92:	e853 1f00 	ldrex	r1, [r3]
    1c96:	3901      	subs	r1, #1
    1c98:	e843 1200 	strex	r2, r1, [r3]
    1c9c:	2a00      	cmp	r2, #0
    1c9e:	d1f8      	bne.n	1c92 <z_log_dropped+0x12>
    1ca0:	f3bf 8f5b 	dmb	ish
}
    1ca4:	bd10      	pop	{r4, pc}
    1ca6:	bf00      	nop
    1ca8:	200008d0 	.word	0x200008d0
    1cac:	200008d4 	.word	0x200008d4

00001cb0 <z_log_dropped_read_and_clear>:
}
    1cb0:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1cb2:	4b06      	ldr	r3, [pc, #24]	; (1ccc <z_log_dropped_read_and_clear+0x1c>)
    1cb4:	f3bf 8f5b 	dmb	ish
    1cb8:	4601      	mov	r1, r0
    1cba:	e853 0f00 	ldrex	r0, [r3]
    1cbe:	e843 1200 	strex	r2, r1, [r3]
    1cc2:	2a00      	cmp	r2, #0
    1cc4:	d1f9      	bne.n	1cba <z_log_dropped_read_and_clear+0xa>
    1cc6:	f3bf 8f5b 	dmb	ish
    1cca:	4770      	bx	lr
    1ccc:	200008d0 	.word	0x200008d0

00001cd0 <dropped_notify>:
{
    1cd0:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    1cd2:	f7ff ffed 	bl	1cb0 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1cd6:	4c08      	ldr	r4, [pc, #32]	; (1cf8 <dropped_notify+0x28>)
    1cd8:	4e08      	ldr	r6, [pc, #32]	; (1cfc <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
    1cda:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1cdc:	42b4      	cmp	r4, r6
    1cde:	d300      	bcc.n	1ce2 <dropped_notify+0x12>
}
    1ce0:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    1ce2:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1ce4:	795b      	ldrb	r3, [r3, #5]
    1ce6:	b12b      	cbz	r3, 1cf4 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    1ce8:	6823      	ldr	r3, [r4, #0]
    1cea:	685b      	ldr	r3, [r3, #4]
    1cec:	b113      	cbz	r3, 1cf4 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    1cee:	4629      	mov	r1, r5
    1cf0:	4620      	mov	r0, r4
    1cf2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1cf4:	3410      	adds	r4, #16
    1cf6:	e7f1      	b.n	1cdc <dropped_notify+0xc>
    1cf8:	00009348 	.word	0x00009348
    1cfc:	00009358 	.word	0x00009358

00001d00 <z_log_msg_init>:
{
    1d00:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    1d02:	4c04      	ldr	r4, [pc, #16]	; (1d14 <z_log_msg_init+0x14>)
    1d04:	4904      	ldr	r1, [pc, #16]	; (1d18 <z_log_msg_init+0x18>)
    1d06:	4620      	mov	r0, r4
    1d08:	f006 f9c9 	bl	809e <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    1d0c:	4b03      	ldr	r3, [pc, #12]	; (1d1c <z_log_msg_init+0x1c>)
    1d0e:	601c      	str	r4, [r3, #0]
}
    1d10:	bd10      	pop	{r4, pc}
    1d12:	bf00      	nop
    1d14:	20000178 	.word	0x20000178
    1d18:	00009388 	.word	0x00009388
    1d1c:	200008c8 	.word	0x200008c8

00001d20 <log_core_init>:
	panic_mode = false;
    1d20:	4a08      	ldr	r2, [pc, #32]	; (1d44 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    1d22:	4809      	ldr	r0, [pc, #36]	; (1d48 <log_core_init+0x28>)
{
    1d24:	b508      	push	{r3, lr}
	panic_mode = false;
    1d26:	2300      	movs	r3, #0
    1d28:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    1d2a:	4a08      	ldr	r2, [pc, #32]	; (1d4c <log_core_init+0x2c>)
    1d2c:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    1d2e:	4a08      	ldr	r2, [pc, #32]	; (1d50 <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
    1d30:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
    1d34:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    1d36:	f7ff ff85 	bl	1c44 <log_set_timestamp_func>
}
    1d3a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    1d3e:	f7ff bfdf 	b.w	1d00 <z_log_msg_init>
    1d42:	bf00      	nop
    1d44:	20000c69 	.word	0x20000c69
    1d48:	00008379 	.word	0x00008379
    1d4c:	200008d0 	.word	0x200008d0
    1d50:	200008d4 	.word	0x200008d4

00001d54 <z_log_msg_alloc>:
{
    1d54:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    1d56:	2200      	movs	r2, #0
    1d58:	4801      	ldr	r0, [pc, #4]	; (1d60 <z_log_msg_alloc+0xc>)
    1d5a:	2300      	movs	r3, #0
    1d5c:	f006 b9c0 	b.w	80e0 <mpsc_pbuf_alloc>
    1d60:	20000178 	.word	0x20000178

00001d64 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    1d64:	4801      	ldr	r0, [pc, #4]	; (1d6c <z_log_msg_local_claim+0x8>)
    1d66:	f006 ba59 	b.w	821c <mpsc_pbuf_claim>
    1d6a:	bf00      	nop
    1d6c:	20000178 	.word	0x20000178

00001d70 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    1d70:	4b02      	ldr	r3, [pc, #8]	; (1d7c <z_log_msg_free+0xc>)
{
    1d72:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    1d74:	6818      	ldr	r0, [r3, #0]
    1d76:	f006 baa3 	b.w	82c0 <mpsc_pbuf_free>
    1d7a:	bf00      	nop
    1d7c:	200008c8 	.word	0x200008c8

00001d80 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    1d80:	4801      	ldr	r0, [pc, #4]	; (1d88 <z_log_msg_pending+0x8>)
    1d82:	f006 bad9 	b.w	8338 <mpsc_pbuf_is_pending>
    1d86:	bf00      	nop
    1d88:	20000178 	.word	0x20000178

00001d8c <z_impl_log_process>:
{
    1d8c:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    1d8e:	4b28      	ldr	r3, [pc, #160]	; (1e30 <z_impl_log_process+0xa4>)
    1d90:	7818      	ldrb	r0, [r3, #0]
    1d92:	2800      	cmp	r0, #0
    1d94:	d04b      	beq.n	1e2e <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
    1d96:	f7ff ffe5 	bl	1d64 <z_log_msg_local_claim>
	if (msg) {
    1d9a:	4605      	mov	r5, r0
    1d9c:	b190      	cbz	r0, 1dc4 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1d9e:	f3bf 8f5b 	dmb	ish
    1da2:	4b24      	ldr	r3, [pc, #144]	; (1e34 <z_impl_log_process+0xa8>)
    1da4:	e853 1f00 	ldrex	r1, [r3]
    1da8:	3901      	subs	r1, #1
    1daa:	e843 1200 	strex	r2, r1, [r3]
    1dae:	2a00      	cmp	r2, #0
    1db0:	d1f8      	bne.n	1da4 <z_impl_log_process+0x18>
    1db2:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1db6:	4c20      	ldr	r4, [pc, #128]	; (1e38 <z_impl_log_process+0xac>)
    1db8:	4e20      	ldr	r6, [pc, #128]	; (1e3c <z_impl_log_process+0xb0>)
    1dba:	42b4      	cmp	r4, r6
    1dbc:	d32d      	bcc.n	1e1a <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
    1dbe:	4628      	mov	r0, r5
    1dc0:	f7ff ffd6 	bl	1d70 <z_log_msg_free>
	return dropped_cnt > 0;
    1dc4:	4b1e      	ldr	r3, [pc, #120]	; (1e40 <z_impl_log_process+0xb4>)
    1dc6:	4c1f      	ldr	r4, [pc, #124]	; (1e44 <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
    1dc8:	681b      	ldr	r3, [r3, #0]
    1dca:	2b00      	cmp	r3, #0
    1dcc:	dd19      	ble.n	1e02 <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
    1dce:	f007 f8c5 	bl	8f5c <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    1dd2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1dd6:	fba0 0302 	umull	r0, r3, r0, r2
    1dda:	fb02 3101 	mla	r1, r2, r1, r3
    1dde:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    1de0:	e9d4 2000 	ldrd	r2, r0, [r4]
    1de4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    1de8:	1a9b      	subs	r3, r3, r2
    1dea:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
    1dee:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    1df2:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    1df6:	4293      	cmp	r3, r2
    1df8:	f171 0100 	sbcs.w	r1, r1, #0
    1dfc:	d301      	bcc.n	1e02 <z_impl_log_process+0x76>
				dropped_notify();
    1dfe:	f7ff ff67 	bl	1cd0 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    1e02:	e9d4 3200 	ldrd	r3, r2, [r4]
    1e06:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    1e0a:	f142 0200 	adc.w	r2, r2, #0
    1e0e:	e9c4 3200 	strd	r3, r2, [r4]
}
    1e12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    1e16:	f7ff bfb3 	b.w	1d80 <z_log_msg_pending>
	return backend->cb->active;
    1e1a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    1e1c:	795b      	ldrb	r3, [r3, #5]
    1e1e:	b123      	cbz	r3, 1e2a <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
    1e20:	6823      	ldr	r3, [r4, #0]
    1e22:	4629      	mov	r1, r5
    1e24:	681b      	ldr	r3, [r3, #0]
    1e26:	4620      	mov	r0, r4
    1e28:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1e2a:	3410      	adds	r4, #16
    1e2c:	e7c5      	b.n	1dba <z_impl_log_process+0x2e>
}
    1e2e:	bd70      	pop	{r4, r5, r6, pc}
    1e30:	20000c68 	.word	0x20000c68
    1e34:	200008d4 	.word	0x200008d4
    1e38:	00009348 	.word	0x00009348
    1e3c:	00009358 	.word	0x00009358
    1e40:	200008d0 	.word	0x200008d0
    1e44:	200006a8 	.word	0x200006a8

00001e48 <z_impl_log_panic>:
{
    1e48:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    1e4a:	4d0d      	ldr	r5, [pc, #52]	; (1e80 <z_impl_log_panic+0x38>)
    1e4c:	7829      	ldrb	r1, [r5, #0]
    1e4e:	b961      	cbnz	r1, 1e6a <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    1e50:	2001      	movs	r0, #1
    1e52:	f7ff fea9 	bl	1ba8 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1e56:	4c0b      	ldr	r4, [pc, #44]	; (1e84 <z_impl_log_panic+0x3c>)
    1e58:	4e0b      	ldr	r6, [pc, #44]	; (1e88 <z_impl_log_panic+0x40>)
    1e5a:	42b4      	cmp	r4, r6
    1e5c:	d306      	bcc.n	1e6c <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    1e5e:	f7ff ff95 	bl	1d8c <z_impl_log_process>
		while (log_process() == true) {
    1e62:	2800      	cmp	r0, #0
    1e64:	d1fb      	bne.n	1e5e <z_impl_log_panic+0x16>
	panic_mode = true;
    1e66:	2301      	movs	r3, #1
    1e68:	702b      	strb	r3, [r5, #0]
}
    1e6a:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    1e6c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1e6e:	795b      	ldrb	r3, [r3, #5]
    1e70:	b11b      	cbz	r3, 1e7a <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    1e72:	6823      	ldr	r3, [r4, #0]
    1e74:	4620      	mov	r0, r4
    1e76:	689b      	ldr	r3, [r3, #8]
    1e78:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1e7a:	3410      	adds	r4, #16
    1e7c:	e7ed      	b.n	1e5a <z_impl_log_panic+0x12>
    1e7e:	bf00      	nop
    1e80:	20000c69 	.word	0x20000c69
    1e84:	00009348 	.word	0x00009348
    1e88:	00009358 	.word	0x00009358

00001e8c <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    1e8c:	2100      	movs	r1, #0
{
    1e8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    1e92:	4608      	mov	r0, r1
    1e94:	f7ff fe88 	bl	1ba8 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1e98:	4604      	mov	r4, r0
    1e9a:	b348      	cbz	r0, 1ef0 <log_process_thread_func+0x64>
    1e9c:	f240 6867 	movw	r8, #1639	; 0x667
    1ea0:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    1ea4:	f005 fb3c 	bl	7520 <z_impl_z_current_get>
	proc_tid = process_tid;
    1ea8:	4b1a      	ldr	r3, [pc, #104]	; (1f14 <log_process_thread_func+0x88>)
    1eaa:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1eac:	b130      	cbz	r0, 1ebc <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1eae:	4b1a      	ldr	r3, [pc, #104]	; (1f18 <log_process_thread_func+0x8c>)
	    process_tid &&
    1eb0:	681b      	ldr	r3, [r3, #0]
    1eb2:	2b09      	cmp	r3, #9
    1eb4:	dd02      	ble.n	1ebc <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    1eb6:	4819      	ldr	r0, [pc, #100]	; (1f1c <log_process_thread_func+0x90>)
    1eb8:	f004 feb2 	bl	6c20 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1ebc:	4f18      	ldr	r7, [pc, #96]	; (1f20 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    1ebe:	f8df a05c 	ldr.w	sl, [pc, #92]	; 1f1c <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1ec2:	2500      	movs	r5, #0
		if (activate_mask) {
    1ec4:	b144      	cbz	r4, 1ed8 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    1ec6:	4620      	mov	r0, r4
    1ec8:	f7ff fe08 	bl	1adc <activate_foreach_backend>
			if (!activate_mask) {
    1ecc:	4604      	mov	r4, r0
    1ece:	b918      	cbnz	r0, 1ed8 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    1ed0:	f04f 38ff 	mov.w	r8, #4294967295
    1ed4:	f04f 39ff 	mov.w	r9, #4294967295
    1ed8:	f7ff ff58 	bl	1d8c <z_impl_log_process>
		if (log_process() == false) {
    1edc:	4606      	mov	r6, r0
    1ede:	b928      	cbnz	r0, 1eec <log_process_thread_func+0x60>
			if (processed_any) {
    1ee0:	b9b5      	cbnz	r5, 1f10 <log_process_thread_func+0x84>
    1ee2:	4642      	mov	r2, r8
    1ee4:	464b      	mov	r3, r9
    1ee6:	4650      	mov	r0, sl
    1ee8:	f004 fec0 	bl	6c6c <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    1eec:	4635      	mov	r5, r6
    1eee:	e7e9      	b.n	1ec4 <log_process_thread_func+0x38>
    1ef0:	f04f 38ff 	mov.w	r8, #4294967295
    1ef4:	f04f 39ff 	mov.w	r9, #4294967295
    1ef8:	e7d4      	b.n	1ea4 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    1efa:	682b      	ldr	r3, [r5, #0]
    1efc:	699b      	ldr	r3, [r3, #24]
    1efe:	b11b      	cbz	r3, 1f08 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    1f00:	2200      	movs	r2, #0
    1f02:	4611      	mov	r1, r2
    1f04:	4628      	mov	r0, r5
    1f06:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1f08:	3510      	adds	r5, #16
    1f0a:	42bd      	cmp	r5, r7
    1f0c:	d3f5      	bcc.n	1efa <log_process_thread_func+0x6e>
    1f0e:	e7e8      	b.n	1ee2 <log_process_thread_func+0x56>
    1f10:	4d04      	ldr	r5, [pc, #16]	; (1f24 <log_process_thread_func+0x98>)
    1f12:	e7fa      	b.n	1f0a <log_process_thread_func+0x7e>
    1f14:	200008cc 	.word	0x200008cc
    1f18:	200008d4 	.word	0x200008d4
    1f1c:	2000020c 	.word	0x2000020c
    1f20:	00009358 	.word	0x00009358
    1f24:	00009348 	.word	0x00009348

00001f28 <z_log_msg_post_finalize>:
{
    1f28:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    1f2a:	4818      	ldr	r0, [pc, #96]	; (1f8c <z_log_msg_post_finalize+0x64>)
    1f2c:	f006 fa26 	bl	837c <atomic_inc>
	if (panic_mode) {
    1f30:	4b17      	ldr	r3, [pc, #92]	; (1f90 <z_log_msg_post_finalize+0x68>)
    1f32:	781b      	ldrb	r3, [r3, #0]
    1f34:	b17b      	cbz	r3, 1f56 <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
    1f36:	f04f 0340 	mov.w	r3, #64	; 0x40
    1f3a:	f3ef 8411 	mrs	r4, BASEPRI
    1f3e:	f383 8812 	msr	BASEPRI_MAX, r3
    1f42:	f3bf 8f6f 	isb	sy
    1f46:	f7ff ff21 	bl	1d8c <z_impl_log_process>
	__asm__ volatile(
    1f4a:	f384 8811 	msr	BASEPRI, r4
    1f4e:	f3bf 8f6f 	isb	sy
}
    1f52:	b002      	add	sp, #8
    1f54:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    1f56:	4b0f      	ldr	r3, [pc, #60]	; (1f94 <z_log_msg_post_finalize+0x6c>)
    1f58:	681b      	ldr	r3, [r3, #0]
    1f5a:	2b00      	cmp	r3, #0
    1f5c:	d0f9      	beq.n	1f52 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    1f5e:	b950      	cbnz	r0, 1f76 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    1f60:	2200      	movs	r2, #0
    1f62:	2300      	movs	r3, #0
    1f64:	e9cd 2300 	strd	r2, r3, [sp]
    1f68:	480b      	ldr	r0, [pc, #44]	; (1f98 <z_log_msg_post_finalize+0x70>)
    1f6a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1f6e:	2300      	movs	r3, #0
    1f70:	f005 fd1a 	bl	79a8 <z_impl_k_timer_start>
    1f74:	e7ed      	b.n	1f52 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1f76:	280a      	cmp	r0, #10
    1f78:	d1eb      	bne.n	1f52 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    1f7a:	4807      	ldr	r0, [pc, #28]	; (1f98 <z_log_msg_post_finalize+0x70>)
    1f7c:	f007 f800 	bl	8f80 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1f80:	4806      	ldr	r0, [pc, #24]	; (1f9c <z_log_msg_post_finalize+0x74>)
}
    1f82:	b002      	add	sp, #8
    1f84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1f88:	f004 be4a 	b.w	6c20 <z_impl_k_sem_give>
    1f8c:	200008d4 	.word	0x200008d4
    1f90:	20000c69 	.word	0x20000c69
    1f94:	200008cc 	.word	0x200008cc
    1f98:	200006b0 	.word	0x200006b0
    1f9c:	2000020c 	.word	0x2000020c

00001fa0 <z_log_msg_commit>:
{
    1fa0:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    1fa2:	4b06      	ldr	r3, [pc, #24]	; (1fbc <z_log_msg_commit+0x1c>)
    1fa4:	681b      	ldr	r3, [r3, #0]
{
    1fa6:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1fa8:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    1faa:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    1fac:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    1fae:	4804      	ldr	r0, [pc, #16]	; (1fc0 <z_log_msg_commit+0x20>)
    1fb0:	f006 f914 	bl	81dc <mpsc_pbuf_commit>
}
    1fb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    1fb8:	f7ff bfb6 	b.w	1f28 <z_log_msg_post_finalize>
    1fbc:	20000034 	.word	0x20000034
    1fc0:	20000178 	.word	0x20000178

00001fc4 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1fc4:	4a04      	ldr	r2, [pc, #16]	; (1fd8 <log_source_name_get+0x14>)
    1fc6:	4b05      	ldr	r3, [pc, #20]	; (1fdc <log_source_name_get+0x18>)
    1fc8:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    1fca:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    1fce:	bf34      	ite	cc
    1fd0:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    1fd4:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    1fd6:	4770      	bx	lr
    1fd8:	000092a8 	.word	0x000092a8
    1fdc:	00009348 	.word	0x00009348

00001fe0 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1fe0:	4b08      	ldr	r3, [pc, #32]	; (2004 <log_backend_enable+0x24>)
    1fe2:	1ac3      	subs	r3, r0, r3
{
    1fe4:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    1fe6:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    1fe8:	6844      	ldr	r4, [r0, #4]
    1fea:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    1fec:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    1fee:	6843      	ldr	r3, [r0, #4]
    1ff0:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    1ff2:	6843      	ldr	r3, [r0, #4]
    1ff4:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1ff6:	6843      	ldr	r3, [r0, #4]
    1ff8:	2201      	movs	r2, #1
    1ffa:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    1ffc:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    1ffe:	f7ff be31 	b.w	1c64 <z_log_notify_backend_enabled>
    2002:	bf00      	nop
    2004:	00009348 	.word	0x00009348

00002008 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    2008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    200c:	b08f      	sub	sp, #60	; 0x3c
    200e:	af04      	add	r7, sp, #16
    2010:	f3c1 284a 	ubfx	r8, r1, #9, #11
    2014:	60b8      	str	r0, [r7, #8]
    2016:	460d      	mov	r5, r1
    2018:	4691      	mov	r9, r2
    201a:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    201c:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    201e:	f1b8 0f00 	cmp.w	r8, #0
    2022:	d063      	beq.n	20ec <z_impl_z_log_msg_static_create+0xe4>
	struct z_cbprintf_buf_desc buf_desc = {
    2024:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
    2026:	f107 0314 	add.w	r3, r7, #20
    202a:	f04f 0b04 	mov.w	fp, #4
    202e:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    2032:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
    2036:	e9c7 6607 	strd	r6, r6, [r7, #28]
    203a:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    203c:	9301      	str	r3, [sp, #4]
    203e:	f8cd b008 	str.w	fp, [sp, #8]
    2042:	f8cd a000 	str.w	sl, [sp]
    2046:	f107 031c 	add.w	r3, r7, #28
    204a:	68f9      	ldr	r1, [r7, #12]
    204c:	4632      	mov	r2, r6
    204e:	4648      	mov	r0, r9
    2050:	f7fe fe88 	bl	d64 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    2054:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    2058:	4603      	mov	r3, r0
    205a:	d31c      	bcc.n	2096 <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    205c:	466c      	mov	r4, sp
    205e:	b08a      	sub	sp, #40	; 0x28
    2060:	f8d9 1004 	ldr.w	r1, [r9, #4]
    2064:	ab04      	add	r3, sp, #16
    2066:	4826      	ldr	r0, [pc, #152]	; (2100 <z_impl_z_log_msg_static_create+0xf8>)
    2068:	e9c3 0105 	strd	r0, r1, [r3, #20]
    206c:	f240 71ff 	movw	r1, #2047	; 0x7ff
    2070:	61d9      	str	r1, [r3, #28]
    2072:	461a      	mov	r2, r3
    2074:	f44f 7100 	mov.w	r1, #512	; 0x200
    2078:	8419      	strh	r1, [r3, #32]
    207a:	4b22      	ldr	r3, [pc, #136]	; (2104 <z_impl_z_log_msg_static_create+0xfc>)
    207c:	f842 3f10 	str.w	r3, [r2, #16]!
    2080:	4821      	ldr	r0, [pc, #132]	; (2108 <z_impl_z_log_msg_static_create+0x100>)
    2082:	4633      	mov	r3, r6
    2084:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    2088:	f7ff ffbe 	bl	2008 <z_impl_z_log_msg_static_create>
    208c:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
    208e:	372c      	adds	r7, #44	; 0x2c
    2090:	46bd      	mov	sp, r7
    2092:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
    2096:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    209a:	f104 0017 	add.w	r0, r4, #23
    209e:	4418      	add	r0, r3
    20a0:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    20a4:	0880      	lsrs	r0, r0, #2
    20a6:	603b      	str	r3, [r7, #0]
    20a8:	f7ff fe54 	bl	1d54 <z_log_msg_alloc>
    20ac:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
    20b0:	4604      	mov	r4, r0
    20b2:	b190      	cbz	r0, 20da <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
    20b4:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
    20b6:	4a15      	ldr	r2, [pc, #84]	; (210c <z_impl_z_log_msg_static_create+0x104>)
	struct z_cbprintf_buf_desc buf_desc = {
    20b8:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
    20bc:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
    20c0:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
    20c4:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    20c6:	e9cd a300 	strd	sl, r3, [sp]
    20ca:	f8cd b008 	str.w	fp, [sp, #8]
    20ce:	68f9      	ldr	r1, [r7, #12]
    20d0:	f107 031c 	add.w	r3, r7, #28
    20d4:	4648      	mov	r0, r9
    20d6:	f7fe fe45 	bl	d64 <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
    20da:	f368 2553 	bfi	r5, r8, #9, #11
    20de:	687b      	ldr	r3, [r7, #4]
    20e0:	68b9      	ldr	r1, [r7, #8]
    20e2:	462a      	mov	r2, r5
    20e4:	4620      	mov	r0, r4
    20e6:	f006 f97f 	bl	83e8 <z_log_msg_finalize>
    20ea:	e7d0      	b.n	208e <z_impl_z_log_msg_static_create+0x86>
    20ec:	f104 0017 	add.w	r0, r4, #23
    20f0:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    20f4:	0880      	lsrs	r0, r0, #2
    20f6:	f7ff fe2d 	bl	1d54 <z_log_msg_alloc>
    20fa:	4604      	mov	r4, r0
    20fc:	e7ed      	b.n	20da <z_impl_z_log_msg_static_create+0xd2>
    20fe:	bf00      	nop
    2100:	000097b7 	.word	0x000097b7
    2104:	01000004 	.word	0x01000004
    2108:	000092f8 	.word	0x000092f8
    210c:	000083bd 	.word	0x000083bd

00002110 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    2110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2114:	b087      	sub	sp, #28
    2116:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    211a:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    211e:	4604      	mov	r4, r0
    2120:	460f      	mov	r7, r1
    2122:	4693      	mov	fp, r2
    2124:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    2126:	b3a6      	cbz	r6, 2192 <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    2128:	2110      	movs	r1, #16
    212a:	f8cd 9000 	str.w	r9, [sp]
    212e:	4633      	mov	r3, r6
    2130:	4652      	mov	r2, sl
    2132:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    2134:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    2138:	f7fe fc3e 	bl	9b8 <cbvprintf_package>
    213c:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    213e:	f105 0017 	add.w	r0, r5, #23
    2142:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    2144:	4b14      	ldr	r3, [pc, #80]	; (2198 <z_impl_z_log_msg_runtime_vcreate+0x88>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    2146:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
    2148:	f004 0407 	and.w	r4, r4, #7
    214c:	f00b 0b07 	and.w	fp, fp, #7
    2150:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    2152:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    2156:	ea03 2341 	and.w	r3, r3, r1, lsl #9
    215a:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    215e:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    2160:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
    2162:	f7ff fdf7 	bl	1d54 <z_log_msg_alloc>
	struct log_msg_desc desc =
    2166:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    216a:	4605      	mov	r5, r0
    216c:	b140      	cbz	r0, 2180 <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    216e:	b13e      	cbz	r6, 2180 <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    2170:	9903      	ldr	r1, [sp, #12]
    2172:	f8cd 9000 	str.w	r9, [sp]
    2176:	4633      	mov	r3, r6
    2178:	4652      	mov	r2, sl
    217a:	3010      	adds	r0, #16
    217c:	f7fe fc1c 	bl	9b8 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    2180:	4643      	mov	r3, r8
    2182:	4622      	mov	r2, r4
    2184:	4639      	mov	r1, r7
    2186:	4628      	mov	r0, r5
	}
}
    2188:	b007      	add	sp, #28
    218a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    218e:	f006 b92b 	b.w	83e8 <z_log_msg_finalize>
		plen = 0;
    2192:	4631      	mov	r1, r6
    2194:	e7d3      	b.n	213e <z_impl_z_log_msg_runtime_vcreate+0x2e>
    2196:	bf00      	nop
    2198:	000ffe00 	.word	0x000ffe00

0000219c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    219c:	b40e      	push	{r1, r2, r3}
    219e:	b503      	push	{r0, r1, lr}
    21a0:	ab03      	add	r3, sp, #12
    21a2:	4601      	mov	r1, r0
    21a4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    21a8:	4804      	ldr	r0, [pc, #16]	; (21bc <print_formatted+0x20>)
	va_start(args, fmt);
    21aa:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    21ac:	f006 f942 	bl	8434 <cbvprintf>
	va_end(args);

	return length;
}
    21b0:	b002      	add	sp, #8
    21b2:	f85d eb04 	ldr.w	lr, [sp], #4
    21b6:	b003      	add	sp, #12
    21b8:	4770      	bx	lr
    21ba:	bf00      	nop
    21bc:	0000845d 	.word	0x0000845d

000021c0 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    21c0:	06ca      	lsls	r2, r1, #27
    21c2:	d405      	bmi.n	21d0 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    21c4:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    21c6:	bf4c      	ite	mi
    21c8:	4902      	ldrmi	r1, [pc, #8]	; (21d4 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    21ca:	4903      	ldrpl	r1, [pc, #12]	; (21d8 <newline_print+0x18>)
    21cc:	f7ff bfe6 	b.w	219c <print_formatted>
	}
}
    21d0:	4770      	bx	lr
    21d2:	bf00      	nop
    21d4:	000097f7 	.word	0x000097f7
    21d8:	000097f6 	.word	0x000097f6

000021dc <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    21dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    21e0:	b089      	sub	sp, #36	; 0x24
    21e2:	469b      	mov	fp, r3
    21e4:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    21e8:	9304      	str	r3, [sp, #16]
    21ea:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    21ee:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    21f0:	9b04      	ldr	r3, [sp, #16]
{
    21f2:	9206      	str	r2, [sp, #24]
    21f4:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    21f8:	4604      	mov	r4, r0
    21fa:	460d      	mov	r5, r1
	if (!raw_string) {
    21fc:	2b00      	cmp	r3, #0
    21fe:	f000 8087 	beq.w	2310 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    2202:	f006 0308 	and.w	r3, r6, #8
    2206:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    2208:	f006 f8d6 	bl	83b8 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    220c:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    2210:	4602      	mov	r2, r0
    2212:	2800      	cmp	r0, #0
    2214:	d04b      	beq.n	22ae <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    2216:	4986      	ldr	r1, [pc, #536]	; (2430 <log_output_process+0x254>)
    2218:	4620      	mov	r0, r4
    221a:	f7ff ffbf 	bl	219c <print_formatted>
    221e:	4680      	mov	r8, r0
	if (stamp) {
    2220:	f1ba 0f00 	cmp.w	sl, #0
    2224:	d008      	beq.n	2238 <log_output_process+0x5c>
	if (!format) {
    2226:	f016 0f44 	tst.w	r6, #68	; 0x44
    222a:	d142      	bne.n	22b2 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    222c:	4981      	ldr	r1, [pc, #516]	; (2434 <log_output_process+0x258>)
    222e:	462a      	mov	r2, r5
    2230:	4620      	mov	r0, r4
    2232:	f7ff ffb3 	bl	219c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    2236:	4480      	add	r8, r0
	if (color) {
    2238:	f006 0301 	and.w	r3, r6, #1
    223c:	b15b      	cbz	r3, 2256 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    223e:	4b7e      	ldr	r3, [pc, #504]	; (2438 <log_output_process+0x25c>)
    2240:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    2242:	497e      	ldr	r1, [pc, #504]	; (243c <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
    2244:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    2248:	4b7d      	ldr	r3, [pc, #500]	; (2440 <log_output_process+0x264>)
    224a:	4620      	mov	r0, r4
    224c:	2a00      	cmp	r2, #0
    224e:	bf08      	it	eq
    2250:	461a      	moveq	r2, r3
    2252:	f7ff ffa3 	bl	219c <print_formatted>
	if (level_on) {
    2256:	f006 0308 	and.w	r3, r6, #8
    225a:	2b00      	cmp	r3, #0
    225c:	d055      	beq.n	230a <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    225e:	4b79      	ldr	r3, [pc, #484]	; (2444 <log_output_process+0x268>)
    2260:	9a04      	ldr	r2, [sp, #16]
    2262:	4979      	ldr	r1, [pc, #484]	; (2448 <log_output_process+0x26c>)
    2264:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2268:	4620      	mov	r0, r4
    226a:	f7ff ff97 	bl	219c <print_formatted>
    226e:	4605      	mov	r5, r0
	if (domain) {
    2270:	9b06      	ldr	r3, [sp, #24]
    2272:	b12b      	cbz	r3, 2280 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    2274:	4975      	ldr	r1, [pc, #468]	; (244c <log_output_process+0x270>)
    2276:	461a      	mov	r2, r3
    2278:	4620      	mov	r0, r4
    227a:	f7ff ff8f 	bl	219c <print_formatted>
    227e:	4405      	add	r5, r0
	if (source) {
    2280:	f1bb 0f00 	cmp.w	fp, #0
    2284:	d005      	beq.n	2292 <log_output_process+0xb6>
		total += print_formatted(output,
    2286:	4972      	ldr	r1, [pc, #456]	; (2450 <log_output_process+0x274>)
    2288:	465a      	mov	r2, fp
    228a:	4620      	mov	r0, r4
    228c:	f7ff ff86 	bl	219c <print_formatted>
    2290:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    2292:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    2294:	f1b9 0f00 	cmp.w	r9, #0
    2298:	d149      	bne.n	232e <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    229a:	2f00      	cmp	r7, #0
    229c:	d14f      	bne.n	233e <log_output_process+0x162>
	if (color) {
    229e:	07f3      	lsls	r3, r6, #31
    22a0:	f100 80c0 	bmi.w	2424 <log_output_process+0x248>
	newline_print(output, flags);
    22a4:	4631      	mov	r1, r6
    22a6:	4620      	mov	r0, r4
    22a8:	f7ff ff8a 	bl	21c0 <newline_print>
}
    22ac:	e0b4      	b.n	2418 <log_output_process+0x23c>
	uint32_t length = 0U;
    22ae:	4680      	mov	r8, r0
    22b0:	e7b6      	b.n	2220 <log_output_process+0x44>
	} else if (freq != 0U) {
    22b2:	4b68      	ldr	r3, [pc, #416]	; (2454 <log_output_process+0x278>)
    22b4:	6818      	ldr	r0, [r3, #0]
    22b6:	2800      	cmp	r0, #0
    22b8:	d0bd      	beq.n	2236 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    22ba:	4b67      	ldr	r3, [pc, #412]	; (2458 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    22bc:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    22c0:	681b      	ldr	r3, [r3, #0]
    22c2:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    22c6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    22ca:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    22ce:	fb00 5513 	mls	r5, r0, r3, r5
    22d2:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
    22d6:	fb0e f505 	mul.w	r5, lr, r5
    22da:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
    22de:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    22e0:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    22e4:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    22e8:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
    22ec:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    22f0:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
    22f4:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    22f6:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    22fa:	4958      	ldr	r1, [pc, #352]	; (245c <log_output_process+0x280>)
    22fc:	e9cd c501 	strd	ip, r5, [sp, #4]
    2300:	4652      	mov	r2, sl
    2302:	4620      	mov	r0, r4
    2304:	f7ff ff4a 	bl	219c <print_formatted>
    2308:	e795      	b.n	2236 <log_output_process+0x5a>
	int total = 0;
    230a:	f006 0508 	and.w	r5, r6, #8
    230e:	e7af      	b.n	2270 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    2310:	f1bb 0f01 	cmp.w	fp, #1
    2314:	d106      	bne.n	2324 <log_output_process+0x148>
	if (package) {
    2316:	f1b9 0f00 	cmp.w	r9, #0
    231a:	d164      	bne.n	23e6 <log_output_process+0x20a>
	if (data_len) {
    231c:	2f00      	cmp	r7, #0
    231e:	d07b      	beq.n	2418 <log_output_process+0x23c>
		prefix_offset = 0;
    2320:	2500      	movs	r5, #0
    2322:	e00c      	b.n	233e <log_output_process+0x162>
	if (package) {
    2324:	f1b9 0f00 	cmp.w	r9, #0
    2328:	d0f8      	beq.n	231c <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    232a:	484d      	ldr	r0, [pc, #308]	; (2460 <log_output_process+0x284>)
    232c:	e05c      	b.n	23e8 <log_output_process+0x20c>
		cb = out_func;
    232e:	484d      	ldr	r0, [pc, #308]	; (2464 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    2330:	494d      	ldr	r1, [pc, #308]	; (2468 <log_output_process+0x28c>)
    2332:	464b      	mov	r3, r9
    2334:	4622      	mov	r2, r4
    2336:	f005 fbbf 	bl	7ab8 <cbpprintf_external>
	if (data_len) {
    233a:	2f00      	cmp	r7, #0
    233c:	d068      	beq.n	2410 <log_output_process+0x234>
		print_formatted(output, " ");
    233e:	f8df 912c 	ldr.w	r9, [pc, #300]	; 246c <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    2342:	f8df a12c 	ldr.w	sl, [pc, #300]	; 2470 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    2346:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    2348:	4631      	mov	r1, r6
    234a:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    234c:	46b8      	mov	r8, r7
    234e:	bf28      	it	cs
    2350:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    2354:	f7ff ff34 	bl	21c0 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    2358:	f04f 0b00 	mov.w	fp, #0
    235c:	455d      	cmp	r5, fp
    235e:	dc45      	bgt.n	23ec <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    2360:	9b05      	ldr	r3, [sp, #20]
    2362:	4651      	mov	r1, sl
    2364:	781a      	ldrb	r2, [r3, #0]
    2366:	4620      	mov	r0, r4
    2368:	f7ff ff18 	bl	219c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    236c:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    2370:	f01b 0f07 	tst.w	fp, #7
    2374:	d103      	bne.n	237e <log_output_process+0x1a2>
			print_formatted(output, " ");
    2376:	4649      	mov	r1, r9
    2378:	4620      	mov	r0, r4
    237a:	f7ff ff0f 	bl	219c <print_formatted>
		if (i < length) {
    237e:	45d8      	cmp	r8, fp
    2380:	d93b      	bls.n	23fa <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    2382:	9b05      	ldr	r3, [sp, #20]
    2384:	4651      	mov	r1, sl
    2386:	f813 200b 	ldrb.w	r2, [r3, fp]
    238a:	4620      	mov	r0, r4
    238c:	f7ff ff06 	bl	219c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2390:	f10b 0b01 	add.w	fp, fp, #1
    2394:	f1bb 0f10 	cmp.w	fp, #16
    2398:	d1ea      	bne.n	2370 <log_output_process+0x194>
	print_formatted(output, "|");
    239a:	4936      	ldr	r1, [pc, #216]	; (2474 <log_output_process+0x298>)
    239c:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    239e:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    23a2:	f7ff fefb 	bl	219c <print_formatted>
		if (i < length) {
    23a6:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    23a8:	9b05      	ldr	r3, [sp, #20]
    23aa:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    23ac:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    23b0:	295f      	cmp	r1, #95	; 0x5f
    23b2:	bf28      	it	cs
    23b4:	222e      	movcs	r2, #46	; 0x2e
    23b6:	4930      	ldr	r1, [pc, #192]	; (2478 <log_output_process+0x29c>)
    23b8:	4620      	mov	r0, r4
    23ba:	f7ff feef 	bl	219c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    23be:	f10b 0b01 	add.w	fp, fp, #1
    23c2:	f1bb 0f10 	cmp.w	fp, #16
    23c6:	d01d      	beq.n	2404 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    23c8:	f01b 0f07 	tst.w	fp, #7
    23cc:	d103      	bne.n	23d6 <log_output_process+0x1fa>
			print_formatted(output, " ");
    23ce:	4649      	mov	r1, r9
    23d0:	4620      	mov	r0, r4
    23d2:	f7ff fee3 	bl	219c <print_formatted>
		if (i < length) {
    23d6:	45d8      	cmp	r8, fp
    23d8:	465a      	mov	r2, fp
    23da:	d8e5      	bhi.n	23a8 <log_output_process+0x1cc>
			print_formatted(output, " ");
    23dc:	4649      	mov	r1, r9
    23de:	4620      	mov	r0, r4
    23e0:	f7ff fedc 	bl	219c <print_formatted>
    23e4:	e7eb      	b.n	23be <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    23e6:	481f      	ldr	r0, [pc, #124]	; (2464 <log_output_process+0x288>)
		prefix_offset = 0;
    23e8:	9d04      	ldr	r5, [sp, #16]
    23ea:	e7a1      	b.n	2330 <log_output_process+0x154>
		print_formatted(output, " ");
    23ec:	4649      	mov	r1, r9
    23ee:	4620      	mov	r0, r4
    23f0:	f7ff fed4 	bl	219c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    23f4:	f10b 0b01 	add.w	fp, fp, #1
    23f8:	e7b0      	b.n	235c <log_output_process+0x180>
			print_formatted(output, "   ");
    23fa:	4920      	ldr	r1, [pc, #128]	; (247c <log_output_process+0x2a0>)
    23fc:	4620      	mov	r0, r4
    23fe:	f7ff fecd 	bl	219c <print_formatted>
    2402:	e7c5      	b.n	2390 <log_output_process+0x1b4>
		data += length;
    2404:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    2406:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    240a:	4443      	add	r3, r8
    240c:	9305      	str	r3, [sp, #20]
	} while (len);
    240e:	d19a      	bne.n	2346 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    2410:	9b04      	ldr	r3, [sp, #16]
    2412:	2b00      	cmp	r3, #0
    2414:	f47f af43 	bne.w	229e <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    2418:	4620      	mov	r0, r4
}
    241a:	b009      	add	sp, #36	; 0x24
    241c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    2420:	f006 b80f 	b.w	8442 <log_output_flush>
		print_formatted(output, "%s", log_color);
    2424:	4a06      	ldr	r2, [pc, #24]	; (2440 <log_output_process+0x264>)
    2426:	4905      	ldr	r1, [pc, #20]	; (243c <log_output_process+0x260>)
    2428:	4620      	mov	r0, r4
    242a:	f7ff feb7 	bl	219c <print_formatted>
}
    242e:	e739      	b.n	22a4 <log_output_process+0xc8>
    2430:	000097fe 	.word	0x000097fe
    2434:	00009802 	.word	0x00009802
    2438:	000093ac 	.word	0x000093ac
    243c:	00009d74 	.word	0x00009d74
    2440:	000097f9 	.word	0x000097f9
    2444:	000093c0 	.word	0x000093c0
    2448:	00009827 	.word	0x00009827
    244c:	0000982d 	.word	0x0000982d
    2450:	00009831 	.word	0x00009831
    2454:	200008e0 	.word	0x200008e0
    2458:	200008dc 	.word	0x200008dc
    245c:	0000980b 	.word	0x0000980b
    2460:	00008493 	.word	0x00008493
    2464:	0000845d 	.word	0x0000845d
    2468:	00008435 	.word	0x00008435
    246c:	0000983e 	.word	0x0000983e
    2470:	00009836 	.word	0x00009836
    2474:	00009840 	.word	0x00009840
    2478:	00009842 	.word	0x00009842
    247c:	0000983c 	.word	0x0000983c

00002480 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    2480:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    2484:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    2486:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    2488:	688e      	ldr	r6, [r1, #8]
    248a:	b086      	sub	sp, #24
    248c:	4605      	mov	r5, r0
    248e:	460c      	mov	r4, r1
    2490:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
    2492:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    2496:	b15b      	cbz	r3, 24b0 <log_output_msg_process+0x30>
    2498:	4a13      	ldr	r2, [pc, #76]	; (24e8 <log_output_msg_process+0x68>)
    249a:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    249c:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    24a0:	2900      	cmp	r1, #0
    24a2:	db1f      	blt.n	24e4 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    24a4:	7820      	ldrb	r0, [r4, #0]
    24a6:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    24aa:	f7ff fd8b 	bl	1fc4 <log_source_name_get>
    24ae:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    24b0:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
    24b2:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    24b4:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    24b8:	9700      	str	r7, [sp, #0]
    24ba:	f3c2 224a 	ubfx	r2, r2, #9, #11
    24be:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    24c0:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
    24c4:	f3c0 100b 	ubfx	r0, r0, #4, #12
    24c8:	bf08      	it	eq
    24ca:	2100      	moveq	r1, #0
    24cc:	e9cd 0803 	strd	r0, r8, [sp, #12]
    24d0:	e9cd 1401 	strd	r1, r4, [sp, #4]
    24d4:	2200      	movs	r2, #0
    24d6:	4631      	mov	r1, r6
    24d8:	4628      	mov	r0, r5
    24da:	f7ff fe7f 	bl	21dc <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    24de:	b006      	add	sp, #24
    24e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    24e4:	2300      	movs	r3, #0
    24e6:	e7e3      	b.n	24b0 <log_output_msg_process+0x30>
    24e8:	000092a8 	.word	0x000092a8

000024ec <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    24ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    24ee:	f242 730f 	movw	r3, #9999	; 0x270f
    24f2:	428b      	cmp	r3, r1
    24f4:	bf28      	it	cs
    24f6:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    24f8:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    24fa:	4a0f      	ldr	r2, [pc, #60]	; (2538 <log_output_dropped_process+0x4c>)
{
    24fc:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    24fe:	2105      	movs	r1, #5
    2500:	4668      	mov	r0, sp
    2502:	f005 fb51 	bl	7ba8 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2506:	6863      	ldr	r3, [r4, #4]
    2508:	490c      	ldr	r1, [pc, #48]	; (253c <log_output_dropped_process+0x50>)
    250a:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    250c:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    250e:	220b      	movs	r2, #11
    2510:	4628      	mov	r0, r5
    2512:	f005 ff82 	bl	841a <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    2516:	6863      	ldr	r3, [r4, #4]
    2518:	4632      	mov	r2, r6
    251a:	4669      	mov	r1, sp
    251c:	4628      	mov	r0, r5
    251e:	685b      	ldr	r3, [r3, #4]
    2520:	f005 ff7b 	bl	841a <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    2524:	6863      	ldr	r3, [r4, #4]
    2526:	4906      	ldr	r1, [pc, #24]	; (2540 <log_output_dropped_process+0x54>)
    2528:	685b      	ldr	r3, [r3, #4]
    252a:	221b      	movs	r2, #27
    252c:	4628      	mov	r0, r5
    252e:	f005 ff74 	bl	841a <buffer_write>
		     output->control_block->ctx);
}
    2532:	b002      	add	sp, #8
    2534:	bd70      	pop	{r4, r5, r6, pc}
    2536:	bf00      	nop
    2538:	000095e9 	.word	0x000095e9
    253c:	00009861 	.word	0x00009861
    2540:	00009845 	.word	0x00009845

00002544 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2544:	4a07      	ldr	r2, [pc, #28]	; (2564 <log_output_timestamp_freq_set+0x20>)
    2546:	2100      	movs	r1, #0
    2548:	2301      	movs	r3, #1
    254a:	4290      	cmp	r0, r2
    254c:	d806      	bhi.n	255c <log_output_timestamp_freq_set+0x18>
    254e:	4a06      	ldr	r2, [pc, #24]	; (2568 <log_output_timestamp_freq_set+0x24>)
    2550:	b901      	cbnz	r1, 2554 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    2552:	2301      	movs	r3, #1
    2554:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    2556:	4b05      	ldr	r3, [pc, #20]	; (256c <log_output_timestamp_freq_set+0x28>)
    2558:	6018      	str	r0, [r3, #0]
}
    255a:	4770      	bx	lr
		frequency /= 2U;
    255c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    255e:	005b      	lsls	r3, r3, #1
    2560:	2101      	movs	r1, #1
    2562:	e7f2      	b.n	254a <log_output_timestamp_freq_set+0x6>
    2564:	000f4240 	.word	0x000f4240
    2568:	200008dc 	.word	0x200008dc
    256c:	200008e0 	.word	0x200008e0

00002570 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2570:	4b01      	ldr	r3, [pc, #4]	; (2578 <log_backend_rtt_init+0x8>)
    2572:	2201      	movs	r2, #1
    2574:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    2576:	4770      	bx	lr
    2578:	20000c6a 	.word	0x20000c6a

0000257c <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    257c:	4b01      	ldr	r3, [pc, #4]	; (2584 <format_set+0x8>)
	return 0;
}
    257e:	2000      	movs	r0, #0
	log_format_current = log_type;
    2580:	6019      	str	r1, [r3, #0]
}
    2582:	4770      	bx	lr
    2584:	200008f8 	.word	0x200008f8

00002588 <panic>:
	panic_mode = true;
    2588:	4b02      	ldr	r3, [pc, #8]	; (2594 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    258a:	4803      	ldr	r0, [pc, #12]	; (2598 <panic+0x10>)
    258c:	2201      	movs	r2, #1
    258e:	701a      	strb	r2, [r3, #0]
    2590:	f005 bf57 	b.w	8442 <log_output_flush>
    2594:	20000c6b 	.word	0x20000c6b
    2598:	000093f0 	.word	0x000093f0

0000259c <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    259c:	4801      	ldr	r0, [pc, #4]	; (25a4 <dropped+0x8>)
    259e:	f7ff bfa5 	b.w	24ec <log_output_dropped_process>
    25a2:	bf00      	nop
    25a4:	000093f0 	.word	0x000093f0

000025a8 <process>:
{
    25a8:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    25aa:	4b06      	ldr	r3, [pc, #24]	; (25c4 <process+0x1c>)
    25ac:	6818      	ldr	r0, [r3, #0]
{
    25ae:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    25b0:	f7ff fb42 	bl	1c38 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    25b4:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    25b6:	4603      	mov	r3, r0
}
    25b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    25bc:	4802      	ldr	r0, [pc, #8]	; (25c8 <process+0x20>)
    25be:	220f      	movs	r2, #15
    25c0:	4718      	bx	r3
    25c2:	bf00      	nop
    25c4:	200008f8 	.word	0x200008f8
    25c8:	000093f0 	.word	0x000093f0

000025cc <on_failed_write>:
	if (retry_cnt == 0) {
    25cc:	b910      	cbnz	r0, 25d4 <on_failed_write+0x8>
		host_present = false;
    25ce:	4b07      	ldr	r3, [pc, #28]	; (25ec <on_failed_write+0x20>)
    25d0:	7018      	strb	r0, [r3, #0]
}
    25d2:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    25d4:	4b06      	ldr	r3, [pc, #24]	; (25f0 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
    25d6:	781b      	ldrb	r3, [r3, #0]
    25d8:	b11b      	cbz	r3, 25e2 <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
    25da:	f241 3088 	movw	r0, #5000	; 0x1388
    25de:	f006 bcbf 	b.w	8f60 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    25e2:	20a4      	movs	r0, #164	; 0xa4
    25e4:	2100      	movs	r1, #0
    25e6:	f004 bf81 	b.w	74ec <z_impl_k_sleep>
    25ea:	bf00      	nop
    25ec:	20000c6a 	.word	0x20000c6a
    25f0:	20000c6b 	.word	0x20000c6b

000025f4 <data_out_block_mode>:
{
    25f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    25f8:	f8df 9074 	ldr.w	r9, [pc, #116]	; 2670 <data_out_block_mode+0x7c>
    25fc:	4f1d      	ldr	r7, [pc, #116]	; (2674 <data_out_block_mode+0x80>)
{
    25fe:	4680      	mov	r8, r0
    2600:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    2602:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    2604:	f899 5000 	ldrb.w	r5, [r9]
    2608:	b995      	cbnz	r5, 2630 <data_out_block_mode+0x3c>
			RTT_LOCK();
    260a:	f003 ffff 	bl	660c <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    260e:	4628      	mov	r0, r5
    2610:	4632      	mov	r2, r6
    2612:	4641      	mov	r1, r8
    2614:	f003 ff7c 	bl	6510 <SEGGER_RTT_WriteSkipNoLock>
    2618:	4605      	mov	r5, r0
			RTT_UNLOCK();
    261a:	f004 f801 	bl	6620 <zephyr_rtt_mutex_unlock>
		if (ret) {
    261e:	b1e5      	cbz	r5, 265a <data_out_block_mode+0x66>
	host_present = true;
    2620:	2301      	movs	r3, #1
    2622:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
    2624:	f899 3000 	ldrb.w	r3, [r9]
    2628:	b973      	cbnz	r3, 2648 <data_out_block_mode+0x54>
}
    262a:	4630      	mov	r0, r6
    262c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2630:	4632      	mov	r2, r6
    2632:	4641      	mov	r1, r8
    2634:	2000      	movs	r0, #0
    2636:	f003 ff6b 	bl	6510 <SEGGER_RTT_WriteSkipNoLock>
    263a:	4605      	mov	r5, r0
    263c:	e7ef      	b.n	261e <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
    263e:	4620      	mov	r0, r4
    2640:	f7ff ffc4 	bl	25cc <on_failed_write>
    2644:	1e65      	subs	r5, r4, #1
    2646:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    2648:	2000      	movs	r0, #0
    264a:	f003 ffd5 	bl	65f8 <SEGGER_RTT_HasDataUp>
    264e:	2800      	cmp	r0, #0
    2650:	d0eb      	beq.n	262a <data_out_block_mode+0x36>
    2652:	783b      	ldrb	r3, [r7, #0]
    2654:	2b00      	cmp	r3, #0
    2656:	d1f2      	bne.n	263e <data_out_block_mode+0x4a>
    2658:	e7e7      	b.n	262a <data_out_block_mode+0x36>
		} else if (host_present) {
    265a:	783b      	ldrb	r3, [r7, #0]
    265c:	2b00      	cmp	r3, #0
    265e:	d0e4      	beq.n	262a <data_out_block_mode+0x36>
			retry_cnt--;
    2660:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
    2662:	4620      	mov	r0, r4
    2664:	f7ff ffb2 	bl	25cc <on_failed_write>
	} while ((ret == 0) && host_present);
    2668:	783b      	ldrb	r3, [r7, #0]
    266a:	2b00      	cmp	r3, #0
    266c:	d1ca      	bne.n	2604 <data_out_block_mode+0x10>
    266e:	e7dc      	b.n	262a <data_out_block_mode+0x36>
    2670:	20000c6b 	.word	0x20000c6b
    2674:	20000c6a 	.word	0x20000c6a

00002678 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2678:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    267c:	4605      	mov	r5, r0
	__asm__ volatile(
    267e:	f04f 0340 	mov.w	r3, #64	; 0x40
    2682:	f3ef 8611 	mrs	r6, BASEPRI
    2686:	f383 8812 	msr	BASEPRI_MAX, r3
    268a:	f3bf 8f6f 	isb	sy
	return list->head;
    268e:	4b0e      	ldr	r3, [pc, #56]	; (26c8 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2690:	4f0e      	ldr	r7, [pc, #56]	; (26cc <pm_state_notify+0x54>)
    2692:	681c      	ldr	r4, [r3, #0]
    2694:	f8df 8038 	ldr.w	r8, [pc, #56]	; 26d0 <pm_state_notify+0x58>
    2698:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    269c:	b92c      	cbnz	r4, 26aa <pm_state_notify+0x32>
	__asm__ volatile(
    269e:	f386 8811 	msr	BASEPRI, r6
    26a2:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    26a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    26aa:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    26ae:	2d00      	cmp	r5, #0
    26b0:	bf18      	it	ne
    26b2:	4613      	movne	r3, r2
		if (callback) {
    26b4:	b12b      	cbz	r3, 26c2 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    26b6:	f898 2010 	ldrb.w	r2, [r8, #16]
    26ba:	fb09 f202 	mul.w	r2, r9, r2
    26be:	5cb8      	ldrb	r0, [r7, r2]
    26c0:	4798      	blx	r3
	return node->next;
    26c2:	6824      	ldr	r4, [r4, #0]
    26c4:	e7ea      	b.n	269c <pm_state_notify+0x24>
    26c6:	bf00      	nop
    26c8:	20000914 	.word	0x20000914
    26cc:	20000908 	.word	0x20000908
    26d0:	20000be4 	.word	0x20000be4

000026d4 <pm_system_resume>:

void pm_system_resume(void)
{
    26d4:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    26d6:	4b19      	ldr	r3, [pc, #100]	; (273c <pm_system_resume+0x68>)
    26d8:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    26da:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    26de:	f004 031f 	and.w	r3, r4, #31
    26e2:	2201      	movs	r2, #1
    26e4:	409a      	lsls	r2, r3
    26e6:	4b16      	ldr	r3, [pc, #88]	; (2740 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    26e8:	0961      	lsrs	r1, r4, #5
    26ea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    26ee:	43d0      	mvns	r0, r2
    26f0:	e853 1f00 	ldrex	r1, [r3]
    26f4:	ea01 0500 	and.w	r5, r1, r0
    26f8:	e843 5600 	strex	r6, r5, [r3]
    26fc:	2e00      	cmp	r6, #0
    26fe:	d1f7      	bne.n	26f0 <pm_system_resume+0x1c>
    2700:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2704:	420a      	tst	r2, r1
    2706:	d013      	beq.n	2730 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    2708:	4b0e      	ldr	r3, [pc, #56]	; (2744 <pm_system_resume+0x70>)
    270a:	4d0f      	ldr	r5, [pc, #60]	; (2748 <pm_system_resume+0x74>)
    270c:	b18b      	cbz	r3, 2732 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    270e:	230c      	movs	r3, #12
    2710:	4363      	muls	r3, r4
    2712:	18ea      	adds	r2, r5, r3
    2714:	5ce8      	ldrb	r0, [r5, r3]
    2716:	7851      	ldrb	r1, [r2, #1]
    2718:	f005 ff26 	bl	8568 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    271c:	2000      	movs	r0, #0
    271e:	f7ff ffab 	bl	2678 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2722:	230c      	movs	r3, #12
    2724:	435c      	muls	r4, r3
    2726:	192a      	adds	r2, r5, r4
    2728:	2300      	movs	r3, #0
    272a:	512b      	str	r3, [r5, r4]
    272c:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    2730:	bd70      	pop	{r4, r5, r6, pc}
    2732:	f383 8811 	msr	BASEPRI, r3
    2736:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    273a:	e7ef      	b.n	271c <pm_system_resume+0x48>
    273c:	20000be4 	.word	0x20000be4
    2740:	2000091c 	.word	0x2000091c
    2744:	00008569 	.word	0x00008569
    2748:	20000908 	.word	0x20000908

0000274c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    274c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    2750:	4b35      	ldr	r3, [pc, #212]	; (2828 <pm_system_suspend+0xdc>)
{
    2752:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    2754:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    2756:	f04f 0340 	mov.w	r3, #64	; 0x40
    275a:	f3ef 8811 	mrs	r8, BASEPRI
    275e:	f383 8812 	msr	BASEPRI_MAX, r3
    2762:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    2766:	240c      	movs	r4, #12
    2768:	4b30      	ldr	r3, [pc, #192]	; (282c <pm_system_suspend+0xe0>)
    276a:	4e31      	ldr	r6, [pc, #196]	; (2830 <pm_system_suspend+0xe4>)
    276c:	436c      	muls	r4, r5
    276e:	191a      	adds	r2, r3, r4
    2770:	5d19      	ldrb	r1, [r3, r4]
    2772:	2900      	cmp	r1, #0
    2774:	d04c      	beq.n	2810 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    2776:	ca07      	ldmia	r2, {r0, r1, r2}
    2778:	eb06 0c04 	add.w	ip, r6, r4
    277c:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    2780:	2200      	movs	r2, #0
    2782:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    2784:	f388 8811 	msr	BASEPRI, r8
    2788:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    278c:	230c      	movs	r3, #12
    278e:	436b      	muls	r3, r5
    2790:	18f2      	adds	r2, r6, r3
    2792:	5cf0      	ldrb	r0, [r6, r3]
    2794:	2800      	cmp	r0, #0
    2796:	d039      	beq.n	280c <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    2798:	1c7b      	adds	r3, r7, #1
    279a:	d010      	beq.n	27be <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
    279c:	f8d2 c008 	ldr.w	ip, [r2, #8]
    27a0:	4c24      	ldr	r4, [pc, #144]	; (2834 <pm_system_suspend+0xe8>)
    27a2:	4a25      	ldr	r2, [pc, #148]	; (2838 <pm_system_suspend+0xec>)
    27a4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    27a8:	2100      	movs	r1, #0
    27aa:	fbec 4100 	umlal	r4, r1, ip, r0
    27ae:	2300      	movs	r3, #0
    27b0:	4620      	mov	r0, r4
    27b2:	f7fd fc95 	bl	e0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    27b6:	2101      	movs	r1, #1
    27b8:	1a38      	subs	r0, r7, r0
    27ba:	f001 ff99 	bl	46f0 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    27be:	f004 fddb 	bl	7378 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    27c2:	2001      	movs	r0, #1
    27c4:	f7ff ff58 	bl	2678 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    27c8:	f3bf 8f5b 	dmb	ish
    27cc:	4b1b      	ldr	r3, [pc, #108]	; (283c <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    27ce:	096a      	lsrs	r2, r5, #5
    27d0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    27d4:	f005 011f 	and.w	r1, r5, #31
    27d8:	2201      	movs	r2, #1
    27da:	408a      	lsls	r2, r1
    27dc:	e853 0f00 	ldrex	r0, [r3]
    27e0:	4310      	orrs	r0, r2
    27e2:	e843 0100 	strex	r1, r0, [r3]
    27e6:	2900      	cmp	r1, #0
    27e8:	d1f8      	bne.n	27dc <pm_system_suspend+0x90>
    27ea:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    27ee:	4b14      	ldr	r3, [pc, #80]	; (2840 <pm_system_suspend+0xf4>)
    27f0:	b13b      	cbz	r3, 2802 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    27f2:	230c      	movs	r3, #12
    27f4:	fb03 f005 	mul.w	r0, r3, r5
    27f8:	1833      	adds	r3, r6, r0
    27fa:	5c30      	ldrb	r0, [r6, r0]
    27fc:	7859      	ldrb	r1, [r3, #1]
    27fe:	f005 fea7 	bl	8550 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    2802:	f7ff ff67 	bl	26d4 <pm_system_resume>
	k_sched_unlock();
    2806:	f004 fdcb 	bl	73a0 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    280a:	2001      	movs	r0, #1
}
    280c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    2810:	4601      	mov	r1, r0
    2812:	4628      	mov	r0, r5
    2814:	f000 f816 	bl	2844 <pm_policy_next_state>
		if (info != NULL) {
    2818:	2800      	cmp	r0, #0
    281a:	d0b3      	beq.n	2784 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    281c:	c807      	ldmia	r0, {r0, r1, r2}
    281e:	4434      	add	r4, r6
    2820:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    2824:	e7ae      	b.n	2784 <pm_system_suspend+0x38>
    2826:	bf00      	nop
    2828:	20000be4 	.word	0x20000be4
    282c:	200008fc 	.word	0x200008fc
    2830:	20000908 	.word	0x20000908
    2834:	000f423f 	.word	0x000f423f
    2838:	000f4240 	.word	0x000f4240
    283c:	2000091c 	.word	0x2000091c
    2840:	00008551 	.word	0x00008551

00002844 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    2844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2848:	b085      	sub	sp, #20
    284a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    284c:	a903      	add	r1, sp, #12
    284e:	f000 f843 	bl	28d8 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2852:	4b1e      	ldr	r3, [pc, #120]	; (28cc <pm_policy_next_state+0x88>)
    2854:	9d03      	ldr	r5, [sp, #12]
    2856:	f8d3 a000 	ldr.w	sl, [r3]
    285a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 28d0 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    285e:	1e43      	subs	r3, r0, #1
    2860:	b21b      	sxth	r3, r3
    2862:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2866:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2868:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    286c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    2870:	f04f 0b00 	mov.w	fp, #0
    2874:	b924      	cbnz	r4, 2880 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    2876:	46a1      	mov	r9, r4
}
    2878:	4648      	mov	r0, r9
    287a:	b005      	add	sp, #20
    287c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2880:	6868      	ldr	r0, [r5, #4]
    2882:	4a14      	ldr	r2, [pc, #80]	; (28d4 <pm_policy_next_state+0x90>)
    2884:	46c4      	mov	ip, r8
    2886:	4659      	mov	r1, fp
    2888:	fbe0 c107 	umlal	ip, r1, r0, r7
    288c:	2300      	movs	r3, #0
    288e:	4660      	mov	r0, ip
    2890:	f7fd fc26 	bl	e0 <__aeabi_uldivmod>
    2894:	9001      	str	r0, [sp, #4]
    2896:	68a8      	ldr	r0, [r5, #8]
    2898:	4a0e      	ldr	r2, [pc, #56]	; (28d4 <pm_policy_next_state+0x90>)
    289a:	46c4      	mov	ip, r8
    289c:	4659      	mov	r1, fp
    289e:	fbe0 c107 	umlal	ip, r1, r0, r7
    28a2:	2300      	movs	r3, #0
    28a4:	4660      	mov	r0, ip
    28a6:	f7fd fc1b 	bl	e0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    28aa:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    28ae:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    28b0:	d001      	beq.n	28b6 <pm_policy_next_state+0x72>
    28b2:	4582      	cmp	sl, r0
    28b4:	d905      	bls.n	28c2 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    28b6:	1c73      	adds	r3, r6, #1
    28b8:	d0de      	beq.n	2878 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    28ba:	9b01      	ldr	r3, [sp, #4]
    28bc:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    28be:	42b0      	cmp	r0, r6
    28c0:	d9da      	bls.n	2878 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    28c2:	3c01      	subs	r4, #1
    28c4:	b2a4      	uxth	r4, r4
    28c6:	3d0c      	subs	r5, #12
    28c8:	e7d4      	b.n	2874 <pm_policy_next_state+0x30>
    28ca:	bf00      	nop
    28cc:	20000038 	.word	0x20000038
    28d0:	000f423f 	.word	0x000f423f
    28d4:	000f4240 	.word	0x000f4240

000028d8 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    28d8:	b908      	cbnz	r0, 28de <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    28da:	4b02      	ldr	r3, [pc, #8]	; (28e4 <pm_state_cpu_get_all+0xc>)
    28dc:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    28de:	2000      	movs	r0, #0
    28e0:	4770      	bx	lr
    28e2:	bf00      	nop
    28e4:	00009400 	.word	0x00009400

000028e8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    28e8:	4901      	ldr	r1, [pc, #4]	; (28f0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    28ea:	2210      	movs	r2, #16
	str	r2, [r1]
    28ec:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    28ee:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    28f0:	e000ed10 	.word	0xe000ed10

000028f4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    28f4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    28f6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    28f8:	f380 8811 	msr	BASEPRI, r0
	isb
    28fc:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    2900:	f3bf 8f4f 	dsb	sy
    2904:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2906:	b662      	cpsie	i
	isb
    2908:	f3bf 8f6f 	isb	sy

	bx	lr
    290c:	4770      	bx	lr
    290e:	bf00      	nop

00002910 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2910:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2912:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2914:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    2918:	f3bf 8f4f 	dsb	sy
    291c:	bf20      	wfe

	msr	BASEPRI, r0
    291e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2922:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2924:	4770      	bx	lr
    2926:	bf00      	nop

00002928 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2928:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    292c:	4681      	mov	r9, r0
    292e:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    2930:	460c      	mov	r4, r1
    2932:	2900      	cmp	r1, #0
    2934:	d04c      	beq.n	29d0 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2936:	466e      	mov	r6, sp
    2938:	b08a      	sub	sp, #40	; 0x28
    293a:	e9d1 1200 	ldrd	r1, r2, [r1]
    293e:	68a3      	ldr	r3, [r4, #8]
    2940:	466d      	mov	r5, sp
    2942:	4827      	ldr	r0, [pc, #156]	; (29e0 <z_arm_fatal_error+0xb8>)
    2944:	46a8      	mov	r8, r5
    2946:	f04f 0a05 	mov.w	sl, #5
    294a:	e9c5 0105 	strd	r0, r1, [r5, #20]
    294e:	e9c5 2307 	strd	r2, r3, [r5, #28]
    2952:	f848 af10 	str.w	sl, [r8, #16]!
    2956:	4823      	ldr	r0, [pc, #140]	; (29e4 <z_arm_fatal_error+0xbc>)
    2958:	4642      	mov	r2, r8
    295a:	2300      	movs	r3, #0
    295c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    2960:	f7ff fb52 	bl	2008 <z_impl_z_log_msg_static_create>
    2964:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2966:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    296a:	6963      	ldr	r3, [r4, #20]
    296c:	46ad      	mov	sp, r5
    296e:	481e      	ldr	r0, [pc, #120]	; (29e8 <z_arm_fatal_error+0xc0>)
    2970:	f8c5 a010 	str.w	sl, [r5, #16]
    2974:	e9c5 0105 	strd	r0, r1, [r5, #20]
    2978:	e9c5 2307 	strd	r2, r3, [r5, #28]
    297c:	4819      	ldr	r0, [pc, #100]	; (29e4 <z_arm_fatal_error+0xbc>)
    297e:	2300      	movs	r3, #0
    2980:	4642      	mov	r2, r8
    2982:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    2986:	f7ff fb3f 	bl	2008 <z_impl_z_log_msg_static_create>
    298a:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    298c:	b088      	sub	sp, #32
    298e:	69e3      	ldr	r3, [r4, #28]
    2990:	466d      	mov	r5, sp
    2992:	4a16      	ldr	r2, [pc, #88]	; (29ec <z_arm_fatal_error+0xc4>)
    2994:	46a8      	mov	r8, r5
    2996:	f04f 0a03 	mov.w	sl, #3
    299a:	e9c5 2305 	strd	r2, r3, [r5, #20]
    299e:	f848 af10 	str.w	sl, [r8, #16]!
    29a2:	4810      	ldr	r0, [pc, #64]	; (29e4 <z_arm_fatal_error+0xbc>)
    29a4:	2300      	movs	r3, #0
    29a6:	4642      	mov	r2, r8
    29a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    29ac:	f7ff fb2c 	bl	2008 <z_impl_z_log_msg_static_create>
    29b0:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    29b2:	69a3      	ldr	r3, [r4, #24]
    29b4:	46ad      	mov	sp, r5
    29b6:	4a0e      	ldr	r2, [pc, #56]	; (29f0 <z_arm_fatal_error+0xc8>)
    29b8:	f8c5 a010 	str.w	sl, [r5, #16]
    29bc:	e9c5 2305 	strd	r2, r3, [r5, #20]
    29c0:	4808      	ldr	r0, [pc, #32]	; (29e4 <z_arm_fatal_error+0xbc>)
    29c2:	2300      	movs	r3, #0
    29c4:	4642      	mov	r2, r8
    29c6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    29ca:	f7ff fb1d 	bl	2008 <z_impl_z_log_msg_static_create>
    29ce:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    29d0:	4621      	mov	r1, r4
    29d2:	4648      	mov	r0, r9
    29d4:	f003 fe2a 	bl	662c <z_fatal_error>
}
    29d8:	46bd      	mov	sp, r7
    29da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    29de:	bf00      	nop
    29e0:	000098a0 	.word	0x000098a0
    29e4:	00009320 	.word	0x00009320
    29e8:	000098cf 	.word	0x000098cf
    29ec:	000098fe 	.word	0x000098fe
    29f0:	0000990d 	.word	0x0000990d

000029f4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    29f4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    29f6:	2800      	cmp	r0, #0
    29f8:	db07      	blt.n	2a0a <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    29fa:	4a04      	ldr	r2, [pc, #16]	; (2a0c <arch_irq_enable+0x18>)
    29fc:	0941      	lsrs	r1, r0, #5
    29fe:	2301      	movs	r3, #1
    2a00:	f000 001f 	and.w	r0, r0, #31
    2a04:	4083      	lsls	r3, r0
    2a06:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    2a0a:	4770      	bx	lr
    2a0c:	e000e100 	.word	0xe000e100

00002a10 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    2a10:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2a12:	2800      	cmp	r0, #0
    2a14:	db0c      	blt.n	2a30 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2a16:	0943      	lsrs	r3, r0, #5
    2a18:	4906      	ldr	r1, [pc, #24]	; (2a34 <arch_irq_disable+0x24>)
    2a1a:	f000 001f 	and.w	r0, r0, #31
    2a1e:	3320      	adds	r3, #32
    2a20:	2201      	movs	r2, #1
    2a22:	4082      	lsls	r2, r0
    2a24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2a28:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2a2c:	f3bf 8f6f 	isb	sy
}
    2a30:	4770      	bx	lr
    2a32:	bf00      	nop
    2a34:	e000e100 	.word	0xe000e100

00002a38 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2a38:	4b05      	ldr	r3, [pc, #20]	; (2a50 <arch_irq_is_enabled+0x18>)
    2a3a:	0942      	lsrs	r2, r0, #5
    2a3c:	f000 001f 	and.w	r0, r0, #31
    2a40:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2a44:	2301      	movs	r3, #1
    2a46:	fa03 f000 	lsl.w	r0, r3, r0
}
    2a4a:	4010      	ands	r0, r2
    2a4c:	4770      	bx	lr
    2a4e:	bf00      	nop
    2a50:	e000e100 	.word	0xe000e100

00002a54 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2a54:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
    2a56:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
    2a58:	bf54      	ite	pl
    2a5a:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
    2a5c:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2a5e:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a60:	bfac      	ite	ge
    2a62:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a66:	4a07      	ldrlt	r2, [pc, #28]	; (2a84 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a68:	ea4f 1341 	mov.w	r3, r1, lsl #5
    2a6c:	bfac      	ite	ge
    2a6e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a72:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a76:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a78:	bfb4      	ite	lt
    2a7a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2a7c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
    2a80:	4770      	bx	lr
    2a82:	bf00      	nop
    2a84:	e000ed14 	.word	0xe000ed14

00002a88 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    2a88:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    2a8a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    2a8c:	4b04      	ldr	r3, [pc, #16]	; (2aa0 <_arch_isr_direct_pm+0x18>)
    2a8e:	695a      	ldr	r2, [r3, #20]
    2a90:	b11a      	cbz	r2, 2a9a <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    2a92:	2200      	movs	r2, #0
    2a94:	615a      	str	r2, [r3, #20]
		z_pm_save_idle_exit();
    2a96:	f006 f8d4 	bl	8c42 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    2a9a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    2a9c:	bd08      	pop	{r3, pc}
    2a9e:	bf00      	nop
    2aa0:	20000be4 	.word	0x20000be4

00002aa4 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2aa4:	bf30      	wfi
    b z_SysNmiOnReset
    2aa6:	f7ff bffd 	b.w	2aa4 <z_SysNmiOnReset>
    2aaa:	bf00      	nop

00002aac <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2aac:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2aae:	4b08      	ldr	r3, [pc, #32]	; (2ad0 <z_arm_prep_c+0x24>)
    2ab0:	4a08      	ldr	r2, [pc, #32]	; (2ad4 <z_arm_prep_c+0x28>)
    2ab2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    2ab6:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2ab8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2abc:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2ac0:	f003 fe70 	bl	67a4 <z_bss_zero>
	z_data_copy();
    2ac4:	f004 fda4 	bl	7610 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2ac8:	f000 fbaa 	bl	3220 <z_arm_interrupt_init>
	z_cstart();
    2acc:	f003 feae 	bl	682c <z_cstart>
    2ad0:	00000000 	.word	0x00000000
    2ad4:	e000ed00 	.word	0xe000ed00

00002ad8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2ad8:	4a09      	ldr	r2, [pc, #36]	; (2b00 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2ada:	490a      	ldr	r1, [pc, #40]	; (2b04 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2adc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2ade:	6809      	ldr	r1, [r1, #0]
    2ae0:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2ae2:	4909      	ldr	r1, [pc, #36]	; (2b08 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2ae4:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2ae6:	684b      	ldr	r3, [r1, #4]
    2ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2aec:	604b      	str	r3, [r1, #4]
    2aee:	2300      	movs	r3, #0
    2af0:	f383 8811 	msr	BASEPRI, r3
    2af4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2af8:	6893      	ldr	r3, [r2, #8]
}
    2afa:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    2afc:	4770      	bx	lr
    2afe:	bf00      	nop
    2b00:	20000be4 	.word	0x20000be4
    2b04:	00009544 	.word	0x00009544
    2b08:	e000ed00 	.word	0xe000ed00

00002b0c <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2b0c:	4912      	ldr	r1, [pc, #72]	; (2b58 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2b0e:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2b10:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2b14:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2b16:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2b1a:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2b1e:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
    2b20:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2b24:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2b28:	4f0c      	ldr	r7, [pc, #48]	; (2b5c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2b2a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2b2e:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    2b30:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2b32:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2b34:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    2b36:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2b38:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2b3a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2b3e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2b40:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2b42:	f000 fc09 	bl	3358 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2b46:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2b4a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2b4e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2b52:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2b56:	4770      	bx	lr
    ldr r1, =_kernel
    2b58:	20000be4 	.word	0x20000be4
    ldr v4, =_SCS_ICSR
    2b5c:	e000ed04 	.word	0xe000ed04

00002b60 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2b60:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2b64:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2b66:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2b6a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2b6e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2b70:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2b74:	2902      	cmp	r1, #2
    beq _oops
    2b76:	d0ff      	beq.n	2b78 <_oops>

00002b78 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2b78:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    2b7a:	f005 fc98 	bl	84ae <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    2b7e:	bd01      	pop	{r0, pc}

00002b80 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2b80:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2b84:	9b00      	ldr	r3, [sp, #0]
    2b86:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2b8a:	490a      	ldr	r1, [pc, #40]	; (2bb4 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2b8c:	9b01      	ldr	r3, [sp, #4]
    2b8e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2b92:	9b02      	ldr	r3, [sp, #8]
    2b94:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2b98:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2b9c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2ba0:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2ba4:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2ba8:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2baa:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2bac:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2bae:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2bb0:	4770      	bx	lr
    2bb2:	bf00      	nop
    2bb4:	00007bc3 	.word	0x00007bc3

00002bb8 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2bb8:	4a09      	ldr	r2, [pc, #36]	; (2be0 <z_check_thread_stack_fail+0x28>)
{
    2bba:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    2bbc:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    2bbe:	b170      	cbz	r0, 2bde <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2bc0:	f113 0f16 	cmn.w	r3, #22
    2bc4:	6e80      	ldr	r0, [r0, #104]	; 0x68
    2bc6:	d005      	beq.n	2bd4 <z_check_thread_stack_fail+0x1c>
    2bc8:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    2bcc:	429a      	cmp	r2, r3
    2bce:	d805      	bhi.n	2bdc <z_check_thread_stack_fail+0x24>
    2bd0:	4283      	cmp	r3, r0
    2bd2:	d203      	bcs.n	2bdc <z_check_thread_stack_fail+0x24>
		return 0;
    2bd4:	4281      	cmp	r1, r0
    2bd6:	bf28      	it	cs
    2bd8:	2000      	movcs	r0, #0
    2bda:	4770      	bx	lr
    2bdc:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    2bde:	4770      	bx	lr
    2be0:	20000be4 	.word	0x20000be4

00002be4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2be4:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2be6:	4b09      	ldr	r3, [pc, #36]	; (2c0c <arch_switch_to_main_thread+0x28>)
{
    2be8:	460d      	mov	r5, r1
    2bea:	4614      	mov	r4, r2
	_current = main_thread;
    2bec:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2bee:	f000 fbb3 	bl	3358 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2bf2:	4620      	mov	r0, r4
    2bf4:	f385 8809 	msr	PSP, r5
    2bf8:	2100      	movs	r1, #0
    2bfa:	b663      	cpsie	if
    2bfc:	f381 8811 	msr	BASEPRI, r1
    2c00:	f3bf 8f6f 	isb	sy
    2c04:	2200      	movs	r2, #0
    2c06:	2300      	movs	r3, #0
    2c08:	f004 ffdb 	bl	7bc2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2c0c:	20000be4 	.word	0x20000be4

00002c10 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2c10:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2c12:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2c14:	4a0b      	ldr	r2, [pc, #44]	; (2c44 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2c16:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    2c18:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2c1a:	bf1e      	ittt	ne
	movne	r1, #0
    2c1c:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2c1e:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    2c20:	f006 f80f 	blne	8c42 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2c24:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2c26:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2c2a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2c2e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2c32:	4905      	ldr	r1, [pc, #20]	; (2c48 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2c34:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2c36:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2c38:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2c3a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2c3e:	4903      	ldr	r1, [pc, #12]	; (2c4c <_isr_wrapper+0x3c>)
	bx r1
    2c40:	4708      	bx	r1
    2c42:	0000      	.short	0x0000
	ldr r2, =_kernel
    2c44:	20000be4 	.word	0x20000be4
	ldr r1, =_sw_isr_table
    2c48:	0000914c 	.word	0x0000914c
	ldr r1, =z_arm_int_exit
    2c4c:	00002c51 	.word	0x00002c51

00002c50 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2c50:	4b04      	ldr	r3, [pc, #16]	; (2c64 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2c52:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2c54:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    2c56:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2c58:	d003      	beq.n	2c62 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2c5a:	4903      	ldr	r1, [pc, #12]	; (2c68 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2c5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2c60:	600a      	str	r2, [r1, #0]

00002c62 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2c62:	4770      	bx	lr
	ldr r3, =_kernel
    2c64:	20000be4 	.word	0x20000be4
	ldr r1, =_SCS_ICSR
    2c68:	e000ed04 	.word	0xe000ed04

00002c6c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2c6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2c70:	b086      	sub	sp, #24
    2c72:	4606      	mov	r6, r0
    2c74:	af00      	add	r7, sp, #0
    2c76:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    2c78:	4b3f      	ldr	r3, [pc, #252]	; (2d78 <bus_fault.constprop.0+0x10c>)
    2c7a:	617b      	str	r3, [r7, #20]
    2c7c:	2402      	movs	r4, #2
    2c7e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2c82:	483e      	ldr	r0, [pc, #248]	; (2d7c <bus_fault.constprop.0+0x110>)
    2c84:	613c      	str	r4, [r7, #16]
    2c86:	f107 0210 	add.w	r2, r7, #16
    2c8a:	f005 fc1f 	bl	84cc <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2c8e:	4b3c      	ldr	r3, [pc, #240]	; (2d80 <bus_fault.constprop.0+0x114>)
    2c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2c92:	04d9      	lsls	r1, r3, #19
    2c94:	d56d      	bpl.n	2d72 <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    2c96:	4b3b      	ldr	r3, [pc, #236]	; (2d84 <bus_fault.constprop.0+0x118>)
    2c98:	4838      	ldr	r0, [pc, #224]	; (2d7c <bus_fault.constprop.0+0x110>)
    2c9a:	e9c7 4304 	strd	r4, r3, [r7, #16]
    2c9e:	f107 0210 	add.w	r2, r7, #16
    2ca2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2ca6:	f005 fc11 	bl	84cc <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    2caa:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2cac:	4b34      	ldr	r3, [pc, #208]	; (2d80 <bus_fault.constprop.0+0x114>)
    2cae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2cb0:	051a      	lsls	r2, r3, #20
    2cb2:	d50b      	bpl.n	2ccc <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    2cb4:	4b34      	ldr	r3, [pc, #208]	; (2d88 <bus_fault.constprop.0+0x11c>)
    2cb6:	617b      	str	r3, [r7, #20]
    2cb8:	2302      	movs	r3, #2
    2cba:	4830      	ldr	r0, [pc, #192]	; (2d7c <bus_fault.constprop.0+0x110>)
    2cbc:	613b      	str	r3, [r7, #16]
    2cbe:	f107 0210 	add.w	r2, r7, #16
    2cc2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2cc6:	f005 fc01 	bl	84cc <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    2cca:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2ccc:	4c2c      	ldr	r4, [pc, #176]	; (2d80 <bus_fault.constprop.0+0x114>)
    2cce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2cd0:	059b      	lsls	r3, r3, #22
    2cd2:	d523      	bpl.n	2d1c <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    2cd4:	46e8      	mov	r8, sp
    2cd6:	4b2d      	ldr	r3, [pc, #180]	; (2d8c <bus_fault.constprop.0+0x120>)
    2cd8:	617b      	str	r3, [r7, #20]
    2cda:	2302      	movs	r3, #2
    2cdc:	613b      	str	r3, [r7, #16]
    2cde:	f107 0210 	add.w	r2, r7, #16
    2ce2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2ce6:	4825      	ldr	r0, [pc, #148]	; (2d7c <bus_fault.constprop.0+0x110>)
    2ce8:	f005 fbf0 	bl	84cc <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2cec:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2cee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2cf0:	0411      	lsls	r1, r2, #16
    2cf2:	d512      	bpl.n	2d1a <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2cf4:	b088      	sub	sp, #32
    2cf6:	466a      	mov	r2, sp
    2cf8:	4925      	ldr	r1, [pc, #148]	; (2d90 <bus_fault.constprop.0+0x124>)
    2cfa:	4820      	ldr	r0, [pc, #128]	; (2d7c <bus_fault.constprop.0+0x110>)
    2cfc:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2d00:	2303      	movs	r3, #3
    2d02:	f842 3f10 	str.w	r3, [r2, #16]!
    2d06:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2d0a:	f005 fbdf 	bl	84cc <z_log_msg_static_create.constprop.0>
    2d0e:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    2d10:	b11e      	cbz	r6, 2d1a <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2d12:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2d14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2d18:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    2d1a:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2d1c:	4b18      	ldr	r3, [pc, #96]	; (2d80 <bus_fault.constprop.0+0x114>)
    2d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d20:	055a      	lsls	r2, r3, #21
    2d22:	d50b      	bpl.n	2d3c <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    2d24:	4b1b      	ldr	r3, [pc, #108]	; (2d94 <bus_fault.constprop.0+0x128>)
    2d26:	617b      	str	r3, [r7, #20]
    2d28:	2302      	movs	r3, #2
    2d2a:	4814      	ldr	r0, [pc, #80]	; (2d7c <bus_fault.constprop.0+0x110>)
    2d2c:	613b      	str	r3, [r7, #16]
    2d2e:	f107 0210 	add.w	r2, r7, #16
    2d32:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2d36:	f005 fbc9 	bl	84cc <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    2d3a:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2d3c:	4b10      	ldr	r3, [pc, #64]	; (2d80 <bus_fault.constprop.0+0x114>)
    2d3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d40:	05db      	lsls	r3, r3, #23
    2d42:	d50b      	bpl.n	2d5c <bus_fault.constprop.0+0xf0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    2d44:	4b14      	ldr	r3, [pc, #80]	; (2d98 <bus_fault.constprop.0+0x12c>)
    2d46:	617b      	str	r3, [r7, #20]
    2d48:	2302      	movs	r3, #2
    2d4a:	480c      	ldr	r0, [pc, #48]	; (2d7c <bus_fault.constprop.0+0x110>)
    2d4c:	613b      	str	r3, [r7, #16]
    2d4e:	f107 0210 	add.w	r2, r7, #16
    2d52:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2d56:	f005 fbb9 	bl	84cc <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    2d5a:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2d5c:	4a08      	ldr	r2, [pc, #32]	; (2d80 <bus_fault.constprop.0+0x114>)
    2d5e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2d60:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    2d64:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    2d66:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    2d68:	2300      	movs	r3, #0
    2d6a:	702b      	strb	r3, [r5, #0]
}
    2d6c:	46bd      	mov	sp, r7
    2d6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    2d72:	2016      	movs	r0, #22
    2d74:	e79a      	b.n	2cac <bus_fault.constprop.0+0x40>
    2d76:	bf00      	nop
    2d78:	0000993b 	.word	0x0000993b
    2d7c:	00009320 	.word	0x00009320
    2d80:	e000ed00 	.word	0xe000ed00
    2d84:	00009951 	.word	0x00009951
    2d88:	00009962 	.word	0x00009962
    2d8c:	00009975 	.word	0x00009975
    2d90:	0000998e 	.word	0x0000998e
    2d94:	000099a3 	.word	0x000099a3
    2d98:	000099be 	.word	0x000099be

00002d9c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2d9c:	b510      	push	{r4, lr}
    2d9e:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    2da0:	4b36      	ldr	r3, [pc, #216]	; (2e7c <usage_fault.constprop.0+0xe0>)
    2da2:	4837      	ldr	r0, [pc, #220]	; (2e80 <usage_fault.constprop.0+0xe4>)
    2da4:	9305      	str	r3, [sp, #20]
    2da6:	aa04      	add	r2, sp, #16
    2da8:	2402      	movs	r4, #2
    2daa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2dae:	9404      	str	r4, [sp, #16]
    2db0:	f005 fb8c 	bl	84cc <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2db4:	4b33      	ldr	r3, [pc, #204]	; (2e84 <usage_fault.constprop.0+0xe8>)
    2db6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2db8:	019a      	lsls	r2, r3, #6
    2dba:	d55d      	bpl.n	2e78 <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    2dbc:	4b32      	ldr	r3, [pc, #200]	; (2e88 <usage_fault.constprop.0+0xec>)
    2dbe:	4830      	ldr	r0, [pc, #192]	; (2e80 <usage_fault.constprop.0+0xe4>)
    2dc0:	aa04      	add	r2, sp, #16
    2dc2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2dc6:	e9cd 4304 	strd	r4, r3, [sp, #16]
    2dca:	f005 fb7f 	bl	84cc <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    2dce:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2dd0:	4b2c      	ldr	r3, [pc, #176]	; (2e84 <usage_fault.constprop.0+0xe8>)
    2dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2dd4:	01db      	lsls	r3, r3, #7
    2dd6:	d50a      	bpl.n	2dee <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    2dd8:	4b2c      	ldr	r3, [pc, #176]	; (2e8c <usage_fault.constprop.0+0xf0>)
    2dda:	4829      	ldr	r0, [pc, #164]	; (2e80 <usage_fault.constprop.0+0xe4>)
    2ddc:	9305      	str	r3, [sp, #20]
    2dde:	aa04      	add	r2, sp, #16
    2de0:	2302      	movs	r3, #2
    2de2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2de6:	9304      	str	r3, [sp, #16]
    2de8:	f005 fb70 	bl	84cc <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    2dec:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2dee:	4b25      	ldr	r3, [pc, #148]	; (2e84 <usage_fault.constprop.0+0xe8>)
    2df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2df2:	031c      	lsls	r4, r3, #12
    2df4:	d50a      	bpl.n	2e0c <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    2df6:	4b26      	ldr	r3, [pc, #152]	; (2e90 <usage_fault.constprop.0+0xf4>)
    2df8:	4821      	ldr	r0, [pc, #132]	; (2e80 <usage_fault.constprop.0+0xe4>)
    2dfa:	9305      	str	r3, [sp, #20]
    2dfc:	aa04      	add	r2, sp, #16
    2dfe:	2302      	movs	r3, #2
    2e00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2e04:	9304      	str	r3, [sp, #16]
    2e06:	f005 fb61 	bl	84cc <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    2e0a:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2e0c:	4b1d      	ldr	r3, [pc, #116]	; (2e84 <usage_fault.constprop.0+0xe8>)
    2e0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e10:	0359      	lsls	r1, r3, #13
    2e12:	d50a      	bpl.n	2e2a <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2e14:	4b1f      	ldr	r3, [pc, #124]	; (2e94 <usage_fault.constprop.0+0xf8>)
    2e16:	481a      	ldr	r0, [pc, #104]	; (2e80 <usage_fault.constprop.0+0xe4>)
    2e18:	9305      	str	r3, [sp, #20]
    2e1a:	aa04      	add	r2, sp, #16
    2e1c:	2302      	movs	r3, #2
    2e1e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2e22:	9304      	str	r3, [sp, #16]
    2e24:	f005 fb52 	bl	84cc <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    2e28:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2e2a:	4b16      	ldr	r3, [pc, #88]	; (2e84 <usage_fault.constprop.0+0xe8>)
    2e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e2e:	039a      	lsls	r2, r3, #14
    2e30:	d50a      	bpl.n	2e48 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2e32:	4b19      	ldr	r3, [pc, #100]	; (2e98 <usage_fault.constprop.0+0xfc>)
    2e34:	4812      	ldr	r0, [pc, #72]	; (2e80 <usage_fault.constprop.0+0xe4>)
    2e36:	9305      	str	r3, [sp, #20]
    2e38:	aa04      	add	r2, sp, #16
    2e3a:	2302      	movs	r3, #2
    2e3c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2e40:	9304      	str	r3, [sp, #16]
    2e42:	f005 fb43 	bl	84cc <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    2e46:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2e48:	4b0e      	ldr	r3, [pc, #56]	; (2e84 <usage_fault.constprop.0+0xe8>)
    2e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e4c:	03db      	lsls	r3, r3, #15
    2e4e:	d50a      	bpl.n	2e66 <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2e50:	4b12      	ldr	r3, [pc, #72]	; (2e9c <usage_fault.constprop.0+0x100>)
    2e52:	480b      	ldr	r0, [pc, #44]	; (2e80 <usage_fault.constprop.0+0xe4>)
    2e54:	9305      	str	r3, [sp, #20]
    2e56:	aa04      	add	r2, sp, #16
    2e58:	2302      	movs	r3, #2
    2e5a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2e5e:	9304      	str	r3, [sp, #16]
    2e60:	f005 fb34 	bl	84cc <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    2e64:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2e66:	4a07      	ldr	r2, [pc, #28]	; (2e84 <usage_fault.constprop.0+0xe8>)
    2e68:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2e6a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2e6e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    2e72:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    2e74:	b006      	add	sp, #24
    2e76:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    2e78:	201d      	movs	r0, #29
    2e7a:	e7a9      	b.n	2dd0 <usage_fault.constprop.0+0x34>
    2e7c:	000099d6 	.word	0x000099d6
    2e80:	00009320 	.word	0x00009320
    2e84:	e000ed00 	.word	0xe000ed00
    2e88:	000099ee 	.word	0x000099ee
    2e8c:	00009a01 	.word	0x00009a01
    2e90:	00009a1b 	.word	0x00009a1b
    2e94:	00009a39 	.word	0x00009a39
    2e98:	00009a5e 	.word	0x00009a5e
    2e9c:	00009a78 	.word	0x00009a78

00002ea0 <mem_manage_fault>:
{
    2ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2ea4:	b086      	sub	sp, #24
    2ea6:	4681      	mov	r9, r0
    2ea8:	af00      	add	r7, sp, #0
    2eaa:	468a      	mov	sl, r1
    2eac:	4690      	mov	r8, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    2eae:	4b45      	ldr	r3, [pc, #276]	; (2fc4 <mem_manage_fault+0x124>)
    2eb0:	4845      	ldr	r0, [pc, #276]	; (2fc8 <mem_manage_fault+0x128>)
    2eb2:	617b      	str	r3, [r7, #20]
    2eb4:	2402      	movs	r4, #2
    2eb6:	613c      	str	r4, [r7, #16]
    2eb8:	f107 0210 	add.w	r2, r7, #16
    2ebc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2ec0:	f005 fb04 	bl	84cc <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2ec4:	4b41      	ldr	r3, [pc, #260]	; (2fcc <mem_manage_fault+0x12c>)
    2ec6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ec8:	06d8      	lsls	r0, r3, #27
    2eca:	d545      	bpl.n	2f58 <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2ecc:	4b40      	ldr	r3, [pc, #256]	; (2fd0 <mem_manage_fault+0x130>)
    2ece:	483e      	ldr	r0, [pc, #248]	; (2fc8 <mem_manage_fault+0x128>)
    2ed0:	e9c7 4304 	strd	r4, r3, [r7, #16]
    2ed4:	f107 0210 	add.w	r2, r7, #16
    2ed8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_STACKING;
    2edc:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
    2ede:	f005 faf5 	bl	84cc <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2ee2:	4b3a      	ldr	r3, [pc, #232]	; (2fcc <mem_manage_fault+0x12c>)
    2ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ee6:	0719      	lsls	r1, r3, #28
    2ee8:	d50b      	bpl.n	2f02 <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
    2eea:	4b3a      	ldr	r3, [pc, #232]	; (2fd4 <mem_manage_fault+0x134>)
    2eec:	617b      	str	r3, [r7, #20]
    2eee:	2302      	movs	r3, #2
    2ef0:	4835      	ldr	r0, [pc, #212]	; (2fc8 <mem_manage_fault+0x128>)
    2ef2:	613b      	str	r3, [r7, #16]
    2ef4:	f107 0210 	add.w	r2, r7, #16
    2ef8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_UNSTACKING;
    2efc:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
    2efe:	f005 fae5 	bl	84cc <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2f02:	4d32      	ldr	r5, [pc, #200]	; (2fcc <mem_manage_fault+0x12c>)
    2f04:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2f06:	079a      	lsls	r2, r3, #30
    2f08:	d528      	bpl.n	2f5c <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
    2f0a:	466c      	mov	r4, sp
    2f0c:	4b32      	ldr	r3, [pc, #200]	; (2fd8 <mem_manage_fault+0x138>)
    2f0e:	617b      	str	r3, [r7, #20]
    2f10:	2302      	movs	r3, #2
    2f12:	613b      	str	r3, [r7, #16]
    2f14:	482c      	ldr	r0, [pc, #176]	; (2fc8 <mem_manage_fault+0x128>)
    2f16:	f107 0210 	add.w	r2, r7, #16
    2f1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f1e:	f005 fad5 	bl	84cc <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    2f22:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2f24:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2f26:	061b      	lsls	r3, r3, #24
    2f28:	d549      	bpl.n	2fbe <mem_manage_fault+0x11e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2f2a:	b088      	sub	sp, #32
    2f2c:	466a      	mov	r2, sp
    2f2e:	4b2b      	ldr	r3, [pc, #172]	; (2fdc <mem_manage_fault+0x13c>)
    2f30:	4825      	ldr	r0, [pc, #148]	; (2fc8 <mem_manage_fault+0x128>)
    2f32:	e9c2 3605 	strd	r3, r6, [r2, #20]
    2f36:	2303      	movs	r3, #3
    2f38:	f842 3f10 	str.w	r3, [r2, #16]!
    2f3c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2f40:	f005 fac4 	bl	84cc <z_log_msg_static_create.constprop.0>
    2f44:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
    2f46:	f1ba 0f00 	cmp.w	sl, #0
    2f4a:	d003      	beq.n	2f54 <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2f4c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    2f4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2f52:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    2f54:	2413      	movs	r4, #19
    2f56:	e003      	b.n	2f60 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    2f58:	2410      	movs	r4, #16
    2f5a:	e7c2      	b.n	2ee2 <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
    2f5c:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2f60:	4b1a      	ldr	r3, [pc, #104]	; (2fcc <mem_manage_fault+0x12c>)
    2f62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f64:	07d8      	lsls	r0, r3, #31
    2f66:	d50b      	bpl.n	2f80 <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
    2f68:	4b1d      	ldr	r3, [pc, #116]	; (2fe0 <mem_manage_fault+0x140>)
    2f6a:	617b      	str	r3, [r7, #20]
    2f6c:	2302      	movs	r3, #2
    2f6e:	4816      	ldr	r0, [pc, #88]	; (2fc8 <mem_manage_fault+0x128>)
    2f70:	613b      	str	r3, [r7, #16]
    2f72:	f107 0210 	add.w	r2, r7, #16
    2f76:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    2f7a:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
    2f7c:	f005 faa6 	bl	84cc <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2f80:	4b12      	ldr	r3, [pc, #72]	; (2fcc <mem_manage_fault+0x12c>)
    2f82:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2f84:	06d1      	lsls	r1, r2, #27
    2f86:	d402      	bmi.n	2f8e <mem_manage_fault+0xee>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2f88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2f8a:	0792      	lsls	r2, r2, #30
    2f8c:	d50a      	bpl.n	2fa4 <mem_manage_fault+0x104>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2f8e:	685b      	ldr	r3, [r3, #4]
    2f90:	051b      	lsls	r3, r3, #20
    2f92:	d507      	bpl.n	2fa4 <mem_manage_fault+0x104>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2f94:	4649      	mov	r1, r9
    2f96:	4630      	mov	r0, r6
    2f98:	f7ff fe0e 	bl	2bb8 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2f9c:	b110      	cbz	r0, 2fa4 <mem_manage_fault+0x104>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2f9e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2fa2:	2402      	movs	r4, #2
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2fa4:	4a09      	ldr	r2, [pc, #36]	; (2fcc <mem_manage_fault+0x12c>)
    2fa6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2fa8:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2fac:	6293      	str	r3, [r2, #40]	; 0x28
}
    2fae:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
    2fb0:	2300      	movs	r3, #0
}
    2fb2:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    2fb4:	f888 3000 	strb.w	r3, [r8]
}
    2fb8:	46bd      	mov	sp, r7
    2fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
    2fbe:	f06f 0615 	mvn.w	r6, #21
    2fc2:	e7c7      	b.n	2f54 <mem_manage_fault+0xb4>
    2fc4:	00009aa3 	.word	0x00009aa3
    2fc8:	00009320 	.word	0x00009320
    2fcc:	e000ed00 	.word	0xe000ed00
    2fd0:	00009ab9 	.word	0x00009ab9
    2fd4:	00009962 	.word	0x00009962
    2fd8:	00009aec 	.word	0x00009aec
    2fdc:	00009b04 	.word	0x00009b04
    2fe0:	00009b1a 	.word	0x00009b1a

00002fe4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2fe4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2fe8:	4b77      	ldr	r3, [pc, #476]	; (31c8 <z_arm_fault+0x1e4>)
{
    2fea:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2fec:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    2ff0:	af00      	add	r7, sp, #0
    2ff2:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2ff4:	f3c8 0408 	ubfx	r4, r8, #0, #9
    2ff8:	2600      	movs	r6, #0
    2ffa:	f386 8811 	msr	BASEPRI, r6
    2ffe:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3002:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    3006:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    300a:	d10e      	bne.n	302a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    300c:	f002 030c 	and.w	r3, r2, #12
    3010:	2b08      	cmp	r3, #8
    3012:	d119      	bne.n	3048 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    3014:	4b6d      	ldr	r3, [pc, #436]	; (31cc <z_arm_fault+0x1e8>)
    3016:	61fb      	str	r3, [r7, #28]
    3018:	2302      	movs	r3, #2
    301a:	486d      	ldr	r0, [pc, #436]	; (31d0 <z_arm_fault+0x1ec>)
    301c:	61bb      	str	r3, [r7, #24]
    301e:	f107 0218 	add.w	r2, r7, #24
    3022:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3026:	f005 fa51 	bl	84cc <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
    302a:	2600      	movs	r6, #0
		return NULL;
    302c:	4635      	mov	r5, r6
	*recoverable = false;
    302e:	2300      	movs	r3, #0
    3030:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    3032:	1ee3      	subs	r3, r4, #3
    3034:	2b09      	cmp	r3, #9
    3036:	f200 80a6 	bhi.w	3186 <z_arm_fault+0x1a2>
    303a:	e8df f003 	tbb	[pc, r3]
    303e:	990a      	.short	0x990a
    3040:	a4a4959c 	.word	0xa4a4959c
    3044:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    3048:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    304a:	bf4c      	ite	mi
    304c:	460d      	movmi	r5, r1
			*nested_exc = true;
    304e:	2601      	movpl	r6, #1
    3050:	e7ed      	b.n	302e <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
    3052:	46e9      	mov	r9, sp
    3054:	4b5f      	ldr	r3, [pc, #380]	; (31d4 <z_arm_fault+0x1f0>)
    3056:	61fb      	str	r3, [r7, #28]
    3058:	f04f 0802 	mov.w	r8, #2
    305c:	f107 0218 	add.w	r2, r7, #24
    3060:	485b      	ldr	r0, [pc, #364]	; (31d0 <z_arm_fault+0x1ec>)
    3062:	f8c7 8018 	str.w	r8, [r7, #24]
    3066:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    306a:	f005 fa2f 	bl	84cc <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    306e:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3070:	4c55      	ldr	r4, [pc, #340]	; (31c8 <z_arm_fault+0x1e4>)
	*recoverable = false;
    3072:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3074:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3076:	079a      	lsls	r2, r3, #30
    3078:	d50b      	bpl.n	3092 <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
    307a:	4b57      	ldr	r3, [pc, #348]	; (31d8 <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
    307c:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
    3080:	4853      	ldr	r0, [pc, #332]	; (31d0 <z_arm_fault+0x1ec>)
    3082:	f107 0218 	add.w	r2, r7, #24
    3086:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    308a:	f005 fa1f 	bl	84cc <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    308e:	2400      	movs	r4, #0
    3090:	e041      	b.n	3116 <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3092:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    3094:	2b00      	cmp	r3, #0
    3096:	da01      	bge.n	309c <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
    3098:	4b50      	ldr	r3, [pc, #320]	; (31dc <z_arm_fault+0x1f8>)
    309a:	e7ef      	b.n	307c <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    309c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    309e:	005b      	lsls	r3, r3, #1
    30a0:	d5f5      	bpl.n	308e <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
    30a2:	4b4f      	ldr	r3, [pc, #316]	; (31e0 <z_arm_fault+0x1fc>)
    30a4:	484a      	ldr	r0, [pc, #296]	; (31d0 <z_arm_fault+0x1ec>)
    30a6:	e9c7 8306 	strd	r8, r3, [r7, #24]
    30aa:	f107 0218 	add.w	r2, r7, #24
    30ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    30b2:	f005 fa0b 	bl	84cc <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    30b6:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    30b8:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    30ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    30be:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    30c0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    30c4:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    30c8:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    30ca:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    30ce:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    30d2:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    30d4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    30d8:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    30dc:	f64d 7302 	movw	r3, #57090	; 0xdf02
    30e0:	429a      	cmp	r2, r3
    30e2:	d008      	beq.n	30f6 <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    30e4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    30e6:	b2db      	uxtb	r3, r3
    30e8:	b38b      	cbz	r3, 314e <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    30ea:	1dfa      	adds	r2, r7, #7
    30ec:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    30ee:	4628      	mov	r0, r5
    30f0:	f7ff fed6 	bl	2ea0 <mem_manage_fault>
    30f4:	e03a      	b.n	316c <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    30f6:	b088      	sub	sp, #32
    30f8:	682b      	ldr	r3, [r5, #0]
    30fa:	466a      	mov	r2, sp
    30fc:	4939      	ldr	r1, [pc, #228]	; (31e4 <z_arm_fault+0x200>)
    30fe:	4834      	ldr	r0, [pc, #208]	; (31d0 <z_arm_fault+0x1ec>)
    3100:	e9c2 1305 	strd	r1, r3, [r2, #20]
    3104:	2303      	movs	r3, #3
    3106:	f842 3f10 	str.w	r3, [r2, #16]!
    310a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    310e:	f005 f9dd 	bl	84cc <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
    3112:	682c      	ldr	r4, [r5, #0]
    3114:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3116:	79fb      	ldrb	r3, [r7, #7]
    3118:	b9ab      	cbnz	r3, 3146 <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    311a:	2220      	movs	r2, #32
    311c:	4629      	mov	r1, r5
    311e:	f107 0008 	add.w	r0, r7, #8
    3122:	f005 f9f0 	bl	8506 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3128:	2e00      	cmp	r6, #0
    312a:	d047      	beq.n	31bc <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    312c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3130:	b922      	cbnz	r2, 313c <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3132:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3136:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    313a:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    313c:	f107 0108 	add.w	r1, r7, #8
    3140:	4620      	mov	r0, r4
    3142:	f7ff fbf1 	bl	2928 <z_arm_fatal_error>
}
    3146:	372c      	adds	r7, #44	; 0x2c
    3148:	46bd      	mov	sp, r7
    314a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    314e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3150:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    3154:	d004      	beq.n	3160 <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
    3156:	1df9      	adds	r1, r7, #7
    3158:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    315a:	f7ff fd87 	bl	2c6c <bus_fault.constprop.0>
    315e:	e005      	b.n	316c <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    3160:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3162:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    3166:	d392      	bcc.n	308e <z_arm_fault+0xaa>
			reason = usage_fault(esf);
    3168:	f7ff fe18 	bl	2d9c <usage_fault.constprop.0>
    316c:	4604      	mov	r4, r0
    316e:	e7d2      	b.n	3116 <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
    3170:	1dfa      	adds	r2, r7, #7
    3172:	2100      	movs	r1, #0
    3174:	e7bb      	b.n	30ee <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
    3176:	1df9      	adds	r1, r7, #7
    3178:	2000      	movs	r0, #0
    317a:	e7ee      	b.n	315a <z_arm_fault+0x176>
	PR_FAULT_INFO(
    317c:	4b1a      	ldr	r3, [pc, #104]	; (31e8 <z_arm_fault+0x204>)
    317e:	61fb      	str	r3, [r7, #28]
    3180:	2302      	movs	r3, #2
    3182:	61bb      	str	r3, [r7, #24]
    3184:	e77c      	b.n	3080 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    3186:	4a19      	ldr	r2, [pc, #100]	; (31ec <z_arm_fault+0x208>)
    3188:	4b19      	ldr	r3, [pc, #100]	; (31f0 <z_arm_fault+0x20c>)
    318a:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    318e:	46e8      	mov	r8, sp
    3190:	b08a      	sub	sp, #40	; 0x28
    3192:	bf18      	it	ne
    3194:	4613      	movne	r3, r2
    3196:	466a      	mov	r2, sp
    3198:	4916      	ldr	r1, [pc, #88]	; (31f4 <z_arm_fault+0x210>)
    319a:	480d      	ldr	r0, [pc, #52]	; (31d0 <z_arm_fault+0x1ec>)
    319c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    31a0:	f44f 7300 	mov.w	r3, #512	; 0x200
    31a4:	8413      	strh	r3, [r2, #32]
    31a6:	3c10      	subs	r4, #16
    31a8:	4b13      	ldr	r3, [pc, #76]	; (31f8 <z_arm_fault+0x214>)
    31aa:	61d4      	str	r4, [r2, #28]
    31ac:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    31b0:	f842 3f10 	str.w	r3, [r2, #16]!
    31b4:	f005 f98a 	bl	84cc <z_log_msg_static_create.constprop.0>
    31b8:	46c5      	mov	sp, r8
}
    31ba:	e768      	b.n	308e <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    31bc:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    31c0:	f023 0301 	bic.w	r3, r3, #1
    31c4:	e7b9      	b.n	313a <z_arm_fault+0x156>
    31c6:	bf00      	nop
    31c8:	e000ed00 	.word	0xe000ed00
    31cc:	00009b67 	.word	0x00009b67
    31d0:	00009320 	.word	0x00009320
    31d4:	00009b92 	.word	0x00009b92
    31d8:	00009ba9 	.word	0x00009ba9
    31dc:	00009bca 	.word	0x00009bca
    31e0:	00009bd8 	.word	0x00009bd8
    31e4:	00009bf7 	.word	0x00009bf7
    31e8:	00009c13 	.word	0x00009c13
    31ec:	00009b4e 	.word	0x00009b4e
    31f0:	00009b39 	.word	0x00009b39
    31f4:	00009c37 	.word	0x00009c37
    31f8:	01000004 	.word	0x01000004

000031fc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    31fc:	4a02      	ldr	r2, [pc, #8]	; (3208 <z_arm_fault_init+0xc>)
    31fe:	6953      	ldr	r3, [r2, #20]
    3200:	f043 0310 	orr.w	r3, r3, #16
    3204:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    3206:	4770      	bx	lr
    3208:	e000ed00 	.word	0xe000ed00

0000320c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    320c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    3210:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    3214:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    3216:	4672      	mov	r2, lr
	bl z_arm_fault
    3218:	f7ff fee4 	bl	2fe4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    321c:	bd01      	pop	{r0, pc}
    321e:	bf00      	nop

00003220 <z_arm_interrupt_init>:
    3220:	4804      	ldr	r0, [pc, #16]	; (3234 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    3222:	2300      	movs	r3, #0
    3224:	2140      	movs	r1, #64	; 0x40
    3226:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    3228:	3301      	adds	r3, #1
    322a:	2b28      	cmp	r3, #40	; 0x28
    322c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    3230:	d1f9      	bne.n	3226 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    3232:	4770      	bx	lr
    3234:	e000e100 	.word	0xe000e100

00003238 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    3238:	2000      	movs	r0, #0
    msr CONTROL, r0
    323a:	f380 8814 	msr	CONTROL, r0
    isb
    323e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    3242:	f7fe fc49 	bl	1ad8 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    3246:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    3248:	490d      	ldr	r1, [pc, #52]	; (3280 <__start+0x48>)
    str r0, [r1]
    324a:	6008      	str	r0, [r1, #0]
    dsb
    324c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3250:	480c      	ldr	r0, [pc, #48]	; (3284 <__start+0x4c>)
    msr msp, r0
    3252:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    3256:	f000 f82b 	bl	32b0 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    325a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
    325c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3260:	4809      	ldr	r0, [pc, #36]	; (3288 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    3262:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    3266:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3268:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    326c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3270:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3272:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3274:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3278:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    327c:	f7ff fc16 	bl	2aac <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    3280:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3284:	20002400 	.word	0x20002400
    ldr r0, =z_interrupt_stacks
    3288:	20001680 	.word	0x20001680

0000328c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    328c:	4907      	ldr	r1, [pc, #28]	; (32ac <z_arm_clear_arm_mpu_config+0x20>)
    328e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    3292:	2300      	movs	r3, #0
	int num_regions =
    3294:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    3298:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    329a:	4293      	cmp	r3, r2
    329c:	db00      	blt.n	32a0 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    329e:	4770      	bx	lr
  MPU->RNR = rnr;
    32a0:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    32a4:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    32a8:	3301      	adds	r3, #1
    32aa:	e7f6      	b.n	329a <z_arm_clear_arm_mpu_config+0xe>
    32ac:	e000ed00 	.word	0xe000ed00

000032b0 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    32b0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    32b2:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    32b4:	2300      	movs	r3, #0
    32b6:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    32ba:	f7ff ffe7 	bl	328c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    32be:	4b14      	ldr	r3, [pc, #80]	; (3310 <z_arm_init_arch_hw_at_boot+0x60>)
    32c0:	f04f 32ff 	mov.w	r2, #4294967295
    32c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    32c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    32cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    32d0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    32d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    32d8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    32dc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    32e0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    32e4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    32e8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    32ec:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    32f0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    32f4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    32f8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    32fc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    3300:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    3304:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3306:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    330a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    330e:	bd08      	pop	{r3, pc}
    3310:	e000e100 	.word	0xe000e100

00003314 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    3314:	4b08      	ldr	r3, [pc, #32]	; (3338 <z_impl_k_thread_abort+0x24>)
    3316:	689b      	ldr	r3, [r3, #8]
    3318:	4283      	cmp	r3, r0
    331a:	d10b      	bne.n	3334 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    331c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    3320:	b143      	cbz	r3, 3334 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3322:	4b06      	ldr	r3, [pc, #24]	; (333c <z_impl_k_thread_abort+0x28>)
    3324:	685a      	ldr	r2, [r3, #4]
    3326:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    332a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    332c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    332e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    3332:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    3334:	f004 b8fa 	b.w	752c <z_thread_abort>
    3338:	20000be4 	.word	0x20000be4
    333c:	e000ed00 	.word	0xe000ed00

00003340 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    3340:	4b02      	ldr	r3, [pc, #8]	; (334c <z_arm_configure_static_mpu_regions+0xc>)
    3342:	4a03      	ldr	r2, [pc, #12]	; (3350 <z_arm_configure_static_mpu_regions+0x10>)
    3344:	4803      	ldr	r0, [pc, #12]	; (3354 <z_arm_configure_static_mpu_regions+0x14>)
    3346:	2101      	movs	r1, #1
    3348:	f000 b892 	b.w	3470 <arm_core_mpu_configure_static_mpu_regions>
    334c:	20008000 	.word	0x20008000
    3350:	20000000 	.word	0x20000000
    3354:	00009400 	.word	0x00009400

00003358 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3358:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    335a:	4b05      	ldr	r3, [pc, #20]	; (3370 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    335c:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    335e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3360:	4a04      	ldr	r2, [pc, #16]	; (3374 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    3362:	2140      	movs	r1, #64	; 0x40
    3364:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3368:	4618      	mov	r0, r3
    336a:	2101      	movs	r1, #1
    336c:	f000 b88a 	b.w	3484 <arm_core_mpu_configure_dynamic_mpu_regions>
    3370:	20000920 	.word	0x20000920
    3374:	150b0000 	.word	0x150b0000

00003378 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    337c:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 3434 <mpu_configure_regions+0xbc>
    3380:	469c      	mov	ip, r3
    3382:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
    3384:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    3386:	2300      	movs	r3, #0
    3388:	428b      	cmp	r3, r1
    338a:	da1a      	bge.n	33c2 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    338c:	6844      	ldr	r4, [r0, #4]
    338e:	2c00      	cmp	r4, #0
    3390:	d04d      	beq.n	342e <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    3392:	f1bc 0f00 	cmp.w	ip, #0
    3396:	d01d      	beq.n	33d4 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    3398:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    339a:	4234      	tst	r4, r6
    339c:	d015      	beq.n	33ca <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    339e:	466c      	mov	r4, sp
    33a0:	b088      	sub	sp, #32
    33a2:	466a      	mov	r2, sp
    33a4:	4924      	ldr	r1, [pc, #144]	; (3438 <mpu_configure_regions+0xc0>)
    33a6:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    33aa:	2303      	movs	r3, #3
    33ac:	f842 3f10 	str.w	r3, [r2, #16]!
    33b0:	4822      	ldr	r0, [pc, #136]	; (343c <mpu_configure_regions+0xc4>)
    33b2:	2300      	movs	r3, #0
    33b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    33b8:	f7fe fe26 	bl	2008 <z_impl_z_log_msg_static_create>
			return -EINVAL;
    33bc:	f06f 0515 	mvn.w	r5, #21
    33c0:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    33c2:	4628      	mov	r0, r5
    33c4:	46bd      	mov	sp, r7
    33c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
    33ca:	2c1f      	cmp	r4, #31
    33cc:	d9e7      	bls.n	339e <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
    33ce:	6802      	ldr	r2, [r0, #0]
		&&
    33d0:	4216      	tst	r6, r2
    33d2:	d1e4      	bne.n	339e <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    33d4:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    33d6:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    33d8:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    33da:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
    33de:	d914      	bls.n	340a <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
    33e0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    33e4:	d813      	bhi.n	340e <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    33e6:	3c01      	subs	r4, #1
    33e8:	fab4 f484 	clz	r4, r4
    33ec:	f1c4 041f 	rsb	r4, r4, #31
    33f0:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    33f2:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    33f6:	ea46 0604 	orr.w	r6, r6, r4
    33fa:	d90a      	bls.n	3412 <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    33fc:	466c      	mov	r4, sp
    33fe:	b088      	sub	sp, #32
    3400:	466a      	mov	r2, sp
    3402:	4b0f      	ldr	r3, [pc, #60]	; (3440 <mpu_configure_regions+0xc8>)
    3404:	e9c2 3505 	strd	r3, r5, [r2, #20]
    3408:	e7cf      	b.n	33aa <mpu_configure_regions+0x32>
		return REGION_32B;
    340a:	2408      	movs	r4, #8
    340c:	e7f1      	b.n	33f2 <mpu_configure_regions+0x7a>
		return REGION_4G;
    340e:	243e      	movs	r4, #62	; 0x3e
    3410:	e7ef      	b.n	33f2 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3412:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    3416:	432a      	orrs	r2, r5
    3418:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    341c:	f046 0601 	orr.w	r6, r6, #1
    3420:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3424:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
    3428:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    342a:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    342e:	3301      	adds	r3, #1
    3430:	300c      	adds	r0, #12
    3432:	e7a9      	b.n	3388 <mpu_configure_regions+0x10>
    3434:	e000ed00 	.word	0xe000ed00
    3438:	00009c4e 	.word	0x00009c4e
    343c:	00009310 	.word	0x00009310
    3440:	00009c71 	.word	0x00009c71

00003444 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    3444:	4b04      	ldr	r3, [pc, #16]	; (3458 <arm_core_mpu_enable+0x14>)
    3446:	2205      	movs	r2, #5
    3448:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    344c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3450:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    3454:	4770      	bx	lr
    3456:	bf00      	nop
    3458:	e000ed00 	.word	0xe000ed00

0000345c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    345c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3460:	4b02      	ldr	r3, [pc, #8]	; (346c <arm_core_mpu_disable+0x10>)
    3462:	2200      	movs	r2, #0
    3464:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    3468:	4770      	bx	lr
    346a:	bf00      	nop
    346c:	e000ed00 	.word	0xe000ed00

00003470 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3470:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3472:	4c03      	ldr	r4, [pc, #12]	; (3480 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3474:	2301      	movs	r3, #1
    3476:	7822      	ldrb	r2, [r4, #0]
    3478:	f7ff ff7e 	bl	3378 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    347c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    347e:	bd10      	pop	{r4, pc}
    3480:	20000c7c 	.word	0x20000c7c

00003484 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    3484:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3486:	4a09      	ldr	r2, [pc, #36]	; (34ac <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    3488:	2300      	movs	r3, #0
    348a:	7812      	ldrb	r2, [r2, #0]
    348c:	f7ff ff74 	bl	3378 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3490:	f110 0f16 	cmn.w	r0, #22
    3494:	d003      	beq.n	349e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    3496:	4b06      	ldr	r3, [pc, #24]	; (34b0 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    3498:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    349a:	2807      	cmp	r0, #7
    349c:	dd00      	ble.n	34a0 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    349e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    34a0:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    34a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    34a8:	3001      	adds	r0, #1
    34aa:	e7f6      	b.n	349a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    34ac:	20000c7c 	.word	0x20000c7c
    34b0:	e000ed00 	.word	0xe000ed00

000034b4 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    34b4:	4914      	ldr	r1, [pc, #80]	; (3508 <z_arm_mpu_init+0x54>)
    34b6:	6808      	ldr	r0, [r1, #0]
    34b8:	2808      	cmp	r0, #8
{
    34ba:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    34bc:	d821      	bhi.n	3502 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    34be:	f7ff ffcd 	bl	345c <arm_core_mpu_disable>
    34c2:	4c12      	ldr	r4, [pc, #72]	; (350c <z_arm_mpu_init+0x58>)
    34c4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    34c6:	2200      	movs	r2, #0
    34c8:	4290      	cmp	r0, r2
    34ca:	f101 010c 	add.w	r1, r1, #12
    34ce:	d105      	bne.n	34dc <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    34d0:	4b0f      	ldr	r3, [pc, #60]	; (3510 <z_arm_mpu_init+0x5c>)
    34d2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    34d4:	f7ff ffb6 	bl	3444 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    34d8:	2000      	movs	r0, #0
}
    34da:	bd10      	pop	{r4, pc}
    34dc:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    34e0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    34e4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    34e8:	4313      	orrs	r3, r2
    34ea:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    34ee:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    34f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
    34f6:	f043 0301 	orr.w	r3, r3, #1
    34fa:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    34fe:	3201      	adds	r2, #1
    3500:	e7e2      	b.n	34c8 <z_arm_mpu_init+0x14>
		return -1;
    3502:	f04f 30ff 	mov.w	r0, #4294967295
    3506:	e7e8      	b.n	34da <z_arm_mpu_init+0x26>
    3508:	0000940c 	.word	0x0000940c
    350c:	e000ed00 	.word	0xe000ed00
    3510:	20000c7c 	.word	0x20000c7c

00003514 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    3514:	4b01      	ldr	r3, [pc, #4]	; (351c <__stdout_hook_install+0x8>)
    3516:	6018      	str	r0, [r3, #0]
}
    3518:	4770      	bx	lr
    351a:	bf00      	nop
    351c:	2000003c 	.word	0x2000003c

00003520 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    3520:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3524:	b2c0      	uxtb	r0, r0
    3526:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    352a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    352e:	4905      	ldr	r1, [pc, #20]	; (3544 <sys_arch_reboot+0x24>)
    3530:	4b05      	ldr	r3, [pc, #20]	; (3548 <sys_arch_reboot+0x28>)
    3532:	68ca      	ldr	r2, [r1, #12]
    3534:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3538:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    353a:	60cb      	str	r3, [r1, #12]
    353c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    3540:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    3542:	e7fd      	b.n	3540 <sys_arch_reboot+0x20>
    3544:	e000ed00 	.word	0xe000ed00
    3548:	05fa0004 	.word	0x05fa0004

0000354c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    354c:	b120      	cbz	r0, 3558 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    354e:	4b03      	ldr	r3, [pc, #12]	; (355c <arch_busy_wait+0x10>)
    3550:	0180      	lsls	r0, r0, #6
    3552:	f043 0301 	orr.w	r3, r3, #1
    3556:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    3558:	4770      	bx	lr
    355a:	bf00      	nop
    355c:	00009380 	.word	0x00009380

00003560 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    3560:	4b08      	ldr	r3, [pc, #32]	; (3584 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3562:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3564:	1ac3      	subs	r3, r0, r3
{
    3566:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3568:	4907      	ldr	r1, [pc, #28]	; (3588 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    356a:	109b      	asrs	r3, r3, #2
{
    356c:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    356e:	4359      	muls	r1, r3
    3570:	4806      	ldr	r0, [pc, #24]	; (358c <onoff_stop+0x2c>)
    3572:	2240      	movs	r2, #64	; 0x40
    3574:	f005 f81a 	bl	85ac <stop>
	notify(mgr, res);
    3578:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    357a:	4601      	mov	r1, r0
	notify(mgr, res);
    357c:	4620      	mov	r0, r4
}
    357e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    3582:	4718      	bx	r3
    3584:	20000940 	.word	0x20000940
    3588:	b6db6db7 	.word	0xb6db6db7
    358c:	000090ec 	.word	0x000090ec

00003590 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3590:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3592:	4c0c      	ldr	r4, [pc, #48]	; (35c4 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3594:	4a0c      	ldr	r2, [pc, #48]	; (35c8 <onoff_start+0x38>)
    3596:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    3598:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    359a:	9300      	str	r3, [sp, #0]
{
    359c:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    359e:	460b      	mov	r3, r1
    35a0:	490a      	ldr	r1, [pc, #40]	; (35cc <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    35a2:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    35a4:	4361      	muls	r1, r4
{
    35a6:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    35a8:	4809      	ldr	r0, [pc, #36]	; (35d0 <onoff_start+0x40>)
    35aa:	f005 f82b 	bl	8604 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    35ae:	1e01      	subs	r1, r0, #0
    35b0:	da05      	bge.n	35be <onoff_start+0x2e>
		notify(mgr, err);
    35b2:	4630      	mov	r0, r6
    35b4:	462b      	mov	r3, r5
	}
}
    35b6:	b002      	add	sp, #8
    35b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    35bc:	4718      	bx	r3
}
    35be:	b002      	add	sp, #8
    35c0:	bd70      	pop	{r4, r5, r6, pc}
    35c2:	bf00      	nop
    35c4:	20000940 	.word	0x20000940
    35c8:	0000866f 	.word	0x0000866f
    35cc:	b6db6db7 	.word	0xb6db6db7
    35d0:	000090ec 	.word	0x000090ec

000035d4 <generic_hfclk_stop>:
{
    35d4:	b510      	push	{r4, lr}
	__asm__ volatile(
    35d6:	f04f 0340 	mov.w	r3, #64	; 0x40
    35da:	f3ef 8411 	mrs	r4, BASEPRI
    35de:	f383 8812 	msr	BASEPRI_MAX, r3
    35e2:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    35e6:	4a07      	ldr	r2, [pc, #28]	; (3604 <generic_hfclk_stop+0x30>)
    35e8:	6813      	ldr	r3, [r2, #0]
    35ea:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    35ee:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    35f0:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    35f2:	d402      	bmi.n	35fa <generic_hfclk_stop+0x26>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    35f4:	2001      	movs	r0, #1
    35f6:	f005 fa7d 	bl	8af4 <nrfx_clock_stop>
	__asm__ volatile(
    35fa:	f384 8811 	msr	BASEPRI, r4
    35fe:	f3bf 8f6f 	isb	sy
}
    3602:	bd10      	pop	{r4, pc}
    3604:	20000990 	.word	0x20000990

00003608 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3608:	2200      	movs	r2, #0
{
    360a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    360c:	2101      	movs	r1, #1
{
    360e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3610:	4610      	mov	r0, r2
    3612:	f7ff fa1f 	bl	2a54 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    3616:	4811      	ldr	r0, [pc, #68]	; (365c <clk_init+0x54>)
    3618:	f002 f948 	bl	58ac <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    361c:	4b10      	ldr	r3, [pc, #64]	; (3660 <clk_init+0x58>)
    361e:	4298      	cmp	r0, r3
    3620:	d118      	bne.n	3654 <clk_init+0x4c>
	hfclkaudio_init();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_DRIVER_CALIBRATION)) {
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
    3622:	6920      	ldr	r0, [r4, #16]
    3624:	f000 f9a0 	bl	3968 <z_nrf_clock_calibration_init>
	}

	nrfx_clock_enable();
    3628:	f005 fa1f 	bl	8a6a <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    362c:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    362e:	490d      	ldr	r1, [pc, #52]	; (3664 <clk_init+0x5c>)
    3630:	4630      	mov	r0, r6
    3632:	f004 fb20 	bl	7c76 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    3636:	2800      	cmp	r0, #0
    3638:	db0b      	blt.n	3652 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    363a:	2501      	movs	r5, #1
    363c:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    363e:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3640:	4908      	ldr	r1, [pc, #32]	; (3664 <clk_init+0x5c>)
    3642:	f104 001c 	add.w	r0, r4, #28
    3646:	f004 fb16 	bl	7c76 <onoff_manager_init>
		if (err < 0) {
    364a:	2800      	cmp	r0, #0
    364c:	db01      	blt.n	3652 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    364e:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    3650:	2000      	movs	r0, #0
}
    3652:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    3654:	f06f 0004 	mvn.w	r0, #4
    3658:	e7fb      	b.n	3652 <clk_init+0x4a>
    365a:	bf00      	nop
    365c:	0000369d 	.word	0x0000369d
    3660:	0bad0000 	.word	0x0bad0000
    3664:	0000942c 	.word	0x0000942c

00003668 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3668:	b570      	push	{r4, r5, r6, lr}
    366a:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    366c:	230c      	movs	r3, #12
    366e:	4809      	ldr	r0, [pc, #36]	; (3694 <clkstarted_handle.constprop.0+0x2c>)
    3670:	434b      	muls	r3, r1
    3672:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    3674:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    3678:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    367a:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    367c:	4418      	add	r0, r3
	sub_data->cb = NULL;
    367e:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    3680:	f004 ff81 	bl	8586 <set_on_state>
	if (callback) {
    3684:	b12d      	cbz	r5, 3692 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    3686:	4632      	mov	r2, r6
    3688:	462b      	mov	r3, r5
    368a:	4803      	ldr	r0, [pc, #12]	; (3698 <clkstarted_handle.constprop.0+0x30>)
}
    368c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    3690:	4718      	bx	r3
}
    3692:	bd70      	pop	{r4, r5, r6, pc}
    3694:	20000940 	.word	0x20000940
    3698:	000090ec 	.word	0x000090ec

0000369c <clock_event_handler>:
	switch (event) {
    369c:	2801      	cmp	r0, #1
{
    369e:	b510      	push	{r4, lr}
    36a0:	4604      	mov	r4, r0
	switch (event) {
    36a2:	d00a      	beq.n	36ba <clock_event_handler+0x1e>
    36a4:	2803      	cmp	r0, #3
    36a6:	d00c      	beq.n	36c2 <clock_event_handler+0x26>
    36a8:	b978      	cbnz	r0, 36ca <clock_event_handler+0x2e>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    36aa:	4b08      	ldr	r3, [pc, #32]	; (36cc <clock_event_handler+0x30>)
    36ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    36ae:	075b      	lsls	r3, r3, #29
    36b0:	d10b      	bne.n	36ca <clock_event_handler+0x2e>
}
    36b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    36b6:	f7ff bfd7 	b.w	3668 <clkstarted_handle.constprop.0>
			z_nrf_clock_calibration_lfclk_started();
    36ba:	f000 f963 	bl	3984 <z_nrf_clock_calibration_lfclk_started>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    36be:	4620      	mov	r0, r4
    36c0:	e7f7      	b.n	36b2 <clock_event_handler+0x16>
}
    36c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			z_nrf_clock_calibration_done_handler();
    36c6:	f000 b96b 	b.w	39a0 <z_nrf_clock_calibration_done_handler>
}
    36ca:	bd10      	pop	{r4, pc}
    36cc:	20000940 	.word	0x20000940

000036d0 <generic_hfclk_start>:
{
    36d0:	b508      	push	{r3, lr}
	__asm__ volatile(
    36d2:	f04f 0340 	mov.w	r3, #64	; 0x40
    36d6:	f3ef 8111 	mrs	r1, BASEPRI
    36da:	f383 8812 	msr	BASEPRI_MAX, r3
    36de:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    36e2:	4a12      	ldr	r2, [pc, #72]	; (372c <generic_hfclk_start+0x5c>)
    36e4:	6813      	ldr	r3, [r2, #0]
    36e6:	f043 0002 	orr.w	r0, r3, #2
    36ea:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    36ec:	07da      	lsls	r2, r3, #31
    36ee:	d408      	bmi.n	3702 <generic_hfclk_start+0x32>
	__asm__ volatile(
    36f0:	f381 8811 	msr	BASEPRI, r1
    36f4:	f3bf 8f6f 	isb	sy
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    36f8:	2001      	movs	r0, #1
}
    36fa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    36fe:	f005 b9c1 	b.w	8a84 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    3702:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3706:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    370a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    370e:	07d3      	lsls	r3, r2, #31
    3710:	d5ee      	bpl.n	36f0 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    3712:	4807      	ldr	r0, [pc, #28]	; (3730 <generic_hfclk_start+0x60>)
    3714:	f004 ff37 	bl	8586 <set_on_state>
    3718:	f381 8811 	msr	BASEPRI, r1
    371c:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    3720:	2000      	movs	r0, #0
}
    3722:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    3726:	f7ff bf9f 	b.w	3668 <clkstarted_handle.constprop.0>
    372a:	bf00      	nop
    372c:	20000990 	.word	0x20000990
    3730:	20000980 	.word	0x20000980

00003734 <api_blocking_start>:
{
    3734:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3736:	2200      	movs	r2, #0
    3738:	2301      	movs	r3, #1
    373a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    373e:	ab04      	add	r3, sp, #16
    3740:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3744:	4a09      	ldr	r2, [pc, #36]	; (376c <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3746:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    374a:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    374c:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3750:	f004 ff86 	bl	8660 <api_start>
	if (err < 0) {
    3754:	2800      	cmp	r0, #0
    3756:	db05      	blt.n	3764 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    3758:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    375c:	2300      	movs	r3, #0
    375e:	4668      	mov	r0, sp
    3760:	f003 fa84 	bl	6c6c <z_impl_k_sem_take>
}
    3764:	b007      	add	sp, #28
    3766:	f85d fb04 	ldr.w	pc, [sp], #4
    376a:	bf00      	nop
    376c:	00008687 	.word	0x00008687

00003770 <z_nrf_clock_control_get_onoff>:
}
    3770:	4a02      	ldr	r2, [pc, #8]	; (377c <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    3772:	b2c3      	uxtb	r3, r0
}
    3774:	201c      	movs	r0, #28
    3776:	fb03 2000 	mla	r0, r3, r0, r2
    377a:	4770      	bx	lr
    377c:	20000940 	.word	0x20000940

00003780 <z_nrf_clock_control_lf_on>:
{
    3780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3782:	4928      	ldr	r1, [pc, #160]	; (3824 <z_nrf_clock_control_lf_on+0xa4>)
    3784:	f3bf 8f5b 	dmb	ish
    3788:	4606      	mov	r6, r0
    378a:	2201      	movs	r2, #1
    378c:	e851 3f00 	ldrex	r3, [r1]
    3790:	e841 2000 	strex	r0, r2, [r1]
    3794:	2800      	cmp	r0, #0
    3796:	d1f9      	bne.n	378c <z_nrf_clock_control_lf_on+0xc>
    3798:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    379c:	b933      	cbnz	r3, 37ac <z_nrf_clock_control_lf_on+0x2c>
	*notify = (struct sys_notify){
    379e:	4922      	ldr	r1, [pc, #136]	; (3828 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
    37a0:	4822      	ldr	r0, [pc, #136]	; (382c <z_nrf_clock_control_lf_on+0xac>)
    37a2:	604b      	str	r3, [r1, #4]
    37a4:	60cb      	str	r3, [r1, #12]
    37a6:	608a      	str	r2, [r1, #8]
    37a8:	f004 fa78 	bl	7c9c <onoff_request>
	switch (start_mode) {
    37ac:	1e73      	subs	r3, r6, #1
    37ae:	2b01      	cmp	r3, #1
    37b0:	d81d      	bhi.n	37ee <z_nrf_clock_control_lf_on+0x6e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    37b2:	f005 fa39 	bl	8c28 <k_is_in_isr>
    37b6:	4604      	mov	r4, r0
    37b8:	b9d0      	cbnz	r0, 37f0 <z_nrf_clock_control_lf_on+0x70>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    37ba:	4b1d      	ldr	r3, [pc, #116]	; (3830 <z_nrf_clock_control_lf_on+0xb0>)
    37bc:	781b      	ldrb	r3, [r3, #0]
    37be:	b1bb      	cbz	r3, 37f0 <z_nrf_clock_control_lf_on+0x70>
    p_reg->INTENCLR = mask;
    37c0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    37c4:	2202      	movs	r2, #2
    37c6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    37ca:	4605      	mov	r5, r0
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    37cc:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    37d0:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    37d4:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
    37d8:	03d2      	lsls	r2, r2, #15
    37da:	d513      	bpl.n	3804 <z_nrf_clock_control_lf_on+0x84>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    37dc:	079b      	lsls	r3, r3, #30
    37de:	d001      	beq.n	37e4 <z_nrf_clock_control_lf_on+0x64>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    37e0:	2e01      	cmp	r6, #1
    37e2:	d10f      	bne.n	3804 <z_nrf_clock_control_lf_on+0x84>
	if (isr_mode) {
    37e4:	b1c4      	cbz	r4, 3818 <z_nrf_clock_control_lf_on+0x98>
    37e6:	f385 8811 	msr	BASEPRI, r5
    37ea:	f3bf 8f6f 	isb	sy
}
    37ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    37f0:	f04f 0340 	mov.w	r3, #64	; 0x40
    37f4:	f3ef 8511 	mrs	r5, BASEPRI
    37f8:	f383 8812 	msr	BASEPRI_MAX, r3
    37fc:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    3800:	2401      	movs	r4, #1
    3802:	e7e3      	b.n	37cc <z_nrf_clock_control_lf_on+0x4c>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3804:	b11c      	cbz	r4, 380e <z_nrf_clock_control_lf_on+0x8e>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3806:	4628      	mov	r0, r5
    3808:	f7ff f882 	bl	2910 <arch_cpu_atomic_idle>
}
    380c:	e7e0      	b.n	37d0 <z_nrf_clock_control_lf_on+0x50>
	return z_impl_k_sleep(timeout);
    380e:	2100      	movs	r1, #0
    3810:	2021      	movs	r0, #33	; 0x21
    3812:	f003 fe6b 	bl	74ec <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3816:	e7db      	b.n	37d0 <z_nrf_clock_control_lf_on+0x50>
    p_reg->INTENSET = mask;
    3818:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    381c:	2202      	movs	r2, #2
    381e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3822:	e7e4      	b.n	37ee <z_nrf_clock_control_lf_on+0x6e>
    3824:	2000093c 	.word	0x2000093c
    3828:	2000092c 	.word	0x2000092c
    382c:	2000095c 	.word	0x2000095c
    3830:	2000133c 	.word	0x2000133c

00003834 <start_cal_process>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3834:	4b0d      	ldr	r3, [pc, #52]	; (386c <start_cal_process+0x38>)
    3836:	f3bf 8f5b 	dmb	ish
    383a:	2201      	movs	r2, #1
    383c:	e853 1f00 	ldrex	r1, [r3]
    3840:	2900      	cmp	r1, #0
    3842:	d103      	bne.n	384c <start_cal_process+0x18>
    3844:	e843 2000 	strex	r0, r2, [r3]
    3848:	2800      	cmp	r0, #0
    384a:	d1f7      	bne.n	383c <start_cal_process+0x8>
    384c:	f3bf 8f5b 	dmb	ish
	cal_process_in_progress = 0;
}

static void start_cal_process(void)
{
	if (atomic_cas(&cal_process_in_progress, 0, 1) == false) {
    3850:	d10a      	bne.n	3868 <start_cal_process+0x34>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    3852:	4907      	ldr	r1, [pc, #28]	; (3870 <start_cal_process+0x3c>)
    3854:	2300      	movs	r3, #0
    3856:	60cb      	str	r3, [r1, #12]
    3858:	4b06      	ldr	r3, [pc, #24]	; (3874 <start_cal_process+0x40>)
    385a:	604b      	str	r3, [r1, #4]
    385c:	2303      	movs	r3, #3
    385e:	608b      	str	r3, [r1, #8]
	err = onoff_request(mgr, cli);
    3860:	4b05      	ldr	r3, [pc, #20]	; (3878 <start_cal_process+0x44>)
    3862:	6818      	ldr	r0, [r3, #0]
    3864:	f004 ba1a 	b.w	7c9c <onoff_request>
		 * will be released at the end of calibration process and
		 * stopped in consequence.
		 */
		lf_request();
	}
}
    3868:	4770      	bx	lr
    386a:	bf00      	nop
    386c:	200009b0 	.word	0x200009b0
    3870:	20000998 	.word	0x20000998
    3874:	0000393d 	.word	0x0000393d
    3878:	20000994 	.word	0x20000994

0000387c <start_cycle>:
{
    387c:	b507      	push	{r0, r1, r2, lr}
	z_impl_k_timer_start(timer, duration, period);
    387e:	2200      	movs	r2, #0
    3880:	2300      	movs	r3, #0
    3882:	e9cd 2300 	strd	r2, r3, [sp]
    3886:	4808      	ldr	r0, [pc, #32]	; (38a8 <start_cycle+0x2c>)
    3888:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    388c:	2300      	movs	r3, #0
    388e:	f004 f88b 	bl	79a8 <z_impl_k_timer_start>
	clk_release(&mgrs[CLOCK_CONTROL_NRF_TYPE_HFCLK]);
    3892:	4b06      	ldr	r3, [pc, #24]	; (38ac <start_cycle+0x30>)
	err = onoff_release(mgr);
    3894:	6818      	ldr	r0, [r3, #0]
    3896:	f004 fa59 	bl	7d4c <onoff_release>
	cal_process_in_progress = 0;
    389a:	4b05      	ldr	r3, [pc, #20]	; (38b0 <start_cycle+0x34>)
    389c:	2200      	movs	r2, #0
    389e:	601a      	str	r2, [r3, #0]
}
    38a0:	b003      	add	sp, #12
    38a2:	f85d fb04 	ldr.w	pc, [sp], #4
    38a6:	bf00      	nop
    38a8:	200001c0 	.word	0x200001c0
    38ac:	20000994 	.word	0x20000994
    38b0:	200009b0 	.word	0x200009b0

000038b4 <measure_temperature>:
/* Function determines if calibration should be performed based on temperature
 * measurement. Function is called from system work queue context. It is
 * reading temperature from TEMP sensor and compares with last measurement.
 */
static void measure_temperature(struct k_work *work)
{
    38b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    38b6:	4e1c      	ldr	r6, [pc, #112]	; (3928 <measure_temperature+0x74>)
    38b8:	4c1c      	ldr	r4, [pc, #112]	; (392c <measure_temperature+0x78>)
    38ba:	68b7      	ldr	r7, [r6, #8]
    38bc:	4d1c      	ldr	r5, [pc, #112]	; (3930 <measure_temperature+0x7c>)
    38be:	68fb      	ldr	r3, [r7, #12]
    38c0:	2139      	movs	r1, #57	; 0x39
    38c2:	4630      	mov	r0, r6
    38c4:	4798      	blx	r3
	if (rc == 0) {
    38c6:	b140      	cbz	r0, 38da <measure_temperature+0x26>

	rc = get_temperature(&temperature);

	if (rc != 0) {
		/* Temperature read failed, force calibration. */
		calib_skip_cnt = 0;
    38c8:	2300      	movs	r3, #0
    38ca:	7023      	strb	r3, [r4, #0]
		diff = abs(temperature - prev_temperature);
	}

	if ((calib_skip_cnt == 0) ||
		(diff >= CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF)) {
		prev_temperature = temperature;
    38cc:	802b      	strh	r3, [r5, #0]
	nrfx_clock_calibration_start();
    38ce:	f001 ffff 	bl	58d0 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    38d2:	2301      	movs	r3, #1
    38d4:	7023      	strb	r3, [r4, #0]
		start_cycle();
	}

	LOG_DBG("Calibration %s. Temperature diff: %d (in 0.25'C units).",
			started ? "started" : "skipped", diff);
}
    38d6:	b003      	add	sp, #12
    38d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
    38da:	210c      	movs	r1, #12
    38dc:	693b      	ldr	r3, [r7, #16]
    38de:	466a      	mov	r2, sp
    38e0:	4630      	mov	r0, r6
    38e2:	4798      	blx	r3
	if (rc == 0) {
    38e4:	2800      	cmp	r0, #0
    38e6:	d1ef      	bne.n	38c8 <measure_temperature+0x14>
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    38e8:	4a12      	ldr	r2, [pc, #72]	; (3934 <measure_temperature+0x80>)
    38ea:	9b01      	ldr	r3, [sp, #4]
    38ec:	fb93 f3f2 	sdiv	r3, r3, r2
    38f0:	9a00      	ldr	r2, [sp, #0]
	if ((calib_skip_cnt == 0) ||
    38f2:	7821      	ldrb	r1, [r4, #0]
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    38f4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    38f8:	b21b      	sxth	r3, r3
		diff = abs(temperature - prev_temperature);
    38fa:	f9b5 2000 	ldrsh.w	r2, [r5]
	if ((calib_skip_cnt == 0) ||
    38fe:	2900      	cmp	r1, #0
    3900:	d0e4      	beq.n	38cc <measure_temperature+0x18>
		diff = abs(temperature - prev_temperature);
    3902:	1a9a      	subs	r2, r3, r2
void srand(unsigned int seed);
#endif /* CONFIG_MINIMAL_LIBC_RAND */

static inline int abs(int __n)
{
	return (__n < 0) ? -__n : __n;
    3904:	2a00      	cmp	r2, #0
    3906:	bfb8      	it	lt
    3908:	4252      	neglt	r2, r2
	if ((calib_skip_cnt == 0) ||
    390a:	b212      	sxth	r2, r2
    390c:	2a01      	cmp	r2, #1
    390e:	dcdd      	bgt.n	38cc <measure_temperature+0x18>
		total_skips_cnt++;
    3910:	4a09      	ldr	r2, [pc, #36]	; (3938 <measure_temperature+0x84>)
    3912:	6813      	ldr	r3, [r2, #0]
		calib_skip_cnt--;
    3914:	3901      	subs	r1, #1
		total_skips_cnt++;
    3916:	3301      	adds	r3, #1
		calib_skip_cnt--;
    3918:	7021      	strb	r1, [r4, #0]
		total_skips_cnt++;
    391a:	6013      	str	r3, [r2, #0]
}
    391c:	b003      	add	sp, #12
    391e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		start_cycle();
    3922:	f7ff bfab 	b.w	387c <start_cycle>
    3926:	bf00      	nop
    3928:	00009134 	.word	0x00009134
    392c:	20000c7d 	.word	0x20000c7d
    3930:	20000c20 	.word	0x20000c20
    3934:	0003d090 	.word	0x0003d090
    3938:	200009a8 	.word	0x200009a8

0000393c <cal_hf_callback>:
{
    393c:	b508      	push	{r3, lr}
    393e:	4807      	ldr	r0, [pc, #28]	; (395c <cal_hf_callback+0x20>)
    3940:	f005 f963 	bl	8c0a <z_device_is_ready>
	if (!device_is_ready(temp_sensor)) {
    3944:	b928      	cbnz	r0, 3952 <cal_hf_callback+0x16>
	nrfx_clock_calibration_start();
    3946:	f001 ffc3 	bl	58d0 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    394a:	4b05      	ldr	r3, [pc, #20]	; (3960 <cal_hf_callback+0x24>)
    394c:	2201      	movs	r2, #1
    394e:	701a      	strb	r2, [r3, #0]
}
    3950:	bd08      	pop	{r3, pc}
    3952:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_submit(&temp_measure_work);
    3956:	4803      	ldr	r0, [pc, #12]	; (3964 <cal_hf_callback+0x28>)
    3958:	f003 bac8 	b.w	6eec <k_work_submit>
    395c:	00009134 	.word	0x00009134
    3960:	20000c7d 	.word	0x20000c7d
    3964:	20000040 	.word	0x20000040

00003968 <z_nrf_clock_calibration_init>:
#endif /* USE_TEMP_SENSOR */

void z_nrf_clock_calibration_init(struct onoff_manager *onoff_mgrs)
{
	mgrs = onoff_mgrs;
    3968:	4b03      	ldr	r3, [pc, #12]	; (3978 <z_nrf_clock_calibration_init+0x10>)
	total_cnt = 0;
    396a:	4a04      	ldr	r2, [pc, #16]	; (397c <z_nrf_clock_calibration_init+0x14>)
	mgrs = onoff_mgrs;
    396c:	6018      	str	r0, [r3, #0]
	total_cnt = 0;
    396e:	2300      	movs	r3, #0
    3970:	6013      	str	r3, [r2, #0]
	total_skips_cnt = 0;
    3972:	4a03      	ldr	r2, [pc, #12]	; (3980 <z_nrf_clock_calibration_init+0x18>)
    3974:	6013      	str	r3, [r2, #0]
}
    3976:	4770      	bx	lr
    3978:	20000994 	.word	0x20000994
    397c:	200009ac 	.word	0x200009ac
    3980:	200009a8 	.word	0x200009a8

00003984 <z_nrf_clock_calibration_lfclk_started>:

static void start_unconditional_cal_process(void)
{
	calib_skip_cnt = 0;
    3984:	4b02      	ldr	r3, [pc, #8]	; (3990 <z_nrf_clock_calibration_lfclk_started+0xc>)
    3986:	2200      	movs	r2, #0
    3988:	701a      	strb	r2, [r3, #0]
	start_cal_process();
    398a:	f7ff bf53 	b.w	3834 <start_cal_process>
    398e:	bf00      	nop
    3990:	20000c7d 	.word	0x20000c7d

00003994 <z_nrf_clock_calibration_lfclk_stopped>:
	z_impl_k_timer_stop(timer);
    3994:	4801      	ldr	r0, [pc, #4]	; (399c <z_nrf_clock_calibration_lfclk_stopped+0x8>)
    3996:	f005 baf3 	b.w	8f80 <z_impl_k_timer_stop>
    399a:	bf00      	nop
    399c:	200001c0 	.word	0x200001c0

000039a0 <z_nrf_clock_calibration_done_handler>:
	LOG_DBG("Calibration stopped");
}

void z_nrf_clock_calibration_done_handler(void)
{
	total_cnt++;
    39a0:	4a02      	ldr	r2, [pc, #8]	; (39ac <z_nrf_clock_calibration_done_handler+0xc>)
    39a2:	6813      	ldr	r3, [r2, #0]
    39a4:	3301      	adds	r3, #1
    39a6:	6013      	str	r3, [r2, #0]
	LOG_DBG("Calibration done.");

	start_cycle();
    39a8:	f7ff bf68 	b.w	387c <start_cycle>
    39ac:	200009ac 	.word	0x200009ac

000039b0 <rtt_console_init>:

	return character;
}

static int rtt_console_init(void)
{
    39b0:	b510      	push	{r4, lr}

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
    39b2:	4c04      	ldr	r4, [pc, #16]	; (39c4 <rtt_console_init+0x14>)
    39b4:	4620      	mov	r0, r4
    39b6:	f7fd fbb3 	bl	1120 <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
    39ba:	4620      	mov	r0, r4
    39bc:	f7ff fdaa 	bl	3514 <__stdout_hook_install>

	return 0;
}
    39c0:	2000      	movs	r0, #0
    39c2:	bd10      	pop	{r4, pc}
    39c4:	000039c9 	.word	0x000039c9

000039c8 <rtt_console_out>:
{
    39c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    39ca:	4e13      	ldr	r6, [pc, #76]	; (3a18 <rtt_console_out+0x50>)
	char c = (char)character;
    39cc:	f88d 0007 	strb.w	r0, [sp, #7]
{
    39d0:	4604      	mov	r4, r0
	char c = (char)character;
    39d2:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
    39d4:	f002 fe1a 	bl	660c <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    39d8:	2201      	movs	r2, #1
    39da:	f10d 0107 	add.w	r1, sp, #7
    39de:	2000      	movs	r0, #0
    39e0:	f002 fdde 	bl	65a0 <SEGGER_RTT_WriteNoLock>
    39e4:	4607      	mov	r7, r0
		SEGGER_RTT_UNLOCK();
    39e6:	f002 fe1b 	bl	6620 <zephyr_rtt_mutex_unlock>
		if (cnt) {
    39ea:	b127      	cbz	r7, 39f6 <rtt_console_out+0x2e>
			host_present = true;
    39ec:	2301      	movs	r3, #1
    39ee:	7033      	strb	r3, [r6, #0]
}
    39f0:	4620      	mov	r0, r4
    39f2:	b003      	add	sp, #12
    39f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
    39f6:	7833      	ldrb	r3, [r6, #0]
    39f8:	2b00      	cmp	r3, #0
    39fa:	d0f9      	beq.n	39f0 <rtt_console_out+0x28>
			if (max_cnt) {
    39fc:	3d01      	subs	r5, #1
    39fe:	d008      	beq.n	3a12 <rtt_console_out+0x4a>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    3a00:	f005 f912 	bl	8c28 <k_is_in_isr>
    3a04:	2800      	cmp	r0, #0
    3a06:	d1e5      	bne.n	39d4 <rtt_console_out+0xc>
	return z_impl_k_sleep(timeout);
    3a08:	2100      	movs	r1, #0
    3a0a:	2042      	movs	r0, #66	; 0x42
    3a0c:	f003 fd6e 	bl	74ec <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    3a10:	e7e0      	b.n	39d4 <rtt_console_out+0xc>
				host_present = false;
    3a12:	7035      	strb	r5, [r6, #0]
    3a14:	e7ec      	b.n	39f0 <rtt_console_out+0x28>
    3a16:	bf00      	nop
    3a18:	20000c7e 	.word	0x20000c7e

00003a1c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    3a1c:	b530      	push	{r4, r5, lr}
	return port->config;
    3a1e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3a20:	7b05      	ldrb	r5, [r0, #12]
    3a22:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    3a26:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    3a2a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3a2c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    3a30:	d105      	bne.n	3a3e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    3a32:	4620      	mov	r0, r4
    3a34:	f002 f9ee 	bl	5e14 <nrfx_gpiote_trigger_disable>

		return 0;
    3a38:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    3a3a:	b005      	add	sp, #20
    3a3c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    3a3e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    3a40:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3a44:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    3a48:	d114      	bne.n	3a74 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    3a4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3a4e:	bf0c      	ite	eq
    3a50:	2304      	moveq	r3, #4
    3a52:	2305      	movne	r3, #5
    3a54:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3a58:	2300      	movs	r3, #0
    3a5a:	4619      	mov	r1, r3
    3a5c:	aa02      	add	r2, sp, #8
    3a5e:	4620      	mov	r0, r4
    3a60:	f002 f80e 	bl	5a80 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3a64:	4b1d      	ldr	r3, [pc, #116]	; (3adc <gpio_nrfx_pin_interrupt_configure+0xc0>)
    3a66:	4298      	cmp	r0, r3
    3a68:	d135      	bne.n	3ad6 <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3a6a:	2101      	movs	r1, #1
    3a6c:	4620      	mov	r0, r4
    3a6e:	f002 f98d 	bl	5d8c <nrfx_gpiote_trigger_enable>
	return 0;
    3a72:	e7e1      	b.n	3a38 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3a74:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    3a78:	d022      	beq.n	3ac0 <gpio_nrfx_pin_interrupt_configure+0xa4>
    3a7a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    3a7e:	bf14      	ite	ne
    3a80:	2301      	movne	r3, #1
    3a82:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    3a84:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    3a88:	6883      	ldr	r3, [r0, #8]
    3a8a:	40cb      	lsrs	r3, r1
    3a8c:	07d9      	lsls	r1, r3, #31
    3a8e:	d4e3      	bmi.n	3a58 <gpio_nrfx_pin_interrupt_configure+0x3c>
    3a90:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    3a94:	d1e0      	bne.n	3a58 <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    3a96:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3a9a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3a9e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    3aa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    3aa6:	07db      	lsls	r3, r3, #31
    3aa8:	d4d6      	bmi.n	3a58 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3aaa:	f10d 0507 	add.w	r5, sp, #7
    3aae:	4629      	mov	r1, r5
    3ab0:	4620      	mov	r0, r4
    3ab2:	f002 f917 	bl	5ce4 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    3ab6:	4b0a      	ldr	r3, [pc, #40]	; (3ae0 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    3ab8:	4298      	cmp	r0, r3
    3aba:	d003      	beq.n	3ac4 <gpio_nrfx_pin_interrupt_configure+0xa8>
		trigger_config.p_in_channel = &ch;
    3abc:	9503      	str	r5, [sp, #12]
    3abe:	e7cb      	b.n	3a58 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3ac0:	2303      	movs	r3, #3
    3ac2:	e7df      	b.n	3a84 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    3ac4:	4628      	mov	r0, r5
    3ac6:	f002 f95b 	bl	5d80 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    3aca:	4b04      	ldr	r3, [pc, #16]	; (3adc <gpio_nrfx_pin_interrupt_configure+0xc0>)
    3acc:	4298      	cmp	r0, r3
    3ace:	d0f5      	beq.n	3abc <gpio_nrfx_pin_interrupt_configure+0xa0>
				return -ENOMEM;
    3ad0:	f06f 000b 	mvn.w	r0, #11
    3ad4:	e7b1      	b.n	3a3a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    3ad6:	f06f 0015 	mvn.w	r0, #21
    3ada:	e7ae      	b.n	3a3a <gpio_nrfx_pin_interrupt_configure+0x1e>
    3adc:	0bad0000 	.word	0x0bad0000
    3ae0:	0bad0004 	.word	0x0bad0004

00003ae4 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3ae4:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    3ae6:	f002 f93b 	bl	5d60 <nrfx_gpiote_is_init>
    3aea:	4604      	mov	r4, r0
    3aec:	b968      	cbnz	r0, 3b0a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    3aee:	f002 f90f 	bl	5d10 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    3af2:	4b08      	ldr	r3, [pc, #32]	; (3b14 <gpio_nrfx_init+0x30>)
    3af4:	4298      	cmp	r0, r3
    3af6:	d10a      	bne.n	3b0e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3af8:	4807      	ldr	r0, [pc, #28]	; (3b18 <gpio_nrfx_init+0x34>)
    3afa:	4621      	mov	r1, r4
    3afc:	f002 f8ec 	bl	5cd8 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3b00:	4622      	mov	r2, r4
    3b02:	2105      	movs	r1, #5
    3b04:	2006      	movs	r0, #6
    3b06:	f7fe ffa5 	bl	2a54 <z_arm_irq_priority_set>
		return 0;
    3b0a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    3b0c:	bd10      	pop	{r4, pc}
		return -EIO;
    3b0e:	f06f 0004 	mvn.w	r0, #4
    3b12:	e7fb      	b.n	3b0c <gpio_nrfx_init+0x28>
    3b14:	0bad0000 	.word	0x0bad0000
    3b18:	00003b1d 	.word	0x00003b1d

00003b1c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3b1c:	0943      	lsrs	r3, r0, #5
{
    3b1e:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3b20:	d107      	bne.n	3b32 <nrfx_gpio_handler+0x16>
	return list->head;
    3b22:	4b0b      	ldr	r3, [pc, #44]	; (3b50 <nrfx_gpio_handler+0x34>)
    3b24:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3b26:	b121      	cbz	r1, 3b32 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    3b28:	2501      	movs	r5, #1
	return node->next;
    3b2a:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    3b2c:	4e09      	ldr	r6, [pc, #36]	; (3b54 <nrfx_gpio_handler+0x38>)
    3b2e:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3b30:	b901      	cbnz	r1, 3b34 <nrfx_gpio_handler+0x18>
}
    3b32:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    3b34:	688a      	ldr	r2, [r1, #8]
    3b36:	402a      	ands	r2, r5
    3b38:	d002      	beq.n	3b40 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    3b3a:	684b      	ldr	r3, [r1, #4]
    3b3c:	4630      	mov	r0, r6
    3b3e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3b40:	b11c      	cbz	r4, 3b4a <nrfx_gpio_handler+0x2e>
    3b42:	6823      	ldr	r3, [r4, #0]
    3b44:	4621      	mov	r1, r4
    3b46:	461c      	mov	r4, r3
    3b48:	e7f2      	b.n	3b30 <nrfx_gpio_handler+0x14>
    3b4a:	4623      	mov	r3, r4
    3b4c:	e7fa      	b.n	3b44 <nrfx_gpio_handler+0x28>
    3b4e:	bf00      	nop
    3b50:	200009b4 	.word	0x200009b4
    3b54:	00009104 	.word	0x00009104

00003b58 <gpio_nrfx_pin_configure>:
{
    3b58:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    3b5c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3b5e:	7b3b      	ldrb	r3, [r7, #12]
    3b60:	f001 051f 	and.w	r5, r1, #31
    3b64:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    3b68:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3b6a:	4628      	mov	r0, r5
    3b6c:	f10d 0103 	add.w	r1, sp, #3
{
    3b70:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3b72:	f002 f8b7 	bl	5ce4 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    3b76:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3b7a:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    3b7c:	d10b      	bne.n	3b96 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    3b7e:	4628      	mov	r0, r5
    3b80:	f002 f970 	bl	5e64 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    3b84:	4b3d      	ldr	r3, [pc, #244]	; (3c7c <gpio_nrfx_pin_configure+0x124>)
    3b86:	4598      	cmp	r8, r3
    3b88:	d103      	bne.n	3b92 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    3b8a:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3b8e:	f002 f8f1 	bl	5d74 <nrfx_gpiote_channel_free>
		return 0;
    3b92:	2000      	movs	r0, #0
    3b94:	e00c      	b.n	3bb0 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    3b96:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3b98:	4619      	mov	r1, r3
    3b9a:	aa02      	add	r2, sp, #8
    3b9c:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    3b9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3ba2:	f001 ff6d 	bl	5a80 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3ba6:	4b35      	ldr	r3, [pc, #212]	; (3c7c <gpio_nrfx_pin_configure+0x124>)
    3ba8:	4298      	cmp	r0, r3
    3baa:	d004      	beq.n	3bb6 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    3bac:	f06f 0015 	mvn.w	r0, #21
}
    3bb0:	b004      	add	sp, #16
    3bb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    3bb6:	4580      	cmp	r8, r0
    3bb8:	d103      	bne.n	3bc2 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    3bba:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3bbe:	f002 f8d9 	bl	5d74 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    3bc2:	03a3      	lsls	r3, r4, #14
    3bc4:	d54b      	bpl.n	3c5e <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3bc6:	f240 3306 	movw	r3, #774	; 0x306
    3bca:	4023      	ands	r3, r4
    3bcc:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    3bd0:	d019      	beq.n	3c06 <gpio_nrfx_pin_configure+0xae>
    3bd2:	d80c      	bhi.n	3bee <gpio_nrfx_pin_configure+0x96>
    3bd4:	2b06      	cmp	r3, #6
    3bd6:	d017      	beq.n	3c08 <gpio_nrfx_pin_configure+0xb0>
    3bd8:	d804      	bhi.n	3be4 <gpio_nrfx_pin_configure+0x8c>
    3bda:	b1ab      	cbz	r3, 3c08 <gpio_nrfx_pin_configure+0xb0>
    3bdc:	2b02      	cmp	r3, #2
    3bde:	d1e5      	bne.n	3bac <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    3be0:	2304      	movs	r3, #4
    3be2:	e011      	b.n	3c08 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3be4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    3be8:	d1e0      	bne.n	3bac <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    3bea:	2301      	movs	r3, #1
    3bec:	e00c      	b.n	3c08 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3bee:	f240 2202 	movw	r2, #514	; 0x202
    3bf2:	4293      	cmp	r3, r2
    3bf4:	d027      	beq.n	3c46 <gpio_nrfx_pin_configure+0xee>
    3bf6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    3bfa:	d026      	beq.n	3c4a <gpio_nrfx_pin_configure+0xf2>
    3bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    3c00:	d1d4      	bne.n	3bac <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    3c02:	2302      	movs	r3, #2
    3c04:	e000      	b.n	3c08 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    3c06:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    3c08:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3c0c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    3c10:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    3c14:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    3c16:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    3c1a:	bf54      	ite	pl
    3c1c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    3c20:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3c22:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    3c24:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3c28:	d511      	bpl.n	3c4e <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3c2a:	687a      	ldr	r2, [r7, #4]
    3c2c:	2301      	movs	r3, #1
    3c2e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    3c30:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    3c34:	2200      	movs	r2, #0
    3c36:	a901      	add	r1, sp, #4
    3c38:	4628      	mov	r0, r5
    3c3a:	f001 ffcf 	bl	5bdc <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3c3e:	4b0f      	ldr	r3, [pc, #60]	; (3c7c <gpio_nrfx_pin_configure+0x124>)
    3c40:	4298      	cmp	r0, r3
    3c42:	d0a6      	beq.n	3b92 <gpio_nrfx_pin_configure+0x3a>
    3c44:	e7b2      	b.n	3bac <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    3c46:	2305      	movs	r3, #5
    3c48:	e7de      	b.n	3c08 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    3c4a:	2303      	movs	r3, #3
    3c4c:	e7dc      	b.n	3c08 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3c4e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3c50:	bf41      	itttt	mi
    3c52:	2301      	movmi	r3, #1
    3c54:	687a      	ldrmi	r2, [r7, #4]
    3c56:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    3c58:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    3c5c:	e7ea      	b.n	3c34 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    3c5e:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3c60:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    3c64:	bf54      	ite	pl
    3c66:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    3c6a:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3c6c:	461a      	mov	r2, r3
    3c6e:	a901      	add	r1, sp, #4
    3c70:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    3c72:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3c76:	f001 ff03 	bl	5a80 <nrfx_gpiote_input_configure>
    3c7a:	e7e0      	b.n	3c3e <gpio_nrfx_pin_configure+0xe6>
    3c7c:	0bad0000 	.word	0x0bad0000

00003c80 <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    3c80:	4b01      	ldr	r3, [pc, #4]	; (3c88 <hfclk_on_callback+0x8>)
    3c82:	2201      	movs	r2, #1
    3c84:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    3c86:	4770      	bx	lr
    3c88:	4000c000 	.word	0x4000c000

00003c8c <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    3c8c:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
    3c8e:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
    3c90:	d10b      	bne.n	3caa <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    3c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    3c94:	4906      	ldr	r1, [pc, #24]	; (3cb0 <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
    3c96:	4807      	ldr	r0, [pc, #28]	; (3cb4 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    3c98:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
    3c9a:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
    3c9e:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
    3ca2:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    3ca4:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    3ca6:	2000      	movs	r0, #0
    3ca8:	4770      	bx	lr
		return -ENOTSUP;
    3caa:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    3cae:	4770      	bx	lr
    3cb0:	0003d090 	.word	0x0003d090
    3cb4:	000f4240 	.word	0x000f4240

00003cb8 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3cb8:	4b04      	ldr	r3, [pc, #16]	; (3ccc <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(const void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
    3cba:	6900      	ldr	r0, [r0, #16]
    3cbc:	2200      	movs	r2, #0
    3cbe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    3cc2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	z_impl_k_sem_give(sem);
    3cc6:	f002 bfab 	b.w	6c20 <z_impl_k_sem_give>
    3cca:	bf00      	nop
    3ccc:	4000c000 	.word	0x4000c000

00003cd0 <temp_nrf5_sample_fetch>:
{
    3cd0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
    3cd2:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
    3cd4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    3cd6:	b363      	cbz	r3, 3d32 <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    3cd8:	2939      	cmp	r1, #57	; 0x39
    3cda:	d001      	beq.n	3ce0 <temp_nrf5_sample_fetch+0x10>
    3cdc:	290c      	cmp	r1, #12
    3cde:	d12b      	bne.n	3d38 <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
    3ce0:	f105 0618 	add.w	r6, r5, #24
	return z_impl_k_mutex_lock(mutex, timeout);
    3ce4:	f04f 32ff 	mov.w	r2, #4294967295
    3ce8:	f04f 33ff 	mov.w	r3, #4294967295
    3cec:	4630      	mov	r0, r6
    3cee:	f002 fee1 	bl	6ab4 <z_impl_k_mutex_lock>
    3cf2:	4b13      	ldr	r3, [pc, #76]	; (3d40 <temp_nrf5_sample_fetch+0x70>)
    3cf4:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
    3cf6:	6b28      	ldr	r0, [r5, #48]	; 0x30
    3cf8:	2303      	movs	r3, #3
    3cfa:	2400      	movs	r4, #0
    3cfc:	4669      	mov	r1, sp
    3cfe:	9403      	str	r4, [sp, #12]
    3d00:	9302      	str	r3, [sp, #8]
    3d02:	f003 ffcb 	bl	7c9c <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    3d06:	f04f 32ff 	mov.w	r2, #4294967295
    3d0a:	f04f 33ff 	mov.w	r3, #4294967295
    3d0e:	4628      	mov	r0, r5
    3d10:	f002 ffac 	bl	6c6c <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    3d14:	6b28      	ldr	r0, [r5, #48]	; 0x30
    3d16:	f004 f819 	bl	7d4c <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    3d1a:	4b0a      	ldr	r3, [pc, #40]	; (3d44 <temp_nrf5_sample_fetch+0x74>)
    3d1c:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    3d20:	62ea      	str	r2, [r5, #44]	; 0x2c
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    3d22:	2201      	movs	r2, #1
    3d24:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    3d26:	4630      	mov	r0, r6
    3d28:	f002 ff3e 	bl	6ba8 <z_impl_k_mutex_unlock>
	return 0;
    3d2c:	4620      	mov	r0, r4
}
    3d2e:	b004      	add	sp, #16
    3d30:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    3d32:	f06f 000a 	mvn.w	r0, #10
    3d36:	e7fa      	b.n	3d2e <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
    3d38:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3d3c:	e7f7      	b.n	3d2e <temp_nrf5_sample_fetch+0x5e>
    3d3e:	bf00      	nop
    3d40:	00003c81 	.word	0x00003c81
    3d44:	4000c000 	.word	0x4000c000

00003d48 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    3d48:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    3d4a:	6904      	ldr	r4, [r0, #16]

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    3d4c:	2000      	movs	r0, #0
    3d4e:	f7ff fd0f 	bl	3770 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    3d52:	6320      	str	r0, [r4, #48]	; 0x30
	return z_impl_k_sem_init(sem, initial_count, limit);
    3d54:	f04f 32ff 	mov.w	r2, #4294967295
    3d58:	2100      	movs	r1, #0
    3d5a:	4620      	mov	r0, r4
    3d5c:	f004 ff87 	bl	8c6e <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
    3d60:	f104 0018 	add.w	r0, r4, #24
    3d64:	f004 ff7c 	bl	8c60 <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
    3d68:	2200      	movs	r2, #0
    3d6a:	2101      	movs	r1, #1
    3d6c:	200c      	movs	r0, #12
    3d6e:	f7fe fe71 	bl	2a54 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    3d72:	200c      	movs	r0, #12
    3d74:	f7fe fe3e 	bl	29f4 <arch_irq_enable>
    p_reg->INTENSET = mask;
    3d78:	4b02      	ldr	r3, [pc, #8]	; (3d84 <temp_nrf5_init+0x3c>)
    3d7a:	2201      	movs	r2, #1
    3d7c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    3d80:	2000      	movs	r0, #0
    3d82:	bd10      	pop	{r4, pc}
    3d84:	4000c000 	.word	0x4000c000

00003d88 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
    3d88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3d8c:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
    3d8e:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    3d90:	6905      	ldr	r5, [r0, #16]
	int err;

	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    3d92:	6aa6      	ldr	r6, [r4, #40]	; 0x28
{
    3d94:	af00      	add	r7, sp, #0
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    3d96:	1d3a      	adds	r2, r7, #4
    3d98:	2100      	movs	r1, #0
    3d9a:	4630      	mov	r0, r6
    3d9c:	f004 fcd5 	bl	874a <pinctrl_lookup_state>
	if (ret < 0) {
    3da0:	2800      	cmp	r0, #0
    3da2:	db32      	blt.n	3e0a <spi_nrfx_init+0x82>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    3da4:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    3da6:	6832      	ldr	r2, [r6, #0]
    3da8:	7919      	ldrb	r1, [r3, #4]
    3daa:	6818      	ldr	r0, [r3, #0]
    3dac:	f004 fce0 	bl	8770 <pinctrl_configure_pins>
	if (err < 0) {
    3db0:	2800      	cmp	r0, #0
    3db2:	db2a      	blt.n	3e0a <spi_nrfx_init+0x82>
		return err;
	}

	dev_config->irq_connect();
    3db4:	6a23      	ldr	r3, [r4, #32]
    3db6:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    3db8:	68ac      	ldr	r4, [r5, #8]

	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3dba:	2601      	movs	r6, #1
    3dbc:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    3dc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    3dc4:	429c      	cmp	r4, r3
    3dc6:	d304      	bcc.n	3dd2 <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
    3dc8:	4628      	mov	r0, r5
    3dca:	f004 fd72 	bl	88b2 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
    3dce:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
    3dd0:	e01b      	b.n	3e0a <spi_nrfx_init+0x82>
		if (!device_is_ready(cs_gpio->port)) {
    3dd2:	6820      	ldr	r0, [r4, #0]
    3dd4:	f004 ff19 	bl	8c0a <z_device_is_ready>
    3dd8:	b9d8      	cbnz	r0, 3e12 <spi_nrfx_init+0x8a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    3dda:	6823      	ldr	r3, [r4, #0]
    3ddc:	6819      	ldr	r1, [r3, #0]
    3dde:	7923      	ldrb	r3, [r4, #4]
    3de0:	466c      	mov	r4, sp
    3de2:	b08a      	sub	sp, #40	; 0x28
    3de4:	466a      	mov	r2, sp
    3de6:	481c      	ldr	r0, [pc, #112]	; (3e58 <spi_nrfx_init+0xd0>)
    3de8:	61d3      	str	r3, [r2, #28]
    3dea:	f44f 7300 	mov.w	r3, #512	; 0x200
    3dee:	8413      	strh	r3, [r2, #32]
    3df0:	4b1a      	ldr	r3, [pc, #104]	; (3e5c <spi_nrfx_init+0xd4>)
    3df2:	e9c2 0105 	strd	r0, r1, [r2, #20]
    3df6:	481a      	ldr	r0, [pc, #104]	; (3e60 <spi_nrfx_init+0xd8>)
    3df8:	f842 3f10 	str.w	r3, [r2, #16]!
    3dfc:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    3e00:	f004 fd1e 	bl	8840 <z_log_msg_static_create.constprop.0>
			return -ENODEV;
    3e04:	f06f 0012 	mvn.w	r0, #18
    3e08:	46a5      	mov	sp, r4
#endif
}
    3e0a:	370c      	adds	r7, #12
    3e0c:	46bd      	mov	sp, r7
    3e0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
    3e12:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
    3e14:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
    3e16:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
    3e18:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
    3e1c:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3e20:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    3e24:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    3e26:	bf54      	ite	pl
    3e28:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    3e2c:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    3e30:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3e34:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    3e38:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3e3a:	bf4c      	ite	mi
    3e3c:	ea4c 0308 	orrmi.w	r3, ip, r8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    3e40:	ea2c 0308 	bicpl.w	r3, ip, r8
    3e44:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
    3e48:	f8d9 3000 	ldr.w	r3, [r9]
    3e4c:	4798      	blx	r3
		if (ret < 0) {
    3e4e:	2800      	cmp	r0, #0
    3e50:	dbdb      	blt.n	3e0a <spi_nrfx_init+0x82>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    3e52:	3408      	adds	r4, #8
    3e54:	e7b2      	b.n	3dbc <spi_nrfx_init+0x34>
    3e56:	bf00      	nop
    3e58:	00009cf9 	.word	0x00009cf9
    3e5c:	01000004 	.word	0x01000004
    3e60:	00009338 	.word	0x00009338

00003e64 <transfer_next_chunk>:
{
    3e64:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    3e66:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    3e68:	6847      	ldr	r7, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    3e6a:	6e66      	ldr	r6, [r4, #100]	; 0x64
		return ctx->rx_len;
    3e6c:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
{
    3e6e:	b085      	sub	sp, #20
    3e70:	4605      	mov	r5, r0
	if (!ctx->tx_len) {
    3e72:	b93e      	cbnz	r6, 3e84 <transfer_next_chunk+0x20>
	if (chunk_len > 0) {
    3e74:	bb6b      	cbnz	r3, 3ed2 <transfer_next_chunk+0x6e>
	int error = 0;
    3e76:	4619      	mov	r1, r3
	finish_transaction(dev, error);
    3e78:	4628      	mov	r0, r5
}
    3e7a:	b005      	add	sp, #20
    3e7c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	finish_transaction(dev, error);
    3e80:	f004 bd39 	b.w	88f6 <finish_transaction>
		const uint8_t *tx_buf = ctx->tx_buf;
    3e84:	6e21      	ldr	r1, [r4, #96]	; 0x60
	} else if (!ctx->rx_len) {
    3e86:	bb03      	cbnz	r3, 3eca <transfer_next_chunk+0x66>
	return !!(ctx->tx_buf && ctx->tx_len);
    3e88:	bb31      	cbnz	r1, 3ed8 <transfer_next_chunk+0x74>
		if (chunk_len > dev_config->max_chunk_len) {
    3e8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    3e8c:	6e23      	ldr	r3, [r4, #96]	; 0x60
		xfer.p_tx_buffer = tx_buf;
    3e8e:	9100      	str	r1, [sp, #0]
    3e90:	42b2      	cmp	r2, r6
    3e92:	bf28      	it	cs
    3e94:	4632      	movcs	r2, r6
		dev_data->chunk_len = chunk_len;
    3e96:	6762      	str	r2, [r4, #116]	; 0x74
    3e98:	b11b      	cbz	r3, 3ea2 <transfer_next_chunk+0x3e>
    3e9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    3e9c:	2b00      	cmp	r3, #0
    3e9e:	bf18      	it	ne
    3ea0:	4613      	movne	r3, r2
    3ea2:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    3ea4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    3ea6:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    3ea8:	b11b      	cbz	r3, 3eb2 <transfer_next_chunk+0x4e>
    3eaa:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    3eac:	2b00      	cmp	r3, #0
    3eae:	bf18      	it	ne
    3eb0:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    3eb2:	2200      	movs	r2, #0
    3eb4:	4669      	mov	r1, sp
    3eb6:	4638      	mov	r0, r7
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    3eb8:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    3eba:	f002 f9c3 	bl	6244 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    3ebe:	4b0e      	ldr	r3, [pc, #56]	; (3ef8 <transfer_next_chunk+0x94>)
    3ec0:	4298      	cmp	r0, r3
    3ec2:	d017      	beq.n	3ef4 <transfer_next_chunk+0x90>
			error = -EIO;
    3ec4:	f06f 0104 	mvn.w	r1, #4
    3ec8:	e7d6      	b.n	3e78 <transfer_next_chunk+0x14>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    3eca:	429e      	cmp	r6, r3
    3ecc:	bf28      	it	cs
    3ece:	461e      	movcs	r6, r3
    3ed0:	e7da      	b.n	3e88 <transfer_next_chunk+0x24>
		const uint8_t *tx_buf = ctx->tx_buf;
    3ed2:	6e21      	ldr	r1, [r4, #96]	; 0x60
    3ed4:	461e      	mov	r6, r3
    3ed6:	e7d8      	b.n	3e8a <transfer_next_chunk+0x26>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    3ed8:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    3edc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    3ee0:	d0d3      	beq.n	3e8a <transfer_next_chunk+0x26>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
    3ee2:	2e08      	cmp	r6, #8
    3ee4:	bf28      	it	cs
    3ee6:	2608      	movcs	r6, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
    3ee8:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
    3eea:	4632      	mov	r2, r6
    3eec:	f004 fb0b 	bl	8506 <memcpy>
			tx_buf = dev_data->buffer;
    3ef0:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
    3ef2:	e7ca      	b.n	3e8a <transfer_next_chunk+0x26>
}
    3ef4:	b005      	add	sp, #20
    3ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3ef8:	0bad0000 	.word	0x0bad0000

00003efc <event_handler>:
{
    3efc:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    3efe:	7803      	ldrb	r3, [r0, #0]
{
    3f00:	b086      	sub	sp, #24
    3f02:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    3f04:	2b00      	cmp	r3, #0
    3f06:	d15d      	bne.n	3fc4 <event_handler+0xc8>
		if (dev_data->chunk_len == 0) {
    3f08:	6f4a      	ldr	r2, [r1, #116]	; 0x74
    3f0a:	b93a      	cbnz	r2, 3f1c <event_handler+0x20>
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    3f0c:	6f20      	ldr	r0, [r4, #112]	; 0x70
    3f0e:	f06f 0173 	mvn.w	r1, #115	; 0x73
}
    3f12:	b006      	add	sp, #24
    3f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    3f18:	f004 bced 	b.w	88f6 <finish_transaction>
	if (!ctx->tx_len) {
    3f1c:	6e4b      	ldr	r3, [r1, #100]	; 0x64
    3f1e:	b15b      	cbz	r3, 3f38 <event_handler+0x3c>
	if (len > ctx->tx_len) {
    3f20:	429a      	cmp	r2, r3
    3f22:	d91e      	bls.n	3f62 <event_handler+0x66>
		LOG_ERR("Update exceeds current buffer");
    3f24:	4b28      	ldr	r3, [pc, #160]	; (3fc8 <event_handler+0xcc>)
    3f26:	9305      	str	r3, [sp, #20]
    3f28:	4828      	ldr	r0, [pc, #160]	; (3fcc <event_handler+0xd0>)
    3f2a:	2302      	movs	r3, #2
    3f2c:	aa04      	add	r2, sp, #16
    3f2e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3f32:	9304      	str	r3, [sp, #16]
    3f34:	f004 fc84 	bl	8840 <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
    3f38:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    3f3a:	6f62      	ldr	r2, [r4, #116]	; 0x74
    3f3c:	b15b      	cbz	r3, 3f56 <event_handler+0x5a>
	if (len > ctx->rx_len) {
    3f3e:	429a      	cmp	r2, r3
    3f40:	d927      	bls.n	3f92 <event_handler+0x96>
		LOG_ERR("Update exceeds current buffer");
    3f42:	4b21      	ldr	r3, [pc, #132]	; (3fc8 <event_handler+0xcc>)
    3f44:	9305      	str	r3, [sp, #20]
    3f46:	4821      	ldr	r0, [pc, #132]	; (3fcc <event_handler+0xd0>)
    3f48:	2302      	movs	r3, #2
    3f4a:	aa04      	add	r2, sp, #16
    3f4c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3f50:	9304      	str	r3, [sp, #16]
    3f52:	f004 fc75 	bl	8840 <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
    3f56:	6f20      	ldr	r0, [r4, #112]	; 0x70
}
    3f58:	b006      	add	sp, #24
    3f5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    3f5e:	f7ff bf81 	b.w	3e64 <transfer_next_chunk>
	ctx->tx_len -= len;
    3f62:	1a9b      	subs	r3, r3, r2
    3f64:	664b      	str	r3, [r1, #100]	; 0x64
	if (!ctx->tx_len) {
    3f66:	b973      	cbnz	r3, 3f86 <event_handler+0x8a>
		++ctx->current_tx;
    3f68:	6d0b      	ldr	r3, [r1, #80]	; 0x50
    3f6a:	3308      	adds	r3, #8
    3f6c:	650b      	str	r3, [r1, #80]	; 0x50
		--ctx->tx_count;
    3f6e:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    3f70:	3b01      	subs	r3, #1
    3f72:	654b      	str	r3, [r1, #84]	; 0x54
			spi_context_get_next_buf(&ctx->current_tx,
    3f74:	f101 0264 	add.w	r2, r1, #100	; 0x64
    3f78:	f104 0050 	add.w	r0, r4, #80	; 0x50
    3f7c:	3154      	adds	r1, #84	; 0x54
    3f7e:	f004 fc4c 	bl	881a <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    3f82:	6620      	str	r0, [r4, #96]	; 0x60
    3f84:	e7d8      	b.n	3f38 <event_handler+0x3c>
	} else if (ctx->tx_buf) {
    3f86:	6e0b      	ldr	r3, [r1, #96]	; 0x60
    3f88:	2b00      	cmp	r3, #0
    3f8a:	d0d5      	beq.n	3f38 <event_handler+0x3c>
		ctx->tx_buf += dfs * len;
    3f8c:	4413      	add	r3, r2
    3f8e:	660b      	str	r3, [r1, #96]	; 0x60
    3f90:	e7d2      	b.n	3f38 <event_handler+0x3c>
	ctx->rx_len -= len;
    3f92:	1a9b      	subs	r3, r3, r2
    3f94:	66e3      	str	r3, [r4, #108]	; 0x6c
	if (!ctx->rx_len) {
    3f96:	b97b      	cbnz	r3, 3fb8 <event_handler+0xbc>
		++ctx->current_rx;
    3f98:	6da3      	ldr	r3, [r4, #88]	; 0x58
    3f9a:	3308      	adds	r3, #8
    3f9c:	65a3      	str	r3, [r4, #88]	; 0x58
		--ctx->rx_count;
    3f9e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
    3fa0:	3b01      	subs	r3, #1
    3fa2:	65e3      	str	r3, [r4, #92]	; 0x5c
			spi_context_get_next_buf(&ctx->current_rx,
    3fa4:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    3fa8:	f104 015c 	add.w	r1, r4, #92	; 0x5c
    3fac:	f104 0058 	add.w	r0, r4, #88	; 0x58
    3fb0:	f004 fc33 	bl	881a <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    3fb4:	66a0      	str	r0, [r4, #104]	; 0x68
    3fb6:	e7ce      	b.n	3f56 <event_handler+0x5a>
	} else if (ctx->rx_buf) {
    3fb8:	6ea3      	ldr	r3, [r4, #104]	; 0x68
    3fba:	2b00      	cmp	r3, #0
    3fbc:	d0cb      	beq.n	3f56 <event_handler+0x5a>
		ctx->rx_buf += dfs * len;
    3fbe:	4413      	add	r3, r2
    3fc0:	66a3      	str	r3, [r4, #104]	; 0x68
    3fc2:	e7c8      	b.n	3f56 <event_handler+0x5a>
}
    3fc4:	b006      	add	sp, #24
    3fc6:	bd10      	pop	{r4, pc}
    3fc8:	00009d1d 	.word	0x00009d1d
    3fcc:	00009338 	.word	0x00009338

00003fd0 <transceive>:
{
    3fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3fd4:	b08d      	sub	sp, #52	; 0x34
    3fd6:	af00      	add	r7, sp, #0
    3fd8:	469a      	mov	sl, r3
	const struct spi_nrfx_config *dev_config = dev->config;
    3fda:	6843      	ldr	r3, [r0, #4]
    3fdc:	60bb      	str	r3, [r7, #8]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    3fde:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    3fe0:	6904      	ldr	r4, [r0, #16]
{
    3fe2:	613a      	str	r2, [r7, #16]
    3fe4:	049b      	lsls	r3, r3, #18
    3fe6:	4606      	mov	r6, r0
    3fe8:	4688      	mov	r8, r1
    3fea:	d439      	bmi.n	4060 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60>
	return z_impl_k_sem_take(sem, timeout);
    3fec:	f04f 33ff 	mov.w	r3, #4294967295
    3ff0:	f04f 32ff 	mov.w	r2, #4294967295
    3ff4:	f104 0010 	add.w	r0, r4, #16
    3ff8:	f002 fe38 	bl	6c6c <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    3ffc:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
    4000:	f884 304c 	strb.w	r3, [r4, #76]	; 0x4c
	ctx->callback = callback;
    4004:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
    4006:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->callback_data = callback_data;
    4008:	6e3b      	ldr	r3, [r7, #96]	; 0x60
	ctx->owner = spi_cfg;
    400a:	f8c4 8004 	str.w	r8, [r4, #4]
	ctx->callback_data = callback_data;
    400e:	64a3      	str	r3, [r4, #72]	; 0x48
	const struct spi_nrfx_config *dev_config = dev->config;
    4010:	6873      	ldr	r3, [r6, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    4012:	f8d6 9010 	ldr.w	r9, [r6, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    4016:	617b      	str	r3, [r7, #20]
	uint32_t max_freq = dev_config->max_freq;
    4018:	689b      	ldr	r3, [r3, #8]
    401a:	607b      	str	r3, [r7, #4]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    401c:	f899 3079 	ldrb.w	r3, [r9, #121]	; 0x79
    4020:	60fb      	str	r3, [r7, #12]
    4022:	b123      	cbz	r3, 402e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2e>
    4024:	f8d9 3000 	ldr.w	r3, [r9]
    4028:	4598      	cmp	r8, r3
    402a:	f000 80c9 	beq.w	41c0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1c0>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    402e:	f8b8 c004 	ldrh.w	ip, [r8, #4]
    4032:	f41c 6f00 	tst.w	ip, #2048	; 0x800
    4036:	d01a      	beq.n	406e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x6e>
		LOG_ERR("Half-duplex not supported");
    4038:	4bb4      	ldr	r3, [pc, #720]	; (430c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30c>)
    403a:	62fb      	str	r3, [r7, #44]	; 0x2c
    403c:	2302      	movs	r3, #2
    403e:	48b4      	ldr	r0, [pc, #720]	; (4310 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x310>)
    4040:	62bb      	str	r3, [r7, #40]	; 0x28
    4042:	f107 0228 	add.w	r2, r7, #40	; 0x28
    4046:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
    404a:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
    404e:	f004 fbf7 	bl	8840 <z_log_msg_static_create.constprop.0>
		ctx->owner = NULL;
    4052:	2300      	movs	r3, #0
    4054:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    4056:	f104 0010 	add.w	r0, r4, #16
    405a:	f002 fde1 	bl	6c20 <z_impl_k_sem_give>
}
    405e:	e150      	b.n	4302 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x302>
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    4060:	69a3      	ldr	r3, [r4, #24]
    4062:	2b00      	cmp	r3, #0
    4064:	d1c2      	bne.n	3fec <transceive+0x1c>
		(k_sem_count_get(&ctx->lock) == 0) &&
    4066:	6863      	ldr	r3, [r4, #4]
    4068:	4299      	cmp	r1, r3
    406a:	d1bf      	bne.n	3fec <transceive+0x1c>
    406c:	e7d0      	b.n	4010 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x10>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    406e:	f01c 0f01 	tst.w	ip, #1
    4072:	d015      	beq.n	40a0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa0>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    4074:	466d      	mov	r5, sp
    4076:	b088      	sub	sp, #32
    4078:	6833      	ldr	r3, [r6, #0]
    407a:	466a      	mov	r2, sp
    407c:	49a5      	ldr	r1, [pc, #660]	; (4314 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x314>)
    407e:	48a4      	ldr	r0, [pc, #656]	; (4310 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x310>)
    4080:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4084:	f44f 7300 	mov.w	r3, #512	; 0x200
    4088:	8393      	strh	r3, [r2, #28]
    408a:	4ba3      	ldr	r3, [pc, #652]	; (4318 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x318>)
    408c:	f842 3f10 	str.w	r3, [r2, #16]!
    4090:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    4094:	f004 fbd4 	bl	8840 <z_log_msg_static_create.constprop.0>
    4098:	46ad      	mov	sp, r5
		return -EINVAL;
    409a:	f06f 0515 	mvn.w	r5, #21
    409e:	e7d8      	b.n	4052 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x52>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    40a0:	f01c 0f08 	tst.w	ip, #8
    40a4:	d00b      	beq.n	40be <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xbe>
		LOG_ERR("Loopback mode is not supported");
    40a6:	4b9d      	ldr	r3, [pc, #628]	; (431c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x31c>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
    40a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    40aa:	2302      	movs	r3, #2
    40ac:	4898      	ldr	r0, [pc, #608]	; (4310 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x310>)
    40ae:	62bb      	str	r3, [r7, #40]	; 0x28
    40b0:	f107 0228 	add.w	r2, r7, #40	; 0x28
    40b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    40b8:	f004 fbc2 	bl	8840 <z_log_msg_static_create.constprop.0>
	if (error == 0) {
    40bc:	e7ed      	b.n	409a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x9a>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    40be:	f3cc 1345 	ubfx	r3, ip, #5, #6
    40c2:	2b08      	cmp	r3, #8
    40c4:	d001      	beq.n	40ca <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xca>
		LOG_ERR("Word sizes other than 8 bits are not supported");
    40c6:	4b96      	ldr	r3, [pc, #600]	; (4320 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x320>)
    40c8:	e7ee      	b.n	40a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa8>
	if (spi_cfg->frequency < 125000) {
    40ca:	f8d8 5000 	ldr.w	r5, [r8]
    40ce:	4b95      	ldr	r3, [pc, #596]	; (4324 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x324>)
    40d0:	429d      	cmp	r5, r3
    40d2:	d801      	bhi.n	40d8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xd8>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    40d4:	4b94      	ldr	r3, [pc, #592]	; (4328 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x328>)
    40d6:	e7e7      	b.n	40a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0xa8>
	config = dev_config->def_config;
    40d8:	697b      	ldr	r3, [r7, #20]
    40da:	f103 0b0c 	add.w	fp, r3, #12
    40de:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
    40e2:	f107 0e18 	add.w	lr, r7, #24
    40e6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    40ea:	f8db 3000 	ldr.w	r3, [fp]
    40ee:	f8ce 3000 	str.w	r3, [lr]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    40f2:	687b      	ldr	r3, [r7, #4]
    40f4:	42ab      	cmp	r3, r5
    40f6:	bf28      	it	cs
    40f8:	462b      	movcs	r3, r5
    40fa:	461d      	mov	r5, r3
	if (frequency < 250000) {
    40fc:	4b8b      	ldr	r3, [pc, #556]	; (432c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x32c>)
    40fe:	429d      	cmp	r5, r3
    4100:	d946      	bls.n	4190 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x190>
	} else if (frequency < 500000) {
    4102:	4b8b      	ldr	r3, [pc, #556]	; (4330 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x330>)
    4104:	429d      	cmp	r5, r3
    4106:	d946      	bls.n	4196 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x196>
	} else if (frequency < 1000000) {
    4108:	4b8a      	ldr	r3, [pc, #552]	; (4334 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x334>)
    410a:	429d      	cmp	r5, r3
    410c:	d946      	bls.n	419c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x19c>
	} else if (frequency < 2000000) {
    410e:	4b8a      	ldr	r3, [pc, #552]	; (4338 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x338>)
    4110:	429d      	cmp	r5, r3
    4112:	d946      	bls.n	41a2 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a2>
	} else if (frequency < 4000000) {
    4114:	4b89      	ldr	r3, [pc, #548]	; (433c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x33c>)
    4116:	429d      	cmp	r5, r3
    4118:	d946      	bls.n	41a8 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1a8>
		return NRF_SPIM_FREQ_4M;
    411a:	4b89      	ldr	r3, [pc, #548]	; (4340 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x340>)
    411c:	429d      	cmp	r5, r3
    411e:	bf2c      	ite	cs
    4120:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
    4124:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    4128:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    412c:	623d      	str	r5, [r7, #32]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    412e:	f00c 0304 	and.w	r3, ip, #4
    4132:	d03c      	beq.n	41ae <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ae>
			return NRF_SPIM_MODE_2;
    4134:	2b00      	cmp	r3, #0
    4136:	bf14      	ite	ne
    4138:	2303      	movne	r3, #3
    413a:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    413c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if (dev_data->initialized) {
    4140:	68fb      	ldr	r3, [r7, #12]
	if (operation & SPI_TRANSFER_LSB) {
    4142:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    4146:	f887 c025 	strb.w	ip, [r7, #37]	; 0x25
	if (dev_data->initialized) {
    414a:	b12b      	cbz	r3, 4158 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x158>
		nrfx_spim_uninit(&dev_config->spim);
    414c:	6978      	ldr	r0, [r7, #20]
    414e:	f002 f831 	bl	61b4 <nrfx_spim_uninit>
		dev_data->initialized = false;
    4152:	2300      	movs	r3, #0
    4154:	f889 3079 	strb.w	r3, [r9, #121]	; 0x79
	result = nrfx_spim_init(&dev_config->spim, &config,
    4158:	464b      	mov	r3, r9
    415a:	4a7a      	ldr	r2, [pc, #488]	; (4344 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x344>)
    415c:	6978      	ldr	r0, [r7, #20]
    415e:	f107 0118 	add.w	r1, r7, #24
    4162:	f001 ff79 	bl	6058 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    4166:	4b78      	ldr	r3, [pc, #480]	; (4348 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x348>)
    4168:	4298      	cmp	r0, r3
    416a:	d024      	beq.n	41b6 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1b6>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    416c:	466d      	mov	r5, sp
    416e:	b088      	sub	sp, #32
    4170:	466a      	mov	r2, sp
    4172:	4b76      	ldr	r3, [pc, #472]	; (434c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x34c>)
    4174:	e9c2 3005 	strd	r3, r0, [r2, #20]
    4178:	2303      	movs	r3, #3
    417a:	f842 3f10 	str.w	r3, [r2, #16]!
    417e:	4864      	ldr	r0, [pc, #400]	; (4310 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x310>)
    4180:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4184:	f004 fb5c 	bl	8840 <z_log_msg_static_create.constprop.0>
    4188:	46ad      	mov	sp, r5
		return -EIO;
    418a:	f06f 0504 	mvn.w	r5, #4
    418e:	e760      	b.n	4052 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x52>
		return NRF_SPIM_FREQ_125K;
    4190:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    4194:	e7c8      	b.n	4128 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x128>
		return NRF_SPIM_FREQ_250K;
    4196:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    419a:	e7c5      	b.n	4128 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x128>
		return NRF_SPIM_FREQ_500K;
    419c:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    41a0:	e7c2      	b.n	4128 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x128>
		return NRF_SPIM_FREQ_1M;
    41a2:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    41a6:	e7bf      	b.n	4128 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x128>
		return NRF_SPIM_FREQ_2M;
    41a8:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    41ac:	e7bc      	b.n	4128 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x128>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    41ae:	3b00      	subs	r3, #0
    41b0:	bf18      	it	ne
    41b2:	2301      	movne	r3, #1
    41b4:	e7c2      	b.n	413c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x13c>
	dev_data->initialized = true;
    41b6:	2301      	movs	r3, #1
    41b8:	f889 3079 	strb.w	r3, [r9, #121]	; 0x79
	ctx->config = spi_cfg;
    41bc:	f8c9 8000 	str.w	r8, [r9]
		dev_data->busy = true;
    41c0:	2301      	movs	r3, #1
    41c2:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    41c6:	693b      	ldr	r3, [r7, #16]
    41c8:	2b00      	cmp	r3, #0
    41ca:	d170      	bne.n	42ae <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ae>
    41cc:	6523      	str	r3, [r4, #80]	; 0x50
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    41ce:	2300      	movs	r3, #0
    41d0:	6563      	str	r3, [r4, #84]	; 0x54
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    41d2:	f104 0264 	add.w	r2, r4, #100	; 0x64
    41d6:	f104 0154 	add.w	r1, r4, #84	; 0x54
    41da:	f104 0050 	add.w	r0, r4, #80	; 0x50
    41de:	f004 fb1c 	bl	881a <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
    41e2:	6620      	str	r0, [r4, #96]	; 0x60
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    41e4:	f1ba 0f00 	cmp.w	sl, #0
    41e8:	d169      	bne.n	42be <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2be>
    41ea:	f8c4 a058 	str.w	sl, [r4, #88]	; 0x58
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    41ee:	2300      	movs	r3, #0
    41f0:	65e3      	str	r3, [r4, #92]	; 0x5c
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    41f2:	f104 026c 	add.w	r2, r4, #108	; 0x6c
    41f6:	f104 015c 	add.w	r1, r4, #92	; 0x5c
    41fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
    41fe:	f004 fb0c 	bl	881a <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    4202:	2500      	movs	r5, #0
	_spi_context_cs_control(ctx, on, false);
    4204:	462a      	mov	r2, r5
	ctx->rx_buf = (uint8_t *)
    4206:	66a0      	str	r0, [r4, #104]	; 0x68
	_spi_context_cs_control(ctx, on, false);
    4208:	2101      	movs	r1, #1
    420a:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    420c:	6425      	str	r5, [r4, #64]	; 0x40
	_spi_context_cs_control(ctx, on, false);
    420e:	f004 fb2e 	bl	886e <_spi_context_cs_control>
		transfer_next_chunk(dev);
    4212:	4630      	mov	r0, r6
    4214:	f7ff fe26 	bl	3e64 <transfer_next_chunk>
	if (wait) {
    4218:	f894 204c 	ldrb.w	r2, [r4, #76]	; 0x4c
    421c:	2a00      	cmp	r2, #0
    421e:	d170      	bne.n	4302 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x302>
static inline size_t spi_context_total_tx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;

	for (n = 0; n < ctx->tx_count; ++n) {
    4220:	6d60      	ldr	r0, [r4, #84]	; 0x54
    4222:	4613      	mov	r3, r2
    4224:	4283      	cmp	r3, r0
    4226:	d152      	bne.n	42ce <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ce>
}

static inline size_t spi_context_total_rx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;
    4228:	2300      	movs	r3, #0

	for (n = 0; n < ctx->rx_count; ++n) {
    422a:	6de5      	ldr	r5, [r4, #92]	; 0x5c
    422c:	4619      	mov	r1, r3
    422e:	42a9      	cmp	r1, r5
    4230:	d154      	bne.n	42dc <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2dc>
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    4232:	4293      	cmp	r3, r2
				     ctx->config->frequency;
    4234:	46a0      	mov	r8, r4
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    4236:	bf38      	it	cc
    4238:	4613      	movcc	r3, r2
    423a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    423e:	fb02 f503 	mul.w	r5, r2, r3
				     ctx->config->frequency;
    4242:	f858 3b28 	ldr.w	r3, [r8], #40
			return ((t * to_hz + off) / from_hz);
    4246:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    424a:	681b      	ldr	r3, [r3, #0]
    424c:	fbb5 f5f3 	udiv	r5, r5, r3
    4250:	f240 30e7 	movw	r0, #999	; 0x3e7
			timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    4254:	35c8      	adds	r5, #200	; 0xc8
    4256:	2100      	movs	r1, #0
    4258:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    425c:	2300      	movs	r3, #0
    425e:	fbe5 010c 	umlal	r0, r1, r5, ip
    4262:	f7fb ff3d 	bl	e0 <__aeabi_uldivmod>
    4266:	4602      	mov	r2, r0
    4268:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    426a:	4640      	mov	r0, r8
    426c:	f002 fcfe 	bl	6c6c <z_impl_k_sem_take>
		if (k_sem_take(&ctx->sync, timeout)) {
    4270:	2800      	cmp	r0, #0
    4272:	d03a      	beq.n	42ea <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2ea>
			LOG_ERR("Timeout waiting for transfer complete");
    4274:	4b36      	ldr	r3, [pc, #216]	; (4350 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x350>)
    4276:	62fb      	str	r3, [r7, #44]	; 0x2c
    4278:	2302      	movs	r3, #2
    427a:	4825      	ldr	r0, [pc, #148]	; (4310 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x310>)
    427c:	62bb      	str	r3, [r7, #40]	; 0x28
    427e:	f107 0228 	add.w	r2, r7, #40	; 0x28
    4282:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4286:	f004 fadb 	bl	8840 <z_log_msg_static_create.constprop.0>
			dev_data->chunk_len = 0;
    428a:	2500      	movs	r5, #0
			nrfx_spim_uninit(&dev_config->spim);
    428c:	68b8      	ldr	r0, [r7, #8]
			dev_data->chunk_len = 0;
    428e:	6765      	str	r5, [r4, #116]	; 0x74
			nrfx_spim_uninit(&dev_config->spim);
    4290:	f001 ff90 	bl	61b4 <nrfx_spim_uninit>
			dev_data->initialized = false;
    4294:	f884 5079 	strb.w	r5, [r4, #121]	; 0x79
			finish_transaction(dev, -ETIMEDOUT);
    4298:	f06f 0173 	mvn.w	r1, #115	; 0x73
    429c:	4630      	mov	r0, r6
    429e:	f004 fb2a 	bl	88f6 <finish_transaction>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_RESET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_reset(sem);
    42a2:	4640      	mov	r0, r8
    42a4:	f002 fd0a 	bl	6cbc <z_impl_k_sem_reset>
		error = spi_context_wait_for_completion(&dev_data->ctx);
    42a8:	f06f 0573 	mvn.w	r5, #115	; 0x73
    42ac:	e6d1      	b.n	4052 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x52>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    42ae:	693b      	ldr	r3, [r7, #16]
    42b0:	681b      	ldr	r3, [r3, #0]
    42b2:	6523      	str	r3, [r4, #80]	; 0x50
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    42b4:	2b00      	cmp	r3, #0
    42b6:	d08a      	beq.n	41ce <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ce>
    42b8:	693b      	ldr	r3, [r7, #16]
    42ba:	685b      	ldr	r3, [r3, #4]
    42bc:	e788      	b.n	41d0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1d0>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    42be:	f8da 3000 	ldr.w	r3, [sl]
    42c2:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    42c4:	2b00      	cmp	r3, #0
    42c6:	d092      	beq.n	41ee <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1ee>
    42c8:	f8da 3004 	ldr.w	r3, [sl, #4]
    42cc:	e790      	b.n	41f0 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x1f0>
		total_len += ctx->current_tx[n].len;
    42ce:	6d21      	ldr	r1, [r4, #80]	; 0x50
    42d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
	for (n = 0; n < ctx->tx_count; ++n) {
    42d4:	3301      	adds	r3, #1
		total_len += ctx->current_tx[n].len;
    42d6:	6849      	ldr	r1, [r1, #4]
    42d8:	440a      	add	r2, r1
	for (n = 0; n < ctx->tx_count; ++n) {
    42da:	e7a3      	b.n	4224 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x224>
		total_len += ctx->current_rx[n].len;
    42dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
    42de:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
	for (n = 0; n < ctx->rx_count; ++n) {
    42e2:	3101      	adds	r1, #1
		total_len += ctx->current_rx[n].len;
    42e4:	6840      	ldr	r0, [r0, #4]
    42e6:	4403      	add	r3, r0
	for (n = 0; n < ctx->rx_count; ++n) {
    42e8:	e7a1      	b.n	422e <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x22e>
		status = ctx->sync_status;
    42ea:	6c25      	ldr	r5, [r4, #64]	; 0x40
		if (error == -ETIMEDOUT) {
    42ec:	f115 0f74 	cmn.w	r5, #116	; 0x74
    42f0:	d0cb      	beq.n	428a <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28a>
	if (!ctx->asynchronous || (status < 0)) {
    42f2:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
    42f6:	2b00      	cmp	r3, #0
    42f8:	f43f aeab 	beq.w	4052 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x52>
    42fc:	2d00      	cmp	r5, #0
    42fe:	f6ff aea8 	blt.w	4052 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x52>
}
    4302:	4628      	mov	r0, r5
    4304:	3734      	adds	r7, #52	; 0x34
    4306:	46bd      	mov	sp, r7
    4308:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    430c:	00009d3b 	.word	0x00009d3b
    4310:	00009338 	.word	0x00009338
    4314:	00009d55 	.word	0x00009d55
    4318:	01000003 	.word	0x01000003
    431c:	00009d77 	.word	0x00009d77
    4320:	00009d96 	.word	0x00009d96
    4324:	0001e847 	.word	0x0001e847
    4328:	00009dc5 	.word	0x00009dc5
    432c:	0003d08f 	.word	0x0003d08f
    4330:	0007a11f 	.word	0x0007a11f
    4334:	000f423f 	.word	0x000f423f
    4338:	001e847f 	.word	0x001e847f
    433c:	003d08ff 	.word	0x003d08ff
    4340:	007a1200 	.word	0x007a1200
    4344:	00003efd 	.word	0x00003efd
    4348:	0bad0000 	.word	0x0bad0000
    434c:	00009df6 	.word	0x00009df6
    4350:	00009e1d 	.word	0x00009e1d

00004354 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    4354:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    4356:	2301      	movs	r3, #1
    4358:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    435a:	4a0e      	ldr	r2, [pc, #56]	; (4394 <compare_int_lock+0x40>)
    435c:	f3bf 8f5b 	dmb	ish
    4360:	43dc      	mvns	r4, r3
    4362:	e852 1f00 	ldrex	r1, [r2]
    4366:	ea01 0504 	and.w	r5, r1, r4
    436a:	e842 5600 	strex	r6, r5, [r2]
    436e:	2e00      	cmp	r6, #0
    4370:	d1f7      	bne.n	4362 <compare_int_lock+0xe>
    4372:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4376:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    437a:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    437c:	4806      	ldr	r0, [pc, #24]	; (4398 <compare_int_lock+0x44>)
    437e:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    4382:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4386:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    438a:	420b      	tst	r3, r1
}
    438c:	bf14      	ite	ne
    438e:	2001      	movne	r0, #1
    4390:	2000      	moveq	r0, #0
    4392:	bd70      	pop	{r4, r5, r6, pc}
    4394:	200009f8 	.word	0x200009f8
    4398:	40011000 	.word	0x40011000

0000439c <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    439c:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    439e:	490e      	ldr	r1, [pc, #56]	; (43d8 <sys_clock_timeout_handler+0x3c>)
    43a0:	e9d1 3400 	ldrd	r3, r4, [r1]
    43a4:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    43a6:	18c3      	adds	r3, r0, r3
    43a8:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    43ac:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    43b0:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    43b4:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    43b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    43bc:	d209      	bcs.n	43d2 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    43be:	4b07      	ldr	r3, [pc, #28]	; (43dc <sys_clock_timeout_handler+0x40>)
    43c0:	681b      	ldr	r3, [r3, #0]
    43c2:	0a1a      	lsrs	r2, r3, #8
    43c4:	061b      	lsls	r3, r3, #24
    43c6:	199c      	adds	r4, r3, r6
    43c8:	4b05      	ldr	r3, [pc, #20]	; (43e0 <sys_clock_timeout_handler+0x44>)
    43ca:	f142 0500 	adc.w	r5, r2, #0
    43ce:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    43d2:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    43d4:	f003 b9f2 	b.w	77bc <sys_clock_announce>
    43d8:	200006f8 	.word	0x200006f8
    43dc:	200009fc 	.word	0x200009fc
    43e0:	20000700 	.word	0x20000700

000043e4 <compare_int_unlock>:
	if (key) {
    43e4:	b311      	cbz	r1, 442c <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    43e6:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    43ea:	2301      	movs	r3, #1
    43ec:	4a10      	ldr	r2, [pc, #64]	; (4430 <compare_int_unlock+0x4c>)
    43ee:	4083      	lsls	r3, r0
    43f0:	e852 cf00 	ldrex	ip, [r2]
    43f4:	ea4c 0c03 	orr.w	ip, ip, r3
    43f8:	e842 c100 	strex	r1, ip, [r2]
    43fc:	2900      	cmp	r1, #0
    43fe:	d1f7      	bne.n	43f0 <compare_int_unlock+0xc>
    4400:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    4404:	4a0b      	ldr	r2, [pc, #44]	; (4434 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4406:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    440a:	4083      	lsls	r3, r0
    440c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4410:	4b09      	ldr	r3, [pc, #36]	; (4438 <compare_int_unlock+0x54>)
    4412:	f3bf 8f5b 	dmb	ish
    4416:	681b      	ldr	r3, [r3, #0]
    4418:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    441c:	40c3      	lsrs	r3, r0
    441e:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4420:	bf42      	ittt	mi
    4422:	4b06      	ldrmi	r3, [pc, #24]	; (443c <compare_int_unlock+0x58>)
    4424:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    4428:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    442c:	4770      	bx	lr
    442e:	bf00      	nop
    4430:	200009f8 	.word	0x200009f8
    4434:	40011000 	.word	0x40011000
    4438:	200009f4 	.word	0x200009f4
    443c:	e000e100 	.word	0xe000e100

00004440 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4440:	4b0d      	ldr	r3, [pc, #52]	; (4478 <z_nrf_rtc_timer_read+0x38>)
    4442:	6818      	ldr	r0, [r3, #0]
    4444:	0a01      	lsrs	r1, r0, #8
    4446:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4448:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    444c:	4b0b      	ldr	r3, [pc, #44]	; (447c <z_nrf_rtc_timer_read+0x3c>)
    444e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    4452:	1818      	adds	r0, r3, r0
    4454:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4458:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    445c:	d20a      	bcs.n	4474 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    445e:	4b08      	ldr	r3, [pc, #32]	; (4480 <z_nrf_rtc_timer_read+0x40>)
    4460:	e9d3 2300 	ldrd	r2, r3, [r3]
    4464:	4290      	cmp	r0, r2
    4466:	eb71 0303 	sbcs.w	r3, r1, r3
    446a:	d203      	bcs.n	4474 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    446c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4470:	f141 0100 	adc.w	r1, r1, #0
}
    4474:	4770      	bx	lr
    4476:	bf00      	nop
    4478:	200009fc 	.word	0x200009fc
    447c:	40011000 	.word	0x40011000
    4480:	20000700 	.word	0x20000700

00004484 <compare_set>:
{
    4484:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4488:	4616      	mov	r6, r2
    448a:	461f      	mov	r7, r3
    448c:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    448e:	f7ff ff61 	bl	4354 <compare_int_lock>
    4492:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4494:	f7ff ffd4 	bl	4440 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4498:	42b0      	cmp	r0, r6
    449a:	eb71 0307 	sbcs.w	r3, r1, r7
    449e:	d251      	bcs.n	4544 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    44a0:	4b3a      	ldr	r3, [pc, #232]	; (458c <compare_set+0x108>)
    44a2:	1a30      	subs	r0, r6, r0
    44a4:	eb67 0101 	sbc.w	r1, r7, r1
    44a8:	4298      	cmp	r0, r3
    44aa:	f171 0100 	sbcs.w	r1, r1, #0
    44ae:	d26a      	bcs.n	4586 <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    44b0:	4b37      	ldr	r3, [pc, #220]	; (4590 <compare_set+0x10c>)
    44b2:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    44b6:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    44ba:	429f      	cmp	r7, r3
    44bc:	bf08      	it	eq
    44be:	4296      	cmpeq	r6, r2
    44c0:	d04e      	beq.n	4560 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    44c2:	4934      	ldr	r1, [pc, #208]	; (4594 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    44c4:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    44c8:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    44cc:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    44d0:	00ad      	lsls	r5, r5, #2
    44d2:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    44d6:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    44d8:	b2ad      	uxth	r5, r5
    44da:	f004 fa45 	bl	8968 <event_clear>
	return absolute_time & COUNTER_MAX;
    44de:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    44e2:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    44e6:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    44ea:	4a2b      	ldr	r2, [pc, #172]	; (4598 <compare_set+0x114>)
    44ec:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    44ee:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    44f2:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    44f4:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    44f8:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    44fa:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    44fe:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    4502:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    4506:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    450a:	f06f 0002 	mvn.w	r0, #2
    450e:	eba0 0008 	sub.w	r0, r0, r8
    4512:	4460      	add	r0, ip
    4514:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    4518:	4290      	cmp	r0, r2
    451a:	d921      	bls.n	4560 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    451c:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    451e:	b160      	cbz	r0, 453a <compare_set+0xb6>
     return p_reg->COUNTER;
    4520:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    4524:	eba8 000b 	sub.w	r0, r8, fp
    4528:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    452c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4530:	d916      	bls.n	4560 <compare_set+0xdc>
					event_clear(chan);
    4532:	4620      	mov	r0, r4
    4534:	f004 fa18 	bl	8968 <event_clear>
    4538:	4a17      	ldr	r2, [pc, #92]	; (4598 <compare_set+0x114>)
			cc_val = now + cc_inc;
    453a:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    453e:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    4542:	e7d9      	b.n	44f8 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    4544:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4546:	4a15      	ldr	r2, [pc, #84]	; (459c <compare_set+0x118>)
    4548:	f3bf 8f5b 	dmb	ish
    454c:	40a3      	lsls	r3, r4
    454e:	e852 0f00 	ldrex	r0, [r2]
    4552:	4318      	orrs	r0, r3
    4554:	e842 0100 	strex	r1, r0, [r2]
    4558:	2900      	cmp	r1, #0
    455a:	d1f8      	bne.n	454e <compare_set+0xca>
    455c:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    4560:	490b      	ldr	r1, [pc, #44]	; (4590 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    4562:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    4564:	0123      	lsls	r3, r4, #4
    4566:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    456a:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    456e:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    4570:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    4572:	6053      	str	r3, [r2, #4]
	return ret;
    4574:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    4576:	4620      	mov	r0, r4
    4578:	9900      	ldr	r1, [sp, #0]
    457a:	f7ff ff33 	bl	43e4 <compare_int_unlock>
}
    457e:	4628      	mov	r0, r5
    4580:	b003      	add	sp, #12
    4582:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    4586:	f06f 0515 	mvn.w	r5, #21
    458a:	e7f4      	b.n	4576 <compare_set+0xf2>
    458c:	00800001 	.word	0x00800001
    4590:	200006e8 	.word	0x200006e8
    4594:	40011000 	.word	0x40011000
    4598:	007ffffd 	.word	0x007ffffd
    459c:	200009f4 	.word	0x200009f4

000045a0 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    45a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    45a2:	4c1b      	ldr	r4, [pc, #108]	; (4610 <sys_clock_driver_init+0x70>)
    45a4:	4b1b      	ldr	r3, [pc, #108]	; (4614 <sys_clock_driver_init+0x74>)
    45a6:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    45aa:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    45ae:	4b1a      	ldr	r3, [pc, #104]	; (4618 <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    45b0:	2500      	movs	r5, #0
    45b2:	f04f 30ff 	mov.w	r0, #4294967295
    45b6:	f04f 31ff 	mov.w	r1, #4294967295
    45ba:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    45be:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    45c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    45c6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    45ca:	4b14      	ldr	r3, [pc, #80]	; (461c <sys_clock_driver_init+0x7c>)
    45cc:	2602      	movs	r6, #2
    45ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    45d2:	2101      	movs	r1, #1
    45d4:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    45d8:	2011      	movs	r0, #17
    45da:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    45de:	462a      	mov	r2, r5
    45e0:	f7fe fa38 	bl	2a54 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    45e4:	2011      	movs	r0, #17
    45e6:	f7fe fa05 	bl	29f4 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    45ea:	4a0d      	ldr	r2, [pc, #52]	; (4620 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    45ec:	2301      	movs	r3, #1
    45ee:	60a3      	str	r3, [r4, #8]
    45f0:	6023      	str	r3, [r4, #0]
    45f2:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    45f4:	4b0b      	ldr	r3, [pc, #44]	; (4624 <sys_clock_driver_init+0x84>)
    45f6:	4a0c      	ldr	r2, [pc, #48]	; (4628 <sys_clock_driver_init+0x88>)
    45f8:	9300      	str	r3, [sp, #0]
    45fa:	9501      	str	r5, [sp, #4]
    45fc:	2300      	movs	r3, #0
    45fe:	4628      	mov	r0, r5
    4600:	f7ff ff40 	bl	4484 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    4604:	4630      	mov	r0, r6
    4606:	f7ff f8bb 	bl	3780 <z_nrf_clock_control_lf_on>

	return 0;
}
    460a:	4628      	mov	r0, r5
    460c:	b002      	add	sp, #8
    460e:	bd70      	pop	{r4, r5, r6, pc}
    4610:	40011000 	.word	0x40011000
    4614:	000f0003 	.word	0x000f0003
    4618:	200006e8 	.word	0x200006e8
    461c:	e000e100 	.word	0xe000e100
    4620:	200009f8 	.word	0x200009f8
    4624:	0000439d 	.word	0x0000439d
    4628:	007fffff 	.word	0x007fffff

0000462c <rtc_nrf_isr>:
{
    462c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    4630:	4c2b      	ldr	r4, [pc, #172]	; (46e0 <rtc_nrf_isr+0xb4>)
    4632:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4636:	0799      	lsls	r1, r3, #30
    4638:	d50b      	bpl.n	4652 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    463a:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    463e:	b143      	cbz	r3, 4652 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    4640:	4a28      	ldr	r2, [pc, #160]	; (46e4 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4642:	2300      	movs	r3, #0
    4644:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    4648:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    464c:	6813      	ldr	r3, [r2, #0]
    464e:	3301      	adds	r3, #1
    4650:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    4652:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4656:	03da      	lsls	r2, r3, #15
    4658:	d523      	bpl.n	46a2 <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    465a:	f3bf 8f5b 	dmb	ish
    465e:	4b22      	ldr	r3, [pc, #136]	; (46e8 <rtc_nrf_isr+0xbc>)
    4660:	e853 2f00 	ldrex	r2, [r3]
    4664:	f022 0101 	bic.w	r1, r2, #1
    4668:	e843 1000 	strex	r0, r1, [r3]
    466c:	2800      	cmp	r0, #0
    466e:	d1f7      	bne.n	4660 <rtc_nrf_isr+0x34>
    4670:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    4674:	07d3      	lsls	r3, r2, #31
    4676:	d402      	bmi.n	467e <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4678:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    467c:	b18b      	cbz	r3, 46a2 <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    467e:	2500      	movs	r5, #0
    4680:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    4684:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    4688:	f7ff feda 	bl	4440 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    468c:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    4690:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
    4692:	4b16      	ldr	r3, [pc, #88]	; (46ec <rtc_nrf_isr+0xc0>)
    4694:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    4698:	42b0      	cmp	r0, r6
    469a:	41b9      	sbcs	r1, r7
    469c:	d204      	bcs.n	46a8 <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    469e:	f382 8810 	msr	PRIMASK, r2
}
    46a2:	b003      	add	sp, #12
    46a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    46a8:	f04f 38ff 	mov.w	r8, #4294967295
    46ac:	f04f 39ff 	mov.w	r9, #4294967295
    46b0:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    46b4:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    46b8:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    46ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    46be:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    46c2:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    46c6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    46ca:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
    46ce:	2900      	cmp	r1, #0
    46d0:	d0e7      	beq.n	46a2 <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
    46d2:	9000      	str	r0, [sp, #0]
    46d4:	4632      	mov	r2, r6
    46d6:	463b      	mov	r3, r7
    46d8:	4628      	mov	r0, r5
    46da:	4788      	blx	r1
    46dc:	e7e1      	b.n	46a2 <rtc_nrf_isr+0x76>
    46de:	bf00      	nop
    46e0:	40011000 	.word	0x40011000
    46e4:	200009fc 	.word	0x200009fc
    46e8:	200009f4 	.word	0x200009f4
    46ec:	200006e8 	.word	0x200006e8

000046f0 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    46f0:	1c43      	adds	r3, r0, #1
{
    46f2:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    46f4:	d022      	beq.n	473c <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    46f6:	2801      	cmp	r0, #1
    46f8:	dd22      	ble.n	4740 <sys_clock_set_timeout+0x50>
    46fa:	4a12      	ldr	r2, [pc, #72]	; (4744 <sys_clock_set_timeout+0x54>)
    46fc:	4b12      	ldr	r3, [pc, #72]	; (4748 <sys_clock_set_timeout+0x58>)
    46fe:	4290      	cmp	r0, r2
    4700:	bfd4      	ite	le
    4702:	4604      	movle	r4, r0
    4704:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4706:	f7ff fe9b 	bl	4440 <z_nrf_rtc_timer_read>
    470a:	4b10      	ldr	r3, [pc, #64]	; (474c <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    470c:	490e      	ldr	r1, [pc, #56]	; (4748 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    470e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4712:	1a80      	subs	r0, r0, r2
		cyc = 0;
    4714:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4718:	bf28      	it	cs
    471a:	2400      	movcs	r4, #0
	cyc += unannounced;
    471c:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    471e:	428c      	cmp	r4, r1
    4720:	bf28      	it	cs
    4722:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    4724:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4726:	490a      	ldr	r1, [pc, #40]	; (4750 <sys_clock_set_timeout+0x60>)
    4728:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    472a:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    472e:	9001      	str	r0, [sp, #4]
    4730:	f143 0300 	adc.w	r3, r3, #0
    4734:	f7ff fea6 	bl	4484 <compare_set>
}
    4738:	b002      	add	sp, #8
    473a:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    473c:	4c02      	ldr	r4, [pc, #8]	; (4748 <sys_clock_set_timeout+0x58>)
    473e:	e7e2      	b.n	4706 <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    4740:	2401      	movs	r4, #1
    4742:	e7e0      	b.n	4706 <sys_clock_set_timeout+0x16>
    4744:	007ffffe 	.word	0x007ffffe
    4748:	007fffff 	.word	0x007fffff
    474c:	200006f8 	.word	0x200006f8
    4750:	0000439d 	.word	0x0000439d

00004754 <sys_clock_elapsed>:
{
    4754:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4756:	f7ff fe73 	bl	4440 <z_nrf_rtc_timer_read>
    475a:	4b02      	ldr	r3, [pc, #8]	; (4764 <sys_clock_elapsed+0x10>)
    475c:	681b      	ldr	r3, [r3, #0]
}
    475e:	1ac0      	subs	r0, r0, r3
    4760:	bd08      	pop	{r3, pc}
    4762:	bf00      	nop
    4764:	200006f8 	.word	0x200006f8

00004768 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    4768:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    476a:	f7fd fb6d 	bl	1e48 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    476e:	4b07      	ldr	r3, [pc, #28]	; (478c <k_sys_fatal_error_handler+0x24>)
    4770:	9305      	str	r3, [sp, #20]
    4772:	2302      	movs	r3, #2
    4774:	9304      	str	r3, [sp, #16]
    4776:	4806      	ldr	r0, [pc, #24]	; (4790 <k_sys_fatal_error_handler+0x28>)
    4778:	2300      	movs	r3, #0
    477a:	aa04      	add	r2, sp, #16
    477c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4780:	f7fd fc42 	bl	2008 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    4784:	2000      	movs	r0, #0
    4786:	f7fe fecb 	bl	3520 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    478a:	bf00      	nop
    478c:	00009e5e 	.word	0x00009e5e
    4790:	000092f0 	.word	0x000092f0

00004794 <update_radio_bitrate>:
	nrf_radio_txpower_set(NRF_RADIO, tx_power.radio_tx_power);
}

static bool update_radio_bitrate(void)
{
	nrf_radio_mode_set(NRF_RADIO, esb_cfg.bitrate);
    4794:	4b0b      	ldr	r3, [pc, #44]	; (47c4 <update_radio_bitrate+0x30>)
    return (nrf_radio_txpower_t)(p_reg->TXPOWER >> RADIO_TXPOWER_TXPOWER_Pos);
}

NRF_STATIC_INLINE void nrf_radio_mode_set(NRF_RADIO_Type * p_reg, nrf_radio_mode_t radio_mode)
{
    p_reg->MODE = ((uint32_t) radio_mode << RADIO_MODE_MODE_Pos);
    4796:	4a0c      	ldr	r2, [pc, #48]	; (47c8 <update_radio_bitrate+0x34>)
    4798:	7a1b      	ldrb	r3, [r3, #8]
    479a:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	switch (esb_cfg.bitrate) {
    479e:	2b04      	cmp	r3, #4
    47a0:	d80d      	bhi.n	47be <update_radio_bitrate+0x2a>
    47a2:	e8df f003 	tbb	[pc, r3]
    47a6:	0308      	.short	0x0308
    47a8:	080c      	.short	0x080c
    47aa:	03          	.byte	0x03
    47ab:	00          	.byte	0x00

#if defined(RADIO_MODE_MODE_Ble_2Mbit)
	case ESB_BITRATE_2MBPS_BLE:
#endif /* defined(RADIO_MODE_MODE_Ble_2Mbit) */

		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_2MBPS;
    47ac:	4b07      	ldr	r3, [pc, #28]	; (47cc <update_radio_bitrate+0x38>)
    47ae:	22a0      	movs	r2, #160	; 0xa0
    47b0:	601a      	str	r2, [r3, #0]
	default:
		/* Should not be reached */
		return false;
	}

	return true;
    47b2:	2001      	movs	r0, #1
    47b4:	4770      	bx	lr
		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_1MBPS_BLE;
    47b6:	4b05      	ldr	r3, [pc, #20]	; (47cc <update_radio_bitrate+0x38>)
    47b8:	f44f 7296 	mov.w	r2, #300	; 0x12c
    47bc:	e7f8      	b.n	47b0 <update_radio_bitrate+0x1c>
	switch (esb_cfg.bitrate) {
    47be:	2000      	movs	r0, #0
}
    47c0:	4770      	bx	lr
    47c2:	bf00      	nop
    47c4:	20000af4 	.word	0x20000af4
    47c8:	40001000 	.word	0x40001000
    47cc:	20000a08 	.word	0x20000a08

000047d0 <reset_fifos>:
	return params_valid;
}

static void reset_fifos(void)
{
	tx_fifo.back = 0;
    47d0:	4a04      	ldr	r2, [pc, #16]	; (47e4 <reset_fifos+0x14>)
    47d2:	2300      	movs	r3, #0
	tx_fifo.front = 0;
    47d4:	e9c2 3308 	strd	r3, r3, [r2, #32]
	tx_fifo.count = 0;
    47d8:	6293      	str	r3, [r2, #40]	; 0x28

	rx_fifo.back = 0;
    47da:	4a03      	ldr	r2, [pc, #12]	; (47e8 <reset_fifos+0x18>)
	rx_fifo.front = 0;
    47dc:	e9c2 3308 	strd	r3, r3, [r2, #32]
	rx_fifo.count = 0;
    47e0:	6293      	str	r3, [r2, #40]	; 0x28
}
    47e2:	4770      	bx	lr
    47e4:	20000ac0 	.word	0x20000ac0
    47e8:	20000a94 	.word	0x20000a94

000047ec <esb_timer_handler>:
	return true;
}

static void esb_timer_handler(nrf_timer_event_t event_type, void *context)
{
	if (nrf_timer_int_enable_check(esb_timer.p_reg, NRF_TIMER_INT_COMPARE1_MASK)) {
    47ec:	4b05      	ldr	r3, [pc, #20]	; (4804 <esb_timer_handler+0x18>)
    47ee:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_timer_int_enable_check(NRF_TIMER_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    47f0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    47f4:	0392      	lsls	r2, r2, #14
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    47f6:	bf42      	ittt	mi
    47f8:	2200      	movmi	r2, #0
    47fa:	f8c3 2144 	strmi.w	r2, [r3, #324]	; 0x144
    47fe:	f8d3 3144 	ldrmi.w	r3, [r3, #324]	; 0x144
		nrf_timer_event_clear(esb_timer.p_reg, NRF_TIMER_EVENT_COMPARE1);
		if (on_timer_compare1 != NULL) {
			on_timer_compare1();
		}
	}
}
    4802:	4770      	bx	lr
    4804:	200000fc 	.word	0x200000fc

00004808 <on_radio_disabled_rx_ack>:
		}
	}
}

static void on_radio_disabled_rx_ack(void)
{
    4808:	b510      	push	{r4, lr}
	mpsl_fem_pa_configuration_clear();
    480a:	f7fb fd63 	bl	2d4 <mpsl_fem_pa_configuration_clear>
    p_reg->SHORTS = shorts_mask;
    480e:	4c0c      	ldr	r4, [pc, #48]	; (4840 <on_radio_disabled_rx_ack+0x38>)
	mpsl_fem_lna_configuration_set(&rx_event, &disable_event);
    4810:	490c      	ldr	r1, [pc, #48]	; (4844 <on_radio_disabled_rx_ack+0x3c>)
    4812:	480d      	ldr	r0, [pc, #52]	; (4848 <on_radio_disabled_rx_ack+0x40>)
    4814:	f7fb fd58 	bl	2c8 <mpsl_fem_lna_configuration_set>
    4818:	f240 1317 	movw	r3, #279	; 0x117
    481c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	esb_fem_for_ack_rx();

	nrf_radio_shorts_set(NRF_RADIO, (radio_shorts_common | NRF_RADIO_SHORT_DISABLED_TXEN_MASK));
	update_rf_payload_format(esb_cfg.payload_length);
    4820:	4a0a      	ldr	r2, [pc, #40]	; (484c <on_radio_disabled_rx_ack+0x44>)
    4822:	4b0b      	ldr	r3, [pc, #44]	; (4850 <on_radio_disabled_rx_ack+0x48>)
    4824:	7c50      	ldrb	r0, [r2, #17]
    4826:	681b      	ldr	r3, [r3, #0]
    4828:	4798      	blx	r3
    p_reg->PACKETPTR = (uint32_t)p_packet;
    482a:	4b0a      	ldr	r3, [pc, #40]	; (4854 <on_radio_disabled_rx_ack+0x4c>)
    482c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

	nrf_radio_packetptr_set(NRF_RADIO, rx_payload_buffer);
	on_radio_disabled = on_radio_disabled_rx;
    4830:	4b09      	ldr	r3, [pc, #36]	; (4858 <on_radio_disabled_rx_ack+0x50>)
    4832:	4a0a      	ldr	r2, [pc, #40]	; (485c <on_radio_disabled_rx_ack+0x54>)
    4834:	601a      	str	r2, [r3, #0]

	esb_state = ESB_STATE_PRX;
    4836:	4b0a      	ldr	r3, [pc, #40]	; (4860 <on_radio_disabled_rx_ack+0x58>)
    4838:	2204      	movs	r2, #4
    483a:	701a      	strb	r2, [r3, #0]
}
    483c:	bd10      	pop	{r4, pc}
    483e:	bf00      	nop
    4840:	40001000 	.word	0x40001000
    4844:	200000d0 	.word	0x200000d0
    4848:	0000952c 	.word	0x0000952c
    484c:	20000af4 	.word	0x20000af4
    4850:	20000a00 	.word	0x20000a00
    4854:	20000edf 	.word	0x20000edf
    4858:	20000a04 	.word	0x20000a04
    485c:	00004be9 	.word	0x00004be9
    4860:	20000f23 	.word	0x20000f23

00004864 <esb_fem_reset>:
{
    4864:	b508      	push	{r3, lr}
	nrf_timer_task_trigger(esb_timer.p_reg, NRF_TIMER_TASK_SHUTDOWN);
    4866:	4b08      	ldr	r3, [pc, #32]	; (4888 <esb_fem_reset+0x24>)
    4868:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    486a:	2201      	movs	r2, #1
    486c:	611a      	str	r2, [r3, #16]
	mpsl_fem_lna_configuration_clear();
    486e:	f7fb fd25 	bl	2bc <mpsl_fem_lna_configuration_clear>
	mpsl_fem_pa_configuration_clear();
    4872:	f7fb fd2f 	bl	2d4 <mpsl_fem_pa_configuration_clear>
	esb_ppi_for_fem_clear();
    4876:	f000 fd6b 	bl	5350 <esb_ppi_for_fem_clear>
	mpsl_fem_deactivate_now(MPSL_FEM_ALL);
    487a:	2003      	movs	r0, #3
    487c:	f7fb fd12 	bl	2a4 <mpsl_fem_deactivate_now>
}
    4880:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mpsl_fem_disable();
    4884:	f7fb bd14 	b.w	2b0 <mpsl_fem_disable>
    4888:	200000fc 	.word	0x200000fc

0000488c <update_radio_tx_power>:
{
    488c:	b507      	push	{r0, r1, r2, lr}
				      (RADIO_BASE_FREQUENCY + esb_addr.rf_channel), false);
    488e:	4b0b      	ldr	r3, [pc, #44]	; (48bc <update_radio_tx_power+0x30>)
	(void)mpsl_fem_tx_power_split(esb_cfg.tx_output_power, &tx_power,
    4890:	480b      	ldr	r0, [pc, #44]	; (48c0 <update_radio_tx_power+0x34>)
				      (RADIO_BASE_FREQUENCY + esb_addr.rf_channel), false);
    4892:	7cda      	ldrb	r2, [r3, #19]
	(void)mpsl_fem_tx_power_split(esb_cfg.tx_output_power, &tx_power,
    4894:	f990 000a 	ldrsb.w	r0, [r0, #10]
    4898:	2300      	movs	r3, #0
    489a:	f502 6216 	add.w	r2, r2, #2400	; 0x960
    489e:	a901      	add	r1, sp, #4
    48a0:	f7fb fd2a 	bl	2f8 <mpsl_fem_tx_power_split>
	err = mpsl_fem_pa_gain_set(&tx_power.fem);
    48a4:	f10d 0005 	add.w	r0, sp, #5
    48a8:	f7fb fd20 	bl	2ec <mpsl_fem_pa_gain_set>
    p_reg->TXPOWER = (((uint32_t)tx_power) << RADIO_TXPOWER_TXPOWER_Pos);
    48ac:	f89d 2004 	ldrb.w	r2, [sp, #4]
    48b0:	4b04      	ldr	r3, [pc, #16]	; (48c4 <update_radio_tx_power+0x38>)
    48b2:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
    48b6:	b003      	add	sp, #12
    48b8:	f85d fb04 	ldr.w	pc, [sp], #4
    48bc:	200000e8 	.word	0x200000e8
    48c0:	20000af4 	.word	0x20000af4
    48c4:	40001000 	.word	0x40001000

000048c8 <update_radio_addresses.part.0>:
static void update_radio_addresses(uint8_t update_mask)
    48c8:	b510      	push	{r4, lr}
		nrf_radio_prefix0_set(NRF_RADIO, bytewise_bit_swap(&esb_addr.pipe_prefixes[0]));
    48ca:	4c06      	ldr	r4, [pc, #24]	; (48e4 <update_radio_addresses.part.0+0x1c>)
    return p_reg->BASE1;
}

NRF_STATIC_INLINE void nrf_radio_prefix0_set(NRF_RADIO_Type * p_reg, uint32_t prefixes)
{
    p_reg->PREFIX0 = prefixes;
    48cc:	4906      	ldr	r1, [pc, #24]	; (48e8 <update_radio_addresses.part.0+0x20>)
    48ce:	4620      	mov	r0, r4
    48d0:	f004 f85a 	bl	8988 <bytewise_bit_swap>
    48d4:	f8c1 0524 	str.w	r0, [r1, #1316]	; 0x524
		nrf_radio_prefix1_set(NRF_RADIO, bytewise_bit_swap(&esb_addr.pipe_prefixes[4]));
    48d8:	1d20      	adds	r0, r4, #4
    48da:	f004 f855 	bl	8988 <bytewise_bit_swap>
    return p_reg->PREFIX0;
}

NRF_STATIC_INLINE void nrf_radio_prefix1_set(NRF_RADIO_Type * p_reg, uint32_t prefixes)
{
    p_reg->PREFIX1 = prefixes;
    48de:	f8c1 0528 	str.w	r0, [r1, #1320]	; 0x528
}
    48e2:	bd10      	pop	{r4, pc}
    48e4:	200000f0 	.word	0x200000f0
    48e8:	40001000 	.word	0x40001000

000048ec <esb_fem_for_rx_set>:
{
    48ec:	b508      	push	{r3, lr}
	if (mpsl_fem_lna_configuration_set(&rx_event, &disable_event) == 0) {
    48ee:	4907      	ldr	r1, [pc, #28]	; (490c <esb_fem_for_rx_set+0x20>)
    48f0:	4807      	ldr	r0, [pc, #28]	; (4910 <esb_fem_for_rx_set+0x24>)
    48f2:	f7fb fce9 	bl	2c8 <mpsl_fem_lna_configuration_set>
    48f6:	b938      	cbnz	r0, 4908 <esb_fem_for_rx_set+0x1c>
		esb_ppi_for_fem_set();
    48f8:	f000 fd0e 	bl	5318 <esb_ppi_for_fem_set>
		nrf_timer_shorts_set(esb_timer.p_reg,
    48fc:	4b05      	ldr	r3, [pc, #20]	; (4914 <esb_fem_for_rx_set+0x28>)
    48fe:	681b      	ldr	r3, [r3, #0]
    p_reg->SHORTS = mask;
    4900:	f240 4204 	movw	r2, #1028	; 0x404
    4904:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
    4908:	bd08      	pop	{r3, pc}
    490a:	bf00      	nop
    490c:	200000d0 	.word	0x200000d0
    4910:	0000952c 	.word	0x0000952c
    4914:	200000fc 	.word	0x200000fc

00004918 <clear_events_restart_rx>:
{
    4918:	b538      	push	{r3, r4, r5, lr}
	nrf_timer_task_trigger(esb_timer.p_reg, NRF_TIMER_TASK_SHUTDOWN);
    491a:	4b1b      	ldr	r3, [pc, #108]	; (4988 <clear_events_restart_rx+0x70>)
    p_reg->SHORTS = shorts_mask;
    491c:	4c1b      	ldr	r4, [pc, #108]	; (498c <clear_events_restart_rx+0x74>)
    491e:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4920:	2501      	movs	r5, #1
    4922:	611d      	str	r5, [r3, #16]
	esb_ppi_for_fem_clear();
    4924:	f000 fd14 	bl	5350 <esb_ppi_for_fem_clear>
	mpsl_fem_lna_configuration_clear();
    4928:	f7fb fcc8 	bl	2bc <mpsl_fem_lna_configuration_clear>
	mpsl_fem_disable();
    492c:	f7fb fcc0 	bl	2b0 <mpsl_fem_disable>
	esb_ppi_for_txrx_clear(true, false);
    4930:	2100      	movs	r1, #0
    4932:	4628      	mov	r0, r5
    4934:	f000 fd8e 	bl	5454 <esb_ppi_for_txrx_clear>
    4938:	f240 1313 	movw	r3, #275	; 0x113
    493c:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	update_rf_payload_format(esb_cfg.payload_length);
    4940:	4a13      	ldr	r2, [pc, #76]	; (4990 <clear_events_restart_rx+0x78>)
    4942:	4b14      	ldr	r3, [pc, #80]	; (4994 <clear_events_restart_rx+0x7c>)
    4944:	7c50      	ldrb	r0, [r2, #17]
    4946:	681b      	ldr	r3, [r3, #0]
    4948:	4798      	blx	r3
    p_reg->PACKETPTR = (uint32_t)p_packet;
    494a:	4b13      	ldr	r3, [pc, #76]	; (4998 <clear_events_restart_rx+0x80>)
    494c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4950:	2300      	movs	r3, #0
    4952:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    4956:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    495a:	6125      	str	r5, [r4, #16]
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    495c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	while (!nrf_radio_event_check(NRF_RADIO, NRF_RADIO_EVENT_DISABLED)) {
    4960:	2b00      	cmp	r3, #0
    4962:	d0fb      	beq.n	495c <clear_events_restart_rx+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4964:	2100      	movs	r1, #0
    4966:	f8c4 1110 	str.w	r1, [r4, #272]	; 0x110
    496a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    p_reg->SHORTS = shorts_mask;
    496e:	f240 1317 	movw	r3, #279	; 0x117
    4972:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	esb_ppi_for_txrx_set(true, false);
    4976:	2001      	movs	r0, #1
    4978:	f000 fd00 	bl	537c <esb_ppi_for_txrx_set>
	esb_fem_for_rx_set();
    497c:	f7ff ffb6 	bl	48ec <esb_fem_for_rx_set>
}

NRF_STATIC_INLINE void nrf_egu_task_trigger(NRF_EGU_Type * p_reg, nrf_egu_task_t egu_task)
{
    NRFX_ASSERT(p_reg);
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_task)) = 0x1UL;
    4980:	4b06      	ldr	r3, [pc, #24]	; (499c <clear_events_restart_rx+0x84>)
    4982:	2201      	movs	r2, #1
    4984:	619a      	str	r2, [r3, #24]
}
    4986:	bd38      	pop	{r3, r4, r5, pc}
    4988:	200000fc 	.word	0x200000fc
    498c:	40001000 	.word	0x40001000
    4990:	20000af4 	.word	0x20000af4
    4994:	20000a00 	.word	0x20000a00
    4998:	20000edf 	.word	0x20000edf
    499c:	40014000 	.word	0x40014000

000049a0 <rx_fifo_push_rfbuf.part.0>:
static bool rx_fifo_push_rfbuf(uint8_t pipe, uint8_t pid)
    49a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (esb_cfg.protocol == ESB_PROTOCOL_ESB_DPL) {
    49a4:	4b22      	ldr	r3, [pc, #136]	; (4a30 <rx_fifo_push_rfbuf.part.0+0x90>)
    49a6:	4f23      	ldr	r7, [pc, #140]	; (4a34 <rx_fifo_push_rfbuf.part.0+0x94>)
    49a8:	781a      	ldrb	r2, [r3, #0]
    49aa:	2a01      	cmp	r2, #1
static bool rx_fifo_push_rfbuf(uint8_t pipe, uint8_t pid)
    49ac:	4680      	mov	r8, r0
    49ae:	460e      	mov	r6, r1
	if (esb_cfg.protocol == ESB_PROTOCOL_ESB_DPL) {
    49b0:	d130      	bne.n	4a14 <rx_fifo_push_rfbuf.part.0+0x74>
		if (rx_pdu->type.dpl_pdu.length > CONFIG_ESB_MAX_PAYLOAD_LENGTH) {
    49b2:	783b      	ldrb	r3, [r7, #0]
    49b4:	f3c3 0205 	ubfx	r2, r3, #0, #6
    49b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    49bc:	2b20      	cmp	r3, #32
    49be:	d834      	bhi.n	4a2a <rx_fifo_push_rfbuf.part.0+0x8a>
		rx_fifo.payload[rx_fifo.back]->length = rx_pdu->type.dpl_pdu.length;
    49c0:	4b1d      	ldr	r3, [pc, #116]	; (4a38 <rx_fifo_push_rfbuf.part.0+0x98>)
    49c2:	6a19      	ldr	r1, [r3, #32]
    49c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    49c8:	701a      	strb	r2, [r3, #0]
	memcpy(rx_fifo.payload[rx_fifo.back]->data, rx_pdu->data,
    49ca:	4c1b      	ldr	r4, [pc, #108]	; (4a38 <rx_fifo_push_rfbuf.part.0+0x98>)
    49cc:	491b      	ldr	r1, [pc, #108]	; (4a3c <rx_fifo_push_rfbuf.part.0+0x9c>)
    49ce:	6a23      	ldr	r3, [r4, #32]
    49d0:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    49d4:	f810 2b05 	ldrb.w	r2, [r0], #5
    49d8:	f003 fd95 	bl	8506 <memcpy>
	rx_fifo.payload[rx_fifo.back]->pipe = pipe;
    49dc:	6a23      	ldr	r3, [r4, #32]
    return p_reg->TIFS;
}

NRF_STATIC_INLINE uint8_t nrf_radio_rssi_sample_get(NRF_RADIO_Type const * p_reg)
{
    return (uint8_t)((p_reg->RSSISAMPLE & RADIO_RSSISAMPLE_RSSISAMPLE_Msk) >>
    49de:	4a18      	ldr	r2, [pc, #96]	; (4a40 <rx_fifo_push_rfbuf.part.0+0xa0>)
    49e0:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    49e4:	f885 8001 	strb.w	r8, [r5, #1]
    49e8:	f8d2 2548 	ldr.w	r2, [r2, #1352]	; 0x548
	rx_fifo.payload[rx_fifo.back]->pid = pid;
    49ec:	712e      	strb	r6, [r5, #4]
	if (++rx_fifo.back >= CONFIG_ESB_RX_FIFO_SIZE) {
    49ee:	3301      	adds	r3, #1
    49f0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		rx_fifo.back = 0;
    49f4:	2b08      	cmp	r3, #8
	rx_fifo.payload[rx_fifo.back]->rssi = nrf_radio_rssi_sample_get(NRF_RADIO);
    49f6:	70aa      	strb	r2, [r5, #2]
	rx_fifo.payload[rx_fifo.back]->noack = !rx_pdu->type.dpl_pdu.no_ack;
    49f8:	787a      	ldrb	r2, [r7, #1]
		rx_fifo.back = 0;
    49fa:	bf28      	it	cs
    49fc:	2300      	movcs	r3, #0
    49fe:	6223      	str	r3, [r4, #32]
	rx_fifo.count++;
    4a00:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	rx_fifo.payload[rx_fifo.back]->noack = !rx_pdu->type.dpl_pdu.no_ack;
    4a02:	43d2      	mvns	r2, r2
    4a04:	f002 0201 	and.w	r2, r2, #1
	rx_fifo.count++;
    4a08:	3301      	adds	r3, #1
	rx_fifo.payload[rx_fifo.back]->noack = !rx_pdu->type.dpl_pdu.no_ack;
    4a0a:	70ea      	strb	r2, [r5, #3]
	rx_fifo.count++;
    4a0c:	62a3      	str	r3, [r4, #40]	; 0x28
	return true;
    4a0e:	2001      	movs	r0, #1
}
    4a10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_fifo.payload[rx_fifo.back]->length = rx_pdu->type.dpl_pdu.length;
    4a14:	4a08      	ldr	r2, [pc, #32]	; (4a38 <rx_fifo_push_rfbuf.part.0+0x98>)
    4a16:	6a11      	ldr	r1, [r2, #32]
    4a18:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
	} else if (esb_cfg.mode == ESB_MODE_PTX) {
    4a1c:	7859      	ldrb	r1, [r3, #1]
    4a1e:	b909      	cbnz	r1, 4a24 <rx_fifo_push_rfbuf.part.0+0x84>
		rx_fifo.payload[rx_fifo.back]->length = 0;
    4a20:	7011      	strb	r1, [r2, #0]
    4a22:	e7d2      	b.n	49ca <rx_fifo_push_rfbuf.part.0+0x2a>
		rx_fifo.payload[rx_fifo.back]->length = esb_cfg.payload_length;
    4a24:	7c5b      	ldrb	r3, [r3, #17]
    4a26:	7013      	strb	r3, [r2, #0]
    4a28:	e7cf      	b.n	49ca <rx_fifo_push_rfbuf.part.0+0x2a>
		return false;
    4a2a:	2000      	movs	r0, #0
    4a2c:	e7f0      	b.n	4a10 <rx_fifo_push_rfbuf.part.0+0x70>
    4a2e:	bf00      	nop
    4a30:	20000af4 	.word	0x20000af4
    4a34:	20000edf 	.word	0x20000edf
    4a38:	20000a94 	.word	0x20000a94
    4a3c:	20000ee1 	.word	0x20000ee1
    4a40:	40001000 	.word	0x40001000

00004a44 <nrf_radio_packet_configure.constprop.0>:
                    ((uint32_t)p_config->s1len << RADIO_PCNF0_S1LEN_Pos) |
    4a44:	7883      	ldrb	r3, [r0, #2]
                    ((uint32_t)p_config->s0len << RADIO_PCNF0_S0LEN_Pos) |
    4a46:	7842      	ldrb	r2, [r0, #1]
                    ((uint32_t)p_config->s1len << RADIO_PCNF0_S1LEN_Pos) |
    4a48:	041b      	lsls	r3, r3, #16
                    ((uint32_t)p_config->s0len << RADIO_PCNF0_S0LEN_Pos) |
    4a4a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->PCNF0 = (((uint32_t)p_config->lflen << RADIO_PCNF0_LFLEN_Pos) |
    4a4e:	7802      	ldrb	r2, [r0, #0]
                    ((uint32_t)p_config->s0len << RADIO_PCNF0_S0LEN_Pos) |
    4a50:	4313      	orrs	r3, r2
                        (RADIO_PCNF0_S1INCL_Include   << RADIO_PCNF0_S1INCL_Pos) :
    4a52:	78c2      	ldrb	r2, [r0, #3]
                    ((uint32_t)p_config->s1len << RADIO_PCNF0_S1LEN_Pos) |
    4a54:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
                    ((uint32_t)p_config->cilen << RADIO_PCNF0_CILEN_Pos) |
    4a58:	7902      	ldrb	r2, [r0, #4]
                        (RADIO_PCNF0_S1INCL_Automatic << RADIO_PCNF0_S1INCL_Pos) ) |
    4a5a:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                    ((uint32_t)p_config->plen << RADIO_PCNF0_PLEN_Pos) |
    4a5e:	7942      	ldrb	r2, [r0, #5]
                    ((uint32_t)p_config->cilen << RADIO_PCNF0_CILEN_Pos) |
    4a60:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                        (RADIO_PCNF0_CRCINC_Include << RADIO_PCNF0_CRCINC_Pos) :
    4a64:	7982      	ldrb	r2, [r0, #6]
                    ((uint32_t)p_config->plen << RADIO_PCNF0_PLEN_Pos) |
    4a66:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
                    ((uint32_t)p_config->termlen << RADIO_PCNF0_TERMLEN_Pos) |
    4a6a:	79c2      	ldrb	r2, [r0, #7]
    4a6c:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    p_reg->PCNF0 = (((uint32_t)p_config->lflen << RADIO_PCNF0_LFLEN_Pos) |
    4a70:	4a09      	ldr	r2, [pc, #36]	; (4a98 <nrf_radio_packet_configure.constprop.0+0x54>)
    4a72:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
                    ((uint32_t)p_config->balen   << RADIO_PCNF1_BALEN_Pos) |
    4a76:	7a83      	ldrb	r3, [r0, #10]
                    ((uint32_t)p_config->statlen << RADIO_PCNF1_STATLEN_Pos) |
    4a78:	7a41      	ldrb	r1, [r0, #9]
                    ((uint32_t)p_config->balen   << RADIO_PCNF1_BALEN_Pos) |
    4a7a:	041b      	lsls	r3, r3, #16
                    ((uint32_t)p_config->statlen << RADIO_PCNF1_STATLEN_Pos) |
    4a7c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    p_reg->PCNF1 = (((uint32_t)p_config->maxlen  << RADIO_PCNF1_MAXLEN_Pos) |
    4a80:	7a01      	ldrb	r1, [r0, #8]
                    ((uint32_t)p_config->statlen << RADIO_PCNF1_STATLEN_Pos) |
    4a82:	430b      	orrs	r3, r1
                         (RADIO_PCNF1_ENDIAN_Big    << RADIO_PCNF1_ENDIAN_Pos) :
    4a84:	7ac1      	ldrb	r1, [r0, #11]
                    ((uint32_t)p_config->balen   << RADIO_PCNF1_BALEN_Pos) |
    4a86:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                         (RADIO_PCNF1_WHITEEN_Enabled  << RADIO_PCNF1_WHITEEN_Pos) :
    4a8a:	7b01      	ldrb	r1, [r0, #12]
                         (RADIO_PCNF1_ENDIAN_Little << RADIO_PCNF1_ENDIAN_Pos) ) |
    4a8c:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    p_reg->PCNF1 = (((uint32_t)p_config->maxlen  << RADIO_PCNF1_MAXLEN_Pos) |
    4a90:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
}
    4a94:	4770      	bx	lr
    4a96:	bf00      	nop
    4a98:	40001000 	.word	0x40001000

00004a9c <update_rf_payload_format_esb>:
{
    4a9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    4a9e:	4604      	mov	r4, r0
	const nrf_radio_packet_conf_t packet_config = {
    4aa0:	220d      	movs	r2, #13
    4aa2:	2100      	movs	r1, #0
    4aa4:	4668      	mov	r0, sp
    4aa6:	f003 fd39 	bl	851c <memset>
    4aaa:	4b0a      	ldr	r3, [pc, #40]	; (4ad4 <update_rf_payload_format_esb+0x38>)
    4aac:	9300      	str	r3, [sp, #0]
		.balen = (esb_addr.addr_length - 1),
    4aae:	4b0a      	ldr	r3, [pc, #40]	; (4ad8 <update_rf_payload_format_esb+0x3c>)
    4ab0:	7c5b      	ldrb	r3, [r3, #17]
	const nrf_radio_packet_conf_t packet_config = {
    4ab2:	b2e0      	uxtb	r0, r4
		.balen = (esb_addr.addr_length - 1),
    4ab4:	3b01      	subs	r3, #1
	const nrf_radio_packet_conf_t packet_config = {
    4ab6:	f88d 0008 	strb.w	r0, [sp, #8]
    4aba:	f88d 0009 	strb.w	r0, [sp, #9]
    4abe:	f88d 300a 	strb.w	r3, [sp, #10]
	nrf_radio_packet_configure(NRF_RADIO, &packet_config);
    4ac2:	4668      	mov	r0, sp
	const nrf_radio_packet_conf_t packet_config = {
    4ac4:	2301      	movs	r3, #1
    4ac6:	f88d 300b 	strb.w	r3, [sp, #11]
	nrf_radio_packet_configure(NRF_RADIO, &packet_config);
    4aca:	f7ff ffbb 	bl	4a44 <nrf_radio_packet_configure.constprop.0>
}
    4ace:	b004      	add	sp, #16
    4ad0:	bd10      	pop	{r4, pc}
    4ad2:	bf00      	nop
    4ad4:	00010100 	.word	0x00010100
    4ad8:	200000e8 	.word	0x200000e8

00004adc <update_rf_payload_format_esb_dpl>:
{
    4adc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	nrf_radio_packet_conf_t packet_config = { 0 };
    4ade:	2300      	movs	r3, #0
    4ae0:	f8cd 3009 	str.w	r3, [sp, #9]
    4ae4:	f8cd 3001 	str.w	r3, [sp, #1]
    4ae8:	f8cd 3005 	str.w	r3, [sp, #5]
	packet_config.s1len = 3;
    4aec:	2303      	movs	r3, #3
    4aee:	f88d 3002 	strb.w	r3, [sp, #2]
	packet_config.lflen = (CONFIG_ESB_MAX_PAYLOAD_LENGTH <= 32) ? 6 : 8;
    4af2:	2306      	movs	r3, #6
    4af4:	f88d 3000 	strb.w	r3, [sp]
	packet_config.big_endian = true;
    4af8:	2301      	movs	r3, #1
    4afa:	f88d 300b 	strb.w	r3, [sp, #11]
	packet_config.balen = (esb_addr.addr_length - 1);
    4afe:	4b07      	ldr	r3, [pc, #28]	; (4b1c <update_rf_payload_format_esb_dpl+0x40>)
    4b00:	7c5b      	ldrb	r3, [r3, #17]
    4b02:	3b01      	subs	r3, #1
    4b04:	f88d 300a 	strb.w	r3, [sp, #10]
	nrf_radio_packet_configure(NRF_RADIO, &packet_config);
    4b08:	4668      	mov	r0, sp
	packet_config.maxlen = CONFIG_ESB_MAX_PAYLOAD_LENGTH;
    4b0a:	2320      	movs	r3, #32
    4b0c:	f88d 3008 	strb.w	r3, [sp, #8]
	nrf_radio_packet_configure(NRF_RADIO, &packet_config);
    4b10:	f7ff ff98 	bl	4a44 <nrf_radio_packet_configure.constprop.0>
}
    4b14:	b005      	add	sp, #20
    4b16:	f85d fb04 	ldr.w	pc, [sp], #4
    4b1a:	bf00      	nop
    4b1c:	200000e8 	.word	0x200000e8

00004b20 <RADIO_IRQHandler>:
	ISR_DIRECT_PM();
}

#else /* !IS_ENABLED(CONFIG_ESB_DYNAMIC_INTERRUPTS) */

ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    4b20:	4668      	mov	r0, sp
    4b22:	f020 0107 	bic.w	r1, r0, #7
    4b26:	468d      	mov	sp, r1
    4b28:	b501      	push	{r0, lr}
    return p_reg->INTENSET & mask;
    4b2a:	4b0c      	ldr	r3, [pc, #48]	; (4b5c <RADIO_IRQHandler+0x3c>)
    4b2c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_DISABLED_MASK) &&
    4b30:	06d2      	lsls	r2, r2, #27
    4b32:	d50b      	bpl.n	4b4c <RADIO_IRQHandler+0x2c>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    4b34:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    4b38:	b142      	cbz	r2, 4b4c <RADIO_IRQHandler+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b3a:	2200      	movs	r2, #0
    4b3c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    4b40:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
		if (on_radio_disabled) {
    4b44:	4b06      	ldr	r3, [pc, #24]	; (4b60 <RADIO_IRQHandler+0x40>)
    4b46:	681b      	ldr	r3, [r3, #0]
    4b48:	b103      	cbz	r3, 4b4c <RADIO_IRQHandler+0x2c>
			on_radio_disabled();
    4b4a:	4798      	blx	r3
{
	radio_irq_handler();

	ISR_DIRECT_PM();
    4b4c:	f7fd ff9c 	bl	2a88 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
    4b50:	f7fe f87e 	bl	2c50 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    4b54:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    4b58:	4685      	mov	sp, r0
    4b5a:	4770      	bx	lr
    4b5c:	40001000 	.word	0x40001000
    4b60:	20000a04 	.word	0x20000a04

00004b64 <SWI0_EGU0_IRQHandler>:

	return 1;
}


ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    4b64:	4668      	mov	r0, sp
    4b66:	f020 0107 	bic.w	r1, r0, #7
    4b6a:	468d      	mov	sp, r1
    4b6c:	b531      	push	{r0, r4, r5, lr}
	event.tx_attempts = last_tx_attempts;
    4b6e:	4b1b      	ldr	r3, [pc, #108]	; (4bdc <SWI0_EGU0_IRQHandler+0x78>)
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    4b70:	b082      	sub	sp, #8
	event.tx_attempts = last_tx_attempts;
    4b72:	681b      	ldr	r3, [r3, #0]
    4b74:	9301      	str	r3, [sp, #4]
    4b76:	f04f 0340 	mov.w	r3, #64	; 0x40
    4b7a:	f3ef 8111 	mrs	r1, BASEPRI
    4b7e:	f383 8812 	msr	BASEPRI_MAX, r3
    4b82:	f3bf 8f6f 	isb	sy
	*interrupts = interrupt_flags;
    4b86:	4b16      	ldr	r3, [pc, #88]	; (4be0 <SWI0_EGU0_IRQHandler+0x7c>)
	interrupt_flags = 0;
    4b88:	2200      	movs	r2, #0
	*interrupts = interrupt_flags;
    4b8a:	681d      	ldr	r5, [r3, #0]
	interrupt_flags = 0;
    4b8c:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    4b8e:	f381 8811 	msr	BASEPRI, r1
    4b92:	f3bf 8f6f 	isb	sy
	if (event_handler != NULL) {
    4b96:	4c13      	ldr	r4, [pc, #76]	; (4be4 <SWI0_EGU0_IRQHandler+0x80>)
    4b98:	6823      	ldr	r3, [r4, #0]
    4b9a:	b1ab      	cbz	r3, 4bc8 <SWI0_EGU0_IRQHandler+0x64>
		if (interrupts & INT_TX_SUCCESS_MSK) {
    4b9c:	07e9      	lsls	r1, r5, #31
    4b9e:	d503      	bpl.n	4ba8 <SWI0_EGU0_IRQHandler+0x44>
			event.evt_id = ESB_EVENT_TX_SUCCESS;
    4ba0:	f88d 2000 	strb.w	r2, [sp]
			event_handler(&event);
    4ba4:	4668      	mov	r0, sp
    4ba6:	4798      	blx	r3
		if (interrupts & INT_TX_FAILED_MSK) {
    4ba8:	07aa      	lsls	r2, r5, #30
    4baa:	d505      	bpl.n	4bb8 <SWI0_EGU0_IRQHandler+0x54>
			event.evt_id = ESB_EVENT_TX_FAILED;
    4bac:	2301      	movs	r3, #1
    4bae:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    4bb2:	4668      	mov	r0, sp
    4bb4:	6823      	ldr	r3, [r4, #0]
    4bb6:	4798      	blx	r3
		if (interrupts & INT_RX_DATA_RECEIVED_MSK) {
    4bb8:	076b      	lsls	r3, r5, #29
    4bba:	d505      	bpl.n	4bc8 <SWI0_EGU0_IRQHandler+0x64>
			event.evt_id = ESB_EVENT_RX_RECEIVED;
    4bbc:	2302      	movs	r3, #2
    4bbe:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    4bc2:	4668      	mov	r0, sp
    4bc4:	6823      	ldr	r3, [r4, #0]
    4bc6:	4798      	blx	r3
{
	esb_evt_irq_handler();

	ISR_DIRECT_PM();
    4bc8:	f7fd ff5e 	bl	2a88 <_arch_isr_direct_pm>
    4bcc:	f7fe f840 	bl	2c50 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    4bd0:	b002      	add	sp, #8
    4bd2:	e8bd 4031 	ldmia.w	sp!, {r0, r4, r5, lr}
    4bd6:	4685      	mov	sp, r0
    4bd8:	4770      	bx	lr
    4bda:	bf00      	nop
    4bdc:	20000a0c 	.word	0x20000a0c
    4be0:	20000a10 	.word	0x20000a10
    4be4:	20000af0 	.word	0x20000af0

00004be8 <on_radio_disabled_rx>:
{
    4be8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    return ((p_reg->CRCSTATUS & RADIO_CRCSTATUS_CRCSTATUS_Msk) >> RADIO_CRCSTATUS_CRCSTATUS_Pos)
    4bec:	4a7b      	ldr	r2, [pc, #492]	; (4ddc <on_radio_disabled_rx+0x1f4>)
    4bee:	f8d2 7400 	ldr.w	r7, [r2, #1024]	; 0x400
	if (!nrf_radio_crc_status_check(NRF_RADIO)) {
    4bf2:	f017 0701 	ands.w	r7, r7, #1
    4bf6:	d103      	bne.n	4c00 <on_radio_disabled_rx+0x18>
}
    4bf8:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		clear_events_restart_rx();
    4bfc:	f7ff be8c 	b.w	4918 <clear_events_restart_rx>
	if (rx_fifo.count >= CONFIG_ESB_RX_FIFO_SIZE) {
    4c00:	f8df a1dc 	ldr.w	sl, [pc, #476]	; 4de0 <on_radio_disabled_rx+0x1f8>
    4c04:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
    4c08:	2b07      	cmp	r3, #7
    4c0a:	d8f5      	bhi.n	4bf8 <on_radio_disabled_rx+0x10>
    return (uint8_t)p_reg->RXMATCH;
    4c0c:	f8d2 3408 	ldr.w	r3, [r2, #1032]	; 0x408
	if ((nrf_radio_rxcrc_get(NRF_RADIO) == pipe_info->crc) &&
    4c10:	4d74      	ldr	r5, [pc, #464]	; (4de4 <on_radio_disabled_rx+0x1fc>)
	    (rx_pdu->type.dpl_pdu.pid) == pipe_info->pid) {
    4c12:	f8df 91d4 	ldr.w	r9, [pc, #468]	; 4de8 <on_radio_disabled_rx+0x200>
    return p_reg->RXCRC;
    4c16:	f8d2 440c 	ldr.w	r4, [r2, #1036]	; 0x40c
    4c1a:	f899 2001 	ldrb.w	r2, [r9, #1]
	pipe_info = &rx_pipe_info[nrf_radio_rxmatch_get(NRF_RADIO)];
    4c1e:	b2db      	uxtb	r3, r3
	    (rx_pdu->type.dpl_pdu.pid) == pipe_info->pid) {
    4c20:	f3c2 0141 	ubfx	r1, r2, #1, #2
	if ((nrf_radio_rxcrc_get(NRF_RADIO) == pipe_info->crc) &&
    4c24:	f835 0023 	ldrh.w	r0, [r5, r3, lsl #2]
    4c28:	4284      	cmp	r4, r0
    4c2a:	ea4f 0683 	mov.w	r6, r3, lsl #2
    4c2e:	f040 80ab 	bne.w	4d88 <on_radio_disabled_rx+0x1a0>
	    (rx_pdu->type.dpl_pdu.pid) == pipe_info->pid) {
    4c32:	19a8      	adds	r0, r5, r6
    4c34:	7880      	ldrb	r0, [r0, #2]
	if ((nrf_radio_rxcrc_get(NRF_RADIO) == pipe_info->crc) &&
    4c36:	4281      	cmp	r1, r0
    4c38:	f040 80a6 	bne.w	4d88 <on_radio_disabled_rx+0x1a0>
		retransmit_payload = true;
    4c3c:	46b8      	mov	r8, r7
		send_rx_event = false;
    4c3e:	2700      	movs	r7, #0
	pipe_info->pid = rx_pdu->type.dpl_pdu.pid;
    4c40:	19aa      	adds	r2, r5, r6
	if ((esb_cfg.selective_auto_ack == false) || rx_pdu->type.dpl_pdu.no_ack) {
    4c42:	4c6a      	ldr	r4, [pc, #424]	; (4dec <on_radio_disabled_rx+0x204>)
	pipe_info->pid = rx_pdu->type.dpl_pdu.pid;
    4c44:	7091      	strb	r1, [r2, #2]
    4c46:	4a65      	ldr	r2, [pc, #404]	; (4ddc <on_radio_disabled_rx+0x1f4>)
    4c48:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
	pipe_info->crc = nrf_radio_rxcrc_get(NRF_RADIO);
    4c4c:	f825 2023 	strh.w	r2, [r5, r3, lsl #2]
	if ((esb_cfg.selective_auto_ack == false) || rx_pdu->type.dpl_pdu.no_ack) {
    4c50:	7ca3      	ldrb	r3, [r4, #18]
    4c52:	b123      	cbz	r3, 4c5e <on_radio_disabled_rx+0x76>
    4c54:	f899 3001 	ldrb.w	r3, [r9, #1]
    4c58:	07db      	lsls	r3, r3, #31
    4c5a:	f140 80bc 	bpl.w	4dd6 <on_radio_disabled_rx+0x1ee>
	mpsl_fem_lna_configuration_clear();
    4c5e:	f7fb fb2d 	bl	2bc <mpsl_fem_lna_configuration_clear>
	mpsl_fem_pa_configuration_set(&tx_event, &disable_event);
    4c62:	4963      	ldr	r1, [pc, #396]	; (4df0 <on_radio_disabled_rx+0x208>)
    4c64:	4863      	ldr	r0, [pc, #396]	; (4df4 <on_radio_disabled_rx+0x20c>)
    4c66:	f7fb fb3b 	bl	2e0 <mpsl_fem_pa_configuration_set>
    p_reg->SHORTS = shorts_mask;
    4c6a:	4b5c      	ldr	r3, [pc, #368]	; (4ddc <on_radio_disabled_rx+0x1f4>)
    4c6c:	f240 121b 	movw	r2, #283	; 0x11b
    4c70:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		switch (esb_cfg.protocol) {
    4c74:	f894 b000 	ldrb.w	fp, [r4]
    4c78:	4c5f      	ldr	r4, [pc, #380]	; (4df8 <on_radio_disabled_rx+0x210>)
    4c7a:	f1bb 0f00 	cmp.w	fp, #0
    4c7e:	f000 809b 	beq.w	4db8 <on_radio_disabled_rx+0x1d0>
    4c82:	f1bb 0f01 	cmp.w	fp, #1
    4c86:	d155      	bne.n	4d34 <on_radio_disabled_rx+0x14c>
	if (tx_fifo.count > 0 && ack_pl_wrap_pipe[pipe] != 0) {
    4c88:	f8df c170 	ldr.w	ip, [pc, #368]	; 4dfc <on_radio_disabled_rx+0x214>
    return (uint8_t)p_reg->RXMATCH;
    4c8c:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
    4c90:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
    4c94:	2b00      	cmp	r3, #0
    4c96:	f000 8085 	beq.w	4da4 <on_radio_disabled_rx+0x1bc>
    4c9a:	4859      	ldr	r0, [pc, #356]	; (4e00 <on_radio_disabled_rx+0x218>)
    4c9c:	b2c9      	uxtb	r1, r1
    4c9e:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
    4ca2:	2a00      	cmp	r2, #0
    4ca4:	d07e      	beq.n	4da4 <on_radio_disabled_rx+0x1bc>
		current_payload = ack_pl_wrap_pipe[pipe]->p_payload;
    4ca6:	f8df b15c 	ldr.w	fp, [pc, #348]	; 4e04 <on_radio_disabled_rx+0x21c>
    4caa:	f8d2 e000 	ldr.w	lr, [r2]
    4cae:	f8cb e000 	str.w	lr, [fp]
		if (pipe_info->ack_payload == true && !retransmit_payload) {
    4cb2:	eb05 0e06 	add.w	lr, r5, r6
    4cb6:	f89e e003 	ldrb.w	lr, [lr, #3]
    4cba:	f1be 0f00 	cmp.w	lr, #0
    4cbe:	d017      	beq.n	4cf0 <on_radio_disabled_rx+0x108>
    4cc0:	f1b8 0f00 	cmp.w	r8, #0
    4cc4:	d114      	bne.n	4cf0 <on_radio_disabled_rx+0x108>
			ack_pl_wrap_pipe[pipe]->in_use = false;
    4cc6:	f882 8004 	strb.w	r8, [r2, #4]
			ack_pl_wrap_pipe[pipe] = ack_pl_wrap_pipe[pipe]->p_next;
    4cca:	f850 2021 	ldr.w	r2, [r0, r1, lsl #2]
			tx_fifo.count--;
    4cce:	3b01      	subs	r3, #1
			ack_pl_wrap_pipe[pipe] = ack_pl_wrap_pipe[pipe]->p_next;
    4cd0:	6892      	ldr	r2, [r2, #8]
    4cd2:	f840 2021 	str.w	r2, [r0, r1, lsl #2]
			tx_fifo.count--;
    4cd6:	f8cc 3028 	str.w	r3, [ip, #40]	; 0x28
			if (tx_fifo.count > 0 && ack_pl_wrap_pipe[pipe] != 0) {
    4cda:	2b00      	cmp	r3, #0
    4cdc:	d057      	beq.n	4d8e <on_radio_disabled_rx+0x1a6>
    4cde:	b102      	cbz	r2, 4ce2 <on_radio_disabled_rx+0xfa>
				current_payload = ack_pl_wrap_pipe[pipe]->p_payload;
    4ce0:	6812      	ldr	r2, [r2, #0]
    4ce2:	f8cb 2000 	str.w	r2, [fp]
			interrupt_flags |= INT_TX_SUCCESS_MSK;
    4ce6:	4a48      	ldr	r2, [pc, #288]	; (4e08 <on_radio_disabled_rx+0x220>)
    4ce8:	6813      	ldr	r3, [r2, #0]
    4cea:	f043 0301 	orr.w	r3, r3, #1
    4cee:	6013      	str	r3, [r2, #0]
			update_rf_payload_format(current_payload->length);
    4cf0:	4b46      	ldr	r3, [pc, #280]	; (4e0c <on_radio_disabled_rx+0x224>)
		if (current_payload != 0) {
    4cf2:	f8db 8000 	ldr.w	r8, [fp]
			update_rf_payload_format(current_payload->length);
    4cf6:	681a      	ldr	r2, [r3, #0]
			pipe_info->ack_payload = true;
    4cf8:	19ab      	adds	r3, r5, r6
		if (current_payload != 0) {
    4cfa:	f1b8 0f00 	cmp.w	r8, #0
    4cfe:	d048      	beq.n	4d92 <on_radio_disabled_rx+0x1aa>
			pipe_info->ack_payload = true;
    4d00:	2101      	movs	r1, #1
    4d02:	70d9      	strb	r1, [r3, #3]
			update_rf_payload_format(current_payload->length);
    4d04:	f898 0000 	ldrb.w	r0, [r8]
    4d08:	4790      	blx	r2
			tx_pdu->type.dpl_pdu.length = current_payload->length;
    4d0a:	f8db 1000 	ldr.w	r1, [fp]
    4d0e:	7823      	ldrb	r3, [r4, #0]
    4d10:	780a      	ldrb	r2, [r1, #0]
			memcpy(tx_pdu->data, current_payload->data, current_payload->length);
    4d12:	483f      	ldr	r0, [pc, #252]	; (4e10 <on_radio_disabled_rx+0x228>)
			tx_pdu->type.dpl_pdu.length = current_payload->length;
    4d14:	f362 0305 	bfi	r3, r2, #0, #6
    4d18:	7023      	strb	r3, [r4, #0]
			memcpy(tx_pdu->data, current_payload->data, current_payload->length);
    4d1a:	f811 2b05 	ldrb.w	r2, [r1], #5
    4d1e:	f003 fbf2 	bl	8506 <memcpy>
	tx_pdu->type.dpl_pdu.no_ack = rx_pdu->type.dpl_pdu.no_ack;
    4d22:	7863      	ldrb	r3, [r4, #1]
    4d24:	f899 2001 	ldrb.w	r2, [r9, #1]
    4d28:	f023 0307 	bic.w	r3, r3, #7
    4d2c:	f002 0207 	and.w	r2, r2, #7
    4d30:	4313      	orrs	r3, r2
    4d32:	7063      	strb	r3, [r4, #1]
		esb_state = ESB_STATE_PRX_SEND_ACK;
    4d34:	4b37      	ldr	r3, [pc, #220]	; (4e14 <on_radio_disabled_rx+0x22c>)
    4d36:	2205      	movs	r2, #5
    4d38:	701a      	strb	r2, [r3, #0]
		update_radio_tx_power();
    4d3a:	f7ff fda7 	bl	488c <update_radio_tx_power>
    4d3e:	4b27      	ldr	r3, [pc, #156]	; (4ddc <on_radio_disabled_rx+0x1f4>)
    4d40:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
    p_reg->TXADDRESS = ((uint32_t)txaddress) << RADIO_TXADDRESS_TXADDRESS_Pos;
    4d44:	b2d2      	uxtb	r2, r2
    4d46:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    p_reg->PACKETPTR = (uint32_t)p_packet;
    4d4a:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		on_radio_disabled = on_radio_disabled_rx_ack;
    4d4e:	4b32      	ldr	r3, [pc, #200]	; (4e18 <on_radio_disabled_rx+0x230>)
    4d50:	4a32      	ldr	r2, [pc, #200]	; (4e1c <on_radio_disabled_rx+0x234>)
    4d52:	601a      	str	r2, [r3, #0]
	if (send_rx_event) {
    4d54:	b1b7      	cbz	r7, 4d84 <on_radio_disabled_rx+0x19c>
    return (uint8_t)p_reg->RXMATCH;
    4d56:	4b21      	ldr	r3, [pc, #132]	; (4ddc <on_radio_disabled_rx+0x1f4>)
    4d58:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
	if (rx_fifo.count >= CONFIG_ESB_RX_FIFO_SIZE) {
    4d5c:	f8da 3028 	ldr.w	r3, [sl, #40]	; 0x28
		if (rx_fifo_push_rfbuf(nrf_radio_rxmatch_get(NRF_RADIO), pipe_info->pid)) {
    4d60:	4435      	add	r5, r6
	if (rx_fifo.count >= CONFIG_ESB_RX_FIFO_SIZE) {
    4d62:	2b07      	cmp	r3, #7
		if (rx_fifo_push_rfbuf(nrf_radio_rxmatch_get(NRF_RADIO), pipe_info->pid)) {
    4d64:	78a9      	ldrb	r1, [r5, #2]
	if (rx_fifo.count >= CONFIG_ESB_RX_FIFO_SIZE) {
    4d66:	d80d      	bhi.n	4d84 <on_radio_disabled_rx+0x19c>
    4d68:	b2c0      	uxtb	r0, r0
    4d6a:	f7ff fe19 	bl	49a0 <rx_fifo_push_rfbuf.part.0>
		if (rx_fifo_push_rfbuf(nrf_radio_rxmatch_get(NRF_RADIO), pipe_info->pid)) {
    4d6e:	b148      	cbz	r0, 4d84 <on_radio_disabled_rx+0x19c>
			interrupt_flags |= INT_RX_DATA_RECEIVED_MSK;
    4d70:	4a25      	ldr	r2, [pc, #148]	; (4e08 <on_radio_disabled_rx+0x220>)
    4d72:	6813      	ldr	r3, [r2, #0]
    4d74:	f043 0304 	orr.w	r3, r3, #4
    4d78:	6013      	str	r3, [r2, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4d7a:	4b29      	ldr	r3, [pc, #164]	; (4e20 <on_radio_disabled_rx+0x238>)
    4d7c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    4d80:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    4d84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	bool retransmit_payload = false;
    4d88:	f04f 0800 	mov.w	r8, #0
    4d8c:	e758      	b.n	4c40 <on_radio_disabled_rx+0x58>
				current_payload = 0;
    4d8e:	4642      	mov	r2, r8
    4d90:	e7a7      	b.n	4ce2 <on_radio_disabled_rx+0xfa>
			pipe_info->ack_payload = false;
    4d92:	f883 8003 	strb.w	r8, [r3, #3]
			update_rf_payload_format(0);
    4d96:	4640      	mov	r0, r8
    4d98:	4790      	blx	r2
		tx_pdu->type.dpl_pdu.length = 0;
    4d9a:	7823      	ldrb	r3, [r4, #0]
    4d9c:	f368 0305 	bfi	r3, r8, #0, #6
    4da0:	7023      	strb	r3, [r4, #0]
    4da2:	e7be      	b.n	4d22 <on_radio_disabled_rx+0x13a>
		pipe_info->ack_payload = false;
    4da4:	19ab      	adds	r3, r5, r6
    4da6:	f04f 0800 	mov.w	r8, #0
    4daa:	f883 8003 	strb.w	r8, [r3, #3]
		update_rf_payload_format(0);
    4dae:	4b17      	ldr	r3, [pc, #92]	; (4e0c <on_radio_disabled_rx+0x224>)
    4db0:	4640      	mov	r0, r8
    4db2:	681b      	ldr	r3, [r3, #0]
    4db4:	4798      	blx	r3
    4db6:	e7f0      	b.n	4d9a <on_radio_disabled_rx+0x1b2>
			update_rf_payload_format(0);
    4db8:	4b14      	ldr	r3, [pc, #80]	; (4e0c <on_radio_disabled_rx+0x224>)
    4dba:	4658      	mov	r0, fp
    4dbc:	681b      	ldr	r3, [r3, #0]
    4dbe:	4798      	blx	r3
			tx_pdu->type.fixed_pdu.pid = rx_pdu->type.fixed_pdu.pid;
    4dc0:	f899 3000 	ldrb.w	r3, [r9]
    4dc4:	7822      	ldrb	r2, [r4, #0]
			tx_pdu->type.fixed_pdu.rfu1 = 0;
    4dc6:	f884 b001 	strb.w	fp, [r4, #1]
			tx_pdu->type.fixed_pdu.pid = rx_pdu->type.fixed_pdu.pid;
    4dca:	f3c3 0301 	ubfx	r3, r3, #0, #2
    4dce:	f363 0201 	bfi	r2, r3, #0, #2
    4dd2:	7022      	strb	r2, [r4, #0]
			break;
    4dd4:	e7ae      	b.n	4d34 <on_radio_disabled_rx+0x14c>
		clear_events_restart_rx();
    4dd6:	f7ff fd9f 	bl	4918 <clear_events_restart_rx>
    4dda:	e7bb      	b.n	4d54 <on_radio_disabled_rx+0x16c>
    4ddc:	40001000 	.word	0x40001000
    4de0:	20000a94 	.word	0x20000a94
    4de4:	20000c22 	.word	0x20000c22
    4de8:	20000edf 	.word	0x20000edf
    4dec:	20000af4 	.word	0x20000af4
    4df0:	200000d0 	.word	0x200000d0
    4df4:	00009514 	.word	0x00009514
    4df8:	20000f01 	.word	0x20000f01
    4dfc:	20000ac0 	.word	0x20000ac0
    4e00:	20000a14 	.word	0x20000a14
    4e04:	20000aec 	.word	0x20000aec
    4e08:	20000a10 	.word	0x20000a10
    4e0c:	20000a00 	.word	0x20000a00
    4e10:	20000f03 	.word	0x20000f03
    4e14:	20000f23 	.word	0x20000f23
    4e18:	20000a04 	.word	0x20000a04
    4e1c:	00004809 	.word	0x00004809
    4e20:	e000e100 	.word	0xe000e100

00004e24 <esb_disable>:

	return 0;
}

void esb_disable(void)
{
    4e24:	b510      	push	{r4, lr}
	esb_ppi_disable_all();
    4e26:	f000 fbe1 	bl	55ec <esb_ppi_disable_all>
	esb_fem_reset();
    4e2a:	f7ff fd1b 	bl	4864 <esb_fem_reset>
	nrfx_timer_uninit(&esb_timer);
    4e2e:	4814      	ldr	r0, [pc, #80]	; (4e80 <esb_disable+0x5c>)
    4e30:	f001 faf8 	bl	6424 <nrfx_timer_uninit>

	sys_timer_deinit();
	esb_ppi_deinit();
    4e34:	f000 fc04 	bl	5640 <esb_ppi_deinit>
            RADIO_MODECNF0_RU_Fast;
}

NRF_STATIC_INLINE uint8_t nrf_radio_modecnf0_dtx_get(NRF_RADIO_Type const * p_reg)
{
    return (uint8_t)((p_reg->MODECNF0 & RADIO_MODECNF0_DTX_Msk) >> RADIO_MODECNF0_DTX_Pos);
    4e38:	4a12      	ldr	r2, [pc, #72]	; (4e84 <esb_disable+0x60>)
	esb_state = ESB_STATE_IDLE;
	esb_initialized = false;

	reset_fifos();

	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    4e3a:	4813      	ldr	r0, [pc, #76]	; (4e88 <esb_disable+0x64>)
    4e3c:	f8d2 3650 	ldr.w	r3, [r2, #1616]	; 0x650
                      (((uint32_t)default_tx) << RADIO_MODECNF0_DTX_Pos);
    4e40:	f403 7340 	and.w	r3, r3, #768	; 0x300
    p_reg->MODECNF0 = (fast_ramp_up ? (RADIO_MODECNF0_RU_Fast    << RADIO_MODECNF0_RU_Pos) :
    4e44:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
	esb_state = ESB_STATE_IDLE;
    4e48:	4b10      	ldr	r3, [pc, #64]	; (4e8c <esb_disable+0x68>)
    4e4a:	2400      	movs	r4, #0
    4e4c:	701c      	strb	r4, [r3, #0]
	esb_initialized = false;
    4e4e:	4b10      	ldr	r3, [pc, #64]	; (4e90 <esb_disable+0x6c>)
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    4e50:	4621      	mov	r1, r4
	esb_initialized = false;
    4e52:	701c      	strb	r4, [r3, #0]
	reset_fifos();
    4e54:	f7ff fcbc 	bl	47d0 <reset_fifos>
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    4e58:	2220      	movs	r2, #32
    4e5a:	f003 fb5f 	bl	851c <memset>
	memset(pids, 0, sizeof(pids));
    4e5e:	4621      	mov	r1, r4
    4e60:	2208      	movs	r2, #8
    4e62:	480c      	ldr	r0, [pc, #48]	; (4e94 <esb_disable+0x70>)
    4e64:	f003 fb5a 	bl	851c <memset>
	irq_disable(RADIO_IRQn);
    4e68:	2001      	movs	r0, #1
    4e6a:	f7fd fdd1 	bl	2a10 <arch_irq_disable>
	irq_disable(ESB_EVT_IRQ);
    4e6e:	2014      	movs	r0, #20
    4e70:	f7fd fdce 	bl	2a10 <arch_irq_disable>

	esb_irq_disable();
}
    4e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	irq_disable(ESB_TIMER_IRQ);
    4e78:	200a      	movs	r0, #10
    4e7a:	f7fd bdc9 	b.w	2a10 <arch_irq_disable>
    4e7e:	bf00      	nop
    4e80:	200000fc 	.word	0x200000fc
    4e84:	40001000 	.word	0x40001000
    4e88:	20000c22 	.word	0x20000c22
    4e8c:	20000f23 	.word	0x20000f23
    4e90:	20000f24 	.word	0x20000f24
    4e94:	20000ed7 	.word	0x20000ed7

00004e98 <esb_init>:
{
    4e98:	b5f0      	push	{r4, r5, r6, r7, lr}
    4e9a:	b087      	sub	sp, #28
	if (!config) {
    4e9c:	4604      	mov	r4, r0
{
    4e9e:	af00      	add	r7, sp, #0
	if (!config) {
    4ea0:	2800      	cmp	r0, #0
    4ea2:	f000 80ec 	beq.w	507e <esb_init+0x1e6>
	if (esb_initialized) {
    4ea6:	4d77      	ldr	r5, [pc, #476]	; (5084 <esb_init+0x1ec>)
    4ea8:	782b      	ldrb	r3, [r5, #0]
    4eaa:	b10b      	cbz	r3, 4eb0 <esb_init+0x18>
		esb_disable();
    4eac:	f7ff ffba 	bl	4e24 <esb_disable>
	event_handler = config->event_handler;
    4eb0:	4b75      	ldr	r3, [pc, #468]	; (5088 <esb_init+0x1f0>)
	memcpy(&esb_cfg, config, sizeof(esb_cfg));
    4eb2:	4e76      	ldr	r6, [pc, #472]	; (508c <esb_init+0x1f4>)
	event_handler = config->event_handler;
    4eb4:	6862      	ldr	r2, [r4, #4]
    4eb6:	601a      	str	r2, [r3, #0]
	memcpy(&esb_cfg, config, sizeof(esb_cfg));
    4eb8:	4621      	mov	r1, r4
    4eba:	2214      	movs	r2, #20
    4ebc:	4630      	mov	r0, r6
    4ebe:	f003 fb22 	bl	8506 <memcpy>
	interrupt_flags = 0;
    4ec2:	2400      	movs	r4, #0
    4ec4:	4b72      	ldr	r3, [pc, #456]	; (5090 <esb_init+0x1f8>)
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    4ec6:	4873      	ldr	r0, [pc, #460]	; (5094 <esb_init+0x1fc>)
	interrupt_flags = 0;
    4ec8:	601c      	str	r4, [r3, #0]
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    4eca:	2220      	movs	r2, #32
    4ecc:	4621      	mov	r1, r4
    4ece:	f003 fb25 	bl	851c <memset>
	memset(pids, 0, sizeof(pids));
    4ed2:	2208      	movs	r2, #8
    4ed4:	4621      	mov	r1, r4
    4ed6:	4870      	ldr	r0, [pc, #448]	; (5098 <esb_init+0x200>)
    4ed8:	f003 fb20 	bl	851c <memset>
	params_valid &= update_radio_bitrate();
    4edc:	f7ff fc5a 	bl	4794 <update_radio_bitrate>
	switch (esb_cfg.protocol) {
    4ee0:	7833      	ldrb	r3, [r6, #0]
    4ee2:	496e      	ldr	r1, [pc, #440]	; (509c <esb_init+0x204>)
    4ee4:	b17b      	cbz	r3, 4f06 <esb_init+0x6e>
    4ee6:	2b01      	cmp	r3, #1
    4ee8:	d101      	bne.n	4eee <esb_init+0x56>
		update_rf_payload_format = update_rf_payload_format_esb_dpl;
    4eea:	4b6d      	ldr	r3, [pc, #436]	; (50a0 <esb_init+0x208>)
		update_rf_payload_format = update_rf_payload_format_esb;
    4eec:	600b      	str	r3, [r1, #0]
	switch (esb_cfg.crc) {
    4eee:	7a72      	ldrb	r2, [r6, #9]
    4ef0:	4b6c      	ldr	r3, [pc, #432]	; (50a4 <esb_init+0x20c>)
    4ef2:	2a01      	cmp	r2, #1
    4ef4:	d06f      	beq.n	4fd6 <esb_init+0x13e>
    4ef6:	2a02      	cmp	r2, #2
    4ef8:	d007      	beq.n	4f0a <esb_init+0x72>
    4efa:	b97a      	cbnz	r2, 4f1c <esb_init+0x84>
    p_reg->CRCINIT = crc_init_value;
    4efc:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    p_reg->CRCCNF = ((uint32_t)crc_length  << RADIO_CRCCNF_LEN_Pos) |
    4f00:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    4f04:	e008      	b.n	4f18 <esb_init+0x80>
		update_rf_payload_format = update_rf_payload_format_esb;
    4f06:	4b68      	ldr	r3, [pc, #416]	; (50a8 <esb_init+0x210>)
    4f08:	e7f0      	b.n	4eec <esb_init+0x54>
    p_reg->CRCINIT = crc_init_value;
    4f0a:	f64f 70ff 	movw	r0, #65535	; 0xffff
    4f0e:	f8c3 053c 	str.w	r0, [r3, #1340]	; 0x53c
    p_reg->CRCCNF = ((uint32_t)crc_length  << RADIO_CRCCNF_LEN_Pos) |
    4f12:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->CRCPOLY = (crc_polynominal << RADIO_CRCPOLY_CRCPOLY_Pos);
    4f16:	4a65      	ldr	r2, [pc, #404]	; (50ac <esb_init+0x214>)
    4f18:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	update_rf_payload_format(esb_cfg.payload_length);
    4f1c:	680b      	ldr	r3, [r1, #0]
    4f1e:	7c70      	ldrb	r0, [r6, #17]
    4f20:	4798      	blx	r3
    p_reg->BASE0 = address;
    4f22:	4b60      	ldr	r3, [pc, #384]	; (50a4 <esb_init+0x20c>)
    4f24:	4862      	ldr	r0, [pc, #392]	; (50b0 <esb_init+0x218>)
    4f26:	4963      	ldr	r1, [pc, #396]	; (50b4 <esb_init+0x21c>)
    4f28:	f04f 32e7 	mov.w	r2, #3890735079	; 0xe7e7e7e7
    4f2c:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->BASE1 = address;
    4f30:	f04f 3243 	mov.w	r2, #1128481603	; 0x43434343
    4f34:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    p_reg->PREFIX0 = prefixes;
    4f38:	4a5f      	ldr	r2, [pc, #380]	; (50b8 <esb_init+0x220>)
    4f3a:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PREFIX1 = prefixes;
    4f3e:	4a5f      	ldr	r2, [pc, #380]	; (50bc <esb_init+0x224>)
    4f40:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	reset_fifos();
    4f44:	f7ff fc44 	bl	47d0 <reset_fifos>
    4f48:	4602      	mov	r2, r0
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    4f4a:	2300      	movs	r3, #0
    4f4c:	3301      	adds	r3, #1
    4f4e:	2b08      	cmp	r3, #8
		tx_fifo.payload[i] = &tx_payload[i];
    4f50:	f841 2b04 	str.w	r2, [r1], #4
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    4f54:	f102 0225 	add.w	r2, r2, #37	; 0x25
    4f58:	d1f8      	bne.n	4f4c <esb_init+0xb4>
    4f5a:	4a59      	ldr	r2, [pc, #356]	; (50c0 <esb_init+0x228>)
    4f5c:	4959      	ldr	r1, [pc, #356]	; (50c4 <esb_init+0x22c>)
	for (size_t i = 0; i < CONFIG_ESB_RX_FIFO_SIZE; i++) {
    4f5e:	2300      	movs	r3, #0
    4f60:	3301      	adds	r3, #1
    4f62:	2b08      	cmp	r3, #8
		rx_fifo.payload[i] = &rx_payload[i];
    4f64:	f841 2b04 	str.w	r2, [r1], #4
	for (size_t i = 0; i < CONFIG_ESB_RX_FIFO_SIZE; i++) {
    4f68:	f102 0225 	add.w	r2, r2, #37	; 0x25
    4f6c:	d1f8      	bne.n	4f60 <esb_init+0xc8>
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    4f6e:	2100      	movs	r1, #0
    4f70:	4a55      	ldr	r2, [pc, #340]	; (50c8 <esb_init+0x230>)
		ack_pl_wrap[i].in_use = false;
    4f72:	460b      	mov	r3, r1
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    4f74:	3101      	adds	r1, #1
    4f76:	2908      	cmp	r1, #8
		ack_pl_wrap[i].p_payload = &tx_payload[i];
    4f78:	6010      	str	r0, [r2, #0]
		ack_pl_wrap[i].in_use = false;
    4f7a:	7113      	strb	r3, [r2, #4]
		ack_pl_wrap[i].p_next = 0;
    4f7c:	6093      	str	r3, [r2, #8]
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    4f7e:	f100 0025 	add.w	r0, r0, #37	; 0x25
    4f82:	f102 020c 	add.w	r2, r2, #12
    4f86:	d1f5      	bne.n	4f74 <esb_init+0xdc>
		ack_pl_wrap_pipe[i] = 0;
    4f88:	4a50      	ldr	r2, [pc, #320]	; (50cc <esb_init+0x234>)
	nrfx_err = nrfx_timer_init(&esb_timer, &config, esb_timer_handler);
    4f8a:	4851      	ldr	r0, [pc, #324]	; (50d0 <esb_init+0x238>)
		ack_pl_wrap_pipe[i] = 0;
    4f8c:	e9c2 3300 	strd	r3, r3, [r2]
    4f90:	e9c2 3302 	strd	r3, r3, [r2, #8]
    4f94:	e9c2 3304 	strd	r3, r3, [r2, #16]
    4f98:	e9c2 3306 	strd	r3, r3, [r2, #24]
	const nrfx_timer_config_t config = {
    4f9c:	e9c7 3300 	strd	r3, r3, [r7]
    4fa0:	2304      	movs	r3, #4
    4fa2:	703b      	strb	r3, [r7, #0]
	nrfx_err = nrfx_timer_init(&esb_timer, &config, esb_timer_handler);
    4fa4:	4a4b      	ldr	r2, [pc, #300]	; (50d4 <esb_init+0x23c>)
    4fa6:	4639      	mov	r1, r7
    4fa8:	f001 f9e6 	bl	6378 <nrfx_timer_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4fac:	4b4a      	ldr	r3, [pc, #296]	; (50d8 <esb_init+0x240>)
    4fae:	4298      	cmp	r0, r3
    4fb0:	d119      	bne.n	4fe6 <esb_init+0x14e>
	err = esb_ppi_init();
    4fb2:	f000 faad 	bl	5510 <esb_ppi_init>
	if (err) {
    4fb6:	4604      	mov	r4, r0
    4fb8:	2800      	cmp	r0, #0
    4fba:	d036      	beq.n	502a <esb_init+0x192>
		LOG_ERR("Failed to initialize PPI");
    4fbc:	4b47      	ldr	r3, [pc, #284]	; (50dc <esb_init+0x244>)
    4fbe:	617b      	str	r3, [r7, #20]
    4fc0:	2302      	movs	r3, #2
    4fc2:	613b      	str	r3, [r7, #16]
    4fc4:	4846      	ldr	r0, [pc, #280]	; (50e0 <esb_init+0x248>)
    4fc6:	2300      	movs	r3, #0
    4fc8:	f107 0210 	add.w	r2, r7, #16
    4fcc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4fd0:	f7fd f81a 	bl	2008 <z_impl_z_log_msg_static_create>
		return err;
    4fd4:	e025      	b.n	5022 <esb_init+0x18a>
    p_reg->CRCINIT = crc_init_value;
    4fd6:	20ff      	movs	r0, #255	; 0xff
    4fd8:	f8c3 053c 	str.w	r0, [r3, #1340]	; 0x53c
    p_reg->CRCCNF = ((uint32_t)crc_length  << RADIO_CRCCNF_LEN_Pos) |
    4fdc:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->CRCPOLY = (crc_polynominal << RADIO_CRCPOLY_CRCPOLY_Pos);
    4fe0:	f240 1207 	movw	r2, #263	; 0x107
    4fe4:	e798      	b.n	4f18 <esb_init+0x80>
		LOG_ERR("Failed to initialize nrfx timer (err %d)", nrfx_err);
    4fe6:	466c      	mov	r4, sp
    4fe8:	b088      	sub	sp, #32
    4fea:	466a      	mov	r2, sp
    4fec:	4b3d      	ldr	r3, [pc, #244]	; (50e4 <esb_init+0x24c>)
    4fee:	e9c2 3005 	strd	r3, r0, [r2, #20]
    4ff2:	2303      	movs	r3, #3
    4ff4:	f842 3f10 	str.w	r3, [r2, #16]!
    4ff8:	4839      	ldr	r0, [pc, #228]	; (50e0 <esb_init+0x248>)
    4ffa:	2300      	movs	r3, #0
    4ffc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5000:	f7fd f802 	bl	2008 <z_impl_z_log_msg_static_create>
    5004:	46a5      	mov	sp, r4
		LOG_ERR("Failed to initialize ESB system timer");
    5006:	4b38      	ldr	r3, [pc, #224]	; (50e8 <esb_init+0x250>)
    5008:	617b      	str	r3, [r7, #20]
    500a:	2302      	movs	r3, #2
    500c:	613b      	str	r3, [r7, #16]
    500e:	4834      	ldr	r0, [pc, #208]	; (50e0 <esb_init+0x248>)
    5010:	2300      	movs	r3, #0
    5012:	f107 0210 	add.w	r2, r7, #16
    5016:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EFAULT;
    501a:	f06f 040d 	mvn.w	r4, #13
    501e:	f7fc fff3 	bl	2008 <z_impl_z_log_msg_static_create>
}
    5022:	4620      	mov	r0, r4
    5024:	371c      	adds	r7, #28
    5026:	46bd      	mov	sp, r7
    5028:	bdf0      	pop	{r4, r5, r6, r7, pc}
	disable_event.event.generic.event = esb_ppi_radio_disabled_get();
    502a:	f000 fadb 	bl	55e4 <esb_ppi_radio_disabled_get>
    502e:	4b2f      	ldr	r3, [pc, #188]	; (50ec <esb_init+0x254>)
    return (uint8_t)((p_reg->MODECNF0 & RADIO_MODECNF0_DTX_Msk) >> RADIO_MODECNF0_DTX_Pos);
    5030:	4a1c      	ldr	r2, [pc, #112]	; (50a4 <esb_init+0x20c>)
    5032:	6058      	str	r0, [r3, #4]
    5034:	f8d2 3650 	ldr.w	r3, [r2, #1616]	; 0x650
    p_reg->MODECNF0 = (fast_ramp_up ? (RADIO_MODECNF0_RU_Fast    << RADIO_MODECNF0_RU_Pos) :
    5038:	7cf1      	ldrb	r1, [r6, #19]
                      (((uint32_t)default_tx) << RADIO_MODECNF0_DTX_Pos);
    503a:	f403 7340 	and.w	r3, r3, #768	; 0x300
                                      (RADIO_MODECNF0_RU_Default << RADIO_MODECNF0_RU_Pos) ) |
    503e:	430b      	orrs	r3, r1
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_ESB_RADIO_IRQ_PRIORITY,
    5040:	2101      	movs	r1, #1
    p_reg->MODECNF0 = (fast_ramp_up ? (RADIO_MODECNF0_RU_Fast    << RADIO_MODECNF0_RU_Pos) :
    5042:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
    5046:	4608      	mov	r0, r1
    5048:	4622      	mov	r2, r4
    504a:	f7fd fd03 	bl	2a54 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(ESB_EVT_IRQ, CONFIG_ESB_EVENT_IRQ_PRIORITY,
    504e:	4622      	mov	r2, r4
    5050:	2102      	movs	r1, #2
    5052:	2014      	movs	r0, #20
    5054:	f7fd fcfe 	bl	2a54 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(ESB_TIMER_IRQ, CONFIG_ESB_EVENT_IRQ_PRIORITY,
    5058:	4622      	mov	r2, r4
    505a:	2102      	movs	r1, #2
    505c:	200a      	movs	r0, #10
    505e:	f7fd fcf9 	bl	2a54 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
    5062:	2001      	movs	r0, #1
    5064:	f7fd fcc6 	bl	29f4 <arch_irq_enable>
	irq_enable(ESB_EVT_IRQ);
    5068:	2014      	movs	r0, #20
    506a:	f7fd fcc3 	bl	29f4 <arch_irq_enable>
	irq_enable(ESB_TIMER_IRQ);
    506e:	200a      	movs	r0, #10
    5070:	f7fd fcc0 	bl	29f4 <arch_irq_enable>
	esb_state = ESB_STATE_IDLE;
    5074:	4b1e      	ldr	r3, [pc, #120]	; (50f0 <esb_init+0x258>)
    5076:	701c      	strb	r4, [r3, #0]
	esb_initialized = true;
    5078:	2301      	movs	r3, #1
    507a:	702b      	strb	r3, [r5, #0]
	return 0;
    507c:	e7d1      	b.n	5022 <esb_init+0x18a>
		return -EINVAL;
    507e:	f06f 0415 	mvn.w	r4, #21
    5082:	e7ce      	b.n	5022 <esb_init+0x18a>
    5084:	20000f24 	.word	0x20000f24
    5088:	20000af0 	.word	0x20000af0
    508c:	20000af4 	.word	0x20000af4
    5090:	20000a10 	.word	0x20000a10
    5094:	20000c22 	.word	0x20000c22
    5098:	20000ed7 	.word	0x20000ed7
    509c:	20000a00 	.word	0x20000a00
    50a0:	00004add 	.word	0x00004add
    50a4:	40001000 	.word	0x40001000
    50a8:	00004a9d 	.word	0x00004a9d
    50ac:	00011021 	.word	0x00011021
    50b0:	20000daf 	.word	0x20000daf
    50b4:	20000ac0 	.word	0x20000ac0
    50b8:	23c343e7 	.word	0x23c343e7
    50bc:	13e363a3 	.word	0x13e363a3
    50c0:	20000c87 	.word	0x20000c87
    50c4:	20000a94 	.word	0x20000a94
    50c8:	20000a34 	.word	0x20000a34
    50cc:	20000a14 	.word	0x20000a14
    50d0:	200000fc 	.word	0x200000fc
    50d4:	000047ed 	.word	0x000047ed
    50d8:	0bad0000 	.word	0x0bad0000
    50dc:	00009eca 	.word	0x00009eca
    50e0:	000092e0 	.word	0x000092e0
    50e4:	00009e7b 	.word	0x00009e7b
    50e8:	00009ea4 	.word	0x00009ea4
    50ec:	200000d0 	.word	0x200000d0
    50f0:	20000f23 	.word	0x20000f23

000050f4 <esb_read_rx_payload>:

	return 0;
}

int esb_read_rx_payload(struct esb_payload *payload)
{
    50f4:	b538      	push	{r3, r4, r5, lr}
	if (!esb_initialized) {
    50f6:	4b25      	ldr	r3, [pc, #148]	; (518c <esb_read_rx_payload+0x98>)
    50f8:	781b      	ldrb	r3, [r3, #0]
    50fa:	2b00      	cmp	r3, #0
    50fc:	d03d      	beq.n	517a <esb_read_rx_payload+0x86>
		return -EACCES;
	}
	if (payload == NULL) {
    50fe:	2800      	cmp	r0, #0
    5100:	d03e      	beq.n	5180 <esb_read_rx_payload+0x8c>
		return -EINVAL;
	}

	if (rx_fifo.count == 0) {
    5102:	4c23      	ldr	r4, [pc, #140]	; (5190 <esb_read_rx_payload+0x9c>)
    5104:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5106:	2b00      	cmp	r3, #0
    5108:	d03d      	beq.n	5186 <esb_read_rx_payload+0x92>
	__asm__ volatile(
    510a:	f04f 0340 	mov.w	r3, #64	; 0x40
    510e:	f3ef 8511 	mrs	r5, BASEPRI
    5112:	f383 8812 	msr	BASEPRI_MAX, r3
    5116:	f3bf 8f6f 	isb	sy
		return -ENODATA;
	}

	unsigned int key = irq_lock();

	payload->length = rx_fifo.payload[rx_fifo.front]->length;
    511a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    511c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    5120:	781a      	ldrb	r2, [r3, #0]
    5122:	7002      	strb	r2, [r0, #0]
	payload->pipe = rx_fifo.payload[rx_fifo.front]->pipe;
    5124:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5126:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    512a:	785b      	ldrb	r3, [r3, #1]
    512c:	7043      	strb	r3, [r0, #1]
	payload->rssi = rx_fifo.payload[rx_fifo.front]->rssi;
    512e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5130:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    5134:	f993 3002 	ldrsb.w	r3, [r3, #2]
    5138:	7083      	strb	r3, [r0, #2]
	payload->pid = rx_fifo.payload[rx_fifo.front]->pid;
    513a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    513c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    5140:	791b      	ldrb	r3, [r3, #4]
    5142:	7103      	strb	r3, [r0, #4]
	payload->noack = rx_fifo.payload[rx_fifo.front]->noack;
    5144:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5146:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    514a:	78db      	ldrb	r3, [r3, #3]
    514c:	70c3      	strb	r3, [r0, #3]
	memcpy(payload->data, rx_fifo.payload[rx_fifo.front]->data,
    514e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5150:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    5154:	3005      	adds	r0, #5
    5156:	3105      	adds	r1, #5
    5158:	f003 f9d5 	bl	8506 <memcpy>
	       payload->length);

	if (++rx_fifo.front >= CONFIG_ESB_RX_FIFO_SIZE) {
    515c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    515e:	3301      	adds	r3, #1
		rx_fifo.front = 0;
    5160:	2b08      	cmp	r3, #8
    5162:	bf28      	it	cs
    5164:	2300      	movcs	r3, #0
    5166:	6263      	str	r3, [r4, #36]	; 0x24
	}

	rx_fifo.count--;
    5168:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    516a:	3b01      	subs	r3, #1
    516c:	62a3      	str	r3, [r4, #40]	; 0x28
	__asm__ volatile(
    516e:	f385 8811 	msr	BASEPRI, r5
    5172:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	return 0;
    5176:	2000      	movs	r0, #0
}
    5178:	bd38      	pop	{r3, r4, r5, pc}
		return -EACCES;
    517a:	f06f 000c 	mvn.w	r0, #12
    517e:	e7fb      	b.n	5178 <esb_read_rx_payload+0x84>
		return -EINVAL;
    5180:	f06f 0015 	mvn.w	r0, #21
    5184:	e7f8      	b.n	5178 <esb_read_rx_payload+0x84>
		return -ENODATA;
    5186:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    518a:	e7f5      	b.n	5178 <esb_read_rx_payload+0x84>
    518c:	20000f24 	.word	0x20000f24
    5190:	20000a94 	.word	0x20000a94

00005194 <esb_start_rx>:

	return 0;
}

int esb_start_rx(void)
{
    5194:	b538      	push	{r3, r4, r5, lr}
	if (esb_state != ESB_STATE_IDLE) {
    5196:	4b23      	ldr	r3, [pc, #140]	; (5224 <esb_start_rx+0x90>)
    5198:	781a      	ldrb	r2, [r3, #0]
    519a:	f002 05ff 	and.w	r5, r2, #255	; 0xff
    519e:	2a00      	cmp	r2, #0
    51a0:	d13c      	bne.n	521c <esb_start_rx+0x88>
    p_reg->INTENCLR = mask;
    51a2:	4c21      	ldr	r4, [pc, #132]	; (5228 <esb_start_rx+0x94>)
	}

	nrf_radio_int_disable(NRF_RADIO, 0xFFFFFFFF);
	nrf_radio_event_clear(NRF_RADIO, NRF_RADIO_EVENT_DISABLED);

	on_radio_disabled = on_radio_disabled_rx;
    51a4:	4921      	ldr	r1, [pc, #132]	; (522c <esb_start_rx+0x98>)
    51a6:	f04f 32ff 	mov.w	r2, #4294967295
    51aa:	f8c4 2308 	str.w	r2, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    51ae:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
    51b2:	f8d4 2110 	ldr.w	r2, [r4, #272]	; 0x110
    51b6:	4a1e      	ldr	r2, [pc, #120]	; (5230 <esb_start_rx+0x9c>)
    51b8:	6011      	str	r1, [r2, #0]
    p_reg->SHORTS = shorts_mask;
    51ba:	f240 1217 	movw	r2, #279	; 0x117
    51be:	f8c4 2200 	str.w	r2, [r4, #512]	; 0x200
    p_reg->INTENSET = mask;
    51c2:	2210      	movs	r2, #16
    51c4:	f8c4 2304 	str.w	r2, [r4, #772]	; 0x304

	nrf_radio_shorts_set(NRF_RADIO, (radio_shorts_common | NRF_RADIO_SHORT_DISABLED_TXEN_MASK));
	nrf_radio_int_enable(NRF_RADIO, NRF_RADIO_INT_DISABLED_MASK);

	esb_state = ESB_STATE_PRX;
    51c8:	2204      	movs	r2, #4
    51ca:	701a      	strb	r2, [r3, #0]

	nrf_radio_rxaddresses_set(NRF_RADIO, esb_addr.rx_pipes_enabled);
    51cc:	4b19      	ldr	r3, [pc, #100]	; (5234 <esb_start_rx+0xa0>)
    p_reg->RXADDRESSES = (uint32_t)(rxaddresses);
    51ce:	7c9a      	ldrb	r2, [r3, #18]
    51d0:	f8c4 2530 	str.w	r2, [r4, #1328]	; 0x530
        delta = ((uint32_t)(radio_frequency - 2400)) |
    51d4:	7cdb      	ldrb	r3, [r3, #19]
    p_reg->FREQUENCY = delta;
    51d6:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    p_reg->PACKETPTR = (uint32_t)p_packet;
    51da:	4b17      	ldr	r3, [pc, #92]	; (5238 <esb_start_rx+0xa4>)
    51dc:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    51e0:	4b16      	ldr	r3, [pc, #88]	; (523c <esb_start_rx+0xa8>)
    51e2:	2202      	movs	r2, #2
    51e4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	nrf_radio_frequency_set(NRF_RADIO, (RADIO_BASE_FREQUENCY + esb_addr.rf_channel));
	nrf_radio_packetptr_set(NRF_RADIO, rx_payload_buffer);

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    51e8:	2001      	movs	r0, #1
    51ea:	f7fd fc03 	bl	29f4 <arch_irq_enable>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    51ee:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
    51f2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    51f6:	f8c4 5108 	str.w	r5, [r4, #264]	; 0x108
    51fa:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    51fe:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110

	nrf_radio_event_clear(NRF_RADIO, NRF_RADIO_EVENT_ADDRESS);
	nrf_radio_event_clear(NRF_RADIO, NRF_RADIO_EVENT_PAYLOAD);
	nrf_radio_event_clear(NRF_RADIO, NRF_RADIO_EVENT_DISABLED);

	esb_ppi_for_txrx_set(true, false);
    5202:	2001      	movs	r0, #1
    5204:	4629      	mov	r1, r5
    5206:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
    520a:	f000 f8b7 	bl	537c <esb_ppi_for_txrx_set>
	esb_fem_for_rx_set();
    520e:	f7ff fb6d 	bl	48ec <esb_fem_for_rx_set>
    5212:	4b0b      	ldr	r3, [pc, #44]	; (5240 <esb_start_rx+0xac>)
    5214:	2201      	movs	r2, #1
    5216:	619a      	str	r2, [r3, #24]

	radio_start();

	return 0;
    5218:	4628      	mov	r0, r5
}
    521a:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    521c:	f06f 000f 	mvn.w	r0, #15
    5220:	e7fb      	b.n	521a <esb_start_rx+0x86>
    5222:	bf00      	nop
    5224:	20000f23 	.word	0x20000f23
    5228:	40001000 	.word	0x40001000
    522c:	00004be9 	.word	0x00004be9
    5230:	20000a04 	.word	0x20000a04
    5234:	200000e8 	.word	0x200000e8
    5238:	20000edf 	.word	0x20000edf
    523c:	e000e100 	.word	0xe000e100
    5240:	40014000 	.word	0x40014000

00005244 <esb_set_base_address_0>:

	return 0;
}

int esb_set_base_address_0(const uint8_t *addr)
{
    5244:	b510      	push	{r4, lr}
	if (esb_state != ESB_STATE_IDLE) {
    5246:	4b0d      	ldr	r3, [pc, #52]	; (527c <esb_set_base_address_0+0x38>)
    5248:	781b      	ldrb	r3, [r3, #0]
{
    524a:	4601      	mov	r1, r0
	if (esb_state != ESB_STATE_IDLE) {
    524c:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    5250:	b96b      	cbnz	r3, 526e <esb_set_base_address_0+0x2a>
		return -EBUSY;
	}
	if (addr == NULL) {
    5252:	b178      	cbz	r0, 5274 <esb_set_base_address_0+0x30>
		return -EINVAL;
	}

	memcpy(esb_addr.base_addr_p0, addr, sizeof(esb_addr.base_addr_p0));
    5254:	2204      	movs	r2, #4
    5256:	480a      	ldr	r0, [pc, #40]	; (5280 <esb_set_base_address_0+0x3c>)
    5258:	f003 f955 	bl	8506 <memcpy>
	return __REV(bytewise_bit_swap(addr));
    525c:	4808      	ldr	r0, [pc, #32]	; (5280 <esb_set_base_address_0+0x3c>)
    525e:	f003 fb93 	bl	8988 <bytewise_bit_swap>
    p_reg->BASE0 = address;
    5262:	4b08      	ldr	r3, [pc, #32]	; (5284 <esb_set_base_address_0+0x40>)
  return __builtin_bswap32(value);
    5264:	ba00      	rev	r0, r0
    5266:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c

	update_radio_addresses(ADDR_UPDATE_MASK_BASE0);

	return 0;
    526a:	4620      	mov	r0, r4
}
    526c:	bd10      	pop	{r4, pc}
		return -EBUSY;
    526e:	f06f 000f 	mvn.w	r0, #15
    5272:	e7fb      	b.n	526c <esb_set_base_address_0+0x28>
		return -EINVAL;
    5274:	f06f 0015 	mvn.w	r0, #21
    5278:	e7f8      	b.n	526c <esb_set_base_address_0+0x28>
    527a:	bf00      	nop
    527c:	20000f23 	.word	0x20000f23
    5280:	200000e8 	.word	0x200000e8
    5284:	40001000 	.word	0x40001000

00005288 <esb_set_base_address_1>:

int esb_set_base_address_1(const uint8_t *addr)
{
    5288:	b510      	push	{r4, lr}
	if (esb_state != ESB_STATE_IDLE) {
    528a:	4b0d      	ldr	r3, [pc, #52]	; (52c0 <esb_set_base_address_1+0x38>)
    528c:	781b      	ldrb	r3, [r3, #0]
{
    528e:	4601      	mov	r1, r0
	if (esb_state != ESB_STATE_IDLE) {
    5290:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    5294:	b96b      	cbnz	r3, 52b2 <esb_set_base_address_1+0x2a>
		return -EBUSY;
	}
	if (addr == NULL) {
    5296:	b178      	cbz	r0, 52b8 <esb_set_base_address_1+0x30>
		return -EINVAL;
	}

	memcpy(esb_addr.base_addr_p1, addr, sizeof(esb_addr.base_addr_p1));
    5298:	2204      	movs	r2, #4
    529a:	480a      	ldr	r0, [pc, #40]	; (52c4 <esb_set_base_address_1+0x3c>)
    529c:	f003 f933 	bl	8506 <memcpy>
	return __REV(bytewise_bit_swap(addr));
    52a0:	4808      	ldr	r0, [pc, #32]	; (52c4 <esb_set_base_address_1+0x3c>)
    52a2:	f003 fb71 	bl	8988 <bytewise_bit_swap>
    p_reg->BASE1 = address;
    52a6:	4b08      	ldr	r3, [pc, #32]	; (52c8 <esb_set_base_address_1+0x40>)
    52a8:	ba00      	rev	r0, r0
    52aa:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520

	update_radio_addresses(ADDR_UPDATE_MASK_BASE1);

	return 0;
    52ae:	4620      	mov	r0, r4
}
    52b0:	bd10      	pop	{r4, pc}
		return -EBUSY;
    52b2:	f06f 000f 	mvn.w	r0, #15
    52b6:	e7fb      	b.n	52b0 <esb_set_base_address_1+0x28>
		return -EINVAL;
    52b8:	f06f 0015 	mvn.w	r0, #21
    52bc:	e7f8      	b.n	52b0 <esb_set_base_address_1+0x28>
    52be:	bf00      	nop
    52c0:	20000f23 	.word	0x20000f23
    52c4:	200000ec 	.word	0x200000ec
    52c8:	40001000 	.word	0x40001000

000052cc <esb_set_prefixes>:

int esb_set_prefixes(const uint8_t *prefixes, uint8_t num_pipes)
{
    52cc:	b538      	push	{r3, r4, r5, lr}
	if (esb_state != ESB_STATE_IDLE) {
    52ce:	4b0f      	ldr	r3, [pc, #60]	; (530c <esb_set_prefixes+0x40>)
    52d0:	781b      	ldrb	r3, [r3, #0]
{
    52d2:	460c      	mov	r4, r1
	if (esb_state != ESB_STATE_IDLE) {
    52d4:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    52d8:	b993      	cbnz	r3, 5300 <esb_set_prefixes+0x34>
		return -EBUSY;
	}
	if (prefixes == NULL) {
    52da:	b1a0      	cbz	r0, 5306 <esb_set_prefixes+0x3a>
		return -EINVAL;
	}
	if (!(num_pipes <= CONFIG_ESB_PIPE_COUNT)) {
    52dc:	2908      	cmp	r1, #8
    52de:	d812      	bhi.n	5306 <esb_set_prefixes+0x3a>
		return -EINVAL;
	}

	memcpy(esb_addr.pipe_prefixes, prefixes, num_pipes);
    52e0:	460a      	mov	r2, r1
    52e2:	4601      	mov	r1, r0
    52e4:	480a      	ldr	r0, [pc, #40]	; (5310 <esb_set_prefixes+0x44>)
    52e6:	f003 f90e 	bl	8506 <memcpy>

	esb_addr.num_pipes = num_pipes;
    52ea:	4a0a      	ldr	r2, [pc, #40]	; (5314 <esb_set_prefixes+0x48>)
	esb_addr.rx_pipes_enabled = BIT_MASK_UINT_8(num_pipes);
    52ec:	23ff      	movs	r3, #255	; 0xff
	esb_addr.num_pipes = num_pipes;
    52ee:	7414      	strb	r4, [r2, #16]
	esb_addr.rx_pipes_enabled = BIT_MASK_UINT_8(num_pipes);
    52f0:	f1c4 0408 	rsb	r4, r4, #8
    52f4:	4123      	asrs	r3, r4
    52f6:	7493      	strb	r3, [r2, #18]
	if ((update_mask & ADDR_UPDATE_MASK_PREFIX) != 0) {
    52f8:	f7ff fae6 	bl	48c8 <update_radio_addresses.part.0>

	update_radio_addresses(ADDR_UPDATE_MASK_PREFIX);

	return 0;
    52fc:	4628      	mov	r0, r5
}
    52fe:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    5300:	f06f 000f 	mvn.w	r0, #15
    5304:	e7fb      	b.n	52fe <esb_set_prefixes+0x32>
		return -EINVAL;
    5306:	f06f 0015 	mvn.w	r0, #21
    530a:	e7f8      	b.n	52fe <esb_set_prefixes+0x32>
    530c:	20000f23 	.word	0x20000f23
    5310:	200000f0 	.word	0x200000f0
    5314:	200000e8 	.word	0x200000e8

00005318 <esb_ppi_for_fem_set>:
{
	uint32_t egu_event = nrf_egu_event_address_get(ESB_EGU, ESB_EGU_EVENT);
	uint32_t timer_task = nrf_timer_task_address_get(ESB_NRF_TIMER_INSTANCE,
							 NRF_TIMER_TASK_START);

	nrf_ppi_channel_endpoint_setup(NRF_PPI, egu_timer_start, egu_event, timer_task);
    5318:	4b09      	ldr	r3, [pc, #36]	; (5340 <esb_ppi_for_fem_set+0x28>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    531a:	490a      	ldr	r1, [pc, #40]	; (5344 <esb_ppi_for_fem_set+0x2c>)
    531c:	781a      	ldrb	r2, [r3, #0]
    531e:	00d3      	lsls	r3, r2, #3
    5320:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5324:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    5328:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    532c:	4906      	ldr	r1, [pc, #24]	; (5348 <esb_ppi_for_fem_set+0x30>)
    532e:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
    p_reg->CHENSET = PPI_CHENSET_CH0_Set << ((uint32_t) channel);
    5332:	2301      	movs	r3, #1
    5334:	4093      	lsls	r3, r2
    5336:	4a05      	ldr	r2, [pc, #20]	; (534c <esb_ppi_for_fem_set+0x34>)
    5338:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	nrf_ppi_channel_enable(NRF_PPI, egu_timer_start);
}
    533c:	4770      	bx	lr
    533e:	bf00      	nop
    5340:	20000f27 	.word	0x20000f27
    5344:	40014118 	.word	0x40014118
    5348:	4000a000 	.word	0x4000a000
    534c:	4001f000 	.word	0x4001f000

00005350 <esb_ppi_for_fem_clear>:

void esb_ppi_for_fem_clear(void)
{
	nrf_ppi_channel_disable(NRF_PPI, egu_timer_start);
    5350:	4b08      	ldr	r3, [pc, #32]	; (5374 <esb_ppi_for_fem_clear+0x24>)
    p_reg->CHENCLR = PPI_CHENCLR_CH0_Clear << ((uint32_t) channel);
    5352:	4909      	ldr	r1, [pc, #36]	; (5378 <esb_ppi_for_fem_clear+0x28>)
    5354:	781b      	ldrb	r3, [r3, #0]
    5356:	2201      	movs	r2, #1
    5358:	409a      	lsls	r2, r3
    535a:	00db      	lsls	r3, r3, #3
    535c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5360:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    5364:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
    5368:	2200      	movs	r2, #0
    536a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    536e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_ppi_channel_endpoint_setup(NRF_PPI, egu_timer_start, 0, 0);
}
    5372:	4770      	bx	lr
    5374:	20000f27 	.word	0x20000f27
    5378:	4001f000 	.word	0x4001f000

0000537c <esb_ppi_for_txrx_set>:

void esb_ppi_for_txrx_set(bool rx, bool timer_start)
{
    537c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t channels_mask;
	uint32_t egu_event = nrf_egu_event_address_get(ESB_EGU, ESB_EGU_EVENT);
	uint32_t egu_task = nrf_egu_task_address_get(ESB_EGU, ESB_EGU_TASK);
	uint32_t group_disable_task =
			nrf_ppi_task_group_disable_address_get(NRF_PPI, ramp_up_ppi_group);
    537e:	4b2b      	ldr	r3, [pc, #172]	; (542c <esb_ppi_for_txrx_set+0xb0>)
}

NRF_STATIC_INLINE uint32_t nrf_ppi_task_group_disable_address_get(NRF_PPI_Type const *    p_reg,
                                                                  nrf_ppi_channel_group_t group)
{
    return (uint32_t) &p_reg->TASKS_CHG[(uint32_t) group].DIS;
    5380:	4c2b      	ldr	r4, [pc, #172]	; (5430 <esb_ppi_for_txrx_set+0xb4>)
    5382:	781b      	ldrb	r3, [r3, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
    5384:	4f2b      	ldr	r7, [pc, #172]	; (5434 <esb_ppi_for_txrx_set+0xb8>)
    return (uint32_t) &p_reg->TASKS_CHG[(uint32_t) group].DIS;
    5386:	00da      	lsls	r2, r3, #3
    5388:	4414      	add	r4, r2
}

NRF_STATIC_INLINE void nrf_egu_event_clear(NRF_EGU_Type * p_reg, nrf_egu_event_t egu_event)
{
    NRFX_ASSERT(p_reg);
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event)) = 0x0UL;
    538a:	4a2b      	ldr	r2, [pc, #172]	; (5438 <esb_ppi_for_txrx_set+0xbc>)
    538c:	2500      	movs	r5, #0
    538e:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
    5392:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
						NRF_RADIO_EVENT_DISABLED);
	uint32_t timer_task = nrf_timer_task_address_get(ESB_NRF_TIMER_INSTANCE,
							 NRF_TIMER_TASK_START);

	nrf_egu_event_clear(ESB_EGU, ESB_EGU_EVENT);
	nrf_ppi_channel_and_fork_endpoint_setup(NRF_PPI, egu_ramp_up, egu_event, radio_en_task,
    5396:	4a29      	ldr	r2, [pc, #164]	; (543c <esb_ppi_for_txrx_set+0xc0>)
    5398:	7815      	ldrb	r5, [r2, #0]
	uint32_t radio_en_task = nrf_radio_task_address_get(NRF_RADIO,
    539a:	0080      	lsls	r0, r0, #2
    539c:	00ea      	lsls	r2, r5, #3
    return ((uint32_t)p_reg + (uint32_t)task);
    539e:	b2c0      	uxtb	r0, r0
    53a0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    53a4:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    53a8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    53ac:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
    p_reg->CH[(uint32_t) channel].EEP = eep;
    53b0:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    53b4:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
    p_reg->FORK[(uint32_t) channel].TEP = fork_tep;
    53b8:	4a21      	ldr	r2, [pc, #132]	; (5440 <esb_ppi_for_txrx_set+0xc4>)
    53ba:	f505 7011 	add.w	r0, r5, #580	; 0x244
    53be:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
						group_disable_task);
	nrf_ppi_channel_endpoint_setup(NRF_PPI, disabled_egu, radio_disabled_event, egu_task);
    53c2:	4a20      	ldr	r2, [pc, #128]	; (5444 <esb_ppi_for_txrx_set+0xc8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
    53c4:	4820      	ldr	r0, [pc, #128]	; (5448 <esb_ppi_for_txrx_set+0xcc>)
    53c6:	7816      	ldrb	r6, [r2, #0]
    53c8:	00f2      	lsls	r2, r6, #3
    53ca:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    53ce:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000

	channels_mask = BIT(egu_ramp_up) | BIT(disabled_egu);
    53d2:	2401      	movs	r4, #1
    53d4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    53d8:	f500 3097 	add.w	r0, r0, #77312	; 0x12e00
    53dc:	f500 7084 	add.w	r0, r0, #264	; 0x108
    53e0:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
    53e4:	fa04 f606 	lsl.w	r6, r4, r6
    53e8:	fa04 f005 	lsl.w	r0, r4, r5
    53ec:	4330      	orrs	r0, r6

	if (timer_start) {
    53ee:	b169      	cbz	r1, 540c <esb_ppi_for_txrx_set+0x90>
		nrf_ppi_channel_endpoint_setup(NRF_PPI, egu_timer_start, egu_event, timer_task);
    53f0:	4a16      	ldr	r2, [pc, #88]	; (544c <esb_ppi_for_txrx_set+0xd0>)
    53f2:	4e17      	ldr	r6, [pc, #92]	; (5450 <esb_ppi_for_txrx_set+0xd4>)
    53f4:	7811      	ldrb	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
    53f6:	00ca      	lsls	r2, r1, #3
    53f8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    53fc:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
		channels_mask |= BIT(egu_timer_start);
    5400:	408c      	lsls	r4, r1
    5402:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
    5406:	4320      	orrs	r0, r4
    p_reg->CH[(uint32_t) channel].TEP = tep;
    5408:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
    p_reg->CHG[(uint32_t) channel_group] |= (PPI_CHG_CH0_Included << ((uint32_t) channel));
    540c:	009b      	lsls	r3, r3, #2
    540e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5412:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    5416:	2201      	movs	r2, #1
    5418:	f8d3 1800 	ldr.w	r1, [r3, #2048]	; 0x800
    541c:	40aa      	lsls	r2, r5
    541e:	430a      	orrs	r2, r1
    5420:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    p_reg->CHENSET = mask;
    5424:	4b06      	ldr	r3, [pc, #24]	; (5440 <esb_ppi_for_txrx_set+0xc4>)
    5426:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	}

	nrf_ppi_channel_include_in_group(NRF_PPI, egu_ramp_up, ramp_up_ppi_group);
	nrf_ppi_channels_enable(NRF_PPI, channels_mask);
}
    542a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    542c:	20000f25 	.word	0x20000f25
    5430:	4001f004 	.word	0x4001f004
    5434:	40014118 	.word	0x40014118
    5438:	40014000 	.word	0x40014000
    543c:	20000f28 	.word	0x20000f28
    5440:	4001f000 	.word	0x4001f000
    5444:	20000f26 	.word	0x20000f26
    5448:	40001110 	.word	0x40001110
    544c:	20000f27 	.word	0x20000f27
    5450:	4000a000 	.word	0x4000a000

00005454 <esb_ppi_for_txrx_clear>:

void esb_ppi_for_txrx_clear(bool rx, bool timer_start)
{
    5454:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t channels_mask = (BIT(egu_ramp_up) | BIT(disabled_egu));
    5456:	4b29      	ldr	r3, [pc, #164]	; (54fc <esb_ppi_for_txrx_clear+0xa8>)
    5458:	4e29      	ldr	r6, [pc, #164]	; (5500 <esb_ppi_for_txrx_clear+0xac>)
    545a:	7818      	ldrb	r0, [r3, #0]
    545c:	4b29      	ldr	r3, [pc, #164]	; (5504 <esb_ppi_for_txrx_clear+0xb0>)
    545e:	781a      	ldrb	r2, [r3, #0]
    5460:	2401      	movs	r4, #1
    5462:	fa04 f302 	lsl.w	r3, r4, r2
    5466:	fa04 f500 	lsl.w	r5, r4, r0
    546a:	431d      	orrs	r5, r3

	ARG_UNUSED(rx);

	if (timer_start) {
    546c:	f500 7711 	add.w	r7, r0, #580	; 0x244
    5470:	00c3      	lsls	r3, r0, #3
    5472:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
    5476:	bb19      	cbnz	r1, 54c0 <esb_ppi_for_txrx_clear+0x6c>
    p_reg->CHENCLR = mask;
    5478:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    547c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    5480:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
    5484:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    5488:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
    p_reg->FORK[(uint32_t) channel].TEP = fork_tep;
    548c:	f846 1027 	str.w	r1, [r6, r7, lsl #2]
    p_reg->CH[(uint32_t) channel].EEP = eep;
    5490:	f10c 4380 	add.w	r3, ip, #1073741824	; 0x40000000
    5494:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    5498:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    549c:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514

	if (timer_start) {
		nrf_ppi_channel_endpoint_setup(NRF_PPI, egu_timer_start, 0, 0);
	}

	nrf_ppi_channel_remove_from_group(NRF_PPI, egu_ramp_up, ramp_up_ppi_group);
    54a0:	4b19      	ldr	r3, [pc, #100]	; (5508 <esb_ppi_for_txrx_clear+0xb4>)
    p_reg->CHG[(uint32_t) channel_group] &= ~(PPI_CHG_CH0_Included << ((uint32_t) channel));
    54a2:	781b      	ldrb	r3, [r3, #0]
    54a4:	009b      	lsls	r3, r3, #2
    54a6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    54aa:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    54ae:	2101      	movs	r1, #1
    54b0:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
    54b4:	4081      	lsls	r1, r0
    54b6:	ea22 0201 	bic.w	r2, r2, r1
    54ba:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
    54be:	bdf0      	pop	{r4, r5, r6, r7, pc}
		channels_mask |= BIT(egu_timer_start);
    54c0:	4a12      	ldr	r2, [pc, #72]	; (550c <esb_ppi_for_txrx_clear+0xb8>)
    54c2:	7812      	ldrb	r2, [r2, #0]
    54c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    54c8:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    54cc:	4094      	lsls	r4, r2
    p_reg->CH[(uint32_t) channel].EEP = eep;
    54ce:	2100      	movs	r1, #0
    54d0:	432c      	orrs	r4, r5
    p_reg->CHENCLR = mask;
    54d2:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
    54d6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    54da:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
    p_reg->FORK[(uint32_t) channel].TEP = fork_tep;
    54de:	f10c 4380 	add.w	r3, ip, #1073741824	; 0x40000000
    54e2:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    54e6:	f846 1027 	str.w	r1, [r6, r7, lsl #2]
    p_reg->CH[(uint32_t) channel].EEP = eep;
    54ea:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    54ee:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
    p_reg->CH[(uint32_t) channel].EEP = eep;
    54f2:	00d3      	lsls	r3, r2, #3
    54f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    54f8:	e7cc      	b.n	5494 <esb_ppi_for_txrx_clear+0x40>
    54fa:	bf00      	nop
    54fc:	20000f28 	.word	0x20000f28
    5500:	4001f000 	.word	0x4001f000
    5504:	20000f26 	.word	0x20000f26
    5508:	20000f25 	.word	0x20000f25
    550c:	20000f27 	.word	0x20000f27

00005510 <esb_ppi_init>:

	nrf_ppi_channel_endpoint_setup(NRF_PPI, radio_end_timer_start, 0, 0);
}

int esb_ppi_init(void)
{
    5510:	b5b0      	push	{r4, r5, r7, lr}
	nrfx_err_t err;

	err = nrfx_ppi_channel_alloc(&egu_ramp_up);
    5512:	4829      	ldr	r0, [pc, #164]	; (55b8 <esb_ppi_init+0xa8>)
	if (err != NRFX_SUCCESS) {
    5514:	4d29      	ldr	r5, [pc, #164]	; (55bc <esb_ppi_init+0xac>)
{
    5516:	af00      	add	r7, sp, #0
	err = nrfx_ppi_channel_alloc(&egu_ramp_up);
    5518:	f000 fd70 	bl	5ffc <nrfx_ppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    551c:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_alloc(&egu_ramp_up);
    551e:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    5520:	d136      	bne.n	5590 <esb_ppi_init+0x80>
		goto error;
	}

	err = nrfx_ppi_channel_alloc(&disabled_egu);
    5522:	4827      	ldr	r0, [pc, #156]	; (55c0 <esb_ppi_init+0xb0>)
    5524:	f000 fd6a 	bl	5ffc <nrfx_ppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    5528:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_alloc(&disabled_egu);
    552a:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    552c:	d130      	bne.n	5590 <esb_ppi_init+0x80>
		goto error;
	}

	err = nrfx_ppi_channel_alloc(&egu_timer_start);
    552e:	4825      	ldr	r0, [pc, #148]	; (55c4 <esb_ppi_init+0xb4>)
    5530:	f000 fd64 	bl	5ffc <nrfx_ppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    5534:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_alloc(&egu_timer_start);
    5536:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    5538:	d12a      	bne.n	5590 <esb_ppi_init+0x80>
		goto error;
	}

	err = nrfx_ppi_channel_alloc(&radio_address_timer_stop);
    553a:	4823      	ldr	r0, [pc, #140]	; (55c8 <esb_ppi_init+0xb8>)
    553c:	f000 fd5e 	bl	5ffc <nrfx_ppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    5540:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_alloc(&radio_address_timer_stop);
    5542:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    5544:	d124      	bne.n	5590 <esb_ppi_init+0x80>
		goto error;
	}

	err = nrfx_ppi_channel_alloc(&timer_compare0_radio_disable);
    5546:	4821      	ldr	r0, [pc, #132]	; (55cc <esb_ppi_init+0xbc>)
    5548:	f000 fd58 	bl	5ffc <nrfx_ppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    554c:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_alloc(&timer_compare0_radio_disable);
    554e:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    5550:	d11e      	bne.n	5590 <esb_ppi_init+0x80>
		goto error;
	}

	err = nrfx_ppi_channel_alloc(&timer_compare1_radio_txen);
    5552:	481f      	ldr	r0, [pc, #124]	; (55d0 <esb_ppi_init+0xc0>)
    5554:	f000 fd52 	bl	5ffc <nrfx_ppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    5558:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_alloc(&timer_compare1_radio_txen);
    555a:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    555c:	d118      	bne.n	5590 <esb_ppi_init+0x80>
		if (err != NRFX_SUCCESS) {
			goto error;
		}
	}

	err = nrfx_ppi_group_alloc(&ramp_up_ppi_group);
    555e:	481d      	ldr	r0, [pc, #116]	; (55d4 <esb_ppi_init+0xc4>)
    5560:	f000 fd66 	bl	6030 <nrfx_ppi_group_alloc>
	if (err != NRFX_SUCCESS) {
    5564:	42a0      	cmp	r0, r4
    5566:	d024      	beq.n	55b2 <esb_ppi_init+0xa2>
		LOG_ERR("gppi_group_alloc failed with: %d\n", err);
    5568:	466c      	mov	r4, sp
    556a:	b088      	sub	sp, #32
    556c:	466a      	mov	r2, sp
    556e:	4b1a      	ldr	r3, [pc, #104]	; (55d8 <esb_ppi_init+0xc8>)
    5570:	e9c2 3005 	strd	r3, r0, [r2, #20]
    5574:	2303      	movs	r3, #3
    5576:	f842 3f10 	str.w	r3, [r2, #16]!
    557a:	4818      	ldr	r0, [pc, #96]	; (55dc <esb_ppi_init+0xcc>)
    557c:	2300      	movs	r3, #0
    557e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5582:	f7fc fd41 	bl	2008 <z_impl_z_log_msg_static_create>
    5586:	46a5      	mov	sp, r4
		return -ENODEV;
    5588:	f06f 0012 	mvn.w	r0, #18
	return 0;

error:
	LOG_ERR("gppi_channel_alloc failed with: %d\n", err);
	return -ENODEV;
}
    558c:	46bd      	mov	sp, r7
    558e:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_ERR("gppi_channel_alloc failed with: %d\n", err);
    5590:	466d      	mov	r5, sp
    5592:	b088      	sub	sp, #32
    5594:	466a      	mov	r2, sp
    5596:	4b12      	ldr	r3, [pc, #72]	; (55e0 <esb_ppi_init+0xd0>)
    5598:	e9c2 3405 	strd	r3, r4, [r2, #20]
    559c:	2303      	movs	r3, #3
    559e:	f842 3f10 	str.w	r3, [r2, #16]!
    55a2:	480e      	ldr	r0, [pc, #56]	; (55dc <esb_ppi_init+0xcc>)
    55a4:	2300      	movs	r3, #0
    55a6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    55aa:	f7fc fd2d 	bl	2008 <z_impl_z_log_msg_static_create>
    55ae:	46ad      	mov	sp, r5
	return -ENODEV;
    55b0:	e7ea      	b.n	5588 <esb_ppi_init+0x78>
	return 0;
    55b2:	2000      	movs	r0, #0
    55b4:	e7ea      	b.n	558c <esb_ppi_init+0x7c>
    55b6:	bf00      	nop
    55b8:	20000f28 	.word	0x20000f28
    55bc:	0bad0000 	.word	0x0bad0000
    55c0:	20000f26 	.word	0x20000f26
    55c4:	20000f27 	.word	0x20000f27
    55c8:	20000f2b 	.word	0x20000f2b
    55cc:	20000f2a 	.word	0x20000f2a
    55d0:	20000f29 	.word	0x20000f29
    55d4:	20000f25 	.word	0x20000f25
    55d8:	00009ee3 	.word	0x00009ee3
    55dc:	000092e0 	.word	0x000092e0
    55e0:	00009f05 	.word	0x00009f05

000055e4 <esb_ppi_radio_disabled_get>:

uint32_t esb_ppi_radio_disabled_get(void)
{
	return nrf_radio_event_address_get(NRF_RADIO, NRF_RADIO_EVENT_DISABLED);
}
    55e4:	4800      	ldr	r0, [pc, #0]	; (55e8 <esb_ppi_radio_disabled_get+0x4>)
    55e6:	4770      	bx	lr
    55e8:	40001110 	.word	0x40001110

000055ec <esb_ppi_disable_all>:

void esb_ppi_disable_all(void)
{
	uint32_t channels_mask = (BIT(egu_ramp_up) |
    55ec:	4b0e      	ldr	r3, [pc, #56]	; (5628 <esb_ppi_disable_all+0x3c>)
				  BIT(disabled_egu) |
				  BIT(egu_timer_start) |
				  BIT(radio_address_timer_stop) |
				  BIT(timer_compare0_radio_disable) |
    55ee:	490f      	ldr	r1, [pc, #60]	; (562c <esb_ppi_disable_all+0x40>)
	uint32_t channels_mask = (BIT(egu_ramp_up) |
    55f0:	781b      	ldrb	r3, [r3, #0]
				  BIT(timer_compare0_radio_disable) |
    55f2:	7809      	ldrb	r1, [r1, #0]
	uint32_t channels_mask = (BIT(egu_ramp_up) |
    55f4:	2201      	movs	r2, #1
				  BIT(timer_compare0_radio_disable) |
    55f6:	fa02 f101 	lsl.w	r1, r2, r1
	uint32_t channels_mask = (BIT(egu_ramp_up) |
    55fa:	fa02 f303 	lsl.w	r3, r2, r3
				  BIT(radio_address_timer_stop) |
    55fe:	430b      	orrs	r3, r1
				  BIT(disabled_egu) |
    5600:	490b      	ldr	r1, [pc, #44]	; (5630 <esb_ppi_disable_all+0x44>)
    5602:	7809      	ldrb	r1, [r1, #0]
    5604:	fa02 f101 	lsl.w	r1, r2, r1
				  BIT(radio_address_timer_stop) |
    5608:	430b      	orrs	r3, r1
				  BIT(egu_timer_start) |
    560a:	490a      	ldr	r1, [pc, #40]	; (5634 <esb_ppi_disable_all+0x48>)
    560c:	7809      	ldrb	r1, [r1, #0]
    560e:	fa02 f101 	lsl.w	r1, r2, r1
				  BIT(radio_address_timer_stop) |
    5612:	430b      	orrs	r3, r1
    5614:	4908      	ldr	r1, [pc, #32]	; (5638 <esb_ppi_disable_all+0x4c>)
    5616:	7809      	ldrb	r1, [r1, #0]
    5618:	408a      	lsls	r2, r1
    561a:	4313      	orrs	r3, r2
    p_reg->CHENCLR = mask;
    561c:	4a07      	ldr	r2, [pc, #28]	; (563c <esb_ppi_disable_all+0x50>)
	uint32_t channels_mask = (BIT(egu_ramp_up) |
    561e:	f043 0301 	orr.w	r3, r3, #1
    5622:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
				  BIT(radio_end_timer_start) |
				  (IS_ENABLED(CONFIG_ESB_NEVER_DISABLE_TX) ?
					BIT(timer_compare1_radio_txen) : 0));

	nrf_ppi_channels_disable(NRF_PPI, channels_mask);
}
    5626:	4770      	bx	lr
    5628:	20000f28 	.word	0x20000f28
    562c:	20000f2a 	.word	0x20000f2a
    5630:	20000f26 	.word	0x20000f26
    5634:	20000f27 	.word	0x20000f27
    5638:	20000f2b 	.word	0x20000f2b
    563c:	4001f000 	.word	0x4001f000

00005640 <esb_ppi_deinit>:

void esb_ppi_deinit(void)
{
    5640:	b538      	push	{r3, r4, r5, lr}
	nrfx_err_t err;

	err = nrfx_ppi_channel_free(egu_ramp_up);
    5642:	4b18      	ldr	r3, [pc, #96]	; (56a4 <esb_ppi_deinit+0x64>)
    5644:	7818      	ldrb	r0, [r3, #0]
    5646:	f000 fcdf 	bl	6008 <nrfx_ppi_channel_free>
	if (err != NRFX_SUCCESS) {
    564a:	4b17      	ldr	r3, [pc, #92]	; (56a8 <esb_ppi_deinit+0x68>)
    564c:	4298      	cmp	r0, r3
	err = nrfx_ppi_channel_free(egu_ramp_up);
    564e:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    5650:	d127      	bne.n	56a2 <esb_ppi_deinit+0x62>
		goto error;
	}

	err = nrfx_ppi_channel_free(disabled_egu);
    5652:	4b16      	ldr	r3, [pc, #88]	; (56ac <esb_ppi_deinit+0x6c>)
    5654:	7818      	ldrb	r0, [r3, #0]
    5656:	f000 fcd7 	bl	6008 <nrfx_ppi_channel_free>
	if (err != NRFX_SUCCESS) {
    565a:	42a0      	cmp	r0, r4
	err = nrfx_ppi_channel_free(disabled_egu);
    565c:	4605      	mov	r5, r0
	if (err != NRFX_SUCCESS) {
    565e:	d120      	bne.n	56a2 <esb_ppi_deinit+0x62>
		goto error;
	}

	err = nrfx_ppi_channel_free(egu_timer_start);
    5660:	4b13      	ldr	r3, [pc, #76]	; (56b0 <esb_ppi_deinit+0x70>)
    5662:	7818      	ldrb	r0, [r3, #0]
    5664:	f000 fcd0 	bl	6008 <nrfx_ppi_channel_free>
	if (err != NRFX_SUCCESS) {
    5668:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_free(egu_timer_start);
    566a:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    566c:	d119      	bne.n	56a2 <esb_ppi_deinit+0x62>
		goto error;
	}

	err = nrfx_ppi_channel_free(radio_address_timer_stop);
    566e:	4b11      	ldr	r3, [pc, #68]	; (56b4 <esb_ppi_deinit+0x74>)
    5670:	7818      	ldrb	r0, [r3, #0]
    5672:	f000 fcc9 	bl	6008 <nrfx_ppi_channel_free>
	if (err != NRFX_SUCCESS) {
    5676:	42a0      	cmp	r0, r4
	err = nrfx_ppi_channel_free(radio_address_timer_stop);
    5678:	4605      	mov	r5, r0
	if (err != NRFX_SUCCESS) {
    567a:	d112      	bne.n	56a2 <esb_ppi_deinit+0x62>
		goto error;
	}

	err = nrfx_ppi_channel_free(timer_compare0_radio_disable);
    567c:	4b0e      	ldr	r3, [pc, #56]	; (56b8 <esb_ppi_deinit+0x78>)
    567e:	7818      	ldrb	r0, [r3, #0]
    5680:	f000 fcc2 	bl	6008 <nrfx_ppi_channel_free>
	if (err != NRFX_SUCCESS) {
    5684:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_free(timer_compare0_radio_disable);
    5686:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    5688:	d10b      	bne.n	56a2 <esb_ppi_deinit+0x62>
		goto error;
	}

	err = nrfx_ppi_channel_free(timer_compare1_radio_txen);
    568a:	4b0c      	ldr	r3, [pc, #48]	; (56bc <esb_ppi_deinit+0x7c>)
    568c:	7818      	ldrb	r0, [r3, #0]
    568e:	f000 fcbb 	bl	6008 <nrfx_ppi_channel_free>
	if (err != NRFX_SUCCESS) {
    5692:	42a0      	cmp	r0, r4
    5694:	d105      	bne.n	56a2 <esb_ppi_deinit+0x62>
		if (err != NRFX_SUCCESS) {
			goto error;
		}
	}

	err = nrfx_ppi_group_free(ramp_up_ppi_group);
    5696:	4b0a      	ldr	r3, [pc, #40]	; (56c0 <esb_ppi_deinit+0x80>)
    5698:	7818      	ldrb	r0, [r3, #0]
	return;

/* Should not happen. */
error:
	__ASSERT(false, "Failed to free PPI resources");
}
    569a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	err = nrfx_ppi_group_free(ramp_up_ppi_group);
    569e:	f000 bccd 	b.w	603c <nrfx_ppi_group_free>
}
    56a2:	bd38      	pop	{r3, r4, r5, pc}
    56a4:	20000f28 	.word	0x20000f28
    56a8:	0bad0000 	.word	0x0bad0000
    56ac:	20000f26 	.word	0x20000f26
    56b0:	20000f27 	.word	0x20000f27
    56b4:	20000f2b 	.word	0x20000f2b
    56b8:	20000f2a 	.word	0x20000f2a
    56bc:	20000f29 	.word	0x20000f29
    56c0:	20000f25 	.word	0x20000f25

000056c4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    56c4:	4a02      	ldr	r2, [pc, #8]	; (56d0 <nvmc_wait+0xc>)
    56c6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    56ca:	2b00      	cmp	r3, #0
    56cc:	d0fb      	beq.n	56c6 <nvmc_wait+0x2>
}
    56ce:	4770      	bx	lr
    56d0:	4001e000 	.word	0x4001e000

000056d4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    56d4:	b510      	push	{r4, lr}
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    56d6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)
            if (var1 == 0x10)
    56da:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    56de:	2a10      	cmp	r2, #16
    56e0:	d155      	bne.n	578e <SystemInit+0xba>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    56e2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    56e6:	2200      	movs	r2, #0
    56e8:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    56ec:	f8c1 2110 	str.w	r2, [r1, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    56f0:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    56f4:	4a48      	ldr	r2, [pc, #288]	; (5818 <SystemInit+0x144>)
    56f6:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
    56fa:	f8c2 0520 	str.w	r0, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    56fe:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
    5702:	f8c2 0524 	str.w	r0, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    5706:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    570a:	f8c2 0528 	str.w	r0, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    570e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
    5712:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    5716:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
    571a:	f8c2 0530 	str.w	r0, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    571e:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
    5722:	f8c2 0534 	str.w	r0, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    5726:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
    572a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    572e:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
    5732:	f8c2 0544 	str.w	r0, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    5736:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
    573a:	f8c2 0548 	str.w	r0, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    573e:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
    5742:	f8c2 054c 	str.w	r0, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    5746:	f8d3 042c 	ldr.w	r0, [r3, #1068]	; 0x42c
    574a:	f8c2 0550 	str.w	r0, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    574e:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
    5752:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    5756:	f8d3 0434 	ldr.w	r0, [r3, #1076]	; 0x434
    575a:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    575e:	f8d3 0438 	ldr.w	r0, [r3, #1080]	; 0x438
    5762:	f8c2 0564 	str.w	r0, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    5766:	f8d3 043c 	ldr.w	r0, [r3, #1084]	; 0x43c
    576a:	f8c2 0568 	str.w	r0, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    576e:	f8d3 0440 	ldr.w	r0, [r3, #1088]	; 0x440
    5772:	f8c2 056c 	str.w	r0, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    5776:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    577a:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    577e:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    5782:	07db      	lsls	r3, r3, #31
    5784:	d509      	bpl.n	579a <SystemInit+0xc6>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    5786:	f06f 0301 	mvn.w	r3, #1
    578a:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    578e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)
            if (var1 == 0x10)
    5792:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    5796:	2b10      	cmp	r3, #16
    5798:	d110      	bne.n	57bc <SystemInit+0xe8>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    579a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    579e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    57a2:	2b03      	cmp	r3, #3
    57a4:	d802      	bhi.n	57ac <SystemInit+0xd8>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    57a6:	4a1d      	ldr	r2, [pc, #116]	; (581c <SystemInit+0x148>)
    57a8:	5cd3      	ldrb	r3, [r2, r3]
    57aa:	b13b      	cbz	r3, 57bc <SystemInit+0xe8>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    57ac:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    57b0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    57b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    57b8:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    57bc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    57c0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    57c4:	2a00      	cmp	r2, #0
    57c6:	db03      	blt.n	57d0 <SystemInit+0xfc>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    57c8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    57cc:	2b00      	cmp	r3, #0
    57ce:	da22      	bge.n	5816 <SystemInit+0x142>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    57d0:	4913      	ldr	r1, [pc, #76]	; (5820 <SystemInit+0x14c>)
    57d2:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    57d4:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    57d8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    57dc:	2412      	movs	r4, #18
    nvmc_wait();
    57de:	f7ff ff71 	bl	56c4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    57e2:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    57e6:	f7ff ff6d 	bl	56c4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    57ea:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    57ee:	f7ff ff69 	bl	56c4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    57f2:	2300      	movs	r3, #0
    57f4:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    57f8:	f7ff ff64 	bl	56c4 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    57fc:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5800:	4908      	ldr	r1, [pc, #32]	; (5824 <SystemInit+0x150>)
    5802:	4b09      	ldr	r3, [pc, #36]	; (5828 <SystemInit+0x154>)
    5804:	68ca      	ldr	r2, [r1, #12]
    5806:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    580a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    580c:	60cb      	str	r3, [r1, #12]
    580e:	f3bf 8f4f 	dsb	sy
    __NOP();
    5812:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5814:	e7fd      	b.n	5812 <SystemInit+0x13e>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    5816:	bd10      	pop	{r4, pc}
    5818:	4000c000 	.word	0x4000c000
    581c:	00009f29 	.word	0x00009f29
    5820:	4001e000 	.word	0x4001e000
    5824:	e000ed00 	.word	0xe000ed00
    5828:	05fa0004 	.word	0x05fa0004

0000582c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    582c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    582e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    5830:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5832:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    5836:	fab2 f382 	clz	r3, r2
    583a:	f1c3 031f 	rsb	r3, r3, #31
    583e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    5840:	fa05 f403 	lsl.w	r4, r5, r3
    5844:	ea22 0404 	bic.w	r4, r2, r4
    5848:	e850 6f00 	ldrex	r6, [r0]
    584c:	4296      	cmp	r6, r2
    584e:	d104      	bne.n	585a <nrfx_flag32_alloc+0x2e>
    5850:	e840 4c00 	strex	ip, r4, [r0]
    5854:	f1bc 0f00 	cmp.w	ip, #0
    5858:	d1f6      	bne.n	5848 <nrfx_flag32_alloc+0x1c>
    585a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    585e:	d1e7      	bne.n	5830 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    5860:	4801      	ldr	r0, [pc, #4]	; (5868 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    5862:	700b      	strb	r3, [r1, #0]
}
    5864:	bd70      	pop	{r4, r5, r6, pc}
    5866:	bf00      	nop
    5868:	0bad0000 	.word	0x0bad0000

0000586c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    586c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    586e:	6803      	ldr	r3, [r0, #0]
    5870:	40cb      	lsrs	r3, r1
    5872:	07db      	lsls	r3, r3, #31
    5874:	d414      	bmi.n	58a0 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    5876:	2301      	movs	r3, #1
    5878:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    587a:	6802      	ldr	r2, [r0, #0]
    587c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    5880:	ea43 0102 	orr.w	r1, r3, r2
    5884:	e850 4f00 	ldrex	r4, [r0]
    5888:	4294      	cmp	r4, r2
    588a:	d104      	bne.n	5896 <nrfx_flag32_free+0x2a>
    588c:	e840 1c00 	strex	ip, r1, [r0]
    5890:	f1bc 0f00 	cmp.w	ip, #0
    5894:	d1f6      	bne.n	5884 <nrfx_flag32_free+0x18>
    5896:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    589a:	d1ee      	bne.n	587a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    589c:	4801      	ldr	r0, [pc, #4]	; (58a4 <nrfx_flag32_free+0x38>)
}
    589e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    58a0:	4801      	ldr	r0, [pc, #4]	; (58a8 <nrfx_flag32_free+0x3c>)
    58a2:	e7fc      	b.n	589e <nrfx_flag32_free+0x32>
    58a4:	0bad0000 	.word	0x0bad0000
    58a8:	0bad0004 	.word	0x0bad0004

000058ac <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    58ac:	4b05      	ldr	r3, [pc, #20]	; (58c4 <nrfx_clock_init+0x18>)
    58ae:	791a      	ldrb	r2, [r3, #4]
    58b0:	b92a      	cbnz	r2, 58be <nrfx_clock_init+0x12>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    }
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    58b2:	715a      	strb	r2, [r3, #5]
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    58b4:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    58b6:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    58b8:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    58ba:	4803      	ldr	r0, [pc, #12]	; (58c8 <nrfx_clock_init+0x1c>)
    58bc:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    58be:	4803      	ldr	r0, [pc, #12]	; (58cc <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    58c0:	4770      	bx	lr
    58c2:	bf00      	nop
    58c4:	20000b08 	.word	0x20000b08
    58c8:	0bad0000 	.word	0x0bad0000
    58cc:	0bad000c 	.word	0x0bad000c

000058d0 <nrfx_clock_calibration_start>:
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    58d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    58d4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    58d8:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    58dc:	03c8      	lsls	r0, r1, #15
    58de:	d516      	bpl.n	590e <nrfx_clock_calibration_start+0x3e>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &clk_src))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)
    58e0:	07d1      	lsls	r1, r2, #31
    58e2:	d514      	bpl.n	590e <nrfx_clock_calibration_start+0x3e>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    58e4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    58e8:	03d2      	lsls	r2, r2, #15
    58ea:	d510      	bpl.n	590e <nrfx_clock_calibration_start+0x3e>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_LFCLK, NULL))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (m_clock_cb.cal_state == CAL_STATE_IDLE)
    58ec:	490a      	ldr	r1, [pc, #40]	; (5918 <nrfx_clock_calibration_start+0x48>)
    58ee:	794a      	ldrb	r2, [r1, #5]
    58f0:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    58f4:	b96a      	cbnz	r2, 5912 <nrfx_clock_calibration_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    58f6:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    58fa:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    nrfx_err_t err_code = NRFX_SUCCESS;
    58fe:	4807      	ldr	r0, [pc, #28]	; (591c <nrfx_clock_calibration_start+0x4c>)
    p_reg->INTENSET = mask;
    5900:	2208      	movs	r2, #8
    5902:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_CAL;
    5906:	2201      	movs	r2, #1
    5908:	714a      	strb	r2, [r1, #5]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    590a:	611a      	str	r2, [r3, #16]
}
    590c:	4770      	bx	lr
        return NRFX_ERROR_INVALID_STATE;
    590e:	4804      	ldr	r0, [pc, #16]	; (5920 <nrfx_clock_calibration_start+0x50>)
    5910:	4770      	bx	lr
#endif
        nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_CAL);
    }
    else
    {
        err_code = NRFX_ERROR_BUSY;
    5912:	4804      	ldr	r0, [pc, #16]	; (5924 <nrfx_clock_calibration_start+0x54>)

    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    5914:	4770      	bx	lr
    5916:	bf00      	nop
    5918:	20000b08 	.word	0x20000b08
    591c:	0bad0000 	.word	0x0bad0000
    5920:	0bad0005 	.word	0x0bad0005
    5924:	0bad000b 	.word	0x0bad000b

00005928 <nrfx_power_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    5928:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    592a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    592e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    5932:	b152      	cbz	r2, 594a <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5934:	2000      	movs	r0, #0
    5936:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    593a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    593e:	2201      	movs	r2, #1
    5940:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    5944:	4b16      	ldr	r3, [pc, #88]	; (59a0 <nrfx_power_clock_irq_handler+0x78>)
    5946:	681b      	ldr	r3, [r3, #0]
    5948:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    594a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    594e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    5952:	b15a      	cbz	r2, 596c <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5954:	2200      	movs	r2, #0
    5956:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    595a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENCLR = mask;
    595e:	2202      	movs	r2, #2
    5960:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    5964:	4b0e      	ldr	r3, [pc, #56]	; (59a0 <nrfx_power_clock_irq_handler+0x78>)
    5966:	2001      	movs	r0, #1
    5968:	681b      	ldr	r3, [r3, #0]
    596a:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    596c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5970:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CTTO);
    }
#endif // NRF_CLOCK_HAS_CALIBRATION_TIMER && NRFX_CHECK(NRFX_CLOCK_CONFIG_CT_ENABLED)

    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_DONE) &&
    5974:	b192      	cbz	r2, 599c <nrfx_power_clock_irq_handler+0x74>
    return p_reg->INTENSET & mask;
    5976:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    597a:	0712      	lsls	r2, r2, #28
    597c:	d50e      	bpl.n	599c <nrfx_power_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    597e:	2200      	movs	r2, #0
    5980:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    5984:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    p_reg->INTENCLR = mask;
    5988:	2108      	movs	r1, #8
    598a:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
        *(volatile uint32_t *)0x40000C34 = 0x00000000;
#endif
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_DONE");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    598e:	4b04      	ldr	r3, [pc, #16]	; (59a0 <nrfx_power_clock_irq_handler+0x78>)
    5990:	715a      	strb	r2, [r3, #5]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    5992:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    5996:	681b      	ldr	r3, [r3, #0]
    5998:	2003      	movs	r0, #3
    599a:	4718      	bx	r3
}
    599c:	bd10      	pop	{r4, pc}
    599e:	bf00      	nop
    59a0:	20000b08 	.word	0x20000b08

000059a4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    59a4:	4b03      	ldr	r3, [pc, #12]	; (59b4 <pin_in_use_by_te+0x10>)
    59a6:	3008      	adds	r0, #8
    59a8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    59ac:	f3c0 1040 	ubfx	r0, r0, #5, #1
    59b0:	4770      	bx	lr
    59b2:	bf00      	nop
    59b4:	20000104 	.word	0x20000104

000059b8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    59b8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    59ba:	f100 0308 	add.w	r3, r0, #8
    59be:	4c0c      	ldr	r4, [pc, #48]	; (59f0 <call_handler+0x38>)
    59c0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    59c4:	05da      	lsls	r2, r3, #23
{
    59c6:	4605      	mov	r5, r0
    59c8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    59ca:	d507      	bpl.n	59dc <call_handler+0x24>
    59cc:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    59d0:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    59d4:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    59d8:	6852      	ldr	r2, [r2, #4]
    59da:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    59dc:	68a3      	ldr	r3, [r4, #8]
    59de:	b12b      	cbz	r3, 59ec <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    59e0:	68e2      	ldr	r2, [r4, #12]
    59e2:	4631      	mov	r1, r6
    59e4:	4628      	mov	r0, r5
    }
}
    59e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    59ea:	4718      	bx	r3
}
    59ec:	bd70      	pop	{r4, r5, r6, pc}
    59ee:	bf00      	nop
    59f0:	20000104 	.word	0x20000104

000059f4 <release_handler>:
{
    59f4:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    59f6:	4a12      	ldr	r2, [pc, #72]	; (5a40 <release_handler+0x4c>)
    59f8:	3008      	adds	r0, #8
    59fa:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    59fe:	05d9      	lsls	r1, r3, #23
    5a00:	d51b      	bpl.n	5a3a <release_handler+0x46>
    5a02:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    5a06:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5a0a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5a0e:	f102 040e 	add.w	r4, r2, #14
    5a12:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    5a14:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    5a18:	f413 7f80 	tst.w	r3, #256	; 0x100
    5a1c:	d003      	beq.n	5a26 <release_handler+0x32>
    5a1e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    5a22:	4299      	cmp	r1, r3
    5a24:	d009      	beq.n	5a3a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5a26:	3001      	adds	r0, #1
    5a28:	2820      	cmp	r0, #32
    5a2a:	d1f3      	bne.n	5a14 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    5a2c:	2300      	movs	r3, #0
    5a2e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    5a32:	4804      	ldr	r0, [pc, #16]	; (5a44 <release_handler+0x50>)
}
    5a34:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    5a36:	f7ff bf19 	b.w	586c <nrfx_flag32_free>
}
    5a3a:	bc10      	pop	{r4}
    5a3c:	4770      	bx	lr
    5a3e:	bf00      	nop
    5a40:	20000104 	.word	0x20000104
    5a44:	20000158 	.word	0x20000158

00005a48 <pin_handler_trigger_uninit>:
{
    5a48:	b538      	push	{r3, r4, r5, lr}
    5a4a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    5a4c:	f7ff ffaa 	bl	59a4 <pin_in_use_by_te>
    5a50:	4c09      	ldr	r4, [pc, #36]	; (5a78 <pin_handler_trigger_uninit+0x30>)
    5a52:	f102 0508 	add.w	r5, r2, #8
    5a56:	b140      	cbz	r0, 5a6a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5a58:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    5a5c:	4907      	ldr	r1, [pc, #28]	; (5a7c <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    5a5e:	0b5b      	lsrs	r3, r3, #13
    5a60:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    5a64:	2000      	movs	r0, #0
    5a66:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    5a6a:	4610      	mov	r0, r2
    5a6c:	f7ff ffc2 	bl	59f4 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    5a70:	2300      	movs	r3, #0
    5a72:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    5a76:	bd38      	pop	{r3, r4, r5, pc}
    5a78:	20000104 	.word	0x20000104
    5a7c:	40006000 	.word	0x40006000

00005a80 <nrfx_gpiote_input_configure>:
{
    5a80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5a84:	4604      	mov	r4, r0
    5a86:	461d      	mov	r5, r3
    if (p_input_config)
    5a88:	b309      	cbz	r1, 5ace <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5a8a:	4f4f      	ldr	r7, [pc, #316]	; (5bc8 <nrfx_gpiote_input_configure+0x148>)
    5a8c:	f100 0808 	add.w	r8, r0, #8
    5a90:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    5a94:	07b3      	lsls	r3, r6, #30
    5a96:	d506      	bpl.n	5aa6 <nrfx_gpiote_input_configure+0x26>
    5a98:	f7ff ff84 	bl	59a4 <pin_in_use_by_te>
    5a9c:	b118      	cbz	r0, 5aa6 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    5a9e:	484b      	ldr	r0, [pc, #300]	; (5bcc <nrfx_gpiote_input_configure+0x14c>)
}
    5aa0:	b002      	add	sp, #8
    5aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    5aa6:	f004 031f 	and.w	r3, r4, #31
    5aaa:	009b      	lsls	r3, r3, #2
    5aac:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5ab0:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5ab2:	f8d3 0700 	ldr.w	r0, [r3, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    5ab6:	f026 0602 	bic.w	r6, r6, #2
    cnf &= ~to_update;
    5aba:	f020 000f 	bic.w	r0, r0, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    5abe:	f046 0601 	orr.w	r6, r6, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5ac2:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
    5ac6:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    5aca:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
    if (p_trigger_config)
    5ace:	b19a      	cbz	r2, 5af8 <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5ad0:	4b3d      	ldr	r3, [pc, #244]	; (5bc8 <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    5ad2:	7817      	ldrb	r7, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    5ad4:	6850      	ldr	r0, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5ad6:	f104 0608 	add.w	r6, r4, #8
    5ada:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    5ade:	f011 0f02 	tst.w	r1, #2
    5ae2:	d00d      	beq.n	5b00 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    5ae4:	2800      	cmp	r0, #0
    5ae6:	d1da      	bne.n	5a9e <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    5ae8:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    5aec:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    5af0:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
    5af4:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
    5af8:	2d00      	cmp	r5, #0
    5afa:	d13b      	bne.n	5b74 <nrfx_gpiote_input_configure+0xf4>
        err = NRFX_SUCCESS;
    5afc:	4834      	ldr	r0, [pc, #208]	; (5bd0 <nrfx_gpiote_input_configure+0x150>)
    5afe:	e7cf      	b.n	5aa0 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    5b00:	f021 0120 	bic.w	r1, r1, #32
    5b04:	04c9      	lsls	r1, r1, #19
    5b06:	0cc9      	lsrs	r1, r1, #19
    5b08:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    5b0c:	2800      	cmp	r0, #0
    5b0e:	d0eb      	beq.n	5ae8 <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    5b10:	2f03      	cmp	r7, #3
    5b12:	d8c4      	bhi.n	5a9e <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    5b14:	6852      	ldr	r2, [r2, #4]
    5b16:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    5b1a:	b92f      	cbnz	r7, 5b28 <nrfx_gpiote_input_configure+0xa8>
    5b1c:	4a2d      	ldr	r2, [pc, #180]	; (5bd4 <nrfx_gpiote_input_configure+0x154>)
    5b1e:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
    5b22:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
#endif
}
    5b26:	e7df      	b.n	5ae8 <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5b28:	ea4f 028c 	mov.w	r2, ip, lsl #2
    5b2c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5b30:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5b34:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    5b38:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    5b3c:	f020 0003 	bic.w	r0, r0, #3
    5b40:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5b44:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    5b48:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    5b4c:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    5b50:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5b54:	0220      	lsls	r0, r4, #8
    5b56:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    5b5a:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    5b5e:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    5b62:	ea40 000e 	orr.w	r0, r0, lr
    5b66:	f041 0120 	orr.w	r1, r1, #32
    5b6a:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    5b6e:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    5b72:	e7b9      	b.n	5ae8 <nrfx_gpiote_input_configure+0x68>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    5b74:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    5b78:	4620      	mov	r0, r4
    5b7a:	f7ff ff3b 	bl	59f4 <release_handler>
    if (!handler)
    5b7e:	2e00      	cmp	r6, #0
    5b80:	d0bc      	beq.n	5afc <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5b82:	4d11      	ldr	r5, [pc, #68]	; (5bc8 <nrfx_gpiote_input_configure+0x148>)
    5b84:	e9d5 2300 	ldrd	r2, r3, [r5]
    5b88:	4296      	cmp	r6, r2
    5b8a:	d101      	bne.n	5b90 <nrfx_gpiote_input_configure+0x110>
    5b8c:	429f      	cmp	r7, r3
    5b8e:	d019      	beq.n	5bc4 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    5b90:	4811      	ldr	r0, [pc, #68]	; (5bd8 <nrfx_gpiote_input_configure+0x158>)
    5b92:	f10d 0107 	add.w	r1, sp, #7
    5b96:	f7ff fe49 	bl	582c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    5b9a:	4b0d      	ldr	r3, [pc, #52]	; (5bd0 <nrfx_gpiote_input_configure+0x150>)
    5b9c:	4298      	cmp	r0, r3
    5b9e:	f47f af7f 	bne.w	5aa0 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    5ba2:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    5ba6:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    5baa:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5bae:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    5bb0:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    5bb2:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    5bb6:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    5bba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    5bbe:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    5bc2:	e79b      	b.n	5afc <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    5bc4:	2200      	movs	r2, #0
    5bc6:	e7ee      	b.n	5ba6 <nrfx_gpiote_input_configure+0x126>
    5bc8:	20000104 	.word	0x20000104
    5bcc:	0bad0004 	.word	0x0bad0004
    5bd0:	0bad0000 	.word	0x0bad0000
    5bd4:	40006000 	.word	0x40006000
    5bd8:	20000158 	.word	0x20000158

00005bdc <nrfx_gpiote_output_configure>:
{
    5bdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5bde:	4604      	mov	r4, r0
    if (p_config)
    5be0:	b389      	cbz	r1, 5c46 <nrfx_gpiote_output_configure+0x6a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5be2:	4e3a      	ldr	r6, [pc, #232]	; (5ccc <nrfx_gpiote_output_configure+0xf0>)
    5be4:	f100 0708 	add.w	r7, r0, #8
    5be8:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    5bec:	07ab      	lsls	r3, r5, #30
    5bee:	d404      	bmi.n	5bfa <nrfx_gpiote_output_configure+0x1e>
    5bf0:	f7ff fed8 	bl	59a4 <pin_in_use_by_te>
    5bf4:	b108      	cbz	r0, 5bfa <nrfx_gpiote_output_configure+0x1e>
{
    5bf6:	4836      	ldr	r0, [pc, #216]	; (5cd0 <nrfx_gpiote_output_configure+0xf4>)
}
    5bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    5bfa:	f015 0f1c 	tst.w	r5, #28
    5bfe:	784b      	ldrb	r3, [r1, #1]
    5c00:	d124      	bne.n	5c4c <nrfx_gpiote_output_configure+0x70>
    *p_pin = pin_number & 0x1F;
    5c02:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5c06:	f500 7ee0 	add.w	lr, r0, #448	; 0x1c0
    5c0a:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    5c0e:	005b      	lsls	r3, r3, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5c10:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5c14:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    5c18:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    5c1a:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    5c1e:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    5c22:	f02c 0c07 	bic.w	ip, ip, #7
    5c26:	ea43 030c 	orr.w	r3, r3, ip
    5c2a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    5c2e:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    5c32:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5c36:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    5c3a:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    5c3e:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    5c42:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    5c46:	b922      	cbnz	r2, 5c52 <nrfx_gpiote_output_configure+0x76>
    return NRFX_SUCCESS;
    5c48:	4822      	ldr	r0, [pc, #136]	; (5cd4 <nrfx_gpiote_output_configure+0xf8>)
    5c4a:	e7d5      	b.n	5bf8 <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    5c4c:	2b01      	cmp	r3, #1
    5c4e:	d1d8      	bne.n	5c02 <nrfx_gpiote_output_configure+0x26>
    5c50:	e7d1      	b.n	5bf6 <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5c52:	4e1e      	ldr	r6, [pc, #120]	; (5ccc <nrfx_gpiote_output_configure+0xf0>)
    5c54:	f104 0708 	add.w	r7, r4, #8
    5c58:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    5c5c:	0783      	lsls	r3, r0, #30
    5c5e:	d5ca      	bpl.n	5bf6 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    5c60:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    5c64:	4661      	mov	r1, ip
    5c66:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    5c68:	f020 0020 	bic.w	r0, r0, #32
    5c6c:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    5c70:	04c0      	lsls	r0, r0, #19
    5c72:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    5c76:	0cc0      	lsrs	r0, r0, #19
    5c78:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    5c7c:	2300      	movs	r3, #0
    5c7e:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    5c82:	7855      	ldrb	r5, [r2, #1]
    5c84:	2d00      	cmp	r5, #0
    5c86:	d0df      	beq.n	5c48 <nrfx_gpiote_output_configure+0x6c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    5c88:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    5c8c:	7892      	ldrb	r2, [r2, #2]
    5c8e:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    5c92:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5c96:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5c9a:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    5c9e:	0223      	lsls	r3, r4, #8
    5ca0:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    5ca4:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5ca6:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    5caa:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5cae:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5cb0:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    5cb2:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5cb6:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5cba:	4313      	orrs	r3, r2
    5cbc:	f040 0020 	orr.w	r0, r0, #32
    5cc0:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    5cc4:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    5cc8:	e7be      	b.n	5c48 <nrfx_gpiote_output_configure+0x6c>
    5cca:	bf00      	nop
    5ccc:	20000104 	.word	0x20000104
    5cd0:	0bad0004 	.word	0x0bad0004
    5cd4:	0bad0000 	.word	0x0bad0000

00005cd8 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    5cd8:	4b01      	ldr	r3, [pc, #4]	; (5ce0 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    5cda:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    5cde:	4770      	bx	lr
    5ce0:	20000104 	.word	0x20000104

00005ce4 <nrfx_gpiote_channel_get>:
{
    5ce4:	b508      	push	{r3, lr}
    5ce6:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    5ce8:	f7ff fe5c 	bl	59a4 <pin_in_use_by_te>
    5cec:	b138      	cbz	r0, 5cfe <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5cee:	4b05      	ldr	r3, [pc, #20]	; (5d04 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    5cf0:	4805      	ldr	r0, [pc, #20]	; (5d08 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5cf2:	3208      	adds	r2, #8
    5cf4:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    5cf8:	0b5b      	lsrs	r3, r3, #13
    5cfa:	700b      	strb	r3, [r1, #0]
}
    5cfc:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5cfe:	4803      	ldr	r0, [pc, #12]	; (5d0c <nrfx_gpiote_channel_get+0x28>)
    5d00:	e7fc      	b.n	5cfc <nrfx_gpiote_channel_get+0x18>
    5d02:	bf00      	nop
    5d04:	20000104 	.word	0x20000104
    5d08:	0bad0000 	.word	0x0bad0000
    5d0c:	0bad0004 	.word	0x0bad0004

00005d10 <nrfx_gpiote_init>:
{
    5d10:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    5d12:	4c0f      	ldr	r4, [pc, #60]	; (5d50 <nrfx_gpiote_init+0x40>)
    5d14:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    5d18:	b9bd      	cbnz	r5, 5d4a <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    5d1a:	2240      	movs	r2, #64	; 0x40
    5d1c:	4629      	mov	r1, r5
    5d1e:	f104 0010 	add.w	r0, r4, #16
    5d22:	f002 fbfb 	bl	851c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    5d26:	2006      	movs	r0, #6
    5d28:	f7fc fe64 	bl	29f4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5d2c:	4b09      	ldr	r3, [pc, #36]	; (5d54 <nrfx_gpiote_init+0x44>)
    return err_code;
    5d2e:	480a      	ldr	r0, [pc, #40]	; (5d58 <nrfx_gpiote_init+0x48>)
    5d30:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    5d34:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    5d38:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5d3c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    5d40:	2301      	movs	r3, #1
    5d42:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    5d46:	6563      	str	r3, [r4, #84]	; 0x54
}
    5d48:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    5d4a:	4804      	ldr	r0, [pc, #16]	; (5d5c <nrfx_gpiote_init+0x4c>)
    5d4c:	e7fc      	b.n	5d48 <nrfx_gpiote_init+0x38>
    5d4e:	bf00      	nop
    5d50:	20000104 	.word	0x20000104
    5d54:	40006000 	.word	0x40006000
    5d58:	0bad0000 	.word	0x0bad0000
    5d5c:	0bad0005 	.word	0x0bad0005

00005d60 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    5d60:	4b03      	ldr	r3, [pc, #12]	; (5d70 <nrfx_gpiote_is_init+0x10>)
    5d62:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    5d66:	3800      	subs	r0, #0
    5d68:	bf18      	it	ne
    5d6a:	2001      	movne	r0, #1
    5d6c:	4770      	bx	lr
    5d6e:	bf00      	nop
    5d70:	20000104 	.word	0x20000104

00005d74 <nrfx_gpiote_channel_free>:
{
    5d74:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    5d76:	4801      	ldr	r0, [pc, #4]	; (5d7c <nrfx_gpiote_channel_free+0x8>)
    5d78:	f7ff bd78 	b.w	586c <nrfx_flag32_free>
    5d7c:	20000154 	.word	0x20000154

00005d80 <nrfx_gpiote_channel_alloc>:
{
    5d80:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    5d82:	4801      	ldr	r0, [pc, #4]	; (5d88 <nrfx_gpiote_channel_alloc+0x8>)
    5d84:	f7ff bd52 	b.w	582c <nrfx_flag32_alloc>
    5d88:	20000154 	.word	0x20000154

00005d8c <nrfx_gpiote_trigger_enable>:
{
    5d8c:	b510      	push	{r4, lr}
    5d8e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5d90:	f7ff fe08 	bl	59a4 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5d94:	f102 0408 	add.w	r4, r2, #8
    5d98:	4b1c      	ldr	r3, [pc, #112]	; (5e0c <nrfx_gpiote_trigger_enable+0x80>)
    5d9a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5d9e:	b1e0      	cbz	r0, 5dda <nrfx_gpiote_trigger_enable+0x4e>
    5da0:	f013 0402 	ands.w	r4, r3, #2
    5da4:	d119      	bne.n	5dda <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5da6:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    5da8:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    5daa:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    5dae:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    5db2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5db6:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5dba:	6004      	str	r4, [r0, #0]
    5dbc:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    5dbe:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    5dc2:	f040 0001 	orr.w	r0, r0, #1
    5dc6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    5dca:	b129      	cbz	r1, 5dd8 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    5dcc:	2201      	movs	r2, #1
    5dce:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    5dd2:	4a0f      	ldr	r2, [pc, #60]	; (5e10 <nrfx_gpiote_trigger_enable+0x84>)
    5dd4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    5dd8:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5dda:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    5dde:	2b04      	cmp	r3, #4
    5de0:	d010      	beq.n	5e04 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    5de2:	2b05      	cmp	r3, #5
    5de4:	d010      	beq.n	5e08 <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    5de6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5dea:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    5dee:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5df2:	40d9      	lsrs	r1, r3
    5df4:	f001 0101 	and.w	r1, r1, #1
    5df8:	3102      	adds	r1, #2
}
    5dfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    5dfe:	4610      	mov	r0, r2
    5e00:	f002 be7a 	b.w	8af8 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    5e04:	2103      	movs	r1, #3
    5e06:	e7f8      	b.n	5dfa <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    5e08:	2102      	movs	r1, #2
    5e0a:	e7f6      	b.n	5dfa <nrfx_gpiote_trigger_enable+0x6e>
    5e0c:	20000104 	.word	0x20000104
    5e10:	40006000 	.word	0x40006000

00005e14 <nrfx_gpiote_trigger_disable>:
{
    5e14:	b508      	push	{r3, lr}
    5e16:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5e18:	f7ff fdc4 	bl	59a4 <pin_in_use_by_te>
    5e1c:	b1c0      	cbz	r0, 5e50 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5e1e:	f102 0108 	add.w	r1, r2, #8
    5e22:	4b0e      	ldr	r3, [pc, #56]	; (5e5c <nrfx_gpiote_trigger_disable+0x48>)
    5e24:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5e28:	0799      	lsls	r1, r3, #30
    5e2a:	d411      	bmi.n	5e50 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5e2c:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5e2e:	2201      	movs	r2, #1
    5e30:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    5e32:	009b      	lsls	r3, r3, #2
    5e34:	490a      	ldr	r1, [pc, #40]	; (5e60 <nrfx_gpiote_trigger_disable+0x4c>)
    5e36:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5e3a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5e3e:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5e42:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    5e46:	f022 0203 	bic.w	r2, r2, #3
    5e4a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    5e4e:	bd08      	pop	{r3, pc}
    5e50:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5e54:	2100      	movs	r1, #0
    5e56:	4610      	mov	r0, r2
    5e58:	f002 be4e 	b.w	8af8 <nrf_gpio_cfg_sense_set>
    5e5c:	20000104 	.word	0x20000104
    5e60:	40006000 	.word	0x40006000

00005e64 <nrfx_gpiote_pin_uninit>:
{
    5e64:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5e66:	4b0d      	ldr	r3, [pc, #52]	; (5e9c <nrfx_gpiote_pin_uninit+0x38>)
    5e68:	f100 0208 	add.w	r2, r0, #8
{
    5e6c:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5e6e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    5e72:	07db      	lsls	r3, r3, #31
    5e74:	d50f      	bpl.n	5e96 <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    5e76:	f7ff ffcd 	bl	5e14 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    5e7a:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    5e7c:	f004 041f 	and.w	r4, r4, #31
    5e80:	f7ff fde2 	bl	5a48 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    5e84:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    5e88:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5e8c:	2202      	movs	r2, #2
    5e8e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    5e92:	4803      	ldr	r0, [pc, #12]	; (5ea0 <nrfx_gpiote_pin_uninit+0x3c>)
}
    5e94:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5e96:	4803      	ldr	r0, [pc, #12]	; (5ea4 <nrfx_gpiote_pin_uninit+0x40>)
    5e98:	e7fc      	b.n	5e94 <nrfx_gpiote_pin_uninit+0x30>
    5e9a:	bf00      	nop
    5e9c:	20000104 	.word	0x20000104
    5ea0:	0bad0000 	.word	0x0bad0000
    5ea4:	0bad0004 	.word	0x0bad0004

00005ea8 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    5ea8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5eac:	4b4f      	ldr	r3, [pc, #316]	; (5fec <nrfx_gpiote_irq_handler+0x144>)
    return p_reg->INTENSET & mask;
    5eae:	4850      	ldr	r0, [pc, #320]	; (5ff0 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5eb0:	4950      	ldr	r1, [pc, #320]	; (5ff4 <nrfx_gpiote_irq_handler+0x14c>)
    uint32_t status = 0;
    5eb2:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    5eb4:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5eb6:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5eb8:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    5eba:	b136      	cbz	r6, 5eca <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    5ebc:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    5ec0:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5ec2:	bf1e      	ittt	ne
    5ec4:	601c      	strne	r4, [r3, #0]
    5ec6:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    5ec8:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5eca:	3304      	adds	r3, #4
    5ecc:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    5ece:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5ed2:	d1f1      	bne.n	5eb8 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5ed4:	4b46      	ldr	r3, [pc, #280]	; (5ff0 <nrfx_gpiote_irq_handler+0x148>)
    5ed6:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    5eda:	b1bb      	cbz	r3, 5f0c <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    5edc:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    5ee0:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    5ee4:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    5ee6:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    5eea:	af01      	add	r7, sp, #4
    5eec:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    5ef0:	9c01      	ldr	r4, [sp, #4]
    5ef2:	b98c      	cbnz	r4, 5f18 <nrfx_gpiote_irq_handler+0x70>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5ef4:	4b3e      	ldr	r3, [pc, #248]	; (5ff0 <nrfx_gpiote_irq_handler+0x148>)
    5ef6:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    5efa:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    5efe:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    5f02:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    5f04:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    5f08:	2b00      	cmp	r3, #0
    5f0a:	d1ee      	bne.n	5eea <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    5f0c:	2401      	movs	r4, #1
    while (mask)
    5f0e:	2d00      	cmp	r5, #0
    5f10:	d153      	bne.n	5fba <nrfx_gpiote_irq_handler+0x112>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    5f12:	b003      	add	sp, #12
    5f14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    5f18:	fa94 f4a4 	rbit	r4, r4
    5f1c:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5f20:	4a35      	ldr	r2, [pc, #212]	; (5ff8 <nrfx_gpiote_irq_handler+0x150>)
    5f22:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    5f26:	08e0      	lsrs	r0, r4, #3
    5f28:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    5f2c:	5c3b      	ldrb	r3, [r7, r0]
    bit = BITMASK_RELBIT_GET(bit);
    5f2e:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    5f32:	fa08 f202 	lsl.w	r2, r8, r2
    5f36:	ea23 0302 	bic.w	r3, r3, r2
    5f3a:	543b      	strb	r3, [r7, r0]
    5f3c:	00a3      	lsls	r3, r4, #2
    5f3e:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    5f42:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5f46:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    5f4a:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5f4c:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    5f4e:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    5f52:	d518      	bpl.n	5f86 <nrfx_gpiote_irq_handler+0xde>
        call_handler(pin, trigger);
    5f54:	4659      	mov	r1, fp
    5f56:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5f58:	fa5f fa82 	uxtb.w	sl, r2
    5f5c:	f7ff fd2c 	bl	59b8 <call_handler>
    5f60:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    5f64:	f3c3 4301 	ubfx	r3, r3, #16, #2
    5f68:	459a      	cmp	sl, r3
    5f6a:	d107      	bne.n	5f7c <nrfx_gpiote_irq_handler+0xd4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5f6c:	2100      	movs	r1, #0
    5f6e:	4620      	mov	r0, r4
    5f70:	f002 fdc2 	bl	8af8 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    5f74:	4651      	mov	r1, sl
    5f76:	4620      	mov	r0, r4
    5f78:	f002 fdbe 	bl	8af8 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    5f7c:	fa08 f404 	lsl.w	r4, r8, r4
    5f80:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    5f84:	e7b4      	b.n	5ef0 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5f86:	2a02      	cmp	r2, #2
    5f88:	d10c      	bne.n	5fa4 <nrfx_gpiote_irq_handler+0xfc>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5f8a:	2103      	movs	r1, #3
    5f8c:	4620      	mov	r0, r4
    5f8e:	f002 fdb3 	bl	8af8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5f92:	f00a 0305 	and.w	r3, sl, #5
    5f96:	2b01      	cmp	r3, #1
    5f98:	d1f0      	bne.n	5f7c <nrfx_gpiote_irq_handler+0xd4>
            call_handler(pin, trigger);
    5f9a:	4659      	mov	r1, fp
    5f9c:	4620      	mov	r0, r4
    5f9e:	f7ff fd0b 	bl	59b8 <call_handler>
    5fa2:	e7eb      	b.n	5f7c <nrfx_gpiote_irq_handler+0xd4>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5fa4:	2102      	movs	r1, #2
    5fa6:	4620      	mov	r0, r4
    5fa8:	f002 fda6 	bl	8af8 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    5fac:	f1ba 0f03 	cmp.w	sl, #3
    5fb0:	d0f3      	beq.n	5f9a <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5fb2:	2a03      	cmp	r2, #3
    5fb4:	d1e2      	bne.n	5f7c <nrfx_gpiote_irq_handler+0xd4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    5fb6:	458a      	cmp	sl, r1
    5fb8:	e7ee      	b.n	5f98 <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
    5fba:	fa95 f3a5 	rbit	r3, r5
    5fbe:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5fc2:	fa04 f203 	lsl.w	r2, r4, r3
    5fc6:	009b      	lsls	r3, r3, #2
    5fc8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5fcc:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5fd0:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    5fd4:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    5fd8:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    5fdc:	f3c0 2004 	ubfx	r0, r0, #8, #5
    5fe0:	f3c1 4101 	ubfx	r1, r1, #16, #2
    5fe4:	f7ff fce8 	bl	59b8 <call_handler>
    5fe8:	e791      	b.n	5f0e <nrfx_gpiote_irq_handler+0x66>
    5fea:	bf00      	nop
    5fec:	40006100 	.word	0x40006100
    5ff0:	40006000 	.word	0x40006000
    5ff4:	40006120 	.word	0x40006120
    5ff8:	20000104 	.word	0x20000104

00005ffc <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    5ffc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    5ffe:	4801      	ldr	r0, [pc, #4]	; (6004 <nrfx_ppi_channel_alloc+0x8>)
    6000:	f7ff bc14 	b.w	582c <nrfx_flag32_alloc>
    6004:	20000164 	.word	0x20000164

00006008 <nrfx_ppi_channel_free>:
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    6008:	2301      	movs	r3, #1
    600a:	4083      	lsls	r3, r0
    return ((NRFX_PPI_PROG_APP_CHANNELS_MASK & nrfx_ppi_channel_to_mask(channel)) != 0);
    600c:	f3c3 0213 	ubfx	r2, r3, #0, #20
}


nrfx_err_t nrfx_ppi_channel_free(nrf_ppi_channel_t channel)
{
    6010:	4601      	mov	r1, r0
    if (!is_programmable_app_channel(channel))
    6012:	b12a      	cbz	r2, 6020 <nrfx_ppi_channel_free+0x18>
    p_reg->CHENCLR = PPI_CHENCLR_CH0_Clear << ((uint32_t) channel);
    6014:	4a03      	ldr	r2, [pc, #12]	; (6024 <nrfx_ppi_channel_free+0x1c>)
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_ppi_channel_disable(NRF_PPI, channel);

    return nrfx_flag32_free(&m_channels_allocated, channel);
    6016:	4804      	ldr	r0, [pc, #16]	; (6028 <nrfx_ppi_channel_free+0x20>)
    6018:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    601c:	f7ff bc26 	b.w	586c <nrfx_flag32_free>
}
    6020:	4802      	ldr	r0, [pc, #8]	; (602c <nrfx_ppi_channel_free+0x24>)
    6022:	4770      	bx	lr
    6024:	4001f000 	.word	0x4001f000
    6028:	20000164 	.word	0x20000164
    602c:	0bad0004 	.word	0x0bad0004

00006030 <nrfx_ppi_group_alloc>:
    return err_code;
}


nrfx_err_t nrfx_ppi_group_alloc(nrf_ppi_channel_group_t * p_group)
{
    6030:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_groups_allocated, (uint8_t *)p_group);
    6032:	4801      	ldr	r0, [pc, #4]	; (6038 <nrfx_ppi_group_alloc+0x8>)
    6034:	f7ff bbfa 	b.w	582c <nrfx_flag32_alloc>
    6038:	20000160 	.word	0x20000160

0000603c <nrfx_ppi_group_free>:
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
    603c:	00c3      	lsls	r3, r0, #3
    603e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6042:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    6046:	2201      	movs	r2, #1
}


nrfx_err_t nrfx_ppi_group_free(nrf_ppi_channel_group_t group)
{
    6048:	4601      	mov	r1, r0
    604a:	605a      	str	r2, [r3, #4]
    nrf_ppi_group_disable(NRF_PPI, group);
    return nrfx_flag32_free(&m_groups_allocated, group);
    604c:	4801      	ldr	r0, [pc, #4]	; (6054 <nrfx_ppi_group_free+0x18>)
    604e:	f7ff bc0d 	b.w	586c <nrfx_flag32_free>
    6052:	bf00      	nop
    6054:	20000160 	.word	0x20000160

00006058 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    6058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    605c:	4d52      	ldr	r5, [pc, #328]	; (61a8 <nrfx_spim_init+0x150>)
{
    605e:	460c      	mov	r4, r1
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    6060:	7901      	ldrb	r1, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    6062:	014f      	lsls	r7, r1, #5
    6064:	eb05 1141 	add.w	r1, r5, r1, lsl #5
{
    6068:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    606a:	7f08      	ldrb	r0, [r1, #28]
    606c:	2800      	cmp	r0, #0
    606e:	f040 8098 	bne.w	61a2 <nrfx_spim_init+0x14a>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    6072:	f8d6 8000 	ldr.w	r8, [r6]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    6076:	51ea      	str	r2, [r5, r7]
    p_cb->p_context = p_context;
    6078:	604b      	str	r3, [r1, #4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    607a:	7be0      	ldrb	r0, [r4, #15]
    607c:	7f8a      	ldrb	r2, [r1, #30]
    607e:	f360 0200 	bfi	r2, r0, #0, #1
    6082:	778a      	strb	r2, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
    6084:	7920      	ldrb	r0, [r4, #4]
    6086:	b2d2      	uxtb	r2, r2
    6088:	f360 0241 	bfi	r2, r0, #1, #1
    608c:	778a      	strb	r2, [r1, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
#endif
    p_cb->ss_pin = p_config->ss_pin;
    608e:	78e3      	ldrb	r3, [r4, #3]
    6090:	77cb      	strb	r3, [r1, #31]
    if (!p_config->skip_gpio_cfg)
    6092:	7be3      	ldrb	r3, [r4, #15]
    6094:	f8d6 9000 	ldr.w	r9, [r6]
    6098:	2b00      	cmp	r3, #0
    609a:	d140      	bne.n	611e <nrfx_spim_init+0xc6>
        nrf_gpio_pin_write(p_config->sck_pin,
    609c:	7b21      	ldrb	r1, [r4, #12]
    609e:	7820      	ldrb	r0, [r4, #0]
    60a0:	2901      	cmp	r1, #1
    60a2:	bf94      	ite	ls
    60a4:	2100      	movls	r1, #0
    60a6:	2101      	movhi	r1, #1
    60a8:	f002 fd40 	bl	8b2c <nrf_gpio_pin_write>
    *p_pin = pin_number & 0x1F;
    60ac:	7823      	ldrb	r3, [r4, #0]
    60ae:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    60b2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    60b6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    60ba:	2201      	movs	r2, #1
    60bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    60c0:	7863      	ldrb	r3, [r4, #1]
    60c2:	2bff      	cmp	r3, #255	; 0xff
    60c4:	d00c      	beq.n	60e0 <nrfx_spim_init+0x88>
    *p_pin = pin_number & 0x1F;
    60c6:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    60ca:	409a      	lsls	r2, r3
    p_reg->OUTCLR = clr_mask;
    60cc:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    60d0:	7863      	ldrb	r3, [r4, #1]
    60d2:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    60d6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    60da:	2203      	movs	r2, #3
    60dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    60e0:	78a3      	ldrb	r3, [r4, #2]
    60e2:	2bff      	cmp	r3, #255	; 0xff
    60e4:	d009      	beq.n	60fa <nrfx_spim_init+0xa2>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    60e6:	7ba2      	ldrb	r2, [r4, #14]
    *p_pin = pin_number & 0x1F;
    60e8:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    60ec:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    60f0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    60f4:	0092      	lsls	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    60f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    60fa:	78e0      	ldrb	r0, [r4, #3]
    60fc:	28ff      	cmp	r0, #255	; 0xff
    60fe:	d00e      	beq.n	611e <nrfx_spim_init+0xc6>
                               p_config->ss_active_high ? 0 : 1);
    6100:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
    6102:	f081 0101 	eor.w	r1, r1, #1
    6106:	f002 fd11 	bl	8b2c <nrf_gpio_pin_write>
    *p_pin = pin_number & 0x1F;
    610a:	78e3      	ldrb	r3, [r4, #3]
    610c:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    6110:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6114:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6118:	2103      	movs	r1, #3
    611a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    611e:	7c23      	ldrb	r3, [r4, #16]
    6120:	b993      	cbnz	r3, 6148 <nrfx_spim_init+0xf0>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    6122:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    6124:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    6126:	2bff      	cmp	r3, #255	; 0xff
    6128:	bf18      	it	ne
    612a:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    612c:	78a3      	ldrb	r3, [r4, #2]
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
    612e:	f8c9 1508 	str.w	r1, [r9, #1288]	; 0x508
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    6132:	bf08      	it	eq
    6134:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    6138:	2bff      	cmp	r3, #255	; 0xff
    613a:	bf08      	it	eq
    613c:	f04f 33ff 	moveq.w	r3, #4294967295
    p_reg->PSEL.MOSI = mosi_pin;
    6140:	f8c9 250c 	str.w	r2, [r9, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    6144:	f8c9 3510 	str.w	r3, [r9, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    6148:	68a3      	ldr	r3, [r4, #8]
    614a:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    614e:	7b63      	ldrb	r3, [r4, #13]
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    6150:	7b22      	ldrb	r2, [r4, #12]
    6152:	3b00      	subs	r3, #0
    6154:	bf18      	it	ne
    6156:	2301      	movne	r3, #1
    switch (spi_mode)
    6158:	2a02      	cmp	r2, #2
    615a:	d01c      	beq.n	6196 <nrfx_spim_init+0x13e>
    615c:	2a03      	cmp	r2, #3
    615e:	d01d      	beq.n	619c <nrfx_spim_init+0x144>
    6160:	2a01      	cmp	r2, #1
    6162:	d101      	bne.n	6168 <nrfx_spim_init+0x110>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    6164:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    6168:	f8c8 3554 	str.w	r3, [r8, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    616c:	79a3      	ldrb	r3, [r4, #6]
    616e:	f8c8 35c0 	str.w	r3, [r8, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    6172:	2307      	movs	r3, #7
    6174:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    6178:	59eb      	ldr	r3, [r5, r7]
    617a:	b123      	cbz	r3, 6186 <nrfx_spim_init+0x12e>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    617c:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    617e:	f340 3007 	sbfx	r0, r0, #12, #8
    6182:	f7fc fc37 	bl	29f4 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    6186:	443d      	add	r5, r7
    6188:	2300      	movs	r3, #0
    618a:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    618c:	4807      	ldr	r0, [pc, #28]	; (61ac <nrfx_spim_init+0x154>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    618e:	2301      	movs	r3, #1
    6190:	772b      	strb	r3, [r5, #28]
}
    6192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    6196:	f043 0304 	orr.w	r3, r3, #4
        break;
    619a:	e7e5      	b.n	6168 <nrfx_spim_init+0x110>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    619c:	f043 0306 	orr.w	r3, r3, #6
        break;
    61a0:	e7e2      	b.n	6168 <nrfx_spim_init+0x110>
        return err_code;
    61a2:	4803      	ldr	r0, [pc, #12]	; (61b0 <nrfx_spim_init+0x158>)
    61a4:	e7f5      	b.n	6192 <nrfx_spim_init+0x13a>
    61a6:	bf00      	nop
    61a8:	20000b10 	.word	0x20000b10
    61ac:	0bad0000 	.word	0x0bad0000
    61b0:	0bad0005 	.word	0x0bad0005

000061b4 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
    61b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    61b6:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
    61b8:	4d20      	ldr	r5, [pc, #128]	; (623c <nrfx_spim_uninit+0x88>)
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
    61ba:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
    61bc:	015e      	lsls	r6, r3, #5
    61be:	eb05 1743 	add.w	r7, r5, r3, lsl #5
    61c2:	59ab      	ldr	r3, [r5, r6]
    61c4:	b1b3      	cbz	r3, 61f4 <nrfx_spim_uninit+0x40>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    61c6:	f344 3007 	sbfx	r0, r4, #12, #8
    61ca:	f7fc fc21 	bl	2a10 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    61ce:	4b1c      	ldr	r3, [pc, #112]	; (6240 <nrfx_spim_uninit+0x8c>)
    61d0:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
    61d4:	7f7b      	ldrb	r3, [r7, #29]
    61d6:	b16b      	cbz	r3, 61f4 <nrfx_spim_uninit+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    61d8:	2301      	movs	r3, #1
    61da:	6163      	str	r3, [r4, #20]
    61dc:	2764      	movs	r7, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    61de:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
    61e2:	b923      	cbnz	r3, 61ee <nrfx_spim_uninit+0x3a>
    61e4:	2001      	movs	r0, #1
    61e6:	f002 fbe4 	bl	89b2 <nrfx_busy_wait>
    61ea:	3f01      	subs	r7, #1
    61ec:	d1f7      	bne.n	61de <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
    61ee:	19ab      	adds	r3, r5, r6
    61f0:	2200      	movs	r2, #0
    61f2:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
    61f4:	2300      	movs	r3, #0
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
    61f6:	19a9      	adds	r1, r5, r6
    61f8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    61fc:	7f8b      	ldrb	r3, [r1, #30]
    61fe:	07db      	lsls	r3, r3, #31
    6200:	d417      	bmi.n	6232 <nrfx_spim_uninit+0x7e>
    return p_reg->PSEL.SCK;
    6202:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
    6206:	f002 fc85 	bl	8b14 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
    620a:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
    620e:	f002 fc81 	bl	8b14 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
    6212:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
    6216:	f002 fc7d 	bl	8b14 <spim_pin_uninit>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    621a:	7fcb      	ldrb	r3, [r1, #31]
    621c:	2bff      	cmp	r3, #255	; 0xff
    621e:	d008      	beq.n	6232 <nrfx_spim_uninit+0x7e>
    *p_pin = pin_number & 0x1F;
    6220:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    6224:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6228:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    622c:	2102      	movs	r1, #2
    622e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    6232:	4435      	add	r5, r6
    6234:	2300      	movs	r3, #0
    6236:	772b      	strb	r3, [r5, #28]
}
    6238:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    623a:	bf00      	nop
    623c:	20000b10 	.word	0x20000b10
    6240:	00080152 	.word	0x00080152

00006244 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    6244:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    6248:	4f38      	ldr	r7, [pc, #224]	; (632c <nrfx_spim_xfer+0xe8>)
    624a:	7903      	ldrb	r3, [r0, #4]
    624c:	eb07 1843 	add.w	r8, r7, r3, lsl #5
{
    6250:	4615      	mov	r5, r2
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    6252:	f898 201d 	ldrb.w	r2, [r8, #29]
{
    6256:	4681      	mov	r9, r0
    6258:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
    625a:	015e      	lsls	r6, r3, #5
    625c:	2a00      	cmp	r2, #0
    625e:	d163      	bne.n	6328 <nrfx_spim_xfer+0xe4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    6260:	59ba      	ldr	r2, [r7, r6]
    6262:	b12a      	cbz	r2, 6270 <nrfx_spim_xfer+0x2c>
    6264:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    6268:	bf04      	itt	eq
    626a:	2201      	moveq	r2, #1
    626c:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    6270:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    6274:	eb07 0c06 	add.w	ip, r7, r6
    6278:	f10c 0c0c 	add.w	ip, ip, #12
    627c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
    6280:	2101      	movs	r1, #1
    6282:	4640      	mov	r0, r8
    6284:	f002 fc5f 	bl	8b46 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    6288:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    628a:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    628e:	b121      	cbz	r1, 629a <nrfx_spim_xfer+0x56>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    6290:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
    6294:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    6298:	d106      	bne.n	62a8 <nrfx_spim_xfer+0x64>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    629a:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    629c:	b152      	cbz	r2, 62b4 <nrfx_spim_xfer+0x70>
    629e:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    62a2:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    62a6:	d005      	beq.n	62b4 <nrfx_spim_xfer+0x70>
        p_cb->transfer_in_progress = false;
    62a8:	443e      	add	r6, r7
    62aa:	2300      	movs	r3, #0
        return err_code;
    62ac:	4820      	ldr	r0, [pc, #128]	; (6330 <nrfx_spim_xfer+0xec>)
        p_cb->transfer_in_progress = false;
    62ae:	7773      	strb	r3, [r6, #29]
}
    62b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    62b4:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    62b6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    62ba:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    62be:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    62c2:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    62c6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    62ca:	2200      	movs	r2, #0
    62cc:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    62d0:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    62d4:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    62d8:	bf18      	it	ne
    62da:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    62dc:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    62e0:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    62e4:	bf18      	it	ne
    62e6:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    62e8:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    62ec:	072a      	lsls	r2, r5, #28
    62ee:	d507      	bpl.n	6300 <nrfx_spim_xfer+0xbc>
    if (!p_cb->handler)
    62f0:	59ba      	ldr	r2, [r7, r6]
    62f2:	b972      	cbnz	r2, 6312 <nrfx_spim_xfer+0xce>
        set_ss_pin_state(p_cb, false);
    62f4:	2100      	movs	r1, #0
    62f6:	4640      	mov	r0, r8
    62f8:	f002 fc25 	bl	8b46 <set_ss_pin_state>
    return err_code;
    62fc:	480d      	ldr	r0, [pc, #52]	; (6334 <nrfx_spim_xfer+0xf0>)
    62fe:	e7d7      	b.n	62b0 <nrfx_spim_xfer+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6300:	2201      	movs	r2, #1
    6302:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
    6304:	59ba      	ldr	r2, [r7, r6]
    6306:	b922      	cbnz	r2, 6312 <nrfx_spim_xfer+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6308:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    630c:	2a00      	cmp	r2, #0
    630e:	d0fb      	beq.n	6308 <nrfx_spim_xfer+0xc4>
    6310:	e7f0      	b.n	62f4 <nrfx_spim_xfer+0xb0>
    if (!enable)
    6312:	f015 0f04 	tst.w	r5, #4
    6316:	f04f 0240 	mov.w	r2, #64	; 0x40
    631a:	d002      	beq.n	6322 <nrfx_spim_xfer+0xde>
    p_reg->INTENCLR = mask;
    631c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    6320:	e7ec      	b.n	62fc <nrfx_spim_xfer+0xb8>
    p_reg->INTENSET = mask;
    6322:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6326:	e7e9      	b.n	62fc <nrfx_spim_xfer+0xb8>
        return err_code;
    6328:	4803      	ldr	r0, [pc, #12]	; (6338 <nrfx_spim_xfer+0xf4>)
    632a:	e7c1      	b.n	62b0 <nrfx_spim_xfer+0x6c>
    632c:	20000b10 	.word	0x20000b10
    6330:	0bad000a 	.word	0x0bad000a
    6334:	0bad0000 	.word	0x0bad0000
    6338:	0bad000b 	.word	0x0bad000b

0000633c <nrfx_spim_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_SPIM0_ENABLED)
void nrfx_spim_0_irq_handler(void)
{
    633c:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    633e:	4b0c      	ldr	r3, [pc, #48]	; (6370 <nrfx_spim_0_irq_handler+0x34>)
    6340:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    6344:	b192      	cbz	r2, 636c <nrfx_spim_0_irq_handler+0x30>
    set_ss_pin_state(p_cb, false);
    6346:	4c0b      	ldr	r4, [pc, #44]	; (6374 <nrfx_spim_0_irq_handler+0x38>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6348:	2500      	movs	r5, #0
    634a:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
    634e:	4629      	mov	r1, r5
    6350:	4620      	mov	r0, r4
    6352:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    6356:	f002 fbf6 	bl	8b46 <set_ss_pin_state>
    p_cb->transfer_in_progress = false;
    635a:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    635c:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    635e:	e9d4 3100 	ldrd	r3, r1, [r4]
    6362:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM0, &m_cb[NRFX_SPIM0_INST_IDX]);
}
    6366:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    636a:	4718      	bx	r3
}
    636c:	bd70      	pop	{r4, r5, r6, pc}
    636e:	bf00      	nop
    6370:	40003000 	.word	0x40003000
    6374:	20000b10 	.word	0x20000b10

00006378 <nrfx_timer_init>:
static timer_control_block_t m_cb[NRFX_TIMER_ENABLED_COUNT];

nrfx_err_t nrfx_timer_init(nrfx_timer_t const *        p_instance,
                           nrfx_timer_config_t const * p_config,
                           nrfx_timer_event_handler_t  timer_event_handler)
{
    6378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
    637a:	7907      	ldrb	r7, [r0, #4]
#endif
    NRFX_ASSERT(p_config);

    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    637c:	4e20      	ldr	r6, [pc, #128]	; (6400 <nrfx_timer_init+0x88>)
{
    637e:	460d      	mov	r5, r1
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    6380:	210c      	movs	r1, #12
    6382:	4379      	muls	r1, r7
{
    6384:	4604      	mov	r4, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    6386:	1870      	adds	r0, r6, r1
    6388:	7a03      	ldrb	r3, [r0, #8]
    638a:	2b00      	cmp	r3, #0
    638c:	d135      	bne.n	63fa <nrfx_timer_init+0x82>
        return err_code;
    }

    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));

    p_cb->handler = timer_event_handler;
    638e:	5072      	str	r2, [r6, r1]
    p_cb->context = p_config->p_context;
    6390:	686a      	ldr	r2, [r5, #4]
    6392:	6042      	str	r2, [r0, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6394:	469c      	mov	ip, r3

    uint8_t i;
    for (i = 0; i < p_instance->cc_channel_count; ++i)
    6396:	7961      	ldrb	r1, [r4, #5]
    {
        nrf_timer_event_clear(p_instance->p_reg,
    6398:	6820      	ldr	r0, [r4, #0]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
    639a:	b2da      	uxtb	r2, r3
    639c:	4291      	cmp	r1, r2
    639e:	d824      	bhi.n	63ea <nrfx_timer_init+0x72>
                              nrf_timer_compare_event_get(i));
    }

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
        p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    63a0:	f340 3007 	sbfx	r0, r0, #12, #8
    63a4:	f7fc fb26 	bl	29f4 <arch_irq_enable>

    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
    63a8:	6821      	ldr	r1, [r4, #0]

NRF_STATIC_INLINE void nrf_timer_mode_set(NRF_TIMER_Type * p_reg,
                                          nrf_timer_mode_t mode)
{
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
    63aa:	786b      	ldrb	r3, [r5, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
    63ac:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    63b0:	4814      	ldr	r0, [pc, #80]	; (6404 <nrfx_timer_init+0x8c>)
    63b2:	f022 0203 	bic.w	r2, r2, #3
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
    63b6:	f003 0303 	and.w	r3, r3, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
    63ba:	4313      	orrs	r3, r2
    63bc:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nrf_timer_bit_width_set(p_instance->p_reg, p_config->bit_width);
    63c0:	6821      	ldr	r1, [r4, #0]

NRF_STATIC_INLINE void nrf_timer_bit_width_set(NRF_TIMER_Type *      p_reg,
                                               nrf_timer_bit_width_t bit_width)
{
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
    63c2:	78ab      	ldrb	r3, [r5, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
    63c4:	f8d1 2508 	ldr.w	r2, [r1, #1288]	; 0x508
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
    63c8:	f003 0303 	and.w	r3, r3, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
    63cc:	f022 0203 	bic.w	r2, r2, #3
    63d0:	4313      	orrs	r3, r2
    63d2:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
    nrf_timer_prescaler_set(p_instance->p_reg, (uint32_t)p_config->frequency);
    63d6:	6823      	ldr	r3, [r4, #0]
    63d8:	782a      	ldrb	r2, [r5, #0]
}

NRF_STATIC_INLINE void nrf_timer_prescaler_set(NRF_TIMER_Type * p_reg, uint32_t prescaler_factor)
{
    NRFX_ASSERT(prescaler_factor <= NRF_TIMER_PRESCALER_MAX);
    p_reg->PRESCALER = prescaler_factor;
    63da:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    63de:	230c      	movs	r3, #12
    63e0:	fb03 6607 	mla	r6, r3, r7, r6
    63e4:	2301      	movs	r3, #1
    63e6:	7233      	strb	r3, [r6, #8]
}
    63e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
}

NRF_STATIC_INLINE nrf_timer_event_t nrf_timer_compare_event_get(uint32_t channel)
{
    return (nrf_timer_event_t)NRFX_OFFSETOF(NRF_TIMER_Type, EVENTS_COMPARE[channel]);
    63ea:	0092      	lsls	r2, r2, #2
    63ec:	f502 72a0 	add.w	r2, r2, #320	; 0x140
    63f0:	3301      	adds	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    63f2:	f840 c002 	str.w	ip, [r0, r2]
    63f6:	5882      	ldr	r2, [r0, r2]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
    63f8:	e7cd      	b.n	6396 <nrfx_timer_init+0x1e>
        return err_code;
    63fa:	4803      	ldr	r0, [pc, #12]	; (6408 <nrfx_timer_init+0x90>)
    63fc:	e7f4      	b.n	63e8 <nrfx_timer_init+0x70>
    63fe:	bf00      	nop
    6400:	20000b30 	.word	0x20000b30
    6404:	0bad0000 	.word	0x0bad0000
    6408:	0bad0005 	.word	0x0bad0005

0000640c <nrfx_timer_disable>:
}

void nrfx_timer_disable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
    640c:	6803      	ldr	r3, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    640e:	2201      	movs	r2, #1
    6410:	611a      	str	r2, [r3, #16]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
    6412:	7901      	ldrb	r1, [r0, #4]
    6414:	4b02      	ldr	r3, [pc, #8]	; (6420 <nrfx_timer_disable+0x14>)
    6416:	200c      	movs	r0, #12
    6418:	fb00 3301 	mla	r3, r0, r1, r3
    641c:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Disabled instance: %d.", p_instance->instance_id);
}
    641e:	4770      	bx	lr
    6420:	20000b30 	.word	0x20000b30

00006424 <nrfx_timer_uninit>:
{
    6424:	b538      	push	{r3, r4, r5, lr}
    6426:	4604      	mov	r4, r0
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    6428:	6800      	ldr	r0, [r0, #0]
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    642a:	f340 3007 	sbfx	r0, r0, #12, #8
    642e:	f7fc faef 	bl	2a10 <arch_irq_disable>
    nrf_timer_shorts_disable(p_instance->p_reg, DISABLE_ALL);
    6432:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS &= ~(mask);
    6434:	2500      	movs	r5, #0
    6436:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    643a:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
    nrf_timer_int_disable(p_instance->p_reg, DISABLE_ALL);
    643e:	6823      	ldr	r3, [r4, #0]
    p_reg->INTENCLR = mask;
    6440:	f04f 32ff 	mov.w	r2, #4294967295
    6444:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    nrfx_timer_disable(p_instance);
    6448:	4620      	mov	r0, r4
    644a:	f7ff ffdf 	bl	640c <nrfx_timer_disable>
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
    644e:	7922      	ldrb	r2, [r4, #4]
    6450:	4b02      	ldr	r3, [pc, #8]	; (645c <nrfx_timer_uninit+0x38>)
    6452:	210c      	movs	r1, #12
    6454:	fb01 3302 	mla	r3, r1, r2, r3
    6458:	721d      	strb	r5, [r3, #8]
}
    645a:	bd38      	pop	{r3, r4, r5, pc}
    645c:	20000b30 	.word	0x20000b30

00006460 <nrfx_timer_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TIMER2_ENABLED)
void nrfx_timer_2_irq_handler(void)
{
    6460:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6464:	4c0f      	ldr	r4, [pc, #60]	; (64a4 <nrfx_timer_2_irq_handler+0x44>)
    return p_reg->INTENSET & mask;
    6466:	4f10      	ldr	r7, [pc, #64]	; (64a8 <nrfx_timer_2_irq_handler+0x48>)
            if (p_cb->handler)
    6468:	4e10      	ldr	r6, [pc, #64]	; (64ac <nrfx_timer_2_irq_handler+0x4c>)
{
    646a:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE nrf_timer_int_mask_t nrf_timer_compare_int_get(uint32_t channel)
{
    return (nrf_timer_int_mask_t)
    646c:	f44f 3880 	mov.w	r8, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6470:	6823      	ldr	r3, [r4, #0]
        if (nrf_timer_event_check(p_reg, event) &&
    6472:	b17b      	cbz	r3, 6494 <nrfx_timer_2_irq_handler+0x34>
    return p_reg->INTENSET & mask;
    6474:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
    return (nrf_timer_int_mask_t)
    6478:	fa08 f205 	lsl.w	r2, r8, r5
    647c:	421a      	tst	r2, r3
    647e:	d009      	beq.n	6494 <nrfx_timer_2_irq_handler+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6480:	2300      	movs	r3, #0
    6482:	6023      	str	r3, [r4, #0]
    6484:	6823      	ldr	r3, [r4, #0]
            if (p_cb->handler)
    6486:	6833      	ldr	r3, [r6, #0]
    6488:	b123      	cbz	r3, 6494 <nrfx_timer_2_irq_handler+0x34>
                p_cb->handler(event, p_cb->context);
    648a:	f504 40c0 	add.w	r0, r4, #24576	; 0x6000
    648e:	6871      	ldr	r1, [r6, #4]
    6490:	b280      	uxth	r0, r0
    6492:	4798      	blx	r3
    for (i = 0; i < channel_count; ++i)
    6494:	3501      	adds	r5, #1
    6496:	2d04      	cmp	r5, #4
    6498:	f104 0404 	add.w	r4, r4, #4
    649c:	d1e8      	bne.n	6470 <nrfx_timer_2_irq_handler+0x10>
    irq_handler(NRF_TIMER2, &m_cb[NRFX_TIMER2_INST_IDX],
        NRF_TIMER_CC_CHANNEL_COUNT(2));
}
    649e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    64a2:	bf00      	nop
    64a4:	4000a140 	.word	0x4000a140
    64a8:	4000a000 	.word	0x4000a000
    64ac:	20000b30 	.word	0x20000b30

000064b0 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    64b0:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    64b2:	4c11      	ldr	r4, [pc, #68]	; (64f8 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    64b4:	4a11      	ldr	r2, [pc, #68]	; (64fc <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    64b6:	4912      	ldr	r1, [pc, #72]	; (6500 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    64b8:	2303      	movs	r3, #3
    64ba:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    64bc:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    64be:	4b11      	ldr	r3, [pc, #68]	; (6504 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    64c0:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    64c2:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    64c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    64c8:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    64ca:	2300      	movs	r3, #0
    64cc:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    64ce:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    64d0:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    64d2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    64d4:	4a0c      	ldr	r2, [pc, #48]	; (6508 <_DoInit+0x58>)
    64d6:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    64d8:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    64da:	2210      	movs	r2, #16
    64dc:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    64de:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    64e0:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    64e2:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    64e4:	f001 fff5 	bl	84d2 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    64e8:	4908      	ldr	r1, [pc, #32]	; (650c <_DoInit+0x5c>)
    64ea:	4620      	mov	r0, r4
    64ec:	f001 fff1 	bl	84d2 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    64f0:	2320      	movs	r3, #32
    64f2:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    64f4:	bd10      	pop	{r4, pc}
    64f6:	bf00      	nop
    64f8:	20000b3c 	.word	0x20000b3c
    64fc:	00009f62 	.word	0x00009f62
    6500:	00009f6b 	.word	0x00009f6b
    6504:	20000f3c 	.word	0x20000f3c
    6508:	20000f2c 	.word	0x20000f2c
    650c:	00009f6f 	.word	0x00009f6f

00006510 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6510:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    6514:	4f21      	ldr	r7, [pc, #132]	; (659c <SEGGER_RTT_WriteSkipNoLock+0x8c>)
    6516:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    651a:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    651c:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6520:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    6522:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    6524:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    6526:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    6528:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    652a:	d831      	bhi.n	6590 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    652c:	f8d2 a020 	ldr.w	sl, [r2, #32]
    6530:	ebaa 0905 	sub.w	r9, sl, r5
    6534:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    6538:	4294      	cmp	r4, r2
    653a:	d811      	bhi.n	6560 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    653c:	2318      	movs	r3, #24
    653e:	fb06 3303 	mla	r3, r6, r3, r3
    6542:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    6544:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6546:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    6548:	4641      	mov	r1, r8
    654a:	4428      	add	r0, r5
    654c:	f001 ffdb 	bl	8506 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    6550:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    6552:	2318      	movs	r3, #24
    6554:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
    6558:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    655a:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    655c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    6560:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    6562:	429c      	cmp	r4, r3
    6564:	d818      	bhi.n	6598 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    6566:	fb00 bb0b 	mla	fp, r0, fp, fp
    656a:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    656c:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    656e:	f8db 0004 	ldr.w	r0, [fp, #4]
    6572:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    6574:	4428      	add	r0, r5
    6576:	f001 ffc6 	bl	8506 <memcpy>
      if (NumBytes) {
    657a:	ebb4 040a 	subs.w	r4, r4, sl
    657e:	d0e8      	beq.n	6552 <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    6580:	f8db 0004 	ldr.w	r0, [fp, #4]
    6584:	4622      	mov	r2, r4
    6586:	eb08 0109 	add.w	r1, r8, r9
    658a:	f001 ffbc 	bl	8506 <memcpy>
      return 1;
    658e:	e7e0      	b.n	6552 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
    6590:	3b01      	subs	r3, #1
    6592:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    6594:	42a3      	cmp	r3, r4
    6596:	d2d1      	bcs.n	653c <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    6598:	2000      	movs	r0, #0
    659a:	e7df      	b.n	655c <SEGGER_RTT_WriteSkipNoLock+0x4c>
    659c:	20000b3c 	.word	0x20000b3c

000065a0 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    65a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    65a2:	4b14      	ldr	r3, [pc, #80]	; (65f4 <SEGGER_RTT_WriteNoLock+0x54>)
    65a4:	2718      	movs	r7, #24
    65a6:	fb00 7507 	mla	r5, r0, r7, r7
    65aa:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    65ac:	fb07 3300 	mla	r3, r7, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    65b0:	460e      	mov	r6, r1
  switch (pRing->Flags) {
    65b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    65b4:	2b01      	cmp	r3, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    65b6:	4614      	mov	r4, r2
  switch (pRing->Flags) {
    65b8:	d00a      	beq.n	65d0 <SEGGER_RTT_WriteNoLock+0x30>
    65ba:	2b02      	cmp	r3, #2
    65bc:	d014      	beq.n	65e8 <SEGGER_RTT_WriteNoLock+0x48>
    65be:	b923      	cbnz	r3, 65ca <SEGGER_RTT_WriteNoLock+0x2a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    65c0:	4628      	mov	r0, r5
    65c2:	f002 facc 	bl	8b5e <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    65c6:	4284      	cmp	r4, r0
    65c8:	d908      	bls.n	65dc <SEGGER_RTT_WriteNoLock+0x3c>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    65ca:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    65cc:	4620      	mov	r0, r4
    65ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    65d0:	4628      	mov	r0, r5
    65d2:	f002 fac4 	bl	8b5e <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    65d6:	4284      	cmp	r4, r0
    65d8:	bf28      	it	cs
    65da:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    65dc:	4622      	mov	r2, r4
    65de:	4631      	mov	r1, r6
    65e0:	4628      	mov	r0, r5
    65e2:	f002 fac5 	bl	8b70 <_WriteNoCheck>
    break;
    65e6:	e7f1      	b.n	65cc <SEGGER_RTT_WriteNoLock+0x2c>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    65e8:	4628      	mov	r0, r5
}
    65ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    65ee:	f002 bada 	b.w	8ba6 <_WriteBlocking>
    65f2:	bf00      	nop
    65f4:	20000b3c 	.word	0x20000b3c

000065f8 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    65f8:	4b03      	ldr	r3, [pc, #12]	; (6608 <SEGGER_RTT_HasDataUp+0x10>)
    65fa:	2218      	movs	r2, #24
    65fc:	fb02 3300 	mla	r3, r2, r0, r3
    6600:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    6602:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    6604:	1a80      	subs	r0, r0, r2
    6606:	4770      	bx	lr
    6608:	20000b3c 	.word	0x20000b3c

0000660c <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
    660c:	4803      	ldr	r0, [pc, #12]	; (661c <zephyr_rtt_mutex_lock+0x10>)
    660e:	f04f 32ff 	mov.w	r2, #4294967295
    6612:	f04f 33ff 	mov.w	r3, #4294967295
    6616:	f000 ba4d 	b.w	6ab4 <z_impl_k_mutex_lock>
    661a:	bf00      	nop
    661c:	200001f8 	.word	0x200001f8

00006620 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
    6620:	4801      	ldr	r0, [pc, #4]	; (6628 <zephyr_rtt_mutex_unlock+0x8>)
    6622:	f000 bac1 	b.w	6ba8 <z_impl_k_mutex_unlock>
    6626:	bf00      	nop
    6628:	200001f8 	.word	0x200001f8

0000662c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    662c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6630:	b086      	sub	sp, #24
    6632:	4605      	mov	r5, r0
    6634:	af00      	add	r7, sp, #0
    6636:	460e      	mov	r6, r1
	__asm__ volatile(
    6638:	f04f 0340 	mov.w	r3, #64	; 0x40
    663c:	f3ef 8811 	mrs	r8, BASEPRI
    6640:	f383 8812 	msr	BASEPRI_MAX, r3
    6644:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    6648:	f000 ff6a 	bl	7520 <z_impl_z_current_get>
    664c:	2d04      	cmp	r5, #4
    664e:	bf96      	itet	ls
    6650:	4b2c      	ldrls	r3, [pc, #176]	; (6704 <z_fatal_error+0xd8>)
    6652:	4b2d      	ldrhi	r3, [pc, #180]	; (6708 <z_fatal_error+0xdc>)
    6654:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    6658:	46e9      	mov	r9, sp
    665a:	b08a      	sub	sp, #40	; 0x28
    665c:	4604      	mov	r4, r0
    665e:	466a      	mov	r2, sp
    6660:	492a      	ldr	r1, [pc, #168]	; (670c <z_fatal_error+0xe0>)
    6662:	61d3      	str	r3, [r2, #28]
    6664:	f240 3301 	movw	r3, #769	; 0x301
    6668:	8493      	strh	r3, [r2, #36]	; 0x24
    666a:	f04f 0a00 	mov.w	sl, #0
    666e:	4b28      	ldr	r3, [pc, #160]	; (6710 <z_fatal_error+0xe4>)
    6670:	f8c2 a020 	str.w	sl, [r2, #32]
    6674:	e9c2 1505 	strd	r1, r5, [r2, #20]
    6678:	f842 3f10 	str.w	r3, [r2, #16]!
    667c:	4825      	ldr	r0, [pc, #148]	; (6714 <z_fatal_error+0xe8>)
    667e:	4653      	mov	r3, sl
    6680:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    6684:	f7fb fcc0 	bl	2008 <z_impl_z_log_msg_static_create>
    6688:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    668a:	b17e      	cbz	r6, 66ac <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    668c:	69f3      	ldr	r3, [r6, #28]
    668e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    6692:	b15b      	cbz	r3, 66ac <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    6694:	4b20      	ldr	r3, [pc, #128]	; (6718 <z_fatal_error+0xec>)
    6696:	617b      	str	r3, [r7, #20]
    6698:	2302      	movs	r3, #2
    669a:	613b      	str	r3, [r7, #16]
    669c:	481d      	ldr	r0, [pc, #116]	; (6714 <z_fatal_error+0xe8>)
    669e:	4653      	mov	r3, sl
    66a0:	f107 0210 	add.w	r2, r7, #16
    66a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    66a8:	f7fb fcae 	bl	2008 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    66ac:	b12c      	cbz	r4, 66ba <z_fatal_error+0x8e>
    66ae:	4620      	mov	r0, r4
    66b0:	f002 fac3 	bl	8c3a <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    66b4:	b108      	cbz	r0, 66ba <z_fatal_error+0x8e>
    66b6:	7803      	ldrb	r3, [r0, #0]
    66b8:	b903      	cbnz	r3, 66bc <z_fatal_error+0x90>
		thread_name = "unknown";
    66ba:	4818      	ldr	r0, [pc, #96]	; (671c <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    66bc:	46e9      	mov	r9, sp
    66be:	b08a      	sub	sp, #40	; 0x28
    66c0:	466a      	mov	r2, sp
    66c2:	4b17      	ldr	r3, [pc, #92]	; (6720 <z_fatal_error+0xf4>)
    66c4:	61d0      	str	r0, [r2, #28]
    66c6:	e9c2 3405 	strd	r3, r4, [r2, #20]
    66ca:	f240 3301 	movw	r3, #769	; 0x301
    66ce:	8413      	strh	r3, [r2, #32]
    66d0:	4b14      	ldr	r3, [pc, #80]	; (6724 <z_fatal_error+0xf8>)
    66d2:	f842 3f10 	str.w	r3, [r2, #16]!
    66d6:	2300      	movs	r3, #0
    66d8:	480e      	ldr	r0, [pc, #56]	; (6714 <z_fatal_error+0xe8>)
    66da:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    66de:	f7fb fc93 	bl	2008 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    66e2:	4631      	mov	r1, r6
    66e4:	46cd      	mov	sp, r9
    66e6:	4628      	mov	r0, r5
    66e8:	f7fe f83e 	bl	4768 <k_sys_fatal_error_handler>
	__asm__ volatile(
    66ec:	f388 8811 	msr	BASEPRI, r8
    66f0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    66f4:	4620      	mov	r0, r4
    66f6:	f7fc fe0d 	bl	3314 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    66fa:	3718      	adds	r7, #24
    66fc:	46bd      	mov	sp, r7
    66fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6702:	bf00      	nop
    6704:	00009548 	.word	0x00009548
    6708:	00009f76 	.word	0x00009f76
    670c:	00009f8c 	.word	0x00009f8c
    6710:	01000005 	.word	0x01000005
    6714:	00009320 	.word	0x00009320
    6718:	00009fb4 	.word	0x00009fb4
    671c:	00009f84 	.word	0x00009f84
    6720:	00009fd5 	.word	0x00009fd5
    6724:	01000004 	.word	0x01000004

00006728 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6728:	4b10      	ldr	r3, [pc, #64]	; (676c <z_sys_init_run_level+0x44>)
{
    672a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    672c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    6730:	3001      	adds	r0, #1
    6732:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    6736:	42a6      	cmp	r6, r4
    6738:	d800      	bhi.n	673c <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    673a:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    673c:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    6740:	b18d      	cbz	r5, 6766 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    6742:	4628      	mov	r0, r5
    6744:	4798      	blx	r3
			if (rc != 0) {
    6746:	b138      	cbz	r0, 6758 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    6748:	2800      	cmp	r0, #0
    674a:	bfb8      	it	lt
    674c:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    674e:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    6750:	28ff      	cmp	r0, #255	; 0xff
    6752:	bfa8      	it	ge
    6754:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    6756:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    6758:	68ea      	ldr	r2, [r5, #12]
    675a:	7853      	ldrb	r3, [r2, #1]
    675c:	f043 0301 	orr.w	r3, r3, #1
    6760:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    6762:	3408      	adds	r4, #8
    6764:	e7e7      	b.n	6736 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    6766:	4798      	blx	r3
    6768:	e7fb      	b.n	6762 <z_sys_init_run_level+0x3a>
    676a:	bf00      	nop
    676c:	0000955c 	.word	0x0000955c

00006770 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    6770:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    6772:	4b0a      	ldr	r3, [pc, #40]	; (679c <bg_thread_main+0x2c>)
    6774:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    6776:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    6778:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    677a:	f7ff ffd5 	bl	6728 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    677e:	f001 f96b 	bl	7a58 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    6782:	2004      	movs	r0, #4
    6784:	f7ff ffd0 	bl	6728 <z_sys_init_run_level>

	z_init_static_threads();
    6788:	f000 f91c 	bl	69c4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    678c:	f001 f984 	bl	7a98 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    6790:	4a03      	ldr	r2, [pc, #12]	; (67a0 <bg_thread_main+0x30>)
    6792:	7b13      	ldrb	r3, [r2, #12]
    6794:	f023 0301 	bic.w	r3, r3, #1
    6798:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    679a:	bd08      	pop	{r3, pc}
    679c:	2000133c 	.word	0x2000133c
    67a0:	20000788 	.word	0x20000788

000067a4 <z_bss_zero>:
{
    67a4:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    67a6:	4803      	ldr	r0, [pc, #12]	; (67b4 <z_bss_zero+0x10>)
    67a8:	4a03      	ldr	r2, [pc, #12]	; (67b8 <z_bss_zero+0x14>)
    67aa:	2100      	movs	r1, #0
    67ac:	1a12      	subs	r2, r2, r0
    67ae:	f002 fa37 	bl	8c20 <z_early_memset>
}
    67b2:	bd08      	pop	{r3, pc}
    67b4:	20000228 	.word	0x20000228
    67b8:	20001340 	.word	0x20001340

000067bc <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    67bc:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    67be:	2300      	movs	r3, #0
{
    67c0:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    67c2:	2201      	movs	r2, #1
    67c4:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    67c8:	4e13      	ldr	r6, [pc, #76]	; (6818 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    67ca:	4d14      	ldr	r5, [pc, #80]	; (681c <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    67cc:	9301      	str	r3, [sp, #4]
    67ce:	220f      	movs	r2, #15
    67d0:	e9cd 3202 	strd	r3, r2, [sp, #8]
    67d4:	4912      	ldr	r1, [pc, #72]	; (6820 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    67d6:	2314      	movs	r3, #20
    67d8:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    67dc:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    67e0:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    67e2:	f44f 70a0 	mov.w	r0, #320	; 0x140
    67e6:	fb00 1104 	mla	r1, r0, r4, r1
    67ea:	4b0e      	ldr	r3, [pc, #56]	; (6824 <z_init_cpu+0x68>)
    67ec:	9500      	str	r5, [sp, #0]
    67ee:	f44f 7280 	mov.w	r2, #256	; 0x100
    67f2:	4630      	mov	r0, r6
    67f4:	f000 f888 	bl	6908 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    67f8:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    67fa:	4a0b      	ldr	r2, [pc, #44]	; (6828 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    67fc:	60ee      	str	r6, [r5, #12]
    67fe:	f023 0304 	bic.w	r3, r3, #4
    6802:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    6804:	f44f 6304 	mov.w	r3, #2112	; 0x840
    6808:	fb04 3303 	mla	r3, r4, r3, r3
    680c:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    680e:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
    6810:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    6812:	b006      	add	sp, #24
    6814:	bd70      	pop	{r4, r5, r6, pc}
    6816:	bf00      	nop
    6818:	20000708 	.word	0x20000708
    681c:	20000be4 	.word	0x20000be4
    6820:	20001ec0 	.word	0x20001ec0
    6824:	00006a7d 	.word	0x00006a7d
    6828:	20001680 	.word	0x20001680

0000682c <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    682c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    682e:	2000      	movs	r0, #0
{
    6830:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    6832:	f7ff ff79 	bl	6728 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    6836:	4b2d      	ldr	r3, [pc, #180]	; (68ec <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    6838:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    683c:	4d2c      	ldr	r5, [pc, #176]	; (68f0 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    683e:	4e2d      	ldr	r6, [pc, #180]	; (68f4 <z_cstart+0xc8>)
    6840:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6842:	4f2d      	ldr	r7, [pc, #180]	; (68f8 <z_cstart+0xcc>)
    6844:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    6848:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    684a:	23e0      	movs	r3, #224	; 0xe0
    684c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    6850:	2400      	movs	r4, #0
    6852:	2320      	movs	r3, #32
    6854:	77eb      	strb	r3, [r5, #31]
    6856:	762c      	strb	r4, [r5, #24]
    6858:	766c      	strb	r4, [r5, #25]
    685a:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    685c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    685e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    6862:	626b      	str	r3, [r5, #36]	; 0x24
    6864:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    6868:	f7fc fcc8 	bl	31fc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    686c:	f7fc f83c 	bl	28e8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    6870:	f04f 33ff 	mov.w	r3, #4294967295
    6874:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    6876:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    6878:	f7fc fe1c 	bl	34b4 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    687c:	f7fc fd60 	bl	3340 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    6880:	f7fb fa4e 	bl	1d20 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    6884:	f240 1301 	movw	r3, #257	; 0x101
    6888:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    688c:	ab06      	add	r3, sp, #24
    688e:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    6890:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	dummy_thread->resource_pool = NULL;
    6894:	9423      	str	r4, [sp, #140]	; 0x8c
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    6896:	f002 f9b7 	bl	8c08 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    689a:	2001      	movs	r0, #1
    689c:	f7ff ff44 	bl	6728 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    68a0:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    68a2:	4d16      	ldr	r5, [pc, #88]	; (68fc <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    68a4:	f7ff ff40 	bl	6728 <z_sys_init_run_level>
	z_sched_init();
    68a8:	f000 fd96 	bl	73d8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    68ac:	4b14      	ldr	r3, [pc, #80]	; (6900 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    68ae:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    68b0:	9305      	str	r3, [sp, #20]
    68b2:	2301      	movs	r3, #1
    68b4:	4913      	ldr	r1, [pc, #76]	; (6904 <z_cstart+0xd8>)
    68b6:	9400      	str	r4, [sp, #0]
    68b8:	e9cd 4303 	strd	r4, r3, [sp, #12]
    68bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    68c0:	463b      	mov	r3, r7
    68c2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    68c6:	4628      	mov	r0, r5
    68c8:	f000 f81e 	bl	6908 <z_setup_new_thread>
    68cc:	7b6a      	ldrb	r2, [r5, #13]
    68ce:	4606      	mov	r6, r0
    68d0:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    68d4:	4628      	mov	r0, r5
    68d6:	736a      	strb	r2, [r5, #13]
    68d8:	f002 fa4a 	bl	8d70 <z_ready_thread>
	z_init_cpu(0);
    68dc:	4620      	mov	r0, r4
    68de:	f7ff ff6d 	bl	67bc <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    68e2:	463a      	mov	r2, r7
    68e4:	4631      	mov	r1, r6
    68e6:	4628      	mov	r0, r5
    68e8:	f7fc f97c 	bl	2be4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    68ec:	20001ec0 	.word	0x20001ec0
    68f0:	e000ed00 	.word	0xe000ed00
    68f4:	20000be4 	.word	0x20000be4
    68f8:	00006771 	.word	0x00006771
    68fc:	20000788 	.word	0x20000788
    6900:	00009574 	.word	0x00009574
    6904:	20002000 	.word	0x20002000

00006908 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    6908:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    690c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    690e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    6910:	2604      	movs	r6, #4
    6912:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    6914:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    6916:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    6918:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    691c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    691e:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    6920:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6924:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    6926:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6928:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    692c:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    692e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    6932:	e9c0 761a 	strd	r7, r6, [r0, #104]	; 0x68
	thread_base->pended_on = NULL;
    6936:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    6938:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    693a:	6705      	str	r5, [r0, #112]	; 0x70
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    693c:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6940:	9202      	str	r2, [sp, #8]
    6942:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6944:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    6946:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6948:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    694a:	9200      	str	r2, [sp, #0]
    694c:	4642      	mov	r2, r8
{
    694e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6950:	f7fc f916 	bl	2b80 <arch_new_thread>
	if (!_current) {
    6954:	4b04      	ldr	r3, [pc, #16]	; (6968 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    6956:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    6958:	689b      	ldr	r3, [r3, #8]
    695a:	b103      	cbz	r3, 695e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    695c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    695e:	6763      	str	r3, [r4, #116]	; 0x74
}
    6960:	4640      	mov	r0, r8
    6962:	b004      	add	sp, #16
    6964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6968:	20000be4 	.word	0x20000be4

0000696c <z_impl_k_thread_create>:
{
    696c:	b5f0      	push	{r4, r5, r6, r7, lr}
    696e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    6970:	2500      	movs	r5, #0
    6972:	9505      	str	r5, [sp, #20]
    6974:	9d10      	ldr	r5, [sp, #64]	; 0x40
    6976:	9504      	str	r5, [sp, #16]
    6978:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    697a:	9503      	str	r5, [sp, #12]
    697c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    697e:	9502      	str	r5, [sp, #8]
{
    6980:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    6984:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    6986:	9501      	str	r5, [sp, #4]
    6988:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    698a:	9500      	str	r5, [sp, #0]
{
    698c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    698e:	f7ff ffbb 	bl	6908 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    6992:	f1b6 3fff 	cmp.w	r6, #4294967295
    6996:	bf08      	it	eq
    6998:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    699c:	d005      	beq.n	69aa <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    699e:	ea56 0307 	orrs.w	r3, r6, r7
    69a2:	d105      	bne.n	69b0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    69a4:	4620      	mov	r0, r4
    69a6:	f000 fc97 	bl	72d8 <z_sched_start>
}
    69aa:	4620      	mov	r0, r4
    69ac:	b007      	add	sp, #28
    69ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    69b0:	4903      	ldr	r1, [pc, #12]	; (69c0 <z_impl_k_thread_create+0x54>)
    69b2:	463a      	mov	r2, r7
    69b4:	4633      	mov	r3, r6
    69b6:	f104 0018 	add.w	r0, r4, #24
    69ba:	f000 fe89 	bl	76d0 <z_add_timeout>
    69be:	e7f4      	b.n	69aa <z_impl_k_thread_create+0x3e>
    69c0:	00008df9 	.word	0x00008df9

000069c4 <z_init_static_threads>:
{
    69c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    69c8:	4c29      	ldr	r4, [pc, #164]	; (6a70 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    69ca:	4d2a      	ldr	r5, [pc, #168]	; (6a74 <z_init_static_threads+0xb0>)
{
    69cc:	b087      	sub	sp, #28
    69ce:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    69d0:	42ae      	cmp	r6, r5
    69d2:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    69d6:	d30f      	bcc.n	69f8 <z_init_static_threads+0x34>
	k_sched_lock();
    69d8:	f000 fcce 	bl	7378 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    69dc:	4c24      	ldr	r4, [pc, #144]	; (6a70 <z_init_static_threads+0xac>)
    69de:	f8df 9098 	ldr.w	r9, [pc, #152]	; 6a78 <z_init_static_threads+0xb4>
    69e2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    69e6:	f240 37e7 	movw	r7, #999	; 0x3e7
    69ea:	42ac      	cmp	r4, r5
    69ec:	d320      	bcc.n	6a30 <z_init_static_threads+0x6c>
}
    69ee:	b007      	add	sp, #28
    69f0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    69f4:	f000 bcd4 	b.w	73a0 <k_sched_unlock>
		z_setup_new_thread(
    69f8:	f854 3c04 	ldr.w	r3, [r4, #-4]
    69fc:	9305      	str	r3, [sp, #20]
    69fe:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    6a02:	9304      	str	r3, [sp, #16]
    6a04:	f854 3c10 	ldr.w	r3, [r4, #-16]
    6a08:	9303      	str	r3, [sp, #12]
    6a0a:	f854 3c14 	ldr.w	r3, [r4, #-20]
    6a0e:	9302      	str	r3, [sp, #8]
    6a10:	f854 3c18 	ldr.w	r3, [r4, #-24]
    6a14:	9301      	str	r3, [sp, #4]
    6a16:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    6a1a:	9300      	str	r3, [sp, #0]
    6a1c:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    6a20:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    6a24:	f7ff ff70 	bl	6908 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    6a28:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    6a2c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    6a2e:	e7ce      	b.n	69ce <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    6a30:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6a32:	1c5a      	adds	r2, r3, #1
    6a34:	d00d      	beq.n	6a52 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    6a36:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    6a3a:	2100      	movs	r1, #0
    6a3c:	4638      	mov	r0, r7
    6a3e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6a42:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    6a46:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6a4a:	d104      	bne.n	6a56 <z_init_static_threads+0x92>
	z_sched_start(thread);
    6a4c:	4640      	mov	r0, r8
    6a4e:	f000 fc43 	bl	72d8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    6a52:	342c      	adds	r4, #44	; 0x2c
    6a54:	e7c9      	b.n	69ea <z_init_static_threads+0x26>
    6a56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6a5a:	2300      	movs	r3, #0
    6a5c:	f7f9 fb40 	bl	e0 <__aeabi_uldivmod>
    6a60:	4602      	mov	r2, r0
    6a62:	460b      	mov	r3, r1
    6a64:	f108 0018 	add.w	r0, r8, #24
    6a68:	4649      	mov	r1, r9
    6a6a:	f000 fe31 	bl	76d0 <z_add_timeout>
    6a6e:	e7f0      	b.n	6a52 <z_init_static_threads+0x8e>
    6a70:	0000928c 	.word	0x0000928c
    6a74:	0000928c 	.word	0x0000928c
    6a78:	00008df9 	.word	0x00008df9

00006a7c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    6a7c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    6a7e:	4c0b      	ldr	r4, [pc, #44]	; (6aac <idle+0x30>)
	return !z_sys_post_kernel;
    6a80:	4d0b      	ldr	r5, [pc, #44]	; (6ab0 <idle+0x34>)
	__asm__ volatile(
    6a82:	f04f 0240 	mov.w	r2, #64	; 0x40
    6a86:	f3ef 8311 	mrs	r3, BASEPRI
    6a8a:	f382 8812 	msr	BASEPRI_MAX, r2
    6a8e:	f3bf 8f6f 	isb	sy
    6a92:	f002 fa4f 	bl	8f34 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    6a96:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    6a98:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    6a9a:	b913      	cbnz	r3, 6aa2 <idle+0x26>
	arch_cpu_idle();
    6a9c:	f7fb ff2a 	bl	28f4 <arch_cpu_idle>
}
    6aa0:	e7ef      	b.n	6a82 <idle+0x6>
    6aa2:	f7fb fe53 	bl	274c <pm_system_suspend>
    6aa6:	2800      	cmp	r0, #0
    6aa8:	d1eb      	bne.n	6a82 <idle+0x6>
    6aaa:	e7f7      	b.n	6a9c <idle+0x20>
    6aac:	20000be4 	.word	0x20000be4
    6ab0:	2000133c 	.word	0x2000133c

00006ab4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    6ab4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6ab8:	4604      	mov	r4, r0
    6aba:	4617      	mov	r7, r2
    6abc:	461e      	mov	r6, r3
    6abe:	f04f 0340 	mov.w	r3, #64	; 0x40
    6ac2:	f3ef 8811 	mrs	r8, BASEPRI
    6ac6:	f383 8812 	msr	BASEPRI_MAX, r3
    6aca:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    6ace:	68c3      	ldr	r3, [r0, #12]
    6ad0:	4a33      	ldr	r2, [pc, #204]	; (6ba0 <z_impl_k_mutex_lock+0xec>)
    6ad2:	b17b      	cbz	r3, 6af4 <z_impl_k_mutex_lock+0x40>
    6ad4:	6880      	ldr	r0, [r0, #8]
    6ad6:	6891      	ldr	r1, [r2, #8]
    6ad8:	4288      	cmp	r0, r1
    6ada:	d019      	beq.n	6b10 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    6adc:	ea57 0306 	orrs.w	r3, r7, r6
    6ae0:	d118      	bne.n	6b14 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    6ae2:	f388 8811 	msr	BASEPRI, r8
    6ae6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    6aea:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    6aee:	b002      	add	sp, #8
    6af0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    6af4:	6891      	ldr	r1, [r2, #8]
    6af6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    6afa:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    6afc:	3301      	adds	r3, #1
    6afe:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    6b00:	6893      	ldr	r3, [r2, #8]
    6b02:	60a3      	str	r3, [r4, #8]
    6b04:	f388 8811 	msr	BASEPRI, r8
    6b08:	f3bf 8f6f 	isb	sy
		return 0;
    6b0c:	2000      	movs	r0, #0
    6b0e:	e7ee      	b.n	6aee <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    6b10:	6921      	ldr	r1, [r4, #16]
    6b12:	e7f2      	b.n	6afa <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    6b14:	f991 100e 	ldrsb.w	r1, [r1, #14]
    6b18:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    6b1c:	4299      	cmp	r1, r3
    6b1e:	bfa8      	it	ge
    6b20:	4619      	movge	r1, r3
    6b22:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    6b26:	4291      	cmp	r1, r2
    6b28:	bfb8      	it	lt
    6b2a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    6b2c:	428b      	cmp	r3, r1
    6b2e:	dd2e      	ble.n	6b8e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    6b30:	f002 f88e 	bl	8c50 <adjust_owner_prio.isra.0>
    6b34:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    6b36:	e9cd 7600 	strd	r7, r6, [sp]
    6b3a:	481a      	ldr	r0, [pc, #104]	; (6ba4 <z_impl_k_mutex_lock+0xf0>)
    6b3c:	4622      	mov	r2, r4
    6b3e:	4641      	mov	r1, r8
    6b40:	f000 fb54 	bl	71ec <z_pend_curr>
	if (got_mutex == 0) {
    6b44:	2800      	cmp	r0, #0
    6b46:	d0e1      	beq.n	6b0c <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    6b48:	f04f 0340 	mov.w	r3, #64	; 0x40
    6b4c:	f3ef 8611 	mrs	r6, BASEPRI
    6b50:	f383 8812 	msr	BASEPRI_MAX, r3
    6b54:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    6b58:	68a0      	ldr	r0, [r4, #8]
    6b5a:	b1d0      	cbz	r0, 6b92 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    6b5c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    6b5e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6b60:	429c      	cmp	r4, r3
    6b62:	d00a      	beq.n	6b7a <z_impl_k_mutex_lock+0xc6>
    6b64:	b14b      	cbz	r3, 6b7a <z_impl_k_mutex_lock+0xc6>
    6b66:	f993 300e 	ldrsb.w	r3, [r3, #14]
    6b6a:	4299      	cmp	r1, r3
    6b6c:	bfa8      	it	ge
    6b6e:	4619      	movge	r1, r3
    6b70:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    6b74:	4299      	cmp	r1, r3
    6b76:	bfb8      	it	lt
    6b78:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    6b7a:	f002 f869 	bl	8c50 <adjust_owner_prio.isra.0>
    6b7e:	b140      	cbz	r0, 6b92 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    6b80:	4808      	ldr	r0, [pc, #32]	; (6ba4 <z_impl_k_mutex_lock+0xf0>)
    6b82:	4631      	mov	r1, r6
    6b84:	f000 fb96 	bl	72b4 <z_reschedule>
	return -EAGAIN;
    6b88:	f06f 000a 	mvn.w	r0, #10
    6b8c:	e7af      	b.n	6aee <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    6b8e:	2500      	movs	r5, #0
    6b90:	e7d1      	b.n	6b36 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    6b92:	2d00      	cmp	r5, #0
    6b94:	d1f4      	bne.n	6b80 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    6b96:	f386 8811 	msr	BASEPRI, r6
    6b9a:	f3bf 8f6f 	isb	sy
    6b9e:	e7f3      	b.n	6b88 <z_impl_k_mutex_lock+0xd4>
    6ba0:	20000be4 	.word	0x20000be4
    6ba4:	2000133d 	.word	0x2000133d

00006ba8 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    6ba8:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    6baa:	6883      	ldr	r3, [r0, #8]
{
    6bac:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    6bae:	b36b      	cbz	r3, 6c0c <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    6bb0:	4a19      	ldr	r2, [pc, #100]	; (6c18 <z_impl_k_mutex_unlock+0x70>)
    6bb2:	6892      	ldr	r2, [r2, #8]
    6bb4:	4293      	cmp	r3, r2
    6bb6:	d12c      	bne.n	6c12 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    6bb8:	68c3      	ldr	r3, [r0, #12]
    6bba:	2b01      	cmp	r3, #1
    6bbc:	d903      	bls.n	6bc6 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    6bbe:	3b01      	subs	r3, #1
    6bc0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    6bc2:	2000      	movs	r0, #0
}
    6bc4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    6bc6:	f04f 0340 	mov.w	r3, #64	; 0x40
    6bca:	f3ef 8511 	mrs	r5, BASEPRI
    6bce:	f383 8812 	msr	BASEPRI_MAX, r3
    6bd2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    6bd6:	6901      	ldr	r1, [r0, #16]
    6bd8:	6880      	ldr	r0, [r0, #8]
    6bda:	f002 f839 	bl	8c50 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    6bde:	4620      	mov	r0, r4
    6be0:	f002 f925 	bl	8e2e <z_unpend_first_thread>
	mutex->owner = new_owner;
    6be4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    6be6:	b158      	cbz	r0, 6c00 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    6be8:	f990 200e 	ldrsb.w	r2, [r0, #14]
    6bec:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    6bee:	2200      	movs	r2, #0
    6bf0:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    6bf2:	f002 f8bd 	bl	8d70 <z_ready_thread>
		z_reschedule(&lock, key);
    6bf6:	4809      	ldr	r0, [pc, #36]	; (6c1c <z_impl_k_mutex_unlock+0x74>)
    6bf8:	4629      	mov	r1, r5
    6bfa:	f000 fb5b 	bl	72b4 <z_reschedule>
    6bfe:	e7e0      	b.n	6bc2 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    6c00:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    6c02:	f385 8811 	msr	BASEPRI, r5
    6c06:	f3bf 8f6f 	isb	sy
    6c0a:	e7da      	b.n	6bc2 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    6c0c:	f06f 0015 	mvn.w	r0, #21
    6c10:	e7d8      	b.n	6bc4 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    6c12:	f04f 30ff 	mov.w	r0, #4294967295
    6c16:	e7d5      	b.n	6bc4 <z_impl_k_mutex_unlock+0x1c>
    6c18:	20000be4 	.word	0x20000be4
    6c1c:	2000133d 	.word	0x2000133d

00006c20 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    6c20:	b538      	push	{r3, r4, r5, lr}
    6c22:	4604      	mov	r4, r0
	__asm__ volatile(
    6c24:	f04f 0340 	mov.w	r3, #64	; 0x40
    6c28:	f3ef 8511 	mrs	r5, BASEPRI
    6c2c:	f383 8812 	msr	BASEPRI_MAX, r3
    6c30:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    6c34:	f002 f8fb 	bl	8e2e <z_unpend_first_thread>

	if (thread != NULL) {
    6c38:	b148      	cbz	r0, 6c4e <z_impl_k_sem_give+0x2e>
    6c3a:	2200      	movs	r2, #0
    6c3c:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    6c3e:	f002 f897 	bl	8d70 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    6c42:	4629      	mov	r1, r5
    6c44:	4808      	ldr	r0, [pc, #32]	; (6c68 <z_impl_k_sem_give+0x48>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    6c46:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    6c4a:	f000 bb33 	b.w	72b4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    6c4e:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    6c52:	429a      	cmp	r2, r3
    6c54:	bf18      	it	ne
    6c56:	3301      	addne	r3, #1
    6c58:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    6c5a:	2102      	movs	r1, #2
    6c5c:	f104 0010 	add.w	r0, r4, #16
    6c60:	f002 fa05 	bl	906e <z_handle_obj_poll_events>
}
    6c64:	e7ed      	b.n	6c42 <z_impl_k_sem_give+0x22>
    6c66:	bf00      	nop
    6c68:	2000133d 	.word	0x2000133d

00006c6c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    6c6c:	b513      	push	{r0, r1, r4, lr}
    6c6e:	f04f 0440 	mov.w	r4, #64	; 0x40
    6c72:	f3ef 8111 	mrs	r1, BASEPRI
    6c76:	f384 8812 	msr	BASEPRI_MAX, r4
    6c7a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    6c7e:	6884      	ldr	r4, [r0, #8]
    6c80:	b144      	cbz	r4, 6c94 <z_impl_k_sem_take+0x28>
		sem->count--;
    6c82:	3c01      	subs	r4, #1
    6c84:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    6c86:	f381 8811 	msr	BASEPRI, r1
    6c8a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    6c8e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    6c90:	b002      	add	sp, #8
    6c92:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6c94:	ea52 0403 	orrs.w	r4, r2, r3
    6c98:	d106      	bne.n	6ca8 <z_impl_k_sem_take+0x3c>
    6c9a:	f381 8811 	msr	BASEPRI, r1
    6c9e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    6ca2:	f06f 000f 	mvn.w	r0, #15
    6ca6:	e7f3      	b.n	6c90 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    6ca8:	e9cd 2300 	strd	r2, r3, [sp]
    6cac:	4602      	mov	r2, r0
    6cae:	4802      	ldr	r0, [pc, #8]	; (6cb8 <z_impl_k_sem_take+0x4c>)
    6cb0:	f000 fa9c 	bl	71ec <z_pend_curr>
	return ret;
    6cb4:	e7ec      	b.n	6c90 <z_impl_k_sem_take+0x24>
    6cb6:	bf00      	nop
    6cb8:	2000133d 	.word	0x2000133d

00006cbc <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
    6cbc:	b570      	push	{r4, r5, r6, lr}
    6cbe:	4604      	mov	r4, r0
	__asm__ volatile(
    6cc0:	f04f 0340 	mov.w	r3, #64	; 0x40
    6cc4:	f3ef 8511 	mrs	r5, BASEPRI
    6cc8:	f383 8812 	msr	BASEPRI_MAX, r3
    6ccc:	f3bf 8f6f 	isb	sy
    6cd0:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
    6cd4:	4620      	mov	r0, r4
    6cd6:	f002 f8aa 	bl	8e2e <z_unpend_first_thread>
		if (thread == NULL) {
    6cda:	b118      	cbz	r0, 6ce4 <z_impl_k_sem_reset+0x28>
    6cdc:	67c6      	str	r6, [r0, #124]	; 0x7c
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
    6cde:	f002 f847 	bl	8d70 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
    6ce2:	e7f7      	b.n	6cd4 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
    6ce4:	60a0      	str	r0, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    6ce6:	2102      	movs	r1, #2
    6ce8:	f104 0010 	add.w	r0, r4, #16
    6cec:	f002 f9bf 	bl	906e <z_handle_obj_poll_events>

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
    6cf0:	4629      	mov	r1, r5
    6cf2:	4802      	ldr	r0, [pc, #8]	; (6cfc <z_impl_k_sem_reset+0x40>)
}
    6cf4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
    6cf8:	f000 badc 	b.w	72b4 <z_reschedule>
    6cfc:	2000133d 	.word	0x2000133d

00006d00 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    6d00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    6d04:	4e4a      	ldr	r6, [pc, #296]	; (6e30 <work_queue_main+0x130>)
    6d06:	b085      	sub	sp, #20
    6d08:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    6d0a:	f04f 38ff 	mov.w	r8, #4294967295
    6d0e:	f04f 39ff 	mov.w	r9, #4294967295
    6d12:	f04f 0340 	mov.w	r3, #64	; 0x40
    6d16:	f3ef 8711 	mrs	r7, BASEPRI
    6d1a:	f383 8812 	msr	BASEPRI_MAX, r3
    6d1e:	f3bf 8f6f 	isb	sy
    6d22:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    6d26:	b98d      	cbnz	r5, 6d4c <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    6d28:	2102      	movs	r1, #2
    6d2a:	f104 0098 	add.w	r0, r4, #152	; 0x98
    6d2e:	f001 ffae 	bl	8c8e <flag_test_and_clear>
    6d32:	2800      	cmp	r0, #0
    6d34:	d143      	bne.n	6dbe <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    6d36:	2300      	movs	r3, #0
    6d38:	e9cd 8900 	strd	r8, r9, [sp]
    6d3c:	9302      	str	r3, [sp, #8]
    6d3e:	f104 0288 	add.w	r2, r4, #136	; 0x88
    6d42:	4639      	mov	r1, r7
    6d44:	483b      	ldr	r0, [pc, #236]	; (6e34 <work_queue_main+0x134>)
    6d46:	f000 fc51 	bl	75ec <z_sched_wait>
			continue;
    6d4a:	e7e2      	b.n	6d12 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6d4c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    6d50:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    6d52:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6d56:	4295      	cmp	r5, r2
	list->tail = node;
    6d58:	bf08      	it	eq
    6d5a:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    6d5e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    6d62:	f043 0302 	orr.w	r3, r3, #2
    6d66:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    6d6a:	68eb      	ldr	r3, [r5, #12]
    6d6c:	f023 0304 	bic.w	r3, r3, #4
    6d70:	f043 0301 	orr.w	r3, r3, #1
    6d74:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    6d76:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    6d78:	f387 8811 	msr	BASEPRI, r7
    6d7c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    6d80:	4628      	mov	r0, r5
    6d82:	4798      	blx	r3
	__asm__ volatile(
    6d84:	f04f 0340 	mov.w	r3, #64	; 0x40
    6d88:	f3ef 8b11 	mrs	fp, BASEPRI
    6d8c:	f383 8812 	msr	BASEPRI_MAX, r3
    6d90:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    6d94:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    6d96:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    6d98:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    6d9c:	d419      	bmi.n	6dd2 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    6d9e:	60ea      	str	r2, [r5, #12]
    6da0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    6da4:	f023 0302 	bic.w	r3, r3, #2
    6da8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    6dac:	f38b 8811 	msr	BASEPRI, fp
    6db0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    6db4:	05db      	lsls	r3, r3, #23
    6db6:	d4ac      	bmi.n	6d12 <work_queue_main+0x12>
	z_impl_k_yield();
    6db8:	f000 fb16 	bl	73e8 <z_impl_k_yield>
}
    6dbc:	e7a9      	b.n	6d12 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    6dbe:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    6dc2:	2200      	movs	r2, #0
    6dc4:	2101      	movs	r1, #1
    6dc6:	4628      	mov	r0, r5
    6dc8:	f002 f87b 	bl	8ec2 <z_sched_wake>
    6dcc:	2800      	cmp	r0, #0
    6dce:	d1f8      	bne.n	6dc2 <work_queue_main+0xc2>
    6dd0:	e7b1      	b.n	6d36 <work_queue_main+0x36>
	return list->head;
    6dd2:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    6dd4:	f023 0303 	bic.w	r3, r3, #3
    6dd8:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    6dda:	2800      	cmp	r0, #0
    6ddc:	d0e0      	beq.n	6da0 <work_queue_main+0xa0>
	return node->next;
    6dde:	2700      	movs	r7, #0
    6de0:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    6de4:	463b      	mov	r3, r7
    6de6:	2800      	cmp	r0, #0
    6de8:	d0da      	beq.n	6da0 <work_queue_main+0xa0>
		if (wc->work == work) {
    6dea:	6842      	ldr	r2, [r0, #4]
    6dec:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    6dee:	4601      	mov	r1, r0
		if (wc->work == work) {
    6df0:	d10c      	bne.n	6e0c <work_queue_main+0x10c>
	return node->next;
    6df2:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    6df4:	b99f      	cbnz	r7, 6e1e <work_queue_main+0x11e>
    6df6:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    6df8:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    6dfa:	4282      	cmp	r2, r0
    6dfc:	d100      	bne.n	6e00 <work_queue_main+0x100>
	list->tail = node;
    6dfe:	6071      	str	r1, [r6, #4]
	parent->next = child;
    6e00:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    6e04:	f7ff ff0c 	bl	6c20 <z_impl_k_sem_give>
}
    6e08:	4639      	mov	r1, r7
    6e0a:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    6e0c:	f1ba 0f00 	cmp.w	sl, #0
    6e10:	d00b      	beq.n	6e2a <work_queue_main+0x12a>
	return node->next;
    6e12:	f8da 2000 	ldr.w	r2, [sl]
    6e16:	4650      	mov	r0, sl
    6e18:	460f      	mov	r7, r1
    6e1a:	4692      	mov	sl, r2
    6e1c:	e7e3      	b.n	6de6 <work_queue_main+0xe6>
	parent->next = child;
    6e1e:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    6e20:	6872      	ldr	r2, [r6, #4]
    6e22:	4282      	cmp	r2, r0
	list->tail = node;
    6e24:	bf08      	it	eq
    6e26:	6077      	streq	r7, [r6, #4]
}
    6e28:	e7ea      	b.n	6e00 <work_queue_main+0x100>
    6e2a:	4652      	mov	r2, sl
    6e2c:	e7f3      	b.n	6e16 <work_queue_main+0x116>
    6e2e:	bf00      	nop
    6e30:	20000c08 	.word	0x20000c08
    6e34:	2000133d 	.word	0x2000133d

00006e38 <submit_to_queue_locked>:
{
    6e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    6e3a:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    6e3c:	079a      	lsls	r2, r3, #30
{
    6e3e:	4604      	mov	r4, r0
    6e40:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    6e42:	f3c3 0640 	ubfx	r6, r3, #1, #1
    6e46:	d42c      	bmi.n	6ea2 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    6e48:	075b      	lsls	r3, r3, #29
    6e4a:	d41a      	bmi.n	6e82 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    6e4c:	680b      	ldr	r3, [r1, #0]
    6e4e:	b90b      	cbnz	r3, 6e54 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    6e50:	6883      	ldr	r3, [r0, #8]
    6e52:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    6e54:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    6e56:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    6e58:	bf44      	itt	mi
    6e5a:	68a3      	ldrmi	r3, [r4, #8]
    6e5c:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    6e5e:	683d      	ldr	r5, [r7, #0]
			ret = 2;
    6e60:	bf4c      	ite	mi
    6e62:	2602      	movmi	r6, #2
		ret = 1;
    6e64:	2601      	movpl	r6, #1
	if (queue == NULL) {
    6e66:	2d00      	cmp	r5, #0
    6e68:	d03a      	beq.n	6ee0 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    6e6a:	4b1f      	ldr	r3, [pc, #124]	; (6ee8 <submit_to_queue_locked+0xb0>)
    6e6c:	689b      	ldr	r3, [r3, #8]
    6e6e:	42ab      	cmp	r3, r5
    6e70:	d00a      	beq.n	6e88 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    6e72:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    6e76:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    6e78:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    6e7c:	d414      	bmi.n	6ea8 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    6e7e:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    6e82:	2300      	movs	r3, #0
    6e84:	603b      	str	r3, [r7, #0]
	return ret;
    6e86:	e025      	b.n	6ed4 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    6e88:	f001 fece 	bl	8c28 <k_is_in_isr>
    6e8c:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    6e90:	2800      	cmp	r0, #0
    6e92:	d1f0      	bne.n	6e76 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    6e94:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    6e96:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    6e9a:	d5f0      	bpl.n	6e7e <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    6e9c:	b152      	cbz	r2, 6eb4 <submit_to_queue_locked+0x7c>
    6e9e:	075b      	lsls	r3, r3, #29
    6ea0:	d408      	bmi.n	6eb4 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    6ea2:	f06f 060f 	mvn.w	r6, #15
    6ea6:	e7ec      	b.n	6e82 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    6ea8:	2a00      	cmp	r2, #0
    6eaa:	d1fa      	bne.n	6ea2 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    6eac:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    6eb0:	2b00      	cmp	r3, #0
    6eb2:	d1f6      	bne.n	6ea2 <submit_to_queue_locked+0x6a>
	parent->next = child;
    6eb4:	2300      	movs	r3, #0
    6eb6:	6023      	str	r3, [r4, #0]
	return list->tail;
    6eb8:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    6ebc:	b963      	cbnz	r3, 6ed8 <submit_to_queue_locked+0xa0>
	list->head = node;
    6ebe:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
    6ec2:	4628      	mov	r0, r5
    6ec4:	f001 feee 	bl	8ca4 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    6ec8:	68e3      	ldr	r3, [r4, #12]
    6eca:	f043 0304 	orr.w	r3, r3, #4
    6ece:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    6ed0:	683b      	ldr	r3, [r7, #0]
    6ed2:	60a3      	str	r3, [r4, #8]
}
    6ed4:	4630      	mov	r0, r6
    6ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    6ed8:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6eda:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
    6ede:	e7f0      	b.n	6ec2 <submit_to_queue_locked+0x8a>
		return -EINVAL;
    6ee0:	f06f 0615 	mvn.w	r6, #21
    6ee4:	e7cd      	b.n	6e82 <submit_to_queue_locked+0x4a>
    6ee6:	bf00      	nop
    6ee8:	20000be4 	.word	0x20000be4

00006eec <k_work_submit>:
{
    6eec:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    6eee:	4801      	ldr	r0, [pc, #4]	; (6ef4 <k_work_submit+0x8>)
    6ef0:	f001 bef3 	b.w	8cda <k_work_submit_to_queue>
    6ef4:	20000828 	.word	0x20000828

00006ef8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    6ef8:	b5f0      	push	{r4, r5, r6, r7, lr}
    6efa:	b089      	sub	sp, #36	; 0x24
    6efc:	4604      	mov	r4, r0
	list->head = NULL;
    6efe:	2000      	movs	r0, #0
	list->tail = NULL;
    6f00:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    6f04:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    6f06:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    6f0a:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    6f0e:	f104 0090 	add.w	r0, r4, #144	; 0x90
    6f12:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    6f16:	b31d      	cbz	r5, 6f60 <k_work_queue_start+0x68>
    6f18:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    6f1a:	2800      	cmp	r0, #0
    6f1c:	f240 1001 	movw	r0, #257	; 0x101
    6f20:	bf08      	it	eq
    6f22:	2001      	moveq	r0, #1
	*flagp = flags;
    6f24:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    6f28:	2000      	movs	r0, #0
    6f2a:	f04f 36ff 	mov.w	r6, #4294967295
    6f2e:	f04f 37ff 	mov.w	r7, #4294967295
    6f32:	e9cd 3003 	strd	r3, r0, [sp, #12]
    6f36:	e9cd 0001 	strd	r0, r0, [sp, #4]
    6f3a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    6f3e:	4b09      	ldr	r3, [pc, #36]	; (6f64 <k_work_queue_start+0x6c>)
    6f40:	9400      	str	r4, [sp, #0]
    6f42:	4620      	mov	r0, r4
    6f44:	f7ff fd12 	bl	696c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    6f48:	b125      	cbz	r5, 6f54 <k_work_queue_start+0x5c>
    6f4a:	6829      	ldr	r1, [r5, #0]
    6f4c:	b111      	cbz	r1, 6f54 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    6f4e:	4620      	mov	r0, r4
    6f50:	f001 fe70 	bl	8c34 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    6f54:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    6f56:	b009      	add	sp, #36	; 0x24
    6f58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    6f5c:	f001 be6f 	b.w	8c3e <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    6f60:	2001      	movs	r0, #1
    6f62:	e7df      	b.n	6f24 <k_work_queue_start+0x2c>
    6f64:	00006d01 	.word	0x00006d01

00006f68 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    6f68:	89c3      	ldrh	r3, [r0, #14]
    6f6a:	2b7f      	cmp	r3, #127	; 0x7f
    6f6c:	d812      	bhi.n	6f94 <sliceable+0x2c>
	int ret = slice_ticks;
    6f6e:	4b0a      	ldr	r3, [pc, #40]	; (6f98 <sliceable+0x30>)
    6f70:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    6f72:	b163      	cbz	r3, 6f8e <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    6f74:	4b09      	ldr	r3, [pc, #36]	; (6f9c <sliceable+0x34>)
    6f76:	f990 200e 	ldrsb.w	r2, [r0, #14]
    6f7a:	681b      	ldr	r3, [r3, #0]
    6f7c:	429a      	cmp	r2, r3
    6f7e:	db09      	blt.n	6f94 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    6f80:	7b43      	ldrb	r3, [r0, #13]
    6f82:	06db      	lsls	r3, r3, #27
    6f84:	d106      	bne.n	6f94 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    6f86:	4b06      	ldr	r3, [pc, #24]	; (6fa0 <sliceable+0x38>)
    6f88:	1ac3      	subs	r3, r0, r3
    6f8a:	bf18      	it	ne
    6f8c:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    6f8e:	f003 0001 	and.w	r0, r3, #1
    6f92:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    6f94:	2300      	movs	r3, #0
    6f96:	e7fa      	b.n	6f8e <sliceable+0x26>
    6f98:	20000c18 	.word	0x20000c18
    6f9c:	20000c14 	.word	0x20000c14
    6fa0:	20000708 	.word	0x20000708

00006fa4 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    6fa4:	4b04      	ldr	r3, [pc, #16]	; (6fb8 <slice_timeout+0x14>)
    6fa6:	1ac0      	subs	r0, r0, r3
    6fa8:	4b04      	ldr	r3, [pc, #16]	; (6fbc <slice_timeout+0x18>)
    6faa:	10c0      	asrs	r0, r0, #3
    6fac:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    6fae:	4b04      	ldr	r3, [pc, #16]	; (6fc0 <slice_timeout+0x1c>)
    6fb0:	2201      	movs	r2, #1
    6fb2:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    6fb4:	4770      	bx	lr
    6fb6:	bf00      	nop
    6fb8:	20000808 	.word	0x20000808
    6fbc:	aaaaaaab 	.word	0xaaaaaaab
    6fc0:	2000133d 	.word	0x2000133d

00006fc4 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    6fc4:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    6fc6:	4b0e      	ldr	r3, [pc, #56]	; (7000 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE>)

	z_abort_timeout(&slice_timeouts[cpu]);
    6fc8:	4c0e      	ldr	r4, [pc, #56]	; (7004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>)
	int cpu = _current_cpu->id;
    6fca:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    6fcc:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    6fd0:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    6fd4:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    6fd6:	4620      	mov	r0, r4
    6fd8:	f001 ff96 	bl	8f08 <z_abort_timeout>
	slice_expired[cpu] = false;
    6fdc:	4b0a      	ldr	r3, [pc, #40]	; (7008 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8>)
    6fde:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    6fe0:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    6fe2:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    6fe4:	f7ff ffc0 	bl	6f68 <sliceable>
    6fe8:	b148      	cbz	r0, 6ffe <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    6fea:	4b08      	ldr	r3, [pc, #32]	; (700c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    6fec:	4908      	ldr	r1, [pc, #32]	; (7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
			      K_TICKS(slice_time(curr) - 1));
    6fee:	681a      	ldr	r2, [r3, #0]
    6ff0:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    6ff2:	4620      	mov	r0, r4
    6ff4:	17d3      	asrs	r3, r2, #31
	}
}
    6ff6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    6ffa:	f000 bb69 	b.w	76d0 <z_add_timeout>
}
    6ffe:	bd70      	pop	{r4, r5, r6, pc}
    7000:	20000be4 	.word	0x20000be4
    7004:	20000808 	.word	0x20000808
    7008:	2000133d 	.word	0x2000133d
    700c:	20000c18 	.word	0x20000c18
    7010:	00006fa5 	.word	0x00006fa5

00007014 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    7014:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    7016:	4d0d      	ldr	r5, [pc, #52]	; (704c <update_cache+0x38>)
    7018:	462b      	mov	r3, r5
    701a:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    701e:	429c      	cmp	r4, r3
    7020:	d000      	beq.n	7024 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    7022:	b904      	cbnz	r4, 7026 <update_cache+0x12>
    7024:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    7026:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    7028:	b938      	cbnz	r0, 703a <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    702a:	7b5a      	ldrb	r2, [r3, #13]
    702c:	06d2      	lsls	r2, r2, #27
    702e:	d104      	bne.n	703a <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    7030:	69a2      	ldr	r2, [r4, #24]
    7032:	b912      	cbnz	r2, 703a <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    7034:	89da      	ldrh	r2, [r3, #14]
    7036:	2a7f      	cmp	r2, #127	; 0x7f
    7038:	d805      	bhi.n	7046 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    703a:	429c      	cmp	r4, r3
    703c:	d002      	beq.n	7044 <update_cache+0x30>
			z_reset_time_slice(thread);
    703e:	4620      	mov	r0, r4
    7040:	f7ff ffc0 	bl	6fc4 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    7044:	4623      	mov	r3, r4
    7046:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    7048:	bd38      	pop	{r3, r4, r5, pc}
    704a:	bf00      	nop
    704c:	20000be4 	.word	0x20000be4

00007050 <move_thread_to_end_of_prio_q>:
{
    7050:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    7052:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    7056:	7b43      	ldrb	r3, [r0, #13]
    7058:	2a00      	cmp	r2, #0
{
    705a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    705c:	da04      	bge.n	7068 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    705e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7062:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    7064:	f001 fe4a 	bl	8cfc <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7068:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    706a:	4a15      	ldr	r2, [pc, #84]	; (70c0 <move_thread_to_end_of_prio_q+0x70>)
    706c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    7070:	4610      	mov	r0, r2
    7072:	734b      	strb	r3, [r1, #13]
    7074:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    7078:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    707a:	4283      	cmp	r3, r0
    707c:	bf08      	it	eq
    707e:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7080:	b923      	cbnz	r3, 708c <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    7082:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    7086:	6021      	str	r1, [r4, #0]
	list->tail = node;
    7088:	6211      	str	r1, [r2, #32]
}
    708a:	e00c      	b.n	70a6 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    708c:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    7090:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    7094:	42b5      	cmp	r5, r6
    7096:	d00e      	beq.n	70b6 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7098:	42ae      	cmp	r6, r5
    709a:	dd0c      	ble.n	70b6 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    709c:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    709e:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    70a2:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    70a4:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    70a6:	6890      	ldr	r0, [r2, #8]
    70a8:	1a43      	subs	r3, r0, r1
    70aa:	4258      	negs	r0, r3
}
    70ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    70b0:	4158      	adcs	r0, r3
    70b2:	f7ff bfaf 	b.w	7014 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    70b6:	429c      	cmp	r4, r3
    70b8:	d0e3      	beq.n	7082 <move_thread_to_end_of_prio_q+0x32>
    70ba:	681b      	ldr	r3, [r3, #0]
    70bc:	e7e0      	b.n	7080 <move_thread_to_end_of_prio_q+0x30>
    70be:	bf00      	nop
    70c0:	20000be4 	.word	0x20000be4

000070c4 <ready_thread>:
{
    70c4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    70c6:	f990 300d 	ldrsb.w	r3, [r0, #13]
    70ca:	7b42      	ldrb	r2, [r0, #13]
    70cc:	2b00      	cmp	r3, #0
    70ce:	db29      	blt.n	7124 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    70d0:	06d3      	lsls	r3, r2, #27
    70d2:	d127      	bne.n	7124 <ready_thread+0x60>
	return node->next != NULL;
    70d4:	6983      	ldr	r3, [r0, #24]
    70d6:	bb2b      	cbnz	r3, 7124 <ready_thread+0x60>
	return list->head == list;
    70d8:	4913      	ldr	r1, [pc, #76]	; (7128 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    70da:	f062 027f 	orn	r2, r2, #127	; 0x7f
    70de:	7342      	strb	r2, [r0, #13]
    70e0:	460a      	mov	r2, r1
    70e2:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    70e6:	4294      	cmp	r4, r2
    70e8:	bf18      	it	ne
    70ea:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    70ec:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    70ee:	b923      	cbnz	r3, 70fa <ready_thread+0x36>
	node->prev = tail;
    70f0:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    70f4:	6020      	str	r0, [r4, #0]
	list->tail = node;
    70f6:	6208      	str	r0, [r1, #32]
}
    70f8:	e00c      	b.n	7114 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    70fa:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    70fe:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    7102:	42b5      	cmp	r5, r6
    7104:	d00a      	beq.n	711c <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    7106:	42ae      	cmp	r6, r5
    7108:	dd08      	ble.n	711c <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    710a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    710c:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    7110:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    7112:	6058      	str	r0, [r3, #4]
}
    7114:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    7116:	2000      	movs	r0, #0
    7118:	f7ff bf7c 	b.w	7014 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    711c:	42a3      	cmp	r3, r4
    711e:	d0e7      	beq.n	70f0 <ready_thread+0x2c>
    7120:	681b      	ldr	r3, [r3, #0]
    7122:	e7e4      	b.n	70ee <ready_thread+0x2a>
}
    7124:	bc70      	pop	{r4, r5, r6}
    7126:	4770      	bx	lr
    7128:	20000be4 	.word	0x20000be4

0000712c <unready_thread>:
{
    712c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    712e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    7132:	7b43      	ldrb	r3, [r0, #13]
    7134:	2a00      	cmp	r2, #0
{
    7136:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    7138:	da04      	bge.n	7144 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    713a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    713e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    7140:	f001 fddc 	bl	8cfc <sys_dlist_remove>
	update_cache(thread == _current);
    7144:	4b04      	ldr	r3, [pc, #16]	; (7158 <unready_thread+0x2c>)
    7146:	6898      	ldr	r0, [r3, #8]
    7148:	1a43      	subs	r3, r0, r1
    714a:	4258      	negs	r0, r3
    714c:	4158      	adcs	r0, r3
}
    714e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    7152:	f7ff bf5f 	b.w	7014 <update_cache>
    7156:	bf00      	nop
    7158:	20000be4 	.word	0x20000be4

0000715c <pend_locked>:
{
    715c:	b570      	push	{r4, r5, r6, lr}
    715e:	4615      	mov	r5, r2
    7160:	461c      	mov	r4, r3
    7162:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    7164:	f001 fddc 	bl	8d20 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7168:	f1b4 3fff 	cmp.w	r4, #4294967295
    716c:	bf08      	it	eq
    716e:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    7172:	d008      	beq.n	7186 <pend_locked+0x2a>
    7174:	462a      	mov	r2, r5
    7176:	4623      	mov	r3, r4
    7178:	f106 0018 	add.w	r0, r6, #24
    717c:	4902      	ldr	r1, [pc, #8]	; (7188 <pend_locked+0x2c>)
}
    717e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7182:	f000 baa5 	b.w	76d0 <z_add_timeout>
    7186:	bd70      	pop	{r4, r5, r6, pc}
    7188:	00008df9 	.word	0x00008df9

0000718c <z_time_slice>:
{
    718c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    718e:	f04f 0340 	mov.w	r3, #64	; 0x40
    7192:	f3ef 8511 	mrs	r5, BASEPRI
    7196:	f383 8812 	msr	BASEPRI_MAX, r3
    719a:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    719e:	4b10      	ldr	r3, [pc, #64]	; (71e0 <z_time_slice+0x54>)
	if (pending_current == curr) {
    71a0:	4a10      	ldr	r2, [pc, #64]	; (71e4 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    71a2:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    71a4:	6810      	ldr	r0, [r2, #0]
    71a6:	42a0      	cmp	r0, r4
    71a8:	d106      	bne.n	71b8 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    71aa:	f7ff ff0b 	bl	6fc4 <z_reset_time_slice>
	__asm__ volatile(
    71ae:	f385 8811 	msr	BASEPRI, r5
    71b2:	f3bf 8f6f 	isb	sy
}
    71b6:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    71b8:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    71ba:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    71bc:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    71be:	4a0a      	ldr	r2, [pc, #40]	; (71e8 <z_time_slice+0x5c>)
    71c0:	5cd3      	ldrb	r3, [r2, r3]
    71c2:	2b00      	cmp	r3, #0
    71c4:	d0f3      	beq.n	71ae <z_time_slice+0x22>
    71c6:	4620      	mov	r0, r4
    71c8:	f7ff fece 	bl	6f68 <sliceable>
    71cc:	2800      	cmp	r0, #0
    71ce:	d0ee      	beq.n	71ae <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    71d0:	7b63      	ldrb	r3, [r4, #13]
    71d2:	06db      	lsls	r3, r3, #27
    71d4:	d102      	bne.n	71dc <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    71d6:	4620      	mov	r0, r4
    71d8:	f7ff ff3a 	bl	7050 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    71dc:	4620      	mov	r0, r4
    71de:	e7e4      	b.n	71aa <z_time_slice+0x1e>
    71e0:	20000be4 	.word	0x20000be4
    71e4:	20000c10 	.word	0x20000c10
    71e8:	2000133d 	.word	0x2000133d

000071ec <z_pend_curr>:
{
    71ec:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    71ee:	480c      	ldr	r0, [pc, #48]	; (7220 <z_pend_curr+0x34>)
    71f0:	4d0c      	ldr	r5, [pc, #48]	; (7224 <z_pend_curr+0x38>)
    71f2:	6886      	ldr	r6, [r0, #8]
    71f4:	602e      	str	r6, [r5, #0]
{
    71f6:	460c      	mov	r4, r1
    71f8:	4611      	mov	r1, r2
    71fa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    71fe:	f04f 0640 	mov.w	r6, #64	; 0x40
    7202:	f3ef 8511 	mrs	r5, BASEPRI
    7206:	f386 8812 	msr	BASEPRI_MAX, r6
    720a:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    720e:	6880      	ldr	r0, [r0, #8]
    7210:	f7ff ffa4 	bl	715c <pend_locked>
	ret = arch_swap(key);
    7214:	4620      	mov	r0, r4
}
    7216:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    721a:	f7fb bc5d 	b.w	2ad8 <arch_swap>
    721e:	bf00      	nop
    7220:	20000be4 	.word	0x20000be4
    7224:	20000c10 	.word	0x20000c10

00007228 <z_set_prio>:
{
    7228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    722a:	4604      	mov	r4, r0
    722c:	f04f 0340 	mov.w	r3, #64	; 0x40
    7230:	f3ef 8611 	mrs	r6, BASEPRI
    7234:	f383 8812 	msr	BASEPRI_MAX, r3
    7238:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    723c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    723e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    7240:	b249      	sxtb	r1, r1
    7242:	d119      	bne.n	7278 <z_set_prio+0x50>
	return node->next != NULL;
    7244:	6985      	ldr	r5, [r0, #24]
    7246:	b9bd      	cbnz	r5, 7278 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    724c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    724e:	f001 fd55 	bl	8cfc <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    7252:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    7254:	4a16      	ldr	r2, [pc, #88]	; (72b0 <z_set_prio+0x88>)
				thread->base.prio = prio;
    7256:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    7258:	f063 037f 	orn	r3, r3, #127	; 0x7f
    725c:	7343      	strb	r3, [r0, #13]
    725e:	4613      	mov	r3, r2
    7260:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7264:	4298      	cmp	r0, r3
    7266:	bf18      	it	ne
    7268:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    726a:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    726c:	b95d      	cbnz	r5, 7286 <z_set_prio+0x5e>
	node->prev = tail;
    726e:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    7272:	6004      	str	r4, [r0, #0]
	list->tail = node;
    7274:	6214      	str	r4, [r2, #32]
}
    7276:	e011      	b.n	729c <z_set_prio+0x74>
			thread->base.prio = prio;
    7278:	73a1      	strb	r1, [r4, #14]
    727a:	2000      	movs	r0, #0
	__asm__ volatile(
    727c:	f386 8811 	msr	BASEPRI, r6
    7280:	f3bf 8f6f 	isb	sy
}
    7284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    7286:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    728a:	42b9      	cmp	r1, r7
    728c:	d00b      	beq.n	72a6 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    728e:	428f      	cmp	r7, r1
    7290:	dd09      	ble.n	72a6 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    7292:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    7294:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    7298:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    729a:	606c      	str	r4, [r5, #4]
			update_cache(1);
    729c:	2001      	movs	r0, #1
    729e:	f7ff feb9 	bl	7014 <update_cache>
    72a2:	2001      	movs	r0, #1
    72a4:	e7ea      	b.n	727c <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    72a6:	42a8      	cmp	r0, r5
    72a8:	d0e1      	beq.n	726e <z_set_prio+0x46>
    72aa:	682d      	ldr	r5, [r5, #0]
    72ac:	e7de      	b.n	726c <z_set_prio+0x44>
    72ae:	bf00      	nop
    72b0:	20000be4 	.word	0x20000be4

000072b4 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    72b4:	b949      	cbnz	r1, 72ca <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    72b6:	f3ef 8005 	mrs	r0, IPSR
    72ba:	b930      	cbnz	r0, 72ca <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    72bc:	4b05      	ldr	r3, [pc, #20]	; (72d4 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    72be:	699a      	ldr	r2, [r3, #24]
    72c0:	689b      	ldr	r3, [r3, #8]
    72c2:	429a      	cmp	r2, r3
    72c4:	d001      	beq.n	72ca <z_reschedule+0x16>
    72c6:	f7fb bc07 	b.w	2ad8 <arch_swap>
    72ca:	f381 8811 	msr	BASEPRI, r1
    72ce:	f3bf 8f6f 	isb	sy
}
    72d2:	4770      	bx	lr
    72d4:	20000be4 	.word	0x20000be4

000072d8 <z_sched_start>:
{
    72d8:	b510      	push	{r4, lr}
	__asm__ volatile(
    72da:	f04f 0240 	mov.w	r2, #64	; 0x40
    72de:	f3ef 8411 	mrs	r4, BASEPRI
    72e2:	f382 8812 	msr	BASEPRI_MAX, r2
    72e6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    72ea:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    72ec:	0751      	lsls	r1, r2, #29
    72ee:	d404      	bmi.n	72fa <z_sched_start+0x22>
	__asm__ volatile(
    72f0:	f384 8811 	msr	BASEPRI, r4
    72f4:	f3bf 8f6f 	isb	sy
}
    72f8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    72fa:	f022 0204 	bic.w	r2, r2, #4
    72fe:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    7300:	f7ff fee0 	bl	70c4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    7304:	4621      	mov	r1, r4
    7306:	4802      	ldr	r0, [pc, #8]	; (7310 <z_sched_start+0x38>)
}
    7308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    730c:	f7ff bfd2 	b.w	72b4 <z_reschedule>
    7310:	2000133e 	.word	0x2000133e

00007314 <z_impl_k_thread_suspend>:
{
    7314:	b570      	push	{r4, r5, r6, lr}
    7316:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    7318:	3018      	adds	r0, #24
    731a:	f001 fdf5 	bl	8f08 <z_abort_timeout>
	__asm__ volatile(
    731e:	f04f 0340 	mov.w	r3, #64	; 0x40
    7322:	f3ef 8611 	mrs	r6, BASEPRI
    7326:	f383 8812 	msr	BASEPRI_MAX, r3
    732a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    732e:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    7332:	7b63      	ldrb	r3, [r4, #13]
    7334:	2a00      	cmp	r2, #0
    7336:	da05      	bge.n	7344 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    733c:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    733e:	4620      	mov	r0, r4
    7340:	f001 fcdc 	bl	8cfc <sys_dlist_remove>
		update_cache(thread == _current);
    7344:	4d0b      	ldr	r5, [pc, #44]	; (7374 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    7346:	7b63      	ldrb	r3, [r4, #13]
    7348:	68a8      	ldr	r0, [r5, #8]
    734a:	f043 0310 	orr.w	r3, r3, #16
    734e:	7363      	strb	r3, [r4, #13]
    7350:	1b03      	subs	r3, r0, r4
    7352:	4258      	negs	r0, r3
    7354:	4158      	adcs	r0, r3
    7356:	f7ff fe5d 	bl	7014 <update_cache>
	__asm__ volatile(
    735a:	f386 8811 	msr	BASEPRI, r6
    735e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    7362:	68ab      	ldr	r3, [r5, #8]
    7364:	42a3      	cmp	r3, r4
    7366:	d103      	bne.n	7370 <z_impl_k_thread_suspend+0x5c>
}
    7368:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    736c:	f001 bd9f 	b.w	8eae <z_reschedule_unlocked>
}
    7370:	bd70      	pop	{r4, r5, r6, pc}
    7372:	bf00      	nop
    7374:	20000be4 	.word	0x20000be4

00007378 <k_sched_lock>:
	__asm__ volatile(
    7378:	f04f 0340 	mov.w	r3, #64	; 0x40
    737c:	f3ef 8111 	mrs	r1, BASEPRI
    7380:	f383 8812 	msr	BASEPRI_MAX, r3
    7384:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    7388:	4b04      	ldr	r3, [pc, #16]	; (739c <k_sched_lock+0x24>)
    738a:	689a      	ldr	r2, [r3, #8]
    738c:	7bd3      	ldrb	r3, [r2, #15]
    738e:	3b01      	subs	r3, #1
    7390:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    7392:	f381 8811 	msr	BASEPRI, r1
    7396:	f3bf 8f6f 	isb	sy
}
    739a:	4770      	bx	lr
    739c:	20000be4 	.word	0x20000be4

000073a0 <k_sched_unlock>:
{
    73a0:	b510      	push	{r4, lr}
	__asm__ volatile(
    73a2:	f04f 0340 	mov.w	r3, #64	; 0x40
    73a6:	f3ef 8411 	mrs	r4, BASEPRI
    73aa:	f383 8812 	msr	BASEPRI_MAX, r3
    73ae:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    73b2:	4b08      	ldr	r3, [pc, #32]	; (73d4 <k_sched_unlock+0x34>)
    73b4:	689a      	ldr	r2, [r3, #8]
    73b6:	7bd3      	ldrb	r3, [r2, #15]
    73b8:	3301      	adds	r3, #1
    73ba:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    73bc:	2000      	movs	r0, #0
    73be:	f7ff fe29 	bl	7014 <update_cache>
	__asm__ volatile(
    73c2:	f384 8811 	msr	BASEPRI, r4
    73c6:	f3bf 8f6f 	isb	sy
}
    73ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    73ce:	f001 bd6e 	b.w	8eae <z_reschedule_unlocked>
    73d2:	bf00      	nop
    73d4:	20000be4 	.word	0x20000be4

000073d8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    73d8:	4b02      	ldr	r3, [pc, #8]	; (73e4 <z_sched_init+0xc>)
    73da:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    73de:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    73e2:	4770      	bx	lr
    73e4:	20000be4 	.word	0x20000be4

000073e8 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    73e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    73ea:	f04f 0340 	mov.w	r3, #64	; 0x40
    73ee:	f3ef 8511 	mrs	r5, BASEPRI
    73f2:	f383 8812 	msr	BASEPRI_MAX, r3
    73f6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    73fa:	4919      	ldr	r1, [pc, #100]	; (7460 <z_impl_k_yield+0x78>)
    73fc:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    73fe:	7b43      	ldrb	r3, [r0, #13]
    7400:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    7404:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    7406:	f001 fc79 	bl	8cfc <sys_dlist_remove>
	}
	queue_thread(_current);
    740a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    740c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    740e:	4608      	mov	r0, r1
    7410:	f062 027f 	orn	r2, r2, #127	; 0x7f
    7414:	735a      	strb	r2, [r3, #13]
    7416:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    741a:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    741c:	4282      	cmp	r2, r0
    741e:	bf08      	it	eq
    7420:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    7422:	b922      	cbnz	r2, 742e <z_impl_k_yield+0x46>
	node->prev = tail;
    7424:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    7428:	6023      	str	r3, [r4, #0]
	list->tail = node;
    742a:	620b      	str	r3, [r1, #32]
}
    742c:	e00c      	b.n	7448 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    742e:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    7432:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    7436:	42be      	cmp	r6, r7
    7438:	d00e      	beq.n	7458 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    743a:	42b7      	cmp	r7, r6
    743c:	dd0c      	ble.n	7458 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    743e:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    7440:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    7444:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    7446:	6053      	str	r3, [r2, #4]
	update_cache(1);
    7448:	2001      	movs	r0, #1
    744a:	f7ff fde3 	bl	7014 <update_cache>
    744e:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    7450:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    7454:	f7fb bb40 	b.w	2ad8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    7458:	42a2      	cmp	r2, r4
    745a:	d0e3      	beq.n	7424 <z_impl_k_yield+0x3c>
    745c:	6812      	ldr	r2, [r2, #0]
    745e:	e7e0      	b.n	7422 <z_impl_k_yield+0x3a>
    7460:	20000be4 	.word	0x20000be4

00007464 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    7464:	ea50 0301 	orrs.w	r3, r0, r1
{
    7468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    746c:	4605      	mov	r5, r0
    746e:	460e      	mov	r6, r1
	if (ticks == 0) {
    7470:	d103      	bne.n	747a <z_tick_sleep+0x16>
	z_impl_k_yield();
    7472:	f7ff ffb9 	bl	73e8 <z_impl_k_yield>
		k_yield();
		return 0;
    7476:	2000      	movs	r0, #0
    7478:	e02c      	b.n	74d4 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    747a:	1c83      	adds	r3, r0, #2
    747c:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    7480:	db2a      	blt.n	74d8 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    7482:	f001 fd67 	bl	8f54 <sys_clock_tick_get_32>
    7486:	182c      	adds	r4, r5, r0
    7488:	f04f 0340 	mov.w	r3, #64	; 0x40
    748c:	f3ef 8811 	mrs	r8, BASEPRI
    7490:	f383 8812 	msr	BASEPRI_MAX, r3
    7494:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    7498:	4f11      	ldr	r7, [pc, #68]	; (74e0 <z_tick_sleep+0x7c>)
    749a:	4b12      	ldr	r3, [pc, #72]	; (74e4 <z_tick_sleep+0x80>)
    749c:	68b8      	ldr	r0, [r7, #8]
    749e:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    74a0:	f7ff fe44 	bl	712c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    74a4:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    74a6:	4910      	ldr	r1, [pc, #64]	; (74e8 <z_tick_sleep+0x84>)
    74a8:	462a      	mov	r2, r5
    74aa:	4633      	mov	r3, r6
    74ac:	3018      	adds	r0, #24
    74ae:	f000 f90f 	bl	76d0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    74b2:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    74b4:	7b53      	ldrb	r3, [r2, #13]
    74b6:	f043 0310 	orr.w	r3, r3, #16
    74ba:	7353      	strb	r3, [r2, #13]
    74bc:	4640      	mov	r0, r8
    74be:	f7fb fb0b 	bl	2ad8 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    74c2:	f001 fd47 	bl	8f54 <sys_clock_tick_get_32>
    74c6:	1a20      	subs	r0, r4, r0
    74c8:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    74cc:	2801      	cmp	r0, #1
    74ce:	f173 0300 	sbcs.w	r3, r3, #0
    74d2:	dbd0      	blt.n	7476 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    74d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    74d8:	f06f 0401 	mvn.w	r4, #1
    74dc:	1a24      	subs	r4, r4, r0
    74de:	e7d3      	b.n	7488 <z_tick_sleep+0x24>
    74e0:	20000be4 	.word	0x20000be4
    74e4:	20000c10 	.word	0x20000c10
    74e8:	00008df9 	.word	0x00008df9

000074ec <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    74ec:	f1b1 3fff 	cmp.w	r1, #4294967295
    74f0:	bf08      	it	eq
    74f2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    74f6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    74f8:	d106      	bne.n	7508 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    74fa:	4b08      	ldr	r3, [pc, #32]	; (751c <z_impl_k_sleep+0x30>)
    74fc:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    74fe:	f7ff ff09 	bl	7314 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    7502:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    7506:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    7508:	f7ff ffac 	bl	7464 <z_tick_sleep>
    750c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    7510:	fb80 0303 	smull	r0, r3, r0, r3
    7514:	0bc0      	lsrs	r0, r0, #15
    7516:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    751a:	e7f4      	b.n	7506 <z_impl_k_sleep+0x1a>
    751c:	20000be4 	.word	0x20000be4

00007520 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    7520:	4b01      	ldr	r3, [pc, #4]	; (7528 <z_impl_z_current_get+0x8>)
    7522:	6898      	ldr	r0, [r3, #8]
    7524:	4770      	bx	lr
    7526:	bf00      	nop
    7528:	20000be4 	.word	0x20000be4

0000752c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    752c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7530:	4604      	mov	r4, r0
    7532:	f04f 0340 	mov.w	r3, #64	; 0x40
    7536:	f3ef 8611 	mrs	r6, BASEPRI
    753a:	f383 8812 	msr	BASEPRI_MAX, r3
    753e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    7542:	7b03      	ldrb	r3, [r0, #12]
    7544:	07d9      	lsls	r1, r3, #31
    7546:	d50b      	bpl.n	7560 <z_thread_abort+0x34>
	__asm__ volatile(
    7548:	f386 8811 	msr	BASEPRI, r6
    754c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    7550:	4040      	eors	r0, r0
    7552:	f380 8811 	msr	BASEPRI, r0
    7556:	f04f 0004 	mov.w	r0, #4
    755a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    755c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    7560:	7b43      	ldrb	r3, [r0, #13]
    7562:	071a      	lsls	r2, r3, #28
    7564:	d504      	bpl.n	7570 <z_thread_abort+0x44>
    7566:	f386 8811 	msr	BASEPRI, r6
    756a:	f3bf 8f6f 	isb	sy
    756e:	e7f5      	b.n	755c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    7570:	f023 0220 	bic.w	r2, r3, #32
    7574:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    7578:	09d2      	lsrs	r2, r2, #7
    757a:	d120      	bne.n	75be <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    757c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    757e:	68a3      	ldr	r3, [r4, #8]
    7580:	b113      	cbz	r3, 7588 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    7582:	4620      	mov	r0, r4
    7584:	f001 fbc2 	bl	8d0c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    7588:	f104 0018 	add.w	r0, r4, #24
    758c:	f001 fcbc 	bl	8f08 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    7590:	f104 0758 	add.w	r7, r4, #88	; 0x58
    7594:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    7598:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    759a:	42bd      	cmp	r5, r7
    759c:	d000      	beq.n	75a0 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    759e:	b9b5      	cbnz	r5, 75ce <z_thread_abort+0xa2>
		update_cache(1);
    75a0:	2001      	movs	r0, #1
    75a2:	f7ff fd37 	bl	7014 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    75a6:	4b10      	ldr	r3, [pc, #64]	; (75e8 <z_thread_abort+0xbc>)
    75a8:	689b      	ldr	r3, [r3, #8]
    75aa:	42a3      	cmp	r3, r4
    75ac:	d1db      	bne.n	7566 <z_thread_abort+0x3a>
    75ae:	f3ef 8305 	mrs	r3, IPSR
    75b2:	2b00      	cmp	r3, #0
    75b4:	d1d7      	bne.n	7566 <z_thread_abort+0x3a>
    75b6:	4630      	mov	r0, r6
    75b8:	f7fb fa8e 	bl	2ad8 <arch_swap>
	return ret;
    75bc:	e7d3      	b.n	7566 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    75be:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    75c2:	f043 0308 	orr.w	r3, r3, #8
    75c6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    75c8:	f001 fb98 	bl	8cfc <sys_dlist_remove>
}
    75cc:	e7d7      	b.n	757e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    75ce:	4628      	mov	r0, r5
    75d0:	f001 fb9c 	bl	8d0c <unpend_thread_no_timeout>
    75d4:	f105 0018 	add.w	r0, r5, #24
    75d8:	f001 fc96 	bl	8f08 <z_abort_timeout>
    75dc:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
    75e0:	4628      	mov	r0, r5
    75e2:	f7ff fd6f 	bl	70c4 <ready_thread>
    75e6:	e7d7      	b.n	7598 <z_thread_abort+0x6c>
    75e8:	20000be4 	.word	0x20000be4

000075ec <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    75ec:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    75ee:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    75f2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    75f4:	e9cd 6700 	strd	r6, r7, [sp]
    75f8:	f7ff fdf8 	bl	71ec <z_pend_curr>

	if (data != NULL) {
    75fc:	b11c      	cbz	r4, 7606 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    75fe:	4b03      	ldr	r3, [pc, #12]	; (760c <z_sched_wait+0x20>)
    7600:	689b      	ldr	r3, [r3, #8]
    7602:	695b      	ldr	r3, [r3, #20]
    7604:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    7606:	b002      	add	sp, #8
    7608:	bdd0      	pop	{r4, r6, r7, pc}
    760a:	bf00      	nop
    760c:	20000be4 	.word	0x20000be4

00007610 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    7610:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    7612:	4806      	ldr	r0, [pc, #24]	; (762c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    7614:	4a06      	ldr	r2, [pc, #24]	; (7630 <z_data_copy+0x20>)
    7616:	4907      	ldr	r1, [pc, #28]	; (7634 <z_data_copy+0x24>)
    7618:	1a12      	subs	r2, r2, r0
    761a:	f001 fb03 	bl	8c24 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    761e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    7622:	4a05      	ldr	r2, [pc, #20]	; (7638 <z_data_copy+0x28>)
    7624:	4905      	ldr	r1, [pc, #20]	; (763c <z_data_copy+0x2c>)
    7626:	4806      	ldr	r0, [pc, #24]	; (7640 <z_data_copy+0x30>)
    7628:	f001 bafc 	b.w	8c24 <z_early_memcpy>
    762c:	20000000 	.word	0x20000000
    7630:	20000224 	.word	0x20000224
    7634:	0000a074 	.word	0x0000a074
    7638:	00000000 	.word	0x00000000
    763c:	0000a074 	.word	0x0000a074
    7640:	20000000 	.word	0x20000000

00007644 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7644:	4b03      	ldr	r3, [pc, #12]	; (7654 <elapsed+0x10>)
    7646:	681b      	ldr	r3, [r3, #0]
    7648:	b90b      	cbnz	r3, 764e <elapsed+0xa>
    764a:	f7fd b883 	b.w	4754 <sys_clock_elapsed>
}
    764e:	2000      	movs	r0, #0
    7650:	4770      	bx	lr
    7652:	bf00      	nop
    7654:	20000c1c 	.word	0x20000c1c

00007658 <next_timeout>:

static int32_t next_timeout(void)
{
    7658:	b510      	push	{r4, lr}
	return list->head == list;
    765a:	4b0e      	ldr	r3, [pc, #56]	; (7694 <next_timeout+0x3c>)
    765c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    765e:	429c      	cmp	r4, r3
    7660:	d104      	bne.n	766c <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    7662:	f7ff ffef 	bl	7644 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    7666:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    766a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    766c:	f7ff ffea 	bl	7644 <elapsed>
	if ((to == NULL) ||
    7670:	2c00      	cmp	r4, #0
    7672:	d0f8      	beq.n	7666 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    7674:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    7678:	1a1b      	subs	r3, r3, r0
    767a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    767e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    7682:	f172 0100 	sbcs.w	r1, r2, #0
    7686:	daee      	bge.n	7666 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    7688:	2a00      	cmp	r2, #0
    768a:	bfac      	ite	ge
    768c:	4618      	movge	r0, r3
    768e:	2000      	movlt	r0, #0
	return ret;
    7690:	e7eb      	b.n	766a <next_timeout+0x12>
    7692:	bf00      	nop
    7694:	20000168 	.word	0x20000168

00007698 <remove_timeout>:
{
    7698:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    769a:	b170      	cbz	r0, 76ba <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    769c:	4b0b      	ldr	r3, [pc, #44]	; (76cc <remove_timeout+0x34>)
    769e:	685b      	ldr	r3, [r3, #4]
    76a0:	4298      	cmp	r0, r3
    76a2:	d00a      	beq.n	76ba <remove_timeout+0x22>
    76a4:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    76a6:	b143      	cbz	r3, 76ba <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    76a8:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    76ac:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    76b0:	1912      	adds	r2, r2, r4
    76b2:	eb41 0105 	adc.w	r1, r1, r5
    76b6:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    76ba:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    76be:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    76c0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    76c2:	2300      	movs	r3, #0
	node->prev = NULL;
    76c4:	e9c0 3300 	strd	r3, r3, [r0]
}
    76c8:	bd30      	pop	{r4, r5, pc}
    76ca:	bf00      	nop
    76cc:	20000168 	.word	0x20000168

000076d0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    76d0:	f1b3 3fff 	cmp.w	r3, #4294967295
    76d4:	bf08      	it	eq
    76d6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    76da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    76dc:	4604      	mov	r4, r0
    76de:	461d      	mov	r5, r3
    76e0:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    76e2:	d05c      	beq.n	779e <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    76e4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    76e6:	f04f 0340 	mov.w	r3, #64	; 0x40
    76ea:	f3ef 8711 	mrs	r7, BASEPRI
    76ee:	f383 8812 	msr	BASEPRI_MAX, r3
    76f2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    76f6:	3201      	adds	r2, #1
    76f8:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    76fc:	da24      	bge.n	7748 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    76fe:	492d      	ldr	r1, [pc, #180]	; (77b4 <z_add_timeout+0xe4>)
    7700:	e9d1 2000 	ldrd	r2, r0, [r1]
    7704:	f06f 0301 	mvn.w	r3, #1
    7708:	1a9b      	subs	r3, r3, r2
    770a:	f04f 32ff 	mov.w	r2, #4294967295
    770e:	eb62 0000 	sbc.w	r0, r2, r0
    7712:	1b9e      	subs	r6, r3, r6
    7714:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    7718:	2e01      	cmp	r6, #1
    771a:	f170 0300 	sbcs.w	r3, r0, #0
    771e:	da01      	bge.n	7724 <z_add_timeout+0x54>
    7720:	2601      	movs	r6, #1
    7722:	2000      	movs	r0, #0
    7724:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    7728:	4e23      	ldr	r6, [pc, #140]	; (77b8 <z_add_timeout+0xe8>)
    772a:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    772e:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7730:	45b4      	cmp	ip, r6
    7732:	bf08      	it	eq
    7734:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    7738:	f1bc 0f00 	cmp.w	ip, #0
    773c:	d10d      	bne.n	775a <z_add_timeout+0x8a>
	node->prev = tail;
    773e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    7742:	602c      	str	r4, [r5, #0]
	list->tail = node;
    7744:	6074      	str	r4, [r6, #4]
}
    7746:	e01c      	b.n	7782 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    7748:	f7ff ff7c 	bl	7644 <elapsed>
    774c:	3601      	adds	r6, #1
    774e:	f145 0500 	adc.w	r5, r5, #0
    7752:	1836      	adds	r6, r6, r0
    7754:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    7758:	e7e4      	b.n	7724 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    775a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    775e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    7762:	4293      	cmp	r3, r2
    7764:	eb71 0e00 	sbcs.w	lr, r1, r0
    7768:	da1a      	bge.n	77a0 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    776a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    776c:	f8dc 3004 	ldr.w	r3, [ip, #4]
    7770:	eb60 0001 	sbc.w	r0, r0, r1
    7774:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    7778:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    777c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    777e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    7782:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7784:	42b3      	cmp	r3, r6
    7786:	d006      	beq.n	7796 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    7788:	429c      	cmp	r4, r3
    778a:	d104      	bne.n	7796 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    778c:	f7ff ff64 	bl	7658 <next_timeout>
    7790:	2100      	movs	r1, #0
    7792:	f7fc ffad 	bl	46f0 <sys_clock_set_timeout>
	__asm__ volatile(
    7796:	f387 8811 	msr	BASEPRI, r7
    779a:	f3bf 8f6f 	isb	sy
		}
	}
}
    779e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    77a0:	1a9b      	subs	r3, r3, r2
    77a2:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    77a6:	45ac      	cmp	ip, r5
    77a8:	e9c4 3104 	strd	r3, r1, [r4, #16]
    77ac:	d0c7      	beq.n	773e <z_add_timeout+0x6e>
    77ae:	f8dc c000 	ldr.w	ip, [ip]
    77b2:	e7c1      	b.n	7738 <z_add_timeout+0x68>
    77b4:	20000820 	.word	0x20000820
    77b8:	20000168 	.word	0x20000168

000077bc <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    77bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    77c0:	f04f 0340 	mov.w	r3, #64	; 0x40
    77c4:	f3ef 8c11 	mrs	ip, BASEPRI
    77c8:	f383 8812 	msr	BASEPRI_MAX, r3
    77cc:	f3bf 8f6f 	isb	sy
	return list->head == list;
    77d0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 7884 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    77d4:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 7888 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    77d8:	4f2c      	ldr	r7, [pc, #176]	; (788c <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
    77da:	f8c9 0000 	str.w	r0, [r9]
    77de:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    77e2:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    77e4:	4550      	cmp	r0, sl
    77e6:	bf08      	it	eq
    77e8:	2000      	moveq	r0, #0
    77ea:	2500      	movs	r5, #0
		curr_tick += dt;
    77ec:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    77f0:	f8d9 3000 	ldr.w	r3, [r9]
    77f4:	46e0      	mov	r8, ip
    77f6:	b380      	cbz	r0, 785a <sys_clock_announce+0x9e>
    77f8:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    77fc:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    7800:	42b3      	cmp	r3, r6
    7802:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    7806:	da05      	bge.n	7814 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    7808:	1af6      	subs	r6, r6, r3
    780a:	eb6c 040e 	sbc.w	r4, ip, lr
    780e:	e9c0 6404 	strd	r6, r4, [r0, #16]
    7812:	e022      	b.n	785a <sys_clock_announce+0x9e>
		curr_tick += dt;
    7814:	18b2      	adds	r2, r6, r2
    7816:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    781a:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    781e:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    7822:	f7ff ff39 	bl	7698 <remove_timeout>
	__asm__ volatile(
    7826:	f388 8811 	msr	BASEPRI, r8
    782a:	f3bf 8f6f 	isb	sy
		t->fn(t);
    782e:	6883      	ldr	r3, [r0, #8]
    7830:	4798      	blx	r3
	__asm__ volatile(
    7832:	f04f 0340 	mov.w	r3, #64	; 0x40
    7836:	f3ef 8811 	mrs	r8, BASEPRI
    783a:	f383 8812 	msr	BASEPRI_MAX, r3
    783e:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    7842:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    7846:	f8da 0000 	ldr.w	r0, [sl]
    784a:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    784c:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    784e:	46c4      	mov	ip, r8
    7850:	f8c9 3000 	str.w	r3, [r9]
    7854:	d1ca      	bne.n	77ec <sys_clock_announce+0x30>
		curr_tick += dt;
    7856:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
    785a:	189a      	adds	r2, r3, r2
    785c:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
    7860:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    7862:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    7866:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    786a:	f7ff fef5 	bl	7658 <next_timeout>
    786e:	4621      	mov	r1, r4
    7870:	f7fc ff3e 	bl	46f0 <sys_clock_set_timeout>
	__asm__ volatile(
    7874:	f388 8811 	msr	BASEPRI, r8
    7878:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    787c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    7880:	f7ff bc84 	b.w	718c <z_time_slice>
    7884:	20000168 	.word	0x20000168
    7888:	20000c1c 	.word	0x20000c1c
    788c:	20000820 	.word	0x20000820

00007890 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    7890:	b510      	push	{r4, lr}
	__asm__ volatile(
    7892:	f04f 0340 	mov.w	r3, #64	; 0x40
    7896:	f3ef 8411 	mrs	r4, BASEPRI
    789a:	f383 8812 	msr	BASEPRI_MAX, r3
    789e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    78a2:	f7ff fecf 	bl	7644 <elapsed>
    78a6:	4a06      	ldr	r2, [pc, #24]	; (78c0 <sys_clock_tick_get+0x30>)
    78a8:	4603      	mov	r3, r0
    78aa:	e9d2 0100 	ldrd	r0, r1, [r2]
    78ae:	1818      	adds	r0, r3, r0
    78b0:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    78b4:	f384 8811 	msr	BASEPRI, r4
    78b8:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    78bc:	bd10      	pop	{r4, pc}
    78be:	bf00      	nop
    78c0:	20000820 	.word	0x20000820

000078c4 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    78c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    78c6:	4604      	mov	r4, r0
	__asm__ volatile(
    78c8:	f04f 0340 	mov.w	r3, #64	; 0x40
    78cc:	f3ef 8711 	mrs	r7, BASEPRI
    78d0:	f383 8812 	msr	BASEPRI_MAX, r3
    78d4:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    78d8:	6802      	ldr	r2, [r0, #0]
    78da:	b122      	cbz	r2, 78e6 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
    78dc:	f387 8811 	msr	BASEPRI, r7
    78e0:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    78e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    78e6:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
    78ea:	1c58      	adds	r0, r3, #1
    78ec:	f146 0100 	adc.w	r1, r6, #0
    78f0:	2802      	cmp	r0, #2
    78f2:	f171 0100 	sbcs.w	r1, r1, #0
    78f6:	d327      	bcc.n	7948 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
    78f8:	2b01      	cmp	r3, #1
    78fa:	f176 0100 	sbcs.w	r1, r6, #0
    78fe:	bfbc      	itt	lt
    7900:	2301      	movlt	r3, #1
    7902:	4616      	movlt	r6, r2
    7904:	1e5d      	subs	r5, r3, #1
    7906:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
    790a:	f001 fb27 	bl	8f5c <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    790e:	3001      	adds	r0, #1
    7910:	f141 0100 	adc.w	r1, r1, #0
    7914:	1940      	adds	r0, r0, r5
    7916:	eb46 0101 	adc.w	r1, r6, r1
    791a:	2801      	cmp	r0, #1
    791c:	f171 0100 	sbcs.w	r1, r1, #0
    7920:	db3a      	blt.n	7998 <z_timer_expiration_handler+0xd4>
    7922:	f001 fb1b 	bl	8f5c <z_impl_k_uptime_ticks>
    7926:	3001      	adds	r0, #1
    7928:	f141 0100 	adc.w	r1, r1, #0
    792c:	f06f 0201 	mvn.w	r2, #1
    7930:	1940      	adds	r0, r0, r5
    7932:	eb46 0301 	adc.w	r3, r6, r1
    7936:	1a12      	subs	r2, r2, r0
    7938:	f04f 31ff 	mov.w	r1, #4294967295
    793c:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    7940:	4918      	ldr	r1, [pc, #96]	; (79a4 <z_timer_expiration_handler+0xe0>)
    7942:	4620      	mov	r0, r4
    7944:	f7ff fec4 	bl	76d0 <z_add_timeout>
	timer->status += 1U;
    7948:	6b23      	ldr	r3, [r4, #48]	; 0x30
    794a:	3301      	adds	r3, #1
    794c:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
    794e:	6a23      	ldr	r3, [r4, #32]
    7950:	b173      	cbz	r3, 7970 <z_timer_expiration_handler+0xac>
    7952:	f387 8811 	msr	BASEPRI, r7
    7956:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
    795a:	6a23      	ldr	r3, [r4, #32]
    795c:	4620      	mov	r0, r4
    795e:	4798      	blx	r3
	__asm__ volatile(
    7960:	f04f 0340 	mov.w	r3, #64	; 0x40
    7964:	f3ef 8711 	mrs	r7, BASEPRI
    7968:	f383 8812 	msr	BASEPRI_MAX, r3
    796c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    7970:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7974:	42a5      	cmp	r5, r4
    7976:	d0b1      	beq.n	78dc <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
    7978:	2d00      	cmp	r5, #0
    797a:	d0af      	beq.n	78dc <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
    797c:	4628      	mov	r0, r5
    797e:	f001 fa07 	bl	8d90 <z_unpend_thread_no_timeout>
    7982:	2300      	movs	r3, #0
    7984:	67eb      	str	r3, [r5, #124]	; 0x7c
	__asm__ volatile(
    7986:	f387 8811 	msr	BASEPRI, r7
    798a:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    798e:	4628      	mov	r0, r5
}
    7990:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    7994:	f001 b9ec 	b.w	8d70 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    7998:	f06f 0201 	mvn.w	r2, #1
    799c:	f04f 33ff 	mov.w	r3, #4294967295
    79a0:	e7ce      	b.n	7940 <z_timer_expiration_handler+0x7c>
    79a2:	bf00      	nop
    79a4:	000078c5 	.word	0x000078c5

000079a8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    79a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    79ac:	f1b3 3fff 	cmp.w	r3, #4294967295
    79b0:	bf08      	it	eq
    79b2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    79b6:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    79ba:	4605      	mov	r5, r0
    79bc:	461c      	mov	r4, r3
    79be:	4691      	mov	r9, r2
    79c0:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    79c2:	d01c      	beq.n	79fe <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
    79c4:	1c53      	adds	r3, r2, #1
    79c6:	f174 33ff 	sbcs.w	r3, r4, #4294967295
    79ca:	db09      	blt.n	79e0 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
    79cc:	2a01      	cmp	r2, #1
    79ce:	f174 0300 	sbcs.w	r3, r4, #0
    79d2:	bfbc      	itt	lt
    79d4:	2201      	movlt	r2, #1
    79d6:	2400      	movlt	r4, #0
    79d8:	f112 39ff 	adds.w	r9, r2, #4294967295
    79dc:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    79e0:	4628      	mov	r0, r5
    79e2:	f001 fa91 	bl	8f08 <z_abort_timeout>
	timer->period = period;
    79e6:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
    79ea:	2300      	movs	r3, #0
    79ec:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    79ee:	464a      	mov	r2, r9
    79f0:	4643      	mov	r3, r8
    79f2:	4628      	mov	r0, r5
    79f4:	4903      	ldr	r1, [pc, #12]	; (7a04 <z_impl_k_timer_start+0x5c>)
		     duration);
}
    79f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    79fa:	f7ff be69 	b.w	76d0 <z_add_timeout>
}
    79fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    7a02:	bf00      	nop
    7a04:	000078c5 	.word	0x000078c5

00007a08 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *sig, int result)
{
    7a08:	b538      	push	{r3, r4, r5, lr}
    7a0a:	4603      	mov	r3, r0
	__asm__ volatile(
    7a0c:	f04f 0240 	mov.w	r2, #64	; 0x40
    7a10:	f3ef 8511 	mrs	r5, BASEPRI
    7a14:	f382 8812 	msr	BASEPRI_MAX, r2
    7a18:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	sig->result = result;
    7a1c:	60c1      	str	r1, [r0, #12]
	sig->signaled = 1U;
    7a1e:	2101      	movs	r1, #1
    7a20:	6081      	str	r1, [r0, #8]
	return list->head == list;
    7a22:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    7a24:	4283      	cmp	r3, r0
    7a26:	d106      	bne.n	7a36 <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
    7a28:	f385 8811 	msr	BASEPRI, r5
    7a2c:	f3bf 8f6f 	isb	sy
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, 0);

		return 0;
    7a30:	2400      	movs	r4, #0

	SYS_PORT_TRACING_FUNC(k_poll_api, signal_raise, sig, rc);

	z_reschedule(&lock, key);
	return rc;
}
    7a32:	4620      	mov	r0, r4
    7a34:	bd38      	pop	{r3, r4, r5, pc}
	sys_dnode_t *const next = node->next;
    7a36:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    7a3a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7a3c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7a3e:	2300      	movs	r3, #0
	node->prev = NULL;
    7a40:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    7a44:	f001 fab9 	bl	8fba <signal_poll_event>
	z_reschedule(&lock, key);
    7a48:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    7a4a:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    7a4c:	4801      	ldr	r0, [pc, #4]	; (7a54 <z_impl_k_poll_signal_raise+0x4c>)
    7a4e:	f7ff fc31 	bl	72b4 <z_reschedule>
	return rc;
    7a52:	e7ee      	b.n	7a32 <z_impl_k_poll_signal_raise+0x2a>
    7a54:	2000133e 	.word	0x2000133e

00007a58 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    7a58:	4801      	ldr	r0, [pc, #4]	; (7a60 <boot_banner+0x8>)
    7a5a:	f000 b898 	b.w	7b8e <printk>
    7a5e:	bf00      	nop
    7a60:	0000a03a 	.word	0x0000a03a

00007a64 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
    7a64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
    7a66:	4b09      	ldr	r3, [pc, #36]	; (7a8c <k_sys_work_q_init+0x28>)
    7a68:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    7a6a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    7a6c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    7a6e:	9300      	str	r3, [sp, #0]
    7a70:	4907      	ldr	r1, [pc, #28]	; (7a90 <k_sys_work_q_init+0x2c>)
    7a72:	4808      	ldr	r0, [pc, #32]	; (7a94 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    7a74:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    7a78:	f04f 33ff 	mov.w	r3, #4294967295
    7a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7a80:	f7ff fa3a 	bl	6ef8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    7a84:	4620      	mov	r0, r4
    7a86:	b004      	add	sp, #16
    7a88:	bd10      	pop	{r4, pc}
    7a8a:	bf00      	nop
    7a8c:	0000a06a 	.word	0x0000a06a
    7a90:	20002440 	.word	0x20002440
    7a94:	20000828 	.word	0x20000828

00007a98 <main>:
#include <zephyr/logging/log.h>
#include "receiver.h"

LOG_MODULE_REGISTER(main, CONFIG_LOG_DEFAULT_LEVEL);

void main(void) {
    7a98:	b508      	push	{r3, lr}
	// struct esb_payload dummy;
	init_receiver();
    7a9a:	f7f8 ff47 	bl	92c <init_receiver>
	init_pic32_spi();
    7a9e:	f7f8 fe49 	bl	734 <init_pic32_spi>
	return z_impl_k_sleep(timeout);
    7aa2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    7aa6:	2100      	movs	r1, #0
    7aa8:	f7ff fd20 	bl	74ec <z_impl_k_sleep>
    7aac:	f640 40cd 	movw	r0, #3277	; 0xccd
    7ab0:	e7f9      	b.n	7aa6 <main+0xe>

00007ab2 <z_log_msg_static_create.constprop.0>:
    7ab2:	2300      	movs	r3, #0
    7ab4:	f7fa baa8 	b.w	2008 <z_impl_z_log_msg_static_create>

00007ab8 <cbpprintf_external>:
{
    7ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7abc:	4606      	mov	r6, r0
    7abe:	460d      	mov	r5, r1
    7ac0:	4617      	mov	r7, r2
	if (buf == NULL) {
    7ac2:	4698      	mov	r8, r3
    7ac4:	b32b      	cbz	r3, 7b12 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
    7ac6:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
    7aca:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    7ace:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
    7ad0:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    7ad2:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    7ad6:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    7ada:	441c      	add	r4, r3
    7adc:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
    7ade:	f04f 0a00 	mov.w	sl, #0
    7ae2:	45ca      	cmp	sl, r9
    7ae4:	d309      	bcc.n	7afa <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
    7ae6:	f8d8 2004 	ldr.w	r2, [r8, #4]
    7aea:	f108 0308 	add.w	r3, r8, #8
    7aee:	4639      	mov	r1, r7
    7af0:	4630      	mov	r0, r6
    7af2:	46ac      	mov	ip, r5
}
    7af4:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    7af8:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    7afa:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    7afe:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
    7b02:	4620      	mov	r0, r4
    7b04:	f000 fcef 	bl	84e6 <strlen>
    7b08:	3001      	adds	r0, #1
    7b0a:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    7b0c:	f10a 0a01 	add.w	sl, sl, #1
    7b10:	e7e7      	b.n	7ae2 <cbpprintf_external+0x2a>
}
    7b12:	f06f 0015 	mvn.w	r0, #21
    7b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00007b1a <is_ptr>:
{
    7b1a:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
    7b1c:	2500      	movs	r5, #0
{
    7b1e:	4602      	mov	r2, r0
	bool mod = false;
    7b20:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
    7b22:	4614      	mov	r4, r2
    7b24:	f814 3b01 	ldrb.w	r3, [r4], #1
    7b28:	b90b      	cbnz	r3, 7b2e <is_ptr+0x14>
					return false;
    7b2a:	4618      	mov	r0, r3
    7b2c:	e009      	b.n	7b42 <is_ptr+0x28>
		if (mod) {
    7b2e:	b198      	cbz	r0, 7b58 <is_ptr+0x3e>
			if (cnt == n) {
    7b30:	428d      	cmp	r5, r1
    7b32:	d107      	bne.n	7b44 <is_ptr+0x2a>
				if (c == 'p') {
    7b34:	2b70      	cmp	r3, #112	; 0x70
    7b36:	d004      	beq.n	7b42 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
    7b38:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
    7b3c:	2a3a      	cmp	r2, #58	; 0x3a
    7b3e:	d80b      	bhi.n	7b58 <is_ptr+0x3e>
					return false;
    7b40:	2000      	movs	r0, #0
}
    7b42:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
    7b44:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
    7b48:	2e3a      	cmp	r6, #58	; 0x3a
    7b4a:	d805      	bhi.n	7b58 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
    7b4c:	7853      	ldrb	r3, [r2, #1]
				cnt++;
    7b4e:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
    7b50:	1c94      	adds	r4, r2, #2
    7b52:	2b00      	cmp	r3, #0
    7b54:	d0e9      	beq.n	7b2a <is_ptr+0x10>
    7b56:	2000      	movs	r0, #0
		if (c == '%') {
    7b58:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
    7b5a:	bf08      	it	eq
    7b5c:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
    7b60:	4622      	mov	r2, r4
    7b62:	e7de      	b.n	7b22 <is_ptr+0x8>

00007b64 <arch_printk_char_out>:
}
    7b64:	2000      	movs	r0, #0
    7b66:	4770      	bx	lr

00007b68 <str_out>:
{
    7b68:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    7b6a:	688a      	ldr	r2, [r1, #8]
    7b6c:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    7b6e:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    7b70:	b114      	cbz	r4, 7b78 <str_out+0x10>
    7b72:	684b      	ldr	r3, [r1, #4]
    7b74:	4293      	cmp	r3, r2
    7b76:	dc01      	bgt.n	7b7c <str_out+0x14>
		ctx->count++;
    7b78:	608d      	str	r5, [r1, #8]
}
    7b7a:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    7b7c:	3b01      	subs	r3, #1
    7b7e:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    7b80:	bf08      	it	eq
    7b82:	2200      	moveq	r2, #0
    7b84:	608d      	str	r5, [r1, #8]
    7b86:	bf0c      	ite	eq
    7b88:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    7b8a:	54a0      	strbne	r0, [r4, r2]
    7b8c:	e7f5      	b.n	7b7a <str_out+0x12>

00007b8e <printk>:
{
    7b8e:	b40f      	push	{r0, r1, r2, r3}
    7b90:	b507      	push	{r0, r1, r2, lr}
    7b92:	a904      	add	r1, sp, #16
    7b94:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    7b98:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    7b9a:	f000 fbfc 	bl	8396 <z_log_vprintk>
}
    7b9e:	b003      	add	sp, #12
    7ba0:	f85d eb04 	ldr.w	lr, [sp], #4
    7ba4:	b004      	add	sp, #16
    7ba6:	4770      	bx	lr

00007ba8 <snprintk>:
{
    7ba8:	b40c      	push	{r2, r3}
    7baa:	b507      	push	{r0, r1, r2, lr}
    7bac:	ab04      	add	r3, sp, #16
    7bae:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    7bb2:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    7bb4:	f7f9 faba 	bl	112c <vsnprintk>
}
    7bb8:	b003      	add	sp, #12
    7bba:	f85d eb04 	ldr.w	lr, [sp], #4
    7bbe:	b002      	add	sp, #8
    7bc0:	4770      	bx	lr

00007bc2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    7bc2:	4604      	mov	r4, r0
    7bc4:	b508      	push	{r3, lr}
    7bc6:	4608      	mov	r0, r1
    7bc8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    7bca:	461a      	mov	r2, r3
    7bcc:	47a0      	blx	r4
	return z_impl_z_current_get();
    7bce:	f7ff fca7 	bl	7520 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    7bd2:	f7fb fb9f 	bl	3314 <z_impl_k_thread_abort>

00007bd6 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7bd6:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    7bd8:	f013 0307 	ands.w	r3, r3, #7
    7bdc:	d105      	bne.n	7bea <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    7bde:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    7be0:	2b00      	cmp	r3, #0
    7be2:	bf0c      	ite	eq
    7be4:	2000      	moveq	r0, #0
    7be6:	2003      	movne	r0, #3
    7be8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    7bea:	2b02      	cmp	r3, #2
    7bec:	d105      	bne.n	7bfa <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    7bee:	8b40      	ldrh	r0, [r0, #26]
    7bf0:	fab0 f080 	clz	r0, r0
    7bf4:	0940      	lsrs	r0, r0, #5
    7bf6:	0080      	lsls	r0, r0, #2
    7bf8:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    7bfa:	2b01      	cmp	r3, #1
    7bfc:	d105      	bne.n	7c0a <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    7bfe:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    7c00:	2b00      	cmp	r3, #0
    7c02:	bf0c      	ite	eq
    7c04:	2000      	moveq	r0, #0
    7c06:	2005      	movne	r0, #5
    7c08:	4770      	bx	lr
	int evt = EVT_NOP;
    7c0a:	2000      	movs	r0, #0
}
    7c0c:	4770      	bx	lr

00007c0e <validate_args>:
{
    7c0e:	b510      	push	{r4, lr}
    7c10:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    7c12:	b100      	cbz	r0, 7c16 <validate_args+0x8>
    7c14:	b911      	cbnz	r1, 7c1c <validate_args+0xe>
		return -EINVAL;
    7c16:	f06f 0015 	mvn.w	r0, #21
}
    7c1a:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    7c1c:	1d08      	adds	r0, r1, #4
    7c1e:	f000 f8ba 	bl	7d96 <sys_notify_validate>
	if ((rv == 0)
    7c22:	2800      	cmp	r0, #0
    7c24:	d1f9      	bne.n	7c1a <validate_args+0xc>
	    && ((cli->notify.flags
    7c26:	68a3      	ldr	r3, [r4, #8]
    7c28:	2b03      	cmp	r3, #3
    7c2a:	d9f6      	bls.n	7c1a <validate_args+0xc>
    7c2c:	e7f3      	b.n	7c16 <validate_args+0x8>

00007c2e <notify_one>:
{
    7c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7c32:	460d      	mov	r5, r1
    7c34:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7c36:	4619      	mov	r1, r3
    7c38:	1d28      	adds	r0, r5, #4
{
    7c3a:	4690      	mov	r8, r2
    7c3c:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    7c3e:	f000 f8be 	bl	7dbe <sys_notify_finalize>
	if (cb) {
    7c42:	4604      	mov	r4, r0
    7c44:	b138      	cbz	r0, 7c56 <notify_one+0x28>
		cb(mgr, cli, state, res);
    7c46:	4633      	mov	r3, r6
    7c48:	4642      	mov	r2, r8
    7c4a:	4629      	mov	r1, r5
    7c4c:	4638      	mov	r0, r7
    7c4e:	46a4      	mov	ip, r4
}
    7c50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    7c54:	4760      	bx	ip
}
    7c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007c5a <transition_complete>:
{
    7c5a:	b410      	push	{r4}
	__asm__ volatile(
    7c5c:	f04f 0440 	mov.w	r4, #64	; 0x40
    7c60:	f3ef 8211 	mrs	r2, BASEPRI
    7c64:	f384 8812 	msr	BASEPRI_MAX, r4
    7c68:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    7c6c:	6141      	str	r1, [r0, #20]
}
    7c6e:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    7c70:	2101      	movs	r1, #1
    7c72:	f7f9 ba71 	b.w	1158 <process_event>

00007c76 <onoff_manager_init>:
{
    7c76:	b538      	push	{r3, r4, r5, lr}
    7c78:	460c      	mov	r4, r1
	if ((mgr == NULL)
    7c7a:	4605      	mov	r5, r0
    7c7c:	b158      	cbz	r0, 7c96 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    7c7e:	b151      	cbz	r1, 7c96 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    7c80:	680b      	ldr	r3, [r1, #0]
    7c82:	b143      	cbz	r3, 7c96 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    7c84:	684b      	ldr	r3, [r1, #4]
    7c86:	b133      	cbz	r3, 7c96 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    7c88:	221c      	movs	r2, #28
    7c8a:	2100      	movs	r1, #0
    7c8c:	f000 fc46 	bl	851c <memset>
    7c90:	612c      	str	r4, [r5, #16]
	return 0;
    7c92:	2000      	movs	r0, #0
}
    7c94:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    7c96:	f06f 0015 	mvn.w	r0, #21
    7c9a:	e7fb      	b.n	7c94 <onoff_manager_init+0x1e>

00007c9c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    7c9c:	b570      	push	{r4, r5, r6, lr}
    7c9e:	4605      	mov	r5, r0
    7ca0:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    7ca2:	f7ff ffb4 	bl	7c0e <validate_args>

	if (rv < 0) {
    7ca6:	1e04      	subs	r4, r0, #0
    7ca8:	db15      	blt.n	7cd6 <onoff_request+0x3a>
    7caa:	f04f 0340 	mov.w	r3, #64	; 0x40
    7cae:	f3ef 8211 	mrs	r2, BASEPRI
    7cb2:	f383 8812 	msr	BASEPRI_MAX, r3
    7cb6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    7cba:	8b6b      	ldrh	r3, [r5, #26]
    7cbc:	8b2c      	ldrh	r4, [r5, #24]
    7cbe:	f64f 71ff 	movw	r1, #65535	; 0xffff
    7cc2:	428b      	cmp	r3, r1
    7cc4:	f004 0407 	and.w	r4, r4, #7
    7cc8:	d107      	bne.n	7cda <onoff_request+0x3e>
	__asm__ volatile(
    7cca:	f382 8811 	msr	BASEPRI, r2
    7cce:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    7cd2:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    7cd6:	4620      	mov	r0, r4
    7cd8:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    7cda:	2c02      	cmp	r4, #2
    7cdc:	d10c      	bne.n	7cf8 <onoff_request+0x5c>
		mgr->refs += 1U;
    7cde:	3301      	adds	r3, #1
    7ce0:	836b      	strh	r3, [r5, #26]
    7ce2:	f382 8811 	msr	BASEPRI, r2
    7ce6:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    7cea:	2300      	movs	r3, #0
    7cec:	4622      	mov	r2, r4
    7cee:	4631      	mov	r1, r6
    7cf0:	4628      	mov	r0, r5
    7cf2:	f7ff ff9c 	bl	7c2e <notify_one>
    7cf6:	e7ee      	b.n	7cd6 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    7cf8:	2c06      	cmp	r4, #6
    7cfa:	d814      	bhi.n	7d26 <onoff_request+0x8a>
    7cfc:	e8df f004 	tbb	[pc, r4]
    7d00:	13131304 	.word	0x13131304
    7d04:	1a04      	.short	0x1a04
    7d06:	04          	.byte	0x04
    7d07:	00          	.byte	0x00
	parent->next = child;
    7d08:	2300      	movs	r3, #0
    7d0a:	6033      	str	r3, [r6, #0]
	return list->tail;
    7d0c:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    7d0e:	b93b      	cbnz	r3, 7d20 <onoff_request+0x84>
	list->head = node;
    7d10:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    7d14:	b9ac      	cbnz	r4, 7d42 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    7d16:	2102      	movs	r1, #2
    7d18:	4628      	mov	r0, r5
    7d1a:	f7f9 fa1d 	bl	1158 <process_event>
    7d1e:	e7da      	b.n	7cd6 <onoff_request+0x3a>
	parent->next = child;
    7d20:	601e      	str	r6, [r3, #0]
	list->tail = node;
    7d22:	606e      	str	r6, [r5, #4]
}
    7d24:	e7f6      	b.n	7d14 <onoff_request+0x78>
    7d26:	f382 8811 	msr	BASEPRI, r2
    7d2a:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    7d2e:	f06f 0404 	mvn.w	r4, #4
    7d32:	e7d0      	b.n	7cd6 <onoff_request+0x3a>
    7d34:	f382 8811 	msr	BASEPRI, r2
    7d38:	f3bf 8f6f 	isb	sy
    7d3c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    7d40:	e7c9      	b.n	7cd6 <onoff_request+0x3a>
    7d42:	f382 8811 	msr	BASEPRI, r2
    7d46:	f3bf 8f6f 	isb	sy
		if (notify) {
    7d4a:	e7c4      	b.n	7cd6 <onoff_request+0x3a>

00007d4c <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    7d4c:	b510      	push	{r4, lr}
	__asm__ volatile(
    7d4e:	f04f 0340 	mov.w	r3, #64	; 0x40
    7d52:	f3ef 8211 	mrs	r2, BASEPRI
    7d56:	f383 8812 	msr	BASEPRI_MAX, r3
    7d5a:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    7d5e:	8b04      	ldrh	r4, [r0, #24]
    7d60:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    7d64:	2c02      	cmp	r4, #2
    7d66:	d00a      	beq.n	7d7e <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    7d68:	2c01      	cmp	r4, #1
    7d6a:	bf0c      	ite	eq
    7d6c:	f06f 0004 	mvneq.w	r0, #4
    7d70:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    7d74:	f382 8811 	msr	BASEPRI, r2
    7d78:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    7d7c:	e008      	b.n	7d90 <onoff_release+0x44>
	mgr->refs -= 1U;
    7d7e:	8b43      	ldrh	r3, [r0, #26]
    7d80:	3b01      	subs	r3, #1
    7d82:	b29b      	uxth	r3, r3
    7d84:	8343      	strh	r3, [r0, #26]
	if (stop) {
    7d86:	b923      	cbnz	r3, 7d92 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    7d88:	4621      	mov	r1, r4
    7d8a:	f7f9 f9e5 	bl	1158 <process_event>
	int rv = state;
    7d8e:	4620      	mov	r0, r4
}
    7d90:	bd10      	pop	{r4, pc}
	int rv = state;
    7d92:	4620      	mov	r0, r4
    7d94:	e7ee      	b.n	7d74 <onoff_release+0x28>

00007d96 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    7d96:	4603      	mov	r3, r0
    7d98:	b140      	cbz	r0, 7dac <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7d9a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    7d9c:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    7da0:	2a02      	cmp	r2, #2
    7da2:	d006      	beq.n	7db2 <sys_notify_validate+0x1c>
    7da4:	2a03      	cmp	r2, #3
    7da6:	d004      	beq.n	7db2 <sys_notify_validate+0x1c>
    7da8:	2a01      	cmp	r2, #1
    7daa:	d005      	beq.n	7db8 <sys_notify_validate+0x22>
    7dac:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
    7db0:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    7db2:	681a      	ldr	r2, [r3, #0]
    7db4:	2a00      	cmp	r2, #0
    7db6:	d0f9      	beq.n	7dac <sys_notify_validate+0x16>
		notify->result = 0;
    7db8:	2000      	movs	r0, #0
    7dba:	6098      	str	r0, [r3, #8]
    7dbc:	4770      	bx	lr

00007dbe <sys_notify_finalize>:

sys_notify_generic_callback sys_notify_finalize(struct sys_notify *notify,
						    int res)
{
    7dbe:	b510      	push	{r4, lr}
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7dc0:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    7dc2:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    7dc4:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    7dc8:	2a02      	cmp	r2, #2
{
    7dca:	4603      	mov	r3, r0
	switch (method) {
    7dcc:	f04f 0400 	mov.w	r4, #0
    7dd0:	d007      	beq.n	7de2 <__kernel_ram_size+0xa>
    7dd2:	2a03      	cmp	r2, #3
    7dd4:	d002      	beq.n	7ddc <__kernel_ram_size+0x4>
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    7dd6:	605c      	str	r4, [r3, #4]
	sys_notify_generic_callback rv = NULL;
    7dd8:	2000      	movs	r0, #0
    7dda:	e001      	b.n	7de0 <__kernel_ram_size+0x8>
		rv = notify->method.callback;
    7ddc:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    7dde:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    7de0:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
    7de2:	6818      	ldr	r0, [r3, #0]
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    7de4:	605c      	str	r4, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    7de6:	2800      	cmp	r0, #0
    7de8:	d0f6      	beq.n	7dd8 <__kernel_ram_size>
		union { uintptr_t x; int val; } parm1 = { .val = result };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    7dea:	f7ff fe0d 	bl	7a08 <z_impl_k_poll_signal_raise>
    7dee:	e7f3      	b.n	7dd8 <__kernel_ram_size>

00007df0 <encode_uint>:
{
    7df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7df4:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    7df6:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    7df8:	2b6f      	cmp	r3, #111	; 0x6f
{
    7dfa:	4680      	mov	r8, r0
    7dfc:	460f      	mov	r7, r1
    7dfe:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    7e00:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    7e04:	d029      	beq.n	7e5a <encode_uint+0x6a>
    7e06:	d824      	bhi.n	7e52 <encode_uint+0x62>
		return 10;
    7e08:	2b58      	cmp	r3, #88	; 0x58
    7e0a:	bf0c      	ite	eq
    7e0c:	2610      	moveq	r6, #16
    7e0e:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    7e10:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    7e14:	4632      	mov	r2, r6
    7e16:	2300      	movs	r3, #0
    7e18:	4640      	mov	r0, r8
    7e1a:	4639      	mov	r1, r7
    7e1c:	f7f8 f960 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7e20:	2a09      	cmp	r2, #9
    7e22:	b2d4      	uxtb	r4, r2
    7e24:	d81e      	bhi.n	7e64 <encode_uint+0x74>
    7e26:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    7e28:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7e2a:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    7e2c:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7e30:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    7e34:	d301      	bcc.n	7e3a <encode_uint+0x4a>
    7e36:	45d1      	cmp	r9, sl
    7e38:	d811      	bhi.n	7e5e <encode_uint+0x6e>
	if (conv->flag_hash) {
    7e3a:	782b      	ldrb	r3, [r5, #0]
    7e3c:	069b      	lsls	r3, r3, #26
    7e3e:	d505      	bpl.n	7e4c <encode_uint+0x5c>
		if (radix == 8) {
    7e40:	2e08      	cmp	r6, #8
    7e42:	d115      	bne.n	7e70 <encode_uint+0x80>
			conv->altform_0 = true;
    7e44:	78ab      	ldrb	r3, [r5, #2]
    7e46:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    7e4a:	70ab      	strb	r3, [r5, #2]
}
    7e4c:	4648      	mov	r0, r9
    7e4e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    7e52:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    7e56:	2b70      	cmp	r3, #112	; 0x70
    7e58:	e7d7      	b.n	7e0a <encode_uint+0x1a>
	switch (specifier) {
    7e5a:	2608      	movs	r6, #8
    7e5c:	e7d8      	b.n	7e10 <encode_uint+0x20>
		value /= radix;
    7e5e:	4680      	mov	r8, r0
    7e60:	460f      	mov	r7, r1
    7e62:	e7d7      	b.n	7e14 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7e64:	f1bb 0f19 	cmp.w	fp, #25
    7e68:	bf94      	ite	ls
    7e6a:	3437      	addls	r4, #55	; 0x37
    7e6c:	3457      	addhi	r4, #87	; 0x57
    7e6e:	e7db      	b.n	7e28 <encode_uint+0x38>
		} else if (radix == 16) {
    7e70:	2e10      	cmp	r6, #16
    7e72:	d1eb      	bne.n	7e4c <encode_uint+0x5c>
			conv->altform_0c = true;
    7e74:	78ab      	ldrb	r3, [r5, #2]
    7e76:	f043 0310 	orr.w	r3, r3, #16
    7e7a:	e7e6      	b.n	7e4a <encode_uint+0x5a>

00007e7c <outs>:
{
    7e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7e80:	4607      	mov	r7, r0
    7e82:	4688      	mov	r8, r1
    7e84:	4615      	mov	r5, r2
    7e86:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    7e88:	4614      	mov	r4, r2
    7e8a:	42b4      	cmp	r4, r6
    7e8c:	d305      	bcc.n	7e9a <outs+0x1e>
    7e8e:	b10e      	cbz	r6, 7e94 <outs+0x18>
	return (int)count;
    7e90:	1b60      	subs	r0, r4, r5
    7e92:	e008      	b.n	7ea6 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    7e94:	7823      	ldrb	r3, [r4, #0]
    7e96:	2b00      	cmp	r3, #0
    7e98:	d0fa      	beq.n	7e90 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    7e9a:	f814 0b01 	ldrb.w	r0, [r4], #1
    7e9e:	4641      	mov	r1, r8
    7ea0:	47b8      	blx	r7
		if (rc < 0) {
    7ea2:	2800      	cmp	r0, #0
    7ea4:	daf1      	bge.n	7e8a <outs+0xe>
}
    7ea6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007eaa <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    7eaa:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
    7eac:	6903      	ldr	r3, [r0, #16]
{
    7eae:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
    7eb0:	f013 0008 	ands.w	r0, r3, #8
    7eb4:	d109      	bne.n	7eca <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    7eb6:	6813      	ldr	r3, [r2, #0]
    7eb8:	68d4      	ldr	r4, [r2, #12]
    7eba:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
    7ebc:	bf97      	itett	ls
    7ebe:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    7ec0:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
    7ec2:	1ad3      	subls	r3, r2, r3

	return true;
    7ec4:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    7ec6:	600b      	str	r3, [r1, #0]
}
    7ec8:	bd10      	pop	{r4, pc}
    7eca:	2300      	movs	r3, #0
		return false;
    7ecc:	4618      	mov	r0, r3
    7ece:	e7fa      	b.n	7ec6 <free_space+0x1c>

00007ed0 <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    7ed0:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    7ed2:	a901      	add	r1, sp, #4
{
    7ed4:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    7ed6:	f7ff ffe8 	bl	7eaa <free_space>
    7eda:	b120      	cbz	r0, 7ee6 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    7edc:	9b01      	ldr	r3, [sp, #4]
    7ede:	68e2      	ldr	r2, [r4, #12]
    7ee0:	3b01      	subs	r3, #1
    7ee2:	4413      	add	r3, r2
    7ee4:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    7ee6:	6a20      	ldr	r0, [r4, #32]
    7ee8:	9b01      	ldr	r3, [sp, #4]
    7eea:	1ac0      	subs	r0, r0, r3
}
    7eec:	3801      	subs	r0, #1
    7eee:	b002      	add	sp, #8
    7ef0:	bd10      	pop	{r4, pc}

00007ef2 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
    7ef2:	b510      	push	{r4, lr}
    7ef4:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    7ef6:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    7ef8:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    7efa:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    7efc:	07d2      	lsls	r2, r2, #31
    7efe:	d502      	bpl.n	7f06 <idx_inc+0x14>
		return i & (buffer->size - 1);
    7f00:	3b01      	subs	r3, #1
    7f02:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    7f04:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    7f06:	4298      	cmp	r0, r3
    7f08:	bf28      	it	cs
    7f0a:	1ac0      	subcs	r0, r0, r3
    7f0c:	e7fa      	b.n	7f04 <idx_inc+0x12>

00007f0e <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
    7f0e:	b510      	push	{r4, lr}
    7f10:	4604      	mov	r4, r0
    7f12:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    7f14:	68c1      	ldr	r1, [r0, #12]
    7f16:	f7ff ffec 	bl	7ef2 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
    7f1a:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    7f1c:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
    7f1e:	f023 0308 	bic.w	r3, r3, #8
    7f22:	6123      	str	r3, [r4, #16]
}
    7f24:	bd10      	pop	{r4, pc}

00007f26 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    7f26:	b538      	push	{r3, r4, r5, lr}
    7f28:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    7f2a:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
    7f2c:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    7f2e:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    7f30:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    7f34:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
    7f38:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    7f3a:	6801      	ldr	r1, [r0, #0]
    7f3c:	462a      	mov	r2, r5
    7f3e:	f7ff ffd8 	bl	7ef2 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    7f42:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    7f44:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    7f46:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    7f48:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
    7f4a:	bf02      	ittt	eq
    7f4c:	6923      	ldreq	r3, [r4, #16]
    7f4e:	f043 0308 	orreq.w	r3, r3, #8
    7f52:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    7f54:	462a      	mov	r2, r5
    7f56:	4620      	mov	r0, r4
    7f58:	f7ff ffcb 	bl	7ef2 <idx_inc>
    7f5c:	6060      	str	r0, [r4, #4]
}
    7f5e:	bd38      	pop	{r3, r4, r5, pc}

00007f60 <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
    7f60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    7f64:	68c7      	ldr	r7, [r0, #12]
    7f66:	69c6      	ldr	r6, [r0, #28]
{
    7f68:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
    7f6a:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    7f6e:	f003 0303 	and.w	r3, r3, #3
    7f72:	2b02      	cmp	r3, #2
{
    7f74:	4604      	mov	r4, r0
    7f76:	4688      	mov	r8, r1
    7f78:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    7f7a:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    7f7e:	f04f 0300 	mov.w	r3, #0
    7f82:	d009      	beq.n	7f98 <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
    7f84:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
    7f86:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
    7f8a:	6923      	ldr	r3, [r4, #16]
    7f8c:	0799      	lsls	r1, r3, #30
    7f8e:	d410      	bmi.n	7fb2 <drop_item_locked+0x52>
		return false;
    7f90:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
    7f92:	b003      	add	sp, #12
    7f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
    7f98:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
    7f9c:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
    7f9e:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
    7fa0:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
    7fa4:	d0f1      	beq.n	7f8a <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
    7fa6:	f7ff ffb2 	bl	7f0e <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    7faa:	68e3      	ldr	r3, [r4, #12]
    7fac:	60a3      	str	r3, [r4, #8]
		return true;
    7fae:	2001      	movs	r0, #1
    7fb0:	e7ef      	b.n	7f92 <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
    7fb2:	69a3      	ldr	r3, [r4, #24]
    7fb4:	4650      	mov	r0, sl
    7fb6:	4798      	blx	r3
	return item->hdr.valid;
    7fb8:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
    7fbc:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
    7fbe:	4605      	mov	r5, r0
	if (!is_valid(item)) {
    7fc0:	d5e6      	bpl.n	7f90 <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
    7fc2:	f013 0302 	ands.w	r3, r3, #2
    7fc6:	d01d      	beq.n	8004 <CONFIG_PM_SRAM_SIZE+0x4>
		if (free_wlen) {
    7fc8:	f1b8 0f00 	cmp.w	r8, #0
    7fcc:	d003      	beq.n	7fd6 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
    7fce:	4641      	mov	r1, r8
    7fd0:	4620      	mov	r0, r4
    7fd2:	f7ff ffa8 	bl	7f26 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    7fd6:	6861      	ldr	r1, [r4, #4]
    7fd8:	462a      	mov	r2, r5
    7fda:	4620      	mov	r0, r4
    7fdc:	f7ff ff89 	bl	7ef2 <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    7fe0:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    7fe4:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    7fe6:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    7fe8:	d104      	bne.n	7ff4 <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
    7fea:	462a      	mov	r2, r5
    7fec:	4620      	mov	r0, r4
    7fee:	f7ff ff80 	bl	7ef2 <idx_inc>
    7ff2:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
    7ff4:	68a3      	ldr	r3, [r4, #8]
    7ff6:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
    7ff8:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
    7ffa:	6923      	ldr	r3, [r4, #16]
    7ffc:	f043 0308 	orr.w	r3, r3, #8
    8000:	6123      	str	r3, [r4, #16]
    8002:	e7d4      	b.n	7fae <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
    8004:	4601      	mov	r1, r0
    8006:	4620      	mov	r0, r4
    8008:	9301      	str	r3, [sp, #4]
    800a:	f7ff ff80 	bl	7f0e <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    800e:	68e2      	ldr	r2, [r4, #12]
    8010:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
    8012:	f1b8 0f00 	cmp.w	r8, #0
    8016:	d004      	beq.n	8022 <CONFIG_PM_SRAM_SIZE+0x22>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
    8018:	6821      	ldr	r1, [r4, #0]
    801a:	69e2      	ldr	r2, [r4, #28]
    801c:	9b01      	ldr	r3, [sp, #4]
    801e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
    8022:	eb05 0208 	add.w	r2, r5, r8
    8026:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    802a:	6821      	ldr	r1, [r4, #0]
    802c:	4620      	mov	r0, r4
    802e:	f7ff ff60 	bl	7ef2 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
    8032:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    8034:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
    8036:	f043 0308 	orr.w	r3, r3, #8
    803a:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
    803c:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    8040:	f36f 0300 	bfc	r3, #0, #1
    8044:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
    8048:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
    804c:	e7af      	b.n	7fae <drop_item_locked+0x4e>

0000804e <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
    804e:	b570      	push	{r4, r5, r6, lr}
    8050:	4604      	mov	r4, r0
    8052:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
    8054:	f7ff ff4d 	bl	7ef2 <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
    8058:	6823      	ldr	r3, [r4, #0]
    805a:	4283      	cmp	r3, r0
    805c:	d105      	bne.n	806a <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
    805e:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
    8060:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
    8062:	f023 0308 	bic.w	r3, r3, #8
    8066:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
    8068:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    806a:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
    806c:	00ab      	lsls	r3, r5, #2
    806e:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    8072:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
    8076:	4620      	mov	r0, r4
    8078:	6861      	ldr	r1, [r4, #4]
    807a:	462a      	mov	r2, r5
    807c:	f7ff ff39 	bl	7ef2 <idx_inc>
    8080:	6060      	str	r0, [r4, #4]
    8082:	e7f1      	b.n	8068 <post_drop_action+0x1a>

00008084 <max_utilization_update>:
{
    8084:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    8086:	6903      	ldr	r3, [r0, #16]
    8088:	075b      	lsls	r3, r3, #29
{
    808a:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    808c:	d506      	bpl.n	809c <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    808e:	6a45      	ldr	r5, [r0, #36]	; 0x24
    8090:	f7ff ff1e 	bl	7ed0 <get_usage>
    8094:	4285      	cmp	r5, r0
    8096:	bf2c      	ite	cs
    8098:	6265      	strcs	r5, [r4, #36]	; 0x24
    809a:	6260      	strcc	r0, [r4, #36]	; 0x24
}
    809c:	bd38      	pop	{r3, r4, r5, pc}

0000809e <mpsc_pbuf_init>:
{
    809e:	b538      	push	{r3, r4, r5, lr}
    80a0:	460d      	mov	r5, r1
    80a2:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    80a4:	221c      	movs	r2, #28
    80a6:	2100      	movs	r1, #0
    80a8:	f000 fa38 	bl	851c <memset>
	buffer->get_wlen = cfg->get_wlen;
    80ac:	68eb      	ldr	r3, [r5, #12]
    80ae:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    80b0:	68ab      	ldr	r3, [r5, #8]
    80b2:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    80b4:	682b      	ldr	r3, [r5, #0]
    80b6:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    80b8:	686b      	ldr	r3, [r5, #4]
    80ba:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
    80bc:	2200      	movs	r2, #0
    80be:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    80c0:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
    80c2:	b123      	cbz	r3, 80ce <mpsc_pbuf_init+0x30>
    80c4:	1e59      	subs	r1, r3, #1
    80c6:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    80c8:	bf08      	it	eq
    80ca:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    80ce:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    80d0:	2201      	movs	r2, #1
    80d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
    80d6:	2100      	movs	r1, #0
}
    80d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    80dc:	f000 bdc7 	b.w	8c6e <z_impl_k_sem_init>

000080e0 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    80e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    80e4:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
    80e6:	2500      	movs	r5, #0
{
    80e8:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
    80ea:	6a03      	ldr	r3, [r0, #32]
	union mpsc_pbuf_generic *dropped_item = NULL;
    80ec:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
    80ee:	428b      	cmp	r3, r1
{
    80f0:	4604      	mov	r4, r0
    80f2:	460e      	mov	r6, r1
    80f4:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
    80f6:	9505      	str	r5, [sp, #20]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
    80f8:	46a9      	mov	r9, r5
	if (wlen > (buffer->size)) {
    80fa:	d33a      	bcc.n	8172 <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
    80fc:	f04f 0340 	mov.w	r3, #64	; 0x40
    8100:	f3ef 8b11 	mrs	fp, BASEPRI
    8104:	f383 8812 	msr	BASEPRI_MAX, r3
    8108:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
    810c:	9a05      	ldr	r2, [sp, #20]
    810e:	46d8      	mov	r8, fp
    8110:	b12a      	cbz	r2, 811e <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
    8112:	4629      	mov	r1, r5
    8114:	4620      	mov	r0, r4
    8116:	f7ff ff9a 	bl	804e <post_drop_action>
			tmp_wr_idx_shift = 0;
    811a:	2300      	movs	r3, #0
    811c:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
    811e:	a904      	add	r1, sp, #16
    8120:	4620      	mov	r0, r4
    8122:	f7ff fec2 	bl	7eaa <free_space>

		if (free_wlen >= wlen) {
    8126:	9904      	ldr	r1, [sp, #16]
    8128:	42b1      	cmp	r1, r6
		wrap = free_space(buffer, &free_wlen);
    812a:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
    812c:	d32a      	bcc.n	8184 <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    812e:	6822      	ldr	r2, [r4, #0]
			item =
    8130:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    8132:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    8136:	f021 0103 	bic.w	r1, r1, #3
    813a:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
    813e:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    8142:	6821      	ldr	r1, [r4, #0]
    8144:	4632      	mov	r2, r6
    8146:	4620      	mov	r0, r4
    8148:	f7ff fed3 	bl	7ef2 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    814c:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    814e:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    8150:	4298      	cmp	r0, r3
    8152:	d012      	beq.n	817a <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
    8154:	2700      	movs	r7, #0
	__asm__ volatile(
    8156:	f388 8811 	msr	BASEPRI, r8
    815a:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
    815e:	9903      	ldr	r1, [sp, #12]
    8160:	b129      	cbz	r1, 816e <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    8162:	6962      	ldr	r2, [r4, #20]
    8164:	b10a      	cbz	r2, 816a <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
    8166:	4620      	mov	r0, r4
    8168:	4790      	blx	r2
			}
			dropped_item = NULL;
    816a:	2300      	movs	r3, #0
    816c:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
    816e:	2f00      	cmp	r7, #0
    8170:	d1c4      	bne.n	80fc <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    8172:	4648      	mov	r0, r9
    8174:	b007      	add	sp, #28
    8176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
    817a:	6923      	ldr	r3, [r4, #16]
    817c:	f043 0308 	orr.w	r3, r3, #8
    8180:	6123      	str	r3, [r4, #16]
    8182:	e7e7      	b.n	8154 <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
    8184:	b118      	cbz	r0, 818e <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
    8186:	4620      	mov	r0, r4
    8188:	f7ff fecd 	bl	7f26 <add_skip_item>
			cont = true;
    818c:	e7e3      	b.n	8156 <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    818e:	9b00      	ldr	r3, [sp, #0]
    8190:	ea5a 0303 	orrs.w	r3, sl, r3
    8194:	d01a      	beq.n	81cc <mpsc_pbuf_alloc+0xec>
    8196:	9101      	str	r1, [sp, #4]
    8198:	f000 fd46 	bl	8c28 <k_is_in_isr>
    819c:	9901      	ldr	r1, [sp, #4]
    819e:	b9a8      	cbnz	r0, 81cc <mpsc_pbuf_alloc+0xec>
    81a0:	f38b 8811 	msr	BASEPRI, fp
    81a4:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    81a8:	9b00      	ldr	r3, [sp, #0]
    81aa:	4652      	mov	r2, sl
    81ac:	f104 0028 	add.w	r0, r4, #40	; 0x28
    81b0:	f7fe fd5c 	bl	6c6c <z_impl_k_sem_take>
	__asm__ volatile(
    81b4:	f04f 0340 	mov.w	r3, #64	; 0x40
    81b8:	f3ef 8811 	mrs	r8, BASEPRI
    81bc:	f383 8812 	msr	BASEPRI_MAX, r3
    81c0:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
    81c4:	fab0 f780 	clz	r7, r0
    81c8:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    81ca:	e7c4      	b.n	8156 <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
    81cc:	ab05      	add	r3, sp, #20
    81ce:	aa03      	add	r2, sp, #12
    81d0:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
    81d2:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
    81d4:	f7ff fec4 	bl	7f60 <drop_item_locked>
    81d8:	4607      	mov	r7, r0
    81da:	e7bc      	b.n	8156 <mpsc_pbuf_alloc+0x76>

000081dc <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    81dc:	b570      	push	{r4, r5, r6, lr}
    81de:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    81e0:	6983      	ldr	r3, [r0, #24]
    81e2:	4608      	mov	r0, r1
{
    81e4:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    81e6:	4798      	blx	r3
    81e8:	4602      	mov	r2, r0
    81ea:	f04f 0340 	mov.w	r3, #64	; 0x40
    81ee:	f3ef 8611 	mrs	r6, BASEPRI
    81f2:	f383 8812 	msr	BASEPRI_MAX, r3
    81f6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    81fa:	782b      	ldrb	r3, [r5, #0]
    81fc:	f043 0301 	orr.w	r3, r3, #1
    8200:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    8202:	6861      	ldr	r1, [r4, #4]
    8204:	4620      	mov	r0, r4
    8206:	f7ff fe74 	bl	7ef2 <idx_inc>
    820a:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    820c:	4620      	mov	r0, r4
    820e:	f7ff ff39 	bl	8084 <max_utilization_update>
	__asm__ volatile(
    8212:	f386 8811 	msr	BASEPRI, r6
    8216:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
    821a:	bd70      	pop	{r4, r5, r6, pc}

0000821c <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    821c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    821e:	4604      	mov	r4, r0
	__asm__ volatile(
    8220:	f04f 0340 	mov.w	r3, #64	; 0x40
    8224:	f3ef 8611 	mrs	r6, BASEPRI
    8228:	f383 8812 	msr	BASEPRI_MAX, r3
    822c:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    8230:	6923      	ldr	r3, [r4, #16]
    8232:	f013 0f08 	tst.w	r3, #8
    8236:	68a3      	ldr	r3, [r4, #8]
    8238:	d102      	bne.n	8240 <mpsc_pbuf_claim+0x24>
    823a:	6862      	ldr	r2, [r4, #4]
    823c:	4293      	cmp	r3, r2
    823e:	d900      	bls.n	8242 <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
    8240:	6a22      	ldr	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
    8242:	69e1      	ldr	r1, [r4, #28]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    8244:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
    8246:	b92a      	cbnz	r2, 8254 <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
    8248:	f386 8811 	msr	BASEPRI, r6
    824c:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
    8250:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
    8252:	e033      	b.n	82bc <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
    8254:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
    8258:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
    825c:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
    8260:	d0f2      	beq.n	8248 <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
    8262:	2802      	cmp	r0, #2
    8264:	d103      	bne.n	826e <mpsc_pbuf_claim+0x52>
		return item->skip.len;
    8266:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
    826a:	08ad      	lsrs	r5, r5, #2
    826c:	d105      	bne.n	827a <mpsc_pbuf_claim+0x5e>
    826e:	07d0      	lsls	r0, r2, #31
    8270:	d412      	bmi.n	8298 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
    8272:	69a3      	ldr	r3, [r4, #24]
    8274:	4638      	mov	r0, r7
    8276:	4798      	blx	r3
    8278:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    827a:	68a1      	ldr	r1, [r4, #8]
    827c:	462a      	mov	r2, r5
    827e:	4620      	mov	r0, r4
    8280:	f7ff fe37 	bl	7ef2 <idx_inc>
				rd_idx_inc(buffer, inc);
    8284:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
    8286:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
    8288:	4620      	mov	r0, r4
    828a:	f7ff fe40 	bl	7f0e <rd_idx_inc>
    828e:	f386 8811 	msr	BASEPRI, r6
    8292:	f3bf 8f6f 	isb	sy
	} while (cont);
    8296:	e7c3      	b.n	8220 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
    8298:	f042 0202 	orr.w	r2, r2, #2
    829c:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
    82a0:	4638      	mov	r0, r7
    82a2:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
    82a4:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
    82a6:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
    82a8:	4629      	mov	r1, r5
						buffer->get_wlen(item));
    82aa:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
    82ac:	4620      	mov	r0, r4
    82ae:	f7ff fe20 	bl	7ef2 <idx_inc>
				buffer->tmp_rd_idx =
    82b2:	60a0      	str	r0, [r4, #8]
    82b4:	f386 8811 	msr	BASEPRI, r6
    82b8:	f3bf 8f6f 	isb	sy
}
    82bc:	4638      	mov	r0, r7
    82be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000082c0 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    82c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    82c2:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    82c4:	6983      	ldr	r3, [r0, #24]
    82c6:	4608      	mov	r0, r1
{
    82c8:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    82ca:	4798      	blx	r3
    82cc:	4606      	mov	r6, r0
	__asm__ volatile(
    82ce:	f04f 0340 	mov.w	r3, #64	; 0x40
    82d2:	f3ef 8711 	mrs	r7, BASEPRI
    82d6:	f383 8812 	msr	BASEPRI_MAX, r3
    82da:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    82de:	782b      	ldrb	r3, [r5, #0]
    82e0:	f36f 0300 	bfc	r3, #0, #1
    82e4:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    82e6:	6923      	ldr	r3, [r4, #16]
    82e8:	079b      	lsls	r3, r3, #30
    82ea:	d505      	bpl.n	82f8 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    82ec:	68e2      	ldr	r2, [r4, #12]
    82ee:	69e3      	ldr	r3, [r4, #28]
    82f0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    82f4:	429d      	cmp	r5, r3
    82f6:	d11a      	bne.n	832e <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
    82f8:	782b      	ldrb	r3, [r5, #0]
    82fa:	f36f 0341 	bfc	r3, #1, #1
    82fe:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    8300:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    8304:	4299      	cmp	r1, r3
    8306:	d104      	bne.n	8312 <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
    8308:	4632      	mov	r2, r6
    830a:	4620      	mov	r0, r4
    830c:	f7ff fdf1 	bl	7ef2 <idx_inc>
    8310:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
    8312:	4631      	mov	r1, r6
    8314:	4620      	mov	r0, r4
    8316:	f7ff fdfa 	bl	7f0e <rd_idx_inc>
	__asm__ volatile(
    831a:	f387 8811 	msr	BASEPRI, r7
    831e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    8322:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    8326:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    832a:	f7fe bc79 	b.w	6c20 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    832e:	682b      	ldr	r3, [r5, #0]
    8330:	f360 039f 	bfi	r3, r0, #2, #30
    8334:	602b      	str	r3, [r5, #0]
    8336:	e7f0      	b.n	831a <mpsc_pbuf_free+0x5a>

00008338 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    8338:	6902      	ldr	r2, [r0, #16]
    833a:	6883      	ldr	r3, [r0, #8]
    833c:	0712      	lsls	r2, r2, #28
    833e:	d402      	bmi.n	8346 <mpsc_pbuf_is_pending+0xe>
    8340:	6842      	ldr	r2, [r0, #4]
    8342:	429a      	cmp	r2, r3
    8344:	d200      	bcs.n	8348 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
    8346:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    8348:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    834a:	1e18      	subs	r0, r3, #0
    834c:	bf18      	it	ne
    834e:	2001      	movne	r0, #1
    8350:	4770      	bx	lr

00008352 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    8352:	4770      	bx	lr

00008354 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
    8354:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    8356:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    8358:	bf5f      	itttt	pl
    835a:	6803      	ldrpl	r3, [r0, #0]
    835c:	8842      	ldrhpl	r2, [r0, #2]
    835e:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
    8362:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
    8366:	bf5d      	ittte	pl
    8368:	3017      	addpl	r0, #23
    836a:	f020 0007 	bicpl.w	r0, r0, #7
    836e:	0880      	lsrpl	r0, r0, #2
	return 0;
    8370:	2000      	movmi	r0, #0
}
    8372:	4770      	bx	lr

00008374 <dummy_timestamp>:
}
    8374:	2000      	movs	r0, #0
    8376:	4770      	bx	lr

00008378 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    8378:	f000 bb02 	b.w	8980 <sys_clock_cycle_get_32>

0000837c <atomic_inc>:
{
    837c:	4603      	mov	r3, r0
}
    837e:	f3bf 8f5b 	dmb	ish
    8382:	e853 0f00 	ldrex	r0, [r3]
    8386:	1c42      	adds	r2, r0, #1
    8388:	e843 2100 	strex	r1, r2, [r3]
    838c:	2900      	cmp	r1, #0
    838e:	d1f8      	bne.n	8382 <atomic_inc+0x6>
    8390:	f3bf 8f5b 	dmb	ish
    8394:	4770      	bx	lr

00008396 <z_log_vprintk>:
{
    8396:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    8398:	2300      	movs	r3, #0
    839a:	e9cd 0102 	strd	r0, r1, [sp, #8]
    839e:	e9cd 3300 	strd	r3, r3, [sp]
    83a2:	461a      	mov	r2, r3
    83a4:	4619      	mov	r1, r3
    83a6:	4618      	mov	r0, r3
    83a8:	f7f9 feb2 	bl	2110 <z_impl_z_log_msg_runtime_vcreate>
}
    83ac:	b005      	add	sp, #20
    83ae:	f85d fb04 	ldr.w	pc, [sp], #4

000083b2 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
    83b2:	2001      	movs	r0, #1
    83b4:	f7f9 bc64 	b.w	1c80 <z_log_dropped>

000083b8 <z_log_get_tag>:
}
    83b8:	2000      	movs	r0, #0
    83ba:	4770      	bx	lr

000083bc <z_cbprintf_cpy>:
{
    83bc:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
    83be:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
    83c2:	1b9b      	subs	r3, r3, r6
    83c4:	428b      	cmp	r3, r1
{
    83c6:	460c      	mov	r4, r1
    83c8:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
    83ca:	d30a      	bcc.n	83e2 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
    83cc:	6813      	ldr	r3, [r2, #0]
    83ce:	460a      	mov	r2, r1
    83d0:	4601      	mov	r1, r0
    83d2:	1998      	adds	r0, r3, r6
    83d4:	f000 f897 	bl	8506 <memcpy>
	desc->off += len;
    83d8:	68ab      	ldr	r3, [r5, #8]
    83da:	4423      	add	r3, r4
    83dc:	60ab      	str	r3, [r5, #8]
	return len;
    83de:	4620      	mov	r0, r4
}
    83e0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    83e2:	f06f 001b 	mvn.w	r0, #27
    83e6:	e7fb      	b.n	83e0 <z_cbprintf_cpy+0x24>

000083e8 <z_log_msg_finalize>:
{
    83e8:	b570      	push	{r4, r5, r6, lr}
    83ea:	460e      	mov	r6, r1
    83ec:	4615      	mov	r5, r2
    83ee:	4619      	mov	r1, r3
	if (!msg) {
    83f0:	4604      	mov	r4, r0
    83f2:	b918      	cbnz	r0, 83fc <z_log_msg_finalize+0x14>
}
    83f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    83f8:	f7f9 bc42 	b.w	1c80 <z_log_dropped>
	if (data) {
    83fc:	b133      	cbz	r3, 840c <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
    83fe:	f3c2 234a 	ubfx	r3, r2, #9, #11
    8402:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    8404:	0d12      	lsrs	r2, r2, #20
    8406:	4418      	add	r0, r3
    8408:	f000 f87d 	bl	8506 <memcpy>
	msg->hdr.source = source;
    840c:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    8410:	4620      	mov	r0, r4
}
    8412:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    8416:	f7f9 bdc3 	b.w	1fa0 <z_log_msg_commit>

0000841a <buffer_write>:
{
    841a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    841c:	4606      	mov	r6, r0
    841e:	460d      	mov	r5, r1
    8420:	4614      	mov	r4, r2
    8422:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    8424:	4621      	mov	r1, r4
    8426:	4628      	mov	r0, r5
    8428:	463a      	mov	r2, r7
    842a:	47b0      	blx	r6
	} while (len != 0);
    842c:	1a24      	subs	r4, r4, r0
		buf += processed;
    842e:	4405      	add	r5, r0
	} while (len != 0);
    8430:	d1f8      	bne.n	8424 <buffer_write+0xa>
}
    8432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008434 <cbvprintf>:
{
    8434:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    8436:	2400      	movs	r4, #0
    8438:	9400      	str	r4, [sp, #0]
    843a:	f7f8 ff9b 	bl	1374 <z_cbvprintf_impl>
}
    843e:	b002      	add	sp, #8
    8440:	bd10      	pop	{r4, pc}

00008442 <log_output_flush>:
{
    8442:	b510      	push	{r4, lr}
		     output->control_block->offset,
    8444:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    8446:	6881      	ldr	r1, [r0, #8]
{
    8448:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    844a:	e9d2 2300 	ldrd	r2, r3, [r2]
    844e:	6800      	ldr	r0, [r0, #0]
    8450:	f7ff ffe3 	bl	841a <buffer_write>
	output->control_block->offset = 0;
    8454:	6863      	ldr	r3, [r4, #4]
    8456:	2200      	movs	r2, #0
    8458:	601a      	str	r2, [r3, #0]
}
    845a:	bd10      	pop	{r4, pc}

0000845c <out_func>:
{
    845c:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    845e:	684b      	ldr	r3, [r1, #4]
    8460:	681a      	ldr	r2, [r3, #0]
    8462:	68cb      	ldr	r3, [r1, #12]
    8464:	429a      	cmp	r2, r3
{
    8466:	4605      	mov	r5, r0
    8468:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    846a:	d102      	bne.n	8472 <out_func+0x16>
		log_output_flush(out_ctx);
    846c:	4608      	mov	r0, r1
    846e:	f7ff ffe8 	bl	8442 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    8472:	6863      	ldr	r3, [r4, #4]
    8474:	f3bf 8f5b 	dmb	ish
    8478:	e853 2f00 	ldrex	r2, [r3]
    847c:	1c51      	adds	r1, r2, #1
    847e:	e843 1000 	strex	r0, r1, [r3]
    8482:	2800      	cmp	r0, #0
    8484:	d1f8      	bne.n	8478 <out_func+0x1c>
    8486:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    848a:	68a3      	ldr	r3, [r4, #8]
    848c:	549d      	strb	r5, [r3, r2]
}
    848e:	2000      	movs	r0, #0
    8490:	bd38      	pop	{r3, r4, r5, pc}

00008492 <cr_out_func>:
	if (c == '\n') {
    8492:	280a      	cmp	r0, #10
{
    8494:	b538      	push	{r3, r4, r5, lr}
    8496:	4604      	mov	r4, r0
    8498:	460d      	mov	r5, r1
	if (c == '\n') {
    849a:	d102      	bne.n	84a2 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
    849c:	200d      	movs	r0, #13
    849e:	f7ff ffdd 	bl	845c <out_func>
	out_func(c, ctx);
    84a2:	4629      	mov	r1, r5
    84a4:	4620      	mov	r0, r4
    84a6:	f7ff ffd9 	bl	845c <out_func>
}
    84aa:	2000      	movs	r0, #0
    84ac:	bd38      	pop	{r3, r4, r5, pc}

000084ae <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    84ae:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    84b0:	6800      	ldr	r0, [r0, #0]
    84b2:	f7fa ba39 	b.w	2928 <z_arm_fatal_error>

000084b6 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    84b6:	2100      	movs	r1, #0
    84b8:	2001      	movs	r0, #1
    84ba:	f7fa ba35 	b.w	2928 <z_arm_fatal_error>

000084be <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    84be:	b508      	push	{r3, lr}
	handler();
    84c0:	f7fa faf0 	bl	2aa4 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    84c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    84c8:	f7fa bbc2 	b.w	2c50 <z_arm_exc_exit>

000084cc <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
    84cc:	2300      	movs	r3, #0
    84ce:	f7f9 bd9b 	b.w	2008 <z_impl_z_log_msg_static_create>

000084d2 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    84d2:	3901      	subs	r1, #1
    84d4:	4603      	mov	r3, r0
    84d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    84da:	b90a      	cbnz	r2, 84e0 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    84dc:	701a      	strb	r2, [r3, #0]

	return dest;
}
    84de:	4770      	bx	lr
		*d = *s;
    84e0:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    84e4:	e7f7      	b.n	84d6 <strcpy+0x4>

000084e6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    84e6:	4603      	mov	r3, r0
	size_t n = 0;
    84e8:	2000      	movs	r0, #0

	while (*s != '\0') {
    84ea:	5c1a      	ldrb	r2, [r3, r0]
    84ec:	b902      	cbnz	r2, 84f0 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    84ee:	4770      	bx	lr
		n++;
    84f0:	3001      	adds	r0, #1
    84f2:	e7fa      	b.n	84ea <strlen+0x4>

000084f4 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    84f4:	4603      	mov	r3, r0
	size_t n = 0;
    84f6:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    84f8:	5c1a      	ldrb	r2, [r3, r0]
    84fa:	b10a      	cbz	r2, 8500 <strnlen+0xc>
    84fc:	4288      	cmp	r0, r1
    84fe:	d100      	bne.n	8502 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    8500:	4770      	bx	lr
		n++;
    8502:	3001      	adds	r0, #1
    8504:	e7f8      	b.n	84f8 <strnlen+0x4>

00008506 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    8506:	b510      	push	{r4, lr}
    8508:	1e43      	subs	r3, r0, #1
    850a:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    850c:	4291      	cmp	r1, r2
    850e:	d100      	bne.n	8512 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    8510:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    8512:	f811 4b01 	ldrb.w	r4, [r1], #1
    8516:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    851a:	e7f7      	b.n	850c <memcpy+0x6>

0000851c <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    851c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    851e:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    8520:	4603      	mov	r3, r0
	while (n > 0) {
    8522:	4293      	cmp	r3, r2
    8524:	d100      	bne.n	8528 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    8526:	4770      	bx	lr
		*(d_byte++) = c_byte;
    8528:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    852c:	e7f9      	b.n	8522 <memset+0x6>

0000852e <_stdout_hook_default>:
}
    852e:	f04f 30ff 	mov.w	r0, #4294967295
    8532:	4770      	bx	lr

00008534 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    8534:	f04f 0240 	mov.w	r2, #64	; 0x40
    8538:	f3ef 8311 	mrs	r3, BASEPRI
    853c:	f382 8812 	msr	BASEPRI_MAX, r2
    8540:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    8544:	f383 8811 	msr	BASEPRI, r3
    8548:	f3bf 8f6f 	isb	sy
}
    854c:	2000      	movs	r0, #0
    854e:	4770      	bx	lr

00008550 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    8550:	2806      	cmp	r0, #6
    8552:	d108      	bne.n	8566 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    8554:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8558:	2201      	movs	r2, #1
    855a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    855e:	f3bf 8f4f 	dsb	sy
        __WFE();
    8562:	bf20      	wfe
    while (true)
    8564:	e7fd      	b.n	8562 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    8566:	4770      	bx	lr

00008568 <pm_state_exit_post_ops>:
    8568:	2300      	movs	r3, #0
    856a:	f383 8811 	msr	BASEPRI, r3
    856e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    8572:	4770      	bx	lr

00008574 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    8574:	6903      	ldr	r3, [r0, #16]
    8576:	b2c9      	uxtb	r1, r1
    8578:	220c      	movs	r2, #12
    857a:	fb01 3302 	mla	r3, r1, r2, r3
    857e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    8580:	f000 0007 	and.w	r0, r0, #7
    8584:	4770      	bx	lr

00008586 <set_on_state>:
	__asm__ volatile(
    8586:	f04f 0340 	mov.w	r3, #64	; 0x40
    858a:	f3ef 8211 	mrs	r2, BASEPRI
    858e:	f383 8812 	msr	BASEPRI_MAX, r3
    8592:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    8596:	6803      	ldr	r3, [r0, #0]
    8598:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    859c:	f043 0302 	orr.w	r3, r3, #2
    85a0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    85a2:	f382 8811 	msr	BASEPRI, r2
    85a6:	f3bf 8f6f 	isb	sy
}
    85aa:	4770      	bx	lr

000085ac <stop>:
{
    85ac:	b570      	push	{r4, r5, r6, lr}
    85ae:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    85b0:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    85b2:	f04f 0440 	mov.w	r4, #64	; 0x40
    85b6:	f3ef 8511 	mrs	r5, BASEPRI
    85ba:	f384 8812 	msr	BASEPRI_MAX, r4
    85be:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    85c2:	260c      	movs	r6, #12
    85c4:	fb06 3401 	mla	r4, r6, r1, r3
    85c8:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    85ca:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    85ce:	d008      	beq.n	85e2 <stop+0x36>
    85d0:	42a2      	cmp	r2, r4
    85d2:	d006      	beq.n	85e2 <stop+0x36>
	__asm__ volatile(
    85d4:	f385 8811 	msr	BASEPRI, r5
    85d8:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    85dc:	f04f 30ff 	mov.w	r0, #4294967295
}
    85e0:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    85e2:	4371      	muls	r1, r6
    85e4:	440b      	add	r3, r1
    85e6:	2201      	movs	r2, #1
    85e8:	641a      	str	r2, [r3, #64]	; 0x40
    85ea:	f385 8811 	msr	BASEPRI, r5
    85ee:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    85f2:	6843      	ldr	r3, [r0, #4]
    85f4:	440b      	add	r3, r1
    85f6:	685b      	ldr	r3, [r3, #4]
    85f8:	4798      	blx	r3
	return 0;
    85fa:	2000      	movs	r0, #0
    85fc:	e7f0      	b.n	85e0 <stop+0x34>

000085fe <api_stop>:
	return stop(dev, subsys, CTX_API);
    85fe:	2280      	movs	r2, #128	; 0x80
    8600:	f7ff bfd4 	b.w	85ac <stop>

00008604 <async_start>:
{
    8604:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8606:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    8608:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    860a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    860c:	f04f 0540 	mov.w	r5, #64	; 0x40
    8610:	f3ef 8611 	mrs	r6, BASEPRI
    8614:	f385 8812 	msr	BASEPRI_MAX, r5
    8618:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    861c:	250c      	movs	r5, #12
    861e:	4369      	muls	r1, r5
    8620:	440c      	add	r4, r1
    8622:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    8624:	f005 0c07 	and.w	ip, r5, #7
    8628:	f1bc 0f01 	cmp.w	ip, #1
    862c:	d10b      	bne.n	8646 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    862e:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    8630:	f386 8811 	msr	BASEPRI, r6
    8634:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    8638:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    863c:	6843      	ldr	r3, [r0, #4]
    863e:	585b      	ldr	r3, [r3, r1]
    8640:	4798      	blx	r3
	return 0;
    8642:	2000      	movs	r0, #0
}
    8644:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    8646:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    864a:	42af      	cmp	r7, r5
    864c:	f386 8811 	msr	BASEPRI, r6
    8650:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    8654:	bf0c      	ite	eq
    8656:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    865a:	f04f 30ff 	movne.w	r0, #4294967295
    865e:	e7f1      	b.n	8644 <async_start+0x40>

00008660 <api_start>:
{
    8660:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    8662:	2480      	movs	r4, #128	; 0x80
    8664:	9400      	str	r4, [sp, #0]
    8666:	f7ff ffcd 	bl	8604 <async_start>
}
    866a:	b002      	add	sp, #8
    866c:	bd10      	pop	{r4, pc}

0000866e <onoff_started_callback>:
{
    866e:	b410      	push	{r4}
	return &data->mgr[type];
    8670:	6900      	ldr	r0, [r0, #16]
    8672:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    8674:	241c      	movs	r4, #28
    8676:	fb03 0004 	mla	r0, r3, r4, r0
    867a:	2100      	movs	r1, #0
}
    867c:	bc10      	pop	{r4}
	notify(mgr, 0);
    867e:	4710      	bx	r2

00008680 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    8680:	2000      	movs	r0, #0
    8682:	f000 b9ff 	b.w	8a84 <nrfx_clock_start>

00008686 <blocking_start_callback>:
{
    8686:	4610      	mov	r0, r2
    8688:	f7fe baca 	b.w	6c20 <z_impl_k_sem_give>

0000868c <lfclk_stop>:
{
    868c:	b508      	push	{r3, lr}
		z_nrf_clock_calibration_lfclk_stopped();
    868e:	f7fb f981 	bl	3994 <z_nrf_clock_calibration_lfclk_stopped>
}
    8692:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    8696:	2000      	movs	r0, #0
    8698:	f000 ba2c 	b.w	8af4 <nrfx_clock_stop>

0000869c <timeout_handler>:
	start_cal_process();
    869c:	f7fb b8ca 	b.w	3834 <start_cal_process>

000086a0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    86a0:	6843      	ldr	r3, [r0, #4]
    86a2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    86a4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    86a8:	600b      	str	r3, [r1, #0]
}
    86aa:	2000      	movs	r0, #0
    86ac:	4770      	bx	lr

000086ae <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    86ae:	6843      	ldr	r3, [r0, #4]
    86b0:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    86b2:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    86b6:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    86ba:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    86be:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    86c2:	2000      	movs	r0, #0
    86c4:	4770      	bx	lr

000086c6 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    86c6:	6843      	ldr	r3, [r0, #4]
    86c8:	685b      	ldr	r3, [r3, #4]
}
    86ca:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    86cc:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    86d0:	4770      	bx	lr

000086d2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    86d2:	6843      	ldr	r3, [r0, #4]
    86d4:	685b      	ldr	r3, [r3, #4]
}
    86d6:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    86d8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    86dc:	4770      	bx	lr

000086de <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    86de:	6843      	ldr	r3, [r0, #4]
    86e0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    86e2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    86e6:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    86ea:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    86ec:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    86f0:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    86f4:	2000      	movs	r0, #0
    86f6:	4770      	bx	lr

000086f8 <gpio_nrfx_manage_callback>:
{
    86f8:	b510      	push	{r4, lr}
	return port->data;
    86fa:	6903      	ldr	r3, [r0, #16]
	return list->head;
    86fc:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    86fe:	b1f8      	cbz	r0, 8740 <gpio_nrfx_manage_callback+0x48>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8700:	4288      	cmp	r0, r1
    8702:	d119      	bne.n	8738 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    8704:	689c      	ldr	r4, [r3, #8]
	return node->next;
    8706:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    8708:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    870a:	42a1      	cmp	r1, r4
    870c:	d100      	bne.n	8710 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    870e:	6098      	str	r0, [r3, #8]
	parent->next = child;
    8710:	2000      	movs	r0, #0
    8712:	6008      	str	r0, [r1, #0]
	if (set) {
    8714:	b12a      	cbz	r2, 8722 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    8716:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    8718:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    871a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    871c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    871e:	b902      	cbnz	r2, 8722 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    8720:	6099      	str	r1, [r3, #8]
	return 0;
    8722:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    8724:	e010      	b.n	8748 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    8726:	4281      	cmp	r1, r0
    8728:	d106      	bne.n	8738 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    872a:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    872c:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    872e:	6898      	ldr	r0, [r3, #8]
    8730:	4281      	cmp	r1, r0
    8732:	d1ed      	bne.n	8710 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    8734:	609c      	str	r4, [r3, #8]
}
    8736:	e7eb      	b.n	8710 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    8738:	4604      	mov	r4, r0
    873a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    873c:	2800      	cmp	r0, #0
    873e:	d1f2      	bne.n	8726 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    8740:	2a00      	cmp	r2, #0
    8742:	d1e8      	bne.n	8716 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    8744:	f06f 0015 	mvn.w	r0, #21
}
    8748:	bd10      	pop	{r4, pc}

0000874a <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    874a:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    874c:	6843      	ldr	r3, [r0, #4]
    874e:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    8750:	7a05      	ldrb	r5, [r0, #8]
    8752:	6844      	ldr	r4, [r0, #4]
    8754:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    8758:	42a3      	cmp	r3, r4
    875a:	d302      	bcc.n	8762 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    875c:	f06f 0001 	mvn.w	r0, #1
}
    8760:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    8762:	795c      	ldrb	r4, [r3, #5]
    8764:	428c      	cmp	r4, r1
    8766:	d001      	beq.n	876c <pinctrl_lookup_state+0x22>
		(*state)++;
    8768:	3308      	adds	r3, #8
    876a:	e7f0      	b.n	874e <pinctrl_lookup_state+0x4>
			return 0;
    876c:	2000      	movs	r0, #0
    876e:	e7f7      	b.n	8760 <pinctrl_lookup_state+0x16>

00008770 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    8770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8774:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    8778:	2701      	movs	r7, #1
    p_reg->OUTCLR = clr_mask;
    877a:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    877e:	4281      	cmp	r1, r0
    8780:	d102      	bne.n	8788 <pinctrl_configure_pins+0x18>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    8782:	2000      	movs	r0, #0
}
    8784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    8788:	6805      	ldr	r5, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    878a:	f005 047f 	and.w	r4, r5, #127	; 0x7f
			pin = 0xFFFFFFFFU;
    878e:	2c7f      	cmp	r4, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    8790:	f3c5 2343 	ubfx	r3, r5, #9, #4
		switch (NRF_GET_FUN(pins[i])) {
    8794:	ea4f 4515 	mov.w	r5, r5, lsr #16
			pin = 0xFFFFFFFFU;
    8798:	bf08      	it	eq
    879a:	f04f 34ff 	moveq.w	r4, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    879e:	2d05      	cmp	r5, #5
    87a0:	d00f      	beq.n	87c2 <pinctrl_configure_pins+0x52>
    87a2:	2d06      	cmp	r5, #6
    87a4:	d011      	beq.n	87ca <pinctrl_configure_pins+0x5a>
    87a6:	2d04      	cmp	r5, #4
    87a8:	d12f      	bne.n	880a <pinctrl_configure_pins+0x9a>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    87aa:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    87ae:	2500      	movs	r5, #0
    *p_pin = pin_number & 0x1F;
    87b0:	f004 0c1f 	and.w	ip, r4, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    87b4:	fa07 fc0c 	lsl.w	ip, r7, ip
    p_reg->OUTCLR = clr_mask;
    87b8:	f8c6 c50c 	str.w	ip, [r6, #1292]	; 0x50c
}
    87bc:	f04f 0c01 	mov.w	ip, #1
    87c0:	e007      	b.n	87d2 <pinctrl_configure_pins+0x62>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    87c2:	f8c2 450c 	str.w	r4, [r2, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    87c6:	2501      	movs	r5, #1
    87c8:	e7f2      	b.n	87b0 <pinctrl_configure_pins+0x40>
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    87ca:	2500      	movs	r5, #0
			NRF_PSEL_SPIM(reg, MISO) = pin;
    87cc:	f8c2 4510 	str.w	r4, [r2, #1296]	; 0x510
			dir = NRF_GPIO_PIN_DIR_INPUT;
    87d0:	46ac      	mov	ip, r5
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    87d2:	f850 eb04 	ldr.w	lr, [r0], #4
    87d6:	f40e 5800 	and.w	r8, lr, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    87da:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    87de:	f3ce 1ec1 	ubfx	lr, lr, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    87e2:	ea4f 2303 	mov.w	r3, r3, lsl #8
    87e6:	bf18      	it	ne
    87e8:	f04f 0c00 	movne.w	ip, #0
    *p_pin = pin_number & 0x1F;
    87ec:	f004 041f 	and.w	r4, r4, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    87f0:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    87f4:	bf18      	it	ne
    87f6:	2501      	movne	r5, #1
    87f8:	ea43 030c 	orr.w	r3, r3, ip
    reg->PIN_CNF[pin_number] = cnf;
    87fc:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    8800:	ea43 0345 	orr.w	r3, r3, r5, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    8804:	f846 3024 	str.w	r3, [r6, r4, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    8808:	e7b9      	b.n	877e <pinctrl_configure_pins+0xe>
		switch (NRF_GET_FUN(pins[i])) {
    880a:	f06f 0085 	mvn.w	r0, #133	; 0x85
    880e:	e7b9      	b.n	8784 <pinctrl_configure_pins+0x14>

00008810 <irq_connect0>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(SPIM(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_SPI_0_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(0);
    8810:	2200      	movs	r2, #0
    8812:	2101      	movs	r1, #1
    8814:	2003      	movs	r0, #3
    8816:	f7fa b91d 	b.w	2a54 <z_arm_irq_priority_set>

0000881a <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    881a:	b510      	push	{r4, lr}
	while (*count) {
    881c:	680b      	ldr	r3, [r1, #0]
    881e:	b913      	cbnz	r3, 8826 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
    8820:	6013      	str	r3, [r2, #0]
	return NULL;
    8822:	4618      	mov	r0, r3
    8824:	e005      	b.n	8832 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
    8826:	6803      	ldr	r3, [r0, #0]
    8828:	685c      	ldr	r4, [r3, #4]
    882a:	b11c      	cbz	r4, 8834 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
    882c:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
    882e:	6803      	ldr	r3, [r0, #0]
    8830:	6818      	ldr	r0, [r3, #0]
}
    8832:	bd10      	pop	{r4, pc}
		++(*current);
    8834:	3308      	adds	r3, #8
    8836:	6003      	str	r3, [r0, #0]
		--(*count);
    8838:	680b      	ldr	r3, [r1, #0]
    883a:	3b01      	subs	r3, #1
    883c:	600b      	str	r3, [r1, #0]
    883e:	e7ed      	b.n	881c <spi_context_get_next_buf.constprop.0+0x2>

00008840 <z_log_msg_static_create.constprop.0>:
    8840:	2300      	movs	r3, #0
    8842:	f7f9 bbe1 	b.w	2008 <z_impl_z_log_msg_static_create>

00008846 <gpio_pin_set_dt.isra.0>:
 *
 * @param spec GPIO specification from devicetree
 * @param value Value assigned to the pin.
 * @return a value from gpio_pin_set()
 */
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    8846:	4603      	mov	r3, r0
    8848:	460a      	mov	r2, r1
{
	return gpio_pin_set(spec->port, spec->pin, value);
    884a:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    884c:	7919      	ldrb	r1, [r3, #4]
    884e:	2301      	movs	r3, #1
    8850:	fa03 f101 	lsl.w	r1, r3, r1
    8854:	6903      	ldr	r3, [r0, #16]
    8856:	681b      	ldr	r3, [r3, #0]
    8858:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    885a:	bf18      	it	ne
    885c:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    8860:	b112      	cbz	r2, 8868 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    8862:	6883      	ldr	r3, [r0, #8]
    8864:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    8866:	4718      	bx	r3
    8868:	6883      	ldr	r3, [r0, #8]
    886a:	691b      	ldr	r3, [r3, #16]
    886c:	e7fb      	b.n	8866 <gpio_pin_set_dt.isra.0+0x20>

0000886e <_spi_context_cs_control>:
{
    886e:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    8870:	6803      	ldr	r3, [r0, #0]
{
    8872:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    8874:	b1e3      	cbz	r3, 88b0 <_spi_context_cs_control+0x42>
    8876:	6898      	ldr	r0, [r3, #8]
    8878:	b1d0      	cbz	r0, 88b0 <_spi_context_cs_control+0x42>
    887a:	6805      	ldr	r5, [r0, #0]
    887c:	b1c5      	cbz	r5, 88b0 <_spi_context_cs_control+0x42>
		if (on) {
    887e:	b149      	cbz	r1, 8894 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    8880:	2101      	movs	r1, #1
    8882:	f7ff ffe0 	bl	8846 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    8886:	6823      	ldr	r3, [r4, #0]
    8888:	689b      	ldr	r3, [r3, #8]
    888a:	6898      	ldr	r0, [r3, #8]
}
    888c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    8890:	f000 bb66 	b.w	8f60 <z_impl_k_busy_wait>
			if (!force_off &&
    8894:	b912      	cbnz	r2, 889c <_spi_context_cs_control+0x2e>
    8896:	889b      	ldrh	r3, [r3, #4]
    8898:	04db      	lsls	r3, r3, #19
    889a:	d409      	bmi.n	88b0 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
    889c:	6880      	ldr	r0, [r0, #8]
    889e:	f000 fb5f 	bl	8f60 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    88a2:	6823      	ldr	r3, [r4, #0]
    88a4:	2100      	movs	r1, #0
    88a6:	6898      	ldr	r0, [r3, #8]
}
    88a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    88ac:	f7ff bfcb 	b.w	8846 <gpio_pin_set_dt.isra.0>
}
    88b0:	bd38      	pop	{r3, r4, r5, pc}

000088b2 <spi_context_unlock_unconditionally>:
{
    88b2:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    88b4:	2201      	movs	r2, #1
    88b6:	2100      	movs	r1, #0
{
    88b8:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    88ba:	f7ff ffd8 	bl	886e <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    88be:	69a3      	ldr	r3, [r4, #24]
    88c0:	b933      	cbnz	r3, 88d0 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    88c2:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    88c4:	f104 0010 	add.w	r0, r4, #16
}
    88c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    88cc:	f7fe b9a8 	b.w	6c20 <z_impl_k_sem_give>
    88d0:	bd10      	pop	{r4, pc}

000088d2 <spi_nrfx_release>:
{
    88d2:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    88d4:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    88d6:	6803      	ldr	r3, [r0, #0]
    88d8:	428b      	cmp	r3, r1
    88da:	d106      	bne.n	88ea <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    88dc:	f890 4078 	ldrb.w	r4, [r0, #120]	; 0x78
    88e0:	b934      	cbnz	r4, 88f0 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    88e2:	f7ff ffe6 	bl	88b2 <spi_context_unlock_unconditionally>
	return 0;
    88e6:	4620      	mov	r0, r4
}
    88e8:	bd10      	pop	{r4, pc}
		return -EINVAL;
    88ea:	f06f 0015 	mvn.w	r0, #21
    88ee:	e7fb      	b.n	88e8 <spi_nrfx_release+0x16>
		return -EBUSY;
    88f0:	f06f 000f 	mvn.w	r0, #15
    88f4:	e7f8      	b.n	88e8 <spi_nrfx_release+0x16>

000088f6 <finish_transaction>:
{
    88f6:	b570      	push	{r4, r5, r6, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    88f8:	6904      	ldr	r4, [r0, #16]
	_spi_context_cs_control(ctx, on, false);
    88fa:	2200      	movs	r2, #0
{
    88fc:	4605      	mov	r5, r0
    88fe:	460e      	mov	r6, r1
    8900:	4620      	mov	r0, r4
    8902:	4611      	mov	r1, r2
    8904:	f7ff ffb3 	bl	886e <_spi_context_cs_control>
	if (!ctx->asynchronous) {
    8908:	f894 304c 	ldrb.w	r3, [r4, #76]	; 0x4c
    890c:	b943      	cbnz	r3, 8920 <finish_transaction+0x2a>
		ctx->sync_status = status;
    890e:	6426      	str	r6, [r4, #64]	; 0x40
    8910:	f104 0028 	add.w	r0, r4, #40	; 0x28
    8914:	f7fe f984 	bl	6c20 <z_impl_k_sem_give>
	dev_data->busy = false;
    8918:	2300      	movs	r3, #0
    891a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
}
    891e:	bd70      	pop	{r4, r5, r6, pc}
		if (ctx->callback) {
    8920:	6c63      	ldr	r3, [r4, #68]	; 0x44
    8922:	b11b      	cbz	r3, 892c <finish_transaction+0x36>
			ctx->callback(dev, status, ctx->callback_data);
    8924:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    8926:	4631      	mov	r1, r6
    8928:	4628      	mov	r0, r5
    892a:	4798      	blx	r3
		if (!(ctx->config->operation & SPI_LOCK_ON)) {
    892c:	6823      	ldr	r3, [r4, #0]
    892e:	889b      	ldrh	r3, [r3, #4]
    8930:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    8934:	d1f0      	bne.n	8918 <finish_transaction+0x22>
			ctx->owner = NULL;
    8936:	6063      	str	r3, [r4, #4]
    8938:	f104 0010 	add.w	r0, r4, #16
    893c:	e7ea      	b.n	8914 <finish_transaction+0x1e>

0000893e <spi_nrfx_transceive_async>:
{
    893e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, true, cb, userdata);
    8940:	9c07      	ldr	r4, [sp, #28]
    8942:	9402      	str	r4, [sp, #8]
    8944:	9c06      	ldr	r4, [sp, #24]
    8946:	9401      	str	r4, [sp, #4]
    8948:	2401      	movs	r4, #1
    894a:	9400      	str	r4, [sp, #0]
    894c:	f7fb fb40 	bl	3fd0 <transceive>
}
    8950:	b004      	add	sp, #16
    8952:	bd10      	pop	{r4, pc}

00008954 <spi_nrfx_transceive>:
{
    8954:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return transceive(dev, spi_cfg, tx_bufs, rx_bufs, false, NULL, NULL);
    8956:	2400      	movs	r4, #0
    8958:	e9cd 4401 	strd	r4, r4, [sp, #4]
    895c:	9400      	str	r4, [sp, #0]
    895e:	f7fb fb37 	bl	3fd0 <transceive>
}
    8962:	b004      	add	sp, #16
    8964:	bd10      	pop	{r4, pc}

00008966 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    8966:	4770      	bx	lr

00008968 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    8968:	f100 0350 	add.w	r3, r0, #80	; 0x50
    896c:	009b      	lsls	r3, r3, #2
    896e:	b29b      	uxth	r3, r3
    8970:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8974:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    8978:	2200      	movs	r2, #0
    897a:	601a      	str	r2, [r3, #0]
    897c:	681b      	ldr	r3, [r3, #0]
}
    897e:	4770      	bx	lr

00008980 <sys_clock_cycle_get_32>:
{
    8980:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    8982:	f7fb fd5d 	bl	4440 <z_nrf_rtc_timer_read>
}
    8986:	bd08      	pop	{r3, pc}

00008988 <bytewise_bit_swap>:
	uint32_t inp = (*(uint32_t *)input);
    8988:	6803      	ldr	r3, [r0, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    898a:	fa93 f3a3 	rbit	r3, r3
	return sys_cpu_to_be32((uint32_t)__RBIT(inp));
    898e:	0618      	lsls	r0, r3, #24
    8990:	0a1a      	lsrs	r2, r3, #8
    8992:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
    8996:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    899a:	021b      	lsls	r3, r3, #8
    899c:	4310      	orrs	r0, r2
    899e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
}
    89a2:	4318      	orrs	r0, r3
    89a4:	4770      	bx	lr

000089a6 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
    89a6:	b508      	push	{r3, lr}

	mpsl_fem_init();
    89a8:	f7f7 fe73 	bl	692 <mpsl_fem_init>

	return 0;
}
    89ac:	2000      	movs	r0, #0
    89ae:	bd08      	pop	{r3, pc}

000089b0 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    89b0:	4700      	bx	r0

000089b2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    89b2:	f000 bad5 	b.w	8f60 <z_impl_k_busy_wait>

000089b6 <clock_stop>:
{
    89b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    89b8:	4604      	mov	r4, r0
    89ba:	b118      	cbz	r0, 89c4 <clock_stop+0xe>
    89bc:	2801      	cmp	r0, #1
    89be:	d020      	beq.n	8a02 <clock_stop+0x4c>
}
    89c0:	b003      	add	sp, #12
    89c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    89c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    89c8:	2202      	movs	r2, #2
    89ca:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    89ce:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    89d2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    89d6:	2201      	movs	r2, #1
    89d8:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    89da:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    89dc:	2301      	movs	r3, #1
    89de:	f88d 3007 	strb.w	r3, [sp, #7]
    89e2:	f242 7510 	movw	r5, #10000	; 0x2710
    89e6:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    89ea:	b1bc      	cbz	r4, 8a1c <clock_stop+0x66>
    89ec:	2c01      	cmp	r4, #1
    89ee:	d1e7      	bne.n	89c0 <clock_stop+0xa>
            if (p_clk_src != NULL)
    89f0:	b38f      	cbz	r7, 8a56 <clock_stop+0xa0>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    89f2:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    89f6:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    89fa:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    89fc:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    8a00:	e014      	b.n	8a2c <clock_stop+0x76>
    p_reg->INTENCLR = mask;
    8a02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8a06:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    8a08:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8a0c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8a10:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8a14:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    8a16:	f10d 0707 	add.w	r7, sp, #7
    8a1a:	e7df      	b.n	89dc <clock_stop+0x26>
            if (p_clk_src != NULL)
    8a1c:	b18f      	cbz	r7, 8a42 <clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8a1e:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    8a22:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    8a26:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8a28:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8a2c:	03da      	lsls	r2, r3, #15
    8a2e:	d5c7      	bpl.n	89c0 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    8a30:	f89d 0007 	ldrb.w	r0, [sp, #7]
    8a34:	2801      	cmp	r0, #1
    8a36:	d1c3      	bne.n	89c0 <clock_stop+0xa>
    8a38:	f7ff ffbb 	bl	89b2 <nrfx_busy_wait>
    8a3c:	3d01      	subs	r5, #1
    8a3e:	d1d4      	bne.n	89ea <clock_stop+0x34>
    8a40:	e7be      	b.n	89c0 <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8a42:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    8a46:	03d9      	lsls	r1, r3, #15
    8a48:	d5ba      	bpl.n	89c0 <clock_stop+0xa>
    8a4a:	2001      	movs	r0, #1
    8a4c:	f7ff ffb1 	bl	89b2 <nrfx_busy_wait>
    8a50:	3d01      	subs	r5, #1
    8a52:	d1f6      	bne.n	8a42 <clock_stop+0x8c>
    8a54:	e7b4      	b.n	89c0 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    8a56:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    8a5a:	03db      	lsls	r3, r3, #15
    8a5c:	d5b0      	bpl.n	89c0 <clock_stop+0xa>
    8a5e:	2001      	movs	r0, #1
    8a60:	f7ff ffa7 	bl	89b2 <nrfx_busy_wait>
    8a64:	3d01      	subs	r5, #1
    8a66:	d1f6      	bne.n	8a56 <clock_stop+0xa0>
    8a68:	e7aa      	b.n	89c0 <clock_stop+0xa>

00008a6a <nrfx_clock_enable>:
{
    8a6a:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    8a6c:	2000      	movs	r0, #0
    8a6e:	f7f9 ffe3 	bl	2a38 <arch_irq_is_enabled>
    8a72:	b908      	cbnz	r0, 8a78 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8a74:	f7f9 ffbe 	bl	29f4 <arch_irq_enable>
#pragma GCC diagnostic pop
#endif

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    8a78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8a7c:	2200      	movs	r2, #0
    8a7e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    8a82:	bd08      	pop	{r3, pc}

00008a84 <nrfx_clock_start>:
{
    8a84:	b508      	push	{r3, lr}
    switch (domain)
    8a86:	b110      	cbz	r0, 8a8e <nrfx_clock_start+0xa>
    8a88:	2801      	cmp	r0, #1
    8a8a:	d028      	beq.n	8ade <nrfx_clock_start+0x5a>
}
    8a8c:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8a8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8a92:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    8a96:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    8a9a:	03c9      	lsls	r1, r1, #15
    8a9c:	d40b      	bmi.n	8ab6 <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    8a9e:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    8aa2:	07d0      	lsls	r0, r2, #31
    8aa4:	d50c      	bpl.n	8ac0 <nrfx_clock_start+0x3c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    8aa6:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
    if (!is_correct_clk)
    8aaa:	0792      	lsls	r2, r2, #30
    8aac:	d105      	bne.n	8aba <nrfx_clock_start+0x36>
    p_reg->INTENSET = mask;
    8aae:	2202      	movs	r2, #2
    8ab0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    8ab4:	e7ea      	b.n	8a8c <nrfx_clock_start+0x8>
    if (!is_correct_clk)
    8ab6:	0791      	lsls	r1, r2, #30
    8ab8:	d002      	beq.n	8ac0 <nrfx_clock_start+0x3c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    8aba:	2000      	movs	r0, #0
    8abc:	f7ff ff7b 	bl	89b6 <clock_stop>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8ac0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8ac4:	2200      	movs	r2, #0
    8ac6:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8aca:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    8ace:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    8ad2:	2202      	movs	r2, #2
    8ad4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8ad8:	2201      	movs	r2, #1
    8ada:	609a      	str	r2, [r3, #8]
}
    8adc:	e7d6      	b.n	8a8c <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8ade:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8ae2:	2200      	movs	r2, #0
    8ae4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    8ae8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    8aec:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8af0:	6018      	str	r0, [r3, #0]
}
    8af2:	e7cb      	b.n	8a8c <nrfx_clock_start+0x8>

00008af4 <nrfx_clock_stop>:
    clock_stop(domain);
    8af4:	f7ff bf5f 	b.w	89b6 <clock_stop>

00008af8 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    8af8:	f000 001f 	and.w	r0, r0, #31
    8afc:	0080      	lsls	r0, r0, #2
    8afe:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8b02:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    8b06:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8b0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    8b0e:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    8b12:	4770      	bx	lr

00008b14 <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    8b14:	1c43      	adds	r3, r0, #1
    8b16:	d008      	beq.n	8b2a <spim_pin_uninit+0x16>
    *p_pin = pin_number & 0x1F;
    8b18:	f000 001f 	and.w	r0, r0, #31
    reg->PIN_CNF[pin_number] = cnf;
    8b1c:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    8b20:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8b24:	2202      	movs	r2, #2
    8b26:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    8b2a:	4770      	bx	lr

00008b2c <nrf_gpio_pin_write>:
    *p_pin = pin_number & 0x1F;
    8b2c:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    8b30:	2301      	movs	r3, #1
    8b32:	4083      	lsls	r3, r0
    8b34:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    if (value == 0)
    8b38:	b911      	cbnz	r1, 8b40 <nrf_gpio_pin_write+0x14>
    p_reg->OUTCLR = clr_mask;
    8b3a:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    8b3e:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
    8b40:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    8b44:	4770      	bx	lr

00008b46 <set_ss_pin_state>:
{
    8b46:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    8b48:	7fc0      	ldrb	r0, [r0, #31]
    8b4a:	28ff      	cmp	r0, #255	; 0xff
    8b4c:	d006      	beq.n	8b5c <set_ss_pin_state+0x16>
                           p_cb->ss_active_high ? active : !active);
    8b4e:	7f9b      	ldrb	r3, [r3, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
    8b50:	079b      	lsls	r3, r3, #30
    8b52:	bf58      	it	pl
    8b54:	f081 0101 	eorpl.w	r1, r1, #1
    8b58:	f7ff bfe8 	b.w	8b2c <nrf_gpio_pin_write>
}
    8b5c:	4770      	bx	lr

00008b5e <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    8b5e:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    8b60:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    8b62:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    8b64:	bf9c      	itt	ls
    8b66:	6881      	ldrls	r1, [r0, #8]
    8b68:	185b      	addls	r3, r3, r1
    r = RdOff - WrOff - 1u;
    8b6a:	3b01      	subs	r3, #1
    8b6c:	1a98      	subs	r0, r3, r2
}
    8b6e:	4770      	bx	lr

00008b70 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    8b70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    8b74:	e9d0 8402 	ldrd	r8, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    8b78:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    8b7a:	eba8 0604 	sub.w	r6, r8, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    8b7e:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    8b80:	4296      	cmp	r6, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    8b82:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    8b84:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    8b86:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    8b88:	d904      	bls.n	8b94 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    8b8a:	f7ff fcbc 	bl	8506 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    8b8e:	60ec      	str	r4, [r5, #12]
}
    8b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    8b94:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
    8b96:	eba4 0408 	sub.w	r4, r4, r8
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    8b9a:	f7ff fcb4 	bl	8506 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    8b9e:	6868      	ldr	r0, [r5, #4]
    8ba0:	4622      	mov	r2, r4
    8ba2:	19b9      	adds	r1, r7, r6
    8ba4:	e7f1      	b.n	8b8a <_WriteNoCheck+0x1a>

00008ba6 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    8ba6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    8baa:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    8bac:	4606      	mov	r6, r0
    8bae:	4689      	mov	r9, r1
    8bb0:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    8bb2:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    8bb6:	6933      	ldr	r3, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    8bb8:	68b4      	ldr	r4, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    8bba:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    8bbc:	429d      	cmp	r5, r3
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    8bbe:	bf28      	it	cs
    8bc0:	191b      	addcs	r3, r3, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    8bc2:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    8bc4:	42bc      	cmp	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    8bc6:	f103 33ff 	add.w	r3, r3, #4294967295
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    8bca:	bf28      	it	cs
    8bcc:	463c      	movcs	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    8bce:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    8bd0:	429c      	cmp	r4, r3
    8bd2:	bf28      	it	cs
    8bd4:	461c      	movcs	r4, r3
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    8bd6:	4649      	mov	r1, r9
    8bd8:	4428      	add	r0, r5
    8bda:	4622      	mov	r2, r4
    8bdc:	f7ff fc93 	bl	8506 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    8be0:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    8be2:	4425      	add	r5, r4
      WrOff = 0u;
    8be4:	42ab      	cmp	r3, r5
    8be6:	bf08      	it	eq
    8be8:	2500      	moveq	r5, #0
  } while (NumBytes);
    8bea:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    8bec:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    8bee:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    8bf0:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    8bf2:	d1e0      	bne.n	8bb6 <_WriteBlocking+0x10>
}
    8bf4:	4640      	mov	r0, r8
    8bf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00008bfa <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    8bfa:	f7fd bc59 	b.w	64b0 <_DoInit>

00008bfe <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
    8bfe:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
    8c00:	f7ff fffb 	bl	8bfa <SEGGER_RTT_Init>

	return 0;
}
    8c04:	2000      	movs	r0, #0
    8c06:	bd08      	pop	{r3, pc}

00008c08 <z_device_state_init>:

	while (dev < __device_end) {
		z_object_init(dev);
		++dev;
	}
}
    8c08:	4770      	bx	lr

00008c0a <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    8c0a:	b140      	cbz	r0, 8c1e <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    8c0c:	68c3      	ldr	r3, [r0, #12]
    8c0e:	7858      	ldrb	r0, [r3, #1]
    8c10:	f010 0001 	ands.w	r0, r0, #1
    8c14:	bf1e      	ittt	ne
    8c16:	7818      	ldrbne	r0, [r3, #0]
    8c18:	fab0 f080 	clzne	r0, r0
    8c1c:	0940      	lsrne	r0, r0, #5
}
    8c1e:	4770      	bx	lr

00008c20 <z_early_memset>:
	(void) memset(dst, c, n);
    8c20:	f7ff bc7c 	b.w	851c <memset>

00008c24 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    8c24:	f7ff bc6f 	b.w	8506 <memcpy>

00008c28 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8c28:	f3ef 8005 	mrs	r0, IPSR
}
    8c2c:	3800      	subs	r0, #0
    8c2e:	bf18      	it	ne
    8c30:	2001      	movne	r0, #1
    8c32:	4770      	bx	lr

00008c34 <z_impl_k_thread_name_set>:
}
    8c34:	f06f 0057 	mvn.w	r0, #87	; 0x57
    8c38:	4770      	bx	lr

00008c3a <k_thread_name_get>:
}
    8c3a:	2000      	movs	r0, #0
    8c3c:	4770      	bx	lr

00008c3e <z_impl_k_thread_start>:
	z_sched_start(thread);
    8c3e:	f7fe bb4b 	b.w	72d8 <z_sched_start>

00008c42 <z_pm_save_idle_exit>:
{
    8c42:	b508      	push	{r3, lr}
	pm_system_resume();
    8c44:	f7f9 fd46 	bl	26d4 <pm_system_resume>
}
    8c48:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    8c4c:	f7ff be8b 	b.w	8966 <sys_clock_idle_exit>

00008c50 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    8c50:	f990 300e 	ldrsb.w	r3, [r0, #14]
    8c54:	428b      	cmp	r3, r1
    8c56:	d001      	beq.n	8c5c <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    8c58:	f7fe bae6 	b.w	7228 <z_set_prio>
}
    8c5c:	2000      	movs	r0, #0
    8c5e:	4770      	bx	lr

00008c60 <z_impl_k_mutex_init>:
{
    8c60:	4603      	mov	r3, r0
	mutex->owner = NULL;
    8c62:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    8c64:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
    8c68:	e9c3 3300 	strd	r3, r3, [r3]
}
    8c6c:	4770      	bx	lr

00008c6e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    8c6e:	b15a      	cbz	r2, 8c88 <z_impl_k_sem_init+0x1a>
    8c70:	428a      	cmp	r2, r1
    8c72:	d309      	bcc.n	8c88 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
    8c74:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    8c78:	e9c0 1202 	strd	r1, r2, [r0, #8]
    8c7c:	e9c0 0000 	strd	r0, r0, [r0]
    8c80:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
    8c84:	2000      	movs	r0, #0
    8c86:	4770      	bx	lr
		return -EINVAL;
    8c88:	f06f 0015 	mvn.w	r0, #21
}
    8c8c:	4770      	bx	lr

00008c8e <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    8c8e:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    8c90:	2301      	movs	r3, #1
    8c92:	408b      	lsls	r3, r1
    8c94:	ea22 0303 	bic.w	r3, r2, r3
    8c98:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    8c9a:	fa22 f001 	lsr.w	r0, r2, r1
}
    8c9e:	f000 0001 	and.w	r0, r0, #1
    8ca2:	4770      	bx	lr

00008ca4 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    8ca4:	b120      	cbz	r0, 8cb0 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    8ca6:	2200      	movs	r2, #0
    8ca8:	4611      	mov	r1, r2
    8caa:	3088      	adds	r0, #136	; 0x88
    8cac:	f000 b909 	b.w	8ec2 <z_sched_wake>
}
    8cb0:	4770      	bx	lr

00008cb2 <z_work_submit_to_queue>:
{
    8cb2:	b513      	push	{r0, r1, r4, lr}
    8cb4:	9001      	str	r0, [sp, #4]
    8cb6:	4608      	mov	r0, r1
	__asm__ volatile(
    8cb8:	f04f 0340 	mov.w	r3, #64	; 0x40
    8cbc:	f3ef 8411 	mrs	r4, BASEPRI
    8cc0:	f383 8812 	msr	BASEPRI_MAX, r3
    8cc4:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    8cc8:	a901      	add	r1, sp, #4
    8cca:	f7fe f8b5 	bl	6e38 <submit_to_queue_locked>
	__asm__ volatile(
    8cce:	f384 8811 	msr	BASEPRI, r4
    8cd2:	f3bf 8f6f 	isb	sy
}
    8cd6:	b002      	add	sp, #8
    8cd8:	bd10      	pop	{r4, pc}

00008cda <k_work_submit_to_queue>:
{
    8cda:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
    8cdc:	f7ff ffe9 	bl	8cb2 <z_work_submit_to_queue>
	if (ret > 0) {
    8ce0:	1e04      	subs	r4, r0, #0
    8ce2:	dd09      	ble.n	8cf8 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
    8ce4:	f04f 0340 	mov.w	r3, #64	; 0x40
    8ce8:	f3ef 8011 	mrs	r0, BASEPRI
    8cec:	f383 8812 	msr	BASEPRI_MAX, r3
    8cf0:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8cf4:	f000 f8cf 	bl	8e96 <z_reschedule_irqlock>
}
    8cf8:	4620      	mov	r0, r4
    8cfa:	bd10      	pop	{r4, pc}

00008cfc <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    8cfc:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    8d00:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    8d02:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    8d04:	2300      	movs	r3, #0
	node->prev = NULL;
    8d06:	e9c0 3300 	strd	r3, r3, [r0]
}
    8d0a:	4770      	bx	lr

00008d0c <unpend_thread_no_timeout>:
{
    8d0c:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    8d0e:	f7ff fff5 	bl	8cfc <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    8d12:	7b43      	ldrb	r3, [r0, #13]
    8d14:	f023 0302 	bic.w	r3, r3, #2
    8d18:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    8d1a:	2300      	movs	r3, #0
    8d1c:	6083      	str	r3, [r0, #8]
}
    8d1e:	bd08      	pop	{r3, pc}

00008d20 <add_to_waitq_locked>:
{
    8d20:	b538      	push	{r3, r4, r5, lr}
    8d22:	4604      	mov	r4, r0
    8d24:	460d      	mov	r5, r1
	unready_thread(thread);
    8d26:	f7fe fa01 	bl	712c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    8d2a:	7b63      	ldrb	r3, [r4, #13]
    8d2c:	f043 0302 	orr.w	r3, r3, #2
    8d30:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    8d32:	b1e5      	cbz	r5, 8d6e <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    8d34:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    8d36:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8d38:	429d      	cmp	r5, r3
    8d3a:	d109      	bne.n	8d50 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    8d3c:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    8d3e:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    8d42:	601c      	str	r4, [r3, #0]
	list->tail = node;
    8d44:	606c      	str	r4, [r5, #4]
}
    8d46:	e012      	b.n	8d6e <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    8d48:	686a      	ldr	r2, [r5, #4]
    8d4a:	4293      	cmp	r3, r2
    8d4c:	d0f6      	beq.n	8d3c <add_to_waitq_locked+0x1c>
    8d4e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8d50:	2b00      	cmp	r3, #0
    8d52:	d0f3      	beq.n	8d3c <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    8d54:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    8d58:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    8d5c:	428a      	cmp	r2, r1
    8d5e:	d0f3      	beq.n	8d48 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    8d60:	4291      	cmp	r1, r2
    8d62:	ddf1      	ble.n	8d48 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    8d64:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    8d66:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    8d6a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    8d6c:	605c      	str	r4, [r3, #4]
}
    8d6e:	bd38      	pop	{r3, r4, r5, pc}

00008d70 <z_ready_thread>:
{
    8d70:	b510      	push	{r4, lr}
    8d72:	f04f 0340 	mov.w	r3, #64	; 0x40
    8d76:	f3ef 8411 	mrs	r4, BASEPRI
    8d7a:	f383 8812 	msr	BASEPRI_MAX, r3
    8d7e:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    8d82:	f7fe f99f 	bl	70c4 <ready_thread>
	__asm__ volatile(
    8d86:	f384 8811 	msr	BASEPRI, r4
    8d8a:	f3bf 8f6f 	isb	sy
}
    8d8e:	bd10      	pop	{r4, pc}

00008d90 <z_unpend_thread_no_timeout>:
{
    8d90:	b508      	push	{r3, lr}
	__asm__ volatile(
    8d92:	f04f 0240 	mov.w	r2, #64	; 0x40
    8d96:	f3ef 8111 	mrs	r1, BASEPRI
    8d9a:	f382 8812 	msr	BASEPRI_MAX, r2
    8d9e:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    8da2:	6883      	ldr	r3, [r0, #8]
    8da4:	b10b      	cbz	r3, 8daa <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    8da6:	f7ff ffb1 	bl	8d0c <unpend_thread_no_timeout>
	__asm__ volatile(
    8daa:	f381 8811 	msr	BASEPRI, r1
    8dae:	f3bf 8f6f 	isb	sy
}
    8db2:	bd08      	pop	{r3, pc}

00008db4 <z_sched_wake_thread>:
{
    8db4:	b538      	push	{r3, r4, r5, lr}
    8db6:	4604      	mov	r4, r0
	__asm__ volatile(
    8db8:	f04f 0340 	mov.w	r3, #64	; 0x40
    8dbc:	f3ef 8511 	mrs	r5, BASEPRI
    8dc0:	f383 8812 	msr	BASEPRI_MAX, r3
    8dc4:	f3bf 8f6f 	isb	sy
		if (!killed) {
    8dc8:	7b43      	ldrb	r3, [r0, #13]
    8dca:	f013 0f28 	tst.w	r3, #40	; 0x28
    8dce:	d10b      	bne.n	8de8 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    8dd0:	6883      	ldr	r3, [r0, #8]
    8dd2:	b10b      	cbz	r3, 8dd8 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    8dd4:	f7ff ff9a 	bl	8d0c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8dd8:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    8dda:	b951      	cbnz	r1, 8df2 <z_sched_wake_thread+0x3e>
    8ddc:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    8de0:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    8de2:	4620      	mov	r0, r4
    8de4:	f7fe f96e 	bl	70c4 <ready_thread>
	__asm__ volatile(
    8de8:	f385 8811 	msr	BASEPRI, r5
    8dec:	f3bf 8f6f 	isb	sy
}
    8df0:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    8df2:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    8df6:	e7f3      	b.n	8de0 <z_sched_wake_thread+0x2c>

00008df8 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    8df8:	2101      	movs	r1, #1
    8dfa:	3818      	subs	r0, #24
    8dfc:	f7ff bfda 	b.w	8db4 <z_sched_wake_thread>

00008e00 <z_unpend1_no_timeout>:
{
    8e00:	b508      	push	{r3, lr}
    8e02:	4603      	mov	r3, r0
	__asm__ volatile(
    8e04:	f04f 0240 	mov.w	r2, #64	; 0x40
    8e08:	f3ef 8111 	mrs	r1, BASEPRI
    8e0c:	f382 8812 	msr	BASEPRI_MAX, r2
    8e10:	f3bf 8f6f 	isb	sy
	return list->head == list;
    8e14:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8e16:	4283      	cmp	r3, r0
    8e18:	d007      	beq.n	8e2a <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    8e1a:	b108      	cbz	r0, 8e20 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    8e1c:	f7ff ff76 	bl	8d0c <unpend_thread_no_timeout>
	__asm__ volatile(
    8e20:	f381 8811 	msr	BASEPRI, r1
    8e24:	f3bf 8f6f 	isb	sy
}
    8e28:	bd08      	pop	{r3, pc}
    8e2a:	2000      	movs	r0, #0
    8e2c:	e7f8      	b.n	8e20 <z_unpend1_no_timeout+0x20>

00008e2e <z_unpend_first_thread>:
{
    8e2e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8e30:	f04f 0340 	mov.w	r3, #64	; 0x40
    8e34:	f3ef 8511 	mrs	r5, BASEPRI
    8e38:	f383 8812 	msr	BASEPRI_MAX, r3
    8e3c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    8e40:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8e42:	42a0      	cmp	r0, r4
    8e44:	d00d      	beq.n	8e62 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    8e46:	b134      	cbz	r4, 8e56 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    8e48:	4620      	mov	r0, r4
    8e4a:	f7ff ff5f 	bl	8d0c <unpend_thread_no_timeout>
    8e4e:	f104 0018 	add.w	r0, r4, #24
    8e52:	f000 f859 	bl	8f08 <z_abort_timeout>
	__asm__ volatile(
    8e56:	f385 8811 	msr	BASEPRI, r5
    8e5a:	f3bf 8f6f 	isb	sy
}
    8e5e:	4620      	mov	r0, r4
    8e60:	bd38      	pop	{r3, r4, r5, pc}
    8e62:	2400      	movs	r4, #0
    8e64:	e7f7      	b.n	8e56 <z_unpend_first_thread+0x28>

00008e66 <z_unpend_thread>:
{
    8e66:	b510      	push	{r4, lr}
    8e68:	4601      	mov	r1, r0
	__asm__ volatile(
    8e6a:	f04f 0340 	mov.w	r3, #64	; 0x40
    8e6e:	f3ef 8411 	mrs	r4, BASEPRI
    8e72:	f383 8812 	msr	BASEPRI_MAX, r3
    8e76:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    8e7a:	6883      	ldr	r3, [r0, #8]
    8e7c:	b10b      	cbz	r3, 8e82 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
    8e7e:	f7ff ff45 	bl	8d0c <unpend_thread_no_timeout>
	__asm__ volatile(
    8e82:	f384 8811 	msr	BASEPRI, r4
    8e86:	f3bf 8f6f 	isb	sy
}
    8e8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8e8e:	f101 0018 	add.w	r0, r1, #24
    8e92:	f000 b839 	b.w	8f08 <z_abort_timeout>

00008e96 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8e96:	4603      	mov	r3, r0
    8e98:	b920      	cbnz	r0, 8ea4 <z_reschedule_irqlock+0xe>
    8e9a:	f3ef 8205 	mrs	r2, IPSR
    8e9e:	b90a      	cbnz	r2, 8ea4 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    8ea0:	f7f9 be1a 	b.w	2ad8 <arch_swap>
    8ea4:	f383 8811 	msr	BASEPRI, r3
    8ea8:	f3bf 8f6f 	isb	sy
}
    8eac:	4770      	bx	lr

00008eae <z_reschedule_unlocked>:
	__asm__ volatile(
    8eae:	f04f 0340 	mov.w	r3, #64	; 0x40
    8eb2:	f3ef 8011 	mrs	r0, BASEPRI
    8eb6:	f383 8812 	msr	BASEPRI_MAX, r3
    8eba:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8ebe:	f7ff bfea 	b.w	8e96 <z_reschedule_irqlock>

00008ec2 <z_sched_wake>:
{
    8ec2:	b538      	push	{r3, r4, r5, lr}
    8ec4:	f04f 0340 	mov.w	r3, #64	; 0x40
    8ec8:	f3ef 8511 	mrs	r5, BASEPRI
    8ecc:	f383 8812 	msr	BASEPRI_MAX, r3
    8ed0:	f3bf 8f6f 	isb	sy
	return list->head == list;
    8ed4:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8ed6:	42a0      	cmp	r0, r4
    8ed8:	d012      	beq.n	8f00 <z_sched_wake+0x3e>
		if (thread != NULL) {
    8eda:	b19c      	cbz	r4, 8f04 <z_sched_wake+0x42>
    8edc:	67e1      	str	r1, [r4, #124]	; 0x7c
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    8ede:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    8ee0:	4620      	mov	r0, r4
    8ee2:	f7ff ff13 	bl	8d0c <unpend_thread_no_timeout>
    8ee6:	f104 0018 	add.w	r0, r4, #24
    8eea:	f000 f80d 	bl	8f08 <z_abort_timeout>
			ready_thread(thread);
    8eee:	4620      	mov	r0, r4
    8ef0:	f7fe f8e8 	bl	70c4 <ready_thread>
			ret = true;
    8ef4:	2001      	movs	r0, #1
	__asm__ volatile(
    8ef6:	f385 8811 	msr	BASEPRI, r5
    8efa:	f3bf 8f6f 	isb	sy
}
    8efe:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    8f00:	2000      	movs	r0, #0
    8f02:	e7f8      	b.n	8ef6 <z_sched_wake+0x34>
    8f04:	4620      	mov	r0, r4
    8f06:	e7f6      	b.n	8ef6 <z_sched_wake+0x34>

00008f08 <z_abort_timeout>:
{
    8f08:	b510      	push	{r4, lr}
	__asm__ volatile(
    8f0a:	f04f 0240 	mov.w	r2, #64	; 0x40
    8f0e:	f3ef 8411 	mrs	r4, BASEPRI
    8f12:	f382 8812 	msr	BASEPRI_MAX, r2
    8f16:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    8f1a:	6803      	ldr	r3, [r0, #0]
    8f1c:	b13b      	cbz	r3, 8f2e <z_abort_timeout+0x26>
			remove_timeout(to);
    8f1e:	f7fe fbbb 	bl	7698 <remove_timeout>
			ret = 0;
    8f22:	2000      	movs	r0, #0
	__asm__ volatile(
    8f24:	f384 8811 	msr	BASEPRI, r4
    8f28:	f3bf 8f6f 	isb	sy
}
    8f2c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    8f2e:	f06f 0015 	mvn.w	r0, #21
    8f32:	e7f7      	b.n	8f24 <z_abort_timeout+0x1c>

00008f34 <z_get_next_timeout_expiry>:
{
    8f34:	b510      	push	{r4, lr}
	__asm__ volatile(
    8f36:	f04f 0340 	mov.w	r3, #64	; 0x40
    8f3a:	f3ef 8411 	mrs	r4, BASEPRI
    8f3e:	f383 8812 	msr	BASEPRI_MAX, r3
    8f42:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    8f46:	f7fe fb87 	bl	7658 <next_timeout>
	__asm__ volatile(
    8f4a:	f384 8811 	msr	BASEPRI, r4
    8f4e:	f3bf 8f6f 	isb	sy
}
    8f52:	bd10      	pop	{r4, pc}

00008f54 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    8f54:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    8f56:	f7fe fc9b 	bl	7890 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    8f5a:	bd08      	pop	{r3, pc}

00008f5c <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    8f5c:	f7fe bc98 	b.w	7890 <sys_clock_tick_get>

00008f60 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    8f60:	b108      	cbz	r0, 8f66 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    8f62:	f7fa baf3 	b.w	354c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    8f66:	4770      	bx	lr

00008f68 <k_timer_init>:
	timer->status = 0U;
    8f68:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    8f6a:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    8f6e:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    8f72:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    8f76:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    8f7a:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    8f7c:	6343      	str	r3, [r0, #52]	; 0x34
}
    8f7e:	4770      	bx	lr

00008f80 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    8f80:	b510      	push	{r4, lr}
    8f82:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    8f84:	f7ff ffc0 	bl	8f08 <z_abort_timeout>

	if (inactive) {
    8f88:	b9b0      	cbnz	r0, 8fb8 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    8f8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8f8c:	b10b      	cbz	r3, 8f92 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    8f8e:	4620      	mov	r0, r4
    8f90:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    8f92:	f104 0018 	add.w	r0, r4, #24
    8f96:	f7ff ff33 	bl	8e00 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    8f9a:	b168      	cbz	r0, 8fb8 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    8f9c:	f7ff fee8 	bl	8d70 <z_ready_thread>
	__asm__ volatile(
    8fa0:	f04f 0340 	mov.w	r3, #64	; 0x40
    8fa4:	f3ef 8011 	mrs	r0, BASEPRI
    8fa8:	f383 8812 	msr	BASEPRI_MAX, r3
    8fac:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    8fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    8fb4:	f7ff bf6f 	b.w	8e96 <z_reschedule_irqlock>
    8fb8:	bd10      	pop	{r4, pc}

00008fba <signal_poll_event>:
{
    8fba:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    8fbe:	6884      	ldr	r4, [r0, #8]
{
    8fc0:	4605      	mov	r5, r0
    8fc2:	460e      	mov	r6, r1
	if (poller != NULL) {
    8fc4:	b144      	cbz	r4, 8fd8 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
    8fc6:	7863      	ldrb	r3, [r4, #1]
    8fc8:	2b01      	cmp	r3, #1
    8fca:	d12e      	bne.n	902a <signal_poll_event+0x70>
	if (!z_is_thread_pending(thread)) {
    8fcc:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    8fd0:	f013 0302 	ands.w	r3, r3, #2
    8fd4:	d10a      	bne.n	8fec <signal_poll_event+0x32>
		poller->is_polling = false;
    8fd6:	7023      	strb	r3, [r4, #0]
	event->state |= state;
    8fd8:	68eb      	ldr	r3, [r5, #12]
    8fda:	f3c3 3286 	ubfx	r2, r3, #14, #7
    8fde:	4316      	orrs	r6, r2
	event->poller = NULL;
    8fe0:	2000      	movs	r0, #0
	event->state |= state;
    8fe2:	f366 3394 	bfi	r3, r6, #14, #7
	event->poller = NULL;
    8fe6:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    8fe8:	60eb      	str	r3, [r5, #12]
	return retcode;
    8fea:	e03e      	b.n	906a <signal_poll_event+0xb0>
	if (z_is_thread_timeout_expired(thread)) {
    8fec:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    8ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
    8ff4:	bf08      	it	eq
    8ff6:	f112 0f02 	cmneq.w	r2, #2
    8ffa:	d032      	beq.n	9062 <signal_poll_event+0xa8>
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
    8ffc:	f1a4 0860 	sub.w	r8, r4, #96	; 0x60
	z_unpend_thread(thread);
    9000:	4640      	mov	r0, r8
    9002:	f7ff ff30 	bl	8e66 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    9006:	2e08      	cmp	r6, #8
    9008:	bf0c      	ite	eq
    900a:	f06f 0303 	mvneq.w	r3, #3
    900e:	2300      	movne	r3, #0
    9010:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    9012:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    9016:	06db      	lsls	r3, r3, #27
    9018:	d109      	bne.n	902e <signal_poll_event+0x74>
    901a:	f854 7c48 	ldr.w	r7, [r4, #-72]
    901e:	b937      	cbnz	r7, 902e <signal_poll_event+0x74>
	z_ready_thread(thread);
    9020:	4640      	mov	r0, r8
    9022:	f7ff fea5 	bl	8d70 <z_ready_thread>
		poller->is_polling = false;
    9026:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    9028:	e7d6      	b.n	8fd8 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
    902a:	2b02      	cmp	r3, #2
    902c:	d001      	beq.n	9032 <signal_poll_event+0x78>
		poller->is_polling = false;
    902e:	2300      	movs	r3, #0
    9030:	e7d1      	b.n	8fd6 <signal_poll_event+0x1c>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    9032:	7823      	ldrb	r3, [r4, #0]
    9034:	2b00      	cmp	r3, #0
    9036:	d0cf      	beq.n	8fd8 <signal_poll_event+0x1e>
    9038:	f854 7c04 	ldr.w	r7, [r4, #-4]
    903c:	2f00      	cmp	r7, #0
    903e:	d0f2      	beq.n	9026 <signal_poll_event+0x6c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
    9040:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    9044:	f1a4 0914 	sub.w	r9, r4, #20
    9048:	f104 0014 	add.w	r0, r4, #20
    904c:	f7ff ff5c 	bl	8f08 <z_abort_timeout>
		twork->poll_result = 0;
    9050:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		z_work_submit_to_queue(work_q, &twork->work);
    9054:	4649      	mov	r1, r9
    9056:	4638      	mov	r0, r7
    9058:	f7ff fe2b 	bl	8cb2 <z_work_submit_to_queue>
		poller->is_polling = false;
    905c:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    9060:	e7ba      	b.n	8fd8 <signal_poll_event+0x1e>
		poller->is_polling = false;
    9062:	2300      	movs	r3, #0
    9064:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
    9066:	f06f 000a 	mvn.w	r0, #10
}
    906a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000906e <z_handle_obj_poll_events>:
{
    906e:	4603      	mov	r3, r0
	return list->head == list;
    9070:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    9072:	4283      	cmp	r3, r0
    9074:	d008      	beq.n	9088 <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    9076:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    907a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    907c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    907e:	2300      	movs	r3, #0
	node->prev = NULL;
    9080:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    9084:	f7ff bf99 	b.w	8fba <signal_poll_event>
}
    9088:	4770      	bx	lr

0000908a <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    908a:	4770      	bx	lr
