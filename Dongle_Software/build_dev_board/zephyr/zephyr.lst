
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	60 0f 00 20 cd 15 00 00 f7 44 00 00 a1 15 00 00     `.. .....D......
  10:	a1 15 00 00 a1 15 00 00 a1 15 00 00 00 00 00 00     ................
	...
  2c:	bd 12 00 00 a1 15 00 00 00 00 00 00 69 12 00 00     ............i...
  3c:	a1 15 00 00                                         ....

00000040 <_irq_vector_table>:
  40:	6d 13 00 00 19 27 00 00 6d 13 00 00 6d 13 00 00     m....'..m...m...
  50:	6d 13 00 00 6d 13 00 00 6d 13 00 00 6d 13 00 00     m...m...m...m...
  60:	6d 13 00 00 6d 13 00 00 b3 49 00 00 6d 13 00 00     m...m....I..m...
  70:	6d 13 00 00 6d 13 00 00 6d 13 00 00 6d 13 00 00     m...m...m...m...
  80:	6d 13 00 00 6d 13 00 00 6d 13 00 00 6d 13 00 00     m...m...m...m...
  90:	89 27 00 00 6d 13 00 00 6d 13 00 00 6d 13 00 00     .'..m...m...m...
  a0:	6d 13 00 00 6d 13 00 00 6d 13 00 00 6d 13 00 00     m...m...m...m...
  b0:	6d 13 00 00 6d 13 00 00 6d 13 00 00 6d 13 00 00     m...m...m...m...
  c0:	6d 13 00 00 6d 13 00 00 6d 13 00 00 6d 13 00 00     m...m...m...m...
  d0:	6d 13 00 00 6d 13 00 00 6d 13 00 00 6d 13 00 00     m...m...m...m...

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295
      f0:	f04f 30ff 	movne.w	r0, #4294967295
      f4:	f000 b80c 	b.w	110 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f808 	bl	114 <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__aeabi_idiv0>:
     110:	4770      	bx	lr
     112:	bf00      	nop

00000114 <__udivmoddi4>:
     114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     118:	4607      	mov	r7, r0
     11a:	468c      	mov	ip, r1
     11c:	4608      	mov	r0, r1
     11e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     120:	4615      	mov	r5, r2
     122:	463c      	mov	r4, r7
     124:	4619      	mov	r1, r3
     126:	2b00      	cmp	r3, #0
     128:	f040 80c6 	bne.w	2b8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x14b>
     12c:	4282      	cmp	r2, r0
     12e:	fab2 f782 	clz	r7, r2
     132:	d946      	bls.n	1c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x55>
     134:	b14f      	cbz	r7, 14a <__udivmoddi4+0x36>
     136:	f1c7 0e20 	rsb	lr, r7, #32
     13a:	fa24 fe0e 	lsr.w	lr, r4, lr
     13e:	fa00 f307 	lsl.w	r3, r0, r7
     142:	40bd      	lsls	r5, r7
     144:	ea4e 0c03 	orr.w	ip, lr, r3
     148:	40bc      	lsls	r4, r7
     14a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     14e:	fa1f fe85 	uxth.w	lr, r5
     152:	fbbc f9f8 	udiv	r9, ip, r8
     156:	0c22      	lsrs	r2, r4, #16
     158:	fb08 c319 	mls	r3, r8, r9, ip
     15c:	fb09 fa0e 	mul.w	sl, r9, lr
     160:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     164:	459a      	cmp	sl, r3
     166:	d928      	bls.n	1ba <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4d>
     168:	18eb      	adds	r3, r5, r3
     16a:	f109 30ff 	add.w	r0, r9, #4294967295
     16e:	d204      	bcs.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     170:	459a      	cmp	sl, r3
     172:	d902      	bls.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     174:	f1a9 0002 	sub.w	r0, r9, #2
     178:	442b      	add	r3, r5
     17a:	eba3 030a 	sub.w	r3, r3, sl
     17e:	b2a4      	uxth	r4, r4
     180:	fbb3 f2f8 	udiv	r2, r3, r8
     184:	fb08 3312 	mls	r3, r8, r2, r3
     188:	fb02 fe0e 	mul.w	lr, r2, lr
     18c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     190:	45a6      	cmp	lr, r4
     192:	d914      	bls.n	1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     194:	192c      	adds	r4, r5, r4
     196:	f102 33ff 	add.w	r3, r2, #4294967295
     19a:	d203      	bcs.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     19c:	45a6      	cmp	lr, r4
     19e:	d901      	bls.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     1a0:	1e93      	subs	r3, r2, #2
     1a2:	442c      	add	r4, r5
     1a4:	eba4 040e 	sub.w	r4, r4, lr
     1a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1ac:	b11e      	cbz	r6, 1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     1ae:	40fc      	lsrs	r4, r7
     1b0:	2300      	movs	r3, #0
     1b2:	6034      	str	r4, [r6, #0]
     1b4:	6073      	str	r3, [r6, #4]
     1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1ba:	4648      	mov	r0, r9
     1bc:	e7dd      	b.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     1be:	4613      	mov	r3, r2
     1c0:	e7f0      	b.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     1c2:	b902      	cbnz	r2, 1c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x59>
     1c4:	deff      	udf	#255	; 0xff
     1c6:	bb87      	cbnz	r7, 22a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xbd>
     1c8:	1a83      	subs	r3, r0, r2
     1ca:	2101      	movs	r1, #1
     1cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1d0:	b2aa      	uxth	r2, r5
     1d2:	fbb3 fcfe 	udiv	ip, r3, lr
     1d6:	0c20      	lsrs	r0, r4, #16
     1d8:	fb0e 331c 	mls	r3, lr, ip, r3
     1dc:	fb0c f802 	mul.w	r8, ip, r2
     1e0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1e4:	4598      	cmp	r8, r3
     1e6:	d963      	bls.n	2b0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x143>
     1e8:	18eb      	adds	r3, r5, r3
     1ea:	f10c 30ff 	add.w	r0, ip, #4294967295
     1ee:	d204      	bcs.n	1fa <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x8d>
     1f0:	4598      	cmp	r8, r3
     1f2:	d902      	bls.n	1fa <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x8d>
     1f4:	f1ac 0002 	sub.w	r0, ip, #2
     1f8:	442b      	add	r3, r5
     1fa:	eba3 0308 	sub.w	r3, r3, r8
     1fe:	b2a4      	uxth	r4, r4
     200:	fbb3 fcfe 	udiv	ip, r3, lr
     204:	fb0e 331c 	mls	r3, lr, ip, r3
     208:	fb0c f202 	mul.w	r2, ip, r2
     20c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     210:	42a2      	cmp	r2, r4
     212:	d94f      	bls.n	2b4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x147>
     214:	192c      	adds	r4, r5, r4
     216:	f10c 33ff 	add.w	r3, ip, #4294967295
     21a:	d204      	bcs.n	226 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb9>
     21c:	42a2      	cmp	r2, r4
     21e:	d902      	bls.n	226 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb9>
     220:	f1ac 0302 	sub.w	r3, ip, #2
     224:	442c      	add	r4, r5
     226:	1aa4      	subs	r4, r4, r2
     228:	e7be      	b.n	1a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3b>
     22a:	f1c7 0c20 	rsb	ip, r7, #32
     22e:	fa20 f80c 	lsr.w	r8, r0, ip
     232:	fa00 f307 	lsl.w	r3, r0, r7
     236:	fa24 fc0c 	lsr.w	ip, r4, ip
     23a:	40bd      	lsls	r5, r7
     23c:	ea4c 0203 	orr.w	r2, ip, r3
     240:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     244:	b2ab      	uxth	r3, r5
     246:	fbb8 fcfe 	udiv	ip, r8, lr
     24a:	0c11      	lsrs	r1, r2, #16
     24c:	fb0e 801c 	mls	r0, lr, ip, r8
     250:	fb0c f903 	mul.w	r9, ip, r3
     254:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     258:	4581      	cmp	r9, r0
     25a:	fa04 f407 	lsl.w	r4, r4, r7
     25e:	d923      	bls.n	2a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x13b>
     260:	1828      	adds	r0, r5, r0
     262:	f10c 31ff 	add.w	r1, ip, #4294967295
     266:	d204      	bcs.n	272 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x105>
     268:	4581      	cmp	r9, r0
     26a:	d902      	bls.n	272 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x105>
     26c:	f1ac 0102 	sub.w	r1, ip, #2
     270:	4428      	add	r0, r5
     272:	eba0 0009 	sub.w	r0, r0, r9
     276:	b292      	uxth	r2, r2
     278:	fbb0 fcfe 	udiv	ip, r0, lr
     27c:	fb0e 001c 	mls	r0, lr, ip, r0
     280:	fb0c f803 	mul.w	r8, ip, r3
     284:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     288:	4598      	cmp	r8, r3
     28a:	d90f      	bls.n	2ac <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x13f>
     28c:	18eb      	adds	r3, r5, r3
     28e:	f10c 32ff 	add.w	r2, ip, #4294967295
     292:	d204      	bcs.n	29e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x131>
     294:	4598      	cmp	r8, r3
     296:	d902      	bls.n	29e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x131>
     298:	f1ac 0202 	sub.w	r2, ip, #2
     29c:	442b      	add	r3, r5
     29e:	eba3 0308 	sub.w	r3, r3, r8
     2a2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2a6:	e791      	b.n	1cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5f>
     2a8:	4661      	mov	r1, ip
     2aa:	e7e2      	b.n	272 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x105>
     2ac:	4662      	mov	r2, ip
     2ae:	e7f6      	b.n	29e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x131>
     2b0:	4660      	mov	r0, ip
     2b2:	e7a2      	b.n	1fa <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x8d>
     2b4:	4663      	mov	r3, ip
     2b6:	e7b6      	b.n	226 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb9>
     2b8:	4283      	cmp	r3, r0
     2ba:	d905      	bls.n	2c8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x15b>
     2bc:	b10e      	cbz	r6, 2c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x155>
     2be:	e9c6 7000 	strd	r7, r0, [r6]
     2c2:	2100      	movs	r1, #0
     2c4:	4608      	mov	r0, r1
     2c6:	e776      	b.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     2c8:	fab3 f183 	clz	r1, r3
     2cc:	b981      	cbnz	r1, 2f0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x183>
     2ce:	4283      	cmp	r3, r0
     2d0:	d301      	bcc.n	2d6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x169>
     2d2:	42ba      	cmp	r2, r7
     2d4:	d80a      	bhi.n	2ec <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17f>
     2d6:	1abc      	subs	r4, r7, r2
     2d8:	eb60 0303 	sbc.w	r3, r0, r3
     2dc:	2001      	movs	r0, #1
     2de:	469c      	mov	ip, r3
     2e0:	2e00      	cmp	r6, #0
     2e2:	d068      	beq.n	3b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x249>
     2e4:	e9c6 4c00 	strd	r4, ip, [r6]
     2e8:	2100      	movs	r1, #0
     2ea:	e764      	b.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     2ec:	4608      	mov	r0, r1
     2ee:	e7f7      	b.n	2e0 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x173>
     2f0:	f1c1 0c20 	rsb	ip, r1, #32
     2f4:	408b      	lsls	r3, r1
     2f6:	fa22 f40c 	lsr.w	r4, r2, ip
     2fa:	431c      	orrs	r4, r3
     2fc:	fa02 f501 	lsl.w	r5, r2, r1
     300:	fa00 f301 	lsl.w	r3, r0, r1
     304:	fa27 f20c 	lsr.w	r2, r7, ip
     308:	fa20 fb0c 	lsr.w	fp, r0, ip
     30c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     310:	4313      	orrs	r3, r2
     312:	fbbb f8f9 	udiv	r8, fp, r9
     316:	fa1f fe84 	uxth.w	lr, r4
     31a:	fb09 bb18 	mls	fp, r9, r8, fp
     31e:	0c1a      	lsrs	r2, r3, #16
     320:	fb08 fa0e 	mul.w	sl, r8, lr
     324:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     328:	4592      	cmp	sl, r2
     32a:	fa07 f701 	lsl.w	r7, r7, r1
     32e:	d93e      	bls.n	3ae <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x241>
     330:	18a2      	adds	r2, r4, r2
     332:	f108 30ff 	add.w	r0, r8, #4294967295
     336:	d204      	bcs.n	342 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1d5>
     338:	4592      	cmp	sl, r2
     33a:	d902      	bls.n	342 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1d5>
     33c:	f1a8 0002 	sub.w	r0, r8, #2
     340:	4422      	add	r2, r4
     342:	eba2 020a 	sub.w	r2, r2, sl
     346:	b29b      	uxth	r3, r3
     348:	fbb2 f8f9 	udiv	r8, r2, r9
     34c:	fb09 2218 	mls	r2, r9, r8, r2
     350:	fb08 fe0e 	mul.w	lr, r8, lr
     354:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     358:	4596      	cmp	lr, r2
     35a:	d92a      	bls.n	3b2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x245>
     35c:	18a2      	adds	r2, r4, r2
     35e:	f108 33ff 	add.w	r3, r8, #4294967295
     362:	d204      	bcs.n	36e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x201>
     364:	4596      	cmp	lr, r2
     366:	d902      	bls.n	36e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x201>
     368:	f1a8 0302 	sub.w	r3, r8, #2
     36c:	4422      	add	r2, r4
     36e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     372:	fba0 9305 	umull	r9, r3, r0, r5
     376:	eba2 020e 	sub.w	r2, r2, lr
     37a:	429a      	cmp	r2, r3
     37c:	46ce      	mov	lr, r9
     37e:	4698      	mov	r8, r3
     380:	d302      	bcc.n	388 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x21b>
     382:	d106      	bne.n	392 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x225>
     384:	454f      	cmp	r7, r9
     386:	d204      	bcs.n	392 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x225>
     388:	ebb9 0e05 	subs.w	lr, r9, r5
     38c:	eb63 0804 	sbc.w	r8, r3, r4
     390:	3801      	subs	r0, #1
     392:	b186      	cbz	r6, 3b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x249>
     394:	ebb7 030e 	subs.w	r3, r7, lr
     398:	eb62 0708 	sbc.w	r7, r2, r8
     39c:	fa07 fc0c 	lsl.w	ip, r7, ip
     3a0:	40cb      	lsrs	r3, r1
     3a2:	ea4c 0303 	orr.w	r3, ip, r3
     3a6:	40cf      	lsrs	r7, r1
     3a8:	e9c6 3700 	strd	r3, r7, [r6]
     3ac:	e79c      	b.n	2e8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x17b>
     3ae:	4640      	mov	r0, r8
     3b0:	e7c7      	b.n	342 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x1d5>
     3b2:	4643      	mov	r3, r8
     3b4:	e7db      	b.n	36e <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x201>
     3b6:	4631      	mov	r1, r6
     3b8:	e6fd      	b.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
	...

000003bc <event_handler>:
#include "receiver.h"

LOG_MODULE_REGISTER(esb_receiver, CONFIG_LOG_DEFAULT_LEVEL);

void event_handler(struct esb_evt const *event) {
     3bc:	b510      	push	{r4, lr}
    switch (event->evt_id) {
     3be:	7803      	ldrb	r3, [r0, #0]
     3c0:	2b01      	cmp	r3, #1
void event_handler(struct esb_evt const *event) {
     3c2:	b086      	sub	sp, #24
    switch (event->evt_id) {
     3c4:	d008      	beq.n	3d8 <event_handler+0x1c>
     3c6:	2b02      	cmp	r3, #2
     3c8:	d008      	beq.n	3dc <event_handler+0x20>
     3ca:	b9f3      	cbnz	r3, 40a <CONFIG_MAIN_STACK_SIZE+0xa>
        case ESB_EVENT_TX_SUCCESS:
            printk("TX SUCCESS EVENT");
     3cc:	4811      	ldr	r0, [pc, #68]	; (414 <CONFIG_MAIN_STACK_SIZE+0x14>)
                printk("Error while reading rx packet");
            }
            break;
    }

}
     3ce:	b006      	add	sp, #24
     3d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                printk("Error while reading rx packet");
     3d4:	f003 bf66 	b.w	42a4 <printk>
            printk("TX FAILED EVENT");
     3d8:	480f      	ldr	r0, [pc, #60]	; (418 <CONFIG_MAIN_STACK_SIZE+0x18>)
     3da:	e7f8      	b.n	3ce <event_handler+0x12>
            if (esb_read_rx_payload(&rx_payload) == 0) {
     3dc:	4c0f      	ldr	r4, [pc, #60]	; (41c <CONFIG_MAIN_STACK_SIZE+0x1c>)
     3de:	4620      	mov	r0, r4
     3e0:	f002 fb84 	bl	2aec <esb_read_rx_payload>
     3e4:	b998      	cbnz	r0, 40e <CONFIG_MAIN_STACK_SIZE+0xe>
                printk("Packet received, len %d : "
     3e6:	7b23      	ldrb	r3, [r4, #12]
     3e8:	9305      	str	r3, [sp, #20]
     3ea:	7ae3      	ldrb	r3, [r4, #11]
     3ec:	9304      	str	r3, [sp, #16]
     3ee:	7aa3      	ldrb	r3, [r4, #10]
     3f0:	9303      	str	r3, [sp, #12]
     3f2:	7a63      	ldrb	r3, [r4, #9]
     3f4:	9302      	str	r3, [sp, #8]
     3f6:	7a23      	ldrb	r3, [r4, #8]
     3f8:	9301      	str	r3, [sp, #4]
     3fa:	79e3      	ldrb	r3, [r4, #7]
     3fc:	9300      	str	r3, [sp, #0]
     3fe:	7962      	ldrb	r2, [r4, #5]
     400:	79a3      	ldrb	r3, [r4, #6]
     402:	7821      	ldrb	r1, [r4, #0]
     404:	4806      	ldr	r0, [pc, #24]	; (420 <CONFIG_MAIN_STACK_SIZE+0x20>)
     406:	f003 ff4d 	bl	42a4 <printk>
}
     40a:	b006      	add	sp, #24
     40c:	bd10      	pop	{r4, pc}
                printk("Error while reading rx packet");
     40e:	4805      	ldr	r0, [pc, #20]	; (424 <CONFIG_MAIN_STACK_SIZE+0x24>)
     410:	e7dd      	b.n	3ce <event_handler+0x12>
     412:	bf00      	nop
     414:	0000509c 	.word	0x0000509c
     418:	000050ad 	.word	0x000050ad
     41c:	200004b0 	.word	0x200004b0
     420:	000050bd 	.word	0x000050bd
     424:	00005116 	.word	0x00005116

00000428 <init_esb>:

    printk("HF clock started");
    return 0;
}

int init_esb(void) {
     428:	b530      	push	{r4, r5, lr}
    int err;
    /* These are arbitrary default addresses. In end user products
	 * different addresses should be used for each set of devices.
	 */
	uint8_t base_addr_0[4] = {0xE7, 0xE7, 0xE7, 0xE7};
	uint8_t base_addr_1[4] = {0xC2, 0xC2, 0xC2, 0xC2};
     42a:	f04f 32e7 	mov.w	r2, #3890735079	; 0xe7e7e7e7
int init_esb(void) {
     42e:	b08b      	sub	sp, #44	; 0x2c
	uint8_t base_addr_1[4] = {0xC2, 0xC2, 0xC2, 0xC2};
     430:	f04f 33c2 	mov.w	r3, #3267543746	; 0xc2c2c2c2
     434:	e9cd 2301 	strd	r2, r3, [sp, #4]
	uint8_t addr_prefix[8] = {0xE7, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8};
     438:	4a19      	ldr	r2, [pc, #100]	; (4a0 <init_esb+0x78>)

    struct esb_config config = ESB_DEFAULT_CONFIG;
     43a:	4d1a      	ldr	r5, [pc, #104]	; (4a4 <init_esb+0x7c>)
	uint8_t addr_prefix[8] = {0xE7, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8};
     43c:	6810      	ldr	r0, [r2, #0]
     43e:	6851      	ldr	r1, [r2, #4]
     440:	ab03      	add	r3, sp, #12
     442:	c303      	stmia	r3!, {r0, r1}
    struct esb_config config = ESB_DEFAULT_CONFIG;
     444:	461c      	mov	r4, r3
     446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     44a:	682b      	ldr	r3, [r5, #0]
     44c:	6023      	str	r3, [r4, #0]

    config.protocol = ESB_PROTOCOL_ESB_DPL;
    config.bitrate = ESB_BITRATE_2MBPS;
    config.mode = ESB_MODE_PRX;
    config.event_handler = event_handler;
     44e:	4a16      	ldr	r2, [pc, #88]	; (4a8 <init_esb+0x80>)
     450:	9206      	str	r2, [sp, #24]
    config.mode = ESB_MODE_PRX;
     452:	2301      	movs	r3, #1
    config.selective_auto_ack = true;

    err = esb_init(&config);
     454:	a805      	add	r0, sp, #20
    config.mode = ESB_MODE_PRX;
     456:	f88d 3015 	strb.w	r3, [sp, #21]
    config.selective_auto_ack = true;
     45a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
    err = esb_init(&config);
     45e:	f002 fa09 	bl	2874 <esb_init>

    if (err) {
     462:	4604      	mov	r4, r0
     464:	b128      	cbz	r0, 472 <init_esb+0x4a>
        printk("Error initializing esb");
     466:	4811      	ldr	r0, [pc, #68]	; (4ac <init_esb+0x84>)
        return err;
    }   

    err = esb_set_prefixes(addr_prefix, ARRAY_SIZE(addr_prefix));
    if (err) {
        printk("Error setting address prefix");
     468:	f003 ff1c 	bl	42a4 <printk>
        return err;
    }   

    return 0;

}
     46c:	4620      	mov	r0, r4
     46e:	b00b      	add	sp, #44	; 0x2c
     470:	bd30      	pop	{r4, r5, pc}
    err = esb_set_base_address_0(base_addr_0);
     472:	a801      	add	r0, sp, #4
     474:	f002 fb78 	bl	2b68 <esb_set_base_address_0>
    if (err) {
     478:	4604      	mov	r4, r0
     47a:	b108      	cbz	r0, 480 <init_esb+0x58>
        printk("Error setting base address 0");
     47c:	480c      	ldr	r0, [pc, #48]	; (4b0 <init_esb+0x88>)
     47e:	e7f3      	b.n	468 <init_esb+0x40>
    err = esb_set_base_address_1(base_addr_1);
     480:	a802      	add	r0, sp, #8
     482:	f002 fb93 	bl	2bac <esb_set_base_address_1>
    if (err) {
     486:	4604      	mov	r4, r0
     488:	b108      	cbz	r0, 48e <init_esb+0x66>
        printk("Error setting base address 1");
     48a:	480a      	ldr	r0, [pc, #40]	; (4b4 <init_esb+0x8c>)
     48c:	e7ec      	b.n	468 <init_esb+0x40>
    err = esb_set_prefixes(addr_prefix, ARRAY_SIZE(addr_prefix));
     48e:	2108      	movs	r1, #8
     490:	a803      	add	r0, sp, #12
     492:	f002 fbad 	bl	2bf0 <esb_set_prefixes>
    if (err) {
     496:	4604      	mov	r4, r0
     498:	2800      	cmp	r0, #0
     49a:	d0e7      	beq.n	46c <init_esb+0x44>
        printk("Error setting address prefix");
     49c:	4806      	ldr	r0, [pc, #24]	; (4b8 <init_esb+0x90>)
     49e:	e7e3      	b.n	468 <init_esb+0x40>
     4a0:	000051a2 	.word	0x000051a2
     4a4:	00004f80 	.word	0x00004f80
     4a8:	000003bd 	.word	0x000003bd
     4ac:	00005134 	.word	0x00005134
     4b0:	0000514b 	.word	0x0000514b
     4b4:	00005168 	.word	0x00005168
     4b8:	00005185 	.word	0x00005185

000004bc <get_payload>:

    printk("Initialization complete");
    return 0;
}

struct esb_payload get_payload() {
     4bc:	b510      	push	{r4, lr}
    return rx_payload;
     4be:	4b06      	ldr	r3, [pc, #24]	; (4d8 <get_payload+0x1c>)
     4c0:	4602      	mov	r2, r0
     4c2:	f103 0124 	add.w	r1, r3, #36	; 0x24
     4c6:	f853 4b04 	ldr.w	r4, [r3], #4
     4ca:	f842 4b04 	str.w	r4, [r2], #4
     4ce:	428b      	cmp	r3, r1
     4d0:	d1f9      	bne.n	4c6 <get_payload+0xa>
     4d2:	781b      	ldrb	r3, [r3, #0]
     4d4:	7013      	strb	r3, [r2, #0]
}
     4d6:	bd10      	pop	{r4, pc}
     4d8:	200004b0 	.word	0x200004b0

000004dc <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
     4dc:	680b      	ldr	r3, [r1, #0]
     4de:	3301      	adds	r3, #1
     4e0:	600b      	str	r3, [r1, #0]
	return _char_out(c);
     4e2:	4b01      	ldr	r3, [pc, #4]	; (4e8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE>)
     4e4:	681b      	ldr	r3, [r3, #0]
     4e6:	4718      	bx	r3
     4e8:	20000000 	.word	0x20000000

000004ec <__printk_hook_install>:
	_char_out = fn;
     4ec:	4b01      	ldr	r3, [pc, #4]	; (4f4 <__printk_hook_install+0x8>)
     4ee:	6018      	str	r0, [r3, #0]
}
     4f0:	4770      	bx	lr
     4f2:	bf00      	nop
     4f4:	20000000 	.word	0x20000000

000004f8 <vprintk>:
}

void vprintk(const char *fmt, va_list ap)
{
     4f8:	b507      	push	{r0, r1, r2, lr}
     4fa:	460b      	mov	r3, r1

		if (ctx.buf_count) {
			buf_flush(&ctx);
		}
	} else {
		struct out_context ctx = { 0 };
     4fc:	2100      	movs	r1, #0
{
     4fe:	4602      	mov	r2, r0
		struct out_context ctx = { 0 };
     500:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
		k_spinlock_key_t key = k_spin_lock(&lock);
#endif

		cbvprintf(char_out, &ctx, fmt, ap);
     502:	4803      	ldr	r0, [pc, #12]	; (510 <vprintk+0x18>)
     504:	a901      	add	r1, sp, #4
     506:	f000 f8e5 	bl	6d4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
		k_spin_unlock(&lock, key);
#endif
	}
}
     50a:	b003      	add	sp, #12
     50c:	f85d fb04 	ldr.w	pc, [sp], #4
     510:	000004dd 	.word	0x000004dd

00000514 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     514:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     518:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     51c:	f019 0808 	ands.w	r8, r9, #8
{
     520:	4604      	mov	r4, r0
     522:	4693      	mov	fp, r2
	if (processing) {
     524:	d00d      	beq.n	542 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     526:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     528:	bf0c      	ite	eq
     52a:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     52e:	f049 0920 	orrne.w	r9, r9, #32
     532:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     536:	f38b 8811 	msr	BASEPRI, fp
     53a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     53e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     542:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     546:	2902      	cmp	r1, #2
     548:	d107      	bne.n	55a <process_event+0x46>
			evt = process_recheck(mgr);
     54a:	4620      	mov	r0, r4
     54c:	f003 feb7 	bl	42be <process_recheck>
		if (evt == EVT_NOP) {
     550:	2800      	cmp	r0, #0
     552:	d0f0      	beq.n	536 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     554:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     556:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     558:	d14e      	bne.n	5f8 <process_event+0xe4>
			res = mgr->last_res;
     55a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     55c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     55e:	2f00      	cmp	r7, #0
     560:	da15      	bge.n	58e <process_event+0x7a>
		*clients = mgr->clients;
     562:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     564:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     568:	e9c4 8800 	strd	r8, r8, [r4]
     56c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     570:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     572:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     574:	8b21      	ldrh	r1, [r4, #24]
     576:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     57a:	45ca      	cmp	sl, r9
     57c:	d002      	beq.n	584 <process_event+0x70>
		if (do_monitors
     57e:	68a3      	ldr	r3, [r4, #8]
     580:	2b00      	cmp	r3, #0
     582:	d15a      	bne.n	63a <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     584:	b90d      	cbnz	r5, 58a <process_event+0x76>
		    || (transit != NULL)) {
     586:	2e00      	cmp	r6, #0
     588:	d071      	beq.n	66e <process_event+0x15a>
     58a:	2300      	movs	r3, #0
     58c:	e056      	b.n	63c <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     58e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     592:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     594:	2a01      	cmp	r2, #1
     596:	d81e      	bhi.n	5d6 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     598:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     59c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     59e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5a0:	b289      	uxth	r1, r1
     5a2:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     5a6:	d10a      	bne.n	5be <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     5a8:	b13d      	cbz	r5, 5ba <process_event+0xa6>
     5aa:	8b63      	ldrh	r3, [r4, #26]
     5ac:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     5ae:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     5b0:	3301      	adds	r3, #1
     5b2:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     5b4:	2a00      	cmp	r2, #0
     5b6:	d1fa      	bne.n	5ae <process_event+0x9a>
     5b8:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5ba:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     5be:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     5c0:	4620      	mov	r0, r4
     5c2:	f003 fe7c 	bl	42be <process_recheck>
     5c6:	4606      	mov	r6, r0
     5c8:	2800      	cmp	r0, #0
     5ca:	d0d3      	beq.n	574 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     5cc:	8b23      	ldrh	r3, [r4, #24]
     5ce:	f043 0320 	orr.w	r3, r3, #32
     5d2:	8323      	strh	r3, [r4, #24]
     5d4:	e7cd      	b.n	572 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     5d6:	2b04      	cmp	r3, #4
     5d8:	d10c      	bne.n	5f4 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5da:	f021 0107 	bic.w	r1, r1, #7
     5de:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     5e0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     5e2:	4620      	mov	r0, r4
     5e4:	f003 fe6b 	bl	42be <process_recheck>
     5e8:	4605      	mov	r5, r0
     5ea:	2800      	cmp	r0, #0
     5ec:	d0c1      	beq.n	572 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     5ee:	f041 0120 	orr.w	r1, r1, #32
     5f2:	8321      	strh	r1, [r4, #24]
     5f4:	2500      	movs	r5, #0
     5f6:	e7bc      	b.n	572 <process_event+0x5e>
		} else if (evt == EVT_START) {
     5f8:	2803      	cmp	r0, #3
     5fa:	d109      	bne.n	610 <process_event+0xfc>
			transit = mgr->transitions->start;
     5fc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     5fe:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     602:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     604:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     608:	8323      	strh	r3, [r4, #24]
}
     60a:	2500      	movs	r5, #0
		res = 0;
     60c:	462f      	mov	r7, r5
     60e:	e7b1      	b.n	574 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     610:	2804      	cmp	r0, #4
     612:	d106      	bne.n	622 <process_event+0x10e>
			transit = mgr->transitions->stop;
     614:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     616:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     61a:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     61c:	f043 0304 	orr.w	r3, r3, #4
     620:	e7f2      	b.n	608 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     622:	2805      	cmp	r0, #5
     624:	d106      	bne.n	634 <process_event+0x120>
			transit = mgr->transitions->reset;
     626:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     628:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     62c:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     62e:	f043 0305 	orr.w	r3, r3, #5
     632:	e7e9      	b.n	608 <process_event+0xf4>
     634:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     636:	462e      	mov	r6, r5
     638:	e7e8      	b.n	60c <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     63a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     63c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     640:	8321      	strh	r1, [r4, #24]
     642:	f38b 8811 	msr	BASEPRI, fp
     646:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     64a:	b9fb      	cbnz	r3, 68c <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     64c:	bb85      	cbnz	r5, 6b0 <process_event+0x19c>
			if (transit != NULL) {
     64e:	b116      	cbz	r6, 656 <process_event+0x142>
				transit(mgr, transition_complete);
     650:	491f      	ldr	r1, [pc, #124]	; (6d0 <process_event+0x1bc>)
     652:	4620      	mov	r0, r4
     654:	47b0      	blx	r6
	__asm__ volatile(
     656:	f04f 0320 	mov.w	r3, #32
     65a:	f3ef 8b11 	mrs	fp, BASEPRI
     65e:	f383 8812 	msr	BASEPRI_MAX, r3
     662:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     666:	8b23      	ldrh	r3, [r4, #24]
     668:	f023 0308 	bic.w	r3, r3, #8
     66c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     66e:	8b23      	ldrh	r3, [r4, #24]
     670:	06da      	lsls	r2, r3, #27
     672:	d525      	bpl.n	6c0 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     674:	f023 0310 	bic.w	r3, r3, #16
     678:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     67a:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     67c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     680:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     684:	2900      	cmp	r1, #0
     686:	f47f af5e 	bne.w	546 <process_event+0x32>
out:
     68a:	e754      	b.n	536 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     68c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     68e:	2900      	cmp	r1, #0
     690:	d0dc      	beq.n	64c <process_event+0x138>
	return node->next;
     692:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     696:	f8d1 b004 	ldr.w	fp, [r1, #4]
     69a:	463b      	mov	r3, r7
     69c:	4652      	mov	r2, sl
     69e:	4620      	mov	r0, r4
     6a0:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     6a2:	f1b9 0f00 	cmp.w	r9, #0
     6a6:	d0d1      	beq.n	64c <process_event+0x138>
     6a8:	4649      	mov	r1, r9
     6aa:	f8d9 9000 	ldr.w	r9, [r9]
     6ae:	e7f2      	b.n	696 <process_event+0x182>
     6b0:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     6b2:	463b      	mov	r3, r7
     6b4:	4652      	mov	r2, sl
     6b6:	4620      	mov	r0, r4
     6b8:	682d      	ldr	r5, [r5, #0]
     6ba:	f003 fe1c 	bl	42f6 <notify_one>
     6be:	e7c5      	b.n	64c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     6c0:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     6c4:	bf1e      	ittt	ne
     6c6:	f023 0320 	bicne.w	r3, r3, #32
     6ca:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     6cc:	2102      	movne	r1, #2
     6ce:	e7d5      	b.n	67c <process_event+0x168>
     6d0:	00004323 	.word	0x00004323

000006d4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     6d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     6d8:	b091      	sub	sp, #68	; 0x44
     6da:	468b      	mov	fp, r1
     6dc:	9002      	str	r0, [sp, #8]
     6de:	4692      	mov	sl, r2
     6e0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     6e2:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     6e4:	f89a 0000 	ldrb.w	r0, [sl]
     6e8:	b908      	cbnz	r0, 6ee <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     6ea:	4628      	mov	r0, r5
     6ec:	e35f      	b.n	dae <CONFIG_ISR_STACK_SIZE+0x5ae>
		if (*fp != '%') {
     6ee:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     6f0:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     6f4:	d007      	beq.n	706 <cbvprintf+0x32>
			OUTC('%');
     6f6:	9b02      	ldr	r3, [sp, #8]
     6f8:	4659      	mov	r1, fp
     6fa:	4798      	blx	r3
     6fc:	2800      	cmp	r0, #0
     6fe:	f2c0 8356 	blt.w	dae <CONFIG_ISR_STACK_SIZE+0x5ae>
     702:	3501      	adds	r5, #1
			break;
     704:	e212      	b.n	b2c <CONFIG_ISR_STACK_SIZE+0x32c>
		} state = {
     706:	2218      	movs	r2, #24
     708:	2100      	movs	r1, #0
     70a:	a80a      	add	r0, sp, #40	; 0x28
     70c:	f003 ff1f 	bl	454e <memset>
	if (*sp == '%') {
     710:	f89a 3001 	ldrb.w	r3, [sl, #1]
     714:	2b25      	cmp	r3, #37	; 0x25
     716:	d078      	beq.n	80a <CONFIG_ISR_STACK_SIZE+0xa>
     718:	2200      	movs	r2, #0
     71a:	4610      	mov	r0, r2
     71c:	4696      	mov	lr, r2
     71e:	4694      	mov	ip, r2
     720:	4616      	mov	r6, r2
     722:	4639      	mov	r1, r7
		switch (*sp) {
     724:	f817 3b01 	ldrb.w	r3, [r7], #1
     728:	2b2b      	cmp	r3, #43	; 0x2b
     72a:	f000 809d 	beq.w	868 <CONFIG_ISR_STACK_SIZE+0x68>
     72e:	f200 8094 	bhi.w	85a <CONFIG_ISR_STACK_SIZE+0x5a>
     732:	2b20      	cmp	r3, #32
     734:	f000 809b 	beq.w	86e <CONFIG_ISR_STACK_SIZE+0x6e>
     738:	2b23      	cmp	r3, #35	; 0x23
     73a:	f000 809b 	beq.w	874 <CONFIG_ISR_STACK_SIZE+0x74>
     73e:	b12e      	cbz	r6, 74c <cbvprintf+0x78>
     740:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     744:	f046 0604 	orr.w	r6, r6, #4
     748:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     74c:	f1bc 0f00 	cmp.w	ip, #0
     750:	d005      	beq.n	75e <cbvprintf+0x8a>
     752:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     756:	f046 0608 	orr.w	r6, r6, #8
     75a:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     75e:	f1be 0f00 	cmp.w	lr, #0
     762:	d005      	beq.n	770 <cbvprintf+0x9c>
     764:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     768:	f046 0610 	orr.w	r6, r6, #16
     76c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     770:	b128      	cbz	r0, 77e <cbvprintf+0xaa>
     772:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     776:	f040 0020 	orr.w	r0, r0, #32
     77a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     77e:	b12a      	cbz	r2, 78c <cbvprintf+0xb8>
     780:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     788:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     78c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     790:	f002 0044 	and.w	r0, r2, #68	; 0x44
     794:	2844      	cmp	r0, #68	; 0x44
     796:	d103      	bne.n	7a0 <cbvprintf+0xcc>
		conv->flag_zero = false;
     798:	f36f 1286 	bfc	r2, #6, #1
     79c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     7a0:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     7a4:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     7a6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     7aa:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     7ae:	d17b      	bne.n	8a8 <CONFIG_ISR_STACK_SIZE+0xa8>
		conv->width_star = true;
     7b0:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     7b4:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     7b8:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     7ba:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     7be:	781a      	ldrb	r2, [r3, #0]
     7c0:	2a2e      	cmp	r2, #46	; 0x2e
     7c2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     7c6:	bf0c      	ite	eq
     7c8:	2101      	moveq	r1, #1
     7ca:	2100      	movne	r1, #0
     7cc:	f361 0241 	bfi	r2, r1, #1, #1
     7d0:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     7d4:	d174      	bne.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
	if (*sp == '*') {
     7d6:	785a      	ldrb	r2, [r3, #1]
     7d8:	2a2a      	cmp	r2, #42	; 0x2a
     7da:	d06a      	beq.n	8b2 <CONFIG_ISR_STACK_SIZE+0xb2>
	++sp;
     7dc:	3301      	adds	r3, #1
	size_t val = 0;
     7de:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     7e0:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     7e2:	4618      	mov	r0, r3
     7e4:	f810 2b01 	ldrb.w	r2, [r0], #1
     7e8:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     7ec:	2f09      	cmp	r7, #9
     7ee:	f240 808e 	bls.w	90e <CONFIG_ISR_STACK_SIZE+0x10e>
	conv->unsupported |= ((conv->prec_value < 0)
     7f2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     7f6:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     7f8:	f3c2 0040 	ubfx	r0, r2, #1, #1
     7fc:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     800:	f361 0241 	bfi	r2, r1, #1, #1
     804:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     808:	e05a      	b.n	8c0 <CONFIG_ISR_STACK_SIZE+0xc0>
		conv->specifier = *sp++;
     80a:	f10a 0702 	add.w	r7, sl, #2
     80e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     812:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     816:	07d9      	lsls	r1, r3, #31
     818:	f140 8149 	bpl.w	aae <CONFIG_ISR_STACK_SIZE+0x2ae>
			width = va_arg(ap, int);
     81c:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     820:	f1b9 0f00 	cmp.w	r9, #0
     824:	da07      	bge.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
				conv->flag_dash = true;
     826:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     82a:	f042 0204 	orr.w	r2, r2, #4
     82e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     832:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     836:	075a      	lsls	r2, r3, #29
     838:	f140 8142 	bpl.w	ac0 <CONFIG_ISR_STACK_SIZE+0x2c0>
			int arg = va_arg(ap, int);
     83c:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     840:	f1b8 0f00 	cmp.w	r8, #0
     844:	f280 8141 	bge.w	aca <CONFIG_ISR_STACK_SIZE+0x2ca>
				conv->prec_present = false;
     848:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     84c:	f36f 0341 	bfc	r3, #1, #1
     850:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     854:	f04f 38ff 	mov.w	r8, #4294967295
     858:	e137      	b.n	aca <CONFIG_ISR_STACK_SIZE+0x2ca>
		switch (*sp) {
     85a:	2b2d      	cmp	r3, #45	; 0x2d
     85c:	d00c      	beq.n	878 <CONFIG_ISR_STACK_SIZE+0x78>
     85e:	2b30      	cmp	r3, #48	; 0x30
     860:	f47f af6d 	bne.w	73e <cbvprintf+0x6a>
			conv->flag_zero = true;
     864:	2201      	movs	r2, #1
	} while (loop);
     866:	e75c      	b.n	722 <cbvprintf+0x4e>
			conv->flag_plus = true;
     868:	f04f 0c01 	mov.w	ip, #1
     86c:	e759      	b.n	722 <cbvprintf+0x4e>
			conv->flag_space = true;
     86e:	f04f 0e01 	mov.w	lr, #1
     872:	e756      	b.n	722 <cbvprintf+0x4e>
			conv->flag_hash = true;
     874:	2001      	movs	r0, #1
     876:	e754      	b.n	722 <cbvprintf+0x4e>
		switch (*sp) {
     878:	2601      	movs	r6, #1
     87a:	e752      	b.n	722 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     87c:	fb0c 0202 	mla	r2, ip, r2, r0
     880:	3a30      	subs	r2, #48	; 0x30
     882:	4633      	mov	r3, r6
     884:	461e      	mov	r6, r3
     886:	f816 0b01 	ldrb.w	r0, [r6], #1
     88a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     88e:	2f09      	cmp	r7, #9
     890:	d9f4      	bls.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
	if (sp != wp) {
     892:	4299      	cmp	r1, r3
     894:	d093      	beq.n	7be <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     896:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     89a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     89c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     89e:	f362 0141 	bfi	r1, r2, #1, #1
     8a2:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     8a6:	e78a      	b.n	7be <cbvprintf+0xea>
     8a8:	460b      	mov	r3, r1
	size_t val = 0;
     8aa:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     8ac:	f04f 0c0a 	mov.w	ip, #10
     8b0:	e7e8      	b.n	884 <CONFIG_ISR_STACK_SIZE+0x84>
		conv->prec_star = true;
     8b2:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     8b6:	f042 0204 	orr.w	r2, r2, #4
     8ba:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     8be:	3302      	adds	r3, #2
	switch (*sp) {
     8c0:	461f      	mov	r7, r3
     8c2:	f817 2b01 	ldrb.w	r2, [r7], #1
     8c6:	2a6c      	cmp	r2, #108	; 0x6c
     8c8:	d041      	beq.n	94e <CONFIG_ISR_STACK_SIZE+0x14e>
     8ca:	d825      	bhi.n	918 <CONFIG_ISR_STACK_SIZE+0x118>
     8cc:	2a68      	cmp	r2, #104	; 0x68
     8ce:	d02b      	beq.n	928 <CONFIG_ISR_STACK_SIZE+0x128>
     8d0:	2a6a      	cmp	r2, #106	; 0x6a
     8d2:	d046      	beq.n	962 <CONFIG_ISR_STACK_SIZE+0x162>
     8d4:	2a4c      	cmp	r2, #76	; 0x4c
     8d6:	d04c      	beq.n	972 <CONFIG_ISR_STACK_SIZE+0x172>
     8d8:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     8da:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     8de:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
     8e2:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     8e6:	2a78      	cmp	r2, #120	; 0x78
     8e8:	f200 80d9 	bhi.w	a9e <CONFIG_ISR_STACK_SIZE+0x29e>
     8ec:	2a57      	cmp	r2, #87	; 0x57
     8ee:	d84d      	bhi.n	98c <CONFIG_ISR_STACK_SIZE+0x18c>
     8f0:	2a41      	cmp	r2, #65	; 0x41
     8f2:	d003      	beq.n	8fc <CONFIG_ISR_STACK_SIZE+0xfc>
     8f4:	3a45      	subs	r2, #69	; 0x45
     8f6:	2a02      	cmp	r2, #2
     8f8:	f200 80d1 	bhi.w	a9e <CONFIG_ISR_STACK_SIZE+0x29e>
		conv->specifier_cat = SPECIFIER_FP;
     8fc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     900:	2204      	movs	r2, #4
     902:	f362 0302 	bfi	r3, r2, #0, #3
     906:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     90a:	2301      	movs	r3, #1
			break;
     90c:	e09e      	b.n	a4c <CONFIG_ISR_STACK_SIZE+0x24c>
		val = 10U * val + *sp++ - '0';
     90e:	fb06 2101 	mla	r1, r6, r1, r2
     912:	3930      	subs	r1, #48	; 0x30
     914:	4603      	mov	r3, r0
     916:	e764      	b.n	7e2 <cbvprintf+0x10e>
	switch (*sp) {
     918:	2a74      	cmp	r2, #116	; 0x74
     91a:	d026      	beq.n	96a <CONFIG_ISR_STACK_SIZE+0x16a>
     91c:	2a7a      	cmp	r2, #122	; 0x7a
     91e:	d1db      	bne.n	8d8 <CONFIG_ISR_STACK_SIZE+0xd8>
		conv->length_mod = LENGTH_Z;
     920:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     924:	2206      	movs	r2, #6
     926:	e00d      	b.n	944 <CONFIG_ISR_STACK_SIZE+0x144>
		if (*++sp == 'h') {
     928:	785a      	ldrb	r2, [r3, #1]
     92a:	2a68      	cmp	r2, #104	; 0x68
     92c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     930:	d106      	bne.n	940 <CONFIG_ISR_STACK_SIZE+0x140>
			conv->length_mod = LENGTH_HH;
     932:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     934:	f361 02c6 	bfi	r2, r1, #3, #4
     938:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     93c:	1c9f      	adds	r7, r3, #2
     93e:	e7cc      	b.n	8da <CONFIG_ISR_STACK_SIZE+0xda>
			conv->length_mod = LENGTH_H;
     940:	4613      	mov	r3, r2
     942:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     944:	f362 03c6 	bfi	r3, r2, #3, #4
     948:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     94c:	e7c5      	b.n	8da <CONFIG_ISR_STACK_SIZE+0xda>
		if (*++sp == 'l') {
     94e:	785a      	ldrb	r2, [r3, #1]
     950:	2a6c      	cmp	r2, #108	; 0x6c
     952:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     956:	d101      	bne.n	95c <CONFIG_ISR_STACK_SIZE+0x15c>
			conv->length_mod = LENGTH_LL;
     958:	2104      	movs	r1, #4
     95a:	e7eb      	b.n	934 <CONFIG_ISR_STACK_SIZE+0x134>
			conv->length_mod = LENGTH_L;
     95c:	4613      	mov	r3, r2
     95e:	2203      	movs	r2, #3
     960:	e7f0      	b.n	944 <CONFIG_ISR_STACK_SIZE+0x144>
		conv->length_mod = LENGTH_J;
     962:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     966:	2205      	movs	r2, #5
     968:	e7ec      	b.n	944 <CONFIG_ISR_STACK_SIZE+0x144>
		conv->length_mod = LENGTH_T;
     96a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     96e:	2207      	movs	r2, #7
     970:	e7e8      	b.n	944 <CONFIG_ISR_STACK_SIZE+0x144>
		conv->unsupported = true;
     972:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     976:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     97a:	f023 0302 	bic.w	r3, r3, #2
     97e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     982:	f043 0302 	orr.w	r3, r3, #2
     986:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     98a:	e7a6      	b.n	8da <CONFIG_ISR_STACK_SIZE+0xda>
	switch (conv->specifier) {
     98c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     990:	2920      	cmp	r1, #32
     992:	f200 8084 	bhi.w	a9e <CONFIG_ISR_STACK_SIZE+0x29e>
     996:	a001      	add	r0, pc, #4	; (adr r0, 99c <CONFIG_ISR_STACK_SIZE+0x19c>)
     998:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     99c:	00000a61 	.word	0x00000a61
     9a0:	00000a9f 	.word	0x00000a9f
     9a4:	00000a9f 	.word	0x00000a9f
     9a8:	00000a9f 	.word	0x00000a9f
     9ac:	00000a9f 	.word	0x00000a9f
     9b0:	00000a9f 	.word	0x00000a9f
     9b4:	00000a9f 	.word	0x00000a9f
     9b8:	00000a9f 	.word	0x00000a9f
     9bc:	00000a9f 	.word	0x00000a9f
     9c0:	000008fd 	.word	0x000008fd
     9c4:	00000a9f 	.word	0x00000a9f
     9c8:	00000a61 	.word	0x00000a61
     9cc:	00000a21 	.word	0x00000a21
     9d0:	000008fd 	.word	0x000008fd
     9d4:	000008fd 	.word	0x000008fd
     9d8:	000008fd 	.word	0x000008fd
     9dc:	00000a9f 	.word	0x00000a9f
     9e0:	00000a21 	.word	0x00000a21
     9e4:	00000a9f 	.word	0x00000a9f
     9e8:	00000a9f 	.word	0x00000a9f
     9ec:	00000a9f 	.word	0x00000a9f
     9f0:	00000a9f 	.word	0x00000a9f
     9f4:	00000a69 	.word	0x00000a69
     9f8:	00000a61 	.word	0x00000a61
     9fc:	00000a85 	.word	0x00000a85
     a00:	00000a9f 	.word	0x00000a9f
     a04:	00000a9f 	.word	0x00000a9f
     a08:	00000a85 	.word	0x00000a85
     a0c:	00000a9f 	.word	0x00000a9f
     a10:	00000a61 	.word	0x00000a61
     a14:	00000a9f 	.word	0x00000a9f
     a18:	00000a9f 	.word	0x00000a9f
     a1c:	00000a61 	.word	0x00000a61
		conv->specifier_cat = SPECIFIER_SINT;
     a20:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     a24:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     a26:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
     a2a:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     a2e:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
     a30:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
     a34:	bf02      	ittt	eq
     a36:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
     a3a:	f041 0101 	orreq.w	r1, r1, #1
     a3e:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
     a42:	2a63      	cmp	r2, #99	; 0x63
     a44:	d131      	bne.n	aaa <CONFIG_ISR_STACK_SIZE+0x2aa>
			unsupported = (conv->length_mod != LENGTH_NONE);
     a46:	3b00      	subs	r3, #0
     a48:	bf18      	it	ne
     a4a:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
     a4c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     a50:	f3c2 0140 	ubfx	r1, r2, #1, #1
     a54:	430b      	orrs	r3, r1
     a56:	f363 0241 	bfi	r2, r3, #1, #1
     a5a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     a5e:	e6d8      	b.n	812 <CONFIG_ISR_STACK_SIZE+0x12>
		conv->specifier_cat = SPECIFIER_UINT;
     a60:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
     a64:	2002      	movs	r0, #2
     a66:	e7de      	b.n	a26 <CONFIG_ISR_STACK_SIZE+0x226>
		conv->specifier_cat = SPECIFIER_PTR;
     a68:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     a6c:	f003 0378 	and.w	r3, r3, #120	; 0x78
     a70:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
     a74:	2103      	movs	r1, #3
     a76:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
     a7a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
     a7c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
     a80:	4143      	adcs	r3, r0
     a82:	e7e3      	b.n	a4c <CONFIG_ISR_STACK_SIZE+0x24c>
		conv->specifier_cat = SPECIFIER_PTR;
     a84:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     a88:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
     a8a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
     a8e:	f361 0202 	bfi	r2, r1, #0, #3
     a92:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
     a96:	bf14      	ite	ne
     a98:	2301      	movne	r3, #1
     a9a:	2300      	moveq	r3, #0
     a9c:	e7d6      	b.n	a4c <CONFIG_ISR_STACK_SIZE+0x24c>
		conv->invalid = true;
     a9e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     aa2:	f043 0301 	orr.w	r3, r3, #1
     aa6:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
     aaa:	2300      	movs	r3, #0
     aac:	e7ce      	b.n	a4c <CONFIG_ISR_STACK_SIZE+0x24c>
		} else if (conv->width_present) {
     aae:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
     ab2:	2a00      	cmp	r2, #0
			width = conv->width_value;
     ab4:	bfb4      	ite	lt
     ab6:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
     aba:	f04f 39ff 	movge.w	r9, #4294967295
     abe:	e6ba      	b.n	836 <CONFIG_ISR_STACK_SIZE+0x36>
		} else if (conv->prec_present) {
     ac0:	079b      	lsls	r3, r3, #30
     ac2:	f57f aec7 	bpl.w	854 <CONFIG_ISR_STACK_SIZE+0x54>
			precision = conv->prec_value;
     ac6:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
     aca:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
     ace:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
     ad0:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
     ad4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
     ad8:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
     adc:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
     ade:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
     ae2:	d138      	bne.n	b56 <CONFIG_ISR_STACK_SIZE+0x356>
			switch (length_mod) {
     ae4:	1ecb      	subs	r3, r1, #3
     ae6:	2b04      	cmp	r3, #4
     ae8:	d822      	bhi.n	b30 <CONFIG_ISR_STACK_SIZE+0x330>
     aea:	e8df f003 	tbb	[pc, r3]
     aee:	0903      	.short	0x0903
     af0:	2109      	.short	0x2109
     af2:	21          	.byte	0x21
     af3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
     af4:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
     af8:	17da      	asrs	r2, r3, #31
     afa:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
     afe:	e006      	b.n	b0e <CONFIG_ISR_STACK_SIZE+0x30e>
					(sint_value_type)va_arg(ap, intmax_t);
     b00:	3407      	adds	r4, #7
     b02:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
     b06:	e8f4 2302 	ldrd	r2, r3, [r4], #8
     b0a:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
     b0e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
     b12:	f013 0603 	ands.w	r6, r3, #3
     b16:	d056      	beq.n	bc6 <CONFIG_ISR_STACK_SIZE+0x3c6>
			OUTS(sp, fp);
     b18:	9802      	ldr	r0, [sp, #8]
     b1a:	463b      	mov	r3, r7
     b1c:	4652      	mov	r2, sl
     b1e:	4659      	mov	r1, fp
     b20:	f003 fcc8 	bl	44b4 <outs>
     b24:	2800      	cmp	r0, #0
     b26:	f2c0 8142 	blt.w	dae <CONFIG_ISR_STACK_SIZE+0x5ae>
     b2a:	4405      	add	r5, r0
			continue;
     b2c:	46ba      	mov	sl, r7
     b2e:	e5d9      	b.n	6e4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
     b30:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
     b34:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
     b36:	ea4f 72e3 	mov.w	r2, r3, asr #31
     b3a:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     b3e:	d105      	bne.n	b4c <CONFIG_ISR_STACK_SIZE+0x34c>
				value->uint = (unsigned char)value->uint;
     b40:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
     b44:	930a      	str	r3, [sp, #40]	; 0x28
     b46:	2300      	movs	r3, #0
     b48:	930b      	str	r3, [sp, #44]	; 0x2c
     b4a:	e7e0      	b.n	b0e <CONFIG_ISR_STACK_SIZE+0x30e>
			} else if (length_mod == LENGTH_H) {
     b4c:	2902      	cmp	r1, #2
     b4e:	d1de      	bne.n	b0e <CONFIG_ISR_STACK_SIZE+0x30e>
				value->sint = (short)value->sint;
     b50:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
     b54:	e7d0      	b.n	af8 <CONFIG_ISR_STACK_SIZE+0x2f8>
		} else if (specifier_cat == SPECIFIER_UINT) {
     b56:	2b02      	cmp	r3, #2
     b58:	d123      	bne.n	ba2 <CONFIG_ISR_STACK_SIZE+0x3a2>
			switch (length_mod) {
     b5a:	1ecb      	subs	r3, r1, #3
     b5c:	2b04      	cmp	r3, #4
     b5e:	d813      	bhi.n	b88 <CONFIG_ISR_STACK_SIZE+0x388>
     b60:	e8df f003 	tbb	[pc, r3]
     b64:	120a0a03 	.word	0x120a0a03
     b68:	12          	.byte	0x12
     b69:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
     b6a:	6822      	ldr	r2, [r4, #0]
     b6c:	920a      	str	r2, [sp, #40]	; 0x28
     b6e:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
     b70:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
     b72:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
     b74:	4604      	mov	r4, r0
     b76:	e7ca      	b.n	b0e <CONFIG_ISR_STACK_SIZE+0x30e>
					(uint_value_type)va_arg(ap,
     b78:	1de0      	adds	r0, r4, #7
     b7a:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
     b7e:	e8f0 2302 	ldrd	r2, r3, [r0], #8
     b82:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
     b86:	e7f5      	b.n	b74 <CONFIG_ISR_STACK_SIZE+0x374>
					(uint_value_type)va_arg(ap, size_t);
     b88:	f854 3b04 	ldr.w	r3, [r4], #4
     b8c:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
     b8e:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
     b90:	f04f 0300 	mov.w	r3, #0
     b94:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
     b96:	d0d3      	beq.n	b40 <CONFIG_ISR_STACK_SIZE+0x340>
			} else if (length_mod == LENGTH_H) {
     b98:	2902      	cmp	r1, #2
     b9a:	d1b8      	bne.n	b0e <CONFIG_ISR_STACK_SIZE+0x30e>
				value->uint = (unsigned short)value->uint;
     b9c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
     ba0:	e7d0      	b.n	b44 <CONFIG_ISR_STACK_SIZE+0x344>
		} else if (specifier_cat == SPECIFIER_FP) {
     ba2:	2b04      	cmp	r3, #4
     ba4:	d109      	bne.n	bba <CONFIG_ISR_STACK_SIZE+0x3ba>
					(sint_value_type)va_arg(ap, long long);
     ba6:	1de3      	adds	r3, r4, #7
     ba8:	f023 0307 	bic.w	r3, r3, #7
     bac:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
     bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
     bb4:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
     bb8:	e7a9      	b.n	b0e <CONFIG_ISR_STACK_SIZE+0x30e>
		} else if (specifier_cat == SPECIFIER_PTR) {
     bba:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
     bbc:	bf04      	itt	eq
     bbe:	f854 3b04 	ldreq.w	r3, [r4], #4
     bc2:	930a      	streq	r3, [sp, #40]	; 0x28
     bc4:	e7a3      	b.n	b0e <CONFIG_ISR_STACK_SIZE+0x30e>
		switch (conv->specifier) {
     bc6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     bca:	2878      	cmp	r0, #120	; 0x78
     bcc:	d8ae      	bhi.n	b2c <CONFIG_ISR_STACK_SIZE+0x32c>
     bce:	2862      	cmp	r0, #98	; 0x62
     bd0:	d822      	bhi.n	c18 <CONFIG_ISR_STACK_SIZE+0x418>
     bd2:	2825      	cmp	r0, #37	; 0x25
     bd4:	f43f ad8f 	beq.w	6f6 <cbvprintf+0x22>
     bd8:	2858      	cmp	r0, #88	; 0x58
     bda:	d1a7      	bne.n	b2c <CONFIG_ISR_STACK_SIZE+0x32c>
			bps = encode_uint(value->uint, conv, buf, bpe);
     bdc:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     be0:	9300      	str	r3, [sp, #0]
     be2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
     be6:	ab04      	add	r3, sp, #16
     be8:	aa0c      	add	r2, sp, #48	; 0x30
     bea:	f003 fc1d 	bl	4428 <encode_uint>
     bee:	4682      	mov	sl, r0
			if (precision >= 0) {
     bf0:	f1b8 0f00 	cmp.w	r8, #0
     bf4:	f10d 0026 	add.w	r0, sp, #38	; 0x26
     bf8:	db0c      	blt.n	c14 <CONFIG_ISR_STACK_SIZE+0x414>
				conv->flag_zero = false;
     bfa:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
     bfe:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
     c02:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
     c06:	4598      	cmp	r8, r3
				conv->flag_zero = false;
     c08:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
     c0c:	d902      	bls.n	c14 <CONFIG_ISR_STACK_SIZE+0x414>
					conv->pad0_value = precision - (int)len;
     c0e:	eba8 0303 	sub.w	r3, r8, r3
     c12:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
     c14:	4680      	mov	r8, r0
     c16:	e03d      	b.n	c94 <CONFIG_ISR_STACK_SIZE+0x494>
		switch (conv->specifier) {
     c18:	3863      	subs	r0, #99	; 0x63
     c1a:	2815      	cmp	r0, #21
     c1c:	d886      	bhi.n	b2c <CONFIG_ISR_STACK_SIZE+0x32c>
     c1e:	a201      	add	r2, pc, #4	; (adr r2, c24 <CONFIG_ISR_STACK_SIZE+0x424>)
     c20:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
     c24:	00000ca5 	.word	0x00000ca5
     c28:	00000d09 	.word	0x00000d09
     c2c:	00000b2d 	.word	0x00000b2d
     c30:	00000b2d 	.word	0x00000b2d
     c34:	00000b2d 	.word	0x00000b2d
     c38:	00000b2d 	.word	0x00000b2d
     c3c:	00000d09 	.word	0x00000d09
     c40:	00000b2d 	.word	0x00000b2d
     c44:	00000b2d 	.word	0x00000b2d
     c48:	00000b2d 	.word	0x00000b2d
     c4c:	00000b2d 	.word	0x00000b2d
     c50:	00000d63 	.word	0x00000d63
     c54:	00000d31 	.word	0x00000d31
     c58:	00000d35 	.word	0x00000d35
     c5c:	00000b2d 	.word	0x00000b2d
     c60:	00000b2d 	.word	0x00000b2d
     c64:	00000c7d 	.word	0x00000c7d
     c68:	00000b2d 	.word	0x00000b2d
     c6c:	00000d31 	.word	0x00000d31
     c70:	00000b2d 	.word	0x00000b2d
     c74:	00000b2d 	.word	0x00000b2d
     c78:	00000d31 	.word	0x00000d31
			if (precision >= 0) {
     c7c:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
     c80:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
     c84:	db0a      	blt.n	c9c <CONFIG_ISR_STACK_SIZE+0x49c>
				len = strnlen(bps, precision);
     c86:	4641      	mov	r1, r8
     c88:	4650      	mov	r0, sl
     c8a:	f003 fc4c 	bl	4526 <strnlen>
			bpe = bps + len;
     c8e:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
     c92:	2600      	movs	r6, #0
		if (bps == NULL) {
     c94:	f1ba 0f00 	cmp.w	sl, #0
     c98:	d10c      	bne.n	cb4 <CONFIG_ISR_STACK_SIZE+0x4b4>
     c9a:	e747      	b.n	b2c <CONFIG_ISR_STACK_SIZE+0x32c>
				len = strlen(bps);
     c9c:	4650      	mov	r0, sl
     c9e:	f003 fc3b 	bl	4518 <strlen>
     ca2:	e7f4      	b.n	c8e <CONFIG_ISR_STACK_SIZE+0x48e>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
     ca4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
     ca6:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
     caa:	2600      	movs	r6, #0
			bps = buf;
     cac:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
     cb0:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
     cb4:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
     cb8:	b106      	cbz	r6, cbc <CONFIG_ISR_STACK_SIZE+0x4bc>
			nj_len += 1U;
     cba:	3301      	adds	r3, #1
		if (conv->altform_0c) {
     cbc:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
     cc0:	06d0      	lsls	r0, r2, #27
     cc2:	d568      	bpl.n	d96 <CONFIG_ISR_STACK_SIZE+0x596>
			nj_len += 2U;
     cc4:	3302      	adds	r3, #2
		if (conv->pad_fp) {
     cc6:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
     cc8:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
     cca:	bf48      	it	mi
     ccc:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
     cce:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
     cd0:	bf48      	it	mi
     cd2:	189b      	addmi	r3, r3, r2
		if (width > 0) {
     cd4:	f1b9 0f00 	cmp.w	r9, #0
     cd8:	dd76      	ble.n	dc8 <CONFIG_ISR_STACK_SIZE+0x5c8>
			if (!conv->flag_dash) {
     cda:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
     cde:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
     ce2:	f3c2 0380 	ubfx	r3, r2, #2, #1
     ce6:	9303      	str	r3, [sp, #12]
     ce8:	0753      	lsls	r3, r2, #29
     cea:	d46d      	bmi.n	dc8 <CONFIG_ISR_STACK_SIZE+0x5c8>
				if (conv->flag_zero) {
     cec:	0650      	lsls	r0, r2, #25
     cee:	d561      	bpl.n	db4 <CONFIG_ISR_STACK_SIZE+0x5b4>
					if (sign != 0) {
     cf0:	b146      	cbz	r6, d04 <CONFIG_ISR_STACK_SIZE+0x504>
						OUTC(sign);
     cf2:	9b02      	ldr	r3, [sp, #8]
     cf4:	4659      	mov	r1, fp
     cf6:	4630      	mov	r0, r6
     cf8:	4798      	blx	r3
     cfa:	2800      	cmp	r0, #0
     cfc:	db57      	blt.n	dae <CONFIG_ISR_STACK_SIZE+0x5ae>
						sign = 0;
     cfe:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
     d00:	3501      	adds	r5, #1
						sign = 0;
     d02:	461e      	mov	r6, r3
					pad = '0';
     d04:	2330      	movs	r3, #48	; 0x30
     d06:	e056      	b.n	db6 <CONFIG_ISR_STACK_SIZE+0x5b6>
			if (conv->flag_plus) {
     d08:	071e      	lsls	r6, r3, #28
     d0a:	d40f      	bmi.n	d2c <CONFIG_ISR_STACK_SIZE+0x52c>
				sign = ' ';
     d0c:	f013 0610 	ands.w	r6, r3, #16
     d10:	bf18      	it	ne
     d12:	2620      	movne	r6, #32
			sint = value->sint;
     d14:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
     d18:	2b00      	cmp	r3, #0
     d1a:	f6bf af5f 	bge.w	bdc <CONFIG_ISR_STACK_SIZE+0x3dc>
				value->uint = (uint_value_type)-sint;
     d1e:	4252      	negs	r2, r2
     d20:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     d24:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
     d28:	262d      	movs	r6, #45	; 0x2d
     d2a:	e757      	b.n	bdc <CONFIG_ISR_STACK_SIZE+0x3dc>
				sign = '+';
     d2c:	262b      	movs	r6, #43	; 0x2b
     d2e:	e7f1      	b.n	d14 <CONFIG_ISR_STACK_SIZE+0x514>
		switch (conv->specifier) {
     d30:	2600      	movs	r6, #0
     d32:	e753      	b.n	bdc <CONFIG_ISR_STACK_SIZE+0x3dc>
			if (value->ptr != NULL) {
     d34:	980a      	ldr	r0, [sp, #40]	; 0x28
     d36:	b340      	cbz	r0, d8a <CONFIG_ISR_STACK_SIZE+0x58a>
				bps = encode_uint((uintptr_t)value->ptr, conv,
     d38:	f10d 0326 	add.w	r3, sp, #38	; 0x26
     d3c:	9300      	str	r3, [sp, #0]
     d3e:	aa0c      	add	r2, sp, #48	; 0x30
     d40:	ab04      	add	r3, sp, #16
     d42:	2100      	movs	r1, #0
     d44:	f003 fb70 	bl	4428 <encode_uint>
				conv->altform_0c = true;
     d48:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
     d4c:	f003 03ef 	and.w	r3, r3, #239	; 0xef
     d50:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
     d54:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
     d58:	4682      	mov	sl, r0
				conv->altform_0c = true;
     d5a:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
     d5e:	2600      	movs	r6, #0
				goto prec_int_pad0;
     d60:	e746      	b.n	bf0 <CONFIG_ISR_STACK_SIZE+0x3f0>
				store_count(conv, value->ptr, count);
     d62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
     d64:	2907      	cmp	r1, #7
     d66:	f63f aee1 	bhi.w	b2c <CONFIG_ISR_STACK_SIZE+0x32c>
     d6a:	e8df f001 	tbb	[pc, r1]
     d6e:	040c      	.short	0x040c
     d70:	08080c06 	.word	0x08080c06
     d74:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
     d76:	701d      	strb	r5, [r3, #0]
		break;
     d78:	e6d8      	b.n	b2c <CONFIG_ISR_STACK_SIZE+0x32c>
		*(short *)dp = (short)count;
     d7a:	801d      	strh	r5, [r3, #0]
		break;
     d7c:	e6d6      	b.n	b2c <CONFIG_ISR_STACK_SIZE+0x32c>
		*(intmax_t *)dp = (intmax_t)count;
     d7e:	17ea      	asrs	r2, r5, #31
     d80:	e9c3 5200 	strd	r5, r2, [r3]
		break;
     d84:	e6d2      	b.n	b2c <CONFIG_ISR_STACK_SIZE+0x32c>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
     d86:	601d      	str	r5, [r3, #0]
		break;
     d88:	e6d0      	b.n	b2c <CONFIG_ISR_STACK_SIZE+0x32c>
			bps = "(nil)";
     d8a:	f8df a0c8 	ldr.w	sl, [pc, #200]	; e54 <CONFIG_ISR_STACK_SIZE+0x654>
     d8e:	4606      	mov	r6, r0
			bpe = bps + 5;
     d90:	f10a 0805 	add.w	r8, sl, #5
     d94:	e78e      	b.n	cb4 <CONFIG_ISR_STACK_SIZE+0x4b4>
		} else if (conv->altform_0) {
     d96:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
     d98:	bf48      	it	mi
     d9a:	3301      	addmi	r3, #1
     d9c:	e793      	b.n	cc6 <CONFIG_ISR_STACK_SIZE+0x4c6>
					OUTC(pad);
     d9e:	4618      	mov	r0, r3
     da0:	9303      	str	r3, [sp, #12]
     da2:	4659      	mov	r1, fp
     da4:	9b02      	ldr	r3, [sp, #8]
     da6:	4798      	blx	r3
     da8:	2800      	cmp	r0, #0
     daa:	9b03      	ldr	r3, [sp, #12]
     dac:	da04      	bge.n	db8 <CONFIG_ISR_STACK_SIZE+0x5b8>
#undef OUTS
#undef OUTC
}
     dae:	b011      	add	sp, #68	; 0x44
     db0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
     db4:	2320      	movs	r3, #32
     db6:	444d      	add	r5, r9
     db8:	464a      	mov	r2, r9
				while (width-- > 0) {
     dba:	2a00      	cmp	r2, #0
     dbc:	eba5 0109 	sub.w	r1, r5, r9
     dc0:	f109 39ff 	add.w	r9, r9, #4294967295
     dc4:	dceb      	bgt.n	d9e <CONFIG_ISR_STACK_SIZE+0x59e>
     dc6:	460d      	mov	r5, r1
		if (sign != 0) {
     dc8:	b136      	cbz	r6, dd8 <CONFIG_ISR_STACK_SIZE+0x5d8>
			OUTC(sign);
     dca:	9b02      	ldr	r3, [sp, #8]
     dcc:	4659      	mov	r1, fp
     dce:	4630      	mov	r0, r6
     dd0:	4798      	blx	r3
     dd2:	2800      	cmp	r0, #0
     dd4:	dbeb      	blt.n	dae <CONFIG_ISR_STACK_SIZE+0x5ae>
     dd6:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
     dd8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     ddc:	06d9      	lsls	r1, r3, #27
     dde:	d401      	bmi.n	de4 <CONFIG_ISR_STACK_SIZE+0x5e4>
     de0:	071a      	lsls	r2, r3, #28
     de2:	d506      	bpl.n	df2 <CONFIG_ISR_STACK_SIZE+0x5f2>
				OUTC('0');
     de4:	9b02      	ldr	r3, [sp, #8]
     de6:	4659      	mov	r1, fp
     de8:	2030      	movs	r0, #48	; 0x30
     dea:	4798      	blx	r3
     dec:	2800      	cmp	r0, #0
     dee:	dbde      	blt.n	dae <CONFIG_ISR_STACK_SIZE+0x5ae>
     df0:	3501      	adds	r5, #1
			if (conv->altform_0c) {
     df2:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     df6:	06db      	lsls	r3, r3, #27
     df8:	d507      	bpl.n	e0a <CONFIG_ISR_STACK_SIZE+0x60a>
				OUTC(conv->specifier);
     dfa:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
     dfe:	9b02      	ldr	r3, [sp, #8]
     e00:	4659      	mov	r1, fp
     e02:	4798      	blx	r3
     e04:	2800      	cmp	r0, #0
     e06:	dbd2      	blt.n	dae <CONFIG_ISR_STACK_SIZE+0x5ae>
     e08:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
     e0a:	9e0d      	ldr	r6, [sp, #52]	; 0x34
     e0c:	442e      	add	r6, r5
     e0e:	1b73      	subs	r3, r6, r5
     e10:	2b00      	cmp	r3, #0
     e12:	dc16      	bgt.n	e42 <CONFIG_ISR_STACK_SIZE+0x642>
			OUTS(bps, bpe);
     e14:	9802      	ldr	r0, [sp, #8]
     e16:	4643      	mov	r3, r8
     e18:	4652      	mov	r2, sl
     e1a:	4659      	mov	r1, fp
     e1c:	f003 fb4a 	bl	44b4 <outs>
     e20:	2800      	cmp	r0, #0
     e22:	dbc4      	blt.n	dae <CONFIG_ISR_STACK_SIZE+0x5ae>
     e24:	4405      	add	r5, r0
		while (width > 0) {
     e26:	44a9      	add	r9, r5
     e28:	eba9 0305 	sub.w	r3, r9, r5
     e2c:	2b00      	cmp	r3, #0
     e2e:	f77f ae7d 	ble.w	b2c <CONFIG_ISR_STACK_SIZE+0x32c>
			OUTC(' ');
     e32:	9b02      	ldr	r3, [sp, #8]
     e34:	4659      	mov	r1, fp
     e36:	2020      	movs	r0, #32
     e38:	4798      	blx	r3
     e3a:	2800      	cmp	r0, #0
     e3c:	dbb7      	blt.n	dae <CONFIG_ISR_STACK_SIZE+0x5ae>
     e3e:	3501      	adds	r5, #1
			--width;
     e40:	e7f2      	b.n	e28 <CONFIG_ISR_STACK_SIZE+0x628>
				OUTC('0');
     e42:	9b02      	ldr	r3, [sp, #8]
     e44:	4659      	mov	r1, fp
     e46:	2030      	movs	r0, #48	; 0x30
     e48:	4798      	blx	r3
     e4a:	2800      	cmp	r0, #0
     e4c:	dbaf      	blt.n	dae <CONFIG_ISR_STACK_SIZE+0x5ae>
     e4e:	3501      	adds	r5, #1
     e50:	e7dd      	b.n	e0e <CONFIG_ISR_STACK_SIZE+0x60e>
     e52:	bf00      	nop
     e54:	000051ab 	.word	0x000051ab

00000e58 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
     e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     e5c:	4605      	mov	r5, r0
     e5e:	f04f 0320 	mov.w	r3, #32
     e62:	f3ef 8611 	mrs	r6, BASEPRI
     e66:	f383 8812 	msr	BASEPRI_MAX, r3
     e6a:	f3bf 8f6f 	isb	sy
	return list->head;
     e6e:	4b0e      	ldr	r3, [pc, #56]	; (ea8 <pm_state_notify+0x50>)
     e70:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     e72:	b19c      	cbz	r4, e9c <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
     e74:	4f0d      	ldr	r7, [pc, #52]	; (eac <pm_state_notify+0x54>)
     e76:	f8df 8038 	ldr.w	r8, [pc, #56]	; eb0 <pm_state_notify+0x58>
     e7a:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
     e7e:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
     e82:	2d00      	cmp	r5, #0
     e84:	bf08      	it	eq
     e86:	4613      	moveq	r3, r2
		if (callback) {
     e88:	b12b      	cbz	r3, e96 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
     e8a:	f898 2014 	ldrb.w	r2, [r8, #20]
     e8e:	fb09 f202 	mul.w	r2, r9, r2
     e92:	5cb8      	ldrb	r0, [r7, r2]
     e94:	4798      	blx	r3
	return node->next;
     e96:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
     e98:	2c00      	cmp	r4, #0
     e9a:	d1f0      	bne.n	e7e <pm_state_notify+0x26>
	__asm__ volatile(
     e9c:	f386 8811 	msr	BASEPRI, r6
     ea0:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
     ea4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     ea8:	200001d8 	.word	0x200001d8
     eac:	200001e0 	.word	0x200001e0
     eb0:	20000458 	.word	0x20000458

00000eb4 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     eb4:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
     eb6:	2301      	movs	r3, #1
     eb8:	f000 001f 	and.w	r0, r0, #31
     ebc:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
     ec0:	4b07      	ldr	r3, [pc, #28]	; (ee0 <atomic_clear_bit.constprop.0+0x2c>)
     ec2:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     ec6:	43c0      	mvns	r0, r0
     ec8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
     ecc:	e853 2f00 	ldrex	r2, [r3]
     ed0:	4002      	ands	r2, r0
     ed2:	e843 2100 	strex	r1, r2, [r3]
     ed6:	2900      	cmp	r1, #0
     ed8:	d1f8      	bne.n	ecc <atomic_clear_bit.constprop.0+0x18>
     eda:	f3bf 8f5b 	dmb	ish
}
     ede:	4770      	bx	lr
     ee0:	200001ec 	.word	0x200001ec

00000ee4 <pm_system_resume>:

void pm_system_resume(void)
{
     ee4:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
     ee6:	4b1a      	ldr	r3, [pc, #104]	; (f50 <pm_system_resume+0x6c>)
     ee8:	7d1c      	ldrb	r4, [r3, #20]
     eea:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
     eee:	f004 031f 	and.w	r3, r4, #31
     ef2:	2201      	movs	r2, #1
     ef4:	409a      	lsls	r2, r3
     ef6:	4b17      	ldr	r3, [pc, #92]	; (f54 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
     ef8:	0961      	lsrs	r1, r4, #5
     efa:	43d0      	mvns	r0, r2
     efc:	eb03 0381 	add.w	r3, r3, r1, lsl #2
     f00:	e853 1f00 	ldrex	r1, [r3]
     f04:	ea01 0500 	and.w	r5, r1, r0
     f08:	e843 5c00 	strex	ip, r5, [r3]
     f0c:	f1bc 0f00 	cmp.w	ip, #0
     f10:	d1f6      	bne.n	f00 <pm_system_resume+0x1c>
     f12:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
     f16:	4211      	tst	r1, r2
     f18:	d013      	beq.n	f42 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
     f1a:	4b0f      	ldr	r3, [pc, #60]	; (f58 <pm_system_resume+0x74>)
     f1c:	4d0f      	ldr	r5, [pc, #60]	; (f5c <pm_system_resume+0x78>)
     f1e:	b18b      	cbz	r3, f44 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
     f20:	230c      	movs	r3, #12
     f22:	4363      	muls	r3, r4
     f24:	18ea      	adds	r2, r5, r3
     f26:	5ce8      	ldrb	r0, [r5, r3]
     f28:	7851      	ldrb	r1, [r2, #1]
     f2a:	f003 fb3b 	bl	45a4 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
     f2e:	2000      	movs	r0, #0
     f30:	f7ff ff92 	bl	e58 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
     f34:	230c      	movs	r3, #12
     f36:	435c      	muls	r4, r3
     f38:	192a      	adds	r2, r5, r4
     f3a:	2300      	movs	r3, #0
     f3c:	512b      	str	r3, [r5, r4]
     f3e:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
     f42:	bd38      	pop	{r3, r4, r5, pc}
     f44:	f383 8811 	msr	BASEPRI, r3
     f48:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
     f4c:	e7ef      	b.n	f2e <pm_system_resume+0x4a>
     f4e:	bf00      	nop
     f50:	20000458 	.word	0x20000458
     f54:	200001f0 	.word	0x200001f0
     f58:	000045a5 	.word	0x000045a5
     f5c:	200001e0 	.word	0x200001e0

00000f60 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
     f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
     f64:	4b32      	ldr	r3, [pc, #200]	; (1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
     f66:	4a33      	ldr	r2, [pc, #204]	; (1034 <CONFIG_FPROTECT_BLOCK_SIZE+0x34>)
     f68:	7d1c      	ldrb	r4, [r3, #20]
     f6a:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
     f6e:	0963      	lsrs	r3, r4, #5
     f70:	ea4f 0983 	mov.w	r9, r3, lsl #2
     f74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
     f78:	4e2f      	ldr	r6, [pc, #188]	; (1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>)
     f7a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
     f7e:	f004 081f 	and.w	r8, r4, #31
     f82:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
     f86:	f013 0f01 	tst.w	r3, #1
{
     f8a:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
     f8c:	d10a      	bne.n	fa4 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
     f8e:	4601      	mov	r1, r0
     f90:	4620      	mov	r0, r4
     f92:	f000 f869 	bl	1068 <pm_policy_next_state>
		if (info != NULL) {
     f96:	b128      	cbz	r0, fa4 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
     f98:	c807      	ldmia	r0, {r0, r1, r2}
     f9a:	230c      	movs	r3, #12
     f9c:	fb03 6304 	mla	r3, r3, r4, r6
     fa0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
     fa4:	230c      	movs	r3, #12
     fa6:	4363      	muls	r3, r4
     fa8:	18f2      	adds	r2, r6, r3
     faa:	5cf5      	ldrb	r5, [r6, r3]
     fac:	b92d      	cbnz	r5, fba <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
     fae:	4620      	mov	r0, r4
     fb0:	f7ff ff80 	bl	eb4 <atomic_clear_bit.constprop.0>
		ret = false;
     fb4:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
     fb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
     fba:	1c7b      	adds	r3, r7, #1
     fbc:	d00f      	beq.n	fde <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
     fbe:	f8d2 c008 	ldr.w	ip, [r2, #8]
     fc2:	481e      	ldr	r0, [pc, #120]	; (103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>)
     fc4:	4a1e      	ldr	r2, [pc, #120]	; (1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>)
     fc6:	f44f 4500 	mov.w	r5, #32768	; 0x8000
     fca:	2100      	movs	r1, #0
     fcc:	2300      	movs	r3, #0
     fce:	fbec 0105 	umlal	r0, r1, ip, r5
     fd2:	f7ff f885 	bl	e0 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
     fd6:	2101      	movs	r1, #1
     fd8:	1a38      	subs	r0, r7, r0
     fda:	f003 feb7 	bl	4d4c <z_set_timeout_expiry>
	k_sched_lock();
     fde:	f002 fd31 	bl	3a44 <k_sched_lock>
	pm_state_notify(true);
     fe2:	2001      	movs	r0, #1
     fe4:	f7ff ff38 	bl	e58 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
     fe8:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
     fec:	2301      	movs	r3, #1
     fee:	fa03 f808 	lsl.w	r8, r3, r8
     ff2:	4b14      	ldr	r3, [pc, #80]	; (1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>)
     ff4:	4499      	add	r9, r3
     ff6:	e859 3f00 	ldrex	r3, [r9]
     ffa:	ea43 0308 	orr.w	r3, r3, r8
     ffe:	e849 3200 	strex	r2, r3, [r9]
    1002:	2a00      	cmp	r2, #0
    1004:	d1f7      	bne.n	ff6 <pm_system_suspend+0x96>
    1006:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    100a:	4b0f      	ldr	r3, [pc, #60]	; (1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>)
    100c:	b133      	cbz	r3, 101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>
		pm_state_set(info->state, info->substate_id);
    100e:	230c      	movs	r3, #12
    1010:	4363      	muls	r3, r4
    1012:	18f2      	adds	r2, r6, r3
    1014:	5cf0      	ldrb	r0, [r6, r3]
    1016:	7851      	ldrb	r1, [r2, #1]
    1018:	f003 fab8 	bl	458c <pm_state_set>
	pm_system_resume();
    101c:	f7ff ff62 	bl	ee4 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    1020:	4620      	mov	r0, r4
    1022:	f7ff ff47 	bl	eb4 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    1026:	f002 fe95 	bl	3d54 <k_sched_unlock>
	bool ret = true;
    102a:	2001      	movs	r0, #1
    102c:	e7c3      	b.n	fb6 <pm_system_suspend+0x56>
    102e:	bf00      	nop
    1030:	20000458 	.word	0x20000458
    1034:	200001ec 	.word	0x200001ec
    1038:	200001e0 	.word	0x200001e0
    103c:	000f423f 	.word	0x000f423f
    1040:	000f4240 	.word	0x000f4240
    1044:	200001f0 	.word	0x200001f0
    1048:	0000458d 	.word	0x0000458d

0000104c <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    104c:	4b05      	ldr	r3, [pc, #20]	; (1064 <pm_policy_state_lock_is_active+0x18>)
    104e:	f3bf 8f5b 	dmb	ish
    1052:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1056:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    105a:	3800      	subs	r0, #0
    105c:	bf18      	it	ne
    105e:	2001      	movne	r0, #1
    1060:	4770      	bx	lr
    1062:	bf00      	nop
    1064:	200001f4 	.word	0x200001f4

00001068 <pm_policy_next_state>:
{
    1068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    106c:	b085      	sub	sp, #20
    106e:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    1070:	a903      	add	r1, sp, #12
    1072:	f000 f847 	bl	1104 <pm_state_cpu_get_all>
    1076:	f8df 8080 	ldr.w	r8, [pc, #128]	; 10f8 <pm_policy_next_state+0x90>
    107a:	f8df a080 	ldr.w	sl, [pc, #128]	; 10fc <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    107e:	1e44      	subs	r4, r0, #1
    1080:	b224      	sxth	r4, r4
    1082:	f04f 0b00 	mov.w	fp, #0
    1086:	1c63      	adds	r3, r4, #1
    1088:	d104      	bne.n	1094 <pm_policy_next_state+0x2c>
	return NULL;
    108a:	2600      	movs	r6, #0
}
    108c:	4630      	mov	r0, r6
    108e:	b005      	add	sp, #20
    1090:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    1094:	9a03      	ldr	r2, [sp, #12]
    1096:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    109a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    109e:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    10a2:	f7ff ffd3 	bl	104c <pm_policy_state_lock_is_active>
    10a6:	4605      	mov	r5, r0
    10a8:	bb10      	cbnz	r0, 10f0 <pm_policy_next_state+0x88>
    10aa:	6870      	ldr	r0, [r6, #4]
    10ac:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    10b0:	46c4      	mov	ip, r8
    10b2:	4629      	mov	r1, r5
    10b4:	fbe0 c109 	umlal	ip, r1, r0, r9
    10b8:	4652      	mov	r2, sl
    10ba:	465b      	mov	r3, fp
    10bc:	4660      	mov	r0, ip
    10be:	f7ff f80f 	bl	e0 <__aeabi_uldivmod>
    10c2:	9001      	str	r0, [sp, #4]
    10c4:	68b0      	ldr	r0, [r6, #8]
    10c6:	46c4      	mov	ip, r8
    10c8:	4629      	mov	r1, r5
    10ca:	fbe0 c109 	umlal	ip, r1, r0, r9
    10ce:	465b      	mov	r3, fp
    10d0:	4652      	mov	r2, sl
    10d2:	4660      	mov	r0, ip
    10d4:	f7ff f804 	bl	e0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    10d8:	4b09      	ldr	r3, [pc, #36]	; (1100 <pm_policy_next_state+0x98>)
    10da:	681b      	ldr	r3, [r3, #0]
    10dc:	1c59      	adds	r1, r3, #1
    10de:	d001      	beq.n	10e4 <pm_policy_next_state+0x7c>
    10e0:	4283      	cmp	r3, r0
    10e2:	d905      	bls.n	10f0 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    10e4:	1c7a      	adds	r2, r7, #1
    10e6:	d0d1      	beq.n	108c <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    10e8:	9b01      	ldr	r3, [sp, #4]
    10ea:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    10ec:	42b8      	cmp	r0, r7
    10ee:	d9cd      	bls.n	108c <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    10f0:	3c01      	subs	r4, #1
    10f2:	b224      	sxth	r4, r4
    10f4:	e7c7      	b.n	1086 <pm_policy_next_state+0x1e>
    10f6:	bf00      	nop
    10f8:	000f423f 	.word	0x000f423f
    10fc:	000f4240 	.word	0x000f4240
    1100:	20000004 	.word	0x20000004

00001104 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    1104:	b908      	cbnz	r0, 110a <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    1106:	4b02      	ldr	r3, [pc, #8]	; (1110 <pm_state_cpu_get_all+0xc>)
    1108:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    110a:	2000      	movs	r0, #0
    110c:	4770      	bx	lr
    110e:	bf00      	nop
    1110:	00004fa8 	.word	0x00004fa8

00001114 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    1114:	4901      	ldr	r1, [pc, #4]	; (111c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    1116:	2210      	movs	r2, #16
	str	r2, [r1]
    1118:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    111a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    111c:	e000ed10 	.word	0xe000ed10

00001120 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    1120:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    1122:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    1124:	f380 8811 	msr	BASEPRI, r0
	isb
    1128:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    112c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    1130:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    1132:	b662      	cpsie	i
	isb
    1134:	f3bf 8f6f 	isb	sy

	bx	lr
    1138:	4770      	bx	lr
    113a:	bf00      	nop

0000113c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    113c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    113e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    1140:	f381 8811 	msr	BASEPRI, r1

	wfe
    1144:	bf20      	wfe

	msr	BASEPRI, r0
    1146:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    114a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    114c:	4770      	bx	lr
    114e:	bf00      	nop

00001150 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    1150:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1152:	2b00      	cmp	r3, #0
    1154:	db08      	blt.n	1168 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1156:	2201      	movs	r2, #1
    1158:	f000 001f 	and.w	r0, r0, #31
    115c:	fa02 f000 	lsl.w	r0, r2, r0
    1160:	095b      	lsrs	r3, r3, #5
    1162:	4a02      	ldr	r2, [pc, #8]	; (116c <arch_irq_enable+0x1c>)
    1164:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    1168:	4770      	bx	lr
    116a:	bf00      	nop
    116c:	e000e100 	.word	0xe000e100

00001170 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    1170:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    1172:	2b00      	cmp	r3, #0
    1174:	db0d      	blt.n	1192 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1176:	2201      	movs	r2, #1
    1178:	095b      	lsrs	r3, r3, #5
    117a:	f000 001f 	and.w	r0, r0, #31
    117e:	fa02 f000 	lsl.w	r0, r2, r0
    1182:	3320      	adds	r3, #32
    1184:	4a03      	ldr	r2, [pc, #12]	; (1194 <arch_irq_disable+0x24>)
    1186:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    118a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    118e:	f3bf 8f6f 	isb	sy
}
    1192:	4770      	bx	lr
    1194:	e000e100 	.word	0xe000e100

00001198 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    1198:	4b05      	ldr	r3, [pc, #20]	; (11b0 <arch_irq_is_enabled+0x18>)
    119a:	0942      	lsrs	r2, r0, #5
    119c:	f000 001f 	and.w	r0, r0, #31
    11a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    11a4:	2301      	movs	r3, #1
    11a6:	fa03 f000 	lsl.w	r0, r3, r0
}
    11aa:	4010      	ands	r0, r2
    11ac:	4770      	bx	lr
    11ae:	bf00      	nop
    11b0:	e000e100 	.word	0xe000e100

000011b4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    11b4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    11b6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11b8:	bfa8      	it	ge
    11ba:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    11be:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11c2:	bfb8      	it	lt
    11c4:	4b06      	ldrlt	r3, [pc, #24]	; (11e0 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11c6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    11ca:	bfac      	ite	ge
    11cc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11d0:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11d4:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11d6:	bfb4      	ite	lt
    11d8:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    11da:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    11de:	4770      	bx	lr
    11e0:	e000ed14 	.word	0xe000ed14

000011e4 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    11e4:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    11e6:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    11e8:	4b04      	ldr	r3, [pc, #16]	; (11fc <_arch_isr_direct_pm+0x18>)
    11ea:	699a      	ldr	r2, [r3, #24]
    11ec:	b11a      	cbz	r2, 11f6 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    11ee:	2200      	movs	r2, #0
    11f0:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    11f2:	f003 fcdc 	bl	4bae <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    11f6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    11f8:	bd08      	pop	{r3, pc}
    11fa:	bf00      	nop
    11fc:	20000458 	.word	0x20000458

00001200 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    1200:	bf30      	wfi
    b z_SysNmiOnReset
    1202:	f7ff bffd 	b.w	1200 <z_SysNmiOnReset>
    1206:	bf00      	nop

00001208 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    1208:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    120a:	4b08      	ldr	r3, [pc, #32]	; (122c <z_arm_prep_c+0x24>)
    120c:	4a08      	ldr	r2, [pc, #32]	; (1230 <z_arm_prep_c+0x28>)
    120e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1212:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    1214:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    1218:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    121c:	f002 fa1c 	bl	3658 <z_bss_zero>
	z_data_copy();
    1220:	f002 feba 	bl	3f98 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    1224:	f000 f9c6 	bl	15b4 <z_arm_interrupt_init>
	z_cstart();
    1228:	f002 fa5a 	bl	36e0 <z_cstart>
    122c:	00000000 	.word	0x00000000
    1230:	e000ed00 	.word	0xe000ed00

00001234 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    1234:	4a09      	ldr	r2, [pc, #36]	; (125c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    1236:	490a      	ldr	r1, [pc, #40]	; (1260 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    1238:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    123a:	6809      	ldr	r1, [r1, #0]
    123c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    123e:	4909      	ldr	r1, [pc, #36]	; (1264 <arch_swap+0x30>)
	_current->arch.basepri = key;
    1240:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    1242:	684b      	ldr	r3, [r1, #4]
    1244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    1248:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    124a:	2300      	movs	r3, #0
    124c:	f383 8811 	msr	BASEPRI, r3
    1250:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    1254:	6893      	ldr	r3, [r2, #8]
}
    1256:	6f98      	ldr	r0, [r3, #120]	; 0x78
    1258:	4770      	bx	lr
    125a:	bf00      	nop
    125c:	20000458 	.word	0x20000458
    1260:	00005098 	.word	0x00005098
    1264:	e000ed00 	.word	0xe000ed00

00001268 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    1268:	4912      	ldr	r1, [pc, #72]	; (12b4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    126a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    126c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    1270:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    1272:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    1276:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    127a:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    127c:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    1280:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    1284:	4f0c      	ldr	r7, [pc, #48]	; (12b8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    1286:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    128a:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    128c:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    128e:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    1290:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    1292:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    1294:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    1296:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    129a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    129c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    129e:	f000 fa25 	bl	16ec <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    12a2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    12a6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    12aa:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    12ae:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    12b2:	4770      	bx	lr
    ldr r1, =_kernel
    12b4:	20000458 	.word	0x20000458
    ldr v4, =_SCS_ICSR
    12b8:	e000ed04 	.word	0xe000ed04

000012bc <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    12bc:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    12c0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    12c2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    12c6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    12ca:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    12cc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    12d0:	2902      	cmp	r1, #2
    beq _oops
    12d2:	d0ff      	beq.n	12d4 <_oops>

000012d4 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    12d4:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    12d6:	f003 f906 	bl	44e6 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    12da:	bd01      	pop	{r0, pc}

000012dc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    12dc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    12e0:	9b00      	ldr	r3, [sp, #0]
    12e2:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    12e6:	490a      	ldr	r1, [pc, #40]	; (1310 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    12e8:	9b01      	ldr	r3, [sp, #4]
    12ea:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    12ee:	9b02      	ldr	r3, [sp, #8]
    12f0:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    12f4:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    12f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    12fc:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    1300:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    1304:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    1306:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    1308:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    130a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    130c:	4770      	bx	lr
    130e:	bf00      	nop
    1310:	00004415 	.word	0x00004415

00001314 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    1314:	4a09      	ldr	r2, [pc, #36]	; (133c <z_check_thread_stack_fail+0x28>)
{
    1316:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    1318:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    131a:	b170      	cbz	r0, 133a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    131c:	f113 0f16 	cmn.w	r3, #22
    1320:	6e40      	ldr	r0, [r0, #100]	; 0x64
    1322:	d005      	beq.n	1330 <z_check_thread_stack_fail+0x1c>
    1324:	f1a0 0220 	sub.w	r2, r0, #32
    1328:	429a      	cmp	r2, r3
    132a:	d805      	bhi.n	1338 <z_check_thread_stack_fail+0x24>
    132c:	4283      	cmp	r3, r0
    132e:	d203      	bcs.n	1338 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    1330:	4281      	cmp	r1, r0
    1332:	bf28      	it	cs
    1334:	2000      	movcs	r0, #0
    1336:	4770      	bx	lr
    1338:	2000      	movs	r0, #0
}
    133a:	4770      	bx	lr
    133c:	20000458 	.word	0x20000458

00001340 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    1340:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    1342:	4b09      	ldr	r3, [pc, #36]	; (1368 <arch_switch_to_main_thread+0x28>)
    1344:	6098      	str	r0, [r3, #8]
{
    1346:	460d      	mov	r5, r1
    1348:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    134a:	f000 f9cf 	bl	16ec <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    134e:	4620      	mov	r0, r4
    1350:	f385 8809 	msr	PSP, r5
    1354:	2100      	movs	r1, #0
    1356:	b663      	cpsie	if
    1358:	f381 8811 	msr	BASEPRI, r1
    135c:	f3bf 8f6f 	isb	sy
    1360:	2200      	movs	r2, #0
    1362:	2300      	movs	r3, #0
    1364:	f003 f856 	bl	4414 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    1368:	20000458 	.word	0x20000458

0000136c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    136c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    136e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    1370:	4a0b      	ldr	r2, [pc, #44]	; (13a0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    1372:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    1374:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    1376:	bf1e      	ittt	ne
	movne	r1, #0
    1378:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    137a:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    137c:	f003 fc17 	blne	4bae <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    1380:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    1382:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    1386:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    138a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    138e:	4905      	ldr	r1, [pc, #20]	; (13a4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    1390:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    1392:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    1394:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    1396:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    139a:	4903      	ldr	r1, [pc, #12]	; (13a8 <_isr_wrapper+0x3c>)
	bx r1
    139c:	4708      	bx	r1
    139e:	0000      	.short	0x0000
	ldr r2, =_kernel
    13a0:	20000458 	.word	0x20000458
	ldr r1, =_sw_isr_table
    13a4:	00004e20 	.word	0x00004e20
	ldr r1, =z_arm_int_exit
    13a8:	000013ad 	.word	0x000013ad

000013ac <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    13ac:	4b04      	ldr	r3, [pc, #16]	; (13c0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    13ae:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    13b0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    13b2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    13b4:	d003      	beq.n	13be <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    13b6:	4903      	ldr	r1, [pc, #12]	; (13c4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    13b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    13bc:	600a      	str	r2, [r1, #0]

000013be <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    13be:	4770      	bx	lr
	ldr r3, =_kernel
    13c0:	20000458 	.word	0x20000458
	ldr r1, =_SCS_ICSR
    13c4:	e000ed04 	.word	0xe000ed04

000013c8 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    13c8:	b538      	push	{r3, r4, r5, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    13ca:	4b18      	ldr	r3, [pc, #96]	; (142c <mem_manage_fault+0x64>)
{
    13cc:	4614      	mov	r4, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    13ce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    13d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    13d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    13d4:	4605      	mov	r5, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    13d6:	0790      	lsls	r0, r2, #30
    13d8:	d518      	bpl.n	140c <mem_manage_fault+0x44>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    13da:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    13dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13de:	0612      	lsls	r2, r2, #24
    13e0:	d514      	bpl.n	140c <mem_manage_fault+0x44>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    13e2:	b119      	cbz	r1, 13ec <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    13e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    13ea:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    13ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    13ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    13f0:	06d1      	lsls	r1, r2, #27
    13f2:	d40e      	bmi.n	1412 <mem_manage_fault+0x4a>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    13f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    13f6:	079a      	lsls	r2, r3, #30
    13f8:	d40b      	bmi.n	1412 <mem_manage_fault+0x4a>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    13fa:	2000      	movs	r0, #0
		SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTPENDED_Msk;
	}
#endif /* CONFIG_ARMV7_M_ARMV8_M_FP */

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    13fc:	4a0b      	ldr	r2, [pc, #44]	; (142c <mem_manage_fault+0x64>)
    13fe:	6a93      	ldr	r3, [r2, #40]	; 0x28
    1400:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    1404:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    1406:	2300      	movs	r3, #0
    1408:	7023      	strb	r3, [r4, #0]

	return reason;
}
    140a:	bd38      	pop	{r3, r4, r5, pc}
	uint32_t mmfar = -EINVAL;
    140c:	f06f 0015 	mvn.w	r0, #21
    1410:	e7ec      	b.n	13ec <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    1412:	4b06      	ldr	r3, [pc, #24]	; (142c <mem_manage_fault+0x64>)
    1414:	685b      	ldr	r3, [r3, #4]
    1416:	051b      	lsls	r3, r3, #20
    1418:	d5ef      	bpl.n	13fa <mem_manage_fault+0x32>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    141a:	4629      	mov	r1, r5
    141c:	f7ff ff7a 	bl	1314 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    1420:	2800      	cmp	r0, #0
    1422:	d0ea      	beq.n	13fa <mem_manage_fault+0x32>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    1424:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    1428:	2002      	movs	r0, #2
    142a:	e7e7      	b.n	13fc <mem_manage_fault+0x34>
    142c:	e000ed00 	.word	0xe000ed00

00001430 <bus_fault.constprop.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    1430:	4b0c      	ldr	r3, [pc, #48]	; (1464 <bus_fault.constprop.0+0x34>)
    1432:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    1434:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    1436:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1438:	0592      	lsls	r2, r2, #22
    143a:	d508      	bpl.n	144e <bus_fault.constprop.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    143c:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    143e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1440:	0412      	lsls	r2, r2, #16
    1442:	d504      	bpl.n	144e <bus_fault.constprop.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    1444:	b118      	cbz	r0, 144e <bus_fault.constprop.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    1446:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1448:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    144c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    144e:	4b05      	ldr	r3, [pc, #20]	; (1464 <bus_fault.constprop.0+0x34>)
    1450:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    1452:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1454:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    1456:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    1458:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    145c:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    145e:	7008      	strb	r0, [r1, #0]

	return reason;
}
    1460:	4770      	bx	lr
    1462:	bf00      	nop
    1464:	e000ed00 	.word	0xe000ed00

00001468 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    1468:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    146a:	4b48      	ldr	r3, [pc, #288]	; (158c <z_arm_fault+0x124>)
    146c:	685b      	ldr	r3, [r3, #4]
{
    146e:	b08a      	sub	sp, #40	; 0x28
    1470:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    1472:	f3c3 0308 	ubfx	r3, r3, #0, #9
    1476:	2600      	movs	r6, #0
    1478:	f386 8811 	msr	BASEPRI, r6
    147c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    1480:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    1484:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    1488:	d111      	bne.n	14ae <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    148a:	f002 010c 	and.w	r1, r2, #12
    148e:	2908      	cmp	r1, #8
    1490:	d00d      	beq.n	14ae <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    1492:	0711      	lsls	r1, r2, #28
    1494:	d401      	bmi.n	149a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    1496:	4605      	mov	r5, r0
			*nested_exc = true;
    1498:	2601      	movs	r6, #1
	*recoverable = false;
    149a:	2200      	movs	r2, #0
	switch (fault) {
    149c:	3b03      	subs	r3, #3
	*recoverable = false;
    149e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    14a2:	2b03      	cmp	r3, #3
    14a4:	d86b      	bhi.n	157e <z_arm_fault+0x116>
    14a6:	e8df f003 	tbb	[pc, r3]
    14aa:	5504      	.short	0x5504
    14ac:	5d59      	.short	0x5d59
		return NULL;
    14ae:	4635      	mov	r5, r6
    14b0:	e7f3      	b.n	149a <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    14b2:	4b36      	ldr	r3, [pc, #216]	; (158c <z_arm_fault+0x124>)
    14b4:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    14b6:	f014 0402 	ands.w	r4, r4, #2
    14ba:	d160      	bne.n	157e <z_arm_fault+0x116>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    14bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    14be:	2a00      	cmp	r2, #0
    14c0:	db15      	blt.n	14ee <z_arm_fault+0x86>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    14c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    14c4:	0052      	lsls	r2, r2, #1
    14c6:	d512      	bpl.n	14ee <z_arm_fault+0x86>
	uint16_t fault_insn = *(ret_addr - 1);
    14c8:	69aa      	ldr	r2, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    14ca:	f832 1c02 	ldrh.w	r1, [r2, #-2]
    14ce:	f64d 7202 	movw	r2, #57090	; 0xdf02
    14d2:	4291      	cmp	r1, r2
    14d4:	d00a      	beq.n	14ec <z_arm_fault+0x84>
		} else if (SCB_MMFSR != 0) {
    14d6:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
    14da:	b30a      	cbz	r2, 1520 <z_arm_fault+0xb8>
			reason = mem_manage_fault(esf, 1, recoverable);
    14dc:	f10d 0207 	add.w	r2, sp, #7
    14e0:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    14e2:	4628      	mov	r0, r5
    14e4:	f7ff ff70 	bl	13c8 <mem_manage_fault>
		reason = bus_fault(esf, 0, recoverable);
    14e8:	4604      	mov	r4, r0
		break;
    14ea:	e000      	b.n	14ee <z_arm_fault+0x86>
			reason = esf->basic.r0;
    14ec:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    14ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
    14f2:	b99b      	cbnz	r3, 151c <z_arm_fault+0xb4>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    14f4:	2220      	movs	r2, #32
    14f6:	4629      	mov	r1, r5
    14f8:	a802      	add	r0, sp, #8
    14fa:	f003 f81d 	bl	4538 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    14fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    1500:	2e00      	cmp	r6, #0
    1502:	d03e      	beq.n	1582 <z_arm_fault+0x11a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    1504:	f3c3 0208 	ubfx	r2, r3, #0, #9
    1508:	b922      	cbnz	r2, 1514 <z_arm_fault+0xac>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    150a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    150e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1512:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    1514:	a902      	add	r1, sp, #8
    1516:	4620      	mov	r0, r4
    1518:	f002 ffe3 	bl	44e2 <z_arm_fatal_error>
}
    151c:	b00a      	add	sp, #40	; 0x28
    151e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    1520:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
    1524:	b12a      	cbz	r2, 1532 <z_arm_fault+0xca>
			reason = bus_fault(esf, 1, recoverable);
    1526:	f10d 0107 	add.w	r1, sp, #7
    152a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    152c:	f7ff ff80 	bl	1430 <bus_fault.constprop.0>
    1530:	e7da      	b.n	14e8 <z_arm_fault+0x80>
		} else if (SCB_UFSR != 0) {
    1532:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
    1534:	b292      	uxth	r2, r2
    1536:	2a00      	cmp	r2, #0
    1538:	d0d9      	beq.n	14ee <z_arm_fault+0x86>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    153a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    153c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    153e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    1540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    1542:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1544:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1546:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1548:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    154c:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    1550:	629a      	str	r2, [r3, #40]	; 0x28
	return reason;
    1552:	e7cc      	b.n	14ee <z_arm_fault+0x86>
		reason = mem_manage_fault(esf, 0, recoverable);
    1554:	f10d 0207 	add.w	r2, sp, #7
    1558:	2100      	movs	r1, #0
    155a:	e7c2      	b.n	14e2 <z_arm_fault+0x7a>
		reason = bus_fault(esf, 0, recoverable);
    155c:	f10d 0107 	add.w	r1, sp, #7
    1560:	2000      	movs	r0, #0
    1562:	e7e3      	b.n	152c <z_arm_fault+0xc4>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    1564:	4b09      	ldr	r3, [pc, #36]	; (158c <z_arm_fault+0x124>)
    1566:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    1568:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    156a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    156c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    156e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    1570:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    1572:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    1574:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    1578:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    157c:	629a      	str	r2, [r3, #40]	; 0x28
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    157e:	2400      	movs	r4, #0
    1580:	e7b5      	b.n	14ee <z_arm_fault+0x86>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    1582:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    1586:	f023 0301 	bic.w	r3, r3, #1
    158a:	e7c2      	b.n	1512 <z_arm_fault+0xaa>
    158c:	e000ed00 	.word	0xe000ed00

00001590 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    1590:	4a02      	ldr	r2, [pc, #8]	; (159c <z_arm_fault_init+0xc>)
    1592:	6953      	ldr	r3, [r2, #20]
    1594:	f043 0310 	orr.w	r3, r3, #16
    1598:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    159a:	4770      	bx	lr
    159c:	e000ed00 	.word	0xe000ed00

000015a0 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    15a0:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    15a4:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    15a8:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    15aa:	4672      	mov	r2, lr
	bl z_arm_fault
    15ac:	f7ff ff5c 	bl	1468 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    15b0:	bd01      	pop	{r0, pc}
    15b2:	bf00      	nop

000015b4 <z_arm_interrupt_init>:
    15b4:	4804      	ldr	r0, [pc, #16]	; (15c8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    15b6:	2300      	movs	r3, #0
    15b8:	2120      	movs	r1, #32
    15ba:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    15bc:	3301      	adds	r3, #1
    15be:	2b28      	cmp	r3, #40	; 0x28
    15c0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    15c4:	d1f9      	bne.n	15ba <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    15c6:	4770      	bx	lr
    15c8:	e000e100 	.word	0xe000e100

000015cc <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    15cc:	2000      	movs	r0, #0
    msr CONTROL, r0
    15ce:	f380 8814 	msr	CONTROL, r0
    isb
    15d2:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    15d6:	f003 fbdd 	bl	4d94 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    15da:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    15dc:	490d      	ldr	r1, [pc, #52]	; (1614 <__start+0x48>)
    str r0, [r1]
    15de:	6008      	str	r0, [r1, #0]
    dsb
    15e0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    15e4:	480c      	ldr	r0, [pc, #48]	; (1618 <__start+0x4c>)
    msr msp, r0
    15e6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    15ea:	f000 f82b 	bl	1644 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    15ee:	2020      	movs	r0, #32
    msr BASEPRI, r0
    15f0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    15f4:	4809      	ldr	r0, [pc, #36]	; (161c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    15f6:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    15fa:	1840      	adds	r0, r0, r1
    msr PSP, r0
    15fc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    1600:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    1604:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    1606:	4308      	orrs	r0, r1
    msr CONTROL, r0
    1608:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    160c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    1610:	f7ff fdfa 	bl	1208 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    1614:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    1618:	20000f60 	.word	0x20000f60
    ldr r0, =z_interrupt_stacks
    161c:	200010a0 	.word	0x200010a0

00001620 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    1620:	4907      	ldr	r1, [pc, #28]	; (1640 <z_arm_clear_arm_mpu_config+0x20>)
    1622:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    1626:	2300      	movs	r3, #0
	int num_regions =
    1628:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    162c:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    162e:	4293      	cmp	r3, r2
    1630:	d100      	bne.n	1634 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    1632:	4770      	bx	lr
  MPU->RNR = rnr;
    1634:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    1638:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    163c:	3301      	adds	r3, #1
    163e:	e7f6      	b.n	162e <z_arm_clear_arm_mpu_config+0xe>
    1640:	e000ed00 	.word	0xe000ed00

00001644 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    1644:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    1646:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    1648:	2300      	movs	r3, #0
    164a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    164e:	f7ff ffe7 	bl	1620 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    1652:	4b14      	ldr	r3, [pc, #80]	; (16a4 <z_arm_init_arch_hw_at_boot+0x60>)
    1654:	f04f 32ff 	mov.w	r2, #4294967295
    1658:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    165c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    1660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    1664:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    1668:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    166c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    1670:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    1674:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    1678:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    167c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    1680:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    1684:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    1688:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    168c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    1690:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    1694:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    1698:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    169a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    169e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    16a2:	bd08      	pop	{r3, pc}
    16a4:	e000e100 	.word	0xe000e100

000016a8 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    16a8:	4b08      	ldr	r3, [pc, #32]	; (16cc <z_impl_k_thread_abort+0x24>)
    16aa:	689b      	ldr	r3, [r3, #8]
    16ac:	4283      	cmp	r3, r0
    16ae:	d10b      	bne.n	16c8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    16b0:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    16b4:	b143      	cbz	r3, 16c8 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    16b6:	4b06      	ldr	r3, [pc, #24]	; (16d0 <z_impl_k_thread_abort+0x28>)
    16b8:	685a      	ldr	r2, [r3, #4]
    16ba:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    16be:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    16c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    16c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    16c6:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    16c8:	f002 bc14 	b.w	3ef4 <z_thread_abort>
    16cc:	20000458 	.word	0x20000458
    16d0:	e000ed00 	.word	0xe000ed00

000016d4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    16d4:	4b02      	ldr	r3, [pc, #8]	; (16e0 <z_arm_configure_static_mpu_regions+0xc>)
    16d6:	4a03      	ldr	r2, [pc, #12]	; (16e4 <z_arm_configure_static_mpu_regions+0x10>)
    16d8:	4803      	ldr	r0, [pc, #12]	; (16e8 <z_arm_configure_static_mpu_regions+0x14>)
    16da:	2101      	movs	r1, #1
    16dc:	f000 b86e 	b.w	17bc <arm_core_mpu_configure_static_mpu_regions>
    16e0:	20008000 	.word	0x20008000
    16e4:	20000000 	.word	0x20000000
    16e8:	00004fa8 	.word	0x00004fa8

000016ec <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    16ec:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    16ee:	4b05      	ldr	r3, [pc, #20]	; (1704 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    16f0:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    16f2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    16f4:	4a04      	ldr	r2, [pc, #16]	; (1708 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    16f6:	2120      	movs	r1, #32
    16f8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    16fc:	4618      	mov	r0, r3
    16fe:	2101      	movs	r1, #1
    1700:	f000 b866 	b.w	17d0 <arm_core_mpu_configure_dynamic_mpu_regions>
    1704:	20000210 	.word	0x20000210
    1708:	150b0000 	.word	0x150b0000

0000170c <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    170c:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    170e:	4f1f      	ldr	r7, [pc, #124]	; (178c <mpu_configure_regions+0x80>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    1710:	2600      	movs	r6, #0
    1712:	428e      	cmp	r6, r1
    1714:	db01      	blt.n	171a <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    1716:	4610      	mov	r0, r2
    1718:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    171a:	6844      	ldr	r4, [r0, #4]
    171c:	b39c      	cbz	r4, 1786 <mpu_configure_regions+0x7a>
		if (do_sanity_check &&
    171e:	b153      	cbz	r3, 1736 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    1720:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    1724:	ea14 0f0c 	tst.w	r4, ip
    1728:	d118      	bne.n	175c <mpu_configure_regions+0x50>
		&&
    172a:	2c1f      	cmp	r4, #31
    172c:	d916      	bls.n	175c <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    172e:	6805      	ldr	r5, [r0, #0]
		&&
    1730:	ea1c 0f05 	tst.w	ip, r5
    1734:	d112      	bne.n	175c <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    1736:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    1738:	6805      	ldr	r5, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    173a:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    173e:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    1740:	d90f      	bls.n	1762 <mpu_configure_regions+0x56>
	if (size > (1UL << 31)) {
    1742:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    1746:	d80e      	bhi.n	1766 <mpu_configure_regions+0x5a>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    1748:	3c01      	subs	r4, #1
    174a:	fab4 f484 	clz	r4, r4
    174e:	f1c4 041f 	rsb	r4, r4, #31
    1752:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    1754:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    1756:	ea4c 0404 	orr.w	r4, ip, r4
    175a:	d906      	bls.n	176a <mpu_configure_regions+0x5e>
			return -EINVAL;
    175c:	f06f 0215 	mvn.w	r2, #21
    1760:	e7d9      	b.n	1716 <mpu_configure_regions+0xa>
		return REGION_32B;
    1762:	2408      	movs	r4, #8
    1764:	e7f6      	b.n	1754 <mpu_configure_regions+0x48>
		return REGION_4G;
    1766:	243e      	movs	r4, #62	; 0x3e
    1768:	e7f4      	b.n	1754 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    176a:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    176e:	4315      	orrs	r5, r2
    1770:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1774:	f044 0401 	orr.w	r4, r4, #1
    1778:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    177c:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
		reg_index++;
    1780:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    1782:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    1786:	3601      	adds	r6, #1
    1788:	300c      	adds	r0, #12
    178a:	e7c2      	b.n	1712 <mpu_configure_regions+0x6>
    178c:	e000ed00 	.word	0xe000ed00

00001790 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    1790:	4b04      	ldr	r3, [pc, #16]	; (17a4 <arm_core_mpu_enable+0x14>)
    1792:	2205      	movs	r2, #5
    1794:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    1798:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    179c:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    17a0:	4770      	bx	lr
    17a2:	bf00      	nop
    17a4:	e000ed00 	.word	0xe000ed00

000017a8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    17a8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    17ac:	4b02      	ldr	r3, [pc, #8]	; (17b8 <arm_core_mpu_disable+0x10>)
    17ae:	2200      	movs	r2, #0
    17b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    17b4:	4770      	bx	lr
    17b6:	bf00      	nop
    17b8:	e000ed00 	.word	0xe000ed00

000017bc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    17bc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    17be:	4c03      	ldr	r4, [pc, #12]	; (17cc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    17c0:	2301      	movs	r3, #1
    17c2:	7822      	ldrb	r2, [r4, #0]
    17c4:	f7ff ffa2 	bl	170c <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    17c8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    17ca:	bd10      	pop	{r4, pc}
    17cc:	200004d5 	.word	0x200004d5

000017d0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    17d0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    17d2:	4a09      	ldr	r2, [pc, #36]	; (17f8 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    17d4:	2300      	movs	r3, #0
    17d6:	7812      	ldrb	r2, [r2, #0]
    17d8:	f7ff ff98 	bl	170c <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    17dc:	f110 0f16 	cmn.w	r0, #22
    17e0:	d002      	beq.n	17e8 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
  MPU->RNR = rnr;
    17e2:	4a06      	ldr	r2, [pc, #24]	; (17fc <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    17e4:	2807      	cmp	r0, #7
    17e6:	dd00      	ble.n	17ea <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    17e8:	bd08      	pop	{r3, pc}
    17ea:	f8c2 0098 	str.w	r0, [r2, #152]	; 0x98
  MPU->RASR = 0U;
    17ee:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0
    17f2:	3001      	adds	r0, #1
    17f4:	e7f6      	b.n	17e4 <arm_core_mpu_configure_dynamic_mpu_regions+0x14>
    17f6:	bf00      	nop
    17f8:	200004d5 	.word	0x200004d5
    17fc:	e000ed00 	.word	0xe000ed00

00001800 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    1800:	4914      	ldr	r1, [pc, #80]	; (1854 <z_arm_mpu_init+0x54>)
    1802:	6808      	ldr	r0, [r1, #0]
    1804:	2808      	cmp	r0, #8
{
    1806:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    1808:	d821      	bhi.n	184e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    180a:	f7ff ffcd 	bl	17a8 <arm_core_mpu_disable>
    180e:	4c12      	ldr	r4, [pc, #72]	; (1858 <z_arm_mpu_init+0x58>)
    1810:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    1812:	2200      	movs	r2, #0
    1814:	4290      	cmp	r0, r2
    1816:	f101 010c 	add.w	r1, r1, #12
    181a:	d105      	bne.n	1828 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    181c:	4b0f      	ldr	r3, [pc, #60]	; (185c <z_arm_mpu_init+0x5c>)
    181e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    1820:	f7ff ffb6 	bl	1790 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    1824:	2000      	movs	r0, #0
}
    1826:	bd10      	pop	{r4, pc}
    1828:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    182c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    1830:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    1834:	4313      	orrs	r3, r2
    1836:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    183a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    183e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    1842:	f043 0301 	orr.w	r3, r3, #1
    1846:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    184a:	3201      	adds	r2, #1
    184c:	e7e2      	b.n	1814 <z_arm_mpu_init+0x14>
		return -1;
    184e:	f04f 30ff 	mov.w	r0, #4294967295
    1852:	e7e8      	b.n	1826 <z_arm_mpu_init+0x26>
    1854:	00004fb4 	.word	0x00004fb4
    1858:	e000ed00 	.word	0xe000ed00
    185c:	200004d5 	.word	0x200004d5

00001860 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    1860:	4b01      	ldr	r3, [pc, #4]	; (1868 <__stdout_hook_install+0x8>)
    1862:	6018      	str	r0, [r3, #0]
}
    1864:	4770      	bx	lr
    1866:	bf00      	nop
    1868:	20000008 	.word	0x20000008

0000186c <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    186c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1870:	b2c0      	uxtb	r0, r0
    1872:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    1876:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    187a:	4905      	ldr	r1, [pc, #20]	; (1890 <sys_arch_reboot+0x24>)
    187c:	4b05      	ldr	r3, [pc, #20]	; (1894 <sys_arch_reboot+0x28>)
    187e:	68ca      	ldr	r2, [r1, #12]
    1880:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    1884:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    1886:	60cb      	str	r3, [r1, #12]
    1888:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    188c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    188e:	e7fd      	b.n	188c <sys_arch_reboot+0x20>
    1890:	e000ed00 	.word	0xe000ed00
    1894:	05fa0004 	.word	0x05fa0004

00001898 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    1898:	b120      	cbz	r0, 18a4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    189a:	4b03      	ldr	r3, [pc, #12]	; (18a8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    189c:	0180      	lsls	r0, r0, #6
    189e:	f043 0301 	orr.w	r3, r3, #1
    18a2:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    18a4:	4770      	bx	lr
    18a6:	bf00      	nop
    18a8:	00004fa0 	.word	0x00004fa0

000018ac <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    18ac:	4b08      	ldr	r3, [pc, #32]	; (18d0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    18ae:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    18b0:	1ac3      	subs	r3, r0, r3
{
    18b2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    18b4:	4907      	ldr	r1, [pc, #28]	; (18d4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    18b6:	109b      	asrs	r3, r3, #2
{
    18b8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    18ba:	4359      	muls	r1, r3
    18bc:	4806      	ldr	r0, [pc, #24]	; (18d8 <onoff_stop+0x2c>)
    18be:	2240      	movs	r2, #64	; 0x40
    18c0:	f002 fe92 	bl	45e8 <stop>
	notify(mgr, res);
    18c4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    18c6:	4601      	mov	r1, r0
	notify(mgr, res);
    18c8:	4620      	mov	r0, r4
}
    18ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    18ce:	4718      	bx	r3
    18d0:	2000022c 	.word	0x2000022c
    18d4:	b6db6db7 	.word	0xb6db6db7
    18d8:	00004dd8 	.word	0x00004dd8

000018dc <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    18dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    18de:	4c0c      	ldr	r4, [pc, #48]	; (1910 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    18e0:	4a0c      	ldr	r2, [pc, #48]	; (1914 <onoff_start+0x38>)
    18e2:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    18e4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    18e6:	9300      	str	r3, [sp, #0]
{
    18e8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    18ea:	460b      	mov	r3, r1
    18ec:	490a      	ldr	r1, [pc, #40]	; (1918 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    18ee:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    18f0:	4361      	muls	r1, r4
{
    18f2:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    18f4:	4809      	ldr	r0, [pc, #36]	; (191c <onoff_start+0x40>)
    18f6:	f002 fea3 	bl	4640 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    18fa:	1e01      	subs	r1, r0, #0
    18fc:	da05      	bge.n	190a <onoff_start+0x2e>
		notify(mgr, err);
    18fe:	4630      	mov	r0, r6
    1900:	462b      	mov	r3, r5
	}
}
    1902:	b002      	add	sp, #8
    1904:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    1908:	4718      	bx	r3
}
    190a:	b002      	add	sp, #8
    190c:	bd70      	pop	{r4, r5, r6, pc}
    190e:	bf00      	nop
    1910:	2000022c 	.word	0x2000022c
    1914:	000046b1 	.word	0x000046b1
    1918:	b6db6db7 	.word	0xb6db6db7
    191c:	00004dd8 	.word	0x00004dd8

00001920 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1920:	2200      	movs	r2, #0
{
    1922:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1924:	2101      	movs	r1, #1
{
    1926:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    1928:	4610      	mov	r0, r2
    192a:	f7ff fc43 	bl	11b4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    192e:	480f      	ldr	r0, [pc, #60]	; (196c <clk_init+0x4c>)
    1930:	f001 fa8e 	bl	2e50 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    1934:	4b0e      	ldr	r3, [pc, #56]	; (1970 <clk_init+0x50>)
    1936:	4298      	cmp	r0, r3
    1938:	d115      	bne.n	1966 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    193a:	f003 f8a7 	bl	4a8c <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    193e:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    1940:	490c      	ldr	r1, [pc, #48]	; (1974 <clk_init+0x54>)
    1942:	4630      	mov	r0, r6
    1944:	f002 fd0a 	bl	435c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    1948:	2800      	cmp	r0, #0
    194a:	db0b      	blt.n	1964 <clk_init+0x44>
	struct nrf_clock_control_data *data = dev->data;
    194c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    194e:	4909      	ldr	r1, [pc, #36]	; (1974 <clk_init+0x54>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1950:	2501      	movs	r5, #1
    1952:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    1954:	f104 001c 	add.w	r0, r4, #28
    1958:	f002 fd00 	bl	435c <onoff_manager_init>
		if (err < 0) {
    195c:	2800      	cmp	r0, #0
    195e:	db01      	blt.n	1964 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    1960:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    1962:	2000      	movs	r0, #0
}
    1964:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    1966:	f06f 0004 	mvn.w	r0, #4
    196a:	e7fb      	b.n	1964 <clk_init+0x44>
    196c:	000019ad 	.word	0x000019ad
    1970:	0bad0000 	.word	0x0bad0000
    1974:	00004ffc 	.word	0x00004ffc

00001978 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    1978:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    197a:	230c      	movs	r3, #12
    197c:	4809      	ldr	r0, [pc, #36]	; (19a4 <clkstarted_handle.constprop.0+0x2c>)
    197e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    1980:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    1982:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    1984:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    1988:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    198a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    198c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    198e:	4418      	add	r0, r3
    1990:	f002 fe17 	bl	45c2 <set_on_state>
	if (callback) {
    1994:	b12d      	cbz	r5, 19a2 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    1996:	4632      	mov	r2, r6
    1998:	462b      	mov	r3, r5
    199a:	4803      	ldr	r0, [pc, #12]	; (19a8 <clkstarted_handle.constprop.0+0x30>)
}
    199c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    19a0:	4718      	bx	r3
}
    19a2:	bd70      	pop	{r4, r5, r6, pc}
    19a4:	2000022c 	.word	0x2000022c
    19a8:	00004dd8 	.word	0x00004dd8

000019ac <clock_event_handler>:
	switch (event) {
    19ac:	b110      	cbz	r0, 19b4 <clock_event_handler+0x8>
    19ae:	2801      	cmp	r0, #1
    19b0:	d004      	beq.n	19bc <clock_event_handler+0x10>
    19b2:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    19b4:	4b03      	ldr	r3, [pc, #12]	; (19c4 <clock_event_handler+0x18>)
    19b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    19b8:	075b      	lsls	r3, r3, #29
    19ba:	d101      	bne.n	19c0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    19bc:	f7ff bfdc 	b.w	1978 <clkstarted_handle.constprop.0>
}
    19c0:	4770      	bx	lr
    19c2:	bf00      	nop
    19c4:	2000022c 	.word	0x2000022c

000019c8 <generic_hfclk_start>:
{
    19c8:	b508      	push	{r3, lr}
	__asm__ volatile(
    19ca:	f04f 0320 	mov.w	r3, #32
    19ce:	f3ef 8111 	mrs	r1, BASEPRI
    19d2:	f383 8812 	msr	BASEPRI_MAX, r3
    19d6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    19da:	4a12      	ldr	r2, [pc, #72]	; (1a24 <generic_hfclk_start+0x5c>)
    19dc:	6813      	ldr	r3, [r2, #0]
    19de:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    19e2:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    19e6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    19e8:	d00c      	beq.n	1a04 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    19ea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    19ee:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    19f2:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    19f6:	f013 0301 	ands.w	r3, r3, #1
    19fa:	d003      	beq.n	1a04 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    19fc:	480a      	ldr	r0, [pc, #40]	; (1a28 <generic_hfclk_start+0x60>)
    19fe:	f002 fde0 	bl	45c2 <set_on_state>
			already_started = true;
    1a02:	2301      	movs	r3, #1
	__asm__ volatile(
    1a04:	f381 8811 	msr	BASEPRI, r1
    1a08:	f3bf 8f6f 	isb	sy
	if (already_started) {
    1a0c:	b123      	cbz	r3, 1a18 <generic_hfclk_start+0x50>
}
    1a0e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    1a12:	2000      	movs	r0, #0
    1a14:	f7ff bfb0 	b.w	1978 <clkstarted_handle.constprop.0>
}
    1a18:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    1a1c:	2001      	movs	r0, #1
    1a1e:	f003 b842 	b.w	4aa6 <nrfx_clock_start>
    1a22:	bf00      	nop
    1a24:	2000027c 	.word	0x2000027c
    1a28:	2000026c 	.word	0x2000026c

00001a2c <api_blocking_start>:
{
    1a2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1a2e:	2200      	movs	r2, #0
    1a30:	2301      	movs	r3, #1
    1a32:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1a36:	4a09      	ldr	r2, [pc, #36]	; (1a5c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1a38:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1a3c:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    1a3e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    1a42:	f002 fe2e 	bl	46a2 <api_start>
	if (err < 0) {
    1a46:	2800      	cmp	r0, #0
    1a48:	db05      	blt.n	1a56 <api_blocking_start+0x2a>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    1a4a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    1a4e:	2300      	movs	r3, #0
    1a50:	4668      	mov	r0, sp
    1a52:	f001 ff77 	bl	3944 <z_impl_k_sem_take>
}
    1a56:	b005      	add	sp, #20
    1a58:	f85d fb04 	ldr.w	pc, [sp], #4
    1a5c:	000046cf 	.word	0x000046cf

00001a60 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1a60:	4b09      	ldr	r3, [pc, #36]	; (1a88 <generic_hfclk_stop+0x28>)
    1a62:	f3bf 8f5b 	dmb	ish
    1a66:	e853 2f00 	ldrex	r2, [r3]
    1a6a:	f022 0102 	bic.w	r1, r2, #2
    1a6e:	e843 1000 	strex	r0, r1, [r3]
    1a72:	2800      	cmp	r0, #0
    1a74:	d1f7      	bne.n	1a66 <generic_hfclk_stop+0x6>
    1a76:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    1a7a:	07d3      	lsls	r3, r2, #31
    1a7c:	d402      	bmi.n	1a84 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    1a7e:	2001      	movs	r0, #1
    1a80:	f003 b84e 	b.w	4b20 <nrfx_clock_stop>
}
    1a84:	4770      	bx	lr
    1a86:	bf00      	nop
    1a88:	2000027c 	.word	0x2000027c

00001a8c <z_nrf_clock_control_lf_on>:
{
    1a8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1a90:	4939      	ldr	r1, [pc, #228]	; (1b78 <z_nrf_clock_control_lf_on+0xec>)
    1a92:	f3bf 8f5b 	dmb	ish
    1a96:	4607      	mov	r7, r0
    1a98:	2201      	movs	r2, #1
    1a9a:	e851 3f00 	ldrex	r3, [r1]
    1a9e:	e841 2000 	strex	r0, r2, [r1]
    1aa2:	2800      	cmp	r0, #0
    1aa4:	d1f9      	bne.n	1a9a <z_nrf_clock_control_lf_on+0xe>
    1aa6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    1aaa:	b933      	cbnz	r3, 1aba <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1aac:	4933      	ldr	r1, [pc, #204]	; (1b7c <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    1aae:	4834      	ldr	r0, [pc, #208]	; (1b80 <z_nrf_clock_control_lf_on+0xf4>)
    1ab0:	604b      	str	r3, [r1, #4]
    1ab2:	60cb      	str	r3, [r1, #12]
    1ab4:	608a      	str	r2, [r1, #8]
    1ab6:	f002 fc64 	bl	4382 <onoff_request>
	switch (start_mode) {
    1aba:	1e7b      	subs	r3, r7, #1
    1abc:	2b01      	cmp	r3, #1
    1abe:	d82f      	bhi.n	1b20 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    1ac0:	2f01      	cmp	r7, #1
    1ac2:	d107      	bne.n	1ad4 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    1ac4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1ac8:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    1acc:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    1ad0:	2b01      	cmp	r3, #1
    1ad2:	d025      	beq.n	1b20 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    1ad4:	f003 f865 	bl	4ba2 <k_is_in_isr>
    1ad8:	4604      	mov	r4, r0
    1ada:	b918      	cbnz	r0, 1ae4 <z_nrf_clock_control_lf_on+0x58>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    1adc:	4b29      	ldr	r3, [pc, #164]	; (1b84 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    1ade:	781b      	ldrb	r3, [r3, #0]
    1ae0:	2b00      	cmp	r3, #0
    1ae2:	d141      	bne.n	1b68 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    1ae4:	f04f 0320 	mov.w	r3, #32
    1ae8:	f3ef 8611 	mrs	r6, BASEPRI
    1aec:	f383 8812 	msr	BASEPRI_MAX, r3
    1af0:	f3bf 8f6f 	isb	sy
    1af4:	2401      	movs	r4, #1
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    1af6:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1b88 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    1afa:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    1afe:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    1b02:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    1b06:	03d2      	lsls	r2, r2, #15
    1b08:	d50c      	bpl.n	1b24 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    1b0a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    1b0e:	2b01      	cmp	r3, #1
    1b10:	d001      	beq.n	1b16 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    1b12:	2f01      	cmp	r7, #1
    1b14:	d106      	bne.n	1b24 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    1b16:	b30c      	cbz	r4, 1b5c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    1b18:	f386 8811 	msr	BASEPRI, r6
    1b1c:	f3bf 8f6f 	isb	sy
}
    1b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    1b24:	b1ac      	cbz	r4, 1b52 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    1b26:	4630      	mov	r0, r6
    1b28:	f7ff fb08 	bl	113c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    1b2c:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    1b30:	2b00      	cmp	r3, #0
    1b32:	d1e4      	bne.n	1afe <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    1b34:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    1b38:	2a00      	cmp	r2, #0
    1b3a:	d0e0      	beq.n	1afe <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    1b3c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    1b40:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    1b44:	2301      	movs	r3, #1
    1b46:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    1b4a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    1b4e:	60ab      	str	r3, [r5, #8]
}
    1b50:	e7d5      	b.n	1afe <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    1b52:	2100      	movs	r1, #0
    1b54:	2021      	movs	r0, #33	; 0x21
    1b56:	f002 f9ad 	bl	3eb4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    1b5a:	e7e7      	b.n	1b2c <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    1b5c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b60:	2202      	movs	r2, #2
    1b62:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    1b66:	e7db      	b.n	1b20 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    1b68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1b6c:	2202      	movs	r2, #2
    1b6e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    1b72:	4606      	mov	r6, r0
}
    1b74:	e7bf      	b.n	1af6 <z_nrf_clock_control_lf_on+0x6a>
    1b76:	bf00      	nop
    1b78:	20000280 	.word	0x20000280
    1b7c:	2000021c 	.word	0x2000021c
    1b80:	20000248 	.word	0x20000248
    1b84:	20000b44 	.word	0x20000b44
    1b88:	e000e100 	.word	0xe000e100

00001b8c <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    1b8c:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    1b8e:	4b08      	ldr	r3, [pc, #32]	; (1bb0 <uart_console_init+0x24>)
    1b90:	4808      	ldr	r0, [pc, #32]	; (1bb4 <uart_console_init+0x28>)
    1b92:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    1b94:	f002 ffdc 	bl	4b50 <z_device_is_ready>
	if (!device_is_ready(uart_console_dev)) {
    1b98:	b138      	cbz	r0, 1baa <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    1b9a:	4807      	ldr	r0, [pc, #28]	; (1bb8 <uart_console_init+0x2c>)
    1b9c:	f7ff fe60 	bl	1860 <__stdout_hook_install>
	__printk_hook_install(console_out);
    1ba0:	4805      	ldr	r0, [pc, #20]	; (1bb8 <uart_console_init+0x2c>)
    1ba2:	f7fe fca3 	bl	4ec <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    1ba6:	2000      	movs	r0, #0
}
    1ba8:	bd08      	pop	{r3, pc}
		return -ENODEV;
    1baa:	f06f 0012 	mvn.w	r0, #18
    1bae:	e7fb      	b.n	1ba8 <uart_console_init+0x1c>
    1bb0:	20000284 	.word	0x20000284
    1bb4:	00004e08 	.word	0x00004e08
    1bb8:	00001bbd 	.word	0x00001bbd

00001bbc <console_out>:
	if ('\n' == c) {
    1bbc:	280a      	cmp	r0, #10
{
    1bbe:	b538      	push	{r3, r4, r5, lr}
    1bc0:	4d07      	ldr	r5, [pc, #28]	; (1be0 <console_out+0x24>)
    1bc2:	4604      	mov	r4, r0
	if ('\n' == c) {
    1bc4:	d104      	bne.n	1bd0 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    1bc6:	6828      	ldr	r0, [r5, #0]
					unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    1bc8:	6883      	ldr	r3, [r0, #8]
    1bca:	210d      	movs	r1, #13
    1bcc:	685b      	ldr	r3, [r3, #4]
    1bce:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    1bd0:	6828      	ldr	r0, [r5, #0]
    1bd2:	6883      	ldr	r3, [r0, #8]
    1bd4:	b2e1      	uxtb	r1, r4
    1bd6:	685b      	ldr	r3, [r3, #4]
    1bd8:	4798      	blx	r3
}
    1bda:	4620      	mov	r0, r4
    1bdc:	bd38      	pop	{r3, r4, r5, pc}
    1bde:	bf00      	nop
    1be0:	20000284 	.word	0x20000284

00001be4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    1be4:	b530      	push	{r4, r5, lr}
	return port->config;
    1be6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1be8:	7b04      	ldrb	r4, [r0, #12]
    1bea:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    1bee:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    1bf2:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    1bf6:	b085      	sub	sp, #20
    1bf8:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    1bfc:	d104      	bne.n	1c08 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    1bfe:	4628      	mov	r0, r5
    1c00:	f001 fb96 	bl	3330 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    1c04:	2000      	movs	r0, #0
    1c06:	e02e      	b.n	1c66 <gpio_nrfx_pin_interrupt_configure+0x82>
	if (mode == GPIO_INT_MODE_LEVEL) {
    1c08:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    1c0c:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    1c10:	d12b      	bne.n	1c6a <gpio_nrfx_pin_interrupt_configure+0x86>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    1c12:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    1c16:	bf0c      	ite	eq
    1c18:	2304      	moveq	r3, #4
    1c1a:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    1c1c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    1c20:	6883      	ldr	r3, [r0, #8]
    1c22:	fa23 f101 	lsr.w	r1, r3, r1
    1c26:	07c9      	lsls	r1, r1, #31
    1c28:	d42b      	bmi.n	1c82 <gpio_nrfx_pin_interrupt_configure+0x9e>
    1c2a:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    1c2e:	d128      	bne.n	1c82 <gpio_nrfx_pin_interrupt_configure+0x9e>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    1c30:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    1c34:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    1c38:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    1c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    1c40:	07db      	lsls	r3, r3, #31
    1c42:	d41e      	bmi.n	1c82 <gpio_nrfx_pin_interrupt_configure+0x9e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    1c44:	f10d 0407 	add.w	r4, sp, #7
    1c48:	4621      	mov	r1, r4
    1c4a:	4628      	mov	r0, r5
    1c4c:	f001 fad8 	bl	3200 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    1c50:	4b14      	ldr	r3, [pc, #80]	; (1ca4 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    1c52:	4298      	cmp	r0, r3
    1c54:	d114      	bne.n	1c80 <gpio_nrfx_pin_interrupt_configure+0x9c>
			err = nrfx_gpiote_channel_alloc(&ch);
    1c56:	4620      	mov	r0, r4
    1c58:	f001 fb20 	bl	329c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    1c5c:	4b12      	ldr	r3, [pc, #72]	; (1ca8 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    1c5e:	4298      	cmp	r0, r3
    1c60:	d00e      	beq.n	1c80 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
    1c62:	f06f 000b 	mvn.w	r0, #11
}
    1c66:	b005      	add	sp, #20
    1c68:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    1c6a:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    1c6e:	d005      	beq.n	1c7c <gpio_nrfx_pin_interrupt_configure+0x98>
    1c70:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    1c74:	bf0c      	ite	eq
    1c76:	2302      	moveq	r3, #2
    1c78:	2301      	movne	r3, #1
    1c7a:	e7cf      	b.n	1c1c <gpio_nrfx_pin_interrupt_configure+0x38>
    1c7c:	2303      	movs	r3, #3
    1c7e:	e7cd      	b.n	1c1c <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    1c80:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1c82:	2300      	movs	r3, #0
    1c84:	4619      	mov	r1, r3
    1c86:	aa02      	add	r2, sp, #8
    1c88:	4628      	mov	r0, r5
    1c8a:	f001 f991 	bl	2fb0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1c8e:	4b06      	ldr	r3, [pc, #24]	; (1ca8 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    1c90:	4298      	cmp	r0, r3
    1c92:	d104      	bne.n	1c9e <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    1c94:	2101      	movs	r1, #1
    1c96:	4628      	mov	r0, r5
    1c98:	f001 fb06 	bl	32a8 <nrfx_gpiote_trigger_enable>
    1c9c:	e7b2      	b.n	1c04 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    1c9e:	f06f 0004 	mvn.w	r0, #4
    1ca2:	e7e0      	b.n	1c66 <gpio_nrfx_pin_interrupt_configure+0x82>
    1ca4:	0bad0004 	.word	0x0bad0004
    1ca8:	0bad0000 	.word	0x0bad0000

00001cac <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    1cac:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    1cae:	f001 fae5 	bl	327c <nrfx_gpiote_is_init>
    1cb2:	4604      	mov	r4, r0
    1cb4:	b968      	cbnz	r0, 1cd2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    1cb6:	f001 fab9 	bl	322c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    1cba:	4b08      	ldr	r3, [pc, #32]	; (1cdc <gpio_nrfx_init+0x30>)
    1cbc:	4298      	cmp	r0, r3
    1cbe:	d10a      	bne.n	1cd6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    1cc0:	4807      	ldr	r0, [pc, #28]	; (1ce0 <gpio_nrfx_init+0x34>)
    1cc2:	4621      	mov	r1, r4
    1cc4:	f001 fa96 	bl	31f4 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    1cc8:	4622      	mov	r2, r4
    1cca:	2105      	movs	r1, #5
    1ccc:	2006      	movs	r0, #6
    1cce:	f7ff fa71 	bl	11b4 <z_arm_irq_priority_set>
		return 0;
    1cd2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    1cd4:	bd10      	pop	{r4, pc}
		return -EIO;
    1cd6:	f06f 0004 	mvn.w	r0, #4
    1cda:	e7fb      	b.n	1cd4 <gpio_nrfx_init+0x28>
    1cdc:	0bad0000 	.word	0x0bad0000
    1ce0:	00001ce5 	.word	0x00001ce5

00001ce4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1ce4:	0943      	lsrs	r3, r0, #5
{
    1ce6:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    1ce8:	d110      	bne.n	1d0c <nrfx_gpio_handler+0x28>
	return list->head;
    1cea:	4b09      	ldr	r3, [pc, #36]	; (1d10 <nrfx_gpio_handler+0x2c>)
    1cec:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1cee:	b169      	cbz	r1, 1d0c <nrfx_gpio_handler+0x28>
	gpio_fire_callbacks(list, port, BIT(pin));
    1cf0:	2501      	movs	r5, #1
	return node->next;
    1cf2:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    1cf4:	4e07      	ldr	r6, [pc, #28]	; (1d14 <nrfx_gpio_handler+0x30>)
    1cf6:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
    1cf8:	688a      	ldr	r2, [r1, #8]
    1cfa:	402a      	ands	r2, r5
    1cfc:	d002      	beq.n	1d04 <nrfx_gpio_handler+0x20>
			cb->handler(port, cb, cb->pin_mask & pins);
    1cfe:	684b      	ldr	r3, [r1, #4]
    1d00:	4630      	mov	r0, r6
    1d02:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    1d04:	b114      	cbz	r4, 1d0c <nrfx_gpio_handler+0x28>
    1d06:	4621      	mov	r1, r4
    1d08:	6824      	ldr	r4, [r4, #0]
    1d0a:	e7f5      	b.n	1cf8 <nrfx_gpio_handler+0x14>
}
    1d0c:	bd70      	pop	{r4, r5, r6, pc}
    1d0e:	bf00      	nop
    1d10:	20000288 	.word	0x20000288
    1d14:	00004df0 	.word	0x00004df0

00001d18 <gpio_nrfx_pin_configure>:
{
    1d18:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    1d1c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1d1e:	7b3b      	ldrb	r3, [r7, #12]
    1d20:	f001 051f 	and.w	r5, r1, #31
{
    1d24:	b085      	sub	sp, #20
    1d26:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    1d28:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    1d2c:	4614      	mov	r4, r2
    1d2e:	b9ca      	cbnz	r2, 1d64 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    1d30:	a902      	add	r1, sp, #8
    1d32:	4628      	mov	r0, r5
    1d34:	f001 fa64 	bl	3200 <nrfx_gpiote_channel_get>
    1d38:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    1d3a:	4628      	mov	r0, r5
    1d3c:	f001 fb20 	bl	3380 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    1d40:	4b4a      	ldr	r3, [pc, #296]	; (1e6c <gpio_nrfx_pin_configure+0x154>)
    1d42:	4298      	cmp	r0, r3
    1d44:	d004      	beq.n	1d50 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    1d46:	f06f 0004 	mvn.w	r0, #4
}
    1d4a:	b005      	add	sp, #20
    1d4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    1d50:	4284      	cmp	r4, r0
    1d52:	d105      	bne.n	1d60 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    1d54:	f89d 0008 	ldrb.w	r0, [sp, #8]
    1d58:	f001 fa9a 	bl	3290 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    1d5c:	42a0      	cmp	r0, r4
    1d5e:	d1f2      	bne.n	1d46 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    1d60:	2000      	movs	r0, #0
    1d62:	e7f2      	b.n	1d4a <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    1d64:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    1d68:	f10d 0103 	add.w	r1, sp, #3
    1d6c:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    1d6e:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    1d72:	f001 fa45 	bl	3200 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1d76:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    1d78:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    1d7a:	aa02      	add	r2, sp, #8
    1d7c:	4649      	mov	r1, r9
    1d7e:	4628      	mov	r0, r5
    1d80:	f001 f916 	bl	2fb0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    1d84:	4b39      	ldr	r3, [pc, #228]	; (1e6c <gpio_nrfx_pin_configure+0x154>)
    1d86:	4298      	cmp	r0, r3
    1d88:	d002      	beq.n	1d90 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    1d8a:	f06f 0015 	mvn.w	r0, #21
    1d8e:	e7dc      	b.n	1d4a <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    1d90:	4580      	cmp	r8, r0
    1d92:	d103      	bne.n	1d9c <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    1d94:	f89d 0003 	ldrb.w	r0, [sp, #3]
    1d98:	f001 fa7a 	bl	3290 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    1d9c:	03a3      	lsls	r3, r4, #14
    1d9e:	d551      	bpl.n	1e44 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    1da0:	f240 6306 	movw	r3, #1542	; 0x606
    1da4:	4023      	ands	r3, r4
    1da6:	f240 2206 	movw	r2, #518	; 0x206
    1daa:	4293      	cmp	r3, r2
    1dac:	d03b      	beq.n	1e26 <gpio_nrfx_pin_configure+0x10e>
    1dae:	d80c      	bhi.n	1dca <gpio_nrfx_pin_configure+0xb2>
    1db0:	2b06      	cmp	r3, #6
    1db2:	d015      	beq.n	1de0 <gpio_nrfx_pin_configure+0xc8>
    1db4:	d804      	bhi.n	1dc0 <gpio_nrfx_pin_configure+0xa8>
    1db6:	b19b      	cbz	r3, 1de0 <gpio_nrfx_pin_configure+0xc8>
    1db8:	2b02      	cmp	r3, #2
    1dba:	d1e6      	bne.n	1d8a <gpio_nrfx_pin_configure+0x72>
    1dbc:	2304      	movs	r3, #4
    1dbe:	e00f      	b.n	1de0 <gpio_nrfx_pin_configure+0xc8>
    1dc0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    1dc4:	d1e1      	bne.n	1d8a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    1dc6:	2301      	movs	r3, #1
    1dc8:	e00a      	b.n	1de0 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    1dca:	f240 4202 	movw	r2, #1026	; 0x402
    1dce:	4293      	cmp	r3, r2
    1dd0:	d02b      	beq.n	1e2a <gpio_nrfx_pin_configure+0x112>
    1dd2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    1dd6:	d02a      	beq.n	1e2e <gpio_nrfx_pin_configure+0x116>
    1dd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    1ddc:	d1d5      	bne.n	1d8a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    1dde:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    1de0:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    1de4:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    1de8:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    1dec:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    1dee:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    1df2:	bf54      	ite	pl
    1df4:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    1df8:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    1dfa:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    1dfc:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    1e00:	d517      	bpl.n	1e32 <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    1e02:	687b      	ldr	r3, [r7, #4]
    1e04:	2101      	movs	r1, #1
    1e06:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    1e0a:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    1e0e:	2200      	movs	r2, #0
    1e10:	a901      	add	r1, sp, #4
    1e12:	4628      	mov	r0, r5
    1e14:	f001 f976 	bl	3104 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    1e18:	4b14      	ldr	r3, [pc, #80]	; (1e6c <gpio_nrfx_pin_configure+0x154>)
    1e1a:	4298      	cmp	r0, r3
    1e1c:	bf14      	ite	ne
    1e1e:	f06f 0015 	mvnne.w	r0, #21
    1e22:	2000      	moveq	r0, #0
    1e24:	e791      	b.n	1d4a <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    1e26:	2307      	movs	r3, #7
    1e28:	e7da      	b.n	1de0 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    1e2a:	2305      	movs	r3, #5
    1e2c:	e7d8      	b.n	1de0 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    1e2e:	2303      	movs	r3, #3
    1e30:	e7d6      	b.n	1de0 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    1e32:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    1e34:	bf41      	itttt	mi
    1e36:	687b      	ldrmi	r3, [r7, #4]
    1e38:	2101      	movmi	r1, #1
    1e3a:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    1e3e:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    1e42:	e7e4      	b.n	1e0e <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    1e44:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1e46:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    1e4a:	bf54      	ite	pl
    1e4c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    1e50:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1e52:	461a      	mov	r2, r3
    1e54:	a901      	add	r1, sp, #4
    1e56:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    1e58:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    1e5c:	f001 f8a8 	bl	2fb0 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    1e60:	4b02      	ldr	r3, [pc, #8]	; (1e6c <gpio_nrfx_pin_configure+0x154>)
    1e62:	4298      	cmp	r0, r3
    1e64:	f43f af7c 	beq.w	1d60 <gpio_nrfx_pin_configure+0x48>
    1e68:	e78f      	b.n	1d8a <gpio_nrfx_pin_configure+0x72>
    1e6a:	bf00      	nop
    1e6c:	0bad0000 	.word	0x0bad0000

00001e70 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    1e70:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    1e72:	794b      	ldrb	r3, [r1, #5]
    1e74:	2b01      	cmp	r3, #1
    1e76:	d028      	beq.n	1eca <uarte_nrfx_configure+0x5a>
    1e78:	2b03      	cmp	r3, #3
    1e7a:	d123      	bne.n	1ec4 <uarte_nrfx_configure+0x54>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    1e7c:	2710      	movs	r7, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    1e7e:	798b      	ldrb	r3, [r1, #6]
    1e80:	2b03      	cmp	r3, #3
    1e82:	d11f      	bne.n	1ec4 <uarte_nrfx_configure+0x54>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    1e84:	79cd      	ldrb	r5, [r1, #7]
    1e86:	b10d      	cbz	r5, 1e8c <uarte_nrfx_configure+0x1c>
    1e88:	2d01      	cmp	r5, #1
    1e8a:	d11b      	bne.n	1ec4 <uarte_nrfx_configure+0x54>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    1e8c:	790a      	ldrb	r2, [r1, #4]
    1e8e:	2a01      	cmp	r2, #1
    1e90:	d01d      	beq.n	1ece <uarte_nrfx_configure+0x5e>
    1e92:	2a02      	cmp	r2, #2
    1e94:	d01f      	beq.n	1ed6 <uarte_nrfx_configure+0x66>
    1e96:	b9aa      	cbnz	r2, 1ec4 <uarte_nrfx_configure+0x54>
    1e98:	4614      	mov	r4, r2
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    1e9a:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    1e9c:	6846      	ldr	r6, [r0, #4]
	switch (baudrate) {
    1e9e:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    1ea2:	6836      	ldr	r6, [r6, #0]
	switch (baudrate) {
    1ea4:	d06e      	beq.n	1f84 <uarte_nrfx_configure+0x114>
    1ea6:	d833      	bhi.n	1f10 <uarte_nrfx_configure+0xa0>
    1ea8:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    1eac:	d06d      	beq.n	1f8a <uarte_nrfx_configure+0x11a>
    1eae:	d81c      	bhi.n	1eea <uarte_nrfx_configure+0x7a>
    1eb0:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    1eb4:	d06b      	beq.n	1f8e <uarte_nrfx_configure+0x11e>
    1eb6:	d810      	bhi.n	1eda <uarte_nrfx_configure+0x6a>
    1eb8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    1ebc:	d06a      	beq.n	1f94 <uarte_nrfx_configure+0x124>
    1ebe:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    1ec2:	d06a      	beq.n	1f9a <uarte_nrfx_configure+0x12a>
    1ec4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1ec8:	e05b      	b.n	1f82 <uarte_nrfx_configure+0x112>
	switch (cfg->stop_bits) {
    1eca:	2700      	movs	r7, #0
    1ecc:	e7d7      	b.n	1e7e <uarte_nrfx_configure+0xe>
		uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_ODD;
    1ece:	f44f 7480 	mov.w	r4, #256	; 0x100
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    1ed2:	220e      	movs	r2, #14
    1ed4:	e7e1      	b.n	1e9a <uarte_nrfx_configure+0x2a>
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
    1ed6:	2400      	movs	r4, #0
    1ed8:	e7fb      	b.n	1ed2 <uarte_nrfx_configure+0x62>
	switch (baudrate) {
    1eda:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    1ede:	d05f      	beq.n	1fa0 <uarte_nrfx_configure+0x130>
    1ee0:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    1ee4:	d1ee      	bne.n	1ec4 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    1ee6:	4b39      	ldr	r3, [pc, #228]	; (1fcc <uarte_nrfx_configure+0x15c>)
    1ee8:	e03e      	b.n	1f68 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    1eea:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    1eee:	d05a      	beq.n	1fa6 <uarte_nrfx_configure+0x136>
    1ef0:	d807      	bhi.n	1f02 <uarte_nrfx_configure+0x92>
    1ef2:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    1ef6:	d058      	beq.n	1faa <uarte_nrfx_configure+0x13a>
    1ef8:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    1efc:	d1e2      	bne.n	1ec4 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    1efe:	4b34      	ldr	r3, [pc, #208]	; (1fd0 <uarte_nrfx_configure+0x160>)
    1f00:	e032      	b.n	1f68 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    1f02:	f647 2c12 	movw	ip, #31250	; 0x7a12
    1f06:	4563      	cmp	r3, ip
    1f08:	d1dc      	bne.n	1ec4 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    1f0a:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    1f0e:	e02b      	b.n	1f68 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    1f10:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    1f14:	d04b      	beq.n	1fae <uarte_nrfx_configure+0x13e>
    1f16:	d813      	bhi.n	1f40 <uarte_nrfx_configure+0xd0>
    1f18:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    1f1c:	d04a      	beq.n	1fb4 <uarte_nrfx_configure+0x144>
    1f1e:	d809      	bhi.n	1f34 <uarte_nrfx_configure+0xc4>
    1f20:	f64d 2cc0 	movw	ip, #56000	; 0xdac0
    1f24:	4563      	cmp	r3, ip
    1f26:	d047      	beq.n	1fb8 <uarte_nrfx_configure+0x148>
    1f28:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    1f2c:	d1ca      	bne.n	1ec4 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    1f2e:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    1f32:	e019      	b.n	1f68 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    1f34:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    1f38:	d1c4      	bne.n	1ec4 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    1f3a:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    1f3e:	e013      	b.n	1f68 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    1f40:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    1f44:	d03b      	beq.n	1fbe <uarte_nrfx_configure+0x14e>
    1f46:	d809      	bhi.n	1f5c <uarte_nrfx_configure+0xec>
    1f48:	f8df c088 	ldr.w	ip, [pc, #136]	; 1fd4 <uarte_nrfx_configure+0x164>
    1f4c:	4563      	cmp	r3, ip
    1f4e:	d039      	beq.n	1fc4 <uarte_nrfx_configure+0x154>
    1f50:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    1f54:	d1b6      	bne.n	1ec4 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    1f56:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    1f5a:	e005      	b.n	1f68 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    1f5c:	f8df c078 	ldr.w	ip, [pc, #120]	; 1fd8 <uarte_nrfx_configure+0x168>
    1f60:	4563      	cmp	r3, ip
    1f62:	d1af      	bne.n	1ec4 <uarte_nrfx_configure+0x54>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    1f64:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
	struct uarte_nrfx_data *data = dev->data;
    1f68:	6900      	ldr	r0, [r0, #16]
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    1f6a:	f8c6 3524 	str.w	r3, [r6, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	data->uart_config = *cfg;
    1f6e:	1d03      	adds	r3, r0, #4
    1f70:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    1f72:	432c      	orrs	r4, r5
                    | (uint32_t)p_cfg->stop
    1f74:	433a      	orrs	r2, r7
                    | (uint32_t)p_cfg->hwfc;
    1f76:	4322      	orrs	r2, r4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    1f78:	f8c6 256c 	str.w	r2, [r6, #1388]	; 0x56c
    1f7c:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    1f80:	2000      	movs	r0, #0
}
    1f82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    1f84:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    1f88:	e7ee      	b.n	1f68 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    1f8a:	4b14      	ldr	r3, [pc, #80]	; (1fdc <uarte_nrfx_configure+0x16c>)
    1f8c:	e7ec      	b.n	1f68 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    1f8e:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    1f92:	e7e9      	b.n	1f68 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = 0x00014000;
    1f94:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    1f98:	e7e6      	b.n	1f68 <uarte_nrfx_configure+0xf8>
	switch (baudrate) {
    1f9a:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    1f9e:	e7e3      	b.n	1f68 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    1fa0:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    1fa4:	e7e0      	b.n	1f68 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    1fa6:	4b0e      	ldr	r3, [pc, #56]	; (1fe0 <uarte_nrfx_configure+0x170>)
    1fa8:	e7de      	b.n	1f68 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    1faa:	4b0e      	ldr	r3, [pc, #56]	; (1fe4 <uarte_nrfx_configure+0x174>)
    1fac:	e7dc      	b.n	1f68 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    1fae:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    1fb2:	e7d9      	b.n	1f68 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    1fb4:	4b0c      	ldr	r3, [pc, #48]	; (1fe8 <uarte_nrfx_configure+0x178>)
    1fb6:	e7d7      	b.n	1f68 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    1fb8:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    1fbc:	e7d4      	b.n	1f68 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    1fbe:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    1fc2:	e7d1      	b.n	1f68 <uarte_nrfx_configure+0xf8>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    1fc4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    1fc8:	e7ce      	b.n	1f68 <uarte_nrfx_configure+0xf8>
    1fca:	bf00      	nop
    1fcc:	0013b000 	.word	0x0013b000
    1fd0:	004ea000 	.word	0x004ea000
    1fd4:	0003d090 	.word	0x0003d090
    1fd8:	000f4240 	.word	0x000f4240
    1fdc:	00275000 	.word	0x00275000
    1fe0:	0075c000 	.word	0x0075c000
    1fe4:	003af000 	.word	0x003af000
    1fe8:	013a9000 	.word	0x013a9000

00001fec <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    1fec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    1ff0:	4607      	mov	r7, r0
    1ff2:	2200      	movs	r2, #0
    1ff4:	2101      	movs	r1, #1
    1ff6:	2002      	movs	r0, #2
    1ff8:	f7ff f8dc 	bl	11b4 <z_arm_irq_priority_set>
    1ffc:	2002      	movs	r0, #2
    1ffe:	f7ff f8a7 	bl	1150 <arch_irq_enable>
	const struct uarte_nrfx_config *config = dev->config;
    2002:	f8d7 8004 	ldr.w	r8, [r7, #4]
	struct uarte_nrfx_data *data = dev->data;
    2006:	693e      	ldr	r6, [r7, #16]
	return config->uarte_regs;
    2008:	f8d8 4000 	ldr.w	r4, [r8]
	err = pinctrl_apply_state(cfg->pcfg, PINCTRL_STATE_DEFAULT);
    200c:	f8d8 900c 	ldr.w	r9, [r8, #12]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    2010:	2100      	movs	r1, #0
    2012:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    2016:	aa01      	add	r2, sp, #4
	data->dev = dev;
    2018:	6037      	str	r7, [r6, #0]
    201a:	4648      	mov	r0, r9
    201c:	f002 fc17 	bl	484e <pinctrl_lookup_state>
	if (ret < 0) {
    2020:	1e05      	subs	r5, r0, #0
    2022:	db56      	blt.n	20d2 <uarte_0_init+0xe6>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    2024:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    2026:	f8d9 2000 	ldr.w	r2, [r9]
    202a:	7919      	ldrb	r1, [r3, #4]
    202c:	6818      	ldr	r0, [r3, #0]
    202e:	f002 fc43 	bl	48b8 <pinctrl_configure_pins>
	if (err < 0) {
    2032:	1e05      	subs	r5, r0, #0
    2034:	db4d      	blt.n	20d2 <uarte_0_init+0xe6>
	err = uarte_nrfx_configure(dev, &data->uart_config);
    2036:	1d31      	adds	r1, r6, #4
    2038:	4638      	mov	r0, r7
    203a:	f7ff ff19 	bl	1e70 <uarte_nrfx_configure>
	if (err) {
    203e:	4605      	mov	r5, r0
    2040:	2800      	cmp	r0, #0
    2042:	d146      	bne.n	20d2 <uarte_0_init+0xe6>
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    2044:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    2048:	0799      	lsls	r1, r3, #30
    204a:	d519      	bpl.n	2080 <uarte_0_init+0x94>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    204c:	f106 0012 	add.w	r0, r6, #18
    2050:	f001 fa60 	bl	3514 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    2054:	4b22      	ldr	r3, [pc, #136]	; (20e0 <uarte_0_init+0xf4>)
    2056:	4298      	cmp	r0, r3
    2058:	d13f      	bne.n	20da <uarte_0_init+0xee>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    205a:	7cb0      	ldrb	r0, [r6, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    205c:	00c3      	lsls	r3, r0, #3
    205e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2062:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    2066:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    206a:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    206e:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    2072:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    2076:	4a1b      	ldr	r2, [pc, #108]	; (20e4 <uarte_0_init+0xf8>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    2078:	2301      	movs	r3, #1
    207a:	4083      	lsls	r3, r0
    207c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2080:	2308      	movs	r3, #8
    2082:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (!cfg->disable_rx) {
    2086:	f898 3008 	ldrb.w	r3, [r8, #8]
    208a:	b95b      	cbnz	r3, 20a4 <uarte_0_init+0xb8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    208c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    2090:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    2094:	f106 0311 	add.w	r3, r6, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    2098:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    209c:	2301      	movs	r3, #1
    209e:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    20a2:	6023      	str	r3, [r4, #0]
	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    20a4:	f8d8 3004 	ldr.w	r3, [r8, #4]
    20a8:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    20aa:	bf5c      	itt	pl
    20ac:	f44f 7280 	movpl.w	r2, #256	; 0x100
    20b0:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    20b4:	06db      	lsls	r3, r3, #27
    20b6:	bf44      	itt	mi
    20b8:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    20bc:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    20c0:	3610      	adds	r6, #16
    p_reg->TXD.MAXCNT = length;
    20c2:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    20c4:	f8c4 6544 	str.w	r6, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    20c8:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    20cc:	2301      	movs	r3, #1
    20ce:	60a3      	str	r3, [r4, #8]
    20d0:	60e3      	str	r3, [r4, #12]
UART_NRF_UARTE_DEVICE(0);
    20d2:	4628      	mov	r0, r5
    20d4:	b003      	add	sp, #12
    20d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    20da:	f06f 0504 	mvn.w	r5, #4
UART_NRF_UARTE_DEVICE(0);
    20de:	e7f8      	b.n	20d2 <uarte_0_init+0xe6>
    20e0:	0bad0000 	.word	0x0bad0000
    20e4:	4001f000 	.word	0x4001f000

000020e8 <uarte_nrfx_poll_out>:
{
    20e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = dev->data;
    20ea:	6906      	ldr	r6, [r0, #16]
{
    20ec:	4605      	mov	r5, r0
    20ee:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    20f0:	f002 fd57 	bl	4ba2 <k_is_in_isr>
    20f4:	b910      	cbnz	r0, 20fc <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    20f6:	4b2c      	ldr	r3, [pc, #176]	; (21a8 <uarte_nrfx_poll_out+0xc0>)
	if (isr_mode) {
    20f8:	781b      	ldrb	r3, [r3, #0]
    20fa:	b983      	cbnz	r3, 211e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    20fc:	f04f 0320 	mov.w	r3, #32
    2100:	f3ef 8411 	mrs	r4, BASEPRI
    2104:	f383 8812 	msr	BASEPRI_MAX, r3
    2108:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    210c:	6868      	ldr	r0, [r5, #4]
    210e:	f002 fb54 	bl	47ba <is_tx_ready.isra.0>
    2112:	bb28      	cbnz	r0, 2160 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    2114:	f384 8811 	msr	BASEPRI, r4
    2118:	f3bf 8f6f 	isb	sy
}
    211c:	e7ee      	b.n	20fc <uarte_nrfx_poll_out+0x14>
{
    211e:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    2120:	6868      	ldr	r0, [r5, #4]
    2122:	f002 fb4a 	bl	47ba <is_tx_ready.isra.0>
    2126:	b970      	cbnz	r0, 2146 <uarte_nrfx_poll_out+0x5e>
    2128:	2001      	movs	r0, #1
    212a:	f002 fc5d 	bl	49e8 <nrfx_busy_wait>
    212e:	3c01      	subs	r4, #1
    2130:	d1f6      	bne.n	2120 <uarte_nrfx_poll_out+0x38>
    2132:	2100      	movs	r1, #0
    2134:	2021      	movs	r0, #33	; 0x21
    2136:	f001 febd 	bl	3eb4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    213a:	e7f0      	b.n	211e <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    213c:	f384 8811 	msr	BASEPRI, r4
    2140:	f3bf 8f6f 	isb	sy
}
    2144:	e7f5      	b.n	2132 <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    2146:	f04f 0320 	mov.w	r3, #32
    214a:	f3ef 8411 	mrs	r4, BASEPRI
    214e:	f383 8812 	msr	BASEPRI_MAX, r3
    2152:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    2156:	6868      	ldr	r0, [r5, #4]
    2158:	f002 fb2f 	bl	47ba <is_tx_ready.isra.0>
    215c:	2800      	cmp	r0, #0
    215e:	d0ed      	beq.n	213c <uarte_nrfx_poll_out+0x54>
	data->char_out = c;
    2160:	f806 7f10 	strb.w	r7, [r6, #16]!
	tx_start(dev, &data->char_out, 1);
    2164:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    2166:	680b      	ldr	r3, [r1, #0]
    p_reg->TXD.MAXCNT = length;
    2168:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    216a:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    216e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2172:	2200      	movs	r2, #0
    2174:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    2178:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    217c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    2180:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    2184:	684a      	ldr	r2, [r1, #4]
    2186:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    2188:	bf41      	itttt	mi
    218a:	2208      	movmi	r2, #8
    218c:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    2190:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    2194:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2198:	2201      	movs	r2, #1
    219a:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    219c:	f384 8811 	msr	BASEPRI, r4
    21a0:	f3bf 8f6f 	isb	sy
}
    21a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    21a6:	bf00      	nop
    21a8:	20000b44 	.word	0x20000b44

000021ac <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    21ac:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    21ae:	2301      	movs	r3, #1
    21b0:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    21b2:	4a11      	ldr	r2, [pc, #68]	; (21f8 <compare_int_lock+0x4c>)
    21b4:	f3bf 8f5b 	dmb	ish
    21b8:	43dc      	mvns	r4, r3
    21ba:	e852 1f00 	ldrex	r1, [r2]
    21be:	ea01 0c04 	and.w	ip, r1, r4
    21c2:	e842 ce00 	strex	lr, ip, [r2]
    21c6:	f1be 0f00 	cmp.w	lr, #0
    21ca:	d1f6      	bne.n	21ba <compare_int_lock+0xe>
    21cc:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    21d0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    21d4:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    21d8:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    21dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    21e0:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    21e4:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    21e8:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    21ec:	420b      	tst	r3, r1
}
    21ee:	bf14      	ite	ne
    21f0:	2001      	movne	r0, #1
    21f2:	2000      	moveq	r0, #0
    21f4:	bd10      	pop	{r4, pc}
    21f6:	bf00      	nop
    21f8:	20000298 	.word	0x20000298

000021fc <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    21fc:	4919      	ldr	r1, [pc, #100]	; (2264 <sys_clock_timeout_handler+0x68>)
{
    21fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2200:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    2202:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2206:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    2208:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    220c:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    2210:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    2212:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    2216:	d222      	bcs.n	225e <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    2218:	4b13      	ldr	r3, [pc, #76]	; (2268 <sys_clock_timeout_handler+0x6c>)
    221a:	681b      	ldr	r3, [r3, #0]
    221c:	0a1a      	lsrs	r2, r3, #8
    221e:	061b      	lsls	r3, r3, #24
    2220:	195e      	adds	r6, r3, r5
    2222:	4b12      	ldr	r3, [pc, #72]	; (226c <sys_clock_timeout_handler+0x70>)
    2224:	f142 0700 	adc.w	r7, r2, #0
    2228:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    222c:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    222e:	f001 ff91 	bl	4154 <sys_clock_announce>
    return p_reg->CC[ch];
    2232:	00a3      	lsls	r3, r4, #2
    2234:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    2238:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    223c:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    2240:	42aa      	cmp	r2, r5
    2242:	d10b      	bne.n	225c <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    2244:	b91e      	cbnz	r6, 224e <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    2246:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    224a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    224e:	4b08      	ldr	r3, [pc, #32]	; (2270 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2250:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    2254:	fa00 f404 	lsl.w	r4, r0, r4
    2258:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    225c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    225e:	2600      	movs	r6, #0
    2260:	e7e5      	b.n	222e <sys_clock_timeout_handler+0x32>
    2262:	bf00      	nop
    2264:	200000c8 	.word	0x200000c8
    2268:	2000029c 	.word	0x2000029c
    226c:	200000b0 	.word	0x200000b0
    2270:	40011000 	.word	0x40011000

00002274 <compare_int_unlock>:
	if (key) {
    2274:	b319      	cbz	r1, 22be <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2276:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    227a:	2301      	movs	r3, #1
    227c:	4a10      	ldr	r2, [pc, #64]	; (22c0 <compare_int_unlock+0x4c>)
    227e:	4083      	lsls	r3, r0
    2280:	e852 1f00 	ldrex	r1, [r2]
    2284:	4319      	orrs	r1, r3
    2286:	e842 1c00 	strex	ip, r1, [r2]
    228a:	f1bc 0f00 	cmp.w	ip, #0
    228e:	d1f7      	bne.n	2280 <compare_int_unlock+0xc>
    2290:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    2294:	4a0b      	ldr	r2, [pc, #44]	; (22c4 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2296:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    229a:	4083      	lsls	r3, r0
    229c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    22a0:	4b09      	ldr	r3, [pc, #36]	; (22c8 <compare_int_unlock+0x54>)
    22a2:	f3bf 8f5b 	dmb	ish
    22a6:	681b      	ldr	r3, [r3, #0]
    22a8:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    22ac:	fa23 f000 	lsr.w	r0, r3, r0
    22b0:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    22b2:	bf42      	ittt	mi
    22b4:	4b05      	ldrmi	r3, [pc, #20]	; (22cc <compare_int_unlock+0x58>)
    22b6:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    22ba:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    22be:	4770      	bx	lr
    22c0:	20000298 	.word	0x20000298
    22c4:	40011000 	.word	0x40011000
    22c8:	20000294 	.word	0x20000294
    22cc:	e000e100 	.word	0xe000e100

000022d0 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    22d0:	4b0d      	ldr	r3, [pc, #52]	; (2308 <z_nrf_rtc_timer_read+0x38>)
    22d2:	6818      	ldr	r0, [r3, #0]
    22d4:	0a01      	lsrs	r1, r0, #8
    22d6:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    22d8:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    22dc:	4b0b      	ldr	r3, [pc, #44]	; (230c <z_nrf_rtc_timer_read+0x3c>)
    22de:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    22e2:	1818      	adds	r0, r3, r0
    22e4:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    22e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    22ec:	d20a      	bcs.n	2304 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    22ee:	4b08      	ldr	r3, [pc, #32]	; (2310 <z_nrf_rtc_timer_read+0x40>)
    22f0:	e9d3 2300 	ldrd	r2, r3, [r3]
    22f4:	4290      	cmp	r0, r2
    22f6:	eb71 0303 	sbcs.w	r3, r1, r3
    22fa:	d203      	bcs.n	2304 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    22fc:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    2300:	f141 0100 	adc.w	r1, r1, #0
}
    2304:	4770      	bx	lr
    2306:	bf00      	nop
    2308:	2000029c 	.word	0x2000029c
    230c:	40011000 	.word	0x40011000
    2310:	200000b0 	.word	0x200000b0

00002314 <compare_set>:
{
    2314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2318:	b085      	sub	sp, #20
    231a:	4616      	mov	r6, r2
    231c:	4698      	mov	r8, r3
    231e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    2320:	f7ff ff44 	bl	21ac <compare_int_lock>
    2324:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    2326:	f7ff ffd3 	bl	22d0 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    232a:	42b0      	cmp	r0, r6
    232c:	eb71 0308 	sbcs.w	r3, r1, r8
    2330:	d278      	bcs.n	2424 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    2332:	4b46      	ldr	r3, [pc, #280]	; (244c <compare_set+0x138>)
    2334:	1a30      	subs	r0, r6, r0
    2336:	eb68 0101 	sbc.w	r1, r8, r1
    233a:	4298      	cmp	r0, r3
    233c:	f171 0300 	sbcs.w	r3, r1, #0
    2340:	f080 8081 	bcs.w	2446 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    2344:	4b42      	ldr	r3, [pc, #264]	; (2450 <compare_set+0x13c>)
    2346:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    234a:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    234e:	45d8      	cmp	r8, fp
    2350:	bf08      	it	eq
    2352:	4556      	cmpeq	r6, sl
    2354:	d051      	beq.n	23fa <compare_set+0xe6>
    2356:	ea4f 0985 	mov.w	r9, r5, lsl #2
    235a:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    235e:	f105 0750 	add.w	r7, r5, #80	; 0x50
    2362:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    2366:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    2368:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    236c:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2370:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    2372:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    2376:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    237a:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    237c:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    2380:	4b34      	ldr	r3, [pc, #208]	; (2454 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    2382:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    2386:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    2388:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    238c:	1a40      	subs	r0, r0, r1
    238e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    2392:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    2396:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    2398:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    239c:	d107      	bne.n	23ae <compare_set+0x9a>
    239e:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    23a2:	2013      	movs	r0, #19
    23a4:	f002 fcf0 	bl	4d88 <z_impl_k_busy_wait>
    23a8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    23ac:	4b29      	ldr	r3, [pc, #164]	; (2454 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    23ae:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    23b2:	eba4 000c 	sub.w	r0, r4, ip
    23b6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    23ba:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    23be:	bf88      	it	hi
    23c0:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    23c2:	2000      	movs	r0, #0
    23c4:	6038      	str	r0, [r7, #0]
    23c6:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    23c8:	9801      	ldr	r0, [sp, #4]
    23ca:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    23ce:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    23d2:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    23d6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    23da:	4281      	cmp	r1, r0
    23dc:	d006      	beq.n	23ec <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    23de:	1a20      	subs	r0, r4, r0
    23e0:	3802      	subs	r0, #2
    23e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    23e6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    23ea:	d819      	bhi.n	2420 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    23ec:	1aa4      	subs	r4, r4, r2
    23ee:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    23f2:	eb14 0a06 	adds.w	sl, r4, r6
    23f6:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    23fa:	4915      	ldr	r1, [pc, #84]	; (2450 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    23fc:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    23fe:	012b      	lsls	r3, r5, #4
    2400:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    2404:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    2408:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    240a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    240c:	6053      	str	r3, [r2, #4]
	return ret;
    240e:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    2410:	4628      	mov	r0, r5
    2412:	9900      	ldr	r1, [sp, #0]
    2414:	f7ff ff2e 	bl	2274 <compare_int_unlock>
}
    2418:	4620      	mov	r0, r4
    241a:	b005      	add	sp, #20
    241c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2420:	4620      	mov	r0, r4
    2422:	e7b1      	b.n	2388 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    2424:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2426:	4a0c      	ldr	r2, [pc, #48]	; (2458 <compare_set+0x144>)
    2428:	f3bf 8f5b 	dmb	ish
    242c:	40ab      	lsls	r3, r5
    242e:	e852 1f00 	ldrex	r1, [r2]
    2432:	4319      	orrs	r1, r3
    2434:	e842 1000 	strex	r0, r1, [r2]
    2438:	2800      	cmp	r0, #0
    243a:	d1f8      	bne.n	242e <compare_set+0x11a>
    243c:	f3bf 8f5b 	dmb	ish
    2440:	46b2      	mov	sl, r6
    2442:	46c3      	mov	fp, r8
    2444:	e7d9      	b.n	23fa <compare_set+0xe6>
			return -EINVAL;
    2446:	f06f 0415 	mvn.w	r4, #21
    244a:	e7e1      	b.n	2410 <compare_set+0xfc>
    244c:	01000001 	.word	0x01000001
    2450:	200000b8 	.word	0x200000b8
    2454:	40011000 	.word	0x40011000
    2458:	20000294 	.word	0x20000294

0000245c <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    245c:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    245e:	4b19      	ldr	r3, [pc, #100]	; (24c4 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    2460:	4d19      	ldr	r5, [pc, #100]	; (24c8 <sys_clock_driver_init+0x6c>)
    2462:	2400      	movs	r4, #0
    2464:	f04f 30ff 	mov.w	r0, #4294967295
    2468:	f04f 31ff 	mov.w	r1, #4294967295
    246c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    2470:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    2474:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2478:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    247c:	4b13      	ldr	r3, [pc, #76]	; (24cc <sys_clock_driver_init+0x70>)
    247e:	2602      	movs	r6, #2
    2480:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    2484:	2101      	movs	r1, #1
    2486:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    248a:	2011      	movs	r0, #17
    248c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2490:	4622      	mov	r2, r4
    2492:	f7fe fe8f 	bl	11b4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    2496:	2011      	movs	r0, #17
    2498:	f7fe fe5a 	bl	1150 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    249c:	4a0c      	ldr	r2, [pc, #48]	; (24d0 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    249e:	2301      	movs	r3, #1
    24a0:	60ab      	str	r3, [r5, #8]
    24a2:	602b      	str	r3, [r5, #0]
    24a4:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    24a6:	4b0b      	ldr	r3, [pc, #44]	; (24d4 <sys_clock_driver_init+0x78>)
    24a8:	4a0b      	ldr	r2, [pc, #44]	; (24d8 <sys_clock_driver_init+0x7c>)
    24aa:	9300      	str	r3, [sp, #0]
    24ac:	9401      	str	r4, [sp, #4]
    24ae:	2300      	movs	r3, #0
    24b0:	4620      	mov	r0, r4
    24b2:	f7ff ff2f 	bl	2314 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    24b6:	4630      	mov	r0, r6
    24b8:	f7ff fae8 	bl	1a8c <z_nrf_clock_control_lf_on>

	return 0;
}
    24bc:	4620      	mov	r0, r4
    24be:	b002      	add	sp, #8
    24c0:	bd70      	pop	{r4, r5, r6, pc}
    24c2:	bf00      	nop
    24c4:	200000b8 	.word	0x200000b8
    24c8:	40011000 	.word	0x40011000
    24cc:	e000e100 	.word	0xe000e100
    24d0:	20000298 	.word	0x20000298
    24d4:	000021fd 	.word	0x000021fd
    24d8:	007fffff 	.word	0x007fffff

000024dc <rtc_nrf_isr>:
{
    24dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    24e0:	4c35      	ldr	r4, [pc, #212]	; (25b8 <rtc_nrf_isr+0xdc>)
    24e2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    24e6:	079a      	lsls	r2, r3, #30
    24e8:	d50b      	bpl.n	2502 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    24ea:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    24ee:	b143      	cbz	r3, 2502 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    24f0:	4a32      	ldr	r2, [pc, #200]	; (25bc <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    24f2:	2300      	movs	r3, #0
    24f4:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    24f8:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    24fc:	6813      	ldr	r3, [r2, #0]
    24fe:	3301      	adds	r3, #1
    2500:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    2502:	f04f 0320 	mov.w	r3, #32
    2506:	f3ef 8211 	mrs	r2, BASEPRI
    250a:	f383 8812 	msr	BASEPRI_MAX, r3
    250e:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    2512:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    2516:	03db      	lsls	r3, r3, #15
    2518:	d512      	bpl.n	2540 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    251a:	f3bf 8f5b 	dmb	ish
    251e:	4b28      	ldr	r3, [pc, #160]	; (25c0 <rtc_nrf_isr+0xe4>)
    2520:	e853 1f00 	ldrex	r1, [r3]
    2524:	f021 0001 	bic.w	r0, r1, #1
    2528:	e843 0600 	strex	r6, r0, [r3]
    252c:	2e00      	cmp	r6, #0
    252e:	d1f7      	bne.n	2520 <rtc_nrf_isr+0x44>
    2530:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    2534:	2900      	cmp	r1, #0
    2536:	d136      	bne.n	25a6 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    2538:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    253c:	2b00      	cmp	r3, #0
    253e:	d132      	bne.n	25a6 <rtc_nrf_isr+0xca>
{
    2540:	2300      	movs	r3, #0
	__asm__ volatile(
    2542:	f382 8811 	msr	BASEPRI, r2
    2546:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    254a:	b34b      	cbz	r3, 25a0 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    254c:	f7ff fec0 	bl	22d0 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    2550:	f04f 0320 	mov.w	r3, #32
    2554:	f3ef 8c11 	mrs	ip, BASEPRI
    2558:	f383 8812 	msr	BASEPRI_MAX, r3
    255c:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    2560:	4b18      	ldr	r3, [pc, #96]	; (25c4 <rtc_nrf_isr+0xe8>)
    2562:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    2566:	42b0      	cmp	r0, r6
    2568:	eb71 0207 	sbcs.w	r2, r1, r7
    256c:	f04f 0200 	mov.w	r2, #0
    2570:	d320      	bcc.n	25b4 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    2572:	f04f 38ff 	mov.w	r8, #4294967295
    2576:	f04f 39ff 	mov.w	r9, #4294967295
			user_context = cc_data[chan].user_context;
    257a:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    257e:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    2582:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    2584:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2588:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    258c:	f38c 8811 	msr	BASEPRI, ip
    2590:	f3bf 8f6f 	isb	sy
		if (handler) {
    2594:	b121      	cbz	r1, 25a0 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    2596:	9500      	str	r5, [sp, #0]
    2598:	4632      	mov	r2, r6
    259a:	463b      	mov	r3, r7
    259c:	2000      	movs	r0, #0
    259e:	4788      	blx	r1
}
    25a0:	b003      	add	sp, #12
    25a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    25a6:	2300      	movs	r3, #0
    25a8:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    25ac:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    25b0:	2301      	movs	r3, #1
}
    25b2:	e7c6      	b.n	2542 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    25b4:	4611      	mov	r1, r2
    25b6:	e7e9      	b.n	258c <rtc_nrf_isr+0xb0>
    25b8:	40011000 	.word	0x40011000
    25bc:	2000029c 	.word	0x2000029c
    25c0:	20000294 	.word	0x20000294
    25c4:	200000b8 	.word	0x200000b8

000025c8 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    25c8:	1c43      	adds	r3, r0, #1
{
    25ca:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    25cc:	d021      	beq.n	2612 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    25ce:	2801      	cmp	r0, #1
    25d0:	dd21      	ble.n	2616 <sys_clock_set_timeout+0x4e>
    25d2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    25d6:	da20      	bge.n	261a <sys_clock_set_timeout+0x52>
    25d8:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    25da:	f7ff fe79 	bl	22d0 <z_nrf_rtc_timer_read>
    25de:	4b10      	ldr	r3, [pc, #64]	; (2620 <sys_clock_set_timeout+0x58>)
    25e0:	e9d3 1300 	ldrd	r1, r3, [r3]
    25e4:	1a40      	subs	r0, r0, r1
		ticks = 0;
    25e6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    25ea:	bf28      	it	cs
    25ec:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    25ee:	3001      	adds	r0, #1
    25f0:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    25f2:	480c      	ldr	r0, [pc, #48]	; (2624 <sys_clock_set_timeout+0x5c>)
    25f4:	4282      	cmp	r2, r0
    25f6:	bf28      	it	cs
    25f8:	4602      	movcs	r2, r0
    25fa:	1852      	adds	r2, r2, r1
    25fc:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    2600:	4909      	ldr	r1, [pc, #36]	; (2628 <sys_clock_set_timeout+0x60>)
    2602:	9001      	str	r0, [sp, #4]
    2604:	9100      	str	r1, [sp, #0]
    2606:	f143 0300 	adc.w	r3, r3, #0
    260a:	f7ff fe83 	bl	2314 <compare_set>
}
    260e:	b002      	add	sp, #8
    2610:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    2612:	4804      	ldr	r0, [pc, #16]	; (2624 <sys_clock_set_timeout+0x5c>)
    2614:	e7e0      	b.n	25d8 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    2616:	2400      	movs	r4, #0
    2618:	e7df      	b.n	25da <sys_clock_set_timeout+0x12>
    261a:	4c02      	ldr	r4, [pc, #8]	; (2624 <sys_clock_set_timeout+0x5c>)
    261c:	e7dd      	b.n	25da <sys_clock_set_timeout+0x12>
    261e:	bf00      	nop
    2620:	200000c8 	.word	0x200000c8
    2624:	007fffff 	.word	0x007fffff
    2628:	000021fd 	.word	0x000021fd

0000262c <sys_clock_elapsed>:
{
    262c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    262e:	f7ff fe4f 	bl	22d0 <z_nrf_rtc_timer_read>
    2632:	4b02      	ldr	r3, [pc, #8]	; (263c <sys_clock_elapsed+0x10>)
    2634:	681b      	ldr	r3, [r3, #0]
}
    2636:	1ac0      	subs	r0, r0, r3
    2638:	bd08      	pop	{r3, pc}
    263a:	bf00      	nop
    263c:	200000c8 	.word	0x200000c8

00002640 <update_rf_payload_format_esb_dpl>:

static void update_rf_payload_format_esb_dpl(uint32_t payload_length)
{
#if (CONFIG_ESB_MAX_PAYLOAD_LENGTH <= 32)
	/* Using 6 bits for length */
	NRF_RADIO->PCNF0 = (0 << RADIO_PCNF0_S0LEN_Pos) |
    2640:	4906      	ldr	r1, [pc, #24]	; (265c <update_rf_payload_format_esb_dpl+0x1c>)
    2642:	4b07      	ldr	r3, [pc, #28]	; (2660 <update_rf_payload_format_esb_dpl+0x20>)
    2644:	f8c1 3514 	str.w	r3, [r1, #1300]	; 0x514
			   (3 << RADIO_PCNF0_S1LEN_Pos);
#endif
	NRF_RADIO->PCNF1 =
		(RADIO_PCNF1_WHITEEN_Disabled << RADIO_PCNF1_WHITEEN_Pos) |
		(RADIO_PCNF1_ENDIAN_Big << RADIO_PCNF1_ENDIAN_Pos) |
		((esb_addr.addr_length - 1) << RADIO_PCNF1_BALEN_Pos) |
    2648:	4b06      	ldr	r3, [pc, #24]	; (2664 <update_rf_payload_format_esb_dpl+0x24>)
    264a:	7c5b      	ldrb	r3, [r3, #17]
    264c:	1e5a      	subs	r2, r3, #1
		(0 << RADIO_PCNF1_STATLEN_Pos) |
    264e:	4b06      	ldr	r3, [pc, #24]	; (2668 <update_rf_payload_format_esb_dpl+0x28>)
    2650:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	NRF_RADIO->PCNF1 =
    2654:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
		(CONFIG_ESB_MAX_PAYLOAD_LENGTH << RADIO_PCNF1_MAXLEN_Pos);
}
    2658:	4770      	bx	lr
    265a:	bf00      	nop
    265c:	40001000 	.word	0x40001000
    2660:	00030006 	.word	0x00030006
    2664:	20000020 	.word	0x20000020
    2668:	01000020 	.word	0x01000020

0000266c <update_rf_payload_format_esb>:

static void update_rf_payload_format_esb(uint32_t payload_length)
{
	NRF_RADIO->PCNF0 = (1 << RADIO_PCNF0_S0LEN_Pos) |
    266c:	4a07      	ldr	r2, [pc, #28]	; (268c <update_rf_payload_format_esb+0x20>)
    266e:	4b08      	ldr	r3, [pc, #32]	; (2690 <update_rf_payload_format_esb+0x24>)
    2670:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			   (1 << RADIO_PCNF0_S1LEN_Pos);

	NRF_RADIO->PCNF1 =
		(RADIO_PCNF1_WHITEEN_Disabled << RADIO_PCNF1_WHITEEN_Pos) |
		(RADIO_PCNF1_ENDIAN_Big << RADIO_PCNF1_ENDIAN_Pos) |
		((esb_addr.addr_length - 1) << RADIO_PCNF1_BALEN_Pos) |
    2674:	4b07      	ldr	r3, [pc, #28]	; (2694 <update_rf_payload_format_esb+0x28>)
    2676:	7c5b      	ldrb	r3, [r3, #17]
    2678:	3b01      	subs	r3, #1
		(payload_length << RADIO_PCNF1_STATLEN_Pos) |
    267a:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
    267e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
    2682:	f040 7080 	orr.w	r0, r0, #16777216	; 0x1000000
	NRF_RADIO->PCNF1 =
    2686:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
		(payload_length << RADIO_PCNF1_MAXLEN_Pos);
}
    268a:	4770      	bx	lr
    268c:	40001000 	.word	0x40001000
    2690:	00010100 	.word	0x00010100
    2694:	20000020 	.word	0x20000020

00002698 <update_radio_bitrate>:
			     << RADIO_TXPOWER_TXPOWER_Pos;
}

static bool update_radio_bitrate(void)
{
	NRF_RADIO->MODE = esb_cfg.bitrate << RADIO_MODE_MODE_Pos;
    2698:	4b0b      	ldr	r3, [pc, #44]	; (26c8 <update_radio_bitrate+0x30>)
    269a:	4a0c      	ldr	r2, [pc, #48]	; (26cc <update_radio_bitrate+0x34>)
    269c:	7a1b      	ldrb	r3, [r3, #8]
    269e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	switch (esb_cfg.bitrate) {
    26a2:	2b04      	cmp	r3, #4
    26a4:	d80d      	bhi.n	26c2 <update_radio_bitrate+0x2a>
    26a6:	e8df f003 	tbb	[pc, r3]
    26aa:	0308      	.short	0x0308
    26ac:	080c      	.short	0x080c
    26ae:	03          	.byte	0x03
    26af:	00          	.byte	0x00
	case ESB_BITRATE_2MBPS:
#if defined(CONFIG_SOC_SERIES_NRF52X) || defined(CONFIG_SOC_NRF5340_CPUNET)
	case ESB_BITRATE_2MBPS_BLE:
#endif
		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_2MBPS;
    26b0:	4b07      	ldr	r3, [pc, #28]	; (26d0 <update_radio_bitrate+0x38>)
    26b2:	22a0      	movs	r2, #160	; 0xa0
		break;

	case ESB_BITRATE_1MBPS:
		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_1MBPS;
    26b4:	601a      	str	r2, [r3, #0]
	default:
		/* Should not be reached */
		return false;
	}

	return true;
    26b6:	2001      	movs	r0, #1
		break;
    26b8:	4770      	bx	lr
		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_1MBPS;
    26ba:	4b05      	ldr	r3, [pc, #20]	; (26d0 <update_radio_bitrate+0x38>)
    26bc:	f44f 7296 	mov.w	r2, #300	; 0x12c
    26c0:	e7f8      	b.n	26b4 <update_radio_bitrate+0x1c>
	switch (esb_cfg.bitrate) {
    26c2:	2000      	movs	r0, #0
}
    26c4:	4770      	bx	lr
    26c6:	bf00      	nop
    26c8:	20000320 	.word	0x20000320
    26cc:	40001000 	.word	0x40001000
    26d0:	200003a4 	.word	0x200003a4

000026d4 <reset_fifos>:
	return params_valid;
}

static void reset_fifos(void)
{
	tx_fifo.back = 0;
    26d4:	4a04      	ldr	r2, [pc, #16]	; (26e8 <reset_fifos+0x14>)
    26d6:	2300      	movs	r3, #0
	tx_fifo.front = 0;
    26d8:	e9c2 3308 	strd	r3, r3, [r2, #32]
	tx_fifo.count = 0;
    26dc:	6293      	str	r3, [r2, #40]	; 0x28

	rx_fifo.back = 0;
    26de:	4a03      	ldr	r2, [pc, #12]	; (26ec <reset_fifos+0x18>)
	rx_fifo.front = 0;
    26e0:	e9c2 3308 	strd	r3, r3, [r2, #32]
	rx_fifo.count = 0;
    26e4:	6293      	str	r3, [r2, #40]	; 0x28
}
    26e6:	4770      	bx	lr
    26e8:	20000374 	.word	0x20000374
    26ec:	20000348 	.word	0x20000348

000026f0 <update_radio_addresses.part.0>:
static void update_radio_addresses(uint8_t update_mask)
    26f0:	b510      	push	{r4, lr}
			bytewise_bit_swap(&esb_addr.pipe_prefixes[0]);
    26f2:	4c07      	ldr	r4, [pc, #28]	; (2710 <update_radio_addresses.part.0+0x20>)
		NRF_RADIO->PREFIX0 =
    26f4:	4907      	ldr	r1, [pc, #28]	; (2714 <update_radio_addresses.part.0+0x24>)
			bytewise_bit_swap(&esb_addr.pipe_prefixes[0]);
    26f6:	f104 0008 	add.w	r0, r4, #8
    26fa:	f002 f94b 	bl	4994 <bytewise_bit_swap>
		NRF_RADIO->PREFIX0 =
    26fe:	f8c1 0524 	str.w	r0, [r1, #1316]	; 0x524
			bytewise_bit_swap(&esb_addr.pipe_prefixes[4]);
    2702:	f104 000c 	add.w	r0, r4, #12
    2706:	f002 f945 	bl	4994 <bytewise_bit_swap>
		NRF_RADIO->PREFIX1 =
    270a:	f8c1 0528 	str.w	r0, [r1, #1320]	; 0x528
}
    270e:	bd10      	pop	{r4, pc}
    2710:	20000020 	.word	0x20000020
    2714:	40001000 	.word	0x40001000

00002718 <RADIO_IRQHandler>:
	irq_unlock(key);
}

static void radio_irq_handler(void)
{
	if (NRF_RADIO->EVENTS_READY &&
    2718:	4b19      	ldr	r3, [pc, #100]	; (2780 <RADIO_IRQHandler+0x68>)
			event_handler(&event);
		}
	}
}

ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    271a:	4668      	mov	r0, sp
    271c:	f020 0107 	bic.w	r1, r0, #7
	if (NRF_RADIO->EVENTS_READY &&
    2720:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    2724:	468d      	mov	sp, r1
    2726:	b501      	push	{r0, lr}
	if (NRF_RADIO->EVENTS_READY &&
    2728:	b14a      	cbz	r2, 273e <RADIO_IRQHandler+0x26>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_READY_Msk)) {
    272a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_READY &&
    272e:	07d0      	lsls	r0, r2, #31
		NRF_RADIO->EVENTS_READY = 0;
    2730:	bf41      	itttt	mi
    2732:	2200      	movmi	r2, #0
    2734:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
		ESB_SYS_TIMER->TASKS_START;
    2738:	f503 4310 	addmi.w	r3, r3, #36864	; 0x9000
    273c:	681b      	ldrmi	r3, [r3, #0]
	if (NRF_RADIO->EVENTS_END &&
    273e:	4b10      	ldr	r3, [pc, #64]	; (2780 <RADIO_IRQHandler+0x68>)
    2740:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    2744:	b132      	cbz	r2, 2754 <RADIO_IRQHandler+0x3c>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_END_Msk)) {
    2746:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_END &&
    274a:	0711      	lsls	r1, r2, #28
		NRF_RADIO->EVENTS_END = 0;
    274c:	bf44      	itt	mi
    274e:	2200      	movmi	r2, #0
    2750:	f8c3 210c 	strmi.w	r2, [r3, #268]	; 0x10c
	if (NRF_RADIO->EVENTS_DISABLED &&
    2754:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    2758:	b152      	cbz	r2, 2770 <RADIO_IRQHandler+0x58>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_DISABLED_Msk)) {
    275a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_DISABLED &&
    275e:	06d2      	lsls	r2, r2, #27
    2760:	d506      	bpl.n	2770 <RADIO_IRQHandler+0x58>
		NRF_RADIO->EVENTS_DISABLED = 0;
    2762:	2200      	movs	r2, #0
    2764:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		if (on_radio_disabled) {
    2768:	4b06      	ldr	r3, [pc, #24]	; (2784 <RADIO_IRQHandler+0x6c>)
    276a:	681b      	ldr	r3, [r3, #0]
    276c:	b103      	cbz	r3, 2770 <RADIO_IRQHandler+0x58>
			on_radio_disabled();
    276e:	4798      	blx	r3
{
	radio_irq_handler();

	ISR_DIRECT_PM();
    2770:	f7fe fd38 	bl	11e4 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
    2774:	f7fe fe1a 	bl	13ac <z_arm_exc_exit>
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    2778:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    277c:	4685      	mov	sp, r0
    277e:	4770      	bx	lr
    2780:	40001000 	.word	0x40001000
    2784:	20000340 	.word	0x20000340

00002788 <SWI0_EGU0_IRQHandler>:

	return 1;
}


ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    2788:	4668      	mov	r0, sp
    278a:	f020 0107 	bic.w	r1, r0, #7
    278e:	468d      	mov	sp, r1
    2790:	b531      	push	{r0, r4, r5, lr}
	event.tx_attempts = last_tx_attempts;
    2792:	4b1b      	ldr	r3, [pc, #108]	; (2800 <SWI0_EGU0_IRQHandler+0x78>)
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    2794:	b082      	sub	sp, #8
	event.tx_attempts = last_tx_attempts;
    2796:	681b      	ldr	r3, [r3, #0]
    2798:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
    279a:	f04f 0320 	mov.w	r3, #32
    279e:	f3ef 8111 	mrs	r1, BASEPRI
    27a2:	f383 8812 	msr	BASEPRI_MAX, r3
    27a6:	f3bf 8f6f 	isb	sy
	*interrupts = interrupt_flags;
    27aa:	4b16      	ldr	r3, [pc, #88]	; (2804 <SWI0_EGU0_IRQHandler+0x7c>)
	interrupt_flags = 0;
    27ac:	2200      	movs	r2, #0
	*interrupts = interrupt_flags;
    27ae:	681d      	ldr	r5, [r3, #0]
	interrupt_flags = 0;
    27b0:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    27b2:	f381 8811 	msr	BASEPRI, r1
    27b6:	f3bf 8f6f 	isb	sy
	if (event_handler != NULL) {
    27ba:	4c13      	ldr	r4, [pc, #76]	; (2808 <SWI0_EGU0_IRQHandler+0x80>)
    27bc:	6823      	ldr	r3, [r4, #0]
    27be:	b1ab      	cbz	r3, 27ec <SWI0_EGU0_IRQHandler+0x64>
		if (interrupts & INT_TX_SUCCESS_MSK) {
    27c0:	07e9      	lsls	r1, r5, #31
    27c2:	d503      	bpl.n	27cc <SWI0_EGU0_IRQHandler+0x44>
			event.evt_id = ESB_EVENT_TX_SUCCESS;
    27c4:	f88d 2000 	strb.w	r2, [sp]
			event_handler(&event);
    27c8:	4668      	mov	r0, sp
    27ca:	4798      	blx	r3
		if (interrupts & INT_TX_FAILED_MSK) {
    27cc:	07aa      	lsls	r2, r5, #30
    27ce:	d505      	bpl.n	27dc <SWI0_EGU0_IRQHandler+0x54>
			event.evt_id = ESB_EVENT_TX_FAILED;
    27d0:	2301      	movs	r3, #1
    27d2:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    27d6:	4668      	mov	r0, sp
    27d8:	6823      	ldr	r3, [r4, #0]
    27da:	4798      	blx	r3
		if (interrupts & INT_RX_DATA_RECEIVED_MSK) {
    27dc:	076b      	lsls	r3, r5, #29
    27de:	d505      	bpl.n	27ec <SWI0_EGU0_IRQHandler+0x64>
			event.evt_id = ESB_EVENT_RX_RECEIVED;
    27e0:	2302      	movs	r3, #2
    27e2:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    27e6:	4668      	mov	r0, sp
    27e8:	6823      	ldr	r3, [r4, #0]
    27ea:	4798      	blx	r3
{
	esb_evt_irq_handler();

	ISR_DIRECT_PM();
    27ec:	f7fe fcfa 	bl	11e4 <_arch_isr_direct_pm>
    27f0:	f7fe fddc 	bl	13ac <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    27f4:	b002      	add	sp, #8
    27f6:	e8bd 4031 	ldmia.w	sp!, {r0, r4, r5, lr}
    27fa:	4685      	mov	sp, r0
    27fc:	4770      	bx	lr
    27fe:	bf00      	nop
    2800:	2000033c 	.word	0x2000033c
    2804:	20000338 	.word	0x20000338
    2808:	20000334 	.word	0x20000334

0000280c <esb_disable>:
}

void esb_disable(void)
{
	/*  Clear PPI */
	nrfx_gppi_channels_disable(ppi_all_channels_mask);
    280c:	4b12      	ldr	r3, [pc, #72]	; (2858 <esb_disable+0x4c>)
	esb_state = ESB_STATE_IDLE;
	esb_initialized = false;

	reset_fifos();

	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    280e:	4813      	ldr	r0, [pc, #76]	; (285c <esb_disable+0x50>)
	nrfx_gppi_channels_disable(ppi_all_channels_mask);
    2810:	681a      	ldr	r2, [r3, #0]
    p_reg->CHENCLR = mask;
    2812:	4b13      	ldr	r3, [pc, #76]	; (2860 <esb_disable+0x54>)
{
    2814:	b510      	push	{r4, lr}
    2816:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	esb_state = ESB_STATE_IDLE;
    281a:	4b12      	ldr	r3, [pc, #72]	; (2864 <esb_disable+0x58>)
    281c:	2400      	movs	r4, #0
    281e:	701c      	strb	r4, [r3, #0]
	esb_initialized = false;
    2820:	4b11      	ldr	r3, [pc, #68]	; (2868 <esb_disable+0x5c>)
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    2822:	4621      	mov	r1, r4
	esb_initialized = false;
    2824:	701c      	strb	r4, [r3, #0]
	reset_fifos();
    2826:	f7ff ff55 	bl	26d4 <reset_fifos>
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    282a:	2220      	movs	r2, #32
    282c:	f001 fe8f 	bl	454e <memset>
	memset(pids, 0, sizeof(pids));
    2830:	2208      	movs	r2, #8
    2832:	4621      	mov	r1, r4
    2834:	480d      	ldr	r0, [pc, #52]	; (286c <esb_disable+0x60>)
    2836:	f001 fe8a 	bl	454e <memset>

	/*  Disable the interrupts used by ESB */
	irq_disable(RADIO_IRQn);
    283a:	2001      	movs	r0, #1
    283c:	f7fe fc98 	bl	1170 <arch_irq_disable>
	irq_disable(ESB_SYS_TIMER_IRQn);
    2840:	200a      	movs	r0, #10
    2842:	f7fe fc95 	bl	1170 <arch_irq_disable>
	irq_disable(ESB_EVT_IRQ);
    2846:	2014      	movs	r0, #20
    2848:	f7fe fc92 	bl	1170 <arch_irq_disable>

	NRF_RADIO->SHORTS =
    284c:	4b08      	ldr	r3, [pc, #32]	; (2870 <esb_disable+0x64>)
    284e:	2203      	movs	r2, #3
    2850:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	    RADIO_SHORTS_READY_START_Enabled << RADIO_SHORTS_READY_START_Pos |
	    RADIO_SHORTS_END_DISABLE_Enabled << RADIO_SHORTS_END_DISABLE_Pos;
}
    2854:	bd10      	pop	{r4, pc}
    2856:	bf00      	nop
    2858:	20000344 	.word	0x20000344
    285c:	20000490 	.word	0x20000490
    2860:	4001f000 	.word	0x4001f000
    2864:	200004d7 	.word	0x200004d7
    2868:	200004d6 	.word	0x200004d6
    286c:	200004d8 	.word	0x200004d8
    2870:	40001000 	.word	0x40001000

00002874 <esb_init>:
{
    2874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (config == NULL) {
    2878:	4605      	mov	r5, r0
    287a:	2800      	cmp	r0, #0
    287c:	f000 80f3 	beq.w	2a66 <esb_init+0x1f2>
	if (esb_initialized) {
    2880:	4e7a      	ldr	r6, [pc, #488]	; (2a6c <esb_init+0x1f8>)
    2882:	7833      	ldrb	r3, [r6, #0]
    2884:	b10b      	cbz	r3, 288a <esb_init+0x16>
		esb_disable();
    2886:	f7ff ffc1 	bl	280c <esb_disable>
	event_handler = config->event_handler;
    288a:	4b79      	ldr	r3, [pc, #484]	; (2a70 <esb_init+0x1fc>)
	memcpy(&esb_cfg, config, sizeof(esb_cfg));
    288c:	4c79      	ldr	r4, [pc, #484]	; (2a74 <esb_init+0x200>)
	event_handler = config->event_handler;
    288e:	686a      	ldr	r2, [r5, #4]
    2890:	601a      	str	r2, [r3, #0]
	memcpy(&esb_cfg, config, sizeof(esb_cfg));
    2892:	4629      	mov	r1, r5
    2894:	2214      	movs	r2, #20
    2896:	4620      	mov	r0, r4
    2898:	f001 fe4e 	bl	4538 <memcpy>
	interrupt_flags = 0;
    289c:	2500      	movs	r5, #0
    289e:	4b76      	ldr	r3, [pc, #472]	; (2a78 <esb_init+0x204>)
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    28a0:	4876      	ldr	r0, [pc, #472]	; (2a7c <esb_init+0x208>)
	interrupt_flags = 0;
    28a2:	601d      	str	r5, [r3, #0]
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    28a4:	2220      	movs	r2, #32
    28a6:	4629      	mov	r1, r5
    28a8:	f001 fe51 	bl	454e <memset>
	memset(pids, 0, sizeof(pids));
    28ac:	2208      	movs	r2, #8
    28ae:	4874      	ldr	r0, [pc, #464]	; (2a80 <esb_init+0x20c>)
    28b0:	4629      	mov	r1, r5
    28b2:	f001 fe4c 	bl	454e <memset>
	NRF_RADIO->TXPOWER = esb_cfg.tx_output_power
    28b6:	4b73      	ldr	r3, [pc, #460]	; (2a84 <esb_init+0x210>)
			     << RADIO_TXPOWER_TXPOWER_Pos;
    28b8:	7aa2      	ldrb	r2, [r4, #10]
	NRF_RADIO->TXPOWER = esb_cfg.tx_output_power
    28ba:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
	params_valid &= update_radio_bitrate();
    28be:	f7ff feeb 	bl	2698 <update_radio_bitrate>
	switch (esb_cfg.protocol) {
    28c2:	7823      	ldrb	r3, [r4, #0]
    28c4:	4a70      	ldr	r2, [pc, #448]	; (2a88 <esb_init+0x214>)
    28c6:	2b00      	cmp	r3, #0
    28c8:	f000 80bd 	beq.w	2a46 <esb_init+0x1d2>
    28cc:	2b01      	cmp	r3, #1
    28ce:	d101      	bne.n	28d4 <esb_init+0x60>
		update_rf_payload_format = update_rf_payload_format_esb_dpl;
    28d0:	4b6e      	ldr	r3, [pc, #440]	; (2a8c <esb_init+0x218>)
		update_rf_payload_format = update_rf_payload_format_esb;
    28d2:	6013      	str	r3, [r2, #0]
	switch (esb_cfg.crc) {
    28d4:	7a61      	ldrb	r1, [r4, #9]
    28d6:	4b6b      	ldr	r3, [pc, #428]	; (2a84 <esb_init+0x210>)
    28d8:	2901      	cmp	r1, #1
    28da:	f000 80be 	beq.w	2a5a <esb_init+0x1e6>
    28de:	2902      	cmp	r1, #2
    28e0:	f000 80b3 	beq.w	2a4a <esb_init+0x1d6>
    28e4:	b949      	cbnz	r1, 28fa <esb_init+0x86>
	NRF_RADIO->CRCINIT = 0xFFFFUL;  /* Initial value */
    28e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    28ea:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
	NRF_RADIO->CRCPOLY = 0x11021UL; /* CRC poly: x^16+x^12^x^5+1 */
    28ee:	4968      	ldr	r1, [pc, #416]	; (2a90 <esb_init+0x21c>)
    28f0:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
	NRF_RADIO->CRCCNF = ESB_CRC_16BIT << RADIO_CRCCNF_LEN_Pos;
    28f4:	2102      	movs	r1, #2
    28f6:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
	update_rf_payload_format(esb_cfg.payload_length);
    28fa:	6813      	ldr	r3, [r2, #0]
    28fc:	7c60      	ldrb	r0, [r4, #17]
    28fe:	4798      	blx	r3
	NRF_RADIO->BASE0 = 0xE7E7E7E7;
    2900:	4b60      	ldr	r3, [pc, #384]	; (2a84 <esb_init+0x210>)
    2902:	4964      	ldr	r1, [pc, #400]	; (2a94 <esb_init+0x220>)
    2904:	4864      	ldr	r0, [pc, #400]	; (2a98 <esb_init+0x224>)
    2906:	f04f 32e7 	mov.w	r2, #3890735079	; 0xe7e7e7e7
    290a:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
	NRF_RADIO->BASE1 = 0x43434343;
    290e:	f04f 3243 	mov.w	r2, #1128481603	; 0x43434343
    2912:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
	NRF_RADIO->PREFIX0 = 0x23C343E7;
    2916:	4a61      	ldr	r2, [pc, #388]	; (2a9c <esb_init+0x228>)
    2918:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	NRF_RADIO->PREFIX1 = 0x13E363A3;
    291c:	4a60      	ldr	r2, [pc, #384]	; (2aa0 <esb_init+0x22c>)
    291e:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	reset_fifos();
    2922:	f7ff fed7 	bl	26d4 <reset_fifos>
    2926:	460a      	mov	r2, r1
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    2928:	2300      	movs	r3, #0
    292a:	3301      	adds	r3, #1
    292c:	2b08      	cmp	r3, #8
		tx_fifo.payload[i] = &tx_payload[i];
    292e:	f840 2b04 	str.w	r2, [r0], #4
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    2932:	f102 0225 	add.w	r2, r2, #37	; 0x25
    2936:	d1f8      	bne.n	292a <esb_init+0xb6>
    2938:	4a5a      	ldr	r2, [pc, #360]	; (2aa4 <esb_init+0x230>)
    293a:	485b      	ldr	r0, [pc, #364]	; (2aa8 <esb_init+0x234>)
	for (size_t i = 0; i < CONFIG_ESB_RX_FIFO_SIZE; i++) {
    293c:	2300      	movs	r3, #0
    293e:	3301      	adds	r3, #1
    2940:	2b08      	cmp	r3, #8
		rx_fifo.payload[i] = &rx_payload[i];
    2942:	f840 2b04 	str.w	r2, [r0], #4
	for (size_t i = 0; i < CONFIG_ESB_RX_FIFO_SIZE; i++) {
    2946:	f102 0225 	add.w	r2, r2, #37	; 0x25
    294a:	d1f8      	bne.n	293e <esb_init+0xca>
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    294c:	2200      	movs	r2, #0
    294e:	4b57      	ldr	r3, [pc, #348]	; (2aac <esb_init+0x238>)
		ack_pl_wrap[i].in_use = false;
    2950:	4614      	mov	r4, r2
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    2952:	3201      	adds	r2, #1
    2954:	2a08      	cmp	r2, #8
		ack_pl_wrap[i].p_payload = &tx_payload[i];
    2956:	6019      	str	r1, [r3, #0]
		ack_pl_wrap[i].in_use = false;
    2958:	711c      	strb	r4, [r3, #4]
		ack_pl_wrap[i].p_next = 0;
    295a:	609c      	str	r4, [r3, #8]
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    295c:	f101 0125 	add.w	r1, r1, #37	; 0x25
    2960:	f103 030c 	add.w	r3, r3, #12
    2964:	d1f5      	bne.n	2952 <esb_init+0xde>
		ack_pl_wrap_pipe[i] = 0;
    2966:	4b52      	ldr	r3, [pc, #328]	; (2ab0 <esb_init+0x23c>)
	ESB_SYS_TIMER->PRESCALER = 4;
    2968:	4d52      	ldr	r5, [pc, #328]	; (2ab4 <esb_init+0x240>)
	nrfx_ppi_channel_alloc(&ppi_ch_radio_ready_timer_start);
    296a:	f8df a14c 	ldr.w	sl, [pc, #332]	; 2ab8 <esb_init+0x244>
	nrfx_ppi_channel_alloc(&ppi_ch_radio_address_timer_stop);
    296e:	f8df 914c 	ldr.w	r9, [pc, #332]	; 2abc <esb_init+0x248>
	nrfx_ppi_channel_alloc(&ppi_ch_timer_compare0_radio_disable);
    2972:	f8df 814c 	ldr.w	r8, [pc, #332]	; 2ac0 <esb_init+0x24c>
	nrfx_ppi_channel_alloc(&ppi_ch_timer_compare1_radio_txen);
    2976:	4f53      	ldr	r7, [pc, #332]	; (2ac4 <esb_init+0x250>)
		ack_pl_wrap_pipe[i] = 0;
    2978:	e9c3 4400 	strd	r4, r4, [r3]
    297c:	e9c3 4402 	strd	r4, r4, [r3, #8]
    2980:	e9c3 4404 	strd	r4, r4, [r3, #16]
    2984:	e9c3 4406 	strd	r4, r4, [r3, #24]
	ESB_SYS_TIMER->PRESCALER = 4;
    2988:	2304      	movs	r3, #4
    298a:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
	ESB_SYS_TIMER->SHORTS = TIMER_SHORTS_COMPARE1_CLEAR_Msk |
    298e:	f240 2302 	movw	r3, #514	; 0x202
	ESB_SYS_TIMER->BITMODE = TIMER_BITMODE_BITMODE_16Bit;
    2992:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	nrfx_ppi_channel_alloc(&ppi_ch_radio_ready_timer_start);
    2996:	4650      	mov	r0, sl
	ESB_SYS_TIMER->SHORTS = TIMER_SHORTS_COMPARE1_CLEAR_Msk |
    2998:	f8c5 3200 	str.w	r3, [r5, #512]	; 0x200
	nrfx_ppi_channel_alloc(&ppi_ch_radio_ready_timer_start);
    299c:	f000 fdba 	bl	3514 <nrfx_ppi_channel_alloc>
	nrfx_ppi_channel_alloc(&ppi_ch_radio_address_timer_stop);
    29a0:	4648      	mov	r0, r9
    29a2:	f000 fdb7 	bl	3514 <nrfx_ppi_channel_alloc>
	nrfx_ppi_channel_alloc(&ppi_ch_timer_compare0_radio_disable);
    29a6:	4640      	mov	r0, r8
    29a8:	f000 fdb4 	bl	3514 <nrfx_ppi_channel_alloc>
	nrfx_ppi_channel_alloc(&ppi_ch_timer_compare1_radio_txen);
    29ac:	4638      	mov	r0, r7
    29ae:	f000 fdb1 	bl	3514 <nrfx_ppi_channel_alloc>
	nrfx_ppi_channel_assign(ppi_ch_radio_ready_timer_start,
    29b2:	462a      	mov	r2, r5
    29b4:	4944      	ldr	r1, [pc, #272]	; (2ac8 <esb_init+0x254>)
    29b6:	f89a 0000 	ldrb.w	r0, [sl]
    29ba:	f000 fdb1 	bl	3520 <nrfx_ppi_channel_assign>
	nrfx_ppi_channel_assign(ppi_ch_radio_address_timer_stop,
    29be:	4a43      	ldr	r2, [pc, #268]	; (2acc <esb_init+0x258>)
    29c0:	4943      	ldr	r1, [pc, #268]	; (2ad0 <esb_init+0x25c>)
    29c2:	f899 0000 	ldrb.w	r0, [r9]
    29c6:	f000 fdab 	bl	3520 <nrfx_ppi_channel_assign>
	nrfx_ppi_channel_assign(ppi_ch_timer_compare0_radio_disable,
    29ca:	4a42      	ldr	r2, [pc, #264]	; (2ad4 <esb_init+0x260>)
    29cc:	4942      	ldr	r1, [pc, #264]	; (2ad8 <esb_init+0x264>)
    29ce:	f898 0000 	ldrb.w	r0, [r8]
    29d2:	f000 fda5 	bl	3520 <nrfx_ppi_channel_assign>
	nrfx_ppi_channel_assign(ppi_ch_timer_compare1_radio_txen,
    29d6:	4a2b      	ldr	r2, [pc, #172]	; (2a84 <esb_init+0x210>)
    29d8:	4940      	ldr	r1, [pc, #256]	; (2adc <esb_init+0x268>)
    29da:	7838      	ldrb	r0, [r7, #0]
    29dc:	f000 fda0 	bl	3520 <nrfx_ppi_channel_assign>
	ppi_all_channels_mask = (1 << ppi_ch_radio_ready_timer_start) | (1 << ppi_ch_radio_address_timer_stop) |
    29e0:	f89a 3000 	ldrb.w	r3, [sl]
    29e4:	f899 2000 	ldrb.w	r2, [r9]
    29e8:	2501      	movs	r5, #1
    29ea:	fa05 f202 	lsl.w	r2, r5, r2
    29ee:	fa05 f303 	lsl.w	r3, r5, r3
    29f2:	4313      	orrs	r3, r2
							(1 << ppi_ch_timer_compare0_radio_disable) | (1 << ppi_ch_timer_compare1_radio_txen);
    29f4:	f898 2000 	ldrb.w	r2, [r8]
    29f8:	fa05 f202 	lsl.w	r2, r5, r2
	ppi_all_channels_mask = (1 << ppi_ch_radio_ready_timer_start) | (1 << ppi_ch_radio_address_timer_stop) |
    29fc:	4313      	orrs	r3, r2
							(1 << ppi_ch_timer_compare0_radio_disable) | (1 << ppi_ch_timer_compare1_radio_txen);
    29fe:	783a      	ldrb	r2, [r7, #0]
    2a00:	fa05 f202 	lsl.w	r2, r5, r2
    2a04:	4313      	orrs	r3, r2
	ppi_all_channels_mask = (1 << ppi_ch_radio_ready_timer_start) | (1 << ppi_ch_radio_address_timer_stop) |
    2a06:	4a36      	ldr	r2, [pc, #216]	; (2ae0 <esb_init+0x26c>)
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_ESB_RADIO_IRQ_PRIORITY,
    2a08:	4629      	mov	r1, r5
	ppi_all_channels_mask = (1 << ppi_ch_radio_ready_timer_start) | (1 << ppi_ch_radio_address_timer_stop) |
    2a0a:	6013      	str	r3, [r2, #0]
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_ESB_RADIO_IRQ_PRIORITY,
    2a0c:	4628      	mov	r0, r5
    2a0e:	2200      	movs	r2, #0
    2a10:	f7fe fbd0 	bl	11b4 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(ESB_EVT_IRQ, CONFIG_ESB_EVENT_IRQ_PRIORITY,
    2a14:	2200      	movs	r2, #0
    2a16:	2102      	movs	r1, #2
    2a18:	2014      	movs	r0, #20
    2a1a:	f7fe fbcb 	bl	11b4 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(ESB_SYS_TIMER_IRQn, CONFIG_ESB_EVENT_IRQ_PRIORITY,
    2a1e:	2200      	movs	r2, #0
    2a20:	2102      	movs	r1, #2
    2a22:	200a      	movs	r0, #10
    2a24:	f7fe fbc6 	bl	11b4 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
    2a28:	4628      	mov	r0, r5
    2a2a:	f7fe fb91 	bl	1150 <arch_irq_enable>
	irq_enable(ESB_EVT_IRQ);
    2a2e:	2014      	movs	r0, #20
    2a30:	f7fe fb8e 	bl	1150 <arch_irq_enable>
	irq_enable(ESB_SYS_TIMER_IRQn);
    2a34:	200a      	movs	r0, #10
    2a36:	f7fe fb8b 	bl	1150 <arch_irq_enable>
	esb_state = ESB_STATE_IDLE;
    2a3a:	4b2a      	ldr	r3, [pc, #168]	; (2ae4 <esb_init+0x270>)
	esb_initialized = true;
    2a3c:	7035      	strb	r5, [r6, #0]
	esb_state = ESB_STATE_IDLE;
    2a3e:	701c      	strb	r4, [r3, #0]
	return 0;
    2a40:	2000      	movs	r0, #0
}
    2a42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		update_rf_payload_format = update_rf_payload_format_esb;
    2a46:	4b28      	ldr	r3, [pc, #160]	; (2ae8 <esb_init+0x274>)
    2a48:	e743      	b.n	28d2 <esb_init+0x5e>
		NRF_RADIO->CRCINIT = 0xFFFFUL;  /* Initial value */
    2a4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    2a4e:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
		NRF_RADIO->CRCPOLY = 0x11021UL; /* CRC poly: x^16+x^12^x^5+1 */
    2a52:	490f      	ldr	r1, [pc, #60]	; (2a90 <esb_init+0x21c>)
		NRF_RADIO->CRCPOLY = 0x107UL; /* CRC poly: x^8+x^2^x^1+1 */
    2a54:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
		break;
    2a58:	e745      	b.n	28e6 <esb_init+0x72>
		NRF_RADIO->CRCINIT = 0xFFUL;  /* Initial value */
    2a5a:	21ff      	movs	r1, #255	; 0xff
    2a5c:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
		NRF_RADIO->CRCPOLY = 0x107UL; /* CRC poly: x^8+x^2^x^1+1 */
    2a60:	f240 1107 	movw	r1, #263	; 0x107
    2a64:	e7f6      	b.n	2a54 <esb_init+0x1e0>
		return -EINVAL;
    2a66:	f06f 0015 	mvn.w	r0, #21
    2a6a:	e7ea      	b.n	2a42 <esb_init+0x1ce>
    2a6c:	200004d6 	.word	0x200004d6
    2a70:	20000334 	.word	0x20000334
    2a74:	20000320 	.word	0x20000320
    2a78:	20000338 	.word	0x20000338
    2a7c:	20000490 	.word	0x20000490
    2a80:	200004d8 	.word	0x200004d8
    2a84:	40001000 	.word	0x40001000
    2a88:	200003a0 	.word	0x200003a0
    2a8c:	00002641 	.word	0x00002641
    2a90:	00011021 	.word	0x00011021
    2a94:	2000060c 	.word	0x2000060c
    2a98:	20000374 	.word	0x20000374
    2a9c:	23c343e7 	.word	0x23c343e7
    2aa0:	13e363a3 	.word	0x13e363a3
    2aa4:	200004e4 	.word	0x200004e4
    2aa8:	20000348 	.word	0x20000348
    2aac:	200002a0 	.word	0x200002a0
    2ab0:	20000300 	.word	0x20000300
    2ab4:	4000a000 	.word	0x4000a000
    2ab8:	200004e1 	.word	0x200004e1
    2abc:	200004e0 	.word	0x200004e0
    2ac0:	200004e2 	.word	0x200004e2
    2ac4:	200004e3 	.word	0x200004e3
    2ac8:	40001100 	.word	0x40001100
    2acc:	4000a010 	.word	0x4000a010
    2ad0:	40001104 	.word	0x40001104
    2ad4:	40001010 	.word	0x40001010
    2ad8:	4000a140 	.word	0x4000a140
    2adc:	4000a144 	.word	0x4000a144
    2ae0:	20000344 	.word	0x20000344
    2ae4:	200004d7 	.word	0x200004d7
    2ae8:	0000266d 	.word	0x0000266d

00002aec <esb_read_rx_payload>:

	return 0;
}

int esb_read_rx_payload(struct esb_payload *payload)
{
    2aec:	b538      	push	{r3, r4, r5, lr}
	if (!esb_initialized) {
    2aee:	4b1c      	ldr	r3, [pc, #112]	; (2b60 <esb_read_rx_payload+0x74>)
    2af0:	781b      	ldrb	r3, [r3, #0]
    2af2:	b363      	cbz	r3, 2b4e <esb_read_rx_payload+0x62>
		return -EACCES;
	}
	if (payload == NULL) {
    2af4:	b370      	cbz	r0, 2b54 <esb_read_rx_payload+0x68>
		return -EINVAL;
	}

	if (rx_fifo.count == 0) {
    2af6:	4c1b      	ldr	r4, [pc, #108]	; (2b64 <esb_read_rx_payload+0x78>)
    2af8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2afa:	b373      	cbz	r3, 2b5a <esb_read_rx_payload+0x6e>
	__asm__ volatile(
    2afc:	f04f 0320 	mov.w	r3, #32
    2b00:	f3ef 8511 	mrs	r5, BASEPRI
    2b04:	f383 8812 	msr	BASEPRI_MAX, r3
    2b08:	f3bf 8f6f 	isb	sy
		return -ENODATA;
	}

	uint32_t key = irq_lock();

	payload->length = rx_fifo.payload[rx_fifo.front]->length;
    2b0c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2b0e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    2b12:	780a      	ldrb	r2, [r1, #0]
    2b14:	7002      	strb	r2, [r0, #0]
	payload->pipe = rx_fifo.payload[rx_fifo.front]->pipe;
    2b16:	784b      	ldrb	r3, [r1, #1]
    2b18:	7043      	strb	r3, [r0, #1]
	payload->rssi = rx_fifo.payload[rx_fifo.front]->rssi;
    2b1a:	f991 3002 	ldrsb.w	r3, [r1, #2]
    2b1e:	7083      	strb	r3, [r0, #2]
	payload->pid = rx_fifo.payload[rx_fifo.front]->pid;
    2b20:	790b      	ldrb	r3, [r1, #4]
    2b22:	7103      	strb	r3, [r0, #4]
	payload->noack = rx_fifo.payload[rx_fifo.front]->noack;
    2b24:	78cb      	ldrb	r3, [r1, #3]
    2b26:	70c3      	strb	r3, [r0, #3]
	memcpy(payload->data, rx_fifo.payload[rx_fifo.front]->data,
    2b28:	3105      	adds	r1, #5
    2b2a:	3005      	adds	r0, #5
    2b2c:	f001 fd04 	bl	4538 <memcpy>
	       payload->length);

	if (++rx_fifo.front >= CONFIG_ESB_RX_FIFO_SIZE) {
    2b30:	6a63      	ldr	r3, [r4, #36]	; 0x24
    2b32:	3301      	adds	r3, #1
    2b34:	2b07      	cmp	r3, #7
		rx_fifo.front = 0;
    2b36:	bf88      	it	hi
    2b38:	2300      	movhi	r3, #0
    2b3a:	6263      	str	r3, [r4, #36]	; 0x24
	}

	rx_fifo.count--;
    2b3c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b3e:	3b01      	subs	r3, #1
    2b40:	62a3      	str	r3, [r4, #40]	; 0x28
	__asm__ volatile(
    2b42:	f385 8811 	msr	BASEPRI, r5
    2b46:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	return 0;
    2b4a:	2000      	movs	r0, #0
}
    2b4c:	bd38      	pop	{r3, r4, r5, pc}
		return -EACCES;
    2b4e:	f06f 000c 	mvn.w	r0, #12
    2b52:	e7fb      	b.n	2b4c <esb_read_rx_payload+0x60>
		return -EINVAL;
    2b54:	f06f 0015 	mvn.w	r0, #21
    2b58:	e7f8      	b.n	2b4c <esb_read_rx_payload+0x60>
		return -ENODATA;
    2b5a:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    2b5e:	e7f5      	b.n	2b4c <esb_read_rx_payload+0x60>
    2b60:	200004d6 	.word	0x200004d6
    2b64:	20000348 	.word	0x20000348

00002b68 <esb_set_base_address_0>:

	return 0;
}

int esb_set_base_address_0(const uint8_t *addr)
{
    2b68:	b510      	push	{r4, lr}
	if (esb_state != ESB_STATE_IDLE) {
    2b6a:	4b0d      	ldr	r3, [pc, #52]	; (2ba0 <esb_set_base_address_0+0x38>)
    2b6c:	781b      	ldrb	r3, [r3, #0]
{
    2b6e:	4601      	mov	r1, r0
	if (esb_state != ESB_STATE_IDLE) {
    2b70:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    2b74:	b96b      	cbnz	r3, 2b92 <esb_set_base_address_0+0x2a>
		return -EBUSY;
	}
	if (addr == NULL) {
    2b76:	b178      	cbz	r0, 2b98 <esb_set_base_address_0+0x30>
		return -EINVAL;
	}

	memcpy(esb_addr.base_addr_p0, addr, sizeof(esb_addr.base_addr_p0));
    2b78:	2204      	movs	r2, #4
    2b7a:	480a      	ldr	r0, [pc, #40]	; (2ba4 <esb_set_base_address_0+0x3c>)
    2b7c:	f001 fcdc 	bl	4538 <memcpy>
	return __REV(bytewise_bit_swap(addr));
    2b80:	4808      	ldr	r0, [pc, #32]	; (2ba4 <esb_set_base_address_0+0x3c>)
    2b82:	f001 ff07 	bl	4994 <bytewise_bit_swap>
		NRF_RADIO->BASE0 = addr_conv(esb_addr.base_addr_p0);
    2b86:	4b08      	ldr	r3, [pc, #32]	; (2ba8 <esb_set_base_address_0+0x40>)
  return __builtin_bswap32(value);
    2b88:	ba00      	rev	r0, r0
    2b8a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c

	update_radio_addresses(ADDR_UPDATE_MASK_BASE0);

	return 0;
    2b8e:	4620      	mov	r0, r4
}
    2b90:	bd10      	pop	{r4, pc}
		return -EBUSY;
    2b92:	f06f 000f 	mvn.w	r0, #15
    2b96:	e7fb      	b.n	2b90 <esb_set_base_address_0+0x28>
		return -EINVAL;
    2b98:	f06f 0015 	mvn.w	r0, #21
    2b9c:	e7f8      	b.n	2b90 <esb_set_base_address_0+0x28>
    2b9e:	bf00      	nop
    2ba0:	200004d7 	.word	0x200004d7
    2ba4:	20000020 	.word	0x20000020
    2ba8:	40001000 	.word	0x40001000

00002bac <esb_set_base_address_1>:

int esb_set_base_address_1(const uint8_t *addr)
{
    2bac:	b510      	push	{r4, lr}
	if (esb_state != ESB_STATE_IDLE) {
    2bae:	4b0d      	ldr	r3, [pc, #52]	; (2be4 <esb_set_base_address_1+0x38>)
    2bb0:	781b      	ldrb	r3, [r3, #0]
{
    2bb2:	4601      	mov	r1, r0
	if (esb_state != ESB_STATE_IDLE) {
    2bb4:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    2bb8:	b96b      	cbnz	r3, 2bd6 <esb_set_base_address_1+0x2a>
		return -EBUSY;
	}
	if (addr == NULL) {
    2bba:	b178      	cbz	r0, 2bdc <esb_set_base_address_1+0x30>
		return -EINVAL;
	}

	memcpy(esb_addr.base_addr_p1, addr, sizeof(esb_addr.base_addr_p1));
    2bbc:	2204      	movs	r2, #4
    2bbe:	480a      	ldr	r0, [pc, #40]	; (2be8 <esb_set_base_address_1+0x3c>)
    2bc0:	f001 fcba 	bl	4538 <memcpy>
	return __REV(bytewise_bit_swap(addr));
    2bc4:	4808      	ldr	r0, [pc, #32]	; (2be8 <esb_set_base_address_1+0x3c>)
    2bc6:	f001 fee5 	bl	4994 <bytewise_bit_swap>
		NRF_RADIO->BASE1 = addr_conv(esb_addr.base_addr_p1);
    2bca:	4b08      	ldr	r3, [pc, #32]	; (2bec <esb_set_base_address_1+0x40>)
    2bcc:	ba00      	rev	r0, r0
    2bce:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520

	update_radio_addresses(ADDR_UPDATE_MASK_BASE1);

	return 0;
    2bd2:	4620      	mov	r0, r4
}
    2bd4:	bd10      	pop	{r4, pc}
		return -EBUSY;
    2bd6:	f06f 000f 	mvn.w	r0, #15
    2bda:	e7fb      	b.n	2bd4 <esb_set_base_address_1+0x28>
		return -EINVAL;
    2bdc:	f06f 0015 	mvn.w	r0, #21
    2be0:	e7f8      	b.n	2bd4 <esb_set_base_address_1+0x28>
    2be2:	bf00      	nop
    2be4:	200004d7 	.word	0x200004d7
    2be8:	20000024 	.word	0x20000024
    2bec:	40001000 	.word	0x40001000

00002bf0 <esb_set_prefixes>:

int esb_set_prefixes(const uint8_t *prefixes, uint8_t num_pipes)
{
    2bf0:	b570      	push	{r4, r5, r6, lr}
	if (esb_state != ESB_STATE_IDLE) {
    2bf2:	4b10      	ldr	r3, [pc, #64]	; (2c34 <esb_set_prefixes+0x44>)
    2bf4:	781b      	ldrb	r3, [r3, #0]
{
    2bf6:	460c      	mov	r4, r1
	if (esb_state != ESB_STATE_IDLE) {
    2bf8:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    2bfc:	b9a3      	cbnz	r3, 2c28 <esb_set_prefixes+0x38>
		return -EBUSY;
	}
	if (prefixes == NULL) {
    2bfe:	b1b0      	cbz	r0, 2c2e <esb_set_prefixes+0x3e>
		return -EINVAL;
	}
	if (!(num_pipes <= CONFIG_ESB_PIPE_COUNT)) {
    2c00:	2908      	cmp	r1, #8
    2c02:	d814      	bhi.n	2c2e <esb_set_prefixes+0x3e>
		return -EINVAL;
	}

	memcpy(esb_addr.pipe_prefixes, prefixes, num_pipes);
    2c04:	4e0c      	ldr	r6, [pc, #48]	; (2c38 <esb_set_prefixes+0x48>)
    2c06:	460a      	mov	r2, r1
    2c08:	4601      	mov	r1, r0
    2c0a:	f106 0008 	add.w	r0, r6, #8
    2c0e:	f001 fc93 	bl	4538 <memcpy>
	esb_addr.num_pipes = num_pipes;
    2c12:	7434      	strb	r4, [r6, #16]
	esb_addr.rx_pipes_enabled = BIT_MASK_UINT_8(num_pipes);
    2c14:	22ff      	movs	r2, #255	; 0xff
    2c16:	f1c4 0408 	rsb	r4, r4, #8
    2c1a:	fa42 f404 	asr.w	r4, r2, r4
    2c1e:	74b4      	strb	r4, [r6, #18]
	if ((update_mask & ADDR_UPDATE_MASK_PREFIX) != 0) {
    2c20:	f7ff fd66 	bl	26f0 <update_radio_addresses.part.0>

	update_radio_addresses(ADDR_UPDATE_MASK_PREFIX);

	return 0;
    2c24:	4628      	mov	r0, r5
}
    2c26:	bd70      	pop	{r4, r5, r6, pc}
		return -EBUSY;
    2c28:	f06f 000f 	mvn.w	r0, #15
    2c2c:	e7fb      	b.n	2c26 <esb_set_prefixes+0x36>
		return -EINVAL;
    2c2e:	f06f 0015 	mvn.w	r0, #21
    2c32:	e7f8      	b.n	2c26 <esb_set_prefixes+0x36>
    2c34:	200004d7 	.word	0x200004d7
    2c38:	20000020 	.word	0x20000020

00002c3c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    2c3c:	4a02      	ldr	r2, [pc, #8]	; (2c48 <nvmc_wait+0xc>)
    2c3e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    2c42:	2b00      	cmp	r3, #0
    2c44:	d0fb      	beq.n	2c3e <nvmc_wait+0x2>
}
    2c46:	4770      	bx	lr
    2c48:	4001e000 	.word	0x4001e000

00002c4c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    2c4c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    2c4e:	f001 febd 	bl	49cc <nrf52_errata_136>
    2c52:	b140      	cbz	r0, 2c66 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    2c54:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2c58:	2200      	movs	r2, #0
    2c5a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    2c5e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    2c62:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    2c66:	f001 feb1 	bl	49cc <nrf52_errata_136>
    2c6a:	2800      	cmp	r0, #0
    2c6c:	d046      	beq.n	2cfc <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    2c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    2c72:	4b4c      	ldr	r3, [pc, #304]	; (2da4 <SystemInit+0x158>)
    2c74:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    2c78:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    2c7c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    2c80:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    2c84:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    2c88:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    2c8c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    2c90:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    2c94:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    2c98:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    2c9c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    2ca0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    2ca4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    2ca8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    2cac:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    2cb0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    2cb4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    2cb8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    2cbc:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    2cc0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    2cc4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    2cc8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    2ccc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    2cd0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    2cd4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    2cd8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    2cdc:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    2ce0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    2ce4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    2ce8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    2cec:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    2cf0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    2cf4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    2cf8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    2cfc:	f001 fe66 	bl	49cc <nrf52_errata_136>
    2d00:	b148      	cbz	r0, 2d16 <SystemInit+0xca>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    2d02:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d06:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    2d0a:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    2d0c:	bf44      	itt	mi
    2d0e:	f06f 0201 	mvnmi.w	r2, #1
    2d12:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    2d16:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    2d1a:	e9d3 234c 	ldrd	r2, r3, [r3, #304]	; 0x130
                        return true;
                }
            }
        #endif
        #if defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)
            if (var1 == 0x0D)
    2d1e:	2a0d      	cmp	r2, #13
    2d20:	d135      	bne.n	2d8e <SystemInit+0x142>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    2d22:	b13b      	cbz	r3, 2d34 <SystemInit+0xe8>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    2d24:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2d28:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    2d2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2d30:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2d34:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    2d38:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    2d3c:	2a00      	cmp	r2, #0
    2d3e:	db03      	blt.n	2d48 <SystemInit+0xfc>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    2d40:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    2d44:	2b00      	cmp	r3, #0
    2d46:	da29      	bge.n	2d9c <SystemInit+0x150>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2d48:	4917      	ldr	r1, [pc, #92]	; (2da8 <SystemInit+0x15c>)
    2d4a:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2d4c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2d50:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2d54:	2412      	movs	r4, #18
    nvmc_wait();
    2d56:	f7ff ff71 	bl	2c3c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    2d5a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    2d5e:	f7ff ff6d 	bl	2c3c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    2d62:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    2d66:	f7ff ff69 	bl	2c3c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    2d6a:	2300      	movs	r3, #0
    2d6c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    2d70:	f7ff ff64 	bl	2c3c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    2d74:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    2d78:	490c      	ldr	r1, [pc, #48]	; (2dac <SystemInit+0x160>)
    2d7a:	4b0d      	ldr	r3, [pc, #52]	; (2db0 <SystemInit+0x164>)
    2d7c:	68ca      	ldr	r2, [r1, #12]
    2d7e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    2d82:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    2d84:	60cb      	str	r3, [r1, #12]
    2d86:	f3bf 8f4f 	dsb	sy
    __NOP();
    2d8a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    2d8c:	e7fd      	b.n	2d8a <SystemInit+0x13e>
                        return true;
                }
            }
        #endif
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)
            if (var1 == 0x10)
    2d8e:	2a10      	cmp	r2, #16
    2d90:	d1d0      	bne.n	2d34 <SystemInit+0xe8>
            {
                switch(var2)
    2d92:	2b03      	cmp	r3, #3
    2d94:	d8c6      	bhi.n	2d24 <SystemInit+0xd8>
            if (nrf52_configuration_249())
    2d96:	4a07      	ldr	r2, [pc, #28]	; (2db4 <SystemInit+0x168>)
    2d98:	5cd3      	ldrb	r3, [r2, r3]
    2d9a:	e7c2      	b.n	2d22 <SystemInit+0xd6>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    2d9c:	4b06      	ldr	r3, [pc, #24]	; (2db8 <SystemInit+0x16c>)
    2d9e:	4a07      	ldr	r2, [pc, #28]	; (2dbc <SystemInit+0x170>)
    2da0:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    2da2:	bd10      	pop	{r4, pc}
    2da4:	4000c000 	.word	0x4000c000
    2da8:	4001e000 	.word	0x4001e000
    2dac:	e000ed00 	.word	0xe000ed00
    2db0:	05fa0004 	.word	0x05fa0004
    2db4:	000051d4 	.word	0x000051d4
    2db8:	20000034 	.word	0x20000034
    2dbc:	03d09000 	.word	0x03d09000

00002dc0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    2dc0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    2dc2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    2dc4:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    2dc6:	fab2 f382 	clz	r3, r2
    2dca:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    2dce:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    2dd0:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    2dd2:	d014      	beq.n	2dfe <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    2dd4:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    2dd8:	fa05 f303 	lsl.w	r3, r5, r3
    2ddc:	ea22 0303 	bic.w	r3, r2, r3
    2de0:	e850 6f00 	ldrex	r6, [r0]
    2de4:	4296      	cmp	r6, r2
    2de6:	d104      	bne.n	2df2 <nrfx_flag32_alloc+0x32>
    2de8:	e840 3c00 	strex	ip, r3, [r0]
    2dec:	f1bc 0f00 	cmp.w	ip, #0
    2df0:	d1f6      	bne.n	2de0 <nrfx_flag32_alloc+0x20>
    2df2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2df6:	d1e5      	bne.n	2dc4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    2df8:	4802      	ldr	r0, [pc, #8]	; (2e04 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    2dfa:	700c      	strb	r4, [r1, #0]
}
    2dfc:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    2dfe:	4802      	ldr	r0, [pc, #8]	; (2e08 <nrfx_flag32_alloc+0x48>)
    2e00:	e7fc      	b.n	2dfc <nrfx_flag32_alloc+0x3c>
    2e02:	bf00      	nop
    2e04:	0bad0000 	.word	0x0bad0000
    2e08:	0bad0002 	.word	0x0bad0002

00002e0c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    2e0c:	6803      	ldr	r3, [r0, #0]
    2e0e:	40cb      	lsrs	r3, r1
    2e10:	07db      	lsls	r3, r3, #31
{
    2e12:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    2e14:	d415      	bmi.n	2e42 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    2e16:	2301      	movs	r3, #1
    2e18:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    2e1c:	6803      	ldr	r3, [r0, #0]
    2e1e:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    2e22:	ea41 0203 	orr.w	r2, r1, r3
    2e26:	e850 4f00 	ldrex	r4, [r0]
    2e2a:	429c      	cmp	r4, r3
    2e2c:	d104      	bne.n	2e38 <nrfx_flag32_free+0x2c>
    2e2e:	e840 2c00 	strex	ip, r2, [r0]
    2e32:	f1bc 0f00 	cmp.w	ip, #0
    2e36:	d1f6      	bne.n	2e26 <nrfx_flag32_free+0x1a>
    2e38:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    2e3c:	d1ee      	bne.n	2e1c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    2e3e:	4802      	ldr	r0, [pc, #8]	; (2e48 <nrfx_flag32_free+0x3c>)
}
    2e40:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    2e42:	4802      	ldr	r0, [pc, #8]	; (2e4c <nrfx_flag32_free+0x40>)
    2e44:	e7fc      	b.n	2e40 <nrfx_flag32_free+0x34>
    2e46:	bf00      	nop
    2e48:	0bad0000 	.word	0x0bad0000
    2e4c:	0bad0004 	.word	0x0bad0004

00002e50 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    2e50:	4b04      	ldr	r3, [pc, #16]	; (2e64 <nrfx_clock_init+0x14>)
    2e52:	791a      	ldrb	r2, [r3, #4]
    2e54:	b922      	cbnz	r2, 2e60 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    2e56:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    2e58:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    2e5a:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    2e5c:	4802      	ldr	r0, [pc, #8]	; (2e68 <nrfx_clock_init+0x18>)
    2e5e:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    2e60:	4802      	ldr	r0, [pc, #8]	; (2e6c <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    2e62:	4770      	bx	lr
    2e64:	200003a8 	.word	0x200003a8
    2e68:	0bad0000 	.word	0x0bad0000
    2e6c:	0bad000c 	.word	0x0bad000c

00002e70 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e70:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    2e74:	b510      	push	{r4, lr}
    2e76:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    2e7a:	b152      	cbz	r2, 2e92 <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e7c:	2000      	movs	r0, #0
    2e7e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    2e82:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    2e86:	2201      	movs	r2, #1
    2e88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    2e8c:	4b10      	ldr	r3, [pc, #64]	; (2ed0 <nrfx_power_clock_irq_handler+0x60>)
    2e8e:	681b      	ldr	r3, [r3, #0]
    2e90:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    2e92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2e96:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    2e9a:	b172      	cbz	r2, 2eba <nrfx_power_clock_irq_handler+0x4a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    2e9c:	2200      	movs	r2, #0
    2e9e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    2ea2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    2ea6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    2eaa:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    2eae:	0792      	lsls	r2, r2, #30
    2eb0:	d104      	bne.n	2ebc <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    2eb2:	2201      	movs	r2, #1
    2eb4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    2eb8:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    2eba:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
    2ebc:	2202      	movs	r2, #2
    2ebe:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2ec2:	4b03      	ldr	r3, [pc, #12]	; (2ed0 <nrfx_power_clock_irq_handler+0x60>)
}
    2ec4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    2ec8:	681b      	ldr	r3, [r3, #0]
    2eca:	2001      	movs	r0, #1
    2ecc:	4718      	bx	r3
    2ece:	bf00      	nop
    2ed0:	200003a8 	.word	0x200003a8

00002ed4 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    2ed4:	4b03      	ldr	r3, [pc, #12]	; (2ee4 <pin_in_use_by_te+0x10>)
    2ed6:	3008      	adds	r0, #8
    2ed8:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    2edc:	f3c0 1040 	ubfx	r0, r0, #5, #1
    2ee0:	4770      	bx	lr
    2ee2:	bf00      	nop
    2ee4:	20000038 	.word	0x20000038

00002ee8 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    2ee8:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2eea:	f100 0308 	add.w	r3, r0, #8
    2eee:	4c0c      	ldr	r4, [pc, #48]	; (2f20 <call_handler+0x38>)
    2ef0:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    2ef4:	05da      	lsls	r2, r3, #23
{
    2ef6:	4605      	mov	r5, r0
    2ef8:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2efa:	d507      	bpl.n	2f0c <call_handler+0x24>
    2efc:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    2f00:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    2f04:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    2f08:	6852      	ldr	r2, [r2, #4]
    2f0a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    2f0c:	68a3      	ldr	r3, [r4, #8]
    2f0e:	b12b      	cbz	r3, 2f1c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2f10:	68e2      	ldr	r2, [r4, #12]
    2f12:	4631      	mov	r1, r6
    2f14:	4628      	mov	r0, r5
    }
}
    2f16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    2f1a:	4718      	bx	r3
}
    2f1c:	bd70      	pop	{r4, r5, r6, pc}
    2f1e:	bf00      	nop
    2f20:	20000038 	.word	0x20000038

00002f24 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2f24:	4a12      	ldr	r2, [pc, #72]	; (2f70 <release_handler+0x4c>)
    2f26:	3008      	adds	r0, #8
{
    2f28:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    2f2a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    2f2e:	05d9      	lsls	r1, r3, #23
    2f30:	d51b      	bpl.n	2f6a <release_handler+0x46>
    2f32:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    2f36:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    2f3a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2f3e:	f102 0410 	add.w	r4, r2, #16
    2f42:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    2f44:	f834 3b02 	ldrh.w	r3, [r4], #2
    2f48:	f413 7f80 	tst.w	r3, #256	; 0x100
    2f4c:	d003      	beq.n	2f56 <release_handler+0x32>
    2f4e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    2f52:	4299      	cmp	r1, r3
    2f54:	d009      	beq.n	2f6a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    2f56:	3001      	adds	r0, #1
    2f58:	2820      	cmp	r0, #32
    2f5a:	d1f3      	bne.n	2f44 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    2f5c:	2300      	movs	r3, #0
    2f5e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2f62:	4804      	ldr	r0, [pc, #16]	; (2f74 <release_handler+0x50>)
}
    2f64:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    2f66:	f7ff bf51 	b.w	2e0c <nrfx_flag32_free>
}
    2f6a:	bc10      	pop	{r4}
    2f6c:	4770      	bx	lr
    2f6e:	bf00      	nop
    2f70:	20000038 	.word	0x20000038
    2f74:	2000008c 	.word	0x2000008c

00002f78 <pin_handler_trigger_uninit>:
{
    2f78:	b538      	push	{r3, r4, r5, lr}
    2f7a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    2f7c:	f7ff ffaa 	bl	2ed4 <pin_in_use_by_te>
    2f80:	4c09      	ldr	r4, [pc, #36]	; (2fa8 <pin_handler_trigger_uninit+0x30>)
    2f82:	f102 0508 	add.w	r5, r2, #8
    2f86:	b140      	cbz	r0, 2f9a <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    2f88:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    2f8c:	4907      	ldr	r1, [pc, #28]	; (2fac <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    2f8e:	0b5b      	lsrs	r3, r3, #13
    2f90:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    2f94:	2000      	movs	r0, #0
    2f96:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    2f9a:	4610      	mov	r0, r2
    2f9c:	f7ff ffc2 	bl	2f24 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    2fa0:	2300      	movs	r3, #0
    2fa2:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    2fa6:	bd38      	pop	{r3, r4, r5, pc}
    2fa8:	20000038 	.word	0x20000038
    2fac:	40006000 	.word	0x40006000

00002fb0 <nrfx_gpiote_input_configure>:
{
    2fb0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    2fb4:	4604      	mov	r4, r0
    2fb6:	461e      	mov	r6, r3
    if (p_input_config)
    2fb8:	b309      	cbz	r1, 2ffe <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    2fba:	4f4d      	ldr	r7, [pc, #308]	; (30f0 <nrfx_gpiote_input_configure+0x140>)
    2fbc:	f100 0808 	add.w	r8, r0, #8
    2fc0:	f837 5018 	ldrh.w	r5, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    2fc4:	07ab      	lsls	r3, r5, #30
    2fc6:	d506      	bpl.n	2fd6 <nrfx_gpiote_input_configure+0x26>
    2fc8:	f7ff ff84 	bl	2ed4 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    2fcc:	b118      	cbz	r0, 2fd6 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    2fce:	4849      	ldr	r0, [pc, #292]	; (30f4 <nrfx_gpiote_input_configure+0x144>)
}
    2fd0:	b002      	add	sp, #8
    2fd2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    2fd6:	f004 001f 	and.w	r0, r4, #31
    2fda:	0080      	lsls	r0, r0, #2
    2fdc:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    2fe0:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    2fe2:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    2fe6:	f025 0502 	bic.w	r5, r5, #2
    cnf &= ~to_update;
    2fea:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    2fee:	f045 0501 	orr.w	r5, r5, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    2ff2:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    2ff6:	f827 5018 	strh.w	r5, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    2ffa:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_trigger_config)
    2ffe:	b192      	cbz	r2, 3026 <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3000:	4b3b      	ldr	r3, [pc, #236]	; (30f0 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    3002:	7815      	ldrb	r5, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    3004:	6852      	ldr	r2, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    3006:	f104 0008 	add.w	r0, r4, #8
    300a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    300e:	078f      	lsls	r7, r1, #30
    3010:	d50c      	bpl.n	302c <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
    3012:	2a00      	cmp	r2, #0
    3014:	d1db      	bne.n	2fce <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    3016:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    301a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    301e:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    3022:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    3026:	bbce      	cbnz	r6, 309c <nrfx_gpiote_input_configure+0xec>
    return NRFX_SUCCESS;
    3028:	4833      	ldr	r0, [pc, #204]	; (30f8 <nrfx_gpiote_input_configure+0x148>)
    302a:	e7d1      	b.n	2fd0 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    302c:	f021 0120 	bic.w	r1, r1, #32
    3030:	04c9      	lsls	r1, r1, #19
    3032:	0cc9      	lsrs	r1, r1, #19
    3034:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    3038:	2a00      	cmp	r2, #0
    303a:	d0ec      	beq.n	3016 <nrfx_gpiote_input_configure+0x66>
                if (!edge)
    303c:	2d03      	cmp	r5, #3
    303e:	d8c6      	bhi.n	2fce <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    3040:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    3042:	b92d      	cbnz	r5, 3050 <nrfx_gpiote_input_configure+0xa0>
    3044:	4a2d      	ldr	r2, [pc, #180]	; (30fc <nrfx_gpiote_input_configure+0x14c>)
    3046:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    304a:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    304e:	e7e2      	b.n	3016 <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    3050:	00ba      	lsls	r2, r7, #2
    3052:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3056:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    305a:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    305e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    3062:	f02c 0c03 	bic.w	ip, ip, #3
    3066:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    306a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    306e:	f42c 3c47 	bic.w	ip, ip, #203776	; 0x31c00
    3072:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    3076:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    307a:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    307e:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    3082:	f40c 5cf8 	and.w	ip, ip, #7936	; 0x1f00
    3086:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
    308a:	ea4c 0c0e 	orr.w	ip, ip, lr
    308e:	f041 0120 	orr.w	r1, r1, #32
    3092:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    3096:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    309a:	e7bc      	b.n	3016 <nrfx_gpiote_input_configure+0x66>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    309c:	e9d6 7600 	ldrd	r7, r6, [r6]
    release_handler(pin);
    30a0:	4620      	mov	r0, r4
    30a2:	f7ff ff3f 	bl	2f24 <release_handler>
    if (!handler)
    30a6:	2f00      	cmp	r7, #0
    30a8:	d0be      	beq.n	3028 <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    30aa:	4d11      	ldr	r5, [pc, #68]	; (30f0 <nrfx_gpiote_input_configure+0x140>)
    30ac:	682b      	ldr	r3, [r5, #0]
    30ae:	429f      	cmp	r7, r3
    30b0:	d104      	bne.n	30bc <nrfx_gpiote_input_configure+0x10c>
    30b2:	686b      	ldr	r3, [r5, #4]
    30b4:	429e      	cmp	r6, r3
    30b6:	d101      	bne.n	30bc <nrfx_gpiote_input_configure+0x10c>
    30b8:	2200      	movs	r2, #0
    30ba:	e009      	b.n	30d0 <nrfx_gpiote_input_configure+0x120>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    30bc:	4810      	ldr	r0, [pc, #64]	; (3100 <nrfx_gpiote_input_configure+0x150>)
    30be:	f10d 0107 	add.w	r1, sp, #7
    30c2:	f7ff fe7d 	bl	2dc0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    30c6:	4b0c      	ldr	r3, [pc, #48]	; (30f8 <nrfx_gpiote_input_configure+0x148>)
    30c8:	4298      	cmp	r0, r3
    30ca:	d181      	bne.n	2fd0 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    30cc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    30d0:	f845 7032 	str.w	r7, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    30d4:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    30d8:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    30da:	605e      	str	r6, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    30dc:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    30e0:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    30e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    30e8:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    30ec:	e79c      	b.n	3028 <nrfx_gpiote_input_configure+0x78>
    30ee:	bf00      	nop
    30f0:	20000038 	.word	0x20000038
    30f4:	0bad0004 	.word	0x0bad0004
    30f8:	0bad0000 	.word	0x0bad0000
    30fc:	40006000 	.word	0x40006000
    3100:	2000008c 	.word	0x2000008c

00003104 <nrfx_gpiote_output_configure>:
{
    3104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3106:	4604      	mov	r4, r0
    if (p_config)
    3108:	b371      	cbz	r1, 3168 <nrfx_gpiote_output_configure+0x64>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    310a:	4e37      	ldr	r6, [pc, #220]	; (31e8 <nrfx_gpiote_output_configure+0xe4>)
    310c:	f100 0708 	add.w	r7, r0, #8
    3110:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    3114:	07ab      	lsls	r3, r5, #30
    3116:	d404      	bmi.n	3122 <nrfx_gpiote_output_configure+0x1e>
    3118:	f7ff fedc 	bl	2ed4 <pin_in_use_by_te>
    311c:	b108      	cbz	r0, 3122 <nrfx_gpiote_output_configure+0x1e>
    return NRFX_SUCCESS;
    311e:	4833      	ldr	r0, [pc, #204]	; (31ec <nrfx_gpiote_output_configure+0xe8>)
}
    3120:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    3122:	f015 0f1c 	tst.w	r5, #28
    3126:	784b      	ldrb	r3, [r1, #1]
    3128:	d001      	beq.n	312e <nrfx_gpiote_output_configure+0x2a>
    312a:	2b01      	cmp	r3, #1
    312c:	d0f7      	beq.n	311e <nrfx_gpiote_output_configure+0x1a>
    *p_pin = pin_number & 0x1F;
    312e:	f004 001f 	and.w	r0, r4, #31
    3132:	0080      	lsls	r0, r0, #2
    3134:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    3138:	f891 e000 	ldrb.w	lr, [r1]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    313c:	f8d0 c700 	ldr.w	ip, [r0, #1792]	; 0x700
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    3140:	7889      	ldrb	r1, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    3142:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    3144:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    3148:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    314c:	f02c 0c07 	bic.w	ip, ip, #7
    3150:	ea43 030c 	orr.w	r3, r3, ip
    3154:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    3158:	f045 0503 	orr.w	r5, r5, #3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    315c:	f043 0301 	orr.w	r3, r3, #1
    3160:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    3164:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_task_config)
    3168:	b90a      	cbnz	r2, 316e <nrfx_gpiote_output_configure+0x6a>
    return NRFX_SUCCESS;
    316a:	4821      	ldr	r0, [pc, #132]	; (31f0 <nrfx_gpiote_output_configure+0xec>)
    316c:	e7d8      	b.n	3120 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    316e:	4e1e      	ldr	r6, [pc, #120]	; (31e8 <nrfx_gpiote_output_configure+0xe4>)
    3170:	f104 0708 	add.w	r7, r4, #8
    3174:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    3178:	0783      	lsls	r3, r0, #30
    317a:	d5d0      	bpl.n	311e <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    317c:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    3180:	4661      	mov	r1, ip
    3182:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    3184:	f020 0020 	bic.w	r0, r0, #32
    3188:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    318c:	04c0      	lsls	r0, r0, #19
    318e:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    3192:	0cc0      	lsrs	r0, r0, #19
    3194:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    3198:	2300      	movs	r3, #0
    319a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    319e:	7855      	ldrb	r5, [r2, #1]
    31a0:	2d00      	cmp	r5, #0
    31a2:	d0e2      	beq.n	316a <nrfx_gpiote_output_configure+0x66>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    31a4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    31a8:	7892      	ldrb	r2, [r2, #2]
    31aa:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    31ae:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    31b2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    31b6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    31ba:	0223      	lsls	r3, r4, #8
    31bc:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    31c0:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    31c2:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    31c6:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    31ca:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    31cc:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    31ce:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    31d2:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    31d6:	4313      	orrs	r3, r2
    31d8:	f040 0020 	orr.w	r0, r0, #32
    31dc:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    31e0:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    31e4:	e7c1      	b.n	316a <nrfx_gpiote_output_configure+0x66>
    31e6:	bf00      	nop
    31e8:	20000038 	.word	0x20000038
    31ec:	0bad0004 	.word	0x0bad0004
    31f0:	0bad0000 	.word	0x0bad0000

000031f4 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    31f4:	4b01      	ldr	r3, [pc, #4]	; (31fc <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    31f6:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    31fa:	4770      	bx	lr
    31fc:	20000038 	.word	0x20000038

00003200 <nrfx_gpiote_channel_get>:
{
    3200:	b508      	push	{r3, lr}
    3202:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    3204:	f7ff fe66 	bl	2ed4 <pin_in_use_by_te>
    3208:	b138      	cbz	r0, 321a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    320a:	4b05      	ldr	r3, [pc, #20]	; (3220 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    320c:	4805      	ldr	r0, [pc, #20]	; (3224 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    320e:	3208      	adds	r2, #8
    3210:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    3214:	0b5b      	lsrs	r3, r3, #13
    3216:	700b      	strb	r3, [r1, #0]
}
    3218:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    321a:	4803      	ldr	r0, [pc, #12]	; (3228 <nrfx_gpiote_channel_get+0x28>)
    321c:	e7fc      	b.n	3218 <nrfx_gpiote_channel_get+0x18>
    321e:	bf00      	nop
    3220:	20000038 	.word	0x20000038
    3224:	0bad0000 	.word	0x0bad0000
    3228:	0bad0004 	.word	0x0bad0004

0000322c <nrfx_gpiote_init>:
{
    322c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    322e:	4c0f      	ldr	r4, [pc, #60]	; (326c <nrfx_gpiote_init+0x40>)
    3230:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    3234:	b9bd      	cbnz	r5, 3266 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    3236:	2240      	movs	r2, #64	; 0x40
    3238:	4629      	mov	r1, r5
    323a:	f104 0010 	add.w	r0, r4, #16
    323e:	f001 f986 	bl	454e <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    3242:	2006      	movs	r0, #6
    3244:	f7fd ff84 	bl	1150 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3248:	4b09      	ldr	r3, [pc, #36]	; (3270 <nrfx_gpiote_init+0x44>)
    return err_code;
    324a:	480a      	ldr	r0, [pc, #40]	; (3274 <nrfx_gpiote_init+0x48>)
    324c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    3250:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    3254:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    3258:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    325c:	2301      	movs	r3, #1
    325e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    3262:	6563      	str	r3, [r4, #84]	; 0x54
}
    3264:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    3266:	4804      	ldr	r0, [pc, #16]	; (3278 <nrfx_gpiote_init+0x4c>)
    3268:	e7fc      	b.n	3264 <nrfx_gpiote_init+0x38>
    326a:	bf00      	nop
    326c:	20000038 	.word	0x20000038
    3270:	40006000 	.word	0x40006000
    3274:	0bad0000 	.word	0x0bad0000
    3278:	0bad0005 	.word	0x0bad0005

0000327c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    327c:	4b03      	ldr	r3, [pc, #12]	; (328c <nrfx_gpiote_is_init+0x10>)
    327e:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    3282:	3800      	subs	r0, #0
    3284:	bf18      	it	ne
    3286:	2001      	movne	r0, #1
    3288:	4770      	bx	lr
    328a:	bf00      	nop
    328c:	20000038 	.word	0x20000038

00003290 <nrfx_gpiote_channel_free>:
{
    3290:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    3292:	4801      	ldr	r0, [pc, #4]	; (3298 <nrfx_gpiote_channel_free+0x8>)
    3294:	f7ff bdba 	b.w	2e0c <nrfx_flag32_free>
    3298:	20000088 	.word	0x20000088

0000329c <nrfx_gpiote_channel_alloc>:
{
    329c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    329e:	4801      	ldr	r0, [pc, #4]	; (32a4 <nrfx_gpiote_channel_alloc+0x8>)
    32a0:	f7ff bd8e 	b.w	2dc0 <nrfx_flag32_alloc>
    32a4:	20000088 	.word	0x20000088

000032a8 <nrfx_gpiote_trigger_enable>:
{
    32a8:	b510      	push	{r4, lr}
    32aa:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    32ac:	f7ff fe12 	bl	2ed4 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    32b0:	f102 0408 	add.w	r4, r2, #8
    32b4:	4b1c      	ldr	r3, [pc, #112]	; (3328 <nrfx_gpiote_trigger_enable+0x80>)
    32b6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    32ba:	b1e0      	cbz	r0, 32f6 <nrfx_gpiote_trigger_enable+0x4e>
    32bc:	f013 0402 	ands.w	r4, r3, #2
    32c0:	d119      	bne.n	32f6 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    32c2:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    32c4:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    32c6:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    32ca:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    32ce:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    32d2:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    32d6:	6004      	str	r4, [r0, #0]
    32d8:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    32da:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    32de:	f040 0001 	orr.w	r0, r0, #1
    32e2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    32e6:	b129      	cbz	r1, 32f4 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    32e8:	2201      	movs	r2, #1
    32ea:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    32ee:	4a0f      	ldr	r2, [pc, #60]	; (332c <nrfx_gpiote_trigger_enable+0x84>)
    32f0:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    32f4:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    32f6:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    32fa:	2b04      	cmp	r3, #4
    32fc:	d010      	beq.n	3320 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    32fe:	2b05      	cmp	r3, #5
    3300:	d010      	beq.n	3324 <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    3302:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    3306:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    330a:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    330e:	40d9      	lsrs	r1, r3
    3310:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    3314:	3102      	adds	r1, #2
}
    3316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    331a:	4610      	mov	r0, r2
    331c:	f001 bc02 	b.w	4b24 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    3320:	2103      	movs	r1, #3
    3322:	e7f8      	b.n	3316 <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    3324:	2102      	movs	r1, #2
    3326:	e7f6      	b.n	3316 <nrfx_gpiote_trigger_enable+0x6e>
    3328:	20000038 	.word	0x20000038
    332c:	40006000 	.word	0x40006000

00003330 <nrfx_gpiote_trigger_disable>:
{
    3330:	b508      	push	{r3, lr}
    3332:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3334:	f7ff fdce 	bl	2ed4 <pin_in_use_by_te>
    3338:	b1c0      	cbz	r0, 336c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    333a:	f102 0108 	add.w	r1, r2, #8
    333e:	4b0e      	ldr	r3, [pc, #56]	; (3378 <nrfx_gpiote_trigger_disable+0x48>)
    3340:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    3344:	0799      	lsls	r1, r3, #30
    3346:	d411      	bmi.n	336c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    3348:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    334a:	2201      	movs	r2, #1
    334c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    334e:	009b      	lsls	r3, r3, #2
    3350:	490a      	ldr	r1, [pc, #40]	; (337c <nrfx_gpiote_trigger_disable+0x4c>)
    3352:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3356:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    335a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    335e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    3362:	f022 0203 	bic.w	r2, r2, #3
    3366:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    336a:	bd08      	pop	{r3, pc}
    336c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3370:	2100      	movs	r1, #0
    3372:	4610      	mov	r0, r2
    3374:	f001 bbd6 	b.w	4b24 <nrf_gpio_cfg_sense_set>
    3378:	20000038 	.word	0x20000038
    337c:	40006000 	.word	0x40006000

00003380 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3380:	4b0d      	ldr	r3, [pc, #52]	; (33b8 <nrfx_gpiote_pin_uninit+0x38>)
    3382:	f100 0208 	add.w	r2, r0, #8
{
    3386:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    3388:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    338c:	07db      	lsls	r3, r3, #31
{
    338e:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    3390:	d50f      	bpl.n	33b2 <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    3392:	f7ff ffcd 	bl	3330 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    3396:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    3398:	f004 041f 	and.w	r4, r4, #31
    339c:	f7ff fdec 	bl	2f78 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    33a0:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    33a4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    33a8:	2202      	movs	r2, #2
    33aa:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    33ae:	4803      	ldr	r0, [pc, #12]	; (33bc <nrfx_gpiote_pin_uninit+0x3c>)
}
    33b0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    33b2:	4803      	ldr	r0, [pc, #12]	; (33c0 <nrfx_gpiote_pin_uninit+0x40>)
    33b4:	e7fc      	b.n	33b0 <nrfx_gpiote_pin_uninit+0x30>
    33b6:	bf00      	nop
    33b8:	20000038 	.word	0x20000038
    33bc:	0bad0000 	.word	0x0bad0000
    33c0:	0bad0004 	.word	0x0bad0004

000033c4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    33c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33c8:	4b4e      	ldr	r3, [pc, #312]	; (3504 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    33ca:	484f      	ldr	r0, [pc, #316]	; (3508 <nrfx_gpiote_irq_handler+0x144>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    33cc:	494f      	ldr	r1, [pc, #316]	; (350c <nrfx_gpiote_irq_handler+0x148>)
    uint32_t status = 0;
    33ce:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    33d0:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    33d2:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    33d4:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    33d6:	b136      	cbz	r6, 33e6 <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    33d8:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    33dc:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    33de:	bf1e      	ittt	ne
    33e0:	601c      	strne	r4, [r3, #0]
    33e2:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    33e4:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    33e6:	3304      	adds	r3, #4
    33e8:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    33ea:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    33ee:	d1f1      	bne.n	33d4 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    33f0:	4b45      	ldr	r3, [pc, #276]	; (3508 <nrfx_gpiote_irq_handler+0x144>)
    33f2:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    33f6:	b1bb      	cbz	r3, 3428 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    33f8:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    33fc:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    3400:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    3402:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    3406:	af01      	add	r7, sp, #4
    3408:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    340c:	9c01      	ldr	r4, [sp, #4]
    340e:	b96c      	cbnz	r4, 342c <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    3410:	4b3d      	ldr	r3, [pc, #244]	; (3508 <nrfx_gpiote_irq_handler+0x144>)
    3412:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    3416:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    341a:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    341e:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    3420:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    3424:	2b00      	cmp	r3, #0
    3426:	d1ee      	bne.n	3406 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    3428:	2401      	movs	r4, #1
    342a:	e066      	b.n	34fa <nrfx_gpiote_irq_handler+0x136>
                uint32_t pin = NRF_CTZ(latch[i]);
    342c:	fa94 f4a4 	rbit	r4, r4
    3430:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3434:	4a36      	ldr	r2, [pc, #216]	; (3510 <nrfx_gpiote_irq_handler+0x14c>)
    3436:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    343a:	08e0      	lsrs	r0, r4, #3
    343c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
    3440:	f004 0307 	and.w	r3, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    3444:	fa08 f203 	lsl.w	r2, r8, r3
    3448:	5c3b      	ldrb	r3, [r7, r0]
    344a:	ea23 0302 	bic.w	r3, r3, r2
    344e:	543b      	strb	r3, [r7, r0]
    3450:	00a3      	lsls	r3, r4, #2
    3452:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    3456:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    345a:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    345e:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    3460:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    3462:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    3466:	d518      	bpl.n	349a <nrfx_gpiote_irq_handler+0xd6>
        call_handler(pin, trigger);
    3468:	4659      	mov	r1, fp
    346a:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    346c:	fa5f fa82 	uxtb.w	sl, r2
    3470:	f7ff fd3a 	bl	2ee8 <call_handler>
    3474:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    3478:	f3c3 4301 	ubfx	r3, r3, #16, #2
    347c:	459a      	cmp	sl, r3
    347e:	d107      	bne.n	3490 <nrfx_gpiote_irq_handler+0xcc>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    3480:	2100      	movs	r1, #0
    3482:	4620      	mov	r0, r4
    3484:	f001 fb4e 	bl	4b24 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    3488:	4651      	mov	r1, sl
    348a:	4620      	mov	r0, r4
    348c:	f001 fb4a 	bl	4b24 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    3490:	fa08 f404 	lsl.w	r4, r8, r4
    3494:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    3498:	e7b8      	b.n	340c <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    349a:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    349c:	bf0c      	ite	eq
    349e:	2103      	moveq	r1, #3
    34a0:	2102      	movne	r1, #2
    34a2:	4620      	mov	r0, r4
    34a4:	f001 fb3e 	bl	4b24 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    34a8:	f1ba 0f03 	cmp.w	sl, #3
    34ac:	d004      	beq.n	34b8 <nrfx_gpiote_irq_handler+0xf4>
    34ae:	2a02      	cmp	r2, #2
    34b0:	d107      	bne.n	34c2 <nrfx_gpiote_irq_handler+0xfe>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    34b2:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    34b6:	d1eb      	bne.n	3490 <nrfx_gpiote_irq_handler+0xcc>
            call_handler(pin, trigger);
    34b8:	4659      	mov	r1, fp
    34ba:	4620      	mov	r0, r4
    34bc:	f7ff fd14 	bl	2ee8 <call_handler>
    34c0:	e7e6      	b.n	3490 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    34c2:	2a03      	cmp	r2, #3
    34c4:	d1e4      	bne.n	3490 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    34c6:	f1ba 0f02 	cmp.w	sl, #2
    34ca:	e7f4      	b.n	34b6 <nrfx_gpiote_irq_handler+0xf2>
        uint32_t ch = NRF_CTZ(mask);
    34cc:	fa95 f3a5 	rbit	r3, r5
    34d0:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    34d4:	fa04 f203 	lsl.w	r2, r4, r3
    34d8:	009b      	lsls	r3, r3, #2
    34da:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    34de:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    34e2:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    34e6:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    34ea:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    34ee:	f3c0 2004 	ubfx	r0, r0, #8, #5
    34f2:	f3c1 4101 	ubfx	r1, r1, #16, #2
    34f6:	f7ff fcf7 	bl	2ee8 <call_handler>
    while (mask)
    34fa:	2d00      	cmp	r5, #0
    34fc:	d1e6      	bne.n	34cc <nrfx_gpiote_irq_handler+0x108>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    34fe:	b003      	add	sp, #12
    3500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3504:	40006100 	.word	0x40006100
    3508:	40006000 	.word	0x40006000
    350c:	40006120 	.word	0x40006120
    3510:	20000038 	.word	0x20000038

00003514 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    3514:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    3516:	4801      	ldr	r0, [pc, #4]	; (351c <nrfx_ppi_channel_alloc+0x8>)
    3518:	f7ff bc52 	b.w	2dc0 <nrfx_flag32_alloc>
    351c:	20000094 	.word	0x20000094

00003520 <nrfx_ppi_channel_assign>:
    return nrfx_flag32_free(&m_channels_allocated, channel);
}


nrfx_err_t nrfx_ppi_channel_assign(nrf_ppi_channel_t channel, uint32_t eep, uint32_t tep)
{
    3520:	b570      	push	{r4, r5, r6, lr}
    3522:	4604      	mov	r4, r0
    3524:	4615      	mov	r5, r2
    if ((uint32_t *)eep == NULL || (uint32_t *)tep == NULL)
    3526:	460e      	mov	r6, r1
    3528:	b1b1      	cbz	r1, 3558 <nrfx_ppi_channel_assign+0x38>
    352a:	b1aa      	cbz	r2, 3558 <nrfx_ppi_channel_assign+0x38>
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    352c:	2301      	movs	r3, #1
    352e:	4083      	lsls	r3, r0
    return ((NRFX_PPI_PROG_APP_CHANNELS_MASK & nrfx_ppi_channel_to_mask(channel)) != 0);
    3530:	f3c3 0313 	ubfx	r3, r3, #0, #20
        return NRFX_ERROR_NULL;
    }

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_programmable_app_channel(channel))
    3534:	b193      	cbz	r3, 355c <nrfx_ppi_channel_assign+0x3c>
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
    }
    else if (!nrfx_flag32_is_allocated(m_channels_allocated, channel))
    3536:	4b0b      	ldr	r3, [pc, #44]	; (3564 <nrfx_ppi_channel_assign+0x44>)
    3538:	4601      	mov	r1, r0
    353a:	6818      	ldr	r0, [r3, #0]
    353c:	f001 fa56 	bl	49ec <nrfx_flag32_is_allocated>
    3540:	b170      	cbz	r0, 3560 <nrfx_ppi_channel_assign+0x40>
    p_reg->CH[(uint32_t) channel].EEP = eep;
    3542:	00e0      	lsls	r0, r4, #3
    3544:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    3548:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    354c:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    3550:	f8c0 5514 	str.w	r5, [r0, #1300]	; 0x514
    nrfx_err_t err_code = NRFX_SUCCESS;
    3554:	4804      	ldr	r0, [pc, #16]	; (3568 <nrfx_ppi_channel_assign+0x48>)
                      eep,
                      tep);
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    3556:	bd70      	pop	{r4, r5, r6, pc}
        return NRFX_ERROR_NULL;
    3558:	4804      	ldr	r0, [pc, #16]	; (356c <nrfx_ppi_channel_assign+0x4c>)
    355a:	e7fc      	b.n	3556 <nrfx_ppi_channel_assign+0x36>
        err_code = NRFX_ERROR_INVALID_PARAM;
    355c:	4804      	ldr	r0, [pc, #16]	; (3570 <nrfx_ppi_channel_assign+0x50>)
    355e:	e7fa      	b.n	3556 <nrfx_ppi_channel_assign+0x36>
        err_code = NRFX_ERROR_INVALID_STATE;
    3560:	4804      	ldr	r0, [pc, #16]	; (3574 <nrfx_ppi_channel_assign+0x54>)
    3562:	e7f8      	b.n	3556 <nrfx_ppi_channel_assign+0x36>
    3564:	20000094 	.word	0x20000094
    3568:	0bad0000 	.word	0x0bad0000
    356c:	0bad0009 	.word	0x0bad0009
    3570:	0bad0004 	.word	0x0bad0004
    3574:	0bad0005 	.word	0x0bad0005

00003578 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    3578:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    357a:	4c14      	ldr	r4, [pc, #80]	; (35cc <_DoInit+0x54>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    357c:	4a14      	ldr	r2, [pc, #80]	; (35d0 <_DoInit+0x58>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    357e:	4915      	ldr	r1, [pc, #84]	; (35d4 <_DoInit+0x5c>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    3580:	2303      	movs	r3, #3
    3582:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    3584:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    3586:	4b14      	ldr	r3, [pc, #80]	; (35d8 <_DoInit+0x60>)
  p->aUp[0].sName         = "Terminal";
    3588:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    358a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    358c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    3590:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    3592:	2300      	movs	r3, #0
    3594:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    3596:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    3598:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    359a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    359c:	4a0f      	ldr	r2, [pc, #60]	; (35dc <_DoInit+0x64>)
    359e:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    35a0:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    35a2:	2210      	movs	r2, #16
    35a4:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    35a6:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    35a8:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    35aa:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    35ac:	f000 ffaa 	bl	4504 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    35b0:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
    35b4:	490a      	ldr	r1, [pc, #40]	; (35e0 <_DoInit+0x68>)
    35b6:	4620      	mov	r0, r4
    35b8:	f000 ffa4 	bl	4504 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    35bc:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
    35c0:	2320      	movs	r3, #32
    35c2:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
    35c4:	f3bf 8f5f 	dmb	sy
}
    35c8:	bd10      	pop	{r4, pc}
    35ca:	bf00      	nop
    35cc:	200003b0 	.word	0x200003b0
    35d0:	000051d8 	.word	0x000051d8
    35d4:	000051e1 	.word	0x000051e1
    35d8:	20000744 	.word	0x20000744
    35dc:	20000734 	.word	0x20000734
    35e0:	000051e5 	.word	0x000051e5

000035e4 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    35e4:	4b0e      	ldr	r3, [pc, #56]	; (3620 <z_sys_init_run_level+0x3c>)
{
    35e6:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    35e8:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    35ec:	3001      	adds	r0, #1
    35ee:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    35f2:	42a6      	cmp	r6, r4
    35f4:	d800      	bhi.n	35f8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    35f6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    35f8:	e9d4 3500 	ldrd	r3, r5, [r4]
    35fc:	4628      	mov	r0, r5
    35fe:	4798      	blx	r3
		if (dev != NULL) {
    3600:	b165      	cbz	r5, 361c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    3602:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    3604:	b130      	cbz	r0, 3614 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    3606:	2800      	cmp	r0, #0
    3608:	bfb8      	it	lt
    360a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    360c:	28ff      	cmp	r0, #255	; 0xff
    360e:	bfa8      	it	ge
    3610:	20ff      	movge	r0, #255	; 0xff
    3612:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    3614:	785a      	ldrb	r2, [r3, #1]
    3616:	f042 0201 	orr.w	r2, r2, #1
    361a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    361c:	3408      	adds	r4, #8
    361e:	e7e8      	b.n	35f2 <z_sys_init_run_level+0xe>
    3620:	00005084 	.word	0x00005084

00003624 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    3624:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    3626:	4b0a      	ldr	r3, [pc, #40]	; (3650 <bg_thread_main+0x2c>)
    3628:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    362a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    362c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    362e:	f7ff ffd9 	bl	35e4 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    3632:	f000 fe03 	bl	423c <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    3636:	2003      	movs	r0, #3
    3638:	f7ff ffd4 	bl	35e4 <z_sys_init_run_level>

	z_init_static_threads();
    363c:	f000 f8ea 	bl	3814 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    3640:	f000 fe08 	bl	4254 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    3644:	4a03      	ldr	r2, [pc, #12]	; (3654 <bg_thread_main+0x30>)
    3646:	7b13      	ldrb	r3, [r2, #12]
    3648:	f023 0301 	bic.w	r3, r3, #1
    364c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    364e:	bd08      	pop	{r3, pc}
    3650:	20000b44 	.word	0x20000b44
    3654:	20000150 	.word	0x20000150

00003658 <z_bss_zero>:
{
    3658:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    365a:	4803      	ldr	r0, [pc, #12]	; (3668 <z_bss_zero+0x10>)
    365c:	4a03      	ldr	r2, [pc, #12]	; (366c <z_bss_zero+0x14>)
    365e:	2100      	movs	r1, #0
    3660:	1a12      	subs	r2, r2, r0
    3662:	f001 fa9a 	bl	4b9a <z_early_memset>
}
    3666:	bd08      	pop	{r3, pc}
    3668:	200000b0 	.word	0x200000b0
    366c:	20000b48 	.word	0x20000b48

00003670 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    3670:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    3672:	2300      	movs	r3, #0
{
    3674:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    3676:	2201      	movs	r2, #1
    3678:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    367c:	4e13      	ldr	r6, [pc, #76]	; (36cc <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    367e:	4d14      	ldr	r5, [pc, #80]	; (36d0 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    3680:	9301      	str	r3, [sp, #4]
    3682:	220f      	movs	r2, #15
    3684:	e9cd 3202 	strd	r3, r2, [sp, #8]
    3688:	4912      	ldr	r1, [pc, #72]	; (36d4 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    368a:	2318      	movs	r3, #24
    368c:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    3690:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    3694:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    3696:	f44f 7090 	mov.w	r0, #288	; 0x120
    369a:	fb00 1104 	mla	r1, r0, r4, r1
    369e:	4b0e      	ldr	r3, [pc, #56]	; (36d8 <z_init_cpu+0x68>)
    36a0:	9500      	str	r5, [sp, #0]
    36a2:	f44f 7280 	mov.w	r2, #256	; 0x100
    36a6:	4630      	mov	r0, r6
    36a8:	f000 f882 	bl	37b0 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    36ac:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    36ae:	480b      	ldr	r0, [pc, #44]	; (36dc <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    36b0:	752c      	strb	r4, [r5, #20]
    36b2:	f023 0304 	bic.w	r3, r3, #4
    36b6:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    36b8:	f44f 6302 	mov.w	r3, #2080	; 0x820
    36bc:	fb03 0404 	mla	r4, r3, r4, r0
    36c0:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    36c2:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    36c4:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    36c6:	b006      	add	sp, #24
    36c8:	bd70      	pop	{r4, r5, r6, pc}
    36ca:	bf00      	nop
    36cc:	200000d0 	.word	0x200000d0
    36d0:	20000458 	.word	0x20000458
    36d4:	20000f80 	.word	0x20000f80
    36d8:	000038cd 	.word	0x000038cd
    36dc:	200010a0 	.word	0x200010a0

000036e0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    36e0:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    36e2:	4b2c      	ldr	r3, [pc, #176]	; (3794 <z_cstart+0xb4>)
    36e4:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    36e6:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    36ea:	4d2b      	ldr	r5, [pc, #172]	; (3798 <z_cstart+0xb8>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    36ec:	4e2b      	ldr	r6, [pc, #172]	; (379c <z_cstart+0xbc>)
    36ee:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    36f0:	4f2b      	ldr	r7, [pc, #172]	; (37a0 <z_cstart+0xc0>)
    36f2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    36f6:	2400      	movs	r4, #0
    36f8:	616b      	str	r3, [r5, #20]
    36fa:	23e0      	movs	r3, #224	; 0xe0
    36fc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    3700:	77ec      	strb	r4, [r5, #31]
    3702:	762c      	strb	r4, [r5, #24]
    3704:	766c      	strb	r4, [r5, #25]
    3706:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    3708:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    370a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    370e:	626b      	str	r3, [r5, #36]	; 0x24
    3710:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    3714:	f7fd ff3c 	bl	1590 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    3718:	f7fd fcfc 	bl	1114 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    371c:	f04f 33ff 	mov.w	r3, #4294967295
    3720:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    3722:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    3724:	f7fe f86c 	bl	1800 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    3728:	f7fd ffd4 	bl	16d4 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    372c:	f240 1301 	movw	r3, #257	; 0x101
    3730:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    3734:	ab06      	add	r3, sp, #24
    3736:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    3738:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    373c:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    373e:	f001 fa06 	bl	4b4e <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    3742:	4620      	mov	r0, r4
    3744:	f7ff ff4e 	bl	35e4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    3748:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    374a:	4d16      	ldr	r5, [pc, #88]	; (37a4 <z_cstart+0xc4>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    374c:	f7ff ff4a 	bl	35e4 <z_sys_init_run_level>
	z_sched_init();
    3750:	f000 fb1c 	bl	3d8c <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3754:	4b14      	ldr	r3, [pc, #80]	; (37a8 <z_cstart+0xc8>)
	_kernel.ready_q.cache = &z_main_thread;
    3756:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    3758:	9305      	str	r3, [sp, #20]
    375a:	2301      	movs	r3, #1
    375c:	4913      	ldr	r1, [pc, #76]	; (37ac <z_cstart+0xcc>)
    375e:	9400      	str	r4, [sp, #0]
    3760:	e9cd 4303 	strd	r4, r3, [sp, #12]
    3764:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3768:	463b      	mov	r3, r7
    376a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    376e:	4628      	mov	r0, r5
    3770:	f000 f81e 	bl	37b0 <z_setup_new_thread>
    3774:	7b6a      	ldrb	r2, [r5, #13]
    3776:	4606      	mov	r6, r0
    3778:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    377c:	4628      	mov	r0, r5
    377e:	736a      	strb	r2, [r5, #13]
    3780:	f001 fa4a 	bl	4c18 <z_ready_thread>
	z_init_cpu(0);
    3784:	4620      	mov	r0, r4
    3786:	f7ff ff73 	bl	3670 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    378a:	463a      	mov	r2, r7
    378c:	4631      	mov	r1, r6
    378e:	4628      	mov	r0, r5
    3790:	f7fd fdd6 	bl	1340 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    3794:	200018c0 	.word	0x200018c0
    3798:	e000ed00 	.word	0xe000ed00
    379c:	20000458 	.word	0x20000458
    37a0:	00003625 	.word	0x00003625
    37a4:	20000150 	.word	0x20000150
    37a8:	000051ec 	.word	0x000051ec
    37ac:	20000b60 	.word	0x20000b60

000037b0 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    37b0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    37b4:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    37b6:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    37b8:	2604      	movs	r6, #4
    37ba:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    37bc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    37be:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    37c0:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    37c4:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    37c6:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    37c8:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    37cc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    37ce:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    37d0:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    37d4:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    37d6:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    37da:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    37de:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    37e0:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    37e2:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    37e4:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    37e8:	9202      	str	r2, [sp, #8]
    37ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    37ec:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    37ee:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    37f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    37f2:	9200      	str	r2, [sp, #0]
    37f4:	4642      	mov	r2, r8
{
    37f6:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    37f8:	f7fd fd70 	bl	12dc <arch_new_thread>
	if (!_current) {
    37fc:	4b04      	ldr	r3, [pc, #16]	; (3810 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    37fe:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    3800:	689b      	ldr	r3, [r3, #8]
    3802:	b103      	cbz	r3, 3806 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    3804:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    3806:	6723      	str	r3, [r4, #112]	; 0x70
}
    3808:	4640      	mov	r0, r8
    380a:	b004      	add	sp, #16
    380c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3810:	20000458 	.word	0x20000458

00003814 <z_init_static_threads>:
{
    3814:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3818:	4c29      	ldr	r4, [pc, #164]	; (38c0 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    381a:	4d2a      	ldr	r5, [pc, #168]	; (38c4 <z_init_static_threads+0xb0>)
{
    381c:	b087      	sub	sp, #28
    381e:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    3820:	42ae      	cmp	r6, r5
    3822:	f104 0430 	add.w	r4, r4, #48	; 0x30
    3826:	d30f      	bcc.n	3848 <z_init_static_threads+0x34>
	k_sched_lock();
    3828:	f000 f90c 	bl	3a44 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    382c:	4c24      	ldr	r4, [pc, #144]	; (38c0 <z_init_static_threads+0xac>)

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    382e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 38c8 <z_init_static_threads+0xb4>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3832:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    3836:	f240 37e7 	movw	r7, #999	; 0x3e7
    383a:	42ac      	cmp	r4, r5
    383c:	d320      	bcc.n	3880 <z_init_static_threads+0x6c>
}
    383e:	b007      	add	sp, #28
    3840:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    3844:	f000 ba86 	b.w	3d54 <k_sched_unlock>
		z_setup_new_thread(
    3848:	f854 3c04 	ldr.w	r3, [r4, #-4]
    384c:	9305      	str	r3, [sp, #20]
    384e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    3852:	9304      	str	r3, [sp, #16]
    3854:	f854 3c14 	ldr.w	r3, [r4, #-20]
    3858:	9303      	str	r3, [sp, #12]
    385a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    385e:	9302      	str	r3, [sp, #8]
    3860:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3864:	9301      	str	r3, [sp, #4]
    3866:	f854 3c20 	ldr.w	r3, [r4, #-32]
    386a:	9300      	str	r3, [sp, #0]
    386c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    3870:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    3874:	f7ff ff9c 	bl	37b0 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    3878:	f854 3c30 	ldr.w	r3, [r4, #-48]
    387c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    387e:	e7ce      	b.n	381e <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    3880:	6a63      	ldr	r3, [r4, #36]	; 0x24
    3882:	1c5a      	adds	r2, r3, #1
    3884:	d00d      	beq.n	38a2 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    3886:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    388a:	2100      	movs	r1, #0
    388c:	4638      	mov	r0, r7
    388e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    3892:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    3896:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    389a:	d104      	bne.n	38a6 <z_init_static_threads+0x92>
	z_sched_start(thread);
    389c:	4640      	mov	r0, r8
    389e:	f000 f9b7 	bl	3c10 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    38a2:	3430      	adds	r4, #48	; 0x30
    38a4:	e7c9      	b.n	383a <z_init_static_threads+0x26>
    38a6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    38aa:	2300      	movs	r3, #0
    38ac:	f7fc fc18 	bl	e0 <__aeabi_uldivmod>
    38b0:	4602      	mov	r2, r0
    38b2:	460b      	mov	r3, r1
    38b4:	f108 0018 	add.w	r0, r8, #24
    38b8:	4649      	mov	r1, r9
    38ba:	f000 fbd1 	bl	4060 <z_add_timeout>
    38be:	e7f0      	b.n	38a2 <z_init_static_threads+0x8e>
    38c0:	200000ac 	.word	0x200000ac
    38c4:	200000ac 	.word	0x200000ac
    38c8:	00004c39 	.word	0x00004c39

000038cc <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    38cc:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    38ce:	4c0b      	ldr	r4, [pc, #44]	; (38fc <idle+0x30>)
	return !z_sys_post_kernel;
    38d0:	4d0b      	ldr	r5, [pc, #44]	; (3900 <idle+0x34>)
	__asm__ volatile(
    38d2:	f04f 0220 	mov.w	r2, #32
    38d6:	f3ef 8311 	mrs	r3, BASEPRI
    38da:	f382 8812 	msr	BASEPRI_MAX, r2
    38de:	f3bf 8f6f 	isb	sy
    38e2:	f001 fa23 	bl	4d2c <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    38e6:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    38e8:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    38ea:	b913      	cbnz	r3, 38f2 <idle+0x26>
	arch_cpu_idle();
    38ec:	f7fd fc18 	bl	1120 <arch_cpu_idle>
}
    38f0:	e7ef      	b.n	38d2 <idle+0x6>
    38f2:	f7fd fb35 	bl	f60 <pm_system_suspend>
    38f6:	2800      	cmp	r0, #0
    38f8:	d1eb      	bne.n	38d2 <idle+0x6>
    38fa:	e7f7      	b.n	38ec <idle+0x20>
    38fc:	20000458 	.word	0x20000458
    3900:	20000b44 	.word	0x20000b44

00003904 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    3904:	b538      	push	{r3, r4, r5, lr}
    3906:	4604      	mov	r4, r0
    3908:	f04f 0320 	mov.w	r3, #32
    390c:	f3ef 8511 	mrs	r5, BASEPRI
    3910:	f383 8812 	msr	BASEPRI_MAX, r3
    3914:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    3918:	f001 f9da 	bl	4cd0 <z_unpend_first_thread>

	if (thread != NULL) {
    391c:	b148      	cbz	r0, 3932 <z_impl_k_sem_give+0x2e>
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    391e:	2200      	movs	r2, #0
    3920:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    3922:	f001 f979 	bl	4c18 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    3926:	4629      	mov	r1, r5
    3928:	4805      	ldr	r0, [pc, #20]	; (3940 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    392a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    392e:	f000 b877 	b.w	3a20 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    3932:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    3936:	429a      	cmp	r2, r3
    3938:	bf18      	it	ne
    393a:	3301      	addne	r3, #1
    393c:	60a3      	str	r3, [r4, #8]
}
    393e:	e7f2      	b.n	3926 <z_impl_k_sem_give+0x22>
    3940:	20000b45 	.word	0x20000b45

00003944 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    3944:	b513      	push	{r0, r1, r4, lr}
    3946:	f04f 0420 	mov.w	r4, #32
    394a:	f3ef 8111 	mrs	r1, BASEPRI
    394e:	f384 8812 	msr	BASEPRI_MAX, r4
    3952:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    3956:	6884      	ldr	r4, [r0, #8]
    3958:	b144      	cbz	r4, 396c <z_impl_k_sem_take+0x28>
		sem->count--;
    395a:	3c01      	subs	r4, #1
    395c:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    395e:	f381 8811 	msr	BASEPRI, r1
    3962:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    3966:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    3968:	b002      	add	sp, #8
    396a:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    396c:	ea52 0403 	orrs.w	r4, r2, r3
    3970:	d106      	bne.n	3980 <z_impl_k_sem_take+0x3c>
    3972:	f381 8811 	msr	BASEPRI, r1
    3976:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    397a:	f06f 000f 	mvn.w	r0, #15
    397e:	e7f3      	b.n	3968 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    3980:	e9cd 2300 	strd	r2, r3, [sp]
    3984:	4602      	mov	r2, r0
    3986:	4802      	ldr	r0, [pc, #8]	; (3990 <z_impl_k_sem_take+0x4c>)
    3988:	f000 f99e 	bl	3cc8 <z_pend_curr>
	return ret;
    398c:	e7ec      	b.n	3968 <z_impl_k_sem_take+0x24>
    398e:	bf00      	nop
    3990:	20000b45 	.word	0x20000b45

00003994 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    3994:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    3996:	4d07      	ldr	r5, [pc, #28]	; (39b4 <z_reset_time_slice+0x20>)
    3998:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    399a:	b154      	cbz	r4, 39b2 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    399c:	f7fe fe46 	bl	262c <sys_clock_elapsed>
    39a0:	4b05      	ldr	r3, [pc, #20]	; (39b8 <z_reset_time_slice+0x24>)
    39a2:	4404      	add	r4, r0
    39a4:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    39a6:	6828      	ldr	r0, [r5, #0]
    39a8:	2100      	movs	r1, #0
	}
}
    39aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    39ae:	f001 b9cd 	b.w	4d4c <z_set_timeout_expiry>
}
    39b2:	bd38      	pop	{r3, r4, r5, pc}
    39b4:	20000488 	.word	0x20000488
    39b8:	20000458 	.word	0x20000458

000039bc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    39bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    39be:	4604      	mov	r4, r0
    39c0:	460d      	mov	r5, r1
	__asm__ volatile(
    39c2:	f04f 0320 	mov.w	r3, #32
    39c6:	f3ef 8711 	mrs	r7, BASEPRI
    39ca:	f383 8812 	msr	BASEPRI_MAX, r3
    39ce:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    39d2:	4e10      	ldr	r6, [pc, #64]	; (3a14 <k_sched_time_slice_set+0x58>)
    39d4:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    39d6:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    39da:	f240 30e7 	movw	r0, #999	; 0x3e7
    39de:	6131      	str	r1, [r6, #16]
    39e0:	2300      	movs	r3, #0
    39e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    39e6:	fbe4 010c 	umlal	r0, r1, r4, ip
    39ea:	f7fc fb79 	bl	e0 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    39ee:	2c00      	cmp	r4, #0
    39f0:	4b09      	ldr	r3, [pc, #36]	; (3a18 <k_sched_time_slice_set+0x5c>)
    39f2:	dc0a      	bgt.n	3a0a <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    39f4:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    39f6:	4b09      	ldr	r3, [pc, #36]	; (3a1c <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    39f8:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    39fa:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    39fc:	f7ff ffca 	bl	3994 <z_reset_time_slice>
	__asm__ volatile(
    3a00:	f387 8811 	msr	BASEPRI, r7
    3a04:	f3bf 8f6f 	isb	sy
	}
}
    3a08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    3a0a:	2802      	cmp	r0, #2
    3a0c:	bfb8      	it	lt
    3a0e:	2002      	movlt	r0, #2
    3a10:	e7f0      	b.n	39f4 <k_sched_time_slice_set+0x38>
    3a12:	bf00      	nop
    3a14:	20000458 	.word	0x20000458
    3a18:	20000488 	.word	0x20000488
    3a1c:	20000484 	.word	0x20000484

00003a20 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    3a20:	b949      	cbnz	r1, 3a36 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    3a22:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    3a26:	b930      	cbnz	r0, 3a36 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    3a28:	4b05      	ldr	r3, [pc, #20]	; (3a40 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    3a2a:	69da      	ldr	r2, [r3, #28]
    3a2c:	689b      	ldr	r3, [r3, #8]
    3a2e:	429a      	cmp	r2, r3
    3a30:	d001      	beq.n	3a36 <z_reschedule+0x16>
	ret = arch_swap(key);
    3a32:	f7fd bbff 	b.w	1234 <arch_swap>
    3a36:	f381 8811 	msr	BASEPRI, r1
    3a3a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    3a3e:	4770      	bx	lr
    3a40:	20000458 	.word	0x20000458

00003a44 <k_sched_lock>:
	__asm__ volatile(
    3a44:	f04f 0320 	mov.w	r3, #32
    3a48:	f3ef 8111 	mrs	r1, BASEPRI
    3a4c:	f383 8812 	msr	BASEPRI_MAX, r3
    3a50:	f3bf 8f6f 	isb	sy
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    3a54:	4b04      	ldr	r3, [pc, #16]	; (3a68 <k_sched_lock+0x24>)
    3a56:	689a      	ldr	r2, [r3, #8]
    3a58:	7bd3      	ldrb	r3, [r2, #15]
    3a5a:	3b01      	subs	r3, #1
    3a5c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    3a5e:	f381 8811 	msr	BASEPRI, r1
    3a62:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    3a66:	4770      	bx	lr
    3a68:	20000458 	.word	0x20000458

00003a6c <update_cache>:
{
    3a6c:	b538      	push	{r3, r4, r5, lr}
    3a6e:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    3a70:	480c      	ldr	r0, [pc, #48]	; (3aa4 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0xc>)
    3a72:	4d0d      	ldr	r5, [pc, #52]	; (3aa8 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x10>)
    3a74:	f001 f8ca 	bl	4c0c <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    3a78:	4604      	mov	r4, r0
    3a7a:	b900      	cbnz	r0, 3a7e <update_cache+0x12>
    3a7c:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    3a7e:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    3a80:	b94a      	cbnz	r2, 3a96 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    3a82:	7b5a      	ldrb	r2, [r3, #13]
    3a84:	06d2      	lsls	r2, r2, #27
    3a86:	d106      	bne.n	3a96 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    3a88:	69a2      	ldr	r2, [r4, #24]
    3a8a:	b922      	cbnz	r2, 3a96 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    3a8c:	89da      	ldrh	r2, [r3, #14]
    3a8e:	2a7f      	cmp	r2, #127	; 0x7f
    3a90:	d901      	bls.n	3a96 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    3a92:	61eb      	str	r3, [r5, #28]
}
    3a94:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    3a96:	429c      	cmp	r4, r3
    3a98:	d002      	beq.n	3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>
			z_reset_time_slice(thread);
    3a9a:	4620      	mov	r0, r4
    3a9c:	f7ff ff7a 	bl	3994 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    3aa0:	61ec      	str	r4, [r5, #28]
}
    3aa2:	e7f7      	b.n	3a94 <update_cache+0x28>
    3aa4:	20000478 	.word	0x20000478
    3aa8:	20000458 	.word	0x20000458

00003aac <move_thread_to_end_of_prio_q>:
{
    3aac:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    3aae:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    3ab2:	7b43      	ldrb	r3, [r0, #13]
    3ab4:	2a00      	cmp	r2, #0
{
    3ab6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3ab8:	da04      	bge.n	3ac4 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3abe:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    3ac0:	f001 f87c 	bl	4bbc <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    3ac4:	7b4b      	ldrb	r3, [r1, #13]
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    3ac6:	4a15      	ldr	r2, [pc, #84]	; (3b1c <move_thread_to_end_of_prio_q+0x70>)
    3ac8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3acc:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    3ace:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3ad2:	f102 0520 	add.w	r5, r2, #32
    3ad6:	42ab      	cmp	r3, r5
    3ad8:	d01b      	beq.n	3b12 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3ada:	b1d3      	cbz	r3, 3b12 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    3adc:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    3ae0:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    3ae4:	4286      	cmp	r6, r0
    3ae6:	d00f      	beq.n	3b08 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    3ae8:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3aea:	2800      	cmp	r0, #0
    3aec:	dd0c      	ble.n	3b08 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    3aee:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    3af0:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    3af4:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    3af6:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    3af8:	6890      	ldr	r0, [r2, #8]
    3afa:	1a43      	subs	r3, r0, r1
    3afc:	4258      	negs	r0, r3
}
    3afe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    3b02:	4158      	adcs	r0, r3
    3b04:	f7ff bfb2 	b.w	3a6c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3b08:	42a3      	cmp	r3, r4
    3b0a:	d002      	beq.n	3b12 <move_thread_to_end_of_prio_q+0x66>
    3b0c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3b0e:	2b00      	cmp	r3, #0
    3b10:	d1e6      	bne.n	3ae0 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    3b12:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    3b16:	6021      	str	r1, [r4, #0]
	list->tail = node;
    3b18:	6251      	str	r1, [r2, #36]	; 0x24
}
    3b1a:	e7ed      	b.n	3af8 <move_thread_to_end_of_prio_q+0x4c>
    3b1c:	20000458 	.word	0x20000458

00003b20 <z_time_slice>:
{
    3b20:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    3b22:	f04f 0320 	mov.w	r3, #32
    3b26:	f3ef 8511 	mrs	r5, BASEPRI
    3b2a:	f383 8812 	msr	BASEPRI_MAX, r3
    3b2e:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    3b32:	4b17      	ldr	r3, [pc, #92]	; (3b90 <z_time_slice+0x70>)
    3b34:	4a17      	ldr	r2, [pc, #92]	; (3b94 <z_time_slice+0x74>)
    3b36:	689c      	ldr	r4, [r3, #8]
    3b38:	6811      	ldr	r1, [r2, #0]
    3b3a:	428c      	cmp	r4, r1
    3b3c:	d107      	bne.n	3b4e <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    3b3e:	4620      	mov	r0, r4
    3b40:	f7ff ff28 	bl	3994 <z_reset_time_slice>
	__asm__ volatile(
    3b44:	f385 8811 	msr	BASEPRI, r5
    3b48:	f3bf 8f6f 	isb	sy
}
    3b4c:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    3b4e:	2100      	movs	r1, #0
    3b50:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    3b52:	4a11      	ldr	r2, [pc, #68]	; (3b98 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    3b54:	6812      	ldr	r2, [r2, #0]
    3b56:	b1c2      	cbz	r2, 3b8a <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    3b58:	89e2      	ldrh	r2, [r4, #14]
    3b5a:	2a7f      	cmp	r2, #127	; 0x7f
    3b5c:	d815      	bhi.n	3b8a <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    3b5e:	7b62      	ldrb	r2, [r4, #13]
    3b60:	06d2      	lsls	r2, r2, #27
    3b62:	d112      	bne.n	3b8a <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    3b64:	4a0d      	ldr	r2, [pc, #52]	; (3b9c <z_time_slice+0x7c>)
    3b66:	f994 100e 	ldrsb.w	r1, [r4, #14]
    3b6a:	6812      	ldr	r2, [r2, #0]
    3b6c:	4291      	cmp	r1, r2
    3b6e:	db0c      	blt.n	3b8a <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    3b70:	4a0b      	ldr	r2, [pc, #44]	; (3ba0 <z_time_slice+0x80>)
    3b72:	4294      	cmp	r4, r2
    3b74:	d009      	beq.n	3b8a <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    3b76:	691a      	ldr	r2, [r3, #16]
    3b78:	4282      	cmp	r2, r0
    3b7a:	dc03      	bgt.n	3b84 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    3b7c:	4620      	mov	r0, r4
    3b7e:	f7ff ff95 	bl	3aac <move_thread_to_end_of_prio_q>
    3b82:	e7dc      	b.n	3b3e <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    3b84:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    3b86:	611a      	str	r2, [r3, #16]
    3b88:	e7dc      	b.n	3b44 <z_time_slice+0x24>
    3b8a:	2200      	movs	r2, #0
    3b8c:	e7fb      	b.n	3b86 <z_time_slice+0x66>
    3b8e:	bf00      	nop
    3b90:	20000458 	.word	0x20000458
    3b94:	20000480 	.word	0x20000480
    3b98:	20000488 	.word	0x20000488
    3b9c:	20000484 	.word	0x20000484
    3ba0:	200000d0 	.word	0x200000d0

00003ba4 <ready_thread>:
{
    3ba4:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    3ba6:	f990 200d 	ldrsb.w	r2, [r0, #13]
    3baa:	7b43      	ldrb	r3, [r0, #13]
    3bac:	2a00      	cmp	r2, #0
    3bae:	db2a      	blt.n	3c06 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    3bb0:	06da      	lsls	r2, r3, #27
    3bb2:	d128      	bne.n	3c06 <ready_thread+0x62>
    3bb4:	6982      	ldr	r2, [r0, #24]
    3bb6:	bb32      	cbnz	r2, 3c06 <ready_thread+0x62>
	return list->head == list;
    3bb8:	4a14      	ldr	r2, [pc, #80]	; (3c0c <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    3bba:	f063 037f 	orn	r3, r3, #127	; 0x7f
    3bbe:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    3bc0:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3bc4:	f102 0520 	add.w	r5, r2, #32
    3bc8:	42ab      	cmp	r3, r5
    3bca:	d017      	beq.n	3bfc <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3bcc:	b1b3      	cbz	r3, 3bfc <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    3bce:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    3bd2:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    3bd6:	428e      	cmp	r6, r1
    3bd8:	d00b      	beq.n	3bf2 <ready_thread+0x4e>
		return b2 - b1;
    3bda:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3bdc:	2900      	cmp	r1, #0
    3bde:	dd08      	ble.n	3bf2 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    3be0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    3be2:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    3be6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    3be8:	6058      	str	r0, [r3, #4]
}
    3bea:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    3bec:	2000      	movs	r0, #0
    3bee:	f7ff bf3d 	b.w	3a6c <update_cache>
	return (node == list->tail) ? NULL : node->next;
    3bf2:	42a3      	cmp	r3, r4
    3bf4:	d002      	beq.n	3bfc <ready_thread+0x58>
    3bf6:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3bf8:	2b00      	cmp	r3, #0
    3bfa:	d1ea      	bne.n	3bd2 <ready_thread+0x2e>
	node->prev = tail;
    3bfc:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    3c00:	6020      	str	r0, [r4, #0]
	list->tail = node;
    3c02:	6250      	str	r0, [r2, #36]	; 0x24
}
    3c04:	e7f1      	b.n	3bea <ready_thread+0x46>
}
    3c06:	bc70      	pop	{r4, r5, r6}
    3c08:	4770      	bx	lr
    3c0a:	bf00      	nop
    3c0c:	20000458 	.word	0x20000458

00003c10 <z_sched_start>:
{
    3c10:	b510      	push	{r4, lr}
	__asm__ volatile(
    3c12:	f04f 0220 	mov.w	r2, #32
    3c16:	f3ef 8411 	mrs	r4, BASEPRI
    3c1a:	f382 8812 	msr	BASEPRI_MAX, r2
    3c1e:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    3c22:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    3c24:	0751      	lsls	r1, r2, #29
    3c26:	d404      	bmi.n	3c32 <z_sched_start+0x22>
	__asm__ volatile(
    3c28:	f384 8811 	msr	BASEPRI, r4
    3c2c:	f3bf 8f6f 	isb	sy
}
    3c30:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    3c32:	f022 0204 	bic.w	r2, r2, #4
    3c36:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    3c38:	f7ff ffb4 	bl	3ba4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    3c3c:	4621      	mov	r1, r4
    3c3e:	4802      	ldr	r0, [pc, #8]	; (3c48 <z_sched_start+0x38>)
}
    3c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    3c44:	f7ff beec 	b.w	3a20 <z_reschedule>
    3c48:	20000b45 	.word	0x20000b45

00003c4c <unready_thread>:
{
    3c4c:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    3c4e:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    3c52:	7b43      	ldrb	r3, [r0, #13]
    3c54:	2a00      	cmp	r2, #0
{
    3c56:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    3c58:	da04      	bge.n	3c64 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3c5a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3c5e:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3c60:	f000 ffac 	bl	4bbc <sys_dlist_remove>
	update_cache(thread == _current);
    3c64:	4b04      	ldr	r3, [pc, #16]	; (3c78 <unready_thread+0x2c>)
    3c66:	6898      	ldr	r0, [r3, #8]
    3c68:	1a43      	subs	r3, r0, r1
    3c6a:	4258      	negs	r0, r3
    3c6c:	4158      	adcs	r0, r3
}
    3c6e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    3c72:	f7ff befb 	b.w	3a6c <update_cache>
    3c76:	bf00      	nop
    3c78:	20000458 	.word	0x20000458

00003c7c <pend>:
{
    3c7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c80:	4606      	mov	r6, r0
    3c82:	4615      	mov	r5, r2
    3c84:	461c      	mov	r4, r3
	__asm__ volatile(
    3c86:	f04f 0320 	mov.w	r3, #32
    3c8a:	f3ef 8711 	mrs	r7, BASEPRI
    3c8e:	f383 8812 	msr	BASEPRI_MAX, r3
    3c92:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    3c96:	f000 fff1 	bl	4c7c <add_to_waitq_locked>
	__asm__ volatile(
    3c9a:	f387 8811 	msr	BASEPRI, r7
    3c9e:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3ca2:	f1b4 3fff 	cmp.w	r4, #4294967295
    3ca6:	bf08      	it	eq
    3ca8:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    3cac:	d008      	beq.n	3cc0 <pend+0x44>
    3cae:	462a      	mov	r2, r5
    3cb0:	4623      	mov	r3, r4
    3cb2:	f106 0018 	add.w	r0, r6, #24
    3cb6:	4903      	ldr	r1, [pc, #12]	; (3cc4 <pend+0x48>)
}
    3cb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    3cbc:	f000 b9d0 	b.w	4060 <z_add_timeout>
    3cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3cc4:	00004c39 	.word	0x00004c39

00003cc8 <z_pend_curr>:
{
    3cc8:	b510      	push	{r4, lr}
	pending_current = _current;
    3cca:	4b07      	ldr	r3, [pc, #28]	; (3ce8 <z_pend_curr+0x20>)
    3ccc:	6898      	ldr	r0, [r3, #8]
    3cce:	4b07      	ldr	r3, [pc, #28]	; (3cec <z_pend_curr+0x24>)
{
    3cd0:	460c      	mov	r4, r1
	pending_current = _current;
    3cd2:	6018      	str	r0, [r3, #0]
{
    3cd4:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    3cd6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    3cda:	f7ff ffcf 	bl	3c7c <pend>
    3cde:	4620      	mov	r0, r4
}
    3ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3ce4:	f7fd baa6 	b.w	1234 <arch_swap>
    3ce8:	20000458 	.word	0x20000458
    3cec:	20000480 	.word	0x20000480

00003cf0 <z_impl_k_thread_suspend>:
{
    3cf0:	b570      	push	{r4, r5, r6, lr}
    3cf2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    3cf4:	3018      	adds	r0, #24
    3cf6:	f001 f803 	bl	4d00 <z_abort_timeout>
	__asm__ volatile(
    3cfa:	f04f 0320 	mov.w	r3, #32
    3cfe:	f3ef 8611 	mrs	r6, BASEPRI
    3d02:	f383 8812 	msr	BASEPRI_MAX, r3
    3d06:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    3d0a:	f994 200d 	ldrsb.w	r2, [r4, #13]
    3d0e:	7b63      	ldrb	r3, [r4, #13]
    3d10:	2a00      	cmp	r2, #0
    3d12:	da05      	bge.n	3d20 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3d14:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3d18:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3d1a:	4620      	mov	r0, r4
    3d1c:	f000 ff4e 	bl	4bbc <sys_dlist_remove>
		update_cache(thread == _current);
    3d20:	4d0b      	ldr	r5, [pc, #44]	; (3d50 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    3d22:	7b63      	ldrb	r3, [r4, #13]
    3d24:	68a8      	ldr	r0, [r5, #8]
    3d26:	f043 0310 	orr.w	r3, r3, #16
    3d2a:	7363      	strb	r3, [r4, #13]
    3d2c:	1b03      	subs	r3, r0, r4
    3d2e:	4258      	negs	r0, r3
    3d30:	4158      	adcs	r0, r3
    3d32:	f7ff fe9b 	bl	3a6c <update_cache>
	__asm__ volatile(
    3d36:	f386 8811 	msr	BASEPRI, r6
    3d3a:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    3d3e:	68ab      	ldr	r3, [r5, #8]
    3d40:	42a3      	cmp	r3, r4
    3d42:	d103      	bne.n	3d4c <z_impl_k_thread_suspend+0x5c>
}
    3d44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    3d48:	f000 bf56 	b.w	4bf8 <z_reschedule_unlocked>
}
    3d4c:	bd70      	pop	{r4, r5, r6, pc}
    3d4e:	bf00      	nop
    3d50:	20000458 	.word	0x20000458

00003d54 <k_sched_unlock>:
{
    3d54:	b510      	push	{r4, lr}
	__asm__ volatile(
    3d56:	f04f 0320 	mov.w	r3, #32
    3d5a:	f3ef 8411 	mrs	r4, BASEPRI
    3d5e:	f383 8812 	msr	BASEPRI_MAX, r3
    3d62:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    3d66:	4b08      	ldr	r3, [pc, #32]	; (3d88 <k_sched_unlock+0x34>)
    3d68:	689a      	ldr	r2, [r3, #8]
    3d6a:	7bd3      	ldrb	r3, [r2, #15]
    3d6c:	3301      	adds	r3, #1
    3d6e:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    3d70:	2000      	movs	r0, #0
    3d72:	f7ff fe7b 	bl	3a6c <update_cache>
	__asm__ volatile(
    3d76:	f384 8811 	msr	BASEPRI, r4
    3d7a:	f3bf 8f6f 	isb	sy
}
    3d7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    3d82:	f000 bf39 	b.w	4bf8 <z_reschedule_unlocked>
    3d86:	bf00      	nop
    3d88:	20000458 	.word	0x20000458

00003d8c <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    3d8c:	4b04      	ldr	r3, [pc, #16]	; (3da0 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    3d8e:	2100      	movs	r1, #0
    3d90:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    3d94:	e9c3 2208 	strd	r2, r2, [r3, #32]
    3d98:	4608      	mov	r0, r1
    3d9a:	f7ff be0f 	b.w	39bc <k_sched_time_slice_set>
    3d9e:	bf00      	nop
    3da0:	20000458 	.word	0x20000458

00003da4 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    3da4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    3da6:	f04f 0320 	mov.w	r3, #32
    3daa:	f3ef 8511 	mrs	r5, BASEPRI
    3dae:	f383 8812 	msr	BASEPRI_MAX, r3
    3db2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    3db6:	491a      	ldr	r1, [pc, #104]	; (3e20 <z_impl_k_yield+0x7c>)
    3db8:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3dba:	7b43      	ldrb	r3, [r0, #13]
    3dbc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    3dc0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3dc2:	f000 fefb 	bl	4bbc <sys_dlist_remove>
	}
	queue_thread(_current);
    3dc6:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    3dc8:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    3dca:	4608      	mov	r0, r1
    3dcc:	f062 027f 	orn	r2, r2, #127	; 0x7f
    3dd0:	735a      	strb	r2, [r3, #13]
    3dd2:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3dd6:	4282      	cmp	r2, r0
    3dd8:	d01c      	beq.n	3e14 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3dda:	b1da      	cbz	r2, 3e14 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    3ddc:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    3dde:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    3de2:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    3de6:	42a6      	cmp	r6, r4
    3de8:	d00f      	beq.n	3e0a <z_impl_k_yield+0x66>
		return b2 - b1;
    3dea:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    3dec:	2c00      	cmp	r4, #0
    3dee:	dd0c      	ble.n	3e0a <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    3df0:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    3df2:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    3df6:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    3df8:	6053      	str	r3, [r2, #4]
	update_cache(1);
    3dfa:	2001      	movs	r0, #1
    3dfc:	f7ff fe36 	bl	3a6c <update_cache>
    3e00:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    3e02:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    3e06:	f7fd ba15 	b.w	1234 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    3e0a:	42ba      	cmp	r2, r7
    3e0c:	d002      	beq.n	3e14 <z_impl_k_yield+0x70>
    3e0e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    3e10:	2a00      	cmp	r2, #0
    3e12:	d1e6      	bne.n	3de2 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    3e14:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    3e16:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    3e1a:	6013      	str	r3, [r2, #0]
	list->tail = node;
    3e1c:	624b      	str	r3, [r1, #36]	; 0x24
}
    3e1e:	e7ec      	b.n	3dfa <z_impl_k_yield+0x56>
    3e20:	20000458 	.word	0x20000458

00003e24 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    3e24:	ea50 0301 	orrs.w	r3, r0, r1
{
    3e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e2c:	4605      	mov	r5, r0
    3e2e:	460e      	mov	r6, r1
	if (ticks == 0) {
    3e30:	d103      	bne.n	3e3a <z_tick_sleep+0x16>
	z_impl_k_yield();
    3e32:	f7ff ffb7 	bl	3da4 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    3e36:	2000      	movs	r0, #0
    3e38:	e033      	b.n	3ea2 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    3e3a:	f06f 0401 	mvn.w	r4, #1
    3e3e:	1a24      	subs	r4, r4, r0
    3e40:	f04f 33ff 	mov.w	r3, #4294967295
    3e44:	eb63 0301 	sbc.w	r3, r3, r1
    3e48:	2c01      	cmp	r4, #1
    3e4a:	f173 0300 	sbcs.w	r3, r3, #0
    3e4e:	da02      	bge.n	3e56 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    3e50:	f000 ff96 	bl	4d80 <sys_clock_tick_get_32>
    3e54:	1944      	adds	r4, r0, r5
    3e56:	f04f 0320 	mov.w	r3, #32
    3e5a:	f3ef 8811 	mrs	r8, BASEPRI
    3e5e:	f383 8812 	msr	BASEPRI_MAX, r3
    3e62:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    3e66:	4f10      	ldr	r7, [pc, #64]	; (3ea8 <z_tick_sleep+0x84>)
    3e68:	4b10      	ldr	r3, [pc, #64]	; (3eac <z_tick_sleep+0x88>)
    3e6a:	68b8      	ldr	r0, [r7, #8]
    3e6c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    3e6e:	f7ff feed 	bl	3c4c <unready_thread>
	z_add_thread_timeout(_current, timeout);
    3e72:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    3e74:	490e      	ldr	r1, [pc, #56]	; (3eb0 <z_tick_sleep+0x8c>)
    3e76:	462a      	mov	r2, r5
    3e78:	4633      	mov	r3, r6
    3e7a:	3018      	adds	r0, #24
    3e7c:	f000 f8f0 	bl	4060 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    3e80:	68ba      	ldr	r2, [r7, #8]
    3e82:	7b53      	ldrb	r3, [r2, #13]
    3e84:	f043 0310 	orr.w	r3, r3, #16
    3e88:	7353      	strb	r3, [r2, #13]
    3e8a:	4640      	mov	r0, r8
    3e8c:	f7fd f9d2 	bl	1234 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    3e90:	f000 ff76 	bl	4d80 <sys_clock_tick_get_32>
    3e94:	1a20      	subs	r0, r4, r0
    3e96:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    3e9a:	2801      	cmp	r0, #1
    3e9c:	f173 0300 	sbcs.w	r3, r3, #0
    3ea0:	dbc9      	blt.n	3e36 <z_tick_sleep+0x12>
}
    3ea2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ea6:	bf00      	nop
    3ea8:	20000458 	.word	0x20000458
    3eac:	20000480 	.word	0x20000480
    3eb0:	00004c39 	.word	0x00004c39

00003eb4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3eb4:	f1b1 3fff 	cmp.w	r1, #4294967295
    3eb8:	bf08      	it	eq
    3eba:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    3ebe:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    3ec0:	d106      	bne.n	3ed0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    3ec2:	4b08      	ldr	r3, [pc, #32]	; (3ee4 <z_impl_k_sleep+0x30>)
    3ec4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    3ec6:	f7ff ff13 	bl	3cf0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    3eca:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    3ece:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    3ed0:	f7ff ffa8 	bl	3e24 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    3ed4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    3ed8:	fb80 0303 	smull	r0, r3, r0, r3
    3edc:	0bc0      	lsrs	r0, r0, #15
    3ede:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    3ee2:	e7f4      	b.n	3ece <z_impl_k_sleep+0x1a>
    3ee4:	20000458 	.word	0x20000458

00003ee8 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    3ee8:	4b01      	ldr	r3, [pc, #4]	; (3ef0 <z_impl_z_current_get+0x8>)
    3eea:	6898      	ldr	r0, [r3, #8]
    3eec:	4770      	bx	lr
    3eee:	bf00      	nop
    3ef0:	20000458 	.word	0x20000458

00003ef4 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    3ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ef8:	4604      	mov	r4, r0
    3efa:	f04f 0320 	mov.w	r3, #32
    3efe:	f3ef 8611 	mrs	r6, BASEPRI
    3f02:	f383 8812 	msr	BASEPRI_MAX, r3
    3f06:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    3f0a:	7b43      	ldrb	r3, [r0, #13]
    3f0c:	071a      	lsls	r2, r3, #28
    3f0e:	d505      	bpl.n	3f1c <z_thread_abort+0x28>
	__asm__ volatile(
    3f10:	f386 8811 	msr	BASEPRI, r6
    3f14:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    3f18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3f1c:	f023 0220 	bic.w	r2, r3, #32
    3f20:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    3f24:	09d2      	lsrs	r2, r2, #7
    3f26:	d120      	bne.n	3f6a <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    3f28:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    3f2a:	68a3      	ldr	r3, [r4, #8]
    3f2c:	b113      	cbz	r3, 3f34 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    3f2e:	4620      	mov	r0, r4
    3f30:	f000 fe4c 	bl	4bcc <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    3f34:	f104 0018 	add.w	r0, r4, #24
    3f38:	f000 fee2 	bl	4d00 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    3f3c:	f104 0758 	add.w	r7, r4, #88	; 0x58
    3f40:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    3f44:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3f46:	42bd      	cmp	r5, r7
    3f48:	d000      	beq.n	3f4c <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    3f4a:	b9b5      	cbnz	r5, 3f7a <z_thread_abort+0x86>
		update_cache(1);
    3f4c:	2001      	movs	r0, #1
    3f4e:	f7ff fd8d 	bl	3a6c <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    3f52:	4b10      	ldr	r3, [pc, #64]	; (3f94 <z_thread_abort+0xa0>)
    3f54:	689b      	ldr	r3, [r3, #8]
    3f56:	42a3      	cmp	r3, r4
    3f58:	d1da      	bne.n	3f10 <z_thread_abort+0x1c>
    3f5a:	f3ef 8305 	mrs	r3, IPSR
    3f5e:	2b00      	cmp	r3, #0
    3f60:	d1d6      	bne.n	3f10 <z_thread_abort+0x1c>
    3f62:	4630      	mov	r0, r6
    3f64:	f7fd f966 	bl	1234 <arch_swap>
	return ret;
    3f68:	e7d2      	b.n	3f10 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    3f6a:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    3f6e:	f043 0308 	orr.w	r3, r3, #8
    3f72:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    3f74:	f000 fe22 	bl	4bbc <sys_dlist_remove>
}
    3f78:	e7d7      	b.n	3f2a <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    3f7a:	4628      	mov	r0, r5
    3f7c:	f000 fe26 	bl	4bcc <unpend_thread_no_timeout>
    3f80:	f105 0018 	add.w	r0, r5, #24
    3f84:	f000 febc 	bl	4d00 <z_abort_timeout>
    3f88:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    3f8c:	4628      	mov	r0, r5
    3f8e:	f7ff fe09 	bl	3ba4 <ready_thread>
    3f92:	e7d7      	b.n	3f44 <z_thread_abort+0x50>
    3f94:	20000458 	.word	0x20000458

00003f98 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    3f98:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    3f9a:	4806      	ldr	r0, [pc, #24]	; (3fb4 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    3f9c:	4a06      	ldr	r2, [pc, #24]	; (3fb8 <z_data_copy+0x20>)
    3f9e:	4907      	ldr	r1, [pc, #28]	; (3fbc <z_data_copy+0x24>)
    3fa0:	1a12      	subs	r2, r2, r0
    3fa2:	f000 fdfc 	bl	4b9e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    3fa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    3faa:	4a05      	ldr	r2, [pc, #20]	; (3fc0 <z_data_copy+0x28>)
    3fac:	4905      	ldr	r1, [pc, #20]	; (3fc4 <z_data_copy+0x2c>)
    3fae:	4806      	ldr	r0, [pc, #24]	; (3fc8 <z_data_copy+0x30>)
    3fb0:	f000 bdf5 	b.w	4b9e <z_early_memcpy>
    3fb4:	20000000 	.word	0x20000000
    3fb8:	200000ac 	.word	0x200000ac
    3fbc:	00005228 	.word	0x00005228
    3fc0:	00000000 	.word	0x00000000
    3fc4:	00005228 	.word	0x00005228
    3fc8:	20000000 	.word	0x20000000

00003fcc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    3fcc:	4b03      	ldr	r3, [pc, #12]	; (3fdc <elapsed+0x10>)
    3fce:	681b      	ldr	r3, [r3, #0]
    3fd0:	b90b      	cbnz	r3, 3fd6 <elapsed+0xa>
    3fd2:	f7fe bb2b 	b.w	262c <sys_clock_elapsed>
}
    3fd6:	2000      	movs	r0, #0
    3fd8:	4770      	bx	lr
    3fda:	bf00      	nop
    3fdc:	2000048c 	.word	0x2000048c

00003fe0 <next_timeout>:
	return list->head == list;
    3fe0:	4b10      	ldr	r3, [pc, #64]	; (4024 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    3fe2:	b510      	push	{r4, lr}
    3fe4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    3fe6:	429c      	cmp	r4, r3
    3fe8:	bf08      	it	eq
    3fea:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    3fec:	f7ff ffee 	bl	3fcc <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    3ff0:	b1a4      	cbz	r4, 401c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    3ff2:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    3ff6:	1a1b      	subs	r3, r3, r0
    3ff8:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    3ffc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    4000:	f170 0200 	sbcs.w	r2, r0, #0
    4004:	da0a      	bge.n	401c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    4006:	2800      	cmp	r0, #0
    4008:	bfac      	ite	ge
    400a:	4618      	movge	r0, r3
    400c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    400e:	4b06      	ldr	r3, [pc, #24]	; (4028 <next_timeout+0x48>)
    4010:	691b      	ldr	r3, [r3, #16]
    4012:	b113      	cbz	r3, 401a <next_timeout+0x3a>
    4014:	4298      	cmp	r0, r3
    4016:	bfa8      	it	ge
    4018:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    401a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    401c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    4020:	e7f5      	b.n	400e <next_timeout+0x2e>
    4022:	bf00      	nop
    4024:	20000098 	.word	0x20000098
    4028:	20000458 	.word	0x20000458

0000402c <remove_timeout>:
{
    402c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    402e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    4030:	b168      	cbz	r0, 404e <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    4032:	4a0a      	ldr	r2, [pc, #40]	; (405c <remove_timeout+0x30>)
    4034:	6852      	ldr	r2, [r2, #4]
    4036:	4290      	cmp	r0, r2
    4038:	d009      	beq.n	404e <remove_timeout+0x22>
	if (next(t) != NULL) {
    403a:	b143      	cbz	r3, 404e <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    403c:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    4040:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    4044:	1912      	adds	r2, r2, r4
    4046:	eb41 0105 	adc.w	r1, r1, r5
    404a:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    404e:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    4050:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4052:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4054:	2300      	movs	r3, #0
	node->prev = NULL;
    4056:	e9c0 3300 	strd	r3, r3, [r0]
}
    405a:	bd30      	pop	{r4, r5, pc}
    405c:	20000098 	.word	0x20000098

00004060 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4060:	f1b3 3fff 	cmp.w	r3, #4294967295
    4064:	bf08      	it	eq
    4066:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    406a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    406c:	4604      	mov	r4, r0
    406e:	461f      	mov	r7, r3
    4070:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    4072:	d067      	beq.n	4144 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    4074:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    4076:	f04f 0320 	mov.w	r3, #32
    407a:	f3ef 8611 	mrs	r6, BASEPRI
    407e:	f383 8812 	msr	BASEPRI_MAX, r3
    4082:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    4086:	f06f 0201 	mvn.w	r2, #1
    408a:	1b53      	subs	r3, r2, r5
    408c:	f04f 3cff 	mov.w	ip, #4294967295
    4090:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    4094:	2b00      	cmp	r3, #0
    4096:	db1b      	blt.n	40d0 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    4098:	4b2b      	ldr	r3, [pc, #172]	; (4148 <z_add_timeout+0xe8>)
    409a:	e9d3 1300 	ldrd	r1, r3, [r3]
    409e:	1a52      	subs	r2, r2, r1
    40a0:	eb6c 0303 	sbc.w	r3, ip, r3
    40a4:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    40a6:	eb63 0307 	sbc.w	r3, r3, r7
    40aa:	2d01      	cmp	r5, #1
    40ac:	f173 0200 	sbcs.w	r2, r3, #0
    40b0:	bfbc      	itt	lt
    40b2:	2501      	movlt	r5, #1
    40b4:	2300      	movlt	r3, #0
    40b6:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    40ba:	4824      	ldr	r0, [pc, #144]	; (414c <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    40bc:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    40c0:	4283      	cmp	r3, r0
    40c2:	d118      	bne.n	40f6 <z_add_timeout+0x96>
	node->prev = tail;
    40c4:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    40c8:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    40cc:	6044      	str	r4, [r0, #4]
}
    40ce:	e026      	b.n	411e <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    40d0:	f7ff ff7c 	bl	3fcc <elapsed>
    40d4:	3501      	adds	r5, #1
    40d6:	f147 0700 	adc.w	r7, r7, #0
    40da:	182d      	adds	r5, r5, r0
    40dc:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    40e0:	e9c4 5704 	strd	r5, r7, [r4, #16]
    40e4:	e7e9      	b.n	40ba <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    40e6:	1a52      	subs	r2, r2, r1
    40e8:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    40ec:	459c      	cmp	ip, r3
    40ee:	e9c4 2504 	strd	r2, r5, [r4, #16]
    40f2:	d0e7      	beq.n	40c4 <z_add_timeout+0x64>
    40f4:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    40f6:	2b00      	cmp	r3, #0
    40f8:	d0e4      	beq.n	40c4 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    40fa:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    40fe:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    4102:	428a      	cmp	r2, r1
    4104:	eb75 0e07 	sbcs.w	lr, r5, r7
    4108:	daed      	bge.n	40e6 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    410a:	1a8a      	subs	r2, r1, r2
    410c:	eb67 0505 	sbc.w	r5, r7, r5
    4110:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    4114:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4116:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    411a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    411c:	605c      	str	r4, [r3, #4]
	return list->head == list;
    411e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4120:	4283      	cmp	r3, r0
    4122:	d00b      	beq.n	413c <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    4124:	429c      	cmp	r4, r3
    4126:	d109      	bne.n	413c <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    4128:	f7ff ff5a 	bl	3fe0 <next_timeout>

			if (next_time == 0 ||
    412c:	b118      	cbz	r0, 4136 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    412e:	4b08      	ldr	r3, [pc, #32]	; (4150 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    4130:	691b      	ldr	r3, [r3, #16]
    4132:	4283      	cmp	r3, r0
    4134:	d002      	beq.n	413c <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    4136:	2100      	movs	r1, #0
    4138:	f7fe fa46 	bl	25c8 <sys_clock_set_timeout>
	__asm__ volatile(
    413c:	f386 8811 	msr	BASEPRI, r6
    4140:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    4144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4146:	bf00      	nop
    4148:	200001d0 	.word	0x200001d0
    414c:	20000098 	.word	0x20000098
    4150:	20000458 	.word	0x20000458

00004154 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    4154:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4158:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    415a:	f7ff fce1 	bl	3b20 <z_time_slice>
	__asm__ volatile(
    415e:	f04f 0320 	mov.w	r3, #32
    4162:	f3ef 8411 	mrs	r4, BASEPRI
    4166:	f383 8812 	msr	BASEPRI_MAX, r3
    416a:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    416e:	4e24      	ldr	r6, [pc, #144]	; (4200 <sys_clock_announce+0xac>)
	return list->head == list;
    4170:	f8df 8090 	ldr.w	r8, [pc, #144]	; 4204 <sys_clock_announce+0xb0>
    4174:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    4176:	4d24      	ldr	r5, [pc, #144]	; (4208 <sys_clock_announce+0xb4>)
    4178:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    417c:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    417e:	4540      	cmp	r0, r8
		curr_tick += dt;
    4180:	e9d5 1e00 	ldrd	r1, lr, [r5]
    4184:	ea4f 77e2 	mov.w	r7, r2, asr #31
    4188:	d00b      	beq.n	41a2 <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    418a:	b150      	cbz	r0, 41a2 <sys_clock_announce+0x4e>
    418c:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    4190:	429a      	cmp	r2, r3
    4192:	eb77 090c 	sbcs.w	r9, r7, ip
    4196:	da16      	bge.n	41c6 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    4198:	1a9b      	subs	r3, r3, r2
    419a:	eb6c 0c07 	sbc.w	ip, ip, r7
    419e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    41a2:	1852      	adds	r2, r2, r1
    41a4:	eb4e 0707 	adc.w	r7, lr, r7
    41a8:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    41ac:	2500      	movs	r5, #0
    41ae:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    41b0:	f7ff ff16 	bl	3fe0 <next_timeout>
    41b4:	4629      	mov	r1, r5
    41b6:	f7fe fa07 	bl	25c8 <sys_clock_set_timeout>
	__asm__ volatile(
    41ba:	f384 8811 	msr	BASEPRI, r4
    41be:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    41c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    41c6:	1859      	adds	r1, r3, r1
    41c8:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    41cc:	1ad3      	subs	r3, r2, r3
    41ce:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    41d0:	2200      	movs	r2, #0
    41d2:	2300      	movs	r3, #0
    41d4:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    41d8:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    41dc:	f7ff ff26 	bl	402c <remove_timeout>
    41e0:	f384 8811 	msr	BASEPRI, r4
    41e4:	f3bf 8f6f 	isb	sy
		t->fn(t);
    41e8:	6883      	ldr	r3, [r0, #8]
    41ea:	4798      	blx	r3
	__asm__ volatile(
    41ec:	f04f 0320 	mov.w	r3, #32
    41f0:	f3ef 8411 	mrs	r4, BASEPRI
    41f4:	f383 8812 	msr	BASEPRI_MAX, r3
    41f8:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    41fc:	e7bc      	b.n	4178 <sys_clock_announce+0x24>
    41fe:	bf00      	nop
    4200:	2000048c 	.word	0x2000048c
    4204:	20000098 	.word	0x20000098
    4208:	200001d0 	.word	0x200001d0

0000420c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    420c:	b510      	push	{r4, lr}
    420e:	f04f 0320 	mov.w	r3, #32
    4212:	f3ef 8411 	mrs	r4, BASEPRI
    4216:	f383 8812 	msr	BASEPRI_MAX, r3
    421a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    421e:	f7fe fa05 	bl	262c <sys_clock_elapsed>
    4222:	4a05      	ldr	r2, [pc, #20]	; (4238 <sys_clock_tick_get+0x2c>)
    4224:	e9d2 3100 	ldrd	r3, r1, [r2]
    4228:	18c0      	adds	r0, r0, r3
    422a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    422e:	f384 8811 	msr	BASEPRI, r4
    4232:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    4236:	bd10      	pop	{r4, pc}
    4238:	200001d0 	.word	0x200001d0

0000423c <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    423c:	4a02      	ldr	r2, [pc, #8]	; (4248 <boot_banner+0xc>)
    423e:	4903      	ldr	r1, [pc, #12]	; (424c <boot_banner+0x10>)
    4240:	4803      	ldr	r0, [pc, #12]	; (4250 <boot_banner+0x14>)
    4242:	f000 b82f 	b.w	42a4 <printk>
    4246:	bf00      	nop
    4248:	00005226 	.word	0x00005226
    424c:	000051f1 	.word	0x000051f1
    4250:	00005200 	.word	0x00005200

00004254 <main>:
#include <logging/log.h>
#include "receiver.h"

LOG_MODULE_REGISTER(main, CONFIG_LOG_DEFAULT_LEVEL);

void main(void) {
    4254:	b500      	push	{lr}
    4256:	b08b      	sub	sp, #44	; 0x2c
	struct esb_payload dummy;
	init_esb();
    4258:	f7fc f8e6 	bl	428 <init_esb>
	int len;
	int x;
	int y;
	for (;;) {
		dummy = get_payload();
    425c:	4668      	mov	r0, sp
    425e:	f7fc f92d 	bl	4bc <get_payload>
	for (;;) {
    4262:	e7fb      	b.n	425c <main+0x8>

00004264 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    4264:	4603      	mov	r3, r0
    4266:	b158      	cbz	r0, 4280 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4268:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    426a:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    426e:	2a01      	cmp	r2, #1
    4270:	d003      	beq.n	427a <sys_notify_validate+0x16>
    4272:	2a03      	cmp	r2, #3
    4274:	d104      	bne.n	4280 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    4276:	6802      	ldr	r2, [r0, #0]
    4278:	b112      	cbz	r2, 4280 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    427a:	2000      	movs	r0, #0
    427c:	6098      	str	r0, [r3, #8]
    427e:	4770      	bx	lr
		return -EINVAL;
    4280:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    4284:	4770      	bx	lr

00004286 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    4286:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    4288:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    428a:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    428e:	2a03      	cmp	r2, #3
    4290:	f04f 0200 	mov.w	r2, #0
{
    4294:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    4296:	bf0c      	ite	eq
    4298:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    429a:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    429c:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    429e:	4770      	bx	lr

000042a0 <arch_printk_char_out>:
}
    42a0:	2000      	movs	r0, #0
    42a2:	4770      	bx	lr

000042a4 <printk>:
 *
 * @param fmt formatted string to output
 */

void printk(const char *fmt, ...)
{
    42a4:	b40f      	push	{r0, r1, r2, r3}
    42a6:	b507      	push	{r0, r1, r2, lr}
    42a8:	a904      	add	r1, sp, #16
    42aa:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    42ae:	9101      	str	r1, [sp, #4]

	vprintk(fmt, ap);
    42b0:	f7fc f922 	bl	4f8 <vprintk>

	va_end(ap);
}
    42b4:	b003      	add	sp, #12
    42b6:	f85d eb04 	ldr.w	lr, [sp], #4
    42ba:	b004      	add	sp, #16
    42bc:	4770      	bx	lr

000042be <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    42be:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    42c0:	f013 0307 	ands.w	r3, r3, #7
    42c4:	d105      	bne.n	42d2 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    42c6:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    42c8:	2b00      	cmp	r3, #0
    42ca:	bf0c      	ite	eq
    42cc:	2000      	moveq	r0, #0
    42ce:	2003      	movne	r0, #3
    42d0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    42d2:	2b02      	cmp	r3, #2
    42d4:	d105      	bne.n	42e2 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    42d6:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    42d8:	2b00      	cmp	r3, #0
    42da:	bf14      	ite	ne
    42dc:	2000      	movne	r0, #0
    42de:	2004      	moveq	r0, #4
    42e0:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    42e2:	2b01      	cmp	r3, #1
    42e4:	d105      	bne.n	42f2 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    42e6:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    42e8:	2b00      	cmp	r3, #0
    42ea:	bf0c      	ite	eq
    42ec:	2000      	moveq	r0, #0
    42ee:	2005      	movne	r0, #5
    42f0:	4770      	bx	lr
	int evt = EVT_NOP;
    42f2:	2000      	movs	r0, #0
}
    42f4:	4770      	bx	lr

000042f6 <notify_one>:
{
    42f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42fa:	460d      	mov	r5, r1
    42fc:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    42fe:	4619      	mov	r1, r3
    4300:	1d28      	adds	r0, r5, #4
{
    4302:	4690      	mov	r8, r2
    4304:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    4306:	f7ff ffbe 	bl	4286 <sys_notify_finalize>
	if (cb) {
    430a:	4604      	mov	r4, r0
    430c:	b138      	cbz	r0, 431e <notify_one+0x28>
		cb(mgr, cli, state, res);
    430e:	4633      	mov	r3, r6
    4310:	4642      	mov	r2, r8
    4312:	4629      	mov	r1, r5
    4314:	4638      	mov	r0, r7
    4316:	46a4      	mov	ip, r4
}
    4318:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    431c:	4760      	bx	ip
}
    431e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00004322 <transition_complete>:
{
    4322:	b410      	push	{r4}
	__asm__ volatile(
    4324:	f04f 0420 	mov.w	r4, #32
    4328:	f3ef 8211 	mrs	r2, BASEPRI
    432c:	f384 8812 	msr	BASEPRI_MAX, r4
    4330:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    4334:	6141      	str	r1, [r0, #20]
}
    4336:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    4338:	2101      	movs	r1, #1
    433a:	f7fc b8eb 	b.w	514 <process_event>

0000433e <validate_args>:
{
    433e:	b510      	push	{r4, lr}
    4340:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    4342:	b140      	cbz	r0, 4356 <validate_args+0x18>
    4344:	b139      	cbz	r1, 4356 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    4346:	1d08      	adds	r0, r1, #4
    4348:	f7ff ff8c 	bl	4264 <sys_notify_validate>
	if ((rv == 0)
    434c:	b928      	cbnz	r0, 435a <validate_args+0x1c>
	    && ((cli->notify.flags
    434e:	68a3      	ldr	r3, [r4, #8]
    4350:	f033 0303 	bics.w	r3, r3, #3
    4354:	d001      	beq.n	435a <validate_args+0x1c>
		rv = -EINVAL;
    4356:	f06f 0015 	mvn.w	r0, #21
}
    435a:	bd10      	pop	{r4, pc}

0000435c <onoff_manager_init>:
{
    435c:	b538      	push	{r3, r4, r5, lr}
    435e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    4360:	4605      	mov	r5, r0
    4362:	b158      	cbz	r0, 437c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    4364:	b151      	cbz	r1, 437c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    4366:	680b      	ldr	r3, [r1, #0]
    4368:	b143      	cbz	r3, 437c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    436a:	684b      	ldr	r3, [r1, #4]
    436c:	b133      	cbz	r3, 437c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    436e:	221c      	movs	r2, #28
    4370:	2100      	movs	r1, #0
    4372:	f000 f8ec 	bl	454e <memset>
    4376:	612c      	str	r4, [r5, #16]
	return 0;
    4378:	2000      	movs	r0, #0
}
    437a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    437c:	f06f 0015 	mvn.w	r0, #21
    4380:	e7fb      	b.n	437a <onoff_manager_init+0x1e>

00004382 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    4382:	b570      	push	{r4, r5, r6, lr}
    4384:	4604      	mov	r4, r0
    4386:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    4388:	f7ff ffd9 	bl	433e <validate_args>

	if (rv < 0) {
    438c:	1e05      	subs	r5, r0, #0
    438e:	db31      	blt.n	43f4 <onoff_request+0x72>
    4390:	f04f 0320 	mov.w	r3, #32
    4394:	f3ef 8111 	mrs	r1, BASEPRI
    4398:	f383 8812 	msr	BASEPRI_MAX, r3
    439c:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    43a0:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    43a2:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    43a4:	f64f 75ff 	movw	r5, #65535	; 0xffff
    43a8:	42ab      	cmp	r3, r5
    43aa:	f000 0207 	and.w	r2, r0, #7
    43ae:	d02e      	beq.n	440e <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    43b0:	2a02      	cmp	r2, #2
    43b2:	d10e      	bne.n	43d2 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    43b4:	3301      	adds	r3, #1
    43b6:	8363      	strh	r3, [r4, #26]
	rv = state;
    43b8:	4615      	mov	r5, r2
		notify = true;
    43ba:	2301      	movs	r3, #1
	__asm__ volatile(
    43bc:	f381 8811 	msr	BASEPRI, r1
    43c0:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    43c4:	b1b3      	cbz	r3, 43f4 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    43c6:	2300      	movs	r3, #0
    43c8:	4631      	mov	r1, r6
    43ca:	4620      	mov	r0, r4
    43cc:	f7ff ff93 	bl	42f6 <notify_one>
    43d0:	e010      	b.n	43f4 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    43d2:	0783      	lsls	r3, r0, #30
    43d4:	d001      	beq.n	43da <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    43d6:	2a06      	cmp	r2, #6
    43d8:	d10e      	bne.n	43f8 <onoff_request+0x76>
	parent->next = child;
    43da:	2300      	movs	r3, #0
    43dc:	6033      	str	r3, [r6, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    43de:	6863      	ldr	r3, [r4, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    43e0:	b993      	cbnz	r3, 4408 <onoff_request+0x86>
	list->head = node;
    43e2:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    43e6:	4615      	mov	r5, r2
    43e8:	b962      	cbnz	r2, 4404 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    43ea:	460a      	mov	r2, r1
    43ec:	4620      	mov	r0, r4
    43ee:	2102      	movs	r1, #2
    43f0:	f7fc f890 	bl	514 <process_event>
		}
	}

	return rv;
}
    43f4:	4628      	mov	r0, r5
    43f6:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    43f8:	2a05      	cmp	r2, #5
    43fa:	bf0c      	ite	eq
    43fc:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    4400:	f06f 0504 	mvnne.w	r5, #4
    4404:	2300      	movs	r3, #0
    4406:	e7d9      	b.n	43bc <onoff_request+0x3a>
	parent->next = child;
    4408:	601e      	str	r6, [r3, #0]
	list->tail = node;
    440a:	6066      	str	r6, [r4, #4]
}
    440c:	e7eb      	b.n	43e6 <onoff_request+0x64>
		rv = -EAGAIN;
    440e:	f06f 050a 	mvn.w	r5, #10
    4412:	e7f7      	b.n	4404 <onoff_request+0x82>

00004414 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    4414:	4604      	mov	r4, r0
    4416:	b508      	push	{r3, lr}
    4418:	4608      	mov	r0, r1
    441a:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    441c:	461a      	mov	r2, r3
    441e:	47a0      	blx	r4
	return z_impl_z_current_get();
    4420:	f7ff fd62 	bl	3ee8 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    4424:	f7fd f940 	bl	16a8 <z_impl_k_thread_abort>

00004428 <encode_uint>:
{
    4428:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    442c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    442e:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    4430:	2b6f      	cmp	r3, #111	; 0x6f
{
    4432:	4680      	mov	r8, r0
    4434:	460f      	mov	r7, r1
    4436:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    4438:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    443c:	d029      	beq.n	4492 <encode_uint+0x6a>
    443e:	d824      	bhi.n	448a <encode_uint+0x62>
		return 16;
    4440:	2b58      	cmp	r3, #88	; 0x58
    4442:	bf14      	ite	ne
    4444:	260a      	movne	r6, #10
    4446:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    4448:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    444c:	4632      	mov	r2, r6
    444e:	2300      	movs	r3, #0
    4450:	4640      	mov	r0, r8
    4452:	4639      	mov	r1, r7
    4454:	f7fb fe44 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4458:	2a09      	cmp	r2, #9
    445a:	b2d4      	uxtb	r4, r2
    445c:	d81e      	bhi.n	449c <encode_uint+0x74>
    445e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    4460:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4462:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    4464:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    4468:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    446c:	d301      	bcc.n	4472 <encode_uint+0x4a>
    446e:	45d1      	cmp	r9, sl
    4470:	d811      	bhi.n	4496 <encode_uint+0x6e>
	if (conv->flag_hash) {
    4472:	782b      	ldrb	r3, [r5, #0]
    4474:	069b      	lsls	r3, r3, #26
    4476:	d505      	bpl.n	4484 <encode_uint+0x5c>
		if (radix == 8) {
    4478:	2e08      	cmp	r6, #8
    447a:	d115      	bne.n	44a8 <encode_uint+0x80>
			conv->altform_0 = true;
    447c:	78ab      	ldrb	r3, [r5, #2]
    447e:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    4482:	70ab      	strb	r3, [r5, #2]
}
    4484:	4648      	mov	r0, r9
    4486:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    448a:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    448e:	2b70      	cmp	r3, #112	; 0x70
    4490:	e7d7      	b.n	4442 <encode_uint+0x1a>
	switch (specifier) {
    4492:	2608      	movs	r6, #8
    4494:	e7d8      	b.n	4448 <encode_uint+0x20>
		value /= radix;
    4496:	4680      	mov	r8, r0
    4498:	460f      	mov	r7, r1
    449a:	e7d7      	b.n	444c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    449c:	f1bb 0f19 	cmp.w	fp, #25
    44a0:	bf94      	ite	ls
    44a2:	3437      	addls	r4, #55	; 0x37
    44a4:	3457      	addhi	r4, #87	; 0x57
    44a6:	e7db      	b.n	4460 <encode_uint+0x38>
		} else if (radix == 16) {
    44a8:	2e10      	cmp	r6, #16
    44aa:	d1eb      	bne.n	4484 <encode_uint+0x5c>
			conv->altform_0c = true;
    44ac:	78ab      	ldrb	r3, [r5, #2]
    44ae:	f043 0310 	orr.w	r3, r3, #16
    44b2:	e7e6      	b.n	4482 <encode_uint+0x5a>

000044b4 <outs>:
{
    44b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    44b8:	4607      	mov	r7, r0
    44ba:	4688      	mov	r8, r1
    44bc:	4615      	mov	r5, r2
    44be:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    44c0:	4614      	mov	r4, r2
    44c2:	42b4      	cmp	r4, r6
    44c4:	eba4 0005 	sub.w	r0, r4, r5
    44c8:	d302      	bcc.n	44d0 <outs+0x1c>
    44ca:	b93e      	cbnz	r6, 44dc <outs+0x28>
    44cc:	7823      	ldrb	r3, [r4, #0]
    44ce:	b12b      	cbz	r3, 44dc <outs+0x28>
		int rc = out((int)*sp++, ctx);
    44d0:	f814 0b01 	ldrb.w	r0, [r4], #1
    44d4:	4641      	mov	r1, r8
    44d6:	47b8      	blx	r7
		if (rc < 0) {
    44d8:	2800      	cmp	r0, #0
    44da:	daf2      	bge.n	44c2 <outs+0xe>
}
    44dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000044e0 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    44e0:	4770      	bx	lr

000044e2 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    44e2:	f000 bb3f 	b.w	4b64 <z_fatal_error>

000044e6 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    44e6:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    44e8:	6800      	ldr	r0, [r0, #0]
    44ea:	f000 bb3b 	b.w	4b64 <z_fatal_error>

000044ee <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    44ee:	2100      	movs	r1, #0
    44f0:	2001      	movs	r0, #1
    44f2:	f7ff bff6 	b.w	44e2 <z_arm_fatal_error>

000044f6 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    44f6:	b508      	push	{r3, lr}
	handler();
    44f8:	f7fc fe82 	bl	1200 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    44fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    4500:	f7fc bf54 	b.w	13ac <z_arm_exc_exit>

00004504 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    4504:	3901      	subs	r1, #1
    4506:	4603      	mov	r3, r0
    4508:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    450c:	b90a      	cbnz	r2, 4512 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    450e:	701a      	strb	r2, [r3, #0]

	return dest;
}
    4510:	4770      	bx	lr
		*d = *s;
    4512:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    4516:	e7f7      	b.n	4508 <strcpy+0x4>

00004518 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    4518:	4603      	mov	r3, r0
	size_t n = 0;
    451a:	2000      	movs	r0, #0

	while (*s != '\0') {
    451c:	5c1a      	ldrb	r2, [r3, r0]
    451e:	b902      	cbnz	r2, 4522 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    4520:	4770      	bx	lr
		n++;
    4522:	3001      	adds	r0, #1
    4524:	e7fa      	b.n	451c <strlen+0x4>

00004526 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    4526:	4603      	mov	r3, r0
	size_t n = 0;
    4528:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    452a:	5c1a      	ldrb	r2, [r3, r0]
    452c:	b10a      	cbz	r2, 4532 <strnlen+0xc>
    452e:	4288      	cmp	r0, r1
    4530:	d100      	bne.n	4534 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    4532:	4770      	bx	lr
		n++;
    4534:	3001      	adds	r0, #1
    4536:	e7f8      	b.n	452a <strnlen+0x4>

00004538 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    4538:	b510      	push	{r4, lr}
    453a:	1e43      	subs	r3, r0, #1
    453c:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    453e:	4291      	cmp	r1, r2
    4540:	d100      	bne.n	4544 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    4542:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    4544:	f811 4b01 	ldrb.w	r4, [r1], #1
    4548:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    454c:	e7f7      	b.n	453e <memcpy+0x6>

0000454e <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    454e:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    4550:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    4552:	4603      	mov	r3, r0
	while (n > 0) {
    4554:	4293      	cmp	r3, r2
    4556:	d100      	bne.n	455a <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    4558:	4770      	bx	lr
		*(d_byte++) = c_byte;
    455a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    455e:	e7f9      	b.n	4554 <memset+0x6>

00004560 <_stdout_hook_default>:
}
    4560:	f04f 30ff 	mov.w	r0, #4294967295
    4564:	4770      	bx	lr

00004566 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    4566:	f04f 0220 	mov.w	r2, #32
    456a:	f3ef 8311 	mrs	r3, BASEPRI
    456e:	f382 8812 	msr	BASEPRI_MAX, r2
    4572:	f3bf 8f6f 	isb	sy
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    4576:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    457a:	2101      	movs	r1, #1
    457c:	f8c2 1578 	str.w	r1, [r2, #1400]	; 0x578
	__asm__ volatile(
    4580:	f383 8811 	msr	BASEPRI, r3
    4584:	f3bf 8f6f 	isb	sy
}
    4588:	2000      	movs	r0, #0
    458a:	4770      	bx	lr

0000458c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    458c:	2806      	cmp	r0, #6
    458e:	d108      	bne.n	45a2 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    4590:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4594:	2201      	movs	r2, #1
    4596:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    459a:	f3bf 8f4f 	dsb	sy
        __WFE();
    459e:	bf20      	wfe
    while (true)
    45a0:	e7fd      	b.n	459e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    45a2:	4770      	bx	lr

000045a4 <pm_state_exit_post_ops>:
    45a4:	2300      	movs	r3, #0
    45a6:	f383 8811 	msr	BASEPRI, r3
    45aa:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    45ae:	4770      	bx	lr

000045b0 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    45b0:	6903      	ldr	r3, [r0, #16]
    45b2:	b2c9      	uxtb	r1, r1
    45b4:	220c      	movs	r2, #12
    45b6:	fb01 3302 	mla	r3, r1, r2, r3
    45ba:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    45bc:	f000 0007 	and.w	r0, r0, #7
    45c0:	4770      	bx	lr

000045c2 <set_on_state>:
	__asm__ volatile(
    45c2:	f04f 0320 	mov.w	r3, #32
    45c6:	f3ef 8211 	mrs	r2, BASEPRI
    45ca:	f383 8812 	msr	BASEPRI_MAX, r3
    45ce:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    45d2:	6803      	ldr	r3, [r0, #0]
    45d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    45d8:	f043 0302 	orr.w	r3, r3, #2
    45dc:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    45de:	f382 8811 	msr	BASEPRI, r2
    45e2:	f3bf 8f6f 	isb	sy
}
    45e6:	4770      	bx	lr

000045e8 <stop>:
{
    45e8:	4603      	mov	r3, r0
    45ea:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    45ec:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    45ee:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    45f0:	f04f 0420 	mov.w	r4, #32
    45f4:	f3ef 8611 	mrs	r6, BASEPRI
    45f8:	f384 8812 	msr	BASEPRI_MAX, r4
    45fc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    4600:	250c      	movs	r5, #12
    4602:	fb05 0401 	mla	r4, r5, r1, r0
    4606:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    4608:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    460c:	d001      	beq.n	4612 <stop+0x2a>
    460e:	42a2      	cmp	r2, r4
    4610:	d110      	bne.n	4634 <stop+0x4c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    4612:	fb05 0001 	mla	r0, r5, r1, r0
    4616:	2201      	movs	r2, #1
    4618:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    461a:	2000      	movs	r0, #0
	__asm__ volatile(
    461c:	f386 8811 	msr	BASEPRI, r6
    4620:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    4624:	b928      	cbnz	r0, 4632 <stop+0x4a>
	get_sub_config(dev, type)->stop();
    4626:	685b      	ldr	r3, [r3, #4]
    4628:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
    462c:	684b      	ldr	r3, [r1, #4]
    462e:	4798      	blx	r3
	return 0;
    4630:	2000      	movs	r0, #0
}
    4632:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    4634:	f04f 30ff 	mov.w	r0, #4294967295
    4638:	e7f0      	b.n	461c <stop+0x34>

0000463a <api_stop>:
	return stop(dev, subsys, CTX_API);
    463a:	2280      	movs	r2, #128	; 0x80
    463c:	f7ff bfd4 	b.w	45e8 <stop>

00004640 <async_start>:
{
    4640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4642:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    4644:	6904      	ldr	r4, [r0, #16]
{
    4646:	4605      	mov	r5, r0
    4648:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    464a:	f04f 0020 	mov.w	r0, #32
    464e:	f3ef 8c11 	mrs	ip, BASEPRI
    4652:	f380 8812 	msr	BASEPRI_MAX, r0
    4656:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    465a:	260c      	movs	r6, #12
    465c:	fb06 4601 	mla	r6, r6, r1, r4
    4660:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    4662:	f000 0e07 	and.w	lr, r0, #7
    4666:	f1be 0f01 	cmp.w	lr, #1
    466a:	d111      	bne.n	4690 <async_start+0x50>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    466c:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    466e:	2600      	movs	r6, #0
	__asm__ volatile(
    4670:	f38c 8811 	msr	BASEPRI, ip
    4674:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    4678:	b946      	cbnz	r6, 468c <async_start+0x4c>
	subdata->cb = cb;
    467a:	200c      	movs	r0, #12
    467c:	fb00 4401 	mla	r4, r0, r1, r4
	subdata->user_data = user_data;
    4680:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    4684:	686b      	ldr	r3, [r5, #4]
    4686:	f853 3031 	ldr.w	r3, [r3, r1, lsl #3]
    468a:	4798      	blx	r3
}
    468c:	4630      	mov	r0, r6
    468e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    4690:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    4694:	4287      	cmp	r7, r0
    4696:	bf14      	ite	ne
    4698:	f04f 36ff 	movne.w	r6, #4294967295
    469c:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    46a0:	e7e6      	b.n	4670 <async_start+0x30>

000046a2 <api_start>:
{
    46a2:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    46a4:	2480      	movs	r4, #128	; 0x80
    46a6:	9400      	str	r4, [sp, #0]
    46a8:	f7ff ffca 	bl	4640 <async_start>
}
    46ac:	b002      	add	sp, #8
    46ae:	bd10      	pop	{r4, pc}

000046b0 <onoff_started_callback>:
	return &data->mgr[type];
    46b0:	6900      	ldr	r0, [r0, #16]
{
    46b2:	b410      	push	{r4}
	return &data->mgr[type];
    46b4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    46b6:	241c      	movs	r4, #28
    46b8:	fb03 0004 	mla	r0, r3, r4, r0
    46bc:	2100      	movs	r1, #0
}
    46be:	bc10      	pop	{r4}
	notify(mgr, 0);
    46c0:	4710      	bx	r2

000046c2 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    46c2:	2000      	movs	r0, #0
    46c4:	f000 b9ef 	b.w	4aa6 <nrfx_clock_start>

000046c8 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    46c8:	2000      	movs	r0, #0
    46ca:	f000 ba29 	b.w	4b20 <nrfx_clock_stop>

000046ce <blocking_start_callback>:
{
    46ce:	4610      	mov	r0, r2
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    46d0:	f7ff b918 	b.w	3904 <z_impl_k_sem_give>

000046d4 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    46d4:	6843      	ldr	r3, [r0, #4]
    46d6:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    46d8:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    46dc:	600b      	str	r3, [r1, #0]
}
    46de:	2000      	movs	r0, #0
    46e0:	4770      	bx	lr

000046e2 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    46e2:	6843      	ldr	r3, [r0, #4]
    46e4:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    46e6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    46ea:	4042      	eors	r2, r0
    46ec:	400a      	ands	r2, r1
    46ee:	4042      	eors	r2, r0
    p_reg->OUT = value;
    46f0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    46f4:	2000      	movs	r0, #0
    46f6:	4770      	bx	lr

000046f8 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    46f8:	6843      	ldr	r3, [r0, #4]
    46fa:	685b      	ldr	r3, [r3, #4]
}
    46fc:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    46fe:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    4702:	4770      	bx	lr

00004704 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4704:	6843      	ldr	r3, [r0, #4]
    4706:	685b      	ldr	r3, [r3, #4]
}
    4708:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    470a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    470e:	4770      	bx	lr

00004710 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    4710:	6843      	ldr	r3, [r0, #4]
    4712:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    4714:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    4718:	404b      	eors	r3, r1
    p_reg->OUT = value;
    471a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    471e:	2000      	movs	r0, #0
    4720:	4770      	bx	lr

00004722 <gpio_nrfx_manage_callback>:
	return port->data;
    4722:	6903      	ldr	r3, [r0, #16]
	return list->head;
    4724:	6858      	ldr	r0, [r3, #4]
{
    4726:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    4728:	b158      	cbz	r0, 4742 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    472a:	2400      	movs	r4, #0
    472c:	4281      	cmp	r1, r0
    472e:	d112      	bne.n	4756 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    4730:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    4732:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    4734:	b954      	cbnz	r4, 474c <gpio_nrfx_manage_callback+0x2a>
    4736:	428d      	cmp	r5, r1
	list->head = node;
    4738:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    473a:	d100      	bne.n	473e <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    473c:	6098      	str	r0, [r3, #8]
	parent->next = child;
    473e:	2000      	movs	r0, #0
    4740:	6008      	str	r0, [r1, #0]
	if (set) {
    4742:	b96a      	cbnz	r2, 4760 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    4744:	2000      	movs	r0, #0
}
    4746:	bd30      	pop	{r4, r5, pc}
    4748:	4628      	mov	r0, r5
    474a:	e7ef      	b.n	472c <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    474c:	428d      	cmp	r5, r1
	parent->next = child;
    474e:	6020      	str	r0, [r4, #0]
	list->tail = node;
    4750:	bf08      	it	eq
    4752:	609c      	streq	r4, [r3, #8]
}
    4754:	e7f3      	b.n	473e <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    4756:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    4758:	4604      	mov	r4, r0
    475a:	2d00      	cmp	r5, #0
    475c:	d1f4      	bne.n	4748 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    475e:	b13a      	cbz	r2, 4770 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    4760:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    4762:	685a      	ldr	r2, [r3, #4]
    4764:	600a      	str	r2, [r1, #0]
	list->head = node;
    4766:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    4768:	2800      	cmp	r0, #0
    476a:	d1eb      	bne.n	4744 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    476c:	6099      	str	r1, [r3, #8]
}
    476e:	e7ea      	b.n	4746 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    4770:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    4774:	e7e7      	b.n	4746 <gpio_nrfx_manage_callback+0x24>

00004776 <uarte_nrfx_config_get>:
	*cfg = data->uart_config;
    4776:	6902      	ldr	r2, [r0, #16]
{
    4778:	460b      	mov	r3, r1
	*cfg = data->uart_config;
    477a:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    477e:	e883 0003 	stmia.w	r3, {r0, r1}
}
    4782:	2000      	movs	r0, #0
    4784:	4770      	bx	lr

00004786 <uarte_nrfx_err_check>:
	return config->uarte_regs;
    4786:	6843      	ldr	r3, [r0, #4]
    4788:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    478a:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    478e:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    4792:	4770      	bx	lr

00004794 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    4794:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = dev->data;
    4796:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    4798:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    479a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    479e:	b148      	cbz	r0, 47b4 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    47a0:	7c52      	ldrb	r2, [r2, #17]
    47a2:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    47a4:	2000      	movs	r0, #0
    47a6:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    47aa:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    47ae:	2201      	movs	r2, #1
    47b0:	601a      	str	r2, [r3, #0]
	return 0;
    47b2:	4770      	bx	lr
		return -1;
    47b4:	f04f 30ff 	mov.w	r0, #4294967295
}
    47b8:	4770      	bx	lr

000047ba <is_tx_ready.isra.0>:
	return config->uarte_regs;
    47ba:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
    47bc:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    47be:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    47c2:	b940      	cbnz	r0, 47d6 <is_tx_ready.isra.0+0x1c>
	bool ppi_endtx = config->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    47c4:	685b      	ldr	r3, [r3, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    47c6:	079b      	lsls	r3, r3, #30
    47c8:	d406      	bmi.n	47d8 <is_tx_ready.isra.0+0x1e>
    47ca:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
    47ce:	3800      	subs	r0, #0
    47d0:	bf18      	it	ne
    47d2:	2001      	movne	r0, #1
    47d4:	4770      	bx	lr
    47d6:	2001      	movs	r0, #1
}
    47d8:	4770      	bx	lr

000047da <uarte_nrfx_isr_int>:
	const struct uarte_nrfx_config *config = dev->config;
    47da:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    47dc:	6813      	ldr	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    47de:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    47e2:	05c9      	lsls	r1, r1, #23
    47e4:	d518      	bpl.n	4818 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    47e6:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    47ea:	b1a9      	cbz	r1, 4818 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    47ec:	f04f 0020 	mov.w	r0, #32
    47f0:	f3ef 8111 	mrs	r1, BASEPRI
    47f4:	f380 8812 	msr	BASEPRI_MAX, r0
    47f8:	f3bf 8f6f 	isb	sy
    47fc:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    4800:	b130      	cbz	r0, 4810 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4802:	2000      	movs	r0, #0
    4804:	f8c3 0120 	str.w	r0, [r3, #288]	; 0x120
    4808:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    480c:	2001      	movs	r0, #1
    480e:	60d8      	str	r0, [r3, #12]
	__asm__ volatile(
    4810:	f381 8811 	msr	BASEPRI, r1
    4814:	f3bf 8f6f 	isb	sy
	if (config->flags & UARTE_CFG_FLAG_LOW_POWER) {
    4818:	6852      	ldr	r2, [r2, #4]
    481a:	06d2      	lsls	r2, r2, #27
    481c:	d515      	bpl.n	484a <uarte_nrfx_isr_int+0x70>
	__asm__ volatile(
    481e:	f04f 0120 	mov.w	r1, #32
    4822:	f3ef 8211 	mrs	r2, BASEPRI
    4826:	f381 8812 	msr	BASEPRI_MAX, r1
    482a:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    482e:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    4832:	b111      	cbz	r1, 483a <uarte_nrfx_isr_int+0x60>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4834:	2100      	movs	r1, #0
    4836:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    483a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    483e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    4842:	f382 8811 	msr	BASEPRI, r2
    4846:	f3bf 8f6f 	isb	sy
}
    484a:	4770      	bx	lr

0000484c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    484c:	4770      	bx	lr

0000484e <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    484e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    4850:	6843      	ldr	r3, [r0, #4]
    4852:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    4854:	7a03      	ldrb	r3, [r0, #8]
    4856:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    485a:	3b01      	subs	r3, #1
    485c:	00db      	lsls	r3, r3, #3
    485e:	6845      	ldr	r5, [r0, #4]
    4860:	6814      	ldr	r4, [r2, #0]
    4862:	441d      	add	r5, r3
    4864:	42ac      	cmp	r4, r5
    4866:	d902      	bls.n	486e <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    4868:	f06f 0001 	mvn.w	r0, #1
}
    486c:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    486e:	7965      	ldrb	r5, [r4, #5]
    4870:	428d      	cmp	r5, r1
    4872:	d002      	beq.n	487a <pinctrl_lookup_state+0x2c>
		(*state)++;
    4874:	3408      	adds	r4, #8
    4876:	6014      	str	r4, [r2, #0]
    4878:	e7f1      	b.n	485e <pinctrl_lookup_state+0x10>
			return 0;
    487a:	2000      	movs	r0, #0
    487c:	e7f6      	b.n	486c <pinctrl_lookup_state+0x1e>

0000487e <nrf_pin_configure.constprop.0>:
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    487e:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    4882:	2b00      	cmp	r3, #0
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
    4884:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
    4886:	f000 031f 	and.w	r3, r0, #31
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    488a:	bf08      	it	eq
    488c:	4614      	moveq	r4, r2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    488e:	f3c0 1281 	ubfx	r2, r0, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    4892:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
    4896:	bf18      	it	ne
    4898:	2100      	movne	r1, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    489a:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
    489e:	ea42 0201 	orr.w	r2, r2, r1
    48a2:	bf18      	it	ne
    48a4:	2401      	movne	r4, #1
    reg->PIN_CNF[pin_number] = cnf;
    48a6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    48aa:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    48ae:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    48b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    48b6:	bd10      	pop	{r4, pc}

000048b8 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    48b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    48bc:	4614      	mov	r4, r2
    48be:	4680      	mov	r8, r0
    48c0:	eb00 0781 	add.w	r7, r0, r1, lsl #2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    48c4:	2501      	movs	r5, #1
    p_reg->OUTCLR = clr_mask;
    48c6:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    48ca:	45b8      	cmp	r8, r7
    48cc:	d102      	bne.n	48d4 <pinctrl_configure_pins+0x1c>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    48ce:	2000      	movs	r0, #0
}
    48d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    48d4:	f8d8 3000 	ldr.w	r3, [r8]
		switch (NRF_GET_FUN(pins[i])) {
    48d8:	0c1a      	lsrs	r2, r3, #16
    48da:	2a0c      	cmp	r2, #12
    48dc:	d853      	bhi.n	4986 <pinctrl_configure_pins+0xce>
    48de:	e8df f002 	tbb	[pc, r2]
    48e2:	1607      	.short	0x1607
    48e4:	3621431c 	.word	0x3621431c
    48e8:	52525243 	.word	0x52525243
    48ec:	4852      	.short	0x4852
    48ee:	4d          	.byte	0x4d
    48ef:	00          	.byte	0x00
			NRF_PSEL_UART(reg, TXD) = NRF_GET_PIN(pins[i]);
    48f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    48f4:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    48f8:	f8d8 3000 	ldr.w	r3, [r8]
    48fc:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4900:	fa05 f303 	lsl.w	r3, r5, r3
    p_reg->OUTSET = set_mask;
    4904:	f8c6 3508 	str.w	r3, [r6, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    4908:	2201      	movs	r2, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    490a:	4611      	mov	r1, r2
    490c:	e018      	b.n	4940 <pinctrl_configure_pins+0x88>
			NRF_PSEL_UART(reg, RXD) = NRF_GET_PIN(pins[i]);
    490e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4912:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4916:	2200      	movs	r2, #0
    4918:	e7f7      	b.n	490a <pinctrl_configure_pins+0x52>
			NRF_PSEL_UART(reg, RTS) = NRF_GET_PIN(pins[i]);
    491a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    491e:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    4922:	e7e9      	b.n	48f8 <pinctrl_configure_pins+0x40>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    4924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4928:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    492c:	f8d8 3000 	ldr.w	r3, [r8]
    4930:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    4934:	fa05 f303 	lsl.w	r3, r5, r3
    p_reg->OUTCLR = clr_mask;
    4938:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    493c:	2200      	movs	r2, #0
    493e:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4940:	f8d8 0000 	ldr.w	r0, [r8]
    4944:	f7ff ff9b 	bl	487e <nrf_pin_configure.constprop.0>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    4948:	f108 0804 	add.w	r8, r8, #4
    494c:	e7bd      	b.n	48ca <pinctrl_configure_pins+0x12>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    494e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4952:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    4956:	f8d8 3000 	ldr.w	r3, [r8]
    495a:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    495e:	fa05 f303 	lsl.w	r3, r5, r3
    p_reg->OUTCLR = clr_mask;
    4962:	f8c6 350c 	str.w	r3, [r6, #1292]	; 0x50c
    4966:	e7cf      	b.n	4908 <pinctrl_configure_pins+0x50>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    4968:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    496c:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    4970:	e7d1      	b.n	4916 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_TWIM(reg, SCL) = NRF_GET_PIN(pins[i]);
    4972:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4976:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    497a:	e7cc      	b.n	4916 <pinctrl_configure_pins+0x5e>
			NRF_PSEL_TWIM(reg, SDA) = NRF_GET_PIN(pins[i]);
    497c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4980:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    4984:	e7c7      	b.n	4916 <pinctrl_configure_pins+0x5e>
		switch (NRF_GET_FUN(pins[i])) {
    4986:	f06f 0085 	mvn.w	r0, #133	; 0x85
    498a:	e7a1      	b.n	48d0 <pinctrl_configure_pins+0x18>

0000498c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    498c:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    498e:	2000      	movs	r0, #0
    4990:	f7fc ff6c 	bl	186c <sys_arch_reboot>

00004994 <bytewise_bit_swap>:
	uint32_t inp = (*(uint32_t *)input);
    4994:	6803      	ldr	r3, [r0, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    4996:	fa93 f3a3 	rbit	r3, r3
	return sys_cpu_to_be32((uint32_t)__RBIT(inp));
    499a:	0618      	lsls	r0, r3, #24
    499c:	0a1a      	lsrs	r2, r3, #8
    499e:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
    49a2:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    49a6:	021b      	lsls	r3, r3, #8
    49a8:	4310      	orrs	r0, r2
    49aa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
}
    49ae:	4318      	orrs	r0, r3
    49b0:	4770      	bx	lr

000049b2 <ESB_SYS_TIMER_IRQHandler>:
ISR_DIRECT_DECLARE(ESB_SYS_TIMER_IRQHandler)
    49b2:	4668      	mov	r0, sp
    49b4:	f020 0107 	bic.w	r1, r0, #7
    49b8:	468d      	mov	sp, r1
    49ba:	b501      	push	{r0, lr}
	ISR_DIRECT_PM();
    49bc:	f7fc fc12 	bl	11e4 <_arch_isr_direct_pm>
    49c0:	f7fc fcf4 	bl	13ac <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_SYS_TIMER_IRQHandler)
    49c4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    49c8:	4685      	mov	sp, r0
    49ca:	4770      	bx	lr

000049cc <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    49cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    49d0:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
            if (var1 == 0x0D)
    49d4:	280d      	cmp	r0, #13
    49d6:	d004      	beq.n	49e2 <nrf52_errata_136+0x16>
            if (var1 == 0x10)
    49d8:	f1a0 0310 	sub.w	r3, r0, #16
    49dc:	4258      	negs	r0, r3
    49de:	4158      	adcs	r0, r3
    49e0:	4770      	bx	lr
                        return true;
    49e2:	2001      	movs	r0, #1
}
    49e4:	4770      	bx	lr

000049e6 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    49e6:	4700      	bx	r0

000049e8 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    49e8:	f000 b9ce 	b.w	4d88 <z_impl_k_busy_wait>

000049ec <nrfx_flag32_is_allocated>:
    return (mask & NRFX_BIT(bitpos)) ? false : true;
    49ec:	40c8      	lsrs	r0, r1
    49ee:	43c0      	mvns	r0, r0
}
    49f0:	f000 0001 	and.w	r0, r0, #1
    49f4:	4770      	bx	lr

000049f6 <clock_stop>:
{
    49f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    49f8:	4604      	mov	r4, r0
    49fa:	b118      	cbz	r0, 4a04 <clock_stop+0xe>
    49fc:	2801      	cmp	r0, #1
    49fe:	d024      	beq.n	4a4a <clock_stop+0x54>
}
    4a00:	b003      	add	sp, #12
    4a02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    4a04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a08:	2202      	movs	r2, #2
    4a0a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a0e:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    4a12:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a16:	2201      	movs	r2, #1
    4a18:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4a1a:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4a1c:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    4a1e:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    4a22:	bf14      	ite	ne
    4a24:	2500      	movne	r5, #0
    4a26:	f10d 0507 	addeq.w	r5, sp, #7
    4a2a:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4a2e:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    4a32:	b1ac      	cbz	r4, 4a60 <clock_stop+0x6a>
    4a34:	2c01      	cmp	r4, #1
    4a36:	d1e3      	bne.n	4a00 <clock_stop+0xa>
            if (p_clk_src != NULL)
    4a38:	b125      	cbz	r5, 4a44 <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4a3a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4a3e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4a42:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4a44:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    4a48:	e012      	b.n	4a70 <clock_stop+0x7a>
    p_reg->INTENCLR = mask;
    4a4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a4e:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    4a50:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a54:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4a58:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a5c:	6058      	str	r0, [r3, #4]
}
    4a5e:	e7dc      	b.n	4a1a <clock_stop+0x24>
            if (p_clk_src != NULL)
    4a60:	b125      	cbz	r5, 4a6c <clock_stop+0x76>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4a62:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4a66:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    4a6a:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4a6c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    4a70:	03db      	lsls	r3, r3, #15
    4a72:	d5c5      	bpl.n	4a00 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    4a74:	b92d      	cbnz	r5, 4a82 <clock_stop+0x8c>
    4a76:	2001      	movs	r0, #1
    4a78:	f7ff ffb6 	bl	49e8 <nrfx_busy_wait>
    4a7c:	3f01      	subs	r7, #1
    4a7e:	d1d8      	bne.n	4a32 <clock_stop+0x3c>
    4a80:	e7be      	b.n	4a00 <clock_stop+0xa>
    4a82:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4a86:	2b01      	cmp	r3, #1
    4a88:	d0f5      	beq.n	4a76 <clock_stop+0x80>
    4a8a:	e7b9      	b.n	4a00 <clock_stop+0xa>

00004a8c <nrfx_clock_enable>:
{
    4a8c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    4a8e:	2000      	movs	r0, #0
    4a90:	f7fc fb82 	bl	1198 <arch_irq_is_enabled>
    4a94:	b908      	cbnz	r0, 4a9a <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4a96:	f7fc fb5b 	bl	1150 <arch_irq_enable>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4a9a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a9e:	2200      	movs	r2, #0
    4aa0:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    4aa4:	bd08      	pop	{r3, pc}

00004aa6 <nrfx_clock_start>:
{
    4aa6:	b508      	push	{r3, lr}
    switch (domain)
    4aa8:	b110      	cbz	r0, 4ab0 <nrfx_clock_start+0xa>
    4aaa:	2801      	cmp	r0, #1
    4aac:	d02d      	beq.n	4b0a <nrfx_clock_start+0x64>
}
    4aae:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4ab0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4ab4:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4ab8:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
    4abc:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
    4ac0:	d10b      	bne.n	4ada <nrfx_clock_start+0x34>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    4ac2:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    4ac6:	07c9      	lsls	r1, r1, #31
    4ac8:	d510      	bpl.n	4aec <nrfx_clock_start+0x46>
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4aca:	f8d2 341c 	ldr.w	r3, [r2, #1052]	; 0x41c
    if (!is_correct_clk)
    4ace:	079b      	lsls	r3, r3, #30
    4ad0:	d408      	bmi.n	4ae4 <nrfx_clock_start+0x3e>
    p_reg->INTENSET = mask;
    4ad2:	2302      	movs	r3, #2
    4ad4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
                        break;
    4ad8:	e7e9      	b.n	4aae <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4ada:	f001 0303 	and.w	r3, r1, #3
    is_correct_clk = is_correct_clk || (*p_lfclksrc == NRF_CLOCK_LFCLK_RC);
    4ade:	2b01      	cmp	r3, #1
    4ae0:	d004      	beq.n	4aec <nrfx_clock_start+0x46>
    if (!is_correct_clk)
    4ae2:	b11b      	cbz	r3, 4aec <nrfx_clock_start+0x46>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    4ae4:	2000      	movs	r0, #0
    4ae6:	f7ff ff86 	bl	49f6 <clock_stop>
        *p_lfclksrc = clock_initial_lfclksrc_get();
    4aea:	2300      	movs	r3, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    4aec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4af0:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4af4:	2300      	movs	r3, #0
    4af6:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
    4afa:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
    p_reg->INTENSET = mask;
    4afe:	2302      	movs	r3, #2
    4b00:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b04:	2301      	movs	r3, #1
    4b06:	6093      	str	r3, [r2, #8]
}
    4b08:	e7d1      	b.n	4aae <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4b0a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4b0e:	2200      	movs	r2, #0
    4b10:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    4b14:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    4b18:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4b1c:	6018      	str	r0, [r3, #0]
}
    4b1e:	e7c6      	b.n	4aae <nrfx_clock_start+0x8>

00004b20 <nrfx_clock_stop>:
    clock_stop(domain);
    4b20:	f7ff bf69 	b.w	49f6 <clock_stop>

00004b24 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    4b24:	f000 001f 	and.w	r0, r0, #31
    4b28:	0080      	lsls	r0, r0, #2
    4b2a:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    4b2e:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    4b32:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    4b36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    4b3a:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    4b3e:	4770      	bx	lr

00004b40 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    4b40:	f7fe bd1a 	b.w	3578 <_DoInit>

00004b44 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    4b44:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    4b46:	f7ff fffb 	bl	4b40 <SEGGER_RTT_Init>

	return 0;
}
    4b4a:	2000      	movs	r0, #0
    4b4c:	bd08      	pop	{r3, pc}

00004b4e <z_device_state_init>:
}
    4b4e:	4770      	bx	lr

00004b50 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    4b50:	b138      	cbz	r0, 4b62 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    4b52:	68c3      	ldr	r3, [r0, #12]
    4b54:	8818      	ldrh	r0, [r3, #0]
    4b56:	f3c0 0008 	ubfx	r0, r0, #0, #9
    4b5a:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    4b5e:	4258      	negs	r0, r3
    4b60:	4158      	adcs	r0, r3
}
    4b62:	4770      	bx	lr

00004b64 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b66:	4605      	mov	r5, r0
    4b68:	460e      	mov	r6, r1
	__asm__ volatile(
    4b6a:	f04f 0320 	mov.w	r3, #32
    4b6e:	f3ef 8711 	mrs	r7, BASEPRI
    4b72:	f383 8812 	msr	BASEPRI_MAX, r3
    4b76:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    4b7a:	f7ff f9b5 	bl	3ee8 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    4b7e:	4631      	mov	r1, r6
    4b80:	4604      	mov	r4, r0
    4b82:	4628      	mov	r0, r5
    4b84:	f7ff ff02 	bl	498c <k_sys_fatal_error_handler>
	__asm__ volatile(
    4b88:	f387 8811 	msr	BASEPRI, r7
    4b8c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    4b90:	4620      	mov	r0, r4
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    4b92:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    4b96:	f7fc bd87 	b.w	16a8 <z_impl_k_thread_abort>

00004b9a <z_early_memset>:
	(void) memset(dst, c, n);
    4b9a:	f7ff bcd8 	b.w	454e <memset>

00004b9e <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    4b9e:	f7ff bccb 	b.w	4538 <memcpy>

00004ba2 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4ba2:	f3ef 8005 	mrs	r0, IPSR
}
    4ba6:	3800      	subs	r0, #0
    4ba8:	bf18      	it	ne
    4baa:	2001      	movne	r0, #1
    4bac:	4770      	bx	lr

00004bae <z_pm_save_idle_exit>:
{
    4bae:	b508      	push	{r3, lr}
	pm_system_resume();
    4bb0:	f7fc f998 	bl	ee4 <pm_system_resume>
}
    4bb4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    4bb8:	f7ff be48 	b.w	484c <sys_clock_idle_exit>

00004bbc <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    4bbc:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    4bc0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    4bc2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    4bc4:	2300      	movs	r3, #0
	node->prev = NULL;
    4bc6:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    4bca:	4770      	bx	lr

00004bcc <unpend_thread_no_timeout>:
{
    4bcc:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    4bce:	f7ff fff5 	bl	4bbc <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    4bd2:	7b43      	ldrb	r3, [r0, #13]
    4bd4:	f023 0302 	bic.w	r3, r3, #2
    4bd8:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    4bda:	2300      	movs	r3, #0
    4bdc:	6083      	str	r3, [r0, #8]
}
    4bde:	bd08      	pop	{r3, pc}

00004be0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    4be0:	4603      	mov	r3, r0
    4be2:	b920      	cbnz	r0, 4bee <z_reschedule_irqlock+0xe>
    4be4:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    4be8:	b90a      	cbnz	r2, 4bee <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    4bea:	f7fc bb23 	b.w	1234 <arch_swap>
    4bee:	f383 8811 	msr	BASEPRI, r3
    4bf2:	f3bf 8f6f 	isb	sy
}
    4bf6:	4770      	bx	lr

00004bf8 <z_reschedule_unlocked>:
	__asm__ volatile(
    4bf8:	f04f 0320 	mov.w	r3, #32
    4bfc:	f3ef 8011 	mrs	r0, BASEPRI
    4c00:	f383 8812 	msr	BASEPRI_MAX, r3
    4c04:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    4c08:	f7ff bfea 	b.w	4be0 <z_reschedule_irqlock>

00004c0c <z_priq_dumb_best>:
{
    4c0c:	4603      	mov	r3, r0
	return list->head == list;
    4c0e:	6800      	ldr	r0, [r0, #0]
}
    4c10:	4283      	cmp	r3, r0
    4c12:	bf08      	it	eq
    4c14:	2000      	moveq	r0, #0
    4c16:	4770      	bx	lr

00004c18 <z_ready_thread>:
{
    4c18:	b510      	push	{r4, lr}
    4c1a:	f04f 0320 	mov.w	r3, #32
    4c1e:	f3ef 8411 	mrs	r4, BASEPRI
    4c22:	f383 8812 	msr	BASEPRI_MAX, r3
    4c26:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    4c2a:	f7fe ffbb 	bl	3ba4 <ready_thread>
	__asm__ volatile(
    4c2e:	f384 8811 	msr	BASEPRI, r4
    4c32:	f3bf 8f6f 	isb	sy
}
    4c36:	bd10      	pop	{r4, pc}

00004c38 <z_thread_timeout>:
{
    4c38:	b510      	push	{r4, lr}
    4c3a:	4601      	mov	r1, r0
	__asm__ volatile(
    4c3c:	f04f 0320 	mov.w	r3, #32
    4c40:	f3ef 8411 	mrs	r4, BASEPRI
    4c44:	f383 8812 	msr	BASEPRI_MAX, r3
    4c48:	f3bf 8f6f 	isb	sy
		if (!killed) {
    4c4c:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    4c50:	f013 0f28 	tst.w	r3, #40	; 0x28
    4c54:	d10d      	bne.n	4c72 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    4c56:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    4c5a:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    4c5c:	b10b      	cbz	r3, 4c62 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    4c5e:	f7ff ffb5 	bl	4bcc <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    4c62:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    4c66:	f023 0314 	bic.w	r3, r3, #20
    4c6a:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    4c6e:	f7fe ff99 	bl	3ba4 <ready_thread>
	__asm__ volatile(
    4c72:	f384 8811 	msr	BASEPRI, r4
    4c76:	f3bf 8f6f 	isb	sy
}
    4c7a:	bd10      	pop	{r4, pc}

00004c7c <add_to_waitq_locked>:
{
    4c7c:	b538      	push	{r3, r4, r5, lr}
    4c7e:	4604      	mov	r4, r0
    4c80:	460d      	mov	r5, r1
	unready_thread(thread);
    4c82:	f7fe ffe3 	bl	3c4c <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    4c86:	7b63      	ldrb	r3, [r4, #13]
    4c88:	f043 0302 	orr.w	r3, r3, #2
    4c8c:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    4c8e:	b195      	cbz	r5, 4cb6 <add_to_waitq_locked+0x3a>
    4c90:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    4c92:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    4c94:	429d      	cmp	r5, r3
    4c96:	d015      	beq.n	4cc4 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4c98:	b1a3      	cbz	r3, 4cc4 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    4c9a:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    4c9e:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    4ca2:	4291      	cmp	r1, r2
    4ca4:	d008      	beq.n	4cb8 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    4ca6:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    4ca8:	2a00      	cmp	r2, #0
    4caa:	dd05      	ble.n	4cb8 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    4cac:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    4cae:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    4cb2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    4cb4:	605c      	str	r4, [r3, #4]
}
    4cb6:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    4cb8:	686a      	ldr	r2, [r5, #4]
    4cba:	4293      	cmp	r3, r2
    4cbc:	d002      	beq.n	4cc4 <add_to_waitq_locked+0x48>
    4cbe:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    4cc0:	2b00      	cmp	r3, #0
    4cc2:	d1ec      	bne.n	4c9e <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    4cc4:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    4cc6:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    4cca:	601c      	str	r4, [r3, #0]
	list->tail = node;
    4ccc:	606c      	str	r4, [r5, #4]
}
    4cce:	e7f2      	b.n	4cb6 <add_to_waitq_locked+0x3a>

00004cd0 <z_unpend_first_thread>:
{
    4cd0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    4cd2:	f04f 0320 	mov.w	r3, #32
    4cd6:	f3ef 8511 	mrs	r5, BASEPRI
    4cda:	f383 8812 	msr	BASEPRI_MAX, r3
    4cde:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    4ce2:	f7ff ff93 	bl	4c0c <z_priq_dumb_best>
		if (thread != NULL) {
    4ce6:	4604      	mov	r4, r0
    4ce8:	b120      	cbz	r0, 4cf4 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    4cea:	f7ff ff6f 	bl	4bcc <unpend_thread_no_timeout>
    4cee:	3018      	adds	r0, #24
    4cf0:	f000 f806 	bl	4d00 <z_abort_timeout>
	__asm__ volatile(
    4cf4:	f385 8811 	msr	BASEPRI, r5
    4cf8:	f3bf 8f6f 	isb	sy
}
    4cfc:	4620      	mov	r0, r4
    4cfe:	bd38      	pop	{r3, r4, r5, pc}

00004d00 <z_abort_timeout>:
{
    4d00:	b510      	push	{r4, lr}
	__asm__ volatile(
    4d02:	f04f 0220 	mov.w	r2, #32
    4d06:	f3ef 8411 	mrs	r4, BASEPRI
    4d0a:	f382 8812 	msr	BASEPRI_MAX, r2
    4d0e:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    4d12:	6803      	ldr	r3, [r0, #0]
    4d14:	b13b      	cbz	r3, 4d26 <z_abort_timeout+0x26>
			remove_timeout(to);
    4d16:	f7ff f989 	bl	402c <remove_timeout>
			ret = 0;
    4d1a:	2000      	movs	r0, #0
	__asm__ volatile(
    4d1c:	f384 8811 	msr	BASEPRI, r4
    4d20:	f3bf 8f6f 	isb	sy
}
    4d24:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    4d26:	f06f 0015 	mvn.w	r0, #21
    4d2a:	e7f7      	b.n	4d1c <z_abort_timeout+0x1c>

00004d2c <z_get_next_timeout_expiry>:
{
    4d2c:	b510      	push	{r4, lr}
	__asm__ volatile(
    4d2e:	f04f 0320 	mov.w	r3, #32
    4d32:	f3ef 8411 	mrs	r4, BASEPRI
    4d36:	f383 8812 	msr	BASEPRI_MAX, r3
    4d3a:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    4d3e:	f7ff f94f 	bl	3fe0 <next_timeout>
	__asm__ volatile(
    4d42:	f384 8811 	msr	BASEPRI, r4
    4d46:	f3bf 8f6f 	isb	sy
}
    4d4a:	bd10      	pop	{r4, pc}

00004d4c <z_set_timeout_expiry>:
{
    4d4c:	b570      	push	{r4, r5, r6, lr}
    4d4e:	4604      	mov	r4, r0
    4d50:	460d      	mov	r5, r1
	__asm__ volatile(
    4d52:	f04f 0320 	mov.w	r3, #32
    4d56:	f3ef 8611 	mrs	r6, BASEPRI
    4d5a:	f383 8812 	msr	BASEPRI_MAX, r3
    4d5e:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    4d62:	f7ff f93d 	bl	3fe0 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    4d66:	2801      	cmp	r0, #1
    4d68:	dd05      	ble.n	4d76 <z_set_timeout_expiry+0x2a>
    4d6a:	42a0      	cmp	r0, r4
    4d6c:	db03      	blt.n	4d76 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    4d6e:	4629      	mov	r1, r5
    4d70:	4620      	mov	r0, r4
    4d72:	f7fd fc29 	bl	25c8 <sys_clock_set_timeout>
	__asm__ volatile(
    4d76:	f386 8811 	msr	BASEPRI, r6
    4d7a:	f3bf 8f6f 	isb	sy
}
    4d7e:	bd70      	pop	{r4, r5, r6, pc}

00004d80 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    4d80:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    4d82:	f7ff fa43 	bl	420c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    4d86:	bd08      	pop	{r3, pc}

00004d88 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    4d88:	b108      	cbz	r0, 4d8e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    4d8a:	f7fc bd85 	b.w	1898 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    4d8e:	4770      	bx	lr

00004d90 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    4d90:	4770      	bx	lr
	...

00004d94 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    4d94:	f7fd bf5a 	b.w	2c4c <SystemInit>
