
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
    } while (err);
    LOG_DBG("High Frequency clock started");
    return 0;
}

int init_esb(void) {
   0:	c0 34 00 20 e9 43 00 00 67 bc 00 00 bd 43 00 00     .4. .C..g....C..
    
    int err;
    uint8_t base_addr_0[4] = {0xE7, 0xE7, 0xE7, 0xE7};
    uint8_t base_addr_1[4] = {0xC2, 0xC2, 0xC2, 0xC2};
    uint8_t addr_prefix[8] = {0xE7, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8};
  10:	bd 43 00 00 bd 43 00 00 bd 43 00 00 00 00 00 00     .C...C...C......
	...
    config.bitrate = ESB_BITRATE_2MBPS;
    config.event_handler = event_handler;
    config.mode = ESB_MODE_PTX;
    config.selective_auto_ack = true;

    err = esb_init(&config);
  2c:	11 3d 00 00 bd 43 00 00 00 00 00 00 bd 3c 00 00     .=...C.......<..
        return err;
    }   

    err = esb_set_prefixes(addr_prefix, ARRAY_SIZE(addr_prefix));
    if (err) {
        LOG_ERR("Error setting address prefix");
  3c:	bd 43 00 00                                         .C..

00000040 <_irq_vector_table>:
  40:	c1 3d 00 00 d9 6c 00 00 c1 3d 00 00 c1 3d 00 00     .=...l...=...=..
        return err;
    }   
    esb_data.ready = true;

    return 0;
}
  50:	c1 3d 00 00 c1 3d 00 00 c1 3d 00 00 c1 3d 00 00     .=...=...=...=..
        LOG_ERR("Error setting base address 0");
  60:	c1 3d 00 00 c1 3d 00 00 1d 87 00 00 c1 3d 00 00     .=...=.......=..
    err = esb_set_prefixes(addr_prefix, ARRAY_SIZE(addr_prefix));
  70:	c1 3d 00 00 c1 3d 00 00 c1 3d 00 00 c1 3d 00 00     .=...=...=...=..
    esb_data.ready = true;
  80:	c1 3d 00 00 c1 3d 00 00 c1 3d 00 00 c1 3d 00 00     .=...=...=...=..
    return 0;
  90:	1d 6d 00 00 c1 3d 00 00 c1 3d 00 00 c1 3d 00 00     .m...=...=...=..
  a0:	c1 3d 00 00 c1 3d 00 00 c1 3d 00 00 c1 3d 00 00     .=...=...=...=..
  b0:	c1 3d 00 00 c1 3d 00 00 c1 3d 00 00 c1 3d 00 00     .=...=...=...=..
  c0:	c1 3d 00 00 c1 3d 00 00 c1 3d 00 00 c1 3d 00 00     .=...=...=...=..
  d0:	c1 3d 00 00 c1 3d 00 00 c1 3d 00 00 c1 3d 00 00     .=...=...=...=..

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295
      f0:	f04f 30ff 	movne.w	r0, #4294967295
      f4:	f000 b80c 	b.w	110 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f872 	bl	1e8 <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__aeabi_idiv0>:
     110:	4770      	bx	lr
     112:	bf00      	nop

00000114 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
     114:	b570      	push	{r4, r5, r6, lr}
     116:	4c17      	ldr	r4, [pc, #92]	; (174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>)
     118:	7860      	ldrb	r0, [r4, #1]
     11a:	2800      	cmp	r0, #0
     11c:	d123      	bne.n	166 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
     11e:	2001      	movs	r0, #1
     120:	7060      	strb	r0, [r4, #1]
     122:	f000 f9cf 	bl	4c4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
     126:	f06f 0527 	mvn.w	r5, #39	; 0x27
     12a:	b928      	cbnz	r0, 138 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     12c:	f000 f9e0 	bl	4f0 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
     130:	b910      	cbnz	r0, 138 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     132:	f000 f9e7 	bl	504 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
     136:	b120      	cbz	r0, 142 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
     138:	480f      	ldr	r0, [pc, #60]	; (178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>)
     13a:	6060      	str	r0, [r4, #4]
     13c:	70a5      	strb	r5, [r4, #2]
     13e:	2008      	movs	r0, #8
     140:	e010      	b.n	164 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
     142:	f000 f9a1 	bl	488 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
     146:	b940      	cbnz	r0, 15a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     148:	f000 f9a8 	bl	49c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
     14c:	b928      	cbnz	r0, 15a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     14e:	f000 f9af 	bl	4b0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
     152:	b910      	cbnz	r0, 15a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     154:	f000 f9c0 	bl	4d8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
     158:	b130      	cbz	r0, 168 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
     15a:	4807      	ldr	r0, [pc, #28]	; (178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>)
     15c:	3031      	adds	r0, #49	; 0x31
     15e:	6060      	str	r0, [r4, #4]
     160:	70a5      	strb	r5, [r4, #2]
     162:	2004      	movs	r0, #4
     164:	70e0      	strb	r0, [r4, #3]
     166:	bd70      	pop	{r4, r5, r6, pc}
     168:	f240 113f 	movw	r1, #319	; 0x13f
     16c:	2074      	movs	r0, #116	; 0x74
     16e:	f000 f817 	bl	1a0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     172:	0000      	.short	0x0000
     174:	20000000 	.word	0x20000000
     178:	0000052a 	.word	0x0000052a
     17c:	f3bf 8f4f 	dsb	sy
     180:	4805      	ldr	r0, [pc, #20]	; (198 <CONFIG_PMW3360_CPI+0x8>)
     182:	6801      	ldr	r1, [r0, #0]
     184:	4a05      	ldr	r2, [pc, #20]	; (19c <CONFIG_PMW3360_CPI+0xc>)
     186:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     18a:	4311      	orrs	r1, r2
     18c:	6001      	str	r1, [r0, #0]
     18e:	f3bf 8f4f 	dsb	sy
     192:	bf00      	nop
     194:	e7fd      	b.n	192 <CONFIG_PMW3360_CPI+0x2>
     196:	0000      	.short	0x0000
     198:	e000ed0c 	.word	0xe000ed0c
     19c:	05fa0004 	.word	0x05fa0004

000001a0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
     1a0:	b50e      	push	{r1, r2, r3, lr}
     1a2:	b672      	cpsid	i
     1a4:	4a0f      	ldr	r2, [pc, #60]	; (1e4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x44>)
     1a6:	6855      	ldr	r5, [r2, #4]
     1a8:	b1d5      	cbz	r5, 1e0 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x40>
     1aa:	2200      	movs	r2, #0
     1ac:	4603      	mov	r3, r0
     1ae:	466e      	mov	r6, sp
     1b0:	240a      	movs	r4, #10
     1b2:	e003      	b.n	1bc <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x1c>
     1b4:	fbb0 f0f4 	udiv	r0, r0, r4
     1b8:	1c52      	adds	r2, r2, #1
     1ba:	b2d2      	uxtb	r2, r2
     1bc:	2800      	cmp	r0, #0
     1be:	d1f9      	bne.n	1b4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x14>
     1c0:	54b0      	strb	r0, [r6, r2]
     1c2:	e009      	b.n	1d8 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x38>
     1c4:	fbb3 f0f4 	udiv	r0, r3, r4
     1c8:	fb04 3010 	mls	r0, r4, r0, r3
     1cc:	fbb3 f3f4 	udiv	r3, r3, r4
     1d0:	1e52      	subs	r2, r2, #1
     1d2:	b2d2      	uxtb	r2, r2
     1d4:	3030      	adds	r0, #48	; 0x30
     1d6:	54b0      	strb	r0, [r6, r2]
     1d8:	2a00      	cmp	r2, #0
     1da:	d1f3      	bne.n	1c4 <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q+0x24>
     1dc:	4630      	mov	r0, r6
     1de:	47a8      	blx	r5
     1e0:	f7ff ffcc 	bl	17c <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xf>
     1e4:	20000008 	.word	0x20000008

000001e8 <__udivmoddi4>:
     1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     1ec:	4686      	mov	lr, r0
     1ee:	468c      	mov	ip, r1
     1f0:	4608      	mov	r0, r1
     1f2:	9e08      	ldr	r6, [sp, #32]
     1f4:	4615      	mov	r5, r2
     1f6:	4674      	mov	r4, lr
     1f8:	4619      	mov	r1, r3
     1fa:	2b00      	cmp	r3, #0
     1fc:	f040 80c2 	bne.w	384 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x84>
     200:	4285      	cmp	r5, r0
     202:	fab2 f282 	clz	r2, r2
     206:	d945      	bls.n	294 <CONFIG_USB_DEVICE_PID+0x74>
     208:	b14a      	cbz	r2, 21e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x2a>
     20a:	f1c2 0320 	rsb	r3, r2, #32
     20e:	fa00 fc02 	lsl.w	ip, r0, r2
     212:	fa2e f303 	lsr.w	r3, lr, r3
     216:	4095      	lsls	r5, r2
     218:	ea43 0c0c 	orr.w	ip, r3, ip
     21c:	4094      	lsls	r4, r2
     21e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     222:	b2a8      	uxth	r0, r5
     224:	fbbc f8fe 	udiv	r8, ip, lr
     228:	0c23      	lsrs	r3, r4, #16
     22a:	fb0e cc18 	mls	ip, lr, r8, ip
     22e:	fb08 f900 	mul.w	r9, r8, r0
     232:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     236:	4599      	cmp	r9, r3
     238:	d928      	bls.n	28c <CONFIG_USB_DEVICE_PID+0x6c>
     23a:	18eb      	adds	r3, r5, r3
     23c:	f108 37ff 	add.w	r7, r8, #4294967295
     240:	d204      	bcs.n	24c <CONFIG_USB_DEVICE_PID+0x2c>
     242:	4599      	cmp	r9, r3
     244:	d902      	bls.n	24c <CONFIG_USB_DEVICE_PID+0x2c>
     246:	f1a8 0702 	sub.w	r7, r8, #2
     24a:	442b      	add	r3, r5
     24c:	eba3 0309 	sub.w	r3, r3, r9
     250:	b2a4      	uxth	r4, r4
     252:	fbb3 fcfe 	udiv	ip, r3, lr
     256:	fb0e 331c 	mls	r3, lr, ip, r3
     25a:	fb0c f000 	mul.w	r0, ip, r0
     25e:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     262:	42a0      	cmp	r0, r4
     264:	d914      	bls.n	290 <CONFIG_USB_DEVICE_PID+0x70>
     266:	192c      	adds	r4, r5, r4
     268:	f10c 33ff 	add.w	r3, ip, #4294967295
     26c:	d204      	bcs.n	278 <CONFIG_USB_DEVICE_PID+0x58>
     26e:	42a0      	cmp	r0, r4
     270:	d902      	bls.n	278 <CONFIG_USB_DEVICE_PID+0x58>
     272:	f1ac 0302 	sub.w	r3, ip, #2
     276:	442c      	add	r4, r5
     278:	1a24      	subs	r4, r4, r0
     27a:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     27e:	b11e      	cbz	r6, 288 <CONFIG_USB_DEVICE_PID+0x68>
     280:	40d4      	lsrs	r4, r2
     282:	2300      	movs	r3, #0
     284:	6034      	str	r4, [r6, #0]
     286:	6073      	str	r3, [r6, #4]
     288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     28c:	4647      	mov	r7, r8
     28e:	e7dd      	b.n	24c <CONFIG_USB_DEVICE_PID+0x2c>
     290:	4663      	mov	r3, ip
     292:	e7f1      	b.n	278 <CONFIG_USB_DEVICE_PID+0x58>
     294:	bb92      	cbnz	r2, 2fc <CONFIG_USB_DEVICE_PID+0xdc>
     296:	1b43      	subs	r3, r0, r5
     298:	2101      	movs	r1, #1
     29a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     29e:	b2af      	uxth	r7, r5
     2a0:	fbb3 fcfe 	udiv	ip, r3, lr
     2a4:	0c20      	lsrs	r0, r4, #16
     2a6:	fb0e 331c 	mls	r3, lr, ip, r3
     2aa:	fb0c f807 	mul.w	r8, ip, r7
     2ae:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     2b2:	4598      	cmp	r8, r3
     2b4:	d962      	bls.n	37c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x7c>
     2b6:	18eb      	adds	r3, r5, r3
     2b8:	f10c 30ff 	add.w	r0, ip, #4294967295
     2bc:	d204      	bcs.n	2c8 <CONFIG_USB_DEVICE_PID+0xa8>
     2be:	4598      	cmp	r8, r3
     2c0:	d902      	bls.n	2c8 <CONFIG_USB_DEVICE_PID+0xa8>
     2c2:	f1ac 0002 	sub.w	r0, ip, #2
     2c6:	442b      	add	r3, r5
     2c8:	eba3 0308 	sub.w	r3, r3, r8
     2cc:	b2a4      	uxth	r4, r4
     2ce:	fbb3 fcfe 	udiv	ip, r3, lr
     2d2:	fb0e 331c 	mls	r3, lr, ip, r3
     2d6:	fb0c f707 	mul.w	r7, ip, r7
     2da:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     2de:	42a7      	cmp	r7, r4
     2e0:	d94e      	bls.n	380 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x80>
     2e2:	192c      	adds	r4, r5, r4
     2e4:	f10c 33ff 	add.w	r3, ip, #4294967295
     2e8:	d204      	bcs.n	2f4 <CONFIG_USB_DEVICE_PID+0xd4>
     2ea:	42a7      	cmp	r7, r4
     2ec:	d902      	bls.n	2f4 <CONFIG_USB_DEVICE_PID+0xd4>
     2ee:	f1ac 0302 	sub.w	r3, ip, #2
     2f2:	442c      	add	r4, r5
     2f4:	1be4      	subs	r4, r4, r7
     2f6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     2fa:	e7c0      	b.n	27e <CONFIG_USB_DEVICE_PID+0x5e>
     2fc:	f1c2 0320 	rsb	r3, r2, #32
     300:	fa20 f103 	lsr.w	r1, r0, r3
     304:	4095      	lsls	r5, r2
     306:	4090      	lsls	r0, r2
     308:	fa2e f303 	lsr.w	r3, lr, r3
     30c:	4303      	orrs	r3, r0
     30e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     312:	b2af      	uxth	r7, r5
     314:	fbb1 fcfe 	udiv	ip, r1, lr
     318:	fb0e 101c 	mls	r0, lr, ip, r1
     31c:	0c19      	lsrs	r1, r3, #16
     31e:	fb0c f807 	mul.w	r8, ip, r7
     322:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     326:	4588      	cmp	r8, r1
     328:	fa04 f402 	lsl.w	r4, r4, r2
     32c:	d922      	bls.n	374 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x74>
     32e:	1869      	adds	r1, r5, r1
     330:	f10c 30ff 	add.w	r0, ip, #4294967295
     334:	d204      	bcs.n	340 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x40>
     336:	4588      	cmp	r8, r1
     338:	d902      	bls.n	340 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x40>
     33a:	f1ac 0002 	sub.w	r0, ip, #2
     33e:	4429      	add	r1, r5
     340:	eba1 0108 	sub.w	r1, r1, r8
     344:	b29b      	uxth	r3, r3
     346:	fbb1 fcfe 	udiv	ip, r1, lr
     34a:	fb0e 111c 	mls	r1, lr, ip, r1
     34e:	fb0c f707 	mul.w	r7, ip, r7
     352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     356:	429f      	cmp	r7, r3
     358:	d90e      	bls.n	378 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x78>
     35a:	18eb      	adds	r3, r5, r3
     35c:	f10c 31ff 	add.w	r1, ip, #4294967295
     360:	d204      	bcs.n	36c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6c>
     362:	429f      	cmp	r7, r3
     364:	d902      	bls.n	36c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6c>
     366:	f1ac 0102 	sub.w	r1, ip, #2
     36a:	442b      	add	r3, r5
     36c:	1bdb      	subs	r3, r3, r7
     36e:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     372:	e792      	b.n	29a <CONFIG_USB_DEVICE_PID+0x7a>
     374:	4660      	mov	r0, ip
     376:	e7e3      	b.n	340 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x40>
     378:	4661      	mov	r1, ip
     37a:	e7f7      	b.n	36c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6c>
     37c:	4660      	mov	r0, ip
     37e:	e7a3      	b.n	2c8 <CONFIG_USB_DEVICE_PID+0xa8>
     380:	4663      	mov	r3, ip
     382:	e7b7      	b.n	2f4 <CONFIG_USB_DEVICE_PID+0xd4>
     384:	4283      	cmp	r3, r0
     386:	d906      	bls.n	396 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x96>
     388:	b916      	cbnz	r6, 390 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x90>
     38a:	2100      	movs	r1, #0
     38c:	4608      	mov	r0, r1
     38e:	e77b      	b.n	288 <CONFIG_USB_DEVICE_PID+0x68>
     390:	e9c6 e000 	strd	lr, r0, [r6]
     394:	e7f9      	b.n	38a <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8a>
     396:	fab3 f783 	clz	r7, r3
     39a:	b98f      	cbnz	r7, 3c0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xc0>
     39c:	4283      	cmp	r3, r0
     39e:	d301      	bcc.n	3a4 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xa4>
     3a0:	4572      	cmp	r2, lr
     3a2:	d808      	bhi.n	3b6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb6>
     3a4:	ebbe 0402 	subs.w	r4, lr, r2
     3a8:	eb60 0303 	sbc.w	r3, r0, r3
     3ac:	2001      	movs	r0, #1
     3ae:	469c      	mov	ip, r3
     3b0:	b91e      	cbnz	r6, 3ba <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xba>
     3b2:	2100      	movs	r1, #0
     3b4:	e768      	b.n	288 <CONFIG_USB_DEVICE_PID+0x68>
     3b6:	4638      	mov	r0, r7
     3b8:	e7fa      	b.n	3b0 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb0>
     3ba:	e9c6 4c00 	strd	r4, ip, [r6]
     3be:	e7f8      	b.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     3c0:	f1c7 0c20 	rsb	ip, r7, #32
     3c4:	40bb      	lsls	r3, r7
     3c6:	fa22 f40c 	lsr.w	r4, r2, ip
     3ca:	431c      	orrs	r4, r3
     3cc:	fa2e f10c 	lsr.w	r1, lr, ip
     3d0:	fa20 f30c 	lsr.w	r3, r0, ip
     3d4:	40b8      	lsls	r0, r7
     3d6:	4301      	orrs	r1, r0
     3d8:	ea4f 4914 	mov.w	r9, r4, lsr #16
     3dc:	fa0e f507 	lsl.w	r5, lr, r7
     3e0:	fbb3 f8f9 	udiv	r8, r3, r9
     3e4:	fa1f fe84 	uxth.w	lr, r4
     3e8:	fb09 3018 	mls	r0, r9, r8, r3
     3ec:	0c0b      	lsrs	r3, r1, #16
     3ee:	fb08 fa0e 	mul.w	sl, r8, lr
     3f2:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     3f6:	459a      	cmp	sl, r3
     3f8:	fa02 f207 	lsl.w	r2, r2, r7
     3fc:	d940      	bls.n	480 <CONFIG_LOG_BUFFER_SIZE+0x80>
     3fe:	18e3      	adds	r3, r4, r3
     400:	f108 30ff 	add.w	r0, r8, #4294967295
     404:	d204      	bcs.n	410 <CONFIG_LOG_BUFFER_SIZE+0x10>
     406:	459a      	cmp	sl, r3
     408:	d902      	bls.n	410 <CONFIG_LOG_BUFFER_SIZE+0x10>
     40a:	f1a8 0002 	sub.w	r0, r8, #2
     40e:	4423      	add	r3, r4
     410:	eba3 030a 	sub.w	r3, r3, sl
     414:	b289      	uxth	r1, r1
     416:	fbb3 f8f9 	udiv	r8, r3, r9
     41a:	fb09 3318 	mls	r3, r9, r8, r3
     41e:	fb08 fe0e 	mul.w	lr, r8, lr
     422:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     426:	458e      	cmp	lr, r1
     428:	d92c      	bls.n	484 <CONFIG_LOG_BUFFER_SIZE+0x84>
     42a:	1861      	adds	r1, r4, r1
     42c:	f108 33ff 	add.w	r3, r8, #4294967295
     430:	d204      	bcs.n	43c <CONFIG_LOG_BUFFER_SIZE+0x3c>
     432:	458e      	cmp	lr, r1
     434:	d902      	bls.n	43c <CONFIG_LOG_BUFFER_SIZE+0x3c>
     436:	f1a8 0302 	sub.w	r3, r8, #2
     43a:	4421      	add	r1, r4
     43c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     440:	fba0 9802 	umull	r9, r8, r0, r2
     444:	eba1 010e 	sub.w	r1, r1, lr
     448:	4541      	cmp	r1, r8
     44a:	46ce      	mov	lr, r9
     44c:	4643      	mov	r3, r8
     44e:	d302      	bcc.n	456 <CONFIG_LOG_BUFFER_SIZE+0x56>
     450:	d106      	bne.n	460 <CONFIG_LOG_BUFFER_SIZE+0x60>
     452:	454d      	cmp	r5, r9
     454:	d204      	bcs.n	460 <CONFIG_LOG_BUFFER_SIZE+0x60>
     456:	ebb9 0e02 	subs.w	lr, r9, r2
     45a:	eb68 0304 	sbc.w	r3, r8, r4
     45e:	3801      	subs	r0, #1
     460:	2e00      	cmp	r6, #0
     462:	d0a6      	beq.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     464:	ebb5 020e 	subs.w	r2, r5, lr
     468:	eb61 0103 	sbc.w	r1, r1, r3
     46c:	fa01 fc0c 	lsl.w	ip, r1, ip
     470:	fa22 f307 	lsr.w	r3, r2, r7
     474:	ea4c 0303 	orr.w	r3, ip, r3
     478:	40f9      	lsrs	r1, r7
     47a:	e9c6 3100 	strd	r3, r1, [r6]
     47e:	e798      	b.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     480:	4640      	mov	r0, r8
     482:	e7c5      	b.n	410 <CONFIG_LOG_BUFFER_SIZE+0x10>
     484:	4643      	mov	r3, r8
     486:	e7d9      	b.n	43c <CONFIG_LOG_BUFFER_SIZE+0x3c>

00000488 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
     488:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     48c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     490:	280f      	cmp	r0, #15
     492:	d001      	beq.n	498 <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
     494:	2000      	movs	r0, #0
     496:	4770      	bx	lr
     498:	2001      	movs	r0, #1
     49a:	4770      	bx	lr

0000049c <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
     49c:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     4a0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     4a4:	280a      	cmp	r0, #10
     4a6:	d001      	beq.n	4ac <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
     4a8:	2000      	movs	r0, #0
     4aa:	4770      	bx	lr
     4ac:	2001      	movs	r0, #1
     4ae:	4770      	bx	lr

000004b0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
     4b0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     4b4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     4b8:	280e      	cmp	r0, #14
     4ba:	d001      	beq.n	4c0 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
     4bc:	2000      	movs	r0, #0
     4be:	4770      	bx	lr
     4c0:	2001      	movs	r0, #1
     4c2:	4770      	bx	lr

000004c4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
     4c4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     4c8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     4cc:	2810      	cmp	r0, #16
     4ce:	d001      	beq.n	4d4 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
     4d0:	2000      	movs	r0, #0
     4d2:	4770      	bx	lr
     4d4:	2001      	movs	r0, #1
     4d6:	4770      	bx	lr

000004d8 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
     4d8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     4dc:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     4e0:	2806      	cmp	r0, #6
     4e2:	d003      	beq.n	4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
     4e4:	1c40      	adds	r0, r0, #1
     4e6:	d001      	beq.n	4ec <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4>
     4e8:	2000      	movs	r0, #0
     4ea:	4770      	bx	lr
     4ec:	2001      	movs	r0, #1
     4ee:	4770      	bx	lr

000004f0 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
     4f0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     4f4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     4f8:	280d      	cmp	r0, #13
     4fa:	d001      	beq.n	500 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
     4fc:	2000      	movs	r0, #0
     4fe:	4770      	bx	lr
     500:	2001      	movs	r0, #1
     502:	4770      	bx	lr

00000504 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
     504:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     508:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     50c:	2808      	cmp	r0, #8
     50e:	d001      	beq.n	514 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
     510:	2000      	movs	r0, #0
     512:	4770      	bx	lr
     514:	2001      	movs	r0, #1
     516:	4770      	bx	lr

00000518 <mpsl_fem_init>:
     518:	f7ff bdfc 	b.w	114 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>
     51c:	f4f0ecd8 	.word	0xf4f0ecd8
     520:	0200fcf8 	.word	0x0200fcf8
     524:	06050403 	.word	0x06050403
     528:	00000807 	.word	0x00000807
	...
     53c:	01010000 	.word	0x01010000
     540:	02020101 	.word	0x02020101
     544:	03030202 	.word	0x03030202
     548:	04040303 	.word	0x04040303
     54c:	05050404 	.word	0x05050404
     550:	06060505 	.word	0x06060505
     554:	0a090807 	.word	0x0a090807
     558:	000d0c0b 	.word	0x000d0c0b
	...
     56c:	01000000 	.word	0x01000000
     570:	02010101 	.word	0x02010101
     574:	03020202 	.word	0x03020202
     578:	04030303 	.word	0x04030303
     57c:	05040404 	.word	0x05040404
     580:	06050505 	.word	0x06050505
     584:	09080606 	.word	0x09080606

00000588 <configure_callback.constprop.0>:
    //     button_states = states;
    // }
    // k_sem_give(&button_sem);
}

static void configure_callback(const struct gpio_dt_spec *spec, gpio_callback_handler_t handler, struct gpio_callback *cb) {
     588:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     58c:	4604      	mov	r4, r0
    const struct device *gpio = spec->port;
     58e:	6805      	ldr	r5, [r0, #0]
	gpio_pin_t pin = spec->pin;
     590:	7906      	ldrb	r6, [r0, #4]
static void configure_callback(const struct gpio_dt_spec *spec, gpio_callback_handler_t handler, struct gpio_callback *cb) {
     592:	af00      	add	r7, sp, #0
     594:	4688      	mov	r8, r1
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     596:	4628      	mov	r0, r5
     598:	f00c f8a1 	bl	c6de <z_device_is_ready>
	int ret;
	if (gpio == NULL) {
		/* Optional GPIO is missing. */
		// return 0;
	}
	if (!device_is_ready(gpio)) {
     59c:	4603      	mov	r3, r0
     59e:	b990      	cbnz	r0, 5c6 <configure_callback.constprop.0+0x3e>
		LOG_ERR("GPIO port %s is not ready", gpio->name);
     5a0:	46e9      	mov	r9, sp
     5a2:	b088      	sub	sp, #32
     5a4:	6829      	ldr	r1, [r5, #0]
     5a6:	466a      	mov	r2, sp
     5a8:	4847      	ldr	r0, [pc, #284]	; (6c8 <configure_callback.constprop.0+0x140>)
     5aa:	e9c2 0105 	strd	r0, r1, [r2, #20]
     5ae:	f44f 7100 	mov.w	r1, #512	; 0x200
     5b2:	8391      	strh	r1, [r2, #28]
     5b4:	4945      	ldr	r1, [pc, #276]	; (6cc <configure_callback.constprop.0+0x144>)
     5b6:	f842 1f10 	str.w	r1, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
     5ba:	4845      	ldr	r0, [pc, #276]	; (6d0 <configure_callback.constprop.0+0x148>)
     5bc:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
     5c0:	f001 feba 	bl	2338 <z_impl_z_log_msg_static_create>
     5c4:	46cd      	mov	sp, r9
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
				  spec->dt_flags | extra_flags);
     5c6:	88e3      	ldrh	r3, [r4, #6]
	return gpio_pin_configure(spec->port,
     5c8:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
     5ca:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
     5cc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
	struct gpio_driver_data *data =
     5d0:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
     5d4:	f8d0 9008 	ldr.w	r9, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
     5d8:	f013 0f01 	tst.w	r3, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
     5dc:	f04f 0c01 	mov.w	ip, #1
     5e0:	f8de 3000 	ldr.w	r3, [lr]
     5e4:	fa0c fc01 	lsl.w	ip, ip, r1
     5e8:	bf14      	ite	ne
     5ea:	ea4c 0303 	orrne.w	r3, ip, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     5ee:	ea23 030c 	biceq.w	r3, r3, ip
     5f2:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
     5f6:	f8d9 3000 	ldr.w	r3, [r9]
     5fa:	4798      	blx	r3
		// return -ENODEV;
	}
	ret = gpio_pin_configure_dt(spec, GPIO_INPUT);
	if (ret < 0) {
     5fc:	2800      	cmp	r0, #0
     5fe:	da15      	bge.n	62c <configure_callback.constprop.0+0xa4>
		LOG_ERR("Failed to configure port %s pin %u, error: %d",
     600:	46e9      	mov	r9, sp
     602:	b08a      	sub	sp, #40	; 0x28
     604:	682b      	ldr	r3, [r5, #0]
     606:	466a      	mov	r2, sp
     608:	4932      	ldr	r1, [pc, #200]	; (6d4 <configure_callback.constprop.0+0x14c>)
     60a:	e9c2 1305 	strd	r1, r3, [r2, #20]
     60e:	f44f 7300 	mov.w	r3, #512	; 0x200
     612:	8493      	strh	r3, [r2, #36]	; 0x24
     614:	4b30      	ldr	r3, [pc, #192]	; (6d8 <configure_callback.constprop.0+0x150>)
     616:	e9c2 6007 	strd	r6, r0, [r2, #28]
     61a:	f842 3f10 	str.w	r3, [r2, #16]!
     61e:	482c      	ldr	r0, [pc, #176]	; (6d0 <configure_callback.constprop.0+0x148>)
     620:	2300      	movs	r3, #0
     622:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
     626:	f001 fe87 	bl	2338 <z_impl_z_log_msg_static_create>
     62a:	46cd      	mov	sp, r9
			gpio->name, pin, ret);
		// return ret;
	}
	ret = gpio_pin_get(gpio, pin);
     62c:	4631      	mov	r1, r6
     62e:	4628      	mov	r0, r5
     630:	f00a fba8 	bl	ad84 <gpio_pin_get>
	if (ret < 0) {
     634:	2800      	cmp	r0, #0
     636:	da15      	bge.n	664 <configure_callback.constprop.0+0xdc>
		LOG_ERR("Failed to get the state of port %s pin %u, error: %d",
     638:	46e9      	mov	r9, sp
     63a:	b08a      	sub	sp, #40	; 0x28
     63c:	682b      	ldr	r3, [r5, #0]
     63e:	466a      	mov	r2, sp
     640:	4926      	ldr	r1, [pc, #152]	; (6dc <configure_callback.constprop.0+0x154>)
     642:	e9c2 1305 	strd	r1, r3, [r2, #20]
     646:	f44f 7300 	mov.w	r3, #512	; 0x200
     64a:	8493      	strh	r3, [r2, #36]	; 0x24
     64c:	4b22      	ldr	r3, [pc, #136]	; (6d8 <configure_callback.constprop.0+0x150>)
     64e:	e9c2 6007 	strd	r6, r0, [r2, #28]
     652:	f842 3f10 	str.w	r3, [r2, #16]!
     656:	481e      	ldr	r0, [pc, #120]	; (6d0 <configure_callback.constprop.0+0x148>)
     658:	2300      	movs	r3, #0
     65a:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
     65e:	f001 fe6b 	bl	2338 <z_impl_z_log_msg_static_create>
     662:	46cd      	mov	sp, r9
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     664:	4b1e      	ldr	r3, [pc, #120]	; (6e0 <configure_callback.constprop.0+0x158>)
     666:	f8c8 3004 	str.w	r3, [r8, #4]
			gpio->name, pin, ret);
		// return ret;
	}

	gpio_init_callback(cb, button_callback, BIT(pin));
     66a:	2201      	movs	r2, #1
     66c:	fa02 f306 	lsl.w	r3, r2, r6
	callback->pin_mask = pin_mask;
     670:	f8c8 3008 	str.w	r3, [r8, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     674:	68ab      	ldr	r3, [r5, #8]
     676:	69db      	ldr	r3, [r3, #28]
     678:	b113      	cbz	r3, 680 <configure_callback.constprop.0+0xf8>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     67a:	4641      	mov	r1, r8
     67c:	4628      	mov	r0, r5
     67e:	4798      	blx	r3
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
     680:	6820      	ldr	r0, [r4, #0]
     682:	7921      	ldrb	r1, [r4, #4]
	return api->pin_interrupt_configure(port, pin, mode, trig);
     684:	6883      	ldr	r3, [r0, #8]
     686:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
     68a:	699c      	ldr	r4, [r3, #24]
     68c:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
     690:	47a0      	blx	r4
	ret = gpio_add_callback(gpio, cb);
	
	ret = gpio_pin_interrupt_configure_dt(spec, GPIO_INT_EDGE_BOTH);
	if (ret < 0) {
     692:	2800      	cmp	r0, #0
     694:	da15      	bge.n	6c2 <configure_callback.constprop.0+0x13a>
		LOG_ERR("Failed to configure interrupt for port %s pin %u, "
     696:	466c      	mov	r4, sp
     698:	b08a      	sub	sp, #40	; 0x28
     69a:	682b      	ldr	r3, [r5, #0]
     69c:	466a      	mov	r2, sp
     69e:	4911      	ldr	r1, [pc, #68]	; (6e4 <configure_callback.constprop.0+0x15c>)
     6a0:	e9c2 1305 	strd	r1, r3, [r2, #20]
     6a4:	f44f 7300 	mov.w	r3, #512	; 0x200
     6a8:	8493      	strh	r3, [r2, #36]	; 0x24
     6aa:	4b0b      	ldr	r3, [pc, #44]	; (6d8 <configure_callback.constprop.0+0x150>)
     6ac:	e9c2 6007 	strd	r6, r0, [r2, #28]
     6b0:	f842 3f10 	str.w	r3, [r2, #16]!
     6b4:	4806      	ldr	r0, [pc, #24]	; (6d0 <configure_callback.constprop.0+0x148>)
     6b6:	2300      	movs	r3, #0
     6b8:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
     6bc:	f001 fe3c 	bl	2338 <z_impl_z_log_msg_static_create>
     6c0:	46a5      	mov	sp, r4
		// return ret;
	}

    LOG_DBG("Set up button at %s pin %d", gpio->name, pin);
	// return 0;
}
     6c2:	46bd      	mov	sp, r7
     6c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     6c8:	0000d3a8 	.word	0x0000d3a8
     6cc:	01000003 	.word	0x01000003
     6d0:	0000cf78 	.word	0x0000cf78
     6d4:	0000d3c2 	.word	0x0000d3c2
     6d8:	01000005 	.word	0x01000005
     6dc:	0000d3f0 	.word	0x0000d3f0
     6e0:	0000adb5 	.word	0x0000adb5
     6e4:	0000d425 	.word	0x0000d425

000006e8 <init_buttons>:
bool init_buttons(void) {
     6e8:	b510      	push	{r4, lr}
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     6ea:	2201      	movs	r2, #1
    configure_callback(&mouse_one, button_callback, &callbacks[0]);
     6ec:	4c0f      	ldr	r4, [pc, #60]	; (72c <init_buttons+0x44>)
     6ee:	4810      	ldr	r0, [pc, #64]	; (730 <init_buttons+0x48>)
     6f0:	4611      	mov	r1, r2
     6f2:	f00c f8e6 	bl	c8c2 <z_impl_k_sem_init>
     6f6:	4621      	mov	r1, r4
     6f8:	480e      	ldr	r0, [pc, #56]	; (734 <init_buttons+0x4c>)
     6fa:	f7ff ff45 	bl	588 <configure_callback.constprop.0>
    configure_callback(&mouse_two, button_callback, &callbacks[1]);
     6fe:	f104 010c 	add.w	r1, r4, #12
     702:	480d      	ldr	r0, [pc, #52]	; (738 <init_buttons+0x50>)
     704:	f7ff ff40 	bl	588 <configure_callback.constprop.0>
    configure_callback(&mouse_three, button_callback, &callbacks[2]);
     708:	f104 0118 	add.w	r1, r4, #24
     70c:	480b      	ldr	r0, [pc, #44]	; (73c <init_buttons+0x54>)
     70e:	f7ff ff3b 	bl	588 <configure_callback.constprop.0>
    configure_callback(&mouse_four, button_callback, &callbacks[3]);
     712:	f104 0124 	add.w	r1, r4, #36	; 0x24
     716:	480a      	ldr	r0, [pc, #40]	; (740 <init_buttons+0x58>)
     718:	f7ff ff36 	bl	588 <configure_callback.constprop.0>
    configure_callback(&mouse_five, button_callback, &callbacks[4]);
     71c:	4809      	ldr	r0, [pc, #36]	; (744 <init_buttons+0x5c>)
     71e:	f104 0130 	add.w	r1, r4, #48	; 0x30
     722:	f7ff ff31 	bl	588 <configure_callback.constprop.0>
}
     726:	2001      	movs	r0, #1
     728:	bd10      	pop	{r4, pc}
     72a:	bf00      	nop
     72c:	20000ba0 	.word	0x20000ba0
     730:	20000bdc 	.word	0x20000bdc
     734:	0000d098 	.word	0x0000d098
     738:	0000d090 	.word	0x0000d090
     73c:	0000d088 	.word	0x0000d088
     740:	0000d080 	.word	0x0000d080
     744:	0000d078 	.word	0x0000d078

00000748 <fetch_buttons>:

void fetch_buttons(uint8_t* button_array) {
     748:	b510      	push	{r4, lr}
     74a:	4604      	mov	r4, r0
    button_array[0] = gpio_pin_get_dt(&mouse_one);
     74c:	480a      	ldr	r0, [pc, #40]	; (778 <fetch_buttons+0x30>)
     74e:	f00a fb2d 	bl	adac <gpio_pin_get_dt>
     752:	7020      	strb	r0, [r4, #0]
    button_array[1] = gpio_pin_get_dt(&mouse_two);
     754:	4809      	ldr	r0, [pc, #36]	; (77c <fetch_buttons+0x34>)
     756:	f00a fb29 	bl	adac <gpio_pin_get_dt>
     75a:	7060      	strb	r0, [r4, #1]
    button_array[2] = gpio_pin_get_dt(&mouse_three);
     75c:	4808      	ldr	r0, [pc, #32]	; (780 <fetch_buttons+0x38>)
     75e:	f00a fb25 	bl	adac <gpio_pin_get_dt>
     762:	70a0      	strb	r0, [r4, #2]
    button_array[3] = gpio_pin_get_dt(&mouse_four);
     764:	4807      	ldr	r0, [pc, #28]	; (784 <fetch_buttons+0x3c>)
     766:	f00a fb21 	bl	adac <gpio_pin_get_dt>
     76a:	70e0      	strb	r0, [r4, #3]
    button_array[4] = gpio_pin_get_dt(&mouse_five);
     76c:	4806      	ldr	r0, [pc, #24]	; (788 <fetch_buttons+0x40>)
     76e:	f00a fb1d 	bl	adac <gpio_pin_get_dt>
     772:	7120      	strb	r0, [r4, #4]
}
     774:	bd10      	pop	{r4, pc}
     776:	bf00      	nop
     778:	0000d098 	.word	0x0000d098
     77c:	0000d090 	.word	0x0000d090
     780:	0000d088 	.word	0x0000d088
     784:	0000d080 	.word	0x0000d080
     788:	0000d078 	.word	0x0000d078

0000078c <main>:

LOG_MODULE_REGISTER(main, CONFIG_LOG_DEFAULT_LEVEL);

mouse_t mouse;

void main(void) {
     78c:	b510      	push	{r4, lr}
     78e:	b086      	sub	sp, #24
    LOG_INF("Starting mouse");
     790:	4b0f      	ldr	r3, [pc, #60]	; (7d0 <main+0x44>)
     792:	9305      	str	r3, [sp, #20]
     794:	2402      	movs	r4, #2
     796:	9404      	str	r4, [sp, #16]
     798:	2300      	movs	r3, #0
     79a:	aa04      	add	r2, sp, #16
     79c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     7a0:	480c      	ldr	r0, [pc, #48]	; (7d4 <main+0x48>)
     7a2:	f001 fdc9 	bl	2338 <z_impl_z_log_msg_static_create>
    init_mouse();
     7a6:	f000 f92b 	bl	a00 <init_mouse>
    LOG_INF("Mouse Initialized");
     7aa:	4b0b      	ldr	r3, [pc, #44]	; (7d8 <main+0x4c>)
     7ac:	e9cd 4304 	strd	r4, r3, [sp, #16]
     7b0:	4808      	ldr	r0, [pc, #32]	; (7d4 <main+0x48>)
     7b2:	2300      	movs	r3, #0
     7b4:	aa04      	add	r2, sp, #16
     7b6:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     7ba:	f001 fdbd 	bl	2338 <z_impl_z_log_msg_static_create>
	return z_impl_k_sleep(timeout);
     7be:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     7c2:	2100      	movs	r1, #0
     7c4:	f009 fffe 	bl	a7c4 <z_impl_k_sleep>
    k_sleep(K_MSEC(1000));
    for (;;) {
        handle_mouse_transmission();
     7c8:	f000 f986 	bl	ad8 <handle_mouse_transmission>
    for (;;) {
     7cc:	e7fc      	b.n	7c8 <main+0x3c>
     7ce:	bf00      	nop
     7d0:	0000d469 	.word	0x0000d469
     7d4:	0000cfb8 	.word	0x0000cfb8
     7d8:	0000d478 	.word	0x0000d478

000007dc <sensor_sample_fetch.constprop.0>:
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
     7dc:	4802      	ldr	r0, [pc, #8]	; (7e8 <sensor_sample_fetch.constprop.0+0xc>)
     7de:	6883      	ldr	r3, [r0, #8]
     7e0:	2139      	movs	r1, #57	; 0x39
     7e2:	68db      	ldr	r3, [r3, #12]
     7e4:	4718      	bx	r3
     7e6:	bf00      	nop
     7e8:	0000cef0 	.word	0x0000cef0

000007ec <sensor_channel_get.constprop.0.isra.0>:


extern int z_impl_sensor_channel_get(const struct device * dev, enum sensor_channel chan, struct sensor_value * val);

__pinned_func
static inline int sensor_channel_get(const struct device * dev, enum sensor_channel chan, struct sensor_value * val)
     7ec:	b410      	push	{r4}
     7ee:	4603      	mov	r3, r0
     7f0:	460a      	mov	r2, r1
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
     7f2:	4803      	ldr	r0, [pc, #12]	; (800 <CONFIG_ISR_STACK_SIZE>)
     7f4:	6881      	ldr	r1, [r0, #8]
     7f6:	690c      	ldr	r4, [r1, #16]
     7f8:	4619      	mov	r1, r3
     7fa:	4623      	mov	r3, r4
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_SENSOR_CHANNEL_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sensor_channel_get(dev, chan, val);
}
     7fc:	bc10      	pop	{r4}
     7fe:	4718      	bx	r3
     800:	0000cef0 	.word	0x0000cef0

00000804 <is_pmw3360_ready>:
     804:	4801      	ldr	r0, [pc, #4]	; (80c <is_pmw3360_ready+0x8>)
     806:	f00b bf6a 	b.w	c6de <z_device_is_ready>
     80a:	bf00      	nop
     80c:	0000cef0 	.word	0x0000cef0

00000810 <set_cpi>:

bool is_pmw3360_ready(void) {
    return device_is_ready(device);
}

bool set_cpi(uint16_t cpi) {
     810:	b513      	push	{r0, r1, r4, lr}
    const struct sensor_value val = {
     812:	2300      	movs	r3, #0
     814:	9000      	str	r0, [sp, #0]
     816:	9301      	str	r3, [sp, #4]
	const struct sensor_driver_api *api =
     818:	4807      	ldr	r0, [pc, #28]	; (838 <set_cpi+0x28>)
	if (api->attr_set == NULL) {
     81a:	6883      	ldr	r3, [r0, #8]
     81c:	681c      	ldr	r4, [r3, #0]
     81e:	b144      	cbz	r4, 832 <set_cpi+0x22>
	return api->attr_set(dev, chan, attr, val);
     820:	466b      	mov	r3, sp
     822:	220f      	movs	r2, #15
     824:	2139      	movs	r1, #57	; 0x39
     826:	47a0      	blx	r4
        .val2 = 0,
    };

    int err = sensor_attr_set(device, SENSOR_CHAN_ALL, PMW3360_ATTR_CPI, &val);
    return err == 0;
}
     828:	fab0 f080 	clz	r0, r0
     82c:	0940      	lsrs	r0, r0, #5
     82e:	b002      	add	sp, #8
     830:	bd10      	pop	{r4, pc}
		return -ENOSYS;
     832:	f06f 0057 	mvn.w	r0, #87	; 0x57
     836:	e7f7      	b.n	828 <set_cpi+0x18>
     838:	0000cef0 	.word	0x0000cef0

0000083c <get_cpi>:

uint16_t get_cpi(void) {
     83c:	b590      	push	{r4, r7, lr}
     83e:	b083      	sub	sp, #12
     840:	af00      	add	r7, sp, #0
    struct sensor_value cpi;
    int err = sensor_sample_fetch(device);
     842:	f7ff ffcb 	bl	7dc <sensor_sample_fetch.constprop.0>
    
    if (err) {
     846:	b1a0      	cbz	r0, 872 <__z_interrupt_stack_SIZEOF+0x32>
        LOG_ERR("Failed to fetch sensor sample: %d", err);
     848:	466c      	mov	r4, sp
     84a:	b088      	sub	sp, #32
     84c:	466a      	mov	r2, sp
     84e:	4b0c      	ldr	r3, [pc, #48]	; (880 <__z_interrupt_stack_SIZEOF+0x40>)
     850:	e9c2 3005 	strd	r3, r0, [r2, #20]
     854:	2303      	movs	r3, #3
     856:	f842 3f10 	str.w	r3, [r2, #16]!
     85a:	480a      	ldr	r0, [pc, #40]	; (884 <__z_interrupt_stack_SIZEOF+0x44>)
     85c:	2300      	movs	r3, #0
     85e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
     862:	f001 fd69 	bl	2338 <z_impl_z_log_msg_static_create>
        return -1;
     866:	f64f 70ff 	movw	r0, #65535	; 0xffff
     86a:	46a5      	mov	sp, r4

    sensor_channel_get(device, PMW3360_ATTR_CPI, &cpi);
    LOG_DBG("Sensor CPI.val1: %u", cpi.val1);
    LOG_DBG("Sensor CPI.val2: %u", cpi.val2);
    return cpi.val1;
}
     86c:	370c      	adds	r7, #12
     86e:	46bd      	mov	sp, r7
     870:	bd90      	pop	{r4, r7, pc}
    sensor_channel_get(device, PMW3360_ATTR_CPI, &cpi);
     872:	200f      	movs	r0, #15
     874:	4639      	mov	r1, r7
     876:	f7ff ffb9 	bl	7ec <sensor_channel_get.constprop.0.isra.0>
    return cpi.val1;
     87a:	8838      	ldrh	r0, [r7, #0]
     87c:	e7f6      	b.n	86c <__z_interrupt_stack_SIZEOF+0x2c>
     87e:	bf00      	nop
     880:	0000d48f 	.word	0x0000d48f
     884:	0000cfc0 	.word	0x0000cfc0

00000888 <set_sensor_trigger>:

void set_sensor_trigger(void (*handler)(const struct device *dev, const struct sensor_trigger *trig)) {
     888:	b507      	push	{r0, r1, r2, lr}
    struct sensor_trigger trig = {
     88a:	4b06      	ldr	r3, [pc, #24]	; (8a4 <set_sensor_trigger+0x1c>)
void set_sensor_trigger(void (*handler)(const struct device *dev, const struct sensor_trigger *trig)) {
     88c:	4602      	mov	r2, r0
    struct sensor_trigger trig = {
     88e:	6818      	ldr	r0, [r3, #0]
     890:	9001      	str	r0, [sp, #4]
	const struct sensor_driver_api *api =
     892:	4805      	ldr	r0, [pc, #20]	; (8a8 <set_sensor_trigger+0x20>)
	if (api->trigger_set == NULL) {
     894:	6883      	ldr	r3, [r0, #8]
     896:	689b      	ldr	r3, [r3, #8]
     898:	b10b      	cbz	r3, 89e <set_sensor_trigger+0x16>
	return api->trigger_set(dev, trig, handler);
     89a:	a901      	add	r1, sp, #4
     89c:	4798      	blx	r3
        .type = SENSOR_TRIG_DATA_READY,
        .chan = SENSOR_CHAN_ALL,
    };

    sensor_trigger_set(device, &trig, handler);
}
     89e:	b003      	add	sp, #12
     8a0:	f85d fb04 	ldr.w	pc, [sp], #4
     8a4:	0000d060 	.word	0x0000d060
     8a8:	0000cef0 	.word	0x0000cef0

000008ac <enable_data_interrupt>:

void enable_data_interrupt(void) {
    set_sensor_trigger(interrupt_handler);
     8ac:	4801      	ldr	r0, [pc, #4]	; (8b4 <enable_data_interrupt+0x8>)
     8ae:	f7ff bfeb 	b.w	888 <set_sensor_trigger>
     8b2:	bf00      	nop
     8b4:	000009bd 	.word	0x000009bd

000008b8 <configure_pmw3360>:
    motion_data.dx += new_motion_data.dx;
    motion_data.dy += new_motion_data.dy;
    k_mutex_unlock(&motion_mutex);
}

bool configure_pmw3360(void) {
     8b8:	b5b0      	push	{r4, r5, r7, lr}
     8ba:	b086      	sub	sp, #24
     8bc:	af00      	add	r7, sp, #0
    if (sensor_sample_fetch(device) == -EBUSY) {
     8be:	f7ff ff8d 	bl	7dc <sensor_sample_fetch.constprop.0>
     8c2:	3010      	adds	r0, #16
     8c4:	d011      	beq.n	8ea <configure_pmw3360+0x32>
        return false;
    }

    if (!set_cpi(800)) {
     8c6:	f44f 7048 	mov.w	r0, #800	; 0x320
     8ca:	f7ff ffa1 	bl	810 <set_cpi>
     8ce:	4604      	mov	r4, r0
     8d0:	b980      	cbnz	r0, 8f4 <configure_pmw3360+0x3c>
        LOG_ERR("Failed to set CPI");
     8d2:	4b19      	ldr	r3, [pc, #100]	; (938 <configure_pmw3360+0x80>)
     8d4:	617b      	str	r3, [r7, #20]
     8d6:	2302      	movs	r3, #2
     8d8:	613b      	str	r3, [r7, #16]
     8da:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     8de:	4603      	mov	r3, r0
     8e0:	f107 0210 	add.w	r2, r7, #16
     8e4:	4815      	ldr	r0, [pc, #84]	; (93c <configure_pmw3360+0x84>)
     8e6:	f001 fd27 	bl	2338 <z_impl_z_log_msg_static_create>
        return false;
     8ea:	2400      	movs	r4, #0

    LOG_INF("CPI is now %u", cpi);
    LOG_INF("Enabling Interrupts");
    enable_data_interrupt();
    return true;
}
     8ec:	4620      	mov	r0, r4
     8ee:	3718      	adds	r7, #24
     8f0:	46bd      	mov	sp, r7
     8f2:	bdb0      	pop	{r4, r5, r7, pc}
    uint16_t cpi = get_cpi();
     8f4:	f7ff ffa2 	bl	83c <get_cpi>
    LOG_INF("CPI is now %u", cpi);
     8f8:	466d      	mov	r5, sp
     8fa:	b088      	sub	sp, #32
     8fc:	466a      	mov	r2, sp
     8fe:	4b10      	ldr	r3, [pc, #64]	; (940 <configure_pmw3360+0x88>)
     900:	e9c2 3005 	strd	r3, r0, [r2, #20]
     904:	2303      	movs	r3, #3
     906:	f842 3f10 	str.w	r3, [r2, #16]!
     90a:	480c      	ldr	r0, [pc, #48]	; (93c <configure_pmw3360+0x84>)
     90c:	2300      	movs	r3, #0
     90e:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
     912:	f001 fd11 	bl	2338 <z_impl_z_log_msg_static_create>
     916:	46ad      	mov	sp, r5
    LOG_INF("Enabling Interrupts");
     918:	4b0a      	ldr	r3, [pc, #40]	; (944 <configure_pmw3360+0x8c>)
     91a:	617b      	str	r3, [r7, #20]
     91c:	2302      	movs	r3, #2
     91e:	613b      	str	r3, [r7, #16]
     920:	4806      	ldr	r0, [pc, #24]	; (93c <configure_pmw3360+0x84>)
     922:	2300      	movs	r3, #0
     924:	f107 0210 	add.w	r2, r7, #16
     928:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     92c:	f001 fd04 	bl	2338 <z_impl_z_log_msg_static_create>
    enable_data_interrupt();
     930:	f7ff ffbc 	bl	8ac <enable_data_interrupt>
    return true;
     934:	e7da      	b.n	8ec <configure_pmw3360+0x34>
     936:	bf00      	nop
     938:	0000d4b1 	.word	0x0000d4b1
     93c:	0000cfc0 	.word	0x0000cfc0
     940:	0000d4c3 	.word	0x0000d4c3
     944:	0000d4d1 	.word	0x0000d4d1

00000948 <read_motion>:

motion_info_t read_motion(void) {
     948:	b590      	push	{r4, r7, lr}
     94a:	b087      	sub	sp, #28
     94c:	af00      	add	r7, sp, #0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
     94e:	f00b fc5f 	bl	c210 <sys_clock_cycle_get_32>
    struct sensor_value dx, dy;
    uint32_t start_time = get_timestamp();

    int err = sensor_sample_fetch(device);
     952:	f7ff ff43 	bl	7dc <sensor_sample_fetch.constprop.0>

    if (err) {
     956:	b1d8      	cbz	r0, 990 <read_motion+0x48>
        LOG_ERR("Failed to fetch sensor sample: %d", err);
     958:	466c      	mov	r4, sp
     95a:	b088      	sub	sp, #32
     95c:	466a      	mov	r2, sp
     95e:	4b15      	ldr	r3, [pc, #84]	; (9b4 <read_motion+0x6c>)
     960:	e9c2 3005 	strd	r3, r0, [r2, #20]
     964:	2303      	movs	r3, #3
     966:	f842 3f10 	str.w	r3, [r2, #16]!
     96a:	2300      	movs	r3, #0
     96c:	4812      	ldr	r0, [pc, #72]	; (9b8 <read_motion+0x70>)
     96e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
     972:	f001 fce1 	bl	2338 <z_impl_z_log_msg_static_create>
     976:	2200      	movs	r2, #0
     978:	46a5      	mov	sp, r4
        return (motion_info_t){ .dx = 0, .dy = 0 };
     97a:	4613      	mov	r3, r2
    // dy is negative due to sensor
    motion_info_t info;
    info.dx = dx.val1;
    info.dy = -dy.val1;
    return info;
}
     97c:	b292      	uxth	r2, r2
     97e:	2000      	movs	r0, #0
     980:	f362 000f 	bfi	r0, r2, #0, #16
     984:	b29b      	uxth	r3, r3
     986:	f363 401f 	bfi	r0, r3, #16, #16
     98a:	371c      	adds	r7, #28
     98c:	46bd      	mov	sp, r7
     98e:	bd90      	pop	{r4, r7, pc}
    sensor_channel_get(device, SENSOR_CHAN_POS_DX, &dx);
     990:	f107 0108 	add.w	r1, r7, #8
     994:	2023      	movs	r0, #35	; 0x23
     996:	f7ff ff29 	bl	7ec <sensor_channel_get.constprop.0.isra.0>
    sensor_channel_get(device, SENSOR_CHAN_POS_DY, &dy);
     99a:	f107 0110 	add.w	r1, r7, #16
     99e:	2024      	movs	r0, #36	; 0x24
     9a0:	f7ff ff24 	bl	7ec <sensor_channel_get.constprop.0.isra.0>
     9a4:	f00b fc34 	bl	c210 <sys_clock_cycle_get_32>
    info.dy = -dy.val1;
     9a8:	693b      	ldr	r3, [r7, #16]
    info.dx = dx.val1;
     9aa:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
    info.dy = -dy.val1;
     9ae:	425b      	negs	r3, r3
     9b0:	b21b      	sxth	r3, r3
    return info;
     9b2:	e7e3      	b.n	97c <read_motion+0x34>
     9b4:	0000d48f 	.word	0x0000d48f
     9b8:	0000cfc0 	.word	0x0000cfc0

000009bc <interrupt_handler>:
void interrupt_handler(const struct device *dev, const struct sensor_trigger *trig) {
     9bc:	b513      	push	{r0, r1, r4, lr}
    motion_info_t new_motion_data = read_motion();
     9be:	f7ff ffc3 	bl	948 <read_motion>
     9c2:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
     9c4:	4c0c      	ldr	r4, [pc, #48]	; (9f8 <interrupt_handler+0x3c>)
     9c6:	f04f 32ff 	mov.w	r2, #4294967295
     9ca:	f04f 33ff 	mov.w	r3, #4294967295
     9ce:	4620      	mov	r0, r4
     9d0:	f009 f968 	bl	9ca4 <z_impl_k_mutex_lock>
    motion_data.dx += new_motion_data.dx;
     9d4:	4b09      	ldr	r3, [pc, #36]	; (9fc <interrupt_handler+0x40>)
     9d6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
     9da:	881a      	ldrh	r2, [r3, #0]
     9dc:	440a      	add	r2, r1
     9de:	801a      	strh	r2, [r3, #0]
    motion_data.dy += new_motion_data.dy;
     9e0:	f8bd 1006 	ldrh.w	r1, [sp, #6]
     9e4:	885a      	ldrh	r2, [r3, #2]
     9e6:	440a      	add	r2, r1
     9e8:	805a      	strh	r2, [r3, #2]
	return z_impl_k_mutex_unlock(mutex);
     9ea:	4620      	mov	r0, r4
}
     9ec:	b002      	add	sp, #8
     9ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     9f2:	f009 b9d1 	b.w	9d98 <z_impl_k_mutex_unlock>
     9f6:	bf00      	nop
     9f8:	200002e4 	.word	0x200002e4
     9fc:	20001b48 	.word	0x20001b48

00000a00 <init_mouse>:

K_FIFO_DEFINE(mouse_fifo);

static mouse_t mouse_data;

int init_mouse() {
     a00:	b510      	push	{r4, lr}
     a02:	b086      	sub	sp, #24
    while (!is_pmw3360_ready()) {
     a04:	f7ff fefe 	bl	804 <is_pmw3360_ready>
     a08:	2800      	cmp	r0, #0
     a0a:	d03f      	beq.n	a8c <init_mouse+0x8c>
        LOG_DBG("PMW3360 not ready");
        k_sleep(K_MSEC(1));
    }
    LOG_INF("PMW3360 is ready");
     a0c:	4b2c      	ldr	r3, [pc, #176]	; (ac0 <init_mouse+0xc0>)
     a0e:	9305      	str	r3, [sp, #20]
     a10:	2302      	movs	r3, #2
     a12:	9304      	str	r3, [sp, #16]
     a14:	482b      	ldr	r0, [pc, #172]	; (ac4 <init_mouse+0xc4>)
     a16:	2300      	movs	r3, #0
     a18:	aa04      	add	r2, sp, #16
     a1a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     a1e:	f001 fc8b 	bl	2338 <z_impl_z_log_msg_static_create>

    while (!init_buttons()) {
     a22:	f7ff fe61 	bl	6e8 <init_buttons>
     a26:	2800      	cmp	r0, #0
     a28:	d035      	beq.n	a96 <init_mouse+0x96>
        LOG_DBG("Buttons not ready");
        k_sleep(K_MSEC(1));
    }
    LOG_INF("Buttons are ready");
     a2a:	4b27      	ldr	r3, [pc, #156]	; (ac8 <init_mouse+0xc8>)
     a2c:	9305      	str	r3, [sp, #20]
     a2e:	2302      	movs	r3, #2
     a30:	9304      	str	r3, [sp, #16]
     a32:	4824      	ldr	r0, [pc, #144]	; (ac4 <init_mouse+0xc4>)
     a34:	2300      	movs	r3, #0
     a36:	aa04      	add	r2, sp, #16
     a38:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     a3c:	f001 fc7c 	bl	2338 <z_impl_z_log_msg_static_create>

    while (init_wheel() != 0) {
     a40:	f000 f922 	bl	c88 <init_wheel>
     a44:	4603      	mov	r3, r0
     a46:	bb58      	cbnz	r0, aa0 <init_mouse+0xa0>
        LOG_DBG("Wheel not ready");
        k_sleep(K_MSEC(1));
    }
    LOG_INF("Wheel Encoder is ready");
     a48:	4a20      	ldr	r2, [pc, #128]	; (acc <init_mouse+0xcc>)
     a4a:	9205      	str	r2, [sp, #20]
     a4c:	2202      	movs	r2, #2
     a4e:	9204      	str	r2, [sp, #16]
     a50:	481c      	ldr	r0, [pc, #112]	; (ac4 <init_mouse+0xc4>)
     a52:	aa04      	add	r2, sp, #16
     a54:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     a58:	f001 fc6e 	bl	2338 <z_impl_z_log_msg_static_create>
    while (!configure_pmw3360()) {
     a5c:	f7ff ff2c 	bl	8b8 <configure_pmw3360>
     a60:	b318      	cbz	r0, aaa <init_mouse+0xaa>
        LOG_DBG("Configuring PMW3360 is not ready");
        k_sleep(K_MSEC(1));
    }

    while(init_usb() != 0) {
     a62:	f000 f891 	bl	b88 <init_usb>
     a66:	4604      	mov	r4, r0
     a68:	bb20      	cbnz	r0, ab4 <init_mouse+0xb4>
        LOG_DBG("Configuring USB is not ready");
        k_sleep(K_MSEC(1));
    }
    LOG_INF("USB is ready");
     a6a:	4b19      	ldr	r3, [pc, #100]	; (ad0 <init_mouse+0xd0>)
     a6c:	9305      	str	r3, [sp, #20]
     a6e:	2302      	movs	r3, #2
     a70:	9304      	str	r3, [sp, #16]
     a72:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     a76:	4603      	mov	r3, r0
     a78:	aa04      	add	r2, sp, #16
     a7a:	4812      	ldr	r0, [pc, #72]	; (ac4 <init_mouse+0xc4>)
     a7c:	f001 fc5c 	bl	2338 <z_impl_z_log_msg_static_create>
	z_impl_k_queue_init(queue);
     a80:	4814      	ldr	r0, [pc, #80]	; (ad4 <init_mouse+0xd4>)
     a82:	f00b ff0b 	bl	c89c <z_impl_k_queue_init>
    k_fifo_init(&mouse_fifo);
    return 0;
}
     a86:	4620      	mov	r0, r4
     a88:	b006      	add	sp, #24
     a8a:	bd10      	pop	{r4, pc}
        k_sleep(K_MSEC(1));
     a8c:	2021      	movs	r0, #33	; 0x21
     a8e:	2100      	movs	r1, #0
     a90:	f00a f991 	bl	adb6 <k_sleep.constprop.0.isra.0>
     a94:	e7b6      	b.n	a04 <init_mouse+0x4>
        k_sleep(K_MSEC(1));
     a96:	2021      	movs	r0, #33	; 0x21
     a98:	2100      	movs	r1, #0
     a9a:	f00a f98c 	bl	adb6 <k_sleep.constprop.0.isra.0>
     a9e:	e7c0      	b.n	a22 <init_mouse+0x22>
        k_sleep(K_MSEC(1));
     aa0:	2021      	movs	r0, #33	; 0x21
     aa2:	2100      	movs	r1, #0
     aa4:	f00a f987 	bl	adb6 <k_sleep.constprop.0.isra.0>
     aa8:	e7ca      	b.n	a40 <init_mouse+0x40>
        k_sleep(K_MSEC(1));
     aaa:	2021      	movs	r0, #33	; 0x21
     aac:	2100      	movs	r1, #0
     aae:	f00a f982 	bl	adb6 <k_sleep.constprop.0.isra.0>
     ab2:	e7d3      	b.n	a5c <init_mouse+0x5c>
        k_sleep(K_MSEC(1));
     ab4:	2021      	movs	r0, #33	; 0x21
     ab6:	2100      	movs	r1, #0
     ab8:	f00a f97d 	bl	adb6 <k_sleep.constprop.0.isra.0>
     abc:	e7d1      	b.n	a62 <init_mouse+0x62>
     abe:	bf00      	nop
     ac0:	0000d4f3 	.word	0x0000d4f3
     ac4:	0000cfc8 	.word	0x0000cfc8
     ac8:	0000d504 	.word	0x0000d504
     acc:	0000d516 	.word	0x0000d516
     ad0:	0000d52d 	.word	0x0000d52d
     ad4:	20000330 	.word	0x20000330

00000ad8 <handle_mouse_transmission>:
void update_mouse(mouse_t* mouse) {
    mouse->wheel_data = fetch_wheel_data();
    mouse->motion_info = read_motion();
    fetch_buttons(&(mouse->button_states));
}
void handle_mouse_transmission(void) {
     ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
     ada:	b085      	sub	sp, #20
    static message_t messages[2];
    static int current_message_index = 0;

    mouse_t new_data;
    update_mouse(&new_data);
     adc:	ad01      	add	r5, sp, #4
     ade:	4628      	mov	r0, r5
     ae0:	f00a f96b 	bl	adba <update_mouse>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
     ae4:	4c1f      	ldr	r4, [pc, #124]	; (b64 <handle_mouse_transmission+0x8c>)

    if (!k_fifo_is_empty(&mouse_fifo)) {
     ae6:	6823      	ldr	r3, [r4, #0]
     ae8:	b333      	cbz	r3, b38 <handle_mouse_transmission+0x60>
	return z_impl_k_queue_get(queue, timeout);
     aea:	2200      	movs	r2, #0
     aec:	2300      	movs	r3, #0
     aee:	4620      	mov	r0, r4
     af0:	f009 f98e 	bl	9e10 <z_impl_k_queue_get>
        message_t *prev_message = k_fifo_get(&mouse_fifo, K_NO_WAIT);
        prev_message->data.motion_info.dx += new_data.motion_info.dx;
     af4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
     af8:	88c3      	ldrh	r3, [r0, #6]
     afa:	4413      	add	r3, r2
     afc:	80c3      	strh	r3, [r0, #6]
        prev_message->data.motion_info.dy += new_data.motion_info.dy;
     afe:	f8bd 2008 	ldrh.w	r2, [sp, #8]
     b02:	8903      	ldrh	r3, [r0, #8]
     b04:	4413      	add	r3, r2
     b06:	8103      	strh	r3, [r0, #8]
        prev_message->data.wheel_data.rotation += new_data.wheel_data.rotation;
     b08:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     b0c:	8883      	ldrh	r3, [r0, #4]
     b0e:	4413      	add	r3, r2
     b10:	4601      	mov	r1, r0
     b12:	8083      	strh	r3, [r0, #4]
        k_fifo_put(&mouse_fifo, prev_message);
     b14:	4620      	mov	r0, r4
     b16:	f00b fec9 	bl	c8ac <k_queue_append>
        messages[current_message_index].data = new_data;
        k_fifo_put(&mouse_fifo, &messages[current_message_index]);
        current_message_index = (current_message_index + 1) % 2;
    }

    if (!line_busy() && !k_fifo_is_empty(&mouse_fifo)) {
     b1a:	f000 f8af 	bl	c7c <line_busy>
     b1e:	b948      	cbnz	r0, b34 <handle_mouse_transmission+0x5c>
     b20:	6823      	ldr	r3, [r4, #0]
     b22:	b13b      	cbz	r3, b34 <handle_mouse_transmission+0x5c>
     b24:	480f      	ldr	r0, [pc, #60]	; (b64 <handle_mouse_transmission+0x8c>)
     b26:	2200      	movs	r2, #0
     b28:	2300      	movs	r3, #0
     b2a:	f009 f971 	bl	9e10 <z_impl_k_queue_get>
        message_t *message_to_send = k_fifo_get(&mouse_fifo, K_NO_WAIT);
        hid_write(&message_to_send->data);
     b2e:	3004      	adds	r0, #4
     b30:	f000 f86e 	bl	c10 <hid_write>
    }
}
     b34:	b005      	add	sp, #20
     b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
        messages[current_message_index].data = new_data;
     b38:	4e0b      	ldr	r6, [pc, #44]	; (b68 <handle_mouse_transmission+0x90>)
     b3a:	4b0c      	ldr	r3, [pc, #48]	; (b6c <handle_mouse_transmission+0x94>)
     b3c:	6832      	ldr	r2, [r6, #0]
     b3e:	eb03 1302 	add.w	r3, r3, r2, lsl #4
     b42:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
     b46:	1d1f      	adds	r7, r3, #4
     b48:	e887 0007 	stmia.w	r7, {r0, r1, r2}
        k_fifo_put(&mouse_fifo, &messages[current_message_index]);
     b4c:	4619      	mov	r1, r3
     b4e:	4620      	mov	r0, r4
     b50:	f00b feac 	bl	c8ac <k_queue_append>
        current_message_index = (current_message_index + 1) % 2;
     b54:	6833      	ldr	r3, [r6, #0]
     b56:	3301      	adds	r3, #1
     b58:	f003 0301 	and.w	r3, r3, #1
     b5c:	bf48      	it	mi
     b5e:	425b      	negmi	r3, r3
     b60:	6033      	str	r3, [r6, #0]
     b62:	e7da      	b.n	b1a <handle_mouse_transmission+0x42>
     b64:	20000330 	.word	0x20000330
     b68:	20000c0c 	.word	0x20000c0c
     b6c:	20000bec 	.word	0x20000bec

00000b70 <int_in_ready_cb>:
static uint8_t message_buffer[MESSAGE_SIZE];
static bool transmission_busy = false;

void int_in_ready_cb(const struct device *dev) {
    ARG_UNUSED(dev);
    transmission_busy = false;
     b70:	4b01      	ldr	r3, [pc, #4]	; (b78 <int_in_ready_cb+0x8>)
     b72:	2200      	movs	r2, #0
     b74:	701a      	strb	r2, [r3, #0]
}
     b76:	4770      	bx	lr
     b78:	20001b4e 	.word	0x20001b4e

00000b7c <status_callback>:

void status_callback(enum usb_dc_status_code status, const uint8_t *param) {
    usb_device.status = status;
     b7c:	4b01      	ldr	r3, [pc, #4]	; (b84 <status_callback+0x8>)
     b7e:	7118      	strb	r0, [r3, #4]
}
     b80:	4770      	bx	lr
     b82:	bf00      	nop
     b84:	20000c10 	.word	0x20000c10

00000b88 <init_usb>:

static const struct hid_ops ops = {
    .int_in_ready = int_in_ready_cb
};

int init_usb(void) {
     b88:	b510      	push	{r4, lr}
     b8a:	b086      	sub	sp, #24
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     b8c:	4818      	ldr	r0, [pc, #96]	; (bf0 <init_usb+0x68>)
    usb_device.dev = device_get_binding(HID_DEVICE_ID); 
     b8e:	4c19      	ldr	r4, [pc, #100]	; (bf4 <init_usb+0x6c>)
     b90:	f008 fdda 	bl	9748 <z_impl_device_get_binding>
     b94:	4603      	mov	r3, r0
     b96:	6020      	str	r0, [r4, #0]
    if (!usb_device.dev) {
     b98:	b970      	cbnz	r0, bb8 <init_usb+0x30>
        LOG_ERR("Failed to get USB device binding");
     b9a:	4a17      	ldr	r2, [pc, #92]	; (bf8 <init_usb+0x70>)
     b9c:	9205      	str	r2, [sp, #20]
     b9e:	2202      	movs	r2, #2
     ba0:	9204      	str	r2, [sp, #16]
     ba2:	4816      	ldr	r0, [pc, #88]	; (bfc <init_usb+0x74>)
     ba4:	aa04      	add	r2, sp, #16
     ba6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
        return -ENODEV;
     baa:	f06f 0412 	mvn.w	r4, #18
     bae:	f001 fbc3 	bl	2338 <z_impl_z_log_msg_static_create>
        LOG_ERR("Failed to initialize USB HID");
        return err;
    }

    return usb_enable(status_callback);
}
     bb2:	4620      	mov	r0, r4
     bb4:	b006      	add	sp, #24
     bb6:	bd10      	pop	{r4, pc}
    usb_hid_register_device(
     bb8:	4b11      	ldr	r3, [pc, #68]	; (c00 <init_usb+0x78>)
     bba:	4912      	ldr	r1, [pc, #72]	; (c04 <init_usb+0x7c>)
     bbc:	223e      	movs	r2, #62	; 0x3e
     bbe:	f003 ff29 	bl	4a14 <usb_hid_register_device>
    int err = usb_hid_init(usb_device.dev);
     bc2:	6820      	ldr	r0, [r4, #0]
     bc4:	f00b f8bd 	bl	bd42 <usb_hid_init>
    if (err) {
     bc8:	4604      	mov	r4, r0
     bca:	b158      	cbz	r0, be4 <init_usb+0x5c>
        LOG_ERR("Failed to initialize USB HID");
     bcc:	4b0e      	ldr	r3, [pc, #56]	; (c08 <init_usb+0x80>)
     bce:	9305      	str	r3, [sp, #20]
     bd0:	2302      	movs	r3, #2
     bd2:	9304      	str	r3, [sp, #16]
     bd4:	4809      	ldr	r0, [pc, #36]	; (bfc <init_usb+0x74>)
     bd6:	2300      	movs	r3, #0
     bd8:	aa04      	add	r2, sp, #16
     bda:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     bde:	f001 fbab 	bl	2338 <z_impl_z_log_msg_static_create>
        return err;
     be2:	e7e6      	b.n	bb2 <init_usb+0x2a>
    return usb_enable(status_callback);
     be4:	4809      	ldr	r0, [pc, #36]	; (c0c <init_usb+0x84>)
}
     be6:	b006      	add	sp, #24
     be8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return usb_enable(status_callback);
     bec:	f002 bc48 	b.w	3480 <usb_enable>
     bf0:	0000d54a 	.word	0x0000d54a
     bf4:	20000c10 	.word	0x20000c10
     bf8:	0000d550 	.word	0x0000d550
     bfc:	0000d010 	.word	0x0000d010
     c00:	0000d0a0 	.word	0x0000d0a0
     c04:	0000d592 	.word	0x0000d592
     c08:	0000d571 	.word	0x0000d571
     c0c:	00000b7d 	.word	0x00000b7d

00000c10 <hid_write>:

int hid_write(const mouse_t* mouse) {
    uint8_t button_bm = 0;
    for (size_t i = 0; i < 5; i++) {
     c10:	2300      	movs	r3, #0
int hid_write(const mouse_t* mouse) {
     c12:	b570      	push	{r4, r5, r6, lr}
     c14:	1d42      	adds	r2, r0, #5
    uint8_t button_bm = 0;
     c16:	461d      	mov	r5, r3
        if (mouse->button_states[i]) {
            button_bm |= (1 << i);
     c18:	2101      	movs	r1, #1
        if (mouse->button_states[i]) {
     c1a:	f812 4f01 	ldrb.w	r4, [r2, #1]!
     c1e:	b11c      	cbz	r4, c28 <hid_write+0x18>
            button_bm |= (1 << i);
     c20:	fa01 f403 	lsl.w	r4, r1, r3
     c24:	4325      	orrs	r5, r4
     c26:	b2ed      	uxtb	r5, r5
    for (size_t i = 0; i < 5; i++) {
     c28:	3301      	adds	r3, #1
     c2a:	2b05      	cmp	r3, #5
     c2c:	d1f5      	bne.n	c1a <hid_write+0xa>
    uint8_t y_buf[sizeof(mouse->motion_info.dy)];

    sys_put_le16(mouse->motion_info.dx, x_buf);
    sys_put_le16(mouse->motion_info.dy, y_buf);

    message_buffer[0] = 0x01;
     c2e:	4910      	ldr	r1, [pc, #64]	; (c70 <hid_write+0x60>)
    sys_put_le16(mouse->motion_info.dx, x_buf);
     c30:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
     c34:	7903      	ldrb	r3, [r0, #4]
    message_buffer[1] = button_bm;
     c36:	704d      	strb	r5, [r1, #1]
    message_buffer[0] = 0x01;
     c38:	2401      	movs	r4, #1
     c3a:	700c      	strb	r4, [r1, #0]
    sys_put_le16(mouse->motion_info.dy, y_buf);
     c3c:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
    message_buffer[2] = mouse->wheel_data.rotation;
     c40:	8800      	ldrh	r0, [r0, #0]
     c42:	70ca      	strb	r2, [r1, #3]
    message_buffer[3] = x_buf[0];
    message_buffer[4] = (y_buf[0] << 4) | (x_buf[1] & 0x0f);
     c44:	f3c2 2203 	ubfx	r2, r2, #8, #4
     c48:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
    message_buffer[2] = mouse->wheel_data.rotation;
     c4c:	7088      	strb	r0, [r1, #2]
    message_buffer[4] = (y_buf[0] << 4) | (x_buf[1] & 0x0f);
     c4e:	710a      	strb	r2, [r1, #4]
    message_buffer[5] = (y_buf[1] << 4) | (y_buf[0] >> 4);

    int err = hid_int_ep_write(usb_device.dev, message_buffer, MESSAGE_SIZE, NULL);
     c50:	4808      	ldr	r0, [pc, #32]	; (c74 <hid_write+0x64>)
    message_buffer[5] = (y_buf[1] << 4) | (y_buf[0] >> 4);
     c52:	f3c6 2207 	ubfx	r2, r6, #8, #8
     c56:	091b      	lsrs	r3, r3, #4
     c58:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
     c5c:	714b      	strb	r3, [r1, #5]
    int err = hid_int_ep_write(usb_device.dev, message_buffer, MESSAGE_SIZE, NULL);
     c5e:	6800      	ldr	r0, [r0, #0]
     c60:	2300      	movs	r3, #0
     c62:	2206      	movs	r2, #6
     c64:	f003 feec 	bl	4a40 <hid_int_ep_write>
    if (err == 0) {
     c68:	b908      	cbnz	r0, c6e <hid_write+0x5e>
        transmission_busy = true;
     c6a:	4b03      	ldr	r3, [pc, #12]	; (c78 <hid_write+0x68>)
     c6c:	701c      	strb	r4, [r3, #0]
    }
    return err;
}
     c6e:	bd70      	pop	{r4, r5, r6, pc}
     c70:	20001b4f 	.word	0x20001b4f
     c74:	20000c10 	.word	0x20000c10
     c78:	20001b4e 	.word	0x20001b4e

00000c7c <line_busy>:

bool line_busy(void) {
    return transmission_busy;
}
     c7c:	4b01      	ldr	r3, [pc, #4]	; (c84 <line_busy+0x8>)
     c7e:	7818      	ldrb	r0, [r3, #0]
     c80:	4770      	bx	lr
     c82:	bf00      	nop
     c84:	20001b4e 	.word	0x20001b4e

00000c88 <init_wheel>:

LOG_MODULE_REGISTER(wheel, CONFIG_LOG_DEFAULT_LEVEL);

static const struct device *qdec_dev = DEVICE_DT_GET(DT_NODELABEL(qdec));

int init_wheel(void) {
     c88:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
     c8a:	480b      	ldr	r0, [pc, #44]	; (cb8 <init_wheel+0x30>)
     c8c:	f00b fd27 	bl	c6de <z_device_is_ready>
    if (!device_is_ready(qdec_dev)) {
     c90:	4603      	mov	r3, r0
     c92:	b970      	cbnz	r0, cb2 <init_wheel+0x2a>
        LOG_ERR("QDEC not ready!");
     c94:	4a09      	ldr	r2, [pc, #36]	; (cbc <init_wheel+0x34>)
     c96:	9205      	str	r2, [sp, #20]
     c98:	2202      	movs	r2, #2
     c9a:	9204      	str	r2, [sp, #16]
     c9c:	4808      	ldr	r0, [pc, #32]	; (cc0 <init_wheel+0x38>)
     c9e:	aa04      	add	r2, sp, #16
     ca0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     ca4:	f001 fb48 	bl	2338 <z_impl_z_log_msg_static_create>
        return -1;
     ca8:	f04f 30ff 	mov.w	r0, #4294967295
    }
    return 0;
}
     cac:	b007      	add	sp, #28
     cae:	f85d fb04 	ldr.w	pc, [sp], #4
    return 0;
     cb2:	2000      	movs	r0, #0
     cb4:	e7fa      	b.n	cac <init_wheel+0x24>
     cb6:	bf00      	nop
     cb8:	0000cec0 	.word	0x0000cec0
     cbc:	0000d5d0 	.word	0x0000d5d0
     cc0:	0000d040 	.word	0x0000d040

00000cc4 <fetch_wheel_data>:

wheel_data_t fetch_wheel_data() {
     cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
     cc6:	4c07      	ldr	r4, [pc, #28]	; (ce4 <fetch_wheel_data+0x20>)
     cc8:	68a5      	ldr	r5, [r4, #8]
     cca:	2139      	movs	r1, #57	; 0x39
     ccc:	68eb      	ldr	r3, [r5, #12]
     cce:	4620      	mov	r0, r4
     cd0:	4798      	blx	r3
	return api->channel_get(dev, chan, val);
     cd2:	2122      	movs	r1, #34	; 0x22
     cd4:	692b      	ldr	r3, [r5, #16]
     cd6:	466a      	mov	r2, sp
     cd8:	4620      	mov	r0, r4
     cda:	4798      	blx	r3
    wheel_data_t data;
    /* Negative as thats what USB expects */
    data.rotation = -wheel;

    return data;
}
     cdc:	9800      	ldr	r0, [sp, #0]
     cde:	4240      	negs	r0, r0
     ce0:	b003      	add	sp, #12
     ce2:	bd30      	pop	{r4, r5, pc}
     ce4:	0000cec0 	.word	0x0000cec0

00000ce8 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     ce8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     cec:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     cee:	0784      	lsls	r4, r0, #30
{
     cf0:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     cf2:	f002 0304 	and.w	r3, r2, #4
     cf6:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     cf8:	f3c2 03c2 	ubfx	r3, r2, #3, #3
     cfc:	f103 0301 	add.w	r3, r3, #1
     d00:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
     d04:	9203      	str	r2, [sp, #12]
     d06:	4605      	mov	r5, r0
     d08:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     d0a:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
     d0c:	f040 81be 	bne.w	108c <CONFIG_FPROTECT_BLOCK_SIZE+0x8c>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
     d10:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     d12:	b130      	cbz	r0, d22 <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     d14:	2907      	cmp	r1, #7
     d16:	d809      	bhi.n	d2c <cbvprintf_package+0x44>
		return -ENOSPC;
     d18:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     d1c:	b011      	add	sp, #68	; 0x44
     d1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     d22:	f001 0607 	and.w	r6, r1, #7
     d26:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     d28:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
     d2c:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     d2e:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
     d32:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
     d34:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
     d38:	f04f 33ff 	mov.w	r3, #4294967295
     d3c:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     d3e:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     d42:	464f      	mov	r7, r9
	bool parsing = false;
     d44:	46cb      	mov	fp, r9
	size = sizeof(char *);
     d46:	4653      	mov	r3, sl
			if (buf0 != NULL) {
     d48:	b10d      	cbz	r5, d4e <cbvprintf_package+0x66>
				*(const char **)buf = s;
     d4a:	9a00      	ldr	r2, [sp, #0]
     d4c:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     d4e:	9805      	ldr	r0, [sp, #20]
     d50:	2800      	cmp	r0, #0
     d52:	f300 80eb 	bgt.w	f2c <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     d56:	489a      	ldr	r0, [pc, #616]	; (fc0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x20>)
     d58:	9a00      	ldr	r2, [sp, #0]
     d5a:	4282      	cmp	r2, r0
     d5c:	d303      	bcc.n	d66 <cbvprintf_package+0x7e>
     d5e:	4899      	ldr	r0, [pc, #612]	; (fc4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x24>)
     d60:	4282      	cmp	r2, r0
     d62:	f0c0 80e3 	bcc.w	f2c <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     d66:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     d68:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     d6c:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     d6e:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     d72:	f100 8106 	bmi.w	f82 <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     d76:	2f0f      	cmp	r7, #15
     d78:	f200 80b4 	bhi.w	ee4 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
     d7c:	2d00      	cmp	r5, #0
     d7e:	f000 8108 	beq.w	f92 <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
     d82:	f107 0240 	add.w	r2, r7, #64	; 0x40
     d86:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
     d8a:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
     d8c:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
     d90:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
     d94:	9804      	ldr	r0, [sp, #16]
     d96:	3001      	adds	r0, #1
     d98:	9004      	str	r0, [sp, #16]
     d9a:	e0ea      	b.n	f72 <cbvprintf_package+0x28a>
			switch (*fmt) {
     d9c:	287a      	cmp	r0, #122	; 0x7a
     d9e:	d860      	bhi.n	e62 <cbvprintf_package+0x17a>
     da0:	284b      	cmp	r0, #75	; 0x4b
     da2:	d80e      	bhi.n	dc2 <cbvprintf_package+0xda>
     da4:	2847      	cmp	r0, #71	; 0x47
     da6:	d85c      	bhi.n	e62 <cbvprintf_package+0x17a>
     da8:	2829      	cmp	r0, #41	; 0x29
     daa:	d82f      	bhi.n	e0c <cbvprintf_package+0x124>
     dac:	2825      	cmp	r0, #37	; 0x25
     dae:	d055      	beq.n	e5c <cbvprintf_package+0x174>
     db0:	d857      	bhi.n	e62 <cbvprintf_package+0x17a>
     db2:	2820      	cmp	r0, #32
     db4:	d07d      	beq.n	eb2 <cbvprintf_package+0x1ca>
     db6:	3823      	subs	r0, #35	; 0x23
     db8:	f1d0 0b00 	rsbs	fp, r0, #0
     dbc:	eb4b 0b00 	adc.w	fp, fp, r0
     dc0:	e077      	b.n	eb2 <cbvprintf_package+0x1ca>
     dc2:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
     dc6:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
     dca:	d84a      	bhi.n	e62 <cbvprintf_package+0x17a>
     dcc:	e8df f00c 	tbb	[pc, ip]
     dd0:	49494971 	.word	0x49494971
     dd4:	49494949 	.word	0x49494949
     dd8:	49494949 	.word	0x49494949
     ddc:	4949494c 	.word	0x4949494c
     de0:	49494949 	.word	0x49494949
     de4:	4c495a49 	.word	0x4c495a49
     de8:	5a5a5a4c 	.word	0x5a5a5a4c
     dec:	496e4c71 	.word	0x496e4c71
     df0:	4c184971 	.word	0x4c184971
     df4:	83494918 	.word	0x83494918
     df8:	49494c80 	.word	0x49494c80
     dfc:	494c      	.short	0x494c
     dfe:	80          	.byte	0x80
     dff:	00          	.byte	0x00
     e00:	2000      	movs	r0, #0
     e02:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
     e06:	f04f 0a04 	mov.w	sl, #4
     e0a:	e039      	b.n	e80 <cbvprintf_package+0x198>
			switch (*fmt) {
     e0c:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
     e10:	fa5f fc8c 	uxtb.w	ip, ip
     e14:	2201      	movs	r2, #1
     e16:	fa02 fc0c 	lsl.w	ip, r2, ip
     e1a:	ea1c 0f0e 	tst.w	ip, lr
     e1e:	d148      	bne.n	eb2 <cbvprintf_package+0x1ca>
     e20:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
     e24:	d12e      	bne.n	e84 <cbvprintf_package+0x19c>
     e26:	ea1c 0b02 	ands.w	fp, ip, r2
     e2a:	d042      	beq.n	eb2 <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
     e2c:	3c01      	subs	r4, #1
     e2e:	4454      	add	r4, sl
     e30:	f1ca 0c00 	rsb	ip, sl, #0
     e34:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     e38:	2d00      	cmp	r5, #0
     e3a:	d061      	beq.n	f00 <cbvprintf_package+0x218>
     e3c:	eba3 0c05 	sub.w	ip, r3, r5
     e40:	44a4      	add	ip, r4
     e42:	45b4      	cmp	ip, r6
     e44:	f63f af68 	bhi.w	d18 <cbvprintf_package+0x30>
		if (is_str_arg) {
     e48:	2800      	cmp	r0, #0
     e4a:	d168      	bne.n	f1e <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
     e4c:	2b04      	cmp	r3, #4
     e4e:	d147      	bne.n	ee0 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
     e50:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
     e54:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
     e56:	3404      	adds	r4, #4
     e58:	2304      	movs	r3, #4
     e5a:	e02a      	b.n	eb2 <cbvprintf_package+0x1ca>
				arg_idx--;
     e5c:	9a01      	ldr	r2, [sp, #4]
     e5e:	3a01      	subs	r2, #1
     e60:	9201      	str	r2, [sp, #4]
				parsing = false;
     e62:	f04f 0b00 	mov.w	fp, #0
				continue;
     e66:	e024      	b.n	eb2 <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
     e68:	f811 0c01 	ldrb.w	r0, [r1, #-1]
     e6c:	286c      	cmp	r0, #108	; 0x6c
     e6e:	d134      	bne.n	eda <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
     e70:	f811 3c02 	ldrb.w	r3, [r1, #-2]
     e74:	2000      	movs	r0, #0
     e76:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
     e78:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
     e7a:	d1c4      	bne.n	e06 <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
     e7c:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
     e80:	4653      	mov	r3, sl
     e82:	e7d3      	b.n	e2c <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
     e84:	f108 0807 	add.w	r8, r8, #7
     e88:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
     e8c:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
     e8e:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
     e92:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
     e96:	b135      	cbz	r5, ea6 <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
     e98:	9806      	ldr	r0, [sp, #24]
     e9a:	4420      	add	r0, r4
     e9c:	42b0      	cmp	r0, r6
     e9e:	f63f af3b 	bhi.w	d18 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
     ea2:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
     ea6:	3408      	adds	r4, #8
				parsing = false;
     ea8:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
     eac:	f04f 0a08 	mov.w	sl, #8
     eb0:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
     eb2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
     eb6:	2800      	cmp	r0, #0
     eb8:	d078      	beq.n	fac <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0xc>
			if (!parsing) {
     eba:	f1bb 0f00 	cmp.w	fp, #0
     ebe:	f47f af6d 	bne.w	d9c <cbvprintf_package+0xb4>
				if (*fmt == '%') {
     ec2:	2825      	cmp	r0, #37	; 0x25
     ec4:	d1f5      	bne.n	eb2 <cbvprintf_package+0x1ca>
					arg_idx++;
     ec6:	9b01      	ldr	r3, [sp, #4]
     ec8:	3301      	adds	r3, #1
     eca:	9301      	str	r3, [sp, #4]
					parsing = true;
     ecc:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
     ed0:	f04f 0a04 	mov.w	sl, #4
     ed4:	e7ec      	b.n	eb0 <cbvprintf_package+0x1c8>
			switch (*fmt) {
     ed6:	4658      	mov	r0, fp
     ed8:	e793      	b.n	e02 <cbvprintf_package+0x11a>
     eda:	2000      	movs	r0, #0
				parsing = false;
     edc:	4683      	mov	fp, r0
     ede:	e7a5      	b.n	e2c <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
     ee0:	2b08      	cmp	r3, #8
     ee2:	d002      	beq.n	eea <cbvprintf_package+0x202>
					return -EINVAL;
     ee4:	f06f 0015 	mvn.w	r0, #21
     ee8:	e718      	b.n	d1c <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
     eea:	f108 0807 	add.w	r8, r8, #7
     eee:	f028 0807 	bic.w	r8, r8, #7
     ef2:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
     ef6:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
     efa:	3408      	adds	r4, #8
     efc:	2308      	movs	r3, #8
     efe:	e7d8      	b.n	eb2 <cbvprintf_package+0x1ca>
		if (is_str_arg) {
     f00:	b968      	cbnz	r0, f1e <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
     f02:	2b04      	cmp	r3, #4
     f04:	d102      	bne.n	f0c <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
     f06:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
     f0a:	e7a4      	b.n	e56 <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
     f0c:	2b08      	cmp	r3, #8
     f0e:	d1e9      	bne.n	ee4 <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
     f10:	f108 0807 	add.w	r8, r8, #7
     f14:	f028 0807 	bic.w	r8, r8, #7
     f18:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
     f1c:	e7ed      	b.n	efa <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     f1e:	9a05      	ldr	r2, [sp, #20]
     f20:	3a01      	subs	r2, #1
     f22:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
     f24:	f858 2b04 	ldr.w	r2, [r8], #4
     f28:	9200      	str	r2, [sp, #0]
     f2a:	e70d      	b.n	d48 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
     f2c:	9a03      	ldr	r2, [sp, #12]
     f2e:	0790      	lsls	r0, r2, #30
     f30:	d520      	bpl.n	f74 <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     f32:	eba4 0e05 	sub.w	lr, r4, r5
     f36:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     f3a:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     f3e:	f5be 7f00 	cmp.w	lr, #512	; 0x200
     f42:	d2cf      	bcs.n	ee4 <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     f44:	2f0f      	cmp	r7, #15
     f46:	d8cd      	bhi.n	ee4 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
     f48:	b1f5      	cbz	r5, f88 <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
     f4a:	f107 0240 	add.w	r2, r7, #64	; 0x40
     f4e:	eb0d 0e02 	add.w	lr, sp, r2
     f52:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
     f54:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
     f56:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
     f5a:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
     f5e:	f1bc 0f00 	cmp.w	ip, #0
     f62:	f43f af17 	beq.w	d94 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     f66:	f060 007f 	orn	r0, r0, #127	; 0x7f
     f6a:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
     f6e:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
     f72:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
     f74:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
     f78:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
     f7a:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
     f7c:	f64f 7eda 	movw	lr, #65498	; 0xffda
     f80:	e797      	b.n	eb2 <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     f82:	f04f 0c00 	mov.w	ip, #0
     f86:	e7da      	b.n	f3e <cbvprintf_package+0x256>
				} else if (is_ro) {
     f88:	f1bc 0f00 	cmp.w	ip, #0
     f8c:	d001      	beq.n	f92 <cbvprintf_package+0x2aa>
					len += 1;
     f8e:	3601      	adds	r6, #1
     f90:	e7ef      	b.n	f72 <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
     f92:	9802      	ldr	r0, [sp, #8]
					len += 2;
     f94:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
     f96:	2800      	cmp	r0, #0
     f98:	d1eb      	bne.n	f72 <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
     f9a:	9800      	ldr	r0, [sp, #0]
     f9c:	e9cd 3106 	strd	r3, r1, [sp, #24]
     fa0:	f00a fe75 	bl	bc8e <strlen>
     fa4:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
     fa8:	4406      	add	r6, r0
     faa:	e7e2      	b.n	f72 <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
     fac:	1b63      	subs	r3, r4, r5
     fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
     fb2:	d297      	bcs.n	ee4 <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
     fb4:	b945      	cbnz	r5, fc8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x28>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     fb6:	f1a6 0408 	sub.w	r4, r6, #8
     fba:	18e0      	adds	r0, r4, r3
     fbc:	e6ae      	b.n	d1c <cbvprintf_package+0x34>
     fbe:	bf00      	nop
     fc0:	0000cdd0 	.word	0x0000cdd0
     fc4:	0000f8e4 	.word	0x0000f8e4
	if (rws_pos_en) {
     fc8:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
     fca:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
     fcc:	089b      	lsrs	r3, r3, #2
     fce:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     fd0:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
     fd4:	b1c2      	cbz	r2, 1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
     fd6:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
     fd8:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
     fdc:	f1b9 0f00 	cmp.w	r9, #0
     fe0:	d005      	beq.n	fee <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4e>
     fe2:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
     fe4:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
     fe6:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
     fea:	4297      	cmp	r7, r2
     fec:	d10e      	bne.n	100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>
		if (BUF_OFFSET + 1 + size > len) {
     fee:	f1c5 0301 	rsb	r3, r5, #1
     ff2:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
     ff6:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
     ffa:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
     ffc:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    1000:	4557      	cmp	r7, sl
    1002:	d112      	bne.n	102a <CONFIG_FPROTECT_BLOCK_SIZE+0x2a>
	return BUF_OFFSET;
    1004:	1b60      	subs	r0, r4, r5
    1006:	e689      	b.n	d1c <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    1008:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    100a:	e7e5      	b.n	fd8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x38>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    100c:	f810 3b01 	ldrb.w	r3, [r0], #1
    1010:	0619      	lsls	r1, r3, #24
    1012:	d508      	bpl.n	1026 <CONFIG_FPROTECT_BLOCK_SIZE+0x26>
			if (BUF_OFFSET + 1 > len) {
    1014:	eb04 0e0c 	add.w	lr, r4, ip
    1018:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    101a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    101e:	f63f ae7b 	bhi.w	d18 <cbvprintf_package+0x30>
			*buf++ = pos;
    1022:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    1026:	3201      	adds	r2, #1
    1028:	e7df      	b.n	fea <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4a>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    102a:	f1b9 0f00 	cmp.w	r9, #0
    102e:	d003      	beq.n	1038 <CONFIG_FPROTECT_BLOCK_SIZE+0x38>
    1030:	f998 2000 	ldrsb.w	r2, [r8]
    1034:	2a00      	cmp	r2, #0
    1036:	db17      	blt.n	1068 <CONFIG_FPROTECT_BLOCK_SIZE+0x68>
		if (rws_pos_en) {
    1038:	9b02      	ldr	r3, [sp, #8]
    103a:	b1d3      	cbz	r3, 1072 <CONFIG_FPROTECT_BLOCK_SIZE+0x72>
			*buf++ = str_ptr_arg[i];
    103c:	f81a 200b 	ldrb.w	r2, [sl, fp]
    1040:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    1044:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    1046:	9b01      	ldr	r3, [sp, #4]
    1048:	1898      	adds	r0, r3, r2
    104a:	4420      	add	r0, r4
    104c:	42b0      	cmp	r0, r6
    104e:	f63f ae63 	bhi.w	d18 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
    1052:	f898 0000 	ldrb.w	r0, [r8]
    1056:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
    105a:	9900      	ldr	r1, [sp, #0]
    105c:	9203      	str	r2, [sp, #12]
    105e:	4620      	mov	r0, r4
    1060:	f00a fe31 	bl	bcc6 <memcpy>
		buf += size;
    1064:	9a03      	ldr	r2, [sp, #12]
    1066:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    1068:	f10a 0a01 	add.w	sl, sl, #1
    106c:	f108 0801 	add.w	r8, r8, #1
    1070:	e7c6      	b.n	1000 <CONFIG_FPROTECT_BLOCK_SIZE>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    1072:	f898 2000 	ldrb.w	r2, [r8]
    1076:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    107a:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    107c:	9b02      	ldr	r3, [sp, #8]
    107e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    1082:	9800      	ldr	r0, [sp, #0]
    1084:	f00a fe03 	bl	bc8e <strlen>
    1088:	1c42      	adds	r2, r0, #1
    108a:	e7dc      	b.n	1046 <CONFIG_FPROTECT_BLOCK_SIZE+0x46>
		return -EFAULT;
    108c:	f06f 000d 	mvn.w	r0, #13
    1090:	e644      	b.n	d1c <cbvprintf_package+0x34>
    1092:	bf00      	nop

00001094 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    1094:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1098:	b095      	sub	sp, #84	; 0x54
    109a:	af00      	add	r7, sp, #0
    109c:	4604      	mov	r4, r0
    109e:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
    10a2:	61bb      	str	r3, [r7, #24]
    10a4:	f3cb 03c0 	ubfx	r3, fp, #3, #1
    10a8:	627a      	str	r2, [r7, #36]	; 0x24
    10aa:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    10ac:	6239      	str	r1, [r7, #32]
    10ae:	b951      	cbnz	r1, 10c6 <cbprintf_package_convert+0x32>
	buf += ros_nbr;
    10b0:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    10b2:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    10b4:	7880      	ldrb	r0, [r0, #2]
    10b6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    10ba:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
    10bc:	6a3b      	ldr	r3, [r7, #32]
    10be:	429e      	cmp	r6, r3
    10c0:	d81a      	bhi.n	10f8 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
    10c2:	1b03      	subs	r3, r0, r4
    10c4:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    10c6:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    10ca:	78e3      	ldrb	r3, [r4, #3]
    10cc:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
    10ce:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
    10d0:	f1ba 0f00 	cmp.w	sl, #0
    10d4:	d002      	beq.n	10dc <cbprintf_package_convert+0x48>
    10d6:	f01b 0f01 	tst.w	fp, #1
    10da:	d117      	bne.n	110c <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
    10dc:	697b      	ldr	r3, [r7, #20]
    10de:	bb5b      	cbnz	r3, 1138 <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
    10e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    10e2:	b11b      	cbz	r3, 10ec <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
    10e4:	69ba      	ldr	r2, [r7, #24]
    10e6:	6a39      	ldr	r1, [r7, #32]
    10e8:	4620      	mov	r0, r4
    10ea:	4798      	blx	r3
		}

		return in_len;
    10ec:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    10ee:	4628      	mov	r0, r5
    10f0:	3754      	adds	r7, #84	; 0x54
    10f2:	46bd      	mov	sp, r7
    10f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    10f8:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
    10fa:	4628      	mov	r0, r5
    10fc:	f00a fdc7 	bl	bc8e <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
    1100:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
    1102:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
    1104:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
    1106:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
    1108:	623b      	str	r3, [r7, #32]
    110a:	e7d7      	b.n	10bc <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
    110c:	f894 8000 	ldrb.w	r8, [r4]
    1110:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    1112:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    1114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
    1116:	ea4f 0288 	mov.w	r2, r8, lsl #2
    111a:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    111c:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
    1120:	2b00      	cmp	r3, #0
    1122:	f040 8101 	bne.w	1328 <cbprintf_package_convert+0x294>
		out_len = (int)in_len;
    1126:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
    1128:	46c1      	mov	r9, r8
    112a:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
    112e:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    1130:	454b      	cmp	r3, r9
    1132:	d14e      	bne.n	11d2 <cbprintf_package_convert+0x13e>
    1134:	44d0      	add	r8, sl
    1136:	e013      	b.n	1160 <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
    1138:	f01b 0f02 	tst.w	fp, #2
    113c:	d0d0      	beq.n	10e0 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
    113e:	f894 8000 	ldrb.w	r8, [r4]
    1142:	ea4f 0388 	mov.w	r3, r8, lsl #2
    1146:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    1148:	6863      	ldr	r3, [r4, #4]
    114a:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    114c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
    114e:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
    1152:	2b00      	cmp	r3, #0
    1154:	d178      	bne.n	1248 <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
    1156:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1158:	f1ba 0f00 	cmp.w	sl, #0
    115c:	d14e      	bne.n	11fc <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
    115e:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
    1160:	f01b 0f05 	tst.w	fp, #5
    1164:	bf0c      	ite	eq
    1166:	2302      	moveq	r3, #2
    1168:	2301      	movne	r3, #1
    116a:	627b      	str	r3, [r7, #36]	; 0x24
    116c:	697b      	ldr	r3, [r7, #20]
    116e:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1172:	f00b 0302 	and.w	r3, fp, #2
    1176:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
    1178:	45d0      	cmp	r8, sl
    117a:	d0b8      	beq.n	10ee <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
    117c:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
    1180:	f818 3c01 	ldrb.w	r3, [r8, #-1]
    1184:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
    1188:	4bac      	ldr	r3, [pc, #688]	; (143c <cbprintf_package_convert+0x3a8>)
    118a:	4599      	cmp	r9, r3
    118c:	d302      	bcc.n	1194 <cbprintf_package_convert+0x100>
    118e:	4bac      	ldr	r3, [pc, #688]	; (1440 <cbprintf_package_convert+0x3ac>)
    1190:	4599      	cmp	r9, r3
    1192:	d339      	bcc.n	1208 <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    1194:	693b      	ldr	r3, [r7, #16]
    1196:	2b00      	cmp	r3, #0
    1198:	d043      	beq.n	1222 <cbprintf_package_convert+0x18e>
    119a:	69f8      	ldr	r0, [r7, #28]
    119c:	f009 fe4e 	bl	ae3c <is_ptr>
    11a0:	2800      	cmp	r0, #0
    11a2:	d03e      	beq.n	1222 <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    11a4:	46e9      	mov	r9, sp
    11a6:	b08a      	sub	sp, #40	; 0x28
    11a8:	466a      	mov	r2, sp
    11aa:	4ba6      	ldr	r3, [pc, #664]	; (1444 <cbprintf_package_convert+0x3b0>)
    11ac:	6153      	str	r3, [r2, #20]
    11ae:	69fb      	ldr	r3, [r7, #28]
    11b0:	e9c2 3106 	strd	r3, r1, [r2, #24]
    11b4:	f44f 7300 	mov.w	r3, #512	; 0x200
    11b8:	8413      	strh	r3, [r2, #32]
    11ba:	4ba3      	ldr	r3, [pc, #652]	; (1448 <cbprintf_package_convert+0x3b4>)
    11bc:	f842 3f10 	str.w	r3, [r2, #16]!
    11c0:	48a2      	ldr	r0, [pc, #648]	; (144c <cbprintf_package_convert+0x3b8>)
    11c2:	2300      	movs	r3, #0
    11c4:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    11c8:	f001 f8b6 	bl	2338 <z_impl_z_log_msg_static_create>
				out_len -= 2;
    11cc:	3d02      	subs	r5, #2
    11ce:	46cd      	mov	sp, r9
				continue;
    11d0:	e7d2      	b.n	1178 <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
    11d2:	f819 2b01 	ldrb.w	r2, [r9], #1
    11d6:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    11d8:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    11dc:	f00a fd57 	bl	bc8e <strlen>
				if (strl && strl_cnt < strl_len) {
    11e0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    11e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    11e4:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    11e6:	b13a      	cbz	r2, 11f8 <cbprintf_package_convert+0x164>
    11e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    11ec:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    11ee:	bf3e      	ittt	cc
    11f0:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
    11f2:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    11f6:	3601      	addcc	r6, #1
				out_len += len;
    11f8:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    11fa:	e799      	b.n	1130 <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    11fc:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
    1200:	bf1c      	itt	ne
    1202:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    1204:	44d0      	addne	r8, sl
    1206:	e7ab      	b.n	1160 <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    1208:	693b      	ldr	r3, [r7, #16]
    120a:	b123      	cbz	r3, 1216 <cbprintf_package_convert+0x182>
    120c:	69f8      	ldr	r0, [r7, #28]
    120e:	f009 fe15 	bl	ae3c <is_ptr>
    1212:	2800      	cmp	r0, #0
    1214:	d1c6      	bne.n	11a4 <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    1216:	f01b 0f01 	tst.w	fp, #1
    121a:	d105      	bne.n	1228 <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
    121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    121e:	1aed      	subs	r5, r5, r3
    1220:	e7aa      	b.n	1178 <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1222:	6a3b      	ldr	r3, [r7, #32]
    1224:	2b00      	cmp	r3, #0
    1226:	d0a7      	beq.n	1178 <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
    1228:	4648      	mov	r0, r9
    122a:	f00a fd30 	bl	bc8e <strlen>
				if (strl && strl_cnt < strl_len) {
    122e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1230:	b143      	cbz	r3, 1244 <cbprintf_package_convert+0x1b0>
    1232:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1236:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    1238:	bf3f      	itttt	cc
    123a:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    123c:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    123e:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    1242:	3601      	addcc	r6, #1
				out_len += (len - 1);
    1244:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
    1246:	e797      	b.n	1178 <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1248:	f1ba 0f00 	cmp.w	sl, #0
    124c:	d071      	beq.n	1332 <cbprintf_package_convert+0x29e>
    124e:	f01b 0604 	ands.w	r6, fp, #4
    1252:	d071      	beq.n	1338 <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
    1254:	46d1      	mov	r9, sl
		scpy_cnt = 0;
    1256:	2600      	movs	r6, #0
		dst = keep_str_pos;
    1258:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
    125c:	4652      	mov	r2, sl
    125e:	4641      	mov	r1, r8
    1260:	f00a fd31 	bl	bcc6 <memcpy>
	str_pos += ros_nbr;
    1264:	697b      	ldr	r3, [r7, #20]
    1266:	005b      	lsls	r3, r3, #1
    1268:	60bb      	str	r3, [r7, #8]
    126a:	697b      	ldr	r3, [r7, #20]
    126c:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
    126e:	eb08 0343 	add.w	r3, r8, r3, lsl #1
    1272:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1274:	f00b 0302 	and.w	r3, fp, #2
    1278:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    127a:	697b      	ldr	r3, [r7, #20]
    127c:	4598      	cmp	r8, r3
    127e:	d15d      	bne.n	133c <cbprintf_package_convert+0x2a8>
	out_desc.len = in_desc->len;
    1280:	7823      	ldrb	r3, [r4, #0]
    1282:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    1284:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    1286:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    128a:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    128e:	bf0c      	ite	eq
    1290:	ea4f 0159 	moveq.w	r1, r9, lsr #1
    1294:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    1296:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    129a:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    129c:	f040 809d 	bne.w	13da <cbprintf_package_convert+0x346>
    12a0:	f01b 0f04 	tst.w	fp, #4
    12a4:	bf14      	ite	ne
    12a6:	4648      	movne	r0, r9
    12a8:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    12aa:	f894 b002 	ldrb.w	fp, [r4, #2]
    12ae:	f894 8003 	ldrb.w	r8, [r4, #3]
    12b2:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
    12b4:	7062      	strb	r2, [r4, #1]
    12b6:	70a0      	strb	r0, [r4, #2]
    12b8:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    12ba:	69ba      	ldr	r2, [r7, #24]
    12bc:	68f9      	ldr	r1, [r7, #12]
    12be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    12c0:	4620      	mov	r0, r4
    12c2:	4798      	blx	r3
	if (rv < 0) {
    12c4:	1e05      	subs	r5, r0, #0
    12c6:	f6ff af12 	blt.w	10ee <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
    12ca:	69fb      	ldr	r3, [r7, #28]
    12cc:	7023      	strb	r3, [r4, #0]
    12ce:	693b      	ldr	r3, [r7, #16]
    12d0:	7063      	strb	r3, [r4, #1]
    12d2:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    12d6:	69ba      	ldr	r2, [r7, #24]
    12d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
    12da:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    12de:	4649      	mov	r1, r9
    12e0:	f107 0040 	add.w	r0, r7, #64	; 0x40
    12e4:	4798      	blx	r3
	if (rv < 0) {
    12e6:	f1b0 0800 	subs.w	r8, r0, #0
    12ea:	f2c0 80a3 	blt.w	1434 <cbprintf_package_convert+0x3a0>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    12ee:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
    12f0:	69ba      	ldr	r2, [r7, #24]
    12f2:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    12f4:	eba3 010a 	sub.w	r1, r3, sl
    12f8:	68fb      	ldr	r3, [r7, #12]
    12fa:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    12fc:	68bb      	ldr	r3, [r7, #8]
    12fe:	1ac9      	subs	r1, r1, r3
    1300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1302:	4798      	blx	r3
	if (rv < 0) {
    1304:	2800      	cmp	r0, #0
    1306:	f2c0 8097 	blt.w	1438 <cbprintf_package_convert+0x3a4>
	out_len += rv;
    130a:	44a8      	add	r8, r5
	out_len += rv;
    130c:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    1310:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
    1314:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    1318:	45b3      	cmp	fp, r6
    131a:	d360      	bcc.n	13de <cbprintf_package_convert+0x34a>
	(void)cb(NULL, 0, ctx);
    131c:	2100      	movs	r1, #0
    131e:	69ba      	ldr	r2, [r7, #24]
    1320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1322:	4608      	mov	r0, r1
    1324:	4798      	blx	r3
	return out_len;
    1326:	e6e2      	b.n	10ee <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
    1328:	f04f 0900 	mov.w	r9, #0
    132c:	f107 0030 	add.w	r0, r7, #48	; 0x30
    1330:	e794      	b.n	125c <cbprintf_package_convert+0x1c8>
		scpy_cnt = 0;
    1332:	4656      	mov	r6, sl
		keep_cnt = 0;
    1334:	46d1      	mov	r9, sl
    1336:	e795      	b.n	1264 <cbprintf_package_convert+0x1d0>
    1338:	46b1      	mov	r9, r6
    133a:	e793      	b.n	1264 <cbprintf_package_convert+0x1d0>
		uint8_t arg_idx = *str_pos++;
    133c:	f818 1b02 	ldrb.w	r1, [r8], #2
    1340:	4a3e      	ldr	r2, [pc, #248]	; (143c <cbprintf_package_convert+0x3a8>)
		uint8_t arg_pos = *str_pos++;
    1342:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    1346:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    134a:	4293      	cmp	r3, r2
    134c:	d302      	bcc.n	1354 <cbprintf_package_convert+0x2c0>
    134e:	4a3c      	ldr	r2, [pc, #240]	; (1440 <cbprintf_package_convert+0x3ac>)
    1350:	4293      	cmp	r3, r2
    1352:	d31c      	bcc.n	138e <cbprintf_package_convert+0x2fa>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    1354:	693b      	ldr	r3, [r7, #16]
    1356:	b123      	cbz	r3, 1362 <cbprintf_package_convert+0x2ce>
    1358:	69f8      	ldr	r0, [r7, #28]
    135a:	f009 fd6f 	bl	ae3c <is_ptr>
    135e:	2800      	cmp	r0, #0
    1360:	d18b      	bne.n	127a <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1362:	687b      	ldr	r3, [r7, #4]
    1364:	b9f3      	cbnz	r3, 13a4 <cbprintf_package_convert+0x310>
				keep_str_pos[keep_cnt++] = arg_idx;
    1366:	f109 0228 	add.w	r2, r9, #40	; 0x28
    136a:	f107 0028 	add.w	r0, r7, #40	; 0x28
    136e:	4402      	add	r2, r0
    1370:	f109 0301 	add.w	r3, r9, #1
    1374:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    1378:	f107 0250 	add.w	r2, r7, #80	; 0x50
    137c:	fa52 f383 	uxtab	r3, r2, r3
    1380:	f109 0902 	add.w	r9, r9, #2
    1384:	fa5f f989 	uxtb.w	r9, r9
    1388:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    138c:	e775      	b.n	127a <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    138e:	693b      	ldr	r3, [r7, #16]
    1390:	b12b      	cbz	r3, 139e <cbprintf_package_convert+0x30a>
    1392:	69f8      	ldr	r0, [r7, #28]
    1394:	f009 fd52 	bl	ae3c <is_ptr>
    1398:	2800      	cmp	r0, #0
    139a:	f47f af6e 	bne.w	127a <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    139e:	f01b 0f01 	tst.w	fp, #1
    13a2:	d009      	beq.n	13b8 <cbprintf_package_convert+0x324>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    13a4:	f106 0228 	add.w	r2, r6, #40	; 0x28
    13a8:	f107 0128 	add.w	r1, r7, #40	; 0x28
    13ac:	1c73      	adds	r3, r6, #1
    13ae:	1856      	adds	r6, r2, r1
    13b0:	f806 5c20 	strb.w	r5, [r6, #-32]
    13b4:	b2de      	uxtb	r6, r3
    13b6:	e760      	b.n	127a <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    13b8:	f01b 0f04 	tst.w	fp, #4
    13bc:	f43f af5d 	beq.w	127a <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
    13c0:	f109 0228 	add.w	r2, r9, #40	; 0x28
    13c4:	f107 0128 	add.w	r1, r7, #40	; 0x28
    13c8:	f109 0301 	add.w	r3, r9, #1
    13cc:	eb02 0901 	add.w	r9, r2, r1
    13d0:	f809 5c10 	strb.w	r5, [r9, #-16]
    13d4:	fa5f f983 	uxtb.w	r9, r3
    13d8:	e74f      	b.n	127a <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    13da:	2000      	movs	r0, #0
    13dc:	e765      	b.n	12aa <cbprintf_package_convert+0x216>
		uint8_t loc = cpy_str_pos[i];
    13de:	f81b 300a 	ldrb.w	r3, [fp, sl]
    13e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
    13e6:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
    13ea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    13ec:	b1fb      	cbz	r3, 142e <cbprintf_package_convert+0x39a>
    13ee:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    13f2:	69ba      	ldr	r2, [r7, #24]
    13f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    13f6:	2101      	movs	r1, #1
    13f8:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    13fc:	4798      	blx	r3
		if (rv < 0) {
    13fe:	2800      	cmp	r0, #0
    1400:	db1a      	blt.n	1438 <cbprintf_package_convert+0x3a4>
		out_len += rv;
    1402:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    1404:	f1b8 0f00 	cmp.w	r8, #0
    1408:	d106      	bne.n	1418 <cbprintf_package_convert+0x384>
    140a:	4648      	mov	r0, r9
    140c:	f00a fc3f 	bl	bc8e <strlen>
    1410:	f100 0801 	add.w	r8, r0, #1
    1414:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    1418:	69ba      	ldr	r2, [r7, #24]
    141a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    141c:	4641      	mov	r1, r8
    141e:	4648      	mov	r0, r9
    1420:	4798      	blx	r3
		if (rv < 0) {
    1422:	2800      	cmp	r0, #0
    1424:	db08      	blt.n	1438 <cbprintf_package_convert+0x3a4>
		out_len += rv;
    1426:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    1428:	f10b 0b01 	add.w	fp, fp, #1
    142c:	e774      	b.n	1318 <cbprintf_package_convert+0x284>
		uint16_t str_len = strl ? strl[i] : 0;
    142e:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    1432:	e7de      	b.n	13f2 <cbprintf_package_convert+0x35e>
    1434:	4645      	mov	r5, r8
    1436:	e65a      	b.n	10ee <cbprintf_package_convert+0x5a>
    1438:	4605      	mov	r5, r0
    143a:	e658      	b.n	10ee <cbprintf_package_convert+0x5a>
    143c:	0000cdd0 	.word	0x0000cdd0
    1440:	0000f8e4 	.word	0x0000f8e4
    1444:	0000d5e6 	.word	0x0000d5e6
    1448:	01000004 	.word	0x01000004
    144c:	0000cf80 	.word	0x0000cf80

00001450 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    1450:	4b01      	ldr	r3, [pc, #4]	; (1458 <__printk_hook_install+0x8>)
    1452:	6018      	str	r0, [r3, #0]
}
    1454:	4770      	bx	lr
    1456:	bf00      	nop
    1458:	20000010 	.word	0x20000010

0000145c <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    145c:	b530      	push	{r4, r5, lr}
    145e:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    1460:	2500      	movs	r5, #0
    1462:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    1466:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    1468:	9500      	str	r5, [sp, #0]
    146a:	a903      	add	r1, sp, #12
    146c:	4805      	ldr	r0, [pc, #20]	; (1484 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    146e:	9505      	str	r5, [sp, #20]
    1470:	f000 f918 	bl	16a4 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    1474:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    1478:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    147a:	bfb8      	it	lt
    147c:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    147e:	b007      	add	sp, #28
    1480:	bd30      	pop	{r4, r5, pc}
    1482:	bf00      	nop
    1484:	0000ae8b 	.word	0x0000ae8b

00001488 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    148c:	8b05      	ldrh	r5, [r0, #24]
{
    148e:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1490:	0728      	lsls	r0, r5, #28
{
    1492:	4690      	mov	r8, r2
	if (processing) {
    1494:	d411      	bmi.n	14ba <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    1496:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1498:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    149c:	f040 80cd 	bne.w	163a <process_event+0x1b2>
			evt = process_recheck(mgr);
    14a0:	4620      	mov	r0, r4
    14a2:	f009 ff09 	bl	b2b8 <process_recheck>
		}

		if (evt == EVT_NOP) {
    14a6:	b178      	cbz	r0, 14c8 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    14a8:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    14aa:	8b21      	ldrh	r1, [r4, #24]
    14ac:	2804      	cmp	r0, #4
    14ae:	d811      	bhi.n	14d4 <process_event+0x4c>
    14b0:	e8df f000 	tbb	[pc, r0]
    14b4:	856d10c3 	.word	0x856d10c3
    14b8:	95          	.byte	0x95
    14b9:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    14ba:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    14bc:	bf0c      	ite	eq
    14be:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    14c2:	f045 0520 	orrne.w	r5, r5, #32
    14c6:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    14c8:	f388 8811 	msr	BASEPRI, r8
    14cc:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    14d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    14d4:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    14d8:	45aa      	cmp	sl, r5
    14da:	f000 80a6 	beq.w	162a <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    14de:	2700      	movs	r7, #0
    14e0:	46b9      	mov	r9, r7
    14e2:	463e      	mov	r6, r7
    14e4:	68a3      	ldr	r3, [r4, #8]
    14e6:	2b00      	cmp	r3, #0
    14e8:	f000 80bd 	beq.w	1666 <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    14ec:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    14f0:	8321      	strh	r1, [r4, #24]
    14f2:	f388 8811 	msr	BASEPRI, r8
    14f6:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    14fa:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    14fc:	2900      	cmp	r1, #0
    14fe:	f000 80bb 	beq.w	1678 <process_event+0x1f0>
	return node->next;
    1502:	680d      	ldr	r5, [r1, #0]
    1504:	2900      	cmp	r1, #0
    1506:	f000 80b7 	beq.w	1678 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    150a:	f8d1 8004 	ldr.w	r8, [r1, #4]
    150e:	4633      	mov	r3, r6
    1510:	4652      	mov	r2, sl
    1512:	4620      	mov	r0, r4
    1514:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1516:	2d00      	cmp	r5, #0
    1518:	d076      	beq.n	1608 <process_event+0x180>
    151a:	682b      	ldr	r3, [r5, #0]
    151c:	4629      	mov	r1, r5
    151e:	461d      	mov	r5, r3
    1520:	e7f0      	b.n	1504 <process_event+0x7c>
    1522:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1526:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1528:	2a01      	cmp	r2, #1
    152a:	d81b      	bhi.n	1564 <process_event+0xdc>
	list->head = NULL;
    152c:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    152e:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    1532:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    1534:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1536:	b289      	uxth	r1, r1
	list->tail = NULL;
    1538:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    153c:	d109      	bne.n	1552 <process_event+0xca>
    153e:	463b      	mov	r3, r7
    1540:	e003      	b.n	154a <process_event+0xc2>
				mgr->refs += 1U;
    1542:	8b62      	ldrh	r2, [r4, #26]
    1544:	3201      	adds	r2, #1
    1546:	8362      	strh	r2, [r4, #26]
	return node->next;
    1548:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    154a:	2b00      	cmp	r3, #0
    154c:	d1f9      	bne.n	1542 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    154e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1552:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1554:	4620      	mov	r0, r4
    1556:	f009 feaf 	bl	b2b8 <process_recheck>
    155a:	2800      	cmp	r0, #0
    155c:	d07b      	beq.n	1656 <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    155e:	f041 0120 	orr.w	r1, r1, #32
    1562:	e077      	b.n	1654 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1564:	2b04      	cmp	r3, #4
    1566:	d10a      	bne.n	157e <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1568:	f021 0107 	bic.w	r1, r1, #7
    156c:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    156e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1570:	4620      	mov	r0, r4
    1572:	f009 fea1 	bl	b2b8 <process_recheck>
    1576:	b110      	cbz	r0, 157e <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1578:	f041 0120 	orr.w	r1, r1, #32
    157c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    157e:	8b21      	ldrh	r1, [r4, #24]
    1580:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1584:	45aa      	cmp	sl, r5
    1586:	d050      	beq.n	162a <process_event+0x1a2>
    1588:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    158a:	46b9      	mov	r9, r7
    158c:	e7aa      	b.n	14e4 <process_event+0x5c>
			transit = mgr->transitions->start;
    158e:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1590:	f021 0107 	bic.w	r1, r1, #7
    1594:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1598:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    159a:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    159e:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    15a0:	d12d      	bne.n	15fe <process_event+0x176>
		    || (transit != NULL)) {
    15a2:	f1b9 0f00 	cmp.w	r9, #0
    15a6:	d040      	beq.n	162a <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    15a8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    15ac:	8321      	strh	r1, [r4, #24]
    15ae:	f388 8811 	msr	BASEPRI, r8
    15b2:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    15b6:	493a      	ldr	r1, [pc, #232]	; (16a0 <process_event+0x218>)
    15b8:	4620      	mov	r0, r4
    15ba:	47c8      	blx	r9
    15bc:	e029      	b.n	1612 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15be:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    15c2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15c4:	f041 0104 	orr.w	r1, r1, #4
    15c8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    15ca:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    15cc:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    15d0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    15d2:	d0e6      	beq.n	15a2 <process_event+0x11a>
    15d4:	2700      	movs	r7, #0
		res = 0;
    15d6:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    15d8:	f04f 0a04 	mov.w	sl, #4
    15dc:	e782      	b.n	14e4 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15de:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    15e2:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    15e4:	f041 0105 	orr.w	r1, r1, #5
    15e8:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    15ea:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    15ec:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    15f0:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    15f2:	d0d6      	beq.n	15a2 <process_event+0x11a>
    15f4:	2700      	movs	r7, #0
		res = 0;
    15f6:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    15f8:	f04f 0a05 	mov.w	sl, #5
    15fc:	e772      	b.n	14e4 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    15fe:	2700      	movs	r7, #0
		res = 0;
    1600:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1602:	f04f 0a06 	mov.w	sl, #6
    1606:	e76d      	b.n	14e4 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1608:	462b      	mov	r3, r5
    160a:	e787      	b.n	151c <process_event+0x94>
			if (transit != NULL) {
    160c:	f1b9 0f00 	cmp.w	r9, #0
    1610:	d1d1      	bne.n	15b6 <process_event+0x12e>
	__asm__ volatile(
    1612:	f04f 0340 	mov.w	r3, #64	; 0x40
    1616:	f3ef 8811 	mrs	r8, BASEPRI
    161a:	f383 8812 	msr	BASEPRI_MAX, r3
    161e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1622:	8b23      	ldrh	r3, [r4, #24]
    1624:	f023 0308 	bic.w	r3, r3, #8
    1628:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    162a:	8b25      	ldrh	r5, [r4, #24]
    162c:	06ea      	lsls	r2, r5, #27
    162e:	d52e      	bpl.n	168e <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1630:	f025 0310 	bic.w	r3, r5, #16
    1634:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1636:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    163a:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    163c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    163e:	2e00      	cmp	r6, #0
    1640:	f6bf af6f 	bge.w	1522 <process_event+0x9a>
	list->head = NULL;
    1644:	2300      	movs	r3, #0
		*clients = mgr->clients;
    1646:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1648:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    164c:	f021 0107 	bic.w	r1, r1, #7
    1650:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1654:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1656:	8b21      	ldrh	r1, [r4, #24]
    1658:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    165c:	45aa      	cmp	sl, r5
    165e:	f04f 0900 	mov.w	r9, #0
    1662:	f47f af3f 	bne.w	14e4 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    1666:	2f00      	cmp	r7, #0
    1668:	d09b      	beq.n	15a2 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    166a:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    166e:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    1670:	f388 8811 	msr	BASEPRI, r8
    1674:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    1678:	2f00      	cmp	r7, #0
    167a:	d0c7      	beq.n	160c <process_event+0x184>
	return node->next;
    167c:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    167e:	4639      	mov	r1, r7
    1680:	4633      	mov	r3, r6
    1682:	4652      	mov	r2, sl
    1684:	4620      	mov	r0, r4
    1686:	f009 fe43 	bl	b310 <notify_one>
	list->head = node;
    168a:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    168c:	e7f4      	b.n	1678 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    168e:	06ab      	lsls	r3, r5, #26
    1690:	f57f af1a 	bpl.w	14c8 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1694:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1698:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    169a:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    169e:	e6ff      	b.n	14a0 <process_event+0x18>
    16a0:	0000b33d 	.word	0x0000b33d

000016a4 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    16a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16a8:	4681      	mov	r9, r0
    16aa:	b095      	sub	sp, #84	; 0x54
    16ac:	468b      	mov	fp, r1
    16ae:	4617      	mov	r7, r2
    16b0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    16b2:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    16b4:	7838      	ldrb	r0, [r7, #0]
    16b6:	b908      	cbnz	r0, 16bc <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    16b8:	4628      	mov	r0, r5
    16ba:	e358      	b.n	1d6e <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
    16bc:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    16be:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    16c0:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    16c2:	d006      	beq.n	16d2 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    16c4:	4659      	mov	r1, fp
    16c6:	47c8      	blx	r9
    16c8:	2800      	cmp	r0, #0
    16ca:	f2c0 8350 	blt.w	1d6e <z_cbvprintf_impl+0x6ca>
    16ce:	3501      	adds	r5, #1
		if (bps == NULL) {
    16d0:	e1fb      	b.n	1aca <z_cbvprintf_impl+0x426>
		} state = {
    16d2:	2218      	movs	r2, #24
    16d4:	2100      	movs	r1, #0
    16d6:	a80e      	add	r0, sp, #56	; 0x38
    16d8:	f00a fb00 	bl	bcdc <memset>
	if (*sp == '%') {
    16dc:	787b      	ldrb	r3, [r7, #1]
    16de:	2b25      	cmp	r3, #37	; 0x25
    16e0:	d07d      	beq.n	17de <z_cbvprintf_impl+0x13a>
    16e2:	2300      	movs	r3, #0
    16e4:	1c78      	adds	r0, r7, #1
    16e6:	4698      	mov	r8, r3
    16e8:	469e      	mov	lr, r3
    16ea:	469c      	mov	ip, r3
    16ec:	461e      	mov	r6, r3
    16ee:	4601      	mov	r1, r0
		switch (*sp) {
    16f0:	f810 2b01 	ldrb.w	r2, [r0], #1
    16f4:	2a2b      	cmp	r2, #43	; 0x2b
    16f6:	f000 80a1 	beq.w	183c <z_cbvprintf_impl+0x198>
    16fa:	f200 8098 	bhi.w	182e <z_cbvprintf_impl+0x18a>
    16fe:	2a20      	cmp	r2, #32
    1700:	f000 809f 	beq.w	1842 <z_cbvprintf_impl+0x19e>
    1704:	2a23      	cmp	r2, #35	; 0x23
    1706:	f000 809f 	beq.w	1848 <z_cbvprintf_impl+0x1a4>
    170a:	b12b      	cbz	r3, 1718 <z_cbvprintf_impl+0x74>
    170c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1710:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1714:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1718:	f1b8 0f00 	cmp.w	r8, #0
    171c:	d005      	beq.n	172a <z_cbvprintf_impl+0x86>
    171e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1722:	f043 0320 	orr.w	r3, r3, #32
    1726:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    172a:	f1be 0f00 	cmp.w	lr, #0
    172e:	d005      	beq.n	173c <z_cbvprintf_impl+0x98>
    1730:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1734:	f043 0310 	orr.w	r3, r3, #16
    1738:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    173c:	f1bc 0f00 	cmp.w	ip, #0
    1740:	d005      	beq.n	174e <z_cbvprintf_impl+0xaa>
    1742:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1746:	f043 0308 	orr.w	r3, r3, #8
    174a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    174e:	b12e      	cbz	r6, 175c <z_cbvprintf_impl+0xb8>
    1750:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1754:	f043 0304 	orr.w	r3, r3, #4
    1758:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    175c:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1760:	f003 0044 	and.w	r0, r3, #68	; 0x44
    1764:	2844      	cmp	r0, #68	; 0x44
    1766:	d103      	bne.n	1770 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    1768:	f36f 1386 	bfc	r3, #6, #1
    176c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    1770:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    1774:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    1776:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    177a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    177e:	d17f      	bne.n	1880 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    1780:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1784:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    1788:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    178a:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    178e:	781a      	ldrb	r2, [r3, #0]
    1790:	2a2e      	cmp	r2, #46	; 0x2e
    1792:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1796:	bf0c      	ite	eq
    1798:	2101      	moveq	r1, #1
    179a:	2100      	movne	r1, #0
    179c:	f361 0241 	bfi	r2, r1, #1, #1
    17a0:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    17a4:	d178      	bne.n	1898 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    17a6:	785a      	ldrb	r2, [r3, #1]
    17a8:	2a2a      	cmp	r2, #42	; 0x2a
    17aa:	d06e      	beq.n	188a <z_cbvprintf_impl+0x1e6>
	++sp;
    17ac:	3301      	adds	r3, #1
	size_t val = 0;
    17ae:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    17b0:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    17b4:	4619      	mov	r1, r3
    17b6:	f811 0b01 	ldrb.w	r0, [r1], #1
    17ba:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    17be:	2e09      	cmp	r6, #9
    17c0:	f240 8095 	bls.w	18ee <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    17c4:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    17c8:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    17ca:	f3c1 0040 	ubfx	r0, r1, #1, #1
    17ce:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    17d2:	460a      	mov	r2, r1
    17d4:	f360 0241 	bfi	r2, r0, #1, #1
    17d8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    17dc:	e05c      	b.n	1898 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    17de:	1cba      	adds	r2, r7, #2
    17e0:	9203      	str	r2, [sp, #12]
    17e2:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    17e6:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    17ea:	07da      	lsls	r2, r3, #31
    17ec:	f140 812e 	bpl.w	1a4c <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    17f0:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    17f4:	f1b8 0f00 	cmp.w	r8, #0
    17f8:	da07      	bge.n	180a <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    17fa:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    17fe:	f042 0204 	orr.w	r2, r2, #4
    1802:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
    1806:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    180a:	075e      	lsls	r6, r3, #29
    180c:	f140 8127 	bpl.w	1a5e <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    1810:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    1814:	f1ba 0f00 	cmp.w	sl, #0
    1818:	f280 8126 	bge.w	1a68 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    181c:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    1820:	f36f 0341 	bfc	r3, #1, #1
    1824:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    1828:	f04f 3aff 	mov.w	sl, #4294967295
    182c:	e11c      	b.n	1a68 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    182e:	2a2d      	cmp	r2, #45	; 0x2d
    1830:	d00d      	beq.n	184e <z_cbvprintf_impl+0x1aa>
    1832:	2a30      	cmp	r2, #48	; 0x30
    1834:	f47f af69 	bne.w	170a <z_cbvprintf_impl+0x66>
    1838:	2301      	movs	r3, #1
	} while (loop);
    183a:	e758      	b.n	16ee <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    183c:	f04f 0c01 	mov.w	ip, #1
    1840:	e755      	b.n	16ee <z_cbvprintf_impl+0x4a>
    1842:	f04f 0e01 	mov.w	lr, #1
    1846:	e752      	b.n	16ee <z_cbvprintf_impl+0x4a>
    1848:	f04f 0801 	mov.w	r8, #1
    184c:	e74f      	b.n	16ee <z_cbvprintf_impl+0x4a>
    184e:	2601      	movs	r6, #1
    1850:	e74d      	b.n	16ee <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    1852:	fb0e 6202 	mla	r2, lr, r2, r6
    1856:	3a30      	subs	r2, #48	; 0x30
    1858:	4603      	mov	r3, r0
    185a:	4618      	mov	r0, r3
    185c:	f810 6b01 	ldrb.w	r6, [r0], #1
    1860:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    1864:	f1bc 0f09 	cmp.w	ip, #9
    1868:	d9f3      	bls.n	1852 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    186a:	4299      	cmp	r1, r3
    186c:	d08f      	beq.n	178e <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    186e:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    1872:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    1874:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1876:	f362 0141 	bfi	r1, r2, #1, #1
    187a:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    187e:	e786      	b.n	178e <z_cbvprintf_impl+0xea>
    1880:	460b      	mov	r3, r1
	size_t val = 0;
    1882:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1884:	f04f 0e0a 	mov.w	lr, #10
    1888:	e7e7      	b.n	185a <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    188a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    188e:	f042 0204 	orr.w	r2, r2, #4
    1892:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    1896:	3302      	adds	r3, #2
	switch (*sp) {
    1898:	781a      	ldrb	r2, [r3, #0]
    189a:	2a6c      	cmp	r2, #108	; 0x6c
    189c:	d047      	beq.n	192e <z_cbvprintf_impl+0x28a>
    189e:	d82b      	bhi.n	18f8 <z_cbvprintf_impl+0x254>
    18a0:	2a68      	cmp	r2, #104	; 0x68
    18a2:	d031      	beq.n	1908 <z_cbvprintf_impl+0x264>
    18a4:	2a6a      	cmp	r2, #106	; 0x6a
    18a6:	d04b      	beq.n	1940 <z_cbvprintf_impl+0x29c>
    18a8:	2a4c      	cmp	r2, #76	; 0x4c
    18aa:	d051      	beq.n	1950 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    18ac:	461a      	mov	r2, r3
    18ae:	f812 3b01 	ldrb.w	r3, [r2], #1
    18b2:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    18b4:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    18b6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    18ba:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    18be:	f200 80be 	bhi.w	1a3e <z_cbvprintf_impl+0x39a>
    18c2:	2b6d      	cmp	r3, #109	; 0x6d
    18c4:	d851      	bhi.n	196a <z_cbvprintf_impl+0x2c6>
    18c6:	2b69      	cmp	r3, #105	; 0x69
    18c8:	f200 80b9 	bhi.w	1a3e <z_cbvprintf_impl+0x39a>
    18cc:	2b57      	cmp	r3, #87	; 0x57
    18ce:	d867      	bhi.n	19a0 <z_cbvprintf_impl+0x2fc>
    18d0:	2b41      	cmp	r3, #65	; 0x41
    18d2:	d003      	beq.n	18dc <z_cbvprintf_impl+0x238>
    18d4:	3b45      	subs	r3, #69	; 0x45
    18d6:	2b02      	cmp	r3, #2
    18d8:	f200 80b1 	bhi.w	1a3e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    18dc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    18e0:	2204      	movs	r2, #4
    18e2:	f362 0302 	bfi	r3, r2, #0, #3
    18e6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    18ea:	2301      	movs	r3, #1
			break;
    18ec:	e073      	b.n	19d6 <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    18ee:	fb0c 0202 	mla	r2, ip, r2, r0
    18f2:	3a30      	subs	r2, #48	; 0x30
    18f4:	460b      	mov	r3, r1
    18f6:	e75d      	b.n	17b4 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    18f8:	2a74      	cmp	r2, #116	; 0x74
    18fa:	d025      	beq.n	1948 <z_cbvprintf_impl+0x2a4>
    18fc:	2a7a      	cmp	r2, #122	; 0x7a
    18fe:	d1d5      	bne.n	18ac <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    1900:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1904:	2106      	movs	r1, #6
    1906:	e00c      	b.n	1922 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    1908:	785a      	ldrb	r2, [r3, #1]
    190a:	2a68      	cmp	r2, #104	; 0x68
    190c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1910:	d106      	bne.n	1920 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    1912:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1914:	f361 02c6 	bfi	r2, r1, #3, #4
    1918:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    191c:	3302      	adds	r3, #2
    191e:	e7c5      	b.n	18ac <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    1920:	2102      	movs	r1, #2
    1922:	f361 02c6 	bfi	r2, r1, #3, #4
    1926:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    192a:	3301      	adds	r3, #1
    192c:	e7be      	b.n	18ac <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    192e:	785a      	ldrb	r2, [r3, #1]
    1930:	2a6c      	cmp	r2, #108	; 0x6c
    1932:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1936:	d101      	bne.n	193c <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    1938:	2104      	movs	r1, #4
    193a:	e7eb      	b.n	1914 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    193c:	2103      	movs	r1, #3
    193e:	e7f0      	b.n	1922 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    1940:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1944:	2105      	movs	r1, #5
    1946:	e7ec      	b.n	1922 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    1948:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    194c:	2107      	movs	r1, #7
    194e:	e7e8      	b.n	1922 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    1950:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    1954:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    1958:	f022 0202 	bic.w	r2, r2, #2
    195c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    1960:	f042 0202 	orr.w	r2, r2, #2
    1964:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    1968:	e7df      	b.n	192a <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    196a:	3b6e      	subs	r3, #110	; 0x6e
    196c:	b2d9      	uxtb	r1, r3
    196e:	2301      	movs	r3, #1
    1970:	408b      	lsls	r3, r1
    1972:	f240 4182 	movw	r1, #1154	; 0x482
    1976:	420b      	tst	r3, r1
    1978:	d137      	bne.n	19ea <z_cbvprintf_impl+0x346>
    197a:	f013 0f24 	tst.w	r3, #36	; 0x24
    197e:	d151      	bne.n	1a24 <z_cbvprintf_impl+0x380>
    1980:	07d8      	lsls	r0, r3, #31
    1982:	d55c      	bpl.n	1a3e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    1984:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1988:	2103      	movs	r1, #3
    198a:	f361 0302 	bfi	r3, r1, #0, #3
    198e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    1992:	f002 0378 	and.w	r3, r2, #120	; 0x78
    1996:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    199a:	424b      	negs	r3, r1
    199c:	414b      	adcs	r3, r1
    199e:	e01a      	b.n	19d6 <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
    19a0:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    19a4:	b2c9      	uxtb	r1, r1
    19a6:	2001      	movs	r0, #1
    19a8:	fa00 f101 	lsl.w	r1, r0, r1
    19ac:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    19b0:	d194      	bne.n	18dc <z_cbvprintf_impl+0x238>
    19b2:	f640 0601 	movw	r6, #2049	; 0x801
    19b6:	4231      	tst	r1, r6
    19b8:	d11d      	bne.n	19f6 <z_cbvprintf_impl+0x352>
    19ba:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    19be:	d03e      	beq.n	1a3e <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    19c0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    19c4:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    19c8:	f002 0278 	and.w	r2, r2, #120	; 0x78
    19cc:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    19ce:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    19d2:	d034      	beq.n	1a3e <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    19d4:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    19d6:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    19da:	f3c2 0140 	ubfx	r1, r2, #1, #1
    19de:	430b      	orrs	r3, r1
    19e0:	f363 0241 	bfi	r2, r3, #1, #1
    19e4:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    19e8:	e6fd      	b.n	17e6 <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    19ea:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    19ee:	2102      	movs	r1, #2
    19f0:	f361 0302 	bfi	r3, r1, #0, #3
    19f4:	e7e8      	b.n	19c8 <z_cbvprintf_impl+0x324>
    19f6:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    19fa:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    19fc:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1a00:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1a04:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1a06:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    1a0a:	bf02      	ittt	eq
    1a0c:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    1a10:	f041 0101 	orreq.w	r1, r1, #1
    1a14:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    1a18:	2b63      	cmp	r3, #99	; 0x63
    1a1a:	d1db      	bne.n	19d4 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1a1c:	1e13      	subs	r3, r2, #0
    1a1e:	bf18      	it	ne
    1a20:	2301      	movne	r3, #1
    1a22:	e7d8      	b.n	19d6 <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    1a24:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1a28:	2103      	movs	r1, #3
    1a2a:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    1a2e:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1a32:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    1a36:	bf14      	ite	ne
    1a38:	2301      	movne	r3, #1
    1a3a:	2300      	moveq	r3, #0
    1a3c:	e7cb      	b.n	19d6 <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    1a3e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1a42:	f043 0301 	orr.w	r3, r3, #1
    1a46:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    1a4a:	e7c3      	b.n	19d4 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    1a4c:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    1a50:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1a52:	bfb4      	ite	lt
    1a54:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    1a58:	f04f 38ff 	movge.w	r8, #4294967295
    1a5c:	e6d5      	b.n	180a <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    1a5e:	0798      	lsls	r0, r3, #30
    1a60:	f57f aee2 	bpl.w	1828 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    1a64:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    1a68:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    1a6c:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1a6e:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    1a72:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    1a76:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1a7a:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1a7c:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1a80:	d133      	bne.n	1aea <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    1a82:	1ecb      	subs	r3, r1, #3
    1a84:	2b04      	cmp	r3, #4
    1a86:	d804      	bhi.n	1a92 <z_cbvprintf_impl+0x3ee>
    1a88:	e8df f003 	tbb	[pc, r3]
    1a8c:	21464621 	.word	0x21464621
    1a90:	21          	.byte	0x21
    1a91:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    1a92:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    1a94:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    1a96:	ea4f 72e3 	mov.w	r2, r3, asr #31
    1a9a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    1a9e:	d11c      	bne.n	1ada <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    1aa0:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    1aa4:	17da      	asrs	r2, r3, #31
    1aa6:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    1aaa:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    1aac:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1ab0:	f013 0603 	ands.w	r6, r3, #3
    1ab4:	d050      	beq.n	1b58 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    1ab6:	9b03      	ldr	r3, [sp, #12]
    1ab8:	463a      	mov	r2, r7
    1aba:	4659      	mov	r1, fp
    1abc:	4648      	mov	r0, r9
    1abe:	f009 fd5b 	bl	b578 <outs>
    1ac2:	2800      	cmp	r0, #0
    1ac4:	f2c0 8153 	blt.w	1d6e <z_cbvprintf_impl+0x6ca>
    1ac8:	4405      	add	r5, r0
			continue;
    1aca:	9f03      	ldr	r7, [sp, #12]
    1acc:	e5f2      	b.n	16b4 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1ace:	f854 3b04 	ldr.w	r3, [r4], #4
    1ad2:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    1ad4:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    1ad8:	e7e8      	b.n	1aac <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    1ada:	2902      	cmp	r1, #2
    1adc:	d1e5      	bne.n	1aaa <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    1ade:	b21a      	sxth	r2, r3
    1ae0:	f343 33c0 	sbfx	r3, r3, #15, #1
    1ae4:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    1ae8:	e7df      	b.n	1aaa <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1aea:	2b02      	cmp	r3, #2
    1aec:	d124      	bne.n	1b38 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    1aee:	1ecb      	subs	r3, r1, #3
    1af0:	2b04      	cmp	r3, #4
    1af2:	d804      	bhi.n	1afe <z_cbvprintf_impl+0x45a>
    1af4:	e8df f003 	tbb	[pc, r3]
    1af8:	18101018 	.word	0x18101018
    1afc:	18          	.byte	0x18
    1afd:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    1afe:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    1b00:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1b04:	f04f 0200 	mov.w	r2, #0
    1b08:	d014      	beq.n	1b34 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    1b0a:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    1b0c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    1b10:	d1cc      	bne.n	1aac <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    1b12:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    1b14:	930e      	str	r3, [sp, #56]	; 0x38
    1b16:	e7c9      	b.n	1aac <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    1b18:	3407      	adds	r4, #7
    1b1a:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    1b1e:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1b22:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    1b26:	e7c1      	b.n	1aac <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    1b28:	f854 3b04 	ldr.w	r3, [r4], #4
    1b2c:	930e      	str	r3, [sp, #56]	; 0x38
    1b2e:	2300      	movs	r3, #0
    1b30:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    1b32:	e7bb      	b.n	1aac <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    1b34:	b2db      	uxtb	r3, r3
    1b36:	e7cd      	b.n	1ad4 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    1b38:	2b04      	cmp	r3, #4
    1b3a:	d108      	bne.n	1b4e <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    1b3c:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    1b3e:	f024 0407 	bic.w	r4, r4, #7
    1b42:	e9d4 2300 	ldrd	r2, r3, [r4]
    1b46:	3408      	adds	r4, #8
    1b48:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    1b4c:	e7ae      	b.n	1aac <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1b4e:	2b03      	cmp	r3, #3
    1b50:	d1ac      	bne.n	1aac <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    1b52:	f854 3b04 	ldr.w	r3, [r4], #4
    1b56:	e7dd      	b.n	1b14 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    1b58:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    1b5c:	2878      	cmp	r0, #120	; 0x78
    1b5e:	d8b4      	bhi.n	1aca <z_cbvprintf_impl+0x426>
    1b60:	2862      	cmp	r0, #98	; 0x62
    1b62:	d81c      	bhi.n	1b9e <z_cbvprintf_impl+0x4fa>
    1b64:	2825      	cmp	r0, #37	; 0x25
    1b66:	f43f adad 	beq.w	16c4 <z_cbvprintf_impl+0x20>
    1b6a:	2858      	cmp	r0, #88	; 0x58
    1b6c:	d1ad      	bne.n	1aca <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1b6e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1b72:	9300      	str	r3, [sp, #0]
    1b74:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    1b78:	ab08      	add	r3, sp, #32
    1b7a:	aa10      	add	r2, sp, #64	; 0x40
    1b7c:	f009 fcb6 	bl	b4ec <encode_uint>
			if (precision >= 0) {
    1b80:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    1b84:	4607      	mov	r7, r0
			if (precision >= 0) {
    1b86:	f280 809a 	bge.w	1cbe <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
    1b8a:	2f00      	cmp	r7, #0
    1b8c:	d09d      	beq.n	1aca <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    1b8e:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1b92:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    1b94:	2e00      	cmp	r6, #0
    1b96:	f000 80c1 	beq.w	1d1c <z_cbvprintf_impl+0x678>
			nj_len += 1U;
    1b9a:	3001      	adds	r0, #1
    1b9c:	e0be      	b.n	1d1c <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
    1b9e:	3863      	subs	r0, #99	; 0x63
    1ba0:	2815      	cmp	r0, #21
    1ba2:	d892      	bhi.n	1aca <z_cbvprintf_impl+0x426>
    1ba4:	a201      	add	r2, pc, #4	; (adr r2, 1bac <z_cbvprintf_impl+0x508>)
    1ba6:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1baa:	bf00      	nop
    1bac:	00001c81 	.word	0x00001c81
    1bb0:	00001c93 	.word	0x00001c93
    1bb4:	00001acb 	.word	0x00001acb
    1bb8:	00001acb 	.word	0x00001acb
    1bbc:	00001acb 	.word	0x00001acb
    1bc0:	00001acb 	.word	0x00001acb
    1bc4:	00001c93 	.word	0x00001c93
    1bc8:	00001acb 	.word	0x00001acb
    1bcc:	00001acb 	.word	0x00001acb
    1bd0:	00001acb 	.word	0x00001acb
    1bd4:	00001acb 	.word	0x00001acb
    1bd8:	00001d21 	.word	0x00001d21
    1bdc:	00001cb9 	.word	0x00001cb9
    1be0:	00001cdf 	.word	0x00001cdf
    1be4:	00001acb 	.word	0x00001acb
    1be8:	00001acb 	.word	0x00001acb
    1bec:	00001c05 	.word	0x00001c05
    1bf0:	00001acb 	.word	0x00001acb
    1bf4:	00001cb9 	.word	0x00001cb9
    1bf8:	00001acb 	.word	0x00001acb
    1bfc:	00001acb 	.word	0x00001acb
    1c00:	00001cb9 	.word	0x00001cb9
			if (precision >= 0) {
    1c04:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    1c08:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    1c0a:	db35      	blt.n	1c78 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    1c0c:	4651      	mov	r1, sl
    1c0e:	4638      	mov	r0, r7
    1c10:	f00a f844 	bl	bc9c <strnlen>
			bpe = bps + len;
    1c14:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    1c18:	2f00      	cmp	r7, #0
    1c1a:	f43f af56 	beq.w	1aca <z_cbvprintf_impl+0x426>
		char sign = 0;
    1c1e:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    1c20:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1c24:	f013 0210 	ands.w	r2, r3, #16
    1c28:	9205      	str	r2, [sp, #20]
    1c2a:	f000 8093 	beq.w	1d54 <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
    1c2e:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    1c30:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    1c32:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    1c34:	bf48      	it	mi
    1c36:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    1c38:	9204      	str	r2, [sp, #16]
    1c3a:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    1c3c:	bf48      	it	mi
    1c3e:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    1c40:	f1b8 0f00 	cmp.w	r8, #0
    1c44:	f340 80a0 	ble.w	1d88 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
    1c48:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    1c4c:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    1c50:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1c54:	0750      	lsls	r0, r2, #29
    1c56:	9306      	str	r3, [sp, #24]
    1c58:	f100 8096 	bmi.w	1d88 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
    1c5c:	0651      	lsls	r1, r2, #25
    1c5e:	f140 8089 	bpl.w	1d74 <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
    1c62:	b13e      	cbz	r6, 1c74 <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    1c64:	4659      	mov	r1, fp
    1c66:	4630      	mov	r0, r6
    1c68:	47c8      	blx	r9
    1c6a:	2800      	cmp	r0, #0
    1c6c:	db7f      	blt.n	1d6e <z_cbvprintf_impl+0x6ca>
    1c6e:	9b06      	ldr	r3, [sp, #24]
    1c70:	3501      	adds	r5, #1
    1c72:	461e      	mov	r6, r3
					pad = '0';
    1c74:	2230      	movs	r2, #48	; 0x30
    1c76:	e07e      	b.n	1d76 <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
    1c78:	4638      	mov	r0, r7
    1c7a:	f00a f808 	bl	bc8e <strlen>
    1c7e:	e7c9      	b.n	1c14 <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1c80:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    1c82:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    1c86:	2600      	movs	r6, #0
			bps = buf;
    1c88:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    1c8a:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    1c8e:	2001      	movs	r0, #1
    1c90:	e7c6      	b.n	1c20 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    1c92:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    1c94:	bf5c      	itt	pl
    1c96:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    1c9a:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    1c9c:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    1ca0:	bf48      	it	mi
    1ca2:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    1ca4:	2b00      	cmp	r3, #0
    1ca6:	f6bf af62 	bge.w	1b6e <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    1caa:	4252      	negs	r2, r2
    1cac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1cb0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    1cb4:	262d      	movs	r6, #45	; 0x2d
    1cb6:	e75a      	b.n	1b6e <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    1cb8:	2600      	movs	r6, #0
    1cba:	e758      	b.n	1b6e <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    1cbc:	2600      	movs	r6, #0
				conv->flag_zero = false;
    1cbe:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    1cc2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1cc6:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    1cc8:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1ccc:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    1cce:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    1cd2:	f67f af5a 	bls.w	1b8a <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    1cd6:	ebaa 0303 	sub.w	r3, sl, r3
    1cda:	9311      	str	r3, [sp, #68]	; 0x44
    1cdc:	e755      	b.n	1b8a <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    1cde:	980e      	ldr	r0, [sp, #56]	; 0x38
    1ce0:	b390      	cbz	r0, 1d48 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1ce2:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1ce6:	9300      	str	r3, [sp, #0]
    1ce8:	aa10      	add	r2, sp, #64	; 0x40
    1cea:	ab08      	add	r3, sp, #32
    1cec:	2100      	movs	r1, #0
    1cee:	f009 fbfd 	bl	b4ec <encode_uint>
				conv->altform_0c = true;
    1cf2:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    1cf6:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1cfa:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1cfe:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    1d02:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1d06:	4607      	mov	r7, r0
				conv->altform_0c = true;
    1d08:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    1d0c:	dad6      	bge.n	1cbc <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    1d0e:	2800      	cmp	r0, #0
    1d10:	f43f aedb 	beq.w	1aca <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    1d14:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    1d18:	1a18      	subs	r0, r3, r0
		char sign = 0;
    1d1a:	2600      	movs	r6, #0
    1d1c:	469a      	mov	sl, r3
    1d1e:	e77f      	b.n	1c20 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    1d20:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    1d22:	2907      	cmp	r1, #7
    1d24:	f63f aed1 	bhi.w	1aca <z_cbvprintf_impl+0x426>
    1d28:	e8df f001 	tbb	[pc, r1]
    1d2c:	0c06040c 	.word	0x0c06040c
    1d30:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    1d34:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    1d36:	e6c8      	b.n	1aca <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    1d38:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    1d3a:	e6c6      	b.n	1aca <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    1d3c:	17ea      	asrs	r2, r5, #31
    1d3e:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    1d42:	e6c2      	b.n	1aca <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1d44:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    1d46:	e6c0      	b.n	1aca <z_cbvprintf_impl+0x426>
    1d48:	4f2e      	ldr	r7, [pc, #184]	; (1e04 <z_cbvprintf_impl+0x760>)
		char sign = 0;
    1d4a:	4606      	mov	r6, r0
			bpe = bps + 5;
    1d4c:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    1d50:	2005      	movs	r0, #5
    1d52:	e765      	b.n	1c20 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    1d54:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    1d56:	bf48      	it	mi
    1d58:	3001      	addmi	r0, #1
    1d5a:	e769      	b.n	1c30 <z_cbvprintf_impl+0x58c>
    1d5c:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    1d5e:	4610      	mov	r0, r2
    1d60:	9206      	str	r2, [sp, #24]
    1d62:	4659      	mov	r1, fp
    1d64:	47c8      	blx	r9
    1d66:	2800      	cmp	r0, #0
    1d68:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1d6c:	da04      	bge.n	1d78 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
    1d6e:	b015      	add	sp, #84	; 0x54
    1d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1d74:	2220      	movs	r2, #32
					pad = '0';
    1d76:	4643      	mov	r3, r8
				while (width-- > 0) {
    1d78:	4619      	mov	r1, r3
    1d7a:	2900      	cmp	r1, #0
    1d7c:	f103 33ff 	add.w	r3, r3, #4294967295
    1d80:	dcec      	bgt.n	1d5c <z_cbvprintf_impl+0x6b8>
    1d82:	4445      	add	r5, r8
    1d84:	1a6d      	subs	r5, r5, r1
    1d86:	4698      	mov	r8, r3
		if (sign != 0) {
    1d88:	b12e      	cbz	r6, 1d96 <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
    1d8a:	4659      	mov	r1, fp
    1d8c:	4630      	mov	r0, r6
    1d8e:	47c8      	blx	r9
    1d90:	2800      	cmp	r0, #0
    1d92:	dbec      	blt.n	1d6e <z_cbvprintf_impl+0x6ca>
    1d94:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1d96:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1d9a:	06da      	lsls	r2, r3, #27
    1d9c:	d401      	bmi.n	1da2 <z_cbvprintf_impl+0x6fe>
    1d9e:	071b      	lsls	r3, r3, #28
    1da0:	d505      	bpl.n	1dae <z_cbvprintf_impl+0x70a>
				OUTC('0');
    1da2:	4659      	mov	r1, fp
    1da4:	2030      	movs	r0, #48	; 0x30
    1da6:	47c8      	blx	r9
    1da8:	2800      	cmp	r0, #0
    1daa:	dbe0      	blt.n	1d6e <z_cbvprintf_impl+0x6ca>
    1dac:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1dae:	9b05      	ldr	r3, [sp, #20]
    1db0:	b133      	cbz	r3, 1dc0 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
    1db2:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    1db6:	4659      	mov	r1, fp
    1db8:	47c8      	blx	r9
    1dba:	2800      	cmp	r0, #0
    1dbc:	dbd7      	blt.n	1d6e <z_cbvprintf_impl+0x6ca>
    1dbe:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1dc0:	9e04      	ldr	r6, [sp, #16]
    1dc2:	442e      	add	r6, r5
    1dc4:	e005      	b.n	1dd2 <z_cbvprintf_impl+0x72e>
				OUTC('0');
    1dc6:	4659      	mov	r1, fp
    1dc8:	2030      	movs	r0, #48	; 0x30
    1dca:	47c8      	blx	r9
    1dcc:	2800      	cmp	r0, #0
    1dce:	dbce      	blt.n	1d6e <z_cbvprintf_impl+0x6ca>
    1dd0:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1dd2:	1b73      	subs	r3, r6, r5
    1dd4:	2b00      	cmp	r3, #0
    1dd6:	dcf6      	bgt.n	1dc6 <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
    1dd8:	4653      	mov	r3, sl
    1dda:	463a      	mov	r2, r7
    1ddc:	4659      	mov	r1, fp
    1dde:	4648      	mov	r0, r9
    1de0:	f009 fbca 	bl	b578 <outs>
    1de4:	2800      	cmp	r0, #0
    1de6:	dbc2      	blt.n	1d6e <z_cbvprintf_impl+0x6ca>
    1de8:	4405      	add	r5, r0
		while (width > 0) {
    1dea:	44a8      	add	r8, r5
    1dec:	eba8 0305 	sub.w	r3, r8, r5
    1df0:	2b00      	cmp	r3, #0
    1df2:	f77f ae6a 	ble.w	1aca <z_cbvprintf_impl+0x426>
			OUTC(' ');
    1df6:	4659      	mov	r1, fp
    1df8:	2020      	movs	r0, #32
    1dfa:	47c8      	blx	r9
    1dfc:	2800      	cmp	r0, #0
    1dfe:	dbb6      	blt.n	1d6e <z_cbvprintf_impl+0x6ca>
    1e00:	3501      	adds	r5, #1
			--width;
    1e02:	e7f3      	b.n	1dec <z_cbvprintf_impl+0x748>
    1e04:	0000d69a 	.word	0x0000d69a

00001e08 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    1e08:	f005 bcec 	b.w	77e4 <SystemInit>

00001e0c <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    1e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1e10:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1e6c <activate_foreach_backend+0x60>
{
    1e14:	4604      	mov	r4, r0
	while (mask_cpy) {
    1e16:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    1e18:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
    1e1c:	b914      	cbnz	r4, 1e24 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    1e1e:	4638      	mov	r0, r7
    1e20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    1e24:	fa94 f5a4 	rbit	r5, r4
    1e28:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    1e2c:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1e30:	012e      	lsls	r6, r5, #4
    1e32:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    1e36:	ea6f 0a03 	mvn.w	sl, r3
    1e3a:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1e3e:	7b2b      	ldrb	r3, [r5, #12]
    1e40:	2b00      	cmp	r3, #0
    1e42:	d0eb      	beq.n	1e1c <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    1e44:	f858 3006 	ldr.w	r3, [r8, r6]
    1e48:	691b      	ldr	r3, [r3, #16]
    1e4a:	b94b      	cbnz	r3, 1e60 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    1e4c:	4446      	add	r6, r8
			log_backend_enable(backend,
    1e4e:	2204      	movs	r2, #4
    1e50:	6873      	ldr	r3, [r6, #4]
    1e52:	4628      	mov	r0, r5
    1e54:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    1e56:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    1e5a:	f000 fa59 	bl	2310 <log_backend_enable>
    1e5e:	e7dd      	b.n	1e1c <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    1e60:	4628      	mov	r0, r5
    1e62:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    1e64:	2800      	cmp	r0, #0
    1e66:	d1d9      	bne.n	1e1c <activate_foreach_backend+0x10>
    1e68:	e7f0      	b.n	1e4c <activate_foreach_backend+0x40>
    1e6a:	bf00      	nop
    1e6c:	0000d048 	.word	0x0000d048

00001e70 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    1e70:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    1e72:	4910      	ldr	r1, [pc, #64]	; (1eb4 <enable_logger+0x44>)
    1e74:	4810      	ldr	r0, [pc, #64]	; (1eb8 <enable_logger+0x48>)
{
    1e76:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    1e78:	2200      	movs	r2, #0
    1e7a:	f00a ff01 	bl	cc80 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1e7e:	4d0f      	ldr	r5, [pc, #60]	; (1ebc <enable_logger+0x4c>)
    1e80:	490f      	ldr	r1, [pc, #60]	; (1ec0 <enable_logger+0x50>)
    1e82:	2200      	movs	r2, #0
    1e84:	2300      	movs	r3, #0
    1e86:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1e8a:	2400      	movs	r4, #0
    1e8c:	230e      	movs	r3, #14
    1e8e:	e9cd 3403 	strd	r3, r4, [sp, #12]
    1e92:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1e96:	4b0b      	ldr	r3, [pc, #44]	; (1ec4 <enable_logger+0x54>)
    1e98:	9400      	str	r4, [sp, #0]
    1e9a:	f44f 7240 	mov.w	r2, #768	; 0x300
    1e9e:	4628      	mov	r0, r5
    1ea0:	f007 fe5c 	bl	9b5c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    1ea4:	4908      	ldr	r1, [pc, #32]	; (1ec8 <enable_logger+0x58>)
    1ea6:	4628      	mov	r0, r5
    1ea8:	f00a fc6d 	bl	c786 <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    1eac:	4620      	mov	r0, r4
    1eae:	b009      	add	sp, #36	; 0x24
    1eb0:	bd30      	pop	{r4, r5, pc}
    1eb2:	bf00      	nop
    1eb4:	00001ecd 	.word	0x00001ecd
    1eb8:	20000880 	.word	0x20000880
    1ebc:	200003f8 	.word	0x200003f8
    1ec0:	20001fc0 	.word	0x20001fc0
    1ec4:	000021bd 	.word	0x000021bd
    1ec8:	0000d6a0 	.word	0x0000d6a0

00001ecc <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1ecc:	4801      	ldr	r0, [pc, #4]	; (1ed4 <log_process_thread_timer_expiry_fn+0x8>)
    1ece:	f007 bfd3 	b.w	9e78 <z_impl_k_sem_give>
    1ed2:	bf00      	nop
    1ed4:	20000320 	.word	0x20000320

00001ed8 <z_log_init>:
{
    1ed8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1edc:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    1ede:	481f      	ldr	r0, [pc, #124]	; (1f5c <z_log_init+0x84>)
{
    1ee0:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    1ee2:	f009 fdc9 	bl	ba78 <atomic_inc>
    1ee6:	4606      	mov	r6, r0
    1ee8:	2800      	cmp	r0, #0
    1eea:	d030      	beq.n	1f4e <z_log_init+0x76>
	uint32_t mask = 0;
    1eec:	2500      	movs	r5, #0
}
    1eee:	4628      	mov	r0, r5
    1ef0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    1ef4:	7b23      	ldrb	r3, [r4, #12]
    1ef6:	b173      	cbz	r3, 1f16 <z_log_init+0x3e>
	if (backend->api->init) {
    1ef8:	6823      	ldr	r3, [r4, #0]
    1efa:	68db      	ldr	r3, [r3, #12]
    1efc:	b10b      	cbz	r3, 1f02 <z_log_init+0x2a>
		backend->api->init(backend);
    1efe:	4620      	mov	r0, r4
    1f00:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    1f02:	6823      	ldr	r3, [r4, #0]
    1f04:	691b      	ldr	r3, [r3, #16]
    1f06:	b9d3      	cbnz	r3, 1f3e <z_log_init+0x66>
				log_backend_enable(backend,
    1f08:	6863      	ldr	r3, [r4, #4]
    1f0a:	2204      	movs	r2, #4
    1f0c:	6819      	ldr	r1, [r3, #0]
    1f0e:	4620      	mov	r0, r4
    1f10:	f000 f9fe 	bl	2310 <log_backend_enable>
			i++;
    1f14:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1f16:	3410      	adds	r4, #16
    1f18:	454c      	cmp	r4, r9
    1f1a:	d3eb      	bcc.n	1ef4 <z_log_init+0x1c>
	if (blocking) {
    1f1c:	f1b8 0f00 	cmp.w	r8, #0
    1f20:	d0e5      	beq.n	1eee <z_log_init+0x16>
		while (mask) {
    1f22:	2d00      	cmp	r5, #0
    1f24:	d0e2      	beq.n	1eec <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    1f26:	4628      	mov	r0, r5
    1f28:	f7ff ff70 	bl	1e0c <activate_foreach_backend>
    1f2c:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    1f2e:	2f00      	cmp	r7, #0
    1f30:	d0f7      	beq.n	1f22 <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    1f32:	2100      	movs	r1, #0
    1f34:	f44f 70a4 	mov.w	r0, #328	; 0x148
    1f38:	f008 fc44 	bl	a7c4 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    1f3c:	e7f1      	b.n	1f22 <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    1f3e:	4620      	mov	r0, r4
    1f40:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    1f42:	2800      	cmp	r0, #0
    1f44:	d0e0      	beq.n	1f08 <z_log_init+0x30>
				mask |= BIT(i);
    1f46:	fa0a f306 	lsl.w	r3, sl, r6
    1f4a:	431d      	orrs	r5, r3
    1f4c:	e7e2      	b.n	1f14 <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    1f4e:	4c04      	ldr	r4, [pc, #16]	; (1f60 <z_log_init+0x88>)
    1f50:	f8df 9010 	ldr.w	r9, [pc, #16]	; 1f64 <z_log_init+0x8c>
	uint32_t mask = 0;
    1f54:	4605      	mov	r5, r0
				mask |= BIT(i);
    1f56:	f04f 0a01 	mov.w	sl, #1
    1f5a:	e7dd      	b.n	1f18 <z_log_init+0x40>
    1f5c:	20000c28 	.word	0x20000c28
    1f60:	0000d048 	.word	0x0000d048
    1f64:	0000d058 	.word	0x0000d058

00001f68 <log_format_func_t_get>:
}
    1f68:	4b01      	ldr	r3, [pc, #4]	; (1f70 <log_format_func_t_get+0x8>)
    1f6a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    1f6e:	4770      	bx	lr
    1f70:	0000d0c8 	.word	0x0000d0c8

00001f74 <log_set_timestamp_func>:
{
    1f74:	b508      	push	{r3, lr}
    1f76:	4603      	mov	r3, r0
    1f78:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    1f7a:	b12b      	cbz	r3, 1f88 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    1f7c:	4a04      	ldr	r2, [pc, #16]	; (1f90 <log_set_timestamp_func+0x1c>)
    1f7e:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    1f80:	f000 fc78 	bl	2874 <log_output_timestamp_freq_set>
	return 0;
    1f84:	2000      	movs	r0, #0
}
    1f86:	bd08      	pop	{r3, pc}
		return -EINVAL;
    1f88:	f06f 0015 	mvn.w	r0, #21
    1f8c:	e7fb      	b.n	1f86 <log_set_timestamp_func+0x12>
    1f8e:	bf00      	nop
    1f90:	20000014 	.word	0x20000014

00001f94 <z_log_notify_backend_enabled>:
{
    1f94:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    1f96:	4c04      	ldr	r4, [pc, #16]	; (1fa8 <z_log_notify_backend_enabled+0x14>)
    1f98:	7823      	ldrb	r3, [r4, #0]
    1f9a:	b913      	cbnz	r3, 1fa2 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    1f9c:	4803      	ldr	r0, [pc, #12]	; (1fac <z_log_notify_backend_enabled+0x18>)
    1f9e:	f007 ff6b 	bl	9e78 <z_impl_k_sem_give>
	backend_attached = true;
    1fa2:	2301      	movs	r3, #1
    1fa4:	7023      	strb	r3, [r4, #0]
}
    1fa6:	bd10      	pop	{r4, pc}
    1fa8:	20001b55 	.word	0x20001b55
    1fac:	20000320 	.word	0x20000320

00001fb0 <z_log_dropped>:
{
    1fb0:	b510      	push	{r4, lr}
    1fb2:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    1fb4:	4808      	ldr	r0, [pc, #32]	; (1fd8 <z_log_dropped+0x28>)
    1fb6:	f009 fd5f 	bl	ba78 <atomic_inc>
	if (buffered) {
    1fba:	b15c      	cbz	r4, 1fd4 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1fbc:	f3bf 8f5b 	dmb	ish
    1fc0:	4b06      	ldr	r3, [pc, #24]	; (1fdc <z_log_dropped+0x2c>)
    1fc2:	e853 1f00 	ldrex	r1, [r3]
    1fc6:	3901      	subs	r1, #1
    1fc8:	e843 1200 	strex	r2, r1, [r3]
    1fcc:	2a00      	cmp	r2, #0
    1fce:	d1f8      	bne.n	1fc2 <z_log_dropped+0x12>
    1fd0:	f3bf 8f5b 	dmb	ish
}
    1fd4:	bd10      	pop	{r4, pc}
    1fd6:	bf00      	nop
    1fd8:	20000c20 	.word	0x20000c20
    1fdc:	20000c24 	.word	0x20000c24

00001fe0 <z_log_dropped_read_and_clear>:
}
    1fe0:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1fe2:	4b06      	ldr	r3, [pc, #24]	; (1ffc <z_log_dropped_read_and_clear+0x1c>)
    1fe4:	f3bf 8f5b 	dmb	ish
    1fe8:	4601      	mov	r1, r0
    1fea:	e853 0f00 	ldrex	r0, [r3]
    1fee:	e843 1200 	strex	r2, r1, [r3]
    1ff2:	2a00      	cmp	r2, #0
    1ff4:	d1f9      	bne.n	1fea <z_log_dropped_read_and_clear+0xa>
    1ff6:	f3bf 8f5b 	dmb	ish
    1ffa:	4770      	bx	lr
    1ffc:	20000c20 	.word	0x20000c20

00002000 <dropped_notify>:
{
    2000:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    2002:	f7ff ffed 	bl	1fe0 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2006:	4c08      	ldr	r4, [pc, #32]	; (2028 <dropped_notify+0x28>)
    2008:	4e08      	ldr	r6, [pc, #32]	; (202c <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
    200a:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    200c:	42b4      	cmp	r4, r6
    200e:	d300      	bcc.n	2012 <dropped_notify+0x12>
}
    2010:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    2012:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2014:	795b      	ldrb	r3, [r3, #5]
    2016:	b12b      	cbz	r3, 2024 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    2018:	6823      	ldr	r3, [r4, #0]
    201a:	685b      	ldr	r3, [r3, #4]
    201c:	b113      	cbz	r3, 2024 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    201e:	4629      	mov	r1, r5
    2020:	4620      	mov	r0, r4
    2022:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2024:	3410      	adds	r4, #16
    2026:	e7f1      	b.n	200c <dropped_notify+0xc>
    2028:	0000d048 	.word	0x0000d048
    202c:	0000d058 	.word	0x0000d058

00002030 <z_log_msg_init>:
{
    2030:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    2032:	4c04      	ldr	r4, [pc, #16]	; (2044 <z_log_msg_init+0x14>)
    2034:	4904      	ldr	r1, [pc, #16]	; (2048 <z_log_msg_init+0x18>)
    2036:	4620      	mov	r0, r4
    2038:	f009 fbaf 	bl	b79a <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    203c:	4b03      	ldr	r3, [pc, #12]	; (204c <z_log_msg_init+0x1c>)
    203e:	601c      	str	r4, [r3, #0]
}
    2040:	bd10      	pop	{r4, pc}
    2042:	bf00      	nop
    2044:	20000254 	.word	0x20000254
    2048:	0000d0b4 	.word	0x0000d0b4
    204c:	20000c18 	.word	0x20000c18

00002050 <log_core_init>:
	panic_mode = false;
    2050:	4a08      	ldr	r2, [pc, #32]	; (2074 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    2052:	4809      	ldr	r0, [pc, #36]	; (2078 <log_core_init+0x28>)
{
    2054:	b508      	push	{r3, lr}
	panic_mode = false;
    2056:	2300      	movs	r3, #0
    2058:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    205a:	4a08      	ldr	r2, [pc, #32]	; (207c <log_core_init+0x2c>)
    205c:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    205e:	4a08      	ldr	r2, [pc, #32]	; (2080 <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
    2060:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
    2064:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    2066:	f7ff ff85 	bl	1f74 <log_set_timestamp_func>
}
    206a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    206e:	f7ff bfdf 	b.w	2030 <z_log_msg_init>
    2072:	bf00      	nop
    2074:	20001b56 	.word	0x20001b56
    2078:	0000ba75 	.word	0x0000ba75
    207c:	20000c20 	.word	0x20000c20
    2080:	20000c24 	.word	0x20000c24

00002084 <z_log_msg_alloc>:
{
    2084:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    2086:	2200      	movs	r2, #0
    2088:	4801      	ldr	r0, [pc, #4]	; (2090 <z_log_msg_alloc+0xc>)
    208a:	2300      	movs	r3, #0
    208c:	f009 bba6 	b.w	b7dc <mpsc_pbuf_alloc>
    2090:	20000254 	.word	0x20000254

00002094 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    2094:	4801      	ldr	r0, [pc, #4]	; (209c <z_log_msg_local_claim+0x8>)
    2096:	f009 bc3f 	b.w	b918 <mpsc_pbuf_claim>
    209a:	bf00      	nop
    209c:	20000254 	.word	0x20000254

000020a0 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    20a0:	4b02      	ldr	r3, [pc, #8]	; (20ac <z_log_msg_free+0xc>)
{
    20a2:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    20a4:	6818      	ldr	r0, [r3, #0]
    20a6:	f009 bc89 	b.w	b9bc <mpsc_pbuf_free>
    20aa:	bf00      	nop
    20ac:	20000c18 	.word	0x20000c18

000020b0 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    20b0:	4801      	ldr	r0, [pc, #4]	; (20b8 <z_log_msg_pending+0x8>)
    20b2:	f009 bcbf 	b.w	ba34 <mpsc_pbuf_is_pending>
    20b6:	bf00      	nop
    20b8:	20000254 	.word	0x20000254

000020bc <z_impl_log_process>:
{
    20bc:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    20be:	4b28      	ldr	r3, [pc, #160]	; (2160 <z_impl_log_process+0xa4>)
    20c0:	7818      	ldrb	r0, [r3, #0]
    20c2:	2800      	cmp	r0, #0
    20c4:	d04b      	beq.n	215e <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
    20c6:	f7ff ffe5 	bl	2094 <z_log_msg_local_claim>
	if (msg) {
    20ca:	4605      	mov	r5, r0
    20cc:	b190      	cbz	r0, 20f4 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    20ce:	f3bf 8f5b 	dmb	ish
    20d2:	4b24      	ldr	r3, [pc, #144]	; (2164 <z_impl_log_process+0xa8>)
    20d4:	e853 1f00 	ldrex	r1, [r3]
    20d8:	3901      	subs	r1, #1
    20da:	e843 1200 	strex	r2, r1, [r3]
    20de:	2a00      	cmp	r2, #0
    20e0:	d1f8      	bne.n	20d4 <z_impl_log_process+0x18>
    20e2:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    20e6:	4c20      	ldr	r4, [pc, #128]	; (2168 <z_impl_log_process+0xac>)
    20e8:	4e20      	ldr	r6, [pc, #128]	; (216c <z_impl_log_process+0xb0>)
    20ea:	42b4      	cmp	r4, r6
    20ec:	d32d      	bcc.n	214a <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
    20ee:	4628      	mov	r0, r5
    20f0:	f7ff ffd6 	bl	20a0 <z_log_msg_free>
	return dropped_cnt > 0;
    20f4:	4b1e      	ldr	r3, [pc, #120]	; (2170 <z_impl_log_process+0xb4>)
    20f6:	4c1f      	ldr	r4, [pc, #124]	; (2174 <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
    20f8:	681b      	ldr	r3, [r3, #0]
    20fa:	2b00      	cmp	r3, #0
    20fc:	dd19      	ble.n	2132 <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
    20fe:	f00a fd97 	bl	cc30 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    2102:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2106:	fba0 0302 	umull	r0, r3, r0, r2
    210a:	fb02 3101 	mla	r1, r2, r1, r3
    210e:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    2110:	e9d4 2000 	ldrd	r2, r0, [r4]
    2114:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    2118:	1a9b      	subs	r3, r3, r2
    211a:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
    211e:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    2122:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    2126:	4293      	cmp	r3, r2
    2128:	f171 0100 	sbcs.w	r1, r1, #0
    212c:	d301      	bcc.n	2132 <z_impl_log_process+0x76>
				dropped_notify();
    212e:	f7ff ff67 	bl	2000 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    2132:	e9d4 3200 	ldrd	r3, r2, [r4]
    2136:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    213a:	f142 0200 	adc.w	r2, r2, #0
    213e:	e9c4 3200 	strd	r3, r2, [r4]
}
    2142:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    2146:	f7ff bfb3 	b.w	20b0 <z_log_msg_pending>
	return backend->cb->active;
    214a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    214c:	795b      	ldrb	r3, [r3, #5]
    214e:	b123      	cbz	r3, 215a <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
    2150:	6823      	ldr	r3, [r4, #0]
    2152:	4629      	mov	r1, r5
    2154:	681b      	ldr	r3, [r3, #0]
    2156:	4620      	mov	r0, r4
    2158:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    215a:	3410      	adds	r4, #16
    215c:	e7c5      	b.n	20ea <z_impl_log_process+0x2e>
}
    215e:	bd70      	pop	{r4, r5, r6, pc}
    2160:	20001b55 	.word	0x20001b55
    2164:	20000c24 	.word	0x20000c24
    2168:	0000d048 	.word	0x0000d048
    216c:	0000d058 	.word	0x0000d058
    2170:	20000c20 	.word	0x20000c20
    2174:	20000878 	.word	0x20000878

00002178 <z_impl_log_panic>:
{
    2178:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    217a:	4d0d      	ldr	r5, [pc, #52]	; (21b0 <z_impl_log_panic+0x38>)
    217c:	7829      	ldrb	r1, [r5, #0]
    217e:	b961      	cbnz	r1, 219a <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    2180:	2001      	movs	r0, #1
    2182:	f7ff fea9 	bl	1ed8 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2186:	4c0b      	ldr	r4, [pc, #44]	; (21b4 <z_impl_log_panic+0x3c>)
    2188:	4e0b      	ldr	r6, [pc, #44]	; (21b8 <z_impl_log_panic+0x40>)
    218a:	42b4      	cmp	r4, r6
    218c:	d306      	bcc.n	219c <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    218e:	f7ff ff95 	bl	20bc <z_impl_log_process>
		while (log_process() == true) {
    2192:	2800      	cmp	r0, #0
    2194:	d1fb      	bne.n	218e <z_impl_log_panic+0x16>
	panic_mode = true;
    2196:	2301      	movs	r3, #1
    2198:	702b      	strb	r3, [r5, #0]
}
    219a:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    219c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    219e:	795b      	ldrb	r3, [r3, #5]
    21a0:	b11b      	cbz	r3, 21aa <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    21a2:	6823      	ldr	r3, [r4, #0]
    21a4:	4620      	mov	r0, r4
    21a6:	689b      	ldr	r3, [r3, #8]
    21a8:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    21aa:	3410      	adds	r4, #16
    21ac:	e7ed      	b.n	218a <z_impl_log_panic+0x12>
    21ae:	bf00      	nop
    21b0:	20001b56 	.word	0x20001b56
    21b4:	0000d048 	.word	0x0000d048
    21b8:	0000d058 	.word	0x0000d058

000021bc <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    21bc:	2100      	movs	r1, #0
{
    21be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    21c2:	4608      	mov	r0, r1
    21c4:	f7ff fe88 	bl	1ed8 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    21c8:	4604      	mov	r4, r0
    21ca:	b348      	cbz	r0, 2220 <log_process_thread_func+0x64>
    21cc:	f240 6867 	movw	r8, #1639	; 0x667
    21d0:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    21d4:	f008 fb2a 	bl	a82c <z_impl_z_current_get>
	proc_tid = process_tid;
    21d8:	4b1a      	ldr	r3, [pc, #104]	; (2244 <log_process_thread_func+0x88>)
    21da:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    21dc:	b130      	cbz	r0, 21ec <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    21de:	4b1a      	ldr	r3, [pc, #104]	; (2248 <log_process_thread_func+0x8c>)
	    process_tid &&
    21e0:	681b      	ldr	r3, [r3, #0]
    21e2:	2b09      	cmp	r3, #9
    21e4:	dd02      	ble.n	21ec <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    21e6:	4819      	ldr	r0, [pc, #100]	; (224c <log_process_thread_func+0x90>)
    21e8:	f007 fe46 	bl	9e78 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    21ec:	4f18      	ldr	r7, [pc, #96]	; (2250 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    21ee:	f8df a05c 	ldr.w	sl, [pc, #92]	; 224c <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    21f2:	2500      	movs	r5, #0
		if (activate_mask) {
    21f4:	b144      	cbz	r4, 2208 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    21f6:	4620      	mov	r0, r4
    21f8:	f7ff fe08 	bl	1e0c <activate_foreach_backend>
			if (!activate_mask) {
    21fc:	4604      	mov	r4, r0
    21fe:	b918      	cbnz	r0, 2208 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    2200:	f04f 38ff 	mov.w	r8, #4294967295
    2204:	f04f 39ff 	mov.w	r9, #4294967295
    2208:	f7ff ff58 	bl	20bc <z_impl_log_process>
		if (log_process() == false) {
    220c:	4606      	mov	r6, r0
    220e:	b928      	cbnz	r0, 221c <log_process_thread_func+0x60>
			if (processed_any) {
    2210:	b9b5      	cbnz	r5, 2240 <log_process_thread_func+0x84>
    2212:	4642      	mov	r2, r8
    2214:	464b      	mov	r3, r9
    2216:	4650      	mov	r0, sl
    2218:	f007 fe4e 	bl	9eb8 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    221c:	4635      	mov	r5, r6
    221e:	e7e9      	b.n	21f4 <log_process_thread_func+0x38>
    2220:	f04f 38ff 	mov.w	r8, #4294967295
    2224:	f04f 39ff 	mov.w	r9, #4294967295
    2228:	e7d4      	b.n	21d4 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    222a:	682b      	ldr	r3, [r5, #0]
    222c:	699b      	ldr	r3, [r3, #24]
    222e:	b11b      	cbz	r3, 2238 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    2230:	2200      	movs	r2, #0
    2232:	4611      	mov	r1, r2
    2234:	4628      	mov	r0, r5
    2236:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2238:	3510      	adds	r5, #16
    223a:	42bd      	cmp	r5, r7
    223c:	d3f5      	bcc.n	222a <log_process_thread_func+0x6e>
    223e:	e7e8      	b.n	2212 <log_process_thread_func+0x56>
    2240:	4d04      	ldr	r5, [pc, #16]	; (2254 <log_process_thread_func+0x98>)
    2242:	e7fa      	b.n	223a <log_process_thread_func+0x7e>
    2244:	20000c1c 	.word	0x20000c1c
    2248:	20000c24 	.word	0x20000c24
    224c:	20000320 	.word	0x20000320
    2250:	0000d058 	.word	0x0000d058
    2254:	0000d048 	.word	0x0000d048

00002258 <z_log_msg_post_finalize>:
{
    2258:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    225a:	4818      	ldr	r0, [pc, #96]	; (22bc <z_log_msg_post_finalize+0x64>)
    225c:	f009 fc0c 	bl	ba78 <atomic_inc>
	if (panic_mode) {
    2260:	4b17      	ldr	r3, [pc, #92]	; (22c0 <z_log_msg_post_finalize+0x68>)
    2262:	781b      	ldrb	r3, [r3, #0]
    2264:	b17b      	cbz	r3, 2286 <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
    2266:	f04f 0340 	mov.w	r3, #64	; 0x40
    226a:	f3ef 8411 	mrs	r4, BASEPRI
    226e:	f383 8812 	msr	BASEPRI_MAX, r3
    2272:	f3bf 8f6f 	isb	sy
    2276:	f7ff ff21 	bl	20bc <z_impl_log_process>
	__asm__ volatile(
    227a:	f384 8811 	msr	BASEPRI, r4
    227e:	f3bf 8f6f 	isb	sy
}
    2282:	b002      	add	sp, #8
    2284:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    2286:	4b0f      	ldr	r3, [pc, #60]	; (22c4 <z_log_msg_post_finalize+0x6c>)
    2288:	681b      	ldr	r3, [r3, #0]
    228a:	2b00      	cmp	r3, #0
    228c:	d0f9      	beq.n	2282 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    228e:	b950      	cbnz	r0, 22a6 <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    2290:	2200      	movs	r2, #0
    2292:	2300      	movs	r3, #0
    2294:	e9cd 2300 	strd	r2, r3, [sp]
    2298:	480b      	ldr	r0, [pc, #44]	; (22c8 <z_log_msg_post_finalize+0x70>)
    229a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    229e:	2300      	movs	r3, #0
    22a0:	f008 fd08 	bl	acb4 <z_impl_k_timer_start>
    22a4:	e7ed      	b.n	2282 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    22a6:	280a      	cmp	r0, #10
    22a8:	d1eb      	bne.n	2282 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    22aa:	4807      	ldr	r0, [pc, #28]	; (22c8 <z_log_msg_post_finalize+0x70>)
    22ac:	f00a fcf4 	bl	cc98 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    22b0:	4806      	ldr	r0, [pc, #24]	; (22cc <z_log_msg_post_finalize+0x74>)
}
    22b2:	b002      	add	sp, #8
    22b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    22b8:	f007 bdde 	b.w	9e78 <z_impl_k_sem_give>
    22bc:	20000c24 	.word	0x20000c24
    22c0:	20001b56 	.word	0x20001b56
    22c4:	20000c1c 	.word	0x20000c1c
    22c8:	20000880 	.word	0x20000880
    22cc:	20000320 	.word	0x20000320

000022d0 <z_log_msg_commit>:
{
    22d0:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    22d2:	4b06      	ldr	r3, [pc, #24]	; (22ec <z_log_msg_commit+0x1c>)
    22d4:	681b      	ldr	r3, [r3, #0]
{
    22d6:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    22d8:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    22da:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    22dc:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    22de:	4804      	ldr	r0, [pc, #16]	; (22f0 <z_log_msg_commit+0x20>)
    22e0:	f009 fafa 	bl	b8d8 <mpsc_pbuf_commit>
}
    22e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    22e8:	f7ff bfb6 	b.w	2258 <z_log_msg_post_finalize>
    22ec:	20000014 	.word	0x20000014
    22f0:	20000254 	.word	0x20000254

000022f4 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    22f4:	4a04      	ldr	r2, [pc, #16]	; (2308 <log_source_name_get+0x14>)
    22f6:	4b05      	ldr	r3, [pc, #20]	; (230c <log_source_name_get+0x18>)
    22f8:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    22fa:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    22fe:	bf34      	ite	cc
    2300:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    2304:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    2306:	4770      	bx	lr
    2308:	0000cf40 	.word	0x0000cf40
    230c:	0000d048 	.word	0x0000d048

00002310 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    2310:	4b08      	ldr	r3, [pc, #32]	; (2334 <log_backend_enable+0x24>)
    2312:	1ac3      	subs	r3, r0, r3
{
    2314:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    2316:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    2318:	6844      	ldr	r4, [r0, #4]
    231a:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    231c:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    231e:	6843      	ldr	r3, [r0, #4]
    2320:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    2322:	6843      	ldr	r3, [r0, #4]
    2324:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    2326:	6843      	ldr	r3, [r0, #4]
    2328:	2201      	movs	r2, #1
    232a:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    232c:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    232e:	f7ff be31 	b.w	1f94 <z_log_notify_backend_enabled>
    2332:	bf00      	nop
    2334:	0000d048 	.word	0x0000d048

00002338 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    2338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    233c:	b08f      	sub	sp, #60	; 0x3c
    233e:	af04      	add	r7, sp, #16
    2340:	f3c1 284a 	ubfx	r8, r1, #9, #11
    2344:	60b8      	str	r0, [r7, #8]
    2346:	460d      	mov	r5, r1
    2348:	4691      	mov	r9, r2
    234a:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    234c:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    234e:	f1b8 0f00 	cmp.w	r8, #0
    2352:	d063      	beq.n	241c <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x18>
	struct z_cbprintf_buf_desc buf_desc = {
    2354:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
    2356:	f107 0314 	add.w	r3, r7, #20
    235a:	f04f 0b04 	mov.w	fp, #4
    235e:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    2362:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
    2366:	e9c7 6607 	strd	r6, r6, [r7, #28]
    236a:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    236c:	9301      	str	r3, [sp, #4]
    236e:	f8cd b008 	str.w	fp, [sp, #8]
    2372:	f8cd a000 	str.w	sl, [sp]
    2376:	f107 031c 	add.w	r3, r7, #28
    237a:	68f9      	ldr	r1, [r7, #12]
    237c:	4632      	mov	r2, r6
    237e:	4648      	mov	r0, r9
    2380:	f7fe fe88 	bl	1094 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    2384:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    2388:	4603      	mov	r3, r0
    238a:	d31c      	bcc.n	23c6 <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    238c:	466c      	mov	r4, sp
    238e:	b08a      	sub	sp, #40	; 0x28
    2390:	f8d9 1004 	ldr.w	r1, [r9, #4]
    2394:	ab04      	add	r3, sp, #16
    2396:	4826      	ldr	r0, [pc, #152]	; (2430 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x2c>)
    2398:	e9c3 0105 	strd	r0, r1, [r3, #20]
    239c:	f240 71ff 	movw	r1, #2047	; 0x7ff
    23a0:	61d9      	str	r1, [r3, #28]
    23a2:	461a      	mov	r2, r3
    23a4:	f44f 7100 	mov.w	r1, #512	; 0x200
    23a8:	8419      	strh	r1, [r3, #32]
    23aa:	4b22      	ldr	r3, [pc, #136]	; (2434 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x30>)
    23ac:	f842 3f10 	str.w	r3, [r2, #16]!
    23b0:	4821      	ldr	r0, [pc, #132]	; (2438 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x34>)
    23b2:	4633      	mov	r3, r6
    23b4:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    23b8:	f7ff ffbe 	bl	2338 <z_impl_z_log_msg_static_create>
    23bc:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
    23be:	372c      	adds	r7, #44	; 0x2c
    23c0:	46bd      	mov	sp, r7
    23c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
    23c6:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    23ca:	f104 0017 	add.w	r0, r4, #23
    23ce:	4418      	add	r0, r3
    23d0:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    23d4:	0880      	lsrs	r0, r0, #2
    23d6:	603b      	str	r3, [r7, #0]
    23d8:	f7ff fe54 	bl	2084 <z_log_msg_alloc>
    23dc:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
    23e0:	4604      	mov	r4, r0
    23e2:	b190      	cbz	r0, 240a <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x6>
	struct z_cbprintf_buf_desc buf_desc = {
    23e4:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
    23e6:	4a15      	ldr	r2, [pc, #84]	; (243c <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x38>)
	struct z_cbprintf_buf_desc buf_desc = {
    23e8:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
    23ec:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
    23f0:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
    23f4:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    23f6:	e9cd a300 	strd	sl, r3, [sp]
    23fa:	f8cd b008 	str.w	fp, [sp, #8]
    23fe:	68f9      	ldr	r1, [r7, #12]
    2400:	f107 031c 	add.w	r3, r7, #28
    2404:	4648      	mov	r0, r9
    2406:	f7fe fe45 	bl	1094 <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
    240a:	f368 2553 	bfi	r5, r8, #9, #11
    240e:	687b      	ldr	r3, [r7, #4]
    2410:	68b9      	ldr	r1, [r7, #8]
    2412:	462a      	mov	r2, r5
    2414:	4620      	mov	r0, r4
    2416:	f009 fb65 	bl	bae4 <z_log_msg_finalize>
    241a:	e7d0      	b.n	23be <z_impl_z_log_msg_static_create+0x86>
    241c:	f104 0017 	add.w	r0, r4, #23
    2420:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    2424:	0880      	lsrs	r0, r0, #2
    2426:	f7ff fe2d 	bl	2084 <z_log_msg_alloc>
    242a:	4604      	mov	r4, r0
    242c:	e7ed      	b.n	240a <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x6>
    242e:	bf00      	nop
    2430:	0000d6b5 	.word	0x0000d6b5
    2434:	01000004 	.word	0x01000004
    2438:	0000cfa8 	.word	0x0000cfa8
    243c:	0000bab9 	.word	0x0000bab9

00002440 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    2440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2444:	b087      	sub	sp, #28
    2446:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    244a:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    244e:	4604      	mov	r4, r0
    2450:	460f      	mov	r7, r1
    2452:	4693      	mov	fp, r2
    2454:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    2456:	b3a6      	cbz	r6, 24c2 <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    2458:	2110      	movs	r1, #16
    245a:	f8cd 9000 	str.w	r9, [sp]
    245e:	4633      	mov	r3, r6
    2460:	4652      	mov	r2, sl
    2462:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    2464:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    2468:	f7fe fc3e 	bl	ce8 <cbvprintf_package>
    246c:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    246e:	f105 0017 	add.w	r0, r5, #23
    2472:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    2474:	4b14      	ldr	r3, [pc, #80]	; (24c8 <z_impl_z_log_msg_runtime_vcreate+0x88>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    2476:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
    2478:	f004 0407 	and.w	r4, r4, #7
    247c:	f00b 0b07 	and.w	fp, fp, #7
    2480:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    2482:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    2486:	ea03 2341 	and.w	r3, r3, r1, lsl #9
    248a:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    248e:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    2490:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
    2492:	f7ff fdf7 	bl	2084 <z_log_msg_alloc>
	struct log_msg_desc desc =
    2496:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    249a:	4605      	mov	r5, r0
    249c:	b140      	cbz	r0, 24b0 <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    249e:	b13e      	cbz	r6, 24b0 <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    24a0:	9903      	ldr	r1, [sp, #12]
    24a2:	f8cd 9000 	str.w	r9, [sp]
    24a6:	4633      	mov	r3, r6
    24a8:	4652      	mov	r2, sl
    24aa:	3010      	adds	r0, #16
    24ac:	f7fe fc1c 	bl	ce8 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    24b0:	4643      	mov	r3, r8
    24b2:	4622      	mov	r2, r4
    24b4:	4639      	mov	r1, r7
    24b6:	4628      	mov	r0, r5
	}
}
    24b8:	b007      	add	sp, #28
    24ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    24be:	f009 bb11 	b.w	bae4 <z_log_msg_finalize>
		plen = 0;
    24c2:	4631      	mov	r1, r6
    24c4:	e7d3      	b.n	246e <z_impl_z_log_msg_runtime_vcreate+0x2e>
    24c6:	bf00      	nop
    24c8:	000ffe00 	.word	0x000ffe00

000024cc <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    24cc:	b40e      	push	{r1, r2, r3}
    24ce:	b503      	push	{r0, r1, lr}
    24d0:	ab03      	add	r3, sp, #12
    24d2:	4601      	mov	r1, r0
    24d4:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    24d8:	4804      	ldr	r0, [pc, #16]	; (24ec <print_formatted+0x20>)
	va_start(args, fmt);
    24da:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    24dc:	f009 fb28 	bl	bb30 <cbvprintf>
	va_end(args);

	return length;
}
    24e0:	b002      	add	sp, #8
    24e2:	f85d eb04 	ldr.w	lr, [sp], #4
    24e6:	b003      	add	sp, #12
    24e8:	4770      	bx	lr
    24ea:	bf00      	nop
    24ec:	0000bb59 	.word	0x0000bb59

000024f0 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    24f0:	06ca      	lsls	r2, r1, #27
    24f2:	d405      	bmi.n	2500 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    24f4:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    24f6:	bf4c      	ite	mi
    24f8:	4902      	ldrmi	r1, [pc, #8]	; (2504 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    24fa:	4903      	ldrpl	r1, [pc, #12]	; (2508 <newline_print+0x18>)
    24fc:	f7ff bfe6 	b.w	24cc <print_formatted>
	}
}
    2500:	4770      	bx	lr
    2502:	bf00      	nop
    2504:	0000d6f5 	.word	0x0000d6f5
    2508:	0000d6f4 	.word	0x0000d6f4

0000250c <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    250c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2510:	b089      	sub	sp, #36	; 0x24
    2512:	469b      	mov	fp, r3
    2514:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    2518:	9304      	str	r3, [sp, #16]
    251a:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    251e:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    2520:	9b04      	ldr	r3, [sp, #16]
{
    2522:	9206      	str	r2, [sp, #24]
    2524:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    2528:	4604      	mov	r4, r0
    252a:	460d      	mov	r5, r1
	if (!raw_string) {
    252c:	2b00      	cmp	r3, #0
    252e:	f000 8087 	beq.w	2640 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    2532:	f006 0308 	and.w	r3, r6, #8
    2536:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    2538:	f009 fabc 	bl	bab4 <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    253c:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    2540:	4602      	mov	r2, r0
    2542:	2800      	cmp	r0, #0
    2544:	d04b      	beq.n	25de <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    2546:	4986      	ldr	r1, [pc, #536]	; (2760 <log_output_process+0x254>)
    2548:	4620      	mov	r0, r4
    254a:	f7ff ffbf 	bl	24cc <print_formatted>
    254e:	4680      	mov	r8, r0
	if (stamp) {
    2550:	f1ba 0f00 	cmp.w	sl, #0
    2554:	d008      	beq.n	2568 <log_output_process+0x5c>
	if (!format) {
    2556:	f016 0f44 	tst.w	r6, #68	; 0x44
    255a:	d142      	bne.n	25e2 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    255c:	4981      	ldr	r1, [pc, #516]	; (2764 <log_output_process+0x258>)
    255e:	462a      	mov	r2, r5
    2560:	4620      	mov	r0, r4
    2562:	f7ff ffb3 	bl	24cc <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    2566:	4480      	add	r8, r0
	if (color) {
    2568:	f006 0301 	and.w	r3, r6, #1
    256c:	b15b      	cbz	r3, 2586 <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    256e:	4b7e      	ldr	r3, [pc, #504]	; (2768 <log_output_process+0x25c>)
    2570:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    2572:	497e      	ldr	r1, [pc, #504]	; (276c <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
    2574:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    2578:	4b7d      	ldr	r3, [pc, #500]	; (2770 <log_output_process+0x264>)
    257a:	4620      	mov	r0, r4
    257c:	2a00      	cmp	r2, #0
    257e:	bf08      	it	eq
    2580:	461a      	moveq	r2, r3
    2582:	f7ff ffa3 	bl	24cc <print_formatted>
	if (level_on) {
    2586:	f006 0308 	and.w	r3, r6, #8
    258a:	2b00      	cmp	r3, #0
    258c:	d055      	beq.n	263a <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    258e:	4b79      	ldr	r3, [pc, #484]	; (2774 <log_output_process+0x268>)
    2590:	9a04      	ldr	r2, [sp, #16]
    2592:	4979      	ldr	r1, [pc, #484]	; (2778 <log_output_process+0x26c>)
    2594:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2598:	4620      	mov	r0, r4
    259a:	f7ff ff97 	bl	24cc <print_formatted>
    259e:	4605      	mov	r5, r0
	if (domain) {
    25a0:	9b06      	ldr	r3, [sp, #24]
    25a2:	b12b      	cbz	r3, 25b0 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    25a4:	4975      	ldr	r1, [pc, #468]	; (277c <log_output_process+0x270>)
    25a6:	461a      	mov	r2, r3
    25a8:	4620      	mov	r0, r4
    25aa:	f7ff ff8f 	bl	24cc <print_formatted>
    25ae:	4405      	add	r5, r0
	if (source) {
    25b0:	f1bb 0f00 	cmp.w	fp, #0
    25b4:	d005      	beq.n	25c2 <log_output_process+0xb6>
		total += print_formatted(output,
    25b6:	4972      	ldr	r1, [pc, #456]	; (2780 <log_output_process+0x274>)
    25b8:	465a      	mov	r2, fp
    25ba:	4620      	mov	r0, r4
    25bc:	f7ff ff86 	bl	24cc <print_formatted>
    25c0:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    25c2:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    25c4:	f1b9 0f00 	cmp.w	r9, #0
    25c8:	d149      	bne.n	265e <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    25ca:	2f00      	cmp	r7, #0
    25cc:	d14f      	bne.n	266e <log_output_process+0x162>
	if (color) {
    25ce:	07f3      	lsls	r3, r6, #31
    25d0:	f100 80c0 	bmi.w	2754 <log_output_process+0x248>
	newline_print(output, flags);
    25d4:	4631      	mov	r1, r6
    25d6:	4620      	mov	r0, r4
    25d8:	f7ff ff8a 	bl	24f0 <newline_print>
}
    25dc:	e0b4      	b.n	2748 <log_output_process+0x23c>
	uint32_t length = 0U;
    25de:	4680      	mov	r8, r0
    25e0:	e7b6      	b.n	2550 <log_output_process+0x44>
	} else if (freq != 0U) {
    25e2:	4b68      	ldr	r3, [pc, #416]	; (2784 <log_output_process+0x278>)
    25e4:	6818      	ldr	r0, [r3, #0]
    25e6:	2800      	cmp	r0, #0
    25e8:	d0bd      	beq.n	2566 <log_output_process+0x5a>
		timestamp /= timestamp_div;
    25ea:	4b67      	ldr	r3, [pc, #412]	; (2788 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    25ec:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    25f0:	681b      	ldr	r3, [r3, #0]
    25f2:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    25f6:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    25fa:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    25fe:	fb00 5513 	mls	r5, r0, r3, r5
    2602:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
    2606:	fb0e f505 	mul.w	r5, lr, r5
    260a:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
    260e:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2610:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    2614:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2618:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
    261c:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2620:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
    2624:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2626:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    262a:	4958      	ldr	r1, [pc, #352]	; (278c <log_output_process+0x280>)
    262c:	e9cd c501 	strd	ip, r5, [sp, #4]
    2630:	4652      	mov	r2, sl
    2632:	4620      	mov	r0, r4
    2634:	f7ff ff4a 	bl	24cc <print_formatted>
    2638:	e795      	b.n	2566 <log_output_process+0x5a>
	int total = 0;
    263a:	f006 0508 	and.w	r5, r6, #8
    263e:	e7af      	b.n	25a0 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    2640:	f1bb 0f01 	cmp.w	fp, #1
    2644:	d106      	bne.n	2654 <log_output_process+0x148>
	if (package) {
    2646:	f1b9 0f00 	cmp.w	r9, #0
    264a:	d164      	bne.n	2716 <log_output_process+0x20a>
	if (data_len) {
    264c:	2f00      	cmp	r7, #0
    264e:	d07b      	beq.n	2748 <log_output_process+0x23c>
		prefix_offset = 0;
    2650:	2500      	movs	r5, #0
    2652:	e00c      	b.n	266e <log_output_process+0x162>
	if (package) {
    2654:	f1b9 0f00 	cmp.w	r9, #0
    2658:	d0f8      	beq.n	264c <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    265a:	484d      	ldr	r0, [pc, #308]	; (2790 <log_output_process+0x284>)
    265c:	e05c      	b.n	2718 <log_output_process+0x20c>
		cb = out_func;
    265e:	484d      	ldr	r0, [pc, #308]	; (2794 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    2660:	494d      	ldr	r1, [pc, #308]	; (2798 <log_output_process+0x28c>)
    2662:	464b      	mov	r3, r9
    2664:	4622      	mov	r2, r4
    2666:	f008 fbb8 	bl	adda <cbpprintf_external>
	if (data_len) {
    266a:	2f00      	cmp	r7, #0
    266c:	d068      	beq.n	2740 <log_output_process+0x234>
		print_formatted(output, " ");
    266e:	f8df 912c 	ldr.w	r9, [pc, #300]	; 279c <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    2672:	f8df a12c 	ldr.w	sl, [pc, #300]	; 27a0 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    2676:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    2678:	4631      	mov	r1, r6
    267a:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    267c:	46b8      	mov	r8, r7
    267e:	bf28      	it	cs
    2680:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    2684:	f7ff ff34 	bl	24f0 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    2688:	f04f 0b00 	mov.w	fp, #0
    268c:	455d      	cmp	r5, fp
    268e:	dc45      	bgt.n	271c <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    2690:	9b05      	ldr	r3, [sp, #20]
    2692:	4651      	mov	r1, sl
    2694:	781a      	ldrb	r2, [r3, #0]
    2696:	4620      	mov	r0, r4
    2698:	f7ff ff18 	bl	24cc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    269c:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    26a0:	f01b 0f07 	tst.w	fp, #7
    26a4:	d103      	bne.n	26ae <log_output_process+0x1a2>
			print_formatted(output, " ");
    26a6:	4649      	mov	r1, r9
    26a8:	4620      	mov	r0, r4
    26aa:	f7ff ff0f 	bl	24cc <print_formatted>
		if (i < length) {
    26ae:	45d8      	cmp	r8, fp
    26b0:	d93b      	bls.n	272a <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    26b2:	9b05      	ldr	r3, [sp, #20]
    26b4:	4651      	mov	r1, sl
    26b6:	f813 200b 	ldrb.w	r2, [r3, fp]
    26ba:	4620      	mov	r0, r4
    26bc:	f7ff ff06 	bl	24cc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    26c0:	f10b 0b01 	add.w	fp, fp, #1
    26c4:	f1bb 0f10 	cmp.w	fp, #16
    26c8:	d1ea      	bne.n	26a0 <log_output_process+0x194>
	print_formatted(output, "|");
    26ca:	4936      	ldr	r1, [pc, #216]	; (27a4 <log_output_process+0x298>)
    26cc:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    26ce:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    26d2:	f7ff fefb 	bl	24cc <print_formatted>
		if (i < length) {
    26d6:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    26d8:	9b05      	ldr	r3, [sp, #20]
    26da:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    26dc:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    26e0:	295f      	cmp	r1, #95	; 0x5f
    26e2:	bf28      	it	cs
    26e4:	222e      	movcs	r2, #46	; 0x2e
    26e6:	4930      	ldr	r1, [pc, #192]	; (27a8 <log_output_process+0x29c>)
    26e8:	4620      	mov	r0, r4
    26ea:	f7ff feef 	bl	24cc <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    26ee:	f10b 0b01 	add.w	fp, fp, #1
    26f2:	f1bb 0f10 	cmp.w	fp, #16
    26f6:	d01d      	beq.n	2734 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    26f8:	f01b 0f07 	tst.w	fp, #7
    26fc:	d103      	bne.n	2706 <log_output_process+0x1fa>
			print_formatted(output, " ");
    26fe:	4649      	mov	r1, r9
    2700:	4620      	mov	r0, r4
    2702:	f7ff fee3 	bl	24cc <print_formatted>
		if (i < length) {
    2706:	45d8      	cmp	r8, fp
    2708:	465a      	mov	r2, fp
    270a:	d8e5      	bhi.n	26d8 <log_output_process+0x1cc>
			print_formatted(output, " ");
    270c:	4649      	mov	r1, r9
    270e:	4620      	mov	r0, r4
    2710:	f7ff fedc 	bl	24cc <print_formatted>
    2714:	e7eb      	b.n	26ee <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    2716:	481f      	ldr	r0, [pc, #124]	; (2794 <log_output_process+0x288>)
		prefix_offset = 0;
    2718:	9d04      	ldr	r5, [sp, #16]
    271a:	e7a1      	b.n	2660 <log_output_process+0x154>
		print_formatted(output, " ");
    271c:	4649      	mov	r1, r9
    271e:	4620      	mov	r0, r4
    2720:	f7ff fed4 	bl	24cc <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2724:	f10b 0b01 	add.w	fp, fp, #1
    2728:	e7b0      	b.n	268c <log_output_process+0x180>
			print_formatted(output, "   ");
    272a:	4920      	ldr	r1, [pc, #128]	; (27ac <log_output_process+0x2a0>)
    272c:	4620      	mov	r0, r4
    272e:	f7ff fecd 	bl	24cc <print_formatted>
    2732:	e7c5      	b.n	26c0 <log_output_process+0x1b4>
		data += length;
    2734:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    2736:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    273a:	4443      	add	r3, r8
    273c:	9305      	str	r3, [sp, #20]
	} while (len);
    273e:	d19a      	bne.n	2676 <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    2740:	9b04      	ldr	r3, [sp, #16]
    2742:	2b00      	cmp	r3, #0
    2744:	f47f af43 	bne.w	25ce <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    2748:	4620      	mov	r0, r4
}
    274a:	b009      	add	sp, #36	; 0x24
    274c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    2750:	f009 b9f5 	b.w	bb3e <log_output_flush>
		print_formatted(output, "%s", log_color);
    2754:	4a06      	ldr	r2, [pc, #24]	; (2770 <log_output_process+0x264>)
    2756:	4905      	ldr	r1, [pc, #20]	; (276c <log_output_process+0x260>)
    2758:	4620      	mov	r0, r4
    275a:	f7ff feb7 	bl	24cc <print_formatted>
}
    275e:	e739      	b.n	25d4 <log_output_process+0xc8>
    2760:	0000d6fc 	.word	0x0000d6fc
    2764:	0000d700 	.word	0x0000d700
    2768:	0000d0d8 	.word	0x0000d0d8
    276c:	0000e243 	.word	0x0000e243
    2770:	0000d6f7 	.word	0x0000d6f7
    2774:	0000d0ec 	.word	0x0000d0ec
    2778:	0000d725 	.word	0x0000d725
    277c:	0000d72b 	.word	0x0000d72b
    2780:	0000d72f 	.word	0x0000d72f
    2784:	20000c30 	.word	0x20000c30
    2788:	20000c2c 	.word	0x20000c2c
    278c:	0000d709 	.word	0x0000d709
    2790:	0000bb8f 	.word	0x0000bb8f
    2794:	0000bb59 	.word	0x0000bb59
    2798:	0000bb31 	.word	0x0000bb31
    279c:	0000d73c 	.word	0x0000d73c
    27a0:	0000d734 	.word	0x0000d734
    27a4:	0000d73e 	.word	0x0000d73e
    27a8:	0000d740 	.word	0x0000d740
    27ac:	0000d73a 	.word	0x0000d73a

000027b0 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    27b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    27b4:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    27b6:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    27b8:	688e      	ldr	r6, [r1, #8]
    27ba:	b086      	sub	sp, #24
    27bc:	4605      	mov	r5, r0
    27be:	460c      	mov	r4, r1
    27c0:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
    27c2:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    27c6:	b15b      	cbz	r3, 27e0 <log_output_msg_process+0x30>
    27c8:	4a13      	ldr	r2, [pc, #76]	; (2818 <log_output_msg_process+0x68>)
    27ca:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    27cc:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    27d0:	2900      	cmp	r1, #0
    27d2:	db1f      	blt.n	2814 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    27d4:	7820      	ldrb	r0, [r4, #0]
    27d6:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    27da:	f7ff fd8b 	bl	22f4 <log_source_name_get>
    27de:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    27e0:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
    27e2:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    27e4:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    27e8:	9700      	str	r7, [sp, #0]
    27ea:	f3c2 224a 	ubfx	r2, r2, #9, #11
    27ee:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    27f0:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
    27f4:	f3c0 100b 	ubfx	r0, r0, #4, #12
    27f8:	bf08      	it	eq
    27fa:	2100      	moveq	r1, #0
    27fc:	e9cd 0803 	strd	r0, r8, [sp, #12]
    2800:	e9cd 1401 	strd	r1, r4, [sp, #4]
    2804:	2200      	movs	r2, #0
    2806:	4631      	mov	r1, r6
    2808:	4628      	mov	r0, r5
    280a:	f7ff fe7f 	bl	250c <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    280e:	b006      	add	sp, #24
    2810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2814:	2300      	movs	r3, #0
    2816:	e7e3      	b.n	27e0 <log_output_msg_process+0x30>
    2818:	0000cf40 	.word	0x0000cf40

0000281c <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    281c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    281e:	f242 730f 	movw	r3, #9999	; 0x270f
    2822:	428b      	cmp	r3, r1
    2824:	bf28      	it	cs
    2826:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    2828:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    282a:	4a0f      	ldr	r2, [pc, #60]	; (2868 <log_output_dropped_process+0x4c>)
{
    282c:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    282e:	2105      	movs	r1, #5
    2830:	4668      	mov	r0, sp
    2832:	f008 fb4a 	bl	aeca <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2836:	6863      	ldr	r3, [r4, #4]
    2838:	490c      	ldr	r1, [pc, #48]	; (286c <log_output_dropped_process+0x50>)
    283a:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    283c:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    283e:	220b      	movs	r2, #11
    2840:	4628      	mov	r0, r5
    2842:	f009 f968 	bl	bb16 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    2846:	6863      	ldr	r3, [r4, #4]
    2848:	4632      	mov	r2, r6
    284a:	4669      	mov	r1, sp
    284c:	4628      	mov	r0, r5
    284e:	685b      	ldr	r3, [r3, #4]
    2850:	f009 f961 	bl	bb16 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    2854:	6863      	ldr	r3, [r4, #4]
    2856:	4906      	ldr	r1, [pc, #24]	; (2870 <log_output_dropped_process+0x54>)
    2858:	685b      	ldr	r3, [r3, #4]
    285a:	221b      	movs	r2, #27
    285c:	4628      	mov	r0, r5
    285e:	f009 f95a 	bl	bb16 <buffer_write>
		     output->control_block->ctx);
}
    2862:	b002      	add	sp, #8
    2864:	bd70      	pop	{r4, r5, r6, pc}
    2866:	bf00      	nop
    2868:	0000dfa8 	.word	0x0000dfa8
    286c:	0000d75f 	.word	0x0000d75f
    2870:	0000d743 	.word	0x0000d743

00002874 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2874:	4a07      	ldr	r2, [pc, #28]	; (2894 <log_output_timestamp_freq_set+0x20>)
    2876:	2100      	movs	r1, #0
    2878:	2301      	movs	r3, #1
    287a:	4290      	cmp	r0, r2
    287c:	d806      	bhi.n	288c <log_output_timestamp_freq_set+0x18>
    287e:	4a06      	ldr	r2, [pc, #24]	; (2898 <log_output_timestamp_freq_set+0x24>)
    2880:	b901      	cbnz	r1, 2884 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    2882:	2301      	movs	r3, #1
    2884:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    2886:	4b05      	ldr	r3, [pc, #20]	; (289c <log_output_timestamp_freq_set+0x28>)
    2888:	6018      	str	r0, [r3, #0]
}
    288a:	4770      	bx	lr
		frequency /= 2U;
    288c:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    288e:	005b      	lsls	r3, r3, #1
    2890:	2101      	movs	r1, #1
    2892:	e7f2      	b.n	287a <log_output_timestamp_freq_set+0x6>
    2894:	000f4240 	.word	0x000f4240
    2898:	20000c2c 	.word	0x20000c2c
    289c:	20000c30 	.word	0x20000c30

000028a0 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    28a0:	4b01      	ldr	r3, [pc, #4]	; (28a8 <log_backend_rtt_init+0x8>)
    28a2:	2201      	movs	r2, #1
    28a4:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    28a6:	4770      	bx	lr
    28a8:	20001b57 	.word	0x20001b57

000028ac <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    28ac:	4b01      	ldr	r3, [pc, #4]	; (28b4 <format_set+0x8>)
	return 0;
}
    28ae:	2000      	movs	r0, #0
	log_format_current = log_type;
    28b0:	6019      	str	r1, [r3, #0]
}
    28b2:	4770      	bx	lr
    28b4:	20000c48 	.word	0x20000c48

000028b8 <panic>:
	panic_mode = true;
    28b8:	4b02      	ldr	r3, [pc, #8]	; (28c4 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    28ba:	4803      	ldr	r0, [pc, #12]	; (28c8 <panic+0x10>)
    28bc:	2201      	movs	r2, #1
    28be:	701a      	strb	r2, [r3, #0]
    28c0:	f009 b93d 	b.w	bb3e <log_output_flush>
    28c4:	20001b58 	.word	0x20001b58
    28c8:	0000d11c 	.word	0x0000d11c

000028cc <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    28cc:	4801      	ldr	r0, [pc, #4]	; (28d4 <dropped+0x8>)
    28ce:	f7ff bfa5 	b.w	281c <log_output_dropped_process>
    28d2:	bf00      	nop
    28d4:	0000d11c 	.word	0x0000d11c

000028d8 <process>:
{
    28d8:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    28da:	4b06      	ldr	r3, [pc, #24]	; (28f4 <process+0x1c>)
    28dc:	6818      	ldr	r0, [r3, #0]
{
    28de:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    28e0:	f7ff fb42 	bl	1f68 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    28e4:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    28e6:	4603      	mov	r3, r0
}
    28e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    28ec:	4802      	ldr	r0, [pc, #8]	; (28f8 <process+0x20>)
    28ee:	220f      	movs	r2, #15
    28f0:	4718      	bx	r3
    28f2:	bf00      	nop
    28f4:	20000c48 	.word	0x20000c48
    28f8:	0000d11c 	.word	0x0000d11c

000028fc <on_failed_write>:
	if (retry_cnt == 0) {
    28fc:	b910      	cbnz	r0, 2904 <on_failed_write+0x8>
		host_present = false;
    28fe:	4b07      	ldr	r3, [pc, #28]	; (291c <on_failed_write+0x20>)
    2900:	7018      	strb	r0, [r3, #0]
}
    2902:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    2904:	4b06      	ldr	r3, [pc, #24]	; (2920 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
    2906:	781b      	ldrb	r3, [r3, #0]
    2908:	b11b      	cbz	r3, 2912 <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
    290a:	f241 3088 	movw	r0, #5000	; 0x1388
    290e:	f00a b991 	b.w	cc34 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    2912:	20a4      	movs	r0, #164	; 0xa4
    2914:	2100      	movs	r1, #0
    2916:	f007 bf55 	b.w	a7c4 <z_impl_k_sleep>
    291a:	bf00      	nop
    291c:	20001b57 	.word	0x20001b57
    2920:	20001b58 	.word	0x20001b58

00002924 <data_out_block_mode>:
{
    2924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    2928:	f8df 9074 	ldr.w	r9, [pc, #116]	; 29a0 <data_out_block_mode+0x7c>
    292c:	4f1d      	ldr	r7, [pc, #116]	; (29a4 <data_out_block_mode+0x80>)
{
    292e:	4680      	mov	r8, r0
    2930:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    2932:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    2934:	f899 5000 	ldrb.w	r5, [r9]
    2938:	b995      	cbnz	r5, 2960 <data_out_block_mode+0x3c>
			RTT_LOCK();
    293a:	f006 fef5 	bl	9728 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    293e:	4628      	mov	r0, r5
    2940:	4632      	mov	r2, r6
    2942:	4641      	mov	r1, r8
    2944:	f006 fe72 	bl	962c <SEGGER_RTT_WriteSkipNoLock>
    2948:	4605      	mov	r5, r0
			RTT_UNLOCK();
    294a:	f006 fef7 	bl	973c <zephyr_rtt_mutex_unlock>
		if (ret) {
    294e:	b1e5      	cbz	r5, 298a <data_out_block_mode+0x66>
	host_present = true;
    2950:	2301      	movs	r3, #1
    2952:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
    2954:	f899 3000 	ldrb.w	r3, [r9]
    2958:	b973      	cbnz	r3, 2978 <data_out_block_mode+0x54>
}
    295a:	4630      	mov	r0, r6
    295c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2960:	4632      	mov	r2, r6
    2962:	4641      	mov	r1, r8
    2964:	2000      	movs	r0, #0
    2966:	f006 fe61 	bl	962c <SEGGER_RTT_WriteSkipNoLock>
    296a:	4605      	mov	r5, r0
    296c:	e7ef      	b.n	294e <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
    296e:	4620      	mov	r0, r4
    2970:	f7ff ffc4 	bl	28fc <on_failed_write>
    2974:	1e65      	subs	r5, r4, #1
    2976:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    2978:	2000      	movs	r0, #0
    297a:	f006 fecb 	bl	9714 <SEGGER_RTT_HasDataUp>
    297e:	2800      	cmp	r0, #0
    2980:	d0eb      	beq.n	295a <data_out_block_mode+0x36>
    2982:	783b      	ldrb	r3, [r7, #0]
    2984:	2b00      	cmp	r3, #0
    2986:	d1f2      	bne.n	296e <data_out_block_mode+0x4a>
    2988:	e7e7      	b.n	295a <data_out_block_mode+0x36>
		} else if (host_present) {
    298a:	783b      	ldrb	r3, [r7, #0]
    298c:	2b00      	cmp	r3, #0
    298e:	d0e4      	beq.n	295a <data_out_block_mode+0x36>
			retry_cnt--;
    2990:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
    2992:	4620      	mov	r0, r4
    2994:	f7ff ffb2 	bl	28fc <on_failed_write>
	} while ((ret == 0) && host_present);
    2998:	783b      	ldrb	r3, [r7, #0]
    299a:	2b00      	cmp	r3, #0
    299c:	d1ca      	bne.n	2934 <data_out_block_mode+0x10>
    299e:	e7dc      	b.n	295a <data_out_block_mode+0x36>
    29a0:	20001b58 	.word	0x20001b58
    29a4:	20001b57 	.word	0x20001b57

000029a8 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    29a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    29ac:	4605      	mov	r5, r0
	__asm__ volatile(
    29ae:	f04f 0340 	mov.w	r3, #64	; 0x40
    29b2:	f3ef 8611 	mrs	r6, BASEPRI
    29b6:	f383 8812 	msr	BASEPRI_MAX, r3
    29ba:	f3bf 8f6f 	isb	sy
	return list->head;
    29be:	4b0e      	ldr	r3, [pc, #56]	; (29f8 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    29c0:	4f0e      	ldr	r7, [pc, #56]	; (29fc <pm_state_notify+0x54>)
    29c2:	681c      	ldr	r4, [r3, #0]
    29c4:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2a00 <pm_state_notify+0x58>
    29c8:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    29cc:	b92c      	cbnz	r4, 29da <pm_state_notify+0x32>
	__asm__ volatile(
    29ce:	f386 8811 	msr	BASEPRI, r6
    29d2:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    29d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    29da:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    29de:	2d00      	cmp	r5, #0
    29e0:	bf18      	it	ne
    29e2:	4613      	movne	r3, r2
		if (callback) {
    29e4:	b12b      	cbz	r3, 29f2 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    29e6:	f898 2010 	ldrb.w	r2, [r8, #16]
    29ea:	fb09 f202 	mul.w	r2, r9, r2
    29ee:	5cb8      	ldrb	r0, [r7, r2]
    29f0:	4798      	blx	r3
	return node->next;
    29f2:	6824      	ldr	r4, [r4, #0]
    29f4:	e7ea      	b.n	29cc <pm_state_notify+0x24>
    29f6:	bf00      	nop
    29f8:	20000c64 	.word	0x20000c64
    29fc:	20000c58 	.word	0x20000c58
    2a00:	20001b0c 	.word	0x20001b0c

00002a04 <pm_system_resume>:

void pm_system_resume(void)
{
    2a04:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    2a06:	4b19      	ldr	r3, [pc, #100]	; (2a6c <pm_system_resume+0x68>)
    2a08:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2a0a:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2a0e:	f004 031f 	and.w	r3, r4, #31
    2a12:	2201      	movs	r2, #1
    2a14:	409a      	lsls	r2, r3
    2a16:	4b16      	ldr	r3, [pc, #88]	; (2a70 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2a18:	0961      	lsrs	r1, r4, #5
    2a1a:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2a1e:	43d0      	mvns	r0, r2
    2a20:	e853 1f00 	ldrex	r1, [r3]
    2a24:	ea01 0500 	and.w	r5, r1, r0
    2a28:	e843 5600 	strex	r6, r5, [r3]
    2a2c:	2e00      	cmp	r6, #0
    2a2e:	d1f7      	bne.n	2a20 <pm_system_resume+0x1c>
    2a30:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2a34:	420a      	tst	r2, r1
    2a36:	d013      	beq.n	2a60 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    2a38:	4b0e      	ldr	r3, [pc, #56]	; (2a74 <pm_system_resume+0x70>)
    2a3a:	4d0f      	ldr	r5, [pc, #60]	; (2a78 <pm_system_resume+0x74>)
    2a3c:	b18b      	cbz	r3, 2a62 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2a3e:	230c      	movs	r3, #12
    2a40:	4363      	muls	r3, r4
    2a42:	18ea      	adds	r2, r5, r3
    2a44:	5ce8      	ldrb	r0, [r5, r3]
    2a46:	7851      	ldrb	r1, [r2, #1]
    2a48:	f009 f96e 	bl	bd28 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    2a4c:	2000      	movs	r0, #0
    2a4e:	f7ff ffab 	bl	29a8 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2a52:	230c      	movs	r3, #12
    2a54:	435c      	muls	r4, r3
    2a56:	192a      	adds	r2, r5, r4
    2a58:	2300      	movs	r3, #0
    2a5a:	512b      	str	r3, [r5, r4]
    2a5c:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    2a60:	bd70      	pop	{r4, r5, r6, pc}
    2a62:	f383 8811 	msr	BASEPRI, r3
    2a66:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2a6a:	e7ef      	b.n	2a4c <pm_system_resume+0x48>
    2a6c:	20001b0c 	.word	0x20001b0c
    2a70:	20000c6c 	.word	0x20000c6c
    2a74:	0000bd29 	.word	0x0000bd29
    2a78:	20000c58 	.word	0x20000c58

00002a7c <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    2a7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    2a80:	4b35      	ldr	r3, [pc, #212]	; (2b58 <pm_system_suspend+0xdc>)
{
    2a82:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    2a84:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    2a86:	f04f 0340 	mov.w	r3, #64	; 0x40
    2a8a:	f3ef 8811 	mrs	r8, BASEPRI
    2a8e:	f383 8812 	msr	BASEPRI_MAX, r3
    2a92:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    2a96:	240c      	movs	r4, #12
    2a98:	4b30      	ldr	r3, [pc, #192]	; (2b5c <pm_system_suspend+0xe0>)
    2a9a:	4e31      	ldr	r6, [pc, #196]	; (2b60 <pm_system_suspend+0xe4>)
    2a9c:	436c      	muls	r4, r5
    2a9e:	191a      	adds	r2, r3, r4
    2aa0:	5d19      	ldrb	r1, [r3, r4]
    2aa2:	2900      	cmp	r1, #0
    2aa4:	d04c      	beq.n	2b40 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    2aa6:	ca07      	ldmia	r2, {r0, r1, r2}
    2aa8:	eb06 0c04 	add.w	ip, r6, r4
    2aac:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    2ab0:	2200      	movs	r2, #0
    2ab2:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    2ab4:	f388 8811 	msr	BASEPRI, r8
    2ab8:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    2abc:	230c      	movs	r3, #12
    2abe:	436b      	muls	r3, r5
    2ac0:	18f2      	adds	r2, r6, r3
    2ac2:	5cf0      	ldrb	r0, [r6, r3]
    2ac4:	2800      	cmp	r0, #0
    2ac6:	d039      	beq.n	2b3c <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    2ac8:	1c7b      	adds	r3, r7, #1
    2aca:	d010      	beq.n	2aee <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
    2acc:	f8d2 c008 	ldr.w	ip, [r2, #8]
    2ad0:	4c24      	ldr	r4, [pc, #144]	; (2b64 <pm_system_suspend+0xe8>)
    2ad2:	4a25      	ldr	r2, [pc, #148]	; (2b68 <pm_system_suspend+0xec>)
    2ad4:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2ad8:	2100      	movs	r1, #0
    2ada:	fbec 4100 	umlal	r4, r1, ip, r0
    2ade:	2300      	movs	r3, #0
    2ae0:	4620      	mov	r0, r4
    2ae2:	f7fd fafd 	bl	e0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    2ae6:	2101      	movs	r1, #1
    2ae8:	1a38      	subs	r0, r7, r0
    2aea:	f004 f8a3 	bl	6c34 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2aee:	f007 fdaf 	bl	a650 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    2af2:	2001      	movs	r0, #1
    2af4:	f7ff ff58 	bl	29a8 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2af8:	f3bf 8f5b 	dmb	ish
    2afc:	4b1b      	ldr	r3, [pc, #108]	; (2b6c <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2afe:	096a      	lsrs	r2, r5, #5
    2b00:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    2b04:	f005 011f 	and.w	r1, r5, #31
    2b08:	2201      	movs	r2, #1
    2b0a:	408a      	lsls	r2, r1
    2b0c:	e853 0f00 	ldrex	r0, [r3]
    2b10:	4310      	orrs	r0, r2
    2b12:	e843 0100 	strex	r1, r0, [r3]
    2b16:	2900      	cmp	r1, #0
    2b18:	d1f8      	bne.n	2b0c <pm_system_suspend+0x90>
    2b1a:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    2b1e:	4b14      	ldr	r3, [pc, #80]	; (2b70 <pm_system_suspend+0xf4>)
    2b20:	b13b      	cbz	r3, 2b32 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    2b22:	230c      	movs	r3, #12
    2b24:	fb03 f005 	mul.w	r0, r3, r5
    2b28:	1833      	adds	r3, r6, r0
    2b2a:	5c30      	ldrb	r0, [r6, r0]
    2b2c:	7859      	ldrb	r1, [r3, #1]
    2b2e:	f009 f8ef 	bl	bd10 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    2b32:	f7ff ff67 	bl	2a04 <pm_system_resume>
	k_sched_unlock();
    2b36:	f007 fd9f 	bl	a678 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    2b3a:	2001      	movs	r0, #1
}
    2b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    2b40:	4601      	mov	r1, r0
    2b42:	4628      	mov	r0, r5
    2b44:	f000 f816 	bl	2b74 <pm_policy_next_state>
		if (info != NULL) {
    2b48:	2800      	cmp	r0, #0
    2b4a:	d0b3      	beq.n	2ab4 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    2b4c:	c807      	ldmia	r0, {r0, r1, r2}
    2b4e:	4434      	add	r4, r6
    2b50:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    2b54:	e7ae      	b.n	2ab4 <pm_system_suspend+0x38>
    2b56:	bf00      	nop
    2b58:	20001b0c 	.word	0x20001b0c
    2b5c:	20000c4c 	.word	0x20000c4c
    2b60:	20000c58 	.word	0x20000c58
    2b64:	000f423f 	.word	0x000f423f
    2b68:	000f4240 	.word	0x000f4240
    2b6c:	20000c6c 	.word	0x20000c6c
    2b70:	0000bd11 	.word	0x0000bd11

00002b74 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    2b74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b78:	b085      	sub	sp, #20
    2b7a:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2b7c:	a903      	add	r1, sp, #12
    2b7e:	f000 f843 	bl	2c08 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2b82:	4b1e      	ldr	r3, [pc, #120]	; (2bfc <pm_policy_next_state+0x88>)
    2b84:	9d03      	ldr	r5, [sp, #12]
    2b86:	f8d3 a000 	ldr.w	sl, [r3]
    2b8a:	f8df 8074 	ldr.w	r8, [pc, #116]	; 2c00 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2b8e:	1e43      	subs	r3, r0, #1
    2b90:	b21b      	sxth	r3, r3
    2b92:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2b96:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2b98:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    2b9c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    2ba0:	f04f 0b00 	mov.w	fp, #0
    2ba4:	b924      	cbnz	r4, 2bb0 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    2ba6:	46a1      	mov	r9, r4
}
    2ba8:	4648      	mov	r0, r9
    2baa:	b005      	add	sp, #20
    2bac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2bb0:	6868      	ldr	r0, [r5, #4]
    2bb2:	4a14      	ldr	r2, [pc, #80]	; (2c04 <pm_policy_next_state+0x90>)
    2bb4:	46c4      	mov	ip, r8
    2bb6:	4659      	mov	r1, fp
    2bb8:	fbe0 c107 	umlal	ip, r1, r0, r7
    2bbc:	2300      	movs	r3, #0
    2bbe:	4660      	mov	r0, ip
    2bc0:	f7fd fa8e 	bl	e0 <__aeabi_uldivmod>
    2bc4:	9001      	str	r0, [sp, #4]
    2bc6:	68a8      	ldr	r0, [r5, #8]
    2bc8:	4a0e      	ldr	r2, [pc, #56]	; (2c04 <pm_policy_next_state+0x90>)
    2bca:	46c4      	mov	ip, r8
    2bcc:	4659      	mov	r1, fp
    2bce:	fbe0 c107 	umlal	ip, r1, r0, r7
    2bd2:	2300      	movs	r3, #0
    2bd4:	4660      	mov	r0, ip
    2bd6:	f7fd fa83 	bl	e0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2bda:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    2bde:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2be0:	d001      	beq.n	2be6 <pm_policy_next_state+0x72>
    2be2:	4582      	cmp	sl, r0
    2be4:	d905      	bls.n	2bf2 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    2be6:	1c73      	adds	r3, r6, #1
    2be8:	d0de      	beq.n	2ba8 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    2bea:	9b01      	ldr	r3, [sp, #4]
    2bec:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    2bee:	42b0      	cmp	r0, r6
    2bf0:	d9da      	bls.n	2ba8 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2bf2:	3c01      	subs	r4, #1
    2bf4:	b2a4      	uxth	r4, r4
    2bf6:	3d0c      	subs	r5, #12
    2bf8:	e7d4      	b.n	2ba4 <pm_policy_next_state+0x30>
    2bfa:	bf00      	nop
    2bfc:	20000018 	.word	0x20000018
    2c00:	000f423f 	.word	0x000f423f
    2c04:	000f4240 	.word	0x000f4240

00002c08 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2c08:	b908      	cbnz	r0, 2c0e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2c0a:	4b02      	ldr	r3, [pc, #8]	; (2c14 <pm_state_cpu_get_all+0xc>)
    2c0c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2c0e:	2000      	movs	r0, #0
    2c10:	4770      	bx	lr
    2c12:	bf00      	nop
    2c14:	0000d12c 	.word	0x0000d12c

00002c18 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    2c18:	b4f0      	push	{r4, r5, r6, r7}
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2c1a:	4b0c      	ldr	r3, [pc, #48]	; (2c4c <class_handler+0x34>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2c1c:	4e0c      	ldr	r6, [pc, #48]	; (2c50 <class_handler+0x38>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2c1e:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2c20:	4b0c      	ldr	r3, [pc, #48]	; (2c54 <class_handler+0x3c>)
    2c22:	42b3      	cmp	r3, r6
    2c24:	d303      	bcc.n	2c2e <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    2c26:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2c2a:	bcf0      	pop	{r4, r5, r6, r7}
    2c2c:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    2c2e:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2c30:	42bd      	cmp	r5, r7
    2c32:	d309      	bcc.n	2c48 <class_handler+0x30>
		if (iface->class_handler &&
    2c34:	691c      	ldr	r4, [r3, #16]
    2c36:	b13c      	cbz	r4, 2c48 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    2c38:	f895 c002 	ldrb.w	ip, [r5, #2]
    2c3c:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    2c3e:	45ac      	cmp	ip, r5
    2c40:	d102      	bne.n	2c48 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    2c42:	4623      	mov	r3, r4
}
    2c44:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    2c46:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2c48:	3324      	adds	r3, #36	; 0x24
    2c4a:	e7ea      	b.n	2c22 <class_handler+0xa>
    2c4c:	20000c70 	.word	0x20000c70
    2c50:	200003f8 	.word	0x200003f8
    2c54:	200003d4 	.word	0x200003d4

00002c58 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    2c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2c5c:	4c13      	ldr	r4, [pc, #76]	; (2cac <custom_handler+0x54>)
    2c5e:	f8df 8050 	ldr.w	r8, [pc, #80]	; 2cb0 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2c62:	f8df 9050 	ldr.w	r9, [pc, #80]	; 2cb4 <custom_handler+0x5c>
{
    2c66:	4605      	mov	r5, r0
    2c68:	460e      	mov	r6, r1
    2c6a:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2c6c:	4544      	cmp	r4, r8
    2c6e:	d303      	bcc.n	2c78 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    2c70:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    2c78:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2c7a:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    2c7e:	429a      	cmp	r2, r3
    2c80:	d312      	bcc.n	2ca8 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    2c82:	69a3      	ldr	r3, [r4, #24]
    2c84:	b183      	cbz	r3, 2ca8 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    2c86:	7890      	ldrb	r0, [r2, #2]
    2c88:	7929      	ldrb	r1, [r5, #4]
    2c8a:	4288      	cmp	r0, r1
    2c8c:	d105      	bne.n	2c9a <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    2c8e:	463a      	mov	r2, r7
    2c90:	4631      	mov	r1, r6
    2c92:	4628      	mov	r0, r5
}
    2c94:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    2c98:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    2c9a:	7952      	ldrb	r2, [r2, #5]
    2c9c:	2a01      	cmp	r2, #1
    2c9e:	d103      	bne.n	2ca8 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    2ca0:	463a      	mov	r2, r7
    2ca2:	4631      	mov	r1, r6
    2ca4:	4628      	mov	r0, r5
    2ca6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2ca8:	3424      	adds	r4, #36	; 0x24
    2caa:	e7df      	b.n	2c6c <custom_handler+0x14>
    2cac:	200003d4 	.word	0x200003d4
    2cb0:	200003f8 	.word	0x200003f8
    2cb4:	20000c70 	.word	0x20000c70

00002cb8 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    2cb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2cbc:	4c0b      	ldr	r4, [pc, #44]	; (2cec <vendor_handler+0x34>)
    2cbe:	f8df 8030 	ldr.w	r8, [pc, #48]	; 2cf0 <vendor_handler+0x38>
{
    2cc2:	4605      	mov	r5, r0
    2cc4:	460e      	mov	r6, r1
    2cc6:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2cc8:	4544      	cmp	r4, r8
    2cca:	d302      	bcc.n	2cd2 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    2ccc:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2cd0:	e009      	b.n	2ce6 <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    2cd2:	6963      	ldr	r3, [r4, #20]
    2cd4:	b90b      	cbnz	r3, 2cda <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2cd6:	3424      	adds	r4, #36	; 0x24
    2cd8:	e7f6      	b.n	2cc8 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    2cda:	463a      	mov	r2, r7
    2cdc:	4631      	mov	r1, r6
    2cde:	4628      	mov	r0, r5
    2ce0:	4798      	blx	r3
    2ce2:	2800      	cmp	r0, #0
    2ce4:	d1f7      	bne.n	2cd6 <vendor_handler+0x1e>
}
    2ce6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2cea:	bf00      	nop
    2cec:	200003d4 	.word	0x200003d4
    2cf0:	200003f8 	.word	0x200003f8

00002cf4 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    2cf4:	4802      	ldr	r0, [pc, #8]	; (2d00 <usb_reset_alt_setting+0xc>)
    2cf6:	2208      	movs	r2, #8
    2cf8:	2100      	movs	r1, #0
    2cfa:	f008 bfef 	b.w	bcdc <memset>
    2cfe:	bf00      	nop
    2d00:	20000d2b 	.word	0x20000d2b

00002d04 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    2d04:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2d06:	4b0b      	ldr	r3, [pc, #44]	; (2d34 <is_ep_valid.part.0+0x30>)
    2d08:	4c0b      	ldr	r4, [pc, #44]	; (2d38 <is_ep_valid.part.0+0x34>)
    2d0a:	42a3      	cmp	r3, r4
    2d0c:	d301      	bcc.n	2d12 <is_ep_valid.part.0+0xe>
	return false;
    2d0e:	2000      	movs	r0, #0
}
    2d10:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    2d12:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2d14:	7f1e      	ldrb	r6, [r3, #28]
    2d16:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    2d18:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2d1a:	b2d5      	uxtb	r5, r2
    2d1c:	42ae      	cmp	r6, r5
    2d1e:	d801      	bhi.n	2d24 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2d20:	3324      	adds	r3, #36	; 0x24
    2d22:	e7f2      	b.n	2d0a <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    2d24:	3201      	adds	r2, #1
    2d26:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    2d2a:	4285      	cmp	r5, r0
    2d2c:	d1f5      	bne.n	2d1a <is_ep_valid.part.0+0x16>
		return true;
    2d2e:	2001      	movs	r0, #1
    2d30:	e7ee      	b.n	2d10 <is_ep_valid.part.0+0xc>
    2d32:	bf00      	nop
    2d34:	200003d4 	.word	0x200003d4
    2d38:	200003f8 	.word	0x200003f8

00002d3c <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
    2d3c:	b508      	push	{r3, lr}
	handler = usb_dev.req_handlers[type];
    2d3e:	4809      	ldr	r0, [pc, #36]	; (2d64 <usb_handle_request.constprop.0+0x28>)
	uint32_t type = setup->RequestType.type;
    2d40:	7803      	ldrb	r3, [r0, #0]
    2d42:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    2d46:	330a      	adds	r3, #10
    2d48:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    2d4c:	b13b      	cbz	r3, 2d5e <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    2d4e:	f100 0208 	add.w	r2, r0, #8
    2d52:	f100 0110 	add.w	r1, r0, #16
    2d56:	4798      	blx	r3
    2d58:	43c0      	mvns	r0, r0
    2d5a:	0fc0      	lsrs	r0, r0, #31
}
    2d5c:	bd08      	pop	{r3, pc}
		return false;
    2d5e:	4618      	mov	r0, r3
    2d60:	e7fc      	b.n	2d5c <usb_handle_request.constprop.0+0x20>
    2d62:	bf00      	nop
    2d64:	20000c70 	.word	0x20000c70

00002d68 <usb_device_init.part.0>:

/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(void)
    2d68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
	if (!device_descriptor) {
		LOG_ERR("Failed to configure USB device stack");
    2d6a:	4b08      	ldr	r3, [pc, #32]	; (2d8c <usb_device_init.part.0+0x24>)
    2d6c:	9305      	str	r3, [sp, #20]
    2d6e:	2302      	movs	r3, #2
    2d70:	9304      	str	r3, [sp, #16]
    2d72:	4807      	ldr	r0, [pc, #28]	; (2d90 <usb_device_init.part.0+0x28>)
    2d74:	2300      	movs	r3, #0
    2d76:	aa04      	add	r2, sp, #16
    2d78:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2d7c:	f7ff fadc 	bl	2338 <z_impl_z_log_msg_static_create>
	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
}
    2d80:	f04f 30ff 	mov.w	r0, #4294967295
    2d84:	b007      	add	sp, #28
    2d86:	f85d fb04 	ldr.w	pc, [sp], #4
    2d8a:	bf00      	nop
    2d8c:	0000d79e 	.word	0x0000d79e
    2d90:	0000d020 	.word	0x0000d020

00002d94 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    2d94:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    2d96:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    2d98:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    2d9a:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    2d9c:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    2da0:	d007      	beq.n	2db2 <usb_halt_endpoint_req.isra.0+0x1e>
    2da2:	4620      	mov	r0, r4
    2da4:	f7ff ffae 	bl	2d04 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    2da8:	b178      	cbz	r0, 2dca <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
    2daa:	4b0d      	ldr	r3, [pc, #52]	; (2de0 <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    2dac:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    2db0:	b158      	cbz	r0, 2dca <usb_halt_endpoint_req.isra.0+0x36>
		if (halt) {
    2db2:	4e0b      	ldr	r6, [pc, #44]	; (2de0 <usb_halt_endpoint_req.isra.0+0x4c>)
			usb_dc_ep_set_stall(ep);
    2db4:	4620      	mov	r0, r4
		if (halt) {
    2db6:	b155      	cbz	r5, 2dce <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
    2db8:	f002 fb52 	bl	5460 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    2dbc:	69f3      	ldr	r3, [r6, #28]
    2dbe:	b11b      	cbz	r3, 2dc8 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    2dc0:	f10d 0107 	add.w	r1, sp, #7
    2dc4:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    2dc6:	4798      	blx	r3
		return true;
    2dc8:	2001      	movs	r0, #1
}
    2dca:	b002      	add	sp, #8
    2dcc:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    2dce:	f002 fb81 	bl	54d4 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    2dd2:	69f3      	ldr	r3, [r6, #28]
    2dd4:	2b00      	cmp	r3, #0
    2dd6:	d0f7      	beq.n	2dc8 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    2dd8:	f10d 0107 	add.w	r1, sp, #7
    2ddc:	2009      	movs	r0, #9
    2dde:	e7f2      	b.n	2dc6 <usb_halt_endpoint_req.isra.0+0x32>
    2de0:	20000c70 	.word	0x20000c70

00002de4 <get_ep_bm_from_addr.part.0>:
static uint32_t get_ep_bm_from_addr(uint8_t ep)
    2de4:	b580      	push	{r7, lr}
    2de6:	af00      	add	r7, sp, #0
		LOG_ERR("Endpoint 0x%02x is invalid", ep);
    2de8:	b088      	sub	sp, #32
    2dea:	466a      	mov	r2, sp
    2dec:	4b07      	ldr	r3, [pc, #28]	; (2e0c <get_ep_bm_from_addr.part.0+0x28>)
    2dee:	e9c2 3005 	strd	r3, r0, [r2, #20]
    2df2:	2303      	movs	r3, #3
    2df4:	f842 3f10 	str.w	r3, [r2, #16]!
    2df8:	4805      	ldr	r0, [pc, #20]	; (2e10 <get_ep_bm_from_addr.part.0+0x2c>)
    2dfa:	2300      	movs	r3, #0
    2dfc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2e00:	f7ff fa9a 	bl	2338 <z_impl_z_log_msg_static_create>
}
    2e04:	2000      	movs	r0, #0
    2e06:	46bd      	mov	sp, r7
    2e08:	bd80      	pop	{r7, pc}
    2e0a:	bf00      	nop
    2e0c:	0000d7c3 	.word	0x0000d7c3
    2e10:	0000d020 	.word	0x0000d020

00002e14 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    2e14:	2804      	cmp	r0, #4
{
    2e16:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2e1a:	f8df 909c 	ldr.w	r9, [pc, #156]	; 2eb8 <forward_status_cb+0xa4>
    2e1e:	4604      	mov	r4, r0
    2e20:	460f      	mov	r7, r1
	if (status == USB_DC_DISCONNECTED) {
    2e22:	d015      	beq.n	2e50 <forward_status_cb+0x3c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    2e24:	2801      	cmp	r0, #1
    2e26:	d12f      	bne.n	2e88 <forward_status_cb+0x74>
		if (usb_dev.configured) {
    2e28:	f8df 8090 	ldr.w	r8, [pc, #144]	; 2ebc <forward_status_cb+0xa8>
    2e2c:	f898 30b9 	ldrb.w	r3, [r8, #185]	; 0xb9
    2e30:	b353      	cbz	r3, 2e88 <forward_status_cb+0x74>
			usb_cancel_transfers();
    2e32:	f000 fdf3 	bl	3a1c <usb_cancel_transfers>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2e36:	4d22      	ldr	r5, [pc, #136]	; (2ec0 <forward_status_cb+0xac>)
    2e38:	454d      	cmp	r5, r9
    2e3a:	d222      	bcs.n	2e82 <forward_status_cb+0x6e>
		ep_data = cfg_data->endpoint;
    2e3c:	6a2a      	ldr	r2, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    2e3e:	f04f 0a00 	mov.w	sl, #0
    2e42:	7f2b      	ldrb	r3, [r5, #28]
    2e44:	fa5f f68a 	uxtb.w	r6, sl
    2e48:	42b3      	cmp	r3, r6
    2e4a:	d804      	bhi.n	2e56 <forward_status_cb+0x42>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2e4c:	3524      	adds	r5, #36	; 0x24
    2e4e:	e7f3      	b.n	2e38 <forward_status_cb+0x24>
		usb_reset_alt_setting();
    2e50:	f7ff ff50 	bl	2cf4 <usb_reset_alt_setting>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    2e54:	e7e8      	b.n	2e28 <forward_status_cb+0x14>
			ret = endpoint_callback(&ep_data[n]);
    2e56:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
    2e5a:	9201      	str	r2, [sp, #4]
	ret = usb_dc_ep_disable(ep_data->ep_addr);
    2e5c:	7930      	ldrb	r0, [r6, #4]
    2e5e:	f008 ff94 	bl	bd8a <usb_dc_ep_disable>
    2e62:	4683      	mov	fp, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
    2e64:	7930      	ldrb	r0, [r6, #4]
    2e66:	f008 fea0 	bl	bbaa <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    2e6a:	f8d8 30c4 	ldr.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    2e6e:	9a01      	ldr	r2, [sp, #4]
	usb_dev.ep_bm &= ~ep_bm;
    2e70:	ea23 0300 	bic.w	r3, r3, r0
			if (ret < 0) {
    2e74:	f1bb 0f00 	cmp.w	fp, #0
	usb_dev.ep_bm &= ~ep_bm;
    2e78:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    2e7c:	f10a 0a01 	add.w	sl, sl, #1
    2e80:	dadf      	bge.n	2e42 <forward_status_cb+0x2e>
			usb_dev.configured = false;
    2e82:	2300      	movs	r3, #0
    2e84:	f888 30b9 	strb.w	r3, [r8, #185]	; 0xb9
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2e88:	4d0d      	ldr	r5, [pc, #52]	; (2ec0 <forward_status_cb+0xac>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2e8a:	454d      	cmp	r5, r9
    2e8c:	d308      	bcc.n	2ea0 <forward_status_cb+0x8c>
	if (usb_dev.user_status_callback) {
    2e8e:	4b0b      	ldr	r3, [pc, #44]	; (2ebc <forward_status_cb+0xa8>)
    2e90:	6a1b      	ldr	r3, [r3, #32]
    2e92:	b16b      	cbz	r3, 2eb0 <forward_status_cb+0x9c>
		usb_dev.user_status_callback(status, param);
    2e94:	4639      	mov	r1, r7
    2e96:	4620      	mov	r0, r4
}
    2e98:	b003      	add	sp, #12
    2e9a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
    2e9e:	4718      	bx	r3
		if (cfg_data->cb_usb_status) {
    2ea0:	68eb      	ldr	r3, [r5, #12]
    2ea2:	b11b      	cbz	r3, 2eac <forward_status_cb+0x98>
			cfg_data->cb_usb_status(cfg_data, status, param);
    2ea4:	463a      	mov	r2, r7
    2ea6:	4621      	mov	r1, r4
    2ea8:	4628      	mov	r0, r5
    2eaa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2eac:	3524      	adds	r5, #36	; 0x24
    2eae:	e7ec      	b.n	2e8a <forward_status_cb+0x76>
}
    2eb0:	b003      	add	sp, #12
    2eb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2eb6:	bf00      	nop
    2eb8:	200003f8 	.word	0x200003f8
    2ebc:	20000c70 	.word	0x20000c70
    2ec0:	200003d4 	.word	0x200003d4

00002ec4 <disable_endpoint>:
{
    2ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ec6:	af00      	add	r7, sp, #0
    2ec8:	4605      	mov	r5, r0
	ret = usb_dc_ep_disable(ep_addr);
    2eca:	f008 ff5e 	bl	bd8a <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    2ece:	f110 0f78 	cmn.w	r0, #120	; 0x78
	ret = usb_dc_ep_disable(ep_addr);
    2ed2:	4604      	mov	r4, r0
	if (ret == -EALREADY) {
    2ed4:	d013      	beq.n	2efe <disable_endpoint+0x3a>
	} else if (ret) {
    2ed6:	b190      	cbz	r0, 2efe <disable_endpoint+0x3a>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_addr);
    2ed8:	466e      	mov	r6, sp
    2eda:	b088      	sub	sp, #32
    2edc:	466a      	mov	r2, sp
    2ede:	4b0e      	ldr	r3, [pc, #56]	; (2f18 <disable_endpoint+0x54>)
    2ee0:	e9c2 3505 	strd	r3, r5, [r2, #20]
    2ee4:	2303      	movs	r3, #3
    2ee6:	f842 3f10 	str.w	r3, [r2, #16]!
    2eea:	480c      	ldr	r0, [pc, #48]	; (2f1c <disable_endpoint+0x58>)
    2eec:	2300      	movs	r3, #0
    2eee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2ef2:	f7ff fa21 	bl	2338 <z_impl_z_log_msg_static_create>
    2ef6:	46b5      	mov	sp, r6
}
    2ef8:	4620      	mov	r0, r4
    2efa:	46bd      	mov	sp, r7
    2efc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ep_bm = get_ep_bm_from_addr(ep_addr);
    2efe:	4628      	mov	r0, r5
    2f00:	f008 fe53 	bl	bbaa <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    2f04:	4a06      	ldr	r2, [pc, #24]	; (2f20 <disable_endpoint+0x5c>)
    2f06:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    2f0a:	ea23 0300 	bic.w	r3, r3, r0
    2f0e:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	return 0;
    2f12:	2400      	movs	r4, #0
    2f14:	e7f0      	b.n	2ef8 <disable_endpoint+0x34>
    2f16:	bf00      	nop
    2f18:	0000d7de 	.word	0x0000d7de
    2f1c:	0000d020 	.word	0x0000d020
    2f20:	20000c70 	.word	0x20000c70

00002f24 <set_endpoint>:
{
    2f24:	b5f0      	push	{r4, r5, r6, r7, lr}
    2f26:	b083      	sub	sp, #12
    2f28:	af00      	add	r7, sp, #0
    2f2a:	4604      	mov	r4, r0
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    2f2c:	7880      	ldrb	r0, [r0, #2]
    2f2e:	7038      	strb	r0, [r7, #0]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    2f30:	7923      	ldrb	r3, [r4, #4]
    2f32:	7962      	ldrb	r2, [r4, #5]
	if (ep_bm & usb_dev.ep_bm) {
    2f34:	4d27      	ldr	r5, [pc, #156]	; (2fd4 <set_endpoint+0xb0>)
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    2f36:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    2f3a:	807b      	strh	r3, [r7, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    2f3c:	78e3      	ldrb	r3, [r4, #3]
    2f3e:	f003 0303 	and.w	r3, r3, #3
    2f42:	713b      	strb	r3, [r7, #4]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    2f44:	f008 fe31 	bl	bbaa <get_ep_bm_from_addr>
	if (ep_bm & usb_dev.ep_bm) {
    2f48:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    2f4c:	4218      	tst	r0, r3
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    2f4e:	4606      	mov	r6, r0
	if (ep_bm & usb_dev.ep_bm) {
    2f50:	d00c      	beq.n	2f6c <set_endpoint+0x48>
		reset_endpoint(ep_desc);
    2f52:	78a4      	ldrb	r4, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    2f54:	4620      	mov	r0, r4
    2f56:	f000 fd43 	bl	39e0 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    2f5a:	4620      	mov	r0, r4
    2f5c:	f7ff ffb2 	bl	2ec4 <disable_endpoint>
		if (!k_is_in_isr()) {
    2f60:	f009 fc0b 	bl	c77a <k_is_in_isr>
    2f64:	b910      	cbnz	r0, 2f6c <set_endpoint+0x48>
	return z_impl_k_usleep(us);
    2f66:	2096      	movs	r0, #150	; 0x96
    2f68:	f007 fc46 	bl	a7f8 <z_impl_k_usleep>
	ret = usb_dc_ep_configure(&ep_cfg);
    2f6c:	4638      	mov	r0, r7
    2f6e:	f002 fa43 	bl	53f8 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    2f72:	f110 0f78 	cmn.w	r0, #120	; 0x78
	ret = usb_dc_ep_configure(&ep_cfg);
    2f76:	4603      	mov	r3, r0
	if (ret == -EALREADY) {
    2f78:	7838      	ldrb	r0, [r7, #0]
    2f7a:	d014      	beq.n	2fa6 <set_endpoint+0x82>
	} else if (ret) {
    2f7c:	b19b      	cbz	r3, 2fa6 <set_endpoint+0x82>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    2f7e:	466c      	mov	r4, sp
    2f80:	b088      	sub	sp, #32
    2f82:	466a      	mov	r2, sp
    2f84:	4b14      	ldr	r3, [pc, #80]	; (2fd8 <set_endpoint+0xb4>)
    2f86:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    2f8a:	2303      	movs	r3, #3
    2f8c:	f842 3f10 	str.w	r3, [r2, #16]!
    2f90:	4812      	ldr	r0, [pc, #72]	; (2fdc <set_endpoint+0xb8>)
    2f92:	2300      	movs	r3, #0
    2f94:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2f98:	f7ff f9ce 	bl	2338 <z_impl_z_log_msg_static_create>
		return false;
    2f9c:	2000      	movs	r0, #0
    2f9e:	46a5      	mov	sp, r4
}
    2fa0:	370c      	adds	r7, #12
    2fa2:	46bd      	mov	sp, r7
    2fa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    2fa6:	f002 fad1 	bl	554c <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    2faa:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2fae:	d008      	beq.n	2fc2 <set_endpoint+0x9e>
	} else if (ret) {
    2fb0:	b138      	cbz	r0, 2fc2 <set_endpoint+0x9e>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    2fb2:	466c      	mov	r4, sp
    2fb4:	b088      	sub	sp, #32
    2fb6:	783b      	ldrb	r3, [r7, #0]
    2fb8:	466a      	mov	r2, sp
    2fba:	4909      	ldr	r1, [pc, #36]	; (2fe0 <set_endpoint+0xbc>)
    2fbc:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2fc0:	e7e3      	b.n	2f8a <set_endpoint+0x66>
	usb_dev.ep_bm |= ep_bm;
    2fc2:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	usb_dev.configured = true;
    2fc6:	2001      	movs	r0, #1
	usb_dev.ep_bm |= ep_bm;
    2fc8:	4333      	orrs	r3, r6
	usb_dev.configured = true;
    2fca:	f885 00b9 	strb.w	r0, [r5, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
    2fce:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	return true;
    2fd2:	e7e5      	b.n	2fa0 <set_endpoint+0x7c>
    2fd4:	20000c70 	.word	0x20000c70
    2fd8:	0000d800 	.word	0x0000d800
    2fdc:	0000d020 	.word	0x0000d020
    2fe0:	0000d824 	.word	0x0000d824

00002fe4 <usb_handle_standard_request>:
{
    2fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
    2fe8:	4ea3      	ldr	r6, [pc, #652]	; (3278 <usb_handle_standard_request+0x294>)
    2fea:	69b3      	ldr	r3, [r6, #24]
{
    2fec:	4604      	mov	r4, r0
    2fee:	460f      	mov	r7, r1
    2ff0:	4615      	mov	r5, r2
	if (usb_dev.custom_req_handler &&
    2ff2:	b9fb      	cbnz	r3, 3034 <usb_handle_standard_request+0x50>
	switch (setup->RequestType.recipient) {
    2ff4:	7823      	ldrb	r3, [r4, #0]
    2ff6:	f003 031f 	and.w	r3, r3, #31
    2ffa:	2b01      	cmp	r3, #1
    2ffc:	f000 809d 	beq.w	313a <usb_handle_standard_request+0x156>
    3000:	2b02      	cmp	r3, #2
    3002:	f000 8104 	beq.w	320e <usb_handle_standard_request+0x22a>
    3006:	bb33      	cbnz	r3, 3056 <usb_handle_standard_request+0x72>
	if (usb_reqtype_is_to_host(setup)) {
    3008:	f994 0000 	ldrsb.w	r0, [r4]
	uint8_t *data = *data_buf;
    300c:	682a      	ldr	r2, [r5, #0]
		switch (setup->bRequest) {
    300e:	7861      	ldrb	r1, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    3010:	2800      	cmp	r0, #0
    3012:	da34      	bge.n	307e <usb_handle_standard_request+0x9a>
		switch (setup->bRequest) {
    3014:	2906      	cmp	r1, #6
    3016:	d012      	beq.n	303e <usb_handle_standard_request+0x5a>
    3018:	2908      	cmp	r1, #8
    301a:	d02b      	beq.n	3074 <usb_handle_standard_request+0x90>
    301c:	b9d9      	cbnz	r1, 3056 <usb_handle_standard_request+0x72>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    301e:	2301      	movs	r3, #1
    3020:	7013      	strb	r3, [r2, #0]
	data[1] = 0U;
    3022:	7051      	strb	r1, [r2, #1]
		data[0] |= (usb_dev.remote_wakeup ?
    3024:	f896 30c3 	ldrb.w	r3, [r6, #195]	; 0xc3
    3028:	005b      	lsls	r3, r3, #1
    302a:	f043 0301 	orr.w	r3, r3, #1
    302e:	7013      	strb	r3, [r2, #0]
		*len = 2;
    3030:	2302      	movs	r3, #2
    3032:	e12a      	b.n	328a <usb_handle_standard_request+0x2a6>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    3034:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    3036:	2800      	cmp	r0, #0
    3038:	d1dc      	bne.n	2ff4 <usb_handle_standard_request+0x10>
		return 0;
    303a:	2000      	movs	r0, #0
    303c:	e00d      	b.n	305a <usb_handle_standard_request+0x76>
			return usb_get_descriptor(setup, len, data_buf);
    303e:	8862      	ldrh	r2, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    3040:	0a10      	lsrs	r0, r2, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    3042:	1f01      	subs	r1, r0, #4
    3044:	2901      	cmp	r1, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    3046:	4684      	mov	ip, r0
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    3048:	d905      	bls.n	3056 <usb_handle_standard_request+0x72>
    304a:	2807      	cmp	r0, #7
    304c:	d803      	bhi.n	3056 <usb_handle_standard_request+0x72>
	p = (uint8_t *)usb_dev.descriptors;
    304e:	6a71      	ldr	r1, [r6, #36]	; 0x24
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    3050:	b2d2      	uxtb	r2, r2
	while (p[DESC_bLength] != 0U) {
    3052:	780c      	ldrb	r4, [r1, #0]
    3054:	b91c      	cbnz	r4, 305e <usb_handle_standard_request+0x7a>
			rc = -EINVAL;
    3056:	f06f 0015 	mvn.w	r0, #21
}
    305a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
    305e:	784e      	ldrb	r6, [r1, #1]
    3060:	4566      	cmp	r6, ip
    3062:	d103      	bne.n	306c <usb_handle_standard_request+0x88>
			if (cur_index == index) {
    3064:	429a      	cmp	r2, r3
    3066:	f000 810b 	beq.w	3280 <usb_handle_standard_request+0x29c>
			cur_index++;
    306a:	3301      	adds	r3, #1
		p += p[DESC_bLength];
    306c:	4421      	add	r1, r4
    306e:	e7f0      	b.n	3052 <usb_handle_standard_request+0x6e>
			*len = p[DESC_bLength];
    3070:	780b      	ldrb	r3, [r1, #0]
    3072:	e10a      	b.n	328a <usb_handle_standard_request+0x2a6>
			data[0] = usb_dev.configuration;
    3074:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    3078:	7013      	strb	r3, [r2, #0]
				*len = 1;
    307a:	2301      	movs	r3, #1
    307c:	e105      	b.n	328a <usb_handle_standard_request+0x2a6>
		switch (setup->bRequest) {
    307e:	3901      	subs	r1, #1
    3080:	2908      	cmp	r1, #8
    3082:	d8e8      	bhi.n	3056 <usb_handle_standard_request+0x72>
    3084:	a301      	add	r3, pc, #4	; (adr r3, 308c <usb_handle_standard_request+0xa8>)
    3086:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    308a:	bf00      	nop
    308c:	00003125 	.word	0x00003125
    3090:	00003057 	.word	0x00003057
    3094:	00003133 	.word	0x00003133
    3098:	00003057 	.word	0x00003057
    309c:	000030b1 	.word	0x000030b1
    30a0:	00003057 	.word	0x00003057
    30a4:	00003057 	.word	0x00003057
    30a8:	00003057 	.word	0x00003057
    30ac:	000030bd 	.word	0x000030bd
			return !usb_dc_set_address(setup->wValue);
    30b0:	78a0      	ldrb	r0, [r4, #2]
    30b2:	f002 f95d 	bl	5370 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    30b6:	2800      	cmp	r0, #0
    30b8:	d0bf      	beq.n	303a <usb_handle_standard_request+0x56>
    30ba:	e7cc      	b.n	3056 <usb_handle_standard_request+0x72>
	if (setup->wValue == 0U) {
    30bc:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    30be:	6a75      	ldr	r5, [r6, #36]	; 0x24
	if (setup->wValue == 0U) {
    30c0:	bb63      	cbnz	r3, 311c <usb_handle_standard_request+0x138>
		usb_reset_alt_setting();
    30c2:	f7ff fe17 	bl	2cf4 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    30c6:	8863      	ldrh	r3, [r4, #2]
    30c8:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    30cc:	69f3      	ldr	r3, [r6, #28]
    30ce:	2b00      	cmp	r3, #0
    30d0:	d0b3      	beq.n	303a <usb_handle_standard_request+0x56>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    30d2:	496a      	ldr	r1, [pc, #424]	; (327c <usb_handle_standard_request+0x298>)
    30d4:	2003      	movs	r0, #3
    30d6:	4798      	blx	r3
    30d8:	e7af      	b.n	303a <usb_handle_standard_request+0x56>
		switch (p[DESC_bDescriptorType]) {
    30da:	786b      	ldrb	r3, [r5, #1]
    30dc:	2b04      	cmp	r3, #4
    30de:	d010      	beq.n	3102 <usb_handle_standard_request+0x11e>
    30e0:	2b05      	cmp	r3, #5
    30e2:	d011      	beq.n	3108 <usb_handle_standard_request+0x124>
    30e4:	2b02      	cmp	r3, #2
    30e6:	d104      	bne.n	30f2 <usb_handle_standard_request+0x10e>
			cur_config = p[CONF_DESC_bConfigurationValue];
    30e8:	796f      	ldrb	r7, [r5, #5]
			if (cur_config == setup->wValue) {
    30ea:	8863      	ldrh	r3, [r4, #2]
				found = true;
    30ec:	42bb      	cmp	r3, r7
    30ee:	bf08      	it	eq
    30f0:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    30f2:	782b      	ldrb	r3, [r5, #0]
    30f4:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    30f6:	782b      	ldrb	r3, [r5, #0]
    30f8:	2b00      	cmp	r3, #0
    30fa:	d1ee      	bne.n	30da <usb_handle_standard_request+0xf6>
	if (found) {
    30fc:	2800      	cmp	r0, #0
    30fe:	d0aa      	beq.n	3056 <usb_handle_standard_request+0x72>
    3100:	e7df      	b.n	30c2 <usb_handle_standard_request+0xde>
			cur_alt_setting =
    3102:	f895 8003 	ldrb.w	r8, [r5, #3]
			break;
    3106:	e7f4      	b.n	30f2 <usb_handle_standard_request+0x10e>
			if ((cur_config != setup->wValue) ||
    3108:	8863      	ldrh	r3, [r4, #2]
    310a:	42bb      	cmp	r3, r7
    310c:	d1f1      	bne.n	30f2 <usb_handle_standard_request+0x10e>
    310e:	f1b8 0f00 	cmp.w	r8, #0
    3112:	d1ee      	bne.n	30f2 <usb_handle_standard_request+0x10e>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    3114:	4628      	mov	r0, r5
    3116:	f7ff ff05 	bl	2f24 <set_endpoint>
			break;
    311a:	e7ea      	b.n	30f2 <usb_handle_standard_request+0x10e>
	uint8_t cur_config = 0xFF;
    311c:	27ff      	movs	r7, #255	; 0xff
	bool found = false;
    311e:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    3120:	46b8      	mov	r8, r7
    3122:	e7e8      	b.n	30f6 <usb_handle_standard_request+0x112>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    3124:	8863      	ldrh	r3, [r4, #2]
    3126:	2b01      	cmp	r3, #1
    3128:	d195      	bne.n	3056 <usb_handle_standard_request+0x72>
					usb_dev.remote_wakeup = false;
    312a:	2300      	movs	r3, #0
					usb_dev.remote_wakeup = true;
    312c:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    3130:	e783      	b.n	303a <usb_handle_standard_request+0x56>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    3132:	8863      	ldrh	r3, [r4, #2]
    3134:	2b01      	cmp	r3, #1
    3136:	d18e      	bne.n	3056 <usb_handle_standard_request+0x72>
    3138:	e7f8      	b.n	312c <usb_handle_standard_request+0x148>
	if (!is_device_configured() ||
    313a:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    313e:	f8d5 c000 	ldr.w	ip, [r5]
    3142:	2b00      	cmp	r3, #0
    3144:	d087      	beq.n	3056 <usb_handle_standard_request+0x72>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    3146:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    3148:	88a3      	ldrh	r3, [r4, #4]
    314a:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    314e:	462a      	mov	r2, r5
	while (p[DESC_bLength] != 0U) {
    3150:	7810      	ldrb	r0, [r2, #0]
    3152:	2800      	cmp	r0, #0
    3154:	f43f af7f 	beq.w	3056 <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    3158:	7851      	ldrb	r1, [r2, #1]
    315a:	2902      	cmp	r1, #2
    315c:	d104      	bne.n	3168 <usb_handle_standard_request+0x184>
			if (interface < cfg_descr->bNumInterfaces) {
    315e:	f892 8004 	ldrb.w	r8, [r2, #4]
    3162:	45f0      	cmp	r8, lr
    3164:	f200 8093 	bhi.w	328e <usb_handle_standard_request+0x2aa>
		p += p[DESC_bLength];
    3168:	4402      	add	r2, r0
    316a:	e7f1      	b.n	3150 <usb_handle_standard_request+0x16c>
			data[0] = 0U;
    316c:	f88c 2000 	strb.w	r2, [ip]
			data[1] = 0U;
    3170:	f88c 2001 	strb.w	r2, [ip, #1]
			*len = 2;
    3174:	6039      	str	r1, [r7, #0]
			return true;
    3176:	e760      	b.n	303a <usb_handle_standard_request+0x56>
		p += p[DESC_bLength];
    3178:	4415      	add	r5, r2
    317a:	e094      	b.n	32a6 <usb_handle_standard_request+0x2c2>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    317c:	2a0b      	cmp	r2, #11
    317e:	f47f af6a 	bne.w	3056 <usb_handle_standard_request+0x72>
	bool ret = false;
    3182:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    3184:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    3188:	46c1      	mov	r9, r8
	const uint8_t *if_desc = NULL;
    318a:	46ba      	mov	sl, r7
    318c:	e006      	b.n	319c <usb_handle_standard_request+0x1b8>
		switch (p[DESC_bDescriptorType]) {
    318e:	786b      	ldrb	r3, [r5, #1]
    3190:	2b04      	cmp	r3, #4
    3192:	d00f      	beq.n	31b4 <usb_handle_standard_request+0x1d0>
    3194:	2b05      	cmp	r3, #5
    3196:	d021      	beq.n	31dc <usb_handle_standard_request+0x1f8>
		p += p[DESC_bLength];
    3198:	782b      	ldrb	r3, [r5, #0]
    319a:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    319c:	782b      	ldrb	r3, [r5, #0]
    319e:	2b00      	cmp	r3, #0
    31a0:	d1f5      	bne.n	318e <usb_handle_standard_request+0x1aa>
	if (usb_dev.status_callback) {
    31a2:	69f3      	ldr	r3, [r6, #28]
    31a4:	b113      	cbz	r3, 31ac <usb_handle_standard_request+0x1c8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    31a6:	4651      	mov	r1, sl
    31a8:	2007      	movs	r0, #7
    31aa:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    31ac:	2f00      	cmp	r7, #0
    31ae:	f47f af44 	bne.w	303a <usb_handle_standard_request+0x56>
    31b2:	e750      	b.n	3056 <usb_handle_standard_request+0x72>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    31b4:	f895 8002 	ldrb.w	r8, [r5, #2]
			if (cur_iface == setup->wIndex &&
    31b8:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    31ba:	f895 9003 	ldrb.w	r9, [r5, #3]
			if (cur_iface == setup->wIndex &&
    31be:	4598      	cmp	r8, r3
    31c0:	d1ea      	bne.n	3198 <usb_handle_standard_request+0x1b4>
			    cur_alt_setting == setup->wValue) {
    31c2:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
    31c4:	4599      	cmp	r9, r3
    31c6:	d1e7      	bne.n	3198 <usb_handle_standard_request+0x1b4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    31c8:	f1b8 0f07 	cmp.w	r8, #7
    31cc:	d81c      	bhi.n	3208 <usb_handle_standard_request+0x224>
		usb_dev.alt_setting[iface] = alt_setting;
    31ce:	eb06 0308 	add.w	r3, r6, r8
		return true;
    31d2:	46aa      	mov	sl, r5
				ret = usb_set_alt_setting(setup->wIndex,
    31d4:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
		return true;
    31d8:	2701      	movs	r7, #1
    31da:	e7dd      	b.n	3198 <usb_handle_standard_request+0x1b4>
			if (cur_iface == setup->wIndex) {
    31dc:	88a3      	ldrh	r3, [r4, #4]
    31de:	4543      	cmp	r3, r8
    31e0:	d1da      	bne.n	3198 <usb_handle_standard_request+0x1b4>
	if (cur_alt_setting != alt_setting) {
    31e2:	78a3      	ldrb	r3, [r4, #2]
    31e4:	454b      	cmp	r3, r9
    31e6:	d00a      	beq.n	31fe <usb_handle_standard_request+0x21a>
		ret = reset_endpoint(ep_desc);
    31e8:	78af      	ldrb	r7, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    31ea:	4638      	mov	r0, r7
    31ec:	f000 fbf8 	bl	39e0 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    31f0:	4638      	mov	r0, r7
    31f2:	f7ff fe67 	bl	2ec4 <disable_endpoint>
    31f6:	fab0 f780 	clz	r7, r0
    31fa:	097f      	lsrs	r7, r7, #5
    31fc:	e7cc      	b.n	3198 <usb_handle_standard_request+0x1b4>
		ret = set_endpoint(ep_desc);
    31fe:	4628      	mov	r0, r5
    3200:	f7ff fe90 	bl	2f24 <set_endpoint>
    3204:	4607      	mov	r7, r0
    3206:	e7c7      	b.n	3198 <usb_handle_standard_request+0x1b4>
    3208:	46aa      	mov	sl, r5
	return false;
    320a:	2700      	movs	r7, #0
    320c:	e7c4      	b.n	3198 <usb_handle_standard_request+0x1b4>
	if (usb_reqtype_is_to_host(setup)) {
    320e:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    3212:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    3214:	2a00      	cmp	r2, #0
    3216:	da18      	bge.n	324a <usb_handle_standard_request+0x266>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    3218:	2b00      	cmp	r3, #0
    321a:	f47f af1c 	bne.w	3056 <usb_handle_standard_request+0x72>
	uint8_t ep = setup->wIndex;
    321e:	7924      	ldrb	r4, [r4, #4]
    3220:	682d      	ldr	r5, [r5, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
    3222:	0663      	lsls	r3, r4, #25
    3224:	d00a      	beq.n	323c <usb_handle_standard_request+0x258>
    3226:	4620      	mov	r0, r4
    3228:	f7ff fd6c 	bl	2d04 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    322c:	2800      	cmp	r0, #0
    322e:	f43f af12 	beq.w	3056 <usb_handle_standard_request+0x72>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    3232:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    3236:	2b00      	cmp	r3, #0
    3238:	f43f af0d 	beq.w	3056 <usb_handle_standard_request+0x72>
		usb_dc_ep_is_stalled(ep, &data[0]);
    323c:	4629      	mov	r1, r5
    323e:	4620      	mov	r0, r4
    3240:	f002 f968 	bl	5514 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    3244:	2300      	movs	r3, #0
    3246:	706b      	strb	r3, [r5, #1]
    3248:	e6f2      	b.n	3030 <usb_handle_standard_request+0x4c>
		switch (setup->bRequest) {
    324a:	2b01      	cmp	r3, #1
    324c:	d008      	beq.n	3260 <usb_handle_standard_request+0x27c>
    324e:	2b03      	cmp	r3, #3
    3250:	f47f af01 	bne.w	3056 <usb_handle_standard_request+0x72>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    3254:	8863      	ldrh	r3, [r4, #2]
    3256:	2b00      	cmp	r3, #0
    3258:	f47f aefd 	bne.w	3056 <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    325c:	2101      	movs	r1, #1
    325e:	e003      	b.n	3268 <usb_handle_standard_request+0x284>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    3260:	8861      	ldrh	r1, [r4, #2]
    3262:	2900      	cmp	r1, #0
    3264:	f47f aef7 	bne.w	3056 <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    3268:	88a0      	ldrh	r0, [r4, #4]
    326a:	f7ff fd93 	bl	2d94 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    326e:	2800      	cmp	r0, #0
    3270:	f47f aee3 	bne.w	303a <usb_handle_standard_request+0x56>
    3274:	e6ef      	b.n	3056 <usb_handle_standard_request+0x72>
    3276:	bf00      	nop
    3278:	20000c70 	.word	0x20000c70
    327c:	20000d2a 	.word	0x20000d2a
		if (type == USB_DESC_CONFIGURATION) {
    3280:	2802      	cmp	r0, #2
		*data = p;
    3282:	6029      	str	r1, [r5, #0]
		if (type == USB_DESC_CONFIGURATION) {
    3284:	f47f aef4 	bne.w	3070 <usb_handle_standard_request+0x8c>
			*len = (p[CONF_DESC_wTotalLength]) |
    3288:	884b      	ldrh	r3, [r1, #2]
		*len = 2;
    328a:	603b      	str	r3, [r7, #0]
		return true;
    328c:	e6d5      	b.n	303a <usb_handle_standard_request+0x56>
	if (usb_reqtype_is_to_host(setup)) {
    328e:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
    3292:	7862      	ldrb	r2, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    3294:	2800      	cmp	r0, #0
    3296:	f6bf af71 	bge.w	317c <usb_handle_standard_request+0x198>
		switch (setup->bRequest) {
    329a:	2a00      	cmp	r2, #0
    329c:	f43f af66 	beq.w	316c <usb_handle_standard_request+0x188>
    32a0:	2a0a      	cmp	r2, #10
    32a2:	f47f aed8 	bne.w	3056 <usb_handle_standard_request+0x72>
	while (p[DESC_bLength] != 0U) {
    32a6:	782a      	ldrb	r2, [r5, #0]
    32a8:	2a00      	cmp	r2, #0
    32aa:	f43f aed4 	beq.w	3056 <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    32ae:	7869      	ldrb	r1, [r5, #1]
    32b0:	2904      	cmp	r1, #4
    32b2:	f47f af61 	bne.w	3178 <usb_handle_standard_request+0x194>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    32b6:	78a9      	ldrb	r1, [r5, #2]
			if (cur_iface == setup->wIndex) {
    32b8:	428b      	cmp	r3, r1
    32ba:	f47f af5d 	bne.w	3178 <usb_handle_standard_request+0x194>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    32be:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    32c0:	bf96      	itet	ls
    32c2:	199b      	addls	r3, r3, r6
	return 0;
    32c4:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    32c6:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    32ca:	f88c 3000 	strb.w	r3, [ip]
    32ce:	e6d4      	b.n	307a <usb_handle_standard_request+0x96>

000032d0 <usb_data_to_host>:
{
    32d0:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    32d2:	4c13      	ldr	r4, [pc, #76]	; (3320 <usb_data_to_host+0x50>)
    32d4:	7d23      	ldrb	r3, [r4, #20]
    32d6:	b9cb      	cbnz	r3, 330c <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    32d8:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    32da:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    32dc:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    32de:	ab01      	add	r3, sp, #4
    32e0:	2080      	movs	r0, #128	; 0x80
    32e2:	f008 fc70 	bl	bbc6 <usb_write>
		usb_dev.data_buf += chunk;
    32e6:	9a01      	ldr	r2, [sp, #4]
    32e8:	68a3      	ldr	r3, [r4, #8]
    32ea:	4413      	add	r3, r2
    32ec:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    32ee:	68e3      	ldr	r3, [r4, #12]
    32f0:	1a9b      	subs	r3, r3, r2
    32f2:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    32f4:	b943      	cbnz	r3, 3308 <usb_data_to_host+0x38>
    32f6:	b13a      	cbz	r2, 3308 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    32f8:	6923      	ldr	r3, [r4, #16]
    32fa:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    32fc:	429a      	cmp	r2, r3
    32fe:	dd03      	ble.n	3308 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    3300:	069b      	lsls	r3, r3, #26
    3302:	d101      	bne.n	3308 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    3304:	2301      	movs	r3, #1
    3306:	7523      	strb	r3, [r4, #20]
}
    3308:	b002      	add	sp, #8
    330a:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    330c:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    330e:	461a      	mov	r2, r3
    3310:	4619      	mov	r1, r3
    3312:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    3314:	7523      	strb	r3, [r4, #20]
}
    3316:	b002      	add	sp, #8
    3318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    331c:	f002 b940 	b.w	55a0 <usb_dc_ep_write>
    3320:	20000c70 	.word	0x20000c70

00003324 <usb_handle_control_transfer>:
{
    3324:	b570      	push	{r4, r5, r6, lr}
    3326:	b08a      	sub	sp, #40	; 0x28
	uint32_t chunk = 0U;
    3328:	2300      	movs	r3, #0
{
    332a:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    332c:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    332e:	4606      	mov	r6, r0
    3330:	2800      	cmp	r0, #0
    3332:	d168      	bne.n	3406 <usb_handle_control_transfer+0xe2>
    3334:	2900      	cmp	r1, #0
    3336:	d140      	bne.n	33ba <usb_handle_control_transfer+0x96>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    3338:	2208      	movs	r2, #8
    333a:	460b      	mov	r3, r1
    333c:	eb0d 0102 	add.w	r1, sp, r2
    3340:	f008 fd3c 	bl	bdbc <usb_dc_ep_read>
    3344:	2800      	cmp	r0, #0
    3346:	da04      	bge.n	3352 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    3348:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    334a:	f002 f889 	bl	5460 <usb_dc_ep_set_stall>
}
    334e:	b00a      	add	sp, #40	; 0x28
    3350:	bd70      	pop	{r4, r5, r6, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    3352:	4c32      	ldr	r4, [pc, #200]	; (341c <usb_handle_control_transfer+0xf8>)
    3354:	9a02      	ldr	r2, [sp, #8]
    3356:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    3358:	9a03      	ldr	r2, [sp, #12]
    335a:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    335c:	f104 0238 	add.w	r2, r4, #56	; 0x38
    3360:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
    3362:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    3366:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
    336a:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    336c:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
    336e:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
    3372:	db15      	blt.n	33a0 <usb_handle_control_transfer+0x7c>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    3374:	2b80      	cmp	r3, #128	; 0x80
    3376:	d90f      	bls.n	3398 <usb_handle_control_transfer+0x74>
				LOG_ERR("Request buffer too small");
    3378:	4b29      	ldr	r3, [pc, #164]	; (3420 <usb_handle_control_transfer+0xfc>)
    337a:	9309      	str	r3, [sp, #36]	; 0x24
    337c:	2302      	movs	r3, #2
    337e:	9308      	str	r3, [sp, #32]
    3380:	4828      	ldr	r0, [pc, #160]	; (3424 <usb_handle_control_transfer+0x100>)
    3382:	462b      	mov	r3, r5
    3384:	aa08      	add	r2, sp, #32
    3386:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    338a:	f7fe ffd5 	bl	2338 <z_impl_z_log_msg_static_create>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    338e:	2080      	movs	r0, #128	; 0x80
    3390:	f002 f866 	bl	5460 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    3394:	4628      	mov	r0, r5
    3396:	e7d8      	b.n	334a <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    3398:	b113      	cbz	r3, 33a0 <usb_handle_control_transfer+0x7c>
				usb_dev.data_buf_residue = setup->wLength;
    339a:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    339e:	e7d6      	b.n	334e <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    33a0:	f7ff fccc 	bl	2d3c <usb_handle_request.constprop.0>
    33a4:	2800      	cmp	r0, #0
    33a6:	d0cf      	beq.n	3348 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    33a8:	88e2      	ldrh	r2, [r4, #6]
    33aa:	6923      	ldr	r3, [r4, #16]
    33ac:	429a      	cmp	r2, r3
    33ae:	bfd4      	ite	le
    33b0:	60e2      	strle	r2, [r4, #12]
    33b2:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    33b4:	f7ff ff8c 	bl	32d0 <usb_data_to_host>
    33b8:	e7c9      	b.n	334e <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    33ba:	4c18      	ldr	r4, [pc, #96]	; (341c <usb_handle_control_transfer+0xf8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    33bc:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    33c0:	2a00      	cmp	r2, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    33c2:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
    33c4:	dc05      	bgt.n	33d2 <usb_handle_control_transfer+0xae>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    33c6:	4602      	mov	r2, r0
    33c8:	f008 fcf8 	bl	bdbc <usb_dc_ep_read>
    33cc:	2800      	cmp	r0, #0
    33ce:	dabe      	bge.n	334e <usb_handle_control_transfer+0x2a>
    33d0:	e7ba      	b.n	3348 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    33d2:	f008 fcf3 	bl	bdbc <usb_dc_ep_read>
    33d6:	2800      	cmp	r0, #0
    33d8:	da04      	bge.n	33e4 <usb_handle_control_transfer+0xc0>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    33da:	2080      	movs	r0, #128	; 0x80
    33dc:	f002 f840 	bl	5460 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    33e0:	4630      	mov	r0, r6
    33e2:	e7b2      	b.n	334a <usb_handle_control_transfer+0x26>
		usb_dev.data_buf += chunk;
    33e4:	9a01      	ldr	r2, [sp, #4]
    33e6:	68a3      	ldr	r3, [r4, #8]
    33e8:	4413      	add	r3, r2
    33ea:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    33ec:	68e3      	ldr	r3, [r4, #12]
    33ee:	1a9b      	subs	r3, r3, r2
    33f0:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    33f2:	2b00      	cmp	r3, #0
    33f4:	d1ab      	bne.n	334e <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    33f6:	f104 0338 	add.w	r3, r4, #56	; 0x38
    33fa:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    33fc:	f7ff fc9e 	bl	2d3c <usb_handle_request.constprop.0>
    3400:	2800      	cmp	r0, #0
    3402:	d1d7      	bne.n	33b4 <usb_handle_control_transfer+0x90>
    3404:	e7a0      	b.n	3348 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    3406:	2880      	cmp	r0, #128	; 0x80
    3408:	d1a1      	bne.n	334e <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    340a:	4b04      	ldr	r3, [pc, #16]	; (341c <usb_handle_control_transfer+0xf8>)
    340c:	68da      	ldr	r2, [r3, #12]
    340e:	2a00      	cmp	r2, #0
    3410:	d1d0      	bne.n	33b4 <usb_handle_control_transfer+0x90>
    3412:	7d1b      	ldrb	r3, [r3, #20]
    3414:	2b00      	cmp	r3, #0
    3416:	d1cd      	bne.n	33b4 <usb_handle_control_transfer+0x90>
    3418:	e799      	b.n	334e <usb_handle_control_transfer+0x2a>
    341a:	bf00      	nop
    341c:	20000c70 	.word	0x20000c70
    3420:	0000d845 	.word	0x0000d845
    3424:	0000d020 	.word	0x0000d020

00003428 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    3428:	4b05      	ldr	r3, [pc, #20]	; (3440 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    342a:	4a06      	ldr	r2, [pc, #24]	; (3444 <usb_set_config+0x1c>)
    342c:	629a      	str	r2, [r3, #40]	; 0x28
    342e:	4a06      	ldr	r2, [pc, #24]	; (3448 <usb_set_config+0x20>)
    3430:	62da      	str	r2, [r3, #44]	; 0x2c
    3432:	4a06      	ldr	r2, [pc, #24]	; (344c <usb_set_config+0x24>)
    3434:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    3436:	4a06      	ldr	r2, [pc, #24]	; (3450 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    3438:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    343a:	619a      	str	r2, [r3, #24]
}
    343c:	2000      	movs	r0, #0
    343e:	4770      	bx	lr
    3440:	20000c70 	.word	0x20000c70
    3444:	00002fe5 	.word	0x00002fe5
    3448:	00002c19 	.word	0x00002c19
    344c:	00002cb9 	.word	0x00002cb9
    3450:	00002c59 	.word	0x00002c59

00003454 <usb_device_init>:
{
    3454:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
    3456:	4b09      	ldr	r3, [pc, #36]	; (347c <usb_device_init+0x28>)
    3458:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    345c:	b954      	cbnz	r4, 3474 <usb_device_init+0x20>
	device_descriptor = usb_get_device_descriptor();
    345e:	f000 f8d9 	bl	3614 <usb_get_device_descriptor>
	if (!device_descriptor) {
    3462:	b918      	cbnz	r0, 346c <usb_device_init+0x18>
}
    3464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3468:	f7ff bc7e 	b.w	2d68 <usb_device_init.part.0>
	usb_set_config(device_descriptor);
    346c:	f7ff ffdc 	bl	3428 <usb_set_config>
	return 0;
    3470:	4620      	mov	r0, r4
}
    3472:	bd10      	pop	{r4, pc}
		return -EALREADY;
    3474:	f06f 0077 	mvn.w	r0, #119	; 0x77
    3478:	e7fb      	b.n	3472 <usb_device_init+0x1e>
    347a:	bf00      	nop
    347c:	20000c70 	.word	0x20000c70

00003480 <usb_enable>:
{
    3480:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3484:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
    3486:	4d3b      	ldr	r5, [pc, #236]	; (3574 <usb_enable+0xf4>)
	return z_impl_k_mutex_lock(mutex, timeout);
    3488:	483b      	ldr	r0, [pc, #236]	; (3578 <usb_enable+0xf8>)
    348a:	f04f 32ff 	mov.w	r2, #4294967295
    348e:	f04f 33ff 	mov.w	r3, #4294967295
    3492:	f006 fc07 	bl	9ca4 <z_impl_k_mutex_lock>
    3496:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    349a:	2e00      	cmp	r6, #0
    349c:	d167      	bne.n	356e <usb_enable+0xee>
	usb_dev.status_callback = cb;
    349e:	4837      	ldr	r0, [pc, #220]	; (357c <usb_enable+0xfc>)
	usb_dev.user_status_callback = status_cb;
    34a0:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    34a2:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    34a4:	f002 f9f0 	bl	5888 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    34a8:	f001 ff30 	bl	530c <usb_dc_attach>
	if (ret < 0) {
    34ac:	1e04      	subs	r4, r0, #0
    34ae:	db42      	blt.n	3536 <usb_enable+0xb6>
	ret = usb_transfer_init();
    34b0:	f000 fad8 	bl	3a64 <usb_transfer_init>
	if (ret < 0) {
    34b4:	1e04      	subs	r4, r0, #0
    34b6:	db3e      	blt.n	3536 <usb_enable+0xb6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    34b8:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    34ba:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    34bc:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    34c0:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    34c4:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    34c8:	f001 ff96 	bl	53f8 <usb_dc_ep_configure>
	if (ret < 0) {
    34cc:	1e04      	subs	r4, r0, #0
    34ce:	db32      	blt.n	3536 <usb_enable+0xb6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    34d0:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    34d2:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    34d4:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    34d8:	f001 ff8e 	bl	53f8 <usb_dc_ep_configure>
	if (ret < 0) {
    34dc:	1e04      	subs	r4, r0, #0
    34de:	db2a      	blt.n	3536 <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    34e0:	4927      	ldr	r1, [pc, #156]	; (3580 <usb_enable+0x100>)
    34e2:	4630      	mov	r0, r6
    34e4:	f002 f9bc 	bl	5860 <usb_dc_ep_set_callback>
	if (ret < 0) {
    34e8:	1e04      	subs	r4, r0, #0
    34ea:	db24      	blt.n	3536 <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    34ec:	4924      	ldr	r1, [pc, #144]	; (3580 <usb_enable+0x100>)
    34ee:	4638      	mov	r0, r7
    34f0:	f002 f9b6 	bl	5860 <usb_dc_ep_set_callback>
	if (ret < 0) {
    34f4:	1e04      	subs	r4, r0, #0
    34f6:	db1e      	blt.n	3536 <usb_enable+0xb6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    34f8:	4c22      	ldr	r4, [pc, #136]	; (3584 <usb_enable+0x104>)
    34fa:	f8df 808c 	ldr.w	r8, [pc, #140]	; 3588 <usb_enable+0x108>
    34fe:	4544      	cmp	r4, r8
    3500:	d320      	bcc.n	3544 <usb_enable+0xc4>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    3502:	2000      	movs	r0, #0
    3504:	f002 f822 	bl	554c <usb_dc_ep_enable>
	if (ret < 0) {
    3508:	1e04      	subs	r4, r0, #0
    350a:	db14      	blt.n	3536 <usb_enable+0xb6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    350c:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    3510:	2080      	movs	r0, #128	; 0x80
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    3512:	f043 0301 	orr.w	r3, r3, #1
    3516:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    351a:	f002 f817 	bl	554c <usb_dc_ep_enable>
	if (ret < 0) {
    351e:	1e04      	subs	r4, r0, #0
    3520:	db09      	blt.n	3536 <usb_enable+0xb6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
    3522:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    3526:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    352a:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	usb_dev.enabled = true;
    352e:	2301      	movs	r3, #1
    3530:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    3534:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    3536:	4810      	ldr	r0, [pc, #64]	; (3578 <usb_enable+0xf8>)
    3538:	f006 fc2e 	bl	9d98 <z_impl_k_mutex_unlock>
}
    353c:	4620      	mov	r0, r4
    353e:	b002      	add	sp, #8
    3540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    3544:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    3546:	2600      	movs	r6, #0
    3548:	7f22      	ldrb	r2, [r4, #28]
    354a:	b2f3      	uxtb	r3, r6
    354c:	429a      	cmp	r2, r3
    354e:	d801      	bhi.n	3554 <usb_enable+0xd4>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3550:	3424      	adds	r4, #36	; 0x24
    3552:	e7d4      	b.n	34fe <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    3554:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    3558:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    355c:	7910      	ldrb	r0, [r2, #4]
    355e:	f002 f97f 	bl	5860 <usb_dc_ep_set_callback>
    3562:	3601      	adds	r6, #1
    3564:	2800      	cmp	r0, #0
    3566:	d0ef      	beq.n	3548 <usb_enable+0xc8>
    3568:	f04f 34ff 	mov.w	r4, #4294967295
    356c:	e7e3      	b.n	3536 <usb_enable+0xb6>
		ret = -EALREADY;
    356e:	f06f 0477 	mvn.w	r4, #119	; 0x77
    3572:	e7e0      	b.n	3536 <usb_enable+0xb6>
    3574:	20000c70 	.word	0x20000c70
    3578:	2000030c 	.word	0x2000030c
    357c:	00002e15 	.word	0x00002e15
    3580:	00003325 	.word	0x00003325
    3584:	200003d4 	.word	0x200003d4
    3588:	200003f8 	.word	0x200003f8

0000358c <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    358c:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    358e:	4b1f      	ldr	r3, [pc, #124]	; (360c <usb_update_sn_string_descriptor+0x80>)
{
    3590:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    3592:	aa05      	add	r2, sp, #20
    3594:	f103 0510 	add.w	r5, r3, #16
    3598:	6818      	ldr	r0, [r3, #0]
    359a:	6859      	ldr	r1, [r3, #4]
    359c:	4614      	mov	r4, r2
    359e:	c403      	stmia	r4!, {r0, r1}
    35a0:	3308      	adds	r3, #8
    35a2:	42ab      	cmp	r3, r5
    35a4:	4622      	mov	r2, r4
    35a6:	d1f7      	bne.n	3598 <usb_update_sn_string_descriptor+0xc>
    35a8:	781b      	ldrb	r3, [r3, #0]
    35aa:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    35ac:	2210      	movs	r2, #16
    35ae:	2100      	movs	r1, #0
    35b0:	a801      	add	r0, sp, #4
    35b2:	f008 fb93 	bl	bcdc <memset>
	memset(sn, 0, sizeof(sn));
    35b6:	2212      	movs	r2, #18
    35b8:	2100      	movs	r1, #0
    35ba:	4815      	ldr	r0, [pc, #84]	; (3610 <usb_update_sn_string_descriptor+0x84>)
    35bc:	f008 fb8e 	bl	bcdc <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    35c0:	2110      	movs	r1, #16
    35c2:	a801      	add	r0, sp, #4
    35c4:	f008 fcf4 	bl	bfb0 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    35c8:	2800      	cmp	r0, #0
    35ca:	dd1b      	ble.n	3604 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    35cc:	2808      	cmp	r0, #8
    35ce:	bfb8      	it	lt
    35d0:	2008      	movlt	r0, #8
    35d2:	3809      	subs	r0, #9
    35d4:	ab01      	add	r3, sp, #4
    35d6:	490e      	ldr	r1, [pc, #56]	; (3610 <usb_update_sn_string_descriptor+0x84>)
    35d8:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    35da:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    35dc:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    35e0:	ac0a      	add	r4, sp, #40	; 0x28
    35e2:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    35e6:	f003 030f 	and.w	r3, r3, #15
    35ea:	3328      	adds	r3, #40	; 0x28
    35ec:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
    35ee:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    35f0:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    35f4:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    35f8:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
    35fa:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    35fc:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
    35fe:	f101 0102 	add.w	r1, r1, #2
    3602:	d1eb      	bne.n	35dc <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    3604:	4802      	ldr	r0, [pc, #8]	; (3610 <usb_update_sn_string_descriptor+0x84>)
    3606:	b00b      	add	sp, #44	; 0x2c
    3608:	bd30      	pop	{r4, r5, pc}
    360a:	bf00      	nop
    360c:	0000d869 	.word	0x0000d869
    3610:	20001b69 	.word	0x20001b69

00003614 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
    3614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3618:	4c83      	ldr	r4, [pc, #524]	; (3828 <usb_get_device_descriptor+0x214>)
    361a:	b08b      	sub	sp, #44	; 0x2c
    361c:	af00      	add	r7, sp, #0
	uint8_t str_descr_idx = 0U;
    361e:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    3620:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    3624:	46b2      	mov	sl, r6
	struct usb_cfg_data *cfg_data = NULL;
    3626:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    3628:	46b0      	mov	r8, r6
	while (head->bLength != 0U) {
    362a:	7823      	ldrb	r3, [r4, #0]
    362c:	b943      	cbnz	r3, 3640 <usb_get_device_descriptor+0x2c>
	if ((head + 1) != __usb_descriptor_end) {
    362e:	4b7f      	ldr	r3, [pc, #508]	; (382c <usb_get_device_descriptor+0x218>)
    3630:	3402      	adds	r4, #2
    3632:	429c      	cmp	r4, r3
    3634:	d1f3      	bne.n	361e <usb_get_device_descriptor+0xa>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    3636:	487c      	ldr	r0, [pc, #496]	; (3828 <usb_get_device_descriptor+0x214>)
}
    3638:	372c      	adds	r7, #44	; 0x2c
    363a:	46bd      	mov	sp, r7
    363c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (head->bDescriptorType) {
    3640:	7863      	ldrb	r3, [r4, #1]
    3642:	2b05      	cmp	r3, #5
    3644:	d805      	bhi.n	3652 <usb_get_device_descriptor+0x3e>
    3646:	e8df f003 	tbb	[pc, r3]
    364a:	04a6      	.short	0x04a6
    364c:	3f07a603 	.word	0x3f07a603
    3650:	46a0      	mov	r8, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    3652:	7823      	ldrb	r3, [r4, #0]
    3654:	441c      	add	r4, r3
    3656:	e7e8      	b.n	362a <usb_get_device_descriptor+0x16>
			if (if_descr->bAlternateSetting) {
    3658:	78e3      	ldrb	r3, [r4, #3]
    365a:	2b00      	cmp	r3, #0
    365c:	d1f9      	bne.n	3652 <usb_get_device_descriptor+0x3e>
			if (if_descr->bInterfaceNumber == 0U) {
    365e:	78a3      	ldrb	r3, [r4, #2]
    3660:	b343      	cbz	r3, 36b4 <usb_get_device_descriptor+0xa0>
			numof_ifaces++;
    3662:	f10a 0a01 	add.w	sl, sl, #1
    3666:	fa5f fa8a 	uxtb.w	sl, sl
			break;
    366a:	e7f2      	b.n	3652 <usb_get_device_descriptor+0x3e>
		if (cfg_data->interface_descriptor == iface) {
    366c:	686a      	ldr	r2, [r5, #4]
    366e:	4294      	cmp	r4, r2
    3670:	d023      	beq.n	36ba <usb_get_device_descriptor+0xa6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3672:	3524      	adds	r5, #36	; 0x24
    3674:	429d      	cmp	r5, r3
    3676:	d3f9      	bcc.n	366c <usb_get_device_descriptor+0x58>
					LOG_ERR("There is no usb_cfg_data "
    3678:	466d      	mov	r5, sp
    367a:	b088      	sub	sp, #32
    367c:	466a      	mov	r2, sp
    367e:	4b6c      	ldr	r3, [pc, #432]	; (3830 <usb_get_device_descriptor+0x21c>)
    3680:	e9c2 3405 	strd	r3, r4, [r2, #20]
    3684:	2303      	movs	r3, #3
    3686:	f842 3f10 	str.w	r3, [r2, #16]!
    368a:	486a      	ldr	r0, [pc, #424]	; (3834 <usb_get_device_descriptor+0x220>)
    368c:	2300      	movs	r3, #0
    368e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3692:	f7fe fe51 	bl	2338 <z_impl_z_log_msg_static_create>
    3696:	46ad      	mov	sp, r5
		LOG_ERR("Failed to fixup USB descriptor");
    3698:	4b67      	ldr	r3, [pc, #412]	; (3838 <usb_get_device_descriptor+0x224>)
    369a:	627b      	str	r3, [r7, #36]	; 0x24
    369c:	2302      	movs	r3, #2
    369e:	623b      	str	r3, [r7, #32]
    36a0:	4864      	ldr	r0, [pc, #400]	; (3834 <usb_get_device_descriptor+0x220>)
    36a2:	2300      	movs	r3, #0
    36a4:	f107 0220 	add.w	r2, r7, #32
    36a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    36ac:	f7fe fe44 	bl	2338 <z_impl_z_log_msg_static_create>
		return NULL;
    36b0:	2000      	movs	r0, #0
    36b2:	e7c1      	b.n	3638 <usb_get_device_descriptor+0x24>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    36b4:	4d61      	ldr	r5, [pc, #388]	; (383c <usb_get_device_descriptor+0x228>)
    36b6:	4b62      	ldr	r3, [pc, #392]	; (3840 <usb_get_device_descriptor+0x22c>)
    36b8:	e7dc      	b.n	3674 <usb_get_device_descriptor+0x60>
				if (cfg_data->interface_config) {
    36ba:	68ab      	ldr	r3, [r5, #8]
    36bc:	2b00      	cmp	r3, #0
    36be:	d0d0      	beq.n	3662 <usb_get_device_descriptor+0x4e>
					cfg_data->interface_config(head,
    36c0:	4651      	mov	r1, sl
    36c2:	4620      	mov	r0, r4
    36c4:	4798      	blx	r3
    36c6:	e7cc      	b.n	3662 <usb_get_device_descriptor+0x4e>
			if (!cfg_data) {
    36c8:	2d00      	cmp	r5, #0
    36ca:	d162      	bne.n	3792 <usb_get_device_descriptor+0x17e>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    36cc:	4b5d      	ldr	r3, [pc, #372]	; (3844 <usb_get_device_descriptor+0x230>)
				LOG_ERR("Failed to validate endpoints");
    36ce:	627b      	str	r3, [r7, #36]	; 0x24
    36d0:	2302      	movs	r3, #2
    36d2:	623b      	str	r3, [r7, #32]
    36d4:	4857      	ldr	r0, [pc, #348]	; (3834 <usb_get_device_descriptor+0x220>)
    36d6:	2300      	movs	r3, #0
    36d8:	f107 0220 	add.w	r2, r7, #32
    36dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    36e0:	f7fe fe2a 	bl	2338 <z_impl_z_log_msg_static_create>
				return -1;
    36e4:	e7d8      	b.n	3698 <usb_get_device_descriptor+0x84>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    36e6:	6a29      	ldr	r1, [r5, #32]
    36e8:	78a0      	ldrb	r0, [r4, #2]
    36ea:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    36ee:	790b      	ldrb	r3, [r1, #4]
    36f0:	4298      	cmp	r0, r3
    36f2:	d005      	beq.n	3700 <usb_get_device_descriptor+0xec>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    36f4:	3201      	adds	r2, #1
    36f6:	7f2b      	ldrb	r3, [r5, #28]
    36f8:	429a      	cmp	r2, r3
    36fa:	d3f4      	bcc.n	36e6 <usb_get_device_descriptor+0xd2>
				LOG_ERR("Failed to validate endpoints");
    36fc:	4b52      	ldr	r3, [pc, #328]	; (3848 <usb_get_device_descriptor+0x234>)
    36fe:	e7e6      	b.n	36ce <usb_get_device_descriptor+0xba>
    3700:	f04f 0901 	mov.w	r9, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    3704:	78e0      	ldrb	r0, [r4, #3]
    3706:	f000 0003 	and.w	r0, r0, #3
    370a:	7538      	strb	r0, [r7, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    370c:	7920      	ldrb	r0, [r4, #4]
    370e:	f894 c005 	ldrb.w	ip, [r4, #5]
    3712:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    3716:	8278      	strh	r0, [r7, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    3718:	f994 0002 	ldrsb.w	r0, [r4, #2]
    371c:	2800      	cmp	r0, #0
    371e:	fa5f f389 	uxtb.w	r3, r9
    3722:	da28      	bge.n	3776 <usb_get_device_descriptor+0x162>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    3724:	f109 0010 	add.w	r0, r9, #16
    3728:	f04f 0c01 	mov.w	ip, #1
    372c:	fa0c f000 	lsl.w	r0, ip, r0
    3730:	ea10 0f0b 	tst.w	r0, fp
    3734:	d127      	bne.n	3786 <usb_get_device_descriptor+0x172>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    3736:	f043 0080 	orr.w	r0, r3, #128	; 0x80
    373a:	7438      	strb	r0, [r7, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    373c:	f107 0010 	add.w	r0, r7, #16
    3740:	e9c7 3101 	strd	r3, r1, [r7, #4]
    3744:	60fa      	str	r2, [r7, #12]
    3746:	f001 fe25 	bl	5394 <usb_dc_ep_check_cap>
    374a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    374e:	687b      	ldr	r3, [r7, #4]
    3750:	b9c8      	cbnz	r0, 3786 <usb_get_device_descriptor+0x172>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    3752:	7c3a      	ldrb	r2, [r7, #16]
    3754:	70a2      	strb	r2, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    3756:	f012 0f80 	tst.w	r2, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    375a:	bf18      	it	ne
    375c:	3310      	addne	r3, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    375e:	710a      	strb	r2, [r1, #4]
					*requested_ep |= (1U << (idx + 16U));
    3760:	bf18      	it	ne
    3762:	b2db      	uxtbne	r3, r3
    3764:	f04f 0201 	mov.w	r2, #1
    3768:	bf14      	ite	ne
    376a:	409a      	lslne	r2, r3
					*requested_ep |= (1U << idx);
    376c:	fa02 f209 	lsleq.w	r2, r2, r9
    3770:	ea4b 0b02 	orr.w	fp, fp, r2
				return 0;
    3774:	e76d      	b.n	3652 <usb_get_device_descriptor+0x3e>
				if ((*requested_ep & (1U << (idx)))) {
    3776:	2001      	movs	r0, #1
    3778:	fa00 f009 	lsl.w	r0, r0, r9
    377c:	ea10 0f0b 	tst.w	r0, fp
    3780:	d101      	bne.n	3786 <usb_get_device_descriptor+0x172>
    3782:	4618      	mov	r0, r3
    3784:	e7d9      	b.n	373a <usb_get_device_descriptor+0x126>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    3786:	f109 0901 	add.w	r9, r9, #1
    378a:	f1b9 0f10 	cmp.w	r9, #16
    378e:	d1b9      	bne.n	3704 <usb_get_device_descriptor+0xf0>
    3790:	e7b0      	b.n	36f4 <usb_get_device_descriptor+0xe0>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    3792:	2200      	movs	r2, #0
    3794:	e7af      	b.n	36f6 <usb_get_device_descriptor+0xe2>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    3796:	2e03      	cmp	r6, #3
    3798:	d12a      	bne.n	37f0 <usb_get_device_descriptor+0x1dc>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    379a:	f7ff fef7 	bl	358c <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    379e:	4681      	mov	r9, r0
    37a0:	b1a8      	cbz	r0, 37ce <usb_get_device_descriptor+0x1ba>
	runtime_sn_len = strlen(runtime_sn);
    37a2:	f008 fa74 	bl	bc8e <strlen>
	if (!runtime_sn_len) {
    37a6:	60f8      	str	r0, [r7, #12]
    37a8:	b188      	cbz	r0, 37ce <usb_get_device_descriptor+0x1ba>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    37aa:	4828      	ldr	r0, [pc, #160]	; (384c <usb_get_device_descriptor+0x238>)
    37ac:	f008 fa6f 	bl	bc8e <strlen>
	if (runtime_sn_len != default_sn_len) {
    37b0:	68fa      	ldr	r2, [r7, #12]
    37b2:	4282      	cmp	r2, r0
    37b4:	d017      	beq.n	37e6 <usb_get_device_descriptor+0x1d2>
		LOG_ERR("the new SN descriptor doesn't have the same "
    37b6:	4b26      	ldr	r3, [pc, #152]	; (3850 <usb_get_device_descriptor+0x23c>)
    37b8:	627b      	str	r3, [r7, #36]	; 0x24
    37ba:	2302      	movs	r3, #2
    37bc:	623b      	str	r3, [r7, #32]
    37be:	481d      	ldr	r0, [pc, #116]	; (3834 <usb_get_device_descriptor+0x220>)
    37c0:	2300      	movs	r3, #0
    37c2:	f107 0220 	add.w	r2, r7, #32
    37c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    37ca:	f7fe fdb5 	bl	2338 <z_impl_z_log_msg_static_create>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    37ce:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    37d0:	f06f 0102 	mvn.w	r1, #2
    37d4:	18e2      	adds	r2, r4, r3
    37d6:	1b09      	subs	r1, r1, r4
    37d8:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    37dc:	42d1      	cmn	r1, r2
    37de:	d50e      	bpl.n	37fe <usb_get_device_descriptor+0x1ea>
			str_descr_idx += 1U;
    37e0:	3601      	adds	r6, #1
    37e2:	b2f6      	uxtb	r6, r6
			break;
    37e4:	e735      	b.n	3652 <usb_get_device_descriptor+0x3e>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    37e6:	4649      	mov	r1, r9
    37e8:	1ca0      	adds	r0, r4, #2
    37ea:	f008 fa6c 	bl	bcc6 <memcpy>
			if (str_descr_idx) {
    37ee:	e7ee      	b.n	37ce <usb_get_device_descriptor+0x1ba>
    37f0:	2e00      	cmp	r6, #0
    37f2:	d1ec      	bne.n	37ce <usb_get_device_descriptor+0x1ba>
				if (!cfg_descr) {
    37f4:	f1b8 0f00 	cmp.w	r8, #0
    37f8:	d10a      	bne.n	3810 <usb_get_device_descriptor+0x1fc>
					LOG_ERR("Incomplete device descriptor");
    37fa:	4b16      	ldr	r3, [pc, #88]	; (3854 <usb_get_device_descriptor+0x240>)
    37fc:	e767      	b.n	36ce <usb_get_device_descriptor+0xba>
		buf[i] = 0U;
    37fe:	f04f 0000 	mov.w	r0, #0
    3802:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    3806:	f813 0901 	ldrb.w	r0, [r3], #-1
    380a:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    380e:	e7e5      	b.n	37dc <usb_get_device_descriptor+0x1c8>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    3810:	eba4 0308 	sub.w	r3, r4, r8
    3814:	f888 3002 	strb.w	r3, [r8, #2]
	dst[1] = val >> 8;
    3818:	f3c3 2307 	ubfx	r3, r3, #8, #8
    381c:	f888 3003 	strb.w	r3, [r8, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    3820:	f888 a004 	strb.w	sl, [r8, #4]
    3824:	e7dc      	b.n	37e0 <usb_get_device_descriptor+0x1cc>
    3826:	bf00      	nop
    3828:	20000350 	.word	0x20000350
    382c:	200003d2 	.word	0x200003d2
    3830:	0000d87a 	.word	0x0000d87a
    3834:	0000d018 	.word	0x0000d018
    3838:	0000d960 	.word	0x0000d960
    383c:	200003d4 	.word	0x200003d4
    3840:	200003f8 	.word	0x200003f8
    3844:	0000d89a 	.word	0x0000d89a
    3848:	0000d8db 	.word	0x0000d8db
    384c:	0000d869 	.word	0x0000d869
    3850:	0000d8f8 	.word	0x0000d8f8
    3854:	0000d943 	.word	0x0000d943

00003858 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    3858:	b510      	push	{r4, lr}
    385a:	4b09      	ldr	r3, [pc, #36]	; (3880 <usb_ep_get_transfer+0x28>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    385c:	2100      	movs	r1, #0
    385e:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    3860:	781c      	ldrb	r4, [r3, #0]
    3862:	4284      	cmp	r4, r0
    3864:	d104      	bne.n	3870 <usb_ep_get_transfer+0x18>
    3866:	685c      	ldr	r4, [r3, #4]
    3868:	b114      	cbz	r4, 3870 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
    386a:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
    386e:	bd10      	pop	{r4, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3870:	3101      	adds	r1, #1
    3872:	2904      	cmp	r1, #4
    3874:	f103 0340 	add.w	r3, r3, #64	; 0x40
    3878:	d1f2      	bne.n	3860 <usb_ep_get_transfer+0x8>
	return NULL;
    387a:	2000      	movs	r0, #0
    387c:	e7f7      	b.n	386e <usb_ep_get_transfer+0x16>
    387e:	bf00      	nop
    3880:	20000d38 	.word	0x20000d38

00003884 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    3884:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3888:	b083      	sub	sp, #12
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    388a:	f850 3c28 	ldr.w	r3, [r0, #-40]
	ep = trans->ep;
    388e:	f810 5c2c 	ldrb.w	r5, [r0, #-44]
	if (trans->status != -EBUSY) {
    3892:	3310      	adds	r3, #16
{
    3894:	af00      	add	r7, sp, #0
    3896:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    3898:	d111      	bne.n	38be <usb_transfer_work+0x3a>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    389a:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    389c:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
    38a0:	f013 0602 	ands.w	r6, r3, #2
    38a4:	d04e      	beq.n	3944 <usb_transfer_work+0xc0>
		if (!trans->bsize) {
    38a6:	bb0a      	cbnz	r2, 38ec <usb_transfer_work+0x68>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    38a8:	f013 0304 	ands.w	r3, r3, #4
    38ac:	d104      	bne.n	38b8 <usb_transfer_work+0x34>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    38ae:	461a      	mov	r2, r3
    38b0:	4619      	mov	r1, r3
    38b2:	4628      	mov	r0, r5
    38b4:	f008 f987 	bl	bbc6 <usb_write>
			}
			trans->status = 0;
    38b8:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    38ba:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    38be:	f854 3c28 	ldr.w	r3, [r4, #-40]
    38c2:	3310      	adds	r3, #16
    38c4:	d00e      	beq.n	38e4 <usb_transfer_work+0x60>
    38c6:	f854 6c18 	ldr.w	r6, [r4, #-24]
    38ca:	b15e      	cbz	r6, 38e4 <usb_transfer_work+0x60>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    38cc:	f854 8c1c 	ldr.w	r8, [r4, #-28]
		void *priv = trans->priv;
    38d0:	f854 9c14 	ldr.w	r9, [r4, #-20]

		if (k_is_in_isr()) {
    38d4:	f008 ff51 	bl	c77a <k_is_in_isr>
    38d8:	2800      	cmp	r0, #0
    38da:	d06f      	beq.n	39bc <usb_transfer_work+0x138>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    38dc:	483d      	ldr	r0, [pc, #244]	; (39d4 <usb_transfer_work+0x150>)
    38de:	4621      	mov	r1, r4
    38e0:	f009 f849 	bl	c976 <k_work_submit_to_queue>
		k_sem_give(&trans->sem);

		/* Transfer completion callback */
		cb(ep, tsize, priv);
	}
}
    38e4:	370c      	adds	r7, #12
    38e6:	46bd      	mov	sp, r7
    38e8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    38ec:	f850 1c24 	ldr.w	r1, [r0, #-36]
    38f0:	1d3b      	adds	r3, r7, #4
    38f2:	4628      	mov	r0, r5
    38f4:	f008 f967 	bl	bbc6 <usb_write>
		if (ret) {
    38f8:	b198      	cbz	r0, 3922 <usb_transfer_work+0x9e>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    38fa:	466e      	mov	r6, sp
    38fc:	b088      	sub	sp, #32
    38fe:	466a      	mov	r2, sp
    3900:	4b35      	ldr	r3, [pc, #212]	; (39d8 <usb_transfer_work+0x154>)
    3902:	61d5      	str	r5, [r2, #28]
    3904:	e9c2 3005 	strd	r3, r0, [r2, #20]
    3908:	2304      	movs	r3, #4
    390a:	f842 3f10 	str.w	r3, [r2, #16]!
    390e:	4833      	ldr	r0, [pc, #204]	; (39dc <usb_transfer_work+0x158>)
    3910:	2300      	movs	r3, #0
    3912:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    3916:	f7fe fd0f 	bl	2338 <z_impl_z_log_msg_static_create>
    391a:	46b5      	mov	sp, r6
			trans->status = -EINVAL;
    391c:	f06f 0315 	mvn.w	r3, #21
    3920:	e7cb      	b.n	38ba <usb_transfer_work+0x36>
		trans->buffer += bytes;
    3922:	687a      	ldr	r2, [r7, #4]
    3924:	f854 3c24 	ldr.w	r3, [r4, #-36]
    3928:	4413      	add	r3, r2
    392a:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    392e:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3932:	1a9b      	subs	r3, r3, r2
    3934:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    3938:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    393c:	4413      	add	r3, r2
    393e:	f844 3c1c 	str.w	r3, [r4, #-28]
    3942:	e7bc      	b.n	38be <usb_transfer_work+0x3a>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    3944:	f850 1c24 	ldr.w	r1, [r0, #-36]
    3948:	1d3b      	adds	r3, r7, #4
    394a:	4628      	mov	r0, r5
    394c:	f001 feca 	bl	56e4 <usb_dc_ep_read_wait>
		if (ret) {
    3950:	b188      	cbz	r0, 3976 <usb_transfer_work+0xf2>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    3952:	46e8      	mov	r8, sp
    3954:	b088      	sub	sp, #32
    3956:	466a      	mov	r2, sp
    3958:	4b1f      	ldr	r3, [pc, #124]	; (39d8 <usb_transfer_work+0x154>)
    395a:	61d5      	str	r5, [r2, #28]
    395c:	e9c2 3005 	strd	r3, r0, [r2, #20]
    3960:	2304      	movs	r3, #4
    3962:	f842 3f10 	str.w	r3, [r2, #16]!
    3966:	481d      	ldr	r0, [pc, #116]	; (39dc <usb_transfer_work+0x158>)
    3968:	4633      	mov	r3, r6
    396a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    396e:	f7fe fce3 	bl	2338 <z_impl_z_log_msg_static_create>
    3972:	46c5      	mov	sp, r8
			trans->status = -EINVAL;
    3974:	e7d2      	b.n	391c <usb_transfer_work+0x98>
		trans->buffer += bytes;
    3976:	687e      	ldr	r6, [r7, #4]
    3978:	f854 3c24 	ldr.w	r3, [r4, #-36]
    397c:	4433      	add	r3, r6
    397e:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    3982:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3986:	1b9b      	subs	r3, r3, r6
    3988:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    398c:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3990:	4433      	add	r3, r6
    3992:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    3996:	2e00      	cmp	r6, #0
    3998:	d08e      	beq.n	38b8 <usb_transfer_work+0x34>
    399a:	4628      	mov	r0, r5
    399c:	f001 ff7a 	bl	5894 <usb_dc_ep_mps>
    39a0:	fbb6 f3f0 	udiv	r3, r6, r0
    39a4:	fb03 6610 	mls	r6, r3, r0, r6
    39a8:	2e00      	cmp	r6, #0
    39aa:	d185      	bne.n	38b8 <usb_transfer_work+0x34>
    39ac:	f854 3c20 	ldr.w	r3, [r4, #-32]
    39b0:	2b00      	cmp	r3, #0
    39b2:	d081      	beq.n	38b8 <usb_transfer_work+0x34>
		usb_dc_ep_read_continue(ep);
    39b4:	4628      	mov	r0, r5
    39b6:	f001 fefb 	bl	57b0 <usb_dc_ep_read_continue>
    39ba:	e780      	b.n	38be <usb_transfer_work+0x3a>
		trans->cb = NULL;
    39bc:	f844 0c18 	str.w	r0, [r4, #-24]
	z_impl_k_sem_give(sem);
    39c0:	f1a4 0010 	sub.w	r0, r4, #16
    39c4:	f006 fa58 	bl	9e78 <z_impl_k_sem_give>
		cb(ep, tsize, priv);
    39c8:	464a      	mov	r2, r9
    39ca:	4641      	mov	r1, r8
    39cc:	4628      	mov	r0, r5
    39ce:	47b0      	blx	r6
    39d0:	e788      	b.n	38e4 <usb_transfer_work+0x60>
    39d2:	bf00      	nop
    39d4:	20000ae0 	.word	0x20000ae0
    39d8:	0000d98e 	.word	0x0000d98e
    39dc:	0000d038 	.word	0x0000d038

000039e0 <usb_cancel_transfer>:
	irq_unlock(key);
	return ret;
}

void usb_cancel_transfer(uint8_t ep)
{
    39e0:	b510      	push	{r4, lr}
	__asm__ volatile(
    39e2:	f04f 0340 	mov.w	r3, #64	; 0x40
    39e6:	f3ef 8411 	mrs	r4, BASEPRI
    39ea:	f383 8812 	msr	BASEPRI_MAX, r3
    39ee:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    39f2:	f7ff ff31 	bl	3858 <usb_ep_get_transfer>
	if (!trans) {
    39f6:	b150      	cbz	r0, 3a0e <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    39f8:	6843      	ldr	r3, [r0, #4]
    39fa:	3310      	adds	r3, #16
    39fc:	d107      	bne.n	3a0e <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    39fe:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    3a02:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3a04:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    3a08:	4803      	ldr	r0, [pc, #12]	; (3a18 <usb_cancel_transfer+0x38>)
    3a0a:	f008 ffb4 	bl	c976 <k_work_submit_to_queue>
	__asm__ volatile(
    3a0e:	f384 8811 	msr	BASEPRI, r4
    3a12:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    3a16:	bd10      	pop	{r4, pc}
    3a18:	20000ae0 	.word	0x20000ae0

00003a1c <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    3a1c:	b570      	push	{r4, r5, r6, lr}
    3a1e:	4c0f      	ldr	r4, [pc, #60]	; (3a5c <usb_cancel_transfers+0x40>)
    3a20:	2504      	movs	r5, #4
	__asm__ volatile(
    3a22:	f04f 0340 	mov.w	r3, #64	; 0x40
    3a26:	f3ef 8611 	mrs	r6, BASEPRI
    3a2a:	f383 8812 	msr	BASEPRI_MAX, r3
    3a2e:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
    3a32:	6863      	ldr	r3, [r4, #4]
    3a34:	3310      	adds	r3, #16
    3a36:	d107      	bne.n	3a48 <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
    3a38:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3a3c:	4808      	ldr	r0, [pc, #32]	; (3a60 <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
    3a3e:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3a40:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    3a44:	f008 ff97 	bl	c976 <k_work_submit_to_queue>
	__asm__ volatile(
    3a48:	f386 8811 	msr	BASEPRI, r6
    3a4c:	f3bf 8f6f 	isb	sy
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3a50:	3d01      	subs	r5, #1
    3a52:	f104 0440 	add.w	r4, r4, #64	; 0x40
    3a56:	d1e4      	bne.n	3a22 <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    3a58:	bd70      	pop	{r4, r5, r6, pc}
    3a5a:	bf00      	nop
    3a5c:	20000d38 	.word	0x20000d38
    3a60:	20000ae0 	.word	0x20000ae0

00003a64 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    3a64:	b570      	push	{r4, r5, r6, lr}
    3a66:	4c0a      	ldr	r4, [pc, #40]	; (3a90 <usb_transfer_init+0x2c>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    3a68:	4e0a      	ldr	r6, [pc, #40]	; (3a94 <usb_transfer_init+0x30>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3a6a:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    3a6c:	4631      	mov	r1, r6
    3a6e:	4620      	mov	r0, r4
    3a70:	f008 ff64 	bl	c93c <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    3a74:	2201      	movs	r2, #1
    3a76:	f1a4 0010 	sub.w	r0, r4, #16
    3a7a:	4611      	mov	r1, r2
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3a7c:	3501      	adds	r5, #1
    3a7e:	f008 ff20 	bl	c8c2 <z_impl_k_sem_init>
    3a82:	2d04      	cmp	r5, #4
    3a84:	f104 0440 	add.w	r4, r4, #64	; 0x40
    3a88:	d1f0      	bne.n	3a6c <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    3a8a:	2000      	movs	r0, #0
    3a8c:	bd70      	pop	{r4, r5, r6, pc}
    3a8e:	bf00      	nop
    3a90:	20000d64 	.word	0x20000d64
    3a94:	00003885 	.word	0x00003885

00003a98 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3a98:	4901      	ldr	r1, [pc, #4]	; (3aa0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3a9a:	2210      	movs	r2, #16
	str	r2, [r1]
    3a9c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3a9e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3aa0:	e000ed10 	.word	0xe000ed10

00003aa4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3aa4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3aa6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3aa8:	f380 8811 	msr	BASEPRI, r0
	isb
    3aac:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    3ab0:	f3bf 8f4f 	dsb	sy
    3ab4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3ab6:	b662      	cpsie	i
	isb
    3ab8:	f3bf 8f6f 	isb	sy

	bx	lr
    3abc:	4770      	bx	lr
    3abe:	bf00      	nop

00003ac0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3ac0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3ac2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3ac4:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    3ac8:	f3bf 8f4f 	dsb	sy
    3acc:	bf20      	wfe

	msr	BASEPRI, r0
    3ace:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3ad2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3ad4:	4770      	bx	lr
    3ad6:	bf00      	nop

00003ad8 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3adc:	4681      	mov	r9, r0
    3ade:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    3ae0:	460c      	mov	r4, r1
    3ae2:	2900      	cmp	r1, #0
    3ae4:	d04c      	beq.n	3b80 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3ae6:	466e      	mov	r6, sp
    3ae8:	b08a      	sub	sp, #40	; 0x28
    3aea:	e9d1 1200 	ldrd	r1, r2, [r1]
    3aee:	68a3      	ldr	r3, [r4, #8]
    3af0:	466d      	mov	r5, sp
    3af2:	4827      	ldr	r0, [pc, #156]	; (3b90 <z_arm_fatal_error+0xb8>)
    3af4:	46a8      	mov	r8, r5
    3af6:	f04f 0a05 	mov.w	sl, #5
    3afa:	e9c5 0105 	strd	r0, r1, [r5, #20]
    3afe:	e9c5 2307 	strd	r2, r3, [r5, #28]
    3b02:	f848 af10 	str.w	sl, [r8, #16]!
    3b06:	4823      	ldr	r0, [pc, #140]	; (3b94 <z_arm_fatal_error+0xbc>)
    3b08:	4642      	mov	r2, r8
    3b0a:	2300      	movs	r3, #0
    3b0c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    3b10:	f7fe fc12 	bl	2338 <z_impl_z_log_msg_static_create>
    3b14:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3b16:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    3b1a:	6963      	ldr	r3, [r4, #20]
    3b1c:	46ad      	mov	sp, r5
    3b1e:	481e      	ldr	r0, [pc, #120]	; (3b98 <z_arm_fatal_error+0xc0>)
    3b20:	f8c5 a010 	str.w	sl, [r5, #16]
    3b24:	e9c5 0105 	strd	r0, r1, [r5, #20]
    3b28:	e9c5 2307 	strd	r2, r3, [r5, #28]
    3b2c:	4819      	ldr	r0, [pc, #100]	; (3b94 <z_arm_fatal_error+0xbc>)
    3b2e:	2300      	movs	r3, #0
    3b30:	4642      	mov	r2, r8
    3b32:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    3b36:	f7fe fbff 	bl	2338 <z_impl_z_log_msg_static_create>
    3b3a:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    3b3c:	b088      	sub	sp, #32
    3b3e:	69e3      	ldr	r3, [r4, #28]
    3b40:	466d      	mov	r5, sp
    3b42:	4a16      	ldr	r2, [pc, #88]	; (3b9c <z_arm_fatal_error+0xc4>)
    3b44:	46a8      	mov	r8, r5
    3b46:	f04f 0a03 	mov.w	sl, #3
    3b4a:	e9c5 2305 	strd	r2, r3, [r5, #20]
    3b4e:	f848 af10 	str.w	sl, [r8, #16]!
    3b52:	4810      	ldr	r0, [pc, #64]	; (3b94 <z_arm_fatal_error+0xbc>)
    3b54:	2300      	movs	r3, #0
    3b56:	4642      	mov	r2, r8
    3b58:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3b5c:	f7fe fbec 	bl	2338 <z_impl_z_log_msg_static_create>
    3b60:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    3b62:	69a3      	ldr	r3, [r4, #24]
    3b64:	46ad      	mov	sp, r5
    3b66:	4a0e      	ldr	r2, [pc, #56]	; (3ba0 <z_arm_fatal_error+0xc8>)
    3b68:	f8c5 a010 	str.w	sl, [r5, #16]
    3b6c:	e9c5 2305 	strd	r2, r3, [r5, #20]
    3b70:	4808      	ldr	r0, [pc, #32]	; (3b94 <z_arm_fatal_error+0xbc>)
    3b72:	2300      	movs	r3, #0
    3b74:	4642      	mov	r2, r8
    3b76:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3b7a:	f7fe fbdd 	bl	2338 <z_impl_z_log_msg_static_create>
    3b7e:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    3b80:	4621      	mov	r1, r4
    3b82:	4648      	mov	r0, r9
    3b84:	f005 fe0a 	bl	979c <z_fatal_error>
}
    3b88:	46bd      	mov	sp, r7
    3b8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    3b8e:	bf00      	nop
    3b90:	0000d9b8 	.word	0x0000d9b8
    3b94:	0000cfd8 	.word	0x0000cfd8
    3b98:	0000d9e7 	.word	0x0000d9e7
    3b9c:	0000da16 	.word	0x0000da16
    3ba0:	0000da25 	.word	0x0000da25

00003ba4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    3ba4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3ba6:	2800      	cmp	r0, #0
    3ba8:	db07      	blt.n	3bba <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3baa:	4a04      	ldr	r2, [pc, #16]	; (3bbc <arch_irq_enable+0x18>)
    3bac:	0941      	lsrs	r1, r0, #5
    3bae:	2301      	movs	r3, #1
    3bb0:	f000 001f 	and.w	r0, r0, #31
    3bb4:	4083      	lsls	r3, r0
    3bb6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    3bba:	4770      	bx	lr
    3bbc:	e000e100 	.word	0xe000e100

00003bc0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    3bc0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    3bc2:	2800      	cmp	r0, #0
    3bc4:	db0c      	blt.n	3be0 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3bc6:	0943      	lsrs	r3, r0, #5
    3bc8:	4906      	ldr	r1, [pc, #24]	; (3be4 <arch_irq_disable+0x24>)
    3bca:	f000 001f 	and.w	r0, r0, #31
    3bce:	3320      	adds	r3, #32
    3bd0:	2201      	movs	r2, #1
    3bd2:	4082      	lsls	r2, r0
    3bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    3bd8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3bdc:	f3bf 8f6f 	isb	sy
}
    3be0:	4770      	bx	lr
    3be2:	bf00      	nop
    3be4:	e000e100 	.word	0xe000e100

00003be8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    3be8:	4b05      	ldr	r3, [pc, #20]	; (3c00 <arch_irq_is_enabled+0x18>)
    3bea:	0942      	lsrs	r2, r0, #5
    3bec:	f000 001f 	and.w	r0, r0, #31
    3bf0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    3bf4:	2301      	movs	r3, #1
    3bf6:	fa03 f000 	lsl.w	r0, r3, r0
}
    3bfa:	4010      	ands	r0, r2
    3bfc:	4770      	bx	lr
    3bfe:	bf00      	nop
    3c00:	e000e100 	.word	0xe000e100

00003c04 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    3c04:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
    3c06:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
    3c08:	bf54      	ite	pl
    3c0a:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
    3c0c:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    3c0e:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c10:	bfac      	ite	ge
    3c12:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c16:	4a07      	ldrlt	r2, [pc, #28]	; (3c34 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c18:	ea4f 1341 	mov.w	r3, r1, lsl #5
    3c1c:	bfac      	ite	ge
    3c1e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c22:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c26:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c28:	bfb4      	ite	lt
    3c2a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    3c2c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
    3c30:	4770      	bx	lr
    3c32:	bf00      	nop
    3c34:	e000ed14 	.word	0xe000ed14

00003c38 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    3c38:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    3c3a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    3c3c:	4b04      	ldr	r3, [pc, #16]	; (3c50 <_arch_isr_direct_pm+0x18>)
    3c3e:	695a      	ldr	r2, [r3, #20]
    3c40:	b11a      	cbz	r2, 3c4a <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    3c42:	2200      	movs	r2, #0
    3c44:	615a      	str	r2, [r3, #20]
		z_pm_save_idle_exit();
    3c46:	f008 fda5 	bl	c794 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    3c4a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    3c4c:	bd08      	pop	{r3, pc}
    3c4e:	bf00      	nop
    3c50:	20001b0c 	.word	0x20001b0c

00003c54 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    3c54:	bf30      	wfi
    b z_SysNmiOnReset
    3c56:	f7ff bffd 	b.w	3c54 <z_SysNmiOnReset>
    3c5a:	bf00      	nop

00003c5c <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    3c5c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    3c5e:	4b08      	ldr	r3, [pc, #32]	; (3c80 <z_arm_prep_c+0x24>)
    3c60:	4a08      	ldr	r2, [pc, #32]	; (3c84 <z_arm_prep_c+0x28>)
    3c62:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    3c66:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    3c68:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3c6c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    3c70:	f005 fe50 	bl	9914 <z_bss_zero>
	z_data_copy();
    3c74:	f006 fe52 	bl	a91c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    3c78:	f000 fbaa 	bl	43d0 <z_arm_interrupt_init>
	z_cstart();
    3c7c:	f005 fe8e 	bl	999c <z_cstart>
    3c80:	00000000 	.word	0x00000000
    3c84:	e000ed00 	.word	0xe000ed00

00003c88 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    3c88:	4a09      	ldr	r2, [pc, #36]	; (3cb0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    3c8a:	490a      	ldr	r1, [pc, #40]	; (3cb4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    3c8c:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    3c8e:	6809      	ldr	r1, [r1, #0]
    3c90:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3c92:	4909      	ldr	r1, [pc, #36]	; (3cb8 <arch_swap+0x30>)
	_current->arch.basepri = key;
    3c94:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    3c96:	684b      	ldr	r3, [r1, #4]
    3c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    3c9c:	604b      	str	r3, [r1, #4]
    3c9e:	2300      	movs	r3, #0
    3ca0:	f383 8811 	msr	BASEPRI, r3
    3ca4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    3ca8:	6893      	ldr	r3, [r2, #8]
}
    3caa:	6f98      	ldr	r0, [r3, #120]	; 0x78
    3cac:	4770      	bx	lr
    3cae:	bf00      	nop
    3cb0:	20001b0c 	.word	0x20001b0c
    3cb4:	0000d354 	.word	0x0000d354
    3cb8:	e000ed00 	.word	0xe000ed00

00003cbc <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    3cbc:	4912      	ldr	r1, [pc, #72]	; (3d08 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    3cbe:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    3cc0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    3cc4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    3cc6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    3cca:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3cce:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
    3cd0:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    3cd4:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    3cd8:	4f0c      	ldr	r7, [pc, #48]	; (3d0c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    3cda:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    3cde:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    3ce0:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    3ce2:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    3ce4:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    3ce6:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    3ce8:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    3cea:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    3cee:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    3cf0:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    3cf2:	f000 fc09 	bl	4508 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    3cf6:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    3cfa:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    3cfe:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    3d02:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    3d06:	4770      	bx	lr
    ldr r1, =_kernel
    3d08:	20001b0c 	.word	0x20001b0c
    ldr v4, =_SCS_ICSR
    3d0c:	e000ed04 	.word	0xe000ed04

00003d10 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    3d10:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    3d14:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    3d16:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    3d1a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    3d1e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    3d20:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    3d24:	2902      	cmp	r1, #2
    beq _oops
    3d26:	d0ff      	beq.n	3d28 <_oops>

00003d28 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    3d28:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    3d2a:	f007 ff94 	bl	bc56 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    3d2e:	bd01      	pop	{r0, pc}

00003d30 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    3d30:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    3d34:	9b00      	ldr	r3, [sp, #0]
    3d36:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    3d3a:	490a      	ldr	r1, [pc, #40]	; (3d64 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    3d3c:	9b01      	ldr	r3, [sp, #4]
    3d3e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    3d42:	9b02      	ldr	r3, [sp, #8]
    3d44:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    3d48:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    3d4c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    3d50:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    3d54:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    3d58:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    3d5a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    3d5c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    3d5e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    3d60:	4770      	bx	lr
    3d62:	bf00      	nop
    3d64:	0000aee5 	.word	0x0000aee5

00003d68 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    3d68:	4a09      	ldr	r2, [pc, #36]	; (3d90 <z_check_thread_stack_fail+0x28>)
{
    3d6a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    3d6c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    3d6e:	b170      	cbz	r0, 3d8e <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    3d70:	f113 0f16 	cmn.w	r3, #22
    3d74:	6e40      	ldr	r0, [r0, #100]	; 0x64
    3d76:	d005      	beq.n	3d84 <z_check_thread_stack_fail+0x1c>
    3d78:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    3d7c:	429a      	cmp	r2, r3
    3d7e:	d805      	bhi.n	3d8c <z_check_thread_stack_fail+0x24>
    3d80:	4283      	cmp	r3, r0
    3d82:	d203      	bcs.n	3d8c <z_check_thread_stack_fail+0x24>
		return 0;
    3d84:	4281      	cmp	r1, r0
    3d86:	bf28      	it	cs
    3d88:	2000      	movcs	r0, #0
    3d8a:	4770      	bx	lr
    3d8c:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    3d8e:	4770      	bx	lr
    3d90:	20001b0c 	.word	0x20001b0c

00003d94 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    3d94:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    3d96:	4b09      	ldr	r3, [pc, #36]	; (3dbc <arch_switch_to_main_thread+0x28>)
{
    3d98:	460d      	mov	r5, r1
    3d9a:	4614      	mov	r4, r2
	_current = main_thread;
    3d9c:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    3d9e:	f000 fbb3 	bl	4508 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    3da2:	4620      	mov	r0, r4
    3da4:	f385 8809 	msr	PSP, r5
    3da8:	2100      	movs	r1, #0
    3daa:	b663      	cpsie	if
    3dac:	f381 8811 	msr	BASEPRI, r1
    3db0:	f3bf 8f6f 	isb	sy
    3db4:	2200      	movs	r2, #0
    3db6:	2300      	movs	r3, #0
    3db8:	f007 f894 	bl	aee4 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    3dbc:	20001b0c 	.word	0x20001b0c

00003dc0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    3dc0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    3dc2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    3dc4:	4a0b      	ldr	r2, [pc, #44]	; (3df4 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    3dc6:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    3dc8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    3dca:	bf1e      	ittt	ne
	movne	r1, #0
    3dcc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    3dce:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    3dd0:	f008 fce0 	blne	c794 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    3dd4:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    3dd6:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    3dda:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    3dde:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    3de2:	4905      	ldr	r1, [pc, #20]	; (3df8 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    3de4:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    3de6:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    3de8:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    3dea:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    3dee:	4903      	ldr	r1, [pc, #12]	; (3dfc <_isr_wrapper+0x3c>)
	bx r1
    3df0:	4708      	bx	r1
    3df2:	0000      	.short	0x0000
	ldr r2, =_kernel
    3df4:	20001b0c 	.word	0x20001b0c
	ldr r1, =_sw_isr_table
    3df8:	20000104 	.word	0x20000104
	ldr r1, =z_arm_int_exit
    3dfc:	00003e01 	.word	0x00003e01

00003e00 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    3e00:	4b04      	ldr	r3, [pc, #16]	; (3e14 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    3e02:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    3e04:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    3e06:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    3e08:	d003      	beq.n	3e12 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    3e0a:	4903      	ldr	r1, [pc, #12]	; (3e18 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    3e0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    3e10:	600a      	str	r2, [r1, #0]

00003e12 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    3e12:	4770      	bx	lr
	ldr r3, =_kernel
    3e14:	20001b0c 	.word	0x20001b0c
	ldr r1, =_SCS_ICSR
    3e18:	e000ed04 	.word	0xe000ed04

00003e1c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    3e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e20:	b086      	sub	sp, #24
    3e22:	4606      	mov	r6, r0
    3e24:	af00      	add	r7, sp, #0
    3e26:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    3e28:	4b3f      	ldr	r3, [pc, #252]	; (3f28 <bus_fault.constprop.0+0x10c>)
    3e2a:	617b      	str	r3, [r7, #20]
    3e2c:	2402      	movs	r4, #2
    3e2e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3e32:	483e      	ldr	r0, [pc, #248]	; (3f2c <bus_fault.constprop.0+0x110>)
    3e34:	613c      	str	r4, [r7, #16]
    3e36:	f107 0210 	add.w	r2, r7, #16
    3e3a:	f007 ff1b 	bl	bc74 <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    3e3e:	4b3c      	ldr	r3, [pc, #240]	; (3f30 <bus_fault.constprop.0+0x114>)
    3e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e42:	04d9      	lsls	r1, r3, #19
    3e44:	d56d      	bpl.n	3f22 <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    3e46:	4b3b      	ldr	r3, [pc, #236]	; (3f34 <bus_fault.constprop.0+0x118>)
    3e48:	4838      	ldr	r0, [pc, #224]	; (3f2c <bus_fault.constprop.0+0x110>)
    3e4a:	e9c7 4304 	strd	r4, r3, [r7, #16]
    3e4e:	f107 0210 	add.w	r2, r7, #16
    3e52:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3e56:	f007 ff0d 	bl	bc74 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    3e5a:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    3e5c:	4b34      	ldr	r3, [pc, #208]	; (3f30 <bus_fault.constprop.0+0x114>)
    3e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3e60:	051a      	lsls	r2, r3, #20
    3e62:	d50b      	bpl.n	3e7c <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    3e64:	4b34      	ldr	r3, [pc, #208]	; (3f38 <bus_fault.constprop.0+0x11c>)
    3e66:	617b      	str	r3, [r7, #20]
    3e68:	2302      	movs	r3, #2
    3e6a:	4830      	ldr	r0, [pc, #192]	; (3f2c <bus_fault.constprop.0+0x110>)
    3e6c:	613b      	str	r3, [r7, #16]
    3e6e:	f107 0210 	add.w	r2, r7, #16
    3e72:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3e76:	f007 fefd 	bl	bc74 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    3e7a:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    3e7c:	4c2c      	ldr	r4, [pc, #176]	; (3f30 <bus_fault.constprop.0+0x114>)
    3e7e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3e80:	059b      	lsls	r3, r3, #22
    3e82:	d523      	bpl.n	3ecc <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    3e84:	46e8      	mov	r8, sp
    3e86:	4b2d      	ldr	r3, [pc, #180]	; (3f3c <bus_fault.constprop.0+0x120>)
    3e88:	617b      	str	r3, [r7, #20]
    3e8a:	2302      	movs	r3, #2
    3e8c:	613b      	str	r3, [r7, #16]
    3e8e:	f107 0210 	add.w	r2, r7, #16
    3e92:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3e96:	4825      	ldr	r0, [pc, #148]	; (3f2c <bus_fault.constprop.0+0x110>)
    3e98:	f007 feec 	bl	bc74 <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    3e9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    3e9e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    3ea0:	0411      	lsls	r1, r2, #16
    3ea2:	d512      	bpl.n	3eca <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    3ea4:	b088      	sub	sp, #32
    3ea6:	466a      	mov	r2, sp
    3ea8:	4925      	ldr	r1, [pc, #148]	; (3f40 <bus_fault.constprop.0+0x124>)
    3eaa:	4820      	ldr	r0, [pc, #128]	; (3f2c <bus_fault.constprop.0+0x110>)
    3eac:	e9c2 1305 	strd	r1, r3, [r2, #20]
    3eb0:	2303      	movs	r3, #3
    3eb2:	f842 3f10 	str.w	r3, [r2, #16]!
    3eb6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3eba:	f007 fedb 	bl	bc74 <z_log_msg_static_create.constprop.0>
    3ebe:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    3ec0:	b11e      	cbz	r6, 3eca <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    3ec2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3ec4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    3ec8:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    3eca:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    3ecc:	4b18      	ldr	r3, [pc, #96]	; (3f30 <bus_fault.constprop.0+0x114>)
    3ece:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ed0:	055a      	lsls	r2, r3, #21
    3ed2:	d50b      	bpl.n	3eec <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    3ed4:	4b1b      	ldr	r3, [pc, #108]	; (3f44 <bus_fault.constprop.0+0x128>)
    3ed6:	617b      	str	r3, [r7, #20]
    3ed8:	2302      	movs	r3, #2
    3eda:	4814      	ldr	r0, [pc, #80]	; (3f2c <bus_fault.constprop.0+0x110>)
    3edc:	613b      	str	r3, [r7, #16]
    3ede:	f107 0210 	add.w	r2, r7, #16
    3ee2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3ee6:	f007 fec5 	bl	bc74 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    3eea:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    3eec:	4b10      	ldr	r3, [pc, #64]	; (3f30 <bus_fault.constprop.0+0x114>)
    3eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ef0:	05db      	lsls	r3, r3, #23
    3ef2:	d50b      	bpl.n	3f0c <bus_fault.constprop.0+0xf0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    3ef4:	4b14      	ldr	r3, [pc, #80]	; (3f48 <bus_fault.constprop.0+0x12c>)
    3ef6:	617b      	str	r3, [r7, #20]
    3ef8:	2302      	movs	r3, #2
    3efa:	480c      	ldr	r0, [pc, #48]	; (3f2c <bus_fault.constprop.0+0x110>)
    3efc:	613b      	str	r3, [r7, #16]
    3efe:	f107 0210 	add.w	r2, r7, #16
    3f02:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3f06:	f007 feb5 	bl	bc74 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    3f0a:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3f0c:	4a08      	ldr	r2, [pc, #32]	; (3f30 <bus_fault.constprop.0+0x114>)
    3f0e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    3f10:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    3f14:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    3f16:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    3f18:	2300      	movs	r3, #0
    3f1a:	702b      	strb	r3, [r5, #0]
}
    3f1c:	46bd      	mov	sp, r7
    3f1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    3f22:	2016      	movs	r0, #22
    3f24:	e79a      	b.n	3e5c <bus_fault.constprop.0+0x40>
    3f26:	bf00      	nop
    3f28:	0000da53 	.word	0x0000da53
    3f2c:	0000cfd8 	.word	0x0000cfd8
    3f30:	e000ed00 	.word	0xe000ed00
    3f34:	0000da69 	.word	0x0000da69
    3f38:	0000da7a 	.word	0x0000da7a
    3f3c:	0000da8d 	.word	0x0000da8d
    3f40:	0000daa6 	.word	0x0000daa6
    3f44:	0000dabb 	.word	0x0000dabb
    3f48:	0000dad6 	.word	0x0000dad6

00003f4c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    3f4c:	b510      	push	{r4, lr}
    3f4e:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    3f50:	4b36      	ldr	r3, [pc, #216]	; (402c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x2c>)
    3f52:	4837      	ldr	r0, [pc, #220]	; (4030 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30>)
    3f54:	9305      	str	r3, [sp, #20]
    3f56:	aa04      	add	r2, sp, #16
    3f58:	2402      	movs	r4, #2
    3f5a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3f5e:	9404      	str	r4, [sp, #16]
    3f60:	f007 fe88 	bl	bc74 <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3f64:	4b33      	ldr	r3, [pc, #204]	; (4034 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x34>)
    3f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f68:	019a      	lsls	r2, r3, #6
    3f6a:	d55d      	bpl.n	4028 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x28>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    3f6c:	4b32      	ldr	r3, [pc, #200]	; (4038 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x38>)
    3f6e:	4830      	ldr	r0, [pc, #192]	; (4030 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30>)
    3f70:	aa04      	add	r2, sp, #16
    3f72:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3f76:	e9cd 4304 	strd	r4, r3, [sp, #16]
    3f7a:	f007 fe7b 	bl	bc74 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    3f7e:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    3f80:	4b2c      	ldr	r3, [pc, #176]	; (4034 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x34>)
    3f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3f84:	01db      	lsls	r3, r3, #7
    3f86:	d50a      	bpl.n	3f9e <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    3f88:	4b2c      	ldr	r3, [pc, #176]	; (403c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x3c>)
    3f8a:	4829      	ldr	r0, [pc, #164]	; (4030 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30>)
    3f8c:	9305      	str	r3, [sp, #20]
    3f8e:	aa04      	add	r2, sp, #16
    3f90:	2302      	movs	r3, #2
    3f92:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3f96:	9304      	str	r3, [sp, #16]
    3f98:	f007 fe6c 	bl	bc74 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    3f9c:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3f9e:	4b25      	ldr	r3, [pc, #148]	; (4034 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x34>)
    3fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3fa2:	031c      	lsls	r4, r3, #12
    3fa4:	d50a      	bpl.n	3fbc <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    3fa6:	4b26      	ldr	r3, [pc, #152]	; (4040 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x40>)
    3fa8:	4821      	ldr	r0, [pc, #132]	; (4030 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30>)
    3faa:	9305      	str	r3, [sp, #20]
    3fac:	aa04      	add	r2, sp, #16
    3fae:	2302      	movs	r3, #2
    3fb0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3fb4:	9304      	str	r3, [sp, #16]
    3fb6:	f007 fe5d 	bl	bc74 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    3fba:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    3fbc:	4b1d      	ldr	r3, [pc, #116]	; (4034 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x34>)
    3fbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3fc0:	0359      	lsls	r1, r3, #13
    3fc2:	d50a      	bpl.n	3fda <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    3fc4:	4b1f      	ldr	r3, [pc, #124]	; (4044 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44>)
    3fc6:	481a      	ldr	r0, [pc, #104]	; (4030 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30>)
    3fc8:	9305      	str	r3, [sp, #20]
    3fca:	aa04      	add	r2, sp, #16
    3fcc:	2302      	movs	r3, #2
    3fce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3fd2:	9304      	str	r3, [sp, #16]
    3fd4:	f007 fe4e 	bl	bc74 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    3fd8:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    3fda:	4b16      	ldr	r3, [pc, #88]	; (4034 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x34>)
    3fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3fde:	039a      	lsls	r2, r3, #14
    3fe0:	d50a      	bpl.n	3ff8 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    3fe2:	4b19      	ldr	r3, [pc, #100]	; (4048 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x48>)
    3fe4:	4812      	ldr	r0, [pc, #72]	; (4030 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30>)
    3fe6:	9305      	str	r3, [sp, #20]
    3fe8:	aa04      	add	r2, sp, #16
    3fea:	2302      	movs	r3, #2
    3fec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3ff0:	9304      	str	r3, [sp, #16]
    3ff2:	f007 fe3f 	bl	bc74 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    3ff6:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    3ff8:	4b0e      	ldr	r3, [pc, #56]	; (4034 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x34>)
    3ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3ffc:	03db      	lsls	r3, r3, #15
    3ffe:	d50a      	bpl.n	4016 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x16>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    4000:	4b12      	ldr	r3, [pc, #72]	; (404c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x4c>)
    4002:	480b      	ldr	r0, [pc, #44]	; (4030 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x30>)
    4004:	9305      	str	r3, [sp, #20]
    4006:	aa04      	add	r2, sp, #16
    4008:	2302      	movs	r3, #2
    400a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    400e:	9304      	str	r3, [sp, #16]
    4010:	f007 fe30 	bl	bc74 <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    4014:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4016:	4a07      	ldr	r2, [pc, #28]	; (4034 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x34>)
    4018:	6a93      	ldr	r3, [r2, #40]	; 0x28
    401a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    401e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    4022:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    4024:	b006      	add	sp, #24
    4026:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    4028:	201d      	movs	r0, #29
    402a:	e7a9      	b.n	3f80 <usage_fault.constprop.0+0x34>
    402c:	0000daee 	.word	0x0000daee
    4030:	0000cfd8 	.word	0x0000cfd8
    4034:	e000ed00 	.word	0xe000ed00
    4038:	0000db06 	.word	0x0000db06
    403c:	0000db19 	.word	0x0000db19
    4040:	0000db33 	.word	0x0000db33
    4044:	0000db51 	.word	0x0000db51
    4048:	0000db76 	.word	0x0000db76
    404c:	0000db90 	.word	0x0000db90

00004050 <mem_manage_fault>:
{
    4050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4054:	b086      	sub	sp, #24
    4056:	4681      	mov	r9, r0
    4058:	af00      	add	r7, sp, #0
    405a:	468a      	mov	sl, r1
    405c:	4690      	mov	r8, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    405e:	4b45      	ldr	r3, [pc, #276]	; (4174 <mem_manage_fault+0x124>)
    4060:	4845      	ldr	r0, [pc, #276]	; (4178 <mem_manage_fault+0x128>)
    4062:	617b      	str	r3, [r7, #20]
    4064:	2402      	movs	r4, #2
    4066:	613c      	str	r4, [r7, #16]
    4068:	f107 0210 	add.w	r2, r7, #16
    406c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4070:	f007 fe00 	bl	bc74 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4074:	4b41      	ldr	r3, [pc, #260]	; (417c <mem_manage_fault+0x12c>)
    4076:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4078:	06d8      	lsls	r0, r3, #27
    407a:	d545      	bpl.n	4108 <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
    407c:	4b40      	ldr	r3, [pc, #256]	; (4180 <mem_manage_fault+0x130>)
    407e:	483e      	ldr	r0, [pc, #248]	; (4178 <mem_manage_fault+0x128>)
    4080:	e9c7 4304 	strd	r4, r3, [r7, #16]
    4084:	f107 0210 	add.w	r2, r7, #16
    4088:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_STACKING;
    408c:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
    408e:	f007 fdf1 	bl	bc74 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4092:	4b3a      	ldr	r3, [pc, #232]	; (417c <mem_manage_fault+0x12c>)
    4094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4096:	0719      	lsls	r1, r3, #28
    4098:	d50b      	bpl.n	40b2 <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
    409a:	4b3a      	ldr	r3, [pc, #232]	; (4184 <mem_manage_fault+0x134>)
    409c:	617b      	str	r3, [r7, #20]
    409e:	2302      	movs	r3, #2
    40a0:	4835      	ldr	r0, [pc, #212]	; (4178 <mem_manage_fault+0x128>)
    40a2:	613b      	str	r3, [r7, #16]
    40a4:	f107 0210 	add.w	r2, r7, #16
    40a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_UNSTACKING;
    40ac:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
    40ae:	f007 fde1 	bl	bc74 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    40b2:	4d32      	ldr	r5, [pc, #200]	; (417c <mem_manage_fault+0x12c>)
    40b4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    40b6:	079a      	lsls	r2, r3, #30
    40b8:	d528      	bpl.n	410c <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
    40ba:	466c      	mov	r4, sp
    40bc:	4b32      	ldr	r3, [pc, #200]	; (4188 <mem_manage_fault+0x138>)
    40be:	617b      	str	r3, [r7, #20]
    40c0:	2302      	movs	r3, #2
    40c2:	613b      	str	r3, [r7, #16]
    40c4:	482c      	ldr	r0, [pc, #176]	; (4178 <mem_manage_fault+0x128>)
    40c6:	f107 0210 	add.w	r2, r7, #16
    40ca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    40ce:	f007 fdd1 	bl	bc74 <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    40d2:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    40d4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    40d6:	061b      	lsls	r3, r3, #24
    40d8:	d549      	bpl.n	416e <mem_manage_fault+0x11e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    40da:	b088      	sub	sp, #32
    40dc:	466a      	mov	r2, sp
    40de:	4b2b      	ldr	r3, [pc, #172]	; (418c <mem_manage_fault+0x13c>)
    40e0:	4825      	ldr	r0, [pc, #148]	; (4178 <mem_manage_fault+0x128>)
    40e2:	e9c2 3605 	strd	r3, r6, [r2, #20]
    40e6:	2303      	movs	r3, #3
    40e8:	f842 3f10 	str.w	r3, [r2, #16]!
    40ec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    40f0:	f007 fdc0 	bl	bc74 <z_log_msg_static_create.constprop.0>
    40f4:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
    40f6:	f1ba 0f00 	cmp.w	sl, #0
    40fa:	d003      	beq.n	4104 <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    40fc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    40fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4102:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    4104:	2413      	movs	r4, #19
    4106:	e003      	b.n	4110 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    4108:	2410      	movs	r4, #16
    410a:	e7c2      	b.n	4092 <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
    410c:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4110:	4b1a      	ldr	r3, [pc, #104]	; (417c <mem_manage_fault+0x12c>)
    4112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4114:	07d8      	lsls	r0, r3, #31
    4116:	d50b      	bpl.n	4130 <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
    4118:	4b1d      	ldr	r3, [pc, #116]	; (4190 <mem_manage_fault+0x140>)
    411a:	617b      	str	r3, [r7, #20]
    411c:	2302      	movs	r3, #2
    411e:	4816      	ldr	r0, [pc, #88]	; (4178 <mem_manage_fault+0x128>)
    4120:	613b      	str	r3, [r7, #16]
    4122:	f107 0210 	add.w	r2, r7, #16
    4126:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    412a:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
    412c:	f007 fda2 	bl	bc74 <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4130:	4b12      	ldr	r3, [pc, #72]	; (417c <mem_manage_fault+0x12c>)
    4132:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4134:	06d1      	lsls	r1, r2, #27
    4136:	d402      	bmi.n	413e <mem_manage_fault+0xee>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    4138:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    413a:	0792      	lsls	r2, r2, #30
    413c:	d50a      	bpl.n	4154 <mem_manage_fault+0x104>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    413e:	685b      	ldr	r3, [r3, #4]
    4140:	051b      	lsls	r3, r3, #20
    4142:	d507      	bpl.n	4154 <mem_manage_fault+0x104>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    4144:	4649      	mov	r1, r9
    4146:	4630      	mov	r0, r6
    4148:	f7ff fe0e 	bl	3d68 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    414c:	b110      	cbz	r0, 4154 <mem_manage_fault+0x104>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    414e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    4152:	2402      	movs	r4, #2
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4154:	4a09      	ldr	r2, [pc, #36]	; (417c <mem_manage_fault+0x12c>)
    4156:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4158:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    415c:	6293      	str	r3, [r2, #40]	; 0x28
}
    415e:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
    4160:	2300      	movs	r3, #0
}
    4162:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    4164:	f888 3000 	strb.w	r3, [r8]
}
    4168:	46bd      	mov	sp, r7
    416a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
    416e:	f06f 0615 	mvn.w	r6, #21
    4172:	e7c7      	b.n	4104 <mem_manage_fault+0xb4>
    4174:	0000dbbb 	.word	0x0000dbbb
    4178:	0000cfd8 	.word	0x0000cfd8
    417c:	e000ed00 	.word	0xe000ed00
    4180:	0000dbd1 	.word	0x0000dbd1
    4184:	0000da7a 	.word	0x0000da7a
    4188:	0000dc04 	.word	0x0000dc04
    418c:	0000dc1c 	.word	0x0000dc1c
    4190:	0000dc32 	.word	0x0000dc32

00004194 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4194:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4198:	4b77      	ldr	r3, [pc, #476]	; (4378 <z_arm_fault+0x1e4>)
{
    419a:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    419c:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    41a0:	af00      	add	r7, sp, #0
    41a2:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    41a4:	f3c8 0408 	ubfx	r4, r8, #0, #9
    41a8:	2600      	movs	r6, #0
    41aa:	f386 8811 	msr	BASEPRI, r6
    41ae:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    41b2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    41b6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    41ba:	d10e      	bne.n	41da <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    41bc:	f002 030c 	and.w	r3, r2, #12
    41c0:	2b08      	cmp	r3, #8
    41c2:	d119      	bne.n	41f8 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    41c4:	4b6d      	ldr	r3, [pc, #436]	; (437c <z_arm_fault+0x1e8>)
    41c6:	61fb      	str	r3, [r7, #28]
    41c8:	2302      	movs	r3, #2
    41ca:	486d      	ldr	r0, [pc, #436]	; (4380 <z_arm_fault+0x1ec>)
    41cc:	61bb      	str	r3, [r7, #24]
    41ce:	f107 0218 	add.w	r2, r7, #24
    41d2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    41d6:	f007 fd4d 	bl	bc74 <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
    41da:	2600      	movs	r6, #0
		return NULL;
    41dc:	4635      	mov	r5, r6
	*recoverable = false;
    41de:	2300      	movs	r3, #0
    41e0:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    41e2:	1ee3      	subs	r3, r4, #3
    41e4:	2b09      	cmp	r3, #9
    41e6:	f200 80a6 	bhi.w	4336 <z_arm_fault+0x1a2>
    41ea:	e8df f003 	tbb	[pc, r3]
    41ee:	990a      	.short	0x990a
    41f0:	a4a4959c 	.word	0xa4a4959c
    41f4:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    41f8:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    41fa:	bf4c      	ite	mi
    41fc:	460d      	movmi	r5, r1
			*nested_exc = true;
    41fe:	2601      	movpl	r6, #1
    4200:	e7ed      	b.n	41de <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
    4202:	46e9      	mov	r9, sp
    4204:	4b5f      	ldr	r3, [pc, #380]	; (4384 <z_arm_fault+0x1f0>)
    4206:	61fb      	str	r3, [r7, #28]
    4208:	f04f 0802 	mov.w	r8, #2
    420c:	f107 0218 	add.w	r2, r7, #24
    4210:	485b      	ldr	r0, [pc, #364]	; (4380 <z_arm_fault+0x1ec>)
    4212:	f8c7 8018 	str.w	r8, [r7, #24]
    4216:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    421a:	f007 fd2b 	bl	bc74 <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    421e:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4220:	4c55      	ldr	r4, [pc, #340]	; (4378 <z_arm_fault+0x1e4>)
	*recoverable = false;
    4222:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4224:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4226:	079a      	lsls	r2, r3, #30
    4228:	d50b      	bpl.n	4242 <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
    422a:	4b57      	ldr	r3, [pc, #348]	; (4388 <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
    422c:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
    4230:	4853      	ldr	r0, [pc, #332]	; (4380 <z_arm_fault+0x1ec>)
    4232:	f107 0218 	add.w	r2, r7, #24
    4236:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    423a:	f007 fd1b 	bl	bc74 <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    423e:	2400      	movs	r4, #0
    4240:	e041      	b.n	42c6 <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4242:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4244:	2b00      	cmp	r3, #0
    4246:	da01      	bge.n	424c <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
    4248:	4b50      	ldr	r3, [pc, #320]	; (438c <z_arm_fault+0x1f8>)
    424a:	e7ef      	b.n	422c <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    424c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    424e:	005b      	lsls	r3, r3, #1
    4250:	d5f5      	bpl.n	423e <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
    4252:	4b4f      	ldr	r3, [pc, #316]	; (4390 <z_arm_fault+0x1fc>)
    4254:	484a      	ldr	r0, [pc, #296]	; (4380 <z_arm_fault+0x1ec>)
    4256:	e9c7 8306 	strd	r8, r3, [r7, #24]
    425a:	f107 0218 	add.w	r2, r7, #24
    425e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4262:	f007 fd07 	bl	bc74 <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    4266:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    4268:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    426a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    426e:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    4270:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4274:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    4278:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    427a:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    427e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    4282:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    4284:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4288:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    428c:	f64d 7302 	movw	r3, #57090	; 0xdf02
    4290:	429a      	cmp	r2, r3
    4292:	d008      	beq.n	42a6 <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    4294:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4296:	b2db      	uxtb	r3, r3
    4298:	b38b      	cbz	r3, 42fe <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    429a:	1dfa      	adds	r2, r7, #7
    429c:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    429e:	4628      	mov	r0, r5
    42a0:	f7ff fed6 	bl	4050 <mem_manage_fault>
    42a4:	e03a      	b.n	431c <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    42a6:	b088      	sub	sp, #32
    42a8:	682b      	ldr	r3, [r5, #0]
    42aa:	466a      	mov	r2, sp
    42ac:	4939      	ldr	r1, [pc, #228]	; (4394 <z_arm_fault+0x200>)
    42ae:	4834      	ldr	r0, [pc, #208]	; (4380 <z_arm_fault+0x1ec>)
    42b0:	e9c2 1305 	strd	r1, r3, [r2, #20]
    42b4:	2303      	movs	r3, #3
    42b6:	f842 3f10 	str.w	r3, [r2, #16]!
    42ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    42be:	f007 fcd9 	bl	bc74 <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
    42c2:	682c      	ldr	r4, [r5, #0]
    42c4:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    42c6:	79fb      	ldrb	r3, [r7, #7]
    42c8:	b9ab      	cbnz	r3, 42f6 <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    42ca:	2220      	movs	r2, #32
    42cc:	4629      	mov	r1, r5
    42ce:	f107 0008 	add.w	r0, r7, #8
    42d2:	f007 fcf8 	bl	bcc6 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    42d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    42d8:	2e00      	cmp	r6, #0
    42da:	d047      	beq.n	436c <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    42dc:	f3c3 0208 	ubfx	r2, r3, #0, #9
    42e0:	b922      	cbnz	r2, 42ec <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    42e2:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    42e6:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    42ea:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    42ec:	f107 0108 	add.w	r1, r7, #8
    42f0:	4620      	mov	r0, r4
    42f2:	f7ff fbf1 	bl	3ad8 <z_arm_fatal_error>
}
    42f6:	372c      	adds	r7, #44	; 0x2c
    42f8:	46bd      	mov	sp, r7
    42fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    42fe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4300:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    4304:	d004      	beq.n	4310 <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
    4306:	1df9      	adds	r1, r7, #7
    4308:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    430a:	f7ff fd87 	bl	3e1c <bus_fault.constprop.0>
    430e:	e005      	b.n	431c <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    4310:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    4316:	d392      	bcc.n	423e <z_arm_fault+0xaa>
			reason = usage_fault(esf);
    4318:	f7ff fe18 	bl	3f4c <usage_fault.constprop.0>
    431c:	4604      	mov	r4, r0
    431e:	e7d2      	b.n	42c6 <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
    4320:	1dfa      	adds	r2, r7, #7
    4322:	2100      	movs	r1, #0
    4324:	e7bb      	b.n	429e <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
    4326:	1df9      	adds	r1, r7, #7
    4328:	2000      	movs	r0, #0
    432a:	e7ee      	b.n	430a <z_arm_fault+0x176>
	PR_FAULT_INFO(
    432c:	4b1a      	ldr	r3, [pc, #104]	; (4398 <z_arm_fault+0x204>)
    432e:	61fb      	str	r3, [r7, #28]
    4330:	2302      	movs	r3, #2
    4332:	61bb      	str	r3, [r7, #24]
    4334:	e77c      	b.n	4230 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    4336:	4a19      	ldr	r2, [pc, #100]	; (439c <z_arm_fault+0x208>)
    4338:	4b19      	ldr	r3, [pc, #100]	; (43a0 <z_arm_fault+0x20c>)
    433a:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    433e:	46e8      	mov	r8, sp
    4340:	b08a      	sub	sp, #40	; 0x28
    4342:	bf18      	it	ne
    4344:	4613      	movne	r3, r2
    4346:	466a      	mov	r2, sp
    4348:	4916      	ldr	r1, [pc, #88]	; (43a4 <z_arm_fault+0x210>)
    434a:	480d      	ldr	r0, [pc, #52]	; (4380 <z_arm_fault+0x1ec>)
    434c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4350:	f44f 7300 	mov.w	r3, #512	; 0x200
    4354:	8413      	strh	r3, [r2, #32]
    4356:	3c10      	subs	r4, #16
    4358:	4b13      	ldr	r3, [pc, #76]	; (43a8 <z_arm_fault+0x214>)
    435a:	61d4      	str	r4, [r2, #28]
    435c:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    4360:	f842 3f10 	str.w	r3, [r2, #16]!
    4364:	f007 fc86 	bl	bc74 <z_log_msg_static_create.constprop.0>
    4368:	46c5      	mov	sp, r8
}
    436a:	e768      	b.n	423e <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    436c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4370:	f023 0301 	bic.w	r3, r3, #1
    4374:	e7b9      	b.n	42ea <z_arm_fault+0x156>
    4376:	bf00      	nop
    4378:	e000ed00 	.word	0xe000ed00
    437c:	0000dc7f 	.word	0x0000dc7f
    4380:	0000cfd8 	.word	0x0000cfd8
    4384:	0000dcaa 	.word	0x0000dcaa
    4388:	0000dcc1 	.word	0x0000dcc1
    438c:	0000dce2 	.word	0x0000dce2
    4390:	0000dcf0 	.word	0x0000dcf0
    4394:	0000dd0f 	.word	0x0000dd0f
    4398:	0000dd2b 	.word	0x0000dd2b
    439c:	0000dc66 	.word	0x0000dc66
    43a0:	0000dc51 	.word	0x0000dc51
    43a4:	0000dd4f 	.word	0x0000dd4f
    43a8:	01000004 	.word	0x01000004

000043ac <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    43ac:	4a02      	ldr	r2, [pc, #8]	; (43b8 <z_arm_fault_init+0xc>)
    43ae:	6953      	ldr	r3, [r2, #20]
    43b0:	f043 0310 	orr.w	r3, r3, #16
    43b4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    43b6:	4770      	bx	lr
    43b8:	e000ed00 	.word	0xe000ed00

000043bc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    43bc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    43c0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    43c4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    43c6:	4672      	mov	r2, lr
	bl z_arm_fault
    43c8:	f7ff fee4 	bl	4194 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    43cc:	bd01      	pop	{r0, pc}
    43ce:	bf00      	nop

000043d0 <z_arm_interrupt_init>:
    43d0:	4804      	ldr	r0, [pc, #16]	; (43e4 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    43d2:	2300      	movs	r3, #0
    43d4:	2140      	movs	r1, #64	; 0x40
    43d6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    43d8:	3301      	adds	r3, #1
    43da:	2b28      	cmp	r3, #40	; 0x28
    43dc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    43e0:	d1f9      	bne.n	43d6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    43e2:	4770      	bx	lr
    43e4:	e000e100 	.word	0xe000e100

000043e8 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    43e8:	2000      	movs	r0, #0
    msr CONTROL, r0
    43ea:	f380 8814 	msr	CONTROL, r0
    isb
    43ee:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    43f2:	f7fd fd09 	bl	1e08 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    43f6:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    43f8:	490d      	ldr	r1, [pc, #52]	; (4430 <__start+0x48>)
    str r0, [r1]
    43fa:	6008      	str	r0, [r1, #0]
    dsb
    43fc:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4400:	480c      	ldr	r0, [pc, #48]	; (4434 <__start+0x4c>)
    msr msp, r0
    4402:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    4406:	f000 f82b 	bl	4460 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    440a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
    440c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    4410:	4809      	ldr	r0, [pc, #36]	; (4438 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    4412:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    4416:	1840      	adds	r0, r0, r1
    msr PSP, r0
    4418:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    441c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    4420:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    4422:	4308      	orrs	r0, r1
    msr CONTROL, r0
    4424:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    4428:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    442c:	f7ff fc16 	bl	3c5c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    4430:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    4434:	200034c0 	.word	0x200034c0
    ldr r0, =z_interrupt_stacks
    4438:	20002740 	.word	0x20002740

0000443c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    443c:	4907      	ldr	r1, [pc, #28]	; (445c <z_arm_clear_arm_mpu_config+0x20>)
    443e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    4442:	2300      	movs	r3, #0
	int num_regions =
    4444:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    4448:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    444a:	4293      	cmp	r3, r2
    444c:	db00      	blt.n	4450 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    444e:	4770      	bx	lr
  MPU->RNR = rnr;
    4450:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    4454:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    4458:	3301      	adds	r3, #1
    445a:	e7f6      	b.n	444a <z_arm_clear_arm_mpu_config+0xe>
    445c:	e000ed00 	.word	0xe000ed00

00004460 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4460:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    4462:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4464:	2300      	movs	r3, #0
    4466:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    446a:	f7ff ffe7 	bl	443c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    446e:	4b14      	ldr	r3, [pc, #80]	; (44c0 <z_arm_init_arch_hw_at_boot+0x60>)
    4470:	f04f 32ff 	mov.w	r2, #4294967295
    4474:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    4478:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    447c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    4480:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    4484:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    4488:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    448c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    4490:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4494:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    4498:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    449c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    44a0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    44a4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    44a8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    44ac:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    44b0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    44b4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    44b6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    44ba:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    44be:	bd08      	pop	{r3, pc}
    44c0:	e000e100 	.word	0xe000e100

000044c4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    44c4:	4b08      	ldr	r3, [pc, #32]	; (44e8 <z_impl_k_thread_abort+0x24>)
    44c6:	689b      	ldr	r3, [r3, #8]
    44c8:	4283      	cmp	r3, r0
    44ca:	d10b      	bne.n	44e4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    44cc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    44d0:	b143      	cbz	r3, 44e4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    44d2:	4b06      	ldr	r3, [pc, #24]	; (44ec <z_impl_k_thread_abort+0x28>)
    44d4:	685a      	ldr	r2, [r3, #4]
    44d6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    44da:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    44dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    44de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    44e2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    44e4:	f006 b9a8 	b.w	a838 <z_thread_abort>
    44e8:	20001b0c 	.word	0x20001b0c
    44ec:	e000ed00 	.word	0xe000ed00

000044f0 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    44f0:	4b02      	ldr	r3, [pc, #8]	; (44fc <z_arm_configure_static_mpu_regions+0xc>)
    44f2:	4a03      	ldr	r2, [pc, #12]	; (4500 <z_arm_configure_static_mpu_regions+0x10>)
    44f4:	4803      	ldr	r0, [pc, #12]	; (4504 <z_arm_configure_static_mpu_regions+0x14>)
    44f6:	2101      	movs	r1, #1
    44f8:	f000 b892 	b.w	4620 <arm_core_mpu_configure_static_mpu_regions>
    44fc:	20008000 	.word	0x20008000
    4500:	20000000 	.word	0x20000000
    4504:	0000d12c 	.word	0x0000d12c

00004508 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    4508:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    450a:	4b05      	ldr	r3, [pc, #20]	; (4520 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    450c:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    450e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    4510:	4a04      	ldr	r2, [pc, #16]	; (4524 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    4512:	2140      	movs	r1, #64	; 0x40
    4514:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    4518:	4618      	mov	r0, r3
    451a:	2101      	movs	r1, #1
    451c:	f000 b88a 	b.w	4634 <arm_core_mpu_configure_dynamic_mpu_regions>
    4520:	20000e38 	.word	0x20000e38
    4524:	150b0000 	.word	0x150b0000

00004528 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    4528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    452c:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 45e4 <mpu_configure_regions+0xbc>
    4530:	469c      	mov	ip, r3
    4532:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
    4534:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    4536:	2300      	movs	r3, #0
    4538:	428b      	cmp	r3, r1
    453a:	da1a      	bge.n	4572 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    453c:	6844      	ldr	r4, [r0, #4]
    453e:	2c00      	cmp	r4, #0
    4540:	d04d      	beq.n	45de <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    4542:	f1bc 0f00 	cmp.w	ip, #0
    4546:	d01d      	beq.n	4584 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    4548:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    454a:	4234      	tst	r4, r6
    454c:	d015      	beq.n	457a <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    454e:	466c      	mov	r4, sp
    4550:	b088      	sub	sp, #32
    4552:	466a      	mov	r2, sp
    4554:	4924      	ldr	r1, [pc, #144]	; (45e8 <mpu_configure_regions+0xc0>)
    4556:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    455a:	2303      	movs	r3, #3
    455c:	f842 3f10 	str.w	r3, [r2, #16]!
    4560:	4822      	ldr	r0, [pc, #136]	; (45ec <mpu_configure_regions+0xc4>)
    4562:	2300      	movs	r3, #0
    4564:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4568:	f7fd fee6 	bl	2338 <z_impl_z_log_msg_static_create>
			return -EINVAL;
    456c:	f06f 0515 	mvn.w	r5, #21
    4570:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    4572:	4628      	mov	r0, r5
    4574:	46bd      	mov	sp, r7
    4576:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
    457a:	2c1f      	cmp	r4, #31
    457c:	d9e7      	bls.n	454e <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
    457e:	6802      	ldr	r2, [r0, #0]
		&&
    4580:	4216      	tst	r6, r2
    4582:	d1e4      	bne.n	454e <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    4584:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    4586:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4588:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    458a:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
    458e:	d914      	bls.n	45ba <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
    4590:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    4594:	d813      	bhi.n	45be <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    4596:	3c01      	subs	r4, #1
    4598:	fab4 f484 	clz	r4, r4
    459c:	f1c4 041f 	rsb	r4, r4, #31
    45a0:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    45a2:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    45a6:	ea46 0604 	orr.w	r6, r6, r4
    45aa:	d90a      	bls.n	45c2 <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    45ac:	466c      	mov	r4, sp
    45ae:	b088      	sub	sp, #32
    45b0:	466a      	mov	r2, sp
    45b2:	4b0f      	ldr	r3, [pc, #60]	; (45f0 <mpu_configure_regions+0xc8>)
    45b4:	e9c2 3505 	strd	r3, r5, [r2, #20]
    45b8:	e7cf      	b.n	455a <mpu_configure_regions+0x32>
		return REGION_32B;
    45ba:	2408      	movs	r4, #8
    45bc:	e7f1      	b.n	45a2 <mpu_configure_regions+0x7a>
		return REGION_4G;
    45be:	243e      	movs	r4, #62	; 0x3e
    45c0:	e7ef      	b.n	45a2 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    45c2:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    45c6:	432a      	orrs	r2, r5
    45c8:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    45cc:	f046 0601 	orr.w	r6, r6, #1
    45d0:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    45d4:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
    45d8:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    45da:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    45de:	3301      	adds	r3, #1
    45e0:	300c      	adds	r0, #12
    45e2:	e7a9      	b.n	4538 <mpu_configure_regions+0x10>
    45e4:	e000ed00 	.word	0xe000ed00
    45e8:	0000dd66 	.word	0x0000dd66
    45ec:	0000cfd0 	.word	0x0000cfd0
    45f0:	0000dd89 	.word	0x0000dd89

000045f4 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    45f4:	4b04      	ldr	r3, [pc, #16]	; (4608 <arm_core_mpu_enable+0x14>)
    45f6:	2205      	movs	r2, #5
    45f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    45fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4600:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4604:	4770      	bx	lr
    4606:	bf00      	nop
    4608:	e000ed00 	.word	0xe000ed00

0000460c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    460c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4610:	4b02      	ldr	r3, [pc, #8]	; (461c <arm_core_mpu_disable+0x10>)
    4612:	2200      	movs	r2, #0
    4614:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    4618:	4770      	bx	lr
    461a:	bf00      	nop
    461c:	e000ed00 	.word	0xe000ed00

00004620 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    4620:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    4622:	4c03      	ldr	r4, [pc, #12]	; (4630 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4624:	2301      	movs	r3, #1
    4626:	7822      	ldrb	r2, [r4, #0]
    4628:	f7ff ff7e 	bl	4528 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    462c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    462e:	bd10      	pop	{r4, pc}
    4630:	20001b7b 	.word	0x20001b7b

00004634 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    4634:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    4636:	4a09      	ldr	r2, [pc, #36]	; (465c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    4638:	2300      	movs	r3, #0
    463a:	7812      	ldrb	r2, [r2, #0]
    463c:	f7ff ff74 	bl	4528 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    4640:	f110 0f16 	cmn.w	r0, #22
    4644:	d003      	beq.n	464e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    4646:	4b06      	ldr	r3, [pc, #24]	; (4660 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    4648:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    464a:	2807      	cmp	r0, #7
    464c:	dd00      	ble.n	4650 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    464e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    4650:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    4654:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    4658:	3001      	adds	r0, #1
    465a:	e7f6      	b.n	464a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    465c:	20001b7b 	.word	0x20001b7b
    4660:	e000ed00 	.word	0xe000ed00

00004664 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4664:	4914      	ldr	r1, [pc, #80]	; (46b8 <z_arm_mpu_init+0x54>)
    4666:	6808      	ldr	r0, [r1, #0]
    4668:	2808      	cmp	r0, #8
{
    466a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    466c:	d821      	bhi.n	46b2 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    466e:	f7ff ffcd 	bl	460c <arm_core_mpu_disable>
    4672:	4c12      	ldr	r4, [pc, #72]	; (46bc <z_arm_mpu_init+0x58>)
    4674:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4676:	2200      	movs	r2, #0
    4678:	4290      	cmp	r0, r2
    467a:	f101 010c 	add.w	r1, r1, #12
    467e:	d105      	bne.n	468c <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4680:	4b0f      	ldr	r3, [pc, #60]	; (46c0 <z_arm_mpu_init+0x5c>)
    4682:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    4684:	f7ff ffb6 	bl	45f4 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    4688:	2000      	movs	r0, #0
}
    468a:	bd10      	pop	{r4, pc}
    468c:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4690:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    4694:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4698:	4313      	orrs	r3, r2
    469a:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    469e:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    46a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
    46a6:	f043 0301 	orr.w	r3, r3, #1
    46aa:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    46ae:	3201      	adds	r2, #1
    46b0:	e7e2      	b.n	4678 <z_arm_mpu_init+0x14>
		return -1;
    46b2:	f04f 30ff 	mov.w	r0, #4294967295
    46b6:	e7e8      	b.n	468a <z_arm_mpu_init+0x26>
    46b8:	0000d138 	.word	0x0000d138
    46bc:	e000ed00 	.word	0xe000ed00
    46c0:	20001b7b 	.word	0x20001b7b

000046c4 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    46c4:	4b01      	ldr	r3, [pc, #4]	; (46cc <__stdout_hook_install+0x8>)
    46c6:	6018      	str	r0, [r3, #0]
}
    46c8:	4770      	bx	lr
    46ca:	bf00      	nop
    46cc:	2000001c 	.word	0x2000001c

000046d0 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    46d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    46d4:	b2c0      	uxtb	r0, r0
    46d6:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    46da:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    46de:	4905      	ldr	r1, [pc, #20]	; (46f4 <sys_arch_reboot+0x24>)
    46e0:	4b05      	ldr	r3, [pc, #20]	; (46f8 <sys_arch_reboot+0x28>)
    46e2:	68ca      	ldr	r2, [r1, #12]
    46e4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    46e8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    46ea:	60cb      	str	r3, [r1, #12]
    46ec:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    46f0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    46f2:	e7fd      	b.n	46f0 <sys_arch_reboot+0x20>
    46f4:	e000ed00 	.word	0xe000ed00
    46f8:	05fa0004 	.word	0x05fa0004

000046fc <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    46fc:	b120      	cbz	r0, 4708 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    46fe:	4b03      	ldr	r3, [pc, #12]	; (470c <arch_busy_wait+0x10>)
    4700:	0180      	lsls	r0, r0, #6
    4702:	f043 0301 	orr.w	r3, r3, #1
    4706:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    4708:	4770      	bx	lr
    470a:	bf00      	nop
    470c:	0000d070 	.word	0x0000d070

00004710 <hid_status_cb.part.0>:
		break;
	}

}

static void hid_status_cb(struct usb_cfg_data *cfg,
    4710:	b580      	push	{r7, lr}
    4712:	af00      	add	r7, sp, #0

	LOG_DBG("cfg %p status %d", cfg, status);

	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
	if (common == NULL) {
		LOG_WRN("Device data not found for cfg %p", cfg);
    4714:	b088      	sub	sp, #32
    4716:	466a      	mov	r2, sp
    4718:	4b06      	ldr	r3, [pc, #24]	; (4734 <hid_status_cb.part.0+0x24>)
    471a:	e9c2 3005 	strd	r3, r0, [r2, #20]
    471e:	2303      	movs	r3, #3
    4720:	f842 3f10 	str.w	r3, [r2, #16]!
    4724:	4804      	ldr	r0, [pc, #16]	; (4738 <hid_status_cb.part.0+0x28>)
    4726:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    472a:	f007 fb07 	bl	bd3c <z_log_msg_static_create.constprop.0>
	}

	dev_data = CONTAINER_OF(common, struct hid_device_info, common);

	hid_do_status_cb(dev_data, status, param);
}
    472e:	46bd      	mov	sp, r7
    4730:	bd80      	pop	{r7, pc}
    4732:	bf00      	nop
    4734:	0000ddc2 	.word	0x0000ddc2
    4738:	0000d028 	.word	0x0000d028

0000473c <hid_status_cb>:
{
    473c:	b570      	push	{r4, r5, r6, lr}
    473e:	4606      	mov	r6, r0
    4740:	b086      	sub	sp, #24
    4742:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
    4744:	4601      	mov	r1, r0
    4746:	4835      	ldr	r0, [pc, #212]	; (481c <hid_status_cb+0xe0>)
    4748:	f007 fa55 	bl	bbf6 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    474c:	4604      	mov	r4, r0
    474e:	b928      	cbnz	r0, 475c <hid_status_cb+0x20>
    4750:	4630      	mov	r0, r6
}
    4752:	b006      	add	sp, #24
    4754:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4758:	f7ff bfda 	b.w	4710 <hid_status_cb.part.0>
	switch (status) {
    475c:	2d0a      	cmp	r5, #10
    475e:	d85a      	bhi.n	4816 <hid_status_cb+0xda>
    4760:	e8df f005 	tbb	[pc, r5]
    4764:	23211106 	.word	0x23211106
    4768:	59403432 	.word	0x59403432
    476c:	5959      	.short	0x5959
    476e:	30          	.byte	0x30
    476f:	00          	.byte	0x00
		LOG_INF("Device error");
    4770:	4b2b      	ldr	r3, [pc, #172]	; (4820 <hid_status_cb+0xe4>)
		LOG_INF("Unknown event");
    4772:	9305      	str	r3, [sp, #20]
    4774:	482b      	ldr	r0, [pc, #172]	; (4824 <hid_status_cb+0xe8>)
    4776:	2302      	movs	r3, #2
    4778:	aa04      	add	r2, sp, #16
    477a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    477e:	9304      	str	r3, [sp, #16]
    4780:	f007 fadc 	bl	bd3c <z_log_msg_static_create.constprop.0>
    4784:	e01e      	b.n	47c4 <hid_status_cb+0x88>
		LOG_INF("Device reset detected");
    4786:	4b28      	ldr	r3, [pc, #160]	; (4828 <hid_status_cb+0xec>)
		LOG_INF("Device disconnected");
    4788:	9305      	str	r3, [sp, #20]
    478a:	4826      	ldr	r0, [pc, #152]	; (4824 <hid_status_cb+0xe8>)
    478c:	2302      	movs	r3, #2
    478e:	aa04      	add	r2, sp, #16
    4790:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4794:	9304      	str	r3, [sp, #16]
    4796:	f007 fad1 	bl	bd3c <z_log_msg_static_create.constprop.0>
		dev_data->configured = false;
    479a:	2300      	movs	r3, #0
    479c:	f804 3c04 	strb.w	r3, [r4, #-4]
			dev_data->suspended = false;
    47a0:	f804 3c03 	strb.w	r3, [r4, #-3]
    47a4:	e00e      	b.n	47c4 <hid_status_cb+0x88>
		LOG_INF("Device connected");
    47a6:	4b21      	ldr	r3, [pc, #132]	; (482c <hid_status_cb+0xf0>)
    47a8:	e7e3      	b.n	4772 <hid_status_cb+0x36>
		LOG_INF("Device configured");
    47aa:	4b21      	ldr	r3, [pc, #132]	; (4830 <hid_status_cb+0xf4>)
    47ac:	9305      	str	r3, [sp, #20]
    47ae:	481d      	ldr	r0, [pc, #116]	; (4824 <hid_status_cb+0xe8>)
    47b0:	2302      	movs	r3, #2
    47b2:	aa04      	add	r2, sp, #16
    47b4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    47b8:	9304      	str	r3, [sp, #16]
    47ba:	f007 fabf 	bl	bd3c <z_log_msg_static_create.constprop.0>
		dev_data->configured = true;
    47be:	2301      	movs	r3, #1
    47c0:	f804 3c04 	strb.w	r3, [r4, #-4]
}
    47c4:	b006      	add	sp, #24
    47c6:	bd70      	pop	{r4, r5, r6, pc}
		LOG_INF("Device disconnected");
    47c8:	4b1a      	ldr	r3, [pc, #104]	; (4834 <hid_status_cb+0xf8>)
    47ca:	e7dd      	b.n	4788 <hid_status_cb+0x4c>
		LOG_INF("Device suspended");
    47cc:	4b1a      	ldr	r3, [pc, #104]	; (4838 <hid_status_cb+0xfc>)
    47ce:	9305      	str	r3, [sp, #20]
    47d0:	4814      	ldr	r0, [pc, #80]	; (4824 <hid_status_cb+0xe8>)
    47d2:	2302      	movs	r3, #2
    47d4:	aa04      	add	r2, sp, #16
    47d6:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    47da:	9304      	str	r3, [sp, #16]
    47dc:	f007 faae 	bl	bd3c <z_log_msg_static_create.constprop.0>
		dev_data->suspended = true;
    47e0:	2301      	movs	r3, #1
    47e2:	e7dd      	b.n	47a0 <hid_status_cb+0x64>
		LOG_INF("Device resumed");
    47e4:	4b15      	ldr	r3, [pc, #84]	; (483c <hid_status_cb+0x100>)
    47e6:	480f      	ldr	r0, [pc, #60]	; (4824 <hid_status_cb+0xe8>)
    47e8:	9305      	str	r3, [sp, #20]
    47ea:	2502      	movs	r5, #2
    47ec:	aa04      	add	r2, sp, #16
    47ee:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    47f2:	9504      	str	r5, [sp, #16]
    47f4:	f007 faa2 	bl	bd3c <z_log_msg_static_create.constprop.0>
		if (dev_data->suspended) {
    47f8:	f814 3c03 	ldrb.w	r3, [r4, #-3]
    47fc:	2b00      	cmp	r3, #0
    47fe:	d0e1      	beq.n	47c4 <hid_status_cb+0x88>
			LOG_INF("from suspend");
    4800:	4b0f      	ldr	r3, [pc, #60]	; (4840 <hid_status_cb+0x104>)
    4802:	4808      	ldr	r0, [pc, #32]	; (4824 <hid_status_cb+0xe8>)
    4804:	aa04      	add	r2, sp, #16
    4806:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    480a:	e9cd 5304 	strd	r5, r3, [sp, #16]
    480e:	f007 fa95 	bl	bd3c <z_log_msg_static_create.constprop.0>
			dev_data->suspended = false;
    4812:	2300      	movs	r3, #0
    4814:	e7c4      	b.n	47a0 <hid_status_cb+0x64>
		LOG_INF("Unknown event");
    4816:	4b0b      	ldr	r3, [pc, #44]	; (4844 <hid_status_cb+0x108>)
    4818:	e7ab      	b.n	4772 <hid_status_cb+0x36>
    481a:	bf00      	nop
    481c:	20000e5c 	.word	0x20000e5c
    4820:	0000dde3 	.word	0x0000dde3
    4824:	0000d028 	.word	0x0000d028
    4828:	0000ddf0 	.word	0x0000ddf0
    482c:	0000de06 	.word	0x0000de06
    4830:	0000de17 	.word	0x0000de17
    4834:	0000de29 	.word	0x0000de29
    4838:	0000de3d 	.word	0x0000de3d
    483c:	0000de4e 	.word	0x0000de4e
    4840:	0000de5d 	.word	0x0000de5d
    4844:	0000de6a 	.word	0x0000de6a

00004848 <hid_class_handle_req>:

static int hid_class_handle_req(struct usb_setup_packet *setup,
				int32_t *len, uint8_t **data)
{
    4848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    484c:	4604      	mov	r4, r0
    484e:	af00      	add	r7, sp, #0
    4850:	4688      	mov	r8, r1

	LOG_DBG("Class request:"
		"bRequest 0x%02x, bmRequestType 0x%02x len %d",
		setup->bRequest, setup->bmRequestType, *len);

	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
    4852:	7901      	ldrb	r1, [r0, #4]
    4854:	4826      	ldr	r0, [pc, #152]	; (48f0 <hid_class_handle_req+0xa8>)
{
    4856:	4691      	mov	r9, r2
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
    4858:	f007 f9d9 	bl	bc0e <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    485c:	4606      	mov	r6, r0
    485e:	b9a0      	cbnz	r0, 488a <hid_class_handle_req+0x42>
		LOG_WRN("Device data not found for interface %u",
    4860:	88a3      	ldrh	r3, [r4, #4]
    4862:	466c      	mov	r4, sp
    4864:	b088      	sub	sp, #32
    4866:	466a      	mov	r2, sp
    4868:	4922      	ldr	r1, [pc, #136]	; (48f4 <hid_class_handle_req+0xac>)
    486a:	4823      	ldr	r0, [pc, #140]	; (48f8 <hid_class_handle_req+0xb0>)
    486c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4870:	2303      	movs	r3, #3
    4872:	f842 3f10 	str.w	r3, [r2, #16]!
    4876:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    487a:	f007 fa5f 	bl	bd3c <z_log_msg_static_create.constprop.0>
			setup->wIndex);
		return -ENODEV;
    487e:	f06f 0012 	mvn.w	r0, #18
    4882:	46a5      	mov	sp, r4
			break;
		}
	}

	return -ENOTSUP;
}
    4884:	46bd      	mov	sp, r7
    4886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (usb_reqtype_is_to_host(setup)) {
    488a:	f994 3000 	ldrsb.w	r3, [r4]
	dev = common->dev;
    488e:	6800      	ldr	r0, [r0, #0]
		switch (setup->bRequest) {
    4890:	7865      	ldrb	r5, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    4892:	2b00      	cmp	r3, #0
    4894:	da1c      	bge.n	48d0 <hid_class_handle_req+0x88>
		switch (setup->bRequest) {
    4896:	2d01      	cmp	r5, #1
    4898:	d012      	beq.n	48c0 <hid_class_handle_req+0x78>
    489a:	1eab      	subs	r3, r5, #2
		switch (setup->bRequest) {
    489c:	2b01      	cmp	r3, #1
    489e:	d914      	bls.n	48ca <hid_class_handle_req+0x82>
			LOG_ERR("Unhandled request 0x%02x", setup->bRequest);
    48a0:	466c      	mov	r4, sp
    48a2:	b088      	sub	sp, #32
    48a4:	466a      	mov	r2, sp
    48a6:	4b15      	ldr	r3, [pc, #84]	; (48fc <hid_class_handle_req+0xb4>)
    48a8:	4813      	ldr	r0, [pc, #76]	; (48f8 <hid_class_handle_req+0xb0>)
    48aa:	e9c2 3505 	strd	r3, r5, [r2, #20]
    48ae:	2303      	movs	r3, #3
    48b0:	f842 3f10 	str.w	r3, [r2, #16]!
    48b4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    48b8:	f007 fa40 	bl	bd3c <z_log_msg_static_create.constprop.0>
    48bc:	46a5      	mov	sp, r4
    48be:	e004      	b.n	48ca <hid_class_handle_req+0x82>
			if (dev_data->ops && dev_data->ops->get_report) {
    48c0:	f856 3c08 	ldr.w	r3, [r6, #-8]
    48c4:	b10b      	cbz	r3, 48ca <hid_class_handle_req+0x82>
    48c6:	681d      	ldr	r5, [r3, #0]
    48c8:	b96d      	cbnz	r5, 48e6 <hid_class_handle_req+0x9e>
			return hid_on_get_idle(dev_data, setup, len, data);
    48ca:	f06f 0085 	mvn.w	r0, #133	; 0x85
    48ce:	e7d9      	b.n	4884 <hid_class_handle_req+0x3c>
		switch (setup->bRequest) {
    48d0:	2d09      	cmp	r5, #9
    48d2:	d002      	beq.n	48da <hid_class_handle_req+0x92>
    48d4:	f1a5 030a 	sub.w	r3, r5, #10
    48d8:	e7e0      	b.n	489c <hid_class_handle_req+0x54>
			if (dev_data->ops && dev_data->ops->set_report) {
    48da:	f856 3c08 	ldr.w	r3, [r6, #-8]
    48de:	2b00      	cmp	r3, #0
    48e0:	d0f3      	beq.n	48ca <hid_class_handle_req+0x82>
    48e2:	685d      	ldr	r5, [r3, #4]
    48e4:	e7f0      	b.n	48c8 <hid_class_handle_req+0x80>
				return dev_data->ops->set_report(dev, setup,
    48e6:	464b      	mov	r3, r9
    48e8:	4642      	mov	r2, r8
    48ea:	4621      	mov	r1, r4
    48ec:	47a8      	blx	r5
    48ee:	e7c9      	b.n	4884 <hid_class_handle_req+0x3c>
    48f0:	20000e5c 	.word	0x20000e5c
    48f4:	0000de78 	.word	0x0000de78
    48f8:	0000d028 	.word	0x0000d028
    48fc:	0000de9f 	.word	0x0000de9f

00004900 <hid_custom_handle_req>:

static int hid_custom_handle_req(struct usb_setup_packet *setup,
				 int32_t *len, uint8_t **data)
{
    4900:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	LOG_DBG("Standard request:"
		"bRequest 0x%02x, bmRequestType 0x%02x, len %d",
		setup->bRequest, setup->bmRequestType, setup->wLength);

	if (usb_reqtype_is_to_host(setup) &&
    4904:	f990 3000 	ldrsb.w	r3, [r0]
    4908:	2b00      	cmp	r3, #0
{
    490a:	af00      	add	r7, sp, #0
    490c:	4604      	mov	r4, r0
    490e:	460d      	mov	r5, r1
    4910:	4616      	mov	r6, r2
	if (usb_reqtype_is_to_host(setup) &&
    4912:	db04      	blt.n	491e <hid_custom_handle_req+0x1e>

		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
		if (common == NULL) {
			LOG_WRN("Device data not found for interface %u",
				iface_num);
			return -EINVAL;
    4914:	f06f 0015 	mvn.w	r0, #21

		return 0;
	}

	return -EINVAL;
}
    4918:	46bd      	mov	sp, r7
    491a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    setup->RequestType.recipient == USB_REQTYPE_RECIPIENT_INTERFACE &&
    491e:	8803      	ldrh	r3, [r0, #0]
    4920:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
    4924:	b29b      	uxth	r3, r3
    4926:	f240 6201 	movw	r2, #1537	; 0x601
    492a:	4293      	cmp	r3, r2
    492c:	d1f2      	bne.n	4914 <hid_custom_handle_req+0x14>
		uint8_t iface_num = (uint8_t)setup->wIndex;
    492e:	f890 9004 	ldrb.w	r9, [r0, #4]
		uint8_t value = (uint8_t)(setup->wValue >> 8);
    4932:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
    4936:	481b      	ldr	r0, [pc, #108]	; (49a4 <hid_custom_handle_req+0xa4>)
    4938:	4649      	mov	r1, r9
		uint8_t value = (uint8_t)(setup->wValue >> 8);
    493a:	ea4f 2818 	mov.w	r8, r8, lsr #8
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
    493e:	f007 f966 	bl	bc0e <usb_get_dev_data_by_iface>
		if (common == NULL) {
    4942:	b978      	cbnz	r0, 4964 <hid_custom_handle_req+0x64>
			LOG_WRN("Device data not found for interface %u",
    4944:	466c      	mov	r4, sp
    4946:	b088      	sub	sp, #32
    4948:	466a      	mov	r2, sp
    494a:	4b17      	ldr	r3, [pc, #92]	; (49a8 <hid_custom_handle_req+0xa8>)
    494c:	4817      	ldr	r0, [pc, #92]	; (49ac <hid_custom_handle_req+0xac>)
    494e:	e9c2 3905 	strd	r3, r9, [r2, #20]
    4952:	2303      	movs	r3, #3
    4954:	f842 3f10 	str.w	r3, [r2, #16]!
    4958:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    495c:	f007 f9ee 	bl	bd3c <z_log_msg_static_create.constprop.0>
    4960:	46a5      	mov	sp, r4
			return -EINVAL;
    4962:	e7d7      	b.n	4914 <hid_custom_handle_req+0x14>
		switch (value) {
    4964:	f1b8 0f21 	cmp.w	r8, #33	; 0x21
    4968:	d005      	beq.n	4976 <hid_custom_handle_req+0x76>
    496a:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
    496e:	d00f      	beq.n	4990 <hid_custom_handle_req+0x90>
    4970:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4974:	e7d0      	b.n	4918 <hid_custom_handle_req+0x18>
			cfg = common->dev->config;
    4976:	6803      	ldr	r3, [r0, #0]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
    4978:	88e1      	ldrh	r1, [r4, #6]
			hid_desc = cfg->interface_descriptor;
    497a:	685b      	ldr	r3, [r3, #4]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
    497c:	685b      	ldr	r3, [r3, #4]
    497e:	f813 2f09 	ldrb.w	r2, [r3, #9]!
    4982:	4291      	cmp	r1, r2
    4984:	bf94      	ite	ls
    4986:	6029      	strls	r1, [r5, #0]
    4988:	602a      	strhi	r2, [r5, #0]
			*data = (uint8_t *)dev_data->report_desc;
    498a:	6033      	str	r3, [r6, #0]
		return 0;
    498c:	2000      	movs	r0, #0
    498e:	e7c3      	b.n	4918 <hid_custom_handle_req+0x18>
			*len = MIN(setup->wLength, dev_data->report_size);
    4990:	88e3      	ldrh	r3, [r4, #6]
    4992:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    4996:	429a      	cmp	r2, r3
    4998:	bf94      	ite	ls
    499a:	602a      	strls	r2, [r5, #0]
    499c:	602b      	strhi	r3, [r5, #0]
			*data = (uint8_t *)dev_data->report_desc;
    499e:	f850 3c10 	ldr.w	r3, [r0, #-16]
			break;
    49a2:	e7f2      	b.n	498a <hid_custom_handle_req+0x8a>
    49a4:	20000e5c 	.word	0x20000e5c
    49a8:	0000de78 	.word	0x0000de78
    49ac:	0000d028 	.word	0x0000d028

000049b0 <hid_int_in.part.0>:

static void hid_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
    49b0:	b580      	push	{r7, lr}
    49b2:	af00      	add	r7, sp, #0
	struct hid_device_info *dev_data;
	struct usb_dev_data *common;

	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
	if (common == NULL) {
		LOG_WRN("Device data not found for endpoint %u", ep);
    49b4:	b088      	sub	sp, #32
    49b6:	466a      	mov	r2, sp
    49b8:	4b06      	ldr	r3, [pc, #24]	; (49d4 <hid_int_in.part.0+0x24>)
    49ba:	e9c2 3005 	strd	r3, r0, [r2, #20]
    49be:	2303      	movs	r3, #3
    49c0:	f842 3f10 	str.w	r3, [r2, #16]!
    49c4:	4804      	ldr	r0, [pc, #16]	; (49d8 <hid_int_in.part.0+0x28>)
    49c6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    49ca:	f007 f9b7 	bl	bd3c <z_log_msg_static_create.constprop.0>
	    dev_data->ops->int_in_ready == NULL) {
		return;
	}

	dev_data->ops->int_in_ready(common->dev);
}
    49ce:	46bd      	mov	sp, r7
    49d0:	bd80      	pop	{r7, pc}
    49d2:	bf00      	nop
    49d4:	0000deb8 	.word	0x0000deb8
    49d8:	0000d028 	.word	0x0000d028

000049dc <hid_int_in>:
{
    49dc:	b570      	push	{r4, r5, r6, lr}
    49de:	4604      	mov	r4, r0
    49e0:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
    49e2:	4601      	mov	r1, r0
    49e4:	480a      	ldr	r0, [pc, #40]	; (4a10 <hid_int_in+0x34>)
    49e6:	f007 f920 	bl	bc2a <usb_get_dev_data_by_ep>
	if (common == NULL) {
    49ea:	b920      	cbnz	r0, 49f6 <hid_int_in+0x1a>
    49ec:	4620      	mov	r0, r4
}
    49ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    49f2:	f7ff bfdd 	b.w	49b0 <hid_int_in.part.0>
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
    49f6:	2d02      	cmp	r5, #2
    49f8:	d108      	bne.n	4a0c <hid_int_in+0x30>
    49fa:	f850 3c08 	ldr.w	r3, [r0, #-8]
    49fe:	b12b      	cbz	r3, 4a0c <hid_int_in+0x30>
	    dev_data->ops->int_in_ready == NULL) {
    4a00:	691b      	ldr	r3, [r3, #16]
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
    4a02:	b11b      	cbz	r3, 4a0c <hid_int_in+0x30>
}
    4a04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	dev_data->ops->int_in_ready(common->dev);
    4a08:	6800      	ldr	r0, [r0, #0]
    4a0a:	4718      	bx	r3
}
    4a0c:	bd70      	pop	{r4, r5, r6, pc}
    4a0e:	bf00      	nop
    4a10:	20000e5c 	.word	0x20000e5c

00004a14 <usb_hid_register_device>:
	return 0;
}

void usb_hid_register_device(const struct device *dev, const uint8_t *desc,
			     size_t size, const struct hid_ops *ops)
{
    4a14:	b510      	push	{r4, lr}
	struct hid_device_info *dev_data = dev->data;
    4a16:	6904      	ldr	r4, [r0, #16]

	dev_data->report_desc = desc;
	dev_data->report_size = size;
    4a18:	e9c4 1200 	strd	r1, r2, [r4]

	dev_data->ops = ops;
    4a1c:	60a3      	str	r3, [r4, #8]
	parent->next = child;
    4a1e:	2300      	movs	r3, #0
    4a20:	6163      	str	r3, [r4, #20]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    4a22:	4b06      	ldr	r3, [pc, #24]	; (4a3c <usb_hid_register_device+0x28>)
	dev_data->common.dev = dev;
    4a24:	6120      	str	r0, [r4, #16]
    4a26:	6859      	ldr	r1, [r3, #4]

	sys_slist_append(&usb_hid_devlist, &dev_data->common.node);
    4a28:	f104 0214 	add.w	r2, r4, #20
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    4a2c:	b911      	cbnz	r1, 4a34 <usb_hid_register_device+0x20>
	list->head = node;
    4a2e:	e9c3 2200 	strd	r2, r2, [r3]

	LOG_DBG("Added dev_data %p dev %p to devlist %p", dev_data, dev,
		&usb_hid_devlist);
}
    4a32:	bd10      	pop	{r4, pc}
	parent->next = child;
    4a34:	600a      	str	r2, [r1, #0]
	list->tail = node;
    4a36:	605a      	str	r2, [r3, #4]
    4a38:	e7fb      	b.n	4a32 <usb_hid_register_device+0x1e>
    4a3a:	bf00      	nop
    4a3c:	20000e5c 	.word	0x20000e5c

00004a40 <hid_int_ep_write>:

int hid_int_ep_write(const struct device *dev, const uint8_t *data, uint32_t data_len,
		     uint32_t *bytes_ret)
{
    4a40:	b530      	push	{r4, r5, lr}
	const struct usb_cfg_data *cfg = dev->config;
    4a42:	6844      	ldr	r4, [r0, #4]
	struct hid_device_info *hid_dev_data = dev->data;
    4a44:	6900      	ldr	r0, [r0, #16]

	if (hid_dev_data->configured && !hid_dev_data->suspended) {
    4a46:	7b05      	ldrb	r5, [r0, #12]
{
    4a48:	b087      	sub	sp, #28
	if (hid_dev_data->configured && !hid_dev_data->suspended) {
    4a4a:	b145      	cbz	r5, 4a5e <hid_int_ep_write+0x1e>
    4a4c:	7b40      	ldrb	r0, [r0, #13]
    4a4e:	b930      	cbnz	r0, 4a5e <hid_int_ep_write+0x1e>
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
    4a50:	6a20      	ldr	r0, [r4, #32]
    4a52:	7900      	ldrb	r0, [r0, #4]
	} else {
		LOG_WRN("Device is not configured");
		return -EAGAIN;
	}

}
    4a54:	b007      	add	sp, #28
    4a56:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
    4a5a:	f007 b8b4 	b.w	bbc6 <usb_write>
		LOG_WRN("Device is not configured");
    4a5e:	4b07      	ldr	r3, [pc, #28]	; (4a7c <hid_int_ep_write+0x3c>)
    4a60:	9305      	str	r3, [sp, #20]
    4a62:	4807      	ldr	r0, [pc, #28]	; (4a80 <hid_int_ep_write+0x40>)
    4a64:	2302      	movs	r3, #2
    4a66:	aa04      	add	r2, sp, #16
    4a68:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    4a6c:	9304      	str	r3, [sp, #16]
    4a6e:	f007 f965 	bl	bd3c <z_log_msg_static_create.constprop.0>
}
    4a72:	f06f 000a 	mvn.w	r0, #10
    4a76:	b007      	add	sp, #28
    4a78:	bd30      	pop	{r4, r5, pc}
    4a7a:	bf00      	nop
    4a7c:	0000dede 	.word	0x0000dede
    4a80:	0000d028 	.word	0x0000d028

00004a84 <endpoint_ctx>:

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    4a84:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    4a86:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
    4a8a:	d512      	bpl.n	4ab2 <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    4a8c:	2b08      	cmp	r3, #8
    4a8e:	d105      	bne.n	4a9c <endpoint_ctx+0x18>

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4a90:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    4a92:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4a96:	d506      	bpl.n	4aa6 <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    4a98:	480e      	ldr	r0, [pc, #56]	; (4ad4 <endpoint_ctx+0x50>)
    4a9a:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
    4a9c:	f010 0f78 	tst.w	r0, #120	; 0x78
    4aa0:	d112      	bne.n	4ac8 <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
    4aa2:	f000 030f 	and.w	r3, r0, #15
		} else {
			return &ctx->ep_ctx[ep_num];
    4aa6:	204c      	movs	r0, #76	; 0x4c
    4aa8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    4aac:	4b0a      	ldr	r3, [pc, #40]	; (4ad8 <endpoint_ctx+0x54>)
    4aae:	4418      	add	r0, r3
    4ab0:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    4ab2:	2b08      	cmp	r3, #8
    4ab4:	d105      	bne.n	4ac2 <endpoint_ctx+0x3e>
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4ab6:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    4ab8:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4abc:	d506      	bpl.n	4acc <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    4abe:	4807      	ldr	r0, [pc, #28]	; (4adc <endpoint_ctx+0x58>)
    4ac0:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
    4ac2:	f010 0f78 	tst.w	r0, #120	; 0x78
    4ac6:	d0f6      	beq.n	4ab6 <endpoint_ctx+0x32>
		return NULL;
    4ac8:	2000      	movs	r0, #0
					    ep_num];
		}
	}

	return NULL;
}
    4aca:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    4acc:	4804      	ldr	r0, [pc, #16]	; (4ae0 <endpoint_ctx+0x5c>)
    4ace:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    4ad2:	4770      	bx	lr
    4ad4:	20000fb0 	.word	0x20000fb0
    4ad8:	20000e64 	.word	0x20000e64
    4adc:	200010d0 	.word	0x200010d0
    4ae0:	20000fd0 	.word	0x20000fd0

00004ae4 <usbd_work_schedule>:
 *
 * Should be called after usbd_evt_put().
 */
static inline void usbd_work_schedule(void)
{
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    4ae4:	4901      	ldr	r1, [pc, #4]	; (4aec <usbd_work_schedule+0x8>)
    4ae6:	4802      	ldr	r0, [pc, #8]	; (4af0 <usbd_work_schedule+0xc>)
    4ae8:	f007 bf45 	b.w	c976 <k_work_submit_to_queue>
    4aec:	20000e8c 	.word	0x20000e8c
    4af0:	200008b8 	.word	0x200008b8

00004af4 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    4af4:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    4af6:	4801      	ldr	r0, [pc, #4]	; (4afc <usbd_evt_put+0x8>)
    4af8:	f007 bed8 	b.w	c8ac <k_queue_append>
    4afc:	20000340 	.word	0x20000340

00004b00 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    4b00:	4802      	ldr	r0, [pc, #8]	; (4b0c <usbd_evt_get+0xc>)
    4b02:	2200      	movs	r2, #0
    4b04:	2300      	movs	r3, #0
    4b06:	f005 b983 	b.w	9e10 <z_impl_k_queue_get>
    4b0a:	bf00      	nop
    4b0c:	20000340 	.word	0x20000340

00004b10 <usbd_evt_flush>:

/**
 * @brief Drop all enqueued events.
 */
static inline void usbd_evt_flush(void)
{
    4b10:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4b12:	4c05      	ldr	r4, [pc, #20]	; (4b28 <usbd_evt_flush+0x18>)
	struct usbd_event *ev;

	do {
		ev = usbd_evt_get();
    4b14:	f7ff fff4 	bl	4b00 <usbd_evt_get>
		if (ev) {
    4b18:	b120      	cbz	r0, 4b24 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4b1a:	1d01      	adds	r1, r0, #4
    4b1c:	4620      	mov	r0, r4
    4b1e:	f007 fe03 	bl	c728 <k_mem_slab_free>
			usbd_evt_free(ev);
		}
	} while (ev != NULL);
    4b22:	e7f7      	b.n	4b14 <usbd_evt_flush+0x4>
}
    4b24:	bd10      	pop	{r4, pc}
    4b26:	bf00      	nop
    4b28:	200002c8 	.word	0x200002c8

00004b2c <usbd_evt_alloc>:
 * This function should be called prior to usbd_evt_put().
 *
 * @returns Pointer to the allocated event or NULL if there was no space left.
 */
static inline struct usbd_event *usbd_evt_alloc(void)
{
    4b2c:	b510      	push	{r4, lr}
    4b2e:	b088      	sub	sp, #32
	struct usbd_event *ev;
	struct usbd_mem_block block;

	if (k_mem_slab_alloc(&fifo_elem_slab,
    4b30:	4818      	ldr	r0, [pc, #96]	; (4b94 <usbd_evt_alloc+0x68>)
    4b32:	2200      	movs	r2, #0
    4b34:	2300      	movs	r3, #0
    4b36:	a901      	add	r1, sp, #4
    4b38:	f004 ffb0 	bl	9a9c <k_mem_slab_alloc>
    4b3c:	b330      	cbz	r0, 4b8c <usbd_evt_alloc+0x60>
			     (void **)&block.data, K_NO_WAIT)) {
		LOG_ERR("USBD event allocation failed!");
    4b3e:	4b16      	ldr	r3, [pc, #88]	; (4b98 <usbd_evt_alloc+0x6c>)
    4b40:	4816      	ldr	r0, [pc, #88]	; (4b9c <usbd_evt_alloc+0x70>)
    4b42:	9307      	str	r3, [sp, #28]
    4b44:	aa06      	add	r2, sp, #24
    4b46:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4b4a:	2402      	movs	r4, #2
    4b4c:	9406      	str	r4, [sp, #24]
    4b4e:	f007 f915 	bl	bd7c <z_log_msg_static_create.constprop.0>
		 * Allocation may fail if workqueue thread is starved or event
		 * queue size is too small (CONFIG_USB_NRFX_EVT_QUEUE_SIZE).
		 * Wipe all events, free the space and schedule
		 * reinitialization.
		 */
		usbd_evt_flush();
    4b52:	f7ff ffdd 	bl	4b10 <usbd_evt_flush>

		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    4b56:	480f      	ldr	r0, [pc, #60]	; (4b94 <usbd_evt_alloc+0x68>)
    4b58:	2200      	movs	r2, #0
    4b5a:	2300      	movs	r3, #0
    4b5c:	a901      	add	r1, sp, #4
    4b5e:	f004 ff9d 	bl	9a9c <k_mem_slab_alloc>
    4b62:	b150      	cbz	r0, 4b7a <usbd_evt_alloc+0x4e>
			LOG_ERR("USBD event memory corrupted");
    4b64:	4b0e      	ldr	r3, [pc, #56]	; (4ba0 <usbd_evt_alloc+0x74>)
    4b66:	480d      	ldr	r0, [pc, #52]	; (4b9c <usbd_evt_alloc+0x70>)
    4b68:	aa06      	add	r2, sp, #24
    4b6a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4b6e:	e9cd 4306 	strd	r4, r3, [sp, #24]
    4b72:	f007 f903 	bl	bd7c <z_log_msg_static_create.constprop.0>
			__ASSERT_NO_MSG(0);
			return NULL;
    4b76:	2000      	movs	r0, #0
    4b78:	e00a      	b.n	4b90 <usbd_evt_alloc+0x64>
		}

		ev = (struct usbd_event *)block.data;
    4b7a:	9801      	ldr	r0, [sp, #4]
		ev->block = block;
		ev->evt_type = USBD_EVT_REINIT;
    4b7c:	2304      	movs	r3, #4
		ev->block = block;
    4b7e:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    4b80:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    4b82:	f7ff ffb7 	bl	4af4 <usbd_evt_put>
		usbd_work_schedule();
    4b86:	f7ff ffad 	bl	4ae4 <usbd_work_schedule>

		return NULL;
    4b8a:	e7f4      	b.n	4b76 <usbd_evt_alloc+0x4a>
	}

	ev = (struct usbd_event *)block.data;
    4b8c:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    4b8e:	6040      	str	r0, [r0, #4]

	return ev;
}
    4b90:	b008      	add	sp, #32
    4b92:	bd10      	pop	{r4, pc}
    4b94:	200002c8 	.word	0x200002c8
    4b98:	0000deff 	.word	0x0000deff
    4b9c:	0000d030 	.word	0x0000d030
    4ba0:	0000df1d 	.word	0x0000df1d

00004ba4 <usb_dc_power_event_handler>:

static K_TIMER_DEFINE(delay_timer, attached_evt_delay_handler, NULL);
#endif

static void usb_dc_power_event_handler(nrfx_power_usb_evt_t event)
{
    4ba4:	b598      	push	{r3, r4, r7, lr}
    4ba6:	2802      	cmp	r0, #2
    4ba8:	af00      	add	r7, sp, #0
    4baa:	d811      	bhi.n	4bd0 <usb_dc_power_event_handler+0x2c>
    4bac:	4b10      	ldr	r3, [pc, #64]	; (4bf0 <usb_dc_power_event_handler+0x4c>)
    4bae:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    4bb0:	f7ff ffbc 	bl	4b2c <usbd_evt_alloc>
	if (!ev) {
    4bb4:	b150      	cbz	r0, 4bcc <usb_dc_power_event_handler+0x28>
	ev->evt_type = USBD_EVT_POWER;
    4bb6:	2200      	movs	r2, #0
    4bb8:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    4bba:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    4bbc:	f7ff ff9a 	bl	4af4 <usbd_evt_put>
	if (usbd_ctx.attached) {
    4bc0:	4b0c      	ldr	r3, [pc, #48]	; (4bf4 <usb_dc_power_event_handler+0x50>)
    4bc2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    4bc6:	b10b      	cbz	r3, 4bcc <usb_dc_power_event_handler+0x28>
		usbd_work_schedule();
    4bc8:	f7ff ff8c 	bl	4ae4 <usbd_work_schedule>
		LOG_ERR("Unknown USB power event %d", event);
		return;
	}

	submit_dc_power_event(new_state);
}
    4bcc:	46bd      	mov	sp, r7
    4bce:	bd98      	pop	{r3, r4, r7, pc}
		LOG_ERR("Unknown USB power event %d", event);
    4bd0:	466c      	mov	r4, sp
    4bd2:	b088      	sub	sp, #32
    4bd4:	466a      	mov	r2, sp
    4bd6:	4b08      	ldr	r3, [pc, #32]	; (4bf8 <usb_dc_power_event_handler+0x54>)
	switch (event) {
    4bd8:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Unknown USB power event %d", event);
    4bdc:	2303      	movs	r3, #3
    4bde:	f842 3f10 	str.w	r3, [r2, #16]!
    4be2:	4806      	ldr	r0, [pc, #24]	; (4bfc <usb_dc_power_event_handler+0x58>)
    4be4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4be8:	f007 f8c8 	bl	bd7c <z_log_msg_static_create.constprop.0>
    4bec:	46a5      	mov	sp, r4
    4bee:	e7ed      	b.n	4bcc <usb_dc_power_event_handler+0x28>
    4bf0:	0000e10f 	.word	0x0000e10f
    4bf4:	20000e64 	.word	0x20000e64
    4bf8:	0000df39 	.word	0x0000df39
    4bfc:	0000d030 	.word	0x0000d030

00004c00 <usbd_event_transfer_data>:
		}
	}
}

static void usbd_event_transfer_data(nrfx_usbd_evt_t const *const p_event)
{
    4c00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct nrf_usbd_ep_ctx *ep_ctx =
		endpoint_ctx(p_event->data.eptransfer.ep);
    4c04:	f890 8002 	ldrb.w	r8, [r0, #2]
{
    4c08:	4606      	mov	r6, r0
    4c0a:	af00      	add	r7, sp, #0
		endpoint_ctx(p_event->data.eptransfer.ep);
    4c0c:	4640      	mov	r0, r8
    4c0e:	f7ff ff39 	bl	4a84 <endpoint_ctx>

	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4c12:	f018 0f80 	tst.w	r8, #128	; 0x80
		switch (p_event->data.eptransfer.status) {
    4c16:	78f4      	ldrb	r4, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    4c18:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4c1a:	d025      	beq.n	4c68 <usbd_event_transfer_data+0x68>
		switch (p_event->data.eptransfer.status) {
    4c1c:	b19c      	cbz	r4, 4c46 <usbd_event_transfer_data+0x46>
    4c1e:	2c03      	cmp	r4, #3
    4c20:	d01f      	beq.n	4c62 <usbd_event_transfer_data+0x62>
			usbd_work_schedule();
		}
		break;

		default: {
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    4c22:	466d      	mov	r5, sp
    4c24:	b088      	sub	sp, #32
    4c26:	466a      	mov	r2, sp
    4c28:	4b2a      	ldr	r3, [pc, #168]	; (4cd4 <usbd_event_transfer_data+0xd4>)
    4c2a:	f8c2 801c 	str.w	r8, [r2, #28]
    4c2e:	e9c2 3405 	strd	r3, r4, [r2, #20]
    4c32:	2304      	movs	r3, #4
    4c34:	f842 3f10 	str.w	r3, [r2, #16]!
    4c38:	4827      	ldr	r0, [pc, #156]	; (4cd8 <usbd_event_transfer_data+0xd8>)
    4c3a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    4c3e:	f007 f89d 	bl	bd7c <z_log_msg_static_create.constprop.0>
    4c42:	46ad      	mov	sp, r5
    4c44:	e00d      	b.n	4c62 <usbd_event_transfer_data+0x62>
			struct usbd_event *ev = usbd_evt_alloc();
    4c46:	f7ff ff71 	bl	4b2c <usbd_evt_alloc>
			if (!ev) {
    4c4a:	4603      	mov	r3, r0
    4c4c:	b148      	cbz	r0, 4c62 <usbd_event_transfer_data+0x62>
			ev->evt_type = USBD_EVT_EP;
    4c4e:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    4c50:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    4c52:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    4c54:	2203      	movs	r2, #3
    4c56:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    4c58:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
    4c5a:	f7ff ff4b 	bl	4af4 <usbd_evt_put>
			usbd_work_schedule();
    4c5e:	f7ff ff41 	bl	4ae4 <usbd_work_schedule>
				p_event->data.eptransfer.ep);
		}
		break;
		}
	}
}
    4c62:	46bd      	mov	sp, r7
    4c64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (p_event->data.eptransfer.status) {
    4c68:	b154      	cbz	r4, 4c80 <usbd_event_transfer_data+0x80>
    4c6a:	2c01      	cmp	r4, #1
    4c6c:	d1d9      	bne.n	4c22 <usbd_event_transfer_data+0x22>
			struct usbd_event *ev = usbd_evt_alloc();
    4c6e:	f7ff ff5d 	bl	4b2c <usbd_evt_alloc>
			if (!ev) {
    4c72:	4603      	mov	r3, r0
    4c74:	2800      	cmp	r0, #0
    4c76:	d0f4      	beq.n	4c62 <usbd_event_transfer_data+0x62>
			ep_ctx->read_pending = true;
    4c78:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    4c7a:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4c7c:	7304      	strb	r4, [r0, #12]
    4c7e:	e7eb      	b.n	4c58 <usbd_event_transfer_data+0x58>
			struct usbd_event *ev = usbd_evt_alloc();
    4c80:	f7ff ff54 	bl	4b2c <usbd_evt_alloc>
			if (!ev) {
    4c84:	2800      	cmp	r0, #0
    4c86:	d0ec      	beq.n	4c62 <usbd_event_transfer_data+0x62>
				p_event->data.eptransfer.ep);
    4c88:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    4c8a:	4b14      	ldr	r3, [pc, #80]	; (4cdc <usbd_event_transfer_data+0xdc>)
    4c8c:	f012 0f80 	tst.w	r2, #128	; 0x80
    4c90:	f002 0108 	and.w	r1, r2, #8
    4c94:	d011      	beq.n	4cba <usbd_event_transfer_data+0xba>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    4c96:	b141      	cbz	r1, 4caa <usbd_event_transfer_data+0xaa>
        {
            ret = p_reg->ISOIN.AMOUNT;
    4c98:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    4c9c:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    4c9e:	2301      	movs	r3, #1
    4ca0:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    4ca2:	2302      	movs	r3, #2
    4ca4:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    4ca6:	6085      	str	r5, [r0, #8]
    4ca8:	e7d7      	b.n	4c5a <usbd_event_transfer_data+0x5a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    4caa:	f002 020f 	and.w	r2, r2, #15
    4cae:	2114      	movs	r1, #20
    4cb0:	fb01 3302 	mla	r3, r1, r2, r3
    4cb4:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    4cb8:	e7f0      	b.n	4c9c <usbd_event_transfer_data+0x9c>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    4cba:	b111      	cbz	r1, 4cc2 <usbd_event_transfer_data+0xc2>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    4cbc:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    4cc0:	e7ec      	b.n	4c9c <usbd_event_transfer_data+0x9c>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    4cc2:	f002 020f 	and.w	r2, r2, #15
    4cc6:	2114      	movs	r1, #20
    4cc8:	fb01 3302 	mla	r3, r1, r2, r3
    4ccc:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    4cd0:	e7e4      	b.n	4c9c <usbd_event_transfer_data+0x9c>
    4cd2:	bf00      	nop
    4cd4:	0000df54 	.word	0x0000df54
    4cd8:	0000d030 	.word	0x0000d030
    4cdc:	40027000 	.word	0x40027000

00004ce0 <usb_init>:
	}
	return 0;
}

static int usb_init(void)
{
    4ce0:	b513      	push	{r0, r1, r4, lr}

	static const nrfx_power_usbevt_config_t usbevt_config = {
		.handler = usb_dc_power_event_handler
	};

	err = nrfx_usbd_init(usbd_event_handler);
    4ce2:	4812      	ldr	r0, [pc, #72]	; (4d2c <usb_init+0x4c>)
    4ce4:	f003 fff4 	bl	8cd0 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    4ce8:	4b11      	ldr	r3, [pc, #68]	; (4d30 <usb_init+0x50>)
    4cea:	4298      	cmp	r0, r3
    4cec:	d11a      	bne.n	4d24 <usb_init+0x44>
	}

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    4cee:	4811      	ldr	r0, [pc, #68]	; (4d34 <usb_init+0x54>)
    4cf0:	f003 fa1e 	bl	8130 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    4cf4:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    4cf6:	4810      	ldr	r0, [pc, #64]	; (4d38 <usb_init+0x58>)
    4cf8:	f003 fa44 	bl	8184 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    4cfc:	490f      	ldr	r1, [pc, #60]	; (4d3c <usb_init+0x5c>)
    4cfe:	4810      	ldr	r0, [pc, #64]	; (4d40 <usb_init+0x60>)
    4d00:	9400      	str	r4, [sp, #0]
    4d02:	f04f 33ff 	mov.w	r3, #4294967295
    4d06:	f44f 6280 	mov.w	r2, #1024	; 0x400
    4d0a:	f005 fa31 	bl	a170 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    4d0e:	490d      	ldr	r1, [pc, #52]	; (4d44 <usb_init+0x64>)
    4d10:	480b      	ldr	r0, [pc, #44]	; (4d40 <usb_init+0x60>)
    4d12:	f007 fd38 	bl	c786 <z_impl_k_thread_name_set>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_thread_name_set(&usbd_work_queue.thread, "usbd_workq");
	k_work_init(&ctx->usb_work, usbd_work_handler);
    4d16:	480c      	ldr	r0, [pc, #48]	; (4d48 <usb_init+0x68>)
    4d18:	490c      	ldr	r1, [pc, #48]	; (4d4c <usb_init+0x6c>)
    4d1a:	f007 fe0f 	bl	c93c <k_work_init>

	return 0;
    4d1e:	4620      	mov	r0, r4
}
    4d20:	b002      	add	sp, #8
    4d22:	bd10      	pop	{r4, pc}
		return -EIO;
    4d24:	f06f 0004 	mvn.w	r0, #4
    4d28:	e7fa      	b.n	4d20 <usb_init+0x40>
    4d2a:	bf00      	nop
    4d2c:	00004d91 	.word	0x00004d91
    4d30:	0bad0000 	.word	0x0bad0000
    4d34:	0000e112 	.word	0x0000e112
    4d38:	0000d15c 	.word	0x0000d15c
    4d3c:	20002300 	.word	0x20002300
    4d40:	200008b8 	.word	0x200008b8
    4d44:	0000df80 	.word	0x0000df80
    4d48:	20000e8c 	.word	0x20000e8c
    4d4c:	00004f69 	.word	0x00004f69

00004d50 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    4d50:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4d52:	490e      	ldr	r1, [pc, #56]	; (4d8c <hfxo_stop.constprop.0.isra.0+0x3c>)
    4d54:	f3bf 8f5b 	dmb	ish
    4d58:	2300      	movs	r3, #0
    4d5a:	e851 2f00 	ldrex	r2, [r1]
    4d5e:	2a01      	cmp	r2, #1
    4d60:	d103      	bne.n	4d6a <hfxo_stop.constprop.0.isra.0+0x1a>
    4d62:	e841 3000 	strex	r0, r3, [r1]
    4d66:	2800      	cmp	r0, #0
    4d68:	d1f7      	bne.n	4d5a <hfxo_stop.constprop.0.isra.0+0xa>
    4d6a:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    4d6e:	d10c      	bne.n	4d8a <hfxo_stop.constprop.0.isra.0+0x3a>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    4d70:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    4d74:	3914      	subs	r1, #20
    4d76:	4620      	mov	r0, r4
    4d78:	f006 fb7e 	bl	b478 <onoff_cancel>

	if (rv == -EALREADY) {
    4d7c:	3078      	adds	r0, #120	; 0x78
    4d7e:	d104      	bne.n	4d8a <hfxo_stop.constprop.0.isra.0+0x3a>
		rv = onoff_release(mgr);
    4d80:	4620      	mov	r0, r4
}
    4d82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    4d86:	f006 bb52 	b.w	b42e <onoff_release>
    4d8a:	bd10      	pop	{r4, pc}
    4d8c:	20000e84 	.word	0x20000e84

00004d90 <usbd_event_handler>:
{
    4d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4d94:	b088      	sub	sp, #32
    4d96:	4606      	mov	r6, r0
    4d98:	af00      	add	r7, sp, #0
	struct usbd_event evt = {0};
    4d9a:	2214      	movs	r2, #20
    4d9c:	2100      	movs	r1, #0
    4d9e:	f107 000c 	add.w	r0, r7, #12
    4da2:	f006 ff9b 	bl	bcdc <memset>
	switch (p_event->type) {
    4da6:	7833      	ldrb	r3, [r6, #0]
    4da8:	3b01      	subs	r3, #1
    4daa:	2b05      	cmp	r3, #5
    4dac:	d821      	bhi.n	4df2 <usbd_event_handler+0x62>
    4dae:	e8df f003 	tbb	[pc, r3]
    4db2:	039b      	.short	0x039b
    4db4:	158d1313 	.word	0x158d1313
    4db8:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    4dba:	753b      	strb	r3, [r7, #20]
		evt.evt_type = USBD_EVT_POWER;
    4dbc:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
    4dbe:	f7ff feb5 	bl	4b2c <usbd_evt_alloc>
		if (!ev) {
    4dc2:	4603      	mov	r3, r0
    4dc4:	b1a8      	cbz	r0, 4df2 <usbd_event_handler+0x62>
		ev->evt_type = evt.evt_type;
    4dc6:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    4dc8:	f100 0208 	add.w	r2, r0, #8
    4dcc:	e9d7 0105 	ldrd	r0, r1, [r7, #20]
    4dd0:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    4dd4:	4618      	mov	r0, r3
    4dd6:	e034      	b.n	4e42 <usbd_event_handler+0xb2>
	switch (p_event->type) {
    4dd8:	2304      	movs	r3, #4
    4dda:	e7ee      	b.n	4dba <usbd_event_handler+0x2a>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    4ddc:	f896 8002 	ldrb.w	r8, [r6, #2]
    4de0:	4640      	mov	r0, r8
    4de2:	f7ff fe4f 	bl	4a84 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    4de6:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    4de8:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
    4dea:	b133      	cbz	r3, 4dfa <usbd_event_handler+0x6a>
    4dec:	3b01      	subs	r3, #1
    4dee:	2b02      	cmp	r3, #2
    4df0:	d968      	bls.n	4ec4 <usbd_event_handler+0x134>
}
    4df2:	3720      	adds	r7, #32
    4df4:	46bd      	mov	sp, r7
    4df6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4dfa:	f018 0f80 	tst.w	r8, #128	; 0x80
		switch (p_event->data.eptransfer.status) {
    4dfe:	78f4      	ldrb	r4, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    4e00:	d024      	beq.n	4e4c <usbd_event_handler+0xbc>
		switch (p_event->data.eptransfer.status) {
    4e02:	b19c      	cbz	r4, 4e2c <usbd_event_handler+0x9c>
    4e04:	2c03      	cmp	r4, #3
    4e06:	d0f4      	beq.n	4df2 <usbd_event_handler+0x62>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    4e08:	466d      	mov	r5, sp
    4e0a:	b088      	sub	sp, #32
    4e0c:	466a      	mov	r2, sp
    4e0e:	4b37      	ldr	r3, [pc, #220]	; (4eec <usbd_event_handler+0x15c>)
    4e10:	f8c2 801c 	str.w	r8, [r2, #28]
    4e14:	e9c2 3405 	strd	r3, r4, [r2, #20]
    4e18:	2304      	movs	r3, #4
    4e1a:	f842 3f10 	str.w	r3, [r2, #16]!
    4e1e:	4834      	ldr	r0, [pc, #208]	; (4ef0 <usbd_event_handler+0x160>)
    4e20:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    4e24:	f006 ffaa 	bl	bd7c <z_log_msg_static_create.constprop.0>
    4e28:	46ad      	mov	sp, r5
    4e2a:	e7e2      	b.n	4df2 <usbd_event_handler+0x62>
			struct usbd_event *ev = usbd_evt_alloc();
    4e2c:	f7ff fe7e 	bl	4b2c <usbd_evt_alloc>
			if (!ev) {
    4e30:	4603      	mov	r3, r0
    4e32:	2800      	cmp	r0, #0
    4e34:	d0dd      	beq.n	4df2 <usbd_event_handler+0x62>
			ev->evt_type = USBD_EVT_EP;
    4e36:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    4e38:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    4e3a:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    4e3c:	2203      	movs	r2, #3
    4e3e:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    4e40:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
    4e42:	f7ff fe57 	bl	4af4 <usbd_evt_put>
		usbd_work_schedule();
    4e46:	f7ff fe4d 	bl	4ae4 <usbd_work_schedule>
    4e4a:	e7d2      	b.n	4df2 <usbd_event_handler+0x62>
		switch (p_event->data.eptransfer.status) {
    4e4c:	b154      	cbz	r4, 4e64 <usbd_event_handler+0xd4>
    4e4e:	2c01      	cmp	r4, #1
    4e50:	d1da      	bne.n	4e08 <usbd_event_handler+0x78>
			struct usbd_event *ev = usbd_evt_alloc();
    4e52:	f7ff fe6b 	bl	4b2c <usbd_evt_alloc>
			if (!ev) {
    4e56:	4603      	mov	r3, r0
    4e58:	2800      	cmp	r0, #0
    4e5a:	d0ca      	beq.n	4df2 <usbd_event_handler+0x62>
			ep_ctx->read_pending = true;
    4e5c:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    4e5e:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    4e60:	7304      	strb	r4, [r0, #12]
    4e62:	e7ed      	b.n	4e40 <usbd_event_handler+0xb0>
			struct usbd_event *ev = usbd_evt_alloc();
    4e64:	f7ff fe62 	bl	4b2c <usbd_evt_alloc>
			if (!ev) {
    4e68:	4604      	mov	r4, r0
    4e6a:	2800      	cmp	r0, #0
    4e6c:	d0c1      	beq.n	4df2 <usbd_event_handler+0x62>
			ev->evt_type = USBD_EVT_EP;
    4e6e:	2301      	movs	r3, #1
    4e70:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    4e72:	2302      	movs	r3, #2
    4e74:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    4e76:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    4e78:	78b0      	ldrb	r0, [r6, #2]
    4e7a:	f105 010c 	add.w	r1, r5, #12
    4e7e:	f007 fbaa 	bl	c5d6 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    4e82:	b170      	cbz	r0, 4ea2 <usbd_event_handler+0x112>
				LOG_ERR("_ep_status_get failed! Code: %d",
    4e84:	466e      	mov	r6, sp
    4e86:	b088      	sub	sp, #32
    4e88:	466a      	mov	r2, sp
    4e8a:	4b1a      	ldr	r3, [pc, #104]	; (4ef4 <usbd_event_handler+0x164>)
    4e8c:	e9c2 3005 	strd	r3, r0, [r2, #20]
    4e90:	2303      	movs	r3, #3
    4e92:	f842 3f10 	str.w	r3, [r2, #16]!
    4e96:	4816      	ldr	r0, [pc, #88]	; (4ef0 <usbd_event_handler+0x160>)
    4e98:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4e9c:	f006 ff6e 	bl	bd7c <z_log_msg_static_create.constprop.0>
    4ea0:	46b5      	mov	sp, r6
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    4ea2:	4a15      	ldr	r2, [pc, #84]	; (4ef8 <usbd_event_handler+0x168>)
    4ea4:	68e9      	ldr	r1, [r5, #12]
    4ea6:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    4eaa:	428b      	cmp	r3, r1
    4eac:	d906      	bls.n	4ebc <usbd_event_handler+0x12c>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    4eae:	1a5b      	subs	r3, r3, r1
    4eb0:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    4eb4:	f004 f940 	bl	9138 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    4eb8:	4620      	mov	r0, r4
    4eba:	e7c2      	b.n	4e42 <usbd_event_handler+0xb2>
				ctx->ctrl_read_len = 0U;
    4ebc:	2300      	movs	r3, #0
    4ebe:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
    4ec2:	e7f9      	b.n	4eb8 <usbd_event_handler+0x128>
			usbd_event_transfer_data(p_event);
    4ec4:	4630      	mov	r0, r6
    4ec6:	f7ff fe9b 	bl	4c00 <usbd_event_transfer_data>
	if (put_evt) {
    4eca:	e792      	b.n	4df2 <usbd_event_handler+0x62>
		nrfx_usbd_setup_get(&drv_setup);
    4ecc:	1d38      	adds	r0, r7, #4
    4ece:	f004 f90d 	bl	90ec <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    4ed2:	797b      	ldrb	r3, [r7, #5]
    4ed4:	2b05      	cmp	r3, #5
    4ed6:	d103      	bne.n	4ee0 <usbd_event_handler+0x150>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    4ed8:	793b      	ldrb	r3, [r7, #4]
    4eda:	f013 0f60 	tst.w	r3, #96	; 0x60
    4ede:	d088      	beq.n	4df2 <usbd_event_handler+0x62>
			evt.evt.ep_evt.ep = ep_ctx;
    4ee0:	4b06      	ldr	r3, [pc, #24]	; (4efc <usbd_event_handler+0x16c>)
    4ee2:	617b      	str	r3, [r7, #20]
			evt.evt_type = USBD_EVT_EP;
    4ee4:	2401      	movs	r4, #1
    4ee6:	e76a      	b.n	4dbe <usbd_event_handler+0x2e>
	switch (p_event->type) {
    4ee8:	2402      	movs	r4, #2
    4eea:	e768      	b.n	4dbe <usbd_event_handler+0x2e>
    4eec:	0000df54 	.word	0x0000df54
    4ef0:	0000d030 	.word	0x0000d030
    4ef4:	0000df8b 	.word	0x0000df8b
    4ef8:	20000e64 	.word	0x20000e64
    4efc:	20000fd0 	.word	0x20000fd0

00004f00 <eps_ctx_init>:
{
    4f00:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4f02:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    4f04:	f064 007f 	orn	r0, r4, #127	; 0x7f
    4f08:	b2c0      	uxtb	r0, r0
    4f0a:	f7ff fdbb 	bl	4a84 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4f0e:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    4f10:	f006 ff21 	bl	bd56 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    4f14:	2c08      	cmp	r4, #8
    4f16:	d1f5      	bne.n	4f04 <eps_ctx_init+0x4>
    4f18:	4d0e      	ldr	r5, [pc, #56]	; (4f54 <eps_ctx_init+0x54>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4f1a:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    4f1c:	b2e0      	uxtb	r0, r4
    4f1e:	f7ff fdb1 	bl	4a84 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    4f22:	6903      	ldr	r3, [r0, #16]
    4f24:	b903      	cbnz	r3, 4f28 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    4f26:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4f28:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    4f2a:	f006 ff14 	bl	bd56 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    4f2e:	2c08      	cmp	r4, #8
    4f30:	f105 0540 	add.w	r5, r5, #64	; 0x40
    4f34:	d1f2      	bne.n	4f1c <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    4f36:	4808      	ldr	r0, [pc, #32]	; (4f58 <eps_ctx_init+0x58>)
    4f38:	f006 ff0d 	bl	bd56 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    4f3c:	4b07      	ldr	r3, [pc, #28]	; (4f5c <eps_ctx_init+0x5c>)
    4f3e:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
    4f42:	b912      	cbnz	r2, 4f4a <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    4f44:	4a06      	ldr	r2, [pc, #24]	; (4f60 <eps_ctx_init+0x60>)
    4f46:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    4f4a:	4806      	ldr	r0, [pc, #24]	; (4f64 <eps_ctx_init+0x64>)
    4f4c:	f006 ff03 	bl	bd56 <ep_ctx_reset>
}
    4f50:	2000      	movs	r0, #0
    4f52:	bd38      	pop	{r3, r4, r5, pc}
    4f54:	200014f4 	.word	0x200014f4
    4f58:	20000fb0 	.word	0x20000fb0
    4f5c:	20000e64 	.word	0x20000e64
    4f60:	200010f4 	.word	0x200010f4
    4f64:	200010d0 	.word	0x200010d0

00004f68 <usbd_work_handler>:
{
    4f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->ready;
    4f6c:	4ca3      	ldr	r4, [pc, #652]	; (51fc <usbd_work_handler+0x294>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4f6e:	f8df a290 	ldr.w	sl, [pc, #656]	; 5200 <usbd_work_handler+0x298>
{
    4f72:	b086      	sub	sp, #24
    4f74:	4680      	mov	r8, r0
    4f76:	af00      	add	r7, sp, #0
	while ((ev = usbd_evt_get()) != NULL) {
    4f78:	f7ff fdc2 	bl	4b00 <usbd_evt_get>
    4f7c:	4606      	mov	r6, r0
    4f7e:	b918      	cbnz	r0, 4f88 <usbd_work_handler+0x20>
}
    4f80:	3718      	adds	r7, #24
    4f82:	46bd      	mov	sp, r7
    4f84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return get_usbd_ctx()->ready;
    4f88:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    4f8c:	7c33      	ldrb	r3, [r6, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4f8e:	f106 0904 	add.w	r9, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    4f92:	b93a      	cbnz	r2, 4fa4 <usbd_work_handler+0x3c>
    4f94:	2b00      	cmp	r3, #0
    4f96:	f000 80af 	beq.w	50f8 <usbd_work_handler+0x190>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4f9a:	4899      	ldr	r0, [pc, #612]	; (5200 <usbd_work_handler+0x298>)
    4f9c:	4649      	mov	r1, r9
    4f9e:	f007 fbc3 	bl	c728 <k_mem_slab_free>
}
    4fa2:	e7e9      	b.n	4f78 <usbd_work_handler+0x10>
		switch (ev->evt_type) {
    4fa4:	2b04      	cmp	r3, #4
    4fa6:	f200 8195 	bhi.w	52d4 <usbd_work_handler+0x36c>
    4faa:	e8df f013 	tbh	[pc, r3, lsl #1]
    4fae:	00a5      	.short	0x00a5
    4fb0:	013b0005 	.word	0x013b0005
    4fb4:	01780151 	.word	0x01780151
			if (!ctx->attached) {
    4fb8:	f818 3c04 	ldrb.w	r3, [r8, #-4]
    4fbc:	b983      	cbnz	r3, 4fe0 <usbd_work_handler+0x78>
				LOG_ERR("not attached, EP 0x%02x event dropped",
    4fbe:	68b3      	ldr	r3, [r6, #8]
    4fc0:	466d      	mov	r5, sp
    4fc2:	b088      	sub	sp, #32
    4fc4:	7a5b      	ldrb	r3, [r3, #9]
    4fc6:	466a      	mov	r2, sp
    4fc8:	498e      	ldr	r1, [pc, #568]	; (5204 <usbd_work_handler+0x29c>)
    4fca:	488f      	ldr	r0, [pc, #572]	; (5208 <usbd_work_handler+0x2a0>)
    4fcc:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4fd0:	2303      	movs	r3, #3
    4fd2:	f842 3f10 	str.w	r3, [r2, #16]!
    4fd6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4fda:	f006 fecf 	bl	bd7c <z_log_msg_static_create.constprop.0>
    4fde:	46ad      	mov	sp, r5
	switch (ep_evt->evt_type) {
    4fe0:	7b33      	ldrb	r3, [r6, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    4fe2:	68b5      	ldr	r5, [r6, #8]
	switch (ep_evt->evt_type) {
    4fe4:	2b03      	cmp	r3, #3
    4fe6:	d839      	bhi.n	505c <usbd_work_handler+0xf4>
    4fe8:	e8df f003 	tbb	[pc, r3]
    4fec:	736e3f02 	.word	0x736e3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    4ff0:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    4ff2:	2208      	movs	r2, #8
    4ff4:	2100      	movs	r1, #0
    4ff6:	4630      	mov	r0, r6
    4ff8:	f006 fe70 	bl	bcdc <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    4ffc:	4b83      	ldr	r3, [pc, #524]	; (520c <usbd_work_handler+0x2a4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4ffe:	4884      	ldr	r0, [pc, #528]	; (5210 <usbd_work_handler+0x2a8>)
    5000:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    5004:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    5006:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    500a:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    500c:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    5010:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    5014:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    5018:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    501a:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    501e:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    5022:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    5026:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    5028:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    502c:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    5030:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    5034:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    5036:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    5038:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    503a:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    503c:	f006 fe43 	bl	bcc6 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    5040:	682b      	ldr	r3, [r5, #0]
    5042:	7a68      	ldrb	r0, [r5, #9]
    5044:	2100      	movs	r1, #0
    5046:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    5048:	f996 3000 	ldrsb.w	r3, [r6]
    504c:	2b00      	cmp	r3, #0
    504e:	db08      	blt.n	5062 <usbd_work_handler+0xfa>
    5050:	88f3      	ldrh	r3, [r6, #6]
    5052:	b133      	cbz	r3, 5062 <usbd_work_handler+0xfa>
		ctx->ctrl_read_len = usbd_setup->wLength;
    5054:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    5058:	f004 f86e 	bl	9138 <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    505c:	4649      	mov	r1, r9
    505e:	4650      	mov	r0, sl
    5060:	e79d      	b.n	4f9e <usbd_work_handler+0x36>
		ctx->ctrl_read_len = 0U;
    5062:	2300      	movs	r3, #0
    5064:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    5068:	e7f8      	b.n	505c <usbd_work_handler+0xf4>
	if (!ep_ctx->read_pending) {
    506a:	7f6b      	ldrb	r3, [r5, #29]
    506c:	2b00      	cmp	r3, #0
    506e:	d0f5      	beq.n	505c <usbd_work_handler+0xf4>
	if (!ep_ctx->read_complete) {
    5070:	7f2b      	ldrb	r3, [r5, #28]
    5072:	2b00      	cmp	r3, #0
    5074:	d0f2      	beq.n	505c <usbd_work_handler+0xf4>
	ep_ctx->read_pending = false;
    5076:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5078:	4866      	ldr	r0, [pc, #408]	; (5214 <usbd_work_handler+0x2ac>)
	ep_ctx->read_pending = false;
    507a:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    507c:	f04f 32ff 	mov.w	r2, #4294967295
    5080:	f04f 33ff 	mov.w	r3, #4294967295
	ep_ctx->read_complete = false;
    5084:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5086:	f006 fe7c 	bl	bd82 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    508a:	696b      	ldr	r3, [r5, #20]
    508c:	603b      	str	r3, [r7, #0]
    508e:	686b      	ldr	r3, [r5, #4]
    5090:	e9c7 3601 	strd	r3, r6, [r7, #4]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    5094:	4639      	mov	r1, r7
    5096:	7a68      	ldrb	r0, [r5, #9]
    5098:	f003 fe5c 	bl	8d54 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    509c:	4b5e      	ldr	r3, [pc, #376]	; (5218 <usbd_work_handler+0x2b0>)
    509e:	4298      	cmp	r0, r3
    50a0:	d00e      	beq.n	50c0 <usbd_work_handler+0x158>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    50a2:	466d      	mov	r5, sp
    50a4:	b088      	sub	sp, #32
    50a6:	466a      	mov	r2, sp
    50a8:	4b5c      	ldr	r3, [pc, #368]	; (521c <usbd_work_handler+0x2b4>)
    50aa:	e9c2 3005 	strd	r3, r0, [r2, #20]
    50ae:	2303      	movs	r3, #3
    50b0:	f842 3f10 	str.w	r3, [r2, #16]!
    50b4:	4854      	ldr	r0, [pc, #336]	; (5208 <usbd_work_handler+0x2a0>)
    50b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    50ba:	f006 fe5f 	bl	bd7c <z_log_msg_static_create.constprop.0>
    50be:	46ad      	mov	sp, r5
	k_mutex_unlock(&ctx->drv_lock);
    50c0:	4854      	ldr	r0, [pc, #336]	; (5214 <usbd_work_handler+0x2ac>)
    50c2:	f006 fe60 	bl	bd86 <k_mutex_unlock.isra.0>
    50c6:	e7c9      	b.n	505c <usbd_work_handler+0xf4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    50c8:	682b      	ldr	r3, [r5, #0]
    50ca:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    50cc:	7a68      	ldrb	r0, [r5, #9]
    50ce:	4798      	blx	r3
		break;
    50d0:	e7c4      	b.n	505c <usbd_work_handler+0xf4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    50d2:	7aab      	ldrb	r3, [r5, #10]
    50d4:	b96b      	cbnz	r3, 50f2 <usbd_work_handler+0x18a>
    50d6:	7feb      	ldrb	r3, [r5, #31]
    50d8:	b95b      	cbnz	r3, 50f2 <usbd_work_handler+0x18a>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    50da:	484e      	ldr	r0, [pc, #312]	; (5214 <usbd_work_handler+0x2ac>)
    50dc:	f04f 32ff 	mov.w	r2, #4294967295
    50e0:	f04f 33ff 	mov.w	r3, #4294967295
    50e4:	f006 fe4d 	bl	bd82 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    50e8:	f004 f85a 	bl	91a0 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    50ec:	4849      	ldr	r0, [pc, #292]	; (5214 <usbd_work_handler+0x2ac>)
    50ee:	f006 fe4a 	bl	bd86 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    50f2:	682b      	ldr	r3, [r5, #0]
    50f4:	2102      	movs	r1, #2
    50f6:	e7e9      	b.n	50cc <usbd_work_handler+0x164>
	switch (pwr_evt->state) {
    50f8:	7a33      	ldrb	r3, [r6, #8]
    50fa:	2b04      	cmp	r3, #4
    50fc:	d8ae      	bhi.n	505c <usbd_work_handler+0xf4>
    50fe:	e8df f003 	tbb	[pc, r3]
    5102:	0359      	.short	0x0359
    5104:	6723      	.short	0x6723
    5106:	73          	.byte	0x73
    5107:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    5108:	f003 fdac 	bl	8c64 <nrfx_usbd_is_enabled>
    510c:	4605      	mov	r5, r0
    510e:	2800      	cmp	r0, #0
    5110:	d1a4      	bne.n	505c <usbd_work_handler+0xf4>
			nrfx_usbd_enable();
    5112:	f003 fd39 	bl	8b88 <nrfx_usbd_enable>
    5116:	f3bf 8f5b 	dmb	ish
    511a:	4941      	ldr	r1, [pc, #260]	; (5220 <usbd_work_handler+0x2b8>)
    511c:	2301      	movs	r3, #1
    511e:	e851 2f00 	ldrex	r2, [r1]
    5122:	2a00      	cmp	r2, #0
    5124:	d103      	bne.n	512e <usbd_work_handler+0x1c6>
    5126:	e841 3000 	strex	r0, r3, [r1]
    512a:	2800      	cmp	r0, #0
    512c:	d1f7      	bne.n	511e <usbd_work_handler+0x1b6>
    512e:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    5132:	d193      	bne.n	505c <usbd_work_handler+0xf4>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    5134:	f841 5c08 	str.w	r5, [r1, #-8]
    5138:	f841 5c10 	str.w	r5, [r1, #-16]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    513c:	69e0      	ldr	r0, [r4, #28]
    513e:	6163      	str	r3, [r4, #20]
    5140:	3914      	subs	r1, #20
    5142:	f006 f91c 	bl	b37e <onoff_request>
    5146:	e789      	b.n	505c <usbd_work_handler+0xf4>
	switch (pwr_evt->state) {
    5148:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    514a:	f065 007f 	orn	r0, r5, #127	; 0x7f
    514e:	b2c0      	uxtb	r0, r0
    5150:	f7ff fc98 	bl	4a84 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    5154:	7a03      	ldrb	r3, [r0, #8]
    5156:	b113      	cbz	r3, 515e <usbd_work_handler+0x1f6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    5158:	7a40      	ldrb	r0, [r0, #9]
    515a:	f004 f9d3 	bl	9504 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    515e:	3501      	adds	r5, #1
    5160:	2d08      	cmp	r5, #8
    5162:	d1f2      	bne.n	514a <usbd_work_handler+0x1e2>
		if (ep_ctx->cfg.en) {
    5164:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    5168:	b11b      	cbz	r3, 5172 <usbd_work_handler+0x20a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    516a:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    516e:	f004 f9c9 	bl	9504 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    5172:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    5174:	b2e8      	uxtb	r0, r5
    5176:	f7ff fc85 	bl	4a84 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    517a:	7a03      	ldrb	r3, [r0, #8]
    517c:	b113      	cbz	r3, 5184 <usbd_work_handler+0x21c>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    517e:	7a40      	ldrb	r0, [r0, #9]
    5180:	f004 f9c0 	bl	9504 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    5184:	3501      	adds	r5, #1
    5186:	2d08      	cmp	r5, #8
    5188:	d1f4      	bne.n	5174 <usbd_work_handler+0x20c>
		if (ep_ctx->cfg.en) {
    518a:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    518e:	b11b      	cbz	r3, 5198 <usbd_work_handler+0x230>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    5190:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    5194:	f004 f9b6 	bl	9504 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    5198:	2001      	movs	r0, #1
    519a:	f003 fd45 	bl	8c28 <nrfx_usbd_start>
		ctx->ready = true;
    519e:	2301      	movs	r3, #1
    51a0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    51a4:	6823      	ldr	r3, [r4, #0]
    51a6:	2b00      	cmp	r3, #0
    51a8:	f43f af58 	beq.w	505c <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    51ac:	2100      	movs	r1, #0
    51ae:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_RESET, NULL);
    51b0:	4798      	blx	r3
    51b2:	e753      	b.n	505c <usbd_work_handler+0xf4>
		ctx->ready = false;
    51b4:	2500      	movs	r5, #0
    51b6:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    51ba:	f004 f95d 	bl	9478 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    51be:	f7ff fdc7 	bl	4d50 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    51c2:	6823      	ldr	r3, [r4, #0]
    51c4:	2b00      	cmp	r3, #0
    51c6:	f43f af49 	beq.w	505c <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    51ca:	4629      	mov	r1, r5
    51cc:	2004      	movs	r0, #4
    51ce:	e7ef      	b.n	51b0 <usbd_work_handler+0x248>
		if (dev_ready()) {
    51d0:	2a00      	cmp	r2, #0
    51d2:	f43f af43 	beq.w	505c <usbd_work_handler+0xf4>
			nrfx_usbd_suspend();
    51d6:	f003 fd4f 	bl	8c78 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    51da:	6823      	ldr	r3, [r4, #0]
    51dc:	2b00      	cmp	r3, #0
    51de:	f43f af3d 	beq.w	505c <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    51e2:	2100      	movs	r1, #0
    51e4:	2005      	movs	r0, #5
    51e6:	e7e3      	b.n	51b0 <usbd_work_handler+0x248>
		if (ctx->status_cb && dev_ready()) {
    51e8:	6823      	ldr	r3, [r4, #0]
    51ea:	2b00      	cmp	r3, #0
    51ec:	f43f af36 	beq.w	505c <usbd_work_handler+0xf4>
    51f0:	2a00      	cmp	r2, #0
    51f2:	f43f af33 	beq.w	505c <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_RESUME, NULL);
    51f6:	2100      	movs	r1, #0
    51f8:	2006      	movs	r0, #6
    51fa:	e7d9      	b.n	51b0 <usbd_work_handler+0x248>
    51fc:	20000e64 	.word	0x20000e64
    5200:	200002c8 	.word	0x200002c8
    5204:	0000dfab 	.word	0x0000dfab
    5208:	0000d030 	.word	0x0000d030
    520c:	40027000 	.word	0x40027000
    5210:	20000e68 	.word	0x20000e68
    5214:	20000e9c 	.word	0x20000e9c
    5218:	0bad0000 	.word	0x0bad0000
    521c:	0000dfd1 	.word	0x0000dfd1
    5220:	20000e84 	.word	0x20000e84
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5224:	f108 0510 	add.w	r5, r8, #16
    5228:	f04f 33ff 	mov.w	r3, #4294967295
    522c:	f04f 32ff 	mov.w	r2, #4294967295
    5230:	4628      	mov	r0, r5
    5232:	f006 fda6 	bl	bd82 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    5236:	f7ff fe63 	bl	4f00 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    523a:	4628      	mov	r0, r5
    523c:	f006 fda3 	bl	bd86 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    5240:	f858 3c28 	ldr.w	r3, [r8, #-40]
    5244:	2b00      	cmp	r3, #0
    5246:	f43f af09 	beq.w	505c <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_RESET, NULL);
    524a:	2100      	movs	r1, #0
    524c:	2001      	movs	r0, #1
    524e:	e7af      	b.n	51b0 <usbd_work_handler+0x248>
	if (ep_ctx->cfg.en) {
    5250:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    5254:	b193      	cbz	r3, 527c <usbd_work_handler+0x314>
		ep_ctx->read_pending = true;
    5256:	2501      	movs	r5, #1
    5258:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    525c:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    5260:	f7ff fc64 	bl	4b2c <usbd_evt_alloc>
		if (!ev) {
    5264:	b990      	cbnz	r0, 528c <usbd_work_handler+0x324>
			LOG_ERR("Failed to alloc evt");
    5266:	4b23      	ldr	r3, [pc, #140]	; (52f4 <usbd_work_handler+0x38c>)
    5268:	617b      	str	r3, [r7, #20]
    526a:	2302      	movs	r3, #2
    526c:	4822      	ldr	r0, [pc, #136]	; (52f8 <usbd_work_handler+0x390>)
    526e:	613b      	str	r3, [r7, #16]
    5270:	f107 0210 	add.w	r2, r7, #16
    5274:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5278:	f006 fd80 	bl	bd7c <z_log_msg_static_create.constprop.0>
			if (ctx->status_cb) {
    527c:	f858 3c28 	ldr.w	r3, [r8, #-40]
    5280:	2b00      	cmp	r3, #0
    5282:	f43f aeeb 	beq.w	505c <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_SOF, NULL);
    5286:	2100      	movs	r1, #0
    5288:	200a      	movs	r0, #10
    528a:	e791      	b.n	51b0 <usbd_work_handler+0x248>
		ev->evt.ep_evt.ep = ep_ctx;
    528c:	4a1b      	ldr	r2, [pc, #108]	; (52fc <usbd_work_handler+0x394>)
		ev->evt_type = USBD_EVT_EP;
    528e:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    5290:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    5292:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    5294:	f7ff fc2e 	bl	4af4 <usbd_evt_put>
		usbd_work_schedule();
    5298:	f7ff fc24 	bl	4ae4 <usbd_work_schedule>
    529c:	e7ee      	b.n	527c <usbd_work_handler+0x314>
				LOG_ERR("USBD event queue full!");
    529e:	4b18      	ldr	r3, [pc, #96]	; (5300 <usbd_work_handler+0x398>)
    52a0:	617b      	str	r3, [r7, #20]
    52a2:	2302      	movs	r3, #2
    52a4:	613b      	str	r3, [r7, #16]
    52a6:	f107 0210 	add.w	r2, r7, #16
    52aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    52ae:	4812      	ldr	r0, [pc, #72]	; (52f8 <usbd_work_handler+0x390>)
    52b0:	f006 fd64 	bl	bd7c <z_log_msg_static_create.constprop.0>
	nrfx_power_usbevt_disable();
    52b4:	f007 f8f9 	bl	c4aa <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    52b8:	f004 f8de 	bl	9478 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    52bc:	f003 fc5a 	bl	8b74 <nrfx_usbd_uninit>
	usbd_evt_flush();
    52c0:	f7ff fc26 	bl	4b10 <usbd_evt_flush>
	ret = eps_ctx_init();
    52c4:	f7ff fe1c 	bl	4f00 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    52c8:	f007 f8e8 	bl	c49c <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    52cc:	480d      	ldr	r0, [pc, #52]	; (5304 <usbd_work_handler+0x39c>)
    52ce:	f003 fcff 	bl	8cd0 <nrfx_usbd_init>
}
    52d2:	e6c3      	b.n	505c <usbd_work_handler+0xf4>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    52d4:	466d      	mov	r5, sp
    52d6:	b088      	sub	sp, #32
    52d8:	466a      	mov	r2, sp
    52da:	490b      	ldr	r1, [pc, #44]	; (5308 <usbd_work_handler+0x3a0>)
    52dc:	4806      	ldr	r0, [pc, #24]	; (52f8 <usbd_work_handler+0x390>)
		switch (ev->evt_type) {
    52de:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    52e2:	2303      	movs	r3, #3
    52e4:	f842 3f10 	str.w	r3, [r2, #16]!
    52e8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    52ec:	f006 fd46 	bl	bd7c <z_log_msg_static_create.constprop.0>
    52f0:	46ad      	mov	sp, r5
    52f2:	e6b3      	b.n	505c <usbd_work_handler+0xf4>
    52f4:	0000dff7 	.word	0x0000dff7
    52f8:	0000d030 	.word	0x0000d030
    52fc:	200010d0 	.word	0x200010d0
    5300:	0000e00b 	.word	0x0000e00b
    5304:	00004d91 	.word	0x00004d91
    5308:	0000e022 	.word	0x0000e022

0000530c <usb_dc_attach>:
{
    530c:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    530e:	4d16      	ldr	r5, [pc, #88]	; (5368 <usb_dc_attach+0x5c>)
    5310:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    5314:	bb2c      	cbnz	r4, 5362 <usb_dc_attach+0x56>
	return z_impl_k_mutex_init(mutex);
    5316:	f105 0038 	add.w	r0, r5, #56	; 0x38
    531a:	f007 fa4a 	bl	c7b2 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    531e:	4620      	mov	r0, r4
    5320:	f000 fbce 	bl	5ac0 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5324:	4622      	mov	r2, r4
    5326:	2101      	movs	r1, #1
	ctx->hfxo_mgr =
    5328:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    532a:	2027      	movs	r0, #39	; 0x27
    532c:	f7fe fc6a 	bl	3c04 <z_arm_irq_priority_set>
	nrfx_power_usbevt_enable();
    5330:	f007 f8b4 	bl	c49c <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    5334:	f7ff fde4 	bl	4f00 <eps_ctx_init>
	if (ret == 0) {
    5338:	4604      	mov	r4, r0
    533a:	b910      	cbnz	r0, 5342 <usb_dc_attach+0x36>
		ctx->attached = true;
    533c:	2301      	movs	r3, #1
    533e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    5342:	4b0a      	ldr	r3, [pc, #40]	; (536c <usb_dc_attach+0x60>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    5344:	681b      	ldr	r3, [r3, #0]
    5346:	b10b      	cbz	r3, 534c <usb_dc_attach+0x40>
		usbd_work_schedule();
    5348:	f7ff fbcc 	bl	4ae4 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    534c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5350:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    5354:	07db      	lsls	r3, r3, #31
    5356:	d502      	bpl.n	535e <usb_dc_attach+0x52>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    5358:	2000      	movs	r0, #0
    535a:	f7ff fc23 	bl	4ba4 <usb_dc_power_event_handler>
}
    535e:	4620      	mov	r0, r4
    5360:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    5362:	2400      	movs	r4, #0
    5364:	e7fb      	b.n	535e <usb_dc_attach+0x52>
    5366:	bf00      	nop
    5368:	20000e64 	.word	0x20000e64
    536c:	20000340 	.word	0x20000340

00005370 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    5370:	4b07      	ldr	r3, [pc, #28]	; (5390 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    5372:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    5376:	b13a      	cbz	r2, 5388 <usb_dc_set_address+0x18>
    5378:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
    537c:	2b00      	cmp	r3, #0
    537e:	bf14      	ite	ne
    5380:	2000      	movne	r0, #0
    5382:	f06f 0012 	mvneq.w	r0, #18
    5386:	4770      	bx	lr
    5388:	f06f 0012 	mvn.w	r0, #18
}
    538c:	4770      	bx	lr
    538e:	bf00      	nop
    5390:	20000e64 	.word	0x20000e64

00005394 <usb_dc_ep_check_cap>:
{
    5394:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    5396:	4603      	mov	r3, r0
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    5398:	7802      	ldrb	r2, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    539a:	791b      	ldrb	r3, [r3, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    539c:	f002 000f 	and.w	r0, r2, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    53a0:	b97b      	cbnz	r3, 53c2 <usb_dc_ep_check_cap+0x2e>
    53a2:	b158      	cbz	r0, 53bc <usb_dc_ep_check_cap+0x28>
		LOG_ERR("invalid endpoint configuration");
    53a4:	4b10      	ldr	r3, [pc, #64]	; (53e8 <usb_dc_ep_check_cap+0x54>)
		LOG_ERR("invalid endpoint index/address");
    53a6:	9305      	str	r3, [sp, #20]
    53a8:	2302      	movs	r3, #2
    53aa:	9304      	str	r3, [sp, #16]
    53ac:	aa04      	add	r2, sp, #16
    53ae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    53b2:	480e      	ldr	r0, [pc, #56]	; (53ec <usb_dc_ep_check_cap+0x58>)
    53b4:	f006 fce2 	bl	bd7c <z_log_msg_static_create.constprop.0>
		return -1;
    53b8:	f04f 30ff 	mov.w	r0, #4294967295
}
    53bc:	b007      	add	sp, #28
    53be:	f85d fb04 	ldr.w	pc, [sp], #4
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    53c2:	2808      	cmp	r0, #8
    53c4:	d901      	bls.n	53ca <usb_dc_ep_check_cap+0x36>
		LOG_ERR("invalid endpoint index/address");
    53c6:	4b0a      	ldr	r3, [pc, #40]	; (53f0 <usb_dc_ep_check_cap+0x5c>)
    53c8:	e7ed      	b.n	53a6 <usb_dc_ep_check_cap+0x12>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    53ca:	2b01      	cmp	r3, #1
    53cc:	d109      	bne.n	53e2 <usb_dc_ep_check_cap+0x4e>
    53ce:	0713      	lsls	r3, r2, #28
    53d0:	d407      	bmi.n	53e2 <usb_dc_ep_check_cap+0x4e>
		LOG_WRN("invalid endpoint type");
    53d2:	4b08      	ldr	r3, [pc, #32]	; (53f4 <usb_dc_ep_check_cap+0x60>)
    53d4:	9305      	str	r3, [sp, #20]
    53d6:	2302      	movs	r3, #2
    53d8:	9304      	str	r3, [sp, #16]
    53da:	aa04      	add	r2, sp, #16
    53dc:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    53e0:	e7e7      	b.n	53b2 <usb_dc_ep_check_cap+0x1e>
	return 0;
    53e2:	2000      	movs	r0, #0
    53e4:	e7ea      	b.n	53bc <usb_dc_ep_check_cap+0x28>
    53e6:	bf00      	nop
    53e8:	0000e039 	.word	0x0000e039
    53ec:	0000d030 	.word	0x0000d030
    53f0:	0000e058 	.word	0x0000e058
    53f4:	0000e077 	.word	0x0000e077

000053f8 <usb_dc_ep_configure>:
{
    53f8:	b530      	push	{r4, r5, lr}
	return get_usbd_ctx()->attached;
    53fa:	4b16      	ldr	r3, [pc, #88]	; (5454 <usb_dc_ep_configure+0x5c>)
	if (!dev_attached()) {
    53fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    5400:	b087      	sub	sp, #28
    5402:	4604      	mov	r4, r0
	if (!dev_attached()) {
    5404:	b31b      	cbz	r3, 544e <usb_dc_ep_configure+0x56>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    5406:	7805      	ldrb	r5, [r0, #0]
    5408:	4628      	mov	r0, r5
    540a:	f7ff fb3b 	bl	4a84 <endpoint_ctx>
	if (!ep_ctx) {
    540e:	b1b0      	cbz	r0, 543e <usb_dc_ep_configure+0x46>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    5410:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    5412:	7923      	ldrb	r3, [r4, #4]
    5414:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    5416:	8863      	ldrh	r3, [r4, #2]
    5418:	6043      	str	r3, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    541a:	7820      	ldrb	r0, [r4, #0]
    541c:	8861      	ldrh	r1, [r4, #2]
    541e:	f010 0f08 	tst.w	r0, #8
    5422:	d110      	bne.n	5446 <usb_dc_ep_configure+0x4e>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    5424:	1e4b      	subs	r3, r1, #1
    5426:	420b      	tst	r3, r1
    5428:	d00d      	beq.n	5446 <usb_dc_ep_configure+0x4e>
			LOG_ERR("EP max packet size must be a power of 2");
    542a:	4b0b      	ldr	r3, [pc, #44]	; (5458 <usb_dc_ep_configure+0x60>)
    542c:	9305      	str	r3, [sp, #20]
    542e:	480b      	ldr	r0, [pc, #44]	; (545c <usb_dc_ep_configure+0x64>)
    5430:	2302      	movs	r3, #2
    5432:	aa04      	add	r2, sp, #16
    5434:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5438:	9304      	str	r3, [sp, #16]
    543a:	f006 fc9f 	bl	bd7c <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    543e:	f06f 0015 	mvn.w	r0, #21
}
    5442:	b007      	add	sp, #28
    5444:	bd30      	pop	{r4, r5, pc}
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    5446:	f007 f8c1 	bl	c5cc <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    544a:	2000      	movs	r0, #0
    544c:	e7f9      	b.n	5442 <usb_dc_ep_configure+0x4a>
		return -ENODEV;
    544e:	f06f 0012 	mvn.w	r0, #18
    5452:	e7f6      	b.n	5442 <usb_dc_ep_configure+0x4a>
    5454:	20000e64 	.word	0x20000e64
    5458:	0000e08d 	.word	0x0000e08d
    545c:	0000d030 	.word	0x0000d030

00005460 <usb_dc_ep_set_stall>:
{
    5460:	b530      	push	{r4, r5, lr}
	return get_usbd_ctx()->attached;
    5462:	4b19      	ldr	r3, [pc, #100]	; (54c8 <usb_dc_ep_set_stall+0x68>)
	if (!dev_attached() || !dev_ready()) {
    5464:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    5468:	b087      	sub	sp, #28
    546a:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    546c:	b342      	cbz	r2, 54c0 <usb_dc_ep_set_stall+0x60>
    546e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5472:	b32b      	cbz	r3, 54c0 <usb_dc_ep_set_stall+0x60>
	ep_ctx = endpoint_ctx(ep);
    5474:	f7ff fb06 	bl	4a84 <endpoint_ctx>
	if (!ep_ctx) {
    5478:	4604      	mov	r4, r0
    547a:	b918      	cbnz	r0, 5484 <usb_dc_ep_set_stall+0x24>
		return -EINVAL;
    547c:	f06f 0015 	mvn.w	r0, #21
}
    5480:	b007      	add	sp, #28
    5482:	bd30      	pop	{r4, r5, pc}
	switch (ep_ctx->cfg.type) {
    5484:	7a83      	ldrb	r3, [r0, #10]
    5486:	2b01      	cmp	r3, #1
    5488:	d00f      	beq.n	54aa <usb_dc_ep_set_stall+0x4a>
    548a:	d907      	bls.n	549c <usb_dc_ep_set_stall+0x3c>
    548c:	3b02      	subs	r3, #2
    548e:	2b01      	cmp	r3, #1
    5490:	d907      	bls.n	54a2 <usb_dc_ep_set_stall+0x42>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    5492:	6963      	ldr	r3, [r4, #20]
    5494:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    5496:	2000      	movs	r0, #0
    5498:	60e0      	str	r0, [r4, #12]
	return 0;
    549a:	e7f1      	b.n	5480 <usb_dc_ep_set_stall+0x20>
		nrfx_usbd_setup_stall();
    549c:	f003 fe88 	bl	91b0 <nrfx_usbd_setup_stall>
		break;
    54a0:	e7f7      	b.n	5492 <usb_dc_ep_set_stall+0x32>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    54a2:	4628      	mov	r0, r5
    54a4:	f003 fdf4 	bl	9090 <nrfx_usbd_ep_stall>
		break;
    54a8:	e7f3      	b.n	5492 <usb_dc_ep_set_stall+0x32>
		LOG_ERR("STALL unsupported on ISO endpoint");
    54aa:	4b08      	ldr	r3, [pc, #32]	; (54cc <usb_dc_ep_set_stall+0x6c>)
    54ac:	9305      	str	r3, [sp, #20]
    54ae:	4808      	ldr	r0, [pc, #32]	; (54d0 <usb_dc_ep_set_stall+0x70>)
    54b0:	2302      	movs	r3, #2
    54b2:	aa04      	add	r2, sp, #16
    54b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    54b8:	9304      	str	r3, [sp, #16]
    54ba:	f006 fc5f 	bl	bd7c <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    54be:	e7dd      	b.n	547c <usb_dc_ep_set_stall+0x1c>
		return -ENODEV;
    54c0:	f06f 0012 	mvn.w	r0, #18
    54c4:	e7dc      	b.n	5480 <usb_dc_ep_set_stall+0x20>
    54c6:	bf00      	nop
    54c8:	20000e64 	.word	0x20000e64
    54cc:	0000e0b5 	.word	0x0000e0b5
    54d0:	0000d030 	.word	0x0000d030

000054d4 <usb_dc_ep_clear_stall>:
{
    54d4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    54d6:	4b0e      	ldr	r3, [pc, #56]	; (5510 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    54d8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    54dc:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    54de:	b182      	cbz	r2, 5502 <usb_dc_ep_clear_stall+0x2e>
    54e0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    54e4:	b16b      	cbz	r3, 5502 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    54e6:	f7ff facd 	bl	4a84 <endpoint_ctx>
	if (!ep_ctx) {
    54ea:	b168      	cbz	r0, 5508 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    54ec:	f015 0408 	ands.w	r4, r5, #8
    54f0:	d10a      	bne.n	5508 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    54f2:	4628      	mov	r0, r5
    54f4:	f003 fdee 	bl	90d4 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    54f8:	4628      	mov	r0, r5
    54fa:	f004 f857 	bl	95ac <nrfx_usbd_ep_stall_clear>
	return 0;
    54fe:	4620      	mov	r0, r4
}
    5500:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    5502:	f06f 0012 	mvn.w	r0, #18
    5506:	e7fb      	b.n	5500 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    5508:	f06f 0015 	mvn.w	r0, #21
    550c:	e7f8      	b.n	5500 <usb_dc_ep_clear_stall+0x2c>
    550e:	bf00      	nop
    5510:	20000e64 	.word	0x20000e64

00005514 <usb_dc_ep_is_stalled>:
{
    5514:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    5516:	4b0c      	ldr	r3, [pc, #48]	; (5548 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    5518:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    551c:	4605      	mov	r5, r0
    551e:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    5520:	b162      	cbz	r2, 553c <usb_dc_ep_is_stalled+0x28>
    5522:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5526:	b14b      	cbz	r3, 553c <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    5528:	f7ff faac 	bl	4a84 <endpoint_ctx>
	if (!ep_ctx) {
    552c:	b148      	cbz	r0, 5542 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    552e:	b144      	cbz	r4, 5542 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    5530:	4628      	mov	r0, r5
    5532:	f003 fdb5 	bl	90a0 <nrfx_usbd_ep_stall_check>
    5536:	7020      	strb	r0, [r4, #0]
	return 0;
    5538:	2000      	movs	r0, #0
}
    553a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    553c:	f06f 0012 	mvn.w	r0, #18
    5540:	e7fb      	b.n	553a <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    5542:	f06f 0015 	mvn.w	r0, #21
    5546:	e7f8      	b.n	553a <usb_dc_ep_is_stalled+0x26>
    5548:	20000e64 	.word	0x20000e64

0000554c <usb_dc_ep_enable>:
{
    554c:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    554e:	4e13      	ldr	r6, [pc, #76]	; (559c <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    5550:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
{
    5554:	4604      	mov	r4, r0
	if (!dev_attached()) {
    5556:	b1c3      	cbz	r3, 558a <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
    5558:	f7ff fa94 	bl	4a84 <endpoint_ctx>
	if (!ep_ctx) {
    555c:	4605      	mov	r5, r0
    555e:	b1b8      	cbz	r0, 5590 <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    5560:	0723      	lsls	r3, r4, #28
    5562:	d405      	bmi.n	5570 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    5564:	4620      	mov	r0, r4
    5566:	f003 fdb5 	bl	90d4 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    556a:	4620      	mov	r0, r4
    556c:	f004 f81e 	bl	95ac <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    5570:	7a2b      	ldrb	r3, [r5, #8]
    5572:	b983      	cbnz	r3, 5596 <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
    5574:	2301      	movs	r3, #1
    5576:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    5578:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
    557c:	b90b      	cbnz	r3, 5582 <usb_dc_ep_enable+0x36>
	return 0;
    557e:	2000      	movs	r0, #0
}
    5580:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    5582:	4620      	mov	r0, r4
    5584:	f003 ffbe 	bl	9504 <nrfx_usbd_ep_enable>
    5588:	e7f9      	b.n	557e <usb_dc_ep_enable+0x32>
		return -ENODEV;
    558a:	f06f 0012 	mvn.w	r0, #18
    558e:	e7f7      	b.n	5580 <usb_dc_ep_enable+0x34>
		return -EINVAL;
    5590:	f06f 0015 	mvn.w	r0, #21
    5594:	e7f4      	b.n	5580 <usb_dc_ep_enable+0x34>
		return -EALREADY;
    5596:	f06f 0077 	mvn.w	r0, #119	; 0x77
    559a:	e7f1      	b.n	5580 <usb_dc_ep_enable+0x34>
    559c:	20000e64 	.word	0x20000e64

000055a0 <usb_dc_ep_write>:
{
    55a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->attached;
    55a4:	f8df 9124 	ldr.w	r9, [pc, #292]	; 56cc <usb_dc_ep_write+0x12c>
{
    55a8:	b084      	sub	sp, #16
    55aa:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
    55ac:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
{
    55b0:	af00      	add	r7, sp, #0
    55b2:	4680      	mov	r8, r0
    55b4:	468a      	mov	sl, r1
    55b6:	4615      	mov	r5, r2
	if (!dev_attached() || !dev_ready()) {
    55b8:	2b00      	cmp	r3, #0
    55ba:	f000 8083 	beq.w	56c4 <usb_dc_ep_write+0x124>
    55be:	f899 3025 	ldrb.w	r3, [r9, #37]	; 0x25
    55c2:	2b00      	cmp	r3, #0
    55c4:	d07e      	beq.n	56c4 <usb_dc_ep_write+0x124>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    55c6:	f010 0f80 	tst.w	r0, #128	; 0x80
    55ca:	d014      	beq.n	55f6 <usb_dc_ep_write+0x56>
	ep_ctx = endpoint_ctx(ep);
    55cc:	f7ff fa5a 	bl	4a84 <endpoint_ctx>
	if (!ep_ctx) {
    55d0:	4604      	mov	r4, r0
    55d2:	b180      	cbz	r0, 55f6 <usb_dc_ep_write+0x56>
	if (!ep_ctx->cfg.en) {
    55d4:	7a03      	ldrb	r3, [r0, #8]
    55d6:	b9ab      	cbnz	r3, 5604 <usb_dc_ep_write+0x64>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    55d8:	466c      	mov	r4, sp
    55da:	b088      	sub	sp, #32
    55dc:	466a      	mov	r2, sp
    55de:	4b3c      	ldr	r3, [pc, #240]	; (56d0 <usb_dc_ep_write+0x130>)
    55e0:	483c      	ldr	r0, [pc, #240]	; (56d4 <usb_dc_ep_write+0x134>)
    55e2:	e9c2 3805 	strd	r3, r8, [r2, #20]
    55e6:	2303      	movs	r3, #3
    55e8:	f842 3f10 	str.w	r3, [r2, #16]!
    55ec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    55f0:	f006 fbc4 	bl	bd7c <z_log_msg_static_create.constprop.0>
    55f4:	46a5      	mov	sp, r4
		return -EINVAL;
    55f6:	f06f 0415 	mvn.w	r4, #21
}
    55fa:	4620      	mov	r0, r4
    55fc:	3710      	adds	r7, #16
    55fe:	46bd      	mov	sp, r7
    5600:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5604:	f04f 33ff 	mov.w	r3, #4294967295
    5608:	f04f 32ff 	mov.w	r2, #4294967295
    560c:	f109 0038 	add.w	r0, r9, #56	; 0x38
    5610:	f006 fbb7 	bl	bd82 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    5614:	7fa3      	ldrb	r3, [r4, #30]
    5616:	b133      	cbz	r3, 5626 <usb_dc_ep_write+0x86>
		k_mutex_unlock(&ctx->drv_lock);
    5618:	f109 0038 	add.w	r0, r9, #56	; 0x38
    561c:	f006 fbb3 	bl	bd86 <k_mutex_unlock.isra.0>
		return -EAGAIN;
    5620:	f06f 040a 	mvn.w	r4, #10
    5624:	e7e9      	b.n	55fa <usb_dc_ep_write+0x5a>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    5626:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
    5628:	b355      	cbz	r5, 5680 <usb_dc_ep_write+0xe0>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    562a:	2b00      	cmp	r3, #0
    562c:	d038      	beq.n	56a0 <usb_dc_ep_write+0x100>
	ep_ctx->write_in_progress = true;
    562e:	2301      	movs	r3, #1
    5630:	77a3      	strb	r3, [r4, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    5632:	f04f 0900 	mov.w	r9, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    5636:	1d39      	adds	r1, r7, #4
    5638:	4640      	mov	r0, r8
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    563a:	e9c7 a501 	strd	sl, r5, [r7, #4]
    563e:	f8c7 900c 	str.w	r9, [r7, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    5642:	f003 fb87 	bl	8d54 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    5646:	4b24      	ldr	r3, [pc, #144]	; (56d8 <usb_dc_ep_write+0x138>)
    5648:	4298      	cmp	r0, r3
    564a:	d037      	beq.n	56bc <usb_dc_ep_write+0x11c>
		ep_ctx->write_in_progress = false;
    564c:	f884 901e 	strb.w	r9, [r4, #30]
		if (ret_bytes) {
    5650:	b10e      	cbz	r6, 5656 <usb_dc_ep_write+0xb6>
			*ret_bytes = 0;
    5652:	f8c6 9000 	str.w	r9, [r6]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    5656:	466c      	mov	r4, sp
    5658:	b088      	sub	sp, #32
    565a:	466a      	mov	r2, sp
    565c:	4b1f      	ldr	r3, [pc, #124]	; (56dc <usb_dc_ep_write+0x13c>)
    565e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    5662:	2303      	movs	r3, #3
    5664:	f842 3f10 	str.w	r3, [r2, #16]!
    5668:	481a      	ldr	r0, [pc, #104]	; (56d4 <usb_dc_ep_write+0x134>)
    566a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    566e:	f006 fb85 	bl	bd7c <z_log_msg_static_create.constprop.0>
    5672:	46a5      	mov	sp, r4
		result = -EIO;
    5674:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
    5678:	4819      	ldr	r0, [pc, #100]	; (56e0 <usb_dc_ep_write+0x140>)
    567a:	f006 fb84 	bl	bd86 <k_mutex_unlock.isra.0>
	return result;
    567e:	e7bc      	b.n	55fa <usb_dc_ep_write+0x5a>
	if (!data_len && ep_ctx->trans_zlp) {
    5680:	7fe2      	ldrb	r2, [r4, #31]
    5682:	b102      	cbz	r2, 5686 <usb_dc_ep_write+0xe6>
		ep_ctx->trans_zlp = false;
    5684:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    5686:	2b00      	cmp	r3, #0
    5688:	d1d1      	bne.n	562e <usb_dc_ep_write+0x8e>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    568a:	f003 fd99 	bl	91c0 <nrfx_usbd_last_setup_dir_get>
    568e:	4580      	cmp	r8, r0
    5690:	d0cd      	beq.n	562e <usb_dc_ep_write+0x8e>
		nrfx_usbd_setup_clear();
    5692:	f003 fd85 	bl	91a0 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    5696:	4812      	ldr	r0, [pc, #72]	; (56e0 <usb_dc_ep_write+0x140>)
    5698:	f006 fb75 	bl	bd86 <k_mutex_unlock.isra.0>
		return 0;
    569c:	2400      	movs	r4, #0
    569e:	e7ac      	b.n	55fa <usb_dc_ep_write+0x5a>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    56a0:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    56a4:	429d      	cmp	r5, r3
    56a6:	d2f0      	bcs.n	568a <usb_dc_ep_write+0xea>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    56a8:	6862      	ldr	r2, [r4, #4]
    56aa:	fbb5 f3f2 	udiv	r3, r5, r2
    56ae:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    56b2:	2b00      	cmp	r3, #0
    56b4:	d1e9      	bne.n	568a <usb_dc_ep_write+0xea>
			ep_ctx->trans_zlp = true;
    56b6:	2301      	movs	r3, #1
    56b8:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    56ba:	e7e6      	b.n	568a <usb_dc_ep_write+0xea>
		if (ret_bytes) {
    56bc:	b106      	cbz	r6, 56c0 <usb_dc_ep_write+0x120>
			*ret_bytes = data_len;
    56be:	6035      	str	r5, [r6, #0]
	int result = 0;
    56c0:	2400      	movs	r4, #0
    56c2:	e7d9      	b.n	5678 <usb_dc_ep_write+0xd8>
		return -ENODEV;
    56c4:	f06f 0412 	mvn.w	r4, #18
    56c8:	e797      	b.n	55fa <usb_dc_ep_write+0x5a>
    56ca:	bf00      	nop
    56cc:	20000e64 	.word	0x20000e64
    56d0:	0000e0d7 	.word	0x0000e0d7
    56d4:	0000d030 	.word	0x0000d030
    56d8:	0bad0000 	.word	0x0bad0000
    56dc:	0000e0f6 	.word	0x0000e0f6
    56e0:	20000e9c 	.word	0x20000e9c

000056e4 <usb_dc_ep_read_wait>:
{
    56e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    56e8:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    56ea:	4b2d      	ldr	r3, [pc, #180]	; (57a0 <usb_dc_ep_read_wait+0xbc>)
{
    56ec:	4690      	mov	r8, r2
	if (!dev_attached() || !dev_ready()) {
    56ee:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    56f2:	af00      	add	r7, sp, #0
    56f4:	4681      	mov	r9, r0
    56f6:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    56f8:	2a00      	cmp	r2, #0
    56fa:	d04d      	beq.n	5798 <usb_dc_ep_read_wait+0xb4>
    56fc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5700:	2b00      	cmp	r3, #0
    5702:	d049      	beq.n	5798 <usb_dc_ep_read_wait+0xb4>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    5704:	f010 0f80 	tst.w	r0, #128	; 0x80
    5708:	d119      	bne.n	573e <usb_dc_ep_read_wait+0x5a>
	if (!data && max_data_len) {
    570a:	b911      	cbnz	r1, 5712 <usb_dc_ep_read_wait+0x2e>
    570c:	f1b8 0f00 	cmp.w	r8, #0
    5710:	d115      	bne.n	573e <usb_dc_ep_read_wait+0x5a>
	ep_ctx = endpoint_ctx(ep);
    5712:	4648      	mov	r0, r9
    5714:	f7ff f9b6 	bl	4a84 <endpoint_ctx>
	if (!ep_ctx) {
    5718:	4604      	mov	r4, r0
    571a:	b180      	cbz	r0, 573e <usb_dc_ep_read_wait+0x5a>
	if (!ep_ctx->cfg.en) {
    571c:	7a03      	ldrb	r3, [r0, #8]
    571e:	b98b      	cbnz	r3, 5744 <usb_dc_ep_read_wait+0x60>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    5720:	466c      	mov	r4, sp
    5722:	b088      	sub	sp, #32
    5724:	466a      	mov	r2, sp
    5726:	4b1f      	ldr	r3, [pc, #124]	; (57a4 <usb_dc_ep_read_wait+0xc0>)
    5728:	481f      	ldr	r0, [pc, #124]	; (57a8 <usb_dc_ep_read_wait+0xc4>)
    572a:	e9c2 3905 	strd	r3, r9, [r2, #20]
    572e:	2303      	movs	r3, #3
    5730:	f842 3f10 	str.w	r3, [r2, #16]!
    5734:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5738:	f006 fb20 	bl	bd7c <z_log_msg_static_create.constprop.0>
    573c:	46a5      	mov	sp, r4
		return -EINVAL;
    573e:	f06f 0015 	mvn.w	r0, #21
    5742:	e015      	b.n	5770 <usb_dc_ep_read_wait+0x8c>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5744:	f04f 33ff 	mov.w	r3, #4294967295
    5748:	4818      	ldr	r0, [pc, #96]	; (57ac <usb_dc_ep_read_wait+0xc8>)
    574a:	f04f 32ff 	mov.w	r2, #4294967295
    574e:	f006 fb18 	bl	bd82 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    5752:	68e3      	ldr	r3, [r4, #12]
    5754:	4598      	cmp	r8, r3
    5756:	46c1      	mov	r9, r8
    5758:	bf28      	it	cs
    575a:	4699      	movcs	r9, r3
	if (!data && !max_data_len) {
    575c:	b95e      	cbnz	r6, 5776 <usb_dc_ep_read_wait+0x92>
    575e:	f1b8 0f00 	cmp.w	r8, #0
    5762:	d108      	bne.n	5776 <usb_dc_ep_read_wait+0x92>
		if (read_bytes) {
    5764:	b105      	cbz	r5, 5768 <usb_dc_ep_read_wait+0x84>
			*read_bytes = ep_ctx->buf.len;
    5766:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    5768:	4810      	ldr	r0, [pc, #64]	; (57ac <usb_dc_ep_read_wait+0xc8>)
    576a:	f006 fb0c 	bl	bd86 <k_mutex_unlock.isra.0>
		return 0;
    576e:	2000      	movs	r0, #0
}
    5770:	46bd      	mov	sp, r7
    5772:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    5776:	69a1      	ldr	r1, [r4, #24]
    5778:	464a      	mov	r2, r9
    577a:	4630      	mov	r0, r6
    577c:	f006 faa3 	bl	bcc6 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    5780:	69a3      	ldr	r3, [r4, #24]
    5782:	444b      	add	r3, r9
    5784:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    5786:	68e3      	ldr	r3, [r4, #12]
    5788:	eba3 0309 	sub.w	r3, r3, r9
    578c:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    578e:	2d00      	cmp	r5, #0
    5790:	d0ea      	beq.n	5768 <usb_dc_ep_read_wait+0x84>
		*read_bytes = bytes_to_copy;
    5792:	f8c5 9000 	str.w	r9, [r5]
    5796:	e7e7      	b.n	5768 <usb_dc_ep_read_wait+0x84>
		return -ENODEV;
    5798:	f06f 0012 	mvn.w	r0, #18
    579c:	e7e8      	b.n	5770 <usb_dc_ep_read_wait+0x8c>
    579e:	bf00      	nop
    57a0:	20000e64 	.word	0x20000e64
    57a4:	0000e0d7 	.word	0x0000e0d7
    57a8:	0000d030 	.word	0x0000d030
    57ac:	20000e9c 	.word	0x20000e9c

000057b0 <usb_dc_ep_read_continue>:
{
    57b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    57b2:	4d27      	ldr	r5, [pc, #156]	; (5850 <usb_dc_ep_read_continue+0xa0>)
	if (!dev_attached() || !dev_ready()) {
    57b4:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
    57b8:	af00      	add	r7, sp, #0
    57ba:	4606      	mov	r6, r0
	if (!dev_attached() || !dev_ready()) {
    57bc:	2b00      	cmp	r3, #0
    57be:	d044      	beq.n	584a <usb_dc_ep_read_continue+0x9a>
    57c0:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    57c4:	2b00      	cmp	r3, #0
    57c6:	d040      	beq.n	584a <usb_dc_ep_read_continue+0x9a>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    57c8:	0603      	lsls	r3, r0, #24
    57ca:	d414      	bmi.n	57f6 <usb_dc_ep_read_continue+0x46>
	ep_ctx = endpoint_ctx(ep);
    57cc:	f7ff f95a 	bl	4a84 <endpoint_ctx>
	if (!ep_ctx) {
    57d0:	4604      	mov	r4, r0
    57d2:	b180      	cbz	r0, 57f6 <usb_dc_ep_read_continue+0x46>
	if (!ep_ctx->cfg.en) {
    57d4:	7a03      	ldrb	r3, [r0, #8]
    57d6:	b993      	cbnz	r3, 57fe <usb_dc_ep_read_continue+0x4e>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    57d8:	466c      	mov	r4, sp
    57da:	b088      	sub	sp, #32
    57dc:	466a      	mov	r2, sp
    57de:	4b1d      	ldr	r3, [pc, #116]	; (5854 <usb_dc_ep_read_continue+0xa4>)
    57e0:	481d      	ldr	r0, [pc, #116]	; (5858 <usb_dc_ep_read_continue+0xa8>)
    57e2:	e9c2 3605 	strd	r3, r6, [r2, #20]
    57e6:	2303      	movs	r3, #3
    57e8:	f842 3f10 	str.w	r3, [r2, #16]!
    57ec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    57f0:	f006 fac4 	bl	bd7c <z_log_msg_static_create.constprop.0>
    57f4:	46a5      	mov	sp, r4
		return -EINVAL;
    57f6:	f06f 0015 	mvn.w	r0, #21
}
    57fa:	46bd      	mov	sp, r7
    57fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    57fe:	f04f 33ff 	mov.w	r3, #4294967295
    5802:	f04f 32ff 	mov.w	r2, #4294967295
    5806:	f105 0038 	add.w	r0, r5, #56	; 0x38
    580a:	f006 faba 	bl	bd82 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    580e:	68e3      	ldr	r3, [r4, #12]
    5810:	b9b3      	cbnz	r3, 5840 <usb_dc_ep_read_continue+0x90>
		ep_ctx->read_complete = true;
    5812:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    5814:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    5816:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    5818:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    581a:	7f63      	ldrb	r3, [r4, #29]
    581c:	b183      	cbz	r3, 5840 <usb_dc_ep_read_continue+0x90>
			struct usbd_event *ev = usbd_evt_alloc();
    581e:	f7ff f985 	bl	4b2c <usbd_evt_alloc>
			if (!ev) {
    5822:	b930      	cbnz	r0, 5832 <usb_dc_ep_read_continue+0x82>
				k_mutex_unlock(&ctx->drv_lock);
    5824:	f105 0038 	add.w	r0, r5, #56	; 0x38
    5828:	f006 faad 	bl	bd86 <k_mutex_unlock.isra.0>
				return -ENOMEM;
    582c:	f06f 000b 	mvn.w	r0, #11
    5830:	e7e3      	b.n	57fa <usb_dc_ep_read_continue+0x4a>
			ev->evt_type = USBD_EVT_EP;
    5832:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    5834:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    5836:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    5838:	f7ff f95c 	bl	4af4 <usbd_evt_put>
			usbd_work_schedule();
    583c:	f7ff f952 	bl	4ae4 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    5840:	4806      	ldr	r0, [pc, #24]	; (585c <usb_dc_ep_read_continue+0xac>)
    5842:	f006 faa0 	bl	bd86 <k_mutex_unlock.isra.0>
	return 0;
    5846:	2000      	movs	r0, #0
    5848:	e7d7      	b.n	57fa <usb_dc_ep_read_continue+0x4a>
		return -ENODEV;
    584a:	f06f 0012 	mvn.w	r0, #18
    584e:	e7d4      	b.n	57fa <usb_dc_ep_read_continue+0x4a>
    5850:	20000e64 	.word	0x20000e64
    5854:	0000e0d7 	.word	0x0000e0d7
    5858:	0000d030 	.word	0x0000d030
    585c:	20000e9c 	.word	0x20000e9c

00005860 <usb_dc_ep_set_callback>:
{
    5860:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    5862:	4b08      	ldr	r3, [pc, #32]	; (5884 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    5864:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    5868:	460c      	mov	r4, r1
	if (!dev_attached()) {
    586a:	b12b      	cbz	r3, 5878 <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
    586c:	f7ff f90a 	bl	4a84 <endpoint_ctx>
	if (!ep_ctx) {
    5870:	b128      	cbz	r0, 587e <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    5872:	6004      	str	r4, [r0, #0]
	return 0;
    5874:	2000      	movs	r0, #0
}
    5876:	bd10      	pop	{r4, pc}
		return -ENODEV;
    5878:	f06f 0012 	mvn.w	r0, #18
    587c:	e7fb      	b.n	5876 <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
    587e:	f06f 0015 	mvn.w	r0, #21
    5882:	e7f8      	b.n	5876 <usb_dc_ep_set_callback+0x16>
    5884:	20000e64 	.word	0x20000e64

00005888 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    5888:	4b01      	ldr	r3, [pc, #4]	; (5890 <usb_dc_set_status_callback+0x8>)
    588a:	6018      	str	r0, [r3, #0]
}
    588c:	4770      	bx	lr
    588e:	bf00      	nop
    5890:	20000e64 	.word	0x20000e64

00005894 <usb_dc_ep_mps>:
{
    5894:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    5896:	4b07      	ldr	r3, [pc, #28]	; (58b4 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    5898:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    589c:	b123      	cbz	r3, 58a8 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    589e:	f7ff f8f1 	bl	4a84 <endpoint_ctx>
	if (!ep_ctx) {
    58a2:	b120      	cbz	r0, 58ae <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    58a4:	6840      	ldr	r0, [r0, #4]
}
    58a6:	bd08      	pop	{r3, pc}
		return -ENODEV;
    58a8:	f06f 0012 	mvn.w	r0, #18
    58ac:	e7fb      	b.n	58a6 <usb_dc_ep_mps+0x12>
		return -EINVAL;
    58ae:	f06f 0015 	mvn.w	r0, #21
    58b2:	e7f8      	b.n	58a6 <usb_dc_ep_mps+0x12>
    58b4:	20000e64 	.word	0x20000e64

000058b8 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    58b8:	4b08      	ldr	r3, [pc, #32]	; (58dc <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    58ba:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    58bc:	1ac3      	subs	r3, r0, r3
{
    58be:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    58c0:	4907      	ldr	r1, [pc, #28]	; (58e0 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    58c2:	109b      	asrs	r3, r3, #2
{
    58c4:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    58c6:	4359      	muls	r1, r3
    58c8:	4806      	ldr	r0, [pc, #24]	; (58e4 <onoff_stop+0x2c>)
    58ca:	2240      	movs	r2, #64	; 0x40
    58cc:	f006 faa1 	bl	be12 <stop>
	notify(mgr, res);
    58d0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    58d2:	4601      	mov	r1, r0
	notify(mgr, res);
    58d4:	4620      	mov	r0, r4
}
    58d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    58da:	4718      	bx	r3
    58dc:	20001708 	.word	0x20001708
    58e0:	b6db6db7 	.word	0xb6db6db7
    58e4:	0000ce60 	.word	0x0000ce60

000058e8 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    58e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    58ea:	4c0c      	ldr	r4, [pc, #48]	; (591c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    58ec:	4a0c      	ldr	r2, [pc, #48]	; (5920 <onoff_start+0x38>)
    58ee:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    58f0:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    58f2:	9300      	str	r3, [sp, #0]
{
    58f4:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    58f6:	460b      	mov	r3, r1
    58f8:	490a      	ldr	r1, [pc, #40]	; (5924 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    58fa:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    58fc:	4361      	muls	r1, r4
{
    58fe:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5900:	4809      	ldr	r0, [pc, #36]	; (5928 <onoff_start+0x40>)
    5902:	f006 fab2 	bl	be6a <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    5906:	1e01      	subs	r1, r0, #0
    5908:	da05      	bge.n	5916 <onoff_start+0x2e>
		notify(mgr, err);
    590a:	4630      	mov	r0, r6
    590c:	462b      	mov	r3, r5
	}
}
    590e:	b002      	add	sp, #8
    5910:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    5914:	4718      	bx	r3
}
    5916:	b002      	add	sp, #8
    5918:	bd70      	pop	{r4, r5, r6, pc}
    591a:	bf00      	nop
    591c:	20001708 	.word	0x20001708
    5920:	0000bed5 	.word	0x0000bed5
    5924:	b6db6db7 	.word	0xb6db6db7
    5928:	0000ce60 	.word	0x0000ce60

0000592c <generic_hfclk_stop>:
{
    592c:	b510      	push	{r4, lr}
	__asm__ volatile(
    592e:	f04f 0340 	mov.w	r3, #64	; 0x40
    5932:	f3ef 8411 	mrs	r4, BASEPRI
    5936:	f383 8812 	msr	BASEPRI_MAX, r3
    593a:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    593e:	4a07      	ldr	r2, [pc, #28]	; (595c <generic_hfclk_stop+0x30>)
    5940:	6813      	ldr	r3, [r2, #0]
    5942:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    5946:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    5948:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    594a:	d402      	bmi.n	5952 <generic_hfclk_stop+0x26>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    594c:	2001      	movs	r0, #1
    594e:	f006 fd89 	bl	c464 <nrfx_clock_stop>
	__asm__ volatile(
    5952:	f384 8811 	msr	BASEPRI, r4
    5956:	f3bf 8f6f 	isb	sy
}
    595a:	bd10      	pop	{r4, pc}
    595c:	20001758 	.word	0x20001758

00005960 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5960:	2200      	movs	r2, #0
{
    5962:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5964:	2101      	movs	r1, #1
{
    5966:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5968:	4610      	mov	r0, r2
    596a:	f7fe f94b 	bl	3c04 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    596e:	4811      	ldr	r0, [pc, #68]	; (59b4 <clk_init+0x54>)
    5970:	f002 f824 	bl	79bc <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    5974:	4b10      	ldr	r3, [pc, #64]	; (59b8 <clk_init+0x58>)
    5976:	4298      	cmp	r0, r3
    5978:	d118      	bne.n	59ac <clk_init+0x4c>
	hfclkaudio_init();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_DRIVER_CALIBRATION)) {
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
    597a:	6920      	ldr	r0, [r4, #16]
    597c:	f000 f99c 	bl	5cb8 <z_nrf_clock_calibration_init>
	}

	nrfx_clock_enable();
    5980:	f002 f82e 	bl	79e0 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    5984:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    5986:	490d      	ldr	r1, [pc, #52]	; (59bc <clk_init+0x5c>)
    5988:	4630      	mov	r0, r6
    598a:	f005 fce5 	bl	b358 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    598e:	2800      	cmp	r0, #0
    5990:	db0b      	blt.n	59aa <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5992:	2501      	movs	r5, #1
    5994:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    5996:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    5998:	4908      	ldr	r1, [pc, #32]	; (59bc <clk_init+0x5c>)
    599a:	f104 001c 	add.w	r0, r4, #28
    599e:	f005 fcdb 	bl	b358 <onoff_manager_init>
		if (err < 0) {
    59a2:	2800      	cmp	r0, #0
    59a4:	db01      	blt.n	59aa <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    59a6:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    59a8:	2000      	movs	r0, #0
}
    59aa:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    59ac:	f06f 0004 	mvn.w	r0, #4
    59b0:	e7fb      	b.n	59aa <clk_init+0x4a>
    59b2:	bf00      	nop
    59b4:	000059f5 	.word	0x000059f5
    59b8:	0bad0000 	.word	0x0bad0000
    59bc:	0000d160 	.word	0x0000d160

000059c0 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    59c0:	b570      	push	{r4, r5, r6, lr}
    59c2:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    59c4:	230c      	movs	r3, #12
    59c6:	4809      	ldr	r0, [pc, #36]	; (59ec <clkstarted_handle.constprop.0+0x2c>)
    59c8:	434b      	muls	r3, r1
    59ca:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    59cc:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    59d0:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    59d2:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    59d4:	4418      	add	r0, r3
	sub_data->cb = NULL;
    59d6:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    59d8:	f006 fa08 	bl	bdec <set_on_state>
	if (callback) {
    59dc:	b12d      	cbz	r5, 59ea <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    59de:	4632      	mov	r2, r6
    59e0:	462b      	mov	r3, r5
    59e2:	4803      	ldr	r0, [pc, #12]	; (59f0 <clkstarted_handle.constprop.0+0x30>)
}
    59e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    59e8:	4718      	bx	r3
}
    59ea:	bd70      	pop	{r4, r5, r6, pc}
    59ec:	20001708 	.word	0x20001708
    59f0:	0000ce60 	.word	0x0000ce60

000059f4 <clock_event_handler>:
	switch (event) {
    59f4:	2801      	cmp	r0, #1
{
    59f6:	b510      	push	{r4, lr}
    59f8:	4604      	mov	r4, r0
	switch (event) {
    59fa:	d00a      	beq.n	5a12 <clock_event_handler+0x1e>
    59fc:	2803      	cmp	r0, #3
    59fe:	d00c      	beq.n	5a1a <clock_event_handler+0x26>
    5a00:	b978      	cbnz	r0, 5a22 <clock_event_handler+0x2e>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    5a02:	4b08      	ldr	r3, [pc, #32]	; (5a24 <clock_event_handler+0x30>)
    5a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5a06:	075b      	lsls	r3, r3, #29
    5a08:	d10b      	bne.n	5a22 <clock_event_handler+0x2e>
}
    5a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5a0e:	f7ff bfd7 	b.w	59c0 <clkstarted_handle.constprop.0>
			z_nrf_clock_calibration_lfclk_started();
    5a12:	f000 f95f 	bl	5cd4 <z_nrf_clock_calibration_lfclk_started>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5a16:	4620      	mov	r0, r4
    5a18:	e7f7      	b.n	5a0a <clock_event_handler+0x16>
}
    5a1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			z_nrf_clock_calibration_done_handler();
    5a1e:	f000 b967 	b.w	5cf0 <z_nrf_clock_calibration_done_handler>
}
    5a22:	bd10      	pop	{r4, pc}
    5a24:	20001708 	.word	0x20001708

00005a28 <generic_hfclk_start>:
{
    5a28:	b508      	push	{r3, lr}
	__asm__ volatile(
    5a2a:	f04f 0340 	mov.w	r3, #64	; 0x40
    5a2e:	f3ef 8111 	mrs	r1, BASEPRI
    5a32:	f383 8812 	msr	BASEPRI_MAX, r3
    5a36:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    5a3a:	4a12      	ldr	r2, [pc, #72]	; (5a84 <generic_hfclk_start+0x5c>)
    5a3c:	6813      	ldr	r3, [r2, #0]
    5a3e:	f043 0002 	orr.w	r0, r3, #2
    5a42:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    5a44:	07da      	lsls	r2, r3, #31
    5a46:	d408      	bmi.n	5a5a <generic_hfclk_start+0x32>
	__asm__ volatile(
    5a48:	f381 8811 	msr	BASEPRI, r1
    5a4c:	f3bf 8f6f 	isb	sy
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5a50:	2001      	movs	r0, #1
}
    5a52:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5a56:	f006 bccd 	b.w	c3f4 <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5a5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5a5e:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5a62:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    5a66:	07d3      	lsls	r3, r2, #31
    5a68:	d5ee      	bpl.n	5a48 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    5a6a:	4807      	ldr	r0, [pc, #28]	; (5a88 <generic_hfclk_start+0x60>)
    5a6c:	f006 f9be 	bl	bdec <set_on_state>
    5a70:	f381 8811 	msr	BASEPRI, r1
    5a74:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    5a78:	2000      	movs	r0, #0
}
    5a7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    5a7e:	f7ff bf9f 	b.w	59c0 <clkstarted_handle.constprop.0>
    5a82:	bf00      	nop
    5a84:	20001758 	.word	0x20001758
    5a88:	20001748 	.word	0x20001748

00005a8c <api_blocking_start>:
{
    5a8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5a8e:	2200      	movs	r2, #0
    5a90:	2301      	movs	r3, #1
    5a92:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5a96:	4a09      	ldr	r2, [pc, #36]	; (5abc <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5a98:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5a9c:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5a9e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5aa2:	f006 fa10 	bl	bec6 <api_start>
	if (err < 0) {
    5aa6:	2800      	cmp	r0, #0
    5aa8:	db05      	blt.n	5ab6 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    5aaa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5aae:	2300      	movs	r3, #0
    5ab0:	4668      	mov	r0, sp
    5ab2:	f004 fa01 	bl	9eb8 <z_impl_k_sem_take>
}
    5ab6:	b005      	add	sp, #20
    5ab8:	f85d fb04 	ldr.w	pc, [sp], #4
    5abc:	0000beed 	.word	0x0000beed

00005ac0 <z_nrf_clock_control_get_onoff>:
}
    5ac0:	4a02      	ldr	r2, [pc, #8]	; (5acc <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    5ac2:	b2c3      	uxtb	r3, r0
}
    5ac4:	201c      	movs	r0, #28
    5ac6:	fb03 2000 	mla	r0, r3, r0, r2
    5aca:	4770      	bx	lr
    5acc:	20001708 	.word	0x20001708

00005ad0 <z_nrf_clock_control_lf_on>:
{
    5ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5ad2:	4928      	ldr	r1, [pc, #160]	; (5b74 <z_nrf_clock_control_lf_on+0xa4>)
    5ad4:	f3bf 8f5b 	dmb	ish
    5ad8:	4606      	mov	r6, r0
    5ada:	2201      	movs	r2, #1
    5adc:	e851 3f00 	ldrex	r3, [r1]
    5ae0:	e841 2000 	strex	r0, r2, [r1]
    5ae4:	2800      	cmp	r0, #0
    5ae6:	d1f9      	bne.n	5adc <z_nrf_clock_control_lf_on+0xc>
    5ae8:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    5aec:	b933      	cbnz	r3, 5afc <z_nrf_clock_control_lf_on+0x2c>
    5aee:	4922      	ldr	r1, [pc, #136]	; (5b78 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
    5af0:	4822      	ldr	r0, [pc, #136]	; (5b7c <z_nrf_clock_control_lf_on+0xac>)
    5af2:	604b      	str	r3, [r1, #4]
    5af4:	60cb      	str	r3, [r1, #12]
    5af6:	608a      	str	r2, [r1, #8]
    5af8:	f005 fc41 	bl	b37e <onoff_request>
	switch (start_mode) {
    5afc:	1e73      	subs	r3, r6, #1
    5afe:	2b01      	cmp	r3, #1
    5b00:	d81d      	bhi.n	5b3e <z_nrf_clock_control_lf_on+0x6e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5b02:	f006 fe3a 	bl	c77a <k_is_in_isr>
    5b06:	4604      	mov	r4, r0
    5b08:	b9d0      	cbnz	r0, 5b40 <z_nrf_clock_control_lf_on+0x70>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    5b0a:	4b1d      	ldr	r3, [pc, #116]	; (5b80 <z_nrf_clock_control_lf_on+0xb0>)
    5b0c:	781b      	ldrb	r3, [r3, #0]
    5b0e:	b1bb      	cbz	r3, 5b40 <z_nrf_clock_control_lf_on+0x70>
    p_reg->INTENCLR = mask;
    5b10:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5b14:	2202      	movs	r2, #2
    5b16:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    5b1a:	4605      	mov	r5, r0
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5b1c:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    5b20:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5b24:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
    5b28:	03d2      	lsls	r2, r2, #15
    5b2a:	d513      	bpl.n	5b54 <z_nrf_clock_control_lf_on+0x84>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    5b2c:	079b      	lsls	r3, r3, #30
    5b2e:	d001      	beq.n	5b34 <z_nrf_clock_control_lf_on+0x64>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    5b30:	2e01      	cmp	r6, #1
    5b32:	d10f      	bne.n	5b54 <z_nrf_clock_control_lf_on+0x84>
	if (isr_mode) {
    5b34:	b1c4      	cbz	r4, 5b68 <z_nrf_clock_control_lf_on+0x98>
    5b36:	f385 8811 	msr	BASEPRI, r5
    5b3a:	f3bf 8f6f 	isb	sy
}
    5b3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    5b40:	f04f 0340 	mov.w	r3, #64	; 0x40
    5b44:	f3ef 8511 	mrs	r5, BASEPRI
    5b48:	f383 8812 	msr	BASEPRI_MAX, r3
    5b4c:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5b50:	2401      	movs	r4, #1
    5b52:	e7e3      	b.n	5b1c <z_nrf_clock_control_lf_on+0x4c>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    5b54:	b11c      	cbz	r4, 5b5e <z_nrf_clock_control_lf_on+0x8e>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    5b56:	4628      	mov	r0, r5
    5b58:	f7fd ffb2 	bl	3ac0 <arch_cpu_atomic_idle>
}
    5b5c:	e7e0      	b.n	5b20 <z_nrf_clock_control_lf_on+0x50>
	return z_impl_k_sleep(timeout);
    5b5e:	2100      	movs	r1, #0
    5b60:	2021      	movs	r0, #33	; 0x21
    5b62:	f004 fe2f 	bl	a7c4 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    5b66:	e7db      	b.n	5b20 <z_nrf_clock_control_lf_on+0x50>
    p_reg->INTENSET = mask;
    5b68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5b6c:	2202      	movs	r2, #2
    5b6e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    5b72:	e7e4      	b.n	5b3e <z_nrf_clock_control_lf_on+0x6e>
    5b74:	20001704 	.word	0x20001704
    5b78:	200016f4 	.word	0x200016f4
    5b7c:	20001724 	.word	0x20001724
    5b80:	20001f9e 	.word	0x20001f9e

00005b84 <start_cal_process>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5b84:	4b0d      	ldr	r3, [pc, #52]	; (5bbc <start_cal_process+0x38>)
    5b86:	f3bf 8f5b 	dmb	ish
    5b8a:	2201      	movs	r2, #1
    5b8c:	e853 1f00 	ldrex	r1, [r3]
    5b90:	2900      	cmp	r1, #0
    5b92:	d103      	bne.n	5b9c <start_cal_process+0x18>
    5b94:	e843 2000 	strex	r0, r2, [r3]
    5b98:	2800      	cmp	r0, #0
    5b9a:	d1f7      	bne.n	5b8c <start_cal_process+0x8>
    5b9c:	f3bf 8f5b 	dmb	ish
	cal_process_in_progress = 0;
}

static void start_cal_process(void)
{
	if (atomic_cas(&cal_process_in_progress, 0, 1) == false) {
    5ba0:	d10a      	bne.n	5bb8 <start_cal_process+0x34>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    5ba2:	4907      	ldr	r1, [pc, #28]	; (5bc0 <start_cal_process+0x3c>)
    5ba4:	2300      	movs	r3, #0
    5ba6:	60cb      	str	r3, [r1, #12]
    5ba8:	4b06      	ldr	r3, [pc, #24]	; (5bc4 <start_cal_process+0x40>)
    5baa:	604b      	str	r3, [r1, #4]
    5bac:	2303      	movs	r3, #3
    5bae:	608b      	str	r3, [r1, #8]
	err = onoff_request(mgr, cli);
    5bb0:	4b05      	ldr	r3, [pc, #20]	; (5bc8 <start_cal_process+0x44>)
    5bb2:	6818      	ldr	r0, [r3, #0]
    5bb4:	f005 bbe3 	b.w	b37e <onoff_request>
		 * will be released at the end of calibration process and
		 * stopped in consequence.
		 */
		lf_request();
	}
}
    5bb8:	4770      	bx	lr
    5bba:	bf00      	nop
    5bbc:	20001778 	.word	0x20001778
    5bc0:	20001760 	.word	0x20001760
    5bc4:	00005c8d 	.word	0x00005c8d
    5bc8:	2000175c 	.word	0x2000175c

00005bcc <start_cycle>:
{
    5bcc:	b507      	push	{r0, r1, r2, lr}
	z_impl_k_timer_start(timer, duration, period);
    5bce:	2200      	movs	r2, #0
    5bd0:	2300      	movs	r3, #0
    5bd2:	e9cd 2300 	strd	r2, r3, [sp]
    5bd6:	4808      	ldr	r0, [pc, #32]	; (5bf8 <start_cycle+0x2c>)
    5bd8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    5bdc:	2300      	movs	r3, #0
    5bde:	f005 f869 	bl	acb4 <z_impl_k_timer_start>
	clk_release(&mgrs[CLOCK_CONTROL_NRF_TYPE_HFCLK]);
    5be2:	4b06      	ldr	r3, [pc, #24]	; (5bfc <start_cycle+0x30>)
	err = onoff_release(mgr);
    5be4:	6818      	ldr	r0, [r3, #0]
    5be6:	f005 fc22 	bl	b42e <onoff_release>
	cal_process_in_progress = 0;
    5bea:	4b05      	ldr	r3, [pc, #20]	; (5c00 <start_cycle+0x34>)
    5bec:	2200      	movs	r2, #0
    5bee:	601a      	str	r2, [r3, #0]
}
    5bf0:	b003      	add	sp, #12
    5bf2:	f85d fb04 	ldr.w	pc, [sp], #4
    5bf6:	bf00      	nop
    5bf8:	20000290 	.word	0x20000290
    5bfc:	2000175c 	.word	0x2000175c
    5c00:	20001778 	.word	0x20001778

00005c04 <measure_temperature>:
/* Function determines if calibration should be performed based on temperature
 * measurement. Function is called from system work queue context. It is
 * reading temperature from TEMP sensor and compares with last measurement.
 */
static void measure_temperature(struct k_work *work)
{
    5c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    5c06:	4e1c      	ldr	r6, [pc, #112]	; (5c78 <measure_temperature+0x74>)
    5c08:	4c1c      	ldr	r4, [pc, #112]	; (5c7c <measure_temperature+0x78>)
    5c0a:	68b7      	ldr	r7, [r6, #8]
    5c0c:	4d1c      	ldr	r5, [pc, #112]	; (5c80 <measure_temperature+0x7c>)
    5c0e:	68fb      	ldr	r3, [r7, #12]
    5c10:	2139      	movs	r1, #57	; 0x39
    5c12:	4630      	mov	r0, r6
    5c14:	4798      	blx	r3
	if (rc == 0) {
    5c16:	b140      	cbz	r0, 5c2a <measure_temperature+0x26>

	rc = get_temperature(&temperature);

	if (rc != 0) {
		/* Temperature read failed, force calibration. */
		calib_skip_cnt = 0;
    5c18:	2300      	movs	r3, #0
    5c1a:	7023      	strb	r3, [r4, #0]
		diff = abs(temperature - prev_temperature);
	}

	if ((calib_skip_cnt == 0) ||
		(diff >= CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF)) {
		prev_temperature = temperature;
    5c1c:	802b      	strh	r3, [r5, #0]
	nrfx_clock_calibration_start();
    5c1e:	f001 fef1 	bl	7a04 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    5c22:	2301      	movs	r3, #1
    5c24:	7023      	strb	r3, [r4, #0]
		start_cycle();
	}

	LOG_DBG("Calibration %s. Temperature diff: %d (in 0.25'C units).",
			started ? "started" : "skipped", diff);
}
    5c26:	b003      	add	sp, #12
    5c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return api->channel_get(dev, chan, val);
    5c2a:	210c      	movs	r1, #12
    5c2c:	693b      	ldr	r3, [r7, #16]
    5c2e:	466a      	mov	r2, sp
    5c30:	4630      	mov	r0, r6
    5c32:	4798      	blx	r3
	if (rc == 0) {
    5c34:	2800      	cmp	r0, #0
    5c36:	d1ef      	bne.n	5c18 <measure_temperature+0x14>
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    5c38:	4a12      	ldr	r2, [pc, #72]	; (5c84 <measure_temperature+0x80>)
    5c3a:	9b01      	ldr	r3, [sp, #4]
    5c3c:	fb93 f3f2 	sdiv	r3, r3, r2
    5c40:	9a00      	ldr	r2, [sp, #0]
	if ((calib_skip_cnt == 0) ||
    5c42:	7821      	ldrb	r1, [r4, #0]
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    5c44:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    5c48:	b21b      	sxth	r3, r3
		diff = abs(temperature - prev_temperature);
    5c4a:	f9b5 2000 	ldrsh.w	r2, [r5]
	if ((calib_skip_cnt == 0) ||
    5c4e:	2900      	cmp	r1, #0
    5c50:	d0e4      	beq.n	5c1c <measure_temperature+0x18>
		diff = abs(temperature - prev_temperature);
    5c52:	1a9a      	subs	r2, r3, r2
void srand(unsigned int seed);
#endif /* CONFIG_MINIMAL_LIBC_RAND */

static inline int abs(int __n)
{
	return (__n < 0) ? -__n : __n;
    5c54:	2a00      	cmp	r2, #0
    5c56:	bfb8      	it	lt
    5c58:	4252      	neglt	r2, r2
	if ((calib_skip_cnt == 0) ||
    5c5a:	b212      	sxth	r2, r2
    5c5c:	2a01      	cmp	r2, #1
    5c5e:	dcdd      	bgt.n	5c1c <measure_temperature+0x18>
		total_skips_cnt++;
    5c60:	4a09      	ldr	r2, [pc, #36]	; (5c88 <measure_temperature+0x84>)
    5c62:	6813      	ldr	r3, [r2, #0]
		calib_skip_cnt--;
    5c64:	3901      	subs	r1, #1
		total_skips_cnt++;
    5c66:	3301      	adds	r3, #1
		calib_skip_cnt--;
    5c68:	7021      	strb	r1, [r4, #0]
		total_skips_cnt++;
    5c6a:	6013      	str	r3, [r2, #0]
}
    5c6c:	b003      	add	sp, #12
    5c6e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		start_cycle();
    5c72:	f7ff bfab 	b.w	5bcc <start_cycle>
    5c76:	bf00      	nop
    5c78:	0000ced8 	.word	0x0000ced8
    5c7c:	20001b7c 	.word	0x20001b7c
    5c80:	20001b4c 	.word	0x20001b4c
    5c84:	0003d090 	.word	0x0003d090
    5c88:	20001770 	.word	0x20001770

00005c8c <cal_hf_callback>:
{
    5c8c:	b508      	push	{r3, lr}
    5c8e:	4807      	ldr	r0, [pc, #28]	; (5cac <cal_hf_callback+0x20>)
    5c90:	f006 fd25 	bl	c6de <z_device_is_ready>
	if (!device_is_ready(temp_sensor)) {
    5c94:	b928      	cbnz	r0, 5ca2 <cal_hf_callback+0x16>
	nrfx_clock_calibration_start();
    5c96:	f001 feb5 	bl	7a04 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    5c9a:	4b05      	ldr	r3, [pc, #20]	; (5cb0 <cal_hf_callback+0x24>)
    5c9c:	2201      	movs	r2, #1
    5c9e:	701a      	strb	r2, [r3, #0]
}
    5ca0:	bd08      	pop	{r3, pc}
    5ca2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_submit(&temp_measure_work);
    5ca6:	4803      	ldr	r0, [pc, #12]	; (5cb4 <cal_hf_callback+0x28>)
    5ca8:	f004 ba5c 	b.w	a164 <k_work_submit>
    5cac:	0000ced8 	.word	0x0000ced8
    5cb0:	20001b7c 	.word	0x20001b7c
    5cb4:	20000028 	.word	0x20000028

00005cb8 <z_nrf_clock_calibration_init>:
#endif /* USE_TEMP_SENSOR */

void z_nrf_clock_calibration_init(struct onoff_manager *onoff_mgrs)
{
	mgrs = onoff_mgrs;
    5cb8:	4b03      	ldr	r3, [pc, #12]	; (5cc8 <z_nrf_clock_calibration_init+0x10>)
	total_cnt = 0;
    5cba:	4a04      	ldr	r2, [pc, #16]	; (5ccc <z_nrf_clock_calibration_init+0x14>)
	mgrs = onoff_mgrs;
    5cbc:	6018      	str	r0, [r3, #0]
	total_cnt = 0;
    5cbe:	2300      	movs	r3, #0
    5cc0:	6013      	str	r3, [r2, #0]
	total_skips_cnt = 0;
    5cc2:	4a03      	ldr	r2, [pc, #12]	; (5cd0 <z_nrf_clock_calibration_init+0x18>)
    5cc4:	6013      	str	r3, [r2, #0]
}
    5cc6:	4770      	bx	lr
    5cc8:	2000175c 	.word	0x2000175c
    5ccc:	20001774 	.word	0x20001774
    5cd0:	20001770 	.word	0x20001770

00005cd4 <z_nrf_clock_calibration_lfclk_started>:

static void start_unconditional_cal_process(void)
{
	calib_skip_cnt = 0;
    5cd4:	4b02      	ldr	r3, [pc, #8]	; (5ce0 <z_nrf_clock_calibration_lfclk_started+0xc>)
    5cd6:	2200      	movs	r2, #0
    5cd8:	701a      	strb	r2, [r3, #0]
	start_cal_process();
    5cda:	f7ff bf53 	b.w	5b84 <start_cal_process>
    5cde:	bf00      	nop
    5ce0:	20001b7c 	.word	0x20001b7c

00005ce4 <z_nrf_clock_calibration_lfclk_stopped>:
	z_impl_k_timer_stop(timer);
    5ce4:	4801      	ldr	r0, [pc, #4]	; (5cec <z_nrf_clock_calibration_lfclk_stopped+0x8>)
    5ce6:	f006 bfd7 	b.w	cc98 <z_impl_k_timer_stop>
    5cea:	bf00      	nop
    5cec:	20000290 	.word	0x20000290

00005cf0 <z_nrf_clock_calibration_done_handler>:
	LOG_DBG("Calibration stopped");
}

void z_nrf_clock_calibration_done_handler(void)
{
	total_cnt++;
    5cf0:	4a02      	ldr	r2, [pc, #8]	; (5cfc <z_nrf_clock_calibration_done_handler+0xc>)
    5cf2:	6813      	ldr	r3, [r2, #0]
    5cf4:	3301      	adds	r3, #1
    5cf6:	6013      	str	r3, [r2, #0]
	LOG_DBG("Calibration done.");

	start_cycle();
    5cf8:	f7ff bf68 	b.w	5bcc <start_cycle>
    5cfc:	20001774 	.word	0x20001774

00005d00 <rtt_console_init>:

	return character;
}

static int rtt_console_init(void)
{
    5d00:	b510      	push	{r4, lr}

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
    5d02:	4c04      	ldr	r4, [pc, #16]	; (5d14 <rtt_console_init+0x14>)
    5d04:	4620      	mov	r0, r4
    5d06:	f7fb fba3 	bl	1450 <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
    5d0a:	4620      	mov	r0, r4
    5d0c:	f7fe fcda 	bl	46c4 <__stdout_hook_install>

	return 0;
}
    5d10:	2000      	movs	r0, #0
    5d12:	bd10      	pop	{r4, pc}
    5d14:	00005d19 	.word	0x00005d19

00005d18 <rtt_console_out>:
{
    5d18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    5d1a:	4e13      	ldr	r6, [pc, #76]	; (5d68 <rtt_console_out+0x50>)
	char c = (char)character;
    5d1c:	f88d 0007 	strb.w	r0, [sp, #7]
{
    5d20:	4604      	mov	r4, r0
	char c = (char)character;
    5d22:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
    5d24:	f003 fd00 	bl	9728 <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    5d28:	2201      	movs	r2, #1
    5d2a:	f10d 0107 	add.w	r1, sp, #7
    5d2e:	2000      	movs	r0, #0
    5d30:	f003 fcc4 	bl	96bc <SEGGER_RTT_WriteNoLock>
    5d34:	4607      	mov	r7, r0
		SEGGER_RTT_UNLOCK();
    5d36:	f003 fd01 	bl	973c <zephyr_rtt_mutex_unlock>
		if (cnt) {
    5d3a:	b127      	cbz	r7, 5d46 <rtt_console_out+0x2e>
			host_present = true;
    5d3c:	2301      	movs	r3, #1
    5d3e:	7033      	strb	r3, [r6, #0]
}
    5d40:	4620      	mov	r0, r4
    5d42:	b003      	add	sp, #12
    5d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
    5d46:	7833      	ldrb	r3, [r6, #0]
    5d48:	2b00      	cmp	r3, #0
    5d4a:	d0f9      	beq.n	5d40 <rtt_console_out+0x28>
			if (max_cnt) {
    5d4c:	3d01      	subs	r5, #1
    5d4e:	d008      	beq.n	5d62 <rtt_console_out+0x4a>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    5d50:	f006 fd13 	bl	c77a <k_is_in_isr>
    5d54:	2800      	cmp	r0, #0
    5d56:	d1e5      	bne.n	5d24 <rtt_console_out+0xc>
	return z_impl_k_sleep(timeout);
    5d58:	2100      	movs	r1, #0
    5d5a:	2042      	movs	r0, #66	; 0x42
    5d5c:	f004 fd32 	bl	a7c4 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    5d60:	e7e0      	b.n	5d24 <rtt_console_out+0xc>
				host_present = false;
    5d62:	7035      	strb	r5, [r6, #0]
    5d64:	e7ec      	b.n	5d40 <rtt_console_out+0x28>
    5d66:	bf00      	nop
    5d68:	20001b7d 	.word	0x20001b7d

00005d6c <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    5d6c:	b530      	push	{r4, r5, lr}
	return port->config;
    5d6e:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5d70:	7b05      	ldrb	r5, [r0, #12]
    5d72:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    5d76:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    5d7a:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    5d7c:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    5d80:	d105      	bne.n	5d8e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    5d82:	4620      	mov	r0, r4
    5d84:	f002 f8e0 	bl	7f48 <nrfx_gpiote_trigger_disable>

		return 0;
    5d88:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    5d8a:	b005      	add	sp, #20
    5d8c:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    5d8e:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    5d90:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    5d94:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    5d98:	d114      	bne.n	5dc4 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    5d9a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    5d9e:	bf0c      	ite	eq
    5da0:	2304      	moveq	r3, #4
    5da2:	2305      	movne	r3, #5
    5da4:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5da8:	2300      	movs	r3, #0
    5daa:	4619      	mov	r1, r3
    5dac:	aa02      	add	r2, sp, #8
    5dae:	4620      	mov	r0, r4
    5db0:	f001 ff00 	bl	7bb4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5db4:	4b1d      	ldr	r3, [pc, #116]	; (5e2c <gpio_nrfx_pin_interrupt_configure+0xc0>)
    5db6:	4298      	cmp	r0, r3
    5db8:	d135      	bne.n	5e26 <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    5dba:	2101      	movs	r1, #1
    5dbc:	4620      	mov	r0, r4
    5dbe:	f002 f87f 	bl	7ec0 <nrfx_gpiote_trigger_enable>
	return 0;
    5dc2:	e7e1      	b.n	5d88 <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5dc4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    5dc8:	d022      	beq.n	5e10 <gpio_nrfx_pin_interrupt_configure+0xa4>
    5dca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    5dce:	bf14      	ite	ne
    5dd0:	2301      	movne	r3, #1
    5dd2:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    5dd4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    5dd8:	6883      	ldr	r3, [r0, #8]
    5dda:	40cb      	lsrs	r3, r1
    5ddc:	07d9      	lsls	r1, r3, #31
    5dde:	d4e3      	bmi.n	5da8 <gpio_nrfx_pin_interrupt_configure+0x3c>
    5de0:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    5de4:	d1e0      	bne.n	5da8 <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    5de6:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    5dea:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5dee:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    5df6:	07db      	lsls	r3, r3, #31
    5df8:	d4d6      	bmi.n	5da8 <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5dfa:	f10d 0507 	add.w	r5, sp, #7
    5dfe:	4629      	mov	r1, r5
    5e00:	4620      	mov	r0, r4
    5e02:	f002 f809 	bl	7e18 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    5e06:	4b0a      	ldr	r3, [pc, #40]	; (5e30 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    5e08:	4298      	cmp	r0, r3
    5e0a:	d003      	beq.n	5e14 <gpio_nrfx_pin_interrupt_configure+0xa8>
		trigger_config.p_in_channel = &ch;
    5e0c:	9503      	str	r5, [sp, #12]
    5e0e:	e7cb      	b.n	5da8 <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    5e10:	2303      	movs	r3, #3
    5e12:	e7df      	b.n	5dd4 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    5e14:	4628      	mov	r0, r5
    5e16:	f002 f84d 	bl	7eb4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    5e1a:	4b04      	ldr	r3, [pc, #16]	; (5e2c <gpio_nrfx_pin_interrupt_configure+0xc0>)
    5e1c:	4298      	cmp	r0, r3
    5e1e:	d0f5      	beq.n	5e0c <gpio_nrfx_pin_interrupt_configure+0xa0>
				return -ENOMEM;
    5e20:	f06f 000b 	mvn.w	r0, #11
    5e24:	e7b1      	b.n	5d8a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    5e26:	f06f 0015 	mvn.w	r0, #21
    5e2a:	e7ae      	b.n	5d8a <gpio_nrfx_pin_interrupt_configure+0x1e>
    5e2c:	0bad0000 	.word	0x0bad0000
    5e30:	0bad0004 	.word	0x0bad0004

00005e34 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    5e34:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    5e36:	f002 f82d 	bl	7e94 <nrfx_gpiote_is_init>
    5e3a:	4604      	mov	r4, r0
    5e3c:	b968      	cbnz	r0, 5e5a <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    5e3e:	f002 f801 	bl	7e44 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    5e42:	4b08      	ldr	r3, [pc, #32]	; (5e64 <gpio_nrfx_init+0x30>)
    5e44:	4298      	cmp	r0, r3
    5e46:	d10a      	bne.n	5e5e <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    5e48:	4807      	ldr	r0, [pc, #28]	; (5e68 <gpio_nrfx_init+0x34>)
    5e4a:	4621      	mov	r1, r4
    5e4c:	f001 ffde 	bl	7e0c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    5e50:	4622      	mov	r2, r4
    5e52:	2105      	movs	r1, #5
    5e54:	2006      	movs	r0, #6
    5e56:	f7fd fed5 	bl	3c04 <z_arm_irq_priority_set>
		return 0;
    5e5a:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    5e5c:	bd10      	pop	{r4, pc}
		return -EIO;
    5e5e:	f06f 0004 	mvn.w	r0, #4
    5e62:	e7fb      	b.n	5e5c <gpio_nrfx_init+0x28>
    5e64:	0bad0000 	.word	0x0bad0000
    5e68:	00005e6d 	.word	0x00005e6d

00005e6c <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5e6c:	0943      	lsrs	r3, r0, #5
{
    5e6e:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    5e70:	d107      	bne.n	5e82 <nrfx_gpio_handler+0x16>
	return list->head;
    5e72:	4b0b      	ldr	r3, [pc, #44]	; (5ea0 <nrfx_gpio_handler+0x34>)
    5e74:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5e76:	b121      	cbz	r1, 5e82 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    5e78:	2501      	movs	r5, #1
	return node->next;
    5e7a:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    5e7c:	4e09      	ldr	r6, [pc, #36]	; (5ea4 <nrfx_gpio_handler+0x38>)
    5e7e:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5e80:	b901      	cbnz	r1, 5e84 <nrfx_gpio_handler+0x18>
}
    5e82:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    5e84:	688a      	ldr	r2, [r1, #8]
    5e86:	402a      	ands	r2, r5
    5e88:	d002      	beq.n	5e90 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    5e8a:	684b      	ldr	r3, [r1, #4]
    5e8c:	4630      	mov	r0, r6
    5e8e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    5e90:	b11c      	cbz	r4, 5e9a <nrfx_gpio_handler+0x2e>
    5e92:	6823      	ldr	r3, [r4, #0]
    5e94:	4621      	mov	r1, r4
    5e96:	461c      	mov	r4, r3
    5e98:	e7f2      	b.n	5e80 <nrfx_gpio_handler+0x14>
    5e9a:	4623      	mov	r3, r4
    5e9c:	e7fa      	b.n	5e94 <nrfx_gpio_handler+0x28>
    5e9e:	bf00      	nop
    5ea0:	2000177c 	.word	0x2000177c
    5ea4:	0000ce78 	.word	0x0000ce78

00005ea8 <gpio_nrfx_pin_configure>:
{
    5ea8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    5eac:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    5eae:	7b3b      	ldrb	r3, [r7, #12]
    5eb0:	f001 051f 	and.w	r5, r1, #31
    5eb4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    5eb8:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5eba:	4628      	mov	r0, r5
    5ebc:	f10d 0103 	add.w	r1, sp, #3
{
    5ec0:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5ec2:	f001 ffa9 	bl	7e18 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    5ec6:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    5eca:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    5ecc:	d10b      	bne.n	5ee6 <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    5ece:	4628      	mov	r0, r5
    5ed0:	f002 f862 	bl	7f98 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    5ed4:	4b3d      	ldr	r3, [pc, #244]	; (5fcc <gpio_nrfx_pin_configure+0x124>)
    5ed6:	4598      	cmp	r8, r3
    5ed8:	d103      	bne.n	5ee2 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    5eda:	f89d 0003 	ldrb.w	r0, [sp, #3]
    5ede:	f001 ffe3 	bl	7ea8 <nrfx_gpiote_channel_free>
		return 0;
    5ee2:	2000      	movs	r0, #0
    5ee4:	e00c      	b.n	5f00 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    5ee6:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5ee8:	4619      	mov	r1, r3
    5eea:	aa02      	add	r2, sp, #8
    5eec:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    5eee:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    5ef2:	f001 fe5f 	bl	7bb4 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    5ef6:	4b35      	ldr	r3, [pc, #212]	; (5fcc <gpio_nrfx_pin_configure+0x124>)
    5ef8:	4298      	cmp	r0, r3
    5efa:	d004      	beq.n	5f06 <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    5efc:	f06f 0015 	mvn.w	r0, #21
}
    5f00:	b004      	add	sp, #16
    5f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    5f06:	4580      	cmp	r8, r0
    5f08:	d103      	bne.n	5f12 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    5f0a:	f89d 0003 	ldrb.w	r0, [sp, #3]
    5f0e:	f001 ffcb 	bl	7ea8 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    5f12:	03a3      	lsls	r3, r4, #14
    5f14:	d54b      	bpl.n	5fae <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5f16:	f240 3306 	movw	r3, #774	; 0x306
    5f1a:	4023      	ands	r3, r4
    5f1c:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    5f20:	d019      	beq.n	5f56 <gpio_nrfx_pin_configure+0xae>
    5f22:	d80c      	bhi.n	5f3e <gpio_nrfx_pin_configure+0x96>
    5f24:	2b06      	cmp	r3, #6
    5f26:	d017      	beq.n	5f58 <gpio_nrfx_pin_configure+0xb0>
    5f28:	d804      	bhi.n	5f34 <gpio_nrfx_pin_configure+0x8c>
    5f2a:	b1ab      	cbz	r3, 5f58 <gpio_nrfx_pin_configure+0xb0>
    5f2c:	2b02      	cmp	r3, #2
    5f2e:	d1e5      	bne.n	5efc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    5f30:	2304      	movs	r3, #4
    5f32:	e011      	b.n	5f58 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5f34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    5f38:	d1e0      	bne.n	5efc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    5f3a:	2301      	movs	r3, #1
    5f3c:	e00c      	b.n	5f58 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5f3e:	f240 2202 	movw	r2, #514	; 0x202
    5f42:	4293      	cmp	r3, r2
    5f44:	d027      	beq.n	5f96 <gpio_nrfx_pin_configure+0xee>
    5f46:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    5f4a:	d026      	beq.n	5f9a <gpio_nrfx_pin_configure+0xf2>
    5f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    5f50:	d1d4      	bne.n	5efc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    5f52:	2302      	movs	r3, #2
    5f54:	e000      	b.n	5f58 <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    5f56:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    5f58:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    5f5c:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    5f60:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    5f64:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    5f66:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    5f6a:	bf54      	ite	pl
    5f6c:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    5f70:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5f72:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    5f74:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    5f78:	d511      	bpl.n	5f9e <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    5f7a:	687a      	ldr	r2, [r7, #4]
    5f7c:	2301      	movs	r3, #1
    5f7e:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    5f80:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    5f84:	2200      	movs	r2, #0
    5f86:	a901      	add	r1, sp, #4
    5f88:	4628      	mov	r0, r5
    5f8a:	f001 fec1 	bl	7d10 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    5f8e:	4b0f      	ldr	r3, [pc, #60]	; (5fcc <gpio_nrfx_pin_configure+0x124>)
    5f90:	4298      	cmp	r0, r3
    5f92:	d0a6      	beq.n	5ee2 <gpio_nrfx_pin_configure+0x3a>
    5f94:	e7b2      	b.n	5efc <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    5f96:	2305      	movs	r3, #5
    5f98:	e7de      	b.n	5f58 <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    5f9a:	2303      	movs	r3, #3
    5f9c:	e7dc      	b.n	5f58 <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    5f9e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    5fa0:	bf41      	itttt	mi
    5fa2:	2301      	movmi	r3, #1
    5fa4:	687a      	ldrmi	r2, [r7, #4]
    5fa6:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    5fa8:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    5fac:	e7ea      	b.n	5f84 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    5fae:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5fb0:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    5fb4:	bf54      	ite	pl
    5fb6:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    5fba:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5fbc:	461a      	mov	r2, r3
    5fbe:	a901      	add	r1, sp, #4
    5fc0:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    5fc2:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    5fc6:	f001 fdf5 	bl	7bb4 <nrfx_gpiote_input_configure>
    5fca:	e7e0      	b.n	5f8e <gpio_nrfx_pin_configure+0xe6>
    5fcc:	0bad0000 	.word	0x0bad0000

00005fd0 <qdec_nrfx_channel_get>:
	const int32_t steps = QDEC_STEPS;

	ARG_UNUSED(dev);
	LOG_DBG("");

	if (chan != SENSOR_CHAN_ROTATION) {
    5fd0:	2922      	cmp	r1, #34	; 0x22
{
    5fd2:	b510      	push	{r4, lr}
	if (chan != SENSOR_CHAN_ROTATION) {
    5fd4:	d114      	bne.n	6000 <qdec_nrfx_channel_get+0x30>
    5fd6:	f04f 0340 	mov.w	r3, #64	; 0x40
    5fda:	f3ef 8411 	mrs	r4, BASEPRI
    5fde:	f383 8812 	msr	BASEPRI_MAX, r3
    5fe2:	f3bf 8f6f 	isb	sy
		return -ENOTSUP;
	}

	key = irq_lock();
	acc = data->acc;
    5fe6:	4908      	ldr	r1, [pc, #32]	; (6008 <qdec_nrfx_channel_get+0x38>)
	data->acc = 0;
    5fe8:	2000      	movs	r0, #0
	acc = data->acc;
    5fea:	680b      	ldr	r3, [r1, #0]
	data->acc = 0;
    5fec:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
    5fee:	f384 8811 	msr	BASEPRI, r4
    5ff2:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BUILD_ASSERT(QDEC_STEPS > 0, "only positive number valid");
	BUILD_ASSERT(QDEC_STEPS <= 2048, "overflow possible");

	val->val1 = (acc * FULL_ANGLE) / steps;
    5ff6:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	val->val2 = (acc * FULL_ANGLE) - (val->val1 * steps);
    5ffa:	e9c2 3000 	strd	r3, r0, [r2]
		val->val2 *= 1000000;
		val->val2 /= steps;
	}

	return 0;
}
    5ffe:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    6000:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6004:	e7fb      	b.n	5ffe <qdec_nrfx_channel_get+0x2e>
    6006:	bf00      	nop
    6008:	20001788 	.word	0x20001788

0000600c <qdec_nrfx_trigger_set>:
	unsigned int key;

	ARG_UNUSED(dev);
	LOG_DBG("");

	if (trig->type != SENSOR_TRIG_DATA_READY) {
    600c:	880b      	ldrh	r3, [r1, #0]
    600e:	2b01      	cmp	r3, #1
    6010:	d115      	bne.n	603e <qdec_nrfx_trigger_set+0x32>
		return -ENOTSUP;
	}

	if ((trig->chan != SENSOR_CHAN_ALL) &&
    6012:	884b      	ldrh	r3, [r1, #2]
    6014:	2b39      	cmp	r3, #57	; 0x39
    6016:	d001      	beq.n	601c <qdec_nrfx_trigger_set+0x10>
    6018:	2b22      	cmp	r3, #34	; 0x22
    601a:	d110      	bne.n	603e <qdec_nrfx_trigger_set+0x32>
	__asm__ volatile(
    601c:	f04f 0340 	mov.w	r3, #64	; 0x40
    6020:	f3ef 8011 	mrs	r0, BASEPRI
    6024:	f383 8812 	msr	BASEPRI_MAX, r3
    6028:	f3bf 8f6f 	isb	sy
	    (trig->chan != SENSOR_CHAN_ROTATION)) {
		return -ENOTSUP;
	}

	key = irq_lock();
	data->data_ready_handler = handler;
    602c:	4b05      	ldr	r3, [pc, #20]	; (6044 <qdec_nrfx_trigger_set+0x38>)
	data->data_ready_trigger = trig;
    602e:	e9c3 2101 	strd	r2, r1, [r3, #4]
	__asm__ volatile(
    6032:	f380 8811 	msr	BASEPRI, r0
    6036:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	return 0;
    603a:	2000      	movs	r0, #0
    603c:	4770      	bx	lr
		return -ENOTSUP;
    603e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    6042:	4770      	bx	lr
    6044:	20001788 	.word	0x20001788

00006048 <accumulate.constprop.0>:
static void accumulate(struct qdec_nrfx_data *data, int16_t acc)
    6048:	b510      	push	{r4, lr}
	__asm__ volatile(
    604a:	f04f 0340 	mov.w	r3, #64	; 0x40
    604e:	f3ef 8111 	mrs	r1, BASEPRI
    6052:	f383 8812 	msr	BASEPRI_MAX, r3
    6056:	f3bf 8f6f 	isb	sy
	bool overflow = ((acc > 0) && (ACC_MAX - acc < data->acc)) ||
    605a:	2800      	cmp	r0, #0
    605c:	4b0b      	ldr	r3, [pc, #44]	; (608c <accumulate.constprop.0+0x44>)
    605e:	dd0a      	ble.n	6076 <accumulate.constprop.0+0x2e>
    6060:	681c      	ldr	r4, [r3, #0]
    6062:	f5c0 02b6 	rsb	r2, r0, #5963776	; 0x5b0000
    6066:	f502 62b6 	add.w	r2, r2, #1456	; 0x5b0
    606a:	42a2      	cmp	r2, r4
    606c:	db09      	blt.n	6082 <accumulate.constprop.0+0x3a>
		data->acc += acc;
    606e:	681a      	ldr	r2, [r3, #0]
    6070:	4402      	add	r2, r0
    6072:	601a      	str	r2, [r3, #0]
    6074:	e005      	b.n	6082 <accumulate.constprop.0+0x3a>
	bool overflow = ((acc > 0) && (ACC_MAX - acc < data->acc)) ||
    6076:	d0fa      	beq.n	606e <accumulate.constprop.0+0x26>
			((acc < 0) && (ACC_MIN - acc > data->acc));
    6078:	4a05      	ldr	r2, [pc, #20]	; (6090 <accumulate.constprop.0+0x48>)
    607a:	681c      	ldr	r4, [r3, #0]
    607c:	1a12      	subs	r2, r2, r0
    607e:	42a2      	cmp	r2, r4
    6080:	ddf5      	ble.n	606e <accumulate.constprop.0+0x26>
	__asm__ volatile(
    6082:	f381 8811 	msr	BASEPRI, r1
    6086:	f3bf 8f6f 	isb	sy
}
    608a:	bd10      	pop	{r4, pc}
    608c:	20001788 	.word	0x20001788
    6090:	ffa4fa50 	.word	0xffa4fa50

00006094 <qdec_nrfx_event_handler>:

static void qdec_nrfx_event_handler(nrfx_qdec_event_t event)
{
    6094:	b590      	push	{r4, r7, lr}
    6096:	b083      	sub	sp, #12
    6098:	af00      	add	r7, sp, #0
    609a:	f107 0308 	add.w	r3, r7, #8
    609e:	e903 0003 	stmdb	r3, {r0, r1}
    60a2:	883b      	ldrh	r3, [r7, #0]
	sensor_trigger_handler_t handler;
	const struct sensor_trigger *trig;
	unsigned int key;

	switch (event.type) {
    60a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
    60a8:	d118      	bne.n	60dc <qdec_nrfx_event_handler+0x48>
	case NRF_QDEC_EVENT_REPORTRDY:
		accumulate(&qdec_nrfx_data, event.data.report.acc);
    60aa:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
    60ae:	f7ff ffcb 	bl	6048 <accumulate.constprop.0>
	__asm__ volatile(
    60b2:	f04f 0340 	mov.w	r3, #64	; 0x40
    60b6:	f3ef 8011 	mrs	r0, BASEPRI
    60ba:	f383 8812 	msr	BASEPRI_MAX, r3
    60be:	f3bf 8f6f 	isb	sy

		key = irq_lock();
		handler = qdec_nrfx_data.data_ready_handler;
    60c2:	4a0f      	ldr	r2, [pc, #60]	; (6100 <qdec_nrfx_event_handler+0x6c>)
		trig = qdec_nrfx_data.data_ready_trigger;
    60c4:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
	__asm__ volatile(
    60c8:	f380 8811 	msr	BASEPRI, r0
    60cc:	f3bf 8f6f 	isb	sy
		irq_unlock(key);

		if (handler) {
    60d0:	b10b      	cbz	r3, 60d6 <qdec_nrfx_event_handler+0x42>
			handler(DEVICE_DT_INST_GET(0), trig);
    60d2:	480c      	ldr	r0, [pc, #48]	; (6104 <qdec_nrfx_event_handler+0x70>)
    60d4:	4798      	blx	r3

	default:
		LOG_ERR("unhandled event (0x%x)", event.type);
		break;
	}
}
    60d6:	370c      	adds	r7, #12
    60d8:	46bd      	mov	sp, r7
    60da:	bd90      	pop	{r4, r7, pc}
		LOG_ERR("unhandled event (0x%x)", event.type);
    60dc:	466c      	mov	r4, sp
    60de:	b088      	sub	sp, #32
    60e0:	466a      	mov	r2, sp
    60e2:	4909      	ldr	r1, [pc, #36]	; (6108 <qdec_nrfx_event_handler+0x74>)
	switch (event.type) {
    60e4:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("unhandled event (0x%x)", event.type);
    60e8:	2303      	movs	r3, #3
    60ea:	f842 3f10 	str.w	r3, [r2, #16]!
    60ee:	4807      	ldr	r0, [pc, #28]	; (610c <qdec_nrfx_event_handler+0x78>)
    60f0:	2300      	movs	r3, #0
    60f2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    60f6:	f7fc f91f 	bl	2338 <z_impl_z_log_msg_static_create>
    60fa:	46a5      	mov	sp, r4
}
    60fc:	e7eb      	b.n	60d6 <qdec_nrfx_event_handler+0x42>
    60fe:	bf00      	nop
    6100:	20001788 	.word	0x20001788
    6104:	0000cec0 	.word	0x0000cec0
    6108:	0000e153 	.word	0x0000e153
    610c:	0000cff0 	.word	0x0000cff0

00006110 <qdec_nrfx_init.part.0>:
#endif
}

NRF_DT_CHECK_NODE_HAS_PINCTRL_SLEEP(DT_DRV_INST(0));

static int qdec_nrfx_init(const struct device *dev)
    6110:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	if (ret < 0) {
		return ret;
	}

	nerr = nrfx_qdec_init(&config, qdec_nrfx_event_handler);
    6112:	491a      	ldr	r1, [pc, #104]	; (617c <qdec_nrfx_init.part.0+0x6c>)
    6114:	481a      	ldr	r0, [pc, #104]	; (6180 <qdec_nrfx_init.part.0+0x70>)
    6116:	f002 f8e9 	bl	82ec <nrfx_qdec_init>
	if (nerr == NRFX_ERROR_INVALID_STATE) {
    611a:	4b1a      	ldr	r3, [pc, #104]	; (6184 <qdec_nrfx_init.part.0+0x74>)
    611c:	4298      	cmp	r0, r3
    611e:	d10f      	bne.n	6140 <qdec_nrfx_init.part.0+0x30>
		LOG_ERR("qdec already in use");
    6120:	4b19      	ldr	r3, [pc, #100]	; (6188 <qdec_nrfx_init.part.0+0x78>)
    6122:	9305      	str	r3, [sp, #20]
    6124:	2302      	movs	r3, #2
    6126:	9304      	str	r3, [sp, #16]
    6128:	4818      	ldr	r0, [pc, #96]	; (618c <qdec_nrfx_init.part.0+0x7c>)
    612a:	2300      	movs	r3, #0
    612c:	aa04      	add	r2, sp, #16
    612e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6132:	f7fc f901 	bl	2338 <z_impl_z_log_msg_static_create>
		return -EBUSY;
    6136:	f06f 000f 	mvn.w	r0, #15

	qdec_nrfx_gpio_ctrl(true);
	nrfx_qdec_enable();

	return 0;
}
    613a:	b007      	add	sp, #28
    613c:	f85d fb04 	ldr.w	pc, [sp], #4
	} else if (nerr != NRFX_SUCCESS) {
    6140:	4b13      	ldr	r3, [pc, #76]	; (6190 <qdec_nrfx_init.part.0+0x80>)
    6142:	4298      	cmp	r0, r3
    6144:	d00d      	beq.n	6162 <qdec_nrfx_init.part.0+0x52>
		LOG_ERR("failed to initialize qdec");
    6146:	4b13      	ldr	r3, [pc, #76]	; (6194 <qdec_nrfx_init.part.0+0x84>)
    6148:	9305      	str	r3, [sp, #20]
    614a:	2302      	movs	r3, #2
    614c:	9304      	str	r3, [sp, #16]
    614e:	480f      	ldr	r0, [pc, #60]	; (618c <qdec_nrfx_init.part.0+0x7c>)
    6150:	2300      	movs	r3, #0
    6152:	aa04      	add	r2, sp, #16
    6154:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6158:	f7fc f8ee 	bl	2338 <z_impl_z_log_msg_static_create>
		return -EFAULT;
    615c:	f06f 000d 	mvn.w	r0, #13
    6160:	e7eb      	b.n	613a <qdec_nrfx_init.part.0+0x2a>
    p_reg->OUTCLR = clr_mask;
    6162:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6166:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    616a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = cnf;
    616e:	2203      	movs	r2, #3
    6170:	f8c3 2778 	str.w	r2, [r3, #1912]	; 0x778
	nrfx_qdec_enable();
    6174:	f002 f928 	bl	83c8 <nrfx_qdec_enable>
	return 0;
    6178:	2000      	movs	r0, #0
    617a:	e7de      	b.n	613a <qdec_nrfx_init.part.0+0x2a>
    617c:	00006095 	.word	0x00006095
    6180:	0000d1d4 	.word	0x0000d1d4
    6184:	0bad0005 	.word	0x0bad0005
    6188:	0000e16a 	.word	0x0000e16a
    618c:	0000cff0 	.word	0x0000cff0
    6190:	0bad0000 	.word	0x0bad0000
    6194:	0000e17e 	.word	0x0000e17e

00006198 <qdec_nrfx_init>:
{
    6198:	b507      	push	{r0, r1, r2, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    619a:	2200      	movs	r2, #0
    619c:	2101      	movs	r1, #1
    619e:	2012      	movs	r0, #18
    61a0:	f7fd fd30 	bl	3c04 <z_arm_irq_priority_set>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    61a4:	480b      	ldr	r0, [pc, #44]	; (61d4 <qdec_nrfx_init+0x3c>)
    61a6:	aa01      	add	r2, sp, #4
    61a8:	2100      	movs	r1, #0
    61aa:	f005 ff15 	bl	bfd8 <pinctrl_lookup_state>
	if (ret < 0) {
    61ae:	2800      	cmp	r0, #0
    61b0:	db0c      	blt.n	61cc <qdec_nrfx_init+0x34>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    61b2:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    61b4:	4a08      	ldr	r2, [pc, #32]	; (61d8 <qdec_nrfx_init+0x40>)
    61b6:	7919      	ldrb	r1, [r3, #4]
    61b8:	6818      	ldr	r0, [r3, #0]
    61ba:	f005 ff20 	bl	bffe <pinctrl_configure_pins>
	if (ret < 0) {
    61be:	2800      	cmp	r0, #0
    61c0:	db04      	blt.n	61cc <qdec_nrfx_init+0x34>
}
    61c2:	b003      	add	sp, #12
    61c4:	f85d eb04 	ldr.w	lr, [sp], #4
    61c8:	f7ff bfa2 	b.w	6110 <qdec_nrfx_init.part.0>
    61cc:	b003      	add	sp, #12
    61ce:	f85d fb04 	ldr.w	pc, [sp], #4
    61d2:	bf00      	nop
    61d4:	0000d204 	.word	0x0000d204
    61d8:	40012000 	.word	0x40012000

000061dc <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    61dc:	4b01      	ldr	r3, [pc, #4]	; (61e4 <hfclk_on_callback+0x8>)
    61de:	2201      	movs	r2, #1
    61e0:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    61e2:	4770      	bx	lr
    61e4:	4000c000 	.word	0x4000c000

000061e8 <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    61e8:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
    61ea:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
    61ec:	d10b      	bne.n	6206 <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    61ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    61f0:	4906      	ldr	r1, [pc, #24]	; (620c <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
    61f2:	4807      	ldr	r0, [pc, #28]	; (6210 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    61f4:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
    61f6:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
    61fa:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
    61fe:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    6200:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    6202:	2000      	movs	r0, #0
    6204:	4770      	bx	lr
		return -ENOTSUP;
    6206:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    620a:	4770      	bx	lr
    620c:	0003d090 	.word	0x0003d090
    6210:	000f4240 	.word	0x000f4240

00006214 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6214:	4b04      	ldr	r3, [pc, #16]	; (6228 <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(const void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
    6216:	6900      	ldr	r0, [r0, #16]
    6218:	2200      	movs	r2, #0
    621a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    621e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	z_impl_k_sem_give(sem);
    6222:	f003 be29 	b.w	9e78 <z_impl_k_sem_give>
    6226:	bf00      	nop
    6228:	4000c000 	.word	0x4000c000

0000622c <temp_nrf5_sample_fetch>:
{
    622c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
    622e:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
    6230:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6232:	b363      	cbz	r3, 628e <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    6234:	2939      	cmp	r1, #57	; 0x39
    6236:	d001      	beq.n	623c <temp_nrf5_sample_fetch+0x10>
    6238:	290c      	cmp	r1, #12
    623a:	d12b      	bne.n	6294 <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
    623c:	f105 0610 	add.w	r6, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    6240:	f04f 32ff 	mov.w	r2, #4294967295
    6244:	f04f 33ff 	mov.w	r3, #4294967295
    6248:	4630      	mov	r0, r6
    624a:	f003 fd2b 	bl	9ca4 <z_impl_k_mutex_lock>
    624e:	4b13      	ldr	r3, [pc, #76]	; (629c <temp_nrf5_sample_fetch+0x70>)
    6250:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
    6252:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    6254:	2303      	movs	r3, #3
    6256:	2400      	movs	r4, #0
    6258:	4669      	mov	r1, sp
    625a:	9403      	str	r4, [sp, #12]
    625c:	9302      	str	r3, [sp, #8]
    625e:	f005 f88e 	bl	b37e <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    6262:	f04f 32ff 	mov.w	r2, #4294967295
    6266:	f04f 33ff 	mov.w	r3, #4294967295
    626a:	4628      	mov	r0, r5
    626c:	f003 fe24 	bl	9eb8 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    6270:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    6272:	f005 f8dc 	bl	b42e <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    6276:	4b0a      	ldr	r3, [pc, #40]	; (62a0 <temp_nrf5_sample_fetch+0x74>)
    6278:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    627c:	626a      	str	r2, [r5, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    627e:	2201      	movs	r2, #1
    6280:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    6282:	4630      	mov	r0, r6
    6284:	f003 fd88 	bl	9d98 <z_impl_k_mutex_unlock>
	return 0;
    6288:	4620      	mov	r0, r4
}
    628a:	b004      	add	sp, #16
    628c:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    628e:	f06f 000a 	mvn.w	r0, #10
    6292:	e7fa      	b.n	628a <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
    6294:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6298:	e7f7      	b.n	628a <temp_nrf5_sample_fetch+0x5e>
    629a:	bf00      	nop
    629c:	000061dd 	.word	0x000061dd
    62a0:	4000c000 	.word	0x4000c000

000062a4 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    62a4:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    62a6:	6904      	ldr	r4, [r0, #16]

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    62a8:	2000      	movs	r0, #0
    62aa:	f7ff fc09 	bl	5ac0 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    62ae:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    62b0:	f04f 32ff 	mov.w	r2, #4294967295
    62b4:	2100      	movs	r1, #0
    62b6:	4620      	mov	r0, r4
    62b8:	f006 fb03 	bl	c8c2 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
    62bc:	f104 0010 	add.w	r0, r4, #16
    62c0:	f006 fa77 	bl	c7b2 <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
    62c4:	2200      	movs	r2, #0
    62c6:	2101      	movs	r1, #1
    62c8:	200c      	movs	r0, #12
    62ca:	f7fd fc9b 	bl	3c04 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    62ce:	200c      	movs	r0, #12
    62d0:	f7fd fc68 	bl	3ba4 <arch_irq_enable>
    p_reg->INTENSET = mask;
    62d4:	4b02      	ldr	r3, [pc, #8]	; (62e0 <temp_nrf5_init+0x3c>)
    62d6:	2201      	movs	r2, #1
    62d8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    62dc:	2000      	movs	r0, #0
    62de:	bd10      	pop	{r4, pc}
    62e0:	4000c000 	.word	0x4000c000

000062e4 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
    62e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    62e8:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
    62ea:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    62ec:	6905      	ldr	r5, [r0, #16]
	int err;

	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    62ee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
{
    62f0:	af00      	add	r7, sp, #0
	ret = pinctrl_lookup_state(config, id, &state);
    62f2:	1d3a      	adds	r2, r7, #4
    62f4:	2100      	movs	r1, #0
    62f6:	4630      	mov	r0, r6
    62f8:	f005 fe6e 	bl	bfd8 <pinctrl_lookup_state>
	if (ret < 0) {
    62fc:	2800      	cmp	r0, #0
    62fe:	db32      	blt.n	6366 <spi_nrfx_init+0x82>
	return pinctrl_apply_state_direct(config, state);
    6300:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    6302:	6832      	ldr	r2, [r6, #0]
    6304:	7919      	ldrb	r1, [r3, #4]
    6306:	6818      	ldr	r0, [r3, #0]
    6308:	f005 fe79 	bl	bffe <pinctrl_configure_pins>
	if (err < 0) {
    630c:	2800      	cmp	r0, #0
    630e:	db2a      	blt.n	6366 <spi_nrfx_init+0x82>
		return err;
	}

	dev_config->irq_connect();
    6310:	6a23      	ldr	r3, [r4, #32]
    6312:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    6314:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    6316:	2601      	movs	r6, #1
    6318:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    631c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    6320:	429c      	cmp	r4, r3
    6322:	d304      	bcc.n	632e <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
    6324:	4628      	mov	r0, r5
    6326:	f005 ff34 	bl	c192 <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
    632a:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
    632c:	e01b      	b.n	6366 <spi_nrfx_init+0x82>
		if (!device_is_ready(cs_gpio->port)) {
    632e:	6820      	ldr	r0, [r4, #0]
    6330:	f006 f9d5 	bl	c6de <z_device_is_ready>
    6334:	b9d8      	cbnz	r0, 636e <spi_nrfx_init+0x8a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    6336:	6823      	ldr	r3, [r4, #0]
    6338:	6819      	ldr	r1, [r3, #0]
    633a:	7923      	ldrb	r3, [r4, #4]
    633c:	466c      	mov	r4, sp
    633e:	b08a      	sub	sp, #40	; 0x28
    6340:	466a      	mov	r2, sp
    6342:	481c      	ldr	r0, [pc, #112]	; (63b4 <spi_nrfx_init+0xd0>)
    6344:	61d3      	str	r3, [r2, #28]
    6346:	f44f 7300 	mov.w	r3, #512	; 0x200
    634a:	8413      	strh	r3, [r2, #32]
    634c:	4b1a      	ldr	r3, [pc, #104]	; (63b8 <spi_nrfx_init+0xd4>)
    634e:	e9c2 0105 	strd	r0, r1, [r2, #20]
    6352:	481a      	ldr	r0, [pc, #104]	; (63bc <spi_nrfx_init+0xd8>)
    6354:	f842 3f10 	str.w	r3, [r2, #16]!
    6358:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    635c:	f005 fee0 	bl	c120 <z_log_msg_static_create.constprop.0>
			return -ENODEV;
    6360:	f06f 0012 	mvn.w	r0, #18
    6364:	46a5      	mov	sp, r4
#endif
}
    6366:	370c      	adds	r7, #12
    6368:	46bd      	mov	sp, r7
    636a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return gpio_pin_configure(spec->port,
    636e:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
    6370:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
    6372:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
    6374:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
    6378:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    637c:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    6380:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    6382:	bf54      	ite	pl
    6384:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    6388:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    638c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    6390:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    6394:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    6396:	bf4c      	ite	mi
    6398:	ea4c 0308 	orrmi.w	r3, ip, r8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    639c:	ea2c 0308 	bicpl.w	r3, ip, r8
    63a0:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
    63a4:	f8d9 3000 	ldr.w	r3, [r9]
    63a8:	4798      	blx	r3
		if (ret < 0) {
    63aa:	2800      	cmp	r0, #0
    63ac:	dbdb      	blt.n	6366 <spi_nrfx_init+0x82>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    63ae:	3408      	adds	r4, #8
    63b0:	e7b2      	b.n	6318 <spi_nrfx_init+0x34>
    63b2:	bf00      	nop
    63b4:	0000e1c8 	.word	0x0000e1c8
    63b8:	01000004 	.word	0x01000004
    63bc:	0000d000 	.word	0x0000d000

000063c0 <transfer_next_chunk>:
{
    63c0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    63c2:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    63c4:	6847      	ldr	r7, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    63c6:	6ca5      	ldr	r5, [r4, #72]	; 0x48
		return ctx->rx_len;
    63c8:	6d23      	ldr	r3, [r4, #80]	; 0x50
{
    63ca:	b085      	sub	sp, #20
    63cc:	4606      	mov	r6, r0
	if (!ctx->tx_len) {
    63ce:	b93d      	cbnz	r5, 63e0 <transfer_next_chunk+0x20>
	if (chunk_len > 0) {
    63d0:	bb6b      	cbnz	r3, 642e <transfer_next_chunk+0x6e>
	int error = 0;
    63d2:	4619      	mov	r1, r3
	finish_transaction(dev, error);
    63d4:	6930      	ldr	r0, [r6, #16]
}
    63d6:	b005      	add	sp, #20
    63d8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	finish_transaction(dev, error);
    63dc:	f005 befb 	b.w	c1d6 <finish_transaction.isra.0>
		const uint8_t *tx_buf = ctx->tx_buf;
    63e0:	6c61      	ldr	r1, [r4, #68]	; 0x44
	} else if (!ctx->rx_len) {
    63e2:	bb03      	cbnz	r3, 6426 <transfer_next_chunk+0x66>
	return !!(ctx->tx_buf && ctx->tx_len);
    63e4:	bb31      	cbnz	r1, 6434 <transfer_next_chunk+0x74>
		if (chunk_len > dev_config->max_chunk_len) {
    63e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    63e8:	6c63      	ldr	r3, [r4, #68]	; 0x44
		xfer.p_tx_buffer = tx_buf;
    63ea:	9100      	str	r1, [sp, #0]
    63ec:	42aa      	cmp	r2, r5
    63ee:	bf28      	it	cs
    63f0:	462a      	movcs	r2, r5
		dev_data->chunk_len = chunk_len;
    63f2:	65a2      	str	r2, [r4, #88]	; 0x58
    63f4:	b11b      	cbz	r3, 63fe <transfer_next_chunk+0x3e>
    63f6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    63f8:	2b00      	cmp	r3, #0
    63fa:	bf18      	it	ne
    63fc:	4613      	movne	r3, r2
    63fe:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    6400:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6402:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    6404:	b11b      	cbz	r3, 640e <transfer_next_chunk+0x4e>
    6406:	6d23      	ldr	r3, [r4, #80]	; 0x50
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    6408:	2b00      	cmp	r3, #0
    640a:	bf18      	it	ne
    640c:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    640e:	2200      	movs	r2, #0
    6410:	4669      	mov	r1, sp
    6412:	4638      	mov	r0, r7
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    6414:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    6416:	f002 f8e7 	bl	85e8 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    641a:	4b0e      	ldr	r3, [pc, #56]	; (6454 <transfer_next_chunk+0x94>)
    641c:	4298      	cmp	r0, r3
    641e:	d017      	beq.n	6450 <transfer_next_chunk+0x90>
			error = -EIO;
    6420:	f06f 0104 	mvn.w	r1, #4
    6424:	e7d6      	b.n	63d4 <transfer_next_chunk+0x14>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    6426:	429d      	cmp	r5, r3
    6428:	bf28      	it	cs
    642a:	461d      	movcs	r5, r3
    642c:	e7da      	b.n	63e4 <transfer_next_chunk+0x24>
		const uint8_t *tx_buf = ctx->tx_buf;
    642e:	6c61      	ldr	r1, [r4, #68]	; 0x44
    6430:	461d      	mov	r5, r3
    6432:	e7d8      	b.n	63e6 <transfer_next_chunk+0x26>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    6434:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    6438:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    643c:	d0d3      	beq.n	63e6 <transfer_next_chunk+0x26>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
    643e:	2d08      	cmp	r5, #8
    6440:	bf28      	it	cs
    6442:	2508      	movcs	r5, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
    6444:	6e20      	ldr	r0, [r4, #96]	; 0x60
    6446:	462a      	mov	r2, r5
    6448:	f005 fc3d 	bl	bcc6 <memcpy>
			tx_buf = dev_data->buffer;
    644c:	6e21      	ldr	r1, [r4, #96]	; 0x60
    644e:	e7ca      	b.n	63e6 <transfer_next_chunk+0x26>
}
    6450:	b005      	add	sp, #20
    6452:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6454:	0bad0000 	.word	0x0bad0000

00006458 <event_handler>:
{
    6458:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    645a:	7803      	ldrb	r3, [r0, #0]
{
    645c:	b086      	sub	sp, #24
    645e:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    6460:	2b00      	cmp	r3, #0
    6462:	d15e      	bne.n	6522 <event_handler+0xca>
		if (dev_data->chunk_len == 0) {
    6464:	6d8a      	ldr	r2, [r1, #88]	; 0x58
    6466:	b942      	cbnz	r2, 647a <event_handler+0x22>
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    6468:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    646a:	6918      	ldr	r0, [r3, #16]
    646c:	f06f 0173 	mvn.w	r1, #115	; 0x73
}
    6470:	b006      	add	sp, #24
    6472:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    6476:	f005 beae 	b.w	c1d6 <finish_transaction.isra.0>
	if (!ctx->tx_len) {
    647a:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    647c:	b15b      	cbz	r3, 6496 <event_handler+0x3e>
	if (len > ctx->tx_len) {
    647e:	429a      	cmp	r2, r3
    6480:	d91e      	bls.n	64c0 <event_handler+0x68>
		LOG_ERR("Update exceeds current buffer");
    6482:	4b29      	ldr	r3, [pc, #164]	; (6528 <event_handler+0xd0>)
    6484:	9305      	str	r3, [sp, #20]
    6486:	4829      	ldr	r0, [pc, #164]	; (652c <event_handler+0xd4>)
    6488:	2302      	movs	r3, #2
    648a:	aa04      	add	r2, sp, #16
    648c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6490:	9304      	str	r3, [sp, #16]
    6492:	f005 fe45 	bl	c120 <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
    6496:	6d23      	ldr	r3, [r4, #80]	; 0x50
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    6498:	6da2      	ldr	r2, [r4, #88]	; 0x58
    649a:	b15b      	cbz	r3, 64b4 <event_handler+0x5c>
	if (len > ctx->rx_len) {
    649c:	429a      	cmp	r2, r3
    649e:	d927      	bls.n	64f0 <event_handler+0x98>
		LOG_ERR("Update exceeds current buffer");
    64a0:	4b21      	ldr	r3, [pc, #132]	; (6528 <event_handler+0xd0>)
    64a2:	9305      	str	r3, [sp, #20]
    64a4:	4821      	ldr	r0, [pc, #132]	; (652c <event_handler+0xd4>)
    64a6:	2302      	movs	r3, #2
    64a8:	aa04      	add	r2, sp, #16
    64aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    64ae:	9304      	str	r3, [sp, #16]
    64b0:	f005 fe36 	bl	c120 <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
    64b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
}
    64b6:	b006      	add	sp, #24
    64b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    64bc:	f7ff bf80 	b.w	63c0 <transfer_next_chunk>
	ctx->tx_len -= len;
    64c0:	1a9b      	subs	r3, r3, r2
    64c2:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
    64c4:	b973      	cbnz	r3, 64e4 <event_handler+0x8c>
		++ctx->current_tx;
    64c6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    64c8:	3308      	adds	r3, #8
    64ca:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
    64cc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    64ce:	3b01      	subs	r3, #1
    64d0:	638b      	str	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    64d2:	f101 0248 	add.w	r2, r1, #72	; 0x48
    64d6:	f104 0034 	add.w	r0, r4, #52	; 0x34
    64da:	3138      	adds	r1, #56	; 0x38
    64dc:	f005 fe0d 	bl	c0fa <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    64e0:	6460      	str	r0, [r4, #68]	; 0x44
    64e2:	e7d8      	b.n	6496 <event_handler+0x3e>
	} else if (ctx->tx_buf) {
    64e4:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    64e6:	2b00      	cmp	r3, #0
    64e8:	d0d5      	beq.n	6496 <event_handler+0x3e>
		ctx->tx_buf += dfs * len;
    64ea:	4413      	add	r3, r2
    64ec:	644b      	str	r3, [r1, #68]	; 0x44
    64ee:	e7d2      	b.n	6496 <event_handler+0x3e>
	ctx->rx_len -= len;
    64f0:	1a9b      	subs	r3, r3, r2
    64f2:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    64f4:	b97b      	cbnz	r3, 6516 <event_handler+0xbe>
		++ctx->current_rx;
    64f6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    64f8:	3308      	adds	r3, #8
    64fa:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    64fc:	6c23      	ldr	r3, [r4, #64]	; 0x40
    64fe:	3b01      	subs	r3, #1
    6500:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    6502:	f104 0250 	add.w	r2, r4, #80	; 0x50
    6506:	f104 0140 	add.w	r1, r4, #64	; 0x40
    650a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    650e:	f005 fdf4 	bl	c0fa <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    6512:	64e0      	str	r0, [r4, #76]	; 0x4c
    6514:	e7ce      	b.n	64b4 <event_handler+0x5c>
	} else if (ctx->rx_buf) {
    6516:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    6518:	2b00      	cmp	r3, #0
    651a:	d0cb      	beq.n	64b4 <event_handler+0x5c>
		ctx->rx_buf += dfs * len;
    651c:	4413      	add	r3, r2
    651e:	64e3      	str	r3, [r4, #76]	; 0x4c
    6520:	e7c8      	b.n	64b4 <event_handler+0x5c>
}
    6522:	b006      	add	sp, #24
    6524:	bd10      	pop	{r4, pc}
    6526:	bf00      	nop
    6528:	0000e1ec 	.word	0x0000e1ec
    652c:	0000d000 	.word	0x0000d000

00006530 <spi_nrfx_transceive>:
{
    6530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6534:	b08d      	sub	sp, #52	; 0x34
    6536:	af00      	add	r7, sp, #0
    6538:	469a      	mov	sl, r3
	const struct spi_nrfx_config *dev_config = dev->config;
    653a:	6843      	ldr	r3, [r0, #4]
    653c:	60bb      	str	r3, [r7, #8]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    653e:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    6540:	6904      	ldr	r4, [r0, #16]
{
    6542:	613a      	str	r2, [r7, #16]
    6544:	049b      	lsls	r3, r3, #18
    6546:	4606      	mov	r6, r0
    6548:	4688      	mov	r8, r1
    654a:	d439      	bmi.n	65c0 <spi_nrfx_transceive+0x90>
	return z_impl_k_sem_take(sem, timeout);
    654c:	f04f 32ff 	mov.w	r2, #4294967295
    6550:	f04f 33ff 	mov.w	r3, #4294967295
    6554:	f104 0010 	add.w	r0, r4, #16
    6558:	f003 fcae 	bl	9eb8 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    655c:	f8c4 8004 	str.w	r8, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
    6560:	6873      	ldr	r3, [r6, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    6562:	f8d6 9010 	ldr.w	r9, [r6, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    6566:	617b      	str	r3, [r7, #20]
	uint32_t max_freq = dev_config->max_freq;
    6568:	689b      	ldr	r3, [r3, #8]
    656a:	607b      	str	r3, [r7, #4]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    656c:	f899 305d 	ldrb.w	r3, [r9, #93]	; 0x5d
    6570:	60fb      	str	r3, [r7, #12]
    6572:	b123      	cbz	r3, 657e <spi_nrfx_transceive+0x4e>
    6574:	f8d9 3000 	ldr.w	r3, [r9]
    6578:	4598      	cmp	r8, r3
    657a:	f000 80d1 	beq.w	6720 <spi_nrfx_transceive+0x1f0>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    657e:	f8b8 c004 	ldrh.w	ip, [r8, #4]
    6582:	f41c 6f00 	tst.w	ip, #2048	; 0x800
    6586:	d022      	beq.n	65ce <spi_nrfx_transceive+0x9e>
		LOG_ERR("Half-duplex not supported");
    6588:	4bb1      	ldr	r3, [pc, #708]	; (6850 <spi_nrfx_transceive+0x320>)
    658a:	62fb      	str	r3, [r7, #44]	; 0x2c
    658c:	2302      	movs	r3, #2
    658e:	48b1      	ldr	r0, [pc, #708]	; (6854 <spi_nrfx_transceive+0x324>)
    6590:	62bb      	str	r3, [r7, #40]	; 0x28
    6592:	f107 0228 	add.w	r2, r7, #40	; 0x28
    6596:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
    659a:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
    659e:	f005 fdbf 	bl	c120 <z_log_msg_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    65a2:	6823      	ldr	r3, [r4, #0]
    65a4:	889b      	ldrh	r3, [r3, #4]
    65a6:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    65aa:	d104      	bne.n	65b6 <spi_nrfx_transceive+0x86>
		ctx->owner = NULL;
    65ac:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    65ae:	f104 0010 	add.w	r0, r4, #16
    65b2:	f003 fc61 	bl	9e78 <z_impl_k_sem_give>
}
    65b6:	4628      	mov	r0, r5
    65b8:	3734      	adds	r7, #52	; 0x34
    65ba:	46bd      	mov	sp, r7
    65bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    65c0:	69a3      	ldr	r3, [r4, #24]
    65c2:	2b00      	cmp	r3, #0
    65c4:	d1c2      	bne.n	654c <spi_nrfx_transceive+0x1c>
		(k_sem_count_get(&ctx->lock) == 0) &&
    65c6:	6863      	ldr	r3, [r4, #4]
    65c8:	4299      	cmp	r1, r3
    65ca:	d1bf      	bne.n	654c <spi_nrfx_transceive+0x1c>
    65cc:	e7c8      	b.n	6560 <spi_nrfx_transceive+0x30>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    65ce:	f01c 0f01 	tst.w	ip, #1
    65d2:	d015      	beq.n	6600 <spi_nrfx_transceive+0xd0>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    65d4:	466d      	mov	r5, sp
    65d6:	b088      	sub	sp, #32
    65d8:	6833      	ldr	r3, [r6, #0]
    65da:	466a      	mov	r2, sp
    65dc:	499e      	ldr	r1, [pc, #632]	; (6858 <spi_nrfx_transceive+0x328>)
    65de:	489d      	ldr	r0, [pc, #628]	; (6854 <spi_nrfx_transceive+0x324>)
    65e0:	e9c2 1305 	strd	r1, r3, [r2, #20]
    65e4:	f44f 7300 	mov.w	r3, #512	; 0x200
    65e8:	8393      	strh	r3, [r2, #28]
    65ea:	4b9c      	ldr	r3, [pc, #624]	; (685c <spi_nrfx_transceive+0x32c>)
    65ec:	f842 3f10 	str.w	r3, [r2, #16]!
    65f0:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    65f4:	f005 fd94 	bl	c120 <z_log_msg_static_create.constprop.0>
    65f8:	46ad      	mov	sp, r5
		return -EINVAL;
    65fa:	f06f 0515 	mvn.w	r5, #21
    65fe:	e7d0      	b.n	65a2 <spi_nrfx_transceive+0x72>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    6600:	f01c 0f08 	tst.w	ip, #8
    6604:	d00b      	beq.n	661e <spi_nrfx_transceive+0xee>
		LOG_ERR("Loopback mode is not supported");
    6606:	4b96      	ldr	r3, [pc, #600]	; (6860 <spi_nrfx_transceive+0x330>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
    6608:	62fb      	str	r3, [r7, #44]	; 0x2c
    660a:	2302      	movs	r3, #2
    660c:	4891      	ldr	r0, [pc, #580]	; (6854 <spi_nrfx_transceive+0x324>)
    660e:	62bb      	str	r3, [r7, #40]	; 0x28
    6610:	f107 0228 	add.w	r2, r7, #40	; 0x28
    6614:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6618:	f005 fd82 	bl	c120 <z_log_msg_static_create.constprop.0>
	if (error == 0) {
    661c:	e7ed      	b.n	65fa <spi_nrfx_transceive+0xca>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    661e:	f3cc 1345 	ubfx	r3, ip, #5, #6
    6622:	2b08      	cmp	r3, #8
    6624:	d001      	beq.n	662a <spi_nrfx_transceive+0xfa>
		LOG_ERR("Word sizes other than 8 bits are not supported");
    6626:	4b8f      	ldr	r3, [pc, #572]	; (6864 <spi_nrfx_transceive+0x334>)
    6628:	e7ee      	b.n	6608 <spi_nrfx_transceive+0xd8>
	if (spi_cfg->frequency < 125000) {
    662a:	f8d8 5000 	ldr.w	r5, [r8]
    662e:	4b8e      	ldr	r3, [pc, #568]	; (6868 <spi_nrfx_transceive+0x338>)
    6630:	429d      	cmp	r5, r3
    6632:	d801      	bhi.n	6638 <spi_nrfx_transceive+0x108>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    6634:	4b8d      	ldr	r3, [pc, #564]	; (686c <spi_nrfx_transceive+0x33c>)
    6636:	e7e7      	b.n	6608 <spi_nrfx_transceive+0xd8>
	config = dev_config->def_config;
    6638:	697b      	ldr	r3, [r7, #20]
    663a:	f103 0b0c 	add.w	fp, r3, #12
    663e:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
    6642:	f107 0e18 	add.w	lr, r7, #24
    6646:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    664a:	f8db 3000 	ldr.w	r3, [fp]
    664e:	f8ce 3000 	str.w	r3, [lr]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    6652:	687b      	ldr	r3, [r7, #4]
    6654:	42ab      	cmp	r3, r5
    6656:	bf28      	it	cs
    6658:	462b      	movcs	r3, r5
    665a:	461d      	mov	r5, r3
	if (frequency < 250000) {
    665c:	4b84      	ldr	r3, [pc, #528]	; (6870 <spi_nrfx_transceive+0x340>)
    665e:	429d      	cmp	r5, r3
    6660:	d946      	bls.n	66f0 <spi_nrfx_transceive+0x1c0>
	} else if (frequency < 500000) {
    6662:	4b84      	ldr	r3, [pc, #528]	; (6874 <spi_nrfx_transceive+0x344>)
    6664:	429d      	cmp	r5, r3
    6666:	d946      	bls.n	66f6 <spi_nrfx_transceive+0x1c6>
	} else if (frequency < 1000000) {
    6668:	4b83      	ldr	r3, [pc, #524]	; (6878 <spi_nrfx_transceive+0x348>)
    666a:	429d      	cmp	r5, r3
    666c:	d946      	bls.n	66fc <spi_nrfx_transceive+0x1cc>
	} else if (frequency < 2000000) {
    666e:	4b83      	ldr	r3, [pc, #524]	; (687c <spi_nrfx_transceive+0x34c>)
    6670:	429d      	cmp	r5, r3
    6672:	d946      	bls.n	6702 <spi_nrfx_transceive+0x1d2>
	} else if (frequency < 4000000) {
    6674:	4b82      	ldr	r3, [pc, #520]	; (6880 <spi_nrfx_transceive+0x350>)
    6676:	429d      	cmp	r5, r3
    6678:	d946      	bls.n	6708 <spi_nrfx_transceive+0x1d8>
		return NRF_SPIM_FREQ_4M;
    667a:	4b82      	ldr	r3, [pc, #520]	; (6884 <spi_nrfx_transceive+0x354>)
    667c:	429d      	cmp	r5, r3
    667e:	bf2c      	ite	cs
    6680:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
    6684:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    6688:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    668c:	623d      	str	r5, [r7, #32]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    668e:	f00c 0304 	and.w	r3, ip, #4
    6692:	d03c      	beq.n	670e <spi_nrfx_transceive+0x1de>
			return NRF_SPIM_MODE_2;
    6694:	2b00      	cmp	r3, #0
    6696:	bf14      	ite	ne
    6698:	2303      	movne	r3, #3
    669a:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    669c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if (dev_data->initialized) {
    66a0:	68fb      	ldr	r3, [r7, #12]
	if (operation & SPI_TRANSFER_LSB) {
    66a2:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    66a6:	f887 c025 	strb.w	ip, [r7, #37]	; 0x25
	if (dev_data->initialized) {
    66aa:	b12b      	cbz	r3, 66b8 <spi_nrfx_transceive+0x188>
		nrfx_spim_uninit(&dev_config->spim);
    66ac:	6978      	ldr	r0, [r7, #20]
    66ae:	f001 ff53 	bl	8558 <nrfx_spim_uninit>
		dev_data->initialized = false;
    66b2:	2300      	movs	r3, #0
    66b4:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
	result = nrfx_spim_init(&dev_config->spim, &config,
    66b8:	464b      	mov	r3, r9
    66ba:	4a73      	ldr	r2, [pc, #460]	; (6888 <spi_nrfx_transceive+0x358>)
    66bc:	6978      	ldr	r0, [r7, #20]
    66be:	f107 0118 	add.w	r1, r7, #24
    66c2:	f001 fe9b 	bl	83fc <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    66c6:	4b71      	ldr	r3, [pc, #452]	; (688c <spi_nrfx_transceive+0x35c>)
    66c8:	4298      	cmp	r0, r3
    66ca:	d024      	beq.n	6716 <spi_nrfx_transceive+0x1e6>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    66cc:	466d      	mov	r5, sp
    66ce:	b088      	sub	sp, #32
    66d0:	466a      	mov	r2, sp
    66d2:	4b6f      	ldr	r3, [pc, #444]	; (6890 <spi_nrfx_transceive+0x360>)
    66d4:	e9c2 3005 	strd	r3, r0, [r2, #20]
    66d8:	2303      	movs	r3, #3
    66da:	f842 3f10 	str.w	r3, [r2, #16]!
    66de:	485d      	ldr	r0, [pc, #372]	; (6854 <spi_nrfx_transceive+0x324>)
    66e0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    66e4:	f005 fd1c 	bl	c120 <z_log_msg_static_create.constprop.0>
    66e8:	46ad      	mov	sp, r5
		return -EIO;
    66ea:	f06f 0504 	mvn.w	r5, #4
    66ee:	e758      	b.n	65a2 <spi_nrfx_transceive+0x72>
		return NRF_SPIM_FREQ_125K;
    66f0:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    66f4:	e7c8      	b.n	6688 <spi_nrfx_transceive+0x158>
		return NRF_SPIM_FREQ_250K;
    66f6:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    66fa:	e7c5      	b.n	6688 <spi_nrfx_transceive+0x158>
		return NRF_SPIM_FREQ_500K;
    66fc:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    6700:	e7c2      	b.n	6688 <spi_nrfx_transceive+0x158>
		return NRF_SPIM_FREQ_1M;
    6702:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    6706:	e7bf      	b.n	6688 <spi_nrfx_transceive+0x158>
		return NRF_SPIM_FREQ_2M;
    6708:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    670c:	e7bc      	b.n	6688 <spi_nrfx_transceive+0x158>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    670e:	3b00      	subs	r3, #0
    6710:	bf18      	it	ne
    6712:	2301      	movne	r3, #1
    6714:	e7c2      	b.n	669c <spi_nrfx_transceive+0x16c>
	dev_data->initialized = true;
    6716:	2301      	movs	r3, #1
    6718:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
	ctx->config = spi_cfg;
    671c:	f8c9 8000 	str.w	r8, [r9]
		dev_data->busy = true;
    6720:	2301      	movs	r3, #1
    6722:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    6726:	693b      	ldr	r3, [r7, #16]
    6728:	2b00      	cmp	r3, #0
    672a:	d16d      	bne.n	6808 <spi_nrfx_transceive+0x2d8>
    672c:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    672e:	2300      	movs	r3, #0
    6730:	63a3      	str	r3, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    6732:	f104 0248 	add.w	r2, r4, #72	; 0x48
    6736:	f104 0138 	add.w	r1, r4, #56	; 0x38
    673a:	f104 0034 	add.w	r0, r4, #52	; 0x34
    673e:	f005 fcdc 	bl	c0fa <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
    6742:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    6744:	f1ba 0f00 	cmp.w	sl, #0
    6748:	d166      	bne.n	6818 <spi_nrfx_transceive+0x2e8>
    674a:	f8c4 a03c 	str.w	sl, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    674e:	2300      	movs	r3, #0
    6750:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    6752:	f104 0250 	add.w	r2, r4, #80	; 0x50
    6756:	f104 0140 	add.w	r1, r4, #64	; 0x40
    675a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    675e:	f005 fccc 	bl	c0fa <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    6762:	2500      	movs	r5, #0
	_spi_context_cs_control(ctx, on, false);
    6764:	462a      	mov	r2, r5
	ctx->rx_buf = (uint8_t *)
    6766:	64e0      	str	r0, [r4, #76]	; 0x4c
	_spi_context_cs_control(ctx, on, false);
    6768:	2101      	movs	r1, #1
    676a:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    676c:	6325      	str	r5, [r4, #48]	; 0x30
	_spi_context_cs_control(ctx, on, false);
    676e:	f005 fcee 	bl	c14e <_spi_context_cs_control>
		transfer_next_chunk(dev);
    6772:	4630      	mov	r0, r6
    6774:	f7ff fe24 	bl	63c0 <transfer_next_chunk>
static inline size_t spi_context_total_tx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;

	for (n = 0; n < ctx->tx_count; ++n) {
    6778:	6ba0      	ldr	r0, [r4, #56]	; 0x38
	size_t total_len = 0;
    677a:	462a      	mov	r2, r5
	for (n = 0; n < ctx->tx_count; ++n) {
    677c:	462b      	mov	r3, r5
    677e:	4283      	cmp	r3, r0
    6780:	d152      	bne.n	6828 <spi_nrfx_transceive+0x2f8>
}

static inline size_t spi_context_total_rx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;
    6782:	2300      	movs	r3, #0

	for (n = 0; n < ctx->rx_count; ++n) {
    6784:	6c25      	ldr	r5, [r4, #64]	; 0x40
    6786:	4619      	mov	r1, r3
    6788:	42a9      	cmp	r1, r5
    678a:	d154      	bne.n	6836 <spi_nrfx_transceive+0x306>
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    678c:	4293      	cmp	r3, r2
				     ctx->config->frequency;
    678e:	46a0      	mov	r8, r4
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    6790:	bf38      	it	cc
    6792:	4613      	movcc	r3, r2
    6794:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    6798:	fb02 f503 	mul.w	r5, r2, r3
				     ctx->config->frequency;
    679c:	f858 3b20 	ldr.w	r3, [r8], #32
			return ((t * to_hz + off) / from_hz);
    67a0:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    67a4:	681b      	ldr	r3, [r3, #0]
    67a6:	fbb5 f5f3 	udiv	r5, r5, r3
    67aa:	f240 30e7 	movw	r0, #999	; 0x3e7
			timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    67ae:	35c8      	adds	r5, #200	; 0xc8
    67b0:	2100      	movs	r1, #0
    67b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    67b6:	2300      	movs	r3, #0
    67b8:	fbe5 010c 	umlal	r0, r1, r5, ip
    67bc:	f7f9 fc90 	bl	e0 <__aeabi_uldivmod>
    67c0:	4602      	mov	r2, r0
    67c2:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    67c4:	4640      	mov	r0, r8
    67c6:	f003 fb77 	bl	9eb8 <z_impl_k_sem_take>
		if (k_sem_take(&ctx->sync, timeout)) {
    67ca:	2800      	cmp	r0, #0
    67cc:	d03a      	beq.n	6844 <spi_nrfx_transceive+0x314>
			LOG_ERR("Timeout waiting for transfer complete");
    67ce:	4b31      	ldr	r3, [pc, #196]	; (6894 <spi_nrfx_transceive+0x364>)
    67d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    67d2:	2302      	movs	r3, #2
    67d4:	481f      	ldr	r0, [pc, #124]	; (6854 <spi_nrfx_transceive+0x324>)
    67d6:	62bb      	str	r3, [r7, #40]	; 0x28
    67d8:	f107 0228 	add.w	r2, r7, #40	; 0x28
    67dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    67e0:	f005 fc9e 	bl	c120 <z_log_msg_static_create.constprop.0>
			dev_data->chunk_len = 0;
    67e4:	2500      	movs	r5, #0
			nrfx_spim_uninit(&dev_config->spim);
    67e6:	68b8      	ldr	r0, [r7, #8]
			dev_data->chunk_len = 0;
    67e8:	65a5      	str	r5, [r4, #88]	; 0x58
			nrfx_spim_uninit(&dev_config->spim);
    67ea:	f001 feb5 	bl	8558 <nrfx_spim_uninit>
			dev_data->initialized = false;
    67ee:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			finish_transaction(dev, -ETIMEDOUT);
    67f2:	6930      	ldr	r0, [r6, #16]
    67f4:	f06f 0173 	mvn.w	r1, #115	; 0x73
    67f8:	f005 fced 	bl	c1d6 <finish_transaction.isra.0>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_RESET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_reset(sem);
    67fc:	4640      	mov	r0, r8
    67fe:	f003 fb83 	bl	9f08 <z_impl_k_sem_reset>
		error = spi_context_wait_for_completion(&dev_data->ctx);
    6802:	f06f 0573 	mvn.w	r5, #115	; 0x73
}
    6806:	e6cc      	b.n	65a2 <spi_nrfx_transceive+0x72>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    6808:	693b      	ldr	r3, [r7, #16]
    680a:	681b      	ldr	r3, [r3, #0]
    680c:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    680e:	2b00      	cmp	r3, #0
    6810:	d08d      	beq.n	672e <spi_nrfx_transceive+0x1fe>
    6812:	693b      	ldr	r3, [r7, #16]
    6814:	685b      	ldr	r3, [r3, #4]
    6816:	e78b      	b.n	6730 <spi_nrfx_transceive+0x200>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    6818:	f8da 3000 	ldr.w	r3, [sl]
    681c:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    681e:	2b00      	cmp	r3, #0
    6820:	d095      	beq.n	674e <spi_nrfx_transceive+0x21e>
    6822:	f8da 3004 	ldr.w	r3, [sl, #4]
    6826:	e793      	b.n	6750 <spi_nrfx_transceive+0x220>
		total_len += ctx->current_tx[n].len;
    6828:	6b61      	ldr	r1, [r4, #52]	; 0x34
    682a:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
	for (n = 0; n < ctx->tx_count; ++n) {
    682e:	3301      	adds	r3, #1
		total_len += ctx->current_tx[n].len;
    6830:	6849      	ldr	r1, [r1, #4]
    6832:	440a      	add	r2, r1
	for (n = 0; n < ctx->tx_count; ++n) {
    6834:	e7a3      	b.n	677e <spi_nrfx_transceive+0x24e>
		total_len += ctx->current_rx[n].len;
    6836:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    6838:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
	for (n = 0; n < ctx->rx_count; ++n) {
    683c:	3101      	adds	r1, #1
		total_len += ctx->current_rx[n].len;
    683e:	6840      	ldr	r0, [r0, #4]
    6840:	4403      	add	r3, r0
	for (n = 0; n < ctx->rx_count; ++n) {
    6842:	e7a1      	b.n	6788 <spi_nrfx_transceive+0x258>
		status = ctx->sync_status;
    6844:	6b25      	ldr	r5, [r4, #48]	; 0x30
		if (error == -ETIMEDOUT) {
    6846:	f115 0f74 	cmn.w	r5, #116	; 0x74
    684a:	f47f aeaa 	bne.w	65a2 <spi_nrfx_transceive+0x72>
    684e:	e7c9      	b.n	67e4 <spi_nrfx_transceive+0x2b4>
    6850:	0000e20a 	.word	0x0000e20a
    6854:	0000d000 	.word	0x0000d000
    6858:	0000e224 	.word	0x0000e224
    685c:	01000003 	.word	0x01000003
    6860:	0000e246 	.word	0x0000e246
    6864:	0000e265 	.word	0x0000e265
    6868:	0001e847 	.word	0x0001e847
    686c:	0000e294 	.word	0x0000e294
    6870:	0003d08f 	.word	0x0003d08f
    6874:	0007a11f 	.word	0x0007a11f
    6878:	000f423f 	.word	0x000f423f
    687c:	001e847f 	.word	0x001e847f
    6880:	003d08ff 	.word	0x003d08ff
    6884:	007a1200 	.word	0x007a1200
    6888:	00006459 	.word	0x00006459
    688c:	0bad0000 	.word	0x0bad0000
    6890:	0000e2c5 	.word	0x0000e2c5
    6894:	0000e2ec 	.word	0x0000e2ec

00006898 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    6898:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    689a:	2301      	movs	r3, #1
    689c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    689e:	4a0e      	ldr	r2, [pc, #56]	; (68d8 <compare_int_lock+0x40>)
    68a0:	f3bf 8f5b 	dmb	ish
    68a4:	43dc      	mvns	r4, r3
    68a6:	e852 1f00 	ldrex	r1, [r2]
    68aa:	ea01 0504 	and.w	r5, r1, r4
    68ae:	e842 5600 	strex	r6, r5, [r2]
    68b2:	2e00      	cmp	r6, #0
    68b4:	d1f7      	bne.n	68a6 <compare_int_lock+0xe>
    68b6:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    68ba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    68be:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    68c0:	4806      	ldr	r0, [pc, #24]	; (68dc <compare_int_lock+0x44>)
    68c2:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    68c6:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    68ca:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    68ce:	420b      	tst	r3, r1
}
    68d0:	bf14      	ite	ne
    68d2:	2001      	movne	r0, #1
    68d4:	2000      	moveq	r0, #0
    68d6:	bd70      	pop	{r4, r5, r6, pc}
    68d8:	200017c4 	.word	0x200017c4
    68dc:	40011000 	.word	0x40011000

000068e0 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    68e0:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    68e2:	490e      	ldr	r1, [pc, #56]	; (691c <sys_clock_timeout_handler+0x3c>)
    68e4:	e9d1 3400 	ldrd	r3, r4, [r1]
    68e8:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    68ea:	18c3      	adds	r3, r0, r3
    68ec:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    68f0:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    68f4:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    68f8:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    68fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    6900:	d209      	bcs.n	6916 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    6902:	4b07      	ldr	r3, [pc, #28]	; (6920 <sys_clock_timeout_handler+0x40>)
    6904:	681b      	ldr	r3, [r3, #0]
    6906:	0a1a      	lsrs	r2, r3, #8
    6908:	061b      	lsls	r3, r3, #24
    690a:	199c      	adds	r4, r3, r6
    690c:	4b05      	ldr	r3, [pc, #20]	; (6924 <sys_clock_timeout_handler+0x44>)
    690e:	f142 0500 	adc.w	r5, r2, #0
    6912:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    6916:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    6918:	f004 b8d6 	b.w	aac8 <sys_clock_announce>
    691c:	20000968 	.word	0x20000968
    6920:	200017c8 	.word	0x200017c8
    6924:	20000970 	.word	0x20000970

00006928 <compare_int_unlock>:
	if (key) {
    6928:	b311      	cbz	r1, 6970 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    692a:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    692e:	2301      	movs	r3, #1
    6930:	4a10      	ldr	r2, [pc, #64]	; (6974 <compare_int_unlock+0x4c>)
    6932:	4083      	lsls	r3, r0
    6934:	e852 cf00 	ldrex	ip, [r2]
    6938:	ea4c 0c03 	orr.w	ip, ip, r3
    693c:	e842 c100 	strex	r1, ip, [r2]
    6940:	2900      	cmp	r1, #0
    6942:	d1f7      	bne.n	6934 <compare_int_unlock+0xc>
    6944:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    6948:	4a0b      	ldr	r2, [pc, #44]	; (6978 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    694a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    694e:	4083      	lsls	r3, r0
    6950:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6954:	4b09      	ldr	r3, [pc, #36]	; (697c <compare_int_unlock+0x54>)
    6956:	f3bf 8f5b 	dmb	ish
    695a:	681b      	ldr	r3, [r3, #0]
    695c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    6960:	40c3      	lsrs	r3, r0
    6962:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6964:	bf42      	ittt	mi
    6966:	4b06      	ldrmi	r3, [pc, #24]	; (6980 <compare_int_unlock+0x58>)
    6968:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    696c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    6970:	4770      	bx	lr
    6972:	bf00      	nop
    6974:	200017c4 	.word	0x200017c4
    6978:	40011000 	.word	0x40011000
    697c:	200017c0 	.word	0x200017c0
    6980:	e000e100 	.word	0xe000e100

00006984 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    6984:	4b0d      	ldr	r3, [pc, #52]	; (69bc <z_nrf_rtc_timer_read+0x38>)
    6986:	6818      	ldr	r0, [r3, #0]
    6988:	0a01      	lsrs	r1, r0, #8
    698a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    698c:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    6990:	4b0b      	ldr	r3, [pc, #44]	; (69c0 <z_nrf_rtc_timer_read+0x3c>)
    6992:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    6996:	1818      	adds	r0, r3, r0
    6998:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    699c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    69a0:	d20a      	bcs.n	69b8 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    69a2:	4b08      	ldr	r3, [pc, #32]	; (69c4 <z_nrf_rtc_timer_read+0x40>)
    69a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    69a8:	4290      	cmp	r0, r2
    69aa:	eb71 0303 	sbcs.w	r3, r1, r3
    69ae:	d203      	bcs.n	69b8 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    69b0:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    69b4:	f141 0100 	adc.w	r1, r1, #0
}
    69b8:	4770      	bx	lr
    69ba:	bf00      	nop
    69bc:	200017c8 	.word	0x200017c8
    69c0:	40011000 	.word	0x40011000
    69c4:	20000970 	.word	0x20000970

000069c8 <compare_set>:
{
    69c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69cc:	4616      	mov	r6, r2
    69ce:	461f      	mov	r7, r3
    69d0:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    69d2:	f7ff ff61 	bl	6898 <compare_int_lock>
    69d6:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    69d8:	f7ff ffd4 	bl	6984 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    69dc:	42b0      	cmp	r0, r6
    69de:	eb71 0307 	sbcs.w	r3, r1, r7
    69e2:	d251      	bcs.n	6a88 <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    69e4:	4b3a      	ldr	r3, [pc, #232]	; (6ad0 <compare_set+0x108>)
    69e6:	1a30      	subs	r0, r6, r0
    69e8:	eb67 0101 	sbc.w	r1, r7, r1
    69ec:	4298      	cmp	r0, r3
    69ee:	f171 0100 	sbcs.w	r1, r1, #0
    69f2:	d26a      	bcs.n	6aca <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    69f4:	4b37      	ldr	r3, [pc, #220]	; (6ad4 <compare_set+0x10c>)
    69f6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    69fa:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    69fe:	429f      	cmp	r7, r3
    6a00:	bf08      	it	eq
    6a02:	4296      	cmpeq	r6, r2
    6a04:	d04e      	beq.n	6aa4 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    6a06:	4934      	ldr	r1, [pc, #208]	; (6ad8 <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6a08:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6a0c:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6a10:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6a14:	00ad      	lsls	r5, r5, #2
    6a16:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    6a1a:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6a1c:	b2ad      	uxth	r5, r5
    6a1e:	f005 fbeb 	bl	c1f8 <event_clear>
	return absolute_time & COUNTER_MAX;
    6a22:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    6a26:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    6a2a:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    6a2e:	4a2b      	ldr	r2, [pc, #172]	; (6adc <compare_set+0x114>)
    6a30:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6a32:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    6a36:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    6a38:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    6a3c:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    6a3e:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    6a42:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    6a46:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    6a4a:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    6a4e:	f06f 0002 	mvn.w	r0, #2
    6a52:	eba0 0008 	sub.w	r0, r0, r8
    6a56:	4460      	add	r0, ip
    6a58:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    6a5c:	4290      	cmp	r0, r2
    6a5e:	d921      	bls.n	6aa4 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6a60:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    6a62:	b160      	cbz	r0, 6a7e <compare_set+0xb6>
     return p_reg->COUNTER;
    6a64:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    6a68:	eba8 000b 	sub.w	r0, r8, fp
    6a6c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    6a70:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6a74:	d916      	bls.n	6aa4 <compare_set+0xdc>
					event_clear(chan);
    6a76:	4620      	mov	r0, r4
    6a78:	f005 fbbe 	bl	c1f8 <event_clear>
    6a7c:	4a17      	ldr	r2, [pc, #92]	; (6adc <compare_set+0x114>)
			cc_val = now + cc_inc;
    6a7e:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    6a82:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    6a86:	e7d9      	b.n	6a3c <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    6a88:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6a8a:	4a15      	ldr	r2, [pc, #84]	; (6ae0 <compare_set+0x118>)
    6a8c:	f3bf 8f5b 	dmb	ish
    6a90:	40a3      	lsls	r3, r4
    6a92:	e852 0f00 	ldrex	r0, [r2]
    6a96:	4318      	orrs	r0, r3
    6a98:	e842 0100 	strex	r1, r0, [r2]
    6a9c:	2900      	cmp	r1, #0
    6a9e:	d1f8      	bne.n	6a92 <compare_set+0xca>
    6aa0:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    6aa4:	490b      	ldr	r1, [pc, #44]	; (6ad4 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    6aa6:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    6aa8:	0123      	lsls	r3, r4, #4
    6aaa:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    6aae:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    6ab2:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    6ab4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6ab6:	6053      	str	r3, [r2, #4]
	return ret;
    6ab8:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    6aba:	4620      	mov	r0, r4
    6abc:	9900      	ldr	r1, [sp, #0]
    6abe:	f7ff ff33 	bl	6928 <compare_int_unlock>
}
    6ac2:	4628      	mov	r0, r5
    6ac4:	b003      	add	sp, #12
    6ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    6aca:	f06f 0515 	mvn.w	r5, #21
    6ace:	e7f4      	b.n	6aba <compare_set+0xf2>
    6ad0:	00800001 	.word	0x00800001
    6ad4:	20000958 	.word	0x20000958
    6ad8:	40011000 	.word	0x40011000
    6adc:	007ffffd 	.word	0x007ffffd
    6ae0:	200017c0 	.word	0x200017c0

00006ae4 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    6ae4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    6ae6:	4c1b      	ldr	r4, [pc, #108]	; (6b54 <sys_clock_driver_init+0x70>)
    6ae8:	4b1b      	ldr	r3, [pc, #108]	; (6b58 <sys_clock_driver_init+0x74>)
    6aea:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    6aee:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    6af2:	4b1a      	ldr	r3, [pc, #104]	; (6b5c <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    6af4:	2500      	movs	r5, #0
    6af6:	f04f 30ff 	mov.w	r0, #4294967295
    6afa:	f04f 31ff 	mov.w	r1, #4294967295
    6afe:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    6b02:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    6b06:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6b0a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6b0e:	4b14      	ldr	r3, [pc, #80]	; (6b60 <sys_clock_driver_init+0x7c>)
    6b10:	2602      	movs	r6, #2
    6b12:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    6b16:	2101      	movs	r1, #1
    6b18:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    6b1c:	2011      	movs	r0, #17
    6b1e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    6b22:	462a      	mov	r2, r5
    6b24:	f7fd f86e 	bl	3c04 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    6b28:	2011      	movs	r0, #17
    6b2a:	f7fd f83b 	bl	3ba4 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    6b2e:	4a0d      	ldr	r2, [pc, #52]	; (6b64 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    6b30:	2301      	movs	r3, #1
    6b32:	60a3      	str	r3, [r4, #8]
    6b34:	6023      	str	r3, [r4, #0]
    6b36:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    6b38:	4b0b      	ldr	r3, [pc, #44]	; (6b68 <sys_clock_driver_init+0x84>)
    6b3a:	4a0c      	ldr	r2, [pc, #48]	; (6b6c <sys_clock_driver_init+0x88>)
    6b3c:	9300      	str	r3, [sp, #0]
    6b3e:	9501      	str	r5, [sp, #4]
    6b40:	2300      	movs	r3, #0
    6b42:	4628      	mov	r0, r5
    6b44:	f7ff ff40 	bl	69c8 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    6b48:	4630      	mov	r0, r6
    6b4a:	f7fe ffc1 	bl	5ad0 <z_nrf_clock_control_lf_on>

	return 0;
}
    6b4e:	4628      	mov	r0, r5
    6b50:	b002      	add	sp, #8
    6b52:	bd70      	pop	{r4, r5, r6, pc}
    6b54:	40011000 	.word	0x40011000
    6b58:	000f0003 	.word	0x000f0003
    6b5c:	20000958 	.word	0x20000958
    6b60:	e000e100 	.word	0xe000e100
    6b64:	200017c4 	.word	0x200017c4
    6b68:	000068e1 	.word	0x000068e1
    6b6c:	007fffff 	.word	0x007fffff

00006b70 <rtc_nrf_isr>:
{
    6b70:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    6b74:	4c2b      	ldr	r4, [pc, #172]	; (6c24 <rtc_nrf_isr+0xb4>)
    6b76:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    6b7a:	0799      	lsls	r1, r3, #30
    6b7c:	d50b      	bpl.n	6b96 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6b7e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    6b82:	b143      	cbz	r3, 6b96 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    6b84:	4a28      	ldr	r2, [pc, #160]	; (6c28 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6b86:	2300      	movs	r3, #0
    6b88:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    6b8c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    6b90:	6813      	ldr	r3, [r2, #0]
    6b92:	3301      	adds	r3, #1
    6b94:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    6b96:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    6b9a:	03da      	lsls	r2, r3, #15
    6b9c:	d523      	bpl.n	6be6 <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6b9e:	f3bf 8f5b 	dmb	ish
    6ba2:	4b22      	ldr	r3, [pc, #136]	; (6c2c <rtc_nrf_isr+0xbc>)
    6ba4:	e853 2f00 	ldrex	r2, [r3]
    6ba8:	f022 0101 	bic.w	r1, r2, #1
    6bac:	e843 1000 	strex	r0, r1, [r3]
    6bb0:	2800      	cmp	r0, #0
    6bb2:	d1f7      	bne.n	6ba4 <rtc_nrf_isr+0x34>
    6bb4:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    6bb8:	07d3      	lsls	r3, r2, #31
    6bba:	d402      	bmi.n	6bc2 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6bbc:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    6bc0:	b18b      	cbz	r3, 6be6 <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6bc2:	2500      	movs	r5, #0
    6bc4:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    6bc8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    6bcc:	f7ff feda 	bl	6984 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    6bd0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    6bd4:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
    6bd6:	4b16      	ldr	r3, [pc, #88]	; (6c30 <rtc_nrf_isr+0xc0>)
    6bd8:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    6bdc:	42b0      	cmp	r0, r6
    6bde:	41b9      	sbcs	r1, r7
    6be0:	d204      	bcs.n	6bec <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    6be2:	f382 8810 	msr	PRIMASK, r2
}
    6be6:	b003      	add	sp, #12
    6be8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    6bec:	f04f 38ff 	mov.w	r8, #4294967295
    6bf0:	f04f 39ff 	mov.w	r9, #4294967295
    6bf4:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    6bf8:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    6bfc:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    6bfe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6c02:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6c06:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    6c0a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    6c0e:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
    6c12:	2900      	cmp	r1, #0
    6c14:	d0e7      	beq.n	6be6 <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
    6c16:	9000      	str	r0, [sp, #0]
    6c18:	4632      	mov	r2, r6
    6c1a:	463b      	mov	r3, r7
    6c1c:	4628      	mov	r0, r5
    6c1e:	4788      	blx	r1
    6c20:	e7e1      	b.n	6be6 <rtc_nrf_isr+0x76>
    6c22:	bf00      	nop
    6c24:	40011000 	.word	0x40011000
    6c28:	200017c8 	.word	0x200017c8
    6c2c:	200017c0 	.word	0x200017c0
    6c30:	20000958 	.word	0x20000958

00006c34 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    6c34:	1c43      	adds	r3, r0, #1
{
    6c36:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    6c38:	d022      	beq.n	6c80 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    6c3a:	2801      	cmp	r0, #1
    6c3c:	dd22      	ble.n	6c84 <sys_clock_set_timeout+0x50>
    6c3e:	4a12      	ldr	r2, [pc, #72]	; (6c88 <sys_clock_set_timeout+0x54>)
    6c40:	4b12      	ldr	r3, [pc, #72]	; (6c8c <sys_clock_set_timeout+0x58>)
    6c42:	4290      	cmp	r0, r2
    6c44:	bfd4      	ite	le
    6c46:	4604      	movle	r4, r0
    6c48:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    6c4a:	f7ff fe9b 	bl	6984 <z_nrf_rtc_timer_read>
    6c4e:	4b10      	ldr	r3, [pc, #64]	; (6c90 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    6c50:	490e      	ldr	r1, [pc, #56]	; (6c8c <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    6c52:	e9d3 2300 	ldrd	r2, r3, [r3]
    6c56:	1a80      	subs	r0, r0, r2
		cyc = 0;
    6c58:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6c5c:	bf28      	it	cs
    6c5e:	2400      	movcs	r4, #0
	cyc += unannounced;
    6c60:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    6c62:	428c      	cmp	r4, r1
    6c64:	bf28      	it	cs
    6c66:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    6c68:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    6c6a:	490a      	ldr	r1, [pc, #40]	; (6c94 <sys_clock_set_timeout+0x60>)
    6c6c:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    6c6e:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    6c72:	9001      	str	r0, [sp, #4]
    6c74:	f143 0300 	adc.w	r3, r3, #0
    6c78:	f7ff fea6 	bl	69c8 <compare_set>
}
    6c7c:	b002      	add	sp, #8
    6c7e:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    6c80:	4c02      	ldr	r4, [pc, #8]	; (6c8c <sys_clock_set_timeout+0x58>)
    6c82:	e7e2      	b.n	6c4a <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    6c84:	2401      	movs	r4, #1
    6c86:	e7e0      	b.n	6c4a <sys_clock_set_timeout+0x16>
    6c88:	007ffffe 	.word	0x007ffffe
    6c8c:	007fffff 	.word	0x007fffff
    6c90:	20000968 	.word	0x20000968
    6c94:	000068e1 	.word	0x000068e1

00006c98 <sys_clock_elapsed>:
{
    6c98:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    6c9a:	f7ff fe73 	bl	6984 <z_nrf_rtc_timer_read>
    6c9e:	4b02      	ldr	r3, [pc, #8]	; (6ca8 <sys_clock_elapsed+0x10>)
    6ca0:	681b      	ldr	r3, [r3, #0]
}
    6ca2:	1ac0      	subs	r0, r0, r3
    6ca4:	bd08      	pop	{r3, pc}
    6ca6:	bf00      	nop
    6ca8:	20000968 	.word	0x20000968

00006cac <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    6cac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    6cae:	f7fb fa63 	bl	2178 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    6cb2:	4b07      	ldr	r3, [pc, #28]	; (6cd0 <k_sys_fatal_error_handler+0x24>)
    6cb4:	9305      	str	r3, [sp, #20]
    6cb6:	2302      	movs	r3, #2
    6cb8:	9304      	str	r3, [sp, #16]
    6cba:	4806      	ldr	r0, [pc, #24]	; (6cd4 <k_sys_fatal_error_handler+0x28>)
    6cbc:	2300      	movs	r3, #0
    6cbe:	aa04      	add	r2, sp, #16
    6cc0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6cc4:	f7fb fb38 	bl	2338 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    6cc8:	2000      	movs	r0, #0
    6cca:	f7fd fd01 	bl	46d0 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    6cce:	bf00      	nop
    6cd0:	0000e32d 	.word	0x0000e32d
    6cd4:	0000cfa0 	.word	0x0000cfa0

00006cd8 <RADIO_IRQHandler>:
	ISR_DIRECT_PM();
}

#else /* !IS_ENABLED(CONFIG_ESB_DYNAMIC_INTERRUPTS) */

ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    6cd8:	4668      	mov	r0, sp
    6cda:	f020 0107 	bic.w	r1, r0, #7
    6cde:	468d      	mov	sp, r1
    6ce0:	b501      	push	{r0, lr}
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_radio_int_enable_check(NRF_RADIO_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    6ce2:	4b0c      	ldr	r3, [pc, #48]	; (6d14 <RADIO_IRQHandler+0x3c>)
    6ce4:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_DISABLED_MASK) &&
    6ce8:	06d2      	lsls	r2, r2, #27
    6cea:	d50b      	bpl.n	6d04 <RADIO_IRQHandler+0x2c>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    6cec:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    6cf0:	b142      	cbz	r2, 6d04 <RADIO_IRQHandler+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6cf2:	2200      	movs	r2, #0
    6cf4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    6cf8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
		if (on_radio_disabled) {
    6cfc:	4b06      	ldr	r3, [pc, #24]	; (6d18 <RADIO_IRQHandler+0x40>)
    6cfe:	681b      	ldr	r3, [r3, #0]
    6d00:	b103      	cbz	r3, 6d04 <RADIO_IRQHandler+0x2c>
			on_radio_disabled();
    6d02:	4798      	blx	r3
{
	radio_irq_handler();

	ISR_DIRECT_PM();
    6d04:	f7fc ff98 	bl	3c38 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
    6d08:	f7fd f87a 	bl	3e00 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    6d0c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    6d10:	4685      	mov	sp, r0
    6d12:	4770      	bx	lr
    6d14:	40001000 	.word	0x40001000
    6d18:	200017cc 	.word	0x200017cc

00006d1c <SWI0_EGU0_IRQHandler>:

	return 1;
}


ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    6d1c:	4668      	mov	r0, sp
    6d1e:	f020 0107 	bic.w	r1, r0, #7
    6d22:	468d      	mov	sp, r1
    6d24:	b531      	push	{r0, r4, r5, lr}
	event.tx_attempts = last_tx_attempts;
    6d26:	4b1b      	ldr	r3, [pc, #108]	; (6d94 <SWI0_EGU0_IRQHandler+0x78>)
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    6d28:	b082      	sub	sp, #8
	event.tx_attempts = last_tx_attempts;
    6d2a:	681b      	ldr	r3, [r3, #0]
    6d2c:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
    6d2e:	f04f 0340 	mov.w	r3, #64	; 0x40
    6d32:	f3ef 8111 	mrs	r1, BASEPRI
    6d36:	f383 8812 	msr	BASEPRI_MAX, r3
    6d3a:	f3bf 8f6f 	isb	sy
	*interrupts = interrupt_flags;
    6d3e:	4b16      	ldr	r3, [pc, #88]	; (6d98 <SWI0_EGU0_IRQHandler+0x7c>)
	interrupt_flags = 0;
    6d40:	2200      	movs	r2, #0
	*interrupts = interrupt_flags;
    6d42:	681d      	ldr	r5, [r3, #0]
	interrupt_flags = 0;
    6d44:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    6d46:	f381 8811 	msr	BASEPRI, r1
    6d4a:	f3bf 8f6f 	isb	sy
	if (event_handler != NULL) {
    6d4e:	4c13      	ldr	r4, [pc, #76]	; (6d9c <SWI0_EGU0_IRQHandler+0x80>)
    6d50:	6823      	ldr	r3, [r4, #0]
    6d52:	b1ab      	cbz	r3, 6d80 <SWI0_EGU0_IRQHandler+0x64>
		if (interrupts & INT_TX_SUCCESS_MSK) {
    6d54:	07e9      	lsls	r1, r5, #31
    6d56:	d503      	bpl.n	6d60 <SWI0_EGU0_IRQHandler+0x44>
			event.evt_id = ESB_EVENT_TX_SUCCESS;
    6d58:	f88d 2000 	strb.w	r2, [sp]
			event_handler(&event);
    6d5c:	4668      	mov	r0, sp
    6d5e:	4798      	blx	r3
		if (interrupts & INT_TX_FAILED_MSK) {
    6d60:	07aa      	lsls	r2, r5, #30
    6d62:	d505      	bpl.n	6d70 <SWI0_EGU0_IRQHandler+0x54>
			event.evt_id = ESB_EVENT_TX_FAILED;
    6d64:	2301      	movs	r3, #1
    6d66:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    6d6a:	4668      	mov	r0, sp
    6d6c:	6823      	ldr	r3, [r4, #0]
    6d6e:	4798      	blx	r3
		if (interrupts & INT_RX_DATA_RECEIVED_MSK) {
    6d70:	076b      	lsls	r3, r5, #29
    6d72:	d505      	bpl.n	6d80 <SWI0_EGU0_IRQHandler+0x64>
			event.evt_id = ESB_EVENT_RX_RECEIVED;
    6d74:	2302      	movs	r3, #2
    6d76:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    6d7a:	4668      	mov	r0, sp
    6d7c:	6823      	ldr	r3, [r4, #0]
    6d7e:	4798      	blx	r3
{
	esb_evt_irq_handler();

	ISR_DIRECT_PM();
    6d80:	f7fc ff5a 	bl	3c38 <_arch_isr_direct_pm>
    6d84:	f7fd f83c 	bl	3e00 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    6d88:	b002      	add	sp, #8
    6d8a:	e8bd 4031 	ldmia.w	sp!, {r0, r4, r5, lr}
    6d8e:	4685      	mov	sp, r0
    6d90:	4770      	bx	lr
    6d92:	bf00      	nop
    6d94:	200017d0 	.word	0x200017d0
    6d98:	200017d4 	.word	0x200017d4
    6d9c:	200017d8 	.word	0x200017d8

00006da0 <irq_handler>:
	return err;
}

static void irq_handler(const struct device *gpiob, struct gpio_callback *cb,
			uint32_t pins)
{
    6da0:	b510      	push	{r4, lr}
	int err;
	struct pmw3360_data *data = CONTAINER_OF(cb, struct pmw3360_data,
						 irq_gpio_cb);
	const struct device *dev = data->dev;
	const struct pmw3360_config *config = dev->config;
    6da2:	f851 3c04 	ldr.w	r3, [r1, #-4]
{
    6da6:	b086      	sub	sp, #24
    6da8:	460c      	mov	r4, r1

	err = gpio_pin_interrupt_configure_dt(&config->irq_gpio,
    6daa:	6858      	ldr	r0, [r3, #4]
    6dac:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    6db0:	f005 fa37 	bl	c222 <gpio_pin_interrupt_configure_dt>
					      GPIO_INT_DISABLE);
	if (unlikely(err)) {
    6db4:	b178      	cbz	r0, 6dd6 <irq_handler+0x36>
		LOG_ERR("Cannot disable IRQ");
    6db6:	4b0b      	ldr	r3, [pc, #44]	; (6de4 <irq_handler+0x44>)
    6db8:	9305      	str	r3, [sp, #20]
    6dba:	480b      	ldr	r0, [pc, #44]	; (6de8 <irq_handler+0x48>)
    6dbc:	2302      	movs	r3, #2
    6dbe:	aa04      	add	r2, sp, #16
    6dc0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6dc4:	9304      	str	r3, [sp, #16]
    6dc6:	f005 fab1 	bl	c32c <z_log_msg_static_create.constprop.0>
		k_panic();
    6dca:	4040      	eors	r0, r0
    6dcc:	f380 8811 	msr	BASEPRI, r0
    6dd0:	f04f 0004 	mov.w	r0, #4
    6dd4:	df02      	svc	2
	}

	k_work_submit(&data->trigger_handler_work);
    6dd6:	f104 0014 	add.w	r0, r4, #20
}
    6dda:	b006      	add	sp, #24
    6ddc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit(&data->trigger_handler_work);
    6de0:	f003 b9c0 	b.w	a164 <k_work_submit>
    6de4:	0000e34e 	.word	0x0000e34e
    6de8:	0000cfe8 	.word	0x0000cfe8

00006dec <pmw3360_async_init>:

	return err;
}

static void pmw3360_async_init(struct k_work *work)
{
    6dec:	b570      	push	{r4, r5, r6, lr}
						 init_work);
	const struct device *dev = data->dev;

	LOG_DBG("PMW3360 async init step %d", data->async_init_step);

	data->err = async_init_fn[data->async_init_step](dev);
    6dee:	4b22      	ldr	r3, [pc, #136]	; (6e78 <pmw3360_async_init+0x8c>)
    6df0:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
{
    6df4:	4604      	mov	r4, r0
	data->err = async_init_fn[data->async_init_step](dev);
    6df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    6dfa:	f850 0c28 	ldr.w	r0, [r0, #-40]
{
    6dfe:	b086      	sub	sp, #24
	data->err = async_init_fn[data->async_init_step](dev);
    6e00:	4798      	blx	r3
    6e02:	4601      	mov	r1, r0
    6e04:	6360      	str	r0, [r4, #52]	; 0x34
	if (data->err) {
    6e06:	b158      	cbz	r0, 6e20 <pmw3360_async_init+0x34>
		LOG_ERR("PMW3360 initialization failed");
    6e08:	4b1c      	ldr	r3, [pc, #112]	; (6e7c <pmw3360_async_init+0x90>)
    6e0a:	9305      	str	r3, [sp, #20]
    6e0c:	2302      	movs	r3, #2
    6e0e:	9304      	str	r3, [sp, #16]
    6e10:	aa04      	add	r2, sp, #16
    6e12:	f44f 5182 	mov.w	r1, #4160	; 0x1040
	} else {
		data->async_init_step++;

		if (data->async_init_step == ASYNC_INIT_STEP_COUNT) {
			data->ready = true;
			LOG_INF("PMW3360 initialized");
    6e16:	481a      	ldr	r0, [pc, #104]	; (6e80 <pmw3360_async_init+0x94>)
    6e18:	f005 fa88 	bl	c32c <z_log_msg_static_create.constprop.0>
			k_work_schedule(&data->init_work,
					K_MSEC(async_init_delay[
						data->async_init_step]));
		}
	}
}
    6e1c:	b006      	add	sp, #24
    6e1e:	bd70      	pop	{r4, r5, r6, pc}
		data->async_init_step++;
    6e20:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    6e24:	3301      	adds	r3, #1
    6e26:	b2db      	uxtb	r3, r3
		if (data->async_init_step == ASYNC_INIT_STEP_COUNT) {
    6e28:	2b05      	cmp	r3, #5
		data->async_init_step++;
    6e2a:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if (data->async_init_step == ASYNC_INIT_STEP_COUNT) {
    6e2e:	d10a      	bne.n	6e46 <pmw3360_async_init+0x5a>
			data->ready = true;
    6e30:	2301      	movs	r3, #1
    6e32:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			LOG_INF("PMW3360 initialized");
    6e36:	4b13      	ldr	r3, [pc, #76]	; (6e84 <pmw3360_async_init+0x98>)
    6e38:	9305      	str	r3, [sp, #20]
    6e3a:	2302      	movs	r3, #2
    6e3c:	9304      	str	r3, [sp, #16]
    6e3e:	aa04      	add	r2, sp, #16
    6e40:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    6e44:	e7e7      	b.n	6e16 <pmw3360_async_init+0x2a>
					K_MSEC(async_init_delay[
    6e46:	4a10      	ldr	r2, [pc, #64]	; (6e88 <pmw3360_async_init+0x9c>)
    6e48:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    6e4c:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    6e50:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    6e54:	f240 30e7 	movw	r0, #999	; 0x3e7
    6e58:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6e5c:	2300      	movs	r3, #0
    6e5e:	fbc5 0106 	smlal	r0, r1, r5, r6
    6e62:	f7f9 f93d 	bl	e0 <__aeabi_uldivmod>
    6e66:	4602      	mov	r2, r0
    6e68:	460b      	mov	r3, r1
			k_work_schedule(&data->init_work,
    6e6a:	4620      	mov	r0, r4
}
    6e6c:	b006      	add	sp, #24
    6e6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&data->init_work,
    6e72:	f003 b9df 	b.w	a234 <k_work_schedule>
    6e76:	bf00      	nop
    6e78:	0000d2c4 	.word	0x0000d2c4
    6e7c:	0000e361 	.word	0x0000e361
    6e80:	0000cfe8 	.word	0x0000cfe8
    6e84:	0000e37f 	.word	0x0000e37f
    6e88:	0000d2d8 	.word	0x0000d2d8

00006e8c <trigger_handler>:
{
    6e8c:	b570      	push	{r4, r5, r6, lr}
    6e8e:	4604      	mov	r4, r0
	const struct device *dev = data->dev;
    6e90:	f850 0c18 	ldr.w	r0, [r0, #-24]
{
    6e94:	b088      	sub	sp, #32
	const struct pmw3360_config *config = dev->config;
    6e96:	6846      	ldr	r6, [r0, #4]
	__asm__ volatile(
    6e98:	f04f 0340 	mov.w	r3, #64	; 0x40
    6e9c:	f3ef 8211 	mrs	r2, BASEPRI
    6ea0:	f383 8812 	msr	BASEPRI_MAX, r3
    6ea4:	f3bf 8f6f 	isb	sy
	handler = data->data_ready_handler;
    6ea8:	f854 3c04 	ldr.w	r3, [r4, #-4]
	__asm__ volatile(
    6eac:	f382 8811 	msr	BASEPRI, r2
    6eb0:	f3bf 8f6f 	isb	sy
	if (!handler) {
    6eb4:	b193      	cbz	r3, 6edc <trigger_handler+0x50>
	struct sensor_trigger trig = {
    6eb6:	4a18      	ldr	r2, [pc, #96]	; (6f18 <trigger_handler+0x8c>)
    6eb8:	9201      	str	r2, [sp, #4]
	handler(dev, &trig);
    6eba:	a901      	add	r1, sp, #4
    6ebc:	4798      	blx	r3
	__asm__ volatile(
    6ebe:	f04f 0340 	mov.w	r3, #64	; 0x40
    6ec2:	f3ef 8511 	mrs	r5, BASEPRI
    6ec6:	f383 8812 	msr	BASEPRI_MAX, r3
    6eca:	f3bf 8f6f 	isb	sy
	if (data->data_ready_handler) {
    6ece:	f854 3c04 	ldr.w	r3, [r4, #-4]
    6ed2:	b92b      	cbnz	r3, 6ee0 <trigger_handler+0x54>
	__asm__ volatile(
    6ed4:	f385 8811 	msr	BASEPRI, r5
    6ed8:	f3bf 8f6f 	isb	sy
}
    6edc:	b008      	add	sp, #32
    6ede:	bd70      	pop	{r4, r5, r6, pc}
		err = gpio_pin_interrupt_configure_dt(&config->irq_gpio,
    6ee0:	f04f 6198 	mov.w	r1, #79691776	; 0x4c00000
    6ee4:	4630      	mov	r0, r6
    6ee6:	f005 f99c 	bl	c222 <gpio_pin_interrupt_configure_dt>
    6eea:	f385 8811 	msr	BASEPRI, r5
    6eee:	f3bf 8f6f 	isb	sy
	if (unlikely(err)) {
    6ef2:	2800      	cmp	r0, #0
    6ef4:	d0f2      	beq.n	6edc <trigger_handler+0x50>
		LOG_ERR("Cannot re-enable IRQ");
    6ef6:	4b09      	ldr	r3, [pc, #36]	; (6f1c <trigger_handler+0x90>)
    6ef8:	9307      	str	r3, [sp, #28]
    6efa:	4809      	ldr	r0, [pc, #36]	; (6f20 <trigger_handler+0x94>)
    6efc:	2302      	movs	r3, #2
    6efe:	aa06      	add	r2, sp, #24
    6f00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6f04:	9306      	str	r3, [sp, #24]
    6f06:	f005 fa11 	bl	c32c <z_log_msg_static_create.constprop.0>
		k_panic();
    6f0a:	4040      	eors	r0, r0
    6f0c:	f380 8811 	msr	BASEPRI, r0
    6f10:	f04f 0004 	mov.w	r0, #4
    6f14:	df02      	svc	2
    6f16:	e7e1      	b.n	6edc <trigger_handler+0x50>
    6f18:	00390001 	.word	0x00390001
    6f1c:	0000e393 	.word	0x0000e393
    6f20:	0000cfe8 	.word	0x0000cfe8

00006f24 <spi_cs_ctrl.isra.0>:
static int spi_cs_ctrl(const struct device *dev, bool enable)
    6f24:	b530      	push	{r4, r5, lr}
    6f26:	4604      	mov	r4, r0
    6f28:	b087      	sub	sp, #28
	if (!enable) {
    6f2a:	460d      	mov	r5, r1
    6f2c:	b911      	cbnz	r1, 6f34 <spi_cs_ctrl.isra.0+0x10>
		k_busy_wait(T_NCS_SCLK);
    6f2e:	2001      	movs	r0, #1
    6f30:	f005 f9fa 	bl	c328 <k_busy_wait>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    6f34:	7f23      	ldrb	r3, [r4, #28]
	return gpio_pin_set(spec->port, spec->pin, value);
    6f36:	69a0      	ldr	r0, [r4, #24]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    6f38:	2101      	movs	r1, #1
    6f3a:	4099      	lsls	r1, r3
    6f3c:	6903      	ldr	r3, [r0, #16]
    6f3e:	681b      	ldr	r3, [r3, #0]
    6f40:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    6f42:	bf14      	ite	ne
    6f44:	f085 0301 	eorne.w	r3, r5, #1
    6f48:	462b      	moveq	r3, r5
	if (value != 0)	{
    6f4a:	b1ab      	cbz	r3, 6f78 <spi_cs_ctrl.isra.0+0x54>
	return api->port_set_bits_raw(port, pins);
    6f4c:	6883      	ldr	r3, [r0, #8]
    6f4e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    6f50:	4798      	blx	r3
    6f52:	4604      	mov	r4, r0
	if (err) {
    6f54:	b148      	cbz	r0, 6f6a <spi_cs_ctrl.isra.0+0x46>
		LOG_ERR("SPI CS ctrl failed");
    6f56:	4b0a      	ldr	r3, [pc, #40]	; (6f80 <spi_cs_ctrl.isra.0+0x5c>)
    6f58:	9305      	str	r3, [sp, #20]
    6f5a:	480a      	ldr	r0, [pc, #40]	; (6f84 <spi_cs_ctrl.isra.0+0x60>)
    6f5c:	2302      	movs	r3, #2
    6f5e:	aa04      	add	r2, sp, #16
    6f60:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6f64:	9304      	str	r3, [sp, #16]
    6f66:	f005 f9e1 	bl	c32c <z_log_msg_static_create.constprop.0>
	if (enable) {
    6f6a:	b115      	cbz	r5, 6f72 <spi_cs_ctrl.isra.0+0x4e>
		k_busy_wait(T_NCS_SCLK);
    6f6c:	2001      	movs	r0, #1
    6f6e:	f005 f9db 	bl	c328 <k_busy_wait>
}
    6f72:	4620      	mov	r0, r4
    6f74:	b007      	add	sp, #28
    6f76:	bd30      	pop	{r4, r5, pc}
    6f78:	6883      	ldr	r3, [r0, #8]
    6f7a:	691b      	ldr	r3, [r3, #16]
    6f7c:	e7e8      	b.n	6f50 <spi_cs_ctrl.isra.0+0x2c>
    6f7e:	bf00      	nop
    6f80:	0000e3a8 	.word	0x0000e3a8
    6f84:	0000cfe8 	.word	0x0000cfe8

00006f88 <reg_write>:
{
    6f88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct pmw3360_config *config = dev->config;
    6f8c:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct pmw3360_data *data = dev->data;
    6f90:	6907      	ldr	r7, [r0, #16]
{
    6f92:	b08d      	sub	sp, #52	; 0x34
    6f94:	4605      	mov	r5, r0
    6f96:	460e      	mov	r6, r1
	err = spi_cs_ctrl(dev, true);
    6f98:	4648      	mov	r0, r9
    6f9a:	2101      	movs	r1, #1
{
    6f9c:	4690      	mov	r8, r2
	err = spi_cs_ctrl(dev, true);
    6f9e:	f7ff ffc1 	bl	6f24 <spi_cs_ctrl.isra.0>
	if (err) {
    6fa2:	4604      	mov	r4, r0
    6fa4:	b9e8      	cbnz	r0, 6fe2 <reg_write+0x5a>
	const struct spi_buf tx_buf = {
    6fa6:	ab01      	add	r3, sp, #4
	uint8_t buf[] = {
    6fa8:	f066 067f 	orn	r6, r6, #127	; 0x7f
	const struct spi_buf tx_buf = {
    6fac:	9302      	str	r3, [sp, #8]
	const struct spi_buf_set tx = {
    6fae:	ab02      	add	r3, sp, #8
	uint8_t buf[] = {
    6fb0:	f88d 6004 	strb.w	r6, [sp, #4]
	const struct spi_buf_set tx = {
    6fb4:	9304      	str	r3, [sp, #16]
	const struct spi_buf tx_buf = {
    6fb6:	2602      	movs	r6, #2
	const struct spi_buf_set tx = {
    6fb8:	2301      	movs	r3, #1
	err = spi_write_dt(&config->bus, &tx);
    6fba:	a904      	add	r1, sp, #16
    6fbc:	f109 0008 	add.w	r0, r9, #8
	uint8_t buf[] = {
    6fc0:	f88d 8005 	strb.w	r8, [sp, #5]
	const struct spi_buf tx_buf = {
    6fc4:	9603      	str	r6, [sp, #12]
	const struct spi_buf_set tx = {
    6fc6:	9305      	str	r3, [sp, #20]
	err = spi_write_dt(&config->bus, &tx);
    6fc8:	f005 f962 	bl	c290 <spi_write_dt>
	if (err) {
    6fcc:	4604      	mov	r4, r0
    6fce:	b160      	cbz	r0, 6fea <reg_write+0x62>
		LOG_ERR("Reg write failed on SPI write");
    6fd0:	4b0e      	ldr	r3, [pc, #56]	; (700c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>)
    6fd2:	480f      	ldr	r0, [pc, #60]	; (7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    6fd4:	aa0a      	add	r2, sp, #40	; 0x28
    6fd6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6fda:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
    6fde:	f005 f9a5 	bl	c32c <z_log_msg_static_create.constprop.0>
}
    6fe2:	4620      	mov	r0, r4
    6fe4:	b00d      	add	sp, #52	; 0x34
    6fe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	k_busy_wait(T_SCLK_NCS_WR);
    6fea:	2022      	movs	r0, #34	; 0x22
    6fec:	f005 f99c 	bl	c328 <k_busy_wait>
	err = spi_cs_ctrl(dev, false);
    6ff0:	4621      	mov	r1, r4
    6ff2:	6868      	ldr	r0, [r5, #4]
    6ff4:	f7ff ff96 	bl	6f24 <spi_cs_ctrl.isra.0>
	if (err) {
    6ff8:	4604      	mov	r4, r0
    6ffa:	2800      	cmp	r0, #0
    6ffc:	d1f1      	bne.n	6fe2 <reg_write+0x5a>
	k_busy_wait(T_SWX);
    6ffe:	2092      	movs	r0, #146	; 0x92
    7000:	f005 f992 	bl	c328 <k_busy_wait>
	data->last_read_burst = false;
    7004:	f887 4061 	strb.w	r4, [r7, #97]	; 0x61
	return 0;
    7008:	e7eb      	b.n	6fe2 <reg_write+0x5a>
    700a:	bf00      	nop
    700c:	0000e3bb 	.word	0x0000e3bb
    7010:	0000cfe8 	.word	0x0000cfe8

00007014 <update_cpi>:
{
    7014:	b590      	push	{r4, r7, lr}
	if ((cpi > PMW3360_MAX_CPI) || (cpi < PMW3360_MIN_CPI)) {
    7016:	f1a1 0264 	sub.w	r2, r1, #100	; 0x64
    701a:	f642 637c 	movw	r3, #11900	; 0x2e7c
{
    701e:	b087      	sub	sp, #28
	if ((cpi > PMW3360_MAX_CPI) || (cpi < PMW3360_MIN_CPI)) {
    7020:	429a      	cmp	r2, r3
{
    7022:	af00      	add	r7, sp, #0
	if ((cpi > PMW3360_MAX_CPI) || (cpi < PMW3360_MIN_CPI)) {
    7024:	d914      	bls.n	7050 <update_cpi+0x3c>
		LOG_ERR("CPI value %u out of range", cpi);
    7026:	466c      	mov	r4, sp
    7028:	b088      	sub	sp, #32
    702a:	466a      	mov	r2, sp
    702c:	4b14      	ldr	r3, [pc, #80]	; (7080 <update_cpi+0x6c>)
    702e:	4815      	ldr	r0, [pc, #84]	; (7084 <update_cpi+0x70>)
    7030:	e9c2 3105 	strd	r3, r1, [r2, #20]
    7034:	2303      	movs	r3, #3
    7036:	f842 3f10 	str.w	r3, [r2, #16]!
    703a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    703e:	f005 f975 	bl	c32c <z_log_msg_static_create.constprop.0>
    7042:	46a5      	mov	sp, r4
		return -EINVAL;
    7044:	f06f 0415 	mvn.w	r4, #21
}
    7048:	4620      	mov	r0, r4
    704a:	371c      	adds	r7, #28
    704c:	46bd      	mov	sp, r7
    704e:	bd90      	pop	{r4, r7, pc}
	uint8_t value = (cpi / 100) - 1;
    7050:	2364      	movs	r3, #100	; 0x64
    7052:	fbb1 f1f3 	udiv	r1, r1, r3
    7056:	1e4a      	subs	r2, r1, #1
	int err = reg_write(dev, PMW3360_REG_CONFIG1, value);
    7058:	b2d2      	uxtb	r2, r2
    705a:	210f      	movs	r1, #15
    705c:	f7ff ff94 	bl	6f88 <reg_write>
	if (err) {
    7060:	4604      	mov	r4, r0
    7062:	2800      	cmp	r0, #0
    7064:	d0f0      	beq.n	7048 <update_cpi+0x34>
		LOG_ERR("Failed to change CPI");
    7066:	4b08      	ldr	r3, [pc, #32]	; (7088 <update_cpi+0x74>)
    7068:	617b      	str	r3, [r7, #20]
    706a:	4806      	ldr	r0, [pc, #24]	; (7084 <update_cpi+0x70>)
    706c:	2302      	movs	r3, #2
    706e:	f107 0210 	add.w	r2, r7, #16
    7072:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7076:	613b      	str	r3, [r7, #16]
    7078:	f005 f958 	bl	c32c <z_log_msg_static_create.constprop.0>
    707c:	e7e4      	b.n	7048 <update_cpi+0x34>
    707e:	bf00      	nop
    7080:	0000e3d9 	.word	0x0000e3d9
    7084:	0000cfe8 	.word	0x0000cfe8
    7088:	0000e3f3 	.word	0x0000e3f3

0000708c <update_downshift_time>:
{
    708c:	b590      	push	{r4, r7, lr}
	switch (reg_addr) {
    708e:	2917      	cmp	r1, #23
{
    7090:	b087      	sub	sp, #28
    7092:	af00      	add	r7, sp, #0
	switch (reg_addr) {
    7094:	d014      	beq.n	70c0 <update_downshift_time+0x34>
    7096:	291a      	cmp	r1, #26
    7098:	d02c      	beq.n	70f4 <update_downshift_time+0x68>
    709a:	2914      	cmp	r1, #20
    709c:	d02e      	beq.n	70fc <update_downshift_time+0x70>
		LOG_ERR("Not supported");
    709e:	4b23      	ldr	r3, [pc, #140]	; (712c <update_downshift_time+0xa0>)
    70a0:	617b      	str	r3, [r7, #20]
    70a2:	2302      	movs	r3, #2
    70a4:	4822      	ldr	r0, [pc, #136]	; (7130 <update_downshift_time+0xa4>)
    70a6:	613b      	str	r3, [r7, #16]
    70a8:	f107 0210 	add.w	r2, r7, #16
    70ac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
    70b0:	f06f 0485 	mvn.w	r4, #133	; 0x85
		LOG_ERR("Not supported");
    70b4:	f005 f93a 	bl	c32c <z_log_msg_static_create.constprop.0>
}
    70b8:	4620      	mov	r0, r4
    70ba:	371c      	adds	r7, #28
    70bc:	46bd      	mov	sp, r7
    70be:	bd90      	pop	{r4, r7, pc}
		maxtime = 81600;
    70c0:	4c1c      	ldr	r4, [pc, #112]	; (7134 <update_downshift_time+0xa8>)
		mintime = 320;
    70c2:	f44f 73a0 	mov.w	r3, #320	; 0x140
	if ((time > maxtime) || (time < mintime)) {
    70c6:	42a2      	cmp	r2, r4
    70c8:	d801      	bhi.n	70ce <update_downshift_time+0x42>
    70ca:	429a      	cmp	r2, r3
    70cc:	d21a      	bcs.n	7104 <update_downshift_time+0x78>
		LOG_WRN("Downshift time %u out of range", time);
    70ce:	466c      	mov	r4, sp
    70d0:	b088      	sub	sp, #32
    70d2:	466b      	mov	r3, sp
    70d4:	4918      	ldr	r1, [pc, #96]	; (7138 <update_downshift_time+0xac>)
    70d6:	4816      	ldr	r0, [pc, #88]	; (7130 <update_downshift_time+0xa4>)
    70d8:	e9c3 1205 	strd	r1, r2, [r3, #20]
    70dc:	461a      	mov	r2, r3
    70de:	2303      	movs	r3, #3
    70e0:	f842 3f10 	str.w	r3, [r2, #16]!
    70e4:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    70e8:	f005 f920 	bl	c32c <z_log_msg_static_create.constprop.0>
    70ec:	46a5      	mov	sp, r4
		return -EINVAL;
    70ee:	f06f 0415 	mvn.w	r4, #21
    70f2:	e7e1      	b.n	70b8 <update_downshift_time+0x2c>
	switch (reg_addr) {
    70f4:	4c11      	ldr	r4, [pc, #68]	; (713c <update_downshift_time+0xb0>)
    70f6:	f44f 6348 	mov.w	r3, #3200	; 0xc80
    70fa:	e7e4      	b.n	70c6 <update_downshift_time+0x3a>
		mintime = 10;
    70fc:	230a      	movs	r3, #10
		maxtime = 2550;
    70fe:	f640 14f6 	movw	r4, #2550	; 0x9f6
    7102:	e7e0      	b.n	70c6 <update_downshift_time+0x3a>
	uint8_t value = time / mintime;
    7104:	fbb2 f2f3 	udiv	r2, r2, r3
	int err = reg_write(dev, reg_addr, value);
    7108:	b2d2      	uxtb	r2, r2
    710a:	f7ff ff3d 	bl	6f88 <reg_write>
	if (err) {
    710e:	4604      	mov	r4, r0
    7110:	2800      	cmp	r0, #0
    7112:	d0d1      	beq.n	70b8 <update_downshift_time+0x2c>
		LOG_ERR("Failed to change downshift time");
    7114:	4b0a      	ldr	r3, [pc, #40]	; (7140 <update_downshift_time+0xb4>)
    7116:	617b      	str	r3, [r7, #20]
    7118:	2302      	movs	r3, #2
    711a:	4805      	ldr	r0, [pc, #20]	; (7130 <update_downshift_time+0xa4>)
    711c:	613b      	str	r3, [r7, #16]
    711e:	f107 0210 	add.w	r2, r7, #16
    7122:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7126:	f005 f901 	bl	c32c <z_log_msg_static_create.constprop.0>
    712a:	e7c5      	b.n	70b8 <update_downshift_time+0x2c>
    712c:	0000e408 	.word	0x0000e408
    7130:	0000cfe8 	.word	0x0000cfe8
    7134:	00013ec0 	.word	0x00013ec0
    7138:	0000e416 	.word	0x0000e416
    713c:	000c7380 	.word	0x000c7380
    7140:	0000e435 	.word	0x0000e435

00007144 <pmw3360_async_init_configure>:
{
    7144:	b510      	push	{r4, lr}
	err = update_cpi(dev, CONFIG_PMW3360_CPI);
    7146:	f44f 71c8 	mov.w	r1, #400	; 0x190
{
    714a:	4604      	mov	r4, r0
	err = update_cpi(dev, CONFIG_PMW3360_CPI);
    714c:	f7ff ff62 	bl	7014 <update_cpi>
	if (!err) {
    7150:	b9a0      	cbnz	r0, 717c <pmw3360_async_init_configure+0x38>
		err = update_downshift_time(dev,
    7152:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    7156:	2114      	movs	r1, #20
    7158:	4620      	mov	r0, r4
    715a:	f7ff ff97 	bl	708c <update_downshift_time>
	if (!err) {
    715e:	b968      	cbnz	r0, 717c <pmw3360_async_init_configure+0x38>
		err = update_downshift_time(dev,
    7160:	f242 4204 	movw	r2, #9220	; 0x2404
    7164:	2117      	movs	r1, #23
    7166:	4620      	mov	r0, r4
    7168:	f7ff ff90 	bl	708c <update_downshift_time>
	if (!err) {
    716c:	b930      	cbnz	r0, 717c <pmw3360_async_init_configure+0x38>
		err = update_downshift_time(dev,
    716e:	4620      	mov	r0, r4
    7170:	4a03      	ldr	r2, [pc, #12]	; (7180 <pmw3360_async_init_configure+0x3c>)
}
    7172:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = update_downshift_time(dev,
    7176:	211a      	movs	r1, #26
    7178:	f7ff bf88 	b.w	708c <update_downshift_time>
}
    717c:	bd10      	pop	{r4, pc}
    717e:	bf00      	nop
    7180:	000249f0 	.word	0x000249f0

00007184 <update_sample_time>:
{
    7184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((sample_time > maxtime) || (sample_time < mintime)) {
    7188:	f103 38ff 	add.w	r8, r3, #4294967295
{
    718c:	b086      	sub	sp, #24
	if ((sample_time > maxtime) || (sample_time < mintime)) {
    718e:	f5b8 6f1b 	cmp.w	r8, #2480	; 0x9b0
{
    7192:	4605      	mov	r5, r0
    7194:	af00      	add	r7, sp, #0
    7196:	4616      	mov	r6, r2
	if ((sample_time > maxtime) || (sample_time < mintime)) {
    7198:	d315      	bcc.n	71c6 <update_sample_time+0x42>
		LOG_WRN("Sample time %u out of range", sample_time);
    719a:	466c      	mov	r4, sp
    719c:	b088      	sub	sp, #32
    719e:	466a      	mov	r2, sp
    71a0:	4916      	ldr	r1, [pc, #88]	; (71fc <update_sample_time+0x78>)
    71a2:	4817      	ldr	r0, [pc, #92]	; (7200 <update_sample_time+0x7c>)
    71a4:	e9c2 1305 	strd	r1, r3, [r2, #20]
    71a8:	2303      	movs	r3, #3
    71aa:	f842 3f10 	str.w	r3, [r2, #16]!
    71ae:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    71b2:	f005 f8bb 	bl	c32c <z_log_msg_static_create.constprop.0>
    71b6:	46a5      	mov	sp, r4
		return -EINVAL;
    71b8:	f06f 0415 	mvn.w	r4, #21
}
    71bc:	4620      	mov	r0, r4
    71be:	3718      	adds	r7, #24
    71c0:	46bd      	mov	sp, r7
    71c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int err = reg_write(dev, reg_addr_lower, buf[0]);
    71c6:	fa5f f288 	uxtb.w	r2, r8
    71ca:	f7ff fedd 	bl	6f88 <reg_write>
	if (!err) {
    71ce:	4604      	mov	r4, r0
    71d0:	b938      	cbnz	r0, 71e2 <update_sample_time+0x5e>
		err = reg_write(dev, reg_addr_upper, buf[1]);
    71d2:	f3c8 2207 	ubfx	r2, r8, #8, #8
    71d6:	4631      	mov	r1, r6
    71d8:	4628      	mov	r0, r5
    71da:	f7ff fed5 	bl	6f88 <reg_write>
    71de:	4604      	mov	r4, r0
    71e0:	e7ec      	b.n	71bc <update_sample_time+0x38>
		LOG_ERR("Failed to change sample time");
    71e2:	4b08      	ldr	r3, [pc, #32]	; (7204 <update_sample_time+0x80>)
    71e4:	617b      	str	r3, [r7, #20]
    71e6:	4806      	ldr	r0, [pc, #24]	; (7200 <update_sample_time+0x7c>)
    71e8:	2302      	movs	r3, #2
    71ea:	f107 0210 	add.w	r2, r7, #16
    71ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    71f2:	613b      	str	r3, [r7, #16]
    71f4:	f005 f89a 	bl	c32c <z_log_msg_static_create.constprop.0>
    71f8:	e7e0      	b.n	71bc <update_sample_time+0x38>
    71fa:	bf00      	nop
    71fc:	0000e455 	.word	0x0000e455
    7200:	0000cfe8 	.word	0x0000cfe8
    7204:	0000e471 	.word	0x0000e471

00007208 <pmw3360_async_init_fw_load_continue>:
{
    7208:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
    720c:	4605      	mov	r5, r0
    720e:	b08f      	sub	sp, #60	; 0x3c
	LOG_INF("Uploading optical sensor firmware...");
    7210:	4b38      	ldr	r3, [pc, #224]	; (72f4 <pmw3360_async_init_fw_load_continue+0xec>)
    7212:	4839      	ldr	r0, [pc, #228]	; (72f8 <pmw3360_async_init_fw_load_continue+0xf0>)
    7214:	930d      	str	r3, [sp, #52]	; 0x34
    7216:	aa0c      	add	r2, sp, #48	; 0x30
    7218:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    721c:	f04f 0802 	mov.w	r8, #2
    7220:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    7224:	f005 f882 	bl	c32c <z_log_msg_static_create.constprop.0>
	err = reg_write(dev, PMW3360_REG_SROM_ENABLE, 0x18);
    7228:	2218      	movs	r2, #24
    722a:	2113      	movs	r1, #19
    722c:	4628      	mov	r0, r5
    722e:	f7ff feab 	bl	6f88 <reg_write>
	if (err) {
    7232:	4604      	mov	r4, r0
    7234:	b148      	cbz	r0, 724a <pmw3360_async_init_fw_load_continue+0x42>
		LOG_ERR("Cannot start SROM download");
    7236:	4b31      	ldr	r3, [pc, #196]	; (72fc <pmw3360_async_init_fw_load_continue+0xf4>)
    7238:	e9cd 830c 	strd	r8, r3, [sp, #48]	; 0x30
		LOG_ERR("Cannot write firmware to sensor");
    723c:	482e      	ldr	r0, [pc, #184]	; (72f8 <pmw3360_async_init_fw_load_continue+0xf0>)
    723e:	aa0c      	add	r2, sp, #48	; 0x30
    7240:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7244:	f005 f872 	bl	c32c <z_log_msg_static_create.constprop.0>
    7248:	e02c      	b.n	72a4 <pmw3360_async_init_fw_load_continue+0x9c>
	err = burst_write(dev, PMW3360_REG_SROM_LOAD_BURST,
    724a:	4b2d      	ldr	r3, [pc, #180]	; (7300 <pmw3360_async_init_fw_load_continue+0xf8>)
	const struct pmw3360_config *config = dev->config;
    724c:	686e      	ldr	r6, [r5, #4]
	err = burst_write(dev, PMW3360_REG_SROM_LOAD_BURST,
    724e:	681b      	ldr	r3, [r3, #0]
    7250:	9301      	str	r3, [sp, #4]
	uint8_t write_buf = reg | SPI_WRITE_BIT;
    7252:	23e2      	movs	r3, #226	; 0xe2
    7254:	f88d 300f 	strb.w	r3, [sp, #15]
	struct spi_buf tx_buf = {
    7258:	f10d 030f 	add.w	r3, sp, #15
    725c:	2101      	movs	r1, #1
    725e:	9304      	str	r3, [sp, #16]
	err = spi_cs_ctrl(dev, true);
    7260:	4630      	mov	r0, r6
	const struct spi_buf_set tx = {
    7262:	ab04      	add	r3, sp, #16
    7264:	e9cd 3106 	strd	r3, r1, [sp, #24]
	struct pmw3360_data *data = dev->data;
    7268:	692f      	ldr	r7, [r5, #16]
	struct spi_buf tx_buf = {
    726a:	9105      	str	r1, [sp, #20]
	err = spi_cs_ctrl(dev, true);
    726c:	f7ff fe5a 	bl	6f24 <spi_cs_ctrl.isra.0>
	if (err) {
    7270:	4604      	mov	r4, r0
    7272:	bb20      	cbnz	r0, 72be <pmw3360_async_init_fw_load_continue+0xb6>
	err = spi_write_dt(&config->bus, &tx);
    7274:	3608      	adds	r6, #8
    7276:	a906      	add	r1, sp, #24
    7278:	4630      	mov	r0, r6
    727a:	f005 f809 	bl	c290 <spi_write_dt>
	if (err) {
    727e:	4604      	mov	r4, r0
    7280:	b9a0      	cbnz	r0, 72ac <pmw3360_async_init_fw_load_continue+0xa4>
    7282:	f8df a080 	ldr.w	sl, [pc, #128]	; 7304 <pmw3360_async_init_fw_load_continue+0xfc>
	for (size_t i = 0; i < size; i++) {
    7286:	4680      	mov	r8, r0
    7288:	9b01      	ldr	r3, [sp, #4]
    728a:	4543      	cmp	r3, r8
    728c:	d11c      	bne.n	72c8 <pmw3360_async_init_fw_load_continue+0xc0>
	err = spi_cs_ctrl(dev, false);
    728e:	6868      	ldr	r0, [r5, #4]
    7290:	2100      	movs	r1, #0
    7292:	f7ff fe47 	bl	6f24 <spi_cs_ctrl.isra.0>
	if (err) {
    7296:	4604      	mov	r4, r0
    7298:	b988      	cbnz	r0, 72be <pmw3360_async_init_fw_load_continue+0xb6>
	k_busy_wait(T_BEXIT);
    729a:	2001      	movs	r0, #1
    729c:	f005 f844 	bl	c328 <k_busy_wait>
	data->last_read_burst = false;
    72a0:	f887 4061 	strb.w	r4, [r7, #97]	; 0x61
}
    72a4:	4620      	mov	r0, r4
    72a6:	b00f      	add	sp, #60	; 0x3c
    72a8:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
		LOG_ERR("Burst write failed on SPI write");
    72ac:	4b16      	ldr	r3, [pc, #88]	; (7308 <pmw3360_async_init_fw_load_continue+0x100>)
    72ae:	e9cd 830c 	strd	r8, r3, [sp, #48]	; 0x30
			LOG_ERR("Burst write failed on SPI write (data)");
    72b2:	4811      	ldr	r0, [pc, #68]	; (72f8 <pmw3360_async_init_fw_load_continue+0xf0>)
    72b4:	aa0c      	add	r2, sp, #48	; 0x30
    72b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    72ba:	f005 f837 	bl	c32c <z_log_msg_static_create.constprop.0>
		LOG_ERR("Cannot write firmware to sensor");
    72be:	4b13      	ldr	r3, [pc, #76]	; (730c <pmw3360_async_init_fw_load_continue+0x104>)
    72c0:	930d      	str	r3, [sp, #52]	; 0x34
    72c2:	2302      	movs	r3, #2
    72c4:	930c      	str	r3, [sp, #48]	; 0x30
    72c6:	e7b9      	b.n	723c <pmw3360_async_init_fw_load_continue+0x34>
		write_buf = buf[i];
    72c8:	f81a 3b01 	ldrb.w	r3, [sl], #1
    72cc:	f88d 300f 	strb.w	r3, [sp, #15]
		err = spi_write_dt(&config->bus, &tx);
    72d0:	a906      	add	r1, sp, #24
    72d2:	4630      	mov	r0, r6
    72d4:	f004 ffdc 	bl	c290 <spi_write_dt>
		if (err) {
    72d8:	4604      	mov	r4, r0
    72da:	b120      	cbz	r0, 72e6 <pmw3360_async_init_fw_load_continue+0xde>
			LOG_ERR("Burst write failed on SPI write (data)");
    72dc:	4b0c      	ldr	r3, [pc, #48]	; (7310 <pmw3360_async_init_fw_load_continue+0x108>)
    72de:	930d      	str	r3, [sp, #52]	; 0x34
    72e0:	2302      	movs	r3, #2
    72e2:	930c      	str	r3, [sp, #48]	; 0x30
    72e4:	e7e5      	b.n	72b2 <pmw3360_async_init_fw_load_continue+0xaa>
		k_busy_wait(T_BRSEP);
    72e6:	200f      	movs	r0, #15
    72e8:	f005 f81e 	bl	c328 <k_busy_wait>
	for (size_t i = 0; i < size; i++) {
    72ec:	f108 0801 	add.w	r8, r8, #1
    72f0:	e7ca      	b.n	7288 <pmw3360_async_init_fw_load_continue+0x80>
    72f2:	bf00      	nop
    72f4:	0000e48e 	.word	0x0000e48e
    72f8:	0000cfe8 	.word	0x0000cfe8
    72fc:	0000e4b3 	.word	0x0000e4b3
    7300:	0000d2ec 	.word	0x0000d2ec
    7304:	0000e775 	.word	0x0000e775
    7308:	0000e4ce 	.word	0x0000e4ce
    730c:	0000e515 	.word	0x0000e515
    7310:	0000e4ee 	.word	0x0000e4ee

00007314 <reg_read>:
{
    7314:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct pmw3360_config *config = dev->config;
    7318:	6846      	ldr	r6, [r0, #4]
	struct pmw3360_data *data = dev->data;
    731a:	f8d0 9010 	ldr.w	r9, [r0, #16]
{
    731e:	b091      	sub	sp, #68	; 0x44
    7320:	4605      	mov	r5, r0
    7322:	f88d 1007 	strb.w	r1, [sp, #7]
	err = spi_cs_ctrl(dev, true);
    7326:	4630      	mov	r0, r6
    7328:	2101      	movs	r1, #1
{
    732a:	4690      	mov	r8, r2
	err = spi_cs_ctrl(dev, true);
    732c:	f7ff fdfa 	bl	6f24 <spi_cs_ctrl.isra.0>
	if (err) {
    7330:	4604      	mov	r4, r0
    7332:	b9c0      	cbnz	r0, 7366 <reg_read+0x52>
	const struct spi_buf tx_buf = {
    7334:	f10d 0307 	add.w	r3, sp, #7
    7338:	9302      	str	r3, [sp, #8]
    733a:	2701      	movs	r7, #1
	const struct spi_buf_set tx = {
    733c:	ab02      	add	r3, sp, #8
	err = spi_write_dt(&config->bus, &tx);
    733e:	a904      	add	r1, sp, #16
    7340:	f106 0008 	add.w	r0, r6, #8
	const struct spi_buf_set tx = {
    7344:	e9cd 3704 	strd	r3, r7, [sp, #16]
	const struct spi_buf tx_buf = {
    7348:	9703      	str	r7, [sp, #12]
	err = spi_write_dt(&config->bus, &tx);
    734a:	f004 ffa1 	bl	c290 <spi_write_dt>
	if (err) {
    734e:	4604      	mov	r4, r0
    7350:	b168      	cbz	r0, 736e <reg_read+0x5a>
		LOG_ERR("Reg read failed on SPI write");
    7352:	4b17      	ldr	r3, [pc, #92]	; (73b0 <reg_read+0x9c>)
		LOG_ERR("Reg read failed on SPI read");
    7354:	930f      	str	r3, [sp, #60]	; 0x3c
    7356:	4817      	ldr	r0, [pc, #92]	; (73b4 <reg_read+0xa0>)
    7358:	2302      	movs	r3, #2
    735a:	aa0e      	add	r2, sp, #56	; 0x38
    735c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7360:	930e      	str	r3, [sp, #56]	; 0x38
    7362:	f004 ffe3 	bl	c32c <z_log_msg_static_create.constprop.0>
}
    7366:	4620      	mov	r0, r4
    7368:	b011      	add	sp, #68	; 0x44
    736a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	k_busy_wait(T_SRAD);
    736e:	20a0      	movs	r0, #160	; 0xa0
    7370:	f004 ffda 	bl	c328 <k_busy_wait>
	const struct spi_buf_set rx = {
    7374:	ab06      	add	r3, sp, #24
	struct spi_buf rx_buf = {
    7376:	e9cd 8706 	strd	r8, r7, [sp, #24]
	const struct spi_buf_set rx = {
    737a:	e9cd 3708 	strd	r3, r7, [sp, #32]
 * @return a value from spi_read().
 */
static inline int spi_read_dt(const struct spi_dt_spec *spec,
			      const struct spi_buf_set *rx_bufs)
{
	return spi_read(spec->bus, &spec->config, rx_bufs);
    737e:	68b0      	ldr	r0, [r6, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    7380:	6883      	ldr	r3, [r0, #8]
    7382:	4622      	mov	r2, r4
    7384:	681f      	ldr	r7, [r3, #0]
    7386:	f106 010c 	add.w	r1, r6, #12
    738a:	ab08      	add	r3, sp, #32
    738c:	47b8      	blx	r7
	if (err) {
    738e:	4604      	mov	r4, r0
    7390:	b108      	cbz	r0, 7396 <reg_read+0x82>
		LOG_ERR("Reg read failed on SPI read");
    7392:	4b09      	ldr	r3, [pc, #36]	; (73b8 <reg_read+0xa4>)
    7394:	e7de      	b.n	7354 <reg_read+0x40>
	err = spi_cs_ctrl(dev, false);
    7396:	4601      	mov	r1, r0
    7398:	6868      	ldr	r0, [r5, #4]
    739a:	f7ff fdc3 	bl	6f24 <spi_cs_ctrl.isra.0>
	if (err) {
    739e:	4604      	mov	r4, r0
    73a0:	2800      	cmp	r0, #0
    73a2:	d1e0      	bne.n	7366 <reg_read+0x52>
	k_busy_wait(T_SRX);
    73a4:	2013      	movs	r0, #19
    73a6:	f004 ffbf 	bl	c328 <k_busy_wait>
	data->last_read_burst = false;
    73aa:	f889 4061 	strb.w	r4, [r9, #97]	; 0x61
	return 0;
    73ae:	e7da      	b.n	7366 <reg_read+0x52>
    73b0:	0000e535 	.word	0x0000e535
    73b4:	0000cfe8 	.word	0x0000cfe8
    73b8:	0000e552 	.word	0x0000e552

000073bc <pmw3360_async_init_fw_load_verify>:
{
    73bc:	b530      	push	{r4, r5, lr}
    73be:	b089      	sub	sp, #36	; 0x24
	err = reg_read(dev, PMW3360_REG_SROM_ID, &fw_id);
    73c0:	f10d 0206 	add.w	r2, sp, #6
    73c4:	212a      	movs	r1, #42	; 0x2a
{
    73c6:	4605      	mov	r5, r0
	err = reg_read(dev, PMW3360_REG_SROM_ID, &fw_id);
    73c8:	f7ff ffa4 	bl	7314 <reg_read>
	if (err) {
    73cc:	4604      	mov	r4, r0
    73ce:	b150      	cbz	r0, 73e6 <pmw3360_async_init_fw_load_verify+0x2a>
		LOG_ERR("Cannot obtain firmware id");
    73d0:	4b1b      	ldr	r3, [pc, #108]	; (7440 <pmw3360_async_init_fw_load_verify+0x84>)
		LOG_ERR("Cannot enable REST modes");
    73d2:	9307      	str	r3, [sp, #28]
    73d4:	481b      	ldr	r0, [pc, #108]	; (7444 <pmw3360_async_init_fw_load_verify+0x88>)
    73d6:	2302      	movs	r3, #2
    73d8:	aa06      	add	r2, sp, #24
    73da:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    73de:	9306      	str	r3, [sp, #24]
    73e0:	f004 ffa4 	bl	c32c <z_log_msg_static_create.constprop.0>
    73e4:	e00f      	b.n	7406 <pmw3360_async_init_fw_load_verify+0x4a>
	if (fw_id != PMW3360_FIRMWARE_ID) {
    73e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
    73ea:	2b04      	cmp	r3, #4
    73ec:	d00e      	beq.n	740c <pmw3360_async_init_fw_load_verify+0x50>
		LOG_ERR("Chip is not running from SROM!");
    73ee:	4b16      	ldr	r3, [pc, #88]	; (7448 <pmw3360_async_init_fw_load_verify+0x8c>)
		LOG_ERR("Invalid product id!");
    73f0:	9307      	str	r3, [sp, #28]
    73f2:	4814      	ldr	r0, [pc, #80]	; (7444 <pmw3360_async_init_fw_load_verify+0x88>)
    73f4:	2302      	movs	r3, #2
    73f6:	aa06      	add	r2, sp, #24
    73f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
    73fc:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("Invalid product id!");
    7400:	9306      	str	r3, [sp, #24]
    7402:	f004 ff93 	bl	c32c <z_log_msg_static_create.constprop.0>
}
    7406:	4620      	mov	r0, r4
    7408:	b009      	add	sp, #36	; 0x24
    740a:	bd30      	pop	{r4, r5, pc}
	err = reg_read(dev, PMW3360_REG_PRODUCT_ID, &product_id);
    740c:	4601      	mov	r1, r0
    740e:	f10d 0207 	add.w	r2, sp, #7
    7412:	4628      	mov	r0, r5
    7414:	f7ff ff7e 	bl	7314 <reg_read>
	if (err) {
    7418:	4604      	mov	r4, r0
    741a:	b108      	cbz	r0, 7420 <pmw3360_async_init_fw_load_verify+0x64>
		LOG_ERR("Cannot obtain product id");
    741c:	4b0b      	ldr	r3, [pc, #44]	; (744c <pmw3360_async_init_fw_load_verify+0x90>)
    741e:	e7d8      	b.n	73d2 <pmw3360_async_init_fw_load_verify+0x16>
	if (product_id != PMW3360_PRODUCT_ID) {
    7420:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7424:	2b42      	cmp	r3, #66	; 0x42
    7426:	d001      	beq.n	742c <pmw3360_async_init_fw_load_verify+0x70>
		LOG_ERR("Invalid product id!");
    7428:	4b09      	ldr	r3, [pc, #36]	; (7450 <pmw3360_async_init_fw_load_verify+0x94>)
    742a:	e7e1      	b.n	73f0 <pmw3360_async_init_fw_load_verify+0x34>
	err = reg_write(dev, PMW3360_REG_CONFIG2, 0x20);
    742c:	2220      	movs	r2, #32
    742e:	2110      	movs	r1, #16
    7430:	4628      	mov	r0, r5
    7432:	f7ff fda9 	bl	6f88 <reg_write>
	if (err) {
    7436:	4604      	mov	r4, r0
    7438:	2800      	cmp	r0, #0
    743a:	d0e4      	beq.n	7406 <pmw3360_async_init_fw_load_verify+0x4a>
		LOG_ERR("Cannot enable REST modes");
    743c:	4b05      	ldr	r3, [pc, #20]	; (7454 <pmw3360_async_init_fw_load_verify+0x98>)
    743e:	e7c8      	b.n	73d2 <pmw3360_async_init_fw_load_verify+0x16>
    7440:	0000e56e 	.word	0x0000e56e
    7444:	0000cfe8 	.word	0x0000cfe8
    7448:	0000e588 	.word	0x0000e588
    744c:	0000e5a7 	.word	0x0000e5a7
    7450:	0000e5c0 	.word	0x0000e5c0
    7454:	0000e5d4 	.word	0x0000e5d4

00007458 <pmw3360_async_init_fw_load_start>:
{
    7458:	b570      	push	{r4, r5, r6, lr}
    745a:	4606      	mov	r6, r0
    745c:	b086      	sub	sp, #24
	for (uint8_t reg = 0x02; (reg <= 0x06) && !err; reg++) {
    745e:	2502      	movs	r5, #2
		err = reg_read(dev, reg, buf);
    7460:	4629      	mov	r1, r5
    7462:	466a      	mov	r2, sp
    7464:	4630      	mov	r0, r6
    7466:	f7ff ff55 	bl	7314 <reg_read>
	for (uint8_t reg = 0x02; (reg <= 0x06) && !err; reg++) {
    746a:	3501      	adds	r5, #1
    746c:	b2ed      	uxtb	r5, r5
    746e:	2d07      	cmp	r5, #7
		err = reg_read(dev, reg, buf);
    7470:	4604      	mov	r4, r0
	for (uint8_t reg = 0x02; (reg <= 0x06) && !err; reg++) {
    7472:	d00e      	beq.n	7492 <pmw3360_async_init_fw_load_start+0x3a>
    7474:	2800      	cmp	r0, #0
    7476:	d0f3      	beq.n	7460 <pmw3360_async_init_fw_load_start+0x8>
		LOG_ERR("Cannot read from data registers");
    7478:	4b10      	ldr	r3, [pc, #64]	; (74bc <pmw3360_async_init_fw_load_start+0x64>)
		LOG_ERR("Cannot initialize SROM");
    747a:	9305      	str	r3, [sp, #20]
    747c:	4810      	ldr	r0, [pc, #64]	; (74c0 <pmw3360_async_init_fw_load_start+0x68>)
    747e:	2302      	movs	r3, #2
    7480:	aa04      	add	r2, sp, #16
    7482:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7486:	9304      	str	r3, [sp, #16]
    7488:	f004 ff50 	bl	c32c <z_log_msg_static_create.constprop.0>
}
    748c:	4620      	mov	r0, r4
    748e:	b006      	add	sp, #24
    7490:	bd70      	pop	{r4, r5, r6, pc}
	if (err) {
    7492:	2800      	cmp	r0, #0
    7494:	d1f0      	bne.n	7478 <pmw3360_async_init_fw_load_start+0x20>
	err = reg_write(dev, PMW3360_REG_CONFIG2, 0x00);
    7496:	4602      	mov	r2, r0
    7498:	2110      	movs	r1, #16
    749a:	4630      	mov	r0, r6
    749c:	f7ff fd74 	bl	6f88 <reg_write>
	if (err) {
    74a0:	4604      	mov	r4, r0
    74a2:	b108      	cbz	r0, 74a8 <pmw3360_async_init_fw_load_start+0x50>
		LOG_ERR("Cannot disable REST mode");
    74a4:	4b07      	ldr	r3, [pc, #28]	; (74c4 <pmw3360_async_init_fw_load_start+0x6c>)
    74a6:	e7e8      	b.n	747a <pmw3360_async_init_fw_load_start+0x22>
	err = reg_write(dev, PMW3360_REG_SROM_ENABLE, 0x1D);
    74a8:	221d      	movs	r2, #29
    74aa:	2113      	movs	r1, #19
    74ac:	4630      	mov	r0, r6
    74ae:	f7ff fd6b 	bl	6f88 <reg_write>
	if (err) {
    74b2:	4604      	mov	r4, r0
    74b4:	2800      	cmp	r0, #0
    74b6:	d0e9      	beq.n	748c <pmw3360_async_init_fw_load_start+0x34>
		LOG_ERR("Cannot initialize SROM");
    74b8:	4b03      	ldr	r3, [pc, #12]	; (74c8 <pmw3360_async_init_fw_load_start+0x70>)
    74ba:	e7de      	b.n	747a <pmw3360_async_init_fw_load_start+0x22>
    74bc:	0000e5ed 	.word	0x0000e5ed
    74c0:	0000cfe8 	.word	0x0000cfe8
    74c4:	0000e60d 	.word	0x0000e60d
    74c8:	0000e626 	.word	0x0000e626

000074cc <pmw3360_attr_set>:
}

static int pmw3360_attr_set(const struct device *dev, enum sensor_channel chan,
			    enum sensor_attribute attr,
			    const struct sensor_value *val)
{
    74cc:	b570      	push	{r4, r5, r6, lr}
	struct pmw3360_data *data = dev->data;
	int err;

	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    74ce:	2939      	cmp	r1, #57	; 0x39
{
    74d0:	4604      	mov	r4, r0
    74d2:	b088      	sub	sp, #32
	struct pmw3360_data *data = dev->data;
    74d4:	6900      	ldr	r0, [r0, #16]
	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    74d6:	d165      	bne.n	75a4 <pmw3360_attr_set+0xd8>
		return -ENOTSUP;
	}

	if (unlikely(!data->ready)) {
    74d8:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    74dc:	2900      	cmp	r1, #0
    74de:	d064      	beq.n	75aa <pmw3360_attr_set+0xde>
		LOG_DBG("Device is not initialized yet");
		return -EBUSY;
	}

	switch ((uint32_t)attr) {
    74e0:	3a0f      	subs	r2, #15
    74e2:	2a07      	cmp	r2, #7
    74e4:	d854      	bhi.n	7590 <pmw3360_attr_set+0xc4>
    74e6:	e8df f002 	tbb	[pc, r2]
    74ea:	0b04      	.short	0x0b04
    74ec:	423f3c34 	.word	0x423f3c34
    74f0:	4f4b      	.short	0x4f4b
	case PMW3360_ATTR_CPI:
		err = update_cpi(dev, PMW3360_SVALUE_TO_CPI(*val));
    74f2:	6819      	ldr	r1, [r3, #0]
    74f4:	4620      	mov	r0, r4
		LOG_ERR("Unknown attribute");
		return -ENOTSUP;
	}

	return err;
}
    74f6:	b008      	add	sp, #32
    74f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = update_cpi(dev, PMW3360_SVALUE_TO_CPI(*val));
    74fc:	f7ff bd8a 	b.w	7014 <update_cpi>
	int err = reg_read(dev, reg_addr, &value);
    7500:	f10d 0207 	add.w	r2, sp, #7
    7504:	2110      	movs	r1, #16
    7506:	4620      	mov	r0, r4
					PMW3360_SVALUE_TO_BOOL(*val));
    7508:	681e      	ldr	r6, [r3, #0]
	int err = reg_read(dev, reg_addr, &value);
    750a:	f7ff ff03 	bl	7314 <reg_read>
	if (err) {
    750e:	4605      	mov	r5, r0
    7510:	b160      	cbz	r0, 752c <pmw3360_attr_set+0x60>
		LOG_ERR("Failed to read Config2 register");
    7512:	4b27      	ldr	r3, [pc, #156]	; (75b0 <pmw3360_attr_set+0xe4>)
		LOG_ERR("Failed to set rest mode");
    7514:	9307      	str	r3, [sp, #28]
    7516:	4827      	ldr	r0, [pc, #156]	; (75b4 <pmw3360_attr_set+0xe8>)
    7518:	2302      	movs	r3, #2
    751a:	aa06      	add	r2, sp, #24
    751c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7520:	9306      	str	r3, [sp, #24]
    7522:	f004 ff03 	bl	c32c <z_log_msg_static_create.constprop.0>
}
    7526:	4628      	mov	r0, r5
    7528:	b008      	add	sp, #32
    752a:	bd70      	pop	{r4, r5, r6, pc}
	WRITE_BIT(value, PMW3360_REST_EN_POS, enable);
    752c:	f89d 2007 	ldrb.w	r2, [sp, #7]
    7530:	b166      	cbz	r6, 754c <pmw3360_attr_set+0x80>
    7532:	f042 0220 	orr.w	r2, r2, #32
	err = reg_write(dev, reg_addr, value);
    7536:	2110      	movs	r1, #16
    7538:	4620      	mov	r0, r4
	WRITE_BIT(value, PMW3360_REST_EN_POS, enable);
    753a:	f88d 2007 	strb.w	r2, [sp, #7]
	err = reg_write(dev, reg_addr, value);
    753e:	f7ff fd23 	bl	6f88 <reg_write>
	if (err) {
    7542:	4605      	mov	r5, r0
    7544:	2800      	cmp	r0, #0
    7546:	d0ee      	beq.n	7526 <pmw3360_attr_set+0x5a>
		LOG_ERR("Failed to set rest mode");
    7548:	4b1b      	ldr	r3, [pc, #108]	; (75b8 <pmw3360_attr_set+0xec>)
    754a:	e7e3      	b.n	7514 <pmw3360_attr_set+0x48>
	WRITE_BIT(value, PMW3360_REST_EN_POS, enable);
    754c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    7550:	e7f1      	b.n	7536 <pmw3360_attr_set+0x6a>
		err = update_downshift_time(dev,
    7552:	681a      	ldr	r2, [r3, #0]
    7554:	2114      	movs	r1, #20
		err = update_downshift_time(dev,
    7556:	4620      	mov	r0, r4
}
    7558:	b008      	add	sp, #32
    755a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = update_downshift_time(dev,
    755e:	f7ff bd95 	b.w	708c <update_downshift_time>
    7562:	681a      	ldr	r2, [r3, #0]
    7564:	2117      	movs	r1, #23
    7566:	e7f6      	b.n	7556 <pmw3360_attr_set+0x8a>
		err = update_downshift_time(dev,
    7568:	681a      	ldr	r2, [r3, #0]
    756a:	211a      	movs	r1, #26
    756c:	e7f3      	b.n	7556 <pmw3360_attr_set+0x8a>
		err = update_sample_time(dev,
    756e:	681b      	ldr	r3, [r3, #0]
    7570:	2216      	movs	r2, #22
    7572:	2115      	movs	r1, #21
		err = update_sample_time(dev,
    7574:	4620      	mov	r0, r4
}
    7576:	b008      	add	sp, #32
    7578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = update_sample_time(dev,
    757c:	f7ff be02 	b.w	7184 <update_sample_time>
		err = update_sample_time(dev,
    7580:	681b      	ldr	r3, [r3, #0]
    7582:	2219      	movs	r2, #25
    7584:	2118      	movs	r1, #24
    7586:	e7f5      	b.n	7574 <pmw3360_attr_set+0xa8>
		err = update_sample_time(dev,
    7588:	681b      	ldr	r3, [r3, #0]
    758a:	221c      	movs	r2, #28
    758c:	211b      	movs	r1, #27
    758e:	e7f1      	b.n	7574 <pmw3360_attr_set+0xa8>
		LOG_ERR("Unknown attribute");
    7590:	4b0a      	ldr	r3, [pc, #40]	; (75bc <pmw3360_attr_set+0xf0>)
    7592:	9307      	str	r3, [sp, #28]
    7594:	4807      	ldr	r0, [pc, #28]	; (75b4 <pmw3360_attr_set+0xe8>)
    7596:	2302      	movs	r3, #2
    7598:	aa06      	add	r2, sp, #24
    759a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    759e:	9306      	str	r3, [sp, #24]
    75a0:	f004 fec4 	bl	c32c <z_log_msg_static_create.constprop.0>
		return -ENOTSUP;
    75a4:	f06f 0585 	mvn.w	r5, #133	; 0x85
    75a8:	e7bd      	b.n	7526 <pmw3360_attr_set+0x5a>
		return -EBUSY;
    75aa:	f06f 050f 	mvn.w	r5, #15
    75ae:	e7ba      	b.n	7526 <pmw3360_attr_set+0x5a>
    75b0:	0000e63d 	.word	0x0000e63d
    75b4:	0000cfe8 	.word	0x0000cfe8
    75b8:	0000e65d 	.word	0x0000e65d
    75bc:	0000e675 	.word	0x0000e675

000075c0 <pmw3360_sample_fetch>:
{
    75c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    75c4:	2939      	cmp	r1, #57	; 0x39
	struct pmw3360_data *data = dev->data;
    75c6:	6906      	ldr	r6, [r0, #16]
{
    75c8:	b093      	sub	sp, #76	; 0x4c
    75ca:	4605      	mov	r5, r0
	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    75cc:	d15e      	bne.n	768c <pmw3360_sample_fetch+0xcc>
	if (unlikely(!data->ready)) {
    75ce:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
    75d2:	2b00      	cmp	r3, #0
    75d4:	d05d      	beq.n	7692 <pmw3360_sample_fetch+0xd2>
	if (!data->last_read_burst) {
    75d6:	f896 2061 	ldrb.w	r2, [r6, #97]	; 0x61
	const struct pmw3360_config *config = dev->config;
    75da:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!data->last_read_burst) {
    75de:	b922      	cbnz	r2, 75ea <pmw3360_sample_fetch+0x2a>
		err = reg_write(dev, PMW3360_REG_MOTION_BURST, 0x00);
    75e0:	2150      	movs	r1, #80	; 0x50
    75e2:	f7ff fcd1 	bl	6f88 <reg_write>
		if (err) {
    75e6:	4604      	mov	r4, r0
    75e8:	bb00      	cbnz	r0, 762c <pmw3360_sample_fetch+0x6c>
	err = spi_cs_ctrl(dev, true);
    75ea:	6868      	ldr	r0, [r5, #4]
    75ec:	2101      	movs	r1, #1
    75ee:	f7ff fc99 	bl	6f24 <spi_cs_ctrl.isra.0>
	if (err) {
    75f2:	4604      	mov	r4, r0
    75f4:	b9d0      	cbnz	r0, 762c <pmw3360_sample_fetch+0x6c>
	uint8_t reg_buf[] = {
    75f6:	2350      	movs	r3, #80	; 0x50
    75f8:	f88d 3004 	strb.w	r3, [sp, #4]
	const struct spi_buf tx_buf = {
    75fc:	ab01      	add	r3, sp, #4
    75fe:	9304      	str	r3, [sp, #16]
    7600:	2701      	movs	r7, #1
	const struct spi_buf_set tx = {
    7602:	ab04      	add	r3, sp, #16
	err = spi_write_dt(&config->bus, &tx);
    7604:	a906      	add	r1, sp, #24
    7606:	f108 0008 	add.w	r0, r8, #8
	const struct spi_buf_set tx = {
    760a:	e9cd 3706 	strd	r3, r7, [sp, #24]
	const struct spi_buf tx_buf = {
    760e:	9705      	str	r7, [sp, #20]
	err = spi_write_dt(&config->bus, &tx);
    7610:	f004 fe3e 	bl	c290 <spi_write_dt>
	if (err) {
    7614:	4604      	mov	r4, r0
    7616:	b168      	cbz	r0, 7634 <pmw3360_sample_fetch+0x74>
		LOG_ERR("Motion burst failed on SPI write");
    7618:	4b1f      	ldr	r3, [pc, #124]	; (7698 <pmw3360_sample_fetch+0xd8>)
		LOG_ERR("Motion burst failed on SPI read");
    761a:	9311      	str	r3, [sp, #68]	; 0x44
    761c:	481f      	ldr	r0, [pc, #124]	; (769c <pmw3360_sample_fetch+0xdc>)
    761e:	2302      	movs	r3, #2
    7620:	aa10      	add	r2, sp, #64	; 0x40
    7622:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7626:	9310      	str	r3, [sp, #64]	; 0x40
    7628:	f004 fe80 	bl	c32c <z_log_msg_static_create.constprop.0>
}
    762c:	4620      	mov	r0, r4
    762e:	b013      	add	sp, #76	; 0x4c
    7630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	k_busy_wait(T_SRAD_MOTBR);
    7634:	2023      	movs	r0, #35	; 0x23
    7636:	f004 fe77 	bl	c328 <k_busy_wait>
	const struct spi_buf rx_buf = {
    763a:	ab02      	add	r3, sp, #8
    763c:	9308      	str	r3, [sp, #32]
    763e:	2306      	movs	r3, #6
    7640:	9309      	str	r3, [sp, #36]	; 0x24
	const struct spi_buf_set rx = {
    7642:	ab08      	add	r3, sp, #32
    7644:	e9cd 370a 	strd	r3, r7, [sp, #40]	; 0x28
	return spi_read(spec->bus, &spec->config, rx_bufs);
    7648:	f8d8 0008 	ldr.w	r0, [r8, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    764c:	6883      	ldr	r3, [r0, #8]
    764e:	4622      	mov	r2, r4
    7650:	f8d3 9000 	ldr.w	r9, [r3]
    7654:	f108 010c 	add.w	r1, r8, #12
    7658:	ab0a      	add	r3, sp, #40	; 0x28
    765a:	47c8      	blx	r9
	if (err) {
    765c:	4604      	mov	r4, r0
    765e:	b108      	cbz	r0, 7664 <pmw3360_sample_fetch+0xa4>
		LOG_ERR("Motion burst failed on SPI read");
    7660:	4b0f      	ldr	r3, [pc, #60]	; (76a0 <pmw3360_sample_fetch+0xe0>)
    7662:	e7da      	b.n	761a <pmw3360_sample_fetch+0x5a>
	err = spi_cs_ctrl(dev, false);
    7664:	4601      	mov	r1, r0
    7666:	6868      	ldr	r0, [r5, #4]
    7668:	f7ff fc5c 	bl	6f24 <spi_cs_ctrl.isra.0>
	if (err) {
    766c:	4604      	mov	r4, r0
    766e:	2800      	cmp	r0, #0
    7670:	d1dc      	bne.n	762c <pmw3360_sample_fetch+0x6c>
	k_busy_wait(T_BEXIT);
    7672:	4638      	mov	r0, r7
    7674:	f004 fe58 	bl	c328 <k_busy_wait>
			data->x = -x;
    7678:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    767c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
	data->last_read_burst = true;
    7680:	f886 7061 	strb.w	r7, [r6, #97]	; 0x61
			data->x = -x;
    7684:	425b      	negs	r3, r3
    7686:	8233      	strh	r3, [r6, #16]
			data->y = y;
    7688:	8272      	strh	r2, [r6, #18]
    768a:	e7cf      	b.n	762c <pmw3360_sample_fetch+0x6c>
		return -ENOTSUP;
    768c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    7690:	e7cc      	b.n	762c <pmw3360_sample_fetch+0x6c>
		return -EBUSY;
    7692:	f06f 040f 	mvn.w	r4, #15
    7696:	e7c9      	b.n	762c <pmw3360_sample_fetch+0x6c>
    7698:	0000e687 	.word	0x0000e687
    769c:	0000cfe8 	.word	0x0000cfe8
    76a0:	0000e6a8 	.word	0x0000e6a8

000076a4 <pmw3360_init>:
{
    76a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct pmw3360_data *data = dev->data;
    76a6:	6906      	ldr	r6, [r0, #16]
	const struct pmw3360_config *config = dev->config;
    76a8:	6844      	ldr	r4, [r0, #4]
	k_work_init(&data->trigger_handler_work, trigger_handler);
    76aa:	493f      	ldr	r1, [pc, #252]	; (77a8 <pmw3360_init+0x104>)
{
    76ac:	4605      	mov	r5, r0
	data->dev = dev;
    76ae:	4630      	mov	r0, r6
{
    76b0:	b087      	sub	sp, #28
	data->dev = dev;
    76b2:	f840 5b18 	str.w	r5, [r0], #24
	k_work_init(&data->trigger_handler_work, trigger_handler);
    76b6:	f005 f941 	bl	c93c <k_work_init>
	if (!device_is_ready(spec->bus)) {
    76ba:	68a0      	ldr	r0, [r4, #8]
    76bc:	f005 f80f 	bl	c6de <z_device_is_ready>
    76c0:	b970      	cbnz	r0, 76e0 <pmw3360_init+0x3c>
		LOG_ERR("SPI device not ready");
    76c2:	4b3a      	ldr	r3, [pc, #232]	; (77ac <pmw3360_init+0x108>)
		LOG_ERR("SPI CS device not ready");
    76c4:	9305      	str	r3, [sp, #20]
    76c6:	483a      	ldr	r0, [pc, #232]	; (77b0 <pmw3360_init+0x10c>)
    76c8:	2302      	movs	r3, #2
    76ca:	aa04      	add	r2, sp, #16
    76cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
    76d0:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("SPI CS device not ready");
    76d4:	9304      	str	r3, [sp, #16]
    76d6:	f004 fe29 	bl	c32c <z_log_msg_static_create.constprop.0>
}
    76da:	4620      	mov	r0, r4
    76dc:	b007      	add	sp, #28
    76de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spec->config.cs &&
    76e0:	6963      	ldr	r3, [r4, #20]
    76e2:	b123      	cbz	r3, 76ee <pmw3360_init+0x4a>
	    !device_is_ready(spec->config.cs->gpio.port)) {
    76e4:	6818      	ldr	r0, [r3, #0]
    76e6:	f004 fffa 	bl	c6de <z_device_is_ready>
	if (spec->config.cs &&
    76ea:	2800      	cmp	r0, #0
    76ec:	d0e9      	beq.n	76c2 <pmw3360_init+0x1e>
	if (!device_is_ready(config->cs_gpio.port)) {
    76ee:	69a0      	ldr	r0, [r4, #24]
    76f0:	f004 fff5 	bl	c6de <z_device_is_ready>
    76f4:	b908      	cbnz	r0, 76fa <pmw3360_init+0x56>
		LOG_ERR("SPI CS device not ready");
    76f6:	4b2f      	ldr	r3, [pc, #188]	; (77b4 <pmw3360_init+0x110>)
    76f8:	e7e4      	b.n	76c4 <pmw3360_init+0x20>
	err = gpio_pin_configure_dt(&config->cs_gpio, GPIO_OUTPUT_INACTIVE);
    76fa:	f104 0018 	add.w	r0, r4, #24
    76fe:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    7702:	f004 fda6 	bl	c252 <gpio_pin_configure_dt>
	if (err) {
    7706:	4604      	mov	r4, r0
    7708:	b150      	cbz	r0, 7720 <pmw3360_init+0x7c>
		LOG_ERR("Cannot configure SPI CS GPIO");
    770a:	4b2b      	ldr	r3, [pc, #172]	; (77b8 <pmw3360_init+0x114>)
		LOG_ERR("Cannot add IRQ GPIO callback");
    770c:	9305      	str	r3, [sp, #20]
    770e:	4828      	ldr	r0, [pc, #160]	; (77b0 <pmw3360_init+0x10c>)
    7710:	2302      	movs	r3, #2
    7712:	aa04      	add	r2, sp, #16
    7714:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7718:	9304      	str	r3, [sp, #16]
    771a:	f004 fe07 	bl	c32c <z_log_msg_static_create.constprop.0>
	if (err) {
    771e:	e7dc      	b.n	76da <pmw3360_init+0x36>
	struct pmw3360_data *data = dev->data;
    7720:	692f      	ldr	r7, [r5, #16]
	const struct pmw3360_config *config = dev->config;
    7722:	686d      	ldr	r5, [r5, #4]
	if (!device_is_ready(config->irq_gpio.port)) {
    7724:	6828      	ldr	r0, [r5, #0]
    7726:	f004 ffda 	bl	c6de <z_device_is_ready>
    772a:	b908      	cbnz	r0, 7730 <pmw3360_init+0x8c>
		LOG_ERR("IRQ GPIO device not ready");
    772c:	4b23      	ldr	r3, [pc, #140]	; (77bc <pmw3360_init+0x118>)
    772e:	e7c9      	b.n	76c4 <pmw3360_init+0x20>
	err = gpio_pin_configure_dt(&config->irq_gpio, GPIO_INPUT);
    7730:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    7734:	4628      	mov	r0, r5
    7736:	f004 fd8c 	bl	c252 <gpio_pin_configure_dt>
	if (err) {
    773a:	4604      	mov	r4, r0
    773c:	b108      	cbz	r0, 7742 <pmw3360_init+0x9e>
		LOG_ERR("Cannot configure IRQ GPIO");
    773e:	4b20      	ldr	r3, [pc, #128]	; (77c0 <pmw3360_init+0x11c>)
    7740:	e7e4      	b.n	770c <pmw3360_init+0x68>
			   BIT(config->irq_gpio.pin));
    7742:	792b      	ldrb	r3, [r5, #4]
	callback->handler = handler;
    7744:	481f      	ldr	r0, [pc, #124]	; (77c4 <pmw3360_init+0x120>)
    7746:	2201      	movs	r2, #1
    7748:	fa02 f303 	lsl.w	r3, r2, r3
	callback->pin_mask = pin_mask;
    774c:	e9c7 0302 	strd	r0, r3, [r7, #8]
	err = gpio_add_callback(config->irq_gpio.port, &data->irq_gpio_cb);
    7750:	6828      	ldr	r0, [r5, #0]
	if (api->manage_callback == NULL) {
    7752:	6883      	ldr	r3, [r0, #8]
    7754:	69db      	ldr	r3, [r3, #28]
	gpio_init_callback(&data->irq_gpio_cb, irq_handler,
    7756:	1d39      	adds	r1, r7, #4
    7758:	b30b      	cbz	r3, 779e <pmw3360_init+0xfa>
	return api->manage_callback(port, callback, true);
    775a:	4798      	blx	r3
	if (err) {
    775c:	4604      	mov	r4, r0
    775e:	bb00      	cbnz	r0, 77a2 <pmw3360_init+0xfe>
	k_work_init_delayable(&data->init_work, pmw3360_async_init);
    7760:	f106 0728 	add.w	r7, r6, #40	; 0x28
    7764:	4638      	mov	r0, r7
    7766:	4918      	ldr	r1, [pc, #96]	; (77c8 <pmw3360_init+0x124>)
    7768:	f005 f916 	bl	c998 <k_work_init_delayable>
			K_MSEC(async_init_delay[data->async_init_step]));
    776c:	f896 2058 	ldrb.w	r2, [r6, #88]	; 0x58
    7770:	4b16      	ldr	r3, [pc, #88]	; (77cc <pmw3360_init+0x128>)
    7772:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    7776:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    777a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    777e:	4621      	mov	r1, r4
    7780:	f240 30e7 	movw	r0, #999	; 0x3e7
    7784:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7788:	2300      	movs	r3, #0
    778a:	fbc5 0106 	smlal	r0, r1, r5, r6
    778e:	f7f8 fca7 	bl	e0 <__aeabi_uldivmod>
    7792:	4602      	mov	r2, r0
    7794:	460b      	mov	r3, r1
	k_work_schedule(&data->init_work,
    7796:	4638      	mov	r0, r7
    7798:	f002 fd4c 	bl	a234 <k_work_schedule>
	return err;
    779c:	e79d      	b.n	76da <pmw3360_init+0x36>
		return -ENOTSUP;
    779e:	f06f 0485 	mvn.w	r4, #133	; 0x85
		LOG_ERR("Cannot add IRQ GPIO callback");
    77a2:	4b0b      	ldr	r3, [pc, #44]	; (77d0 <pmw3360_init+0x12c>)
    77a4:	e7b2      	b.n	770c <pmw3360_init+0x68>
    77a6:	bf00      	nop
    77a8:	00006e8d 	.word	0x00006e8d
    77ac:	0000e6c8 	.word	0x0000e6c8
    77b0:	0000cfe8 	.word	0x0000cfe8
    77b4:	0000e6dd 	.word	0x0000e6dd
    77b8:	0000e6f5 	.word	0x0000e6f5
    77bc:	0000e712 	.word	0x0000e712
    77c0:	0000e72c 	.word	0x0000e72c
    77c4:	00006da1 	.word	0x00006da1
    77c8:	00006ded 	.word	0x00006ded
    77cc:	0000d2d8 	.word	0x0000d2d8
    77d0:	0000e746 	.word	0x0000e746

000077d4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    77d4:	4a02      	ldr	r2, [pc, #8]	; (77e0 <nvmc_wait+0xc>)
    77d6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    77da:	2b00      	cmp	r3, #0
    77dc:	d0fb      	beq.n	77d6 <nvmc_wait+0x2>
}
    77de:	4770      	bx	lr
    77e0:	4001e000 	.word	0x4001e000

000077e4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    77e4:	b510      	push	{r4, lr}
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    77e6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)
            if (var1 == 0x10)
    77ea:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    77ee:	2a10      	cmp	r2, #16
    77f0:	d155      	bne.n	789e <SystemInit+0xba>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    77f2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    77f6:	2200      	movs	r2, #0
    77f8:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    77fc:	f8c1 2110 	str.w	r2, [r1, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    7800:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    7804:	4a48      	ldr	r2, [pc, #288]	; (7928 <SystemInit+0x144>)
    7806:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
    780a:	f8c2 0520 	str.w	r0, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    780e:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
    7812:	f8c2 0524 	str.w	r0, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    7816:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    781a:	f8c2 0528 	str.w	r0, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    781e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
    7822:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    7826:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
    782a:	f8c2 0530 	str.w	r0, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    782e:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
    7832:	f8c2 0534 	str.w	r0, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    7836:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
    783a:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    783e:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
    7842:	f8c2 0544 	str.w	r0, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    7846:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
    784a:	f8c2 0548 	str.w	r0, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    784e:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
    7852:	f8c2 054c 	str.w	r0, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    7856:	f8d3 042c 	ldr.w	r0, [r3, #1068]	; 0x42c
    785a:	f8c2 0550 	str.w	r0, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    785e:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
    7862:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    7866:	f8d3 0434 	ldr.w	r0, [r3, #1076]	; 0x434
    786a:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    786e:	f8d3 0438 	ldr.w	r0, [r3, #1080]	; 0x438
    7872:	f8c2 0564 	str.w	r0, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    7876:	f8d3 043c 	ldr.w	r0, [r3, #1084]	; 0x43c
    787a:	f8c2 0568 	str.w	r0, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    787e:	f8d3 0440 	ldr.w	r0, [r3, #1088]	; 0x440
    7882:	f8c2 056c 	str.w	r0, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    7886:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    788a:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    788e:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    7892:	07db      	lsls	r3, r3, #31
    7894:	d509      	bpl.n	78aa <SystemInit+0xc6>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    7896:	f06f 0301 	mvn.w	r3, #1
    789a:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    789e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)
            if (var1 == 0x10)
    78a2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    78a6:	2b10      	cmp	r3, #16
    78a8:	d110      	bne.n	78cc <SystemInit+0xe8>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    78aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    78ae:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    78b2:	2b03      	cmp	r3, #3
    78b4:	d802      	bhi.n	78bc <SystemInit+0xd8>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    78b6:	4a1d      	ldr	r2, [pc, #116]	; (792c <SystemInit+0x148>)
    78b8:	5cd3      	ldrb	r3, [r2, r3]
    78ba:	b13b      	cbz	r3, 78cc <SystemInit+0xe8>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    78bc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    78c0:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    78c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    78c8:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    78cc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    78d0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    78d4:	2a00      	cmp	r2, #0
    78d6:	db03      	blt.n	78e0 <SystemInit+0xfc>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    78d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    78dc:	2b00      	cmp	r3, #0
    78de:	da22      	bge.n	7926 <SystemInit+0x142>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    78e0:	4913      	ldr	r1, [pc, #76]	; (7930 <SystemInit+0x14c>)
    78e2:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    78e4:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    78e8:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    78ec:	2412      	movs	r4, #18
    nvmc_wait();
    78ee:	f7ff ff71 	bl	77d4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    78f2:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    78f6:	f7ff ff6d 	bl	77d4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    78fa:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    78fe:	f7ff ff69 	bl	77d4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    7902:	2300      	movs	r3, #0
    7904:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    7908:	f7ff ff64 	bl	77d4 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    790c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    7910:	4908      	ldr	r1, [pc, #32]	; (7934 <SystemInit+0x150>)
    7912:	4b09      	ldr	r3, [pc, #36]	; (7938 <SystemInit+0x154>)
    7914:	68ca      	ldr	r2, [r1, #12]
    7916:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    791a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    791c:	60cb      	str	r3, [r1, #12]
    791e:	f3bf 8f4f 	dsb	sy
    __NOP();
    7922:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    7924:	e7fd      	b.n	7922 <SystemInit+0x13e>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    7926:	bd10      	pop	{r4, pc}
    7928:	4000c000 	.word	0x4000c000
    792c:	0000f773 	.word	0x0000f773
    7930:	4001e000 	.word	0x4001e000
    7934:	e000ed00 	.word	0xe000ed00
    7938:	05fa0004 	.word	0x05fa0004

0000793c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    793c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    793e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    7940:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    7942:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    7946:	fab2 f382 	clz	r3, r2
    794a:	f1c3 031f 	rsb	r3, r3, #31
    794e:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    7950:	fa05 f403 	lsl.w	r4, r5, r3
    7954:	ea22 0404 	bic.w	r4, r2, r4
    7958:	e850 6f00 	ldrex	r6, [r0]
    795c:	4296      	cmp	r6, r2
    795e:	d104      	bne.n	796a <nrfx_flag32_alloc+0x2e>
    7960:	e840 4c00 	strex	ip, r4, [r0]
    7964:	f1bc 0f00 	cmp.w	ip, #0
    7968:	d1f6      	bne.n	7958 <nrfx_flag32_alloc+0x1c>
    796a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    796e:	d1e7      	bne.n	7940 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    7970:	4801      	ldr	r0, [pc, #4]	; (7978 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    7972:	700b      	strb	r3, [r1, #0]
}
    7974:	bd70      	pop	{r4, r5, r6, pc}
    7976:	bf00      	nop
    7978:	0bad0000 	.word	0x0bad0000

0000797c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    797c:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    797e:	6803      	ldr	r3, [r0, #0]
    7980:	40cb      	lsrs	r3, r1
    7982:	07db      	lsls	r3, r3, #31
    7984:	d414      	bmi.n	79b0 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    7986:	2301      	movs	r3, #1
    7988:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    798a:	6802      	ldr	r2, [r0, #0]
    798c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    7990:	ea43 0102 	orr.w	r1, r3, r2
    7994:	e850 4f00 	ldrex	r4, [r0]
    7998:	4294      	cmp	r4, r2
    799a:	d104      	bne.n	79a6 <nrfx_flag32_free+0x2a>
    799c:	e840 1c00 	strex	ip, r1, [r0]
    79a0:	f1bc 0f00 	cmp.w	ip, #0
    79a4:	d1f6      	bne.n	7994 <nrfx_flag32_free+0x18>
    79a6:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    79aa:	d1ee      	bne.n	798a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    79ac:	4801      	ldr	r0, [pc, #4]	; (79b4 <nrfx_flag32_free+0x38>)
}
    79ae:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    79b0:	4801      	ldr	r0, [pc, #4]	; (79b8 <nrfx_flag32_free+0x3c>)
    79b2:	e7fc      	b.n	79ae <nrfx_flag32_free+0x32>
    79b4:	0bad0000 	.word	0x0bad0000
    79b8:	0bad0004 	.word	0x0bad0004

000079bc <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    79bc:	4b05      	ldr	r3, [pc, #20]	; (79d4 <nrfx_clock_init+0x18>)
    79be:	791a      	ldrb	r2, [r3, #4]
    79c0:	b92a      	cbnz	r2, 79ce <nrfx_clock_init+0x12>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    }
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    79c2:	715a      	strb	r2, [r3, #5]
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    79c4:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    79c6:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    79c8:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    79ca:	4803      	ldr	r0, [pc, #12]	; (79d8 <nrfx_clock_init+0x1c>)
    79cc:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    79ce:	4803      	ldr	r0, [pc, #12]	; (79dc <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    79d0:	4770      	bx	lr
    79d2:	bf00      	nop
    79d4:	200017dc 	.word	0x200017dc
    79d8:	0bad0000 	.word	0x0bad0000
    79dc:	0bad000c 	.word	0x0bad000c

000079e0 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    79e0:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    79e2:	2000      	movs	r0, #0
    79e4:	f7fc f900 	bl	3be8 <arch_irq_is_enabled>
    79e8:	b908      	cbnz	r0, 79ee <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    79ea:	f7fc f8db 	bl	3ba4 <arch_irq_enable>
#pragma GCC diagnostic pop
#endif

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    79ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    79f2:	2200      	movs	r2, #0
    79f4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    79f8:	4b01      	ldr	r3, [pc, #4]	; (7a00 <nrfx_clock_enable+0x20>)
    79fa:	2201      	movs	r2, #1
    79fc:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    79fe:	bd08      	pop	{r3, pc}
    7a00:	20001b86 	.word	0x20001b86

00007a04 <nrfx_clock_calibration_start>:
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    7a04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7a08:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    7a0c:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    7a10:	03c8      	lsls	r0, r1, #15
    7a12:	d516      	bpl.n	7a42 <nrfx_clock_calibration_start+0x3e>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &clk_src))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)
    7a14:	07d1      	lsls	r1, r2, #31
    7a16:	d514      	bpl.n	7a42 <nrfx_clock_calibration_start+0x3e>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    7a18:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    7a1c:	03d2      	lsls	r2, r2, #15
    7a1e:	d510      	bpl.n	7a42 <nrfx_clock_calibration_start+0x3e>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_LFCLK, NULL))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (m_clock_cb.cal_state == CAL_STATE_IDLE)
    7a20:	490a      	ldr	r1, [pc, #40]	; (7a4c <nrfx_clock_calibration_start+0x48>)
    7a22:	794a      	ldrb	r2, [r1, #5]
    7a24:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    7a28:	b96a      	cbnz	r2, 7a46 <nrfx_clock_calibration_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7a2a:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    7a2e:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    nrfx_err_t err_code = NRFX_SUCCESS;
    7a32:	4807      	ldr	r0, [pc, #28]	; (7a50 <nrfx_clock_calibration_start+0x4c>)
    p_reg->INTENSET = mask;
    7a34:	2208      	movs	r2, #8
    7a36:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_CAL;
    7a3a:	2201      	movs	r2, #1
    7a3c:	714a      	strb	r2, [r1, #5]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7a3e:	611a      	str	r2, [r3, #16]
}
    7a40:	4770      	bx	lr
        return NRFX_ERROR_INVALID_STATE;
    7a42:	4804      	ldr	r0, [pc, #16]	; (7a54 <nrfx_clock_calibration_start+0x50>)
    7a44:	4770      	bx	lr
#endif
        nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_CAL);
    }
    else
    {
        err_code = NRFX_ERROR_BUSY;
    7a46:	4804      	ldr	r0, [pc, #16]	; (7a58 <nrfx_clock_calibration_start+0x54>)

    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    7a48:	4770      	bx	lr
    7a4a:	bf00      	nop
    7a4c:	200017dc 	.word	0x200017dc
    7a50:	0bad0000 	.word	0x0bad0000
    7a54:	0bad0005 	.word	0x0bad0005
    7a58:	0bad000b 	.word	0x0bad000b

00007a5c <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    7a5c:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7a5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7a62:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    7a66:	b152      	cbz	r2, 7a7e <nrfx_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7a68:	2000      	movs	r0, #0
    7a6a:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    7a6e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    7a72:	2201      	movs	r2, #1
    7a74:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    7a78:	4b16      	ldr	r3, [pc, #88]	; (7ad4 <nrfx_clock_irq_handler+0x78>)
    7a7a:	681b      	ldr	r3, [r3, #0]
    7a7c:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7a7e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7a82:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    7a86:	b15a      	cbz	r2, 7aa0 <nrfx_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7a88:	2200      	movs	r2, #0
    7a8a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    7a8e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENCLR = mask;
    7a92:	2202      	movs	r2, #2
    7a94:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    7a98:	4b0e      	ldr	r3, [pc, #56]	; (7ad4 <nrfx_clock_irq_handler+0x78>)
    7a9a:	2001      	movs	r0, #1
    7a9c:	681b      	ldr	r3, [r3, #0]
    7a9e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    7aa0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7aa4:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CTTO);
    }
#endif // NRF_CLOCK_HAS_CALIBRATION_TIMER && NRFX_CHECK(NRFX_CLOCK_CONFIG_CT_ENABLED)

    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_DONE) &&
    7aa8:	b192      	cbz	r2, 7ad0 <nrfx_clock_irq_handler+0x74>
    return p_reg->INTENSET & mask;
    7aaa:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    7aae:	0712      	lsls	r2, r2, #28
    7ab0:	d50e      	bpl.n	7ad0 <nrfx_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7ab2:	2200      	movs	r2, #0
    7ab4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    7ab8:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    p_reg->INTENCLR = mask;
    7abc:	2108      	movs	r1, #8
    7abe:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
        *(volatile uint32_t *)0x40000C34 = 0x00000000;
#endif
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_DONE");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    7ac2:	4b04      	ldr	r3, [pc, #16]	; (7ad4 <nrfx_clock_irq_handler+0x78>)
    7ac4:	715a      	strb	r2, [r3, #5]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    7ac6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    7aca:	681b      	ldr	r3, [r3, #0]
    7acc:	2003      	movs	r0, #3
    7ace:	4718      	bx	r3
}
    7ad0:	bd10      	pop	{r4, pc}
    7ad2:	bf00      	nop
    7ad4:	200017dc 	.word	0x200017dc

00007ad8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    7ad8:	4b03      	ldr	r3, [pc, #12]	; (7ae8 <pin_in_use_by_te+0x10>)
    7ada:	3008      	adds	r0, #8
    7adc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    7ae0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    7ae4:	4770      	bx	lr
    7ae6:	bf00      	nop
    7ae8:	2000009c 	.word	0x2000009c

00007aec <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    7aec:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7aee:	f100 0308 	add.w	r3, r0, #8
    7af2:	4c0c      	ldr	r4, [pc, #48]	; (7b24 <call_handler+0x38>)
    7af4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    7af8:	05da      	lsls	r2, r3, #23
{
    7afa:	4605      	mov	r5, r0
    7afc:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7afe:	d507      	bpl.n	7b10 <call_handler+0x24>
    7b00:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    7b04:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    7b08:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    7b0c:	6852      	ldr	r2, [r2, #4]
    7b0e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    7b10:	68a3      	ldr	r3, [r4, #8]
    7b12:	b12b      	cbz	r3, 7b20 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    7b14:	68e2      	ldr	r2, [r4, #12]
    7b16:	4631      	mov	r1, r6
    7b18:	4628      	mov	r0, r5
    }
}
    7b1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    7b1e:	4718      	bx	r3
}
    7b20:	bd70      	pop	{r4, r5, r6, pc}
    7b22:	bf00      	nop
    7b24:	2000009c 	.word	0x2000009c

00007b28 <release_handler>:
{
    7b28:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    7b2a:	4a12      	ldr	r2, [pc, #72]	; (7b74 <release_handler+0x4c>)
    7b2c:	3008      	adds	r0, #8
    7b2e:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    7b32:	05d9      	lsls	r1, r3, #23
    7b34:	d51b      	bpl.n	7b6e <release_handler+0x46>
    7b36:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    7b3a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    7b3e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    7b42:	f102 040e 	add.w	r4, r2, #14
    7b46:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    7b48:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    7b4c:	f413 7f80 	tst.w	r3, #256	; 0x100
    7b50:	d003      	beq.n	7b5a <release_handler+0x32>
    7b52:	f3c3 2343 	ubfx	r3, r3, #9, #4
    7b56:	4299      	cmp	r1, r3
    7b58:	d009      	beq.n	7b6e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    7b5a:	3001      	adds	r0, #1
    7b5c:	2820      	cmp	r0, #32
    7b5e:	d1f3      	bne.n	7b48 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    7b60:	2300      	movs	r3, #0
    7b62:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    7b66:	4804      	ldr	r0, [pc, #16]	; (7b78 <release_handler+0x50>)
}
    7b68:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    7b6a:	f7ff bf07 	b.w	797c <nrfx_flag32_free>
}
    7b6e:	bc10      	pop	{r4}
    7b70:	4770      	bx	lr
    7b72:	bf00      	nop
    7b74:	2000009c 	.word	0x2000009c
    7b78:	200000f0 	.word	0x200000f0

00007b7c <pin_handler_trigger_uninit>:
{
    7b7c:	b538      	push	{r3, r4, r5, lr}
    7b7e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    7b80:	f7ff ffaa 	bl	7ad8 <pin_in_use_by_te>
    7b84:	4c09      	ldr	r4, [pc, #36]	; (7bac <pin_handler_trigger_uninit+0x30>)
    7b86:	f102 0508 	add.w	r5, r2, #8
    7b8a:	b140      	cbz	r0, 7b9e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7b8c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    7b90:	4907      	ldr	r1, [pc, #28]	; (7bb0 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    7b92:	0b5b      	lsrs	r3, r3, #13
    7b94:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    7b98:	2000      	movs	r0, #0
    7b9a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    7b9e:	4610      	mov	r0, r2
    7ba0:	f7ff ffc2 	bl	7b28 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    7ba4:	2300      	movs	r3, #0
    7ba6:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    7baa:	bd38      	pop	{r3, r4, r5, pc}
    7bac:	2000009c 	.word	0x2000009c
    7bb0:	40006000 	.word	0x40006000

00007bb4 <nrfx_gpiote_input_configure>:
{
    7bb4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    7bb8:	4604      	mov	r4, r0
    7bba:	461d      	mov	r5, r3
    if (p_input_config)
    7bbc:	b309      	cbz	r1, 7c02 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7bbe:	4f4f      	ldr	r7, [pc, #316]	; (7cfc <__kernel_ram_size+0xf4>)
    7bc0:	f100 0808 	add.w	r8, r0, #8
    7bc4:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    7bc8:	07b3      	lsls	r3, r6, #30
    7bca:	d506      	bpl.n	7bda <nrfx_gpiote_input_configure+0x26>
    7bcc:	f7ff ff84 	bl	7ad8 <pin_in_use_by_te>
    7bd0:	b118      	cbz	r0, 7bda <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    7bd2:	484b      	ldr	r0, [pc, #300]	; (7d00 <__kernel_ram_size+0xf8>)
}
    7bd4:	b002      	add	sp, #8
    7bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    7bda:	f004 031f 	and.w	r3, r4, #31
    7bde:	009b      	lsls	r3, r3, #2
    7be0:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7be4:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7be6:	f8d3 0700 	ldr.w	r0, [r3, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    7bea:	f026 0602 	bic.w	r6, r6, #2
    cnf &= ~to_update;
    7bee:	f020 000f 	bic.w	r0, r0, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    7bf2:	f046 0601 	orr.w	r6, r6, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7bf6:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
    7bfa:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    7bfe:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
    if (p_trigger_config)
    7c02:	b19a      	cbz	r2, 7c2c <__kernel_ram_size+0x24>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7c04:	4b3d      	ldr	r3, [pc, #244]	; (7cfc <__kernel_ram_size+0xf4>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    7c06:	7817      	ldrb	r7, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    7c08:	6850      	ldr	r0, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7c0a:	f104 0608 	add.w	r6, r4, #8
    7c0e:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    7c12:	f011 0f02 	tst.w	r1, #2
    7c16:	d00d      	beq.n	7c34 <__kernel_ram_size+0x2c>
            if (use_evt)
    7c18:	2800      	cmp	r0, #0
    7c1a:	d1da      	bne.n	7bd2 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    7c1c:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    7c20:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    7c24:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
    7c28:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
    7c2c:	2d00      	cmp	r5, #0
    7c2e:	d13b      	bne.n	7ca8 <__kernel_ram_size+0xa0>
        err = NRFX_SUCCESS;
    7c30:	4834      	ldr	r0, [pc, #208]	; (7d04 <__kernel_ram_size+0xfc>)
    7c32:	e7cf      	b.n	7bd4 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    7c34:	f021 0120 	bic.w	r1, r1, #32
    7c38:	04c9      	lsls	r1, r1, #19
    7c3a:	0cc9      	lsrs	r1, r1, #19
    7c3c:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    7c40:	2800      	cmp	r0, #0
    7c42:	d0eb      	beq.n	7c1c <__kernel_ram_size+0x14>
                if (!edge)
    7c44:	2f03      	cmp	r7, #3
    7c46:	d8c4      	bhi.n	7bd2 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    7c48:	6852      	ldr	r2, [r2, #4]
    7c4a:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    7c4e:	b92f      	cbnz	r7, 7c5c <__kernel_ram_size+0x54>
    7c50:	4a2d      	ldr	r2, [pc, #180]	; (7d08 <__kernel_ram_size+0x100>)
    7c52:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
    7c56:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
#endif
}
    7c5a:	e7df      	b.n	7c1c <__kernel_ram_size+0x14>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    7c5c:	ea4f 028c 	mov.w	r2, ip, lsl #2
    7c60:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    7c64:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    7c68:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    7c6c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    7c70:	f020 0003 	bic.w	r0, r0, #3
    7c74:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    7c78:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    7c7c:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    7c80:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    7c84:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7c88:	0220      	lsls	r0, r4, #8
    7c8a:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    7c8e:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    7c92:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    7c96:	ea40 000e 	orr.w	r0, r0, lr
    7c9a:	f041 0120 	orr.w	r1, r1, #32
    7c9e:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    7ca2:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    7ca6:	e7b9      	b.n	7c1c <__kernel_ram_size+0x14>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    7ca8:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    7cac:	4620      	mov	r0, r4
    7cae:	f7ff ff3b 	bl	7b28 <release_handler>
    if (!handler)
    7cb2:	2e00      	cmp	r6, #0
    7cb4:	d0bc      	beq.n	7c30 <__kernel_ram_size+0x28>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    7cb6:	4d11      	ldr	r5, [pc, #68]	; (7cfc <__kernel_ram_size+0xf4>)
    7cb8:	e9d5 2300 	ldrd	r2, r3, [r5]
    7cbc:	4296      	cmp	r6, r2
    7cbe:	d101      	bne.n	7cc4 <__kernel_ram_size+0xbc>
    7cc0:	429f      	cmp	r7, r3
    7cc2:	d019      	beq.n	7cf8 <__kernel_ram_size+0xf0>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    7cc4:	4811      	ldr	r0, [pc, #68]	; (7d0c <__kernel_ram_size+0x104>)
    7cc6:	f10d 0107 	add.w	r1, sp, #7
    7cca:	f7ff fe37 	bl	793c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    7cce:	4b0d      	ldr	r3, [pc, #52]	; (7d04 <__kernel_ram_size+0xfc>)
    7cd0:	4298      	cmp	r0, r3
    7cd2:	f47f af7f 	bne.w	7bd4 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    7cd6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    7cda:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    7cde:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    7ce2:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    7ce4:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    7ce6:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    7cea:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    7cee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    7cf2:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    7cf6:	e79b      	b.n	7c30 <__kernel_ram_size+0x28>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    7cf8:	2200      	movs	r2, #0
    7cfa:	e7ee      	b.n	7cda <__kernel_ram_size+0xd2>
    7cfc:	2000009c 	.word	0x2000009c
    7d00:	0bad0004 	.word	0x0bad0004
    7d04:	0bad0000 	.word	0x0bad0000
    7d08:	40006000 	.word	0x40006000
    7d0c:	200000f0 	.word	0x200000f0

00007d10 <nrfx_gpiote_output_configure>:
{
    7d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7d12:	4604      	mov	r4, r0
    if (p_config)
    7d14:	b389      	cbz	r1, 7d7a <nrfx_gpiote_output_configure+0x6a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7d16:	4e3a      	ldr	r6, [pc, #232]	; (7e00 <nrfx_gpiote_output_configure+0xf0>)
    7d18:	f100 0708 	add.w	r7, r0, #8
    7d1c:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    7d20:	07ab      	lsls	r3, r5, #30
    7d22:	d404      	bmi.n	7d2e <nrfx_gpiote_output_configure+0x1e>
    7d24:	f7ff fed8 	bl	7ad8 <pin_in_use_by_te>
    7d28:	b108      	cbz	r0, 7d2e <nrfx_gpiote_output_configure+0x1e>
{
    7d2a:	4836      	ldr	r0, [pc, #216]	; (7e04 <nrfx_gpiote_output_configure+0xf4>)
}
    7d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    7d2e:	f015 0f1c 	tst.w	r5, #28
    7d32:	784b      	ldrb	r3, [r1, #1]
    7d34:	d124      	bne.n	7d80 <nrfx_gpiote_output_configure+0x70>
    *p_pin = pin_number & 0x1F;
    7d36:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7d3a:	f500 7ee0 	add.w	lr, r0, #448	; 0x1c0
    7d3e:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    7d42:	005b      	lsls	r3, r3, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    7d44:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    7d48:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    7d4c:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    7d4e:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    7d52:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    7d56:	f02c 0c07 	bic.w	ip, ip, #7
    7d5a:	ea43 030c 	orr.w	r3, r3, ip
    7d5e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    7d62:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    7d66:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    7d6a:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    7d6e:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    7d72:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    7d76:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    7d7a:	b922      	cbnz	r2, 7d86 <nrfx_gpiote_output_configure+0x76>
    return NRFX_SUCCESS;
    7d7c:	4822      	ldr	r0, [pc, #136]	; (7e08 <nrfx_gpiote_output_configure+0xf8>)
    7d7e:	e7d5      	b.n	7d2c <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    7d80:	2b01      	cmp	r3, #1
    7d82:	d1d8      	bne.n	7d36 <nrfx_gpiote_output_configure+0x26>
    7d84:	e7d1      	b.n	7d2a <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7d86:	4e1e      	ldr	r6, [pc, #120]	; (7e00 <nrfx_gpiote_output_configure+0xf0>)
    7d88:	f104 0708 	add.w	r7, r4, #8
    7d8c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    7d90:	0783      	lsls	r3, r0, #30
    7d92:	d5ca      	bpl.n	7d2a <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    7d94:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    7d98:	4661      	mov	r1, ip
    7d9a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    7d9c:	f020 0020 	bic.w	r0, r0, #32
    7da0:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    7da4:	04c0      	lsls	r0, r0, #19
    7da6:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    7daa:	0cc0      	lsrs	r0, r0, #19
    7dac:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    7db0:	2300      	movs	r3, #0
    7db2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    7db6:	7855      	ldrb	r5, [r2, #1]
    7db8:	2d00      	cmp	r5, #0
    7dba:	d0df      	beq.n	7d7c <nrfx_gpiote_output_configure+0x6c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    7dbc:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    7dc0:	7892      	ldrb	r2, [r2, #2]
    7dc2:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    7dc6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    7dca:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7dce:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    7dd2:	0223      	lsls	r3, r4, #8
    7dd4:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    7dd8:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7dda:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    7dde:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    7de2:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7de4:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    7de6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    7dea:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    7dee:	4313      	orrs	r3, r2
    7df0:	f040 0020 	orr.w	r0, r0, #32
    7df4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    7df8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    7dfc:	e7be      	b.n	7d7c <nrfx_gpiote_output_configure+0x6c>
    7dfe:	bf00      	nop
    7e00:	2000009c 	.word	0x2000009c
    7e04:	0bad0004 	.word	0x0bad0004
    7e08:	0bad0000 	.word	0x0bad0000

00007e0c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    7e0c:	4b01      	ldr	r3, [pc, #4]	; (7e14 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    7e0e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    7e12:	4770      	bx	lr
    7e14:	2000009c 	.word	0x2000009c

00007e18 <nrfx_gpiote_channel_get>:
{
    7e18:	b508      	push	{r3, lr}
    7e1a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    7e1c:	f7ff fe5c 	bl	7ad8 <pin_in_use_by_te>
    7e20:	b138      	cbz	r0, 7e32 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7e22:	4b05      	ldr	r3, [pc, #20]	; (7e38 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    7e24:	4805      	ldr	r0, [pc, #20]	; (7e3c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7e26:	3208      	adds	r2, #8
    7e28:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    7e2c:	0b5b      	lsrs	r3, r3, #13
    7e2e:	700b      	strb	r3, [r1, #0]
}
    7e30:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    7e32:	4803      	ldr	r0, [pc, #12]	; (7e40 <nrfx_gpiote_channel_get+0x28>)
    7e34:	e7fc      	b.n	7e30 <nrfx_gpiote_channel_get+0x18>
    7e36:	bf00      	nop
    7e38:	2000009c 	.word	0x2000009c
    7e3c:	0bad0000 	.word	0x0bad0000
    7e40:	0bad0004 	.word	0x0bad0004

00007e44 <nrfx_gpiote_init>:
{
    7e44:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    7e46:	4c0f      	ldr	r4, [pc, #60]	; (7e84 <nrfx_gpiote_init+0x40>)
    7e48:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    7e4c:	b9bd      	cbnz	r5, 7e7e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    7e4e:	2240      	movs	r2, #64	; 0x40
    7e50:	4629      	mov	r1, r5
    7e52:	f104 0010 	add.w	r0, r4, #16
    7e56:	f003 ff41 	bl	bcdc <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    7e5a:	2006      	movs	r0, #6
    7e5c:	f7fb fea2 	bl	3ba4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7e60:	4b09      	ldr	r3, [pc, #36]	; (7e88 <nrfx_gpiote_init+0x44>)
    return err_code;
    7e62:	480a      	ldr	r0, [pc, #40]	; (7e8c <nrfx_gpiote_init+0x48>)
    7e64:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    7e68:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    7e6c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    7e70:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    7e74:	2301      	movs	r3, #1
    7e76:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    7e7a:	6563      	str	r3, [r4, #84]	; 0x54
}
    7e7c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    7e7e:	4804      	ldr	r0, [pc, #16]	; (7e90 <nrfx_gpiote_init+0x4c>)
    7e80:	e7fc      	b.n	7e7c <nrfx_gpiote_init+0x38>
    7e82:	bf00      	nop
    7e84:	2000009c 	.word	0x2000009c
    7e88:	40006000 	.word	0x40006000
    7e8c:	0bad0000 	.word	0x0bad0000
    7e90:	0bad0005 	.word	0x0bad0005

00007e94 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    7e94:	4b03      	ldr	r3, [pc, #12]	; (7ea4 <nrfx_gpiote_is_init+0x10>)
    7e96:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    7e9a:	3800      	subs	r0, #0
    7e9c:	bf18      	it	ne
    7e9e:	2001      	movne	r0, #1
    7ea0:	4770      	bx	lr
    7ea2:	bf00      	nop
    7ea4:	2000009c 	.word	0x2000009c

00007ea8 <nrfx_gpiote_channel_free>:
{
    7ea8:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    7eaa:	4801      	ldr	r0, [pc, #4]	; (7eb0 <nrfx_gpiote_channel_free+0x8>)
    7eac:	f7ff bd66 	b.w	797c <nrfx_flag32_free>
    7eb0:	200000ec 	.word	0x200000ec

00007eb4 <nrfx_gpiote_channel_alloc>:
{
    7eb4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    7eb6:	4801      	ldr	r0, [pc, #4]	; (7ebc <nrfx_gpiote_channel_alloc+0x8>)
    7eb8:	f7ff bd40 	b.w	793c <nrfx_flag32_alloc>
    7ebc:	200000ec 	.word	0x200000ec

00007ec0 <nrfx_gpiote_trigger_enable>:
{
    7ec0:	b510      	push	{r4, lr}
    7ec2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7ec4:	f7ff fe08 	bl	7ad8 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7ec8:	f102 0408 	add.w	r4, r2, #8
    7ecc:	4b1c      	ldr	r3, [pc, #112]	; (7f40 <nrfx_gpiote_trigger_enable+0x80>)
    7ece:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7ed2:	b1e0      	cbz	r0, 7f0e <nrfx_gpiote_trigger_enable+0x4e>
    7ed4:	f013 0402 	ands.w	r4, r3, #2
    7ed8:	d119      	bne.n	7f0e <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7eda:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    7edc:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    7ede:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    7ee2:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    7ee6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    7eea:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7eee:	6004      	str	r4, [r0, #0]
    7ef0:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    7ef2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    7ef6:	f040 0001 	orr.w	r0, r0, #1
    7efa:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    7efe:	b129      	cbz	r1, 7f0c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    7f00:	2201      	movs	r2, #1
    7f02:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    7f06:	4a0f      	ldr	r2, [pc, #60]	; (7f44 <nrfx_gpiote_trigger_enable+0x84>)
    7f08:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    7f0c:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    7f0e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    7f12:	2b04      	cmp	r3, #4
    7f14:	d010      	beq.n	7f38 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    7f16:	2b05      	cmp	r3, #5
    7f18:	d010      	beq.n	7f3c <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    7f1a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7f1e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    7f22:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    7f26:	40d9      	lsrs	r1, r3
    7f28:	f001 0101 	and.w	r1, r1, #1
    7f2c:	3102      	adds	r1, #2
}
    7f2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    7f32:	4610      	mov	r0, r2
    7f34:	f004 ba98 	b.w	c468 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    7f38:	2103      	movs	r1, #3
    7f3a:	e7f8      	b.n	7f2e <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    7f3c:	2102      	movs	r1, #2
    7f3e:	e7f6      	b.n	7f2e <nrfx_gpiote_trigger_enable+0x6e>
    7f40:	2000009c 	.word	0x2000009c
    7f44:	40006000 	.word	0x40006000

00007f48 <nrfx_gpiote_trigger_disable>:
{
    7f48:	b508      	push	{r3, lr}
    7f4a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7f4c:	f7ff fdc4 	bl	7ad8 <pin_in_use_by_te>
    7f50:	b1c0      	cbz	r0, 7f84 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    7f52:	f102 0108 	add.w	r1, r2, #8
    7f56:	4b0e      	ldr	r3, [pc, #56]	; (7f90 <nrfx_gpiote_trigger_disable+0x48>)
    7f58:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    7f5c:	0799      	lsls	r1, r3, #30
    7f5e:	d411      	bmi.n	7f84 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    7f60:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    7f62:	2201      	movs	r2, #1
    7f64:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    7f66:	009b      	lsls	r3, r3, #2
    7f68:	490a      	ldr	r1, [pc, #40]	; (7f94 <nrfx_gpiote_trigger_disable+0x4c>)
    7f6a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7f6e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    7f72:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    7f76:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    7f7a:	f022 0203 	bic.w	r2, r2, #3
    7f7e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    7f82:	bd08      	pop	{r3, pc}
    7f84:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    7f88:	2100      	movs	r1, #0
    7f8a:	4610      	mov	r0, r2
    7f8c:	f004 ba6c 	b.w	c468 <nrf_gpio_cfg_sense_set>
    7f90:	2000009c 	.word	0x2000009c
    7f94:	40006000 	.word	0x40006000

00007f98 <nrfx_gpiote_pin_uninit>:
{
    7f98:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    7f9a:	4b0d      	ldr	r3, [pc, #52]	; (7fd0 <nrfx_gpiote_pin_uninit+0x38>)
    7f9c:	f100 0208 	add.w	r2, r0, #8
{
    7fa0:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    7fa2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    7fa6:	07db      	lsls	r3, r3, #31
    7fa8:	d50f      	bpl.n	7fca <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    7faa:	f7ff ffcd 	bl	7f48 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    7fae:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    7fb0:	f004 041f 	and.w	r4, r4, #31
    7fb4:	f7ff fde2 	bl	7b7c <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    7fb8:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    7fbc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7fc0:	2202      	movs	r2, #2
    7fc2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    7fc6:	4803      	ldr	r0, [pc, #12]	; (7fd4 <nrfx_gpiote_pin_uninit+0x3c>)
}
    7fc8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    7fca:	4803      	ldr	r0, [pc, #12]	; (7fd8 <nrfx_gpiote_pin_uninit+0x40>)
    7fcc:	e7fc      	b.n	7fc8 <nrfx_gpiote_pin_uninit+0x30>
    7fce:	bf00      	nop
    7fd0:	2000009c 	.word	0x2000009c
    7fd4:	0bad0000 	.word	0x0bad0000
    7fd8:	0bad0004 	.word	0x0bad0004

00007fdc <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    7fdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7fe0:	4b4f      	ldr	r3, [pc, #316]	; (8120 <CONFIG_PM_SRAM_SIZE+0x120>)
    return p_reg->INTENSET & mask;
    7fe2:	4850      	ldr	r0, [pc, #320]	; (8124 <CONFIG_PM_SRAM_SIZE+0x124>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7fe4:	4950      	ldr	r1, [pc, #320]	; (8128 <CONFIG_PM_SRAM_SIZE+0x128>)
    uint32_t status = 0;
    7fe6:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    7fe8:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7fea:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7fec:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    7fee:	b136      	cbz	r6, 7ffe <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    7ff0:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    7ff4:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7ff6:	bf1e      	ittt	ne
    7ff8:	601c      	strne	r4, [r3, #0]
    7ffa:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    7ffc:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7ffe:	3304      	adds	r3, #4
    8000:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    8002:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    8006:	d1f1      	bne.n	7fec <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8008:	4b46      	ldr	r3, [pc, #280]	; (8124 <CONFIG_PM_SRAM_SIZE+0x124>)
    800a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    800e:	b1bb      	cbz	r3, 8040 <CONFIG_PM_SRAM_SIZE+0x40>
        *p_masks = gpio_regs[i]->LATCH;
    8010:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    8014:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    8018:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    801a:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    801e:	af01      	add	r7, sp, #4
    8020:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    8024:	9c01      	ldr	r4, [sp, #4]
    8026:	b98c      	cbnz	r4, 804c <CONFIG_PM_SRAM_SIZE+0x4c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8028:	4b3e      	ldr	r3, [pc, #248]	; (8124 <CONFIG_PM_SRAM_SIZE+0x124>)
    802a:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    802e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    8032:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    8036:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    8038:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    803c:	2b00      	cmp	r3, #0
    803e:	d1ee      	bne.n	801e <CONFIG_PM_SRAM_SIZE+0x1e>
        mask &= ~NRFX_BIT(ch);
    8040:	2401      	movs	r4, #1
    while (mask)
    8042:	2d00      	cmp	r5, #0
    8044:	d153      	bne.n	80ee <CONFIG_PM_SRAM_SIZE+0xee>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    8046:	b003      	add	sp, #12
    8048:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    804c:	fa94 f4a4 	rbit	r4, r4
    8050:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    8054:	4a35      	ldr	r2, [pc, #212]	; (812c <CONFIG_PM_SRAM_SIZE+0x12c>)
    8056:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    805a:	08e0      	lsrs	r0, r4, #3
    805c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    8060:	5c3b      	ldrb	r3, [r7, r0]
    bit = BITMASK_RELBIT_GET(bit);
    8062:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    8066:	fa08 f202 	lsl.w	r2, r8, r2
    806a:	ea23 0302 	bic.w	r3, r3, r2
    806e:	543b      	strb	r3, [r7, r0]
    8070:	00a3      	lsls	r3, r4, #2
    8072:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    8076:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    807a:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    807e:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    8080:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    8082:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    8086:	d518      	bpl.n	80ba <CONFIG_PM_SRAM_SIZE+0xba>
        call_handler(pin, trigger);
    8088:	4659      	mov	r1, fp
    808a:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    808c:	fa5f fa82 	uxtb.w	sl, r2
    8090:	f7ff fd2c 	bl	7aec <call_handler>
    8094:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    8098:	f3c3 4301 	ubfx	r3, r3, #16, #2
    809c:	459a      	cmp	sl, r3
    809e:	d107      	bne.n	80b0 <CONFIG_PM_SRAM_SIZE+0xb0>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    80a0:	2100      	movs	r1, #0
    80a2:	4620      	mov	r0, r4
    80a4:	f004 f9e0 	bl	c468 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    80a8:	4651      	mov	r1, sl
    80aa:	4620      	mov	r0, r4
    80ac:	f004 f9dc 	bl	c468 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    80b0:	fa08 f404 	lsl.w	r4, r8, r4
    80b4:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    80b8:	e7b4      	b.n	8024 <CONFIG_PM_SRAM_SIZE+0x24>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    80ba:	2a02      	cmp	r2, #2
    80bc:	d10c      	bne.n	80d8 <CONFIG_PM_SRAM_SIZE+0xd8>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    80be:	2103      	movs	r1, #3
    80c0:	4620      	mov	r0, r4
    80c2:	f004 f9d1 	bl	c468 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    80c6:	f00a 0305 	and.w	r3, sl, #5
    80ca:	2b01      	cmp	r3, #1
    80cc:	d1f0      	bne.n	80b0 <CONFIG_PM_SRAM_SIZE+0xb0>
            call_handler(pin, trigger);
    80ce:	4659      	mov	r1, fp
    80d0:	4620      	mov	r0, r4
    80d2:	f7ff fd0b 	bl	7aec <call_handler>
    80d6:	e7eb      	b.n	80b0 <CONFIG_PM_SRAM_SIZE+0xb0>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    80d8:	2102      	movs	r1, #2
    80da:	4620      	mov	r0, r4
    80dc:	f004 f9c4 	bl	c468 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    80e0:	f1ba 0f03 	cmp.w	sl, #3
    80e4:	d0f3      	beq.n	80ce <CONFIG_PM_SRAM_SIZE+0xce>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    80e6:	2a03      	cmp	r2, #3
    80e8:	d1e2      	bne.n	80b0 <CONFIG_PM_SRAM_SIZE+0xb0>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    80ea:	458a      	cmp	sl, r1
    80ec:	e7ee      	b.n	80cc <CONFIG_PM_SRAM_SIZE+0xcc>
        uint32_t ch = NRF_CTZ(mask);
    80ee:	fa95 f3a5 	rbit	r3, r5
    80f2:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    80f6:	fa04 f203 	lsl.w	r2, r4, r3
    80fa:	009b      	lsls	r3, r3, #2
    80fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8100:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    8104:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    8108:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    810c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    8110:	f3c0 2004 	ubfx	r0, r0, #8, #5
    8114:	f3c1 4101 	ubfx	r1, r1, #16, #2
    8118:	f7ff fce8 	bl	7aec <call_handler>
    811c:	e791      	b.n	8042 <CONFIG_PM_SRAM_SIZE+0x42>
    811e:	bf00      	nop
    8120:	40006100 	.word	0x40006100
    8124:	40006000 	.word	0x40006000
    8128:	40006120 	.word	0x40006120
    812c:	2000009c 	.word	0x2000009c

00008130 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    8130:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    8132:	4c0b      	ldr	r4, [pc, #44]	; (8160 <nrfx_power_init+0x30>)
{
    8134:	4603      	mov	r3, r0
    if (m_initialized)
    8136:	7820      	ldrb	r0, [r4, #0]
    8138:	b978      	cbnz	r0, 815a <nrfx_power_init+0x2a>
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
    813a:	781b      	ldrb	r3, [r3, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    813c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8140:	f003 0301 	and.w	r3, r3, #1
    8144:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    8148:	f7fb fd4e 	bl	3be8 <arch_irq_is_enabled>
    814c:	b908      	cbnz	r0, 8152 <nrfx_power_init+0x22>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    814e:	f7fb fd29 	bl	3ba4 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    8152:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    8154:	4803      	ldr	r0, [pc, #12]	; (8164 <nrfx_power_init+0x34>)
    m_initialized = true;
    8156:	7023      	strb	r3, [r4, #0]
}
    8158:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    815a:	4803      	ldr	r0, [pc, #12]	; (8168 <nrfx_power_init+0x38>)
    815c:	e7fc      	b.n	8158 <nrfx_power_init+0x28>
    815e:	bf00      	nop
    8160:	20001b87 	.word	0x20001b87
    8164:	0bad0000 	.word	0x0bad0000
    8168:	0bad000c 	.word	0x0bad000c

0000816c <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    816c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8170:	f44f 7260 	mov.w	r2, #896	; 0x380
    8174:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    8178:	4b01      	ldr	r3, [pc, #4]	; (8180 <nrfx_power_usbevt_uninit+0x14>)
    817a:	2200      	movs	r2, #0
    817c:	601a      	str	r2, [r3, #0]
}
    817e:	4770      	bx	lr
    8180:	200017e4 	.word	0x200017e4

00008184 <nrfx_power_usbevt_init>:
{
    8184:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    8186:	f7ff fff1 	bl	816c <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    818a:	6803      	ldr	r3, [r0, #0]
    818c:	b10b      	cbz	r3, 8192 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    818e:	4a01      	ldr	r2, [pc, #4]	; (8194 <nrfx_power_usbevt_init+0x10>)
    8190:	6013      	str	r3, [r2, #0]
}
    8192:	bd08      	pop	{r3, pc}
    8194:	200017e4 	.word	0x200017e4

00008198 <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    8198:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
    819a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    819e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    81a2:	0762      	lsls	r2, r4, #29
    81a4:	d507      	bpl.n	81b6 <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    81a6:	f44f 7084 	mov.w	r0, #264	; 0x108
    81aa:	f004 f96b 	bl	c484 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    81ae:	b110      	cbz	r0, 81b6 <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    81b0:	4b1e      	ldr	r3, [pc, #120]	; (822c <nrfx_power_irq_handler+0x94>)
    81b2:	681b      	ldr	r3, [r3, #0]
    81b4:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    81b6:	06a3      	lsls	r3, r4, #26
    81b8:	d508      	bpl.n	81cc <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    81ba:	f44f 708a 	mov.w	r0, #276	; 0x114
    81be:	f004 f961 	bl	c484 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    81c2:	b118      	cbz	r0, 81cc <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    81c4:	4b1a      	ldr	r3, [pc, #104]	; (8230 <nrfx_power_irq_handler+0x98>)
    81c6:	2000      	movs	r0, #0
    81c8:	681b      	ldr	r3, [r3, #0]
    81ca:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    81cc:	0660      	lsls	r0, r4, #25
    81ce:	d508      	bpl.n	81e2 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    81d0:	f44f 708c 	mov.w	r0, #280	; 0x118
    81d4:	f004 f956 	bl	c484 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    81d8:	b118      	cbz	r0, 81e2 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    81da:	4b15      	ldr	r3, [pc, #84]	; (8230 <nrfx_power_irq_handler+0x98>)
    81dc:	2001      	movs	r0, #1
    81de:	681b      	ldr	r3, [r3, #0]
    81e0:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    81e2:	0621      	lsls	r1, r4, #24
    81e4:	d508      	bpl.n	81f8 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    81e6:	f44f 708e 	mov.w	r0, #284	; 0x11c
    81ea:	f004 f94b 	bl	c484 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    81ee:	b118      	cbz	r0, 81f8 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    81f0:	4b10      	ldr	r3, [pc, #64]	; (8234 <nrfx_power_irq_handler+0x9c>)
    81f2:	2000      	movs	r0, #0
    81f4:	681b      	ldr	r3, [r3, #0]
    81f6:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    81f8:	05e2      	lsls	r2, r4, #23
    81fa:	d508      	bpl.n	820e <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    81fc:	f44f 7090 	mov.w	r0, #288	; 0x120
    8200:	f004 f940 	bl	c484 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    8204:	b118      	cbz	r0, 820e <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    8206:	4b0b      	ldr	r3, [pc, #44]	; (8234 <nrfx_power_irq_handler+0x9c>)
    8208:	2001      	movs	r0, #1
    820a:	681b      	ldr	r3, [r3, #0]
    820c:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    820e:	05a3      	lsls	r3, r4, #22
    8210:	d50a      	bpl.n	8228 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    8212:	f44f 7092 	mov.w	r0, #292	; 0x124
    8216:	f004 f935 	bl	c484 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    821a:	b128      	cbz	r0, 8228 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    821c:	4b05      	ldr	r3, [pc, #20]	; (8234 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    821e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    8222:	681b      	ldr	r3, [r3, #0]
    8224:	2002      	movs	r0, #2
    8226:	4718      	bx	r3
}
    8228:	bd10      	pop	{r4, pc}
    822a:	bf00      	nop
    822c:	200017ec 	.word	0x200017ec
    8230:	200017e8 	.word	0x200017e8
    8234:	200017e4 	.word	0x200017e4

00008238 <nrfx_qdec_irq_handler>:
static nrfx_qdec_event_handler_t m_qdec_event_handler = NULL;
static nrfx_drv_state_t m_state = NRFX_DRV_STATE_UNINITIALIZED;
static bool m_skip_gpio_cfg;

void nrfx_qdec_irq_handler(void)
{
    8238:	b513      	push	{r0, r1, r4, lr}
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_qdec_event_check(NRF_QDEC_Type const * p_reg, nrf_qdec_event_t event)
{
    return (bool)*(volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event);
    823a:	4c2a      	ldr	r4, [pc, #168]	; (82e4 <nrfx_qdec_irq_handler+0xac>)
    823c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    nrfx_qdec_event_t event;
    if ( nrf_qdec_event_check(NRF_QDEC, NRF_QDEC_EVENT_SAMPLERDY) &&
    8240:	b1b3      	cbz	r3, 8270 <nrfx_qdec_irq_handler+0x38>
    return p_reg->INTENSET & mask; // when read this register will return the value of INTEN.
    8242:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    8246:	07d9      	lsls	r1, r3, #31
    8248:	d512      	bpl.n	8270 <nrfx_qdec_irq_handler+0x38>
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event) ) = 0;
    824a:	2300      	movs	r3, #0
    824c:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    8250:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
         nrf_qdec_int_enable_check(NRF_QDEC, NRF_QDEC_INT_SAMPLERDY_MASK) )
    {
        nrf_qdec_event_clear(NRF_QDEC, NRF_QDEC_EVENT_SAMPLERDY);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_QDEC_EVENT_SAMPLERDY));

        event.type = NRF_QDEC_EVENT_SAMPLERDY;
    8254:	f44f 7380 	mov.w	r3, #256	; 0x100
    8258:	f8ad 3000 	strh.w	r3, [sp]
    return (nrf_qdec_sampleper_t)(p_reg->SAMPLEPER);
}

NRF_STATIC_INLINE int32_t nrf_qdec_sample_get(NRF_QDEC_Type const * p_reg)
{
    return p_reg->SAMPLE;
    825c:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
        event.data.sample.value = (int8_t)nrf_qdec_sample_get(NRF_QDEC);
    8260:	f88d 3002 	strb.w	r3, [sp, #2]
        m_qdec_event_handler(event);
    8264:	4b20      	ldr	r3, [pc, #128]	; (82e8 <nrfx_qdec_irq_handler+0xb0>)
    8266:	aa02      	add	r2, sp, #8
    8268:	e912 0003 	ldmdb	r2, {r0, r1}
    826c:	681b      	ldr	r3, [r3, #0]
    826e:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event);
    8270:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    }

    if ( nrf_qdec_event_check(NRF_QDEC, NRF_QDEC_EVENT_REPORTRDY) &&
    8274:	b1d3      	cbz	r3, 82ac <nrfx_qdec_irq_handler+0x74>
    return p_reg->INTENSET & mask; // when read this register will return the value of INTEN.
    8276:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    827a:	079a      	lsls	r2, r3, #30
    827c:	d516      	bpl.n	82ac <nrfx_qdec_irq_handler+0x74>
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event) ) = 0;
    827e:	2300      	movs	r3, #0
    8280:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    8284:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
         nrf_qdec_int_enable_check(NRF_QDEC, NRF_QDEC_INT_REPORTRDY_MASK) )
    {
        nrf_qdec_event_clear(NRF_QDEC, NRF_QDEC_EVENT_REPORTRDY);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_QDEC_EVENT_REPORTRDY));

        event.type = NRF_QDEC_EVENT_REPORTRDY;
    8288:	f44f 7382 	mov.w	r3, #260	; 0x104
    828c:	f8ad 3000 	strh.w	r3, [sp]
    return p_reg->ACC;
}

NRF_STATIC_INLINE int32_t nrf_qdec_accread_get(NRF_QDEC_Type const * p_reg)
{
    return p_reg->ACCREAD;
    8290:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518

        event.data.report.acc    = (int16_t)nrf_qdec_accread_get(NRF_QDEC);
    8294:	f8ad 3002 	strh.w	r3, [sp, #2]
    return p_reg->ACCDBL;
}

NRF_STATIC_INLINE uint32_t nrf_qdec_accdblread_get(NRF_QDEC_Type const * p_reg)
{
    return p_reg->ACCDBLREAD;
    8298:	f8d4 3548 	ldr.w	r3, [r4, #1352]	; 0x548
        event.data.report.accdbl = (uint16_t)nrf_qdec_accdblread_get(NRF_QDEC);
    829c:	f8ad 3004 	strh.w	r3, [sp, #4]
        m_qdec_event_handler(event);
    82a0:	4b11      	ldr	r3, [pc, #68]	; (82e8 <nrfx_qdec_irq_handler+0xb0>)
    82a2:	aa02      	add	r2, sp, #8
    82a4:	e912 0003 	ldmdb	r2, {r0, r1}
    82a8:	681b      	ldr	r3, [r3, #0]
    82aa:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event);
    82ac:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    }

    if ( nrf_qdec_event_check(NRF_QDEC, NRF_QDEC_EVENT_ACCOF) &&
    82b0:	b1ab      	cbz	r3, 82de <nrfx_qdec_irq_handler+0xa6>
    return p_reg->INTENSET & mask; // when read this register will return the value of INTEN.
    82b2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    82b6:	075b      	lsls	r3, r3, #29
    82b8:	d511      	bpl.n	82de <nrfx_qdec_irq_handler+0xa6>
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event) ) = 0;
    82ba:	2300      	movs	r3, #0
    82bc:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    82c0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
         nrf_qdec_int_enable_check(NRF_QDEC, NRF_QDEC_INT_ACCOF_MASK) )
    {
        nrf_qdec_event_clear(NRF_QDEC, NRF_QDEC_EVENT_ACCOF);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_QDEC_EVENT_ACCOF));

        event.type = NRF_QDEC_EVENT_ACCOF;
    82c4:	f44f 7384 	mov.w	r3, #264	; 0x108
    82c8:	f8ad 3000 	strh.w	r3, [sp]
        m_qdec_event_handler(event);
    82cc:	aa02      	add	r2, sp, #8
    82ce:	4b06      	ldr	r3, [pc, #24]	; (82e8 <nrfx_qdec_irq_handler+0xb0>)
    82d0:	e912 0003 	ldmdb	r2, {r0, r1}
    82d4:	681b      	ldr	r3, [r3, #0]
    }
}
    82d6:	b002      	add	sp, #8
    82d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_qdec_event_handler(event);
    82dc:	4718      	bx	r3
}
    82de:	b002      	add	sp, #8
    82e0:	bd10      	pop	{r4, pc}
    82e2:	bf00      	nop
    82e4:	40012000 	.word	0x40012000
    82e8:	200017f0 	.word	0x200017f0

000082ec <nrfx_qdec_init>:


nrfx_err_t nrfx_qdec_init(nrfx_qdec_config_t const * p_config,
                          nrfx_qdec_event_handler_t  event_handler)
{
    82ec:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(event_handler);
    nrfx_err_t err_code;

    if (m_state != NRFX_DRV_STATE_UNINITIALIZED)
    82ee:	4c30      	ldr	r4, [pc, #192]	; (83b0 <nrfx_qdec_init+0xc4>)
    82f0:	7823      	ldrb	r3, [r4, #0]
    82f2:	2b00      	cmp	r3, #0
    82f4:	d159      	bne.n	83aa <nrfx_qdec_init+0xbe>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    m_qdec_event_handler = event_handler;
    82f6:	4b2f      	ldr	r3, [pc, #188]	; (83b4 <nrfx_qdec_init+0xc8>)
    m_skip_gpio_cfg = p_config->skip_gpio_cfg;
    82f8:	7e02      	ldrb	r2, [r0, #24]
    m_qdec_event_handler = event_handler;
    82fa:	6019      	str	r1, [r3, #0]
    m_skip_gpio_cfg = p_config->skip_gpio_cfg;
    82fc:	4b2e      	ldr	r3, [pc, #184]	; (83b8 <nrfx_qdec_init+0xcc>)
    82fe:	701a      	strb	r2, [r3, #0]

    if (!p_config->skip_gpio_cfg)
    8300:	b9c2      	cbnz	r2, 8334 <nrfx_qdec_init+0x48>
    *p_pin = pin_number & 0x1F;
    8302:	6843      	ldr	r3, [r0, #4]
    8304:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    8308:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    830c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    8310:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
    8314:	6883      	ldr	r3, [r0, #8]
    8316:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    831a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    831e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    {
        nrf_gpio_cfg_input(p_config->psela, NRF_GPIO_PIN_NOPULL);
        nrf_gpio_cfg_input(p_config->pselb, NRF_GPIO_PIN_NOPULL);
        if (p_config->pselled != NRF_QDEC_LED_NOT_CONNECTED)
    8322:	68c3      	ldr	r3, [r0, #12]
    8324:	1c5d      	adds	r5, r3, #1
    *p_pin = pin_number & 0x1F;
    8326:	bf1e      	ittt	ne
    8328:	f003 031f 	andne.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    832c:	f503 73e0 	addne.w	r3, r3, #448	; 0x1c0
    8330:	f841 2023 	strne.w	r2, [r1, r3, lsl #2]
        {
            nrf_gpio_cfg_input(p_config->pselled, NRF_GPIO_PIN_NOPULL);
        }
    }
    if (!p_config->skip_psel_cfg)
    8334:	7e42      	ldrb	r2, [r0, #25]
    8336:	4b21      	ldr	r3, [pc, #132]	; (83bc <nrfx_qdec_init+0xd0>)
    8338:	b942      	cbnz	r2, 834c <nrfx_qdec_init+0x60>
    {
        nrf_qdec_pins_set(NRF_QDEC, p_config->psela, p_config->pselb, p_config->pselled);
    833a:	e9d0 5101 	ldrd	r5, r1, [r0, #4]
    833e:	68c2      	ldr	r2, [r0, #12]
    p_reg->PSEL.A = phase_a_pin;
    8340:	f8c3 5520 	str.w	r5, [r3, #1312]	; 0x520
    p_reg->PSEL.B = phase_b_pin;
    8344:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
    p_reg->PSEL.LED = led_pin;
    8348:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->SAMPLEPER = sampleper;
    834c:	7842      	ldrb	r2, [r0, #1]
    834e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    return p_reg->PSEL.LED;
    8352:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    }

    nrf_qdec_sampleper_set(NRF_QDEC, p_config->sampleper);
    // Change the period and polarity of the LED only when it is used,
    // otherwise the ledpre field might have an invalid value.
    if (nrf_qdec_led_pin_get(NRF_QDEC) != NRF_QDEC_LED_NOT_CONNECTED)
    8356:	3201      	adds	r2, #1
    {
        nrf_qdec_ledpre_set(NRF_QDEC, p_config->ledpre);
    8358:	bf1f      	itttt	ne
    835a:	6902      	ldrne	r2, [r0, #16]
}

NRF_STATIC_INLINE void nrf_qdec_ledpre_set(NRF_QDEC_Type * p_reg, uint32_t time_us)
{
    p_reg->LEDPRE = time_us;
    835c:	f8c3 2540 	strne.w	r2, [r3, #1344]	; 0x540
    return (reportper == NRF_QDEC_REPORTPER_10) ? 10 : reportper * 40;
}

NRF_STATIC_INLINE void nrf_qdec_ledpol_set(NRF_QDEC_Type * p_reg, nrf_qdec_ledpol_t pol)
{
    p_reg->LEDPOL = pol;
    8360:	7d02      	ldrbne	r2, [r0, #20]
    8362:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
        nrf_qdec_ledpol_set(NRF_QDEC, p_config->ledpol);
    }

    if (p_config->dbfen)
    8366:	7d42      	ldrb	r2, [r0, #21]
    8368:	b102      	cbz	r2, 836c <nrfx_qdec_init+0x80>
    p_reg->DBFEN = NRF_QDEC_DBFEN_ENABLE;
    836a:	2201      	movs	r2, #1
    p_reg->DBFEN = NRF_QDEC_DBFEN_DISABLE;
    836c:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
        nrf_qdec_dbfen_disable(NRF_QDEC);
    }

    uint32_t int_mask = NRF_QDEC_INT_ACCOF_MASK;

    if (p_config->reportper != NRF_QDEC_REPORTPER_DISABLED)
    8370:	7802      	ldrb	r2, [r0, #0]
    8372:	2a10      	cmp	r2, #16
    p_reg->SHORTS |= mask;
    8374:	bf1f      	itttt	ne
    8376:	f8d3 2200 	ldrne.w	r2, [r3, #512]	; 0x200
    837a:	f042 0201 	orrne.w	r2, r2, #1
    837e:	f8c3 2200 	strne.w	r2, [r3, #512]	; 0x200
    p_reg->REPORTPER = reportper;
    8382:	7802      	ldrbne	r2, [r0, #0]
    8384:	bf18      	it	ne
    8386:	f8c3 2510 	strne.w	r2, [r3, #1296]	; 0x510
        nrf_qdec_shorts_enable(NRF_QDEC, NRF_QDEC_SHORT_REPORTRDY_READCLRACC_MASK);
        nrf_qdec_reportper_set(NRF_QDEC, p_config->reportper);
        int_mask |= NRF_QDEC_INT_REPORTRDY_MASK;
    }

    if (p_config->sample_inten)
    838a:	7d81      	ldrb	r1, [r0, #22]
        int_mask |= NRF_QDEC_INT_REPORTRDY_MASK;
    838c:	bf14      	ite	ne
    838e:	2206      	movne	r2, #6
    uint32_t int_mask = NRF_QDEC_INT_ACCOF_MASK;
    8390:	2204      	moveq	r2, #4
    if (p_config->sample_inten)
    8392:	b109      	cbz	r1, 8398 <nrfx_qdec_init+0xac>
    {
        int_mask |= NRF_QDEC_INT_SAMPLERDY_MASK;
    8394:	f042 0201 	orr.w	r2, r2, #1
    p_reg->INTENSET = mask; // writing 0 has no effect
    8398:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    }

    nrf_qdec_int_enable(NRF_QDEC, int_mask);
    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_QDEC), p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_QDEC));
    839c:	2012      	movs	r0, #18
    839e:	f7fb fc01 	bl	3ba4 <arch_irq_enable>

    m_state = NRFX_DRV_STATE_INITIALIZED;
    83a2:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    83a4:	4806      	ldr	r0, [pc, #24]	; (83c0 <nrfx_qdec_init+0xd4>)
    m_state = NRFX_DRV_STATE_INITIALIZED;
    83a6:	7023      	strb	r3, [r4, #0]
}
    83a8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    83aa:	4806      	ldr	r0, [pc, #24]	; (83c4 <nrfx_qdec_init+0xd8>)
    83ac:	e7fc      	b.n	83a8 <nrfx_qdec_init+0xbc>
    83ae:	bf00      	nop
    83b0:	20001b89 	.word	0x20001b89
    83b4:	200017f0 	.word	0x200017f0
    83b8:	20001b88 	.word	0x20001b88
    83bc:	40012000 	.word	0x40012000
    83c0:	0bad0000 	.word	0x0bad0000
    83c4:	0bad0005 	.word	0x0bad0005

000083c8 <nrfx_qdec_enable>:
    p_reg->ENABLE = NRF_QDEC_ENABLE;
    83c8:	4b04      	ldr	r3, [pc, #16]	; (83dc <nrfx_qdec_enable+0x14>)
    83ca:	2201      	movs	r2, #1
    83cc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)task) ) = 1;
    83d0:	601a      	str	r2, [r3, #0]
void nrfx_qdec_enable(void)
{
    NRFX_ASSERT(m_state == NRFX_DRV_STATE_INITIALIZED);
    nrf_qdec_enable(NRF_QDEC);
    nrf_qdec_task_trigger(NRF_QDEC, NRF_QDEC_TASK_START);
    m_state = NRFX_DRV_STATE_POWERED_ON;
    83d2:	4b03      	ldr	r3, [pc, #12]	; (83e0 <nrfx_qdec_enable+0x18>)
    83d4:	2202      	movs	r2, #2
    83d6:	701a      	strb	r2, [r3, #0]
    NRFX_LOG_INFO("Enabled.");
}
    83d8:	4770      	bx	lr
    83da:	bf00      	nop
    83dc:	40012000 	.word	0x40012000
    83e0:	20001b89 	.word	0x20001b89

000083e4 <nrfx_qdec_accumulators_read>:
    83e4:	4b04      	ldr	r3, [pc, #16]	; (83f8 <nrfx_qdec_accumulators_read+0x14>)
    83e6:	2201      	movs	r2, #1
    83e8:	609a      	str	r2, [r3, #8]
    return p_reg->ACCREAD;
    83ea:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
void nrfx_qdec_accumulators_read(int16_t * p_acc, int16_t * p_accdbl)
{
    NRFX_ASSERT(m_state == NRFX_DRV_STATE_POWERED_ON);
    nrf_qdec_task_trigger(NRF_QDEC, NRF_QDEC_TASK_READCLRACC);

    *p_acc    = (int16_t)nrf_qdec_accread_get(NRF_QDEC);
    83ee:	8002      	strh	r2, [r0, #0]
    return p_reg->ACCDBLREAD;
    83f0:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
    *p_accdbl = (int16_t)nrf_qdec_accdblread_get(NRF_QDEC);
    83f4:	800b      	strh	r3, [r1, #0]

    NRFX_LOG_DEBUG("Accumulators data, ACC register:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_acc, sizeof(p_acc[0]));
    NRFX_LOG_DEBUG("Accumulators data, ACCDBL register:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_accdbl, sizeof(p_accdbl[0]));
}
    83f6:	4770      	bx	lr
    83f8:	40012000 	.word	0x40012000

000083fc <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    83fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    8400:	4d52      	ldr	r5, [pc, #328]	; (854c <nrfx_spim_init+0x150>)
{
    8402:	460c      	mov	r4, r1
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    8404:	7901      	ldrb	r1, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    8406:	014f      	lsls	r7, r1, #5
    8408:	eb05 1141 	add.w	r1, r5, r1, lsl #5
{
    840c:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    840e:	7f08      	ldrb	r0, [r1, #28]
    8410:	2800      	cmp	r0, #0
    8412:	f040 8098 	bne.w	8546 <nrfx_spim_init+0x14a>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    8416:	f8d6 8000 	ldr.w	r8, [r6]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    841a:	51ea      	str	r2, [r5, r7]
    p_cb->p_context = p_context;
    841c:	604b      	str	r3, [r1, #4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    841e:	7be0      	ldrb	r0, [r4, #15]
    8420:	7f8a      	ldrb	r2, [r1, #30]
    8422:	f360 0200 	bfi	r2, r0, #0, #1
    8426:	778a      	strb	r2, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
    8428:	7920      	ldrb	r0, [r4, #4]
    842a:	b2d2      	uxtb	r2, r2
    842c:	f360 0241 	bfi	r2, r0, #1, #1
    8430:	778a      	strb	r2, [r1, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
#endif
    p_cb->ss_pin = p_config->ss_pin;
    8432:	78e3      	ldrb	r3, [r4, #3]
    8434:	77cb      	strb	r3, [r1, #31]
    if (!p_config->skip_gpio_cfg)
    8436:	7be3      	ldrb	r3, [r4, #15]
    8438:	f8d6 9000 	ldr.w	r9, [r6]
    843c:	2b00      	cmp	r3, #0
    843e:	d140      	bne.n	84c2 <nrfx_spim_init+0xc6>
        nrf_gpio_pin_write(p_config->sck_pin,
    8440:	7b21      	ldrb	r1, [r4, #12]
    8442:	7820      	ldrb	r0, [r4, #0]
    8444:	2901      	cmp	r1, #1
    8446:	bf94      	ite	ls
    8448:	2100      	movls	r1, #0
    844a:	2101      	movhi	r1, #1
    844c:	f004 f847 	bl	c4de <nrf_gpio_pin_write>
    *p_pin = pin_number & 0x1F;
    8450:	7823      	ldrb	r3, [r4, #0]
    8452:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    8456:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    845a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    845e:	2201      	movs	r2, #1
    8460:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    8464:	7863      	ldrb	r3, [r4, #1]
    8466:	2bff      	cmp	r3, #255	; 0xff
    8468:	d00c      	beq.n	8484 <nrfx_spim_init+0x88>
    *p_pin = pin_number & 0x1F;
    846a:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    846e:	409a      	lsls	r2, r3
    p_reg->OUTCLR = clr_mask;
    8470:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    8474:	7863      	ldrb	r3, [r4, #1]
    8476:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    847a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    847e:	2203      	movs	r2, #3
    8480:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    8484:	78a3      	ldrb	r3, [r4, #2]
    8486:	2bff      	cmp	r3, #255	; 0xff
    8488:	d009      	beq.n	849e <nrfx_spim_init+0xa2>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    848a:	7ba2      	ldrb	r2, [r4, #14]
    *p_pin = pin_number & 0x1F;
    848c:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    8490:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    8494:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    8498:	0092      	lsls	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    849a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    849e:	78e0      	ldrb	r0, [r4, #3]
    84a0:	28ff      	cmp	r0, #255	; 0xff
    84a2:	d00e      	beq.n	84c2 <nrfx_spim_init+0xc6>
                               p_config->ss_active_high ? 0 : 1);
    84a4:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
    84a6:	f081 0101 	eor.w	r1, r1, #1
    84aa:	f004 f818 	bl	c4de <nrf_gpio_pin_write>
    *p_pin = pin_number & 0x1F;
    84ae:	78e3      	ldrb	r3, [r4, #3]
    84b0:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    84b4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    84b8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    84bc:	2103      	movs	r1, #3
    84be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    84c2:	7c23      	ldrb	r3, [r4, #16]
    84c4:	b993      	cbnz	r3, 84ec <nrfx_spim_init+0xf0>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    84c6:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    84c8:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    84ca:	2bff      	cmp	r3, #255	; 0xff
    84cc:	bf18      	it	ne
    84ce:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    84d0:	78a3      	ldrb	r3, [r4, #2]
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
    84d2:	f8c9 1508 	str.w	r1, [r9, #1288]	; 0x508
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    84d6:	bf08      	it	eq
    84d8:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    84dc:	2bff      	cmp	r3, #255	; 0xff
    84de:	bf08      	it	eq
    84e0:	f04f 33ff 	moveq.w	r3, #4294967295
    p_reg->PSEL.MOSI = mosi_pin;
    84e4:	f8c9 250c 	str.w	r2, [r9, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    84e8:	f8c9 3510 	str.w	r3, [r9, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    84ec:	68a3      	ldr	r3, [r4, #8]
    84ee:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    84f2:	7b63      	ldrb	r3, [r4, #13]
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    84f4:	7b22      	ldrb	r2, [r4, #12]
    84f6:	3b00      	subs	r3, #0
    84f8:	bf18      	it	ne
    84fa:	2301      	movne	r3, #1
    switch (spi_mode)
    84fc:	2a02      	cmp	r2, #2
    84fe:	d01c      	beq.n	853a <nrfx_spim_init+0x13e>
    8500:	2a03      	cmp	r2, #3
    8502:	d01d      	beq.n	8540 <nrfx_spim_init+0x144>
    8504:	2a01      	cmp	r2, #1
    8506:	d101      	bne.n	850c <nrfx_spim_init+0x110>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    8508:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    850c:	f8c8 3554 	str.w	r3, [r8, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    8510:	79a3      	ldrb	r3, [r4, #6]
    8512:	f8c8 35c0 	str.w	r3, [r8, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    8516:	2307      	movs	r3, #7
    8518:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    851c:	59eb      	ldr	r3, [r5, r7]
    851e:	b123      	cbz	r3, 852a <nrfx_spim_init+0x12e>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    8520:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    8522:	f340 3007 	sbfx	r0, r0, #12, #8
    8526:	f7fb fb3d 	bl	3ba4 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    852a:	443d      	add	r5, r7
    852c:	2300      	movs	r3, #0
    852e:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    8530:	4807      	ldr	r0, [pc, #28]	; (8550 <nrfx_spim_init+0x154>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    8532:	2301      	movs	r3, #1
    8534:	772b      	strb	r3, [r5, #28]
}
    8536:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    853a:	f043 0304 	orr.w	r3, r3, #4
        break;
    853e:	e7e5      	b.n	850c <nrfx_spim_init+0x110>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    8540:	f043 0306 	orr.w	r3, r3, #6
        break;
    8544:	e7e2      	b.n	850c <nrfx_spim_init+0x110>
        return err_code;
    8546:	4803      	ldr	r0, [pc, #12]	; (8554 <nrfx_spim_init+0x158>)
    8548:	e7f5      	b.n	8536 <nrfx_spim_init+0x13a>
    854a:	bf00      	nop
    854c:	200017f4 	.word	0x200017f4
    8550:	0bad0000 	.word	0x0bad0000
    8554:	0bad0005 	.word	0x0bad0005

00008558 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
    8558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    855a:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
    855c:	4d20      	ldr	r5, [pc, #128]	; (85e0 <nrfx_spim_uninit+0x88>)
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
    855e:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
    8560:	015e      	lsls	r6, r3, #5
    8562:	eb05 1743 	add.w	r7, r5, r3, lsl #5
    8566:	59ab      	ldr	r3, [r5, r6]
    8568:	b1b3      	cbz	r3, 8598 <nrfx_spim_uninit+0x40>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    856a:	f344 3007 	sbfx	r0, r4, #12, #8
    856e:	f7fb fb27 	bl	3bc0 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    8572:	4b1c      	ldr	r3, [pc, #112]	; (85e4 <nrfx_spim_uninit+0x8c>)
    8574:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
    8578:	7f7b      	ldrb	r3, [r7, #29]
    857a:	b16b      	cbz	r3, 8598 <nrfx_spim_uninit+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    857c:	2301      	movs	r3, #1
    857e:	6163      	str	r3, [r4, #20]
    8580:	2764      	movs	r7, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8582:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
    8586:	b923      	cbnz	r3, 8592 <nrfx_spim_uninit+0x3a>
    8588:	2001      	movs	r0, #1
    858a:	f003 fed7 	bl	c33c <nrfx_busy_wait>
    858e:	3f01      	subs	r7, #1
    8590:	d1f7      	bne.n	8582 <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
    8592:	19ab      	adds	r3, r5, r6
    8594:	2200      	movs	r2, #0
    8596:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
    8598:	2300      	movs	r3, #0
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
    859a:	19a9      	adds	r1, r5, r6
    859c:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    85a0:	7f8b      	ldrb	r3, [r1, #30]
    85a2:	07db      	lsls	r3, r3, #31
    85a4:	d417      	bmi.n	85d6 <nrfx_spim_uninit+0x7e>
    return p_reg->PSEL.SCK;
    85a6:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
    85aa:	f003 ff8c 	bl	c4c6 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
    85ae:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
    85b2:	f003 ff88 	bl	c4c6 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
    85b6:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
    85ba:	f003 ff84 	bl	c4c6 <spim_pin_uninit>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    85be:	7fcb      	ldrb	r3, [r1, #31]
    85c0:	2bff      	cmp	r3, #255	; 0xff
    85c2:	d008      	beq.n	85d6 <nrfx_spim_uninit+0x7e>
    *p_pin = pin_number & 0x1F;
    85c4:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    85c8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    85cc:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    85d0:	2102      	movs	r1, #2
    85d2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    85d6:	4435      	add	r5, r6
    85d8:	2300      	movs	r3, #0
    85da:	772b      	strb	r3, [r5, #28]
}
    85dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    85de:	bf00      	nop
    85e0:	200017f4 	.word	0x200017f4
    85e4:	00080152 	.word	0x00080152

000085e8 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    85e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    85ec:	4f38      	ldr	r7, [pc, #224]	; (86d0 <nrfx_spim_xfer+0xe8>)
    85ee:	7903      	ldrb	r3, [r0, #4]
    85f0:	eb07 1843 	add.w	r8, r7, r3, lsl #5
{
    85f4:	4615      	mov	r5, r2
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    85f6:	f898 201d 	ldrb.w	r2, [r8, #29]
{
    85fa:	4681      	mov	r9, r0
    85fc:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
    85fe:	015e      	lsls	r6, r3, #5
    8600:	2a00      	cmp	r2, #0
    8602:	d163      	bne.n	86cc <nrfx_spim_xfer+0xe4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    8604:	59ba      	ldr	r2, [r7, r6]
    8606:	b12a      	cbz	r2, 8614 <nrfx_spim_xfer+0x2c>
    8608:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    860c:	bf04      	itt	eq
    860e:	2201      	moveq	r2, #1
    8610:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    8614:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    8618:	eb07 0c06 	add.w	ip, r7, r6
    861c:	f10c 0c0c 	add.w	ip, ip, #12
    8620:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
    8624:	2101      	movs	r1, #1
    8626:	4640      	mov	r0, r8
    8628:	f003 ff66 	bl	c4f8 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    862c:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    862e:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    8632:	b121      	cbz	r1, 863e <nrfx_spim_xfer+0x56>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    8634:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
    8638:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    863c:	d106      	bne.n	864c <nrfx_spim_xfer+0x64>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    863e:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    8640:	b152      	cbz	r2, 8658 <nrfx_spim_xfer+0x70>
    8642:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    8646:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    864a:	d005      	beq.n	8658 <nrfx_spim_xfer+0x70>
        p_cb->transfer_in_progress = false;
    864c:	443e      	add	r6, r7
    864e:	2300      	movs	r3, #0
        return err_code;
    8650:	4820      	ldr	r0, [pc, #128]	; (86d4 <nrfx_spim_xfer+0xec>)
        p_cb->transfer_in_progress = false;
    8652:	7773      	strb	r3, [r6, #29]
}
    8654:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    8658:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    865a:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    865e:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    8662:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    8666:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    866a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    866e:	2200      	movs	r2, #0
    8670:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    8674:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    8678:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    867c:	bf18      	it	ne
    867e:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    8680:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    8684:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    8688:	bf18      	it	ne
    868a:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    868c:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    8690:	072a      	lsls	r2, r5, #28
    8692:	d507      	bpl.n	86a4 <nrfx_spim_xfer+0xbc>
    if (!p_cb->handler)
    8694:	59ba      	ldr	r2, [r7, r6]
    8696:	b972      	cbnz	r2, 86b6 <nrfx_spim_xfer+0xce>
        set_ss_pin_state(p_cb, false);
    8698:	2100      	movs	r1, #0
    869a:	4640      	mov	r0, r8
    869c:	f003 ff2c 	bl	c4f8 <set_ss_pin_state>
    return err_code;
    86a0:	480d      	ldr	r0, [pc, #52]	; (86d8 <nrfx_spim_xfer+0xf0>)
    86a2:	e7d7      	b.n	8654 <nrfx_spim_xfer+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    86a4:	2201      	movs	r2, #1
    86a6:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
    86a8:	59ba      	ldr	r2, [r7, r6]
    86aa:	b922      	cbnz	r2, 86b6 <nrfx_spim_xfer+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    86ac:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    86b0:	2a00      	cmp	r2, #0
    86b2:	d0fb      	beq.n	86ac <nrfx_spim_xfer+0xc4>
    86b4:	e7f0      	b.n	8698 <nrfx_spim_xfer+0xb0>
    if (!enable)
    86b6:	f015 0f04 	tst.w	r5, #4
    86ba:	f04f 0240 	mov.w	r2, #64	; 0x40
    86be:	d002      	beq.n	86c6 <nrfx_spim_xfer+0xde>
    p_reg->INTENCLR = mask;
    86c0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    86c4:	e7ec      	b.n	86a0 <nrfx_spim_xfer+0xb8>
    p_reg->INTENSET = mask;
    86c6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    86ca:	e7e9      	b.n	86a0 <nrfx_spim_xfer+0xb8>
        return err_code;
    86cc:	4803      	ldr	r0, [pc, #12]	; (86dc <nrfx_spim_xfer+0xf4>)
    86ce:	e7c1      	b.n	8654 <nrfx_spim_xfer+0x6c>
    86d0:	200017f4 	.word	0x200017f4
    86d4:	0bad000a 	.word	0x0bad000a
    86d8:	0bad0000 	.word	0x0bad0000
    86dc:	0bad000b 	.word	0x0bad000b

000086e0 <nrfx_spim_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_SPIM0_ENABLED)
void nrfx_spim_0_irq_handler(void)
{
    86e0:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    86e2:	4b0c      	ldr	r3, [pc, #48]	; (8714 <nrfx_spim_0_irq_handler+0x34>)
    86e4:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    86e8:	b192      	cbz	r2, 8710 <nrfx_spim_0_irq_handler+0x30>
    set_ss_pin_state(p_cb, false);
    86ea:	4c0b      	ldr	r4, [pc, #44]	; (8718 <nrfx_spim_0_irq_handler+0x38>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    86ec:	2500      	movs	r5, #0
    86ee:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
    86f2:	4629      	mov	r1, r5
    86f4:	4620      	mov	r0, r4
    86f6:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    86fa:	f003 fefd 	bl	c4f8 <set_ss_pin_state>
    p_cb->transfer_in_progress = false;
    86fe:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    8700:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    8702:	e9d4 3100 	ldrd	r3, r1, [r4]
    8706:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM0, &m_cb[NRFX_SPIM0_INST_IDX]);
}
    870a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    870e:	4718      	bx	r3
}
    8710:	bd70      	pop	{r4, r5, r6, pc}
    8712:	bf00      	nop
    8714:	40003000 	.word	0x40003000
    8718:	200017f4 	.word	0x200017f4

0000871c <nrfx_timer_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TIMER2_ENABLED)
void nrfx_timer_2_irq_handler(void)
{
    871c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8720:	4c0f      	ldr	r4, [pc, #60]	; (8760 <nrfx_timer_2_irq_handler+0x44>)
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_timer_int_enable_check(NRF_TIMER_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    8722:	4f10      	ldr	r7, [pc, #64]	; (8764 <nrfx_timer_2_irq_handler+0x48>)
            if (p_cb->handler)
    8724:	4e10      	ldr	r6, [pc, #64]	; (8768 <nrfx_timer_2_irq_handler+0x4c>)
{
    8726:	2500      	movs	r5, #0
    return (nrf_timer_event_t)NRFX_OFFSETOF(NRF_TIMER_Type, EVENTS_COMPARE[channel]);
}

NRF_STATIC_INLINE nrf_timer_int_mask_t nrf_timer_compare_int_get(uint32_t channel)
{
    return (nrf_timer_int_mask_t)
    8728:	f44f 3880 	mov.w	r8, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    872c:	6823      	ldr	r3, [r4, #0]
        if (nrf_timer_event_check(p_reg, event) &&
    872e:	b17b      	cbz	r3, 8750 <nrfx_timer_2_irq_handler+0x34>
    return p_reg->INTENSET & mask;
    8730:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
    return (nrf_timer_int_mask_t)
    8734:	fa08 f205 	lsl.w	r2, r8, r5
    8738:	421a      	tst	r2, r3
    873a:	d009      	beq.n	8750 <nrfx_timer_2_irq_handler+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    873c:	2300      	movs	r3, #0
    873e:	6023      	str	r3, [r4, #0]
    8740:	6823      	ldr	r3, [r4, #0]
            if (p_cb->handler)
    8742:	6833      	ldr	r3, [r6, #0]
    8744:	b123      	cbz	r3, 8750 <nrfx_timer_2_irq_handler+0x34>
                p_cb->handler(event, p_cb->context);
    8746:	f504 40c0 	add.w	r0, r4, #24576	; 0x6000
    874a:	6871      	ldr	r1, [r6, #4]
    874c:	b280      	uxth	r0, r0
    874e:	4798      	blx	r3
    for (i = 0; i < channel_count; ++i)
    8750:	3501      	adds	r5, #1
    8752:	2d04      	cmp	r5, #4
    8754:	f104 0404 	add.w	r4, r4, #4
    8758:	d1e8      	bne.n	872c <nrfx_timer_2_irq_handler+0x10>
    irq_handler(NRF_TIMER2, &m_cb[NRFX_TIMER2_INST_IDX],
        NRF_TIMER_CC_CHANNEL_COUNT(2));
}
    875a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    875e:	bf00      	nop
    8760:	4000a140 	.word	0x4000a140
    8764:	4000a000 	.word	0x4000a000
    8768:	20001814 	.word	0x20001814

0000876c <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    876c:	4b05      	ldr	r3, [pc, #20]	; (8784 <ep_state_access+0x18>)
    876e:	f010 0f80 	tst.w	r0, #128	; 0x80
    8772:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    8776:	bf08      	it	eq
    8778:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    877a:	f000 000f 	and.w	r0, r0, #15
}
    877e:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    8782:	4770      	bx	lr
    8784:	200019c8 	.word	0x200019c8

00008788 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    8788:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    878a:	4a07      	ldr	r2, [pc, #28]	; (87a8 <ev_usbreset_handler+0x20>)
    878c:	2300      	movs	r3, #0
    878e:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    8790:	4a06      	ldr	r2, [pc, #24]	; (87ac <ev_usbreset_handler+0x24>)
    8792:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    8794:	2301      	movs	r3, #1
    8796:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    8798:	4b05      	ldr	r3, [pc, #20]	; (87b0 <ev_usbreset_handler+0x28>)
    879a:	a801      	add	r0, sp, #4
    879c:	681b      	ldr	r3, [r3, #0]
    879e:	4798      	blx	r3
}
    87a0:	b003      	add	sp, #12
    87a2:	f85d fb04 	ldr.w	pc, [sp], #4
    87a6:	bf00      	nop
    87a8:	20001b8c 	.word	0x20001b8c
    87ac:	20001b8b 	.word	0x20001b8b
    87b0:	20001a60 	.word	0x20001a60

000087b4 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    87b4:	b513      	push	{r0, r1, r4, lr}
    return p_reg->EVENTCAUSE;
    87b6:	4b19      	ldr	r3, [pc, #100]	; (881c <ev_usbevent_handler+0x68>)
    87b8:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    87bc:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    87c0:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    87c2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    87c6:	d508      	bpl.n	87da <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    87c8:	4b15      	ldr	r3, [pc, #84]	; (8820 <ev_usbevent_handler+0x6c>)
    87ca:	2201      	movs	r2, #1
    87cc:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    87ce:	2302      	movs	r3, #2
    87d0:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    87d2:	4b14      	ldr	r3, [pc, #80]	; (8824 <ev_usbevent_handler+0x70>)
    87d4:	a801      	add	r0, sp, #4
    87d6:	681b      	ldr	r3, [r3, #0]
    87d8:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    87da:	05a2      	lsls	r2, r4, #22
    87dc:	d508      	bpl.n	87f0 <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    87de:	4b10      	ldr	r3, [pc, #64]	; (8820 <ev_usbevent_handler+0x6c>)
    87e0:	2200      	movs	r2, #0
    87e2:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    87e4:	2303      	movs	r3, #3
    87e6:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    87e8:	4b0e      	ldr	r3, [pc, #56]	; (8824 <ev_usbevent_handler+0x70>)
    87ea:	a801      	add	r0, sp, #4
    87ec:	681b      	ldr	r3, [r3, #0]
    87ee:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    87f0:	0563      	lsls	r3, r4, #21
    87f2:	d510      	bpl.n	8816 <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    87f4:	4b0a      	ldr	r3, [pc, #40]	; (8820 <ev_usbevent_handler+0x6c>)
    87f6:	781a      	ldrb	r2, [r3, #0]
    87f8:	b16a      	cbz	r2, 8816 <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    87fa:	2200      	movs	r2, #0
    87fc:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    87fe:	4b07      	ldr	r3, [pc, #28]	; (881c <ev_usbevent_handler+0x68>)
    8800:	2201      	movs	r2, #1
    8802:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8806:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8808:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    880a:	2304      	movs	r3, #4
    880c:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    880e:	4b05      	ldr	r3, [pc, #20]	; (8824 <ev_usbevent_handler+0x70>)
    8810:	a801      	add	r0, sp, #4
    8812:	681b      	ldr	r3, [r3, #0]
    8814:	4798      	blx	r3
        }
    }
}
    8816:	b002      	add	sp, #8
    8818:	bd10      	pop	{r4, pc}
    881a:	bf00      	nop
    881c:	40027000 	.word	0x40027000
    8820:	20001b8c 	.word	0x20001b8c
    8824:	20001a60 	.word	0x20001a60

00008828 <usbd_errata_187_211_begin>:
	__asm__ volatile(
    8828:	f04f 0340 	mov.w	r3, #64	; 0x40
    882c:	f3ef 8011 	mrs	r0, BASEPRI
    8830:	f383 8812 	msr	BASEPRI_MAX, r3
    8834:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    8838:	4b0a      	ldr	r3, [pc, #40]	; (8864 <usbd_errata_187_211_begin+0x3c>)
    883a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    883e:	2203      	movs	r2, #3
    8840:	b961      	cbnz	r1, 885c <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8842:	f249 3175 	movw	r1, #37749	; 0x9375
    8846:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    884a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    884e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    8852:	f380 8811 	msr	BASEPRI, r0
    8856:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    885a:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    885c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    8860:	e7f7      	b.n	8852 <usbd_errata_187_211_begin+0x2a>
    8862:	bf00      	nop
    8864:	4006e000 	.word	0x4006e000

00008868 <usbd_errata_187_211_end>:
	__asm__ volatile(
    8868:	f04f 0340 	mov.w	r3, #64	; 0x40
    886c:	f3ef 8011 	mrs	r0, BASEPRI
    8870:	f383 8812 	msr	BASEPRI_MAX, r3
    8874:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    8878:	4b0a      	ldr	r3, [pc, #40]	; (88a4 <usbd_errata_187_211_end+0x3c>)
    887a:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    887e:	b961      	cbnz	r1, 889a <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    8880:	f249 3275 	movw	r2, #37749	; 0x9375
    8884:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    8888:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    888c:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    8890:	f380 8811 	msr	BASEPRI, r0
    8894:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    8898:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    889a:	2200      	movs	r2, #0
    889c:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    88a0:	e7f6      	b.n	8890 <usbd_errata_187_211_end+0x28>
    88a2:	bf00      	nop
    88a4:	4006e000 	.word	0x4006e000

000088a8 <nrfx_usbd_feeder_flash>:
{
    88a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    88aa:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    88ac:	4f0b      	ldr	r7, [pc, #44]	; (88dc <nrfx_usbd_feeder_flash+0x34>)
    88ae:	429a      	cmp	r2, r3
    88b0:	bf28      	it	cs
    88b2:	461a      	movcs	r2, r3
{
    88b4:	460c      	mov	r4, r1
    88b6:	4615      	mov	r5, r2
    88b8:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    88ba:	6809      	ldr	r1, [r1, #0]
    88bc:	4638      	mov	r0, r7
    88be:	f003 fa02 	bl	bcc6 <memcpy>
    p_next->size = tx_size;
    88c2:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->size -= tx_size;
    88c6:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    88c8:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
    88ca:	1b40      	subs	r0, r0, r5
    p_transfer->p_data.addr += tx_size;
    88cc:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
    88ce:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    88d0:	6023      	str	r3, [r4, #0]
}
    88d2:	3800      	subs	r0, #0
    88d4:	bf18      	it	ne
    88d6:	2001      	movne	r0, #1
    88d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    88da:	bf00      	nop
    88dc:	20001820 	.word	0x20001820

000088e0 <nrfx_usbd_feeder_flash_zlp>:
{
    88e0:	b570      	push	{r4, r5, r6, lr}
    88e2:	684b      	ldr	r3, [r1, #4]
    88e4:	429a      	cmp	r2, r3
    88e6:	bf28      	it	cs
    88e8:	461a      	movcs	r2, r3
    88ea:	4606      	mov	r6, r0
    88ec:	460d      	mov	r5, r1
    88ee:	4614      	mov	r4, r2
    if (tx_size != 0)
    88f0:	b182      	cbz	r2, 8914 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    88f2:	6809      	ldr	r1, [r1, #0]
    88f4:	4808      	ldr	r0, [pc, #32]	; (8918 <nrfx_usbd_feeder_flash_zlp+0x38>)
    88f6:	f003 f9e6 	bl	bcc6 <memcpy>
        p_next->p_data.tx = p_buffer;
    88fa:	4b07      	ldr	r3, [pc, #28]	; (8918 <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
    88fc:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
    8900:	686b      	ldr	r3, [r5, #4]
    8902:	1b1b      	subs	r3, r3, r4
    8904:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    8906:	682b      	ldr	r3, [r5, #0]
    8908:	4423      	add	r3, r4
}
    890a:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    890c:	602b      	str	r3, [r5, #0]
}
    890e:	bf18      	it	ne
    8910:	2001      	movne	r0, #1
    8912:	bd70      	pop	{r4, r5, r6, pc}
    8914:	4613      	mov	r3, r2
    8916:	e7f1      	b.n	88fc <nrfx_usbd_feeder_flash_zlp+0x1c>
    8918:	20001820 	.word	0x20001820

0000891c <ev_sof_handler>:
{
    891c:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    891e:	2300      	movs	r3, #0
    8920:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    8924:	4b0b      	ldr	r3, [pc, #44]	; (8954 <ev_sof_handler+0x38>)
    8926:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    892a:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    892e:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    8932:	4a09      	ldr	r2, [pc, #36]	; (8958 <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    8934:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
    8936:	6813      	ldr	r3, [r2, #0]
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    8938:	bf14      	ite	ne
    893a:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    893e:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
    8942:	430b      	orrs	r3, r1
    8944:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    8946:	4b05      	ldr	r3, [pc, #20]	; (895c <ev_sof_handler+0x40>)
    8948:	a801      	add	r0, sp, #4
    894a:	681b      	ldr	r3, [r3, #0]
    894c:	4798      	blx	r3
}
    894e:	b003      	add	sp, #12
    8950:	f85d fb04 	ldr.w	pc, [sp], #4
    8954:	40027000 	.word	0x40027000
    8958:	20001a5c 	.word	0x20001a5c
    895c:	20001a60 	.word	0x20001a60

00008960 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8960:	4b06      	ldr	r3, [pc, #24]	; (897c <atomic_and.constprop.0.isra.0+0x1c>)
    8962:	f3bf 8f5b 	dmb	ish
    8966:	e853 1f00 	ldrex	r1, [r3]
    896a:	4001      	ands	r1, r0
    896c:	e843 1200 	strex	r2, r1, [r3]
    8970:	2a00      	cmp	r2, #0
    8972:	d1f8      	bne.n	8966 <atomic_and.constprop.0.isra.0+0x6>
    8974:	f3bf 8f5b 	dmb	ish
}
    8978:	4770      	bx	lr
    897a:	bf00      	nop
    897c:	20001a58 	.word	0x20001a58

00008980 <nrf_usbd_epin_dma_handler>:
{
    8980:	b508      	push	{r3, lr}
    m_dma_pending = false;
    8982:	4b0c      	ldr	r3, [pc, #48]	; (89b4 <nrf_usbd_epin_dma_handler+0x34>)
    8984:	2200      	movs	r2, #0
    8986:	701a      	strb	r2, [r3, #0]
{
    8988:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    898a:	f7ff feef 	bl	876c <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    898e:	7b83      	ldrb	r3, [r0, #14]
    8990:	2b03      	cmp	r3, #3
    8992:	d10a      	bne.n	89aa <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8994:	4608      	mov	r0, r1
    8996:	f003 fdf9 	bl	c58c <ep2bit>
    899a:	2301      	movs	r3, #1
    899c:	fa03 f000 	lsl.w	r0, r3, r0
    89a0:	43c0      	mvns	r0, r0
}
    89a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    89a6:	f7ff bfdb 	b.w	8960 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    89aa:	6803      	ldr	r3, [r0, #0]
    89ac:	2b00      	cmp	r3, #0
    89ae:	d0f1      	beq.n	8994 <nrf_usbd_epin_dma_handler+0x14>
}
    89b0:	bd08      	pop	{r3, pc}
    89b2:	bf00      	nop
    89b4:	20001b8a 	.word	0x20001b8a

000089b8 <nrf_usbd_ep0in_dma_handler>:
    m_dma_pending = false;
    89b8:	4b08      	ldr	r3, [pc, #32]	; (89dc <nrf_usbd_ep0in_dma_handler+0x24>)
    89ba:	2200      	movs	r2, #0
    89bc:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    89be:	4b08      	ldr	r3, [pc, #32]	; (89e0 <nrf_usbd_ep0in_dma_handler+0x28>)
    89c0:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    89c4:	2a03      	cmp	r2, #3
    89c6:	d103      	bne.n	89d0 <nrf_usbd_ep0in_dma_handler+0x18>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    89c8:	f06f 0001 	mvn.w	r0, #1
    89cc:	f7ff bfc8 	b.w	8960 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    89d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    89d4:	2b00      	cmp	r3, #0
    89d6:	d0f7      	beq.n	89c8 <nrf_usbd_ep0in_dma_handler+0x10>
}
    89d8:	4770      	bx	lr
    89da:	bf00      	nop
    89dc:	20001b8a 	.word	0x20001b8a
    89e0:	20001938 	.word	0x20001938

000089e4 <usbd_ep_data_handler>:
{
    89e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    89e6:	2201      	movs	r2, #1
    89e8:	fa02 f501 	lsl.w	r5, r2, r1
    89ec:	491c      	ldr	r1, [pc, #112]	; (8a60 <usbd_ep_data_handler+0x7c>)
    89ee:	4e1d      	ldr	r6, [pc, #116]	; (8a64 <usbd_ep_data_handler+0x80>)
    89f0:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    89f2:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    89f6:	ea43 0305 	orr.w	r3, r3, r5
{
    89fa:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    89fc:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    89fe:	d024      	beq.n	8a4a <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    8a00:	f000 020f 	and.w	r2, r0, #15
    8a04:	4b18      	ldr	r3, [pc, #96]	; (8a68 <usbd_ep_data_handler+0x84>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8a06:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    8a0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8a0e:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8a12:	681a      	ldr	r2, [r3, #0]
    if (ret)
    8a14:	b132      	cbz	r2, 8a24 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    8a16:	2200      	movs	r2, #0
    8a18:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    8a1a:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    8a1c:	681b      	ldr	r3, [r3, #0]
    8a1e:	d011      	beq.n	8a44 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    8a20:	f7ff ffae 	bl	8980 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    8a24:	6833      	ldr	r3, [r6, #0]
    8a26:	402b      	ands	r3, r5
    8a28:	d10a      	bne.n	8a40 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8a2a:	2206      	movs	r2, #6
    8a2c:	f88d 2004 	strb.w	r2, [sp, #4]
    8a30:	f88d 4006 	strb.w	r4, [sp, #6]
    8a34:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    8a38:	4b0c      	ldr	r3, [pc, #48]	; (8a6c <usbd_ep_data_handler+0x88>)
    8a3a:	a801      	add	r0, sp, #4
    8a3c:	681b      	ldr	r3, [r3, #0]
    8a3e:	4798      	blx	r3
}
    8a40:	b002      	add	sp, #8
    8a42:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    8a44:	f7ff ffb8 	bl	89b8 <nrf_usbd_ep0in_dma_handler>
    8a48:	e7ec      	b.n	8a24 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    8a4a:	6833      	ldr	r3, [r6, #0]
    8a4c:	421d      	tst	r5, r3
    8a4e:	d1f7      	bne.n	8a40 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    8a50:	2306      	movs	r3, #6
    8a52:	f88d 3004 	strb.w	r3, [sp, #4]
    8a56:	f88d 0006 	strb.w	r0, [sp, #6]
    8a5a:	f88d 2007 	strb.w	r2, [sp, #7]
    8a5e:	e7eb      	b.n	8a38 <usbd_ep_data_handler+0x54>
    8a60:	20001a5c 	.word	0x20001a5c
    8a64:	20001a58 	.word	0x20001a58
    8a68:	0000d396 	.word	0x0000d396
    8a6c:	20001a60 	.word	0x20001a60

00008a70 <ev_setup_data_handler>:
{
    8a70:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    8a72:	4b05      	ldr	r3, [pc, #20]	; (8a88 <ev_setup_data_handler+0x18>)
    8a74:	781a      	ldrb	r2, [r3, #0]
    8a76:	4610      	mov	r0, r2
    8a78:	f003 fd88 	bl	c58c <ep2bit>
}
    8a7c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    8a80:	4601      	mov	r1, r0
    8a82:	4610      	mov	r0, r2
    8a84:	f7ff bfae 	b.w	89e4 <usbd_ep_data_handler>
    8a88:	20001b8b 	.word	0x20001b8b

00008a8c <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    8a8c:	b507      	push	{r0, r1, r2, lr}
    m_dma_pending = false;
    8a8e:	4b0e      	ldr	r3, [pc, #56]	; (8ac8 <ev_dma_epout8_handler+0x3c>)
    8a90:	2200      	movs	r2, #0
    8a92:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8a94:	4b0d      	ldr	r3, [pc, #52]	; (8acc <ev_dma_epout8_handler+0x40>)
    8a96:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    8a9a:	2a03      	cmp	r2, #3
    8a9c:	d010      	beq.n	8ac0 <ev_dma_epout8_handler+0x34>
    else if (p_state->handler.consumer == NULL)
    8a9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    8aa2:	b96b      	cbnz	r3, 8ac0 <ev_dma_epout8_handler+0x34>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8aa4:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    8aa8:	f7ff ff5a 	bl	8960 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8aac:	2306      	movs	r3, #6
    8aae:	f88d 3004 	strb.w	r3, [sp, #4]
    8ab2:	2308      	movs	r3, #8
    8ab4:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    8ab8:	4b05      	ldr	r3, [pc, #20]	; (8ad0 <ev_dma_epout8_handler+0x44>)
    8aba:	a801      	add	r0, sp, #4
    8abc:	681b      	ldr	r3, [r3, #0]
    8abe:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    8ac0:	b003      	add	sp, #12
    8ac2:	f85d fb04 	ldr.w	pc, [sp], #4
    8ac6:	bf00      	nop
    8ac8:	20001b8a 	.word	0x20001b8a
    8acc:	20001938 	.word	0x20001938
    8ad0:	20001a60 	.word	0x20001a60

00008ad4 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    8ad4:	b507      	push	{r0, r1, r2, lr}
    m_dma_pending = false;
    8ad6:	4b11      	ldr	r3, [pc, #68]	; (8b1c <ev_dma_epin8_handler+0x48>)
    8ad8:	2200      	movs	r2, #0
    8ada:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8adc:	4b10      	ldr	r3, [pc, #64]	; (8b20 <ev_dma_epin8_handler+0x4c>)
    8ade:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    8ae2:	2a03      	cmp	r2, #3
    8ae4:	d106      	bne.n	8af4 <ev_dma_epin8_handler+0x20>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8ae6:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    8aea:	b003      	add	sp, #12
    8aec:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8af0:	f7ff bf36 	b.w	8960 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    8af4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    8af8:	b96b      	cbnz	r3, 8b16 <ev_dma_epin8_handler+0x42>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8afa:	f46f 7080 	mvn.w	r0, #256	; 0x100
    8afe:	f7ff ff2f 	bl	8960 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8b02:	2306      	movs	r3, #6
    8b04:	f88d 3004 	strb.w	r3, [sp, #4]
    8b08:	2388      	movs	r3, #136	; 0x88
    8b0a:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    8b0e:	4b05      	ldr	r3, [pc, #20]	; (8b24 <ev_dma_epin8_handler+0x50>)
    8b10:	a801      	add	r0, sp, #4
    8b12:	681b      	ldr	r3, [r3, #0]
    8b14:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    8b16:	b003      	add	sp, #12
    8b18:	f85d fb04 	ldr.w	pc, [sp], #4
    8b1c:	20001b8a 	.word	0x20001b8a
    8b20:	20001938 	.word	0x20001938
    8b24:	20001a60 	.word	0x20001a60

00008b28 <usbd_enable>:

/**
 * @brief Enable USBD peripheral.
 */
static void usbd_enable(void)
{
    8b28:	b508      	push	{r3, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8b2a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x10)
    8b2e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    8b32:	2b10      	cmp	r3, #16
    8b34:	d101      	bne.n	8b3a <usbd_enable+0x12>
    if (nrfx_usbd_errata_187())
    {
        usbd_errata_187_211_begin();
    8b36:	f7ff fe77 	bl	8828 <usbd_errata_187_211_begin>
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    8b3a:	4b0d      	ldr	r3, [pc, #52]	; (8b70 <usbd_enable+0x48>)
    8b3c:	2201      	movs	r2, #1
    8b3e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    8b42:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    8b46:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    8b4a:	0512      	lsls	r2, r2, #20
    8b4c:	d5fb      	bpl.n	8b46 <usbd_enable+0x1e>
    p_reg->EVENTCAUSE = flags;
    8b4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    8b52:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    8b56:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8b5a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x10)
    8b5e:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    8b62:	2b10      	cmp	r3, #16
    8b64:	d103      	bne.n	8b6e <usbd_enable+0x46>

    if (nrfx_usbd_errata_187())
    {
        usbd_errata_187_211_end();
    }
}
    8b66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
    8b6a:	f7ff be7d 	b.w	8868 <usbd_errata_187_211_end>
}
    8b6e:	bd08      	pop	{r3, pc}
    8b70:	40027000 	.word	0x40027000

00008b74 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    8b74:	4a02      	ldr	r2, [pc, #8]	; (8b80 <nrfx_usbd_uninit+0xc>)
    8b76:	2300      	movs	r3, #0
    8b78:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    8b7a:	4a02      	ldr	r2, [pc, #8]	; (8b84 <nrfx_usbd_uninit+0x10>)
    8b7c:	7013      	strb	r3, [r2, #0]
    return;
}
    8b7e:	4770      	bx	lr
    8b80:	20001a60 	.word	0x20001a60
    8b84:	20001b8d 	.word	0x20001b8d

00008b88 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    8b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    p_reg->EVENTCAUSE = flags;
    8b8a:	4c20      	ldr	r4, [pc, #128]	; (8c0c <nrfx_usbd_enable+0x84>)
    8b8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8b90:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    8b94:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    8b98:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD, NRF_USBD_EVENTCAUSE_READY_MASK);

    usbd_enable();
    8b9c:	f7ff ffc4 	bl	8b28 <usbd_enable>
            if (var1 == 0x10)
    8ba0:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
    8ba4:	2b10      	cmp	r3, #16
    8ba6:	d104      	bne.n	8bb2 <nrfx_usbd_enable+0x2a>

    if (nrfx_usbd_errata_223() && m_first_enable)
    8ba8:	4e19      	ldr	r6, [pc, #100]	; (8c10 <nrfx_usbd_enable+0x88>)
    8baa:	7833      	ldrb	r3, [r6, #0]
    8bac:	b9fb      	cbnz	r3, 8bee <nrfx_usbd_enable+0x66>
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
#endif
    {
        usbd_errata_187_211_begin();
    8bae:	f7ff fe3b 	bl	8828 <usbd_errata_187_211_begin>
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    8bb2:	4a16      	ldr	r2, [pc, #88]	; (8c0c <nrfx_usbd_enable+0x84>)
    8bb4:	2380      	movs	r3, #128	; 0x80
    8bb6:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    8bba:	2300      	movs	r3, #0
    8bbc:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    8bc0:	4a14      	ldr	r2, [pc, #80]	; (8c14 <nrfx_usbd_enable+0x8c>)
    8bc2:	f240 11ff 	movw	r1, #511	; 0x1ff
    8bc6:	6011      	str	r1, [r2, #0]
    m_ep_dma_waiting = 0;
    8bc8:	4a13      	ldr	r2, [pc, #76]	; (8c18 <nrfx_usbd_enable+0x90>)
    8bca:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    8bcc:	4a13      	ldr	r2, [pc, #76]	; (8c1c <nrfx_usbd_enable+0x94>)
    8bce:	7013      	strb	r3, [r2, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    8bd0:	4a13      	ldr	r2, [pc, #76]	; (8c20 <nrfx_usbd_enable+0x98>)
    8bd2:	7013      	strb	r3, [r2, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    8bd4:	4b13      	ldr	r3, [pc, #76]	; (8c24 <nrfx_usbd_enable+0x9c>)
    8bd6:	2202      	movs	r2, #2
    8bd8:	701a      	strb	r2, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8bda:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x10)
    8bde:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    8be2:	2b10      	cmp	r3, #16
    8be4:	d110      	bne.n	8c08 <nrfx_usbd_enable+0x80>
    if (nrfx_usbd_errata_187())
#endif
    {
        usbd_errata_187_211_end();
    }
}
    8be6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        usbd_errata_187_211_end();
    8bea:	f7ff be3d 	b.w	8868 <usbd_errata_187_211_end>
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    8bee:	2700      	movs	r7, #0
    8bf0:	f8c4 7500 	str.w	r7, [r4, #1280]	; 0x500
    (void) p_reg->ENABLE;
    8bf4:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
         usbd_enable();
    8bf8:	f7ff ff96 	bl	8b28 <usbd_enable>
         m_first_enable = false;
    8bfc:	7037      	strb	r7, [r6, #0]
    8bfe:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
    8c02:	2b10      	cmp	r3, #16
    8c04:	d1d5      	bne.n	8bb2 <nrfx_usbd_enable+0x2a>
    8c06:	e7d2      	b.n	8bae <nrfx_usbd_enable+0x26>
}
    8c08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8c0a:	bf00      	nop
    8c0c:	40027000 	.word	0x40027000
    8c10:	20000100 	.word	0x20000100
    8c14:	20001a5c 	.word	0x20001a5c
    8c18:	20001a58 	.word	0x20001a58
    8c1c:	20001b8a 	.word	0x20001b8a
    8c20:	20001b8b 	.word	0x20001b8b
    8c24:	20001b8d 	.word	0x20001b8d

00008c28 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    8c28:	4b0a      	ldr	r3, [pc, #40]	; (8c54 <nrfx_usbd_start+0x2c>)
    8c2a:	2200      	movs	r2, #0
{
    8c2c:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    8c2e:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
    8c30:	4a09      	ldr	r2, [pc, #36]	; (8c58 <nrfx_usbd_start+0x30>)
    8c32:	4b0a      	ldr	r3, [pc, #40]	; (8c5c <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    8c34:	4c0a      	ldr	r4, [pc, #40]	; (8c60 <nrfx_usbd_start+0x38>)
    8c36:	2800      	cmp	r0, #0
    8c38:	bf08      	it	eq
    8c3a:	4613      	moveq	r3, r2
    8c3c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    8c40:	2027      	movs	r0, #39	; 0x27
    8c42:	f7fa ffaf 	bl	3ba4 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    8c46:	2301      	movs	r3, #1
    8c48:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    8c4c:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    8c50:	bd10      	pop	{r4, pc}
    8c52:	bf00      	nop
    8c54:	20001b8c 	.word	0x20001b8c
    8c58:	01c01407 	.word	0x01c01407
    8c5c:	01e01407 	.word	0x01e01407
    8c60:	40027000 	.word	0x40027000

00008c64 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    8c64:	4b03      	ldr	r3, [pc, #12]	; (8c74 <nrfx_usbd_is_enabled+0x10>)
    8c66:	7818      	ldrb	r0, [r3, #0]
}
    8c68:	2801      	cmp	r0, #1
    8c6a:	bf94      	ite	ls
    8c6c:	2000      	movls	r0, #0
    8c6e:	2001      	movhi	r0, #1
    8c70:	4770      	bx	lr
    8c72:	bf00      	nop
    8c74:	20001b8d 	.word	0x20001b8d

00008c78 <nrfx_usbd_suspend>:
{
    return (nrfx_usbd_is_enabled() && NRFX_IRQ_IS_ENABLED(USBD_IRQn));
}

bool nrfx_usbd_suspend(void)
{
    8c78:	b510      	push	{r4, lr}
	__asm__ volatile(
    8c7a:	f04f 0340 	mov.w	r3, #64	; 0x40
    8c7e:	f3ef 8111 	mrs	r1, BASEPRI
    8c82:	f383 8812 	msr	BASEPRI_MAX, r3
    8c86:	f3bf 8f6f 	isb	sy
    bool suspended = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend)
    8c8a:	4b0f      	ldr	r3, [pc, #60]	; (8cc8 <nrfx_usbd_suspend+0x50>)
    8c8c:	781b      	ldrb	r3, [r3, #0]
    8c8e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    8c92:	b193      	cbz	r3, 8cba <nrfx_usbd_suspend+0x42>
    return p_reg->EVENTCAUSE;
    8c94:	4b0d      	ldr	r3, [pc, #52]	; (8ccc <nrfx_usbd_suspend+0x54>)
    8c96:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    {
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    8c9a:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    8c9e:	d10c      	bne.n	8cba <nrfx_usbd_suspend+0x42>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    8ca0:	2401      	movs	r4, #1
    8ca2:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    8ca6:	f8d3 452c 	ldr.w	r4, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    8caa:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
        {
            nrf_usbd_lowpower_enable(NRF_USBD);
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    8cae:	05a4      	lsls	r4, r4, #22
    8cb0:	d504      	bpl.n	8cbc <nrfx_usbd_suspend+0x44>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    8cb2:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    8cb6:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    8cba:	2000      	movs	r0, #0
	__asm__ volatile(
    8cbc:	f381 8811 	msr	BASEPRI, r1
    8cc0:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return suspended;
}
    8cc4:	bd10      	pop	{r4, pc}
    8cc6:	bf00      	nop
    8cc8:	20001b8c 	.word	0x20001b8c
    8ccc:	40027000 	.word	0x40027000

00008cd0 <nrfx_usbd_init>:
{
    8cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    8cd2:	4b1c      	ldr	r3, [pc, #112]	; (8d44 <nrfx_usbd_init+0x74>)
    8cd4:	781c      	ldrb	r4, [r3, #0]
    8cd6:	bb94      	cbnz	r4, 8d3e <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
    8cd8:	4a1b      	ldr	r2, [pc, #108]	; (8d48 <nrfx_usbd_init+0x78>)
    8cda:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    8cdc:	2201      	movs	r2, #1
    8cde:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8ce0:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    8ce4:	4626      	mov	r6, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    8ce6:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8cea:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    8cee:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8cf0:	bf14      	ite	ne
    8cf2:	4639      	movne	r1, r7
    8cf4:	2140      	moveq	r1, #64	; 0x40
    8cf6:	4628      	mov	r0, r5
    8cf8:	f003 fc68 	bl	c5cc <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    8cfc:	4628      	mov	r0, r5
    8cfe:	f7ff fd35 	bl	876c <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    8d02:	3401      	adds	r4, #1
    8d04:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    8d06:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
    8d08:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
    8d0a:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    8d0c:	d1eb      	bne.n	8ce6 <nrfx_usbd_init+0x16>
    8d0e:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8d10:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    8d14:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    8d16:	f014 0f08 	tst.w	r4, #8
    8d1a:	b2e6      	uxtb	r6, r4
    8d1c:	bf14      	ite	ne
    8d1e:	4639      	movne	r1, r7
    8d20:	2140      	moveq	r1, #64	; 0x40
    8d22:	4630      	mov	r0, r6
    8d24:	f003 fc52 	bl	c5cc <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    8d28:	4630      	mov	r0, r6
    8d2a:	f7ff fd1f 	bl	876c <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    8d2e:	3401      	adds	r4, #1
    8d30:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    8d32:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    8d34:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    8d36:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    8d38:	d1ed      	bne.n	8d16 <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
    8d3a:	4804      	ldr	r0, [pc, #16]	; (8d4c <nrfx_usbd_init+0x7c>)
}
    8d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
    8d3e:	4804      	ldr	r0, [pc, #16]	; (8d50 <nrfx_usbd_init+0x80>)
    8d40:	e7fc      	b.n	8d3c <nrfx_usbd_init+0x6c>
    8d42:	bf00      	nop
    8d44:	20001b8d 	.word	0x20001b8d
    8d48:	20001a60 	.word	0x20001a60
    8d4c:	0bad0000 	.word	0x0bad0000
    8d50:	0bad0005 	.word	0x0bad0005

00008d54 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    8d54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8d58:	4604      	mov	r4, r0
	__asm__ volatile(
    8d5a:	f04f 0340 	mov.w	r3, #64	; 0x40
    8d5e:	f3ef 8611 	mrs	r6, BASEPRI
    8d62:	f383 8812 	msr	BASEPRI_MAX, r3
    8d66:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    8d6a:	f010 090f 	ands.w	r9, r0, #15
    8d6e:	d103      	bne.n	8d78 <nrfx_usbd_ep_transfer+0x24>
    8d70:	4b27      	ldr	r3, [pc, #156]	; (8e10 <nrfx_usbd_ep_transfer+0xbc>)
    8d72:	781b      	ldrb	r3, [r3, #0]
    8d74:	4283      	cmp	r3, r0
    8d76:	d147      	bne.n	8e08 <nrfx_usbd_ep_transfer+0xb4>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    8d78:	4b26      	ldr	r3, [pc, #152]	; (8e14 <nrfx_usbd_ep_transfer+0xc0>)
    8d7a:	4f27      	ldr	r7, [pc, #156]	; (8e18 <nrfx_usbd_ep_transfer+0xc4>)
    8d7c:	681a      	ldr	r2, [r3, #0]
    8d7e:	683b      	ldr	r3, [r7, #0]
    8d80:	43d2      	mvns	r2, r2
    8d82:	b292      	uxth	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
    8d84:	4620      	mov	r0, r4
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    8d86:	431a      	orrs	r2, r3
    const uint8_t ep_bitpos = ep2bit(ep);
    8d88:	f003 fc00 	bl	c58c <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    8d8c:	f04f 0801 	mov.w	r8, #1
    8d90:	fa08 f800 	lsl.w	r8, r8, r0
    8d94:	ea12 0f08 	tst.w	r2, r8
    8d98:	d138      	bne.n	8e0c <nrfx_usbd_ep_transfer+0xb8>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    8d9a:	4620      	mov	r0, r4
    8d9c:	f7ff fce6 	bl	876c <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    8da0:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
    8da2:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    8da4:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    8da6:	fb03 f309 	mul.w	r3, r3, r9
        if (NRF_USBD_EPIN_CHECK(ep))
    8daa:	d529      	bpl.n	8e00 <nrfx_usbd_ep_transfer+0xac>
    8dac:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8dae:	6888      	ldr	r0, [r1, #8]
    8db0:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    8db4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8db8:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    8dbc:	d11d      	bne.n	8dfa <nrfx_usbd_ep_transfer+0xa6>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8dbe:	4a17      	ldr	r2, [pc, #92]	; (8e1c <nrfx_usbd_ep_transfer+0xc8>)
    8dc0:	4c17      	ldr	r4, [pc, #92]	; (8e20 <nrfx_usbd_ep_transfer+0xcc>)
    8dc2:	2800      	cmp	r0, #0
    8dc4:	bf08      	it	eq
    8dc6:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    8dc8:	4816      	ldr	r0, [pc, #88]	; (8e24 <nrfx_usbd_ep_transfer+0xd0>)
    8dca:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    8dcc:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
    8dce:	c907      	ldmia	r1, {r0, r1, r2}
    8dd0:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    8dd4:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
    8dd6:	2300      	movs	r3, #0
    8dd8:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    8dda:	73ab      	strb	r3, [r5, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    8ddc:	683b      	ldr	r3, [r7, #0]
        ret = NRFX_SUCCESS;
    8dde:	4812      	ldr	r0, [pc, #72]	; (8e28 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    8de0:	ea43 0308 	orr.w	r3, r3, r8
    8de4:	603b      	str	r3, [r7, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8de6:	4b11      	ldr	r3, [pc, #68]	; (8e2c <nrfx_usbd_ep_transfer+0xd8>)
    8de8:	2280      	movs	r2, #128	; 0x80
    8dea:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    8dee:	f386 8811 	msr	BASEPRI, r6
    8df2:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    8df6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    8dfa:	4a0d      	ldr	r2, [pc, #52]	; (8e30 <nrfx_usbd_ep_transfer+0xdc>)
    8dfc:	4c0d      	ldr	r4, [pc, #52]	; (8e34 <nrfx_usbd_ep_transfer+0xe0>)
    8dfe:	e7e0      	b.n	8dc2 <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    8e00:	4a0d      	ldr	r2, [pc, #52]	; (8e38 <nrfx_usbd_ep_transfer+0xe4>)
    8e02:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    8e04:	4a0d      	ldr	r2, [pc, #52]	; (8e3c <nrfx_usbd_ep_transfer+0xe8>)
    8e06:	e7e1      	b.n	8dcc <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
    8e08:	480d      	ldr	r0, [pc, #52]	; (8e40 <nrfx_usbd_ep_transfer+0xec>)
    8e0a:	e7f0      	b.n	8dee <nrfx_usbd_ep_transfer+0x9a>
        ret = NRFX_ERROR_BUSY;
    8e0c:	480d      	ldr	r0, [pc, #52]	; (8e44 <nrfx_usbd_ep_transfer+0xf0>)
    8e0e:	e7ee      	b.n	8dee <nrfx_usbd_ep_transfer+0x9a>
    8e10:	20001b8b 	.word	0x20001b8b
    8e14:	20001a5c 	.word	0x20001a5c
    8e18:	20001a58 	.word	0x20001a58
    8e1c:	0000c565 	.word	0x0000c565
    8e20:	0000c543 	.word	0x0000c543
    8e24:	200018cc 	.word	0x200018cc
    8e28:	0bad0000 	.word	0x0bad0000
    8e2c:	e000e100 	.word	0xe000e100
    8e30:	000088e1 	.word	0x000088e1
    8e34:	000088a9 	.word	0x000088a9
    8e38:	20001860 	.word	0x20001860
    8e3c:	0000c511 	.word	0x0000c511
    8e40:	0bad000a 	.word	0x0bad000a
    8e44:	0bad000b 	.word	0x0bad000b

00008e48 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    8e48:	f010 0f08 	tst.w	r0, #8
    8e4c:	4b07      	ldr	r3, [pc, #28]	; (8e6c <nrfx_usbd_epout_size_get+0x24>)
    8e4e:	d006      	beq.n	8e5e <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    8e50:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    8e54:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    8e58:	bf18      	it	ne
    8e5a:	2000      	movne	r0, #0
    8e5c:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    8e5e:	f000 000f 	and.w	r0, r0, #15
    8e62:	f500 7094 	add.w	r0, r0, #296	; 0x128
    8e66:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    8e6a:	4770      	bx	lr
    8e6c:	40027000 	.word	0x40027000

00008e70 <usbd_dmareq_process>:
{
    8e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    8e74:	4e54      	ldr	r6, [pc, #336]	; (8fc8 <usbd_dmareq_process+0x158>)
    8e76:	7833      	ldrb	r3, [r6, #0]
{
    8e78:	b085      	sub	sp, #20
    if (!m_dma_pending)
    8e7a:	2b00      	cmp	r3, #0
    8e7c:	d169      	bne.n	8f52 <usbd_dmareq_process+0xe2>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    8e7e:	f8df 814c 	ldr.w	r8, [pc, #332]	; 8fcc <usbd_dmareq_process+0x15c>
    8e82:	4d53      	ldr	r5, [pc, #332]	; (8fd0 <usbd_dmareq_process+0x160>)
    8e84:	f8d8 4000 	ldr.w	r4, [r8]
    8e88:	682b      	ldr	r3, [r5, #0]
    8e8a:	401c      	ands	r4, r3
    8e8c:	d061      	beq.n	8f52 <usbd_dmareq_process+0xe2>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    8e8e:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
    8e92:	bf14      	ite	ne
    8e94:	fa93 f4a3 	rbitne	r4, r3
    8e98:	fa94 f4a4 	rbiteq	r4, r4
    8e9c:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8ea0:	f04f 0901 	mov.w	r9, #1
    8ea4:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8ea8:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8eaa:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8eae:	d953      	bls.n	8f58 <usbd_dmareq_process+0xe8>
    8eb0:	3c10      	subs	r4, #16
    8eb2:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    8eb4:	4620      	mov	r0, r4
    8eb6:	f7ff fc59 	bl	876c <ep_state_access>
    8eba:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    8ebc:	4620      	mov	r0, r4
    8ebe:	f7ff ffc3 	bl	8e48 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    8ec2:	f8da 7000 	ldr.w	r7, [sl]
    8ec6:	f8ba 200c 	ldrh.w	r2, [sl, #12]
    8eca:	f8da 1004 	ldr.w	r1, [sl, #4]
    8ece:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    8ed0:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
    8ed2:	a802      	add	r0, sp, #8
    8ed4:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
    8ed6:	9b02      	ldr	r3, [sp, #8]
    8ed8:	2b00      	cmp	r3, #0
    8eda:	d149      	bne.n	8f70 <usbd_dmareq_process+0x100>
                if (!continue_transfer)
    8edc:	b908      	cbnz	r0, 8ee2 <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
    8ede:	f8ca 0000 	str.w	r0, [sl]
    m_dma_pending = true;
    8ee2:	2301      	movs	r3, #1
    8ee4:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
    8ee6:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    8ee8:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    8eea:	9802      	ldr	r0, [sp, #8]
            m_ep_ready &= ~(1U << pos);
    8eec:	ea03 0309 	and.w	r3, r3, r9
    8ef0:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    8ef2:	f8da 3008 	ldr.w	r3, [sl, #8]
            if (NRF_USBD_EPIN_CHECK(ep))
    8ef6:	b261      	sxtb	r1, r4
            p_state->transfer_cnt += transfer.size;
    8ef8:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
    8efa:	2900      	cmp	r1, #0
    8efc:	f8ca 3008 	str.w	r3, [sl, #8]
    8f00:	f004 0508 	and.w	r5, r4, #8
    8f04:	4b33      	ldr	r3, [pc, #204]	; (8fd4 <usbd_dmareq_process+0x164>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    8f06:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    8f0a:	da4e      	bge.n	8faa <usbd_dmareq_process+0x13a>
        if (NRF_USBD_EPISO_CHECK(ep))
    8f0c:	2d00      	cmp	r5, #0
    8f0e:	d044      	beq.n	8f9a <usbd_dmareq_process+0x12a>
            p_reg->ISOIN.PTR    = ptr;
    8f10:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    8f14:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    8f18:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8f1a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    8f1e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8f22:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8f26:	2201      	movs	r2, #1
    8f28:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8f2a:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    8f2c:	4a2a      	ldr	r2, [pc, #168]	; (8fd8 <usbd_dmareq_process+0x168>)
    8f2e:	4b2b      	ldr	r3, [pc, #172]	; (8fdc <usbd_dmareq_process+0x16c>)
    8f30:	ea13 0321 	ands.w	r3, r3, r1, asr #32
    8f34:	bf38      	it	cc
    8f36:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8f38:	4926      	ldr	r1, [pc, #152]	; (8fd4 <usbd_dmareq_process+0x164>)
    8f3a:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    8f3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8f42:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8f46:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    8f48:	b91a      	cbnz	r2, 8f52 <usbd_dmareq_process+0xe2>
    8f4a:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    8f4e:	2a00      	cmp	r2, #0
    8f50:	d0f9      	beq.n	8f46 <usbd_dmareq_process+0xd6>
}
    8f52:	b005      	add	sp, #20
    8f54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8f58:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
    8f5c:	4620      	mov	r0, r4
    8f5e:	f7ff fc05 	bl	876c <ep_state_access>
                continue_transfer = p_state->handler.feeder(
    8f62:	6803      	ldr	r3, [r0, #0]
    8f64:	8982      	ldrh	r2, [r0, #12]
    8f66:	6841      	ldr	r1, [r0, #4]
            usbd_ep_state_t * p_state = ep_state_access(ep);
    8f68:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
    8f6a:	a802      	add	r0, sp, #8
    8f6c:	4798      	blx	r3
    8f6e:	e7b5      	b.n	8edc <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
    8f70:	9b03      	ldr	r3, [sp, #12]
    8f72:	459b      	cmp	fp, r3
    8f74:	d9b2      	bls.n	8edc <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    8f76:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8f78:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    8f7a:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    8f7e:	f7ff fcef 	bl	8960 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    8f82:	2306      	movs	r3, #6
    8f84:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    8f88:	4b15      	ldr	r3, [pc, #84]	; (8fe0 <usbd_dmareq_process+0x170>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    8f8a:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    8f8e:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    8f90:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    8f94:	a801      	add	r0, sp, #4
    8f96:	4798      	blx	r3
                    continue;
    8f98:	e774      	b.n	8e84 <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
    8f9a:	2514      	movs	r5, #20
    8f9c:	fb05 3304 	mla	r3, r5, r4, r3
    8fa0:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    8fa4:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
    8fa8:	e7b6      	b.n	8f18 <usbd_dmareq_process+0xa8>
        if (NRF_USBD_EPISO_CHECK(ep))
    8faa:	b12d      	cbz	r5, 8fb8 <usbd_dmareq_process+0x148>
            p_reg->ISOOUT.PTR    = ptr;
    8fac:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    8fb0:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    8fb4:	2328      	movs	r3, #40	; 0x28
    8fb6:	e7b0      	b.n	8f1a <usbd_dmareq_process+0xaa>
            p_reg->EPOUT[epnr].PTR    = ptr;
    8fb8:	2514      	movs	r5, #20
    8fba:	fb05 3304 	mla	r3, r5, r4, r3
    8fbe:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    8fc2:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    8fc6:	e7f5      	b.n	8fb4 <usbd_dmareq_process+0x144>
    8fc8:	20001b8a 	.word	0x20001b8a
    8fcc:	20001a58 	.word	0x20001a58
    8fd0:	20001a5c 	.word	0x20001a5c
    8fd4:	40027000 	.word	0x40027000
    8fd8:	0000d384 	.word	0x0000d384
    8fdc:	0000d396 	.word	0x0000d396
    8fe0:	20001a60 	.word	0x20001a60

00008fe4 <ev_epdata_handler>:
{
    8fe4:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    8fe6:	4b0f      	ldr	r3, [pc, #60]	; (9024 <ev_epdata_handler+0x40>)
    8fe8:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    8fec:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    8ff0:	2501      	movs	r5, #1
    while (dataepstatus)
    8ff2:	b91c      	cbnz	r4, 8ffc <ev_epdata_handler+0x18>
}
    8ff4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    8ff8:	f7ff bf3a 	b.w	8e70 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    8ffc:	fa94 f3a4 	rbit	r3, r4
    9000:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9004:	2b0f      	cmp	r3, #15
    9006:	bfc8      	it	gt
    9008:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    900c:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    900e:	bfd4      	ite	le
    9010:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    9014:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    9016:	fa05 f303 	lsl.w	r3, r5, r3
    901a:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    901e:	f7ff fce1 	bl	89e4 <usbd_ep_data_handler>
    9022:	e7e6      	b.n	8ff2 <ev_epdata_handler+0xe>
    9024:	40027000 	.word	0x40027000

00009028 <nrf_usbd_epout_dma_handler>:
    m_dma_pending = false;
    9028:	4b17      	ldr	r3, [pc, #92]	; (9088 <nrf_usbd_epout_dma_handler+0x60>)
{
    902a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    m_dma_pending = false;
    902c:	2200      	movs	r2, #0
    902e:	701a      	strb	r2, [r3, #0]
{
    9030:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    9032:	f7ff fb9b 	bl	876c <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9036:	7b83      	ldrb	r3, [r0, #14]
    9038:	2b03      	cmp	r3, #3
    903a:	d10d      	bne.n	9058 <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    903c:	4620      	mov	r0, r4
    903e:	f003 faa5 	bl	c58c <ep2bit>
    9042:	2301      	movs	r3, #1
    9044:	fa03 f000 	lsl.w	r0, r3, r0
    9048:	43c0      	mvns	r0, r0
    904a:	f7ff fc89 	bl	8960 <atomic_and.constprop.0.isra.0>
}
    904e:	b003      	add	sp, #12
    9050:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    9054:	f7ff bf0c 	b.w	8e70 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    9058:	6805      	ldr	r5, [r0, #0]
    905a:	2d00      	cmp	r5, #0
    905c:	d1f7      	bne.n	904e <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    905e:	4620      	mov	r0, r4
    9060:	f003 fa94 	bl	c58c <ep2bit>
    9064:	2301      	movs	r3, #1
    9066:	fa03 f000 	lsl.w	r0, r3, r0
    906a:	43c0      	mvns	r0, r0
    906c:	f7ff fc78 	bl	8960 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9070:	2306      	movs	r3, #6
    9072:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    9076:	4b05      	ldr	r3, [pc, #20]	; (908c <nrf_usbd_epout_dma_handler+0x64>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9078:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    907c:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    907e:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    9082:	a801      	add	r0, sp, #4
    9084:	4798      	blx	r3
    9086:	e7e2      	b.n	904e <nrf_usbd_epout_dma_handler+0x26>
    9088:	20001b8a 	.word	0x20001b8a
    908c:	20001a60 	.word	0x20001a60

00009090 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    9090:	4b02      	ldr	r3, [pc, #8]	; (909c <nrfx_usbd_ep_stall+0xc>)
    9092:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    9096:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    909a:	4770      	bx	lr
    909c:	40027000 	.word	0x40027000

000090a0 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    90a0:	0702      	lsls	r2, r0, #28
    90a2:	d413      	bmi.n	90cc <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    90a4:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    90a8:	f010 0f80 	tst.w	r0, #128	; 0x80
    90ac:	4a08      	ldr	r2, [pc, #32]	; (90d0 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    90ae:	bf0b      	itete	eq
    90b0:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    90b4:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    90b8:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    90bc:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    90c0:	bf08      	it	eq
    90c2:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    90c4:	1e43      	subs	r3, r0, #1
    90c6:	4258      	negs	r0, r3
    90c8:	4158      	adcs	r0, r3
    90ca:	4770      	bx	lr
        return false;
    90cc:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    90ce:	4770      	bx	lr
    90d0:	40027000 	.word	0x40027000

000090d4 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    90d4:	4b04      	ldr	r3, [pc, #16]	; (90e8 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    90d6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    90da:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    90de:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    90e2:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    90e6:	4770      	bx	lr
    90e8:	40027000 	.word	0x40027000

000090ec <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    90ec:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    90ee:	2208      	movs	r2, #8
    90f0:	2100      	movs	r1, #0
{
    90f2:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    90f4:	f002 fdf2 	bl	bcdc <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    90f8:	4b0e      	ldr	r3, [pc, #56]	; (9134 <nrfx_usbd_setup_get+0x48>)
    90fa:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    90fe:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    9100:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    9104:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    9106:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    910a:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    910e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    9112:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    9114:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    9118:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    911c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    9120:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    9122:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    9126:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    912a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    912e:	80e3      	strh	r3, [r4, #6]
}
    9130:	bd10      	pop	{r4, pc}
    9132:	bf00      	nop
    9134:	40027000 	.word	0x40027000

00009138 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9138:	4b02      	ldr	r3, [pc, #8]	; (9144 <nrfx_usbd_setup_data_clear+0xc>)
    913a:	2201      	movs	r2, #1
    913c:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    913e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    9140:	4770      	bx	lr
    9142:	bf00      	nop
    9144:	40027000 	.word	0x40027000

00009148 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    9148:	b513      	push	{r0, r1, r4, lr}
    m_dma_pending = false;
    914a:	4b12      	ldr	r3, [pc, #72]	; (9194 <ev_dma_epout0_handler+0x4c>)
    914c:	2200      	movs	r2, #0
    914e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9150:	4b11      	ldr	r3, [pc, #68]	; (9198 <ev_dma_epout0_handler+0x50>)
    9152:	7b9a      	ldrb	r2, [r3, #14]
    9154:	2a03      	cmp	r2, #3
    9156:	d106      	bne.n	9166 <ev_dma_epout0_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9158:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    915c:	b002      	add	sp, #8
    915e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9162:	f7ff bbfd 	b.w	8960 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    9166:	681c      	ldr	r4, [r3, #0]
    9168:	b974      	cbnz	r4, 9188 <ev_dma_epout0_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    916a:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    916e:	f7ff fbf7 	bl	8960 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9172:	2306      	movs	r3, #6
    9174:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    9178:	4b08      	ldr	r3, [pc, #32]	; (919c <ev_dma_epout0_handler+0x54>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    917a:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    917e:	681b      	ldr	r3, [r3, #0]
    9180:	a801      	add	r0, sp, #4
    9182:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    9184:	b002      	add	sp, #8
    9186:	bd10      	pop	{r4, pc}
    9188:	b002      	add	sp, #8
    918a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    918e:	f7ff bfd3 	b.w	9138 <nrfx_usbd_setup_data_clear>
    9192:	bf00      	nop
    9194:	20001b8a 	.word	0x20001b8a
    9198:	20001938 	.word	0x20001938
    919c:	20001a60 	.word	0x20001a60

000091a0 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    91a0:	4b02      	ldr	r3, [pc, #8]	; (91ac <nrfx_usbd_setup_clear+0xc>)
    91a2:	2201      	movs	r2, #1
    91a4:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    91a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    91a8:	4770      	bx	lr
    91aa:	bf00      	nop
    91ac:	40027000 	.word	0x40027000

000091b0 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    91b0:	4b02      	ldr	r3, [pc, #8]	; (91bc <nrfx_usbd_setup_stall+0xc>)
    91b2:	2201      	movs	r2, #1
    91b4:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    91b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    91b8:	4770      	bx	lr
    91ba:	bf00      	nop
    91bc:	40027000 	.word	0x40027000

000091c0 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    91c0:	4b01      	ldr	r3, [pc, #4]	; (91c8 <nrfx_usbd_last_setup_dir_get+0x8>)
    91c2:	7818      	ldrb	r0, [r3, #0]
    91c4:	4770      	bx	lr
    91c6:	bf00      	nop
    91c8:	20001b8b 	.word	0x20001b8b

000091cc <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    91cc:	b510      	push	{r4, lr}
    91ce:	4602      	mov	r2, r0
	__asm__ volatile(
    91d0:	f04f 0340 	mov.w	r3, #64	; 0x40
    91d4:	f3ef 8411 	mrs	r4, BASEPRI
    91d8:	f383 8812 	msr	BASEPRI_MAX, r3
    91dc:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    91e0:	f003 f9d4 	bl	c58c <ep2bit>
    91e4:	490d      	ldr	r1, [pc, #52]	; (921c <nrfx_usbd_transfer_out_drop+0x50>)
    91e6:	2301      	movs	r3, #1
    91e8:	fa03 f000 	lsl.w	r0, r3, r0
    91ec:	680b      	ldr	r3, [r1, #0]
    91ee:	ea23 0300 	bic.w	r3, r3, r0
    91f2:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    91f4:	f012 0108 	ands.w	r1, r2, #8
    91f8:	d10a      	bne.n	9210 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    91fa:	f002 030f 	and.w	r3, r2, #15
    91fe:	009b      	lsls	r3, r3, #2
    9200:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9204:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    9208:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    920c:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    9210:	f384 8811 	msr	BASEPRI, r4
    9214:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    9218:	bd10      	pop	{r4, pc}
    921a:	bf00      	nop
    921c:	20001a5c 	.word	0x20001a5c

00009220 <usbd_ep_abort>:
{
    9220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    9222:	4601      	mov	r1, r0
	__asm__ volatile(
    9224:	f04f 0340 	mov.w	r3, #64	; 0x40
    9228:	f3ef 8511 	mrs	r5, BASEPRI
    922c:	f383 8812 	msr	BASEPRI_MAX, r3
    9230:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    9234:	f7ff fa9a 	bl	876c <ep_state_access>
    9238:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    923a:	4608      	mov	r0, r1
    923c:	f003 f9a6 	bl	c58c <ep2bit>
    9240:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    9242:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    9246:	fa02 f200 	lsl.w	r2, r2, r0
    924a:	482e      	ldr	r0, [pc, #184]	; (9304 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    924c:	d119      	bne.n	9282 <usbd_ep_abort+0x62>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    924e:	6803      	ldr	r3, [r0, #0]
    9250:	ea32 0303 	bics.w	r3, r2, r3
    9254:	d00a      	beq.n	926c <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    9256:	4608      	mov	r0, r1
    9258:	f7ff ffb8 	bl	91cc <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    925c:	2303      	movs	r3, #3
    925e:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    9260:	f385 8811 	msr	BASEPRI, r5
    9264:	f3bf 8f6f 	isb	sy
}
    9268:	b003      	add	sp, #12
    926a:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
    926c:	6033      	str	r3, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    926e:	6803      	ldr	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    9270:	4925      	ldr	r1, [pc, #148]	; (9308 <usbd_ep_abort+0xe8>)
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    9272:	ea23 0302 	bic.w	r3, r3, r2
    9276:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    9278:	680b      	ldr	r3, [r1, #0]
    927a:	ea23 0302 	bic.w	r3, r3, r2
    927e:	600b      	str	r3, [r1, #0]
    9280:	e7ec      	b.n	925c <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    9282:	070b      	lsls	r3, r1, #28
    9284:	d415      	bmi.n	92b2 <usbd_ep_abort+0x92>
            if(ep != NRFX_USBD_EPIN0)
    9286:	2980      	cmp	r1, #128	; 0x80
    9288:	4b20      	ldr	r3, [pc, #128]	; (930c <usbd_ep_abort+0xec>)
    928a:	d02f      	beq.n	92ec <usbd_ep_abort+0xcc>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    928c:	f001 040f 	and.w	r4, r1, #15
    9290:	f204 34da 	addw	r4, r4, #986	; 0x3da
    9294:	0064      	lsls	r4, r4, #1
    9296:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    929a:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    929e:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    92a2:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    92a4:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    92a8:	433c      	orrs	r4, r7
    92aa:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    92ae:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    92b2:	4f15      	ldr	r7, [pc, #84]	; (9308 <usbd_ep_abort+0xe8>)
    92b4:	6804      	ldr	r4, [r0, #0]
    92b6:	683b      	ldr	r3, [r7, #0]
    92b8:	ea64 0c03 	orn	ip, r4, r3
    92bc:	ea1c 0f02 	tst.w	ip, r2
    92c0:	d0ce      	beq.n	9260 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    92c2:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    92c4:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    92c8:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    92ca:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    92cc:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    92ce:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    92d0:	2303      	movs	r3, #3
    92d2:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    92d4:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    92d8:	4b0d      	ldr	r3, [pc, #52]	; (9310 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    92da:	f88d 1006 	strb.w	r1, [sp, #6]
    92de:	2206      	movs	r2, #6
            m_event_handler(&evt);
    92e0:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    92e2:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    92e6:	a801      	add	r0, sp, #4
    92e8:	4798      	blx	r3
    92ea:	e7b9      	b.n	9260 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    92ec:	f240 74b4 	movw	r4, #1972	; 0x7b4
    92f0:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    92f4:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    92f8:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    92fc:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    92fe:	f044 0404 	orr.w	r4, r4, #4
    9302:	e7d1      	b.n	92a8 <usbd_ep_abort+0x88>
    9304:	20001a58 	.word	0x20001a58
    9308:	20001a5c 	.word	0x20001a5c
    930c:	40027000 	.word	0x40027000
    9310:	20001a60 	.word	0x20001a60

00009314 <ev_setup_handler>:
{
    9314:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    9316:	4b14      	ldr	r3, [pc, #80]	; (9368 <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    9318:	4c14      	ldr	r4, [pc, #80]	; (936c <ev_setup_handler+0x58>)
    931a:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    931e:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    9320:	4e13      	ldr	r6, [pc, #76]	; (9370 <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    9322:	43da      	mvns	r2, r3
    9324:	4b13      	ldr	r3, [pc, #76]	; (9374 <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
    9326:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    9328:	681b      	ldr	r3, [r3, #0]
    932a:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    932c:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    932e:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    9330:	f003 f92c 	bl	c58c <ep2bit>
    9334:	2301      	movs	r3, #1
    9336:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    9338:	4213      	tst	r3, r2
    933a:	d002      	beq.n	9342 <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    933c:	4608      	mov	r0, r1
    933e:	f7ff ff6f 	bl	9220 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    9342:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    (void)(NRFX_ATOMIC_FETCH_AND(
    9346:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    934a:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    934c:	f7ff fb08 	bl	8960 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    9350:	6823      	ldr	r3, [r4, #0]
    9352:	f043 0301 	orr.w	r3, r3, #1
    9356:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    9358:	2305      	movs	r3, #5
    935a:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
    935c:	4b06      	ldr	r3, [pc, #24]	; (9378 <ev_setup_handler+0x64>)
    935e:	a801      	add	r0, sp, #4
    9360:	681b      	ldr	r3, [r3, #0]
    9362:	4798      	blx	r3
}
    9364:	b002      	add	sp, #8
    9366:	bd70      	pop	{r4, r5, r6, pc}
    9368:	40027000 	.word	0x40027000
    936c:	20001a5c 	.word	0x20001a5c
    9370:	20001b8b 	.word	0x20001b8b
    9374:	20001a58 	.word	0x20001a58
    9378:	20001a60 	.word	0x20001a60

0000937c <nrfx_usbd_irq_handler>:
{
    937c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return p_reg->INTENSET;
    9380:	4b1a      	ldr	r3, [pc, #104]	; (93ec <nrfx_usbd_irq_handler+0x70>)
    9382:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    9386:	2300      	movs	r3, #0
            active |= 1UL << event_nr;
    9388:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    938a:	461d      	mov	r5, r3
    while (to_process)
    938c:	b970      	cbnz	r0, 93ac <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
    938e:	4f18      	ldr	r7, [pc, #96]	; (93f0 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    9390:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    9394:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    9398:	f04f 0801 	mov.w	r8, #1
    while (active)
    939c:	b9bc      	cbnz	r4, 93ce <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    939e:	f7ff fd67 	bl	8e70 <usbd_dmareq_process>
    if (setup_active)
    93a2:	b306      	cbz	r6, 93e6 <nrfx_usbd_irq_handler+0x6a>
}
    93a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    93a8:	f7ff bfb4 	b.w	9314 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    93ac:	fa90 f2a0 	rbit	r2, r0
    93b0:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    93b4:	490f      	ldr	r1, [pc, #60]	; (93f4 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    93b6:	0096      	lsls	r6, r2, #2
    93b8:	4431      	add	r1, r6
            active |= 1UL << event_nr;
    93ba:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    93be:	680e      	ldr	r6, [r1, #0]
    if (ret)
    93c0:	b116      	cbz	r6, 93c8 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    93c2:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    93c4:	6809      	ldr	r1, [r1, #0]
    93c6:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    93c8:	ea20 0002 	bic.w	r0, r0, r2
    93cc:	e7de      	b.n	938c <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    93ce:	fa94 f5a4 	rbit	r5, r4
    93d2:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    93d6:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    93da:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    93de:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    93e0:	ea24 0405 	bic.w	r4, r4, r5
    93e4:	e7da      	b.n	939c <nrfx_usbd_irq_handler+0x20>
}
    93e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    93ea:	bf00      	nop
    93ec:	40027000 	.word	0x40027000
    93f0:	0000d2f0 	.word	0x0000d2f0
    93f4:	40027100 	.word	0x40027100

000093f8 <nrfx_usbd_stop>:
{
    93f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    93fa:	4b1b      	ldr	r3, [pc, #108]	; (9468 <nrfx_usbd_stop+0x70>)
    93fc:	2280      	movs	r2, #128	; 0x80
    93fe:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    9402:	2027      	movs	r0, #39	; 0x27
    9404:	f7fa fbf0 	bl	3be8 <arch_irq_is_enabled>
    9408:	b1b8      	cbz	r0, 943a <nrfx_usbd_stop+0x42>
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    940a:	4e18      	ldr	r6, [pc, #96]	; (946c <nrfx_usbd_stop+0x74>)
    940c:	4b18      	ldr	r3, [pc, #96]	; (9470 <nrfx_usbd_stop+0x78>)
    940e:	6834      	ldr	r4, [r6, #0]
    9410:	681b      	ldr	r3, [r3, #0]
    9412:	0c24      	lsrs	r4, r4, #16
    9414:	0424      	lsls	r4, r4, #16
    9416:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
    9418:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    941a:	b97c      	cbnz	r4, 943c <nrfx_usbd_stop+0x44>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    941c:	4d15      	ldr	r5, [pc, #84]	; (9474 <nrfx_usbd_stop+0x7c>)
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    941e:	f240 13ff 	movw	r3, #511	; 0x1ff
    9422:	6033      	str	r3, [r6, #0]
        NRFX_IRQ_DISABLE(USBD_IRQn);
    9424:	2027      	movs	r0, #39	; 0x27
    9426:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    942a:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
    942e:	f7fa fbc7 	bl	3bc0 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    9432:	f04f 33ff 	mov.w	r3, #4294967295
    9436:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
}
    943a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    943c:	fa94 f5a4 	rbit	r5, r4
    9440:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9444:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    9446:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9448:	bfc6      	itte	gt
    944a:	f1a5 0010 	subgt.w	r0, r5, #16
    944e:	b2c0      	uxtbgt	r0, r0
    9450:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    9454:	0703      	lsls	r3, r0, #28
    9456:	d401      	bmi.n	945c <nrfx_usbd_stop+0x64>
            usbd_ep_abort(bit2ep(bitpos));
    9458:	f7ff fee2 	bl	9220 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    945c:	fa07 f505 	lsl.w	r5, r7, r5
    9460:	ea24 0405 	bic.w	r4, r4, r5
    9464:	e7d9      	b.n	941a <nrfx_usbd_stop+0x22>
    9466:	bf00      	nop
    9468:	e000e100 	.word	0xe000e100
    946c:	20001a5c 	.word	0x20001a5c
    9470:	20001a58 	.word	0x20001a58
    9474:	40027000 	.word	0x40027000

00009478 <nrfx_usbd_disable>:
{
    9478:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    947a:	f7ff ffbd 	bl	93f8 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    947e:	4b08      	ldr	r3, [pc, #32]	; (94a0 <nrfx_usbd_disable+0x28>)
    9480:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    9484:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    9488:	2200      	movs	r2, #0
    948a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    948e:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    m_dma_pending = false;
    9492:	4b04      	ldr	r3, [pc, #16]	; (94a4 <nrfx_usbd_disable+0x2c>)
    9494:	701a      	strb	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    9496:	4b04      	ldr	r3, [pc, #16]	; (94a8 <nrfx_usbd_disable+0x30>)
    9498:	2201      	movs	r2, #1
    949a:	701a      	strb	r2, [r3, #0]
}
    949c:	bd08      	pop	{r3, pc}
    949e:	bf00      	nop
    94a0:	40027000 	.word	0x40027000
    94a4:	20001b8a 	.word	0x20001b8a
    94a8:	20001b8d 	.word	0x20001b8d

000094ac <nrfx_usbd_ep_disable>:
{
    94ac:	b510      	push	{r4, lr}
    94ae:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    94b0:	f7ff feb6 	bl	9220 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    94b4:	4a10      	ldr	r2, [pc, #64]	; (94f8 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    94b6:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    94ba:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    94be:	f04f 0301 	mov.w	r3, #1
    94c2:	bf14      	ite	ne
    94c4:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    94c8:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    94cc:	fa03 f300 	lsl.w	r3, r3, r0
    94d0:	ea6f 0303 	mvn.w	r3, r3
    94d4:	bf15      	itete	ne
    94d6:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    94d8:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    94da:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    94de:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    94e2:	bf14      	ite	ne
    94e4:	4b05      	ldrne	r3, [pc, #20]	; (94fc <nrfx_usbd_ep_disable+0x50>)
    94e6:	4b06      	ldreq	r3, [pc, #24]	; (9500 <nrfx_usbd_ep_disable+0x54>)
    94e8:	5c1a      	ldrb	r2, [r3, r0]
    94ea:	2301      	movs	r3, #1
    94ec:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    94ee:	4a02      	ldr	r2, [pc, #8]	; (94f8 <nrfx_usbd_ep_disable+0x4c>)
    94f0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    94f4:	bd10      	pop	{r4, pc}
    94f6:	bf00      	nop
    94f8:	40027000 	.word	0x40027000
    94fc:	0000f7bf 	.word	0x0000f7bf
    9500:	0000f7b6 	.word	0x0000f7b6

00009504 <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    9504:	f010 0f80 	tst.w	r0, #128	; 0x80
{
    9508:	b570      	push	{r4, r5, r6, lr}
    950a:	4924      	ldr	r1, [pc, #144]	; (959c <nrfx_usbd_ep_enable+0x98>)
    950c:	4604      	mov	r4, r0
    950e:	f000 030f 	and.w	r3, r0, #15
    9512:	f04f 0501 	mov.w	r5, #1
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    9516:	d012      	beq.n	953e <nrfx_usbd_ep_enable+0x3a>
    9518:	4a21      	ldr	r2, [pc, #132]	; (95a0 <nrfx_usbd_ep_enable+0x9c>)
    951a:	5cd2      	ldrb	r2, [r2, r3]
    951c:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    9520:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    9524:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    9528:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    952a:	07d0      	lsls	r0, r2, #31
    952c:	d406      	bmi.n	953c <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
    952e:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    9532:	fa05 f303 	lsl.w	r3, r5, r3
    9536:	4313      	orrs	r3, r2
    9538:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
    953c:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    953e:	4a19      	ldr	r2, [pc, #100]	; (95a4 <nrfx_usbd_ep_enable+0xa0>)
    9540:	5cd2      	ldrb	r2, [r2, r3]
    9542:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    9546:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    954a:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
    954e:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    9550:	07d2      	lsls	r2, r2, #31
    9552:	d4f3      	bmi.n	953c <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
    9554:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
    9558:	fa05 f203 	lsl.w	r2, r5, r3
    955c:	4332      	orrs	r2, r6
    955e:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    9562:	2b00      	cmp	r3, #0
    9564:	d0ea      	beq.n	953c <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
    9566:	0703      	lsls	r3, r0, #28
    9568:	d4e8      	bmi.n	953c <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
    956a:	f04f 0340 	mov.w	r3, #64	; 0x40
    956e:	f3ef 8611 	mrs	r6, BASEPRI
    9572:	f383 8812 	msr	BASEPRI_MAX, r3
    9576:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    957a:	f7ff fe27 	bl	91cc <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    957e:	4620      	mov	r0, r4
    9580:	f003 f804 	bl	c58c <ep2bit>
    9584:	4a08      	ldr	r2, [pc, #32]	; (95a8 <nrfx_usbd_ep_enable+0xa4>)
    9586:	6813      	ldr	r3, [r2, #0]
    9588:	fa05 f000 	lsl.w	r0, r5, r0
    958c:	ea23 0300 	bic.w	r3, r3, r0
    9590:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    9592:	f386 8811 	msr	BASEPRI, r6
    9596:	f3bf 8f6f 	isb	sy
}
    959a:	e7cf      	b.n	953c <nrfx_usbd_ep_enable+0x38>
    959c:	40027000 	.word	0x40027000
    95a0:	0000f7bf 	.word	0x0000f7bf
    95a4:	0000f7b6 	.word	0x0000f7b6
    95a8:	20001a58 	.word	0x20001a58

000095ac <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    95ac:	0603      	lsls	r3, r0, #24
{
    95ae:	b510      	push	{r4, lr}
    95b0:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    95b2:	d405      	bmi.n	95c0 <nrfx_usbd_ep_stall_clear+0x14>
    95b4:	f7ff fd74 	bl	90a0 <nrfx_usbd_ep_stall_check>
    95b8:	b110      	cbz	r0, 95c0 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    95ba:	4620      	mov	r0, r4
    95bc:	f7ff fe06 	bl	91cc <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    95c0:	4b01      	ldr	r3, [pc, #4]	; (95c8 <nrfx_usbd_ep_stall_clear+0x1c>)
    95c2:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    95c6:	bd10      	pop	{r4, pc}
    95c8:	40027000 	.word	0x40027000

000095cc <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    95cc:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    95ce:	4c11      	ldr	r4, [pc, #68]	; (9614 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    95d0:	4a11      	ldr	r2, [pc, #68]	; (9618 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    95d2:	4912      	ldr	r1, [pc, #72]	; (961c <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    95d4:	2303      	movs	r3, #3
    95d6:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    95d8:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    95da:	4b11      	ldr	r3, [pc, #68]	; (9620 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    95dc:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    95de:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    95e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
    95e4:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    95e6:	2300      	movs	r3, #0
    95e8:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    95ea:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    95ec:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    95ee:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    95f0:	4a0c      	ldr	r2, [pc, #48]	; (9624 <_DoInit+0x58>)
    95f2:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    95f4:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    95f6:	2210      	movs	r2, #16
    95f8:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    95fa:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    95fc:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    95fe:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    9600:	f002 fb3b 	bl	bc7a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    9604:	4908      	ldr	r1, [pc, #32]	; (9628 <_DoInit+0x5c>)
    9606:	4620      	mov	r0, r4
    9608:	f002 fb37 	bl	bc7a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    960c:	2320      	movs	r3, #32
    960e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    9610:	bd10      	pop	{r4, pc}
    9612:	bf00      	nop
    9614:	20001a64 	.word	0x20001a64
    9618:	0000f7d2 	.word	0x0000f7d2
    961c:	0000f7db 	.word	0x0000f7db
    9620:	20001b9e 	.word	0x20001b9e
    9624:	20001b8e 	.word	0x20001b8e
    9628:	0000f7df 	.word	0x0000f7df

0000962c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    962c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    9630:	4f21      	ldr	r7, [pc, #132]	; (96b8 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
    9632:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    9636:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    9638:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    963c:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    963e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    9640:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    9642:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    9644:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    9646:	d831      	bhi.n	96ac <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    9648:	f8d2 a020 	ldr.w	sl, [r2, #32]
    964c:	ebaa 0905 	sub.w	r9, sl, r5
    9650:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    9654:	4294      	cmp	r4, r2
    9656:	d811      	bhi.n	967c <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    9658:	2318      	movs	r3, #24
    965a:	fb06 3303 	mla	r3, r6, r3, r3
    965e:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    9660:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    9662:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    9664:	4641      	mov	r1, r8
    9666:	4428      	add	r0, r5
    9668:	f002 fb2d 	bl	bcc6 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    966c:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    966e:	2318      	movs	r3, #24
    9670:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
    9674:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    9676:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    9678:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    967c:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    967e:	429c      	cmp	r4, r3
    9680:	d818      	bhi.n	96b4 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    9682:	fb00 bb0b 	mla	fp, r0, fp, fp
    9686:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    9688:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    968a:	f8db 0004 	ldr.w	r0, [fp, #4]
    968e:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    9690:	4428      	add	r0, r5
    9692:	f002 fb18 	bl	bcc6 <memcpy>
      if (NumBytes) {
    9696:	ebb4 040a 	subs.w	r4, r4, sl
    969a:	d0e8      	beq.n	966e <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    969c:	f8db 0004 	ldr.w	r0, [fp, #4]
    96a0:	4622      	mov	r2, r4
    96a2:	eb08 0109 	add.w	r1, r8, r9
    96a6:	f002 fb0e 	bl	bcc6 <memcpy>
      return 1;
    96aa:	e7e0      	b.n	966e <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
    96ac:	3b01      	subs	r3, #1
    96ae:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    96b0:	42a3      	cmp	r3, r4
    96b2:	d2d1      	bcs.n	9658 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    96b4:	2000      	movs	r0, #0
    96b6:	e7df      	b.n	9678 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    96b8:	20001a64 	.word	0x20001a64

000096bc <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    96bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    96be:	4b14      	ldr	r3, [pc, #80]	; (9710 <SEGGER_RTT_WriteNoLock+0x54>)
    96c0:	2718      	movs	r7, #24
    96c2:	fb00 7507 	mla	r5, r0, r7, r7
    96c6:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    96c8:	fb07 3300 	mla	r3, r7, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    96cc:	460e      	mov	r6, r1
  switch (pRing->Flags) {
    96ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    96d0:	2b01      	cmp	r3, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    96d2:	4614      	mov	r4, r2
  switch (pRing->Flags) {
    96d4:	d00a      	beq.n	96ec <SEGGER_RTT_WriteNoLock+0x30>
    96d6:	2b02      	cmp	r3, #2
    96d8:	d014      	beq.n	9704 <SEGGER_RTT_WriteNoLock+0x48>
    96da:	b923      	cbnz	r3, 96e6 <SEGGER_RTT_WriteNoLock+0x2a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    96dc:	4628      	mov	r0, r5
    96de:	f002 ffa8 	bl	c632 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    96e2:	4284      	cmp	r4, r0
    96e4:	d908      	bls.n	96f8 <SEGGER_RTT_WriteNoLock+0x3c>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    96e6:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    96e8:	4620      	mov	r0, r4
    96ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    96ec:	4628      	mov	r0, r5
    96ee:	f002 ffa0 	bl	c632 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    96f2:	4284      	cmp	r4, r0
    96f4:	bf28      	it	cs
    96f6:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    96f8:	4622      	mov	r2, r4
    96fa:	4631      	mov	r1, r6
    96fc:	4628      	mov	r0, r5
    96fe:	f002 ffa1 	bl	c644 <_WriteNoCheck>
    break;
    9702:	e7f1      	b.n	96e8 <SEGGER_RTT_WriteNoLock+0x2c>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    9704:	4628      	mov	r0, r5
}
    9706:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    970a:	f002 bfb6 	b.w	c67a <_WriteBlocking>
    970e:	bf00      	nop
    9710:	20001a64 	.word	0x20001a64

00009714 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    9714:	4b03      	ldr	r3, [pc, #12]	; (9724 <SEGGER_RTT_HasDataUp+0x10>)
    9716:	2218      	movs	r2, #24
    9718:	fb02 3300 	mla	r3, r2, r0, r3
    971c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    971e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    9720:	1a80      	subs	r0, r0, r2
    9722:	4770      	bx	lr
    9724:	20001a64 	.word	0x20001a64

00009728 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
    9728:	4803      	ldr	r0, [pc, #12]	; (9738 <zephyr_rtt_mutex_lock+0x10>)
    972a:	f04f 32ff 	mov.w	r2, #4294967295
    972e:	f04f 33ff 	mov.w	r3, #4294967295
    9732:	f000 bab7 	b.w	9ca4 <z_impl_k_mutex_lock>
    9736:	bf00      	nop
    9738:	200002f8 	.word	0x200002f8

0000973c <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
    973c:	4801      	ldr	r0, [pc, #4]	; (9744 <zephyr_rtt_mutex_unlock+0x8>)
    973e:	f000 bb2b 	b.w	9d98 <z_impl_k_mutex_unlock>
    9742:	bf00      	nop
    9744:	200002f8 	.word	0x200002f8

00009748 <z_impl_device_get_binding>:
		++dev;
	}
}

const struct device *z_impl_device_get_binding(const char *name)
{
    9748:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    974a:	4605      	mov	r5, r0
    974c:	b910      	cbnz	r0, 9754 <z_impl_device_get_binding+0xc>
		return NULL;
    974e:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    9750:	4620      	mov	r0, r4
    9752:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    9754:	7803      	ldrb	r3, [r0, #0]
    9756:	2b00      	cmp	r3, #0
    9758:	d0f9      	beq.n	974e <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    975a:	4c0e      	ldr	r4, [pc, #56]	; (9794 <z_impl_device_get_binding+0x4c>)
    975c:	4e0e      	ldr	r6, [pc, #56]	; (9798 <z_impl_device_get_binding+0x50>)
    975e:	42b4      	cmp	r4, r6
    9760:	d108      	bne.n	9774 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    9762:	4c0c      	ldr	r4, [pc, #48]	; (9794 <z_impl_device_get_binding+0x4c>)
    9764:	42b4      	cmp	r4, r6
    9766:	d0f2      	beq.n	974e <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    9768:	4620      	mov	r0, r4
    976a:	f002 ffb8 	bl	c6de <z_device_is_ready>
    976e:	b950      	cbnz	r0, 9786 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    9770:	3418      	adds	r4, #24
    9772:	e7f7      	b.n	9764 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    9774:	4620      	mov	r0, r4
    9776:	f002 ffb2 	bl	c6de <z_device_is_ready>
    977a:	b110      	cbz	r0, 9782 <z_impl_device_get_binding+0x3a>
    977c:	6823      	ldr	r3, [r4, #0]
    977e:	42ab      	cmp	r3, r5
    9780:	d0e6      	beq.n	9750 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    9782:	3418      	adds	r4, #24
    9784:	e7eb      	b.n	975e <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    9786:	6821      	ldr	r1, [r4, #0]
    9788:	4628      	mov	r0, r5
    978a:	f002 fa90 	bl	bcae <strcmp>
    978e:	2800      	cmp	r0, #0
    9790:	d1ee      	bne.n	9770 <z_impl_device_get_binding+0x28>
    9792:	e7dd      	b.n	9750 <z_impl_device_get_binding+0x8>
    9794:	0000ce60 	.word	0x0000ce60
    9798:	0000cf08 	.word	0x0000cf08

0000979c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    979c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    97a0:	b086      	sub	sp, #24
    97a2:	4605      	mov	r5, r0
    97a4:	af00      	add	r7, sp, #0
    97a6:	460e      	mov	r6, r1
	__asm__ volatile(
    97a8:	f04f 0340 	mov.w	r3, #64	; 0x40
    97ac:	f3ef 8811 	mrs	r8, BASEPRI
    97b0:	f383 8812 	msr	BASEPRI_MAX, r3
    97b4:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    97b8:	f001 f838 	bl	a82c <z_impl_z_current_get>
    97bc:	2d04      	cmp	r5, #4
    97be:	bf96      	itet	ls
    97c0:	4b2c      	ldrls	r3, [pc, #176]	; (9874 <z_fatal_error+0xd8>)
    97c2:	4b2d      	ldrhi	r3, [pc, #180]	; (9878 <z_fatal_error+0xdc>)
    97c4:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    97c8:	46e9      	mov	r9, sp
    97ca:	b08a      	sub	sp, #40	; 0x28
    97cc:	4604      	mov	r4, r0
    97ce:	466a      	mov	r2, sp
    97d0:	492a      	ldr	r1, [pc, #168]	; (987c <z_fatal_error+0xe0>)
    97d2:	61d3      	str	r3, [r2, #28]
    97d4:	f240 3301 	movw	r3, #769	; 0x301
    97d8:	8493      	strh	r3, [r2, #36]	; 0x24
    97da:	f04f 0a00 	mov.w	sl, #0
    97de:	4b28      	ldr	r3, [pc, #160]	; (9880 <z_fatal_error+0xe4>)
    97e0:	f8c2 a020 	str.w	sl, [r2, #32]
    97e4:	e9c2 1505 	strd	r1, r5, [r2, #20]
    97e8:	f842 3f10 	str.w	r3, [r2, #16]!
    97ec:	4825      	ldr	r0, [pc, #148]	; (9884 <z_fatal_error+0xe8>)
    97ee:	4653      	mov	r3, sl
    97f0:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    97f4:	f7f8 fda0 	bl	2338 <z_impl_z_log_msg_static_create>
    97f8:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    97fa:	b17e      	cbz	r6, 981c <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    97fc:	69f3      	ldr	r3, [r6, #28]
    97fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
    9802:	b15b      	cbz	r3, 981c <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    9804:	4b20      	ldr	r3, [pc, #128]	; (9888 <z_fatal_error+0xec>)
    9806:	617b      	str	r3, [r7, #20]
    9808:	2302      	movs	r3, #2
    980a:	613b      	str	r3, [r7, #16]
    980c:	481d      	ldr	r0, [pc, #116]	; (9884 <z_fatal_error+0xe8>)
    980e:	4653      	mov	r3, sl
    9810:	f107 0210 	add.w	r2, r7, #16
    9814:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    9818:	f7f8 fd8e 	bl	2338 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    981c:	b12c      	cbz	r4, 982a <z_fatal_error+0x8e>
    981e:	4620      	mov	r0, r4
    9820:	f002 ffb4 	bl	c78c <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    9824:	b108      	cbz	r0, 982a <z_fatal_error+0x8e>
    9826:	7803      	ldrb	r3, [r0, #0]
    9828:	b903      	cbnz	r3, 982c <z_fatal_error+0x90>
		thread_name = "unknown";
    982a:	4818      	ldr	r0, [pc, #96]	; (988c <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    982c:	46e9      	mov	r9, sp
    982e:	b08a      	sub	sp, #40	; 0x28
    9830:	466a      	mov	r2, sp
    9832:	4b17      	ldr	r3, [pc, #92]	; (9890 <z_fatal_error+0xf4>)
    9834:	61d0      	str	r0, [r2, #28]
    9836:	e9c2 3405 	strd	r3, r4, [r2, #20]
    983a:	f240 3301 	movw	r3, #769	; 0x301
    983e:	8413      	strh	r3, [r2, #32]
    9840:	4b14      	ldr	r3, [pc, #80]	; (9894 <z_fatal_error+0xf8>)
    9842:	f842 3f10 	str.w	r3, [r2, #16]!
    9846:	2300      	movs	r3, #0
    9848:	480e      	ldr	r0, [pc, #56]	; (9884 <z_fatal_error+0xe8>)
    984a:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    984e:	f7f8 fd73 	bl	2338 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    9852:	4631      	mov	r1, r6
    9854:	46cd      	mov	sp, r9
    9856:	4628      	mov	r0, r5
    9858:	f7fd fa28 	bl	6cac <k_sys_fatal_error_handler>
	__asm__ volatile(
    985c:	f388 8811 	msr	BASEPRI, r8
    9860:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    9864:	4620      	mov	r0, r4
    9866:	f7fa fe2d 	bl	44c4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    986a:	3718      	adds	r7, #24
    986c:	46bd      	mov	sp, r7
    986e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9872:	bf00      	nop
    9874:	0000d358 	.word	0x0000d358
    9878:	0000f7e6 	.word	0x0000f7e6
    987c:	0000f7fc 	.word	0x0000f7fc
    9880:	01000005 	.word	0x01000005
    9884:	0000cfd8 	.word	0x0000cfd8
    9888:	0000f824 	.word	0x0000f824
    988c:	0000f7f4 	.word	0x0000f7f4
    9890:	0000f845 	.word	0x0000f845
    9894:	01000004 	.word	0x01000004

00009898 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    9898:	4b10      	ldr	r3, [pc, #64]	; (98dc <z_sys_init_run_level+0x44>)
{
    989a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    989c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    98a0:	3001      	adds	r0, #1
    98a2:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    98a6:	42a6      	cmp	r6, r4
    98a8:	d800      	bhi.n	98ac <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    98aa:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    98ac:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    98b0:	b18d      	cbz	r5, 98d6 <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    98b2:	4628      	mov	r0, r5
    98b4:	4798      	blx	r3
			if (rc != 0) {
    98b6:	b138      	cbz	r0, 98c8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    98b8:	2800      	cmp	r0, #0
    98ba:	bfb8      	it	lt
    98bc:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    98be:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    98c0:	28ff      	cmp	r0, #255	; 0xff
    98c2:	bfa8      	it	ge
    98c4:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    98c6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    98c8:	68ea      	ldr	r2, [r5, #12]
    98ca:	7853      	ldrb	r3, [r2, #1]
    98cc:	f043 0301 	orr.w	r3, r3, #1
    98d0:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    98d2:	3408      	adds	r4, #8
    98d4:	e7e7      	b.n	98a6 <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    98d6:	4798      	blx	r3
    98d8:	e7fb      	b.n	98d2 <z_sys_init_run_level+0x3a>
    98da:	bf00      	nop
    98dc:	0000d36c 	.word	0x0000d36c

000098e0 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    98e0:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    98e2:	4b0a      	ldr	r3, [pc, #40]	; (990c <bg_thread_main+0x2c>)
    98e4:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    98e6:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    98e8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    98ea:	f7ff ffd5 	bl	9898 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    98ee:	f001 fa31 	bl	ad54 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    98f2:	2004      	movs	r0, #4
    98f4:	f7ff ffd0 	bl	9898 <z_sys_init_run_level>

	z_init_static_threads();
    98f8:	f000 f95c 	bl	9bb4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    98fc:	f7f6 ff46 	bl	78c <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    9900:	4a03      	ldr	r2, [pc, #12]	; (9910 <bg_thread_main+0x30>)
    9902:	7b13      	ldrb	r3, [r2, #12]
    9904:	f023 0301 	bic.w	r3, r3, #1
    9908:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    990a:	bd08      	pop	{r3, pc}
    990c:	20001f9e 	.word	0x20001f9e
    9910:	20000a60 	.word	0x20000a60

00009914 <z_bss_zero>:
{
    9914:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    9916:	4803      	ldr	r0, [pc, #12]	; (9924 <z_bss_zero+0x10>)
    9918:	4a03      	ldr	r2, [pc, #12]	; (9928 <z_bss_zero+0x14>)
    991a:	2100      	movs	r1, #0
    991c:	1a12      	subs	r2, r2, r0
    991e:	f002 fee9 	bl	c6f4 <z_early_memset>
}
    9922:	bd08      	pop	{r3, pc}
    9924:	200003f8 	.word	0x200003f8
    9928:	20001fa0 	.word	0x20001fa0

0000992c <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    992c:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    992e:	2300      	movs	r3, #0
{
    9930:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    9932:	2201      	movs	r2, #1
    9934:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    9938:	4e13      	ldr	r6, [pc, #76]	; (9988 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    993a:	4d14      	ldr	r5, [pc, #80]	; (998c <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    993c:	9301      	str	r3, [sp, #4]
    993e:	220f      	movs	r2, #15
    9940:	e9cd 3202 	strd	r3, r2, [sp, #8]
    9944:	4912      	ldr	r1, [pc, #72]	; (9990 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    9946:	2314      	movs	r3, #20
    9948:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    994c:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    9950:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    9952:	f44f 70a0 	mov.w	r0, #320	; 0x140
    9956:	fb00 1104 	mla	r1, r0, r4, r1
    995a:	4b0e      	ldr	r3, [pc, #56]	; (9994 <z_init_cpu+0x68>)
    995c:	9500      	str	r5, [sp, #0]
    995e:	f44f 7280 	mov.w	r2, #256	; 0x100
    9962:	4630      	mov	r0, r6
    9964:	f000 f8c8 	bl	9af8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9968:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    996a:	4a0b      	ldr	r2, [pc, #44]	; (9998 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    996c:	60ee      	str	r6, [r5, #12]
    996e:	f023 0304 	bic.w	r3, r3, #4
    9972:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    9974:	f44f 6304 	mov.w	r3, #2112	; 0x840
    9978:	fb04 3303 	mla	r3, r4, r3, r3
    997c:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    997e:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
    9980:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    9982:	b006      	add	sp, #24
    9984:	bd70      	pop	{r4, r5, r6, pc}
    9986:	bf00      	nop
    9988:	200009e0 	.word	0x200009e0
    998c:	20001b0c 	.word	0x20001b0c
    9990:	20002f80 	.word	0x20002f80
    9994:	00009c6d 	.word	0x00009c6d
    9998:	20002740 	.word	0x20002740

0000999c <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    999c:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    999e:	2000      	movs	r0, #0
{
    99a0:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    99a2:	f7ff ff79 	bl	9898 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    99a6:	4b2d      	ldr	r3, [pc, #180]	; (9a5c <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    99a8:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    99ac:	4d2c      	ldr	r5, [pc, #176]	; (9a60 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    99ae:	4e2d      	ldr	r6, [pc, #180]	; (9a64 <z_cstart+0xc8>)
    99b0:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    99b2:	4f2d      	ldr	r7, [pc, #180]	; (9a68 <z_cstart+0xcc>)
    99b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    99b8:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    99ba:	23e0      	movs	r3, #224	; 0xe0
    99bc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    99c0:	2400      	movs	r4, #0
    99c2:	2320      	movs	r3, #32
    99c4:	77eb      	strb	r3, [r5, #31]
    99c6:	762c      	strb	r4, [r5, #24]
    99c8:	766c      	strb	r4, [r5, #25]
    99ca:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    99cc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    99ce:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    99d2:	626b      	str	r3, [r5, #36]	; 0x24
    99d4:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    99d8:	f7fa fce8 	bl	43ac <z_arm_fault_init>
	z_arm_cpu_idle_init();
    99dc:	f7fa f85c 	bl	3a98 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    99e0:	f04f 33ff 	mov.w	r3, #4294967295
    99e4:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    99e6:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    99e8:	f7fa fe3c 	bl	4664 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    99ec:	f7fa fd80 	bl	44f0 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    99f0:	f7f8 fb2e 	bl	2050 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    99f4:	f240 1301 	movw	r3, #257	; 0x101
    99f8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    99fc:	ab06      	add	r3, sp, #24
    99fe:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    9a00:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    9a04:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    9a06:	f002 fe69 	bl	c6dc <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    9a0a:	2001      	movs	r0, #1
    9a0c:	f7ff ff44 	bl	9898 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    9a10:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    9a12:	4d16      	ldr	r5, [pc, #88]	; (9a6c <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    9a14:	f7ff ff40 	bl	9898 <z_sys_init_run_level>
	z_sched_init();
    9a18:	f000 fe4a 	bl	a6b0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    9a1c:	4b14      	ldr	r3, [pc, #80]	; (9a70 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    9a1e:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    9a20:	9305      	str	r3, [sp, #20]
    9a22:	2301      	movs	r3, #1
    9a24:	4913      	ldr	r1, [pc, #76]	; (9a74 <z_cstart+0xd8>)
    9a26:	9400      	str	r4, [sp, #0]
    9a28:	e9cd 4303 	strd	r4, r3, [sp, #12]
    9a2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9a30:	463b      	mov	r3, r7
    9a32:	e9cd 4401 	strd	r4, r4, [sp, #4]
    9a36:	4628      	mov	r0, r5
    9a38:	f000 f85e 	bl	9af8 <z_setup_new_thread>
    9a3c:	7b6a      	ldrb	r2, [r5, #13]
    9a3e:	4606      	mov	r6, r0
    9a40:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    9a44:	4628      	mov	r0, r5
    9a46:	736a      	strb	r2, [r5, #13]
    9a48:	f002 ffec 	bl	ca24 <z_ready_thread>
	z_init_cpu(0);
    9a4c:	4620      	mov	r0, r4
    9a4e:	f7ff ff6d 	bl	992c <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    9a52:	463a      	mov	r2, r7
    9a54:	4631      	mov	r1, r6
    9a56:	4628      	mov	r0, r5
    9a58:	f7fa f99c 	bl	3d94 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    9a5c:	20002f80 	.word	0x20002f80
    9a60:	e000ed00 	.word	0xe000ed00
    9a64:	20001b0c 	.word	0x20001b0c
    9a68:	000098e1 	.word	0x000098e1
    9a6c:	20000a60 	.word	0x20000a60
    9a70:	0000d48a 	.word	0x0000d48a
    9a74:	200030c0 	.word	0x200030c0

00009a78 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
    9a78:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    9a7a:	4c06      	ldr	r4, [pc, #24]	; (9a94 <init_mem_slab_module+0x1c>)
    9a7c:	4d06      	ldr	r5, [pc, #24]	; (9a98 <init_mem_slab_module+0x20>)
	int rc = 0;
    9a7e:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    9a80:	42ac      	cmp	r4, r5
    9a82:	d300      	bcc.n	9a86 <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    9a84:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    9a86:	4620      	mov	r0, r4
    9a88:	f002 fe38 	bl	c6fc <create_free_list>
		if (rc < 0) {
    9a8c:	2800      	cmp	r0, #0
    9a8e:	dbf9      	blt.n	9a84 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    9a90:	341c      	adds	r4, #28
    9a92:	e7f5      	b.n	9a80 <init_mem_slab_module+0x8>
    9a94:	200002c8 	.word	0x200002c8
    9a98:	200002e4 	.word	0x200002e4

00009a9c <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    9a9c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9a9e:	460c      	mov	r4, r1
	__asm__ volatile(
    9aa0:	f04f 0540 	mov.w	r5, #64	; 0x40
    9aa4:	f3ef 8111 	mrs	r1, BASEPRI
    9aa8:	f385 8812 	msr	BASEPRI_MAX, r5
    9aac:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    9ab0:	6945      	ldr	r5, [r0, #20]
    9ab2:	b15d      	cbz	r5, 9acc <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    9ab4:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    9ab6:	682b      	ldr	r3, [r5, #0]
    9ab8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    9aba:	6983      	ldr	r3, [r0, #24]
    9abc:	3301      	adds	r3, #1
    9abe:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    9ac0:	2000      	movs	r0, #0
	__asm__ volatile(
    9ac2:	f381 8811 	msr	BASEPRI, r1
    9ac6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    9aca:	e011      	b.n	9af0 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    9acc:	ea52 0603 	orrs.w	r6, r2, r3
    9ad0:	d103      	bne.n	9ada <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    9ad2:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    9ad4:	f06f 000b 	mvn.w	r0, #11
    9ad8:	e7f3      	b.n	9ac2 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    9ada:	e9cd 2300 	strd	r2, r3, [sp]
    9ade:	4602      	mov	r2, r0
    9ae0:	3008      	adds	r0, #8
    9ae2:	f000 fcef 	bl	a4c4 <z_pend_curr>
		if (result == 0) {
    9ae6:	b918      	cbnz	r0, 9af0 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    9ae8:	4b02      	ldr	r3, [pc, #8]	; (9af4 <k_mem_slab_alloc+0x58>)
    9aea:	689b      	ldr	r3, [r3, #8]
    9aec:	695b      	ldr	r3, [r3, #20]
    9aee:	6023      	str	r3, [r4, #0]
}
    9af0:	b002      	add	sp, #8
    9af2:	bd70      	pop	{r4, r5, r6, pc}
    9af4:	20001b0c 	.word	0x20001b0c

00009af8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    9af8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    9afc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    9afe:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    9b00:	2604      	movs	r6, #4
    9b02:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    9b04:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    9b06:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    9b08:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    9b0c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    9b0e:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    9b10:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    9b14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    9b16:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    9b18:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    9b1c:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    9b1e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    9b22:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    9b26:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    9b28:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    9b2a:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    9b2c:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    9b30:	9202      	str	r2, [sp, #8]
    9b32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    9b34:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    9b36:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    9b38:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    9b3a:	9200      	str	r2, [sp, #0]
    9b3c:	4642      	mov	r2, r8
{
    9b3e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    9b40:	f7fa f8f6 	bl	3d30 <arch_new_thread>
	if (!_current) {
    9b44:	4b04      	ldr	r3, [pc, #16]	; (9b58 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    9b46:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    9b48:	689b      	ldr	r3, [r3, #8]
    9b4a:	b103      	cbz	r3, 9b4e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    9b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    9b4e:	6723      	str	r3, [r4, #112]	; 0x70
}
    9b50:	4640      	mov	r0, r8
    9b52:	b004      	add	sp, #16
    9b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b58:	20001b0c 	.word	0x20001b0c

00009b5c <z_impl_k_thread_create>:
{
    9b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
    9b5e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9b60:	2500      	movs	r5, #0
    9b62:	9505      	str	r5, [sp, #20]
    9b64:	9d10      	ldr	r5, [sp, #64]	; 0x40
    9b66:	9504      	str	r5, [sp, #16]
    9b68:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    9b6a:	9503      	str	r5, [sp, #12]
    9b6c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    9b6e:	9502      	str	r5, [sp, #8]
{
    9b70:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9b74:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    9b76:	9501      	str	r5, [sp, #4]
    9b78:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    9b7a:	9500      	str	r5, [sp, #0]
{
    9b7c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    9b7e:	f7ff ffbb 	bl	9af8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    9b82:	f1b6 3fff 	cmp.w	r6, #4294967295
    9b86:	bf08      	it	eq
    9b88:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    9b8c:	d005      	beq.n	9b9a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    9b8e:	ea56 0307 	orrs.w	r3, r6, r7
    9b92:	d105      	bne.n	9ba0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    9b94:	4620      	mov	r0, r4
    9b96:	f000 fd0b 	bl	a5b0 <z_sched_start>
}
    9b9a:	4620      	mov	r0, r4
    9b9c:	b007      	add	sp, #28
    9b9e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    9ba0:	4903      	ldr	r1, [pc, #12]	; (9bb0 <z_impl_k_thread_create+0x54>)
    9ba2:	463a      	mov	r2, r7
    9ba4:	4633      	mov	r3, r6
    9ba6:	f104 0018 	add.w	r0, r4, #24
    9baa:	f000 ff17 	bl	a9dc <z_add_timeout>
    9bae:	e7f4      	b.n	9b9a <z_impl_k_thread_create+0x3e>
    9bb0:	0000caad 	.word	0x0000caad

00009bb4 <z_init_static_threads>:
{
    9bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    9bb8:	4c29      	ldr	r4, [pc, #164]	; (9c60 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    9bba:	4d2a      	ldr	r5, [pc, #168]	; (9c64 <z_init_static_threads+0xb0>)
{
    9bbc:	b087      	sub	sp, #28
    9bbe:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    9bc0:	42ae      	cmp	r6, r5
    9bc2:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    9bc6:	d30f      	bcc.n	9be8 <z_init_static_threads+0x34>
	k_sched_lock();
    9bc8:	f000 fd42 	bl	a650 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    9bcc:	4c24      	ldr	r4, [pc, #144]	; (9c60 <z_init_static_threads+0xac>)
    9bce:	f8df 9098 	ldr.w	r9, [pc, #152]	; 9c68 <z_init_static_threads+0xb4>
    9bd2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    9bd6:	f240 37e7 	movw	r7, #999	; 0x3e7
    9bda:	42ac      	cmp	r4, r5
    9bdc:	d320      	bcc.n	9c20 <z_init_static_threads+0x6c>
}
    9bde:	b007      	add	sp, #28
    9be0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    9be4:	f000 bd48 	b.w	a678 <k_sched_unlock>
		z_setup_new_thread(
    9be8:	f854 3c04 	ldr.w	r3, [r4, #-4]
    9bec:	9305      	str	r3, [sp, #20]
    9bee:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    9bf2:	9304      	str	r3, [sp, #16]
    9bf4:	f854 3c10 	ldr.w	r3, [r4, #-16]
    9bf8:	9303      	str	r3, [sp, #12]
    9bfa:	f854 3c14 	ldr.w	r3, [r4, #-20]
    9bfe:	9302      	str	r3, [sp, #8]
    9c00:	f854 3c18 	ldr.w	r3, [r4, #-24]
    9c04:	9301      	str	r3, [sp, #4]
    9c06:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    9c0a:	9300      	str	r3, [sp, #0]
    9c0c:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    9c10:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    9c14:	f7ff ff70 	bl	9af8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    9c18:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    9c1c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    9c1e:	e7ce      	b.n	9bbe <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    9c20:	6a63      	ldr	r3, [r4, #36]	; 0x24
    9c22:	1c5a      	adds	r2, r3, #1
    9c24:	d00d      	beq.n	9c42 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    9c26:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    9c2a:	2100      	movs	r1, #0
    9c2c:	4638      	mov	r0, r7
    9c2e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    9c32:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    9c36:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    9c3a:	d104      	bne.n	9c46 <z_init_static_threads+0x92>
	z_sched_start(thread);
    9c3c:	4640      	mov	r0, r8
    9c3e:	f000 fcb7 	bl	a5b0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    9c42:	342c      	adds	r4, #44	; 0x2c
    9c44:	e7c9      	b.n	9bda <z_init_static_threads+0x26>
    9c46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    9c4a:	2300      	movs	r3, #0
    9c4c:	f7f6 fa48 	bl	e0 <__aeabi_uldivmod>
    9c50:	4602      	mov	r2, r0
    9c52:	460b      	mov	r3, r1
    9c54:	f108 0018 	add.w	r0, r8, #24
    9c58:	4649      	mov	r1, r9
    9c5a:	f000 febf 	bl	a9dc <z_add_timeout>
    9c5e:	e7f0      	b.n	9c42 <z_init_static_threads+0x8e>
    9c60:	0000cf08 	.word	0x0000cf08
    9c64:	0000cf08 	.word	0x0000cf08
    9c68:	0000caad 	.word	0x0000caad

00009c6c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    9c6c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    9c6e:	4c0b      	ldr	r4, [pc, #44]	; (9c9c <idle+0x30>)
	return !z_sys_post_kernel;
    9c70:	4d0b      	ldr	r5, [pc, #44]	; (9ca0 <idle+0x34>)
	__asm__ volatile(
    9c72:	f04f 0240 	mov.w	r2, #64	; 0x40
    9c76:	f3ef 8311 	mrs	r3, BASEPRI
    9c7a:	f382 8812 	msr	BASEPRI_MAX, r2
    9c7e:	f3bf 8f6f 	isb	sy
    9c82:	f002 ffc1 	bl	cc08 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    9c86:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    9c88:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    9c8a:	b913      	cbnz	r3, 9c92 <idle+0x26>
	arch_cpu_idle();
    9c8c:	f7f9 ff0a 	bl	3aa4 <arch_cpu_idle>
}
    9c90:	e7ef      	b.n	9c72 <idle+0x6>
    9c92:	f7f8 fef3 	bl	2a7c <pm_system_suspend>
    9c96:	2800      	cmp	r0, #0
    9c98:	d1eb      	bne.n	9c72 <idle+0x6>
    9c9a:	e7f7      	b.n	9c8c <idle+0x20>
    9c9c:	20001b0c 	.word	0x20001b0c
    9ca0:	20001f9e 	.word	0x20001f9e

00009ca4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    9ca4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9ca8:	4604      	mov	r4, r0
    9caa:	4617      	mov	r7, r2
    9cac:	461e      	mov	r6, r3
    9cae:	f04f 0340 	mov.w	r3, #64	; 0x40
    9cb2:	f3ef 8811 	mrs	r8, BASEPRI
    9cb6:	f383 8812 	msr	BASEPRI_MAX, r3
    9cba:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    9cbe:	68c3      	ldr	r3, [r0, #12]
    9cc0:	4a33      	ldr	r2, [pc, #204]	; (9d90 <z_impl_k_mutex_lock+0xec>)
    9cc2:	b17b      	cbz	r3, 9ce4 <z_impl_k_mutex_lock+0x40>
    9cc4:	6880      	ldr	r0, [r0, #8]
    9cc6:	6891      	ldr	r1, [r2, #8]
    9cc8:	4288      	cmp	r0, r1
    9cca:	d019      	beq.n	9d00 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    9ccc:	ea57 0306 	orrs.w	r3, r7, r6
    9cd0:	d118      	bne.n	9d04 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    9cd2:	f388 8811 	msr	BASEPRI, r8
    9cd6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    9cda:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    9cde:	b002      	add	sp, #8
    9ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    9ce4:	6891      	ldr	r1, [r2, #8]
    9ce6:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    9cea:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    9cec:	3301      	adds	r3, #1
    9cee:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    9cf0:	6893      	ldr	r3, [r2, #8]
    9cf2:	60a3      	str	r3, [r4, #8]
    9cf4:	f388 8811 	msr	BASEPRI, r8
    9cf8:	f3bf 8f6f 	isb	sy
		return 0;
    9cfc:	2000      	movs	r0, #0
    9cfe:	e7ee      	b.n	9cde <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    9d00:	6921      	ldr	r1, [r4, #16]
    9d02:	e7f2      	b.n	9cea <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    9d04:	f991 100e 	ldrsb.w	r1, [r1, #14]
    9d08:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    9d0c:	4299      	cmp	r1, r3
    9d0e:	bfa8      	it	ge
    9d10:	4619      	movge	r1, r3
    9d12:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    9d16:	4291      	cmp	r1, r2
    9d18:	bfb8      	it	lt
    9d1a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    9d1c:	428b      	cmp	r3, r1
    9d1e:	dd2e      	ble.n	9d7e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    9d20:	f002 fd3f 	bl	c7a2 <adjust_owner_prio.isra.0>
    9d24:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    9d26:	e9cd 7600 	strd	r7, r6, [sp]
    9d2a:	481a      	ldr	r0, [pc, #104]	; (9d94 <z_impl_k_mutex_lock+0xf0>)
    9d2c:	4622      	mov	r2, r4
    9d2e:	4641      	mov	r1, r8
    9d30:	f000 fbc8 	bl	a4c4 <z_pend_curr>
	if (got_mutex == 0) {
    9d34:	2800      	cmp	r0, #0
    9d36:	d0e1      	beq.n	9cfc <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    9d38:	f04f 0340 	mov.w	r3, #64	; 0x40
    9d3c:	f3ef 8611 	mrs	r6, BASEPRI
    9d40:	f383 8812 	msr	BASEPRI_MAX, r3
    9d44:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    9d48:	68a0      	ldr	r0, [r4, #8]
    9d4a:	b1d0      	cbz	r0, 9d82 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    9d4c:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    9d4e:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9d50:	429c      	cmp	r4, r3
    9d52:	d00a      	beq.n	9d6a <z_impl_k_mutex_lock+0xc6>
    9d54:	b14b      	cbz	r3, 9d6a <z_impl_k_mutex_lock+0xc6>
    9d56:	f993 300e 	ldrsb.w	r3, [r3, #14]
    9d5a:	4299      	cmp	r1, r3
    9d5c:	bfa8      	it	ge
    9d5e:	4619      	movge	r1, r3
    9d60:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    9d64:	4299      	cmp	r1, r3
    9d66:	bfb8      	it	lt
    9d68:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    9d6a:	f002 fd1a 	bl	c7a2 <adjust_owner_prio.isra.0>
    9d6e:	b140      	cbz	r0, 9d82 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    9d70:	4808      	ldr	r0, [pc, #32]	; (9d94 <z_impl_k_mutex_lock+0xf0>)
    9d72:	4631      	mov	r1, r6
    9d74:	f000 fc0a 	bl	a58c <z_reschedule>
	return -EAGAIN;
    9d78:	f06f 000a 	mvn.w	r0, #10
    9d7c:	e7af      	b.n	9cde <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    9d7e:	2500      	movs	r5, #0
    9d80:	e7d1      	b.n	9d26 <z_impl_k_mutex_lock+0x82>
	if (resched) {
    9d82:	2d00      	cmp	r5, #0
    9d84:	d1f4      	bne.n	9d70 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    9d86:	f386 8811 	msr	BASEPRI, r6
    9d8a:	f3bf 8f6f 	isb	sy
    9d8e:	e7f3      	b.n	9d78 <z_impl_k_mutex_lock+0xd4>
    9d90:	20001b0c 	.word	0x20001b0c
    9d94:	20001f9f 	.word	0x20001f9f

00009d98 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    9d98:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    9d9a:	6883      	ldr	r3, [r0, #8]
{
    9d9c:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    9d9e:	b36b      	cbz	r3, 9dfc <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    9da0:	4a19      	ldr	r2, [pc, #100]	; (9e08 <z_impl_k_mutex_unlock+0x70>)
    9da2:	6892      	ldr	r2, [r2, #8]
    9da4:	4293      	cmp	r3, r2
    9da6:	d12c      	bne.n	9e02 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    9da8:	68c3      	ldr	r3, [r0, #12]
    9daa:	2b01      	cmp	r3, #1
    9dac:	d903      	bls.n	9db6 <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    9dae:	3b01      	subs	r3, #1
    9db0:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    9db2:	2000      	movs	r0, #0
}
    9db4:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    9db6:	f04f 0340 	mov.w	r3, #64	; 0x40
    9dba:	f3ef 8511 	mrs	r5, BASEPRI
    9dbe:	f383 8812 	msr	BASEPRI_MAX, r3
    9dc2:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    9dc6:	6901      	ldr	r1, [r0, #16]
    9dc8:	6880      	ldr	r0, [r0, #8]
    9dca:	f002 fcea 	bl	c7a2 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    9dce:	4620      	mov	r0, r4
    9dd0:	f002 fe87 	bl	cae2 <z_unpend_first_thread>
	mutex->owner = new_owner;
    9dd4:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    9dd6:	b158      	cbz	r0, 9df0 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    9dd8:	f990 200e 	ldrsb.w	r2, [r0, #14]
    9ddc:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    9dde:	2200      	movs	r2, #0
    9de0:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    9de2:	f002 fe1f 	bl	ca24 <z_ready_thread>
		z_reschedule(&lock, key);
    9de6:	4809      	ldr	r0, [pc, #36]	; (9e0c <z_impl_k_mutex_unlock+0x74>)
    9de8:	4629      	mov	r1, r5
    9dea:	f000 fbcf 	bl	a58c <z_reschedule>
    9dee:	e7e0      	b.n	9db2 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    9df0:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    9df2:	f385 8811 	msr	BASEPRI, r5
    9df6:	f3bf 8f6f 	isb	sy
    9dfa:	e7da      	b.n	9db2 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    9dfc:	f06f 0015 	mvn.w	r0, #21
    9e00:	e7d8      	b.n	9db4 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    9e02:	f04f 30ff 	mov.w	r0, #4294967295
    9e06:	e7d5      	b.n	9db4 <z_impl_k_mutex_unlock+0x1c>
    9e08:	20001b0c 	.word	0x20001b0c
    9e0c:	20001f9f 	.word	0x20001f9f

00009e10 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    9e10:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9e12:	4611      	mov	r1, r2
	__asm__ volatile(
    9e14:	f04f 0240 	mov.w	r2, #64	; 0x40
    9e18:	f3ef 8511 	mrs	r5, BASEPRI
    9e1c:	f382 8812 	msr	BASEPRI_MAX, r2
    9e20:	f3bf 8f6f 	isb	sy
    9e24:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    9e26:	b19c      	cbz	r4, 9e50 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    9e28:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    9e2a:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    9e2c:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    9e30:	4294      	cmp	r4, r2
	list->head = node;
    9e32:	6003      	str	r3, [r0, #0]
	list->tail = node;
    9e34:	bf08      	it	eq
    9e36:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    9e38:	2101      	movs	r1, #1
    9e3a:	4620      	mov	r0, r4
    9e3c:	f002 fd22 	bl	c884 <z_queue_node_peek>
    9e40:	4604      	mov	r4, r0
	__asm__ volatile(
    9e42:	f385 8811 	msr	BASEPRI, r5
    9e46:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    9e4a:	4620      	mov	r0, r4
    9e4c:	b003      	add	sp, #12
    9e4e:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    9e50:	ea51 0203 	orrs.w	r2, r1, r3
    9e54:	d0f5      	beq.n	9e42 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    9e56:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    9e5a:	e9cd 1300 	strd	r1, r3, [sp]
    9e5e:	4610      	mov	r0, r2
    9e60:	4629      	mov	r1, r5
    9e62:	f000 fb2f 	bl	a4c4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    9e66:	2800      	cmp	r0, #0
    9e68:	d1ef      	bne.n	9e4a <z_impl_k_queue_get+0x3a>
    9e6a:	4b02      	ldr	r3, [pc, #8]	; (9e74 <z_impl_k_queue_get+0x64>)
    9e6c:	689b      	ldr	r3, [r3, #8]
    9e6e:	695c      	ldr	r4, [r3, #20]
    9e70:	e7eb      	b.n	9e4a <z_impl_k_queue_get+0x3a>
    9e72:	bf00      	nop
    9e74:	20001b0c 	.word	0x20001b0c

00009e78 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    9e78:	b538      	push	{r3, r4, r5, lr}
    9e7a:	4604      	mov	r4, r0
	__asm__ volatile(
    9e7c:	f04f 0340 	mov.w	r3, #64	; 0x40
    9e80:	f3ef 8511 	mrs	r5, BASEPRI
    9e84:	f383 8812 	msr	BASEPRI_MAX, r3
    9e88:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    9e8c:	f002 fe29 	bl	cae2 <z_unpend_first_thread>

	if (thread != NULL) {
    9e90:	b148      	cbz	r0, 9ea6 <z_impl_k_sem_give+0x2e>
    9e92:	2200      	movs	r2, #0
    9e94:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    9e96:	f002 fdc5 	bl	ca24 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    9e9a:	4629      	mov	r1, r5
    9e9c:	4805      	ldr	r0, [pc, #20]	; (9eb4 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    9e9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    9ea2:	f000 bb73 	b.w	a58c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    9ea6:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    9eaa:	429a      	cmp	r2, r3
    9eac:	bf18      	it	ne
    9eae:	3301      	addne	r3, #1
    9eb0:	60a3      	str	r3, [r4, #8]
}
    9eb2:	e7f2      	b.n	9e9a <z_impl_k_sem_give+0x22>
    9eb4:	20001f9f 	.word	0x20001f9f

00009eb8 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    9eb8:	b513      	push	{r0, r1, r4, lr}
    9eba:	f04f 0440 	mov.w	r4, #64	; 0x40
    9ebe:	f3ef 8111 	mrs	r1, BASEPRI
    9ec2:	f384 8812 	msr	BASEPRI_MAX, r4
    9ec6:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    9eca:	6884      	ldr	r4, [r0, #8]
    9ecc:	b144      	cbz	r4, 9ee0 <z_impl_k_sem_take+0x28>
		sem->count--;
    9ece:	3c01      	subs	r4, #1
    9ed0:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    9ed2:	f381 8811 	msr	BASEPRI, r1
    9ed6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    9eda:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    9edc:	b002      	add	sp, #8
    9ede:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    9ee0:	ea52 0403 	orrs.w	r4, r2, r3
    9ee4:	d106      	bne.n	9ef4 <z_impl_k_sem_take+0x3c>
    9ee6:	f381 8811 	msr	BASEPRI, r1
    9eea:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    9eee:	f06f 000f 	mvn.w	r0, #15
    9ef2:	e7f3      	b.n	9edc <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    9ef4:	e9cd 2300 	strd	r2, r3, [sp]
    9ef8:	4602      	mov	r2, r0
    9efa:	4802      	ldr	r0, [pc, #8]	; (9f04 <z_impl_k_sem_take+0x4c>)
    9efc:	f000 fae2 	bl	a4c4 <z_pend_curr>
	return ret;
    9f00:	e7ec      	b.n	9edc <z_impl_k_sem_take+0x24>
    9f02:	bf00      	nop
    9f04:	20001f9f 	.word	0x20001f9f

00009f08 <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
    9f08:	b570      	push	{r4, r5, r6, lr}
    9f0a:	4604      	mov	r4, r0
	__asm__ volatile(
    9f0c:	f04f 0340 	mov.w	r3, #64	; 0x40
    9f10:	f3ef 8511 	mrs	r5, BASEPRI
    9f14:	f383 8812 	msr	BASEPRI_MAX, r3
    9f18:	f3bf 8f6f 	isb	sy
    9f1c:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
    9f20:	4620      	mov	r0, r4
    9f22:	f002 fdde 	bl	cae2 <z_unpend_first_thread>
		if (thread == NULL) {
    9f26:	b118      	cbz	r0, 9f30 <z_impl_k_sem_reset+0x28>
    9f28:	6786      	str	r6, [r0, #120]	; 0x78
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
    9f2a:	f002 fd7b 	bl	ca24 <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
    9f2e:	e7f7      	b.n	9f20 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
    9f30:	60a0      	str	r0, [r4, #8]

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
    9f32:	4629      	mov	r1, r5
    9f34:	4802      	ldr	r0, [pc, #8]	; (9f40 <z_impl_k_sem_reset+0x38>)
}
    9f36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
    9f3a:	f000 bb27 	b.w	a58c <z_reschedule>
    9f3e:	bf00      	nop
    9f40:	20001f9f 	.word	0x20001f9f

00009f44 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
    9f44:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
    9f46:	4b09      	ldr	r3, [pc, #36]	; (9f6c <k_sys_work_q_init+0x28>)
    9f48:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    9f4a:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    9f4c:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    9f4e:	9300      	str	r3, [sp, #0]
    9f50:	4907      	ldr	r1, [pc, #28]	; (9f70 <k_sys_work_q_init+0x2c>)
    9f52:	4808      	ldr	r0, [pc, #32]	; (9f74 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    9f54:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    9f58:	f04f 33ff 	mov.w	r3, #4294967295
    9f5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    9f60:	f000 f906 	bl	a170 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    9f64:	4620      	mov	r0, r4
    9f66:	b004      	add	sp, #16
    9f68:	bd10      	pop	{r4, pc}
    9f6a:	bf00      	nop
    9f6c:	0000f8aa 	.word	0x0000f8aa
    9f70:	20003500 	.word	0x20003500
    9f74:	20000ae0 	.word	0x20000ae0

00009f78 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    9f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    9f7c:	4e4a      	ldr	r6, [pc, #296]	; (a0a8 <work_queue_main+0x130>)
    9f7e:	b085      	sub	sp, #20
    9f80:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    9f82:	f04f 38ff 	mov.w	r8, #4294967295
    9f86:	f04f 39ff 	mov.w	r9, #4294967295
    9f8a:	f04f 0340 	mov.w	r3, #64	; 0x40
    9f8e:	f3ef 8711 	mrs	r7, BASEPRI
    9f92:	f383 8812 	msr	BASEPRI_MAX, r3
    9f96:	f3bf 8f6f 	isb	sy
    9f9a:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    9f9e:	b98d      	cbnz	r5, 9fc4 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    9fa0:	2102      	movs	r1, #2
    9fa2:	f104 0098 	add.w	r0, r4, #152	; 0x98
    9fa6:	f002 fc98 	bl	c8da <flag_test_and_clear>
    9faa:	2800      	cmp	r0, #0
    9fac:	d143      	bne.n	a036 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    9fae:	2300      	movs	r3, #0
    9fb0:	e9cd 8900 	strd	r8, r9, [sp]
    9fb4:	9302      	str	r3, [sp, #8]
    9fb6:	f104 0288 	add.w	r2, r4, #136	; 0x88
    9fba:	4639      	mov	r1, r7
    9fbc:	483b      	ldr	r0, [pc, #236]	; (a0ac <work_queue_main+0x134>)
    9fbe:	f000 fc9b 	bl	a8f8 <z_sched_wait>
			continue;
    9fc2:	e7e2      	b.n	9f8a <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9fc4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    9fc8:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    9fca:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9fce:	4295      	cmp	r5, r2
	list->tail = node;
    9fd0:	bf08      	it	eq
    9fd2:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    9fd6:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    9fda:	f043 0302 	orr.w	r3, r3, #2
    9fde:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    9fe2:	68eb      	ldr	r3, [r5, #12]
    9fe4:	f023 0304 	bic.w	r3, r3, #4
    9fe8:	f043 0301 	orr.w	r3, r3, #1
    9fec:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    9fee:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    9ff0:	f387 8811 	msr	BASEPRI, r7
    9ff4:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    9ff8:	4628      	mov	r0, r5
    9ffa:	4798      	blx	r3
	__asm__ volatile(
    9ffc:	f04f 0340 	mov.w	r3, #64	; 0x40
    a000:	f3ef 8b11 	mrs	fp, BASEPRI
    a004:	f383 8812 	msr	BASEPRI_MAX, r3
    a008:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    a00c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    a00e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    a010:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    a014:	d419      	bmi.n	a04a <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    a016:	60ea      	str	r2, [r5, #12]
    a018:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    a01c:	f023 0302 	bic.w	r3, r3, #2
    a020:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    a024:	f38b 8811 	msr	BASEPRI, fp
    a028:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    a02c:	05db      	lsls	r3, r3, #23
    a02e:	d4ac      	bmi.n	9f8a <work_queue_main+0x12>
	z_impl_k_yield();
    a030:	f000 fb46 	bl	a6c0 <z_impl_k_yield>
}
    a034:	e7a9      	b.n	9f8a <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    a036:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    a03a:	2200      	movs	r2, #0
    a03c:	2101      	movs	r1, #1
    a03e:	4628      	mov	r0, r5
    a040:	f002 fda9 	bl	cb96 <z_sched_wake>
    a044:	2800      	cmp	r0, #0
    a046:	d1f8      	bne.n	a03a <work_queue_main+0xc2>
    a048:	e7b1      	b.n	9fae <work_queue_main+0x36>
	return list->head;
    a04a:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    a04c:	f023 0303 	bic.w	r3, r3, #3
    a050:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    a052:	2800      	cmp	r0, #0
    a054:	d0e0      	beq.n	a018 <work_queue_main+0xa0>
	return node->next;
    a056:	2700      	movs	r7, #0
    a058:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    a05c:	463b      	mov	r3, r7
    a05e:	2800      	cmp	r0, #0
    a060:	d0da      	beq.n	a018 <work_queue_main+0xa0>
		if (wc->work == work) {
    a062:	6842      	ldr	r2, [r0, #4]
    a064:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    a066:	4601      	mov	r1, r0
		if (wc->work == work) {
    a068:	d10c      	bne.n	a084 <work_queue_main+0x10c>
	return node->next;
    a06a:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    a06c:	b99f      	cbnz	r7, a096 <work_queue_main+0x11e>
    a06e:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    a070:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    a072:	4282      	cmp	r2, r0
    a074:	d100      	bne.n	a078 <work_queue_main+0x100>
	list->tail = node;
    a076:	6071      	str	r1, [r6, #4]
	parent->next = child;
    a078:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    a07c:	f7ff fefc 	bl	9e78 <z_impl_k_sem_give>
}
    a080:	4639      	mov	r1, r7
    a082:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    a084:	f1ba 0f00 	cmp.w	sl, #0
    a088:	d00b      	beq.n	a0a2 <work_queue_main+0x12a>
	return node->next;
    a08a:	f8da 2000 	ldr.w	r2, [sl]
    a08e:	4650      	mov	r0, sl
    a090:	460f      	mov	r7, r1
    a092:	4692      	mov	sl, r2
    a094:	e7e3      	b.n	a05e <work_queue_main+0xe6>
	parent->next = child;
    a096:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    a098:	6872      	ldr	r2, [r6, #4]
    a09a:	4282      	cmp	r2, r0
	list->tail = node;
    a09c:	bf08      	it	eq
    a09e:	6077      	streq	r7, [r6, #4]
}
    a0a0:	e7ea      	b.n	a078 <work_queue_main+0x100>
    a0a2:	4652      	mov	r2, sl
    a0a4:	e7f3      	b.n	a08e <work_queue_main+0x116>
    a0a6:	bf00      	nop
    a0a8:	20001b30 	.word	0x20001b30
    a0ac:	20001f9f 	.word	0x20001f9f

0000a0b0 <submit_to_queue_locked>:
{
    a0b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    a0b2:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    a0b4:	079a      	lsls	r2, r3, #30
{
    a0b6:	4604      	mov	r4, r0
    a0b8:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    a0ba:	f3c3 0640 	ubfx	r6, r3, #1, #1
    a0be:	d42c      	bmi.n	a11a <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    a0c0:	075b      	lsls	r3, r3, #29
    a0c2:	d41a      	bmi.n	a0fa <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    a0c4:	680b      	ldr	r3, [r1, #0]
    a0c6:	b90b      	cbnz	r3, a0cc <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    a0c8:	6883      	ldr	r3, [r0, #8]
    a0ca:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    a0cc:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    a0ce:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    a0d0:	bf44      	itt	mi
    a0d2:	68a3      	ldrmi	r3, [r4, #8]
    a0d4:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    a0d6:	683d      	ldr	r5, [r7, #0]
			ret = 2;
    a0d8:	bf4c      	ite	mi
    a0da:	2602      	movmi	r6, #2
		ret = 1;
    a0dc:	2601      	movpl	r6, #1
	if (queue == NULL) {
    a0de:	2d00      	cmp	r5, #0
    a0e0:	d03a      	beq.n	a158 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    a0e2:	4b1f      	ldr	r3, [pc, #124]	; (a160 <submit_to_queue_locked+0xb0>)
    a0e4:	689b      	ldr	r3, [r3, #8]
    a0e6:	42ab      	cmp	r3, r5
    a0e8:	d00a      	beq.n	a100 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    a0ea:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    a0ee:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    a0f0:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    a0f4:	d414      	bmi.n	a120 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    a0f6:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    a0fa:	2300      	movs	r3, #0
    a0fc:	603b      	str	r3, [r7, #0]
	return ret;
    a0fe:	e025      	b.n	a14c <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    a100:	f002 fb3b 	bl	c77a <k_is_in_isr>
    a104:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    a108:	2800      	cmp	r0, #0
    a10a:	d1f0      	bne.n	a0ee <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    a10c:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    a10e:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    a112:	d5f0      	bpl.n	a0f6 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    a114:	b152      	cbz	r2, a12c <submit_to_queue_locked+0x7c>
    a116:	075b      	lsls	r3, r3, #29
    a118:	d408      	bmi.n	a12c <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    a11a:	f06f 060f 	mvn.w	r6, #15
    a11e:	e7ec      	b.n	a0fa <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    a120:	2a00      	cmp	r2, #0
    a122:	d1fa      	bne.n	a11a <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    a124:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    a128:	2b00      	cmp	r3, #0
    a12a:	d1f6      	bne.n	a11a <submit_to_queue_locked+0x6a>
	parent->next = child;
    a12c:	2300      	movs	r3, #0
    a12e:	6023      	str	r3, [r4, #0]
	return list->tail;
    a130:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    a134:	b963      	cbnz	r3, a150 <submit_to_queue_locked+0xa0>
	list->head = node;
    a136:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
    a13a:	4628      	mov	r0, r5
    a13c:	f002 fbd8 	bl	c8f0 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    a140:	68e3      	ldr	r3, [r4, #12]
    a142:	f043 0304 	orr.w	r3, r3, #4
    a146:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    a148:	683b      	ldr	r3, [r7, #0]
    a14a:	60a3      	str	r3, [r4, #8]
}
    a14c:	4630      	mov	r0, r6
    a14e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    a150:	601c      	str	r4, [r3, #0]
	list->tail = node;
    a152:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
    a156:	e7f0      	b.n	a13a <submit_to_queue_locked+0x8a>
		return -EINVAL;
    a158:	f06f 0615 	mvn.w	r6, #21
    a15c:	e7cd      	b.n	a0fa <submit_to_queue_locked+0x4a>
    a15e:	bf00      	nop
    a160:	20001b0c 	.word	0x20001b0c

0000a164 <k_work_submit>:
{
    a164:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    a166:	4801      	ldr	r0, [pc, #4]	; (a16c <k_work_submit+0x8>)
    a168:	f002 bc05 	b.w	c976 <k_work_submit_to_queue>
    a16c:	20000ae0 	.word	0x20000ae0

0000a170 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    a170:	b5f0      	push	{r4, r5, r6, r7, lr}
    a172:	b089      	sub	sp, #36	; 0x24
    a174:	4604      	mov	r4, r0
	list->head = NULL;
    a176:	2000      	movs	r0, #0
	list->tail = NULL;
    a178:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    a17c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    a17e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    a182:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    a186:	f104 0090 	add.w	r0, r4, #144	; 0x90
    a18a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    a18e:	b31d      	cbz	r5, a1d8 <k_work_queue_start+0x68>
    a190:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    a192:	2800      	cmp	r0, #0
    a194:	f240 1001 	movw	r0, #257	; 0x101
    a198:	bf08      	it	eq
    a19a:	2001      	moveq	r0, #1
	*flagp = flags;
    a19c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a1a0:	2000      	movs	r0, #0
    a1a2:	f04f 36ff 	mov.w	r6, #4294967295
    a1a6:	f04f 37ff 	mov.w	r7, #4294967295
    a1aa:	e9cd 3003 	strd	r3, r0, [sp, #12]
    a1ae:	e9cd 0001 	strd	r0, r0, [sp, #4]
    a1b2:	e9cd 6706 	strd	r6, r7, [sp, #24]
    a1b6:	4b09      	ldr	r3, [pc, #36]	; (a1dc <k_work_queue_start+0x6c>)
    a1b8:	9400      	str	r4, [sp, #0]
    a1ba:	4620      	mov	r0, r4
    a1bc:	f7ff fcce 	bl	9b5c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    a1c0:	b125      	cbz	r5, a1cc <k_work_queue_start+0x5c>
    a1c2:	6829      	ldr	r1, [r5, #0]
    a1c4:	b111      	cbz	r1, a1cc <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    a1c6:	4620      	mov	r0, r4
    a1c8:	f002 fadd 	bl	c786 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    a1cc:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    a1ce:	b009      	add	sp, #36	; 0x24
    a1d0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    a1d4:	f002 badc 	b.w	c790 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    a1d8:	2001      	movs	r0, #1
    a1da:	e7df      	b.n	a19c <k_work_queue_start+0x2c>
    a1dc:	00009f79 	.word	0x00009f79

0000a1e0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    a1e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    a1e2:	9001      	str	r0, [sp, #4]
    a1e4:	4608      	mov	r0, r1
	__asm__ volatile(
    a1e6:	f04f 0140 	mov.w	r1, #64	; 0x40
    a1ea:	f3ef 8411 	mrs	r4, BASEPRI
    a1ee:	f381 8812 	msr	BASEPRI_MAX, r1
    a1f2:	f3bf 8f6f 	isb	sy
	return *flagp;
    a1f6:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    a1f8:	f011 0f0e 	tst.w	r1, #14
    a1fc:	d116      	bne.n	a22c <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a1fe:	ea53 0502 	orrs.w	r5, r3, r2
    a202:	d108      	bne.n	a216 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    a204:	a901      	add	r1, sp, #4
    a206:	f7ff ff53 	bl	a0b0 <submit_to_queue_locked>
	__asm__ volatile(
    a20a:	f384 8811 	msr	BASEPRI, r4
    a20e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    a212:	b003      	add	sp, #12
    a214:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
    a216:	f041 0108 	orr.w	r1, r1, #8
    a21a:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    a21c:	9901      	ldr	r1, [sp, #4]
    a21e:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    a220:	3010      	adds	r0, #16
    a222:	4903      	ldr	r1, [pc, #12]	; (a230 <k_work_schedule_for_queue+0x50>)
    a224:	f000 fbda 	bl	a9dc <z_add_timeout>
	return ret;
    a228:	2001      	movs	r0, #1
    a22a:	e7ee      	b.n	a20a <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    a22c:	2000      	movs	r0, #0
    a22e:	e7ec      	b.n	a20a <k_work_schedule_for_queue+0x2a>
    a230:	0000c8ff 	.word	0x0000c8ff

0000a234 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
    a234:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
    a236:	4801      	ldr	r0, [pc, #4]	; (a23c <k_work_schedule+0x8>)
    a238:	f7ff bfd2 	b.w	a1e0 <k_work_schedule_for_queue>
    a23c:	20000ae0 	.word	0x20000ae0

0000a240 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    a240:	89c3      	ldrh	r3, [r0, #14]
    a242:	2b7f      	cmp	r3, #127	; 0x7f
    a244:	d812      	bhi.n	a26c <sliceable+0x2c>
	int ret = slice_ticks;
    a246:	4b0a      	ldr	r3, [pc, #40]	; (a270 <sliceable+0x30>)
    a248:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    a24a:	b163      	cbz	r3, a266 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    a24c:	4b09      	ldr	r3, [pc, #36]	; (a274 <sliceable+0x34>)
    a24e:	f990 200e 	ldrsb.w	r2, [r0, #14]
    a252:	681b      	ldr	r3, [r3, #0]
    a254:	429a      	cmp	r2, r3
    a256:	db09      	blt.n	a26c <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    a258:	7b43      	ldrb	r3, [r0, #13]
    a25a:	06db      	lsls	r3, r3, #27
    a25c:	d106      	bne.n	a26c <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    a25e:	4b06      	ldr	r3, [pc, #24]	; (a278 <sliceable+0x38>)
    a260:	1ac3      	subs	r3, r0, r3
    a262:	bf18      	it	ne
    a264:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    a266:	f003 0001 	and.w	r0, r3, #1
    a26a:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    a26c:	2300      	movs	r3, #0
    a26e:	e7fa      	b.n	a266 <sliceable+0x26>
    a270:	20001b40 	.word	0x20001b40
    a274:	20001b3c 	.word	0x20001b3c
    a278:	200009e0 	.word	0x200009e0

0000a27c <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    a27c:	4b04      	ldr	r3, [pc, #16]	; (a290 <slice_timeout+0x14>)
    a27e:	1ac0      	subs	r0, r0, r3
    a280:	4b04      	ldr	r3, [pc, #16]	; (a294 <slice_timeout+0x18>)
    a282:	10c0      	asrs	r0, r0, #3
    a284:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    a286:	4b04      	ldr	r3, [pc, #16]	; (a298 <slice_timeout+0x1c>)
    a288:	2201      	movs	r2, #1
    a28a:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    a28c:	4770      	bx	lr
    a28e:	bf00      	nop
    a290:	20000b80 	.word	0x20000b80
    a294:	aaaaaaab 	.word	0xaaaaaaab
    a298:	20001f9f 	.word	0x20001f9f

0000a29c <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    a29c:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    a29e:	4b0e      	ldr	r3, [pc, #56]	; (a2d8 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    a2a0:	4c0e      	ldr	r4, [pc, #56]	; (a2dc <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    a2a2:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    a2a4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    a2a8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    a2ac:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    a2ae:	4620      	mov	r0, r4
    a2b0:	f002 fc94 	bl	cbdc <z_abort_timeout>
	slice_expired[cpu] = false;
    a2b4:	4b0a      	ldr	r3, [pc, #40]	; (a2e0 <z_reset_time_slice+0x44>)
    a2b6:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    a2b8:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    a2ba:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    a2bc:	f7ff ffc0 	bl	a240 <sliceable>
    a2c0:	b148      	cbz	r0, a2d6 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    a2c2:	4b08      	ldr	r3, [pc, #32]	; (a2e4 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    a2c4:	4908      	ldr	r1, [pc, #32]	; (a2e8 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    a2c6:	681a      	ldr	r2, [r3, #0]
    a2c8:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    a2ca:	4620      	mov	r0, r4
    a2cc:	17d3      	asrs	r3, r2, #31
	}
}
    a2ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    a2d2:	f000 bb83 	b.w	a9dc <z_add_timeout>
}
    a2d6:	bd70      	pop	{r4, r5, r6, pc}
    a2d8:	20001b0c 	.word	0x20001b0c
    a2dc:	20000b80 	.word	0x20000b80
    a2e0:	20001f9f 	.word	0x20001f9f
    a2e4:	20001b40 	.word	0x20001b40
    a2e8:	0000a27d 	.word	0x0000a27d

0000a2ec <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    a2ec:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    a2ee:	4d0d      	ldr	r5, [pc, #52]	; (a324 <update_cache+0x38>)
    a2f0:	462b      	mov	r3, r5
    a2f2:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a2f6:	429c      	cmp	r4, r3
    a2f8:	d000      	beq.n	a2fc <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    a2fa:	b904      	cbnz	r4, a2fe <update_cache+0x12>
    a2fc:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    a2fe:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    a300:	b938      	cbnz	r0, a312 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    a302:	7b5a      	ldrb	r2, [r3, #13]
    a304:	06d2      	lsls	r2, r2, #27
    a306:	d104      	bne.n	a312 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    a308:	69a2      	ldr	r2, [r4, #24]
    a30a:	b912      	cbnz	r2, a312 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    a30c:	89da      	ldrh	r2, [r3, #14]
    a30e:	2a7f      	cmp	r2, #127	; 0x7f
    a310:	d805      	bhi.n	a31e <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    a312:	429c      	cmp	r4, r3
    a314:	d002      	beq.n	a31c <update_cache+0x30>
			z_reset_time_slice(thread);
    a316:	4620      	mov	r0, r4
    a318:	f7ff ffc0 	bl	a29c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    a31c:	4623      	mov	r3, r4
    a31e:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    a320:	bd38      	pop	{r3, r4, r5, pc}
    a322:	bf00      	nop
    a324:	20001b0c 	.word	0x20001b0c

0000a328 <move_thread_to_end_of_prio_q>:
{
    a328:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    a32a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    a32e:	7b43      	ldrb	r3, [r0, #13]
    a330:	2a00      	cmp	r2, #0
{
    a332:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    a334:	da04      	bge.n	a340 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a336:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a33a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    a33c:	f002 fb38 	bl	c9b0 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    a340:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    a342:	4a15      	ldr	r2, [pc, #84]	; (a398 <move_thread_to_end_of_prio_q+0x70>)
    a344:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a348:	4610      	mov	r0, r2
    a34a:	734b      	strb	r3, [r1, #13]
    a34c:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    a350:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a352:	4283      	cmp	r3, r0
    a354:	bf08      	it	eq
    a356:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a358:	b923      	cbnz	r3, a364 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    a35a:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    a35e:	6021      	str	r1, [r4, #0]
	list->tail = node;
    a360:	6211      	str	r1, [r2, #32]
}
    a362:	e00c      	b.n	a37e <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    a364:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    a368:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    a36c:	42b5      	cmp	r5, r6
    a36e:	d00e      	beq.n	a38e <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a370:	42ae      	cmp	r6, r5
    a372:	dd0c      	ble.n	a38e <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    a374:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    a376:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    a37a:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    a37c:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    a37e:	6890      	ldr	r0, [r2, #8]
    a380:	1a43      	subs	r3, r0, r1
    a382:	4258      	negs	r0, r3
}
    a384:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    a388:	4158      	adcs	r0, r3
    a38a:	f7ff bfaf 	b.w	a2ec <update_cache>
	return (node == list->tail) ? NULL : node->next;
    a38e:	429c      	cmp	r4, r3
    a390:	d0e3      	beq.n	a35a <move_thread_to_end_of_prio_q+0x32>
    a392:	681b      	ldr	r3, [r3, #0]
    a394:	e7e0      	b.n	a358 <move_thread_to_end_of_prio_q+0x30>
    a396:	bf00      	nop
    a398:	20001b0c 	.word	0x20001b0c

0000a39c <ready_thread>:
{
    a39c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    a39e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    a3a2:	7b42      	ldrb	r2, [r0, #13]
    a3a4:	2b00      	cmp	r3, #0
    a3a6:	db29      	blt.n	a3fc <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    a3a8:	06d3      	lsls	r3, r2, #27
    a3aa:	d127      	bne.n	a3fc <ready_thread+0x60>
	return node->next != NULL;
    a3ac:	6983      	ldr	r3, [r0, #24]
    a3ae:	bb2b      	cbnz	r3, a3fc <ready_thread+0x60>
	return list->head == list;
    a3b0:	4913      	ldr	r1, [pc, #76]	; (a400 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    a3b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    a3b6:	7342      	strb	r2, [r0, #13]
    a3b8:	460a      	mov	r2, r1
    a3ba:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a3be:	4294      	cmp	r4, r2
    a3c0:	bf18      	it	ne
    a3c2:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    a3c4:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a3c6:	b923      	cbnz	r3, a3d2 <ready_thread+0x36>
	node->prev = tail;
    a3c8:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    a3cc:	6020      	str	r0, [r4, #0]
	list->tail = node;
    a3ce:	6208      	str	r0, [r1, #32]
}
    a3d0:	e00c      	b.n	a3ec <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    a3d2:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    a3d6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    a3da:	42b5      	cmp	r5, r6
    a3dc:	d00a      	beq.n	a3f4 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a3de:	42ae      	cmp	r6, r5
    a3e0:	dd08      	ble.n	a3f4 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    a3e2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    a3e4:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    a3e8:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    a3ea:	6058      	str	r0, [r3, #4]
}
    a3ec:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    a3ee:	2000      	movs	r0, #0
    a3f0:	f7ff bf7c 	b.w	a2ec <update_cache>
	return (node == list->tail) ? NULL : node->next;
    a3f4:	42a3      	cmp	r3, r4
    a3f6:	d0e7      	beq.n	a3c8 <ready_thread+0x2c>
    a3f8:	681b      	ldr	r3, [r3, #0]
    a3fa:	e7e4      	b.n	a3c6 <ready_thread+0x2a>
}
    a3fc:	bc70      	pop	{r4, r5, r6}
    a3fe:	4770      	bx	lr
    a400:	20001b0c 	.word	0x20001b0c

0000a404 <unready_thread>:
{
    a404:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    a406:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    a40a:	7b43      	ldrb	r3, [r0, #13]
    a40c:	2a00      	cmp	r2, #0
{
    a40e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    a410:	da04      	bge.n	a41c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a416:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    a418:	f002 faca 	bl	c9b0 <sys_dlist_remove>
	update_cache(thread == _current);
    a41c:	4b04      	ldr	r3, [pc, #16]	; (a430 <unready_thread+0x2c>)
    a41e:	6898      	ldr	r0, [r3, #8]
    a420:	1a43      	subs	r3, r0, r1
    a422:	4258      	negs	r0, r3
    a424:	4158      	adcs	r0, r3
}
    a426:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    a42a:	f7ff bf5f 	b.w	a2ec <update_cache>
    a42e:	bf00      	nop
    a430:	20001b0c 	.word	0x20001b0c

0000a434 <pend_locked>:
{
    a434:	b570      	push	{r4, r5, r6, lr}
    a436:	4615      	mov	r5, r2
    a438:	461c      	mov	r4, r3
    a43a:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    a43c:	f002 faca 	bl	c9d4 <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a440:	f1b4 3fff 	cmp.w	r4, #4294967295
    a444:	bf08      	it	eq
    a446:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    a44a:	d008      	beq.n	a45e <pend_locked+0x2a>
    a44c:	462a      	mov	r2, r5
    a44e:	4623      	mov	r3, r4
    a450:	f106 0018 	add.w	r0, r6, #24
    a454:	4902      	ldr	r1, [pc, #8]	; (a460 <pend_locked+0x2c>)
}
    a456:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a45a:	f000 babf 	b.w	a9dc <z_add_timeout>
    a45e:	bd70      	pop	{r4, r5, r6, pc}
    a460:	0000caad 	.word	0x0000caad

0000a464 <z_time_slice>:
{
    a464:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    a466:	f04f 0340 	mov.w	r3, #64	; 0x40
    a46a:	f3ef 8511 	mrs	r5, BASEPRI
    a46e:	f383 8812 	msr	BASEPRI_MAX, r3
    a472:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    a476:	4b10      	ldr	r3, [pc, #64]	; (a4b8 <z_time_slice+0x54>)
	if (pending_current == curr) {
    a478:	4a10      	ldr	r2, [pc, #64]	; (a4bc <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    a47a:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    a47c:	6810      	ldr	r0, [r2, #0]
    a47e:	42a0      	cmp	r0, r4
    a480:	d106      	bne.n	a490 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    a482:	f7ff ff0b 	bl	a29c <z_reset_time_slice>
	__asm__ volatile(
    a486:	f385 8811 	msr	BASEPRI, r5
    a48a:	f3bf 8f6f 	isb	sy
}
    a48e:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    a490:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    a492:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    a494:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    a496:	4a0a      	ldr	r2, [pc, #40]	; (a4c0 <z_time_slice+0x5c>)
    a498:	5cd3      	ldrb	r3, [r2, r3]
    a49a:	2b00      	cmp	r3, #0
    a49c:	d0f3      	beq.n	a486 <z_time_slice+0x22>
    a49e:	4620      	mov	r0, r4
    a4a0:	f7ff fece 	bl	a240 <sliceable>
    a4a4:	2800      	cmp	r0, #0
    a4a6:	d0ee      	beq.n	a486 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    a4a8:	7b63      	ldrb	r3, [r4, #13]
    a4aa:	06db      	lsls	r3, r3, #27
    a4ac:	d102      	bne.n	a4b4 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    a4ae:	4620      	mov	r0, r4
    a4b0:	f7ff ff3a 	bl	a328 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    a4b4:	4620      	mov	r0, r4
    a4b6:	e7e4      	b.n	a482 <z_time_slice+0x1e>
    a4b8:	20001b0c 	.word	0x20001b0c
    a4bc:	20001b38 	.word	0x20001b38
    a4c0:	20001f9f 	.word	0x20001f9f

0000a4c4 <z_pend_curr>:
{
    a4c4:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    a4c6:	480c      	ldr	r0, [pc, #48]	; (a4f8 <z_pend_curr+0x34>)
    a4c8:	4d0c      	ldr	r5, [pc, #48]	; (a4fc <z_pend_curr+0x38>)
    a4ca:	6886      	ldr	r6, [r0, #8]
    a4cc:	602e      	str	r6, [r5, #0]
{
    a4ce:	460c      	mov	r4, r1
    a4d0:	4611      	mov	r1, r2
    a4d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    a4d6:	f04f 0640 	mov.w	r6, #64	; 0x40
    a4da:	f3ef 8511 	mrs	r5, BASEPRI
    a4de:	f386 8812 	msr	BASEPRI_MAX, r6
    a4e2:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    a4e6:	6880      	ldr	r0, [r0, #8]
    a4e8:	f7ff ffa4 	bl	a434 <pend_locked>
	ret = arch_swap(key);
    a4ec:	4620      	mov	r0, r4
}
    a4ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a4f2:	f7f9 bbc9 	b.w	3c88 <arch_swap>
    a4f6:	bf00      	nop
    a4f8:	20001b0c 	.word	0x20001b0c
    a4fc:	20001b38 	.word	0x20001b38

0000a500 <z_set_prio>:
{
    a500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a502:	4604      	mov	r4, r0
    a504:	f04f 0340 	mov.w	r3, #64	; 0x40
    a508:	f3ef 8611 	mrs	r6, BASEPRI
    a50c:	f383 8812 	msr	BASEPRI_MAX, r3
    a510:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    a514:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    a516:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    a518:	b249      	sxtb	r1, r1
    a51a:	d119      	bne.n	a550 <z_set_prio+0x50>
	return node->next != NULL;
    a51c:	6985      	ldr	r5, [r0, #24]
    a51e:	b9bd      	cbnz	r5, a550 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a520:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a524:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    a526:	f002 fa43 	bl	c9b0 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    a52a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    a52c:	4a16      	ldr	r2, [pc, #88]	; (a588 <z_set_prio+0x88>)
				thread->base.prio = prio;
    a52e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    a530:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a534:	7343      	strb	r3, [r0, #13]
    a536:	4613      	mov	r3, r2
    a538:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a53c:	4298      	cmp	r0, r3
    a53e:	bf18      	it	ne
    a540:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    a542:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a544:	b95d      	cbnz	r5, a55e <z_set_prio+0x5e>
	node->prev = tail;
    a546:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    a54a:	6004      	str	r4, [r0, #0]
	list->tail = node;
    a54c:	6214      	str	r4, [r2, #32]
}
    a54e:	e011      	b.n	a574 <z_set_prio+0x74>
			thread->base.prio = prio;
    a550:	73a1      	strb	r1, [r4, #14]
    a552:	2000      	movs	r0, #0
	__asm__ volatile(
    a554:	f386 8811 	msr	BASEPRI, r6
    a558:	f3bf 8f6f 	isb	sy
}
    a55c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    a55e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    a562:	42b9      	cmp	r1, r7
    a564:	d00b      	beq.n	a57e <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a566:	428f      	cmp	r7, r1
    a568:	dd09      	ble.n	a57e <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    a56a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    a56c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    a570:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    a572:	606c      	str	r4, [r5, #4]
			update_cache(1);
    a574:	2001      	movs	r0, #1
    a576:	f7ff feb9 	bl	a2ec <update_cache>
    a57a:	2001      	movs	r0, #1
    a57c:	e7ea      	b.n	a554 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    a57e:	42a8      	cmp	r0, r5
    a580:	d0e1      	beq.n	a546 <z_set_prio+0x46>
    a582:	682d      	ldr	r5, [r5, #0]
    a584:	e7de      	b.n	a544 <z_set_prio+0x44>
    a586:	bf00      	nop
    a588:	20001b0c 	.word	0x20001b0c

0000a58c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    a58c:	b949      	cbnz	r1, a5a2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    a58e:	f3ef 8005 	mrs	r0, IPSR
    a592:	b930      	cbnz	r0, a5a2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    a594:	4b05      	ldr	r3, [pc, #20]	; (a5ac <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    a596:	699a      	ldr	r2, [r3, #24]
    a598:	689b      	ldr	r3, [r3, #8]
    a59a:	429a      	cmp	r2, r3
    a59c:	d001      	beq.n	a5a2 <z_reschedule+0x16>
    a59e:	f7f9 bb73 	b.w	3c88 <arch_swap>
    a5a2:	f381 8811 	msr	BASEPRI, r1
    a5a6:	f3bf 8f6f 	isb	sy
}
    a5aa:	4770      	bx	lr
    a5ac:	20001b0c 	.word	0x20001b0c

0000a5b0 <z_sched_start>:
{
    a5b0:	b510      	push	{r4, lr}
	__asm__ volatile(
    a5b2:	f04f 0240 	mov.w	r2, #64	; 0x40
    a5b6:	f3ef 8411 	mrs	r4, BASEPRI
    a5ba:	f382 8812 	msr	BASEPRI_MAX, r2
    a5be:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    a5c2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    a5c4:	0751      	lsls	r1, r2, #29
    a5c6:	d404      	bmi.n	a5d2 <z_sched_start+0x22>
	__asm__ volatile(
    a5c8:	f384 8811 	msr	BASEPRI, r4
    a5cc:	f3bf 8f6f 	isb	sy
}
    a5d0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a5d2:	f022 0204 	bic.w	r2, r2, #4
    a5d6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    a5d8:	f7ff fee0 	bl	a39c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    a5dc:	4621      	mov	r1, r4
    a5de:	4802      	ldr	r0, [pc, #8]	; (a5e8 <z_sched_start+0x38>)
}
    a5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    a5e4:	f7ff bfd2 	b.w	a58c <z_reschedule>
    a5e8:	20001fa0 	.word	0x20001fa0

0000a5ec <z_impl_k_thread_suspend>:
{
    a5ec:	b570      	push	{r4, r5, r6, lr}
    a5ee:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    a5f0:	3018      	adds	r0, #24
    a5f2:	f002 faf3 	bl	cbdc <z_abort_timeout>
	__asm__ volatile(
    a5f6:	f04f 0340 	mov.w	r3, #64	; 0x40
    a5fa:	f3ef 8611 	mrs	r6, BASEPRI
    a5fe:	f383 8812 	msr	BASEPRI_MAX, r3
    a602:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    a606:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    a60a:	7b63      	ldrb	r3, [r4, #13]
    a60c:	2a00      	cmp	r2, #0
    a60e:	da05      	bge.n	a61c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a614:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    a616:	4620      	mov	r0, r4
    a618:	f002 f9ca 	bl	c9b0 <sys_dlist_remove>
		update_cache(thread == _current);
    a61c:	4d0b      	ldr	r5, [pc, #44]	; (a64c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    a61e:	7b63      	ldrb	r3, [r4, #13]
    a620:	68a8      	ldr	r0, [r5, #8]
    a622:	f043 0310 	orr.w	r3, r3, #16
    a626:	7363      	strb	r3, [r4, #13]
    a628:	1b03      	subs	r3, r0, r4
    a62a:	4258      	negs	r0, r3
    a62c:	4158      	adcs	r0, r3
    a62e:	f7ff fe5d 	bl	a2ec <update_cache>
	__asm__ volatile(
    a632:	f386 8811 	msr	BASEPRI, r6
    a636:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    a63a:	68ab      	ldr	r3, [r5, #8]
    a63c:	42a3      	cmp	r3, r4
    a63e:	d103      	bne.n	a648 <z_impl_k_thread_suspend+0x5c>
}
    a640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    a644:	f002 ba8d 	b.w	cb62 <z_reschedule_unlocked>
}
    a648:	bd70      	pop	{r4, r5, r6, pc}
    a64a:	bf00      	nop
    a64c:	20001b0c 	.word	0x20001b0c

0000a650 <k_sched_lock>:
	__asm__ volatile(
    a650:	f04f 0340 	mov.w	r3, #64	; 0x40
    a654:	f3ef 8111 	mrs	r1, BASEPRI
    a658:	f383 8812 	msr	BASEPRI_MAX, r3
    a65c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    a660:	4b04      	ldr	r3, [pc, #16]	; (a674 <k_sched_lock+0x24>)
    a662:	689a      	ldr	r2, [r3, #8]
    a664:	7bd3      	ldrb	r3, [r2, #15]
    a666:	3b01      	subs	r3, #1
    a668:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    a66a:	f381 8811 	msr	BASEPRI, r1
    a66e:	f3bf 8f6f 	isb	sy
}
    a672:	4770      	bx	lr
    a674:	20001b0c 	.word	0x20001b0c

0000a678 <k_sched_unlock>:
{
    a678:	b510      	push	{r4, lr}
	__asm__ volatile(
    a67a:	f04f 0340 	mov.w	r3, #64	; 0x40
    a67e:	f3ef 8411 	mrs	r4, BASEPRI
    a682:	f383 8812 	msr	BASEPRI_MAX, r3
    a686:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    a68a:	4b08      	ldr	r3, [pc, #32]	; (a6ac <k_sched_unlock+0x34>)
    a68c:	689a      	ldr	r2, [r3, #8]
    a68e:	7bd3      	ldrb	r3, [r2, #15]
    a690:	3301      	adds	r3, #1
    a692:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    a694:	2000      	movs	r0, #0
    a696:	f7ff fe29 	bl	a2ec <update_cache>
	__asm__ volatile(
    a69a:	f384 8811 	msr	BASEPRI, r4
    a69e:	f3bf 8f6f 	isb	sy
}
    a6a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    a6a6:	f002 ba5c 	b.w	cb62 <z_reschedule_unlocked>
    a6aa:	bf00      	nop
    a6ac:	20001b0c 	.word	0x20001b0c

0000a6b0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    a6b0:	4b02      	ldr	r3, [pc, #8]	; (a6bc <z_sched_init+0xc>)
    a6b2:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    a6b6:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    a6ba:	4770      	bx	lr
    a6bc:	20001b0c 	.word	0x20001b0c

0000a6c0 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    a6c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    a6c2:	f04f 0340 	mov.w	r3, #64	; 0x40
    a6c6:	f3ef 8511 	mrs	r5, BASEPRI
    a6ca:	f383 8812 	msr	BASEPRI_MAX, r3
    a6ce:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    a6d2:	4919      	ldr	r1, [pc, #100]	; (a738 <z_impl_k_yield+0x78>)
    a6d4:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a6d6:	7b43      	ldrb	r3, [r0, #13]
    a6d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    a6dc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    a6de:	f002 f967 	bl	c9b0 <sys_dlist_remove>
	}
	queue_thread(_current);
    a6e2:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    a6e4:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    a6e6:	4608      	mov	r0, r1
    a6e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    a6ec:	735a      	strb	r2, [r3, #13]
    a6ee:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    a6f2:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a6f4:	4282      	cmp	r2, r0
    a6f6:	bf08      	it	eq
    a6f8:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    a6fa:	b922      	cbnz	r2, a706 <z_impl_k_yield+0x46>
	node->prev = tail;
    a6fc:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    a700:	6023      	str	r3, [r4, #0]
	list->tail = node;
    a702:	620b      	str	r3, [r1, #32]
}
    a704:	e00c      	b.n	a720 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    a706:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    a70a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    a70e:	42be      	cmp	r6, r7
    a710:	d00e      	beq.n	a730 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    a712:	42b7      	cmp	r7, r6
    a714:	dd0c      	ble.n	a730 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    a716:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    a718:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    a71c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    a71e:	6053      	str	r3, [r2, #4]
	update_cache(1);
    a720:	2001      	movs	r0, #1
    a722:	f7ff fde3 	bl	a2ec <update_cache>
    a726:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    a728:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    a72c:	f7f9 baac 	b.w	3c88 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    a730:	42a2      	cmp	r2, r4
    a732:	d0e3      	beq.n	a6fc <z_impl_k_yield+0x3c>
    a734:	6812      	ldr	r2, [r2, #0]
    a736:	e7e0      	b.n	a6fa <z_impl_k_yield+0x3a>
    a738:	20001b0c 	.word	0x20001b0c

0000a73c <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    a73c:	ea50 0301 	orrs.w	r3, r0, r1
{
    a740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a744:	4605      	mov	r5, r0
    a746:	460e      	mov	r6, r1
	if (ticks == 0) {
    a748:	d103      	bne.n	a752 <z_tick_sleep+0x16>
	z_impl_k_yield();
    a74a:	f7ff ffb9 	bl	a6c0 <z_impl_k_yield>
		k_yield();
		return 0;
    a74e:	2000      	movs	r0, #0
    a750:	e02c      	b.n	a7ac <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    a752:	1c83      	adds	r3, r0, #2
    a754:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    a758:	db2a      	blt.n	a7b0 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    a75a:	f002 fa65 	bl	cc28 <sys_clock_tick_get_32>
    a75e:	182c      	adds	r4, r5, r0
    a760:	f04f 0340 	mov.w	r3, #64	; 0x40
    a764:	f3ef 8811 	mrs	r8, BASEPRI
    a768:	f383 8812 	msr	BASEPRI_MAX, r3
    a76c:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    a770:	4f11      	ldr	r7, [pc, #68]	; (a7b8 <z_tick_sleep+0x7c>)
    a772:	4b12      	ldr	r3, [pc, #72]	; (a7bc <z_tick_sleep+0x80>)
    a774:	68b8      	ldr	r0, [r7, #8]
    a776:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    a778:	f7ff fe44 	bl	a404 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    a77c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    a77e:	4910      	ldr	r1, [pc, #64]	; (a7c0 <z_tick_sleep+0x84>)
    a780:	462a      	mov	r2, r5
    a782:	4633      	mov	r3, r6
    a784:	3018      	adds	r0, #24
    a786:	f000 f929 	bl	a9dc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    a78a:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    a78c:	7b53      	ldrb	r3, [r2, #13]
    a78e:	f043 0310 	orr.w	r3, r3, #16
    a792:	7353      	strb	r3, [r2, #13]
    a794:	4640      	mov	r0, r8
    a796:	f7f9 fa77 	bl	3c88 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    a79a:	f002 fa45 	bl	cc28 <sys_clock_tick_get_32>
    a79e:	1a20      	subs	r0, r4, r0
    a7a0:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    a7a4:	2801      	cmp	r0, #1
    a7a6:	f173 0300 	sbcs.w	r3, r3, #0
    a7aa:	dbd0      	blt.n	a74e <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    a7ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    a7b0:	f06f 0401 	mvn.w	r4, #1
    a7b4:	1a24      	subs	r4, r4, r0
    a7b6:	e7d3      	b.n	a760 <z_tick_sleep+0x24>
    a7b8:	20001b0c 	.word	0x20001b0c
    a7bc:	20001b38 	.word	0x20001b38
    a7c0:	0000caad 	.word	0x0000caad

0000a7c4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a7c4:	f1b1 3fff 	cmp.w	r1, #4294967295
    a7c8:	bf08      	it	eq
    a7ca:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    a7ce:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a7d0:	d106      	bne.n	a7e0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    a7d2:	4b08      	ldr	r3, [pc, #32]	; (a7f4 <z_impl_k_sleep+0x30>)
    a7d4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    a7d6:	f7ff ff09 	bl	a5ec <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    a7da:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    a7de:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    a7e0:	f7ff ffac 	bl	a73c <z_tick_sleep>
    a7e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    a7e8:	fb80 0303 	smull	r0, r3, r0, r3
    a7ec:	0bc0      	lsrs	r0, r0, #15
    a7ee:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    a7f2:	e7f4      	b.n	a7de <z_impl_k_sleep+0x1a>
    a7f4:	20001b0c 	.word	0x20001b0c

0000a7f8 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
    a7f8:	b538      	push	{r3, r4, r5, lr}
    a7fa:	4c0a      	ldr	r4, [pc, #40]	; (a824 <z_impl_k_usleep+0x2c>)
    a7fc:	4a0a      	ldr	r2, [pc, #40]	; (a828 <z_impl_k_usleep+0x30>)
    a7fe:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    a802:	2100      	movs	r1, #0
    a804:	fbc0 4105 	smlal	r4, r1, r0, r5
    a808:	2300      	movs	r3, #0
    a80a:	4620      	mov	r0, r4
    a80c:	f7f5 fc68 	bl	e0 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
    a810:	17c1      	asrs	r1, r0, #31
    a812:	f7ff ff93 	bl	a73c <z_tick_sleep>
    a816:	4b04      	ldr	r3, [pc, #16]	; (a828 <z_impl_k_usleep+0x30>)
    a818:	fb80 0303 	smull	r0, r3, r0, r3
    a81c:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
    a81e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    a822:	bd38      	pop	{r3, r4, r5, pc}
    a824:	000f423f 	.word	0x000f423f
    a828:	000f4240 	.word	0x000f4240

0000a82c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    a82c:	4b01      	ldr	r3, [pc, #4]	; (a834 <z_impl_z_current_get+0x8>)
    a82e:	6898      	ldr	r0, [r3, #8]
    a830:	4770      	bx	lr
    a832:	bf00      	nop
    a834:	20001b0c 	.word	0x20001b0c

0000a838 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    a838:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a83c:	4604      	mov	r4, r0
    a83e:	f04f 0340 	mov.w	r3, #64	; 0x40
    a842:	f3ef 8611 	mrs	r6, BASEPRI
    a846:	f383 8812 	msr	BASEPRI_MAX, r3
    a84a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    a84e:	7b03      	ldrb	r3, [r0, #12]
    a850:	07d9      	lsls	r1, r3, #31
    a852:	d50b      	bpl.n	a86c <z_thread_abort+0x34>
	__asm__ volatile(
    a854:	f386 8811 	msr	BASEPRI, r6
    a858:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    a85c:	4040      	eors	r0, r0
    a85e:	f380 8811 	msr	BASEPRI, r0
    a862:	f04f 0004 	mov.w	r0, #4
    a866:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    a868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    a86c:	7b43      	ldrb	r3, [r0, #13]
    a86e:	071a      	lsls	r2, r3, #28
    a870:	d504      	bpl.n	a87c <z_thread_abort+0x44>
    a872:	f386 8811 	msr	BASEPRI, r6
    a876:	f3bf 8f6f 	isb	sy
    a87a:	e7f5      	b.n	a868 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    a87c:	f023 0220 	bic.w	r2, r3, #32
    a880:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    a884:	09d2      	lsrs	r2, r2, #7
    a886:	d120      	bne.n	a8ca <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    a888:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    a88a:	68a3      	ldr	r3, [r4, #8]
    a88c:	b113      	cbz	r3, a894 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    a88e:	4620      	mov	r0, r4
    a890:	f002 f896 	bl	c9c0 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    a894:	f104 0018 	add.w	r0, r4, #24
    a898:	f002 f9a0 	bl	cbdc <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    a89c:	f104 0758 	add.w	r7, r4, #88	; 0x58
    a8a0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    a8a4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a8a6:	42bd      	cmp	r5, r7
    a8a8:	d000      	beq.n	a8ac <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    a8aa:	b9b5      	cbnz	r5, a8da <z_thread_abort+0xa2>
		update_cache(1);
    a8ac:	2001      	movs	r0, #1
    a8ae:	f7ff fd1d 	bl	a2ec <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    a8b2:	4b10      	ldr	r3, [pc, #64]	; (a8f4 <z_thread_abort+0xbc>)
    a8b4:	689b      	ldr	r3, [r3, #8]
    a8b6:	42a3      	cmp	r3, r4
    a8b8:	d1db      	bne.n	a872 <z_thread_abort+0x3a>
    a8ba:	f3ef 8305 	mrs	r3, IPSR
    a8be:	2b00      	cmp	r3, #0
    a8c0:	d1d7      	bne.n	a872 <z_thread_abort+0x3a>
    a8c2:	4630      	mov	r0, r6
    a8c4:	f7f9 f9e0 	bl	3c88 <arch_swap>
	return ret;
    a8c8:	e7d3      	b.n	a872 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    a8ca:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    a8ce:	f043 0308 	orr.w	r3, r3, #8
    a8d2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    a8d4:	f002 f86c 	bl	c9b0 <sys_dlist_remove>
}
    a8d8:	e7d7      	b.n	a88a <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    a8da:	4628      	mov	r0, r5
    a8dc:	f002 f870 	bl	c9c0 <unpend_thread_no_timeout>
    a8e0:	f105 0018 	add.w	r0, r5, #24
    a8e4:	f002 f97a 	bl	cbdc <z_abort_timeout>
    a8e8:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    a8ec:	4628      	mov	r0, r5
    a8ee:	f7ff fd55 	bl	a39c <ready_thread>
    a8f2:	e7d7      	b.n	a8a4 <z_thread_abort+0x6c>
    a8f4:	20001b0c 	.word	0x20001b0c

0000a8f8 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    a8f8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    a8fa:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    a8fe:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    a900:	e9cd 6700 	strd	r6, r7, [sp]
    a904:	f7ff fdde 	bl	a4c4 <z_pend_curr>

	if (data != NULL) {
    a908:	b11c      	cbz	r4, a912 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    a90a:	4b03      	ldr	r3, [pc, #12]	; (a918 <z_sched_wait+0x20>)
    a90c:	689b      	ldr	r3, [r3, #8]
    a90e:	695b      	ldr	r3, [r3, #20]
    a910:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    a912:	b002      	add	sp, #8
    a914:	bdd0      	pop	{r4, r6, r7, pc}
    a916:	bf00      	nop
    a918:	20001b0c 	.word	0x20001b0c

0000a91c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    a91c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    a91e:	4806      	ldr	r0, [pc, #24]	; (a938 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    a920:	4a06      	ldr	r2, [pc, #24]	; (a93c <z_data_copy+0x20>)
    a922:	4907      	ldr	r1, [pc, #28]	; (a940 <z_data_copy+0x24>)
    a924:	1a12      	subs	r2, r2, r0
    a926:	f001 fee7 	bl	c6f8 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    a92a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    a92e:	4a05      	ldr	r2, [pc, #20]	; (a944 <z_data_copy+0x28>)
    a930:	4905      	ldr	r1, [pc, #20]	; (a948 <z_data_copy+0x2c>)
    a932:	4806      	ldr	r0, [pc, #24]	; (a94c <z_data_copy+0x30>)
    a934:	f001 bee0 	b.w	c6f8 <z_early_memcpy>
    a938:	20000000 	.word	0x20000000
    a93c:	200003f8 	.word	0x200003f8
    a940:	0000f8e4 	.word	0x0000f8e4
    a944:	00000000 	.word	0x00000000
    a948:	0000f8e4 	.word	0x0000f8e4
    a94c:	20000000 	.word	0x20000000

0000a950 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    a950:	4b03      	ldr	r3, [pc, #12]	; (a960 <elapsed+0x10>)
    a952:	681b      	ldr	r3, [r3, #0]
    a954:	b90b      	cbnz	r3, a95a <elapsed+0xa>
    a956:	f7fc b99f 	b.w	6c98 <sys_clock_elapsed>
}
    a95a:	2000      	movs	r0, #0
    a95c:	4770      	bx	lr
    a95e:	bf00      	nop
    a960:	20001b44 	.word	0x20001b44

0000a964 <next_timeout>:

static int32_t next_timeout(void)
{
    a964:	b510      	push	{r4, lr}
	return list->head == list;
    a966:	4b0e      	ldr	r3, [pc, #56]	; (a9a0 <next_timeout+0x3c>)
    a968:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    a96a:	429c      	cmp	r4, r3
    a96c:	d104      	bne.n	a978 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    a96e:	f7ff ffef 	bl	a950 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    a972:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    a976:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    a978:	f7ff ffea 	bl	a950 <elapsed>
	if ((to == NULL) ||
    a97c:	2c00      	cmp	r4, #0
    a97e:	d0f8      	beq.n	a972 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    a980:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    a984:	1a1b      	subs	r3, r3, r0
    a986:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    a98a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    a98e:	f172 0100 	sbcs.w	r1, r2, #0
    a992:	daee      	bge.n	a972 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    a994:	2a00      	cmp	r2, #0
    a996:	bfac      	ite	ge
    a998:	4618      	movge	r0, r3
    a99a:	2000      	movlt	r0, #0
	return ret;
    a99c:	e7eb      	b.n	a976 <next_timeout+0x12>
    a99e:	bf00      	nop
    a9a0:	200000f8 	.word	0x200000f8

0000a9a4 <remove_timeout>:
{
    a9a4:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    a9a6:	b170      	cbz	r0, a9c6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    a9a8:	4b0b      	ldr	r3, [pc, #44]	; (a9d8 <remove_timeout+0x34>)
    a9aa:	685b      	ldr	r3, [r3, #4]
    a9ac:	4298      	cmp	r0, r3
    a9ae:	d00a      	beq.n	a9c6 <remove_timeout+0x22>
    a9b0:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    a9b2:	b143      	cbz	r3, a9c6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    a9b4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    a9b8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    a9bc:	1912      	adds	r2, r2, r4
    a9be:	eb41 0105 	adc.w	r1, r1, r5
    a9c2:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    a9c6:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    a9ca:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    a9cc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    a9ce:	2300      	movs	r3, #0
	node->prev = NULL;
    a9d0:	e9c0 3300 	strd	r3, r3, [r0]
}
    a9d4:	bd30      	pop	{r4, r5, pc}
    a9d6:	bf00      	nop
    a9d8:	200000f8 	.word	0x200000f8

0000a9dc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a9dc:	f1b3 3fff 	cmp.w	r3, #4294967295
    a9e0:	bf08      	it	eq
    a9e2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    a9e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a9e8:	4604      	mov	r4, r0
    a9ea:	461d      	mov	r5, r3
    a9ec:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    a9ee:	d05c      	beq.n	aaaa <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    a9f0:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    a9f2:	f04f 0340 	mov.w	r3, #64	; 0x40
    a9f6:	f3ef 8711 	mrs	r7, BASEPRI
    a9fa:	f383 8812 	msr	BASEPRI_MAX, r3
    a9fe:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    aa02:	3201      	adds	r2, #1
    aa04:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    aa08:	da24      	bge.n	aa54 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    aa0a:	492d      	ldr	r1, [pc, #180]	; (aac0 <z_add_timeout+0xe4>)
    aa0c:	e9d1 2000 	ldrd	r2, r0, [r1]
    aa10:	f06f 0301 	mvn.w	r3, #1
    aa14:	1a9b      	subs	r3, r3, r2
    aa16:	f04f 32ff 	mov.w	r2, #4294967295
    aa1a:	eb62 0000 	sbc.w	r0, r2, r0
    aa1e:	1b9e      	subs	r6, r3, r6
    aa20:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    aa24:	2e01      	cmp	r6, #1
    aa26:	f170 0300 	sbcs.w	r3, r0, #0
    aa2a:	da01      	bge.n	aa30 <z_add_timeout+0x54>
    aa2c:	2601      	movs	r6, #1
    aa2e:	2000      	movs	r0, #0
    aa30:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    aa34:	4e23      	ldr	r6, [pc, #140]	; (aac4 <z_add_timeout+0xe8>)
    aa36:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    aa3a:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aa3c:	45b4      	cmp	ip, r6
    aa3e:	bf08      	it	eq
    aa40:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    aa44:	f1bc 0f00 	cmp.w	ip, #0
    aa48:	d10d      	bne.n	aa66 <z_add_timeout+0x8a>
	node->prev = tail;
    aa4a:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    aa4e:	602c      	str	r4, [r5, #0]
	list->tail = node;
    aa50:	6074      	str	r4, [r6, #4]
}
    aa52:	e01c      	b.n	aa8e <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    aa54:	f7ff ff7c 	bl	a950 <elapsed>
    aa58:	3601      	adds	r6, #1
    aa5a:	f145 0500 	adc.w	r5, r5, #0
    aa5e:	1836      	adds	r6, r6, r0
    aa60:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    aa64:	e7e4      	b.n	aa30 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    aa66:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    aa6a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    aa6e:	4293      	cmp	r3, r2
    aa70:	eb71 0e00 	sbcs.w	lr, r1, r0
    aa74:	da1a      	bge.n	aaac <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    aa76:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    aa78:	f8dc 3004 	ldr.w	r3, [ip, #4]
    aa7c:	eb60 0001 	sbc.w	r0, r0, r1
    aa80:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    aa84:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    aa88:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    aa8a:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    aa8e:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aa90:	42b3      	cmp	r3, r6
    aa92:	d006      	beq.n	aaa2 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    aa94:	429c      	cmp	r4, r3
    aa96:	d104      	bne.n	aaa2 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    aa98:	f7ff ff64 	bl	a964 <next_timeout>
    aa9c:	2100      	movs	r1, #0
    aa9e:	f7fc f8c9 	bl	6c34 <sys_clock_set_timeout>
	__asm__ volatile(
    aaa2:	f387 8811 	msr	BASEPRI, r7
    aaa6:	f3bf 8f6f 	isb	sy
		}
	}
}
    aaaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    aaac:	1a9b      	subs	r3, r3, r2
    aaae:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    aab2:	45ac      	cmp	ip, r5
    aab4:	e9c4 3104 	strd	r3, r1, [r4, #16]
    aab8:	d0c7      	beq.n	aa4a <z_add_timeout+0x6e>
    aaba:	f8dc c000 	ldr.w	ip, [ip]
    aabe:	e7c1      	b.n	aa44 <z_add_timeout+0x68>
    aac0:	20000b98 	.word	0x20000b98
    aac4:	200000f8 	.word	0x200000f8

0000aac8 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    aac8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    aacc:	f04f 0340 	mov.w	r3, #64	; 0x40
    aad0:	f3ef 8c11 	mrs	ip, BASEPRI
    aad4:	f383 8812 	msr	BASEPRI_MAX, r3
    aad8:	f3bf 8f6f 	isb	sy
	return list->head == list;
    aadc:	f8df a0b0 	ldr.w	sl, [pc, #176]	; ab90 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    aae0:	f8df 90b0 	ldr.w	r9, [pc, #176]	; ab94 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    aae4:	4f2c      	ldr	r7, [pc, #176]	; (ab98 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
    aae6:	f8c9 0000 	str.w	r0, [r9]
    aaea:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    aaee:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    aaf0:	4550      	cmp	r0, sl
    aaf2:	bf08      	it	eq
    aaf4:	2000      	moveq	r0, #0
    aaf6:	2500      	movs	r5, #0
		curr_tick += dt;
    aaf8:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    aafc:	f8d9 3000 	ldr.w	r3, [r9]
    ab00:	46e0      	mov	r8, ip
    ab02:	b380      	cbz	r0, ab66 <sys_clock_announce+0x9e>
    ab04:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    ab08:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    ab0c:	42b3      	cmp	r3, r6
    ab0e:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    ab12:	da05      	bge.n	ab20 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    ab14:	1af6      	subs	r6, r6, r3
    ab16:	eb6c 040e 	sbc.w	r4, ip, lr
    ab1a:	e9c0 6404 	strd	r6, r4, [r0, #16]
    ab1e:	e022      	b.n	ab66 <sys_clock_announce+0x9e>
		curr_tick += dt;
    ab20:	18b2      	adds	r2, r6, r2
    ab22:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    ab26:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    ab2a:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    ab2e:	f7ff ff39 	bl	a9a4 <remove_timeout>
	__asm__ volatile(
    ab32:	f388 8811 	msr	BASEPRI, r8
    ab36:	f3bf 8f6f 	isb	sy
		t->fn(t);
    ab3a:	6883      	ldr	r3, [r0, #8]
    ab3c:	4798      	blx	r3
	__asm__ volatile(
    ab3e:	f04f 0340 	mov.w	r3, #64	; 0x40
    ab42:	f3ef 8811 	mrs	r8, BASEPRI
    ab46:	f383 8812 	msr	BASEPRI_MAX, r3
    ab4a:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    ab4e:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    ab52:	f8da 0000 	ldr.w	r0, [sl]
    ab56:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ab58:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    ab5a:	46c4      	mov	ip, r8
    ab5c:	f8c9 3000 	str.w	r3, [r9]
    ab60:	d1ca      	bne.n	aaf8 <sys_clock_announce+0x30>
		curr_tick += dt;
    ab62:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
    ab66:	189a      	adds	r2, r3, r2
    ab68:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
    ab6c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    ab6e:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    ab72:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    ab76:	f7ff fef5 	bl	a964 <next_timeout>
    ab7a:	4621      	mov	r1, r4
    ab7c:	f7fc f85a 	bl	6c34 <sys_clock_set_timeout>
	__asm__ volatile(
    ab80:	f388 8811 	msr	BASEPRI, r8
    ab84:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    ab88:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    ab8c:	f7ff bc6a 	b.w	a464 <z_time_slice>
    ab90:	200000f8 	.word	0x200000f8
    ab94:	20001b44 	.word	0x20001b44
    ab98:	20000b98 	.word	0x20000b98

0000ab9c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    ab9c:	b510      	push	{r4, lr}
	__asm__ volatile(
    ab9e:	f04f 0340 	mov.w	r3, #64	; 0x40
    aba2:	f3ef 8411 	mrs	r4, BASEPRI
    aba6:	f383 8812 	msr	BASEPRI_MAX, r3
    abaa:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    abae:	f7ff fecf 	bl	a950 <elapsed>
    abb2:	4a06      	ldr	r2, [pc, #24]	; (abcc <sys_clock_tick_get+0x30>)
    abb4:	4603      	mov	r3, r0
    abb6:	e9d2 0100 	ldrd	r0, r1, [r2]
    abba:	1818      	adds	r0, r3, r0
    abbc:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    abc0:	f384 8811 	msr	BASEPRI, r4
    abc4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    abc8:	bd10      	pop	{r4, pc}
    abca:	bf00      	nop
    abcc:	20000b98 	.word	0x20000b98

0000abd0 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    abd2:	4604      	mov	r4, r0
	__asm__ volatile(
    abd4:	f04f 0340 	mov.w	r3, #64	; 0x40
    abd8:	f3ef 8711 	mrs	r7, BASEPRI
    abdc:	f383 8812 	msr	BASEPRI_MAX, r3
    abe0:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    abe4:	6802      	ldr	r2, [r0, #0]
    abe6:	b122      	cbz	r2, abf2 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
    abe8:	f387 8811 	msr	BASEPRI, r7
    abec:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    abf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    abf2:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
    abf6:	1c58      	adds	r0, r3, #1
    abf8:	f146 0100 	adc.w	r1, r6, #0
    abfc:	2802      	cmp	r0, #2
    abfe:	f171 0100 	sbcs.w	r1, r1, #0
    ac02:	d327      	bcc.n	ac54 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
    ac04:	2b01      	cmp	r3, #1
    ac06:	f176 0100 	sbcs.w	r1, r6, #0
    ac0a:	bfbc      	itt	lt
    ac0c:	2301      	movlt	r3, #1
    ac0e:	4616      	movlt	r6, r2
    ac10:	1e5d      	subs	r5, r3, #1
    ac12:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
    ac16:	f002 f80b 	bl	cc30 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    ac1a:	3001      	adds	r0, #1
    ac1c:	f141 0100 	adc.w	r1, r1, #0
    ac20:	1940      	adds	r0, r0, r5
    ac22:	eb46 0101 	adc.w	r1, r6, r1
    ac26:	2801      	cmp	r0, #1
    ac28:	f171 0100 	sbcs.w	r1, r1, #0
    ac2c:	db3a      	blt.n	aca4 <z_timer_expiration_handler+0xd4>
    ac2e:	f001 ffff 	bl	cc30 <z_impl_k_uptime_ticks>
    ac32:	3001      	adds	r0, #1
    ac34:	f141 0100 	adc.w	r1, r1, #0
    ac38:	f06f 0201 	mvn.w	r2, #1
    ac3c:	1940      	adds	r0, r0, r5
    ac3e:	eb46 0301 	adc.w	r3, r6, r1
    ac42:	1a12      	subs	r2, r2, r0
    ac44:	f04f 31ff 	mov.w	r1, #4294967295
    ac48:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    ac4c:	4918      	ldr	r1, [pc, #96]	; (acb0 <z_timer_expiration_handler+0xe0>)
    ac4e:	4620      	mov	r0, r4
    ac50:	f7ff fec4 	bl	a9dc <z_add_timeout>
	timer->status += 1U;
    ac54:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ac56:	3301      	adds	r3, #1
    ac58:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
    ac5a:	6a23      	ldr	r3, [r4, #32]
    ac5c:	b173      	cbz	r3, ac7c <z_timer_expiration_handler+0xac>
    ac5e:	f387 8811 	msr	BASEPRI, r7
    ac62:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
    ac66:	6a23      	ldr	r3, [r4, #32]
    ac68:	4620      	mov	r0, r4
    ac6a:	4798      	blx	r3
	__asm__ volatile(
    ac6c:	f04f 0340 	mov.w	r3, #64	; 0x40
    ac70:	f3ef 8711 	mrs	r7, BASEPRI
    ac74:	f383 8812 	msr	BASEPRI_MAX, r3
    ac78:	f3bf 8f6f 	isb	sy
	return list->head == list;
    ac7c:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ac80:	42a5      	cmp	r5, r4
    ac82:	d0b1      	beq.n	abe8 <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
    ac84:	2d00      	cmp	r5, #0
    ac86:	d0af      	beq.n	abe8 <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
    ac88:	4628      	mov	r0, r5
    ac8a:	f001 fedb 	bl	ca44 <z_unpend_thread_no_timeout>
    ac8e:	2300      	movs	r3, #0
    ac90:	67ab      	str	r3, [r5, #120]	; 0x78
	__asm__ volatile(
    ac92:	f387 8811 	msr	BASEPRI, r7
    ac96:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    ac9a:	4628      	mov	r0, r5
}
    ac9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    aca0:	f001 bec0 	b.w	ca24 <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    aca4:	f06f 0201 	mvn.w	r2, #1
    aca8:	f04f 33ff 	mov.w	r3, #4294967295
    acac:	e7ce      	b.n	ac4c <z_timer_expiration_handler+0x7c>
    acae:	bf00      	nop
    acb0:	0000abd1 	.word	0x0000abd1

0000acb4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    acb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    acb8:	f1b3 3fff 	cmp.w	r3, #4294967295
    acbc:	bf08      	it	eq
    acbe:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    acc2:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    acc6:	4605      	mov	r5, r0
    acc8:	461c      	mov	r4, r3
    acca:	4691      	mov	r9, r2
    accc:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    acce:	d01c      	beq.n	ad0a <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
    acd0:	1c53      	adds	r3, r2, #1
    acd2:	f174 33ff 	sbcs.w	r3, r4, #4294967295
    acd6:	db09      	blt.n	acec <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
    acd8:	2a01      	cmp	r2, #1
    acda:	f174 0300 	sbcs.w	r3, r4, #0
    acde:	bfbc      	itt	lt
    ace0:	2201      	movlt	r2, #1
    ace2:	2400      	movlt	r4, #0
    ace4:	f112 39ff 	adds.w	r9, r2, #4294967295
    ace8:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    acec:	4628      	mov	r0, r5
    acee:	f001 ff75 	bl	cbdc <z_abort_timeout>
	timer->period = period;
    acf2:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
    acf6:	2300      	movs	r3, #0
    acf8:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    acfa:	464a      	mov	r2, r9
    acfc:	4643      	mov	r3, r8
    acfe:	4628      	mov	r0, r5
    ad00:	4903      	ldr	r1, [pc, #12]	; (ad10 <z_impl_k_timer_start+0x5c>)
		     duration);
}
    ad02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    ad06:	f7ff be69 	b.w	a9dc <z_add_timeout>
}
    ad0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ad0e:	bf00      	nop
    ad10:	0000abd1 	.word	0x0000abd1

0000ad14 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    ad14:	b573      	push	{r0, r1, r4, r5, r6, lr}
    ad16:	4606      	mov	r6, r0
    ad18:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    ad1a:	f001 fd2e 	bl	c77a <k_is_in_isr>
    ad1e:	b978      	cbnz	r0, ad40 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    ad20:	4b0b      	ldr	r3, [pc, #44]	; (ad50 <z_thread_aligned_alloc+0x3c>)
    ad22:	689b      	ldr	r3, [r3, #8]
    ad24:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
    ad26:	b17c      	cbz	r4, ad48 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    ad28:	1d2a      	adds	r2, r5, #4
    ad2a:	d209      	bcs.n	ad40 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    ad2c:	2000      	movs	r0, #0
    ad2e:	2100      	movs	r1, #0
    ad30:	e9cd 0100 	strd	r0, r1, [sp]
    ad34:	f046 0104 	orr.w	r1, r6, #4
    ad38:	4620      	mov	r0, r4
    ad3a:	f001 ffd9 	bl	ccf0 <k_heap_aligned_alloc>
	if (mem == NULL) {
    ad3e:	b908      	cbnz	r0, ad44 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    ad40:	2400      	movs	r4, #0
	}

	return ret;
    ad42:	e001      	b.n	ad48 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
    ad44:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    ad46:	1d04      	adds	r4, r0, #4
}
    ad48:	4620      	mov	r0, r4
    ad4a:	b002      	add	sp, #8
    ad4c:	bd70      	pop	{r4, r5, r6, pc}
    ad4e:	bf00      	nop
    ad50:	20001b0c 	.word	0x20001b0c

0000ad54 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    ad54:	4801      	ldr	r0, [pc, #4]	; (ad5c <boot_banner+0x8>)
    ad56:	f000 b8ab 	b.w	aeb0 <printk>
    ad5a:	bf00      	nop
    ad5c:	0000f8b3 	.word	0x0000f8b3

0000ad60 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    ad60:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    ad62:	4c06      	ldr	r4, [pc, #24]	; (ad7c <statics_init+0x1c>)
    ad64:	4d06      	ldr	r5, [pc, #24]	; (ad80 <statics_init+0x20>)
    ad66:	42ac      	cmp	r4, r5
    ad68:	d301      	bcc.n	ad6e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    ad6a:	2000      	movs	r0, #0
    ad6c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    ad6e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    ad72:	4620      	mov	r0, r4
    ad74:	f001 ffb4 	bl	cce0 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    ad78:	3414      	adds	r4, #20
    ad7a:	e7f4      	b.n	ad66 <statics_init+0x6>
    ad7c:	200002e4 	.word	0x200002e4
    ad80:	200002e4 	.word	0x200002e4

0000ad84 <gpio_pin_get>:
{
    ad84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ad86:	460c      	mov	r4, r1
	const struct gpio_driver_data *const data =
    ad88:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
    ad8a:	6883      	ldr	r3, [r0, #8]
    ad8c:	a901      	add	r1, sp, #4
    ad8e:	685b      	ldr	r3, [r3, #4]
    ad90:	4798      	blx	r3
	if (ret == 0) {
    ad92:	b948      	cbnz	r0, ada8 <gpio_pin_get+0x24>
		*value ^= data->invert;
    ad94:	9b01      	ldr	r3, [sp, #4]
    ad96:	682a      	ldr	r2, [r5, #0]
    ad98:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    ad9a:	2301      	movs	r3, #1
    ad9c:	fa03 f104 	lsl.w	r1, r3, r4
    ada0:	420a      	tst	r2, r1
    ada2:	bf14      	ite	ne
    ada4:	4618      	movne	r0, r3
    ada6:	2000      	moveq	r0, #0
}
    ada8:	b003      	add	sp, #12
    adaa:	bd30      	pop	{r4, r5, pc}

0000adac <gpio_pin_get_dt>:
	return gpio_pin_get(spec->port, spec->pin);
    adac:	7901      	ldrb	r1, [r0, #4]
    adae:	6800      	ldr	r0, [r0, #0]
    adb0:	f7ff bfe8 	b.w	ad84 <gpio_pin_get>

0000adb4 <button_callback>:
}
    adb4:	4770      	bx	lr

0000adb6 <k_sleep.constprop.0.isra.0>:
	return z_impl_k_sleep(timeout);
    adb6:	f7ff bd05 	b.w	a7c4 <z_impl_k_sleep>

0000adba <update_mouse>:
void update_mouse(mouse_t* mouse) {
    adba:	b510      	push	{r4, lr}
    adbc:	4604      	mov	r4, r0
    mouse->wheel_data = fetch_wheel_data();
    adbe:	f7f5 ff81 	bl	cc4 <fetch_wheel_data>
    adc2:	8020      	strh	r0, [r4, #0]
    mouse->motion_info = read_motion();
    adc4:	f7f5 fdc0 	bl	948 <read_motion>
    adc8:	8060      	strh	r0, [r4, #2]
    adca:	f3c0 400f 	ubfx	r0, r0, #16, #16
    adce:	80a0      	strh	r0, [r4, #4]
    fetch_buttons(&(mouse->button_states));
    add0:	1da0      	adds	r0, r4, #6
}
    add2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fetch_buttons(&(mouse->button_states));
    add6:	f7f5 bcb7 	b.w	748 <fetch_buttons>

0000adda <cbpprintf_external>:
{
    adda:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    adde:	4606      	mov	r6, r0
    ade0:	460d      	mov	r5, r1
    ade2:	4617      	mov	r7, r2
	if (buf == NULL) {
    ade4:	4698      	mov	r8, r3
    ade6:	b32b      	cbz	r3, ae34 <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
    ade8:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
    adec:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    adf0:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
    adf2:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    adf4:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    adf8:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    adfc:	441c      	add	r4, r3
    adfe:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
    ae00:	f04f 0a00 	mov.w	sl, #0
    ae04:	45ca      	cmp	sl, r9
    ae06:	d309      	bcc.n	ae1c <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
    ae08:	f8d8 2004 	ldr.w	r2, [r8, #4]
    ae0c:	f108 0308 	add.w	r3, r8, #8
    ae10:	4639      	mov	r1, r7
    ae12:	4630      	mov	r0, r6
    ae14:	46ac      	mov	ip, r5
}
    ae16:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    ae1a:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    ae1c:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    ae20:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
    ae24:	4620      	mov	r0, r4
    ae26:	f000 ff32 	bl	bc8e <strlen>
    ae2a:	3001      	adds	r0, #1
    ae2c:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    ae2e:	f10a 0a01 	add.w	sl, sl, #1
    ae32:	e7e7      	b.n	ae04 <cbpprintf_external+0x2a>
}
    ae34:	f06f 0015 	mvn.w	r0, #21
    ae38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000ae3c <is_ptr>:
{
    ae3c:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
    ae3e:	2500      	movs	r5, #0
{
    ae40:	4602      	mov	r2, r0
	bool mod = false;
    ae42:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
    ae44:	4614      	mov	r4, r2
    ae46:	f814 3b01 	ldrb.w	r3, [r4], #1
    ae4a:	b90b      	cbnz	r3, ae50 <is_ptr+0x14>
					return false;
    ae4c:	4618      	mov	r0, r3
    ae4e:	e009      	b.n	ae64 <is_ptr+0x28>
		if (mod) {
    ae50:	b198      	cbz	r0, ae7a <is_ptr+0x3e>
			if (cnt == n) {
    ae52:	428d      	cmp	r5, r1
    ae54:	d107      	bne.n	ae66 <is_ptr+0x2a>
				if (c == 'p') {
    ae56:	2b70      	cmp	r3, #112	; 0x70
    ae58:	d004      	beq.n	ae64 <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
    ae5a:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
    ae5e:	2a3a      	cmp	r2, #58	; 0x3a
    ae60:	d80b      	bhi.n	ae7a <is_ptr+0x3e>
					return false;
    ae62:	2000      	movs	r0, #0
}
    ae64:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
    ae66:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
    ae6a:	2e3a      	cmp	r6, #58	; 0x3a
    ae6c:	d805      	bhi.n	ae7a <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
    ae6e:	7853      	ldrb	r3, [r2, #1]
				cnt++;
    ae70:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
    ae72:	1c94      	adds	r4, r2, #2
    ae74:	2b00      	cmp	r3, #0
    ae76:	d0e9      	beq.n	ae4c <is_ptr+0x10>
    ae78:	2000      	movs	r0, #0
		if (c == '%') {
    ae7a:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
    ae7c:	bf08      	it	eq
    ae7e:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
    ae82:	4622      	mov	r2, r4
    ae84:	e7de      	b.n	ae44 <is_ptr+0x8>

0000ae86 <arch_printk_char_out>:
}
    ae86:	2000      	movs	r0, #0
    ae88:	4770      	bx	lr

0000ae8a <str_out>:
{
    ae8a:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    ae8c:	688a      	ldr	r2, [r1, #8]
    ae8e:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    ae90:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    ae92:	b114      	cbz	r4, ae9a <str_out+0x10>
    ae94:	684b      	ldr	r3, [r1, #4]
    ae96:	4293      	cmp	r3, r2
    ae98:	dc01      	bgt.n	ae9e <str_out+0x14>
		ctx->count++;
    ae9a:	608d      	str	r5, [r1, #8]
}
    ae9c:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    ae9e:	3b01      	subs	r3, #1
    aea0:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    aea2:	bf08      	it	eq
    aea4:	2200      	moveq	r2, #0
    aea6:	608d      	str	r5, [r1, #8]
    aea8:	bf0c      	ite	eq
    aeaa:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    aeac:	54a0      	strbne	r0, [r4, r2]
    aeae:	e7f5      	b.n	ae9c <str_out+0x12>

0000aeb0 <printk>:
{
    aeb0:	b40f      	push	{r0, r1, r2, r3}
    aeb2:	b507      	push	{r0, r1, r2, lr}
    aeb4:	a904      	add	r1, sp, #16
    aeb6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    aeba:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    aebc:	f000 fde9 	bl	ba92 <z_log_vprintk>
}
    aec0:	b003      	add	sp, #12
    aec2:	f85d eb04 	ldr.w	lr, [sp], #4
    aec6:	b004      	add	sp, #16
    aec8:	4770      	bx	lr

0000aeca <snprintk>:
{
    aeca:	b40c      	push	{r2, r3}
    aecc:	b507      	push	{r0, r1, r2, lr}
    aece:	ab04      	add	r3, sp, #16
    aed0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    aed4:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    aed6:	f7f6 fac1 	bl	145c <vsnprintk>
}
    aeda:	b003      	add	sp, #12
    aedc:	f85d eb04 	ldr.w	lr, [sp], #4
    aee0:	b002      	add	sp, #8
    aee2:	4770      	bx	lr

0000aee4 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    aee4:	4604      	mov	r4, r0
    aee6:	b508      	push	{r3, lr}
    aee8:	4608      	mov	r0, r1
    aeea:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    aeec:	461a      	mov	r2, r3
    aeee:	47a0      	blx	r4
	return z_impl_z_current_get();
    aef0:	f7ff fc9c 	bl	a82c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    aef4:	f7f9 fae6 	bl	44c4 <z_impl_k_thread_abort>

0000aef8 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    aef8:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    aefc:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    aefe:	0840      	lsrs	r0, r0, #1
    af00:	4770      	bx	lr

0000af02 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    af02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    af04:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    af06:	f7ff fff7 	bl	aef8 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    af0a:	fab0 f080 	clz	r0, r0
    af0e:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    af12:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    af16:	00ca      	lsls	r2, r1, #3
    af18:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    af1c:	1d17      	adds	r7, r2, #4
{
    af1e:	460c      	mov	r4, r1
    af20:	3206      	adds	r2, #6
    af22:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    af24:	b956      	cbnz	r6, af3c <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    af26:	2101      	movs	r1, #1
    af28:	fa01 f000 	lsl.w	r0, r1, r0
    af2c:	68d9      	ldr	r1, [r3, #12]
    af2e:	4301      	orrs	r1, r0
    af30:	60d9      	str	r1, [r3, #12]
		b->next = c;
    af32:	f8cc 4010 	str.w	r4, [ip, #16]
    af36:	53dd      	strh	r5, [r3, r7]
    af38:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    af3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    af3c:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    af3e:	3104      	adds	r1, #4
    af40:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    af42:	53d8      	strh	r0, [r3, r7]
    af44:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    af48:	529e      	strh	r6, [r3, r2]
    af4a:	80c5      	strh	r5, [r0, #6]
    af4c:	525d      	strh	r5, [r3, r1]
    af4e:	e7f4      	b.n	af3a <free_list_add+0x38>

0000af50 <free_list_remove_bidx>:
{
    af50:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    af52:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    af56:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    af58:	4299      	cmp	r1, r3
    af5a:	f102 0104 	add.w	r1, r2, #4
    af5e:	d10a      	bne.n	af76 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    af60:	2301      	movs	r3, #1
    af62:	fa03 f202 	lsl.w	r2, r3, r2
    af66:	68c3      	ldr	r3, [r0, #12]
    af68:	ea23 0302 	bic.w	r3, r3, r2
    af6c:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    af6e:	2300      	movs	r3, #0
    af70:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    af74:	bd10      	pop	{r4, pc}
    af76:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    af78:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    af7c:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    af80:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    af84:	80cb      	strh	r3, [r1, #6]
    af86:	8082      	strh	r2, [r0, #4]
}
    af88:	e7f4      	b.n	af74 <free_list_remove_bidx+0x24>

0000af8a <free_list_remove>:
{
    af8a:	b508      	push	{r3, lr}
    af8c:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    af8e:	f7ff ffb3 	bl	aef8 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    af92:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    af96:	f1c2 021f 	rsb	r2, r2, #31
    af9a:	4618      	mov	r0, r3
}
    af9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    afa0:	f7ff bfd6 	b.w	af50 <free_list_remove_bidx>

0000afa4 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    afa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    afa8:	fab1 f581 	clz	r5, r1
    afac:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    afb0:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
    afb4:	4603      	mov	r3, r0
	if (b->next) {
    afb6:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
    afba:	460e      	mov	r6, r1
	if (b->next) {
    afbc:	b1c2      	cbz	r2, aff0 <alloc_chunk+0x4c>
    afbe:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    afc0:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
    afc4:	4618      	mov	r0, r3
    afc6:	4621      	mov	r1, r4
    afc8:	f7ff ff96 	bl	aef8 <chunk_size>
    afcc:	42b0      	cmp	r0, r6
    afce:	d306      	bcc.n	afde <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    afd0:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    afd2:	4618      	mov	r0, r3
    afd4:	f7ff ffbc 	bl	af50 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    afd8:	4620      	mov	r0, r4
    afda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    afde:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
    afe2:	3f01      	subs	r7, #1
    afe4:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
    afe6:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
    afea:	d001      	beq.n	aff0 <alloc_chunk+0x4c>
    afec:	4282      	cmp	r2, r0
    afee:	d1e7      	bne.n	afc0 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    aff0:	f1c5 0220 	rsb	r2, r5, #32
    aff4:	f04f 34ff 	mov.w	r4, #4294967295
    aff8:	4094      	lsls	r4, r2
    affa:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    affc:	4014      	ands	r4, r2
    affe:	d0eb      	beq.n	afd8 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    b000:	fa94 f2a4 	rbit	r2, r4
    b004:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    b008:	1d11      	adds	r1, r2, #4
    b00a:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    b00e:	4621      	mov	r1, r4
    b010:	e7df      	b.n	afd2 <alloc_chunk+0x2e>

0000b012 <merge_chunks>:
{
    b012:	b538      	push	{r3, r4, r5, lr}
    b014:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    b016:	f7ff ff6f 	bl	aef8 <chunk_size>
{
    b01a:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    b01c:	4604      	mov	r4, r0
    b01e:	4611      	mov	r1, r2
    b020:	4618      	mov	r0, r3
    b022:	f7ff ff69 	bl	aef8 <chunk_size>
		((uint16_t *)cmem)[f] = val;
    b026:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    b02a:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    b02c:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    b02e:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    b030:	4618      	mov	r0, r3
    b032:	f7ff ff61 	bl	aef8 <chunk_size>
	void *cmem = &buf[c];
    b036:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    b038:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    b03c:	bd38      	pop	{r3, r4, r5, pc}

0000b03e <split_chunks>:
{
    b03e:	b538      	push	{r3, r4, r5, lr}
    b040:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    b042:	f7ff ff59 	bl	aef8 <chunk_size>
{
    b046:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    b048:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    b04a:	1a51      	subs	r1, r2, r1
    b04c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    b050:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    b052:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    b054:	8060      	strh	r0, [r4, #2]
    b056:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    b05a:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    b05c:	8044      	strh	r4, [r0, #2]
    b05e:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    b062:	4618      	mov	r0, r3
    b064:	4611      	mov	r1, r2
    b066:	f7ff ff47 	bl	aef8 <chunk_size>
	void *cmem = &buf[c];
    b06a:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    b06c:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    b070:	bd38      	pop	{r3, r4, r5, pc}

0000b072 <free_chunk>:
{
    b072:	b538      	push	{r3, r4, r5, lr}
    b074:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    b076:	f7ff ff3f 	bl	aef8 <chunk_size>
    b07a:	460c      	mov	r4, r1
    b07c:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    b07e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    b082:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    b084:	07da      	lsls	r2, r3, #31
    b086:	d40a      	bmi.n	b09e <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    b088:	4628      	mov	r0, r5
    b08a:	f7ff ff7e 	bl	af8a <free_list_remove>
	return c + chunk_size(h, c);
    b08e:	4621      	mov	r1, r4
    b090:	4628      	mov	r0, r5
    b092:	f7ff ff31 	bl	aef8 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    b096:	1822      	adds	r2, r4, r0
    b098:	4628      	mov	r0, r5
    b09a:	f7ff ffba 	bl	b012 <merge_chunks>
		return ((uint16_t *)cmem)[f];
    b09e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    b0a2:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    b0a4:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    b0a8:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    b0aa:	07db      	lsls	r3, r3, #31
    b0ac:	d40c      	bmi.n	b0c8 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    b0ae:	4628      	mov	r0, r5
    b0b0:	f7ff ff6b 	bl	af8a <free_list_remove>
		return ((uint16_t *)cmem)[f];
    b0b4:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    b0b8:	4622      	mov	r2, r4
    b0ba:	1a61      	subs	r1, r4, r1
    b0bc:	4628      	mov	r0, r5
    b0be:	f7ff ffa8 	bl	b012 <merge_chunks>
    b0c2:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    b0c6:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    b0c8:	4621      	mov	r1, r4
    b0ca:	4628      	mov	r0, r5
}
    b0cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    b0d0:	f7ff bf17 	b.w	af02 <free_list_add>

0000b0d4 <sys_heap_free>:
	if (mem == NULL) {
    b0d4:	b161      	cbz	r1, b0f0 <sys_heap_free+0x1c>
    b0d6:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b0d8:	3904      	subs	r1, #4
    b0da:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    b0dc:	f021 0307 	bic.w	r3, r1, #7
    b0e0:	4403      	add	r3, r0
	free_chunk(h, c);
    b0e2:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    b0e4:	885a      	ldrh	r2, [r3, #2]
    b0e6:	f022 0201 	bic.w	r2, r2, #1
    b0ea:	805a      	strh	r2, [r3, #2]
    b0ec:	f7ff bfc1 	b.w	b072 <free_chunk>
}
    b0f0:	4770      	bx	lr

0000b0f2 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    b0f2:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    b0f4:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    b0f6:	b909      	cbnz	r1, b0fc <sys_heap_alloc+0xa>
		return NULL;
    b0f8:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    b0fa:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    b0fc:	68ab      	ldr	r3, [r5, #8]
    b0fe:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    b102:	d9f9      	bls.n	b0f8 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    b104:	310b      	adds	r1, #11
    b106:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    b108:	4621      	mov	r1, r4
    b10a:	4628      	mov	r0, r5
    b10c:	f7ff ff4a 	bl	afa4 <alloc_chunk>
	if (c == 0U) {
    b110:	4606      	mov	r6, r0
    b112:	2800      	cmp	r0, #0
    b114:	d0f0      	beq.n	b0f8 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    b116:	4601      	mov	r1, r0
    b118:	4628      	mov	r0, r5
    b11a:	f7ff feed 	bl	aef8 <chunk_size>
    b11e:	42a0      	cmp	r0, r4
    b120:	d907      	bls.n	b132 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    b122:	1932      	adds	r2, r6, r4
    b124:	4628      	mov	r0, r5
    b126:	f7ff ff8a 	bl	b03e <split_chunks>
		free_list_add(h, c + chunk_sz);
    b12a:	4611      	mov	r1, r2
    b12c:	4628      	mov	r0, r5
    b12e:	f7ff fee8 	bl	af02 <free_list_add>
	void *cmem = &buf[c];
    b132:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    b136:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    b138:	8853      	ldrh	r3, [r2, #2]
    b13a:	f043 0301 	orr.w	r3, r3, #1
    b13e:	8053      	strh	r3, [r2, #2]
    b140:	3004      	adds	r0, #4
	return mem;
    b142:	e7da      	b.n	b0fa <sys_heap_alloc+0x8>

0000b144 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    b144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b148:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    b14c:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
    b150:	6806      	ldr	r6, [r0, #0]
{
    b152:	460f      	mov	r7, r1
    b154:	4614      	mov	r4, r2
	if (align != rew) {
    b156:	d00c      	beq.n	b172 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
    b158:	424b      	negs	r3, r1
    b15a:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    b15c:	2b04      	cmp	r3, #4
    b15e:	461a      	mov	r2, r3
    b160:	464f      	mov	r7, r9
    b162:	bf28      	it	cs
    b164:	2204      	movcs	r2, #4
	rew = align & -align;
    b166:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    b168:	b964      	cbnz	r4, b184 <sys_heap_aligned_alloc+0x40>
		return NULL;
    b16a:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    b16c:	4628      	mov	r0, r5
    b16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    b172:	2904      	cmp	r1, #4
    b174:	d804      	bhi.n	b180 <sys_heap_aligned_alloc+0x3c>
}
    b176:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    b17a:	4611      	mov	r1, r2
    b17c:	f7ff bfb9 	b.w	b0f2 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
    b180:	2204      	movs	r2, #4
    b182:	e7f1      	b.n	b168 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
    b184:	68b3      	ldr	r3, [r6, #8]
    b186:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    b18a:	d9ee      	bls.n	b16a <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    b18c:	f104 010b 	add.w	r1, r4, #11
    b190:	4439      	add	r1, r7
    b192:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    b194:	08c9      	lsrs	r1, r1, #3
    b196:	4630      	mov	r0, r6
    b198:	f7ff ff04 	bl	afa4 <alloc_chunk>
	if (c0 == 0) {
    b19c:	4680      	mov	r8, r0
    b19e:	2800      	cmp	r0, #0
    b1a0:	d0e3      	beq.n	b16a <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    b1a2:	f109 0504 	add.w	r5, r9, #4
    b1a6:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    b1aa:	1e7b      	subs	r3, r7, #1
    b1ac:	4435      	add	r5, r6
    b1ae:	441d      	add	r5, r3
    b1b0:	427f      	negs	r7, r7
    b1b2:	403d      	ands	r5, r7
    b1b4:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    b1b8:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b1ba:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    b1bc:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b1be:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    b1c0:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    b1c4:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    b1c6:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    b1ca:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    b1ce:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    b1d2:	d208      	bcs.n	b1e6 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
    b1d4:	4601      	mov	r1, r0
    b1d6:	463a      	mov	r2, r7
    b1d8:	4630      	mov	r0, r6
    b1da:	f7ff ff30 	bl	b03e <split_chunks>
		free_list_add(h, c0);
    b1de:	4641      	mov	r1, r8
    b1e0:	4630      	mov	r0, r6
    b1e2:	f7ff fe8e 	bl	af02 <free_list_add>
	return c + chunk_size(h, c);
    b1e6:	4639      	mov	r1, r7
    b1e8:	4630      	mov	r0, r6
    b1ea:	f7ff fe85 	bl	aef8 <chunk_size>
    b1ee:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    b1f0:	4284      	cmp	r4, r0
    b1f2:	d207      	bcs.n	b204 <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
    b1f4:	4630      	mov	r0, r6
    b1f6:	4622      	mov	r2, r4
    b1f8:	f7ff ff21 	bl	b03e <split_chunks>
		free_list_add(h, c_end);
    b1fc:	4621      	mov	r1, r4
    b1fe:	4630      	mov	r0, r6
    b200:	f7ff fe7f 	bl	af02 <free_list_add>
	void *cmem = &buf[c];
    b204:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    b208:	8873      	ldrh	r3, [r6, #2]
    b20a:	f043 0301 	orr.w	r3, r3, #1
    b20e:	8073      	strh	r3, [r6, #2]
    b210:	e7ac      	b.n	b16c <sys_heap_aligned_alloc+0x28>

0000b212 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    b212:	3a04      	subs	r2, #4
{
    b214:	b4f0      	push	{r4, r5, r6, r7}
    b216:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    b218:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    b21a:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    b21c:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    b220:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    b224:	1a0e      	subs	r6, r1, r0
    b226:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    b228:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
    b22a:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    b22e:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    b230:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
    b234:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
    b236:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    b238:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
    b23a:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    b23e:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    b240:	f1c2 0220 	rsb	r2, r2, #32
    b244:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    b246:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
    b24a:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    b24e:	4294      	cmp	r4, r2
    b250:	d1fb      	bne.n	b24a <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    b252:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    b254:	f042 0201 	orr.w	r2, r2, #1
    b258:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
    b25a:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    b25e:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    b260:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
    b262:	8007      	strh	r7, [r0, #0]
    b264:	8065      	strh	r5, [r4, #2]
    b266:	1984      	adds	r4, r0, r6
    b268:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    b26c:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    b270:	8067      	strh	r7, [r4, #2]
    b272:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    b274:	885a      	ldrh	r2, [r3, #2]
    b276:	f042 0201 	orr.w	r2, r2, #1
    b27a:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    b27c:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    b27e:	f7ff be40 	b.w	af02 <free_list_add>

0000b282 <sys_slist_find_and_remove>:
	return list->head;
    b282:	6803      	ldr	r3, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b284:	2200      	movs	r2, #0
    b286:	b90b      	cbnz	r3, b28c <sys_slist_find_and_remove+0xa>
    b288:	4618      	mov	r0, r3
    b28a:	4770      	bx	lr
    b28c:	428b      	cmp	r3, r1
    b28e:	d110      	bne.n	b2b2 <sys_slist_find_and_remove+0x30>
	return node->next;
    b290:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    b292:	b942      	cbnz	r2, b2a6 <sys_slist_find_and_remove+0x24>
    b294:	6842      	ldr	r2, [r0, #4]
	list->head = node;
    b296:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    b298:	4291      	cmp	r1, r2
    b29a:	d100      	bne.n	b29e <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    b29c:	6043      	str	r3, [r0, #4]
	parent->next = child;
    b29e:	2300      	movs	r3, #0
    b2a0:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b2a2:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
    b2a4:	4770      	bx	lr
	parent->next = child;
    b2a6:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    b2a8:	6843      	ldr	r3, [r0, #4]
    b2aa:	4299      	cmp	r1, r3
	list->tail = node;
    b2ac:	bf08      	it	eq
    b2ae:	6042      	streq	r2, [r0, #4]
}
    b2b0:	e7f5      	b.n	b29e <sys_slist_find_and_remove+0x1c>
	return node->next;
    b2b2:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b2b4:	681b      	ldr	r3, [r3, #0]
    b2b6:	e7e6      	b.n	b286 <sys_slist_find_and_remove+0x4>

0000b2b8 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b2b8:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    b2ba:	f013 0307 	ands.w	r3, r3, #7
    b2be:	d105      	bne.n	b2cc <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    b2c0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    b2c2:	2b00      	cmp	r3, #0
    b2c4:	bf0c      	ite	eq
    b2c6:	2000      	moveq	r0, #0
    b2c8:	2003      	movne	r0, #3
    b2ca:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    b2cc:	2b02      	cmp	r3, #2
    b2ce:	d105      	bne.n	b2dc <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    b2d0:	8b40      	ldrh	r0, [r0, #26]
    b2d2:	fab0 f080 	clz	r0, r0
    b2d6:	0940      	lsrs	r0, r0, #5
    b2d8:	0080      	lsls	r0, r0, #2
    b2da:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    b2dc:	2b01      	cmp	r3, #1
    b2de:	d105      	bne.n	b2ec <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    b2e0:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    b2e2:	2b00      	cmp	r3, #0
    b2e4:	bf0c      	ite	eq
    b2e6:	2000      	moveq	r0, #0
    b2e8:	2005      	movne	r0, #5
    b2ea:	4770      	bx	lr
	int evt = EVT_NOP;
    b2ec:	2000      	movs	r0, #0
}
    b2ee:	4770      	bx	lr

0000b2f0 <validate_args>:
{
    b2f0:	b510      	push	{r4, lr}
    b2f2:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    b2f4:	b100      	cbz	r0, b2f8 <validate_args+0x8>
    b2f6:	b911      	cbnz	r1, b2fe <validate_args+0xe>
		return -EINVAL;
    b2f8:	f06f 0015 	mvn.w	r0, #21
}
    b2fc:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    b2fe:	1d08      	adds	r0, r1, #4
    b300:	f000 f8d6 	bl	b4b0 <sys_notify_validate>
	if ((rv == 0)
    b304:	2800      	cmp	r0, #0
    b306:	d1f9      	bne.n	b2fc <validate_args+0xc>
	    && ((cli->notify.flags
    b308:	68a3      	ldr	r3, [r4, #8]
    b30a:	2b03      	cmp	r3, #3
    b30c:	d9f6      	bls.n	b2fc <validate_args+0xc>
    b30e:	e7f3      	b.n	b2f8 <validate_args+0x8>

0000b310 <notify_one>:
{
    b310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b314:	460d      	mov	r5, r1
    b316:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    b318:	4619      	mov	r1, r3
    b31a:	1d28      	adds	r0, r5, #4
{
    b31c:	4690      	mov	r8, r2
    b31e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    b320:	f000 f8d7 	bl	b4d2 <sys_notify_finalize>
	if (cb) {
    b324:	4604      	mov	r4, r0
    b326:	b138      	cbz	r0, b338 <notify_one+0x28>
		cb(mgr, cli, state, res);
    b328:	4633      	mov	r3, r6
    b32a:	4642      	mov	r2, r8
    b32c:	4629      	mov	r1, r5
    b32e:	4638      	mov	r0, r7
    b330:	46a4      	mov	ip, r4
}
    b332:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    b336:	4760      	bx	ip
}
    b338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b33c <transition_complete>:
{
    b33c:	b410      	push	{r4}
	__asm__ volatile(
    b33e:	f04f 0440 	mov.w	r4, #64	; 0x40
    b342:	f3ef 8211 	mrs	r2, BASEPRI
    b346:	f384 8812 	msr	BASEPRI_MAX, r4
    b34a:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    b34e:	6141      	str	r1, [r0, #20]
}
    b350:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    b352:	2101      	movs	r1, #1
    b354:	f7f6 b898 	b.w	1488 <process_event>

0000b358 <onoff_manager_init>:
{
    b358:	b538      	push	{r3, r4, r5, lr}
    b35a:	460c      	mov	r4, r1
	if ((mgr == NULL)
    b35c:	4605      	mov	r5, r0
    b35e:	b158      	cbz	r0, b378 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    b360:	b151      	cbz	r1, b378 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    b362:	680b      	ldr	r3, [r1, #0]
    b364:	b143      	cbz	r3, b378 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    b366:	684b      	ldr	r3, [r1, #4]
    b368:	b133      	cbz	r3, b378 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    b36a:	221c      	movs	r2, #28
    b36c:	2100      	movs	r1, #0
    b36e:	f000 fcb5 	bl	bcdc <memset>
    b372:	612c      	str	r4, [r5, #16]
	return 0;
    b374:	2000      	movs	r0, #0
}
    b376:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    b378:	f06f 0015 	mvn.w	r0, #21
    b37c:	e7fb      	b.n	b376 <onoff_manager_init+0x1e>

0000b37e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    b37e:	b570      	push	{r4, r5, r6, lr}
    b380:	4605      	mov	r5, r0
    b382:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    b384:	f7ff ffb4 	bl	b2f0 <validate_args>

	if (rv < 0) {
    b388:	1e04      	subs	r4, r0, #0
    b38a:	db15      	blt.n	b3b8 <onoff_request+0x3a>
    b38c:	f04f 0340 	mov.w	r3, #64	; 0x40
    b390:	f3ef 8211 	mrs	r2, BASEPRI
    b394:	f383 8812 	msr	BASEPRI_MAX, r3
    b398:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    b39c:	8b6b      	ldrh	r3, [r5, #26]
    b39e:	8b2c      	ldrh	r4, [r5, #24]
    b3a0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    b3a4:	428b      	cmp	r3, r1
    b3a6:	f004 0407 	and.w	r4, r4, #7
    b3aa:	d107      	bne.n	b3bc <onoff_request+0x3e>
	__asm__ volatile(
    b3ac:	f382 8811 	msr	BASEPRI, r2
    b3b0:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    b3b4:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    b3b8:	4620      	mov	r0, r4
    b3ba:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    b3bc:	2c02      	cmp	r4, #2
    b3be:	d10c      	bne.n	b3da <onoff_request+0x5c>
		mgr->refs += 1U;
    b3c0:	3301      	adds	r3, #1
    b3c2:	836b      	strh	r3, [r5, #26]
    b3c4:	f382 8811 	msr	BASEPRI, r2
    b3c8:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    b3cc:	2300      	movs	r3, #0
    b3ce:	4622      	mov	r2, r4
    b3d0:	4631      	mov	r1, r6
    b3d2:	4628      	mov	r0, r5
    b3d4:	f7ff ff9c 	bl	b310 <notify_one>
    b3d8:	e7ee      	b.n	b3b8 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    b3da:	2c06      	cmp	r4, #6
    b3dc:	d814      	bhi.n	b408 <onoff_request+0x8a>
    b3de:	e8df f004 	tbb	[pc, r4]
    b3e2:	1304      	.short	0x1304
    b3e4:	1a041313 	.word	0x1a041313
    b3e8:	04          	.byte	0x04
    b3e9:	00          	.byte	0x00
	parent->next = child;
    b3ea:	2300      	movs	r3, #0
    b3ec:	6033      	str	r3, [r6, #0]
	return list->tail;
    b3ee:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    b3f0:	b93b      	cbnz	r3, b402 <onoff_request+0x84>
	list->head = node;
    b3f2:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    b3f6:	b9ac      	cbnz	r4, b424 <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    b3f8:	2102      	movs	r1, #2
    b3fa:	4628      	mov	r0, r5
    b3fc:	f7f6 f844 	bl	1488 <process_event>
    b400:	e7da      	b.n	b3b8 <onoff_request+0x3a>
	parent->next = child;
    b402:	601e      	str	r6, [r3, #0]
	list->tail = node;
    b404:	606e      	str	r6, [r5, #4]
}
    b406:	e7f6      	b.n	b3f6 <onoff_request+0x78>
    b408:	f382 8811 	msr	BASEPRI, r2
    b40c:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    b410:	f06f 0404 	mvn.w	r4, #4
    b414:	e7d0      	b.n	b3b8 <onoff_request+0x3a>
    b416:	f382 8811 	msr	BASEPRI, r2
    b41a:	f3bf 8f6f 	isb	sy
    b41e:	f06f 0485 	mvn.w	r4, #133	; 0x85
    b422:	e7c9      	b.n	b3b8 <onoff_request+0x3a>
    b424:	f382 8811 	msr	BASEPRI, r2
    b428:	f3bf 8f6f 	isb	sy
		if (notify) {
    b42c:	e7c4      	b.n	b3b8 <onoff_request+0x3a>

0000b42e <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    b42e:	b510      	push	{r4, lr}
	__asm__ volatile(
    b430:	f04f 0340 	mov.w	r3, #64	; 0x40
    b434:	f3ef 8211 	mrs	r2, BASEPRI
    b438:	f383 8812 	msr	BASEPRI_MAX, r3
    b43c:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b440:	8b04      	ldrh	r4, [r0, #24]
    b442:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    b446:	2c02      	cmp	r4, #2
    b448:	d00a      	beq.n	b460 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    b44a:	2c01      	cmp	r4, #1
    b44c:	bf0c      	ite	eq
    b44e:	f06f 0004 	mvneq.w	r0, #4
    b452:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    b456:	f382 8811 	msr	BASEPRI, r2
    b45a:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    b45e:	e008      	b.n	b472 <onoff_release+0x44>
	mgr->refs -= 1U;
    b460:	8b43      	ldrh	r3, [r0, #26]
    b462:	3b01      	subs	r3, #1
    b464:	b29b      	uxth	r3, r3
    b466:	8343      	strh	r3, [r0, #26]
	if (stop) {
    b468:	b923      	cbnz	r3, b474 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    b46a:	4621      	mov	r1, r4
    b46c:	f7f6 f80c 	bl	1488 <process_event>
	int rv = state;
    b470:	4620      	mov	r0, r4
}
    b472:	bd10      	pop	{r4, pc}
	int rv = state;
    b474:	4620      	mov	r0, r4
    b476:	e7ee      	b.n	b456 <onoff_release+0x28>

0000b478 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    b478:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    b47a:	b1b0      	cbz	r0, b4aa <onoff_cancel+0x32>
    b47c:	b1a9      	cbz	r1, b4aa <onoff_cancel+0x32>
	__asm__ volatile(
    b47e:	f04f 0240 	mov.w	r2, #64	; 0x40
    b482:	f3ef 8511 	mrs	r5, BASEPRI
    b486:	f382 8812 	msr	BASEPRI_MAX, r2
    b48a:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    b48e:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    b490:	f7ff fef7 	bl	b282 <sys_slist_find_and_remove>
    b494:	b130      	cbz	r0, b4a4 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    b496:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    b49a:	f385 8811 	msr	BASEPRI, r5
    b49e:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    b4a2:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    b4a4:	f06f 0077 	mvn.w	r0, #119	; 0x77
    b4a8:	e7f7      	b.n	b49a <onoff_cancel+0x22>
		return -EINVAL;
    b4aa:	f06f 0015 	mvn.w	r0, #21
    b4ae:	e7f8      	b.n	b4a2 <onoff_cancel+0x2a>

0000b4b0 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    b4b0:	4603      	mov	r3, r0
    b4b2:	b158      	cbz	r0, b4cc <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    b4b4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    b4b6:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    b4ba:	2a01      	cmp	r2, #1
    b4bc:	d003      	beq.n	b4c6 <sys_notify_validate+0x16>
    b4be:	2a03      	cmp	r2, #3
    b4c0:	d104      	bne.n	b4cc <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    b4c2:	6802      	ldr	r2, [r0, #0]
    b4c4:	b112      	cbz	r2, b4cc <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    b4c6:	2000      	movs	r0, #0
    b4c8:	6098      	str	r0, [r3, #8]
    b4ca:	4770      	bx	lr
    b4cc:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    b4d0:	4770      	bx	lr

0000b4d2 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    b4d2:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    b4d4:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    b4d6:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    b4da:	2a03      	cmp	r2, #3
    b4dc:	f04f 0200 	mov.w	r2, #0
{
    b4e0:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    b4e2:	bf0c      	ite	eq
    b4e4:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    b4e6:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    b4e8:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    b4ea:	4770      	bx	lr

0000b4ec <encode_uint>:
{
    b4ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4f0:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    b4f2:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    b4f4:	2b6f      	cmp	r3, #111	; 0x6f
{
    b4f6:	4680      	mov	r8, r0
    b4f8:	460f      	mov	r7, r1
    b4fa:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    b4fc:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    b500:	d029      	beq.n	b556 <encode_uint+0x6a>
    b502:	d824      	bhi.n	b54e <encode_uint+0x62>
		return 10;
    b504:	2b58      	cmp	r3, #88	; 0x58
    b506:	bf0c      	ite	eq
    b508:	2610      	moveq	r6, #16
    b50a:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    b50c:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    b510:	4632      	mov	r2, r6
    b512:	2300      	movs	r3, #0
    b514:	4640      	mov	r0, r8
    b516:	4639      	mov	r1, r7
    b518:	f7f4 fde2 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b51c:	2a09      	cmp	r2, #9
    b51e:	b2d4      	uxtb	r4, r2
    b520:	d81e      	bhi.n	b560 <encode_uint+0x74>
    b522:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    b524:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b526:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    b528:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b52c:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    b530:	d301      	bcc.n	b536 <encode_uint+0x4a>
    b532:	45d1      	cmp	r9, sl
    b534:	d811      	bhi.n	b55a <encode_uint+0x6e>
	if (conv->flag_hash) {
    b536:	782b      	ldrb	r3, [r5, #0]
    b538:	069b      	lsls	r3, r3, #26
    b53a:	d505      	bpl.n	b548 <encode_uint+0x5c>
		if (radix == 8) {
    b53c:	2e08      	cmp	r6, #8
    b53e:	d115      	bne.n	b56c <encode_uint+0x80>
			conv->altform_0 = true;
    b540:	78ab      	ldrb	r3, [r5, #2]
    b542:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    b546:	70ab      	strb	r3, [r5, #2]
}
    b548:	4648      	mov	r0, r9
    b54a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    b54e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    b552:	2b70      	cmp	r3, #112	; 0x70
    b554:	e7d7      	b.n	b506 <encode_uint+0x1a>
	switch (specifier) {
    b556:	2608      	movs	r6, #8
    b558:	e7d8      	b.n	b50c <encode_uint+0x20>
		value /= radix;
    b55a:	4680      	mov	r8, r0
    b55c:	460f      	mov	r7, r1
    b55e:	e7d7      	b.n	b510 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    b560:	f1bb 0f19 	cmp.w	fp, #25
    b564:	bf94      	ite	ls
    b566:	3437      	addls	r4, #55	; 0x37
    b568:	3457      	addhi	r4, #87	; 0x57
    b56a:	e7db      	b.n	b524 <encode_uint+0x38>
		} else if (radix == 16) {
    b56c:	2e10      	cmp	r6, #16
    b56e:	d1eb      	bne.n	b548 <encode_uint+0x5c>
			conv->altform_0c = true;
    b570:	78ab      	ldrb	r3, [r5, #2]
    b572:	f043 0310 	orr.w	r3, r3, #16
    b576:	e7e6      	b.n	b546 <encode_uint+0x5a>

0000b578 <outs>:
{
    b578:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b57c:	4607      	mov	r7, r0
    b57e:	4688      	mov	r8, r1
    b580:	4615      	mov	r5, r2
    b582:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    b584:	4614      	mov	r4, r2
    b586:	42b4      	cmp	r4, r6
    b588:	d305      	bcc.n	b596 <outs+0x1e>
    b58a:	b10e      	cbz	r6, b590 <outs+0x18>
	return (int)count;
    b58c:	1b60      	subs	r0, r4, r5
    b58e:	e008      	b.n	b5a2 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    b590:	7823      	ldrb	r3, [r4, #0]
    b592:	2b00      	cmp	r3, #0
    b594:	d0fa      	beq.n	b58c <outs+0x14>
		int rc = out((int)*sp++, ctx);
    b596:	f814 0b01 	ldrb.w	r0, [r4], #1
    b59a:	4641      	mov	r1, r8
    b59c:	47b8      	blx	r7
		if (rc < 0) {
    b59e:	2800      	cmp	r0, #0
    b5a0:	daf1      	bge.n	b586 <outs+0xe>
}
    b5a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b5a6 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    b5a6:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
    b5a8:	6903      	ldr	r3, [r0, #16]
{
    b5aa:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
    b5ac:	f013 0008 	ands.w	r0, r3, #8
    b5b0:	d109      	bne.n	b5c6 <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    b5b2:	6813      	ldr	r3, [r2, #0]
    b5b4:	68d4      	ldr	r4, [r2, #12]
    b5b6:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
    b5b8:	bf97      	itett	ls
    b5ba:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    b5bc:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
    b5be:	1ad3      	subls	r3, r2, r3

	return true;
    b5c0:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    b5c2:	600b      	str	r3, [r1, #0]
}
    b5c4:	bd10      	pop	{r4, pc}
    b5c6:	2300      	movs	r3, #0
		return false;
    b5c8:	4618      	mov	r0, r3
    b5ca:	e7fa      	b.n	b5c2 <free_space+0x1c>

0000b5cc <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    b5cc:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    b5ce:	a901      	add	r1, sp, #4
{
    b5d0:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    b5d2:	f7ff ffe8 	bl	b5a6 <free_space>
    b5d6:	b120      	cbz	r0, b5e2 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    b5d8:	9b01      	ldr	r3, [sp, #4]
    b5da:	68e2      	ldr	r2, [r4, #12]
    b5dc:	3b01      	subs	r3, #1
    b5de:	4413      	add	r3, r2
    b5e0:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    b5e2:	6a20      	ldr	r0, [r4, #32]
    b5e4:	9b01      	ldr	r3, [sp, #4]
    b5e6:	1ac0      	subs	r0, r0, r3
}
    b5e8:	3801      	subs	r0, #1
    b5ea:	b002      	add	sp, #8
    b5ec:	bd10      	pop	{r4, pc}

0000b5ee <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
    b5ee:	b510      	push	{r4, lr}
    b5f0:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    b5f2:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    b5f4:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    b5f6:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    b5f8:	07d2      	lsls	r2, r2, #31
    b5fa:	d502      	bpl.n	b602 <idx_inc+0x14>
		return i & (buffer->size - 1);
    b5fc:	3b01      	subs	r3, #1
    b5fe:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    b600:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    b602:	4298      	cmp	r0, r3
    b604:	bf28      	it	cs
    b606:	1ac0      	subcs	r0, r0, r3
    b608:	e7fa      	b.n	b600 <idx_inc+0x12>

0000b60a <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
    b60a:	b510      	push	{r4, lr}
    b60c:	4604      	mov	r4, r0
    b60e:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    b610:	68c1      	ldr	r1, [r0, #12]
    b612:	f7ff ffec 	bl	b5ee <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
    b616:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    b618:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
    b61a:	f023 0308 	bic.w	r3, r3, #8
    b61e:	6123      	str	r3, [r4, #16]
}
    b620:	bd10      	pop	{r4, pc}

0000b622 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    b622:	b538      	push	{r3, r4, r5, lr}
    b624:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    b626:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
    b628:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    b62a:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    b62c:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    b630:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
    b634:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    b636:	6801      	ldr	r1, [r0, #0]
    b638:	462a      	mov	r2, r5
    b63a:	f7ff ffd8 	bl	b5ee <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    b63e:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    b640:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    b642:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    b644:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
    b646:	bf02      	ittt	eq
    b648:	6923      	ldreq	r3, [r4, #16]
    b64a:	f043 0308 	orreq.w	r3, r3, #8
    b64e:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    b650:	462a      	mov	r2, r5
    b652:	4620      	mov	r0, r4
    b654:	f7ff ffcb 	bl	b5ee <idx_inc>
    b658:	6060      	str	r0, [r4, #4]
}
    b65a:	bd38      	pop	{r3, r4, r5, pc}

0000b65c <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
    b65c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    b660:	68c7      	ldr	r7, [r0, #12]
    b662:	69c6      	ldr	r6, [r0, #28]
{
    b664:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
    b666:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    b66a:	f003 0303 	and.w	r3, r3, #3
    b66e:	2b02      	cmp	r3, #2
{
    b670:	4604      	mov	r4, r0
    b672:	4688      	mov	r8, r1
    b674:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    b676:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    b67a:	f04f 0300 	mov.w	r3, #0
    b67e:	d009      	beq.n	b694 <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
    b680:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
    b682:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
    b686:	6923      	ldr	r3, [r4, #16]
    b688:	0799      	lsls	r1, r3, #30
    b68a:	d410      	bmi.n	b6ae <drop_item_locked+0x52>
		return false;
    b68c:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
    b68e:	b003      	add	sp, #12
    b690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
    b694:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
    b698:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
    b69a:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
    b69c:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
    b6a0:	d0f1      	beq.n	b686 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
    b6a2:	f7ff ffb2 	bl	b60a <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    b6a6:	68e3      	ldr	r3, [r4, #12]
    b6a8:	60a3      	str	r3, [r4, #8]
		return true;
    b6aa:	2001      	movs	r0, #1
    b6ac:	e7ef      	b.n	b68e <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
    b6ae:	69a3      	ldr	r3, [r4, #24]
    b6b0:	4650      	mov	r0, sl
    b6b2:	4798      	blx	r3
	return item->hdr.valid;
    b6b4:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
    b6b8:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
    b6ba:	4605      	mov	r5, r0
	if (!is_valid(item)) {
    b6bc:	d5e6      	bpl.n	b68c <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
    b6be:	f013 0302 	ands.w	r3, r3, #2
    b6c2:	d01d      	beq.n	b700 <drop_item_locked+0xa4>
		if (free_wlen) {
    b6c4:	f1b8 0f00 	cmp.w	r8, #0
    b6c8:	d003      	beq.n	b6d2 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
    b6ca:	4641      	mov	r1, r8
    b6cc:	4620      	mov	r0, r4
    b6ce:	f7ff ffa8 	bl	b622 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    b6d2:	6861      	ldr	r1, [r4, #4]
    b6d4:	462a      	mov	r2, r5
    b6d6:	4620      	mov	r0, r4
    b6d8:	f7ff ff89 	bl	b5ee <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    b6dc:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    b6e0:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    b6e2:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    b6e4:	d104      	bne.n	b6f0 <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
    b6e6:	462a      	mov	r2, r5
    b6e8:	4620      	mov	r0, r4
    b6ea:	f7ff ff80 	bl	b5ee <idx_inc>
    b6ee:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
    b6f0:	68a3      	ldr	r3, [r4, #8]
    b6f2:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
    b6f4:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
    b6f6:	6923      	ldr	r3, [r4, #16]
    b6f8:	f043 0308 	orr.w	r3, r3, #8
    b6fc:	6123      	str	r3, [r4, #16]
    b6fe:	e7d4      	b.n	b6aa <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
    b700:	4601      	mov	r1, r0
    b702:	4620      	mov	r0, r4
    b704:	9301      	str	r3, [sp, #4]
    b706:	f7ff ff80 	bl	b60a <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    b70a:	68e2      	ldr	r2, [r4, #12]
    b70c:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
    b70e:	f1b8 0f00 	cmp.w	r8, #0
    b712:	d004      	beq.n	b71e <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
    b714:	6821      	ldr	r1, [r4, #0]
    b716:	69e2      	ldr	r2, [r4, #28]
    b718:	9b01      	ldr	r3, [sp, #4]
    b71a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
    b71e:	eb05 0208 	add.w	r2, r5, r8
    b722:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    b726:	6821      	ldr	r1, [r4, #0]
    b728:	4620      	mov	r0, r4
    b72a:	f7ff ff60 	bl	b5ee <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
    b72e:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    b730:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
    b732:	f043 0308 	orr.w	r3, r3, #8
    b736:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
    b738:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    b73c:	f36f 0300 	bfc	r3, #0, #1
    b740:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
    b744:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
    b748:	e7af      	b.n	b6aa <drop_item_locked+0x4e>

0000b74a <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
    b74a:	b570      	push	{r4, r5, r6, lr}
    b74c:	4604      	mov	r4, r0
    b74e:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
    b750:	f7ff ff4d 	bl	b5ee <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
    b754:	6823      	ldr	r3, [r4, #0]
    b756:	4283      	cmp	r3, r0
    b758:	d105      	bne.n	b766 <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
    b75a:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
    b75c:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
    b75e:	f023 0308 	bic.w	r3, r3, #8
    b762:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
    b764:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    b766:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
    b768:	00ab      	lsls	r3, r5, #2
    b76a:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    b76e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
    b772:	4620      	mov	r0, r4
    b774:	6861      	ldr	r1, [r4, #4]
    b776:	462a      	mov	r2, r5
    b778:	f7ff ff39 	bl	b5ee <idx_inc>
    b77c:	6060      	str	r0, [r4, #4]
    b77e:	e7f1      	b.n	b764 <post_drop_action+0x1a>

0000b780 <max_utilization_update>:
{
    b780:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    b782:	6903      	ldr	r3, [r0, #16]
    b784:	075b      	lsls	r3, r3, #29
{
    b786:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    b788:	d506      	bpl.n	b798 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    b78a:	6a45      	ldr	r5, [r0, #36]	; 0x24
    b78c:	f7ff ff1e 	bl	b5cc <get_usage>
    b790:	4285      	cmp	r5, r0
    b792:	bf2c      	ite	cs
    b794:	6265      	strcs	r5, [r4, #36]	; 0x24
    b796:	6260      	strcc	r0, [r4, #36]	; 0x24
}
    b798:	bd38      	pop	{r3, r4, r5, pc}

0000b79a <mpsc_pbuf_init>:
{
    b79a:	b538      	push	{r3, r4, r5, lr}
    b79c:	460d      	mov	r5, r1
    b79e:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    b7a0:	221c      	movs	r2, #28
    b7a2:	2100      	movs	r1, #0
    b7a4:	f000 fa9a 	bl	bcdc <memset>
	buffer->get_wlen = cfg->get_wlen;
    b7a8:	68eb      	ldr	r3, [r5, #12]
    b7aa:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    b7ac:	68ab      	ldr	r3, [r5, #8]
    b7ae:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    b7b0:	682b      	ldr	r3, [r5, #0]
    b7b2:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    b7b4:	686b      	ldr	r3, [r5, #4]
    b7b6:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
    b7b8:	2200      	movs	r2, #0
    b7ba:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    b7bc:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
    b7be:	b123      	cbz	r3, b7ca <mpsc_pbuf_init+0x30>
    b7c0:	1e59      	subs	r1, r3, #1
    b7c2:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    b7c4:	bf08      	it	eq
    b7c6:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    b7ca:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    b7cc:	2201      	movs	r2, #1
    b7ce:	f104 0028 	add.w	r0, r4, #40	; 0x28
    b7d2:	2100      	movs	r1, #0
}
    b7d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    b7d8:	f001 b873 	b.w	c8c2 <z_impl_k_sem_init>

0000b7dc <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    b7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b7e0:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
    b7e2:	2500      	movs	r5, #0
{
    b7e4:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
    b7e6:	6a03      	ldr	r3, [r0, #32]
	union mpsc_pbuf_generic *dropped_item = NULL;
    b7e8:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
    b7ea:	428b      	cmp	r3, r1
{
    b7ec:	4604      	mov	r4, r0
    b7ee:	460e      	mov	r6, r1
    b7f0:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
    b7f2:	9505      	str	r5, [sp, #20]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
    b7f4:	46a9      	mov	r9, r5
	if (wlen > (buffer->size)) {
    b7f6:	d33a      	bcc.n	b86e <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
    b7f8:	f04f 0340 	mov.w	r3, #64	; 0x40
    b7fc:	f3ef 8b11 	mrs	fp, BASEPRI
    b800:	f383 8812 	msr	BASEPRI_MAX, r3
    b804:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
    b808:	9a05      	ldr	r2, [sp, #20]
    b80a:	46d8      	mov	r8, fp
    b80c:	b12a      	cbz	r2, b81a <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
    b80e:	4629      	mov	r1, r5
    b810:	4620      	mov	r0, r4
    b812:	f7ff ff9a 	bl	b74a <post_drop_action>
			tmp_wr_idx_shift = 0;
    b816:	2300      	movs	r3, #0
    b818:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
    b81a:	a904      	add	r1, sp, #16
    b81c:	4620      	mov	r0, r4
    b81e:	f7ff fec2 	bl	b5a6 <free_space>

		if (free_wlen >= wlen) {
    b822:	9904      	ldr	r1, [sp, #16]
    b824:	42b1      	cmp	r1, r6
		wrap = free_space(buffer, &free_wlen);
    b826:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
    b828:	d32a      	bcc.n	b880 <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    b82a:	6822      	ldr	r2, [r4, #0]
			item =
    b82c:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    b82e:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    b832:	f021 0103 	bic.w	r1, r1, #3
    b836:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
    b83a:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    b83e:	6821      	ldr	r1, [r4, #0]
    b840:	4632      	mov	r2, r6
    b842:	4620      	mov	r0, r4
    b844:	f7ff fed3 	bl	b5ee <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    b848:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    b84a:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    b84c:	4298      	cmp	r0, r3
    b84e:	d012      	beq.n	b876 <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
    b850:	2700      	movs	r7, #0
	__asm__ volatile(
    b852:	f388 8811 	msr	BASEPRI, r8
    b856:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
    b85a:	9903      	ldr	r1, [sp, #12]
    b85c:	b129      	cbz	r1, b86a <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    b85e:	6962      	ldr	r2, [r4, #20]
    b860:	b10a      	cbz	r2, b866 <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
    b862:	4620      	mov	r0, r4
    b864:	4790      	blx	r2
			}
			dropped_item = NULL;
    b866:	2300      	movs	r3, #0
    b868:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
    b86a:	2f00      	cmp	r7, #0
    b86c:	d1c4      	bne.n	b7f8 <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    b86e:	4648      	mov	r0, r9
    b870:	b007      	add	sp, #28
    b872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
    b876:	6923      	ldr	r3, [r4, #16]
    b878:	f043 0308 	orr.w	r3, r3, #8
    b87c:	6123      	str	r3, [r4, #16]
    b87e:	e7e7      	b.n	b850 <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
    b880:	b118      	cbz	r0, b88a <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
    b882:	4620      	mov	r0, r4
    b884:	f7ff fecd 	bl	b622 <add_skip_item>
			cont = true;
    b888:	e7e3      	b.n	b852 <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    b88a:	9b00      	ldr	r3, [sp, #0]
    b88c:	ea5a 0303 	orrs.w	r3, sl, r3
    b890:	d01a      	beq.n	b8c8 <mpsc_pbuf_alloc+0xec>
    b892:	9101      	str	r1, [sp, #4]
    b894:	f000 ff71 	bl	c77a <k_is_in_isr>
    b898:	9901      	ldr	r1, [sp, #4]
    b89a:	b9a8      	cbnz	r0, b8c8 <mpsc_pbuf_alloc+0xec>
    b89c:	f38b 8811 	msr	BASEPRI, fp
    b8a0:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    b8a4:	9b00      	ldr	r3, [sp, #0]
    b8a6:	4652      	mov	r2, sl
    b8a8:	f104 0028 	add.w	r0, r4, #40	; 0x28
    b8ac:	f7fe fb04 	bl	9eb8 <z_impl_k_sem_take>
	__asm__ volatile(
    b8b0:	f04f 0340 	mov.w	r3, #64	; 0x40
    b8b4:	f3ef 8811 	mrs	r8, BASEPRI
    b8b8:	f383 8812 	msr	BASEPRI_MAX, r3
    b8bc:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
    b8c0:	fab0 f780 	clz	r7, r0
    b8c4:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    b8c6:	e7c4      	b.n	b852 <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
    b8c8:	ab05      	add	r3, sp, #20
    b8ca:	aa03      	add	r2, sp, #12
    b8cc:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
    b8ce:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
    b8d0:	f7ff fec4 	bl	b65c <drop_item_locked>
    b8d4:	4607      	mov	r7, r0
    b8d6:	e7bc      	b.n	b852 <mpsc_pbuf_alloc+0x76>

0000b8d8 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    b8d8:	b570      	push	{r4, r5, r6, lr}
    b8da:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    b8dc:	6983      	ldr	r3, [r0, #24]
    b8de:	4608      	mov	r0, r1
{
    b8e0:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    b8e2:	4798      	blx	r3
    b8e4:	4602      	mov	r2, r0
    b8e6:	f04f 0340 	mov.w	r3, #64	; 0x40
    b8ea:	f3ef 8611 	mrs	r6, BASEPRI
    b8ee:	f383 8812 	msr	BASEPRI_MAX, r3
    b8f2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    b8f6:	782b      	ldrb	r3, [r5, #0]
    b8f8:	f043 0301 	orr.w	r3, r3, #1
    b8fc:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    b8fe:	6861      	ldr	r1, [r4, #4]
    b900:	4620      	mov	r0, r4
    b902:	f7ff fe74 	bl	b5ee <idx_inc>
    b906:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    b908:	4620      	mov	r0, r4
    b90a:	f7ff ff39 	bl	b780 <max_utilization_update>
	__asm__ volatile(
    b90e:	f386 8811 	msr	BASEPRI, r6
    b912:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
    b916:	bd70      	pop	{r4, r5, r6, pc}

0000b918 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    b918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b91a:	4604      	mov	r4, r0
	__asm__ volatile(
    b91c:	f04f 0340 	mov.w	r3, #64	; 0x40
    b920:	f3ef 8611 	mrs	r6, BASEPRI
    b924:	f383 8812 	msr	BASEPRI_MAX, r3
    b928:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    b92c:	6923      	ldr	r3, [r4, #16]
    b92e:	f013 0f08 	tst.w	r3, #8
    b932:	68a3      	ldr	r3, [r4, #8]
    b934:	d102      	bne.n	b93c <mpsc_pbuf_claim+0x24>
    b936:	6862      	ldr	r2, [r4, #4]
    b938:	4293      	cmp	r3, r2
    b93a:	d900      	bls.n	b93e <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
    b93c:	6a22      	ldr	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
    b93e:	69e1      	ldr	r1, [r4, #28]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    b940:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
    b942:	b92a      	cbnz	r2, b950 <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
    b944:	f386 8811 	msr	BASEPRI, r6
    b948:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
    b94c:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
    b94e:	e033      	b.n	b9b8 <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
    b950:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
    b954:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
    b958:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
    b95c:	d0f2      	beq.n	b944 <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
    b95e:	2802      	cmp	r0, #2
    b960:	d103      	bne.n	b96a <mpsc_pbuf_claim+0x52>
		return item->skip.len;
    b962:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
    b966:	08ad      	lsrs	r5, r5, #2
    b968:	d105      	bne.n	b976 <mpsc_pbuf_claim+0x5e>
    b96a:	07d0      	lsls	r0, r2, #31
    b96c:	d412      	bmi.n	b994 <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
    b96e:	69a3      	ldr	r3, [r4, #24]
    b970:	4638      	mov	r0, r7
    b972:	4798      	blx	r3
    b974:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    b976:	68a1      	ldr	r1, [r4, #8]
    b978:	462a      	mov	r2, r5
    b97a:	4620      	mov	r0, r4
    b97c:	f7ff fe37 	bl	b5ee <idx_inc>
				rd_idx_inc(buffer, inc);
    b980:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
    b982:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
    b984:	4620      	mov	r0, r4
    b986:	f7ff fe40 	bl	b60a <rd_idx_inc>
    b98a:	f386 8811 	msr	BASEPRI, r6
    b98e:	f3bf 8f6f 	isb	sy
	} while (cont);
    b992:	e7c3      	b.n	b91c <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
    b994:	f042 0202 	orr.w	r2, r2, #2
    b998:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
    b99c:	4638      	mov	r0, r7
    b99e:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
    b9a0:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
    b9a2:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
    b9a4:	4629      	mov	r1, r5
						buffer->get_wlen(item));
    b9a6:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
    b9a8:	4620      	mov	r0, r4
    b9aa:	f7ff fe20 	bl	b5ee <idx_inc>
				buffer->tmp_rd_idx =
    b9ae:	60a0      	str	r0, [r4, #8]
    b9b0:	f386 8811 	msr	BASEPRI, r6
    b9b4:	f3bf 8f6f 	isb	sy
}
    b9b8:	4638      	mov	r0, r7
    b9ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b9bc <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    b9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b9be:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    b9c0:	6983      	ldr	r3, [r0, #24]
    b9c2:	4608      	mov	r0, r1
{
    b9c4:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    b9c6:	4798      	blx	r3
    b9c8:	4606      	mov	r6, r0
	__asm__ volatile(
    b9ca:	f04f 0340 	mov.w	r3, #64	; 0x40
    b9ce:	f3ef 8711 	mrs	r7, BASEPRI
    b9d2:	f383 8812 	msr	BASEPRI_MAX, r3
    b9d6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    b9da:	782b      	ldrb	r3, [r5, #0]
    b9dc:	f36f 0300 	bfc	r3, #0, #1
    b9e0:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    b9e2:	6923      	ldr	r3, [r4, #16]
    b9e4:	079b      	lsls	r3, r3, #30
    b9e6:	d505      	bpl.n	b9f4 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    b9e8:	68e2      	ldr	r2, [r4, #12]
    b9ea:	69e3      	ldr	r3, [r4, #28]
    b9ec:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    b9f0:	429d      	cmp	r5, r3
    b9f2:	d11a      	bne.n	ba2a <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
    b9f4:	782b      	ldrb	r3, [r5, #0]
    b9f6:	f36f 0341 	bfc	r3, #1, #1
    b9fa:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    b9fc:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    ba00:	4299      	cmp	r1, r3
    ba02:	d104      	bne.n	ba0e <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
    ba04:	4632      	mov	r2, r6
    ba06:	4620      	mov	r0, r4
    ba08:	f7ff fdf1 	bl	b5ee <idx_inc>
    ba0c:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
    ba0e:	4631      	mov	r1, r6
    ba10:	4620      	mov	r0, r4
    ba12:	f7ff fdfa 	bl	b60a <rd_idx_inc>
	__asm__ volatile(
    ba16:	f387 8811 	msr	BASEPRI, r7
    ba1a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    ba1e:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    ba22:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    ba26:	f7fe ba27 	b.w	9e78 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    ba2a:	682b      	ldr	r3, [r5, #0]
    ba2c:	f360 039f 	bfi	r3, r0, #2, #30
    ba30:	602b      	str	r3, [r5, #0]
    ba32:	e7f0      	b.n	ba16 <mpsc_pbuf_free+0x5a>

0000ba34 <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    ba34:	6902      	ldr	r2, [r0, #16]
    ba36:	6883      	ldr	r3, [r0, #8]
    ba38:	0712      	lsls	r2, r2, #28
    ba3a:	d402      	bmi.n	ba42 <mpsc_pbuf_is_pending+0xe>
    ba3c:	6842      	ldr	r2, [r0, #4]
    ba3e:	429a      	cmp	r2, r3
    ba40:	d200      	bcs.n	ba44 <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
    ba42:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    ba44:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    ba46:	1e18      	subs	r0, r3, #0
    ba48:	bf18      	it	ne
    ba4a:	2001      	movne	r0, #1
    ba4c:	4770      	bx	lr

0000ba4e <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    ba4e:	4770      	bx	lr

0000ba50 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
    ba50:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    ba52:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    ba54:	bf5f      	itttt	pl
    ba56:	6803      	ldrpl	r3, [r0, #0]
    ba58:	8842      	ldrhpl	r2, [r0, #2]
    ba5a:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
    ba5e:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
    ba62:	bf5d      	ittte	pl
    ba64:	3017      	addpl	r0, #23
    ba66:	f020 0007 	bicpl.w	r0, r0, #7
    ba6a:	0880      	lsrpl	r0, r0, #2
	return 0;
    ba6c:	2000      	movmi	r0, #0
}
    ba6e:	4770      	bx	lr

0000ba70 <dummy_timestamp>:
}
    ba70:	2000      	movs	r0, #0
    ba72:	4770      	bx	lr

0000ba74 <default_get_timestamp>:
    ba74:	f000 bbcc 	b.w	c210 <sys_clock_cycle_get_32>

0000ba78 <atomic_inc>:
{
    ba78:	4603      	mov	r3, r0
}
    ba7a:	f3bf 8f5b 	dmb	ish
    ba7e:	e853 0f00 	ldrex	r0, [r3]
    ba82:	1c42      	adds	r2, r0, #1
    ba84:	e843 2100 	strex	r1, r2, [r3]
    ba88:	2900      	cmp	r1, #0
    ba8a:	d1f8      	bne.n	ba7e <atomic_inc+0x6>
    ba8c:	f3bf 8f5b 	dmb	ish
    ba90:	4770      	bx	lr

0000ba92 <z_log_vprintk>:
{
    ba92:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    ba94:	2300      	movs	r3, #0
    ba96:	e9cd 0102 	strd	r0, r1, [sp, #8]
    ba9a:	e9cd 3300 	strd	r3, r3, [sp]
    ba9e:	461a      	mov	r2, r3
    baa0:	4619      	mov	r1, r3
    baa2:	4618      	mov	r0, r3
    baa4:	f7f6 fccc 	bl	2440 <z_impl_z_log_msg_runtime_vcreate>
}
    baa8:	b005      	add	sp, #20
    baaa:	f85d fb04 	ldr.w	pc, [sp], #4

0000baae <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
    baae:	2001      	movs	r0, #1
    bab0:	f7f6 ba7e 	b.w	1fb0 <z_log_dropped>

0000bab4 <z_log_get_tag>:
}
    bab4:	2000      	movs	r0, #0
    bab6:	4770      	bx	lr

0000bab8 <z_cbprintf_cpy>:
{
    bab8:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
    baba:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
    babe:	1b9b      	subs	r3, r3, r6
    bac0:	428b      	cmp	r3, r1
{
    bac2:	460c      	mov	r4, r1
    bac4:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
    bac6:	d30a      	bcc.n	bade <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
    bac8:	6813      	ldr	r3, [r2, #0]
    baca:	460a      	mov	r2, r1
    bacc:	4601      	mov	r1, r0
    bace:	1998      	adds	r0, r3, r6
    bad0:	f000 f8f9 	bl	bcc6 <memcpy>
	desc->off += len;
    bad4:	68ab      	ldr	r3, [r5, #8]
    bad6:	4423      	add	r3, r4
    bad8:	60ab      	str	r3, [r5, #8]
	return len;
    bada:	4620      	mov	r0, r4
}
    badc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    bade:	f06f 001b 	mvn.w	r0, #27
    bae2:	e7fb      	b.n	badc <z_cbprintf_cpy+0x24>

0000bae4 <z_log_msg_finalize>:
{
    bae4:	b570      	push	{r4, r5, r6, lr}
    bae6:	460e      	mov	r6, r1
    bae8:	4615      	mov	r5, r2
    baea:	4619      	mov	r1, r3
	if (!msg) {
    baec:	4604      	mov	r4, r0
    baee:	b918      	cbnz	r0, baf8 <z_log_msg_finalize+0x14>
}
    baf0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    baf4:	f7f6 ba5c 	b.w	1fb0 <z_log_dropped>
	if (data) {
    baf8:	b133      	cbz	r3, bb08 <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
    bafa:	f3c2 234a 	ubfx	r3, r2, #9, #11
    bafe:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    bb00:	0d12      	lsrs	r2, r2, #20
    bb02:	4418      	add	r0, r3
    bb04:	f000 f8df 	bl	bcc6 <memcpy>
	msg->hdr.source = source;
    bb08:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    bb0c:	4620      	mov	r0, r4
}
    bb0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    bb12:	f7f6 bbdd 	b.w	22d0 <z_log_msg_commit>

0000bb16 <buffer_write>:
{
    bb16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bb18:	4606      	mov	r6, r0
    bb1a:	460d      	mov	r5, r1
    bb1c:	4614      	mov	r4, r2
    bb1e:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    bb20:	4621      	mov	r1, r4
    bb22:	4628      	mov	r0, r5
    bb24:	463a      	mov	r2, r7
    bb26:	47b0      	blx	r6
	} while (len != 0);
    bb28:	1a24      	subs	r4, r4, r0
		buf += processed;
    bb2a:	4405      	add	r5, r0
	} while (len != 0);
    bb2c:	d1f8      	bne.n	bb20 <buffer_write+0xa>
}
    bb2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000bb30 <cbvprintf>:
{
    bb30:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    bb32:	2400      	movs	r4, #0
    bb34:	9400      	str	r4, [sp, #0]
    bb36:	f7f5 fdb5 	bl	16a4 <z_cbvprintf_impl>
}
    bb3a:	b002      	add	sp, #8
    bb3c:	bd10      	pop	{r4, pc}

0000bb3e <log_output_flush>:
{
    bb3e:	b510      	push	{r4, lr}
		     output->control_block->offset,
    bb40:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    bb42:	6881      	ldr	r1, [r0, #8]
{
    bb44:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    bb46:	e9d2 2300 	ldrd	r2, r3, [r2]
    bb4a:	6800      	ldr	r0, [r0, #0]
    bb4c:	f7ff ffe3 	bl	bb16 <buffer_write>
	output->control_block->offset = 0;
    bb50:	6863      	ldr	r3, [r4, #4]
    bb52:	2200      	movs	r2, #0
    bb54:	601a      	str	r2, [r3, #0]
}
    bb56:	bd10      	pop	{r4, pc}

0000bb58 <out_func>:
{
    bb58:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    bb5a:	684b      	ldr	r3, [r1, #4]
    bb5c:	681a      	ldr	r2, [r3, #0]
    bb5e:	68cb      	ldr	r3, [r1, #12]
    bb60:	429a      	cmp	r2, r3
{
    bb62:	4605      	mov	r5, r0
    bb64:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    bb66:	d102      	bne.n	bb6e <out_func+0x16>
		log_output_flush(out_ctx);
    bb68:	4608      	mov	r0, r1
    bb6a:	f7ff ffe8 	bl	bb3e <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    bb6e:	6863      	ldr	r3, [r4, #4]
    bb70:	f3bf 8f5b 	dmb	ish
    bb74:	e853 2f00 	ldrex	r2, [r3]
    bb78:	1c51      	adds	r1, r2, #1
    bb7a:	e843 1000 	strex	r0, r1, [r3]
    bb7e:	2800      	cmp	r0, #0
    bb80:	d1f8      	bne.n	bb74 <out_func+0x1c>
    bb82:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    bb86:	68a3      	ldr	r3, [r4, #8]
    bb88:	549d      	strb	r5, [r3, r2]
}
    bb8a:	2000      	movs	r0, #0
    bb8c:	bd38      	pop	{r3, r4, r5, pc}

0000bb8e <cr_out_func>:
	if (c == '\n') {
    bb8e:	280a      	cmp	r0, #10
{
    bb90:	b538      	push	{r3, r4, r5, lr}
    bb92:	4604      	mov	r4, r0
    bb94:	460d      	mov	r5, r1
	if (c == '\n') {
    bb96:	d102      	bne.n	bb9e <cr_out_func+0x10>
		out_func((int)'\r', ctx);
    bb98:	200d      	movs	r0, #13
    bb9a:	f7ff ffdd 	bl	bb58 <out_func>
	out_func(c, ctx);
    bb9e:	4629      	mov	r1, r5
    bba0:	4620      	mov	r0, r4
    bba2:	f7ff ffd9 	bl	bb58 <out_func>
}
    bba6:	2000      	movs	r0, #0
    bba8:	bd38      	pop	{r3, r4, r5, pc}

0000bbaa <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
    bbaa:	f010 0f70 	tst.w	r0, #112	; 0x70
	ep_idx = ep & (~USB_EP_DIR_IN);
    bbae:	f000 027f 	and.w	r2, r0, #127	; 0x7f
	if (ep_idx > 15) {
    bbb2:	d001      	beq.n	bbb8 <get_ep_bm_from_addr+0xe>
    bbb4:	f7f7 b916 	b.w	2de4 <get_ep_bm_from_addr.part.0>
	if (ep & USB_EP_DIR_IN) {
    bbb8:	f010 0f80 	tst.w	r0, #128	; 0x80
		ep_bm = BIT(ep_idx + 16);
    bbbc:	bf18      	it	ne
    bbbe:	3210      	addne	r2, #16
    bbc0:	2001      	movs	r0, #1
		ep_bm = BIT(ep_idx);
    bbc2:	4090      	lsls	r0, r2
}
    bbc4:	4770      	bx	lr

0000bbc6 <usb_write>:
{
    bbc6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bbca:	4606      	mov	r6, r0
    bbcc:	460f      	mov	r7, r1
    bbce:	4690      	mov	r8, r2
    bbd0:	4699      	mov	r9, r3
    bbd2:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    bbd4:	464b      	mov	r3, r9
    bbd6:	4642      	mov	r2, r8
    bbd8:	4639      	mov	r1, r7
    bbda:	4630      	mov	r0, r6
    bbdc:	f7f9 fce0 	bl	55a0 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    bbe0:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    bbe4:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    bbe6:	d103      	bne.n	bbf0 <usb_write+0x2a>
	z_impl_k_yield();
    bbe8:	f7fe fd6a 	bl	a6c0 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    bbec:	3d01      	subs	r5, #1
    bbee:	d1f1      	bne.n	bbd4 <usb_write+0xe>
}
    bbf0:	4620      	mov	r0, r4
    bbf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000bbf6 <usb_get_dev_data_by_cfg>:
	return list->head;
    bbf6:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    bbf8:	b140      	cbz	r0, bc0c <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    bbfa:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
    bbfe:	685b      	ldr	r3, [r3, #4]
    bc00:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    bc02:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
    bc06:	d001      	beq.n	bc0c <usb_get_dev_data_by_cfg+0x16>
	return node->next;
    bc08:	6840      	ldr	r0, [r0, #4]
    bc0a:	e7f5      	b.n	bbf8 <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    bc0c:	4770      	bx	lr

0000bc0e <usb_get_dev_data_by_iface>:
	return list->head;
    bc0e:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    bc10:	b150      	cbz	r0, bc28 <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    bc12:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
    bc16:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    bc18:	685b      	ldr	r3, [r3, #4]
    bc1a:	789b      	ldrb	r3, [r3, #2]
    bc1c:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    bc1e:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
    bc22:	d001      	beq.n	bc28 <usb_get_dev_data_by_iface+0x1a>
	return node->next;
    bc24:	6840      	ldr	r0, [r0, #4]
    bc26:	e7f3      	b.n	bc10 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    bc28:	4770      	bx	lr

0000bc2a <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    bc2a:	b530      	push	{r4, r5, lr}
	return list->head;
    bc2c:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    bc2e:	b188      	cbz	r0, bc54 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    bc30:	f850 3c04 	ldr.w	r3, [r0, #-4]
    bc34:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    bc36:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    bc38:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    bc3a:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    bc3c:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    bc3e:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    bc40:	b2dc      	uxtb	r4, r3
    bc42:	42a5      	cmp	r5, r4
    bc44:	d801      	bhi.n	bc4a <usb_get_dev_data_by_ep+0x20>
	return node->next;
    bc46:	6840      	ldr	r0, [r0, #4]
    bc48:	e7f1      	b.n	bc2e <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    bc4a:	3301      	adds	r3, #1
    bc4c:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    bc50:	428c      	cmp	r4, r1
    bc52:	d1f5      	bne.n	bc40 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    bc54:	bd30      	pop	{r4, r5, pc}

0000bc56 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    bc56:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    bc58:	6800      	ldr	r0, [r0, #0]
    bc5a:	f7f7 bf3d 	b.w	3ad8 <z_arm_fatal_error>

0000bc5e <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    bc5e:	2100      	movs	r1, #0
    bc60:	2001      	movs	r0, #1
    bc62:	f7f7 bf39 	b.w	3ad8 <z_arm_fatal_error>

0000bc66 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    bc66:	b508      	push	{r3, lr}
	handler();
    bc68:	f7f7 fff4 	bl	3c54 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    bc6c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    bc70:	f7f8 b8c6 	b.w	3e00 <z_arm_exc_exit>

0000bc74 <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
    bc74:	2300      	movs	r3, #0
    bc76:	f7f6 bb5f 	b.w	2338 <z_impl_z_log_msg_static_create>

0000bc7a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    bc7a:	3901      	subs	r1, #1
    bc7c:	4603      	mov	r3, r0
    bc7e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    bc82:	b90a      	cbnz	r2, bc88 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    bc84:	701a      	strb	r2, [r3, #0]

	return dest;
}
    bc86:	4770      	bx	lr
		*d = *s;
    bc88:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    bc8c:	e7f7      	b.n	bc7e <strcpy+0x4>

0000bc8e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    bc8e:	4603      	mov	r3, r0
	size_t n = 0;
    bc90:	2000      	movs	r0, #0

	while (*s != '\0') {
    bc92:	5c1a      	ldrb	r2, [r3, r0]
    bc94:	b902      	cbnz	r2, bc98 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    bc96:	4770      	bx	lr
		n++;
    bc98:	3001      	adds	r0, #1
    bc9a:	e7fa      	b.n	bc92 <strlen+0x4>

0000bc9c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    bc9c:	4603      	mov	r3, r0
	size_t n = 0;
    bc9e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    bca0:	5c1a      	ldrb	r2, [r3, r0]
    bca2:	b10a      	cbz	r2, bca8 <strnlen+0xc>
    bca4:	4288      	cmp	r0, r1
    bca6:	d100      	bne.n	bcaa <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    bca8:	4770      	bx	lr
		n++;
    bcaa:	3001      	adds	r0, #1
    bcac:	e7f8      	b.n	bca0 <strnlen+0x4>

0000bcae <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    bcae:	1e43      	subs	r3, r0, #1
    bcb0:	3901      	subs	r1, #1
    bcb2:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    bcb6:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    bcba:	4282      	cmp	r2, r0
    bcbc:	d101      	bne.n	bcc2 <strcmp+0x14>
    bcbe:	2a00      	cmp	r2, #0
    bcc0:	d1f7      	bne.n	bcb2 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    bcc2:	1a10      	subs	r0, r2, r0
    bcc4:	4770      	bx	lr

0000bcc6 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    bcc6:	b510      	push	{r4, lr}
    bcc8:	1e43      	subs	r3, r0, #1
    bcca:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    bccc:	4291      	cmp	r1, r2
    bcce:	d100      	bne.n	bcd2 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    bcd0:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    bcd2:	f811 4b01 	ldrb.w	r4, [r1], #1
    bcd6:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    bcda:	e7f7      	b.n	bccc <memcpy+0x6>

0000bcdc <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    bcdc:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    bcde:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    bce0:	4603      	mov	r3, r0
	while (n > 0) {
    bce2:	4293      	cmp	r3, r2
    bce4:	d100      	bne.n	bce8 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    bce6:	4770      	bx	lr
		*(d_byte++) = c_byte;
    bce8:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    bcec:	e7f9      	b.n	bce2 <memset+0x6>

0000bcee <_stdout_hook_default>:
}
    bcee:	f04f 30ff 	mov.w	r0, #4294967295
    bcf2:	4770      	bx	lr

0000bcf4 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    bcf4:	f04f 0240 	mov.w	r2, #64	; 0x40
    bcf8:	f3ef 8311 	mrs	r3, BASEPRI
    bcfc:	f382 8812 	msr	BASEPRI_MAX, r2
    bd00:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    bd04:	f383 8811 	msr	BASEPRI, r3
    bd08:	f3bf 8f6f 	isb	sy
}
    bd0c:	2000      	movs	r0, #0
    bd0e:	4770      	bx	lr

0000bd10 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    bd10:	2806      	cmp	r0, #6
    bd12:	d108      	bne.n	bd26 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    bd14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    bd18:	2201      	movs	r2, #1
    bd1a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    bd1e:	f3bf 8f4f 	dsb	sy
        __WFE();
    bd22:	bf20      	wfe
    while (true)
    bd24:	e7fd      	b.n	bd22 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    bd26:	4770      	bx	lr

0000bd28 <pm_state_exit_post_ops>:
    bd28:	2300      	movs	r3, #0
    bd2a:	f383 8811 	msr	BASEPRI, r3
    bd2e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    bd32:	4770      	bx	lr

0000bd34 <hid_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    bd34:	7081      	strb	r1, [r0, #2]
}
    bd36:	4770      	bx	lr

0000bd38 <usb_hid_device_init>:
static int usb_hid_device_init(const struct device *dev)
{
	LOG_DBG("Init HID Device: dev %p (%s)", dev, dev->name);

	return 0;
}
    bd38:	2000      	movs	r0, #0
    bd3a:	4770      	bx	lr

0000bd3c <z_log_msg_static_create.constprop.0>:
    bd3c:	2300      	movs	r3, #0
    bd3e:	f7f6 bafb 	b.w	2338 <z_impl_z_log_msg_static_create>

0000bd42 <usb_hid_init>:
	usb_set_hid_report_size(cfg, dev_data->report_size);
    bd42:	6903      	ldr	r3, [r0, #16]
    bd44:	6842      	ldr	r2, [r0, #4]
    bd46:	685b      	ldr	r3, [r3, #4]
    bd48:	6852      	ldr	r2, [r2, #4]
	dst[0] = val;
    bd4a:	7413      	strb	r3, [r2, #16]
	dst[1] = val >> 8;
    bd4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    bd50:	7453      	strb	r3, [r2, #17]
}
    bd52:	2000      	movs	r0, #0
    bd54:	4770      	bx	lr

0000bd56 <ep_ctx_reset>:
{
    bd56:	b510      	push	{r4, lr}
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    bd58:	6903      	ldr	r3, [r0, #16]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    bd5a:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    bd5e:	2300      	movs	r3, #0
    bd60:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    bd62:	7f83      	ldrb	r3, [r0, #30]
{
    bd64:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    bd66:	b113      	cbz	r3, bd6e <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    bd68:	7a40      	ldrb	r0, [r0, #9]
    bd6a:	f000 fc60 	bl	c62e <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    bd6e:	2301      	movs	r3, #1
    bd70:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    bd72:	2300      	movs	r3, #0
    bd74:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    bd76:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    bd78:	77a3      	strb	r3, [r4, #30]
}
    bd7a:	bd10      	pop	{r4, pc}

0000bd7c <z_log_msg_static_create.constprop.0>:
    bd7c:	2300      	movs	r3, #0
    bd7e:	f7f6 badb 	b.w	2338 <z_impl_z_log_msg_static_create>

0000bd82 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    bd82:	f7fd bf8f 	b.w	9ca4 <z_impl_k_mutex_lock>

0000bd86 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    bd86:	f7fe b807 	b.w	9d98 <z_impl_k_mutex_unlock>

0000bd8a <usb_dc_ep_disable>:
{
    bd8a:	b538      	push	{r3, r4, r5, lr}
    bd8c:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    bd8e:	f7f8 fe79 	bl	4a84 <endpoint_ctx>
	if (!ep_ctx) {
    bd92:	4605      	mov	r5, r0
    bd94:	b160      	cbz	r0, bdb0 <usb_dc_ep_disable+0x26>
	if (!ep_ctx->cfg.en) {
    bd96:	7a03      	ldrb	r3, [r0, #8]
    bd98:	b16b      	cbz	r3, bdb6 <usb_dc_ep_disable+0x2c>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    bd9a:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
    bd9c:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    bd9e:	f7fd fb85 	bl	94ac <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    bda2:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    bda4:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    bda6:	f7ff ffd6 	bl	bd56 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    bdaa:	722c      	strb	r4, [r5, #8]
	return 0;
    bdac:	4620      	mov	r0, r4
}
    bdae:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    bdb0:	f06f 0015 	mvn.w	r0, #21
    bdb4:	e7fb      	b.n	bdae <usb_dc_ep_disable+0x24>
		return -EALREADY;
    bdb6:	f06f 0077 	mvn.w	r0, #119	; 0x77
    bdba:	e7f8      	b.n	bdae <usb_dc_ep_disable+0x24>

0000bdbc <usb_dc_ep_read>:
{
    bdbc:	b570      	push	{r4, r5, r6, lr}
    bdbe:	4604      	mov	r4, r0
    bdc0:	460e      	mov	r6, r1
    bdc2:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    bdc4:	f7f9 fc8e 	bl	56e4 <usb_dc_ep_read_wait>
	if (ret) {
    bdc8:	b930      	cbnz	r0, bdd8 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    bdca:	b906      	cbnz	r6, bdce <usb_dc_ep_read+0x12>
    bdcc:	b125      	cbz	r5, bdd8 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    bdce:	4620      	mov	r0, r4
}
    bdd0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    bdd4:	f7f9 bcec 	b.w	57b0 <usb_dc_ep_read_continue>
}
    bdd8:	bd70      	pop	{r4, r5, r6, pc}

0000bdda <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    bdda:	6903      	ldr	r3, [r0, #16]
    bddc:	b2c9      	uxtb	r1, r1
    bdde:	220c      	movs	r2, #12
    bde0:	fb01 3302 	mla	r3, r1, r2, r3
    bde4:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    bde6:	f000 0007 	and.w	r0, r0, #7
    bdea:	4770      	bx	lr

0000bdec <set_on_state>:
	__asm__ volatile(
    bdec:	f04f 0340 	mov.w	r3, #64	; 0x40
    bdf0:	f3ef 8211 	mrs	r2, BASEPRI
    bdf4:	f383 8812 	msr	BASEPRI_MAX, r3
    bdf8:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    bdfc:	6803      	ldr	r3, [r0, #0]
    bdfe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    be02:	f043 0302 	orr.w	r3, r3, #2
    be06:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    be08:	f382 8811 	msr	BASEPRI, r2
    be0c:	f3bf 8f6f 	isb	sy
}
    be10:	4770      	bx	lr

0000be12 <stop>:
{
    be12:	b570      	push	{r4, r5, r6, lr}
    be14:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    be16:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    be18:	f04f 0440 	mov.w	r4, #64	; 0x40
    be1c:	f3ef 8511 	mrs	r5, BASEPRI
    be20:	f384 8812 	msr	BASEPRI_MAX, r4
    be24:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    be28:	260c      	movs	r6, #12
    be2a:	fb06 3401 	mla	r4, r6, r1, r3
    be2e:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    be30:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    be34:	d008      	beq.n	be48 <stop+0x36>
    be36:	42a2      	cmp	r2, r4
    be38:	d006      	beq.n	be48 <stop+0x36>
	__asm__ volatile(
    be3a:	f385 8811 	msr	BASEPRI, r5
    be3e:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    be42:	f04f 30ff 	mov.w	r0, #4294967295
}
    be46:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    be48:	4371      	muls	r1, r6
    be4a:	440b      	add	r3, r1
    be4c:	2201      	movs	r2, #1
    be4e:	641a      	str	r2, [r3, #64]	; 0x40
    be50:	f385 8811 	msr	BASEPRI, r5
    be54:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    be58:	6843      	ldr	r3, [r0, #4]
    be5a:	440b      	add	r3, r1
    be5c:	685b      	ldr	r3, [r3, #4]
    be5e:	4798      	blx	r3
	return 0;
    be60:	2000      	movs	r0, #0
    be62:	e7f0      	b.n	be46 <stop+0x34>

0000be64 <api_stop>:
	return stop(dev, subsys, CTX_API);
    be64:	2280      	movs	r2, #128	; 0x80
    be66:	f7ff bfd4 	b.w	be12 <stop>

0000be6a <async_start>:
{
    be6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    be6c:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    be6e:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    be70:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    be72:	f04f 0540 	mov.w	r5, #64	; 0x40
    be76:	f3ef 8611 	mrs	r6, BASEPRI
    be7a:	f385 8812 	msr	BASEPRI_MAX, r5
    be7e:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    be82:	250c      	movs	r5, #12
    be84:	4369      	muls	r1, r5
    be86:	440c      	add	r4, r1
    be88:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    be8a:	f005 0c07 	and.w	ip, r5, #7
    be8e:	f1bc 0f01 	cmp.w	ip, #1
    be92:	d10b      	bne.n	beac <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    be94:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    be96:	f386 8811 	msr	BASEPRI, r6
    be9a:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    be9e:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    bea2:	6843      	ldr	r3, [r0, #4]
    bea4:	585b      	ldr	r3, [r3, r1]
    bea6:	4798      	blx	r3
	return 0;
    bea8:	2000      	movs	r0, #0
}
    beaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    beac:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    beb0:	42af      	cmp	r7, r5
    beb2:	f386 8811 	msr	BASEPRI, r6
    beb6:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    beba:	bf0c      	ite	eq
    bebc:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    bec0:	f04f 30ff 	movne.w	r0, #4294967295
    bec4:	e7f1      	b.n	beaa <async_start+0x40>

0000bec6 <api_start>:
{
    bec6:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    bec8:	2480      	movs	r4, #128	; 0x80
    beca:	9400      	str	r4, [sp, #0]
    becc:	f7ff ffcd 	bl	be6a <async_start>
}
    bed0:	b002      	add	sp, #8
    bed2:	bd10      	pop	{r4, pc}

0000bed4 <onoff_started_callback>:
{
    bed4:	b410      	push	{r4}
	return &data->mgr[type];
    bed6:	6900      	ldr	r0, [r0, #16]
    bed8:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    beda:	241c      	movs	r4, #28
    bedc:	fb03 0004 	mla	r0, r3, r4, r0
    bee0:	2100      	movs	r1, #0
}
    bee2:	bc10      	pop	{r4}
	notify(mgr, 0);
    bee4:	4710      	bx	r2

0000bee6 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    bee6:	2000      	movs	r0, #0
    bee8:	f000 ba84 	b.w	c3f4 <nrfx_clock_start>

0000beec <blocking_start_callback>:
{
    beec:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    beee:	f7fd bfc3 	b.w	9e78 <z_impl_k_sem_give>

0000bef2 <lfclk_stop>:
{
    bef2:	b508      	push	{r3, lr}
		z_nrf_clock_calibration_lfclk_stopped();
    bef4:	f7f9 fef6 	bl	5ce4 <z_nrf_clock_calibration_lfclk_stopped>
}
    bef8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    befc:	2000      	movs	r0, #0
    befe:	f000 bab1 	b.w	c464 <nrfx_clock_stop>

0000bf02 <timeout_handler>:
	start_cal_process();
    bf02:	f7f9 be3f 	b.w	5b84 <start_cal_process>

0000bf06 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bf06:	6843      	ldr	r3, [r0, #4]
    bf08:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    bf0a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    bf0e:	600b      	str	r3, [r1, #0]
}
    bf10:	2000      	movs	r0, #0
    bf12:	4770      	bx	lr

0000bf14 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bf14:	6843      	ldr	r3, [r0, #4]
    bf16:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    bf18:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    bf1c:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    bf20:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    bf24:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    bf28:	2000      	movs	r0, #0
    bf2a:	4770      	bx	lr

0000bf2c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bf2c:	6843      	ldr	r3, [r0, #4]
    bf2e:	685b      	ldr	r3, [r3, #4]
}
    bf30:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    bf32:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    bf36:	4770      	bx	lr

0000bf38 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bf38:	6843      	ldr	r3, [r0, #4]
    bf3a:	685b      	ldr	r3, [r3, #4]
}
    bf3c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    bf3e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    bf42:	4770      	bx	lr

0000bf44 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    bf44:	6843      	ldr	r3, [r0, #4]
    bf46:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    bf48:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    bf4c:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    bf50:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    bf52:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    bf56:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    bf5a:	2000      	movs	r0, #0
    bf5c:	4770      	bx	lr

0000bf5e <gpio_nrfx_manage_callback>:
{
    bf5e:	b510      	push	{r4, lr}
	return port->data;
    bf60:	6903      	ldr	r3, [r0, #16]
	return list->head;
    bf62:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    bf64:	b1f8      	cbz	r0, bfa6 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    bf66:	4288      	cmp	r0, r1
    bf68:	d119      	bne.n	bf9e <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    bf6a:	689c      	ldr	r4, [r3, #8]
	return node->next;
    bf6c:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    bf6e:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    bf70:	42a1      	cmp	r1, r4
    bf72:	d100      	bne.n	bf76 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    bf74:	6098      	str	r0, [r3, #8]
	parent->next = child;
    bf76:	2000      	movs	r0, #0
    bf78:	6008      	str	r0, [r1, #0]
	if (set) {
    bf7a:	b12a      	cbz	r2, bf88 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    bf7c:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    bf7e:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    bf80:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    bf82:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    bf84:	b902      	cbnz	r2, bf88 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    bf86:	6099      	str	r1, [r3, #8]
	return 0;
    bf88:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    bf8a:	e010      	b.n	bfae <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    bf8c:	4281      	cmp	r1, r0
    bf8e:	d106      	bne.n	bf9e <gpio_nrfx_manage_callback+0x40>
	return node->next;
    bf90:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    bf92:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    bf94:	6898      	ldr	r0, [r3, #8]
    bf96:	4281      	cmp	r1, r0
    bf98:	d1ed      	bne.n	bf76 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    bf9a:	609c      	str	r4, [r3, #8]
}
    bf9c:	e7eb      	b.n	bf76 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    bf9e:	4604      	mov	r4, r0
    bfa0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    bfa2:	2800      	cmp	r0, #0
    bfa4:	d1f2      	bne.n	bf8c <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    bfa6:	2a00      	cmp	r2, #0
    bfa8:	d1e8      	bne.n	bf7c <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    bfaa:	f06f 0015 	mvn.w	r0, #21
}
    bfae:	bd10      	pop	{r4, pc}

0000bfb0 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    bfb0:	b513      	push	{r0, r1, r4, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    bfb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);

	if (length > sizeof(dev_id.id)) {
    bfb6:	2908      	cmp	r1, #8
    bfb8:	6e13      	ldr	r3, [r2, #96]	; 0x60
    bfba:	6e52      	ldr	r2, [r2, #100]	; 0x64
    bfbc:	bf28      	it	cs
    bfbe:	2108      	movcs	r1, #8
    bfc0:	ba12      	rev	r2, r2
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    bfc2:	9200      	str	r2, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    bfc4:	ba1b      	rev	r3, r3
	if (length > sizeof(dev_id.id)) {
    bfc6:	460c      	mov	r4, r1
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    bfc8:	460a      	mov	r2, r1
    bfca:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    bfcc:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    bfce:	f7ff fe7a 	bl	bcc6 <memcpy>

	return length;
}
    bfd2:	4620      	mov	r0, r4
    bfd4:	b002      	add	sp, #8
    bfd6:	bd10      	pop	{r4, pc}

0000bfd8 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    bfd8:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    bfda:	6843      	ldr	r3, [r0, #4]
    bfdc:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    bfde:	7a05      	ldrb	r5, [r0, #8]
    bfe0:	6844      	ldr	r4, [r0, #4]
    bfe2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    bfe6:	42a3      	cmp	r3, r4
    bfe8:	d302      	bcc.n	bff0 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    bfea:	f06f 0001 	mvn.w	r0, #1
}
    bfee:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    bff0:	795c      	ldrb	r4, [r3, #5]
    bff2:	428c      	cmp	r4, r1
    bff4:	d001      	beq.n	bffa <pinctrl_lookup_state+0x22>
		(*state)++;
    bff6:	3308      	adds	r3, #8
    bff8:	e7f0      	b.n	bfdc <pinctrl_lookup_state+0x4>
			return 0;
    bffa:	2000      	movs	r0, #0
    bffc:	e7f7      	b.n	bfee <pinctrl_lookup_state+0x16>

0000bffe <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    bffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c002:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    c006:	2701      	movs	r7, #1
    p_reg->OUTCLR = clr_mask;
    c008:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    c00c:	4281      	cmp	r1, r0
    c00e:	d101      	bne.n	c014 <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    c010:	2000      	movs	r0, #0
    c012:	e015      	b.n	c040 <pinctrl_configure_pins+0x42>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    c014:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    c016:	f004 037f 	and.w	r3, r4, #127	; 0x7f
			pin = 0xFFFFFFFFU;
    c01a:	2b7f      	cmp	r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    c01c:	f3c4 2543 	ubfx	r5, r4, #9, #4
		switch (NRF_GET_FUN(pins[i])) {
    c020:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    c024:	bf08      	it	eq
    c026:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    c02a:	2c1a      	cmp	r4, #26
    c02c:	d045      	beq.n	c0ba <pinctrl_configure_pins+0xbc>
    c02e:	d809      	bhi.n	c044 <pinctrl_configure_pins+0x46>
    c030:	2c05      	cmp	r4, #5
    c032:	d01b      	beq.n	c06c <pinctrl_configure_pins+0x6e>
    c034:	2c06      	cmp	r4, #6
    c036:	d01e      	beq.n	c076 <pinctrl_configure_pins+0x78>
    c038:	2c04      	cmp	r4, #4
    c03a:	d00a      	beq.n	c052 <pinctrl_configure_pins+0x54>
    c03c:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    c040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (NRF_GET_FUN(pins[i])) {
    c044:	2c1b      	cmp	r4, #27
    c046:	d03b      	beq.n	c0c0 <pinctrl_configure_pins+0xc2>
    c048:	2c1c      	cmp	r4, #28
    c04a:	d1f7      	bne.n	c03c <pinctrl_configure_pins+0x3e>
			NRF_PSEL_QDEC(reg, LED) = pin;
    c04c:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
			if (write != NO_WRITE) {
    c050:	e013      	b.n	c07a <pinctrl_configure_pins+0x7c>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    c052:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    c056:	f04f 0c00 	mov.w	ip, #0
    *p_pin = pin_number & 0x1F;
    c05a:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    c05e:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTCLR = clr_mask;
    c062:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
}
    c066:	f04f 0e01 	mov.w	lr, #1
    c06a:	e009      	b.n	c080 <pinctrl_configure_pins+0x82>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    c06c:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    c070:	f04f 0c01 	mov.w	ip, #1
    c074:	e7f1      	b.n	c05a <pinctrl_configure_pins+0x5c>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    c076:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    c07a:	f04f 0c00 	mov.w	ip, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    c07e:	46e6      	mov	lr, ip
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    c080:	f850 4b04 	ldr.w	r4, [r0], #4
    c084:	f404 5800 	and.w	r8, r4, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    c088:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    c08c:	f3c4 18c1 	ubfx	r8, r4, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    c090:	ea4f 2405 	mov.w	r4, r5, lsl #8
    c094:	bf18      	it	ne
    c096:	f04f 0e00 	movne.w	lr, #0
    *p_pin = pin_number & 0x1F;
    c09a:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    c09e:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
    c0a2:	bf18      	it	ne
    c0a4:	f04f 0c01 	movne.w	ip, #1
    c0a8:	ea44 040e 	orr.w	r4, r4, lr
    reg->PIN_CNF[pin_number] = cnf;
    c0ac:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    c0b0:	ea44 044c 	orr.w	r4, r4, ip, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    c0b4:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    c0b8:	e7a8      	b.n	c00c <pinctrl_configure_pins+0xe>
			NRF_PSEL_QDEC(reg, A) = pin;
    c0ba:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
			if (write != NO_WRITE) {
    c0be:	e7dc      	b.n	c07a <pinctrl_configure_pins+0x7c>
			NRF_PSEL_QDEC(reg, B) = pin;
    c0c0:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			if (write != NO_WRITE) {
    c0c4:	e7d9      	b.n	c07a <pinctrl_configure_pins+0x7c>

0000c0c6 <qdec_nrfx_sample_fetch>:
	if ((chan != SENSOR_CHAN_ALL) && (chan != SENSOR_CHAN_ROTATION)) {
    c0c6:	2939      	cmp	r1, #57	; 0x39
{
    c0c8:	b507      	push	{r0, r1, r2, lr}
	if ((chan != SENSOR_CHAN_ALL) && (chan != SENSOR_CHAN_ROTATION)) {
    c0ca:	d001      	beq.n	c0d0 <qdec_nrfx_sample_fetch+0xa>
    c0cc:	2922      	cmp	r1, #34	; 0x22
    c0ce:	d10c      	bne.n	c0ea <qdec_nrfx_sample_fetch+0x24>
	nrfx_qdec_accumulators_read(&acc, &accdbl);
    c0d0:	f10d 0106 	add.w	r1, sp, #6
    c0d4:	a801      	add	r0, sp, #4
    c0d6:	f7fc f985 	bl	83e4 <nrfx_qdec_accumulators_read>
	accumulate(data, acc);
    c0da:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
    c0de:	f7f9 ffb3 	bl	6048 <accumulate.constprop.0>
	return 0;
    c0e2:	2000      	movs	r0, #0
}
    c0e4:	b003      	add	sp, #12
    c0e6:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENOTSUP;
    c0ea:	f06f 0085 	mvn.w	r0, #133	; 0x85
    c0ee:	e7f9      	b.n	c0e4 <qdec_nrfx_sample_fetch+0x1e>

0000c0f0 <irq_connect0>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(SPIM(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_SPI_0_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(0);
    c0f0:	2200      	movs	r2, #0
    c0f2:	2101      	movs	r1, #1
    c0f4:	2003      	movs	r0, #3
    c0f6:	f7f7 bd85 	b.w	3c04 <z_arm_irq_priority_set>

0000c0fa <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    c0fa:	b510      	push	{r4, lr}
	while (*count) {
    c0fc:	680b      	ldr	r3, [r1, #0]
    c0fe:	b913      	cbnz	r3, c106 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
    c100:	6013      	str	r3, [r2, #0]
	return NULL;
    c102:	4618      	mov	r0, r3
    c104:	e005      	b.n	c112 <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
    c106:	6803      	ldr	r3, [r0, #0]
    c108:	685c      	ldr	r4, [r3, #4]
    c10a:	b11c      	cbz	r4, c114 <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
    c10c:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
    c10e:	6803      	ldr	r3, [r0, #0]
    c110:	6818      	ldr	r0, [r3, #0]
}
    c112:	bd10      	pop	{r4, pc}
		++(*current);
    c114:	3308      	adds	r3, #8
    c116:	6003      	str	r3, [r0, #0]
		--(*count);
    c118:	680b      	ldr	r3, [r1, #0]
    c11a:	3b01      	subs	r3, #1
    c11c:	600b      	str	r3, [r1, #0]
    c11e:	e7ed      	b.n	c0fc <spi_context_get_next_buf.constprop.0+0x2>

0000c120 <z_log_msg_static_create.constprop.0>:
    c120:	2300      	movs	r3, #0
    c122:	f7f6 b909 	b.w	2338 <z_impl_z_log_msg_static_create>

0000c126 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    c126:	4603      	mov	r3, r0
    c128:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    c12a:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    c12c:	7919      	ldrb	r1, [r3, #4]
    c12e:	2301      	movs	r3, #1
    c130:	fa03 f101 	lsl.w	r1, r3, r1
    c134:	6903      	ldr	r3, [r0, #16]
    c136:	681b      	ldr	r3, [r3, #0]
    c138:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    c13a:	bf18      	it	ne
    c13c:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    c140:	b112      	cbz	r2, c148 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    c142:	6883      	ldr	r3, [r0, #8]
    c144:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    c146:	4718      	bx	r3
    c148:	6883      	ldr	r3, [r0, #8]
    c14a:	691b      	ldr	r3, [r3, #16]
    c14c:	e7fb      	b.n	c146 <gpio_pin_set_dt.isra.0+0x20>

0000c14e <_spi_context_cs_control>:
{
    c14e:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    c150:	6803      	ldr	r3, [r0, #0]
{
    c152:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    c154:	b1e3      	cbz	r3, c190 <_spi_context_cs_control+0x42>
    c156:	6898      	ldr	r0, [r3, #8]
    c158:	b1d0      	cbz	r0, c190 <_spi_context_cs_control+0x42>
    c15a:	6805      	ldr	r5, [r0, #0]
    c15c:	b1c5      	cbz	r5, c190 <_spi_context_cs_control+0x42>
		if (on) {
    c15e:	b149      	cbz	r1, c174 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    c160:	2101      	movs	r1, #1
    c162:	f7ff ffe0 	bl	c126 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    c166:	6823      	ldr	r3, [r4, #0]
    c168:	689b      	ldr	r3, [r3, #8]
    c16a:	6898      	ldr	r0, [r3, #8]
}
    c16c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    c170:	f000 bd60 	b.w	cc34 <z_impl_k_busy_wait>
			if (!force_off &&
    c174:	b912      	cbnz	r2, c17c <_spi_context_cs_control+0x2e>
    c176:	889b      	ldrh	r3, [r3, #4]
    c178:	04db      	lsls	r3, r3, #19
    c17a:	d409      	bmi.n	c190 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
    c17c:	6880      	ldr	r0, [r0, #8]
    c17e:	f000 fd59 	bl	cc34 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    c182:	6823      	ldr	r3, [r4, #0]
    c184:	2100      	movs	r1, #0
    c186:	6898      	ldr	r0, [r3, #8]
}
    c188:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    c18c:	f7ff bfcb 	b.w	c126 <gpio_pin_set_dt.isra.0>
}
    c190:	bd38      	pop	{r3, r4, r5, pc}

0000c192 <spi_context_unlock_unconditionally>:
{
    c192:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    c194:	2201      	movs	r2, #1
    c196:	2100      	movs	r1, #0
{
    c198:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    c19a:	f7ff ffd8 	bl	c14e <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    c19e:	69a3      	ldr	r3, [r4, #24]
    c1a0:	b933      	cbnz	r3, c1b0 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    c1a2:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    c1a4:	f104 0010 	add.w	r0, r4, #16
}
    c1a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    c1ac:	f7fd be64 	b.w	9e78 <z_impl_k_sem_give>
    c1b0:	bd10      	pop	{r4, pc}

0000c1b2 <spi_nrfx_release>:
{
    c1b2:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    c1b4:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    c1b6:	6803      	ldr	r3, [r0, #0]
    c1b8:	428b      	cmp	r3, r1
    c1ba:	d106      	bne.n	c1ca <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    c1bc:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
    c1c0:	b934      	cbnz	r4, c1d0 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    c1c2:	f7ff ffe6 	bl	c192 <spi_context_unlock_unconditionally>
	return 0;
    c1c6:	4620      	mov	r0, r4
}
    c1c8:	bd10      	pop	{r4, pc}
		return -EINVAL;
    c1ca:	f06f 0015 	mvn.w	r0, #21
    c1ce:	e7fb      	b.n	c1c8 <spi_nrfx_release+0x16>
		return -EBUSY;
    c1d0:	f06f 000f 	mvn.w	r0, #15
    c1d4:	e7f8      	b.n	c1c8 <spi_nrfx_release+0x16>

0000c1d6 <finish_transaction.isra.0>:
static void finish_transaction(const struct device *dev, int error)
    c1d6:	b538      	push	{r3, r4, r5, lr}
	_spi_context_cs_control(ctx, on, false);
    c1d8:	2200      	movs	r2, #0
    c1da:	4604      	mov	r4, r0
    c1dc:	460d      	mov	r5, r1
    c1de:	4611      	mov	r1, r2
    c1e0:	f7ff ffb5 	bl	c14e <_spi_context_cs_control>
	ctx->sync_status = status;
    c1e4:	6325      	str	r5, [r4, #48]	; 0x30
    c1e6:	f104 0020 	add.w	r0, r4, #32
    c1ea:	f7fd fe45 	bl	9e78 <z_impl_k_sem_give>
	dev_data->busy = false;
    c1ee:	2300      	movs	r3, #0
    c1f0:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
    c1f4:	bd38      	pop	{r3, r4, r5, pc}

0000c1f6 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    c1f6:	4770      	bx	lr

0000c1f8 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    c1f8:	f100 0350 	add.w	r3, r0, #80	; 0x50
    c1fc:	009b      	lsls	r3, r3, #2
    c1fe:	b29b      	uxth	r3, r3
    c200:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    c204:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    c208:	2200      	movs	r2, #0
    c20a:	601a      	str	r2, [r3, #0]
    c20c:	681b      	ldr	r3, [r3, #0]
}
    c20e:	4770      	bx	lr

0000c210 <sys_clock_cycle_get_32>:
{
    c210:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    c212:	f7fa fbb7 	bl	6984 <z_nrf_rtc_timer_read>
}
    c216:	bd08      	pop	{r3, pc}

0000c218 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
    c218:	b508      	push	{r3, lr}

	mpsl_fem_init();
    c21a:	f7f4 f97d 	bl	518 <mpsl_fem_init>

	return 0;
}
    c21e:	2000      	movs	r0, #0
    c220:	bd08      	pop	{r3, pc}

0000c222 <gpio_pin_interrupt_configure_dt>:
{
    c222:	b430      	push	{r4, r5}
    c224:	4603      	mov	r3, r0
    c226:	460a      	mov	r2, r1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    c228:	6800      	ldr	r0, [r0, #0]
    c22a:	7919      	ldrb	r1, [r3, #4]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    c22c:	0213      	lsls	r3, r2, #8
	const struct gpio_driver_api *api =
    c22e:	6884      	ldr	r4, [r0, #8]
	const struct gpio_driver_data *const data =
    c230:	6905      	ldr	r5, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    c232:	d506      	bpl.n	c242 <gpio_pin_interrupt_configure_dt+0x20>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    c234:	682d      	ldr	r5, [r5, #0]
    c236:	2301      	movs	r3, #1
    c238:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    c23a:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    c23c:	bf18      	it	ne
    c23e:	f082 62c0 	eorne.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    c242:	69a4      	ldr	r4, [r4, #24]
    c244:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
    c248:	46a4      	mov	ip, r4
    c24a:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
}
    c24e:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    c250:	4760      	bx	ip

0000c252 <gpio_pin_configure_dt>:
{
    c252:	b4f0      	push	{r4, r5, r6, r7}
    c254:	4603      	mov	r3, r0
    c256:	460a      	mov	r2, r1
				  spec->pin,
    c258:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    c25a:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
    c25c:	6800      	ldr	r0, [r0, #0]
    c25e:	4313      	orrs	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    c260:	02dc      	lsls	r4, r3, #11
	const struct gpio_driver_api *api =
    c262:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
    c264:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    c266:	d506      	bpl.n	c276 <gpio_pin_configure_dt+0x24>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    c268:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
    c26c:	d003      	beq.n	c276 <gpio_pin_configure_dt+0x24>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    c26e:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    c270:	bf48      	it	mi
    c272:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    c276:	6834      	ldr	r4, [r6, #0]
    c278:	2501      	movs	r5, #1
    c27a:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    c27c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    c280:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    c282:	bf4c      	ite	mi
    c284:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    c286:	43ac      	bicpl	r4, r5
    c288:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
    c28a:	683b      	ldr	r3, [r7, #0]
}
    c28c:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
    c28e:	4718      	bx	r3

0000c290 <spi_write_dt>:
 *
 * @return a value from spi_write().
 */
static inline int spi_write_dt(const struct spi_dt_spec *spec,
			       const struct spi_buf_set *tx_bufs)
{
    c290:	b410      	push	{r4}
    c292:	460a      	mov	r2, r1
	return spi_write(spec->bus, &spec->config, tx_bufs);
    c294:	4601      	mov	r1, r0
    c296:	f851 0b04 	ldr.w	r0, [r1], #4
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    c29a:	6883      	ldr	r3, [r0, #8]
    c29c:	681c      	ldr	r4, [r3, #0]
    c29e:	2300      	movs	r3, #0
    c2a0:	46a4      	mov	ip, r4
}
    c2a2:	bc10      	pop	{r4}
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    c2a4:	4760      	bx	ip

0000c2a6 <pmw3360_channel_get>:
	struct pmw3360_data *data = dev->data;
    c2a6:	6903      	ldr	r3, [r0, #16]
	if (unlikely(!data->ready)) {
    c2a8:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
    c2ac:	b178      	cbz	r0, c2ce <pmw3360_channel_get+0x28>
	switch (chan) {
    c2ae:	2923      	cmp	r1, #35	; 0x23
    c2b0:	d004      	beq.n	c2bc <pmw3360_channel_get+0x16>
    c2b2:	2924      	cmp	r1, #36	; 0x24
    c2b4:	d008      	beq.n	c2c8 <pmw3360_channel_get+0x22>
    c2b6:	f06f 0085 	mvn.w	r0, #133	; 0x85
    c2ba:	4770      	bx	lr
		val->val1 = data->x;
    c2bc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
    c2c0:	6013      	str	r3, [r2, #0]
		val->val2 = 0;
    c2c2:	2000      	movs	r0, #0
    c2c4:	6050      	str	r0, [r2, #4]
    c2c6:	4770      	bx	lr
		val->val1 = data->y;
    c2c8:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
		break;
    c2cc:	e7f8      	b.n	c2c0 <pmw3360_channel_get+0x1a>
		return -EBUSY;
    c2ce:	f06f 000f 	mvn.w	r0, #15
}
    c2d2:	4770      	bx	lr

0000c2d4 <pmw3360_trigger_set>:
{
    c2d4:	b570      	push	{r4, r5, r6, lr}
	if (unlikely(trig->type != SENSOR_TRIG_DATA_READY)) {
    c2d6:	880b      	ldrh	r3, [r1, #0]
    c2d8:	2b01      	cmp	r3, #1
{
    c2da:	4614      	mov	r4, r2
	if (unlikely(trig->type != SENSOR_TRIG_DATA_READY)) {
    c2dc:	d11e      	bne.n	c31c <pmw3360_trigger_set+0x48>
	if (unlikely(trig->chan != SENSOR_CHAN_ALL)) {
    c2de:	884b      	ldrh	r3, [r1, #2]
    c2e0:	2b39      	cmp	r3, #57	; 0x39
    c2e2:	d11b      	bne.n	c31c <pmw3360_trigger_set+0x48>
	struct pmw3360_data *data = dev->data;
    c2e4:	6905      	ldr	r5, [r0, #16]
	if (unlikely(!data->ready)) {
    c2e6:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    c2ea:	b1d3      	cbz	r3, c322 <pmw3360_trigger_set+0x4e>
	const struct pmw3360_config *config = dev->config;
    c2ec:	6840      	ldr	r0, [r0, #4]
	__asm__ volatile(
    c2ee:	f04f 0340 	mov.w	r3, #64	; 0x40
    c2f2:	f3ef 8611 	mrs	r6, BASEPRI
    c2f6:	f383 8812 	msr	BASEPRI_MAX, r3
    c2fa:	f3bf 8f6f 	isb	sy
	if (handler) {
    c2fe:	b152      	cbz	r2, c316 <pmw3360_trigger_set+0x42>
		err = gpio_pin_interrupt_configure_dt(&config->irq_gpio,
    c300:	f04f 6198 	mov.w	r1, #79691776	; 0x4c00000
		err = gpio_pin_interrupt_configure_dt(&config->irq_gpio,
    c304:	f7ff ff8d 	bl	c222 <gpio_pin_interrupt_configure_dt>
	if (!err) {
    c308:	b900      	cbnz	r0, c30c <pmw3360_trigger_set+0x38>
		data->data_ready_handler = handler;
    c30a:	616c      	str	r4, [r5, #20]
	__asm__ volatile(
    c30c:	f386 8811 	msr	BASEPRI, r6
    c310:	f3bf 8f6f 	isb	sy
}
    c314:	bd70      	pop	{r4, r5, r6, pc}
		err = gpio_pin_interrupt_configure_dt(&config->irq_gpio,
    c316:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    c31a:	e7f3      	b.n	c304 <pmw3360_trigger_set+0x30>
		return -ENOTSUP;
    c31c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    c320:	e7f8      	b.n	c314 <pmw3360_trigger_set+0x40>
		return -EBUSY;
    c322:	f06f 000f 	mvn.w	r0, #15
    c326:	e7f5      	b.n	c314 <pmw3360_trigger_set+0x40>

0000c328 <k_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    c328:	f000 bc84 	b.w	cc34 <z_impl_k_busy_wait>

0000c32c <z_log_msg_static_create.constprop.0>:
    c32c:	2300      	movs	r3, #0
    c32e:	f7f6 b803 	b.w	2338 <z_impl_z_log_msg_static_create>

0000c332 <pmw3360_async_init_power_up>:
	return reg_write(dev, PMW3360_REG_POWER_UP_RESET, 0x5A);
    c332:	225a      	movs	r2, #90	; 0x5a
    c334:	213a      	movs	r1, #58	; 0x3a
    c336:	f7fa be27 	b.w	6f88 <reg_write>

0000c33a <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    c33a:	4700      	bx	r0

0000c33c <nrfx_busy_wait>:
    c33c:	f000 bc7a 	b.w	cc34 <z_impl_k_busy_wait>

0000c340 <clock_stop>:
{
    c340:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    c342:	4604      	mov	r4, r0
    c344:	b118      	cbz	r0, c34e <clock_stop+0xe>
    c346:	2801      	cmp	r0, #1
    c348:	d020      	beq.n	c38c <clock_stop+0x4c>
}
    c34a:	b003      	add	sp, #12
    c34c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    c34e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c352:	2202      	movs	r2, #2
    c354:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c358:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    c35c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c360:	2201      	movs	r2, #1
    c362:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    c364:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    c366:	2301      	movs	r3, #1
    c368:	f88d 3007 	strb.w	r3, [sp, #7]
    c36c:	f242 7510 	movw	r5, #10000	; 0x2710
    c370:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    c374:	b1bc      	cbz	r4, c3a6 <clock_stop+0x66>
    c376:	2c01      	cmp	r4, #1
    c378:	d1e7      	bne.n	c34a <clock_stop+0xa>
            if (p_clk_src != NULL)
    c37a:	b38f      	cbz	r7, c3e0 <clock_stop+0xa0>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    c37c:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    c380:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    c384:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    c386:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    c38a:	e014      	b.n	c3b6 <clock_stop+0x76>
    p_reg->INTENCLR = mask;
    c38c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c390:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    c392:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c396:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    c39a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c39e:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    c3a0:	f10d 0707 	add.w	r7, sp, #7
    c3a4:	e7df      	b.n	c366 <clock_stop+0x26>
            if (p_clk_src != NULL)
    c3a6:	b18f      	cbz	r7, c3cc <clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    c3a8:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    c3ac:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    c3b0:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    c3b2:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    c3b6:	03da      	lsls	r2, r3, #15
    c3b8:	d5c7      	bpl.n	c34a <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    c3ba:	f89d 0007 	ldrb.w	r0, [sp, #7]
    c3be:	2801      	cmp	r0, #1
    c3c0:	d1c3      	bne.n	c34a <clock_stop+0xa>
    c3c2:	f7ff ffbb 	bl	c33c <nrfx_busy_wait>
    c3c6:	3d01      	subs	r5, #1
    c3c8:	d1d4      	bne.n	c374 <clock_stop+0x34>
    c3ca:	e7be      	b.n	c34a <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    c3cc:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    c3d0:	03d9      	lsls	r1, r3, #15
    c3d2:	d5ba      	bpl.n	c34a <clock_stop+0xa>
    c3d4:	2001      	movs	r0, #1
    c3d6:	f7ff ffb1 	bl	c33c <nrfx_busy_wait>
    c3da:	3d01      	subs	r5, #1
    c3dc:	d1f6      	bne.n	c3cc <clock_stop+0x8c>
    c3de:	e7b4      	b.n	c34a <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    c3e0:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    c3e4:	03db      	lsls	r3, r3, #15
    c3e6:	d5b0      	bpl.n	c34a <clock_stop+0xa>
    c3e8:	2001      	movs	r0, #1
    c3ea:	f7ff ffa7 	bl	c33c <nrfx_busy_wait>
    c3ee:	3d01      	subs	r5, #1
    c3f0:	d1f6      	bne.n	c3e0 <clock_stop+0xa0>
    c3f2:	e7aa      	b.n	c34a <clock_stop+0xa>

0000c3f4 <nrfx_clock_start>:
{
    c3f4:	b508      	push	{r3, lr}
    switch (domain)
    c3f6:	b110      	cbz	r0, c3fe <nrfx_clock_start+0xa>
    c3f8:	2801      	cmp	r0, #1
    c3fa:	d028      	beq.n	c44e <nrfx_clock_start+0x5a>
}
    c3fc:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    c3fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c402:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    c406:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    c40a:	03c9      	lsls	r1, r1, #15
    c40c:	d40b      	bmi.n	c426 <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    c40e:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    c412:	07d0      	lsls	r0, r2, #31
    c414:	d50c      	bpl.n	c430 <nrfx_clock_start+0x3c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    c416:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
    if (!is_correct_clk)
    c41a:	0792      	lsls	r2, r2, #30
    c41c:	d105      	bne.n	c42a <nrfx_clock_start+0x36>
    p_reg->INTENSET = mask;
    c41e:	2202      	movs	r2, #2
    c420:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    c424:	e7ea      	b.n	c3fc <nrfx_clock_start+0x8>
    if (!is_correct_clk)
    c426:	0791      	lsls	r1, r2, #30
    c428:	d002      	beq.n	c430 <nrfx_clock_start+0x3c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    c42a:	2000      	movs	r0, #0
    c42c:	f7ff ff88 	bl	c340 <clock_stop>
    p_reg->LFCLKSRC = (uint32_t)(source);
    c430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c434:	2200      	movs	r2, #0
    c436:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c43a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    c43e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    c442:	2202      	movs	r2, #2
    c444:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c448:	2201      	movs	r2, #1
    c44a:	609a      	str	r2, [r3, #8]
}
    c44c:	e7d6      	b.n	c3fc <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c44e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c452:	2200      	movs	r2, #0
    c454:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    c458:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    c45c:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    c460:	6018      	str	r0, [r3, #0]
}
    c462:	e7cb      	b.n	c3fc <nrfx_clock_start+0x8>

0000c464 <nrfx_clock_stop>:
    clock_stop(domain);
    c464:	f7ff bf6c 	b.w	c340 <clock_stop>

0000c468 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    c468:	f000 001f 	and.w	r0, r0, #31
    c46c:	0080      	lsls	r0, r0, #2
    c46e:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    c472:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    c476:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    c47a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    c47e:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    c482:	4770      	bx	lr

0000c484 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c484:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    c488:	681a      	ldr	r2, [r3, #0]
    c48a:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    c48c:	bf1f      	itttt	ne
    c48e:	2200      	movne	r2, #0
    c490:	601a      	strne	r2, [r3, #0]
    c492:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    c494:	2001      	movne	r0, #1
    c496:	bf08      	it	eq
    c498:	2000      	moveq	r0, #0
}
    c49a:	4770      	bx	lr

0000c49c <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    c49c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c4a0:	f44f 7260 	mov.w	r2, #896	; 0x380
    c4a4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    c4a8:	4770      	bx	lr

0000c4aa <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    c4aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    c4ae:	f44f 7260 	mov.w	r2, #896	; 0x380
    c4b2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    c4b6:	4770      	bx	lr

0000c4b8 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    c4b8:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    c4ba:	f7fb fe6d 	bl	8198 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    c4be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    c4c2:	f7fb bacb 	b.w	7a5c <nrfx_clock_irq_handler>

0000c4c6 <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    c4c6:	1c43      	adds	r3, r0, #1
    c4c8:	d008      	beq.n	c4dc <spim_pin_uninit+0x16>
    *p_pin = pin_number & 0x1F;
    c4ca:	f000 001f 	and.w	r0, r0, #31
    reg->PIN_CNF[pin_number] = cnf;
    c4ce:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    c4d2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    c4d6:	2202      	movs	r2, #2
    c4d8:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    c4dc:	4770      	bx	lr

0000c4de <nrf_gpio_pin_write>:
    *p_pin = pin_number & 0x1F;
    c4de:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    c4e2:	2301      	movs	r3, #1
    c4e4:	4083      	lsls	r3, r0
    c4e6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    if (value == 0)
    c4ea:	b911      	cbnz	r1, c4f2 <nrf_gpio_pin_write+0x14>
    p_reg->OUTCLR = clr_mask;
    c4ec:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    c4f0:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
    c4f2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    c4f6:	4770      	bx	lr

0000c4f8 <set_ss_pin_state>:
{
    c4f8:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    c4fa:	7fc0      	ldrb	r0, [r0, #31]
    c4fc:	28ff      	cmp	r0, #255	; 0xff
    c4fe:	d006      	beq.n	c50e <set_ss_pin_state+0x16>
                           p_cb->ss_active_high ? active : !active);
    c500:	7f9b      	ldrb	r3, [r3, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
    c502:	079b      	lsls	r3, r3, #30
    c504:	bf58      	it	pl
    c506:	f081 0101 	eorpl.w	r1, r1, #1
    c50a:	f7ff bfe8 	b.w	c4de <nrf_gpio_pin_write>
}
    c50e:	4770      	bx	lr

0000c510 <nrfx_usbd_consumer>:
{
    c510:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    c512:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    c514:	429c      	cmp	r4, r3
    c516:	d209      	bcs.n	c52c <nrfx_usbd_consumer+0x1c>
        p_next->size = 0;
    c518:	2500      	movs	r5, #0
    c51a:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    c51c:	6809      	ldr	r1, [r1, #0]
    c51e:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
    c520:	429a      	cmp	r2, r3
    c522:	d10c      	bne.n	c53e <nrfx_usbd_consumer+0x2e>
    c524:	1e20      	subs	r0, r4, #0
    c526:	bf18      	it	ne
    c528:	2001      	movne	r0, #1
}
    c52a:	bd30      	pop	{r4, r5, pc}
        p_next->size = data_size;
    c52c:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    c52e:	680d      	ldr	r5, [r1, #0]
    c530:	6005      	str	r5, [r0, #0]
        p_transfer->p_data.addr += data_size;
    c532:	6808      	ldr	r0, [r1, #0]
        size -= data_size;
    c534:	1ae4      	subs	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    c536:	4418      	add	r0, r3
        p_transfer->size = size;
    c538:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    c53a:	6008      	str	r0, [r1, #0]
    c53c:	e7f0      	b.n	c520 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
    c53e:	2000      	movs	r0, #0
    c540:	e7f3      	b.n	c52a <nrfx_usbd_consumer+0x1a>

0000c542 <nrfx_usbd_feeder_ram>:
    if (tx_size > ep_size)
    c542:	684b      	ldr	r3, [r1, #4]
    c544:	429a      	cmp	r2, r3
    c546:	bf28      	it	cs
    c548:	461a      	movcs	r2, r3
    p_next->p_data = p_transfer->p_data;
    c54a:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    c54c:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    c550:	6848      	ldr	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    c552:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    c554:	1a80      	subs	r0, r0, r2
    c556:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    c558:	4413      	add	r3, r2
}
    c55a:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    c55c:	600b      	str	r3, [r1, #0]
}
    c55e:	bf18      	it	ne
    c560:	2001      	movne	r0, #1
    c562:	4770      	bx	lr

0000c564 <nrfx_usbd_feeder_ram_zlp>:
    if (tx_size > ep_size)
    c564:	684b      	ldr	r3, [r1, #4]
    c566:	429a      	cmp	r2, r3
    c568:	bf28      	it	cs
    c56a:	461a      	movcs	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    c56c:	b162      	cbz	r2, c588 <nrfx_usbd_feeder_ram_zlp+0x24>
    c56e:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    c570:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    c574:	684b      	ldr	r3, [r1, #4]
    c576:	1a9b      	subs	r3, r3, r2
    c578:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    c57a:	680b      	ldr	r3, [r1, #0]
}
    c57c:	1e10      	subs	r0, r2, #0
    p_transfer->p_data.addr += tx_size;
    c57e:	4413      	add	r3, r2
    c580:	600b      	str	r3, [r1, #0]
}
    c582:	bf18      	it	ne
    c584:	2001      	movne	r0, #1
    c586:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    c588:	4613      	mov	r3, r2
    c58a:	e7f1      	b.n	c570 <nrfx_usbd_feeder_ram_zlp+0xc>

0000c58c <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    c58c:	43c3      	mvns	r3, r0
    c58e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    c592:	f000 000f 	and.w	r0, r0, #15
}
    c596:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    c59a:	4770      	bx	lr

0000c59c <ev_started_handler>:
}
    c59c:	4770      	bx	lr

0000c59e <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    c59e:	2087      	movs	r0, #135	; 0x87
    c5a0:	f7fc b9ee 	b.w	8980 <nrf_usbd_epin_dma_handler>

0000c5a4 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    c5a4:	2086      	movs	r0, #134	; 0x86
    c5a6:	f7fc b9eb 	b.w	8980 <nrf_usbd_epin_dma_handler>

0000c5aa <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    c5aa:	2085      	movs	r0, #133	; 0x85
    c5ac:	f7fc b9e8 	b.w	8980 <nrf_usbd_epin_dma_handler>

0000c5b0 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    c5b0:	2084      	movs	r0, #132	; 0x84
    c5b2:	f7fc b9e5 	b.w	8980 <nrf_usbd_epin_dma_handler>

0000c5b6 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    c5b6:	2083      	movs	r0, #131	; 0x83
    c5b8:	f7fc b9e2 	b.w	8980 <nrf_usbd_epin_dma_handler>

0000c5bc <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    c5bc:	2082      	movs	r0, #130	; 0x82
    c5be:	f7fc b9df 	b.w	8980 <nrf_usbd_epin_dma_handler>

0000c5c2 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    c5c2:	2081      	movs	r0, #129	; 0x81
    c5c4:	f7fc b9dc 	b.w	8980 <nrf_usbd_epin_dma_handler>

0000c5c8 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    c5c8:	f7fc b9f6 	b.w	89b8 <nrf_usbd_ep0in_dma_handler>

0000c5cc <nrfx_usbd_ep_max_packet_size_set>:
{
    c5cc:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    c5ce:	f7fc f8cd 	bl	876c <ep_state_access>
    p_state->max_packet_size = size;
    c5d2:	8181      	strh	r1, [r0, #12]
}
    c5d4:	bd08      	pop	{r3, pc}

0000c5d6 <nrfx_usbd_ep_status_get>:
{
    c5d6:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    c5d8:	f7fc f8c8 	bl	876c <ep_state_access>
	__asm__ volatile(
    c5dc:	f04f 0240 	mov.w	r2, #64	; 0x40
    c5e0:	f3ef 8311 	mrs	r3, BASEPRI
    c5e4:	f382 8812 	msr	BASEPRI_MAX, r2
    c5e8:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    c5ec:	6882      	ldr	r2, [r0, #8]
    c5ee:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    c5f0:	6802      	ldr	r2, [r0, #0]
    c5f2:	b92a      	cbnz	r2, c600 <nrfx_usbd_ep_status_get+0x2a>
    c5f4:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    c5f6:	f383 8811 	msr	BASEPRI, r3
    c5fa:	f3bf 8f6f 	isb	sy
}
    c5fe:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    c600:	2004      	movs	r0, #4
    c602:	e7f8      	b.n	c5f6 <nrfx_usbd_ep_status_get+0x20>

0000c604 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    c604:	2007      	movs	r0, #7
    c606:	f7fc bd0f 	b.w	9028 <nrf_usbd_epout_dma_handler>

0000c60a <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    c60a:	2006      	movs	r0, #6
    c60c:	f7fc bd0c 	b.w	9028 <nrf_usbd_epout_dma_handler>

0000c610 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    c610:	2005      	movs	r0, #5
    c612:	f7fc bd09 	b.w	9028 <nrf_usbd_epout_dma_handler>

0000c616 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    c616:	2004      	movs	r0, #4
    c618:	f7fc bd06 	b.w	9028 <nrf_usbd_epout_dma_handler>

0000c61c <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    c61c:	2003      	movs	r0, #3
    c61e:	f7fc bd03 	b.w	9028 <nrf_usbd_epout_dma_handler>

0000c622 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    c622:	2002      	movs	r0, #2
    c624:	f7fc bd00 	b.w	9028 <nrf_usbd_epout_dma_handler>

0000c628 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    c628:	2001      	movs	r0, #1
    c62a:	f7fc bcfd 	b.w	9028 <nrf_usbd_epout_dma_handler>

0000c62e <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    c62e:	f7fc bdf7 	b.w	9220 <usbd_ep_abort>

0000c632 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    c632:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    c634:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    c636:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    c638:	bf9c      	itt	ls
    c63a:	6881      	ldrls	r1, [r0, #8]
    c63c:	185b      	addls	r3, r3, r1
    r = RdOff - WrOff - 1u;
    c63e:	3b01      	subs	r3, #1
    c640:	1a98      	subs	r0, r3, r2
}
    c642:	4770      	bx	lr

0000c644 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    c644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    c648:	e9d0 8402 	ldrd	r8, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    c64c:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    c64e:	eba8 0604 	sub.w	r6, r8, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    c652:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    c654:	4296      	cmp	r6, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    c656:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    c658:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    c65a:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    c65c:	d904      	bls.n	c668 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    c65e:	f7ff fb32 	bl	bcc6 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    c662:	60ec      	str	r4, [r5, #12]
}
    c664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    c668:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
    c66a:	eba4 0408 	sub.w	r4, r4, r8
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    c66e:	f7ff fb2a 	bl	bcc6 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    c672:	6868      	ldr	r0, [r5, #4]
    c674:	4622      	mov	r2, r4
    c676:	19b9      	adds	r1, r7, r6
    c678:	e7f1      	b.n	c65e <_WriteNoCheck+0x1a>

0000c67a <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    c67a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    c67e:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    c680:	4606      	mov	r6, r0
    c682:	4689      	mov	r9, r1
    c684:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    c686:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    c68a:	6933      	ldr	r3, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    c68c:	68b4      	ldr	r4, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    c68e:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    c690:	429d      	cmp	r5, r3
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    c692:	bf28      	it	cs
    c694:	191b      	addcs	r3, r3, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    c696:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    c698:	42bc      	cmp	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    c69a:	f103 33ff 	add.w	r3, r3, #4294967295
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    c69e:	bf28      	it	cs
    c6a0:	463c      	movcs	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    c6a2:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    c6a4:	429c      	cmp	r4, r3
    c6a6:	bf28      	it	cs
    c6a8:	461c      	movcs	r4, r3
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    c6aa:	4649      	mov	r1, r9
    c6ac:	4428      	add	r0, r5
    c6ae:	4622      	mov	r2, r4
    c6b0:	f7ff fb09 	bl	bcc6 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    c6b4:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    c6b6:	4425      	add	r5, r4
      WrOff = 0u;
    c6b8:	42ab      	cmp	r3, r5
    c6ba:	bf08      	it	eq
    c6bc:	2500      	moveq	r5, #0
  } while (NumBytes);
    c6be:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    c6c0:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    c6c2:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    c6c4:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    c6c6:	d1e0      	bne.n	c68a <_WriteBlocking+0x10>
}
    c6c8:	4640      	mov	r0, r8
    c6ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000c6ce <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    c6ce:	f7fc bf7d 	b.w	95cc <_DoInit>

0000c6d2 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
    c6d2:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
    c6d4:	f7ff fffb 	bl	c6ce <SEGGER_RTT_Init>

	return 0;
}
    c6d8:	2000      	movs	r0, #0
    c6da:	bd08      	pop	{r3, pc}

0000c6dc <z_device_state_init>:
}
    c6dc:	4770      	bx	lr

0000c6de <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    c6de:	b140      	cbz	r0, c6f2 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    c6e0:	68c3      	ldr	r3, [r0, #12]
    c6e2:	7858      	ldrb	r0, [r3, #1]
    c6e4:	f010 0001 	ands.w	r0, r0, #1
    c6e8:	bf1e      	ittt	ne
    c6ea:	7818      	ldrbne	r0, [r3, #0]
    c6ec:	fab0 f080 	clzne	r0, r0
    c6f0:	0940      	lsrne	r0, r0, #5
}
    c6f2:	4770      	bx	lr

0000c6f4 <z_early_memset>:
	(void) memset(dst, c, n);
    c6f4:	f7ff baf2 	b.w	bcdc <memset>

0000c6f8 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    c6f8:	f7ff bae5 	b.w	bcc6 <memcpy>

0000c6fc <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    c6fc:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    c700:	4313      	orrs	r3, r2
    c702:	f013 0303 	ands.w	r3, r3, #3
    c706:	d10c      	bne.n	c722 <create_free_list+0x26>
	slab->free_list = NULL;
    c708:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    c70a:	6881      	ldr	r1, [r0, #8]
    c70c:	4299      	cmp	r1, r3
    c70e:	d801      	bhi.n	c714 <create_free_list+0x18>
	return 0;
    c710:	2000      	movs	r0, #0
    c712:	4770      	bx	lr
		*(char **)p = slab->free_list;
    c714:	6941      	ldr	r1, [r0, #20]
    c716:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    c718:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    c71a:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    c71c:	3301      	adds	r3, #1
		p += slab->block_size;
    c71e:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    c720:	e7f3      	b.n	c70a <create_free_list+0xe>
		return -EINVAL;
    c722:	f06f 0015 	mvn.w	r0, #21
}
    c726:	4770      	bx	lr

0000c728 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    c728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c72a:	4604      	mov	r4, r0
    c72c:	460d      	mov	r5, r1
	__asm__ volatile(
    c72e:	f04f 0340 	mov.w	r3, #64	; 0x40
    c732:	f3ef 8611 	mrs	r6, BASEPRI
    c736:	f383 8812 	msr	BASEPRI_MAX, r3
    c73a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    c73e:	6947      	ldr	r7, [r0, #20]
    c740:	b977      	cbnz	r7, c760 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    c742:	f000 f9ce 	bl	cae2 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    c746:	b158      	cbz	r0, c760 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    c748:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    c74a:	6142      	str	r2, [r0, #20]
    c74c:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    c74e:	f000 f969 	bl	ca24 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    c752:	4631      	mov	r1, r6
    c754:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    c758:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    c75c:	f7fd bf16 	b.w	a58c <z_reschedule>
	**(char ***) mem = slab->free_list;
    c760:	682b      	ldr	r3, [r5, #0]
    c762:	6962      	ldr	r2, [r4, #20]
    c764:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    c766:	682b      	ldr	r3, [r5, #0]
    c768:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    c76a:	69a3      	ldr	r3, [r4, #24]
    c76c:	3b01      	subs	r3, #1
    c76e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    c770:	f386 8811 	msr	BASEPRI, r6
    c774:	f3bf 8f6f 	isb	sy
}
    c778:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c77a <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    c77a:	f3ef 8005 	mrs	r0, IPSR
}
    c77e:	3800      	subs	r0, #0
    c780:	bf18      	it	ne
    c782:	2001      	movne	r0, #1
    c784:	4770      	bx	lr

0000c786 <z_impl_k_thread_name_set>:
}
    c786:	f06f 0057 	mvn.w	r0, #87	; 0x57
    c78a:	4770      	bx	lr

0000c78c <k_thread_name_get>:
}
    c78c:	2000      	movs	r0, #0
    c78e:	4770      	bx	lr

0000c790 <z_impl_k_thread_start>:
	z_sched_start(thread);
    c790:	f7fd bf0e 	b.w	a5b0 <z_sched_start>

0000c794 <z_pm_save_idle_exit>:
{
    c794:	b508      	push	{r3, lr}
	pm_system_resume();
    c796:	f7f6 f935 	bl	2a04 <pm_system_resume>
}
    c79a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    c79e:	f7ff bd2a 	b.w	c1f6 <sys_clock_idle_exit>

0000c7a2 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    c7a2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    c7a6:	428b      	cmp	r3, r1
    c7a8:	d001      	beq.n	c7ae <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    c7aa:	f7fd bea9 	b.w	a500 <z_set_prio>
}
    c7ae:	2000      	movs	r0, #0
    c7b0:	4770      	bx	lr

0000c7b2 <z_impl_k_mutex_init>:
{
    c7b2:	4603      	mov	r3, r0
	mutex->owner = NULL;
    c7b4:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    c7b6:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
    c7ba:	e9c3 3300 	strd	r3, r3, [r3]
}
    c7be:	4770      	bx	lr

0000c7c0 <queue_insert>:
{
    c7c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c7c4:	4699      	mov	r9, r3
    c7c6:	4604      	mov	r4, r0
    c7c8:	f89d 3020 	ldrb.w	r3, [sp, #32]
    c7cc:	460d      	mov	r5, r1
    c7ce:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    c7d0:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    c7d4:	f04f 0240 	mov.w	r2, #64	; 0x40
    c7d8:	f3ef 8711 	mrs	r7, BASEPRI
    c7dc:	f382 8812 	msr	BASEPRI_MAX, r2
    c7e0:	f3bf 8f6f 	isb	sy
	if (is_append) {
    c7e4:	b103      	cbz	r3, c7e8 <queue_insert+0x28>
	return list->tail;
    c7e6:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    c7e8:	4630      	mov	r0, r6
    c7ea:	f000 f97a 	bl	cae2 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    c7ee:	b158      	cbz	r0, c808 <queue_insert+0x48>
    c7f0:	2300      	movs	r3, #0
    c7f2:	6783      	str	r3, [r0, #120]	; 0x78
    c7f4:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    c7f8:	f000 f914 	bl	ca24 <z_ready_thread>
	z_reschedule(&queue->lock, key);
    c7fc:	4630      	mov	r0, r6
    c7fe:	4639      	mov	r1, r7
    c800:	f7fd fec4 	bl	a58c <z_reschedule>
		return 0;
    c804:	2000      	movs	r0, #0
    c806:	e00c      	b.n	c822 <queue_insert+0x62>
	if (alloc) {
    c808:	f1b9 0f00 	cmp.w	r9, #0
    c80c:	d01c      	beq.n	c848 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    c80e:	2108      	movs	r1, #8
    c810:	f7fe fa80 	bl	ad14 <z_thread_aligned_alloc>
		if (anode == NULL) {
    c814:	b938      	cbnz	r0, c826 <queue_insert+0x66>
	__asm__ volatile(
    c816:	f387 8811 	msr	BASEPRI, r7
    c81a:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    c81e:	f06f 000b 	mvn.w	r0, #11
}
    c822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    c826:	2201      	movs	r2, #1
		anode->data = data;
    c828:	f8c0 8004 	str.w	r8, [r0, #4]
    c82c:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    c82e:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    c830:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
    c834:	b965      	cbnz	r5, c850 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    c836:	6822      	ldr	r2, [r4, #0]
    c838:	430a      	orrs	r2, r1
    c83a:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    c83c:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    c83e:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    c840:	2a00      	cmp	r2, #0
    c842:	d1db      	bne.n	c7fc <queue_insert+0x3c>
	list->tail = node;
    c844:	6060      	str	r0, [r4, #4]
}
    c846:	e7d9      	b.n	c7fc <queue_insert+0x3c>
	node->next_and_flags = flags;
    c848:	f8c8 9000 	str.w	r9, [r8]
}
    c84c:	4640      	mov	r0, r8
    c84e:	e7ee      	b.n	c82e <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    c850:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    c852:	2a03      	cmp	r2, #3
    c854:	d80b      	bhi.n	c86e <queue_insert+0xae>
	parent->next_and_flags = cur_flags | (unative_t)child;
    c856:	6001      	str	r1, [r0, #0]
	return list->tail;
    c858:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    c85a:	b911      	cbnz	r1, c862 <queue_insert+0xa2>
	list->head = node;
    c85c:	e9c4 0000 	strd	r0, r0, [r4]
}
    c860:	e7cc      	b.n	c7fc <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    c862:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    c864:	f002 0203 	and.w	r2, r2, #3
    c868:	4302      	orrs	r2, r0
    c86a:	600a      	str	r2, [r1, #0]
    c86c:	e7ea      	b.n	c844 <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    c86e:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    c872:	430a      	orrs	r2, r1
    c874:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    c876:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    c878:	f002 0203 	and.w	r2, r2, #3
    c87c:	ea40 0302 	orr.w	r3, r0, r2
    c880:	602b      	str	r3, [r5, #0]
}
    c882:	e7bb      	b.n	c7fc <queue_insert+0x3c>

0000c884 <z_queue_node_peek>:
{
    c884:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    c886:	4604      	mov	r4, r0
    c888:	b130      	cbz	r0, c898 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    c88a:	6802      	ldr	r2, [r0, #0]
    c88c:	0793      	lsls	r3, r2, #30
    c88e:	d003      	beq.n	c898 <z_queue_node_peek+0x14>
		ret = anode->data;
    c890:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    c892:	b109      	cbz	r1, c898 <z_queue_node_peek+0x14>
			k_free(anode);
    c894:	f000 fa1d 	bl	ccd2 <k_free>
}
    c898:	4620      	mov	r0, r4
    c89a:	bd10      	pop	{r4, pc}

0000c89c <z_impl_k_queue_init>:
	list->head = NULL;
    c89c:	2300      	movs	r3, #0
	list->tail = NULL;
    c89e:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
    c8a2:	f100 0308 	add.w	r3, r0, #8
    c8a6:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    c8aa:	4770      	bx	lr

0000c8ac <k_queue_append>:
{
    c8ac:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    c8ae:	2301      	movs	r3, #1
    c8b0:	9300      	str	r3, [sp, #0]
    c8b2:	2300      	movs	r3, #0
{
    c8b4:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    c8b6:	4619      	mov	r1, r3
    c8b8:	f7ff ff82 	bl	c7c0 <queue_insert>
}
    c8bc:	b003      	add	sp, #12
    c8be:	f85d fb04 	ldr.w	pc, [sp], #4

0000c8c2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    c8c2:	b13a      	cbz	r2, c8d4 <z_impl_k_sem_init+0x12>
    c8c4:	428a      	cmp	r2, r1
    c8c6:	d305      	bcc.n	c8d4 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    c8c8:	e9c0 1202 	strd	r1, r2, [r0, #8]
    c8cc:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    c8d0:	2000      	movs	r0, #0
    c8d2:	4770      	bx	lr
		return -EINVAL;
    c8d4:	f06f 0015 	mvn.w	r0, #21
}
    c8d8:	4770      	bx	lr

0000c8da <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    c8da:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    c8dc:	2301      	movs	r3, #1
    c8de:	408b      	lsls	r3, r1
    c8e0:	ea22 0303 	bic.w	r3, r2, r3
    c8e4:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    c8e6:	fa22 f001 	lsr.w	r0, r2, r1
}
    c8ea:	f000 0001 	and.w	r0, r0, #1
    c8ee:	4770      	bx	lr

0000c8f0 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    c8f0:	b120      	cbz	r0, c8fc <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    c8f2:	2200      	movs	r2, #0
    c8f4:	4611      	mov	r1, r2
    c8f6:	3088      	adds	r0, #136	; 0x88
    c8f8:	f000 b94d 	b.w	cb96 <z_sched_wake>
}
    c8fc:	4770      	bx	lr

0000c8fe <work_timeout>:
{
    c8fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c900:	4604      	mov	r4, r0
	__asm__ volatile(
    c902:	f04f 0340 	mov.w	r3, #64	; 0x40
    c906:	f3ef 8511 	mrs	r5, BASEPRI
    c90a:	f383 8812 	msr	BASEPRI_MAX, r3
    c90e:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    c912:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    c914:	f1a0 0610 	sub.w	r6, r0, #16
    c918:	2103      	movs	r1, #3
    c91a:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    c91c:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    c91e:	f7ff ffdc 	bl	c8da <flag_test_and_clear>
    c922:	b128      	cbz	r0, c930 <work_timeout+0x32>
		queue = dw->queue;
    c924:	69a3      	ldr	r3, [r4, #24]
    c926:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    c928:	a901      	add	r1, sp, #4
    c92a:	4630      	mov	r0, r6
    c92c:	f7fd fbc0 	bl	a0b0 <submit_to_queue_locked>
	__asm__ volatile(
    c930:	f385 8811 	msr	BASEPRI, r5
    c934:	f3bf 8f6f 	isb	sy
}
    c938:	b002      	add	sp, #8
    c93a:	bd70      	pop	{r4, r5, r6, pc}

0000c93c <k_work_init>:
{
    c93c:	b538      	push	{r3, r4, r5, lr}
    c93e:	4604      	mov	r4, r0
    c940:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    c942:	2210      	movs	r2, #16
    c944:	2100      	movs	r1, #0
    c946:	f7ff f9c9 	bl	bcdc <memset>
    c94a:	6065      	str	r5, [r4, #4]
}
    c94c:	bd38      	pop	{r3, r4, r5, pc}

0000c94e <z_work_submit_to_queue>:
{
    c94e:	b513      	push	{r0, r1, r4, lr}
    c950:	9001      	str	r0, [sp, #4]
    c952:	4608      	mov	r0, r1
	__asm__ volatile(
    c954:	f04f 0340 	mov.w	r3, #64	; 0x40
    c958:	f3ef 8411 	mrs	r4, BASEPRI
    c95c:	f383 8812 	msr	BASEPRI_MAX, r3
    c960:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    c964:	a901      	add	r1, sp, #4
    c966:	f7fd fba3 	bl	a0b0 <submit_to_queue_locked>
	__asm__ volatile(
    c96a:	f384 8811 	msr	BASEPRI, r4
    c96e:	f3bf 8f6f 	isb	sy
}
    c972:	b002      	add	sp, #8
    c974:	bd10      	pop	{r4, pc}

0000c976 <k_work_submit_to_queue>:
{
    c976:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
    c978:	f7ff ffe9 	bl	c94e <z_work_submit_to_queue>
	if (ret > 0) {
    c97c:	1e04      	subs	r4, r0, #0
    c97e:	dd09      	ble.n	c994 <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
    c980:	f04f 0340 	mov.w	r3, #64	; 0x40
    c984:	f3ef 8011 	mrs	r0, BASEPRI
    c988:	f383 8812 	msr	BASEPRI_MAX, r3
    c98c:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    c990:	f000 f8db 	bl	cb4a <z_reschedule_irqlock>
}
    c994:	4620      	mov	r0, r4
    c996:	bd10      	pop	{r4, pc}

0000c998 <k_work_init_delayable>:
{
    c998:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    c99a:	2230      	movs	r2, #48	; 0x30
{
    c99c:	4604      	mov	r4, r0
    c99e:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    c9a0:	2100      	movs	r1, #0
    c9a2:	f7ff f99b 	bl	bcdc <memset>
    c9a6:	f44f 7380 	mov.w	r3, #256	; 0x100
    c9aa:	6065      	str	r5, [r4, #4]
    c9ac:	60e3      	str	r3, [r4, #12]
}
    c9ae:	bd38      	pop	{r3, r4, r5, pc}

0000c9b0 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    c9b0:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    c9b4:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    c9b6:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    c9b8:	2300      	movs	r3, #0
	node->prev = NULL;
    c9ba:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    c9be:	4770      	bx	lr

0000c9c0 <unpend_thread_no_timeout>:
{
    c9c0:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    c9c2:	f7ff fff5 	bl	c9b0 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    c9c6:	7b43      	ldrb	r3, [r0, #13]
    c9c8:	f023 0302 	bic.w	r3, r3, #2
    c9cc:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    c9ce:	2300      	movs	r3, #0
    c9d0:	6083      	str	r3, [r0, #8]
}
    c9d2:	bd08      	pop	{r3, pc}

0000c9d4 <add_to_waitq_locked>:
{
    c9d4:	b538      	push	{r3, r4, r5, lr}
    c9d6:	4604      	mov	r4, r0
    c9d8:	460d      	mov	r5, r1
	unready_thread(thread);
    c9da:	f7fd fd13 	bl	a404 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    c9de:	7b63      	ldrb	r3, [r4, #13]
    c9e0:	f043 0302 	orr.w	r3, r3, #2
    c9e4:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    c9e6:	b1e5      	cbz	r5, ca22 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    c9e8:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    c9ea:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c9ec:	429d      	cmp	r5, r3
    c9ee:	d109      	bne.n	ca04 <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    c9f0:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    c9f2:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    c9f6:	601c      	str	r4, [r3, #0]
	list->tail = node;
    c9f8:	606c      	str	r4, [r5, #4]
}
    c9fa:	e012      	b.n	ca22 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    c9fc:	686a      	ldr	r2, [r5, #4]
    c9fe:	4293      	cmp	r3, r2
    ca00:	d0f6      	beq.n	c9f0 <add_to_waitq_locked+0x1c>
    ca02:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    ca04:	2b00      	cmp	r3, #0
    ca06:	d0f3      	beq.n	c9f0 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    ca08:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    ca0c:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    ca10:	428a      	cmp	r2, r1
    ca12:	d0f3      	beq.n	c9fc <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    ca14:	4291      	cmp	r1, r2
    ca16:	ddf1      	ble.n	c9fc <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    ca18:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    ca1a:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    ca1e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    ca20:	605c      	str	r4, [r3, #4]
}
    ca22:	bd38      	pop	{r3, r4, r5, pc}

0000ca24 <z_ready_thread>:
{
    ca24:	b510      	push	{r4, lr}
    ca26:	f04f 0340 	mov.w	r3, #64	; 0x40
    ca2a:	f3ef 8411 	mrs	r4, BASEPRI
    ca2e:	f383 8812 	msr	BASEPRI_MAX, r3
    ca32:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    ca36:	f7fd fcb1 	bl	a39c <ready_thread>
	__asm__ volatile(
    ca3a:	f384 8811 	msr	BASEPRI, r4
    ca3e:	f3bf 8f6f 	isb	sy
}
    ca42:	bd10      	pop	{r4, pc}

0000ca44 <z_unpend_thread_no_timeout>:
{
    ca44:	b508      	push	{r3, lr}
	__asm__ volatile(
    ca46:	f04f 0240 	mov.w	r2, #64	; 0x40
    ca4a:	f3ef 8111 	mrs	r1, BASEPRI
    ca4e:	f382 8812 	msr	BASEPRI_MAX, r2
    ca52:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    ca56:	6883      	ldr	r3, [r0, #8]
    ca58:	b10b      	cbz	r3, ca5e <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    ca5a:	f7ff ffb1 	bl	c9c0 <unpend_thread_no_timeout>
	__asm__ volatile(
    ca5e:	f381 8811 	msr	BASEPRI, r1
    ca62:	f3bf 8f6f 	isb	sy
}
    ca66:	bd08      	pop	{r3, pc}

0000ca68 <z_sched_wake_thread>:
{
    ca68:	b538      	push	{r3, r4, r5, lr}
    ca6a:	4604      	mov	r4, r0
	__asm__ volatile(
    ca6c:	f04f 0340 	mov.w	r3, #64	; 0x40
    ca70:	f3ef 8511 	mrs	r5, BASEPRI
    ca74:	f383 8812 	msr	BASEPRI_MAX, r3
    ca78:	f3bf 8f6f 	isb	sy
		if (!killed) {
    ca7c:	7b43      	ldrb	r3, [r0, #13]
    ca7e:	f013 0f28 	tst.w	r3, #40	; 0x28
    ca82:	d10b      	bne.n	ca9c <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    ca84:	6883      	ldr	r3, [r0, #8]
    ca86:	b10b      	cbz	r3, ca8c <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    ca88:	f7ff ff9a 	bl	c9c0 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    ca8c:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    ca8e:	b951      	cbnz	r1, caa6 <z_sched_wake_thread+0x3e>
    ca90:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    ca94:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    ca96:	4620      	mov	r0, r4
    ca98:	f7fd fc80 	bl	a39c <ready_thread>
	__asm__ volatile(
    ca9c:	f385 8811 	msr	BASEPRI, r5
    caa0:	f3bf 8f6f 	isb	sy
}
    caa4:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    caa6:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    caaa:	e7f3      	b.n	ca94 <z_sched_wake_thread+0x2c>

0000caac <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    caac:	2101      	movs	r1, #1
    caae:	3818      	subs	r0, #24
    cab0:	f7ff bfda 	b.w	ca68 <z_sched_wake_thread>

0000cab4 <z_unpend1_no_timeout>:
{
    cab4:	b508      	push	{r3, lr}
    cab6:	4603      	mov	r3, r0
	__asm__ volatile(
    cab8:	f04f 0240 	mov.w	r2, #64	; 0x40
    cabc:	f3ef 8111 	mrs	r1, BASEPRI
    cac0:	f382 8812 	msr	BASEPRI_MAX, r2
    cac4:	f3bf 8f6f 	isb	sy
	return list->head == list;
    cac8:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    caca:	4283      	cmp	r3, r0
    cacc:	d007      	beq.n	cade <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    cace:	b108      	cbz	r0, cad4 <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    cad0:	f7ff ff76 	bl	c9c0 <unpend_thread_no_timeout>
	__asm__ volatile(
    cad4:	f381 8811 	msr	BASEPRI, r1
    cad8:	f3bf 8f6f 	isb	sy
}
    cadc:	bd08      	pop	{r3, pc}
    cade:	2000      	movs	r0, #0
    cae0:	e7f8      	b.n	cad4 <z_unpend1_no_timeout+0x20>

0000cae2 <z_unpend_first_thread>:
{
    cae2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    cae4:	f04f 0340 	mov.w	r3, #64	; 0x40
    cae8:	f3ef 8511 	mrs	r5, BASEPRI
    caec:	f383 8812 	msr	BASEPRI_MAX, r3
    caf0:	f3bf 8f6f 	isb	sy
	return list->head == list;
    caf4:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    caf6:	42a0      	cmp	r0, r4
    caf8:	d00d      	beq.n	cb16 <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    cafa:	b134      	cbz	r4, cb0a <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    cafc:	4620      	mov	r0, r4
    cafe:	f7ff ff5f 	bl	c9c0 <unpend_thread_no_timeout>
    cb02:	f104 0018 	add.w	r0, r4, #24
    cb06:	f000 f869 	bl	cbdc <z_abort_timeout>
	__asm__ volatile(
    cb0a:	f385 8811 	msr	BASEPRI, r5
    cb0e:	f3bf 8f6f 	isb	sy
}
    cb12:	4620      	mov	r0, r4
    cb14:	bd38      	pop	{r3, r4, r5, pc}
    cb16:	2400      	movs	r4, #0
    cb18:	e7f7      	b.n	cb0a <z_unpend_first_thread+0x28>

0000cb1a <z_unpend_thread>:
{
    cb1a:	b510      	push	{r4, lr}
    cb1c:	4601      	mov	r1, r0
	__asm__ volatile(
    cb1e:	f04f 0340 	mov.w	r3, #64	; 0x40
    cb22:	f3ef 8411 	mrs	r4, BASEPRI
    cb26:	f383 8812 	msr	BASEPRI_MAX, r3
    cb2a:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    cb2e:	6883      	ldr	r3, [r0, #8]
    cb30:	b10b      	cbz	r3, cb36 <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
    cb32:	f7ff ff45 	bl	c9c0 <unpend_thread_no_timeout>
	__asm__ volatile(
    cb36:	f384 8811 	msr	BASEPRI, r4
    cb3a:	f3bf 8f6f 	isb	sy
}
    cb3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cb42:	f101 0018 	add.w	r0, r1, #24
    cb46:	f000 b849 	b.w	cbdc <z_abort_timeout>

0000cb4a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    cb4a:	4603      	mov	r3, r0
    cb4c:	b920      	cbnz	r0, cb58 <z_reschedule_irqlock+0xe>
    cb4e:	f3ef 8205 	mrs	r2, IPSR
    cb52:	b90a      	cbnz	r2, cb58 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    cb54:	f7f7 b898 	b.w	3c88 <arch_swap>
    cb58:	f383 8811 	msr	BASEPRI, r3
    cb5c:	f3bf 8f6f 	isb	sy
}
    cb60:	4770      	bx	lr

0000cb62 <z_reschedule_unlocked>:
	__asm__ volatile(
    cb62:	f04f 0340 	mov.w	r3, #64	; 0x40
    cb66:	f3ef 8011 	mrs	r0, BASEPRI
    cb6a:	f383 8812 	msr	BASEPRI_MAX, r3
    cb6e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    cb72:	f7ff bfea 	b.w	cb4a <z_reschedule_irqlock>

0000cb76 <z_unpend_all>:
{
    cb76:	b538      	push	{r3, r4, r5, lr}
    cb78:	4605      	mov	r5, r0
	int need_sched = 0;
    cb7a:	2000      	movs	r0, #0
	return list->head == list;
    cb7c:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cb7e:	42a5      	cmp	r5, r4
    cb80:	d000      	beq.n	cb84 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    cb82:	b904      	cbnz	r4, cb86 <z_unpend_all+0x10>
}
    cb84:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    cb86:	4620      	mov	r0, r4
    cb88:	f7ff ffc7 	bl	cb1a <z_unpend_thread>
		z_ready_thread(thread);
    cb8c:	4620      	mov	r0, r4
    cb8e:	f7ff ff49 	bl	ca24 <z_ready_thread>
		need_sched = 1;
    cb92:	2001      	movs	r0, #1
    cb94:	e7f2      	b.n	cb7c <z_unpend_all+0x6>

0000cb96 <z_sched_wake>:
{
    cb96:	b538      	push	{r3, r4, r5, lr}
    cb98:	f04f 0340 	mov.w	r3, #64	; 0x40
    cb9c:	f3ef 8511 	mrs	r5, BASEPRI
    cba0:	f383 8812 	msr	BASEPRI_MAX, r3
    cba4:	f3bf 8f6f 	isb	sy
	return list->head == list;
    cba8:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    cbaa:	42a0      	cmp	r0, r4
    cbac:	d012      	beq.n	cbd4 <z_sched_wake+0x3e>
		if (thread != NULL) {
    cbae:	b19c      	cbz	r4, cbd8 <z_sched_wake+0x42>
    cbb0:	67a1      	str	r1, [r4, #120]	; 0x78
	thread->base.swap_data = data;
    cbb2:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    cbb4:	4620      	mov	r0, r4
    cbb6:	f7ff ff03 	bl	c9c0 <unpend_thread_no_timeout>
    cbba:	f104 0018 	add.w	r0, r4, #24
    cbbe:	f000 f80d 	bl	cbdc <z_abort_timeout>
			ready_thread(thread);
    cbc2:	4620      	mov	r0, r4
    cbc4:	f7fd fbea 	bl	a39c <ready_thread>
			ret = true;
    cbc8:	2001      	movs	r0, #1
	__asm__ volatile(
    cbca:	f385 8811 	msr	BASEPRI, r5
    cbce:	f3bf 8f6f 	isb	sy
}
    cbd2:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    cbd4:	2000      	movs	r0, #0
    cbd6:	e7f8      	b.n	cbca <z_sched_wake+0x34>
    cbd8:	4620      	mov	r0, r4
    cbda:	e7f6      	b.n	cbca <z_sched_wake+0x34>

0000cbdc <z_abort_timeout>:
{
    cbdc:	b510      	push	{r4, lr}
	__asm__ volatile(
    cbde:	f04f 0240 	mov.w	r2, #64	; 0x40
    cbe2:	f3ef 8411 	mrs	r4, BASEPRI
    cbe6:	f382 8812 	msr	BASEPRI_MAX, r2
    cbea:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    cbee:	6803      	ldr	r3, [r0, #0]
    cbf0:	b13b      	cbz	r3, cc02 <z_abort_timeout+0x26>
			remove_timeout(to);
    cbf2:	f7fd fed7 	bl	a9a4 <remove_timeout>
			ret = 0;
    cbf6:	2000      	movs	r0, #0
	__asm__ volatile(
    cbf8:	f384 8811 	msr	BASEPRI, r4
    cbfc:	f3bf 8f6f 	isb	sy
}
    cc00:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    cc02:	f06f 0015 	mvn.w	r0, #21
    cc06:	e7f7      	b.n	cbf8 <z_abort_timeout+0x1c>

0000cc08 <z_get_next_timeout_expiry>:
{
    cc08:	b510      	push	{r4, lr}
	__asm__ volatile(
    cc0a:	f04f 0340 	mov.w	r3, #64	; 0x40
    cc0e:	f3ef 8411 	mrs	r4, BASEPRI
    cc12:	f383 8812 	msr	BASEPRI_MAX, r3
    cc16:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    cc1a:	f7fd fea3 	bl	a964 <next_timeout>
	__asm__ volatile(
    cc1e:	f384 8811 	msr	BASEPRI, r4
    cc22:	f3bf 8f6f 	isb	sy
}
    cc26:	bd10      	pop	{r4, pc}

0000cc28 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    cc28:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    cc2a:	f7fd ffb7 	bl	ab9c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    cc2e:	bd08      	pop	{r3, pc}

0000cc30 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    cc30:	f7fd bfb4 	b.w	ab9c <sys_clock_tick_get>

0000cc34 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    cc34:	b108      	cbz	r0, cc3a <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    cc36:	f7f7 bd61 	b.w	46fc <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    cc3a:	4770      	bx	lr

0000cc3c <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    cc3c:	f1b1 3fff 	cmp.w	r1, #4294967295
    cc40:	bf08      	it	eq
    cc42:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    cc46:	b538      	push	{r3, r4, r5, lr}
    cc48:	460c      	mov	r4, r1
    cc4a:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    cc4c:	d014      	beq.n	cc78 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    cc4e:	4308      	orrs	r0, r1
    cc50:	d103      	bne.n	cc5a <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    cc52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    cc56:	f7fd bfa1 	b.w	ab9c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    cc5a:	f06f 0001 	mvn.w	r0, #1
    cc5e:	1b40      	subs	r0, r0, r5
    cc60:	f04f 33ff 	mov.w	r3, #4294967295
    cc64:	eb63 0101 	sbc.w	r1, r3, r1
    cc68:	2900      	cmp	r1, #0
    cc6a:	da04      	bge.n	cc76 <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    cc6c:	f7fd ff96 	bl	ab9c <sys_clock_tick_get>
    cc70:	1940      	adds	r0, r0, r5
    cc72:	eb41 0104 	adc.w	r1, r1, r4
}
    cc76:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    cc78:	f04f 30ff 	mov.w	r0, #4294967295
    cc7c:	4601      	mov	r1, r0
    cc7e:	e7fa      	b.n	cc76 <sys_clock_timeout_end_calc+0x3a>

0000cc80 <k_timer_init>:
	timer->status = 0U;
    cc80:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    cc82:	e9c0 1208 	strd	r1, r2, [r0, #32]
    cc86:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    cc8a:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    cc8e:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    cc92:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    cc94:	6343      	str	r3, [r0, #52]	; 0x34
}
    cc96:	4770      	bx	lr

0000cc98 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    cc98:	b510      	push	{r4, lr}
    cc9a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    cc9c:	f7ff ff9e 	bl	cbdc <z_abort_timeout>

	if (inactive) {
    cca0:	b9b0      	cbnz	r0, ccd0 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    cca2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    cca4:	b10b      	cbz	r3, ccaa <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    cca6:	4620      	mov	r0, r4
    cca8:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    ccaa:	f104 0018 	add.w	r0, r4, #24
    ccae:	f7ff ff01 	bl	cab4 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    ccb2:	b168      	cbz	r0, ccd0 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    ccb4:	f7ff feb6 	bl	ca24 <z_ready_thread>
	__asm__ volatile(
    ccb8:	f04f 0340 	mov.w	r3, #64	; 0x40
    ccbc:	f3ef 8011 	mrs	r0, BASEPRI
    ccc0:	f383 8812 	msr	BASEPRI_MAX, r3
    ccc4:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    ccc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    cccc:	f7ff bf3d 	b.w	cb4a <z_reschedule_irqlock>
    ccd0:	bd10      	pop	{r4, pc}

0000ccd2 <k_free>:
	if (ptr != NULL) {
    ccd2:	b120      	cbz	r0, ccde <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    ccd4:	1f01      	subs	r1, r0, #4
    ccd6:	f850 0c04 	ldr.w	r0, [r0, #-4]
    ccda:	f000 b856 	b.w	cd8a <k_heap_free>
}
    ccde:	4770      	bx	lr

0000cce0 <k_heap_init>:
{
    cce0:	b410      	push	{r4}
    cce2:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    cce6:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    ccea:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    ccec:	f7fe ba91 	b.w	b212 <sys_heap_init>

0000ccf0 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    ccf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ccf4:	b085      	sub	sp, #20
    ccf6:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
    ccfa:	4607      	mov	r7, r0
    ccfc:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    ccfe:	4650      	mov	r0, sl
    cd00:	4621      	mov	r1, r4
{
    cd02:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    cd04:	f7ff ff9a 	bl	cc3c <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    cd08:	f1b4 3fff 	cmp.w	r4, #4294967295
    cd0c:	bf08      	it	eq
    cd0e:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    cd12:	4605      	mov	r5, r0
    cd14:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    cd16:	bf04      	itt	eq
    cd18:	f04f 35ff 	moveq.w	r5, #4294967295
    cd1c:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
    cd20:	f107 0a14 	add.w	sl, r7, #20
    cd24:	f04f 0340 	mov.w	r3, #64	; 0x40
    cd28:	f3ef 8411 	mrs	r4, BASEPRI
    cd2c:	f383 8812 	msr	BASEPRI_MAX, r3
    cd30:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    cd34:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    cd38:	464a      	mov	r2, r9
    cd3a:	4641      	mov	r1, r8
    cd3c:	4638      	mov	r0, r7
    cd3e:	f7fe fa01 	bl	b144 <sys_heap_aligned_alloc>
    cd42:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    cd44:	f7fd ff2a 	bl	ab9c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    cd48:	9b03      	ldr	r3, [sp, #12]
    cd4a:	b13b      	cbz	r3, cd5c <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
    cd4c:	f384 8811 	msr	BASEPRI, r4
    cd50:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    cd54:	4618      	mov	r0, r3
    cd56:	b005      	add	sp, #20
    cd58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    cd5c:	1a28      	subs	r0, r5, r0
    cd5e:	eb66 0101 	sbc.w	r1, r6, r1
    cd62:	2801      	cmp	r0, #1
    cd64:	f171 0200 	sbcs.w	r2, r1, #0
    cd68:	dbf0      	blt.n	cd4c <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    cd6a:	e9cd 0100 	strd	r0, r1, [sp]
    cd6e:	465a      	mov	r2, fp
    cd70:	4621      	mov	r1, r4
    cd72:	4650      	mov	r0, sl
    cd74:	f7fd fba6 	bl	a4c4 <z_pend_curr>
	__asm__ volatile(
    cd78:	f04f 0340 	mov.w	r3, #64	; 0x40
    cd7c:	f3ef 8411 	mrs	r4, BASEPRI
    cd80:	f383 8812 	msr	BASEPRI_MAX, r3
    cd84:	f3bf 8f6f 	isb	sy
	return k;
    cd88:	e7d6      	b.n	cd38 <k_heap_aligned_alloc+0x48>

0000cd8a <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    cd8a:	b538      	push	{r3, r4, r5, lr}
    cd8c:	4604      	mov	r4, r0
    cd8e:	f04f 0340 	mov.w	r3, #64	; 0x40
    cd92:	f3ef 8511 	mrs	r5, BASEPRI
    cd96:	f383 8812 	msr	BASEPRI_MAX, r3
    cd9a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    cd9e:	f7fe f999 	bl	b0d4 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    cda2:	f104 000c 	add.w	r0, r4, #12
    cda6:	f7ff fee6 	bl	cb76 <z_unpend_all>
    cdaa:	b130      	cbz	r0, cdba <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    cdac:	4629      	mov	r1, r5
    cdae:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    cdb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    cdb6:	f7fd bbe9 	b.w	a58c <z_reschedule>
	__asm__ volatile(
    cdba:	f385 8811 	msr	BASEPRI, r5
    cdbe:	f3bf 8f6f 	isb	sy
}
    cdc2:	bd38      	pop	{r3, r4, r5, pc}

0000cdc4 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    cdc4:	4770      	bx	lr
	...
