
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	00 39 00 20 ad 48 00 00 31 d5 00 00 81 48 00 00     .9. .H..1....H..
  10:	81 48 00 00 81 48 00 00 81 48 00 00 00 00 00 00     .H...H...H......
	...
  2c:	d5 41 00 00 81 48 00 00 00 00 00 00 81 41 00 00     .A...H.......A..
  3c:	81 48 00 00                                         .H..

00000040 <_irq_vector_table>:
  40:	85 42 00 00 89 74 00 00 85 42 00 00 85 42 00 00     .B...t...B...B..
  50:	85 42 00 00 85 42 00 00 85 42 00 00 85 42 00 00     .B...B...B...B..
  60:	85 42 00 00 85 42 00 00 e1 9f 00 00 85 42 00 00     .B...B.......B..
  70:	85 42 00 00 85 42 00 00 85 42 00 00 85 42 00 00     .B...B...B...B..
  80:	85 42 00 00 85 42 00 00 85 42 00 00 85 42 00 00     .B...B...B...B..
  90:	71 76 00 00 85 42 00 00 85 42 00 00 85 42 00 00     qv...B...B...B..
  a0:	85 42 00 00 85 42 00 00 85 42 00 00 85 42 00 00     .B...B...B...B..
  b0:	85 42 00 00 85 42 00 00 85 42 00 00 85 42 00 00     .B...B...B...B..
  c0:	85 42 00 00 85 42 00 00 85 42 00 00 85 42 00 00     .B...B...B...B..
  d0:	85 42 00 00 85 42 00 00 85 42 00 00 85 42 00 00     .B...B...B...B..

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295
      f0:	f04f 30ff 	movne.w	r0, #4294967295
      f4:	f000 b80c 	b.w	110 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f904 	bl	30c <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__aeabi_idiv0>:
     110:	4770      	bx	lr
     112:	bf00      	nop

00000114 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
     114:	b570      	push	{r4, r5, r6, lr}
     116:	4c17      	ldr	r4, [pc, #92]	; (174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>)
     118:	7860      	ldrb	r0, [r4, #1]
     11a:	2800      	cmp	r0, #0
     11c:	d123      	bne.n	166 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x52>
     11e:	2001      	movs	r0, #1
     120:	7060      	strb	r0, [r4, #1]
     122:	f000 fa61 	bl	5e8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
     126:	f06f 0527 	mvn.w	r5, #39	; 0x27
     12a:	b928      	cbnz	r0, 138 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     12c:	f000 fa72 	bl	614 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
     130:	b910      	cbnz	r0, 138 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     132:	f000 fa79 	bl	628 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
     136:	b120      	cbz	r0, 142 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
     138:	480f      	ldr	r0, [pc, #60]	; (178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>)
     13a:	6060      	str	r0, [r4, #4]
     13c:	70a5      	strb	r5, [r4, #2]
     13e:	2008      	movs	r0, #8
     140:	e010      	b.n	164 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x50>
     142:	f000 fa33 	bl	5ac <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
     146:	b940      	cbnz	r0, 15a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     148:	f000 fa3a 	bl	5c0 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
     14c:	b928      	cbnz	r0, 15a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     14e:	f000 fa41 	bl	5d4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
     152:	b910      	cbnz	r0, 15a <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x46>
     154:	f000 fa52 	bl	5fc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
     158:	b130      	cbz	r0, 168 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x54>
     15a:	4807      	ldr	r0, [pc, #28]	; (178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>)
     15c:	3031      	adds	r0, #49	; 0x31
     15e:	6060      	str	r0, [r4, #4]
     160:	70a5      	strb	r5, [r4, #2]
     162:	2004      	movs	r0, #4
     164:	70e0      	strb	r0, [r4, #3]
     166:	bd70      	pop	{r4, r5, r6, pc}
     168:	f240 113f 	movw	r1, #319	; 0x13f
     16c:	2074      	movs	r0, #116	; 0x74
     16e:	f000 f855 	bl	21c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     172:	0000      	.short	0x0000
     174:	20000000 	.word	0x20000000
     178:	000006d4 	.word	0x000006d4

0000017c <mpsl_tx_power_radio_supported_power_adjust>:
     17c:	4a06      	ldr	r2, [pc, #24]	; (198 <CONFIG_PMW3360_CPI+0x8>)
     17e:	b500      	push	{lr}
     180:	f992 2003 	ldrsb.w	r2, [r2, #3]
     184:	4290      	cmp	r0, r2
     186:	db01      	blt.n	18c <mpsl_tx_power_radio_supported_power_adjust+0x10>
     188:	4610      	mov	r0, r2
     18a:	bd00      	pop	{pc}
     18c:	f000 f808 	bl	1a0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
     190:	4902      	ldr	r1, [pc, #8]	; (19c <CONFIG_PMW3360_CPI+0xc>)
     192:	5608      	ldrsb	r0, [r1, r0]
     194:	bd00      	pop	{pc}
     196:	0000      	.short	0x0000
     198:	20000000 	.word	0x20000000
     19c:	000006c6 	.word	0x000006c6

000001a0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
     1a0:	4602      	mov	r2, r0
     1a2:	4813      	ldr	r0, [pc, #76]	; (1f0 <__data_size+0x4c>)
     1a4:	b510      	push	{r4, lr}
     1a6:	f990 3003 	ldrsb.w	r3, [r0, #3]
     1aa:	429a      	cmp	r2, r3
     1ac:	db01      	blt.n	1b2 <__data_size+0xe>
     1ae:	200d      	movs	r0, #13
     1b0:	bd10      	pop	{r4, pc}
     1b2:	f990 3002 	ldrsb.w	r3, [r0, #2]
     1b6:	429a      	cmp	r2, r3
     1b8:	dc01      	bgt.n	1be <__data_size+0x1a>
     1ba:	2000      	movs	r0, #0
     1bc:	bd10      	pop	{r4, pc}
     1be:	b101      	cbz	r1, 1c2 <__data_size+0x1e>
     1c0:	2101      	movs	r1, #1
     1c2:	1ad4      	subs	r4, r2, r3
     1c4:	6843      	ldr	r3, [r0, #4]
     1c6:	5d18      	ldrb	r0, [r3, r4]
     1c8:	4c0a      	ldr	r4, [pc, #40]	; (1f4 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY>)
     1ca:	5624      	ldrsb	r4, [r4, r0]
     1cc:	4294      	cmp	r4, r2
     1ce:	d0f5      	beq.n	1bc <__data_size+0x18>
     1d0:	4c08      	ldr	r4, [pc, #32]	; (1f4 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY>)
     1d2:	4408      	add	r0, r1
     1d4:	343f      	adds	r4, #63	; 0x3f
     1d6:	b2c0      	uxtb	r0, r0
     1d8:	b2d2      	uxtb	r2, r2
     1da:	42a3      	cmp	r3, r4
     1dc:	d1ee      	bne.n	1bc <__data_size+0x18>
     1de:	2900      	cmp	r1, #0
     1e0:	d0ec      	beq.n	1bc <__data_size+0x18>
     1e2:	2a01      	cmp	r2, #1
     1e4:	d001      	beq.n	1ea <__data_size+0x46>
     1e6:	2a02      	cmp	r2, #2
     1e8:	d1e8      	bne.n	1bc <__data_size+0x18>
     1ea:	1c40      	adds	r0, r0, #1
     1ec:	b2c0      	uxtb	r0, r0
     1ee:	bd10      	pop	{r4, pc}
     1f0:	20000000 	.word	0x20000000
     1f4:	000006c6 	.word	0x000006c6
     1f8:	f3bf 8f4f 	dsb	sy
     1fc:	4805      	ldr	r0, [pc, #20]	; (214 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x20>)
     1fe:	6801      	ldr	r1, [r0, #0]
     200:	4a05      	ldr	r2, [pc, #20]	; (218 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x24>)
     202:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     206:	4311      	orrs	r1, r2
     208:	6001      	str	r1, [r0, #0]
     20a:	f3bf 8f4f 	dsb	sy
     20e:	bf00      	nop
     210:	e7fd      	b.n	20e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x1a>
     212:	0000      	.short	0x0000
     214:	e000ed0c 	.word	0xe000ed0c
     218:	05fa0004 	.word	0x05fa0004

0000021c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
     21c:	b50e      	push	{r1, r2, r3, lr}
     21e:	b672      	cpsid	i
     220:	4a0f      	ldr	r2, [pc, #60]	; (260 <CONFIG_USB_DEVICE_PID+0x40>)
     222:	6855      	ldr	r5, [r2, #4]
     224:	b1d5      	cbz	r5, 25c <CONFIG_USB_DEVICE_PID+0x3c>
     226:	2200      	movs	r2, #0
     228:	4603      	mov	r3, r0
     22a:	466e      	mov	r6, sp
     22c:	240a      	movs	r4, #10
     22e:	e003      	b.n	238 <CONFIG_USB_DEVICE_PID+0x18>
     230:	fbb0 f0f4 	udiv	r0, r0, r4
     234:	1c52      	adds	r2, r2, #1
     236:	b2d2      	uxtb	r2, r2
     238:	2800      	cmp	r0, #0
     23a:	d1f9      	bne.n	230 <CONFIG_USB_DEVICE_PID+0x10>
     23c:	54b0      	strb	r0, [r6, r2]
     23e:	e009      	b.n	254 <CONFIG_USB_DEVICE_PID+0x34>
     240:	fbb3 f0f4 	udiv	r0, r3, r4
     244:	fb04 3010 	mls	r0, r4, r0, r3
     248:	fbb3 f3f4 	udiv	r3, r3, r4
     24c:	1e52      	subs	r2, r2, #1
     24e:	b2d2      	uxtb	r2, r2
     250:	3030      	adds	r0, #48	; 0x30
     252:	54b0      	strb	r0, [r6, r2]
     254:	2a00      	cmp	r2, #0
     256:	d1f3      	bne.n	240 <CONFIG_USB_DEVICE_PID+0x20>
     258:	4630      	mov	r0, r6
     25a:	47a8      	blx	r5
     25c:	f7ff ffcc 	bl	1f8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x4>
     260:	20000008 	.word	0x20000008

00000264 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
     264:	00000655 0000068d 00000677 00000665     U.......w...e...
     274:	00000671 0000065f 00000653 00000651     q..._...S...Q...
     284:	00000689 0000067d 0000066b 00000659     ....}...k...Y...
     294:	0000064b 00000643 00000647 0000063d     K...C...G...=...

000002a4 <mpsl_fem_deactivate_now>:
     2a4:	4901      	ldr	r1, [pc, #4]	; (2ac <mpsl_fem_deactivate_now+0x8>)
     2a6:	6809      	ldr	r1, [r1, #0]
     2a8:	6989      	ldr	r1, [r1, #24]
     2aa:	4708      	bx	r1
     2ac:	20000010 	.word	0x20000010

000002b0 <mpsl_fem_disable>:
     2b0:	4801      	ldr	r0, [pc, #4]	; (2b8 <mpsl_fem_disable+0x8>)
     2b2:	6800      	ldr	r0, [r0, #0]
     2b4:	6800      	ldr	r0, [r0, #0]
     2b6:	4700      	bx	r0
     2b8:	20000010 	.word	0x20000010

000002bc <mpsl_fem_lna_configuration_clear>:
     2bc:	4801      	ldr	r0, [pc, #4]	; (2c4 <mpsl_fem_lna_configuration_clear+0x8>)
     2be:	6800      	ldr	r0, [r0, #0]
     2c0:	6940      	ldr	r0, [r0, #20]
     2c2:	4700      	bx	r0
     2c4:	20000010 	.word	0x20000010

000002c8 <mpsl_fem_lna_configuration_set>:
     2c8:	4a01      	ldr	r2, [pc, #4]	; (2d0 <mpsl_fem_lna_configuration_set+0x8>)
     2ca:	6812      	ldr	r2, [r2, #0]
     2cc:	68d2      	ldr	r2, [r2, #12]
     2ce:	4710      	bx	r2
     2d0:	20000010 	.word	0x20000010

000002d4 <mpsl_fem_pa_configuration_clear>:
     2d4:	4801      	ldr	r0, [pc, #4]	; (2dc <mpsl_fem_pa_configuration_clear+0x8>)
     2d6:	6800      	ldr	r0, [r0, #0]
     2d8:	6900      	ldr	r0, [r0, #16]
     2da:	4700      	bx	r0
     2dc:	20000010 	.word	0x20000010

000002e0 <mpsl_fem_pa_configuration_set>:
     2e0:	4a01      	ldr	r2, [pc, #4]	; (2e8 <mpsl_fem_pa_configuration_set+0x8>)
     2e2:	6812      	ldr	r2, [r2, #0]
     2e4:	6892      	ldr	r2, [r2, #8]
     2e6:	4710      	bx	r2
     2e8:	20000010 	.word	0x20000010

000002ec <mpsl_fem_pa_gain_set>:
     2ec:	4901      	ldr	r1, [pc, #4]	; (2f4 <mpsl_fem_pa_gain_set+0x8>)
     2ee:	6809      	ldr	r1, [r1, #0]
     2f0:	6a49      	ldr	r1, [r1, #36]	; 0x24
     2f2:	4708      	bx	r1
     2f4:	20000010 	.word	0x20000010

000002f8 <mpsl_fem_tx_power_split>:
     2f8:	b430      	push	{r4, r5}
     2fa:	4c03      	ldr	r4, [pc, #12]	; (308 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8>)
     2fc:	6824      	ldr	r4, [r4, #0]
     2fe:	6864      	ldr	r4, [r4, #4]
     300:	46a4      	mov	ip, r4
     302:	bc30      	pop	{r4, r5}
     304:	4760      	bx	ip
     306:	0000      	.short	0x0000
     308:	20000010 	.word	0x20000010

0000030c <__udivmoddi4>:
     30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     310:	4686      	mov	lr, r0
     312:	468c      	mov	ip, r1
     314:	4608      	mov	r0, r1
     316:	9e08      	ldr	r6, [sp, #32]
     318:	4615      	mov	r5, r2
     31a:	4674      	mov	r4, lr
     31c:	4619      	mov	r1, r3
     31e:	2b00      	cmp	r3, #0
     320:	f040 80c2 	bne.w	4a8 <CONFIG_LOG_BUFFER_SIZE+0xa8>
     324:	4285      	cmp	r5, r0
     326:	fab2 f282 	clz	r2, r2
     32a:	d945      	bls.n	3b8 <__udivmoddi4+0xac>
     32c:	b14a      	cbz	r2, 342 <__udivmoddi4+0x36>
     32e:	f1c2 0320 	rsb	r3, r2, #32
     332:	fa00 fc02 	lsl.w	ip, r0, r2
     336:	fa2e f303 	lsr.w	r3, lr, r3
     33a:	4095      	lsls	r5, r2
     33c:	ea43 0c0c 	orr.w	ip, r3, ip
     340:	4094      	lsls	r4, r2
     342:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     346:	b2a8      	uxth	r0, r5
     348:	fbbc f8fe 	udiv	r8, ip, lr
     34c:	0c23      	lsrs	r3, r4, #16
     34e:	fb0e cc18 	mls	ip, lr, r8, ip
     352:	fb08 f900 	mul.w	r9, r8, r0
     356:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     35a:	4599      	cmp	r9, r3
     35c:	d928      	bls.n	3b0 <__udivmoddi4+0xa4>
     35e:	18eb      	adds	r3, r5, r3
     360:	f108 37ff 	add.w	r7, r8, #4294967295
     364:	d204      	bcs.n	370 <__udivmoddi4+0x64>
     366:	4599      	cmp	r9, r3
     368:	d902      	bls.n	370 <__udivmoddi4+0x64>
     36a:	f1a8 0702 	sub.w	r7, r8, #2
     36e:	442b      	add	r3, r5
     370:	eba3 0309 	sub.w	r3, r3, r9
     374:	b2a4      	uxth	r4, r4
     376:	fbb3 fcfe 	udiv	ip, r3, lr
     37a:	fb0e 331c 	mls	r3, lr, ip, r3
     37e:	fb0c f000 	mul.w	r0, ip, r0
     382:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     386:	42a0      	cmp	r0, r4
     388:	d914      	bls.n	3b4 <__udivmoddi4+0xa8>
     38a:	192c      	adds	r4, r5, r4
     38c:	f10c 33ff 	add.w	r3, ip, #4294967295
     390:	d204      	bcs.n	39c <__udivmoddi4+0x90>
     392:	42a0      	cmp	r0, r4
     394:	d902      	bls.n	39c <__udivmoddi4+0x90>
     396:	f1ac 0302 	sub.w	r3, ip, #2
     39a:	442c      	add	r4, r5
     39c:	1a24      	subs	r4, r4, r0
     39e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     3a2:	b11e      	cbz	r6, 3ac <__udivmoddi4+0xa0>
     3a4:	40d4      	lsrs	r4, r2
     3a6:	2300      	movs	r3, #0
     3a8:	6034      	str	r4, [r6, #0]
     3aa:	6073      	str	r3, [r6, #4]
     3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3b0:	4647      	mov	r7, r8
     3b2:	e7dd      	b.n	370 <__udivmoddi4+0x64>
     3b4:	4663      	mov	r3, ip
     3b6:	e7f1      	b.n	39c <__udivmoddi4+0x90>
     3b8:	bb92      	cbnz	r2, 420 <CONFIG_LOG_BUFFER_SIZE+0x20>
     3ba:	1b43      	subs	r3, r0, r5
     3bc:	2101      	movs	r1, #1
     3be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     3c2:	b2af      	uxth	r7, r5
     3c4:	fbb3 fcfe 	udiv	ip, r3, lr
     3c8:	0c20      	lsrs	r0, r4, #16
     3ca:	fb0e 331c 	mls	r3, lr, ip, r3
     3ce:	fb0c f807 	mul.w	r8, ip, r7
     3d2:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     3d6:	4598      	cmp	r8, r3
     3d8:	d962      	bls.n	4a0 <CONFIG_LOG_BUFFER_SIZE+0xa0>
     3da:	18eb      	adds	r3, r5, r3
     3dc:	f10c 30ff 	add.w	r0, ip, #4294967295
     3e0:	d204      	bcs.n	3ec <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x4>
     3e2:	4598      	cmp	r8, r3
     3e4:	d902      	bls.n	3ec <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x4>
     3e6:	f1ac 0002 	sub.w	r0, ip, #2
     3ea:	442b      	add	r3, r5
     3ec:	eba3 0308 	sub.w	r3, r3, r8
     3f0:	b2a4      	uxth	r4, r4
     3f2:	fbb3 fcfe 	udiv	ip, r3, lr
     3f6:	fb0e 331c 	mls	r3, lr, ip, r3
     3fa:	fb0c f707 	mul.w	r7, ip, r7
     3fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     402:	42a7      	cmp	r7, r4
     404:	d94e      	bls.n	4a4 <CONFIG_LOG_BUFFER_SIZE+0xa4>
     406:	192c      	adds	r4, r5, r4
     408:	f10c 33ff 	add.w	r3, ip, #4294967295
     40c:	d204      	bcs.n	418 <CONFIG_LOG_BUFFER_SIZE+0x18>
     40e:	42a7      	cmp	r7, r4
     410:	d902      	bls.n	418 <CONFIG_LOG_BUFFER_SIZE+0x18>
     412:	f1ac 0302 	sub.w	r3, ip, #2
     416:	442c      	add	r4, r5
     418:	1be4      	subs	r4, r4, r7
     41a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     41e:	e7c0      	b.n	3a2 <__udivmoddi4+0x96>
     420:	f1c2 0320 	rsb	r3, r2, #32
     424:	fa20 f103 	lsr.w	r1, r0, r3
     428:	4095      	lsls	r5, r2
     42a:	4090      	lsls	r0, r2
     42c:	fa2e f303 	lsr.w	r3, lr, r3
     430:	4303      	orrs	r3, r0
     432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     436:	b2af      	uxth	r7, r5
     438:	fbb1 fcfe 	udiv	ip, r1, lr
     43c:	fb0e 101c 	mls	r0, lr, ip, r1
     440:	0c19      	lsrs	r1, r3, #16
     442:	fb0c f807 	mul.w	r8, ip, r7
     446:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     44a:	4588      	cmp	r8, r1
     44c:	fa04 f402 	lsl.w	r4, r4, r2
     450:	d922      	bls.n	498 <CONFIG_LOG_BUFFER_SIZE+0x98>
     452:	1869      	adds	r1, r5, r1
     454:	f10c 30ff 	add.w	r0, ip, #4294967295
     458:	d204      	bcs.n	464 <CONFIG_LOG_BUFFER_SIZE+0x64>
     45a:	4588      	cmp	r8, r1
     45c:	d902      	bls.n	464 <CONFIG_LOG_BUFFER_SIZE+0x64>
     45e:	f1ac 0002 	sub.w	r0, ip, #2
     462:	4429      	add	r1, r5
     464:	eba1 0108 	sub.w	r1, r1, r8
     468:	b29b      	uxth	r3, r3
     46a:	fbb1 fcfe 	udiv	ip, r1, lr
     46e:	fb0e 111c 	mls	r1, lr, ip, r1
     472:	fb0c f707 	mul.w	r7, ip, r7
     476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     47a:	429f      	cmp	r7, r3
     47c:	d90e      	bls.n	49c <CONFIG_LOG_BUFFER_SIZE+0x9c>
     47e:	18eb      	adds	r3, r5, r3
     480:	f10c 31ff 	add.w	r1, ip, #4294967295
     484:	d204      	bcs.n	490 <CONFIG_LOG_BUFFER_SIZE+0x90>
     486:	429f      	cmp	r7, r3
     488:	d902      	bls.n	490 <CONFIG_LOG_BUFFER_SIZE+0x90>
     48a:	f1ac 0102 	sub.w	r1, ip, #2
     48e:	442b      	add	r3, r5
     490:	1bdb      	subs	r3, r3, r7
     492:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     496:	e792      	b.n	3be <__udivmoddi4+0xb2>
     498:	4660      	mov	r0, ip
     49a:	e7e3      	b.n	464 <CONFIG_LOG_BUFFER_SIZE+0x64>
     49c:	4661      	mov	r1, ip
     49e:	e7f7      	b.n	490 <CONFIG_LOG_BUFFER_SIZE+0x90>
     4a0:	4660      	mov	r0, ip
     4a2:	e7a3      	b.n	3ec <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x4>
     4a4:	4663      	mov	r3, ip
     4a6:	e7b7      	b.n	418 <CONFIG_LOG_BUFFER_SIZE+0x18>
     4a8:	4283      	cmp	r3, r0
     4aa:	d906      	bls.n	4ba <CONFIG_LOG_BUFFER_SIZE+0xba>
     4ac:	b916      	cbnz	r6, 4b4 <CONFIG_LOG_BUFFER_SIZE+0xb4>
     4ae:	2100      	movs	r1, #0
     4b0:	4608      	mov	r0, r1
     4b2:	e77b      	b.n	3ac <__udivmoddi4+0xa0>
     4b4:	e9c6 e000 	strd	lr, r0, [r6]
     4b8:	e7f9      	b.n	4ae <CONFIG_LOG_BUFFER_SIZE+0xae>
     4ba:	fab3 f783 	clz	r7, r3
     4be:	b98f      	cbnz	r7, 4e4 <CONFIG_LOG_BUFFER_SIZE+0xe4>
     4c0:	4283      	cmp	r3, r0
     4c2:	d301      	bcc.n	4c8 <CONFIG_LOG_BUFFER_SIZE+0xc8>
     4c4:	4572      	cmp	r2, lr
     4c6:	d808      	bhi.n	4da <CONFIG_LOG_BUFFER_SIZE+0xda>
     4c8:	ebbe 0402 	subs.w	r4, lr, r2
     4cc:	eb60 0303 	sbc.w	r3, r0, r3
     4d0:	2001      	movs	r0, #1
     4d2:	469c      	mov	ip, r3
     4d4:	b91e      	cbnz	r6, 4de <CONFIG_LOG_BUFFER_SIZE+0xde>
     4d6:	2100      	movs	r1, #0
     4d8:	e768      	b.n	3ac <__udivmoddi4+0xa0>
     4da:	4638      	mov	r0, r7
     4dc:	e7fa      	b.n	4d4 <CONFIG_LOG_BUFFER_SIZE+0xd4>
     4de:	e9c6 4c00 	strd	r4, ip, [r6]
     4e2:	e7f8      	b.n	4d6 <CONFIG_LOG_BUFFER_SIZE+0xd6>
     4e4:	f1c7 0c20 	rsb	ip, r7, #32
     4e8:	40bb      	lsls	r3, r7
     4ea:	fa22 f40c 	lsr.w	r4, r2, ip
     4ee:	431c      	orrs	r4, r3
     4f0:	fa2e f10c 	lsr.w	r1, lr, ip
     4f4:	fa20 f30c 	lsr.w	r3, r0, ip
     4f8:	40b8      	lsls	r0, r7
     4fa:	4301      	orrs	r1, r0
     4fc:	ea4f 4914 	mov.w	r9, r4, lsr #16
     500:	fa0e f507 	lsl.w	r5, lr, r7
     504:	fbb3 f8f9 	udiv	r8, r3, r9
     508:	fa1f fe84 	uxth.w	lr, r4
     50c:	fb09 3018 	mls	r0, r9, r8, r3
     510:	0c0b      	lsrs	r3, r1, #16
     512:	fb08 fa0e 	mul.w	sl, r8, lr
     516:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     51a:	459a      	cmp	sl, r3
     51c:	fa02 f207 	lsl.w	r2, r2, r7
     520:	d940      	bls.n	5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>
     522:	18e3      	adds	r3, r4, r3
     524:	f108 30ff 	add.w	r0, r8, #4294967295
     528:	d204      	bcs.n	534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>
     52a:	459a      	cmp	sl, r3
     52c:	d902      	bls.n	534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>
     52e:	f1a8 0002 	sub.w	r0, r8, #2
     532:	4423      	add	r3, r4
     534:	eba3 030a 	sub.w	r3, r3, sl
     538:	b289      	uxth	r1, r1
     53a:	fbb3 f8f9 	udiv	r8, r3, r9
     53e:	fb09 3318 	mls	r3, r9, r8, r3
     542:	fb08 fe0e 	mul.w	lr, r8, lr
     546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     54a:	458e      	cmp	lr, r1
     54c:	d92c      	bls.n	5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>
     54e:	1861      	adds	r1, r4, r1
     550:	f108 33ff 	add.w	r3, r8, #4294967295
     554:	d204      	bcs.n	560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>
     556:	458e      	cmp	lr, r1
     558:	d902      	bls.n	560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>
     55a:	f1a8 0302 	sub.w	r3, r8, #2
     55e:	4421      	add	r1, r4
     560:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     564:	fba0 9802 	umull	r9, r8, r0, r2
     568:	eba1 010e 	sub.w	r1, r1, lr
     56c:	4541      	cmp	r1, r8
     56e:	46ce      	mov	lr, r9
     570:	4643      	mov	r3, r8
     572:	d302      	bcc.n	57a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x92>
     574:	d106      	bne.n	584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>
     576:	454d      	cmp	r5, r9
     578:	d204      	bcs.n	584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>
     57a:	ebb9 0e02 	subs.w	lr, r9, r2
     57e:	eb68 0304 	sbc.w	r3, r8, r4
     582:	3801      	subs	r0, #1
     584:	2e00      	cmp	r6, #0
     586:	d0a6      	beq.n	4d6 <CONFIG_LOG_BUFFER_SIZE+0xd6>
     588:	ebb5 020e 	subs.w	r2, r5, lr
     58c:	eb61 0103 	sbc.w	r1, r1, r3
     590:	fa01 fc0c 	lsl.w	ip, r1, ip
     594:	fa22 f307 	lsr.w	r3, r2, r7
     598:	ea4c 0303 	orr.w	r3, ip, r3
     59c:	40f9      	lsrs	r1, r7
     59e:	e9c6 3100 	strd	r3, r1, [r6]
     5a2:	e798      	b.n	4d6 <CONFIG_LOG_BUFFER_SIZE+0xd6>
     5a4:	4640      	mov	r0, r8
     5a6:	e7c5      	b.n	534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>
     5a8:	4643      	mov	r3, r8
     5aa:	e7d9      	b.n	560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>

000005ac <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
     5ac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     5b0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     5b4:	280f      	cmp	r0, #15
     5b6:	d001      	beq.n	5bc <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
     5b8:	2000      	movs	r0, #0
     5ba:	4770      	bx	lr
     5bc:	2001      	movs	r0, #1
     5be:	4770      	bx	lr

000005c0 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
     5c0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     5c4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     5c8:	280a      	cmp	r0, #10
     5ca:	d001      	beq.n	5d0 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
     5cc:	2000      	movs	r0, #0
     5ce:	4770      	bx	lr
     5d0:	2001      	movs	r0, #1
     5d2:	4770      	bx	lr

000005d4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
     5d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     5d8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     5dc:	280e      	cmp	r0, #14
     5de:	d001      	beq.n	5e4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
     5e0:	2000      	movs	r0, #0
     5e2:	4770      	bx	lr
     5e4:	2001      	movs	r0, #1
     5e6:	4770      	bx	lr

000005e8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
     5e8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     5ec:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     5f0:	2810      	cmp	r0, #16
     5f2:	d001      	beq.n	5f8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
     5f4:	2000      	movs	r0, #0
     5f6:	4770      	bx	lr
     5f8:	2001      	movs	r0, #1
     5fa:	4770      	bx	lr

000005fc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
     5fc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     600:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     604:	2806      	cmp	r0, #6
     606:	d003      	beq.n	610 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
     608:	1c40      	adds	r0, r0, #1
     60a:	d001      	beq.n	610 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
     60c:	2000      	movs	r0, #0
     60e:	4770      	bx	lr
     610:	2001      	movs	r0, #1
     612:	4770      	bx	lr

00000614 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
     614:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     618:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     61c:	280d      	cmp	r0, #13
     61e:	d001      	beq.n	624 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
     620:	2000      	movs	r0, #0
     622:	4770      	bx	lr
     624:	2001      	movs	r0, #1
     626:	4770      	bx	lr

00000628 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
     628:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     62c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     630:	2808      	cmp	r0, #8
     632:	d001      	beq.n	638 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
     634:	2000      	movs	r0, #0
     636:	4770      	bx	lr
     638:	2001      	movs	r0, #1
     63a:	4770      	bx	lr
     63c:	f04f 30ff 	mov.w	r0, #4294967295
     640:	4770      	bx	lr
     642:	2000      	movs	r0, #0
     644:	4770      	bx	lr
     646:	2000      	movs	r0, #0
     648:	4770      	bx	lr
     64a:	f04f 30ff 	mov.w	r0, #4294967295
     64e:	4770      	bx	lr
     650:	4770      	bx	lr
     652:	4770      	bx	lr
     654:	2000      	movs	r0, #0
     656:	4770      	bx	lr
     658:	2100      	movs	r1, #0
     65a:	7001      	strb	r1, [r0, #0]
     65c:	4770      	bx	lr
     65e:	f04f 30ff 	mov.w	r0, #4294967295
     662:	4770      	bx	lr
     664:	f04f 30ff 	mov.w	r0, #4294967295
     668:	4770      	bx	lr
     66a:	2100      	movs	r1, #0
     66c:	7001      	strb	r1, [r0, #0]
     66e:	4770      	bx	lr
     670:	f04f 30ff 	mov.w	r0, #4294967295
     674:	4770      	bx	lr
     676:	f04f 30ff 	mov.w	r0, #4294967295
     67a:	4770      	bx	lr
     67c:	7800      	ldrb	r0, [r0, #0]
     67e:	2800      	cmp	r0, #0
     680:	d001      	beq.n	686 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x5e>
     682:	f06f 0015 	mvn.w	r0, #21
     686:	4770      	bx	lr
     688:	2000      	movs	r0, #0
     68a:	4770      	bx	lr
     68c:	2200      	movs	r2, #0
     68e:	f000 b802 	b.w	696 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00000692 <mpsl_fem_init>:
     692:	f7ff bd3f 	b.w	114 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

00000696 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
     696:	b570      	push	{r4, r5, r6, lr}
     698:	4614      	mov	r4, r2
     69a:	460d      	mov	r5, r1
     69c:	1b00      	subs	r0, r0, r4
     69e:	f06f 017f 	mvn.w	r1, #127	; 0x7f
     6a2:	4288      	cmp	r0, r1
     6a4:	da01      	bge.n	6aa <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
     6a6:	4608      	mov	r0, r1
     6a8:	e002      	b.n	6b0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
     6aa:	287f      	cmp	r0, #127	; 0x7f
     6ac:	dd00      	ble.n	6b0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
     6ae:	207f      	movs	r0, #127	; 0x7f
     6b0:	4619      	mov	r1, r3
     6b2:	b240      	sxtb	r0, r0
     6b4:	f7ff fd62 	bl	17c <mpsl_tx_power_radio_supported_power_adjust>
     6b8:	7028      	strb	r0, [r5, #0]
     6ba:	706c      	strb	r4, [r5, #1]
     6bc:	2100      	movs	r1, #0
     6be:	4420      	add	r0, r4
     6c0:	70a9      	strb	r1, [r5, #2]
     6c2:	b240      	sxtb	r0, r0
     6c4:	bd70      	pop	{r4, r5, r6, pc}
     6c6:	ecd8      	.short	0xecd8
     6c8:	fcf8f4f0 	.word	0xfcf8f4f0
     6cc:	04030200 	.word	0x04030200
     6d0:	08070605 	.word	0x08070605
	...
     6e8:	01010101 	.word	0x01010101
     6ec:	02020202 	.word	0x02020202
     6f0:	03030303 	.word	0x03030303
     6f4:	04040404 	.word	0x04040404
     6f8:	05050505 	.word	0x05050505
     6fc:	08070606 	.word	0x08070606
     700:	0c0b0a09 	.word	0x0c0b0a09
     704:	0000000d 	.word	0x0000000d
	...
     718:	01010100 	.word	0x01010100
     71c:	02020201 	.word	0x02020201
     720:	03030302 	.word	0x03030302
     724:	04040403 	.word	0x04040403
     728:	05050504 	.word	0x05050504
     72c:	06060605 	.word	0x06060605
     730:	00000908 	.word	0x00000908

00000734 <configure_callback.constprop.0>:
    //     button_states = states;
    // }
    // k_sem_give(&button_sem);
}

static void configure_callback(const struct gpio_dt_spec *spec, gpio_callback_handler_t handler, struct gpio_callback *cb) {
     734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     738:	4604      	mov	r4, r0
    const struct device *gpio = spec->port;
     73a:	6805      	ldr	r5, [r0, #0]
	gpio_pin_t pin = spec->pin;
     73c:	7906      	ldrb	r6, [r0, #4]
static void configure_callback(const struct gpio_dt_spec *spec, gpio_callback_handler_t handler, struct gpio_callback *cb) {
     73e:	af00      	add	r7, sp, #0
     740:	4688      	mov	r8, r1
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     742:	4628      	mov	r0, r5
     744:	f00d fc57 	bl	dff6 <z_device_is_ready>
	int ret;
	if (gpio == NULL) {
		/* Optional GPIO is missing. */
		// return 0;
	}
	if (!device_is_ready(gpio)) {
     748:	4603      	mov	r3, r0
     74a:	b990      	cbnz	r0, 772 <configure_callback.constprop.0+0x3e>
		LOG_ERR("GPIO port %s is not ready", gpio->name);
     74c:	46e9      	mov	r9, sp
     74e:	b088      	sub	sp, #32
     750:	6829      	ldr	r1, [r5, #0]
     752:	466a      	mov	r2, sp
     754:	4847      	ldr	r0, [pc, #284]	; (874 <__z_interrupt_stack_SIZEOF+0x34>)
     756:	e9c2 0105 	strd	r0, r1, [r2, #20]
     75a:	f44f 7100 	mov.w	r1, #512	; 0x200
     75e:	8391      	strh	r1, [r2, #28]
     760:	4945      	ldr	r1, [pc, #276]	; (878 <__z_interrupt_stack_SIZEOF+0x38>)
     762:	f842 1f10 	str.w	r1, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
     766:	4845      	ldr	r0, [pc, #276]	; (87c <__z_interrupt_stack_SIZEOF+0x3c>)
     768:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
     76c:	f002 f846 	bl	27fc <z_impl_z_log_msg_static_create>
     770:	46cd      	mov	sp, r9
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
				  spec->dt_flags | extra_flags);
     772:	88e3      	ldrh	r3, [r4, #6]
	return gpio_pin_configure(spec->port,
     774:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
     776:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
     778:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
	struct gpio_driver_data *data =
     77c:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
     780:	f8d0 9008 	ldr.w	r9, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
     784:	f013 0f01 	tst.w	r3, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
     788:	f04f 0c01 	mov.w	ip, #1
     78c:	f8de 3000 	ldr.w	r3, [lr]
     790:	fa0c fc01 	lsl.w	ip, ip, r1
     794:	bf14      	ite	ne
     796:	ea4c 0303 	orrne.w	r3, ip, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     79a:	ea23 030c 	biceq.w	r3, r3, ip
     79e:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
     7a2:	f8d9 3000 	ldr.w	r3, [r9]
     7a6:	4798      	blx	r3
		// return -ENODEV;
	}
	ret = gpio_pin_configure_dt(spec, GPIO_INPUT);
	if (ret < 0) {
     7a8:	2800      	cmp	r0, #0
     7aa:	da15      	bge.n	7d8 <configure_callback.constprop.0+0xa4>
		LOG_ERR("Failed to configure port %s pin %u, error: %d",
     7ac:	46e9      	mov	r9, sp
     7ae:	b08a      	sub	sp, #40	; 0x28
     7b0:	682b      	ldr	r3, [r5, #0]
     7b2:	466a      	mov	r2, sp
     7b4:	4932      	ldr	r1, [pc, #200]	; (880 <__z_interrupt_stack_SIZEOF+0x40>)
     7b6:	e9c2 1305 	strd	r1, r3, [r2, #20]
     7ba:	f44f 7300 	mov.w	r3, #512	; 0x200
     7be:	8493      	strh	r3, [r2, #36]	; 0x24
     7c0:	4b30      	ldr	r3, [pc, #192]	; (884 <__z_interrupt_stack_SIZEOF+0x44>)
     7c2:	e9c2 6007 	strd	r6, r0, [r2, #28]
     7c6:	f842 3f10 	str.w	r3, [r2, #16]!
     7ca:	482c      	ldr	r0, [pc, #176]	; (87c <__z_interrupt_stack_SIZEOF+0x3c>)
     7cc:	2300      	movs	r3, #0
     7ce:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
     7d2:	f002 f813 	bl	27fc <z_impl_z_log_msg_static_create>
     7d6:	46cd      	mov	sp, r9
			gpio->name, pin, ret);
		// return ret;
	}
	ret = gpio_pin_get(gpio, pin);
     7d8:	4631      	mov	r1, r6
     7da:	4628      	mov	r0, r5
     7dc:	f00b ff34 	bl	c648 <gpio_pin_get>
	if (ret < 0) {
     7e0:	2800      	cmp	r0, #0
     7e2:	da15      	bge.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
		LOG_ERR("Failed to get the state of port %s pin %u, error: %d",
     7e4:	46e9      	mov	r9, sp
     7e6:	b08a      	sub	sp, #40	; 0x28
     7e8:	682b      	ldr	r3, [r5, #0]
     7ea:	466a      	mov	r2, sp
     7ec:	4926      	ldr	r1, [pc, #152]	; (888 <__z_interrupt_stack_SIZEOF+0x48>)
     7ee:	e9c2 1305 	strd	r1, r3, [r2, #20]
     7f2:	f44f 7300 	mov.w	r3, #512	; 0x200
     7f6:	8493      	strh	r3, [r2, #36]	; 0x24
     7f8:	4b22      	ldr	r3, [pc, #136]	; (884 <__z_interrupt_stack_SIZEOF+0x44>)
     7fa:	e9c2 6007 	strd	r6, r0, [r2, #28]
     7fe:	f842 3f10 	str.w	r3, [r2, #16]!
     802:	481e      	ldr	r0, [pc, #120]	; (87c <__z_interrupt_stack_SIZEOF+0x3c>)
     804:	2300      	movs	r3, #0
     806:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
     80a:	f001 fff7 	bl	27fc <z_impl_z_log_msg_static_create>
     80e:	46cd      	mov	sp, r9
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     810:	4b1e      	ldr	r3, [pc, #120]	; (88c <__z_interrupt_stack_SIZEOF+0x4c>)
     812:	f8c8 3004 	str.w	r3, [r8, #4]
			gpio->name, pin, ret);
		// return ret;
	}

	gpio_init_callback(cb, button_callback, BIT(pin));
     816:	2201      	movs	r2, #1
     818:	fa02 f306 	lsl.w	r3, r2, r6
	callback->pin_mask = pin_mask;
     81c:	f8c8 3008 	str.w	r3, [r8, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     820:	68ab      	ldr	r3, [r5, #8]
     822:	69db      	ldr	r3, [r3, #28]
     824:	b113      	cbz	r3, 82c <CONFIG_ISR_STACK_SIZE+0x2c>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     826:	4641      	mov	r1, r8
     828:	4628      	mov	r0, r5
     82a:	4798      	blx	r3
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
     82c:	6820      	ldr	r0, [r4, #0]
     82e:	7921      	ldrb	r1, [r4, #4]
	return api->pin_interrupt_configure(port, pin, mode, trig);
     830:	6883      	ldr	r3, [r0, #8]
     832:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
     836:	699c      	ldr	r4, [r3, #24]
     838:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
     83c:	47a0      	blx	r4
	ret = gpio_add_callback(gpio, cb);
	
	ret = gpio_pin_interrupt_configure_dt(spec, GPIO_INT_EDGE_BOTH);
	if (ret < 0) {
     83e:	2800      	cmp	r0, #0
     840:	da15      	bge.n	86e <__z_interrupt_stack_SIZEOF+0x2e>
		LOG_ERR("Failed to configure interrupt for port %s pin %u, "
     842:	466c      	mov	r4, sp
     844:	b08a      	sub	sp, #40	; 0x28
     846:	682b      	ldr	r3, [r5, #0]
     848:	466a      	mov	r2, sp
     84a:	4911      	ldr	r1, [pc, #68]	; (890 <__z_interrupt_stack_SIZEOF+0x50>)
     84c:	e9c2 1305 	strd	r1, r3, [r2, #20]
     850:	f44f 7300 	mov.w	r3, #512	; 0x200
     854:	8493      	strh	r3, [r2, #36]	; 0x24
     856:	4b0b      	ldr	r3, [pc, #44]	; (884 <__z_interrupt_stack_SIZEOF+0x44>)
     858:	e9c2 6007 	strd	r6, r0, [r2, #28]
     85c:	f842 3f10 	str.w	r3, [r2, #16]!
     860:	4806      	ldr	r0, [pc, #24]	; (87c <__z_interrupt_stack_SIZEOF+0x3c>)
     862:	2300      	movs	r3, #0
     864:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
     868:	f001 ffc8 	bl	27fc <z_impl_z_log_msg_static_create>
     86c:	46a5      	mov	sp, r4
		// return ret;
	}

    LOG_DBG("Set up button at %s pin %d", gpio->name, pin);
	// return 0;
}
     86e:	46bd      	mov	sp, r7
     870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     874:	0000ecf8 	.word	0x0000ecf8
     878:	01000003 	.word	0x01000003
     87c:	0000e890 	.word	0x0000e890
     880:	0000ed12 	.word	0x0000ed12
     884:	01000005 	.word	0x01000005
     888:	0000ed40 	.word	0x0000ed40
     88c:	0000c679 	.word	0x0000c679
     890:	0000ed75 	.word	0x0000ed75

00000894 <init_buttons>:
bool init_buttons(void) {
     894:	b510      	push	{r4, lr}
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     896:	2201      	movs	r2, #1
    configure_callback(&mouse_one, button_callback, &callbacks[0]);
     898:	4c0f      	ldr	r4, [pc, #60]	; (8d8 <init_buttons+0x44>)
     89a:	4810      	ldr	r0, [pc, #64]	; (8dc <init_buttons+0x48>)
     89c:	4611      	mov	r1, r2
     89e:	f00d fc9c 	bl	e1da <z_impl_k_sem_init>
     8a2:	4621      	mov	r1, r4
     8a4:	480e      	ldr	r0, [pc, #56]	; (8e0 <init_buttons+0x4c>)
     8a6:	f7ff ff45 	bl	734 <configure_callback.constprop.0>
    configure_callback(&mouse_two, button_callback, &callbacks[1]);
     8aa:	f104 010c 	add.w	r1, r4, #12
     8ae:	480d      	ldr	r0, [pc, #52]	; (8e4 <init_buttons+0x50>)
     8b0:	f7ff ff40 	bl	734 <configure_callback.constprop.0>
    configure_callback(&mouse_three, button_callback, &callbacks[2]);
     8b4:	f104 0118 	add.w	r1, r4, #24
     8b8:	480b      	ldr	r0, [pc, #44]	; (8e8 <init_buttons+0x54>)
     8ba:	f7ff ff3b 	bl	734 <configure_callback.constprop.0>
    configure_callback(&mouse_four, button_callback, &callbacks[3]);
     8be:	f104 0124 	add.w	r1, r4, #36	; 0x24
     8c2:	480a      	ldr	r0, [pc, #40]	; (8ec <init_buttons+0x58>)
     8c4:	f7ff ff36 	bl	734 <configure_callback.constprop.0>
    configure_callback(&mouse_five, button_callback, &callbacks[4]);
     8c8:	4809      	ldr	r0, [pc, #36]	; (8f0 <init_buttons+0x5c>)
     8ca:	f104 0130 	add.w	r1, r4, #48	; 0x30
     8ce:	f7ff ff31 	bl	734 <configure_callback.constprop.0>
}
     8d2:	2001      	movs	r0, #1
     8d4:	bd10      	pop	{r4, pc}
     8d6:	bf00      	nop
     8d8:	20000c30 	.word	0x20000c30
     8dc:	20000c6c 	.word	0x20000c6c
     8e0:	0000e9b8 	.word	0x0000e9b8
     8e4:	0000e9b0 	.word	0x0000e9b0
     8e8:	0000e9a8 	.word	0x0000e9a8
     8ec:	0000e9a0 	.word	0x0000e9a0
     8f0:	0000e998 	.word	0x0000e998

000008f4 <fetch_buttons>:

void fetch_buttons(uint8_t* button_array) {
     8f4:	b510      	push	{r4, lr}
     8f6:	4604      	mov	r4, r0
    button_array[0] = gpio_pin_get_dt(&mouse_one);
     8f8:	480a      	ldr	r0, [pc, #40]	; (924 <fetch_buttons+0x30>)
     8fa:	f00b feb9 	bl	c670 <gpio_pin_get_dt>
     8fe:	7020      	strb	r0, [r4, #0]
    button_array[1] = gpio_pin_get_dt(&mouse_two);
     900:	4809      	ldr	r0, [pc, #36]	; (928 <fetch_buttons+0x34>)
     902:	f00b feb5 	bl	c670 <gpio_pin_get_dt>
     906:	7060      	strb	r0, [r4, #1]
    button_array[2] = gpio_pin_get_dt(&mouse_three);
     908:	4808      	ldr	r0, [pc, #32]	; (92c <fetch_buttons+0x38>)
     90a:	f00b feb1 	bl	c670 <gpio_pin_get_dt>
     90e:	70a0      	strb	r0, [r4, #2]
    button_array[3] = gpio_pin_get_dt(&mouse_four);
     910:	4807      	ldr	r0, [pc, #28]	; (930 <fetch_buttons+0x3c>)
     912:	f00b fead 	bl	c670 <gpio_pin_get_dt>
     916:	70e0      	strb	r0, [r4, #3]
    button_array[4] = gpio_pin_get_dt(&mouse_five);
     918:	4806      	ldr	r0, [pc, #24]	; (934 <fetch_buttons+0x40>)
     91a:	f00b fea9 	bl	c670 <gpio_pin_get_dt>
     91e:	7120      	strb	r0, [r4, #4]
}
     920:	bd10      	pop	{r4, pc}
     922:	bf00      	nop
     924:	0000e9b8 	.word	0x0000e9b8
     928:	0000e9b0 	.word	0x0000e9b0
     92c:	0000e9a8 	.word	0x0000e9a8
     930:	0000e9a0 	.word	0x0000e9a0
     934:	0000e998 	.word	0x0000e998

00000938 <main>:
#include <zephyr/sys/byteorder.h>
#include <zephyr/logging/log.h>

LOG_MODULE_REGISTER(main, CONFIG_LOG_DEFAULT_LEVEL);

void main(void) {
     938:	b510      	push	{r4, lr}
     93a:	b086      	sub	sp, #24
    LOG_INF("Starting mouse");
     93c:	4b10      	ldr	r3, [pc, #64]	; (980 <main+0x48>)
     93e:	9305      	str	r3, [sp, #20]
     940:	2402      	movs	r4, #2
     942:	9404      	str	r4, [sp, #16]
     944:	2300      	movs	r3, #0
     946:	aa04      	add	r2, sp, #16
     948:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     94c:	480d      	ldr	r0, [pc, #52]	; (984 <main+0x4c>)
     94e:	f001 ff55 	bl	27fc <z_impl_z_log_msg_static_create>
    init_mouse();
     952:	f000 f8f1 	bl	b38 <init_mouse>
    LOG_INF("Mouse Initialized");
     956:	4b0c      	ldr	r3, [pc, #48]	; (988 <main+0x50>)
     958:	e9cd 4304 	strd	r4, r3, [sp, #16]
     95c:	2300      	movs	r3, #0
     95e:	aa04      	add	r2, sp, #16
     960:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     964:	4807      	ldr	r0, [pc, #28]	; (984 <main+0x4c>)
     966:	f001 ff49 	bl	27fc <z_impl_z_log_msg_static_create>
    set_wireless(true);
     96a:	2001      	movs	r0, #1
     96c:	f000 f966 	bl	c3c <set_wireless>
	return z_impl_k_sleep(timeout);
     970:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     974:	2100      	movs	r1, #0
     976:	f00b fb87 	bl	c088 <z_impl_k_sleep>
    k_sleep(K_MSEC(1000));
    for (;;) {
        handle_mouse_transmission();
     97a:	f000 f965 	bl	c48 <handle_mouse_transmission>
    for (;;) {
     97e:	e7fc      	b.n	97a <main+0x42>
     980:	0000edb9 	.word	0x0000edb9
     984:	0000e8d0 	.word	0x0000e8d0
     988:	0000edc8 	.word	0x0000edc8

0000098c <sensor_sample_fetch.constprop.0>:
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
     98c:	4802      	ldr	r0, [pc, #8]	; (998 <sensor_sample_fetch.constprop.0+0xc>)
     98e:	6883      	ldr	r3, [r0, #8]
     990:	2139      	movs	r1, #57	; 0x39
     992:	68db      	ldr	r3, [r3, #12]
     994:	4718      	bx	r3
     996:	bf00      	nop
     998:	0000e808 	.word	0x0000e808

0000099c <sensor_channel_get.constprop.0.isra.0>:


extern int z_impl_sensor_channel_get(const struct device * dev, enum sensor_channel chan, struct sensor_value * val);

__pinned_func
static inline int sensor_channel_get(const struct device * dev, enum sensor_channel chan, struct sensor_value * val)
     99c:	b410      	push	{r4}
     99e:	4603      	mov	r3, r0
     9a0:	460a      	mov	r2, r1
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
     9a2:	4803      	ldr	r0, [pc, #12]	; (9b0 <sensor_channel_get.constprop.0.isra.0+0x14>)
     9a4:	6881      	ldr	r1, [r0, #8]
     9a6:	690c      	ldr	r4, [r1, #16]
     9a8:	4619      	mov	r1, r3
     9aa:	4623      	mov	r3, r4
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_SENSOR_CHANNEL_GET);
	}
#endif
	compiler_barrier();
	return z_impl_sensor_channel_get(dev, chan, val);
}
     9ac:	bc10      	pop	{r4}
     9ae:	4718      	bx	r3
     9b0:	0000e808 	.word	0x0000e808

000009b4 <is_pmw3360_ready>:
     9b4:	4801      	ldr	r0, [pc, #4]	; (9bc <is_pmw3360_ready+0x8>)
     9b6:	f00d bb1e 	b.w	dff6 <z_device_is_ready>
     9ba:	bf00      	nop
     9bc:	0000e808 	.word	0x0000e808

000009c0 <set_cpi>:

bool is_pmw3360_ready(void) {
    return device_is_ready(device);
}

bool set_cpi(uint16_t cpi) {
     9c0:	b513      	push	{r0, r1, r4, lr}
    const struct sensor_value val = {
     9c2:	2300      	movs	r3, #0
     9c4:	9000      	str	r0, [sp, #0]
     9c6:	9301      	str	r3, [sp, #4]
	const struct sensor_driver_api *api =
     9c8:	4807      	ldr	r0, [pc, #28]	; (9e8 <set_cpi+0x28>)
	if (api->attr_set == NULL) {
     9ca:	6883      	ldr	r3, [r0, #8]
     9cc:	681c      	ldr	r4, [r3, #0]
     9ce:	b144      	cbz	r4, 9e2 <set_cpi+0x22>
	return api->attr_set(dev, chan, attr, val);
     9d0:	466b      	mov	r3, sp
     9d2:	220f      	movs	r2, #15
     9d4:	2139      	movs	r1, #57	; 0x39
     9d6:	47a0      	blx	r4
        .val2 = 0,
    };

    int err = sensor_attr_set(device, SENSOR_CHAN_ALL, PMW3360_ATTR_CPI, &val);
    return err == 0;
}
     9d8:	fab0 f080 	clz	r0, r0
     9dc:	0940      	lsrs	r0, r0, #5
     9de:	b002      	add	sp, #8
     9e0:	bd10      	pop	{r4, pc}
		return -ENOSYS;
     9e2:	f06f 0057 	mvn.w	r0, #87	; 0x57
     9e6:	e7f7      	b.n	9d8 <set_cpi+0x18>
     9e8:	0000e808 	.word	0x0000e808

000009ec <get_cpi>:

uint16_t get_cpi(void) {
     9ec:	b590      	push	{r4, r7, lr}
     9ee:	b083      	sub	sp, #12
     9f0:	af00      	add	r7, sp, #0
    struct sensor_value cpi;
    int err = sensor_sample_fetch(device);
     9f2:	f7ff ffcb 	bl	98c <sensor_sample_fetch.constprop.0>
    
    if (err) {
     9f6:	b1a0      	cbz	r0, a22 <get_cpi+0x36>
        LOG_ERR("Failed to fetch sensor sample: %d", err);
     9f8:	466c      	mov	r4, sp
     9fa:	b088      	sub	sp, #32
     9fc:	466a      	mov	r2, sp
     9fe:	4b0c      	ldr	r3, [pc, #48]	; (a30 <get_cpi+0x44>)
     a00:	e9c2 3005 	strd	r3, r0, [r2, #20]
     a04:	2303      	movs	r3, #3
     a06:	f842 3f10 	str.w	r3, [r2, #16]!
     a0a:	480a      	ldr	r0, [pc, #40]	; (a34 <get_cpi+0x48>)
     a0c:	2300      	movs	r3, #0
     a0e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
     a12:	f001 fef3 	bl	27fc <z_impl_z_log_msg_static_create>
        return -1;
     a16:	f64f 70ff 	movw	r0, #65535	; 0xffff
     a1a:	46a5      	mov	sp, r4

    sensor_channel_get(device, PMW3360_ATTR_CPI, &cpi);
    LOG_DBG("Sensor CPI.val1: %u", cpi.val1);
    LOG_DBG("Sensor CPI.val2: %u", cpi.val2);
    return cpi.val1;
}
     a1c:	370c      	adds	r7, #12
     a1e:	46bd      	mov	sp, r7
     a20:	bd90      	pop	{r4, r7, pc}
    sensor_channel_get(device, PMW3360_ATTR_CPI, &cpi);
     a22:	200f      	movs	r0, #15
     a24:	4639      	mov	r1, r7
     a26:	f7ff ffb9 	bl	99c <sensor_channel_get.constprop.0.isra.0>
    return cpi.val1;
     a2a:	8838      	ldrh	r0, [r7, #0]
     a2c:	e7f6      	b.n	a1c <get_cpi+0x30>
     a2e:	bf00      	nop
     a30:	0000eddf 	.word	0x0000eddf
     a34:	0000e8d8 	.word	0x0000e8d8

00000a38 <configure_pmw3360>:
    motion_data.dx += new_motion_data.dx;
    motion_data.dy += new_motion_data.dy;
    k_mutex_unlock(&motion_mutex);
}

bool configure_pmw3360(void) {
     a38:	b5b0      	push	{r4, r5, r7, lr}
     a3a:	b086      	sub	sp, #24
     a3c:	af00      	add	r7, sp, #0
    if (sensor_sample_fetch(device) == -EBUSY) {
     a3e:	f7ff ffa5 	bl	98c <sensor_sample_fetch.constprop.0>
     a42:	3010      	adds	r0, #16
     a44:	d011      	beq.n	a6a <configure_pmw3360+0x32>
        return false;
    }

    if (!set_cpi(800)) {
     a46:	f44f 7048 	mov.w	r0, #800	; 0x320
     a4a:	f7ff ffb9 	bl	9c0 <set_cpi>
     a4e:	4604      	mov	r4, r0
     a50:	b980      	cbnz	r0, a74 <configure_pmw3360+0x3c>
        LOG_ERR("Failed to set CPI");
     a52:	4b18      	ldr	r3, [pc, #96]	; (ab4 <configure_pmw3360+0x7c>)
     a54:	617b      	str	r3, [r7, #20]
     a56:	2302      	movs	r3, #2
     a58:	613b      	str	r3, [r7, #16]
     a5a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     a5e:	4603      	mov	r3, r0
     a60:	f107 0210 	add.w	r2, r7, #16
     a64:	4814      	ldr	r0, [pc, #80]	; (ab8 <configure_pmw3360+0x80>)
     a66:	f001 fec9 	bl	27fc <z_impl_z_log_msg_static_create>
        return false;
     a6a:	2400      	movs	r4, #0

    LOG_INF("CPI is now %u", cpi);
    LOG_INF("Enabling Interrupts");
    // enable_data_interrupt();
    return true;
}
     a6c:	4620      	mov	r0, r4
     a6e:	3718      	adds	r7, #24
     a70:	46bd      	mov	sp, r7
     a72:	bdb0      	pop	{r4, r5, r7, pc}
    uint16_t cpi = get_cpi();
     a74:	f7ff ffba 	bl	9ec <get_cpi>
    LOG_INF("CPI is now %u", cpi);
     a78:	466d      	mov	r5, sp
     a7a:	b088      	sub	sp, #32
     a7c:	466a      	mov	r2, sp
     a7e:	4b0f      	ldr	r3, [pc, #60]	; (abc <configure_pmw3360+0x84>)
     a80:	e9c2 3005 	strd	r3, r0, [r2, #20]
     a84:	2303      	movs	r3, #3
     a86:	f842 3f10 	str.w	r3, [r2, #16]!
     a8a:	480b      	ldr	r0, [pc, #44]	; (ab8 <configure_pmw3360+0x80>)
     a8c:	2300      	movs	r3, #0
     a8e:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
     a92:	f001 feb3 	bl	27fc <z_impl_z_log_msg_static_create>
     a96:	46ad      	mov	sp, r5
    LOG_INF("Enabling Interrupts");
     a98:	4b09      	ldr	r3, [pc, #36]	; (ac0 <configure_pmw3360+0x88>)
     a9a:	617b      	str	r3, [r7, #20]
     a9c:	2302      	movs	r3, #2
     a9e:	613b      	str	r3, [r7, #16]
     aa0:	4805      	ldr	r0, [pc, #20]	; (ab8 <configure_pmw3360+0x80>)
     aa2:	2300      	movs	r3, #0
     aa4:	f107 0210 	add.w	r2, r7, #16
     aa8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     aac:	f001 fea6 	bl	27fc <z_impl_z_log_msg_static_create>
    return true;
     ab0:	e7dc      	b.n	a6c <configure_pmw3360+0x34>
     ab2:	bf00      	nop
     ab4:	0000ee01 	.word	0x0000ee01
     ab8:	0000e8d8 	.word	0x0000e8d8
     abc:	0000ee13 	.word	0x0000ee13
     ac0:	0000ee21 	.word	0x0000ee21

00000ac4 <read_motion>:

motion_info_t read_motion(void) {
     ac4:	b590      	push	{r4, r7, lr}
     ac6:	b087      	sub	sp, #28
     ac8:	af00      	add	r7, sp, #0
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
     aca:	f00d f806 	bl	dada <sys_clock_cycle_get_32>
    struct sensor_value dx, dy;
    uint32_t start_time = get_timestamp();

    int err = sensor_sample_fetch(device);
     ace:	f7ff ff5d 	bl	98c <sensor_sample_fetch.constprop.0>

    if (err) {
     ad2:	b1d8      	cbz	r0, b0c <read_motion+0x48>
        LOG_ERR("Failed to fetch sensor sample: %d", err);
     ad4:	466c      	mov	r4, sp
     ad6:	b088      	sub	sp, #32
     ad8:	466a      	mov	r2, sp
     ada:	4b15      	ldr	r3, [pc, #84]	; (b30 <read_motion+0x6c>)
     adc:	e9c2 3005 	strd	r3, r0, [r2, #20]
     ae0:	2303      	movs	r3, #3
     ae2:	f842 3f10 	str.w	r3, [r2, #16]!
     ae6:	2300      	movs	r3, #0
     ae8:	4812      	ldr	r0, [pc, #72]	; (b34 <read_motion+0x70>)
     aea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
     aee:	f001 fe85 	bl	27fc <z_impl_z_log_msg_static_create>
     af2:	2200      	movs	r2, #0
     af4:	46a5      	mov	sp, r4
        return (motion_info_t){ .dx = 0, .dy = 0 };
     af6:	4613      	mov	r3, r2
    // dy is negative due to sensor
    motion_info_t info;
    info.dx = dx.val1;
    info.dy = -dy.val1;
    return info;
}
     af8:	b292      	uxth	r2, r2
     afa:	2000      	movs	r0, #0
     afc:	f362 000f 	bfi	r0, r2, #0, #16
     b00:	b29b      	uxth	r3, r3
     b02:	f363 401f 	bfi	r0, r3, #16, #16
     b06:	371c      	adds	r7, #28
     b08:	46bd      	mov	sp, r7
     b0a:	bd90      	pop	{r4, r7, pc}
    sensor_channel_get(device, SENSOR_CHAN_POS_DX, &dx);
     b0c:	f107 0108 	add.w	r1, r7, #8
     b10:	2023      	movs	r0, #35	; 0x23
     b12:	f7ff ff43 	bl	99c <sensor_channel_get.constprop.0.isra.0>
    sensor_channel_get(device, SENSOR_CHAN_POS_DY, &dy);
     b16:	f107 0110 	add.w	r1, r7, #16
     b1a:	2024      	movs	r0, #36	; 0x24
     b1c:	f7ff ff3e 	bl	99c <sensor_channel_get.constprop.0.isra.0>
     b20:	f00c ffdb 	bl	dada <sys_clock_cycle_get_32>
    info.dy = -dy.val1;
     b24:	693b      	ldr	r3, [r7, #16]
    info.dx = dx.val1;
     b26:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
    info.dy = -dy.val1;
     b2a:	425b      	negs	r3, r3
     b2c:	b21b      	sxth	r3, r3
    return info;
     b2e:	e7e3      	b.n	af8 <read_motion+0x34>
     b30:	0000eddf 	.word	0x0000eddf
     b34:	0000e8d8 	.word	0x0000e8d8

00000b38 <init_mouse>:
K_FIFO_DEFINE(mouse_fifo);

static mouse_t mouse_data;
static mouse_config_t mouse_cfg;

int init_mouse() {
     b38:	b510      	push	{r4, lr}
     b3a:	b086      	sub	sp, #24
    while (!is_pmw3360_ready()) {
     b3c:	f7ff ff3a 	bl	9b4 <is_pmw3360_ready>
     b40:	2800      	cmp	r0, #0
     b42:	d04e      	beq.n	be2 <init_mouse+0xaa>
        LOG_DBG("PMW3360 not ready");
        k_sleep(K_MSEC(1));
    }
    LOG_INF("PMW3360 is ready");
     b44:	4b36      	ldr	r3, [pc, #216]	; (c20 <init_mouse+0xe8>)
     b46:	9305      	str	r3, [sp, #20]
     b48:	2302      	movs	r3, #2
     b4a:	9304      	str	r3, [sp, #16]
     b4c:	4835      	ldr	r0, [pc, #212]	; (c24 <init_mouse+0xec>)
     b4e:	2300      	movs	r3, #0
     b50:	aa04      	add	r2, sp, #16
     b52:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     b56:	f001 fe51 	bl	27fc <z_impl_z_log_msg_static_create>

    while (!init_buttons()) {
     b5a:	f7ff fe9b 	bl	894 <init_buttons>
     b5e:	2800      	cmp	r0, #0
     b60:	d044      	beq.n	bec <init_mouse+0xb4>
        LOG_DBG("Buttons not ready");
        k_sleep(K_MSEC(1));
    }
    LOG_INF("Buttons are ready");
     b62:	4b31      	ldr	r3, [pc, #196]	; (c28 <init_mouse+0xf0>)
     b64:	9305      	str	r3, [sp, #20]
     b66:	2302      	movs	r3, #2
     b68:	9304      	str	r3, [sp, #16]
     b6a:	482e      	ldr	r0, [pc, #184]	; (c24 <init_mouse+0xec>)
     b6c:	2300      	movs	r3, #0
     b6e:	aa04      	add	r2, sp, #16
     b70:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     b74:	f001 fe42 	bl	27fc <z_impl_z_log_msg_static_create>

    while (init_wheel() != 0) {
     b78:	f000 fae8 	bl	114c <init_wheel>
     b7c:	4603      	mov	r3, r0
     b7e:	2800      	cmp	r0, #0
     b80:	d139      	bne.n	bf6 <init_mouse+0xbe>
        LOG_DBG("Wheel not ready");
        k_sleep(K_MSEC(1));
    }
    LOG_INF("Wheel Encoder is ready");
     b82:	4a2a      	ldr	r2, [pc, #168]	; (c2c <init_mouse+0xf4>)
     b84:	9205      	str	r2, [sp, #20]
     b86:	2202      	movs	r2, #2
     b88:	9204      	str	r2, [sp, #16]
     b8a:	4826      	ldr	r0, [pc, #152]	; (c24 <init_mouse+0xec>)
     b8c:	aa04      	add	r2, sp, #16
     b8e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     b92:	f001 fe33 	bl	27fc <z_impl_z_log_msg_static_create>
    while (!configure_pmw3360()) {
     b96:	f7ff ff4f 	bl	a38 <configure_pmw3360>
     b9a:	b388      	cbz	r0, c00 <init_mouse+0xc8>
        LOG_DBG("Configuring PMW3360 is not ready");
        k_sleep(K_MSEC(1));
    }

    while(init_usb() != 0) {
     b9c:	f000 fa56 	bl	104c <init_usb>
     ba0:	4603      	mov	r3, r0
     ba2:	bb90      	cbnz	r0, c0a <init_mouse+0xd2>
        LOG_DBG("Configuring USB is not ready");
        k_sleep(K_MSEC(1));
    }
    LOG_INF("USB is ready");
     ba4:	4a22      	ldr	r2, [pc, #136]	; (c30 <init_mouse+0xf8>)
     ba6:	9205      	str	r2, [sp, #20]
     ba8:	2202      	movs	r2, #2
     baa:	9204      	str	r2, [sp, #16]
     bac:	481d      	ldr	r0, [pc, #116]	; (c24 <init_mouse+0xec>)
     bae:	aa04      	add	r2, sp, #16
     bb0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     bb4:	f001 fe22 	bl	27fc <z_impl_z_log_msg_static_create>
    while (init_transceiver() != 0) {
     bb8:	f000 f994 	bl	ee4 <init_transceiver>
     bbc:	4604      	mov	r4, r0
     bbe:	bb48      	cbnz	r0, c14 <init_mouse+0xdc>
        LOG_DBG("Configuring ESB is not ready");
        k_sleep(K_MSEC(1));
    }
    LOG_INF("ESB is ready");
     bc0:	4b1c      	ldr	r3, [pc, #112]	; (c34 <init_mouse+0xfc>)
     bc2:	9305      	str	r3, [sp, #20]
     bc4:	2302      	movs	r3, #2
     bc6:	9304      	str	r3, [sp, #16]
     bc8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     bcc:	4603      	mov	r3, r0
     bce:	aa04      	add	r2, sp, #16
     bd0:	4814      	ldr	r0, [pc, #80]	; (c24 <init_mouse+0xec>)
     bd2:	f001 fe13 	bl	27fc <z_impl_z_log_msg_static_create>
	z_impl_k_queue_init(queue);
     bd6:	4818      	ldr	r0, [pc, #96]	; (c38 <init_mouse+0x100>)
     bd8:	f00d faec 	bl	e1b4 <z_impl_k_queue_init>

    k_fifo_init(&mouse_fifo);
    return 0;
}
     bdc:	4620      	mov	r0, r4
     bde:	b006      	add	sp, #24
     be0:	bd10      	pop	{r4, pc}
        k_sleep(K_MSEC(1));
     be2:	2021      	movs	r0, #33	; 0x21
     be4:	2100      	movs	r1, #0
     be6:	f00b fd48 	bl	c67a <k_sleep.constprop.0.isra.0>
     bea:	e7a7      	b.n	b3c <init_mouse+0x4>
        k_sleep(K_MSEC(1));
     bec:	2021      	movs	r0, #33	; 0x21
     bee:	2100      	movs	r1, #0
     bf0:	f00b fd43 	bl	c67a <k_sleep.constprop.0.isra.0>
     bf4:	e7b1      	b.n	b5a <init_mouse+0x22>
        k_sleep(K_MSEC(1));
     bf6:	2021      	movs	r0, #33	; 0x21
     bf8:	2100      	movs	r1, #0
     bfa:	f00b fd3e 	bl	c67a <k_sleep.constprop.0.isra.0>
     bfe:	e7bb      	b.n	b78 <init_mouse+0x40>
        k_sleep(K_MSEC(1));
     c00:	2021      	movs	r0, #33	; 0x21
     c02:	2100      	movs	r1, #0
     c04:	f00b fd39 	bl	c67a <k_sleep.constprop.0.isra.0>
     c08:	e7c5      	b.n	b96 <init_mouse+0x5e>
        k_sleep(K_MSEC(1));
     c0a:	2021      	movs	r0, #33	; 0x21
     c0c:	2100      	movs	r1, #0
     c0e:	f00b fd34 	bl	c67a <k_sleep.constprop.0.isra.0>
     c12:	e7c3      	b.n	b9c <init_mouse+0x64>
        k_sleep(K_MSEC(1));
     c14:	2021      	movs	r0, #33	; 0x21
     c16:	2100      	movs	r1, #0
     c18:	f00b fd2f 	bl	c67a <k_sleep.constprop.0.isra.0>
     c1c:	e7cc      	b.n	bb8 <init_mouse+0x80>
     c1e:	bf00      	nop
     c20:	0000ee43 	.word	0x0000ee43
     c24:	0000e8e0 	.word	0x0000e8e0
     c28:	0000ee54 	.word	0x0000ee54
     c2c:	0000ee66 	.word	0x0000ee66
     c30:	0000ee7d 	.word	0x0000ee7d
     c34:	0000ee8a 	.word	0x0000ee8a
     c38:	200003bc 	.word	0x200003bc

00000c3c <set_wireless>:

void set_wireless(bool wireless) {
    mouse_cfg.is_wireless = wireless;
     c3c:	4b01      	ldr	r3, [pc, #4]	; (c44 <set_wireless+0x8>)
     c3e:	7098      	strb	r0, [r3, #2]
}
     c40:	4770      	bx	lr
     c42:	bf00      	nop
     c44:	20001cd4 	.word	0x20001cd4

00000c48 <handle_mouse_transmission>:
void update_mouse(mouse_t* mouse) {
    mouse->wheel_data = fetch_wheel_data();
    mouse->motion_info = read_motion();
    fetch_buttons(&(mouse->button_states));
}
void handle_mouse_transmission(void) {
     c48:	b5f0      	push	{r4, r5, r6, r7, lr}
     c4a:	b08b      	sub	sp, #44	; 0x2c
    static message_t messages[2];
    static int current_message_index = 0;

    mouse_t new_data;
    update_mouse(&new_data);
     c4c:	ac01      	add	r4, sp, #4
     c4e:	4620      	mov	r0, r4
     c50:	f00b fd15 	bl	c67e <update_mouse>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
     c54:	4d33      	ldr	r5, [pc, #204]	; (d24 <handle_mouse_transmission+0xdc>)

    if (!k_fifo_is_empty(&mouse_fifo)) {
     c56:	682b      	ldr	r3, [r5, #0]
     c58:	2b00      	cmp	r3, #0
     c5a:	d03b      	beq.n	cd4 <handle_mouse_transmission+0x8c>
	return z_impl_k_queue_get(queue, timeout);
     c5c:	2200      	movs	r2, #0
     c5e:	2300      	movs	r3, #0
     c60:	4628      	mov	r0, r5
     c62:	f00a fd37 	bl	b6d4 <z_impl_k_queue_get>
        message_t *prev_message = k_fifo_get(&mouse_fifo, K_NO_WAIT);
        prev_message->data.motion_info.dx += new_data.motion_info.dx;
     c66:	f8bd 2006 	ldrh.w	r2, [sp, #6]
     c6a:	88c3      	ldrh	r3, [r0, #6]
     c6c:	4413      	add	r3, r2
     c6e:	80c3      	strh	r3, [r0, #6]
        prev_message->data.motion_info.dy += new_data.motion_info.dy;
     c70:	f8bd 2008 	ldrh.w	r2, [sp, #8]
     c74:	8903      	ldrh	r3, [r0, #8]
     c76:	4413      	add	r3, r2
     c78:	8103      	strh	r3, [r0, #8]
        prev_message->data.wheel_data.rotation += new_data.wheel_data.rotation;
     c7a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     c7e:	8883      	ldrh	r3, [r0, #4]
     c80:	4413      	add	r3, r2
     c82:	4601      	mov	r1, r0
     c84:	8083      	strh	r3, [r0, #4]
        k_fifo_put(&mouse_fifo, prev_message);
     c86:	4628      	mov	r0, r5
     c88:	f00d fa9c 	bl	e1c4 <k_queue_append>
    } else {
        messages[current_message_index].data = new_data;
        k_fifo_put(&mouse_fifo, &messages[current_message_index]);
        current_message_index = (current_message_index + 1) % 2;
    }
    bool line_busy = mouse_cfg.is_wireless ? esb_line_busy() : usb_line_busy();
     c8c:	4e26      	ldr	r6, [pc, #152]	; (d28 <handle_mouse_transmission+0xe0>)
     c8e:	78b3      	ldrb	r3, [r6, #2]
     c90:	2b00      	cmp	r3, #0
     c92:	d035      	beq.n	d00 <handle_mouse_transmission+0xb8>
     c94:	f000 f9c6 	bl	1024 <esb_line_busy>
     c98:	4604      	mov	r4, r0
    if (!line_busy && !k_fifo_is_empty(&mouse_fifo)) {
     c9a:	b9c8      	cbnz	r0, cd0 <handle_mouse_transmission+0x88>
     c9c:	682b      	ldr	r3, [r5, #0]
     c9e:	b1bb      	cbz	r3, cd0 <handle_mouse_transmission+0x88>
     ca0:	2200      	movs	r2, #0
     ca2:	2300      	movs	r3, #0
     ca4:	481f      	ldr	r0, [pc, #124]	; (d24 <handle_mouse_transmission+0xdc>)
     ca6:	f00a fd15 	bl	b6d4 <z_impl_k_queue_get>
        message_t *message_to_send = k_fifo_get(&mouse_fifo, K_NO_WAIT);
        if (mouse_cfg.is_wireless) {
     caa:	78b2      	ldrb	r2, [r6, #2]
     cac:	2302      	movs	r3, #2
     cae:	1d05      	adds	r5, r0, #4
     cb0:	b34a      	cbz	r2, d06 <handle_mouse_transmission+0xbe>
            LOG_INF("Sending ESB");
     cb2:	4a1e      	ldr	r2, [pc, #120]	; (d2c <handle_mouse_transmission+0xe4>)
     cb4:	e9cd 3208 	strd	r3, r2, [sp, #32]
     cb8:	481d      	ldr	r0, [pc, #116]	; (d30 <handle_mouse_transmission+0xe8>)
     cba:	4623      	mov	r3, r4
     cbc:	aa08      	add	r2, sp, #32
     cbe:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     cc2:	f001 fd9b 	bl	27fc <z_impl_z_log_msg_static_create>
            esb_create_message(&message_to_send->data);
     cc6:	4628      	mov	r0, r5
     cc8:	f000 f952 	bl	f70 <esb_create_message>
            write_message();
     ccc:	f000 f97e 	bl	fcc <write_message>
        } else {
            LOG_INF("Sending USB");
            hid_write(&message_to_send->data);
        }
    }
}
     cd0:	b00b      	add	sp, #44	; 0x2c
     cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        messages[current_message_index].data = new_data;
     cd4:	4e17      	ldr	r6, [pc, #92]	; (d34 <handle_mouse_transmission+0xec>)
     cd6:	4b18      	ldr	r3, [pc, #96]	; (d38 <handle_mouse_transmission+0xf0>)
     cd8:	6832      	ldr	r2, [r6, #0]
     cda:	eb03 1302 	add.w	r3, r3, r2, lsl #4
     cde:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
     ce2:	1d1f      	adds	r7, r3, #4
     ce4:	e887 0007 	stmia.w	r7, {r0, r1, r2}
        k_fifo_put(&mouse_fifo, &messages[current_message_index]);
     ce8:	4619      	mov	r1, r3
     cea:	4628      	mov	r0, r5
     cec:	f00d fa6a 	bl	e1c4 <k_queue_append>
        current_message_index = (current_message_index + 1) % 2;
     cf0:	6833      	ldr	r3, [r6, #0]
     cf2:	3301      	adds	r3, #1
     cf4:	f003 0301 	and.w	r3, r3, #1
     cf8:	bf48      	it	mi
     cfa:	425b      	negmi	r3, r3
     cfc:	6033      	str	r3, [r6, #0]
     cfe:	e7c5      	b.n	c8c <handle_mouse_transmission+0x44>
    bool line_busy = mouse_cfg.is_wireless ? esb_line_busy() : usb_line_busy();
     d00:	f000 fa1e 	bl	1140 <usb_line_busy>
     d04:	e7c8      	b.n	c98 <handle_mouse_transmission+0x50>
            LOG_INF("Sending USB");
     d06:	4a0d      	ldr	r2, [pc, #52]	; (d3c <handle_mouse_transmission+0xf4>)
     d08:	e9cd 3208 	strd	r3, r2, [sp, #32]
     d0c:	4808      	ldr	r0, [pc, #32]	; (d30 <handle_mouse_transmission+0xe8>)
     d0e:	4623      	mov	r3, r4
     d10:	aa08      	add	r2, sp, #32
     d12:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     d16:	f001 fd71 	bl	27fc <z_impl_z_log_msg_static_create>
            hid_write(&message_to_send->data);
     d1a:	4628      	mov	r0, r5
     d1c:	f000 f9da 	bl	10d4 <hid_write>
}
     d20:	e7d6      	b.n	cd0 <handle_mouse_transmission+0x88>
     d22:	bf00      	nop
     d24:	200003bc 	.word	0x200003bc
     d28:	20001cd4 	.word	0x20001cd4
     d2c:	0000ee97 	.word	0x0000ee97
     d30:	0000e8e0 	.word	0x0000e8e0
     d34:	20000c9c 	.word	0x20000c9c
     d38:	20000c7c 	.word	0x20000c7c
     d3c:	0000eea3 	.word	0x0000eea3

00000d40 <event_handler>:
         RADIO_SHORTS_DISABLED_RSSISTOP_Msk)                            
LOG_MODULE_REGISTER(esb_transmitter, CONFIG_LOG_DEFAULT_LEVEL);

static esb_data_t esb_data = INIT_ESB_DATA(0, 0x01, 0x02, 0x03, 0x04, 0x05);

void event_handler(struct esb_evt const *event) {
     d40:	b570      	push	{r4, r5, r6, lr}
    esb_data.ready = true;
     d42:	4c15      	ldr	r4, [pc, #84]	; (d98 <event_handler+0x58>)
     d44:	2301      	movs	r3, #1
     d46:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
    switch(event -> evt_id) {
     d4a:	7803      	ldrb	r3, [r0, #0]
     d4c:	2b01      	cmp	r3, #1
void event_handler(struct esb_evt const *event) {
     d4e:	b086      	sub	sp, #24
    switch(event -> evt_id) {
     d50:	d01f      	beq.n	d92 <event_handler+0x52>
     d52:	2b02      	cmp	r3, #2
     d54:	d110      	bne.n	d78 <event_handler+0x38>
        case ESB_EVENT_TX_FAILED:
            LOG_INF("TX FAILED EVENT");
            break;
        case ESB_EVENT_RX_RECEIVED:
            while (esb_read_rx_payload(&esb_data.received_message) == 1) {
                LOG_INF("Packet received");
     d56:	4d11      	ldr	r5, [pc, #68]	; (d9c <event_handler+0x5c>)
     d58:	4e11      	ldr	r6, [pc, #68]	; (da0 <event_handler+0x60>)
            while (esb_read_rx_payload(&esb_data.received_message) == 1) {
     d5a:	4620      	mov	r0, r4
     d5c:	f007 f87c 	bl	7e58 <esb_read_rx_payload>
     d60:	2801      	cmp	r0, #1
     d62:	d114      	bne.n	d8e <event_handler+0x4e>
                LOG_INF("Packet received");
     d64:	2302      	movs	r3, #2
     d66:	aa04      	add	r2, sp, #16
     d68:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     d6c:	4630      	mov	r0, r6
     d6e:	9505      	str	r5, [sp, #20]
     d70:	9304      	str	r3, [sp, #16]
     d72:	f00b fc94 	bl	c69e <z_log_msg_static_create.constprop.0>
     d76:	e7f0      	b.n	d5a <event_handler+0x1a>
    switch(event -> evt_id) {
     d78:	b94b      	cbnz	r3, d8e <event_handler+0x4e>
            LOG_INF("TX SUCCESS EVENT");
     d7a:	4b0a      	ldr	r3, [pc, #40]	; (da4 <event_handler+0x64>)
            LOG_INF("TX FAILED EVENT");
     d7c:	9305      	str	r3, [sp, #20]
     d7e:	4808      	ldr	r0, [pc, #32]	; (da0 <event_handler+0x60>)
     d80:	2302      	movs	r3, #2
     d82:	aa04      	add	r2, sp, #16
     d84:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     d88:	9304      	str	r3, [sp, #16]
     d8a:	f00b fc88 	bl	c69e <z_log_msg_static_create.constprop.0>
            }
            break;
    }
}
     d8e:	b006      	add	sp, #24
     d90:	bd70      	pop	{r4, r5, r6, pc}
            LOG_INF("TX FAILED EVENT");
     d92:	4b05      	ldr	r3, [pc, #20]	; (da8 <event_handler+0x68>)
     d94:	e7f2      	b.n	d7c <event_handler+0x3c>
     d96:	bf00      	nop
     d98:	20000158 	.word	0x20000158
     d9c:	0000eed0 	.word	0x0000eed0
     da0:	0000e8b0 	.word	0x0000e8b0
     da4:	0000eeaf 	.word	0x0000eeaf
     da8:	0000eec0 	.word	0x0000eec0

00000dac <clocks_start>:

int clocks_start(void) {
     dac:	b5b0      	push	{r4, r5, r7, lr}
     dae:	b086      	sub	sp, #24
    int res;

    struct onoff_manager *clk_mgr;
    struct onoff_client clk_cli;

    clk_mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
     db0:	2000      	movs	r0, #0
int clocks_start(void) {
     db2:	af00      	add	r7, sp, #0
    clk_mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
     db4:	f005 f8e6 	bl	5f84 <z_nrf_clock_control_get_onoff>
    if (!clk_mgr) {
     db8:	b980      	cbnz	r0, ddc <clocks_start+0x30>
        LOG_ERR("Unable to get the Clock manager");
     dba:	4b1b      	ldr	r3, [pc, #108]	; (e28 <clocks_start+0x7c>)
     dbc:	617b      	str	r3, [r7, #20]
     dbe:	2302      	movs	r3, #2
     dc0:	481a      	ldr	r0, [pc, #104]	; (e2c <clocks_start+0x80>)
     dc2:	613b      	str	r3, [r7, #16]
     dc4:	f107 0210 	add.w	r2, r7, #16
     dc8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
        return -ENXIO;
     dcc:	f06f 0405 	mvn.w	r4, #5
        LOG_ERR("Unable to get the Clock manager");
     dd0:	f00b fc65 	bl	c69e <z_log_msg_static_create.constprop.0>
            return res;
        }
    } while (err);
    LOG_DBG("High Frequency clock started");
    return 0;
}
     dd4:	4620      	mov	r0, r4
     dd6:	3718      	adds	r7, #24
     dd8:	46bd      	mov	sp, r7
     dda:	bdb0      	pop	{r4, r5, r7, pc}
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
     ddc:	2300      	movs	r3, #0
     dde:	607b      	str	r3, [r7, #4]
     de0:	60fb      	str	r3, [r7, #12]
     de2:	2301      	movs	r3, #1
     de4:	60bb      	str	r3, [r7, #8]
    err = onoff_request(clk_mgr, &clk_cli);
     de6:	4639      	mov	r1, r7
     de8:	f00b ff2e 	bl	cc48 <onoff_request>
    if (err < 0) {
     dec:	1e04      	subs	r4, r0, #0
     dee:	da0f      	bge.n	e10 <clocks_start+0x64>
        LOG_ERR("Clock request failed: %d", err);
     df0:	466d      	mov	r5, sp
     df2:	b088      	sub	sp, #32
     df4:	466a      	mov	r2, sp
     df6:	4b0e      	ldr	r3, [pc, #56]	; (e30 <clocks_start+0x84>)
            LOG_ERR("Clock could not be started: %d", res);
     df8:	480c      	ldr	r0, [pc, #48]	; (e2c <clocks_start+0x80>)
     dfa:	e9c2 3405 	strd	r3, r4, [r2, #20]
     dfe:	2303      	movs	r3, #3
     e00:	f842 3f10 	str.w	r3, [r2, #16]!
     e04:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
     e08:	f00b fc49 	bl	c69e <z_log_msg_static_create.constprop.0>
     e0c:	46ad      	mov	sp, r5
            return res;
     e0e:	e7e1      	b.n	dd4 <clocks_start+0x28>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
     e10:	68bb      	ldr	r3, [r7, #8]
	if (sys_notify_get_method(notify) == SYS_NOTIFY_METHOD_COMPLETED) {
     e12:	079b      	lsls	r3, r3, #30
     e14:	d1fc      	bne.n	e10 <clocks_start+0x64>
		*result = notify->result;
     e16:	68fc      	ldr	r4, [r7, #12]
        if (!err && res) {
     e18:	2c00      	cmp	r4, #0
     e1a:	d0db      	beq.n	dd4 <clocks_start+0x28>
            LOG_ERR("Clock could not be started: %d", res);
     e1c:	466d      	mov	r5, sp
     e1e:	b088      	sub	sp, #32
     e20:	466a      	mov	r2, sp
     e22:	4b04      	ldr	r3, [pc, #16]	; (e34 <clocks_start+0x88>)
     e24:	e7e8      	b.n	df8 <clocks_start+0x4c>
     e26:	bf00      	nop
     e28:	0000eee0 	.word	0x0000eee0
     e2c:	0000e8b0 	.word	0x0000e8b0
     e30:	0000ef00 	.word	0x0000ef00
     e34:	0000ef19 	.word	0x0000ef19

00000e38 <init_esb>:

int init_esb(void) {
     e38:	b530      	push	{r4, r5, lr}
    
    int err;
    uint8_t base_addr_0[4] = {0xE7, 0xE7, 0xE7, 0xE7};
    uint8_t base_addr_1[4] = {0xC2, 0xC2, 0xC2, 0xC2};
     e3a:	f04f 32e7 	mov.w	r2, #3890735079	; 0xe7e7e7e7
int init_esb(void) {
     e3e:	b091      	sub	sp, #68	; 0x44
    uint8_t base_addr_1[4] = {0xC2, 0xC2, 0xC2, 0xC2};
     e40:	f04f 33c2 	mov.w	r3, #3267543746	; 0xc2c2c2c2
     e44:	e9cd 2301 	strd	r2, r3, [sp, #4]
    uint8_t addr_prefix[8] = {0xE7, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8};
     e48:	4a1e      	ldr	r2, [pc, #120]	; (ec4 <init_esb+0x8c>)
    struct esb_config config = ESB_DEFAULT_CONFIG;
     e4a:	4d1f      	ldr	r5, [pc, #124]	; (ec8 <init_esb+0x90>)
    uint8_t addr_prefix[8] = {0xE7, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8};
     e4c:	6810      	ldr	r0, [r2, #0]
     e4e:	6851      	ldr	r1, [r2, #4]
     e50:	ab03      	add	r3, sp, #12
     e52:	c303      	stmia	r3!, {r0, r1}
    struct esb_config config = ESB_DEFAULT_CONFIG;
     e54:	461c      	mov	r4, r3
     e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
     e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
     e5a:	682b      	ldr	r3, [r5, #0]
     e5c:	6023      	str	r3, [r4, #0]

    config.protocol = ESB_PROTOCOL_ESB_DPL;
    config.retransmit_delay = 600; //ms
    config.bitrate = ESB_BITRATE_2MBPS;
    config.crc = ESB_CRC_8BIT;
     e5e:	2301      	movs	r3, #1
     e60:	f88d 301d 	strb.w	r3, [sp, #29]
    config.event_handler = event_handler;
     e64:	4b19      	ldr	r3, [pc, #100]	; (ecc <init_esb+0x94>)
     e66:	9306      	str	r3, [sp, #24]
    config.mode = ESB_MODE_PTX;
    config.use_fast_ramp_up = true;
    config.selective_auto_ack = true;

    err = esb_init(&config);
     e68:	a805      	add	r0, sp, #20
    config.selective_auto_ack = true;
     e6a:	f240 1301 	movw	r3, #257	; 0x101
     e6e:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    err = esb_init(&config);
     e72:	f006 fe1d 	bl	7ab0 <esb_init>

    if (err) {
     e76:	4604      	mov	r4, r0
     e78:	b160      	cbz	r0, e94 <init_esb+0x5c>
        LOG_ERR("Error initializing esb");
     e7a:	4b15      	ldr	r3, [pc, #84]	; (ed0 <init_esb+0x98>)
        return err;
    }   

    err = esb_set_prefixes(addr_prefix, ARRAY_SIZE(addr_prefix));
    if (err) {
        LOG_ERR("Error setting address prefix");
     e7c:	930f      	str	r3, [sp, #60]	; 0x3c
     e7e:	4815      	ldr	r0, [pc, #84]	; (ed4 <init_esb+0x9c>)
     e80:	2302      	movs	r3, #2
     e82:	aa0e      	add	r2, sp, #56	; 0x38
     e84:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     e88:	930e      	str	r3, [sp, #56]	; 0x38
     e8a:	f00b fc08 	bl	c69e <z_log_msg_static_create.constprop.0>
        return err;
    }   

    return 0;
}
     e8e:	4620      	mov	r0, r4
     e90:	b011      	add	sp, #68	; 0x44
     e92:	bd30      	pop	{r4, r5, pc}
    err = esb_set_base_address_0(base_addr_0);
     e94:	a801      	add	r0, sp, #4
     e96:	f007 f84b 	bl	7f30 <esb_set_base_address_0>
    if (err) {
     e9a:	4604      	mov	r4, r0
     e9c:	b108      	cbz	r0, ea2 <init_esb+0x6a>
        LOG_ERR("Error setting base address 0");
     e9e:	4b0e      	ldr	r3, [pc, #56]	; (ed8 <init_esb+0xa0>)
     ea0:	e7ec      	b.n	e7c <init_esb+0x44>
    err = esb_set_base_address_1(base_addr_1);
     ea2:	a802      	add	r0, sp, #8
     ea4:	f007 f866 	bl	7f74 <esb_set_base_address_1>
    if (err) {
     ea8:	4604      	mov	r4, r0
     eaa:	b108      	cbz	r0, eb0 <init_esb+0x78>
        LOG_ERR("Error setting base address 1");
     eac:	4b0b      	ldr	r3, [pc, #44]	; (edc <init_esb+0xa4>)
     eae:	e7e5      	b.n	e7c <init_esb+0x44>
    err = esb_set_prefixes(addr_prefix, ARRAY_SIZE(addr_prefix));
     eb0:	2108      	movs	r1, #8
     eb2:	a803      	add	r0, sp, #12
     eb4:	f007 f880 	bl	7fb8 <esb_set_prefixes>
    if (err) {
     eb8:	4604      	mov	r4, r0
     eba:	2800      	cmp	r0, #0
     ebc:	d0e7      	beq.n	e8e <init_esb+0x56>
        LOG_ERR("Error setting address prefix");
     ebe:	4b08      	ldr	r3, [pc, #32]	; (ee0 <init_esb+0xa8>)
     ec0:	e7dc      	b.n	e7c <init_esb+0x44>
     ec2:	bf00      	nop
     ec4:	0000efa6 	.word	0x0000efa6
     ec8:	0000e970 	.word	0x0000e970
     ecc:	00000d41 	.word	0x00000d41
     ed0:	0000ef38 	.word	0x0000ef38
     ed4:	0000e8b0 	.word	0x0000e8b0
     ed8:	0000ef4f 	.word	0x0000ef4f
     edc:	0000ef6c 	.word	0x0000ef6c
     ee0:	0000ef89 	.word	0x0000ef89

00000ee4 <init_transceiver>:

int init_transceiver(void) {
     ee4:	b5f0      	push	{r4, r5, r6, r7, lr}
     ee6:	b087      	sub	sp, #28
    int err;
    LOG_INF("Staring mouse board transceiver");
     ee8:	466e      	mov	r6, sp
int init_transceiver(void) {
     eea:	af00      	add	r7, sp, #0
    LOG_INF("Staring mouse board transceiver");
     eec:	4b1b      	ldr	r3, [pc, #108]	; (f5c <init_transceiver+0x78>)
     eee:	481c      	ldr	r0, [pc, #112]	; (f60 <init_transceiver+0x7c>)
     ef0:	617b      	str	r3, [r7, #20]
     ef2:	2502      	movs	r5, #2
     ef4:	f107 0210 	add.w	r2, r7, #16
     ef8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     efc:	613d      	str	r5, [r7, #16]
     efe:	f00b fbce 	bl	c69e <z_log_msg_static_create.constprop.0>
    err = clocks_start();
     f02:	f7ff ff53 	bl	dac <clocks_start>
    if (err) {
     f06:	b988      	cbnz	r0, f2c <init_transceiver+0x48>
        return -1;
    }
    err = init_esb();
     f08:	f7ff ff96 	bl	e38 <init_esb>
    if (err) {
     f0c:	4604      	mov	r4, r0
     f0e:	b198      	cbz	r0, f38 <init_transceiver+0x54>
        LOG_ERR("ESB init failed, err %d", err);
     f10:	b088      	sub	sp, #32
     f12:	466a      	mov	r2, sp
     f14:	4b13      	ldr	r3, [pc, #76]	; (f64 <init_transceiver+0x80>)
     f16:	e9c2 3005 	strd	r3, r0, [r2, #20]
     f1a:	2303      	movs	r3, #3
     f1c:	f842 3f10 	str.w	r3, [r2, #16]!
     f20:	480f      	ldr	r0, [pc, #60]	; (f60 <init_transceiver+0x7c>)
     f22:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
     f26:	f00b fbba 	bl	c69e <z_log_msg_static_create.constprop.0>
     f2a:	46b5      	mov	sp, r6
        return -1;
     f2c:	f04f 34ff 	mov.w	r4, #4294967295
    }
    LOG_INF("Initialization complete");
    esb_data.ready = true;
    esb_data.message.noack = false;
    return 0;
}
     f30:	4620      	mov	r0, r4
     f32:	371c      	adds	r7, #28
     f34:	46bd      	mov	sp, r7
     f36:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LOG_INF("Initialization complete");
     f38:	4b0b      	ldr	r3, [pc, #44]	; (f68 <init_transceiver+0x84>)
     f3a:	4809      	ldr	r0, [pc, #36]	; (f60 <init_transceiver+0x7c>)
     f3c:	e9c7 5304 	strd	r5, r3, [r7, #16]
     f40:	f107 0210 	add.w	r2, r7, #16
     f44:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     f48:	f00b fba9 	bl	c69e <z_log_msg_static_create.constprop.0>
    esb_data.ready = true;
     f4c:	4b07      	ldr	r3, [pc, #28]	; (f6c <init_transceiver+0x88>)
     f4e:	2201      	movs	r2, #1
     f50:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    esb_data.message.noack = false;
     f54:	f883 4028 	strb.w	r4, [r3, #40]	; 0x28
    return 0;
     f58:	e7ea      	b.n	f30 <init_transceiver+0x4c>
     f5a:	bf00      	nop
     f5c:	0000efaf 	.word	0x0000efaf
     f60:	0000e8b0 	.word	0x0000e8b0
     f64:	0000efcf 	.word	0x0000efcf
     f68:	0000efe7 	.word	0x0000efe7
     f6c:	20000158 	.word	0x20000158

00000f70 <esb_create_message>:

int esb_create_message(const mouse_t *mouse) {
    uint8_t button_bm = 0;
	for (size_t i = 0; i < 5; i++) {
     f70:	2300      	movs	r3, #0
int esb_create_message(const mouse_t *mouse) {
     f72:	b530      	push	{r4, r5, lr}
     f74:	1d42      	adds	r2, r0, #5
    uint8_t button_bm = 0;
     f76:	461c      	mov	r4, r3
        if (mouse->button_states[i]) {
		    uint8_t mask = 1 << (i);
     f78:	2101      	movs	r1, #1
        if (mouse->button_states[i]) {
     f7a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
     f7e:	b11d      	cbz	r5, f88 <esb_create_message+0x18>
		    uint8_t mask = 1 << (i);
     f80:	fa01 f503 	lsl.w	r5, r1, r3
		    button_bm |= mask;
     f84:	432c      	orrs	r4, r5
     f86:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < 5; i++) {
     f88:	3301      	adds	r3, #1
     f8a:	2b05      	cmp	r3, #5
     f8c:	d1f5      	bne.n	f7a <esb_create_message+0xa>
	}
    uint8_t x_buf[sizeof(mouse->motion_info.dx)];
    uint8_t y_buf[sizeof(mouse->motion_info.dy)];
    sys_put_le16(mouse->motion_info.dx, x_buf);
    sys_put_le16(mouse->motion_info.dy, y_buf);
    esb_data.message.data[0] = button_bm; //button_bit_mask;
     f8e:	490e      	ldr	r1, [pc, #56]	; (fc8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x28>)
    sys_put_le16(mouse->motion_info.dx, x_buf);
     f90:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
     f94:	7903      	ldrb	r3, [r0, #4]
    sys_put_le16(mouse->motion_info.dy, y_buf);
     f96:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
    esb_data.message.data[0] = button_bm; //button_bit_mask;
     f9a:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
    esb_data.message.data[1] = mouse->wheel_data.rotation; // wheel;
     f9e:	8800      	ldrh	r0, [r0, #0]
     fa0:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
    esb_data.message.data[2] = x_buf[0];
    esb_data.message.data[3] = (y_buf[0] << 4) | (x_buf[1] & 0x0f);
     fa4:	f3c2 2203 	ubfx	r2, r2, #8, #4
     fa8:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
     fac:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
    esb_data.message.data[4] = (y_buf[1] << 4) | (y_buf[0] >> 4);
     fb0:	091b      	lsrs	r3, r3, #4
     fb2:	f3c5 2207 	ubfx	r2, r5, #8, #8
     fb6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    esb_data.message.data[1] = mouse->wheel_data.rotation; // wheel;
     fba:	f881 002b 	strb.w	r0, [r1, #43]	; 0x2b
    esb_data.message.data[4] = (y_buf[1] << 4) | (y_buf[0] >> 4);
     fbe:	f881 302e 	strb.w	r3, [r1, #46]	; 0x2e
    return 0;
}
     fc2:	2000      	movs	r0, #0
     fc4:	bd30      	pop	{r4, r5, pc}
     fc6:	bf00      	nop
     fc8:	20000158 	.word	0x20000158

00000fcc <write_message>:

int write_message() {
     fcc:	b598      	push	{r3, r4, r7, lr}
    int err;
    // LOG_DBG("Esb_data ready {%u}", esb_data.ready);
    if (esb_data.ready) {
     fce:	4c12      	ldr	r4, [pc, #72]	; (1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>)
     fd0:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
int write_message() {
     fd4:	af00      	add	r7, sp, #0
    if (esb_data.ready) {
     fd6:	b91b      	cbnz	r3, fe0 <write_message+0x14>
        esb_data.ready = false;
        esb_flush_tx();
        err = esb_write_payload(&esb_data.message);
        if (err) {
            LOG_ERR("Failed to write, err: %d", err);
            return -1;
     fd8:	f04f 30ff 	mov.w	r0, #4294967295
        }
        return 0;
    }
    return -1;
}
     fdc:	46bd      	mov	sp, r7
     fde:	bd98      	pop	{r3, r4, r7, pc}
        esb_data.ready = false;
     fe0:	2300      	movs	r3, #0
     fe2:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
        esb_flush_tx();
     fe6:	f006 ff87 	bl	7ef8 <esb_flush_tx>
        err = esb_write_payload(&esb_data.message);
     fea:	f104 0025 	add.w	r0, r4, #37	; 0x25
     fee:	f006 fe8d 	bl	7d0c <esb_write_payload>
        if (err) {
     ff2:	2800      	cmp	r0, #0
     ff4:	d0f2      	beq.n	fdc <write_message+0x10>
            LOG_ERR("Failed to write, err: %d", err);
     ff6:	466c      	mov	r4, sp
     ff8:	b088      	sub	sp, #32
     ffa:	466a      	mov	r2, sp
     ffc:	4b07      	ldr	r3, [pc, #28]	; (101c <CONFIG_FPROTECT_BLOCK_SIZE+0x1c>)
     ffe:	e9c2 3005 	strd	r3, r0, [r2, #20]
    1002:	2303      	movs	r3, #3
    1004:	f842 3f10 	str.w	r3, [r2, #16]!
    1008:	4805      	ldr	r0, [pc, #20]	; (1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>)
    100a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    100e:	f00b fb46 	bl	c69e <z_log_msg_static_create.constprop.0>
    1012:	46a5      	mov	sp, r4
            return -1;
    1014:	e7e0      	b.n	fd8 <write_message+0xc>
    1016:	bf00      	nop
    1018:	20000158 	.word	0x20000158
    101c:	0000efff 	.word	0x0000efff
    1020:	0000e8b0 	.word	0x0000e8b0

00001024 <esb_line_busy>:

bool esb_line_busy(void) {
    return !esb_data.ready;
    1024:	4b02      	ldr	r3, [pc, #8]	; (1030 <esb_line_busy+0xc>)
    1026:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
    102a:	f080 0001 	eor.w	r0, r0, #1
    102e:	4770      	bx	lr
    1030:	20000158 	.word	0x20000158

00001034 <int_in_ready_cb>:
static uint8_t message_buffer[MESSAGE_SIZE];
static bool transmission_busy = false;

void int_in_ready_cb(const struct device *dev) {
    ARG_UNUSED(dev);
    transmission_busy = false;
    1034:	4b01      	ldr	r3, [pc, #4]	; (103c <int_in_ready_cb+0x8>)
    1036:	2200      	movs	r2, #0
    1038:	701a      	strb	r2, [r3, #0]
}
    103a:	4770      	bx	lr
    103c:	20001cfa 	.word	0x20001cfa

00001040 <status_callback>:

void status_callback(enum usb_dc_status_code status, const uint8_t *param) {
    usb_device.status = status;
    1040:	4b01      	ldr	r3, [pc, #4]	; (1048 <status_callback+0x8>)
    1042:	7118      	strb	r0, [r3, #4]
}
    1044:	4770      	bx	lr
    1046:	bf00      	nop
    1048:	20000ca0 	.word	0x20000ca0

0000104c <init_usb>:

static const struct hid_ops ops = {
    .int_in_ready = int_in_ready_cb
};

int init_usb(void) {
    104c:	b510      	push	{r4, lr}
    104e:	b086      	sub	sp, #24
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    1050:	4818      	ldr	r0, [pc, #96]	; (10b4 <init_usb+0x68>)
    usb_device.dev = device_get_binding(HID_DEVICE_ID); 
    1052:	4c19      	ldr	r4, [pc, #100]	; (10b8 <init_usb+0x6c>)
    1054:	f009 ffda 	bl	b00c <z_impl_device_get_binding>
    1058:	4603      	mov	r3, r0
    105a:	6020      	str	r0, [r4, #0]
    if (!usb_device.dev) {
    105c:	b970      	cbnz	r0, 107c <init_usb+0x30>
        LOG_ERR("Failed to get USB device binding");
    105e:	4a17      	ldr	r2, [pc, #92]	; (10bc <init_usb+0x70>)
    1060:	9205      	str	r2, [sp, #20]
    1062:	2202      	movs	r2, #2
    1064:	9204      	str	r2, [sp, #16]
    1066:	4816      	ldr	r0, [pc, #88]	; (10c0 <init_usb+0x74>)
    1068:	aa04      	add	r2, sp, #16
    106a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
        return -ENODEV;
    106e:	f06f 0412 	mvn.w	r4, #18
    1072:	f001 fbc3 	bl	27fc <z_impl_z_log_msg_static_create>
        LOG_ERR("Failed to initialize USB HID");
        return err;
    }

    return usb_enable(status_callback);
}
    1076:	4620      	mov	r0, r4
    1078:	b006      	add	sp, #24
    107a:	bd10      	pop	{r4, pc}
    usb_hid_register_device(
    107c:	4b11      	ldr	r3, [pc, #68]	; (10c4 <init_usb+0x78>)
    107e:	4912      	ldr	r1, [pc, #72]	; (10c8 <init_usb+0x7c>)
    1080:	223e      	movs	r2, #62	; 0x3e
    1082:	f003 ff29 	bl	4ed8 <usb_hid_register_device>
    int err = usb_hid_init(usb_device.dev);
    1086:	6820      	ldr	r0, [r4, #0]
    1088:	f00c fac0 	bl	d60c <usb_hid_init>
    if (err) {
    108c:	4604      	mov	r4, r0
    108e:	b158      	cbz	r0, 10a8 <init_usb+0x5c>
        LOG_ERR("Failed to initialize USB HID");
    1090:	4b0e      	ldr	r3, [pc, #56]	; (10cc <init_usb+0x80>)
    1092:	9305      	str	r3, [sp, #20]
    1094:	2302      	movs	r3, #2
    1096:	9304      	str	r3, [sp, #16]
    1098:	4809      	ldr	r0, [pc, #36]	; (10c0 <init_usb+0x74>)
    109a:	2300      	movs	r3, #0
    109c:	aa04      	add	r2, sp, #16
    109e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    10a2:	f001 fbab 	bl	27fc <z_impl_z_log_msg_static_create>
        return err;
    10a6:	e7e6      	b.n	1076 <init_usb+0x2a>
    return usb_enable(status_callback);
    10a8:	4809      	ldr	r0, [pc, #36]	; (10d0 <init_usb+0x84>)
}
    10aa:	b006      	add	sp, #24
    10ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return usb_enable(status_callback);
    10b0:	f002 bc48 	b.w	3944 <usb_enable>
    10b4:	0000f028 	.word	0x0000f028
    10b8:	20000ca0 	.word	0x20000ca0
    10bc:	0000f02e 	.word	0x0000f02e
    10c0:	0000e928 	.word	0x0000e928
    10c4:	0000e9c0 	.word	0x0000e9c0
    10c8:	0000f070 	.word	0x0000f070
    10cc:	0000f04f 	.word	0x0000f04f
    10d0:	00001041 	.word	0x00001041

000010d4 <hid_write>:

int hid_write(const mouse_t* mouse) {
    uint8_t button_bm = 0;
    for (size_t i = 0; i < 5; i++) {
    10d4:	2300      	movs	r3, #0
int hid_write(const mouse_t* mouse) {
    10d6:	b570      	push	{r4, r5, r6, lr}
    10d8:	1d42      	adds	r2, r0, #5
    uint8_t button_bm = 0;
    10da:	461d      	mov	r5, r3
        if (mouse->button_states[i]) {
            button_bm |= (1 << i);
    10dc:	2101      	movs	r1, #1
        if (mouse->button_states[i]) {
    10de:	f812 4f01 	ldrb.w	r4, [r2, #1]!
    10e2:	b11c      	cbz	r4, 10ec <hid_write+0x18>
            button_bm |= (1 << i);
    10e4:	fa01 f403 	lsl.w	r4, r1, r3
    10e8:	4325      	orrs	r5, r4
    10ea:	b2ed      	uxtb	r5, r5
    for (size_t i = 0; i < 5; i++) {
    10ec:	3301      	adds	r3, #1
    10ee:	2b05      	cmp	r3, #5
    10f0:	d1f5      	bne.n	10de <hid_write+0xa>
    uint8_t y_buf[sizeof(mouse->motion_info.dy)];

    sys_put_le16(mouse->motion_info.dx, x_buf);
    sys_put_le16(mouse->motion_info.dy, y_buf);

    message_buffer[0] = 0x01;
    10f2:	4910      	ldr	r1, [pc, #64]	; (1134 <hid_write+0x60>)
    sys_put_le16(mouse->motion_info.dx, x_buf);
    10f4:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    10f8:	7903      	ldrb	r3, [r0, #4]
    message_buffer[1] = button_bm;
    10fa:	704d      	strb	r5, [r1, #1]
    message_buffer[0] = 0x01;
    10fc:	2401      	movs	r4, #1
    10fe:	700c      	strb	r4, [r1, #0]
    sys_put_le16(mouse->motion_info.dy, y_buf);
    1100:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
    message_buffer[2] = mouse->wheel_data.rotation;
    1104:	8800      	ldrh	r0, [r0, #0]
    1106:	70ca      	strb	r2, [r1, #3]
    message_buffer[3] = x_buf[0];
    message_buffer[4] = (y_buf[0] << 4) | (x_buf[1] & 0x0f);
    1108:	f3c2 2203 	ubfx	r2, r2, #8, #4
    110c:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
    message_buffer[2] = mouse->wheel_data.rotation;
    1110:	7088      	strb	r0, [r1, #2]
    message_buffer[4] = (y_buf[0] << 4) | (x_buf[1] & 0x0f);
    1112:	710a      	strb	r2, [r1, #4]
    message_buffer[5] = (y_buf[1] << 4) | (y_buf[0] >> 4);

    int err = hid_int_ep_write(usb_device.dev, message_buffer, MESSAGE_SIZE, NULL);
    1114:	4808      	ldr	r0, [pc, #32]	; (1138 <hid_write+0x64>)
    message_buffer[5] = (y_buf[1] << 4) | (y_buf[0] >> 4);
    1116:	f3c6 2207 	ubfx	r2, r6, #8, #8
    111a:	091b      	lsrs	r3, r3, #4
    111c:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    1120:	714b      	strb	r3, [r1, #5]
    int err = hid_int_ep_write(usb_device.dev, message_buffer, MESSAGE_SIZE, NULL);
    1122:	6800      	ldr	r0, [r0, #0]
    1124:	2300      	movs	r3, #0
    1126:	2206      	movs	r2, #6
    1128:	f003 feec 	bl	4f04 <hid_int_ep_write>
    if (err == 0) {
    112c:	b908      	cbnz	r0, 1132 <hid_write+0x5e>
        transmission_busy = true;
    112e:	4b03      	ldr	r3, [pc, #12]	; (113c <hid_write+0x68>)
    1130:	701c      	strb	r4, [r3, #0]
    }
    return err;
}
    1132:	bd70      	pop	{r4, r5, r6, pc}
    1134:	20001cfb 	.word	0x20001cfb
    1138:	20000ca0 	.word	0x20000ca0
    113c:	20001cfa 	.word	0x20001cfa

00001140 <usb_line_busy>:

bool usb_line_busy(void) {
    return transmission_busy;
}
    1140:	4b01      	ldr	r3, [pc, #4]	; (1148 <usb_line_busy+0x8>)
    1142:	7818      	ldrb	r0, [r3, #0]
    1144:	4770      	bx	lr
    1146:	bf00      	nop
    1148:	20001cfa 	.word	0x20001cfa

0000114c <init_wheel>:

LOG_MODULE_REGISTER(wheel, CONFIG_LOG_DEFAULT_LEVEL);

static const struct device *qdec_dev = DEVICE_DT_GET(DT_NODELABEL(qdec));

int init_wheel(void) {
    114c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    114e:	480b      	ldr	r0, [pc, #44]	; (117c <init_wheel+0x30>)
    1150:	f00c ff51 	bl	dff6 <z_device_is_ready>
    if (!device_is_ready(qdec_dev)) {
    1154:	4603      	mov	r3, r0
    1156:	b970      	cbnz	r0, 1176 <init_wheel+0x2a>
        LOG_ERR("QDEC not ready!");
    1158:	4a09      	ldr	r2, [pc, #36]	; (1180 <init_wheel+0x34>)
    115a:	9205      	str	r2, [sp, #20]
    115c:	2202      	movs	r2, #2
    115e:	9204      	str	r2, [sp, #16]
    1160:	4808      	ldr	r0, [pc, #32]	; (1184 <init_wheel+0x38>)
    1162:	aa04      	add	r2, sp, #16
    1164:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    1168:	f001 fb48 	bl	27fc <z_impl_z_log_msg_static_create>
        return -1;
    116c:	f04f 30ff 	mov.w	r0, #4294967295
    }
    return 0;
}
    1170:	b007      	add	sp, #28
    1172:	f85d fb04 	ldr.w	pc, [sp], #4
    return 0;
    1176:	2000      	movs	r0, #0
    1178:	e7fa      	b.n	1170 <init_wheel+0x24>
    117a:	bf00      	nop
    117c:	0000e7d8 	.word	0x0000e7d8
    1180:	0000f0ae 	.word	0x0000f0ae
    1184:	0000e958 	.word	0x0000e958

00001188 <fetch_wheel_data>:

wheel_data_t fetch_wheel_data() {
    1188:	b537      	push	{r0, r1, r2, r4, r5, lr}
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    118a:	4c07      	ldr	r4, [pc, #28]	; (11a8 <fetch_wheel_data+0x20>)
    118c:	68a5      	ldr	r5, [r4, #8]
    118e:	2139      	movs	r1, #57	; 0x39
    1190:	68eb      	ldr	r3, [r5, #12]
    1192:	4620      	mov	r0, r4
    1194:	4798      	blx	r3
	return api->channel_get(dev, chan, val);
    1196:	2122      	movs	r1, #34	; 0x22
    1198:	692b      	ldr	r3, [r5, #16]
    119a:	466a      	mov	r2, sp
    119c:	4620      	mov	r0, r4
    119e:	4798      	blx	r3
    wheel_data_t data;
    /* Negative as thats what USB expects */
    data.rotation = -wheel;

    return data;
}
    11a0:	9800      	ldr	r0, [sp, #0]
    11a2:	4240      	negs	r0, r0
    11a4:	b003      	add	sp, #12
    11a6:	bd30      	pop	{r4, r5, pc}
    11a8:	0000e7d8 	.word	0x0000e7d8

000011ac <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    11ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    11b0:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    11b2:	0784      	lsls	r4, r0, #30
{
    11b4:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    11b6:	f002 0304 	and.w	r3, r2, #4
    11ba:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    11bc:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    11c0:	f103 0301 	add.w	r3, r3, #1
    11c4:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
    11c8:	9203      	str	r2, [sp, #12]
    11ca:	4605      	mov	r5, r0
    11cc:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    11ce:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
    11d0:	f040 81be 	bne.w	1550 <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    11d4:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    11d6:	b130      	cbz	r0, 11e6 <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    11d8:	2907      	cmp	r1, #7
    11da:	d809      	bhi.n	11f0 <cbvprintf_package+0x44>
		return -ENOSPC;
    11dc:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    11e0:	b011      	add	sp, #68	; 0x44
    11e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    11e6:	f001 0607 	and.w	r6, r1, #7
    11ea:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    11ec:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    11f0:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    11f2:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
    11f6:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
    11f8:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    11fc:	f04f 33ff 	mov.w	r3, #4294967295
    1200:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    1202:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    1206:	464f      	mov	r7, r9
	bool parsing = false;
    1208:	46cb      	mov	fp, r9
	size = sizeof(char *);
    120a:	4653      	mov	r3, sl
			if (buf0 != NULL) {
    120c:	b10d      	cbz	r5, 1212 <cbvprintf_package+0x66>
				*(const char **)buf = s;
    120e:	9a00      	ldr	r2, [sp, #0]
    1210:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1212:	9805      	ldr	r0, [sp, #20]
    1214:	2800      	cmp	r0, #0
    1216:	f300 80eb 	bgt.w	13f0 <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    121a:	489a      	ldr	r0, [pc, #616]	; (1484 <cbvprintf_package+0x2d8>)
    121c:	9a00      	ldr	r2, [sp, #0]
    121e:	4282      	cmp	r2, r0
    1220:	d303      	bcc.n	122a <cbvprintf_package+0x7e>
    1222:	4899      	ldr	r0, [pc, #612]	; (1488 <cbvprintf_package+0x2dc>)
    1224:	4282      	cmp	r2, r0
    1226:	f0c0 80e3 	bcc.w	13f0 <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    122a:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    122c:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1230:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1232:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1236:	f100 8106 	bmi.w	1446 <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    123a:	2f0f      	cmp	r7, #15
    123c:	f200 80b4 	bhi.w	13a8 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
    1240:	2d00      	cmp	r5, #0
    1242:	f000 8108 	beq.w	1456 <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
    1246:	f107 0240 	add.w	r2, r7, #64	; 0x40
    124a:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    124e:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    1250:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    1254:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    1258:	9804      	ldr	r0, [sp, #16]
    125a:	3001      	adds	r0, #1
    125c:	9004      	str	r0, [sp, #16]
    125e:	e0ea      	b.n	1436 <cbvprintf_package+0x28a>
			switch (*fmt) {
    1260:	287a      	cmp	r0, #122	; 0x7a
    1262:	d860      	bhi.n	1326 <cbvprintf_package+0x17a>
    1264:	284b      	cmp	r0, #75	; 0x4b
    1266:	d80e      	bhi.n	1286 <cbvprintf_package+0xda>
    1268:	2847      	cmp	r0, #71	; 0x47
    126a:	d85c      	bhi.n	1326 <cbvprintf_package+0x17a>
    126c:	2829      	cmp	r0, #41	; 0x29
    126e:	d82f      	bhi.n	12d0 <cbvprintf_package+0x124>
    1270:	2825      	cmp	r0, #37	; 0x25
    1272:	d055      	beq.n	1320 <cbvprintf_package+0x174>
    1274:	d857      	bhi.n	1326 <cbvprintf_package+0x17a>
    1276:	2820      	cmp	r0, #32
    1278:	d07d      	beq.n	1376 <cbvprintf_package+0x1ca>
    127a:	3823      	subs	r0, #35	; 0x23
    127c:	f1d0 0b00 	rsbs	fp, r0, #0
    1280:	eb4b 0b00 	adc.w	fp, fp, r0
    1284:	e077      	b.n	1376 <cbvprintf_package+0x1ca>
    1286:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    128a:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    128e:	d84a      	bhi.n	1326 <cbvprintf_package+0x17a>
    1290:	e8df f00c 	tbb	[pc, ip]
    1294:	49494971 	.word	0x49494971
    1298:	49494949 	.word	0x49494949
    129c:	49494949 	.word	0x49494949
    12a0:	4949494c 	.word	0x4949494c
    12a4:	49494949 	.word	0x49494949
    12a8:	4c495a49 	.word	0x4c495a49
    12ac:	5a5a5a4c 	.word	0x5a5a5a4c
    12b0:	496e4c71 	.word	0x496e4c71
    12b4:	4c184971 	.word	0x4c184971
    12b8:	83494918 	.word	0x83494918
    12bc:	49494c80 	.word	0x49494c80
    12c0:	494c      	.short	0x494c
    12c2:	80          	.byte	0x80
    12c3:	00          	.byte	0x00
    12c4:	2000      	movs	r0, #0
    12c6:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
    12ca:	f04f 0a04 	mov.w	sl, #4
    12ce:	e039      	b.n	1344 <cbvprintf_package+0x198>
			switch (*fmt) {
    12d0:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    12d4:	fa5f fc8c 	uxtb.w	ip, ip
    12d8:	2201      	movs	r2, #1
    12da:	fa02 fc0c 	lsl.w	ip, r2, ip
    12de:	ea1c 0f0e 	tst.w	ip, lr
    12e2:	d148      	bne.n	1376 <cbvprintf_package+0x1ca>
    12e4:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
    12e8:	d12e      	bne.n	1348 <cbvprintf_package+0x19c>
    12ea:	ea1c 0b02 	ands.w	fp, ip, r2
    12ee:	d042      	beq.n	1376 <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
    12f0:	3c01      	subs	r4, #1
    12f2:	4454      	add	r4, sl
    12f4:	f1ca 0c00 	rsb	ip, sl, #0
    12f8:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    12fc:	2d00      	cmp	r5, #0
    12fe:	d061      	beq.n	13c4 <cbvprintf_package+0x218>
    1300:	eba3 0c05 	sub.w	ip, r3, r5
    1304:	44a4      	add	ip, r4
    1306:	45b4      	cmp	ip, r6
    1308:	f63f af68 	bhi.w	11dc <cbvprintf_package+0x30>
		if (is_str_arg) {
    130c:	2800      	cmp	r0, #0
    130e:	d168      	bne.n	13e2 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
    1310:	2b04      	cmp	r3, #4
    1312:	d147      	bne.n	13a4 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
    1314:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
    1318:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    131a:	3404      	adds	r4, #4
    131c:	2304      	movs	r3, #4
    131e:	e02a      	b.n	1376 <cbvprintf_package+0x1ca>
				arg_idx--;
    1320:	9a01      	ldr	r2, [sp, #4]
    1322:	3a01      	subs	r2, #1
    1324:	9201      	str	r2, [sp, #4]
				parsing = false;
    1326:	f04f 0b00 	mov.w	fp, #0
				continue;
    132a:	e024      	b.n	1376 <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
    132c:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    1330:	286c      	cmp	r0, #108	; 0x6c
    1332:	d134      	bne.n	139e <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
    1334:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    1338:	2000      	movs	r0, #0
    133a:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
    133c:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
    133e:	d1c4      	bne.n	12ca <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
    1340:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
    1344:	4653      	mov	r3, sl
    1346:	e7d3      	b.n	12f0 <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
    1348:	f108 0807 	add.w	r8, r8, #7
    134c:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
    1350:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
    1352:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
    1356:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
    135a:	b135      	cbz	r5, 136a <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
    135c:	9806      	ldr	r0, [sp, #24]
    135e:	4420      	add	r0, r4
    1360:	42b0      	cmp	r0, r6
    1362:	f63f af3b 	bhi.w	11dc <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
    1366:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
    136a:	3408      	adds	r4, #8
				parsing = false;
    136c:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
    1370:	f04f 0a08 	mov.w	sl, #8
    1374:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
    1376:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    137a:	2800      	cmp	r0, #0
    137c:	d078      	beq.n	1470 <cbvprintf_package+0x2c4>
			if (!parsing) {
    137e:	f1bb 0f00 	cmp.w	fp, #0
    1382:	f47f af6d 	bne.w	1260 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
    1386:	2825      	cmp	r0, #37	; 0x25
    1388:	d1f5      	bne.n	1376 <cbvprintf_package+0x1ca>
					arg_idx++;
    138a:	9b01      	ldr	r3, [sp, #4]
    138c:	3301      	adds	r3, #1
    138e:	9301      	str	r3, [sp, #4]
					parsing = true;
    1390:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
    1394:	f04f 0a04 	mov.w	sl, #4
    1398:	e7ec      	b.n	1374 <cbvprintf_package+0x1c8>
			switch (*fmt) {
    139a:	4658      	mov	r0, fp
    139c:	e793      	b.n	12c6 <cbvprintf_package+0x11a>
    139e:	2000      	movs	r0, #0
				parsing = false;
    13a0:	4683      	mov	fp, r0
    13a2:	e7a5      	b.n	12f0 <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
    13a4:	2b08      	cmp	r3, #8
    13a6:	d002      	beq.n	13ae <cbvprintf_package+0x202>
					return -EINVAL;
    13a8:	f06f 0015 	mvn.w	r0, #21
    13ac:	e718      	b.n	11e0 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
    13ae:	f108 0807 	add.w	r8, r8, #7
    13b2:	f028 0807 	bic.w	r8, r8, #7
    13b6:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
    13ba:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
    13be:	3408      	adds	r4, #8
    13c0:	2308      	movs	r3, #8
    13c2:	e7d8      	b.n	1376 <cbvprintf_package+0x1ca>
		if (is_str_arg) {
    13c4:	b968      	cbnz	r0, 13e2 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
    13c6:	2b04      	cmp	r3, #4
    13c8:	d102      	bne.n	13d0 <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
    13ca:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    13ce:	e7a4      	b.n	131a <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
    13d0:	2b08      	cmp	r3, #8
    13d2:	d1e9      	bne.n	13a8 <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
    13d4:	f108 0807 	add.w	r8, r8, #7
    13d8:	f028 0807 	bic.w	r8, r8, #7
    13dc:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    13e0:	e7ed      	b.n	13be <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    13e2:	9a05      	ldr	r2, [sp, #20]
    13e4:	3a01      	subs	r2, #1
    13e6:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
    13e8:	f858 2b04 	ldr.w	r2, [r8], #4
    13ec:	9200      	str	r2, [sp, #0]
    13ee:	e70d      	b.n	120c <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
    13f0:	9a03      	ldr	r2, [sp, #12]
    13f2:	0790      	lsls	r0, r2, #30
    13f4:	d520      	bpl.n	1438 <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    13f6:	eba4 0e05 	sub.w	lr, r4, r5
    13fa:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    13fe:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1402:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    1406:	d2cf      	bcs.n	13a8 <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    1408:	2f0f      	cmp	r7, #15
    140a:	d8cd      	bhi.n	13a8 <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
    140c:	b1f5      	cbz	r5, 144c <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
    140e:	f107 0240 	add.w	r2, r7, #64	; 0x40
    1412:	eb0d 0e02 	add.w	lr, sp, r2
    1416:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
    1418:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    141a:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    141e:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    1422:	f1bc 0f00 	cmp.w	ip, #0
    1426:	f43f af17 	beq.w	1258 <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    142a:	f060 007f 	orn	r0, r0, #127	; 0x7f
    142e:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    1432:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
    1436:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    1438:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
    143c:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    143e:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
    1440:	f64f 7eda 	movw	lr, #65498	; 0xffda
    1444:	e797      	b.n	1376 <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1446:	f04f 0c00 	mov.w	ip, #0
    144a:	e7da      	b.n	1402 <cbvprintf_package+0x256>
				} else if (is_ro) {
    144c:	f1bc 0f00 	cmp.w	ip, #0
    1450:	d001      	beq.n	1456 <cbvprintf_package+0x2aa>
					len += 1;
    1452:	3601      	adds	r6, #1
    1454:	e7ef      	b.n	1436 <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
    1456:	9802      	ldr	r0, [sp, #8]
					len += 2;
    1458:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    145a:	2800      	cmp	r0, #0
    145c:	d1eb      	bne.n	1436 <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
    145e:	9800      	ldr	r0, [sp, #0]
    1460:	e9cd 3106 	strd	r3, r1, [sp, #24]
    1464:	f00c f878 	bl	d558 <strlen>
    1468:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    146c:	4406      	add	r6, r0
    146e:	e7e2      	b.n	1436 <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
    1470:	1b63      	subs	r3, r4, r5
    1472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    1476:	d297      	bcs.n	13a8 <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
    1478:	b945      	cbnz	r5, 148c <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    147a:	f1a6 0408 	sub.w	r4, r6, #8
    147e:	18e0      	adds	r0, r4, r3
    1480:	e6ae      	b.n	11e0 <cbvprintf_package+0x34>
    1482:	bf00      	nop
    1484:	0000e6e8 	.word	0x0000e6e8
    1488:	0001146c 	.word	0x0001146c
	if (rws_pos_en) {
    148c:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
    148e:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    1490:	089b      	lsrs	r3, r3, #2
    1492:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    1494:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    1498:	b1c2      	cbz	r2, 14cc <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    149a:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    149c:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    14a0:	f1b9 0f00 	cmp.w	r9, #0
    14a4:	d005      	beq.n	14b2 <cbvprintf_package+0x306>
    14a6:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    14a8:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
    14aa:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    14ae:	4297      	cmp	r7, r2
    14b0:	d10e      	bne.n	14d0 <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
    14b2:	f1c5 0301 	rsb	r3, r5, #1
    14b6:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
    14ba:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    14be:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    14c0:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    14c4:	4557      	cmp	r7, sl
    14c6:	d112      	bne.n	14ee <cbvprintf_package+0x342>
	return BUF_OFFSET;
    14c8:	1b60      	subs	r0, r4, r5
    14ca:	e689      	b.n	11e0 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    14cc:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    14ce:	e7e5      	b.n	149c <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    14d0:	f810 3b01 	ldrb.w	r3, [r0], #1
    14d4:	0619      	lsls	r1, r3, #24
    14d6:	d508      	bpl.n	14ea <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
    14d8:	eb04 0e0c 	add.w	lr, r4, ip
    14dc:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    14de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    14e2:	f63f ae7b 	bhi.w	11dc <cbvprintf_package+0x30>
			*buf++ = pos;
    14e6:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    14ea:	3201      	adds	r2, #1
    14ec:	e7df      	b.n	14ae <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    14ee:	f1b9 0f00 	cmp.w	r9, #0
    14f2:	d003      	beq.n	14fc <cbvprintf_package+0x350>
    14f4:	f998 2000 	ldrsb.w	r2, [r8]
    14f8:	2a00      	cmp	r2, #0
    14fa:	db17      	blt.n	152c <cbvprintf_package+0x380>
		if (rws_pos_en) {
    14fc:	9b02      	ldr	r3, [sp, #8]
    14fe:	b1d3      	cbz	r3, 1536 <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
    1500:	f81a 200b 	ldrb.w	r2, [sl, fp]
    1504:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    1508:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    150a:	9b01      	ldr	r3, [sp, #4]
    150c:	1898      	adds	r0, r3, r2
    150e:	4420      	add	r0, r4
    1510:	42b0      	cmp	r0, r6
    1512:	f63f ae63 	bhi.w	11dc <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
    1516:	f898 0000 	ldrb.w	r0, [r8]
    151a:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
    151e:	9900      	ldr	r1, [sp, #0]
    1520:	9203      	str	r2, [sp, #12]
    1522:	4620      	mov	r0, r4
    1524:	f00c f834 	bl	d590 <memcpy>
		buf += size;
    1528:	9a03      	ldr	r2, [sp, #12]
    152a:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    152c:	f10a 0a01 	add.w	sl, sl, #1
    1530:	f108 0801 	add.w	r8, r8, #1
    1534:	e7c6      	b.n	14c4 <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    1536:	f898 2000 	ldrb.w	r2, [r8]
    153a:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    153e:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    1540:	9b02      	ldr	r3, [sp, #8]
    1542:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    1546:	9800      	ldr	r0, [sp, #0]
    1548:	f00c f806 	bl	d558 <strlen>
    154c:	1c42      	adds	r2, r0, #1
    154e:	e7dc      	b.n	150a <cbvprintf_package+0x35e>
		return -EFAULT;
    1550:	f06f 000d 	mvn.w	r0, #13
    1554:	e644      	b.n	11e0 <cbvprintf_package+0x34>
    1556:	bf00      	nop

00001558 <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    1558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    155c:	b095      	sub	sp, #84	; 0x54
    155e:	af00      	add	r7, sp, #0
    1560:	4604      	mov	r4, r0
    1562:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
    1566:	61bb      	str	r3, [r7, #24]
    1568:	f3cb 03c0 	ubfx	r3, fp, #3, #1
    156c:	627a      	str	r2, [r7, #36]	; 0x24
    156e:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    1570:	6239      	str	r1, [r7, #32]
    1572:	b951      	cbnz	r1, 158a <cbprintf_package_convert+0x32>
	buf += ros_nbr;
    1574:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    1576:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    1578:	7880      	ldrb	r0, [r0, #2]
    157a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    157e:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
    1580:	6a3b      	ldr	r3, [r7, #32]
    1582:	429e      	cmp	r6, r3
    1584:	d81a      	bhi.n	15bc <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
    1586:	1b03      	subs	r3, r0, r4
    1588:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    158a:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    158e:	78e3      	ldrb	r3, [r4, #3]
    1590:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
    1592:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
    1594:	f1ba 0f00 	cmp.w	sl, #0
    1598:	d002      	beq.n	15a0 <cbprintf_package_convert+0x48>
    159a:	f01b 0f01 	tst.w	fp, #1
    159e:	d117      	bne.n	15d0 <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
    15a0:	697b      	ldr	r3, [r7, #20]
    15a2:	bb5b      	cbnz	r3, 15fc <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
    15a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    15a6:	b11b      	cbz	r3, 15b0 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
    15a8:	69ba      	ldr	r2, [r7, #24]
    15aa:	6a39      	ldr	r1, [r7, #32]
    15ac:	4620      	mov	r0, r4
    15ae:	4798      	blx	r3
		}

		return in_len;
    15b0:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    15b2:	4628      	mov	r0, r5
    15b4:	3754      	adds	r7, #84	; 0x54
    15b6:	46bd      	mov	sp, r7
    15b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    15bc:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
    15be:	4628      	mov	r0, r5
    15c0:	f00b ffca 	bl	d558 <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
    15c4:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
    15c6:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
    15c8:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
    15ca:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
    15cc:	623b      	str	r3, [r7, #32]
    15ce:	e7d7      	b.n	1580 <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
    15d0:	f894 8000 	ldrb.w	r8, [r4]
    15d4:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    15d6:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    15d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
    15da:	ea4f 0288 	mov.w	r2, r8, lsl #2
    15de:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    15e0:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
    15e4:	2b00      	cmp	r3, #0
    15e6:	f040 8101 	bne.w	17ec <cbprintf_package_convert+0x294>
		out_len = (int)in_len;
    15ea:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
    15ec:	46c1      	mov	r9, r8
    15ee:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
    15f2:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    15f4:	454b      	cmp	r3, r9
    15f6:	d14e      	bne.n	1696 <cbprintf_package_convert+0x13e>
    15f8:	44d0      	add	r8, sl
    15fa:	e013      	b.n	1624 <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
    15fc:	f01b 0f02 	tst.w	fp, #2
    1600:	d0d0      	beq.n	15a4 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
    1602:	f894 8000 	ldrb.w	r8, [r4]
    1606:	ea4f 0388 	mov.w	r3, r8, lsl #2
    160a:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    160c:	6863      	ldr	r3, [r4, #4]
    160e:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    1610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
    1612:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
    1616:	2b00      	cmp	r3, #0
    1618:	d178      	bne.n	170c <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
    161a:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    161c:	f1ba 0f00 	cmp.w	sl, #0
    1620:	d14e      	bne.n	16c0 <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
    1622:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
    1624:	f01b 0f05 	tst.w	fp, #5
    1628:	bf0c      	ite	eq
    162a:	2302      	moveq	r3, #2
    162c:	2301      	movne	r3, #1
    162e:	627b      	str	r3, [r7, #36]	; 0x24
    1630:	697b      	ldr	r3, [r7, #20]
    1632:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1636:	f00b 0302 	and.w	r3, fp, #2
    163a:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
    163c:	45d0      	cmp	r8, sl
    163e:	d0b8      	beq.n	15b2 <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
    1640:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
    1644:	f818 3c01 	ldrb.w	r3, [r8, #-1]
    1648:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
    164c:	4bac      	ldr	r3, [pc, #688]	; (1900 <cbprintf_package_convert+0x3a8>)
    164e:	4599      	cmp	r9, r3
    1650:	d302      	bcc.n	1658 <cbprintf_package_convert+0x100>
    1652:	4bac      	ldr	r3, [pc, #688]	; (1904 <cbprintf_package_convert+0x3ac>)
    1654:	4599      	cmp	r9, r3
    1656:	d339      	bcc.n	16cc <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    1658:	693b      	ldr	r3, [r7, #16]
    165a:	2b00      	cmp	r3, #0
    165c:	d043      	beq.n	16e6 <cbprintf_package_convert+0x18e>
    165e:	69f8      	ldr	r0, [r7, #28]
    1660:	f00b f851 	bl	c706 <is_ptr>
    1664:	2800      	cmp	r0, #0
    1666:	d03e      	beq.n	16e6 <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    1668:	46e9      	mov	r9, sp
    166a:	b08a      	sub	sp, #40	; 0x28
    166c:	466a      	mov	r2, sp
    166e:	4ba6      	ldr	r3, [pc, #664]	; (1908 <cbprintf_package_convert+0x3b0>)
    1670:	6153      	str	r3, [r2, #20]
    1672:	69fb      	ldr	r3, [r7, #28]
    1674:	e9c2 3106 	strd	r3, r1, [r2, #24]
    1678:	f44f 7300 	mov.w	r3, #512	; 0x200
    167c:	8413      	strh	r3, [r2, #32]
    167e:	4ba3      	ldr	r3, [pc, #652]	; (190c <cbprintf_package_convert+0x3b4>)
    1680:	f842 3f10 	str.w	r3, [r2, #16]!
    1684:	48a2      	ldr	r0, [pc, #648]	; (1910 <cbprintf_package_convert+0x3b8>)
    1686:	2300      	movs	r3, #0
    1688:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    168c:	f001 f8b6 	bl	27fc <z_impl_z_log_msg_static_create>
				out_len -= 2;
    1690:	3d02      	subs	r5, #2
    1692:	46cd      	mov	sp, r9
				continue;
    1694:	e7d2      	b.n	163c <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
    1696:	f819 2b01 	ldrb.w	r2, [r9], #1
    169a:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    169c:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    16a0:	f00b ff5a 	bl	d558 <strlen>
				if (strl && strl_cnt < strl_len) {
    16a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    16a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    16a8:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    16aa:	b13a      	cbz	r2, 16bc <cbprintf_package_convert+0x164>
    16ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    16b0:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    16b2:	bf3e      	ittt	cc
    16b4:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
    16b6:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    16ba:	3601      	addcc	r6, #1
				out_len += len;
    16bc:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    16be:	e799      	b.n	15f4 <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    16c0:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
    16c4:	bf1c      	itt	ne
    16c6:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    16c8:	44d0      	addne	r8, sl
    16ca:	e7ab      	b.n	1624 <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    16cc:	693b      	ldr	r3, [r7, #16]
    16ce:	b123      	cbz	r3, 16da <cbprintf_package_convert+0x182>
    16d0:	69f8      	ldr	r0, [r7, #28]
    16d2:	f00b f818 	bl	c706 <is_ptr>
    16d6:	2800      	cmp	r0, #0
    16d8:	d1c6      	bne.n	1668 <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    16da:	f01b 0f01 	tst.w	fp, #1
    16de:	d105      	bne.n	16ec <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
    16e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    16e2:	1aed      	subs	r5, r5, r3
    16e4:	e7aa      	b.n	163c <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    16e6:	6a3b      	ldr	r3, [r7, #32]
    16e8:	2b00      	cmp	r3, #0
    16ea:	d0a7      	beq.n	163c <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
    16ec:	4648      	mov	r0, r9
    16ee:	f00b ff33 	bl	d558 <strlen>
				if (strl && strl_cnt < strl_len) {
    16f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    16f4:	b143      	cbz	r3, 1708 <cbprintf_package_convert+0x1b0>
    16f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    16fa:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    16fc:	bf3f      	itttt	cc
    16fe:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    1700:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    1702:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    1706:	3601      	addcc	r6, #1
				out_len += (len - 1);
    1708:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
    170a:	e797      	b.n	163c <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    170c:	f1ba 0f00 	cmp.w	sl, #0
    1710:	d071      	beq.n	17f6 <cbprintf_package_convert+0x29e>
    1712:	f01b 0604 	ands.w	r6, fp, #4
    1716:	d071      	beq.n	17fc <cbprintf_package_convert+0x2a4>
		keep_cnt = ros_nbr;
    1718:	46d1      	mov	r9, sl
		scpy_cnt = 0;
    171a:	2600      	movs	r6, #0
		dst = keep_str_pos;
    171c:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
    1720:	4652      	mov	r2, sl
    1722:	4641      	mov	r1, r8
    1724:	f00b ff34 	bl	d590 <memcpy>
	str_pos += ros_nbr;
    1728:	697b      	ldr	r3, [r7, #20]
    172a:	005b      	lsls	r3, r3, #1
    172c:	60bb      	str	r3, [r7, #8]
    172e:	697b      	ldr	r3, [r7, #20]
    1730:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
    1732:	eb08 0343 	add.w	r3, r8, r3, lsl #1
    1736:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1738:	f00b 0302 	and.w	r3, fp, #2
    173c:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    173e:	697b      	ldr	r3, [r7, #20]
    1740:	4598      	cmp	r8, r3
    1742:	d15d      	bne.n	1800 <cbprintf_package_convert+0x2a8>
	out_desc.len = in_desc->len;
    1744:	7823      	ldrb	r3, [r4, #0]
    1746:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    1748:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    174a:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    174e:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    1752:	bf0c      	ite	eq
    1754:	ea4f 0159 	moveq.w	r1, r9, lsr #1
    1758:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    175a:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    175e:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    1760:	f040 809d 	bne.w	189e <cbprintf_package_convert+0x346>
    1764:	f01b 0f04 	tst.w	fp, #4
    1768:	bf14      	ite	ne
    176a:	4648      	movne	r0, r9
    176c:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    176e:	f894 b002 	ldrb.w	fp, [r4, #2]
    1772:	f894 8003 	ldrb.w	r8, [r4, #3]
    1776:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
    1778:	7062      	strb	r2, [r4, #1]
    177a:	70a0      	strb	r0, [r4, #2]
    177c:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    177e:	69ba      	ldr	r2, [r7, #24]
    1780:	68f9      	ldr	r1, [r7, #12]
    1782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1784:	4620      	mov	r0, r4
    1786:	4798      	blx	r3
	if (rv < 0) {
    1788:	1e05      	subs	r5, r0, #0
    178a:	f6ff af12 	blt.w	15b2 <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
    178e:	69fb      	ldr	r3, [r7, #28]
    1790:	7023      	strb	r3, [r4, #0]
    1792:	693b      	ldr	r3, [r7, #16]
    1794:	7063      	strb	r3, [r4, #1]
    1796:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    179a:	69ba      	ldr	r2, [r7, #24]
    179c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
    179e:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    17a2:	4649      	mov	r1, r9
    17a4:	f107 0040 	add.w	r0, r7, #64	; 0x40
    17a8:	4798      	blx	r3
	if (rv < 0) {
    17aa:	f1b0 0800 	subs.w	r8, r0, #0
    17ae:	f2c0 80a3 	blt.w	18f8 <cbprintf_package_convert+0x3a0>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    17b2:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
    17b4:	69ba      	ldr	r2, [r7, #24]
    17b6:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    17b8:	eba3 010a 	sub.w	r1, r3, sl
    17bc:	68fb      	ldr	r3, [r7, #12]
    17be:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    17c0:	68bb      	ldr	r3, [r7, #8]
    17c2:	1ac9      	subs	r1, r1, r3
    17c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    17c6:	4798      	blx	r3
	if (rv < 0) {
    17c8:	2800      	cmp	r0, #0
    17ca:	f2c0 8097 	blt.w	18fc <cbprintf_package_convert+0x3a4>
	out_len += rv;
    17ce:	44a8      	add	r8, r5
	out_len += rv;
    17d0:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    17d4:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
    17d8:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    17dc:	45b3      	cmp	fp, r6
    17de:	d360      	bcc.n	18a2 <cbprintf_package_convert+0x34a>
	(void)cb(NULL, 0, ctx);
    17e0:	2100      	movs	r1, #0
    17e2:	69ba      	ldr	r2, [r7, #24]
    17e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    17e6:	4608      	mov	r0, r1
    17e8:	4798      	blx	r3
	return out_len;
    17ea:	e6e2      	b.n	15b2 <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
    17ec:	f04f 0900 	mov.w	r9, #0
    17f0:	f107 0030 	add.w	r0, r7, #48	; 0x30
    17f4:	e794      	b.n	1720 <cbprintf_package_convert+0x1c8>
		scpy_cnt = 0;
    17f6:	4656      	mov	r6, sl
		keep_cnt = 0;
    17f8:	46d1      	mov	r9, sl
    17fa:	e795      	b.n	1728 <cbprintf_package_convert+0x1d0>
    17fc:	46b1      	mov	r9, r6
    17fe:	e793      	b.n	1728 <cbprintf_package_convert+0x1d0>
		uint8_t arg_idx = *str_pos++;
    1800:	f818 1b02 	ldrb.w	r1, [r8], #2
    1804:	4a3e      	ldr	r2, [pc, #248]	; (1900 <cbprintf_package_convert+0x3a8>)
		uint8_t arg_pos = *str_pos++;
    1806:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    180a:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    180e:	4293      	cmp	r3, r2
    1810:	d302      	bcc.n	1818 <cbprintf_package_convert+0x2c0>
    1812:	4a3c      	ldr	r2, [pc, #240]	; (1904 <cbprintf_package_convert+0x3ac>)
    1814:	4293      	cmp	r3, r2
    1816:	d31c      	bcc.n	1852 <cbprintf_package_convert+0x2fa>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    1818:	693b      	ldr	r3, [r7, #16]
    181a:	b123      	cbz	r3, 1826 <cbprintf_package_convert+0x2ce>
    181c:	69f8      	ldr	r0, [r7, #28]
    181e:	f00a ff72 	bl	c706 <is_ptr>
    1822:	2800      	cmp	r0, #0
    1824:	d18b      	bne.n	173e <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1826:	687b      	ldr	r3, [r7, #4]
    1828:	b9f3      	cbnz	r3, 1868 <cbprintf_package_convert+0x310>
				keep_str_pos[keep_cnt++] = arg_idx;
    182a:	f109 0228 	add.w	r2, r9, #40	; 0x28
    182e:	f107 0028 	add.w	r0, r7, #40	; 0x28
    1832:	4402      	add	r2, r0
    1834:	f109 0301 	add.w	r3, r9, #1
    1838:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    183c:	f107 0250 	add.w	r2, r7, #80	; 0x50
    1840:	fa52 f383 	uxtab	r3, r2, r3
    1844:	f109 0902 	add.w	r9, r9, #2
    1848:	fa5f f989 	uxtb.w	r9, r9
    184c:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    1850:	e775      	b.n	173e <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    1852:	693b      	ldr	r3, [r7, #16]
    1854:	b12b      	cbz	r3, 1862 <cbprintf_package_convert+0x30a>
    1856:	69f8      	ldr	r0, [r7, #28]
    1858:	f00a ff55 	bl	c706 <is_ptr>
    185c:	2800      	cmp	r0, #0
    185e:	f47f af6e 	bne.w	173e <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    1862:	f01b 0f01 	tst.w	fp, #1
    1866:	d009      	beq.n	187c <cbprintf_package_convert+0x324>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    1868:	f106 0228 	add.w	r2, r6, #40	; 0x28
    186c:	f107 0128 	add.w	r1, r7, #40	; 0x28
    1870:	1c73      	adds	r3, r6, #1
    1872:	1856      	adds	r6, r2, r1
    1874:	f806 5c20 	strb.w	r5, [r6, #-32]
    1878:	b2de      	uxtb	r6, r3
    187a:	e760      	b.n	173e <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    187c:	f01b 0f04 	tst.w	fp, #4
    1880:	f43f af5d 	beq.w	173e <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
    1884:	f109 0228 	add.w	r2, r9, #40	; 0x28
    1888:	f107 0128 	add.w	r1, r7, #40	; 0x28
    188c:	f109 0301 	add.w	r3, r9, #1
    1890:	eb02 0901 	add.w	r9, r2, r1
    1894:	f809 5c10 	strb.w	r5, [r9, #-16]
    1898:	fa5f f983 	uxtb.w	r9, r3
    189c:	e74f      	b.n	173e <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    189e:	2000      	movs	r0, #0
    18a0:	e765      	b.n	176e <cbprintf_package_convert+0x216>
		uint8_t loc = cpy_str_pos[i];
    18a2:	f81b 300a 	ldrb.w	r3, [fp, sl]
    18a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
    18aa:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
    18ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    18b0:	b1fb      	cbz	r3, 18f2 <cbprintf_package_convert+0x39a>
    18b2:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    18b6:	69ba      	ldr	r2, [r7, #24]
    18b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18ba:	2101      	movs	r1, #1
    18bc:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    18c0:	4798      	blx	r3
		if (rv < 0) {
    18c2:	2800      	cmp	r0, #0
    18c4:	db1a      	blt.n	18fc <cbprintf_package_convert+0x3a4>
		out_len += rv;
    18c6:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    18c8:	f1b8 0f00 	cmp.w	r8, #0
    18cc:	d106      	bne.n	18dc <cbprintf_package_convert+0x384>
    18ce:	4648      	mov	r0, r9
    18d0:	f00b fe42 	bl	d558 <strlen>
    18d4:	f100 0801 	add.w	r8, r0, #1
    18d8:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    18dc:	69ba      	ldr	r2, [r7, #24]
    18de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    18e0:	4641      	mov	r1, r8
    18e2:	4648      	mov	r0, r9
    18e4:	4798      	blx	r3
		if (rv < 0) {
    18e6:	2800      	cmp	r0, #0
    18e8:	db08      	blt.n	18fc <cbprintf_package_convert+0x3a4>
		out_len += rv;
    18ea:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    18ec:	f10b 0b01 	add.w	fp, fp, #1
    18f0:	e774      	b.n	17dc <cbprintf_package_convert+0x284>
		uint16_t str_len = strl ? strl[i] : 0;
    18f2:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    18f6:	e7de      	b.n	18b6 <cbprintf_package_convert+0x35e>
    18f8:	4645      	mov	r5, r8
    18fa:	e65a      	b.n	15b2 <cbprintf_package_convert+0x5a>
    18fc:	4605      	mov	r5, r0
    18fe:	e658      	b.n	15b2 <cbprintf_package_convert+0x5a>
    1900:	0000e6e8 	.word	0x0000e6e8
    1904:	0001146c 	.word	0x0001146c
    1908:	0000f0c4 	.word	0x0000f0c4
    190c:	01000004 	.word	0x01000004
    1910:	0000e898 	.word	0x0000e898

00001914 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    1914:	4b01      	ldr	r3, [pc, #4]	; (191c <__printk_hook_install+0x8>)
    1916:	6018      	str	r0, [r3, #0]
}
    1918:	4770      	bx	lr
    191a:	bf00      	nop
    191c:	20000014 	.word	0x20000014

00001920 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    1920:	b530      	push	{r4, r5, lr}
    1922:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    1924:	2500      	movs	r5, #0
    1926:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    192a:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    192c:	9500      	str	r5, [sp, #0]
    192e:	a903      	add	r1, sp, #12
    1930:	4805      	ldr	r0, [pc, #20]	; (1948 <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    1932:	9505      	str	r5, [sp, #20]
    1934:	f000 f918 	bl	1b68 <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    1938:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    193c:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    193e:	bfb8      	it	lt
    1940:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    1942:	b007      	add	sp, #28
    1944:	bd30      	pop	{r4, r5, pc}
    1946:	bf00      	nop
    1948:	0000c755 	.word	0x0000c755

0000194c <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    194c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1950:	8b05      	ldrh	r5, [r0, #24]
{
    1952:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1954:	0728      	lsls	r0, r5, #28
{
    1956:	4690      	mov	r8, r2
	if (processing) {
    1958:	d411      	bmi.n	197e <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    195a:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    195c:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1960:	f040 80cd 	bne.w	1afe <process_event+0x1b2>
			evt = process_recheck(mgr);
    1964:	4620      	mov	r0, r4
    1966:	f00b f90c 	bl	cb82 <process_recheck>
		}

		if (evt == EVT_NOP) {
    196a:	b178      	cbz	r0, 198c <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    196c:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    196e:	8b21      	ldrh	r1, [r4, #24]
    1970:	2804      	cmp	r0, #4
    1972:	d811      	bhi.n	1998 <process_event+0x4c>
    1974:	e8df f000 	tbb	[pc, r0]
    1978:	856d10c3 	.word	0x856d10c3
    197c:	95          	.byte	0x95
    197d:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    197e:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1980:	bf0c      	ite	eq
    1982:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1986:	f045 0520 	orrne.w	r5, r5, #32
    198a:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    198c:	f388 8811 	msr	BASEPRI, r8
    1990:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    1994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1998:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    199c:	45aa      	cmp	sl, r5
    199e:	f000 80a6 	beq.w	1aee <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    19a2:	2700      	movs	r7, #0
    19a4:	46b9      	mov	r9, r7
    19a6:	463e      	mov	r6, r7
    19a8:	68a3      	ldr	r3, [r4, #8]
    19aa:	2b00      	cmp	r3, #0
    19ac:	f000 80bd 	beq.w	1b2a <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    19b0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    19b4:	8321      	strh	r1, [r4, #24]
    19b6:	f388 8811 	msr	BASEPRI, r8
    19ba:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    19be:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    19c0:	2900      	cmp	r1, #0
    19c2:	f000 80bb 	beq.w	1b3c <process_event+0x1f0>
	return node->next;
    19c6:	680d      	ldr	r5, [r1, #0]
    19c8:	2900      	cmp	r1, #0
    19ca:	f000 80b7 	beq.w	1b3c <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    19ce:	f8d1 8004 	ldr.w	r8, [r1, #4]
    19d2:	4633      	mov	r3, r6
    19d4:	4652      	mov	r2, sl
    19d6:	4620      	mov	r0, r4
    19d8:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    19da:	2d00      	cmp	r5, #0
    19dc:	d076      	beq.n	1acc <process_event+0x180>
    19de:	682b      	ldr	r3, [r5, #0]
    19e0:	4629      	mov	r1, r5
    19e2:	461d      	mov	r5, r3
    19e4:	e7f0      	b.n	19c8 <process_event+0x7c>
    19e6:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    19ea:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    19ec:	2a01      	cmp	r2, #1
    19ee:	d81b      	bhi.n	1a28 <process_event+0xdc>
	list->head = NULL;
    19f0:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    19f2:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    19f6:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    19f8:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    19fa:	b289      	uxth	r1, r1
	list->tail = NULL;
    19fc:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1a00:	d109      	bne.n	1a16 <process_event+0xca>
    1a02:	463b      	mov	r3, r7
    1a04:	e003      	b.n	1a0e <process_event+0xc2>
				mgr->refs += 1U;
    1a06:	8b62      	ldrh	r2, [r4, #26]
    1a08:	3201      	adds	r2, #1
    1a0a:	8362      	strh	r2, [r4, #26]
	return node->next;
    1a0c:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1a0e:	2b00      	cmp	r3, #0
    1a10:	d1f9      	bne.n	1a06 <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1a12:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1a16:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1a18:	4620      	mov	r0, r4
    1a1a:	f00b f8b2 	bl	cb82 <process_recheck>
    1a1e:	2800      	cmp	r0, #0
    1a20:	d07b      	beq.n	1b1a <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1a22:	f041 0120 	orr.w	r1, r1, #32
    1a26:	e077      	b.n	1b18 <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    1a28:	2b04      	cmp	r3, #4
    1a2a:	d10a      	bne.n	1a42 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1a2c:	f021 0107 	bic.w	r1, r1, #7
    1a30:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1a32:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    1a34:	4620      	mov	r0, r4
    1a36:	f00b f8a4 	bl	cb82 <process_recheck>
    1a3a:	b110      	cbz	r0, 1a42 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1a3c:	f041 0120 	orr.w	r1, r1, #32
    1a40:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1a42:	8b21      	ldrh	r1, [r4, #24]
    1a44:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1a48:	45aa      	cmp	sl, r5
    1a4a:	d050      	beq.n	1aee <process_event+0x1a2>
    1a4c:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    1a4e:	46b9      	mov	r9, r7
    1a50:	e7aa      	b.n	19a8 <process_event+0x5c>
			transit = mgr->transitions->start;
    1a52:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1a54:	f021 0107 	bic.w	r1, r1, #7
    1a58:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    1a5c:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    1a5e:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1a62:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1a64:	d12d      	bne.n	1ac2 <process_event+0x176>
		    || (transit != NULL)) {
    1a66:	f1b9 0f00 	cmp.w	r9, #0
    1a6a:	d040      	beq.n	1aee <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1a6c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1a70:	8321      	strh	r1, [r4, #24]
    1a72:	f388 8811 	msr	BASEPRI, r8
    1a76:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    1a7a:	493a      	ldr	r1, [pc, #232]	; (1b64 <process_event+0x218>)
    1a7c:	4620      	mov	r0, r4
    1a7e:	47c8      	blx	r9
    1a80:	e029      	b.n	1ad6 <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1a82:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    1a86:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1a88:	f041 0104 	orr.w	r1, r1, #4
    1a8c:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    1a8e:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    1a90:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1a94:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1a96:	d0e6      	beq.n	1a66 <process_event+0x11a>
    1a98:	2700      	movs	r7, #0
		res = 0;
    1a9a:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1a9c:	f04f 0a04 	mov.w	sl, #4
    1aa0:	e782      	b.n	19a8 <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1aa2:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    1aa6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1aa8:	f041 0105 	orr.w	r1, r1, #5
    1aac:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    1aae:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    1ab0:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    1ab4:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    1ab6:	d0d6      	beq.n	1a66 <process_event+0x11a>
    1ab8:	2700      	movs	r7, #0
		res = 0;
    1aba:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1abc:	f04f 0a05 	mov.w	sl, #5
    1ac0:	e772      	b.n	19a8 <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    1ac2:	2700      	movs	r7, #0
		res = 0;
    1ac4:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1ac6:	f04f 0a06 	mov.w	sl, #6
    1aca:	e76d      	b.n	19a8 <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1acc:	462b      	mov	r3, r5
    1ace:	e787      	b.n	19e0 <process_event+0x94>
			if (transit != NULL) {
    1ad0:	f1b9 0f00 	cmp.w	r9, #0
    1ad4:	d1d1      	bne.n	1a7a <process_event+0x12e>
	__asm__ volatile(
    1ad6:	f04f 0340 	mov.w	r3, #64	; 0x40
    1ada:	f3ef 8811 	mrs	r8, BASEPRI
    1ade:	f383 8812 	msr	BASEPRI_MAX, r3
    1ae2:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    1ae6:	8b23      	ldrh	r3, [r4, #24]
    1ae8:	f023 0308 	bic.w	r3, r3, #8
    1aec:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1aee:	8b25      	ldrh	r5, [r4, #24]
    1af0:	06ea      	lsls	r2, r5, #27
    1af2:	d52e      	bpl.n	1b52 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1af4:	f025 0310 	bic.w	r3, r5, #16
    1af8:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1afa:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    1afe:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1b00:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    1b02:	2e00      	cmp	r6, #0
    1b04:	f6bf af6f 	bge.w	19e6 <process_event+0x9a>
	list->head = NULL;
    1b08:	2300      	movs	r3, #0
		*clients = mgr->clients;
    1b0a:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    1b0c:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1b10:	f021 0107 	bic.w	r1, r1, #7
    1b14:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1b18:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1b1a:	8b21      	ldrh	r1, [r4, #24]
    1b1c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1b20:	45aa      	cmp	sl, r5
    1b22:	f04f 0900 	mov.w	r9, #0
    1b26:	f47f af3f 	bne.w	19a8 <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    1b2a:	2f00      	cmp	r7, #0
    1b2c:	d09b      	beq.n	1a66 <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1b2e:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1b32:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    1b34:	f388 8811 	msr	BASEPRI, r8
    1b38:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    1b3c:	2f00      	cmp	r7, #0
    1b3e:	d0c7      	beq.n	1ad0 <process_event+0x184>
	return node->next;
    1b40:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    1b42:	4639      	mov	r1, r7
    1b44:	4633      	mov	r3, r6
    1b46:	4652      	mov	r2, sl
    1b48:	4620      	mov	r0, r4
    1b4a:	f00b f846 	bl	cbda <notify_one>
	list->head = node;
    1b4e:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    1b50:	e7f4      	b.n	1b3c <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    1b52:	06ab      	lsls	r3, r5, #26
    1b54:	f57f af1a 	bpl.w	198c <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    1b58:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1b5c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    1b5e:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    1b62:	e6ff      	b.n	1964 <process_event+0x18>
    1b64:	0000cc07 	.word	0x0000cc07

00001b68 <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    1b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b6c:	4681      	mov	r9, r0
    1b6e:	b095      	sub	sp, #84	; 0x54
    1b70:	468b      	mov	fp, r1
    1b72:	4617      	mov	r7, r2
    1b74:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1b76:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1b78:	7838      	ldrb	r0, [r7, #0]
    1b7a:	b908      	cbnz	r0, 1b80 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    1b7c:	4628      	mov	r0, r5
    1b7e:	e358      	b.n	2232 <CONFIG_USB_DEVICE_VID+0x234>
			OUTC(*fp++);
    1b80:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    1b82:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    1b84:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    1b86:	d006      	beq.n	1b96 <z_cbvprintf_impl+0x2e>
			OUTC('%');
    1b88:	4659      	mov	r1, fp
    1b8a:	47c8      	blx	r9
    1b8c:	2800      	cmp	r0, #0
    1b8e:	f2c0 8350 	blt.w	2232 <CONFIG_USB_DEVICE_VID+0x234>
    1b92:	3501      	adds	r5, #1
		if (bps == NULL) {
    1b94:	e1fb      	b.n	1f8e <z_cbvprintf_impl+0x426>
		} state = {
    1b96:	2218      	movs	r2, #24
    1b98:	2100      	movs	r1, #0
    1b9a:	a80e      	add	r0, sp, #56	; 0x38
    1b9c:	f00b fd03 	bl	d5a6 <memset>
	if (*sp == '%') {
    1ba0:	787b      	ldrb	r3, [r7, #1]
    1ba2:	2b25      	cmp	r3, #37	; 0x25
    1ba4:	d07d      	beq.n	1ca2 <z_cbvprintf_impl+0x13a>
    1ba6:	2300      	movs	r3, #0
    1ba8:	1c78      	adds	r0, r7, #1
    1baa:	4698      	mov	r8, r3
    1bac:	469e      	mov	lr, r3
    1bae:	469c      	mov	ip, r3
    1bb0:	461e      	mov	r6, r3
    1bb2:	4601      	mov	r1, r0
		switch (*sp) {
    1bb4:	f810 2b01 	ldrb.w	r2, [r0], #1
    1bb8:	2a2b      	cmp	r2, #43	; 0x2b
    1bba:	f000 80a1 	beq.w	1d00 <z_cbvprintf_impl+0x198>
    1bbe:	f200 8098 	bhi.w	1cf2 <z_cbvprintf_impl+0x18a>
    1bc2:	2a20      	cmp	r2, #32
    1bc4:	f000 809f 	beq.w	1d06 <z_cbvprintf_impl+0x19e>
    1bc8:	2a23      	cmp	r2, #35	; 0x23
    1bca:	f000 809f 	beq.w	1d0c <z_cbvprintf_impl+0x1a4>
    1bce:	b12b      	cbz	r3, 1bdc <z_cbvprintf_impl+0x74>
    1bd0:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1bd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1bd8:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1bdc:	f1b8 0f00 	cmp.w	r8, #0
    1be0:	d005      	beq.n	1bee <z_cbvprintf_impl+0x86>
    1be2:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1be6:	f043 0320 	orr.w	r3, r3, #32
    1bea:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1bee:	f1be 0f00 	cmp.w	lr, #0
    1bf2:	d005      	beq.n	1c00 <z_cbvprintf_impl+0x98>
    1bf4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1bf8:	f043 0310 	orr.w	r3, r3, #16
    1bfc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1c00:	f1bc 0f00 	cmp.w	ip, #0
    1c04:	d005      	beq.n	1c12 <z_cbvprintf_impl+0xaa>
    1c06:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1c0a:	f043 0308 	orr.w	r3, r3, #8
    1c0e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    1c12:	b12e      	cbz	r6, 1c20 <z_cbvprintf_impl+0xb8>
    1c14:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1c18:	f043 0304 	orr.w	r3, r3, #4
    1c1c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    1c20:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1c24:	f003 0044 	and.w	r0, r3, #68	; 0x44
    1c28:	2844      	cmp	r0, #68	; 0x44
    1c2a:	d103      	bne.n	1c34 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    1c2c:	f36f 1386 	bfc	r3, #6, #1
    1c30:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    1c34:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    1c38:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    1c3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    1c3e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    1c42:	d17f      	bne.n	1d44 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    1c44:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1c48:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    1c4c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    1c4e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    1c52:	781a      	ldrb	r2, [r3, #0]
    1c54:	2a2e      	cmp	r2, #46	; 0x2e
    1c56:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1c5a:	bf0c      	ite	eq
    1c5c:	2101      	moveq	r1, #1
    1c5e:	2100      	movne	r1, #0
    1c60:	f361 0241 	bfi	r2, r1, #1, #1
    1c64:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    1c68:	d178      	bne.n	1d5c <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    1c6a:	785a      	ldrb	r2, [r3, #1]
    1c6c:	2a2a      	cmp	r2, #42	; 0x2a
    1c6e:	d06e      	beq.n	1d4e <z_cbvprintf_impl+0x1e6>
	++sp;
    1c70:	3301      	adds	r3, #1
	size_t val = 0;
    1c72:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1c74:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1c78:	4619      	mov	r1, r3
    1c7a:	f811 0b01 	ldrb.w	r0, [r1], #1
    1c7e:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    1c82:	2e09      	cmp	r6, #9
    1c84:	f240 8095 	bls.w	1db2 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    1c88:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    1c8c:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    1c8e:	f3c1 0040 	ubfx	r0, r1, #1, #1
    1c92:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    1c96:	460a      	mov	r2, r1
    1c98:	f360 0241 	bfi	r2, r0, #1, #1
    1c9c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    1ca0:	e05c      	b.n	1d5c <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    1ca2:	1cba      	adds	r2, r7, #2
    1ca4:	9203      	str	r2, [sp, #12]
    1ca6:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    1caa:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    1cae:	07da      	lsls	r2, r3, #31
    1cb0:	f140 812e 	bpl.w	1f10 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    1cb4:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    1cb8:	f1b8 0f00 	cmp.w	r8, #0
    1cbc:	da07      	bge.n	1cce <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    1cbe:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    1cc2:	f042 0204 	orr.w	r2, r2, #4
    1cc6:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
    1cca:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    1cce:	075e      	lsls	r6, r3, #29
    1cd0:	f140 8127 	bpl.w	1f22 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    1cd4:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    1cd8:	f1ba 0f00 	cmp.w	sl, #0
    1cdc:	f280 8126 	bge.w	1f2c <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    1ce0:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    1ce4:	f36f 0341 	bfc	r3, #1, #1
    1ce8:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    1cec:	f04f 3aff 	mov.w	sl, #4294967295
    1cf0:	e11c      	b.n	1f2c <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    1cf2:	2a2d      	cmp	r2, #45	; 0x2d
    1cf4:	d00d      	beq.n	1d12 <z_cbvprintf_impl+0x1aa>
    1cf6:	2a30      	cmp	r2, #48	; 0x30
    1cf8:	f47f af69 	bne.w	1bce <z_cbvprintf_impl+0x66>
    1cfc:	2301      	movs	r3, #1
	} while (loop);
    1cfe:	e758      	b.n	1bb2 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    1d00:	f04f 0c01 	mov.w	ip, #1
    1d04:	e755      	b.n	1bb2 <z_cbvprintf_impl+0x4a>
    1d06:	f04f 0e01 	mov.w	lr, #1
    1d0a:	e752      	b.n	1bb2 <z_cbvprintf_impl+0x4a>
    1d0c:	f04f 0801 	mov.w	r8, #1
    1d10:	e74f      	b.n	1bb2 <z_cbvprintf_impl+0x4a>
    1d12:	2601      	movs	r6, #1
    1d14:	e74d      	b.n	1bb2 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    1d16:	fb0e 6202 	mla	r2, lr, r2, r6
    1d1a:	3a30      	subs	r2, #48	; 0x30
    1d1c:	4603      	mov	r3, r0
    1d1e:	4618      	mov	r0, r3
    1d20:	f810 6b01 	ldrb.w	r6, [r0], #1
    1d24:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    1d28:	f1bc 0f09 	cmp.w	ip, #9
    1d2c:	d9f3      	bls.n	1d16 <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    1d2e:	4299      	cmp	r1, r3
    1d30:	d08f      	beq.n	1c52 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1d32:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    1d36:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    1d38:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1d3a:	f362 0141 	bfi	r1, r2, #1, #1
    1d3e:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    1d42:	e786      	b.n	1c52 <z_cbvprintf_impl+0xea>
    1d44:	460b      	mov	r3, r1
	size_t val = 0;
    1d46:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1d48:	f04f 0e0a 	mov.w	lr, #10
    1d4c:	e7e7      	b.n	1d1e <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    1d4e:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1d52:	f042 0204 	orr.w	r2, r2, #4
    1d56:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    1d5a:	3302      	adds	r3, #2
	switch (*sp) {
    1d5c:	781a      	ldrb	r2, [r3, #0]
    1d5e:	2a6c      	cmp	r2, #108	; 0x6c
    1d60:	d047      	beq.n	1df2 <z_cbvprintf_impl+0x28a>
    1d62:	d82b      	bhi.n	1dbc <z_cbvprintf_impl+0x254>
    1d64:	2a68      	cmp	r2, #104	; 0x68
    1d66:	d031      	beq.n	1dcc <z_cbvprintf_impl+0x264>
    1d68:	2a6a      	cmp	r2, #106	; 0x6a
    1d6a:	d04b      	beq.n	1e04 <z_cbvprintf_impl+0x29c>
    1d6c:	2a4c      	cmp	r2, #76	; 0x4c
    1d6e:	d051      	beq.n	1e14 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    1d70:	461a      	mov	r2, r3
    1d72:	f812 3b01 	ldrb.w	r3, [r2], #1
    1d76:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    1d78:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    1d7a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    1d7e:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    1d82:	f200 80be 	bhi.w	1f02 <z_cbvprintf_impl+0x39a>
    1d86:	2b6d      	cmp	r3, #109	; 0x6d
    1d88:	d851      	bhi.n	1e2e <z_cbvprintf_impl+0x2c6>
    1d8a:	2b69      	cmp	r3, #105	; 0x69
    1d8c:	f200 80b9 	bhi.w	1f02 <z_cbvprintf_impl+0x39a>
    1d90:	2b57      	cmp	r3, #87	; 0x57
    1d92:	d867      	bhi.n	1e64 <z_cbvprintf_impl+0x2fc>
    1d94:	2b41      	cmp	r3, #65	; 0x41
    1d96:	d003      	beq.n	1da0 <z_cbvprintf_impl+0x238>
    1d98:	3b45      	subs	r3, #69	; 0x45
    1d9a:	2b02      	cmp	r3, #2
    1d9c:	f200 80b1 	bhi.w	1f02 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    1da0:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1da4:	2204      	movs	r2, #4
    1da6:	f362 0302 	bfi	r3, r2, #0, #3
    1daa:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    1dae:	2301      	movs	r3, #1
			break;
    1db0:	e073      	b.n	1e9a <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    1db2:	fb0c 0202 	mla	r2, ip, r2, r0
    1db6:	3a30      	subs	r2, #48	; 0x30
    1db8:	460b      	mov	r3, r1
    1dba:	e75d      	b.n	1c78 <z_cbvprintf_impl+0x110>
	switch (*sp) {
    1dbc:	2a74      	cmp	r2, #116	; 0x74
    1dbe:	d025      	beq.n	1e0c <z_cbvprintf_impl+0x2a4>
    1dc0:	2a7a      	cmp	r2, #122	; 0x7a
    1dc2:	d1d5      	bne.n	1d70 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    1dc4:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1dc8:	2106      	movs	r1, #6
    1dca:	e00c      	b.n	1de6 <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    1dcc:	785a      	ldrb	r2, [r3, #1]
    1dce:	2a68      	cmp	r2, #104	; 0x68
    1dd0:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1dd4:	d106      	bne.n	1de4 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    1dd6:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1dd8:	f361 02c6 	bfi	r2, r1, #3, #4
    1ddc:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    1de0:	3302      	adds	r3, #2
    1de2:	e7c5      	b.n	1d70 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    1de4:	2102      	movs	r1, #2
    1de6:	f361 02c6 	bfi	r2, r1, #3, #4
    1dea:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    1dee:	3301      	adds	r3, #1
    1df0:	e7be      	b.n	1d70 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    1df2:	785a      	ldrb	r2, [r3, #1]
    1df4:	2a6c      	cmp	r2, #108	; 0x6c
    1df6:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1dfa:	d101      	bne.n	1e00 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    1dfc:	2104      	movs	r1, #4
    1dfe:	e7eb      	b.n	1dd8 <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    1e00:	2103      	movs	r1, #3
    1e02:	e7f0      	b.n	1de6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    1e04:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1e08:	2105      	movs	r1, #5
    1e0a:	e7ec      	b.n	1de6 <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    1e0c:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    1e10:	2107      	movs	r1, #7
    1e12:	e7e8      	b.n	1de6 <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    1e14:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    1e18:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    1e1c:	f022 0202 	bic.w	r2, r2, #2
    1e20:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    1e24:	f042 0202 	orr.w	r2, r2, #2
    1e28:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    1e2c:	e7df      	b.n	1dee <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    1e2e:	3b6e      	subs	r3, #110	; 0x6e
    1e30:	b2d9      	uxtb	r1, r3
    1e32:	2301      	movs	r3, #1
    1e34:	408b      	lsls	r3, r1
    1e36:	f240 4182 	movw	r1, #1154	; 0x482
    1e3a:	420b      	tst	r3, r1
    1e3c:	d137      	bne.n	1eae <z_cbvprintf_impl+0x346>
    1e3e:	f013 0f24 	tst.w	r3, #36	; 0x24
    1e42:	d151      	bne.n	1ee8 <z_cbvprintf_impl+0x380>
    1e44:	07d8      	lsls	r0, r3, #31
    1e46:	d55c      	bpl.n	1f02 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    1e48:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1e4c:	2103      	movs	r1, #3
    1e4e:	f361 0302 	bfi	r3, r1, #0, #3
    1e52:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    1e56:	f002 0378 	and.w	r3, r2, #120	; 0x78
    1e5a:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    1e5e:	424b      	negs	r3, r1
    1e60:	414b      	adcs	r3, r1
    1e62:	e01a      	b.n	1e9a <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
    1e64:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    1e68:	b2c9      	uxtb	r1, r1
    1e6a:	2001      	movs	r0, #1
    1e6c:	fa00 f101 	lsl.w	r1, r0, r1
    1e70:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    1e74:	d194      	bne.n	1da0 <z_cbvprintf_impl+0x238>
    1e76:	f640 0601 	movw	r6, #2049	; 0x801
    1e7a:	4231      	tst	r1, r6
    1e7c:	d11d      	bne.n	1eba <z_cbvprintf_impl+0x352>
    1e7e:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    1e82:	d03e      	beq.n	1f02 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    1e84:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1e88:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1e8c:	f002 0278 	and.w	r2, r2, #120	; 0x78
    1e90:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    1e92:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    1e96:	d034      	beq.n	1f02 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    1e98:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    1e9a:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    1e9e:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1ea2:	430b      	orrs	r3, r1
    1ea4:	f363 0241 	bfi	r2, r3, #1, #1
    1ea8:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    1eac:	e6fd      	b.n	1caa <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    1eae:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1eb2:	2102      	movs	r1, #2
    1eb4:	f361 0302 	bfi	r3, r1, #0, #3
    1eb8:	e7e8      	b.n	1e8c <z_cbvprintf_impl+0x324>
    1eba:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    1ebe:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    1ec0:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1ec4:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1ec8:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1eca:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    1ece:	bf02      	ittt	eq
    1ed0:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    1ed4:	f041 0101 	orreq.w	r1, r1, #1
    1ed8:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    1edc:	2b63      	cmp	r3, #99	; 0x63
    1ede:	d1db      	bne.n	1e98 <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1ee0:	1e13      	subs	r3, r2, #0
    1ee2:	bf18      	it	ne
    1ee4:	2301      	movne	r3, #1
    1ee6:	e7d8      	b.n	1e9a <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    1ee8:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    1eec:	2103      	movs	r1, #3
    1eee:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    1ef2:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1ef6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    1efa:	bf14      	ite	ne
    1efc:	2301      	movne	r3, #1
    1efe:	2300      	moveq	r3, #0
    1f00:	e7cb      	b.n	1e9a <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    1f02:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1f06:	f043 0301 	orr.w	r3, r3, #1
    1f0a:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    1f0e:	e7c3      	b.n	1e98 <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    1f10:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    1f14:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1f16:	bfb4      	ite	lt
    1f18:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    1f1c:	f04f 38ff 	movge.w	r8, #4294967295
    1f20:	e6d5      	b.n	1cce <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    1f22:	0798      	lsls	r0, r3, #30
    1f24:	f57f aee2 	bpl.w	1cec <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    1f28:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    1f2c:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    1f30:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1f32:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    1f36:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    1f3a:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    1f3e:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    1f40:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1f44:	d133      	bne.n	1fae <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    1f46:	1ecb      	subs	r3, r1, #3
    1f48:	2b04      	cmp	r3, #4
    1f4a:	d804      	bhi.n	1f56 <z_cbvprintf_impl+0x3ee>
    1f4c:	e8df f003 	tbb	[pc, r3]
    1f50:	21464621 	.word	0x21464621
    1f54:	21          	.byte	0x21
    1f55:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    1f56:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    1f58:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    1f5a:	ea4f 72e3 	mov.w	r2, r3, asr #31
    1f5e:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    1f62:	d11c      	bne.n	1f9e <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    1f64:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    1f68:	17da      	asrs	r2, r3, #31
    1f6a:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    1f6e:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    1f70:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    1f74:	f013 0603 	ands.w	r6, r3, #3
    1f78:	d050      	beq.n	201c <CONFIG_USB_DEVICE_VID+0x1e>
			OUTS(sp, fp);
    1f7a:	9b03      	ldr	r3, [sp, #12]
    1f7c:	463a      	mov	r2, r7
    1f7e:	4659      	mov	r1, fp
    1f80:	4648      	mov	r0, r9
    1f82:	f00a ff5e 	bl	ce42 <outs>
    1f86:	2800      	cmp	r0, #0
    1f88:	f2c0 8153 	blt.w	2232 <CONFIG_USB_DEVICE_VID+0x234>
    1f8c:	4405      	add	r5, r0
			continue;
    1f8e:	9f03      	ldr	r7, [sp, #12]
    1f90:	e5f2      	b.n	1b78 <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1f92:	f854 3b04 	ldr.w	r3, [r4], #4
    1f96:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    1f98:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    1f9c:	e7e8      	b.n	1f70 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    1f9e:	2902      	cmp	r1, #2
    1fa0:	d1e5      	bne.n	1f6e <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    1fa2:	b21a      	sxth	r2, r3
    1fa4:	f343 33c0 	sbfx	r3, r3, #15, #1
    1fa8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    1fac:	e7df      	b.n	1f6e <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1fae:	2b02      	cmp	r3, #2
    1fb0:	d124      	bne.n	1ffc <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    1fb2:	1ecb      	subs	r3, r1, #3
    1fb4:	2b04      	cmp	r3, #4
    1fb6:	d804      	bhi.n	1fc2 <z_cbvprintf_impl+0x45a>
    1fb8:	e8df f003 	tbb	[pc, r3]
    1fbc:	18101018 	.word	0x18101018
    1fc0:	18          	.byte	0x18
    1fc1:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    1fc2:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    1fc4:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1fc8:	f04f 0200 	mov.w	r2, #0
    1fcc:	d014      	beq.n	1ff8 <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    1fce:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    1fd0:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    1fd4:	d1cc      	bne.n	1f70 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    1fd6:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    1fd8:	930e      	str	r3, [sp, #56]	; 0x38
    1fda:	e7c9      	b.n	1f70 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    1fdc:	3407      	adds	r4, #7
    1fde:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    1fe2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    1fe6:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    1fea:	e7c1      	b.n	1f70 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    1fec:	f854 3b04 	ldr.w	r3, [r4], #4
    1ff0:	930e      	str	r3, [sp, #56]	; 0x38
    1ff2:	2300      	movs	r3, #0
    1ff4:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    1ff6:	e7bb      	b.n	1f70 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    1ff8:	b2db      	uxtb	r3, r3
    1ffa:	e7cd      	b.n	1f98 <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    1ffc:	2b04      	cmp	r3, #4
    1ffe:	d108      	bne.n	2012 <CONFIG_USB_DEVICE_VID+0x14>
					(sint_value_type)va_arg(ap, long long);
    2000:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    2002:	f024 0407 	bic.w	r4, r4, #7
    2006:	e9d4 2300 	ldrd	r2, r3, [r4]
    200a:	3408      	adds	r4, #8
    200c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    2010:	e7ae      	b.n	1f70 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    2012:	2b03      	cmp	r3, #3
    2014:	d1ac      	bne.n	1f70 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    2016:	f854 3b04 	ldr.w	r3, [r4], #4
    201a:	e7dd      	b.n	1fd8 <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    201c:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    2020:	2878      	cmp	r0, #120	; 0x78
    2022:	d8b4      	bhi.n	1f8e <z_cbvprintf_impl+0x426>
    2024:	2862      	cmp	r0, #98	; 0x62
    2026:	d81c      	bhi.n	2062 <CONFIG_USB_DEVICE_VID+0x64>
    2028:	2825      	cmp	r0, #37	; 0x25
    202a:	f43f adad 	beq.w	1b88 <z_cbvprintf_impl+0x20>
    202e:	2858      	cmp	r0, #88	; 0x58
    2030:	d1ad      	bne.n	1f8e <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    2032:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    2036:	9300      	str	r3, [sp, #0]
    2038:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    203c:	ab08      	add	r3, sp, #32
    203e:	aa10      	add	r2, sp, #64	; 0x40
    2040:	f00a feb9 	bl	cdb6 <encode_uint>
			if (precision >= 0) {
    2044:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    2048:	4607      	mov	r7, r0
			if (precision >= 0) {
    204a:	f280 809a 	bge.w	2182 <CONFIG_USB_DEVICE_VID+0x184>
		if (bps == NULL) {
    204e:	2f00      	cmp	r7, #0
    2050:	d09d      	beq.n	1f8e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    2052:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    2056:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    2058:	2e00      	cmp	r6, #0
    205a:	f000 80c1 	beq.w	21e0 <CONFIG_USB_DEVICE_VID+0x1e2>
			nj_len += 1U;
    205e:	3001      	adds	r0, #1
    2060:	e0be      	b.n	21e0 <CONFIG_USB_DEVICE_VID+0x1e2>
		switch (conv->specifier) {
    2062:	3863      	subs	r0, #99	; 0x63
    2064:	2815      	cmp	r0, #21
    2066:	d892      	bhi.n	1f8e <z_cbvprintf_impl+0x426>
    2068:	a201      	add	r2, pc, #4	; (adr r2, 2070 <CONFIG_USB_DEVICE_VID+0x72>)
    206a:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    206e:	bf00      	nop
    2070:	00002145 	.word	0x00002145
    2074:	00002157 	.word	0x00002157
    2078:	00001f8f 	.word	0x00001f8f
    207c:	00001f8f 	.word	0x00001f8f
    2080:	00001f8f 	.word	0x00001f8f
    2084:	00001f8f 	.word	0x00001f8f
    2088:	00002157 	.word	0x00002157
    208c:	00001f8f 	.word	0x00001f8f
    2090:	00001f8f 	.word	0x00001f8f
    2094:	00001f8f 	.word	0x00001f8f
    2098:	00001f8f 	.word	0x00001f8f
    209c:	000021e5 	.word	0x000021e5
    20a0:	0000217d 	.word	0x0000217d
    20a4:	000021a3 	.word	0x000021a3
    20a8:	00001f8f 	.word	0x00001f8f
    20ac:	00001f8f 	.word	0x00001f8f
    20b0:	000020c9 	.word	0x000020c9
    20b4:	00001f8f 	.word	0x00001f8f
    20b8:	0000217d 	.word	0x0000217d
    20bc:	00001f8f 	.word	0x00001f8f
    20c0:	00001f8f 	.word	0x00001f8f
    20c4:	0000217d 	.word	0x0000217d
			if (precision >= 0) {
    20c8:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    20cc:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    20ce:	db35      	blt.n	213c <CONFIG_USB_DEVICE_VID+0x13e>
				len = strnlen(bps, precision);
    20d0:	4651      	mov	r1, sl
    20d2:	4638      	mov	r0, r7
    20d4:	f00b fa47 	bl	d566 <strnlen>
			bpe = bps + len;
    20d8:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    20dc:	2f00      	cmp	r7, #0
    20de:	f43f af56 	beq.w	1f8e <z_cbvprintf_impl+0x426>
		char sign = 0;
    20e2:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    20e4:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    20e8:	f013 0210 	ands.w	r2, r3, #16
    20ec:	9205      	str	r2, [sp, #20]
    20ee:	f000 8093 	beq.w	2218 <CONFIG_USB_DEVICE_VID+0x21a>
			nj_len += 2U;
    20f2:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    20f4:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    20f6:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    20f8:	bf48      	it	mi
    20fa:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    20fc:	9204      	str	r2, [sp, #16]
    20fe:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    2100:	bf48      	it	mi
    2102:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    2104:	f1b8 0f00 	cmp.w	r8, #0
    2108:	f340 80a0 	ble.w	224c <CONFIG_USB_DEVICE_VID+0x24e>
			if (!conv->flag_dash) {
    210c:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    2110:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    2114:	f3c2 0380 	ubfx	r3, r2, #2, #1
    2118:	0750      	lsls	r0, r2, #29
    211a:	9306      	str	r3, [sp, #24]
    211c:	f100 8096 	bmi.w	224c <CONFIG_USB_DEVICE_VID+0x24e>
				if (conv->flag_zero) {
    2120:	0651      	lsls	r1, r2, #25
    2122:	f140 8089 	bpl.w	2238 <CONFIG_USB_DEVICE_VID+0x23a>
					if (sign != 0) {
    2126:	b13e      	cbz	r6, 2138 <CONFIG_USB_DEVICE_VID+0x13a>
						OUTC(sign);
    2128:	4659      	mov	r1, fp
    212a:	4630      	mov	r0, r6
    212c:	47c8      	blx	r9
    212e:	2800      	cmp	r0, #0
    2130:	db7f      	blt.n	2232 <CONFIG_USB_DEVICE_VID+0x234>
    2132:	9b06      	ldr	r3, [sp, #24]
    2134:	3501      	adds	r5, #1
    2136:	461e      	mov	r6, r3
					pad = '0';
    2138:	2230      	movs	r2, #48	; 0x30
    213a:	e07e      	b.n	223a <CONFIG_USB_DEVICE_VID+0x23c>
				len = strlen(bps);
    213c:	4638      	mov	r0, r7
    213e:	f00b fa0b 	bl	d558 <strlen>
    2142:	e7c9      	b.n	20d8 <CONFIG_USB_DEVICE_VID+0xda>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    2144:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    2146:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    214a:	2600      	movs	r6, #0
			bps = buf;
    214c:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    214e:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    2152:	2001      	movs	r0, #1
    2154:	e7c6      	b.n	20e4 <CONFIG_USB_DEVICE_VID+0xe6>
			if (conv->flag_plus) {
    2156:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    2158:	bf5c      	itt	pl
    215a:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    215e:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    2160:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    2164:	bf48      	it	mi
    2166:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    2168:	2b00      	cmp	r3, #0
    216a:	f6bf af62 	bge.w	2032 <CONFIG_USB_DEVICE_VID+0x34>
				value->uint = (uint_value_type)-sint;
    216e:	4252      	negs	r2, r2
    2170:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    2174:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    2178:	262d      	movs	r6, #45	; 0x2d
    217a:	e75a      	b.n	2032 <CONFIG_USB_DEVICE_VID+0x34>
		switch (conv->specifier) {
    217c:	2600      	movs	r6, #0
    217e:	e758      	b.n	2032 <CONFIG_USB_DEVICE_VID+0x34>
		char sign = 0;
    2180:	2600      	movs	r6, #0
				conv->flag_zero = false;
    2182:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    2186:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    218a:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    218c:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    2190:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    2192:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    2196:	f67f af5a 	bls.w	204e <CONFIG_USB_DEVICE_VID+0x50>
					conv->pad0_value = precision - (int)len;
    219a:	ebaa 0303 	sub.w	r3, sl, r3
    219e:	9311      	str	r3, [sp, #68]	; 0x44
    21a0:	e755      	b.n	204e <CONFIG_USB_DEVICE_VID+0x50>
			if (value->ptr != NULL) {
    21a2:	980e      	ldr	r0, [sp, #56]	; 0x38
    21a4:	b390      	cbz	r0, 220c <CONFIG_USB_DEVICE_VID+0x20e>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    21a6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    21aa:	9300      	str	r3, [sp, #0]
    21ac:	aa10      	add	r2, sp, #64	; 0x40
    21ae:	ab08      	add	r3, sp, #32
    21b0:	2100      	movs	r1, #0
    21b2:	f00a fe00 	bl	cdb6 <encode_uint>
				conv->altform_0c = true;
    21b6:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    21ba:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    21be:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    21c2:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    21c6:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    21ca:	4607      	mov	r7, r0
				conv->altform_0c = true;
    21cc:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    21d0:	dad6      	bge.n	2180 <CONFIG_USB_DEVICE_VID+0x182>
		if (bps == NULL) {
    21d2:	2800      	cmp	r0, #0
    21d4:	f43f aedb 	beq.w	1f8e <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    21d8:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    21dc:	1a18      	subs	r0, r3, r0
		char sign = 0;
    21de:	2600      	movs	r6, #0
    21e0:	469a      	mov	sl, r3
    21e2:	e77f      	b.n	20e4 <CONFIG_USB_DEVICE_VID+0xe6>
				store_count(conv, value->ptr, count);
    21e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    21e6:	2907      	cmp	r1, #7
    21e8:	f63f aed1 	bhi.w	1f8e <z_cbvprintf_impl+0x426>
    21ec:	e8df f001 	tbb	[pc, r1]
    21f0:	0c06040c 	.word	0x0c06040c
    21f4:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    21f8:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    21fa:	e6c8      	b.n	1f8e <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    21fc:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    21fe:	e6c6      	b.n	1f8e <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    2200:	17ea      	asrs	r2, r5, #31
    2202:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    2206:	e6c2      	b.n	1f8e <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    2208:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    220a:	e6c0      	b.n	1f8e <z_cbvprintf_impl+0x426>
    220c:	4f2e      	ldr	r7, [pc, #184]	; (22c8 <CONFIG_USB_DEVICE_VID+0x2ca>)
		char sign = 0;
    220e:	4606      	mov	r6, r0
			bpe = bps + 5;
    2210:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    2214:	2005      	movs	r0, #5
    2216:	e765      	b.n	20e4 <CONFIG_USB_DEVICE_VID+0xe6>
		} else if (conv->altform_0) {
    2218:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    221a:	bf48      	it	mi
    221c:	3001      	addmi	r0, #1
    221e:	e769      	b.n	20f4 <CONFIG_USB_DEVICE_VID+0xf6>
    2220:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    2222:	4610      	mov	r0, r2
    2224:	9206      	str	r2, [sp, #24]
    2226:	4659      	mov	r1, fp
    2228:	47c8      	blx	r9
    222a:	2800      	cmp	r0, #0
    222c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2230:	da04      	bge.n	223c <CONFIG_USB_DEVICE_VID+0x23e>
#undef OUTS
#undef OUTC
}
    2232:	b015      	add	sp, #84	; 0x54
    2234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    2238:	2220      	movs	r2, #32
					pad = '0';
    223a:	4643      	mov	r3, r8
				while (width-- > 0) {
    223c:	4619      	mov	r1, r3
    223e:	2900      	cmp	r1, #0
    2240:	f103 33ff 	add.w	r3, r3, #4294967295
    2244:	dcec      	bgt.n	2220 <CONFIG_USB_DEVICE_VID+0x222>
    2246:	4445      	add	r5, r8
    2248:	1a6d      	subs	r5, r5, r1
    224a:	4698      	mov	r8, r3
		if (sign != 0) {
    224c:	b12e      	cbz	r6, 225a <CONFIG_USB_DEVICE_VID+0x25c>
			OUTC(sign);
    224e:	4659      	mov	r1, fp
    2250:	4630      	mov	r0, r6
    2252:	47c8      	blx	r9
    2254:	2800      	cmp	r0, #0
    2256:	dbec      	blt.n	2232 <CONFIG_USB_DEVICE_VID+0x234>
    2258:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    225a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    225e:	06da      	lsls	r2, r3, #27
    2260:	d401      	bmi.n	2266 <CONFIG_USB_DEVICE_VID+0x268>
    2262:	071b      	lsls	r3, r3, #28
    2264:	d505      	bpl.n	2272 <CONFIG_USB_DEVICE_VID+0x274>
				OUTC('0');
    2266:	4659      	mov	r1, fp
    2268:	2030      	movs	r0, #48	; 0x30
    226a:	47c8      	blx	r9
    226c:	2800      	cmp	r0, #0
    226e:	dbe0      	blt.n	2232 <CONFIG_USB_DEVICE_VID+0x234>
    2270:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    2272:	9b05      	ldr	r3, [sp, #20]
    2274:	b133      	cbz	r3, 2284 <CONFIG_USB_DEVICE_VID+0x286>
				OUTC(conv->specifier);
    2276:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    227a:	4659      	mov	r1, fp
    227c:	47c8      	blx	r9
    227e:	2800      	cmp	r0, #0
    2280:	dbd7      	blt.n	2232 <CONFIG_USB_DEVICE_VID+0x234>
    2282:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2284:	9e04      	ldr	r6, [sp, #16]
    2286:	442e      	add	r6, r5
    2288:	e005      	b.n	2296 <CONFIG_USB_DEVICE_VID+0x298>
				OUTC('0');
    228a:	4659      	mov	r1, fp
    228c:	2030      	movs	r0, #48	; 0x30
    228e:	47c8      	blx	r9
    2290:	2800      	cmp	r0, #0
    2292:	dbce      	blt.n	2232 <CONFIG_USB_DEVICE_VID+0x234>
    2294:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2296:	1b73      	subs	r3, r6, r5
    2298:	2b00      	cmp	r3, #0
    229a:	dcf6      	bgt.n	228a <CONFIG_USB_DEVICE_VID+0x28c>
			OUTS(bps, bpe);
    229c:	4653      	mov	r3, sl
    229e:	463a      	mov	r2, r7
    22a0:	4659      	mov	r1, fp
    22a2:	4648      	mov	r0, r9
    22a4:	f00a fdcd 	bl	ce42 <outs>
    22a8:	2800      	cmp	r0, #0
    22aa:	dbc2      	blt.n	2232 <CONFIG_USB_DEVICE_VID+0x234>
    22ac:	4405      	add	r5, r0
		while (width > 0) {
    22ae:	44a8      	add	r8, r5
    22b0:	eba8 0305 	sub.w	r3, r8, r5
    22b4:	2b00      	cmp	r3, #0
    22b6:	f77f ae6a 	ble.w	1f8e <z_cbvprintf_impl+0x426>
			OUTC(' ');
    22ba:	4659      	mov	r1, fp
    22bc:	2020      	movs	r0, #32
    22be:	47c8      	blx	r9
    22c0:	2800      	cmp	r0, #0
    22c2:	dbb6      	blt.n	2232 <CONFIG_USB_DEVICE_VID+0x234>
    22c4:	3501      	adds	r5, #1
			--width;
    22c6:	e7f3      	b.n	22b0 <CONFIG_USB_DEVICE_VID+0x2b2>
    22c8:	0000f178 	.word	0x0000f178

000022cc <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    22cc:	f006 be4a 	b.w	8f64 <SystemInit>

000022d0 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    22d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    22d4:	f8df 8058 	ldr.w	r8, [pc, #88]	; 2330 <activate_foreach_backend+0x60>
{
    22d8:	4604      	mov	r4, r0
	while (mask_cpy) {
    22da:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    22dc:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
    22e0:	b914      	cbnz	r4, 22e8 <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    22e2:	4638      	mov	r0, r7
    22e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    22e8:	fa94 f5a4 	rbit	r5, r4
    22ec:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    22f0:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    22f4:	012e      	lsls	r6, r5, #4
    22f6:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    22fa:	ea6f 0a03 	mvn.w	sl, r3
    22fe:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    2302:	7b2b      	ldrb	r3, [r5, #12]
    2304:	2b00      	cmp	r3, #0
    2306:	d0eb      	beq.n	22e0 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    2308:	f858 3006 	ldr.w	r3, [r8, r6]
    230c:	691b      	ldr	r3, [r3, #16]
    230e:	b94b      	cbnz	r3, 2324 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    2310:	4446      	add	r6, r8
			log_backend_enable(backend,
    2312:	2204      	movs	r2, #4
    2314:	6873      	ldr	r3, [r6, #4]
    2316:	4628      	mov	r0, r5
    2318:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    231a:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    231e:	f000 fa59 	bl	27d4 <log_backend_enable>
    2322:	e7dd      	b.n	22e0 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    2324:	4628      	mov	r0, r5
    2326:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    2328:	2800      	cmp	r0, #0
    232a:	d1d9      	bne.n	22e0 <activate_foreach_backend+0x10>
    232c:	e7f0      	b.n	2310 <activate_foreach_backend+0x40>
    232e:	bf00      	nop
    2330:	0000e960 	.word	0x0000e960

00002334 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    2334:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    2336:	4910      	ldr	r1, [pc, #64]	; (2378 <enable_logger+0x44>)
    2338:	4810      	ldr	r0, [pc, #64]	; (237c <enable_logger+0x48>)
{
    233a:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    233c:	2200      	movs	r2, #0
    233e:	f00c f92b 	bl	e598 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    2342:	4d0f      	ldr	r5, [pc, #60]	; (2380 <enable_logger+0x4c>)
    2344:	490f      	ldr	r1, [pc, #60]	; (2384 <enable_logger+0x50>)
    2346:	2200      	movs	r2, #0
    2348:	2300      	movs	r3, #0
    234a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    234e:	2400      	movs	r4, #0
    2350:	230e      	movs	r3, #14
    2352:	e9cd 3403 	strd	r3, r4, [sp, #12]
    2356:	e9cd 4401 	strd	r4, r4, [sp, #4]
    235a:	4b0b      	ldr	r3, [pc, #44]	; (2388 <enable_logger+0x54>)
    235c:	9400      	str	r4, [sp, #0]
    235e:	f44f 7240 	mov.w	r2, #768	; 0x300
    2362:	4628      	mov	r0, r5
    2364:	f009 f85c 	bl	b420 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    2368:	4908      	ldr	r1, [pc, #32]	; (238c <enable_logger+0x58>)
    236a:	4628      	mov	r0, r5
    236c:	f00b fe97 	bl	e09e <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    2370:	4620      	mov	r0, r4
    2372:	b009      	add	sp, #36	; 0x24
    2374:	bd30      	pop	{r4, r5, pc}
    2376:	bf00      	nop
    2378:	00002391 	.word	0x00002391
    237c:	20000910 	.word	0x20000910
    2380:	20000488 	.word	0x20000488
    2384:	20002400 	.word	0x20002400
    2388:	00002681 	.word	0x00002681
    238c:	0000f17e 	.word	0x0000f17e

00002390 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2390:	4801      	ldr	r0, [pc, #4]	; (2398 <log_process_thread_timer_expiry_fn+0x8>)
    2392:	f009 b9d3 	b.w	b73c <z_impl_k_sem_give>
    2396:	bf00      	nop
    2398:	200003ac 	.word	0x200003ac

0000239c <z_log_init>:
{
    239c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    23a0:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    23a2:	481f      	ldr	r0, [pc, #124]	; (2420 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x1c>)
{
    23a4:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    23a6:	f00a ffcc 	bl	d342 <atomic_inc>
    23aa:	4606      	mov	r6, r0
    23ac:	2800      	cmp	r0, #0
    23ae:	d030      	beq.n	2412 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0xe>
	uint32_t mask = 0;
    23b0:	2500      	movs	r5, #0
}
    23b2:	4628      	mov	r0, r5
    23b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    23b8:	7b23      	ldrb	r3, [r4, #12]
    23ba:	b173      	cbz	r3, 23da <z_log_init+0x3e>
	if (backend->api->init) {
    23bc:	6823      	ldr	r3, [r4, #0]
    23be:	68db      	ldr	r3, [r3, #12]
    23c0:	b10b      	cbz	r3, 23c6 <z_log_init+0x2a>
		backend->api->init(backend);
    23c2:	4620      	mov	r0, r4
    23c4:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    23c6:	6823      	ldr	r3, [r4, #0]
    23c8:	691b      	ldr	r3, [r3, #16]
    23ca:	b9d3      	cbnz	r3, 2402 <z_log_init+0x66>
				log_backend_enable(backend,
    23cc:	6863      	ldr	r3, [r4, #4]
    23ce:	2204      	movs	r2, #4
    23d0:	6819      	ldr	r1, [r3, #0]
    23d2:	4620      	mov	r0, r4
    23d4:	f000 f9fe 	bl	27d4 <log_backend_enable>
			i++;
    23d8:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    23da:	3410      	adds	r4, #16
    23dc:	454c      	cmp	r4, r9
    23de:	d3eb      	bcc.n	23b8 <z_log_init+0x1c>
	if (blocking) {
    23e0:	f1b8 0f00 	cmp.w	r8, #0
    23e4:	d0e5      	beq.n	23b2 <z_log_init+0x16>
		while (mask) {
    23e6:	2d00      	cmp	r5, #0
    23e8:	d0e2      	beq.n	23b0 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    23ea:	4628      	mov	r0, r5
    23ec:	f7ff ff70 	bl	22d0 <activate_foreach_backend>
    23f0:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    23f2:	2f00      	cmp	r7, #0
    23f4:	d0f7      	beq.n	23e6 <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    23f6:	2100      	movs	r1, #0
    23f8:	f44f 70a4 	mov.w	r0, #328	; 0x148
    23fc:	f009 fe44 	bl	c088 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    2400:	e7f1      	b.n	23e6 <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    2402:	4620      	mov	r0, r4
    2404:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    2406:	2800      	cmp	r0, #0
    2408:	d0e0      	beq.n	23cc <z_log_init+0x30>
				mask |= BIT(i);
    240a:	fa0a f306 	lsl.w	r3, sl, r6
    240e:	431d      	orrs	r5, r3
    2410:	e7e2      	b.n	23d8 <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2412:	4c04      	ldr	r4, [pc, #16]	; (2424 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x20>)
    2414:	f8df 9010 	ldr.w	r9, [pc, #16]	; 2428 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x24>
	uint32_t mask = 0;
    2418:	4605      	mov	r5, r0
				mask |= BIT(i);
    241a:	f04f 0a01 	mov.w	sl, #1
    241e:	e7dd      	b.n	23dc <z_log_init+0x40>
    2420:	20000cb8 	.word	0x20000cb8
    2424:	0000e960 	.word	0x0000e960
    2428:	0000e970 	.word	0x0000e970

0000242c <log_format_func_t_get>:
}
    242c:	4b01      	ldr	r3, [pc, #4]	; (2434 <log_format_func_t_get+0x8>)
    242e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2432:	4770      	bx	lr
    2434:	0000e9e8 	.word	0x0000e9e8

00002438 <log_set_timestamp_func>:
{
    2438:	b508      	push	{r3, lr}
    243a:	4603      	mov	r3, r0
    243c:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    243e:	b12b      	cbz	r3, 244c <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    2440:	4a04      	ldr	r2, [pc, #16]	; (2454 <log_set_timestamp_func+0x1c>)
    2442:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    2444:	f000 fc78 	bl	2d38 <log_output_timestamp_freq_set>
	return 0;
    2448:	2000      	movs	r0, #0
}
    244a:	bd08      	pop	{r3, pc}
		return -EINVAL;
    244c:	f06f 0015 	mvn.w	r0, #21
    2450:	e7fb      	b.n	244a <log_set_timestamp_func+0x12>
    2452:	bf00      	nop
    2454:	20000018 	.word	0x20000018

00002458 <z_log_notify_backend_enabled>:
{
    2458:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    245a:	4c04      	ldr	r4, [pc, #16]	; (246c <z_log_notify_backend_enabled+0x14>)
    245c:	7823      	ldrb	r3, [r4, #0]
    245e:	b913      	cbnz	r3, 2466 <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    2460:	4803      	ldr	r0, [pc, #12]	; (2470 <z_log_notify_backend_enabled+0x18>)
    2462:	f009 f96b 	bl	b73c <z_impl_k_sem_give>
	backend_attached = true;
    2466:	2301      	movs	r3, #1
    2468:	7023      	strb	r3, [r4, #0]
}
    246a:	bd10      	pop	{r4, pc}
    246c:	20001d01 	.word	0x20001d01
    2470:	200003ac 	.word	0x200003ac

00002474 <z_log_dropped>:
{
    2474:	b510      	push	{r4, lr}
    2476:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    2478:	4808      	ldr	r0, [pc, #32]	; (249c <z_log_dropped+0x28>)
    247a:	f00a ff62 	bl	d342 <atomic_inc>
	if (buffered) {
    247e:	b15c      	cbz	r4, 2498 <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2480:	f3bf 8f5b 	dmb	ish
    2484:	4b06      	ldr	r3, [pc, #24]	; (24a0 <z_log_dropped+0x2c>)
    2486:	e853 1f00 	ldrex	r1, [r3]
    248a:	3901      	subs	r1, #1
    248c:	e843 1200 	strex	r2, r1, [r3]
    2490:	2a00      	cmp	r2, #0
    2492:	d1f8      	bne.n	2486 <z_log_dropped+0x12>
    2494:	f3bf 8f5b 	dmb	ish
}
    2498:	bd10      	pop	{r4, pc}
    249a:	bf00      	nop
    249c:	20000cb0 	.word	0x20000cb0
    24a0:	20000cb4 	.word	0x20000cb4

000024a4 <z_log_dropped_read_and_clear>:
}
    24a4:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    24a6:	4b06      	ldr	r3, [pc, #24]	; (24c0 <z_log_dropped_read_and_clear+0x1c>)
    24a8:	f3bf 8f5b 	dmb	ish
    24ac:	4601      	mov	r1, r0
    24ae:	e853 0f00 	ldrex	r0, [r3]
    24b2:	e843 1200 	strex	r2, r1, [r3]
    24b6:	2a00      	cmp	r2, #0
    24b8:	d1f9      	bne.n	24ae <z_log_dropped_read_and_clear+0xa>
    24ba:	f3bf 8f5b 	dmb	ish
    24be:	4770      	bx	lr
    24c0:	20000cb0 	.word	0x20000cb0

000024c4 <dropped_notify>:
{
    24c4:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    24c6:	f7ff ffed 	bl	24a4 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    24ca:	4c08      	ldr	r4, [pc, #32]	; (24ec <dropped_notify+0x28>)
    24cc:	4e08      	ldr	r6, [pc, #32]	; (24f0 <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
    24ce:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    24d0:	42b4      	cmp	r4, r6
    24d2:	d300      	bcc.n	24d6 <dropped_notify+0x12>
}
    24d4:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    24d6:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    24d8:	795b      	ldrb	r3, [r3, #5]
    24da:	b12b      	cbz	r3, 24e8 <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    24dc:	6823      	ldr	r3, [r4, #0]
    24de:	685b      	ldr	r3, [r3, #4]
    24e0:	b113      	cbz	r3, 24e8 <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    24e2:	4629      	mov	r1, r5
    24e4:	4620      	mov	r0, r4
    24e6:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    24e8:	3410      	adds	r4, #16
    24ea:	e7f1      	b.n	24d0 <dropped_notify+0xc>
    24ec:	0000e960 	.word	0x0000e960
    24f0:	0000e970 	.word	0x0000e970

000024f4 <z_log_msg_init>:
{
    24f4:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    24f6:	4c04      	ldr	r4, [pc, #16]	; (2508 <z_log_msg_init+0x14>)
    24f8:	4904      	ldr	r1, [pc, #16]	; (250c <z_log_msg_init+0x18>)
    24fa:	4620      	mov	r0, r4
    24fc:	f00a fdb2 	bl	d064 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    2500:	4b03      	ldr	r3, [pc, #12]	; (2510 <z_log_msg_init+0x1c>)
    2502:	601c      	str	r4, [r3, #0]
}
    2504:	bd10      	pop	{r4, pc}
    2506:	bf00      	nop
    2508:	200002f4 	.word	0x200002f4
    250c:	0000e9d4 	.word	0x0000e9d4
    2510:	20000ca8 	.word	0x20000ca8

00002514 <log_core_init>:
	panic_mode = false;
    2514:	4a08      	ldr	r2, [pc, #32]	; (2538 <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    2516:	4809      	ldr	r0, [pc, #36]	; (253c <log_core_init+0x28>)
{
    2518:	b508      	push	{r3, lr}
	panic_mode = false;
    251a:	2300      	movs	r3, #0
    251c:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    251e:	4a08      	ldr	r2, [pc, #32]	; (2540 <log_core_init+0x2c>)
    2520:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    2522:	4a08      	ldr	r2, [pc, #32]	; (2544 <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
    2524:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
    2528:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    252a:	f7ff ff85 	bl	2438 <log_set_timestamp_func>
}
    252e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    2532:	f7ff bfdf 	b.w	24f4 <z_log_msg_init>
    2536:	bf00      	nop
    2538:	20001d02 	.word	0x20001d02
    253c:	0000d33f 	.word	0x0000d33f
    2540:	20000cb0 	.word	0x20000cb0
    2544:	20000cb4 	.word	0x20000cb4

00002548 <z_log_msg_alloc>:
{
    2548:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    254a:	2200      	movs	r2, #0
    254c:	4801      	ldr	r0, [pc, #4]	; (2554 <z_log_msg_alloc+0xc>)
    254e:	2300      	movs	r3, #0
    2550:	f00a bda9 	b.w	d0a6 <mpsc_pbuf_alloc>
    2554:	200002f4 	.word	0x200002f4

00002558 <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    2558:	4801      	ldr	r0, [pc, #4]	; (2560 <z_log_msg_local_claim+0x8>)
    255a:	f00a be42 	b.w	d1e2 <mpsc_pbuf_claim>
    255e:	bf00      	nop
    2560:	200002f4 	.word	0x200002f4

00002564 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    2564:	4b02      	ldr	r3, [pc, #8]	; (2570 <z_log_msg_free+0xc>)
{
    2566:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    2568:	6818      	ldr	r0, [r3, #0]
    256a:	f00a be8c 	b.w	d286 <mpsc_pbuf_free>
    256e:	bf00      	nop
    2570:	20000ca8 	.word	0x20000ca8

00002574 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    2574:	4801      	ldr	r0, [pc, #4]	; (257c <z_log_msg_pending+0x8>)
    2576:	f00a bec2 	b.w	d2fe <mpsc_pbuf_is_pending>
    257a:	bf00      	nop
    257c:	200002f4 	.word	0x200002f4

00002580 <z_impl_log_process>:
{
    2580:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    2582:	4b28      	ldr	r3, [pc, #160]	; (2624 <z_impl_log_process+0xa4>)
    2584:	7818      	ldrb	r0, [r3, #0]
    2586:	2800      	cmp	r0, #0
    2588:	d04b      	beq.n	2622 <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
    258a:	f7ff ffe5 	bl	2558 <z_log_msg_local_claim>
	if (msg) {
    258e:	4605      	mov	r5, r0
    2590:	b190      	cbz	r0, 25b8 <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2592:	f3bf 8f5b 	dmb	ish
    2596:	4b24      	ldr	r3, [pc, #144]	; (2628 <z_impl_log_process+0xa8>)
    2598:	e853 1f00 	ldrex	r1, [r3]
    259c:	3901      	subs	r1, #1
    259e:	e843 1200 	strex	r2, r1, [r3]
    25a2:	2a00      	cmp	r2, #0
    25a4:	d1f8      	bne.n	2598 <z_impl_log_process+0x18>
    25a6:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    25aa:	4c20      	ldr	r4, [pc, #128]	; (262c <z_impl_log_process+0xac>)
    25ac:	4e20      	ldr	r6, [pc, #128]	; (2630 <z_impl_log_process+0xb0>)
    25ae:	42b4      	cmp	r4, r6
    25b0:	d32d      	bcc.n	260e <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
    25b2:	4628      	mov	r0, r5
    25b4:	f7ff ffd6 	bl	2564 <z_log_msg_free>
	return dropped_cnt > 0;
    25b8:	4b1e      	ldr	r3, [pc, #120]	; (2634 <z_impl_log_process+0xb4>)
    25ba:	4c1f      	ldr	r4, [pc, #124]	; (2638 <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
    25bc:	681b      	ldr	r3, [r3, #0]
    25be:	2b00      	cmp	r3, #0
    25c0:	dd19      	ble.n	25f6 <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
    25c2:	f00b ffc1 	bl	e548 <z_impl_k_uptime_ticks>
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    25c6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    25ca:	fba0 0302 	umull	r0, r3, r0, r2
    25ce:	fb02 3101 	mla	r1, r2, r1, r3
    25d2:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    25d4:	e9d4 2000 	ldrd	r2, r0, [r4]
    25d8:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    25dc:	1a9b      	subs	r3, r3, r2
    25de:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
    25e2:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    25e6:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    25ea:	4293      	cmp	r3, r2
    25ec:	f171 0100 	sbcs.w	r1, r1, #0
    25f0:	d301      	bcc.n	25f6 <z_impl_log_process+0x76>
				dropped_notify();
    25f2:	f7ff ff67 	bl	24c4 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    25f6:	e9d4 3200 	ldrd	r3, r2, [r4]
    25fa:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    25fe:	f142 0200 	adc.w	r2, r2, #0
    2602:	e9c4 3200 	strd	r3, r2, [r4]
}
    2606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    260a:	f7ff bfb3 	b.w	2574 <z_log_msg_pending>
	return backend->cb->active;
    260e:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    2610:	795b      	ldrb	r3, [r3, #5]
    2612:	b123      	cbz	r3, 261e <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
    2614:	6823      	ldr	r3, [r4, #0]
    2616:	4629      	mov	r1, r5
    2618:	681b      	ldr	r3, [r3, #0]
    261a:	4620      	mov	r0, r4
    261c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    261e:	3410      	adds	r4, #16
    2620:	e7c5      	b.n	25ae <z_impl_log_process+0x2e>
}
    2622:	bd70      	pop	{r4, r5, r6, pc}
    2624:	20001d01 	.word	0x20001d01
    2628:	20000cb4 	.word	0x20000cb4
    262c:	0000e960 	.word	0x0000e960
    2630:	0000e970 	.word	0x0000e970
    2634:	20000cb0 	.word	0x20000cb0
    2638:	20000908 	.word	0x20000908

0000263c <z_impl_log_panic>:
{
    263c:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    263e:	4d0d      	ldr	r5, [pc, #52]	; (2674 <z_impl_log_panic+0x38>)
    2640:	7829      	ldrb	r1, [r5, #0]
    2642:	b961      	cbnz	r1, 265e <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    2644:	2001      	movs	r0, #1
    2646:	f7ff fea9 	bl	239c <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    264a:	4c0b      	ldr	r4, [pc, #44]	; (2678 <z_impl_log_panic+0x3c>)
    264c:	4e0b      	ldr	r6, [pc, #44]	; (267c <z_impl_log_panic+0x40>)
    264e:	42b4      	cmp	r4, r6
    2650:	d306      	bcc.n	2660 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    2652:	f7ff ff95 	bl	2580 <z_impl_log_process>
		while (log_process() == true) {
    2656:	2800      	cmp	r0, #0
    2658:	d1fb      	bne.n	2652 <z_impl_log_panic+0x16>
	panic_mode = true;
    265a:	2301      	movs	r3, #1
    265c:	702b      	strb	r3, [r5, #0]
}
    265e:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    2660:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2662:	795b      	ldrb	r3, [r3, #5]
    2664:	b11b      	cbz	r3, 266e <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    2666:	6823      	ldr	r3, [r4, #0]
    2668:	4620      	mov	r0, r4
    266a:	689b      	ldr	r3, [r3, #8]
    266c:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    266e:	3410      	adds	r4, #16
    2670:	e7ed      	b.n	264e <z_impl_log_panic+0x12>
    2672:	bf00      	nop
    2674:	20001d02 	.word	0x20001d02
    2678:	0000e960 	.word	0x0000e960
    267c:	0000e970 	.word	0x0000e970

00002680 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    2680:	2100      	movs	r1, #0
{
    2682:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    2686:	4608      	mov	r0, r1
    2688:	f7ff fe88 	bl	239c <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    268c:	4604      	mov	r4, r0
    268e:	b348      	cbz	r0, 26e4 <log_process_thread_func+0x64>
    2690:	f240 6867 	movw	r8, #1639	; 0x667
    2694:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    2698:	f009 fd2a 	bl	c0f0 <z_impl_z_current_get>
	proc_tid = process_tid;
    269c:	4b1a      	ldr	r3, [pc, #104]	; (2708 <log_process_thread_func+0x88>)
    269e:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    26a0:	b130      	cbz	r0, 26b0 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    26a2:	4b1a      	ldr	r3, [pc, #104]	; (270c <log_process_thread_func+0x8c>)
	    process_tid &&
    26a4:	681b      	ldr	r3, [r3, #0]
    26a6:	2b09      	cmp	r3, #9
    26a8:	dd02      	ble.n	26b0 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    26aa:	4819      	ldr	r0, [pc, #100]	; (2710 <log_process_thread_func+0x90>)
    26ac:	f009 f846 	bl	b73c <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    26b0:	4f18      	ldr	r7, [pc, #96]	; (2714 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    26b2:	f8df a05c 	ldr.w	sl, [pc, #92]	; 2710 <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    26b6:	2500      	movs	r5, #0
		if (activate_mask) {
    26b8:	b144      	cbz	r4, 26cc <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    26ba:	4620      	mov	r0, r4
    26bc:	f7ff fe08 	bl	22d0 <activate_foreach_backend>
			if (!activate_mask) {
    26c0:	4604      	mov	r4, r0
    26c2:	b918      	cbnz	r0, 26cc <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    26c4:	f04f 38ff 	mov.w	r8, #4294967295
    26c8:	f04f 39ff 	mov.w	r9, #4294967295
    26cc:	f7ff ff58 	bl	2580 <z_impl_log_process>
		if (log_process() == false) {
    26d0:	4606      	mov	r6, r0
    26d2:	b928      	cbnz	r0, 26e0 <log_process_thread_func+0x60>
			if (processed_any) {
    26d4:	b9b5      	cbnz	r5, 2704 <log_process_thread_func+0x84>
    26d6:	4642      	mov	r2, r8
    26d8:	464b      	mov	r3, r9
    26da:	4650      	mov	r0, sl
    26dc:	f009 f84e 	bl	b77c <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    26e0:	4635      	mov	r5, r6
    26e2:	e7e9      	b.n	26b8 <log_process_thread_func+0x38>
    26e4:	f04f 38ff 	mov.w	r8, #4294967295
    26e8:	f04f 39ff 	mov.w	r9, #4294967295
    26ec:	e7d4      	b.n	2698 <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    26ee:	682b      	ldr	r3, [r5, #0]
    26f0:	699b      	ldr	r3, [r3, #24]
    26f2:	b11b      	cbz	r3, 26fc <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    26f4:	2200      	movs	r2, #0
    26f6:	4611      	mov	r1, r2
    26f8:	4628      	mov	r0, r5
    26fa:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    26fc:	3510      	adds	r5, #16
    26fe:	42bd      	cmp	r5, r7
    2700:	d3f5      	bcc.n	26ee <log_process_thread_func+0x6e>
    2702:	e7e8      	b.n	26d6 <log_process_thread_func+0x56>
    2704:	4d04      	ldr	r5, [pc, #16]	; (2718 <log_process_thread_func+0x98>)
    2706:	e7fa      	b.n	26fe <log_process_thread_func+0x7e>
    2708:	20000cac 	.word	0x20000cac
    270c:	20000cb4 	.word	0x20000cb4
    2710:	200003ac 	.word	0x200003ac
    2714:	0000e970 	.word	0x0000e970
    2718:	0000e960 	.word	0x0000e960

0000271c <z_log_msg_post_finalize>:
{
    271c:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    271e:	4818      	ldr	r0, [pc, #96]	; (2780 <z_log_msg_post_finalize+0x64>)
    2720:	f00a fe0f 	bl	d342 <atomic_inc>
	if (panic_mode) {
    2724:	4b17      	ldr	r3, [pc, #92]	; (2784 <z_log_msg_post_finalize+0x68>)
    2726:	781b      	ldrb	r3, [r3, #0]
    2728:	b17b      	cbz	r3, 274a <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
    272a:	f04f 0340 	mov.w	r3, #64	; 0x40
    272e:	f3ef 8411 	mrs	r4, BASEPRI
    2732:	f383 8812 	msr	BASEPRI_MAX, r3
    2736:	f3bf 8f6f 	isb	sy
    273a:	f7ff ff21 	bl	2580 <z_impl_log_process>
	__asm__ volatile(
    273e:	f384 8811 	msr	BASEPRI, r4
    2742:	f3bf 8f6f 	isb	sy
}
    2746:	b002      	add	sp, #8
    2748:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    274a:	4b0f      	ldr	r3, [pc, #60]	; (2788 <z_log_msg_post_finalize+0x6c>)
    274c:	681b      	ldr	r3, [r3, #0]
    274e:	2b00      	cmp	r3, #0
    2750:	d0f9      	beq.n	2746 <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    2752:	b950      	cbnz	r0, 276a <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    2754:	2200      	movs	r2, #0
    2756:	2300      	movs	r3, #0
    2758:	e9cd 2300 	strd	r2, r3, [sp]
    275c:	480b      	ldr	r0, [pc, #44]	; (278c <z_log_msg_post_finalize+0x70>)
    275e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2762:	2300      	movs	r3, #0
    2764:	f009 ff08 	bl	c578 <z_impl_k_timer_start>
    2768:	e7ed      	b.n	2746 <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    276a:	280a      	cmp	r0, #10
    276c:	d1eb      	bne.n	2746 <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    276e:	4807      	ldr	r0, [pc, #28]	; (278c <z_log_msg_post_finalize+0x70>)
    2770:	f00b ff1e 	bl	e5b0 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    2774:	4806      	ldr	r0, [pc, #24]	; (2790 <z_log_msg_post_finalize+0x74>)
}
    2776:	b002      	add	sp, #8
    2778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    277c:	f008 bfde 	b.w	b73c <z_impl_k_sem_give>
    2780:	20000cb4 	.word	0x20000cb4
    2784:	20001d02 	.word	0x20001d02
    2788:	20000cac 	.word	0x20000cac
    278c:	20000910 	.word	0x20000910
    2790:	200003ac 	.word	0x200003ac

00002794 <z_log_msg_commit>:
{
    2794:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    2796:	4b06      	ldr	r3, [pc, #24]	; (27b0 <z_log_msg_commit+0x1c>)
    2798:	681b      	ldr	r3, [r3, #0]
{
    279a:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    279c:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    279e:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    27a0:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    27a2:	4804      	ldr	r0, [pc, #16]	; (27b4 <z_log_msg_commit+0x20>)
    27a4:	f00a fcfd 	bl	d1a2 <mpsc_pbuf_commit>
}
    27a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    27ac:	f7ff bfb6 	b.w	271c <z_log_msg_post_finalize>
    27b0:	20000018 	.word	0x20000018
    27b4:	200002f4 	.word	0x200002f4

000027b8 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    27b8:	4a04      	ldr	r2, [pc, #16]	; (27cc <log_source_name_get+0x14>)
    27ba:	4b05      	ldr	r3, [pc, #20]	; (27d0 <log_source_name_get+0x18>)
    27bc:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    27be:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    27c2:	bf34      	ite	cc
    27c4:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    27c8:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    27ca:	4770      	bx	lr
    27cc:	0000e858 	.word	0x0000e858
    27d0:	0000e960 	.word	0x0000e960

000027d4 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    27d4:	4b08      	ldr	r3, [pc, #32]	; (27f8 <log_backend_enable+0x24>)
    27d6:	1ac3      	subs	r3, r0, r3
{
    27d8:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    27da:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    27dc:	6844      	ldr	r4, [r0, #4]
    27de:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    27e0:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    27e2:	6843      	ldr	r3, [r0, #4]
    27e4:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    27e6:	6843      	ldr	r3, [r0, #4]
    27e8:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    27ea:	6843      	ldr	r3, [r0, #4]
    27ec:	2201      	movs	r2, #1
    27ee:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    27f0:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    27f2:	f7ff be31 	b.w	2458 <z_log_notify_backend_enabled>
    27f6:	bf00      	nop
    27f8:	0000e960 	.word	0x0000e960

000027fc <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    27fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2800:	b08f      	sub	sp, #60	; 0x3c
    2802:	af04      	add	r7, sp, #16
    2804:	f3c1 284a 	ubfx	r8, r1, #9, #11
    2808:	60b8      	str	r0, [r7, #8]
    280a:	460d      	mov	r5, r1
    280c:	4691      	mov	r9, r2
    280e:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    2810:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    2812:	f1b8 0f00 	cmp.w	r8, #0
    2816:	d063      	beq.n	28e0 <z_impl_z_log_msg_static_create+0xe4>
	struct z_cbprintf_buf_desc buf_desc = {
    2818:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
    281a:	f107 0314 	add.w	r3, r7, #20
    281e:	f04f 0b04 	mov.w	fp, #4
    2822:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    2826:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
    282a:	e9c7 6607 	strd	r6, r6, [r7, #28]
    282e:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    2830:	9301      	str	r3, [sp, #4]
    2832:	f8cd b008 	str.w	fp, [sp, #8]
    2836:	f8cd a000 	str.w	sl, [sp]
    283a:	f107 031c 	add.w	r3, r7, #28
    283e:	68f9      	ldr	r1, [r7, #12]
    2840:	4632      	mov	r2, r6
    2842:	4648      	mov	r0, r9
    2844:	f7fe fe88 	bl	1558 <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    2848:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    284c:	4603      	mov	r3, r0
    284e:	d31c      	bcc.n	288a <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    2850:	466c      	mov	r4, sp
    2852:	b08a      	sub	sp, #40	; 0x28
    2854:	f8d9 1004 	ldr.w	r1, [r9, #4]
    2858:	ab04      	add	r3, sp, #16
    285a:	4826      	ldr	r0, [pc, #152]	; (28f4 <z_impl_z_log_msg_static_create+0xf8>)
    285c:	e9c3 0105 	strd	r0, r1, [r3, #20]
    2860:	f240 71ff 	movw	r1, #2047	; 0x7ff
    2864:	61d9      	str	r1, [r3, #28]
    2866:	461a      	mov	r2, r3
    2868:	f44f 7100 	mov.w	r1, #512	; 0x200
    286c:	8419      	strh	r1, [r3, #32]
    286e:	4b22      	ldr	r3, [pc, #136]	; (28f8 <z_impl_z_log_msg_static_create+0xfc>)
    2870:	f842 3f10 	str.w	r3, [r2, #16]!
    2874:	4821      	ldr	r0, [pc, #132]	; (28fc <z_impl_z_log_msg_static_create+0x100>)
    2876:	4633      	mov	r3, r6
    2878:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    287c:	f7ff ffbe 	bl	27fc <z_impl_z_log_msg_static_create>
    2880:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
    2882:	372c      	adds	r7, #44	; 0x2c
    2884:	46bd      	mov	sp, r7
    2886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
    288a:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    288e:	f104 0017 	add.w	r0, r4, #23
    2892:	4418      	add	r0, r3
    2894:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    2898:	0880      	lsrs	r0, r0, #2
    289a:	603b      	str	r3, [r7, #0]
    289c:	f7ff fe54 	bl	2548 <z_log_msg_alloc>
    28a0:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
    28a4:	4604      	mov	r4, r0
    28a6:	b190      	cbz	r0, 28ce <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
    28a8:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
    28aa:	4a15      	ldr	r2, [pc, #84]	; (2900 <z_impl_z_log_msg_static_create+0x104>)
	struct z_cbprintf_buf_desc buf_desc = {
    28ac:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
    28b0:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
    28b4:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
    28b8:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    28ba:	e9cd a300 	strd	sl, r3, [sp]
    28be:	f8cd b008 	str.w	fp, [sp, #8]
    28c2:	68f9      	ldr	r1, [r7, #12]
    28c4:	f107 031c 	add.w	r3, r7, #28
    28c8:	4648      	mov	r0, r9
    28ca:	f7fe fe45 	bl	1558 <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
    28ce:	f368 2553 	bfi	r5, r8, #9, #11
    28d2:	687b      	ldr	r3, [r7, #4]
    28d4:	68b9      	ldr	r1, [r7, #8]
    28d6:	462a      	mov	r2, r5
    28d8:	4620      	mov	r0, r4
    28da:	f00a fd68 	bl	d3ae <z_log_msg_finalize>
    28de:	e7d0      	b.n	2882 <z_impl_z_log_msg_static_create+0x86>
    28e0:	f104 0017 	add.w	r0, r4, #23
    28e4:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    28e8:	0880      	lsrs	r0, r0, #2
    28ea:	f7ff fe2d 	bl	2548 <z_log_msg_alloc>
    28ee:	4604      	mov	r4, r0
    28f0:	e7ed      	b.n	28ce <z_impl_z_log_msg_static_create+0xd2>
    28f2:	bf00      	nop
    28f4:	0000f193 	.word	0x0000f193
    28f8:	01000004 	.word	0x01000004
    28fc:	0000e8c0 	.word	0x0000e8c0
    2900:	0000d383 	.word	0x0000d383

00002904 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    2904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2908:	b087      	sub	sp, #28
    290a:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    290e:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    2912:	4604      	mov	r4, r0
    2914:	460f      	mov	r7, r1
    2916:	4693      	mov	fp, r2
    2918:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    291a:	b3a6      	cbz	r6, 2986 <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    291c:	2110      	movs	r1, #16
    291e:	f8cd 9000 	str.w	r9, [sp]
    2922:	4633      	mov	r3, r6
    2924:	4652      	mov	r2, sl
    2926:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    2928:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    292c:	f7fe fc3e 	bl	11ac <cbvprintf_package>
    2930:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    2932:	f105 0017 	add.w	r0, r5, #23
    2936:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    2938:	4b14      	ldr	r3, [pc, #80]	; (298c <z_impl_z_log_msg_runtime_vcreate+0x88>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    293a:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
    293c:	f004 0407 	and.w	r4, r4, #7
    2940:	f00b 0b07 	and.w	fp, fp, #7
    2944:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    2946:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    294a:	ea03 2341 	and.w	r3, r3, r1, lsl #9
    294e:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    2952:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    2954:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
    2956:	f7ff fdf7 	bl	2548 <z_log_msg_alloc>
	struct log_msg_desc desc =
    295a:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    295e:	4605      	mov	r5, r0
    2960:	b140      	cbz	r0, 2974 <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    2962:	b13e      	cbz	r6, 2974 <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    2964:	9903      	ldr	r1, [sp, #12]
    2966:	f8cd 9000 	str.w	r9, [sp]
    296a:	4633      	mov	r3, r6
    296c:	4652      	mov	r2, sl
    296e:	3010      	adds	r0, #16
    2970:	f7fe fc1c 	bl	11ac <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    2974:	4643      	mov	r3, r8
    2976:	4622      	mov	r2, r4
    2978:	4639      	mov	r1, r7
    297a:	4628      	mov	r0, r5
	}
}
    297c:	b007      	add	sp, #28
    297e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    2982:	f00a bd14 	b.w	d3ae <z_log_msg_finalize>
		plen = 0;
    2986:	4631      	mov	r1, r6
    2988:	e7d3      	b.n	2932 <z_impl_z_log_msg_runtime_vcreate+0x2e>
    298a:	bf00      	nop
    298c:	000ffe00 	.word	0x000ffe00

00002990 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    2990:	b40e      	push	{r1, r2, r3}
    2992:	b503      	push	{r0, r1, lr}
    2994:	ab03      	add	r3, sp, #12
    2996:	4601      	mov	r1, r0
    2998:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    299c:	4804      	ldr	r0, [pc, #16]	; (29b0 <print_formatted+0x20>)
	va_start(args, fmt);
    299e:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    29a0:	f00a fd2b 	bl	d3fa <cbvprintf>
	va_end(args);

	return length;
}
    29a4:	b002      	add	sp, #8
    29a6:	f85d eb04 	ldr.w	lr, [sp], #4
    29aa:	b003      	add	sp, #12
    29ac:	4770      	bx	lr
    29ae:	bf00      	nop
    29b0:	0000d423 	.word	0x0000d423

000029b4 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    29b4:	06ca      	lsls	r2, r1, #27
    29b6:	d405      	bmi.n	29c4 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    29b8:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    29ba:	bf4c      	ite	mi
    29bc:	4902      	ldrmi	r1, [pc, #8]	; (29c8 <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    29be:	4903      	ldrpl	r1, [pc, #12]	; (29cc <newline_print+0x18>)
    29c0:	f7ff bfe6 	b.w	2990 <print_formatted>
	}
}
    29c4:	4770      	bx	lr
    29c6:	bf00      	nop
    29c8:	0000f1d3 	.word	0x0000f1d3
    29cc:	0000f1d2 	.word	0x0000f1d2

000029d0 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    29d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    29d4:	b089      	sub	sp, #36	; 0x24
    29d6:	469b      	mov	fp, r3
    29d8:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    29dc:	9304      	str	r3, [sp, #16]
    29de:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    29e2:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    29e4:	9b04      	ldr	r3, [sp, #16]
{
    29e6:	9206      	str	r2, [sp, #24]
    29e8:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    29ec:	4604      	mov	r4, r0
    29ee:	460d      	mov	r5, r1
	if (!raw_string) {
    29f0:	2b00      	cmp	r3, #0
    29f2:	f000 8087 	beq.w	2b04 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    29f6:	f006 0308 	and.w	r3, r6, #8
    29fa:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    29fc:	f00a fcbf 	bl	d37e <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    2a00:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    2a04:	4602      	mov	r2, r0
    2a06:	2800      	cmp	r0, #0
    2a08:	d04b      	beq.n	2aa2 <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    2a0a:	4986      	ldr	r1, [pc, #536]	; (2c24 <log_output_process+0x254>)
    2a0c:	4620      	mov	r0, r4
    2a0e:	f7ff ffbf 	bl	2990 <print_formatted>
    2a12:	4680      	mov	r8, r0
	if (stamp) {
    2a14:	f1ba 0f00 	cmp.w	sl, #0
    2a18:	d008      	beq.n	2a2c <log_output_process+0x5c>
	if (!format) {
    2a1a:	f016 0f44 	tst.w	r6, #68	; 0x44
    2a1e:	d142      	bne.n	2aa6 <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    2a20:	4981      	ldr	r1, [pc, #516]	; (2c28 <log_output_process+0x258>)
    2a22:	462a      	mov	r2, r5
    2a24:	4620      	mov	r0, r4
    2a26:	f7ff ffb3 	bl	2990 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    2a2a:	4480      	add	r8, r0
	if (color) {
    2a2c:	f006 0301 	and.w	r3, r6, #1
    2a30:	b15b      	cbz	r3, 2a4a <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    2a32:	4b7e      	ldr	r3, [pc, #504]	; (2c2c <log_output_process+0x25c>)
    2a34:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    2a36:	497e      	ldr	r1, [pc, #504]	; (2c30 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
    2a38:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    2a3c:	4b7d      	ldr	r3, [pc, #500]	; (2c34 <log_output_process+0x264>)
    2a3e:	4620      	mov	r0, r4
    2a40:	2a00      	cmp	r2, #0
    2a42:	bf08      	it	eq
    2a44:	461a      	moveq	r2, r3
    2a46:	f7ff ffa3 	bl	2990 <print_formatted>
	if (level_on) {
    2a4a:	f006 0308 	and.w	r3, r6, #8
    2a4e:	2b00      	cmp	r3, #0
    2a50:	d055      	beq.n	2afe <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    2a52:	4b79      	ldr	r3, [pc, #484]	; (2c38 <log_output_process+0x268>)
    2a54:	9a04      	ldr	r2, [sp, #16]
    2a56:	4979      	ldr	r1, [pc, #484]	; (2c3c <log_output_process+0x26c>)
    2a58:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2a5c:	4620      	mov	r0, r4
    2a5e:	f7ff ff97 	bl	2990 <print_formatted>
    2a62:	4605      	mov	r5, r0
	if (domain) {
    2a64:	9b06      	ldr	r3, [sp, #24]
    2a66:	b12b      	cbz	r3, 2a74 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    2a68:	4975      	ldr	r1, [pc, #468]	; (2c40 <log_output_process+0x270>)
    2a6a:	461a      	mov	r2, r3
    2a6c:	4620      	mov	r0, r4
    2a6e:	f7ff ff8f 	bl	2990 <print_formatted>
    2a72:	4405      	add	r5, r0
	if (source) {
    2a74:	f1bb 0f00 	cmp.w	fp, #0
    2a78:	d005      	beq.n	2a86 <log_output_process+0xb6>
		total += print_formatted(output,
    2a7a:	4972      	ldr	r1, [pc, #456]	; (2c44 <log_output_process+0x274>)
    2a7c:	465a      	mov	r2, fp
    2a7e:	4620      	mov	r0, r4
    2a80:	f7ff ff86 	bl	2990 <print_formatted>
    2a84:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    2a86:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    2a88:	f1b9 0f00 	cmp.w	r9, #0
    2a8c:	d149      	bne.n	2b22 <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    2a8e:	2f00      	cmp	r7, #0
    2a90:	d14f      	bne.n	2b32 <log_output_process+0x162>
	if (color) {
    2a92:	07f3      	lsls	r3, r6, #31
    2a94:	f100 80c0 	bmi.w	2c18 <log_output_process+0x248>
	newline_print(output, flags);
    2a98:	4631      	mov	r1, r6
    2a9a:	4620      	mov	r0, r4
    2a9c:	f7ff ff8a 	bl	29b4 <newline_print>
}
    2aa0:	e0b4      	b.n	2c0c <log_output_process+0x23c>
	uint32_t length = 0U;
    2aa2:	4680      	mov	r8, r0
    2aa4:	e7b6      	b.n	2a14 <log_output_process+0x44>
	} else if (freq != 0U) {
    2aa6:	4b68      	ldr	r3, [pc, #416]	; (2c48 <log_output_process+0x278>)
    2aa8:	6818      	ldr	r0, [r3, #0]
    2aaa:	2800      	cmp	r0, #0
    2aac:	d0bd      	beq.n	2a2a <log_output_process+0x5a>
		timestamp /= timestamp_div;
    2aae:	4b67      	ldr	r3, [pc, #412]	; (2c4c <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    2ab0:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    2ab4:	681b      	ldr	r3, [r3, #0]
    2ab6:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    2aba:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    2abe:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    2ac2:	fb00 5513 	mls	r5, r0, r3, r5
    2ac6:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
    2aca:	fb0e f505 	mul.w	r5, lr, r5
    2ace:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
    2ad2:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2ad4:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    2ad8:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2adc:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
    2ae0:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2ae4:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
    2ae8:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    2aea:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    2aee:	4958      	ldr	r1, [pc, #352]	; (2c50 <log_output_process+0x280>)
    2af0:	e9cd c501 	strd	ip, r5, [sp, #4]
    2af4:	4652      	mov	r2, sl
    2af6:	4620      	mov	r0, r4
    2af8:	f7ff ff4a 	bl	2990 <print_formatted>
    2afc:	e795      	b.n	2a2a <log_output_process+0x5a>
	int total = 0;
    2afe:	f006 0508 	and.w	r5, r6, #8
    2b02:	e7af      	b.n	2a64 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    2b04:	f1bb 0f01 	cmp.w	fp, #1
    2b08:	d106      	bne.n	2b18 <log_output_process+0x148>
	if (package) {
    2b0a:	f1b9 0f00 	cmp.w	r9, #0
    2b0e:	d164      	bne.n	2bda <log_output_process+0x20a>
	if (data_len) {
    2b10:	2f00      	cmp	r7, #0
    2b12:	d07b      	beq.n	2c0c <log_output_process+0x23c>
		prefix_offset = 0;
    2b14:	2500      	movs	r5, #0
    2b16:	e00c      	b.n	2b32 <log_output_process+0x162>
	if (package) {
    2b18:	f1b9 0f00 	cmp.w	r9, #0
    2b1c:	d0f8      	beq.n	2b10 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    2b1e:	484d      	ldr	r0, [pc, #308]	; (2c54 <log_output_process+0x284>)
    2b20:	e05c      	b.n	2bdc <log_output_process+0x20c>
		cb = out_func;
    2b22:	484d      	ldr	r0, [pc, #308]	; (2c58 <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    2b24:	494d      	ldr	r1, [pc, #308]	; (2c5c <log_output_process+0x28c>)
    2b26:	464b      	mov	r3, r9
    2b28:	4622      	mov	r2, r4
    2b2a:	f009 fdbb 	bl	c6a4 <cbpprintf_external>
	if (data_len) {
    2b2e:	2f00      	cmp	r7, #0
    2b30:	d068      	beq.n	2c04 <log_output_process+0x234>
		print_formatted(output, " ");
    2b32:	f8df 912c 	ldr.w	r9, [pc, #300]	; 2c60 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    2b36:	f8df a12c 	ldr.w	sl, [pc, #300]	; 2c64 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    2b3a:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    2b3c:	4631      	mov	r1, r6
    2b3e:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    2b40:	46b8      	mov	r8, r7
    2b42:	bf28      	it	cs
    2b44:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    2b48:	f7ff ff34 	bl	29b4 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    2b4c:	f04f 0b00 	mov.w	fp, #0
    2b50:	455d      	cmp	r5, fp
    2b52:	dc45      	bgt.n	2be0 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    2b54:	9b05      	ldr	r3, [sp, #20]
    2b56:	4651      	mov	r1, sl
    2b58:	781a      	ldrb	r2, [r3, #0]
    2b5a:	4620      	mov	r0, r4
    2b5c:	f7ff ff18 	bl	2990 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2b60:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    2b64:	f01b 0f07 	tst.w	fp, #7
    2b68:	d103      	bne.n	2b72 <log_output_process+0x1a2>
			print_formatted(output, " ");
    2b6a:	4649      	mov	r1, r9
    2b6c:	4620      	mov	r0, r4
    2b6e:	f7ff ff0f 	bl	2990 <print_formatted>
		if (i < length) {
    2b72:	45d8      	cmp	r8, fp
    2b74:	d93b      	bls.n	2bee <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    2b76:	9b05      	ldr	r3, [sp, #20]
    2b78:	4651      	mov	r1, sl
    2b7a:	f813 200b 	ldrb.w	r2, [r3, fp]
    2b7e:	4620      	mov	r0, r4
    2b80:	f7ff ff06 	bl	2990 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2b84:	f10b 0b01 	add.w	fp, fp, #1
    2b88:	f1bb 0f10 	cmp.w	fp, #16
    2b8c:	d1ea      	bne.n	2b64 <log_output_process+0x194>
	print_formatted(output, "|");
    2b8e:	4936      	ldr	r1, [pc, #216]	; (2c68 <log_output_process+0x298>)
    2b90:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2b92:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    2b96:	f7ff fefb 	bl	2990 <print_formatted>
		if (i < length) {
    2b9a:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    2b9c:	9b05      	ldr	r3, [sp, #20]
    2b9e:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    2ba0:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    2ba4:	295f      	cmp	r1, #95	; 0x5f
    2ba6:	bf28      	it	cs
    2ba8:	222e      	movcs	r2, #46	; 0x2e
    2baa:	4930      	ldr	r1, [pc, #192]	; (2c6c <log_output_process+0x29c>)
    2bac:	4620      	mov	r0, r4
    2bae:	f7ff feef 	bl	2990 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    2bb2:	f10b 0b01 	add.w	fp, fp, #1
    2bb6:	f1bb 0f10 	cmp.w	fp, #16
    2bba:	d01d      	beq.n	2bf8 <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    2bbc:	f01b 0f07 	tst.w	fp, #7
    2bc0:	d103      	bne.n	2bca <log_output_process+0x1fa>
			print_formatted(output, " ");
    2bc2:	4649      	mov	r1, r9
    2bc4:	4620      	mov	r0, r4
    2bc6:	f7ff fee3 	bl	2990 <print_formatted>
		if (i < length) {
    2bca:	45d8      	cmp	r8, fp
    2bcc:	465a      	mov	r2, fp
    2bce:	d8e5      	bhi.n	2b9c <log_output_process+0x1cc>
			print_formatted(output, " ");
    2bd0:	4649      	mov	r1, r9
    2bd2:	4620      	mov	r0, r4
    2bd4:	f7ff fedc 	bl	2990 <print_formatted>
    2bd8:	e7eb      	b.n	2bb2 <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    2bda:	481f      	ldr	r0, [pc, #124]	; (2c58 <log_output_process+0x288>)
		prefix_offset = 0;
    2bdc:	9d04      	ldr	r5, [sp, #16]
    2bde:	e7a1      	b.n	2b24 <log_output_process+0x154>
		print_formatted(output, " ");
    2be0:	4649      	mov	r1, r9
    2be2:	4620      	mov	r0, r4
    2be4:	f7ff fed4 	bl	2990 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    2be8:	f10b 0b01 	add.w	fp, fp, #1
    2bec:	e7b0      	b.n	2b50 <log_output_process+0x180>
			print_formatted(output, "   ");
    2bee:	4920      	ldr	r1, [pc, #128]	; (2c70 <log_output_process+0x2a0>)
    2bf0:	4620      	mov	r0, r4
    2bf2:	f7ff fecd 	bl	2990 <print_formatted>
    2bf6:	e7c5      	b.n	2b84 <log_output_process+0x1b4>
		data += length;
    2bf8:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    2bfa:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    2bfe:	4443      	add	r3, r8
    2c00:	9305      	str	r3, [sp, #20]
	} while (len);
    2c02:	d19a      	bne.n	2b3a <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    2c04:	9b04      	ldr	r3, [sp, #16]
    2c06:	2b00      	cmp	r3, #0
    2c08:	f47f af43 	bne.w	2a92 <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    2c0c:	4620      	mov	r0, r4
}
    2c0e:	b009      	add	sp, #36	; 0x24
    2c10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    2c14:	f00a bbf8 	b.w	d408 <log_output_flush>
		print_formatted(output, "%s", log_color);
    2c18:	4a06      	ldr	r2, [pc, #24]	; (2c34 <log_output_process+0x264>)
    2c1a:	4905      	ldr	r1, [pc, #20]	; (2c30 <log_output_process+0x260>)
    2c1c:	4620      	mov	r0, r4
    2c1e:	f7ff feb7 	bl	2990 <print_formatted>
}
    2c22:	e739      	b.n	2a98 <log_output_process+0xc8>
    2c24:	0000f1da 	.word	0x0000f1da
    2c28:	0000f1de 	.word	0x0000f1de
    2c2c:	0000e9f8 	.word	0x0000e9f8
    2c30:	0000fd21 	.word	0x0000fd21
    2c34:	0000f1d5 	.word	0x0000f1d5
    2c38:	0000ea0c 	.word	0x0000ea0c
    2c3c:	0000f203 	.word	0x0000f203
    2c40:	0000f209 	.word	0x0000f209
    2c44:	0000f20d 	.word	0x0000f20d
    2c48:	20000cc0 	.word	0x20000cc0
    2c4c:	20000cbc 	.word	0x20000cbc
    2c50:	0000f1e7 	.word	0x0000f1e7
    2c54:	0000d459 	.word	0x0000d459
    2c58:	0000d423 	.word	0x0000d423
    2c5c:	0000d3fb 	.word	0x0000d3fb
    2c60:	0000f21a 	.word	0x0000f21a
    2c64:	0000f212 	.word	0x0000f212
    2c68:	0000f21c 	.word	0x0000f21c
    2c6c:	0000f21e 	.word	0x0000f21e
    2c70:	0000f218 	.word	0x0000f218

00002c74 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    2c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    2c78:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    2c7a:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    2c7c:	688e      	ldr	r6, [r1, #8]
    2c7e:	b086      	sub	sp, #24
    2c80:	4605      	mov	r5, r0
    2c82:	460c      	mov	r4, r1
    2c84:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
    2c86:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    2c8a:	b15b      	cbz	r3, 2ca4 <log_output_msg_process+0x30>
    2c8c:	4a13      	ldr	r2, [pc, #76]	; (2cdc <log_output_msg_process+0x68>)
    2c8e:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    2c90:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2c94:	2900      	cmp	r1, #0
    2c96:	db1f      	blt.n	2cd8 <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    2c98:	7820      	ldrb	r0, [r4, #0]
    2c9a:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    2c9e:	f7ff fd8b 	bl	27b8 <log_source_name_get>
    2ca2:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    2ca4:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
    2ca6:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    2ca8:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    2cac:	9700      	str	r7, [sp, #0]
    2cae:	f3c2 224a 	ubfx	r2, r2, #9, #11
    2cb2:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    2cb4:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
    2cb8:	f3c0 100b 	ubfx	r0, r0, #4, #12
    2cbc:	bf08      	it	eq
    2cbe:	2100      	moveq	r1, #0
    2cc0:	e9cd 0803 	strd	r0, r8, [sp, #12]
    2cc4:	e9cd 1401 	strd	r1, r4, [sp, #4]
    2cc8:	2200      	movs	r2, #0
    2cca:	4631      	mov	r1, r6
    2ccc:	4628      	mov	r0, r5
    2cce:	f7ff fe7f 	bl	29d0 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    2cd2:	b006      	add	sp, #24
    2cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    2cd8:	2300      	movs	r3, #0
    2cda:	e7e3      	b.n	2ca4 <log_output_msg_process+0x30>
    2cdc:	0000e858 	.word	0x0000e858

00002ce0 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    2ce0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2ce2:	f242 730f 	movw	r3, #9999	; 0x270f
    2ce6:	428b      	cmp	r3, r1
    2ce8:	bf28      	it	cs
    2cea:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    2cec:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2cee:	4a0f      	ldr	r2, [pc, #60]	; (2d2c <log_output_dropped_process+0x4c>)
{
    2cf0:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2cf2:	2105      	movs	r1, #5
    2cf4:	4668      	mov	r0, sp
    2cf6:	f009 fd4d 	bl	c794 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2cfa:	6863      	ldr	r3, [r4, #4]
    2cfc:	490c      	ldr	r1, [pc, #48]	; (2d30 <log_output_dropped_process+0x50>)
    2cfe:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    2d00:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    2d02:	220b      	movs	r2, #11
    2d04:	4628      	mov	r0, r5
    2d06:	f00a fb6b 	bl	d3e0 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    2d0a:	6863      	ldr	r3, [r4, #4]
    2d0c:	4632      	mov	r2, r6
    2d0e:	4669      	mov	r1, sp
    2d10:	4628      	mov	r0, r5
    2d12:	685b      	ldr	r3, [r3, #4]
    2d14:	f00a fb64 	bl	d3e0 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    2d18:	6863      	ldr	r3, [r4, #4]
    2d1a:	4906      	ldr	r1, [pc, #24]	; (2d34 <log_output_dropped_process+0x54>)
    2d1c:	685b      	ldr	r3, [r3, #4]
    2d1e:	221b      	movs	r2, #27
    2d20:	4628      	mov	r0, r5
    2d22:	f00a fb5d 	bl	d3e0 <buffer_write>
		     output->control_block->ctx);
}
    2d26:	b002      	add	sp, #8
    2d28:	bd70      	pop	{r4, r5, r6, pc}
    2d2a:	bf00      	nop
    2d2c:	0000ef16 	.word	0x0000ef16
    2d30:	0000f23d 	.word	0x0000f23d
    2d34:	0000f221 	.word	0x0000f221

00002d38 <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    2d38:	4a07      	ldr	r2, [pc, #28]	; (2d58 <log_output_timestamp_freq_set+0x20>)
    2d3a:	2100      	movs	r1, #0
    2d3c:	2301      	movs	r3, #1
    2d3e:	4290      	cmp	r0, r2
    2d40:	d806      	bhi.n	2d50 <log_output_timestamp_freq_set+0x18>
    2d42:	4a06      	ldr	r2, [pc, #24]	; (2d5c <log_output_timestamp_freq_set+0x24>)
    2d44:	b901      	cbnz	r1, 2d48 <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    2d46:	2301      	movs	r3, #1
    2d48:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    2d4a:	4b05      	ldr	r3, [pc, #20]	; (2d60 <log_output_timestamp_freq_set+0x28>)
    2d4c:	6018      	str	r0, [r3, #0]
}
    2d4e:	4770      	bx	lr
		frequency /= 2U;
    2d50:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    2d52:	005b      	lsls	r3, r3, #1
    2d54:	2101      	movs	r1, #1
    2d56:	e7f2      	b.n	2d3e <log_output_timestamp_freq_set+0x6>
    2d58:	000f4240 	.word	0x000f4240
    2d5c:	20000cbc 	.word	0x20000cbc
    2d60:	20000cc0 	.word	0x20000cc0

00002d64 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    2d64:	4b01      	ldr	r3, [pc, #4]	; (2d6c <log_backend_rtt_init+0x8>)
    2d66:	2201      	movs	r2, #1
    2d68:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    2d6a:	4770      	bx	lr
    2d6c:	20001d03 	.word	0x20001d03

00002d70 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    2d70:	4b01      	ldr	r3, [pc, #4]	; (2d78 <format_set+0x8>)
	return 0;
}
    2d72:	2000      	movs	r0, #0
	log_format_current = log_type;
    2d74:	6019      	str	r1, [r3, #0]
}
    2d76:	4770      	bx	lr
    2d78:	20000cd8 	.word	0x20000cd8

00002d7c <panic>:
	panic_mode = true;
    2d7c:	4b02      	ldr	r3, [pc, #8]	; (2d88 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    2d7e:	4803      	ldr	r0, [pc, #12]	; (2d8c <panic+0x10>)
    2d80:	2201      	movs	r2, #1
    2d82:	701a      	strb	r2, [r3, #0]
    2d84:	f00a bb40 	b.w	d408 <log_output_flush>
    2d88:	20001d04 	.word	0x20001d04
    2d8c:	0000ea3c 	.word	0x0000ea3c

00002d90 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    2d90:	4801      	ldr	r0, [pc, #4]	; (2d98 <dropped+0x8>)
    2d92:	f7ff bfa5 	b.w	2ce0 <log_output_dropped_process>
    2d96:	bf00      	nop
    2d98:	0000ea3c 	.word	0x0000ea3c

00002d9c <process>:
{
    2d9c:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2d9e:	4b06      	ldr	r3, [pc, #24]	; (2db8 <process+0x1c>)
    2da0:	6818      	ldr	r0, [r3, #0]
{
    2da2:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2da4:	f7ff fb42 	bl	242c <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    2da8:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    2daa:	4603      	mov	r3, r0
}
    2dac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    2db0:	4802      	ldr	r0, [pc, #8]	; (2dbc <process+0x20>)
    2db2:	220f      	movs	r2, #15
    2db4:	4718      	bx	r3
    2db6:	bf00      	nop
    2db8:	20000cd8 	.word	0x20000cd8
    2dbc:	0000ea3c 	.word	0x0000ea3c

00002dc0 <on_failed_write>:
	if (retry_cnt == 0) {
    2dc0:	b910      	cbnz	r0, 2dc8 <on_failed_write+0x8>
		host_present = false;
    2dc2:	4b07      	ldr	r3, [pc, #28]	; (2de0 <on_failed_write+0x20>)
    2dc4:	7018      	strb	r0, [r3, #0]
}
    2dc6:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    2dc8:	4b06      	ldr	r3, [pc, #24]	; (2de4 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
    2dca:	781b      	ldrb	r3, [r3, #0]
    2dcc:	b11b      	cbz	r3, 2dd6 <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
    2dce:	f241 3088 	movw	r0, #5000	; 0x1388
    2dd2:	f00b bbbb 	b.w	e54c <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    2dd6:	20a4      	movs	r0, #164	; 0xa4
    2dd8:	2100      	movs	r1, #0
    2dda:	f009 b955 	b.w	c088 <z_impl_k_sleep>
    2dde:	bf00      	nop
    2de0:	20001d03 	.word	0x20001d03
    2de4:	20001d04 	.word	0x20001d04

00002de8 <data_out_block_mode>:
{
    2de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    2dec:	f8df 9074 	ldr.w	r9, [pc, #116]	; 2e64 <data_out_block_mode+0x7c>
    2df0:	4f1d      	ldr	r7, [pc, #116]	; (2e68 <data_out_block_mode+0x80>)
{
    2df2:	4680      	mov	r8, r0
    2df4:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    2df6:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    2df8:	f899 5000 	ldrb.w	r5, [r9]
    2dfc:	b995      	cbnz	r5, 2e24 <data_out_block_mode+0x3c>
			RTT_LOCK();
    2dfe:	f008 f8f5 	bl	afec <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2e02:	4628      	mov	r0, r5
    2e04:	4632      	mov	r2, r6
    2e06:	4641      	mov	r1, r8
    2e08:	f008 f872 	bl	aef0 <SEGGER_RTT_WriteSkipNoLock>
    2e0c:	4605      	mov	r5, r0
			RTT_UNLOCK();
    2e0e:	f008 f8f7 	bl	b000 <zephyr_rtt_mutex_unlock>
		if (ret) {
    2e12:	b1e5      	cbz	r5, 2e4e <data_out_block_mode+0x66>
	host_present = true;
    2e14:	2301      	movs	r3, #1
    2e16:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
    2e18:	f899 3000 	ldrb.w	r3, [r9]
    2e1c:	b973      	cbnz	r3, 2e3c <data_out_block_mode+0x54>
}
    2e1e:	4630      	mov	r0, r6
    2e20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2e24:	4632      	mov	r2, r6
    2e26:	4641      	mov	r1, r8
    2e28:	2000      	movs	r0, #0
    2e2a:	f008 f861 	bl	aef0 <SEGGER_RTT_WriteSkipNoLock>
    2e2e:	4605      	mov	r5, r0
    2e30:	e7ef      	b.n	2e12 <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
    2e32:	4620      	mov	r0, r4
    2e34:	f7ff ffc4 	bl	2dc0 <on_failed_write>
    2e38:	1e65      	subs	r5, r4, #1
    2e3a:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    2e3c:	2000      	movs	r0, #0
    2e3e:	f008 f8cb 	bl	afd8 <SEGGER_RTT_HasDataUp>
    2e42:	2800      	cmp	r0, #0
    2e44:	d0eb      	beq.n	2e1e <data_out_block_mode+0x36>
    2e46:	783b      	ldrb	r3, [r7, #0]
    2e48:	2b00      	cmp	r3, #0
    2e4a:	d1f2      	bne.n	2e32 <data_out_block_mode+0x4a>
    2e4c:	e7e7      	b.n	2e1e <data_out_block_mode+0x36>
		} else if (host_present) {
    2e4e:	783b      	ldrb	r3, [r7, #0]
    2e50:	2b00      	cmp	r3, #0
    2e52:	d0e4      	beq.n	2e1e <data_out_block_mode+0x36>
			retry_cnt--;
    2e54:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
    2e56:	4620      	mov	r0, r4
    2e58:	f7ff ffb2 	bl	2dc0 <on_failed_write>
	} while ((ret == 0) && host_present);
    2e5c:	783b      	ldrb	r3, [r7, #0]
    2e5e:	2b00      	cmp	r3, #0
    2e60:	d1ca      	bne.n	2df8 <data_out_block_mode+0x10>
    2e62:	e7dc      	b.n	2e1e <data_out_block_mode+0x36>
    2e64:	20001d04 	.word	0x20001d04
    2e68:	20001d03 	.word	0x20001d03

00002e6c <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2e70:	4605      	mov	r5, r0
	__asm__ volatile(
    2e72:	f04f 0340 	mov.w	r3, #64	; 0x40
    2e76:	f3ef 8611 	mrs	r6, BASEPRI
    2e7a:	f383 8812 	msr	BASEPRI_MAX, r3
    2e7e:	f3bf 8f6f 	isb	sy
	return list->head;
    2e82:	4b0e      	ldr	r3, [pc, #56]	; (2ebc <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2e84:	4f0e      	ldr	r7, [pc, #56]	; (2ec0 <pm_state_notify+0x54>)
    2e86:	681c      	ldr	r4, [r3, #0]
    2e88:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2ec4 <pm_state_notify+0x58>
    2e8c:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2e90:	b92c      	cbnz	r4, 2e9e <pm_state_notify+0x32>
	__asm__ volatile(
    2e92:	f386 8811 	msr	BASEPRI, r6
    2e96:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    2e9e:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    2ea2:	2d00      	cmp	r5, #0
    2ea4:	bf18      	it	ne
    2ea6:	4613      	movne	r3, r2
		if (callback) {
    2ea8:	b12b      	cbz	r3, 2eb6 <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2eaa:	f898 2010 	ldrb.w	r2, [r8, #16]
    2eae:	fb09 f202 	mul.w	r2, r9, r2
    2eb2:	5cb8      	ldrb	r0, [r7, r2]
    2eb4:	4798      	blx	r3
	return node->next;
    2eb6:	6824      	ldr	r4, [r4, #0]
    2eb8:	e7ea      	b.n	2e90 <pm_state_notify+0x24>
    2eba:	bf00      	nop
    2ebc:	20000cf4 	.word	0x20000cf4
    2ec0:	20000ce8 	.word	0x20000ce8
    2ec4:	20001c98 	.word	0x20001c98

00002ec8 <pm_system_resume>:

void pm_system_resume(void)
{
    2ec8:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    2eca:	4b19      	ldr	r3, [pc, #100]	; (2f30 <pm_system_resume+0x68>)
    2ecc:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2ece:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2ed2:	f004 031f 	and.w	r3, r4, #31
    2ed6:	2201      	movs	r2, #1
    2ed8:	409a      	lsls	r2, r3
    2eda:	4b16      	ldr	r3, [pc, #88]	; (2f34 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2edc:	0961      	lsrs	r1, r4, #5
    2ede:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2ee2:	43d0      	mvns	r0, r2
    2ee4:	e853 1f00 	ldrex	r1, [r3]
    2ee8:	ea01 0500 	and.w	r5, r1, r0
    2eec:	e843 5600 	strex	r6, r5, [r3]
    2ef0:	2e00      	cmp	r6, #0
    2ef2:	d1f7      	bne.n	2ee4 <pm_system_resume+0x1c>
    2ef4:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    2ef8:	420a      	tst	r2, r1
    2efa:	d013      	beq.n	2f24 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    2efc:	4b0e      	ldr	r3, [pc, #56]	; (2f38 <pm_system_resume+0x70>)
    2efe:	4d0f      	ldr	r5, [pc, #60]	; (2f3c <pm_system_resume+0x74>)
    2f00:	b18b      	cbz	r3, 2f26 <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2f02:	230c      	movs	r3, #12
    2f04:	4363      	muls	r3, r4
    2f06:	18ea      	adds	r2, r5, r3
    2f08:	5ce8      	ldrb	r0, [r5, r3]
    2f0a:	7851      	ldrb	r1, [r2, #1]
    2f0c:	f00a fb71 	bl	d5f2 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    2f10:	2000      	movs	r0, #0
    2f12:	f7ff ffab 	bl	2e6c <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2f16:	230c      	movs	r3, #12
    2f18:	435c      	muls	r4, r3
    2f1a:	192a      	adds	r2, r5, r4
    2f1c:	2300      	movs	r3, #0
    2f1e:	512b      	str	r3, [r5, r4]
    2f20:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    2f24:	bd70      	pop	{r4, r5, r6, pc}
    2f26:	f383 8811 	msr	BASEPRI, r3
    2f2a:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    2f2e:	e7ef      	b.n	2f10 <pm_system_resume+0x48>
    2f30:	20001c98 	.word	0x20001c98
    2f34:	20000cfc 	.word	0x20000cfc
    2f38:	0000d5f3 	.word	0x0000d5f3
    2f3c:	20000ce8 	.word	0x20000ce8

00002f40 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    2f40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    2f44:	4b35      	ldr	r3, [pc, #212]	; (301c <pm_system_suspend+0xdc>)
{
    2f46:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    2f48:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    2f4a:	f04f 0340 	mov.w	r3, #64	; 0x40
    2f4e:	f3ef 8811 	mrs	r8, BASEPRI
    2f52:	f383 8812 	msr	BASEPRI_MAX, r3
    2f56:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    2f5a:	240c      	movs	r4, #12
    2f5c:	4b30      	ldr	r3, [pc, #192]	; (3020 <pm_system_suspend+0xe0>)
    2f5e:	4e31      	ldr	r6, [pc, #196]	; (3024 <pm_system_suspend+0xe4>)
    2f60:	436c      	muls	r4, r5
    2f62:	191a      	adds	r2, r3, r4
    2f64:	5d19      	ldrb	r1, [r3, r4]
    2f66:	2900      	cmp	r1, #0
    2f68:	d04c      	beq.n	3004 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    2f6a:	ca07      	ldmia	r2, {r0, r1, r2}
    2f6c:	eb06 0c04 	add.w	ip, r6, r4
    2f70:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    2f74:	2200      	movs	r2, #0
    2f76:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    2f78:	f388 8811 	msr	BASEPRI, r8
    2f7c:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    2f80:	230c      	movs	r3, #12
    2f82:	436b      	muls	r3, r5
    2f84:	18f2      	adds	r2, r6, r3
    2f86:	5cf0      	ldrb	r0, [r6, r3]
    2f88:	2800      	cmp	r0, #0
    2f8a:	d039      	beq.n	3000 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    2f8c:	1c7b      	adds	r3, r7, #1
    2f8e:	d010      	beq.n	2fb2 <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
    2f90:	f8d2 c008 	ldr.w	ip, [r2, #8]
    2f94:	4c24      	ldr	r4, [pc, #144]	; (3028 <pm_system_suspend+0xe8>)
    2f96:	4a25      	ldr	r2, [pc, #148]	; (302c <pm_system_suspend+0xec>)
    2f98:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    2f9c:	2100      	movs	r1, #0
    2f9e:	fbec 4100 	umlal	r4, r1, ip, r0
    2fa2:	2300      	movs	r3, #0
    2fa4:	4620      	mov	r0, r4
    2fa6:	f7fd f89b 	bl	e0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    2faa:	2101      	movs	r1, #1
    2fac:	1a38      	subs	r0, r7, r0
    2fae:	f004 f8a3 	bl	70f8 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2fb2:	f008 ffaf 	bl	bf14 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    2fb6:	2001      	movs	r0, #1
    2fb8:	f7ff ff58 	bl	2e6c <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2fbc:	f3bf 8f5b 	dmb	ish
    2fc0:	4b1b      	ldr	r3, [pc, #108]	; (3030 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    2fc2:	096a      	lsrs	r2, r5, #5
    2fc4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    2fc8:	f005 011f 	and.w	r1, r5, #31
    2fcc:	2201      	movs	r2, #1
    2fce:	408a      	lsls	r2, r1
    2fd0:	e853 0f00 	ldrex	r0, [r3]
    2fd4:	4310      	orrs	r0, r2
    2fd6:	e843 0100 	strex	r1, r0, [r3]
    2fda:	2900      	cmp	r1, #0
    2fdc:	d1f8      	bne.n	2fd0 <pm_system_suspend+0x90>
    2fde:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    2fe2:	4b14      	ldr	r3, [pc, #80]	; (3034 <pm_system_suspend+0xf4>)
    2fe4:	b13b      	cbz	r3, 2ff6 <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    2fe6:	230c      	movs	r3, #12
    2fe8:	fb03 f005 	mul.w	r0, r3, r5
    2fec:	1833      	adds	r3, r6, r0
    2fee:	5c30      	ldrb	r0, [r6, r0]
    2ff0:	7859      	ldrb	r1, [r3, #1]
    2ff2:	f00a faf2 	bl	d5da <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    2ff6:	f7ff ff67 	bl	2ec8 <pm_system_resume>
	k_sched_unlock();
    2ffa:	f008 ff9f 	bl	bf3c <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    2ffe:	2001      	movs	r0, #1
}
    3000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    3004:	4601      	mov	r1, r0
    3006:	4628      	mov	r0, r5
    3008:	f000 f816 	bl	3038 <pm_policy_next_state>
		if (info != NULL) {
    300c:	2800      	cmp	r0, #0
    300e:	d0b3      	beq.n	2f78 <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    3010:	c807      	ldmia	r0, {r0, r1, r2}
    3012:	4434      	add	r4, r6
    3014:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    3018:	e7ae      	b.n	2f78 <pm_system_suspend+0x38>
    301a:	bf00      	nop
    301c:	20001c98 	.word	0x20001c98
    3020:	20000cdc 	.word	0x20000cdc
    3024:	20000ce8 	.word	0x20000ce8
    3028:	000f423f 	.word	0x000f423f
    302c:	000f4240 	.word	0x000f4240
    3030:	20000cfc 	.word	0x20000cfc
    3034:	0000d5db 	.word	0x0000d5db

00003038 <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    3038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    303c:	b085      	sub	sp, #20
    303e:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    3040:	a903      	add	r1, sp, #12
    3042:	f000 f843 	bl	30cc <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    3046:	4b1e      	ldr	r3, [pc, #120]	; (30c0 <pm_policy_next_state+0x88>)
    3048:	9d03      	ldr	r5, [sp, #12]
    304a:	f8d3 a000 	ldr.w	sl, [r3]
    304e:	f8df 8074 	ldr.w	r8, [pc, #116]	; 30c4 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    3052:	1e43      	subs	r3, r0, #1
    3054:	b21b      	sxth	r3, r3
    3056:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    305a:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    305c:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    3060:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    3064:	f04f 0b00 	mov.w	fp, #0
    3068:	b924      	cbnz	r4, 3074 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    306a:	46a1      	mov	r9, r4
}
    306c:	4648      	mov	r0, r9
    306e:	b005      	add	sp, #20
    3070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3074:	6868      	ldr	r0, [r5, #4]
    3076:	4a14      	ldr	r2, [pc, #80]	; (30c8 <pm_policy_next_state+0x90>)
    3078:	46c4      	mov	ip, r8
    307a:	4659      	mov	r1, fp
    307c:	fbe0 c107 	umlal	ip, r1, r0, r7
    3080:	2300      	movs	r3, #0
    3082:	4660      	mov	r0, ip
    3084:	f7fd f82c 	bl	e0 <__aeabi_uldivmod>
    3088:	9001      	str	r0, [sp, #4]
    308a:	68a8      	ldr	r0, [r5, #8]
    308c:	4a0e      	ldr	r2, [pc, #56]	; (30c8 <pm_policy_next_state+0x90>)
    308e:	46c4      	mov	ip, r8
    3090:	4659      	mov	r1, fp
    3092:	fbe0 c107 	umlal	ip, r1, r0, r7
    3096:	2300      	movs	r3, #0
    3098:	4660      	mov	r0, ip
    309a:	f7fd f821 	bl	e0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    309e:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    30a2:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    30a4:	d001      	beq.n	30aa <pm_policy_next_state+0x72>
    30a6:	4582      	cmp	sl, r0
    30a8:	d905      	bls.n	30b6 <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    30aa:	1c73      	adds	r3, r6, #1
    30ac:	d0de      	beq.n	306c <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    30ae:	9b01      	ldr	r3, [sp, #4]
    30b0:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    30b2:	42b0      	cmp	r0, r6
    30b4:	d9da      	bls.n	306c <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    30b6:	3c01      	subs	r4, #1
    30b8:	b2a4      	uxth	r4, r4
    30ba:	3d0c      	subs	r5, #12
    30bc:	e7d4      	b.n	3068 <pm_policy_next_state+0x30>
    30be:	bf00      	nop
    30c0:	2000001c 	.word	0x2000001c
    30c4:	000f423f 	.word	0x000f423f
    30c8:	000f4240 	.word	0x000f4240

000030cc <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    30cc:	b908      	cbnz	r0, 30d2 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    30ce:	4b02      	ldr	r3, [pc, #8]	; (30d8 <pm_state_cpu_get_all+0xc>)
    30d0:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    30d2:	2000      	movs	r0, #0
    30d4:	4770      	bx	lr
    30d6:	bf00      	nop
    30d8:	0000ea4c 	.word	0x0000ea4c

000030dc <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    30dc:	b4f0      	push	{r4, r5, r6, r7}
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    30de:	4b0c      	ldr	r3, [pc, #48]	; (3110 <class_handler+0x34>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    30e0:	4e0c      	ldr	r6, [pc, #48]	; (3114 <class_handler+0x38>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    30e2:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    30e4:	4b0c      	ldr	r3, [pc, #48]	; (3118 <class_handler+0x3c>)
    30e6:	42b3      	cmp	r3, r6
    30e8:	d303      	bcc.n	30f2 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    30ea:	f06f 0085 	mvn.w	r0, #133	; 0x85
    30ee:	bcf0      	pop	{r4, r5, r6, r7}
    30f0:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    30f2:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    30f4:	42bd      	cmp	r5, r7
    30f6:	d309      	bcc.n	310c <class_handler+0x30>
		if (iface->class_handler &&
    30f8:	691c      	ldr	r4, [r3, #16]
    30fa:	b13c      	cbz	r4, 310c <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    30fc:	f895 c002 	ldrb.w	ip, [r5, #2]
    3100:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    3102:	45ac      	cmp	ip, r5
    3104:	d102      	bne.n	310c <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    3106:	4623      	mov	r3, r4
}
    3108:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    310a:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    310c:	3324      	adds	r3, #36	; 0x24
    310e:	e7ea      	b.n	30e6 <class_handler+0xa>
    3110:	20000d00 	.word	0x20000d00
    3114:	20000484 	.word	0x20000484
    3118:	20000460 	.word	0x20000460

0000311c <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    311c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3120:	4c13      	ldr	r4, [pc, #76]	; (3170 <custom_handler+0x54>)
    3122:	f8df 8050 	ldr.w	r8, [pc, #80]	; 3174 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3126:	f8df 9050 	ldr.w	r9, [pc, #80]	; 3178 <custom_handler+0x5c>
{
    312a:	4605      	mov	r5, r0
    312c:	460e      	mov	r6, r1
    312e:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3130:	4544      	cmp	r4, r8
    3132:	d303      	bcc.n	313c <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    3134:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3138:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    313c:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    313e:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    3142:	429a      	cmp	r2, r3
    3144:	d312      	bcc.n	316c <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    3146:	69a3      	ldr	r3, [r4, #24]
    3148:	b183      	cbz	r3, 316c <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    314a:	7890      	ldrb	r0, [r2, #2]
    314c:	7929      	ldrb	r1, [r5, #4]
    314e:	4288      	cmp	r0, r1
    3150:	d105      	bne.n	315e <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    3152:	463a      	mov	r2, r7
    3154:	4631      	mov	r1, r6
    3156:	4628      	mov	r0, r5
}
    3158:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    315c:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    315e:	7952      	ldrb	r2, [r2, #5]
    3160:	2a01      	cmp	r2, #1
    3162:	d103      	bne.n	316c <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    3164:	463a      	mov	r2, r7
    3166:	4631      	mov	r1, r6
    3168:	4628      	mov	r0, r5
    316a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    316c:	3424      	adds	r4, #36	; 0x24
    316e:	e7df      	b.n	3130 <custom_handler+0x14>
    3170:	20000460 	.word	0x20000460
    3174:	20000484 	.word	0x20000484
    3178:	20000d00 	.word	0x20000d00

0000317c <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    317c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3180:	4c0b      	ldr	r4, [pc, #44]	; (31b0 <vendor_handler+0x34>)
    3182:	f8df 8030 	ldr.w	r8, [pc, #48]	; 31b4 <vendor_handler+0x38>
{
    3186:	4605      	mov	r5, r0
    3188:	460e      	mov	r6, r1
    318a:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    318c:	4544      	cmp	r4, r8
    318e:	d302      	bcc.n	3196 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    3190:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3194:	e009      	b.n	31aa <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    3196:	6963      	ldr	r3, [r4, #20]
    3198:	b90b      	cbnz	r3, 319e <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    319a:	3424      	adds	r4, #36	; 0x24
    319c:	e7f6      	b.n	318c <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    319e:	463a      	mov	r2, r7
    31a0:	4631      	mov	r1, r6
    31a2:	4628      	mov	r0, r5
    31a4:	4798      	blx	r3
    31a6:	2800      	cmp	r0, #0
    31a8:	d1f7      	bne.n	319a <vendor_handler+0x1e>
}
    31aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    31ae:	bf00      	nop
    31b0:	20000460 	.word	0x20000460
    31b4:	20000484 	.word	0x20000484

000031b8 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    31b8:	4802      	ldr	r0, [pc, #8]	; (31c4 <usb_reset_alt_setting+0xc>)
    31ba:	2208      	movs	r2, #8
    31bc:	2100      	movs	r1, #0
    31be:	f00a b9f2 	b.w	d5a6 <memset>
    31c2:	bf00      	nop
    31c4:	20000dbb 	.word	0x20000dbb

000031c8 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    31c8:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    31ca:	4b0b      	ldr	r3, [pc, #44]	; (31f8 <is_ep_valid.part.0+0x30>)
    31cc:	4c0b      	ldr	r4, [pc, #44]	; (31fc <is_ep_valid.part.0+0x34>)
    31ce:	42a3      	cmp	r3, r4
    31d0:	d301      	bcc.n	31d6 <is_ep_valid.part.0+0xe>
	return false;
    31d2:	2000      	movs	r0, #0
}
    31d4:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    31d6:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    31d8:	7f1e      	ldrb	r6, [r3, #28]
    31da:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    31dc:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    31de:	b2d5      	uxtb	r5, r2
    31e0:	42ae      	cmp	r6, r5
    31e2:	d801      	bhi.n	31e8 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    31e4:	3324      	adds	r3, #36	; 0x24
    31e6:	e7f2      	b.n	31ce <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    31e8:	3201      	adds	r2, #1
    31ea:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    31ee:	4285      	cmp	r5, r0
    31f0:	d1f5      	bne.n	31de <is_ep_valid.part.0+0x16>
		return true;
    31f2:	2001      	movs	r0, #1
    31f4:	e7ee      	b.n	31d4 <is_ep_valid.part.0+0xc>
    31f6:	bf00      	nop
    31f8:	20000460 	.word	0x20000460
    31fc:	20000484 	.word	0x20000484

00003200 <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
    3200:	b508      	push	{r3, lr}
	handler = usb_dev.req_handlers[type];
    3202:	4809      	ldr	r0, [pc, #36]	; (3228 <usb_handle_request.constprop.0+0x28>)
	uint32_t type = setup->RequestType.type;
    3204:	7803      	ldrb	r3, [r0, #0]
    3206:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    320a:	330a      	adds	r3, #10
    320c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    3210:	b13b      	cbz	r3, 3222 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    3212:	f100 0208 	add.w	r2, r0, #8
    3216:	f100 0110 	add.w	r1, r0, #16
    321a:	4798      	blx	r3
    321c:	43c0      	mvns	r0, r0
    321e:	0fc0      	lsrs	r0, r0, #31
}
    3220:	bd08      	pop	{r3, pc}
		return false;
    3222:	4618      	mov	r0, r3
    3224:	e7fc      	b.n	3220 <usb_handle_request.constprop.0+0x20>
    3226:	bf00      	nop
    3228:	20000d00 	.word	0x20000d00

0000322c <usb_device_init.part.0>:

/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(void)
    322c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
	if (!device_descriptor) {
		LOG_ERR("Failed to configure USB device stack");
    322e:	4b08      	ldr	r3, [pc, #32]	; (3250 <usb_device_init.part.0+0x24>)
    3230:	9305      	str	r3, [sp, #20]
    3232:	2302      	movs	r3, #2
    3234:	9304      	str	r3, [sp, #16]
    3236:	4807      	ldr	r0, [pc, #28]	; (3254 <usb_device_init.part.0+0x28>)
    3238:	2300      	movs	r3, #0
    323a:	aa04      	add	r2, sp, #16
    323c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3240:	f7ff fadc 	bl	27fc <z_impl_z_log_msg_static_create>
	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
}
    3244:	f04f 30ff 	mov.w	r0, #4294967295
    3248:	b007      	add	sp, #28
    324a:	f85d fb04 	ldr.w	pc, [sp], #4
    324e:	bf00      	nop
    3250:	0000f27c 	.word	0x0000f27c
    3254:	0000e938 	.word	0x0000e938

00003258 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    3258:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    325a:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    325c:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    325e:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    3260:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    3264:	d007      	beq.n	3276 <usb_halt_endpoint_req.isra.0+0x1e>
    3266:	4620      	mov	r0, r4
    3268:	f7ff ffae 	bl	31c8 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    326c:	b178      	cbz	r0, 328e <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
    326e:	4b0d      	ldr	r3, [pc, #52]	; (32a4 <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    3270:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    3274:	b158      	cbz	r0, 328e <usb_halt_endpoint_req.isra.0+0x36>
		if (halt) {
    3276:	4e0b      	ldr	r6, [pc, #44]	; (32a4 <usb_halt_endpoint_req.isra.0+0x4c>)
			usb_dc_ep_set_stall(ep);
    3278:	4620      	mov	r0, r4
		if (halt) {
    327a:	b155      	cbz	r5, 3292 <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
    327c:	f002 fb52 	bl	5924 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    3280:	69f3      	ldr	r3, [r6, #28]
    3282:	b11b      	cbz	r3, 328c <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    3284:	f10d 0107 	add.w	r1, sp, #7
    3288:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    328a:	4798      	blx	r3
		return true;
    328c:	2001      	movs	r0, #1
}
    328e:	b002      	add	sp, #8
    3290:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    3292:	f002 fb81 	bl	5998 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    3296:	69f3      	ldr	r3, [r6, #28]
    3298:	2b00      	cmp	r3, #0
    329a:	d0f7      	beq.n	328c <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    329c:	f10d 0107 	add.w	r1, sp, #7
    32a0:	2009      	movs	r0, #9
    32a2:	e7f2      	b.n	328a <usb_halt_endpoint_req.isra.0+0x32>
    32a4:	20000d00 	.word	0x20000d00

000032a8 <get_ep_bm_from_addr.part.0>:
static uint32_t get_ep_bm_from_addr(uint8_t ep)
    32a8:	b580      	push	{r7, lr}
    32aa:	af00      	add	r7, sp, #0
		LOG_ERR("Endpoint 0x%02x is invalid", ep);
    32ac:	b088      	sub	sp, #32
    32ae:	466a      	mov	r2, sp
    32b0:	4b07      	ldr	r3, [pc, #28]	; (32d0 <get_ep_bm_from_addr.part.0+0x28>)
    32b2:	e9c2 3005 	strd	r3, r0, [r2, #20]
    32b6:	2303      	movs	r3, #3
    32b8:	f842 3f10 	str.w	r3, [r2, #16]!
    32bc:	4805      	ldr	r0, [pc, #20]	; (32d4 <get_ep_bm_from_addr.part.0+0x2c>)
    32be:	2300      	movs	r3, #0
    32c0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    32c4:	f7ff fa9a 	bl	27fc <z_impl_z_log_msg_static_create>
}
    32c8:	2000      	movs	r0, #0
    32ca:	46bd      	mov	sp, r7
    32cc:	bd80      	pop	{r7, pc}
    32ce:	bf00      	nop
    32d0:	0000f2a1 	.word	0x0000f2a1
    32d4:	0000e938 	.word	0x0000e938

000032d8 <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    32d8:	2804      	cmp	r0, #4
{
    32da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    32de:	f8df 909c 	ldr.w	r9, [pc, #156]	; 337c <forward_status_cb+0xa4>
    32e2:	4604      	mov	r4, r0
    32e4:	460f      	mov	r7, r1
	if (status == USB_DC_DISCONNECTED) {
    32e6:	d015      	beq.n	3314 <forward_status_cb+0x3c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    32e8:	2801      	cmp	r0, #1
    32ea:	d12f      	bne.n	334c <forward_status_cb+0x74>
		if (usb_dev.configured) {
    32ec:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3380 <forward_status_cb+0xa8>
    32f0:	f898 30b9 	ldrb.w	r3, [r8, #185]	; 0xb9
    32f4:	b353      	cbz	r3, 334c <forward_status_cb+0x74>
			usb_cancel_transfers();
    32f6:	f000 fdf3 	bl	3ee0 <usb_cancel_transfers>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    32fa:	4d22      	ldr	r5, [pc, #136]	; (3384 <forward_status_cb+0xac>)
    32fc:	454d      	cmp	r5, r9
    32fe:	d222      	bcs.n	3346 <forward_status_cb+0x6e>
		ep_data = cfg_data->endpoint;
    3300:	6a2a      	ldr	r2, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    3302:	f04f 0a00 	mov.w	sl, #0
    3306:	7f2b      	ldrb	r3, [r5, #28]
    3308:	fa5f f68a 	uxtb.w	r6, sl
    330c:	42b3      	cmp	r3, r6
    330e:	d804      	bhi.n	331a <forward_status_cb+0x42>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3310:	3524      	adds	r5, #36	; 0x24
    3312:	e7f3      	b.n	32fc <forward_status_cb+0x24>
		usb_reset_alt_setting();
    3314:	f7ff ff50 	bl	31b8 <usb_reset_alt_setting>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    3318:	e7e8      	b.n	32ec <forward_status_cb+0x14>
			ret = endpoint_callback(&ep_data[n]);
    331a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
    331e:	9201      	str	r2, [sp, #4]
	ret = usb_dc_ep_disable(ep_data->ep_addr);
    3320:	7930      	ldrb	r0, [r6, #4]
    3322:	f00a f997 	bl	d654 <usb_dc_ep_disable>
    3326:	4683      	mov	fp, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
    3328:	7930      	ldrb	r0, [r6, #4]
    332a:	f00a f8a3 	bl	d474 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    332e:	f8d8 30c4 	ldr.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    3332:	9a01      	ldr	r2, [sp, #4]
	usb_dev.ep_bm &= ~ep_bm;
    3334:	ea23 0300 	bic.w	r3, r3, r0
			if (ret < 0) {
    3338:	f1bb 0f00 	cmp.w	fp, #0
	usb_dev.ep_bm &= ~ep_bm;
    333c:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    3340:	f10a 0a01 	add.w	sl, sl, #1
    3344:	dadf      	bge.n	3306 <forward_status_cb+0x2e>
			usb_dev.configured = false;
    3346:	2300      	movs	r3, #0
    3348:	f888 30b9 	strb.w	r3, [r8, #185]	; 0xb9
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    334c:	4d0d      	ldr	r5, [pc, #52]	; (3384 <forward_status_cb+0xac>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    334e:	454d      	cmp	r5, r9
    3350:	d308      	bcc.n	3364 <forward_status_cb+0x8c>
	if (usb_dev.user_status_callback) {
    3352:	4b0b      	ldr	r3, [pc, #44]	; (3380 <forward_status_cb+0xa8>)
    3354:	6a1b      	ldr	r3, [r3, #32]
    3356:	b16b      	cbz	r3, 3374 <forward_status_cb+0x9c>
		usb_dev.user_status_callback(status, param);
    3358:	4639      	mov	r1, r7
    335a:	4620      	mov	r0, r4
}
    335c:	b003      	add	sp, #12
    335e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
    3362:	4718      	bx	r3
		if (cfg_data->cb_usb_status) {
    3364:	68eb      	ldr	r3, [r5, #12]
    3366:	b11b      	cbz	r3, 3370 <forward_status_cb+0x98>
			cfg_data->cb_usb_status(cfg_data, status, param);
    3368:	463a      	mov	r2, r7
    336a:	4621      	mov	r1, r4
    336c:	4628      	mov	r0, r5
    336e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3370:	3524      	adds	r5, #36	; 0x24
    3372:	e7ec      	b.n	334e <forward_status_cb+0x76>
}
    3374:	b003      	add	sp, #12
    3376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    337a:	bf00      	nop
    337c:	20000484 	.word	0x20000484
    3380:	20000d00 	.word	0x20000d00
    3384:	20000460 	.word	0x20000460

00003388 <disable_endpoint>:
{
    3388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    338a:	af00      	add	r7, sp, #0
    338c:	4605      	mov	r5, r0
	ret = usb_dc_ep_disable(ep_addr);
    338e:	f00a f961 	bl	d654 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    3392:	f110 0f78 	cmn.w	r0, #120	; 0x78
	ret = usb_dc_ep_disable(ep_addr);
    3396:	4604      	mov	r4, r0
	if (ret == -EALREADY) {
    3398:	d013      	beq.n	33c2 <disable_endpoint+0x3a>
	} else if (ret) {
    339a:	b190      	cbz	r0, 33c2 <disable_endpoint+0x3a>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_addr);
    339c:	466e      	mov	r6, sp
    339e:	b088      	sub	sp, #32
    33a0:	466a      	mov	r2, sp
    33a2:	4b0e      	ldr	r3, [pc, #56]	; (33dc <disable_endpoint+0x54>)
    33a4:	e9c2 3505 	strd	r3, r5, [r2, #20]
    33a8:	2303      	movs	r3, #3
    33aa:	f842 3f10 	str.w	r3, [r2, #16]!
    33ae:	480c      	ldr	r0, [pc, #48]	; (33e0 <disable_endpoint+0x58>)
    33b0:	2300      	movs	r3, #0
    33b2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    33b6:	f7ff fa21 	bl	27fc <z_impl_z_log_msg_static_create>
    33ba:	46b5      	mov	sp, r6
}
    33bc:	4620      	mov	r0, r4
    33be:	46bd      	mov	sp, r7
    33c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ep_bm = get_ep_bm_from_addr(ep_addr);
    33c2:	4628      	mov	r0, r5
    33c4:	f00a f856 	bl	d474 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    33c8:	4a06      	ldr	r2, [pc, #24]	; (33e4 <disable_endpoint+0x5c>)
    33ca:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    33ce:	ea23 0300 	bic.w	r3, r3, r0
    33d2:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	return 0;
    33d6:	2400      	movs	r4, #0
    33d8:	e7f0      	b.n	33bc <disable_endpoint+0x34>
    33da:	bf00      	nop
    33dc:	0000f2bc 	.word	0x0000f2bc
    33e0:	0000e938 	.word	0x0000e938
    33e4:	20000d00 	.word	0x20000d00

000033e8 <set_endpoint>:
{
    33e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    33ea:	b083      	sub	sp, #12
    33ec:	af00      	add	r7, sp, #0
    33ee:	4604      	mov	r4, r0
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    33f0:	7880      	ldrb	r0, [r0, #2]
    33f2:	7038      	strb	r0, [r7, #0]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    33f4:	7923      	ldrb	r3, [r4, #4]
    33f6:	7962      	ldrb	r2, [r4, #5]
	if (ep_bm & usb_dev.ep_bm) {
    33f8:	4d27      	ldr	r5, [pc, #156]	; (3498 <set_endpoint+0xb0>)
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    33fa:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    33fe:	807b      	strh	r3, [r7, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    3400:	78e3      	ldrb	r3, [r4, #3]
    3402:	f003 0303 	and.w	r3, r3, #3
    3406:	713b      	strb	r3, [r7, #4]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    3408:	f00a f834 	bl	d474 <get_ep_bm_from_addr>
	if (ep_bm & usb_dev.ep_bm) {
    340c:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    3410:	4218      	tst	r0, r3
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    3412:	4606      	mov	r6, r0
	if (ep_bm & usb_dev.ep_bm) {
    3414:	d00c      	beq.n	3430 <set_endpoint+0x48>
		reset_endpoint(ep_desc);
    3416:	78a4      	ldrb	r4, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    3418:	4620      	mov	r0, r4
    341a:	f000 fd43 	bl	3ea4 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    341e:	4620      	mov	r0, r4
    3420:	f7ff ffb2 	bl	3388 <disable_endpoint>
		if (!k_is_in_isr()) {
    3424:	f00a fe35 	bl	e092 <k_is_in_isr>
    3428:	b910      	cbnz	r0, 3430 <set_endpoint+0x48>
	return z_impl_k_usleep(us);
    342a:	2096      	movs	r0, #150	; 0x96
    342c:	f008 fe46 	bl	c0bc <z_impl_k_usleep>
	ret = usb_dc_ep_configure(&ep_cfg);
    3430:	4638      	mov	r0, r7
    3432:	f002 fa43 	bl	58bc <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    3436:	f110 0f78 	cmn.w	r0, #120	; 0x78
	ret = usb_dc_ep_configure(&ep_cfg);
    343a:	4603      	mov	r3, r0
	if (ret == -EALREADY) {
    343c:	7838      	ldrb	r0, [r7, #0]
    343e:	d014      	beq.n	346a <set_endpoint+0x82>
	} else if (ret) {
    3440:	b19b      	cbz	r3, 346a <set_endpoint+0x82>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    3442:	466c      	mov	r4, sp
    3444:	b088      	sub	sp, #32
    3446:	466a      	mov	r2, sp
    3448:	4b14      	ldr	r3, [pc, #80]	; (349c <set_endpoint+0xb4>)
    344a:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    344e:	2303      	movs	r3, #3
    3450:	f842 3f10 	str.w	r3, [r2, #16]!
    3454:	4812      	ldr	r0, [pc, #72]	; (34a0 <set_endpoint+0xb8>)
    3456:	2300      	movs	r3, #0
    3458:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    345c:	f7ff f9ce 	bl	27fc <z_impl_z_log_msg_static_create>
		return false;
    3460:	2000      	movs	r0, #0
    3462:	46a5      	mov	sp, r4
}
    3464:	370c      	adds	r7, #12
    3466:	46bd      	mov	sp, r7
    3468:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    346a:	f002 fad1 	bl	5a10 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    346e:	f110 0f78 	cmn.w	r0, #120	; 0x78
    3472:	d008      	beq.n	3486 <set_endpoint+0x9e>
	} else if (ret) {
    3474:	b138      	cbz	r0, 3486 <set_endpoint+0x9e>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    3476:	466c      	mov	r4, sp
    3478:	b088      	sub	sp, #32
    347a:	783b      	ldrb	r3, [r7, #0]
    347c:	466a      	mov	r2, sp
    347e:	4909      	ldr	r1, [pc, #36]	; (34a4 <set_endpoint+0xbc>)
    3480:	e9c2 1305 	strd	r1, r3, [r2, #20]
    3484:	e7e3      	b.n	344e <set_endpoint+0x66>
	usb_dev.ep_bm |= ep_bm;
    3486:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	usb_dev.configured = true;
    348a:	2001      	movs	r0, #1
	usb_dev.ep_bm |= ep_bm;
    348c:	4333      	orrs	r3, r6
	usb_dev.configured = true;
    348e:	f885 00b9 	strb.w	r0, [r5, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
    3492:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	return true;
    3496:	e7e5      	b.n	3464 <set_endpoint+0x7c>
    3498:	20000d00 	.word	0x20000d00
    349c:	0000f2de 	.word	0x0000f2de
    34a0:	0000e938 	.word	0x0000e938
    34a4:	0000f302 	.word	0x0000f302

000034a8 <usb_handle_standard_request>:
{
    34a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
    34ac:	4ea3      	ldr	r6, [pc, #652]	; (373c <usb_handle_standard_request+0x294>)
    34ae:	69b3      	ldr	r3, [r6, #24]
{
    34b0:	4604      	mov	r4, r0
    34b2:	460f      	mov	r7, r1
    34b4:	4615      	mov	r5, r2
	if (usb_dev.custom_req_handler &&
    34b6:	b9fb      	cbnz	r3, 34f8 <usb_handle_standard_request+0x50>
	switch (setup->RequestType.recipient) {
    34b8:	7823      	ldrb	r3, [r4, #0]
    34ba:	f003 031f 	and.w	r3, r3, #31
    34be:	2b01      	cmp	r3, #1
    34c0:	f000 809d 	beq.w	35fe <usb_handle_standard_request+0x156>
    34c4:	2b02      	cmp	r3, #2
    34c6:	f000 8104 	beq.w	36d2 <usb_handle_standard_request+0x22a>
    34ca:	bb33      	cbnz	r3, 351a <usb_handle_standard_request+0x72>
	if (usb_reqtype_is_to_host(setup)) {
    34cc:	f994 0000 	ldrsb.w	r0, [r4]
	uint8_t *data = *data_buf;
    34d0:	682a      	ldr	r2, [r5, #0]
		switch (setup->bRequest) {
    34d2:	7861      	ldrb	r1, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    34d4:	2800      	cmp	r0, #0
    34d6:	da34      	bge.n	3542 <usb_handle_standard_request+0x9a>
		switch (setup->bRequest) {
    34d8:	2906      	cmp	r1, #6
    34da:	d012      	beq.n	3502 <usb_handle_standard_request+0x5a>
    34dc:	2908      	cmp	r1, #8
    34de:	d02b      	beq.n	3538 <usb_handle_standard_request+0x90>
    34e0:	b9d9      	cbnz	r1, 351a <usb_handle_standard_request+0x72>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    34e2:	2301      	movs	r3, #1
    34e4:	7013      	strb	r3, [r2, #0]
	data[1] = 0U;
    34e6:	7051      	strb	r1, [r2, #1]
		data[0] |= (usb_dev.remote_wakeup ?
    34e8:	f896 30c3 	ldrb.w	r3, [r6, #195]	; 0xc3
    34ec:	005b      	lsls	r3, r3, #1
    34ee:	f043 0301 	orr.w	r3, r3, #1
    34f2:	7013      	strb	r3, [r2, #0]
		*len = 2;
    34f4:	2302      	movs	r3, #2
    34f6:	e12a      	b.n	374e <usb_handle_standard_request+0x2a6>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    34f8:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    34fa:	2800      	cmp	r0, #0
    34fc:	d1dc      	bne.n	34b8 <usb_handle_standard_request+0x10>
		return 0;
    34fe:	2000      	movs	r0, #0
    3500:	e00d      	b.n	351e <usb_handle_standard_request+0x76>
			return usb_get_descriptor(setup, len, data_buf);
    3502:	8862      	ldrh	r2, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    3504:	0a10      	lsrs	r0, r2, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    3506:	1f01      	subs	r1, r0, #4
    3508:	2901      	cmp	r1, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    350a:	4684      	mov	ip, r0
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    350c:	d905      	bls.n	351a <usb_handle_standard_request+0x72>
    350e:	2807      	cmp	r0, #7
    3510:	d803      	bhi.n	351a <usb_handle_standard_request+0x72>
	p = (uint8_t *)usb_dev.descriptors;
    3512:	6a71      	ldr	r1, [r6, #36]	; 0x24
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    3514:	b2d2      	uxtb	r2, r2
	while (p[DESC_bLength] != 0U) {
    3516:	780c      	ldrb	r4, [r1, #0]
    3518:	b91c      	cbnz	r4, 3522 <usb_handle_standard_request+0x7a>
			rc = -EINVAL;
    351a:	f06f 0015 	mvn.w	r0, #21
}
    351e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
    3522:	784e      	ldrb	r6, [r1, #1]
    3524:	4566      	cmp	r6, ip
    3526:	d103      	bne.n	3530 <usb_handle_standard_request+0x88>
			if (cur_index == index) {
    3528:	429a      	cmp	r2, r3
    352a:	f000 810b 	beq.w	3744 <usb_handle_standard_request+0x29c>
			cur_index++;
    352e:	3301      	adds	r3, #1
		p += p[DESC_bLength];
    3530:	4421      	add	r1, r4
    3532:	e7f0      	b.n	3516 <usb_handle_standard_request+0x6e>
			*len = p[DESC_bLength];
    3534:	780b      	ldrb	r3, [r1, #0]
    3536:	e10a      	b.n	374e <usb_handle_standard_request+0x2a6>
			data[0] = usb_dev.configuration;
    3538:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    353c:	7013      	strb	r3, [r2, #0]
				*len = 1;
    353e:	2301      	movs	r3, #1
    3540:	e105      	b.n	374e <usb_handle_standard_request+0x2a6>
		switch (setup->bRequest) {
    3542:	3901      	subs	r1, #1
    3544:	2908      	cmp	r1, #8
    3546:	d8e8      	bhi.n	351a <usb_handle_standard_request+0x72>
    3548:	a301      	add	r3, pc, #4	; (adr r3, 3550 <usb_handle_standard_request+0xa8>)
    354a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    354e:	bf00      	nop
    3550:	000035e9 	.word	0x000035e9
    3554:	0000351b 	.word	0x0000351b
    3558:	000035f7 	.word	0x000035f7
    355c:	0000351b 	.word	0x0000351b
    3560:	00003575 	.word	0x00003575
    3564:	0000351b 	.word	0x0000351b
    3568:	0000351b 	.word	0x0000351b
    356c:	0000351b 	.word	0x0000351b
    3570:	00003581 	.word	0x00003581
			return !usb_dc_set_address(setup->wValue);
    3574:	78a0      	ldrb	r0, [r4, #2]
    3576:	f002 f95d 	bl	5834 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    357a:	2800      	cmp	r0, #0
    357c:	d0bf      	beq.n	34fe <usb_handle_standard_request+0x56>
    357e:	e7cc      	b.n	351a <usb_handle_standard_request+0x72>
	if (setup->wValue == 0U) {
    3580:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    3582:	6a75      	ldr	r5, [r6, #36]	; 0x24
	if (setup->wValue == 0U) {
    3584:	bb63      	cbnz	r3, 35e0 <usb_handle_standard_request+0x138>
		usb_reset_alt_setting();
    3586:	f7ff fe17 	bl	31b8 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    358a:	8863      	ldrh	r3, [r4, #2]
    358c:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    3590:	69f3      	ldr	r3, [r6, #28]
    3592:	2b00      	cmp	r3, #0
    3594:	d0b3      	beq.n	34fe <usb_handle_standard_request+0x56>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    3596:	496a      	ldr	r1, [pc, #424]	; (3740 <usb_handle_standard_request+0x298>)
    3598:	2003      	movs	r0, #3
    359a:	4798      	blx	r3
    359c:	e7af      	b.n	34fe <usb_handle_standard_request+0x56>
		switch (p[DESC_bDescriptorType]) {
    359e:	786b      	ldrb	r3, [r5, #1]
    35a0:	2b04      	cmp	r3, #4
    35a2:	d010      	beq.n	35c6 <usb_handle_standard_request+0x11e>
    35a4:	2b05      	cmp	r3, #5
    35a6:	d011      	beq.n	35cc <usb_handle_standard_request+0x124>
    35a8:	2b02      	cmp	r3, #2
    35aa:	d104      	bne.n	35b6 <usb_handle_standard_request+0x10e>
			cur_config = p[CONF_DESC_bConfigurationValue];
    35ac:	796f      	ldrb	r7, [r5, #5]
			if (cur_config == setup->wValue) {
    35ae:	8863      	ldrh	r3, [r4, #2]
				found = true;
    35b0:	42bb      	cmp	r3, r7
    35b2:	bf08      	it	eq
    35b4:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    35b6:	782b      	ldrb	r3, [r5, #0]
    35b8:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    35ba:	782b      	ldrb	r3, [r5, #0]
    35bc:	2b00      	cmp	r3, #0
    35be:	d1ee      	bne.n	359e <usb_handle_standard_request+0xf6>
	if (found) {
    35c0:	2800      	cmp	r0, #0
    35c2:	d0aa      	beq.n	351a <usb_handle_standard_request+0x72>
    35c4:	e7df      	b.n	3586 <usb_handle_standard_request+0xde>
			cur_alt_setting =
    35c6:	f895 8003 	ldrb.w	r8, [r5, #3]
			break;
    35ca:	e7f4      	b.n	35b6 <usb_handle_standard_request+0x10e>
			if ((cur_config != setup->wValue) ||
    35cc:	8863      	ldrh	r3, [r4, #2]
    35ce:	42bb      	cmp	r3, r7
    35d0:	d1f1      	bne.n	35b6 <usb_handle_standard_request+0x10e>
    35d2:	f1b8 0f00 	cmp.w	r8, #0
    35d6:	d1ee      	bne.n	35b6 <usb_handle_standard_request+0x10e>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    35d8:	4628      	mov	r0, r5
    35da:	f7ff ff05 	bl	33e8 <set_endpoint>
			break;
    35de:	e7ea      	b.n	35b6 <usb_handle_standard_request+0x10e>
	uint8_t cur_config = 0xFF;
    35e0:	27ff      	movs	r7, #255	; 0xff
	bool found = false;
    35e2:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    35e4:	46b8      	mov	r8, r7
    35e6:	e7e8      	b.n	35ba <usb_handle_standard_request+0x112>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    35e8:	8863      	ldrh	r3, [r4, #2]
    35ea:	2b01      	cmp	r3, #1
    35ec:	d195      	bne.n	351a <usb_handle_standard_request+0x72>
					usb_dev.remote_wakeup = false;
    35ee:	2300      	movs	r3, #0
					usb_dev.remote_wakeup = true;
    35f0:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    35f4:	e783      	b.n	34fe <usb_handle_standard_request+0x56>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    35f6:	8863      	ldrh	r3, [r4, #2]
    35f8:	2b01      	cmp	r3, #1
    35fa:	d18e      	bne.n	351a <usb_handle_standard_request+0x72>
    35fc:	e7f8      	b.n	35f0 <usb_handle_standard_request+0x148>
	if (!is_device_configured() ||
    35fe:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    3602:	f8d5 c000 	ldr.w	ip, [r5]
    3606:	2b00      	cmp	r3, #0
    3608:	d087      	beq.n	351a <usb_handle_standard_request+0x72>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    360a:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    360c:	88a3      	ldrh	r3, [r4, #4]
    360e:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    3612:	462a      	mov	r2, r5
	while (p[DESC_bLength] != 0U) {
    3614:	7810      	ldrb	r0, [r2, #0]
    3616:	2800      	cmp	r0, #0
    3618:	f43f af7f 	beq.w	351a <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    361c:	7851      	ldrb	r1, [r2, #1]
    361e:	2902      	cmp	r1, #2
    3620:	d104      	bne.n	362c <usb_handle_standard_request+0x184>
			if (interface < cfg_descr->bNumInterfaces) {
    3622:	f892 8004 	ldrb.w	r8, [r2, #4]
    3626:	45f0      	cmp	r8, lr
    3628:	f200 8093 	bhi.w	3752 <usb_handle_standard_request+0x2aa>
		p += p[DESC_bLength];
    362c:	4402      	add	r2, r0
    362e:	e7f1      	b.n	3614 <usb_handle_standard_request+0x16c>
			data[0] = 0U;
    3630:	f88c 2000 	strb.w	r2, [ip]
			data[1] = 0U;
    3634:	f88c 2001 	strb.w	r2, [ip, #1]
			*len = 2;
    3638:	6039      	str	r1, [r7, #0]
			return true;
    363a:	e760      	b.n	34fe <usb_handle_standard_request+0x56>
		p += p[DESC_bLength];
    363c:	4415      	add	r5, r2
    363e:	e094      	b.n	376a <usb_handle_standard_request+0x2c2>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    3640:	2a0b      	cmp	r2, #11
    3642:	f47f af6a 	bne.w	351a <usb_handle_standard_request+0x72>
	bool ret = false;
    3646:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    3648:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    364c:	46c1      	mov	r9, r8
	const uint8_t *if_desc = NULL;
    364e:	46ba      	mov	sl, r7
    3650:	e006      	b.n	3660 <usb_handle_standard_request+0x1b8>
		switch (p[DESC_bDescriptorType]) {
    3652:	786b      	ldrb	r3, [r5, #1]
    3654:	2b04      	cmp	r3, #4
    3656:	d00f      	beq.n	3678 <usb_handle_standard_request+0x1d0>
    3658:	2b05      	cmp	r3, #5
    365a:	d021      	beq.n	36a0 <usb_handle_standard_request+0x1f8>
		p += p[DESC_bLength];
    365c:	782b      	ldrb	r3, [r5, #0]
    365e:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    3660:	782b      	ldrb	r3, [r5, #0]
    3662:	2b00      	cmp	r3, #0
    3664:	d1f5      	bne.n	3652 <usb_handle_standard_request+0x1aa>
	if (usb_dev.status_callback) {
    3666:	69f3      	ldr	r3, [r6, #28]
    3668:	b113      	cbz	r3, 3670 <usb_handle_standard_request+0x1c8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    366a:	4651      	mov	r1, sl
    366c:	2007      	movs	r0, #7
    366e:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    3670:	2f00      	cmp	r7, #0
    3672:	f47f af44 	bne.w	34fe <usb_handle_standard_request+0x56>
    3676:	e750      	b.n	351a <usb_handle_standard_request+0x72>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    3678:	f895 8002 	ldrb.w	r8, [r5, #2]
			if (cur_iface == setup->wIndex &&
    367c:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    367e:	f895 9003 	ldrb.w	r9, [r5, #3]
			if (cur_iface == setup->wIndex &&
    3682:	4598      	cmp	r8, r3
    3684:	d1ea      	bne.n	365c <usb_handle_standard_request+0x1b4>
			    cur_alt_setting == setup->wValue) {
    3686:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
    3688:	4599      	cmp	r9, r3
    368a:	d1e7      	bne.n	365c <usb_handle_standard_request+0x1b4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    368c:	f1b8 0f07 	cmp.w	r8, #7
    3690:	d81c      	bhi.n	36cc <usb_handle_standard_request+0x224>
		usb_dev.alt_setting[iface] = alt_setting;
    3692:	eb06 0308 	add.w	r3, r6, r8
		return true;
    3696:	46aa      	mov	sl, r5
				ret = usb_set_alt_setting(setup->wIndex,
    3698:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
		return true;
    369c:	2701      	movs	r7, #1
    369e:	e7dd      	b.n	365c <usb_handle_standard_request+0x1b4>
			if (cur_iface == setup->wIndex) {
    36a0:	88a3      	ldrh	r3, [r4, #4]
    36a2:	4543      	cmp	r3, r8
    36a4:	d1da      	bne.n	365c <usb_handle_standard_request+0x1b4>
	if (cur_alt_setting != alt_setting) {
    36a6:	78a3      	ldrb	r3, [r4, #2]
    36a8:	454b      	cmp	r3, r9
    36aa:	d00a      	beq.n	36c2 <usb_handle_standard_request+0x21a>
		ret = reset_endpoint(ep_desc);
    36ac:	78af      	ldrb	r7, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    36ae:	4638      	mov	r0, r7
    36b0:	f000 fbf8 	bl	3ea4 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    36b4:	4638      	mov	r0, r7
    36b6:	f7ff fe67 	bl	3388 <disable_endpoint>
    36ba:	fab0 f780 	clz	r7, r0
    36be:	097f      	lsrs	r7, r7, #5
    36c0:	e7cc      	b.n	365c <usb_handle_standard_request+0x1b4>
		ret = set_endpoint(ep_desc);
    36c2:	4628      	mov	r0, r5
    36c4:	f7ff fe90 	bl	33e8 <set_endpoint>
    36c8:	4607      	mov	r7, r0
    36ca:	e7c7      	b.n	365c <usb_handle_standard_request+0x1b4>
    36cc:	46aa      	mov	sl, r5
	return false;
    36ce:	2700      	movs	r7, #0
    36d0:	e7c4      	b.n	365c <usb_handle_standard_request+0x1b4>
	if (usb_reqtype_is_to_host(setup)) {
    36d2:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    36d6:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    36d8:	2a00      	cmp	r2, #0
    36da:	da18      	bge.n	370e <usb_handle_standard_request+0x266>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    36dc:	2b00      	cmp	r3, #0
    36de:	f47f af1c 	bne.w	351a <usb_handle_standard_request+0x72>
	uint8_t ep = setup->wIndex;
    36e2:	7924      	ldrb	r4, [r4, #4]
    36e4:	682d      	ldr	r5, [r5, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
    36e6:	0663      	lsls	r3, r4, #25
    36e8:	d00a      	beq.n	3700 <usb_handle_standard_request+0x258>
    36ea:	4620      	mov	r0, r4
    36ec:	f7ff fd6c 	bl	31c8 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    36f0:	2800      	cmp	r0, #0
    36f2:	f43f af12 	beq.w	351a <usb_handle_standard_request+0x72>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    36f6:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    36fa:	2b00      	cmp	r3, #0
    36fc:	f43f af0d 	beq.w	351a <usb_handle_standard_request+0x72>
		usb_dc_ep_is_stalled(ep, &data[0]);
    3700:	4629      	mov	r1, r5
    3702:	4620      	mov	r0, r4
    3704:	f002 f968 	bl	59d8 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    3708:	2300      	movs	r3, #0
    370a:	706b      	strb	r3, [r5, #1]
    370c:	e6f2      	b.n	34f4 <usb_handle_standard_request+0x4c>
		switch (setup->bRequest) {
    370e:	2b01      	cmp	r3, #1
    3710:	d008      	beq.n	3724 <usb_handle_standard_request+0x27c>
    3712:	2b03      	cmp	r3, #3
    3714:	f47f af01 	bne.w	351a <usb_handle_standard_request+0x72>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    3718:	8863      	ldrh	r3, [r4, #2]
    371a:	2b00      	cmp	r3, #0
    371c:	f47f aefd 	bne.w	351a <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    3720:	2101      	movs	r1, #1
    3722:	e003      	b.n	372c <usb_handle_standard_request+0x284>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    3724:	8861      	ldrh	r1, [r4, #2]
    3726:	2900      	cmp	r1, #0
    3728:	f47f aef7 	bne.w	351a <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    372c:	88a0      	ldrh	r0, [r4, #4]
    372e:	f7ff fd93 	bl	3258 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    3732:	2800      	cmp	r0, #0
    3734:	f47f aee3 	bne.w	34fe <usb_handle_standard_request+0x56>
    3738:	e6ef      	b.n	351a <usb_handle_standard_request+0x72>
    373a:	bf00      	nop
    373c:	20000d00 	.word	0x20000d00
    3740:	20000dba 	.word	0x20000dba
		if (type == USB_DESC_CONFIGURATION) {
    3744:	2802      	cmp	r0, #2
		*data = p;
    3746:	6029      	str	r1, [r5, #0]
		if (type == USB_DESC_CONFIGURATION) {
    3748:	f47f aef4 	bne.w	3534 <usb_handle_standard_request+0x8c>
			*len = (p[CONF_DESC_wTotalLength]) |
    374c:	884b      	ldrh	r3, [r1, #2]
		*len = 2;
    374e:	603b      	str	r3, [r7, #0]
		return true;
    3750:	e6d5      	b.n	34fe <usb_handle_standard_request+0x56>
	if (usb_reqtype_is_to_host(setup)) {
    3752:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
    3756:	7862      	ldrb	r2, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    3758:	2800      	cmp	r0, #0
    375a:	f6bf af71 	bge.w	3640 <usb_handle_standard_request+0x198>
		switch (setup->bRequest) {
    375e:	2a00      	cmp	r2, #0
    3760:	f43f af66 	beq.w	3630 <usb_handle_standard_request+0x188>
    3764:	2a0a      	cmp	r2, #10
    3766:	f47f aed8 	bne.w	351a <usb_handle_standard_request+0x72>
	while (p[DESC_bLength] != 0U) {
    376a:	782a      	ldrb	r2, [r5, #0]
    376c:	2a00      	cmp	r2, #0
    376e:	f43f aed4 	beq.w	351a <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    3772:	7869      	ldrb	r1, [r5, #1]
    3774:	2904      	cmp	r1, #4
    3776:	f47f af61 	bne.w	363c <usb_handle_standard_request+0x194>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    377a:	78a9      	ldrb	r1, [r5, #2]
			if (cur_iface == setup->wIndex) {
    377c:	428b      	cmp	r3, r1
    377e:	f47f af5d 	bne.w	363c <usb_handle_standard_request+0x194>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    3782:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    3784:	bf96      	itet	ls
    3786:	199b      	addls	r3, r3, r6
	return 0;
    3788:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    378a:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    378e:	f88c 3000 	strb.w	r3, [ip]
    3792:	e6d4      	b.n	353e <usb_handle_standard_request+0x96>

00003794 <usb_data_to_host>:
{
    3794:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    3796:	4c13      	ldr	r4, [pc, #76]	; (37e4 <usb_data_to_host+0x50>)
    3798:	7d23      	ldrb	r3, [r4, #20]
    379a:	b9cb      	cbnz	r3, 37d0 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    379c:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    379e:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    37a0:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    37a2:	ab01      	add	r3, sp, #4
    37a4:	2080      	movs	r0, #128	; 0x80
    37a6:	f009 fe73 	bl	d490 <usb_write>
		usb_dev.data_buf += chunk;
    37aa:	9a01      	ldr	r2, [sp, #4]
    37ac:	68a3      	ldr	r3, [r4, #8]
    37ae:	4413      	add	r3, r2
    37b0:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    37b2:	68e3      	ldr	r3, [r4, #12]
    37b4:	1a9b      	subs	r3, r3, r2
    37b6:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    37b8:	b943      	cbnz	r3, 37cc <usb_data_to_host+0x38>
    37ba:	b13a      	cbz	r2, 37cc <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    37bc:	6923      	ldr	r3, [r4, #16]
    37be:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    37c0:	429a      	cmp	r2, r3
    37c2:	dd03      	ble.n	37cc <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    37c4:	069b      	lsls	r3, r3, #26
    37c6:	d101      	bne.n	37cc <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    37c8:	2301      	movs	r3, #1
    37ca:	7523      	strb	r3, [r4, #20]
}
    37cc:	b002      	add	sp, #8
    37ce:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    37d0:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    37d2:	461a      	mov	r2, r3
    37d4:	4619      	mov	r1, r3
    37d6:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    37d8:	7523      	strb	r3, [r4, #20]
}
    37da:	b002      	add	sp, #8
    37dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    37e0:	f002 b940 	b.w	5a64 <usb_dc_ep_write>
    37e4:	20000d00 	.word	0x20000d00

000037e8 <usb_handle_control_transfer>:
{
    37e8:	b570      	push	{r4, r5, r6, lr}
    37ea:	b08a      	sub	sp, #40	; 0x28
	uint32_t chunk = 0U;
    37ec:	2300      	movs	r3, #0
{
    37ee:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    37f0:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    37f2:	4606      	mov	r6, r0
    37f4:	2800      	cmp	r0, #0
    37f6:	d168      	bne.n	38ca <usb_handle_control_transfer+0xe2>
    37f8:	2900      	cmp	r1, #0
    37fa:	d140      	bne.n	387e <usb_handle_control_transfer+0x96>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    37fc:	2208      	movs	r2, #8
    37fe:	460b      	mov	r3, r1
    3800:	eb0d 0102 	add.w	r1, sp, r2
    3804:	f009 ff3f 	bl	d686 <usb_dc_ep_read>
    3808:	2800      	cmp	r0, #0
    380a:	da04      	bge.n	3816 <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    380c:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    380e:	f002 f889 	bl	5924 <usb_dc_ep_set_stall>
}
    3812:	b00a      	add	sp, #40	; 0x28
    3814:	bd70      	pop	{r4, r5, r6, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    3816:	4c32      	ldr	r4, [pc, #200]	; (38e0 <usb_handle_control_transfer+0xf8>)
    3818:	9a02      	ldr	r2, [sp, #8]
    381a:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    381c:	9a03      	ldr	r2, [sp, #12]
    381e:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    3820:	f104 0238 	add.w	r2, r4, #56	; 0x38
    3824:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
    3826:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    382a:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
    382e:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    3830:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
    3832:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
    3836:	db15      	blt.n	3864 <usb_handle_control_transfer+0x7c>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    3838:	2b80      	cmp	r3, #128	; 0x80
    383a:	d90f      	bls.n	385c <usb_handle_control_transfer+0x74>
				LOG_ERR("Request buffer too small");
    383c:	4b29      	ldr	r3, [pc, #164]	; (38e4 <usb_handle_control_transfer+0xfc>)
    383e:	9309      	str	r3, [sp, #36]	; 0x24
    3840:	2302      	movs	r3, #2
    3842:	9308      	str	r3, [sp, #32]
    3844:	4828      	ldr	r0, [pc, #160]	; (38e8 <usb_handle_control_transfer+0x100>)
    3846:	462b      	mov	r3, r5
    3848:	aa08      	add	r2, sp, #32
    384a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    384e:	f7fe ffd5 	bl	27fc <z_impl_z_log_msg_static_create>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    3852:	2080      	movs	r0, #128	; 0x80
    3854:	f002 f866 	bl	5924 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    3858:	4628      	mov	r0, r5
    385a:	e7d8      	b.n	380e <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    385c:	b113      	cbz	r3, 3864 <usb_handle_control_transfer+0x7c>
				usb_dev.data_buf_residue = setup->wLength;
    385e:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    3862:	e7d6      	b.n	3812 <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    3864:	f7ff fccc 	bl	3200 <usb_handle_request.constprop.0>
    3868:	2800      	cmp	r0, #0
    386a:	d0cf      	beq.n	380c <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    386c:	88e2      	ldrh	r2, [r4, #6]
    386e:	6923      	ldr	r3, [r4, #16]
    3870:	429a      	cmp	r2, r3
    3872:	bfd4      	ite	le
    3874:	60e2      	strle	r2, [r4, #12]
    3876:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    3878:	f7ff ff8c 	bl	3794 <usb_data_to_host>
    387c:	e7c9      	b.n	3812 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    387e:	4c18      	ldr	r4, [pc, #96]	; (38e0 <usb_handle_control_transfer+0xf8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    3880:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    3884:	2a00      	cmp	r2, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    3886:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
    3888:	dc05      	bgt.n	3896 <usb_handle_control_transfer+0xae>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    388a:	4602      	mov	r2, r0
    388c:	f009 fefb 	bl	d686 <usb_dc_ep_read>
    3890:	2800      	cmp	r0, #0
    3892:	dabe      	bge.n	3812 <usb_handle_control_transfer+0x2a>
    3894:	e7ba      	b.n	380c <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    3896:	f009 fef6 	bl	d686 <usb_dc_ep_read>
    389a:	2800      	cmp	r0, #0
    389c:	da04      	bge.n	38a8 <usb_handle_control_transfer+0xc0>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    389e:	2080      	movs	r0, #128	; 0x80
    38a0:	f002 f840 	bl	5924 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    38a4:	4630      	mov	r0, r6
    38a6:	e7b2      	b.n	380e <usb_handle_control_transfer+0x26>
		usb_dev.data_buf += chunk;
    38a8:	9a01      	ldr	r2, [sp, #4]
    38aa:	68a3      	ldr	r3, [r4, #8]
    38ac:	4413      	add	r3, r2
    38ae:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    38b0:	68e3      	ldr	r3, [r4, #12]
    38b2:	1a9b      	subs	r3, r3, r2
    38b4:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    38b6:	2b00      	cmp	r3, #0
    38b8:	d1ab      	bne.n	3812 <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    38ba:	f104 0338 	add.w	r3, r4, #56	; 0x38
    38be:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    38c0:	f7ff fc9e 	bl	3200 <usb_handle_request.constprop.0>
    38c4:	2800      	cmp	r0, #0
    38c6:	d1d7      	bne.n	3878 <usb_handle_control_transfer+0x90>
    38c8:	e7a0      	b.n	380c <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    38ca:	2880      	cmp	r0, #128	; 0x80
    38cc:	d1a1      	bne.n	3812 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    38ce:	4b04      	ldr	r3, [pc, #16]	; (38e0 <usb_handle_control_transfer+0xf8>)
    38d0:	68da      	ldr	r2, [r3, #12]
    38d2:	2a00      	cmp	r2, #0
    38d4:	d1d0      	bne.n	3878 <usb_handle_control_transfer+0x90>
    38d6:	7d1b      	ldrb	r3, [r3, #20]
    38d8:	2b00      	cmp	r3, #0
    38da:	d1cd      	bne.n	3878 <usb_handle_control_transfer+0x90>
    38dc:	e799      	b.n	3812 <usb_handle_control_transfer+0x2a>
    38de:	bf00      	nop
    38e0:	20000d00 	.word	0x20000d00
    38e4:	0000f323 	.word	0x0000f323
    38e8:	0000e938 	.word	0x0000e938

000038ec <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    38ec:	4b05      	ldr	r3, [pc, #20]	; (3904 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    38ee:	4a06      	ldr	r2, [pc, #24]	; (3908 <usb_set_config+0x1c>)
    38f0:	629a      	str	r2, [r3, #40]	; 0x28
    38f2:	4a06      	ldr	r2, [pc, #24]	; (390c <usb_set_config+0x20>)
    38f4:	62da      	str	r2, [r3, #44]	; 0x2c
    38f6:	4a06      	ldr	r2, [pc, #24]	; (3910 <usb_set_config+0x24>)
    38f8:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    38fa:	4a06      	ldr	r2, [pc, #24]	; (3914 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    38fc:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    38fe:	619a      	str	r2, [r3, #24]
}
    3900:	2000      	movs	r0, #0
    3902:	4770      	bx	lr
    3904:	20000d00 	.word	0x20000d00
    3908:	000034a9 	.word	0x000034a9
    390c:	000030dd 	.word	0x000030dd
    3910:	0000317d 	.word	0x0000317d
    3914:	0000311d 	.word	0x0000311d

00003918 <usb_device_init>:
{
    3918:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
    391a:	4b09      	ldr	r3, [pc, #36]	; (3940 <usb_device_init+0x28>)
    391c:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    3920:	b954      	cbnz	r4, 3938 <usb_device_init+0x20>
	device_descriptor = usb_get_device_descriptor();
    3922:	f000 f8d9 	bl	3ad8 <usb_get_device_descriptor>
	if (!device_descriptor) {
    3926:	b918      	cbnz	r0, 3930 <usb_device_init+0x18>
}
    3928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    392c:	f7ff bc7e 	b.w	322c <usb_device_init.part.0>
	usb_set_config(device_descriptor);
    3930:	f7ff ffdc 	bl	38ec <usb_set_config>
	return 0;
    3934:	4620      	mov	r0, r4
}
    3936:	bd10      	pop	{r4, pc}
		return -EALREADY;
    3938:	f06f 0077 	mvn.w	r0, #119	; 0x77
    393c:	e7fb      	b.n	3936 <usb_device_init+0x1e>
    393e:	bf00      	nop
    3940:	20000d00 	.word	0x20000d00

00003944 <usb_enable>:
{
    3944:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    3948:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
    394a:	4d3b      	ldr	r5, [pc, #236]	; (3a38 <usb_enable+0xf4>)
	return z_impl_k_mutex_lock(mutex, timeout);
    394c:	483b      	ldr	r0, [pc, #236]	; (3a3c <usb_enable+0xf8>)
    394e:	f04f 32ff 	mov.w	r2, #4294967295
    3952:	f04f 33ff 	mov.w	r3, #4294967295
    3956:	f007 fe07 	bl	b568 <z_impl_k_mutex_lock>
    395a:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    395e:	2e00      	cmp	r6, #0
    3960:	d167      	bne.n	3a32 <usb_enable+0xee>
	usb_dev.status_callback = cb;
    3962:	4837      	ldr	r0, [pc, #220]	; (3a40 <usb_enable+0xfc>)
	usb_dev.user_status_callback = status_cb;
    3964:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    3966:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    3968:	f002 f9f0 	bl	5d4c <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    396c:	f001 ff30 	bl	57d0 <usb_dc_attach>
	if (ret < 0) {
    3970:	1e04      	subs	r4, r0, #0
    3972:	db42      	blt.n	39fa <usb_enable+0xb6>
	ret = usb_transfer_init();
    3974:	f000 fad8 	bl	3f28 <usb_transfer_init>
	if (ret < 0) {
    3978:	1e04      	subs	r4, r0, #0
    397a:	db3e      	blt.n	39fa <usb_enable+0xb6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    397c:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    397e:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    3980:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    3984:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    3988:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    398c:	f001 ff96 	bl	58bc <usb_dc_ep_configure>
	if (ret < 0) {
    3990:	1e04      	subs	r4, r0, #0
    3992:	db32      	blt.n	39fa <usb_enable+0xb6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    3994:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    3996:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    3998:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    399c:	f001 ff8e 	bl	58bc <usb_dc_ep_configure>
	if (ret < 0) {
    39a0:	1e04      	subs	r4, r0, #0
    39a2:	db2a      	blt.n	39fa <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    39a4:	4927      	ldr	r1, [pc, #156]	; (3a44 <usb_enable+0x100>)
    39a6:	4630      	mov	r0, r6
    39a8:	f002 f9bc 	bl	5d24 <usb_dc_ep_set_callback>
	if (ret < 0) {
    39ac:	1e04      	subs	r4, r0, #0
    39ae:	db24      	blt.n	39fa <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    39b0:	4924      	ldr	r1, [pc, #144]	; (3a44 <usb_enable+0x100>)
    39b2:	4638      	mov	r0, r7
    39b4:	f002 f9b6 	bl	5d24 <usb_dc_ep_set_callback>
	if (ret < 0) {
    39b8:	1e04      	subs	r4, r0, #0
    39ba:	db1e      	blt.n	39fa <usb_enable+0xb6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    39bc:	4c22      	ldr	r4, [pc, #136]	; (3a48 <usb_enable+0x104>)
    39be:	f8df 808c 	ldr.w	r8, [pc, #140]	; 3a4c <usb_enable+0x108>
    39c2:	4544      	cmp	r4, r8
    39c4:	d320      	bcc.n	3a08 <usb_enable+0xc4>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    39c6:	2000      	movs	r0, #0
    39c8:	f002 f822 	bl	5a10 <usb_dc_ep_enable>
	if (ret < 0) {
    39cc:	1e04      	subs	r4, r0, #0
    39ce:	db14      	blt.n	39fa <usb_enable+0xb6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    39d0:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    39d4:	2080      	movs	r0, #128	; 0x80
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    39d6:	f043 0301 	orr.w	r3, r3, #1
    39da:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    39de:	f002 f817 	bl	5a10 <usb_dc_ep_enable>
	if (ret < 0) {
    39e2:	1e04      	subs	r4, r0, #0
    39e4:	db09      	blt.n	39fa <usb_enable+0xb6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
    39e6:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    39ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    39ee:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	usb_dev.enabled = true;
    39f2:	2301      	movs	r3, #1
    39f4:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    39f8:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    39fa:	4810      	ldr	r0, [pc, #64]	; (3a3c <usb_enable+0xf8>)
    39fc:	f007 fe2e 	bl	b65c <z_impl_k_mutex_unlock>
}
    3a00:	4620      	mov	r0, r4
    3a02:	b002      	add	sp, #8
    3a04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    3a08:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    3a0a:	2600      	movs	r6, #0
    3a0c:	7f22      	ldrb	r2, [r4, #28]
    3a0e:	b2f3      	uxtb	r3, r6
    3a10:	429a      	cmp	r2, r3
    3a12:	d801      	bhi.n	3a18 <usb_enable+0xd4>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3a14:	3424      	adds	r4, #36	; 0x24
    3a16:	e7d4      	b.n	39c2 <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    3a18:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    3a1c:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    3a20:	7910      	ldrb	r0, [r2, #4]
    3a22:	f002 f97f 	bl	5d24 <usb_dc_ep_set_callback>
    3a26:	3601      	adds	r6, #1
    3a28:	2800      	cmp	r0, #0
    3a2a:	d0ef      	beq.n	3a0c <usb_enable+0xc8>
    3a2c:	f04f 34ff 	mov.w	r4, #4294967295
    3a30:	e7e3      	b.n	39fa <usb_enable+0xb6>
		ret = -EALREADY;
    3a32:	f06f 0477 	mvn.w	r4, #119	; 0x77
    3a36:	e7e0      	b.n	39fa <usb_enable+0xb6>
    3a38:	20000d00 	.word	0x20000d00
    3a3c:	20000398 	.word	0x20000398
    3a40:	000032d9 	.word	0x000032d9
    3a44:	000037e9 	.word	0x000037e9
    3a48:	20000460 	.word	0x20000460
    3a4c:	20000484 	.word	0x20000484

00003a50 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    3a50:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    3a52:	4b1f      	ldr	r3, [pc, #124]	; (3ad0 <usb_update_sn_string_descriptor+0x80>)
{
    3a54:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    3a56:	aa05      	add	r2, sp, #20
    3a58:	f103 0510 	add.w	r5, r3, #16
    3a5c:	6818      	ldr	r0, [r3, #0]
    3a5e:	6859      	ldr	r1, [r3, #4]
    3a60:	4614      	mov	r4, r2
    3a62:	c403      	stmia	r4!, {r0, r1}
    3a64:	3308      	adds	r3, #8
    3a66:	42ab      	cmp	r3, r5
    3a68:	4622      	mov	r2, r4
    3a6a:	d1f7      	bne.n	3a5c <usb_update_sn_string_descriptor+0xc>
    3a6c:	781b      	ldrb	r3, [r3, #0]
    3a6e:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    3a70:	2210      	movs	r2, #16
    3a72:	2100      	movs	r1, #0
    3a74:	a801      	add	r0, sp, #4
    3a76:	f009 fd96 	bl	d5a6 <memset>
	memset(sn, 0, sizeof(sn));
    3a7a:	2212      	movs	r2, #18
    3a7c:	2100      	movs	r1, #0
    3a7e:	4815      	ldr	r0, [pc, #84]	; (3ad4 <usb_update_sn_string_descriptor+0x84>)
    3a80:	f009 fd91 	bl	d5a6 <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    3a84:	2110      	movs	r1, #16
    3a86:	a801      	add	r0, sp, #4
    3a88:	f009 fef7 	bl	d87a <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    3a8c:	2800      	cmp	r0, #0
    3a8e:	dd1b      	ble.n	3ac8 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    3a90:	2808      	cmp	r0, #8
    3a92:	bfb8      	it	lt
    3a94:	2008      	movlt	r0, #8
    3a96:	3809      	subs	r0, #9
    3a98:	ab01      	add	r3, sp, #4
    3a9a:	490e      	ldr	r1, [pc, #56]	; (3ad4 <usb_update_sn_string_descriptor+0x84>)
    3a9c:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    3a9e:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    3aa0:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    3aa4:	ac0a      	add	r4, sp, #40	; 0x28
    3aa6:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    3aaa:	f003 030f 	and.w	r3, r3, #15
    3aae:	3328      	adds	r3, #40	; 0x28
    3ab0:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
    3ab2:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    3ab4:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    3ab8:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    3abc:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
    3abe:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    3ac0:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
    3ac2:	f101 0102 	add.w	r1, r1, #2
    3ac6:	d1eb      	bne.n	3aa0 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    3ac8:	4802      	ldr	r0, [pc, #8]	; (3ad4 <usb_update_sn_string_descriptor+0x84>)
    3aca:	b00b      	add	sp, #44	; 0x2c
    3acc:	bd30      	pop	{r4, r5, pc}
    3ace:	bf00      	nop
    3ad0:	0000f347 	.word	0x0000f347
    3ad4:	20001d15 	.word	0x20001d15

00003ad8 <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
    3ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3adc:	4c83      	ldr	r4, [pc, #524]	; (3cec <usb_get_device_descriptor+0x214>)
    3ade:	b08b      	sub	sp, #44	; 0x2c
    3ae0:	af00      	add	r7, sp, #0
	uint8_t str_descr_idx = 0U;
    3ae2:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    3ae4:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    3ae8:	46b2      	mov	sl, r6
	struct usb_cfg_data *cfg_data = NULL;
    3aea:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    3aec:	46b0      	mov	r8, r6
	while (head->bLength != 0U) {
    3aee:	7823      	ldrb	r3, [r4, #0]
    3af0:	b943      	cbnz	r3, 3b04 <usb_get_device_descriptor+0x2c>
	if ((head + 1) != __usb_descriptor_end) {
    3af2:	4b7f      	ldr	r3, [pc, #508]	; (3cf0 <usb_get_device_descriptor+0x218>)
    3af4:	3402      	adds	r4, #2
    3af6:	429c      	cmp	r4, r3
    3af8:	d1f3      	bne.n	3ae2 <usb_get_device_descriptor+0xa>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    3afa:	487c      	ldr	r0, [pc, #496]	; (3cec <usb_get_device_descriptor+0x214>)
}
    3afc:	372c      	adds	r7, #44	; 0x2c
    3afe:	46bd      	mov	sp, r7
    3b00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (head->bDescriptorType) {
    3b04:	7863      	ldrb	r3, [r4, #1]
    3b06:	2b05      	cmp	r3, #5
    3b08:	d805      	bhi.n	3b16 <usb_get_device_descriptor+0x3e>
    3b0a:	e8df f003 	tbb	[pc, r3]
    3b0e:	04a6      	.short	0x04a6
    3b10:	3f07a603 	.word	0x3f07a603
    3b14:	46a0      	mov	r8, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    3b16:	7823      	ldrb	r3, [r4, #0]
    3b18:	441c      	add	r4, r3
    3b1a:	e7e8      	b.n	3aee <usb_get_device_descriptor+0x16>
			if (if_descr->bAlternateSetting) {
    3b1c:	78e3      	ldrb	r3, [r4, #3]
    3b1e:	2b00      	cmp	r3, #0
    3b20:	d1f9      	bne.n	3b16 <usb_get_device_descriptor+0x3e>
			if (if_descr->bInterfaceNumber == 0U) {
    3b22:	78a3      	ldrb	r3, [r4, #2]
    3b24:	b343      	cbz	r3, 3b78 <usb_get_device_descriptor+0xa0>
			numof_ifaces++;
    3b26:	f10a 0a01 	add.w	sl, sl, #1
    3b2a:	fa5f fa8a 	uxtb.w	sl, sl
			break;
    3b2e:	e7f2      	b.n	3b16 <usb_get_device_descriptor+0x3e>
		if (cfg_data->interface_descriptor == iface) {
    3b30:	686a      	ldr	r2, [r5, #4]
    3b32:	4294      	cmp	r4, r2
    3b34:	d023      	beq.n	3b7e <usb_get_device_descriptor+0xa6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3b36:	3524      	adds	r5, #36	; 0x24
    3b38:	429d      	cmp	r5, r3
    3b3a:	d3f9      	bcc.n	3b30 <usb_get_device_descriptor+0x58>
					LOG_ERR("There is no usb_cfg_data "
    3b3c:	466d      	mov	r5, sp
    3b3e:	b088      	sub	sp, #32
    3b40:	466a      	mov	r2, sp
    3b42:	4b6c      	ldr	r3, [pc, #432]	; (3cf4 <usb_get_device_descriptor+0x21c>)
    3b44:	e9c2 3405 	strd	r3, r4, [r2, #20]
    3b48:	2303      	movs	r3, #3
    3b4a:	f842 3f10 	str.w	r3, [r2, #16]!
    3b4e:	486a      	ldr	r0, [pc, #424]	; (3cf8 <usb_get_device_descriptor+0x220>)
    3b50:	2300      	movs	r3, #0
    3b52:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3b56:	f7fe fe51 	bl	27fc <z_impl_z_log_msg_static_create>
    3b5a:	46ad      	mov	sp, r5
		LOG_ERR("Failed to fixup USB descriptor");
    3b5c:	4b67      	ldr	r3, [pc, #412]	; (3cfc <usb_get_device_descriptor+0x224>)
    3b5e:	627b      	str	r3, [r7, #36]	; 0x24
    3b60:	2302      	movs	r3, #2
    3b62:	623b      	str	r3, [r7, #32]
    3b64:	4864      	ldr	r0, [pc, #400]	; (3cf8 <usb_get_device_descriptor+0x220>)
    3b66:	2300      	movs	r3, #0
    3b68:	f107 0220 	add.w	r2, r7, #32
    3b6c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3b70:	f7fe fe44 	bl	27fc <z_impl_z_log_msg_static_create>
		return NULL;
    3b74:	2000      	movs	r0, #0
    3b76:	e7c1      	b.n	3afc <usb_get_device_descriptor+0x24>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3b78:	4d61      	ldr	r5, [pc, #388]	; (3d00 <usb_get_device_descriptor+0x228>)
    3b7a:	4b62      	ldr	r3, [pc, #392]	; (3d04 <usb_get_device_descriptor+0x22c>)
    3b7c:	e7dc      	b.n	3b38 <usb_get_device_descriptor+0x60>
				if (cfg_data->interface_config) {
    3b7e:	68ab      	ldr	r3, [r5, #8]
    3b80:	2b00      	cmp	r3, #0
    3b82:	d0d0      	beq.n	3b26 <usb_get_device_descriptor+0x4e>
					cfg_data->interface_config(head,
    3b84:	4651      	mov	r1, sl
    3b86:	4620      	mov	r0, r4
    3b88:	4798      	blx	r3
    3b8a:	e7cc      	b.n	3b26 <usb_get_device_descriptor+0x4e>
			if (!cfg_data) {
    3b8c:	2d00      	cmp	r5, #0
    3b8e:	d162      	bne.n	3c56 <usb_get_device_descriptor+0x17e>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    3b90:	4b5d      	ldr	r3, [pc, #372]	; (3d08 <usb_get_device_descriptor+0x230>)
				LOG_ERR("Failed to validate endpoints");
    3b92:	627b      	str	r3, [r7, #36]	; 0x24
    3b94:	2302      	movs	r3, #2
    3b96:	623b      	str	r3, [r7, #32]
    3b98:	4857      	ldr	r0, [pc, #348]	; (3cf8 <usb_get_device_descriptor+0x220>)
    3b9a:	2300      	movs	r3, #0
    3b9c:	f107 0220 	add.w	r2, r7, #32
    3ba0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3ba4:	f7fe fe2a 	bl	27fc <z_impl_z_log_msg_static_create>
				return -1;
    3ba8:	e7d8      	b.n	3b5c <usb_get_device_descriptor+0x84>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    3baa:	6a29      	ldr	r1, [r5, #32]
    3bac:	78a0      	ldrb	r0, [r4, #2]
    3bae:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    3bb2:	790b      	ldrb	r3, [r1, #4]
    3bb4:	4298      	cmp	r0, r3
    3bb6:	d005      	beq.n	3bc4 <usb_get_device_descriptor+0xec>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    3bb8:	3201      	adds	r2, #1
    3bba:	7f2b      	ldrb	r3, [r5, #28]
    3bbc:	429a      	cmp	r2, r3
    3bbe:	d3f4      	bcc.n	3baa <usb_get_device_descriptor+0xd2>
				LOG_ERR("Failed to validate endpoints");
    3bc0:	4b52      	ldr	r3, [pc, #328]	; (3d0c <usb_get_device_descriptor+0x234>)
    3bc2:	e7e6      	b.n	3b92 <usb_get_device_descriptor+0xba>
    3bc4:	f04f 0901 	mov.w	r9, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    3bc8:	78e0      	ldrb	r0, [r4, #3]
    3bca:	f000 0003 	and.w	r0, r0, #3
    3bce:	7538      	strb	r0, [r7, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    3bd0:	7920      	ldrb	r0, [r4, #4]
    3bd2:	f894 c005 	ldrb.w	ip, [r4, #5]
    3bd6:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    3bda:	8278      	strh	r0, [r7, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    3bdc:	f994 0002 	ldrsb.w	r0, [r4, #2]
    3be0:	2800      	cmp	r0, #0
    3be2:	fa5f f389 	uxtb.w	r3, r9
    3be6:	da28      	bge.n	3c3a <usb_get_device_descriptor+0x162>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    3be8:	f109 0010 	add.w	r0, r9, #16
    3bec:	f04f 0c01 	mov.w	ip, #1
    3bf0:	fa0c f000 	lsl.w	r0, ip, r0
    3bf4:	ea10 0f0b 	tst.w	r0, fp
    3bf8:	d127      	bne.n	3c4a <usb_get_device_descriptor+0x172>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    3bfa:	f043 0080 	orr.w	r0, r3, #128	; 0x80
    3bfe:	7438      	strb	r0, [r7, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    3c00:	f107 0010 	add.w	r0, r7, #16
    3c04:	e9c7 3101 	strd	r3, r1, [r7, #4]
    3c08:	60fa      	str	r2, [r7, #12]
    3c0a:	f001 fe25 	bl	5858 <usb_dc_ep_check_cap>
    3c0e:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    3c12:	687b      	ldr	r3, [r7, #4]
    3c14:	b9c8      	cbnz	r0, 3c4a <usb_get_device_descriptor+0x172>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    3c16:	7c3a      	ldrb	r2, [r7, #16]
    3c18:	70a2      	strb	r2, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    3c1a:	f012 0f80 	tst.w	r2, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    3c1e:	bf18      	it	ne
    3c20:	3310      	addne	r3, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    3c22:	710a      	strb	r2, [r1, #4]
					*requested_ep |= (1U << (idx + 16U));
    3c24:	bf18      	it	ne
    3c26:	b2db      	uxtbne	r3, r3
    3c28:	f04f 0201 	mov.w	r2, #1
    3c2c:	bf14      	ite	ne
    3c2e:	409a      	lslne	r2, r3
					*requested_ep |= (1U << idx);
    3c30:	fa02 f209 	lsleq.w	r2, r2, r9
    3c34:	ea4b 0b02 	orr.w	fp, fp, r2
				return 0;
    3c38:	e76d      	b.n	3b16 <usb_get_device_descriptor+0x3e>
				if ((*requested_ep & (1U << (idx)))) {
    3c3a:	2001      	movs	r0, #1
    3c3c:	fa00 f009 	lsl.w	r0, r0, r9
    3c40:	ea10 0f0b 	tst.w	r0, fp
    3c44:	d101      	bne.n	3c4a <usb_get_device_descriptor+0x172>
    3c46:	4618      	mov	r0, r3
    3c48:	e7d9      	b.n	3bfe <usb_get_device_descriptor+0x126>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    3c4a:	f109 0901 	add.w	r9, r9, #1
    3c4e:	f1b9 0f10 	cmp.w	r9, #16
    3c52:	d1b9      	bne.n	3bc8 <usb_get_device_descriptor+0xf0>
    3c54:	e7b0      	b.n	3bb8 <usb_get_device_descriptor+0xe0>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    3c56:	2200      	movs	r2, #0
    3c58:	e7af      	b.n	3bba <usb_get_device_descriptor+0xe2>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    3c5a:	2e03      	cmp	r6, #3
    3c5c:	d12a      	bne.n	3cb4 <usb_get_device_descriptor+0x1dc>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    3c5e:	f7ff fef7 	bl	3a50 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    3c62:	4681      	mov	r9, r0
    3c64:	b1a8      	cbz	r0, 3c92 <usb_get_device_descriptor+0x1ba>
	runtime_sn_len = strlen(runtime_sn);
    3c66:	f009 fc77 	bl	d558 <strlen>
	if (!runtime_sn_len) {
    3c6a:	60f8      	str	r0, [r7, #12]
    3c6c:	b188      	cbz	r0, 3c92 <usb_get_device_descriptor+0x1ba>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    3c6e:	4828      	ldr	r0, [pc, #160]	; (3d10 <usb_get_device_descriptor+0x238>)
    3c70:	f009 fc72 	bl	d558 <strlen>
	if (runtime_sn_len != default_sn_len) {
    3c74:	68fa      	ldr	r2, [r7, #12]
    3c76:	4282      	cmp	r2, r0
    3c78:	d017      	beq.n	3caa <usb_get_device_descriptor+0x1d2>
		LOG_ERR("the new SN descriptor doesn't have the same "
    3c7a:	4b26      	ldr	r3, [pc, #152]	; (3d14 <usb_get_device_descriptor+0x23c>)
    3c7c:	627b      	str	r3, [r7, #36]	; 0x24
    3c7e:	2302      	movs	r3, #2
    3c80:	623b      	str	r3, [r7, #32]
    3c82:	481d      	ldr	r0, [pc, #116]	; (3cf8 <usb_get_device_descriptor+0x220>)
    3c84:	2300      	movs	r3, #0
    3c86:	f107 0220 	add.w	r2, r7, #32
    3c8a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3c8e:	f7fe fdb5 	bl	27fc <z_impl_z_log_msg_static_create>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    3c92:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    3c94:	f06f 0102 	mvn.w	r1, #2
    3c98:	18e2      	adds	r2, r4, r3
    3c9a:	1b09      	subs	r1, r1, r4
    3c9c:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    3ca0:	42d1      	cmn	r1, r2
    3ca2:	d50e      	bpl.n	3cc2 <usb_get_device_descriptor+0x1ea>
			str_descr_idx += 1U;
    3ca4:	3601      	adds	r6, #1
    3ca6:	b2f6      	uxtb	r6, r6
			break;
    3ca8:	e735      	b.n	3b16 <usb_get_device_descriptor+0x3e>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    3caa:	4649      	mov	r1, r9
    3cac:	1ca0      	adds	r0, r4, #2
    3cae:	f009 fc6f 	bl	d590 <memcpy>
			if (str_descr_idx) {
    3cb2:	e7ee      	b.n	3c92 <usb_get_device_descriptor+0x1ba>
    3cb4:	2e00      	cmp	r6, #0
    3cb6:	d1ec      	bne.n	3c92 <usb_get_device_descriptor+0x1ba>
				if (!cfg_descr) {
    3cb8:	f1b8 0f00 	cmp.w	r8, #0
    3cbc:	d10a      	bne.n	3cd4 <usb_get_device_descriptor+0x1fc>
					LOG_ERR("Incomplete device descriptor");
    3cbe:	4b16      	ldr	r3, [pc, #88]	; (3d18 <usb_get_device_descriptor+0x240>)
    3cc0:	e767      	b.n	3b92 <usb_get_device_descriptor+0xba>
		buf[i] = 0U;
    3cc2:	f04f 0000 	mov.w	r0, #0
    3cc6:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    3cca:	f813 0901 	ldrb.w	r0, [r3], #-1
    3cce:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    3cd2:	e7e5      	b.n	3ca0 <usb_get_device_descriptor+0x1c8>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    3cd4:	eba4 0308 	sub.w	r3, r4, r8
    3cd8:	f888 3002 	strb.w	r3, [r8, #2]
	dst[1] = val >> 8;
    3cdc:	f3c3 2307 	ubfx	r3, r3, #8, #8
    3ce0:	f888 3003 	strb.w	r3, [r8, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    3ce4:	f888 a004 	strb.w	sl, [r8, #4]
    3ce8:	e7dc      	b.n	3ca4 <usb_get_device_descriptor+0x1cc>
    3cea:	bf00      	nop
    3cec:	200003dc 	.word	0x200003dc
    3cf0:	2000045e 	.word	0x2000045e
    3cf4:	0000f358 	.word	0x0000f358
    3cf8:	0000e930 	.word	0x0000e930
    3cfc:	0000f43e 	.word	0x0000f43e
    3d00:	20000460 	.word	0x20000460
    3d04:	20000484 	.word	0x20000484
    3d08:	0000f378 	.word	0x0000f378
    3d0c:	0000f3b9 	.word	0x0000f3b9
    3d10:	0000f347 	.word	0x0000f347
    3d14:	0000f3d6 	.word	0x0000f3d6
    3d18:	0000f421 	.word	0x0000f421

00003d1c <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    3d1c:	b510      	push	{r4, lr}
    3d1e:	4b09      	ldr	r3, [pc, #36]	; (3d44 <usb_ep_get_transfer+0x28>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3d20:	2100      	movs	r1, #0
    3d22:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    3d24:	781c      	ldrb	r4, [r3, #0]
    3d26:	4284      	cmp	r4, r0
    3d28:	d104      	bne.n	3d34 <usb_ep_get_transfer+0x18>
    3d2a:	685c      	ldr	r4, [r3, #4]
    3d2c:	b114      	cbz	r4, 3d34 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
    3d2e:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
    3d32:	bd10      	pop	{r4, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3d34:	3101      	adds	r1, #1
    3d36:	2904      	cmp	r1, #4
    3d38:	f103 0340 	add.w	r3, r3, #64	; 0x40
    3d3c:	d1f2      	bne.n	3d24 <usb_ep_get_transfer+0x8>
	return NULL;
    3d3e:	2000      	movs	r0, #0
    3d40:	e7f7      	b.n	3d32 <usb_ep_get_transfer+0x16>
    3d42:	bf00      	nop
    3d44:	20000dc8 	.word	0x20000dc8

00003d48 <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    3d48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3d4c:	b083      	sub	sp, #12
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    3d4e:	f850 3c28 	ldr.w	r3, [r0, #-40]
	ep = trans->ep;
    3d52:	f810 5c2c 	ldrb.w	r5, [r0, #-44]
	if (trans->status != -EBUSY) {
    3d56:	3310      	adds	r3, #16
{
    3d58:	af00      	add	r7, sp, #0
    3d5a:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    3d5c:	d111      	bne.n	3d82 <usb_transfer_work+0x3a>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    3d5e:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    3d60:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
    3d64:	f013 0602 	ands.w	r6, r3, #2
    3d68:	d04e      	beq.n	3e08 <usb_transfer_work+0xc0>
		if (!trans->bsize) {
    3d6a:	bb0a      	cbnz	r2, 3db0 <usb_transfer_work+0x68>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    3d6c:	f013 0304 	ands.w	r3, r3, #4
    3d70:	d104      	bne.n	3d7c <usb_transfer_work+0x34>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    3d72:	461a      	mov	r2, r3
    3d74:	4619      	mov	r1, r3
    3d76:	4628      	mov	r0, r5
    3d78:	f009 fb8a 	bl	d490 <usb_write>
			}
			trans->status = 0;
    3d7c:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    3d7e:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    3d82:	f854 3c28 	ldr.w	r3, [r4, #-40]
    3d86:	3310      	adds	r3, #16
    3d88:	d00e      	beq.n	3da8 <usb_transfer_work+0x60>
    3d8a:	f854 6c18 	ldr.w	r6, [r4, #-24]
    3d8e:	b15e      	cbz	r6, 3da8 <usb_transfer_work+0x60>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    3d90:	f854 8c1c 	ldr.w	r8, [r4, #-28]
		void *priv = trans->priv;
    3d94:	f854 9c14 	ldr.w	r9, [r4, #-20]

		if (k_is_in_isr()) {
    3d98:	f00a f97b 	bl	e092 <k_is_in_isr>
    3d9c:	2800      	cmp	r0, #0
    3d9e:	d06f      	beq.n	3e80 <usb_transfer_work+0x138>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3da0:	483d      	ldr	r0, [pc, #244]	; (3e98 <usb_transfer_work+0x150>)
    3da2:	4621      	mov	r1, r4
    3da4:	f00a fa73 	bl	e28e <k_work_submit_to_queue>
		k_sem_give(&trans->sem);

		/* Transfer completion callback */
		cb(ep, tsize, priv);
	}
}
    3da8:	370c      	adds	r7, #12
    3daa:	46bd      	mov	sp, r7
    3dac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    3db0:	f850 1c24 	ldr.w	r1, [r0, #-36]
    3db4:	1d3b      	adds	r3, r7, #4
    3db6:	4628      	mov	r0, r5
    3db8:	f009 fb6a 	bl	d490 <usb_write>
		if (ret) {
    3dbc:	b198      	cbz	r0, 3de6 <usb_transfer_work+0x9e>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    3dbe:	466e      	mov	r6, sp
    3dc0:	b088      	sub	sp, #32
    3dc2:	466a      	mov	r2, sp
    3dc4:	4b35      	ldr	r3, [pc, #212]	; (3e9c <usb_transfer_work+0x154>)
    3dc6:	61d5      	str	r5, [r2, #28]
    3dc8:	e9c2 3005 	strd	r3, r0, [r2, #20]
    3dcc:	2304      	movs	r3, #4
    3dce:	f842 3f10 	str.w	r3, [r2, #16]!
    3dd2:	4833      	ldr	r0, [pc, #204]	; (3ea0 <usb_transfer_work+0x158>)
    3dd4:	2300      	movs	r3, #0
    3dd6:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    3dda:	f7fe fd0f 	bl	27fc <z_impl_z_log_msg_static_create>
    3dde:	46b5      	mov	sp, r6
			trans->status = -EINVAL;
    3de0:	f06f 0315 	mvn.w	r3, #21
    3de4:	e7cb      	b.n	3d7e <usb_transfer_work+0x36>
		trans->buffer += bytes;
    3de6:	687a      	ldr	r2, [r7, #4]
    3de8:	f854 3c24 	ldr.w	r3, [r4, #-36]
    3dec:	4413      	add	r3, r2
    3dee:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    3df2:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3df6:	1a9b      	subs	r3, r3, r2
    3df8:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    3dfc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3e00:	4413      	add	r3, r2
    3e02:	f844 3c1c 	str.w	r3, [r4, #-28]
    3e06:	e7bc      	b.n	3d82 <usb_transfer_work+0x3a>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    3e08:	f850 1c24 	ldr.w	r1, [r0, #-36]
    3e0c:	1d3b      	adds	r3, r7, #4
    3e0e:	4628      	mov	r0, r5
    3e10:	f001 feca 	bl	5ba8 <usb_dc_ep_read_wait>
		if (ret) {
    3e14:	b188      	cbz	r0, 3e3a <usb_transfer_work+0xf2>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    3e16:	46e8      	mov	r8, sp
    3e18:	b088      	sub	sp, #32
    3e1a:	466a      	mov	r2, sp
    3e1c:	4b1f      	ldr	r3, [pc, #124]	; (3e9c <usb_transfer_work+0x154>)
    3e1e:	61d5      	str	r5, [r2, #28]
    3e20:	e9c2 3005 	strd	r3, r0, [r2, #20]
    3e24:	2304      	movs	r3, #4
    3e26:	f842 3f10 	str.w	r3, [r2, #16]!
    3e2a:	481d      	ldr	r0, [pc, #116]	; (3ea0 <usb_transfer_work+0x158>)
    3e2c:	4633      	mov	r3, r6
    3e2e:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    3e32:	f7fe fce3 	bl	27fc <z_impl_z_log_msg_static_create>
    3e36:	46c5      	mov	sp, r8
			trans->status = -EINVAL;
    3e38:	e7d2      	b.n	3de0 <usb_transfer_work+0x98>
		trans->buffer += bytes;
    3e3a:	687e      	ldr	r6, [r7, #4]
    3e3c:	f854 3c24 	ldr.w	r3, [r4, #-36]
    3e40:	4433      	add	r3, r6
    3e42:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    3e46:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3e4a:	1b9b      	subs	r3, r3, r6
    3e4c:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    3e50:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    3e54:	4433      	add	r3, r6
    3e56:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    3e5a:	2e00      	cmp	r6, #0
    3e5c:	d08e      	beq.n	3d7c <usb_transfer_work+0x34>
    3e5e:	4628      	mov	r0, r5
    3e60:	f001 ff7a 	bl	5d58 <usb_dc_ep_mps>
    3e64:	fbb6 f3f0 	udiv	r3, r6, r0
    3e68:	fb03 6610 	mls	r6, r3, r0, r6
    3e6c:	2e00      	cmp	r6, #0
    3e6e:	d185      	bne.n	3d7c <usb_transfer_work+0x34>
    3e70:	f854 3c20 	ldr.w	r3, [r4, #-32]
    3e74:	2b00      	cmp	r3, #0
    3e76:	d081      	beq.n	3d7c <usb_transfer_work+0x34>
		usb_dc_ep_read_continue(ep);
    3e78:	4628      	mov	r0, r5
    3e7a:	f001 fefb 	bl	5c74 <usb_dc_ep_read_continue>
    3e7e:	e780      	b.n	3d82 <usb_transfer_work+0x3a>
		trans->cb = NULL;
    3e80:	f844 0c18 	str.w	r0, [r4, #-24]
	z_impl_k_sem_give(sem);
    3e84:	f1a4 0010 	sub.w	r0, r4, #16
    3e88:	f007 fc58 	bl	b73c <z_impl_k_sem_give>
		cb(ep, tsize, priv);
    3e8c:	464a      	mov	r2, r9
    3e8e:	4641      	mov	r1, r8
    3e90:	4628      	mov	r0, r5
    3e92:	47b0      	blx	r6
    3e94:	e788      	b.n	3da8 <usb_transfer_work+0x60>
    3e96:	bf00      	nop
    3e98:	20000b70 	.word	0x20000b70
    3e9c:	0000f46c 	.word	0x0000f46c
    3ea0:	0000e950 	.word	0x0000e950

00003ea4 <usb_cancel_transfer>:
	irq_unlock(key);
	return ret;
}

void usb_cancel_transfer(uint8_t ep)
{
    3ea4:	b510      	push	{r4, lr}
	__asm__ volatile(
    3ea6:	f04f 0340 	mov.w	r3, #64	; 0x40
    3eaa:	f3ef 8411 	mrs	r4, BASEPRI
    3eae:	f383 8812 	msr	BASEPRI_MAX, r3
    3eb2:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    3eb6:	f7ff ff31 	bl	3d1c <usb_ep_get_transfer>
	if (!trans) {
    3eba:	b150      	cbz	r0, 3ed2 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    3ebc:	6843      	ldr	r3, [r0, #4]
    3ebe:	3310      	adds	r3, #16
    3ec0:	d107      	bne.n	3ed2 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    3ec2:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    3ec6:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3ec8:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    3ecc:	4803      	ldr	r0, [pc, #12]	; (3edc <usb_cancel_transfer+0x38>)
    3ece:	f00a f9de 	bl	e28e <k_work_submit_to_queue>
	__asm__ volatile(
    3ed2:	f384 8811 	msr	BASEPRI, r4
    3ed6:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    3eda:	bd10      	pop	{r4, pc}
    3edc:	20000b70 	.word	0x20000b70

00003ee0 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    3ee0:	b570      	push	{r4, r5, r6, lr}
    3ee2:	4c0f      	ldr	r4, [pc, #60]	; (3f20 <usb_cancel_transfers+0x40>)
    3ee4:	2504      	movs	r5, #4
	__asm__ volatile(
    3ee6:	f04f 0340 	mov.w	r3, #64	; 0x40
    3eea:	f3ef 8611 	mrs	r6, BASEPRI
    3eee:	f383 8812 	msr	BASEPRI_MAX, r3
    3ef2:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
    3ef6:	6863      	ldr	r3, [r4, #4]
    3ef8:	3310      	adds	r3, #16
    3efa:	d107      	bne.n	3f0c <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
    3efc:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3f00:	4808      	ldr	r0, [pc, #32]	; (3f24 <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
    3f02:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    3f04:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    3f08:	f00a f9c1 	bl	e28e <k_work_submit_to_queue>
	__asm__ volatile(
    3f0c:	f386 8811 	msr	BASEPRI, r6
    3f10:	f3bf 8f6f 	isb	sy
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3f14:	3d01      	subs	r5, #1
    3f16:	f104 0440 	add.w	r4, r4, #64	; 0x40
    3f1a:	d1e4      	bne.n	3ee6 <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    3f1c:	bd70      	pop	{r4, r5, r6, pc}
    3f1e:	bf00      	nop
    3f20:	20000dc8 	.word	0x20000dc8
    3f24:	20000b70 	.word	0x20000b70

00003f28 <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    3f28:	b570      	push	{r4, r5, r6, lr}
    3f2a:	4c0a      	ldr	r4, [pc, #40]	; (3f54 <usb_transfer_init+0x2c>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    3f2c:	4e0a      	ldr	r6, [pc, #40]	; (3f58 <usb_transfer_init+0x30>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3f2e:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    3f30:	4631      	mov	r1, r6
    3f32:	4620      	mov	r0, r4
    3f34:	f00a f98e 	bl	e254 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    3f38:	2201      	movs	r2, #1
    3f3a:	f1a4 0010 	sub.w	r0, r4, #16
    3f3e:	4611      	mov	r1, r2
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    3f40:	3501      	adds	r5, #1
    3f42:	f00a f94a 	bl	e1da <z_impl_k_sem_init>
    3f46:	2d04      	cmp	r5, #4
    3f48:	f104 0440 	add.w	r4, r4, #64	; 0x40
    3f4c:	d1f0      	bne.n	3f30 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    3f4e:	2000      	movs	r0, #0
    3f50:	bd70      	pop	{r4, r5, r6, pc}
    3f52:	bf00      	nop
    3f54:	20000df4 	.word	0x20000df4
    3f58:	00003d49 	.word	0x00003d49

00003f5c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    3f5c:	4901      	ldr	r1, [pc, #4]	; (3f64 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    3f5e:	2210      	movs	r2, #16
	str	r2, [r1]
    3f60:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    3f62:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    3f64:	e000ed10 	.word	0xe000ed10

00003f68 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    3f68:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    3f6a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    3f6c:	f380 8811 	msr	BASEPRI, r0
	isb
    3f70:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    3f74:	f3bf 8f4f 	dsb	sy
    3f78:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    3f7a:	b662      	cpsie	i
	isb
    3f7c:	f3bf 8f6f 	isb	sy

	bx	lr
    3f80:	4770      	bx	lr
    3f82:	bf00      	nop

00003f84 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    3f84:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    3f86:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    3f88:	f381 8811 	msr	BASEPRI, r1

	_sleep_if_allowed wfe
    3f8c:	f3bf 8f4f 	dsb	sy
    3f90:	bf20      	wfe

	msr	BASEPRI, r0
    3f92:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    3f96:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    3f98:	4770      	bx	lr
    3f9a:	bf00      	nop

00003f9c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    3f9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3fa0:	4681      	mov	r9, r0
    3fa2:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    3fa4:	460c      	mov	r4, r1
    3fa6:	2900      	cmp	r1, #0
    3fa8:	d04c      	beq.n	4044 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x44>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    3faa:	466e      	mov	r6, sp
    3fac:	b08a      	sub	sp, #40	; 0x28
    3fae:	e9d1 1200 	ldrd	r1, r2, [r1]
    3fb2:	68a3      	ldr	r3, [r4, #8]
    3fb4:	466d      	mov	r5, sp
    3fb6:	4827      	ldr	r0, [pc, #156]	; (4054 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x54>)
    3fb8:	46a8      	mov	r8, r5
    3fba:	f04f 0a05 	mov.w	sl, #5
    3fbe:	e9c5 0105 	strd	r0, r1, [r5, #20]
    3fc2:	e9c5 2307 	strd	r2, r3, [r5, #28]
    3fc6:	f848 af10 	str.w	sl, [r8, #16]!
    3fca:	4823      	ldr	r0, [pc, #140]	; (4058 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x58>)
    3fcc:	4642      	mov	r2, r8
    3fce:	2300      	movs	r3, #0
    3fd0:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    3fd4:	f7fe fc12 	bl	27fc <z_impl_z_log_msg_static_create>
    3fd8:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    3fda:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    3fde:	6963      	ldr	r3, [r4, #20]
    3fe0:	46ad      	mov	sp, r5
    3fe2:	481e      	ldr	r0, [pc, #120]	; (405c <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x5c>)
    3fe4:	f8c5 a010 	str.w	sl, [r5, #16]
    3fe8:	e9c5 0105 	strd	r0, r1, [r5, #20]
    3fec:	e9c5 2307 	strd	r2, r3, [r5, #28]
    3ff0:	4819      	ldr	r0, [pc, #100]	; (4058 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x58>)
    3ff2:	2300      	movs	r3, #0
    3ff4:	4642      	mov	r2, r8
    3ff6:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    3ffa:	f7fe fbff 	bl	27fc <z_impl_z_log_msg_static_create>
    3ffe:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    4000:	b088      	sub	sp, #32
    4002:	69e3      	ldr	r3, [r4, #28]
    4004:	466d      	mov	r5, sp
    4006:	4a16      	ldr	r2, [pc, #88]	; (4060 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x60>)
    4008:	46a8      	mov	r8, r5
    400a:	f04f 0a03 	mov.w	sl, #3
    400e:	e9c5 2305 	strd	r2, r3, [r5, #20]
    4012:	f848 af10 	str.w	sl, [r8, #16]!
    4016:	4810      	ldr	r0, [pc, #64]	; (4058 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x58>)
    4018:	2300      	movs	r3, #0
    401a:	4642      	mov	r2, r8
    401c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4020:	f7fe fbec 	bl	27fc <z_impl_z_log_msg_static_create>
    4024:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    4026:	69a3      	ldr	r3, [r4, #24]
    4028:	46ad      	mov	sp, r5
    402a:	4a0e      	ldr	r2, [pc, #56]	; (4064 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x64>)
    402c:	f8c5 a010 	str.w	sl, [r5, #16]
    4030:	e9c5 2305 	strd	r2, r3, [r5, #20]
    4034:	4808      	ldr	r0, [pc, #32]	; (4058 <CONFIG_COVERAGE_GCOV_HEAP_SIZE+0x58>)
    4036:	2300      	movs	r3, #0
    4038:	4642      	mov	r2, r8
    403a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    403e:	f7fe fbdd 	bl	27fc <z_impl_z_log_msg_static_create>
    4042:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    4044:	4621      	mov	r1, r4
    4046:	4648      	mov	r0, r9
    4048:	f007 f80a 	bl	b060 <z_fatal_error>
}
    404c:	46bd      	mov	sp, r7
    404e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    4052:	bf00      	nop
    4054:	0000f496 	.word	0x0000f496
    4058:	0000e8f0 	.word	0x0000e8f0
    405c:	0000f4c5 	.word	0x0000f4c5
    4060:	0000f4f4 	.word	0x0000f4f4
    4064:	0000f503 	.word	0x0000f503

00004068 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    4068:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    406a:	2800      	cmp	r0, #0
    406c:	db07      	blt.n	407e <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    406e:	4a04      	ldr	r2, [pc, #16]	; (4080 <arch_irq_enable+0x18>)
    4070:	0941      	lsrs	r1, r0, #5
    4072:	2301      	movs	r3, #1
    4074:	f000 001f 	and.w	r0, r0, #31
    4078:	4083      	lsls	r3, r0
    407a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    407e:	4770      	bx	lr
    4080:	e000e100 	.word	0xe000e100

00004084 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    4084:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    4086:	2800      	cmp	r0, #0
    4088:	db0c      	blt.n	40a4 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    408a:	0943      	lsrs	r3, r0, #5
    408c:	4906      	ldr	r1, [pc, #24]	; (40a8 <arch_irq_disable+0x24>)
    408e:	f000 001f 	and.w	r0, r0, #31
    4092:	3320      	adds	r3, #32
    4094:	2201      	movs	r2, #1
    4096:	4082      	lsls	r2, r0
    4098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    409c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    40a0:	f3bf 8f6f 	isb	sy
}
    40a4:	4770      	bx	lr
    40a6:	bf00      	nop
    40a8:	e000e100 	.word	0xe000e100

000040ac <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    40ac:	4b05      	ldr	r3, [pc, #20]	; (40c4 <arch_irq_is_enabled+0x18>)
    40ae:	0942      	lsrs	r2, r0, #5
    40b0:	f000 001f 	and.w	r0, r0, #31
    40b4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    40b8:	2301      	movs	r3, #1
    40ba:	fa03 f000 	lsl.w	r0, r3, r0
}
    40be:	4010      	ands	r0, r2
    40c0:	4770      	bx	lr
    40c2:	bf00      	nop
    40c4:	e000e100 	.word	0xe000e100

000040c8 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    40c8:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
    40ca:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
    40cc:	bf54      	ite	pl
    40ce:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
    40d0:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    40d2:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40d4:	bfac      	ite	ge
    40d6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40da:	4a07      	ldrlt	r2, [pc, #28]	; (40f8 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40dc:	ea4f 1341 	mov.w	r3, r1, lsl #5
    40e0:	bfac      	ite	ge
    40e2:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40e6:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40ea:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40ec:	bfb4      	ite	lt
    40ee:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    40f0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
    40f4:	4770      	bx	lr
    40f6:	bf00      	nop
    40f8:	e000ed14 	.word	0xe000ed14

000040fc <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    40fc:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    40fe:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    4100:	4b04      	ldr	r3, [pc, #16]	; (4114 <_arch_isr_direct_pm+0x18>)
    4102:	695a      	ldr	r2, [r3, #20]
    4104:	b11a      	cbz	r2, 410e <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    4106:	2200      	movs	r2, #0
    4108:	615a      	str	r2, [r3, #20]
		z_pm_save_idle_exit();
    410a:	f009 ffcf 	bl	e0ac <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    410e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    4110:	bd08      	pop	{r3, pc}
    4112:	bf00      	nop
    4114:	20001c98 	.word	0x20001c98

00004118 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    4118:	bf30      	wfi
    b z_SysNmiOnReset
    411a:	f7ff bffd 	b.w	4118 <z_SysNmiOnReset>
    411e:	bf00      	nop

00004120 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    4120:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    4122:	4b08      	ldr	r3, [pc, #32]	; (4144 <z_arm_prep_c+0x24>)
    4124:	4a08      	ldr	r2, [pc, #32]	; (4148 <z_arm_prep_c+0x28>)
    4126:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    412a:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    412c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4130:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    4134:	f007 f850 	bl	b1d8 <z_bss_zero>
	z_data_copy();
    4138:	f008 f852 	bl	c1e0 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    413c:	f000 fbaa 	bl	4894 <z_arm_interrupt_init>
	z_cstart();
    4140:	f007 f88e 	bl	b260 <z_cstart>
    4144:	00000000 	.word	0x00000000
    4148:	e000ed00 	.word	0xe000ed00

0000414c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    414c:	4a09      	ldr	r2, [pc, #36]	; (4174 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    414e:	490a      	ldr	r1, [pc, #40]	; (4178 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    4150:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    4152:	6809      	ldr	r1, [r1, #0]
    4154:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4156:	4909      	ldr	r1, [pc, #36]	; (417c <arch_swap+0x30>)
	_current->arch.basepri = key;
    4158:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    415a:	684b      	ldr	r3, [r1, #4]
    415c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    4160:	604b      	str	r3, [r1, #4]
    4162:	2300      	movs	r3, #0
    4164:	f383 8811 	msr	BASEPRI, r3
    4168:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    416c:	6893      	ldr	r3, [r2, #8]
}
    416e:	6f98      	ldr	r0, [r3, #120]	; 0x78
    4170:	4770      	bx	lr
    4172:	bf00      	nop
    4174:	20001c98 	.word	0x20001c98
    4178:	0000eca4 	.word	0x0000eca4
    417c:	e000ed00 	.word	0xe000ed00

00004180 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    4180:	4912      	ldr	r1, [pc, #72]	; (41cc <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    4182:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    4184:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    4188:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    418a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    418e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    4192:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
    4194:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4198:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    419c:	4f0c      	ldr	r7, [pc, #48]	; (41d0 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    419e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    41a2:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    41a4:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    41a6:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    41a8:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    41aa:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    41ac:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    41ae:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    41b2:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    41b4:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    41b6:	f000 fc09 	bl	49cc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    41ba:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    41be:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    41c2:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    41c6:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    41ca:	4770      	bx	lr
    ldr r1, =_kernel
    41cc:	20001c98 	.word	0x20001c98
    ldr v4, =_SCS_ICSR
    41d0:	e000ed04 	.word	0xe000ed04

000041d4 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    41d4:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    41d8:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    41da:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    41de:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    41e2:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    41e4:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    41e8:	2902      	cmp	r1, #2
    beq _oops
    41ea:	d0ff      	beq.n	41ec <_oops>

000041ec <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    41ec:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    41ee:	f009 f997 	bl	d520 <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    41f2:	bd01      	pop	{r0, pc}

000041f4 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    41f4:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    41f8:	9b00      	ldr	r3, [sp, #0]
    41fa:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    41fe:	490a      	ldr	r1, [pc, #40]	; (4228 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    4200:	9b01      	ldr	r3, [sp, #4]
    4202:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4206:	9b02      	ldr	r3, [sp, #8]
    4208:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    420c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4210:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4214:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    4218:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    421c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    421e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    4220:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    4222:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4224:	4770      	bx	lr
    4226:	bf00      	nop
    4228:	0000c7af 	.word	0x0000c7af

0000422c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    422c:	4a09      	ldr	r2, [pc, #36]	; (4254 <z_check_thread_stack_fail+0x28>)
{
    422e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    4230:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    4232:	b170      	cbz	r0, 4252 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4234:	f113 0f16 	cmn.w	r3, #22
    4238:	6e40      	ldr	r0, [r0, #100]	; 0x64
    423a:	d005      	beq.n	4248 <z_check_thread_stack_fail+0x1c>
    423c:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    4240:	429a      	cmp	r2, r3
    4242:	d805      	bhi.n	4250 <z_check_thread_stack_fail+0x24>
    4244:	4283      	cmp	r3, r0
    4246:	d203      	bcs.n	4250 <z_check_thread_stack_fail+0x24>
		return 0;
    4248:	4281      	cmp	r1, r0
    424a:	bf28      	it	cs
    424c:	2000      	movcs	r0, #0
    424e:	4770      	bx	lr
    4250:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    4252:	4770      	bx	lr
    4254:	20001c98 	.word	0x20001c98

00004258 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    4258:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    425a:	4b09      	ldr	r3, [pc, #36]	; (4280 <arch_switch_to_main_thread+0x28>)
{
    425c:	460d      	mov	r5, r1
    425e:	4614      	mov	r4, r2
	_current = main_thread;
    4260:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    4262:	f000 fbb3 	bl	49cc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    4266:	4620      	mov	r0, r4
    4268:	f385 8809 	msr	PSP, r5
    426c:	2100      	movs	r1, #0
    426e:	b663      	cpsie	if
    4270:	f381 8811 	msr	BASEPRI, r1
    4274:	f3bf 8f6f 	isb	sy
    4278:	2200      	movs	r2, #0
    427a:	2300      	movs	r3, #0
    427c:	f008 fa97 	bl	c7ae <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    4280:	20001c98 	.word	0x20001c98

00004284 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4284:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    4286:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4288:	4a0b      	ldr	r2, [pc, #44]	; (42b8 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    428a:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    428c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    428e:	bf1e      	ittt	ne
	movne	r1, #0
    4290:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    4292:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    4294:	f009 ff0a 	blne	e0ac <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4298:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    429a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    429e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    42a2:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    42a6:	4905      	ldr	r1, [pc, #20]	; (42bc <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    42a8:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    42aa:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    42ac:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    42ae:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    42b2:	4903      	ldr	r1, [pc, #12]	; (42c0 <_isr_wrapper+0x3c>)
	bx r1
    42b4:	4708      	bx	r1
    42b6:	0000      	.short	0x0000
	ldr r2, =_kernel
    42b8:	20001c98 	.word	0x20001c98
	ldr r1, =_sw_isr_table
    42bc:	200001a4 	.word	0x200001a4
	ldr r1, =z_arm_int_exit
    42c0:	000042c5 	.word	0x000042c5

000042c4 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    42c4:	4b04      	ldr	r3, [pc, #16]	; (42d8 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    42c6:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    42c8:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    42ca:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    42cc:	d003      	beq.n	42d6 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    42ce:	4903      	ldr	r1, [pc, #12]	; (42dc <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    42d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    42d4:	600a      	str	r2, [r1, #0]

000042d6 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    42d6:	4770      	bx	lr
	ldr r3, =_kernel
    42d8:	20001c98 	.word	0x20001c98
	ldr r1, =_SCS_ICSR
    42dc:	e000ed04 	.word	0xe000ed04

000042e0 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    42e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    42e4:	b086      	sub	sp, #24
    42e6:	4606      	mov	r6, r0
    42e8:	af00      	add	r7, sp, #0
    42ea:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    42ec:	4b3f      	ldr	r3, [pc, #252]	; (43ec <bus_fault.constprop.0+0x10c>)
    42ee:	617b      	str	r3, [r7, #20]
    42f0:	2402      	movs	r4, #2
    42f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    42f6:	483e      	ldr	r0, [pc, #248]	; (43f0 <bus_fault.constprop.0+0x110>)
    42f8:	613c      	str	r4, [r7, #16]
    42fa:	f107 0210 	add.w	r2, r7, #16
    42fe:	f009 f91e 	bl	d53e <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4302:	4b3c      	ldr	r3, [pc, #240]	; (43f4 <bus_fault.constprop.0+0x114>)
    4304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4306:	04d9      	lsls	r1, r3, #19
    4308:	d56d      	bpl.n	43e6 <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    430a:	4b3b      	ldr	r3, [pc, #236]	; (43f8 <bus_fault.constprop.0+0x118>)
    430c:	4838      	ldr	r0, [pc, #224]	; (43f0 <bus_fault.constprop.0+0x110>)
    430e:	e9c7 4304 	strd	r4, r3, [r7, #16]
    4312:	f107 0210 	add.w	r2, r7, #16
    4316:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    431a:	f009 f910 	bl	d53e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    431e:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4320:	4b34      	ldr	r3, [pc, #208]	; (43f4 <bus_fault.constprop.0+0x114>)
    4322:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4324:	051a      	lsls	r2, r3, #20
    4326:	d50b      	bpl.n	4340 <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    4328:	4b34      	ldr	r3, [pc, #208]	; (43fc <bus_fault.constprop.0+0x11c>)
    432a:	617b      	str	r3, [r7, #20]
    432c:	2302      	movs	r3, #2
    432e:	4830      	ldr	r0, [pc, #192]	; (43f0 <bus_fault.constprop.0+0x110>)
    4330:	613b      	str	r3, [r7, #16]
    4332:	f107 0210 	add.w	r2, r7, #16
    4336:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    433a:	f009 f900 	bl	d53e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    433e:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    4340:	4c2c      	ldr	r4, [pc, #176]	; (43f4 <bus_fault.constprop.0+0x114>)
    4342:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4344:	059b      	lsls	r3, r3, #22
    4346:	d523      	bpl.n	4390 <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    4348:	46e8      	mov	r8, sp
    434a:	4b2d      	ldr	r3, [pc, #180]	; (4400 <bus_fault.constprop.0+0x120>)
    434c:	617b      	str	r3, [r7, #20]
    434e:	2302      	movs	r3, #2
    4350:	613b      	str	r3, [r7, #16]
    4352:	f107 0210 	add.w	r2, r7, #16
    4356:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    435a:	4825      	ldr	r0, [pc, #148]	; (43f0 <bus_fault.constprop.0+0x110>)
    435c:	f009 f8ef 	bl	d53e <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    4360:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4362:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4364:	0411      	lsls	r1, r2, #16
    4366:	d512      	bpl.n	438e <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    4368:	b088      	sub	sp, #32
    436a:	466a      	mov	r2, sp
    436c:	4925      	ldr	r1, [pc, #148]	; (4404 <bus_fault.constprop.0+0x124>)
    436e:	4820      	ldr	r0, [pc, #128]	; (43f0 <bus_fault.constprop.0+0x110>)
    4370:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4374:	2303      	movs	r3, #3
    4376:	f842 3f10 	str.w	r3, [r2, #16]!
    437a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    437e:	f009 f8de 	bl	d53e <z_log_msg_static_create.constprop.0>
    4382:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    4384:	b11e      	cbz	r6, 438e <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4386:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4388:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    438c:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    438e:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4390:	4b18      	ldr	r3, [pc, #96]	; (43f4 <bus_fault.constprop.0+0x114>)
    4392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4394:	055a      	lsls	r2, r3, #21
    4396:	d50b      	bpl.n	43b0 <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    4398:	4b1b      	ldr	r3, [pc, #108]	; (4408 <bus_fault.constprop.0+0x128>)
    439a:	617b      	str	r3, [r7, #20]
    439c:	2302      	movs	r3, #2
    439e:	4814      	ldr	r0, [pc, #80]	; (43f0 <bus_fault.constprop.0+0x110>)
    43a0:	613b      	str	r3, [r7, #16]
    43a2:	f107 0210 	add.w	r2, r7, #16
    43a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    43aa:	f009 f8c8 	bl	d53e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    43ae:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    43b0:	4b10      	ldr	r3, [pc, #64]	; (43f4 <bus_fault.constprop.0+0x114>)
    43b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    43b4:	05db      	lsls	r3, r3, #23
    43b6:	d50b      	bpl.n	43d0 <bus_fault.constprop.0+0xf0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    43b8:	4b14      	ldr	r3, [pc, #80]	; (440c <bus_fault.constprop.0+0x12c>)
    43ba:	617b      	str	r3, [r7, #20]
    43bc:	2302      	movs	r3, #2
    43be:	480c      	ldr	r0, [pc, #48]	; (43f0 <bus_fault.constprop.0+0x110>)
    43c0:	613b      	str	r3, [r7, #16]
    43c2:	f107 0210 	add.w	r2, r7, #16
    43c6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    43ca:	f009 f8b8 	bl	d53e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    43ce:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    43d0:	4a08      	ldr	r2, [pc, #32]	; (43f4 <bus_fault.constprop.0+0x114>)
    43d2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    43d4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    43d8:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    43da:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    43dc:	2300      	movs	r3, #0
    43de:	702b      	strb	r3, [r5, #0]
}
    43e0:	46bd      	mov	sp, r7
    43e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    43e6:	2016      	movs	r0, #22
    43e8:	e79a      	b.n	4320 <bus_fault.constprop.0+0x40>
    43ea:	bf00      	nop
    43ec:	0000f531 	.word	0x0000f531
    43f0:	0000e8f0 	.word	0x0000e8f0
    43f4:	e000ed00 	.word	0xe000ed00
    43f8:	0000f547 	.word	0x0000f547
    43fc:	0000f558 	.word	0x0000f558
    4400:	0000f56b 	.word	0x0000f56b
    4404:	0000f584 	.word	0x0000f584
    4408:	0000f599 	.word	0x0000f599
    440c:	0000f5b4 	.word	0x0000f5b4

00004410 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    4410:	b510      	push	{r4, lr}
    4412:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    4414:	4b36      	ldr	r3, [pc, #216]	; (44f0 <usage_fault.constprop.0+0xe0>)
    4416:	4837      	ldr	r0, [pc, #220]	; (44f4 <usage_fault.constprop.0+0xe4>)
    4418:	9305      	str	r3, [sp, #20]
    441a:	aa04      	add	r2, sp, #16
    441c:	2402      	movs	r4, #2
    441e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4422:	9404      	str	r4, [sp, #16]
    4424:	f009 f88b 	bl	d53e <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4428:	4b33      	ldr	r3, [pc, #204]	; (44f8 <usage_fault.constprop.0+0xe8>)
    442a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    442c:	019a      	lsls	r2, r3, #6
    442e:	d55d      	bpl.n	44ec <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    4430:	4b32      	ldr	r3, [pc, #200]	; (44fc <usage_fault.constprop.0+0xec>)
    4432:	4830      	ldr	r0, [pc, #192]	; (44f4 <usage_fault.constprop.0+0xe4>)
    4434:	aa04      	add	r2, sp, #16
    4436:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    443a:	e9cd 4304 	strd	r4, r3, [sp, #16]
    443e:	f009 f87e 	bl	d53e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    4442:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4444:	4b2c      	ldr	r3, [pc, #176]	; (44f8 <usage_fault.constprop.0+0xe8>)
    4446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4448:	01db      	lsls	r3, r3, #7
    444a:	d50a      	bpl.n	4462 <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    444c:	4b2c      	ldr	r3, [pc, #176]	; (4500 <usage_fault.constprop.0+0xf0>)
    444e:	4829      	ldr	r0, [pc, #164]	; (44f4 <usage_fault.constprop.0+0xe4>)
    4450:	9305      	str	r3, [sp, #20]
    4452:	aa04      	add	r2, sp, #16
    4454:	2302      	movs	r3, #2
    4456:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    445a:	9304      	str	r3, [sp, #16]
    445c:	f009 f86f 	bl	d53e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    4460:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4462:	4b25      	ldr	r3, [pc, #148]	; (44f8 <usage_fault.constprop.0+0xe8>)
    4464:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4466:	031c      	lsls	r4, r3, #12
    4468:	d50a      	bpl.n	4480 <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    446a:	4b26      	ldr	r3, [pc, #152]	; (4504 <usage_fault.constprop.0+0xf4>)
    446c:	4821      	ldr	r0, [pc, #132]	; (44f4 <usage_fault.constprop.0+0xe4>)
    446e:	9305      	str	r3, [sp, #20]
    4470:	aa04      	add	r2, sp, #16
    4472:	2302      	movs	r3, #2
    4474:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4478:	9304      	str	r3, [sp, #16]
    447a:	f009 f860 	bl	d53e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    447e:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4480:	4b1d      	ldr	r3, [pc, #116]	; (44f8 <usage_fault.constprop.0+0xe8>)
    4482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4484:	0359      	lsls	r1, r3, #13
    4486:	d50a      	bpl.n	449e <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    4488:	4b1f      	ldr	r3, [pc, #124]	; (4508 <usage_fault.constprop.0+0xf8>)
    448a:	481a      	ldr	r0, [pc, #104]	; (44f4 <usage_fault.constprop.0+0xe4>)
    448c:	9305      	str	r3, [sp, #20]
    448e:	aa04      	add	r2, sp, #16
    4490:	2302      	movs	r3, #2
    4492:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4496:	9304      	str	r3, [sp, #16]
    4498:	f009 f851 	bl	d53e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    449c:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    449e:	4b16      	ldr	r3, [pc, #88]	; (44f8 <usage_fault.constprop.0+0xe8>)
    44a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    44a2:	039a      	lsls	r2, r3, #14
    44a4:	d50a      	bpl.n	44bc <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    44a6:	4b19      	ldr	r3, [pc, #100]	; (450c <usage_fault.constprop.0+0xfc>)
    44a8:	4812      	ldr	r0, [pc, #72]	; (44f4 <usage_fault.constprop.0+0xe4>)
    44aa:	9305      	str	r3, [sp, #20]
    44ac:	aa04      	add	r2, sp, #16
    44ae:	2302      	movs	r3, #2
    44b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    44b4:	9304      	str	r3, [sp, #16]
    44b6:	f009 f842 	bl	d53e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    44ba:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    44bc:	4b0e      	ldr	r3, [pc, #56]	; (44f8 <usage_fault.constprop.0+0xe8>)
    44be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    44c0:	03db      	lsls	r3, r3, #15
    44c2:	d50a      	bpl.n	44da <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    44c4:	4b12      	ldr	r3, [pc, #72]	; (4510 <usage_fault.constprop.0+0x100>)
    44c6:	480b      	ldr	r0, [pc, #44]	; (44f4 <usage_fault.constprop.0+0xe4>)
    44c8:	9305      	str	r3, [sp, #20]
    44ca:	aa04      	add	r2, sp, #16
    44cc:	2302      	movs	r3, #2
    44ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    44d2:	9304      	str	r3, [sp, #16]
    44d4:	f009 f833 	bl	d53e <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    44d8:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    44da:	4a07      	ldr	r2, [pc, #28]	; (44f8 <usage_fault.constprop.0+0xe8>)
    44dc:	6a93      	ldr	r3, [r2, #40]	; 0x28
    44de:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    44e2:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    44e6:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    44e8:	b006      	add	sp, #24
    44ea:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    44ec:	201d      	movs	r0, #29
    44ee:	e7a9      	b.n	4444 <usage_fault.constprop.0+0x34>
    44f0:	0000f5cc 	.word	0x0000f5cc
    44f4:	0000e8f0 	.word	0x0000e8f0
    44f8:	e000ed00 	.word	0xe000ed00
    44fc:	0000f5e4 	.word	0x0000f5e4
    4500:	0000f5f7 	.word	0x0000f5f7
    4504:	0000f611 	.word	0x0000f611
    4508:	0000f62f 	.word	0x0000f62f
    450c:	0000f654 	.word	0x0000f654
    4510:	0000f66e 	.word	0x0000f66e

00004514 <mem_manage_fault>:
{
    4514:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4518:	b086      	sub	sp, #24
    451a:	4681      	mov	r9, r0
    451c:	af00      	add	r7, sp, #0
    451e:	468a      	mov	sl, r1
    4520:	4690      	mov	r8, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    4522:	4b45      	ldr	r3, [pc, #276]	; (4638 <mem_manage_fault+0x124>)
    4524:	4845      	ldr	r0, [pc, #276]	; (463c <mem_manage_fault+0x128>)
    4526:	617b      	str	r3, [r7, #20]
    4528:	2402      	movs	r4, #2
    452a:	613c      	str	r4, [r7, #16]
    452c:	f107 0210 	add.w	r2, r7, #16
    4530:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4534:	f009 f803 	bl	d53e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4538:	4b41      	ldr	r3, [pc, #260]	; (4640 <mem_manage_fault+0x12c>)
    453a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    453c:	06d8      	lsls	r0, r3, #27
    453e:	d545      	bpl.n	45cc <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
    4540:	4b40      	ldr	r3, [pc, #256]	; (4644 <mem_manage_fault+0x130>)
    4542:	483e      	ldr	r0, [pc, #248]	; (463c <mem_manage_fault+0x128>)
    4544:	e9c7 4304 	strd	r4, r3, [r7, #16]
    4548:	f107 0210 	add.w	r2, r7, #16
    454c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_STACKING;
    4550:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
    4552:	f008 fff4 	bl	d53e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4556:	4b3a      	ldr	r3, [pc, #232]	; (4640 <mem_manage_fault+0x12c>)
    4558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    455a:	0719      	lsls	r1, r3, #28
    455c:	d50b      	bpl.n	4576 <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
    455e:	4b3a      	ldr	r3, [pc, #232]	; (4648 <mem_manage_fault+0x134>)
    4560:	617b      	str	r3, [r7, #20]
    4562:	2302      	movs	r3, #2
    4564:	4835      	ldr	r0, [pc, #212]	; (463c <mem_manage_fault+0x128>)
    4566:	613b      	str	r3, [r7, #16]
    4568:	f107 0210 	add.w	r2, r7, #16
    456c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_UNSTACKING;
    4570:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
    4572:	f008 ffe4 	bl	d53e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4576:	4d32      	ldr	r5, [pc, #200]	; (4640 <mem_manage_fault+0x12c>)
    4578:	6aab      	ldr	r3, [r5, #40]	; 0x28
    457a:	079a      	lsls	r2, r3, #30
    457c:	d528      	bpl.n	45d0 <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
    457e:	466c      	mov	r4, sp
    4580:	4b32      	ldr	r3, [pc, #200]	; (464c <mem_manage_fault+0x138>)
    4582:	617b      	str	r3, [r7, #20]
    4584:	2302      	movs	r3, #2
    4586:	613b      	str	r3, [r7, #16]
    4588:	482c      	ldr	r0, [pc, #176]	; (463c <mem_manage_fault+0x128>)
    458a:	f107 0210 	add.w	r2, r7, #16
    458e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4592:	f008 ffd4 	bl	d53e <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    4596:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4598:	6aab      	ldr	r3, [r5, #40]	; 0x28
    459a:	061b      	lsls	r3, r3, #24
    459c:	d549      	bpl.n	4632 <mem_manage_fault+0x11e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    459e:	b088      	sub	sp, #32
    45a0:	466a      	mov	r2, sp
    45a2:	4b2b      	ldr	r3, [pc, #172]	; (4650 <mem_manage_fault+0x13c>)
    45a4:	4825      	ldr	r0, [pc, #148]	; (463c <mem_manage_fault+0x128>)
    45a6:	e9c2 3605 	strd	r3, r6, [r2, #20]
    45aa:	2303      	movs	r3, #3
    45ac:	f842 3f10 	str.w	r3, [r2, #16]!
    45b0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    45b4:	f008 ffc3 	bl	d53e <z_log_msg_static_create.constprop.0>
    45b8:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
    45ba:	f1ba 0f00 	cmp.w	sl, #0
    45be:	d003      	beq.n	45c8 <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    45c0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    45c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    45c6:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    45c8:	2413      	movs	r4, #19
    45ca:	e003      	b.n	45d4 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    45cc:	2410      	movs	r4, #16
    45ce:	e7c2      	b.n	4556 <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
    45d0:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    45d4:	4b1a      	ldr	r3, [pc, #104]	; (4640 <mem_manage_fault+0x12c>)
    45d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    45d8:	07d8      	lsls	r0, r3, #31
    45da:	d50b      	bpl.n	45f4 <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
    45dc:	4b1d      	ldr	r3, [pc, #116]	; (4654 <mem_manage_fault+0x140>)
    45de:	617b      	str	r3, [r7, #20]
    45e0:	2302      	movs	r3, #2
    45e2:	4816      	ldr	r0, [pc, #88]	; (463c <mem_manage_fault+0x128>)
    45e4:	613b      	str	r3, [r7, #16]
    45e6:	f107 0210 	add.w	r2, r7, #16
    45ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    45ee:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
    45f0:	f008 ffa5 	bl	d53e <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    45f4:	4b12      	ldr	r3, [pc, #72]	; (4640 <mem_manage_fault+0x12c>)
    45f6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    45f8:	06d1      	lsls	r1, r2, #27
    45fa:	d402      	bmi.n	4602 <mem_manage_fault+0xee>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    45fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    45fe:	0792      	lsls	r2, r2, #30
    4600:	d50a      	bpl.n	4618 <mem_manage_fault+0x104>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    4602:	685b      	ldr	r3, [r3, #4]
    4604:	051b      	lsls	r3, r3, #20
    4606:	d507      	bpl.n	4618 <mem_manage_fault+0x104>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    4608:	4649      	mov	r1, r9
    460a:	4630      	mov	r0, r6
    460c:	f7ff fe0e 	bl	422c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    4610:	b110      	cbz	r0, 4618 <mem_manage_fault+0x104>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    4612:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    4616:	2402      	movs	r4, #2
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4618:	4a09      	ldr	r2, [pc, #36]	; (4640 <mem_manage_fault+0x12c>)
    461a:	6a93      	ldr	r3, [r2, #40]	; 0x28
    461c:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    4620:	6293      	str	r3, [r2, #40]	; 0x28
}
    4622:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
    4624:	2300      	movs	r3, #0
}
    4626:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    4628:	f888 3000 	strb.w	r3, [r8]
}
    462c:	46bd      	mov	sp, r7
    462e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
    4632:	f06f 0615 	mvn.w	r6, #21
    4636:	e7c7      	b.n	45c8 <mem_manage_fault+0xb4>
    4638:	0000f699 	.word	0x0000f699
    463c:	0000e8f0 	.word	0x0000e8f0
    4640:	e000ed00 	.word	0xe000ed00
    4644:	0000f6af 	.word	0x0000f6af
    4648:	0000f558 	.word	0x0000f558
    464c:	0000f6e2 	.word	0x0000f6e2
    4650:	0000f6fa 	.word	0x0000f6fa
    4654:	0000f710 	.word	0x0000f710

00004658 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    465c:	4b77      	ldr	r3, [pc, #476]	; (483c <z_arm_fault+0x1e4>)
{
    465e:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4660:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    4664:	af00      	add	r7, sp, #0
    4666:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4668:	f3c8 0408 	ubfx	r4, r8, #0, #9
    466c:	2600      	movs	r6, #0
    466e:	f386 8811 	msr	BASEPRI, r6
    4672:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4676:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    467a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    467e:	d10e      	bne.n	469e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4680:	f002 030c 	and.w	r3, r2, #12
    4684:	2b08      	cmp	r3, #8
    4686:	d119      	bne.n	46bc <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4688:	4b6d      	ldr	r3, [pc, #436]	; (4840 <z_arm_fault+0x1e8>)
    468a:	61fb      	str	r3, [r7, #28]
    468c:	2302      	movs	r3, #2
    468e:	486d      	ldr	r0, [pc, #436]	; (4844 <z_arm_fault+0x1ec>)
    4690:	61bb      	str	r3, [r7, #24]
    4692:	f107 0218 	add.w	r2, r7, #24
    4696:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    469a:	f008 ff50 	bl	d53e <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
    469e:	2600      	movs	r6, #0
		return NULL;
    46a0:	4635      	mov	r5, r6
	*recoverable = false;
    46a2:	2300      	movs	r3, #0
    46a4:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    46a6:	1ee3      	subs	r3, r4, #3
    46a8:	2b09      	cmp	r3, #9
    46aa:	f200 80a6 	bhi.w	47fa <z_arm_fault+0x1a2>
    46ae:	e8df f003 	tbb	[pc, r3]
    46b2:	990a      	.short	0x990a
    46b4:	a4a4959c 	.word	0xa4a4959c
    46b8:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    46bc:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    46be:	bf4c      	ite	mi
    46c0:	460d      	movmi	r5, r1
			*nested_exc = true;
    46c2:	2601      	movpl	r6, #1
    46c4:	e7ed      	b.n	46a2 <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
    46c6:	46e9      	mov	r9, sp
    46c8:	4b5f      	ldr	r3, [pc, #380]	; (4848 <z_arm_fault+0x1f0>)
    46ca:	61fb      	str	r3, [r7, #28]
    46cc:	f04f 0802 	mov.w	r8, #2
    46d0:	f107 0218 	add.w	r2, r7, #24
    46d4:	485b      	ldr	r0, [pc, #364]	; (4844 <z_arm_fault+0x1ec>)
    46d6:	f8c7 8018 	str.w	r8, [r7, #24]
    46da:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    46de:	f008 ff2e 	bl	d53e <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    46e2:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    46e4:	4c55      	ldr	r4, [pc, #340]	; (483c <z_arm_fault+0x1e4>)
	*recoverable = false;
    46e6:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    46e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    46ea:	079a      	lsls	r2, r3, #30
    46ec:	d50b      	bpl.n	4706 <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
    46ee:	4b57      	ldr	r3, [pc, #348]	; (484c <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
    46f0:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
    46f4:	4853      	ldr	r0, [pc, #332]	; (4844 <z_arm_fault+0x1ec>)
    46f6:	f107 0218 	add.w	r2, r7, #24
    46fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    46fe:	f008 ff1e 	bl	d53e <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4702:	2400      	movs	r4, #0
    4704:	e041      	b.n	478a <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4706:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4708:	2b00      	cmp	r3, #0
    470a:	da01      	bge.n	4710 <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
    470c:	4b50      	ldr	r3, [pc, #320]	; (4850 <z_arm_fault+0x1f8>)
    470e:	e7ef      	b.n	46f0 <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4710:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4712:	005b      	lsls	r3, r3, #1
    4714:	d5f5      	bpl.n	4702 <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
    4716:	4b4f      	ldr	r3, [pc, #316]	; (4854 <z_arm_fault+0x1fc>)
    4718:	484a      	ldr	r0, [pc, #296]	; (4844 <z_arm_fault+0x1ec>)
    471a:	e9c7 8306 	strd	r8, r3, [r7, #24]
    471e:	f107 0218 	add.w	r2, r7, #24
    4722:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4726:	f008 ff0a 	bl	d53e <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    472a:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    472c:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    472e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4732:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    4734:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4738:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    473c:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    473e:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    4742:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    4746:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    4748:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    474c:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    4750:	f64d 7302 	movw	r3, #57090	; 0xdf02
    4754:	429a      	cmp	r2, r3
    4756:	d008      	beq.n	476a <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    4758:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    475a:	b2db      	uxtb	r3, r3
    475c:	b38b      	cbz	r3, 47c2 <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    475e:	1dfa      	adds	r2, r7, #7
    4760:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    4762:	4628      	mov	r0, r5
    4764:	f7ff fed6 	bl	4514 <mem_manage_fault>
    4768:	e03a      	b.n	47e0 <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    476a:	b088      	sub	sp, #32
    476c:	682b      	ldr	r3, [r5, #0]
    476e:	466a      	mov	r2, sp
    4770:	4939      	ldr	r1, [pc, #228]	; (4858 <z_arm_fault+0x200>)
    4772:	4834      	ldr	r0, [pc, #208]	; (4844 <z_arm_fault+0x1ec>)
    4774:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4778:	2303      	movs	r3, #3
    477a:	f842 3f10 	str.w	r3, [r2, #16]!
    477e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4782:	f008 fedc 	bl	d53e <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
    4786:	682c      	ldr	r4, [r5, #0]
    4788:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    478a:	79fb      	ldrb	r3, [r7, #7]
    478c:	b9ab      	cbnz	r3, 47ba <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    478e:	2220      	movs	r2, #32
    4790:	4629      	mov	r1, r5
    4792:	f107 0008 	add.w	r0, r7, #8
    4796:	f008 fefb 	bl	d590 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    479a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    479c:	2e00      	cmp	r6, #0
    479e:	d047      	beq.n	4830 <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    47a0:	f3c3 0208 	ubfx	r2, r3, #0, #9
    47a4:	b922      	cbnz	r2, 47b0 <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    47a6:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    47aa:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    47ae:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    47b0:	f107 0108 	add.w	r1, r7, #8
    47b4:	4620      	mov	r0, r4
    47b6:	f7ff fbf1 	bl	3f9c <z_arm_fatal_error>
}
    47ba:	372c      	adds	r7, #44	; 0x2c
    47bc:	46bd      	mov	sp, r7
    47be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    47c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    47c4:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    47c8:	d004      	beq.n	47d4 <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
    47ca:	1df9      	adds	r1, r7, #7
    47cc:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    47ce:	f7ff fd87 	bl	42e0 <bus_fault.constprop.0>
    47d2:	e005      	b.n	47e0 <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    47d4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    47d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    47da:	d392      	bcc.n	4702 <z_arm_fault+0xaa>
			reason = usage_fault(esf);
    47dc:	f7ff fe18 	bl	4410 <usage_fault.constprop.0>
    47e0:	4604      	mov	r4, r0
    47e2:	e7d2      	b.n	478a <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
    47e4:	1dfa      	adds	r2, r7, #7
    47e6:	2100      	movs	r1, #0
    47e8:	e7bb      	b.n	4762 <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
    47ea:	1df9      	adds	r1, r7, #7
    47ec:	2000      	movs	r0, #0
    47ee:	e7ee      	b.n	47ce <z_arm_fault+0x176>
	PR_FAULT_INFO(
    47f0:	4b1a      	ldr	r3, [pc, #104]	; (485c <z_arm_fault+0x204>)
    47f2:	61fb      	str	r3, [r7, #28]
    47f4:	2302      	movs	r3, #2
    47f6:	61bb      	str	r3, [r7, #24]
    47f8:	e77c      	b.n	46f4 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    47fa:	4a19      	ldr	r2, [pc, #100]	; (4860 <z_arm_fault+0x208>)
    47fc:	4b19      	ldr	r3, [pc, #100]	; (4864 <z_arm_fault+0x20c>)
    47fe:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    4802:	46e8      	mov	r8, sp
    4804:	b08a      	sub	sp, #40	; 0x28
    4806:	bf18      	it	ne
    4808:	4613      	movne	r3, r2
    480a:	466a      	mov	r2, sp
    480c:	4916      	ldr	r1, [pc, #88]	; (4868 <z_arm_fault+0x210>)
    480e:	480d      	ldr	r0, [pc, #52]	; (4844 <z_arm_fault+0x1ec>)
    4810:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4814:	f44f 7300 	mov.w	r3, #512	; 0x200
    4818:	8413      	strh	r3, [r2, #32]
    481a:	3c10      	subs	r4, #16
    481c:	4b13      	ldr	r3, [pc, #76]	; (486c <z_arm_fault+0x214>)
    481e:	61d4      	str	r4, [r2, #28]
    4820:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    4824:	f842 3f10 	str.w	r3, [r2, #16]!
    4828:	f008 fe89 	bl	d53e <z_log_msg_static_create.constprop.0>
    482c:	46c5      	mov	sp, r8
}
    482e:	e768      	b.n	4702 <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    4830:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    4834:	f023 0301 	bic.w	r3, r3, #1
    4838:	e7b9      	b.n	47ae <z_arm_fault+0x156>
    483a:	bf00      	nop
    483c:	e000ed00 	.word	0xe000ed00
    4840:	0000f75d 	.word	0x0000f75d
    4844:	0000e8f0 	.word	0x0000e8f0
    4848:	0000f788 	.word	0x0000f788
    484c:	0000f79f 	.word	0x0000f79f
    4850:	0000f7c0 	.word	0x0000f7c0
    4854:	0000f7ce 	.word	0x0000f7ce
    4858:	0000f7ed 	.word	0x0000f7ed
    485c:	0000f809 	.word	0x0000f809
    4860:	0000f744 	.word	0x0000f744
    4864:	0000f72f 	.word	0x0000f72f
    4868:	0000f82d 	.word	0x0000f82d
    486c:	01000004 	.word	0x01000004

00004870 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    4870:	4a02      	ldr	r2, [pc, #8]	; (487c <z_arm_fault_init+0xc>)
    4872:	6953      	ldr	r3, [r2, #20]
    4874:	f043 0310 	orr.w	r3, r3, #16
    4878:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    487a:	4770      	bx	lr
    487c:	e000ed00 	.word	0xe000ed00

00004880 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    4880:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    4884:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    4888:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    488a:	4672      	mov	r2, lr
	bl z_arm_fault
    488c:	f7ff fee4 	bl	4658 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    4890:	bd01      	pop	{r0, pc}
    4892:	bf00      	nop

00004894 <z_arm_interrupt_init>:
    4894:	4804      	ldr	r0, [pc, #16]	; (48a8 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    4896:	2300      	movs	r3, #0
    4898:	2140      	movs	r1, #64	; 0x40
    489a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    489c:	3301      	adds	r3, #1
    489e:	2b28      	cmp	r3, #40	; 0x28
    48a0:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    48a4:	d1f9      	bne.n	489a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    48a6:	4770      	bx	lr
    48a8:	e000e100 	.word	0xe000e100

000048ac <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    48ac:	2000      	movs	r0, #0
    msr CONTROL, r0
    48ae:	f380 8814 	msr	CONTROL, r0
    isb
    48b2:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    48b6:	f7fd fd09 	bl	22cc <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    48ba:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    48bc:	490d      	ldr	r1, [pc, #52]	; (48f4 <__start+0x48>)
    str r0, [r1]
    48be:	6008      	str	r0, [r1, #0]
    dsb
    48c0:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    48c4:	480c      	ldr	r0, [pc, #48]	; (48f8 <__start+0x4c>)
    msr msp, r0
    48c6:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    48ca:	f000 f82b 	bl	4924 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    48ce:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
    48d0:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    48d4:	4809      	ldr	r0, [pc, #36]	; (48fc <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    48d6:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    48da:	1840      	adds	r0, r0, r1
    msr PSP, r0
    48dc:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    48e0:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    48e4:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    48e6:	4308      	orrs	r0, r1
    msr CONTROL, r0
    48e8:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    48ec:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    48f0:	f7ff fc16 	bl	4120 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    48f4:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    48f8:	20003900 	.word	0x20003900
    ldr r0, =z_interrupt_stacks
    48fc:	20002b80 	.word	0x20002b80

00004900 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    4900:	4907      	ldr	r1, [pc, #28]	; (4920 <z_arm_clear_arm_mpu_config+0x20>)
    4902:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    4906:	2300      	movs	r3, #0
	int num_regions =
    4908:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    490c:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    490e:	4293      	cmp	r3, r2
    4910:	db00      	blt.n	4914 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    4912:	4770      	bx	lr
  MPU->RNR = rnr;
    4914:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    4918:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    491c:	3301      	adds	r3, #1
    491e:	e7f6      	b.n	490e <z_arm_clear_arm_mpu_config+0xe>
    4920:	e000ed00 	.word	0xe000ed00

00004924 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    4924:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    4926:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    4928:	2300      	movs	r3, #0
    492a:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    492e:	f7ff ffe7 	bl	4900 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    4932:	4b14      	ldr	r3, [pc, #80]	; (4984 <z_arm_init_arch_hw_at_boot+0x60>)
    4934:	f04f 32ff 	mov.w	r2, #4294967295
    4938:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    493c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    4940:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    4944:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    4948:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    494c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    4950:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    4954:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    4958:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    495c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    4960:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    4964:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    4968:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    496c:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    4970:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    4974:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    4978:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    497a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    497e:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    4982:	bd08      	pop	{r3, pc}
    4984:	e000e100 	.word	0xe000e100

00004988 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    4988:	4b08      	ldr	r3, [pc, #32]	; (49ac <z_impl_k_thread_abort+0x24>)
    498a:	689b      	ldr	r3, [r3, #8]
    498c:	4283      	cmp	r3, r0
    498e:	d10b      	bne.n	49a8 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    4990:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    4994:	b143      	cbz	r3, 49a8 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    4996:	4b06      	ldr	r3, [pc, #24]	; (49b0 <z_impl_k_thread_abort+0x28>)
    4998:	685a      	ldr	r2, [r3, #4]
    499a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    499e:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    49a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    49a2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    49a6:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    49a8:	f007 bba8 	b.w	c0fc <z_thread_abort>
    49ac:	20001c98 	.word	0x20001c98
    49b0:	e000ed00 	.word	0xe000ed00

000049b4 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    49b4:	4b02      	ldr	r3, [pc, #8]	; (49c0 <z_arm_configure_static_mpu_regions+0xc>)
    49b6:	4a03      	ldr	r2, [pc, #12]	; (49c4 <z_arm_configure_static_mpu_regions+0x10>)
    49b8:	4803      	ldr	r0, [pc, #12]	; (49c8 <z_arm_configure_static_mpu_regions+0x14>)
    49ba:	2101      	movs	r1, #1
    49bc:	f000 b892 	b.w	4ae4 <arm_core_mpu_configure_static_mpu_regions>
    49c0:	20008000 	.word	0x20008000
    49c4:	20000000 	.word	0x20000000
    49c8:	0000ea4c 	.word	0x0000ea4c

000049cc <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    49cc:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    49ce:	4b05      	ldr	r3, [pc, #20]	; (49e4 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    49d0:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    49d2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    49d4:	4a04      	ldr	r2, [pc, #16]	; (49e8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    49d6:	2140      	movs	r1, #64	; 0x40
    49d8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    49dc:	4618      	mov	r0, r3
    49de:	2101      	movs	r1, #1
    49e0:	f000 b88a 	b.w	4af8 <arm_core_mpu_configure_dynamic_mpu_regions>
    49e4:	20000ec8 	.word	0x20000ec8
    49e8:	150b0000 	.word	0x150b0000

000049ec <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    49ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    49f0:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 4aa8 <mpu_configure_regions+0xbc>
    49f4:	469c      	mov	ip, r3
    49f6:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
    49f8:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    49fa:	2300      	movs	r3, #0
    49fc:	428b      	cmp	r3, r1
    49fe:	da1a      	bge.n	4a36 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    4a00:	6844      	ldr	r4, [r0, #4]
    4a02:	2c00      	cmp	r4, #0
    4a04:	d04d      	beq.n	4aa2 <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    4a06:	f1bc 0f00 	cmp.w	ip, #0
    4a0a:	d01d      	beq.n	4a48 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    4a0c:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    4a0e:	4234      	tst	r4, r6
    4a10:	d015      	beq.n	4a3e <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    4a12:	466c      	mov	r4, sp
    4a14:	b088      	sub	sp, #32
    4a16:	466a      	mov	r2, sp
    4a18:	4924      	ldr	r1, [pc, #144]	; (4aac <mpu_configure_regions+0xc0>)
    4a1a:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4a1e:	2303      	movs	r3, #3
    4a20:	f842 3f10 	str.w	r3, [r2, #16]!
    4a24:	4822      	ldr	r0, [pc, #136]	; (4ab0 <mpu_configure_regions+0xc4>)
    4a26:	2300      	movs	r3, #0
    4a28:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4a2c:	f7fd fee6 	bl	27fc <z_impl_z_log_msg_static_create>
			return -EINVAL;
    4a30:	f06f 0515 	mvn.w	r5, #21
    4a34:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    4a36:	4628      	mov	r0, r5
    4a38:	46bd      	mov	sp, r7
    4a3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
    4a3e:	2c1f      	cmp	r4, #31
    4a40:	d9e7      	bls.n	4a12 <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
    4a42:	6802      	ldr	r2, [r0, #0]
		&&
    4a44:	4216      	tst	r6, r2
    4a46:	d1e4      	bne.n	4a12 <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    4a48:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    4a4a:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4a4c:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    4a4e:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
    4a52:	d914      	bls.n	4a7e <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
    4a54:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    4a58:	d813      	bhi.n	4a82 <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    4a5a:	3c01      	subs	r4, #1
    4a5c:	fab4 f484 	clz	r4, r4
    4a60:	f1c4 041f 	rsb	r4, r4, #31
    4a64:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    4a66:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    4a6a:	ea46 0604 	orr.w	r6, r6, r4
    4a6e:	d90a      	bls.n	4a86 <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    4a70:	466c      	mov	r4, sp
    4a72:	b088      	sub	sp, #32
    4a74:	466a      	mov	r2, sp
    4a76:	4b0f      	ldr	r3, [pc, #60]	; (4ab4 <mpu_configure_regions+0xc8>)
    4a78:	e9c2 3505 	strd	r3, r5, [r2, #20]
    4a7c:	e7cf      	b.n	4a1e <mpu_configure_regions+0x32>
		return REGION_32B;
    4a7e:	2408      	movs	r4, #8
    4a80:	e7f1      	b.n	4a66 <mpu_configure_regions+0x7a>
		return REGION_4G;
    4a82:	243e      	movs	r4, #62	; 0x3e
    4a84:	e7ef      	b.n	4a66 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4a86:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    4a8a:	432a      	orrs	r2, r5
    4a8c:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4a90:	f046 0601 	orr.w	r6, r6, #1
    4a94:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4a98:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
    4a9c:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4a9e:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    4aa2:	3301      	adds	r3, #1
    4aa4:	300c      	adds	r0, #12
    4aa6:	e7a9      	b.n	49fc <mpu_configure_regions+0x10>
    4aa8:	e000ed00 	.word	0xe000ed00
    4aac:	0000f844 	.word	0x0000f844
    4ab0:	0000e8e8 	.word	0x0000e8e8
    4ab4:	0000f867 	.word	0x0000f867

00004ab8 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    4ab8:	4b04      	ldr	r3, [pc, #16]	; (4acc <arm_core_mpu_enable+0x14>)
    4aba:	2205      	movs	r2, #5
    4abc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    4ac0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4ac4:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    4ac8:	4770      	bx	lr
    4aca:	bf00      	nop
    4acc:	e000ed00 	.word	0xe000ed00

00004ad0 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    4ad0:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    4ad4:	4b02      	ldr	r3, [pc, #8]	; (4ae0 <arm_core_mpu_disable+0x10>)
    4ad6:	2200      	movs	r2, #0
    4ad8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    4adc:	4770      	bx	lr
    4ade:	bf00      	nop
    4ae0:	e000ed00 	.word	0xe000ed00

00004ae4 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    4ae4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    4ae6:	4c03      	ldr	r4, [pc, #12]	; (4af4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    4ae8:	2301      	movs	r3, #1
    4aea:	7822      	ldrb	r2, [r4, #0]
    4aec:	f7ff ff7e 	bl	49ec <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    4af0:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    4af2:	bd10      	pop	{r4, pc}
    4af4:	20001d27 	.word	0x20001d27

00004af8 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    4af8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    4afa:	4a09      	ldr	r2, [pc, #36]	; (4b20 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    4afc:	2300      	movs	r3, #0
    4afe:	7812      	ldrb	r2, [r2, #0]
    4b00:	f7ff ff74 	bl	49ec <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    4b04:	f110 0f16 	cmn.w	r0, #22
    4b08:	d003      	beq.n	4b12 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    4b0a:	4b06      	ldr	r3, [pc, #24]	; (4b24 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    4b0c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    4b0e:	2807      	cmp	r0, #7
    4b10:	dd00      	ble.n	4b14 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    4b12:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    4b14:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    4b18:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    4b1c:	3001      	adds	r0, #1
    4b1e:	e7f6      	b.n	4b0e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    4b20:	20001d27 	.word	0x20001d27
    4b24:	e000ed00 	.word	0xe000ed00

00004b28 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    4b28:	4914      	ldr	r1, [pc, #80]	; (4b7c <z_arm_mpu_init+0x54>)
    4b2a:	6808      	ldr	r0, [r1, #0]
    4b2c:	2808      	cmp	r0, #8
{
    4b2e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    4b30:	d821      	bhi.n	4b76 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    4b32:	f7ff ffcd 	bl	4ad0 <arm_core_mpu_disable>
    4b36:	4c12      	ldr	r4, [pc, #72]	; (4b80 <z_arm_mpu_init+0x58>)
    4b38:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4b3a:	2200      	movs	r2, #0
    4b3c:	4290      	cmp	r0, r2
    4b3e:	f101 010c 	add.w	r1, r1, #12
    4b42:	d105      	bne.n	4b50 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    4b44:	4b0f      	ldr	r3, [pc, #60]	; (4b84 <z_arm_mpu_init+0x5c>)
    4b46:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    4b48:	f7ff ffb6 	bl	4ab8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    4b4c:	2000      	movs	r0, #0
}
    4b4e:	bd10      	pop	{r4, pc}
    4b50:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4b54:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    4b58:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    4b5c:	4313      	orrs	r3, r2
    4b5e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    4b62:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    4b66:	f851 3c04 	ldr.w	r3, [r1, #-4]
    4b6a:	f043 0301 	orr.w	r3, r3, #1
    4b6e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    4b72:	3201      	adds	r2, #1
    4b74:	e7e2      	b.n	4b3c <z_arm_mpu_init+0x14>
		return -1;
    4b76:	f04f 30ff 	mov.w	r0, #4294967295
    4b7a:	e7e8      	b.n	4b4e <z_arm_mpu_init+0x26>
    4b7c:	0000ea58 	.word	0x0000ea58
    4b80:	e000ed00 	.word	0xe000ed00
    4b84:	20001d27 	.word	0x20001d27

00004b88 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    4b88:	4b01      	ldr	r3, [pc, #4]	; (4b90 <__stdout_hook_install+0x8>)
    4b8a:	6018      	str	r0, [r3, #0]
}
    4b8c:	4770      	bx	lr
    4b8e:	bf00      	nop
    4b90:	20000020 	.word	0x20000020

00004b94 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    4b94:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4b98:	b2c0      	uxtb	r0, r0
    4b9a:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    4b9e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    4ba2:	4905      	ldr	r1, [pc, #20]	; (4bb8 <sys_arch_reboot+0x24>)
    4ba4:	4b05      	ldr	r3, [pc, #20]	; (4bbc <sys_arch_reboot+0x28>)
    4ba6:	68ca      	ldr	r2, [r1, #12]
    4ba8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    4bac:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    4bae:	60cb      	str	r3, [r1, #12]
    4bb0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    4bb4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    4bb6:	e7fd      	b.n	4bb4 <sys_arch_reboot+0x20>
    4bb8:	e000ed00 	.word	0xe000ed00
    4bbc:	05fa0004 	.word	0x05fa0004

00004bc0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    4bc0:	b120      	cbz	r0, 4bcc <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    4bc2:	4b03      	ldr	r3, [pc, #12]	; (4bd0 <arch_busy_wait+0x10>)
    4bc4:	0180      	lsls	r0, r0, #6
    4bc6:	f043 0301 	orr.w	r3, r3, #1
    4bca:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    4bcc:	4770      	bx	lr
    4bce:	bf00      	nop
    4bd0:	0000e990 	.word	0x0000e990

00004bd4 <hid_status_cb.part.0>:
		break;
	}

}

static void hid_status_cb(struct usb_cfg_data *cfg,
    4bd4:	b580      	push	{r7, lr}
    4bd6:	af00      	add	r7, sp, #0

	LOG_DBG("cfg %p status %d", cfg, status);

	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
	if (common == NULL) {
		LOG_WRN("Device data not found for cfg %p", cfg);
    4bd8:	b088      	sub	sp, #32
    4bda:	466a      	mov	r2, sp
    4bdc:	4b06      	ldr	r3, [pc, #24]	; (4bf8 <hid_status_cb.part.0+0x24>)
    4bde:	e9c2 3005 	strd	r3, r0, [r2, #20]
    4be2:	2303      	movs	r3, #3
    4be4:	f842 3f10 	str.w	r3, [r2, #16]!
    4be8:	4804      	ldr	r0, [pc, #16]	; (4bfc <hid_status_cb.part.0+0x28>)
    4bea:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    4bee:	f008 fd0a 	bl	d606 <z_log_msg_static_create.constprop.0>
	}

	dev_data = CONTAINER_OF(common, struct hid_device_info, common);

	hid_do_status_cb(dev_data, status, param);
}
    4bf2:	46bd      	mov	sp, r7
    4bf4:	bd80      	pop	{r7, pc}
    4bf6:	bf00      	nop
    4bf8:	0000f8a0 	.word	0x0000f8a0
    4bfc:	0000e940 	.word	0x0000e940

00004c00 <hid_status_cb>:
{
    4c00:	b570      	push	{r4, r5, r6, lr}
    4c02:	4606      	mov	r6, r0
    4c04:	b086      	sub	sp, #24
    4c06:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
    4c08:	4601      	mov	r1, r0
    4c0a:	4835      	ldr	r0, [pc, #212]	; (4ce0 <hid_status_cb+0xe0>)
    4c0c:	f008 fc58 	bl	d4c0 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    4c10:	4604      	mov	r4, r0
    4c12:	b928      	cbnz	r0, 4c20 <hid_status_cb+0x20>
    4c14:	4630      	mov	r0, r6
}
    4c16:	b006      	add	sp, #24
    4c18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4c1c:	f7ff bfda 	b.w	4bd4 <hid_status_cb.part.0>
	switch (status) {
    4c20:	2d0a      	cmp	r5, #10
    4c22:	d85a      	bhi.n	4cda <hid_status_cb+0xda>
    4c24:	e8df f005 	tbb	[pc, r5]
    4c28:	23211106 	.word	0x23211106
    4c2c:	59403432 	.word	0x59403432
    4c30:	5959      	.short	0x5959
    4c32:	30          	.byte	0x30
    4c33:	00          	.byte	0x00
		LOG_INF("Device error");
    4c34:	4b2b      	ldr	r3, [pc, #172]	; (4ce4 <hid_status_cb+0xe4>)
		LOG_INF("Unknown event");
    4c36:	9305      	str	r3, [sp, #20]
    4c38:	482b      	ldr	r0, [pc, #172]	; (4ce8 <hid_status_cb+0xe8>)
    4c3a:	2302      	movs	r3, #2
    4c3c:	aa04      	add	r2, sp, #16
    4c3e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4c42:	9304      	str	r3, [sp, #16]
    4c44:	f008 fcdf 	bl	d606 <z_log_msg_static_create.constprop.0>
    4c48:	e01e      	b.n	4c88 <hid_status_cb+0x88>
		LOG_INF("Device reset detected");
    4c4a:	4b28      	ldr	r3, [pc, #160]	; (4cec <hid_status_cb+0xec>)
		LOG_INF("Device disconnected");
    4c4c:	9305      	str	r3, [sp, #20]
    4c4e:	4826      	ldr	r0, [pc, #152]	; (4ce8 <hid_status_cb+0xe8>)
    4c50:	2302      	movs	r3, #2
    4c52:	aa04      	add	r2, sp, #16
    4c54:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4c58:	9304      	str	r3, [sp, #16]
    4c5a:	f008 fcd4 	bl	d606 <z_log_msg_static_create.constprop.0>
		dev_data->configured = false;
    4c5e:	2300      	movs	r3, #0
    4c60:	f804 3c04 	strb.w	r3, [r4, #-4]
			dev_data->suspended = false;
    4c64:	f804 3c03 	strb.w	r3, [r4, #-3]
    4c68:	e00e      	b.n	4c88 <hid_status_cb+0x88>
		LOG_INF("Device connected");
    4c6a:	4b21      	ldr	r3, [pc, #132]	; (4cf0 <hid_status_cb+0xf0>)
    4c6c:	e7e3      	b.n	4c36 <hid_status_cb+0x36>
		LOG_INF("Device configured");
    4c6e:	4b21      	ldr	r3, [pc, #132]	; (4cf4 <hid_status_cb+0xf4>)
    4c70:	9305      	str	r3, [sp, #20]
    4c72:	481d      	ldr	r0, [pc, #116]	; (4ce8 <hid_status_cb+0xe8>)
    4c74:	2302      	movs	r3, #2
    4c76:	aa04      	add	r2, sp, #16
    4c78:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4c7c:	9304      	str	r3, [sp, #16]
    4c7e:	f008 fcc2 	bl	d606 <z_log_msg_static_create.constprop.0>
		dev_data->configured = true;
    4c82:	2301      	movs	r3, #1
    4c84:	f804 3c04 	strb.w	r3, [r4, #-4]
}
    4c88:	b006      	add	sp, #24
    4c8a:	bd70      	pop	{r4, r5, r6, pc}
		LOG_INF("Device disconnected");
    4c8c:	4b1a      	ldr	r3, [pc, #104]	; (4cf8 <hid_status_cb+0xf8>)
    4c8e:	e7dd      	b.n	4c4c <hid_status_cb+0x4c>
		LOG_INF("Device suspended");
    4c90:	4b1a      	ldr	r3, [pc, #104]	; (4cfc <hid_status_cb+0xfc>)
    4c92:	9305      	str	r3, [sp, #20]
    4c94:	4814      	ldr	r0, [pc, #80]	; (4ce8 <hid_status_cb+0xe8>)
    4c96:	2302      	movs	r3, #2
    4c98:	aa04      	add	r2, sp, #16
    4c9a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4c9e:	9304      	str	r3, [sp, #16]
    4ca0:	f008 fcb1 	bl	d606 <z_log_msg_static_create.constprop.0>
		dev_data->suspended = true;
    4ca4:	2301      	movs	r3, #1
    4ca6:	e7dd      	b.n	4c64 <hid_status_cb+0x64>
		LOG_INF("Device resumed");
    4ca8:	4b15      	ldr	r3, [pc, #84]	; (4d00 <hid_status_cb+0x100>)
    4caa:	480f      	ldr	r0, [pc, #60]	; (4ce8 <hid_status_cb+0xe8>)
    4cac:	9305      	str	r3, [sp, #20]
    4cae:	2502      	movs	r5, #2
    4cb0:	aa04      	add	r2, sp, #16
    4cb2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4cb6:	9504      	str	r5, [sp, #16]
    4cb8:	f008 fca5 	bl	d606 <z_log_msg_static_create.constprop.0>
		if (dev_data->suspended) {
    4cbc:	f814 3c03 	ldrb.w	r3, [r4, #-3]
    4cc0:	2b00      	cmp	r3, #0
    4cc2:	d0e1      	beq.n	4c88 <hid_status_cb+0x88>
			LOG_INF("from suspend");
    4cc4:	4b0f      	ldr	r3, [pc, #60]	; (4d04 <hid_status_cb+0x104>)
    4cc6:	4808      	ldr	r0, [pc, #32]	; (4ce8 <hid_status_cb+0xe8>)
    4cc8:	aa04      	add	r2, sp, #16
    4cca:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    4cce:	e9cd 5304 	strd	r5, r3, [sp, #16]
    4cd2:	f008 fc98 	bl	d606 <z_log_msg_static_create.constprop.0>
			dev_data->suspended = false;
    4cd6:	2300      	movs	r3, #0
    4cd8:	e7c4      	b.n	4c64 <hid_status_cb+0x64>
		LOG_INF("Unknown event");
    4cda:	4b0b      	ldr	r3, [pc, #44]	; (4d08 <hid_status_cb+0x108>)
    4cdc:	e7ab      	b.n	4c36 <hid_status_cb+0x36>
    4cde:	bf00      	nop
    4ce0:	20000eec 	.word	0x20000eec
    4ce4:	0000f8c1 	.word	0x0000f8c1
    4ce8:	0000e940 	.word	0x0000e940
    4cec:	0000f8ce 	.word	0x0000f8ce
    4cf0:	0000f8e4 	.word	0x0000f8e4
    4cf4:	0000f8f5 	.word	0x0000f8f5
    4cf8:	0000f907 	.word	0x0000f907
    4cfc:	0000f91b 	.word	0x0000f91b
    4d00:	0000f92c 	.word	0x0000f92c
    4d04:	0000f93b 	.word	0x0000f93b
    4d08:	0000f948 	.word	0x0000f948

00004d0c <hid_class_handle_req>:

static int hid_class_handle_req(struct usb_setup_packet *setup,
				int32_t *len, uint8_t **data)
{
    4d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    4d10:	4604      	mov	r4, r0
    4d12:	af00      	add	r7, sp, #0
    4d14:	4688      	mov	r8, r1

	LOG_DBG("Class request:"
		"bRequest 0x%02x, bmRequestType 0x%02x len %d",
		setup->bRequest, setup->bmRequestType, *len);

	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
    4d16:	7901      	ldrb	r1, [r0, #4]
    4d18:	4826      	ldr	r0, [pc, #152]	; (4db4 <hid_class_handle_req+0xa8>)
{
    4d1a:	4691      	mov	r9, r2
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
    4d1c:	f008 fbdc 	bl	d4d8 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    4d20:	4606      	mov	r6, r0
    4d22:	b9a0      	cbnz	r0, 4d4e <hid_class_handle_req+0x42>
		LOG_WRN("Device data not found for interface %u",
    4d24:	88a3      	ldrh	r3, [r4, #4]
    4d26:	466c      	mov	r4, sp
    4d28:	b088      	sub	sp, #32
    4d2a:	466a      	mov	r2, sp
    4d2c:	4922      	ldr	r1, [pc, #136]	; (4db8 <hid_class_handle_req+0xac>)
    4d2e:	4823      	ldr	r0, [pc, #140]	; (4dbc <hid_class_handle_req+0xb0>)
    4d30:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4d34:	2303      	movs	r3, #3
    4d36:	f842 3f10 	str.w	r3, [r2, #16]!
    4d3a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    4d3e:	f008 fc62 	bl	d606 <z_log_msg_static_create.constprop.0>
			setup->wIndex);
		return -ENODEV;
    4d42:	f06f 0012 	mvn.w	r0, #18
    4d46:	46a5      	mov	sp, r4
			break;
		}
	}

	return -ENOTSUP;
}
    4d48:	46bd      	mov	sp, r7
    4d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (usb_reqtype_is_to_host(setup)) {
    4d4e:	f994 3000 	ldrsb.w	r3, [r4]
	dev = common->dev;
    4d52:	6800      	ldr	r0, [r0, #0]
		switch (setup->bRequest) {
    4d54:	7865      	ldrb	r5, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    4d56:	2b00      	cmp	r3, #0
    4d58:	da1c      	bge.n	4d94 <hid_class_handle_req+0x88>
		switch (setup->bRequest) {
    4d5a:	2d01      	cmp	r5, #1
    4d5c:	d012      	beq.n	4d84 <hid_class_handle_req+0x78>
    4d5e:	1eab      	subs	r3, r5, #2
		switch (setup->bRequest) {
    4d60:	2b01      	cmp	r3, #1
    4d62:	d914      	bls.n	4d8e <hid_class_handle_req+0x82>
			LOG_ERR("Unhandled request 0x%02x", setup->bRequest);
    4d64:	466c      	mov	r4, sp
    4d66:	b088      	sub	sp, #32
    4d68:	466a      	mov	r2, sp
    4d6a:	4b15      	ldr	r3, [pc, #84]	; (4dc0 <hid_class_handle_req+0xb4>)
    4d6c:	4813      	ldr	r0, [pc, #76]	; (4dbc <hid_class_handle_req+0xb0>)
    4d6e:	e9c2 3505 	strd	r3, r5, [r2, #20]
    4d72:	2303      	movs	r3, #3
    4d74:	f842 3f10 	str.w	r3, [r2, #16]!
    4d78:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4d7c:	f008 fc43 	bl	d606 <z_log_msg_static_create.constprop.0>
    4d80:	46a5      	mov	sp, r4
    4d82:	e004      	b.n	4d8e <hid_class_handle_req+0x82>
			if (dev_data->ops && dev_data->ops->get_report) {
    4d84:	f856 3c08 	ldr.w	r3, [r6, #-8]
    4d88:	b10b      	cbz	r3, 4d8e <hid_class_handle_req+0x82>
    4d8a:	681d      	ldr	r5, [r3, #0]
    4d8c:	b96d      	cbnz	r5, 4daa <hid_class_handle_req+0x9e>
			return hid_on_get_idle(dev_data, setup, len, data);
    4d8e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4d92:	e7d9      	b.n	4d48 <hid_class_handle_req+0x3c>
		switch (setup->bRequest) {
    4d94:	2d09      	cmp	r5, #9
    4d96:	d002      	beq.n	4d9e <hid_class_handle_req+0x92>
    4d98:	f1a5 030a 	sub.w	r3, r5, #10
    4d9c:	e7e0      	b.n	4d60 <hid_class_handle_req+0x54>
			if (dev_data->ops && dev_data->ops->set_report) {
    4d9e:	f856 3c08 	ldr.w	r3, [r6, #-8]
    4da2:	2b00      	cmp	r3, #0
    4da4:	d0f3      	beq.n	4d8e <hid_class_handle_req+0x82>
    4da6:	685d      	ldr	r5, [r3, #4]
    4da8:	e7f0      	b.n	4d8c <hid_class_handle_req+0x80>
				return dev_data->ops->set_report(dev, setup,
    4daa:	464b      	mov	r3, r9
    4dac:	4642      	mov	r2, r8
    4dae:	4621      	mov	r1, r4
    4db0:	47a8      	blx	r5
    4db2:	e7c9      	b.n	4d48 <hid_class_handle_req+0x3c>
    4db4:	20000eec 	.word	0x20000eec
    4db8:	0000f956 	.word	0x0000f956
    4dbc:	0000e940 	.word	0x0000e940
    4dc0:	0000f97d 	.word	0x0000f97d

00004dc4 <hid_custom_handle_req>:

static int hid_custom_handle_req(struct usb_setup_packet *setup,
				 int32_t *len, uint8_t **data)
{
    4dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	LOG_DBG("Standard request:"
		"bRequest 0x%02x, bmRequestType 0x%02x, len %d",
		setup->bRequest, setup->bmRequestType, setup->wLength);

	if (usb_reqtype_is_to_host(setup) &&
    4dc8:	f990 3000 	ldrsb.w	r3, [r0]
    4dcc:	2b00      	cmp	r3, #0
{
    4dce:	af00      	add	r7, sp, #0
    4dd0:	4604      	mov	r4, r0
    4dd2:	460d      	mov	r5, r1
    4dd4:	4616      	mov	r6, r2
	if (usb_reqtype_is_to_host(setup) &&
    4dd6:	db04      	blt.n	4de2 <hid_custom_handle_req+0x1e>

		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
		if (common == NULL) {
			LOG_WRN("Device data not found for interface %u",
				iface_num);
			return -EINVAL;
    4dd8:	f06f 0015 	mvn.w	r0, #21

		return 0;
	}

	return -EINVAL;
}
    4ddc:	46bd      	mov	sp, r7
    4dde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    setup->RequestType.recipient == USB_REQTYPE_RECIPIENT_INTERFACE &&
    4de2:	8803      	ldrh	r3, [r0, #0]
    4de4:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
    4de8:	b29b      	uxth	r3, r3
    4dea:	f240 6201 	movw	r2, #1537	; 0x601
    4dee:	4293      	cmp	r3, r2
    4df0:	d1f2      	bne.n	4dd8 <hid_custom_handle_req+0x14>
		uint8_t iface_num = (uint8_t)setup->wIndex;
    4df2:	f890 9004 	ldrb.w	r9, [r0, #4]
		uint8_t value = (uint8_t)(setup->wValue >> 8);
    4df6:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
    4dfa:	481b      	ldr	r0, [pc, #108]	; (4e68 <hid_custom_handle_req+0xa4>)
    4dfc:	4649      	mov	r1, r9
		uint8_t value = (uint8_t)(setup->wValue >> 8);
    4dfe:	ea4f 2818 	mov.w	r8, r8, lsr #8
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
    4e02:	f008 fb69 	bl	d4d8 <usb_get_dev_data_by_iface>
		if (common == NULL) {
    4e06:	b978      	cbnz	r0, 4e28 <hid_custom_handle_req+0x64>
			LOG_WRN("Device data not found for interface %u",
    4e08:	466c      	mov	r4, sp
    4e0a:	b088      	sub	sp, #32
    4e0c:	466a      	mov	r2, sp
    4e0e:	4b17      	ldr	r3, [pc, #92]	; (4e6c <hid_custom_handle_req+0xa8>)
    4e10:	4817      	ldr	r0, [pc, #92]	; (4e70 <hid_custom_handle_req+0xac>)
    4e12:	e9c2 3905 	strd	r3, r9, [r2, #20]
    4e16:	2303      	movs	r3, #3
    4e18:	f842 3f10 	str.w	r3, [r2, #16]!
    4e1c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    4e20:	f008 fbf1 	bl	d606 <z_log_msg_static_create.constprop.0>
    4e24:	46a5      	mov	sp, r4
			return -EINVAL;
    4e26:	e7d7      	b.n	4dd8 <hid_custom_handle_req+0x14>
		switch (value) {
    4e28:	f1b8 0f21 	cmp.w	r8, #33	; 0x21
    4e2c:	d005      	beq.n	4e3a <hid_custom_handle_req+0x76>
    4e2e:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
    4e32:	d00f      	beq.n	4e54 <hid_custom_handle_req+0x90>
    4e34:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4e38:	e7d0      	b.n	4ddc <hid_custom_handle_req+0x18>
			cfg = common->dev->config;
    4e3a:	6803      	ldr	r3, [r0, #0]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
    4e3c:	88e1      	ldrh	r1, [r4, #6]
			hid_desc = cfg->interface_descriptor;
    4e3e:	685b      	ldr	r3, [r3, #4]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
    4e40:	685b      	ldr	r3, [r3, #4]
    4e42:	f813 2f09 	ldrb.w	r2, [r3, #9]!
    4e46:	4291      	cmp	r1, r2
    4e48:	bf94      	ite	ls
    4e4a:	6029      	strls	r1, [r5, #0]
    4e4c:	602a      	strhi	r2, [r5, #0]
			*data = (uint8_t *)dev_data->report_desc;
    4e4e:	6033      	str	r3, [r6, #0]
		return 0;
    4e50:	2000      	movs	r0, #0
    4e52:	e7c3      	b.n	4ddc <hid_custom_handle_req+0x18>
			*len = MIN(setup->wLength, dev_data->report_size);
    4e54:	88e3      	ldrh	r3, [r4, #6]
    4e56:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    4e5a:	429a      	cmp	r2, r3
    4e5c:	bf94      	ite	ls
    4e5e:	602a      	strls	r2, [r5, #0]
    4e60:	602b      	strhi	r3, [r5, #0]
			*data = (uint8_t *)dev_data->report_desc;
    4e62:	f850 3c10 	ldr.w	r3, [r0, #-16]
			break;
    4e66:	e7f2      	b.n	4e4e <hid_custom_handle_req+0x8a>
    4e68:	20000eec 	.word	0x20000eec
    4e6c:	0000f956 	.word	0x0000f956
    4e70:	0000e940 	.word	0x0000e940

00004e74 <hid_int_in.part.0>:

static void hid_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
    4e74:	b580      	push	{r7, lr}
    4e76:	af00      	add	r7, sp, #0
	struct hid_device_info *dev_data;
	struct usb_dev_data *common;

	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
	if (common == NULL) {
		LOG_WRN("Device data not found for endpoint %u", ep);
    4e78:	b088      	sub	sp, #32
    4e7a:	466a      	mov	r2, sp
    4e7c:	4b06      	ldr	r3, [pc, #24]	; (4e98 <hid_int_in.part.0+0x24>)
    4e7e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    4e82:	2303      	movs	r3, #3
    4e84:	f842 3f10 	str.w	r3, [r2, #16]!
    4e88:	4804      	ldr	r0, [pc, #16]	; (4e9c <hid_int_in.part.0+0x28>)
    4e8a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    4e8e:	f008 fbba 	bl	d606 <z_log_msg_static_create.constprop.0>
	    dev_data->ops->int_in_ready == NULL) {
		return;
	}

	dev_data->ops->int_in_ready(common->dev);
}
    4e92:	46bd      	mov	sp, r7
    4e94:	bd80      	pop	{r7, pc}
    4e96:	bf00      	nop
    4e98:	0000f996 	.word	0x0000f996
    4e9c:	0000e940 	.word	0x0000e940

00004ea0 <hid_int_in>:
{
    4ea0:	b570      	push	{r4, r5, r6, lr}
    4ea2:	4604      	mov	r4, r0
    4ea4:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
    4ea6:	4601      	mov	r1, r0
    4ea8:	480a      	ldr	r0, [pc, #40]	; (4ed4 <hid_int_in+0x34>)
    4eaa:	f008 fb23 	bl	d4f4 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    4eae:	b920      	cbnz	r0, 4eba <hid_int_in+0x1a>
    4eb0:	4620      	mov	r0, r4
}
    4eb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    4eb6:	f7ff bfdd 	b.w	4e74 <hid_int_in.part.0>
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
    4eba:	2d02      	cmp	r5, #2
    4ebc:	d108      	bne.n	4ed0 <hid_int_in+0x30>
    4ebe:	f850 3c08 	ldr.w	r3, [r0, #-8]
    4ec2:	b12b      	cbz	r3, 4ed0 <hid_int_in+0x30>
	    dev_data->ops->int_in_ready == NULL) {
    4ec4:	691b      	ldr	r3, [r3, #16]
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
    4ec6:	b11b      	cbz	r3, 4ed0 <hid_int_in+0x30>
}
    4ec8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	dev_data->ops->int_in_ready(common->dev);
    4ecc:	6800      	ldr	r0, [r0, #0]
    4ece:	4718      	bx	r3
}
    4ed0:	bd70      	pop	{r4, r5, r6, pc}
    4ed2:	bf00      	nop
    4ed4:	20000eec 	.word	0x20000eec

00004ed8 <usb_hid_register_device>:
	return 0;
}

void usb_hid_register_device(const struct device *dev, const uint8_t *desc,
			     size_t size, const struct hid_ops *ops)
{
    4ed8:	b510      	push	{r4, lr}
	struct hid_device_info *dev_data = dev->data;
    4eda:	6904      	ldr	r4, [r0, #16]

	dev_data->report_desc = desc;
	dev_data->report_size = size;
    4edc:	e9c4 1200 	strd	r1, r2, [r4]

	dev_data->ops = ops;
    4ee0:	60a3      	str	r3, [r4, #8]
	parent->next = child;
    4ee2:	2300      	movs	r3, #0
    4ee4:	6163      	str	r3, [r4, #20]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    4ee6:	4b06      	ldr	r3, [pc, #24]	; (4f00 <usb_hid_register_device+0x28>)
	dev_data->common.dev = dev;
    4ee8:	6120      	str	r0, [r4, #16]
    4eea:	6859      	ldr	r1, [r3, #4]

	sys_slist_append(&usb_hid_devlist, &dev_data->common.node);
    4eec:	f104 0214 	add.w	r2, r4, #20
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    4ef0:	b911      	cbnz	r1, 4ef8 <usb_hid_register_device+0x20>
	list->head = node;
    4ef2:	e9c3 2200 	strd	r2, r2, [r3]

	LOG_DBG("Added dev_data %p dev %p to devlist %p", dev_data, dev,
		&usb_hid_devlist);
}
    4ef6:	bd10      	pop	{r4, pc}
	parent->next = child;
    4ef8:	600a      	str	r2, [r1, #0]
	list->tail = node;
    4efa:	605a      	str	r2, [r3, #4]
    4efc:	e7fb      	b.n	4ef6 <usb_hid_register_device+0x1e>
    4efe:	bf00      	nop
    4f00:	20000eec 	.word	0x20000eec

00004f04 <hid_int_ep_write>:

int hid_int_ep_write(const struct device *dev, const uint8_t *data, uint32_t data_len,
		     uint32_t *bytes_ret)
{
    4f04:	b530      	push	{r4, r5, lr}
	const struct usb_cfg_data *cfg = dev->config;
    4f06:	6844      	ldr	r4, [r0, #4]
	struct hid_device_info *hid_dev_data = dev->data;
    4f08:	6900      	ldr	r0, [r0, #16]

	if (hid_dev_data->configured && !hid_dev_data->suspended) {
    4f0a:	7b05      	ldrb	r5, [r0, #12]
{
    4f0c:	b087      	sub	sp, #28
	if (hid_dev_data->configured && !hid_dev_data->suspended) {
    4f0e:	b145      	cbz	r5, 4f22 <hid_int_ep_write+0x1e>
    4f10:	7b40      	ldrb	r0, [r0, #13]
    4f12:	b930      	cbnz	r0, 4f22 <hid_int_ep_write+0x1e>
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
    4f14:	6a20      	ldr	r0, [r4, #32]
    4f16:	7900      	ldrb	r0, [r0, #4]
	} else {
		LOG_WRN("Device is not configured");
		return -EAGAIN;
	}

}
    4f18:	b007      	add	sp, #28
    4f1a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
    4f1e:	f008 bab7 	b.w	d490 <usb_write>
		LOG_WRN("Device is not configured");
    4f22:	4b07      	ldr	r3, [pc, #28]	; (4f40 <hid_int_ep_write+0x3c>)
    4f24:	9305      	str	r3, [sp, #20]
    4f26:	4807      	ldr	r0, [pc, #28]	; (4f44 <hid_int_ep_write+0x40>)
    4f28:	2302      	movs	r3, #2
    4f2a:	aa04      	add	r2, sp, #16
    4f2c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    4f30:	9304      	str	r3, [sp, #16]
    4f32:	f008 fb68 	bl	d606 <z_log_msg_static_create.constprop.0>
}
    4f36:	f06f 000a 	mvn.w	r0, #10
    4f3a:	b007      	add	sp, #28
    4f3c:	bd30      	pop	{r4, r5, pc}
    4f3e:	bf00      	nop
    4f40:	0000f9bc 	.word	0x0000f9bc
    4f44:	0000e940 	.word	0x0000e940

00004f48 <endpoint_ctx>:

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    4f48:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    4f4a:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
    4f4e:	d512      	bpl.n	4f76 <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    4f50:	2b08      	cmp	r3, #8
    4f52:	d105      	bne.n	4f60 <endpoint_ctx+0x18>

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4f54:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    4f56:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4f5a:	d506      	bpl.n	4f6a <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    4f5c:	480e      	ldr	r0, [pc, #56]	; (4f98 <endpoint_ctx+0x50>)
    4f5e:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
    4f60:	f010 0f78 	tst.w	r0, #120	; 0x78
    4f64:	d112      	bne.n	4f8c <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
    4f66:	f000 030f 	and.w	r3, r0, #15
		} else {
			return &ctx->ep_ctx[ep_num];
    4f6a:	204c      	movs	r0, #76	; 0x4c
    4f6c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    4f70:	4b0a      	ldr	r3, [pc, #40]	; (4f9c <endpoint_ctx+0x54>)
    4f72:	4418      	add	r0, r3
    4f74:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    4f76:	2b08      	cmp	r3, #8
    4f78:	d105      	bne.n	4f86 <endpoint_ctx+0x3e>
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4f7a:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    4f7c:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    4f80:	d506      	bpl.n	4f90 <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    4f82:	4807      	ldr	r0, [pc, #28]	; (4fa0 <endpoint_ctx+0x58>)
    4f84:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
    4f86:	f010 0f78 	tst.w	r0, #120	; 0x78
    4f8a:	d0f6      	beq.n	4f7a <endpoint_ctx+0x32>
		return NULL;
    4f8c:	2000      	movs	r0, #0
					    ep_num];
		}
	}

	return NULL;
}
    4f8e:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    4f90:	4804      	ldr	r0, [pc, #16]	; (4fa4 <endpoint_ctx+0x5c>)
    4f92:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    4f96:	4770      	bx	lr
    4f98:	20001040 	.word	0x20001040
    4f9c:	20000ef4 	.word	0x20000ef4
    4fa0:	20001160 	.word	0x20001160
    4fa4:	20001060 	.word	0x20001060

00004fa8 <usbd_work_schedule>:
 *
 * Should be called after usbd_evt_put().
 */
static inline void usbd_work_schedule(void)
{
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    4fa8:	4901      	ldr	r1, [pc, #4]	; (4fb0 <usbd_work_schedule+0x8>)
    4faa:	4802      	ldr	r0, [pc, #8]	; (4fb4 <usbd_work_schedule+0xc>)
    4fac:	f009 b96f 	b.w	e28e <k_work_submit_to_queue>
    4fb0:	20000f1c 	.word	0x20000f1c
    4fb4:	20000948 	.word	0x20000948

00004fb8 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    4fb8:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    4fba:	4801      	ldr	r0, [pc, #4]	; (4fc0 <usbd_evt_put+0x8>)
    4fbc:	f009 b902 	b.w	e1c4 <k_queue_append>
    4fc0:	200003cc 	.word	0x200003cc

00004fc4 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    4fc4:	4802      	ldr	r0, [pc, #8]	; (4fd0 <usbd_evt_get+0xc>)
    4fc6:	2200      	movs	r2, #0
    4fc8:	2300      	movs	r3, #0
    4fca:	f006 bb83 	b.w	b6d4 <z_impl_k_queue_get>
    4fce:	bf00      	nop
    4fd0:	200003cc 	.word	0x200003cc

00004fd4 <usbd_evt_flush>:

/**
 * @brief Drop all enqueued events.
 */
static inline void usbd_evt_flush(void)
{
    4fd4:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4fd6:	4c05      	ldr	r4, [pc, #20]	; (4fec <usbd_evt_flush+0x18>)
	struct usbd_event *ev;

	do {
		ev = usbd_evt_get();
    4fd8:	f7ff fff4 	bl	4fc4 <usbd_evt_get>
		if (ev) {
    4fdc:	b120      	cbz	r0, 4fe8 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4fde:	1d01      	adds	r1, r0, #4
    4fe0:	4620      	mov	r0, r4
    4fe2:	f009 f82d 	bl	e040 <k_mem_slab_free>
			usbd_evt_free(ev);
		}
	} while (ev != NULL);
    4fe6:	e7f7      	b.n	4fd8 <usbd_evt_flush+0x4>
}
    4fe8:	bd10      	pop	{r4, pc}
    4fea:	bf00      	nop
    4fec:	20000368 	.word	0x20000368

00004ff0 <usbd_evt_alloc>:
 * This function should be called prior to usbd_evt_put().
 *
 * @returns Pointer to the allocated event or NULL if there was no space left.
 */
static inline struct usbd_event *usbd_evt_alloc(void)
{
    4ff0:	b510      	push	{r4, lr}
    4ff2:	b088      	sub	sp, #32
	struct usbd_event *ev;
	struct usbd_mem_block block;

	if (k_mem_slab_alloc(&fifo_elem_slab,
    4ff4:	4818      	ldr	r0, [pc, #96]	; (5058 <usbd_evt_alloc+0x68>)
    4ff6:	2200      	movs	r2, #0
    4ff8:	2300      	movs	r3, #0
    4ffa:	a901      	add	r1, sp, #4
    4ffc:	f006 f9b0 	bl	b360 <k_mem_slab_alloc>
    5000:	b330      	cbz	r0, 5050 <usbd_evt_alloc+0x60>
			     (void **)&block.data, K_NO_WAIT)) {
		LOG_ERR("USBD event allocation failed!");
    5002:	4b16      	ldr	r3, [pc, #88]	; (505c <usbd_evt_alloc+0x6c>)
    5004:	4816      	ldr	r0, [pc, #88]	; (5060 <usbd_evt_alloc+0x70>)
    5006:	9307      	str	r3, [sp, #28]
    5008:	aa06      	add	r2, sp, #24
    500a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    500e:	2402      	movs	r4, #2
    5010:	9406      	str	r4, [sp, #24]
    5012:	f008 fb18 	bl	d646 <z_log_msg_static_create.constprop.0>
		 * Allocation may fail if workqueue thread is starved or event
		 * queue size is too small (CONFIG_USB_NRFX_EVT_QUEUE_SIZE).
		 * Wipe all events, free the space and schedule
		 * reinitialization.
		 */
		usbd_evt_flush();
    5016:	f7ff ffdd 	bl	4fd4 <usbd_evt_flush>

		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    501a:	480f      	ldr	r0, [pc, #60]	; (5058 <usbd_evt_alloc+0x68>)
    501c:	2200      	movs	r2, #0
    501e:	2300      	movs	r3, #0
    5020:	a901      	add	r1, sp, #4
    5022:	f006 f99d 	bl	b360 <k_mem_slab_alloc>
    5026:	b150      	cbz	r0, 503e <usbd_evt_alloc+0x4e>
			LOG_ERR("USBD event memory corrupted");
    5028:	4b0e      	ldr	r3, [pc, #56]	; (5064 <usbd_evt_alloc+0x74>)
    502a:	480d      	ldr	r0, [pc, #52]	; (5060 <usbd_evt_alloc+0x70>)
    502c:	aa06      	add	r2, sp, #24
    502e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5032:	e9cd 4306 	strd	r4, r3, [sp, #24]
    5036:	f008 fb06 	bl	d646 <z_log_msg_static_create.constprop.0>
			__ASSERT_NO_MSG(0);
			return NULL;
    503a:	2000      	movs	r0, #0
    503c:	e00a      	b.n	5054 <usbd_evt_alloc+0x64>
		}

		ev = (struct usbd_event *)block.data;
    503e:	9801      	ldr	r0, [sp, #4]
		ev->block = block;
		ev->evt_type = USBD_EVT_REINIT;
    5040:	2304      	movs	r3, #4
		ev->block = block;
    5042:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    5044:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    5046:	f7ff ffb7 	bl	4fb8 <usbd_evt_put>
		usbd_work_schedule();
    504a:	f7ff ffad 	bl	4fa8 <usbd_work_schedule>

		return NULL;
    504e:	e7f4      	b.n	503a <usbd_evt_alloc+0x4a>
	}

	ev = (struct usbd_event *)block.data;
    5050:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    5052:	6040      	str	r0, [r0, #4]

	return ev;
}
    5054:	b008      	add	sp, #32
    5056:	bd10      	pop	{r4, pc}
    5058:	20000368 	.word	0x20000368
    505c:	0000f9dd 	.word	0x0000f9dd
    5060:	0000e948 	.word	0x0000e948
    5064:	0000f9fb 	.word	0x0000f9fb

00005068 <usb_dc_power_event_handler>:

static K_TIMER_DEFINE(delay_timer, attached_evt_delay_handler, NULL);
#endif

static void usb_dc_power_event_handler(nrfx_power_usb_evt_t event)
{
    5068:	b598      	push	{r3, r4, r7, lr}
    506a:	2802      	cmp	r0, #2
    506c:	af00      	add	r7, sp, #0
    506e:	d811      	bhi.n	5094 <usb_dc_power_event_handler+0x2c>
    5070:	4b10      	ldr	r3, [pc, #64]	; (50b4 <usb_dc_power_event_handler+0x4c>)
    5072:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    5074:	f7ff ffbc 	bl	4ff0 <usbd_evt_alloc>
	if (!ev) {
    5078:	b150      	cbz	r0, 5090 <usb_dc_power_event_handler+0x28>
	ev->evt_type = USBD_EVT_POWER;
    507a:	2200      	movs	r2, #0
    507c:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    507e:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    5080:	f7ff ff9a 	bl	4fb8 <usbd_evt_put>
	if (usbd_ctx.attached) {
    5084:	4b0c      	ldr	r3, [pc, #48]	; (50b8 <usb_dc_power_event_handler+0x50>)
    5086:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    508a:	b10b      	cbz	r3, 5090 <usb_dc_power_event_handler+0x28>
		usbd_work_schedule();
    508c:	f7ff ff8c 	bl	4fa8 <usbd_work_schedule>
		LOG_ERR("Unknown USB power event %d", event);
		return;
	}

	submit_dc_power_event(new_state);
}
    5090:	46bd      	mov	sp, r7
    5092:	bd98      	pop	{r3, r4, r7, pc}
		LOG_ERR("Unknown USB power event %d", event);
    5094:	466c      	mov	r4, sp
    5096:	b088      	sub	sp, #32
    5098:	466a      	mov	r2, sp
    509a:	4b08      	ldr	r3, [pc, #32]	; (50bc <usb_dc_power_event_handler+0x54>)
	switch (event) {
    509c:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Unknown USB power event %d", event);
    50a0:	2303      	movs	r3, #3
    50a2:	f842 3f10 	str.w	r3, [r2, #16]!
    50a6:	4806      	ldr	r0, [pc, #24]	; (50c0 <usb_dc_power_event_handler+0x58>)
    50a8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    50ac:	f008 facb 	bl	d646 <z_log_msg_static_create.constprop.0>
    50b0:	46a5      	mov	sp, r4
    50b2:	e7ed      	b.n	5090 <usb_dc_power_event_handler+0x28>
    50b4:	0000fbed 	.word	0x0000fbed
    50b8:	20000ef4 	.word	0x20000ef4
    50bc:	0000fa17 	.word	0x0000fa17
    50c0:	0000e948 	.word	0x0000e948

000050c4 <usbd_event_transfer_data>:
		}
	}
}

static void usbd_event_transfer_data(nrfx_usbd_evt_t const *const p_event)
{
    50c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct nrf_usbd_ep_ctx *ep_ctx =
		endpoint_ctx(p_event->data.eptransfer.ep);
    50c8:	f890 8002 	ldrb.w	r8, [r0, #2]
{
    50cc:	4606      	mov	r6, r0
    50ce:	af00      	add	r7, sp, #0
		endpoint_ctx(p_event->data.eptransfer.ep);
    50d0:	4640      	mov	r0, r8
    50d2:	f7ff ff39 	bl	4f48 <endpoint_ctx>

	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    50d6:	f018 0f80 	tst.w	r8, #128	; 0x80
		switch (p_event->data.eptransfer.status) {
    50da:	78f4      	ldrb	r4, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    50dc:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    50de:	d025      	beq.n	512c <usbd_event_transfer_data+0x68>
		switch (p_event->data.eptransfer.status) {
    50e0:	b19c      	cbz	r4, 510a <usbd_event_transfer_data+0x46>
    50e2:	2c03      	cmp	r4, #3
    50e4:	d01f      	beq.n	5126 <usbd_event_transfer_data+0x62>
			usbd_work_schedule();
		}
		break;

		default: {
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    50e6:	466d      	mov	r5, sp
    50e8:	b088      	sub	sp, #32
    50ea:	466a      	mov	r2, sp
    50ec:	4b2a      	ldr	r3, [pc, #168]	; (5198 <usbd_event_transfer_data+0xd4>)
    50ee:	f8c2 801c 	str.w	r8, [r2, #28]
    50f2:	e9c2 3405 	strd	r3, r4, [r2, #20]
    50f6:	2304      	movs	r3, #4
    50f8:	f842 3f10 	str.w	r3, [r2, #16]!
    50fc:	4827      	ldr	r0, [pc, #156]	; (519c <usbd_event_transfer_data+0xd8>)
    50fe:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    5102:	f008 faa0 	bl	d646 <z_log_msg_static_create.constprop.0>
    5106:	46ad      	mov	sp, r5
    5108:	e00d      	b.n	5126 <usbd_event_transfer_data+0x62>
			struct usbd_event *ev = usbd_evt_alloc();
    510a:	f7ff ff71 	bl	4ff0 <usbd_evt_alloc>
			if (!ev) {
    510e:	4603      	mov	r3, r0
    5110:	b148      	cbz	r0, 5126 <usbd_event_transfer_data+0x62>
			ev->evt_type = USBD_EVT_EP;
    5112:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    5114:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    5116:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    5118:	2203      	movs	r2, #3
    511a:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    511c:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
    511e:	f7ff ff4b 	bl	4fb8 <usbd_evt_put>
			usbd_work_schedule();
    5122:	f7ff ff41 	bl	4fa8 <usbd_work_schedule>
				p_event->data.eptransfer.ep);
		}
		break;
		}
	}
}
    5126:	46bd      	mov	sp, r7
    5128:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (p_event->data.eptransfer.status) {
    512c:	b154      	cbz	r4, 5144 <usbd_event_transfer_data+0x80>
    512e:	2c01      	cmp	r4, #1
    5130:	d1d9      	bne.n	50e6 <usbd_event_transfer_data+0x22>
			struct usbd_event *ev = usbd_evt_alloc();
    5132:	f7ff ff5d 	bl	4ff0 <usbd_evt_alloc>
			if (!ev) {
    5136:	4603      	mov	r3, r0
    5138:	2800      	cmp	r0, #0
    513a:	d0f4      	beq.n	5126 <usbd_event_transfer_data+0x62>
			ep_ctx->read_pending = true;
    513c:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    513e:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    5140:	7304      	strb	r4, [r0, #12]
    5142:	e7eb      	b.n	511c <usbd_event_transfer_data+0x58>
			struct usbd_event *ev = usbd_evt_alloc();
    5144:	f7ff ff54 	bl	4ff0 <usbd_evt_alloc>
			if (!ev) {
    5148:	2800      	cmp	r0, #0
    514a:	d0ec      	beq.n	5126 <usbd_event_transfer_data+0x62>
				p_event->data.eptransfer.ep);
    514c:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    514e:	4b14      	ldr	r3, [pc, #80]	; (51a0 <usbd_event_transfer_data+0xdc>)
    5150:	f012 0f80 	tst.w	r2, #128	; 0x80
    5154:	f002 0108 	and.w	r1, r2, #8
    5158:	d011      	beq.n	517e <usbd_event_transfer_data+0xba>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    515a:	b141      	cbz	r1, 516e <usbd_event_transfer_data+0xaa>
        {
            ret = p_reg->ISOIN.AMOUNT;
    515c:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    5160:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    5162:	2301      	movs	r3, #1
    5164:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    5166:	2302      	movs	r3, #2
    5168:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    516a:	6085      	str	r5, [r0, #8]
    516c:	e7d7      	b.n	511e <usbd_event_transfer_data+0x5a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    516e:	f002 020f 	and.w	r2, r2, #15
    5172:	2114      	movs	r1, #20
    5174:	fb01 3302 	mla	r3, r1, r2, r3
    5178:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    517c:	e7f0      	b.n	5160 <usbd_event_transfer_data+0x9c>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    517e:	b111      	cbz	r1, 5186 <usbd_event_transfer_data+0xc2>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    5180:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    5184:	e7ec      	b.n	5160 <usbd_event_transfer_data+0x9c>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    5186:	f002 020f 	and.w	r2, r2, #15
    518a:	2114      	movs	r1, #20
    518c:	fb01 3302 	mla	r3, r1, r2, r3
    5190:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    5194:	e7e4      	b.n	5160 <usbd_event_transfer_data+0x9c>
    5196:	bf00      	nop
    5198:	0000fa32 	.word	0x0000fa32
    519c:	0000e948 	.word	0x0000e948
    51a0:	40027000 	.word	0x40027000

000051a4 <usb_init>:
	}
	return 0;
}

static int usb_init(void)
{
    51a4:	b513      	push	{r0, r1, r4, lr}

	static const nrfx_power_usbevt_config_t usbevt_config = {
		.handler = usb_dc_power_event_handler
	};

	err = nrfx_usbd_init(usbd_event_handler);
    51a6:	4812      	ldr	r0, [pc, #72]	; (51f0 <usb_init+0x4c>)
    51a8:	f005 f9f4 	bl	a594 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    51ac:	4b11      	ldr	r3, [pc, #68]	; (51f4 <usb_init+0x50>)
    51ae:	4298      	cmp	r0, r3
    51b0:	d11a      	bne.n	51e8 <usb_init+0x44>
	}

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    51b2:	4811      	ldr	r0, [pc, #68]	; (51f8 <usb_init+0x54>)
    51b4:	f004 fb7c 	bl	98b0 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    51b8:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    51ba:	4810      	ldr	r0, [pc, #64]	; (51fc <usb_init+0x58>)
    51bc:	f004 fba2 	bl	9904 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    51c0:	490f      	ldr	r1, [pc, #60]	; (5200 <usb_init+0x5c>)
    51c2:	4810      	ldr	r0, [pc, #64]	; (5204 <usb_init+0x60>)
    51c4:	9400      	str	r4, [sp, #0]
    51c6:	f04f 33ff 	mov.w	r3, #4294967295
    51ca:	f44f 6280 	mov.w	r2, #1024	; 0x400
    51ce:	f006 fc31 	bl	ba34 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    51d2:	490d      	ldr	r1, [pc, #52]	; (5208 <usb_init+0x64>)
    51d4:	480b      	ldr	r0, [pc, #44]	; (5204 <usb_init+0x60>)
    51d6:	f008 ff62 	bl	e09e <z_impl_k_thread_name_set>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_thread_name_set(&usbd_work_queue.thread, "usbd_workq");
	k_work_init(&ctx->usb_work, usbd_work_handler);
    51da:	480c      	ldr	r0, [pc, #48]	; (520c <usb_init+0x68>)
    51dc:	490c      	ldr	r1, [pc, #48]	; (5210 <usb_init+0x6c>)
    51de:	f009 f839 	bl	e254 <k_work_init>

	return 0;
    51e2:	4620      	mov	r0, r4
}
    51e4:	b002      	add	sp, #8
    51e6:	bd10      	pop	{r4, pc}
		return -EIO;
    51e8:	f06f 0004 	mvn.w	r0, #4
    51ec:	e7fa      	b.n	51e4 <usb_init+0x40>
    51ee:	bf00      	nop
    51f0:	00005255 	.word	0x00005255
    51f4:	0bad0000 	.word	0x0bad0000
    51f8:	0000fbf0 	.word	0x0000fbf0
    51fc:	0000ea7c 	.word	0x0000ea7c
    5200:	20002740 	.word	0x20002740
    5204:	20000948 	.word	0x20000948
    5208:	0000fa5e 	.word	0x0000fa5e
    520c:	20000f1c 	.word	0x20000f1c
    5210:	0000542d 	.word	0x0000542d

00005214 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    5214:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5216:	490e      	ldr	r1, [pc, #56]	; (5250 <hfxo_stop.constprop.0.isra.0+0x3c>)
    5218:	f3bf 8f5b 	dmb	ish
    521c:	2300      	movs	r3, #0
    521e:	e851 2f00 	ldrex	r2, [r1]
    5222:	2a01      	cmp	r2, #1
    5224:	d103      	bne.n	522e <hfxo_stop.constprop.0.isra.0+0x1a>
    5226:	e841 3000 	strex	r0, r3, [r1]
    522a:	2800      	cmp	r0, #0
    522c:	d1f7      	bne.n	521e <hfxo_stop.constprop.0.isra.0+0xa>
    522e:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    5232:	d10c      	bne.n	524e <hfxo_stop.constprop.0.isra.0+0x3a>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    5234:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    5238:	3914      	subs	r1, #20
    523a:	4620      	mov	r0, r4
    523c:	f007 fd81 	bl	cd42 <onoff_cancel>

	if (rv == -EALREADY) {
    5240:	3078      	adds	r0, #120	; 0x78
    5242:	d104      	bne.n	524e <hfxo_stop.constprop.0.isra.0+0x3a>
		rv = onoff_release(mgr);
    5244:	4620      	mov	r0, r4
}
    5246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    524a:	f007 bd55 	b.w	ccf8 <onoff_release>
    524e:	bd10      	pop	{r4, pc}
    5250:	20000f14 	.word	0x20000f14

00005254 <usbd_event_handler>:
{
    5254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5258:	b088      	sub	sp, #32
    525a:	4606      	mov	r6, r0
    525c:	af00      	add	r7, sp, #0
	struct usbd_event evt = {0};
    525e:	2214      	movs	r2, #20
    5260:	2100      	movs	r1, #0
    5262:	f107 000c 	add.w	r0, r7, #12
    5266:	f008 f99e 	bl	d5a6 <memset>
	switch (p_event->type) {
    526a:	7833      	ldrb	r3, [r6, #0]
    526c:	3b01      	subs	r3, #1
    526e:	2b05      	cmp	r3, #5
    5270:	d821      	bhi.n	52b6 <usbd_event_handler+0x62>
    5272:	e8df f003 	tbb	[pc, r3]
    5276:	039b      	.short	0x039b
    5278:	158d1313 	.word	0x158d1313
    527c:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    527e:	753b      	strb	r3, [r7, #20]
		evt.evt_type = USBD_EVT_POWER;
    5280:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
    5282:	f7ff feb5 	bl	4ff0 <usbd_evt_alloc>
		if (!ev) {
    5286:	4603      	mov	r3, r0
    5288:	b1a8      	cbz	r0, 52b6 <usbd_event_handler+0x62>
		ev->evt_type = evt.evt_type;
    528a:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    528c:	f100 0208 	add.w	r2, r0, #8
    5290:	e9d7 0105 	ldrd	r0, r1, [r7, #20]
    5294:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    5298:	4618      	mov	r0, r3
    529a:	e034      	b.n	5306 <usbd_event_handler+0xb2>
	switch (p_event->type) {
    529c:	2304      	movs	r3, #4
    529e:	e7ee      	b.n	527e <usbd_event_handler+0x2a>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    52a0:	f896 8002 	ldrb.w	r8, [r6, #2]
    52a4:	4640      	mov	r0, r8
    52a6:	f7ff fe4f 	bl	4f48 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    52aa:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    52ac:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
    52ae:	b133      	cbz	r3, 52be <usbd_event_handler+0x6a>
    52b0:	3b01      	subs	r3, #1
    52b2:	2b02      	cmp	r3, #2
    52b4:	d968      	bls.n	5388 <usbd_event_handler+0x134>
}
    52b6:	3720      	adds	r7, #32
    52b8:	46bd      	mov	sp, r7
    52ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    52be:	f018 0f80 	tst.w	r8, #128	; 0x80
		switch (p_event->data.eptransfer.status) {
    52c2:	78f4      	ldrb	r4, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    52c4:	d024      	beq.n	5310 <usbd_event_handler+0xbc>
		switch (p_event->data.eptransfer.status) {
    52c6:	b19c      	cbz	r4, 52f0 <usbd_event_handler+0x9c>
    52c8:	2c03      	cmp	r4, #3
    52ca:	d0f4      	beq.n	52b6 <usbd_event_handler+0x62>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    52cc:	466d      	mov	r5, sp
    52ce:	b088      	sub	sp, #32
    52d0:	466a      	mov	r2, sp
    52d2:	4b37      	ldr	r3, [pc, #220]	; (53b0 <usbd_event_handler+0x15c>)
    52d4:	f8c2 801c 	str.w	r8, [r2, #28]
    52d8:	e9c2 3405 	strd	r3, r4, [r2, #20]
    52dc:	2304      	movs	r3, #4
    52de:	f842 3f10 	str.w	r3, [r2, #16]!
    52e2:	4834      	ldr	r0, [pc, #208]	; (53b4 <usbd_event_handler+0x160>)
    52e4:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    52e8:	f008 f9ad 	bl	d646 <z_log_msg_static_create.constprop.0>
    52ec:	46ad      	mov	sp, r5
    52ee:	e7e2      	b.n	52b6 <usbd_event_handler+0x62>
			struct usbd_event *ev = usbd_evt_alloc();
    52f0:	f7ff fe7e 	bl	4ff0 <usbd_evt_alloc>
			if (!ev) {
    52f4:	4603      	mov	r3, r0
    52f6:	2800      	cmp	r0, #0
    52f8:	d0dd      	beq.n	52b6 <usbd_event_handler+0x62>
			ev->evt_type = USBD_EVT_EP;
    52fa:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    52fc:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    52fe:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    5300:	2203      	movs	r2, #3
    5302:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    5304:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
    5306:	f7ff fe57 	bl	4fb8 <usbd_evt_put>
		usbd_work_schedule();
    530a:	f7ff fe4d 	bl	4fa8 <usbd_work_schedule>
    530e:	e7d2      	b.n	52b6 <usbd_event_handler+0x62>
		switch (p_event->data.eptransfer.status) {
    5310:	b154      	cbz	r4, 5328 <usbd_event_handler+0xd4>
    5312:	2c01      	cmp	r4, #1
    5314:	d1da      	bne.n	52cc <usbd_event_handler+0x78>
			struct usbd_event *ev = usbd_evt_alloc();
    5316:	f7ff fe6b 	bl	4ff0 <usbd_evt_alloc>
			if (!ev) {
    531a:	4603      	mov	r3, r0
    531c:	2800      	cmp	r0, #0
    531e:	d0ca      	beq.n	52b6 <usbd_event_handler+0x62>
			ep_ctx->read_pending = true;
    5320:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    5322:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    5324:	7304      	strb	r4, [r0, #12]
    5326:	e7ed      	b.n	5304 <usbd_event_handler+0xb0>
			struct usbd_event *ev = usbd_evt_alloc();
    5328:	f7ff fe62 	bl	4ff0 <usbd_evt_alloc>
			if (!ev) {
    532c:	4604      	mov	r4, r0
    532e:	2800      	cmp	r0, #0
    5330:	d0c1      	beq.n	52b6 <usbd_event_handler+0x62>
			ev->evt_type = USBD_EVT_EP;
    5332:	2301      	movs	r3, #1
    5334:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    5336:	2302      	movs	r3, #2
    5338:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    533a:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    533c:	78b0      	ldrb	r0, [r6, #2]
    533e:	f105 010c 	add.w	r1, r5, #12
    5342:	f008 fdd4 	bl	deee <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    5346:	b170      	cbz	r0, 5366 <usbd_event_handler+0x112>
				LOG_ERR("_ep_status_get failed! Code: %d",
    5348:	466e      	mov	r6, sp
    534a:	b088      	sub	sp, #32
    534c:	466a      	mov	r2, sp
    534e:	4b1a      	ldr	r3, [pc, #104]	; (53b8 <usbd_event_handler+0x164>)
    5350:	e9c2 3005 	strd	r3, r0, [r2, #20]
    5354:	2303      	movs	r3, #3
    5356:	f842 3f10 	str.w	r3, [r2, #16]!
    535a:	4816      	ldr	r0, [pc, #88]	; (53b4 <usbd_event_handler+0x160>)
    535c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5360:	f008 f971 	bl	d646 <z_log_msg_static_create.constprop.0>
    5364:	46b5      	mov	sp, r6
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    5366:	4a15      	ldr	r2, [pc, #84]	; (53bc <usbd_event_handler+0x168>)
    5368:	68e9      	ldr	r1, [r5, #12]
    536a:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    536e:	428b      	cmp	r3, r1
    5370:	d906      	bls.n	5380 <usbd_event_handler+0x12c>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    5372:	1a5b      	subs	r3, r3, r1
    5374:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    5378:	f005 fb40 	bl	a9fc <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    537c:	4620      	mov	r0, r4
    537e:	e7c2      	b.n	5306 <usbd_event_handler+0xb2>
				ctx->ctrl_read_len = 0U;
    5380:	2300      	movs	r3, #0
    5382:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
    5386:	e7f9      	b.n	537c <usbd_event_handler+0x128>
			usbd_event_transfer_data(p_event);
    5388:	4630      	mov	r0, r6
    538a:	f7ff fe9b 	bl	50c4 <usbd_event_transfer_data>
	if (put_evt) {
    538e:	e792      	b.n	52b6 <usbd_event_handler+0x62>
		nrfx_usbd_setup_get(&drv_setup);
    5390:	1d38      	adds	r0, r7, #4
    5392:	f005 fb0d 	bl	a9b0 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    5396:	797b      	ldrb	r3, [r7, #5]
    5398:	2b05      	cmp	r3, #5
    539a:	d103      	bne.n	53a4 <usbd_event_handler+0x150>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    539c:	793b      	ldrb	r3, [r7, #4]
    539e:	f013 0f60 	tst.w	r3, #96	; 0x60
    53a2:	d088      	beq.n	52b6 <usbd_event_handler+0x62>
			evt.evt.ep_evt.ep = ep_ctx;
    53a4:	4b06      	ldr	r3, [pc, #24]	; (53c0 <usbd_event_handler+0x16c>)
    53a6:	617b      	str	r3, [r7, #20]
			evt.evt_type = USBD_EVT_EP;
    53a8:	2401      	movs	r4, #1
    53aa:	e76a      	b.n	5282 <usbd_event_handler+0x2e>
	switch (p_event->type) {
    53ac:	2402      	movs	r4, #2
    53ae:	e768      	b.n	5282 <usbd_event_handler+0x2e>
    53b0:	0000fa32 	.word	0x0000fa32
    53b4:	0000e948 	.word	0x0000e948
    53b8:	0000fa69 	.word	0x0000fa69
    53bc:	20000ef4 	.word	0x20000ef4
    53c0:	20001060 	.word	0x20001060

000053c4 <eps_ctx_init>:
{
    53c4:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    53c6:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    53c8:	f064 007f 	orn	r0, r4, #127	; 0x7f
    53cc:	b2c0      	uxtb	r0, r0
    53ce:	f7ff fdbb 	bl	4f48 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    53d2:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    53d4:	f008 f924 	bl	d620 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    53d8:	2c08      	cmp	r4, #8
    53da:	d1f5      	bne.n	53c8 <eps_ctx_init+0x4>
    53dc:	4d0e      	ldr	r5, [pc, #56]	; (5418 <eps_ctx_init+0x54>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    53de:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    53e0:	b2e0      	uxtb	r0, r4
    53e2:	f7ff fdb1 	bl	4f48 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    53e6:	6903      	ldr	r3, [r0, #16]
    53e8:	b903      	cbnz	r3, 53ec <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    53ea:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    53ec:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    53ee:	f008 f917 	bl	d620 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    53f2:	2c08      	cmp	r4, #8
    53f4:	f105 0540 	add.w	r5, r5, #64	; 0x40
    53f8:	d1f2      	bne.n	53e0 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    53fa:	4808      	ldr	r0, [pc, #32]	; (541c <eps_ctx_init+0x58>)
    53fc:	f008 f910 	bl	d620 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    5400:	4b07      	ldr	r3, [pc, #28]	; (5420 <eps_ctx_init+0x5c>)
    5402:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
    5406:	b912      	cbnz	r2, 540e <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    5408:	4a06      	ldr	r2, [pc, #24]	; (5424 <eps_ctx_init+0x60>)
    540a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    540e:	4806      	ldr	r0, [pc, #24]	; (5428 <eps_ctx_init+0x64>)
    5410:	f008 f906 	bl	d620 <ep_ctx_reset>
}
    5414:	2000      	movs	r0, #0
    5416:	bd38      	pop	{r3, r4, r5, pc}
    5418:	20001584 	.word	0x20001584
    541c:	20001040 	.word	0x20001040
    5420:	20000ef4 	.word	0x20000ef4
    5424:	20001184 	.word	0x20001184
    5428:	20001160 	.word	0x20001160

0000542c <usbd_work_handler>:
{
    542c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->ready;
    5430:	4ca3      	ldr	r4, [pc, #652]	; (56c0 <usbd_work_handler+0x294>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5432:	f8df a290 	ldr.w	sl, [pc, #656]	; 56c4 <usbd_work_handler+0x298>
{
    5436:	b086      	sub	sp, #24
    5438:	4680      	mov	r8, r0
    543a:	af00      	add	r7, sp, #0
	while ((ev = usbd_evt_get()) != NULL) {
    543c:	f7ff fdc2 	bl	4fc4 <usbd_evt_get>
    5440:	4606      	mov	r6, r0
    5442:	b918      	cbnz	r0, 544c <usbd_work_handler+0x20>
}
    5444:	3718      	adds	r7, #24
    5446:	46bd      	mov	sp, r7
    5448:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return get_usbd_ctx()->ready;
    544c:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    5450:	7c33      	ldrb	r3, [r6, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5452:	f106 0904 	add.w	r9, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    5456:	b93a      	cbnz	r2, 5468 <usbd_work_handler+0x3c>
    5458:	2b00      	cmp	r3, #0
    545a:	f000 80af 	beq.w	55bc <usbd_work_handler+0x190>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    545e:	4899      	ldr	r0, [pc, #612]	; (56c4 <usbd_work_handler+0x298>)
    5460:	4649      	mov	r1, r9
    5462:	f008 fded 	bl	e040 <k_mem_slab_free>
}
    5466:	e7e9      	b.n	543c <usbd_work_handler+0x10>
		switch (ev->evt_type) {
    5468:	2b04      	cmp	r3, #4
    546a:	f200 8195 	bhi.w	5798 <usbd_work_handler+0x36c>
    546e:	e8df f013 	tbh	[pc, r3, lsl #1]
    5472:	00a5      	.short	0x00a5
    5474:	013b0005 	.word	0x013b0005
    5478:	01780151 	.word	0x01780151
			if (!ctx->attached) {
    547c:	f818 3c04 	ldrb.w	r3, [r8, #-4]
    5480:	b983      	cbnz	r3, 54a4 <usbd_work_handler+0x78>
				LOG_ERR("not attached, EP 0x%02x event dropped",
    5482:	68b3      	ldr	r3, [r6, #8]
    5484:	466d      	mov	r5, sp
    5486:	b088      	sub	sp, #32
    5488:	7a5b      	ldrb	r3, [r3, #9]
    548a:	466a      	mov	r2, sp
    548c:	498e      	ldr	r1, [pc, #568]	; (56c8 <usbd_work_handler+0x29c>)
    548e:	488f      	ldr	r0, [pc, #572]	; (56cc <usbd_work_handler+0x2a0>)
    5490:	e9c2 1305 	strd	r1, r3, [r2, #20]
    5494:	2303      	movs	r3, #3
    5496:	f842 3f10 	str.w	r3, [r2, #16]!
    549a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    549e:	f008 f8d2 	bl	d646 <z_log_msg_static_create.constprop.0>
    54a2:	46ad      	mov	sp, r5
	switch (ep_evt->evt_type) {
    54a4:	7b33      	ldrb	r3, [r6, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    54a6:	68b5      	ldr	r5, [r6, #8]
	switch (ep_evt->evt_type) {
    54a8:	2b03      	cmp	r3, #3
    54aa:	d839      	bhi.n	5520 <usbd_work_handler+0xf4>
    54ac:	e8df f003 	tbb	[pc, r3]
    54b0:	736e3f02 	.word	0x736e3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    54b4:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    54b6:	2208      	movs	r2, #8
    54b8:	2100      	movs	r1, #0
    54ba:	4630      	mov	r0, r6
    54bc:	f008 f873 	bl	d5a6 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    54c0:	4b83      	ldr	r3, [pc, #524]	; (56d0 <usbd_work_handler+0x2a4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    54c2:	4884      	ldr	r0, [pc, #528]	; (56d4 <usbd_work_handler+0x2a8>)
    54c4:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    54c8:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    54ca:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    54ce:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    54d0:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    54d4:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    54d8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    54dc:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    54de:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    54e2:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    54e6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    54ea:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    54ec:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    54f0:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    54f4:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    54f8:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    54fa:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    54fc:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    54fe:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    5500:	f008 f846 	bl	d590 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    5504:	682b      	ldr	r3, [r5, #0]
    5506:	7a68      	ldrb	r0, [r5, #9]
    5508:	2100      	movs	r1, #0
    550a:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    550c:	f996 3000 	ldrsb.w	r3, [r6]
    5510:	2b00      	cmp	r3, #0
    5512:	db08      	blt.n	5526 <usbd_work_handler+0xfa>
    5514:	88f3      	ldrh	r3, [r6, #6]
    5516:	b133      	cbz	r3, 5526 <usbd_work_handler+0xfa>
		ctx->ctrl_read_len = usbd_setup->wLength;
    5518:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    551c:	f005 fa6e 	bl	a9fc <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5520:	4649      	mov	r1, r9
    5522:	4650      	mov	r0, sl
    5524:	e79d      	b.n	5462 <usbd_work_handler+0x36>
		ctx->ctrl_read_len = 0U;
    5526:	2300      	movs	r3, #0
    5528:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    552c:	e7f8      	b.n	5520 <usbd_work_handler+0xf4>
	if (!ep_ctx->read_pending) {
    552e:	7f6b      	ldrb	r3, [r5, #29]
    5530:	2b00      	cmp	r3, #0
    5532:	d0f5      	beq.n	5520 <usbd_work_handler+0xf4>
	if (!ep_ctx->read_complete) {
    5534:	7f2b      	ldrb	r3, [r5, #28]
    5536:	2b00      	cmp	r3, #0
    5538:	d0f2      	beq.n	5520 <usbd_work_handler+0xf4>
	ep_ctx->read_pending = false;
    553a:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    553c:	4866      	ldr	r0, [pc, #408]	; (56d8 <usbd_work_handler+0x2ac>)
	ep_ctx->read_pending = false;
    553e:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5540:	f04f 32ff 	mov.w	r2, #4294967295
    5544:	f04f 33ff 	mov.w	r3, #4294967295
	ep_ctx->read_complete = false;
    5548:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    554a:	f008 f87f 	bl	d64c <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    554e:	696b      	ldr	r3, [r5, #20]
    5550:	603b      	str	r3, [r7, #0]
    5552:	686b      	ldr	r3, [r5, #4]
    5554:	e9c7 3601 	strd	r3, r6, [r7, #4]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    5558:	4639      	mov	r1, r7
    555a:	7a68      	ldrb	r0, [r5, #9]
    555c:	f005 f85c 	bl	a618 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    5560:	4b5e      	ldr	r3, [pc, #376]	; (56dc <usbd_work_handler+0x2b0>)
    5562:	4298      	cmp	r0, r3
    5564:	d00e      	beq.n	5584 <usbd_work_handler+0x158>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    5566:	466d      	mov	r5, sp
    5568:	b088      	sub	sp, #32
    556a:	466a      	mov	r2, sp
    556c:	4b5c      	ldr	r3, [pc, #368]	; (56e0 <usbd_work_handler+0x2b4>)
    556e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    5572:	2303      	movs	r3, #3
    5574:	f842 3f10 	str.w	r3, [r2, #16]!
    5578:	4854      	ldr	r0, [pc, #336]	; (56cc <usbd_work_handler+0x2a0>)
    557a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    557e:	f008 f862 	bl	d646 <z_log_msg_static_create.constprop.0>
    5582:	46ad      	mov	sp, r5
	k_mutex_unlock(&ctx->drv_lock);
    5584:	4854      	ldr	r0, [pc, #336]	; (56d8 <usbd_work_handler+0x2ac>)
    5586:	f008 f863 	bl	d650 <k_mutex_unlock.isra.0>
    558a:	e7c9      	b.n	5520 <usbd_work_handler+0xf4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    558c:	682b      	ldr	r3, [r5, #0]
    558e:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    5590:	7a68      	ldrb	r0, [r5, #9]
    5592:	4798      	blx	r3
		break;
    5594:	e7c4      	b.n	5520 <usbd_work_handler+0xf4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    5596:	7aab      	ldrb	r3, [r5, #10]
    5598:	b96b      	cbnz	r3, 55b6 <usbd_work_handler+0x18a>
    559a:	7feb      	ldrb	r3, [r5, #31]
    559c:	b95b      	cbnz	r3, 55b6 <usbd_work_handler+0x18a>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    559e:	484e      	ldr	r0, [pc, #312]	; (56d8 <usbd_work_handler+0x2ac>)
    55a0:	f04f 32ff 	mov.w	r2, #4294967295
    55a4:	f04f 33ff 	mov.w	r3, #4294967295
    55a8:	f008 f850 	bl	d64c <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    55ac:	f005 fa5a 	bl	aa64 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    55b0:	4849      	ldr	r0, [pc, #292]	; (56d8 <usbd_work_handler+0x2ac>)
    55b2:	f008 f84d 	bl	d650 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    55b6:	682b      	ldr	r3, [r5, #0]
    55b8:	2102      	movs	r1, #2
    55ba:	e7e9      	b.n	5590 <usbd_work_handler+0x164>
	switch (pwr_evt->state) {
    55bc:	7a33      	ldrb	r3, [r6, #8]
    55be:	2b04      	cmp	r3, #4
    55c0:	d8ae      	bhi.n	5520 <usbd_work_handler+0xf4>
    55c2:	e8df f003 	tbb	[pc, r3]
    55c6:	0359      	.short	0x0359
    55c8:	6723      	.short	0x6723
    55ca:	73          	.byte	0x73
    55cb:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    55cc:	f004 ffac 	bl	a528 <nrfx_usbd_is_enabled>
    55d0:	4605      	mov	r5, r0
    55d2:	2800      	cmp	r0, #0
    55d4:	d1a4      	bne.n	5520 <usbd_work_handler+0xf4>
			nrfx_usbd_enable();
    55d6:	f004 ff39 	bl	a44c <nrfx_usbd_enable>
    55da:	f3bf 8f5b 	dmb	ish
    55de:	4941      	ldr	r1, [pc, #260]	; (56e4 <usbd_work_handler+0x2b8>)
    55e0:	2301      	movs	r3, #1
    55e2:	e851 2f00 	ldrex	r2, [r1]
    55e6:	2a00      	cmp	r2, #0
    55e8:	d103      	bne.n	55f2 <usbd_work_handler+0x1c6>
    55ea:	e841 3000 	strex	r0, r3, [r1]
    55ee:	2800      	cmp	r0, #0
    55f0:	d1f7      	bne.n	55e2 <usbd_work_handler+0x1b6>
    55f2:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    55f6:	d193      	bne.n	5520 <usbd_work_handler+0xf4>
	*notify = (struct sys_notify){
    55f8:	f841 5c08 	str.w	r5, [r1, #-8]
    55fc:	f841 5c10 	str.w	r5, [r1, #-16]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    5600:	69e0      	ldr	r0, [r4, #28]
    5602:	6163      	str	r3, [r4, #20]
    5604:	3914      	subs	r1, #20
    5606:	f007 fb1f 	bl	cc48 <onoff_request>
    560a:	e789      	b.n	5520 <usbd_work_handler+0xf4>
	switch (pwr_evt->state) {
    560c:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    560e:	f065 007f 	orn	r0, r5, #127	; 0x7f
    5612:	b2c0      	uxtb	r0, r0
    5614:	f7ff fc98 	bl	4f48 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    5618:	7a03      	ldrb	r3, [r0, #8]
    561a:	b113      	cbz	r3, 5622 <usbd_work_handler+0x1f6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    561c:	7a40      	ldrb	r0, [r0, #9]
    561e:	f005 fbd3 	bl	adc8 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    5622:	3501      	adds	r5, #1
    5624:	2d08      	cmp	r5, #8
    5626:	d1f2      	bne.n	560e <usbd_work_handler+0x1e2>
		if (ep_ctx->cfg.en) {
    5628:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    562c:	b11b      	cbz	r3, 5636 <usbd_work_handler+0x20a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    562e:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    5632:	f005 fbc9 	bl	adc8 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    5636:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    5638:	b2e8      	uxtb	r0, r5
    563a:	f7ff fc85 	bl	4f48 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    563e:	7a03      	ldrb	r3, [r0, #8]
    5640:	b113      	cbz	r3, 5648 <usbd_work_handler+0x21c>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    5642:	7a40      	ldrb	r0, [r0, #9]
    5644:	f005 fbc0 	bl	adc8 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    5648:	3501      	adds	r5, #1
    564a:	2d08      	cmp	r5, #8
    564c:	d1f4      	bne.n	5638 <usbd_work_handler+0x20c>
		if (ep_ctx->cfg.en) {
    564e:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    5652:	b11b      	cbz	r3, 565c <usbd_work_handler+0x230>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    5654:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    5658:	f005 fbb6 	bl	adc8 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    565c:	2001      	movs	r0, #1
    565e:	f004 ff45 	bl	a4ec <nrfx_usbd_start>
		ctx->ready = true;
    5662:	2301      	movs	r3, #1
    5664:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    5668:	6823      	ldr	r3, [r4, #0]
    566a:	2b00      	cmp	r3, #0
    566c:	f43f af58 	beq.w	5520 <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    5670:	2100      	movs	r1, #0
    5672:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_RESET, NULL);
    5674:	4798      	blx	r3
    5676:	e753      	b.n	5520 <usbd_work_handler+0xf4>
		ctx->ready = false;
    5678:	2500      	movs	r5, #0
    567a:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    567e:	f005 fb5d 	bl	ad3c <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    5682:	f7ff fdc7 	bl	5214 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    5686:	6823      	ldr	r3, [r4, #0]
    5688:	2b00      	cmp	r3, #0
    568a:	f43f af49 	beq.w	5520 <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    568e:	4629      	mov	r1, r5
    5690:	2004      	movs	r0, #4
    5692:	e7ef      	b.n	5674 <usbd_work_handler+0x248>
		if (dev_ready()) {
    5694:	2a00      	cmp	r2, #0
    5696:	f43f af43 	beq.w	5520 <usbd_work_handler+0xf4>
			nrfx_usbd_suspend();
    569a:	f004 ff4f 	bl	a53c <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    569e:	6823      	ldr	r3, [r4, #0]
    56a0:	2b00      	cmp	r3, #0
    56a2:	f43f af3d 	beq.w	5520 <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    56a6:	2100      	movs	r1, #0
    56a8:	2005      	movs	r0, #5
    56aa:	e7e3      	b.n	5674 <usbd_work_handler+0x248>
		if (ctx->status_cb && dev_ready()) {
    56ac:	6823      	ldr	r3, [r4, #0]
    56ae:	2b00      	cmp	r3, #0
    56b0:	f43f af36 	beq.w	5520 <usbd_work_handler+0xf4>
    56b4:	2a00      	cmp	r2, #0
    56b6:	f43f af33 	beq.w	5520 <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_RESUME, NULL);
    56ba:	2100      	movs	r1, #0
    56bc:	2006      	movs	r0, #6
    56be:	e7d9      	b.n	5674 <usbd_work_handler+0x248>
    56c0:	20000ef4 	.word	0x20000ef4
    56c4:	20000368 	.word	0x20000368
    56c8:	0000fa89 	.word	0x0000fa89
    56cc:	0000e948 	.word	0x0000e948
    56d0:	40027000 	.word	0x40027000
    56d4:	20000ef8 	.word	0x20000ef8
    56d8:	20000f2c 	.word	0x20000f2c
    56dc:	0bad0000 	.word	0x0bad0000
    56e0:	0000faaf 	.word	0x0000faaf
    56e4:	20000f14 	.word	0x20000f14
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    56e8:	f108 0510 	add.w	r5, r8, #16
    56ec:	f04f 33ff 	mov.w	r3, #4294967295
    56f0:	f04f 32ff 	mov.w	r2, #4294967295
    56f4:	4628      	mov	r0, r5
    56f6:	f007 ffa9 	bl	d64c <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    56fa:	f7ff fe63 	bl	53c4 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    56fe:	4628      	mov	r0, r5
    5700:	f007 ffa6 	bl	d650 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    5704:	f858 3c28 	ldr.w	r3, [r8, #-40]
    5708:	2b00      	cmp	r3, #0
    570a:	f43f af09 	beq.w	5520 <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_RESET, NULL);
    570e:	2100      	movs	r1, #0
    5710:	2001      	movs	r0, #1
    5712:	e7af      	b.n	5674 <usbd_work_handler+0x248>
	if (ep_ctx->cfg.en) {
    5714:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    5718:	b193      	cbz	r3, 5740 <usbd_work_handler+0x314>
		ep_ctx->read_pending = true;
    571a:	2501      	movs	r5, #1
    571c:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    5720:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    5724:	f7ff fc64 	bl	4ff0 <usbd_evt_alloc>
		if (!ev) {
    5728:	b990      	cbnz	r0, 5750 <usbd_work_handler+0x324>
			LOG_ERR("Failed to alloc evt");
    572a:	4b23      	ldr	r3, [pc, #140]	; (57b8 <usbd_work_handler+0x38c>)
    572c:	617b      	str	r3, [r7, #20]
    572e:	2302      	movs	r3, #2
    5730:	4822      	ldr	r0, [pc, #136]	; (57bc <usbd_work_handler+0x390>)
    5732:	613b      	str	r3, [r7, #16]
    5734:	f107 0210 	add.w	r2, r7, #16
    5738:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    573c:	f007 ff83 	bl	d646 <z_log_msg_static_create.constprop.0>
			if (ctx->status_cb) {
    5740:	f858 3c28 	ldr.w	r3, [r8, #-40]
    5744:	2b00      	cmp	r3, #0
    5746:	f43f aeeb 	beq.w	5520 <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_SOF, NULL);
    574a:	2100      	movs	r1, #0
    574c:	200a      	movs	r0, #10
    574e:	e791      	b.n	5674 <usbd_work_handler+0x248>
		ev->evt.ep_evt.ep = ep_ctx;
    5750:	4a1b      	ldr	r2, [pc, #108]	; (57c0 <usbd_work_handler+0x394>)
		ev->evt_type = USBD_EVT_EP;
    5752:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    5754:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    5756:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    5758:	f7ff fc2e 	bl	4fb8 <usbd_evt_put>
		usbd_work_schedule();
    575c:	f7ff fc24 	bl	4fa8 <usbd_work_schedule>
    5760:	e7ee      	b.n	5740 <usbd_work_handler+0x314>
				LOG_ERR("USBD event queue full!");
    5762:	4b18      	ldr	r3, [pc, #96]	; (57c4 <usbd_work_handler+0x398>)
    5764:	617b      	str	r3, [r7, #20]
    5766:	2302      	movs	r3, #2
    5768:	613b      	str	r3, [r7, #16]
    576a:	f107 0210 	add.w	r2, r7, #16
    576e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5772:	4812      	ldr	r0, [pc, #72]	; (57bc <usbd_work_handler+0x390>)
    5774:	f007 ff67 	bl	d646 <z_log_msg_static_create.constprop.0>
	nrfx_power_usbevt_disable();
    5778:	f008 fb0b 	bl	dd92 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    577c:	f005 fade 	bl	ad3c <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    5780:	f004 fe5a 	bl	a438 <nrfx_usbd_uninit>
	usbd_evt_flush();
    5784:	f7ff fc26 	bl	4fd4 <usbd_evt_flush>
	ret = eps_ctx_init();
    5788:	f7ff fe1c 	bl	53c4 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    578c:	f008 fafa 	bl	dd84 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    5790:	480d      	ldr	r0, [pc, #52]	; (57c8 <usbd_work_handler+0x39c>)
    5792:	f004 feff 	bl	a594 <nrfx_usbd_init>
}
    5796:	e6c3      	b.n	5520 <usbd_work_handler+0xf4>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    5798:	466d      	mov	r5, sp
    579a:	b088      	sub	sp, #32
    579c:	466a      	mov	r2, sp
    579e:	490b      	ldr	r1, [pc, #44]	; (57cc <usbd_work_handler+0x3a0>)
    57a0:	4806      	ldr	r0, [pc, #24]	; (57bc <usbd_work_handler+0x390>)
		switch (ev->evt_type) {
    57a2:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    57a6:	2303      	movs	r3, #3
    57a8:	f842 3f10 	str.w	r3, [r2, #16]!
    57ac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    57b0:	f007 ff49 	bl	d646 <z_log_msg_static_create.constprop.0>
    57b4:	46ad      	mov	sp, r5
    57b6:	e6b3      	b.n	5520 <usbd_work_handler+0xf4>
    57b8:	0000fad5 	.word	0x0000fad5
    57bc:	0000e948 	.word	0x0000e948
    57c0:	20001160 	.word	0x20001160
    57c4:	0000fae9 	.word	0x0000fae9
    57c8:	00005255 	.word	0x00005255
    57cc:	0000fb00 	.word	0x0000fb00

000057d0 <usb_dc_attach>:
{
    57d0:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    57d2:	4d16      	ldr	r5, [pc, #88]	; (582c <usb_dc_attach+0x5c>)
    57d4:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    57d8:	bb2c      	cbnz	r4, 5826 <usb_dc_attach+0x56>
	return z_impl_k_mutex_init(mutex);
    57da:	f105 0038 	add.w	r0, r5, #56	; 0x38
    57de:	f008 fc74 	bl	e0ca <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    57e2:	4620      	mov	r0, r4
    57e4:	f000 fbce 	bl	5f84 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    57e8:	4622      	mov	r2, r4
    57ea:	2101      	movs	r1, #1
	ctx->hfxo_mgr =
    57ec:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    57ee:	2027      	movs	r0, #39	; 0x27
    57f0:	f7fe fc6a 	bl	40c8 <z_arm_irq_priority_set>
	nrfx_power_usbevt_enable();
    57f4:	f008 fac6 	bl	dd84 <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    57f8:	f7ff fde4 	bl	53c4 <eps_ctx_init>
	if (ret == 0) {
    57fc:	4604      	mov	r4, r0
    57fe:	b910      	cbnz	r0, 5806 <usb_dc_attach+0x36>
		ctx->attached = true;
    5800:	2301      	movs	r3, #1
    5802:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    5806:	4b0a      	ldr	r3, [pc, #40]	; (5830 <usb_dc_attach+0x60>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    5808:	681b      	ldr	r3, [r3, #0]
    580a:	b10b      	cbz	r3, 5810 <usb_dc_attach+0x40>
		usbd_work_schedule();
    580c:	f7ff fbcc 	bl	4fa8 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    5810:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5814:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    5818:	07db      	lsls	r3, r3, #31
    581a:	d502      	bpl.n	5822 <usb_dc_attach+0x52>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    581c:	2000      	movs	r0, #0
    581e:	f7ff fc23 	bl	5068 <usb_dc_power_event_handler>
}
    5822:	4620      	mov	r0, r4
    5824:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    5826:	2400      	movs	r4, #0
    5828:	e7fb      	b.n	5822 <usb_dc_attach+0x52>
    582a:	bf00      	nop
    582c:	20000ef4 	.word	0x20000ef4
    5830:	200003cc 	.word	0x200003cc

00005834 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    5834:	4b07      	ldr	r3, [pc, #28]	; (5854 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    5836:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    583a:	b13a      	cbz	r2, 584c <usb_dc_set_address+0x18>
    583c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
    5840:	2b00      	cmp	r3, #0
    5842:	bf14      	ite	ne
    5844:	2000      	movne	r0, #0
    5846:	f06f 0012 	mvneq.w	r0, #18
    584a:	4770      	bx	lr
    584c:	f06f 0012 	mvn.w	r0, #18
}
    5850:	4770      	bx	lr
    5852:	bf00      	nop
    5854:	20000ef4 	.word	0x20000ef4

00005858 <usb_dc_ep_check_cap>:
{
    5858:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    585a:	4603      	mov	r3, r0
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    585c:	7802      	ldrb	r2, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    585e:	791b      	ldrb	r3, [r3, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    5860:	f002 000f 	and.w	r0, r2, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    5864:	b97b      	cbnz	r3, 5886 <usb_dc_ep_check_cap+0x2e>
    5866:	b158      	cbz	r0, 5880 <usb_dc_ep_check_cap+0x28>
		LOG_ERR("invalid endpoint configuration");
    5868:	4b10      	ldr	r3, [pc, #64]	; (58ac <usb_dc_ep_check_cap+0x54>)
		LOG_ERR("invalid endpoint index/address");
    586a:	9305      	str	r3, [sp, #20]
    586c:	2302      	movs	r3, #2
    586e:	9304      	str	r3, [sp, #16]
    5870:	aa04      	add	r2, sp, #16
    5872:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5876:	480e      	ldr	r0, [pc, #56]	; (58b0 <usb_dc_ep_check_cap+0x58>)
    5878:	f007 fee5 	bl	d646 <z_log_msg_static_create.constprop.0>
		return -1;
    587c:	f04f 30ff 	mov.w	r0, #4294967295
}
    5880:	b007      	add	sp, #28
    5882:	f85d fb04 	ldr.w	pc, [sp], #4
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    5886:	2808      	cmp	r0, #8
    5888:	d901      	bls.n	588e <usb_dc_ep_check_cap+0x36>
		LOG_ERR("invalid endpoint index/address");
    588a:	4b0a      	ldr	r3, [pc, #40]	; (58b4 <usb_dc_ep_check_cap+0x5c>)
    588c:	e7ed      	b.n	586a <usb_dc_ep_check_cap+0x12>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    588e:	2b01      	cmp	r3, #1
    5890:	d109      	bne.n	58a6 <usb_dc_ep_check_cap+0x4e>
    5892:	0713      	lsls	r3, r2, #28
    5894:	d407      	bmi.n	58a6 <usb_dc_ep_check_cap+0x4e>
		LOG_WRN("invalid endpoint type");
    5896:	4b08      	ldr	r3, [pc, #32]	; (58b8 <usb_dc_ep_check_cap+0x60>)
    5898:	9305      	str	r3, [sp, #20]
    589a:	2302      	movs	r3, #2
    589c:	9304      	str	r3, [sp, #16]
    589e:	aa04      	add	r2, sp, #16
    58a0:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    58a4:	e7e7      	b.n	5876 <usb_dc_ep_check_cap+0x1e>
	return 0;
    58a6:	2000      	movs	r0, #0
    58a8:	e7ea      	b.n	5880 <usb_dc_ep_check_cap+0x28>
    58aa:	bf00      	nop
    58ac:	0000fb17 	.word	0x0000fb17
    58b0:	0000e948 	.word	0x0000e948
    58b4:	0000fb36 	.word	0x0000fb36
    58b8:	0000fb55 	.word	0x0000fb55

000058bc <usb_dc_ep_configure>:
{
    58bc:	b530      	push	{r4, r5, lr}
	return get_usbd_ctx()->attached;
    58be:	4b16      	ldr	r3, [pc, #88]	; (5918 <usb_dc_ep_configure+0x5c>)
	if (!dev_attached()) {
    58c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    58c4:	b087      	sub	sp, #28
    58c6:	4604      	mov	r4, r0
	if (!dev_attached()) {
    58c8:	b31b      	cbz	r3, 5912 <usb_dc_ep_configure+0x56>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    58ca:	7805      	ldrb	r5, [r0, #0]
    58cc:	4628      	mov	r0, r5
    58ce:	f7ff fb3b 	bl	4f48 <endpoint_ctx>
	if (!ep_ctx) {
    58d2:	b1b0      	cbz	r0, 5902 <usb_dc_ep_configure+0x46>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    58d4:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    58d6:	7923      	ldrb	r3, [r4, #4]
    58d8:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    58da:	8863      	ldrh	r3, [r4, #2]
    58dc:	6043      	str	r3, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    58de:	7820      	ldrb	r0, [r4, #0]
    58e0:	8861      	ldrh	r1, [r4, #2]
    58e2:	f010 0f08 	tst.w	r0, #8
    58e6:	d110      	bne.n	590a <usb_dc_ep_configure+0x4e>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    58e8:	1e4b      	subs	r3, r1, #1
    58ea:	420b      	tst	r3, r1
    58ec:	d00d      	beq.n	590a <usb_dc_ep_configure+0x4e>
			LOG_ERR("EP max packet size must be a power of 2");
    58ee:	4b0b      	ldr	r3, [pc, #44]	; (591c <usb_dc_ep_configure+0x60>)
    58f0:	9305      	str	r3, [sp, #20]
    58f2:	480b      	ldr	r0, [pc, #44]	; (5920 <usb_dc_ep_configure+0x64>)
    58f4:	2302      	movs	r3, #2
    58f6:	aa04      	add	r2, sp, #16
    58f8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    58fc:	9304      	str	r3, [sp, #16]
    58fe:	f007 fea2 	bl	d646 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    5902:	f06f 0015 	mvn.w	r0, #21
}
    5906:	b007      	add	sp, #28
    5908:	bd30      	pop	{r4, r5, pc}
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    590a:	f008 faeb 	bl	dee4 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    590e:	2000      	movs	r0, #0
    5910:	e7f9      	b.n	5906 <usb_dc_ep_configure+0x4a>
		return -ENODEV;
    5912:	f06f 0012 	mvn.w	r0, #18
    5916:	e7f6      	b.n	5906 <usb_dc_ep_configure+0x4a>
    5918:	20000ef4 	.word	0x20000ef4
    591c:	0000fb6b 	.word	0x0000fb6b
    5920:	0000e948 	.word	0x0000e948

00005924 <usb_dc_ep_set_stall>:
{
    5924:	b530      	push	{r4, r5, lr}
	return get_usbd_ctx()->attached;
    5926:	4b19      	ldr	r3, [pc, #100]	; (598c <usb_dc_ep_set_stall+0x68>)
	if (!dev_attached() || !dev_ready()) {
    5928:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    592c:	b087      	sub	sp, #28
    592e:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    5930:	b342      	cbz	r2, 5984 <usb_dc_ep_set_stall+0x60>
    5932:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5936:	b32b      	cbz	r3, 5984 <usb_dc_ep_set_stall+0x60>
	ep_ctx = endpoint_ctx(ep);
    5938:	f7ff fb06 	bl	4f48 <endpoint_ctx>
	if (!ep_ctx) {
    593c:	4604      	mov	r4, r0
    593e:	b918      	cbnz	r0, 5948 <usb_dc_ep_set_stall+0x24>
		return -EINVAL;
    5940:	f06f 0015 	mvn.w	r0, #21
}
    5944:	b007      	add	sp, #28
    5946:	bd30      	pop	{r4, r5, pc}
	switch (ep_ctx->cfg.type) {
    5948:	7a83      	ldrb	r3, [r0, #10]
    594a:	2b01      	cmp	r3, #1
    594c:	d00f      	beq.n	596e <usb_dc_ep_set_stall+0x4a>
    594e:	d907      	bls.n	5960 <usb_dc_ep_set_stall+0x3c>
    5950:	3b02      	subs	r3, #2
    5952:	2b01      	cmp	r3, #1
    5954:	d907      	bls.n	5966 <usb_dc_ep_set_stall+0x42>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    5956:	6963      	ldr	r3, [r4, #20]
    5958:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    595a:	2000      	movs	r0, #0
    595c:	60e0      	str	r0, [r4, #12]
	return 0;
    595e:	e7f1      	b.n	5944 <usb_dc_ep_set_stall+0x20>
		nrfx_usbd_setup_stall();
    5960:	f005 f888 	bl	aa74 <nrfx_usbd_setup_stall>
		break;
    5964:	e7f7      	b.n	5956 <usb_dc_ep_set_stall+0x32>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    5966:	4628      	mov	r0, r5
    5968:	f004 fff4 	bl	a954 <nrfx_usbd_ep_stall>
		break;
    596c:	e7f3      	b.n	5956 <usb_dc_ep_set_stall+0x32>
		LOG_ERR("STALL unsupported on ISO endpoint");
    596e:	4b08      	ldr	r3, [pc, #32]	; (5990 <usb_dc_ep_set_stall+0x6c>)
    5970:	9305      	str	r3, [sp, #20]
    5972:	4808      	ldr	r0, [pc, #32]	; (5994 <usb_dc_ep_set_stall+0x70>)
    5974:	2302      	movs	r3, #2
    5976:	aa04      	add	r2, sp, #16
    5978:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    597c:	9304      	str	r3, [sp, #16]
    597e:	f007 fe62 	bl	d646 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    5982:	e7dd      	b.n	5940 <usb_dc_ep_set_stall+0x1c>
		return -ENODEV;
    5984:	f06f 0012 	mvn.w	r0, #18
    5988:	e7dc      	b.n	5944 <usb_dc_ep_set_stall+0x20>
    598a:	bf00      	nop
    598c:	20000ef4 	.word	0x20000ef4
    5990:	0000fb93 	.word	0x0000fb93
    5994:	0000e948 	.word	0x0000e948

00005998 <usb_dc_ep_clear_stall>:
{
    5998:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    599a:	4b0e      	ldr	r3, [pc, #56]	; (59d4 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    599c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    59a0:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    59a2:	b182      	cbz	r2, 59c6 <usb_dc_ep_clear_stall+0x2e>
    59a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    59a8:	b16b      	cbz	r3, 59c6 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    59aa:	f7ff facd 	bl	4f48 <endpoint_ctx>
	if (!ep_ctx) {
    59ae:	b168      	cbz	r0, 59cc <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    59b0:	f015 0408 	ands.w	r4, r5, #8
    59b4:	d10a      	bne.n	59cc <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    59b6:	4628      	mov	r0, r5
    59b8:	f004 ffee 	bl	a998 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    59bc:	4628      	mov	r0, r5
    59be:	f005 fa57 	bl	ae70 <nrfx_usbd_ep_stall_clear>
	return 0;
    59c2:	4620      	mov	r0, r4
}
    59c4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    59c6:	f06f 0012 	mvn.w	r0, #18
    59ca:	e7fb      	b.n	59c4 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    59cc:	f06f 0015 	mvn.w	r0, #21
    59d0:	e7f8      	b.n	59c4 <usb_dc_ep_clear_stall+0x2c>
    59d2:	bf00      	nop
    59d4:	20000ef4 	.word	0x20000ef4

000059d8 <usb_dc_ep_is_stalled>:
{
    59d8:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    59da:	4b0c      	ldr	r3, [pc, #48]	; (5a0c <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    59dc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    59e0:	4605      	mov	r5, r0
    59e2:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    59e4:	b162      	cbz	r2, 5a00 <usb_dc_ep_is_stalled+0x28>
    59e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    59ea:	b14b      	cbz	r3, 5a00 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    59ec:	f7ff faac 	bl	4f48 <endpoint_ctx>
	if (!ep_ctx) {
    59f0:	b148      	cbz	r0, 5a06 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    59f2:	b144      	cbz	r4, 5a06 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    59f4:	4628      	mov	r0, r5
    59f6:	f004 ffb5 	bl	a964 <nrfx_usbd_ep_stall_check>
    59fa:	7020      	strb	r0, [r4, #0]
	return 0;
    59fc:	2000      	movs	r0, #0
}
    59fe:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    5a00:	f06f 0012 	mvn.w	r0, #18
    5a04:	e7fb      	b.n	59fe <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    5a06:	f06f 0015 	mvn.w	r0, #21
    5a0a:	e7f8      	b.n	59fe <usb_dc_ep_is_stalled+0x26>
    5a0c:	20000ef4 	.word	0x20000ef4

00005a10 <usb_dc_ep_enable>:
{
    5a10:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    5a12:	4e13      	ldr	r6, [pc, #76]	; (5a60 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    5a14:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
{
    5a18:	4604      	mov	r4, r0
	if (!dev_attached()) {
    5a1a:	b1c3      	cbz	r3, 5a4e <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
    5a1c:	f7ff fa94 	bl	4f48 <endpoint_ctx>
	if (!ep_ctx) {
    5a20:	4605      	mov	r5, r0
    5a22:	b1b8      	cbz	r0, 5a54 <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    5a24:	0723      	lsls	r3, r4, #28
    5a26:	d405      	bmi.n	5a34 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    5a28:	4620      	mov	r0, r4
    5a2a:	f004 ffb5 	bl	a998 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    5a2e:	4620      	mov	r0, r4
    5a30:	f005 fa1e 	bl	ae70 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    5a34:	7a2b      	ldrb	r3, [r5, #8]
    5a36:	b983      	cbnz	r3, 5a5a <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
    5a38:	2301      	movs	r3, #1
    5a3a:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    5a3c:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
    5a40:	b90b      	cbnz	r3, 5a46 <usb_dc_ep_enable+0x36>
	return 0;
    5a42:	2000      	movs	r0, #0
}
    5a44:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    5a46:	4620      	mov	r0, r4
    5a48:	f005 f9be 	bl	adc8 <nrfx_usbd_ep_enable>
    5a4c:	e7f9      	b.n	5a42 <usb_dc_ep_enable+0x32>
		return -ENODEV;
    5a4e:	f06f 0012 	mvn.w	r0, #18
    5a52:	e7f7      	b.n	5a44 <usb_dc_ep_enable+0x34>
		return -EINVAL;
    5a54:	f06f 0015 	mvn.w	r0, #21
    5a58:	e7f4      	b.n	5a44 <usb_dc_ep_enable+0x34>
		return -EALREADY;
    5a5a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5a5e:	e7f1      	b.n	5a44 <usb_dc_ep_enable+0x34>
    5a60:	20000ef4 	.word	0x20000ef4

00005a64 <usb_dc_ep_write>:
{
    5a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->attached;
    5a68:	f8df 9124 	ldr.w	r9, [pc, #292]	; 5b90 <usb_dc_ep_write+0x12c>
{
    5a6c:	b084      	sub	sp, #16
    5a6e:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
    5a70:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
{
    5a74:	af00      	add	r7, sp, #0
    5a76:	4680      	mov	r8, r0
    5a78:	468a      	mov	sl, r1
    5a7a:	4615      	mov	r5, r2
	if (!dev_attached() || !dev_ready()) {
    5a7c:	2b00      	cmp	r3, #0
    5a7e:	f000 8083 	beq.w	5b88 <usb_dc_ep_write+0x124>
    5a82:	f899 3025 	ldrb.w	r3, [r9, #37]	; 0x25
    5a86:	2b00      	cmp	r3, #0
    5a88:	d07e      	beq.n	5b88 <usb_dc_ep_write+0x124>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    5a8a:	f010 0f80 	tst.w	r0, #128	; 0x80
    5a8e:	d014      	beq.n	5aba <usb_dc_ep_write+0x56>
	ep_ctx = endpoint_ctx(ep);
    5a90:	f7ff fa5a 	bl	4f48 <endpoint_ctx>
	if (!ep_ctx) {
    5a94:	4604      	mov	r4, r0
    5a96:	b180      	cbz	r0, 5aba <usb_dc_ep_write+0x56>
	if (!ep_ctx->cfg.en) {
    5a98:	7a03      	ldrb	r3, [r0, #8]
    5a9a:	b9ab      	cbnz	r3, 5ac8 <usb_dc_ep_write+0x64>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    5a9c:	466c      	mov	r4, sp
    5a9e:	b088      	sub	sp, #32
    5aa0:	466a      	mov	r2, sp
    5aa2:	4b3c      	ldr	r3, [pc, #240]	; (5b94 <usb_dc_ep_write+0x130>)
    5aa4:	483c      	ldr	r0, [pc, #240]	; (5b98 <usb_dc_ep_write+0x134>)
    5aa6:	e9c2 3805 	strd	r3, r8, [r2, #20]
    5aaa:	2303      	movs	r3, #3
    5aac:	f842 3f10 	str.w	r3, [r2, #16]!
    5ab0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5ab4:	f007 fdc7 	bl	d646 <z_log_msg_static_create.constprop.0>
    5ab8:	46a5      	mov	sp, r4
		return -EINVAL;
    5aba:	f06f 0415 	mvn.w	r4, #21
}
    5abe:	4620      	mov	r0, r4
    5ac0:	3710      	adds	r7, #16
    5ac2:	46bd      	mov	sp, r7
    5ac4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5ac8:	f04f 33ff 	mov.w	r3, #4294967295
    5acc:	f04f 32ff 	mov.w	r2, #4294967295
    5ad0:	f109 0038 	add.w	r0, r9, #56	; 0x38
    5ad4:	f007 fdba 	bl	d64c <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    5ad8:	7fa3      	ldrb	r3, [r4, #30]
    5ada:	b133      	cbz	r3, 5aea <usb_dc_ep_write+0x86>
		k_mutex_unlock(&ctx->drv_lock);
    5adc:	f109 0038 	add.w	r0, r9, #56	; 0x38
    5ae0:	f007 fdb6 	bl	d650 <k_mutex_unlock.isra.0>
		return -EAGAIN;
    5ae4:	f06f 040a 	mvn.w	r4, #10
    5ae8:	e7e9      	b.n	5abe <usb_dc_ep_write+0x5a>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    5aea:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
    5aec:	b355      	cbz	r5, 5b44 <usb_dc_ep_write+0xe0>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    5aee:	2b00      	cmp	r3, #0
    5af0:	d038      	beq.n	5b64 <usb_dc_ep_write+0x100>
	ep_ctx->write_in_progress = true;
    5af2:	2301      	movs	r3, #1
    5af4:	77a3      	strb	r3, [r4, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    5af6:	f04f 0900 	mov.w	r9, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    5afa:	1d39      	adds	r1, r7, #4
    5afc:	4640      	mov	r0, r8
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    5afe:	e9c7 a501 	strd	sl, r5, [r7, #4]
    5b02:	f8c7 900c 	str.w	r9, [r7, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    5b06:	f004 fd87 	bl	a618 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    5b0a:	4b24      	ldr	r3, [pc, #144]	; (5b9c <usb_dc_ep_write+0x138>)
    5b0c:	4298      	cmp	r0, r3
    5b0e:	d037      	beq.n	5b80 <usb_dc_ep_write+0x11c>
		ep_ctx->write_in_progress = false;
    5b10:	f884 901e 	strb.w	r9, [r4, #30]
		if (ret_bytes) {
    5b14:	b10e      	cbz	r6, 5b1a <usb_dc_ep_write+0xb6>
			*ret_bytes = 0;
    5b16:	f8c6 9000 	str.w	r9, [r6]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    5b1a:	466c      	mov	r4, sp
    5b1c:	b088      	sub	sp, #32
    5b1e:	466a      	mov	r2, sp
    5b20:	4b1f      	ldr	r3, [pc, #124]	; (5ba0 <usb_dc_ep_write+0x13c>)
    5b22:	e9c2 3005 	strd	r3, r0, [r2, #20]
    5b26:	2303      	movs	r3, #3
    5b28:	f842 3f10 	str.w	r3, [r2, #16]!
    5b2c:	481a      	ldr	r0, [pc, #104]	; (5b98 <usb_dc_ep_write+0x134>)
    5b2e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5b32:	f007 fd88 	bl	d646 <z_log_msg_static_create.constprop.0>
    5b36:	46a5      	mov	sp, r4
		result = -EIO;
    5b38:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
    5b3c:	4819      	ldr	r0, [pc, #100]	; (5ba4 <usb_dc_ep_write+0x140>)
    5b3e:	f007 fd87 	bl	d650 <k_mutex_unlock.isra.0>
	return result;
    5b42:	e7bc      	b.n	5abe <usb_dc_ep_write+0x5a>
	if (!data_len && ep_ctx->trans_zlp) {
    5b44:	7fe2      	ldrb	r2, [r4, #31]
    5b46:	b102      	cbz	r2, 5b4a <usb_dc_ep_write+0xe6>
		ep_ctx->trans_zlp = false;
    5b48:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    5b4a:	2b00      	cmp	r3, #0
    5b4c:	d1d1      	bne.n	5af2 <usb_dc_ep_write+0x8e>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    5b4e:	f004 ff99 	bl	aa84 <nrfx_usbd_last_setup_dir_get>
    5b52:	4580      	cmp	r8, r0
    5b54:	d0cd      	beq.n	5af2 <usb_dc_ep_write+0x8e>
		nrfx_usbd_setup_clear();
    5b56:	f004 ff85 	bl	aa64 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    5b5a:	4812      	ldr	r0, [pc, #72]	; (5ba4 <usb_dc_ep_write+0x140>)
    5b5c:	f007 fd78 	bl	d650 <k_mutex_unlock.isra.0>
		return 0;
    5b60:	2400      	movs	r4, #0
    5b62:	e7ac      	b.n	5abe <usb_dc_ep_write+0x5a>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    5b64:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    5b68:	429d      	cmp	r5, r3
    5b6a:	d2f0      	bcs.n	5b4e <usb_dc_ep_write+0xea>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    5b6c:	6862      	ldr	r2, [r4, #4]
    5b6e:	fbb5 f3f2 	udiv	r3, r5, r2
    5b72:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    5b76:	2b00      	cmp	r3, #0
    5b78:	d1e9      	bne.n	5b4e <usb_dc_ep_write+0xea>
			ep_ctx->trans_zlp = true;
    5b7a:	2301      	movs	r3, #1
    5b7c:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    5b7e:	e7e6      	b.n	5b4e <usb_dc_ep_write+0xea>
		if (ret_bytes) {
    5b80:	b106      	cbz	r6, 5b84 <usb_dc_ep_write+0x120>
			*ret_bytes = data_len;
    5b82:	6035      	str	r5, [r6, #0]
	int result = 0;
    5b84:	2400      	movs	r4, #0
    5b86:	e7d9      	b.n	5b3c <usb_dc_ep_write+0xd8>
		return -ENODEV;
    5b88:	f06f 0412 	mvn.w	r4, #18
    5b8c:	e797      	b.n	5abe <usb_dc_ep_write+0x5a>
    5b8e:	bf00      	nop
    5b90:	20000ef4 	.word	0x20000ef4
    5b94:	0000fbb5 	.word	0x0000fbb5
    5b98:	0000e948 	.word	0x0000e948
    5b9c:	0bad0000 	.word	0x0bad0000
    5ba0:	0000fbd4 	.word	0x0000fbd4
    5ba4:	20000f2c 	.word	0x20000f2c

00005ba8 <usb_dc_ep_read_wait>:
{
    5ba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    5bac:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    5bae:	4b2d      	ldr	r3, [pc, #180]	; (5c64 <usb_dc_ep_read_wait+0xbc>)
{
    5bb0:	4690      	mov	r8, r2
	if (!dev_attached() || !dev_ready()) {
    5bb2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    5bb6:	af00      	add	r7, sp, #0
    5bb8:	4681      	mov	r9, r0
    5bba:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    5bbc:	2a00      	cmp	r2, #0
    5bbe:	d04d      	beq.n	5c5c <usb_dc_ep_read_wait+0xb4>
    5bc0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    5bc4:	2b00      	cmp	r3, #0
    5bc6:	d049      	beq.n	5c5c <usb_dc_ep_read_wait+0xb4>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    5bc8:	f010 0f80 	tst.w	r0, #128	; 0x80
    5bcc:	d119      	bne.n	5c02 <usb_dc_ep_read_wait+0x5a>
	if (!data && max_data_len) {
    5bce:	b911      	cbnz	r1, 5bd6 <usb_dc_ep_read_wait+0x2e>
    5bd0:	f1b8 0f00 	cmp.w	r8, #0
    5bd4:	d115      	bne.n	5c02 <usb_dc_ep_read_wait+0x5a>
	ep_ctx = endpoint_ctx(ep);
    5bd6:	4648      	mov	r0, r9
    5bd8:	f7ff f9b6 	bl	4f48 <endpoint_ctx>
	if (!ep_ctx) {
    5bdc:	4604      	mov	r4, r0
    5bde:	b180      	cbz	r0, 5c02 <usb_dc_ep_read_wait+0x5a>
	if (!ep_ctx->cfg.en) {
    5be0:	7a03      	ldrb	r3, [r0, #8]
    5be2:	b98b      	cbnz	r3, 5c08 <usb_dc_ep_read_wait+0x60>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    5be4:	466c      	mov	r4, sp
    5be6:	b088      	sub	sp, #32
    5be8:	466a      	mov	r2, sp
    5bea:	4b1f      	ldr	r3, [pc, #124]	; (5c68 <usb_dc_ep_read_wait+0xc0>)
    5bec:	481f      	ldr	r0, [pc, #124]	; (5c6c <usb_dc_ep_read_wait+0xc4>)
    5bee:	e9c2 3905 	strd	r3, r9, [r2, #20]
    5bf2:	2303      	movs	r3, #3
    5bf4:	f842 3f10 	str.w	r3, [r2, #16]!
    5bf8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5bfc:	f007 fd23 	bl	d646 <z_log_msg_static_create.constprop.0>
    5c00:	46a5      	mov	sp, r4
		return -EINVAL;
    5c02:	f06f 0015 	mvn.w	r0, #21
    5c06:	e015      	b.n	5c34 <usb_dc_ep_read_wait+0x8c>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5c08:	f04f 33ff 	mov.w	r3, #4294967295
    5c0c:	4818      	ldr	r0, [pc, #96]	; (5c70 <usb_dc_ep_read_wait+0xc8>)
    5c0e:	f04f 32ff 	mov.w	r2, #4294967295
    5c12:	f007 fd1b 	bl	d64c <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    5c16:	68e3      	ldr	r3, [r4, #12]
    5c18:	4598      	cmp	r8, r3
    5c1a:	46c1      	mov	r9, r8
    5c1c:	bf28      	it	cs
    5c1e:	4699      	movcs	r9, r3
	if (!data && !max_data_len) {
    5c20:	b95e      	cbnz	r6, 5c3a <usb_dc_ep_read_wait+0x92>
    5c22:	f1b8 0f00 	cmp.w	r8, #0
    5c26:	d108      	bne.n	5c3a <usb_dc_ep_read_wait+0x92>
		if (read_bytes) {
    5c28:	b105      	cbz	r5, 5c2c <usb_dc_ep_read_wait+0x84>
			*read_bytes = ep_ctx->buf.len;
    5c2a:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    5c2c:	4810      	ldr	r0, [pc, #64]	; (5c70 <usb_dc_ep_read_wait+0xc8>)
    5c2e:	f007 fd0f 	bl	d650 <k_mutex_unlock.isra.0>
		return 0;
    5c32:	2000      	movs	r0, #0
}
    5c34:	46bd      	mov	sp, r7
    5c36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    5c3a:	69a1      	ldr	r1, [r4, #24]
    5c3c:	464a      	mov	r2, r9
    5c3e:	4630      	mov	r0, r6
    5c40:	f007 fca6 	bl	d590 <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    5c44:	69a3      	ldr	r3, [r4, #24]
    5c46:	444b      	add	r3, r9
    5c48:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    5c4a:	68e3      	ldr	r3, [r4, #12]
    5c4c:	eba3 0309 	sub.w	r3, r3, r9
    5c50:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    5c52:	2d00      	cmp	r5, #0
    5c54:	d0ea      	beq.n	5c2c <usb_dc_ep_read_wait+0x84>
		*read_bytes = bytes_to_copy;
    5c56:	f8c5 9000 	str.w	r9, [r5]
    5c5a:	e7e7      	b.n	5c2c <usb_dc_ep_read_wait+0x84>
		return -ENODEV;
    5c5c:	f06f 0012 	mvn.w	r0, #18
    5c60:	e7e8      	b.n	5c34 <usb_dc_ep_read_wait+0x8c>
    5c62:	bf00      	nop
    5c64:	20000ef4 	.word	0x20000ef4
    5c68:	0000fbb5 	.word	0x0000fbb5
    5c6c:	0000e948 	.word	0x0000e948
    5c70:	20000f2c 	.word	0x20000f2c

00005c74 <usb_dc_ep_read_continue>:
{
    5c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    5c76:	4d27      	ldr	r5, [pc, #156]	; (5d14 <usb_dc_ep_read_continue+0xa0>)
	if (!dev_attached() || !dev_ready()) {
    5c78:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
    5c7c:	af00      	add	r7, sp, #0
    5c7e:	4606      	mov	r6, r0
	if (!dev_attached() || !dev_ready()) {
    5c80:	2b00      	cmp	r3, #0
    5c82:	d044      	beq.n	5d0e <usb_dc_ep_read_continue+0x9a>
    5c84:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    5c88:	2b00      	cmp	r3, #0
    5c8a:	d040      	beq.n	5d0e <usb_dc_ep_read_continue+0x9a>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    5c8c:	0603      	lsls	r3, r0, #24
    5c8e:	d414      	bmi.n	5cba <usb_dc_ep_read_continue+0x46>
	ep_ctx = endpoint_ctx(ep);
    5c90:	f7ff f95a 	bl	4f48 <endpoint_ctx>
	if (!ep_ctx) {
    5c94:	4604      	mov	r4, r0
    5c96:	b180      	cbz	r0, 5cba <usb_dc_ep_read_continue+0x46>
	if (!ep_ctx->cfg.en) {
    5c98:	7a03      	ldrb	r3, [r0, #8]
    5c9a:	b993      	cbnz	r3, 5cc2 <usb_dc_ep_read_continue+0x4e>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    5c9c:	466c      	mov	r4, sp
    5c9e:	b088      	sub	sp, #32
    5ca0:	466a      	mov	r2, sp
    5ca2:	4b1d      	ldr	r3, [pc, #116]	; (5d18 <usb_dc_ep_read_continue+0xa4>)
    5ca4:	481d      	ldr	r0, [pc, #116]	; (5d1c <usb_dc_ep_read_continue+0xa8>)
    5ca6:	e9c2 3605 	strd	r3, r6, [r2, #20]
    5caa:	2303      	movs	r3, #3
    5cac:	f842 3f10 	str.w	r3, [r2, #16]!
    5cb0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5cb4:	f007 fcc7 	bl	d646 <z_log_msg_static_create.constprop.0>
    5cb8:	46a5      	mov	sp, r4
		return -EINVAL;
    5cba:	f06f 0015 	mvn.w	r0, #21
}
    5cbe:	46bd      	mov	sp, r7
    5cc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5cc2:	f04f 33ff 	mov.w	r3, #4294967295
    5cc6:	f04f 32ff 	mov.w	r2, #4294967295
    5cca:	f105 0038 	add.w	r0, r5, #56	; 0x38
    5cce:	f007 fcbd 	bl	d64c <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    5cd2:	68e3      	ldr	r3, [r4, #12]
    5cd4:	b9b3      	cbnz	r3, 5d04 <usb_dc_ep_read_continue+0x90>
		ep_ctx->read_complete = true;
    5cd6:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    5cd8:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    5cda:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    5cdc:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    5cde:	7f63      	ldrb	r3, [r4, #29]
    5ce0:	b183      	cbz	r3, 5d04 <usb_dc_ep_read_continue+0x90>
			struct usbd_event *ev = usbd_evt_alloc();
    5ce2:	f7ff f985 	bl	4ff0 <usbd_evt_alloc>
			if (!ev) {
    5ce6:	b930      	cbnz	r0, 5cf6 <usb_dc_ep_read_continue+0x82>
				k_mutex_unlock(&ctx->drv_lock);
    5ce8:	f105 0038 	add.w	r0, r5, #56	; 0x38
    5cec:	f007 fcb0 	bl	d650 <k_mutex_unlock.isra.0>
				return -ENOMEM;
    5cf0:	f06f 000b 	mvn.w	r0, #11
    5cf4:	e7e3      	b.n	5cbe <usb_dc_ep_read_continue+0x4a>
			ev->evt_type = USBD_EVT_EP;
    5cf6:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    5cf8:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    5cfa:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    5cfc:	f7ff f95c 	bl	4fb8 <usbd_evt_put>
			usbd_work_schedule();
    5d00:	f7ff f952 	bl	4fa8 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    5d04:	4806      	ldr	r0, [pc, #24]	; (5d20 <usb_dc_ep_read_continue+0xac>)
    5d06:	f007 fca3 	bl	d650 <k_mutex_unlock.isra.0>
	return 0;
    5d0a:	2000      	movs	r0, #0
    5d0c:	e7d7      	b.n	5cbe <usb_dc_ep_read_continue+0x4a>
		return -ENODEV;
    5d0e:	f06f 0012 	mvn.w	r0, #18
    5d12:	e7d4      	b.n	5cbe <usb_dc_ep_read_continue+0x4a>
    5d14:	20000ef4 	.word	0x20000ef4
    5d18:	0000fbb5 	.word	0x0000fbb5
    5d1c:	0000e948 	.word	0x0000e948
    5d20:	20000f2c 	.word	0x20000f2c

00005d24 <usb_dc_ep_set_callback>:
{
    5d24:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    5d26:	4b08      	ldr	r3, [pc, #32]	; (5d48 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    5d28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    5d2c:	460c      	mov	r4, r1
	if (!dev_attached()) {
    5d2e:	b12b      	cbz	r3, 5d3c <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
    5d30:	f7ff f90a 	bl	4f48 <endpoint_ctx>
	if (!ep_ctx) {
    5d34:	b128      	cbz	r0, 5d42 <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    5d36:	6004      	str	r4, [r0, #0]
	return 0;
    5d38:	2000      	movs	r0, #0
}
    5d3a:	bd10      	pop	{r4, pc}
		return -ENODEV;
    5d3c:	f06f 0012 	mvn.w	r0, #18
    5d40:	e7fb      	b.n	5d3a <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
    5d42:	f06f 0015 	mvn.w	r0, #21
    5d46:	e7f8      	b.n	5d3a <usb_dc_ep_set_callback+0x16>
    5d48:	20000ef4 	.word	0x20000ef4

00005d4c <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    5d4c:	4b01      	ldr	r3, [pc, #4]	; (5d54 <usb_dc_set_status_callback+0x8>)
    5d4e:	6018      	str	r0, [r3, #0]
}
    5d50:	4770      	bx	lr
    5d52:	bf00      	nop
    5d54:	20000ef4 	.word	0x20000ef4

00005d58 <usb_dc_ep_mps>:
{
    5d58:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    5d5a:	4b07      	ldr	r3, [pc, #28]	; (5d78 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    5d5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    5d60:	b123      	cbz	r3, 5d6c <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    5d62:	f7ff f8f1 	bl	4f48 <endpoint_ctx>
	if (!ep_ctx) {
    5d66:	b120      	cbz	r0, 5d72 <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    5d68:	6840      	ldr	r0, [r0, #4]
}
    5d6a:	bd08      	pop	{r3, pc}
		return -ENODEV;
    5d6c:	f06f 0012 	mvn.w	r0, #18
    5d70:	e7fb      	b.n	5d6a <usb_dc_ep_mps+0x12>
		return -EINVAL;
    5d72:	f06f 0015 	mvn.w	r0, #21
    5d76:	e7f8      	b.n	5d6a <usb_dc_ep_mps+0x12>
    5d78:	20000ef4 	.word	0x20000ef4

00005d7c <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    5d7c:	4b08      	ldr	r3, [pc, #32]	; (5da0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5d7e:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    5d80:	1ac3      	subs	r3, r0, r3
{
    5d82:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5d84:	4907      	ldr	r1, [pc, #28]	; (5da4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    5d86:	109b      	asrs	r3, r3, #2
{
    5d88:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5d8a:	4359      	muls	r1, r3
    5d8c:	4806      	ldr	r0, [pc, #24]	; (5da8 <onoff_stop+0x2c>)
    5d8e:	2240      	movs	r2, #64	; 0x40
    5d90:	f007 fca4 	bl	d6dc <stop>
	notify(mgr, res);
    5d94:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    5d96:	4601      	mov	r1, r0
	notify(mgr, res);
    5d98:	4620      	mov	r0, r4
}
    5d9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    5d9e:	4718      	bx	r3
    5da0:	20001798 	.word	0x20001798
    5da4:	b6db6db7 	.word	0xb6db6db7
    5da8:	0000e778 	.word	0x0000e778

00005dac <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    5dac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    5dae:	4c0c      	ldr	r4, [pc, #48]	; (5de0 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5db0:	4a0c      	ldr	r2, [pc, #48]	; (5de4 <onoff_start+0x38>)
    5db2:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    5db4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5db6:	9300      	str	r3, [sp, #0]
{
    5db8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5dba:	460b      	mov	r3, r1
    5dbc:	490a      	ldr	r1, [pc, #40]	; (5de8 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    5dbe:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5dc0:	4361      	muls	r1, r4
{
    5dc2:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    5dc4:	4809      	ldr	r0, [pc, #36]	; (5dec <onoff_start+0x40>)
    5dc6:	f007 fcb5 	bl	d734 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    5dca:	1e01      	subs	r1, r0, #0
    5dcc:	da05      	bge.n	5dda <onoff_start+0x2e>
		notify(mgr, err);
    5dce:	4630      	mov	r0, r6
    5dd0:	462b      	mov	r3, r5
	}
}
    5dd2:	b002      	add	sp, #8
    5dd4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    5dd8:	4718      	bx	r3
}
    5dda:	b002      	add	sp, #8
    5ddc:	bd70      	pop	{r4, r5, r6, pc}
    5dde:	bf00      	nop
    5de0:	20001798 	.word	0x20001798
    5de4:	0000d79f 	.word	0x0000d79f
    5de8:	b6db6db7 	.word	0xb6db6db7
    5dec:	0000e778 	.word	0x0000e778

00005df0 <generic_hfclk_stop>:
{
    5df0:	b510      	push	{r4, lr}
	__asm__ volatile(
    5df2:	f04f 0340 	mov.w	r3, #64	; 0x40
    5df6:	f3ef 8411 	mrs	r4, BASEPRI
    5dfa:	f383 8812 	msr	BASEPRI_MAX, r3
    5dfe:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    5e02:	4a07      	ldr	r2, [pc, #28]	; (5e20 <generic_hfclk_stop+0x30>)
    5e04:	6813      	ldr	r3, [r2, #0]
    5e06:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    5e0a:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    5e0c:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    5e0e:	d402      	bmi.n	5e16 <generic_hfclk_stop+0x26>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    5e10:	2001      	movs	r0, #1
    5e12:	f007 ff9b 	bl	dd4c <nrfx_clock_stop>
	__asm__ volatile(
    5e16:	f384 8811 	msr	BASEPRI, r4
    5e1a:	f3bf 8f6f 	isb	sy
}
    5e1e:	bd10      	pop	{r4, pc}
    5e20:	200017e8 	.word	0x200017e8

00005e24 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5e24:	2200      	movs	r2, #0
{
    5e26:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5e28:	2101      	movs	r1, #1
{
    5e2a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    5e2c:	4610      	mov	r0, r2
    5e2e:	f7fe f94b 	bl	40c8 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    5e32:	4811      	ldr	r0, [pc, #68]	; (5e78 <clk_init+0x54>)
    5e34:	f003 f982 	bl	913c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    5e38:	4b10      	ldr	r3, [pc, #64]	; (5e7c <clk_init+0x58>)
    5e3a:	4298      	cmp	r0, r3
    5e3c:	d118      	bne.n	5e70 <clk_init+0x4c>
	hfclkaudio_init();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_DRIVER_CALIBRATION)) {
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
    5e3e:	6920      	ldr	r0, [r4, #16]
    5e40:	f000 f99c 	bl	617c <z_nrf_clock_calibration_init>
	}

	nrfx_clock_enable();
    5e44:	f003 f98c 	bl	9160 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    5e48:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    5e4a:	490d      	ldr	r1, [pc, #52]	; (5e80 <clk_init+0x5c>)
    5e4c:	4630      	mov	r0, r6
    5e4e:	f006 fee8 	bl	cc22 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    5e52:	2800      	cmp	r0, #0
    5e54:	db0b      	blt.n	5e6e <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5e56:	2501      	movs	r5, #1
    5e58:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    5e5a:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    5e5c:	4908      	ldr	r1, [pc, #32]	; (5e80 <clk_init+0x5c>)
    5e5e:	f104 001c 	add.w	r0, r4, #28
    5e62:	f006 fede 	bl	cc22 <onoff_manager_init>
		if (err < 0) {
    5e66:	2800      	cmp	r0, #0
    5e68:	db01      	blt.n	5e6e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    5e6a:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    5e6c:	2000      	movs	r0, #0
}
    5e6e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    5e70:	f06f 0004 	mvn.w	r0, #4
    5e74:	e7fb      	b.n	5e6e <clk_init+0x4a>
    5e76:	bf00      	nop
    5e78:	00005eb9 	.word	0x00005eb9
    5e7c:	0bad0000 	.word	0x0bad0000
    5e80:	0000ea80 	.word	0x0000ea80

00005e84 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    5e84:	b570      	push	{r4, r5, r6, lr}
    5e86:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    5e88:	230c      	movs	r3, #12
    5e8a:	4809      	ldr	r0, [pc, #36]	; (5eb0 <clkstarted_handle.constprop.0+0x2c>)
    5e8c:	434b      	muls	r3, r1
    5e8e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    5e90:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    5e94:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    5e96:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    5e98:	4418      	add	r0, r3
	sub_data->cb = NULL;
    5e9a:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    5e9c:	f007 fc0b 	bl	d6b6 <set_on_state>
	if (callback) {
    5ea0:	b12d      	cbz	r5, 5eae <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    5ea2:	4632      	mov	r2, r6
    5ea4:	462b      	mov	r3, r5
    5ea6:	4803      	ldr	r0, [pc, #12]	; (5eb4 <clkstarted_handle.constprop.0+0x30>)
}
    5ea8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    5eac:	4718      	bx	r3
}
    5eae:	bd70      	pop	{r4, r5, r6, pc}
    5eb0:	20001798 	.word	0x20001798
    5eb4:	0000e778 	.word	0x0000e778

00005eb8 <clock_event_handler>:
	switch (event) {
    5eb8:	2801      	cmp	r0, #1
{
    5eba:	b510      	push	{r4, lr}
    5ebc:	4604      	mov	r4, r0
	switch (event) {
    5ebe:	d00a      	beq.n	5ed6 <clock_event_handler+0x1e>
    5ec0:	2803      	cmp	r0, #3
    5ec2:	d00c      	beq.n	5ede <clock_event_handler+0x26>
    5ec4:	b978      	cbnz	r0, 5ee6 <clock_event_handler+0x2e>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    5ec6:	4b08      	ldr	r3, [pc, #32]	; (5ee8 <clock_event_handler+0x30>)
    5ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    5eca:	075b      	lsls	r3, r3, #29
    5ecc:	d10b      	bne.n	5ee6 <clock_event_handler+0x2e>
}
    5ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5ed2:	f7ff bfd7 	b.w	5e84 <clkstarted_handle.constprop.0>
			z_nrf_clock_calibration_lfclk_started();
    5ed6:	f000 f95f 	bl	6198 <z_nrf_clock_calibration_lfclk_started>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    5eda:	4620      	mov	r0, r4
    5edc:	e7f7      	b.n	5ece <clock_event_handler+0x16>
}
    5ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			z_nrf_clock_calibration_done_handler();
    5ee2:	f000 b967 	b.w	61b4 <z_nrf_clock_calibration_done_handler>
}
    5ee6:	bd10      	pop	{r4, pc}
    5ee8:	20001798 	.word	0x20001798

00005eec <generic_hfclk_start>:
{
    5eec:	b508      	push	{r3, lr}
	__asm__ volatile(
    5eee:	f04f 0340 	mov.w	r3, #64	; 0x40
    5ef2:	f3ef 8111 	mrs	r1, BASEPRI
    5ef6:	f383 8812 	msr	BASEPRI_MAX, r3
    5efa:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    5efe:	4a12      	ldr	r2, [pc, #72]	; (5f48 <generic_hfclk_start+0x5c>)
    5f00:	6813      	ldr	r3, [r2, #0]
    5f02:	f043 0002 	orr.w	r0, r3, #2
    5f06:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    5f08:	07da      	lsls	r2, r3, #31
    5f0a:	d408      	bmi.n	5f1e <generic_hfclk_start+0x32>
	__asm__ volatile(
    5f0c:	f381 8811 	msr	BASEPRI, r1
    5f10:	f3bf 8f6f 	isb	sy
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    5f14:	2001      	movs	r0, #1
}
    5f16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5f1a:	f007 bedf 	b.w	dcdc <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5f1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5f22:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5f26:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    5f2a:	07d3      	lsls	r3, r2, #31
    5f2c:	d5ee      	bpl.n	5f0c <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    5f2e:	4807      	ldr	r0, [pc, #28]	; (5f4c <generic_hfclk_start+0x60>)
    5f30:	f007 fbc1 	bl	d6b6 <set_on_state>
    5f34:	f381 8811 	msr	BASEPRI, r1
    5f38:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    5f3c:	2000      	movs	r0, #0
}
    5f3e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    5f42:	f7ff bf9f 	b.w	5e84 <clkstarted_handle.constprop.0>
    5f46:	bf00      	nop
    5f48:	200017e8 	.word	0x200017e8
    5f4c:	200017d8 	.word	0x200017d8

00005f50 <api_blocking_start>:
{
    5f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5f52:	2200      	movs	r2, #0
    5f54:	2301      	movs	r3, #1
    5f56:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5f5a:	4a09      	ldr	r2, [pc, #36]	; (5f80 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5f5c:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5f60:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    5f62:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    5f66:	f007 fc13 	bl	d790 <api_start>
	if (err < 0) {
    5f6a:	2800      	cmp	r0, #0
    5f6c:	db05      	blt.n	5f7a <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    5f6e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    5f72:	2300      	movs	r3, #0
    5f74:	4668      	mov	r0, sp
    5f76:	f005 fc01 	bl	b77c <z_impl_k_sem_take>
}
    5f7a:	b005      	add	sp, #20
    5f7c:	f85d fb04 	ldr.w	pc, [sp], #4
    5f80:	0000d7b7 	.word	0x0000d7b7

00005f84 <z_nrf_clock_control_get_onoff>:
}
    5f84:	4a02      	ldr	r2, [pc, #8]	; (5f90 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    5f86:	b2c3      	uxtb	r3, r0
}
    5f88:	201c      	movs	r0, #28
    5f8a:	fb03 2000 	mla	r0, r3, r0, r2
    5f8e:	4770      	bx	lr
    5f90:	20001798 	.word	0x20001798

00005f94 <z_nrf_clock_control_lf_on>:
{
    5f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5f96:	4928      	ldr	r1, [pc, #160]	; (6038 <z_nrf_clock_control_lf_on+0xa4>)
    5f98:	f3bf 8f5b 	dmb	ish
    5f9c:	4606      	mov	r6, r0
    5f9e:	2201      	movs	r2, #1
    5fa0:	e851 3f00 	ldrex	r3, [r1]
    5fa4:	e841 2000 	strex	r0, r2, [r1]
    5fa8:	2800      	cmp	r0, #0
    5faa:	d1f9      	bne.n	5fa0 <z_nrf_clock_control_lf_on+0xc>
    5fac:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    5fb0:	b933      	cbnz	r3, 5fc0 <z_nrf_clock_control_lf_on+0x2c>
    5fb2:	4922      	ldr	r1, [pc, #136]	; (603c <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
    5fb4:	4822      	ldr	r0, [pc, #136]	; (6040 <z_nrf_clock_control_lf_on+0xac>)
    5fb6:	604b      	str	r3, [r1, #4]
    5fb8:	60cb      	str	r3, [r1, #12]
    5fba:	608a      	str	r2, [r1, #8]
    5fbc:	f006 fe44 	bl	cc48 <onoff_request>
	switch (start_mode) {
    5fc0:	1e73      	subs	r3, r6, #1
    5fc2:	2b01      	cmp	r3, #1
    5fc4:	d81d      	bhi.n	6002 <z_nrf_clock_control_lf_on+0x6e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    5fc6:	f008 f864 	bl	e092 <k_is_in_isr>
    5fca:	4604      	mov	r4, r0
    5fcc:	b9d0      	cbnz	r0, 6004 <z_nrf_clock_control_lf_on+0x70>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    5fce:	4b1d      	ldr	r3, [pc, #116]	; (6044 <z_nrf_clock_control_lf_on+0xb0>)
    5fd0:	781b      	ldrb	r3, [r3, #0]
    5fd2:	b1bb      	cbz	r3, 6004 <z_nrf_clock_control_lf_on+0x70>
    p_reg->INTENCLR = mask;
    5fd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5fd8:	2202      	movs	r2, #2
    5fda:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    5fde:	4605      	mov	r5, r0
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    5fe0:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    5fe4:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    5fe8:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
    5fec:	03d2      	lsls	r2, r2, #15
    5fee:	d513      	bpl.n	6018 <z_nrf_clock_control_lf_on+0x84>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    5ff0:	079b      	lsls	r3, r3, #30
    5ff2:	d001      	beq.n	5ff8 <z_nrf_clock_control_lf_on+0x64>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    5ff4:	2e01      	cmp	r6, #1
    5ff6:	d10f      	bne.n	6018 <z_nrf_clock_control_lf_on+0x84>
	if (isr_mode) {
    5ff8:	b1c4      	cbz	r4, 602c <z_nrf_clock_control_lf_on+0x98>
    5ffa:	f385 8811 	msr	BASEPRI, r5
    5ffe:	f3bf 8f6f 	isb	sy
}
    6002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	__asm__ volatile(
    6004:	f04f 0340 	mov.w	r3, #64	; 0x40
    6008:	f3ef 8511 	mrs	r5, BASEPRI
    600c:	f383 8812 	msr	BASEPRI_MAX, r3
    6010:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6014:	2401      	movs	r4, #1
    6016:	e7e3      	b.n	5fe0 <z_nrf_clock_control_lf_on+0x4c>
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    6018:	b11c      	cbz	r4, 6022 <z_nrf_clock_control_lf_on+0x8e>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    601a:	4628      	mov	r0, r5
    601c:	f7fd ffb2 	bl	3f84 <arch_cpu_atomic_idle>
}
    6020:	e7e0      	b.n	5fe4 <z_nrf_clock_control_lf_on+0x50>
	return z_impl_k_sleep(timeout);
    6022:	2100      	movs	r1, #0
    6024:	2021      	movs	r0, #33	; 0x21
    6026:	f006 f82f 	bl	c088 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    602a:	e7db      	b.n	5fe4 <z_nrf_clock_control_lf_on+0x50>
    p_reg->INTENSET = mask;
    602c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6030:	2202      	movs	r2, #2
    6032:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6036:	e7e4      	b.n	6002 <z_nrf_clock_control_lf_on+0x6e>
    6038:	20001794 	.word	0x20001794
    603c:	20001784 	.word	0x20001784
    6040:	200017b4 	.word	0x200017b4
    6044:	200023ef 	.word	0x200023ef

00006048 <start_cal_process>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    6048:	4b0d      	ldr	r3, [pc, #52]	; (6080 <start_cal_process+0x38>)
    604a:	f3bf 8f5b 	dmb	ish
    604e:	2201      	movs	r2, #1
    6050:	e853 1f00 	ldrex	r1, [r3]
    6054:	2900      	cmp	r1, #0
    6056:	d103      	bne.n	6060 <start_cal_process+0x18>
    6058:	e843 2000 	strex	r0, r2, [r3]
    605c:	2800      	cmp	r0, #0
    605e:	d1f7      	bne.n	6050 <start_cal_process+0x8>
    6060:	f3bf 8f5b 	dmb	ish
	cal_process_in_progress = 0;
}

static void start_cal_process(void)
{
	if (atomic_cas(&cal_process_in_progress, 0, 1) == false) {
    6064:	d10a      	bne.n	607c <start_cal_process+0x34>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    6066:	4907      	ldr	r1, [pc, #28]	; (6084 <start_cal_process+0x3c>)
    6068:	2300      	movs	r3, #0
    606a:	60cb      	str	r3, [r1, #12]
    606c:	4b06      	ldr	r3, [pc, #24]	; (6088 <start_cal_process+0x40>)
    606e:	604b      	str	r3, [r1, #4]
    6070:	2303      	movs	r3, #3
    6072:	608b      	str	r3, [r1, #8]
	err = onoff_request(mgr, cli);
    6074:	4b05      	ldr	r3, [pc, #20]	; (608c <start_cal_process+0x44>)
    6076:	6818      	ldr	r0, [r3, #0]
    6078:	f006 bde6 	b.w	cc48 <onoff_request>
		 * will be released at the end of calibration process and
		 * stopped in consequence.
		 */
		lf_request();
	}
}
    607c:	4770      	bx	lr
    607e:	bf00      	nop
    6080:	20001808 	.word	0x20001808
    6084:	200017f0 	.word	0x200017f0
    6088:	00006151 	.word	0x00006151
    608c:	200017ec 	.word	0x200017ec

00006090 <start_cycle>:
{
    6090:	b507      	push	{r0, r1, r2, lr}
	z_impl_k_timer_start(timer, duration, period);
    6092:	2200      	movs	r2, #0
    6094:	2300      	movs	r3, #0
    6096:	e9cd 2300 	strd	r2, r3, [sp]
    609a:	4808      	ldr	r0, [pc, #32]	; (60bc <start_cycle+0x2c>)
    609c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    60a0:	2300      	movs	r3, #0
    60a2:	f006 fa69 	bl	c578 <z_impl_k_timer_start>
	clk_release(&mgrs[CLOCK_CONTROL_NRF_TYPE_HFCLK]);
    60a6:	4b06      	ldr	r3, [pc, #24]	; (60c0 <start_cycle+0x30>)
	err = onoff_release(mgr);
    60a8:	6818      	ldr	r0, [r3, #0]
    60aa:	f006 fe25 	bl	ccf8 <onoff_release>
	cal_process_in_progress = 0;
    60ae:	4b05      	ldr	r3, [pc, #20]	; (60c4 <start_cycle+0x34>)
    60b0:	2200      	movs	r2, #0
    60b2:	601a      	str	r2, [r3, #0]
}
    60b4:	b003      	add	sp, #12
    60b6:	f85d fb04 	ldr.w	pc, [sp], #4
    60ba:	bf00      	nop
    60bc:	20000330 	.word	0x20000330
    60c0:	200017ec 	.word	0x200017ec
    60c4:	20001808 	.word	0x20001808

000060c8 <measure_temperature>:
/* Function determines if calibration should be performed based on temperature
 * measurement. Function is called from system work queue context. It is
 * reading temperature from TEMP sensor and compares with last measurement.
 */
static void measure_temperature(struct k_work *work)
{
    60c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    60ca:	4e1c      	ldr	r6, [pc, #112]	; (613c <measure_temperature+0x74>)
    60cc:	4c1c      	ldr	r4, [pc, #112]	; (6140 <measure_temperature+0x78>)
    60ce:	68b7      	ldr	r7, [r6, #8]
    60d0:	4d1c      	ldr	r5, [pc, #112]	; (6144 <measure_temperature+0x7c>)
    60d2:	68fb      	ldr	r3, [r7, #12]
    60d4:	2139      	movs	r1, #57	; 0x39
    60d6:	4630      	mov	r0, r6
    60d8:	4798      	blx	r3
	if (rc == 0) {
    60da:	b140      	cbz	r0, 60ee <measure_temperature+0x26>

	rc = get_temperature(&temperature);

	if (rc != 0) {
		/* Temperature read failed, force calibration. */
		calib_skip_cnt = 0;
    60dc:	2300      	movs	r3, #0
    60de:	7023      	strb	r3, [r4, #0]
		diff = abs(temperature - prev_temperature);
	}

	if ((calib_skip_cnt == 0) ||
		(diff >= CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_TEMP_DIFF)) {
		prev_temperature = temperature;
    60e0:	802b      	strh	r3, [r5, #0]
	nrfx_clock_calibration_start();
    60e2:	f003 f84f 	bl	9184 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    60e6:	2301      	movs	r3, #1
    60e8:	7023      	strb	r3, [r4, #0]
		start_cycle();
	}

	LOG_DBG("Calibration %s. Temperature diff: %d (in 0.25'C units).",
			started ? "started" : "skipped", diff);
}
    60ea:	b003      	add	sp, #12
    60ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return api->channel_get(dev, chan, val);
    60ee:	210c      	movs	r1, #12
    60f0:	693b      	ldr	r3, [r7, #16]
    60f2:	466a      	mov	r2, sp
    60f4:	4630      	mov	r0, r6
    60f6:	4798      	blx	r3
	if (rc == 0) {
    60f8:	2800      	cmp	r0, #0
    60fa:	d1ef      	bne.n	60dc <measure_temperature+0x14>
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    60fc:	4a12      	ldr	r2, [pc, #72]	; (6148 <measure_temperature+0x80>)
    60fe:	9b01      	ldr	r3, [sp, #4]
    6100:	fb93 f3f2 	sdiv	r3, r3, r2
    6104:	9a00      	ldr	r2, [sp, #0]
	if ((calib_skip_cnt == 0) ||
    6106:	7821      	ldrb	r1, [r4, #0]
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    6108:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    610c:	b21b      	sxth	r3, r3
		diff = abs(temperature - prev_temperature);
    610e:	f9b5 2000 	ldrsh.w	r2, [r5]
	if ((calib_skip_cnt == 0) ||
    6112:	2900      	cmp	r1, #0
    6114:	d0e4      	beq.n	60e0 <measure_temperature+0x18>
		diff = abs(temperature - prev_temperature);
    6116:	1a9a      	subs	r2, r3, r2
void srand(unsigned int seed);
#endif /* CONFIG_MINIMAL_LIBC_RAND */

static inline int abs(int __n)
{
	return (__n < 0) ? -__n : __n;
    6118:	2a00      	cmp	r2, #0
    611a:	bfb8      	it	lt
    611c:	4252      	neglt	r2, r2
	if ((calib_skip_cnt == 0) ||
    611e:	b212      	sxth	r2, r2
    6120:	2a01      	cmp	r2, #1
    6122:	dcdd      	bgt.n	60e0 <measure_temperature+0x18>
		total_skips_cnt++;
    6124:	4a09      	ldr	r2, [pc, #36]	; (614c <measure_temperature+0x84>)
    6126:	6813      	ldr	r3, [r2, #0]
		calib_skip_cnt--;
    6128:	3901      	subs	r1, #1
		total_skips_cnt++;
    612a:	3301      	adds	r3, #1
		calib_skip_cnt--;
    612c:	7021      	strb	r1, [r4, #0]
		total_skips_cnt++;
    612e:	6013      	str	r3, [r2, #0]
}
    6130:	b003      	add	sp, #12
    6132:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		start_cycle();
    6136:	f7ff bfab 	b.w	6090 <start_cycle>
    613a:	bf00      	nop
    613c:	0000e7f0 	.word	0x0000e7f0
    6140:	20001d28 	.word	0x20001d28
    6144:	20001cd8 	.word	0x20001cd8
    6148:	0003d090 	.word	0x0003d090
    614c:	20001800 	.word	0x20001800

00006150 <cal_hf_callback>:
{
    6150:	b508      	push	{r3, lr}
    6152:	4807      	ldr	r0, [pc, #28]	; (6170 <cal_hf_callback+0x20>)
    6154:	f007 ff4f 	bl	dff6 <z_device_is_ready>
	if (!device_is_ready(temp_sensor)) {
    6158:	b928      	cbnz	r0, 6166 <cal_hf_callback+0x16>
	nrfx_clock_calibration_start();
    615a:	f003 f813 	bl	9184 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    615e:	4b05      	ldr	r3, [pc, #20]	; (6174 <cal_hf_callback+0x24>)
    6160:	2201      	movs	r2, #1
    6162:	701a      	strb	r2, [r3, #0]
}
    6164:	bd08      	pop	{r3, pc}
    6166:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_submit(&temp_measure_work);
    616a:	4803      	ldr	r0, [pc, #12]	; (6178 <cal_hf_callback+0x28>)
    616c:	f005 bc5c 	b.w	ba28 <k_work_submit>
    6170:	0000e7f0 	.word	0x0000e7f0
    6174:	20001d28 	.word	0x20001d28
    6178:	2000002c 	.word	0x2000002c

0000617c <z_nrf_clock_calibration_init>:
#endif /* USE_TEMP_SENSOR */

void z_nrf_clock_calibration_init(struct onoff_manager *onoff_mgrs)
{
	mgrs = onoff_mgrs;
    617c:	4b03      	ldr	r3, [pc, #12]	; (618c <z_nrf_clock_calibration_init+0x10>)
	total_cnt = 0;
    617e:	4a04      	ldr	r2, [pc, #16]	; (6190 <z_nrf_clock_calibration_init+0x14>)
	mgrs = onoff_mgrs;
    6180:	6018      	str	r0, [r3, #0]
	total_cnt = 0;
    6182:	2300      	movs	r3, #0
    6184:	6013      	str	r3, [r2, #0]
	total_skips_cnt = 0;
    6186:	4a03      	ldr	r2, [pc, #12]	; (6194 <z_nrf_clock_calibration_init+0x18>)
    6188:	6013      	str	r3, [r2, #0]
}
    618a:	4770      	bx	lr
    618c:	200017ec 	.word	0x200017ec
    6190:	20001804 	.word	0x20001804
    6194:	20001800 	.word	0x20001800

00006198 <z_nrf_clock_calibration_lfclk_started>:

static void start_unconditional_cal_process(void)
{
	calib_skip_cnt = 0;
    6198:	4b02      	ldr	r3, [pc, #8]	; (61a4 <z_nrf_clock_calibration_lfclk_started+0xc>)
    619a:	2200      	movs	r2, #0
    619c:	701a      	strb	r2, [r3, #0]
	start_cal_process();
    619e:	f7ff bf53 	b.w	6048 <start_cal_process>
    61a2:	bf00      	nop
    61a4:	20001d28 	.word	0x20001d28

000061a8 <z_nrf_clock_calibration_lfclk_stopped>:
	z_impl_k_timer_stop(timer);
    61a8:	4801      	ldr	r0, [pc, #4]	; (61b0 <z_nrf_clock_calibration_lfclk_stopped+0x8>)
    61aa:	f008 ba01 	b.w	e5b0 <z_impl_k_timer_stop>
    61ae:	bf00      	nop
    61b0:	20000330 	.word	0x20000330

000061b4 <z_nrf_clock_calibration_done_handler>:
	LOG_DBG("Calibration stopped");
}

void z_nrf_clock_calibration_done_handler(void)
{
	total_cnt++;
    61b4:	4a02      	ldr	r2, [pc, #8]	; (61c0 <z_nrf_clock_calibration_done_handler+0xc>)
    61b6:	6813      	ldr	r3, [r2, #0]
    61b8:	3301      	adds	r3, #1
    61ba:	6013      	str	r3, [r2, #0]
	LOG_DBG("Calibration done.");

	start_cycle();
    61bc:	f7ff bf68 	b.w	6090 <start_cycle>
    61c0:	20001804 	.word	0x20001804

000061c4 <rtt_console_init>:

	return character;
}

static int rtt_console_init(void)
{
    61c4:	b510      	push	{r4, lr}

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
    61c6:	4c04      	ldr	r4, [pc, #16]	; (61d8 <rtt_console_init+0x14>)
    61c8:	4620      	mov	r0, r4
    61ca:	f7fb fba3 	bl	1914 <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
    61ce:	4620      	mov	r0, r4
    61d0:	f7fe fcda 	bl	4b88 <__stdout_hook_install>

	return 0;
}
    61d4:	2000      	movs	r0, #0
    61d6:	bd10      	pop	{r4, pc}
    61d8:	000061dd 	.word	0x000061dd

000061dc <rtt_console_out>:
{
    61dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    61de:	4e13      	ldr	r6, [pc, #76]	; (622c <rtt_console_out+0x50>)
	char c = (char)character;
    61e0:	f88d 0007 	strb.w	r0, [sp, #7]
{
    61e4:	4604      	mov	r4, r0
	char c = (char)character;
    61e6:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
    61e8:	f004 ff00 	bl	afec <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    61ec:	2201      	movs	r2, #1
    61ee:	f10d 0107 	add.w	r1, sp, #7
    61f2:	2000      	movs	r0, #0
    61f4:	f004 fec4 	bl	af80 <SEGGER_RTT_WriteNoLock>
    61f8:	4607      	mov	r7, r0
		SEGGER_RTT_UNLOCK();
    61fa:	f004 ff01 	bl	b000 <zephyr_rtt_mutex_unlock>
		if (cnt) {
    61fe:	b127      	cbz	r7, 620a <rtt_console_out+0x2e>
			host_present = true;
    6200:	2301      	movs	r3, #1
    6202:	7033      	strb	r3, [r6, #0]
}
    6204:	4620      	mov	r0, r4
    6206:	b003      	add	sp, #12
    6208:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
    620a:	7833      	ldrb	r3, [r6, #0]
    620c:	2b00      	cmp	r3, #0
    620e:	d0f9      	beq.n	6204 <rtt_console_out+0x28>
			if (max_cnt) {
    6210:	3d01      	subs	r5, #1
    6212:	d008      	beq.n	6226 <rtt_console_out+0x4a>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    6214:	f007 ff3d 	bl	e092 <k_is_in_isr>
    6218:	2800      	cmp	r0, #0
    621a:	d1e5      	bne.n	61e8 <rtt_console_out+0xc>
	return z_impl_k_sleep(timeout);
    621c:	2100      	movs	r1, #0
    621e:	2042      	movs	r0, #66	; 0x42
    6220:	f005 ff32 	bl	c088 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    6224:	e7e0      	b.n	61e8 <rtt_console_out+0xc>
				host_present = false;
    6226:	7035      	strb	r5, [r6, #0]
    6228:	e7ec      	b.n	6204 <rtt_console_out+0x28>
    622a:	bf00      	nop
    622c:	20001d29 	.word	0x20001d29

00006230 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    6230:	b530      	push	{r4, r5, lr}
	return port->config;
    6232:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    6234:	7b05      	ldrb	r5, [r0, #12]
    6236:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    623a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    623e:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    6240:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    6244:	d105      	bne.n	6252 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    6246:	4620      	mov	r0, r4
    6248:	f003 fa3e 	bl	96c8 <nrfx_gpiote_trigger_disable>

		return 0;
    624c:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    624e:	b005      	add	sp, #20
    6250:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    6252:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    6254:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    6258:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    625c:	d114      	bne.n	6288 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    625e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    6262:	bf0c      	ite	eq
    6264:	2304      	moveq	r3, #4
    6266:	2305      	movne	r3, #5
    6268:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    626c:	2300      	movs	r3, #0
    626e:	4619      	mov	r1, r3
    6270:	aa02      	add	r2, sp, #8
    6272:	4620      	mov	r0, r4
    6274:	f003 f85e 	bl	9334 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    6278:	4b1d      	ldr	r3, [pc, #116]	; (62f0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    627a:	4298      	cmp	r0, r3
    627c:	d135      	bne.n	62ea <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    627e:	2101      	movs	r1, #1
    6280:	4620      	mov	r0, r4
    6282:	f003 f9dd 	bl	9640 <nrfx_gpiote_trigger_enable>
	return 0;
    6286:	e7e1      	b.n	624c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    6288:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    628c:	d022      	beq.n	62d4 <gpio_nrfx_pin_interrupt_configure+0xa4>
    628e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    6292:	bf14      	ite	ne
    6294:	2301      	movne	r3, #1
    6296:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    6298:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    629c:	6883      	ldr	r3, [r0, #8]
    629e:	40cb      	lsrs	r3, r1
    62a0:	07d9      	lsls	r1, r3, #31
    62a2:	d4e3      	bmi.n	626c <gpio_nrfx_pin_interrupt_configure+0x3c>
    62a4:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    62a8:	d1e0      	bne.n	626c <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    62aa:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    62ae:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    62b2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    62b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    62ba:	07db      	lsls	r3, r3, #31
    62bc:	d4d6      	bmi.n	626c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    62be:	f10d 0507 	add.w	r5, sp, #7
    62c2:	4629      	mov	r1, r5
    62c4:	4620      	mov	r0, r4
    62c6:	f003 f967 	bl	9598 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    62ca:	4b0a      	ldr	r3, [pc, #40]	; (62f4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    62cc:	4298      	cmp	r0, r3
    62ce:	d003      	beq.n	62d8 <gpio_nrfx_pin_interrupt_configure+0xa8>
		trigger_config.p_in_channel = &ch;
    62d0:	9503      	str	r5, [sp, #12]
    62d2:	e7cb      	b.n	626c <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    62d4:	2303      	movs	r3, #3
    62d6:	e7df      	b.n	6298 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    62d8:	4628      	mov	r0, r5
    62da:	f003 f9ab 	bl	9634 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    62de:	4b04      	ldr	r3, [pc, #16]	; (62f0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    62e0:	4298      	cmp	r0, r3
    62e2:	d0f5      	beq.n	62d0 <gpio_nrfx_pin_interrupt_configure+0xa0>
				return -ENOMEM;
    62e4:	f06f 000b 	mvn.w	r0, #11
    62e8:	e7b1      	b.n	624e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    62ea:	f06f 0015 	mvn.w	r0, #21
    62ee:	e7ae      	b.n	624e <gpio_nrfx_pin_interrupt_configure+0x1e>
    62f0:	0bad0000 	.word	0x0bad0000
    62f4:	0bad0004 	.word	0x0bad0004

000062f8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    62f8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    62fa:	f003 f98b 	bl	9614 <nrfx_gpiote_is_init>
    62fe:	4604      	mov	r4, r0
    6300:	b968      	cbnz	r0, 631e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    6302:	f003 f95f 	bl	95c4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    6306:	4b08      	ldr	r3, [pc, #32]	; (6328 <gpio_nrfx_init+0x30>)
    6308:	4298      	cmp	r0, r3
    630a:	d10a      	bne.n	6322 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    630c:	4807      	ldr	r0, [pc, #28]	; (632c <gpio_nrfx_init+0x34>)
    630e:	4621      	mov	r1, r4
    6310:	f003 f93c 	bl	958c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    6314:	4622      	mov	r2, r4
    6316:	2105      	movs	r1, #5
    6318:	2006      	movs	r0, #6
    631a:	f7fd fed5 	bl	40c8 <z_arm_irq_priority_set>
		return 0;
    631e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    6320:	bd10      	pop	{r4, pc}
		return -EIO;
    6322:	f06f 0004 	mvn.w	r0, #4
    6326:	e7fb      	b.n	6320 <gpio_nrfx_init+0x28>
    6328:	0bad0000 	.word	0x0bad0000
    632c:	00006331 	.word	0x00006331

00006330 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    6330:	0943      	lsrs	r3, r0, #5
{
    6332:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    6334:	d107      	bne.n	6346 <nrfx_gpio_handler+0x16>
	return list->head;
    6336:	4b0b      	ldr	r3, [pc, #44]	; (6364 <nrfx_gpio_handler+0x34>)
    6338:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    633a:	b121      	cbz	r1, 6346 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    633c:	2501      	movs	r5, #1
	return node->next;
    633e:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    6340:	4e09      	ldr	r6, [pc, #36]	; (6368 <nrfx_gpio_handler+0x38>)
    6342:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    6344:	b901      	cbnz	r1, 6348 <nrfx_gpio_handler+0x18>
}
    6346:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    6348:	688a      	ldr	r2, [r1, #8]
    634a:	402a      	ands	r2, r5
    634c:	d002      	beq.n	6354 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    634e:	684b      	ldr	r3, [r1, #4]
    6350:	4630      	mov	r0, r6
    6352:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    6354:	b11c      	cbz	r4, 635e <nrfx_gpio_handler+0x2e>
    6356:	6823      	ldr	r3, [r4, #0]
    6358:	4621      	mov	r1, r4
    635a:	461c      	mov	r4, r3
    635c:	e7f2      	b.n	6344 <nrfx_gpio_handler+0x14>
    635e:	4623      	mov	r3, r4
    6360:	e7fa      	b.n	6358 <nrfx_gpio_handler+0x28>
    6362:	bf00      	nop
    6364:	2000180c 	.word	0x2000180c
    6368:	0000e790 	.word	0x0000e790

0000636c <gpio_nrfx_pin_configure>:
{
    636c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    6370:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6372:	7b3b      	ldrb	r3, [r7, #12]
    6374:	f001 051f 	and.w	r5, r1, #31
    6378:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    637c:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    637e:	4628      	mov	r0, r5
    6380:	f10d 0103 	add.w	r1, sp, #3
{
    6384:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    6386:	f003 f907 	bl	9598 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    638a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    638e:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    6390:	d10b      	bne.n	63aa <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    6392:	4628      	mov	r0, r5
    6394:	f003 f9c0 	bl	9718 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    6398:	4b3d      	ldr	r3, [pc, #244]	; (6490 <gpio_nrfx_pin_configure+0x124>)
    639a:	4598      	cmp	r8, r3
    639c:	d103      	bne.n	63a6 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    639e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    63a2:	f003 f941 	bl	9628 <nrfx_gpiote_channel_free>
		return 0;
    63a6:	2000      	movs	r0, #0
    63a8:	e00c      	b.n	63c4 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    63aa:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    63ac:	4619      	mov	r1, r3
    63ae:	aa02      	add	r2, sp, #8
    63b0:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    63b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    63b6:	f002 ffbd 	bl	9334 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    63ba:	4b35      	ldr	r3, [pc, #212]	; (6490 <gpio_nrfx_pin_configure+0x124>)
    63bc:	4298      	cmp	r0, r3
    63be:	d004      	beq.n	63ca <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    63c0:	f06f 0015 	mvn.w	r0, #21
}
    63c4:	b004      	add	sp, #16
    63c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    63ca:	4580      	cmp	r8, r0
    63cc:	d103      	bne.n	63d6 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    63ce:	f89d 0003 	ldrb.w	r0, [sp, #3]
    63d2:	f003 f929 	bl	9628 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    63d6:	03a3      	lsls	r3, r4, #14
    63d8:	d54b      	bpl.n	6472 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    63da:	f240 3306 	movw	r3, #774	; 0x306
    63de:	4023      	ands	r3, r4
    63e0:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    63e4:	d019      	beq.n	641a <gpio_nrfx_pin_configure+0xae>
    63e6:	d80c      	bhi.n	6402 <gpio_nrfx_pin_configure+0x96>
    63e8:	2b06      	cmp	r3, #6
    63ea:	d017      	beq.n	641c <gpio_nrfx_pin_configure+0xb0>
    63ec:	d804      	bhi.n	63f8 <gpio_nrfx_pin_configure+0x8c>
    63ee:	b1ab      	cbz	r3, 641c <gpio_nrfx_pin_configure+0xb0>
    63f0:	2b02      	cmp	r3, #2
    63f2:	d1e5      	bne.n	63c0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    63f4:	2304      	movs	r3, #4
    63f6:	e011      	b.n	641c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    63f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    63fc:	d1e0      	bne.n	63c0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    63fe:	2301      	movs	r3, #1
    6400:	e00c      	b.n	641c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    6402:	f240 2202 	movw	r2, #514	; 0x202
    6406:	4293      	cmp	r3, r2
    6408:	d027      	beq.n	645a <gpio_nrfx_pin_configure+0xee>
    640a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    640e:	d026      	beq.n	645e <gpio_nrfx_pin_configure+0xf2>
    6410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6414:	d1d4      	bne.n	63c0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    6416:	2302      	movs	r3, #2
    6418:	e000      	b.n	641c <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    641a:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    641c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    6420:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    6424:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    6428:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    642a:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    642e:	bf54      	ite	pl
    6430:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    6434:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    6436:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    6438:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    643c:	d511      	bpl.n	6462 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    643e:	687a      	ldr	r2, [r7, #4]
    6440:	2301      	movs	r3, #1
    6442:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    6444:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    6448:	2200      	movs	r2, #0
    644a:	a901      	add	r1, sp, #4
    644c:	4628      	mov	r0, r5
    644e:	f003 f81f 	bl	9490 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    6452:	4b0f      	ldr	r3, [pc, #60]	; (6490 <gpio_nrfx_pin_configure+0x124>)
    6454:	4298      	cmp	r0, r3
    6456:	d0a6      	beq.n	63a6 <gpio_nrfx_pin_configure+0x3a>
    6458:	e7b2      	b.n	63c0 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    645a:	2305      	movs	r3, #5
    645c:	e7de      	b.n	641c <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    645e:	2303      	movs	r3, #3
    6460:	e7dc      	b.n	641c <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    6462:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    6464:	bf41      	itttt	mi
    6466:	2301      	movmi	r3, #1
    6468:	687a      	ldrmi	r2, [r7, #4]
    646a:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    646c:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    6470:	e7ea      	b.n	6448 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    6472:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    6474:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    6478:	bf54      	ite	pl
    647a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    647e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    6480:	461a      	mov	r2, r3
    6482:	a901      	add	r1, sp, #4
    6484:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    6486:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    648a:	f002 ff53 	bl	9334 <nrfx_gpiote_input_configure>
    648e:	e7e0      	b.n	6452 <gpio_nrfx_pin_configure+0xe6>
    6490:	0bad0000 	.word	0x0bad0000

00006494 <qdec_nrfx_channel_get>:
	const int32_t steps = QDEC_STEPS;

	ARG_UNUSED(dev);
	LOG_DBG("");

	if (chan != SENSOR_CHAN_ROTATION) {
    6494:	2922      	cmp	r1, #34	; 0x22
{
    6496:	b510      	push	{r4, lr}
	if (chan != SENSOR_CHAN_ROTATION) {
    6498:	d114      	bne.n	64c4 <qdec_nrfx_channel_get+0x30>
    649a:	f04f 0340 	mov.w	r3, #64	; 0x40
    649e:	f3ef 8411 	mrs	r4, BASEPRI
    64a2:	f383 8812 	msr	BASEPRI_MAX, r3
    64a6:	f3bf 8f6f 	isb	sy
		return -ENOTSUP;
	}

	key = irq_lock();
	acc = data->acc;
    64aa:	4908      	ldr	r1, [pc, #32]	; (64cc <qdec_nrfx_channel_get+0x38>)
	data->acc = 0;
    64ac:	2000      	movs	r0, #0
	acc = data->acc;
    64ae:	680b      	ldr	r3, [r1, #0]
	data->acc = 0;
    64b0:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
    64b2:	f384 8811 	msr	BASEPRI, r4
    64b6:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BUILD_ASSERT(QDEC_STEPS > 0, "only positive number valid");
	BUILD_ASSERT(QDEC_STEPS <= 2048, "overflow possible");

	val->val1 = (acc * FULL_ANGLE) / steps;
    64ba:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	val->val2 = (acc * FULL_ANGLE) - (val->val1 * steps);
    64be:	e9c2 3000 	strd	r3, r0, [r2]
		val->val2 *= 1000000;
		val->val2 /= steps;
	}

	return 0;
}
    64c2:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    64c4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    64c8:	e7fb      	b.n	64c2 <qdec_nrfx_channel_get+0x2e>
    64ca:	bf00      	nop
    64cc:	20001818 	.word	0x20001818

000064d0 <qdec_nrfx_trigger_set>:
	unsigned int key;

	ARG_UNUSED(dev);
	LOG_DBG("");

	if (trig->type != SENSOR_TRIG_DATA_READY) {
    64d0:	880b      	ldrh	r3, [r1, #0]
    64d2:	2b01      	cmp	r3, #1
    64d4:	d115      	bne.n	6502 <qdec_nrfx_trigger_set+0x32>
		return -ENOTSUP;
	}

	if ((trig->chan != SENSOR_CHAN_ALL) &&
    64d6:	884b      	ldrh	r3, [r1, #2]
    64d8:	2b39      	cmp	r3, #57	; 0x39
    64da:	d001      	beq.n	64e0 <qdec_nrfx_trigger_set+0x10>
    64dc:	2b22      	cmp	r3, #34	; 0x22
    64de:	d110      	bne.n	6502 <qdec_nrfx_trigger_set+0x32>
	__asm__ volatile(
    64e0:	f04f 0340 	mov.w	r3, #64	; 0x40
    64e4:	f3ef 8011 	mrs	r0, BASEPRI
    64e8:	f383 8812 	msr	BASEPRI_MAX, r3
    64ec:	f3bf 8f6f 	isb	sy
	    (trig->chan != SENSOR_CHAN_ROTATION)) {
		return -ENOTSUP;
	}

	key = irq_lock();
	data->data_ready_handler = handler;
    64f0:	4b05      	ldr	r3, [pc, #20]	; (6508 <qdec_nrfx_trigger_set+0x38>)
	data->data_ready_trigger = trig;
    64f2:	e9c3 2101 	strd	r2, r1, [r3, #4]
	__asm__ volatile(
    64f6:	f380 8811 	msr	BASEPRI, r0
    64fa:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	return 0;
    64fe:	2000      	movs	r0, #0
    6500:	4770      	bx	lr
		return -ENOTSUP;
    6502:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    6506:	4770      	bx	lr
    6508:	20001818 	.word	0x20001818

0000650c <accumulate.constprop.0>:
static void accumulate(struct qdec_nrfx_data *data, int16_t acc)
    650c:	b510      	push	{r4, lr}
	__asm__ volatile(
    650e:	f04f 0340 	mov.w	r3, #64	; 0x40
    6512:	f3ef 8111 	mrs	r1, BASEPRI
    6516:	f383 8812 	msr	BASEPRI_MAX, r3
    651a:	f3bf 8f6f 	isb	sy
	bool overflow = ((acc > 0) && (ACC_MAX - acc < data->acc)) ||
    651e:	2800      	cmp	r0, #0
    6520:	4b0b      	ldr	r3, [pc, #44]	; (6550 <accumulate.constprop.0+0x44>)
    6522:	dd0a      	ble.n	653a <accumulate.constprop.0+0x2e>
    6524:	681c      	ldr	r4, [r3, #0]
    6526:	f5c0 02b6 	rsb	r2, r0, #5963776	; 0x5b0000
    652a:	f502 62b6 	add.w	r2, r2, #1456	; 0x5b0
    652e:	42a2      	cmp	r2, r4
    6530:	db09      	blt.n	6546 <accumulate.constprop.0+0x3a>
		data->acc += acc;
    6532:	681a      	ldr	r2, [r3, #0]
    6534:	4402      	add	r2, r0
    6536:	601a      	str	r2, [r3, #0]
    6538:	e005      	b.n	6546 <accumulate.constprop.0+0x3a>
	bool overflow = ((acc > 0) && (ACC_MAX - acc < data->acc)) ||
    653a:	d0fa      	beq.n	6532 <accumulate.constprop.0+0x26>
			((acc < 0) && (ACC_MIN - acc > data->acc));
    653c:	4a05      	ldr	r2, [pc, #20]	; (6554 <accumulate.constprop.0+0x48>)
    653e:	681c      	ldr	r4, [r3, #0]
    6540:	1a12      	subs	r2, r2, r0
    6542:	42a2      	cmp	r2, r4
    6544:	ddf5      	ble.n	6532 <accumulate.constprop.0+0x26>
	__asm__ volatile(
    6546:	f381 8811 	msr	BASEPRI, r1
    654a:	f3bf 8f6f 	isb	sy
}
    654e:	bd10      	pop	{r4, pc}
    6550:	20001818 	.word	0x20001818
    6554:	ffa4fa50 	.word	0xffa4fa50

00006558 <qdec_nrfx_event_handler>:

static void qdec_nrfx_event_handler(nrfx_qdec_event_t event)
{
    6558:	b590      	push	{r4, r7, lr}
    655a:	b083      	sub	sp, #12
    655c:	af00      	add	r7, sp, #0
    655e:	f107 0308 	add.w	r3, r7, #8
    6562:	e903 0003 	stmdb	r3, {r0, r1}
    6566:	883b      	ldrh	r3, [r7, #0]
	sensor_trigger_handler_t handler;
	const struct sensor_trigger *trig;
	unsigned int key;

	switch (event.type) {
    6568:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
    656c:	d118      	bne.n	65a0 <qdec_nrfx_event_handler+0x48>
	case NRF_QDEC_EVENT_REPORTRDY:
		accumulate(&qdec_nrfx_data, event.data.report.acc);
    656e:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
    6572:	f7ff ffcb 	bl	650c <accumulate.constprop.0>
	__asm__ volatile(
    6576:	f04f 0340 	mov.w	r3, #64	; 0x40
    657a:	f3ef 8011 	mrs	r0, BASEPRI
    657e:	f383 8812 	msr	BASEPRI_MAX, r3
    6582:	f3bf 8f6f 	isb	sy

		key = irq_lock();
		handler = qdec_nrfx_data.data_ready_handler;
    6586:	4a0f      	ldr	r2, [pc, #60]	; (65c4 <qdec_nrfx_event_handler+0x6c>)
		trig = qdec_nrfx_data.data_ready_trigger;
    6588:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
	__asm__ volatile(
    658c:	f380 8811 	msr	BASEPRI, r0
    6590:	f3bf 8f6f 	isb	sy
		irq_unlock(key);

		if (handler) {
    6594:	b10b      	cbz	r3, 659a <qdec_nrfx_event_handler+0x42>
			handler(DEVICE_DT_INST_GET(0), trig);
    6596:	480c      	ldr	r0, [pc, #48]	; (65c8 <qdec_nrfx_event_handler+0x70>)
    6598:	4798      	blx	r3

	default:
		LOG_ERR("unhandled event (0x%x)", event.type);
		break;
	}
}
    659a:	370c      	adds	r7, #12
    659c:	46bd      	mov	sp, r7
    659e:	bd90      	pop	{r4, r7, pc}
		LOG_ERR("unhandled event (0x%x)", event.type);
    65a0:	466c      	mov	r4, sp
    65a2:	b088      	sub	sp, #32
    65a4:	466a      	mov	r2, sp
    65a6:	4909      	ldr	r1, [pc, #36]	; (65cc <qdec_nrfx_event_handler+0x74>)
	switch (event.type) {
    65a8:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("unhandled event (0x%x)", event.type);
    65ac:	2303      	movs	r3, #3
    65ae:	f842 3f10 	str.w	r3, [r2, #16]!
    65b2:	4807      	ldr	r0, [pc, #28]	; (65d0 <qdec_nrfx_event_handler+0x78>)
    65b4:	2300      	movs	r3, #0
    65b6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    65ba:	f7fc f91f 	bl	27fc <z_impl_z_log_msg_static_create>
    65be:	46a5      	mov	sp, r4
}
    65c0:	e7eb      	b.n	659a <qdec_nrfx_event_handler+0x42>
    65c2:	bf00      	nop
    65c4:	20001818 	.word	0x20001818
    65c8:	0000e7d8 	.word	0x0000e7d8
    65cc:	0000fc31 	.word	0x0000fc31
    65d0:	0000e908 	.word	0x0000e908

000065d4 <qdec_nrfx_init.part.0>:
#endif
}

NRF_DT_CHECK_NODE_HAS_PINCTRL_SLEEP(DT_DRV_INST(0));

static int qdec_nrfx_init(const struct device *dev)
    65d4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	if (ret < 0) {
		return ret;
	}

	nerr = nrfx_qdec_init(&config, qdec_nrfx_event_handler);
    65d6:	491a      	ldr	r1, [pc, #104]	; (6640 <qdec_nrfx_init.part.0+0x6c>)
    65d8:	481a      	ldr	r0, [pc, #104]	; (6644 <qdec_nrfx_init.part.0+0x70>)
    65da:	f003 fa75 	bl	9ac8 <nrfx_qdec_init>
	if (nerr == NRFX_ERROR_INVALID_STATE) {
    65de:	4b1a      	ldr	r3, [pc, #104]	; (6648 <qdec_nrfx_init.part.0+0x74>)
    65e0:	4298      	cmp	r0, r3
    65e2:	d10f      	bne.n	6604 <qdec_nrfx_init.part.0+0x30>
		LOG_ERR("qdec already in use");
    65e4:	4b19      	ldr	r3, [pc, #100]	; (664c <qdec_nrfx_init.part.0+0x78>)
    65e6:	9305      	str	r3, [sp, #20]
    65e8:	2302      	movs	r3, #2
    65ea:	9304      	str	r3, [sp, #16]
    65ec:	4818      	ldr	r0, [pc, #96]	; (6650 <qdec_nrfx_init.part.0+0x7c>)
    65ee:	2300      	movs	r3, #0
    65f0:	aa04      	add	r2, sp, #16
    65f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    65f6:	f7fc f901 	bl	27fc <z_impl_z_log_msg_static_create>
		return -EBUSY;
    65fa:	f06f 000f 	mvn.w	r0, #15

	qdec_nrfx_gpio_ctrl(true);
	nrfx_qdec_enable();

	return 0;
}
    65fe:	b007      	add	sp, #28
    6600:	f85d fb04 	ldr.w	pc, [sp], #4
	} else if (nerr != NRFX_SUCCESS) {
    6604:	4b13      	ldr	r3, [pc, #76]	; (6654 <qdec_nrfx_init.part.0+0x80>)
    6606:	4298      	cmp	r0, r3
    6608:	d00d      	beq.n	6626 <qdec_nrfx_init.part.0+0x52>
		LOG_ERR("failed to initialize qdec");
    660a:	4b13      	ldr	r3, [pc, #76]	; (6658 <qdec_nrfx_init.part.0+0x84>)
    660c:	9305      	str	r3, [sp, #20]
    660e:	2302      	movs	r3, #2
    6610:	9304      	str	r3, [sp, #16]
    6612:	480f      	ldr	r0, [pc, #60]	; (6650 <qdec_nrfx_init.part.0+0x7c>)
    6614:	2300      	movs	r3, #0
    6616:	aa04      	add	r2, sp, #16
    6618:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    661c:	f7fc f8ee 	bl	27fc <z_impl_z_log_msg_static_create>
		return -EFAULT;
    6620:	f06f 000d 	mvn.w	r0, #13
    6624:	e7eb      	b.n	65fe <qdec_nrfx_init.part.0+0x2a>
    p_reg->OUTCLR = clr_mask;
    6626:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    662a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    662e:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = cnf;
    6632:	2203      	movs	r2, #3
    6634:	f8c3 2778 	str.w	r2, [r3, #1912]	; 0x778
	nrfx_qdec_enable();
    6638:	f003 fab4 	bl	9ba4 <nrfx_qdec_enable>
	return 0;
    663c:	2000      	movs	r0, #0
    663e:	e7de      	b.n	65fe <qdec_nrfx_init.part.0+0x2a>
    6640:	00006559 	.word	0x00006559
    6644:	0000eaf4 	.word	0x0000eaf4
    6648:	0bad0005 	.word	0x0bad0005
    664c:	0000fc48 	.word	0x0000fc48
    6650:	0000e908 	.word	0x0000e908
    6654:	0bad0000 	.word	0x0bad0000
    6658:	0000fc5c 	.word	0x0000fc5c

0000665c <qdec_nrfx_init>:
{
    665c:	b507      	push	{r0, r1, r2, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    665e:	2200      	movs	r2, #0
    6660:	2101      	movs	r1, #1
    6662:	2012      	movs	r0, #18
    6664:	f7fd fd30 	bl	40c8 <z_arm_irq_priority_set>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    6668:	480b      	ldr	r0, [pc, #44]	; (6698 <qdec_nrfx_init+0x3c>)
    666a:	aa01      	add	r2, sp, #4
    666c:	2100      	movs	r1, #0
    666e:	f007 f918 	bl	d8a2 <pinctrl_lookup_state>
	if (ret < 0) {
    6672:	2800      	cmp	r0, #0
    6674:	db0c      	blt.n	6690 <qdec_nrfx_init+0x34>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    6676:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    6678:	4a08      	ldr	r2, [pc, #32]	; (669c <qdec_nrfx_init+0x40>)
    667a:	7919      	ldrb	r1, [r3, #4]
    667c:	6818      	ldr	r0, [r3, #0]
    667e:	f007 f923 	bl	d8c8 <pinctrl_configure_pins>
	if (ret < 0) {
    6682:	2800      	cmp	r0, #0
    6684:	db04      	blt.n	6690 <qdec_nrfx_init+0x34>
}
    6686:	b003      	add	sp, #12
    6688:	f85d eb04 	ldr.w	lr, [sp], #4
    668c:	f7ff bfa2 	b.w	65d4 <qdec_nrfx_init.part.0>
    6690:	b003      	add	sp, #12
    6692:	f85d fb04 	ldr.w	pc, [sp], #4
    6696:	bf00      	nop
    6698:	0000eb24 	.word	0x0000eb24
    669c:	40012000 	.word	0x40012000

000066a0 <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    66a0:	4b01      	ldr	r3, [pc, #4]	; (66a8 <hfclk_on_callback+0x8>)
    66a2:	2201      	movs	r2, #1
    66a4:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    66a6:	4770      	bx	lr
    66a8:	4000c000 	.word	0x4000c000

000066ac <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    66ac:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
    66ae:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
    66b0:	d10b      	bne.n	66ca <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    66b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    66b4:	4906      	ldr	r1, [pc, #24]	; (66d0 <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
    66b6:	4807      	ldr	r0, [pc, #28]	; (66d4 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    66b8:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
    66ba:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
    66be:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
    66c2:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    66c4:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    66c6:	2000      	movs	r0, #0
    66c8:	4770      	bx	lr
		return -ENOTSUP;
    66ca:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    66ce:	4770      	bx	lr
    66d0:	0003d090 	.word	0x0003d090
    66d4:	000f4240 	.word	0x000f4240

000066d8 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    66d8:	4b04      	ldr	r3, [pc, #16]	; (66ec <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(const void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
    66da:	6900      	ldr	r0, [r0, #16]
    66dc:	2200      	movs	r2, #0
    66de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    66e2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	z_impl_k_sem_give(sem);
    66e6:	f005 b829 	b.w	b73c <z_impl_k_sem_give>
    66ea:	bf00      	nop
    66ec:	4000c000 	.word	0x4000c000

000066f0 <temp_nrf5_sample_fetch>:
{
    66f0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
    66f2:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
    66f4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    66f6:	b363      	cbz	r3, 6752 <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    66f8:	2939      	cmp	r1, #57	; 0x39
    66fa:	d001      	beq.n	6700 <temp_nrf5_sample_fetch+0x10>
    66fc:	290c      	cmp	r1, #12
    66fe:	d12b      	bne.n	6758 <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
    6700:	f105 0610 	add.w	r6, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    6704:	f04f 32ff 	mov.w	r2, #4294967295
    6708:	f04f 33ff 	mov.w	r3, #4294967295
    670c:	4630      	mov	r0, r6
    670e:	f004 ff2b 	bl	b568 <z_impl_k_mutex_lock>
    6712:	4b13      	ldr	r3, [pc, #76]	; (6760 <temp_nrf5_sample_fetch+0x70>)
    6714:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
    6716:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    6718:	2303      	movs	r3, #3
    671a:	2400      	movs	r4, #0
    671c:	4669      	mov	r1, sp
    671e:	9403      	str	r4, [sp, #12]
    6720:	9302      	str	r3, [sp, #8]
    6722:	f006 fa91 	bl	cc48 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    6726:	f04f 32ff 	mov.w	r2, #4294967295
    672a:	f04f 33ff 	mov.w	r3, #4294967295
    672e:	4628      	mov	r0, r5
    6730:	f005 f824 	bl	b77c <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    6734:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    6736:	f006 fadf 	bl	ccf8 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    673a:	4b0a      	ldr	r3, [pc, #40]	; (6764 <temp_nrf5_sample_fetch+0x74>)
    673c:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    6740:	626a      	str	r2, [r5, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    6742:	2201      	movs	r2, #1
    6744:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    6746:	4630      	mov	r0, r6
    6748:	f004 ff88 	bl	b65c <z_impl_k_mutex_unlock>
	return 0;
    674c:	4620      	mov	r0, r4
}
    674e:	b004      	add	sp, #16
    6750:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    6752:	f06f 000a 	mvn.w	r0, #10
    6756:	e7fa      	b.n	674e <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
    6758:	f06f 0085 	mvn.w	r0, #133	; 0x85
    675c:	e7f7      	b.n	674e <temp_nrf5_sample_fetch+0x5e>
    675e:	bf00      	nop
    6760:	000066a1 	.word	0x000066a1
    6764:	4000c000 	.word	0x4000c000

00006768 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    6768:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    676a:	6904      	ldr	r4, [r0, #16]

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    676c:	2000      	movs	r0, #0
    676e:	f7ff fc09 	bl	5f84 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    6772:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    6774:	f04f 32ff 	mov.w	r2, #4294967295
    6778:	2100      	movs	r1, #0
    677a:	4620      	mov	r0, r4
    677c:	f007 fd2d 	bl	e1da <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
    6780:	f104 0010 	add.w	r0, r4, #16
    6784:	f007 fca1 	bl	e0ca <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
    6788:	2200      	movs	r2, #0
    678a:	2101      	movs	r1, #1
    678c:	200c      	movs	r0, #12
    678e:	f7fd fc9b 	bl	40c8 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    6792:	200c      	movs	r0, #12
    6794:	f7fd fc68 	bl	4068 <arch_irq_enable>
    p_reg->INTENSET = mask;
    6798:	4b02      	ldr	r3, [pc, #8]	; (67a4 <temp_nrf5_init+0x3c>)
    679a:	2201      	movs	r2, #1
    679c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    67a0:	2000      	movs	r0, #0
    67a2:	bd10      	pop	{r4, pc}
    67a4:	4000c000 	.word	0x4000c000

000067a8 <spi_nrfx_init>:
}
#endif /* CONFIG_PM_DEVICE */


static int spi_nrfx_init(const struct device *dev)
{
    67a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    67ac:	b083      	sub	sp, #12
	const struct spi_nrfx_config *dev_config = dev->config;
    67ae:	6844      	ldr	r4, [r0, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    67b0:	6905      	ldr	r5, [r0, #16]
	int err;

	err = pinctrl_apply_state(dev_config->pcfg, PINCTRL_STATE_DEFAULT);
    67b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
{
    67b4:	af00      	add	r7, sp, #0
	ret = pinctrl_lookup_state(config, id, &state);
    67b6:	1d3a      	adds	r2, r7, #4
    67b8:	2100      	movs	r1, #0
    67ba:	4630      	mov	r0, r6
    67bc:	f007 f871 	bl	d8a2 <pinctrl_lookup_state>
	if (ret < 0) {
    67c0:	2800      	cmp	r0, #0
    67c2:	db32      	blt.n	682a <spi_nrfx_init+0x82>
	return pinctrl_apply_state_direct(config, state);
    67c4:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    67c6:	6832      	ldr	r2, [r6, #0]
    67c8:	7919      	ldrb	r1, [r3, #4]
    67ca:	6818      	ldr	r0, [r3, #0]
    67cc:	f007 f87c 	bl	d8c8 <pinctrl_configure_pins>
	if (err < 0) {
    67d0:	2800      	cmp	r0, #0
    67d2:	db2a      	blt.n	682a <spi_nrfx_init+0x82>
		return err;
	}

	dev_config->irq_connect();
    67d4:	6a23      	ldr	r3, [r4, #32]
    67d6:	4798      	blx	r3
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    67d8:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    67da:	2601      	movs	r6, #1
    67dc:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    67e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    67e4:	429c      	cmp	r4, r3
    67e6:	d304      	bcc.n	67f2 <spi_nrfx_init+0x4a>
	err = spi_context_cs_configure_all(&dev_data->ctx);
	if (err < 0) {
		return err;
	}

	spi_context_unlock_unconditionally(&dev_data->ctx);
    67e8:	4628      	mov	r0, r5
    67ea:	f007 f937 	bl	da5c <spi_context_unlock_unconditionally>
		if (ret < 0) {
			return ret;
		}
	}

	return 0;
    67ee:	2000      	movs	r0, #0

#ifdef CONFIG_SOC_NRF52832_ALLOW_SPIM_DESPITE_PAN_58
	return anomaly_58_workaround_init(dev);
#else
	return 0;
    67f0:	e01b      	b.n	682a <spi_nrfx_init+0x82>
		if (!device_is_ready(cs_gpio->port)) {
    67f2:	6820      	ldr	r0, [r4, #0]
    67f4:	f007 fbff 	bl	dff6 <z_device_is_ready>
    67f8:	b9d8      	cbnz	r0, 6832 <spi_nrfx_init+0x8a>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    67fa:	6823      	ldr	r3, [r4, #0]
    67fc:	6819      	ldr	r1, [r3, #0]
    67fe:	7923      	ldrb	r3, [r4, #4]
    6800:	466c      	mov	r4, sp
    6802:	b08a      	sub	sp, #40	; 0x28
    6804:	466a      	mov	r2, sp
    6806:	481c      	ldr	r0, [pc, #112]	; (6878 <spi_nrfx_init+0xd0>)
    6808:	61d3      	str	r3, [r2, #28]
    680a:	f44f 7300 	mov.w	r3, #512	; 0x200
    680e:	8413      	strh	r3, [r2, #32]
    6810:	4b1a      	ldr	r3, [pc, #104]	; (687c <spi_nrfx_init+0xd4>)
    6812:	e9c2 0105 	strd	r0, r1, [r2, #20]
    6816:	481a      	ldr	r0, [pc, #104]	; (6880 <spi_nrfx_init+0xd8>)
    6818:	f842 3f10 	str.w	r3, [r2, #16]!
    681c:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    6820:	f007 f8e3 	bl	d9ea <z_log_msg_static_create.constprop.0>
			return -ENODEV;
    6824:	f06f 0012 	mvn.w	r0, #18
    6828:	46a5      	mov	sp, r4
#endif
}
    682a:	370c      	adds	r7, #12
    682c:	46bd      	mov	sp, r7
    682e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return gpio_pin_configure(spec->port,
    6832:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
    6834:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
    6836:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
    6838:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
    683c:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    6840:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    6844:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    6846:	bf54      	ite	pl
    6848:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    684c:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    6850:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    6854:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    6858:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    685a:	bf4c      	ite	mi
    685c:	ea4c 0308 	orrmi.w	r3, ip, r8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    6860:	ea2c 0308 	bicpl.w	r3, ip, r8
    6864:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
    6868:	f8d9 3000 	ldr.w	r3, [r9]
    686c:	4798      	blx	r3
		if (ret < 0) {
    686e:	2800      	cmp	r0, #0
    6870:	dbdb      	blt.n	682a <spi_nrfx_init+0x82>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    6872:	3408      	adds	r4, #8
    6874:	e7b2      	b.n	67dc <spi_nrfx_init+0x34>
    6876:	bf00      	nop
    6878:	0000fca6 	.word	0x0000fca6
    687c:	01000004 	.word	0x01000004
    6880:	0000e918 	.word	0x0000e918

00006884 <transfer_next_chunk>:
{
    6884:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    6886:	6904      	ldr	r4, [r0, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    6888:	6847      	ldr	r7, [r0, #4]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    688a:	6ca5      	ldr	r5, [r4, #72]	; 0x48
		return ctx->rx_len;
    688c:	6d23      	ldr	r3, [r4, #80]	; 0x50
{
    688e:	b085      	sub	sp, #20
    6890:	4606      	mov	r6, r0
	if (!ctx->tx_len) {
    6892:	b93d      	cbnz	r5, 68a4 <transfer_next_chunk+0x20>
	if (chunk_len > 0) {
    6894:	bb6b      	cbnz	r3, 68f2 <transfer_next_chunk+0x6e>
	int error = 0;
    6896:	4619      	mov	r1, r3
	finish_transaction(dev, error);
    6898:	6930      	ldr	r0, [r6, #16]
}
    689a:	b005      	add	sp, #20
    689c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	finish_transaction(dev, error);
    68a0:	f007 b8fe 	b.w	daa0 <finish_transaction.isra.0>
		const uint8_t *tx_buf = ctx->tx_buf;
    68a4:	6c61      	ldr	r1, [r4, #68]	; 0x44
	} else if (!ctx->rx_len) {
    68a6:	bb03      	cbnz	r3, 68ea <transfer_next_chunk+0x66>
	return !!(ctx->tx_buf && ctx->tx_len);
    68a8:	bb31      	cbnz	r1, 68f8 <transfer_next_chunk+0x74>
		if (chunk_len > dev_config->max_chunk_len) {
    68aa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
    68ac:	6c63      	ldr	r3, [r4, #68]	; 0x44
		xfer.p_tx_buffer = tx_buf;
    68ae:	9100      	str	r1, [sp, #0]
    68b0:	42aa      	cmp	r2, r5
    68b2:	bf28      	it	cs
    68b4:	462a      	movcs	r2, r5
		dev_data->chunk_len = chunk_len;
    68b6:	65a2      	str	r2, [r4, #88]	; 0x58
    68b8:	b11b      	cbz	r3, 68c2 <transfer_next_chunk+0x3e>
    68ba:	6ca3      	ldr	r3, [r4, #72]	; 0x48
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    68bc:	2b00      	cmp	r3, #0
    68be:	bf18      	it	ne
    68c0:	4613      	movne	r3, r2
    68c2:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    68c4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    68c6:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    68c8:	b11b      	cbz	r3, 68d2 <transfer_next_chunk+0x4e>
    68ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    68cc:	2b00      	cmp	r3, #0
    68ce:	bf18      	it	ne
    68d0:	4613      	movne	r3, r2
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    68d2:	2200      	movs	r2, #0
    68d4:	4669      	mov	r1, sp
    68d6:	4638      	mov	r0, r7
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    68d8:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    68da:	f003 fa73 	bl	9dc4 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    68de:	4b0e      	ldr	r3, [pc, #56]	; (6918 <transfer_next_chunk+0x94>)
    68e0:	4298      	cmp	r0, r3
    68e2:	d017      	beq.n	6914 <transfer_next_chunk+0x90>
			error = -EIO;
    68e4:	f06f 0104 	mvn.w	r1, #4
    68e8:	e7d6      	b.n	6898 <transfer_next_chunk+0x14>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    68ea:	429d      	cmp	r5, r3
    68ec:	bf28      	it	cs
    68ee:	461d      	movcs	r5, r3
    68f0:	e7da      	b.n	68a8 <transfer_next_chunk+0x24>
		const uint8_t *tx_buf = ctx->tx_buf;
    68f2:	6c61      	ldr	r1, [r4, #68]	; 0x44
    68f4:	461d      	mov	r5, r3
    68f6:	e7d8      	b.n	68aa <transfer_next_chunk+0x26>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    68f8:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    68fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    6900:	d0d3      	beq.n	68aa <transfer_next_chunk+0x26>
			if (chunk_len > CONFIG_SPI_NRFX_RAM_BUFFER_SIZE) {
    6902:	2d08      	cmp	r5, #8
    6904:	bf28      	it	cs
    6906:	2508      	movcs	r5, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
    6908:	6e20      	ldr	r0, [r4, #96]	; 0x60
    690a:	462a      	mov	r2, r5
    690c:	f006 fe40 	bl	d590 <memcpy>
			tx_buf = dev_data->buffer;
    6910:	6e21      	ldr	r1, [r4, #96]	; 0x60
    6912:	e7ca      	b.n	68aa <transfer_next_chunk+0x26>
}
    6914:	b005      	add	sp, #20
    6916:	bdf0      	pop	{r4, r5, r6, r7, pc}
    6918:	0bad0000 	.word	0x0bad0000

0000691c <event_handler>:
{
    691c:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    691e:	7803      	ldrb	r3, [r0, #0]
{
    6920:	b086      	sub	sp, #24
    6922:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    6924:	2b00      	cmp	r3, #0
    6926:	d15e      	bne.n	69e6 <event_handler+0xca>
		if (dev_data->chunk_len == 0) {
    6928:	6d8a      	ldr	r2, [r1, #88]	; 0x58
    692a:	b942      	cbnz	r2, 693e <event_handler+0x22>
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    692c:	6d4b      	ldr	r3, [r1, #84]	; 0x54
    692e:	6918      	ldr	r0, [r3, #16]
    6930:	f06f 0173 	mvn.w	r1, #115	; 0x73
}
    6934:	b006      	add	sp, #24
    6936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			finish_transaction(dev_data->dev, -ETIMEDOUT);
    693a:	f007 b8b1 	b.w	daa0 <finish_transaction.isra.0>
	if (!ctx->tx_len) {
    693e:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    6940:	b15b      	cbz	r3, 695a <event_handler+0x3e>
	if (len > ctx->tx_len) {
    6942:	429a      	cmp	r2, r3
    6944:	d91e      	bls.n	6984 <event_handler+0x68>
		LOG_ERR("Update exceeds current buffer");
    6946:	4b29      	ldr	r3, [pc, #164]	; (69ec <event_handler+0xd0>)
    6948:	9305      	str	r3, [sp, #20]
    694a:	4829      	ldr	r0, [pc, #164]	; (69f0 <event_handler+0xd4>)
    694c:	2302      	movs	r3, #2
    694e:	aa04      	add	r2, sp, #16
    6950:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6954:	9304      	str	r3, [sp, #16]
    6956:	f007 f848 	bl	d9ea <z_log_msg_static_create.constprop.0>
	if (!ctx->rx_len) {
    695a:	6d23      	ldr	r3, [r4, #80]	; 0x50
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    695c:	6da2      	ldr	r2, [r4, #88]	; 0x58
    695e:	b15b      	cbz	r3, 6978 <event_handler+0x5c>
	if (len > ctx->rx_len) {
    6960:	429a      	cmp	r2, r3
    6962:	d927      	bls.n	69b4 <event_handler+0x98>
		LOG_ERR("Update exceeds current buffer");
    6964:	4b21      	ldr	r3, [pc, #132]	; (69ec <event_handler+0xd0>)
    6966:	9305      	str	r3, [sp, #20]
    6968:	4821      	ldr	r0, [pc, #132]	; (69f0 <event_handler+0xd4>)
    696a:	2302      	movs	r3, #2
    696c:	aa04      	add	r2, sp, #16
    696e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6972:	9304      	str	r3, [sp, #16]
    6974:	f007 f839 	bl	d9ea <z_log_msg_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
    6978:	6d60      	ldr	r0, [r4, #84]	; 0x54
}
    697a:	b006      	add	sp, #24
    697c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    6980:	f7ff bf80 	b.w	6884 <transfer_next_chunk>
	ctx->tx_len -= len;
    6984:	1a9b      	subs	r3, r3, r2
    6986:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
    6988:	b973      	cbnz	r3, 69a8 <event_handler+0x8c>
		++ctx->current_tx;
    698a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    698c:	3308      	adds	r3, #8
    698e:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
    6990:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    6992:	3b01      	subs	r3, #1
    6994:	638b      	str	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    6996:	f101 0248 	add.w	r2, r1, #72	; 0x48
    699a:	f104 0034 	add.w	r0, r4, #52	; 0x34
    699e:	3138      	adds	r1, #56	; 0x38
    69a0:	f007 f810 	bl	d9c4 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    69a4:	6460      	str	r0, [r4, #68]	; 0x44
    69a6:	e7d8      	b.n	695a <event_handler+0x3e>
	} else if (ctx->tx_buf) {
    69a8:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    69aa:	2b00      	cmp	r3, #0
    69ac:	d0d5      	beq.n	695a <event_handler+0x3e>
		ctx->tx_buf += dfs * len;
    69ae:	4413      	add	r3, r2
    69b0:	644b      	str	r3, [r1, #68]	; 0x44
    69b2:	e7d2      	b.n	695a <event_handler+0x3e>
	ctx->rx_len -= len;
    69b4:	1a9b      	subs	r3, r3, r2
    69b6:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    69b8:	b97b      	cbnz	r3, 69da <event_handler+0xbe>
		++ctx->current_rx;
    69ba:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    69bc:	3308      	adds	r3, #8
    69be:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    69c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
    69c2:	3b01      	subs	r3, #1
    69c4:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    69c6:	f104 0250 	add.w	r2, r4, #80	; 0x50
    69ca:	f104 0140 	add.w	r1, r4, #64	; 0x40
    69ce:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    69d2:	f006 fff7 	bl	d9c4 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    69d6:	64e0      	str	r0, [r4, #76]	; 0x4c
    69d8:	e7ce      	b.n	6978 <event_handler+0x5c>
	} else if (ctx->rx_buf) {
    69da:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    69dc:	2b00      	cmp	r3, #0
    69de:	d0cb      	beq.n	6978 <event_handler+0x5c>
		ctx->rx_buf += dfs * len;
    69e0:	4413      	add	r3, r2
    69e2:	64e3      	str	r3, [r4, #76]	; 0x4c
    69e4:	e7c8      	b.n	6978 <event_handler+0x5c>
}
    69e6:	b006      	add	sp, #24
    69e8:	bd10      	pop	{r4, pc}
    69ea:	bf00      	nop
    69ec:	0000fcca 	.word	0x0000fcca
    69f0:	0000e918 	.word	0x0000e918

000069f4 <spi_nrfx_transceive>:
{
    69f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    69f8:	b08d      	sub	sp, #52	; 0x34
    69fa:	af00      	add	r7, sp, #0
    69fc:	469a      	mov	sl, r3
	const struct spi_nrfx_config *dev_config = dev->config;
    69fe:	6843      	ldr	r3, [r0, #4]
    6a00:	60bb      	str	r3, [r7, #8]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    6a02:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    6a04:	6904      	ldr	r4, [r0, #16]
{
    6a06:	613a      	str	r2, [r7, #16]
    6a08:	049b      	lsls	r3, r3, #18
    6a0a:	4606      	mov	r6, r0
    6a0c:	4688      	mov	r8, r1
    6a0e:	d439      	bmi.n	6a84 <spi_nrfx_transceive+0x90>
	return z_impl_k_sem_take(sem, timeout);
    6a10:	f04f 32ff 	mov.w	r2, #4294967295
    6a14:	f04f 33ff 	mov.w	r3, #4294967295
    6a18:	f104 0010 	add.w	r0, r4, #16
    6a1c:	f004 feae 	bl	b77c <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    6a20:	f8c4 8004 	str.w	r8, [r4, #4]
	const struct spi_nrfx_config *dev_config = dev->config;
    6a24:	6873      	ldr	r3, [r6, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    6a26:	f8d6 9010 	ldr.w	r9, [r6, #16]
	const struct spi_nrfx_config *dev_config = dev->config;
    6a2a:	617b      	str	r3, [r7, #20]
	uint32_t max_freq = dev_config->max_freq;
    6a2c:	689b      	ldr	r3, [r3, #8]
    6a2e:	607b      	str	r3, [r7, #4]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    6a30:	f899 305d 	ldrb.w	r3, [r9, #93]	; 0x5d
    6a34:	60fb      	str	r3, [r7, #12]
    6a36:	b123      	cbz	r3, 6a42 <spi_nrfx_transceive+0x4e>
    6a38:	f8d9 3000 	ldr.w	r3, [r9]
    6a3c:	4598      	cmp	r8, r3
    6a3e:	f000 80d1 	beq.w	6be4 <spi_nrfx_transceive+0x1f0>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    6a42:	f8b8 c004 	ldrh.w	ip, [r8, #4]
    6a46:	f41c 6f00 	tst.w	ip, #2048	; 0x800
    6a4a:	d022      	beq.n	6a92 <spi_nrfx_transceive+0x9e>
		LOG_ERR("Half-duplex not supported");
    6a4c:	4bb1      	ldr	r3, [pc, #708]	; (6d14 <spi_nrfx_transceive+0x320>)
    6a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    6a50:	2302      	movs	r3, #2
    6a52:	48b1      	ldr	r0, [pc, #708]	; (6d18 <spi_nrfx_transceive+0x324>)
    6a54:	62bb      	str	r3, [r7, #40]	; 0x28
    6a56:	f107 0228 	add.w	r2, r7, #40	; 0x28
    6a5a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
    6a5e:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
    6a62:	f006 ffc2 	bl	d9ea <z_log_msg_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    6a66:	6823      	ldr	r3, [r4, #0]
    6a68:	889b      	ldrh	r3, [r3, #4]
    6a6a:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    6a6e:	d104      	bne.n	6a7a <spi_nrfx_transceive+0x86>
		ctx->owner = NULL;
    6a70:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    6a72:	f104 0010 	add.w	r0, r4, #16
    6a76:	f004 fe61 	bl	b73c <z_impl_k_sem_give>
}
    6a7a:	4628      	mov	r0, r5
    6a7c:	3734      	adds	r7, #52	; 0x34
    6a7e:	46bd      	mov	sp, r7
    6a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    6a84:	69a3      	ldr	r3, [r4, #24]
    6a86:	2b00      	cmp	r3, #0
    6a88:	d1c2      	bne.n	6a10 <spi_nrfx_transceive+0x1c>
		(k_sem_count_get(&ctx->lock) == 0) &&
    6a8a:	6863      	ldr	r3, [r4, #4]
    6a8c:	4299      	cmp	r1, r3
    6a8e:	d1bf      	bne.n	6a10 <spi_nrfx_transceive+0x1c>
    6a90:	e7c8      	b.n	6a24 <spi_nrfx_transceive+0x30>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    6a92:	f01c 0f01 	tst.w	ip, #1
    6a96:	d015      	beq.n	6ac4 <spi_nrfx_transceive+0xd0>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    6a98:	466d      	mov	r5, sp
    6a9a:	b088      	sub	sp, #32
    6a9c:	6833      	ldr	r3, [r6, #0]
    6a9e:	466a      	mov	r2, sp
    6aa0:	499e      	ldr	r1, [pc, #632]	; (6d1c <spi_nrfx_transceive+0x328>)
    6aa2:	489d      	ldr	r0, [pc, #628]	; (6d18 <spi_nrfx_transceive+0x324>)
    6aa4:	e9c2 1305 	strd	r1, r3, [r2, #20]
    6aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
    6aac:	8393      	strh	r3, [r2, #28]
    6aae:	4b9c      	ldr	r3, [pc, #624]	; (6d20 <spi_nrfx_transceive+0x32c>)
    6ab0:	f842 3f10 	str.w	r3, [r2, #16]!
    6ab4:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
    6ab8:	f006 ff97 	bl	d9ea <z_log_msg_static_create.constprop.0>
    6abc:	46ad      	mov	sp, r5
		return -EINVAL;
    6abe:	f06f 0515 	mvn.w	r5, #21
    6ac2:	e7d0      	b.n	6a66 <spi_nrfx_transceive+0x72>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    6ac4:	f01c 0f08 	tst.w	ip, #8
    6ac8:	d00b      	beq.n	6ae2 <spi_nrfx_transceive+0xee>
		LOG_ERR("Loopback mode is not supported");
    6aca:	4b96      	ldr	r3, [pc, #600]	; (6d24 <spi_nrfx_transceive+0x330>)
		LOG_ERR("Word sizes other than 8 bits are not supported");
    6acc:	62fb      	str	r3, [r7, #44]	; 0x2c
    6ace:	2302      	movs	r3, #2
    6ad0:	4891      	ldr	r0, [pc, #580]	; (6d18 <spi_nrfx_transceive+0x324>)
    6ad2:	62bb      	str	r3, [r7, #40]	; 0x28
    6ad4:	f107 0228 	add.w	r2, r7, #40	; 0x28
    6ad8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6adc:	f006 ff85 	bl	d9ea <z_log_msg_static_create.constprop.0>
	if (error == 0) {
    6ae0:	e7ed      	b.n	6abe <spi_nrfx_transceive+0xca>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    6ae2:	f3cc 1345 	ubfx	r3, ip, #5, #6
    6ae6:	2b08      	cmp	r3, #8
    6ae8:	d001      	beq.n	6aee <spi_nrfx_transceive+0xfa>
		LOG_ERR("Word sizes other than 8 bits are not supported");
    6aea:	4b8f      	ldr	r3, [pc, #572]	; (6d28 <spi_nrfx_transceive+0x334>)
    6aec:	e7ee      	b.n	6acc <spi_nrfx_transceive+0xd8>
	if (spi_cfg->frequency < 125000) {
    6aee:	f8d8 5000 	ldr.w	r5, [r8]
    6af2:	4b8e      	ldr	r3, [pc, #568]	; (6d2c <spi_nrfx_transceive+0x338>)
    6af4:	429d      	cmp	r5, r3
    6af6:	d801      	bhi.n	6afc <spi_nrfx_transceive+0x108>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    6af8:	4b8d      	ldr	r3, [pc, #564]	; (6d30 <spi_nrfx_transceive+0x33c>)
    6afa:	e7e7      	b.n	6acc <spi_nrfx_transceive+0xd8>
	config = dev_config->def_config;
    6afc:	697b      	ldr	r3, [r7, #20]
    6afe:	f103 0b0c 	add.w	fp, r3, #12
    6b02:	e8bb 000f 	ldmia.w	fp!, {r0, r1, r2, r3}
    6b06:	f107 0e18 	add.w	lr, r7, #24
    6b0a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    6b0e:	f8db 3000 	ldr.w	r3, [fp]
    6b12:	f8ce 3000 	str.w	r3, [lr]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    6b16:	687b      	ldr	r3, [r7, #4]
    6b18:	42ab      	cmp	r3, r5
    6b1a:	bf28      	it	cs
    6b1c:	462b      	movcs	r3, r5
    6b1e:	461d      	mov	r5, r3
	if (frequency < 250000) {
    6b20:	4b84      	ldr	r3, [pc, #528]	; (6d34 <spi_nrfx_transceive+0x340>)
    6b22:	429d      	cmp	r5, r3
    6b24:	d946      	bls.n	6bb4 <spi_nrfx_transceive+0x1c0>
	} else if (frequency < 500000) {
    6b26:	4b84      	ldr	r3, [pc, #528]	; (6d38 <spi_nrfx_transceive+0x344>)
    6b28:	429d      	cmp	r5, r3
    6b2a:	d946      	bls.n	6bba <spi_nrfx_transceive+0x1c6>
	} else if (frequency < 1000000) {
    6b2c:	4b83      	ldr	r3, [pc, #524]	; (6d3c <spi_nrfx_transceive+0x348>)
    6b2e:	429d      	cmp	r5, r3
    6b30:	d946      	bls.n	6bc0 <spi_nrfx_transceive+0x1cc>
	} else if (frequency < 2000000) {
    6b32:	4b83      	ldr	r3, [pc, #524]	; (6d40 <spi_nrfx_transceive+0x34c>)
    6b34:	429d      	cmp	r5, r3
    6b36:	d946      	bls.n	6bc6 <spi_nrfx_transceive+0x1d2>
	} else if (frequency < 4000000) {
    6b38:	4b82      	ldr	r3, [pc, #520]	; (6d44 <spi_nrfx_transceive+0x350>)
    6b3a:	429d      	cmp	r5, r3
    6b3c:	d946      	bls.n	6bcc <spi_nrfx_transceive+0x1d8>
		return NRF_SPIM_FREQ_4M;
    6b3e:	4b82      	ldr	r3, [pc, #520]	; (6d48 <spi_nrfx_transceive+0x354>)
    6b40:	429d      	cmp	r5, r3
    6b42:	bf2c      	ite	cs
    6b44:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
    6b48:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    6b4c:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    6b50:	623d      	str	r5, [r7, #32]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    6b52:	f00c 0304 	and.w	r3, ip, #4
    6b56:	d03c      	beq.n	6bd2 <spi_nrfx_transceive+0x1de>
			return NRF_SPIM_MODE_2;
    6b58:	2b00      	cmp	r3, #0
    6b5a:	bf14      	ite	ne
    6b5c:	2303      	movne	r3, #3
    6b5e:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    6b60:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
	if (dev_data->initialized) {
    6b64:	68fb      	ldr	r3, [r7, #12]
	if (operation & SPI_TRANSFER_LSB) {
    6b66:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    6b6a:	f887 c025 	strb.w	ip, [r7, #37]	; 0x25
	if (dev_data->initialized) {
    6b6e:	b12b      	cbz	r3, 6b7c <spi_nrfx_transceive+0x188>
		nrfx_spim_uninit(&dev_config->spim);
    6b70:	6978      	ldr	r0, [r7, #20]
    6b72:	f003 f8df 	bl	9d34 <nrfx_spim_uninit>
		dev_data->initialized = false;
    6b76:	2300      	movs	r3, #0
    6b78:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
	result = nrfx_spim_init(&dev_config->spim, &config,
    6b7c:	464b      	mov	r3, r9
    6b7e:	4a73      	ldr	r2, [pc, #460]	; (6d4c <spi_nrfx_transceive+0x358>)
    6b80:	6978      	ldr	r0, [r7, #20]
    6b82:	f107 0118 	add.w	r1, r7, #24
    6b86:	f003 f827 	bl	9bd8 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    6b8a:	4b71      	ldr	r3, [pc, #452]	; (6d50 <spi_nrfx_transceive+0x35c>)
    6b8c:	4298      	cmp	r0, r3
    6b8e:	d024      	beq.n	6bda <spi_nrfx_transceive+0x1e6>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    6b90:	466d      	mov	r5, sp
    6b92:	b088      	sub	sp, #32
    6b94:	466a      	mov	r2, sp
    6b96:	4b6f      	ldr	r3, [pc, #444]	; (6d54 <spi_nrfx_transceive+0x360>)
    6b98:	e9c2 3005 	strd	r3, r0, [r2, #20]
    6b9c:	2303      	movs	r3, #3
    6b9e:	f842 3f10 	str.w	r3, [r2, #16]!
    6ba2:	485d      	ldr	r0, [pc, #372]	; (6d18 <spi_nrfx_transceive+0x324>)
    6ba4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6ba8:	f006 ff1f 	bl	d9ea <z_log_msg_static_create.constprop.0>
    6bac:	46ad      	mov	sp, r5
		return -EIO;
    6bae:	f06f 0504 	mvn.w	r5, #4
    6bb2:	e758      	b.n	6a66 <spi_nrfx_transceive+0x72>
		return NRF_SPIM_FREQ_125K;
    6bb4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    6bb8:	e7c8      	b.n	6b4c <spi_nrfx_transceive+0x158>
		return NRF_SPIM_FREQ_250K;
    6bba:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    6bbe:	e7c5      	b.n	6b4c <spi_nrfx_transceive+0x158>
		return NRF_SPIM_FREQ_500K;
    6bc0:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    6bc4:	e7c2      	b.n	6b4c <spi_nrfx_transceive+0x158>
		return NRF_SPIM_FREQ_1M;
    6bc6:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    6bca:	e7bf      	b.n	6b4c <spi_nrfx_transceive+0x158>
		return NRF_SPIM_FREQ_2M;
    6bcc:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    6bd0:	e7bc      	b.n	6b4c <spi_nrfx_transceive+0x158>
		if (SPI_MODE_GET(operation) & SPI_MODE_CPHA) {
    6bd2:	3b00      	subs	r3, #0
    6bd4:	bf18      	it	ne
    6bd6:	2301      	movne	r3, #1
    6bd8:	e7c2      	b.n	6b60 <spi_nrfx_transceive+0x16c>
	dev_data->initialized = true;
    6bda:	2301      	movs	r3, #1
    6bdc:	f889 305d 	strb.w	r3, [r9, #93]	; 0x5d
	ctx->config = spi_cfg;
    6be0:	f8c9 8000 	str.w	r8, [r9]
		dev_data->busy = true;
    6be4:	2301      	movs	r3, #1
    6be6:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    6bea:	693b      	ldr	r3, [r7, #16]
    6bec:	2b00      	cmp	r3, #0
    6bee:	d16d      	bne.n	6ccc <spi_nrfx_transceive+0x2d8>
    6bf0:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    6bf2:	2300      	movs	r3, #0
    6bf4:	63a3      	str	r3, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    6bf6:	f104 0248 	add.w	r2, r4, #72	; 0x48
    6bfa:	f104 0138 	add.w	r1, r4, #56	; 0x38
    6bfe:	f104 0034 	add.w	r0, r4, #52	; 0x34
    6c02:	f006 fedf 	bl	d9c4 <spi_context_get_next_buf.constprop.0>
	ctx->tx_buf = (const uint8_t *)
    6c06:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    6c08:	f1ba 0f00 	cmp.w	sl, #0
    6c0c:	d166      	bne.n	6cdc <spi_nrfx_transceive+0x2e8>
    6c0e:	f8c4 a03c 	str.w	sl, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    6c12:	2300      	movs	r3, #0
    6c14:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    6c16:	f104 0250 	add.w	r2, r4, #80	; 0x50
    6c1a:	f104 0140 	add.w	r1, r4, #64	; 0x40
    6c1e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    6c22:	f006 fecf 	bl	d9c4 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    6c26:	2500      	movs	r5, #0
	_spi_context_cs_control(ctx, on, false);
    6c28:	462a      	mov	r2, r5
	ctx->rx_buf = (uint8_t *)
    6c2a:	64e0      	str	r0, [r4, #76]	; 0x4c
	_spi_context_cs_control(ctx, on, false);
    6c2c:	2101      	movs	r1, #1
    6c2e:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    6c30:	6325      	str	r5, [r4, #48]	; 0x30
	_spi_context_cs_control(ctx, on, false);
    6c32:	f006 fef1 	bl	da18 <_spi_context_cs_control>
		transfer_next_chunk(dev);
    6c36:	4630      	mov	r0, r6
    6c38:	f7ff fe24 	bl	6884 <transfer_next_chunk>
static inline size_t spi_context_total_tx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;

	for (n = 0; n < ctx->tx_count; ++n) {
    6c3c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
	size_t total_len = 0;
    6c3e:	462a      	mov	r2, r5
	for (n = 0; n < ctx->tx_count; ++n) {
    6c40:	462b      	mov	r3, r5
    6c42:	4283      	cmp	r3, r0
    6c44:	d152      	bne.n	6cec <spi_nrfx_transceive+0x2f8>
}

static inline size_t spi_context_total_rx_len(struct spi_context *ctx)
{
	size_t n;
	size_t total_len = 0;
    6c46:	2300      	movs	r3, #0

	for (n = 0; n < ctx->rx_count; ++n) {
    6c48:	6c25      	ldr	r5, [r4, #64]	; 0x40
    6c4a:	4619      	mov	r1, r3
    6c4c:	42a9      	cmp	r1, r5
    6c4e:	d154      	bne.n	6cfa <spi_nrfx_transceive+0x306>
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    6c50:	4293      	cmp	r3, r2
				     ctx->config->frequency;
    6c52:	46a0      	mov	r8, r4
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    6c54:	bf38      	it	cc
    6c56:	4613      	movcc	r3, r2
    6c58:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
    6c5c:	fb02 f503 	mul.w	r5, r2, r3
				     ctx->config->frequency;
    6c60:	f858 3b20 	ldr.w	r3, [r8], #32
			return ((t * to_hz + off) / from_hz);
    6c64:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
			timeout_ms = MAX(tx_len, rx_len) * 8 * 1000 /
    6c68:	681b      	ldr	r3, [r3, #0]
    6c6a:	fbb5 f5f3 	udiv	r5, r5, r3
    6c6e:	f240 30e7 	movw	r0, #999	; 0x3e7
			timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    6c72:	35c8      	adds	r5, #200	; 0xc8
    6c74:	2100      	movs	r1, #0
    6c76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6c7a:	2300      	movs	r3, #0
    6c7c:	fbe5 010c 	umlal	r0, r1, r5, ip
    6c80:	f7f9 fa2e 	bl	e0 <__aeabi_uldivmod>
    6c84:	4602      	mov	r2, r0
    6c86:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    6c88:	4640      	mov	r0, r8
    6c8a:	f004 fd77 	bl	b77c <z_impl_k_sem_take>
		if (k_sem_take(&ctx->sync, timeout)) {
    6c8e:	2800      	cmp	r0, #0
    6c90:	d03a      	beq.n	6d08 <spi_nrfx_transceive+0x314>
			LOG_ERR("Timeout waiting for transfer complete");
    6c92:	4b31      	ldr	r3, [pc, #196]	; (6d58 <spi_nrfx_transceive+0x364>)
    6c94:	62fb      	str	r3, [r7, #44]	; 0x2c
    6c96:	2302      	movs	r3, #2
    6c98:	481f      	ldr	r0, [pc, #124]	; (6d18 <spi_nrfx_transceive+0x324>)
    6c9a:	62bb      	str	r3, [r7, #40]	; 0x28
    6c9c:	f107 0228 	add.w	r2, r7, #40	; 0x28
    6ca0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6ca4:	f006 fea1 	bl	d9ea <z_log_msg_static_create.constprop.0>
			dev_data->chunk_len = 0;
    6ca8:	2500      	movs	r5, #0
			nrfx_spim_uninit(&dev_config->spim);
    6caa:	68b8      	ldr	r0, [r7, #8]
			dev_data->chunk_len = 0;
    6cac:	65a5      	str	r5, [r4, #88]	; 0x58
			nrfx_spim_uninit(&dev_config->spim);
    6cae:	f003 f841 	bl	9d34 <nrfx_spim_uninit>
			dev_data->initialized = false;
    6cb2:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			finish_transaction(dev, -ETIMEDOUT);
    6cb6:	6930      	ldr	r0, [r6, #16]
    6cb8:	f06f 0173 	mvn.w	r1, #115	; 0x73
    6cbc:	f006 fef0 	bl	daa0 <finish_transaction.isra.0>
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_RESET);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_reset(sem);
    6cc0:	4640      	mov	r0, r8
    6cc2:	f004 fd83 	bl	b7cc <z_impl_k_sem_reset>
		error = spi_context_wait_for_completion(&dev_data->ctx);
    6cc6:	f06f 0573 	mvn.w	r5, #115	; 0x73
}
    6cca:	e6cc      	b.n	6a66 <spi_nrfx_transceive+0x72>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    6ccc:	693b      	ldr	r3, [r7, #16]
    6cce:	681b      	ldr	r3, [r3, #0]
    6cd0:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    6cd2:	2b00      	cmp	r3, #0
    6cd4:	d08d      	beq.n	6bf2 <spi_nrfx_transceive+0x1fe>
    6cd6:	693b      	ldr	r3, [r7, #16]
    6cd8:	685b      	ldr	r3, [r3, #4]
    6cda:	e78b      	b.n	6bf4 <spi_nrfx_transceive+0x200>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    6cdc:	f8da 3000 	ldr.w	r3, [sl]
    6ce0:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    6ce2:	2b00      	cmp	r3, #0
    6ce4:	d095      	beq.n	6c12 <spi_nrfx_transceive+0x21e>
    6ce6:	f8da 3004 	ldr.w	r3, [sl, #4]
    6cea:	e793      	b.n	6c14 <spi_nrfx_transceive+0x220>
		total_len += ctx->current_tx[n].len;
    6cec:	6b61      	ldr	r1, [r4, #52]	; 0x34
    6cee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
	for (n = 0; n < ctx->tx_count; ++n) {
    6cf2:	3301      	adds	r3, #1
		total_len += ctx->current_tx[n].len;
    6cf4:	6849      	ldr	r1, [r1, #4]
    6cf6:	440a      	add	r2, r1
	for (n = 0; n < ctx->tx_count; ++n) {
    6cf8:	e7a3      	b.n	6c42 <spi_nrfx_transceive+0x24e>
		total_len += ctx->current_rx[n].len;
    6cfa:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    6cfc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
	for (n = 0; n < ctx->rx_count; ++n) {
    6d00:	3101      	adds	r1, #1
		total_len += ctx->current_rx[n].len;
    6d02:	6840      	ldr	r0, [r0, #4]
    6d04:	4403      	add	r3, r0
	for (n = 0; n < ctx->rx_count; ++n) {
    6d06:	e7a1      	b.n	6c4c <spi_nrfx_transceive+0x258>
		status = ctx->sync_status;
    6d08:	6b25      	ldr	r5, [r4, #48]	; 0x30
		if (error == -ETIMEDOUT) {
    6d0a:	f115 0f74 	cmn.w	r5, #116	; 0x74
    6d0e:	f47f aeaa 	bne.w	6a66 <spi_nrfx_transceive+0x72>
    6d12:	e7c9      	b.n	6ca8 <spi_nrfx_transceive+0x2b4>
    6d14:	0000fce8 	.word	0x0000fce8
    6d18:	0000e918 	.word	0x0000e918
    6d1c:	0000fd02 	.word	0x0000fd02
    6d20:	01000003 	.word	0x01000003
    6d24:	0000fd24 	.word	0x0000fd24
    6d28:	0000fd43 	.word	0x0000fd43
    6d2c:	0001e847 	.word	0x0001e847
    6d30:	0000fd72 	.word	0x0000fd72
    6d34:	0003d08f 	.word	0x0003d08f
    6d38:	0007a11f 	.word	0x0007a11f
    6d3c:	000f423f 	.word	0x000f423f
    6d40:	001e847f 	.word	0x001e847f
    6d44:	003d08ff 	.word	0x003d08ff
    6d48:	007a1200 	.word	0x007a1200
    6d4c:	0000691d 	.word	0x0000691d
    6d50:	0bad0000 	.word	0x0bad0000
    6d54:	0000fda3 	.word	0x0000fda3
    6d58:	0000fdca 	.word	0x0000fdca

00006d5c <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    6d5c:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    6d5e:	2301      	movs	r3, #1
    6d60:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6d62:	4a0e      	ldr	r2, [pc, #56]	; (6d9c <compare_int_lock+0x40>)
    6d64:	f3bf 8f5b 	dmb	ish
    6d68:	43dc      	mvns	r4, r3
    6d6a:	e852 1f00 	ldrex	r1, [r2]
    6d6e:	ea01 0504 	and.w	r5, r1, r4
    6d72:	e842 5600 	strex	r6, r5, [r2]
    6d76:	2e00      	cmp	r6, #0
    6d78:	d1f7      	bne.n	6d6a <compare_int_lock+0xe>
    6d7a:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6d7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6d82:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    6d84:	4806      	ldr	r0, [pc, #24]	; (6da0 <compare_int_lock+0x44>)
    6d86:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    6d8a:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6d8e:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    6d92:	420b      	tst	r3, r1
}
    6d94:	bf14      	ite	ne
    6d96:	2001      	movne	r0, #1
    6d98:	2000      	moveq	r0, #0
    6d9a:	bd70      	pop	{r4, r5, r6, pc}
    6d9c:	20001854 	.word	0x20001854
    6da0:	40011000 	.word	0x40011000

00006da4 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    6da4:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    6da6:	490e      	ldr	r1, [pc, #56]	; (6de0 <sys_clock_timeout_handler+0x3c>)
    6da8:	e9d1 3400 	ldrd	r3, r4, [r1]
    6dac:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    6dae:	18c3      	adds	r3, r0, r3
    6db0:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    6db4:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    6db8:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    6dbc:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    6dc0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    6dc4:	d209      	bcs.n	6dda <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    6dc6:	4b07      	ldr	r3, [pc, #28]	; (6de4 <sys_clock_timeout_handler+0x40>)
    6dc8:	681b      	ldr	r3, [r3, #0]
    6dca:	0a1a      	lsrs	r2, r3, #8
    6dcc:	061b      	lsls	r3, r3, #24
    6dce:	199c      	adds	r4, r3, r6
    6dd0:	4b05      	ldr	r3, [pc, #20]	; (6de8 <sys_clock_timeout_handler+0x44>)
    6dd2:	f142 0500 	adc.w	r5, r2, #0
    6dd6:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    6dda:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    6ddc:	f005 bad6 	b.w	c38c <sys_clock_announce>
    6de0:	200009f8 	.word	0x200009f8
    6de4:	20001858 	.word	0x20001858
    6de8:	20000a00 	.word	0x20000a00

00006dec <compare_int_unlock>:
	if (key) {
    6dec:	b311      	cbz	r1, 6e34 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6dee:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    6df2:	2301      	movs	r3, #1
    6df4:	4a10      	ldr	r2, [pc, #64]	; (6e38 <compare_int_unlock+0x4c>)
    6df6:	4083      	lsls	r3, r0
    6df8:	e852 cf00 	ldrex	ip, [r2]
    6dfc:	ea4c 0c03 	orr.w	ip, ip, r3
    6e00:	e842 c100 	strex	r1, ip, [r2]
    6e04:	2900      	cmp	r1, #0
    6e06:	d1f7      	bne.n	6df8 <compare_int_unlock+0xc>
    6e08:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    6e0c:	4a0b      	ldr	r2, [pc, #44]	; (6e3c <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6e0e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6e12:	4083      	lsls	r3, r0
    6e14:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6e18:	4b09      	ldr	r3, [pc, #36]	; (6e40 <compare_int_unlock+0x54>)
    6e1a:	f3bf 8f5b 	dmb	ish
    6e1e:	681b      	ldr	r3, [r3, #0]
    6e20:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    6e24:	40c3      	lsrs	r3, r0
    6e26:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6e28:	bf42      	ittt	mi
    6e2a:	4b06      	ldrmi	r3, [pc, #24]	; (6e44 <compare_int_unlock+0x58>)
    6e2c:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    6e30:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    6e34:	4770      	bx	lr
    6e36:	bf00      	nop
    6e38:	20001854 	.word	0x20001854
    6e3c:	40011000 	.word	0x40011000
    6e40:	20001850 	.word	0x20001850
    6e44:	e000e100 	.word	0xe000e100

00006e48 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    6e48:	4b0d      	ldr	r3, [pc, #52]	; (6e80 <z_nrf_rtc_timer_read+0x38>)
    6e4a:	6818      	ldr	r0, [r3, #0]
    6e4c:	0a01      	lsrs	r1, r0, #8
    6e4e:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    6e50:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    6e54:	4b0b      	ldr	r3, [pc, #44]	; (6e84 <z_nrf_rtc_timer_read+0x3c>)
    6e56:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    6e5a:	1818      	adds	r0, r3, r0
    6e5c:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    6e60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    6e64:	d20a      	bcs.n	6e7c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    6e66:	4b08      	ldr	r3, [pc, #32]	; (6e88 <z_nrf_rtc_timer_read+0x40>)
    6e68:	e9d3 2300 	ldrd	r2, r3, [r3]
    6e6c:	4290      	cmp	r0, r2
    6e6e:	eb71 0303 	sbcs.w	r3, r1, r3
    6e72:	d203      	bcs.n	6e7c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    6e74:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    6e78:	f141 0100 	adc.w	r1, r1, #0
}
    6e7c:	4770      	bx	lr
    6e7e:	bf00      	nop
    6e80:	20001858 	.word	0x20001858
    6e84:	40011000 	.word	0x40011000
    6e88:	20000a00 	.word	0x20000a00

00006e8c <compare_set>:
{
    6e8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6e90:	4616      	mov	r6, r2
    6e92:	461f      	mov	r7, r3
    6e94:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    6e96:	f7ff ff61 	bl	6d5c <compare_int_lock>
    6e9a:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    6e9c:	f7ff ffd4 	bl	6e48 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    6ea0:	42b0      	cmp	r0, r6
    6ea2:	eb71 0307 	sbcs.w	r3, r1, r7
    6ea6:	d251      	bcs.n	6f4c <compare_set+0xc0>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    6ea8:	4b3a      	ldr	r3, [pc, #232]	; (6f94 <compare_set+0x108>)
    6eaa:	1a30      	subs	r0, r6, r0
    6eac:	eb67 0101 	sbc.w	r1, r7, r1
    6eb0:	4298      	cmp	r0, r3
    6eb2:	f171 0100 	sbcs.w	r1, r1, #0
    6eb6:	d26a      	bcs.n	6f8e <compare_set+0x102>
		if (target_time != cc_data[chan].target_time) {
    6eb8:	4b37      	ldr	r3, [pc, #220]	; (6f98 <compare_set+0x10c>)
    6eba:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    6ebe:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    6ec2:	429f      	cmp	r7, r3
    6ec4:	bf08      	it	eq
    6ec6:	4296      	cmpeq	r6, r2
    6ec8:	d04e      	beq.n	6f68 <compare_set+0xdc>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    6eca:	4934      	ldr	r1, [pc, #208]	; (6f9c <compare_set+0x110>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6ecc:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6ed0:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6ed4:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6ed8:	00ad      	lsls	r5, r5, #2
    6eda:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    6ede:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ee0:	b2ad      	uxth	r5, r5
    6ee2:	f006 fdee 	bl	dac2 <event_clear>
	return absolute_time & COUNTER_MAX;
    6ee6:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    6eea:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    6eee:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    6ef2:	4a2b      	ldr	r2, [pc, #172]	; (6fa0 <compare_set+0x114>)
    6ef4:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6ef6:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    6efa:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    6efc:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    6f00:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    6f02:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    6f06:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    6f0a:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    6f0e:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    6f12:	f06f 0002 	mvn.w	r0, #2
    6f16:	eba0 0008 	sub.w	r0, r0, r8
    6f1a:	4460      	add	r0, ip
    6f1c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    6f20:	4290      	cmp	r0, r2
    6f22:	d921      	bls.n	6f68 <compare_set+0xdc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6f24:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    6f26:	b160      	cbz	r0, 6f42 <compare_set+0xb6>
     return p_reg->COUNTER;
    6f28:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    6f2c:	eba8 000b 	sub.w	r0, r8, fp
    6f30:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    6f34:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    6f38:	d916      	bls.n	6f68 <compare_set+0xdc>
					event_clear(chan);
    6f3a:	4620      	mov	r0, r4
    6f3c:	f006 fdc1 	bl	dac2 <event_clear>
    6f40:	4a17      	ldr	r2, [pc, #92]	; (6fa0 <compare_set+0x114>)
			cc_val = now + cc_inc;
    6f42:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    6f46:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    6f4a:	e7d9      	b.n	6f00 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    6f4c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6f4e:	4a15      	ldr	r2, [pc, #84]	; (6fa4 <compare_set+0x118>)
    6f50:	f3bf 8f5b 	dmb	ish
    6f54:	40a3      	lsls	r3, r4
    6f56:	e852 0f00 	ldrex	r0, [r2]
    6f5a:	4318      	orrs	r0, r3
    6f5c:	e842 0100 	strex	r1, r0, [r2]
    6f60:	2900      	cmp	r1, #0
    6f62:	d1f8      	bne.n	6f56 <compare_set+0xca>
    6f64:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    6f68:	490b      	ldr	r1, [pc, #44]	; (6f98 <compare_set+0x10c>)
	cc_data[chan].callback = handler;
    6f6a:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    6f6c:	0123      	lsls	r3, r4, #4
    6f6e:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    6f72:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    6f76:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    6f78:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    6f7a:	6053      	str	r3, [r2, #4]
	return ret;
    6f7c:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    6f7e:	4620      	mov	r0, r4
    6f80:	9900      	ldr	r1, [sp, #0]
    6f82:	f7ff ff33 	bl	6dec <compare_int_unlock>
}
    6f86:	4628      	mov	r0, r5
    6f88:	b003      	add	sp, #12
    6f8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    6f8e:	f06f 0515 	mvn.w	r5, #21
    6f92:	e7f4      	b.n	6f7e <compare_set+0xf2>
    6f94:	00800001 	.word	0x00800001
    6f98:	200009e8 	.word	0x200009e8
    6f9c:	40011000 	.word	0x40011000
    6fa0:	007ffffd 	.word	0x007ffffd
    6fa4:	20001850 	.word	0x20001850

00006fa8 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    6fa8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    6faa:	4c1b      	ldr	r4, [pc, #108]	; (7018 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x18>)
    6fac:	4b1b      	ldr	r3, [pc, #108]	; (701c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x1c>)
    6fae:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    6fb2:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    6fb6:	4b1a      	ldr	r3, [pc, #104]	; (7020 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x20>)
    p_reg->PRESCALER = val;
    6fb8:	2500      	movs	r5, #0
    6fba:	f04f 30ff 	mov.w	r0, #4294967295
    6fbe:	f04f 31ff 	mov.w	r1, #4294967295
    6fc2:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    6fc6:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    6fca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6fce:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6fd2:	4b14      	ldr	r3, [pc, #80]	; (7024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    6fd4:	2602      	movs	r6, #2
    6fd6:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    6fda:	2101      	movs	r1, #1
    6fdc:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    6fe0:	2011      	movs	r0, #17
    6fe2:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    6fe6:	462a      	mov	r2, r5
    6fe8:	f7fd f86e 	bl	40c8 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    6fec:	2011      	movs	r0, #17
    6fee:	f7fd f83b 	bl	4068 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    6ff2:	4a0d      	ldr	r2, [pc, #52]	; (7028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    6ff4:	2301      	movs	r3, #1
    6ff6:	60a3      	str	r3, [r4, #8]
    6ff8:	6023      	str	r3, [r4, #0]
    6ffa:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    6ffc:	4b0b      	ldr	r3, [pc, #44]	; (702c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>)
    6ffe:	4a0c      	ldr	r2, [pc, #48]	; (7030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    7000:	9300      	str	r3, [sp, #0]
    7002:	9501      	str	r5, [sp, #4]
    7004:	2300      	movs	r3, #0
    7006:	4628      	mov	r0, r5
    7008:	f7ff ff40 	bl	6e8c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    700c:	4630      	mov	r0, r6
    700e:	f7fe ffc1 	bl	5f94 <z_nrf_clock_control_lf_on>

	return 0;
}
    7012:	4628      	mov	r0, r5
    7014:	b002      	add	sp, #8
    7016:	bd70      	pop	{r4, r5, r6, pc}
    7018:	40011000 	.word	0x40011000
    701c:	000f0003 	.word	0x000f0003
    7020:	200009e8 	.word	0x200009e8
    7024:	e000e100 	.word	0xe000e100
    7028:	20001854 	.word	0x20001854
    702c:	00006da5 	.word	0x00006da5
    7030:	007fffff 	.word	0x007fffff

00007034 <rtc_nrf_isr>:
{
    7034:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    7038:	4c2b      	ldr	r4, [pc, #172]	; (70e8 <rtc_nrf_isr+0xb4>)
    703a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    703e:	0799      	lsls	r1, r3, #30
    7040:	d50b      	bpl.n	705a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7042:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    7046:	b143      	cbz	r3, 705a <rtc_nrf_isr+0x26>
		overflow_cnt++;
    7048:	4a28      	ldr	r2, [pc, #160]	; (70ec <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    704a:	2300      	movs	r3, #0
    704c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    7050:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    7054:	6813      	ldr	r3, [r2, #0]
    7056:	3301      	adds	r3, #1
    7058:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    705a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    705e:	03da      	lsls	r2, r3, #15
    7060:	d523      	bpl.n	70aa <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7062:	f3bf 8f5b 	dmb	ish
    7066:	4b22      	ldr	r3, [pc, #136]	; (70f0 <rtc_nrf_isr+0xbc>)
    7068:	e853 2f00 	ldrex	r2, [r3]
    706c:	f022 0101 	bic.w	r1, r2, #1
    7070:	e843 1000 	strex	r0, r1, [r3]
    7074:	2800      	cmp	r0, #0
    7076:	d1f7      	bne.n	7068 <rtc_nrf_isr+0x34>
    7078:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    707c:	07d3      	lsls	r3, r2, #31
    707e:	d402      	bmi.n	7086 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7080:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    7084:	b18b      	cbz	r3, 70aa <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7086:	2500      	movs	r5, #0
    7088:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    708c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    7090:	f7ff feda 	bl	6e48 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    7094:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    7098:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
    709a:	4b16      	ldr	r3, [pc, #88]	; (70f4 <rtc_nrf_isr+0xc0>)
    709c:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    70a0:	42b0      	cmp	r0, r6
    70a2:	41b9      	sbcs	r1, r7
    70a4:	d204      	bcs.n	70b0 <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    70a6:	f382 8810 	msr	PRIMASK, r2
}
    70aa:	b003      	add	sp, #12
    70ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    70b0:	f04f 38ff 	mov.w	r8, #4294967295
    70b4:	f04f 39ff 	mov.w	r9, #4294967295
    70b8:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    70bc:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    70c0:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    70c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    70c6:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    70ca:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    70ce:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    70d2:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
    70d6:	2900      	cmp	r1, #0
    70d8:	d0e7      	beq.n	70aa <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
    70da:	9000      	str	r0, [sp, #0]
    70dc:	4632      	mov	r2, r6
    70de:	463b      	mov	r3, r7
    70e0:	4628      	mov	r0, r5
    70e2:	4788      	blx	r1
    70e4:	e7e1      	b.n	70aa <rtc_nrf_isr+0x76>
    70e6:	bf00      	nop
    70e8:	40011000 	.word	0x40011000
    70ec:	20001858 	.word	0x20001858
    70f0:	20001850 	.word	0x20001850
    70f4:	200009e8 	.word	0x200009e8

000070f8 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    70f8:	1c43      	adds	r3, r0, #1
{
    70fa:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    70fc:	d022      	beq.n	7144 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    70fe:	2801      	cmp	r0, #1
    7100:	dd22      	ble.n	7148 <sys_clock_set_timeout+0x50>
    7102:	4a12      	ldr	r2, [pc, #72]	; (714c <sys_clock_set_timeout+0x54>)
    7104:	4b12      	ldr	r3, [pc, #72]	; (7150 <sys_clock_set_timeout+0x58>)
    7106:	4290      	cmp	r0, r2
    7108:	bfd4      	ite	le
    710a:	4604      	movle	r4, r0
    710c:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    710e:	f7ff fe9b 	bl	6e48 <z_nrf_rtc_timer_read>
    7112:	4b10      	ldr	r3, [pc, #64]	; (7154 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    7114:	490e      	ldr	r1, [pc, #56]	; (7150 <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    7116:	e9d3 2300 	ldrd	r2, r3, [r3]
    711a:	1a80      	subs	r0, r0, r2
		cyc = 0;
    711c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    7120:	bf28      	it	cs
    7122:	2400      	movcs	r4, #0
	cyc += unannounced;
    7124:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    7126:	428c      	cmp	r4, r1
    7128:	bf28      	it	cs
    712a:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    712c:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    712e:	490a      	ldr	r1, [pc, #40]	; (7158 <sys_clock_set_timeout+0x60>)
    7130:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    7132:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    7136:	9001      	str	r0, [sp, #4]
    7138:	f143 0300 	adc.w	r3, r3, #0
    713c:	f7ff fea6 	bl	6e8c <compare_set>
}
    7140:	b002      	add	sp, #8
    7142:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    7144:	4c02      	ldr	r4, [pc, #8]	; (7150 <sys_clock_set_timeout+0x58>)
    7146:	e7e2      	b.n	710e <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    7148:	2401      	movs	r4, #1
    714a:	e7e0      	b.n	710e <sys_clock_set_timeout+0x16>
    714c:	007ffffe 	.word	0x007ffffe
    7150:	007fffff 	.word	0x007fffff
    7154:	200009f8 	.word	0x200009f8
    7158:	00006da5 	.word	0x00006da5

0000715c <sys_clock_elapsed>:
{
    715c:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    715e:	f7ff fe73 	bl	6e48 <z_nrf_rtc_timer_read>
    7162:	4b02      	ldr	r3, [pc, #8]	; (716c <sys_clock_elapsed+0x10>)
    7164:	681b      	ldr	r3, [r3, #0]
}
    7166:	1ac0      	subs	r0, r0, r3
    7168:	bd08      	pop	{r3, pc}
    716a:	bf00      	nop
    716c:	200009f8 	.word	0x200009f8

00007170 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    7170:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    7172:	f7fb fa63 	bl	263c <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    7176:	4b07      	ldr	r3, [pc, #28]	; (7194 <k_sys_fatal_error_handler+0x24>)
    7178:	9305      	str	r3, [sp, #20]
    717a:	2302      	movs	r3, #2
    717c:	9304      	str	r3, [sp, #16]
    717e:	4806      	ldr	r0, [pc, #24]	; (7198 <k_sys_fatal_error_handler+0x28>)
    7180:	2300      	movs	r3, #0
    7182:	aa04      	add	r2, sp, #16
    7184:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7188:	f7fb fb38 	bl	27fc <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    718c:	2000      	movs	r0, #0
    718e:	f7fd fd01 	bl	4b94 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    7192:	bf00      	nop
    7194:	0000fe0b 	.word	0x0000fe0b
    7198:	0000e8b8 	.word	0x0000e8b8

0000719c <update_radio_bitrate>:
	nrf_radio_txpower_set(NRF_RADIO, tx_power.radio_tx_power);
}

static bool update_radio_bitrate(void)
{
	nrf_radio_mode_set(NRF_RADIO, esb_cfg.bitrate);
    719c:	4b0b      	ldr	r3, [pc, #44]	; (71cc <update_radio_bitrate+0x30>)
    return (nrf_radio_txpower_t)(p_reg->TXPOWER >> RADIO_TXPOWER_TXPOWER_Pos);
}

NRF_STATIC_INLINE void nrf_radio_mode_set(NRF_RADIO_Type * p_reg, nrf_radio_mode_t radio_mode)
{
    p_reg->MODE = ((uint32_t) radio_mode << RADIO_MODE_MODE_Pos);
    719e:	4a0c      	ldr	r2, [pc, #48]	; (71d0 <update_radio_bitrate+0x34>)
    71a0:	7a1b      	ldrb	r3, [r3, #8]
    71a2:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	switch (esb_cfg.bitrate) {
    71a6:	2b04      	cmp	r3, #4
    71a8:	d80d      	bhi.n	71c6 <update_radio_bitrate+0x2a>
    71aa:	e8df f003 	tbb	[pc, r3]
    71ae:	0308      	.short	0x0308
    71b0:	080c      	.short	0x080c
    71b2:	03          	.byte	0x03
    71b3:	00          	.byte	0x00

#if defined(RADIO_MODE_MODE_Ble_2Mbit)
	case ESB_BITRATE_2MBPS_BLE:
#endif /* defined(RADIO_MODE_MODE_Ble_2Mbit) */

		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_2MBPS;
    71b4:	4b07      	ldr	r3, [pc, #28]	; (71d4 <update_radio_bitrate+0x38>)
    71b6:	22a0      	movs	r2, #160	; 0xa0
    71b8:	601a      	str	r2, [r3, #0]
	default:
		/* Should not be reached */
		return false;
	}

	return true;
    71ba:	2001      	movs	r0, #1
    71bc:	4770      	bx	lr
		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_1MBPS_BLE;
    71be:	4b05      	ldr	r3, [pc, #20]	; (71d4 <update_radio_bitrate+0x38>)
    71c0:	f44f 7296 	mov.w	r2, #300	; 0x12c
    71c4:	e7f8      	b.n	71b8 <update_radio_bitrate+0x1c>
	switch (esb_cfg.bitrate) {
    71c6:	2000      	movs	r0, #0
}
    71c8:	4770      	bx	lr
    71ca:	bf00      	nop
    71cc:	20001954 	.word	0x20001954
    71d0:	40001000 	.word	0x40001000
    71d4:	20001864 	.word	0x20001864

000071d8 <reset_fifos>:
	return params_valid;
}

static void reset_fifos(void)
{
	tx_fifo.back = 0;
    71d8:	4a04      	ldr	r2, [pc, #16]	; (71ec <reset_fifos+0x14>)
    71da:	2300      	movs	r3, #0
	tx_fifo.front = 0;
    71dc:	e9c2 3308 	strd	r3, r3, [r2, #32]
	tx_fifo.count = 0;
    71e0:	6293      	str	r3, [r2, #40]	; 0x28

	rx_fifo.back = 0;
    71e2:	4a03      	ldr	r2, [pc, #12]	; (71f0 <reset_fifos+0x18>)
	rx_fifo.front = 0;
    71e4:	e9c2 3308 	strd	r3, r3, [r2, #32]
	rx_fifo.count = 0;
    71e8:	6293      	str	r3, [r2, #40]	; 0x28
}
    71ea:	4770      	bx	lr
    71ec:	20001920 	.word	0x20001920
    71f0:	200018f4 	.word	0x200018f4

000071f4 <esb_timer_handler>:
	return true;
}

static void esb_timer_handler(nrf_timer_event_t event_type, void *context)
{
	if (nrf_timer_int_enable_check(esb_timer.p_reg, NRF_TIMER_INT_COMPARE1_MASK)) {
    71f4:	4b05      	ldr	r3, [pc, #20]	; (720c <esb_timer_handler+0x18>)
    71f6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_timer_int_enable_check(NRF_TIMER_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    71f8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    71fc:	0392      	lsls	r2, r2, #14
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    71fe:	bf42      	ittt	mi
    7200:	2200      	movmi	r2, #0
    7202:	f8c3 2144 	strmi.w	r2, [r3, #324]	; 0x144
    7206:	f8d3 3144 	ldrmi.w	r3, [r3, #324]	; 0x144
		nrf_timer_event_clear(esb_timer.p_reg, NRF_TIMER_EVENT_COMPARE1);
		if (on_timer_compare1 != NULL) {
			on_timer_compare1();
		}
	}
}
    720a:	4770      	bx	lr
    720c:	200000e4 	.word	0x200000e4

00007210 <esb_fem_for_tx_set>:
{
    7210:	b538      	push	{r3, r4, r5, lr}
	timer_shorts = NRF_TIMER_SHORT_COMPARE2_STOP_MASK;
    7212:	2800      	cmp	r0, #0
	if (mpsl_fem_pa_configuration_set(&tx_event, &disable_event) == 0) {
    7214:	490a      	ldr	r1, [pc, #40]	; (7240 <esb_fem_for_tx_set+0x30>)
    7216:	480b      	ldr	r0, [pc, #44]	; (7244 <esb_fem_for_tx_set+0x34>)
    7218:	4d0b      	ldr	r5, [pc, #44]	; (7248 <esb_fem_for_tx_set+0x38>)
	timer_shorts = NRF_TIMER_SHORT_COMPARE2_STOP_MASK;
    721a:	f240 4404 	movw	r4, #1028	; 0x404
    721e:	bf08      	it	eq
    7220:	f44f 6480 	moveq.w	r4, #1024	; 0x400
	if (mpsl_fem_pa_configuration_set(&tx_event, &disable_event) == 0) {
    7224:	f7f9 f85c 	bl	2e0 <mpsl_fem_pa_configuration_set>
    7228:	b928      	cbnz	r0, 7236 <esb_fem_for_tx_set+0x26>
		esb_ppi_for_fem_set();
    722a:	f000 feeb 	bl	8004 <esb_ppi_for_fem_set>
	nrf_timer_shorts_set(esb_timer.p_reg, timer_shorts);
    722e:	682b      	ldr	r3, [r5, #0]
    p_reg->SHORTS = mask;
    7230:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
    7234:	bd38      	pop	{r3, r4, r5, pc}
		nrf_timer_cc_set(esb_timer.p_reg, NRF_TIMER_CC_CHANNEL2, TX_RAMP_UP_TIME_US);
    7236:	682b      	ldr	r3, [r5, #0]

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
    7238:	2281      	movs	r2, #129	; 0x81
    723a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
}
    723e:	e7f6      	b.n	722e <esb_fem_for_tx_set+0x1e>
    7240:	200000a0 	.word	0x200000a0
    7244:	0000ebb0 	.word	0x0000ebb0
    7248:	200000e4 	.word	0x200000e4

0000724c <esb_fem_reset>:
{
    724c:	b508      	push	{r3, lr}
	nrf_timer_task_trigger(esb_timer.p_reg, NRF_TIMER_TASK_SHUTDOWN);
    724e:	4b08      	ldr	r3, [pc, #32]	; (7270 <esb_fem_reset+0x24>)
    7250:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7252:	2201      	movs	r2, #1
    7254:	611a      	str	r2, [r3, #16]
	mpsl_fem_lna_configuration_clear();
    7256:	f7f9 f831 	bl	2bc <mpsl_fem_lna_configuration_clear>
	mpsl_fem_pa_configuration_clear();
    725a:	f7f9 f83b 	bl	2d4 <mpsl_fem_pa_configuration_clear>
	esb_ppi_for_fem_clear();
    725e:	f000 feed 	bl	803c <esb_ppi_for_fem_clear>
	mpsl_fem_deactivate_now(MPSL_FEM_ALL);
    7262:	2003      	movs	r0, #3
    7264:	f7f9 f81e 	bl	2a4 <mpsl_fem_deactivate_now>
}
    7268:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mpsl_fem_disable();
    726c:	f7f9 b820 	b.w	2b0 <mpsl_fem_disable>
    7270:	200000e4 	.word	0x200000e4

00007274 <update_radio_tx_power>:
{
    7274:	b507      	push	{r0, r1, r2, lr}
				      (RADIO_BASE_FREQUENCY + esb_addr.rf_channel), false);
    7276:	4b0b      	ldr	r3, [pc, #44]	; (72a4 <update_radio_tx_power+0x30>)
	(void)mpsl_fem_tx_power_split(esb_cfg.tx_output_power, &tx_power,
    7278:	480b      	ldr	r0, [pc, #44]	; (72a8 <update_radio_tx_power+0x34>)
				      (RADIO_BASE_FREQUENCY + esb_addr.rf_channel), false);
    727a:	7cda      	ldrb	r2, [r3, #19]
	(void)mpsl_fem_tx_power_split(esb_cfg.tx_output_power, &tx_power,
    727c:	f990 000a 	ldrsb.w	r0, [r0, #10]
    7280:	2300      	movs	r3, #0
    7282:	f502 6216 	add.w	r2, r2, #2400	; 0x960
    7286:	a901      	add	r1, sp, #4
    7288:	f7f9 f836 	bl	2f8 <mpsl_fem_tx_power_split>
	err = mpsl_fem_pa_gain_set(&tx_power.fem);
    728c:	f10d 0005 	add.w	r0, sp, #5
    7290:	f7f9 f82c 	bl	2ec <mpsl_fem_pa_gain_set>
    p_reg->TXPOWER = (((uint32_t)tx_power) << RADIO_TXPOWER_TXPOWER_Pos);
    7294:	f89d 2004 	ldrb.w	r2, [sp, #4]
    7298:	4b04      	ldr	r3, [pc, #16]	; (72ac <update_radio_tx_power+0x38>)
    729a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
    729e:	b003      	add	sp, #12
    72a0:	f85d fb04 	ldr.w	pc, [sp], #4
    72a4:	200000d0 	.word	0x200000d0
    72a8:	20001954 	.word	0x20001954
    72ac:	40001000 	.word	0x40001000

000072b0 <update_radio_addresses.part.0>:
static void update_radio_addresses(uint8_t update_mask)
    72b0:	b510      	push	{r4, lr}
		nrf_radio_prefix0_set(NRF_RADIO, bytewise_bit_swap(&esb_addr.pipe_prefixes[0]));
    72b2:	4c06      	ldr	r4, [pc, #24]	; (72cc <update_radio_addresses.part.0+0x1c>)
    return p_reg->BASE1;
}

NRF_STATIC_INLINE void nrf_radio_prefix0_set(NRF_RADIO_Type * p_reg, uint32_t prefixes)
{
    p_reg->PREFIX0 = prefixes;
    72b4:	4906      	ldr	r1, [pc, #24]	; (72d0 <update_radio_addresses.part.0+0x20>)
    72b6:	4620      	mov	r0, r4
    72b8:	f006 fc13 	bl	dae2 <bytewise_bit_swap>
    72bc:	f8c1 0524 	str.w	r0, [r1, #1316]	; 0x524
		nrf_radio_prefix1_set(NRF_RADIO, bytewise_bit_swap(&esb_addr.pipe_prefixes[4]));
    72c0:	1d20      	adds	r0, r4, #4
    72c2:	f006 fc0e 	bl	dae2 <bytewise_bit_swap>
    return p_reg->PREFIX0;
}

NRF_STATIC_INLINE void nrf_radio_prefix1_set(NRF_RADIO_Type * p_reg, uint32_t prefixes)
{
    p_reg->PREFIX1 = prefixes;
    72c6:	f8c1 0528 	str.w	r0, [r1, #1320]	; 0x528
}
    72ca:	bd10      	pop	{r4, pc}
    72cc:	200000d8 	.word	0x200000d8
    72d0:	40001000 	.word	0x40001000

000072d4 <tx_fifo_remove_last.part.0>:
	__asm__ volatile(
    72d4:	f04f 0340 	mov.w	r3, #64	; 0x40
    72d8:	f3ef 8111 	mrs	r1, BASEPRI
    72dc:	f383 8812 	msr	BASEPRI_MAX, r3
    72e0:	f3bf 8f6f 	isb	sy
	tx_fifo.count--;
    72e4:	4a07      	ldr	r2, [pc, #28]	; (7304 <tx_fifo_remove_last.part.0+0x30>)
    72e6:	6a93      	ldr	r3, [r2, #40]	; 0x28
    72e8:	3b01      	subs	r3, #1
    72ea:	6293      	str	r3, [r2, #40]	; 0x28
	if (++tx_fifo.front >= CONFIG_ESB_TX_FIFO_SIZE) {
    72ec:	6a53      	ldr	r3, [r2, #36]	; 0x24
    72ee:	3301      	adds	r3, #1
		tx_fifo.front = 0;
    72f0:	2b08      	cmp	r3, #8
    72f2:	bf28      	it	cs
    72f4:	2300      	movcs	r3, #0
    72f6:	6253      	str	r3, [r2, #36]	; 0x24
	__asm__ volatile(
    72f8:	f381 8811 	msr	BASEPRI, r1
    72fc:	f3bf 8f6f 	isb	sy
}
    7300:	4770      	bx	lr
    7302:	bf00      	nop
    7304:	20001920 	.word	0x20001920

00007308 <rx_fifo_push_rfbuf.part.0>:
static bool rx_fifo_push_rfbuf(uint8_t pipe, uint8_t pid)
    7308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (esb_cfg.protocol == ESB_PROTOCOL_ESB_DPL) {
    730c:	4b22      	ldr	r3, [pc, #136]	; (7398 <rx_fifo_push_rfbuf.part.0+0x90>)
    730e:	4f23      	ldr	r7, [pc, #140]	; (739c <rx_fifo_push_rfbuf.part.0+0x94>)
    7310:	781a      	ldrb	r2, [r3, #0]
    7312:	2a01      	cmp	r2, #1
static bool rx_fifo_push_rfbuf(uint8_t pipe, uint8_t pid)
    7314:	4680      	mov	r8, r0
    7316:	460e      	mov	r6, r1
	if (esb_cfg.protocol == ESB_PROTOCOL_ESB_DPL) {
    7318:	d130      	bne.n	737c <rx_fifo_push_rfbuf.part.0+0x74>
		if (rx_pdu->type.dpl_pdu.length > CONFIG_ESB_MAX_PAYLOAD_LENGTH) {
    731a:	783b      	ldrb	r3, [r7, #0]
    731c:	f3c3 0205 	ubfx	r2, r3, #0, #6
    7320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7324:	2b20      	cmp	r3, #32
    7326:	d834      	bhi.n	7392 <rx_fifo_push_rfbuf.part.0+0x8a>
		rx_fifo.payload[rx_fifo.back]->length = rx_pdu->type.dpl_pdu.length;
    7328:	4b1d      	ldr	r3, [pc, #116]	; (73a0 <rx_fifo_push_rfbuf.part.0+0x98>)
    732a:	6a19      	ldr	r1, [r3, #32]
    732c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    7330:	701a      	strb	r2, [r3, #0]
	memcpy(rx_fifo.payload[rx_fifo.back]->data, rx_pdu->data,
    7332:	4c1b      	ldr	r4, [pc, #108]	; (73a0 <rx_fifo_push_rfbuf.part.0+0x98>)
    7334:	491b      	ldr	r1, [pc, #108]	; (73a4 <rx_fifo_push_rfbuf.part.0+0x9c>)
    7336:	6a23      	ldr	r3, [r4, #32]
    7338:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    733c:	f810 2b05 	ldrb.w	r2, [r0], #5
    7340:	f006 f926 	bl	d590 <memcpy>
	rx_fifo.payload[rx_fifo.back]->pipe = pipe;
    7344:	6a23      	ldr	r3, [r4, #32]
    return p_reg->TIFS;
}

NRF_STATIC_INLINE uint8_t nrf_radio_rssi_sample_get(NRF_RADIO_Type const * p_reg)
{
    return (uint8_t)((p_reg->RSSISAMPLE & RADIO_RSSISAMPLE_RSSISAMPLE_Msk) >>
    7346:	4a18      	ldr	r2, [pc, #96]	; (73a8 <rx_fifo_push_rfbuf.part.0+0xa0>)
    7348:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    734c:	f885 8001 	strb.w	r8, [r5, #1]
    7350:	f8d2 2548 	ldr.w	r2, [r2, #1352]	; 0x548
	rx_fifo.payload[rx_fifo.back]->pid = pid;
    7354:	712e      	strb	r6, [r5, #4]
	if (++rx_fifo.back >= CONFIG_ESB_RX_FIFO_SIZE) {
    7356:	3301      	adds	r3, #1
    7358:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		rx_fifo.back = 0;
    735c:	2b08      	cmp	r3, #8
	rx_fifo.payload[rx_fifo.back]->rssi = nrf_radio_rssi_sample_get(NRF_RADIO);
    735e:	70aa      	strb	r2, [r5, #2]
	rx_fifo.payload[rx_fifo.back]->noack = !rx_pdu->type.dpl_pdu.no_ack;
    7360:	787a      	ldrb	r2, [r7, #1]
		rx_fifo.back = 0;
    7362:	bf28      	it	cs
    7364:	2300      	movcs	r3, #0
    7366:	6223      	str	r3, [r4, #32]
	rx_fifo.count++;
    7368:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	rx_fifo.payload[rx_fifo.back]->noack = !rx_pdu->type.dpl_pdu.no_ack;
    736a:	43d2      	mvns	r2, r2
    736c:	f002 0201 	and.w	r2, r2, #1
	rx_fifo.count++;
    7370:	3301      	adds	r3, #1
	rx_fifo.payload[rx_fifo.back]->noack = !rx_pdu->type.dpl_pdu.no_ack;
    7372:	70ea      	strb	r2, [r5, #3]
	rx_fifo.count++;
    7374:	62a3      	str	r3, [r4, #40]	; 0x28
	return true;
    7376:	2001      	movs	r0, #1
}
    7378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_fifo.payload[rx_fifo.back]->length = rx_pdu->type.dpl_pdu.length;
    737c:	4a08      	ldr	r2, [pc, #32]	; (73a0 <rx_fifo_push_rfbuf.part.0+0x98>)
    737e:	6a11      	ldr	r1, [r2, #32]
    7380:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
	} else if (esb_cfg.mode == ESB_MODE_PTX) {
    7384:	7859      	ldrb	r1, [r3, #1]
    7386:	b909      	cbnz	r1, 738c <rx_fifo_push_rfbuf.part.0+0x84>
		rx_fifo.payload[rx_fifo.back]->length = 0;
    7388:	7011      	strb	r1, [r2, #0]
    738a:	e7d2      	b.n	7332 <rx_fifo_push_rfbuf.part.0+0x2a>
		rx_fifo.payload[rx_fifo.back]->length = esb_cfg.payload_length;
    738c:	7c5b      	ldrb	r3, [r3, #17]
    738e:	7013      	strb	r3, [r2, #0]
    7390:	e7cf      	b.n	7332 <rx_fifo_push_rfbuf.part.0+0x2a>
		return false;
    7392:	2000      	movs	r0, #0
    7394:	e7f0      	b.n	7378 <rx_fifo_push_rfbuf.part.0+0x70>
    7396:	bf00      	nop
    7398:	20001954 	.word	0x20001954
    739c:	20001f8a 	.word	0x20001f8a
    73a0:	200018f4 	.word	0x200018f4
    73a4:	20001f8c 	.word	0x20001f8c
    73a8:	40001000 	.word	0x40001000

000073ac <nrf_radio_packet_configure.constprop.0>:
                    ((uint32_t)p_config->s1len << RADIO_PCNF0_S1LEN_Pos) |
    73ac:	7883      	ldrb	r3, [r0, #2]
                    ((uint32_t)p_config->s0len << RADIO_PCNF0_S0LEN_Pos) |
    73ae:	7842      	ldrb	r2, [r0, #1]
                    ((uint32_t)p_config->s1len << RADIO_PCNF0_S1LEN_Pos) |
    73b0:	041b      	lsls	r3, r3, #16
                    ((uint32_t)p_config->s0len << RADIO_PCNF0_S0LEN_Pos) |
    73b2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->PCNF0 = (((uint32_t)p_config->lflen << RADIO_PCNF0_LFLEN_Pos) |
    73b6:	7802      	ldrb	r2, [r0, #0]
                    ((uint32_t)p_config->s0len << RADIO_PCNF0_S0LEN_Pos) |
    73b8:	4313      	orrs	r3, r2
                        (RADIO_PCNF0_S1INCL_Include   << RADIO_PCNF0_S1INCL_Pos) :
    73ba:	78c2      	ldrb	r2, [r0, #3]
                    ((uint32_t)p_config->s1len << RADIO_PCNF0_S1LEN_Pos) |
    73bc:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
                    ((uint32_t)p_config->cilen << RADIO_PCNF0_CILEN_Pos) |
    73c0:	7902      	ldrb	r2, [r0, #4]
                        (RADIO_PCNF0_S1INCL_Automatic << RADIO_PCNF0_S1INCL_Pos) ) |
    73c2:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                    ((uint32_t)p_config->plen << RADIO_PCNF0_PLEN_Pos) |
    73c6:	7942      	ldrb	r2, [r0, #5]
                    ((uint32_t)p_config->cilen << RADIO_PCNF0_CILEN_Pos) |
    73c8:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                        (RADIO_PCNF0_CRCINC_Include << RADIO_PCNF0_CRCINC_Pos) :
    73cc:	7982      	ldrb	r2, [r0, #6]
                    ((uint32_t)p_config->plen << RADIO_PCNF0_PLEN_Pos) |
    73ce:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
                    ((uint32_t)p_config->termlen << RADIO_PCNF0_TERMLEN_Pos) |
    73d2:	79c2      	ldrb	r2, [r0, #7]
    73d4:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    p_reg->PCNF0 = (((uint32_t)p_config->lflen << RADIO_PCNF0_LFLEN_Pos) |
    73d8:	4a09      	ldr	r2, [pc, #36]	; (7400 <nrf_radio_packet_configure.constprop.0+0x54>)
    73da:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
                    ((uint32_t)p_config->balen   << RADIO_PCNF1_BALEN_Pos) |
    73de:	7a83      	ldrb	r3, [r0, #10]
                    ((uint32_t)p_config->statlen << RADIO_PCNF1_STATLEN_Pos) |
    73e0:	7a41      	ldrb	r1, [r0, #9]
                    ((uint32_t)p_config->balen   << RADIO_PCNF1_BALEN_Pos) |
    73e2:	041b      	lsls	r3, r3, #16
                    ((uint32_t)p_config->statlen << RADIO_PCNF1_STATLEN_Pos) |
    73e4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    p_reg->PCNF1 = (((uint32_t)p_config->maxlen  << RADIO_PCNF1_MAXLEN_Pos) |
    73e8:	7a01      	ldrb	r1, [r0, #8]
                    ((uint32_t)p_config->statlen << RADIO_PCNF1_STATLEN_Pos) |
    73ea:	430b      	orrs	r3, r1
                         (RADIO_PCNF1_ENDIAN_Big    << RADIO_PCNF1_ENDIAN_Pos) :
    73ec:	7ac1      	ldrb	r1, [r0, #11]
                    ((uint32_t)p_config->balen   << RADIO_PCNF1_BALEN_Pos) |
    73ee:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                         (RADIO_PCNF1_WHITEEN_Enabled  << RADIO_PCNF1_WHITEEN_Pos) :
    73f2:	7b01      	ldrb	r1, [r0, #12]
                         (RADIO_PCNF1_ENDIAN_Little << RADIO_PCNF1_ENDIAN_Pos) ) |
    73f4:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    p_reg->PCNF1 = (((uint32_t)p_config->maxlen  << RADIO_PCNF1_MAXLEN_Pos) |
    73f8:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
}
    73fc:	4770      	bx	lr
    73fe:	bf00      	nop
    7400:	40001000 	.word	0x40001000

00007404 <update_rf_payload_format_esb>:
{
    7404:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7406:	4604      	mov	r4, r0
	const nrf_radio_packet_conf_t packet_config = {
    7408:	220d      	movs	r2, #13
    740a:	2100      	movs	r1, #0
    740c:	4668      	mov	r0, sp
    740e:	f006 f8ca 	bl	d5a6 <memset>
    7412:	4b0a      	ldr	r3, [pc, #40]	; (743c <update_rf_payload_format_esb+0x38>)
    7414:	9300      	str	r3, [sp, #0]
		.balen = (esb_addr.addr_length - 1),
    7416:	4b0a      	ldr	r3, [pc, #40]	; (7440 <update_rf_payload_format_esb+0x3c>)
    7418:	7c5b      	ldrb	r3, [r3, #17]
	const nrf_radio_packet_conf_t packet_config = {
    741a:	b2e0      	uxtb	r0, r4
		.balen = (esb_addr.addr_length - 1),
    741c:	3b01      	subs	r3, #1
	const nrf_radio_packet_conf_t packet_config = {
    741e:	f88d 0008 	strb.w	r0, [sp, #8]
    7422:	f88d 0009 	strb.w	r0, [sp, #9]
    7426:	f88d 300a 	strb.w	r3, [sp, #10]
	nrf_radio_packet_configure(NRF_RADIO, &packet_config);
    742a:	4668      	mov	r0, sp
	const nrf_radio_packet_conf_t packet_config = {
    742c:	2301      	movs	r3, #1
    742e:	f88d 300b 	strb.w	r3, [sp, #11]
	nrf_radio_packet_configure(NRF_RADIO, &packet_config);
    7432:	f7ff ffbb 	bl	73ac <nrf_radio_packet_configure.constprop.0>
}
    7436:	b004      	add	sp, #16
    7438:	bd10      	pop	{r4, pc}
    743a:	bf00      	nop
    743c:	00010100 	.word	0x00010100
    7440:	200000d0 	.word	0x200000d0

00007444 <update_rf_payload_format_esb_dpl>:
{
    7444:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	nrf_radio_packet_conf_t packet_config = { 0 };
    7446:	2300      	movs	r3, #0
    7448:	f8cd 3009 	str.w	r3, [sp, #9]
    744c:	f8cd 3001 	str.w	r3, [sp, #1]
    7450:	f8cd 3005 	str.w	r3, [sp, #5]
	packet_config.s1len = 3;
    7454:	2303      	movs	r3, #3
    7456:	f88d 3002 	strb.w	r3, [sp, #2]
	packet_config.lflen = (CONFIG_ESB_MAX_PAYLOAD_LENGTH <= 32) ? 6 : 8;
    745a:	2306      	movs	r3, #6
    745c:	f88d 3000 	strb.w	r3, [sp]
	packet_config.big_endian = true;
    7460:	2301      	movs	r3, #1
    7462:	f88d 300b 	strb.w	r3, [sp, #11]
	packet_config.balen = (esb_addr.addr_length - 1);
    7466:	4b07      	ldr	r3, [pc, #28]	; (7484 <update_rf_payload_format_esb_dpl+0x40>)
    7468:	7c5b      	ldrb	r3, [r3, #17]
    746a:	3b01      	subs	r3, #1
    746c:	f88d 300a 	strb.w	r3, [sp, #10]
	nrf_radio_packet_configure(NRF_RADIO, &packet_config);
    7470:	4668      	mov	r0, sp
	packet_config.maxlen = CONFIG_ESB_MAX_PAYLOAD_LENGTH;
    7472:	2320      	movs	r3, #32
    7474:	f88d 3008 	strb.w	r3, [sp, #8]
	nrf_radio_packet_configure(NRF_RADIO, &packet_config);
    7478:	f7ff ff98 	bl	73ac <nrf_radio_packet_configure.constprop.0>
}
    747c:	b005      	add	sp, #20
    747e:	f85d fb04 	ldr.w	pc, [sp], #4
    7482:	bf00      	nop
    7484:	200000d0 	.word	0x200000d0

00007488 <RADIO_IRQHandler>:
	ISR_DIRECT_PM();
}

#else /* !IS_ENABLED(CONFIG_ESB_DYNAMIC_INTERRUPTS) */

ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    7488:	4668      	mov	r0, sp
    748a:	f020 0107 	bic.w	r1, r0, #7
    748e:	468d      	mov	sp, r1
    7490:	b501      	push	{r0, lr}
    return p_reg->INTENSET & mask;
    7492:	4b0c      	ldr	r3, [pc, #48]	; (74c4 <RADIO_IRQHandler+0x3c>)
    7494:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_DISABLED_MASK) &&
    7498:	06d2      	lsls	r2, r2, #27
    749a:	d50b      	bpl.n	74b4 <RADIO_IRQHandler+0x2c>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    749c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    74a0:	b142      	cbz	r2, 74b4 <RADIO_IRQHandler+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    74a2:	2200      	movs	r2, #0
    74a4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    74a8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
		if (on_radio_disabled) {
    74ac:	4b06      	ldr	r3, [pc, #24]	; (74c8 <RADIO_IRQHandler+0x40>)
    74ae:	681b      	ldr	r3, [r3, #0]
    74b0:	b103      	cbz	r3, 74b4 <RADIO_IRQHandler+0x2c>
			on_radio_disabled();
    74b2:	4798      	blx	r3
{
	radio_irq_handler();

	ISR_DIRECT_PM();
    74b4:	f7fc fe22 	bl	40fc <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
    74b8:	f7fc ff04 	bl	42c4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    74bc:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    74c0:	4685      	mov	sp, r0
    74c2:	4770      	bx	lr
    74c4:	40001000 	.word	0x40001000
    74c8:	20001860 	.word	0x20001860

000074cc <start_tx_transaction>:
{
    74cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	last_tx_attempts = 1;
    74ce:	4b58      	ldr	r3, [pc, #352]	; (7630 <start_tx_transaction+0x164>)
	switch (esb_cfg.protocol) {
    74d0:	4f58      	ldr	r7, [pc, #352]	; (7634 <start_tx_transaction+0x168>)
	current_payload = tx_fifo.payload[tx_fifo.front];
    74d2:	4d59      	ldr	r5, [pc, #356]	; (7638 <start_tx_transaction+0x16c>)
	switch (esb_cfg.protocol) {
    74d4:	783c      	ldrb	r4, [r7, #0]
    74d6:	4e59      	ldr	r6, [pc, #356]	; (763c <start_tx_transaction+0x170>)
	last_tx_attempts = 1;
    74d8:	2201      	movs	r2, #1
    74da:	601a      	str	r2, [r3, #0]
	current_payload = tx_fifo.payload[tx_fifo.front];
    74dc:	4b58      	ldr	r3, [pc, #352]	; (7640 <start_tx_transaction+0x174>)
    74de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    74e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    74e4:	602b      	str	r3, [r5, #0]
	switch (esb_cfg.protocol) {
    74e6:	2c00      	cmp	r4, #0
    74e8:	d037      	beq.n	755a <start_tx_transaction+0x8e>
    74ea:	2c01      	cmp	r4, #1
    74ec:	d05d      	beq.n	75aa <start_tx_transaction+0xde>
		ack = !current_payload->noack || !esb_cfg.selective_auto_ack;
    74ee:	2401      	movs	r4, #1
	nrf_radio_txaddress_set(NRF_RADIO, current_payload->pipe);
    74f0:	682b      	ldr	r3, [r5, #0]
    p_reg->TXADDRESS = ((uint32_t)txaddress) << RADIO_TXADDRESS_TXADDRESS_Pos;
    74f2:	4d54      	ldr	r5, [pc, #336]	; (7644 <start_tx_transaction+0x178>)
    74f4:	785a      	ldrb	r2, [r3, #1]
    74f6:	f8c5 252c 	str.w	r2, [r5, #1324]	; 0x52c
	nrf_radio_rxaddresses_set(NRF_RADIO, BIT(current_payload->pipe));
    74fa:	785b      	ldrb	r3, [r3, #1]
    74fc:	2701      	movs	r7, #1
    74fe:	fa07 f303 	lsl.w	r3, r7, r3
    7502:	b2db      	uxtb	r3, r3
    p_reg->RXADDRESSES = (uint32_t)(rxaddresses);
    7504:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
        delta = ((uint32_t)(radio_frequency - 2400)) |
    7508:	4b4f      	ldr	r3, [pc, #316]	; (7648 <start_tx_transaction+0x17c>)
    750a:	7cdb      	ldrb	r3, [r3, #19]
    p_reg->FREQUENCY = delta;
    750c:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
	update_radio_tx_power();
    7510:	f7ff feb0 	bl	7274 <update_radio_tx_power>
    7514:	4b4d      	ldr	r3, [pc, #308]	; (764c <start_tx_transaction+0x180>)
    p_reg->PACKETPTR = (uint32_t)p_packet;
    7516:	f8c5 6504 	str.w	r6, [r5, #1284]	; 0x504
    751a:	2202      	movs	r2, #2
    751c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    7520:	4638      	mov	r0, r7
    7522:	f7fc fda1 	bl	4068 <arch_irq_enable>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7526:	2000      	movs	r0, #0
    7528:	f8c5 0104 	str.w	r0, [r5, #260]	; 0x104
    752c:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    7530:	f8c5 0108 	str.w	r0, [r5, #264]	; 0x108
    7534:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    7538:	f8c5 0110 	str.w	r0, [r5, #272]	; 0x110
    753c:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    7540:	f8c5 010c 	str.w	r0, [r5, #268]	; 0x10c
		esb_ppi_for_txrx_set(false, ack);
    7544:	4621      	mov	r1, r4
    7546:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    754a:	f000 fd8d 	bl	8068 <esb_ppi_for_txrx_set>
		esb_fem_for_tx_set(ack);
    754e:	4620      	mov	r0, r4
    7550:	f7ff fe5e 	bl	7210 <esb_fem_for_tx_set>
}

NRF_STATIC_INLINE void nrf_egu_task_trigger(NRF_EGU_Type * p_reg, nrf_egu_task_t egu_task)
{
    NRFX_ASSERT(p_reg);
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_task)) = 0x1UL;
    7554:	4b3e      	ldr	r3, [pc, #248]	; (7650 <start_tx_transaction+0x184>)
    7556:	619f      	str	r7, [r3, #24]
}
    7558:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memset(&pdu->type.fixed_pdu, 0, sizeof(pdu->type.fixed_pdu));
    755a:	4621      	mov	r1, r4
    755c:	2202      	movs	r2, #2
    755e:	4630      	mov	r0, r6
    7560:	f006 f821 	bl	d5a6 <memset>
		update_rf_payload_format(current_payload->length);
    7564:	682a      	ldr	r2, [r5, #0]
    7566:	4b3b      	ldr	r3, [pc, #236]	; (7654 <start_tx_transaction+0x188>)
    7568:	7810      	ldrb	r0, [r2, #0]
    756a:	681b      	ldr	r3, [r3, #0]
    756c:	4798      	blx	r3
		pdu->type.fixed_pdu.pid = current_payload->pid;
    756e:	6829      	ldr	r1, [r5, #0]
    7570:	7833      	ldrb	r3, [r6, #0]
    7572:	790a      	ldrb	r2, [r1, #4]
    7574:	4630      	mov	r0, r6
    7576:	f362 0301 	bfi	r3, r2, #0, #2
    757a:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(pdu->data, current_payload->data, current_payload->length);
    757e:	f811 2b05 	ldrb.w	r2, [r1], #5
    7582:	f006 f805 	bl	d590 <memcpy>
    p_reg->SHORTS = shorts_mask;
    7586:	4b2f      	ldr	r3, [pc, #188]	; (7644 <start_tx_transaction+0x178>)
    7588:	f240 121b 	movw	r2, #283	; 0x11b
    758c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->INTENSET = mask;
    7590:	2210      	movs	r2, #16
    7592:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		retransmits_remaining = esb_cfg.retransmit_count;
    7596:	4b30      	ldr	r3, [pc, #192]	; (7658 <start_tx_transaction+0x18c>)
    7598:	89fa      	ldrh	r2, [r7, #14]
    759a:	601a      	str	r2, [r3, #0]
		on_radio_disabled = on_radio_disabled_tx;
    759c:	4b2f      	ldr	r3, [pc, #188]	; (765c <start_tx_transaction+0x190>)
    759e:	4a30      	ldr	r2, [pc, #192]	; (7660 <start_tx_transaction+0x194>)
    75a0:	601a      	str	r2, [r3, #0]
		esb_state = ESB_STATE_PTX_TX_ACK;
    75a2:	4b30      	ldr	r3, [pc, #192]	; (7664 <start_tx_transaction+0x198>)
    75a4:	2202      	movs	r2, #2
    75a6:	701a      	strb	r2, [r3, #0]
		break;
    75a8:	e7a1      	b.n	74ee <start_tx_transaction+0x22>
		memset(&pdu->type.dpl_pdu, 0, sizeof(pdu->type.dpl_pdu));
    75aa:	2202      	movs	r2, #2
    75ac:	2100      	movs	r1, #0
    75ae:	4630      	mov	r0, r6
    75b0:	f005 fff9 	bl	d5a6 <memset>
		ack = !current_payload->noack || !esb_cfg.selective_auto_ack;
    75b4:	6829      	ldr	r1, [r5, #0]
    75b6:	78ca      	ldrb	r2, [r1, #3]
    75b8:	b112      	cbz	r2, 75c0 <start_tx_transaction+0xf4>
    75ba:	7cbc      	ldrb	r4, [r7, #18]
    75bc:	f084 0401 	eor.w	r4, r4, #1
		pdu->type.dpl_pdu.pid = current_payload->pid;
    75c0:	790b      	ldrb	r3, [r1, #4]
		pdu->type.dpl_pdu.length = current_payload->length;
    75c2:	f891 c000 	ldrb.w	ip, [r1]
    75c6:	7830      	ldrb	r0, [r6, #0]
		pdu->type.dpl_pdu.no_ack = current_payload->noack ? 0x00 : 0x01;
    75c8:	005b      	lsls	r3, r3, #1
    75ca:	f003 0306 	and.w	r3, r3, #6
    75ce:	2a00      	cmp	r2, #0
    75d0:	bf08      	it	eq
    75d2:	f043 0301 	orreq.w	r3, r3, #1
    75d6:	7872      	ldrb	r2, [r6, #1]
    75d8:	f022 0207 	bic.w	r2, r2, #7
    75dc:	4313      	orrs	r3, r2
		pdu->type.dpl_pdu.length = current_payload->length;
    75de:	f36c 0005 	bfi	r0, ip, #0, #6
    75e2:	7030      	strb	r0, [r6, #0]
		pdu->type.dpl_pdu.no_ack = current_payload->noack ? 0x00 : 0x01;
    75e4:	7073      	strb	r3, [r6, #1]
		memcpy(pdu->data, current_payload->data, current_payload->length);
    75e6:	f811 2b05 	ldrb.w	r2, [r1], #5
    75ea:	481f      	ldr	r0, [pc, #124]	; (7668 <start_tx_transaction+0x19c>)
    75ec:	f005 ffd0 	bl	d590 <memcpy>
		if (ack) {
    75f0:	4b14      	ldr	r3, [pc, #80]	; (7644 <start_tx_transaction+0x178>)
    75f2:	491a      	ldr	r1, [pc, #104]	; (765c <start_tx_transaction+0x190>)
    75f4:	4a1b      	ldr	r2, [pc, #108]	; (7664 <start_tx_transaction+0x198>)
    75f6:	b174      	cbz	r4, 7616 <start_tx_transaction+0x14a>
    p_reg->SHORTS = shorts_mask;
    75f8:	f240 101b 	movw	r0, #283	; 0x11b
    75fc:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
			retransmits_remaining = esb_cfg.retransmit_count;
    7600:	4815      	ldr	r0, [pc, #84]	; (7658 <start_tx_transaction+0x18c>)
    7602:	89fc      	ldrh	r4, [r7, #14]
    7604:	6004      	str	r4, [r0, #0]
			on_radio_disabled = on_radio_disabled_tx;
    7606:	4816      	ldr	r0, [pc, #88]	; (7660 <start_tx_transaction+0x194>)
    7608:	6008      	str	r0, [r1, #0]
			esb_state = ESB_STATE_PTX_TX_ACK;
    760a:	2102      	movs	r1, #2
    760c:	7011      	strb	r1, [r2, #0]
    p_reg->INTENSET = mask;
    760e:	2210      	movs	r2, #16
    7610:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    7614:	e76b      	b.n	74ee <start_tx_transaction+0x22>
    p_reg->SHORTS = shorts_mask;
    7616:	f240 1013 	movw	r0, #275	; 0x113
    761a:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
			on_radio_disabled = on_radio_disabled_tx_noack;
    761e:	4813      	ldr	r0, [pc, #76]	; (766c <start_tx_transaction+0x1a0>)
    7620:	6008      	str	r0, [r1, #0]
			esb_state = ESB_STATE_PTX_TX;
    7622:	2101      	movs	r1, #1
    7624:	7011      	strb	r1, [r2, #0]
    p_reg->INTENSET = mask;
    7626:	2210      	movs	r2, #16
    7628:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    762c:	e760      	b.n	74f0 <start_tx_transaction+0x24>
    762e:	bf00      	nop
    7630:	20001868 	.word	0x20001868
    7634:	20001954 	.word	0x20001954
    7638:	2000194c 	.word	0x2000194c
    763c:	20001fac 	.word	0x20001fac
    7640:	20001920 	.word	0x20001920
    7644:	40001000 	.word	0x40001000
    7648:	200000d0 	.word	0x200000d0
    764c:	e000e100 	.word	0xe000e100
    7650:	40014000 	.word	0x40014000
    7654:	2000185c 	.word	0x2000185c
    7658:	2000186c 	.word	0x2000186c
    765c:	20001860 	.word	0x20001860
    7660:	00007795 	.word	0x00007795
    7664:	20001fce 	.word	0x20001fce
    7668:	20001fae 	.word	0x20001fae
    766c:	000076f5 	.word	0x000076f5

00007670 <SWI0_EGU0_IRQHandler>:

	return 1;
}


ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    7670:	4668      	mov	r0, sp
    7672:	f020 0107 	bic.w	r1, r0, #7
    7676:	468d      	mov	sp, r1
    7678:	b531      	push	{r0, r4, r5, lr}
	event.tx_attempts = last_tx_attempts;
    767a:	4b1b      	ldr	r3, [pc, #108]	; (76e8 <SWI0_EGU0_IRQHandler+0x78>)
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    767c:	b082      	sub	sp, #8
	event.tx_attempts = last_tx_attempts;
    767e:	681b      	ldr	r3, [r3, #0]
    7680:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
    7682:	f04f 0340 	mov.w	r3, #64	; 0x40
    7686:	f3ef 8111 	mrs	r1, BASEPRI
    768a:	f383 8812 	msr	BASEPRI_MAX, r3
    768e:	f3bf 8f6f 	isb	sy
	*interrupts = interrupt_flags;
    7692:	4b16      	ldr	r3, [pc, #88]	; (76ec <SWI0_EGU0_IRQHandler+0x7c>)
	interrupt_flags = 0;
    7694:	2200      	movs	r2, #0
	*interrupts = interrupt_flags;
    7696:	681d      	ldr	r5, [r3, #0]
	interrupt_flags = 0;
    7698:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    769a:	f381 8811 	msr	BASEPRI, r1
    769e:	f3bf 8f6f 	isb	sy
	if (event_handler != NULL) {
    76a2:	4c13      	ldr	r4, [pc, #76]	; (76f0 <SWI0_EGU0_IRQHandler+0x80>)
    76a4:	6823      	ldr	r3, [r4, #0]
    76a6:	b1ab      	cbz	r3, 76d4 <SWI0_EGU0_IRQHandler+0x64>
		if (interrupts & INT_TX_SUCCESS_MSK) {
    76a8:	07e9      	lsls	r1, r5, #31
    76aa:	d503      	bpl.n	76b4 <SWI0_EGU0_IRQHandler+0x44>
			event.evt_id = ESB_EVENT_TX_SUCCESS;
    76ac:	f88d 2000 	strb.w	r2, [sp]
			event_handler(&event);
    76b0:	4668      	mov	r0, sp
    76b2:	4798      	blx	r3
		if (interrupts & INT_TX_FAILED_MSK) {
    76b4:	07aa      	lsls	r2, r5, #30
    76b6:	d505      	bpl.n	76c4 <SWI0_EGU0_IRQHandler+0x54>
			event.evt_id = ESB_EVENT_TX_FAILED;
    76b8:	2301      	movs	r3, #1
    76ba:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    76be:	4668      	mov	r0, sp
    76c0:	6823      	ldr	r3, [r4, #0]
    76c2:	4798      	blx	r3
		if (interrupts & INT_RX_DATA_RECEIVED_MSK) {
    76c4:	076b      	lsls	r3, r5, #29
    76c6:	d505      	bpl.n	76d4 <SWI0_EGU0_IRQHandler+0x64>
			event.evt_id = ESB_EVENT_RX_RECEIVED;
    76c8:	2302      	movs	r3, #2
    76ca:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    76ce:	4668      	mov	r0, sp
    76d0:	6823      	ldr	r3, [r4, #0]
    76d2:	4798      	blx	r3
{
	esb_evt_irq_handler();

	ISR_DIRECT_PM();
    76d4:	f7fc fd12 	bl	40fc <_arch_isr_direct_pm>
    76d8:	f7fc fdf4 	bl	42c4 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    76dc:	b002      	add	sp, #8
    76de:	e8bd 4031 	ldmia.w	sp!, {r0, r4, r5, lr}
    76e2:	4685      	mov	sp, r0
    76e4:	4770      	bx	lr
    76e6:	bf00      	nop
    76e8:	20001868 	.word	0x20001868
    76ec:	20001870 	.word	0x20001870
    76f0:	20001950 	.word	0x20001950

000076f4 <on_radio_disabled_tx_noack>:
{
    76f4:	b510      	push	{r4, lr}
	mpsl_fem_pa_configuration_clear();
    76f6:	f7f8 fded 	bl	2d4 <mpsl_fem_pa_configuration_clear>
	nrf_timer_task_trigger(esb_timer.p_reg, NRF_TIMER_TASK_SHUTDOWN);
    76fa:	4b15      	ldr	r3, [pc, #84]	; (7750 <on_radio_disabled_tx_noack+0x5c>)
	if (tx_fifo.count == 0) {
    76fc:	4c15      	ldr	r4, [pc, #84]	; (7754 <on_radio_disabled_tx_noack+0x60>)
	nrf_timer_task_trigger(esb_timer.p_reg, NRF_TIMER_TASK_SHUTDOWN);
    76fe:	681b      	ldr	r3, [r3, #0]
    7700:	2201      	movs	r2, #1
    7702:	611a      	str	r2, [r3, #16]
	esb_ppi_for_fem_clear();
    7704:	f000 fc9a 	bl	803c <esb_ppi_for_fem_clear>
	mpsl_fem_disable();
    7708:	f7f8 fdd2 	bl	2b0 <mpsl_fem_disable>
	esb_ppi_for_txrx_clear(false, false);
    770c:	2100      	movs	r1, #0
    770e:	4608      	mov	r0, r1
    7710:	f000 fd16 	bl	8140 <esb_ppi_for_txrx_clear>
	interrupt_flags |= INT_TX_SUCCESS_MSK;
    7714:	4a10      	ldr	r2, [pc, #64]	; (7758 <on_radio_disabled_tx_noack+0x64>)
    7716:	4811      	ldr	r0, [pc, #68]	; (775c <on_radio_disabled_tx_noack+0x68>)
    7718:	6813      	ldr	r3, [r2, #0]
    771a:	f043 0301 	orr.w	r3, r3, #1
    771e:	6013      	str	r3, [r2, #0]
	if (tx_fifo.count == 0) {
    7720:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7722:	b93b      	cbnz	r3, 7734 <on_radio_disabled_tx_noack+0x40>
		esb_state = ESB_STATE_IDLE;
    7724:	4b0e      	ldr	r3, [pc, #56]	; (7760 <on_radio_disabled_tx_noack+0x6c>)
    7726:	2200      	movs	r2, #0
    7728:	701a      	strb	r2, [r3, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    772a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    772e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
}
    7732:	bd10      	pop	{r4, pc}
    7734:	f7ff fdce 	bl	72d4 <tx_fifo_remove_last.part.0>
	if (tx_fifo.count == 0) {
    7738:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    773a:	2b00      	cmp	r3, #0
    773c:	d0f2      	beq.n	7724 <on_radio_disabled_tx_noack+0x30>
    773e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    7742:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
}
    7746:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		start_tx_transaction();
    774a:	f7ff bebf 	b.w	74cc <start_tx_transaction>
    774e:	bf00      	nop
    7750:	200000e4 	.word	0x200000e4
    7754:	20001920 	.word	0x20001920
    7758:	20001870 	.word	0x20001870
    775c:	e000e100 	.word	0xe000e100
    7760:	20001fce 	.word	0x20001fce

00007764 <esb_fem_for_rx_ack>:
{
    7764:	b508      	push	{r3, lr}
	mpsl_fem_pa_configuration_clear();
    7766:	f7f8 fdb5 	bl	2d4 <mpsl_fem_pa_configuration_clear>
	mpsl_fem_lna_configuration_set(&rx_event, &disable_event);
    776a:	4907      	ldr	r1, [pc, #28]	; (7788 <esb_fem_for_rx_ack+0x24>)
    776c:	4807      	ldr	r0, [pc, #28]	; (778c <esb_fem_for_rx_ack+0x28>)
    776e:	f7f8 fdab 	bl	2c8 <mpsl_fem_lna_configuration_set>
	nrf_timer_shorts_disable(esb_timer.p_reg,
    7772:	4b07      	ldr	r3, [pc, #28]	; (7790 <esb_fem_for_rx_ack+0x2c>)
    7774:	681a      	ldr	r2, [r3, #0]
    p_reg->SHORTS &= ~(mask);
    7776:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    777a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    777e:	f023 0304 	bic.w	r3, r3, #4
    7782:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    7786:	bd08      	pop	{r3, pc}
    7788:	200000a0 	.word	0x200000a0
    778c:	0000ebc8 	.word	0x0000ebc8
    7790:	200000e4 	.word	0x200000e4

00007794 <on_radio_disabled_tx>:
{
    7794:	b570      	push	{r4, r5, r6, lr}
	esb_ppi_for_txrx_clear(false, true);
    7796:	2101      	movs	r1, #1
    7798:	2000      	movs	r0, #0
    p_reg->SHORTS = shorts_mask;
    779a:	4c23      	ldr	r4, [pc, #140]	; (7828 <on_radio_disabled_tx+0x94>)
	uint16_t ramp_up = esb_cfg.use_fast_ramp_up ? TX_FAST_RAMP_UP_TIME_US : TX_RAMP_UP_TIME_US;
    779c:	4d23      	ldr	r5, [pc, #140]	; (782c <on_radio_disabled_tx+0x98>)
	nrfx_timer_compare(&esb_timer, NRF_TIMER_CC_CHANNEL1,
    779e:	4e24      	ldr	r6, [pc, #144]	; (7830 <on_radio_disabled_tx+0x9c>)
	esb_ppi_for_txrx_clear(false, true);
    77a0:	f000 fcce 	bl	8140 <esb_ppi_for_txrx_clear>
	esb_ppi_for_fem_clear();
    77a4:	f000 fc4a 	bl	803c <esb_ppi_for_fem_clear>
	esb_fem_for_rx_ack();
    77a8:	f7ff ffdc 	bl	7764 <esb_fem_for_rx_ack>
    77ac:	f240 1313 	movw	r3, #275	; 0x113
    77b0:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	nrfx_timer_compare(&esb_timer, NRF_TIMER_CC_CHANNEL0,
    77b4:	4b1f      	ldr	r3, [pc, #124]	; (7834 <on_radio_disabled_tx+0xa0>)
    77b6:	481e      	ldr	r0, [pc, #120]	; (7830 <on_radio_disabled_tx+0x9c>)
    77b8:	681a      	ldr	r2, [r3, #0]
    77ba:	2300      	movs	r3, #0
    77bc:	320d      	adds	r2, #13
    77be:	4619      	mov	r1, r3
    77c0:	f006 fb1a 	bl	ddf8 <nrfx_timer_compare>
	uint16_t ramp_up = esb_cfg.use_fast_ramp_up ? TX_FAST_RAMP_UP_TIME_US : TX_RAMP_UP_TIME_US;
    77c4:	7ceb      	ldrb	r3, [r5, #19]
			   (esb_cfg.retransmit_delay - ramp_up), false);
    77c6:	89a9      	ldrh	r1, [r5, #12]
	uint16_t ramp_up = esb_cfg.use_fast_ramp_up ? TX_FAST_RAMP_UP_TIME_US : TX_RAMP_UP_TIME_US;
    77c8:	2b00      	cmp	r3, #0
    77ca:	bf0c      	ite	eq
    77cc:	2281      	moveq	r2, #129	; 0x81
    77ce:	2228      	movne	r2, #40	; 0x28
	nrfx_timer_compare(&esb_timer, NRF_TIMER_CC_CHANNEL1,
    77d0:	4630      	mov	r0, r6
    77d2:	1a8a      	subs	r2, r1, r2
    77d4:	2300      	movs	r3, #0
    77d6:	2101      	movs	r1, #1
    77d8:	f006 fb0e 	bl	ddf8 <nrfx_timer_compare>
	nrf_timer_shorts_set(esb_timer.p_reg,
    77dc:	6833      	ldr	r3, [r6, #0]
    p_reg->SHORTS = mask;
    77de:	f240 2202 	movw	r2, #514	; 0x202
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    77e2:	2600      	movs	r6, #0
    p_reg->SHORTS = mask;
    77e4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    77e8:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    77ec:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    77f0:	f8c3 6144 	str.w	r6, [r3, #324]	; 0x144
    77f4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	esb_ppi_for_wait_for_ack_set();
    77f8:	f000 fd60 	bl	82bc <esb_ppi_for_wait_for_ack_set>
	esb_ppi_for_retransmission_clear();
    77fc:	f000 fd38 	bl	8270 <esb_ppi_for_retransmission_clear>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7800:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
	if (esb_cfg.protocol == ESB_PROTOCOL_ESB) {
    7804:	7828      	ldrb	r0, [r5, #0]
    7806:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    780a:	b910      	cbnz	r0, 7812 <on_radio_disabled_tx+0x7e>
		update_rf_payload_format(0);
    780c:	4b0a      	ldr	r3, [pc, #40]	; (7838 <on_radio_disabled_tx+0xa4>)
    780e:	681b      	ldr	r3, [r3, #0]
    7810:	4798      	blx	r3
    p_reg->PACKETPTR = (uint32_t)p_packet;
    7812:	4b0a      	ldr	r3, [pc, #40]	; (783c <on_radio_disabled_tx+0xa8>)
    7814:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
	on_radio_disabled = on_radio_disabled_tx_wait_for_ack;
    7818:	4b09      	ldr	r3, [pc, #36]	; (7840 <on_radio_disabled_tx+0xac>)
    781a:	4a0a      	ldr	r2, [pc, #40]	; (7844 <on_radio_disabled_tx+0xb0>)
    781c:	601a      	str	r2, [r3, #0]
	esb_state = ESB_STATE_PTX_RX_ACK;
    781e:	4b0a      	ldr	r3, [pc, #40]	; (7848 <on_radio_disabled_tx+0xb4>)
    7820:	2203      	movs	r2, #3
    7822:	701a      	strb	r2, [r3, #0]
}
    7824:	bd70      	pop	{r4, r5, r6, pc}
    7826:	bf00      	nop
    7828:	40001000 	.word	0x40001000
    782c:	20001954 	.word	0x20001954
    7830:	200000e4 	.word	0x200000e4
    7834:	20001864 	.word	0x20001864
    7838:	2000185c 	.word	0x2000185c
    783c:	20001f8a 	.word	0x20001f8a
    7840:	20001860 	.word	0x20001860
    7844:	000078b1 	.word	0x000078b1
    7848:	20001fce 	.word	0x20001fce

0000784c <esb_fem_for_tx_retry>:
{
    784c:	b538      	push	{r3, r4, r5, lr}
		nrf_timer_cc_get(esb_timer.p_reg, NRF_TIMER_CC_CHANNEL1) + TX_RAMP_UP_TIME_US;
    784e:	4c0a      	ldr	r4, [pc, #40]	; (7878 <esb_fem_for_tx_retry+0x2c>)
	tx_time_shifted.event.timer.counter_period.end =
    7850:	4d0a      	ldr	r5, [pc, #40]	; (787c <esb_fem_for_tx_retry+0x30>)
		nrf_timer_cc_get(esb_timer.p_reg, NRF_TIMER_CC_CHANNEL1) + TX_RAMP_UP_TIME_US;
    7852:	6823      	ldr	r3, [r4, #0]

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
    7854:	f8d3 3544 	ldr.w	r3, [r3, #1348]	; 0x544
    7858:	3381      	adds	r3, #129	; 0x81
	tx_time_shifted.event.timer.counter_period.end =
    785a:	60eb      	str	r3, [r5, #12]
	esb_ppi_for_fem_set();
    785c:	f000 fbd2 	bl	8004 <esb_ppi_for_fem_set>
	if (mpsl_fem_pa_configuration_set(&tx_time_shifted, &disable_event) == 0) {
    7860:	4907      	ldr	r1, [pc, #28]	; (7880 <esb_fem_for_tx_retry+0x34>)
    7862:	4628      	mov	r0, r5
    7864:	f7f8 fd3c 	bl	2e0 <mpsl_fem_pa_configuration_set>
    7868:	b920      	cbnz	r0, 7874 <esb_fem_for_tx_retry+0x28>
		nrf_timer_shorts_set(esb_timer.p_reg,
    786a:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS = mask;
    786c:	f240 4204 	movw	r2, #1028	; 0x404
    7870:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
    7874:	bd38      	pop	{r3, r4, r5, pc}
    7876:	bf00      	nop
    7878:	200000e4 	.word	0x200000e4
    787c:	200000b8 	.word	0x200000b8
    7880:	200000a0 	.word	0x200000a0

00007884 <esb_fem_for_tx_retry_clear>:
{
    7884:	b508      	push	{r3, lr}
	esb_ppi_for_fem_clear();
    7886:	f000 fbd9 	bl	803c <esb_ppi_for_fem_clear>
	mpsl_fem_pa_configuration_clear();
    788a:	f7f8 fd23 	bl	2d4 <mpsl_fem_pa_configuration_clear>
	mpsl_fem_deactivate_now(MPSL_FEM_ALL);
    788e:	2003      	movs	r0, #3
    7890:	f7f8 fd08 	bl	2a4 <mpsl_fem_deactivate_now>
	nrf_timer_shorts_disable(esb_timer.p_reg,
    7894:	4b05      	ldr	r3, [pc, #20]	; (78ac <esb_fem_for_tx_retry_clear+0x28>)
    7896:	681a      	ldr	r2, [r3, #0]
    p_reg->SHORTS &= ~(mask);
    7898:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    789c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    78a0:	f023 0304 	bic.w	r3, r3, #4
    78a4:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    78a8:	bd08      	pop	{r3, pc}
    78aa:	bf00      	nop
    78ac:	200000e4 	.word	0x200000e4

000078b0 <on_radio_disabled_tx_wait_for_ack>:
{
    78b0:	b570      	push	{r4, r5, r6, lr}
	esb_ppi_for_wait_for_ack_clear();
    78b2:	f000 fd35 	bl	8320 <esb_ppi_for_wait_for_ack_clear>
	mpsl_fem_lna_configuration_clear();
    78b6:	f7f8 fd01 	bl	2bc <mpsl_fem_lna_configuration_clear>
	mpsl_fem_disable();
    78ba:	f7f8 fcf9 	bl	2b0 <mpsl_fem_disable>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    78be:	4b4e      	ldr	r3, [pc, #312]	; (79f8 <on_radio_disabled_tx_wait_for_ack+0x148>)
    78c0:	4a4e      	ldr	r2, [pc, #312]	; (79fc <on_radio_disabled_tx_wait_for_ack+0x14c>)
    78c2:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	if (nrf_radio_event_check(NRF_RADIO, NRF_RADIO_EVENT_END) &&
    78c6:	2900      	cmp	r1, #0
    78c8:	d043      	beq.n	7952 <on_radio_disabled_tx_wait_for_ack+0xa2>
    return ((p_reg->CRCSTATUS & RADIO_CRCSTATUS_CRCSTATUS_Msk) >> RADIO_CRCSTATUS_CRCSTATUS_Pos)
    78ca:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    78ce:	07d9      	lsls	r1, r3, #31
    78d0:	d53f      	bpl.n	7952 <on_radio_disabled_tx_wait_for_ack+0xa2>
		interrupt_flags |= INT_TX_SUCCESS_MSK;
    78d2:	4c4b      	ldr	r4, [pc, #300]	; (7a00 <on_radio_disabled_tx_wait_for_ack+0x150>)
		last_tx_attempts = esb_cfg.retransmit_count - retransmits_remaining + 1;
    78d4:	4d4b      	ldr	r5, [pc, #300]	; (7a04 <on_radio_disabled_tx_wait_for_ack+0x154>)
		interrupt_flags |= INT_TX_SUCCESS_MSK;
    78d6:	6823      	ldr	r3, [r4, #0]
	if (tx_fifo.count == 0) {
    78d8:	4e4b      	ldr	r6, [pc, #300]	; (7a08 <on_radio_disabled_tx_wait_for_ack+0x158>)
		interrupt_flags |= INT_TX_SUCCESS_MSK;
    78da:	f043 0301 	orr.w	r3, r3, #1
    78de:	6023      	str	r3, [r4, #0]
		last_tx_attempts = esb_cfg.retransmit_count - retransmits_remaining + 1;
    78e0:	6812      	ldr	r2, [r2, #0]
    78e2:	89eb      	ldrh	r3, [r5, #14]
    78e4:	1a9b      	subs	r3, r3, r2
    78e6:	4a49      	ldr	r2, [pc, #292]	; (7a0c <on_radio_disabled_tx_wait_for_ack+0x15c>)
    78e8:	3301      	adds	r3, #1
    78ea:	6013      	str	r3, [r2, #0]
	if (tx_fifo.count == 0) {
    78ec:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    78ee:	b10b      	cbz	r3, 78f4 <on_radio_disabled_tx_wait_for_ack+0x44>
    78f0:	f7ff fcf0 	bl	72d4 <tx_fifo_remove_last.part.0>
		if ((esb_cfg.protocol != ESB_PROTOCOL_ESB) && (rx_pdu->type.dpl_pdu.length > 0)) {
    78f4:	782b      	ldrb	r3, [r5, #0]
    78f6:	b1b3      	cbz	r3, 7926 <on_radio_disabled_tx_wait_for_ack+0x76>
    78f8:	4b45      	ldr	r3, [pc, #276]	; (7a10 <on_radio_disabled_tx_wait_for_ack+0x160>)
    78fa:	781a      	ldrb	r2, [r3, #0]
    78fc:	0692      	lsls	r2, r2, #26
    78fe:	d012      	beq.n	7926 <on_radio_disabled_tx_wait_for_ack+0x76>
				nrf_radio_txaddress_get(NRF_RADIO), rx_pdu->type.dpl_pdu.pid)) {
    7900:	7859      	ldrb	r1, [r3, #1]
	if (rx_fifo.count >= CONFIG_ESB_RX_FIFO_SIZE) {
    7902:	4b44      	ldr	r3, [pc, #272]	; (7a14 <on_radio_disabled_tx_wait_for_ack+0x164>)
    return (uint8_t)((p_reg->TXADDRESS & RADIO_TXADDRESS_TXADDRESS_Msk) >>
    7904:	4a3c      	ldr	r2, [pc, #240]	; (79f8 <on_radio_disabled_tx_wait_for_ack+0x148>)
    7906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7908:	f8d2 052c 	ldr.w	r0, [r2, #1324]	; 0x52c
    790c:	2b07      	cmp	r3, #7
				nrf_radio_txaddress_get(NRF_RADIO), rx_pdu->type.dpl_pdu.pid)) {
    790e:	f3c1 0141 	ubfx	r1, r1, #1, #2
	if (rx_fifo.count >= CONFIG_ESB_RX_FIFO_SIZE) {
    7912:	d808      	bhi.n	7926 <on_radio_disabled_tx_wait_for_ack+0x76>
    7914:	f000 0007 	and.w	r0, r0, #7
    7918:	f7ff fcf6 	bl	7308 <rx_fifo_push_rfbuf.part.0>
			if (rx_fifo_push_rfbuf(
    791c:	b118      	cbz	r0, 7926 <on_radio_disabled_tx_wait_for_ack+0x76>
				interrupt_flags |= INT_RX_DATA_RECEIVED_MSK;
    791e:	6823      	ldr	r3, [r4, #0]
    7920:	f043 0304 	orr.w	r3, r3, #4
    7924:	6023      	str	r3, [r4, #0]
		if ((tx_fifo.count == 0) || (esb_cfg.tx_mode == ESB_TXMODE_MANUAL)) {
    7926:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    7928:	4b3b      	ldr	r3, [pc, #236]	; (7a18 <on_radio_disabled_tx_wait_for_ack+0x168>)
    792a:	b112      	cbz	r2, 7932 <on_radio_disabled_tx_wait_for_ack+0x82>
    792c:	7c2a      	ldrb	r2, [r5, #16]
    792e:	2a01      	cmp	r2, #1
    7930:	d107      	bne.n	7942 <on_radio_disabled_tx_wait_for_ack+0x92>
			esb_state = ESB_STATE_IDLE;
    7932:	4a3a      	ldr	r2, [pc, #232]	; (7a1c <on_radio_disabled_tx_wait_for_ack+0x16c>)
    7934:	2100      	movs	r1, #0
    7936:	7011      	strb	r1, [r2, #0]
    7938:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    793c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    7940:	bd70      	pop	{r4, r5, r6, pc}
    7942:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    7946:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    794a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			start_tx_transaction();
    794e:	f7ff bdbd 	b.w	74cc <start_tx_transaction>
		if (retransmits_remaining-- == 0) {
    7952:	6813      	ldr	r3, [r2, #0]
    7954:	4e31      	ldr	r6, [pc, #196]	; (7a1c <on_radio_disabled_tx_wait_for_ack+0x16c>)
    7956:	4d32      	ldr	r5, [pc, #200]	; (7a20 <on_radio_disabled_tx_wait_for_ack+0x170>)
    7958:	1e59      	subs	r1, r3, #1
    795a:	6011      	str	r1, [r2, #0]
    795c:	b97b      	cbnz	r3, 797e <on_radio_disabled_tx_wait_for_ack+0xce>
			nrf_timer_task_trigger(esb_timer.p_reg, NRF_TIMER_TASK_SHUTDOWN);
    795e:	682a      	ldr	r2, [r5, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7960:	2101      	movs	r1, #1
    7962:	6111      	str	r1, [r2, #16]
			last_tx_attempts = esb_cfg.retransmit_count + 1;
    7964:	4a27      	ldr	r2, [pc, #156]	; (7a04 <on_radio_disabled_tx_wait_for_ack+0x154>)
    7966:	89d2      	ldrh	r2, [r2, #14]
    7968:	440a      	add	r2, r1
    796a:	4928      	ldr	r1, [pc, #160]	; (7a0c <on_radio_disabled_tx_wait_for_ack+0x15c>)
    796c:	600a      	str	r2, [r1, #0]
			interrupt_flags |= INT_TX_FAILED_MSK;
    796e:	4924      	ldr	r1, [pc, #144]	; (7a00 <on_radio_disabled_tx_wait_for_ack+0x150>)
    7970:	680a      	ldr	r2, [r1, #0]
    7972:	f042 0202 	orr.w	r2, r2, #2
    7976:	600a      	str	r2, [r1, #0]
			esb_state = ESB_STATE_IDLE;
    7978:	7033      	strb	r3, [r6, #0]
    797a:	4b27      	ldr	r3, [pc, #156]	; (7a18 <on_radio_disabled_tx_wait_for_ack+0x168>)
    797c:	e7dc      	b.n	7938 <on_radio_disabled_tx_wait_for_ack+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    797e:	4c1e      	ldr	r4, [pc, #120]	; (79f8 <on_radio_disabled_tx_wait_for_ack+0x148>)
    7980:	2300      	movs	r3, #0
    7982:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    7986:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    p_reg->SHORTS = shorts_mask;
    798a:	f240 131b 	movw	r3, #283	; 0x11b
    798e:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
			update_rf_payload_format(current_payload->length);
    7992:	4b24      	ldr	r3, [pc, #144]	; (7a24 <on_radio_disabled_tx_wait_for_ack+0x174>)
    7994:	681a      	ldr	r2, [r3, #0]
    7996:	4b24      	ldr	r3, [pc, #144]	; (7a28 <on_radio_disabled_tx_wait_for_ack+0x178>)
    7998:	7810      	ldrb	r0, [r2, #0]
    799a:	681b      	ldr	r3, [r3, #0]
    799c:	4798      	blx	r3
    p_reg->PACKETPTR = (uint32_t)p_packet;
    799e:	4b23      	ldr	r3, [pc, #140]	; (7a2c <on_radio_disabled_tx_wait_for_ack+0x17c>)
    79a0:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
			on_radio_disabled = on_radio_disabled_tx;
    79a4:	4b22      	ldr	r3, [pc, #136]	; (7a30 <on_radio_disabled_tx_wait_for_ack+0x180>)
    79a6:	4a23      	ldr	r2, [pc, #140]	; (7a34 <on_radio_disabled_tx_wait_for_ack+0x184>)
    79a8:	601a      	str	r2, [r3, #0]
			esb_state = ESB_STATE_PTX_TX_ACK;
    79aa:	2302      	movs	r3, #2
    79ac:	7033      	strb	r3, [r6, #0]
			update_radio_tx_power();
    79ae:	f7ff fc61 	bl	7274 <update_radio_tx_power>
			esb_fem_for_tx_retry();
    79b2:	f7ff ff4b 	bl	784c <esb_fem_for_tx_retry>
			esb_ppi_for_retransmission_set();
    79b6:	f000 fc21 	bl	81fc <esb_ppi_for_retransmission_set>
			if (nrf_timer_event_check(esb_timer.p_reg, NRF_TIMER_EVENT_COMPARE1)) {
    79ba:	682b      	ldr	r3, [r5, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    79bc:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
    79c0:	b1ba      	cbz	r2, 79f2 <on_radio_disabled_tx_wait_for_ack+0x142>
                     RADIO_RSSISAMPLE_RSSISAMPLE_Pos);
}

NRF_STATIC_INLINE nrf_radio_state_t nrf_radio_state_get(NRF_RADIO_Type const * p_reg)
{
    return (nrf_radio_state_t) p_reg->STATE;
    79c2:	f8d4 3550 	ldr.w	r3, [r4, #1360]	; 0x550
					(nrf_radio_state_get(NRF_RADIO) == NRF_RADIO_STATE_TXRU) ||
    79c6:	b2db      	uxtb	r3, r3
    79c8:	2b09      	cmp	r3, #9
    79ca:	d0b9      	beq.n	7940 <on_radio_disabled_tx_wait_for_ack+0x90>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    79cc:	f8d4 4100 	ldr.w	r4, [r4, #256]	; 0x100
    79d0:	2c00      	cmp	r4, #0
    79d2:	d1b5      	bne.n	7940 <on_radio_disabled_tx_wait_for_ack+0x90>
				esb_fem_for_tx_retry_clear();
    79d4:	f7ff ff56 	bl	7884 <esb_fem_for_tx_retry_clear>
				esb_ppi_for_retransmission_clear();
    79d8:	f000 fc4a 	bl	8270 <esb_ppi_for_retransmission_clear>
				esb_ppi_for_txrx_set(false, true);
    79dc:	2101      	movs	r1, #1
    79de:	4620      	mov	r0, r4
    79e0:	f000 fb42 	bl	8068 <esb_ppi_for_txrx_set>
				esb_fem_for_tx_set(true);
    79e4:	2001      	movs	r0, #1
    79e6:	f7ff fc13 	bl	7210 <esb_fem_for_tx_set>
    79ea:	4b13      	ldr	r3, [pc, #76]	; (7a38 <on_radio_disabled_tx_wait_for_ack+0x188>)
    79ec:	2201      	movs	r2, #1
    79ee:	619a      	str	r2, [r3, #24]
}
    79f0:	e7a6      	b.n	7940 <on_radio_disabled_tx_wait_for_ack+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    79f2:	2201      	movs	r2, #1
    79f4:	601a      	str	r2, [r3, #0]
}
    79f6:	e7a3      	b.n	7940 <on_radio_disabled_tx_wait_for_ack+0x90>
    79f8:	40001000 	.word	0x40001000
    79fc:	2000186c 	.word	0x2000186c
    7a00:	20001870 	.word	0x20001870
    7a04:	20001954 	.word	0x20001954
    7a08:	20001920 	.word	0x20001920
    7a0c:	20001868 	.word	0x20001868
    7a10:	20001f8a 	.word	0x20001f8a
    7a14:	200018f4 	.word	0x200018f4
    7a18:	e000e100 	.word	0xe000e100
    7a1c:	20001fce 	.word	0x20001fce
    7a20:	200000e4 	.word	0x200000e4
    7a24:	2000194c 	.word	0x2000194c
    7a28:	2000185c 	.word	0x2000185c
    7a2c:	20001fac 	.word	0x20001fac
    7a30:	20001860 	.word	0x20001860
    7a34:	00007795 	.word	0x00007795
    7a38:	40014000 	.word	0x40014000

00007a3c <esb_disable>:

	return 0;
}

void esb_disable(void)
{
    7a3c:	b510      	push	{r4, lr}
	esb_ppi_disable_all();
    7a3e:	f000 fd03 	bl	8448 <esb_ppi_disable_all>
	esb_fem_reset();
    7a42:	f7ff fc03 	bl	724c <esb_fem_reset>
	nrfx_timer_uninit(&esb_timer);
    7a46:	4814      	ldr	r0, [pc, #80]	; (7a98 <esb_disable+0x5c>)
    7a48:	f002 faac 	bl	9fa4 <nrfx_timer_uninit>

	sys_timer_deinit();
	esb_ppi_deinit();
    7a4c:	f000 fd26 	bl	849c <esb_ppi_deinit>
            RADIO_MODECNF0_RU_Fast;
}

NRF_STATIC_INLINE uint8_t nrf_radio_modecnf0_dtx_get(NRF_RADIO_Type const * p_reg)
{
    return (uint8_t)((p_reg->MODECNF0 & RADIO_MODECNF0_DTX_Msk) >> RADIO_MODECNF0_DTX_Pos);
    7a50:	4a12      	ldr	r2, [pc, #72]	; (7a9c <esb_disable+0x60>)
	esb_state = ESB_STATE_IDLE;
	esb_initialized = false;

	reset_fifos();

	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    7a52:	4813      	ldr	r0, [pc, #76]	; (7aa0 <esb_disable+0x64>)
    7a54:	f8d2 3650 	ldr.w	r3, [r2, #1616]	; 0x650
                      (((uint32_t)default_tx) << RADIO_MODECNF0_DTX_Pos);
    7a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
    p_reg->MODECNF0 = (fast_ramp_up ? (RADIO_MODECNF0_RU_Fast    << RADIO_MODECNF0_RU_Pos) :
    7a5c:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
	esb_state = ESB_STATE_IDLE;
    7a60:	4b10      	ldr	r3, [pc, #64]	; (7aa4 <esb_disable+0x68>)
    7a62:	2400      	movs	r4, #0
    7a64:	701c      	strb	r4, [r3, #0]
	esb_initialized = false;
    7a66:	4b10      	ldr	r3, [pc, #64]	; (7aa8 <esb_disable+0x6c>)
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    7a68:	4621      	mov	r1, r4
	esb_initialized = false;
    7a6a:	701c      	strb	r4, [r3, #0]
	reset_fifos();
    7a6c:	f7ff fbb4 	bl	71d8 <reset_fifos>
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    7a70:	2220      	movs	r2, #32
    7a72:	f005 fd98 	bl	d5a6 <memset>
	memset(pids, 0, sizeof(pids));
    7a76:	4621      	mov	r1, r4
    7a78:	2208      	movs	r2, #8
    7a7a:	480c      	ldr	r0, [pc, #48]	; (7aac <esb_disable+0x70>)
    7a7c:	f005 fd93 	bl	d5a6 <memset>
	irq_disable(RADIO_IRQn);
    7a80:	2001      	movs	r0, #1
    7a82:	f7fc faff 	bl	4084 <arch_irq_disable>
	irq_disable(ESB_EVT_IRQ);
    7a86:	2014      	movs	r0, #20
    7a88:	f7fc fafc 	bl	4084 <arch_irq_disable>

	esb_irq_disable();
}
    7a8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	irq_disable(ESB_TIMER_IRQ);
    7a90:	200a      	movs	r0, #10
    7a92:	f7fc baf7 	b.w	4084 <arch_irq_disable>
    7a96:	bf00      	nop
    7a98:	200000e4 	.word	0x200000e4
    7a9c:	40001000 	.word	0x40001000
    7aa0:	20001cda 	.word	0x20001cda
    7aa4:	20001fce 	.word	0x20001fce
    7aa8:	20001fcf 	.word	0x20001fcf
    7aac:	20001f82 	.word	0x20001f82

00007ab0 <esb_init>:
{
    7ab0:	b5f0      	push	{r4, r5, r6, r7, lr}
    7ab2:	b087      	sub	sp, #28
	if (!config) {
    7ab4:	4604      	mov	r4, r0
{
    7ab6:	af00      	add	r7, sp, #0
	if (!config) {
    7ab8:	2800      	cmp	r0, #0
    7aba:	f000 80ec 	beq.w	7c96 <__kernel_ram_size+0x11e>
	if (esb_initialized) {
    7abe:	4d77      	ldr	r5, [pc, #476]	; (7c9c <__kernel_ram_size+0x124>)
    7ac0:	782b      	ldrb	r3, [r5, #0]
    7ac2:	b10b      	cbz	r3, 7ac8 <esb_init+0x18>
		esb_disable();
    7ac4:	f7ff ffba 	bl	7a3c <esb_disable>
	event_handler = config->event_handler;
    7ac8:	4b75      	ldr	r3, [pc, #468]	; (7ca0 <__kernel_ram_size+0x128>)
	memcpy(&esb_cfg, config, sizeof(esb_cfg));
    7aca:	4e76      	ldr	r6, [pc, #472]	; (7ca4 <__kernel_ram_size+0x12c>)
	event_handler = config->event_handler;
    7acc:	6862      	ldr	r2, [r4, #4]
    7ace:	601a      	str	r2, [r3, #0]
	memcpy(&esb_cfg, config, sizeof(esb_cfg));
    7ad0:	4621      	mov	r1, r4
    7ad2:	2214      	movs	r2, #20
    7ad4:	4630      	mov	r0, r6
    7ad6:	f005 fd5b 	bl	d590 <memcpy>
	interrupt_flags = 0;
    7ada:	2400      	movs	r4, #0
    7adc:	4b72      	ldr	r3, [pc, #456]	; (7ca8 <__kernel_ram_size+0x130>)
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    7ade:	4873      	ldr	r0, [pc, #460]	; (7cac <__kernel_ram_size+0x134>)
	interrupt_flags = 0;
    7ae0:	601c      	str	r4, [r3, #0]
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    7ae2:	2220      	movs	r2, #32
    7ae4:	4621      	mov	r1, r4
    7ae6:	f005 fd5e 	bl	d5a6 <memset>
	memset(pids, 0, sizeof(pids));
    7aea:	2208      	movs	r2, #8
    7aec:	4621      	mov	r1, r4
    7aee:	4870      	ldr	r0, [pc, #448]	; (7cb0 <__kernel_ram_size+0x138>)
    7af0:	f005 fd59 	bl	d5a6 <memset>
	params_valid &= update_radio_bitrate();
    7af4:	f7ff fb52 	bl	719c <update_radio_bitrate>
	switch (esb_cfg.protocol) {
    7af8:	7833      	ldrb	r3, [r6, #0]
    7afa:	496e      	ldr	r1, [pc, #440]	; (7cb4 <__kernel_ram_size+0x13c>)
    7afc:	b17b      	cbz	r3, 7b1e <esb_init+0x6e>
    7afe:	2b01      	cmp	r3, #1
    7b00:	d101      	bne.n	7b06 <esb_init+0x56>
		update_rf_payload_format = update_rf_payload_format_esb_dpl;
    7b02:	4b6d      	ldr	r3, [pc, #436]	; (7cb8 <__kernel_ram_size+0x140>)
		update_rf_payload_format = update_rf_payload_format_esb;
    7b04:	600b      	str	r3, [r1, #0]
	switch (esb_cfg.crc) {
    7b06:	7a72      	ldrb	r2, [r6, #9]
    7b08:	4b6c      	ldr	r3, [pc, #432]	; (7cbc <__kernel_ram_size+0x144>)
    7b0a:	2a01      	cmp	r2, #1
    7b0c:	d06f      	beq.n	7bee <__kernel_ram_size+0x76>
    7b0e:	2a02      	cmp	r2, #2
    7b10:	d007      	beq.n	7b22 <esb_init+0x72>
    7b12:	b97a      	cbnz	r2, 7b34 <esb_init+0x84>
    p_reg->CRCINIT = crc_init_value;
    7b14:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    p_reg->CRCCNF = ((uint32_t)crc_length  << RADIO_CRCCNF_LEN_Pos) |
    7b18:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    7b1c:	e008      	b.n	7b30 <esb_init+0x80>
		update_rf_payload_format = update_rf_payload_format_esb;
    7b1e:	4b68      	ldr	r3, [pc, #416]	; (7cc0 <__kernel_ram_size+0x148>)
    7b20:	e7f0      	b.n	7b04 <esb_init+0x54>
    p_reg->CRCINIT = crc_init_value;
    7b22:	f64f 70ff 	movw	r0, #65535	; 0xffff
    7b26:	f8c3 053c 	str.w	r0, [r3, #1340]	; 0x53c
    p_reg->CRCCNF = ((uint32_t)crc_length  << RADIO_CRCCNF_LEN_Pos) |
    7b2a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->CRCPOLY = (crc_polynominal << RADIO_CRCPOLY_CRCPOLY_Pos);
    7b2e:	4a65      	ldr	r2, [pc, #404]	; (7cc4 <__kernel_ram_size+0x14c>)
    7b30:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	update_rf_payload_format(esb_cfg.payload_length);
    7b34:	680b      	ldr	r3, [r1, #0]
    7b36:	7c70      	ldrb	r0, [r6, #17]
    7b38:	4798      	blx	r3
    p_reg->BASE0 = address;
    7b3a:	4b60      	ldr	r3, [pc, #384]	; (7cbc <__kernel_ram_size+0x144>)
    7b3c:	4862      	ldr	r0, [pc, #392]	; (7cc8 <__kernel_ram_size+0x150>)
    7b3e:	4963      	ldr	r1, [pc, #396]	; (7ccc <__kernel_ram_size+0x154>)
    7b40:	f04f 32e7 	mov.w	r2, #3890735079	; 0xe7e7e7e7
    7b44:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->BASE1 = address;
    7b48:	f04f 3243 	mov.w	r2, #1128481603	; 0x43434343
    7b4c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    p_reg->PREFIX0 = prefixes;
    7b50:	4a5f      	ldr	r2, [pc, #380]	; (7cd0 <__kernel_ram_size+0x158>)
    7b52:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PREFIX1 = prefixes;
    7b56:	4a5f      	ldr	r2, [pc, #380]	; (7cd4 <__kernel_ram_size+0x15c>)
    7b58:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	reset_fifos();
    7b5c:	f7ff fb3c 	bl	71d8 <reset_fifos>
    7b60:	4602      	mov	r2, r0
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    7b62:	2300      	movs	r3, #0
    7b64:	3301      	adds	r3, #1
    7b66:	2b08      	cmp	r3, #8
		tx_fifo.payload[i] = &tx_payload[i];
    7b68:	f841 2b04 	str.w	r2, [r1], #4
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    7b6c:	f102 0225 	add.w	r2, r2, #37	; 0x25
    7b70:	d1f8      	bne.n	7b64 <esb_init+0xb4>
    7b72:	4a59      	ldr	r2, [pc, #356]	; (7cd8 <__kernel_ram_size+0x160>)
    7b74:	4959      	ldr	r1, [pc, #356]	; (7cdc <__kernel_ram_size+0x164>)
	for (size_t i = 0; i < CONFIG_ESB_RX_FIFO_SIZE; i++) {
    7b76:	2300      	movs	r3, #0
    7b78:	3301      	adds	r3, #1
    7b7a:	2b08      	cmp	r3, #8
		rx_fifo.payload[i] = &rx_payload[i];
    7b7c:	f841 2b04 	str.w	r2, [r1], #4
	for (size_t i = 0; i < CONFIG_ESB_RX_FIFO_SIZE; i++) {
    7b80:	f102 0225 	add.w	r2, r2, #37	; 0x25
    7b84:	d1f8      	bne.n	7b78 <__kernel_ram_size>
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    7b86:	2100      	movs	r1, #0
    7b88:	4a55      	ldr	r2, [pc, #340]	; (7ce0 <__kernel_ram_size+0x168>)
		ack_pl_wrap[i].in_use = false;
    7b8a:	460b      	mov	r3, r1
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    7b8c:	3101      	adds	r1, #1
    7b8e:	2908      	cmp	r1, #8
		ack_pl_wrap[i].p_payload = &tx_payload[i];
    7b90:	6010      	str	r0, [r2, #0]
		ack_pl_wrap[i].in_use = false;
    7b92:	7113      	strb	r3, [r2, #4]
		ack_pl_wrap[i].p_next = 0;
    7b94:	6093      	str	r3, [r2, #8]
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    7b96:	f100 0025 	add.w	r0, r0, #37	; 0x25
    7b9a:	f102 020c 	add.w	r2, r2, #12
    7b9e:	d1f5      	bne.n	7b8c <__kernel_ram_size+0x14>
		ack_pl_wrap_pipe[i] = 0;
    7ba0:	4a50      	ldr	r2, [pc, #320]	; (7ce4 <__kernel_ram_size+0x16c>)
	nrfx_err = nrfx_timer_init(&esb_timer, &config, esb_timer_handler);
    7ba2:	4851      	ldr	r0, [pc, #324]	; (7ce8 <__kernel_ram_size+0x170>)
		ack_pl_wrap_pipe[i] = 0;
    7ba4:	e9c2 3300 	strd	r3, r3, [r2]
    7ba8:	e9c2 3302 	strd	r3, r3, [r2, #8]
    7bac:	e9c2 3304 	strd	r3, r3, [r2, #16]
    7bb0:	e9c2 3306 	strd	r3, r3, [r2, #24]
	const nrfx_timer_config_t config = {
    7bb4:	e9c7 3300 	strd	r3, r3, [r7]
    7bb8:	2304      	movs	r3, #4
    7bba:	703b      	strb	r3, [r7, #0]
	nrfx_err = nrfx_timer_init(&esb_timer, &config, esb_timer_handler);
    7bbc:	4a4b      	ldr	r2, [pc, #300]	; (7cec <__kernel_ram_size+0x174>)
    7bbe:	4639      	mov	r1, r7
    7bc0:	f002 f99a 	bl	9ef8 <nrfx_timer_init>
	if (nrfx_err != NRFX_SUCCESS) {
    7bc4:	4b4a      	ldr	r3, [pc, #296]	; (7cf0 <__kernel_ram_size+0x178>)
    7bc6:	4298      	cmp	r0, r3
    7bc8:	d119      	bne.n	7bfe <__kernel_ram_size+0x86>
	err = esb_ppi_init();
    7bca:	f000 fbcf 	bl	836c <esb_ppi_init>
	if (err) {
    7bce:	4604      	mov	r4, r0
    7bd0:	2800      	cmp	r0, #0
    7bd2:	d036      	beq.n	7c42 <__kernel_ram_size+0xca>
		LOG_ERR("Failed to initialize PPI");
    7bd4:	4b47      	ldr	r3, [pc, #284]	; (7cf4 <__kernel_ram_size+0x17c>)
    7bd6:	617b      	str	r3, [r7, #20]
    7bd8:	2302      	movs	r3, #2
    7bda:	613b      	str	r3, [r7, #16]
    7bdc:	4846      	ldr	r0, [pc, #280]	; (7cf8 <__kernel_ram_size+0x180>)
    7bde:	2300      	movs	r3, #0
    7be0:	f107 0210 	add.w	r2, r7, #16
    7be4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7be8:	f7fa fe08 	bl	27fc <z_impl_z_log_msg_static_create>
		return err;
    7bec:	e025      	b.n	7c3a <__kernel_ram_size+0xc2>
    p_reg->CRCINIT = crc_init_value;
    7bee:	20ff      	movs	r0, #255	; 0xff
    7bf0:	f8c3 053c 	str.w	r0, [r3, #1340]	; 0x53c
    p_reg->CRCCNF = ((uint32_t)crc_length  << RADIO_CRCCNF_LEN_Pos) |
    7bf4:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->CRCPOLY = (crc_polynominal << RADIO_CRCPOLY_CRCPOLY_Pos);
    7bf8:	f240 1207 	movw	r2, #263	; 0x107
    7bfc:	e798      	b.n	7b30 <esb_init+0x80>
		LOG_ERR("Failed to initialize nrfx timer (err %d)", nrfx_err);
    7bfe:	466c      	mov	r4, sp
    7c00:	b088      	sub	sp, #32
    7c02:	466a      	mov	r2, sp
    7c04:	4b3d      	ldr	r3, [pc, #244]	; (7cfc <__kernel_ram_size+0x184>)
    7c06:	e9c2 3005 	strd	r3, r0, [r2, #20]
    7c0a:	2303      	movs	r3, #3
    7c0c:	f842 3f10 	str.w	r3, [r2, #16]!
    7c10:	4839      	ldr	r0, [pc, #228]	; (7cf8 <__kernel_ram_size+0x180>)
    7c12:	2300      	movs	r3, #0
    7c14:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7c18:	f7fa fdf0 	bl	27fc <z_impl_z_log_msg_static_create>
    7c1c:	46a5      	mov	sp, r4
		LOG_ERR("Failed to initialize ESB system timer");
    7c1e:	4b38      	ldr	r3, [pc, #224]	; (7d00 <__kernel_ram_size+0x188>)
    7c20:	617b      	str	r3, [r7, #20]
    7c22:	2302      	movs	r3, #2
    7c24:	613b      	str	r3, [r7, #16]
    7c26:	4834      	ldr	r0, [pc, #208]	; (7cf8 <__kernel_ram_size+0x180>)
    7c28:	2300      	movs	r3, #0
    7c2a:	f107 0210 	add.w	r2, r7, #16
    7c2e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EFAULT;
    7c32:	f06f 040d 	mvn.w	r4, #13
    7c36:	f7fa fde1 	bl	27fc <z_impl_z_log_msg_static_create>
}
    7c3a:	4620      	mov	r0, r4
    7c3c:	371c      	adds	r7, #28
    7c3e:	46bd      	mov	sp, r7
    7c40:	bdf0      	pop	{r4, r5, r6, r7, pc}
	disable_event.event.generic.event = esb_ppi_radio_disabled_get();
    7c42:	f000 fbfd 	bl	8440 <esb_ppi_radio_disabled_get>
    7c46:	4b2f      	ldr	r3, [pc, #188]	; (7d04 <__kernel_ram_size+0x18c>)
    return (uint8_t)((p_reg->MODECNF0 & RADIO_MODECNF0_DTX_Msk) >> RADIO_MODECNF0_DTX_Pos);
    7c48:	4a1c      	ldr	r2, [pc, #112]	; (7cbc <__kernel_ram_size+0x144>)
    7c4a:	6058      	str	r0, [r3, #4]
    7c4c:	f8d2 3650 	ldr.w	r3, [r2, #1616]	; 0x650
    p_reg->MODECNF0 = (fast_ramp_up ? (RADIO_MODECNF0_RU_Fast    << RADIO_MODECNF0_RU_Pos) :
    7c50:	7cf1      	ldrb	r1, [r6, #19]
                      (((uint32_t)default_tx) << RADIO_MODECNF0_DTX_Pos);
    7c52:	f403 7340 	and.w	r3, r3, #768	; 0x300
                                      (RADIO_MODECNF0_RU_Default << RADIO_MODECNF0_RU_Pos) ) |
    7c56:	430b      	orrs	r3, r1
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_ESB_RADIO_IRQ_PRIORITY,
    7c58:	2101      	movs	r1, #1
    p_reg->MODECNF0 = (fast_ramp_up ? (RADIO_MODECNF0_RU_Fast    << RADIO_MODECNF0_RU_Pos) :
    7c5a:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
    7c5e:	4608      	mov	r0, r1
    7c60:	4622      	mov	r2, r4
    7c62:	f7fc fa31 	bl	40c8 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(ESB_EVT_IRQ, CONFIG_ESB_EVENT_IRQ_PRIORITY,
    7c66:	4622      	mov	r2, r4
    7c68:	2102      	movs	r1, #2
    7c6a:	2014      	movs	r0, #20
    7c6c:	f7fc fa2c 	bl	40c8 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(ESB_TIMER_IRQ, CONFIG_ESB_EVENT_IRQ_PRIORITY,
    7c70:	4622      	mov	r2, r4
    7c72:	2102      	movs	r1, #2
    7c74:	200a      	movs	r0, #10
    7c76:	f7fc fa27 	bl	40c8 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
    7c7a:	2001      	movs	r0, #1
    7c7c:	f7fc f9f4 	bl	4068 <arch_irq_enable>
	irq_enable(ESB_EVT_IRQ);
    7c80:	2014      	movs	r0, #20
    7c82:	f7fc f9f1 	bl	4068 <arch_irq_enable>
	irq_enable(ESB_TIMER_IRQ);
    7c86:	200a      	movs	r0, #10
    7c88:	f7fc f9ee 	bl	4068 <arch_irq_enable>
	esb_state = ESB_STATE_IDLE;
    7c8c:	4b1e      	ldr	r3, [pc, #120]	; (7d08 <__kernel_ram_size+0x190>)
    7c8e:	701c      	strb	r4, [r3, #0]
	esb_initialized = true;
    7c90:	2301      	movs	r3, #1
    7c92:	702b      	strb	r3, [r5, #0]
	return 0;
    7c94:	e7d1      	b.n	7c3a <__kernel_ram_size+0xc2>
		return -EINVAL;
    7c96:	f06f 0415 	mvn.w	r4, #21
    7c9a:	e7ce      	b.n	7c3a <__kernel_ram_size+0xc2>
    7c9c:	20001fcf 	.word	0x20001fcf
    7ca0:	20001950 	.word	0x20001950
    7ca4:	20001954 	.word	0x20001954
    7ca8:	20001870 	.word	0x20001870
    7cac:	20001cda 	.word	0x20001cda
    7cb0:	20001f82 	.word	0x20001f82
    7cb4:	2000185c 	.word	0x2000185c
    7cb8:	00007445 	.word	0x00007445
    7cbc:	40001000 	.word	0x40001000
    7cc0:	00007405 	.word	0x00007405
    7cc4:	00011021 	.word	0x00011021
    7cc8:	20001e5a 	.word	0x20001e5a
    7ccc:	20001920 	.word	0x20001920
    7cd0:	23c343e7 	.word	0x23c343e7
    7cd4:	13e363a3 	.word	0x13e363a3
    7cd8:	20001d32 	.word	0x20001d32
    7cdc:	200018f4 	.word	0x200018f4
    7ce0:	20001894 	.word	0x20001894
    7ce4:	20001874 	.word	0x20001874
    7ce8:	200000e4 	.word	0x200000e4
    7cec:	000071f5 	.word	0x000071f5
    7cf0:	0bad0000 	.word	0x0bad0000
    7cf4:	0000fe77 	.word	0x0000fe77
    7cf8:	0000e8a8 	.word	0x0000e8a8
    7cfc:	0000fe28 	.word	0x0000fe28
    7d00:	0000fe51 	.word	0x0000fe51
    7d04:	200000a0 	.word	0x200000a0
    7d08:	20001fce 	.word	0x20001fce

00007d0c <esb_write_payload>:

	return 0;
}

int esb_write_payload(const struct esb_payload *payload)
{
    7d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!esb_initialized) {
    7d10:	4b4a      	ldr	r3, [pc, #296]	; (7e3c <esb_write_payload+0x130>)
    7d12:	781b      	ldrb	r3, [r3, #0]
{
    7d14:	4604      	mov	r4, r0
	if (!esb_initialized) {
    7d16:	2b00      	cmp	r3, #0
    7d18:	f000 8083 	beq.w	7e22 <esb_write_payload+0x116>
		return -EACCES;
	}

	if (payload == NULL) {
    7d1c:	2800      	cmp	r0, #0
    7d1e:	f000 8089 	beq.w	7e34 <esb_write_payload+0x128>
		return -EINVAL;
	}

	if ((payload->length == 0) || (payload->length > CONFIG_ESB_MAX_PAYLOAD_LENGTH) ||
    7d22:	7803      	ldrb	r3, [r0, #0]
    7d24:	1e5a      	subs	r2, r3, #1
    7d26:	2a1f      	cmp	r2, #31
    7d28:	d87e      	bhi.n	7e28 <esb_write_payload+0x11c>
	    ((esb_cfg.protocol == ESB_PROTOCOL_ESB) &&
    7d2a:	4f45      	ldr	r7, [pc, #276]	; (7e40 <esb_write_payload+0x134>)
	if ((payload->length == 0) || (payload->length > CONFIG_ESB_MAX_PAYLOAD_LENGTH) ||
    7d2c:	783a      	ldrb	r2, [r7, #0]
    7d2e:	b912      	cbnz	r2, 7d36 <esb_write_payload+0x2a>
	    ((esb_cfg.protocol == ESB_PROTOCOL_ESB) &&
    7d30:	7c7a      	ldrb	r2, [r7, #17]
    7d32:	429a      	cmp	r2, r3
    7d34:	d378      	bcc.n	7e28 <esb_write_payload+0x11c>
	     (payload->length > esb_cfg.payload_length))) {
		return -EMSGSIZE;
	}

	if (tx_fifo.count >= CONFIG_ESB_TX_FIFO_SIZE) {
    7d36:	4d43      	ldr	r5, [pc, #268]	; (7e44 <esb_write_payload+0x138>)
    7d38:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7d3a:	2b07      	cmp	r3, #7
    7d3c:	d877      	bhi.n	7e2e <esb_write_payload+0x122>
		return -ENOMEM;
	}

	if (payload->pipe >= CONFIG_ESB_PIPE_COUNT) {
    7d3e:	7863      	ldrb	r3, [r4, #1]
    7d40:	2b07      	cmp	r3, #7
    7d42:	d877      	bhi.n	7e34 <esb_write_payload+0x128>
	__asm__ volatile(
    7d44:	f04f 0340 	mov.w	r3, #64	; 0x40
    7d48:	f3ef 8811 	mrs	r8, BASEPRI
    7d4c:	f383 8812 	msr	BASEPRI_MAX, r3
    7d50:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	unsigned int key = irq_lock();

	if (esb_cfg.mode == ESB_MODE_PTX) {
    7d54:	787b      	ldrb	r3, [r7, #1]
    7d56:	b9eb      	cbnz	r3, 7d94 <esb_write_payload+0x88>
		memcpy(tx_fifo.payload[tx_fifo.back], payload, sizeof(struct esb_payload));
    7d58:	6a2b      	ldr	r3, [r5, #32]
    7d5a:	2225      	movs	r2, #37	; 0x25
    7d5c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    7d60:	4621      	mov	r1, r4
    7d62:	f005 fc15 	bl	d590 <memcpy>

		pids[payload->pipe] = (pids[payload->pipe] + 1) % (PID_MAX + 1);
    7d66:	7861      	ldrb	r1, [r4, #1]
    7d68:	4a37      	ldr	r2, [pc, #220]	; (7e48 <esb_write_payload+0x13c>)
    7d6a:	5c53      	ldrb	r3, [r2, r1]
    7d6c:	3301      	adds	r3, #1
    7d6e:	f003 0303 	and.w	r3, r3, #3
    7d72:	5453      	strb	r3, [r2, r1]
		tx_fifo.payload[tx_fifo.back]->pid = pids[payload->pipe];
    7d74:	6a2b      	ldr	r3, [r5, #32]
    7d76:	7861      	ldrb	r1, [r4, #1]
    7d78:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    7d7c:	5c52      	ldrb	r2, [r2, r1]
    7d7e:	711a      	strb	r2, [r3, #4]

		if (++tx_fifo.back >= CONFIG_ESB_TX_FIFO_SIZE) {
    7d80:	6a2b      	ldr	r3, [r5, #32]
    7d82:	3301      	adds	r3, #1
			tx_fifo.back = 0;
    7d84:	2b08      	cmp	r3, #8
    7d86:	bf28      	it	cs
    7d88:	2300      	movcs	r3, #0
    7d8a:	622b      	str	r3, [r5, #32]
				while (pl->p_next != 0) {
					pl = (struct payload_wrap *)pl->p_next;
				}
				pl->p_next = (struct payload_wrap *)new_ack_payload;
			}
			tx_fifo.count++;
    7d8c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7d8e:	3301      	adds	r3, #1
    7d90:	62ab      	str	r3, [r5, #40]	; 0x28
    7d92:	e02d      	b.n	7df0 <esb_write_payload+0xe4>
    7d94:	4a2d      	ldr	r2, [pc, #180]	; (7e4c <esb_write_payload+0x140>)
	for (int i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    7d96:	2300      	movs	r3, #0
    7d98:	4692      	mov	sl, r2
		if (!ack_pl_wrap[i].in_use) {
    7d9a:	7911      	ldrb	r1, [r2, #4]
    7d9c:	bb19      	cbnz	r1, 7de6 <esb_write_payload+0xda>
			return &ack_pl_wrap[i];
    7d9e:	220c      	movs	r2, #12
    7da0:	fb02 f603 	mul.w	r6, r2, r3
    7da4:	eb0a 0906 	add.w	r9, sl, r6
			new_ack_payload->in_use = true;
    7da8:	2301      	movs	r3, #1
			new_ack_payload->p_next = 0;
    7daa:	f8c9 1008 	str.w	r1, [r9, #8]
			memcpy(new_ack_payload->p_payload, payload, sizeof(struct esb_payload));
    7dae:	2225      	movs	r2, #37	; 0x25
    7db0:	4621      	mov	r1, r4
    7db2:	f85a 0006 	ldr.w	r0, [sl, r6]
			new_ack_payload->in_use = true;
    7db6:	f889 3004 	strb.w	r3, [r9, #4]
			memcpy(new_ack_payload->p_payload, payload, sizeof(struct esb_payload));
    7dba:	f005 fbe9 	bl	d590 <memcpy>
			pids[payload->pipe] = (pids[payload->pipe] + 1) % (PID_MAX + 1);
    7dbe:	7861      	ldrb	r1, [r4, #1]
    7dc0:	4a21      	ldr	r2, [pc, #132]	; (7e48 <esb_write_payload+0x13c>)
    7dc2:	5c53      	ldrb	r3, [r2, r1]
    7dc4:	3301      	adds	r3, #1
    7dc6:	f003 0303 	and.w	r3, r3, #3
    7dca:	5453      	strb	r3, [r2, r1]
			new_ack_payload->p_payload->pid = pids[payload->pipe];
    7dcc:	7861      	ldrb	r1, [r4, #1]
    7dce:	f85a 3006 	ldr.w	r3, [sl, r6]
    7dd2:	5c52      	ldrb	r2, [r2, r1]
    7dd4:	711a      	strb	r2, [r3, #4]
			if (ack_pl_wrap_pipe[payload->pipe] == 0) {
    7dd6:	7861      	ldrb	r1, [r4, #1]
    7dd8:	4a1d      	ldr	r2, [pc, #116]	; (7e50 <esb_write_payload+0x144>)
    7dda:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    7dde:	b993      	cbnz	r3, 7e06 <esb_write_payload+0xfa>
				ack_pl_wrap_pipe[payload->pipe] = new_ack_payload;
    7de0:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
    7de4:	e7d2      	b.n	7d8c <esb_write_payload+0x80>
	for (int i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    7de6:	3301      	adds	r3, #1
    7de8:	2b08      	cmp	r3, #8
    7dea:	f102 020c 	add.w	r2, r2, #12
    7dee:	d1d4      	bne.n	7d9a <esb_write_payload+0x8e>
	__asm__ volatile(
    7df0:	f388 8811 	msr	BASEPRI, r8
    7df4:	f3bf 8f6f 	isb	sy
		}
	}

	irq_unlock(key);

	if (esb_cfg.mode == ESB_MODE_PTX &&
    7df8:	787b      	ldrb	r3, [r7, #1]
    7dfa:	7c3a      	ldrb	r2, [r7, #16]
    7dfc:	4313      	orrs	r3, r2
    7dfe:	d009      	beq.n	7e14 <esb_write_payload+0x108>
	    esb_cfg.tx_mode == ESB_TXMODE_AUTO &&
	    esb_state == ESB_STATE_IDLE) {
		start_tx_transaction();
	}

	return 0;
    7e00:	2000      	movs	r0, #0
}
    7e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				while (pl->p_next != 0) {
    7e06:	461a      	mov	r2, r3
    7e08:	689b      	ldr	r3, [r3, #8]
    7e0a:	2b00      	cmp	r3, #0
    7e0c:	d1fb      	bne.n	7e06 <esb_write_payload+0xfa>
				pl->p_next = (struct payload_wrap *)new_ack_payload;
    7e0e:	f8c2 9008 	str.w	r9, [r2, #8]
    7e12:	e7bb      	b.n	7d8c <esb_write_payload+0x80>
	    esb_state == ESB_STATE_IDLE) {
    7e14:	4b0f      	ldr	r3, [pc, #60]	; (7e54 <esb_write_payload+0x148>)
    7e16:	781b      	ldrb	r3, [r3, #0]
	    esb_cfg.tx_mode == ESB_TXMODE_AUTO &&
    7e18:	2b00      	cmp	r3, #0
    7e1a:	d1f1      	bne.n	7e00 <esb_write_payload+0xf4>
		start_tx_transaction();
    7e1c:	f7ff fb56 	bl	74cc <start_tx_transaction>
    7e20:	e7ee      	b.n	7e00 <esb_write_payload+0xf4>
		return -EACCES;
    7e22:	f06f 000c 	mvn.w	r0, #12
    7e26:	e7ec      	b.n	7e02 <esb_write_payload+0xf6>
		return -EMSGSIZE;
    7e28:	f06f 0079 	mvn.w	r0, #121	; 0x79
    7e2c:	e7e9      	b.n	7e02 <esb_write_payload+0xf6>
		return -ENOMEM;
    7e2e:	f06f 000b 	mvn.w	r0, #11
    7e32:	e7e6      	b.n	7e02 <esb_write_payload+0xf6>
		return -EINVAL;
    7e34:	f06f 0015 	mvn.w	r0, #21
    7e38:	e7e3      	b.n	7e02 <esb_write_payload+0xf6>
    7e3a:	bf00      	nop
    7e3c:	20001fcf 	.word	0x20001fcf
    7e40:	20001954 	.word	0x20001954
    7e44:	20001920 	.word	0x20001920
    7e48:	20001f82 	.word	0x20001f82
    7e4c:	20001894 	.word	0x20001894
    7e50:	20001874 	.word	0x20001874
    7e54:	20001fce 	.word	0x20001fce

00007e58 <esb_read_rx_payload>:

int esb_read_rx_payload(struct esb_payload *payload)
{
    7e58:	b538      	push	{r3, r4, r5, lr}
	if (!esb_initialized) {
    7e5a:	4b25      	ldr	r3, [pc, #148]	; (7ef0 <esb_read_rx_payload+0x98>)
    7e5c:	781b      	ldrb	r3, [r3, #0]
    7e5e:	2b00      	cmp	r3, #0
    7e60:	d03d      	beq.n	7ede <esb_read_rx_payload+0x86>
		return -EACCES;
	}
	if (payload == NULL) {
    7e62:	2800      	cmp	r0, #0
    7e64:	d03e      	beq.n	7ee4 <esb_read_rx_payload+0x8c>
		return -EINVAL;
	}

	if (rx_fifo.count == 0) {
    7e66:	4c23      	ldr	r4, [pc, #140]	; (7ef4 <esb_read_rx_payload+0x9c>)
    7e68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7e6a:	2b00      	cmp	r3, #0
    7e6c:	d03d      	beq.n	7eea <esb_read_rx_payload+0x92>
	__asm__ volatile(
    7e6e:	f04f 0340 	mov.w	r3, #64	; 0x40
    7e72:	f3ef 8511 	mrs	r5, BASEPRI
    7e76:	f383 8812 	msr	BASEPRI_MAX, r3
    7e7a:	f3bf 8f6f 	isb	sy
		return -ENODATA;
	}

	unsigned int key = irq_lock();

	payload->length = rx_fifo.payload[rx_fifo.front]->length;
    7e7e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7e80:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    7e84:	781a      	ldrb	r2, [r3, #0]
    7e86:	7002      	strb	r2, [r0, #0]
	payload->pipe = rx_fifo.payload[rx_fifo.front]->pipe;
    7e88:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7e8a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    7e8e:	785b      	ldrb	r3, [r3, #1]
    7e90:	7043      	strb	r3, [r0, #1]
	payload->rssi = rx_fifo.payload[rx_fifo.front]->rssi;
    7e92:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7e94:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    7e98:	f993 3002 	ldrsb.w	r3, [r3, #2]
    7e9c:	7083      	strb	r3, [r0, #2]
	payload->pid = rx_fifo.payload[rx_fifo.front]->pid;
    7e9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7ea0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    7ea4:	791b      	ldrb	r3, [r3, #4]
    7ea6:	7103      	strb	r3, [r0, #4]
	payload->noack = rx_fifo.payload[rx_fifo.front]->noack;
    7ea8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7eaa:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    7eae:	78db      	ldrb	r3, [r3, #3]
    7eb0:	70c3      	strb	r3, [r0, #3]
	memcpy(payload->data, rx_fifo.payload[rx_fifo.front]->data,
    7eb2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7eb4:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    7eb8:	3005      	adds	r0, #5
    7eba:	3105      	adds	r1, #5
    7ebc:	f005 fb68 	bl	d590 <memcpy>
	       payload->length);

	if (++rx_fifo.front >= CONFIG_ESB_RX_FIFO_SIZE) {
    7ec0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7ec2:	3301      	adds	r3, #1
		rx_fifo.front = 0;
    7ec4:	2b08      	cmp	r3, #8
    7ec6:	bf28      	it	cs
    7ec8:	2300      	movcs	r3, #0
    7eca:	6263      	str	r3, [r4, #36]	; 0x24
	}

	rx_fifo.count--;
    7ecc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7ece:	3b01      	subs	r3, #1
    7ed0:	62a3      	str	r3, [r4, #40]	; 0x28
	__asm__ volatile(
    7ed2:	f385 8811 	msr	BASEPRI, r5
    7ed6:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	return 0;
    7eda:	2000      	movs	r0, #0
}
    7edc:	bd38      	pop	{r3, r4, r5, pc}
		return -EACCES;
    7ede:	f06f 000c 	mvn.w	r0, #12
    7ee2:	e7fb      	b.n	7edc <esb_read_rx_payload+0x84>
		return -EINVAL;
    7ee4:	f06f 0015 	mvn.w	r0, #21
    7ee8:	e7f8      	b.n	7edc <esb_read_rx_payload+0x84>
		return -ENODATA;
    7eea:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    7eee:	e7f5      	b.n	7edc <esb_read_rx_payload+0x84>
    7ef0:	20001fcf 	.word	0x20001fcf
    7ef4:	200018f4 	.word	0x200018f4

00007ef8 <esb_flush_tx>:
	return 0;
}

int esb_flush_tx(void)
{
	if (!esb_initialized) {
    7ef8:	4b0b      	ldr	r3, [pc, #44]	; (7f28 <esb_flush_tx+0x30>)
    7efa:	781b      	ldrb	r3, [r3, #0]
    7efc:	b18b      	cbz	r3, 7f22 <esb_flush_tx+0x2a>
	__asm__ volatile(
    7efe:	f04f 0340 	mov.w	r3, #64	; 0x40
    7f02:	f3ef 8211 	mrs	r2, BASEPRI
    7f06:	f383 8812 	msr	BASEPRI_MAX, r3
    7f0a:	f3bf 8f6f 	isb	sy
		return -EACCES;
	}

	unsigned int key = irq_lock();

	tx_fifo.count = 0;
    7f0e:	4b07      	ldr	r3, [pc, #28]	; (7f2c <esb_flush_tx+0x34>)
    7f10:	2000      	movs	r0, #0
    7f12:	6298      	str	r0, [r3, #40]	; 0x28
	tx_fifo.back = 0;
	tx_fifo.front = 0;
    7f14:	e9c3 0008 	strd	r0, r0, [r3, #32]
	__asm__ volatile(
    7f18:	f382 8811 	msr	BASEPRI, r2
    7f1c:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	return 0;
    7f20:	4770      	bx	lr
		return -EACCES;
    7f22:	f06f 000c 	mvn.w	r0, #12
}
    7f26:	4770      	bx	lr
    7f28:	20001fcf 	.word	0x20001fcf
    7f2c:	20001920 	.word	0x20001920

00007f30 <esb_set_base_address_0>:

	return 0;
}

int esb_set_base_address_0(const uint8_t *addr)
{
    7f30:	b510      	push	{r4, lr}
	if (esb_state != ESB_STATE_IDLE) {
    7f32:	4b0d      	ldr	r3, [pc, #52]	; (7f68 <esb_set_base_address_0+0x38>)
    7f34:	781b      	ldrb	r3, [r3, #0]
{
    7f36:	4601      	mov	r1, r0
	if (esb_state != ESB_STATE_IDLE) {
    7f38:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    7f3c:	b96b      	cbnz	r3, 7f5a <esb_set_base_address_0+0x2a>
		return -EBUSY;
	}
	if (addr == NULL) {
    7f3e:	b178      	cbz	r0, 7f60 <esb_set_base_address_0+0x30>
		return -EINVAL;
	}

	memcpy(esb_addr.base_addr_p0, addr, sizeof(esb_addr.base_addr_p0));
    7f40:	2204      	movs	r2, #4
    7f42:	480a      	ldr	r0, [pc, #40]	; (7f6c <esb_set_base_address_0+0x3c>)
    7f44:	f005 fb24 	bl	d590 <memcpy>
	return __REV(bytewise_bit_swap(addr));
    7f48:	4808      	ldr	r0, [pc, #32]	; (7f6c <esb_set_base_address_0+0x3c>)
    7f4a:	f005 fdca 	bl	dae2 <bytewise_bit_swap>
    p_reg->BASE0 = address;
    7f4e:	4b08      	ldr	r3, [pc, #32]	; (7f70 <esb_set_base_address_0+0x40>)
  return __builtin_bswap32(value);
    7f50:	ba00      	rev	r0, r0
    7f52:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c

	update_radio_addresses(ADDR_UPDATE_MASK_BASE0);

	return 0;
    7f56:	4620      	mov	r0, r4
}
    7f58:	bd10      	pop	{r4, pc}
		return -EBUSY;
    7f5a:	f06f 000f 	mvn.w	r0, #15
    7f5e:	e7fb      	b.n	7f58 <esb_set_base_address_0+0x28>
		return -EINVAL;
    7f60:	f06f 0015 	mvn.w	r0, #21
    7f64:	e7f8      	b.n	7f58 <esb_set_base_address_0+0x28>
    7f66:	bf00      	nop
    7f68:	20001fce 	.word	0x20001fce
    7f6c:	200000d0 	.word	0x200000d0
    7f70:	40001000 	.word	0x40001000

00007f74 <esb_set_base_address_1>:

int esb_set_base_address_1(const uint8_t *addr)
{
    7f74:	b510      	push	{r4, lr}
	if (esb_state != ESB_STATE_IDLE) {
    7f76:	4b0d      	ldr	r3, [pc, #52]	; (7fac <esb_set_base_address_1+0x38>)
    7f78:	781b      	ldrb	r3, [r3, #0]
{
    7f7a:	4601      	mov	r1, r0
	if (esb_state != ESB_STATE_IDLE) {
    7f7c:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    7f80:	b96b      	cbnz	r3, 7f9e <esb_set_base_address_1+0x2a>
		return -EBUSY;
	}
	if (addr == NULL) {
    7f82:	b178      	cbz	r0, 7fa4 <esb_set_base_address_1+0x30>
		return -EINVAL;
	}

	memcpy(esb_addr.base_addr_p1, addr, sizeof(esb_addr.base_addr_p1));
    7f84:	2204      	movs	r2, #4
    7f86:	480a      	ldr	r0, [pc, #40]	; (7fb0 <esb_set_base_address_1+0x3c>)
    7f88:	f005 fb02 	bl	d590 <memcpy>
	return __REV(bytewise_bit_swap(addr));
    7f8c:	4808      	ldr	r0, [pc, #32]	; (7fb0 <esb_set_base_address_1+0x3c>)
    7f8e:	f005 fda8 	bl	dae2 <bytewise_bit_swap>
    p_reg->BASE1 = address;
    7f92:	4b08      	ldr	r3, [pc, #32]	; (7fb4 <esb_set_base_address_1+0x40>)
    7f94:	ba00      	rev	r0, r0
    7f96:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520

	update_radio_addresses(ADDR_UPDATE_MASK_BASE1);

	return 0;
    7f9a:	4620      	mov	r0, r4
}
    7f9c:	bd10      	pop	{r4, pc}
		return -EBUSY;
    7f9e:	f06f 000f 	mvn.w	r0, #15
    7fa2:	e7fb      	b.n	7f9c <esb_set_base_address_1+0x28>
		return -EINVAL;
    7fa4:	f06f 0015 	mvn.w	r0, #21
    7fa8:	e7f8      	b.n	7f9c <esb_set_base_address_1+0x28>
    7faa:	bf00      	nop
    7fac:	20001fce 	.word	0x20001fce
    7fb0:	200000d4 	.word	0x200000d4
    7fb4:	40001000 	.word	0x40001000

00007fb8 <esb_set_prefixes>:

int esb_set_prefixes(const uint8_t *prefixes, uint8_t num_pipes)
{
    7fb8:	b538      	push	{r3, r4, r5, lr}
	if (esb_state != ESB_STATE_IDLE) {
    7fba:	4b0f      	ldr	r3, [pc, #60]	; (7ff8 <esb_set_prefixes+0x40>)
    7fbc:	781b      	ldrb	r3, [r3, #0]
{
    7fbe:	460c      	mov	r4, r1
	if (esb_state != ESB_STATE_IDLE) {
    7fc0:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    7fc4:	b993      	cbnz	r3, 7fec <esb_set_prefixes+0x34>
		return -EBUSY;
	}
	if (prefixes == NULL) {
    7fc6:	b1a0      	cbz	r0, 7ff2 <esb_set_prefixes+0x3a>
		return -EINVAL;
	}
	if (!(num_pipes <= CONFIG_ESB_PIPE_COUNT)) {
    7fc8:	2908      	cmp	r1, #8
    7fca:	d812      	bhi.n	7ff2 <esb_set_prefixes+0x3a>
		return -EINVAL;
	}

	memcpy(esb_addr.pipe_prefixes, prefixes, num_pipes);
    7fcc:	460a      	mov	r2, r1
    7fce:	4601      	mov	r1, r0
    7fd0:	480a      	ldr	r0, [pc, #40]	; (7ffc <esb_set_prefixes+0x44>)
    7fd2:	f005 fadd 	bl	d590 <memcpy>

	esb_addr.num_pipes = num_pipes;
    7fd6:	4a0a      	ldr	r2, [pc, #40]	; (8000 <CONFIG_PM_SRAM_SIZE>)
	esb_addr.rx_pipes_enabled = BIT_MASK_UINT_8(num_pipes);
    7fd8:	23ff      	movs	r3, #255	; 0xff
	esb_addr.num_pipes = num_pipes;
    7fda:	7414      	strb	r4, [r2, #16]
	esb_addr.rx_pipes_enabled = BIT_MASK_UINT_8(num_pipes);
    7fdc:	f1c4 0408 	rsb	r4, r4, #8
    7fe0:	4123      	asrs	r3, r4
    7fe2:	7493      	strb	r3, [r2, #18]
	if ((update_mask & ADDR_UPDATE_MASK_PREFIX) != 0) {
    7fe4:	f7ff f964 	bl	72b0 <update_radio_addresses.part.0>

	update_radio_addresses(ADDR_UPDATE_MASK_PREFIX);

	return 0;
    7fe8:	4628      	mov	r0, r5
}
    7fea:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    7fec:	f06f 000f 	mvn.w	r0, #15
    7ff0:	e7fb      	b.n	7fea <esb_set_prefixes+0x32>
		return -EINVAL;
    7ff2:	f06f 0015 	mvn.w	r0, #21
    7ff6:	e7f8      	b.n	7fea <esb_set_prefixes+0x32>
    7ff8:	20001fce 	.word	0x20001fce
    7ffc:	200000d8 	.word	0x200000d8
    8000:	200000d0 	.word	0x200000d0

00008004 <esb_ppi_for_fem_set>:
{
	uint32_t egu_event = nrf_egu_event_address_get(ESB_EGU, ESB_EGU_EVENT);
	uint32_t timer_task = nrf_timer_task_address_get(ESB_NRF_TIMER_INSTANCE,
							 NRF_TIMER_TASK_START);

	nrf_ppi_channel_endpoint_setup(NRF_PPI, egu_timer_start, egu_event, timer_task);
    8004:	4b09      	ldr	r3, [pc, #36]	; (802c <esb_ppi_for_fem_set+0x28>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    8006:	490a      	ldr	r1, [pc, #40]	; (8030 <esb_ppi_for_fem_set+0x2c>)
    8008:	781a      	ldrb	r2, [r3, #0]
    800a:	00d3      	lsls	r3, r2, #3
    800c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8010:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    8014:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    8018:	4906      	ldr	r1, [pc, #24]	; (8034 <esb_ppi_for_fem_set+0x30>)
    801a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
    p_reg->CHENSET = PPI_CHENSET_CH0_Set << ((uint32_t) channel);
    801e:	2301      	movs	r3, #1
    8020:	4093      	lsls	r3, r2
    8022:	4a05      	ldr	r2, [pc, #20]	; (8038 <esb_ppi_for_fem_set+0x34>)
    8024:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	nrf_ppi_channel_enable(NRF_PPI, egu_timer_start);
}
    8028:	4770      	bx	lr
    802a:	bf00      	nop
    802c:	20001fd2 	.word	0x20001fd2
    8030:	40014118 	.word	0x40014118
    8034:	4000a000 	.word	0x4000a000
    8038:	4001f000 	.word	0x4001f000

0000803c <esb_ppi_for_fem_clear>:

void esb_ppi_for_fem_clear(void)
{
	nrf_ppi_channel_disable(NRF_PPI, egu_timer_start);
    803c:	4b08      	ldr	r3, [pc, #32]	; (8060 <esb_ppi_for_fem_clear+0x24>)
    p_reg->CHENCLR = PPI_CHENCLR_CH0_Clear << ((uint32_t) channel);
    803e:	4909      	ldr	r1, [pc, #36]	; (8064 <esb_ppi_for_fem_clear+0x28>)
    8040:	781b      	ldrb	r3, [r3, #0]
    8042:	2201      	movs	r2, #1
    8044:	409a      	lsls	r2, r3
    8046:	00db      	lsls	r3, r3, #3
    8048:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    804c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    8050:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
    8054:	2200      	movs	r2, #0
    8056:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    805a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_ppi_channel_endpoint_setup(NRF_PPI, egu_timer_start, 0, 0);
}
    805e:	4770      	bx	lr
    8060:	20001fd2 	.word	0x20001fd2
    8064:	4001f000 	.word	0x4001f000

00008068 <esb_ppi_for_txrx_set>:

void esb_ppi_for_txrx_set(bool rx, bool timer_start)
{
    8068:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t channels_mask;
	uint32_t egu_event = nrf_egu_event_address_get(ESB_EGU, ESB_EGU_EVENT);
	uint32_t egu_task = nrf_egu_task_address_get(ESB_EGU, ESB_EGU_TASK);
	uint32_t group_disable_task =
			nrf_ppi_task_group_disable_address_get(NRF_PPI, ramp_up_ppi_group);
    806a:	4b2b      	ldr	r3, [pc, #172]	; (8118 <esb_ppi_for_txrx_set+0xb0>)
}

NRF_STATIC_INLINE uint32_t nrf_ppi_task_group_disable_address_get(NRF_PPI_Type const *    p_reg,
                                                                  nrf_ppi_channel_group_t group)
{
    return (uint32_t) &p_reg->TASKS_CHG[(uint32_t) group].DIS;
    806c:	4c2b      	ldr	r4, [pc, #172]	; (811c <esb_ppi_for_txrx_set+0xb4>)
    806e:	781b      	ldrb	r3, [r3, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
    8070:	4f2b      	ldr	r7, [pc, #172]	; (8120 <esb_ppi_for_txrx_set+0xb8>)
    return (uint32_t) &p_reg->TASKS_CHG[(uint32_t) group].DIS;
    8072:	00da      	lsls	r2, r3, #3
    8074:	4414      	add	r4, r2
}

NRF_STATIC_INLINE void nrf_egu_event_clear(NRF_EGU_Type * p_reg, nrf_egu_event_t egu_event)
{
    NRFX_ASSERT(p_reg);
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event)) = 0x0UL;
    8076:	4a2b      	ldr	r2, [pc, #172]	; (8124 <esb_ppi_for_txrx_set+0xbc>)
    8078:	2500      	movs	r5, #0
    807a:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
    807e:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
						NRF_RADIO_EVENT_DISABLED);
	uint32_t timer_task = nrf_timer_task_address_get(ESB_NRF_TIMER_INSTANCE,
							 NRF_TIMER_TASK_START);

	nrf_egu_event_clear(ESB_EGU, ESB_EGU_EVENT);
	nrf_ppi_channel_and_fork_endpoint_setup(NRF_PPI, egu_ramp_up, egu_event, radio_en_task,
    8082:	4a29      	ldr	r2, [pc, #164]	; (8128 <esb_ppi_for_txrx_set+0xc0>)
    8084:	7815      	ldrb	r5, [r2, #0]
	uint32_t radio_en_task = nrf_radio_task_address_get(NRF_RADIO,
    8086:	0080      	lsls	r0, r0, #2
    8088:	00ea      	lsls	r2, r5, #3
    return ((uint32_t)p_reg + (uint32_t)task);
    808a:	b2c0      	uxtb	r0, r0
    808c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    8090:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    8094:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    8098:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
    p_reg->CH[(uint32_t) channel].EEP = eep;
    809c:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    80a0:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
    p_reg->FORK[(uint32_t) channel].TEP = fork_tep;
    80a4:	4a21      	ldr	r2, [pc, #132]	; (812c <esb_ppi_for_txrx_set+0xc4>)
    80a6:	f505 7011 	add.w	r0, r5, #580	; 0x244
    80aa:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
						group_disable_task);
	nrf_ppi_channel_endpoint_setup(NRF_PPI, disabled_egu, radio_disabled_event, egu_task);
    80ae:	4a20      	ldr	r2, [pc, #128]	; (8130 <esb_ppi_for_txrx_set+0xc8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
    80b0:	4820      	ldr	r0, [pc, #128]	; (8134 <esb_ppi_for_txrx_set+0xcc>)
    80b2:	7816      	ldrb	r6, [r2, #0]
    80b4:	00f2      	lsls	r2, r6, #3
    80b6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    80ba:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000

	channels_mask = BIT(egu_ramp_up) | BIT(disabled_egu);
    80be:	2401      	movs	r4, #1
    80c0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    80c4:	f500 3097 	add.w	r0, r0, #77312	; 0x12e00
    80c8:	f500 7084 	add.w	r0, r0, #264	; 0x108
    80cc:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
    80d0:	fa04 f606 	lsl.w	r6, r4, r6
    80d4:	fa04 f005 	lsl.w	r0, r4, r5
    80d8:	4330      	orrs	r0, r6

	if (timer_start) {
    80da:	b169      	cbz	r1, 80f8 <esb_ppi_for_txrx_set+0x90>
		nrf_ppi_channel_endpoint_setup(NRF_PPI, egu_timer_start, egu_event, timer_task);
    80dc:	4a16      	ldr	r2, [pc, #88]	; (8138 <esb_ppi_for_txrx_set+0xd0>)
    80de:	4e17      	ldr	r6, [pc, #92]	; (813c <esb_ppi_for_txrx_set+0xd4>)
    80e0:	7811      	ldrb	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
    80e2:	00ca      	lsls	r2, r1, #3
    80e4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    80e8:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
		channels_mask |= BIT(egu_timer_start);
    80ec:	408c      	lsls	r4, r1
    80ee:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
    80f2:	4320      	orrs	r0, r4
    p_reg->CH[(uint32_t) channel].TEP = tep;
    80f4:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
    p_reg->CHG[(uint32_t) channel_group] |= (PPI_CHG_CH0_Included << ((uint32_t) channel));
    80f8:	009b      	lsls	r3, r3, #2
    80fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    80fe:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    8102:	2201      	movs	r2, #1
    8104:	f8d3 1800 	ldr.w	r1, [r3, #2048]	; 0x800
    8108:	40aa      	lsls	r2, r5
    810a:	430a      	orrs	r2, r1
    810c:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    p_reg->CHENSET = mask;
    8110:	4b06      	ldr	r3, [pc, #24]	; (812c <esb_ppi_for_txrx_set+0xc4>)
    8112:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	}

	nrf_ppi_channel_include_in_group(NRF_PPI, egu_ramp_up, ramp_up_ppi_group);
	nrf_ppi_channels_enable(NRF_PPI, channels_mask);
}
    8116:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8118:	20001fd0 	.word	0x20001fd0
    811c:	4001f004 	.word	0x4001f004
    8120:	40014118 	.word	0x40014118
    8124:	40014000 	.word	0x40014000
    8128:	20001fd3 	.word	0x20001fd3
    812c:	4001f000 	.word	0x4001f000
    8130:	20001fd1 	.word	0x20001fd1
    8134:	40001110 	.word	0x40001110
    8138:	20001fd2 	.word	0x20001fd2
    813c:	4000a000 	.word	0x4000a000

00008140 <esb_ppi_for_txrx_clear>:

void esb_ppi_for_txrx_clear(bool rx, bool timer_start)
{
    8140:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t channels_mask = (BIT(egu_ramp_up) | BIT(disabled_egu));
    8142:	4b29      	ldr	r3, [pc, #164]	; (81e8 <esb_ppi_for_txrx_clear+0xa8>)
    8144:	4e29      	ldr	r6, [pc, #164]	; (81ec <esb_ppi_for_txrx_clear+0xac>)
    8146:	7818      	ldrb	r0, [r3, #0]
    8148:	4b29      	ldr	r3, [pc, #164]	; (81f0 <esb_ppi_for_txrx_clear+0xb0>)
    814a:	781a      	ldrb	r2, [r3, #0]
    814c:	2401      	movs	r4, #1
    814e:	fa04 f302 	lsl.w	r3, r4, r2
    8152:	fa04 f500 	lsl.w	r5, r4, r0
    8156:	431d      	orrs	r5, r3

	ARG_UNUSED(rx);

	if (timer_start) {
    8158:	f500 7711 	add.w	r7, r0, #580	; 0x244
    815c:	00c3      	lsls	r3, r0, #3
    815e:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
    8162:	bb19      	cbnz	r1, 81ac <esb_ppi_for_txrx_clear+0x6c>
    p_reg->CHENCLR = mask;
    8164:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8168:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    816c:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
    8170:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    8174:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
    p_reg->FORK[(uint32_t) channel].TEP = fork_tep;
    8178:	f846 1027 	str.w	r1, [r6, r7, lsl #2]
    p_reg->CH[(uint32_t) channel].EEP = eep;
    817c:	f10c 4380 	add.w	r3, ip, #1073741824	; 0x40000000
    8180:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    8184:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    8188:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514

	if (timer_start) {
		nrf_ppi_channel_endpoint_setup(NRF_PPI, egu_timer_start, 0, 0);
	}

	nrf_ppi_channel_remove_from_group(NRF_PPI, egu_ramp_up, ramp_up_ppi_group);
    818c:	4b19      	ldr	r3, [pc, #100]	; (81f4 <esb_ppi_for_txrx_clear+0xb4>)
    p_reg->CHG[(uint32_t) channel_group] &= ~(PPI_CHG_CH0_Included << ((uint32_t) channel));
    818e:	781b      	ldrb	r3, [r3, #0]
    8190:	009b      	lsls	r3, r3, #2
    8192:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8196:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    819a:	2101      	movs	r1, #1
    819c:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
    81a0:	4081      	lsls	r1, r0
    81a2:	ea22 0201 	bic.w	r2, r2, r1
    81a6:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
    81aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		channels_mask |= BIT(egu_timer_start);
    81ac:	4a12      	ldr	r2, [pc, #72]	; (81f8 <esb_ppi_for_txrx_clear+0xb8>)
    81ae:	7812      	ldrb	r2, [r2, #0]
    81b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    81b4:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    81b8:	4094      	lsls	r4, r2
    p_reg->CH[(uint32_t) channel].EEP = eep;
    81ba:	2100      	movs	r1, #0
    81bc:	432c      	orrs	r4, r5
    p_reg->CHENCLR = mask;
    81be:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
    81c2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    81c6:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
    p_reg->FORK[(uint32_t) channel].TEP = fork_tep;
    81ca:	f10c 4380 	add.w	r3, ip, #1073741824	; 0x40000000
    81ce:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    81d2:	f846 1027 	str.w	r1, [r6, r7, lsl #2]
    p_reg->CH[(uint32_t) channel].EEP = eep;
    81d6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    81da:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
    p_reg->CH[(uint32_t) channel].EEP = eep;
    81de:	00d3      	lsls	r3, r2, #3
    81e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    81e4:	e7cc      	b.n	8180 <esb_ppi_for_txrx_clear+0x40>
    81e6:	bf00      	nop
    81e8:	20001fd3 	.word	0x20001fd3
    81ec:	4001f000 	.word	0x4001f000
    81f0:	20001fd1 	.word	0x20001fd1
    81f4:	20001fd0 	.word	0x20001fd0
    81f8:	20001fd2 	.word	0x20001fd2

000081fc <esb_ppi_for_retransmission_set>:
    81fc:	4b15      	ldr	r3, [pc, #84]	; (8254 <esb_ppi_for_retransmission_set+0x58>)
    81fe:	4916      	ldr	r1, [pc, #88]	; (8258 <esb_ppi_for_retransmission_set+0x5c>)
    8200:	4816      	ldr	r0, [pc, #88]	; (825c <esb_ppi_for_retransmission_set+0x60>)
    8202:	2200      	movs	r2, #0
    8204:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    8208:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118

	uint32_t egu_task = nrf_egu_task_address_get(ESB_EGU, ESB_EGU_TASK);
	uint32_t radio_disabled_event = nrf_radio_event_address_get(NRF_RADIO,
						NRF_RADIO_EVENT_DISABLED);
	nrf_egu_event_clear(ESB_EGU, ESB_EGU_EVENT);
	nrf_ppi_channel_endpoint_setup(NRF_PPI, disabled_egu, radio_disabled_event, egu_task);
    820c:	4b14      	ldr	r3, [pc, #80]	; (8260 <esb_ppi_for_retransmission_set+0x64>)
    820e:	781b      	ldrb	r3, [r3, #0]
    8210:	00da      	lsls	r2, r3, #3
    8212:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    8216:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    821a:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    821e:	f501 3197 	add.w	r1, r1, #77312	; 0x12e00
    8222:	f501 7184 	add.w	r1, r1, #264	; 0x108
    8226:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514

	nrf_ppi_channel_endpoint_setup(NRF_PPI, timer_compare1_radio_txen,
    822a:	4a0e      	ldr	r2, [pc, #56]	; (8264 <esb_ppi_for_retransmission_set+0x68>)
    822c:	7811      	ldrb	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
    822e:	00ca      	lsls	r2, r1, #3
    8230:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    8234:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    8238:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    823c:	480a      	ldr	r0, [pc, #40]	; (8268 <esb_ppi_for_retransmission_set+0x6c>)
    823e:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
		nrf_timer_event_address_get(ESB_NRF_TIMER_INSTANCE, NRF_TIMER_EVENT_COMPARE1),
		nrf_radio_task_address_get(NRF_RADIO, NRF_RADIO_TASK_TXEN));

	channels_mask = BIT(disabled_egu) | BIT(timer_compare1_radio_txen);
    8242:	2201      	movs	r2, #1
    8244:	fa02 f303 	lsl.w	r3, r2, r3
    8248:	408a      	lsls	r2, r1
    824a:	4313      	orrs	r3, r2
    p_reg->CHENSET = mask;
    824c:	4a07      	ldr	r2, [pc, #28]	; (826c <esb_ppi_for_retransmission_set+0x70>)
    824e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	nrf_ppi_channels_enable(NRF_PPI, channels_mask);
}
    8252:	4770      	bx	lr
    8254:	40014000 	.word	0x40014000
    8258:	40001110 	.word	0x40001110
    825c:	4000a144 	.word	0x4000a144
    8260:	20001fd1 	.word	0x20001fd1
    8264:	20001fd4 	.word	0x20001fd4
    8268:	40001000 	.word	0x40001000
    826c:	4001f000 	.word	0x4001f000

00008270 <esb_ppi_for_retransmission_clear>:

void esb_ppi_for_retransmission_clear(void)
{
	uint32_t channels_mask;

	channels_mask = (BIT(disabled_egu) |
    8270:	4b0f      	ldr	r3, [pc, #60]	; (82b0 <esb_ppi_for_retransmission_clear+0x40>)
    8272:	781a      	ldrb	r2, [r3, #0]
			 BIT(timer_compare1_radio_txen));
    8274:	4b0f      	ldr	r3, [pc, #60]	; (82b4 <esb_ppi_for_retransmission_clear+0x44>)
    8276:	781b      	ldrb	r3, [r3, #0]
	channels_mask = (BIT(disabled_egu) |
    8278:	2101      	movs	r1, #1
    827a:	fa01 f002 	lsl.w	r0, r1, r2
			 BIT(timer_compare1_radio_txen));
    827e:	4099      	lsls	r1, r3
    8280:	00d2      	lsls	r2, r2, #3
    8282:	00db      	lsls	r3, r3, #3
	channels_mask = (BIT(disabled_egu) |
    8284:	4301      	orrs	r1, r0
    p_reg->CHENCLR = mask;
    8286:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    828a:	480b      	ldr	r0, [pc, #44]	; (82b8 <esb_ppi_for_retransmission_clear+0x48>)
    828c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8290:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    8294:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    8298:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
    829c:	2100      	movs	r1, #0
    829e:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    82a2:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    p_reg->CH[(uint32_t) channel].EEP = eep;
    82a6:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    82aa:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514

	nrf_ppi_channels_disable(NRF_PPI, channels_mask);

	nrf_ppi_channel_endpoint_setup(NRF_PPI, disabled_egu, 0, 0);
	nrf_ppi_channel_endpoint_setup(NRF_PPI, timer_compare1_radio_txen, 0, 0);
}
    82ae:	4770      	bx	lr
    82b0:	20001fd1 	.word	0x20001fd1
    82b4:	20001fd4 	.word	0x20001fd4
    82b8:	4001f000 	.word	0x4001f000

000082bc <esb_ppi_for_wait_for_ack_set>:

void esb_ppi_for_wait_for_ack_set(void)
{
	uint32_t ppi_channels_mask;

	nrf_ppi_channel_endpoint_setup(NRF_PPI, radio_address_timer_stop,
    82bc:	4b13      	ldr	r3, [pc, #76]	; (830c <esb_ppi_for_wait_for_ack_set+0x50>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
    82be:	4914      	ldr	r1, [pc, #80]	; (8310 <esb_ppi_for_wait_for_ack_set+0x54>)
    82c0:	781b      	ldrb	r3, [r3, #0]
    82c2:	4814      	ldr	r0, [pc, #80]	; (8314 <esb_ppi_for_wait_for_ack_set+0x58>)
    82c4:	00da      	lsls	r2, r3, #3
    82c6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    82ca:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    82ce:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    82d2:	f501 410f 	add.w	r1, r1, #36608	; 0x8f00
    82d6:	310c      	adds	r1, #12
    82d8:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
		nrf_radio_event_address_get(NRF_RADIO, NRF_RADIO_EVENT_ADDRESS),
		nrf_timer_task_address_get(ESB_NRF_TIMER_INSTANCE, NRF_TIMER_TASK_SHUTDOWN));

	nrf_ppi_channel_endpoint_setup(NRF_PPI, timer_compare0_radio_disable,
    82dc:	4a0e      	ldr	r2, [pc, #56]	; (8318 <esb_ppi_for_wait_for_ack_set+0x5c>)
    82de:	7811      	ldrb	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
    82e0:	00ca      	lsls	r2, r1, #3
    82e2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    82e6:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    82ea:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    82ee:	f5a0 4011 	sub.w	r0, r0, #37120	; 0x9100
    82f2:	3830      	subs	r0, #48	; 0x30
    82f4:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
		nrf_timer_event_address_get(ESB_NRF_TIMER_INSTANCE, NRF_TIMER_EVENT_COMPARE0),
		nrf_radio_task_address_get(NRF_RADIO, NRF_RADIO_TASK_DISABLE));

	ppi_channels_mask = (BIT(radio_address_timer_stop) |
    82f8:	2201      	movs	r2, #1
    82fa:	fa02 f303 	lsl.w	r3, r2, r3
			     BIT(timer_compare0_radio_disable));
    82fe:	408a      	lsls	r2, r1
	ppi_channels_mask = (BIT(radio_address_timer_stop) |
    8300:	4313      	orrs	r3, r2
    p_reg->CHENSET = mask;
    8302:	4a06      	ldr	r2, [pc, #24]	; (831c <esb_ppi_for_wait_for_ack_set+0x60>)
    8304:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	nrf_ppi_channels_enable(NRF_PPI, ppi_channels_mask);
}
    8308:	4770      	bx	lr
    830a:	bf00      	nop
    830c:	20001fd6 	.word	0x20001fd6
    8310:	40001104 	.word	0x40001104
    8314:	4000a140 	.word	0x4000a140
    8318:	20001fd5 	.word	0x20001fd5
    831c:	4001f000 	.word	0x4001f000

00008320 <esb_ppi_for_wait_for_ack_clear>:

void esb_ppi_for_wait_for_ack_clear(void)
{
	uint32_t ppi_channels_mask;

	ppi_channels_mask = (BIT(radio_address_timer_stop) |
    8320:	4b0f      	ldr	r3, [pc, #60]	; (8360 <esb_ppi_for_wait_for_ack_clear+0x40>)
    8322:	781a      	ldrb	r2, [r3, #0]
			     BIT(timer_compare0_radio_disable));
    8324:	4b0f      	ldr	r3, [pc, #60]	; (8364 <esb_ppi_for_wait_for_ack_clear+0x44>)
    8326:	781b      	ldrb	r3, [r3, #0]
	ppi_channels_mask = (BIT(radio_address_timer_stop) |
    8328:	2101      	movs	r1, #1
    832a:	fa01 f002 	lsl.w	r0, r1, r2
			     BIT(timer_compare0_radio_disable));
    832e:	4099      	lsls	r1, r3
    8330:	00d2      	lsls	r2, r2, #3
    8332:	00db      	lsls	r3, r3, #3
	ppi_channels_mask = (BIT(radio_address_timer_stop) |
    8334:	4301      	orrs	r1, r0
    p_reg->CHENCLR = mask;
    8336:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    833a:	480b      	ldr	r0, [pc, #44]	; (8368 <esb_ppi_for_wait_for_ack_clear+0x48>)
    833c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8340:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    8344:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    8348:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
    834c:	2100      	movs	r1, #0
    834e:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    8352:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    p_reg->CH[(uint32_t) channel].EEP = eep;
    8356:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    835a:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514

	nrf_ppi_channels_disable(NRF_PPI, ppi_channels_mask);

	nrf_ppi_channel_endpoint_setup(NRF_PPI, radio_address_timer_stop, 0, 0);
	nrf_ppi_channel_endpoint_setup(NRF_PPI, timer_compare0_radio_disable, 0, 0);
}
    835e:	4770      	bx	lr
    8360:	20001fd6 	.word	0x20001fd6
    8364:	20001fd5 	.word	0x20001fd5
    8368:	4001f000 	.word	0x4001f000

0000836c <esb_ppi_init>:

	nrf_ppi_channel_endpoint_setup(NRF_PPI, radio_end_timer_start, 0, 0);
}

int esb_ppi_init(void)
{
    836c:	b5b0      	push	{r4, r5, r7, lr}
	nrfx_err_t err;

	err = nrfx_ppi_channel_alloc(&egu_ramp_up);
    836e:	4829      	ldr	r0, [pc, #164]	; (8414 <esb_ppi_init+0xa8>)
	if (err != NRFX_SUCCESS) {
    8370:	4d29      	ldr	r5, [pc, #164]	; (8418 <esb_ppi_init+0xac>)
{
    8372:	af00      	add	r7, sp, #0
	err = nrfx_ppi_channel_alloc(&egu_ramp_up);
    8374:	f001 fb20 	bl	99b8 <nrfx_ppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    8378:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_alloc(&egu_ramp_up);
    837a:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    837c:	d136      	bne.n	83ec <esb_ppi_init+0x80>
		goto error;
	}

	err = nrfx_ppi_channel_alloc(&disabled_egu);
    837e:	4827      	ldr	r0, [pc, #156]	; (841c <esb_ppi_init+0xb0>)
    8380:	f001 fb1a 	bl	99b8 <nrfx_ppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    8384:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_alloc(&disabled_egu);
    8386:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    8388:	d130      	bne.n	83ec <esb_ppi_init+0x80>
		goto error;
	}

	err = nrfx_ppi_channel_alloc(&egu_timer_start);
    838a:	4825      	ldr	r0, [pc, #148]	; (8420 <esb_ppi_init+0xb4>)
    838c:	f001 fb14 	bl	99b8 <nrfx_ppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    8390:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_alloc(&egu_timer_start);
    8392:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    8394:	d12a      	bne.n	83ec <esb_ppi_init+0x80>
		goto error;
	}

	err = nrfx_ppi_channel_alloc(&radio_address_timer_stop);
    8396:	4823      	ldr	r0, [pc, #140]	; (8424 <esb_ppi_init+0xb8>)
    8398:	f001 fb0e 	bl	99b8 <nrfx_ppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    839c:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_alloc(&radio_address_timer_stop);
    839e:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    83a0:	d124      	bne.n	83ec <esb_ppi_init+0x80>
		goto error;
	}

	err = nrfx_ppi_channel_alloc(&timer_compare0_radio_disable);
    83a2:	4821      	ldr	r0, [pc, #132]	; (8428 <esb_ppi_init+0xbc>)
    83a4:	f001 fb08 	bl	99b8 <nrfx_ppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    83a8:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_alloc(&timer_compare0_radio_disable);
    83aa:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    83ac:	d11e      	bne.n	83ec <esb_ppi_init+0x80>
		goto error;
	}

	err = nrfx_ppi_channel_alloc(&timer_compare1_radio_txen);
    83ae:	481f      	ldr	r0, [pc, #124]	; (842c <esb_ppi_init+0xc0>)
    83b0:	f001 fb02 	bl	99b8 <nrfx_ppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    83b4:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_alloc(&timer_compare1_radio_txen);
    83b6:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    83b8:	d118      	bne.n	83ec <esb_ppi_init+0x80>
		if (err != NRFX_SUCCESS) {
			goto error;
		}
	}

	err = nrfx_ppi_group_alloc(&ramp_up_ppi_group);
    83ba:	481d      	ldr	r0, [pc, #116]	; (8430 <esb_ppi_init+0xc4>)
    83bc:	f001 fb16 	bl	99ec <nrfx_ppi_group_alloc>
	if (err != NRFX_SUCCESS) {
    83c0:	42a0      	cmp	r0, r4
    83c2:	d024      	beq.n	840e <esb_ppi_init+0xa2>
		LOG_ERR("gppi_group_alloc failed with: %d\n", err);
    83c4:	466c      	mov	r4, sp
    83c6:	b088      	sub	sp, #32
    83c8:	466a      	mov	r2, sp
    83ca:	4b1a      	ldr	r3, [pc, #104]	; (8434 <esb_ppi_init+0xc8>)
    83cc:	e9c2 3005 	strd	r3, r0, [r2, #20]
    83d0:	2303      	movs	r3, #3
    83d2:	f842 3f10 	str.w	r3, [r2, #16]!
    83d6:	4818      	ldr	r0, [pc, #96]	; (8438 <esb_ppi_init+0xcc>)
    83d8:	2300      	movs	r3, #0
    83da:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    83de:	f7fa fa0d 	bl	27fc <z_impl_z_log_msg_static_create>
    83e2:	46a5      	mov	sp, r4
		return -ENODEV;
    83e4:	f06f 0012 	mvn.w	r0, #18
	return 0;

error:
	LOG_ERR("gppi_channel_alloc failed with: %d\n", err);
	return -ENODEV;
}
    83e8:	46bd      	mov	sp, r7
    83ea:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_ERR("gppi_channel_alloc failed with: %d\n", err);
    83ec:	466d      	mov	r5, sp
    83ee:	b088      	sub	sp, #32
    83f0:	466a      	mov	r2, sp
    83f2:	4b12      	ldr	r3, [pc, #72]	; (843c <esb_ppi_init+0xd0>)
    83f4:	e9c2 3405 	strd	r3, r4, [r2, #20]
    83f8:	2303      	movs	r3, #3
    83fa:	f842 3f10 	str.w	r3, [r2, #16]!
    83fe:	480e      	ldr	r0, [pc, #56]	; (8438 <esb_ppi_init+0xcc>)
    8400:	2300      	movs	r3, #0
    8402:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8406:	f7fa f9f9 	bl	27fc <z_impl_z_log_msg_static_create>
    840a:	46ad      	mov	sp, r5
	return -ENODEV;
    840c:	e7ea      	b.n	83e4 <esb_ppi_init+0x78>
	return 0;
    840e:	2000      	movs	r0, #0
    8410:	e7ea      	b.n	83e8 <esb_ppi_init+0x7c>
    8412:	bf00      	nop
    8414:	20001fd3 	.word	0x20001fd3
    8418:	0bad0000 	.word	0x0bad0000
    841c:	20001fd1 	.word	0x20001fd1
    8420:	20001fd2 	.word	0x20001fd2
    8424:	20001fd6 	.word	0x20001fd6
    8428:	20001fd5 	.word	0x20001fd5
    842c:	20001fd4 	.word	0x20001fd4
    8430:	20001fd0 	.word	0x20001fd0
    8434:	0000fe90 	.word	0x0000fe90
    8438:	0000e8a8 	.word	0x0000e8a8
    843c:	0000feb2 	.word	0x0000feb2

00008440 <esb_ppi_radio_disabled_get>:

uint32_t esb_ppi_radio_disabled_get(void)
{
	return nrf_radio_event_address_get(NRF_RADIO, NRF_RADIO_EVENT_DISABLED);
}
    8440:	4800      	ldr	r0, [pc, #0]	; (8444 <esb_ppi_radio_disabled_get+0x4>)
    8442:	4770      	bx	lr
    8444:	40001110 	.word	0x40001110

00008448 <esb_ppi_disable_all>:

void esb_ppi_disable_all(void)
{
	uint32_t channels_mask = (BIT(egu_ramp_up) |
    8448:	4b0e      	ldr	r3, [pc, #56]	; (8484 <esb_ppi_disable_all+0x3c>)
				  BIT(disabled_egu) |
				  BIT(egu_timer_start) |
				  BIT(radio_address_timer_stop) |
				  BIT(timer_compare0_radio_disable) |
    844a:	490f      	ldr	r1, [pc, #60]	; (8488 <esb_ppi_disable_all+0x40>)
	uint32_t channels_mask = (BIT(egu_ramp_up) |
    844c:	781b      	ldrb	r3, [r3, #0]
				  BIT(timer_compare0_radio_disable) |
    844e:	7809      	ldrb	r1, [r1, #0]
	uint32_t channels_mask = (BIT(egu_ramp_up) |
    8450:	2201      	movs	r2, #1
				  BIT(timer_compare0_radio_disable) |
    8452:	fa02 f101 	lsl.w	r1, r2, r1
	uint32_t channels_mask = (BIT(egu_ramp_up) |
    8456:	fa02 f303 	lsl.w	r3, r2, r3
				  BIT(radio_address_timer_stop) |
    845a:	430b      	orrs	r3, r1
				  BIT(disabled_egu) |
    845c:	490b      	ldr	r1, [pc, #44]	; (848c <esb_ppi_disable_all+0x44>)
    845e:	7809      	ldrb	r1, [r1, #0]
    8460:	fa02 f101 	lsl.w	r1, r2, r1
				  BIT(radio_address_timer_stop) |
    8464:	430b      	orrs	r3, r1
				  BIT(egu_timer_start) |
    8466:	490a      	ldr	r1, [pc, #40]	; (8490 <esb_ppi_disable_all+0x48>)
    8468:	7809      	ldrb	r1, [r1, #0]
    846a:	fa02 f101 	lsl.w	r1, r2, r1
				  BIT(radio_address_timer_stop) |
    846e:	430b      	orrs	r3, r1
    8470:	4908      	ldr	r1, [pc, #32]	; (8494 <esb_ppi_disable_all+0x4c>)
    8472:	7809      	ldrb	r1, [r1, #0]
    8474:	408a      	lsls	r2, r1
    8476:	4313      	orrs	r3, r2
    p_reg->CHENCLR = mask;
    8478:	4a07      	ldr	r2, [pc, #28]	; (8498 <esb_ppi_disable_all+0x50>)
	uint32_t channels_mask = (BIT(egu_ramp_up) |
    847a:	f043 0301 	orr.w	r3, r3, #1
    847e:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
				  BIT(radio_end_timer_start) |
				  (IS_ENABLED(CONFIG_ESB_NEVER_DISABLE_TX) ?
					BIT(timer_compare1_radio_txen) : 0));

	nrf_ppi_channels_disable(NRF_PPI, channels_mask);
}
    8482:	4770      	bx	lr
    8484:	20001fd3 	.word	0x20001fd3
    8488:	20001fd5 	.word	0x20001fd5
    848c:	20001fd1 	.word	0x20001fd1
    8490:	20001fd2 	.word	0x20001fd2
    8494:	20001fd6 	.word	0x20001fd6
    8498:	4001f000 	.word	0x4001f000

0000849c <esb_ppi_deinit>:

void esb_ppi_deinit(void)
{
    849c:	b538      	push	{r3, r4, r5, lr}
	nrfx_err_t err;

	err = nrfx_ppi_channel_free(egu_ramp_up);
    849e:	4b18      	ldr	r3, [pc, #96]	; (8500 <esb_ppi_deinit+0x64>)
    84a0:	7818      	ldrb	r0, [r3, #0]
    84a2:	f001 fa8f 	bl	99c4 <nrfx_ppi_channel_free>
	if (err != NRFX_SUCCESS) {
    84a6:	4b17      	ldr	r3, [pc, #92]	; (8504 <esb_ppi_deinit+0x68>)
    84a8:	4298      	cmp	r0, r3
	err = nrfx_ppi_channel_free(egu_ramp_up);
    84aa:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    84ac:	d127      	bne.n	84fe <esb_ppi_deinit+0x62>
		goto error;
	}

	err = nrfx_ppi_channel_free(disabled_egu);
    84ae:	4b16      	ldr	r3, [pc, #88]	; (8508 <esb_ppi_deinit+0x6c>)
    84b0:	7818      	ldrb	r0, [r3, #0]
    84b2:	f001 fa87 	bl	99c4 <nrfx_ppi_channel_free>
	if (err != NRFX_SUCCESS) {
    84b6:	42a0      	cmp	r0, r4
	err = nrfx_ppi_channel_free(disabled_egu);
    84b8:	4605      	mov	r5, r0
	if (err != NRFX_SUCCESS) {
    84ba:	d120      	bne.n	84fe <esb_ppi_deinit+0x62>
		goto error;
	}

	err = nrfx_ppi_channel_free(egu_timer_start);
    84bc:	4b13      	ldr	r3, [pc, #76]	; (850c <esb_ppi_deinit+0x70>)
    84be:	7818      	ldrb	r0, [r3, #0]
    84c0:	f001 fa80 	bl	99c4 <nrfx_ppi_channel_free>
	if (err != NRFX_SUCCESS) {
    84c4:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_free(egu_timer_start);
    84c6:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    84c8:	d119      	bne.n	84fe <esb_ppi_deinit+0x62>
		goto error;
	}

	err = nrfx_ppi_channel_free(radio_address_timer_stop);
    84ca:	4b11      	ldr	r3, [pc, #68]	; (8510 <esb_ppi_deinit+0x74>)
    84cc:	7818      	ldrb	r0, [r3, #0]
    84ce:	f001 fa79 	bl	99c4 <nrfx_ppi_channel_free>
	if (err != NRFX_SUCCESS) {
    84d2:	42a0      	cmp	r0, r4
	err = nrfx_ppi_channel_free(radio_address_timer_stop);
    84d4:	4605      	mov	r5, r0
	if (err != NRFX_SUCCESS) {
    84d6:	d112      	bne.n	84fe <esb_ppi_deinit+0x62>
		goto error;
	}

	err = nrfx_ppi_channel_free(timer_compare0_radio_disable);
    84d8:	4b0e      	ldr	r3, [pc, #56]	; (8514 <esb_ppi_deinit+0x78>)
    84da:	7818      	ldrb	r0, [r3, #0]
    84dc:	f001 fa72 	bl	99c4 <nrfx_ppi_channel_free>
	if (err != NRFX_SUCCESS) {
    84e0:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_free(timer_compare0_radio_disable);
    84e2:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    84e4:	d10b      	bne.n	84fe <esb_ppi_deinit+0x62>
		goto error;
	}

	err = nrfx_ppi_channel_free(timer_compare1_radio_txen);
    84e6:	4b0c      	ldr	r3, [pc, #48]	; (8518 <esb_ppi_deinit+0x7c>)
    84e8:	7818      	ldrb	r0, [r3, #0]
    84ea:	f001 fa6b 	bl	99c4 <nrfx_ppi_channel_free>
	if (err != NRFX_SUCCESS) {
    84ee:	42a0      	cmp	r0, r4
    84f0:	d105      	bne.n	84fe <esb_ppi_deinit+0x62>
		if (err != NRFX_SUCCESS) {
			goto error;
		}
	}

	err = nrfx_ppi_group_free(ramp_up_ppi_group);
    84f2:	4b0a      	ldr	r3, [pc, #40]	; (851c <esb_ppi_deinit+0x80>)
    84f4:	7818      	ldrb	r0, [r3, #0]
	return;

/* Should not happen. */
error:
	__ASSERT(false, "Failed to free PPI resources");
}
    84f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	err = nrfx_ppi_group_free(ramp_up_ppi_group);
    84fa:	f001 ba7d 	b.w	99f8 <nrfx_ppi_group_free>
}
    84fe:	bd38      	pop	{r3, r4, r5, pc}
    8500:	20001fd3 	.word	0x20001fd3
    8504:	0bad0000 	.word	0x0bad0000
    8508:	20001fd1 	.word	0x20001fd1
    850c:	20001fd2 	.word	0x20001fd2
    8510:	20001fd6 	.word	0x20001fd6
    8514:	20001fd5 	.word	0x20001fd5
    8518:	20001fd4 	.word	0x20001fd4
    851c:	20001fd0 	.word	0x20001fd0

00008520 <irq_handler>:
	return err;
}

static void irq_handler(const struct device *gpiob, struct gpio_callback *cb,
			uint32_t pins)
{
    8520:	b510      	push	{r4, lr}
	int err;
	struct pmw3360_data *data = CONTAINER_OF(cb, struct pmw3360_data,
						 irq_gpio_cb);
	const struct device *dev = data->dev;
	const struct pmw3360_config *config = dev->config;
    8522:	f851 3c04 	ldr.w	r3, [r1, #-4]
{
    8526:	b086      	sub	sp, #24
    8528:	460c      	mov	r4, r1

	err = gpio_pin_interrupt_configure_dt(&config->irq_gpio,
    852a:	6858      	ldr	r0, [r3, #4]
    852c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    8530:	f005 faeb 	bl	db0a <gpio_pin_interrupt_configure_dt>
					      GPIO_INT_DISABLE);
	if (unlikely(err)) {
    8534:	b178      	cbz	r0, 8556 <irq_handler+0x36>
		LOG_ERR("Cannot disable IRQ");
    8536:	4b0b      	ldr	r3, [pc, #44]	; (8564 <irq_handler+0x44>)
    8538:	9305      	str	r3, [sp, #20]
    853a:	480b      	ldr	r0, [pc, #44]	; (8568 <irq_handler+0x48>)
    853c:	2302      	movs	r3, #2
    853e:	aa04      	add	r2, sp, #16
    8540:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8544:	9304      	str	r3, [sp, #16]
    8546:	f005 fb65 	bl	dc14 <z_log_msg_static_create.constprop.0>
		k_panic();
    854a:	4040      	eors	r0, r0
    854c:	f380 8811 	msr	BASEPRI, r0
    8550:	f04f 0004 	mov.w	r0, #4
    8554:	df02      	svc	2
	}

	k_work_submit(&data->trigger_handler_work);
    8556:	f104 0014 	add.w	r0, r4, #20
}
    855a:	b006      	add	sp, #24
    855c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	k_work_submit(&data->trigger_handler_work);
    8560:	f003 ba62 	b.w	ba28 <k_work_submit>
    8564:	0000fed6 	.word	0x0000fed6
    8568:	0000e900 	.word	0x0000e900

0000856c <pmw3360_async_init>:

	return err;
}

static void pmw3360_async_init(struct k_work *work)
{
    856c:	b570      	push	{r4, r5, r6, lr}
						 init_work);
	const struct device *dev = data->dev;

	LOG_DBG("PMW3360 async init step %d", data->async_init_step);

	data->err = async_init_fn[data->async_init_step](dev);
    856e:	4b22      	ldr	r3, [pc, #136]	; (85f8 <pmw3360_async_init+0x8c>)
    8570:	f890 2030 	ldrb.w	r2, [r0, #48]	; 0x30
{
    8574:	4604      	mov	r4, r0
	data->err = async_init_fn[data->async_init_step](dev);
    8576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    857a:	f850 0c28 	ldr.w	r0, [r0, #-40]
{
    857e:	b086      	sub	sp, #24
	data->err = async_init_fn[data->async_init_step](dev);
    8580:	4798      	blx	r3
    8582:	4601      	mov	r1, r0
    8584:	6360      	str	r0, [r4, #52]	; 0x34
	if (data->err) {
    8586:	b158      	cbz	r0, 85a0 <pmw3360_async_init+0x34>
		LOG_ERR("PMW3360 initialization failed");
    8588:	4b1c      	ldr	r3, [pc, #112]	; (85fc <pmw3360_async_init+0x90>)
    858a:	9305      	str	r3, [sp, #20]
    858c:	2302      	movs	r3, #2
    858e:	9304      	str	r3, [sp, #16]
    8590:	aa04      	add	r2, sp, #16
    8592:	f44f 5182 	mov.w	r1, #4160	; 0x1040
	} else {
		data->async_init_step++;

		if (data->async_init_step == ASYNC_INIT_STEP_COUNT) {
			data->ready = true;
			LOG_INF("PMW3360 initialized");
    8596:	481a      	ldr	r0, [pc, #104]	; (8600 <pmw3360_async_init+0x94>)
    8598:	f005 fb3c 	bl	dc14 <z_log_msg_static_create.constprop.0>
			k_work_schedule(&data->init_work,
					K_MSEC(async_init_delay[
						data->async_init_step]));
		}
	}
}
    859c:	b006      	add	sp, #24
    859e:	bd70      	pop	{r4, r5, r6, pc}
		data->async_init_step++;
    85a0:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
    85a4:	3301      	adds	r3, #1
    85a6:	b2db      	uxtb	r3, r3
		if (data->async_init_step == ASYNC_INIT_STEP_COUNT) {
    85a8:	2b05      	cmp	r3, #5
		data->async_init_step++;
    85aa:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if (data->async_init_step == ASYNC_INIT_STEP_COUNT) {
    85ae:	d10a      	bne.n	85c6 <pmw3360_async_init+0x5a>
			data->ready = true;
    85b0:	2301      	movs	r3, #1
    85b2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			LOG_INF("PMW3360 initialized");
    85b6:	4b13      	ldr	r3, [pc, #76]	; (8604 <pmw3360_async_init+0x98>)
    85b8:	9305      	str	r3, [sp, #20]
    85ba:	2302      	movs	r3, #2
    85bc:	9304      	str	r3, [sp, #16]
    85be:	aa04      	add	r2, sp, #16
    85c0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    85c4:	e7e7      	b.n	8596 <pmw3360_async_init+0x2a>
					K_MSEC(async_init_delay[
    85c6:	4a10      	ldr	r2, [pc, #64]	; (8608 <pmw3360_async_init+0x9c>)
    85c8:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    85cc:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    85d0:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    85d4:	f240 30e7 	movw	r0, #999	; 0x3e7
    85d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    85dc:	2300      	movs	r3, #0
    85de:	fbc5 0106 	smlal	r0, r1, r5, r6
    85e2:	f7f7 fd7d 	bl	e0 <__aeabi_uldivmod>
    85e6:	4602      	mov	r2, r0
    85e8:	460b      	mov	r3, r1
			k_work_schedule(&data->init_work,
    85ea:	4620      	mov	r0, r4
}
    85ec:	b006      	add	sp, #24
    85ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&data->init_work,
    85f2:	f003 ba81 	b.w	baf8 <k_work_schedule>
    85f6:	bf00      	nop
    85f8:	0000ec14 	.word	0x0000ec14
    85fc:	0000fee9 	.word	0x0000fee9
    8600:	0000e900 	.word	0x0000e900
    8604:	0000ff07 	.word	0x0000ff07
    8608:	0000ec28 	.word	0x0000ec28

0000860c <trigger_handler>:
{
    860c:	b570      	push	{r4, r5, r6, lr}
    860e:	4604      	mov	r4, r0
	const struct device *dev = data->dev;
    8610:	f850 0c18 	ldr.w	r0, [r0, #-24]
{
    8614:	b088      	sub	sp, #32
	const struct pmw3360_config *config = dev->config;
    8616:	6846      	ldr	r6, [r0, #4]
	__asm__ volatile(
    8618:	f04f 0340 	mov.w	r3, #64	; 0x40
    861c:	f3ef 8211 	mrs	r2, BASEPRI
    8620:	f383 8812 	msr	BASEPRI_MAX, r3
    8624:	f3bf 8f6f 	isb	sy
	handler = data->data_ready_handler;
    8628:	f854 3c04 	ldr.w	r3, [r4, #-4]
	__asm__ volatile(
    862c:	f382 8811 	msr	BASEPRI, r2
    8630:	f3bf 8f6f 	isb	sy
	if (!handler) {
    8634:	b193      	cbz	r3, 865c <trigger_handler+0x50>
	struct sensor_trigger trig = {
    8636:	4a18      	ldr	r2, [pc, #96]	; (8698 <trigger_handler+0x8c>)
    8638:	9201      	str	r2, [sp, #4]
	handler(dev, &trig);
    863a:	a901      	add	r1, sp, #4
    863c:	4798      	blx	r3
	__asm__ volatile(
    863e:	f04f 0340 	mov.w	r3, #64	; 0x40
    8642:	f3ef 8511 	mrs	r5, BASEPRI
    8646:	f383 8812 	msr	BASEPRI_MAX, r3
    864a:	f3bf 8f6f 	isb	sy
	if (data->data_ready_handler) {
    864e:	f854 3c04 	ldr.w	r3, [r4, #-4]
    8652:	b92b      	cbnz	r3, 8660 <trigger_handler+0x54>
	__asm__ volatile(
    8654:	f385 8811 	msr	BASEPRI, r5
    8658:	f3bf 8f6f 	isb	sy
}
    865c:	b008      	add	sp, #32
    865e:	bd70      	pop	{r4, r5, r6, pc}
		err = gpio_pin_interrupt_configure_dt(&config->irq_gpio,
    8660:	f04f 6198 	mov.w	r1, #79691776	; 0x4c00000
    8664:	4630      	mov	r0, r6
    8666:	f005 fa50 	bl	db0a <gpio_pin_interrupt_configure_dt>
    866a:	f385 8811 	msr	BASEPRI, r5
    866e:	f3bf 8f6f 	isb	sy
	if (unlikely(err)) {
    8672:	2800      	cmp	r0, #0
    8674:	d0f2      	beq.n	865c <trigger_handler+0x50>
		LOG_ERR("Cannot re-enable IRQ");
    8676:	4b09      	ldr	r3, [pc, #36]	; (869c <trigger_handler+0x90>)
    8678:	9307      	str	r3, [sp, #28]
    867a:	4809      	ldr	r0, [pc, #36]	; (86a0 <trigger_handler+0x94>)
    867c:	2302      	movs	r3, #2
    867e:	aa06      	add	r2, sp, #24
    8680:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8684:	9306      	str	r3, [sp, #24]
    8686:	f005 fac5 	bl	dc14 <z_log_msg_static_create.constprop.0>
		k_panic();
    868a:	4040      	eors	r0, r0
    868c:	f380 8811 	msr	BASEPRI, r0
    8690:	f04f 0004 	mov.w	r0, #4
    8694:	df02      	svc	2
    8696:	e7e1      	b.n	865c <trigger_handler+0x50>
    8698:	00390001 	.word	0x00390001
    869c:	0000ff1b 	.word	0x0000ff1b
    86a0:	0000e900 	.word	0x0000e900

000086a4 <spi_cs_ctrl.isra.0>:
static int spi_cs_ctrl(const struct device *dev, bool enable)
    86a4:	b530      	push	{r4, r5, lr}
    86a6:	4604      	mov	r4, r0
    86a8:	b087      	sub	sp, #28
	if (!enable) {
    86aa:	460d      	mov	r5, r1
    86ac:	b911      	cbnz	r1, 86b4 <spi_cs_ctrl.isra.0+0x10>
		k_busy_wait(T_NCS_SCLK);
    86ae:	2001      	movs	r0, #1
    86b0:	f005 faae 	bl	dc10 <k_busy_wait>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    86b4:	7f23      	ldrb	r3, [r4, #28]
	return gpio_pin_set(spec->port, spec->pin, value);
    86b6:	69a0      	ldr	r0, [r4, #24]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    86b8:	2101      	movs	r1, #1
    86ba:	4099      	lsls	r1, r3
    86bc:	6903      	ldr	r3, [r0, #16]
    86be:	681b      	ldr	r3, [r3, #0]
    86c0:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    86c2:	bf14      	ite	ne
    86c4:	f085 0301 	eorne.w	r3, r5, #1
    86c8:	462b      	moveq	r3, r5
	if (value != 0)	{
    86ca:	b1ab      	cbz	r3, 86f8 <spi_cs_ctrl.isra.0+0x54>
	return api->port_set_bits_raw(port, pins);
    86cc:	6883      	ldr	r3, [r0, #8]
    86ce:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    86d0:	4798      	blx	r3
    86d2:	4604      	mov	r4, r0
	if (err) {
    86d4:	b148      	cbz	r0, 86ea <spi_cs_ctrl.isra.0+0x46>
		LOG_ERR("SPI CS ctrl failed");
    86d6:	4b0a      	ldr	r3, [pc, #40]	; (8700 <spi_cs_ctrl.isra.0+0x5c>)
    86d8:	9305      	str	r3, [sp, #20]
    86da:	480a      	ldr	r0, [pc, #40]	; (8704 <spi_cs_ctrl.isra.0+0x60>)
    86dc:	2302      	movs	r3, #2
    86de:	aa04      	add	r2, sp, #16
    86e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    86e4:	9304      	str	r3, [sp, #16]
    86e6:	f005 fa95 	bl	dc14 <z_log_msg_static_create.constprop.0>
	if (enable) {
    86ea:	b115      	cbz	r5, 86f2 <spi_cs_ctrl.isra.0+0x4e>
		k_busy_wait(T_NCS_SCLK);
    86ec:	2001      	movs	r0, #1
    86ee:	f005 fa8f 	bl	dc10 <k_busy_wait>
}
    86f2:	4620      	mov	r0, r4
    86f4:	b007      	add	sp, #28
    86f6:	bd30      	pop	{r4, r5, pc}
    86f8:	6883      	ldr	r3, [r0, #8]
    86fa:	691b      	ldr	r3, [r3, #16]
    86fc:	e7e8      	b.n	86d0 <spi_cs_ctrl.isra.0+0x2c>
    86fe:	bf00      	nop
    8700:	0000ff30 	.word	0x0000ff30
    8704:	0000e900 	.word	0x0000e900

00008708 <reg_write>:
{
    8708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct pmw3360_config *config = dev->config;
    870c:	f8d0 9004 	ldr.w	r9, [r0, #4]
	struct pmw3360_data *data = dev->data;
    8710:	6907      	ldr	r7, [r0, #16]
{
    8712:	b08d      	sub	sp, #52	; 0x34
    8714:	4605      	mov	r5, r0
    8716:	460e      	mov	r6, r1
	err = spi_cs_ctrl(dev, true);
    8718:	4648      	mov	r0, r9
    871a:	2101      	movs	r1, #1
{
    871c:	4690      	mov	r8, r2
	err = spi_cs_ctrl(dev, true);
    871e:	f7ff ffc1 	bl	86a4 <spi_cs_ctrl.isra.0>
	if (err) {
    8722:	4604      	mov	r4, r0
    8724:	b9e8      	cbnz	r0, 8762 <reg_write+0x5a>
	const struct spi_buf tx_buf = {
    8726:	ab01      	add	r3, sp, #4
	uint8_t buf[] = {
    8728:	f066 067f 	orn	r6, r6, #127	; 0x7f
	const struct spi_buf tx_buf = {
    872c:	9302      	str	r3, [sp, #8]
	const struct spi_buf_set tx = {
    872e:	ab02      	add	r3, sp, #8
	uint8_t buf[] = {
    8730:	f88d 6004 	strb.w	r6, [sp, #4]
	const struct spi_buf_set tx = {
    8734:	9304      	str	r3, [sp, #16]
	const struct spi_buf tx_buf = {
    8736:	2602      	movs	r6, #2
	const struct spi_buf_set tx = {
    8738:	2301      	movs	r3, #1
	err = spi_write_dt(&config->bus, &tx);
    873a:	a904      	add	r1, sp, #16
    873c:	f109 0008 	add.w	r0, r9, #8
	uint8_t buf[] = {
    8740:	f88d 8005 	strb.w	r8, [sp, #5]
	const struct spi_buf tx_buf = {
    8744:	9603      	str	r6, [sp, #12]
	const struct spi_buf_set tx = {
    8746:	9305      	str	r3, [sp, #20]
	err = spi_write_dt(&config->bus, &tx);
    8748:	f005 fa16 	bl	db78 <spi_write_dt>
	if (err) {
    874c:	4604      	mov	r4, r0
    874e:	b160      	cbz	r0, 876a <reg_write+0x62>
		LOG_ERR("Reg write failed on SPI write");
    8750:	4b0e      	ldr	r3, [pc, #56]	; (878c <reg_write+0x84>)
    8752:	480f      	ldr	r0, [pc, #60]	; (8790 <reg_write+0x88>)
    8754:	aa0a      	add	r2, sp, #40	; 0x28
    8756:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    875a:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
    875e:	f005 fa59 	bl	dc14 <z_log_msg_static_create.constprop.0>
}
    8762:	4620      	mov	r0, r4
    8764:	b00d      	add	sp, #52	; 0x34
    8766:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	k_busy_wait(T_SCLK_NCS_WR);
    876a:	2022      	movs	r0, #34	; 0x22
    876c:	f005 fa50 	bl	dc10 <k_busy_wait>
	err = spi_cs_ctrl(dev, false);
    8770:	4621      	mov	r1, r4
    8772:	6868      	ldr	r0, [r5, #4]
    8774:	f7ff ff96 	bl	86a4 <spi_cs_ctrl.isra.0>
	if (err) {
    8778:	4604      	mov	r4, r0
    877a:	2800      	cmp	r0, #0
    877c:	d1f1      	bne.n	8762 <reg_write+0x5a>
	k_busy_wait(T_SWX);
    877e:	2092      	movs	r0, #146	; 0x92
    8780:	f005 fa46 	bl	dc10 <k_busy_wait>
	data->last_read_burst = false;
    8784:	f887 4061 	strb.w	r4, [r7, #97]	; 0x61
	return 0;
    8788:	e7eb      	b.n	8762 <reg_write+0x5a>
    878a:	bf00      	nop
    878c:	0000ff43 	.word	0x0000ff43
    8790:	0000e900 	.word	0x0000e900

00008794 <update_cpi>:
{
    8794:	b590      	push	{r4, r7, lr}
	if ((cpi > PMW3360_MAX_CPI) || (cpi < PMW3360_MIN_CPI)) {
    8796:	f1a1 0264 	sub.w	r2, r1, #100	; 0x64
    879a:	f642 637c 	movw	r3, #11900	; 0x2e7c
{
    879e:	b087      	sub	sp, #28
	if ((cpi > PMW3360_MAX_CPI) || (cpi < PMW3360_MIN_CPI)) {
    87a0:	429a      	cmp	r2, r3
{
    87a2:	af00      	add	r7, sp, #0
	if ((cpi > PMW3360_MAX_CPI) || (cpi < PMW3360_MIN_CPI)) {
    87a4:	d914      	bls.n	87d0 <update_cpi+0x3c>
		LOG_ERR("CPI value %u out of range", cpi);
    87a6:	466c      	mov	r4, sp
    87a8:	b088      	sub	sp, #32
    87aa:	466a      	mov	r2, sp
    87ac:	4b14      	ldr	r3, [pc, #80]	; (8800 <update_cpi+0x6c>)
    87ae:	4815      	ldr	r0, [pc, #84]	; (8804 <update_cpi+0x70>)
    87b0:	e9c2 3105 	strd	r3, r1, [r2, #20]
    87b4:	2303      	movs	r3, #3
    87b6:	f842 3f10 	str.w	r3, [r2, #16]!
    87ba:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    87be:	f005 fa29 	bl	dc14 <z_log_msg_static_create.constprop.0>
    87c2:	46a5      	mov	sp, r4
		return -EINVAL;
    87c4:	f06f 0415 	mvn.w	r4, #21
}
    87c8:	4620      	mov	r0, r4
    87ca:	371c      	adds	r7, #28
    87cc:	46bd      	mov	sp, r7
    87ce:	bd90      	pop	{r4, r7, pc}
	uint8_t value = (cpi / 100) - 1;
    87d0:	2364      	movs	r3, #100	; 0x64
    87d2:	fbb1 f1f3 	udiv	r1, r1, r3
    87d6:	1e4a      	subs	r2, r1, #1
	int err = reg_write(dev, PMW3360_REG_CONFIG1, value);
    87d8:	b2d2      	uxtb	r2, r2
    87da:	210f      	movs	r1, #15
    87dc:	f7ff ff94 	bl	8708 <reg_write>
	if (err) {
    87e0:	4604      	mov	r4, r0
    87e2:	2800      	cmp	r0, #0
    87e4:	d0f0      	beq.n	87c8 <update_cpi+0x34>
		LOG_ERR("Failed to change CPI");
    87e6:	4b08      	ldr	r3, [pc, #32]	; (8808 <update_cpi+0x74>)
    87e8:	617b      	str	r3, [r7, #20]
    87ea:	4806      	ldr	r0, [pc, #24]	; (8804 <update_cpi+0x70>)
    87ec:	2302      	movs	r3, #2
    87ee:	f107 0210 	add.w	r2, r7, #16
    87f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    87f6:	613b      	str	r3, [r7, #16]
    87f8:	f005 fa0c 	bl	dc14 <z_log_msg_static_create.constprop.0>
    87fc:	e7e4      	b.n	87c8 <update_cpi+0x34>
    87fe:	bf00      	nop
    8800:	0000ff61 	.word	0x0000ff61
    8804:	0000e900 	.word	0x0000e900
    8808:	0000ff7b 	.word	0x0000ff7b

0000880c <update_downshift_time>:
{
    880c:	b590      	push	{r4, r7, lr}
	switch (reg_addr) {
    880e:	2917      	cmp	r1, #23
{
    8810:	b087      	sub	sp, #28
    8812:	af00      	add	r7, sp, #0
	switch (reg_addr) {
    8814:	d014      	beq.n	8840 <update_downshift_time+0x34>
    8816:	291a      	cmp	r1, #26
    8818:	d02c      	beq.n	8874 <update_downshift_time+0x68>
    881a:	2914      	cmp	r1, #20
    881c:	d02e      	beq.n	887c <update_downshift_time+0x70>
		LOG_ERR("Not supported");
    881e:	4b23      	ldr	r3, [pc, #140]	; (88ac <update_downshift_time+0xa0>)
    8820:	617b      	str	r3, [r7, #20]
    8822:	2302      	movs	r3, #2
    8824:	4822      	ldr	r0, [pc, #136]	; (88b0 <update_downshift_time+0xa4>)
    8826:	613b      	str	r3, [r7, #16]
    8828:	f107 0210 	add.w	r2, r7, #16
    882c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
    8830:	f06f 0485 	mvn.w	r4, #133	; 0x85
		LOG_ERR("Not supported");
    8834:	f005 f9ee 	bl	dc14 <z_log_msg_static_create.constprop.0>
}
    8838:	4620      	mov	r0, r4
    883a:	371c      	adds	r7, #28
    883c:	46bd      	mov	sp, r7
    883e:	bd90      	pop	{r4, r7, pc}
		maxtime = 81600;
    8840:	4c1c      	ldr	r4, [pc, #112]	; (88b4 <update_downshift_time+0xa8>)
		mintime = 320;
    8842:	f44f 73a0 	mov.w	r3, #320	; 0x140
	if ((time > maxtime) || (time < mintime)) {
    8846:	42a2      	cmp	r2, r4
    8848:	d801      	bhi.n	884e <update_downshift_time+0x42>
    884a:	429a      	cmp	r2, r3
    884c:	d21a      	bcs.n	8884 <update_downshift_time+0x78>
		LOG_WRN("Downshift time %u out of range", time);
    884e:	466c      	mov	r4, sp
    8850:	b088      	sub	sp, #32
    8852:	466b      	mov	r3, sp
    8854:	4918      	ldr	r1, [pc, #96]	; (88b8 <update_downshift_time+0xac>)
    8856:	4816      	ldr	r0, [pc, #88]	; (88b0 <update_downshift_time+0xa4>)
    8858:	e9c3 1205 	strd	r1, r2, [r3, #20]
    885c:	461a      	mov	r2, r3
    885e:	2303      	movs	r3, #3
    8860:	f842 3f10 	str.w	r3, [r2, #16]!
    8864:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    8868:	f005 f9d4 	bl	dc14 <z_log_msg_static_create.constprop.0>
    886c:	46a5      	mov	sp, r4
		return -EINVAL;
    886e:	f06f 0415 	mvn.w	r4, #21
    8872:	e7e1      	b.n	8838 <update_downshift_time+0x2c>
	switch (reg_addr) {
    8874:	4c11      	ldr	r4, [pc, #68]	; (88bc <update_downshift_time+0xb0>)
    8876:	f44f 6348 	mov.w	r3, #3200	; 0xc80
    887a:	e7e4      	b.n	8846 <update_downshift_time+0x3a>
		mintime = 10;
    887c:	230a      	movs	r3, #10
		maxtime = 2550;
    887e:	f640 14f6 	movw	r4, #2550	; 0x9f6
    8882:	e7e0      	b.n	8846 <update_downshift_time+0x3a>
	uint8_t value = time / mintime;
    8884:	fbb2 f2f3 	udiv	r2, r2, r3
	int err = reg_write(dev, reg_addr, value);
    8888:	b2d2      	uxtb	r2, r2
    888a:	f7ff ff3d 	bl	8708 <reg_write>
	if (err) {
    888e:	4604      	mov	r4, r0
    8890:	2800      	cmp	r0, #0
    8892:	d0d1      	beq.n	8838 <update_downshift_time+0x2c>
		LOG_ERR("Failed to change downshift time");
    8894:	4b0a      	ldr	r3, [pc, #40]	; (88c0 <update_downshift_time+0xb4>)
    8896:	617b      	str	r3, [r7, #20]
    8898:	2302      	movs	r3, #2
    889a:	4805      	ldr	r0, [pc, #20]	; (88b0 <update_downshift_time+0xa4>)
    889c:	613b      	str	r3, [r7, #16]
    889e:	f107 0210 	add.w	r2, r7, #16
    88a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    88a6:	f005 f9b5 	bl	dc14 <z_log_msg_static_create.constprop.0>
    88aa:	e7c5      	b.n	8838 <update_downshift_time+0x2c>
    88ac:	0000ff90 	.word	0x0000ff90
    88b0:	0000e900 	.word	0x0000e900
    88b4:	00013ec0 	.word	0x00013ec0
    88b8:	0000ff9e 	.word	0x0000ff9e
    88bc:	000c7380 	.word	0x000c7380
    88c0:	0000ffbd 	.word	0x0000ffbd

000088c4 <pmw3360_async_init_configure>:
{
    88c4:	b510      	push	{r4, lr}
	err = update_cpi(dev, CONFIG_PMW3360_CPI);
    88c6:	f44f 71c8 	mov.w	r1, #400	; 0x190
{
    88ca:	4604      	mov	r4, r0
	err = update_cpi(dev, CONFIG_PMW3360_CPI);
    88cc:	f7ff ff62 	bl	8794 <update_cpi>
	if (!err) {
    88d0:	b9a0      	cbnz	r0, 88fc <pmw3360_async_init_configure+0x38>
		err = update_downshift_time(dev,
    88d2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    88d6:	2114      	movs	r1, #20
    88d8:	4620      	mov	r0, r4
    88da:	f7ff ff97 	bl	880c <update_downshift_time>
	if (!err) {
    88de:	b968      	cbnz	r0, 88fc <pmw3360_async_init_configure+0x38>
		err = update_downshift_time(dev,
    88e0:	f242 4204 	movw	r2, #9220	; 0x2404
    88e4:	2117      	movs	r1, #23
    88e6:	4620      	mov	r0, r4
    88e8:	f7ff ff90 	bl	880c <update_downshift_time>
	if (!err) {
    88ec:	b930      	cbnz	r0, 88fc <pmw3360_async_init_configure+0x38>
		err = update_downshift_time(dev,
    88ee:	4620      	mov	r0, r4
    88f0:	4a03      	ldr	r2, [pc, #12]	; (8900 <pmw3360_async_init_configure+0x3c>)
}
    88f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = update_downshift_time(dev,
    88f6:	211a      	movs	r1, #26
    88f8:	f7ff bf88 	b.w	880c <update_downshift_time>
}
    88fc:	bd10      	pop	{r4, pc}
    88fe:	bf00      	nop
    8900:	000249f0 	.word	0x000249f0

00008904 <update_sample_time>:
{
    8904:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((sample_time > maxtime) || (sample_time < mintime)) {
    8908:	f103 38ff 	add.w	r8, r3, #4294967295
{
    890c:	b086      	sub	sp, #24
	if ((sample_time > maxtime) || (sample_time < mintime)) {
    890e:	f5b8 6f1b 	cmp.w	r8, #2480	; 0x9b0
{
    8912:	4605      	mov	r5, r0
    8914:	af00      	add	r7, sp, #0
    8916:	4616      	mov	r6, r2
	if ((sample_time > maxtime) || (sample_time < mintime)) {
    8918:	d315      	bcc.n	8946 <update_sample_time+0x42>
		LOG_WRN("Sample time %u out of range", sample_time);
    891a:	466c      	mov	r4, sp
    891c:	b088      	sub	sp, #32
    891e:	466a      	mov	r2, sp
    8920:	4916      	ldr	r1, [pc, #88]	; (897c <update_sample_time+0x78>)
    8922:	4817      	ldr	r0, [pc, #92]	; (8980 <update_sample_time+0x7c>)
    8924:	e9c2 1305 	strd	r1, r3, [r2, #20]
    8928:	2303      	movs	r3, #3
    892a:	f842 3f10 	str.w	r3, [r2, #16]!
    892e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    8932:	f005 f96f 	bl	dc14 <z_log_msg_static_create.constprop.0>
    8936:	46a5      	mov	sp, r4
		return -EINVAL;
    8938:	f06f 0415 	mvn.w	r4, #21
}
    893c:	4620      	mov	r0, r4
    893e:	3718      	adds	r7, #24
    8940:	46bd      	mov	sp, r7
    8942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	int err = reg_write(dev, reg_addr_lower, buf[0]);
    8946:	fa5f f288 	uxtb.w	r2, r8
    894a:	f7ff fedd 	bl	8708 <reg_write>
	if (!err) {
    894e:	4604      	mov	r4, r0
    8950:	b938      	cbnz	r0, 8962 <update_sample_time+0x5e>
		err = reg_write(dev, reg_addr_upper, buf[1]);
    8952:	f3c8 2207 	ubfx	r2, r8, #8, #8
    8956:	4631      	mov	r1, r6
    8958:	4628      	mov	r0, r5
    895a:	f7ff fed5 	bl	8708 <reg_write>
    895e:	4604      	mov	r4, r0
    8960:	e7ec      	b.n	893c <update_sample_time+0x38>
		LOG_ERR("Failed to change sample time");
    8962:	4b08      	ldr	r3, [pc, #32]	; (8984 <update_sample_time+0x80>)
    8964:	617b      	str	r3, [r7, #20]
    8966:	4806      	ldr	r0, [pc, #24]	; (8980 <update_sample_time+0x7c>)
    8968:	2302      	movs	r3, #2
    896a:	f107 0210 	add.w	r2, r7, #16
    896e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8972:	613b      	str	r3, [r7, #16]
    8974:	f005 f94e 	bl	dc14 <z_log_msg_static_create.constprop.0>
    8978:	e7e0      	b.n	893c <update_sample_time+0x38>
    897a:	bf00      	nop
    897c:	0000ffdd 	.word	0x0000ffdd
    8980:	0000e900 	.word	0x0000e900
    8984:	0000fff9 	.word	0x0000fff9

00008988 <pmw3360_async_init_fw_load_continue>:
{
    8988:	e92d 45f0 	stmdb	sp!, {r4, r5, r6, r7, r8, sl, lr}
    898c:	4605      	mov	r5, r0
    898e:	b08f      	sub	sp, #60	; 0x3c
	LOG_INF("Uploading optical sensor firmware...");
    8990:	4b38      	ldr	r3, [pc, #224]	; (8a74 <pmw3360_async_init_fw_load_continue+0xec>)
    8992:	4839      	ldr	r0, [pc, #228]	; (8a78 <pmw3360_async_init_fw_load_continue+0xf0>)
    8994:	930d      	str	r3, [sp, #52]	; 0x34
    8996:	aa0c      	add	r2, sp, #48	; 0x30
    8998:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    899c:	f04f 0802 	mov.w	r8, #2
    89a0:	f8cd 8030 	str.w	r8, [sp, #48]	; 0x30
    89a4:	f005 f936 	bl	dc14 <z_log_msg_static_create.constprop.0>
	err = reg_write(dev, PMW3360_REG_SROM_ENABLE, 0x18);
    89a8:	2218      	movs	r2, #24
    89aa:	2113      	movs	r1, #19
    89ac:	4628      	mov	r0, r5
    89ae:	f7ff feab 	bl	8708 <reg_write>
	if (err) {
    89b2:	4604      	mov	r4, r0
    89b4:	b148      	cbz	r0, 89ca <pmw3360_async_init_fw_load_continue+0x42>
		LOG_ERR("Cannot start SROM download");
    89b6:	4b31      	ldr	r3, [pc, #196]	; (8a7c <pmw3360_async_init_fw_load_continue+0xf4>)
    89b8:	e9cd 830c 	strd	r8, r3, [sp, #48]	; 0x30
		LOG_ERR("Cannot write firmware to sensor");
    89bc:	482e      	ldr	r0, [pc, #184]	; (8a78 <pmw3360_async_init_fw_load_continue+0xf0>)
    89be:	aa0c      	add	r2, sp, #48	; 0x30
    89c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    89c4:	f005 f926 	bl	dc14 <z_log_msg_static_create.constprop.0>
    89c8:	e02c      	b.n	8a24 <pmw3360_async_init_fw_load_continue+0x9c>
	err = burst_write(dev, PMW3360_REG_SROM_LOAD_BURST,
    89ca:	4b2d      	ldr	r3, [pc, #180]	; (8a80 <pmw3360_async_init_fw_load_continue+0xf8>)
	const struct pmw3360_config *config = dev->config;
    89cc:	686e      	ldr	r6, [r5, #4]
	err = burst_write(dev, PMW3360_REG_SROM_LOAD_BURST,
    89ce:	681b      	ldr	r3, [r3, #0]
    89d0:	9301      	str	r3, [sp, #4]
	uint8_t write_buf = reg | SPI_WRITE_BIT;
    89d2:	23e2      	movs	r3, #226	; 0xe2
    89d4:	f88d 300f 	strb.w	r3, [sp, #15]
	struct spi_buf tx_buf = {
    89d8:	f10d 030f 	add.w	r3, sp, #15
    89dc:	2101      	movs	r1, #1
    89de:	9304      	str	r3, [sp, #16]
	err = spi_cs_ctrl(dev, true);
    89e0:	4630      	mov	r0, r6
	const struct spi_buf_set tx = {
    89e2:	ab04      	add	r3, sp, #16
    89e4:	e9cd 3106 	strd	r3, r1, [sp, #24]
	struct pmw3360_data *data = dev->data;
    89e8:	692f      	ldr	r7, [r5, #16]
	struct spi_buf tx_buf = {
    89ea:	9105      	str	r1, [sp, #20]
	err = spi_cs_ctrl(dev, true);
    89ec:	f7ff fe5a 	bl	86a4 <spi_cs_ctrl.isra.0>
	if (err) {
    89f0:	4604      	mov	r4, r0
    89f2:	bb20      	cbnz	r0, 8a3e <pmw3360_async_init_fw_load_continue+0xb6>
	err = spi_write_dt(&config->bus, &tx);
    89f4:	3608      	adds	r6, #8
    89f6:	a906      	add	r1, sp, #24
    89f8:	4630      	mov	r0, r6
    89fa:	f005 f8bd 	bl	db78 <spi_write_dt>
	if (err) {
    89fe:	4604      	mov	r4, r0
    8a00:	b9a0      	cbnz	r0, 8a2c <pmw3360_async_init_fw_load_continue+0xa4>
    8a02:	f8df a080 	ldr.w	sl, [pc, #128]	; 8a84 <pmw3360_async_init_fw_load_continue+0xfc>
	for (size_t i = 0; i < size; i++) {
    8a06:	4680      	mov	r8, r0
    8a08:	9b01      	ldr	r3, [sp, #4]
    8a0a:	4543      	cmp	r3, r8
    8a0c:	d11c      	bne.n	8a48 <pmw3360_async_init_fw_load_continue+0xc0>
	err = spi_cs_ctrl(dev, false);
    8a0e:	6868      	ldr	r0, [r5, #4]
    8a10:	2100      	movs	r1, #0
    8a12:	f7ff fe47 	bl	86a4 <spi_cs_ctrl.isra.0>
	if (err) {
    8a16:	4604      	mov	r4, r0
    8a18:	b988      	cbnz	r0, 8a3e <pmw3360_async_init_fw_load_continue+0xb6>
	k_busy_wait(T_BEXIT);
    8a1a:	2001      	movs	r0, #1
    8a1c:	f005 f8f8 	bl	dc10 <k_busy_wait>
	data->last_read_burst = false;
    8a20:	f887 4061 	strb.w	r4, [r7, #97]	; 0x61
}
    8a24:	4620      	mov	r0, r4
    8a26:	b00f      	add	sp, #60	; 0x3c
    8a28:	e8bd 85f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, sl, pc}
		LOG_ERR("Burst write failed on SPI write");
    8a2c:	4b16      	ldr	r3, [pc, #88]	; (8a88 <pmw3360_async_init_fw_load_continue+0x100>)
    8a2e:	e9cd 830c 	strd	r8, r3, [sp, #48]	; 0x30
			LOG_ERR("Burst write failed on SPI write (data)");
    8a32:	4811      	ldr	r0, [pc, #68]	; (8a78 <pmw3360_async_init_fw_load_continue+0xf0>)
    8a34:	aa0c      	add	r2, sp, #48	; 0x30
    8a36:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8a3a:	f005 f8eb 	bl	dc14 <z_log_msg_static_create.constprop.0>
		LOG_ERR("Cannot write firmware to sensor");
    8a3e:	4b13      	ldr	r3, [pc, #76]	; (8a8c <pmw3360_async_init_fw_load_continue+0x104>)
    8a40:	930d      	str	r3, [sp, #52]	; 0x34
    8a42:	2302      	movs	r3, #2
    8a44:	930c      	str	r3, [sp, #48]	; 0x30
    8a46:	e7b9      	b.n	89bc <pmw3360_async_init_fw_load_continue+0x34>
		write_buf = buf[i];
    8a48:	f81a 3b01 	ldrb.w	r3, [sl], #1
    8a4c:	f88d 300f 	strb.w	r3, [sp, #15]
		err = spi_write_dt(&config->bus, &tx);
    8a50:	a906      	add	r1, sp, #24
    8a52:	4630      	mov	r0, r6
    8a54:	f005 f890 	bl	db78 <spi_write_dt>
		if (err) {
    8a58:	4604      	mov	r4, r0
    8a5a:	b120      	cbz	r0, 8a66 <pmw3360_async_init_fw_load_continue+0xde>
			LOG_ERR("Burst write failed on SPI write (data)");
    8a5c:	4b0c      	ldr	r3, [pc, #48]	; (8a90 <pmw3360_async_init_fw_load_continue+0x108>)
    8a5e:	930d      	str	r3, [sp, #52]	; 0x34
    8a60:	2302      	movs	r3, #2
    8a62:	930c      	str	r3, [sp, #48]	; 0x30
    8a64:	e7e5      	b.n	8a32 <pmw3360_async_init_fw_load_continue+0xaa>
		k_busy_wait(T_BRSEP);
    8a66:	200f      	movs	r0, #15
    8a68:	f005 f8d2 	bl	dc10 <k_busy_wait>
	for (size_t i = 0; i < size; i++) {
    8a6c:	f108 0801 	add.w	r8, r8, #1
    8a70:	e7ca      	b.n	8a08 <pmw3360_async_init_fw_load_continue+0x80>
    8a72:	bf00      	nop
    8a74:	00010016 	.word	0x00010016
    8a78:	0000e900 	.word	0x0000e900
    8a7c:	0001003b 	.word	0x0001003b
    8a80:	0000ec3c 	.word	0x0000ec3c
    8a84:	000102fd 	.word	0x000102fd
    8a88:	00010056 	.word	0x00010056
    8a8c:	0001009d 	.word	0x0001009d
    8a90:	00010076 	.word	0x00010076

00008a94 <reg_read>:
{
    8a94:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct pmw3360_config *config = dev->config;
    8a98:	6846      	ldr	r6, [r0, #4]
	struct pmw3360_data *data = dev->data;
    8a9a:	f8d0 9010 	ldr.w	r9, [r0, #16]
{
    8a9e:	b091      	sub	sp, #68	; 0x44
    8aa0:	4605      	mov	r5, r0
    8aa2:	f88d 1007 	strb.w	r1, [sp, #7]
	err = spi_cs_ctrl(dev, true);
    8aa6:	4630      	mov	r0, r6
    8aa8:	2101      	movs	r1, #1
{
    8aaa:	4690      	mov	r8, r2
	err = spi_cs_ctrl(dev, true);
    8aac:	f7ff fdfa 	bl	86a4 <spi_cs_ctrl.isra.0>
	if (err) {
    8ab0:	4604      	mov	r4, r0
    8ab2:	b9c0      	cbnz	r0, 8ae6 <reg_read+0x52>
	const struct spi_buf tx_buf = {
    8ab4:	f10d 0307 	add.w	r3, sp, #7
    8ab8:	9302      	str	r3, [sp, #8]
    8aba:	2701      	movs	r7, #1
	const struct spi_buf_set tx = {
    8abc:	ab02      	add	r3, sp, #8
	err = spi_write_dt(&config->bus, &tx);
    8abe:	a904      	add	r1, sp, #16
    8ac0:	f106 0008 	add.w	r0, r6, #8
	const struct spi_buf_set tx = {
    8ac4:	e9cd 3704 	strd	r3, r7, [sp, #16]
	const struct spi_buf tx_buf = {
    8ac8:	9703      	str	r7, [sp, #12]
	err = spi_write_dt(&config->bus, &tx);
    8aca:	f005 f855 	bl	db78 <spi_write_dt>
	if (err) {
    8ace:	4604      	mov	r4, r0
    8ad0:	b168      	cbz	r0, 8aee <reg_read+0x5a>
		LOG_ERR("Reg read failed on SPI write");
    8ad2:	4b17      	ldr	r3, [pc, #92]	; (8b30 <reg_read+0x9c>)
		LOG_ERR("Reg read failed on SPI read");
    8ad4:	930f      	str	r3, [sp, #60]	; 0x3c
    8ad6:	4817      	ldr	r0, [pc, #92]	; (8b34 <reg_read+0xa0>)
    8ad8:	2302      	movs	r3, #2
    8ada:	aa0e      	add	r2, sp, #56	; 0x38
    8adc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8ae0:	930e      	str	r3, [sp, #56]	; 0x38
    8ae2:	f005 f897 	bl	dc14 <z_log_msg_static_create.constprop.0>
}
    8ae6:	4620      	mov	r0, r4
    8ae8:	b011      	add	sp, #68	; 0x44
    8aea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	k_busy_wait(T_SRAD);
    8aee:	20a0      	movs	r0, #160	; 0xa0
    8af0:	f005 f88e 	bl	dc10 <k_busy_wait>
	const struct spi_buf_set rx = {
    8af4:	ab06      	add	r3, sp, #24
	struct spi_buf rx_buf = {
    8af6:	e9cd 8706 	strd	r8, r7, [sp, #24]
	const struct spi_buf_set rx = {
    8afa:	e9cd 3708 	strd	r3, r7, [sp, #32]
 * @return a value from spi_read().
 */
static inline int spi_read_dt(const struct spi_dt_spec *spec,
			      const struct spi_buf_set *rx_bufs)
{
	return spi_read(spec->bus, &spec->config, rx_bufs);
    8afe:	68b0      	ldr	r0, [r6, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    8b00:	6883      	ldr	r3, [r0, #8]
    8b02:	4622      	mov	r2, r4
    8b04:	681f      	ldr	r7, [r3, #0]
    8b06:	f106 010c 	add.w	r1, r6, #12
    8b0a:	ab08      	add	r3, sp, #32
    8b0c:	47b8      	blx	r7
	if (err) {
    8b0e:	4604      	mov	r4, r0
    8b10:	b108      	cbz	r0, 8b16 <reg_read+0x82>
		LOG_ERR("Reg read failed on SPI read");
    8b12:	4b09      	ldr	r3, [pc, #36]	; (8b38 <reg_read+0xa4>)
    8b14:	e7de      	b.n	8ad4 <reg_read+0x40>
	err = spi_cs_ctrl(dev, false);
    8b16:	4601      	mov	r1, r0
    8b18:	6868      	ldr	r0, [r5, #4]
    8b1a:	f7ff fdc3 	bl	86a4 <spi_cs_ctrl.isra.0>
	if (err) {
    8b1e:	4604      	mov	r4, r0
    8b20:	2800      	cmp	r0, #0
    8b22:	d1e0      	bne.n	8ae6 <reg_read+0x52>
	k_busy_wait(T_SRX);
    8b24:	2013      	movs	r0, #19
    8b26:	f005 f873 	bl	dc10 <k_busy_wait>
	data->last_read_burst = false;
    8b2a:	f889 4061 	strb.w	r4, [r9, #97]	; 0x61
	return 0;
    8b2e:	e7da      	b.n	8ae6 <reg_read+0x52>
    8b30:	000100bd 	.word	0x000100bd
    8b34:	0000e900 	.word	0x0000e900
    8b38:	000100da 	.word	0x000100da

00008b3c <pmw3360_async_init_fw_load_verify>:
{
    8b3c:	b530      	push	{r4, r5, lr}
    8b3e:	b089      	sub	sp, #36	; 0x24
	err = reg_read(dev, PMW3360_REG_SROM_ID, &fw_id);
    8b40:	f10d 0206 	add.w	r2, sp, #6
    8b44:	212a      	movs	r1, #42	; 0x2a
{
    8b46:	4605      	mov	r5, r0
	err = reg_read(dev, PMW3360_REG_SROM_ID, &fw_id);
    8b48:	f7ff ffa4 	bl	8a94 <reg_read>
	if (err) {
    8b4c:	4604      	mov	r4, r0
    8b4e:	b150      	cbz	r0, 8b66 <pmw3360_async_init_fw_load_verify+0x2a>
		LOG_ERR("Cannot obtain firmware id");
    8b50:	4b1b      	ldr	r3, [pc, #108]	; (8bc0 <pmw3360_async_init_fw_load_verify+0x84>)
		LOG_ERR("Cannot enable REST modes");
    8b52:	9307      	str	r3, [sp, #28]
    8b54:	481b      	ldr	r0, [pc, #108]	; (8bc4 <pmw3360_async_init_fw_load_verify+0x88>)
    8b56:	2302      	movs	r3, #2
    8b58:	aa06      	add	r2, sp, #24
    8b5a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8b5e:	9306      	str	r3, [sp, #24]
    8b60:	f005 f858 	bl	dc14 <z_log_msg_static_create.constprop.0>
    8b64:	e00f      	b.n	8b86 <pmw3360_async_init_fw_load_verify+0x4a>
	if (fw_id != PMW3360_FIRMWARE_ID) {
    8b66:	f89d 3006 	ldrb.w	r3, [sp, #6]
    8b6a:	2b04      	cmp	r3, #4
    8b6c:	d00e      	beq.n	8b8c <pmw3360_async_init_fw_load_verify+0x50>
		LOG_ERR("Chip is not running from SROM!");
    8b6e:	4b16      	ldr	r3, [pc, #88]	; (8bc8 <pmw3360_async_init_fw_load_verify+0x8c>)
		LOG_ERR("Invalid product id!");
    8b70:	9307      	str	r3, [sp, #28]
    8b72:	4814      	ldr	r0, [pc, #80]	; (8bc4 <pmw3360_async_init_fw_load_verify+0x88>)
    8b74:	2302      	movs	r3, #2
    8b76:	aa06      	add	r2, sp, #24
    8b78:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
    8b7c:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("Invalid product id!");
    8b80:	9306      	str	r3, [sp, #24]
    8b82:	f005 f847 	bl	dc14 <z_log_msg_static_create.constprop.0>
}
    8b86:	4620      	mov	r0, r4
    8b88:	b009      	add	sp, #36	; 0x24
    8b8a:	bd30      	pop	{r4, r5, pc}
	err = reg_read(dev, PMW3360_REG_PRODUCT_ID, &product_id);
    8b8c:	4601      	mov	r1, r0
    8b8e:	f10d 0207 	add.w	r2, sp, #7
    8b92:	4628      	mov	r0, r5
    8b94:	f7ff ff7e 	bl	8a94 <reg_read>
	if (err) {
    8b98:	4604      	mov	r4, r0
    8b9a:	b108      	cbz	r0, 8ba0 <pmw3360_async_init_fw_load_verify+0x64>
		LOG_ERR("Cannot obtain product id");
    8b9c:	4b0b      	ldr	r3, [pc, #44]	; (8bcc <pmw3360_async_init_fw_load_verify+0x90>)
    8b9e:	e7d8      	b.n	8b52 <pmw3360_async_init_fw_load_verify+0x16>
	if (product_id != PMW3360_PRODUCT_ID) {
    8ba0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    8ba4:	2b42      	cmp	r3, #66	; 0x42
    8ba6:	d001      	beq.n	8bac <pmw3360_async_init_fw_load_verify+0x70>
		LOG_ERR("Invalid product id!");
    8ba8:	4b09      	ldr	r3, [pc, #36]	; (8bd0 <pmw3360_async_init_fw_load_verify+0x94>)
    8baa:	e7e1      	b.n	8b70 <pmw3360_async_init_fw_load_verify+0x34>
	err = reg_write(dev, PMW3360_REG_CONFIG2, 0x20);
    8bac:	2220      	movs	r2, #32
    8bae:	2110      	movs	r1, #16
    8bb0:	4628      	mov	r0, r5
    8bb2:	f7ff fda9 	bl	8708 <reg_write>
	if (err) {
    8bb6:	4604      	mov	r4, r0
    8bb8:	2800      	cmp	r0, #0
    8bba:	d0e4      	beq.n	8b86 <pmw3360_async_init_fw_load_verify+0x4a>
		LOG_ERR("Cannot enable REST modes");
    8bbc:	4b05      	ldr	r3, [pc, #20]	; (8bd4 <pmw3360_async_init_fw_load_verify+0x98>)
    8bbe:	e7c8      	b.n	8b52 <pmw3360_async_init_fw_load_verify+0x16>
    8bc0:	000100f6 	.word	0x000100f6
    8bc4:	0000e900 	.word	0x0000e900
    8bc8:	00010110 	.word	0x00010110
    8bcc:	0001012f 	.word	0x0001012f
    8bd0:	00010148 	.word	0x00010148
    8bd4:	0001015c 	.word	0x0001015c

00008bd8 <pmw3360_async_init_fw_load_start>:
{
    8bd8:	b570      	push	{r4, r5, r6, lr}
    8bda:	4606      	mov	r6, r0
    8bdc:	b086      	sub	sp, #24
	for (uint8_t reg = 0x02; (reg <= 0x06) && !err; reg++) {
    8bde:	2502      	movs	r5, #2
		err = reg_read(dev, reg, buf);
    8be0:	4629      	mov	r1, r5
    8be2:	466a      	mov	r2, sp
    8be4:	4630      	mov	r0, r6
    8be6:	f7ff ff55 	bl	8a94 <reg_read>
	for (uint8_t reg = 0x02; (reg <= 0x06) && !err; reg++) {
    8bea:	3501      	adds	r5, #1
    8bec:	b2ed      	uxtb	r5, r5
    8bee:	2d07      	cmp	r5, #7
		err = reg_read(dev, reg, buf);
    8bf0:	4604      	mov	r4, r0
	for (uint8_t reg = 0x02; (reg <= 0x06) && !err; reg++) {
    8bf2:	d00e      	beq.n	8c12 <pmw3360_async_init_fw_load_start+0x3a>
    8bf4:	2800      	cmp	r0, #0
    8bf6:	d0f3      	beq.n	8be0 <pmw3360_async_init_fw_load_start+0x8>
		LOG_ERR("Cannot read from data registers");
    8bf8:	4b10      	ldr	r3, [pc, #64]	; (8c3c <pmw3360_async_init_fw_load_start+0x64>)
		LOG_ERR("Cannot initialize SROM");
    8bfa:	9305      	str	r3, [sp, #20]
    8bfc:	4810      	ldr	r0, [pc, #64]	; (8c40 <pmw3360_async_init_fw_load_start+0x68>)
    8bfe:	2302      	movs	r3, #2
    8c00:	aa04      	add	r2, sp, #16
    8c02:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8c06:	9304      	str	r3, [sp, #16]
    8c08:	f005 f804 	bl	dc14 <z_log_msg_static_create.constprop.0>
}
    8c0c:	4620      	mov	r0, r4
    8c0e:	b006      	add	sp, #24
    8c10:	bd70      	pop	{r4, r5, r6, pc}
	if (err) {
    8c12:	2800      	cmp	r0, #0
    8c14:	d1f0      	bne.n	8bf8 <pmw3360_async_init_fw_load_start+0x20>
	err = reg_write(dev, PMW3360_REG_CONFIG2, 0x00);
    8c16:	4602      	mov	r2, r0
    8c18:	2110      	movs	r1, #16
    8c1a:	4630      	mov	r0, r6
    8c1c:	f7ff fd74 	bl	8708 <reg_write>
	if (err) {
    8c20:	4604      	mov	r4, r0
    8c22:	b108      	cbz	r0, 8c28 <pmw3360_async_init_fw_load_start+0x50>
		LOG_ERR("Cannot disable REST mode");
    8c24:	4b07      	ldr	r3, [pc, #28]	; (8c44 <pmw3360_async_init_fw_load_start+0x6c>)
    8c26:	e7e8      	b.n	8bfa <pmw3360_async_init_fw_load_start+0x22>
	err = reg_write(dev, PMW3360_REG_SROM_ENABLE, 0x1D);
    8c28:	221d      	movs	r2, #29
    8c2a:	2113      	movs	r1, #19
    8c2c:	4630      	mov	r0, r6
    8c2e:	f7ff fd6b 	bl	8708 <reg_write>
	if (err) {
    8c32:	4604      	mov	r4, r0
    8c34:	2800      	cmp	r0, #0
    8c36:	d0e9      	beq.n	8c0c <pmw3360_async_init_fw_load_start+0x34>
		LOG_ERR("Cannot initialize SROM");
    8c38:	4b03      	ldr	r3, [pc, #12]	; (8c48 <pmw3360_async_init_fw_load_start+0x70>)
    8c3a:	e7de      	b.n	8bfa <pmw3360_async_init_fw_load_start+0x22>
    8c3c:	00010175 	.word	0x00010175
    8c40:	0000e900 	.word	0x0000e900
    8c44:	00010195 	.word	0x00010195
    8c48:	000101ae 	.word	0x000101ae

00008c4c <pmw3360_attr_set>:
}

static int pmw3360_attr_set(const struct device *dev, enum sensor_channel chan,
			    enum sensor_attribute attr,
			    const struct sensor_value *val)
{
    8c4c:	b570      	push	{r4, r5, r6, lr}
	struct pmw3360_data *data = dev->data;
	int err;

	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    8c4e:	2939      	cmp	r1, #57	; 0x39
{
    8c50:	4604      	mov	r4, r0
    8c52:	b088      	sub	sp, #32
	struct pmw3360_data *data = dev->data;
    8c54:	6900      	ldr	r0, [r0, #16]
	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    8c56:	d165      	bne.n	8d24 <pmw3360_attr_set+0xd8>
		return -ENOTSUP;
	}

	if (unlikely(!data->ready)) {
    8c58:	f890 1060 	ldrb.w	r1, [r0, #96]	; 0x60
    8c5c:	2900      	cmp	r1, #0
    8c5e:	d064      	beq.n	8d2a <pmw3360_attr_set+0xde>
		LOG_DBG("Device is not initialized yet");
		return -EBUSY;
	}

	switch ((uint32_t)attr) {
    8c60:	3a0f      	subs	r2, #15
    8c62:	2a07      	cmp	r2, #7
    8c64:	d854      	bhi.n	8d10 <pmw3360_attr_set+0xc4>
    8c66:	e8df f002 	tbb	[pc, r2]
    8c6a:	0b04      	.short	0x0b04
    8c6c:	423f3c34 	.word	0x423f3c34
    8c70:	4f4b      	.short	0x4f4b
	case PMW3360_ATTR_CPI:
		err = update_cpi(dev, PMW3360_SVALUE_TO_CPI(*val));
    8c72:	6819      	ldr	r1, [r3, #0]
    8c74:	4620      	mov	r0, r4
		LOG_ERR("Unknown attribute");
		return -ENOTSUP;
	}

	return err;
}
    8c76:	b008      	add	sp, #32
    8c78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = update_cpi(dev, PMW3360_SVALUE_TO_CPI(*val));
    8c7c:	f7ff bd8a 	b.w	8794 <update_cpi>
	int err = reg_read(dev, reg_addr, &value);
    8c80:	f10d 0207 	add.w	r2, sp, #7
    8c84:	2110      	movs	r1, #16
    8c86:	4620      	mov	r0, r4
					PMW3360_SVALUE_TO_BOOL(*val));
    8c88:	681e      	ldr	r6, [r3, #0]
	int err = reg_read(dev, reg_addr, &value);
    8c8a:	f7ff ff03 	bl	8a94 <reg_read>
	if (err) {
    8c8e:	4605      	mov	r5, r0
    8c90:	b160      	cbz	r0, 8cac <pmw3360_attr_set+0x60>
		LOG_ERR("Failed to read Config2 register");
    8c92:	4b27      	ldr	r3, [pc, #156]	; (8d30 <pmw3360_attr_set+0xe4>)
		LOG_ERR("Failed to set rest mode");
    8c94:	9307      	str	r3, [sp, #28]
    8c96:	4827      	ldr	r0, [pc, #156]	; (8d34 <pmw3360_attr_set+0xe8>)
    8c98:	2302      	movs	r3, #2
    8c9a:	aa06      	add	r2, sp, #24
    8c9c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8ca0:	9306      	str	r3, [sp, #24]
    8ca2:	f004 ffb7 	bl	dc14 <z_log_msg_static_create.constprop.0>
}
    8ca6:	4628      	mov	r0, r5
    8ca8:	b008      	add	sp, #32
    8caa:	bd70      	pop	{r4, r5, r6, pc}
	WRITE_BIT(value, PMW3360_REST_EN_POS, enable);
    8cac:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8cb0:	b166      	cbz	r6, 8ccc <pmw3360_attr_set+0x80>
    8cb2:	f042 0220 	orr.w	r2, r2, #32
	err = reg_write(dev, reg_addr, value);
    8cb6:	2110      	movs	r1, #16
    8cb8:	4620      	mov	r0, r4
	WRITE_BIT(value, PMW3360_REST_EN_POS, enable);
    8cba:	f88d 2007 	strb.w	r2, [sp, #7]
	err = reg_write(dev, reg_addr, value);
    8cbe:	f7ff fd23 	bl	8708 <reg_write>
	if (err) {
    8cc2:	4605      	mov	r5, r0
    8cc4:	2800      	cmp	r0, #0
    8cc6:	d0ee      	beq.n	8ca6 <pmw3360_attr_set+0x5a>
		LOG_ERR("Failed to set rest mode");
    8cc8:	4b1b      	ldr	r3, [pc, #108]	; (8d38 <pmw3360_attr_set+0xec>)
    8cca:	e7e3      	b.n	8c94 <pmw3360_attr_set+0x48>
	WRITE_BIT(value, PMW3360_REST_EN_POS, enable);
    8ccc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
    8cd0:	e7f1      	b.n	8cb6 <pmw3360_attr_set+0x6a>
		err = update_downshift_time(dev,
    8cd2:	681a      	ldr	r2, [r3, #0]
    8cd4:	2114      	movs	r1, #20
		err = update_downshift_time(dev,
    8cd6:	4620      	mov	r0, r4
}
    8cd8:	b008      	add	sp, #32
    8cda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = update_downshift_time(dev,
    8cde:	f7ff bd95 	b.w	880c <update_downshift_time>
    8ce2:	681a      	ldr	r2, [r3, #0]
    8ce4:	2117      	movs	r1, #23
    8ce6:	e7f6      	b.n	8cd6 <pmw3360_attr_set+0x8a>
		err = update_downshift_time(dev,
    8ce8:	681a      	ldr	r2, [r3, #0]
    8cea:	211a      	movs	r1, #26
    8cec:	e7f3      	b.n	8cd6 <pmw3360_attr_set+0x8a>
		err = update_sample_time(dev,
    8cee:	681b      	ldr	r3, [r3, #0]
    8cf0:	2216      	movs	r2, #22
    8cf2:	2115      	movs	r1, #21
		err = update_sample_time(dev,
    8cf4:	4620      	mov	r0, r4
}
    8cf6:	b008      	add	sp, #32
    8cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = update_sample_time(dev,
    8cfc:	f7ff be02 	b.w	8904 <update_sample_time>
		err = update_sample_time(dev,
    8d00:	681b      	ldr	r3, [r3, #0]
    8d02:	2219      	movs	r2, #25
    8d04:	2118      	movs	r1, #24
    8d06:	e7f5      	b.n	8cf4 <pmw3360_attr_set+0xa8>
		err = update_sample_time(dev,
    8d08:	681b      	ldr	r3, [r3, #0]
    8d0a:	221c      	movs	r2, #28
    8d0c:	211b      	movs	r1, #27
    8d0e:	e7f1      	b.n	8cf4 <pmw3360_attr_set+0xa8>
		LOG_ERR("Unknown attribute");
    8d10:	4b0a      	ldr	r3, [pc, #40]	; (8d3c <pmw3360_attr_set+0xf0>)
    8d12:	9307      	str	r3, [sp, #28]
    8d14:	4807      	ldr	r0, [pc, #28]	; (8d34 <pmw3360_attr_set+0xe8>)
    8d16:	2302      	movs	r3, #2
    8d18:	aa06      	add	r2, sp, #24
    8d1a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8d1e:	9306      	str	r3, [sp, #24]
    8d20:	f004 ff78 	bl	dc14 <z_log_msg_static_create.constprop.0>
		return -ENOTSUP;
    8d24:	f06f 0585 	mvn.w	r5, #133	; 0x85
    8d28:	e7bd      	b.n	8ca6 <pmw3360_attr_set+0x5a>
		return -EBUSY;
    8d2a:	f06f 050f 	mvn.w	r5, #15
    8d2e:	e7ba      	b.n	8ca6 <pmw3360_attr_set+0x5a>
    8d30:	000101c5 	.word	0x000101c5
    8d34:	0000e900 	.word	0x0000e900
    8d38:	000101e5 	.word	0x000101e5
    8d3c:	000101fd 	.word	0x000101fd

00008d40 <pmw3360_sample_fetch>:
{
    8d40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    8d44:	2939      	cmp	r1, #57	; 0x39
	struct pmw3360_data *data = dev->data;
    8d46:	6906      	ldr	r6, [r0, #16]
{
    8d48:	b093      	sub	sp, #76	; 0x4c
    8d4a:	4605      	mov	r5, r0
	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    8d4c:	d15e      	bne.n	8e0c <pmw3360_sample_fetch+0xcc>
	if (unlikely(!data->ready)) {
    8d4e:	f896 3060 	ldrb.w	r3, [r6, #96]	; 0x60
    8d52:	2b00      	cmp	r3, #0
    8d54:	d05d      	beq.n	8e12 <pmw3360_sample_fetch+0xd2>
	if (!data->last_read_burst) {
    8d56:	f896 2061 	ldrb.w	r2, [r6, #97]	; 0x61
	const struct pmw3360_config *config = dev->config;
    8d5a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	if (!data->last_read_burst) {
    8d5e:	b922      	cbnz	r2, 8d6a <pmw3360_sample_fetch+0x2a>
		err = reg_write(dev, PMW3360_REG_MOTION_BURST, 0x00);
    8d60:	2150      	movs	r1, #80	; 0x50
    8d62:	f7ff fcd1 	bl	8708 <reg_write>
		if (err) {
    8d66:	4604      	mov	r4, r0
    8d68:	bb00      	cbnz	r0, 8dac <pmw3360_sample_fetch+0x6c>
	err = spi_cs_ctrl(dev, true);
    8d6a:	6868      	ldr	r0, [r5, #4]
    8d6c:	2101      	movs	r1, #1
    8d6e:	f7ff fc99 	bl	86a4 <spi_cs_ctrl.isra.0>
	if (err) {
    8d72:	4604      	mov	r4, r0
    8d74:	b9d0      	cbnz	r0, 8dac <pmw3360_sample_fetch+0x6c>
	uint8_t reg_buf[] = {
    8d76:	2350      	movs	r3, #80	; 0x50
    8d78:	f88d 3004 	strb.w	r3, [sp, #4]
	const struct spi_buf tx_buf = {
    8d7c:	ab01      	add	r3, sp, #4
    8d7e:	9304      	str	r3, [sp, #16]
    8d80:	2701      	movs	r7, #1
	const struct spi_buf_set tx = {
    8d82:	ab04      	add	r3, sp, #16
	err = spi_write_dt(&config->bus, &tx);
    8d84:	a906      	add	r1, sp, #24
    8d86:	f108 0008 	add.w	r0, r8, #8
	const struct spi_buf_set tx = {
    8d8a:	e9cd 3706 	strd	r3, r7, [sp, #24]
	const struct spi_buf tx_buf = {
    8d8e:	9705      	str	r7, [sp, #20]
	err = spi_write_dt(&config->bus, &tx);
    8d90:	f004 fef2 	bl	db78 <spi_write_dt>
	if (err) {
    8d94:	4604      	mov	r4, r0
    8d96:	b168      	cbz	r0, 8db4 <pmw3360_sample_fetch+0x74>
		LOG_ERR("Motion burst failed on SPI write");
    8d98:	4b1f      	ldr	r3, [pc, #124]	; (8e18 <pmw3360_sample_fetch+0xd8>)
		LOG_ERR("Motion burst failed on SPI read");
    8d9a:	9311      	str	r3, [sp, #68]	; 0x44
    8d9c:	481f      	ldr	r0, [pc, #124]	; (8e1c <pmw3360_sample_fetch+0xdc>)
    8d9e:	2302      	movs	r3, #2
    8da0:	aa10      	add	r2, sp, #64	; 0x40
    8da2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8da6:	9310      	str	r3, [sp, #64]	; 0x40
    8da8:	f004 ff34 	bl	dc14 <z_log_msg_static_create.constprop.0>
}
    8dac:	4620      	mov	r0, r4
    8dae:	b013      	add	sp, #76	; 0x4c
    8db0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	k_busy_wait(T_SRAD_MOTBR);
    8db4:	2023      	movs	r0, #35	; 0x23
    8db6:	f004 ff2b 	bl	dc10 <k_busy_wait>
	const struct spi_buf rx_buf = {
    8dba:	ab02      	add	r3, sp, #8
    8dbc:	9308      	str	r3, [sp, #32]
    8dbe:	2306      	movs	r3, #6
    8dc0:	9309      	str	r3, [sp, #36]	; 0x24
	const struct spi_buf_set rx = {
    8dc2:	ab08      	add	r3, sp, #32
    8dc4:	e9cd 370a 	strd	r3, r7, [sp, #40]	; 0x28
	return spi_read(spec->bus, &spec->config, rx_bufs);
    8dc8:	f8d8 0008 	ldr.w	r0, [r8, #8]
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    8dcc:	6883      	ldr	r3, [r0, #8]
    8dce:	4622      	mov	r2, r4
    8dd0:	f8d3 9000 	ldr.w	r9, [r3]
    8dd4:	f108 010c 	add.w	r1, r8, #12
    8dd8:	ab0a      	add	r3, sp, #40	; 0x28
    8dda:	47c8      	blx	r9
	if (err) {
    8ddc:	4604      	mov	r4, r0
    8dde:	b108      	cbz	r0, 8de4 <pmw3360_sample_fetch+0xa4>
		LOG_ERR("Motion burst failed on SPI read");
    8de0:	4b0f      	ldr	r3, [pc, #60]	; (8e20 <pmw3360_sample_fetch+0xe0>)
    8de2:	e7da      	b.n	8d9a <pmw3360_sample_fetch+0x5a>
	err = spi_cs_ctrl(dev, false);
    8de4:	4601      	mov	r1, r0
    8de6:	6868      	ldr	r0, [r5, #4]
    8de8:	f7ff fc5c 	bl	86a4 <spi_cs_ctrl.isra.0>
	if (err) {
    8dec:	4604      	mov	r4, r0
    8dee:	2800      	cmp	r0, #0
    8df0:	d1dc      	bne.n	8dac <pmw3360_sample_fetch+0x6c>
	k_busy_wait(T_BEXIT);
    8df2:	4638      	mov	r0, r7
    8df4:	f004 ff0c 	bl	dc10 <k_busy_wait>
			data->x = -x;
    8df8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    8dfc:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
	data->last_read_burst = true;
    8e00:	f886 7061 	strb.w	r7, [r6, #97]	; 0x61
			data->x = -x;
    8e04:	425b      	negs	r3, r3
    8e06:	8233      	strh	r3, [r6, #16]
			data->y = y;
    8e08:	8272      	strh	r2, [r6, #18]
    8e0a:	e7cf      	b.n	8dac <pmw3360_sample_fetch+0x6c>
		return -ENOTSUP;
    8e0c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    8e10:	e7cc      	b.n	8dac <pmw3360_sample_fetch+0x6c>
		return -EBUSY;
    8e12:	f06f 040f 	mvn.w	r4, #15
    8e16:	e7c9      	b.n	8dac <pmw3360_sample_fetch+0x6c>
    8e18:	0001020f 	.word	0x0001020f
    8e1c:	0000e900 	.word	0x0000e900
    8e20:	00010230 	.word	0x00010230

00008e24 <pmw3360_init>:
{
    8e24:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct pmw3360_data *data = dev->data;
    8e26:	6906      	ldr	r6, [r0, #16]
	const struct pmw3360_config *config = dev->config;
    8e28:	6844      	ldr	r4, [r0, #4]
	k_work_init(&data->trigger_handler_work, trigger_handler);
    8e2a:	493f      	ldr	r1, [pc, #252]	; (8f28 <pmw3360_init+0x104>)
{
    8e2c:	4605      	mov	r5, r0
	data->dev = dev;
    8e2e:	4630      	mov	r0, r6
{
    8e30:	b087      	sub	sp, #28
	data->dev = dev;
    8e32:	f840 5b18 	str.w	r5, [r0], #24
	k_work_init(&data->trigger_handler_work, trigger_handler);
    8e36:	f005 fa0d 	bl	e254 <k_work_init>
	if (!device_is_ready(spec->bus)) {
    8e3a:	68a0      	ldr	r0, [r4, #8]
    8e3c:	f005 f8db 	bl	dff6 <z_device_is_ready>
    8e40:	b970      	cbnz	r0, 8e60 <pmw3360_init+0x3c>
		LOG_ERR("SPI device not ready");
    8e42:	4b3a      	ldr	r3, [pc, #232]	; (8f2c <pmw3360_init+0x108>)
		LOG_ERR("SPI CS device not ready");
    8e44:	9305      	str	r3, [sp, #20]
    8e46:	483a      	ldr	r0, [pc, #232]	; (8f30 <pmw3360_init+0x10c>)
    8e48:	2302      	movs	r3, #2
    8e4a:	aa04      	add	r2, sp, #16
    8e4c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
    8e50:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("SPI CS device not ready");
    8e54:	9304      	str	r3, [sp, #16]
    8e56:	f004 fedd 	bl	dc14 <z_log_msg_static_create.constprop.0>
}
    8e5a:	4620      	mov	r0, r4
    8e5c:	b007      	add	sp, #28
    8e5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (spec->config.cs &&
    8e60:	6963      	ldr	r3, [r4, #20]
    8e62:	b123      	cbz	r3, 8e6e <pmw3360_init+0x4a>
	    !device_is_ready(spec->config.cs->gpio.port)) {
    8e64:	6818      	ldr	r0, [r3, #0]
    8e66:	f005 f8c6 	bl	dff6 <z_device_is_ready>
	if (spec->config.cs &&
    8e6a:	2800      	cmp	r0, #0
    8e6c:	d0e9      	beq.n	8e42 <pmw3360_init+0x1e>
	if (!device_is_ready(config->cs_gpio.port)) {
    8e6e:	69a0      	ldr	r0, [r4, #24]
    8e70:	f005 f8c1 	bl	dff6 <z_device_is_ready>
    8e74:	b908      	cbnz	r0, 8e7a <pmw3360_init+0x56>
		LOG_ERR("SPI CS device not ready");
    8e76:	4b2f      	ldr	r3, [pc, #188]	; (8f34 <pmw3360_init+0x110>)
    8e78:	e7e4      	b.n	8e44 <pmw3360_init+0x20>
	err = gpio_pin_configure_dt(&config->cs_gpio, GPIO_OUTPUT_INACTIVE);
    8e7a:	f104 0018 	add.w	r0, r4, #24
    8e7e:	f44f 11b0 	mov.w	r1, #1441792	; 0x160000
    8e82:	f004 fe5a 	bl	db3a <gpio_pin_configure_dt>
	if (err) {
    8e86:	4604      	mov	r4, r0
    8e88:	b150      	cbz	r0, 8ea0 <pmw3360_init+0x7c>
		LOG_ERR("Cannot configure SPI CS GPIO");
    8e8a:	4b2b      	ldr	r3, [pc, #172]	; (8f38 <pmw3360_init+0x114>)
		LOG_ERR("Cannot add IRQ GPIO callback");
    8e8c:	9305      	str	r3, [sp, #20]
    8e8e:	4828      	ldr	r0, [pc, #160]	; (8f30 <pmw3360_init+0x10c>)
    8e90:	2302      	movs	r3, #2
    8e92:	aa04      	add	r2, sp, #16
    8e94:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8e98:	9304      	str	r3, [sp, #16]
    8e9a:	f004 febb 	bl	dc14 <z_log_msg_static_create.constprop.0>
	if (err) {
    8e9e:	e7dc      	b.n	8e5a <pmw3360_init+0x36>
	struct pmw3360_data *data = dev->data;
    8ea0:	692f      	ldr	r7, [r5, #16]
	const struct pmw3360_config *config = dev->config;
    8ea2:	686d      	ldr	r5, [r5, #4]
	if (!device_is_ready(config->irq_gpio.port)) {
    8ea4:	6828      	ldr	r0, [r5, #0]
    8ea6:	f005 f8a6 	bl	dff6 <z_device_is_ready>
    8eaa:	b908      	cbnz	r0, 8eb0 <pmw3360_init+0x8c>
		LOG_ERR("IRQ GPIO device not ready");
    8eac:	4b23      	ldr	r3, [pc, #140]	; (8f3c <pmw3360_init+0x118>)
    8eae:	e7c9      	b.n	8e44 <pmw3360_init+0x20>
	err = gpio_pin_configure_dt(&config->irq_gpio, GPIO_INPUT);
    8eb0:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    8eb4:	4628      	mov	r0, r5
    8eb6:	f004 fe40 	bl	db3a <gpio_pin_configure_dt>
	if (err) {
    8eba:	4604      	mov	r4, r0
    8ebc:	b108      	cbz	r0, 8ec2 <pmw3360_init+0x9e>
		LOG_ERR("Cannot configure IRQ GPIO");
    8ebe:	4b20      	ldr	r3, [pc, #128]	; (8f40 <pmw3360_init+0x11c>)
    8ec0:	e7e4      	b.n	8e8c <pmw3360_init+0x68>
			   BIT(config->irq_gpio.pin));
    8ec2:	792b      	ldrb	r3, [r5, #4]
	callback->handler = handler;
    8ec4:	481f      	ldr	r0, [pc, #124]	; (8f44 <pmw3360_init+0x120>)
    8ec6:	2201      	movs	r2, #1
    8ec8:	fa02 f303 	lsl.w	r3, r2, r3
	callback->pin_mask = pin_mask;
    8ecc:	e9c7 0302 	strd	r0, r3, [r7, #8]
	err = gpio_add_callback(config->irq_gpio.port, &data->irq_gpio_cb);
    8ed0:	6828      	ldr	r0, [r5, #0]
	if (api->manage_callback == NULL) {
    8ed2:	6883      	ldr	r3, [r0, #8]
    8ed4:	69db      	ldr	r3, [r3, #28]
	gpio_init_callback(&data->irq_gpio_cb, irq_handler,
    8ed6:	1d39      	adds	r1, r7, #4
    8ed8:	b30b      	cbz	r3, 8f1e <pmw3360_init+0xfa>
	return api->manage_callback(port, callback, true);
    8eda:	4798      	blx	r3
	if (err) {
    8edc:	4604      	mov	r4, r0
    8ede:	bb00      	cbnz	r0, 8f22 <pmw3360_init+0xfe>
	k_work_init_delayable(&data->init_work, pmw3360_async_init);
    8ee0:	f106 0728 	add.w	r7, r6, #40	; 0x28
    8ee4:	4638      	mov	r0, r7
    8ee6:	4918      	ldr	r1, [pc, #96]	; (8f48 <pmw3360_init+0x124>)
    8ee8:	f005 f9e2 	bl	e2b0 <k_work_init_delayable>
			K_MSEC(async_init_delay[data->async_init_step]));
    8eec:	f896 2058 	ldrb.w	r2, [r6, #88]	; 0x58
    8ef0:	4b16      	ldr	r3, [pc, #88]	; (8f4c <pmw3360_init+0x128>)
    8ef2:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
    8ef6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    8efa:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    8efe:	4621      	mov	r1, r4
    8f00:	f240 30e7 	movw	r0, #999	; 0x3e7
    8f04:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8f08:	2300      	movs	r3, #0
    8f0a:	fbc5 0106 	smlal	r0, r1, r5, r6
    8f0e:	f7f7 f8e7 	bl	e0 <__aeabi_uldivmod>
    8f12:	4602      	mov	r2, r0
    8f14:	460b      	mov	r3, r1
	k_work_schedule(&data->init_work,
    8f16:	4638      	mov	r0, r7
    8f18:	f002 fdee 	bl	baf8 <k_work_schedule>
	return err;
    8f1c:	e79d      	b.n	8e5a <pmw3360_init+0x36>
		return -ENOTSUP;
    8f1e:	f06f 0485 	mvn.w	r4, #133	; 0x85
		LOG_ERR("Cannot add IRQ GPIO callback");
    8f22:	4b0b      	ldr	r3, [pc, #44]	; (8f50 <pmw3360_init+0x12c>)
    8f24:	e7b2      	b.n	8e8c <pmw3360_init+0x68>
    8f26:	bf00      	nop
    8f28:	0000860d 	.word	0x0000860d
    8f2c:	00010250 	.word	0x00010250
    8f30:	0000e900 	.word	0x0000e900
    8f34:	00010265 	.word	0x00010265
    8f38:	0001027d 	.word	0x0001027d
    8f3c:	0001029a 	.word	0x0001029a
    8f40:	000102b4 	.word	0x000102b4
    8f44:	00008521 	.word	0x00008521
    8f48:	0000856d 	.word	0x0000856d
    8f4c:	0000ec28 	.word	0x0000ec28
    8f50:	000102ce 	.word	0x000102ce

00008f54 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    8f54:	4a02      	ldr	r2, [pc, #8]	; (8f60 <nvmc_wait+0xc>)
    8f56:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    8f5a:	2b00      	cmp	r3, #0
    8f5c:	d0fb      	beq.n	8f56 <nvmc_wait+0x2>
}
    8f5e:	4770      	bx	lr
    8f60:	4001e000 	.word	0x4001e000

00008f64 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    8f64:	b510      	push	{r4, lr}
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8f66:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)
            if (var1 == 0x10)
    8f6a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    8f6e:	2a10      	cmp	r2, #16
    8f70:	d155      	bne.n	901e <SystemInit+0xba>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    8f72:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    8f76:	2200      	movs	r2, #0
    8f78:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    8f7c:	f8c1 2110 	str.w	r2, [r1, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    8f80:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    8f84:	4a48      	ldr	r2, [pc, #288]	; (90a8 <SystemInit+0x144>)
    8f86:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
    8f8a:	f8c2 0520 	str.w	r0, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    8f8e:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
    8f92:	f8c2 0524 	str.w	r0, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    8f96:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    8f9a:	f8c2 0528 	str.w	r0, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    8f9e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
    8fa2:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    8fa6:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
    8faa:	f8c2 0530 	str.w	r0, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    8fae:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
    8fb2:	f8c2 0534 	str.w	r0, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    8fb6:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
    8fba:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    8fbe:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
    8fc2:	f8c2 0544 	str.w	r0, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    8fc6:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
    8fca:	f8c2 0548 	str.w	r0, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    8fce:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
    8fd2:	f8c2 054c 	str.w	r0, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    8fd6:	f8d3 042c 	ldr.w	r0, [r3, #1068]	; 0x42c
    8fda:	f8c2 0550 	str.w	r0, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    8fde:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
    8fe2:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    8fe6:	f8d3 0434 	ldr.w	r0, [r3, #1076]	; 0x434
    8fea:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    8fee:	f8d3 0438 	ldr.w	r0, [r3, #1080]	; 0x438
    8ff2:	f8c2 0564 	str.w	r0, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    8ff6:	f8d3 043c 	ldr.w	r0, [r3, #1084]	; 0x43c
    8ffa:	f8c2 0568 	str.w	r0, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    8ffe:	f8d3 0440 	ldr.w	r0, [r3, #1088]	; 0x440
    9002:	f8c2 056c 	str.w	r0, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    9006:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    900a:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    900e:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    9012:	07db      	lsls	r3, r3, #31
    9014:	d509      	bpl.n	902a <SystemInit+0xc6>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    9016:	f06f 0301 	mvn.w	r3, #1
    901a:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    901e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)
            if (var1 == 0x10)
    9022:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    9026:	2b10      	cmp	r3, #16
    9028:	d110      	bne.n	904c <SystemInit+0xe8>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    902a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    902e:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    9032:	2b03      	cmp	r3, #3
    9034:	d802      	bhi.n	903c <SystemInit+0xd8>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    9036:	4a1d      	ldr	r2, [pc, #116]	; (90ac <SystemInit+0x148>)
    9038:	5cd3      	ldrb	r3, [r2, r3]
    903a:	b13b      	cbz	r3, 904c <SystemInit+0xe8>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    903c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    9040:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    9044:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9048:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    904c:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    9050:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    9054:	2a00      	cmp	r2, #0
    9056:	db03      	blt.n	9060 <SystemInit+0xfc>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    9058:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    905c:	2b00      	cmp	r3, #0
    905e:	da22      	bge.n	90a6 <SystemInit+0x142>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    9060:	4913      	ldr	r1, [pc, #76]	; (90b0 <SystemInit+0x14c>)
    9062:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    9064:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    9068:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    906c:	2412      	movs	r4, #18
    nvmc_wait();
    906e:	f7ff ff71 	bl	8f54 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    9072:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    9076:	f7ff ff6d 	bl	8f54 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    907a:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    907e:	f7ff ff69 	bl	8f54 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    9082:	2300      	movs	r3, #0
    9084:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    9088:	f7ff ff64 	bl	8f54 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    908c:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    9090:	4908      	ldr	r1, [pc, #32]	; (90b4 <SystemInit+0x150>)
    9092:	4b09      	ldr	r3, [pc, #36]	; (90b8 <SystemInit+0x154>)
    9094:	68ca      	ldr	r2, [r1, #12]
    9096:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    909a:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    909c:	60cb      	str	r3, [r1, #12]
    909e:	f3bf 8f4f 	dsb	sy
    __NOP();
    90a2:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    90a4:	e7fd      	b.n	90a2 <SystemInit+0x13e>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    90a6:	bd10      	pop	{r4, pc}
    90a8:	4000c000 	.word	0x4000c000
    90ac:	000112fb 	.word	0x000112fb
    90b0:	4001e000 	.word	0x4001e000
    90b4:	e000ed00 	.word	0xe000ed00
    90b8:	05fa0004 	.word	0x05fa0004

000090bc <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    90bc:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    90be:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    90c0:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    90c2:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    90c6:	fab2 f382 	clz	r3, r2
    90ca:	f1c3 031f 	rsb	r3, r3, #31
    90ce:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    90d0:	fa05 f403 	lsl.w	r4, r5, r3
    90d4:	ea22 0404 	bic.w	r4, r2, r4
    90d8:	e850 6f00 	ldrex	r6, [r0]
    90dc:	4296      	cmp	r6, r2
    90de:	d104      	bne.n	90ea <nrfx_flag32_alloc+0x2e>
    90e0:	e840 4c00 	strex	ip, r4, [r0]
    90e4:	f1bc 0f00 	cmp.w	ip, #0
    90e8:	d1f6      	bne.n	90d8 <nrfx_flag32_alloc+0x1c>
    90ea:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    90ee:	d1e7      	bne.n	90c0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    90f0:	4801      	ldr	r0, [pc, #4]	; (90f8 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    90f2:	700b      	strb	r3, [r1, #0]
}
    90f4:	bd70      	pop	{r4, r5, r6, pc}
    90f6:	bf00      	nop
    90f8:	0bad0000 	.word	0x0bad0000

000090fc <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    90fc:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    90fe:	6803      	ldr	r3, [r0, #0]
    9100:	40cb      	lsrs	r3, r1
    9102:	07db      	lsls	r3, r3, #31
    9104:	d414      	bmi.n	9130 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    9106:	2301      	movs	r3, #1
    9108:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    910a:	6802      	ldr	r2, [r0, #0]
    910c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    9110:	ea43 0102 	orr.w	r1, r3, r2
    9114:	e850 4f00 	ldrex	r4, [r0]
    9118:	4294      	cmp	r4, r2
    911a:	d104      	bne.n	9126 <nrfx_flag32_free+0x2a>
    911c:	e840 1c00 	strex	ip, r1, [r0]
    9120:	f1bc 0f00 	cmp.w	ip, #0
    9124:	d1f6      	bne.n	9114 <nrfx_flag32_free+0x18>
    9126:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    912a:	d1ee      	bne.n	910a <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    912c:	4801      	ldr	r0, [pc, #4]	; (9134 <nrfx_flag32_free+0x38>)
}
    912e:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    9130:	4801      	ldr	r0, [pc, #4]	; (9138 <nrfx_flag32_free+0x3c>)
    9132:	e7fc      	b.n	912e <nrfx_flag32_free+0x32>
    9134:	0bad0000 	.word	0x0bad0000
    9138:	0bad0004 	.word	0x0bad0004

0000913c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    913c:	4b05      	ldr	r3, [pc, #20]	; (9154 <nrfx_clock_init+0x18>)
    913e:	791a      	ldrb	r2, [r3, #4]
    9140:	b92a      	cbnz	r2, 914e <nrfx_clock_init+0x12>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    }
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    9142:	715a      	strb	r2, [r3, #5]
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    9144:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    9146:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    9148:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    914a:	4803      	ldr	r0, [pc, #12]	; (9158 <nrfx_clock_init+0x1c>)
    914c:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    914e:	4803      	ldr	r0, [pc, #12]	; (915c <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    9150:	4770      	bx	lr
    9152:	bf00      	nop
    9154:	20001968 	.word	0x20001968
    9158:	0bad0000 	.word	0x0bad0000
    915c:	0bad000c 	.word	0x0bad000c

00009160 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    9160:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    9162:	2000      	movs	r0, #0
    9164:	f7fa ffa2 	bl	40ac <arch_irq_is_enabled>
    9168:	b908      	cbnz	r0, 916e <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    916a:	f7fa ff7d 	bl	4068 <arch_irq_enable>
#pragma GCC diagnostic pop
#endif

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    916e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9172:	2200      	movs	r2, #0
    9174:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    9178:	4b01      	ldr	r3, [pc, #4]	; (9180 <nrfx_clock_enable+0x20>)
    917a:	2201      	movs	r2, #1
    917c:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    917e:	bd08      	pop	{r3, pc}
    9180:	20001fd7 	.word	0x20001fd7

00009184 <nrfx_clock_calibration_start>:
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    9184:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9188:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    918c:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    9190:	03c8      	lsls	r0, r1, #15
    9192:	d516      	bpl.n	91c2 <nrfx_clock_calibration_start+0x3e>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &clk_src))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)
    9194:	07d1      	lsls	r1, r2, #31
    9196:	d514      	bpl.n	91c2 <nrfx_clock_calibration_start+0x3e>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    9198:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    919c:	03d2      	lsls	r2, r2, #15
    919e:	d510      	bpl.n	91c2 <nrfx_clock_calibration_start+0x3e>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_LFCLK, NULL))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (m_clock_cb.cal_state == CAL_STATE_IDLE)
    91a0:	490a      	ldr	r1, [pc, #40]	; (91cc <nrfx_clock_calibration_start+0x48>)
    91a2:	794a      	ldrb	r2, [r1, #5]
    91a4:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    91a8:	b96a      	cbnz	r2, 91c6 <nrfx_clock_calibration_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    91aa:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    91ae:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    nrfx_err_t err_code = NRFX_SUCCESS;
    91b2:	4807      	ldr	r0, [pc, #28]	; (91d0 <nrfx_clock_calibration_start+0x4c>)
    p_reg->INTENSET = mask;
    91b4:	2208      	movs	r2, #8
    91b6:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_CAL;
    91ba:	2201      	movs	r2, #1
    91bc:	714a      	strb	r2, [r1, #5]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    91be:	611a      	str	r2, [r3, #16]
}
    91c0:	4770      	bx	lr
        return NRFX_ERROR_INVALID_STATE;
    91c2:	4804      	ldr	r0, [pc, #16]	; (91d4 <nrfx_clock_calibration_start+0x50>)
    91c4:	4770      	bx	lr
#endif
        nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_CAL);
    }
    else
    {
        err_code = NRFX_ERROR_BUSY;
    91c6:	4804      	ldr	r0, [pc, #16]	; (91d8 <nrfx_clock_calibration_start+0x54>)

    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    91c8:	4770      	bx	lr
    91ca:	bf00      	nop
    91cc:	20001968 	.word	0x20001968
    91d0:	0bad0000 	.word	0x0bad0000
    91d4:	0bad0005 	.word	0x0bad0005
    91d8:	0bad000b 	.word	0x0bad000b

000091dc <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    91dc:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    91de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    91e2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    91e6:	b152      	cbz	r2, 91fe <nrfx_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    91e8:	2000      	movs	r0, #0
    91ea:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    91ee:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    91f2:	2201      	movs	r2, #1
    91f4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    91f8:	4b16      	ldr	r3, [pc, #88]	; (9254 <nrfx_clock_irq_handler+0x78>)
    91fa:	681b      	ldr	r3, [r3, #0]
    91fc:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    91fe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9202:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    9206:	b15a      	cbz	r2, 9220 <nrfx_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9208:	2200      	movs	r2, #0
    920a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    920e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENCLR = mask;
    9212:	2202      	movs	r2, #2
    9214:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    9218:	4b0e      	ldr	r3, [pc, #56]	; (9254 <nrfx_clock_irq_handler+0x78>)
    921a:	2001      	movs	r0, #1
    921c:	681b      	ldr	r3, [r3, #0]
    921e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    9220:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    9224:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CTTO);
    }
#endif // NRF_CLOCK_HAS_CALIBRATION_TIMER && NRFX_CHECK(NRFX_CLOCK_CONFIG_CT_ENABLED)

    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_DONE) &&
    9228:	b192      	cbz	r2, 9250 <nrfx_clock_irq_handler+0x74>
    return p_reg->INTENSET & mask;
    922a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    922e:	0712      	lsls	r2, r2, #28
    9230:	d50e      	bpl.n	9250 <nrfx_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9232:	2200      	movs	r2, #0
    9234:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    9238:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    p_reg->INTENCLR = mask;
    923c:	2108      	movs	r1, #8
    923e:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
        *(volatile uint32_t *)0x40000C34 = 0x00000000;
#endif
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_DONE");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    9242:	4b04      	ldr	r3, [pc, #16]	; (9254 <nrfx_clock_irq_handler+0x78>)
    9244:	715a      	strb	r2, [r3, #5]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    9246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    924a:	681b      	ldr	r3, [r3, #0]
    924c:	2003      	movs	r0, #3
    924e:	4718      	bx	r3
}
    9250:	bd10      	pop	{r4, pc}
    9252:	bf00      	nop
    9254:	20001968 	.word	0x20001968

00009258 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    9258:	4b03      	ldr	r3, [pc, #12]	; (9268 <pin_in_use_by_te+0x10>)
    925a:	3008      	adds	r0, #8
    925c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    9260:	f3c0 1040 	ubfx	r0, r0, #5, #1
    9264:	4770      	bx	lr
    9266:	bf00      	nop
    9268:	200000ec 	.word	0x200000ec

0000926c <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    926c:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    926e:	f100 0308 	add.w	r3, r0, #8
    9272:	4c0c      	ldr	r4, [pc, #48]	; (92a4 <call_handler+0x38>)
    9274:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    9278:	05da      	lsls	r2, r3, #23
{
    927a:	4605      	mov	r5, r0
    927c:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    927e:	d507      	bpl.n	9290 <call_handler+0x24>
    9280:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    9284:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    9288:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    928c:	6852      	ldr	r2, [r2, #4]
    928e:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    9290:	68a3      	ldr	r3, [r4, #8]
    9292:	b12b      	cbz	r3, 92a0 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    9294:	68e2      	ldr	r2, [r4, #12]
    9296:	4631      	mov	r1, r6
    9298:	4628      	mov	r0, r5
    }
}
    929a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    929e:	4718      	bx	r3
}
    92a0:	bd70      	pop	{r4, r5, r6, pc}
    92a2:	bf00      	nop
    92a4:	200000ec 	.word	0x200000ec

000092a8 <release_handler>:
{
    92a8:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    92aa:	4a12      	ldr	r2, [pc, #72]	; (92f4 <release_handler+0x4c>)
    92ac:	3008      	adds	r0, #8
    92ae:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    92b2:	05d9      	lsls	r1, r3, #23
    92b4:	d51b      	bpl.n	92ee <release_handler+0x46>
    92b6:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    92ba:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    92be:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    92c2:	f102 040e 	add.w	r4, r2, #14
    92c6:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    92c8:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    92cc:	f413 7f80 	tst.w	r3, #256	; 0x100
    92d0:	d003      	beq.n	92da <release_handler+0x32>
    92d2:	f3c3 2343 	ubfx	r3, r3, #9, #4
    92d6:	4299      	cmp	r1, r3
    92d8:	d009      	beq.n	92ee <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    92da:	3001      	adds	r0, #1
    92dc:	2820      	cmp	r0, #32
    92de:	d1f3      	bne.n	92c8 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    92e0:	2300      	movs	r3, #0
    92e2:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    92e6:	4804      	ldr	r0, [pc, #16]	; (92f8 <release_handler+0x50>)
}
    92e8:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    92ea:	f7ff bf07 	b.w	90fc <nrfx_flag32_free>
}
    92ee:	bc10      	pop	{r4}
    92f0:	4770      	bx	lr
    92f2:	bf00      	nop
    92f4:	200000ec 	.word	0x200000ec
    92f8:	20000140 	.word	0x20000140

000092fc <pin_handler_trigger_uninit>:
{
    92fc:	b538      	push	{r3, r4, r5, lr}
    92fe:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    9300:	f7ff ffaa 	bl	9258 <pin_in_use_by_te>
    9304:	4c09      	ldr	r4, [pc, #36]	; (932c <pin_handler_trigger_uninit+0x30>)
    9306:	f102 0508 	add.w	r5, r2, #8
    930a:	b140      	cbz	r0, 931e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    930c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    9310:	4907      	ldr	r1, [pc, #28]	; (9330 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    9312:	0b5b      	lsrs	r3, r3, #13
    9314:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    9318:	2000      	movs	r0, #0
    931a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    931e:	4610      	mov	r0, r2
    9320:	f7ff ffc2 	bl	92a8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    9324:	2300      	movs	r3, #0
    9326:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    932a:	bd38      	pop	{r3, r4, r5, pc}
    932c:	200000ec 	.word	0x200000ec
    9330:	40006000 	.word	0x40006000

00009334 <nrfx_gpiote_input_configure>:
{
    9334:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    9338:	4604      	mov	r4, r0
    933a:	461d      	mov	r5, r3
    if (p_input_config)
    933c:	b309      	cbz	r1, 9382 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    933e:	4f4f      	ldr	r7, [pc, #316]	; (947c <nrfx_gpiote_input_configure+0x148>)
    9340:	f100 0808 	add.w	r8, r0, #8
    9344:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    9348:	07b3      	lsls	r3, r6, #30
    934a:	d506      	bpl.n	935a <nrfx_gpiote_input_configure+0x26>
    934c:	f7ff ff84 	bl	9258 <pin_in_use_by_te>
    9350:	b118      	cbz	r0, 935a <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    9352:	484b      	ldr	r0, [pc, #300]	; (9480 <nrfx_gpiote_input_configure+0x14c>)
}
    9354:	b002      	add	sp, #8
    9356:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    935a:	f004 031f 	and.w	r3, r4, #31
    935e:	009b      	lsls	r3, r3, #2
    9360:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    9364:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9366:	f8d3 0700 	ldr.w	r0, [r3, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    936a:	f026 0602 	bic.w	r6, r6, #2
    cnf &= ~to_update;
    936e:	f020 000f 	bic.w	r0, r0, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    9372:	f046 0601 	orr.w	r6, r6, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9376:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
    937a:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    937e:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
    if (p_trigger_config)
    9382:	b19a      	cbz	r2, 93ac <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    9384:	4b3d      	ldr	r3, [pc, #244]	; (947c <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    9386:	7817      	ldrb	r7, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    9388:	6850      	ldr	r0, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    938a:	f104 0608 	add.w	r6, r4, #8
    938e:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    9392:	f011 0f02 	tst.w	r1, #2
    9396:	d00d      	beq.n	93b4 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    9398:	2800      	cmp	r0, #0
    939a:	d1da      	bne.n	9352 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    939c:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    93a0:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    93a4:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
    93a8:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
    93ac:	2d00      	cmp	r5, #0
    93ae:	d13b      	bne.n	9428 <nrfx_gpiote_input_configure+0xf4>
        err = NRFX_SUCCESS;
    93b0:	4834      	ldr	r0, [pc, #208]	; (9484 <nrfx_gpiote_input_configure+0x150>)
    93b2:	e7cf      	b.n	9354 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    93b4:	f021 0120 	bic.w	r1, r1, #32
    93b8:	04c9      	lsls	r1, r1, #19
    93ba:	0cc9      	lsrs	r1, r1, #19
    93bc:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    93c0:	2800      	cmp	r0, #0
    93c2:	d0eb      	beq.n	939c <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    93c4:	2f03      	cmp	r7, #3
    93c6:	d8c4      	bhi.n	9352 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    93c8:	6852      	ldr	r2, [r2, #4]
    93ca:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    93ce:	b92f      	cbnz	r7, 93dc <nrfx_gpiote_input_configure+0xa8>
    93d0:	4a2d      	ldr	r2, [pc, #180]	; (9488 <nrfx_gpiote_input_configure+0x154>)
    93d2:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
    93d6:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
#endif
}
    93da:	e7df      	b.n	939c <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    93dc:	ea4f 028c 	mov.w	r2, ip, lsl #2
    93e0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    93e4:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    93e8:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    93ec:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    93f0:	f020 0003 	bic.w	r0, r0, #3
    93f4:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    93f8:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    93fc:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    9400:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    9404:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9408:	0220      	lsls	r0, r4, #8
    940a:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    940e:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    9412:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    9416:	ea40 000e 	orr.w	r0, r0, lr
    941a:	f041 0120 	orr.w	r1, r1, #32
    941e:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    9422:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    9426:	e7b9      	b.n	939c <nrfx_gpiote_input_configure+0x68>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    9428:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    942c:	4620      	mov	r0, r4
    942e:	f7ff ff3b 	bl	92a8 <release_handler>
    if (!handler)
    9432:	2e00      	cmp	r6, #0
    9434:	d0bc      	beq.n	93b0 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    9436:	4d11      	ldr	r5, [pc, #68]	; (947c <nrfx_gpiote_input_configure+0x148>)
    9438:	e9d5 2300 	ldrd	r2, r3, [r5]
    943c:	4296      	cmp	r6, r2
    943e:	d101      	bne.n	9444 <nrfx_gpiote_input_configure+0x110>
    9440:	429f      	cmp	r7, r3
    9442:	d019      	beq.n	9478 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    9444:	4811      	ldr	r0, [pc, #68]	; (948c <nrfx_gpiote_input_configure+0x158>)
    9446:	f10d 0107 	add.w	r1, sp, #7
    944a:	f7ff fe37 	bl	90bc <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    944e:	4b0d      	ldr	r3, [pc, #52]	; (9484 <nrfx_gpiote_input_configure+0x150>)
    9450:	4298      	cmp	r0, r3
    9452:	f47f af7f 	bne.w	9354 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    9456:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    945a:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    945e:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    9462:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    9464:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    9466:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    946a:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    946e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    9472:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    9476:	e79b      	b.n	93b0 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    9478:	2200      	movs	r2, #0
    947a:	e7ee      	b.n	945a <nrfx_gpiote_input_configure+0x126>
    947c:	200000ec 	.word	0x200000ec
    9480:	0bad0004 	.word	0x0bad0004
    9484:	0bad0000 	.word	0x0bad0000
    9488:	40006000 	.word	0x40006000
    948c:	20000140 	.word	0x20000140

00009490 <nrfx_gpiote_output_configure>:
{
    9490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9492:	4604      	mov	r4, r0
    if (p_config)
    9494:	b389      	cbz	r1, 94fa <nrfx_gpiote_output_configure+0x6a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    9496:	4e3a      	ldr	r6, [pc, #232]	; (9580 <nrfx_gpiote_output_configure+0xf0>)
    9498:	f100 0708 	add.w	r7, r0, #8
    949c:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    94a0:	07ab      	lsls	r3, r5, #30
    94a2:	d404      	bmi.n	94ae <nrfx_gpiote_output_configure+0x1e>
    94a4:	f7ff fed8 	bl	9258 <pin_in_use_by_te>
    94a8:	b108      	cbz	r0, 94ae <nrfx_gpiote_output_configure+0x1e>
{
    94aa:	4836      	ldr	r0, [pc, #216]	; (9584 <nrfx_gpiote_output_configure+0xf4>)
}
    94ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    94ae:	f015 0f1c 	tst.w	r5, #28
    94b2:	784b      	ldrb	r3, [r1, #1]
    94b4:	d124      	bne.n	9500 <nrfx_gpiote_output_configure+0x70>
    *p_pin = pin_number & 0x1F;
    94b6:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    94ba:	f500 7ee0 	add.w	lr, r0, #448	; 0x1c0
    94be:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    94c2:	005b      	lsls	r3, r3, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    94c4:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    94c8:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    94cc:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    94ce:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    94d2:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    94d6:	f02c 0c07 	bic.w	ip, ip, #7
    94da:	ea43 030c 	orr.w	r3, r3, ip
    94de:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    94e2:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    94e6:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    94ea:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    94ee:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    94f2:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    94f6:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    94fa:	b922      	cbnz	r2, 9506 <nrfx_gpiote_output_configure+0x76>
    return NRFX_SUCCESS;
    94fc:	4822      	ldr	r0, [pc, #136]	; (9588 <nrfx_gpiote_output_configure+0xf8>)
    94fe:	e7d5      	b.n	94ac <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    9500:	2b01      	cmp	r3, #1
    9502:	d1d8      	bne.n	94b6 <nrfx_gpiote_output_configure+0x26>
    9504:	e7d1      	b.n	94aa <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    9506:	4e1e      	ldr	r6, [pc, #120]	; (9580 <nrfx_gpiote_output_configure+0xf0>)
    9508:	f104 0708 	add.w	r7, r4, #8
    950c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    9510:	0783      	lsls	r3, r0, #30
    9512:	d5ca      	bpl.n	94aa <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    9514:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    9518:	4661      	mov	r1, ip
    951a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    951c:	f020 0020 	bic.w	r0, r0, #32
    9520:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    9524:	04c0      	lsls	r0, r0, #19
    9526:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    952a:	0cc0      	lsrs	r0, r0, #19
    952c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    9530:	2300      	movs	r3, #0
    9532:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    9536:	7855      	ldrb	r5, [r2, #1]
    9538:	2d00      	cmp	r5, #0
    953a:	d0df      	beq.n	94fc <nrfx_gpiote_output_configure+0x6c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    953c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    9540:	7892      	ldrb	r2, [r2, #2]
    9542:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    9546:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    954a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    954e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    9552:	0223      	lsls	r3, r4, #8
    9554:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    9558:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    955a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    955e:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    9562:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    9564:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    9566:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    956a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    956e:	4313      	orrs	r3, r2
    9570:	f040 0020 	orr.w	r0, r0, #32
    9574:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    9578:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    957c:	e7be      	b.n	94fc <nrfx_gpiote_output_configure+0x6c>
    957e:	bf00      	nop
    9580:	200000ec 	.word	0x200000ec
    9584:	0bad0004 	.word	0x0bad0004
    9588:	0bad0000 	.word	0x0bad0000

0000958c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    958c:	4b01      	ldr	r3, [pc, #4]	; (9594 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    958e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    9592:	4770      	bx	lr
    9594:	200000ec 	.word	0x200000ec

00009598 <nrfx_gpiote_channel_get>:
{
    9598:	b508      	push	{r3, lr}
    959a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    959c:	f7ff fe5c 	bl	9258 <pin_in_use_by_te>
    95a0:	b138      	cbz	r0, 95b2 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    95a2:	4b05      	ldr	r3, [pc, #20]	; (95b8 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    95a4:	4805      	ldr	r0, [pc, #20]	; (95bc <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    95a6:	3208      	adds	r2, #8
    95a8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    95ac:	0b5b      	lsrs	r3, r3, #13
    95ae:	700b      	strb	r3, [r1, #0]
}
    95b0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    95b2:	4803      	ldr	r0, [pc, #12]	; (95c0 <nrfx_gpiote_channel_get+0x28>)
    95b4:	e7fc      	b.n	95b0 <nrfx_gpiote_channel_get+0x18>
    95b6:	bf00      	nop
    95b8:	200000ec 	.word	0x200000ec
    95bc:	0bad0000 	.word	0x0bad0000
    95c0:	0bad0004 	.word	0x0bad0004

000095c4 <nrfx_gpiote_init>:
{
    95c4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    95c6:	4c0f      	ldr	r4, [pc, #60]	; (9604 <nrfx_gpiote_init+0x40>)
    95c8:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    95cc:	b9bd      	cbnz	r5, 95fe <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    95ce:	2240      	movs	r2, #64	; 0x40
    95d0:	4629      	mov	r1, r5
    95d2:	f104 0010 	add.w	r0, r4, #16
    95d6:	f003 ffe6 	bl	d5a6 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    95da:	2006      	movs	r0, #6
    95dc:	f7fa fd44 	bl	4068 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    95e0:	4b09      	ldr	r3, [pc, #36]	; (9608 <nrfx_gpiote_init+0x44>)
    return err_code;
    95e2:	480a      	ldr	r0, [pc, #40]	; (960c <nrfx_gpiote_init+0x48>)
    95e4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    95e8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    95ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    95f0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    95f4:	2301      	movs	r3, #1
    95f6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    95fa:	6563      	str	r3, [r4, #84]	; 0x54
}
    95fc:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    95fe:	4804      	ldr	r0, [pc, #16]	; (9610 <nrfx_gpiote_init+0x4c>)
    9600:	e7fc      	b.n	95fc <nrfx_gpiote_init+0x38>
    9602:	bf00      	nop
    9604:	200000ec 	.word	0x200000ec
    9608:	40006000 	.word	0x40006000
    960c:	0bad0000 	.word	0x0bad0000
    9610:	0bad0005 	.word	0x0bad0005

00009614 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    9614:	4b03      	ldr	r3, [pc, #12]	; (9624 <nrfx_gpiote_is_init+0x10>)
    9616:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    961a:	3800      	subs	r0, #0
    961c:	bf18      	it	ne
    961e:	2001      	movne	r0, #1
    9620:	4770      	bx	lr
    9622:	bf00      	nop
    9624:	200000ec 	.word	0x200000ec

00009628 <nrfx_gpiote_channel_free>:
{
    9628:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    962a:	4801      	ldr	r0, [pc, #4]	; (9630 <nrfx_gpiote_channel_free+0x8>)
    962c:	f7ff bd66 	b.w	90fc <nrfx_flag32_free>
    9630:	2000013c 	.word	0x2000013c

00009634 <nrfx_gpiote_channel_alloc>:
{
    9634:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    9636:	4801      	ldr	r0, [pc, #4]	; (963c <nrfx_gpiote_channel_alloc+0x8>)
    9638:	f7ff bd40 	b.w	90bc <nrfx_flag32_alloc>
    963c:	2000013c 	.word	0x2000013c

00009640 <nrfx_gpiote_trigger_enable>:
{
    9640:	b510      	push	{r4, lr}
    9642:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    9644:	f7ff fe08 	bl	9258 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    9648:	f102 0408 	add.w	r4, r2, #8
    964c:	4b1c      	ldr	r3, [pc, #112]	; (96c0 <nrfx_gpiote_trigger_enable+0x80>)
    964e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    9652:	b1e0      	cbz	r0, 968e <nrfx_gpiote_trigger_enable+0x4e>
    9654:	f013 0402 	ands.w	r4, r3, #2
    9658:	d119      	bne.n	968e <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    965a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    965c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    965e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    9662:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    9666:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    966a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    966e:	6004      	str	r4, [r0, #0]
    9670:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    9672:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    9676:	f040 0001 	orr.w	r0, r0, #1
    967a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    967e:	b129      	cbz	r1, 968c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    9680:	2201      	movs	r2, #1
    9682:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    9686:	4a0f      	ldr	r2, [pc, #60]	; (96c4 <nrfx_gpiote_trigger_enable+0x84>)
    9688:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    968c:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    968e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    9692:	2b04      	cmp	r3, #4
    9694:	d010      	beq.n	96b8 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    9696:	2b05      	cmp	r3, #5
    9698:	d010      	beq.n	96bc <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    969a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    969e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    96a2:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    96a6:	40d9      	lsrs	r1, r3
    96a8:	f001 0101 	and.w	r1, r1, #1
    96ac:	3102      	adds	r1, #2
}
    96ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    96b2:	4610      	mov	r0, r2
    96b4:	f004 bb4c 	b.w	dd50 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    96b8:	2103      	movs	r1, #3
    96ba:	e7f8      	b.n	96ae <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    96bc:	2102      	movs	r1, #2
    96be:	e7f6      	b.n	96ae <nrfx_gpiote_trigger_enable+0x6e>
    96c0:	200000ec 	.word	0x200000ec
    96c4:	40006000 	.word	0x40006000

000096c8 <nrfx_gpiote_trigger_disable>:
{
    96c8:	b508      	push	{r3, lr}
    96ca:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    96cc:	f7ff fdc4 	bl	9258 <pin_in_use_by_te>
    96d0:	b1c0      	cbz	r0, 9704 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    96d2:	f102 0108 	add.w	r1, r2, #8
    96d6:	4b0e      	ldr	r3, [pc, #56]	; (9710 <nrfx_gpiote_trigger_disable+0x48>)
    96d8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    96dc:	0799      	lsls	r1, r3, #30
    96de:	d411      	bmi.n	9704 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    96e0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    96e2:	2201      	movs	r2, #1
    96e4:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    96e6:	009b      	lsls	r3, r3, #2
    96e8:	490a      	ldr	r1, [pc, #40]	; (9714 <nrfx_gpiote_trigger_disable+0x4c>)
    96ea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    96ee:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    96f2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    96f6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    96fa:	f022 0203 	bic.w	r2, r2, #3
    96fe:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    9702:	bd08      	pop	{r3, pc}
    9704:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    9708:	2100      	movs	r1, #0
    970a:	4610      	mov	r0, r2
    970c:	f004 bb20 	b.w	dd50 <nrf_gpio_cfg_sense_set>
    9710:	200000ec 	.word	0x200000ec
    9714:	40006000 	.word	0x40006000

00009718 <nrfx_gpiote_pin_uninit>:
{
    9718:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    971a:	4b0d      	ldr	r3, [pc, #52]	; (9750 <nrfx_gpiote_pin_uninit+0x38>)
    971c:	f100 0208 	add.w	r2, r0, #8
{
    9720:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    9722:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    9726:	07db      	lsls	r3, r3, #31
    9728:	d50f      	bpl.n	974a <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    972a:	f7ff ffcd 	bl	96c8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    972e:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    9730:	f004 041f 	and.w	r4, r4, #31
    9734:	f7ff fde2 	bl	92fc <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    9738:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    973c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    9740:	2202      	movs	r2, #2
    9742:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    9746:	4803      	ldr	r0, [pc, #12]	; (9754 <nrfx_gpiote_pin_uninit+0x3c>)
}
    9748:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    974a:	4803      	ldr	r0, [pc, #12]	; (9758 <nrfx_gpiote_pin_uninit+0x40>)
    974c:	e7fc      	b.n	9748 <nrfx_gpiote_pin_uninit+0x30>
    974e:	bf00      	nop
    9750:	200000ec 	.word	0x200000ec
    9754:	0bad0000 	.word	0x0bad0000
    9758:	0bad0004 	.word	0x0bad0004

0000975c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    975c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9760:	4b4f      	ldr	r3, [pc, #316]	; (98a0 <nrfx_gpiote_irq_handler+0x144>)
    return p_reg->INTENSET & mask;
    9762:	4850      	ldr	r0, [pc, #320]	; (98a4 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    9764:	4950      	ldr	r1, [pc, #320]	; (98a8 <nrfx_gpiote_irq_handler+0x14c>)
    uint32_t status = 0;
    9766:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    9768:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    976a:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    976c:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    976e:	b136      	cbz	r6, 977e <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    9770:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    9774:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    9776:	bf1e      	ittt	ne
    9778:	601c      	strne	r4, [r3, #0]
    977a:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    977c:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    977e:	3304      	adds	r3, #4
    9780:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    9782:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    9786:	d1f1      	bne.n	976c <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9788:	4b46      	ldr	r3, [pc, #280]	; (98a4 <nrfx_gpiote_irq_handler+0x148>)
    978a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    978e:	b1bb      	cbz	r3, 97c0 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    9790:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    9794:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    9798:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    979a:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    979e:	af01      	add	r7, sp, #4
    97a0:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    97a4:	9c01      	ldr	r4, [sp, #4]
    97a6:	b98c      	cbnz	r4, 97cc <nrfx_gpiote_irq_handler+0x70>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    97a8:	4b3e      	ldr	r3, [pc, #248]	; (98a4 <nrfx_gpiote_irq_handler+0x148>)
    97aa:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    97ae:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    97b2:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    97b6:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    97b8:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    97bc:	2b00      	cmp	r3, #0
    97be:	d1ee      	bne.n	979e <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    97c0:	2401      	movs	r4, #1
    while (mask)
    97c2:	2d00      	cmp	r5, #0
    97c4:	d153      	bne.n	986e <nrfx_gpiote_irq_handler+0x112>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    97c6:	b003      	add	sp, #12
    97c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    97cc:	fa94 f4a4 	rbit	r4, r4
    97d0:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    97d4:	4a35      	ldr	r2, [pc, #212]	; (98ac <nrfx_gpiote_irq_handler+0x150>)
    97d6:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    97da:	08e0      	lsrs	r0, r4, #3
    97dc:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    97e0:	5c3b      	ldrb	r3, [r7, r0]
    bit = BITMASK_RELBIT_GET(bit);
    97e2:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    97e6:	fa08 f202 	lsl.w	r2, r8, r2
    97ea:	ea23 0302 	bic.w	r3, r3, r2
    97ee:	543b      	strb	r3, [r7, r0]
    97f0:	00a3      	lsls	r3, r4, #2
    97f2:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    97f6:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    97fa:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    97fe:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    9800:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    9802:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    9806:	d518      	bpl.n	983a <nrfx_gpiote_irq_handler+0xde>
        call_handler(pin, trigger);
    9808:	4659      	mov	r1, fp
    980a:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    980c:	fa5f fa82 	uxtb.w	sl, r2
    9810:	f7ff fd2c 	bl	926c <call_handler>
    9814:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    9818:	f3c3 4301 	ubfx	r3, r3, #16, #2
    981c:	459a      	cmp	sl, r3
    981e:	d107      	bne.n	9830 <nrfx_gpiote_irq_handler+0xd4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    9820:	2100      	movs	r1, #0
    9822:	4620      	mov	r0, r4
    9824:	f004 fa94 	bl	dd50 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    9828:	4651      	mov	r1, sl
    982a:	4620      	mov	r0, r4
    982c:	f004 fa90 	bl	dd50 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    9830:	fa08 f404 	lsl.w	r4, r8, r4
    9834:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    9838:	e7b4      	b.n	97a4 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    983a:	2a02      	cmp	r2, #2
    983c:	d10c      	bne.n	9858 <nrfx_gpiote_irq_handler+0xfc>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    983e:	2103      	movs	r1, #3
    9840:	4620      	mov	r0, r4
    9842:	f004 fa85 	bl	dd50 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    9846:	f00a 0305 	and.w	r3, sl, #5
    984a:	2b01      	cmp	r3, #1
    984c:	d1f0      	bne.n	9830 <nrfx_gpiote_irq_handler+0xd4>
            call_handler(pin, trigger);
    984e:	4659      	mov	r1, fp
    9850:	4620      	mov	r0, r4
    9852:	f7ff fd0b 	bl	926c <call_handler>
    9856:	e7eb      	b.n	9830 <nrfx_gpiote_irq_handler+0xd4>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    9858:	2102      	movs	r1, #2
    985a:	4620      	mov	r0, r4
    985c:	f004 fa78 	bl	dd50 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    9860:	f1ba 0f03 	cmp.w	sl, #3
    9864:	d0f3      	beq.n	984e <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    9866:	2a03      	cmp	r2, #3
    9868:	d1e2      	bne.n	9830 <nrfx_gpiote_irq_handler+0xd4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    986a:	458a      	cmp	sl, r1
    986c:	e7ee      	b.n	984c <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
    986e:	fa95 f3a5 	rbit	r3, r5
    9872:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    9876:	fa04 f203 	lsl.w	r2, r4, r3
    987a:	009b      	lsls	r3, r3, #2
    987c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9880:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    9884:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    9888:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    988c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    9890:	f3c0 2004 	ubfx	r0, r0, #8, #5
    9894:	f3c1 4101 	ubfx	r1, r1, #16, #2
    9898:	f7ff fce8 	bl	926c <call_handler>
    989c:	e791      	b.n	97c2 <nrfx_gpiote_irq_handler+0x66>
    989e:	bf00      	nop
    98a0:	40006100 	.word	0x40006100
    98a4:	40006000 	.word	0x40006000
    98a8:	40006120 	.word	0x40006120
    98ac:	200000ec 	.word	0x200000ec

000098b0 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    98b0:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    98b2:	4c0b      	ldr	r4, [pc, #44]	; (98e0 <nrfx_power_init+0x30>)
{
    98b4:	4603      	mov	r3, r0
    if (m_initialized)
    98b6:	7820      	ldrb	r0, [r4, #0]
    98b8:	b978      	cbnz	r0, 98da <nrfx_power_init+0x2a>
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
    98ba:	781b      	ldrb	r3, [r3, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    98bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    98c0:	f003 0301 	and.w	r3, r3, #1
    98c4:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    98c8:	f7fa fbf0 	bl	40ac <arch_irq_is_enabled>
    98cc:	b908      	cbnz	r0, 98d2 <nrfx_power_init+0x22>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    98ce:	f7fa fbcb 	bl	4068 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    98d2:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    98d4:	4803      	ldr	r0, [pc, #12]	; (98e4 <nrfx_power_init+0x34>)
    m_initialized = true;
    98d6:	7023      	strb	r3, [r4, #0]
}
    98d8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    98da:	4803      	ldr	r0, [pc, #12]	; (98e8 <nrfx_power_init+0x38>)
    98dc:	e7fc      	b.n	98d8 <nrfx_power_init+0x28>
    98de:	bf00      	nop
    98e0:	20001fd8 	.word	0x20001fd8
    98e4:	0bad0000 	.word	0x0bad0000
    98e8:	0bad000c 	.word	0x0bad000c

000098ec <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    98ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    98f0:	f44f 7260 	mov.w	r2, #896	; 0x380
    98f4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    98f8:	4b01      	ldr	r3, [pc, #4]	; (9900 <nrfx_power_usbevt_uninit+0x14>)
    98fa:	2200      	movs	r2, #0
    98fc:	601a      	str	r2, [r3, #0]
}
    98fe:	4770      	bx	lr
    9900:	20001970 	.word	0x20001970

00009904 <nrfx_power_usbevt_init>:
{
    9904:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    9906:	f7ff fff1 	bl	98ec <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    990a:	6803      	ldr	r3, [r0, #0]
    990c:	b10b      	cbz	r3, 9912 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    990e:	4a01      	ldr	r2, [pc, #4]	; (9914 <nrfx_power_usbevt_init+0x10>)
    9910:	6013      	str	r3, [r2, #0]
}
    9912:	bd08      	pop	{r3, pc}
    9914:	20001970 	.word	0x20001970

00009918 <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    9918:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
    991a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    991e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    9922:	0762      	lsls	r2, r4, #29
    9924:	d507      	bpl.n	9936 <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    9926:	f44f 7084 	mov.w	r0, #264	; 0x108
    992a:	f004 fa1f 	bl	dd6c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    992e:	b110      	cbz	r0, 9936 <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    9930:	4b1e      	ldr	r3, [pc, #120]	; (99ac <nrfx_power_irq_handler+0x94>)
    9932:	681b      	ldr	r3, [r3, #0]
    9934:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    9936:	06a3      	lsls	r3, r4, #26
    9938:	d508      	bpl.n	994c <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    993a:	f44f 708a 	mov.w	r0, #276	; 0x114
    993e:	f004 fa15 	bl	dd6c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    9942:	b118      	cbz	r0, 994c <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    9944:	4b1a      	ldr	r3, [pc, #104]	; (99b0 <nrfx_power_irq_handler+0x98>)
    9946:	2000      	movs	r0, #0
    9948:	681b      	ldr	r3, [r3, #0]
    994a:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    994c:	0660      	lsls	r0, r4, #25
    994e:	d508      	bpl.n	9962 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    9950:	f44f 708c 	mov.w	r0, #280	; 0x118
    9954:	f004 fa0a 	bl	dd6c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    9958:	b118      	cbz	r0, 9962 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    995a:	4b15      	ldr	r3, [pc, #84]	; (99b0 <nrfx_power_irq_handler+0x98>)
    995c:	2001      	movs	r0, #1
    995e:	681b      	ldr	r3, [r3, #0]
    9960:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    9962:	0621      	lsls	r1, r4, #24
    9964:	d508      	bpl.n	9978 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    9966:	f44f 708e 	mov.w	r0, #284	; 0x11c
    996a:	f004 f9ff 	bl	dd6c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    996e:	b118      	cbz	r0, 9978 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    9970:	4b10      	ldr	r3, [pc, #64]	; (99b4 <nrfx_power_irq_handler+0x9c>)
    9972:	2000      	movs	r0, #0
    9974:	681b      	ldr	r3, [r3, #0]
    9976:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    9978:	05e2      	lsls	r2, r4, #23
    997a:	d508      	bpl.n	998e <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    997c:	f44f 7090 	mov.w	r0, #288	; 0x120
    9980:	f004 f9f4 	bl	dd6c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    9984:	b118      	cbz	r0, 998e <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    9986:	4b0b      	ldr	r3, [pc, #44]	; (99b4 <nrfx_power_irq_handler+0x9c>)
    9988:	2001      	movs	r0, #1
    998a:	681b      	ldr	r3, [r3, #0]
    998c:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    998e:	05a3      	lsls	r3, r4, #22
    9990:	d50a      	bpl.n	99a8 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    9992:	f44f 7092 	mov.w	r0, #292	; 0x124
    9996:	f004 f9e9 	bl	dd6c <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    999a:	b128      	cbz	r0, 99a8 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    999c:	4b05      	ldr	r3, [pc, #20]	; (99b4 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    999e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    99a2:	681b      	ldr	r3, [r3, #0]
    99a4:	2002      	movs	r0, #2
    99a6:	4718      	bx	r3
}
    99a8:	bd10      	pop	{r4, pc}
    99aa:	bf00      	nop
    99ac:	20001978 	.word	0x20001978
    99b0:	20001974 	.word	0x20001974
    99b4:	20001970 	.word	0x20001970

000099b8 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    99b8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    99ba:	4801      	ldr	r0, [pc, #4]	; (99c0 <nrfx_ppi_channel_alloc+0x8>)
    99bc:	f7ff bb7e 	b.w	90bc <nrfx_flag32_alloc>
    99c0:	2000014c 	.word	0x2000014c

000099c4 <nrfx_ppi_channel_free>:
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    99c4:	2301      	movs	r3, #1
    99c6:	4083      	lsls	r3, r0
    return ((NRFX_PPI_PROG_APP_CHANNELS_MASK & nrfx_ppi_channel_to_mask(channel)) != 0);
    99c8:	f3c3 0213 	ubfx	r2, r3, #0, #20
}


nrfx_err_t nrfx_ppi_channel_free(nrf_ppi_channel_t channel)
{
    99cc:	4601      	mov	r1, r0
    if (!is_programmable_app_channel(channel))
    99ce:	b12a      	cbz	r2, 99dc <nrfx_ppi_channel_free+0x18>
    p_reg->CHENCLR = PPI_CHENCLR_CH0_Clear << ((uint32_t) channel);
    99d0:	4a03      	ldr	r2, [pc, #12]	; (99e0 <nrfx_ppi_channel_free+0x1c>)
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_ppi_channel_disable(NRF_PPI, channel);

    return nrfx_flag32_free(&m_channels_allocated, channel);
    99d2:	4804      	ldr	r0, [pc, #16]	; (99e4 <nrfx_ppi_channel_free+0x20>)
    99d4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    99d8:	f7ff bb90 	b.w	90fc <nrfx_flag32_free>
}
    99dc:	4802      	ldr	r0, [pc, #8]	; (99e8 <nrfx_ppi_channel_free+0x24>)
    99de:	4770      	bx	lr
    99e0:	4001f000 	.word	0x4001f000
    99e4:	2000014c 	.word	0x2000014c
    99e8:	0bad0004 	.word	0x0bad0004

000099ec <nrfx_ppi_group_alloc>:
    return err_code;
}


nrfx_err_t nrfx_ppi_group_alloc(nrf_ppi_channel_group_t * p_group)
{
    99ec:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_groups_allocated, (uint8_t *)p_group);
    99ee:	4801      	ldr	r0, [pc, #4]	; (99f4 <nrfx_ppi_group_alloc+0x8>)
    99f0:	f7ff bb64 	b.w	90bc <nrfx_flag32_alloc>
    99f4:	20000148 	.word	0x20000148

000099f8 <nrfx_ppi_group_free>:
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
    99f8:	00c3      	lsls	r3, r0, #3
    99fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    99fe:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    9a02:	2201      	movs	r2, #1
}


nrfx_err_t nrfx_ppi_group_free(nrf_ppi_channel_group_t group)
{
    9a04:	4601      	mov	r1, r0
    9a06:	605a      	str	r2, [r3, #4]
    nrf_ppi_group_disable(NRF_PPI, group);
    return nrfx_flag32_free(&m_groups_allocated, group);
    9a08:	4801      	ldr	r0, [pc, #4]	; (9a10 <nrfx_ppi_group_free+0x18>)
    9a0a:	f7ff bb77 	b.w	90fc <nrfx_flag32_free>
    9a0e:	bf00      	nop
    9a10:	20000148 	.word	0x20000148

00009a14 <nrfx_qdec_irq_handler>:
static nrfx_qdec_event_handler_t m_qdec_event_handler = NULL;
static nrfx_drv_state_t m_state = NRFX_DRV_STATE_UNINITIALIZED;
static bool m_skip_gpio_cfg;

void nrfx_qdec_irq_handler(void)
{
    9a14:	b513      	push	{r0, r1, r4, lr}
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_qdec_event_check(NRF_QDEC_Type const * p_reg, nrf_qdec_event_t event)
{
    return (bool)*(volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event);
    9a16:	4c2a      	ldr	r4, [pc, #168]	; (9ac0 <nrfx_qdec_irq_handler+0xac>)
    9a18:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    nrfx_qdec_event_t event;
    if ( nrf_qdec_event_check(NRF_QDEC, NRF_QDEC_EVENT_SAMPLERDY) &&
    9a1c:	b1b3      	cbz	r3, 9a4c <nrfx_qdec_irq_handler+0x38>
    return p_reg->INTENSET & mask; // when read this register will return the value of INTEN.
    9a1e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    9a22:	07d9      	lsls	r1, r3, #31
    9a24:	d512      	bpl.n	9a4c <nrfx_qdec_irq_handler+0x38>
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event) ) = 0;
    9a26:	2300      	movs	r3, #0
    9a28:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    9a2c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
         nrf_qdec_int_enable_check(NRF_QDEC, NRF_QDEC_INT_SAMPLERDY_MASK) )
    {
        nrf_qdec_event_clear(NRF_QDEC, NRF_QDEC_EVENT_SAMPLERDY);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_QDEC_EVENT_SAMPLERDY));

        event.type = NRF_QDEC_EVENT_SAMPLERDY;
    9a30:	f44f 7380 	mov.w	r3, #256	; 0x100
    9a34:	f8ad 3000 	strh.w	r3, [sp]
    return (nrf_qdec_sampleper_t)(p_reg->SAMPLEPER);
}

NRF_STATIC_INLINE int32_t nrf_qdec_sample_get(NRF_QDEC_Type const * p_reg)
{
    return p_reg->SAMPLE;
    9a38:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
        event.data.sample.value = (int8_t)nrf_qdec_sample_get(NRF_QDEC);
    9a3c:	f88d 3002 	strb.w	r3, [sp, #2]
        m_qdec_event_handler(event);
    9a40:	4b20      	ldr	r3, [pc, #128]	; (9ac4 <nrfx_qdec_irq_handler+0xb0>)
    9a42:	aa02      	add	r2, sp, #8
    9a44:	e912 0003 	ldmdb	r2, {r0, r1}
    9a48:	681b      	ldr	r3, [r3, #0]
    9a4a:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event);
    9a4c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    }

    if ( nrf_qdec_event_check(NRF_QDEC, NRF_QDEC_EVENT_REPORTRDY) &&
    9a50:	b1d3      	cbz	r3, 9a88 <nrfx_qdec_irq_handler+0x74>
    return p_reg->INTENSET & mask; // when read this register will return the value of INTEN.
    9a52:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    9a56:	079a      	lsls	r2, r3, #30
    9a58:	d516      	bpl.n	9a88 <nrfx_qdec_irq_handler+0x74>
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event) ) = 0;
    9a5a:	2300      	movs	r3, #0
    9a5c:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    9a60:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
         nrf_qdec_int_enable_check(NRF_QDEC, NRF_QDEC_INT_REPORTRDY_MASK) )
    {
        nrf_qdec_event_clear(NRF_QDEC, NRF_QDEC_EVENT_REPORTRDY);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_QDEC_EVENT_REPORTRDY));

        event.type = NRF_QDEC_EVENT_REPORTRDY;
    9a64:	f44f 7382 	mov.w	r3, #260	; 0x104
    9a68:	f8ad 3000 	strh.w	r3, [sp]
    return p_reg->ACC;
}

NRF_STATIC_INLINE int32_t nrf_qdec_accread_get(NRF_QDEC_Type const * p_reg)
{
    return p_reg->ACCREAD;
    9a6c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518

        event.data.report.acc    = (int16_t)nrf_qdec_accread_get(NRF_QDEC);
    9a70:	f8ad 3002 	strh.w	r3, [sp, #2]
    return p_reg->ACCDBL;
}

NRF_STATIC_INLINE uint32_t nrf_qdec_accdblread_get(NRF_QDEC_Type const * p_reg)
{
    return p_reg->ACCDBLREAD;
    9a74:	f8d4 3548 	ldr.w	r3, [r4, #1352]	; 0x548
        event.data.report.accdbl = (uint16_t)nrf_qdec_accdblread_get(NRF_QDEC);
    9a78:	f8ad 3004 	strh.w	r3, [sp, #4]
        m_qdec_event_handler(event);
    9a7c:	4b11      	ldr	r3, [pc, #68]	; (9ac4 <nrfx_qdec_irq_handler+0xb0>)
    9a7e:	aa02      	add	r2, sp, #8
    9a80:	e912 0003 	ldmdb	r2, {r0, r1}
    9a84:	681b      	ldr	r3, [r3, #0]
    9a86:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event);
    9a88:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    }

    if ( nrf_qdec_event_check(NRF_QDEC, NRF_QDEC_EVENT_ACCOF) &&
    9a8c:	b1ab      	cbz	r3, 9aba <nrfx_qdec_irq_handler+0xa6>
    return p_reg->INTENSET & mask; // when read this register will return the value of INTEN.
    9a8e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    9a92:	075b      	lsls	r3, r3, #29
    9a94:	d511      	bpl.n	9aba <nrfx_qdec_irq_handler+0xa6>
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event) ) = 0;
    9a96:	2300      	movs	r3, #0
    9a98:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    9a9c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
         nrf_qdec_int_enable_check(NRF_QDEC, NRF_QDEC_INT_ACCOF_MASK) )
    {
        nrf_qdec_event_clear(NRF_QDEC, NRF_QDEC_EVENT_ACCOF);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_QDEC_EVENT_ACCOF));

        event.type = NRF_QDEC_EVENT_ACCOF;
    9aa0:	f44f 7384 	mov.w	r3, #264	; 0x108
    9aa4:	f8ad 3000 	strh.w	r3, [sp]
        m_qdec_event_handler(event);
    9aa8:	aa02      	add	r2, sp, #8
    9aaa:	4b06      	ldr	r3, [pc, #24]	; (9ac4 <nrfx_qdec_irq_handler+0xb0>)
    9aac:	e912 0003 	ldmdb	r2, {r0, r1}
    9ab0:	681b      	ldr	r3, [r3, #0]
    }
}
    9ab2:	b002      	add	sp, #8
    9ab4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_qdec_event_handler(event);
    9ab8:	4718      	bx	r3
}
    9aba:	b002      	add	sp, #8
    9abc:	bd10      	pop	{r4, pc}
    9abe:	bf00      	nop
    9ac0:	40012000 	.word	0x40012000
    9ac4:	2000197c 	.word	0x2000197c

00009ac8 <nrfx_qdec_init>:


nrfx_err_t nrfx_qdec_init(nrfx_qdec_config_t const * p_config,
                          nrfx_qdec_event_handler_t  event_handler)
{
    9ac8:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(event_handler);
    nrfx_err_t err_code;

    if (m_state != NRFX_DRV_STATE_UNINITIALIZED)
    9aca:	4c30      	ldr	r4, [pc, #192]	; (9b8c <nrfx_qdec_init+0xc4>)
    9acc:	7823      	ldrb	r3, [r4, #0]
    9ace:	2b00      	cmp	r3, #0
    9ad0:	d159      	bne.n	9b86 <nrfx_qdec_init+0xbe>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    m_qdec_event_handler = event_handler;
    9ad2:	4b2f      	ldr	r3, [pc, #188]	; (9b90 <nrfx_qdec_init+0xc8>)
    m_skip_gpio_cfg = p_config->skip_gpio_cfg;
    9ad4:	7e02      	ldrb	r2, [r0, #24]
    m_qdec_event_handler = event_handler;
    9ad6:	6019      	str	r1, [r3, #0]
    m_skip_gpio_cfg = p_config->skip_gpio_cfg;
    9ad8:	4b2e      	ldr	r3, [pc, #184]	; (9b94 <nrfx_qdec_init+0xcc>)
    9ada:	701a      	strb	r2, [r3, #0]

    if (!p_config->skip_gpio_cfg)
    9adc:	b9c2      	cbnz	r2, 9b10 <nrfx_qdec_init+0x48>
    *p_pin = pin_number & 0x1F;
    9ade:	6843      	ldr	r3, [r0, #4]
    9ae0:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    9ae4:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9ae8:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    9aec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
    9af0:	6883      	ldr	r3, [r0, #8]
    9af2:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    9af6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    9afa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    {
        nrf_gpio_cfg_input(p_config->psela, NRF_GPIO_PIN_NOPULL);
        nrf_gpio_cfg_input(p_config->pselb, NRF_GPIO_PIN_NOPULL);
        if (p_config->pselled != NRF_QDEC_LED_NOT_CONNECTED)
    9afe:	68c3      	ldr	r3, [r0, #12]
    9b00:	1c5d      	adds	r5, r3, #1
    *p_pin = pin_number & 0x1F;
    9b02:	bf1e      	ittt	ne
    9b04:	f003 031f 	andne.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    9b08:	f503 73e0 	addne.w	r3, r3, #448	; 0x1c0
    9b0c:	f841 2023 	strne.w	r2, [r1, r3, lsl #2]
        {
            nrf_gpio_cfg_input(p_config->pselled, NRF_GPIO_PIN_NOPULL);
        }
    }
    if (!p_config->skip_psel_cfg)
    9b10:	7e42      	ldrb	r2, [r0, #25]
    9b12:	4b21      	ldr	r3, [pc, #132]	; (9b98 <nrfx_qdec_init+0xd0>)
    9b14:	b942      	cbnz	r2, 9b28 <nrfx_qdec_init+0x60>
    {
        nrf_qdec_pins_set(NRF_QDEC, p_config->psela, p_config->pselb, p_config->pselled);
    9b16:	e9d0 5101 	ldrd	r5, r1, [r0, #4]
    9b1a:	68c2      	ldr	r2, [r0, #12]
    p_reg->PSEL.A = phase_a_pin;
    9b1c:	f8c3 5520 	str.w	r5, [r3, #1312]	; 0x520
    p_reg->PSEL.B = phase_b_pin;
    9b20:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
    p_reg->PSEL.LED = led_pin;
    9b24:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->SAMPLEPER = sampleper;
    9b28:	7842      	ldrb	r2, [r0, #1]
    9b2a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    return p_reg->PSEL.LED;
    9b2e:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    }

    nrf_qdec_sampleper_set(NRF_QDEC, p_config->sampleper);
    // Change the period and polarity of the LED only when it is used,
    // otherwise the ledpre field might have an invalid value.
    if (nrf_qdec_led_pin_get(NRF_QDEC) != NRF_QDEC_LED_NOT_CONNECTED)
    9b32:	3201      	adds	r2, #1
    {
        nrf_qdec_ledpre_set(NRF_QDEC, p_config->ledpre);
    9b34:	bf1f      	itttt	ne
    9b36:	6902      	ldrne	r2, [r0, #16]
}

NRF_STATIC_INLINE void nrf_qdec_ledpre_set(NRF_QDEC_Type * p_reg, uint32_t time_us)
{
    p_reg->LEDPRE = time_us;
    9b38:	f8c3 2540 	strne.w	r2, [r3, #1344]	; 0x540
    return (reportper == NRF_QDEC_REPORTPER_10) ? 10 : reportper * 40;
}

NRF_STATIC_INLINE void nrf_qdec_ledpol_set(NRF_QDEC_Type * p_reg, nrf_qdec_ledpol_t pol)
{
    p_reg->LEDPOL = pol;
    9b3c:	7d02      	ldrbne	r2, [r0, #20]
    9b3e:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
        nrf_qdec_ledpol_set(NRF_QDEC, p_config->ledpol);
    }

    if (p_config->dbfen)
    9b42:	7d42      	ldrb	r2, [r0, #21]
    9b44:	b102      	cbz	r2, 9b48 <nrfx_qdec_init+0x80>
    p_reg->DBFEN = NRF_QDEC_DBFEN_ENABLE;
    9b46:	2201      	movs	r2, #1
    p_reg->DBFEN = NRF_QDEC_DBFEN_DISABLE;
    9b48:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
        nrf_qdec_dbfen_disable(NRF_QDEC);
    }

    uint32_t int_mask = NRF_QDEC_INT_ACCOF_MASK;

    if (p_config->reportper != NRF_QDEC_REPORTPER_DISABLED)
    9b4c:	7802      	ldrb	r2, [r0, #0]
    9b4e:	2a10      	cmp	r2, #16
    p_reg->SHORTS |= mask;
    9b50:	bf1f      	itttt	ne
    9b52:	f8d3 2200 	ldrne.w	r2, [r3, #512]	; 0x200
    9b56:	f042 0201 	orrne.w	r2, r2, #1
    9b5a:	f8c3 2200 	strne.w	r2, [r3, #512]	; 0x200
    p_reg->REPORTPER = reportper;
    9b5e:	7802      	ldrbne	r2, [r0, #0]
    9b60:	bf18      	it	ne
    9b62:	f8c3 2510 	strne.w	r2, [r3, #1296]	; 0x510
        nrf_qdec_shorts_enable(NRF_QDEC, NRF_QDEC_SHORT_REPORTRDY_READCLRACC_MASK);
        nrf_qdec_reportper_set(NRF_QDEC, p_config->reportper);
        int_mask |= NRF_QDEC_INT_REPORTRDY_MASK;
    }

    if (p_config->sample_inten)
    9b66:	7d81      	ldrb	r1, [r0, #22]
        int_mask |= NRF_QDEC_INT_REPORTRDY_MASK;
    9b68:	bf14      	ite	ne
    9b6a:	2206      	movne	r2, #6
    uint32_t int_mask = NRF_QDEC_INT_ACCOF_MASK;
    9b6c:	2204      	moveq	r2, #4
    if (p_config->sample_inten)
    9b6e:	b109      	cbz	r1, 9b74 <nrfx_qdec_init+0xac>
    {
        int_mask |= NRF_QDEC_INT_SAMPLERDY_MASK;
    9b70:	f042 0201 	orr.w	r2, r2, #1
    p_reg->INTENSET = mask; // writing 0 has no effect
    9b74:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    }

    nrf_qdec_int_enable(NRF_QDEC, int_mask);
    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_QDEC), p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_QDEC));
    9b78:	2012      	movs	r0, #18
    9b7a:	f7fa fa75 	bl	4068 <arch_irq_enable>

    m_state = NRFX_DRV_STATE_INITIALIZED;
    9b7e:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    9b80:	4806      	ldr	r0, [pc, #24]	; (9b9c <nrfx_qdec_init+0xd4>)
    m_state = NRFX_DRV_STATE_INITIALIZED;
    9b82:	7023      	strb	r3, [r4, #0]
}
    9b84:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    9b86:	4806      	ldr	r0, [pc, #24]	; (9ba0 <nrfx_qdec_init+0xd8>)
    9b88:	e7fc      	b.n	9b84 <nrfx_qdec_init+0xbc>
    9b8a:	bf00      	nop
    9b8c:	20001fda 	.word	0x20001fda
    9b90:	2000197c 	.word	0x2000197c
    9b94:	20001fd9 	.word	0x20001fd9
    9b98:	40012000 	.word	0x40012000
    9b9c:	0bad0000 	.word	0x0bad0000
    9ba0:	0bad0005 	.word	0x0bad0005

00009ba4 <nrfx_qdec_enable>:
    p_reg->ENABLE = NRF_QDEC_ENABLE;
    9ba4:	4b04      	ldr	r3, [pc, #16]	; (9bb8 <nrfx_qdec_enable+0x14>)
    9ba6:	2201      	movs	r2, #1
    9ba8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)task) ) = 1;
    9bac:	601a      	str	r2, [r3, #0]
void nrfx_qdec_enable(void)
{
    NRFX_ASSERT(m_state == NRFX_DRV_STATE_INITIALIZED);
    nrf_qdec_enable(NRF_QDEC);
    nrf_qdec_task_trigger(NRF_QDEC, NRF_QDEC_TASK_START);
    m_state = NRFX_DRV_STATE_POWERED_ON;
    9bae:	4b03      	ldr	r3, [pc, #12]	; (9bbc <nrfx_qdec_enable+0x18>)
    9bb0:	2202      	movs	r2, #2
    9bb2:	701a      	strb	r2, [r3, #0]
    NRFX_LOG_INFO("Enabled.");
}
    9bb4:	4770      	bx	lr
    9bb6:	bf00      	nop
    9bb8:	40012000 	.word	0x40012000
    9bbc:	20001fda 	.word	0x20001fda

00009bc0 <nrfx_qdec_accumulators_read>:
    9bc0:	4b04      	ldr	r3, [pc, #16]	; (9bd4 <nrfx_qdec_accumulators_read+0x14>)
    9bc2:	2201      	movs	r2, #1
    9bc4:	609a      	str	r2, [r3, #8]
    return p_reg->ACCREAD;
    9bc6:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
void nrfx_qdec_accumulators_read(int16_t * p_acc, int16_t * p_accdbl)
{
    NRFX_ASSERT(m_state == NRFX_DRV_STATE_POWERED_ON);
    nrf_qdec_task_trigger(NRF_QDEC, NRF_QDEC_TASK_READCLRACC);

    *p_acc    = (int16_t)nrf_qdec_accread_get(NRF_QDEC);
    9bca:	8002      	strh	r2, [r0, #0]
    return p_reg->ACCDBLREAD;
    9bcc:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
    *p_accdbl = (int16_t)nrf_qdec_accdblread_get(NRF_QDEC);
    9bd0:	800b      	strh	r3, [r1, #0]

    NRFX_LOG_DEBUG("Accumulators data, ACC register:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_acc, sizeof(p_acc[0]));
    NRFX_LOG_DEBUG("Accumulators data, ACCDBL register:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_accdbl, sizeof(p_accdbl[0]));
}
    9bd2:	4770      	bx	lr
    9bd4:	40012000 	.word	0x40012000

00009bd8 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    9bd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    9bdc:	4d52      	ldr	r5, [pc, #328]	; (9d28 <nrfx_spim_init+0x150>)
{
    9bde:	460c      	mov	r4, r1
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    9be0:	7901      	ldrb	r1, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    9be2:	014f      	lsls	r7, r1, #5
    9be4:	eb05 1141 	add.w	r1, r5, r1, lsl #5
{
    9be8:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    9bea:	7f08      	ldrb	r0, [r1, #28]
    9bec:	2800      	cmp	r0, #0
    9bee:	f040 8098 	bne.w	9d22 <nrfx_spim_init+0x14a>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    9bf2:	f8d6 8000 	ldr.w	r8, [r6]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    9bf6:	51ea      	str	r2, [r5, r7]
    p_cb->p_context = p_context;
    9bf8:	604b      	str	r3, [r1, #4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    9bfa:	7be0      	ldrb	r0, [r4, #15]
    9bfc:	7f8a      	ldrb	r2, [r1, #30]
    9bfe:	f360 0200 	bfi	r2, r0, #0, #1
    9c02:	778a      	strb	r2, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
    9c04:	7920      	ldrb	r0, [r4, #4]
    9c06:	b2d2      	uxtb	r2, r2
    9c08:	f360 0241 	bfi	r2, r0, #1, #1
    9c0c:	778a      	strb	r2, [r1, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
#endif
    p_cb->ss_pin = p_config->ss_pin;
    9c0e:	78e3      	ldrb	r3, [r4, #3]
    9c10:	77cb      	strb	r3, [r1, #31]
    if (!p_config->skip_gpio_cfg)
    9c12:	7be3      	ldrb	r3, [r4, #15]
    9c14:	f8d6 9000 	ldr.w	r9, [r6]
    9c18:	2b00      	cmp	r3, #0
    9c1a:	d140      	bne.n	9c9e <nrfx_spim_init+0xc6>
        nrf_gpio_pin_write(p_config->sck_pin,
    9c1c:	7b21      	ldrb	r1, [r4, #12]
    9c1e:	7820      	ldrb	r0, [r4, #0]
    9c20:	2901      	cmp	r1, #1
    9c22:	bf94      	ite	ls
    9c24:	2100      	movls	r1, #0
    9c26:	2101      	movhi	r1, #1
    9c28:	f004 f8cd 	bl	ddc6 <nrf_gpio_pin_write>
    *p_pin = pin_number & 0x1F;
    9c2c:	7823      	ldrb	r3, [r4, #0]
    9c2e:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    9c32:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    9c36:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9c3a:	2201      	movs	r2, #1
    9c3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    9c40:	7863      	ldrb	r3, [r4, #1]
    9c42:	2bff      	cmp	r3, #255	; 0xff
    9c44:	d00c      	beq.n	9c60 <nrfx_spim_init+0x88>
    *p_pin = pin_number & 0x1F;
    9c46:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    9c4a:	409a      	lsls	r2, r3
    p_reg->OUTCLR = clr_mask;
    9c4c:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    9c50:	7863      	ldrb	r3, [r4, #1]
    9c52:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    9c56:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    9c5a:	2203      	movs	r2, #3
    9c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    9c60:	78a3      	ldrb	r3, [r4, #2]
    9c62:	2bff      	cmp	r3, #255	; 0xff
    9c64:	d009      	beq.n	9c7a <nrfx_spim_init+0xa2>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9c66:	7ba2      	ldrb	r2, [r4, #14]
    *p_pin = pin_number & 0x1F;
    9c68:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    9c6c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    9c70:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    9c74:	0092      	lsls	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    9c76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    9c7a:	78e0      	ldrb	r0, [r4, #3]
    9c7c:	28ff      	cmp	r0, #255	; 0xff
    9c7e:	d00e      	beq.n	9c9e <nrfx_spim_init+0xc6>
                               p_config->ss_active_high ? 0 : 1);
    9c80:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
    9c82:	f081 0101 	eor.w	r1, r1, #1
    9c86:	f004 f89e 	bl	ddc6 <nrf_gpio_pin_write>
    *p_pin = pin_number & 0x1F;
    9c8a:	78e3      	ldrb	r3, [r4, #3]
    9c8c:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    9c90:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    9c94:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    9c98:	2103      	movs	r1, #3
    9c9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    9c9e:	7c23      	ldrb	r3, [r4, #16]
    9ca0:	b993      	cbnz	r3, 9cc8 <nrfx_spim_init+0xf0>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    9ca2:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    9ca4:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    9ca6:	2bff      	cmp	r3, #255	; 0xff
    9ca8:	bf18      	it	ne
    9caa:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    9cac:	78a3      	ldrb	r3, [r4, #2]
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
    9cae:	f8c9 1508 	str.w	r1, [r9, #1288]	; 0x508
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    9cb2:	bf08      	it	eq
    9cb4:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    9cb8:	2bff      	cmp	r3, #255	; 0xff
    9cba:	bf08      	it	eq
    9cbc:	f04f 33ff 	moveq.w	r3, #4294967295
    p_reg->PSEL.MOSI = mosi_pin;
    9cc0:	f8c9 250c 	str.w	r2, [r9, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    9cc4:	f8c9 3510 	str.w	r3, [r9, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    9cc8:	68a3      	ldr	r3, [r4, #8]
    9cca:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    9cce:	7b63      	ldrb	r3, [r4, #13]
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    9cd0:	7b22      	ldrb	r2, [r4, #12]
    9cd2:	3b00      	subs	r3, #0
    9cd4:	bf18      	it	ne
    9cd6:	2301      	movne	r3, #1
    switch (spi_mode)
    9cd8:	2a02      	cmp	r2, #2
    9cda:	d01c      	beq.n	9d16 <nrfx_spim_init+0x13e>
    9cdc:	2a03      	cmp	r2, #3
    9cde:	d01d      	beq.n	9d1c <nrfx_spim_init+0x144>
    9ce0:	2a01      	cmp	r2, #1
    9ce2:	d101      	bne.n	9ce8 <nrfx_spim_init+0x110>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    9ce4:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    9ce8:	f8c8 3554 	str.w	r3, [r8, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    9cec:	79a3      	ldrb	r3, [r4, #6]
    9cee:	f8c8 35c0 	str.w	r3, [r8, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    9cf2:	2307      	movs	r3, #7
    9cf4:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    9cf8:	59eb      	ldr	r3, [r5, r7]
    9cfa:	b123      	cbz	r3, 9d06 <nrfx_spim_init+0x12e>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    9cfc:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    9cfe:	f340 3007 	sbfx	r0, r0, #12, #8
    9d02:	f7fa f9b1 	bl	4068 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    9d06:	443d      	add	r5, r7
    9d08:	2300      	movs	r3, #0
    9d0a:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    9d0c:	4807      	ldr	r0, [pc, #28]	; (9d2c <nrfx_spim_init+0x154>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    9d0e:	2301      	movs	r3, #1
    9d10:	772b      	strb	r3, [r5, #28]
}
    9d12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    9d16:	f043 0304 	orr.w	r3, r3, #4
        break;
    9d1a:	e7e5      	b.n	9ce8 <nrfx_spim_init+0x110>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    9d1c:	f043 0306 	orr.w	r3, r3, #6
        break;
    9d20:	e7e2      	b.n	9ce8 <nrfx_spim_init+0x110>
        return err_code;
    9d22:	4803      	ldr	r0, [pc, #12]	; (9d30 <nrfx_spim_init+0x158>)
    9d24:	e7f5      	b.n	9d12 <nrfx_spim_init+0x13a>
    9d26:	bf00      	nop
    9d28:	20001980 	.word	0x20001980
    9d2c:	0bad0000 	.word	0x0bad0000
    9d30:	0bad0005 	.word	0x0bad0005

00009d34 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
    9d34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    9d36:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
    9d38:	4d20      	ldr	r5, [pc, #128]	; (9dbc <nrfx_spim_uninit+0x88>)
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
    9d3a:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
    9d3c:	015e      	lsls	r6, r3, #5
    9d3e:	eb05 1743 	add.w	r7, r5, r3, lsl #5
    9d42:	59ab      	ldr	r3, [r5, r6]
    9d44:	b1b3      	cbz	r3, 9d74 <nrfx_spim_uninit+0x40>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    9d46:	f344 3007 	sbfx	r0, r4, #12, #8
    9d4a:	f7fa f99b 	bl	4084 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    9d4e:	4b1c      	ldr	r3, [pc, #112]	; (9dc0 <nrfx_spim_uninit+0x8c>)
    9d50:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
    9d54:	7f7b      	ldrb	r3, [r7, #29]
    9d56:	b16b      	cbz	r3, 9d74 <nrfx_spim_uninit+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9d58:	2301      	movs	r3, #1
    9d5a:	6163      	str	r3, [r4, #20]
    9d5c:	2764      	movs	r7, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9d5e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
    9d62:	b923      	cbnz	r3, 9d6e <nrfx_spim_uninit+0x3a>
    9d64:	2001      	movs	r0, #1
    9d66:	f003 ff5d 	bl	dc24 <nrfx_busy_wait>
    9d6a:	3f01      	subs	r7, #1
    9d6c:	d1f7      	bne.n	9d5e <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
    9d6e:	19ab      	adds	r3, r5, r6
    9d70:	2200      	movs	r2, #0
    9d72:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
    9d74:	2300      	movs	r3, #0
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
    9d76:	19a9      	adds	r1, r5, r6
    9d78:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    9d7c:	7f8b      	ldrb	r3, [r1, #30]
    9d7e:	07db      	lsls	r3, r3, #31
    9d80:	d417      	bmi.n	9db2 <nrfx_spim_uninit+0x7e>
    return p_reg->PSEL.SCK;
    9d82:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
    9d86:	f004 f812 	bl	ddae <spim_pin_uninit>
    return p_reg->PSEL.MISO;
    9d8a:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
    9d8e:	f004 f80e 	bl	ddae <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
    9d92:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
    9d96:	f004 f80a 	bl	ddae <spim_pin_uninit>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    9d9a:	7fcb      	ldrb	r3, [r1, #31]
    9d9c:	2bff      	cmp	r3, #255	; 0xff
    9d9e:	d008      	beq.n	9db2 <nrfx_spim_uninit+0x7e>
    *p_pin = pin_number & 0x1F;
    9da0:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    9da4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    9da8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    9dac:	2102      	movs	r1, #2
    9dae:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    9db2:	4435      	add	r5, r6
    9db4:	2300      	movs	r3, #0
    9db6:	772b      	strb	r3, [r5, #28]
}
    9db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9dba:	bf00      	nop
    9dbc:	20001980 	.word	0x20001980
    9dc0:	00080152 	.word	0x00080152

00009dc4 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    9dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    9dc8:	4f38      	ldr	r7, [pc, #224]	; (9eac <nrfx_spim_xfer+0xe8>)
    9dca:	7903      	ldrb	r3, [r0, #4]
    9dcc:	eb07 1843 	add.w	r8, r7, r3, lsl #5
{
    9dd0:	4615      	mov	r5, r2
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    9dd2:	f898 201d 	ldrb.w	r2, [r8, #29]
{
    9dd6:	4681      	mov	r9, r0
    9dd8:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
    9dda:	015e      	lsls	r6, r3, #5
    9ddc:	2a00      	cmp	r2, #0
    9dde:	d163      	bne.n	9ea8 <nrfx_spim_xfer+0xe4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    9de0:	59ba      	ldr	r2, [r7, r6]
    9de2:	b12a      	cbz	r2, 9df0 <nrfx_spim_xfer+0x2c>
    9de4:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    9de8:	bf04      	itt	eq
    9dea:	2201      	moveq	r2, #1
    9dec:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    9df0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    9df4:	eb07 0c06 	add.w	ip, r7, r6
    9df8:	f10c 0c0c 	add.w	ip, ip, #12
    9dfc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
    9e00:	2101      	movs	r1, #1
    9e02:	4640      	mov	r0, r8
    9e04:	f003 ffec 	bl	dde0 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    9e08:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    9e0a:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    9e0e:	b121      	cbz	r1, 9e1a <nrfx_spim_xfer+0x56>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    9e10:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
    9e14:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    9e18:	d106      	bne.n	9e28 <nrfx_spim_xfer+0x64>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    9e1a:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    9e1c:	b152      	cbz	r2, 9e34 <nrfx_spim_xfer+0x70>
    9e1e:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    9e22:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    9e26:	d005      	beq.n	9e34 <nrfx_spim_xfer+0x70>
        p_cb->transfer_in_progress = false;
    9e28:	443e      	add	r6, r7
    9e2a:	2300      	movs	r3, #0
        return err_code;
    9e2c:	4820      	ldr	r0, [pc, #128]	; (9eb0 <nrfx_spim_xfer+0xec>)
        p_cb->transfer_in_progress = false;
    9e2e:	7773      	strb	r3, [r6, #29]
}
    9e30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    9e34:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    9e36:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    9e3a:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    9e3e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    9e42:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    9e46:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9e4a:	2200      	movs	r2, #0
    9e4c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    9e50:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    9e54:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    9e58:	bf18      	it	ne
    9e5a:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    9e5c:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    9e60:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    9e64:	bf18      	it	ne
    9e66:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    9e68:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    9e6c:	072a      	lsls	r2, r5, #28
    9e6e:	d507      	bpl.n	9e80 <nrfx_spim_xfer+0xbc>
    if (!p_cb->handler)
    9e70:	59ba      	ldr	r2, [r7, r6]
    9e72:	b972      	cbnz	r2, 9e92 <nrfx_spim_xfer+0xce>
        set_ss_pin_state(p_cb, false);
    9e74:	2100      	movs	r1, #0
    9e76:	4640      	mov	r0, r8
    9e78:	f003 ffb2 	bl	dde0 <set_ss_pin_state>
    return err_code;
    9e7c:	480d      	ldr	r0, [pc, #52]	; (9eb4 <nrfx_spim_xfer+0xf0>)
    9e7e:	e7d7      	b.n	9e30 <nrfx_spim_xfer+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9e80:	2201      	movs	r2, #1
    9e82:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
    9e84:	59ba      	ldr	r2, [r7, r6]
    9e86:	b922      	cbnz	r2, 9e92 <nrfx_spim_xfer+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9e88:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    9e8c:	2a00      	cmp	r2, #0
    9e8e:	d0fb      	beq.n	9e88 <nrfx_spim_xfer+0xc4>
    9e90:	e7f0      	b.n	9e74 <nrfx_spim_xfer+0xb0>
    if (!enable)
    9e92:	f015 0f04 	tst.w	r5, #4
    9e96:	f04f 0240 	mov.w	r2, #64	; 0x40
    9e9a:	d002      	beq.n	9ea2 <nrfx_spim_xfer+0xde>
    p_reg->INTENCLR = mask;
    9e9c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    9ea0:	e7ec      	b.n	9e7c <nrfx_spim_xfer+0xb8>
    p_reg->INTENSET = mask;
    9ea2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    9ea6:	e7e9      	b.n	9e7c <nrfx_spim_xfer+0xb8>
        return err_code;
    9ea8:	4803      	ldr	r0, [pc, #12]	; (9eb8 <nrfx_spim_xfer+0xf4>)
    9eaa:	e7c1      	b.n	9e30 <nrfx_spim_xfer+0x6c>
    9eac:	20001980 	.word	0x20001980
    9eb0:	0bad000a 	.word	0x0bad000a
    9eb4:	0bad0000 	.word	0x0bad0000
    9eb8:	0bad000b 	.word	0x0bad000b

00009ebc <nrfx_spim_0_irq_handler>:
    }
}

#if NRFX_CHECK(NRFX_SPIM0_ENABLED)
void nrfx_spim_0_irq_handler(void)
{
    9ebc:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9ebe:	4b0c      	ldr	r3, [pc, #48]	; (9ef0 <nrfx_spim_0_irq_handler+0x34>)
    9ec0:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    9ec4:	b192      	cbz	r2, 9eec <nrfx_spim_0_irq_handler+0x30>
    set_ss_pin_state(p_cb, false);
    9ec6:	4c0b      	ldr	r4, [pc, #44]	; (9ef4 <nrfx_spim_0_irq_handler+0x38>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9ec8:	2500      	movs	r5, #0
    9eca:	f8c3 5118 	str.w	r5, [r3, #280]	; 0x118
    9ece:	4629      	mov	r1, r5
    9ed0:	4620      	mov	r0, r4
    9ed2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    9ed6:	f003 ff83 	bl	dde0 <set_ss_pin_state>
    p_cb->transfer_in_progress = false;
    9eda:	7765      	strb	r5, [r4, #29]
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    9edc:	7225      	strb	r5, [r4, #8]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    9ede:	e9d4 3100 	ldrd	r3, r1, [r4]
    9ee2:	f104 0008 	add.w	r0, r4, #8
    irq_handler(NRF_SPIM0, &m_cb[NRFX_SPIM0_INST_IDX]);
}
    9ee6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    9eea:	4718      	bx	r3
}
    9eec:	bd70      	pop	{r4, r5, r6, pc}
    9eee:	bf00      	nop
    9ef0:	40003000 	.word	0x40003000
    9ef4:	20001980 	.word	0x20001980

00009ef8 <nrfx_timer_init>:
static timer_control_block_t m_cb[NRFX_TIMER_ENABLED_COUNT];

nrfx_err_t nrfx_timer_init(nrfx_timer_t const *        p_instance,
                           nrfx_timer_config_t const * p_config,
                           nrfx_timer_event_handler_t  timer_event_handler)
{
    9ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
    9efa:	7907      	ldrb	r7, [r0, #4]
#endif
    NRFX_ASSERT(p_config);

    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    9efc:	4e20      	ldr	r6, [pc, #128]	; (9f80 <nrfx_timer_init+0x88>)
{
    9efe:	460d      	mov	r5, r1
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    9f00:	210c      	movs	r1, #12
    9f02:	4379      	muls	r1, r7
{
    9f04:	4604      	mov	r4, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    9f06:	1870      	adds	r0, r6, r1
    9f08:	7a03      	ldrb	r3, [r0, #8]
    9f0a:	2b00      	cmp	r3, #0
    9f0c:	d135      	bne.n	9f7a <nrfx_timer_init+0x82>
        return err_code;
    }

    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));

    p_cb->handler = timer_event_handler;
    9f0e:	5072      	str	r2, [r6, r1]
    p_cb->context = p_config->p_context;
    9f10:	686a      	ldr	r2, [r5, #4]
    9f12:	6042      	str	r2, [r0, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9f14:	469c      	mov	ip, r3

    uint8_t i;
    for (i = 0; i < p_instance->cc_channel_count; ++i)
    9f16:	7961      	ldrb	r1, [r4, #5]
    {
        nrf_timer_event_clear(p_instance->p_reg,
    9f18:	6820      	ldr	r0, [r4, #0]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
    9f1a:	b2da      	uxtb	r2, r3
    9f1c:	4291      	cmp	r1, r2
    9f1e:	d824      	bhi.n	9f6a <nrfx_timer_init+0x72>
                              nrf_timer_compare_event_get(i));
    }

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
        p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    9f20:	f340 3007 	sbfx	r0, r0, #12, #8
    9f24:	f7fa f8a0 	bl	4068 <arch_irq_enable>

    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
    9f28:	6821      	ldr	r1, [r4, #0]
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
    9f2a:	786b      	ldrb	r3, [r5, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
    9f2c:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    9f30:	4814      	ldr	r0, [pc, #80]	; (9f84 <nrfx_timer_init+0x8c>)
    9f32:	f022 0203 	bic.w	r2, r2, #3
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
    9f36:	f003 0303 	and.w	r3, r3, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
    9f3a:	4313      	orrs	r3, r2
    9f3c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nrf_timer_bit_width_set(p_instance->p_reg, p_config->bit_width);
    9f40:	6821      	ldr	r1, [r4, #0]
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
    9f42:	78ab      	ldrb	r3, [r5, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
    9f44:	f8d1 2508 	ldr.w	r2, [r1, #1288]	; 0x508
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
    9f48:	f003 0303 	and.w	r3, r3, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
    9f4c:	f022 0203 	bic.w	r2, r2, #3
    9f50:	4313      	orrs	r3, r2
    9f52:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
    nrf_timer_prescaler_set(p_instance->p_reg, (uint32_t)p_config->frequency);
    9f56:	6823      	ldr	r3, [r4, #0]
    9f58:	782a      	ldrb	r2, [r5, #0]
    p_reg->PRESCALER = prescaler_factor;
    9f5a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    9f5e:	230c      	movs	r3, #12
    9f60:	fb03 6607 	mla	r6, r3, r7, r6
    9f64:	2301      	movs	r3, #1
    9f66:	7233      	strb	r3, [r6, #8]
}
    9f68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
}

NRF_STATIC_INLINE nrf_timer_event_t nrf_timer_compare_event_get(uint32_t channel)
{
    return (nrf_timer_event_t)NRFX_OFFSETOF(NRF_TIMER_Type, EVENTS_COMPARE[channel]);
    9f6a:	0092      	lsls	r2, r2, #2
    9f6c:	f502 72a0 	add.w	r2, r2, #320	; 0x140
    9f70:	3301      	adds	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9f72:	f840 c002 	str.w	ip, [r0, r2]
    9f76:	5882      	ldr	r2, [r0, r2]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
    9f78:	e7cd      	b.n	9f16 <nrfx_timer_init+0x1e>
        return err_code;
    9f7a:	4803      	ldr	r0, [pc, #12]	; (9f88 <nrfx_timer_init+0x90>)
    9f7c:	e7f4      	b.n	9f68 <nrfx_timer_init+0x70>
    9f7e:	bf00      	nop
    9f80:	200019a0 	.word	0x200019a0
    9f84:	0bad0000 	.word	0x0bad0000
    9f88:	0bad0005 	.word	0x0bad0005

00009f8c <nrfx_timer_disable>:
}

void nrfx_timer_disable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
    9f8c:	6803      	ldr	r3, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9f8e:	2201      	movs	r2, #1
    9f90:	611a      	str	r2, [r3, #16]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
    9f92:	7901      	ldrb	r1, [r0, #4]
    9f94:	4b02      	ldr	r3, [pc, #8]	; (9fa0 <nrfx_timer_disable+0x14>)
    9f96:	200c      	movs	r0, #12
    9f98:	fb00 3301 	mla	r3, r0, r1, r3
    9f9c:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Disabled instance: %d.", p_instance->instance_id);
}
    9f9e:	4770      	bx	lr
    9fa0:	200019a0 	.word	0x200019a0

00009fa4 <nrfx_timer_uninit>:
{
    9fa4:	b538      	push	{r3, r4, r5, lr}
    9fa6:	4604      	mov	r4, r0
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    9fa8:	6800      	ldr	r0, [r0, #0]
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    9faa:	f340 3007 	sbfx	r0, r0, #12, #8
    9fae:	f7fa f869 	bl	4084 <arch_irq_disable>
    nrf_timer_shorts_disable(p_instance->p_reg, DISABLE_ALL);
    9fb2:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS &= ~(mask);
    9fb4:	2500      	movs	r5, #0
    9fb6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    9fba:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
    nrf_timer_int_disable(p_instance->p_reg, DISABLE_ALL);
    9fbe:	6823      	ldr	r3, [r4, #0]
    p_reg->INTENCLR = mask;
    9fc0:	f04f 32ff 	mov.w	r2, #4294967295
    9fc4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    nrfx_timer_disable(p_instance);
    9fc8:	4620      	mov	r0, r4
    9fca:	f7ff ffdf 	bl	9f8c <nrfx_timer_disable>
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
    9fce:	7922      	ldrb	r2, [r4, #4]
    9fd0:	4b02      	ldr	r3, [pc, #8]	; (9fdc <nrfx_timer_uninit+0x38>)
    9fd2:	210c      	movs	r1, #12
    9fd4:	fb01 3302 	mla	r3, r1, r2, r3
    9fd8:	721d      	strb	r5, [r3, #8]
}
    9fda:	bd38      	pop	{r3, r4, r5, pc}
    9fdc:	200019a0 	.word	0x200019a0

00009fe0 <nrfx_timer_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TIMER2_ENABLED)
void nrfx_timer_2_irq_handler(void)
{
    9fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9fe4:	4c0f      	ldr	r4, [pc, #60]	; (a024 <nrfx_timer_2_irq_handler+0x44>)
    return p_reg->INTENSET & mask;
    9fe6:	4f10      	ldr	r7, [pc, #64]	; (a028 <nrfx_timer_2_irq_handler+0x48>)
            if (p_cb->handler)
    9fe8:	4e10      	ldr	r6, [pc, #64]	; (a02c <nrfx_timer_2_irq_handler+0x4c>)
{
    9fea:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE nrf_timer_int_mask_t nrf_timer_compare_int_get(uint32_t channel)
{
    return (nrf_timer_int_mask_t)
    9fec:	f44f 3880 	mov.w	r8, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9ff0:	6823      	ldr	r3, [r4, #0]
        if (nrf_timer_event_check(p_reg, event) &&
    9ff2:	b17b      	cbz	r3, a014 <nrfx_timer_2_irq_handler+0x34>
    return p_reg->INTENSET & mask;
    9ff4:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
    return (nrf_timer_int_mask_t)
    9ff8:	fa08 f205 	lsl.w	r2, r8, r5
    9ffc:	421a      	tst	r2, r3
    9ffe:	d009      	beq.n	a014 <nrfx_timer_2_irq_handler+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    a000:	2300      	movs	r3, #0
    a002:	6023      	str	r3, [r4, #0]
    a004:	6823      	ldr	r3, [r4, #0]
            if (p_cb->handler)
    a006:	6833      	ldr	r3, [r6, #0]
    a008:	b123      	cbz	r3, a014 <nrfx_timer_2_irq_handler+0x34>
                p_cb->handler(event, p_cb->context);
    a00a:	f504 40c0 	add.w	r0, r4, #24576	; 0x6000
    a00e:	6871      	ldr	r1, [r6, #4]
    a010:	b280      	uxth	r0, r0
    a012:	4798      	blx	r3
    for (i = 0; i < channel_count; ++i)
    a014:	3501      	adds	r5, #1
    a016:	2d04      	cmp	r5, #4
    a018:	f104 0404 	add.w	r4, r4, #4
    a01c:	d1e8      	bne.n	9ff0 <nrfx_timer_2_irq_handler+0x10>
    irq_handler(NRF_TIMER2, &m_cb[NRFX_TIMER2_INST_IDX],
        NRF_TIMER_CC_CHANNEL_COUNT(2));
}
    a01e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a022:	bf00      	nop
    a024:	4000a140 	.word	0x4000a140
    a028:	4000a000 	.word	0x4000a000
    a02c:	200019a0 	.word	0x200019a0

0000a030 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    a030:	4b05      	ldr	r3, [pc, #20]	; (a048 <ep_state_access+0x18>)
    a032:	f010 0f80 	tst.w	r0, #128	; 0x80
    a036:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    a03a:	bf08      	it	eq
    a03c:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    a03e:	f000 000f 	and.w	r0, r0, #15
}
    a042:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    a046:	4770      	bx	lr
    a048:	20001b54 	.word	0x20001b54

0000a04c <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    a04c:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    a04e:	4a07      	ldr	r2, [pc, #28]	; (a06c <ev_usbreset_handler+0x20>)
    a050:	2300      	movs	r3, #0
    a052:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    a054:	4a06      	ldr	r2, [pc, #24]	; (a070 <ev_usbreset_handler+0x24>)
    a056:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    a058:	2301      	movs	r3, #1
    a05a:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    a05c:	4b05      	ldr	r3, [pc, #20]	; (a074 <ev_usbreset_handler+0x28>)
    a05e:	a801      	add	r0, sp, #4
    a060:	681b      	ldr	r3, [r3, #0]
    a062:	4798      	blx	r3
}
    a064:	b003      	add	sp, #12
    a066:	f85d fb04 	ldr.w	pc, [sp], #4
    a06a:	bf00      	nop
    a06c:	20001fdd 	.word	0x20001fdd
    a070:	20001fdc 	.word	0x20001fdc
    a074:	20001bec 	.word	0x20001bec

0000a078 <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    a078:	b513      	push	{r0, r1, r4, lr}
    return p_reg->EVENTCAUSE;
    a07a:	4b19      	ldr	r3, [pc, #100]	; (a0e0 <ev_usbevent_handler+0x68>)
    a07c:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    a080:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    a084:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    a086:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    a08a:	d508      	bpl.n	a09e <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    a08c:	4b15      	ldr	r3, [pc, #84]	; (a0e4 <ev_usbevent_handler+0x6c>)
    a08e:	2201      	movs	r2, #1
    a090:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    a092:	2302      	movs	r3, #2
    a094:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    a096:	4b14      	ldr	r3, [pc, #80]	; (a0e8 <ev_usbevent_handler+0x70>)
    a098:	a801      	add	r0, sp, #4
    a09a:	681b      	ldr	r3, [r3, #0]
    a09c:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    a09e:	05a2      	lsls	r2, r4, #22
    a0a0:	d508      	bpl.n	a0b4 <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    a0a2:	4b10      	ldr	r3, [pc, #64]	; (a0e4 <ev_usbevent_handler+0x6c>)
    a0a4:	2200      	movs	r2, #0
    a0a6:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    a0a8:	2303      	movs	r3, #3
    a0aa:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    a0ac:	4b0e      	ldr	r3, [pc, #56]	; (a0e8 <ev_usbevent_handler+0x70>)
    a0ae:	a801      	add	r0, sp, #4
    a0b0:	681b      	ldr	r3, [r3, #0]
    a0b2:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    a0b4:	0563      	lsls	r3, r4, #21
    a0b6:	d510      	bpl.n	a0da <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    a0b8:	4b0a      	ldr	r3, [pc, #40]	; (a0e4 <ev_usbevent_handler+0x6c>)
    a0ba:	781a      	ldrb	r2, [r3, #0]
    a0bc:	b16a      	cbz	r2, a0da <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    a0be:	2200      	movs	r2, #0
    a0c0:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    a0c2:	4b07      	ldr	r3, [pc, #28]	; (a0e0 <ev_usbevent_handler+0x68>)
    a0c4:	2201      	movs	r2, #1
    a0c6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a0ca:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    a0cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    a0ce:	2304      	movs	r3, #4
    a0d0:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    a0d2:	4b05      	ldr	r3, [pc, #20]	; (a0e8 <ev_usbevent_handler+0x70>)
    a0d4:	a801      	add	r0, sp, #4
    a0d6:	681b      	ldr	r3, [r3, #0]
    a0d8:	4798      	blx	r3
        }
    }
}
    a0da:	b002      	add	sp, #8
    a0dc:	bd10      	pop	{r4, pc}
    a0de:	bf00      	nop
    a0e0:	40027000 	.word	0x40027000
    a0e4:	20001fdd 	.word	0x20001fdd
    a0e8:	20001bec 	.word	0x20001bec

0000a0ec <usbd_errata_187_211_begin>:
	__asm__ volatile(
    a0ec:	f04f 0340 	mov.w	r3, #64	; 0x40
    a0f0:	f3ef 8011 	mrs	r0, BASEPRI
    a0f4:	f383 8812 	msr	BASEPRI_MAX, r3
    a0f8:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    a0fc:	4b0a      	ldr	r3, [pc, #40]	; (a128 <usbd_errata_187_211_begin+0x3c>)
    a0fe:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    a102:	2203      	movs	r2, #3
    a104:	b961      	cbnz	r1, a120 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a106:	f249 3175 	movw	r1, #37749	; 0x9375
    a10a:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    a10e:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a112:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    a116:	f380 8811 	msr	BASEPRI, r0
    a11a:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    a11e:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    a120:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    a124:	e7f7      	b.n	a116 <usbd_errata_187_211_begin+0x2a>
    a126:	bf00      	nop
    a128:	4006e000 	.word	0x4006e000

0000a12c <usbd_errata_187_211_end>:
	__asm__ volatile(
    a12c:	f04f 0340 	mov.w	r3, #64	; 0x40
    a130:	f3ef 8011 	mrs	r0, BASEPRI
    a134:	f383 8812 	msr	BASEPRI_MAX, r3
    a138:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    a13c:	4b0a      	ldr	r3, [pc, #40]	; (a168 <usbd_errata_187_211_end+0x3c>)
    a13e:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    a142:	b961      	cbnz	r1, a15e <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a144:	f249 3275 	movw	r2, #37749	; 0x9375
    a148:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    a14c:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    a150:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    a154:	f380 8811 	msr	BASEPRI, r0
    a158:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    a15c:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    a15e:	2200      	movs	r2, #0
    a160:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    a164:	e7f6      	b.n	a154 <usbd_errata_187_211_end+0x28>
    a166:	bf00      	nop
    a168:	4006e000 	.word	0x4006e000

0000a16c <nrfx_usbd_feeder_flash>:
{
    a16c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a16e:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    a170:	4f0b      	ldr	r7, [pc, #44]	; (a1a0 <nrfx_usbd_feeder_flash+0x34>)
    a172:	429a      	cmp	r2, r3
    a174:	bf28      	it	cs
    a176:	461a      	movcs	r2, r3
{
    a178:	460c      	mov	r4, r1
    a17a:	4615      	mov	r5, r2
    a17c:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    a17e:	6809      	ldr	r1, [r1, #0]
    a180:	4638      	mov	r0, r7
    a182:	f003 fa05 	bl	d590 <memcpy>
    p_next->size = tx_size;
    a186:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->size -= tx_size;
    a18a:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    a18c:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
    a18e:	1b40      	subs	r0, r0, r5
    p_transfer->p_data.addr += tx_size;
    a190:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
    a192:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    a194:	6023      	str	r3, [r4, #0]
}
    a196:	3800      	subs	r0, #0
    a198:	bf18      	it	ne
    a19a:	2001      	movne	r0, #1
    a19c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a19e:	bf00      	nop
    a1a0:	200019ac 	.word	0x200019ac

0000a1a4 <nrfx_usbd_feeder_flash_zlp>:
{
    a1a4:	b570      	push	{r4, r5, r6, lr}
    a1a6:	684b      	ldr	r3, [r1, #4]
    a1a8:	429a      	cmp	r2, r3
    a1aa:	bf28      	it	cs
    a1ac:	461a      	movcs	r2, r3
    a1ae:	4606      	mov	r6, r0
    a1b0:	460d      	mov	r5, r1
    a1b2:	4614      	mov	r4, r2
    if (tx_size != 0)
    a1b4:	b182      	cbz	r2, a1d8 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    a1b6:	6809      	ldr	r1, [r1, #0]
    a1b8:	4808      	ldr	r0, [pc, #32]	; (a1dc <nrfx_usbd_feeder_flash_zlp+0x38>)
    a1ba:	f003 f9e9 	bl	d590 <memcpy>
        p_next->p_data.tx = p_buffer;
    a1be:	4b07      	ldr	r3, [pc, #28]	; (a1dc <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
    a1c0:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
    a1c4:	686b      	ldr	r3, [r5, #4]
    a1c6:	1b1b      	subs	r3, r3, r4
    a1c8:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    a1ca:	682b      	ldr	r3, [r5, #0]
    a1cc:	4423      	add	r3, r4
}
    a1ce:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    a1d0:	602b      	str	r3, [r5, #0]
}
    a1d2:	bf18      	it	ne
    a1d4:	2001      	movne	r0, #1
    a1d6:	bd70      	pop	{r4, r5, r6, pc}
    a1d8:	4613      	mov	r3, r2
    a1da:	e7f1      	b.n	a1c0 <nrfx_usbd_feeder_flash_zlp+0x1c>
    a1dc:	200019ac 	.word	0x200019ac

0000a1e0 <ev_sof_handler>:
{
    a1e0:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    a1e2:	2300      	movs	r3, #0
    a1e4:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    a1e8:	4b0b      	ldr	r3, [pc, #44]	; (a218 <ev_sof_handler+0x38>)
    a1ea:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    a1ee:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    a1f2:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    a1f6:	4a09      	ldr	r2, [pc, #36]	; (a21c <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    a1f8:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
    a1fa:	6813      	ldr	r3, [r2, #0]
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    a1fc:	bf14      	ite	ne
    a1fe:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    a202:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
    a206:	430b      	orrs	r3, r1
    a208:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    a20a:	4b05      	ldr	r3, [pc, #20]	; (a220 <ev_sof_handler+0x40>)
    a20c:	a801      	add	r0, sp, #4
    a20e:	681b      	ldr	r3, [r3, #0]
    a210:	4798      	blx	r3
}
    a212:	b003      	add	sp, #12
    a214:	f85d fb04 	ldr.w	pc, [sp], #4
    a218:	40027000 	.word	0x40027000
    a21c:	20001be8 	.word	0x20001be8
    a220:	20001bec 	.word	0x20001bec

0000a224 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a224:	4b06      	ldr	r3, [pc, #24]	; (a240 <atomic_and.constprop.0.isra.0+0x1c>)
    a226:	f3bf 8f5b 	dmb	ish
    a22a:	e853 1f00 	ldrex	r1, [r3]
    a22e:	4001      	ands	r1, r0
    a230:	e843 1200 	strex	r2, r1, [r3]
    a234:	2a00      	cmp	r2, #0
    a236:	d1f8      	bne.n	a22a <atomic_and.constprop.0.isra.0+0x6>
    a238:	f3bf 8f5b 	dmb	ish
}
    a23c:	4770      	bx	lr
    a23e:	bf00      	nop
    a240:	20001be4 	.word	0x20001be4

0000a244 <nrf_usbd_epin_dma_handler>:
{
    a244:	b508      	push	{r3, lr}
    m_dma_pending = false;
    a246:	4b0c      	ldr	r3, [pc, #48]	; (a278 <nrf_usbd_epin_dma_handler+0x34>)
    a248:	2200      	movs	r2, #0
    a24a:	701a      	strb	r2, [r3, #0]
{
    a24c:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    a24e:	f7ff feef 	bl	a030 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a252:	7b83      	ldrb	r3, [r0, #14]
    a254:	2b03      	cmp	r3, #3
    a256:	d10a      	bne.n	a26e <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a258:	4608      	mov	r0, r1
    a25a:	f003 fe23 	bl	dea4 <ep2bit>
    a25e:	2301      	movs	r3, #1
    a260:	fa03 f000 	lsl.w	r0, r3, r0
    a264:	43c0      	mvns	r0, r0
}
    a266:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a26a:	f7ff bfdb 	b.w	a224 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    a26e:	6803      	ldr	r3, [r0, #0]
    a270:	2b00      	cmp	r3, #0
    a272:	d0f1      	beq.n	a258 <nrf_usbd_epin_dma_handler+0x14>
}
    a274:	bd08      	pop	{r3, pc}
    a276:	bf00      	nop
    a278:	20001fdb 	.word	0x20001fdb

0000a27c <nrf_usbd_ep0in_dma_handler>:
    m_dma_pending = false;
    a27c:	4b08      	ldr	r3, [pc, #32]	; (a2a0 <nrf_usbd_ep0in_dma_handler+0x24>)
    a27e:	2200      	movs	r2, #0
    a280:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a282:	4b08      	ldr	r3, [pc, #32]	; (a2a4 <nrf_usbd_ep0in_dma_handler+0x28>)
    a284:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    a288:	2a03      	cmp	r2, #3
    a28a:	d103      	bne.n	a294 <nrf_usbd_ep0in_dma_handler+0x18>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a28c:	f06f 0001 	mvn.w	r0, #1
    a290:	f7ff bfc8 	b.w	a224 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    a294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    a298:	2b00      	cmp	r3, #0
    a29a:	d0f7      	beq.n	a28c <nrf_usbd_ep0in_dma_handler+0x10>
}
    a29c:	4770      	bx	lr
    a29e:	bf00      	nop
    a2a0:	20001fdb 	.word	0x20001fdb
    a2a4:	20001ac4 	.word	0x20001ac4

0000a2a8 <usbd_ep_data_handler>:
{
    a2a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    a2aa:	2201      	movs	r2, #1
    a2ac:	fa02 f501 	lsl.w	r5, r2, r1
    a2b0:	491c      	ldr	r1, [pc, #112]	; (a324 <usbd_ep_data_handler+0x7c>)
    a2b2:	4e1d      	ldr	r6, [pc, #116]	; (a328 <usbd_ep_data_handler+0x80>)
    a2b4:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    a2b6:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    a2ba:	ea43 0305 	orr.w	r3, r3, r5
{
    a2be:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    a2c0:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    a2c2:	d024      	beq.n	a30e <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    a2c4:	f000 020f 	and.w	r2, r0, #15
    a2c8:	4b18      	ldr	r3, [pc, #96]	; (a32c <usbd_ep_data_handler+0x84>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    a2ca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    a2ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a2d2:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    a2d6:	681a      	ldr	r2, [r3, #0]
    if (ret)
    a2d8:	b132      	cbz	r2, a2e8 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    a2da:	2200      	movs	r2, #0
    a2dc:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    a2de:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    a2e0:	681b      	ldr	r3, [r3, #0]
    a2e2:	d011      	beq.n	a308 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    a2e4:	f7ff ffae 	bl	a244 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    a2e8:	6833      	ldr	r3, [r6, #0]
    a2ea:	402b      	ands	r3, r5
    a2ec:	d10a      	bne.n	a304 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a2ee:	2206      	movs	r2, #6
    a2f0:	f88d 2004 	strb.w	r2, [sp, #4]
    a2f4:	f88d 4006 	strb.w	r4, [sp, #6]
    a2f8:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    a2fc:	4b0c      	ldr	r3, [pc, #48]	; (a330 <usbd_ep_data_handler+0x88>)
    a2fe:	a801      	add	r0, sp, #4
    a300:	681b      	ldr	r3, [r3, #0]
    a302:	4798      	blx	r3
}
    a304:	b002      	add	sp, #8
    a306:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    a308:	f7ff ffb8 	bl	a27c <nrf_usbd_ep0in_dma_handler>
    a30c:	e7ec      	b.n	a2e8 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    a30e:	6833      	ldr	r3, [r6, #0]
    a310:	421d      	tst	r5, r3
    a312:	d1f7      	bne.n	a304 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    a314:	2306      	movs	r3, #6
    a316:	f88d 3004 	strb.w	r3, [sp, #4]
    a31a:	f88d 0006 	strb.w	r0, [sp, #6]
    a31e:	f88d 2007 	strb.w	r2, [sp, #7]
    a322:	e7eb      	b.n	a2fc <usbd_ep_data_handler+0x54>
    a324:	20001be8 	.word	0x20001be8
    a328:	20001be4 	.word	0x20001be4
    a32c:	0000ece6 	.word	0x0000ece6
    a330:	20001bec 	.word	0x20001bec

0000a334 <ev_setup_data_handler>:
{
    a334:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    a336:	4b05      	ldr	r3, [pc, #20]	; (a34c <ev_setup_data_handler+0x18>)
    a338:	781a      	ldrb	r2, [r3, #0]
    a33a:	4610      	mov	r0, r2
    a33c:	f003 fdb2 	bl	dea4 <ep2bit>
}
    a340:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    a344:	4601      	mov	r1, r0
    a346:	4610      	mov	r0, r2
    a348:	f7ff bfae 	b.w	a2a8 <usbd_ep_data_handler>
    a34c:	20001fdc 	.word	0x20001fdc

0000a350 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    a350:	b507      	push	{r0, r1, r2, lr}
    m_dma_pending = false;
    a352:	4b0e      	ldr	r3, [pc, #56]	; (a38c <ev_dma_epout8_handler+0x3c>)
    a354:	2200      	movs	r2, #0
    a356:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a358:	4b0d      	ldr	r3, [pc, #52]	; (a390 <ev_dma_epout8_handler+0x40>)
    a35a:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    a35e:	2a03      	cmp	r2, #3
    a360:	d010      	beq.n	a384 <ev_dma_epout8_handler+0x34>
    else if (p_state->handler.consumer == NULL)
    a362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    a366:	b96b      	cbnz	r3, a384 <ev_dma_epout8_handler+0x34>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a368:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    a36c:	f7ff ff5a 	bl	a224 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a370:	2306      	movs	r3, #6
    a372:	f88d 3004 	strb.w	r3, [sp, #4]
    a376:	2308      	movs	r3, #8
    a378:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    a37c:	4b05      	ldr	r3, [pc, #20]	; (a394 <ev_dma_epout8_handler+0x44>)
    a37e:	a801      	add	r0, sp, #4
    a380:	681b      	ldr	r3, [r3, #0]
    a382:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    a384:	b003      	add	sp, #12
    a386:	f85d fb04 	ldr.w	pc, [sp], #4
    a38a:	bf00      	nop
    a38c:	20001fdb 	.word	0x20001fdb
    a390:	20001ac4 	.word	0x20001ac4
    a394:	20001bec 	.word	0x20001bec

0000a398 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    a398:	b507      	push	{r0, r1, r2, lr}
    m_dma_pending = false;
    a39a:	4b11      	ldr	r3, [pc, #68]	; (a3e0 <ev_dma_epin8_handler+0x48>)
    a39c:	2200      	movs	r2, #0
    a39e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a3a0:	4b10      	ldr	r3, [pc, #64]	; (a3e4 <ev_dma_epin8_handler+0x4c>)
    a3a2:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    a3a6:	2a03      	cmp	r2, #3
    a3a8:	d106      	bne.n	a3b8 <ev_dma_epin8_handler+0x20>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a3aa:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    a3ae:	b003      	add	sp, #12
    a3b0:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a3b4:	f7ff bf36 	b.w	a224 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    a3b8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    a3bc:	b96b      	cbnz	r3, a3da <ev_dma_epin8_handler+0x42>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a3be:	f46f 7080 	mvn.w	r0, #256	; 0x100
    a3c2:	f7ff ff2f 	bl	a224 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a3c6:	2306      	movs	r3, #6
    a3c8:	f88d 3004 	strb.w	r3, [sp, #4]
    a3cc:	2388      	movs	r3, #136	; 0x88
    a3ce:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    a3d2:	4b05      	ldr	r3, [pc, #20]	; (a3e8 <ev_dma_epin8_handler+0x50>)
    a3d4:	a801      	add	r0, sp, #4
    a3d6:	681b      	ldr	r3, [r3, #0]
    a3d8:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    a3da:	b003      	add	sp, #12
    a3dc:	f85d fb04 	ldr.w	pc, [sp], #4
    a3e0:	20001fdb 	.word	0x20001fdb
    a3e4:	20001ac4 	.word	0x20001ac4
    a3e8:	20001bec 	.word	0x20001bec

0000a3ec <usbd_enable>:

/**
 * @brief Enable USBD peripheral.
 */
static void usbd_enable(void)
{
    a3ec:	b508      	push	{r3, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a3ee:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x10)
    a3f2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    a3f6:	2b10      	cmp	r3, #16
    a3f8:	d101      	bne.n	a3fe <usbd_enable+0x12>
    if (nrfx_usbd_errata_187())
    {
        usbd_errata_187_211_begin();
    a3fa:	f7ff fe77 	bl	a0ec <usbd_errata_187_211_begin>
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    a3fe:	4b0d      	ldr	r3, [pc, #52]	; (a434 <usbd_enable+0x48>)
    a400:	2201      	movs	r2, #1
    a402:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    a406:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    a40a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    a40e:	0512      	lsls	r2, r2, #20
    a410:	d5fb      	bpl.n	a40a <usbd_enable+0x1e>
    p_reg->EVENTCAUSE = flags;
    a412:	f44f 6200 	mov.w	r2, #2048	; 0x800
    a416:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    a41a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a41e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x10)
    a422:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    a426:	2b10      	cmp	r3, #16
    a428:	d103      	bne.n	a432 <usbd_enable+0x46>

    if (nrfx_usbd_errata_187())
    {
        usbd_errata_187_211_end();
    }
}
    a42a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
    a42e:	f7ff be7d 	b.w	a12c <usbd_errata_187_211_end>
}
    a432:	bd08      	pop	{r3, pc}
    a434:	40027000 	.word	0x40027000

0000a438 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    a438:	4a02      	ldr	r2, [pc, #8]	; (a444 <nrfx_usbd_uninit+0xc>)
    a43a:	2300      	movs	r3, #0
    a43c:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    a43e:	4a02      	ldr	r2, [pc, #8]	; (a448 <nrfx_usbd_uninit+0x10>)
    a440:	7013      	strb	r3, [r2, #0]
    return;
}
    a442:	4770      	bx	lr
    a444:	20001bec 	.word	0x20001bec
    a448:	20001fde 	.word	0x20001fde

0000a44c <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    a44c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    p_reg->EVENTCAUSE = flags;
    a44e:	4c20      	ldr	r4, [pc, #128]	; (a4d0 <nrfx_usbd_enable+0x84>)
    a450:	f44f 6300 	mov.w	r3, #2048	; 0x800
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a454:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    a458:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    a45c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD, NRF_USBD_EVENTCAUSE_READY_MASK);

    usbd_enable();
    a460:	f7ff ffc4 	bl	a3ec <usbd_enable>
            if (var1 == 0x10)
    a464:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
    a468:	2b10      	cmp	r3, #16
    a46a:	d104      	bne.n	a476 <nrfx_usbd_enable+0x2a>

    if (nrfx_usbd_errata_223() && m_first_enable)
    a46c:	4e19      	ldr	r6, [pc, #100]	; (a4d4 <nrfx_usbd_enable+0x88>)
    a46e:	7833      	ldrb	r3, [r6, #0]
    a470:	b9fb      	cbnz	r3, a4b2 <nrfx_usbd_enable+0x66>
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
#endif
    {
        usbd_errata_187_211_begin();
    a472:	f7ff fe3b 	bl	a0ec <usbd_errata_187_211_begin>
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    a476:	4a16      	ldr	r2, [pc, #88]	; (a4d0 <nrfx_usbd_enable+0x84>)
    a478:	2380      	movs	r3, #128	; 0x80
    a47a:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    a47e:	2300      	movs	r3, #0
    a480:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    a484:	4a14      	ldr	r2, [pc, #80]	; (a4d8 <nrfx_usbd_enable+0x8c>)
    a486:	f240 11ff 	movw	r1, #511	; 0x1ff
    a48a:	6011      	str	r1, [r2, #0]
    m_ep_dma_waiting = 0;
    a48c:	4a13      	ldr	r2, [pc, #76]	; (a4dc <nrfx_usbd_enable+0x90>)
    a48e:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    a490:	4a13      	ldr	r2, [pc, #76]	; (a4e0 <nrfx_usbd_enable+0x94>)
    a492:	7013      	strb	r3, [r2, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    a494:	4a13      	ldr	r2, [pc, #76]	; (a4e4 <nrfx_usbd_enable+0x98>)
    a496:	7013      	strb	r3, [r2, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    a498:	4b13      	ldr	r3, [pc, #76]	; (a4e8 <nrfx_usbd_enable+0x9c>)
    a49a:	2202      	movs	r2, #2
    a49c:	701a      	strb	r2, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    a49e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x10)
    a4a2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    a4a6:	2b10      	cmp	r3, #16
    a4a8:	d110      	bne.n	a4cc <nrfx_usbd_enable+0x80>
    if (nrfx_usbd_errata_187())
#endif
    {
        usbd_errata_187_211_end();
    }
}
    a4aa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        usbd_errata_187_211_end();
    a4ae:	f7ff be3d 	b.w	a12c <usbd_errata_187_211_end>
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    a4b2:	2700      	movs	r7, #0
    a4b4:	f8c4 7500 	str.w	r7, [r4, #1280]	; 0x500
    (void) p_reg->ENABLE;
    a4b8:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
         usbd_enable();
    a4bc:	f7ff ff96 	bl	a3ec <usbd_enable>
         m_first_enable = false;
    a4c0:	7037      	strb	r7, [r6, #0]
    a4c2:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
    a4c6:	2b10      	cmp	r3, #16
    a4c8:	d1d5      	bne.n	a476 <nrfx_usbd_enable+0x2a>
    a4ca:	e7d2      	b.n	a472 <nrfx_usbd_enable+0x26>
}
    a4cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a4ce:	bf00      	nop
    a4d0:	40027000 	.word	0x40027000
    a4d4:	200001a3 	.word	0x200001a3
    a4d8:	20001be8 	.word	0x20001be8
    a4dc:	20001be4 	.word	0x20001be4
    a4e0:	20001fdb 	.word	0x20001fdb
    a4e4:	20001fdc 	.word	0x20001fdc
    a4e8:	20001fde 	.word	0x20001fde

0000a4ec <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    a4ec:	4b0a      	ldr	r3, [pc, #40]	; (a518 <nrfx_usbd_start+0x2c>)
    a4ee:	2200      	movs	r2, #0
{
    a4f0:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    a4f2:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
    a4f4:	4a09      	ldr	r2, [pc, #36]	; (a51c <nrfx_usbd_start+0x30>)
    a4f6:	4b0a      	ldr	r3, [pc, #40]	; (a520 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    a4f8:	4c0a      	ldr	r4, [pc, #40]	; (a524 <nrfx_usbd_start+0x38>)
    a4fa:	2800      	cmp	r0, #0
    a4fc:	bf08      	it	eq
    a4fe:	4613      	moveq	r3, r2
    a500:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    a504:	2027      	movs	r0, #39	; 0x27
    a506:	f7f9 fdaf 	bl	4068 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    a50a:	2301      	movs	r3, #1
    a50c:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    a510:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    a514:	bd10      	pop	{r4, pc}
    a516:	bf00      	nop
    a518:	20001fdd 	.word	0x20001fdd
    a51c:	01c01407 	.word	0x01c01407
    a520:	01e01407 	.word	0x01e01407
    a524:	40027000 	.word	0x40027000

0000a528 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    a528:	4b03      	ldr	r3, [pc, #12]	; (a538 <nrfx_usbd_is_enabled+0x10>)
    a52a:	7818      	ldrb	r0, [r3, #0]
}
    a52c:	2801      	cmp	r0, #1
    a52e:	bf94      	ite	ls
    a530:	2000      	movls	r0, #0
    a532:	2001      	movhi	r0, #1
    a534:	4770      	bx	lr
    a536:	bf00      	nop
    a538:	20001fde 	.word	0x20001fde

0000a53c <nrfx_usbd_suspend>:
{
    return (nrfx_usbd_is_enabled() && NRFX_IRQ_IS_ENABLED(USBD_IRQn));
}

bool nrfx_usbd_suspend(void)
{
    a53c:	b510      	push	{r4, lr}
	__asm__ volatile(
    a53e:	f04f 0340 	mov.w	r3, #64	; 0x40
    a542:	f3ef 8111 	mrs	r1, BASEPRI
    a546:	f383 8812 	msr	BASEPRI_MAX, r3
    a54a:	f3bf 8f6f 	isb	sy
    bool suspended = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend)
    a54e:	4b0f      	ldr	r3, [pc, #60]	; (a58c <nrfx_usbd_suspend+0x50>)
    a550:	781b      	ldrb	r3, [r3, #0]
    a552:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    a556:	b193      	cbz	r3, a57e <nrfx_usbd_suspend+0x42>
    return p_reg->EVENTCAUSE;
    a558:	4b0d      	ldr	r3, [pc, #52]	; (a590 <nrfx_usbd_suspend+0x54>)
    a55a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    {
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    a55e:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    a562:	d10c      	bne.n	a57e <nrfx_usbd_suspend+0x42>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    a564:	2401      	movs	r4, #1
    a566:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    a56a:	f8d3 452c 	ldr.w	r4, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    a56e:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
        {
            nrf_usbd_lowpower_enable(NRF_USBD);
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    a572:	05a4      	lsls	r4, r4, #22
    a574:	d504      	bpl.n	a580 <nrfx_usbd_suspend+0x44>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    a576:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    a57a:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    a57e:	2000      	movs	r0, #0
	__asm__ volatile(
    a580:	f381 8811 	msr	BASEPRI, r1
    a584:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return suspended;
}
    a588:	bd10      	pop	{r4, pc}
    a58a:	bf00      	nop
    a58c:	20001fdd 	.word	0x20001fdd
    a590:	40027000 	.word	0x40027000

0000a594 <nrfx_usbd_init>:
{
    a594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    a596:	4b1c      	ldr	r3, [pc, #112]	; (a608 <nrfx_usbd_init+0x74>)
    a598:	781c      	ldrb	r4, [r3, #0]
    a59a:	bb94      	cbnz	r4, a602 <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
    a59c:	4a1b      	ldr	r2, [pc, #108]	; (a60c <nrfx_usbd_init+0x78>)
    a59e:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    a5a0:	2201      	movs	r2, #1
    a5a2:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    a5a4:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    a5a8:	4626      	mov	r6, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    a5aa:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    a5ae:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    a5b2:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    a5b4:	bf14      	ite	ne
    a5b6:	4639      	movne	r1, r7
    a5b8:	2140      	moveq	r1, #64	; 0x40
    a5ba:	4628      	mov	r0, r5
    a5bc:	f003 fc92 	bl	dee4 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    a5c0:	4628      	mov	r0, r5
    a5c2:	f7ff fd35 	bl	a030 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    a5c6:	3401      	adds	r4, #1
    a5c8:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    a5ca:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
    a5cc:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
    a5ce:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    a5d0:	d1eb      	bne.n	a5aa <nrfx_usbd_init+0x16>
    a5d2:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    a5d4:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    a5d8:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    a5da:	f014 0f08 	tst.w	r4, #8
    a5de:	b2e6      	uxtb	r6, r4
    a5e0:	bf14      	ite	ne
    a5e2:	4639      	movne	r1, r7
    a5e4:	2140      	moveq	r1, #64	; 0x40
    a5e6:	4630      	mov	r0, r6
    a5e8:	f003 fc7c 	bl	dee4 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    a5ec:	4630      	mov	r0, r6
    a5ee:	f7ff fd1f 	bl	a030 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    a5f2:	3401      	adds	r4, #1
    a5f4:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    a5f6:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    a5f8:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    a5fa:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    a5fc:	d1ed      	bne.n	a5da <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
    a5fe:	4804      	ldr	r0, [pc, #16]	; (a610 <nrfx_usbd_init+0x7c>)
}
    a600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
    a602:	4804      	ldr	r0, [pc, #16]	; (a614 <nrfx_usbd_init+0x80>)
    a604:	e7fc      	b.n	a600 <nrfx_usbd_init+0x6c>
    a606:	bf00      	nop
    a608:	20001fde 	.word	0x20001fde
    a60c:	20001bec 	.word	0x20001bec
    a610:	0bad0000 	.word	0x0bad0000
    a614:	0bad0005 	.word	0x0bad0005

0000a618 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    a618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a61c:	4604      	mov	r4, r0
	__asm__ volatile(
    a61e:	f04f 0340 	mov.w	r3, #64	; 0x40
    a622:	f3ef 8611 	mrs	r6, BASEPRI
    a626:	f383 8812 	msr	BASEPRI_MAX, r3
    a62a:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    a62e:	f010 090f 	ands.w	r9, r0, #15
    a632:	d103      	bne.n	a63c <nrfx_usbd_ep_transfer+0x24>
    a634:	4b27      	ldr	r3, [pc, #156]	; (a6d4 <nrfx_usbd_ep_transfer+0xbc>)
    a636:	781b      	ldrb	r3, [r3, #0]
    a638:	4283      	cmp	r3, r0
    a63a:	d147      	bne.n	a6cc <nrfx_usbd_ep_transfer+0xb4>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    a63c:	4b26      	ldr	r3, [pc, #152]	; (a6d8 <nrfx_usbd_ep_transfer+0xc0>)
    a63e:	4f27      	ldr	r7, [pc, #156]	; (a6dc <nrfx_usbd_ep_transfer+0xc4>)
    a640:	681a      	ldr	r2, [r3, #0]
    a642:	683b      	ldr	r3, [r7, #0]
    a644:	43d2      	mvns	r2, r2
    a646:	b292      	uxth	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
    a648:	4620      	mov	r0, r4
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    a64a:	431a      	orrs	r2, r3
    const uint8_t ep_bitpos = ep2bit(ep);
    a64c:	f003 fc2a 	bl	dea4 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    a650:	f04f 0801 	mov.w	r8, #1
    a654:	fa08 f800 	lsl.w	r8, r8, r0
    a658:	ea12 0f08 	tst.w	r2, r8
    a65c:	d138      	bne.n	a6d0 <nrfx_usbd_ep_transfer+0xb8>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    a65e:	4620      	mov	r0, r4
    a660:	f7ff fce6 	bl	a030 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    a664:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
    a666:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    a668:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    a66a:	fb03 f309 	mul.w	r3, r3, r9
        if (NRF_USBD_EPIN_CHECK(ep))
    a66e:	d529      	bpl.n	a6c4 <nrfx_usbd_ep_transfer+0xac>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    a670:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    a672:	6888      	ldr	r0, [r1, #8]
    a674:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    a678:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    a67c:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    a680:	d11d      	bne.n	a6be <nrfx_usbd_ep_transfer+0xa6>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    a682:	4a17      	ldr	r2, [pc, #92]	; (a6e0 <nrfx_usbd_ep_transfer+0xc8>)
    a684:	4c17      	ldr	r4, [pc, #92]	; (a6e4 <nrfx_usbd_ep_transfer+0xcc>)
    a686:	2800      	cmp	r0, #0
    a688:	bf08      	it	eq
    a68a:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    a68c:	4816      	ldr	r0, [pc, #88]	; (a6e8 <nrfx_usbd_ep_transfer+0xd0>)
    a68e:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    a690:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
    a692:	c907      	ldmia	r1, {r0, r1, r2}
    a694:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    a698:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
    a69a:	2300      	movs	r3, #0
    a69c:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    a69e:	73ab      	strb	r3, [r5, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    a6a0:	683b      	ldr	r3, [r7, #0]
        ret = NRFX_SUCCESS;
    a6a2:	4812      	ldr	r0, [pc, #72]	; (a6ec <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    a6a4:	ea43 0308 	orr.w	r3, r3, r8
    a6a8:	603b      	str	r3, [r7, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a6aa:	4b11      	ldr	r3, [pc, #68]	; (a6f0 <nrfx_usbd_ep_transfer+0xd8>)
    a6ac:	2280      	movs	r2, #128	; 0x80
    a6ae:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    a6b2:	f386 8811 	msr	BASEPRI, r6
    a6b6:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    a6ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    a6be:	4a0d      	ldr	r2, [pc, #52]	; (a6f4 <nrfx_usbd_ep_transfer+0xdc>)
    a6c0:	4c0d      	ldr	r4, [pc, #52]	; (a6f8 <nrfx_usbd_ep_transfer+0xe0>)
    a6c2:	e7e0      	b.n	a686 <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    a6c4:	4a0d      	ldr	r2, [pc, #52]	; (a6fc <nrfx_usbd_ep_transfer+0xe4>)
    a6c6:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    a6c8:	4a0d      	ldr	r2, [pc, #52]	; (a700 <nrfx_usbd_ep_transfer+0xe8>)
    a6ca:	e7e1      	b.n	a690 <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
    a6cc:	480d      	ldr	r0, [pc, #52]	; (a704 <nrfx_usbd_ep_transfer+0xec>)
    a6ce:	e7f0      	b.n	a6b2 <nrfx_usbd_ep_transfer+0x9a>
        ret = NRFX_ERROR_BUSY;
    a6d0:	480d      	ldr	r0, [pc, #52]	; (a708 <nrfx_usbd_ep_transfer+0xf0>)
    a6d2:	e7ee      	b.n	a6b2 <nrfx_usbd_ep_transfer+0x9a>
    a6d4:	20001fdc 	.word	0x20001fdc
    a6d8:	20001be8 	.word	0x20001be8
    a6dc:	20001be4 	.word	0x20001be4
    a6e0:	0000de7d 	.word	0x0000de7d
    a6e4:	0000de5b 	.word	0x0000de5b
    a6e8:	20001a58 	.word	0x20001a58
    a6ec:	0bad0000 	.word	0x0bad0000
    a6f0:	e000e100 	.word	0xe000e100
    a6f4:	0000a1a5 	.word	0x0000a1a5
    a6f8:	0000a16d 	.word	0x0000a16d
    a6fc:	200019ec 	.word	0x200019ec
    a700:	0000de29 	.word	0x0000de29
    a704:	0bad000a 	.word	0x0bad000a
    a708:	0bad000b 	.word	0x0bad000b

0000a70c <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    a70c:	f010 0f08 	tst.w	r0, #8
    a710:	4b07      	ldr	r3, [pc, #28]	; (a730 <nrfx_usbd_epout_size_get+0x24>)
    a712:	d006      	beq.n	a722 <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    a714:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    a718:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    a71c:	bf18      	it	ne
    a71e:	2000      	movne	r0, #0
    a720:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    a722:	f000 000f 	and.w	r0, r0, #15
    a726:	f500 7094 	add.w	r0, r0, #296	; 0x128
    a72a:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    a72e:	4770      	bx	lr
    a730:	40027000 	.word	0x40027000

0000a734 <usbd_dmareq_process>:
{
    a734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    a738:	4e54      	ldr	r6, [pc, #336]	; (a88c <usbd_dmareq_process+0x158>)
    a73a:	7833      	ldrb	r3, [r6, #0]
{
    a73c:	b085      	sub	sp, #20
    if (!m_dma_pending)
    a73e:	2b00      	cmp	r3, #0
    a740:	d169      	bne.n	a816 <usbd_dmareq_process+0xe2>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    a742:	f8df 814c 	ldr.w	r8, [pc, #332]	; a890 <usbd_dmareq_process+0x15c>
    a746:	4d53      	ldr	r5, [pc, #332]	; (a894 <usbd_dmareq_process+0x160>)
    a748:	f8d8 4000 	ldr.w	r4, [r8]
    a74c:	682b      	ldr	r3, [r5, #0]
    a74e:	401c      	ands	r4, r3
    a750:	d061      	beq.n	a816 <usbd_dmareq_process+0xe2>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    a752:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
    a756:	bf14      	ite	ne
    a758:	fa93 f4a3 	rbitne	r4, r3
    a75c:	fa94 f4a4 	rbiteq	r4, r4
    a760:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    a764:	f04f 0901 	mov.w	r9, #1
    a768:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a76c:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    a76e:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a772:	d953      	bls.n	a81c <usbd_dmareq_process+0xe8>
    a774:	3c10      	subs	r4, #16
    a776:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    a778:	4620      	mov	r0, r4
    a77a:	f7ff fc59 	bl	a030 <ep_state_access>
    a77e:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    a780:	4620      	mov	r0, r4
    a782:	f7ff ffc3 	bl	a70c <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    a786:	f8da 7000 	ldr.w	r7, [sl]
    a78a:	f8ba 200c 	ldrh.w	r2, [sl, #12]
    a78e:	f8da 1004 	ldr.w	r1, [sl, #4]
    a792:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    a794:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
    a796:	a802      	add	r0, sp, #8
    a798:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
    a79a:	9b02      	ldr	r3, [sp, #8]
    a79c:	2b00      	cmp	r3, #0
    a79e:	d149      	bne.n	a834 <usbd_dmareq_process+0x100>
                if (!continue_transfer)
    a7a0:	b908      	cbnz	r0, a7a6 <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
    a7a2:	f8ca 0000 	str.w	r0, [sl]
    m_dma_pending = true;
    a7a6:	2301      	movs	r3, #1
    a7a8:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
    a7aa:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    a7ac:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    a7ae:	9802      	ldr	r0, [sp, #8]
            m_ep_ready &= ~(1U << pos);
    a7b0:	ea03 0309 	and.w	r3, r3, r9
    a7b4:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    a7b6:	f8da 3008 	ldr.w	r3, [sl, #8]
            if (NRF_USBD_EPIN_CHECK(ep))
    a7ba:	b261      	sxtb	r1, r4
            p_state->transfer_cnt += transfer.size;
    a7bc:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
    a7be:	2900      	cmp	r1, #0
    a7c0:	f8ca 3008 	str.w	r3, [sl, #8]
    a7c4:	f004 0508 	and.w	r5, r4, #8
    a7c8:	4b33      	ldr	r3, [pc, #204]	; (a898 <usbd_dmareq_process+0x164>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    a7ca:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    a7ce:	da4e      	bge.n	a86e <usbd_dmareq_process+0x13a>
        if (NRF_USBD_EPISO_CHECK(ep))
    a7d0:	2d00      	cmp	r5, #0
    a7d2:	d044      	beq.n	a85e <usbd_dmareq_process+0x12a>
            p_reg->ISOIN.PTR    = ptr;
    a7d4:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    a7d8:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    a7dc:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a7de:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    a7e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a7e6:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a7ea:	2201      	movs	r2, #1
    a7ec:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    a7ee:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    a7f0:	4a2a      	ldr	r2, [pc, #168]	; (a89c <usbd_dmareq_process+0x168>)
    a7f2:	4b2b      	ldr	r3, [pc, #172]	; (a8a0 <usbd_dmareq_process+0x16c>)
    a7f4:	ea13 0321 	ands.w	r3, r3, r1, asr #32
    a7f8:	bf38      	it	cc
    a7fa:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    a7fc:	4926      	ldr	r1, [pc, #152]	; (a898 <usbd_dmareq_process+0x164>)
    a7fe:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    a802:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a806:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    a80a:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    a80c:	b91a      	cbnz	r2, a816 <usbd_dmareq_process+0xe2>
    a80e:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    a812:	2a00      	cmp	r2, #0
    a814:	d0f9      	beq.n	a80a <usbd_dmareq_process+0xd6>
}
    a816:	b005      	add	sp, #20
    a818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a81c:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
    a820:	4620      	mov	r0, r4
    a822:	f7ff fc05 	bl	a030 <ep_state_access>
                continue_transfer = p_state->handler.feeder(
    a826:	6803      	ldr	r3, [r0, #0]
    a828:	8982      	ldrh	r2, [r0, #12]
    a82a:	6841      	ldr	r1, [r0, #4]
            usbd_ep_state_t * p_state = ep_state_access(ep);
    a82c:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
    a82e:	a802      	add	r0, sp, #8
    a830:	4798      	blx	r3
    a832:	e7b5      	b.n	a7a0 <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
    a834:	9b03      	ldr	r3, [sp, #12]
    a836:	459b      	cmp	fp, r3
    a838:	d9b2      	bls.n	a7a0 <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    a83a:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    a83c:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    a83e:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    a842:	f7ff fcef 	bl	a224 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    a846:	2306      	movs	r3, #6
    a848:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    a84c:	4b15      	ldr	r3, [pc, #84]	; (a8a4 <usbd_dmareq_process+0x170>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    a84e:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    a852:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    a854:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    a858:	a801      	add	r0, sp, #4
    a85a:	4798      	blx	r3
                    continue;
    a85c:	e774      	b.n	a748 <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
    a85e:	2514      	movs	r5, #20
    a860:	fb05 3304 	mla	r3, r5, r4, r3
    a864:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    a868:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
    a86c:	e7b6      	b.n	a7dc <usbd_dmareq_process+0xa8>
        if (NRF_USBD_EPISO_CHECK(ep))
    a86e:	b12d      	cbz	r5, a87c <usbd_dmareq_process+0x148>
            p_reg->ISOOUT.PTR    = ptr;
    a870:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    a874:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    a878:	2328      	movs	r3, #40	; 0x28
    a87a:	e7b0      	b.n	a7de <usbd_dmareq_process+0xaa>
            p_reg->EPOUT[epnr].PTR    = ptr;
    a87c:	2514      	movs	r5, #20
    a87e:	fb05 3304 	mla	r3, r5, r4, r3
    a882:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    a886:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    a88a:	e7f5      	b.n	a878 <usbd_dmareq_process+0x144>
    a88c:	20001fdb 	.word	0x20001fdb
    a890:	20001be4 	.word	0x20001be4
    a894:	20001be8 	.word	0x20001be8
    a898:	40027000 	.word	0x40027000
    a89c:	0000ecd4 	.word	0x0000ecd4
    a8a0:	0000ece6 	.word	0x0000ece6
    a8a4:	20001bec 	.word	0x20001bec

0000a8a8 <ev_epdata_handler>:
{
    a8a8:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    a8aa:	4b0f      	ldr	r3, [pc, #60]	; (a8e8 <ev_epdata_handler+0x40>)
    a8ac:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    a8b0:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    a8b4:	2501      	movs	r5, #1
    while (dataepstatus)
    a8b6:	b91c      	cbnz	r4, a8c0 <ev_epdata_handler+0x18>
}
    a8b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    a8bc:	f7ff bf3a 	b.w	a734 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    a8c0:	fa94 f3a4 	rbit	r3, r4
    a8c4:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a8c8:	2b0f      	cmp	r3, #15
    a8ca:	bfc8      	it	gt
    a8cc:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    a8d0:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a8d2:	bfd4      	ite	le
    a8d4:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    a8d8:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    a8da:	fa05 f303 	lsl.w	r3, r5, r3
    a8de:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    a8e2:	f7ff fce1 	bl	a2a8 <usbd_ep_data_handler>
    a8e6:	e7e6      	b.n	a8b6 <ev_epdata_handler+0xe>
    a8e8:	40027000 	.word	0x40027000

0000a8ec <nrf_usbd_epout_dma_handler>:
    m_dma_pending = false;
    a8ec:	4b17      	ldr	r3, [pc, #92]	; (a94c <nrf_usbd_epout_dma_handler+0x60>)
{
    a8ee:	b537      	push	{r0, r1, r2, r4, r5, lr}
    m_dma_pending = false;
    a8f0:	2200      	movs	r2, #0
    a8f2:	701a      	strb	r2, [r3, #0]
{
    a8f4:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    a8f6:	f7ff fb9b 	bl	a030 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    a8fa:	7b83      	ldrb	r3, [r0, #14]
    a8fc:	2b03      	cmp	r3, #3
    a8fe:	d10d      	bne.n	a91c <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a900:	4620      	mov	r0, r4
    a902:	f003 facf 	bl	dea4 <ep2bit>
    a906:	2301      	movs	r3, #1
    a908:	fa03 f000 	lsl.w	r0, r3, r0
    a90c:	43c0      	mvns	r0, r0
    a90e:	f7ff fc89 	bl	a224 <atomic_and.constprop.0.isra.0>
}
    a912:	b003      	add	sp, #12
    a914:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    a918:	f7ff bf0c 	b.w	a734 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    a91c:	6805      	ldr	r5, [r0, #0]
    a91e:	2d00      	cmp	r5, #0
    a920:	d1f7      	bne.n	a912 <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    a922:	4620      	mov	r0, r4
    a924:	f003 fabe 	bl	dea4 <ep2bit>
    a928:	2301      	movs	r3, #1
    a92a:	fa03 f000 	lsl.w	r0, r3, r0
    a92e:	43c0      	mvns	r0, r0
    a930:	f7ff fc78 	bl	a224 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a934:	2306      	movs	r3, #6
    a936:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    a93a:	4b05      	ldr	r3, [pc, #20]	; (a950 <nrf_usbd_epout_dma_handler+0x64>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a93c:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    a940:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    a942:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    a946:	a801      	add	r0, sp, #4
    a948:	4798      	blx	r3
    a94a:	e7e2      	b.n	a912 <nrf_usbd_epout_dma_handler+0x26>
    a94c:	20001fdb 	.word	0x20001fdb
    a950:	20001bec 	.word	0x20001bec

0000a954 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    a954:	4b02      	ldr	r3, [pc, #8]	; (a960 <nrfx_usbd_ep_stall+0xc>)
    a956:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    a95a:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    a95e:	4770      	bx	lr
    a960:	40027000 	.word	0x40027000

0000a964 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    a964:	0702      	lsls	r2, r0, #28
    a966:	d413      	bmi.n	a990 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    a968:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    a96c:	f010 0f80 	tst.w	r0, #128	; 0x80
    a970:	4a08      	ldr	r2, [pc, #32]	; (a994 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    a972:	bf0b      	itete	eq
    a974:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    a978:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    a97c:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    a980:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    a984:	bf08      	it	eq
    a986:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    a988:	1e43      	subs	r3, r0, #1
    a98a:	4258      	negs	r0, r3
    a98c:	4158      	adcs	r0, r3
    a98e:	4770      	bx	lr
        return false;
    a990:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    a992:	4770      	bx	lr
    a994:	40027000 	.word	0x40027000

0000a998 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    a998:	4b04      	ldr	r3, [pc, #16]	; (a9ac <nrfx_usbd_ep_dtoggle_clear+0x14>)
    a99a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    a99e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    a9a2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    a9a6:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    a9aa:	4770      	bx	lr
    a9ac:	40027000 	.word	0x40027000

0000a9b0 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    a9b0:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    a9b2:	2208      	movs	r2, #8
    a9b4:	2100      	movs	r1, #0
{
    a9b6:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    a9b8:	f002 fdf5 	bl	d5a6 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    a9bc:	4b0e      	ldr	r3, [pc, #56]	; (a9f8 <nrfx_usbd_setup_get+0x48>)
    a9be:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    a9c2:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    a9c4:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    a9c8:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    a9ca:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    a9ce:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    a9d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    a9d6:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    a9d8:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    a9dc:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    a9e0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    a9e4:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    a9e6:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    a9ea:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    a9ee:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    a9f2:	80e3      	strh	r3, [r4, #6]
}
    a9f4:	bd10      	pop	{r4, pc}
    a9f6:	bf00      	nop
    a9f8:	40027000 	.word	0x40027000

0000a9fc <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    a9fc:	4b02      	ldr	r3, [pc, #8]	; (aa08 <nrfx_usbd_setup_data_clear+0xc>)
    a9fe:	2201      	movs	r2, #1
    aa00:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    aa02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    aa04:	4770      	bx	lr
    aa06:	bf00      	nop
    aa08:	40027000 	.word	0x40027000

0000aa0c <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    aa0c:	b513      	push	{r0, r1, r4, lr}
    m_dma_pending = false;
    aa0e:	4b12      	ldr	r3, [pc, #72]	; (aa58 <ev_dma_epout0_handler+0x4c>)
    aa10:	2200      	movs	r2, #0
    aa12:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    aa14:	4b11      	ldr	r3, [pc, #68]	; (aa5c <ev_dma_epout0_handler+0x50>)
    aa16:	7b9a      	ldrb	r2, [r3, #14]
    aa18:	2a03      	cmp	r2, #3
    aa1a:	d106      	bne.n	aa2a <ev_dma_epout0_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    aa1c:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    aa20:	b002      	add	sp, #8
    aa22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    aa26:	f7ff bbfd 	b.w	a224 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    aa2a:	681c      	ldr	r4, [r3, #0]
    aa2c:	b974      	cbnz	r4, aa4c <ev_dma_epout0_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    aa2e:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    aa32:	f7ff fbf7 	bl	a224 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    aa36:	2306      	movs	r3, #6
    aa38:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    aa3c:	4b08      	ldr	r3, [pc, #32]	; (aa60 <ev_dma_epout0_handler+0x54>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    aa3e:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    aa42:	681b      	ldr	r3, [r3, #0]
    aa44:	a801      	add	r0, sp, #4
    aa46:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    aa48:	b002      	add	sp, #8
    aa4a:	bd10      	pop	{r4, pc}
    aa4c:	b002      	add	sp, #8
    aa4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    aa52:	f7ff bfd3 	b.w	a9fc <nrfx_usbd_setup_data_clear>
    aa56:	bf00      	nop
    aa58:	20001fdb 	.word	0x20001fdb
    aa5c:	20001ac4 	.word	0x20001ac4
    aa60:	20001bec 	.word	0x20001bec

0000aa64 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    aa64:	4b02      	ldr	r3, [pc, #8]	; (aa70 <nrfx_usbd_setup_clear+0xc>)
    aa66:	2201      	movs	r2, #1
    aa68:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    aa6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    aa6c:	4770      	bx	lr
    aa6e:	bf00      	nop
    aa70:	40027000 	.word	0x40027000

0000aa74 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    aa74:	4b02      	ldr	r3, [pc, #8]	; (aa80 <nrfx_usbd_setup_stall+0xc>)
    aa76:	2201      	movs	r2, #1
    aa78:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    aa7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    aa7c:	4770      	bx	lr
    aa7e:	bf00      	nop
    aa80:	40027000 	.word	0x40027000

0000aa84 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    aa84:	4b01      	ldr	r3, [pc, #4]	; (aa8c <nrfx_usbd_last_setup_dir_get+0x8>)
    aa86:	7818      	ldrb	r0, [r3, #0]
    aa88:	4770      	bx	lr
    aa8a:	bf00      	nop
    aa8c:	20001fdc 	.word	0x20001fdc

0000aa90 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    aa90:	b510      	push	{r4, lr}
    aa92:	4602      	mov	r2, r0
	__asm__ volatile(
    aa94:	f04f 0340 	mov.w	r3, #64	; 0x40
    aa98:	f3ef 8411 	mrs	r4, BASEPRI
    aa9c:	f383 8812 	msr	BASEPRI_MAX, r3
    aaa0:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    aaa4:	f003 f9fe 	bl	dea4 <ep2bit>
    aaa8:	490d      	ldr	r1, [pc, #52]	; (aae0 <nrfx_usbd_transfer_out_drop+0x50>)
    aaaa:	2301      	movs	r3, #1
    aaac:	fa03 f000 	lsl.w	r0, r3, r0
    aab0:	680b      	ldr	r3, [r1, #0]
    aab2:	ea23 0300 	bic.w	r3, r3, r0
    aab6:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    aab8:	f012 0108 	ands.w	r1, r2, #8
    aabc:	d10a      	bne.n	aad4 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    aabe:	f002 030f 	and.w	r3, r2, #15
    aac2:	009b      	lsls	r3, r3, #2
    aac4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    aac8:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    aacc:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    aad0:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    aad4:	f384 8811 	msr	BASEPRI, r4
    aad8:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    aadc:	bd10      	pop	{r4, pc}
    aade:	bf00      	nop
    aae0:	20001be8 	.word	0x20001be8

0000aae4 <usbd_ep_abort>:
{
    aae4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    aae6:	4601      	mov	r1, r0
	__asm__ volatile(
    aae8:	f04f 0340 	mov.w	r3, #64	; 0x40
    aaec:	f3ef 8511 	mrs	r5, BASEPRI
    aaf0:	f383 8812 	msr	BASEPRI_MAX, r3
    aaf4:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    aaf8:	f7ff fa9a 	bl	a030 <ep_state_access>
    aafc:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    aafe:	4608      	mov	r0, r1
    ab00:	f003 f9d0 	bl	dea4 <ep2bit>
    ab04:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    ab06:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    ab0a:	fa02 f200 	lsl.w	r2, r2, r0
    ab0e:	482e      	ldr	r0, [pc, #184]	; (abc8 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    ab10:	d119      	bne.n	ab46 <usbd_ep_abort+0x62>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    ab12:	6803      	ldr	r3, [r0, #0]
    ab14:	ea32 0303 	bics.w	r3, r2, r3
    ab18:	d00a      	beq.n	ab30 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    ab1a:	4608      	mov	r0, r1
    ab1c:	f7ff ffb8 	bl	aa90 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    ab20:	2303      	movs	r3, #3
    ab22:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    ab24:	f385 8811 	msr	BASEPRI, r5
    ab28:	f3bf 8f6f 	isb	sy
}
    ab2c:	b003      	add	sp, #12
    ab2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
    ab30:	6033      	str	r3, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    ab32:	6803      	ldr	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    ab34:	4925      	ldr	r1, [pc, #148]	; (abcc <usbd_ep_abort+0xe8>)
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    ab36:	ea23 0302 	bic.w	r3, r3, r2
    ab3a:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    ab3c:	680b      	ldr	r3, [r1, #0]
    ab3e:	ea23 0302 	bic.w	r3, r3, r2
    ab42:	600b      	str	r3, [r1, #0]
    ab44:	e7ec      	b.n	ab20 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    ab46:	070b      	lsls	r3, r1, #28
    ab48:	d415      	bmi.n	ab76 <usbd_ep_abort+0x92>
            if(ep != NRFX_USBD_EPIN0)
    ab4a:	2980      	cmp	r1, #128	; 0x80
    ab4c:	4b20      	ldr	r3, [pc, #128]	; (abd0 <usbd_ep_abort+0xec>)
    ab4e:	d02f      	beq.n	abb0 <usbd_ep_abort+0xcc>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    ab50:	f001 040f 	and.w	r4, r1, #15
    ab54:	f204 34da 	addw	r4, r4, #986	; 0x3da
    ab58:	0064      	lsls	r4, r4, #1
    ab5a:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    ab5e:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    ab62:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    ab66:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    ab68:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    ab6c:	433c      	orrs	r4, r7
    ab6e:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    ab72:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    ab76:	4f15      	ldr	r7, [pc, #84]	; (abcc <usbd_ep_abort+0xe8>)
    ab78:	6804      	ldr	r4, [r0, #0]
    ab7a:	683b      	ldr	r3, [r7, #0]
    ab7c:	ea64 0c03 	orn	ip, r4, r3
    ab80:	ea1c 0f02 	tst.w	ip, r2
    ab84:	d0ce      	beq.n	ab24 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    ab86:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    ab88:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    ab8c:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    ab8e:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    ab90:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    ab92:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    ab94:	2303      	movs	r3, #3
    ab96:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    ab98:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    ab9c:	4b0d      	ldr	r3, [pc, #52]	; (abd4 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    ab9e:	f88d 1006 	strb.w	r1, [sp, #6]
    aba2:	2206      	movs	r2, #6
            m_event_handler(&evt);
    aba4:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    aba6:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    abaa:	a801      	add	r0, sp, #4
    abac:	4798      	blx	r3
    abae:	e7b9      	b.n	ab24 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    abb0:	f240 74b4 	movw	r4, #1972	; 0x7b4
    abb4:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    abb8:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    abbc:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    abc0:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    abc2:	f044 0404 	orr.w	r4, r4, #4
    abc6:	e7d1      	b.n	ab6c <usbd_ep_abort+0x88>
    abc8:	20001be4 	.word	0x20001be4
    abcc:	20001be8 	.word	0x20001be8
    abd0:	40027000 	.word	0x40027000
    abd4:	20001bec 	.word	0x20001bec

0000abd8 <ev_setup_handler>:
{
    abd8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    abda:	4b14      	ldr	r3, [pc, #80]	; (ac2c <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    abdc:	4c14      	ldr	r4, [pc, #80]	; (ac30 <ev_setup_handler+0x58>)
    abde:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    abe2:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    abe4:	4e13      	ldr	r6, [pc, #76]	; (ac34 <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    abe6:	43da      	mvns	r2, r3
    abe8:	4b13      	ldr	r3, [pc, #76]	; (ac38 <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
    abea:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    abec:	681b      	ldr	r3, [r3, #0]
    abee:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    abf0:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    abf2:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    abf4:	f003 f956 	bl	dea4 <ep2bit>
    abf8:	2301      	movs	r3, #1
    abfa:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    abfc:	4213      	tst	r3, r2
    abfe:	d002      	beq.n	ac06 <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    ac00:	4608      	mov	r0, r1
    ac02:	f7ff ff6f 	bl	aae4 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    ac06:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    (void)(NRFX_ATOMIC_FETCH_AND(
    ac0a:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    ac0e:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    ac10:	f7ff fb08 	bl	a224 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    ac14:	6823      	ldr	r3, [r4, #0]
    ac16:	f043 0301 	orr.w	r3, r3, #1
    ac1a:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    ac1c:	2305      	movs	r3, #5
    ac1e:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
    ac20:	4b06      	ldr	r3, [pc, #24]	; (ac3c <ev_setup_handler+0x64>)
    ac22:	a801      	add	r0, sp, #4
    ac24:	681b      	ldr	r3, [r3, #0]
    ac26:	4798      	blx	r3
}
    ac28:	b002      	add	sp, #8
    ac2a:	bd70      	pop	{r4, r5, r6, pc}
    ac2c:	40027000 	.word	0x40027000
    ac30:	20001be8 	.word	0x20001be8
    ac34:	20001fdc 	.word	0x20001fdc
    ac38:	20001be4 	.word	0x20001be4
    ac3c:	20001bec 	.word	0x20001bec

0000ac40 <nrfx_usbd_irq_handler>:
{
    ac40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return p_reg->INTENSET;
    ac44:	4b1a      	ldr	r3, [pc, #104]	; (acb0 <nrfx_usbd_irq_handler+0x70>)
    ac46:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    ac4a:	2300      	movs	r3, #0
            active |= 1UL << event_nr;
    ac4c:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    ac4e:	461d      	mov	r5, r3
    while (to_process)
    ac50:	b970      	cbnz	r0, ac70 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
    ac52:	4f18      	ldr	r7, [pc, #96]	; (acb4 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    ac54:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    ac58:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    ac5c:	f04f 0801 	mov.w	r8, #1
    while (active)
    ac60:	b9bc      	cbnz	r4, ac92 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    ac62:	f7ff fd67 	bl	a734 <usbd_dmareq_process>
    if (setup_active)
    ac66:	b306      	cbz	r6, acaa <nrfx_usbd_irq_handler+0x6a>
}
    ac68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    ac6c:	f7ff bfb4 	b.w	abd8 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    ac70:	fa90 f2a0 	rbit	r2, r0
    ac74:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    ac78:	490f      	ldr	r1, [pc, #60]	; (acb8 <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    ac7a:	0096      	lsls	r6, r2, #2
    ac7c:	4431      	add	r1, r6
            active |= 1UL << event_nr;
    ac7e:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    ac82:	680e      	ldr	r6, [r1, #0]
    if (ret)
    ac84:	b116      	cbz	r6, ac8c <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    ac86:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    ac88:	6809      	ldr	r1, [r1, #0]
    ac8a:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    ac8c:	ea20 0002 	bic.w	r0, r0, r2
    ac90:	e7de      	b.n	ac50 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    ac92:	fa94 f5a4 	rbit	r5, r4
    ac96:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    ac9a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    ac9e:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    aca2:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    aca4:	ea24 0405 	bic.w	r4, r4, r5
    aca8:	e7da      	b.n	ac60 <nrfx_usbd_irq_handler+0x20>
}
    acaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    acae:	bf00      	nop
    acb0:	40027000 	.word	0x40027000
    acb4:	0000ec40 	.word	0x0000ec40
    acb8:	40027100 	.word	0x40027100

0000acbc <nrfx_usbd_stop>:
{
    acbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    acbe:	4b1b      	ldr	r3, [pc, #108]	; (ad2c <nrfx_usbd_stop+0x70>)
    acc0:	2280      	movs	r2, #128	; 0x80
    acc2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    acc6:	2027      	movs	r0, #39	; 0x27
    acc8:	f7f9 f9f0 	bl	40ac <arch_irq_is_enabled>
    accc:	b1b8      	cbz	r0, acfe <nrfx_usbd_stop+0x42>
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    acce:	4e18      	ldr	r6, [pc, #96]	; (ad30 <nrfx_usbd_stop+0x74>)
    acd0:	4b18      	ldr	r3, [pc, #96]	; (ad34 <nrfx_usbd_stop+0x78>)
    acd2:	6834      	ldr	r4, [r6, #0]
    acd4:	681b      	ldr	r3, [r3, #0]
    acd6:	0c24      	lsrs	r4, r4, #16
    acd8:	0424      	lsls	r4, r4, #16
    acda:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
    acdc:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    acde:	b97c      	cbnz	r4, ad00 <nrfx_usbd_stop+0x44>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    ace0:	4d15      	ldr	r5, [pc, #84]	; (ad38 <nrfx_usbd_stop+0x7c>)
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    ace2:	f240 13ff 	movw	r3, #511	; 0x1ff
    ace6:	6033      	str	r3, [r6, #0]
        NRFX_IRQ_DISABLE(USBD_IRQn);
    ace8:	2027      	movs	r0, #39	; 0x27
    acea:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    acee:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
    acf2:	f7f9 f9c7 	bl	4084 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    acf6:	f04f 33ff 	mov.w	r3, #4294967295
    acfa:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
}
    acfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    ad00:	fa94 f5a4 	rbit	r5, r4
    ad04:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    ad08:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    ad0a:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    ad0c:	bfc6      	itte	gt
    ad0e:	f1a5 0010 	subgt.w	r0, r5, #16
    ad12:	b2c0      	uxtbgt	r0, r0
    ad14:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    ad18:	0703      	lsls	r3, r0, #28
    ad1a:	d401      	bmi.n	ad20 <nrfx_usbd_stop+0x64>
            usbd_ep_abort(bit2ep(bitpos));
    ad1c:	f7ff fee2 	bl	aae4 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    ad20:	fa07 f505 	lsl.w	r5, r7, r5
    ad24:	ea24 0405 	bic.w	r4, r4, r5
    ad28:	e7d9      	b.n	acde <nrfx_usbd_stop+0x22>
    ad2a:	bf00      	nop
    ad2c:	e000e100 	.word	0xe000e100
    ad30:	20001be8 	.word	0x20001be8
    ad34:	20001be4 	.word	0x20001be4
    ad38:	40027000 	.word	0x40027000

0000ad3c <nrfx_usbd_disable>:
{
    ad3c:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    ad3e:	f7ff ffbd 	bl	acbc <nrfx_usbd_stop>
    return p_reg->INTENSET;
    ad42:	4b08      	ldr	r3, [pc, #32]	; (ad64 <nrfx_usbd_disable+0x28>)
    ad44:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    ad48:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    ad4c:	2200      	movs	r2, #0
    ad4e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    ad52:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    m_dma_pending = false;
    ad56:	4b04      	ldr	r3, [pc, #16]	; (ad68 <nrfx_usbd_disable+0x2c>)
    ad58:	701a      	strb	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    ad5a:	4b04      	ldr	r3, [pc, #16]	; (ad6c <nrfx_usbd_disable+0x30>)
    ad5c:	2201      	movs	r2, #1
    ad5e:	701a      	strb	r2, [r3, #0]
}
    ad60:	bd08      	pop	{r3, pc}
    ad62:	bf00      	nop
    ad64:	40027000 	.word	0x40027000
    ad68:	20001fdb 	.word	0x20001fdb
    ad6c:	20001fde 	.word	0x20001fde

0000ad70 <nrfx_usbd_ep_disable>:
{
    ad70:	b510      	push	{r4, lr}
    ad72:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    ad74:	f7ff feb6 	bl	aae4 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    ad78:	4a10      	ldr	r2, [pc, #64]	; (adbc <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    ad7a:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    ad7e:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    ad82:	f04f 0301 	mov.w	r3, #1
    ad86:	bf14      	ite	ne
    ad88:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    ad8c:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    ad90:	fa03 f300 	lsl.w	r3, r3, r0
    ad94:	ea6f 0303 	mvn.w	r3, r3
    ad98:	bf15      	itete	ne
    ad9a:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    ad9c:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    ad9e:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    ada2:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    ada6:	bf14      	ite	ne
    ada8:	4b05      	ldrne	r3, [pc, #20]	; (adc0 <nrfx_usbd_ep_disable+0x50>)
    adaa:	4b06      	ldreq	r3, [pc, #24]	; (adc4 <nrfx_usbd_ep_disable+0x54>)
    adac:	5c1a      	ldrb	r2, [r3, r0]
    adae:	2301      	movs	r3, #1
    adb0:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    adb2:	4a02      	ldr	r2, [pc, #8]	; (adbc <nrfx_usbd_ep_disable+0x4c>)
    adb4:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    adb8:	bd10      	pop	{r4, pc}
    adba:	bf00      	nop
    adbc:	40027000 	.word	0x40027000
    adc0:	00011347 	.word	0x00011347
    adc4:	0001133e 	.word	0x0001133e

0000adc8 <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    adc8:	f010 0f80 	tst.w	r0, #128	; 0x80
{
    adcc:	b570      	push	{r4, r5, r6, lr}
    adce:	4924      	ldr	r1, [pc, #144]	; (ae60 <nrfx_usbd_ep_enable+0x98>)
    add0:	4604      	mov	r4, r0
    add2:	f000 030f 	and.w	r3, r0, #15
    add6:	f04f 0501 	mov.w	r5, #1
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    adda:	d012      	beq.n	ae02 <nrfx_usbd_ep_enable+0x3a>
    addc:	4a21      	ldr	r2, [pc, #132]	; (ae64 <nrfx_usbd_ep_enable+0x9c>)
    adde:	5cd2      	ldrb	r2, [r2, r3]
    ade0:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    ade4:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    ade8:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    adec:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    adee:	07d0      	lsls	r0, r2, #31
    adf0:	d406      	bmi.n	ae00 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
    adf2:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    adf6:	fa05 f303 	lsl.w	r3, r5, r3
    adfa:	4313      	orrs	r3, r2
    adfc:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
    ae00:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    ae02:	4a19      	ldr	r2, [pc, #100]	; (ae68 <nrfx_usbd_ep_enable+0xa0>)
    ae04:	5cd2      	ldrb	r2, [r2, r3]
    ae06:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    ae0a:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    ae0e:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
    ae12:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    ae14:	07d2      	lsls	r2, r2, #31
    ae16:	d4f3      	bmi.n	ae00 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
    ae18:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
    ae1c:	fa05 f203 	lsl.w	r2, r5, r3
    ae20:	4332      	orrs	r2, r6
    ae22:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    ae26:	2b00      	cmp	r3, #0
    ae28:	d0ea      	beq.n	ae00 <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
    ae2a:	0703      	lsls	r3, r0, #28
    ae2c:	d4e8      	bmi.n	ae00 <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
    ae2e:	f04f 0340 	mov.w	r3, #64	; 0x40
    ae32:	f3ef 8611 	mrs	r6, BASEPRI
    ae36:	f383 8812 	msr	BASEPRI_MAX, r3
    ae3a:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    ae3e:	f7ff fe27 	bl	aa90 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    ae42:	4620      	mov	r0, r4
    ae44:	f003 f82e 	bl	dea4 <ep2bit>
    ae48:	4a08      	ldr	r2, [pc, #32]	; (ae6c <nrfx_usbd_ep_enable+0xa4>)
    ae4a:	6813      	ldr	r3, [r2, #0]
    ae4c:	fa05 f000 	lsl.w	r0, r5, r0
    ae50:	ea23 0300 	bic.w	r3, r3, r0
    ae54:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    ae56:	f386 8811 	msr	BASEPRI, r6
    ae5a:	f3bf 8f6f 	isb	sy
}
    ae5e:	e7cf      	b.n	ae00 <nrfx_usbd_ep_enable+0x38>
    ae60:	40027000 	.word	0x40027000
    ae64:	00011347 	.word	0x00011347
    ae68:	0001133e 	.word	0x0001133e
    ae6c:	20001be4 	.word	0x20001be4

0000ae70 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    ae70:	0603      	lsls	r3, r0, #24
{
    ae72:	b510      	push	{r4, lr}
    ae74:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    ae76:	d405      	bmi.n	ae84 <nrfx_usbd_ep_stall_clear+0x14>
    ae78:	f7ff fd74 	bl	a964 <nrfx_usbd_ep_stall_check>
    ae7c:	b110      	cbz	r0, ae84 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    ae7e:	4620      	mov	r0, r4
    ae80:	f7ff fe06 	bl	aa90 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    ae84:	4b01      	ldr	r3, [pc, #4]	; (ae8c <nrfx_usbd_ep_stall_clear+0x1c>)
    ae86:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    ae8a:	bd10      	pop	{r4, pc}
    ae8c:	40027000 	.word	0x40027000

0000ae90 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    ae90:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    ae92:	4c11      	ldr	r4, [pc, #68]	; (aed8 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    ae94:	4a11      	ldr	r2, [pc, #68]	; (aedc <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    ae96:	4912      	ldr	r1, [pc, #72]	; (aee0 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    ae98:	2303      	movs	r3, #3
    ae9a:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    ae9c:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    ae9e:	4b11      	ldr	r3, [pc, #68]	; (aee4 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    aea0:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    aea2:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    aea4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    aea8:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    aeaa:	2300      	movs	r3, #0
    aeac:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    aeae:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    aeb0:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    aeb2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    aeb4:	4a0c      	ldr	r2, [pc, #48]	; (aee8 <_DoInit+0x58>)
    aeb6:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    aeb8:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    aeba:	2210      	movs	r2, #16
    aebc:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    aebe:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    aec0:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    aec2:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    aec4:	f002 fb3e 	bl	d544 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    aec8:	4908      	ldr	r1, [pc, #32]	; (aeec <_DoInit+0x5c>)
    aeca:	4620      	mov	r0, r4
    aecc:	f002 fb3a 	bl	d544 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    aed0:	2320      	movs	r3, #32
    aed2:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    aed4:	bd10      	pop	{r4, pc}
    aed6:	bf00      	nop
    aed8:	20001bf0 	.word	0x20001bf0
    aedc:	0001135a 	.word	0x0001135a
    aee0:	00011363 	.word	0x00011363
    aee4:	20001fef 	.word	0x20001fef
    aee8:	20001fdf 	.word	0x20001fdf
    aeec:	00011367 	.word	0x00011367

0000aef0 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    aef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    aef4:	4f21      	ldr	r7, [pc, #132]	; (af7c <SEGGER_RTT_WriteSkipNoLock+0x8c>)
    aef6:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    aefa:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    aefc:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    af00:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    af02:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    af04:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    af06:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    af08:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    af0a:	d831      	bhi.n	af70 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    af0c:	f8d2 a020 	ldr.w	sl, [r2, #32]
    af10:	ebaa 0905 	sub.w	r9, sl, r5
    af14:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    af18:	4294      	cmp	r4, r2
    af1a:	d811      	bhi.n	af40 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    af1c:	2318      	movs	r3, #24
    af1e:	fb06 3303 	mla	r3, r6, r3, r3
    af22:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    af24:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    af26:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    af28:	4641      	mov	r1, r8
    af2a:	4428      	add	r0, r5
    af2c:	f002 fb30 	bl	d590 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    af30:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    af32:	2318      	movs	r3, #24
    af34:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
    af38:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    af3a:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    af3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    af40:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    af42:	429c      	cmp	r4, r3
    af44:	d818      	bhi.n	af78 <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    af46:	fb00 bb0b 	mla	fp, r0, fp, fp
    af4a:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    af4c:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    af4e:	f8db 0004 	ldr.w	r0, [fp, #4]
    af52:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    af54:	4428      	add	r0, r5
    af56:	f002 fb1b 	bl	d590 <memcpy>
      if (NumBytes) {
    af5a:	ebb4 040a 	subs.w	r4, r4, sl
    af5e:	d0e8      	beq.n	af32 <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    af60:	f8db 0004 	ldr.w	r0, [fp, #4]
    af64:	4622      	mov	r2, r4
    af66:	eb08 0109 	add.w	r1, r8, r9
    af6a:	f002 fb11 	bl	d590 <memcpy>
      return 1;
    af6e:	e7e0      	b.n	af32 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
    af70:	3b01      	subs	r3, #1
    af72:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    af74:	42a3      	cmp	r3, r4
    af76:	d2d1      	bcs.n	af1c <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    af78:	2000      	movs	r0, #0
    af7a:	e7df      	b.n	af3c <SEGGER_RTT_WriteSkipNoLock+0x4c>
    af7c:	20001bf0 	.word	0x20001bf0

0000af80 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    af80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    af82:	4b14      	ldr	r3, [pc, #80]	; (afd4 <SEGGER_RTT_WriteNoLock+0x54>)
    af84:	2718      	movs	r7, #24
    af86:	fb00 7507 	mla	r5, r0, r7, r7
    af8a:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    af8c:	fb07 3300 	mla	r3, r7, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    af90:	460e      	mov	r6, r1
  switch (pRing->Flags) {
    af92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    af94:	2b01      	cmp	r3, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    af96:	4614      	mov	r4, r2
  switch (pRing->Flags) {
    af98:	d00a      	beq.n	afb0 <SEGGER_RTT_WriteNoLock+0x30>
    af9a:	2b02      	cmp	r3, #2
    af9c:	d014      	beq.n	afc8 <SEGGER_RTT_WriteNoLock+0x48>
    af9e:	b923      	cbnz	r3, afaa <SEGGER_RTT_WriteNoLock+0x2a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    afa0:	4628      	mov	r0, r5
    afa2:	f002 ffd2 	bl	df4a <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    afa6:	4284      	cmp	r4, r0
    afa8:	d908      	bls.n	afbc <SEGGER_RTT_WriteNoLock+0x3c>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    afaa:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    afac:	4620      	mov	r0, r4
    afae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    afb0:	4628      	mov	r0, r5
    afb2:	f002 ffca 	bl	df4a <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    afb6:	4284      	cmp	r4, r0
    afb8:	bf28      	it	cs
    afba:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    afbc:	4622      	mov	r2, r4
    afbe:	4631      	mov	r1, r6
    afc0:	4628      	mov	r0, r5
    afc2:	f002 ffcb 	bl	df5c <_WriteNoCheck>
    break;
    afc6:	e7f1      	b.n	afac <SEGGER_RTT_WriteNoLock+0x2c>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    afc8:	4628      	mov	r0, r5
}
    afca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    afce:	f002 bfe0 	b.w	df92 <_WriteBlocking>
    afd2:	bf00      	nop
    afd4:	20001bf0 	.word	0x20001bf0

0000afd8 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    afd8:	4b03      	ldr	r3, [pc, #12]	; (afe8 <SEGGER_RTT_HasDataUp+0x10>)
    afda:	2218      	movs	r2, #24
    afdc:	fb02 3300 	mla	r3, r2, r0, r3
    afe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    afe2:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    afe4:	1a80      	subs	r0, r0, r2
    afe6:	4770      	bx	lr
    afe8:	20001bf0 	.word	0x20001bf0

0000afec <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
    afec:	4803      	ldr	r0, [pc, #12]	; (affc <zephyr_rtt_mutex_lock+0x10>)
    afee:	f04f 32ff 	mov.w	r2, #4294967295
    aff2:	f04f 33ff 	mov.w	r3, #4294967295
    aff6:	f000 bab7 	b.w	b568 <z_impl_k_mutex_lock>
    affa:	bf00      	nop
    affc:	20000384 	.word	0x20000384

0000b000 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
    b000:	4801      	ldr	r0, [pc, #4]	; (b008 <zephyr_rtt_mutex_unlock+0x8>)
    b002:	f000 bb2b 	b.w	b65c <z_impl_k_mutex_unlock>
    b006:	bf00      	nop
    b008:	20000384 	.word	0x20000384

0000b00c <z_impl_device_get_binding>:
		++dev;
	}
}

const struct device *z_impl_device_get_binding(const char *name)
{
    b00c:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    b00e:	4605      	mov	r5, r0
    b010:	b910      	cbnz	r0, b018 <z_impl_device_get_binding+0xc>
		return NULL;
    b012:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    b014:	4620      	mov	r0, r4
    b016:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    b018:	7803      	ldrb	r3, [r0, #0]
    b01a:	2b00      	cmp	r3, #0
    b01c:	d0f9      	beq.n	b012 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    b01e:	4c0e      	ldr	r4, [pc, #56]	; (b058 <z_impl_device_get_binding+0x4c>)
    b020:	4e0e      	ldr	r6, [pc, #56]	; (b05c <z_impl_device_get_binding+0x50>)
    b022:	42b4      	cmp	r4, r6
    b024:	d108      	bne.n	b038 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    b026:	4c0c      	ldr	r4, [pc, #48]	; (b058 <z_impl_device_get_binding+0x4c>)
    b028:	42b4      	cmp	r4, r6
    b02a:	d0f2      	beq.n	b012 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    b02c:	4620      	mov	r0, r4
    b02e:	f002 ffe2 	bl	dff6 <z_device_is_ready>
    b032:	b950      	cbnz	r0, b04a <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    b034:	3418      	adds	r4, #24
    b036:	e7f7      	b.n	b028 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    b038:	4620      	mov	r0, r4
    b03a:	f002 ffdc 	bl	dff6 <z_device_is_ready>
    b03e:	b110      	cbz	r0, b046 <z_impl_device_get_binding+0x3a>
    b040:	6823      	ldr	r3, [r4, #0]
    b042:	42ab      	cmp	r3, r5
    b044:	d0e6      	beq.n	b014 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    b046:	3418      	adds	r4, #24
    b048:	e7eb      	b.n	b022 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    b04a:	6821      	ldr	r1, [r4, #0]
    b04c:	4628      	mov	r0, r5
    b04e:	f002 fa93 	bl	d578 <strcmp>
    b052:	2800      	cmp	r0, #0
    b054:	d1ee      	bne.n	b034 <z_impl_device_get_binding+0x28>
    b056:	e7dd      	b.n	b014 <z_impl_device_get_binding+0x8>
    b058:	0000e778 	.word	0x0000e778
    b05c:	0000e820 	.word	0x0000e820

0000b060 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    b060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    b064:	b086      	sub	sp, #24
    b066:	4605      	mov	r5, r0
    b068:	af00      	add	r7, sp, #0
    b06a:	460e      	mov	r6, r1
	__asm__ volatile(
    b06c:	f04f 0340 	mov.w	r3, #64	; 0x40
    b070:	f3ef 8811 	mrs	r8, BASEPRI
    b074:	f383 8812 	msr	BASEPRI_MAX, r3
    b078:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    b07c:	f001 f838 	bl	c0f0 <z_impl_z_current_get>
    b080:	2d04      	cmp	r5, #4
    b082:	bf96      	itet	ls
    b084:	4b2c      	ldrls	r3, [pc, #176]	; (b138 <z_fatal_error+0xd8>)
    b086:	4b2d      	ldrhi	r3, [pc, #180]	; (b13c <z_fatal_error+0xdc>)
    b088:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    b08c:	46e9      	mov	r9, sp
    b08e:	b08a      	sub	sp, #40	; 0x28
    b090:	4604      	mov	r4, r0
    b092:	466a      	mov	r2, sp
    b094:	492a      	ldr	r1, [pc, #168]	; (b140 <z_fatal_error+0xe0>)
    b096:	61d3      	str	r3, [r2, #28]
    b098:	f240 3301 	movw	r3, #769	; 0x301
    b09c:	8493      	strh	r3, [r2, #36]	; 0x24
    b09e:	f04f 0a00 	mov.w	sl, #0
    b0a2:	4b28      	ldr	r3, [pc, #160]	; (b144 <z_fatal_error+0xe4>)
    b0a4:	f8c2 a020 	str.w	sl, [r2, #32]
    b0a8:	e9c2 1505 	strd	r1, r5, [r2, #20]
    b0ac:	f842 3f10 	str.w	r3, [r2, #16]!
    b0b0:	4825      	ldr	r0, [pc, #148]	; (b148 <z_fatal_error+0xe8>)
    b0b2:	4653      	mov	r3, sl
    b0b4:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    b0b8:	f7f7 fba0 	bl	27fc <z_impl_z_log_msg_static_create>
    b0bc:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    b0be:	b17e      	cbz	r6, b0e0 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    b0c0:	69f3      	ldr	r3, [r6, #28]
    b0c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
    b0c6:	b15b      	cbz	r3, b0e0 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    b0c8:	4b20      	ldr	r3, [pc, #128]	; (b14c <z_fatal_error+0xec>)
    b0ca:	617b      	str	r3, [r7, #20]
    b0cc:	2302      	movs	r3, #2
    b0ce:	613b      	str	r3, [r7, #16]
    b0d0:	481d      	ldr	r0, [pc, #116]	; (b148 <z_fatal_error+0xe8>)
    b0d2:	4653      	mov	r3, sl
    b0d4:	f107 0210 	add.w	r2, r7, #16
    b0d8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    b0dc:	f7f7 fb8e 	bl	27fc <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    b0e0:	b12c      	cbz	r4, b0ee <z_fatal_error+0x8e>
    b0e2:	4620      	mov	r0, r4
    b0e4:	f002 ffde 	bl	e0a4 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    b0e8:	b108      	cbz	r0, b0ee <z_fatal_error+0x8e>
    b0ea:	7803      	ldrb	r3, [r0, #0]
    b0ec:	b903      	cbnz	r3, b0f0 <z_fatal_error+0x90>
		thread_name = "unknown";
    b0ee:	4818      	ldr	r0, [pc, #96]	; (b150 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    b0f0:	46e9      	mov	r9, sp
    b0f2:	b08a      	sub	sp, #40	; 0x28
    b0f4:	466a      	mov	r2, sp
    b0f6:	4b17      	ldr	r3, [pc, #92]	; (b154 <z_fatal_error+0xf4>)
    b0f8:	61d0      	str	r0, [r2, #28]
    b0fa:	e9c2 3405 	strd	r3, r4, [r2, #20]
    b0fe:	f240 3301 	movw	r3, #769	; 0x301
    b102:	8413      	strh	r3, [r2, #32]
    b104:	4b14      	ldr	r3, [pc, #80]	; (b158 <z_fatal_error+0xf8>)
    b106:	f842 3f10 	str.w	r3, [r2, #16]!
    b10a:	2300      	movs	r3, #0
    b10c:	480e      	ldr	r0, [pc, #56]	; (b148 <z_fatal_error+0xe8>)
    b10e:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    b112:	f7f7 fb73 	bl	27fc <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    b116:	4631      	mov	r1, r6
    b118:	46cd      	mov	sp, r9
    b11a:	4628      	mov	r0, r5
    b11c:	f7fc f828 	bl	7170 <k_sys_fatal_error_handler>
	__asm__ volatile(
    b120:	f388 8811 	msr	BASEPRI, r8
    b124:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    b128:	4620      	mov	r0, r4
    b12a:	f7f9 fc2d 	bl	4988 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    b12e:	3718      	adds	r7, #24
    b130:	46bd      	mov	sp, r7
    b132:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    b136:	bf00      	nop
    b138:	0000eca8 	.word	0x0000eca8
    b13c:	0001136e 	.word	0x0001136e
    b140:	00011384 	.word	0x00011384
    b144:	01000005 	.word	0x01000005
    b148:	0000e8f0 	.word	0x0000e8f0
    b14c:	000113ac 	.word	0x000113ac
    b150:	0001137c 	.word	0x0001137c
    b154:	000113cd 	.word	0x000113cd
    b158:	01000004 	.word	0x01000004

0000b15c <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    b15c:	4b10      	ldr	r3, [pc, #64]	; (b1a0 <z_sys_init_run_level+0x44>)
{
    b15e:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    b160:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    b164:	3001      	adds	r0, #1
    b166:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    b16a:	42a6      	cmp	r6, r4
    b16c:	d800      	bhi.n	b170 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    b16e:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    b170:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    b174:	b18d      	cbz	r5, b19a <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    b176:	4628      	mov	r0, r5
    b178:	4798      	blx	r3
			if (rc != 0) {
    b17a:	b138      	cbz	r0, b18c <z_sys_init_run_level+0x30>
				if (rc < 0) {
    b17c:	2800      	cmp	r0, #0
    b17e:	bfb8      	it	lt
    b180:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    b182:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    b184:	28ff      	cmp	r0, #255	; 0xff
    b186:	bfa8      	it	ge
    b188:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    b18a:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    b18c:	68ea      	ldr	r2, [r5, #12]
    b18e:	7853      	ldrb	r3, [r2, #1]
    b190:	f043 0301 	orr.w	r3, r3, #1
    b194:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    b196:	3408      	adds	r4, #8
    b198:	e7e7      	b.n	b16a <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    b19a:	4798      	blx	r3
    b19c:	e7fb      	b.n	b196 <z_sys_init_run_level+0x3a>
    b19e:	bf00      	nop
    b1a0:	0000ecbc 	.word	0x0000ecbc

0000b1a4 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    b1a4:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    b1a6:	4b0a      	ldr	r3, [pc, #40]	; (b1d0 <bg_thread_main+0x2c>)
    b1a8:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    b1aa:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    b1ac:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    b1ae:	f7ff ffd5 	bl	b15c <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    b1b2:	f001 fa31 	bl	c618 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    b1b6:	2004      	movs	r0, #4
    b1b8:	f7ff ffd0 	bl	b15c <z_sys_init_run_level>

	z_init_static_threads();
    b1bc:	f000 f95c 	bl	b478 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    b1c0:	f7f5 fbba 	bl	938 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    b1c4:	4a03      	ldr	r2, [pc, #12]	; (b1d4 <bg_thread_main+0x30>)
    b1c6:	7b13      	ldrb	r3, [r2, #12]
    b1c8:	f023 0301 	bic.w	r3, r3, #1
    b1cc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    b1ce:	bd08      	pop	{r3, pc}
    b1d0:	200023ef 	.word	0x200023ef
    b1d4:	20000af0 	.word	0x20000af0

0000b1d8 <z_bss_zero>:
{
    b1d8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    b1da:	4803      	ldr	r0, [pc, #12]	; (b1e8 <z_bss_zero+0x10>)
    b1dc:	4a03      	ldr	r2, [pc, #12]	; (b1ec <z_bss_zero+0x14>)
    b1de:	2100      	movs	r1, #0
    b1e0:	1a12      	subs	r2, r2, r0
    b1e2:	f002 ff13 	bl	e00c <z_early_memset>
}
    b1e6:	bd08      	pop	{r3, pc}
    b1e8:	20000488 	.word	0x20000488
    b1ec:	200023f4 	.word	0x200023f4

0000b1f0 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    b1f0:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    b1f2:	2300      	movs	r3, #0
{
    b1f4:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    b1f6:	2201      	movs	r2, #1
    b1f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    b1fc:	4e13      	ldr	r6, [pc, #76]	; (b24c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    b1fe:	4d14      	ldr	r5, [pc, #80]	; (b250 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    b200:	9301      	str	r3, [sp, #4]
    b202:	220f      	movs	r2, #15
    b204:	e9cd 3202 	strd	r3, r2, [sp, #8]
    b208:	4912      	ldr	r1, [pc, #72]	; (b254 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    b20a:	2314      	movs	r3, #20
    b20c:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    b210:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    b214:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    b216:	f44f 70a0 	mov.w	r0, #320	; 0x140
    b21a:	fb00 1104 	mla	r1, r0, r4, r1
    b21e:	4b0e      	ldr	r3, [pc, #56]	; (b258 <z_init_cpu+0x68>)
    b220:	9500      	str	r5, [sp, #0]
    b222:	f44f 7280 	mov.w	r2, #256	; 0x100
    b226:	4630      	mov	r0, r6
    b228:	f000 f8c8 	bl	b3bc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b22c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    b22e:	4a0b      	ldr	r2, [pc, #44]	; (b25c <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    b230:	60ee      	str	r6, [r5, #12]
    b232:	f023 0304 	bic.w	r3, r3, #4
    b236:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    b238:	f44f 6304 	mov.w	r3, #2112	; 0x840
    b23c:	fb04 3303 	mla	r3, r4, r3, r3
    b240:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    b242:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
    b244:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    b246:	b006      	add	sp, #24
    b248:	bd70      	pop	{r4, r5, r6, pc}
    b24a:	bf00      	nop
    b24c:	20000a70 	.word	0x20000a70
    b250:	20001c98 	.word	0x20001c98
    b254:	200033c0 	.word	0x200033c0
    b258:	0000b531 	.word	0x0000b531
    b25c:	20002b80 	.word	0x20002b80

0000b260 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    b260:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    b262:	2000      	movs	r0, #0
{
    b264:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    b266:	f7ff ff79 	bl	b15c <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    b26a:	4b2d      	ldr	r3, [pc, #180]	; (b320 <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    b26c:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    b270:	4d2c      	ldr	r5, [pc, #176]	; (b324 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    b272:	4e2d      	ldr	r6, [pc, #180]	; (b328 <z_cstart+0xc8>)
    b274:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    b276:	4f2d      	ldr	r7, [pc, #180]	; (b32c <z_cstart+0xcc>)
    b278:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    b27c:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    b27e:	23e0      	movs	r3, #224	; 0xe0
    b280:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    b284:	2400      	movs	r4, #0
    b286:	2320      	movs	r3, #32
    b288:	77eb      	strb	r3, [r5, #31]
    b28a:	762c      	strb	r4, [r5, #24]
    b28c:	766c      	strb	r4, [r5, #25]
    b28e:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    b290:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    b292:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    b296:	626b      	str	r3, [r5, #36]	; 0x24
    b298:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    b29c:	f7f9 fae8 	bl	4870 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    b2a0:	f7f8 fe5c 	bl	3f5c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    b2a4:	f04f 33ff 	mov.w	r3, #4294967295
    b2a8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    b2aa:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    b2ac:	f7f9 fc3c 	bl	4b28 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    b2b0:	f7f9 fb80 	bl	49b4 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    b2b4:	f7f7 f92e 	bl	2514 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    b2b8:	f240 1301 	movw	r3, #257	; 0x101
    b2bc:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    b2c0:	ab06      	add	r3, sp, #24
    b2c2:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    b2c4:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    b2c8:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    b2ca:	f002 fe93 	bl	dff4 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    b2ce:	2001      	movs	r0, #1
    b2d0:	f7ff ff44 	bl	b15c <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    b2d4:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    b2d6:	4d16      	ldr	r5, [pc, #88]	; (b330 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    b2d8:	f7ff ff40 	bl	b15c <z_sys_init_run_level>
	z_sched_init();
    b2dc:	f000 fe4a 	bl	bf74 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    b2e0:	4b14      	ldr	r3, [pc, #80]	; (b334 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    b2e2:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    b2e4:	9305      	str	r3, [sp, #20]
    b2e6:	2301      	movs	r3, #1
    b2e8:	4913      	ldr	r1, [pc, #76]	; (b338 <z_cstart+0xd8>)
    b2ea:	9400      	str	r4, [sp, #0]
    b2ec:	e9cd 4303 	strd	r4, r3, [sp, #12]
    b2f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b2f4:	463b      	mov	r3, r7
    b2f6:	e9cd 4401 	strd	r4, r4, [sp, #4]
    b2fa:	4628      	mov	r0, r5
    b2fc:	f000 f85e 	bl	b3bc <z_setup_new_thread>
    b300:	7b6a      	ldrb	r2, [r5, #13]
    b302:	4606      	mov	r6, r0
    b304:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    b308:	4628      	mov	r0, r5
    b30a:	736a      	strb	r2, [r5, #13]
    b30c:	f003 f816 	bl	e33c <z_ready_thread>
	z_init_cpu(0);
    b310:	4620      	mov	r0, r4
    b312:	f7ff ff6d 	bl	b1f0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    b316:	463a      	mov	r2, r7
    b318:	4631      	mov	r1, r6
    b31a:	4628      	mov	r0, r5
    b31c:	f7f8 ff9c 	bl	4258 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    b320:	200033c0 	.word	0x200033c0
    b324:	e000ed00 	.word	0xe000ed00
    b328:	20001c98 	.word	0x20001c98
    b32c:	0000b1a5 	.word	0x0000b1a5
    b330:	20000af0 	.word	0x20000af0
    b334:	0000edda 	.word	0x0000edda
    b338:	20003500 	.word	0x20003500

0000b33c <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
    b33c:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    b33e:	4c06      	ldr	r4, [pc, #24]	; (b358 <init_mem_slab_module+0x1c>)
    b340:	4d06      	ldr	r5, [pc, #24]	; (b35c <init_mem_slab_module+0x20>)
	int rc = 0;
    b342:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    b344:	42ac      	cmp	r4, r5
    b346:	d300      	bcc.n	b34a <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    b348:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    b34a:	4620      	mov	r0, r4
    b34c:	f002 fe62 	bl	e014 <create_free_list>
		if (rc < 0) {
    b350:	2800      	cmp	r0, #0
    b352:	dbf9      	blt.n	b348 <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    b354:	341c      	adds	r4, #28
    b356:	e7f5      	b.n	b344 <init_mem_slab_module+0x8>
    b358:	20000368 	.word	0x20000368
    b35c:	20000384 	.word	0x20000384

0000b360 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    b360:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b362:	460c      	mov	r4, r1
	__asm__ volatile(
    b364:	f04f 0540 	mov.w	r5, #64	; 0x40
    b368:	f3ef 8111 	mrs	r1, BASEPRI
    b36c:	f385 8812 	msr	BASEPRI_MAX, r5
    b370:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    b374:	6945      	ldr	r5, [r0, #20]
    b376:	b15d      	cbz	r5, b390 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    b378:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    b37a:	682b      	ldr	r3, [r5, #0]
    b37c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    b37e:	6983      	ldr	r3, [r0, #24]
    b380:	3301      	adds	r3, #1
    b382:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    b384:	2000      	movs	r0, #0
	__asm__ volatile(
    b386:	f381 8811 	msr	BASEPRI, r1
    b38a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    b38e:	e011      	b.n	b3b4 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    b390:	ea52 0603 	orrs.w	r6, r2, r3
    b394:	d103      	bne.n	b39e <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    b396:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    b398:	f06f 000b 	mvn.w	r0, #11
    b39c:	e7f3      	b.n	b386 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    b39e:	e9cd 2300 	strd	r2, r3, [sp]
    b3a2:	4602      	mov	r2, r0
    b3a4:	3008      	adds	r0, #8
    b3a6:	f000 fcef 	bl	bd88 <z_pend_curr>
		if (result == 0) {
    b3aa:	b918      	cbnz	r0, b3b4 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    b3ac:	4b02      	ldr	r3, [pc, #8]	; (b3b8 <k_mem_slab_alloc+0x58>)
    b3ae:	689b      	ldr	r3, [r3, #8]
    b3b0:	695b      	ldr	r3, [r3, #20]
    b3b2:	6023      	str	r3, [r4, #0]
}
    b3b4:	b002      	add	sp, #8
    b3b6:	bd70      	pop	{r4, r5, r6, pc}
    b3b8:	20001c98 	.word	0x20001c98

0000b3bc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    b3bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    b3c0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    b3c2:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    b3c4:	2604      	movs	r6, #4
    b3c6:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    b3c8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    b3ca:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    b3cc:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    b3d0:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    b3d2:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    b3d4:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b3d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    b3da:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    b3dc:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    b3e0:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    b3e2:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    b3e6:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    b3ea:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    b3ec:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    b3ee:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    b3f0:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b3f4:	9202      	str	r2, [sp, #8]
    b3f6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    b3f8:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    b3fa:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b3fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    b3fe:	9200      	str	r2, [sp, #0]
    b400:	4642      	mov	r2, r8
{
    b402:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    b404:	f7f8 fef6 	bl	41f4 <arch_new_thread>
	if (!_current) {
    b408:	4b04      	ldr	r3, [pc, #16]	; (b41c <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    b40a:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    b40c:	689b      	ldr	r3, [r3, #8]
    b40e:	b103      	cbz	r3, b412 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    b410:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    b412:	6723      	str	r3, [r4, #112]	; 0x70
}
    b414:	4640      	mov	r0, r8
    b416:	b004      	add	sp, #16
    b418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b41c:	20001c98 	.word	0x20001c98

0000b420 <z_impl_k_thread_create>:
{
    b420:	b5f0      	push	{r4, r5, r6, r7, lr}
    b422:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b424:	2500      	movs	r5, #0
    b426:	9505      	str	r5, [sp, #20]
    b428:	9d10      	ldr	r5, [sp, #64]	; 0x40
    b42a:	9504      	str	r5, [sp, #16]
    b42c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    b42e:	9503      	str	r5, [sp, #12]
    b430:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    b432:	9502      	str	r5, [sp, #8]
{
    b434:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b438:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    b43a:	9501      	str	r5, [sp, #4]
    b43c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    b43e:	9500      	str	r5, [sp, #0]
{
    b440:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    b442:	f7ff ffbb 	bl	b3bc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    b446:	f1b6 3fff 	cmp.w	r6, #4294967295
    b44a:	bf08      	it	eq
    b44c:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    b450:	d005      	beq.n	b45e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b452:	ea56 0307 	orrs.w	r3, r6, r7
    b456:	d105      	bne.n	b464 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    b458:	4620      	mov	r0, r4
    b45a:	f000 fd0b 	bl	be74 <z_sched_start>
}
    b45e:	4620      	mov	r0, r4
    b460:	b007      	add	sp, #28
    b462:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    b464:	4903      	ldr	r1, [pc, #12]	; (b474 <z_impl_k_thread_create+0x54>)
    b466:	463a      	mov	r2, r7
    b468:	4633      	mov	r3, r6
    b46a:	f104 0018 	add.w	r0, r4, #24
    b46e:	f000 ff17 	bl	c2a0 <z_add_timeout>
    b472:	e7f4      	b.n	b45e <z_impl_k_thread_create+0x3e>
    b474:	0000e3c5 	.word	0x0000e3c5

0000b478 <z_init_static_threads>:
{
    b478:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    b47c:	4c29      	ldr	r4, [pc, #164]	; (b524 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    b47e:	4d2a      	ldr	r5, [pc, #168]	; (b528 <z_init_static_threads+0xb0>)
{
    b480:	b087      	sub	sp, #28
    b482:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    b484:	42ae      	cmp	r6, r5
    b486:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    b48a:	d30f      	bcc.n	b4ac <z_init_static_threads+0x34>
	k_sched_lock();
    b48c:	f000 fd42 	bl	bf14 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    b490:	4c24      	ldr	r4, [pc, #144]	; (b524 <z_init_static_threads+0xac>)
    b492:	f8df 9098 	ldr.w	r9, [pc, #152]	; b52c <z_init_static_threads+0xb4>
    b496:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    b49a:	f240 37e7 	movw	r7, #999	; 0x3e7
    b49e:	42ac      	cmp	r4, r5
    b4a0:	d320      	bcc.n	b4e4 <z_init_static_threads+0x6c>
}
    b4a2:	b007      	add	sp, #28
    b4a4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    b4a8:	f000 bd48 	b.w	bf3c <k_sched_unlock>
		z_setup_new_thread(
    b4ac:	f854 3c04 	ldr.w	r3, [r4, #-4]
    b4b0:	9305      	str	r3, [sp, #20]
    b4b2:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    b4b6:	9304      	str	r3, [sp, #16]
    b4b8:	f854 3c10 	ldr.w	r3, [r4, #-16]
    b4bc:	9303      	str	r3, [sp, #12]
    b4be:	f854 3c14 	ldr.w	r3, [r4, #-20]
    b4c2:	9302      	str	r3, [sp, #8]
    b4c4:	f854 3c18 	ldr.w	r3, [r4, #-24]
    b4c8:	9301      	str	r3, [sp, #4]
    b4ca:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    b4ce:	9300      	str	r3, [sp, #0]
    b4d0:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    b4d4:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    b4d8:	f7ff ff70 	bl	b3bc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    b4dc:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    b4e0:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    b4e2:	e7ce      	b.n	b482 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    b4e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b4e6:	1c5a      	adds	r2, r3, #1
    b4e8:	d00d      	beq.n	b506 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    b4ea:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    b4ee:	2100      	movs	r1, #0
    b4f0:	4638      	mov	r0, r7
    b4f2:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b4f6:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    b4fa:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    b4fe:	d104      	bne.n	b50a <z_init_static_threads+0x92>
	z_sched_start(thread);
    b500:	4640      	mov	r0, r8
    b502:	f000 fcb7 	bl	be74 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    b506:	342c      	adds	r4, #44	; 0x2c
    b508:	e7c9      	b.n	b49e <z_init_static_threads+0x26>
    b50a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    b50e:	2300      	movs	r3, #0
    b510:	f7f4 fde6 	bl	e0 <__aeabi_uldivmod>
    b514:	4602      	mov	r2, r0
    b516:	460b      	mov	r3, r1
    b518:	f108 0018 	add.w	r0, r8, #24
    b51c:	4649      	mov	r1, r9
    b51e:	f000 febf 	bl	c2a0 <z_add_timeout>
    b522:	e7f0      	b.n	b506 <z_init_static_threads+0x8e>
    b524:	0000e820 	.word	0x0000e820
    b528:	0000e820 	.word	0x0000e820
    b52c:	0000e3c5 	.word	0x0000e3c5

0000b530 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    b530:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    b532:	4c0b      	ldr	r4, [pc, #44]	; (b560 <idle+0x30>)
	return !z_sys_post_kernel;
    b534:	4d0b      	ldr	r5, [pc, #44]	; (b564 <idle+0x34>)
	__asm__ volatile(
    b536:	f04f 0240 	mov.w	r2, #64	; 0x40
    b53a:	f3ef 8311 	mrs	r3, BASEPRI
    b53e:	f382 8812 	msr	BASEPRI_MAX, r2
    b542:	f3bf 8f6f 	isb	sy
    b546:	f002 ffeb 	bl	e520 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    b54a:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    b54c:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    b54e:	b913      	cbnz	r3, b556 <idle+0x26>
	arch_cpu_idle();
    b550:	f7f8 fd0a 	bl	3f68 <arch_cpu_idle>
}
    b554:	e7ef      	b.n	b536 <idle+0x6>
    b556:	f7f7 fcf3 	bl	2f40 <pm_system_suspend>
    b55a:	2800      	cmp	r0, #0
    b55c:	d1eb      	bne.n	b536 <idle+0x6>
    b55e:	e7f7      	b.n	b550 <idle+0x20>
    b560:	20001c98 	.word	0x20001c98
    b564:	200023ef 	.word	0x200023ef

0000b568 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    b568:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    b56c:	4604      	mov	r4, r0
    b56e:	4617      	mov	r7, r2
    b570:	461e      	mov	r6, r3
    b572:	f04f 0340 	mov.w	r3, #64	; 0x40
    b576:	f3ef 8811 	mrs	r8, BASEPRI
    b57a:	f383 8812 	msr	BASEPRI_MAX, r3
    b57e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    b582:	68c3      	ldr	r3, [r0, #12]
    b584:	4a33      	ldr	r2, [pc, #204]	; (b654 <z_impl_k_mutex_lock+0xec>)
    b586:	b17b      	cbz	r3, b5a8 <z_impl_k_mutex_lock+0x40>
    b588:	6880      	ldr	r0, [r0, #8]
    b58a:	6891      	ldr	r1, [r2, #8]
    b58c:	4288      	cmp	r0, r1
    b58e:	d019      	beq.n	b5c4 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    b590:	ea57 0306 	orrs.w	r3, r7, r6
    b594:	d118      	bne.n	b5c8 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    b596:	f388 8811 	msr	BASEPRI, r8
    b59a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    b59e:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    b5a2:	b002      	add	sp, #8
    b5a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    b5a8:	6891      	ldr	r1, [r2, #8]
    b5aa:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    b5ae:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    b5b0:	3301      	adds	r3, #1
    b5b2:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    b5b4:	6893      	ldr	r3, [r2, #8]
    b5b6:	60a3      	str	r3, [r4, #8]
    b5b8:	f388 8811 	msr	BASEPRI, r8
    b5bc:	f3bf 8f6f 	isb	sy
		return 0;
    b5c0:	2000      	movs	r0, #0
    b5c2:	e7ee      	b.n	b5a2 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    b5c4:	6921      	ldr	r1, [r4, #16]
    b5c6:	e7f2      	b.n	b5ae <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    b5c8:	f991 100e 	ldrsb.w	r1, [r1, #14]
    b5cc:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    b5d0:	4299      	cmp	r1, r3
    b5d2:	bfa8      	it	ge
    b5d4:	4619      	movge	r1, r3
    b5d6:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    b5da:	4291      	cmp	r1, r2
    b5dc:	bfb8      	it	lt
    b5de:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    b5e0:	428b      	cmp	r3, r1
    b5e2:	dd2e      	ble.n	b642 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    b5e4:	f002 fd69 	bl	e0ba <adjust_owner_prio.isra.0>
    b5e8:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    b5ea:	e9cd 7600 	strd	r7, r6, [sp]
    b5ee:	481a      	ldr	r0, [pc, #104]	; (b658 <z_impl_k_mutex_lock+0xf0>)
    b5f0:	4622      	mov	r2, r4
    b5f2:	4641      	mov	r1, r8
    b5f4:	f000 fbc8 	bl	bd88 <z_pend_curr>
	if (got_mutex == 0) {
    b5f8:	2800      	cmp	r0, #0
    b5fa:	d0e1      	beq.n	b5c0 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    b5fc:	f04f 0340 	mov.w	r3, #64	; 0x40
    b600:	f3ef 8611 	mrs	r6, BASEPRI
    b604:	f383 8812 	msr	BASEPRI_MAX, r3
    b608:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    b60c:	68a0      	ldr	r0, [r4, #8]
    b60e:	b1d0      	cbz	r0, b646 <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    b610:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    b612:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b614:	429c      	cmp	r4, r3
    b616:	d00a      	beq.n	b62e <z_impl_k_mutex_lock+0xc6>
    b618:	b14b      	cbz	r3, b62e <z_impl_k_mutex_lock+0xc6>
    b61a:	f993 300e 	ldrsb.w	r3, [r3, #14]
    b61e:	4299      	cmp	r1, r3
    b620:	bfa8      	it	ge
    b622:	4619      	movge	r1, r3
    b624:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    b628:	4299      	cmp	r1, r3
    b62a:	bfb8      	it	lt
    b62c:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    b62e:	f002 fd44 	bl	e0ba <adjust_owner_prio.isra.0>
    b632:	b140      	cbz	r0, b646 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    b634:	4808      	ldr	r0, [pc, #32]	; (b658 <z_impl_k_mutex_lock+0xf0>)
    b636:	4631      	mov	r1, r6
    b638:	f000 fc0a 	bl	be50 <z_reschedule>
	return -EAGAIN;
    b63c:	f06f 000a 	mvn.w	r0, #10
    b640:	e7af      	b.n	b5a2 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    b642:	2500      	movs	r5, #0
    b644:	e7d1      	b.n	b5ea <z_impl_k_mutex_lock+0x82>
	if (resched) {
    b646:	2d00      	cmp	r5, #0
    b648:	d1f4      	bne.n	b634 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    b64a:	f386 8811 	msr	BASEPRI, r6
    b64e:	f3bf 8f6f 	isb	sy
    b652:	e7f3      	b.n	b63c <z_impl_k_mutex_lock+0xd4>
    b654:	20001c98 	.word	0x20001c98
    b658:	200023f0 	.word	0x200023f0

0000b65c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    b65c:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    b65e:	6883      	ldr	r3, [r0, #8]
{
    b660:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    b662:	b36b      	cbz	r3, b6c0 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    b664:	4a19      	ldr	r2, [pc, #100]	; (b6cc <z_impl_k_mutex_unlock+0x70>)
    b666:	6892      	ldr	r2, [r2, #8]
    b668:	4293      	cmp	r3, r2
    b66a:	d12c      	bne.n	b6c6 <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    b66c:	68c3      	ldr	r3, [r0, #12]
    b66e:	2b01      	cmp	r3, #1
    b670:	d903      	bls.n	b67a <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    b672:	3b01      	subs	r3, #1
    b674:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    b676:	2000      	movs	r0, #0
}
    b678:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    b67a:	f04f 0340 	mov.w	r3, #64	; 0x40
    b67e:	f3ef 8511 	mrs	r5, BASEPRI
    b682:	f383 8812 	msr	BASEPRI_MAX, r3
    b686:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    b68a:	6901      	ldr	r1, [r0, #16]
    b68c:	6880      	ldr	r0, [r0, #8]
    b68e:	f002 fd14 	bl	e0ba <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    b692:	4620      	mov	r0, r4
    b694:	f002 feb1 	bl	e3fa <z_unpend_first_thread>
	mutex->owner = new_owner;
    b698:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    b69a:	b158      	cbz	r0, b6b4 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    b69c:	f990 200e 	ldrsb.w	r2, [r0, #14]
    b6a0:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    b6a2:	2200      	movs	r2, #0
    b6a4:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    b6a6:	f002 fe49 	bl	e33c <z_ready_thread>
		z_reschedule(&lock, key);
    b6aa:	4809      	ldr	r0, [pc, #36]	; (b6d0 <z_impl_k_mutex_unlock+0x74>)
    b6ac:	4629      	mov	r1, r5
    b6ae:	f000 fbcf 	bl	be50 <z_reschedule>
    b6b2:	e7e0      	b.n	b676 <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    b6b4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    b6b6:	f385 8811 	msr	BASEPRI, r5
    b6ba:	f3bf 8f6f 	isb	sy
    b6be:	e7da      	b.n	b676 <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    b6c0:	f06f 0015 	mvn.w	r0, #21
    b6c4:	e7d8      	b.n	b678 <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    b6c6:	f04f 30ff 	mov.w	r0, #4294967295
    b6ca:	e7d5      	b.n	b678 <z_impl_k_mutex_unlock+0x1c>
    b6cc:	20001c98 	.word	0x20001c98
    b6d0:	200023f0 	.word	0x200023f0

0000b6d4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    b6d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b6d6:	4611      	mov	r1, r2
	__asm__ volatile(
    b6d8:	f04f 0240 	mov.w	r2, #64	; 0x40
    b6dc:	f3ef 8511 	mrs	r5, BASEPRI
    b6e0:	f382 8812 	msr	BASEPRI_MAX, r2
    b6e4:	f3bf 8f6f 	isb	sy
    b6e8:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    b6ea:	b19c      	cbz	r4, b714 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    b6ec:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    b6ee:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    b6f0:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    b6f4:	4294      	cmp	r4, r2
	list->head = node;
    b6f6:	6003      	str	r3, [r0, #0]
	list->tail = node;
    b6f8:	bf08      	it	eq
    b6fa:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    b6fc:	2101      	movs	r1, #1
    b6fe:	4620      	mov	r0, r4
    b700:	f002 fd4c 	bl	e19c <z_queue_node_peek>
    b704:	4604      	mov	r4, r0
	__asm__ volatile(
    b706:	f385 8811 	msr	BASEPRI, r5
    b70a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    b70e:	4620      	mov	r0, r4
    b710:	b003      	add	sp, #12
    b712:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    b714:	ea51 0203 	orrs.w	r2, r1, r3
    b718:	d0f5      	beq.n	b706 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    b71a:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    b71e:	e9cd 1300 	strd	r1, r3, [sp]
    b722:	4610      	mov	r0, r2
    b724:	4629      	mov	r1, r5
    b726:	f000 fb2f 	bl	bd88 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    b72a:	2800      	cmp	r0, #0
    b72c:	d1ef      	bne.n	b70e <z_impl_k_queue_get+0x3a>
    b72e:	4b02      	ldr	r3, [pc, #8]	; (b738 <z_impl_k_queue_get+0x64>)
    b730:	689b      	ldr	r3, [r3, #8]
    b732:	695c      	ldr	r4, [r3, #20]
    b734:	e7eb      	b.n	b70e <z_impl_k_queue_get+0x3a>
    b736:	bf00      	nop
    b738:	20001c98 	.word	0x20001c98

0000b73c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    b73c:	b538      	push	{r3, r4, r5, lr}
    b73e:	4604      	mov	r4, r0
	__asm__ volatile(
    b740:	f04f 0340 	mov.w	r3, #64	; 0x40
    b744:	f3ef 8511 	mrs	r5, BASEPRI
    b748:	f383 8812 	msr	BASEPRI_MAX, r3
    b74c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    b750:	f002 fe53 	bl	e3fa <z_unpend_first_thread>

	if (thread != NULL) {
    b754:	b148      	cbz	r0, b76a <z_impl_k_sem_give+0x2e>
    b756:	2200      	movs	r2, #0
    b758:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    b75a:	f002 fdef 	bl	e33c <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    b75e:	4629      	mov	r1, r5
    b760:	4805      	ldr	r0, [pc, #20]	; (b778 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    b762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    b766:	f000 bb73 	b.w	be50 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    b76a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    b76e:	429a      	cmp	r2, r3
    b770:	bf18      	it	ne
    b772:	3301      	addne	r3, #1
    b774:	60a3      	str	r3, [r4, #8]
}
    b776:	e7f2      	b.n	b75e <z_impl_k_sem_give+0x22>
    b778:	200023f0 	.word	0x200023f0

0000b77c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    b77c:	b513      	push	{r0, r1, r4, lr}
    b77e:	f04f 0440 	mov.w	r4, #64	; 0x40
    b782:	f3ef 8111 	mrs	r1, BASEPRI
    b786:	f384 8812 	msr	BASEPRI_MAX, r4
    b78a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    b78e:	6884      	ldr	r4, [r0, #8]
    b790:	b144      	cbz	r4, b7a4 <z_impl_k_sem_take+0x28>
		sem->count--;
    b792:	3c01      	subs	r4, #1
    b794:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    b796:	f381 8811 	msr	BASEPRI, r1
    b79a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    b79e:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    b7a0:	b002      	add	sp, #8
    b7a2:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    b7a4:	ea52 0403 	orrs.w	r4, r2, r3
    b7a8:	d106      	bne.n	b7b8 <z_impl_k_sem_take+0x3c>
    b7aa:	f381 8811 	msr	BASEPRI, r1
    b7ae:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    b7b2:	f06f 000f 	mvn.w	r0, #15
    b7b6:	e7f3      	b.n	b7a0 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    b7b8:	e9cd 2300 	strd	r2, r3, [sp]
    b7bc:	4602      	mov	r2, r0
    b7be:	4802      	ldr	r0, [pc, #8]	; (b7c8 <z_impl_k_sem_take+0x4c>)
    b7c0:	f000 fae2 	bl	bd88 <z_pend_curr>
	return ret;
    b7c4:	e7ec      	b.n	b7a0 <z_impl_k_sem_take+0x24>
    b7c6:	bf00      	nop
    b7c8:	200023f0 	.word	0x200023f0

0000b7cc <z_impl_k_sem_reset>:

void z_impl_k_sem_reset(struct k_sem *sem)
{
    b7cc:	b570      	push	{r4, r5, r6, lr}
    b7ce:	4604      	mov	r4, r0
	__asm__ volatile(
    b7d0:	f04f 0340 	mov.w	r3, #64	; 0x40
    b7d4:	f3ef 8511 	mrs	r5, BASEPRI
    b7d8:	f383 8812 	msr	BASEPRI_MAX, r3
    b7dc:	f3bf 8f6f 	isb	sy
    b7e0:	f06f 060a 	mvn.w	r6, #10
	struct k_thread *thread;
	k_spinlock_key_t key = k_spin_lock(&lock);

	while (true) {
		thread = z_unpend_first_thread(&sem->wait_q);
    b7e4:	4620      	mov	r0, r4
    b7e6:	f002 fe08 	bl	e3fa <z_unpend_first_thread>
		if (thread == NULL) {
    b7ea:	b118      	cbz	r0, b7f4 <z_impl_k_sem_reset+0x28>
    b7ec:	6786      	str	r6, [r0, #120]	; 0x78
			break;
		}
		arch_thread_return_value_set(thread, -EAGAIN);
		z_ready_thread(thread);
    b7ee:	f002 fda5 	bl	e33c <z_ready_thread>
		thread = z_unpend_first_thread(&sem->wait_q);
    b7f2:	e7f7      	b.n	b7e4 <z_impl_k_sem_reset+0x18>
	}
	sem->count = 0;
    b7f4:	60a0      	str	r0, [r4, #8]

	SYS_PORT_TRACING_OBJ_FUNC(k_sem, reset, sem);

	handle_poll_events(sem);

	z_reschedule(&lock, key);
    b7f6:	4629      	mov	r1, r5
    b7f8:	4802      	ldr	r0, [pc, #8]	; (b804 <z_impl_k_sem_reset+0x38>)
}
    b7fa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_reschedule(&lock, key);
    b7fe:	f000 bb27 	b.w	be50 <z_reschedule>
    b802:	bf00      	nop
    b804:	200023f0 	.word	0x200023f0

0000b808 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
    b808:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
    b80a:	4b09      	ldr	r3, [pc, #36]	; (b830 <k_sys_work_q_init+0x28>)
    b80c:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    b80e:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    b810:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    b812:	9300      	str	r3, [sp, #0]
    b814:	4907      	ldr	r1, [pc, #28]	; (b834 <k_sys_work_q_init+0x2c>)
    b816:	4808      	ldr	r0, [pc, #32]	; (b838 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    b818:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    b81c:	f04f 33ff 	mov.w	r3, #4294967295
    b820:	f44f 6280 	mov.w	r2, #1024	; 0x400
    b824:	f000 f906 	bl	ba34 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    b828:	4620      	mov	r0, r4
    b82a:	b004      	add	sp, #16
    b82c:	bd10      	pop	{r4, pc}
    b82e:	bf00      	nop
    b830:	00011432 	.word	0x00011432
    b834:	20003940 	.word	0x20003940
    b838:	20000b70 	.word	0x20000b70

0000b83c <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    b83c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    b840:	4e4a      	ldr	r6, [pc, #296]	; (b96c <work_queue_main+0x130>)
    b842:	b085      	sub	sp, #20
    b844:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    b846:	f04f 38ff 	mov.w	r8, #4294967295
    b84a:	f04f 39ff 	mov.w	r9, #4294967295
    b84e:	f04f 0340 	mov.w	r3, #64	; 0x40
    b852:	f3ef 8711 	mrs	r7, BASEPRI
    b856:	f383 8812 	msr	BASEPRI_MAX, r3
    b85a:	f3bf 8f6f 	isb	sy
    b85e:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    b862:	b98d      	cbnz	r5, b888 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    b864:	2102      	movs	r1, #2
    b866:	f104 0098 	add.w	r0, r4, #152	; 0x98
    b86a:	f002 fcc2 	bl	e1f2 <flag_test_and_clear>
    b86e:	2800      	cmp	r0, #0
    b870:	d143      	bne.n	b8fa <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    b872:	2300      	movs	r3, #0
    b874:	e9cd 8900 	strd	r8, r9, [sp]
    b878:	9302      	str	r3, [sp, #8]
    b87a:	f104 0288 	add.w	r2, r4, #136	; 0x88
    b87e:	4639      	mov	r1, r7
    b880:	483b      	ldr	r0, [pc, #236]	; (b970 <work_queue_main+0x134>)
    b882:	f000 fc9b 	bl	c1bc <z_sched_wait>
			continue;
    b886:	e7e2      	b.n	b84e <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b888:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    b88c:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    b88e:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b892:	4295      	cmp	r5, r2
	list->tail = node;
    b894:	bf08      	it	eq
    b896:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    b89a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    b89e:	f043 0302 	orr.w	r3, r3, #2
    b8a2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    b8a6:	68eb      	ldr	r3, [r5, #12]
    b8a8:	f023 0304 	bic.w	r3, r3, #4
    b8ac:	f043 0301 	orr.w	r3, r3, #1
    b8b0:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    b8b2:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    b8b4:	f387 8811 	msr	BASEPRI, r7
    b8b8:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    b8bc:	4628      	mov	r0, r5
    b8be:	4798      	blx	r3
	__asm__ volatile(
    b8c0:	f04f 0340 	mov.w	r3, #64	; 0x40
    b8c4:	f3ef 8b11 	mrs	fp, BASEPRI
    b8c8:	f383 8812 	msr	BASEPRI_MAX, r3
    b8cc:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    b8d0:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    b8d2:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    b8d4:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    b8d8:	d419      	bmi.n	b90e <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    b8da:	60ea      	str	r2, [r5, #12]
    b8dc:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    b8e0:	f023 0302 	bic.w	r3, r3, #2
    b8e4:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    b8e8:	f38b 8811 	msr	BASEPRI, fp
    b8ec:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    b8f0:	05db      	lsls	r3, r3, #23
    b8f2:	d4ac      	bmi.n	b84e <work_queue_main+0x12>
	z_impl_k_yield();
    b8f4:	f000 fb46 	bl	bf84 <z_impl_k_yield>
}
    b8f8:	e7a9      	b.n	b84e <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    b8fa:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    b8fe:	2200      	movs	r2, #0
    b900:	2101      	movs	r1, #1
    b902:	4628      	mov	r0, r5
    b904:	f002 fdd3 	bl	e4ae <z_sched_wake>
    b908:	2800      	cmp	r0, #0
    b90a:	d1f8      	bne.n	b8fe <work_queue_main+0xc2>
    b90c:	e7b1      	b.n	b872 <work_queue_main+0x36>
	return list->head;
    b90e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    b910:	f023 0303 	bic.w	r3, r3, #3
    b914:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    b916:	2800      	cmp	r0, #0
    b918:	d0e0      	beq.n	b8dc <work_queue_main+0xa0>
	return node->next;
    b91a:	2700      	movs	r7, #0
    b91c:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    b920:	463b      	mov	r3, r7
    b922:	2800      	cmp	r0, #0
    b924:	d0da      	beq.n	b8dc <work_queue_main+0xa0>
		if (wc->work == work) {
    b926:	6842      	ldr	r2, [r0, #4]
    b928:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    b92a:	4601      	mov	r1, r0
		if (wc->work == work) {
    b92c:	d10c      	bne.n	b948 <work_queue_main+0x10c>
	return node->next;
    b92e:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    b930:	b99f      	cbnz	r7, b95a <work_queue_main+0x11e>
    b932:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    b934:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    b936:	4282      	cmp	r2, r0
    b938:	d100      	bne.n	b93c <work_queue_main+0x100>
	list->tail = node;
    b93a:	6071      	str	r1, [r6, #4]
	parent->next = child;
    b93c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    b940:	f7ff fefc 	bl	b73c <z_impl_k_sem_give>
}
    b944:	4639      	mov	r1, r7
    b946:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    b948:	f1ba 0f00 	cmp.w	sl, #0
    b94c:	d00b      	beq.n	b966 <work_queue_main+0x12a>
	return node->next;
    b94e:	f8da 2000 	ldr.w	r2, [sl]
    b952:	4650      	mov	r0, sl
    b954:	460f      	mov	r7, r1
    b956:	4692      	mov	sl, r2
    b958:	e7e3      	b.n	b922 <work_queue_main+0xe6>
	parent->next = child;
    b95a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    b95c:	6872      	ldr	r2, [r6, #4]
    b95e:	4282      	cmp	r2, r0
	list->tail = node;
    b960:	bf08      	it	eq
    b962:	6077      	streq	r7, [r6, #4]
}
    b964:	e7ea      	b.n	b93c <work_queue_main+0x100>
    b966:	4652      	mov	r2, sl
    b968:	e7f3      	b.n	b952 <work_queue_main+0x116>
    b96a:	bf00      	nop
    b96c:	20001cbc 	.word	0x20001cbc
    b970:	200023f0 	.word	0x200023f0

0000b974 <submit_to_queue_locked>:
{
    b974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    b976:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    b978:	079a      	lsls	r2, r3, #30
{
    b97a:	4604      	mov	r4, r0
    b97c:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    b97e:	f3c3 0640 	ubfx	r6, r3, #1, #1
    b982:	d42c      	bmi.n	b9de <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    b984:	075b      	lsls	r3, r3, #29
    b986:	d41a      	bmi.n	b9be <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    b988:	680b      	ldr	r3, [r1, #0]
    b98a:	b90b      	cbnz	r3, b990 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    b98c:	6883      	ldr	r3, [r0, #8]
    b98e:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    b990:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    b992:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    b994:	bf44      	itt	mi
    b996:	68a3      	ldrmi	r3, [r4, #8]
    b998:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    b99a:	683d      	ldr	r5, [r7, #0]
			ret = 2;
    b99c:	bf4c      	ite	mi
    b99e:	2602      	movmi	r6, #2
		ret = 1;
    b9a0:	2601      	movpl	r6, #1
	if (queue == NULL) {
    b9a2:	2d00      	cmp	r5, #0
    b9a4:	d03a      	beq.n	ba1c <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    b9a6:	4b1f      	ldr	r3, [pc, #124]	; (ba24 <submit_to_queue_locked+0xb0>)
    b9a8:	689b      	ldr	r3, [r3, #8]
    b9aa:	42ab      	cmp	r3, r5
    b9ac:	d00a      	beq.n	b9c4 <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    b9ae:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    b9b2:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    b9b4:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    b9b8:	d414      	bmi.n	b9e4 <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    b9ba:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    b9be:	2300      	movs	r3, #0
    b9c0:	603b      	str	r3, [r7, #0]
	return ret;
    b9c2:	e025      	b.n	ba10 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    b9c4:	f002 fb65 	bl	e092 <k_is_in_isr>
    b9c8:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    b9cc:	2800      	cmp	r0, #0
    b9ce:	d1f0      	bne.n	b9b2 <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    b9d0:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    b9d2:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    b9d6:	d5f0      	bpl.n	b9ba <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    b9d8:	b152      	cbz	r2, b9f0 <submit_to_queue_locked+0x7c>
    b9da:	075b      	lsls	r3, r3, #29
    b9dc:	d408      	bmi.n	b9f0 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    b9de:	f06f 060f 	mvn.w	r6, #15
    b9e2:	e7ec      	b.n	b9be <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    b9e4:	2a00      	cmp	r2, #0
    b9e6:	d1fa      	bne.n	b9de <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    b9e8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    b9ec:	2b00      	cmp	r3, #0
    b9ee:	d1f6      	bne.n	b9de <submit_to_queue_locked+0x6a>
	parent->next = child;
    b9f0:	2300      	movs	r3, #0
    b9f2:	6023      	str	r3, [r4, #0]
	return list->tail;
    b9f4:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    b9f8:	b963      	cbnz	r3, ba14 <submit_to_queue_locked+0xa0>
	list->head = node;
    b9fa:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
    b9fe:	4628      	mov	r0, r5
    ba00:	f002 fc02 	bl	e208 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    ba04:	68e3      	ldr	r3, [r4, #12]
    ba06:	f043 0304 	orr.w	r3, r3, #4
    ba0a:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    ba0c:	683b      	ldr	r3, [r7, #0]
    ba0e:	60a3      	str	r3, [r4, #8]
}
    ba10:	4630      	mov	r0, r6
    ba12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    ba14:	601c      	str	r4, [r3, #0]
	list->tail = node;
    ba16:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
    ba1a:	e7f0      	b.n	b9fe <submit_to_queue_locked+0x8a>
		return -EINVAL;
    ba1c:	f06f 0615 	mvn.w	r6, #21
    ba20:	e7cd      	b.n	b9be <submit_to_queue_locked+0x4a>
    ba22:	bf00      	nop
    ba24:	20001c98 	.word	0x20001c98

0000ba28 <k_work_submit>:
{
    ba28:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    ba2a:	4801      	ldr	r0, [pc, #4]	; (ba30 <k_work_submit+0x8>)
    ba2c:	f002 bc2f 	b.w	e28e <k_work_submit_to_queue>
    ba30:	20000b70 	.word	0x20000b70

0000ba34 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    ba34:	b5f0      	push	{r4, r5, r6, r7, lr}
    ba36:	b089      	sub	sp, #36	; 0x24
    ba38:	4604      	mov	r4, r0
	list->head = NULL;
    ba3a:	2000      	movs	r0, #0
	list->tail = NULL;
    ba3c:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    ba40:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    ba42:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    ba46:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    ba4a:	f104 0090 	add.w	r0, r4, #144	; 0x90
    ba4e:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    ba52:	b31d      	cbz	r5, ba9c <k_work_queue_start+0x68>
    ba54:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    ba56:	2800      	cmp	r0, #0
    ba58:	f240 1001 	movw	r0, #257	; 0x101
    ba5c:	bf08      	it	eq
    ba5e:	2001      	moveq	r0, #1
	*flagp = flags;
    ba60:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    ba64:	2000      	movs	r0, #0
    ba66:	f04f 36ff 	mov.w	r6, #4294967295
    ba6a:	f04f 37ff 	mov.w	r7, #4294967295
    ba6e:	e9cd 3003 	strd	r3, r0, [sp, #12]
    ba72:	e9cd 0001 	strd	r0, r0, [sp, #4]
    ba76:	e9cd 6706 	strd	r6, r7, [sp, #24]
    ba7a:	4b09      	ldr	r3, [pc, #36]	; (baa0 <k_work_queue_start+0x6c>)
    ba7c:	9400      	str	r4, [sp, #0]
    ba7e:	4620      	mov	r0, r4
    ba80:	f7ff fcce 	bl	b420 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    ba84:	b125      	cbz	r5, ba90 <k_work_queue_start+0x5c>
    ba86:	6829      	ldr	r1, [r5, #0]
    ba88:	b111      	cbz	r1, ba90 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    ba8a:	4620      	mov	r0, r4
    ba8c:	f002 fb07 	bl	e09e <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    ba90:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    ba92:	b009      	add	sp, #36	; 0x24
    ba94:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    ba98:	f002 bb06 	b.w	e0a8 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    ba9c:	2001      	movs	r0, #1
    ba9e:	e7df      	b.n	ba60 <k_work_queue_start+0x2c>
    baa0:	0000b83d 	.word	0x0000b83d

0000baa4 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    baa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    baa6:	9001      	str	r0, [sp, #4]
    baa8:	4608      	mov	r0, r1
	__asm__ volatile(
    baaa:	f04f 0140 	mov.w	r1, #64	; 0x40
    baae:	f3ef 8411 	mrs	r4, BASEPRI
    bab2:	f381 8812 	msr	BASEPRI_MAX, r1
    bab6:	f3bf 8f6f 	isb	sy
	return *flagp;
    baba:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    babc:	f011 0f0e 	tst.w	r1, #14
    bac0:	d116      	bne.n	baf0 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    bac2:	ea53 0502 	orrs.w	r5, r3, r2
    bac6:	d108      	bne.n	bada <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    bac8:	a901      	add	r1, sp, #4
    baca:	f7ff ff53 	bl	b974 <submit_to_queue_locked>
	__asm__ volatile(
    bace:	f384 8811 	msr	BASEPRI, r4
    bad2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    bad6:	b003      	add	sp, #12
    bad8:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
    bada:	f041 0108 	orr.w	r1, r1, #8
    bade:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    bae0:	9901      	ldr	r1, [sp, #4]
    bae2:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    bae4:	3010      	adds	r0, #16
    bae6:	4903      	ldr	r1, [pc, #12]	; (baf4 <k_work_schedule_for_queue+0x50>)
    bae8:	f000 fbda 	bl	c2a0 <z_add_timeout>
	return ret;
    baec:	2001      	movs	r0, #1
    baee:	e7ee      	b.n	bace <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    baf0:	2000      	movs	r0, #0
    baf2:	e7ec      	b.n	bace <k_work_schedule_for_queue+0x2a>
    baf4:	0000e217 	.word	0x0000e217

0000baf8 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
    baf8:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
    bafa:	4801      	ldr	r0, [pc, #4]	; (bb00 <k_work_schedule+0x8>)
    bafc:	f7ff bfd2 	b.w	baa4 <k_work_schedule_for_queue>
    bb00:	20000b70 	.word	0x20000b70

0000bb04 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    bb04:	89c3      	ldrh	r3, [r0, #14]
    bb06:	2b7f      	cmp	r3, #127	; 0x7f
    bb08:	d812      	bhi.n	bb30 <sliceable+0x2c>
	int ret = slice_ticks;
    bb0a:	4b0a      	ldr	r3, [pc, #40]	; (bb34 <sliceable+0x30>)
    bb0c:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    bb0e:	b163      	cbz	r3, bb2a <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    bb10:	4b09      	ldr	r3, [pc, #36]	; (bb38 <sliceable+0x34>)
    bb12:	f990 200e 	ldrsb.w	r2, [r0, #14]
    bb16:	681b      	ldr	r3, [r3, #0]
    bb18:	429a      	cmp	r2, r3
    bb1a:	db09      	blt.n	bb30 <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    bb1c:	7b43      	ldrb	r3, [r0, #13]
    bb1e:	06db      	lsls	r3, r3, #27
    bb20:	d106      	bne.n	bb30 <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    bb22:	4b06      	ldr	r3, [pc, #24]	; (bb3c <sliceable+0x38>)
    bb24:	1ac3      	subs	r3, r0, r3
    bb26:	bf18      	it	ne
    bb28:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    bb2a:	f003 0001 	and.w	r0, r3, #1
    bb2e:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    bb30:	2300      	movs	r3, #0
    bb32:	e7fa      	b.n	bb2a <sliceable+0x26>
    bb34:	20001ccc 	.word	0x20001ccc
    bb38:	20001cc8 	.word	0x20001cc8
    bb3c:	20000a70 	.word	0x20000a70

0000bb40 <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    bb40:	4b04      	ldr	r3, [pc, #16]	; (bb54 <slice_timeout+0x14>)
    bb42:	1ac0      	subs	r0, r0, r3
    bb44:	4b04      	ldr	r3, [pc, #16]	; (bb58 <slice_timeout+0x18>)
    bb46:	10c0      	asrs	r0, r0, #3
    bb48:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    bb4a:	4b04      	ldr	r3, [pc, #16]	; (bb5c <slice_timeout+0x1c>)
    bb4c:	2201      	movs	r2, #1
    bb4e:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    bb50:	4770      	bx	lr
    bb52:	bf00      	nop
    bb54:	20000c10 	.word	0x20000c10
    bb58:	aaaaaaab 	.word	0xaaaaaaab
    bb5c:	200023f0 	.word	0x200023f0

0000bb60 <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    bb60:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    bb62:	4b0e      	ldr	r3, [pc, #56]	; (bb9c <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    bb64:	4c0e      	ldr	r4, [pc, #56]	; (bba0 <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    bb66:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    bb68:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    bb6c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    bb70:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    bb72:	4620      	mov	r0, r4
    bb74:	f002 fcbe 	bl	e4f4 <z_abort_timeout>
	slice_expired[cpu] = false;
    bb78:	4b0a      	ldr	r3, [pc, #40]	; (bba4 <z_reset_time_slice+0x44>)
    bb7a:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    bb7c:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    bb7e:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    bb80:	f7ff ffc0 	bl	bb04 <sliceable>
    bb84:	b148      	cbz	r0, bb9a <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    bb86:	4b08      	ldr	r3, [pc, #32]	; (bba8 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    bb88:	4908      	ldr	r1, [pc, #32]	; (bbac <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    bb8a:	681a      	ldr	r2, [r3, #0]
    bb8c:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    bb8e:	4620      	mov	r0, r4
    bb90:	17d3      	asrs	r3, r2, #31
	}
}
    bb92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    bb96:	f000 bb83 	b.w	c2a0 <z_add_timeout>
}
    bb9a:	bd70      	pop	{r4, r5, r6, pc}
    bb9c:	20001c98 	.word	0x20001c98
    bba0:	20000c10 	.word	0x20000c10
    bba4:	200023f0 	.word	0x200023f0
    bba8:	20001ccc 	.word	0x20001ccc
    bbac:	0000bb41 	.word	0x0000bb41

0000bbb0 <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    bbb0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    bbb2:	4d0d      	ldr	r5, [pc, #52]	; (bbe8 <update_cache+0x38>)
    bbb4:	462b      	mov	r3, r5
    bbb6:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bbba:	429c      	cmp	r4, r3
    bbbc:	d000      	beq.n	bbc0 <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    bbbe:	b904      	cbnz	r4, bbc2 <update_cache+0x12>
    bbc0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    bbc2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    bbc4:	b938      	cbnz	r0, bbd6 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    bbc6:	7b5a      	ldrb	r2, [r3, #13]
    bbc8:	06d2      	lsls	r2, r2, #27
    bbca:	d104      	bne.n	bbd6 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    bbcc:	69a2      	ldr	r2, [r4, #24]
    bbce:	b912      	cbnz	r2, bbd6 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    bbd0:	89da      	ldrh	r2, [r3, #14]
    bbd2:	2a7f      	cmp	r2, #127	; 0x7f
    bbd4:	d805      	bhi.n	bbe2 <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    bbd6:	429c      	cmp	r4, r3
    bbd8:	d002      	beq.n	bbe0 <update_cache+0x30>
			z_reset_time_slice(thread);
    bbda:	4620      	mov	r0, r4
    bbdc:	f7ff ffc0 	bl	bb60 <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    bbe0:	4623      	mov	r3, r4
    bbe2:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    bbe4:	bd38      	pop	{r3, r4, r5, pc}
    bbe6:	bf00      	nop
    bbe8:	20001c98 	.word	0x20001c98

0000bbec <move_thread_to_end_of_prio_q>:
{
    bbec:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    bbee:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    bbf2:	7b43      	ldrb	r3, [r0, #13]
    bbf4:	2a00      	cmp	r2, #0
{
    bbf6:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    bbf8:	da04      	bge.n	bc04 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bbfa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    bbfe:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    bc00:	f002 fb62 	bl	e2c8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    bc04:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    bc06:	4a15      	ldr	r2, [pc, #84]	; (bc5c <move_thread_to_end_of_prio_q+0x70>)
    bc08:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bc0c:	4610      	mov	r0, r2
    bc0e:	734b      	strb	r3, [r1, #13]
    bc10:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    bc14:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bc16:	4283      	cmp	r3, r0
    bc18:	bf08      	it	eq
    bc1a:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bc1c:	b923      	cbnz	r3, bc28 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    bc1e:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    bc22:	6021      	str	r1, [r4, #0]
	list->tail = node;
    bc24:	6211      	str	r1, [r2, #32]
}
    bc26:	e00c      	b.n	bc42 <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    bc28:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    bc2c:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    bc30:	42b5      	cmp	r5, r6
    bc32:	d00e      	beq.n	bc52 <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    bc34:	42ae      	cmp	r6, r5
    bc36:	dd0c      	ble.n	bc52 <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    bc38:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    bc3a:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    bc3e:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    bc40:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    bc42:	6890      	ldr	r0, [r2, #8]
    bc44:	1a43      	subs	r3, r0, r1
    bc46:	4258      	negs	r0, r3
}
    bc48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    bc4c:	4158      	adcs	r0, r3
    bc4e:	f7ff bfaf 	b.w	bbb0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    bc52:	429c      	cmp	r4, r3
    bc54:	d0e3      	beq.n	bc1e <move_thread_to_end_of_prio_q+0x32>
    bc56:	681b      	ldr	r3, [r3, #0]
    bc58:	e7e0      	b.n	bc1c <move_thread_to_end_of_prio_q+0x30>
    bc5a:	bf00      	nop
    bc5c:	20001c98 	.word	0x20001c98

0000bc60 <ready_thread>:
{
    bc60:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    bc62:	f990 300d 	ldrsb.w	r3, [r0, #13]
    bc66:	7b42      	ldrb	r2, [r0, #13]
    bc68:	2b00      	cmp	r3, #0
    bc6a:	db29      	blt.n	bcc0 <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    bc6c:	06d3      	lsls	r3, r2, #27
    bc6e:	d127      	bne.n	bcc0 <ready_thread+0x60>
	return node->next != NULL;
    bc70:	6983      	ldr	r3, [r0, #24]
    bc72:	bb2b      	cbnz	r3, bcc0 <ready_thread+0x60>
	return list->head == list;
    bc74:	4913      	ldr	r1, [pc, #76]	; (bcc4 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    bc76:	f062 027f 	orn	r2, r2, #127	; 0x7f
    bc7a:	7342      	strb	r2, [r0, #13]
    bc7c:	460a      	mov	r2, r1
    bc7e:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bc82:	4294      	cmp	r4, r2
    bc84:	bf18      	it	ne
    bc86:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    bc88:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bc8a:	b923      	cbnz	r3, bc96 <ready_thread+0x36>
	node->prev = tail;
    bc8c:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    bc90:	6020      	str	r0, [r4, #0]
	list->tail = node;
    bc92:	6208      	str	r0, [r1, #32]
}
    bc94:	e00c      	b.n	bcb0 <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    bc96:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    bc9a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    bc9e:	42b5      	cmp	r5, r6
    bca0:	d00a      	beq.n	bcb8 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    bca2:	42ae      	cmp	r6, r5
    bca4:	dd08      	ble.n	bcb8 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    bca6:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    bca8:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    bcac:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    bcae:	6058      	str	r0, [r3, #4]
}
    bcb0:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    bcb2:	2000      	movs	r0, #0
    bcb4:	f7ff bf7c 	b.w	bbb0 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    bcb8:	42a3      	cmp	r3, r4
    bcba:	d0e7      	beq.n	bc8c <ready_thread+0x2c>
    bcbc:	681b      	ldr	r3, [r3, #0]
    bcbe:	e7e4      	b.n	bc8a <ready_thread+0x2a>
}
    bcc0:	bc70      	pop	{r4, r5, r6}
    bcc2:	4770      	bx	lr
    bcc4:	20001c98 	.word	0x20001c98

0000bcc8 <unready_thread>:
{
    bcc8:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    bcca:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    bcce:	7b43      	ldrb	r3, [r0, #13]
    bcd0:	2a00      	cmp	r2, #0
{
    bcd2:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    bcd4:	da04      	bge.n	bce0 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bcd6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    bcda:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    bcdc:	f002 faf4 	bl	e2c8 <sys_dlist_remove>
	update_cache(thread == _current);
    bce0:	4b04      	ldr	r3, [pc, #16]	; (bcf4 <unready_thread+0x2c>)
    bce2:	6898      	ldr	r0, [r3, #8]
    bce4:	1a43      	subs	r3, r0, r1
    bce6:	4258      	negs	r0, r3
    bce8:	4158      	adcs	r0, r3
}
    bcea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    bcee:	f7ff bf5f 	b.w	bbb0 <update_cache>
    bcf2:	bf00      	nop
    bcf4:	20001c98 	.word	0x20001c98

0000bcf8 <pend_locked>:
{
    bcf8:	b570      	push	{r4, r5, r6, lr}
    bcfa:	4615      	mov	r5, r2
    bcfc:	461c      	mov	r4, r3
    bcfe:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    bd00:	f002 faf4 	bl	e2ec <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    bd04:	f1b4 3fff 	cmp.w	r4, #4294967295
    bd08:	bf08      	it	eq
    bd0a:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    bd0e:	d008      	beq.n	bd22 <pend_locked+0x2a>
    bd10:	462a      	mov	r2, r5
    bd12:	4623      	mov	r3, r4
    bd14:	f106 0018 	add.w	r0, r6, #24
    bd18:	4902      	ldr	r1, [pc, #8]	; (bd24 <pend_locked+0x2c>)
}
    bd1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bd1e:	f000 babf 	b.w	c2a0 <z_add_timeout>
    bd22:	bd70      	pop	{r4, r5, r6, pc}
    bd24:	0000e3c5 	.word	0x0000e3c5

0000bd28 <z_time_slice>:
{
    bd28:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    bd2a:	f04f 0340 	mov.w	r3, #64	; 0x40
    bd2e:	f3ef 8511 	mrs	r5, BASEPRI
    bd32:	f383 8812 	msr	BASEPRI_MAX, r3
    bd36:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    bd3a:	4b10      	ldr	r3, [pc, #64]	; (bd7c <z_time_slice+0x54>)
	if (pending_current == curr) {
    bd3c:	4a10      	ldr	r2, [pc, #64]	; (bd80 <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    bd3e:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    bd40:	6810      	ldr	r0, [r2, #0]
    bd42:	42a0      	cmp	r0, r4
    bd44:	d106      	bne.n	bd54 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    bd46:	f7ff ff0b 	bl	bb60 <z_reset_time_slice>
	__asm__ volatile(
    bd4a:	f385 8811 	msr	BASEPRI, r5
    bd4e:	f3bf 8f6f 	isb	sy
}
    bd52:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    bd54:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    bd56:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    bd58:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    bd5a:	4a0a      	ldr	r2, [pc, #40]	; (bd84 <z_time_slice+0x5c>)
    bd5c:	5cd3      	ldrb	r3, [r2, r3]
    bd5e:	2b00      	cmp	r3, #0
    bd60:	d0f3      	beq.n	bd4a <z_time_slice+0x22>
    bd62:	4620      	mov	r0, r4
    bd64:	f7ff fece 	bl	bb04 <sliceable>
    bd68:	2800      	cmp	r0, #0
    bd6a:	d0ee      	beq.n	bd4a <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    bd6c:	7b63      	ldrb	r3, [r4, #13]
    bd6e:	06db      	lsls	r3, r3, #27
    bd70:	d102      	bne.n	bd78 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    bd72:	4620      	mov	r0, r4
    bd74:	f7ff ff3a 	bl	bbec <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    bd78:	4620      	mov	r0, r4
    bd7a:	e7e4      	b.n	bd46 <z_time_slice+0x1e>
    bd7c:	20001c98 	.word	0x20001c98
    bd80:	20001cc4 	.word	0x20001cc4
    bd84:	200023f0 	.word	0x200023f0

0000bd88 <z_pend_curr>:
{
    bd88:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    bd8a:	480c      	ldr	r0, [pc, #48]	; (bdbc <z_pend_curr+0x34>)
    bd8c:	4d0c      	ldr	r5, [pc, #48]	; (bdc0 <z_pend_curr+0x38>)
    bd8e:	6886      	ldr	r6, [r0, #8]
    bd90:	602e      	str	r6, [r5, #0]
{
    bd92:	460c      	mov	r4, r1
    bd94:	4611      	mov	r1, r2
    bd96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    bd9a:	f04f 0640 	mov.w	r6, #64	; 0x40
    bd9e:	f3ef 8511 	mrs	r5, BASEPRI
    bda2:	f386 8812 	msr	BASEPRI_MAX, r6
    bda6:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    bdaa:	6880      	ldr	r0, [r0, #8]
    bdac:	f7ff ffa4 	bl	bcf8 <pend_locked>
	ret = arch_swap(key);
    bdb0:	4620      	mov	r0, r4
}
    bdb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    bdb6:	f7f8 b9c9 	b.w	414c <arch_swap>
    bdba:	bf00      	nop
    bdbc:	20001c98 	.word	0x20001c98
    bdc0:	20001cc4 	.word	0x20001cc4

0000bdc4 <z_set_prio>:
{
    bdc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bdc6:	4604      	mov	r4, r0
    bdc8:	f04f 0340 	mov.w	r3, #64	; 0x40
    bdcc:	f3ef 8611 	mrs	r6, BASEPRI
    bdd0:	f383 8812 	msr	BASEPRI_MAX, r3
    bdd4:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    bdd8:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    bdda:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    bddc:	b249      	sxtb	r1, r1
    bdde:	d119      	bne.n	be14 <z_set_prio+0x50>
	return node->next != NULL;
    bde0:	6985      	ldr	r5, [r0, #24]
    bde2:	b9bd      	cbnz	r5, be14 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bde4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    bde8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    bdea:	f002 fa6d 	bl	e2c8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    bdee:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    bdf0:	4a16      	ldr	r2, [pc, #88]	; (be4c <z_set_prio+0x88>)
				thread->base.prio = prio;
    bdf2:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    bdf4:	f063 037f 	orn	r3, r3, #127	; 0x7f
    bdf8:	7343      	strb	r3, [r0, #13]
    bdfa:	4613      	mov	r3, r2
    bdfc:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    be00:	4298      	cmp	r0, r3
    be02:	bf18      	it	ne
    be04:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    be06:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    be08:	b95d      	cbnz	r5, be22 <z_set_prio+0x5e>
	node->prev = tail;
    be0a:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    be0e:	6004      	str	r4, [r0, #0]
	list->tail = node;
    be10:	6214      	str	r4, [r2, #32]
}
    be12:	e011      	b.n	be38 <z_set_prio+0x74>
			thread->base.prio = prio;
    be14:	73a1      	strb	r1, [r4, #14]
    be16:	2000      	movs	r0, #0
	__asm__ volatile(
    be18:	f386 8811 	msr	BASEPRI, r6
    be1c:	f3bf 8f6f 	isb	sy
}
    be20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    be22:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    be26:	42b9      	cmp	r1, r7
    be28:	d00b      	beq.n	be42 <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    be2a:	428f      	cmp	r7, r1
    be2c:	dd09      	ble.n	be42 <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    be2e:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    be30:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    be34:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    be36:	606c      	str	r4, [r5, #4]
			update_cache(1);
    be38:	2001      	movs	r0, #1
    be3a:	f7ff feb9 	bl	bbb0 <update_cache>
    be3e:	2001      	movs	r0, #1
    be40:	e7ea      	b.n	be18 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    be42:	42a8      	cmp	r0, r5
    be44:	d0e1      	beq.n	be0a <z_set_prio+0x46>
    be46:	682d      	ldr	r5, [r5, #0]
    be48:	e7de      	b.n	be08 <z_set_prio+0x44>
    be4a:	bf00      	nop
    be4c:	20001c98 	.word	0x20001c98

0000be50 <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    be50:	b949      	cbnz	r1, be66 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    be52:	f3ef 8005 	mrs	r0, IPSR
    be56:	b930      	cbnz	r0, be66 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    be58:	4b05      	ldr	r3, [pc, #20]	; (be70 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    be5a:	699a      	ldr	r2, [r3, #24]
    be5c:	689b      	ldr	r3, [r3, #8]
    be5e:	429a      	cmp	r2, r3
    be60:	d001      	beq.n	be66 <z_reschedule+0x16>
    be62:	f7f8 b973 	b.w	414c <arch_swap>
    be66:	f381 8811 	msr	BASEPRI, r1
    be6a:	f3bf 8f6f 	isb	sy
}
    be6e:	4770      	bx	lr
    be70:	20001c98 	.word	0x20001c98

0000be74 <z_sched_start>:
{
    be74:	b510      	push	{r4, lr}
	__asm__ volatile(
    be76:	f04f 0240 	mov.w	r2, #64	; 0x40
    be7a:	f3ef 8411 	mrs	r4, BASEPRI
    be7e:	f382 8812 	msr	BASEPRI_MAX, r2
    be82:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    be86:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    be88:	0751      	lsls	r1, r2, #29
    be8a:	d404      	bmi.n	be96 <z_sched_start+0x22>
	__asm__ volatile(
    be8c:	f384 8811 	msr	BASEPRI, r4
    be90:	f3bf 8f6f 	isb	sy
}
    be94:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    be96:	f022 0204 	bic.w	r2, r2, #4
    be9a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    be9c:	f7ff fee0 	bl	bc60 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    bea0:	4621      	mov	r1, r4
    bea2:	4802      	ldr	r0, [pc, #8]	; (beac <z_sched_start+0x38>)
}
    bea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    bea8:	f7ff bfd2 	b.w	be50 <z_reschedule>
    beac:	200023f1 	.word	0x200023f1

0000beb0 <z_impl_k_thread_suspend>:
{
    beb0:	b570      	push	{r4, r5, r6, lr}
    beb2:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    beb4:	3018      	adds	r0, #24
    beb6:	f002 fb1d 	bl	e4f4 <z_abort_timeout>
	__asm__ volatile(
    beba:	f04f 0340 	mov.w	r3, #64	; 0x40
    bebe:	f3ef 8611 	mrs	r6, BASEPRI
    bec2:	f383 8812 	msr	BASEPRI_MAX, r3
    bec6:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    beca:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    bece:	7b63      	ldrb	r3, [r4, #13]
    bed0:	2a00      	cmp	r2, #0
    bed2:	da05      	bge.n	bee0 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bed4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    bed8:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    beda:	4620      	mov	r0, r4
    bedc:	f002 f9f4 	bl	e2c8 <sys_dlist_remove>
		update_cache(thread == _current);
    bee0:	4d0b      	ldr	r5, [pc, #44]	; (bf10 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    bee2:	7b63      	ldrb	r3, [r4, #13]
    bee4:	68a8      	ldr	r0, [r5, #8]
    bee6:	f043 0310 	orr.w	r3, r3, #16
    beea:	7363      	strb	r3, [r4, #13]
    beec:	1b03      	subs	r3, r0, r4
    beee:	4258      	negs	r0, r3
    bef0:	4158      	adcs	r0, r3
    bef2:	f7ff fe5d 	bl	bbb0 <update_cache>
	__asm__ volatile(
    bef6:	f386 8811 	msr	BASEPRI, r6
    befa:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    befe:	68ab      	ldr	r3, [r5, #8]
    bf00:	42a3      	cmp	r3, r4
    bf02:	d103      	bne.n	bf0c <z_impl_k_thread_suspend+0x5c>
}
    bf04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    bf08:	f002 bab7 	b.w	e47a <z_reschedule_unlocked>
}
    bf0c:	bd70      	pop	{r4, r5, r6, pc}
    bf0e:	bf00      	nop
    bf10:	20001c98 	.word	0x20001c98

0000bf14 <k_sched_lock>:
	__asm__ volatile(
    bf14:	f04f 0340 	mov.w	r3, #64	; 0x40
    bf18:	f3ef 8111 	mrs	r1, BASEPRI
    bf1c:	f383 8812 	msr	BASEPRI_MAX, r3
    bf20:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    bf24:	4b04      	ldr	r3, [pc, #16]	; (bf38 <k_sched_lock+0x24>)
    bf26:	689a      	ldr	r2, [r3, #8]
    bf28:	7bd3      	ldrb	r3, [r2, #15]
    bf2a:	3b01      	subs	r3, #1
    bf2c:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    bf2e:	f381 8811 	msr	BASEPRI, r1
    bf32:	f3bf 8f6f 	isb	sy
}
    bf36:	4770      	bx	lr
    bf38:	20001c98 	.word	0x20001c98

0000bf3c <k_sched_unlock>:
{
    bf3c:	b510      	push	{r4, lr}
	__asm__ volatile(
    bf3e:	f04f 0340 	mov.w	r3, #64	; 0x40
    bf42:	f3ef 8411 	mrs	r4, BASEPRI
    bf46:	f383 8812 	msr	BASEPRI_MAX, r3
    bf4a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    bf4e:	4b08      	ldr	r3, [pc, #32]	; (bf70 <k_sched_unlock+0x34>)
    bf50:	689a      	ldr	r2, [r3, #8]
    bf52:	7bd3      	ldrb	r3, [r2, #15]
    bf54:	3301      	adds	r3, #1
    bf56:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    bf58:	2000      	movs	r0, #0
    bf5a:	f7ff fe29 	bl	bbb0 <update_cache>
	__asm__ volatile(
    bf5e:	f384 8811 	msr	BASEPRI, r4
    bf62:	f3bf 8f6f 	isb	sy
}
    bf66:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    bf6a:	f002 ba86 	b.w	e47a <z_reschedule_unlocked>
    bf6e:	bf00      	nop
    bf70:	20001c98 	.word	0x20001c98

0000bf74 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    bf74:	4b02      	ldr	r3, [pc, #8]	; (bf80 <z_sched_init+0xc>)
    bf76:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    bf7a:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    bf7e:	4770      	bx	lr
    bf80:	20001c98 	.word	0x20001c98

0000bf84 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    bf84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    bf86:	f04f 0340 	mov.w	r3, #64	; 0x40
    bf8a:	f3ef 8511 	mrs	r5, BASEPRI
    bf8e:	f383 8812 	msr	BASEPRI_MAX, r3
    bf92:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    bf96:	4919      	ldr	r1, [pc, #100]	; (bffc <z_impl_k_yield+0x78>)
    bf98:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    bf9a:	7b43      	ldrb	r3, [r0, #13]
    bf9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    bfa0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    bfa2:	f002 f991 	bl	e2c8 <sys_dlist_remove>
	}
	queue_thread(_current);
    bfa6:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    bfa8:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    bfaa:	4608      	mov	r0, r1
    bfac:	f062 027f 	orn	r2, r2, #127	; 0x7f
    bfb0:	735a      	strb	r2, [r3, #13]
    bfb2:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    bfb6:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    bfb8:	4282      	cmp	r2, r0
    bfba:	bf08      	it	eq
    bfbc:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    bfbe:	b922      	cbnz	r2, bfca <z_impl_k_yield+0x46>
	node->prev = tail;
    bfc0:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    bfc4:	6023      	str	r3, [r4, #0]
	list->tail = node;
    bfc6:	620b      	str	r3, [r1, #32]
}
    bfc8:	e00c      	b.n	bfe4 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    bfca:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    bfce:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    bfd2:	42be      	cmp	r6, r7
    bfd4:	d00e      	beq.n	bff4 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    bfd6:	42b7      	cmp	r7, r6
    bfd8:	dd0c      	ble.n	bff4 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    bfda:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    bfdc:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    bfe0:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    bfe2:	6053      	str	r3, [r2, #4]
	update_cache(1);
    bfe4:	2001      	movs	r0, #1
    bfe6:	f7ff fde3 	bl	bbb0 <update_cache>
    bfea:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    bfec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    bff0:	f7f8 b8ac 	b.w	414c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    bff4:	42a2      	cmp	r2, r4
    bff6:	d0e3      	beq.n	bfc0 <z_impl_k_yield+0x3c>
    bff8:	6812      	ldr	r2, [r2, #0]
    bffa:	e7e0      	b.n	bfbe <z_impl_k_yield+0x3a>
    bffc:	20001c98 	.word	0x20001c98

0000c000 <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    c000:	ea50 0301 	orrs.w	r3, r0, r1
{
    c004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c008:	4605      	mov	r5, r0
    c00a:	460e      	mov	r6, r1
	if (ticks == 0) {
    c00c:	d103      	bne.n	c016 <z_tick_sleep+0x16>
	z_impl_k_yield();
    c00e:	f7ff ffb9 	bl	bf84 <z_impl_k_yield>
		k_yield();
		return 0;
    c012:	2000      	movs	r0, #0
    c014:	e02c      	b.n	c070 <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    c016:	1c83      	adds	r3, r0, #2
    c018:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    c01c:	db2a      	blt.n	c074 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    c01e:	f002 fa8f 	bl	e540 <sys_clock_tick_get_32>
    c022:	182c      	adds	r4, r5, r0
    c024:	f04f 0340 	mov.w	r3, #64	; 0x40
    c028:	f3ef 8811 	mrs	r8, BASEPRI
    c02c:	f383 8812 	msr	BASEPRI_MAX, r3
    c030:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    c034:	4f11      	ldr	r7, [pc, #68]	; (c07c <z_tick_sleep+0x7c>)
    c036:	4b12      	ldr	r3, [pc, #72]	; (c080 <z_tick_sleep+0x80>)
    c038:	68b8      	ldr	r0, [r7, #8]
    c03a:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    c03c:	f7ff fe44 	bl	bcc8 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    c040:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    c042:	4910      	ldr	r1, [pc, #64]	; (c084 <z_tick_sleep+0x84>)
    c044:	462a      	mov	r2, r5
    c046:	4633      	mov	r3, r6
    c048:	3018      	adds	r0, #24
    c04a:	f000 f929 	bl	c2a0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    c04e:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    c050:	7b53      	ldrb	r3, [r2, #13]
    c052:	f043 0310 	orr.w	r3, r3, #16
    c056:	7353      	strb	r3, [r2, #13]
    c058:	4640      	mov	r0, r8
    c05a:	f7f8 f877 	bl	414c <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    c05e:	f002 fa6f 	bl	e540 <sys_clock_tick_get_32>
    c062:	1a20      	subs	r0, r4, r0
    c064:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    c068:	2801      	cmp	r0, #1
    c06a:	f173 0300 	sbcs.w	r3, r3, #0
    c06e:	dbd0      	blt.n	c012 <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    c070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    c074:	f06f 0401 	mvn.w	r4, #1
    c078:	1a24      	subs	r4, r4, r0
    c07a:	e7d3      	b.n	c024 <z_tick_sleep+0x24>
    c07c:	20001c98 	.word	0x20001c98
    c080:	20001cc4 	.word	0x20001cc4
    c084:	0000e3c5 	.word	0x0000e3c5

0000c088 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c088:	f1b1 3fff 	cmp.w	r1, #4294967295
    c08c:	bf08      	it	eq
    c08e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    c092:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c094:	d106      	bne.n	c0a4 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    c096:	4b08      	ldr	r3, [pc, #32]	; (c0b8 <z_impl_k_sleep+0x30>)
    c098:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    c09a:	f7ff ff09 	bl	beb0 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    c09e:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    c0a2:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    c0a4:	f7ff ffac 	bl	c000 <z_tick_sleep>
    c0a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    c0ac:	fb80 0303 	smull	r0, r3, r0, r3
    c0b0:	0bc0      	lsrs	r0, r0, #15
    c0b2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    c0b6:	e7f4      	b.n	c0a2 <z_impl_k_sleep+0x1a>
    c0b8:	20001c98 	.word	0x20001c98

0000c0bc <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
    c0bc:	b538      	push	{r3, r4, r5, lr}
    c0be:	4c0a      	ldr	r4, [pc, #40]	; (c0e8 <z_impl_k_usleep+0x2c>)
    c0c0:	4a0a      	ldr	r2, [pc, #40]	; (c0ec <z_impl_k_usleep+0x30>)
    c0c2:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    c0c6:	2100      	movs	r1, #0
    c0c8:	fbc0 4105 	smlal	r4, r1, r0, r5
    c0cc:	2300      	movs	r3, #0
    c0ce:	4620      	mov	r0, r4
    c0d0:	f7f4 f806 	bl	e0 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
    c0d4:	17c1      	asrs	r1, r0, #31
    c0d6:	f7ff ff93 	bl	c000 <z_tick_sleep>
    c0da:	4b04      	ldr	r3, [pc, #16]	; (c0ec <z_impl_k_usleep+0x30>)
    c0dc:	fb80 0303 	smull	r0, r3, r0, r3
    c0e0:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
    c0e2:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    c0e6:	bd38      	pop	{r3, r4, r5, pc}
    c0e8:	000f423f 	.word	0x000f423f
    c0ec:	000f4240 	.word	0x000f4240

0000c0f0 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    c0f0:	4b01      	ldr	r3, [pc, #4]	; (c0f8 <z_impl_z_current_get+0x8>)
    c0f2:	6898      	ldr	r0, [r3, #8]
    c0f4:	4770      	bx	lr
    c0f6:	bf00      	nop
    c0f8:	20001c98 	.word	0x20001c98

0000c0fc <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    c0fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c100:	4604      	mov	r4, r0
    c102:	f04f 0340 	mov.w	r3, #64	; 0x40
    c106:	f3ef 8611 	mrs	r6, BASEPRI
    c10a:	f383 8812 	msr	BASEPRI_MAX, r3
    c10e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    c112:	7b03      	ldrb	r3, [r0, #12]
    c114:	07d9      	lsls	r1, r3, #31
    c116:	d50b      	bpl.n	c130 <z_thread_abort+0x34>
	__asm__ volatile(
    c118:	f386 8811 	msr	BASEPRI, r6
    c11c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    c120:	4040      	eors	r0, r0
    c122:	f380 8811 	msr	BASEPRI, r0
    c126:	f04f 0004 	mov.w	r0, #4
    c12a:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    c12c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    c130:	7b43      	ldrb	r3, [r0, #13]
    c132:	071a      	lsls	r2, r3, #28
    c134:	d504      	bpl.n	c140 <z_thread_abort+0x44>
    c136:	f386 8811 	msr	BASEPRI, r6
    c13a:	f3bf 8f6f 	isb	sy
    c13e:	e7f5      	b.n	c12c <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    c140:	f023 0220 	bic.w	r2, r3, #32
    c144:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    c148:	09d2      	lsrs	r2, r2, #7
    c14a:	d120      	bne.n	c18e <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    c14c:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    c14e:	68a3      	ldr	r3, [r4, #8]
    c150:	b113      	cbz	r3, c158 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    c152:	4620      	mov	r0, r4
    c154:	f002 f8c0 	bl	e2d8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    c158:	f104 0018 	add.w	r0, r4, #24
    c15c:	f002 f9ca 	bl	e4f4 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    c160:	f104 0758 	add.w	r7, r4, #88	; 0x58
    c164:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    c168:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c16a:	42bd      	cmp	r5, r7
    c16c:	d000      	beq.n	c170 <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    c16e:	b9b5      	cbnz	r5, c19e <z_thread_abort+0xa2>
		update_cache(1);
    c170:	2001      	movs	r0, #1
    c172:	f7ff fd1d 	bl	bbb0 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    c176:	4b10      	ldr	r3, [pc, #64]	; (c1b8 <z_thread_abort+0xbc>)
    c178:	689b      	ldr	r3, [r3, #8]
    c17a:	42a3      	cmp	r3, r4
    c17c:	d1db      	bne.n	c136 <z_thread_abort+0x3a>
    c17e:	f3ef 8305 	mrs	r3, IPSR
    c182:	2b00      	cmp	r3, #0
    c184:	d1d7      	bne.n	c136 <z_thread_abort+0x3a>
    c186:	4630      	mov	r0, r6
    c188:	f7f7 ffe0 	bl	414c <arch_swap>
	return ret;
    c18c:	e7d3      	b.n	c136 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    c18e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    c192:	f043 0308 	orr.w	r3, r3, #8
    c196:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    c198:	f002 f896 	bl	e2c8 <sys_dlist_remove>
}
    c19c:	e7d7      	b.n	c14e <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    c19e:	4628      	mov	r0, r5
    c1a0:	f002 f89a 	bl	e2d8 <unpend_thread_no_timeout>
    c1a4:	f105 0018 	add.w	r0, r5, #24
    c1a8:	f002 f9a4 	bl	e4f4 <z_abort_timeout>
    c1ac:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    c1b0:	4628      	mov	r0, r5
    c1b2:	f7ff fd55 	bl	bc60 <ready_thread>
    c1b6:	e7d7      	b.n	c168 <z_thread_abort+0x6c>
    c1b8:	20001c98 	.word	0x20001c98

0000c1bc <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    c1bc:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    c1be:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    c1c2:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    c1c4:	e9cd 6700 	strd	r6, r7, [sp]
    c1c8:	f7ff fdde 	bl	bd88 <z_pend_curr>

	if (data != NULL) {
    c1cc:	b11c      	cbz	r4, c1d6 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    c1ce:	4b03      	ldr	r3, [pc, #12]	; (c1dc <z_sched_wait+0x20>)
    c1d0:	689b      	ldr	r3, [r3, #8]
    c1d2:	695b      	ldr	r3, [r3, #20]
    c1d4:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    c1d6:	b002      	add	sp, #8
    c1d8:	bdd0      	pop	{r4, r6, r7, pc}
    c1da:	bf00      	nop
    c1dc:	20001c98 	.word	0x20001c98

0000c1e0 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    c1e0:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    c1e2:	4806      	ldr	r0, [pc, #24]	; (c1fc <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    c1e4:	4a06      	ldr	r2, [pc, #24]	; (c200 <z_data_copy+0x20>)
    c1e6:	4907      	ldr	r1, [pc, #28]	; (c204 <z_data_copy+0x24>)
    c1e8:	1a12      	subs	r2, r2, r0
    c1ea:	f001 ff11 	bl	e010 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    c1ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    c1f2:	4a05      	ldr	r2, [pc, #20]	; (c208 <z_data_copy+0x28>)
    c1f4:	4905      	ldr	r1, [pc, #20]	; (c20c <z_data_copy+0x2c>)
    c1f6:	4806      	ldr	r0, [pc, #24]	; (c210 <z_data_copy+0x30>)
    c1f8:	f001 bf0a 	b.w	e010 <z_early_memcpy>
    c1fc:	20000000 	.word	0x20000000
    c200:	20000484 	.word	0x20000484
    c204:	0001146c 	.word	0x0001146c
    c208:	00000000 	.word	0x00000000
    c20c:	0001146c 	.word	0x0001146c
    c210:	20000000 	.word	0x20000000

0000c214 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    c214:	4b03      	ldr	r3, [pc, #12]	; (c224 <elapsed+0x10>)
    c216:	681b      	ldr	r3, [r3, #0]
    c218:	b90b      	cbnz	r3, c21e <elapsed+0xa>
    c21a:	f7fa bf9f 	b.w	715c <sys_clock_elapsed>
}
    c21e:	2000      	movs	r0, #0
    c220:	4770      	bx	lr
    c222:	bf00      	nop
    c224:	20001cd0 	.word	0x20001cd0

0000c228 <next_timeout>:

static int32_t next_timeout(void)
{
    c228:	b510      	push	{r4, lr}
	return list->head == list;
    c22a:	4b0e      	ldr	r3, [pc, #56]	; (c264 <next_timeout+0x3c>)
    c22c:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c22e:	429c      	cmp	r4, r3
    c230:	d104      	bne.n	c23c <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    c232:	f7ff ffef 	bl	c214 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    c236:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    c23a:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    c23c:	f7ff ffea 	bl	c214 <elapsed>
	if ((to == NULL) ||
    c240:	2c00      	cmp	r4, #0
    c242:	d0f8      	beq.n	c236 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    c244:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    c248:	1a1b      	subs	r3, r3, r0
    c24a:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    c24e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    c252:	f172 0100 	sbcs.w	r1, r2, #0
    c256:	daee      	bge.n	c236 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    c258:	2a00      	cmp	r2, #0
    c25a:	bfac      	ite	ge
    c25c:	4618      	movge	r0, r3
    c25e:	2000      	movlt	r0, #0
	return ret;
    c260:	e7eb      	b.n	c23a <next_timeout+0x12>
    c262:	bf00      	nop
    c264:	20000150 	.word	0x20000150

0000c268 <remove_timeout>:
{
    c268:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    c26a:	b170      	cbz	r0, c28a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    c26c:	4b0b      	ldr	r3, [pc, #44]	; (c29c <remove_timeout+0x34>)
    c26e:	685b      	ldr	r3, [r3, #4]
    c270:	4298      	cmp	r0, r3
    c272:	d00a      	beq.n	c28a <remove_timeout+0x22>
    c274:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    c276:	b143      	cbz	r3, c28a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    c278:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    c27c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    c280:	1912      	adds	r2, r2, r4
    c282:	eb41 0105 	adc.w	r1, r1, r5
    c286:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    c28a:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    c28e:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    c290:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    c292:	2300      	movs	r3, #0
	node->prev = NULL;
    c294:	e9c0 3300 	strd	r3, r3, [r0]
}
    c298:	bd30      	pop	{r4, r5, pc}
    c29a:	bf00      	nop
    c29c:	20000150 	.word	0x20000150

0000c2a0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c2a0:	f1b3 3fff 	cmp.w	r3, #4294967295
    c2a4:	bf08      	it	eq
    c2a6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    c2aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c2ac:	4604      	mov	r4, r0
    c2ae:	461d      	mov	r5, r3
    c2b0:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    c2b2:	d05c      	beq.n	c36e <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    c2b4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    c2b6:	f04f 0340 	mov.w	r3, #64	; 0x40
    c2ba:	f3ef 8711 	mrs	r7, BASEPRI
    c2be:	f383 8812 	msr	BASEPRI_MAX, r3
    c2c2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    c2c6:	3201      	adds	r2, #1
    c2c8:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    c2cc:	da24      	bge.n	c318 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    c2ce:	492d      	ldr	r1, [pc, #180]	; (c384 <z_add_timeout+0xe4>)
    c2d0:	e9d1 2000 	ldrd	r2, r0, [r1]
    c2d4:	f06f 0301 	mvn.w	r3, #1
    c2d8:	1a9b      	subs	r3, r3, r2
    c2da:	f04f 32ff 	mov.w	r2, #4294967295
    c2de:	eb62 0000 	sbc.w	r0, r2, r0
    c2e2:	1b9e      	subs	r6, r3, r6
    c2e4:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    c2e8:	2e01      	cmp	r6, #1
    c2ea:	f170 0300 	sbcs.w	r3, r0, #0
    c2ee:	da01      	bge.n	c2f4 <z_add_timeout+0x54>
    c2f0:	2601      	movs	r6, #1
    c2f2:	2000      	movs	r0, #0
    c2f4:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    c2f8:	4e23      	ldr	r6, [pc, #140]	; (c388 <z_add_timeout+0xe8>)
    c2fa:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    c2fe:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c300:	45b4      	cmp	ip, r6
    c302:	bf08      	it	eq
    c304:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    c308:	f1bc 0f00 	cmp.w	ip, #0
    c30c:	d10d      	bne.n	c32a <z_add_timeout+0x8a>
	node->prev = tail;
    c30e:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    c312:	602c      	str	r4, [r5, #0]
	list->tail = node;
    c314:	6074      	str	r4, [r6, #4]
}
    c316:	e01c      	b.n	c352 <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    c318:	f7ff ff7c 	bl	c214 <elapsed>
    c31c:	3601      	adds	r6, #1
    c31e:	f145 0500 	adc.w	r5, r5, #0
    c322:	1836      	adds	r6, r6, r0
    c324:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    c328:	e7e4      	b.n	c2f4 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    c32a:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    c32e:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    c332:	4293      	cmp	r3, r2
    c334:	eb71 0e00 	sbcs.w	lr, r1, r0
    c338:	da1a      	bge.n	c370 <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    c33a:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    c33c:	f8dc 3004 	ldr.w	r3, [ip, #4]
    c340:	eb60 0001 	sbc.w	r0, r0, r1
    c344:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    c348:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    c34c:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    c34e:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    c352:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c354:	42b3      	cmp	r3, r6
    c356:	d006      	beq.n	c366 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    c358:	429c      	cmp	r4, r3
    c35a:	d104      	bne.n	c366 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    c35c:	f7ff ff64 	bl	c228 <next_timeout>
    c360:	2100      	movs	r1, #0
    c362:	f7fa fec9 	bl	70f8 <sys_clock_set_timeout>
	__asm__ volatile(
    c366:	f387 8811 	msr	BASEPRI, r7
    c36a:	f3bf 8f6f 	isb	sy
		}
	}
}
    c36e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    c370:	1a9b      	subs	r3, r3, r2
    c372:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    c376:	45ac      	cmp	ip, r5
    c378:	e9c4 3104 	strd	r3, r1, [r4, #16]
    c37c:	d0c7      	beq.n	c30e <z_add_timeout+0x6e>
    c37e:	f8dc c000 	ldr.w	ip, [ip]
    c382:	e7c1      	b.n	c308 <z_add_timeout+0x68>
    c384:	20000c28 	.word	0x20000c28
    c388:	20000150 	.word	0x20000150

0000c38c <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    c38c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    c390:	f04f 0340 	mov.w	r3, #64	; 0x40
    c394:	f3ef 8c11 	mrs	ip, BASEPRI
    c398:	f383 8812 	msr	BASEPRI_MAX, r3
    c39c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    c3a0:	f8df a0b0 	ldr.w	sl, [pc, #176]	; c454 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    c3a4:	f8df 90b0 	ldr.w	r9, [pc, #176]	; c458 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    c3a8:	4f2c      	ldr	r7, [pc, #176]	; (c45c <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
    c3aa:	f8c9 0000 	str.w	r0, [r9]
    c3ae:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    c3b2:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c3b4:	4550      	cmp	r0, sl
    c3b6:	bf08      	it	eq
    c3b8:	2000      	moveq	r0, #0
    c3ba:	2500      	movs	r5, #0
		curr_tick += dt;
    c3bc:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    c3c0:	f8d9 3000 	ldr.w	r3, [r9]
    c3c4:	46e0      	mov	r8, ip
    c3c6:	b380      	cbz	r0, c42a <sys_clock_announce+0x9e>
    c3c8:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    c3cc:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    c3d0:	42b3      	cmp	r3, r6
    c3d2:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    c3d6:	da05      	bge.n	c3e4 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    c3d8:	1af6      	subs	r6, r6, r3
    c3da:	eb6c 040e 	sbc.w	r4, ip, lr
    c3de:	e9c0 6404 	strd	r6, r4, [r0, #16]
    c3e2:	e022      	b.n	c42a <sys_clock_announce+0x9e>
		curr_tick += dt;
    c3e4:	18b2      	adds	r2, r6, r2
    c3e6:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    c3ea:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    c3ee:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    c3f2:	f7ff ff39 	bl	c268 <remove_timeout>
	__asm__ volatile(
    c3f6:	f388 8811 	msr	BASEPRI, r8
    c3fa:	f3bf 8f6f 	isb	sy
		t->fn(t);
    c3fe:	6883      	ldr	r3, [r0, #8]
    c400:	4798      	blx	r3
	__asm__ volatile(
    c402:	f04f 0340 	mov.w	r3, #64	; 0x40
    c406:	f3ef 8811 	mrs	r8, BASEPRI
    c40a:	f383 8812 	msr	BASEPRI_MAX, r3
    c40e:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    c412:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    c416:	f8da 0000 	ldr.w	r0, [sl]
    c41a:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c41c:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    c41e:	46c4      	mov	ip, r8
    c420:	f8c9 3000 	str.w	r3, [r9]
    c424:	d1ca      	bne.n	c3bc <sys_clock_announce+0x30>
		curr_tick += dt;
    c426:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
    c42a:	189a      	adds	r2, r3, r2
    c42c:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
    c430:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    c432:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    c436:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    c43a:	f7ff fef5 	bl	c228 <next_timeout>
    c43e:	4621      	mov	r1, r4
    c440:	f7fa fe5a 	bl	70f8 <sys_clock_set_timeout>
	__asm__ volatile(
    c444:	f388 8811 	msr	BASEPRI, r8
    c448:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    c44c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    c450:	f7ff bc6a 	b.w	bd28 <z_time_slice>
    c454:	20000150 	.word	0x20000150
    c458:	20001cd0 	.word	0x20001cd0
    c45c:	20000c28 	.word	0x20000c28

0000c460 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    c460:	b510      	push	{r4, lr}
	__asm__ volatile(
    c462:	f04f 0340 	mov.w	r3, #64	; 0x40
    c466:	f3ef 8411 	mrs	r4, BASEPRI
    c46a:	f383 8812 	msr	BASEPRI_MAX, r3
    c46e:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    c472:	f7ff fecf 	bl	c214 <elapsed>
    c476:	4a06      	ldr	r2, [pc, #24]	; (c490 <sys_clock_tick_get+0x30>)
    c478:	4603      	mov	r3, r0
    c47a:	e9d2 0100 	ldrd	r0, r1, [r2]
    c47e:	1818      	adds	r0, r3, r0
    c480:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    c484:	f384 8811 	msr	BASEPRI, r4
    c488:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    c48c:	bd10      	pop	{r4, pc}
    c48e:	bf00      	nop
    c490:	20000c28 	.word	0x20000c28

0000c494 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    c494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c496:	4604      	mov	r4, r0
	__asm__ volatile(
    c498:	f04f 0340 	mov.w	r3, #64	; 0x40
    c49c:	f3ef 8711 	mrs	r7, BASEPRI
    c4a0:	f383 8812 	msr	BASEPRI_MAX, r3
    c4a4:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    c4a8:	6802      	ldr	r2, [r0, #0]
    c4aa:	b122      	cbz	r2, c4b6 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
    c4ac:	f387 8811 	msr	BASEPRI, r7
    c4b0:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    c4b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    c4b6:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
    c4ba:	1c58      	adds	r0, r3, #1
    c4bc:	f146 0100 	adc.w	r1, r6, #0
    c4c0:	2802      	cmp	r0, #2
    c4c2:	f171 0100 	sbcs.w	r1, r1, #0
    c4c6:	d327      	bcc.n	c518 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
    c4c8:	2b01      	cmp	r3, #1
    c4ca:	f176 0100 	sbcs.w	r1, r6, #0
    c4ce:	bfbc      	itt	lt
    c4d0:	2301      	movlt	r3, #1
    c4d2:	4616      	movlt	r6, r2
    c4d4:	1e5d      	subs	r5, r3, #1
    c4d6:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
    c4da:	f002 f835 	bl	e548 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    c4de:	3001      	adds	r0, #1
    c4e0:	f141 0100 	adc.w	r1, r1, #0
    c4e4:	1940      	adds	r0, r0, r5
    c4e6:	eb46 0101 	adc.w	r1, r6, r1
    c4ea:	2801      	cmp	r0, #1
    c4ec:	f171 0100 	sbcs.w	r1, r1, #0
    c4f0:	db3a      	blt.n	c568 <z_timer_expiration_handler+0xd4>
    c4f2:	f002 f829 	bl	e548 <z_impl_k_uptime_ticks>
    c4f6:	3001      	adds	r0, #1
    c4f8:	f141 0100 	adc.w	r1, r1, #0
    c4fc:	f06f 0201 	mvn.w	r2, #1
    c500:	1940      	adds	r0, r0, r5
    c502:	eb46 0301 	adc.w	r3, r6, r1
    c506:	1a12      	subs	r2, r2, r0
    c508:	f04f 31ff 	mov.w	r1, #4294967295
    c50c:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    c510:	4918      	ldr	r1, [pc, #96]	; (c574 <z_timer_expiration_handler+0xe0>)
    c512:	4620      	mov	r0, r4
    c514:	f7ff fec4 	bl	c2a0 <z_add_timeout>
	timer->status += 1U;
    c518:	6b23      	ldr	r3, [r4, #48]	; 0x30
    c51a:	3301      	adds	r3, #1
    c51c:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
    c51e:	6a23      	ldr	r3, [r4, #32]
    c520:	b173      	cbz	r3, c540 <z_timer_expiration_handler+0xac>
    c522:	f387 8811 	msr	BASEPRI, r7
    c526:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
    c52a:	6a23      	ldr	r3, [r4, #32]
    c52c:	4620      	mov	r0, r4
    c52e:	4798      	blx	r3
	__asm__ volatile(
    c530:	f04f 0340 	mov.w	r3, #64	; 0x40
    c534:	f3ef 8711 	mrs	r7, BASEPRI
    c538:	f383 8812 	msr	BASEPRI_MAX, r3
    c53c:	f3bf 8f6f 	isb	sy
	return list->head == list;
    c540:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    c544:	42a5      	cmp	r5, r4
    c546:	d0b1      	beq.n	c4ac <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
    c548:	2d00      	cmp	r5, #0
    c54a:	d0af      	beq.n	c4ac <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
    c54c:	4628      	mov	r0, r5
    c54e:	f001 ff05 	bl	e35c <z_unpend_thread_no_timeout>
    c552:	2300      	movs	r3, #0
    c554:	67ab      	str	r3, [r5, #120]	; 0x78
	__asm__ volatile(
    c556:	f387 8811 	msr	BASEPRI, r7
    c55a:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    c55e:	4628      	mov	r0, r5
}
    c560:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    c564:	f001 beea 	b.w	e33c <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    c568:	f06f 0201 	mvn.w	r2, #1
    c56c:	f04f 33ff 	mov.w	r3, #4294967295
    c570:	e7ce      	b.n	c510 <z_timer_expiration_handler+0x7c>
    c572:	bf00      	nop
    c574:	0000c495 	.word	0x0000c495

0000c578 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    c578:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    c57c:	f1b3 3fff 	cmp.w	r3, #4294967295
    c580:	bf08      	it	eq
    c582:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    c586:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    c58a:	4605      	mov	r5, r0
    c58c:	461c      	mov	r4, r3
    c58e:	4691      	mov	r9, r2
    c590:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    c592:	d01c      	beq.n	c5ce <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
    c594:	1c53      	adds	r3, r2, #1
    c596:	f174 33ff 	sbcs.w	r3, r4, #4294967295
    c59a:	db09      	blt.n	c5b0 <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
    c59c:	2a01      	cmp	r2, #1
    c59e:	f174 0300 	sbcs.w	r3, r4, #0
    c5a2:	bfbc      	itt	lt
    c5a4:	2201      	movlt	r2, #1
    c5a6:	2400      	movlt	r4, #0
    c5a8:	f112 39ff 	adds.w	r9, r2, #4294967295
    c5ac:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    c5b0:	4628      	mov	r0, r5
    c5b2:	f001 ff9f 	bl	e4f4 <z_abort_timeout>
	timer->period = period;
    c5b6:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
    c5ba:	2300      	movs	r3, #0
    c5bc:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    c5be:	464a      	mov	r2, r9
    c5c0:	4643      	mov	r3, r8
    c5c2:	4628      	mov	r0, r5
    c5c4:	4903      	ldr	r1, [pc, #12]	; (c5d4 <z_impl_k_timer_start+0x5c>)
		     duration);
}
    c5c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    c5ca:	f7ff be69 	b.w	c2a0 <z_add_timeout>
}
    c5ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c5d2:	bf00      	nop
    c5d4:	0000c495 	.word	0x0000c495

0000c5d8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    c5d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    c5da:	4606      	mov	r6, r0
    c5dc:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    c5de:	f001 fd58 	bl	e092 <k_is_in_isr>
    c5e2:	b978      	cbnz	r0, c604 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    c5e4:	4b0b      	ldr	r3, [pc, #44]	; (c614 <z_thread_aligned_alloc+0x3c>)
    c5e6:	689b      	ldr	r3, [r3, #8]
    c5e8:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
    c5ea:	b17c      	cbz	r4, c60c <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    c5ec:	1d2a      	adds	r2, r5, #4
    c5ee:	d209      	bcs.n	c604 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    c5f0:	2000      	movs	r0, #0
    c5f2:	2100      	movs	r1, #0
    c5f4:	e9cd 0100 	strd	r0, r1, [sp]
    c5f8:	f046 0104 	orr.w	r1, r6, #4
    c5fc:	4620      	mov	r0, r4
    c5fe:	f002 f803 	bl	e608 <k_heap_aligned_alloc>
	if (mem == NULL) {
    c602:	b908      	cbnz	r0, c608 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    c604:	2400      	movs	r4, #0
	}

	return ret;
    c606:	e001      	b.n	c60c <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
    c608:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    c60a:	1d04      	adds	r4, r0, #4
}
    c60c:	4620      	mov	r0, r4
    c60e:	b002      	add	sp, #8
    c610:	bd70      	pop	{r4, r5, r6, pc}
    c612:	bf00      	nop
    c614:	20001c98 	.word	0x20001c98

0000c618 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    c618:	4801      	ldr	r0, [pc, #4]	; (c620 <boot_banner+0x8>)
    c61a:	f000 b8ae 	b.w	c77a <printk>
    c61e:	bf00      	nop
    c620:	0001143b 	.word	0x0001143b

0000c624 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    c624:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    c626:	4c06      	ldr	r4, [pc, #24]	; (c640 <statics_init+0x1c>)
    c628:	4d06      	ldr	r5, [pc, #24]	; (c644 <statics_init+0x20>)
    c62a:	42ac      	cmp	r4, r5
    c62c:	d301      	bcc.n	c632 <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    c62e:	2000      	movs	r0, #0
    c630:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    c632:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    c636:	4620      	mov	r0, r4
    c638:	f001 ffde 	bl	e5f8 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    c63c:	3414      	adds	r4, #20
    c63e:	e7f4      	b.n	c62a <statics_init+0x6>
    c640:	20000384 	.word	0x20000384
    c644:	20000384 	.word	0x20000384

0000c648 <gpio_pin_get>:
{
    c648:	b537      	push	{r0, r1, r2, r4, r5, lr}
    c64a:	460c      	mov	r4, r1
	const struct gpio_driver_data *const data =
    c64c:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
    c64e:	6883      	ldr	r3, [r0, #8]
    c650:	a901      	add	r1, sp, #4
    c652:	685b      	ldr	r3, [r3, #4]
    c654:	4798      	blx	r3
	if (ret == 0) {
    c656:	b948      	cbnz	r0, c66c <gpio_pin_get+0x24>
		*value ^= data->invert;
    c658:	9b01      	ldr	r3, [sp, #4]
    c65a:	682a      	ldr	r2, [r5, #0]
    c65c:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    c65e:	2301      	movs	r3, #1
    c660:	fa03 f104 	lsl.w	r1, r3, r4
    c664:	420a      	tst	r2, r1
    c666:	bf14      	ite	ne
    c668:	4618      	movne	r0, r3
    c66a:	2000      	moveq	r0, #0
}
    c66c:	b003      	add	sp, #12
    c66e:	bd30      	pop	{r4, r5, pc}

0000c670 <gpio_pin_get_dt>:
	return gpio_pin_get(spec->port, spec->pin);
    c670:	7901      	ldrb	r1, [r0, #4]
    c672:	6800      	ldr	r0, [r0, #0]
    c674:	f7ff bfe8 	b.w	c648 <gpio_pin_get>

0000c678 <button_callback>:
}
    c678:	4770      	bx	lr

0000c67a <k_sleep.constprop.0.isra.0>:
	return z_impl_k_sleep(timeout);
    c67a:	f7ff bd05 	b.w	c088 <z_impl_k_sleep>

0000c67e <update_mouse>:
void update_mouse(mouse_t* mouse) {
    c67e:	b510      	push	{r4, lr}
    c680:	4604      	mov	r4, r0
    mouse->wheel_data = fetch_wheel_data();
    c682:	f7f4 fd81 	bl	1188 <fetch_wheel_data>
    c686:	8020      	strh	r0, [r4, #0]
    mouse->motion_info = read_motion();
    c688:	f7f4 fa1c 	bl	ac4 <read_motion>
    c68c:	8060      	strh	r0, [r4, #2]
    c68e:	f3c0 400f 	ubfx	r0, r0, #16, #16
    c692:	80a0      	strh	r0, [r4, #4]
    fetch_buttons(&(mouse->button_states));
    c694:	1da0      	adds	r0, r4, #6
}
    c696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fetch_buttons(&(mouse->button_states));
    c69a:	f7f4 b92b 	b.w	8f4 <fetch_buttons>

0000c69e <z_log_msg_static_create.constprop.0>:
    c69e:	2300      	movs	r3, #0
    c6a0:	f7f6 b8ac 	b.w	27fc <z_impl_z_log_msg_static_create>

0000c6a4 <cbpprintf_external>:
{
    c6a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    c6a8:	4606      	mov	r6, r0
    c6aa:	460d      	mov	r5, r1
    c6ac:	4617      	mov	r7, r2
	if (buf == NULL) {
    c6ae:	4698      	mov	r8, r3
    c6b0:	b32b      	cbz	r3, c6fe <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
    c6b2:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
    c6b6:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    c6ba:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
    c6bc:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    c6be:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    c6c2:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    c6c6:	441c      	add	r4, r3
    c6c8:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
    c6ca:	f04f 0a00 	mov.w	sl, #0
    c6ce:	45ca      	cmp	sl, r9
    c6d0:	d309      	bcc.n	c6e6 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
    c6d2:	f8d8 2004 	ldr.w	r2, [r8, #4]
    c6d6:	f108 0308 	add.w	r3, r8, #8
    c6da:	4639      	mov	r1, r7
    c6dc:	4630      	mov	r0, r6
    c6de:	46ac      	mov	ip, r5
}
    c6e0:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    c6e4:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    c6e6:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    c6ea:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
    c6ee:	4620      	mov	r0, r4
    c6f0:	f000 ff32 	bl	d558 <strlen>
    c6f4:	3001      	adds	r0, #1
    c6f6:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    c6f8:	f10a 0a01 	add.w	sl, sl, #1
    c6fc:	e7e7      	b.n	c6ce <cbpprintf_external+0x2a>
}
    c6fe:	f06f 0015 	mvn.w	r0, #21
    c702:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000c706 <is_ptr>:
{
    c706:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
    c708:	2500      	movs	r5, #0
{
    c70a:	4602      	mov	r2, r0
	bool mod = false;
    c70c:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
    c70e:	4614      	mov	r4, r2
    c710:	f814 3b01 	ldrb.w	r3, [r4], #1
    c714:	b90b      	cbnz	r3, c71a <is_ptr+0x14>
					return false;
    c716:	4618      	mov	r0, r3
    c718:	e009      	b.n	c72e <is_ptr+0x28>
		if (mod) {
    c71a:	b198      	cbz	r0, c744 <is_ptr+0x3e>
			if (cnt == n) {
    c71c:	428d      	cmp	r5, r1
    c71e:	d107      	bne.n	c730 <is_ptr+0x2a>
				if (c == 'p') {
    c720:	2b70      	cmp	r3, #112	; 0x70
    c722:	d004      	beq.n	c72e <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
    c724:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
    c728:	2a3a      	cmp	r2, #58	; 0x3a
    c72a:	d80b      	bhi.n	c744 <is_ptr+0x3e>
					return false;
    c72c:	2000      	movs	r0, #0
}
    c72e:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
    c730:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
    c734:	2e3a      	cmp	r6, #58	; 0x3a
    c736:	d805      	bhi.n	c744 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
    c738:	7853      	ldrb	r3, [r2, #1]
				cnt++;
    c73a:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
    c73c:	1c94      	adds	r4, r2, #2
    c73e:	2b00      	cmp	r3, #0
    c740:	d0e9      	beq.n	c716 <is_ptr+0x10>
    c742:	2000      	movs	r0, #0
		if (c == '%') {
    c744:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
    c746:	bf08      	it	eq
    c748:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
    c74c:	4622      	mov	r2, r4
    c74e:	e7de      	b.n	c70e <is_ptr+0x8>

0000c750 <arch_printk_char_out>:
}
    c750:	2000      	movs	r0, #0
    c752:	4770      	bx	lr

0000c754 <str_out>:
{
    c754:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    c756:	688a      	ldr	r2, [r1, #8]
    c758:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    c75a:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    c75c:	b114      	cbz	r4, c764 <str_out+0x10>
    c75e:	684b      	ldr	r3, [r1, #4]
    c760:	4293      	cmp	r3, r2
    c762:	dc01      	bgt.n	c768 <str_out+0x14>
		ctx->count++;
    c764:	608d      	str	r5, [r1, #8]
}
    c766:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    c768:	3b01      	subs	r3, #1
    c76a:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    c76c:	bf08      	it	eq
    c76e:	2200      	moveq	r2, #0
    c770:	608d      	str	r5, [r1, #8]
    c772:	bf0c      	ite	eq
    c774:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    c776:	54a0      	strbne	r0, [r4, r2]
    c778:	e7f5      	b.n	c766 <str_out+0x12>

0000c77a <printk>:
{
    c77a:	b40f      	push	{r0, r1, r2, r3}
    c77c:	b507      	push	{r0, r1, r2, lr}
    c77e:	a904      	add	r1, sp, #16
    c780:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    c784:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    c786:	f000 fde9 	bl	d35c <z_log_vprintk>
}
    c78a:	b003      	add	sp, #12
    c78c:	f85d eb04 	ldr.w	lr, [sp], #4
    c790:	b004      	add	sp, #16
    c792:	4770      	bx	lr

0000c794 <snprintk>:
{
    c794:	b40c      	push	{r2, r3}
    c796:	b507      	push	{r0, r1, r2, lr}
    c798:	ab04      	add	r3, sp, #16
    c79a:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    c79e:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    c7a0:	f7f5 f8be 	bl	1920 <vsnprintk>
}
    c7a4:	b003      	add	sp, #12
    c7a6:	f85d eb04 	ldr.w	lr, [sp], #4
    c7aa:	b002      	add	sp, #8
    c7ac:	4770      	bx	lr

0000c7ae <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    c7ae:	4604      	mov	r4, r0
    c7b0:	b508      	push	{r3, lr}
    c7b2:	4608      	mov	r0, r1
    c7b4:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    c7b6:	461a      	mov	r2, r3
    c7b8:	47a0      	blx	r4
	return z_impl_z_current_get();
    c7ba:	f7ff fc99 	bl	c0f0 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    c7be:	f7f8 f8e3 	bl	4988 <z_impl_k_thread_abort>

0000c7c2 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    c7c2:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    c7c6:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    c7c8:	0840      	lsrs	r0, r0, #1
    c7ca:	4770      	bx	lr

0000c7cc <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    c7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c7ce:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    c7d0:	f7ff fff7 	bl	c7c2 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    c7d4:	fab0 f080 	clz	r0, r0
    c7d8:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    c7dc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    c7e0:	00ca      	lsls	r2, r1, #3
    c7e2:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    c7e6:	1d17      	adds	r7, r2, #4
{
    c7e8:	460c      	mov	r4, r1
    c7ea:	3206      	adds	r2, #6
    c7ec:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    c7ee:	b956      	cbnz	r6, c806 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    c7f0:	2101      	movs	r1, #1
    c7f2:	fa01 f000 	lsl.w	r0, r1, r0
    c7f6:	68d9      	ldr	r1, [r3, #12]
    c7f8:	4301      	orrs	r1, r0
    c7fa:	60d9      	str	r1, [r3, #12]
		b->next = c;
    c7fc:	f8cc 4010 	str.w	r4, [ip, #16]
    c800:	53dd      	strh	r5, [r3, r7]
    c802:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    c804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    c806:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    c808:	3104      	adds	r1, #4
    c80a:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    c80c:	53d8      	strh	r0, [r3, r7]
    c80e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    c812:	529e      	strh	r6, [r3, r2]
    c814:	80c5      	strh	r5, [r0, #6]
    c816:	525d      	strh	r5, [r3, r1]
    c818:	e7f4      	b.n	c804 <free_list_add+0x38>

0000c81a <free_list_remove_bidx>:
{
    c81a:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    c81c:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    c820:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    c822:	4299      	cmp	r1, r3
    c824:	f102 0104 	add.w	r1, r2, #4
    c828:	d10a      	bne.n	c840 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    c82a:	2301      	movs	r3, #1
    c82c:	fa03 f202 	lsl.w	r2, r3, r2
    c830:	68c3      	ldr	r3, [r0, #12]
    c832:	ea23 0302 	bic.w	r3, r3, r2
    c836:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    c838:	2300      	movs	r3, #0
    c83a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    c83e:	bd10      	pop	{r4, pc}
    c840:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    c842:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    c846:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    c84a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    c84e:	80cb      	strh	r3, [r1, #6]
    c850:	8082      	strh	r2, [r0, #4]
}
    c852:	e7f4      	b.n	c83e <free_list_remove_bidx+0x24>

0000c854 <free_list_remove>:
{
    c854:	b508      	push	{r3, lr}
    c856:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    c858:	f7ff ffb3 	bl	c7c2 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    c85c:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    c860:	f1c2 021f 	rsb	r2, r2, #31
    c864:	4618      	mov	r0, r3
}
    c866:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    c86a:	f7ff bfd6 	b.w	c81a <free_list_remove_bidx>

0000c86e <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    c86e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c872:	fab1 f581 	clz	r5, r1
    c876:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    c87a:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
    c87e:	4603      	mov	r3, r0
	if (b->next) {
    c880:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
    c884:	460e      	mov	r6, r1
	if (b->next) {
    c886:	b1c2      	cbz	r2, c8ba <alloc_chunk+0x4c>
    c888:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    c88a:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
    c88e:	4618      	mov	r0, r3
    c890:	4621      	mov	r1, r4
    c892:	f7ff ff96 	bl	c7c2 <chunk_size>
    c896:	42b0      	cmp	r0, r6
    c898:	d306      	bcc.n	c8a8 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    c89a:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    c89c:	4618      	mov	r0, r3
    c89e:	f7ff ffbc 	bl	c81a <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    c8a2:	4620      	mov	r0, r4
    c8a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    c8a8:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
    c8ac:	3f01      	subs	r7, #1
    c8ae:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
    c8b0:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
    c8b4:	d001      	beq.n	c8ba <alloc_chunk+0x4c>
    c8b6:	4282      	cmp	r2, r0
    c8b8:	d1e7      	bne.n	c88a <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    c8ba:	f1c5 0220 	rsb	r2, r5, #32
    c8be:	f04f 34ff 	mov.w	r4, #4294967295
    c8c2:	4094      	lsls	r4, r2
    c8c4:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    c8c6:	4014      	ands	r4, r2
    c8c8:	d0eb      	beq.n	c8a2 <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    c8ca:	fa94 f2a4 	rbit	r2, r4
    c8ce:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    c8d2:	1d11      	adds	r1, r2, #4
    c8d4:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    c8d8:	4621      	mov	r1, r4
    c8da:	e7df      	b.n	c89c <alloc_chunk+0x2e>

0000c8dc <merge_chunks>:
{
    c8dc:	b538      	push	{r3, r4, r5, lr}
    c8de:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    c8e0:	f7ff ff6f 	bl	c7c2 <chunk_size>
{
    c8e4:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    c8e6:	4604      	mov	r4, r0
    c8e8:	4611      	mov	r1, r2
    c8ea:	4618      	mov	r0, r3
    c8ec:	f7ff ff69 	bl	c7c2 <chunk_size>
		((uint16_t *)cmem)[f] = val;
    c8f0:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    c8f4:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c8f6:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    c8f8:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    c8fa:	4618      	mov	r0, r3
    c8fc:	f7ff ff61 	bl	c7c2 <chunk_size>
	void *cmem = &buf[c];
    c900:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    c902:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    c906:	bd38      	pop	{r3, r4, r5, pc}

0000c908 <split_chunks>:
{
    c908:	b538      	push	{r3, r4, r5, lr}
    c90a:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    c90c:	f7ff ff59 	bl	c7c2 <chunk_size>
{
    c910:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    c912:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    c914:	1a51      	subs	r1, r2, r1
    c916:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    c91a:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c91c:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    c91e:	8060      	strh	r0, [r4, #2]
    c920:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c924:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    c926:	8044      	strh	r4, [r0, #2]
    c928:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    c92c:	4618      	mov	r0, r3
    c92e:	4611      	mov	r1, r2
    c930:	f7ff ff47 	bl	c7c2 <chunk_size>
	void *cmem = &buf[c];
    c934:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    c936:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    c93a:	bd38      	pop	{r3, r4, r5, pc}

0000c93c <free_chunk>:
{
    c93c:	b538      	push	{r3, r4, r5, lr}
    c93e:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    c940:	f7ff ff3f 	bl	c7c2 <chunk_size>
    c944:	460c      	mov	r4, r1
    c946:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    c948:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    c94c:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    c94e:	07da      	lsls	r2, r3, #31
    c950:	d40a      	bmi.n	c968 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    c952:	4628      	mov	r0, r5
    c954:	f7ff ff7e 	bl	c854 <free_list_remove>
	return c + chunk_size(h, c);
    c958:	4621      	mov	r1, r4
    c95a:	4628      	mov	r0, r5
    c95c:	f7ff ff31 	bl	c7c2 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    c960:	1822      	adds	r2, r4, r0
    c962:	4628      	mov	r0, r5
    c964:	f7ff ffba 	bl	c8dc <merge_chunks>
		return ((uint16_t *)cmem)[f];
    c968:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    c96c:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    c96e:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    c972:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    c974:	07db      	lsls	r3, r3, #31
    c976:	d40c      	bmi.n	c992 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    c978:	4628      	mov	r0, r5
    c97a:	f7ff ff6b 	bl	c854 <free_list_remove>
		return ((uint16_t *)cmem)[f];
    c97e:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    c982:	4622      	mov	r2, r4
    c984:	1a61      	subs	r1, r4, r1
    c986:	4628      	mov	r0, r5
    c988:	f7ff ffa8 	bl	c8dc <merge_chunks>
    c98c:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    c990:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    c992:	4621      	mov	r1, r4
    c994:	4628      	mov	r0, r5
}
    c996:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    c99a:	f7ff bf17 	b.w	c7cc <free_list_add>

0000c99e <sys_heap_free>:
	if (mem == NULL) {
    c99e:	b161      	cbz	r1, c9ba <sys_heap_free+0x1c>
    c9a0:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c9a2:	3904      	subs	r1, #4
    c9a4:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    c9a6:	f021 0307 	bic.w	r3, r1, #7
    c9aa:	4403      	add	r3, r0
	free_chunk(h, c);
    c9ac:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    c9ae:	885a      	ldrh	r2, [r3, #2]
    c9b0:	f022 0201 	bic.w	r2, r2, #1
    c9b4:	805a      	strh	r2, [r3, #2]
    c9b6:	f7ff bfc1 	b.w	c93c <free_chunk>
}
    c9ba:	4770      	bx	lr

0000c9bc <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    c9bc:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    c9be:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    c9c0:	b909      	cbnz	r1, c9c6 <sys_heap_alloc+0xa>
		return NULL;
    c9c2:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    c9c4:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    c9c6:	68ab      	ldr	r3, [r5, #8]
    c9c8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    c9cc:	d9f9      	bls.n	c9c2 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c9ce:	310b      	adds	r1, #11
    c9d0:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    c9d2:	4621      	mov	r1, r4
    c9d4:	4628      	mov	r0, r5
    c9d6:	f7ff ff4a 	bl	c86e <alloc_chunk>
	if (c == 0U) {
    c9da:	4606      	mov	r6, r0
    c9dc:	2800      	cmp	r0, #0
    c9de:	d0f0      	beq.n	c9c2 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    c9e0:	4601      	mov	r1, r0
    c9e2:	4628      	mov	r0, r5
    c9e4:	f7ff feed 	bl	c7c2 <chunk_size>
    c9e8:	42a0      	cmp	r0, r4
    c9ea:	d907      	bls.n	c9fc <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    c9ec:	1932      	adds	r2, r6, r4
    c9ee:	4628      	mov	r0, r5
    c9f0:	f7ff ff8a 	bl	c908 <split_chunks>
		free_list_add(h, c + chunk_sz);
    c9f4:	4611      	mov	r1, r2
    c9f6:	4628      	mov	r0, r5
    c9f8:	f7ff fee8 	bl	c7cc <free_list_add>
	void *cmem = &buf[c];
    c9fc:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    ca00:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    ca02:	8853      	ldrh	r3, [r2, #2]
    ca04:	f043 0301 	orr.w	r3, r3, #1
    ca08:	8053      	strh	r3, [r2, #2]
    ca0a:	3004      	adds	r0, #4
	return mem;
    ca0c:	e7da      	b.n	c9c4 <sys_heap_alloc+0x8>

0000ca0e <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    ca0e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ca12:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    ca16:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
    ca1a:	6806      	ldr	r6, [r0, #0]
{
    ca1c:	460f      	mov	r7, r1
    ca1e:	4614      	mov	r4, r2
	if (align != rew) {
    ca20:	d00c      	beq.n	ca3c <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
    ca22:	424b      	negs	r3, r1
    ca24:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    ca26:	2b04      	cmp	r3, #4
    ca28:	461a      	mov	r2, r3
    ca2a:	464f      	mov	r7, r9
    ca2c:	bf28      	it	cs
    ca2e:	2204      	movcs	r2, #4
	rew = align & -align;
    ca30:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    ca32:	b964      	cbnz	r4, ca4e <sys_heap_aligned_alloc+0x40>
		return NULL;
    ca34:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    ca36:	4628      	mov	r0, r5
    ca38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    ca3c:	2904      	cmp	r1, #4
    ca3e:	d804      	bhi.n	ca4a <sys_heap_aligned_alloc+0x3c>
}
    ca40:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    ca44:	4611      	mov	r1, r2
    ca46:	f7ff bfb9 	b.w	c9bc <sys_heap_alloc>
		gap = chunk_header_bytes(h);
    ca4a:	2204      	movs	r2, #4
    ca4c:	e7f1      	b.n	ca32 <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
    ca4e:	68b3      	ldr	r3, [r6, #8]
    ca50:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    ca54:	d9ee      	bls.n	ca34 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    ca56:	f104 010b 	add.w	r1, r4, #11
    ca5a:	4439      	add	r1, r7
    ca5c:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    ca5e:	08c9      	lsrs	r1, r1, #3
    ca60:	4630      	mov	r0, r6
    ca62:	f7ff ff04 	bl	c86e <alloc_chunk>
	if (c0 == 0) {
    ca66:	4680      	mov	r8, r0
    ca68:	2800      	cmp	r0, #0
    ca6a:	d0e3      	beq.n	ca34 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    ca6c:	f109 0504 	add.w	r5, r9, #4
    ca70:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    ca74:	1e7b      	subs	r3, r7, #1
    ca76:	4435      	add	r5, r6
    ca78:	441d      	add	r5, r3
    ca7a:	427f      	negs	r7, r7
    ca7c:	403d      	ands	r5, r7
    ca7e:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ca82:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ca84:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ca86:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ca88:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    ca8a:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    ca8e:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    ca90:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    ca94:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    ca98:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    ca9c:	d208      	bcs.n	cab0 <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
    ca9e:	4601      	mov	r1, r0
    caa0:	463a      	mov	r2, r7
    caa2:	4630      	mov	r0, r6
    caa4:	f7ff ff30 	bl	c908 <split_chunks>
		free_list_add(h, c0);
    caa8:	4641      	mov	r1, r8
    caaa:	4630      	mov	r0, r6
    caac:	f7ff fe8e 	bl	c7cc <free_list_add>
	return c + chunk_size(h, c);
    cab0:	4639      	mov	r1, r7
    cab2:	4630      	mov	r0, r6
    cab4:	f7ff fe85 	bl	c7c2 <chunk_size>
    cab8:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    caba:	4284      	cmp	r4, r0
    cabc:	d207      	bcs.n	cace <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
    cabe:	4630      	mov	r0, r6
    cac0:	4622      	mov	r2, r4
    cac2:	f7ff ff21 	bl	c908 <split_chunks>
		free_list_add(h, c_end);
    cac6:	4621      	mov	r1, r4
    cac8:	4630      	mov	r0, r6
    caca:	f7ff fe7f 	bl	c7cc <free_list_add>
	void *cmem = &buf[c];
    cace:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cad2:	8873      	ldrh	r3, [r6, #2]
    cad4:	f043 0301 	orr.w	r3, r3, #1
    cad8:	8073      	strh	r3, [r6, #2]
    cada:	e7ac      	b.n	ca36 <sys_heap_aligned_alloc+0x28>

0000cadc <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    cadc:	3a04      	subs	r2, #4
{
    cade:	b4f0      	push	{r4, r5, r6, r7}
    cae0:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    cae2:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    cae4:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    cae6:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    caea:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    caee:	1a0e      	subs	r6, r1, r0
    caf0:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    caf2:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
    caf4:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    caf8:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    cafa:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
    cafe:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
    cb00:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    cb02:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
    cb04:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    cb08:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    cb0a:	f1c2 0220 	rsb	r2, r2, #32
    cb0e:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    cb10:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
    cb14:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    cb18:	4294      	cmp	r4, r2
    cb1a:	d1fb      	bne.n	cb14 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    cb1c:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cb1e:	f042 0201 	orr.w	r2, r2, #1
    cb22:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
    cb24:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    cb28:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    cb2a:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
    cb2c:	8007      	strh	r7, [r0, #0]
    cb2e:	8065      	strh	r5, [r4, #2]
    cb30:	1984      	adds	r4, r0, r6
    cb32:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    cb36:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    cb3a:	8067      	strh	r7, [r4, #2]
    cb3c:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    cb3e:	885a      	ldrh	r2, [r3, #2]
    cb40:	f042 0201 	orr.w	r2, r2, #1
    cb44:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    cb46:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    cb48:	f7ff be40 	b.w	c7cc <free_list_add>

0000cb4c <sys_slist_find_and_remove>:
	return list->head;
    cb4c:	6803      	ldr	r3, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    cb4e:	2200      	movs	r2, #0
    cb50:	b90b      	cbnz	r3, cb56 <sys_slist_find_and_remove+0xa>
    cb52:	4618      	mov	r0, r3
    cb54:	4770      	bx	lr
    cb56:	428b      	cmp	r3, r1
    cb58:	d110      	bne.n	cb7c <sys_slist_find_and_remove+0x30>
	return node->next;
    cb5a:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    cb5c:	b942      	cbnz	r2, cb70 <sys_slist_find_and_remove+0x24>
    cb5e:	6842      	ldr	r2, [r0, #4]
	list->head = node;
    cb60:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    cb62:	4291      	cmp	r1, r2
    cb64:	d100      	bne.n	cb68 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    cb66:	6043      	str	r3, [r0, #4]
	parent->next = child;
    cb68:	2300      	movs	r3, #0
    cb6a:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    cb6c:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
    cb6e:	4770      	bx	lr
	parent->next = child;
    cb70:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    cb72:	6843      	ldr	r3, [r0, #4]
    cb74:	4299      	cmp	r1, r3
	list->tail = node;
    cb76:	bf08      	it	eq
    cb78:	6042      	streq	r2, [r0, #4]
}
    cb7a:	e7f5      	b.n	cb68 <sys_slist_find_and_remove+0x1c>
	return node->next;
    cb7c:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    cb7e:	681b      	ldr	r3, [r3, #0]
    cb80:	e7e6      	b.n	cb50 <sys_slist_find_and_remove+0x4>

0000cb82 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cb82:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    cb84:	f013 0307 	ands.w	r3, r3, #7
    cb88:	d105      	bne.n	cb96 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    cb8a:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    cb8c:	2b00      	cmp	r3, #0
    cb8e:	bf0c      	ite	eq
    cb90:	2000      	moveq	r0, #0
    cb92:	2003      	movne	r0, #3
    cb94:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    cb96:	2b02      	cmp	r3, #2
    cb98:	d105      	bne.n	cba6 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    cb9a:	8b40      	ldrh	r0, [r0, #26]
    cb9c:	fab0 f080 	clz	r0, r0
    cba0:	0940      	lsrs	r0, r0, #5
    cba2:	0080      	lsls	r0, r0, #2
    cba4:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    cba6:	2b01      	cmp	r3, #1
    cba8:	d105      	bne.n	cbb6 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    cbaa:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    cbac:	2b00      	cmp	r3, #0
    cbae:	bf0c      	ite	eq
    cbb0:	2000      	moveq	r0, #0
    cbb2:	2005      	movne	r0, #5
    cbb4:	4770      	bx	lr
	int evt = EVT_NOP;
    cbb6:	2000      	movs	r0, #0
}
    cbb8:	4770      	bx	lr

0000cbba <validate_args>:
{
    cbba:	b510      	push	{r4, lr}
    cbbc:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    cbbe:	b100      	cbz	r0, cbc2 <validate_args+0x8>
    cbc0:	b911      	cbnz	r1, cbc8 <validate_args+0xe>
		return -EINVAL;
    cbc2:	f06f 0015 	mvn.w	r0, #21
}
    cbc6:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    cbc8:	1d08      	adds	r0, r1, #4
    cbca:	f000 f8d6 	bl	cd7a <sys_notify_validate>
	if ((rv == 0)
    cbce:	2800      	cmp	r0, #0
    cbd0:	d1f9      	bne.n	cbc6 <validate_args+0xc>
	    && ((cli->notify.flags
    cbd2:	68a3      	ldr	r3, [r4, #8]
    cbd4:	2b03      	cmp	r3, #3
    cbd6:	d9f6      	bls.n	cbc6 <validate_args+0xc>
    cbd8:	e7f3      	b.n	cbc2 <validate_args+0x8>

0000cbda <notify_one>:
{
    cbda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cbde:	460d      	mov	r5, r1
    cbe0:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    cbe2:	4619      	mov	r1, r3
    cbe4:	1d28      	adds	r0, r5, #4
{
    cbe6:	4690      	mov	r8, r2
    cbe8:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    cbea:	f000 f8d7 	bl	cd9c <sys_notify_finalize>
	if (cb) {
    cbee:	4604      	mov	r4, r0
    cbf0:	b138      	cbz	r0, cc02 <notify_one+0x28>
		cb(mgr, cli, state, res);
    cbf2:	4633      	mov	r3, r6
    cbf4:	4642      	mov	r2, r8
    cbf6:	4629      	mov	r1, r5
    cbf8:	4638      	mov	r0, r7
    cbfa:	46a4      	mov	ip, r4
}
    cbfc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    cc00:	4760      	bx	ip
}
    cc02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000cc06 <transition_complete>:
{
    cc06:	b410      	push	{r4}
	__asm__ volatile(
    cc08:	f04f 0440 	mov.w	r4, #64	; 0x40
    cc0c:	f3ef 8211 	mrs	r2, BASEPRI
    cc10:	f384 8812 	msr	BASEPRI_MAX, r4
    cc14:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    cc18:	6141      	str	r1, [r0, #20]
}
    cc1a:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    cc1c:	2101      	movs	r1, #1
    cc1e:	f7f4 be95 	b.w	194c <process_event>

0000cc22 <onoff_manager_init>:
{
    cc22:	b538      	push	{r3, r4, r5, lr}
    cc24:	460c      	mov	r4, r1
	if ((mgr == NULL)
    cc26:	4605      	mov	r5, r0
    cc28:	b158      	cbz	r0, cc42 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    cc2a:	b151      	cbz	r1, cc42 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    cc2c:	680b      	ldr	r3, [r1, #0]
    cc2e:	b143      	cbz	r3, cc42 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    cc30:	684b      	ldr	r3, [r1, #4]
    cc32:	b133      	cbz	r3, cc42 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    cc34:	221c      	movs	r2, #28
    cc36:	2100      	movs	r1, #0
    cc38:	f000 fcb5 	bl	d5a6 <memset>
    cc3c:	612c      	str	r4, [r5, #16]
	return 0;
    cc3e:	2000      	movs	r0, #0
}
    cc40:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    cc42:	f06f 0015 	mvn.w	r0, #21
    cc46:	e7fb      	b.n	cc40 <onoff_manager_init+0x1e>

0000cc48 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    cc48:	b570      	push	{r4, r5, r6, lr}
    cc4a:	4605      	mov	r5, r0
    cc4c:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    cc4e:	f7ff ffb4 	bl	cbba <validate_args>

	if (rv < 0) {
    cc52:	1e04      	subs	r4, r0, #0
    cc54:	db15      	blt.n	cc82 <onoff_request+0x3a>
    cc56:	f04f 0340 	mov.w	r3, #64	; 0x40
    cc5a:	f3ef 8211 	mrs	r2, BASEPRI
    cc5e:	f383 8812 	msr	BASEPRI_MAX, r3
    cc62:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    cc66:	8b6b      	ldrh	r3, [r5, #26]
    cc68:	8b2c      	ldrh	r4, [r5, #24]
    cc6a:	f64f 71ff 	movw	r1, #65535	; 0xffff
    cc6e:	428b      	cmp	r3, r1
    cc70:	f004 0407 	and.w	r4, r4, #7
    cc74:	d107      	bne.n	cc86 <onoff_request+0x3e>
	__asm__ volatile(
    cc76:	f382 8811 	msr	BASEPRI, r2
    cc7a:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    cc7e:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    cc82:	4620      	mov	r0, r4
    cc84:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    cc86:	2c02      	cmp	r4, #2
    cc88:	d10c      	bne.n	cca4 <onoff_request+0x5c>
		mgr->refs += 1U;
    cc8a:	3301      	adds	r3, #1
    cc8c:	836b      	strh	r3, [r5, #26]
    cc8e:	f382 8811 	msr	BASEPRI, r2
    cc92:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    cc96:	2300      	movs	r3, #0
    cc98:	4622      	mov	r2, r4
    cc9a:	4631      	mov	r1, r6
    cc9c:	4628      	mov	r0, r5
    cc9e:	f7ff ff9c 	bl	cbda <notify_one>
    cca2:	e7ee      	b.n	cc82 <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    cca4:	2c06      	cmp	r4, #6
    cca6:	d814      	bhi.n	ccd2 <onoff_request+0x8a>
    cca8:	e8df f004 	tbb	[pc, r4]
    ccac:	13131304 	.word	0x13131304
    ccb0:	1a04      	.short	0x1a04
    ccb2:	04          	.byte	0x04
    ccb3:	00          	.byte	0x00
	parent->next = child;
    ccb4:	2300      	movs	r3, #0
    ccb6:	6033      	str	r3, [r6, #0]
	return list->tail;
    ccb8:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    ccba:	b93b      	cbnz	r3, cccc <onoff_request+0x84>
	list->head = node;
    ccbc:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    ccc0:	b9ac      	cbnz	r4, ccee <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    ccc2:	2102      	movs	r1, #2
    ccc4:	4628      	mov	r0, r5
    ccc6:	f7f4 fe41 	bl	194c <process_event>
    ccca:	e7da      	b.n	cc82 <onoff_request+0x3a>
	parent->next = child;
    cccc:	601e      	str	r6, [r3, #0]
	list->tail = node;
    ccce:	606e      	str	r6, [r5, #4]
}
    ccd0:	e7f6      	b.n	ccc0 <onoff_request+0x78>
    ccd2:	f382 8811 	msr	BASEPRI, r2
    ccd6:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    ccda:	f06f 0404 	mvn.w	r4, #4
    ccde:	e7d0      	b.n	cc82 <onoff_request+0x3a>
    cce0:	f382 8811 	msr	BASEPRI, r2
    cce4:	f3bf 8f6f 	isb	sy
    cce8:	f06f 0485 	mvn.w	r4, #133	; 0x85
    ccec:	e7c9      	b.n	cc82 <onoff_request+0x3a>
    ccee:	f382 8811 	msr	BASEPRI, r2
    ccf2:	f3bf 8f6f 	isb	sy
		if (notify) {
    ccf6:	e7c4      	b.n	cc82 <onoff_request+0x3a>

0000ccf8 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    ccf8:	b510      	push	{r4, lr}
	__asm__ volatile(
    ccfa:	f04f 0340 	mov.w	r3, #64	; 0x40
    ccfe:	f3ef 8211 	mrs	r2, BASEPRI
    cd02:	f383 8812 	msr	BASEPRI_MAX, r3
    cd06:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cd0a:	8b04      	ldrh	r4, [r0, #24]
    cd0c:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    cd10:	2c02      	cmp	r4, #2
    cd12:	d00a      	beq.n	cd2a <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    cd14:	2c01      	cmp	r4, #1
    cd16:	bf0c      	ite	eq
    cd18:	f06f 0004 	mvneq.w	r0, #4
    cd1c:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    cd20:	f382 8811 	msr	BASEPRI, r2
    cd24:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    cd28:	e008      	b.n	cd3c <onoff_release+0x44>
	mgr->refs -= 1U;
    cd2a:	8b43      	ldrh	r3, [r0, #26]
    cd2c:	3b01      	subs	r3, #1
    cd2e:	b29b      	uxth	r3, r3
    cd30:	8343      	strh	r3, [r0, #26]
	if (stop) {
    cd32:	b923      	cbnz	r3, cd3e <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    cd34:	4621      	mov	r1, r4
    cd36:	f7f4 fe09 	bl	194c <process_event>
	int rv = state;
    cd3a:	4620      	mov	r0, r4
}
    cd3c:	bd10      	pop	{r4, pc}
	int rv = state;
    cd3e:	4620      	mov	r0, r4
    cd40:	e7ee      	b.n	cd20 <onoff_release+0x28>

0000cd42 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    cd42:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    cd44:	b1b0      	cbz	r0, cd74 <onoff_cancel+0x32>
    cd46:	b1a9      	cbz	r1, cd74 <onoff_cancel+0x32>
	__asm__ volatile(
    cd48:	f04f 0240 	mov.w	r2, #64	; 0x40
    cd4c:	f3ef 8511 	mrs	r5, BASEPRI
    cd50:	f382 8812 	msr	BASEPRI_MAX, r2
    cd54:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    cd58:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    cd5a:	f7ff fef7 	bl	cb4c <sys_slist_find_and_remove>
    cd5e:	b130      	cbz	r0, cd6e <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    cd60:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    cd64:	f385 8811 	msr	BASEPRI, r5
    cd68:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    cd6c:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    cd6e:	f06f 0077 	mvn.w	r0, #119	; 0x77
    cd72:	e7f7      	b.n	cd64 <onoff_cancel+0x22>
		return -EINVAL;
    cd74:	f06f 0015 	mvn.w	r0, #21
    cd78:	e7f8      	b.n	cd6c <onoff_cancel+0x2a>

0000cd7a <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    cd7a:	4603      	mov	r3, r0
    cd7c:	b158      	cbz	r0, cd96 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    cd7e:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    cd80:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    cd84:	2a01      	cmp	r2, #1
    cd86:	d003      	beq.n	cd90 <sys_notify_validate+0x16>
    cd88:	2a03      	cmp	r2, #3
    cd8a:	d104      	bne.n	cd96 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    cd8c:	6802      	ldr	r2, [r0, #0]
    cd8e:	b112      	cbz	r2, cd96 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    cd90:	2000      	movs	r0, #0
    cd92:	6098      	str	r0, [r3, #8]
    cd94:	4770      	bx	lr
    cd96:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    cd9a:	4770      	bx	lr

0000cd9c <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    cd9c:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    cd9e:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    cda0:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    cda4:	2a03      	cmp	r2, #3
    cda6:	f04f 0200 	mov.w	r2, #0
{
    cdaa:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    cdac:	bf0c      	ite	eq
    cdae:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    cdb0:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    cdb2:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    cdb4:	4770      	bx	lr

0000cdb6 <encode_uint>:
{
    cdb6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cdba:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    cdbc:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    cdbe:	2b6f      	cmp	r3, #111	; 0x6f
{
    cdc0:	4680      	mov	r8, r0
    cdc2:	460f      	mov	r7, r1
    cdc4:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    cdc6:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    cdca:	d029      	beq.n	ce20 <encode_uint+0x6a>
    cdcc:	d824      	bhi.n	ce18 <encode_uint+0x62>
		return 10;
    cdce:	2b58      	cmp	r3, #88	; 0x58
    cdd0:	bf0c      	ite	eq
    cdd2:	2610      	moveq	r6, #16
    cdd4:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    cdd6:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    cdda:	4632      	mov	r2, r6
    cddc:	2300      	movs	r3, #0
    cdde:	4640      	mov	r0, r8
    cde0:	4639      	mov	r1, r7
    cde2:	f7f3 f97d 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    cde6:	2a09      	cmp	r2, #9
    cde8:	b2d4      	uxtb	r4, r2
    cdea:	d81e      	bhi.n	ce2a <encode_uint+0x74>
    cdec:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    cdee:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    cdf0:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    cdf2:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    cdf6:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    cdfa:	d301      	bcc.n	ce00 <encode_uint+0x4a>
    cdfc:	45d1      	cmp	r9, sl
    cdfe:	d811      	bhi.n	ce24 <encode_uint+0x6e>
	if (conv->flag_hash) {
    ce00:	782b      	ldrb	r3, [r5, #0]
    ce02:	069b      	lsls	r3, r3, #26
    ce04:	d505      	bpl.n	ce12 <encode_uint+0x5c>
		if (radix == 8) {
    ce06:	2e08      	cmp	r6, #8
    ce08:	d115      	bne.n	ce36 <encode_uint+0x80>
			conv->altform_0 = true;
    ce0a:	78ab      	ldrb	r3, [r5, #2]
    ce0c:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    ce10:	70ab      	strb	r3, [r5, #2]
}
    ce12:	4648      	mov	r0, r9
    ce14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    ce18:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    ce1c:	2b70      	cmp	r3, #112	; 0x70
    ce1e:	e7d7      	b.n	cdd0 <encode_uint+0x1a>
	switch (specifier) {
    ce20:	2608      	movs	r6, #8
    ce22:	e7d8      	b.n	cdd6 <encode_uint+0x20>
		value /= radix;
    ce24:	4680      	mov	r8, r0
    ce26:	460f      	mov	r7, r1
    ce28:	e7d7      	b.n	cdda <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    ce2a:	f1bb 0f19 	cmp.w	fp, #25
    ce2e:	bf94      	ite	ls
    ce30:	3437      	addls	r4, #55	; 0x37
    ce32:	3457      	addhi	r4, #87	; 0x57
    ce34:	e7db      	b.n	cdee <encode_uint+0x38>
		} else if (radix == 16) {
    ce36:	2e10      	cmp	r6, #16
    ce38:	d1eb      	bne.n	ce12 <encode_uint+0x5c>
			conv->altform_0c = true;
    ce3a:	78ab      	ldrb	r3, [r5, #2]
    ce3c:	f043 0310 	orr.w	r3, r3, #16
    ce40:	e7e6      	b.n	ce10 <encode_uint+0x5a>

0000ce42 <outs>:
{
    ce42:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce46:	4607      	mov	r7, r0
    ce48:	4688      	mov	r8, r1
    ce4a:	4615      	mov	r5, r2
    ce4c:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    ce4e:	4614      	mov	r4, r2
    ce50:	42b4      	cmp	r4, r6
    ce52:	d305      	bcc.n	ce60 <outs+0x1e>
    ce54:	b10e      	cbz	r6, ce5a <outs+0x18>
	return (int)count;
    ce56:	1b60      	subs	r0, r4, r5
    ce58:	e008      	b.n	ce6c <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    ce5a:	7823      	ldrb	r3, [r4, #0]
    ce5c:	2b00      	cmp	r3, #0
    ce5e:	d0fa      	beq.n	ce56 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    ce60:	f814 0b01 	ldrb.w	r0, [r4], #1
    ce64:	4641      	mov	r1, r8
    ce66:	47b8      	blx	r7
		if (rc < 0) {
    ce68:	2800      	cmp	r0, #0
    ce6a:	daf1      	bge.n	ce50 <outs+0xe>
}
    ce6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000ce70 <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    ce70:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
    ce72:	6903      	ldr	r3, [r0, #16]
{
    ce74:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
    ce76:	f013 0008 	ands.w	r0, r3, #8
    ce7a:	d109      	bne.n	ce90 <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    ce7c:	6813      	ldr	r3, [r2, #0]
    ce7e:	68d4      	ldr	r4, [r2, #12]
    ce80:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
    ce82:	bf97      	itett	ls
    ce84:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    ce86:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
    ce88:	1ad3      	subls	r3, r2, r3

	return true;
    ce8a:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    ce8c:	600b      	str	r3, [r1, #0]
}
    ce8e:	bd10      	pop	{r4, pc}
    ce90:	2300      	movs	r3, #0
		return false;
    ce92:	4618      	mov	r0, r3
    ce94:	e7fa      	b.n	ce8c <free_space+0x1c>

0000ce96 <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    ce96:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    ce98:	a901      	add	r1, sp, #4
{
    ce9a:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    ce9c:	f7ff ffe8 	bl	ce70 <free_space>
    cea0:	b120      	cbz	r0, ceac <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    cea2:	9b01      	ldr	r3, [sp, #4]
    cea4:	68e2      	ldr	r2, [r4, #12]
    cea6:	3b01      	subs	r3, #1
    cea8:	4413      	add	r3, r2
    ceaa:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    ceac:	6a20      	ldr	r0, [r4, #32]
    ceae:	9b01      	ldr	r3, [sp, #4]
    ceb0:	1ac0      	subs	r0, r0, r3
}
    ceb2:	3801      	subs	r0, #1
    ceb4:	b002      	add	sp, #8
    ceb6:	bd10      	pop	{r4, pc}

0000ceb8 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
    ceb8:	b510      	push	{r4, lr}
    ceba:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    cebc:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    cebe:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    cec0:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    cec2:	07d2      	lsls	r2, r2, #31
    cec4:	d502      	bpl.n	cecc <idx_inc+0x14>
		return i & (buffer->size - 1);
    cec6:	3b01      	subs	r3, #1
    cec8:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    ceca:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    cecc:	4298      	cmp	r0, r3
    cece:	bf28      	it	cs
    ced0:	1ac0      	subcs	r0, r0, r3
    ced2:	e7fa      	b.n	ceca <idx_inc+0x12>

0000ced4 <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
    ced4:	b510      	push	{r4, lr}
    ced6:	4604      	mov	r4, r0
    ced8:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    ceda:	68c1      	ldr	r1, [r0, #12]
    cedc:	f7ff ffec 	bl	ceb8 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
    cee0:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    cee2:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
    cee4:	f023 0308 	bic.w	r3, r3, #8
    cee8:	6123      	str	r3, [r4, #16]
}
    ceea:	bd10      	pop	{r4, pc}

0000ceec <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    ceec:	b538      	push	{r3, r4, r5, lr}
    ceee:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    cef0:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
    cef2:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    cef4:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    cef6:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    cefa:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
    cefe:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    cf00:	6801      	ldr	r1, [r0, #0]
    cf02:	462a      	mov	r2, r5
    cf04:	f7ff ffd8 	bl	ceb8 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    cf08:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    cf0a:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    cf0c:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    cf0e:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
    cf10:	bf02      	ittt	eq
    cf12:	6923      	ldreq	r3, [r4, #16]
    cf14:	f043 0308 	orreq.w	r3, r3, #8
    cf18:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    cf1a:	462a      	mov	r2, r5
    cf1c:	4620      	mov	r0, r4
    cf1e:	f7ff ffcb 	bl	ceb8 <idx_inc>
    cf22:	6060      	str	r0, [r4, #4]
}
    cf24:	bd38      	pop	{r3, r4, r5, pc}

0000cf26 <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
    cf26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    cf2a:	68c7      	ldr	r7, [r0, #12]
    cf2c:	69c6      	ldr	r6, [r0, #28]
{
    cf2e:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
    cf30:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    cf34:	f003 0303 	and.w	r3, r3, #3
    cf38:	2b02      	cmp	r3, #2
{
    cf3a:	4604      	mov	r4, r0
    cf3c:	4688      	mov	r8, r1
    cf3e:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    cf40:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    cf44:	f04f 0300 	mov.w	r3, #0
    cf48:	d009      	beq.n	cf5e <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
    cf4a:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
    cf4c:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
    cf50:	6923      	ldr	r3, [r4, #16]
    cf52:	0799      	lsls	r1, r3, #30
    cf54:	d410      	bmi.n	cf78 <drop_item_locked+0x52>
		return false;
    cf56:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
    cf58:	b003      	add	sp, #12
    cf5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
    cf5e:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
    cf62:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
    cf64:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
    cf66:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
    cf6a:	d0f1      	beq.n	cf50 <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
    cf6c:	f7ff ffb2 	bl	ced4 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    cf70:	68e3      	ldr	r3, [r4, #12]
    cf72:	60a3      	str	r3, [r4, #8]
		return true;
    cf74:	2001      	movs	r0, #1
    cf76:	e7ef      	b.n	cf58 <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
    cf78:	69a3      	ldr	r3, [r4, #24]
    cf7a:	4650      	mov	r0, sl
    cf7c:	4798      	blx	r3
	return item->hdr.valid;
    cf7e:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
    cf82:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
    cf84:	4605      	mov	r5, r0
	if (!is_valid(item)) {
    cf86:	d5e6      	bpl.n	cf56 <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
    cf88:	f013 0302 	ands.w	r3, r3, #2
    cf8c:	d01d      	beq.n	cfca <drop_item_locked+0xa4>
		if (free_wlen) {
    cf8e:	f1b8 0f00 	cmp.w	r8, #0
    cf92:	d003      	beq.n	cf9c <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
    cf94:	4641      	mov	r1, r8
    cf96:	4620      	mov	r0, r4
    cf98:	f7ff ffa8 	bl	ceec <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    cf9c:	6861      	ldr	r1, [r4, #4]
    cf9e:	462a      	mov	r2, r5
    cfa0:	4620      	mov	r0, r4
    cfa2:	f7ff ff89 	bl	ceb8 <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    cfa6:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    cfaa:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    cfac:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    cfae:	d104      	bne.n	cfba <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
    cfb0:	462a      	mov	r2, r5
    cfb2:	4620      	mov	r0, r4
    cfb4:	f7ff ff80 	bl	ceb8 <idx_inc>
    cfb8:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
    cfba:	68a3      	ldr	r3, [r4, #8]
    cfbc:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
    cfbe:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
    cfc0:	6923      	ldr	r3, [r4, #16]
    cfc2:	f043 0308 	orr.w	r3, r3, #8
    cfc6:	6123      	str	r3, [r4, #16]
    cfc8:	e7d4      	b.n	cf74 <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
    cfca:	4601      	mov	r1, r0
    cfcc:	4620      	mov	r0, r4
    cfce:	9301      	str	r3, [sp, #4]
    cfd0:	f7ff ff80 	bl	ced4 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    cfd4:	68e2      	ldr	r2, [r4, #12]
    cfd6:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
    cfd8:	f1b8 0f00 	cmp.w	r8, #0
    cfdc:	d004      	beq.n	cfe8 <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
    cfde:	6821      	ldr	r1, [r4, #0]
    cfe0:	69e2      	ldr	r2, [r4, #28]
    cfe2:	9b01      	ldr	r3, [sp, #4]
    cfe4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
    cfe8:	eb05 0208 	add.w	r2, r5, r8
    cfec:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    cff0:	6821      	ldr	r1, [r4, #0]
    cff2:	4620      	mov	r0, r4
    cff4:	f7ff ff60 	bl	ceb8 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
    cff8:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    cffa:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
    cffc:	f043 0308 	orr.w	r3, r3, #8
    d000:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
    d002:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    d006:	f36f 0300 	bfc	r3, #0, #1
    d00a:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
    d00e:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
    d012:	e7af      	b.n	cf74 <drop_item_locked+0x4e>

0000d014 <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
    d014:	b570      	push	{r4, r5, r6, lr}
    d016:	4604      	mov	r4, r0
    d018:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
    d01a:	f7ff ff4d 	bl	ceb8 <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
    d01e:	6823      	ldr	r3, [r4, #0]
    d020:	4283      	cmp	r3, r0
    d022:	d105      	bne.n	d030 <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
    d024:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
    d026:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
    d028:	f023 0308 	bic.w	r3, r3, #8
    d02c:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
    d02e:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    d030:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
    d032:	00ab      	lsls	r3, r5, #2
    d034:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    d038:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
    d03c:	4620      	mov	r0, r4
    d03e:	6861      	ldr	r1, [r4, #4]
    d040:	462a      	mov	r2, r5
    d042:	f7ff ff39 	bl	ceb8 <idx_inc>
    d046:	6060      	str	r0, [r4, #4]
    d048:	e7f1      	b.n	d02e <post_drop_action+0x1a>

0000d04a <max_utilization_update>:
{
    d04a:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    d04c:	6903      	ldr	r3, [r0, #16]
    d04e:	075b      	lsls	r3, r3, #29
{
    d050:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    d052:	d506      	bpl.n	d062 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    d054:	6a45      	ldr	r5, [r0, #36]	; 0x24
    d056:	f7ff ff1e 	bl	ce96 <get_usage>
    d05a:	4285      	cmp	r5, r0
    d05c:	bf2c      	ite	cs
    d05e:	6265      	strcs	r5, [r4, #36]	; 0x24
    d060:	6260      	strcc	r0, [r4, #36]	; 0x24
}
    d062:	bd38      	pop	{r3, r4, r5, pc}

0000d064 <mpsc_pbuf_init>:
{
    d064:	b538      	push	{r3, r4, r5, lr}
    d066:	460d      	mov	r5, r1
    d068:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    d06a:	221c      	movs	r2, #28
    d06c:	2100      	movs	r1, #0
    d06e:	f000 fa9a 	bl	d5a6 <memset>
	buffer->get_wlen = cfg->get_wlen;
    d072:	68eb      	ldr	r3, [r5, #12]
    d074:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    d076:	68ab      	ldr	r3, [r5, #8]
    d078:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    d07a:	682b      	ldr	r3, [r5, #0]
    d07c:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    d07e:	686b      	ldr	r3, [r5, #4]
    d080:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
    d082:	2200      	movs	r2, #0
    d084:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    d086:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
    d088:	b123      	cbz	r3, d094 <mpsc_pbuf_init+0x30>
    d08a:	1e59      	subs	r1, r3, #1
    d08c:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    d08e:	bf08      	it	eq
    d090:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    d094:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    d096:	2201      	movs	r2, #1
    d098:	f104 0028 	add.w	r0, r4, #40	; 0x28
    d09c:	2100      	movs	r1, #0
}
    d09e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    d0a2:	f001 b89a 	b.w	e1da <z_impl_k_sem_init>

0000d0a6 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    d0a6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d0aa:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
    d0ac:	2500      	movs	r5, #0
{
    d0ae:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
    d0b0:	6a03      	ldr	r3, [r0, #32]
	union mpsc_pbuf_generic *dropped_item = NULL;
    d0b2:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
    d0b4:	428b      	cmp	r3, r1
{
    d0b6:	4604      	mov	r4, r0
    d0b8:	460e      	mov	r6, r1
    d0ba:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
    d0bc:	9505      	str	r5, [sp, #20]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
    d0be:	46a9      	mov	r9, r5
	if (wlen > (buffer->size)) {
    d0c0:	d33a      	bcc.n	d138 <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
    d0c2:	f04f 0340 	mov.w	r3, #64	; 0x40
    d0c6:	f3ef 8b11 	mrs	fp, BASEPRI
    d0ca:	f383 8812 	msr	BASEPRI_MAX, r3
    d0ce:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
    d0d2:	9a05      	ldr	r2, [sp, #20]
    d0d4:	46d8      	mov	r8, fp
    d0d6:	b12a      	cbz	r2, d0e4 <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
    d0d8:	4629      	mov	r1, r5
    d0da:	4620      	mov	r0, r4
    d0dc:	f7ff ff9a 	bl	d014 <post_drop_action>
			tmp_wr_idx_shift = 0;
    d0e0:	2300      	movs	r3, #0
    d0e2:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
    d0e4:	a904      	add	r1, sp, #16
    d0e6:	4620      	mov	r0, r4
    d0e8:	f7ff fec2 	bl	ce70 <free_space>

		if (free_wlen >= wlen) {
    d0ec:	9904      	ldr	r1, [sp, #16]
    d0ee:	42b1      	cmp	r1, r6
		wrap = free_space(buffer, &free_wlen);
    d0f0:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
    d0f2:	d32a      	bcc.n	d14a <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    d0f4:	6822      	ldr	r2, [r4, #0]
			item =
    d0f6:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    d0f8:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    d0fc:	f021 0103 	bic.w	r1, r1, #3
    d100:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
    d104:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    d108:	6821      	ldr	r1, [r4, #0]
    d10a:	4632      	mov	r2, r6
    d10c:	4620      	mov	r0, r4
    d10e:	f7ff fed3 	bl	ceb8 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    d112:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    d114:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    d116:	4298      	cmp	r0, r3
    d118:	d012      	beq.n	d140 <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
    d11a:	2700      	movs	r7, #0
	__asm__ volatile(
    d11c:	f388 8811 	msr	BASEPRI, r8
    d120:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
    d124:	9903      	ldr	r1, [sp, #12]
    d126:	b129      	cbz	r1, d134 <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    d128:	6962      	ldr	r2, [r4, #20]
    d12a:	b10a      	cbz	r2, d130 <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
    d12c:	4620      	mov	r0, r4
    d12e:	4790      	blx	r2
			}
			dropped_item = NULL;
    d130:	2300      	movs	r3, #0
    d132:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
    d134:	2f00      	cmp	r7, #0
    d136:	d1c4      	bne.n	d0c2 <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    d138:	4648      	mov	r0, r9
    d13a:	b007      	add	sp, #28
    d13c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
    d140:	6923      	ldr	r3, [r4, #16]
    d142:	f043 0308 	orr.w	r3, r3, #8
    d146:	6123      	str	r3, [r4, #16]
    d148:	e7e7      	b.n	d11a <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
    d14a:	b118      	cbz	r0, d154 <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
    d14c:	4620      	mov	r0, r4
    d14e:	f7ff fecd 	bl	ceec <add_skip_item>
			cont = true;
    d152:	e7e3      	b.n	d11c <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    d154:	9b00      	ldr	r3, [sp, #0]
    d156:	ea5a 0303 	orrs.w	r3, sl, r3
    d15a:	d01a      	beq.n	d192 <mpsc_pbuf_alloc+0xec>
    d15c:	9101      	str	r1, [sp, #4]
    d15e:	f000 ff98 	bl	e092 <k_is_in_isr>
    d162:	9901      	ldr	r1, [sp, #4]
    d164:	b9a8      	cbnz	r0, d192 <mpsc_pbuf_alloc+0xec>
    d166:	f38b 8811 	msr	BASEPRI, fp
    d16a:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    d16e:	9b00      	ldr	r3, [sp, #0]
    d170:	4652      	mov	r2, sl
    d172:	f104 0028 	add.w	r0, r4, #40	; 0x28
    d176:	f7fe fb01 	bl	b77c <z_impl_k_sem_take>
	__asm__ volatile(
    d17a:	f04f 0340 	mov.w	r3, #64	; 0x40
    d17e:	f3ef 8811 	mrs	r8, BASEPRI
    d182:	f383 8812 	msr	BASEPRI_MAX, r3
    d186:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
    d18a:	fab0 f780 	clz	r7, r0
    d18e:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    d190:	e7c4      	b.n	d11c <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
    d192:	ab05      	add	r3, sp, #20
    d194:	aa03      	add	r2, sp, #12
    d196:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
    d198:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
    d19a:	f7ff fec4 	bl	cf26 <drop_item_locked>
    d19e:	4607      	mov	r7, r0
    d1a0:	e7bc      	b.n	d11c <mpsc_pbuf_alloc+0x76>

0000d1a2 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    d1a2:	b570      	push	{r4, r5, r6, lr}
    d1a4:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    d1a6:	6983      	ldr	r3, [r0, #24]
    d1a8:	4608      	mov	r0, r1
{
    d1aa:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    d1ac:	4798      	blx	r3
    d1ae:	4602      	mov	r2, r0
    d1b0:	f04f 0340 	mov.w	r3, #64	; 0x40
    d1b4:	f3ef 8611 	mrs	r6, BASEPRI
    d1b8:	f383 8812 	msr	BASEPRI_MAX, r3
    d1bc:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    d1c0:	782b      	ldrb	r3, [r5, #0]
    d1c2:	f043 0301 	orr.w	r3, r3, #1
    d1c6:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    d1c8:	6861      	ldr	r1, [r4, #4]
    d1ca:	4620      	mov	r0, r4
    d1cc:	f7ff fe74 	bl	ceb8 <idx_inc>
    d1d0:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    d1d2:	4620      	mov	r0, r4
    d1d4:	f7ff ff39 	bl	d04a <max_utilization_update>
	__asm__ volatile(
    d1d8:	f386 8811 	msr	BASEPRI, r6
    d1dc:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
    d1e0:	bd70      	pop	{r4, r5, r6, pc}

0000d1e2 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    d1e2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d1e4:	4604      	mov	r4, r0
	__asm__ volatile(
    d1e6:	f04f 0340 	mov.w	r3, #64	; 0x40
    d1ea:	f3ef 8611 	mrs	r6, BASEPRI
    d1ee:	f383 8812 	msr	BASEPRI_MAX, r3
    d1f2:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    d1f6:	6923      	ldr	r3, [r4, #16]
    d1f8:	f013 0f08 	tst.w	r3, #8
    d1fc:	68a3      	ldr	r3, [r4, #8]
    d1fe:	d102      	bne.n	d206 <mpsc_pbuf_claim+0x24>
    d200:	6862      	ldr	r2, [r4, #4]
    d202:	4293      	cmp	r3, r2
    d204:	d900      	bls.n	d208 <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
    d206:	6a22      	ldr	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
    d208:	69e1      	ldr	r1, [r4, #28]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    d20a:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
    d20c:	b92a      	cbnz	r2, d21a <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
    d20e:	f386 8811 	msr	BASEPRI, r6
    d212:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
    d216:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
    d218:	e033      	b.n	d282 <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
    d21a:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
    d21e:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
    d222:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
    d226:	d0f2      	beq.n	d20e <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
    d228:	2802      	cmp	r0, #2
    d22a:	d103      	bne.n	d234 <mpsc_pbuf_claim+0x52>
		return item->skip.len;
    d22c:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
    d230:	08ad      	lsrs	r5, r5, #2
    d232:	d105      	bne.n	d240 <mpsc_pbuf_claim+0x5e>
    d234:	07d0      	lsls	r0, r2, #31
    d236:	d412      	bmi.n	d25e <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
    d238:	69a3      	ldr	r3, [r4, #24]
    d23a:	4638      	mov	r0, r7
    d23c:	4798      	blx	r3
    d23e:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    d240:	68a1      	ldr	r1, [r4, #8]
    d242:	462a      	mov	r2, r5
    d244:	4620      	mov	r0, r4
    d246:	f7ff fe37 	bl	ceb8 <idx_inc>
				rd_idx_inc(buffer, inc);
    d24a:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
    d24c:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
    d24e:	4620      	mov	r0, r4
    d250:	f7ff fe40 	bl	ced4 <rd_idx_inc>
    d254:	f386 8811 	msr	BASEPRI, r6
    d258:	f3bf 8f6f 	isb	sy
	} while (cont);
    d25c:	e7c3      	b.n	d1e6 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
    d25e:	f042 0202 	orr.w	r2, r2, #2
    d262:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
    d266:	4638      	mov	r0, r7
    d268:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
    d26a:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
    d26c:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
    d26e:	4629      	mov	r1, r5
						buffer->get_wlen(item));
    d270:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
    d272:	4620      	mov	r0, r4
    d274:	f7ff fe20 	bl	ceb8 <idx_inc>
				buffer->tmp_rd_idx =
    d278:	60a0      	str	r0, [r4, #8]
    d27a:	f386 8811 	msr	BASEPRI, r6
    d27e:	f3bf 8f6f 	isb	sy
}
    d282:	4638      	mov	r0, r7
    d284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d286 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    d286:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d288:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    d28a:	6983      	ldr	r3, [r0, #24]
    d28c:	4608      	mov	r0, r1
{
    d28e:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    d290:	4798      	blx	r3
    d292:	4606      	mov	r6, r0
	__asm__ volatile(
    d294:	f04f 0340 	mov.w	r3, #64	; 0x40
    d298:	f3ef 8711 	mrs	r7, BASEPRI
    d29c:	f383 8812 	msr	BASEPRI_MAX, r3
    d2a0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    d2a4:	782b      	ldrb	r3, [r5, #0]
    d2a6:	f36f 0300 	bfc	r3, #0, #1
    d2aa:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    d2ac:	6923      	ldr	r3, [r4, #16]
    d2ae:	079b      	lsls	r3, r3, #30
    d2b0:	d505      	bpl.n	d2be <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    d2b2:	68e2      	ldr	r2, [r4, #12]
    d2b4:	69e3      	ldr	r3, [r4, #28]
    d2b6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    d2ba:	429d      	cmp	r5, r3
    d2bc:	d11a      	bne.n	d2f4 <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
    d2be:	782b      	ldrb	r3, [r5, #0]
    d2c0:	f36f 0341 	bfc	r3, #1, #1
    d2c4:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    d2c6:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    d2ca:	4299      	cmp	r1, r3
    d2cc:	d104      	bne.n	d2d8 <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
    d2ce:	4632      	mov	r2, r6
    d2d0:	4620      	mov	r0, r4
    d2d2:	f7ff fdf1 	bl	ceb8 <idx_inc>
    d2d6:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
    d2d8:	4631      	mov	r1, r6
    d2da:	4620      	mov	r0, r4
    d2dc:	f7ff fdfa 	bl	ced4 <rd_idx_inc>
	__asm__ volatile(
    d2e0:	f387 8811 	msr	BASEPRI, r7
    d2e4:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    d2e8:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    d2ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    d2f0:	f7fe ba24 	b.w	b73c <z_impl_k_sem_give>
		witem->skip.len = wlen;
    d2f4:	682b      	ldr	r3, [r5, #0]
    d2f6:	f360 039f 	bfi	r3, r0, #2, #30
    d2fa:	602b      	str	r3, [r5, #0]
    d2fc:	e7f0      	b.n	d2e0 <mpsc_pbuf_free+0x5a>

0000d2fe <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    d2fe:	6902      	ldr	r2, [r0, #16]
    d300:	6883      	ldr	r3, [r0, #8]
    d302:	0712      	lsls	r2, r2, #28
    d304:	d402      	bmi.n	d30c <mpsc_pbuf_is_pending+0xe>
    d306:	6842      	ldr	r2, [r0, #4]
    d308:	429a      	cmp	r2, r3
    d30a:	d200      	bcs.n	d30e <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
    d30c:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    d30e:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    d310:	1e18      	subs	r0, r3, #0
    d312:	bf18      	it	ne
    d314:	2001      	movne	r0, #1
    d316:	4770      	bx	lr

0000d318 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    d318:	4770      	bx	lr

0000d31a <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
    d31a:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    d31c:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    d31e:	bf5f      	itttt	pl
    d320:	6803      	ldrpl	r3, [r0, #0]
    d322:	8842      	ldrhpl	r2, [r0, #2]
    d324:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
    d328:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
    d32c:	bf5d      	ittte	pl
    d32e:	3017      	addpl	r0, #23
    d330:	f020 0007 	bicpl.w	r0, r0, #7
    d334:	0880      	lsrpl	r0, r0, #2
	return 0;
    d336:	2000      	movmi	r0, #0
}
    d338:	4770      	bx	lr

0000d33a <dummy_timestamp>:
}
    d33a:	2000      	movs	r0, #0
    d33c:	4770      	bx	lr

0000d33e <default_get_timestamp>:
    d33e:	f000 bbcc 	b.w	dada <sys_clock_cycle_get_32>

0000d342 <atomic_inc>:
{
    d342:	4603      	mov	r3, r0
}
    d344:	f3bf 8f5b 	dmb	ish
    d348:	e853 0f00 	ldrex	r0, [r3]
    d34c:	1c42      	adds	r2, r0, #1
    d34e:	e843 2100 	strex	r1, r2, [r3]
    d352:	2900      	cmp	r1, #0
    d354:	d1f8      	bne.n	d348 <atomic_inc+0x6>
    d356:	f3bf 8f5b 	dmb	ish
    d35a:	4770      	bx	lr

0000d35c <z_log_vprintk>:
{
    d35c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    d35e:	2300      	movs	r3, #0
    d360:	e9cd 0102 	strd	r0, r1, [sp, #8]
    d364:	e9cd 3300 	strd	r3, r3, [sp]
    d368:	461a      	mov	r2, r3
    d36a:	4619      	mov	r1, r3
    d36c:	4618      	mov	r0, r3
    d36e:	f7f5 fac9 	bl	2904 <z_impl_z_log_msg_runtime_vcreate>
}
    d372:	b005      	add	sp, #20
    d374:	f85d fb04 	ldr.w	pc, [sp], #4

0000d378 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
    d378:	2001      	movs	r0, #1
    d37a:	f7f5 b87b 	b.w	2474 <z_log_dropped>

0000d37e <z_log_get_tag>:
}
    d37e:	2000      	movs	r0, #0
    d380:	4770      	bx	lr

0000d382 <z_cbprintf_cpy>:
{
    d382:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
    d384:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
    d388:	1b9b      	subs	r3, r3, r6
    d38a:	428b      	cmp	r3, r1
{
    d38c:	460c      	mov	r4, r1
    d38e:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
    d390:	d30a      	bcc.n	d3a8 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
    d392:	6813      	ldr	r3, [r2, #0]
    d394:	460a      	mov	r2, r1
    d396:	4601      	mov	r1, r0
    d398:	1998      	adds	r0, r3, r6
    d39a:	f000 f8f9 	bl	d590 <memcpy>
	desc->off += len;
    d39e:	68ab      	ldr	r3, [r5, #8]
    d3a0:	4423      	add	r3, r4
    d3a2:	60ab      	str	r3, [r5, #8]
	return len;
    d3a4:	4620      	mov	r0, r4
}
    d3a6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    d3a8:	f06f 001b 	mvn.w	r0, #27
    d3ac:	e7fb      	b.n	d3a6 <z_cbprintf_cpy+0x24>

0000d3ae <z_log_msg_finalize>:
{
    d3ae:	b570      	push	{r4, r5, r6, lr}
    d3b0:	460e      	mov	r6, r1
    d3b2:	4615      	mov	r5, r2
    d3b4:	4619      	mov	r1, r3
	if (!msg) {
    d3b6:	4604      	mov	r4, r0
    d3b8:	b918      	cbnz	r0, d3c2 <z_log_msg_finalize+0x14>
}
    d3ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    d3be:	f7f5 b859 	b.w	2474 <z_log_dropped>
	if (data) {
    d3c2:	b133      	cbz	r3, d3d2 <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
    d3c4:	f3c2 234a 	ubfx	r3, r2, #9, #11
    d3c8:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    d3ca:	0d12      	lsrs	r2, r2, #20
    d3cc:	4418      	add	r0, r3
    d3ce:	f000 f8df 	bl	d590 <memcpy>
	msg->hdr.source = source;
    d3d2:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    d3d6:	4620      	mov	r0, r4
}
    d3d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    d3dc:	f7f5 b9da 	b.w	2794 <z_log_msg_commit>

0000d3e0 <buffer_write>:
{
    d3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d3e2:	4606      	mov	r6, r0
    d3e4:	460d      	mov	r5, r1
    d3e6:	4614      	mov	r4, r2
    d3e8:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    d3ea:	4621      	mov	r1, r4
    d3ec:	4628      	mov	r0, r5
    d3ee:	463a      	mov	r2, r7
    d3f0:	47b0      	blx	r6
	} while (len != 0);
    d3f2:	1a24      	subs	r4, r4, r0
		buf += processed;
    d3f4:	4405      	add	r5, r0
	} while (len != 0);
    d3f6:	d1f8      	bne.n	d3ea <buffer_write+0xa>
}
    d3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d3fa <cbvprintf>:
{
    d3fa:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    d3fc:	2400      	movs	r4, #0
    d3fe:	9400      	str	r4, [sp, #0]
    d400:	f7f4 fbb2 	bl	1b68 <z_cbvprintf_impl>
}
    d404:	b002      	add	sp, #8
    d406:	bd10      	pop	{r4, pc}

0000d408 <log_output_flush>:
{
    d408:	b510      	push	{r4, lr}
		     output->control_block->offset,
    d40a:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    d40c:	6881      	ldr	r1, [r0, #8]
{
    d40e:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    d410:	e9d2 2300 	ldrd	r2, r3, [r2]
    d414:	6800      	ldr	r0, [r0, #0]
    d416:	f7ff ffe3 	bl	d3e0 <buffer_write>
	output->control_block->offset = 0;
    d41a:	6863      	ldr	r3, [r4, #4]
    d41c:	2200      	movs	r2, #0
    d41e:	601a      	str	r2, [r3, #0]
}
    d420:	bd10      	pop	{r4, pc}

0000d422 <out_func>:
{
    d422:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    d424:	684b      	ldr	r3, [r1, #4]
    d426:	681a      	ldr	r2, [r3, #0]
    d428:	68cb      	ldr	r3, [r1, #12]
    d42a:	429a      	cmp	r2, r3
{
    d42c:	4605      	mov	r5, r0
    d42e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    d430:	d102      	bne.n	d438 <out_func+0x16>
		log_output_flush(out_ctx);
    d432:	4608      	mov	r0, r1
    d434:	f7ff ffe8 	bl	d408 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    d438:	6863      	ldr	r3, [r4, #4]
    d43a:	f3bf 8f5b 	dmb	ish
    d43e:	e853 2f00 	ldrex	r2, [r3]
    d442:	1c51      	adds	r1, r2, #1
    d444:	e843 1000 	strex	r0, r1, [r3]
    d448:	2800      	cmp	r0, #0
    d44a:	d1f8      	bne.n	d43e <out_func+0x1c>
    d44c:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    d450:	68a3      	ldr	r3, [r4, #8]
    d452:	549d      	strb	r5, [r3, r2]
}
    d454:	2000      	movs	r0, #0
    d456:	bd38      	pop	{r3, r4, r5, pc}

0000d458 <cr_out_func>:
	if (c == '\n') {
    d458:	280a      	cmp	r0, #10
{
    d45a:	b538      	push	{r3, r4, r5, lr}
    d45c:	4604      	mov	r4, r0
    d45e:	460d      	mov	r5, r1
	if (c == '\n') {
    d460:	d102      	bne.n	d468 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
    d462:	200d      	movs	r0, #13
    d464:	f7ff ffdd 	bl	d422 <out_func>
	out_func(c, ctx);
    d468:	4629      	mov	r1, r5
    d46a:	4620      	mov	r0, r4
    d46c:	f7ff ffd9 	bl	d422 <out_func>
}
    d470:	2000      	movs	r0, #0
    d472:	bd38      	pop	{r3, r4, r5, pc}

0000d474 <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
    d474:	f010 0f70 	tst.w	r0, #112	; 0x70
	ep_idx = ep & (~USB_EP_DIR_IN);
    d478:	f000 027f 	and.w	r2, r0, #127	; 0x7f
	if (ep_idx > 15) {
    d47c:	d001      	beq.n	d482 <get_ep_bm_from_addr+0xe>
    d47e:	f7f5 bf13 	b.w	32a8 <get_ep_bm_from_addr.part.0>
	if (ep & USB_EP_DIR_IN) {
    d482:	f010 0f80 	tst.w	r0, #128	; 0x80
		ep_bm = BIT(ep_idx + 16);
    d486:	bf18      	it	ne
    d488:	3210      	addne	r2, #16
    d48a:	2001      	movs	r0, #1
		ep_bm = BIT(ep_idx);
    d48c:	4090      	lsls	r0, r2
}
    d48e:	4770      	bx	lr

0000d490 <usb_write>:
{
    d490:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d494:	4606      	mov	r6, r0
    d496:	460f      	mov	r7, r1
    d498:	4690      	mov	r8, r2
    d49a:	4699      	mov	r9, r3
    d49c:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    d49e:	464b      	mov	r3, r9
    d4a0:	4642      	mov	r2, r8
    d4a2:	4639      	mov	r1, r7
    d4a4:	4630      	mov	r0, r6
    d4a6:	f7f8 fadd 	bl	5a64 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    d4aa:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    d4ae:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    d4b0:	d103      	bne.n	d4ba <usb_write+0x2a>
	z_impl_k_yield();
    d4b2:	f7fe fd67 	bl	bf84 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    d4b6:	3d01      	subs	r5, #1
    d4b8:	d1f1      	bne.n	d49e <usb_write+0xe>
}
    d4ba:	4620      	mov	r0, r4
    d4bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000d4c0 <usb_get_dev_data_by_cfg>:
	return list->head;
    d4c0:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d4c2:	b140      	cbz	r0, d4d6 <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    d4c4:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
    d4c8:	685b      	ldr	r3, [r3, #4]
    d4ca:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d4cc:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
    d4d0:	d001      	beq.n	d4d6 <usb_get_dev_data_by_cfg+0x16>
	return node->next;
    d4d2:	6840      	ldr	r0, [r0, #4]
    d4d4:	e7f5      	b.n	d4c2 <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    d4d6:	4770      	bx	lr

0000d4d8 <usb_get_dev_data_by_iface>:
	return list->head;
    d4d8:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d4da:	b150      	cbz	r0, d4f2 <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    d4dc:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
    d4e0:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    d4e2:	685b      	ldr	r3, [r3, #4]
    d4e4:	789b      	ldrb	r3, [r3, #2]
    d4e6:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d4e8:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
    d4ec:	d001      	beq.n	d4f2 <usb_get_dev_data_by_iface+0x1a>
	return node->next;
    d4ee:	6840      	ldr	r0, [r0, #4]
    d4f0:	e7f3      	b.n	d4da <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    d4f2:	4770      	bx	lr

0000d4f4 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    d4f4:	b530      	push	{r4, r5, lr}
	return list->head;
    d4f6:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d4f8:	b188      	cbz	r0, d51e <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    d4fa:	f850 3c04 	ldr.w	r3, [r0, #-4]
    d4fe:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    d500:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    d502:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    d504:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    d506:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    d508:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    d50a:	b2dc      	uxtb	r4, r3
    d50c:	42a5      	cmp	r5, r4
    d50e:	d801      	bhi.n	d514 <usb_get_dev_data_by_ep+0x20>
	return node->next;
    d510:	6840      	ldr	r0, [r0, #4]
    d512:	e7f1      	b.n	d4f8 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    d514:	3301      	adds	r3, #1
    d516:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    d51a:	428c      	cmp	r4, r1
    d51c:	d1f5      	bne.n	d50a <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    d51e:	bd30      	pop	{r4, r5, pc}

0000d520 <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    d520:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    d522:	6800      	ldr	r0, [r0, #0]
    d524:	f7f6 bd3a 	b.w	3f9c <z_arm_fatal_error>

0000d528 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    d528:	2100      	movs	r1, #0
    d52a:	2001      	movs	r0, #1
    d52c:	f7f6 bd36 	b.w	3f9c <z_arm_fatal_error>

0000d530 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    d530:	b508      	push	{r3, lr}
	handler();
    d532:	f7f6 fdf1 	bl	4118 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    d536:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    d53a:	f7f6 bec3 	b.w	42c4 <z_arm_exc_exit>

0000d53e <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
    d53e:	2300      	movs	r3, #0
    d540:	f7f5 b95c 	b.w	27fc <z_impl_z_log_msg_static_create>

0000d544 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    d544:	3901      	subs	r1, #1
    d546:	4603      	mov	r3, r0
    d548:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    d54c:	b90a      	cbnz	r2, d552 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    d54e:	701a      	strb	r2, [r3, #0]

	return dest;
}
    d550:	4770      	bx	lr
		*d = *s;
    d552:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    d556:	e7f7      	b.n	d548 <strcpy+0x4>

0000d558 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    d558:	4603      	mov	r3, r0
	size_t n = 0;
    d55a:	2000      	movs	r0, #0

	while (*s != '\0') {
    d55c:	5c1a      	ldrb	r2, [r3, r0]
    d55e:	b902      	cbnz	r2, d562 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    d560:	4770      	bx	lr
		n++;
    d562:	3001      	adds	r0, #1
    d564:	e7fa      	b.n	d55c <strlen+0x4>

0000d566 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    d566:	4603      	mov	r3, r0
	size_t n = 0;
    d568:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    d56a:	5c1a      	ldrb	r2, [r3, r0]
    d56c:	b10a      	cbz	r2, d572 <strnlen+0xc>
    d56e:	4288      	cmp	r0, r1
    d570:	d100      	bne.n	d574 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    d572:	4770      	bx	lr
		n++;
    d574:	3001      	adds	r0, #1
    d576:	e7f8      	b.n	d56a <strnlen+0x4>

0000d578 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    d578:	1e43      	subs	r3, r0, #1
    d57a:	3901      	subs	r1, #1
    d57c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    d580:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    d584:	4282      	cmp	r2, r0
    d586:	d101      	bne.n	d58c <strcmp+0x14>
    d588:	2a00      	cmp	r2, #0
    d58a:	d1f7      	bne.n	d57c <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    d58c:	1a10      	subs	r0, r2, r0
    d58e:	4770      	bx	lr

0000d590 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    d590:	b510      	push	{r4, lr}
    d592:	1e43      	subs	r3, r0, #1
    d594:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    d596:	4291      	cmp	r1, r2
    d598:	d100      	bne.n	d59c <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    d59a:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    d59c:	f811 4b01 	ldrb.w	r4, [r1], #1
    d5a0:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    d5a4:	e7f7      	b.n	d596 <memcpy+0x6>

0000d5a6 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    d5a6:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    d5a8:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    d5aa:	4603      	mov	r3, r0
	while (n > 0) {
    d5ac:	4293      	cmp	r3, r2
    d5ae:	d100      	bne.n	d5b2 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    d5b0:	4770      	bx	lr
		*(d_byte++) = c_byte;
    d5b2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    d5b6:	e7f9      	b.n	d5ac <memset+0x6>

0000d5b8 <_stdout_hook_default>:
}
    d5b8:	f04f 30ff 	mov.w	r0, #4294967295
    d5bc:	4770      	bx	lr

0000d5be <nordicsemi_nrf52_init>:
	__asm__ volatile(
    d5be:	f04f 0240 	mov.w	r2, #64	; 0x40
    d5c2:	f3ef 8311 	mrs	r3, BASEPRI
    d5c6:	f382 8812 	msr	BASEPRI_MAX, r2
    d5ca:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    d5ce:	f383 8811 	msr	BASEPRI, r3
    d5d2:	f3bf 8f6f 	isb	sy
}
    d5d6:	2000      	movs	r0, #0
    d5d8:	4770      	bx	lr

0000d5da <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    d5da:	2806      	cmp	r0, #6
    d5dc:	d108      	bne.n	d5f0 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    d5de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d5e2:	2201      	movs	r2, #1
    d5e4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    d5e8:	f3bf 8f4f 	dsb	sy
        __WFE();
    d5ec:	bf20      	wfe
    while (true)
    d5ee:	e7fd      	b.n	d5ec <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    d5f0:	4770      	bx	lr

0000d5f2 <pm_state_exit_post_ops>:
    d5f2:	2300      	movs	r3, #0
    d5f4:	f383 8811 	msr	BASEPRI, r3
    d5f8:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    d5fc:	4770      	bx	lr

0000d5fe <hid_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    d5fe:	7081      	strb	r1, [r0, #2]
}
    d600:	4770      	bx	lr

0000d602 <usb_hid_device_init>:
static int usb_hid_device_init(const struct device *dev)
{
	LOG_DBG("Init HID Device: dev %p (%s)", dev, dev->name);

	return 0;
}
    d602:	2000      	movs	r0, #0
    d604:	4770      	bx	lr

0000d606 <z_log_msg_static_create.constprop.0>:
    d606:	2300      	movs	r3, #0
    d608:	f7f5 b8f8 	b.w	27fc <z_impl_z_log_msg_static_create>

0000d60c <usb_hid_init>:
	usb_set_hid_report_size(cfg, dev_data->report_size);
    d60c:	6903      	ldr	r3, [r0, #16]
    d60e:	6842      	ldr	r2, [r0, #4]
    d610:	685b      	ldr	r3, [r3, #4]
    d612:	6852      	ldr	r2, [r2, #4]
	dst[0] = val;
    d614:	7413      	strb	r3, [r2, #16]
	dst[1] = val >> 8;
    d616:	f3c3 2307 	ubfx	r3, r3, #8, #8
    d61a:	7453      	strb	r3, [r2, #17]
}
    d61c:	2000      	movs	r0, #0
    d61e:	4770      	bx	lr

0000d620 <ep_ctx_reset>:
{
    d620:	b510      	push	{r4, lr}
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    d622:	6903      	ldr	r3, [r0, #16]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    d624:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    d628:	2300      	movs	r3, #0
    d62a:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    d62c:	7f83      	ldrb	r3, [r0, #30]
{
    d62e:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    d630:	b113      	cbz	r3, d638 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    d632:	7a40      	ldrb	r0, [r0, #9]
    d634:	f000 fc87 	bl	df46 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    d638:	2301      	movs	r3, #1
    d63a:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    d63c:	2300      	movs	r3, #0
    d63e:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    d640:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    d642:	77a3      	strb	r3, [r4, #30]
}
    d644:	bd10      	pop	{r4, pc}

0000d646 <z_log_msg_static_create.constprop.0>:
    d646:	2300      	movs	r3, #0
    d648:	f7f5 b8d8 	b.w	27fc <z_impl_z_log_msg_static_create>

0000d64c <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    d64c:	f7fd bf8c 	b.w	b568 <z_impl_k_mutex_lock>

0000d650 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    d650:	f7fe b804 	b.w	b65c <z_impl_k_mutex_unlock>

0000d654 <usb_dc_ep_disable>:
{
    d654:	b538      	push	{r3, r4, r5, lr}
    d656:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    d658:	f7f7 fc76 	bl	4f48 <endpoint_ctx>
	if (!ep_ctx) {
    d65c:	4605      	mov	r5, r0
    d65e:	b160      	cbz	r0, d67a <usb_dc_ep_disable+0x26>
	if (!ep_ctx->cfg.en) {
    d660:	7a03      	ldrb	r3, [r0, #8]
    d662:	b16b      	cbz	r3, d680 <usb_dc_ep_disable+0x2c>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    d664:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
    d666:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    d668:	f7fd fb82 	bl	ad70 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    d66c:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    d66e:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    d670:	f7ff ffd6 	bl	d620 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    d674:	722c      	strb	r4, [r5, #8]
	return 0;
    d676:	4620      	mov	r0, r4
}
    d678:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    d67a:	f06f 0015 	mvn.w	r0, #21
    d67e:	e7fb      	b.n	d678 <usb_dc_ep_disable+0x24>
		return -EALREADY;
    d680:	f06f 0077 	mvn.w	r0, #119	; 0x77
    d684:	e7f8      	b.n	d678 <usb_dc_ep_disable+0x24>

0000d686 <usb_dc_ep_read>:
{
    d686:	b570      	push	{r4, r5, r6, lr}
    d688:	4604      	mov	r4, r0
    d68a:	460e      	mov	r6, r1
    d68c:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    d68e:	f7f8 fa8b 	bl	5ba8 <usb_dc_ep_read_wait>
	if (ret) {
    d692:	b930      	cbnz	r0, d6a2 <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    d694:	b906      	cbnz	r6, d698 <usb_dc_ep_read+0x12>
    d696:	b125      	cbz	r5, d6a2 <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    d698:	4620      	mov	r0, r4
}
    d69a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    d69e:	f7f8 bae9 	b.w	5c74 <usb_dc_ep_read_continue>
}
    d6a2:	bd70      	pop	{r4, r5, r6, pc}

0000d6a4 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    d6a4:	6903      	ldr	r3, [r0, #16]
    d6a6:	b2c9      	uxtb	r1, r1
    d6a8:	220c      	movs	r2, #12
    d6aa:	fb01 3302 	mla	r3, r1, r2, r3
    d6ae:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    d6b0:	f000 0007 	and.w	r0, r0, #7
    d6b4:	4770      	bx	lr

0000d6b6 <set_on_state>:
	__asm__ volatile(
    d6b6:	f04f 0340 	mov.w	r3, #64	; 0x40
    d6ba:	f3ef 8211 	mrs	r2, BASEPRI
    d6be:	f383 8812 	msr	BASEPRI_MAX, r3
    d6c2:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    d6c6:	6803      	ldr	r3, [r0, #0]
    d6c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d6cc:	f043 0302 	orr.w	r3, r3, #2
    d6d0:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    d6d2:	f382 8811 	msr	BASEPRI, r2
    d6d6:	f3bf 8f6f 	isb	sy
}
    d6da:	4770      	bx	lr

0000d6dc <stop>:
{
    d6dc:	b570      	push	{r4, r5, r6, lr}
    d6de:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    d6e0:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    d6e2:	f04f 0440 	mov.w	r4, #64	; 0x40
    d6e6:	f3ef 8511 	mrs	r5, BASEPRI
    d6ea:	f384 8812 	msr	BASEPRI_MAX, r4
    d6ee:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    d6f2:	260c      	movs	r6, #12
    d6f4:	fb06 3401 	mla	r4, r6, r1, r3
    d6f8:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    d6fa:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    d6fe:	d008      	beq.n	d712 <stop+0x36>
    d700:	42a2      	cmp	r2, r4
    d702:	d006      	beq.n	d712 <stop+0x36>
	__asm__ volatile(
    d704:	f385 8811 	msr	BASEPRI, r5
    d708:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    d70c:	f04f 30ff 	mov.w	r0, #4294967295
}
    d710:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    d712:	4371      	muls	r1, r6
    d714:	440b      	add	r3, r1
    d716:	2201      	movs	r2, #1
    d718:	641a      	str	r2, [r3, #64]	; 0x40
    d71a:	f385 8811 	msr	BASEPRI, r5
    d71e:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    d722:	6843      	ldr	r3, [r0, #4]
    d724:	440b      	add	r3, r1
    d726:	685b      	ldr	r3, [r3, #4]
    d728:	4798      	blx	r3
	return 0;
    d72a:	2000      	movs	r0, #0
    d72c:	e7f0      	b.n	d710 <stop+0x34>

0000d72e <api_stop>:
	return stop(dev, subsys, CTX_API);
    d72e:	2280      	movs	r2, #128	; 0x80
    d730:	f7ff bfd4 	b.w	d6dc <stop>

0000d734 <async_start>:
{
    d734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d736:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    d738:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    d73a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    d73c:	f04f 0540 	mov.w	r5, #64	; 0x40
    d740:	f3ef 8611 	mrs	r6, BASEPRI
    d744:	f385 8812 	msr	BASEPRI_MAX, r5
    d748:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    d74c:	250c      	movs	r5, #12
    d74e:	4369      	muls	r1, r5
    d750:	440c      	add	r4, r1
    d752:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    d754:	f005 0c07 	and.w	ip, r5, #7
    d758:	f1bc 0f01 	cmp.w	ip, #1
    d75c:	d10b      	bne.n	d776 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    d75e:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    d760:	f386 8811 	msr	BASEPRI, r6
    d764:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    d768:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    d76c:	6843      	ldr	r3, [r0, #4]
    d76e:	585b      	ldr	r3, [r3, r1]
    d770:	4798      	blx	r3
	return 0;
    d772:	2000      	movs	r0, #0
}
    d774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    d776:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    d77a:	42af      	cmp	r7, r5
    d77c:	f386 8811 	msr	BASEPRI, r6
    d780:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    d784:	bf0c      	ite	eq
    d786:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    d78a:	f04f 30ff 	movne.w	r0, #4294967295
    d78e:	e7f1      	b.n	d774 <async_start+0x40>

0000d790 <api_start>:
{
    d790:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    d792:	2480      	movs	r4, #128	; 0x80
    d794:	9400      	str	r4, [sp, #0]
    d796:	f7ff ffcd 	bl	d734 <async_start>
}
    d79a:	b002      	add	sp, #8
    d79c:	bd10      	pop	{r4, pc}

0000d79e <onoff_started_callback>:
{
    d79e:	b410      	push	{r4}
	return &data->mgr[type];
    d7a0:	6900      	ldr	r0, [r0, #16]
    d7a2:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    d7a4:	241c      	movs	r4, #28
    d7a6:	fb03 0004 	mla	r0, r3, r4, r0
    d7aa:	2100      	movs	r1, #0
}
    d7ac:	bc10      	pop	{r4}
	notify(mgr, 0);
    d7ae:	4710      	bx	r2

0000d7b0 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    d7b0:	2000      	movs	r0, #0
    d7b2:	f000 ba93 	b.w	dcdc <nrfx_clock_start>

0000d7b6 <blocking_start_callback>:
{
    d7b6:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    d7b8:	f7fd bfc0 	b.w	b73c <z_impl_k_sem_give>

0000d7bc <lfclk_stop>:
{
    d7bc:	b508      	push	{r3, lr}
		z_nrf_clock_calibration_lfclk_stopped();
    d7be:	f7f8 fcf3 	bl	61a8 <z_nrf_clock_calibration_lfclk_stopped>
}
    d7c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    d7c6:	2000      	movs	r0, #0
    d7c8:	f000 bac0 	b.w	dd4c <nrfx_clock_stop>

0000d7cc <timeout_handler>:
	start_cal_process();
    d7cc:	f7f8 bc3c 	b.w	6048 <start_cal_process>

0000d7d0 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d7d0:	6843      	ldr	r3, [r0, #4]
    d7d2:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    d7d4:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    d7d8:	600b      	str	r3, [r1, #0]
}
    d7da:	2000      	movs	r0, #0
    d7dc:	4770      	bx	lr

0000d7de <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d7de:	6843      	ldr	r3, [r0, #4]
    d7e0:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    d7e2:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    d7e6:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    d7ea:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    d7ee:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    d7f2:	2000      	movs	r0, #0
    d7f4:	4770      	bx	lr

0000d7f6 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d7f6:	6843      	ldr	r3, [r0, #4]
    d7f8:	685b      	ldr	r3, [r3, #4]
}
    d7fa:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    d7fc:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    d800:	4770      	bx	lr

0000d802 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d802:	6843      	ldr	r3, [r0, #4]
    d804:	685b      	ldr	r3, [r3, #4]
}
    d806:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    d808:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    d80c:	4770      	bx	lr

0000d80e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    d80e:	6843      	ldr	r3, [r0, #4]
    d810:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    d812:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    d816:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    d81a:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    d81c:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    d820:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    d824:	2000      	movs	r0, #0
    d826:	4770      	bx	lr

0000d828 <gpio_nrfx_manage_callback>:
{
    d828:	b510      	push	{r4, lr}
	return port->data;
    d82a:	6903      	ldr	r3, [r0, #16]
	return list->head;
    d82c:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    d82e:	b1f8      	cbz	r0, d870 <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d830:	4288      	cmp	r0, r1
    d832:	d119      	bne.n	d868 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    d834:	689c      	ldr	r4, [r3, #8]
	return node->next;
    d836:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    d838:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    d83a:	42a1      	cmp	r1, r4
    d83c:	d100      	bne.n	d840 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    d83e:	6098      	str	r0, [r3, #8]
	parent->next = child;
    d840:	2000      	movs	r0, #0
    d842:	6008      	str	r0, [r1, #0]
	if (set) {
    d844:	b12a      	cbz	r2, d852 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    d846:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    d848:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    d84a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    d84c:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    d84e:	b902      	cbnz	r2, d852 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    d850:	6099      	str	r1, [r3, #8]
	return 0;
    d852:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    d854:	e010      	b.n	d878 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d856:	4281      	cmp	r1, r0
    d858:	d106      	bne.n	d868 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    d85a:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    d85c:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    d85e:	6898      	ldr	r0, [r3, #8]
    d860:	4281      	cmp	r1, r0
    d862:	d1ed      	bne.n	d840 <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    d864:	609c      	str	r4, [r3, #8]
}
    d866:	e7eb      	b.n	d840 <gpio_nrfx_manage_callback+0x18>
	return node->next;
    d868:	4604      	mov	r4, r0
    d86a:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    d86c:	2800      	cmp	r0, #0
    d86e:	d1f2      	bne.n	d856 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    d870:	2a00      	cmp	r2, #0
    d872:	d1e8      	bne.n	d846 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    d874:	f06f 0015 	mvn.w	r0, #21
}
    d878:	bd10      	pop	{r4, pc}

0000d87a <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    d87a:	b513      	push	{r0, r1, r4, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    d87c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);

	if (length > sizeof(dev_id.id)) {
    d880:	2908      	cmp	r1, #8
    d882:	6e13      	ldr	r3, [r2, #96]	; 0x60
    d884:	6e52      	ldr	r2, [r2, #100]	; 0x64
    d886:	bf28      	it	cs
    d888:	2108      	movcs	r1, #8
    d88a:	ba12      	rev	r2, r2
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    d88c:	9200      	str	r2, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    d88e:	ba1b      	rev	r3, r3
	if (length > sizeof(dev_id.id)) {
    d890:	460c      	mov	r4, r1
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    d892:	460a      	mov	r2, r1
    d894:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    d896:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    d898:	f7ff fe7a 	bl	d590 <memcpy>

	return length;
}
    d89c:	4620      	mov	r0, r4
    d89e:	b002      	add	sp, #8
    d8a0:	bd10      	pop	{r4, pc}

0000d8a2 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    d8a2:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    d8a4:	6843      	ldr	r3, [r0, #4]
    d8a6:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    d8a8:	7a05      	ldrb	r5, [r0, #8]
    d8aa:	6844      	ldr	r4, [r0, #4]
    d8ac:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    d8b0:	42a3      	cmp	r3, r4
    d8b2:	d302      	bcc.n	d8ba <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    d8b4:	f06f 0001 	mvn.w	r0, #1
}
    d8b8:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    d8ba:	795c      	ldrb	r4, [r3, #5]
    d8bc:	428c      	cmp	r4, r1
    d8be:	d001      	beq.n	d8c4 <pinctrl_lookup_state+0x22>
		(*state)++;
    d8c0:	3308      	adds	r3, #8
    d8c2:	e7f0      	b.n	d8a6 <pinctrl_lookup_state+0x4>
			return 0;
    d8c4:	2000      	movs	r0, #0
    d8c6:	e7f7      	b.n	d8b8 <pinctrl_lookup_state+0x16>

0000d8c8 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    d8c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d8cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    d8d0:	2701      	movs	r7, #1
    p_reg->OUTCLR = clr_mask;
    d8d2:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    d8d6:	4281      	cmp	r1, r0
    d8d8:	d101      	bne.n	d8de <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    d8da:	2000      	movs	r0, #0
    d8dc:	e015      	b.n	d90a <pinctrl_configure_pins+0x42>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    d8de:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    d8e0:	f004 037f 	and.w	r3, r4, #127	; 0x7f
			pin = 0xFFFFFFFFU;
    d8e4:	2b7f      	cmp	r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    d8e6:	f3c4 2543 	ubfx	r5, r4, #9, #4
		switch (NRF_GET_FUN(pins[i])) {
    d8ea:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    d8ee:	bf08      	it	eq
    d8f0:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    d8f4:	2c1a      	cmp	r4, #26
    d8f6:	d045      	beq.n	d984 <pinctrl_configure_pins+0xbc>
    d8f8:	d809      	bhi.n	d90e <pinctrl_configure_pins+0x46>
    d8fa:	2c05      	cmp	r4, #5
    d8fc:	d01b      	beq.n	d936 <pinctrl_configure_pins+0x6e>
    d8fe:	2c06      	cmp	r4, #6
    d900:	d01e      	beq.n	d940 <pinctrl_configure_pins+0x78>
    d902:	2c04      	cmp	r4, #4
    d904:	d00a      	beq.n	d91c <pinctrl_configure_pins+0x54>
    d906:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    d90a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (NRF_GET_FUN(pins[i])) {
    d90e:	2c1b      	cmp	r4, #27
    d910:	d03b      	beq.n	d98a <pinctrl_configure_pins+0xc2>
    d912:	2c1c      	cmp	r4, #28
    d914:	d1f7      	bne.n	d906 <pinctrl_configure_pins+0x3e>
			NRF_PSEL_QDEC(reg, LED) = pin;
    d916:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
			if (write != NO_WRITE) {
    d91a:	e013      	b.n	d944 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    d91c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    d920:	f04f 0c00 	mov.w	ip, #0
    *p_pin = pin_number & 0x1F;
    d924:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    d928:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTCLR = clr_mask;
    d92c:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
}
    d930:	f04f 0e01 	mov.w	lr, #1
    d934:	e009      	b.n	d94a <pinctrl_configure_pins+0x82>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    d936:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    d93a:	f04f 0c01 	mov.w	ip, #1
    d93e:	e7f1      	b.n	d924 <pinctrl_configure_pins+0x5c>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    d940:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    d944:	f04f 0c00 	mov.w	ip, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    d948:	46e6      	mov	lr, ip
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    d94a:	f850 4b04 	ldr.w	r4, [r0], #4
    d94e:	f404 5800 	and.w	r8, r4, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    d952:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    d956:	f3c4 18c1 	ubfx	r8, r4, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    d95a:	ea4f 2405 	mov.w	r4, r5, lsl #8
    d95e:	bf18      	it	ne
    d960:	f04f 0e00 	movne.w	lr, #0
    *p_pin = pin_number & 0x1F;
    d964:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    d968:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
    d96c:	bf18      	it	ne
    d96e:	f04f 0c01 	movne.w	ip, #1
    d972:	ea44 040e 	orr.w	r4, r4, lr
    reg->PIN_CNF[pin_number] = cnf;
    d976:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    d97a:	ea44 044c 	orr.w	r4, r4, ip, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    d97e:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    d982:	e7a8      	b.n	d8d6 <pinctrl_configure_pins+0xe>
			NRF_PSEL_QDEC(reg, A) = pin;
    d984:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
			if (write != NO_WRITE) {
    d988:	e7dc      	b.n	d944 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_QDEC(reg, B) = pin;
    d98a:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			if (write != NO_WRITE) {
    d98e:	e7d9      	b.n	d944 <pinctrl_configure_pins+0x7c>

0000d990 <qdec_nrfx_sample_fetch>:
	if ((chan != SENSOR_CHAN_ALL) && (chan != SENSOR_CHAN_ROTATION)) {
    d990:	2939      	cmp	r1, #57	; 0x39
{
    d992:	b507      	push	{r0, r1, r2, lr}
	if ((chan != SENSOR_CHAN_ALL) && (chan != SENSOR_CHAN_ROTATION)) {
    d994:	d001      	beq.n	d99a <qdec_nrfx_sample_fetch+0xa>
    d996:	2922      	cmp	r1, #34	; 0x22
    d998:	d10c      	bne.n	d9b4 <qdec_nrfx_sample_fetch+0x24>
	nrfx_qdec_accumulators_read(&acc, &accdbl);
    d99a:	f10d 0106 	add.w	r1, sp, #6
    d99e:	a801      	add	r0, sp, #4
    d9a0:	f7fc f90e 	bl	9bc0 <nrfx_qdec_accumulators_read>
	accumulate(data, acc);
    d9a4:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
    d9a8:	f7f8 fdb0 	bl	650c <accumulate.constprop.0>
	return 0;
    d9ac:	2000      	movs	r0, #0
}
    d9ae:	b003      	add	sp, #12
    d9b0:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENOTSUP;
    d9b4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    d9b8:	e7f9      	b.n	d9ae <qdec_nrfx_sample_fetch+0x1e>

0000d9ba <irq_connect0>:
		(__attribute__((__section__(LINKER_DT_NODE_REGION_NAME(	       \
			DT_PHANDLE(SPIM(idx), memory_regions)))))),	       \
		())

#ifdef CONFIG_SPI_0_NRF_SPIM
SPI_NRFX_SPIM_DEFINE(0);
    d9ba:	2200      	movs	r2, #0
    d9bc:	2101      	movs	r1, #1
    d9be:	2003      	movs	r0, #3
    d9c0:	f7f6 bb82 	b.w	40c8 <z_arm_irq_priority_set>

0000d9c4 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    d9c4:	b510      	push	{r4, lr}
	while (*count) {
    d9c6:	680b      	ldr	r3, [r1, #0]
    d9c8:	b913      	cbnz	r3, d9d0 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
    d9ca:	6013      	str	r3, [r2, #0]
	return NULL;
    d9cc:	4618      	mov	r0, r3
    d9ce:	e005      	b.n	d9dc <spi_context_get_next_buf.constprop.0+0x18>
		if (((*current)->len / dfs) != 0) {
    d9d0:	6803      	ldr	r3, [r0, #0]
    d9d2:	685c      	ldr	r4, [r3, #4]
    d9d4:	b11c      	cbz	r4, d9de <spi_context_get_next_buf.constprop.0+0x1a>
			*buf_len = (*current)->len / dfs;
    d9d6:	6014      	str	r4, [r2, #0]
			return (*current)->buf;
    d9d8:	6803      	ldr	r3, [r0, #0]
    d9da:	6818      	ldr	r0, [r3, #0]
}
    d9dc:	bd10      	pop	{r4, pc}
		++(*current);
    d9de:	3308      	adds	r3, #8
    d9e0:	6003      	str	r3, [r0, #0]
		--(*count);
    d9e2:	680b      	ldr	r3, [r1, #0]
    d9e4:	3b01      	subs	r3, #1
    d9e6:	600b      	str	r3, [r1, #0]
    d9e8:	e7ed      	b.n	d9c6 <spi_context_get_next_buf.constprop.0+0x2>

0000d9ea <z_log_msg_static_create.constprop.0>:
    d9ea:	2300      	movs	r3, #0
    d9ec:	f7f4 bf06 	b.w	27fc <z_impl_z_log_msg_static_create>

0000d9f0 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    d9f0:	4603      	mov	r3, r0
    d9f2:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    d9f4:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    d9f6:	7919      	ldrb	r1, [r3, #4]
    d9f8:	2301      	movs	r3, #1
    d9fa:	fa03 f101 	lsl.w	r1, r3, r1
    d9fe:	6903      	ldr	r3, [r0, #16]
    da00:	681b      	ldr	r3, [r3, #0]
    da02:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    da04:	bf18      	it	ne
    da06:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    da0a:	b112      	cbz	r2, da12 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    da0c:	6883      	ldr	r3, [r0, #8]
    da0e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    da10:	4718      	bx	r3
    da12:	6883      	ldr	r3, [r0, #8]
    da14:	691b      	ldr	r3, [r3, #16]
    da16:	e7fb      	b.n	da10 <gpio_pin_set_dt.isra.0+0x20>

0000da18 <_spi_context_cs_control>:
{
    da18:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    da1a:	6803      	ldr	r3, [r0, #0]
{
    da1c:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    da1e:	b1e3      	cbz	r3, da5a <_spi_context_cs_control+0x42>
    da20:	6898      	ldr	r0, [r3, #8]
    da22:	b1d0      	cbz	r0, da5a <_spi_context_cs_control+0x42>
    da24:	6805      	ldr	r5, [r0, #0]
    da26:	b1c5      	cbz	r5, da5a <_spi_context_cs_control+0x42>
		if (on) {
    da28:	b149      	cbz	r1, da3e <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    da2a:	2101      	movs	r1, #1
    da2c:	f7ff ffe0 	bl	d9f0 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    da30:	6823      	ldr	r3, [r4, #0]
    da32:	689b      	ldr	r3, [r3, #8]
    da34:	6898      	ldr	r0, [r3, #8]
}
    da36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    da3a:	f000 bd87 	b.w	e54c <z_impl_k_busy_wait>
			if (!force_off &&
    da3e:	b912      	cbnz	r2, da46 <_spi_context_cs_control+0x2e>
    da40:	889b      	ldrh	r3, [r3, #4]
    da42:	04db      	lsls	r3, r3, #19
    da44:	d409      	bmi.n	da5a <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
    da46:	6880      	ldr	r0, [r0, #8]
    da48:	f000 fd80 	bl	e54c <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    da4c:	6823      	ldr	r3, [r4, #0]
    da4e:	2100      	movs	r1, #0
    da50:	6898      	ldr	r0, [r3, #8]
}
    da52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    da56:	f7ff bfcb 	b.w	d9f0 <gpio_pin_set_dt.isra.0>
}
    da5a:	bd38      	pop	{r3, r4, r5, pc}

0000da5c <spi_context_unlock_unconditionally>:
{
    da5c:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    da5e:	2201      	movs	r2, #1
    da60:	2100      	movs	r1, #0
{
    da62:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    da64:	f7ff ffd8 	bl	da18 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    da68:	69a3      	ldr	r3, [r4, #24]
    da6a:	b933      	cbnz	r3, da7a <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    da6c:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    da6e:	f104 0010 	add.w	r0, r4, #16
}
    da72:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    da76:	f7fd be61 	b.w	b73c <z_impl_k_sem_give>
    da7a:	bd10      	pop	{r4, pc}

0000da7c <spi_nrfx_release>:
{
    da7c:	b510      	push	{r4, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    da7e:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    da80:	6803      	ldr	r3, [r0, #0]
    da82:	428b      	cmp	r3, r1
    da84:	d106      	bne.n	da94 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    da86:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
    da8a:	b934      	cbnz	r4, da9a <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    da8c:	f7ff ffe6 	bl	da5c <spi_context_unlock_unconditionally>
	return 0;
    da90:	4620      	mov	r0, r4
}
    da92:	bd10      	pop	{r4, pc}
		return -EINVAL;
    da94:	f06f 0015 	mvn.w	r0, #21
    da98:	e7fb      	b.n	da92 <spi_nrfx_release+0x16>
		return -EBUSY;
    da9a:	f06f 000f 	mvn.w	r0, #15
    da9e:	e7f8      	b.n	da92 <spi_nrfx_release+0x16>

0000daa0 <finish_transaction.isra.0>:
static void finish_transaction(const struct device *dev, int error)
    daa0:	b538      	push	{r3, r4, r5, lr}
	_spi_context_cs_control(ctx, on, false);
    daa2:	2200      	movs	r2, #0
    daa4:	4604      	mov	r4, r0
    daa6:	460d      	mov	r5, r1
    daa8:	4611      	mov	r1, r2
    daaa:	f7ff ffb5 	bl	da18 <_spi_context_cs_control>
	ctx->sync_status = status;
    daae:	6325      	str	r5, [r4, #48]	; 0x30
    dab0:	f104 0020 	add.w	r0, r4, #32
    dab4:	f7fd fe42 	bl	b73c <z_impl_k_sem_give>
	dev_data->busy = false;
    dab8:	2300      	movs	r3, #0
    daba:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
}
    dabe:	bd38      	pop	{r3, r4, r5, pc}

0000dac0 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    dac0:	4770      	bx	lr

0000dac2 <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    dac2:	f100 0350 	add.w	r3, r0, #80	; 0x50
    dac6:	009b      	lsls	r3, r3, #2
    dac8:	b29b      	uxth	r3, r3
    daca:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    dace:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    dad2:	2200      	movs	r2, #0
    dad4:	601a      	str	r2, [r3, #0]
    dad6:	681b      	ldr	r3, [r3, #0]
}
    dad8:	4770      	bx	lr

0000dada <sys_clock_cycle_get_32>:
{
    dada:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    dadc:	f7f9 f9b4 	bl	6e48 <z_nrf_rtc_timer_read>
}
    dae0:	bd08      	pop	{r3, pc}

0000dae2 <bytewise_bit_swap>:
	uint32_t inp = (*(uint32_t *)input);
    dae2:	6803      	ldr	r3, [r0, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    dae4:	fa93 f3a3 	rbit	r3, r3
	return sys_cpu_to_be32((uint32_t)__RBIT(inp));
    dae8:	0618      	lsls	r0, r3, #24
    daea:	0a1a      	lsrs	r2, r3, #8
    daec:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
    daf0:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    daf4:	021b      	lsls	r3, r3, #8
    daf6:	4310      	orrs	r0, r2
    daf8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
}
    dafc:	4318      	orrs	r0, r3
    dafe:	4770      	bx	lr

0000db00 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
    db00:	b508      	push	{r3, lr}

	mpsl_fem_init();
    db02:	f7f2 fdc6 	bl	692 <mpsl_fem_init>

	return 0;
}
    db06:	2000      	movs	r0, #0
    db08:	bd08      	pop	{r3, pc}

0000db0a <gpio_pin_interrupt_configure_dt>:
{
    db0a:	b430      	push	{r4, r5}
    db0c:	4603      	mov	r3, r0
    db0e:	460a      	mov	r2, r1
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
    db10:	6800      	ldr	r0, [r0, #0]
    db12:	7919      	ldrb	r1, [r3, #4]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    db14:	0213      	lsls	r3, r2, #8
	const struct gpio_driver_api *api =
    db16:	6884      	ldr	r4, [r0, #8]
	const struct gpio_driver_data *const data =
    db18:	6905      	ldr	r5, [r0, #16]
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    db1a:	d506      	bpl.n	db2a <gpio_pin_interrupt_configure_dt+0x20>
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
    db1c:	682d      	ldr	r5, [r5, #0]
    db1e:	2301      	movs	r3, #1
    db20:	408b      	lsls	r3, r1
	if (((flags & GPIO_INT_LEVELS_LOGICAL) != 0) &&
    db22:	422b      	tst	r3, r5
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
    db24:	bf18      	it	ne
    db26:	f082 62c0 	eorne.w	r2, r2, #100663296	; 0x6000000
	return api->pin_interrupt_configure(port, pin, mode, trig);
    db2a:	69a4      	ldr	r4, [r4, #24]
    db2c:	f002 63c0 	and.w	r3, r2, #100663296	; 0x6000000
    db30:	46a4      	mov	ip, r4
    db32:	f002 72b0 	and.w	r2, r2, #23068672	; 0x1600000
}
    db36:	bc30      	pop	{r4, r5}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    db38:	4760      	bx	ip

0000db3a <gpio_pin_configure_dt>:
{
    db3a:	b4f0      	push	{r4, r5, r6, r7}
    db3c:	4603      	mov	r3, r0
    db3e:	460a      	mov	r2, r1
				  spec->pin,
    db40:	7919      	ldrb	r1, [r3, #4]
				  spec->dt_flags | extra_flags);
    db42:	88db      	ldrh	r3, [r3, #6]
	return gpio_pin_configure(spec->port,
    db44:	6800      	ldr	r0, [r0, #0]
    db46:	4313      	orrs	r3, r2
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    db48:	02dc      	lsls	r4, r3, #11
	const struct gpio_driver_api *api =
    db4a:	6887      	ldr	r7, [r0, #8]
	struct gpio_driver_data *data =
    db4c:	6906      	ldr	r6, [r0, #16]
	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
    db4e:	d506      	bpl.n	db5e <gpio_pin_configure_dt+0x24>
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
    db50:	f413 2f40 	tst.w	r3, #786432	; 0xc0000
    db54:	d003      	beq.n	db5e <gpio_pin_configure_dt+0x24>
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    db56:	07da      	lsls	r2, r3, #31
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    db58:	bf48      	it	mi
    db5a:	f483 2340 	eormi.w	r3, r3, #786432	; 0xc0000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    db5e:	6834      	ldr	r4, [r6, #0]
    db60:	2501      	movs	r5, #1
    db62:	408d      	lsls	r5, r1
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    db64:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    db68:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    db6a:	bf4c      	ite	mi
    db6c:	432c      	orrmi	r4, r5
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    db6e:	43ac      	bicpl	r4, r5
    db70:	6034      	str	r4, [r6, #0]
	return api->pin_configure(port, pin, flags);
    db72:	683b      	ldr	r3, [r7, #0]
}
    db74:	bcf0      	pop	{r4, r5, r6, r7}
	return api->pin_configure(port, pin, flags);
    db76:	4718      	bx	r3

0000db78 <spi_write_dt>:
 *
 * @return a value from spi_write().
 */
static inline int spi_write_dt(const struct spi_dt_spec *spec,
			       const struct spi_buf_set *tx_bufs)
{
    db78:	b410      	push	{r4}
    db7a:	460a      	mov	r2, r1
	return spi_write(spec->bus, &spec->config, tx_bufs);
    db7c:	4601      	mov	r1, r0
    db7e:	f851 0b04 	ldr.w	r0, [r1], #4
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    db82:	6883      	ldr	r3, [r0, #8]
    db84:	681c      	ldr	r4, [r3, #0]
    db86:	2300      	movs	r3, #0
    db88:	46a4      	mov	ip, r4
}
    db8a:	bc10      	pop	{r4}
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    db8c:	4760      	bx	ip

0000db8e <pmw3360_channel_get>:
	struct pmw3360_data *data = dev->data;
    db8e:	6903      	ldr	r3, [r0, #16]
	if (unlikely(!data->ready)) {
    db90:	f893 0060 	ldrb.w	r0, [r3, #96]	; 0x60
    db94:	b178      	cbz	r0, dbb6 <pmw3360_channel_get+0x28>
	switch (chan) {
    db96:	2923      	cmp	r1, #35	; 0x23
    db98:	d004      	beq.n	dba4 <pmw3360_channel_get+0x16>
    db9a:	2924      	cmp	r1, #36	; 0x24
    db9c:	d008      	beq.n	dbb0 <pmw3360_channel_get+0x22>
    db9e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    dba2:	4770      	bx	lr
		val->val1 = data->x;
    dba4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
    dba8:	6013      	str	r3, [r2, #0]
		val->val2 = 0;
    dbaa:	2000      	movs	r0, #0
    dbac:	6050      	str	r0, [r2, #4]
    dbae:	4770      	bx	lr
		val->val1 = data->y;
    dbb0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
		break;
    dbb4:	e7f8      	b.n	dba8 <pmw3360_channel_get+0x1a>
		return -EBUSY;
    dbb6:	f06f 000f 	mvn.w	r0, #15
}
    dbba:	4770      	bx	lr

0000dbbc <pmw3360_trigger_set>:
{
    dbbc:	b570      	push	{r4, r5, r6, lr}
	if (unlikely(trig->type != SENSOR_TRIG_DATA_READY)) {
    dbbe:	880b      	ldrh	r3, [r1, #0]
    dbc0:	2b01      	cmp	r3, #1
{
    dbc2:	4614      	mov	r4, r2
	if (unlikely(trig->type != SENSOR_TRIG_DATA_READY)) {
    dbc4:	d11e      	bne.n	dc04 <pmw3360_trigger_set+0x48>
	if (unlikely(trig->chan != SENSOR_CHAN_ALL)) {
    dbc6:	884b      	ldrh	r3, [r1, #2]
    dbc8:	2b39      	cmp	r3, #57	; 0x39
    dbca:	d11b      	bne.n	dc04 <pmw3360_trigger_set+0x48>
	struct pmw3360_data *data = dev->data;
    dbcc:	6905      	ldr	r5, [r0, #16]
	if (unlikely(!data->ready)) {
    dbce:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    dbd2:	b1d3      	cbz	r3, dc0a <pmw3360_trigger_set+0x4e>
	const struct pmw3360_config *config = dev->config;
    dbd4:	6840      	ldr	r0, [r0, #4]
	__asm__ volatile(
    dbd6:	f04f 0340 	mov.w	r3, #64	; 0x40
    dbda:	f3ef 8611 	mrs	r6, BASEPRI
    dbde:	f383 8812 	msr	BASEPRI_MAX, r3
    dbe2:	f3bf 8f6f 	isb	sy
	if (handler) {
    dbe6:	b152      	cbz	r2, dbfe <pmw3360_trigger_set+0x42>
		err = gpio_pin_interrupt_configure_dt(&config->irq_gpio,
    dbe8:	f04f 6198 	mov.w	r1, #79691776	; 0x4c00000
		err = gpio_pin_interrupt_configure_dt(&config->irq_gpio,
    dbec:	f7ff ff8d 	bl	db0a <gpio_pin_interrupt_configure_dt>
	if (!err) {
    dbf0:	b900      	cbnz	r0, dbf4 <pmw3360_trigger_set+0x38>
		data->data_ready_handler = handler;
    dbf2:	616c      	str	r4, [r5, #20]
	__asm__ volatile(
    dbf4:	f386 8811 	msr	BASEPRI, r6
    dbf8:	f3bf 8f6f 	isb	sy
}
    dbfc:	bd70      	pop	{r4, r5, r6, pc}
		err = gpio_pin_interrupt_configure_dt(&config->irq_gpio,
    dbfe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    dc02:	e7f3      	b.n	dbec <pmw3360_trigger_set+0x30>
		return -ENOTSUP;
    dc04:	f06f 0085 	mvn.w	r0, #133	; 0x85
    dc08:	e7f8      	b.n	dbfc <pmw3360_trigger_set+0x40>
		return -EBUSY;
    dc0a:	f06f 000f 	mvn.w	r0, #15
    dc0e:	e7f5      	b.n	dbfc <pmw3360_trigger_set+0x40>

0000dc10 <k_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    dc10:	f000 bc9c 	b.w	e54c <z_impl_k_busy_wait>

0000dc14 <z_log_msg_static_create.constprop.0>:
    dc14:	2300      	movs	r3, #0
    dc16:	f7f4 bdf1 	b.w	27fc <z_impl_z_log_msg_static_create>

0000dc1a <pmw3360_async_init_power_up>:
	return reg_write(dev, PMW3360_REG_POWER_UP_RESET, 0x5A);
    dc1a:	225a      	movs	r2, #90	; 0x5a
    dc1c:	213a      	movs	r1, #58	; 0x3a
    dc1e:	f7fa bd73 	b.w	8708 <reg_write>

0000dc22 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    dc22:	4700      	bx	r0

0000dc24 <nrfx_busy_wait>:
    dc24:	f000 bc92 	b.w	e54c <z_impl_k_busy_wait>

0000dc28 <clock_stop>:
{
    dc28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    dc2a:	4604      	mov	r4, r0
    dc2c:	b118      	cbz	r0, dc36 <clock_stop+0xe>
    dc2e:	2801      	cmp	r0, #1
    dc30:	d020      	beq.n	dc74 <clock_stop+0x4c>
}
    dc32:	b003      	add	sp, #12
    dc34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    dc36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dc3a:	2202      	movs	r2, #2
    dc3c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dc40:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    dc44:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dc48:	2201      	movs	r2, #1
    dc4a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    dc4c:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    dc4e:	2301      	movs	r3, #1
    dc50:	f88d 3007 	strb.w	r3, [sp, #7]
    dc54:	f242 7510 	movw	r5, #10000	; 0x2710
    dc58:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    dc5c:	b1bc      	cbz	r4, dc8e <clock_stop+0x66>
    dc5e:	2c01      	cmp	r4, #1
    dc60:	d1e7      	bne.n	dc32 <clock_stop+0xa>
            if (p_clk_src != NULL)
    dc62:	b38f      	cbz	r7, dcc8 <clock_stop+0xa0>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    dc64:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    dc68:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    dc6c:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    dc6e:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    dc72:	e014      	b.n	dc9e <clock_stop+0x76>
    p_reg->INTENCLR = mask;
    dc74:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dc78:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    dc7a:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dc7e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    dc82:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dc86:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    dc88:	f10d 0707 	add.w	r7, sp, #7
    dc8c:	e7df      	b.n	dc4e <clock_stop+0x26>
            if (p_clk_src != NULL)
    dc8e:	b18f      	cbz	r7, dcb4 <clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    dc90:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    dc94:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    dc98:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    dc9a:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    dc9e:	03da      	lsls	r2, r3, #15
    dca0:	d5c7      	bpl.n	dc32 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    dca2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    dca6:	2801      	cmp	r0, #1
    dca8:	d1c3      	bne.n	dc32 <clock_stop+0xa>
    dcaa:	f7ff ffbb 	bl	dc24 <nrfx_busy_wait>
    dcae:	3d01      	subs	r5, #1
    dcb0:	d1d4      	bne.n	dc5c <clock_stop+0x34>
    dcb2:	e7be      	b.n	dc32 <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    dcb4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    dcb8:	03d9      	lsls	r1, r3, #15
    dcba:	d5ba      	bpl.n	dc32 <clock_stop+0xa>
    dcbc:	2001      	movs	r0, #1
    dcbe:	f7ff ffb1 	bl	dc24 <nrfx_busy_wait>
    dcc2:	3d01      	subs	r5, #1
    dcc4:	d1f6      	bne.n	dcb4 <clock_stop+0x8c>
    dcc6:	e7b4      	b.n	dc32 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    dcc8:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    dccc:	03db      	lsls	r3, r3, #15
    dcce:	d5b0      	bpl.n	dc32 <clock_stop+0xa>
    dcd0:	2001      	movs	r0, #1
    dcd2:	f7ff ffa7 	bl	dc24 <nrfx_busy_wait>
    dcd6:	3d01      	subs	r5, #1
    dcd8:	d1f6      	bne.n	dcc8 <clock_stop+0xa0>
    dcda:	e7aa      	b.n	dc32 <clock_stop+0xa>

0000dcdc <nrfx_clock_start>:
{
    dcdc:	b508      	push	{r3, lr}
    switch (domain)
    dcde:	b110      	cbz	r0, dce6 <nrfx_clock_start+0xa>
    dce0:	2801      	cmp	r0, #1
    dce2:	d028      	beq.n	dd36 <nrfx_clock_start+0x5a>
}
    dce4:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    dce6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dcea:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    dcee:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    dcf2:	03c9      	lsls	r1, r1, #15
    dcf4:	d40b      	bmi.n	dd0e <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    dcf6:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    dcfa:	07d0      	lsls	r0, r2, #31
    dcfc:	d50c      	bpl.n	dd18 <nrfx_clock_start+0x3c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    dcfe:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
    if (!is_correct_clk)
    dd02:	0792      	lsls	r2, r2, #30
    dd04:	d105      	bne.n	dd12 <nrfx_clock_start+0x36>
    p_reg->INTENSET = mask;
    dd06:	2202      	movs	r2, #2
    dd08:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    dd0c:	e7ea      	b.n	dce4 <nrfx_clock_start+0x8>
    if (!is_correct_clk)
    dd0e:	0791      	lsls	r1, r2, #30
    dd10:	d002      	beq.n	dd18 <nrfx_clock_start+0x3c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    dd12:	2000      	movs	r0, #0
    dd14:	f7ff ff88 	bl	dc28 <clock_stop>
    p_reg->LFCLKSRC = (uint32_t)(source);
    dd18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dd1c:	2200      	movs	r2, #0
    dd1e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dd22:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    dd26:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    dd2a:	2202      	movs	r2, #2
    dd2c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dd30:	2201      	movs	r2, #1
    dd32:	609a      	str	r2, [r3, #8]
}
    dd34:	e7d6      	b.n	dce4 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dd36:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dd3a:	2200      	movs	r2, #0
    dd3c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    dd40:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    dd44:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    dd48:	6018      	str	r0, [r3, #0]
}
    dd4a:	e7cb      	b.n	dce4 <nrfx_clock_start+0x8>

0000dd4c <nrfx_clock_stop>:
    clock_stop(domain);
    dd4c:	f7ff bf6c 	b.w	dc28 <clock_stop>

0000dd50 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    dd50:	f000 001f 	and.w	r0, r0, #31
    dd54:	0080      	lsls	r0, r0, #2
    dd56:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    dd5a:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    dd5e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    dd62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    dd66:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    dd6a:	4770      	bx	lr

0000dd6c <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dd6c:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    dd70:	681a      	ldr	r2, [r3, #0]
    dd72:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    dd74:	bf1f      	itttt	ne
    dd76:	2200      	movne	r2, #0
    dd78:	601a      	strne	r2, [r3, #0]
    dd7a:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    dd7c:	2001      	movne	r0, #1
    dd7e:	bf08      	it	eq
    dd80:	2000      	moveq	r0, #0
}
    dd82:	4770      	bx	lr

0000dd84 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    dd84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dd88:	f44f 7260 	mov.w	r2, #896	; 0x380
    dd8c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    dd90:	4770      	bx	lr

0000dd92 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    dd92:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    dd96:	f44f 7260 	mov.w	r2, #896	; 0x380
    dd9a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    dd9e:	4770      	bx	lr

0000dda0 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    dda0:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    dda2:	f7fb fdb9 	bl	9918 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    dda6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    ddaa:	f7fb ba17 	b.w	91dc <nrfx_clock_irq_handler>

0000ddae <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    ddae:	1c43      	adds	r3, r0, #1
    ddb0:	d008      	beq.n	ddc4 <spim_pin_uninit+0x16>
    *p_pin = pin_number & 0x1F;
    ddb2:	f000 001f 	and.w	r0, r0, #31
    reg->PIN_CNF[pin_number] = cnf;
    ddb6:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    ddba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    ddbe:	2202      	movs	r2, #2
    ddc0:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    ddc4:	4770      	bx	lr

0000ddc6 <nrf_gpio_pin_write>:
    *p_pin = pin_number & 0x1F;
    ddc6:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    ddca:	2301      	movs	r3, #1
    ddcc:	4083      	lsls	r3, r0
    ddce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    if (value == 0)
    ddd2:	b911      	cbnz	r1, ddda <nrf_gpio_pin_write+0x14>
    p_reg->OUTCLR = clr_mask;
    ddd4:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    ddd8:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
    ddda:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    ddde:	4770      	bx	lr

0000dde0 <set_ss_pin_state>:
{
    dde0:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    dde2:	7fc0      	ldrb	r0, [r0, #31]
    dde4:	28ff      	cmp	r0, #255	; 0xff
    dde6:	d006      	beq.n	ddf6 <set_ss_pin_state+0x16>
                           p_cb->ss_active_high ? active : !active);
    dde8:	7f9b      	ldrb	r3, [r3, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
    ddea:	079b      	lsls	r3, r3, #30
    ddec:	bf58      	it	pl
    ddee:	f081 0101 	eorpl.w	r1, r1, #1
    ddf2:	f7ff bfe8 	b.w	ddc6 <nrf_gpio_pin_write>
}
    ddf6:	4770      	bx	lr

0000ddf8 <nrfx_timer_compare>:
{
    ddf8:	b570      	push	{r4, r5, r6, lr}
    return (nrf_timer_int_mask_t)
    ddfa:	f44f 3480 	mov.w	r4, #65536	; 0x10000
        nrf_timer_event_clear(p_instance->p_reg, nrf_timer_compare_event_get(cc_channel));
    ddfe:	6805      	ldr	r5, [r0, #0]
    de00:	408c      	lsls	r4, r1
    if (enable_int)
    de02:	b173      	cbz	r3, de22 <nrfx_timer_compare+0x2a>
    return (nrf_timer_event_t)NRFX_OFFSETOF(NRF_TIMER_Type, EVENTS_COMPARE[channel]);
    de04:	008b      	lsls	r3, r1, #2
    de06:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    de0a:	2600      	movs	r6, #0
    de0c:	50ee      	str	r6, [r5, r3]
    de0e:	58eb      	ldr	r3, [r5, r3]
        nrf_timer_int_enable(p_instance->p_reg, timer_int);
    de10:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENSET = mask;
    de12:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    nrf_timer_cc_set(p_instance->p_reg, cc_channel, cc_value);
    de16:	6803      	ldr	r3, [r0, #0]
    p_reg->CC[cc_channel] = cc_value;
    de18:	f501 71a8 	add.w	r1, r1, #336	; 0x150
    de1c:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
    de20:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    de22:	f8c5 4308 	str.w	r4, [r5, #776]	; 0x308
}
    de26:	e7f6      	b.n	de16 <nrfx_timer_compare+0x1e>

0000de28 <nrfx_usbd_consumer>:
{
    de28:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    de2a:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    de2c:	429c      	cmp	r4, r3
    de2e:	d209      	bcs.n	de44 <nrfx_usbd_consumer+0x1c>
        p_next->size = 0;
    de30:	2500      	movs	r5, #0
    de32:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    de34:	6809      	ldr	r1, [r1, #0]
    de36:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
    de38:	429a      	cmp	r2, r3
    de3a:	d10c      	bne.n	de56 <nrfx_usbd_consumer+0x2e>
    de3c:	1e20      	subs	r0, r4, #0
    de3e:	bf18      	it	ne
    de40:	2001      	movne	r0, #1
}
    de42:	bd30      	pop	{r4, r5, pc}
        p_next->size = data_size;
    de44:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    de46:	680d      	ldr	r5, [r1, #0]
    de48:	6005      	str	r5, [r0, #0]
        p_transfer->p_data.addr += data_size;
    de4a:	6808      	ldr	r0, [r1, #0]
        size -= data_size;
    de4c:	1ae4      	subs	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    de4e:	4418      	add	r0, r3
        p_transfer->size = size;
    de50:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    de52:	6008      	str	r0, [r1, #0]
    de54:	e7f0      	b.n	de38 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
    de56:	2000      	movs	r0, #0
    de58:	e7f3      	b.n	de42 <nrfx_usbd_consumer+0x1a>

0000de5a <nrfx_usbd_feeder_ram>:
    if (tx_size > ep_size)
    de5a:	684b      	ldr	r3, [r1, #4]
    de5c:	429a      	cmp	r2, r3
    de5e:	bf28      	it	cs
    de60:	461a      	movcs	r2, r3
    p_next->p_data = p_transfer->p_data;
    de62:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    de64:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    de68:	6848      	ldr	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    de6a:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    de6c:	1a80      	subs	r0, r0, r2
    de6e:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    de70:	4413      	add	r3, r2
}
    de72:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    de74:	600b      	str	r3, [r1, #0]
}
    de76:	bf18      	it	ne
    de78:	2001      	movne	r0, #1
    de7a:	4770      	bx	lr

0000de7c <nrfx_usbd_feeder_ram_zlp>:
    if (tx_size > ep_size)
    de7c:	684b      	ldr	r3, [r1, #4]
    de7e:	429a      	cmp	r2, r3
    de80:	bf28      	it	cs
    de82:	461a      	movcs	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    de84:	b162      	cbz	r2, dea0 <nrfx_usbd_feeder_ram_zlp+0x24>
    de86:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    de88:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    de8c:	684b      	ldr	r3, [r1, #4]
    de8e:	1a9b      	subs	r3, r3, r2
    de90:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    de92:	680b      	ldr	r3, [r1, #0]
}
    de94:	1e10      	subs	r0, r2, #0
    p_transfer->p_data.addr += tx_size;
    de96:	4413      	add	r3, r2
    de98:	600b      	str	r3, [r1, #0]
}
    de9a:	bf18      	it	ne
    de9c:	2001      	movne	r0, #1
    de9e:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    dea0:	4613      	mov	r3, r2
    dea2:	e7f1      	b.n	de88 <nrfx_usbd_feeder_ram_zlp+0xc>

0000dea4 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    dea4:	43c3      	mvns	r3, r0
    dea6:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    deaa:	f000 000f 	and.w	r0, r0, #15
}
    deae:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    deb2:	4770      	bx	lr

0000deb4 <ev_started_handler>:
}
    deb4:	4770      	bx	lr

0000deb6 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    deb6:	2087      	movs	r0, #135	; 0x87
    deb8:	f7fc b9c4 	b.w	a244 <nrf_usbd_epin_dma_handler>

0000debc <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    debc:	2086      	movs	r0, #134	; 0x86
    debe:	f7fc b9c1 	b.w	a244 <nrf_usbd_epin_dma_handler>

0000dec2 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    dec2:	2085      	movs	r0, #133	; 0x85
    dec4:	f7fc b9be 	b.w	a244 <nrf_usbd_epin_dma_handler>

0000dec8 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    dec8:	2084      	movs	r0, #132	; 0x84
    deca:	f7fc b9bb 	b.w	a244 <nrf_usbd_epin_dma_handler>

0000dece <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    dece:	2083      	movs	r0, #131	; 0x83
    ded0:	f7fc b9b8 	b.w	a244 <nrf_usbd_epin_dma_handler>

0000ded4 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    ded4:	2082      	movs	r0, #130	; 0x82
    ded6:	f7fc b9b5 	b.w	a244 <nrf_usbd_epin_dma_handler>

0000deda <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    deda:	2081      	movs	r0, #129	; 0x81
    dedc:	f7fc b9b2 	b.w	a244 <nrf_usbd_epin_dma_handler>

0000dee0 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    dee0:	f7fc b9cc 	b.w	a27c <nrf_usbd_ep0in_dma_handler>

0000dee4 <nrfx_usbd_ep_max_packet_size_set>:
{
    dee4:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    dee6:	f7fc f8a3 	bl	a030 <ep_state_access>
    p_state->max_packet_size = size;
    deea:	8181      	strh	r1, [r0, #12]
}
    deec:	bd08      	pop	{r3, pc}

0000deee <nrfx_usbd_ep_status_get>:
{
    deee:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    def0:	f7fc f89e 	bl	a030 <ep_state_access>
	__asm__ volatile(
    def4:	f04f 0240 	mov.w	r2, #64	; 0x40
    def8:	f3ef 8311 	mrs	r3, BASEPRI
    defc:	f382 8812 	msr	BASEPRI_MAX, r2
    df00:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    df04:	6882      	ldr	r2, [r0, #8]
    df06:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    df08:	6802      	ldr	r2, [r0, #0]
    df0a:	b92a      	cbnz	r2, df18 <nrfx_usbd_ep_status_get+0x2a>
    df0c:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    df0e:	f383 8811 	msr	BASEPRI, r3
    df12:	f3bf 8f6f 	isb	sy
}
    df16:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    df18:	2004      	movs	r0, #4
    df1a:	e7f8      	b.n	df0e <nrfx_usbd_ep_status_get+0x20>

0000df1c <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    df1c:	2007      	movs	r0, #7
    df1e:	f7fc bce5 	b.w	a8ec <nrf_usbd_epout_dma_handler>

0000df22 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    df22:	2006      	movs	r0, #6
    df24:	f7fc bce2 	b.w	a8ec <nrf_usbd_epout_dma_handler>

0000df28 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    df28:	2005      	movs	r0, #5
    df2a:	f7fc bcdf 	b.w	a8ec <nrf_usbd_epout_dma_handler>

0000df2e <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    df2e:	2004      	movs	r0, #4
    df30:	f7fc bcdc 	b.w	a8ec <nrf_usbd_epout_dma_handler>

0000df34 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    df34:	2003      	movs	r0, #3
    df36:	f7fc bcd9 	b.w	a8ec <nrf_usbd_epout_dma_handler>

0000df3a <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    df3a:	2002      	movs	r0, #2
    df3c:	f7fc bcd6 	b.w	a8ec <nrf_usbd_epout_dma_handler>

0000df40 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    df40:	2001      	movs	r0, #1
    df42:	f7fc bcd3 	b.w	a8ec <nrf_usbd_epout_dma_handler>

0000df46 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    df46:	f7fc bdcd 	b.w	aae4 <usbd_ep_abort>

0000df4a <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    df4a:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    df4c:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    df4e:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    df50:	bf9c      	itt	ls
    df52:	6881      	ldrls	r1, [r0, #8]
    df54:	185b      	addls	r3, r3, r1
    r = RdOff - WrOff - 1u;
    df56:	3b01      	subs	r3, #1
    df58:	1a98      	subs	r0, r3, r2
}
    df5a:	4770      	bx	lr

0000df5c <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    df5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    df60:	e9d0 8402 	ldrd	r8, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    df64:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    df66:	eba8 0604 	sub.w	r6, r8, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    df6a:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    df6c:	4296      	cmp	r6, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    df6e:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    df70:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    df72:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    df74:	d904      	bls.n	df80 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    df76:	f7ff fb0b 	bl	d590 <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    df7a:	60ec      	str	r4, [r5, #12]
}
    df7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    df80:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
    df82:	eba4 0408 	sub.w	r4, r4, r8
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    df86:	f7ff fb03 	bl	d590 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    df8a:	6868      	ldr	r0, [r5, #4]
    df8c:	4622      	mov	r2, r4
    df8e:	19b9      	adds	r1, r7, r6
    df90:	e7f1      	b.n	df76 <_WriteNoCheck+0x1a>

0000df92 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    df92:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    df96:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    df98:	4606      	mov	r6, r0
    df9a:	4689      	mov	r9, r1
    df9c:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    df9e:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    dfa2:	6933      	ldr	r3, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    dfa4:	68b4      	ldr	r4, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    dfa6:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    dfa8:	429d      	cmp	r5, r3
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    dfaa:	bf28      	it	cs
    dfac:	191b      	addcs	r3, r3, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    dfae:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    dfb0:	42bc      	cmp	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    dfb2:	f103 33ff 	add.w	r3, r3, #4294967295
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    dfb6:	bf28      	it	cs
    dfb8:	463c      	movcs	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    dfba:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    dfbc:	429c      	cmp	r4, r3
    dfbe:	bf28      	it	cs
    dfc0:	461c      	movcs	r4, r3
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    dfc2:	4649      	mov	r1, r9
    dfc4:	4428      	add	r0, r5
    dfc6:	4622      	mov	r2, r4
    dfc8:	f7ff fae2 	bl	d590 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    dfcc:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    dfce:	4425      	add	r5, r4
      WrOff = 0u;
    dfd0:	42ab      	cmp	r3, r5
    dfd2:	bf08      	it	eq
    dfd4:	2500      	moveq	r5, #0
  } while (NumBytes);
    dfd6:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    dfd8:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    dfda:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    dfdc:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    dfde:	d1e0      	bne.n	dfa2 <_WriteBlocking+0x10>
}
    dfe0:	4640      	mov	r0, r8
    dfe2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000dfe6 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    dfe6:	f7fc bf53 	b.w	ae90 <_DoInit>

0000dfea <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
    dfea:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
    dfec:	f7ff fffb 	bl	dfe6 <SEGGER_RTT_Init>

	return 0;
}
    dff0:	2000      	movs	r0, #0
    dff2:	bd08      	pop	{r3, pc}

0000dff4 <z_device_state_init>:
}
    dff4:	4770      	bx	lr

0000dff6 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    dff6:	b140      	cbz	r0, e00a <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    dff8:	68c3      	ldr	r3, [r0, #12]
    dffa:	7858      	ldrb	r0, [r3, #1]
    dffc:	f010 0001 	ands.w	r0, r0, #1
    e000:	bf1e      	ittt	ne
    e002:	7818      	ldrbne	r0, [r3, #0]
    e004:	fab0 f080 	clzne	r0, r0
    e008:	0940      	lsrne	r0, r0, #5
}
    e00a:	4770      	bx	lr

0000e00c <z_early_memset>:
	(void) memset(dst, c, n);
    e00c:	f7ff bacb 	b.w	d5a6 <memset>

0000e010 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    e010:	f7ff babe 	b.w	d590 <memcpy>

0000e014 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    e014:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    e018:	4313      	orrs	r3, r2
    e01a:	f013 0303 	ands.w	r3, r3, #3
    e01e:	d10c      	bne.n	e03a <create_free_list+0x26>
	slab->free_list = NULL;
    e020:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    e022:	6881      	ldr	r1, [r0, #8]
    e024:	4299      	cmp	r1, r3
    e026:	d801      	bhi.n	e02c <create_free_list+0x18>
	return 0;
    e028:	2000      	movs	r0, #0
    e02a:	4770      	bx	lr
		*(char **)p = slab->free_list;
    e02c:	6941      	ldr	r1, [r0, #20]
    e02e:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    e030:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    e032:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    e034:	3301      	adds	r3, #1
		p += slab->block_size;
    e036:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    e038:	e7f3      	b.n	e022 <create_free_list+0xe>
		return -EINVAL;
    e03a:	f06f 0015 	mvn.w	r0, #21
}
    e03e:	4770      	bx	lr

0000e040 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    e040:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e042:	4604      	mov	r4, r0
    e044:	460d      	mov	r5, r1
	__asm__ volatile(
    e046:	f04f 0340 	mov.w	r3, #64	; 0x40
    e04a:	f3ef 8611 	mrs	r6, BASEPRI
    e04e:	f383 8812 	msr	BASEPRI_MAX, r3
    e052:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    e056:	6947      	ldr	r7, [r0, #20]
    e058:	b977      	cbnz	r7, e078 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    e05a:	f000 f9ce 	bl	e3fa <z_unpend_first_thread>

		if (pending_thread != NULL) {
    e05e:	b158      	cbz	r0, e078 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    e060:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    e062:	6142      	str	r2, [r0, #20]
    e064:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    e066:	f000 f969 	bl	e33c <z_ready_thread>
			z_reschedule(&slab->lock, key);
    e06a:	4631      	mov	r1, r6
    e06c:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    e070:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    e074:	f7fd beec 	b.w	be50 <z_reschedule>
	**(char ***) mem = slab->free_list;
    e078:	682b      	ldr	r3, [r5, #0]
    e07a:	6962      	ldr	r2, [r4, #20]
    e07c:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    e07e:	682b      	ldr	r3, [r5, #0]
    e080:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    e082:	69a3      	ldr	r3, [r4, #24]
    e084:	3b01      	subs	r3, #1
    e086:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    e088:	f386 8811 	msr	BASEPRI, r6
    e08c:	f3bf 8f6f 	isb	sy
}
    e090:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000e092 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    e092:	f3ef 8005 	mrs	r0, IPSR
}
    e096:	3800      	subs	r0, #0
    e098:	bf18      	it	ne
    e09a:	2001      	movne	r0, #1
    e09c:	4770      	bx	lr

0000e09e <z_impl_k_thread_name_set>:
}
    e09e:	f06f 0057 	mvn.w	r0, #87	; 0x57
    e0a2:	4770      	bx	lr

0000e0a4 <k_thread_name_get>:
}
    e0a4:	2000      	movs	r0, #0
    e0a6:	4770      	bx	lr

0000e0a8 <z_impl_k_thread_start>:
	z_sched_start(thread);
    e0a8:	f7fd bee4 	b.w	be74 <z_sched_start>

0000e0ac <z_pm_save_idle_exit>:
{
    e0ac:	b508      	push	{r3, lr}
	pm_system_resume();
    e0ae:	f7f4 ff0b 	bl	2ec8 <pm_system_resume>
}
    e0b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    e0b6:	f7ff bd03 	b.w	dac0 <sys_clock_idle_exit>

0000e0ba <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    e0ba:	f990 300e 	ldrsb.w	r3, [r0, #14]
    e0be:	428b      	cmp	r3, r1
    e0c0:	d001      	beq.n	e0c6 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    e0c2:	f7fd be7f 	b.w	bdc4 <z_set_prio>
}
    e0c6:	2000      	movs	r0, #0
    e0c8:	4770      	bx	lr

0000e0ca <z_impl_k_mutex_init>:
{
    e0ca:	4603      	mov	r3, r0
	mutex->owner = NULL;
    e0cc:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    e0ce:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
    e0d2:	e9c3 3300 	strd	r3, r3, [r3]
}
    e0d6:	4770      	bx	lr

0000e0d8 <queue_insert>:
{
    e0d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e0dc:	4699      	mov	r9, r3
    e0de:	4604      	mov	r4, r0
    e0e0:	f89d 3020 	ldrb.w	r3, [sp, #32]
    e0e4:	460d      	mov	r5, r1
    e0e6:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    e0e8:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    e0ec:	f04f 0240 	mov.w	r2, #64	; 0x40
    e0f0:	f3ef 8711 	mrs	r7, BASEPRI
    e0f4:	f382 8812 	msr	BASEPRI_MAX, r2
    e0f8:	f3bf 8f6f 	isb	sy
	if (is_append) {
    e0fc:	b103      	cbz	r3, e100 <queue_insert+0x28>
	return list->tail;
    e0fe:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    e100:	4630      	mov	r0, r6
    e102:	f000 f97a 	bl	e3fa <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    e106:	b158      	cbz	r0, e120 <queue_insert+0x48>
    e108:	2300      	movs	r3, #0
    e10a:	6783      	str	r3, [r0, #120]	; 0x78
    e10c:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    e110:	f000 f914 	bl	e33c <z_ready_thread>
	z_reschedule(&queue->lock, key);
    e114:	4630      	mov	r0, r6
    e116:	4639      	mov	r1, r7
    e118:	f7fd fe9a 	bl	be50 <z_reschedule>
		return 0;
    e11c:	2000      	movs	r0, #0
    e11e:	e00c      	b.n	e13a <queue_insert+0x62>
	if (alloc) {
    e120:	f1b9 0f00 	cmp.w	r9, #0
    e124:	d01c      	beq.n	e160 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    e126:	2108      	movs	r1, #8
    e128:	f7fe fa56 	bl	c5d8 <z_thread_aligned_alloc>
		if (anode == NULL) {
    e12c:	b938      	cbnz	r0, e13e <queue_insert+0x66>
	__asm__ volatile(
    e12e:	f387 8811 	msr	BASEPRI, r7
    e132:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    e136:	f06f 000b 	mvn.w	r0, #11
}
    e13a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    e13e:	2201      	movs	r2, #1
		anode->data = data;
    e140:	f8c0 8004 	str.w	r8, [r0, #4]
    e144:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e146:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    e148:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
    e14c:	b965      	cbnz	r5, e168 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    e14e:	6822      	ldr	r2, [r4, #0]
    e150:	430a      	orrs	r2, r1
    e152:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    e154:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    e156:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    e158:	2a00      	cmp	r2, #0
    e15a:	d1db      	bne.n	e114 <queue_insert+0x3c>
	list->tail = node;
    e15c:	6060      	str	r0, [r4, #4]
}
    e15e:	e7d9      	b.n	e114 <queue_insert+0x3c>
	node->next_and_flags = flags;
    e160:	f8c8 9000 	str.w	r9, [r8]
}
    e164:	4640      	mov	r0, r8
    e166:	e7ee      	b.n	e146 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    e168:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    e16a:	2a03      	cmp	r2, #3
    e16c:	d80b      	bhi.n	e186 <queue_insert+0xae>
	parent->next_and_flags = cur_flags | (unative_t)child;
    e16e:	6001      	str	r1, [r0, #0]
	return list->tail;
    e170:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    e172:	b911      	cbnz	r1, e17a <queue_insert+0xa2>
	list->head = node;
    e174:	e9c4 0000 	strd	r0, r0, [r4]
}
    e178:	e7cc      	b.n	e114 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e17a:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    e17c:	f002 0203 	and.w	r2, r2, #3
    e180:	4302      	orrs	r2, r0
    e182:	600a      	str	r2, [r1, #0]
    e184:	e7ea      	b.n	e15c <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    e186:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    e18a:	430a      	orrs	r2, r1
    e18c:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e18e:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    e190:	f002 0203 	and.w	r2, r2, #3
    e194:	ea40 0302 	orr.w	r3, r0, r2
    e198:	602b      	str	r3, [r5, #0]
}
    e19a:	e7bb      	b.n	e114 <queue_insert+0x3c>

0000e19c <z_queue_node_peek>:
{
    e19c:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    e19e:	4604      	mov	r4, r0
    e1a0:	b130      	cbz	r0, e1b0 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    e1a2:	6802      	ldr	r2, [r0, #0]
    e1a4:	0793      	lsls	r3, r2, #30
    e1a6:	d003      	beq.n	e1b0 <z_queue_node_peek+0x14>
		ret = anode->data;
    e1a8:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    e1aa:	b109      	cbz	r1, e1b0 <z_queue_node_peek+0x14>
			k_free(anode);
    e1ac:	f000 fa1d 	bl	e5ea <k_free>
}
    e1b0:	4620      	mov	r0, r4
    e1b2:	bd10      	pop	{r4, pc}

0000e1b4 <z_impl_k_queue_init>:
	list->head = NULL;
    e1b4:	2300      	movs	r3, #0
	list->tail = NULL;
    e1b6:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
    e1ba:	f100 0308 	add.w	r3, r0, #8
    e1be:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    e1c2:	4770      	bx	lr

0000e1c4 <k_queue_append>:
{
    e1c4:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    e1c6:	2301      	movs	r3, #1
    e1c8:	9300      	str	r3, [sp, #0]
    e1ca:	2300      	movs	r3, #0
{
    e1cc:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    e1ce:	4619      	mov	r1, r3
    e1d0:	f7ff ff82 	bl	e0d8 <queue_insert>
}
    e1d4:	b003      	add	sp, #12
    e1d6:	f85d fb04 	ldr.w	pc, [sp], #4

0000e1da <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    e1da:	b13a      	cbz	r2, e1ec <z_impl_k_sem_init+0x12>
    e1dc:	428a      	cmp	r2, r1
    e1de:	d305      	bcc.n	e1ec <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    e1e0:	e9c0 1202 	strd	r1, r2, [r0, #8]
    e1e4:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    e1e8:	2000      	movs	r0, #0
    e1ea:	4770      	bx	lr
		return -EINVAL;
    e1ec:	f06f 0015 	mvn.w	r0, #21
}
    e1f0:	4770      	bx	lr

0000e1f2 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    e1f2:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    e1f4:	2301      	movs	r3, #1
    e1f6:	408b      	lsls	r3, r1
    e1f8:	ea22 0303 	bic.w	r3, r2, r3
    e1fc:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    e1fe:	fa22 f001 	lsr.w	r0, r2, r1
}
    e202:	f000 0001 	and.w	r0, r0, #1
    e206:	4770      	bx	lr

0000e208 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    e208:	b120      	cbz	r0, e214 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    e20a:	2200      	movs	r2, #0
    e20c:	4611      	mov	r1, r2
    e20e:	3088      	adds	r0, #136	; 0x88
    e210:	f000 b94d 	b.w	e4ae <z_sched_wake>
}
    e214:	4770      	bx	lr

0000e216 <work_timeout>:
{
    e216:	b573      	push	{r0, r1, r4, r5, r6, lr}
    e218:	4604      	mov	r4, r0
	__asm__ volatile(
    e21a:	f04f 0340 	mov.w	r3, #64	; 0x40
    e21e:	f3ef 8511 	mrs	r5, BASEPRI
    e222:	f383 8812 	msr	BASEPRI_MAX, r3
    e226:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    e22a:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    e22c:	f1a0 0610 	sub.w	r6, r0, #16
    e230:	2103      	movs	r1, #3
    e232:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    e234:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    e236:	f7ff ffdc 	bl	e1f2 <flag_test_and_clear>
    e23a:	b128      	cbz	r0, e248 <work_timeout+0x32>
		queue = dw->queue;
    e23c:	69a3      	ldr	r3, [r4, #24]
    e23e:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    e240:	a901      	add	r1, sp, #4
    e242:	4630      	mov	r0, r6
    e244:	f7fd fb96 	bl	b974 <submit_to_queue_locked>
	__asm__ volatile(
    e248:	f385 8811 	msr	BASEPRI, r5
    e24c:	f3bf 8f6f 	isb	sy
}
    e250:	b002      	add	sp, #8
    e252:	bd70      	pop	{r4, r5, r6, pc}

0000e254 <k_work_init>:
{
    e254:	b538      	push	{r3, r4, r5, lr}
    e256:	4604      	mov	r4, r0
    e258:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    e25a:	2210      	movs	r2, #16
    e25c:	2100      	movs	r1, #0
    e25e:	f7ff f9a2 	bl	d5a6 <memset>
    e262:	6065      	str	r5, [r4, #4]
}
    e264:	bd38      	pop	{r3, r4, r5, pc}

0000e266 <z_work_submit_to_queue>:
{
    e266:	b513      	push	{r0, r1, r4, lr}
    e268:	9001      	str	r0, [sp, #4]
    e26a:	4608      	mov	r0, r1
	__asm__ volatile(
    e26c:	f04f 0340 	mov.w	r3, #64	; 0x40
    e270:	f3ef 8411 	mrs	r4, BASEPRI
    e274:	f383 8812 	msr	BASEPRI_MAX, r3
    e278:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    e27c:	a901      	add	r1, sp, #4
    e27e:	f7fd fb79 	bl	b974 <submit_to_queue_locked>
	__asm__ volatile(
    e282:	f384 8811 	msr	BASEPRI, r4
    e286:	f3bf 8f6f 	isb	sy
}
    e28a:	b002      	add	sp, #8
    e28c:	bd10      	pop	{r4, pc}

0000e28e <k_work_submit_to_queue>:
{
    e28e:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
    e290:	f7ff ffe9 	bl	e266 <z_work_submit_to_queue>
	if (ret > 0) {
    e294:	1e04      	subs	r4, r0, #0
    e296:	dd09      	ble.n	e2ac <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
    e298:	f04f 0340 	mov.w	r3, #64	; 0x40
    e29c:	f3ef 8011 	mrs	r0, BASEPRI
    e2a0:	f383 8812 	msr	BASEPRI_MAX, r3
    e2a4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    e2a8:	f000 f8db 	bl	e462 <z_reschedule_irqlock>
}
    e2ac:	4620      	mov	r0, r4
    e2ae:	bd10      	pop	{r4, pc}

0000e2b0 <k_work_init_delayable>:
{
    e2b0:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    e2b2:	2230      	movs	r2, #48	; 0x30
{
    e2b4:	4604      	mov	r4, r0
    e2b6:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    e2b8:	2100      	movs	r1, #0
    e2ba:	f7ff f974 	bl	d5a6 <memset>
    e2be:	f44f 7380 	mov.w	r3, #256	; 0x100
    e2c2:	6065      	str	r5, [r4, #4]
    e2c4:	60e3      	str	r3, [r4, #12]
}
    e2c6:	bd38      	pop	{r3, r4, r5, pc}

0000e2c8 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    e2c8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    e2cc:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    e2ce:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    e2d0:	2300      	movs	r3, #0
	node->prev = NULL;
    e2d2:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    e2d6:	4770      	bx	lr

0000e2d8 <unpend_thread_no_timeout>:
{
    e2d8:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    e2da:	f7ff fff5 	bl	e2c8 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    e2de:	7b43      	ldrb	r3, [r0, #13]
    e2e0:	f023 0302 	bic.w	r3, r3, #2
    e2e4:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    e2e6:	2300      	movs	r3, #0
    e2e8:	6083      	str	r3, [r0, #8]
}
    e2ea:	bd08      	pop	{r3, pc}

0000e2ec <add_to_waitq_locked>:
{
    e2ec:	b538      	push	{r3, r4, r5, lr}
    e2ee:	4604      	mov	r4, r0
    e2f0:	460d      	mov	r5, r1
	unready_thread(thread);
    e2f2:	f7fd fce9 	bl	bcc8 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    e2f6:	7b63      	ldrb	r3, [r4, #13]
    e2f8:	f043 0302 	orr.w	r3, r3, #2
    e2fc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    e2fe:	b1e5      	cbz	r5, e33a <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    e300:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    e302:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e304:	429d      	cmp	r5, r3
    e306:	d109      	bne.n	e31c <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    e308:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    e30a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    e30e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    e310:	606c      	str	r4, [r5, #4]
}
    e312:	e012      	b.n	e33a <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    e314:	686a      	ldr	r2, [r5, #4]
    e316:	4293      	cmp	r3, r2
    e318:	d0f6      	beq.n	e308 <add_to_waitq_locked+0x1c>
    e31a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    e31c:	2b00      	cmp	r3, #0
    e31e:	d0f3      	beq.n	e308 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    e320:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    e324:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    e328:	428a      	cmp	r2, r1
    e32a:	d0f3      	beq.n	e314 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    e32c:	4291      	cmp	r1, r2
    e32e:	ddf1      	ble.n	e314 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    e330:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    e332:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    e336:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    e338:	605c      	str	r4, [r3, #4]
}
    e33a:	bd38      	pop	{r3, r4, r5, pc}

0000e33c <z_ready_thread>:
{
    e33c:	b510      	push	{r4, lr}
    e33e:	f04f 0340 	mov.w	r3, #64	; 0x40
    e342:	f3ef 8411 	mrs	r4, BASEPRI
    e346:	f383 8812 	msr	BASEPRI_MAX, r3
    e34a:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    e34e:	f7fd fc87 	bl	bc60 <ready_thread>
	__asm__ volatile(
    e352:	f384 8811 	msr	BASEPRI, r4
    e356:	f3bf 8f6f 	isb	sy
}
    e35a:	bd10      	pop	{r4, pc}

0000e35c <z_unpend_thread_no_timeout>:
{
    e35c:	b508      	push	{r3, lr}
	__asm__ volatile(
    e35e:	f04f 0240 	mov.w	r2, #64	; 0x40
    e362:	f3ef 8111 	mrs	r1, BASEPRI
    e366:	f382 8812 	msr	BASEPRI_MAX, r2
    e36a:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    e36e:	6883      	ldr	r3, [r0, #8]
    e370:	b10b      	cbz	r3, e376 <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    e372:	f7ff ffb1 	bl	e2d8 <unpend_thread_no_timeout>
	__asm__ volatile(
    e376:	f381 8811 	msr	BASEPRI, r1
    e37a:	f3bf 8f6f 	isb	sy
}
    e37e:	bd08      	pop	{r3, pc}

0000e380 <z_sched_wake_thread>:
{
    e380:	b538      	push	{r3, r4, r5, lr}
    e382:	4604      	mov	r4, r0
	__asm__ volatile(
    e384:	f04f 0340 	mov.w	r3, #64	; 0x40
    e388:	f3ef 8511 	mrs	r5, BASEPRI
    e38c:	f383 8812 	msr	BASEPRI_MAX, r3
    e390:	f3bf 8f6f 	isb	sy
		if (!killed) {
    e394:	7b43      	ldrb	r3, [r0, #13]
    e396:	f013 0f28 	tst.w	r3, #40	; 0x28
    e39a:	d10b      	bne.n	e3b4 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    e39c:	6883      	ldr	r3, [r0, #8]
    e39e:	b10b      	cbz	r3, e3a4 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    e3a0:	f7ff ff9a 	bl	e2d8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    e3a4:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    e3a6:	b951      	cbnz	r1, e3be <z_sched_wake_thread+0x3e>
    e3a8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    e3ac:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    e3ae:	4620      	mov	r0, r4
    e3b0:	f7fd fc56 	bl	bc60 <ready_thread>
	__asm__ volatile(
    e3b4:	f385 8811 	msr	BASEPRI, r5
    e3b8:	f3bf 8f6f 	isb	sy
}
    e3bc:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    e3be:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    e3c2:	e7f3      	b.n	e3ac <z_sched_wake_thread+0x2c>

0000e3c4 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    e3c4:	2101      	movs	r1, #1
    e3c6:	3818      	subs	r0, #24
    e3c8:	f7ff bfda 	b.w	e380 <z_sched_wake_thread>

0000e3cc <z_unpend1_no_timeout>:
{
    e3cc:	b508      	push	{r3, lr}
    e3ce:	4603      	mov	r3, r0
	__asm__ volatile(
    e3d0:	f04f 0240 	mov.w	r2, #64	; 0x40
    e3d4:	f3ef 8111 	mrs	r1, BASEPRI
    e3d8:	f382 8812 	msr	BASEPRI_MAX, r2
    e3dc:	f3bf 8f6f 	isb	sy
	return list->head == list;
    e3e0:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e3e2:	4283      	cmp	r3, r0
    e3e4:	d007      	beq.n	e3f6 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    e3e6:	b108      	cbz	r0, e3ec <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    e3e8:	f7ff ff76 	bl	e2d8 <unpend_thread_no_timeout>
	__asm__ volatile(
    e3ec:	f381 8811 	msr	BASEPRI, r1
    e3f0:	f3bf 8f6f 	isb	sy
}
    e3f4:	bd08      	pop	{r3, pc}
    e3f6:	2000      	movs	r0, #0
    e3f8:	e7f8      	b.n	e3ec <z_unpend1_no_timeout+0x20>

0000e3fa <z_unpend_first_thread>:
{
    e3fa:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    e3fc:	f04f 0340 	mov.w	r3, #64	; 0x40
    e400:	f3ef 8511 	mrs	r5, BASEPRI
    e404:	f383 8812 	msr	BASEPRI_MAX, r3
    e408:	f3bf 8f6f 	isb	sy
	return list->head == list;
    e40c:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e40e:	42a0      	cmp	r0, r4
    e410:	d00d      	beq.n	e42e <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    e412:	b134      	cbz	r4, e422 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    e414:	4620      	mov	r0, r4
    e416:	f7ff ff5f 	bl	e2d8 <unpend_thread_no_timeout>
    e41a:	f104 0018 	add.w	r0, r4, #24
    e41e:	f000 f869 	bl	e4f4 <z_abort_timeout>
	__asm__ volatile(
    e422:	f385 8811 	msr	BASEPRI, r5
    e426:	f3bf 8f6f 	isb	sy
}
    e42a:	4620      	mov	r0, r4
    e42c:	bd38      	pop	{r3, r4, r5, pc}
    e42e:	2400      	movs	r4, #0
    e430:	e7f7      	b.n	e422 <z_unpend_first_thread+0x28>

0000e432 <z_unpend_thread>:
{
    e432:	b510      	push	{r4, lr}
    e434:	4601      	mov	r1, r0
	__asm__ volatile(
    e436:	f04f 0340 	mov.w	r3, #64	; 0x40
    e43a:	f3ef 8411 	mrs	r4, BASEPRI
    e43e:	f383 8812 	msr	BASEPRI_MAX, r3
    e442:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    e446:	6883      	ldr	r3, [r0, #8]
    e448:	b10b      	cbz	r3, e44e <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
    e44a:	f7ff ff45 	bl	e2d8 <unpend_thread_no_timeout>
	__asm__ volatile(
    e44e:	f384 8811 	msr	BASEPRI, r4
    e452:	f3bf 8f6f 	isb	sy
}
    e456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e45a:	f101 0018 	add.w	r0, r1, #24
    e45e:	f000 b849 	b.w	e4f4 <z_abort_timeout>

0000e462 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    e462:	4603      	mov	r3, r0
    e464:	b920      	cbnz	r0, e470 <z_reschedule_irqlock+0xe>
    e466:	f3ef 8205 	mrs	r2, IPSR
    e46a:	b90a      	cbnz	r2, e470 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    e46c:	f7f5 be6e 	b.w	414c <arch_swap>
    e470:	f383 8811 	msr	BASEPRI, r3
    e474:	f3bf 8f6f 	isb	sy
}
    e478:	4770      	bx	lr

0000e47a <z_reschedule_unlocked>:
	__asm__ volatile(
    e47a:	f04f 0340 	mov.w	r3, #64	; 0x40
    e47e:	f3ef 8011 	mrs	r0, BASEPRI
    e482:	f383 8812 	msr	BASEPRI_MAX, r3
    e486:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    e48a:	f7ff bfea 	b.w	e462 <z_reschedule_irqlock>

0000e48e <z_unpend_all>:
{
    e48e:	b538      	push	{r3, r4, r5, lr}
    e490:	4605      	mov	r5, r0
	int need_sched = 0;
    e492:	2000      	movs	r0, #0
	return list->head == list;
    e494:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e496:	42a5      	cmp	r5, r4
    e498:	d000      	beq.n	e49c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    e49a:	b904      	cbnz	r4, e49e <z_unpend_all+0x10>
}
    e49c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    e49e:	4620      	mov	r0, r4
    e4a0:	f7ff ffc7 	bl	e432 <z_unpend_thread>
		z_ready_thread(thread);
    e4a4:	4620      	mov	r0, r4
    e4a6:	f7ff ff49 	bl	e33c <z_ready_thread>
		need_sched = 1;
    e4aa:	2001      	movs	r0, #1
    e4ac:	e7f2      	b.n	e494 <z_unpend_all+0x6>

0000e4ae <z_sched_wake>:
{
    e4ae:	b538      	push	{r3, r4, r5, lr}
    e4b0:	f04f 0340 	mov.w	r3, #64	; 0x40
    e4b4:	f3ef 8511 	mrs	r5, BASEPRI
    e4b8:	f383 8812 	msr	BASEPRI_MAX, r3
    e4bc:	f3bf 8f6f 	isb	sy
	return list->head == list;
    e4c0:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    e4c2:	42a0      	cmp	r0, r4
    e4c4:	d012      	beq.n	e4ec <z_sched_wake+0x3e>
		if (thread != NULL) {
    e4c6:	b19c      	cbz	r4, e4f0 <z_sched_wake+0x42>
    e4c8:	67a1      	str	r1, [r4, #120]	; 0x78
	thread->base.swap_data = data;
    e4ca:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    e4cc:	4620      	mov	r0, r4
    e4ce:	f7ff ff03 	bl	e2d8 <unpend_thread_no_timeout>
    e4d2:	f104 0018 	add.w	r0, r4, #24
    e4d6:	f000 f80d 	bl	e4f4 <z_abort_timeout>
			ready_thread(thread);
    e4da:	4620      	mov	r0, r4
    e4dc:	f7fd fbc0 	bl	bc60 <ready_thread>
			ret = true;
    e4e0:	2001      	movs	r0, #1
	__asm__ volatile(
    e4e2:	f385 8811 	msr	BASEPRI, r5
    e4e6:	f3bf 8f6f 	isb	sy
}
    e4ea:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    e4ec:	2000      	movs	r0, #0
    e4ee:	e7f8      	b.n	e4e2 <z_sched_wake+0x34>
    e4f0:	4620      	mov	r0, r4
    e4f2:	e7f6      	b.n	e4e2 <z_sched_wake+0x34>

0000e4f4 <z_abort_timeout>:
{
    e4f4:	b510      	push	{r4, lr}
	__asm__ volatile(
    e4f6:	f04f 0240 	mov.w	r2, #64	; 0x40
    e4fa:	f3ef 8411 	mrs	r4, BASEPRI
    e4fe:	f382 8812 	msr	BASEPRI_MAX, r2
    e502:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    e506:	6803      	ldr	r3, [r0, #0]
    e508:	b13b      	cbz	r3, e51a <z_abort_timeout+0x26>
			remove_timeout(to);
    e50a:	f7fd fead 	bl	c268 <remove_timeout>
			ret = 0;
    e50e:	2000      	movs	r0, #0
	__asm__ volatile(
    e510:	f384 8811 	msr	BASEPRI, r4
    e514:	f3bf 8f6f 	isb	sy
}
    e518:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    e51a:	f06f 0015 	mvn.w	r0, #21
    e51e:	e7f7      	b.n	e510 <z_abort_timeout+0x1c>

0000e520 <z_get_next_timeout_expiry>:
{
    e520:	b510      	push	{r4, lr}
	__asm__ volatile(
    e522:	f04f 0340 	mov.w	r3, #64	; 0x40
    e526:	f3ef 8411 	mrs	r4, BASEPRI
    e52a:	f383 8812 	msr	BASEPRI_MAX, r3
    e52e:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    e532:	f7fd fe79 	bl	c228 <next_timeout>
	__asm__ volatile(
    e536:	f384 8811 	msr	BASEPRI, r4
    e53a:	f3bf 8f6f 	isb	sy
}
    e53e:	bd10      	pop	{r4, pc}

0000e540 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    e540:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    e542:	f7fd ff8d 	bl	c460 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    e546:	bd08      	pop	{r3, pc}

0000e548 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    e548:	f7fd bf8a 	b.w	c460 <sys_clock_tick_get>

0000e54c <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    e54c:	b108      	cbz	r0, e552 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    e54e:	f7f6 bb37 	b.w	4bc0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    e552:	4770      	bx	lr

0000e554 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e554:	f1b1 3fff 	cmp.w	r1, #4294967295
    e558:	bf08      	it	eq
    e55a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    e55e:	b538      	push	{r3, r4, r5, lr}
    e560:	460c      	mov	r4, r1
    e562:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    e564:	d014      	beq.n	e590 <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    e566:	4308      	orrs	r0, r1
    e568:	d103      	bne.n	e572 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    e56a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    e56e:	f7fd bf77 	b.w	c460 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    e572:	f06f 0001 	mvn.w	r0, #1
    e576:	1b40      	subs	r0, r0, r5
    e578:	f04f 33ff 	mov.w	r3, #4294967295
    e57c:	eb63 0101 	sbc.w	r1, r3, r1
    e580:	2900      	cmp	r1, #0
    e582:	da04      	bge.n	e58e <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    e584:	f7fd ff6c 	bl	c460 <sys_clock_tick_get>
    e588:	1940      	adds	r0, r0, r5
    e58a:	eb41 0104 	adc.w	r1, r1, r4
}
    e58e:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    e590:	f04f 30ff 	mov.w	r0, #4294967295
    e594:	4601      	mov	r1, r0
    e596:	e7fa      	b.n	e58e <sys_clock_timeout_end_calc+0x3a>

0000e598 <k_timer_init>:
	timer->status = 0U;
    e598:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    e59a:	e9c0 1208 	strd	r1, r2, [r0, #32]
    e59e:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    e5a2:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    e5a6:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    e5aa:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    e5ac:	6343      	str	r3, [r0, #52]	; 0x34
}
    e5ae:	4770      	bx	lr

0000e5b0 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    e5b0:	b510      	push	{r4, lr}
    e5b2:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    e5b4:	f7ff ff9e 	bl	e4f4 <z_abort_timeout>

	if (inactive) {
    e5b8:	b9b0      	cbnz	r0, e5e8 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    e5ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
    e5bc:	b10b      	cbz	r3, e5c2 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    e5be:	4620      	mov	r0, r4
    e5c0:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    e5c2:	f104 0018 	add.w	r0, r4, #24
    e5c6:	f7ff ff01 	bl	e3cc <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    e5ca:	b168      	cbz	r0, e5e8 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    e5cc:	f7ff feb6 	bl	e33c <z_ready_thread>
	__asm__ volatile(
    e5d0:	f04f 0340 	mov.w	r3, #64	; 0x40
    e5d4:	f3ef 8011 	mrs	r0, BASEPRI
    e5d8:	f383 8812 	msr	BASEPRI_MAX, r3
    e5dc:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    e5e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e5e4:	f7ff bf3d 	b.w	e462 <z_reschedule_irqlock>
    e5e8:	bd10      	pop	{r4, pc}

0000e5ea <k_free>:
	if (ptr != NULL) {
    e5ea:	b120      	cbz	r0, e5f6 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    e5ec:	1f01      	subs	r1, r0, #4
    e5ee:	f850 0c04 	ldr.w	r0, [r0, #-4]
    e5f2:	f000 b856 	b.w	e6a2 <k_heap_free>
}
    e5f6:	4770      	bx	lr

0000e5f8 <k_heap_init>:
{
    e5f8:	b410      	push	{r4}
    e5fa:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    e5fe:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    e602:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    e604:	f7fe ba6a 	b.w	cadc <sys_heap_init>

0000e608 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    e608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e60c:	b085      	sub	sp, #20
    e60e:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
    e612:	4607      	mov	r7, r0
    e614:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e616:	4650      	mov	r0, sl
    e618:	4621      	mov	r1, r4
{
    e61a:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e61c:	f7ff ff9a 	bl	e554 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    e620:	f1b4 3fff 	cmp.w	r4, #4294967295
    e624:	bf08      	it	eq
    e626:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    e62a:	4605      	mov	r5, r0
    e62c:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    e62e:	bf04      	itt	eq
    e630:	f04f 35ff 	moveq.w	r5, #4294967295
    e634:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
    e638:	f107 0a14 	add.w	sl, r7, #20
    e63c:	f04f 0340 	mov.w	r3, #64	; 0x40
    e640:	f3ef 8411 	mrs	r4, BASEPRI
    e644:	f383 8812 	msr	BASEPRI_MAX, r3
    e648:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    e64c:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    e650:	464a      	mov	r2, r9
    e652:	4641      	mov	r1, r8
    e654:	4638      	mov	r0, r7
    e656:	f7fe f9da 	bl	ca0e <sys_heap_aligned_alloc>
    e65a:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    e65c:	f7fd ff00 	bl	c460 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    e660:	9b03      	ldr	r3, [sp, #12]
    e662:	b13b      	cbz	r3, e674 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
    e664:	f384 8811 	msr	BASEPRI, r4
    e668:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    e66c:	4618      	mov	r0, r3
    e66e:	b005      	add	sp, #20
    e670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    e674:	1a28      	subs	r0, r5, r0
    e676:	eb66 0101 	sbc.w	r1, r6, r1
    e67a:	2801      	cmp	r0, #1
    e67c:	f171 0200 	sbcs.w	r2, r1, #0
    e680:	dbf0      	blt.n	e664 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    e682:	e9cd 0100 	strd	r0, r1, [sp]
    e686:	465a      	mov	r2, fp
    e688:	4621      	mov	r1, r4
    e68a:	4650      	mov	r0, sl
    e68c:	f7fd fb7c 	bl	bd88 <z_pend_curr>
	__asm__ volatile(
    e690:	f04f 0340 	mov.w	r3, #64	; 0x40
    e694:	f3ef 8411 	mrs	r4, BASEPRI
    e698:	f383 8812 	msr	BASEPRI_MAX, r3
    e69c:	f3bf 8f6f 	isb	sy
	return k;
    e6a0:	e7d6      	b.n	e650 <k_heap_aligned_alloc+0x48>

0000e6a2 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    e6a2:	b538      	push	{r3, r4, r5, lr}
    e6a4:	4604      	mov	r4, r0
    e6a6:	f04f 0340 	mov.w	r3, #64	; 0x40
    e6aa:	f3ef 8511 	mrs	r5, BASEPRI
    e6ae:	f383 8812 	msr	BASEPRI_MAX, r3
    e6b2:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    e6b6:	f7fe f972 	bl	c99e <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    e6ba:	f104 000c 	add.w	r0, r4, #12
    e6be:	f7ff fee6 	bl	e48e <z_unpend_all>
    e6c2:	b130      	cbz	r0, e6d2 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    e6c4:	4629      	mov	r1, r5
    e6c6:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    e6ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    e6ce:	f7fd bbbf 	b.w	be50 <z_reschedule>
	__asm__ volatile(
    e6d2:	f385 8811 	msr	BASEPRI, r5
    e6d6:	f3bf 8f6f 	isb	sy
}
    e6da:	bd38      	pop	{r3, r4, r5, pc}

0000e6dc <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    e6dc:	4770      	bx	lr
	...
