
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
                LOG_DBG("Packet received");
            }
    }
}

int clocks_start(void) {
   0:	80 16 00 20 99 2d 00 00 83 7b 00 00 6d 2d 00 00     ... .-...{..m-..
    struct onoff_manager *clk_mgr;
    struct onoff_client clk_cli;

    clk_mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    if (!clk_mgr) {
        LOG_ERR("Unable to get the Clock manager");
  10:	6d 2d 00 00 6d 2d 00 00 6d 2d 00 00 00 00 00 00     m-..m-..m-......
	...
            return res;
        }
    } while (err);
    LOG_DBG("High Frequency clock started");
    return 0;
}
  2c:	ed 26 00 00 6d 2d 00 00 00 00 00 00 99 26 00 00     .&..m-.......&..
    err = onoff_request(clk_mgr, &clk_cli);
  3c:	6d 2d 00 00                                         m-..

00000040 <_irq_vector_table>:
    if (err < 0) {
  40:	9d 27 00 00 75 43 00 00 9d 27 00 00 9d 27 00 00     .'..uC...'...'..
            LOG_ERR("Clock could not be started: %d", res);
  50:	9d 27 00 00 9d 27 00 00 9d 27 00 00 9d 27 00 00     .'...'...'...'..
    LOG_DBG("High Frequency clock started");
  60:	9d 27 00 00 9d 27 00 00 ef 7f 00 00 9d 27 00 00     .'...'.......'..
            LOG_ERR("Clock could not be started: %d", res);
  70:	9d 27 00 00 9d 27 00 00 9d 27 00 00 9d 27 00 00     .'...'...'...'..
    LOG_DBG("High Frequency clock started");
  80:	9d 27 00 00 9d 27 00 00 9d 27 00 00 9d 27 00 00     .'...'...'...'..
  90:	e5 43 00 00 9d 27 00 00 9d 27 00 00 9d 27 00 00     .C...'...'...'..
  a0:	9d 27 00 00 9d 27 00 00 9d 27 00 00 9d 27 00 00     .'...'...'...'..
  b0:	9d 27 00 00 9d 27 00 00 9d 27 00 00 9d 27 00 00     .'...'...'...'..
  c0:	9d 27 00 00 9d 27 00 00 9d 27 00 00 9d 27 00 00     .'...'...'...'..
  d0:	9d 27 00 00 9d 27 00 00 9d 27 00 00 9d 27 00 00     .'...'...'...'..

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <__data_size+0x8>
      e2:	b94a      	cbnz	r2, f8 <__data_size+0x8>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295
      f0:	f04f 30ff 	movne.w	r0, #4294967295
      f4:	f000 b80c 	b.w	110 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f808 	bl	114 <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__aeabi_idiv0>:
     110:	4770      	bx	lr
     112:	bf00      	nop

00000114 <__udivmoddi4>:
     114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     118:	4607      	mov	r7, r0
     11a:	468c      	mov	ip, r1
     11c:	4608      	mov	r0, r1
     11e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     120:	4615      	mov	r5, r2
     122:	463c      	mov	r4, r7
     124:	4619      	mov	r1, r3
     126:	2b00      	cmp	r3, #0
     128:	f040 80c6 	bne.w	2b8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xc4>
     12c:	4282      	cmp	r2, r0
     12e:	fab2 f782 	clz	r7, r2
     132:	d946      	bls.n	1c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x55>
     134:	b14f      	cbz	r7, 14a <__udivmoddi4+0x36>
     136:	f1c7 0e20 	rsb	lr, r7, #32
     13a:	fa24 fe0e 	lsr.w	lr, r4, lr
     13e:	fa00 f307 	lsl.w	r3, r0, r7
     142:	40bd      	lsls	r5, r7
     144:	ea4e 0c03 	orr.w	ip, lr, r3
     148:	40bc      	lsls	r4, r7
     14a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     14e:	fa1f fe85 	uxth.w	lr, r5
     152:	fbbc f9f8 	udiv	r9, ip, r8
     156:	0c22      	lsrs	r2, r4, #16
     158:	fb08 c319 	mls	r3, r8, r9, ip
     15c:	fb09 fa0e 	mul.w	sl, r9, lr
     160:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     164:	459a      	cmp	sl, r3
     166:	d928      	bls.n	1ba <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4d>
     168:	18eb      	adds	r3, r5, r3
     16a:	f109 30ff 	add.w	r0, r9, #4294967295
     16e:	d204      	bcs.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     170:	459a      	cmp	sl, r3
     172:	d902      	bls.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     174:	f1a9 0002 	sub.w	r0, r9, #2
     178:	442b      	add	r3, r5
     17a:	eba3 030a 	sub.w	r3, r3, sl
     17e:	b2a4      	uxth	r4, r4
     180:	fbb3 f2f8 	udiv	r2, r3, r8
     184:	fb08 3312 	mls	r3, r8, r2, r3
     188:	fb02 fe0e 	mul.w	lr, r2, lr
     18c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     190:	45a6      	cmp	lr, r4
     192:	d914      	bls.n	1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     194:	192c      	adds	r4, r5, r4
     196:	f102 33ff 	add.w	r3, r2, #4294967295
     19a:	d203      	bcs.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     19c:	45a6      	cmp	lr, r4
     19e:	d901      	bls.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     1a0:	1e93      	subs	r3, r2, #2
     1a2:	442c      	add	r4, r5
     1a4:	eba4 040e 	sub.w	r4, r4, lr
     1a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1ac:	b11e      	cbz	r6, 1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     1ae:	40fc      	lsrs	r4, r7
     1b0:	2300      	movs	r3, #0
     1b2:	6034      	str	r4, [r6, #0]
     1b4:	6073      	str	r3, [r6, #4]
     1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1ba:	4648      	mov	r0, r9
     1bc:	e7dd      	b.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     1be:	4613      	mov	r3, r2
     1c0:	e7f0      	b.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     1c2:	b902      	cbnz	r2, 1c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x59>
     1c4:	deff      	udf	#255	; 0xff
     1c6:	bb87      	cbnz	r7, 22a <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x36>
     1c8:	1a83      	subs	r3, r0, r2
     1ca:	2101      	movs	r1, #1
     1cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1d0:	b2aa      	uxth	r2, r5
     1d2:	fbb3 fcfe 	udiv	ip, r3, lr
     1d6:	0c20      	lsrs	r0, r4, #16
     1d8:	fb0e 331c 	mls	r3, lr, ip, r3
     1dc:	fb0c f802 	mul.w	r8, ip, r2
     1e0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1e4:	4598      	cmp	r8, r3
     1e6:	d963      	bls.n	2b0 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xbc>
     1e8:	18eb      	adds	r3, r5, r3
     1ea:	f10c 30ff 	add.w	r0, ip, #4294967295
     1ee:	d204      	bcs.n	1fa <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6>
     1f0:	4598      	cmp	r8, r3
     1f2:	d902      	bls.n	1fa <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6>
     1f4:	f1ac 0002 	sub.w	r0, ip, #2
     1f8:	442b      	add	r3, r5
     1fa:	eba3 0308 	sub.w	r3, r3, r8
     1fe:	b2a4      	uxth	r4, r4
     200:	fbb3 fcfe 	udiv	ip, r3, lr
     204:	fb0e 331c 	mls	r3, lr, ip, r3
     208:	fb0c f202 	mul.w	r2, ip, r2
     20c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     210:	42a2      	cmp	r2, r4
     212:	d94f      	bls.n	2b4 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xc0>
     214:	192c      	adds	r4, r5, r4
     216:	f10c 33ff 	add.w	r3, ip, #4294967295
     21a:	d204      	bcs.n	226 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x32>
     21c:	42a2      	cmp	r2, r4
     21e:	d902      	bls.n	226 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x32>
     220:	f1ac 0302 	sub.w	r3, ip, #2
     224:	442c      	add	r4, r5
     226:	1aa4      	subs	r4, r4, r2
     228:	e7be      	b.n	1a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3b>
     22a:	f1c7 0c20 	rsb	ip, r7, #32
     22e:	fa20 f80c 	lsr.w	r8, r0, ip
     232:	fa00 f307 	lsl.w	r3, r0, r7
     236:	fa24 fc0c 	lsr.w	ip, r4, ip
     23a:	40bd      	lsls	r5, r7
     23c:	ea4c 0203 	orr.w	r2, ip, r3
     240:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     244:	b2ab      	uxth	r3, r5
     246:	fbb8 fcfe 	udiv	ip, r8, lr
     24a:	0c11      	lsrs	r1, r2, #16
     24c:	fb0e 801c 	mls	r0, lr, ip, r8
     250:	fb0c f903 	mul.w	r9, ip, r3
     254:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     258:	4581      	cmp	r9, r0
     25a:	fa04 f407 	lsl.w	r4, r4, r7
     25e:	d923      	bls.n	2a8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xb4>
     260:	1828      	adds	r0, r5, r0
     262:	f10c 31ff 	add.w	r1, ip, #4294967295
     266:	d204      	bcs.n	272 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x7e>
     268:	4581      	cmp	r9, r0
     26a:	d902      	bls.n	272 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x7e>
     26c:	f1ac 0102 	sub.w	r1, ip, #2
     270:	4428      	add	r0, r5
     272:	eba0 0009 	sub.w	r0, r0, r9
     276:	b292      	uxth	r2, r2
     278:	fbb0 fcfe 	udiv	ip, r0, lr
     27c:	fb0e 001c 	mls	r0, lr, ip, r0
     280:	fb0c f803 	mul.w	r8, ip, r3
     284:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     288:	4598      	cmp	r8, r3
     28a:	d90f      	bls.n	2ac <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xb8>
     28c:	18eb      	adds	r3, r5, r3
     28e:	f10c 32ff 	add.w	r2, ip, #4294967295
     292:	d204      	bcs.n	29e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xaa>
     294:	4598      	cmp	r8, r3
     296:	d902      	bls.n	29e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xaa>
     298:	f1ac 0202 	sub.w	r2, ip, #2
     29c:	442b      	add	r3, r5
     29e:	eba3 0308 	sub.w	r3, r3, r8
     2a2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2a6:	e791      	b.n	1cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5f>
     2a8:	4661      	mov	r1, ip
     2aa:	e7e2      	b.n	272 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x7e>
     2ac:	4662      	mov	r2, ip
     2ae:	e7f6      	b.n	29e <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xaa>
     2b0:	4660      	mov	r0, ip
     2b2:	e7a2      	b.n	1fa <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6>
     2b4:	4663      	mov	r3, ip
     2b6:	e7b6      	b.n	226 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x32>
     2b8:	4283      	cmp	r3, r0
     2ba:	d905      	bls.n	2c8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xd4>
     2bc:	b10e      	cbz	r6, 2c2 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xce>
     2be:	e9c6 7000 	strd	r7, r0, [r6]
     2c2:	2100      	movs	r1, #0
     2c4:	4608      	mov	r0, r1
     2c6:	e776      	b.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     2c8:	fab3 f183 	clz	r1, r3
     2cc:	b981      	cbnz	r1, 2f0 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xfc>
     2ce:	4283      	cmp	r3, r0
     2d0:	d301      	bcc.n	2d6 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xe2>
     2d2:	42ba      	cmp	r2, r7
     2d4:	d80a      	bhi.n	2ec <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xf8>
     2d6:	1abc      	subs	r4, r7, r2
     2d8:	eb60 0303 	sbc.w	r3, r0, r3
     2dc:	2001      	movs	r0, #1
     2de:	469c      	mov	ip, r3
     2e0:	2e00      	cmp	r6, #0
     2e2:	d068      	beq.n	3b6 <CONFIG_PMW3360_CPI+0x96>
     2e4:	e9c6 4c00 	strd	r4, ip, [r6]
     2e8:	2100      	movs	r1, #0
     2ea:	e764      	b.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     2ec:	4608      	mov	r0, r1
     2ee:	e7f7      	b.n	2e0 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xec>
     2f0:	f1c1 0c20 	rsb	ip, r1, #32
     2f4:	408b      	lsls	r3, r1
     2f6:	fa22 f40c 	lsr.w	r4, r2, ip
     2fa:	431c      	orrs	r4, r3
     2fc:	fa02 f501 	lsl.w	r5, r2, r1
     300:	fa00 f301 	lsl.w	r3, r0, r1
     304:	fa27 f20c 	lsr.w	r2, r7, ip
     308:	fa20 fb0c 	lsr.w	fp, r0, ip
     30c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     310:	4313      	orrs	r3, r2
     312:	fbbb f8f9 	udiv	r8, fp, r9
     316:	fa1f fe84 	uxth.w	lr, r4
     31a:	fb09 bb18 	mls	fp, r9, r8, fp
     31e:	0c1a      	lsrs	r2, r3, #16
     320:	fb08 fa0e 	mul.w	sl, r8, lr
     324:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     328:	4592      	cmp	sl, r2
     32a:	fa07 f701 	lsl.w	r7, r7, r1
     32e:	d93e      	bls.n	3ae <CONFIG_PMW3360_CPI+0x8e>
     330:	18a2      	adds	r2, r4, r2
     332:	f108 30ff 	add.w	r0, r8, #4294967295
     336:	d204      	bcs.n	342 <CONFIG_PMW3360_CPI+0x22>
     338:	4592      	cmp	sl, r2
     33a:	d902      	bls.n	342 <CONFIG_PMW3360_CPI+0x22>
     33c:	f1a8 0002 	sub.w	r0, r8, #2
     340:	4422      	add	r2, r4
     342:	eba2 020a 	sub.w	r2, r2, sl
     346:	b29b      	uxth	r3, r3
     348:	fbb2 f8f9 	udiv	r8, r2, r9
     34c:	fb09 2218 	mls	r2, r9, r8, r2
     350:	fb08 fe0e 	mul.w	lr, r8, lr
     354:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     358:	4596      	cmp	lr, r2
     35a:	d92a      	bls.n	3b2 <CONFIG_PMW3360_CPI+0x92>
     35c:	18a2      	adds	r2, r4, r2
     35e:	f108 33ff 	add.w	r3, r8, #4294967295
     362:	d204      	bcs.n	36e <CONFIG_PMW3360_CPI+0x4e>
     364:	4596      	cmp	lr, r2
     366:	d902      	bls.n	36e <CONFIG_PMW3360_CPI+0x4e>
     368:	f1a8 0302 	sub.w	r3, r8, #2
     36c:	4422      	add	r2, r4
     36e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     372:	fba0 9305 	umull	r9, r3, r0, r5
     376:	eba2 020e 	sub.w	r2, r2, lr
     37a:	429a      	cmp	r2, r3
     37c:	46ce      	mov	lr, r9
     37e:	4698      	mov	r8, r3
     380:	d302      	bcc.n	388 <CONFIG_PMW3360_CPI+0x68>
     382:	d106      	bne.n	392 <CONFIG_PMW3360_CPI+0x72>
     384:	454f      	cmp	r7, r9
     386:	d204      	bcs.n	392 <CONFIG_PMW3360_CPI+0x72>
     388:	ebb9 0e05 	subs.w	lr, r9, r5
     38c:	eb63 0804 	sbc.w	r8, r3, r4
     390:	3801      	subs	r0, #1
     392:	b186      	cbz	r6, 3b6 <CONFIG_PMW3360_CPI+0x96>
     394:	ebb7 030e 	subs.w	r3, r7, lr
     398:	eb62 0708 	sbc.w	r7, r2, r8
     39c:	fa07 fc0c 	lsl.w	ip, r7, ip
     3a0:	40cb      	lsrs	r3, r1
     3a2:	ea4c 0303 	orr.w	r3, ip, r3
     3a6:	40cf      	lsrs	r7, r1
     3a8:	e9c6 3700 	strd	r3, r7, [r6]
     3ac:	e79c      	b.n	2e8 <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0xf4>
     3ae:	4640      	mov	r0, r8
     3b0:	e7c7      	b.n	342 <CONFIG_PMW3360_CPI+0x22>
     3b2:	4643      	mov	r3, r8
     3b4:	e7db      	b.n	36e <CONFIG_PMW3360_CPI+0x4e>
     3b6:	4631      	mov	r1, r6
     3b8:	e6fd      	b.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
	...

000003bc <init_buttons>:
            // LOG_DBG("Button %d pressed at %" PRIu32 "", idx, k_cycle_get_32());
        // }
    // }
}

int init_buttons(void) {
     3bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3c0:	4c52      	ldr	r4, [pc, #328]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     3c2:	4e53      	ldr	r6, [pc, #332]	; (510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>)
     3c4:	af00      	add	r7, sp, #0
    int ret;

    for (int idx = 0; idx < (sizeof(buttons)/sizeof(*buttons)); idx++) {
     3c6:	f04f 0900 	mov.w	r9, #0
        if (!device_is_ready(buttons[idx].port)) {
     3ca:	6825      	ldr	r5, [r4, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     3cc:	4628      	mov	r0, r5
     3ce:	f007 ff66 	bl	829e <z_device_is_ready>
     3d2:	4603      	mov	r3, r0
     3d4:	b9a0      	cbnz	r0, 400 <CONFIG_LOG_BUFFER_SIZE>
            LOG_ERR("Button device %s is not ready", buttons[idx].port->name);
     3d6:	6829      	ldr	r1, [r5, #0]
     3d8:	484e      	ldr	r0, [pc, #312]	; (514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>)
     3da:	b088      	sub	sp, #32
     3dc:	466a      	mov	r2, sp
     3de:	e9c2 0105 	strd	r0, r1, [r2, #20]
     3e2:	2102      	movs	r1, #2
     3e4:	7711      	strb	r1, [r2, #28]
     3e6:	494c      	ldr	r1, [pc, #304]	; (518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>)
     3e8:	f842 1f10 	str.w	r1, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
     3ec:	484b      	ldr	r0, [pc, #300]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     3ee:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
     3f2:	f007 fb79 	bl	7ae8 <z_impl_z_log_msg2_static_create>
            return -1;
     3f6:	f04f 30ff 	mov.w	r0, #4294967295
        }
        gpio_init_callback(&cb_datas[idx], button_pressed, BIT(buttons[idx].pin));
        gpio_add_callback(buttons[idx].port, &cb_datas[idx]);
        LOG_DBG("Set up button at %s pin %d", buttons[idx].port->name, buttons[idx].pin);
    }
}
     3fa:	46bd      	mov	sp, r7
     3fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
				  spec->dt_flags | extra_flags);
     400:	88e3      	ldrh	r3, [r4, #6]
	return gpio_pin_configure(spec->port,
     402:	6820      	ldr	r0, [r4, #0]
     404:	7921      	ldrb	r1, [r4, #4]
     406:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
	struct gpio_driver_data *data =
     40a:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
     40e:	f8d0 8008 	ldr.w	r8, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
     412:	f013 0f01 	tst.w	r3, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
     416:	f04f 0c01 	mov.w	ip, #1
     41a:	f8de 3000 	ldr.w	r3, [lr]
     41e:	fa0c fc01 	lsl.w	ip, ip, r1
     422:	bf14      	ite	ne
     424:	ea4c 0303 	orrne.w	r3, ip, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     428:	ea23 030c 	biceq.w	r3, r3, ip
     42c:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
     430:	f8d8 3000 	ldr.w	r3, [r8]
     434:	4798      	blx	r3
            LOG_ERR("Error %d: failed to configure %s pin %d", ret, buttons[idx].port->name, buttons[idx].pin);
     436:	7921      	ldrb	r1, [r4, #4]
        if (ret != 0) {
     438:	4680      	mov	r8, r0
     43a:	b1b0      	cbz	r0, 46a <CONFIG_LOG_BUFFER_SIZE+0x6a>
            LOG_ERR("Error %d: failed to configure %s pin %d", ret, buttons[idx].port->name, buttons[idx].pin);
     43c:	682b      	ldr	r3, [r5, #0]
     43e:	4838      	ldr	r0, [pc, #224]	; (520 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x38>)
     440:	466c      	mov	r4, sp
     442:	b08a      	sub	sp, #40	; 0x28
     444:	466a      	mov	r2, sp
     446:	e9c2 0805 	strd	r0, r8, [r2, #20]
     44a:	e9c2 3107 	strd	r3, r1, [r2, #28]
     44e:	2303      	movs	r3, #3
     450:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
     454:	4b33      	ldr	r3, [pc, #204]	; (524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>)
     456:	f842 3f10 	str.w	r3, [r2, #16]!
     45a:	4830      	ldr	r0, [pc, #192]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     45c:	2300      	movs	r3, #0
     45e:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
     462:	f007 fb41 	bl	7ae8 <z_impl_z_log_msg2_static_create>
     466:	46a5      	mov	sp, r4
            return;
     468:	e7c7      	b.n	3fa <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x12>
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
     46a:	6820      	ldr	r0, [r4, #0]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     46c:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
     46e:	6883      	ldr	r3, [r0, #8]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     470:	6812      	ldr	r2, [r2, #0]
	return api->pin_interrupt_configure(port, pin, mode, trig);
     472:	f8d3 b018 	ldr.w	fp, [r3, #24]
	    ((data->invert & (gpio_port_pins_t)BIT(pin)) != 0)) {
     476:	f04f 0a01 	mov.w	sl, #1
     47a:	fa0a fc01 	lsl.w	ip, sl, r1
		flags ^= (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1);
     47e:	ea1c 0f02 	tst.w	ip, r2
	return api->pin_interrupt_configure(port, pin, mode, trig);
     482:	bf0c      	ite	eq
     484:	f04f 6380 	moveq.w	r3, #67108864	; 0x4000000
     488:	f04f 7300 	movne.w	r3, #33554432	; 0x2000000
     48c:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
     490:	47d8      	blx	fp
            LOG_ERR("Error %d: failed to configure interrupt on %s pin %d", ret, buttons[idx].port->name, buttons[idx].pin);
     492:	f894 b004 	ldrb.w	fp, [r4, #4]
        if (ret != 0) {
     496:	b148      	cbz	r0, 4ac <CONFIG_LOG_BUFFER_SIZE+0xac>
            LOG_ERR("Error %d: failed to configure interrupt on %s pin %d", ret, buttons[idx].port->name, buttons[idx].pin);
     498:	682b      	ldr	r3, [r5, #0]
     49a:	4923      	ldr	r1, [pc, #140]	; (528 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x40>)
     49c:	466c      	mov	r4, sp
     49e:	b08a      	sub	sp, #40	; 0x28
     4a0:	466a      	mov	r2, sp
     4a2:	e9c2 1005 	strd	r1, r0, [r2, #20]
     4a6:	e9c2 3b07 	strd	r3, fp, [r2, #28]
     4aa:	e7d0      	b.n	44e <CONFIG_LOG_BUFFER_SIZE+0x4e>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     4ac:	4b1f      	ldr	r3, [pc, #124]	; (52c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x44>)
     4ae:	6073      	str	r3, [r6, #4]
        gpio_init_callback(&cb_datas[idx], button_pressed, BIT(buttons[idx].pin));
     4b0:	fa0a f30b 	lsl.w	r3, sl, fp
	callback->pin_mask = pin_mask;
     4b4:	60b3      	str	r3, [r6, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     4b6:	68ab      	ldr	r3, [r5, #8]
     4b8:	69db      	ldr	r3, [r3, #28]
     4ba:	b11b      	cbz	r3, 4c4 <CONFIG_LOG_BUFFER_SIZE+0xc4>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     4bc:	4652      	mov	r2, sl
     4be:	4631      	mov	r1, r6
     4c0:	4628      	mov	r0, r5
     4c2:	4798      	blx	r3
        LOG_DBG("Set up button at %s pin %d", buttons[idx].port->name, buttons[idx].pin);
     4c4:	682b      	ldr	r3, [r5, #0]
     4c6:	491a      	ldr	r1, [pc, #104]	; (530 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x48>)
     4c8:	466d      	mov	r5, sp
     4ca:	b08a      	sub	sp, #40	; 0x28
     4cc:	466a      	mov	r2, sp
     4ce:	6151      	str	r1, [r2, #20]
     4d0:	4918      	ldr	r1, [pc, #96]	; (534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>)
     4d2:	f8c2 b020 	str.w	fp, [r2, #32]
     4d6:	e9c2 1306 	strd	r1, r3, [r2, #24]
     4da:	2303      	movs	r3, #3
     4dc:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
     4e0:	4b10      	ldr	r3, [pc, #64]	; (524 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x3c>)
     4e2:	f842 3f10 	str.w	r3, [r2, #16]!
     4e6:	480d      	ldr	r0, [pc, #52]	; (51c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x34>)
     4e8:	2300      	movs	r3, #0
     4ea:	f44f 512c 	mov.w	r1, #11008	; 0x2b00
    for (int idx = 0; idx < (sizeof(buttons)/sizeof(*buttons)); idx++) {
     4ee:	f109 0901 	add.w	r9, r9, #1
     4f2:	f007 faf9 	bl	7ae8 <z_impl_z_log_msg2_static_create>
     4f6:	f1b9 0f05 	cmp.w	r9, #5
     4fa:	46ad      	mov	sp, r5
     4fc:	f104 0408 	add.w	r4, r4, #8
     500:	f106 060c 	add.w	r6, r6, #12
     504:	f43f af79 	beq.w	3fa <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0x12>
     508:	e75f      	b.n	3ca <init_buttons+0xe>
     50a:	bf00      	nop
     50c:	00008978 	.word	0x00008978
     510:	20000858 	.word	0x20000858
     514:	00008b98 	.word	0x00008b98
     518:	01000003 	.word	0x01000003
     51c:	000088c8 	.word	0x000088c8
     520:	00008bb6 	.word	0x00008bb6
     524:	01000005 	.word	0x01000005
     528:	00008bde 	.word	0x00008bde
     52c:	00007253 	.word	0x00007253
     530:	00008c13 	.word	0x00008c13
     534:	00008c3a 	.word	0x00008c3a

00000538 <fetch_buttons>:

void fetch_buttons(int *array_values) {
     538:	b538      	push	{r3, r4, r5, lr}
    array_values[0] = gpio_pin_get_dt(&(buttons[0])); // Mouse button 1
     53a:	4d0d      	ldr	r5, [pc, #52]	; (570 <fetch_buttons+0x38>)
void fetch_buttons(int *array_values) {
     53c:	4604      	mov	r4, r0
    array_values[0] = gpio_pin_get_dt(&(buttons[0])); // Mouse button 1
     53e:	4628      	mov	r0, r5
     540:	f006 fe72 	bl	7228 <gpio_pin_get_dt>
     544:	6020      	str	r0, [r4, #0]
    array_values[1] = gpio_pin_get_dt(&(buttons[1])); // Mouse button 2
     546:	f105 0008 	add.w	r0, r5, #8
     54a:	f006 fe6d 	bl	7228 <gpio_pin_get_dt>
     54e:	6060      	str	r0, [r4, #4]
    array_values[2] = gpio_pin_get_dt(&(buttons[2])); // Mouse button 3
     550:	f105 0010 	add.w	r0, r5, #16
     554:	f006 fe68 	bl	7228 <gpio_pin_get_dt>
     558:	60a0      	str	r0, [r4, #8]
    array_values[3] = gpio_pin_get_dt(&(buttons[3])); // Mouse button 4
     55a:	f105 0018 	add.w	r0, r5, #24
     55e:	f006 fe63 	bl	7228 <gpio_pin_get_dt>
     562:	60e0      	str	r0, [r4, #12]
    array_values[4] = gpio_pin_get_dt(&(buttons[4])); // Mouse button 5
     564:	f105 0020 	add.w	r0, r5, #32
     568:	f006 fe5e 	bl	7228 <gpio_pin_get_dt>
     56c:	6120      	str	r0, [r4, #16]
}
     56e:	bd38      	pop	{r3, r4, r5, pc}
     570:	00008978 	.word	0x00008978

00000574 <main>:
#include <logging/log.h>

LOG_MODULE_REGISTER(app, CONFIG_LOG_DEFAULT_LEVEL);

void main(void)
{
     574:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     578:	b087      	sub	sp, #28
     57a:	af00      	add	r7, sp, #0
	const struct device *dev = get_pmw3360_device();
     57c:	f000 f840 	bl	600 <get_pmw3360_device>
     580:	4604      	mov	r4, r0
	int button_vals[5];
	init_buttons();
     582:	f7ff ff1b 	bl	3bc <init_buttons>
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm0 = { .val = timeout };
		return (int32_t) arch_syscall_invoke2(parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SLEEP);
	}
#endif
	compiler_barrier();
	return z_impl_k_sleep(timeout);
     586:	2100      	movs	r1, #0
     588:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     58c:	f006 fbb8 	bl	6d00 <z_impl_k_sleep>


	k_sleep(K_MSEC(1000));
	init_pmw3360(dev);
     590:	4620      	mov	r0, r4
     592:	f000 f8c1 	bl	718 <init_pmw3360>
		fetch_pmw3360_data(dev);
		// LOG_INF("CPI: %d", get_cpi(dev));
		fetch_buttons(&button_vals);
		// LOG_INF("Val: %d", val);
		// LOG_INF("x: %03d; y: %03d\n", get_dx(dev), get_dy(dev));
		LOG_INF("x: %03d; y: %03d; M1: %d, M2: %d, M3: %d, M4: %d, M5: %d\n",
     596:	f8df 8060 	ldr.w	r8, [pc, #96]	; 5f8 <main+0x84>
     59a:	4e18      	ldr	r6, [pc, #96]	; (5fc <main+0x88>)
		fetch_pmw3360_data(dev);
     59c:	4620      	mov	r0, r4
     59e:	f006 fe5c 	bl	725a <fetch_pmw3360_data>
		fetch_buttons(&button_vals);
     5a2:	1d38      	adds	r0, r7, #4
     5a4:	f7ff ffc8 	bl	538 <fetch_buttons>
		LOG_INF("x: %03d; y: %03d; M1: %d, M2: %d, M3: %d, M4: %d, M5: %d\n",
     5a8:	4620      	mov	r0, r4
     5aa:	f006 fe5a 	bl	7262 <get_dx>
     5ae:	4605      	mov	r5, r0
     5b0:	4620      	mov	r0, r4
     5b2:	f006 fe5f 	bl	7274 <get_dy>
     5b6:	46e9      	mov	r9, sp
     5b8:	b08e      	sub	sp, #56	; 0x38
     5ba:	466a      	mov	r2, sp
     5bc:	687b      	ldr	r3, [r7, #4]
     5be:	6213      	str	r3, [r2, #32]
     5c0:	68bb      	ldr	r3, [r7, #8]
     5c2:	6253      	str	r3, [r2, #36]	; 0x24
     5c4:	68fb      	ldr	r3, [r7, #12]
     5c6:	6293      	str	r3, [r2, #40]	; 0x28
     5c8:	693b      	ldr	r3, [r7, #16]
     5ca:	62d3      	str	r3, [r2, #44]	; 0x2c
     5cc:	697b      	ldr	r3, [r7, #20]
     5ce:	6313      	str	r3, [r2, #48]	; 0x30
     5d0:	2309      	movs	r3, #9
     5d2:	e9c2 8505 	strd	r8, r5, [r2, #20]
     5d6:	61d0      	str	r0, [r2, #28]
     5d8:	f842 3f10 	str.w	r3, [r2, #16]!
     5dc:	2300      	movs	r3, #0
     5de:	f644 01c0 	movw	r1, #18624	; 0x48c0
     5e2:	4630      	mov	r0, r6
     5e4:	f007 fa80 	bl	7ae8 <z_impl_z_log_msg2_static_create>
     5e8:	46cd      	mov	sp, r9
     5ea:	2100      	movs	r1, #0
     5ec:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     5f0:	f006 fb86 	bl	6d00 <z_impl_k_sleep>
	for (;;) {
     5f4:	e7d2      	b.n	59c <main+0x28>
     5f6:	bf00      	nop
     5f8:	00008c47 	.word	0x00008c47
     5fc:	000088c0 	.word	0x000088c0

00000600 <get_pmw3360_device>:
#include "pmw3360.h"
#include <logging/log.h>

LOG_MODULE_REGISTER(pmw3360_custom, CONFIG_LOG_DEFAULT_LEVEL);

const struct device *get_pmw3360_device(void) {
     600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     602:	af00      	add	r7, sp, #0
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
     604:	4d23      	ldr	r5, [pc, #140]	; (694 <get_pmw3360_device+0x94>)
     606:	4628      	mov	r0, r5
     608:	f005 fbe4 	bl	5dd4 <z_impl_device_get_binding>
    
	const struct device *dev;
	dev = device_get_binding(DT_LABEL(DT_INST(0, pixart_pmw3360)));
	if (dev == NULL) {
     60c:	4604      	mov	r4, r0
     60e:	b9a0      	cbnz	r0, 63a <get_pmw3360_device+0x3a>
		LOG_ERR("Could not get %s device\n", DT_LABEL(DT_INST(0, pixart_pmw3360)));
     610:	4b21      	ldr	r3, [pc, #132]	; (698 <get_pmw3360_device+0x98>)
     612:	466e      	mov	r6, sp
     614:	b088      	sub	sp, #32
     616:	466a      	mov	r2, sp
     618:	e9c2 3505 	strd	r3, r5, [r2, #20]
     61c:	2302      	movs	r3, #2
     61e:	7713      	strb	r3, [r2, #28]
     620:	4b1e      	ldr	r3, [pc, #120]	; (69c <get_pmw3360_device+0x9c>)
     622:	f842 3f10 	str.w	r3, [r2, #16]!
     626:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
     62a:	4603      	mov	r3, r0
     62c:	481c      	ldr	r0, [pc, #112]	; (6a0 <get_pmw3360_device+0xa0>)
     62e:	f007 fa5b 	bl	7ae8 <z_impl_z_log_msg2_static_create>
     632:	46b5      	mov	sp, r6
		       dev->name);
		return NULL;
	}
	LOG_INF("Found device \"%s\", getting sensor data\n", dev->name);
	return dev;
}
     634:	4620      	mov	r0, r4
     636:	46bd      	mov	sp, r7
     638:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
     63a:	f007 fe30 	bl	829e <z_device_is_ready>
     63e:	6823      	ldr	r3, [r4, #0]
	if (!device_is_ready(dev)) {
     640:	4605      	mov	r5, r0
     642:	b998      	cbnz	r0, 66c <get_pmw3360_device+0x6c>
		LOG_ERR("\nError: Device \"%s\" is not ready; "
     644:	4917      	ldr	r1, [pc, #92]	; (6a4 <get_pmw3360_device+0xa4>)
     646:	466c      	mov	r4, sp
     648:	b088      	sub	sp, #32
     64a:	466a      	mov	r2, sp
     64c:	e9c2 1305 	strd	r1, r3, [r2, #20]
     650:	2302      	movs	r3, #2
     652:	7713      	strb	r3, [r2, #28]
     654:	4b11      	ldr	r3, [pc, #68]	; (69c <get_pmw3360_device+0x9c>)
     656:	f842 3f10 	str.w	r3, [r2, #16]!
     65a:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
     65e:	4603      	mov	r3, r0
     660:	480f      	ldr	r0, [pc, #60]	; (6a0 <get_pmw3360_device+0xa0>)
     662:	f007 fa41 	bl	7ae8 <z_impl_z_log_msg2_static_create>
     666:	46a5      	mov	sp, r4
		return NULL;
     668:	462c      	mov	r4, r5
     66a:	e7e3      	b.n	634 <get_pmw3360_device+0x34>
	LOG_INF("Found device \"%s\", getting sensor data\n", dev->name);
     66c:	490e      	ldr	r1, [pc, #56]	; (6a8 <get_pmw3360_device+0xa8>)
     66e:	466d      	mov	r5, sp
     670:	b088      	sub	sp, #32
     672:	466a      	mov	r2, sp
     674:	e9c2 1305 	strd	r1, r3, [r2, #20]
     678:	2302      	movs	r3, #2
     67a:	7713      	strb	r3, [r2, #28]
     67c:	4b07      	ldr	r3, [pc, #28]	; (69c <get_pmw3360_device+0x9c>)
     67e:	f842 3f10 	str.w	r3, [r2, #16]!
     682:	4807      	ldr	r0, [pc, #28]	; (6a0 <get_pmw3360_device+0xa0>)
     684:	2300      	movs	r3, #0
     686:	f44f 51d6 	mov.w	r1, #6848	; 0x1ac0
     68a:	f007 fa2d 	bl	7ae8 <z_impl_z_log_msg2_static_create>
     68e:	46ad      	mov	sp, r5
	return dev;
     690:	e7d0      	b.n	634 <get_pmw3360_device+0x34>
     692:	bf00      	nop
     694:	00008c85 	.word	0x00008c85
     698:	00008c8d 	.word	0x00008c8d
     69c:	01000003 	.word	0x01000003
     6a0:	00008910 	.word	0x00008910
     6a4:	00008ca6 	.word	0x00008ca6
     6a8:	00008cfa 	.word	0x00008cfa

000006ac <set_cpi>:
 * Maximum = 12000
 * Increments of 100
 * @param dev 
 * @param cpi 
 */
void set_cpi(const struct device *dev, int cpi) {
     6ac:	b590      	push	{r4, r7, lr}
     6ae:	b083      	sub	sp, #12
    const struct sensor_value val = {
     6b0:	2200      	movs	r2, #0
void set_cpi(const struct device *dev, int cpi) {
     6b2:	af00      	add	r7, sp, #0
    const struct sensor_value val = {
     6b4:	e9c7 1200 	strd	r1, r2, [r7]
					 const struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	if (api->attr_set == NULL) {
     6b8:	6883      	ldr	r3, [r0, #8]
     6ba:	681c      	ldr	r4, [r3, #0]
     6bc:	b1c4      	cbz	r4, 6f0 <set_cpi+0x44>
		return -ENOSYS;
	}

	return api->attr_set(dev, chan, attr, val);
     6be:	463b      	mov	r3, r7
     6c0:	220e      	movs	r2, #14
     6c2:	2139      	movs	r1, #57	; 0x39
     6c4:	47a0      	blx	r4
        .val1 = cpi,
    };
    int rc = sensor_attr_set(dev, SENSOR_CHAN_ALL, PMW3360_ATTR_CPI, &val);
    if (rc == 0) {
     6c6:	4603      	mov	r3, r0
     6c8:	b9a0      	cbnz	r0, 6f4 <set_cpi+0x48>
        LOG_INF("Set CPI to: %d\n", val.val1);
     6ca:	466c      	mov	r4, sp
     6cc:	b088      	sub	sp, #32
     6ce:	466a      	mov	r2, sp
     6d0:	490e      	ldr	r1, [pc, #56]	; (70c <set_cpi+0x60>)
     6d2:	6151      	str	r1, [r2, #20]
     6d4:	6839      	ldr	r1, [r7, #0]
     6d6:	6191      	str	r1, [r2, #24]
     6d8:	2103      	movs	r1, #3
     6da:	f842 1f10 	str.w	r1, [r2, #16]!
     6de:	480c      	ldr	r0, [pc, #48]	; (710 <set_cpi+0x64>)
     6e0:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
     6e4:	f007 fa00 	bl	7ae8 <z_impl_z_log_msg2_static_create>
    } else {
        LOG_INF("Error setting CPI, error %d\n", rc);
    }
}
     6e8:	370c      	adds	r7, #12
     6ea:	46a5      	mov	sp, r4
     6ec:	46bd      	mov	sp, r7
     6ee:	bd90      	pop	{r4, r7, pc}
		return -ENOSYS;
     6f0:	f06f 0357 	mvn.w	r3, #87	; 0x57
        LOG_INF("Error setting CPI, error %d\n", rc);
     6f4:	4907      	ldr	r1, [pc, #28]	; (714 <set_cpi+0x68>)
     6f6:	466c      	mov	r4, sp
     6f8:	b088      	sub	sp, #32
     6fa:	466a      	mov	r2, sp
     6fc:	e9c2 1305 	strd	r1, r3, [r2, #20]
     700:	2303      	movs	r3, #3
     702:	f842 3f10 	str.w	r3, [r2, #16]!
     706:	2300      	movs	r3, #0
     708:	e7e9      	b.n	6de <set_cpi+0x32>
     70a:	bf00      	nop
     70c:	00008d22 	.word	0x00008d22
     710:	00008910 	.word	0x00008910
     714:	00008d32 	.word	0x00008d32

00000718 <init_pmw3360>:
void init_pmw3360(const struct device *dev) {
     718:	b5f0      	push	{r4, r5, r6, r7, lr}
     71a:	b083      	sub	sp, #12
     71c:	4604      	mov	r4, r0
     71e:	af00      	add	r7, sp, #0
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
     720:	6883      	ldr	r3, [r0, #8]
    LOG_DBG("RC val: %d", rc);
     722:	4d1e      	ldr	r5, [pc, #120]	; (79c <init_pmw3360+0x84>)
     724:	68db      	ldr	r3, [r3, #12]
     726:	2139      	movs	r1, #57	; 0x39
     728:	4798      	blx	r3
     72a:	466e      	mov	r6, sp
     72c:	b088      	sub	sp, #32
     72e:	466a      	mov	r2, sp
     730:	4b1b      	ldr	r3, [pc, #108]	; (7a0 <init_pmw3360+0x88>)
     732:	6153      	str	r3, [r2, #20]
     734:	2304      	movs	r3, #4
     736:	e9c2 5006 	strd	r5, r0, [r2, #24]
     73a:	f842 3f10 	str.w	r3, [r2, #16]!
     73e:	4819      	ldr	r0, [pc, #100]	; (7a4 <init_pmw3360+0x8c>)
     740:	2300      	movs	r3, #0
     742:	f44f 5104 	mov.w	r1, #8448	; 0x2100
     746:	f007 f9cf 	bl	7ae8 <z_impl_z_log_msg2_static_create>
	const struct sensor_value enable_rest = {
     74a:	2300      	movs	r3, #0
     74c:	e9c7 3300 	strd	r3, r3, [r7]
     750:	46b5      	mov	sp, r6
	if (api->attr_set == NULL) {
     752:	68a3      	ldr	r3, [r4, #8]
     754:	681e      	ldr	r6, [r3, #0]
     756:	b1ee      	cbz	r6, 794 <init_pmw3360+0x7c>
	return api->attr_set(dev, chan, attr, val);
     758:	463b      	mov	r3, r7
     75a:	220f      	movs	r2, #15
     75c:	2139      	movs	r1, #57	; 0x39
     75e:	4620      	mov	r0, r4
     760:	47b0      	blx	r6
    LOG_DBG("Error val: %d", err);
     762:	4b11      	ldr	r3, [pc, #68]	; (7a8 <init_pmw3360+0x90>)
     764:	466e      	mov	r6, sp
     766:	b088      	sub	sp, #32
     768:	466a      	mov	r2, sp
     76a:	e9c2 3505 	strd	r3, r5, [r2, #20]
     76e:	2304      	movs	r3, #4
     770:	61d0      	str	r0, [r2, #28]
     772:	f842 3f10 	str.w	r3, [r2, #16]!
     776:	2300      	movs	r3, #0
     778:	480a      	ldr	r0, [pc, #40]	; (7a4 <init_pmw3360+0x8c>)
     77a:	f44f 5104 	mov.w	r1, #8448	; 0x2100
     77e:	f007 f9b3 	bl	7ae8 <z_impl_z_log_msg2_static_create>
    set_cpi(dev, INIT_CPI);
     782:	f44f 7148 	mov.w	r1, #800	; 0x320
     786:	46b5      	mov	sp, r6
     788:	4620      	mov	r0, r4
     78a:	f7ff ff8f 	bl	6ac <set_cpi>
}
     78e:	370c      	adds	r7, #12
     790:	46bd      	mov	sp, r7
     792:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOSYS;
     794:	f06f 0057 	mvn.w	r0, #87	; 0x57
     798:	e7e3      	b.n	762 <init_pmw3360+0x4a>
     79a:	bf00      	nop
     79c:	00008d7f 	.word	0x00008d7f
     7a0:	00008d4f 	.word	0x00008d4f
     7a4:	00008910 	.word	0x00008910
     7a8:	00008d5e 	.word	0x00008d5e

000007ac <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     7ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     7b0:	b08d      	sub	sp, #52	; 0x34
     7b2:	461f      	mov	r7, r3
     7b4:	9b16      	ldr	r3, [sp, #88]	; 0x58
     7b6:	9202      	str	r2, [sp, #8]
     7b8:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     7ba:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     7be:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     7c2:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     7c4:	1c53      	adds	r3, r2, #1

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     7c6:	0782      	lsls	r2, r0, #30
{
     7c8:	4605      	mov	r5, r0
     7ca:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     7cc:	9304      	str	r3, [sp, #16]
	if ((uintptr_t)packaged % sizeof(void *)) {
     7ce:	f040 8221 	bne.w	c14 <CONFIG_ISR_STACK_SIZE+0x414>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     7d2:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     7d4:	2800      	cmp	r0, #0
     7d6:	f040 8220 	bne.w	c1a <CONFIG_ISR_STACK_SIZE+0x41a>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     7da:	f001 0607 	and.w	r6, r1, #7
     7de:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     7e0:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     7e4:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
     7e8:	f04f 0804 	mov.w	r8, #4
	s = fmt--;
     7ec:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     7ee:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     7f2:	4652      	mov	r2, sl
	bool parsing = false;
     7f4:	46d1      	mov	r9, sl
	size = sizeof(char *);
     7f6:	4641      	mov	r1, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     7f8:	b105      	cbz	r5, 7fc <cbvprintf_package+0x50>
				*(const char **)buf = s;
     7fa:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     7fc:	9804      	ldr	r0, [sp, #16]
     7fe:	2800      	cmp	r0, #0
     800:	dc07      	bgt.n	812 <CONFIG_ISR_STACK_SIZE+0x12>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     802:	48cb      	ldr	r0, [pc, #812]	; (b30 <CONFIG_ISR_STACK_SIZE+0x330>)
     804:	4287      	cmp	r7, r0
     806:	f0c0 8141 	bcc.w	a8c <CONFIG_ISR_STACK_SIZE+0x28c>
     80a:	48ca      	ldr	r0, [pc, #808]	; (b34 <CONFIG_ISR_STACK_SIZE+0x334>)
     80c:	4287      	cmp	r7, r0
     80e:	f080 813d 	bcs.w	a8c <CONFIG_ISR_STACK_SIZE+0x28c>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     812:	9802      	ldr	r0, [sp, #8]
     814:	f010 0e02 	ands.w	lr, r0, #2
     818:	f000 8151 	beq.w	abe <CONFIG_ISR_STACK_SIZE+0x2be>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     81c:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     820:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     822:	f1be 0f00 	cmp.w	lr, #0
     826:	f000 8137 	beq.w	a98 <CONFIG_ISR_STACK_SIZE+0x298>
     82a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
     82e:	f0c0 8133 	bcc.w	a98 <CONFIG_ISR_STACK_SIZE+0x298>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
     832:	f06f 0015 	mvn.w	r0, #21
     836:	e0fe      	b.n	a36 <CONFIG_ISR_STACK_SIZE+0x236>
		if (!parsing) {
     838:	f1b9 0f00 	cmp.w	r9, #0
     83c:	d108      	bne.n	850 <CONFIG_ISR_STACK_SIZE+0x50>
			if (*fmt == '%') {
     83e:	2825      	cmp	r0, #37	; 0x25
     840:	f040 8141 	bne.w	ac6 <CONFIG_ISR_STACK_SIZE+0x2c6>
				parsing = true;
     844:	f04f 0901 	mov.w	r9, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
     848:	f04f 0804 	mov.w	r8, #4
			size = sizeof(intmax_t);
     84c:	4641      	mov	r1, r8
     84e:	e13a      	b.n	ac6 <CONFIG_ISR_STACK_SIZE+0x2c6>
		switch (*fmt) {
     850:	282b      	cmp	r0, #43	; 0x2b
     852:	d825      	bhi.n	8a0 <CONFIG_ISR_STACK_SIZE+0xa0>
     854:	281f      	cmp	r0, #31
     856:	d802      	bhi.n	85e <CONFIG_ISR_STACK_SIZE+0x5e>
			parsing = false;
     858:	f04f 0900 	mov.w	r9, #0
     85c:	e133      	b.n	ac6 <CONFIG_ISR_STACK_SIZE+0x2c6>
		switch (*fmt) {
     85e:	f1a0 0c20 	sub.w	ip, r0, #32
     862:	f1bc 0f0b 	cmp.w	ip, #11
     866:	d8f7      	bhi.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     868:	f20f 0e04 	addw	lr, pc, #4
     86c:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
     870:	00000ac7 	.word	0x00000ac7
     874:	00000859 	.word	0x00000859
     878:	00000859 	.word	0x00000859
     87c:	00000ac7 	.word	0x00000ac7
     880:	00000859 	.word	0x00000859
     884:	00000859 	.word	0x00000859
     888:	00000859 	.word	0x00000859
     88c:	00000859 	.word	0x00000859
     890:	00000859 	.word	0x00000859
     894:	00000859 	.word	0x00000859
     898:	00000a57 	.word	0x00000a57
     89c:	00000ac7 	.word	0x00000ac7
     8a0:	f1a0 0c2d 	sub.w	ip, r0, #45	; 0x2d
     8a4:	fa5f fe8c 	uxtb.w	lr, ip
     8a8:	f1be 0f4d 	cmp.w	lr, #77	; 0x4d
     8ac:	d8d4      	bhi.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     8ae:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
     8b2:	d8d1      	bhi.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     8b4:	f20f 0e04 	addw	lr, pc, #4
     8b8:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
     8bc:	00000ac7 	.word	0x00000ac7
     8c0:	00000ac7 	.word	0x00000ac7
     8c4:	00000859 	.word	0x00000859
     8c8:	00000ac7 	.word	0x00000ac7
     8cc:	00000ac7 	.word	0x00000ac7
     8d0:	00000ac7 	.word	0x00000ac7
     8d4:	00000ac7 	.word	0x00000ac7
     8d8:	00000ac7 	.word	0x00000ac7
     8dc:	00000ac7 	.word	0x00000ac7
     8e0:	00000ac7 	.word	0x00000ac7
     8e4:	00000ac7 	.word	0x00000ac7
     8e8:	00000ac7 	.word	0x00000ac7
     8ec:	00000ac7 	.word	0x00000ac7
     8f0:	00000859 	.word	0x00000859
     8f4:	00000859 	.word	0x00000859
     8f8:	00000859 	.word	0x00000859
     8fc:	00000859 	.word	0x00000859
     900:	00000859 	.word	0x00000859
     904:	00000859 	.word	0x00000859
     908:	00000859 	.word	0x00000859
     90c:	00000a13 	.word	0x00000a13
     910:	00000859 	.word	0x00000859
     914:	00000859 	.word	0x00000859
     918:	00000859 	.word	0x00000859
     91c:	00000a13 	.word	0x00000a13
     920:	00000a13 	.word	0x00000a13
     924:	00000a13 	.word	0x00000a13
     928:	00000859 	.word	0x00000859
     92c:	00000859 	.word	0x00000859
     930:	00000859 	.word	0x00000859
     934:	00000859 	.word	0x00000859
     938:	00000ac7 	.word	0x00000ac7
     93c:	00000859 	.word	0x00000859
     940:	00000859 	.word	0x00000859
     944:	00000859 	.word	0x00000859
     948:	00000859 	.word	0x00000859
     94c:	00000859 	.word	0x00000859
     950:	00000859 	.word	0x00000859
     954:	00000859 	.word	0x00000859
     958:	00000859 	.word	0x00000859
     95c:	00000859 	.word	0x00000859
     960:	00000859 	.word	0x00000859
     964:	00000859 	.word	0x00000859
     968:	000009f5 	.word	0x000009f5
     96c:	00000859 	.word	0x00000859
     970:	00000859 	.word	0x00000859
     974:	00000859 	.word	0x00000859
     978:	00000859 	.word	0x00000859
     97c:	00000859 	.word	0x00000859
     980:	00000859 	.word	0x00000859
     984:	00000859 	.word	0x00000859
     988:	00000859 	.word	0x00000859
     98c:	00000a13 	.word	0x00000a13
     990:	00000859 	.word	0x00000859
     994:	000009f5 	.word	0x000009f5
     998:	000009f5 	.word	0x000009f5
     99c:	00000a13 	.word	0x00000a13
     9a0:	00000a13 	.word	0x00000a13
     9a4:	00000a13 	.word	0x00000a13
     9a8:	00000ac7 	.word	0x00000ac7
     9ac:	000009f5 	.word	0x000009f5
     9b0:	00000a47 	.word	0x00000a47
     9b4:	00000859 	.word	0x00000859
     9b8:	00000ac7 	.word	0x00000ac7
     9bc:	00000859 	.word	0x00000859
     9c0:	00000a4d 	.word	0x00000a4d
     9c4:	000009f5 	.word	0x000009f5
     9c8:	00000a4d 	.word	0x00000a4d
     9cc:	00000859 	.word	0x00000859
     9d0:	00000859 	.word	0x00000859
     9d4:	00000a4d 	.word	0x00000a4d
     9d8:	00000849 	.word	0x00000849
     9dc:	000009f5 	.word	0x000009f5
     9e0:	00000859 	.word	0x00000859
     9e4:	00000859 	.word	0x00000859
     9e8:	000009f5 	.word	0x000009f5
     9ec:	00000859 	.word	0x00000859
     9f0:	00000849 	.word	0x00000849
			if (fmt[-1] == 'l') {
     9f4:	f813 cc01 	ldrb.w	ip, [r3, #-1]
     9f8:	f1bc 0f6c 	cmp.w	ip, #108	; 0x6c
     9fc:	d129      	bne.n	a52 <CONFIG_ISR_STACK_SIZE+0x252>
				if (fmt[-2] == 'l') {
     9fe:	f813 1c02 	ldrb.w	r1, [r3, #-2]
     a02:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
     a04:	f04f 0900 	mov.w	r9, #0
				if (fmt[-2] == 'l') {
     a08:	d03d      	beq.n	a86 <CONFIG_ISR_STACK_SIZE+0x286>
			align = VA_STACK_ALIGN(void *);
     a0a:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long long);
     a0e:	4641      	mov	r1, r8
     a10:	e021      	b.n	a56 <CONFIG_ISR_STACK_SIZE+0x256>
				v.ld = va_arg(ap, long double);
     a12:	9800      	ldr	r0, [sp, #0]
     a14:	f100 0b07 	add.w	fp, r0, #7
     a18:	f02b 0007 	bic.w	r0, fp, #7
     a1c:	e8f0 8902 	ldrd	r8, r9, [r0], #8
			buf = (void *) ROUND_UP(buf, align);
     a20:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
     a22:	9000      	str	r0, [sp, #0]
			buf = (void *) ROUND_UP(buf, align);
     a24:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
     a28:	b155      	cbz	r5, a40 <CONFIG_ISR_STACK_SIZE+0x240>
				if (BUF_OFFSET + size > len) {
     a2a:	9805      	ldr	r0, [sp, #20]
     a2c:	4420      	add	r0, r4
     a2e:	42b0      	cmp	r0, r6
     a30:	d904      	bls.n	a3c <CONFIG_ISR_STACK_SIZE+0x23c>
					return -ENOSPC;
     a32:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     a36:	b00d      	add	sp, #52	; 0x34
     a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
     a3c:	e9c4 8900 	strd	r8, r9, [r4]
			buf += size;
     a40:	3408      	adds	r4, #8
			parsing = false;
     a42:	f04f 0900 	mov.w	r9, #0
			align = VA_STACK_ALIGN(intmax_t);
     a46:	f04f 0808 	mov.w	r8, #8
     a4a:	e6ff      	b.n	84c <CONFIG_ISR_STACK_SIZE+0x4c>
			parsing = false;
     a4c:	f04f 0900 	mov.w	r9, #0
     a50:	e7db      	b.n	a0a <CONFIG_ISR_STACK_SIZE+0x20a>
			parsing = false;
     a52:	f04f 0900 	mov.w	r9, #0
		buf = (void *) ROUND_UP(buf, align);
     a56:	3c01      	subs	r4, #1
     a58:	4444      	add	r4, r8
     a5a:	f1c8 0c00 	rsb	ip, r8, #0
     a5e:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     a62:	b125      	cbz	r5, a6e <CONFIG_ISR_STACK_SIZE+0x26e>
     a64:	eba1 0c05 	sub.w	ip, r1, r5
     a68:	44a4      	add	ip, r4
     a6a:	45b4      	cmp	ip, r6
     a6c:	d8e1      	bhi.n	a32 <CONFIG_ISR_STACK_SIZE+0x232>
		if (*fmt == 's') {
     a6e:	2873      	cmp	r0, #115	; 0x73
     a70:	d152      	bne.n	b18 <CONFIG_ISR_STACK_SIZE+0x318>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     a72:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
     a74:	f8dd b000 	ldr.w	fp, [sp]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     a78:	3801      	subs	r0, #1
			s = va_arg(ap, char *);
     a7a:	f85b 7b04 	ldr.w	r7, [fp], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     a7e:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
     a80:	f8cd b000 	str.w	fp, [sp]
     a84:	e6b8      	b.n	7f8 <cbvprintf_package+0x4c>
					align = VA_STACK_ALIGN(long long);
     a86:	f04f 0808 	mov.w	r8, #8
     a8a:	e7c0      	b.n	a0e <CONFIG_ISR_STACK_SIZE+0x20e>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     a8c:	9802      	ldr	r0, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     a8e:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     a92:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
     a96:	e6c3      	b.n	820 <CONFIG_ISR_STACK_SIZE+0x20>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     a98:	2a0f      	cmp	r2, #15
     a9a:	f63f aeca 	bhi.w	832 <CONFIG_ISR_STACK_SIZE+0x32>
				if (buf0 != NULL) {
     a9e:	b345      	cbz	r5, af2 <CONFIG_ISR_STACK_SIZE+0x2f2>
					str_ptr_pos[s_idx] = s_ptr_idx;
     aa0:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
     aa4:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
     aa8:	4496      	add	lr, r2
     aaa:	f1bc 0f00 	cmp.w	ip, #0
     aae:	d01a      	beq.n	ae6 <CONFIG_ISR_STACK_SIZE+0x2e6>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     ab0:	f060 007f 	orn	r0, r0, #127	; 0x7f
     ab4:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
     ab8:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
     abc:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
     abe:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
     ac2:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
     ac4:	9005      	str	r0, [sp, #20]
	while (*++fmt != '\0') {
     ac6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     aca:	2800      	cmp	r0, #0
     acc:	f47f aeb4 	bne.w	838 <CONFIG_ISR_STACK_SIZE+0x38>
	if (BUF_OFFSET / sizeof(int) > 255) {
     ad0:	1b61      	subs	r1, r4, r5
     ad2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
     ad6:	f4bf aeac 	bcs.w	832 <CONFIG_ISR_STACK_SIZE+0x32>
	if (buf0 == NULL) {
     ada:	2d00      	cmp	r5, #0
     adc:	d13e      	bne.n	b5c <CONFIG_ISR_STACK_SIZE+0x35c>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     ade:	f1a6 0408 	sub.w	r4, r6, #8
     ae2:	1860      	adds	r0, r4, r1
     ae4:	e7a7      	b.n	a36 <CONFIG_ISR_STACK_SIZE+0x236>
					str_ptr_pos[s_idx] = s_ptr_idx;
     ae6:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
     aea:	9803      	ldr	r0, [sp, #12]
     aec:	3001      	adds	r0, #1
     aee:	9003      	str	r0, [sp, #12]
     af0:	e7e4      	b.n	abc <CONFIG_ISR_STACK_SIZE+0x2bc>
				} else if (is_ro || rws_pos_en) {
     af2:	f1bc 0f00 	cmp.w	ip, #0
     af6:	d101      	bne.n	afc <CONFIG_ISR_STACK_SIZE+0x2fc>
     af8:	9801      	ldr	r0, [sp, #4]
     afa:	b108      	cbz	r0, b00 <CONFIG_ISR_STACK_SIZE+0x300>
					len += 1;
     afc:	3601      	adds	r6, #1
     afe:	e7dd      	b.n	abc <CONFIG_ISR_STACK_SIZE+0x2bc>
					len += strlen(s) + 1 + 1;
     b00:	4638      	mov	r0, r7
     b02:	e9cd 1206 	strd	r1, r2, [sp, #24]
     b06:	9305      	str	r3, [sp, #20]
     b08:	f007 f84f 	bl	7baa <strlen>
     b0c:	3602      	adds	r6, #2
     b0e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
     b12:	9b05      	ldr	r3, [sp, #20]
     b14:	4406      	add	r6, r0
     b16:	e7d1      	b.n	abc <CONFIG_ISR_STACK_SIZE+0x2bc>
		} else if (size == sizeof(int)) {
     b18:	2904      	cmp	r1, #4
     b1a:	d10d      	bne.n	b38 <CONFIG_ISR_STACK_SIZE+0x338>
			int v = va_arg(ap, int);
     b1c:	9800      	ldr	r0, [sp, #0]
     b1e:	f100 0c04 	add.w	ip, r0, #4
			if (buf0 != NULL) {
     b22:	b10d      	cbz	r5, b28 <CONFIG_ISR_STACK_SIZE+0x328>
			int v = va_arg(ap, int);
     b24:	6800      	ldr	r0, [r0, #0]
				*(int *)buf = v;
     b26:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
     b28:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
     b2a:	f8cd c000 	str.w	ip, [sp]
     b2e:	e7ca      	b.n	ac6 <CONFIG_ISR_STACK_SIZE+0x2c6>
     b30:	000086a0 	.word	0x000086a0
     b34:	0000a9f0 	.word	0x0000a9f0
		} else if (size == sizeof(long long)) {
     b38:	2908      	cmp	r1, #8
     b3a:	f47f ae7a 	bne.w	832 <CONFIG_ISR_STACK_SIZE+0x32>
			long long v = va_arg(ap, long long);
     b3e:	9800      	ldr	r0, [sp, #0]
     b40:	3007      	adds	r0, #7
     b42:	f020 0007 	bic.w	r0, r0, #7
     b46:	f100 0c08 	add.w	ip, r0, #8
     b4a:	f8cd c000 	str.w	ip, [sp]
			if (buf0 != NULL) {
     b4e:	b11d      	cbz	r5, b58 <CONFIG_ISR_STACK_SIZE+0x358>
			long long v = va_arg(ap, long long);
     b50:	e9d0 bc00 	ldrd	fp, ip, [r0]
     b54:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
     b58:	3408      	adds	r4, #8
     b5a:	e7b4      	b.n	ac6 <CONFIG_ISR_STACK_SIZE+0x2c6>
	if (rws_pos_en) {
     b5c:	9b01      	ldr	r3, [sp, #4]
	*(char **)buf0 = NULL;
     b5e:	6028      	str	r0, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
     b60:	0889      	lsrs	r1, r1, #2
     b62:	7029      	strb	r1, [r5, #0]
		buf0[3] = s_rw_cnt;
     b64:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
     b68:	b1a3      	cbz	r3, b94 <CONFIG_ISR_STACK_SIZE+0x394>
		buf0[1] = 0;
     b6a:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
     b6c:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
     b6e:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
     b72:	f1ba 0f00 	cmp.w	sl, #0
     b76:	d006      	beq.n	b86 <CONFIG_ISR_STACK_SIZE+0x386>
     b78:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
     b7a:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
     b7e:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
     b82:	4562      	cmp	r2, ip
     b84:	d10a      	bne.n	b9c <CONFIG_ISR_STACK_SIZE+0x39c>
     b86:	f10d 0820 	add.w	r8, sp, #32
     b8a:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
     b8e:	f1c5 0b01 	rsb	fp, r5, #1
     b92:	e039      	b.n	c08 <CONFIG_ISR_STACK_SIZE+0x408>
		buf0[3] = 0;
     b94:	9b01      	ldr	r3, [sp, #4]
		buf0[1] = s_rw_cnt;
     b96:	7069      	strb	r1, [r5, #1]
		buf0[3] = 0;
     b98:	70eb      	strb	r3, [r5, #3]
     b9a:	e7e8      	b.n	b6e <CONFIG_ISR_STACK_SIZE+0x36e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     b9c:	f810 1b01 	ldrb.w	r1, [r0], #1
     ba0:	060b      	lsls	r3, r1, #24
     ba2:	d508      	bpl.n	bb6 <CONFIG_ISR_STACK_SIZE+0x3b6>
			if (BUF_OFFSET + 1 > len) {
     ba4:	eb04 080e 	add.w	r8, r4, lr
     ba8:	45b0      	cmp	r8, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     baa:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     bae:	f63f af40 	bhi.w	a32 <CONFIG_ISR_STACK_SIZE+0x232>
			*buf++ = pos;
     bb2:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
     bb6:	f10c 0c01 	add.w	ip, ip, #1
     bba:	e7e2      	b.n	b82 <CONFIG_ISR_STACK_SIZE+0x382>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     bbc:	f1ba 0f00 	cmp.w	sl, #0
     bc0:	d003      	beq.n	bca <CONFIG_ISR_STACK_SIZE+0x3ca>
     bc2:	f998 2000 	ldrsb.w	r2, [r8]
     bc6:	2a00      	cmp	r2, #0
     bc8:	db1c      	blt.n	c04 <CONFIG_ISR_STACK_SIZE+0x404>
		if (rws_pos_en) {
     bca:	9b01      	ldr	r3, [sp, #4]
     bcc:	bb03      	cbnz	r3, c10 <CONFIG_ISR_STACK_SIZE+0x410>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     bce:	f898 2000 	ldrb.w	r2, [r8]
     bd2:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     bd6:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
     bda:	4638      	mov	r0, r7
     bdc:	f006 ffe5 	bl	7baa <strlen>
     be0:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
     be2:	eb04 010b 	add.w	r1, r4, fp
     be6:	4411      	add	r1, r2
     be8:	42b1      	cmp	r1, r6
     bea:	f63f af22 	bhi.w	a32 <CONFIG_ISR_STACK_SIZE+0x232>
		*buf++ = str_ptr_pos[i];
     bee:	f898 1000 	ldrb.w	r1, [r8]
     bf2:	f804 1b01 	strb.w	r1, [r4], #1
		memcpy(buf, s, size);
     bf6:	4639      	mov	r1, r7
     bf8:	4620      	mov	r0, r4
     bfa:	9200      	str	r2, [sp, #0]
     bfc:	f006 fff1 	bl	7be2 <memcpy>
		buf += size;
     c00:	9a00      	ldr	r2, [sp, #0]
     c02:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
     c04:	f108 0801 	add.w	r8, r8, #1
     c08:	45c1      	cmp	r9, r8
     c0a:	d1d7      	bne.n	bbc <CONFIG_ISR_STACK_SIZE+0x3bc>
	return BUF_OFFSET;
     c0c:	1b60      	subs	r0, r4, r5
     c0e:	e712      	b.n	a36 <CONFIG_ISR_STACK_SIZE+0x236>
			size = 0;
     c10:	2200      	movs	r2, #0
     c12:	e7e6      	b.n	be2 <CONFIG_ISR_STACK_SIZE+0x3e2>
		return -EFAULT;
     c14:	f06f 000d 	mvn.w	r0, #13
     c18:	e70d      	b.n	a36 <CONFIG_ISR_STACK_SIZE+0x236>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     c1a:	2907      	cmp	r1, #7
     c1c:	f63f ade2 	bhi.w	7e4 <cbvprintf_package+0x38>
     c20:	e707      	b.n	a32 <CONFIG_ISR_STACK_SIZE+0x232>
     c22:	bf00      	nop

00000c24 <cbprintf_package_copy>:
			  void *packaged,
			  size_t len,
			  uint32_t flags,
			  uint16_t *strl,
			  size_t strl_len)
{
     c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c28:	b08b      	sub	sp, #44	; 0x2c
     c2a:	4606      	mov	r6, r0
     c2c:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
     c30:	9304      	str	r3, [sp, #16]
     c32:	4614      	mov	r4, r2
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;

	in_len != 0 ? in_len : get_package_len(in_packaged);
     c34:	460f      	mov	r7, r1
     c36:	b1b1      	cbz	r1, c66 <cbprintf_package_copy+0x42>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = buf[2];
     c38:	78b5      	ldrb	r5, [r6, #2]
     c3a:	9505      	str	r5, [sp, #20]
	ro_cpy = ros_nbr &&
     c3c:	bb35      	cbnz	r5, c8c <cbprintf_package_copy+0x68>
     c3e:	46aa      	mov	sl, r5
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = buf[3];
     c40:	78f3      	ldrb	r3, [r6, #3]
     c42:	9301      	str	r3, [sp, #4]
	rw_cpy = rws_nbr > 0 &&
     c44:	b113      	cbz	r3, c4c <cbprintf_package_copy+0x28>

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
     c46:	f01b 0f02 	tst.w	fp, #2
     c4a:	d122      	bne.n	c92 <cbprintf_package_copy+0x6e>
     c4c:	f1ba 0f00 	cmp.w	sl, #0
     c50:	d11f      	bne.n	c92 <cbprintf_package_copy+0x6e>
		if (packaged) {
     c52:	b124      	cbz	r4, c5e <cbprintf_package_copy+0x3a>
			memcpy(packaged, in_packaged, in_len);
     c54:	463a      	mov	r2, r7
     c56:	4631      	mov	r1, r6
     c58:	4620      	mov	r0, r4
     c5a:	f006 ffc2 	bl	7be2 <memcpy>
			}

			str_pos++;
		}

		return out_len;
     c5e:	4638      	mov	r0, r7
		rem -= cpy_len;
		dst += cpy_len;
	}

	return len - rem;
}
     c60:	b00b      	add	sp, #44	; 0x2c
     c62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s_nbr     = buf[1];
     c66:	f890 9001 	ldrb.w	r9, [r0, #1]
	buf += ros_nbr;
     c6a:	78b5      	ldrb	r5, [r6, #2]
     c6c:	7800      	ldrb	r0, [r0, #0]
     c6e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
     c72:	4435      	add	r5, r6
	for (int i = 0; i < s_nbr; i++) {
     c74:	468a      	mov	sl, r1
     c76:	45ca      	cmp	sl, r9
     c78:	d2de      	bcs.n	c38 <cbprintf_package_copy+0x14>
		buf++;
     c7a:	3501      	adds	r5, #1
		buf += strlen((const char *)buf) + 1;
     c7c:	4628      	mov	r0, r5
     c7e:	f006 ff94 	bl	7baa <strlen>
     c82:	3001      	adds	r0, #1
     c84:	4405      	add	r5, r0
	for (int i = 0; i < s_nbr; i++) {
     c86:	f10a 0a01 	add.w	sl, sl, #1
     c8a:	e7f4      	b.n	c76 <cbprintf_package_copy+0x52>
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
     c8c:	f00b 0a01 	and.w	sl, fp, #1
     c90:	e7d6      	b.n	c40 <cbprintf_package_copy+0x1c>
	args_size = buf[0] * sizeof(int);
     c92:	f896 9000 	ldrb.w	r9, [r6]
     c96:	ea4f 0389 	mov.w	r3, r9, lsl #2
     c9a:	9303      	str	r3, [sp, #12]
	uint8_t *str_pos = &buf[args_size];
     c9c:	eb06 0989 	add.w	r9, r6, r9, lsl #2
	if (packaged == NULL) {
     ca0:	2c00      	cmp	r4, #0
     ca2:	d15b      	bne.n	d5c <cbprintf_package_copy+0x138>
		if (ro_cpy) {
     ca4:	f1ba 0f00 	cmp.w	sl, #0
     ca8:	d032      	beq.n	d10 <cbprintf_package_copy+0xec>
     caa:	444d      	add	r5, r9
			for (int i = 0; i < ros_nbr; i++) {
     cac:	454d      	cmp	r5, r9
     cae:	d11d      	bne.n	cec <cbprintf_package_copy+0xc8>
     cb0:	46a9      	mov	r9, r5
		bool drop_ro_str_pos = !(flags &
     cb2:	f8dd a004 	ldr.w	sl, [sp, #4]
     cb6:	f8df c204 	ldr.w	ip, [pc, #516]	; ebc <cbprintf_package_copy+0x298>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     cba:	4981      	ldr	r1, [pc, #516]	; (ec0 <cbprintf_package_copy+0x29c>)
		bool drop_ro_str_pos = !(flags &
     cbc:	f00b 0805 	and.w	r8, fp, #5
		for (int i = 0; i < rws_nbr; i++) {
     cc0:	464d      	mov	r5, r9
     cc2:	44ca      	add	sl, r9
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     cc4:	f00b 0202 	and.w	r2, fp, #2
		for (int i = 0; i < rws_nbr; i++) {
     cc8:	45aa      	cmp	sl, r5
     cca:	d0c8      	beq.n	c5e <cbprintf_package_copy+0x3a>
			const char *str = *(const char **)&buf32[*str_pos];
     ccc:	f815 0b01 	ldrb.w	r0, [r5], #1
     cd0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
     cd4:	4560      	cmp	r0, ip
     cd6:	d324      	bcc.n	d22 <cbprintf_package_copy+0xfe>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     cd8:	4288      	cmp	r0, r1
     cda:	d222      	bcs.n	d22 <cbprintf_package_copy+0xfe>
     cdc:	f01b 0f01 	tst.w	fp, #1
     ce0:	d139      	bne.n	d56 <cbprintf_package_copy+0x132>
			if (is_ro && drop_ro_str_pos) {
     ce2:	f1b8 0f00 	cmp.w	r8, #0
     ce6:	d1ef      	bne.n	cc8 <cbprintf_package_copy+0xa4>
				out_len--;
     ce8:	3f01      	subs	r7, #1
		for (int i = 0; i < rws_nbr; i++) {
     cea:	e7ed      	b.n	cc8 <cbprintf_package_copy+0xa4>
				const char *str = *(const char **)&buf32[*str_pos];
     cec:	f819 3b01 	ldrb.w	r3, [r9], #1
		return 1 + strlen(str);
     cf0:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
     cf4:	f006 ff59 	bl	7baa <strlen>
				if (strl && strl_cnt < strl_len) {
     cf8:	9b15      	ldr	r3, [sp, #84]	; 0x54
		return 1 + strlen(str);
     cfa:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     cfc:	b133      	cbz	r3, d0c <cbprintf_package_copy+0xe8>
     cfe:	9b16      	ldr	r3, [sp, #88]	; 0x58
     d00:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
     d02:	bf3e      	ittt	cc
     d04:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
     d06:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
     d0a:	3401      	addcc	r4, #1
				out_len += len;
     d0c:	4407      	add	r7, r0
			for (int i = 0; i < ros_nbr; i++) {
     d0e:	e7cd      	b.n	cac <cbprintf_package_copy+0x88>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     d10:	b12d      	cbz	r5, d1e <cbprintf_package_copy+0xfa>
     d12:	f01b 0404 	ands.w	r4, fp, #4
     d16:	d0cc      	beq.n	cb2 <cbprintf_package_copy+0x8e>
				str_pos += ros_nbr;
     d18:	44a9      	add	r9, r5
	size_t strl_cnt = 0;
     d1a:	4654      	mov	r4, sl
     d1c:	e7c9      	b.n	cb2 <cbprintf_package_copy+0x8e>
     d1e:	462c      	mov	r4, r5
     d20:	e7c7      	b.n	cb2 <cbprintf_package_copy+0x8e>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     d22:	2a00      	cmp	r2, #0
     d24:	d0d0      	beq.n	cc8 <cbprintf_package_copy+0xa4>
     d26:	f04f 0900 	mov.w	r9, #0
		return 1 + strlen(str);
     d2a:	9201      	str	r2, [sp, #4]
     d2c:	f006 ff3d 	bl	7baa <strlen>
				if (strl && strl_cnt < strl_len) {
     d30:	9b15      	ldr	r3, [sp, #84]	; 0x54
     d32:	f8df c188 	ldr.w	ip, [pc, #392]	; ebc <cbprintf_package_copy+0x298>
     d36:	9a01      	ldr	r2, [sp, #4]
     d38:	4961      	ldr	r1, [pc, #388]	; (ec0 <cbprintf_package_copy+0x29c>)
		return 1 + strlen(str);
     d3a:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     d3c:	b133      	cbz	r3, d4c <cbprintf_package_copy+0x128>
     d3e:	9b16      	ldr	r3, [sp, #88]	; 0x58
     d40:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
     d42:	bf3e      	ittt	cc
     d44:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
     d46:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
     d4a:	3401      	addcc	r4, #1
				out_len += len;
     d4c:	4407      	add	r7, r0
			if (is_ro && drop_ro_str_pos) {
     d4e:	f1b9 0f00 	cmp.w	r9, #0
     d52:	d0b9      	beq.n	cc8 <cbprintf_package_copy+0xa4>
     d54:	e7c5      	b.n	ce2 <cbprintf_package_copy+0xbe>
     d56:	f04f 0901 	mov.w	r9, #1
     d5a:	e7e6      	b.n	d2a <cbprintf_package_copy+0x106>
	memcpy(dst, in_packaged, args_size);
     d5c:	9a03      	ldr	r2, [sp, #12]
     d5e:	4631      	mov	r1, r6
     d60:	4620      	mov	r0, r4
     d62:	f006 ff3e 	bl	7be2 <memcpy>
	dst += args_size;
     d66:	9b03      	ldr	r3, [sp, #12]
     d68:	18e3      	adds	r3, r4, r3
     d6a:	9302      	str	r3, [sp, #8]
	if (ro_cpy) {
     d6c:	f1ba 0f00 	cmp.w	sl, #0
     d70:	d00a      	beq.n	d88 <cbprintf_package_copy+0x164>
		memcpy(cpy_str_pos, str_pos, ros_nbr);
     d72:	4649      	mov	r1, r9
     d74:	462a      	mov	r2, r5
     d76:	a806      	add	r0, sp, #24
     d78:	f006 ff33 	bl	7be2 <memcpy>
		dst_hdr[2] = 0;
     d7c:	2300      	movs	r3, #0
     d7e:	70a3      	strb	r3, [r4, #2]
		str_pos += ros_nbr;
     d80:	44a9      	add	r9, r5
	dst += args_size;
     d82:	f8dd 8008 	ldr.w	r8, [sp, #8]
     d86:	e00d      	b.n	da4 <cbprintf_package_copy+0x180>
		if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     d88:	b1bd      	cbz	r5, dba <cbprintf_package_copy+0x196>
     d8a:	f01b 0f04 	tst.w	fp, #4
     d8e:	d014      	beq.n	dba <cbprintf_package_copy+0x196>
			memcpy(dst, str_pos, ros_nbr);
     d90:	462a      	mov	r2, r5
     d92:	4649      	mov	r1, r9
     d94:	9802      	ldr	r0, [sp, #8]
     d96:	f006 ff24 	bl	7be2 <memcpy>
			dst += ros_nbr;
     d9a:	9b02      	ldr	r3, [sp, #8]
			str_pos += ros_nbr;
     d9c:	44a9      	add	r9, r5
			dst += ros_nbr;
     d9e:	eb03 0805 	add.w	r8, r3, r5
		scpy_cnt = 0;
     da2:	4655      	mov	r5, sl
     da4:	9b01      	ldr	r3, [sp, #4]
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     da6:	f00b 0e02 	and.w	lr, fp, #2
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     daa:	f00b 0001 	and.w	r0, fp, #1
     dae:	464a      	mov	r2, r9
     db0:	eb09 0c03 	add.w	ip, r9, r3
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     db4:	f00b 0b04 	and.w	fp, fp, #4
     db8:	e025      	b.n	e06 <cbprintf_package_copy+0x1e2>
			dst_hdr[2] = 0;
     dba:	2500      	movs	r5, #0
     dbc:	70a5      	strb	r5, [r4, #2]
     dbe:	e7e0      	b.n	d82 <cbprintf_package_copy+0x15e>
		const char *str = *(const char **)&buf32[*str_pos];
     dc0:	f812 3b01 	ldrb.w	r3, [r2], #1
     dc4:	f8df a0f4 	ldr.w	sl, [pc, #244]	; ebc <cbprintf_package_copy+0x298>
     dc8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
     dcc:	4551      	cmp	r1, sl
     dce:	d303      	bcc.n	dd8 <cbprintf_package_copy+0x1b4>
     dd0:	f8df a0ec 	ldr.w	sl, [pc, #236]	; ec0 <cbprintf_package_copy+0x29c>
     dd4:	4551      	cmp	r1, sl
     dd6:	d305      	bcc.n	de4 <cbprintf_package_copy+0x1c0>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     dd8:	f1be 0f00 	cmp.w	lr, #0
     ddc:	d103      	bne.n	de6 <cbprintf_package_copy+0x1c2>
				*dst++ = *str_pos;
     dde:	f808 3b01 	strb.w	r3, [r8], #1
	for (int i = 0; i < rws_nbr; i++) {
     de2:	e010      	b.n	e06 <cbprintf_package_copy+0x1e2>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     de4:	b138      	cbz	r0, df6 <cbprintf_package_copy+0x1d2>
				cpy_str_pos[scpy_cnt++] = *str_pos;
     de6:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
     dea:	1c69      	adds	r1, r5, #1
     dec:	4455      	add	r5, sl
     dee:	f805 3c10 	strb.w	r3, [r5, #-16]
     df2:	b2cd      	uxtb	r5, r1
     df4:	e007      	b.n	e06 <cbprintf_package_copy+0x1e2>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     df6:	f1bb 0f00 	cmp.w	fp, #0
     dfa:	d004      	beq.n	e06 <cbprintf_package_copy+0x1e2>
				*dst++ = *str_pos;
     dfc:	f808 3b01 	strb.w	r3, [r8], #1
				dst_hdr[2]++;
     e00:	78a3      	ldrb	r3, [r4, #2]
     e02:	3301      	adds	r3, #1
     e04:	70a3      	strb	r3, [r4, #2]
	for (int i = 0; i < rws_nbr; i++) {
     e06:	4594      	cmp	ip, r2
     e08:	d1da      	bne.n	dc0 <cbprintf_package_copy+0x19c>
	dst_hdr[1] += scpy_cnt;
     e0a:	7863      	ldrb	r3, [r4, #1]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     e0c:	9a01      	ldr	r2, [sp, #4]
	dst_hdr[1] += scpy_cnt;
     e0e:	442b      	add	r3, r5
     e10:	7063      	strb	r3, [r4, #1]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
     e12:	9b02      	ldr	r3, [sp, #8]
     e14:	eba8 0b03 	sub.w	fp, r8, r3
     e18:	78a3      	ldrb	r3, [r4, #2]
     e1a:	ebab 0b03 	sub.w	fp, fp, r3
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     e1e:	9b05      	ldr	r3, [sp, #20]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
     e20:	f884 b003 	strb.w	fp, [r4, #3]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     e24:	4413      	add	r3, r2
     e26:	1aff      	subs	r7, r7, r3
     e28:	9b03      	ldr	r3, [sp, #12]
     e2a:	1aff      	subs	r7, r7, r3
	memcpy(dst, str_pos, strs_len);
     e2c:	9b01      	ldr	r3, [sp, #4]
     e2e:	4640      	mov	r0, r8
     e30:	463a      	mov	r2, r7
     e32:	eb09 0103 	add.w	r1, r9, r3
	dst += strs_len;
     e36:	44b8      	add	r8, r7
	memcpy(dst, str_pos, strs_len);
     e38:	f006 fed3 	bl	7be2 <memcpy>
		return dst - dst_hdr;
     e3c:	eba8 0004 	sub.w	r0, r8, r4
	if (scpy_cnt == 0) {
     e40:	2d00      	cmp	r5, #0
     e42:	f43f af0d 	beq.w	c60 <cbprintf_package_copy+0x3c>
	size_t rem = len - ((size_t)(uintptr_t)(dst - dst_hdr));
     e46:	9b04      	ldr	r3, [sp, #16]
     e48:	1a1c      	subs	r4, r3, r0
	if (rem <= scpy_cnt) {
     e4a:	42a5      	cmp	r5, r4
     e4c:	d302      	bcc.n	e54 <cbprintf_package_copy+0x230>
		return -ENOSPC;
     e4e:	f06f 001b 	mvn.w	r0, #27
     e52:	e705      	b.n	c60 <cbprintf_package_copy+0x3c>
	for (int i = 0; i < scpy_cnt; i++) {
     e54:	f04f 0900 	mov.w	r9, #0
		uint8_t loc = cpy_str_pos[i];
     e58:	ab06      	add	r3, sp, #24
		uint16_t str_len = strl ? strl[i] : 0;
     e5a:	9a15      	ldr	r2, [sp, #84]	; 0x54
		uint8_t loc = cpy_str_pos[i];
     e5c:	f813 3009 	ldrb.w	r3, [r3, r9]
		const char *str = *(const char **)&buf32[loc];
     e60:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
     e64:	b1c2      	cbz	r2, e98 <cbprintf_package_copy+0x274>
     e66:	f832 7019 	ldrh.w	r7, [r2, r9, lsl #1]
		*dst = loc;
     e6a:	46c2      	mov	sl, r8
		rem--;
     e6c:	f104 3bff 	add.w	fp, r4, #4294967295
		*dst = loc;
     e70:	f80a 3b01 	strb.w	r3, [sl], #1
	if (strl) {
     e74:	b197      	cbz	r7, e9c <cbprintf_package_copy+0x278>
		memcpy(dst, str, strl);
     e76:	463a      	mov	r2, r7
     e78:	4650      	mov	r0, sl
     e7a:	f006 feb2 	bl	7be2 <memcpy>
	for (int i = 0; i < scpy_cnt; i++) {
     e7e:	f109 0901 	add.w	r9, r9, #1
     e82:	454d      	cmp	r5, r9
		rem -= cpy_len;
     e84:	ebab 0407 	sub.w	r4, fp, r7
		dst += cpy_len;
     e88:	eb0a 0807 	add.w	r8, sl, r7
	for (int i = 0; i < scpy_cnt; i++) {
     e8c:	dce4      	bgt.n	e58 <cbprintf_package_copy+0x234>
	return len - rem;
     e8e:	9b04      	ldr	r3, [sp, #16]
     e90:	441f      	add	r7, r3
     e92:	eba7 000b 	sub.w	r0, r7, fp
     e96:	e6e3      	b.n	c60 <cbprintf_package_copy+0x3c>
		uint16_t str_len = strl ? strl[i] : 0;
     e98:	9f15      	ldr	r7, [sp, #84]	; 0x54
     e9a:	e7e6      	b.n	e6a <cbprintf_package_copy+0x246>
     e9c:	3901      	subs	r1, #1
	if (strl) {
     e9e:	2301      	movs	r3, #1
	for (size_t i = 0; i < num; i++) {
     ea0:	429c      	cmp	r4, r3
     ea2:	d0d4      	beq.n	e4e <cbprintf_package_copy+0x22a>
		dst[i] = src[i];
     ea4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     ea8:	f808 2003 	strb.w	r2, [r8, r3]
		if (src[i] == '\0') {
     eac:	1c58      	adds	r0, r3, #1
     eae:	b912      	cbnz	r2, eb6 <cbprintf_package_copy+0x292>
		if (cpy_len < 0) {
     eb0:	1e1f      	subs	r7, r3, #0
     eb2:	dae4      	bge.n	e7e <cbprintf_package_copy+0x25a>
     eb4:	e7cb      	b.n	e4e <cbprintf_package_copy+0x22a>
     eb6:	4603      	mov	r3, r0
     eb8:	e7f2      	b.n	ea0 <cbprintf_package_copy+0x27c>
     eba:	bf00      	nop
     ebc:	000086a0 	.word	0x000086a0
     ec0:	0000a9f0 	.word	0x0000a9f0

00000ec4 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
     ec4:	4b01      	ldr	r3, [pc, #4]	; (ecc <__printk_hook_install+0x8>)
     ec6:	6018      	str	r0, [r3, #0]
}
     ec8:	4770      	bx	lr
     eca:	bf00      	nop
     ecc:	20000000 	.word	0x20000000

00000ed0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     ed0:	b530      	push	{r4, r5, lr}
     ed2:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     ed4:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     ed8:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     eda:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
     edc:	a901      	add	r1, sp, #4
     ede:	4805      	ldr	r0, [pc, #20]	; (ef4 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     ee0:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
     ee2:	f000 f8e9 	bl	10b8 <cbvprintf>

	if (ctx.count < ctx.max) {
     ee6:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     eea:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     eec:	bfb8      	it	lt
     eee:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     ef0:	b005      	add	sp, #20
     ef2:	bd30      	pop	{r4, r5, pc}
     ef4:	00007321 	.word	0x00007321

00000ef8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     ef8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     efc:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     f00:	f019 0808 	ands.w	r8, r9, #8
{
     f04:	4604      	mov	r4, r0
     f06:	4693      	mov	fp, r2
	if (processing) {
     f08:	d00d      	beq.n	f26 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     f0a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     f0c:	bf0c      	ite	eq
     f0e:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     f12:	f049 0920 	orrne.w	r9, r9, #32
     f16:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     f1a:	f38b 8811 	msr	BASEPRI, fp
     f1e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     f22:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     f26:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     f2a:	2902      	cmp	r1, #2
     f2c:	d107      	bne.n	f3e <process_event+0x46>
			evt = process_recheck(mgr);
     f2e:	4620      	mov	r0, r4
     f30:	f006 fa23 	bl	737a <process_recheck>
		if (evt == EVT_NOP) {
     f34:	2800      	cmp	r0, #0
     f36:	d0f0      	beq.n	f1a <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     f38:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f3a:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     f3c:	d14e      	bne.n	fdc <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x3c>
			res = mgr->last_res;
     f3e:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     f40:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     f42:	2f00      	cmp	r7, #0
     f44:	da15      	bge.n	f72 <process_event+0x7a>
		*clients = mgr->clients;
     f46:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f48:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     f4c:	e9c4 8800 	strd	r8, r8, [r4]
     f50:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     f54:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     f56:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     f58:	8b21      	ldrh	r1, [r4, #24]
     f5a:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     f5e:	45ca      	cmp	sl, r9
     f60:	d002      	beq.n	f68 <process_event+0x70>
		if (do_monitors
     f62:	68a3      	ldr	r3, [r4, #8]
     f64:	2b00      	cmp	r3, #0
     f66:	d15a      	bne.n	101e <CONFIG_FPROTECT_BLOCK_SIZE+0x1e>
		    || !sys_slist_is_empty(&clients)
     f68:	b90d      	cbnz	r5, f6e <process_event+0x76>
		    || (transit != NULL)) {
     f6a:	2e00      	cmp	r6, #0
     f6c:	d071      	beq.n	1052 <CONFIG_FPROTECT_BLOCK_SIZE+0x52>
     f6e:	2300      	movs	r3, #0
     f70:	e056      	b.n	1020 <CONFIG_FPROTECT_BLOCK_SIZE+0x20>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     f72:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     f76:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     f78:	2a01      	cmp	r2, #1
     f7a:	d81e      	bhi.n	fba <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x1a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f7c:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     f80:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     f82:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f84:	b289      	uxth	r1, r1
     f86:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     f8a:	d10a      	bne.n	fa2 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x2>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     f8c:	b13d      	cbz	r5, f9e <process_event+0xa6>
     f8e:	8b63      	ldrh	r3, [r4, #26]
     f90:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     f92:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     f94:	3301      	adds	r3, #1
     f96:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     f98:	2a00      	cmp	r2, #0
     f9a:	d1fa      	bne.n	f92 <process_event+0x9a>
     f9c:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     f9e:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     fa2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     fa4:	4620      	mov	r0, r4
     fa6:	f006 f9e8 	bl	737a <process_recheck>
     faa:	4606      	mov	r6, r0
     fac:	2800      	cmp	r0, #0
     fae:	d0d3      	beq.n	f58 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     fb0:	8b23      	ldrh	r3, [r4, #24]
     fb2:	f043 0320 	orr.w	r3, r3, #32
     fb6:	8323      	strh	r3, [r4, #24]
     fb8:	e7cd      	b.n	f56 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     fba:	2b04      	cmp	r3, #4
     fbc:	d10c      	bne.n	fd8 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x38>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fbe:	f021 0107 	bic.w	r1, r1, #7
     fc2:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     fc4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     fc6:	4620      	mov	r0, r4
     fc8:	f006 f9d7 	bl	737a <process_recheck>
     fcc:	4605      	mov	r5, r0
     fce:	2800      	cmp	r0, #0
     fd0:	d0c1      	beq.n	f56 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     fd2:	f041 0120 	orr.w	r1, r1, #32
     fd6:	8321      	strh	r1, [r4, #24]
     fd8:	2500      	movs	r5, #0
     fda:	e7bc      	b.n	f56 <process_event+0x5e>
		} else if (evt == EVT_START) {
     fdc:	2803      	cmp	r0, #3
     fde:	d109      	bne.n	ff4 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x54>
			transit = mgr->transitions->start;
     fe0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fe2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     fe6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     fe8:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     fec:	8323      	strh	r3, [r4, #24]
}
     fee:	2500      	movs	r5, #0
		res = 0;
     ff0:	462f      	mov	r7, r5
     ff2:	e7b1      	b.n	f58 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     ff4:	2804      	cmp	r0, #4
     ff6:	d106      	bne.n	1006 <CONFIG_FPROTECT_BLOCK_SIZE+0x6>
			transit = mgr->transitions->stop;
     ff8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     ffa:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     ffe:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1000:	f043 0304 	orr.w	r3, r3, #4
    1004:	e7f2      	b.n	fec <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4c>
		} else if (evt == EVT_RESET) {
    1006:	2805      	cmp	r0, #5
    1008:	d106      	bne.n	1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
			transit = mgr->transitions->reset;
    100a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    100c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    1010:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1012:	f043 0305 	orr.w	r3, r3, #5
    1016:	e7e9      	b.n	fec <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4c>
    1018:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    101a:	462e      	mov	r6, r5
    101c:	e7e8      	b.n	ff0 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x50>
				   && !sys_slist_is_empty(&mgr->monitors);
    101e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    1020:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    1024:	8321      	strh	r1, [r4, #24]
    1026:	f38b 8811 	msr	BASEPRI, fp
    102a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    102e:	b9fb      	cbnz	r3, 1070 <CONFIG_FPROTECT_BLOCK_SIZE+0x70>
	while (!sys_slist_is_empty(list)) {
    1030:	bb85      	cbnz	r5, 1094 <CONFIG_FPROTECT_BLOCK_SIZE+0x94>
			if (transit != NULL) {
    1032:	b116      	cbz	r6, 103a <CONFIG_FPROTECT_BLOCK_SIZE+0x3a>
				transit(mgr, transition_complete);
    1034:	491f      	ldr	r1, [pc, #124]	; (10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>)
    1036:	4620      	mov	r0, r4
    1038:	47b0      	blx	r6
	__asm__ volatile(
    103a:	f04f 0320 	mov.w	r3, #32
    103e:	f3ef 8b11 	mrs	fp, BASEPRI
    1042:	f383 8812 	msr	BASEPRI_MAX, r3
    1046:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    104a:	8b23      	ldrh	r3, [r4, #24]
    104c:	f023 0308 	bic.w	r3, r3, #8
    1050:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    1052:	8b23      	ldrh	r3, [r4, #24]
    1054:	06da      	lsls	r2, r3, #27
    1056:	d525      	bpl.n	10a4 <CONFIG_FPROTECT_BLOCK_SIZE+0xa4>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    1058:	f023 0310 	bic.w	r3, r3, #16
    105c:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    105e:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    1060:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    1064:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    1068:	2900      	cmp	r1, #0
    106a:	f47f af5e 	bne.w	f2a <process_event+0x32>
out:
    106e:	e754      	b.n	f1a <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1070:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1072:	2900      	cmp	r1, #0
    1074:	d0dc      	beq.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
	return node->next;
    1076:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    107a:	f8d1 b004 	ldr.w	fp, [r1, #4]
    107e:	463b      	mov	r3, r7
    1080:	4652      	mov	r2, sl
    1082:	4620      	mov	r0, r4
    1084:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    1086:	f1b9 0f00 	cmp.w	r9, #0
    108a:	d0d1      	beq.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
    108c:	4649      	mov	r1, r9
    108e:	f8d9 9000 	ldr.w	r9, [r9]
    1092:	e7f2      	b.n	107a <CONFIG_FPROTECT_BLOCK_SIZE+0x7a>
    1094:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    1096:	463b      	mov	r3, r7
    1098:	4652      	mov	r2, sl
    109a:	4620      	mov	r0, r4
    109c:	682d      	ldr	r5, [r5, #0]
    109e:	f006 f988 	bl	73b2 <notify_one>
    10a2:	e7c5      	b.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    10a4:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    10a8:	bf1e      	ittt	ne
    10aa:	f023 0320 	bicne.w	r3, r3, #32
    10ae:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    10b0:	2102      	movne	r1, #2
    10b2:	e7d5      	b.n	1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
    10b4:	000073df 	.word	0x000073df

000010b8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    10b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    10bc:	b091      	sub	sp, #68	; 0x44
    10be:	468b      	mov	fp, r1
    10c0:	9002      	str	r0, [sp, #8]
    10c2:	4692      	mov	sl, r2
    10c4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    10c6:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    10c8:	f89a 0000 	ldrb.w	r0, [sl]
    10cc:	b908      	cbnz	r0, 10d2 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    10ce:	4628      	mov	r0, r5
    10d0:	e35f      	b.n	1792 <cbvprintf+0x6da>
		if (*fp != '%') {
    10d2:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    10d4:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
    10d8:	d007      	beq.n	10ea <cbvprintf+0x32>
			OUTC('%');
    10da:	9b02      	ldr	r3, [sp, #8]
    10dc:	4659      	mov	r1, fp
    10de:	4798      	blx	r3
    10e0:	2800      	cmp	r0, #0
    10e2:	f2c0 8356 	blt.w	1792 <cbvprintf+0x6da>
    10e6:	3501      	adds	r5, #1
			break;
    10e8:	e212      	b.n	1510 <cbvprintf+0x458>
		} state = {
    10ea:	2218      	movs	r2, #24
    10ec:	2100      	movs	r1, #0
    10ee:	a80a      	add	r0, sp, #40	; 0x28
    10f0:	f006 fd82 	bl	7bf8 <memset>
	if (*sp == '%') {
    10f4:	f89a 3001 	ldrb.w	r3, [sl, #1]
    10f8:	2b25      	cmp	r3, #37	; 0x25
    10fa:	d078      	beq.n	11ee <cbvprintf+0x136>
    10fc:	2200      	movs	r2, #0
    10fe:	4610      	mov	r0, r2
    1100:	4696      	mov	lr, r2
    1102:	4694      	mov	ip, r2
    1104:	4616      	mov	r6, r2
    1106:	4639      	mov	r1, r7
		switch (*sp) {
    1108:	f817 3b01 	ldrb.w	r3, [r7], #1
    110c:	2b2b      	cmp	r3, #43	; 0x2b
    110e:	f000 809d 	beq.w	124c <cbvprintf+0x194>
    1112:	f200 8094 	bhi.w	123e <cbvprintf+0x186>
    1116:	2b20      	cmp	r3, #32
    1118:	f000 809b 	beq.w	1252 <cbvprintf+0x19a>
    111c:	2b23      	cmp	r3, #35	; 0x23
    111e:	f000 809b 	beq.w	1258 <cbvprintf+0x1a0>
    1122:	b12e      	cbz	r6, 1130 <cbvprintf+0x78>
    1124:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    1128:	f046 0604 	orr.w	r6, r6, #4
    112c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1130:	f1bc 0f00 	cmp.w	ip, #0
    1134:	d005      	beq.n	1142 <cbvprintf+0x8a>
    1136:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    113a:	f046 0608 	orr.w	r6, r6, #8
    113e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1142:	f1be 0f00 	cmp.w	lr, #0
    1146:	d005      	beq.n	1154 <cbvprintf+0x9c>
    1148:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
    114c:	f046 0610 	orr.w	r6, r6, #16
    1150:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
    1154:	b128      	cbz	r0, 1162 <cbvprintf+0xaa>
    1156:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    115a:	f040 0020 	orr.w	r0, r0, #32
    115e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    1162:	b12a      	cbz	r2, 1170 <cbvprintf+0xb8>
    1164:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    116c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    1170:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1174:	f002 0044 	and.w	r0, r2, #68	; 0x44
    1178:	2844      	cmp	r0, #68	; 0x44
    117a:	d103      	bne.n	1184 <cbvprintf+0xcc>
		conv->flag_zero = false;
    117c:	f36f 1286 	bfc	r2, #6, #1
    1180:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    1184:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1188:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    118a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    118e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1192:	d17b      	bne.n	128c <cbvprintf+0x1d4>
		conv->width_star = true;
    1194:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1198:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    119c:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    119e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    11a2:	781a      	ldrb	r2, [r3, #0]
    11a4:	2a2e      	cmp	r2, #46	; 0x2e
    11a6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    11aa:	bf0c      	ite	eq
    11ac:	2101      	moveq	r1, #1
    11ae:	2100      	movne	r1, #0
    11b0:	f361 0241 	bfi	r2, r1, #1, #1
    11b4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    11b8:	d174      	bne.n	12a4 <cbvprintf+0x1ec>
	if (*sp == '*') {
    11ba:	785a      	ldrb	r2, [r3, #1]
    11bc:	2a2a      	cmp	r2, #42	; 0x2a
    11be:	d06a      	beq.n	1296 <cbvprintf+0x1de>
	++sp;
    11c0:	3301      	adds	r3, #1
	size_t val = 0;
    11c2:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    11c4:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    11c6:	4618      	mov	r0, r3
    11c8:	f810 2b01 	ldrb.w	r2, [r0], #1
    11cc:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    11d0:	2f09      	cmp	r7, #9
    11d2:	f240 808e 	bls.w	12f2 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    11d6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    11da:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    11dc:	f3c2 0040 	ubfx	r0, r2, #1, #1
    11e0:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    11e4:	f361 0241 	bfi	r2, r1, #1, #1
    11e8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    11ec:	e05a      	b.n	12a4 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    11ee:	f10a 0702 	add.w	r7, sl, #2
    11f2:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    11f6:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    11fa:	07d9      	lsls	r1, r3, #31
    11fc:	f140 8149 	bpl.w	1492 <cbvprintf+0x3da>
			width = va_arg(ap, int);
    1200:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    1204:	f1b9 0f00 	cmp.w	r9, #0
    1208:	da07      	bge.n	121a <cbvprintf+0x162>
				conv->flag_dash = true;
    120a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    120e:	f042 0204 	orr.w	r2, r2, #4
    1212:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    1216:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    121a:	075a      	lsls	r2, r3, #29
    121c:	f140 8142 	bpl.w	14a4 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    1220:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    1224:	f1b8 0f00 	cmp.w	r8, #0
    1228:	f280 8141 	bge.w	14ae <cbvprintf+0x3f6>
				conv->prec_present = false;
    122c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1230:	f36f 0341 	bfc	r3, #1, #1
    1234:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1238:	f04f 38ff 	mov.w	r8, #4294967295
    123c:	e137      	b.n	14ae <cbvprintf+0x3f6>
		switch (*sp) {
    123e:	2b2d      	cmp	r3, #45	; 0x2d
    1240:	d00c      	beq.n	125c <cbvprintf+0x1a4>
    1242:	2b30      	cmp	r3, #48	; 0x30
    1244:	f47f af6d 	bne.w	1122 <cbvprintf+0x6a>
			conv->flag_zero = true;
    1248:	2201      	movs	r2, #1
	} while (loop);
    124a:	e75c      	b.n	1106 <cbvprintf+0x4e>
			conv->flag_plus = true;
    124c:	f04f 0c01 	mov.w	ip, #1
    1250:	e759      	b.n	1106 <cbvprintf+0x4e>
			conv->flag_space = true;
    1252:	f04f 0e01 	mov.w	lr, #1
    1256:	e756      	b.n	1106 <cbvprintf+0x4e>
			conv->flag_hash = true;
    1258:	2001      	movs	r0, #1
    125a:	e754      	b.n	1106 <cbvprintf+0x4e>
		switch (*sp) {
    125c:	2601      	movs	r6, #1
    125e:	e752      	b.n	1106 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    1260:	fb0c 0202 	mla	r2, ip, r2, r0
    1264:	3a30      	subs	r2, #48	; 0x30
    1266:	4633      	mov	r3, r6
    1268:	461e      	mov	r6, r3
    126a:	f816 0b01 	ldrb.w	r0, [r6], #1
    126e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    1272:	2f09      	cmp	r7, #9
    1274:	d9f4      	bls.n	1260 <cbvprintf+0x1a8>
	if (sp != wp) {
    1276:	4299      	cmp	r1, r3
    1278:	d093      	beq.n	11a2 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    127a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    127e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    1280:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    1282:	f362 0141 	bfi	r1, r2, #1, #1
    1286:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    128a:	e78a      	b.n	11a2 <cbvprintf+0xea>
    128c:	460b      	mov	r3, r1
	size_t val = 0;
    128e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1290:	f04f 0c0a 	mov.w	ip, #10
    1294:	e7e8      	b.n	1268 <cbvprintf+0x1b0>
		conv->prec_star = true;
    1296:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    129a:	f042 0204 	orr.w	r2, r2, #4
    129e:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    12a2:	3302      	adds	r3, #2
	switch (*sp) {
    12a4:	461f      	mov	r7, r3
    12a6:	f817 2b01 	ldrb.w	r2, [r7], #1
    12aa:	2a6c      	cmp	r2, #108	; 0x6c
    12ac:	d041      	beq.n	1332 <cbvprintf+0x27a>
    12ae:	d825      	bhi.n	12fc <cbvprintf+0x244>
    12b0:	2a68      	cmp	r2, #104	; 0x68
    12b2:	d02b      	beq.n	130c <cbvprintf+0x254>
    12b4:	2a6a      	cmp	r2, #106	; 0x6a
    12b6:	d046      	beq.n	1346 <cbvprintf+0x28e>
    12b8:	2a4c      	cmp	r2, #76	; 0x4c
    12ba:	d04c      	beq.n	1356 <cbvprintf+0x29e>
    12bc:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    12be:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    12c2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    12c6:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    12ca:	2a78      	cmp	r2, #120	; 0x78
    12cc:	f200 80d9 	bhi.w	1482 <cbvprintf+0x3ca>
    12d0:	2a57      	cmp	r2, #87	; 0x57
    12d2:	d84d      	bhi.n	1370 <cbvprintf+0x2b8>
    12d4:	2a41      	cmp	r2, #65	; 0x41
    12d6:	d003      	beq.n	12e0 <cbvprintf+0x228>
    12d8:	3a45      	subs	r2, #69	; 0x45
    12da:	2a02      	cmp	r2, #2
    12dc:	f200 80d1 	bhi.w	1482 <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    12e0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    12e4:	2204      	movs	r2, #4
    12e6:	f362 0302 	bfi	r3, r2, #0, #3
    12ea:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    12ee:	2301      	movs	r3, #1
			break;
    12f0:	e09e      	b.n	1430 <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    12f2:	fb06 2101 	mla	r1, r6, r1, r2
    12f6:	3930      	subs	r1, #48	; 0x30
    12f8:	4603      	mov	r3, r0
    12fa:	e764      	b.n	11c6 <cbvprintf+0x10e>
	switch (*sp) {
    12fc:	2a74      	cmp	r2, #116	; 0x74
    12fe:	d026      	beq.n	134e <cbvprintf+0x296>
    1300:	2a7a      	cmp	r2, #122	; 0x7a
    1302:	d1db      	bne.n	12bc <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    1304:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1308:	2206      	movs	r2, #6
    130a:	e00d      	b.n	1328 <cbvprintf+0x270>
		if (*++sp == 'h') {
    130c:	785a      	ldrb	r2, [r3, #1]
    130e:	2a68      	cmp	r2, #104	; 0x68
    1310:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1314:	d106      	bne.n	1324 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    1316:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1318:	f361 02c6 	bfi	r2, r1, #3, #4
    131c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    1320:	1c9f      	adds	r7, r3, #2
    1322:	e7cc      	b.n	12be <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    1324:	4613      	mov	r3, r2
    1326:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1328:	f362 03c6 	bfi	r3, r2, #3, #4
    132c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    1330:	e7c5      	b.n	12be <cbvprintf+0x206>
		if (*++sp == 'l') {
    1332:	785a      	ldrb	r2, [r3, #1]
    1334:	2a6c      	cmp	r2, #108	; 0x6c
    1336:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    133a:	d101      	bne.n	1340 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    133c:	2104      	movs	r1, #4
    133e:	e7eb      	b.n	1318 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    1340:	4613      	mov	r3, r2
    1342:	2203      	movs	r2, #3
    1344:	e7f0      	b.n	1328 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    1346:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    134a:	2205      	movs	r2, #5
    134c:	e7ec      	b.n	1328 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    134e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1352:	2207      	movs	r2, #7
    1354:	e7e8      	b.n	1328 <cbvprintf+0x270>
		conv->unsupported = true;
    1356:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    135a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    135e:	f023 0302 	bic.w	r3, r3, #2
    1362:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1366:	f043 0302 	orr.w	r3, r3, #2
    136a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    136e:	e7a6      	b.n	12be <cbvprintf+0x206>
	switch (conv->specifier) {
    1370:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1374:	2920      	cmp	r1, #32
    1376:	f200 8084 	bhi.w	1482 <cbvprintf+0x3ca>
    137a:	a001      	add	r0, pc, #4	; (adr r0, 1380 <cbvprintf+0x2c8>)
    137c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1380:	00001445 	.word	0x00001445
    1384:	00001483 	.word	0x00001483
    1388:	00001483 	.word	0x00001483
    138c:	00001483 	.word	0x00001483
    1390:	00001483 	.word	0x00001483
    1394:	00001483 	.word	0x00001483
    1398:	00001483 	.word	0x00001483
    139c:	00001483 	.word	0x00001483
    13a0:	00001483 	.word	0x00001483
    13a4:	000012e1 	.word	0x000012e1
    13a8:	00001483 	.word	0x00001483
    13ac:	00001445 	.word	0x00001445
    13b0:	00001405 	.word	0x00001405
    13b4:	000012e1 	.word	0x000012e1
    13b8:	000012e1 	.word	0x000012e1
    13bc:	000012e1 	.word	0x000012e1
    13c0:	00001483 	.word	0x00001483
    13c4:	00001405 	.word	0x00001405
    13c8:	00001483 	.word	0x00001483
    13cc:	00001483 	.word	0x00001483
    13d0:	00001483 	.word	0x00001483
    13d4:	00001483 	.word	0x00001483
    13d8:	0000144d 	.word	0x0000144d
    13dc:	00001445 	.word	0x00001445
    13e0:	00001469 	.word	0x00001469
    13e4:	00001483 	.word	0x00001483
    13e8:	00001483 	.word	0x00001483
    13ec:	00001469 	.word	0x00001469
    13f0:	00001483 	.word	0x00001483
    13f4:	00001445 	.word	0x00001445
    13f8:	00001483 	.word	0x00001483
    13fc:	00001483 	.word	0x00001483
    1400:	00001445 	.word	0x00001445
		conv->specifier_cat = SPECIFIER_SINT;
    1404:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1408:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    140a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    140e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1412:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1414:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    1418:	bf02      	ittt	eq
    141a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    141e:	f041 0101 	orreq.w	r1, r1, #1
    1422:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    1426:	2a63      	cmp	r2, #99	; 0x63
    1428:	d131      	bne.n	148e <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    142a:	3b00      	subs	r3, #0
    142c:	bf18      	it	ne
    142e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1430:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1434:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1438:	430b      	orrs	r3, r1
    143a:	f363 0241 	bfi	r2, r3, #1, #1
    143e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1442:	e6d8      	b.n	11f6 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    1444:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1448:	2002      	movs	r0, #2
    144a:	e7de      	b.n	140a <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    144c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1450:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1454:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1458:	2103      	movs	r1, #3
    145a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    145e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    1460:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1464:	4143      	adcs	r3, r0
    1466:	e7e3      	b.n	1430 <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    1468:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    146c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    146e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1472:	f361 0202 	bfi	r2, r1, #0, #3
    1476:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    147a:	bf14      	ite	ne
    147c:	2301      	movne	r3, #1
    147e:	2300      	moveq	r3, #0
    1480:	e7d6      	b.n	1430 <cbvprintf+0x378>
		conv->invalid = true;
    1482:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1486:	f043 0301 	orr.w	r3, r3, #1
    148a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    148e:	2300      	movs	r3, #0
    1490:	e7ce      	b.n	1430 <cbvprintf+0x378>
		} else if (conv->width_present) {
    1492:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    1496:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1498:	bfb4      	ite	lt
    149a:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    149e:	f04f 39ff 	movge.w	r9, #4294967295
    14a2:	e6ba      	b.n	121a <cbvprintf+0x162>
		} else if (conv->prec_present) {
    14a4:	079b      	lsls	r3, r3, #30
    14a6:	f57f aec7 	bpl.w	1238 <cbvprintf+0x180>
			precision = conv->prec_value;
    14aa:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    14ae:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    14b2:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    14b4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    14b8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    14bc:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    14c0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    14c2:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    14c6:	d138      	bne.n	153a <cbvprintf+0x482>
			switch (length_mod) {
    14c8:	1ecb      	subs	r3, r1, #3
    14ca:	2b04      	cmp	r3, #4
    14cc:	d822      	bhi.n	1514 <cbvprintf+0x45c>
    14ce:	e8df f003 	tbb	[pc, r3]
    14d2:	0903      	.short	0x0903
    14d4:	2109      	.short	0x2109
    14d6:	21          	.byte	0x21
    14d7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    14d8:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    14dc:	17da      	asrs	r2, r3, #31
    14de:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    14e2:	e006      	b.n	14f2 <cbvprintf+0x43a>
					(sint_value_type)va_arg(ap, intmax_t);
    14e4:	3407      	adds	r4, #7
    14e6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    14ea:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    14ee:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    14f2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    14f6:	f013 0603 	ands.w	r6, r3, #3
    14fa:	d056      	beq.n	15aa <cbvprintf+0x4f2>
			OUTS(sp, fp);
    14fc:	9802      	ldr	r0, [sp, #8]
    14fe:	463b      	mov	r3, r7
    1500:	4652      	mov	r2, sl
    1502:	4659      	mov	r1, fp
    1504:	f006 f859 	bl	75ba <outs>
    1508:	2800      	cmp	r0, #0
    150a:	f2c0 8142 	blt.w	1792 <cbvprintf+0x6da>
    150e:	4405      	add	r5, r0
			continue;
    1510:	46ba      	mov	sl, r7
    1512:	e5d9      	b.n	10c8 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1514:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1518:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    151a:	ea4f 72e3 	mov.w	r2, r3, asr #31
    151e:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1522:	d105      	bne.n	1530 <cbvprintf+0x478>
				value->uint = (unsigned char)value->uint;
    1524:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    1528:	930a      	str	r3, [sp, #40]	; 0x28
    152a:	2300      	movs	r3, #0
    152c:	930b      	str	r3, [sp, #44]	; 0x2c
    152e:	e7e0      	b.n	14f2 <cbvprintf+0x43a>
			} else if (length_mod == LENGTH_H) {
    1530:	2902      	cmp	r1, #2
    1532:	d1de      	bne.n	14f2 <cbvprintf+0x43a>
				value->sint = (short)value->sint;
    1534:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    1538:	e7d0      	b.n	14dc <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    153a:	2b02      	cmp	r3, #2
    153c:	d123      	bne.n	1586 <cbvprintf+0x4ce>
			switch (length_mod) {
    153e:	1ecb      	subs	r3, r1, #3
    1540:	2b04      	cmp	r3, #4
    1542:	d813      	bhi.n	156c <cbvprintf+0x4b4>
    1544:	e8df f003 	tbb	[pc, r3]
    1548:	120a0a03 	.word	0x120a0a03
    154c:	12          	.byte	0x12
    154d:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    154e:	6822      	ldr	r2, [r4, #0]
    1550:	920a      	str	r2, [sp, #40]	; 0x28
    1552:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    1554:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    1556:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    1558:	4604      	mov	r4, r0
    155a:	e7ca      	b.n	14f2 <cbvprintf+0x43a>
					(uint_value_type)va_arg(ap,
    155c:	1de0      	adds	r0, r4, #7
    155e:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    1562:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    1566:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    156a:	e7f5      	b.n	1558 <cbvprintf+0x4a0>
					(uint_value_type)va_arg(ap, size_t);
    156c:	f854 3b04 	ldr.w	r3, [r4], #4
    1570:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1572:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    1574:	f04f 0300 	mov.w	r3, #0
    1578:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    157a:	d0d3      	beq.n	1524 <cbvprintf+0x46c>
			} else if (length_mod == LENGTH_H) {
    157c:	2902      	cmp	r1, #2
    157e:	d1b8      	bne.n	14f2 <cbvprintf+0x43a>
				value->uint = (unsigned short)value->uint;
    1580:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1584:	e7d0      	b.n	1528 <cbvprintf+0x470>
		} else if (specifier_cat == SPECIFIER_FP) {
    1586:	2b04      	cmp	r3, #4
    1588:	d109      	bne.n	159e <cbvprintf+0x4e6>
					(sint_value_type)va_arg(ap, long long);
    158a:	1de3      	adds	r3, r4, #7
    158c:	f023 0307 	bic.w	r3, r3, #7
    1590:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    1594:	e9d3 2300 	ldrd	r2, r3, [r3]
    1598:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    159c:	e7a9      	b.n	14f2 <cbvprintf+0x43a>
		} else if (specifier_cat == SPECIFIER_PTR) {
    159e:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    15a0:	bf04      	itt	eq
    15a2:	f854 3b04 	ldreq.w	r3, [r4], #4
    15a6:	930a      	streq	r3, [sp, #40]	; 0x28
    15a8:	e7a3      	b.n	14f2 <cbvprintf+0x43a>
		switch (conv->specifier) {
    15aa:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    15ae:	2878      	cmp	r0, #120	; 0x78
    15b0:	d8ae      	bhi.n	1510 <cbvprintf+0x458>
    15b2:	2862      	cmp	r0, #98	; 0x62
    15b4:	d822      	bhi.n	15fc <cbvprintf+0x544>
    15b6:	2825      	cmp	r0, #37	; 0x25
    15b8:	f43f ad8f 	beq.w	10da <cbvprintf+0x22>
    15bc:	2858      	cmp	r0, #88	; 0x58
    15be:	d1a7      	bne.n	1510 <cbvprintf+0x458>
			bps = encode_uint(value->uint, conv, buf, bpe);
    15c0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    15c4:	9300      	str	r3, [sp, #0]
    15c6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    15ca:	ab04      	add	r3, sp, #16
    15cc:	aa0c      	add	r2, sp, #48	; 0x30
    15ce:	f005 ffae 	bl	752e <encode_uint>
    15d2:	4682      	mov	sl, r0
			if (precision >= 0) {
    15d4:	f1b8 0f00 	cmp.w	r8, #0
    15d8:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    15dc:	db0c      	blt.n	15f8 <cbvprintf+0x540>
				conv->flag_zero = false;
    15de:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    15e2:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    15e6:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    15ea:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    15ec:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    15f0:	d902      	bls.n	15f8 <cbvprintf+0x540>
					conv->pad0_value = precision - (int)len;
    15f2:	eba8 0303 	sub.w	r3, r8, r3
    15f6:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    15f8:	4680      	mov	r8, r0
    15fa:	e03d      	b.n	1678 <cbvprintf+0x5c0>
		switch (conv->specifier) {
    15fc:	3863      	subs	r0, #99	; 0x63
    15fe:	2815      	cmp	r0, #21
    1600:	d886      	bhi.n	1510 <cbvprintf+0x458>
    1602:	a201      	add	r2, pc, #4	; (adr r2, 1608 <cbvprintf+0x550>)
    1604:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1608:	00001689 	.word	0x00001689
    160c:	000016ed 	.word	0x000016ed
    1610:	00001511 	.word	0x00001511
    1614:	00001511 	.word	0x00001511
    1618:	00001511 	.word	0x00001511
    161c:	00001511 	.word	0x00001511
    1620:	000016ed 	.word	0x000016ed
    1624:	00001511 	.word	0x00001511
    1628:	00001511 	.word	0x00001511
    162c:	00001511 	.word	0x00001511
    1630:	00001511 	.word	0x00001511
    1634:	00001747 	.word	0x00001747
    1638:	00001715 	.word	0x00001715
    163c:	00001719 	.word	0x00001719
    1640:	00001511 	.word	0x00001511
    1644:	00001511 	.word	0x00001511
    1648:	00001661 	.word	0x00001661
    164c:	00001511 	.word	0x00001511
    1650:	00001715 	.word	0x00001715
    1654:	00001511 	.word	0x00001511
    1658:	00001511 	.word	0x00001511
    165c:	00001715 	.word	0x00001715
			if (precision >= 0) {
    1660:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1664:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1668:	db0a      	blt.n	1680 <cbvprintf+0x5c8>
				len = strnlen(bps, precision);
    166a:	4641      	mov	r1, r8
    166c:	4650      	mov	r0, sl
    166e:	f006 faa3 	bl	7bb8 <strnlen>
			bpe = bps + len;
    1672:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    1676:	2600      	movs	r6, #0
		if (bps == NULL) {
    1678:	f1ba 0f00 	cmp.w	sl, #0
    167c:	d10c      	bne.n	1698 <cbvprintf+0x5e0>
    167e:	e747      	b.n	1510 <cbvprintf+0x458>
				len = strlen(bps);
    1680:	4650      	mov	r0, sl
    1682:	f006 fa92 	bl	7baa <strlen>
    1686:	e7f4      	b.n	1672 <cbvprintf+0x5ba>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1688:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    168a:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    168e:	2600      	movs	r6, #0
			bps = buf;
    1690:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    1694:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    1698:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    169c:	b106      	cbz	r6, 16a0 <cbvprintf+0x5e8>
			nj_len += 1U;
    169e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    16a0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    16a4:	06d0      	lsls	r0, r2, #27
    16a6:	d568      	bpl.n	177a <cbvprintf+0x6c2>
			nj_len += 2U;
    16a8:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    16aa:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    16ac:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    16ae:	bf48      	it	mi
    16b0:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    16b2:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    16b4:	bf48      	it	mi
    16b6:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    16b8:	f1b9 0f00 	cmp.w	r9, #0
    16bc:	dd76      	ble.n	17ac <cbvprintf+0x6f4>
			if (!conv->flag_dash) {
    16be:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    16c2:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    16c6:	f3c2 0380 	ubfx	r3, r2, #2, #1
    16ca:	9303      	str	r3, [sp, #12]
    16cc:	0753      	lsls	r3, r2, #29
    16ce:	d46d      	bmi.n	17ac <cbvprintf+0x6f4>
				if (conv->flag_zero) {
    16d0:	0650      	lsls	r0, r2, #25
    16d2:	d561      	bpl.n	1798 <cbvprintf+0x6e0>
					if (sign != 0) {
    16d4:	b146      	cbz	r6, 16e8 <cbvprintf+0x630>
						OUTC(sign);
    16d6:	9b02      	ldr	r3, [sp, #8]
    16d8:	4659      	mov	r1, fp
    16da:	4630      	mov	r0, r6
    16dc:	4798      	blx	r3
    16de:	2800      	cmp	r0, #0
    16e0:	db57      	blt.n	1792 <cbvprintf+0x6da>
						sign = 0;
    16e2:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    16e4:	3501      	adds	r5, #1
						sign = 0;
    16e6:	461e      	mov	r6, r3
					pad = '0';
    16e8:	2330      	movs	r3, #48	; 0x30
    16ea:	e056      	b.n	179a <cbvprintf+0x6e2>
			if (conv->flag_plus) {
    16ec:	071e      	lsls	r6, r3, #28
    16ee:	d40f      	bmi.n	1710 <cbvprintf+0x658>
				sign = ' ';
    16f0:	f013 0610 	ands.w	r6, r3, #16
    16f4:	bf18      	it	ne
    16f6:	2620      	movne	r6, #32
			sint = value->sint;
    16f8:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    16fc:	2b00      	cmp	r3, #0
    16fe:	f6bf af5f 	bge.w	15c0 <cbvprintf+0x508>
				value->uint = (uint_value_type)-sint;
    1702:	4252      	negs	r2, r2
    1704:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1708:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    170c:	262d      	movs	r6, #45	; 0x2d
    170e:	e757      	b.n	15c0 <cbvprintf+0x508>
				sign = '+';
    1710:	262b      	movs	r6, #43	; 0x2b
    1712:	e7f1      	b.n	16f8 <cbvprintf+0x640>
		switch (conv->specifier) {
    1714:	2600      	movs	r6, #0
    1716:	e753      	b.n	15c0 <cbvprintf+0x508>
			if (value->ptr != NULL) {
    1718:	980a      	ldr	r0, [sp, #40]	; 0x28
    171a:	b340      	cbz	r0, 176e <cbvprintf+0x6b6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    171c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1720:	9300      	str	r3, [sp, #0]
    1722:	aa0c      	add	r2, sp, #48	; 0x30
    1724:	ab04      	add	r3, sp, #16
    1726:	2100      	movs	r1, #0
    1728:	f005 ff01 	bl	752e <encode_uint>
				conv->altform_0c = true;
    172c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    1730:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1734:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1738:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    173c:	4682      	mov	sl, r0
				conv->altform_0c = true;
    173e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    1742:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1744:	e746      	b.n	15d4 <cbvprintf+0x51c>
				store_count(conv, value->ptr, count);
    1746:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1748:	2907      	cmp	r1, #7
    174a:	f63f aee1 	bhi.w	1510 <cbvprintf+0x458>
    174e:	e8df f001 	tbb	[pc, r1]
    1752:	040c      	.short	0x040c
    1754:	08080c06 	.word	0x08080c06
    1758:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    175a:	701d      	strb	r5, [r3, #0]
		break;
    175c:	e6d8      	b.n	1510 <cbvprintf+0x458>
		*(short *)dp = (short)count;
    175e:	801d      	strh	r5, [r3, #0]
		break;
    1760:	e6d6      	b.n	1510 <cbvprintf+0x458>
		*(intmax_t *)dp = (intmax_t)count;
    1762:	17ea      	asrs	r2, r5, #31
    1764:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    1768:	e6d2      	b.n	1510 <cbvprintf+0x458>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    176a:	601d      	str	r5, [r3, #0]
		break;
    176c:	e6d0      	b.n	1510 <cbvprintf+0x458>
			bps = "(nil)";
    176e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1838 <cbvprintf+0x780>
    1772:	4606      	mov	r6, r0
			bpe = bps + 5;
    1774:	f10a 0805 	add.w	r8, sl, #5
    1778:	e78e      	b.n	1698 <cbvprintf+0x5e0>
		} else if (conv->altform_0) {
    177a:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    177c:	bf48      	it	mi
    177e:	3301      	addmi	r3, #1
    1780:	e793      	b.n	16aa <cbvprintf+0x5f2>
					OUTC(pad);
    1782:	4618      	mov	r0, r3
    1784:	9303      	str	r3, [sp, #12]
    1786:	4659      	mov	r1, fp
    1788:	9b02      	ldr	r3, [sp, #8]
    178a:	4798      	blx	r3
    178c:	2800      	cmp	r0, #0
    178e:	9b03      	ldr	r3, [sp, #12]
    1790:	da04      	bge.n	179c <cbvprintf+0x6e4>
#undef OUTS
#undef OUTC
}
    1792:	b011      	add	sp, #68	; 0x44
    1794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1798:	2320      	movs	r3, #32
    179a:	444d      	add	r5, r9
    179c:	464a      	mov	r2, r9
				while (width-- > 0) {
    179e:	2a00      	cmp	r2, #0
    17a0:	eba5 0109 	sub.w	r1, r5, r9
    17a4:	f109 39ff 	add.w	r9, r9, #4294967295
    17a8:	dceb      	bgt.n	1782 <cbvprintf+0x6ca>
    17aa:	460d      	mov	r5, r1
		if (sign != 0) {
    17ac:	b136      	cbz	r6, 17bc <cbvprintf+0x704>
			OUTC(sign);
    17ae:	9b02      	ldr	r3, [sp, #8]
    17b0:	4659      	mov	r1, fp
    17b2:	4630      	mov	r0, r6
    17b4:	4798      	blx	r3
    17b6:	2800      	cmp	r0, #0
    17b8:	dbeb      	blt.n	1792 <cbvprintf+0x6da>
    17ba:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    17bc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    17c0:	06d9      	lsls	r1, r3, #27
    17c2:	d401      	bmi.n	17c8 <cbvprintf+0x710>
    17c4:	071a      	lsls	r2, r3, #28
    17c6:	d506      	bpl.n	17d6 <cbvprintf+0x71e>
				OUTC('0');
    17c8:	9b02      	ldr	r3, [sp, #8]
    17ca:	4659      	mov	r1, fp
    17cc:	2030      	movs	r0, #48	; 0x30
    17ce:	4798      	blx	r3
    17d0:	2800      	cmp	r0, #0
    17d2:	dbde      	blt.n	1792 <cbvprintf+0x6da>
    17d4:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    17d6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    17da:	06db      	lsls	r3, r3, #27
    17dc:	d507      	bpl.n	17ee <cbvprintf+0x736>
				OUTC(conv->specifier);
    17de:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    17e2:	9b02      	ldr	r3, [sp, #8]
    17e4:	4659      	mov	r1, fp
    17e6:	4798      	blx	r3
    17e8:	2800      	cmp	r0, #0
    17ea:	dbd2      	blt.n	1792 <cbvprintf+0x6da>
    17ec:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    17ee:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    17f0:	442e      	add	r6, r5
    17f2:	1b73      	subs	r3, r6, r5
    17f4:	2b00      	cmp	r3, #0
    17f6:	dc16      	bgt.n	1826 <cbvprintf+0x76e>
			OUTS(bps, bpe);
    17f8:	9802      	ldr	r0, [sp, #8]
    17fa:	4643      	mov	r3, r8
    17fc:	4652      	mov	r2, sl
    17fe:	4659      	mov	r1, fp
    1800:	f005 fedb 	bl	75ba <outs>
    1804:	2800      	cmp	r0, #0
    1806:	dbc4      	blt.n	1792 <cbvprintf+0x6da>
    1808:	4405      	add	r5, r0
		while (width > 0) {
    180a:	44a9      	add	r9, r5
    180c:	eba9 0305 	sub.w	r3, r9, r5
    1810:	2b00      	cmp	r3, #0
    1812:	f77f ae7d 	ble.w	1510 <cbvprintf+0x458>
			OUTC(' ');
    1816:	9b02      	ldr	r3, [sp, #8]
    1818:	4659      	mov	r1, fp
    181a:	2020      	movs	r0, #32
    181c:	4798      	blx	r3
    181e:	2800      	cmp	r0, #0
    1820:	dbb7      	blt.n	1792 <cbvprintf+0x6da>
    1822:	3501      	adds	r5, #1
			--width;
    1824:	e7f2      	b.n	180c <cbvprintf+0x754>
				OUTC('0');
    1826:	9b02      	ldr	r3, [sp, #8]
    1828:	4659      	mov	r1, fp
    182a:	2030      	movs	r0, #48	; 0x30
    182c:	4798      	blx	r3
    182e:	2800      	cmp	r0, #0
    1830:	dbaf      	blt.n	1792 <cbvprintf+0x6da>
    1832:	3501      	adds	r5, #1
    1834:	e7dd      	b.n	17f2 <cbvprintf+0x73a>
    1836:	bf00      	nop
    1838:	00008d9c 	.word	0x00008d9c

0000183c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    183c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    183e:	4910      	ldr	r1, [pc, #64]	; (1880 <enable_logger+0x44>)
    1840:	4810      	ldr	r0, [pc, #64]	; (1884 <enable_logger+0x48>)
{
    1842:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    1844:	2200      	movs	r2, #0
    1846:	f006 fefb 	bl	8640 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    184a:	4d0f      	ldr	r5, [pc, #60]	; (1888 <enable_logger+0x4c>)
    184c:	490f      	ldr	r1, [pc, #60]	; (188c <enable_logger+0x50>)
    184e:	2200      	movs	r2, #0
    1850:	2300      	movs	r3, #0
    1852:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1856:	2400      	movs	r4, #0
    1858:	230e      	movs	r3, #14
    185a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    185e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1862:	4b0b      	ldr	r3, [pc, #44]	; (1890 <enable_logger+0x54>)
    1864:	9400      	str	r4, [sp, #0]
    1866:	f44f 7240 	mov.w	r2, #768	; 0x300
    186a:	4628      	mov	r0, r5
    186c:	f004 fc76 	bl	615c <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    1870:	4908      	ldr	r1, [pc, #32]	; (1894 <enable_logger+0x58>)
    1872:	4628      	mov	r0, r5
    1874:	f006 fd27 	bl	82c6 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    1878:	4620      	mov	r0, r4
    187a:	b009      	add	sp, #36	; 0x24
    187c:	bd30      	pop	{r4, r5, pc}
    187e:	bf00      	nop
    1880:	00001899 	.word	0x00001899
    1884:	20000568 	.word	0x20000568
    1888:	200005a0 	.word	0x200005a0
    188c:	20000f60 	.word	0x20000f60
    1890:	00001abd 	.word	0x00001abd
    1894:	00008da2 	.word	0x00008da2

00001898 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1898:	4801      	ldr	r0, [pc, #4]	; (18a0 <log_process_thread_timer_expiry_fn+0x8>)
    189a:	f004 bdbd 	b.w	6418 <z_impl_k_sem_give>
    189e:	bf00      	nop
    18a0:	20000154 	.word	0x20000154

000018a4 <log_format_func_t_get>:
}
    18a4:	4b01      	ldr	r3, [pc, #4]	; (18ac <log_format_func_t_get+0x8>)
    18a6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    18aa:	4770      	bx	lr
    18ac:	000089a0 	.word	0x000089a0

000018b0 <log_init>:
{
    18b0:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    18b2:	4b12      	ldr	r3, [pc, #72]	; (18fc <log_init+0x4c>)
    18b4:	f3bf 8f5b 	dmb	ish
    18b8:	e853 5f00 	ldrex	r5, [r3]
    18bc:	1c6a      	adds	r2, r5, #1
    18be:	e843 2100 	strex	r1, r2, [r3]
    18c2:	2900      	cmp	r1, #0
    18c4:	d1f8      	bne.n	18b8 <log_init+0x8>
    18c6:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    18ca:	b92d      	cbnz	r5, 18d8 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    18cc:	4c0c      	ldr	r4, [pc, #48]	; (1900 <log_init+0x50>)
    18ce:	4e0d      	ldr	r6, [pc, #52]	; (1904 <log_init+0x54>)
    18d0:	1b36      	subs	r6, r6, r4
    18d2:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    18d4:	42b5      	cmp	r5, r6
    18d6:	db00      	blt.n	18da <log_init+0x2a>
}
    18d8:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    18da:	7b23      	ldrb	r3, [r4, #12]
    18dc:	b153      	cbz	r3, 18f4 <log_init+0x44>
			if (backend->api->init != NULL) {
    18de:	6823      	ldr	r3, [r4, #0]
    18e0:	699b      	ldr	r3, [r3, #24]
    18e2:	b10b      	cbz	r3, 18e8 <log_init+0x38>
				backend->api->init(backend);
    18e4:	4620      	mov	r0, r4
    18e6:	4798      	blx	r3
			log_backend_enable(backend,
    18e8:	6863      	ldr	r3, [r4, #4]
    18ea:	2204      	movs	r2, #4
    18ec:	6819      	ldr	r1, [r3, #0]
    18ee:	4620      	mov	r0, r4
    18f0:	f000 f992 	bl	1c18 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    18f4:	3501      	adds	r5, #1
    18f6:	3410      	adds	r4, #16
    18f8:	e7ec      	b.n	18d4 <log_init+0x24>
    18fa:	bf00      	nop
    18fc:	2000089c 	.word	0x2000089c
    1900:	00008930 	.word	0x00008930
    1904:	00008940 	.word	0x00008940

00001908 <z_log_notify_backend_enabled>:
{
    1908:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    190a:	4c04      	ldr	r4, [pc, #16]	; (191c <z_log_notify_backend_enabled+0x14>)
    190c:	7823      	ldrb	r3, [r4, #0]
    190e:	b913      	cbnz	r3, 1916 <z_log_notify_backend_enabled+0xe>
    1910:	4803      	ldr	r0, [pc, #12]	; (1920 <z_log_notify_backend_enabled+0x18>)
    1912:	f004 fd81 	bl	6418 <z_impl_k_sem_give>
	backend_attached = true;
    1916:	2301      	movs	r3, #1
    1918:	7023      	strb	r3, [r4, #0]
}
    191a:	bd10      	pop	{r4, pc}
    191c:	20000b32 	.word	0x20000b32
    1920:	20000154 	.word	0x20000154

00001924 <z_log_dropped>:
    1924:	4b0c      	ldr	r3, [pc, #48]	; (1958 <z_log_dropped+0x34>)
    1926:	f3bf 8f5b 	dmb	ish
    192a:	e853 2f00 	ldrex	r2, [r3]
    192e:	3201      	adds	r2, #1
    1930:	e843 2100 	strex	r1, r2, [r3]
    1934:	2900      	cmp	r1, #0
    1936:	d1f8      	bne.n	192a <z_log_dropped+0x6>
    1938:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    193c:	b158      	cbz	r0, 1956 <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    193e:	f3bf 8f5b 	dmb	ish
    1942:	4b06      	ldr	r3, [pc, #24]	; (195c <z_log_dropped+0x38>)
    1944:	e853 2f00 	ldrex	r2, [r3]
    1948:	3a01      	subs	r2, #1
    194a:	e843 2100 	strex	r1, r2, [r3]
    194e:	2900      	cmp	r1, #0
    1950:	d1f8      	bne.n	1944 <z_log_dropped+0x20>
    1952:	f3bf 8f5b 	dmb	ish
}
    1956:	4770      	bx	lr
    1958:	20000898 	.word	0x20000898
    195c:	20000894 	.word	0x20000894

00001960 <z_log_dropped_read_and_clear>:
}
    1960:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1962:	4b06      	ldr	r3, [pc, #24]	; (197c <z_log_dropped_read_and_clear+0x1c>)
    1964:	f3bf 8f5b 	dmb	ish
    1968:	4602      	mov	r2, r0
    196a:	e853 0f00 	ldrex	r0, [r3]
    196e:	e843 2100 	strex	r1, r2, [r3]
    1972:	2900      	cmp	r1, #0
    1974:	d1f9      	bne.n	196a <z_log_dropped_read_and_clear+0xa>
    1976:	f3bf 8f5b 	dmb	ish
    197a:	4770      	bx	lr
    197c:	20000898 	.word	0x20000898

00001980 <dropped_notify>:
{
    1980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    1982:	f7ff ffed 	bl	1960 <z_log_dropped_read_and_clear>
    1986:	4c0a      	ldr	r4, [pc, #40]	; (19b0 <dropped_notify+0x30>)
    1988:	4d0a      	ldr	r5, [pc, #40]	; (19b4 <dropped_notify+0x34>)
    198a:	1b2d      	subs	r5, r5, r4
    198c:	4607      	mov	r7, r0
    198e:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1990:	2600      	movs	r6, #0
    1992:	42ae      	cmp	r6, r5
    1994:	db00      	blt.n	1998 <dropped_notify+0x18>
}
    1996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    1998:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    199a:	795b      	ldrb	r3, [r3, #5]
    199c:	b12b      	cbz	r3, 19aa <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    199e:	6823      	ldr	r3, [r4, #0]
    19a0:	691b      	ldr	r3, [r3, #16]
    19a2:	b113      	cbz	r3, 19aa <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    19a4:	4639      	mov	r1, r7
    19a6:	4620      	mov	r0, r4
    19a8:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    19aa:	3601      	adds	r6, #1
    19ac:	3410      	adds	r4, #16
    19ae:	e7f0      	b.n	1992 <dropped_notify+0x12>
    19b0:	00008930 	.word	0x00008930
    19b4:	00008940 	.word	0x00008940

000019b8 <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    19b8:	4901      	ldr	r1, [pc, #4]	; (19c0 <z_log_msg2_init+0x8>)
    19ba:	4802      	ldr	r0, [pc, #8]	; (19c4 <z_log_msg2_init+0xc>)
    19bc:	f005 bec8 	b.w	7750 <mpsc_pbuf_init>
    19c0:	000089ac 	.word	0x000089ac
    19c4:	200008a0 	.word	0x200008a0

000019c8 <log_core_init>:
	panic_mode = false;
    19c8:	4a08      	ldr	r2, [pc, #32]	; (19ec <log_core_init+0x24>)
{
    19ca:	b508      	push	{r3, lr}
	panic_mode = false;
    19cc:	2300      	movs	r3, #0
    19ce:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    19d0:	4a07      	ldr	r2, [pc, #28]	; (19f0 <log_core_init+0x28>)
    19d2:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    19d4:	4b07      	ldr	r3, [pc, #28]	; (19f4 <log_core_init+0x2c>)
    19d6:	4a08      	ldr	r2, [pc, #32]	; (19f8 <log_core_init+0x30>)
    19d8:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    19da:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    19de:	f000 fafb 	bl	1fd8 <log_output_timestamp_freq_set>
}
    19e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg2_init();
    19e6:	f7ff bfe7 	b.w	19b8 <z_log_msg2_init>
    19ea:	bf00      	nop
    19ec:	20000b33 	.word	0x20000b33
    19f0:	20000898 	.word	0x20000898
    19f4:	20000004 	.word	0x20000004
    19f8:	000079f9 	.word	0x000079f9

000019fc <z_log_msg2_alloc>:
{
    19fc:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    19fe:	2200      	movs	r2, #0
    1a00:	4801      	ldr	r0, [pc, #4]	; (1a08 <z_log_msg2_alloc+0xc>)
    1a02:	2300      	movs	r3, #0
    1a04:	f005 bec5 	b.w	7792 <mpsc_pbuf_alloc>
    1a08:	200008a0 	.word	0x200008a0

00001a0c <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    1a0c:	4801      	ldr	r0, [pc, #4]	; (1a14 <z_log_msg2_claim+0x8>)
    1a0e:	f005 bf56 	b.w	78be <mpsc_pbuf_claim>
    1a12:	bf00      	nop
    1a14:	200008a0 	.word	0x200008a0

00001a18 <z_log_msg2_free>:
{
    1a18:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1a1a:	4801      	ldr	r0, [pc, #4]	; (1a20 <z_log_msg2_free+0x8>)
    1a1c:	f005 bf9b 	b.w	7956 <mpsc_pbuf_free>
    1a20:	200008a0 	.word	0x200008a0

00001a24 <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    1a24:	4801      	ldr	r0, [pc, #4]	; (1a2c <z_log_msg2_pending+0x8>)
    1a26:	f005 bfca 	b.w	79be <mpsc_pbuf_is_pending>
    1a2a:	bf00      	nop
    1a2c:	200008a0 	.word	0x200008a0

00001a30 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    1a30:	4b1d      	ldr	r3, [pc, #116]	; (1aa8 <z_impl_log_process+0x78>)
    1a32:	781b      	ldrb	r3, [r3, #0]
{
    1a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1a38:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    1a3a:	b903      	cbnz	r3, 1a3e <z_impl_log_process+0xe>
    1a3c:	b388      	cbz	r0, 1aa2 <z_impl_log_process+0x72>
	msg = get_msg();
    1a3e:	f005 fff0 	bl	7a22 <get_msg>
	if (msg.msg) {
    1a42:	4606      	mov	r6, r0
    1a44:	b118      	cbz	r0, 1a4e <z_impl_log_process+0x1e>
		if (!bypass) {
    1a46:	b16d      	cbz	r5, 1a64 <z_impl_log_process+0x34>
		z_log_msg2_free(msg.msg2);
    1a48:	4630      	mov	r0, r6
    1a4a:	f7ff ffe5 	bl	1a18 <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
    1a4e:	b92d      	cbnz	r5, 1a5c <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
    1a50:	4b16      	ldr	r3, [pc, #88]	; (1aac <z_impl_log_process+0x7c>)
	if (!bypass && z_log_dropped_pending()) {
    1a52:	681b      	ldr	r3, [r3, #0]
    1a54:	2b00      	cmp	r3, #0
    1a56:	dd01      	ble.n	1a5c <z_impl_log_process+0x2c>
		dropped_notify();
    1a58:	f7ff ff92 	bl	1980 <dropped_notify>
}
    1a5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_log_msg2_pending();
    1a60:	f7ff bfe0 	b.w	1a24 <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1a64:	4b12      	ldr	r3, [pc, #72]	; (1ab0 <z_impl_log_process+0x80>)
    1a66:	f3bf 8f5b 	dmb	ish
    1a6a:	e853 2f00 	ldrex	r2, [r3]
    1a6e:	3a01      	subs	r2, #1
    1a70:	e843 2100 	strex	r1, r2, [r3]
    1a74:	2900      	cmp	r1, #0
    1a76:	d1f8      	bne.n	1a6a <z_impl_log_process+0x3a>
    1a78:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
    1a7c:	4c0d      	ldr	r4, [pc, #52]	; (1ab4 <z_impl_log_process+0x84>)
    1a7e:	4f0e      	ldr	r7, [pc, #56]	; (1ab8 <z_impl_log_process+0x88>)
    1a80:	1b3f      	subs	r7, r7, r4
    1a82:	113f      	asrs	r7, r7, #4
    1a84:	46a8      	mov	r8, r5
		for (int i = 0; i < log_backend_count_get(); i++) {
    1a86:	45b8      	cmp	r8, r7
    1a88:	dade      	bge.n	1a48 <z_impl_log_process+0x18>
	return backend->cb->active;
    1a8a:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    1a8c:	795b      	ldrb	r3, [r3, #5]
    1a8e:	b123      	cbz	r3, 1a9a <z_impl_log_process+0x6a>
	backend->api->process(backend, msg);
    1a90:	6823      	ldr	r3, [r4, #0]
    1a92:	4631      	mov	r1, r6
    1a94:	681b      	ldr	r3, [r3, #0]
    1a96:	4620      	mov	r0, r4
    1a98:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    1a9a:	f108 0801 	add.w	r8, r8, #1
    1a9e:	3410      	adds	r4, #16
    1aa0:	e7f1      	b.n	1a86 <z_impl_log_process+0x56>
}
    1aa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1aa6:	bf00      	nop
    1aa8:	20000b32 	.word	0x20000b32
    1aac:	20000898 	.word	0x20000898
    1ab0:	20000894 	.word	0x20000894
    1ab4:	00008930 	.word	0x00008930
    1ab8:	00008940 	.word	0x00008940

00001abc <log_process_thread_func>:
{
    1abc:	b510      	push	{r4, lr}
	log_init();
    1abe:	f7ff fef7 	bl	18b0 <log_init>
	return z_impl_z_current_get();
    1ac2:	f005 f937 	bl	6d34 <z_impl_z_current_get>
	proc_tid = process_tid;
    1ac6:	4b0c      	ldr	r3, [pc, #48]	; (1af8 <log_process_thread_func+0x3c>)
    1ac8:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    1aca:	b130      	cbz	r0, 1ada <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    1acc:	4b0b      	ldr	r3, [pc, #44]	; (1afc <log_process_thread_func+0x40>)
	    process_tid &&
    1ace:	681b      	ldr	r3, [r3, #0]
    1ad0:	2b09      	cmp	r3, #9
    1ad2:	dd02      	ble.n	1ada <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    1ad4:	480a      	ldr	r0, [pc, #40]	; (1b00 <log_process_thread_func+0x44>)
    1ad6:	f004 fc9f 	bl	6418 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    1ada:	4c09      	ldr	r4, [pc, #36]	; (1b00 <log_process_thread_func+0x44>)
		union { uintptr_t x; bool val; } parm0 = { .val = bypass };
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    1adc:	2000      	movs	r0, #0
    1ade:	f7ff ffa7 	bl	1a30 <z_impl_log_process>
		if (log_process(false) == false) {
    1ae2:	2800      	cmp	r0, #0
    1ae4:	d1fa      	bne.n	1adc <log_process_thread_func+0x20>
    1ae6:	f04f 32ff 	mov.w	r2, #4294967295
    1aea:	f04f 33ff 	mov.w	r3, #4294967295
    1aee:	4620      	mov	r0, r4
    1af0:	f004 fcb2 	bl	6458 <z_impl_k_sem_take>
    1af4:	e7f2      	b.n	1adc <log_process_thread_func+0x20>
    1af6:	bf00      	nop
    1af8:	200008d8 	.word	0x200008d8
    1afc:	20000894 	.word	0x20000894
    1b00:	20000154 	.word	0x20000154

00001b04 <z_log_msg_post_finalize>:
{
    1b04:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1b06:	4b1d      	ldr	r3, [pc, #116]	; (1b7c <z_log_msg_post_finalize+0x78>)
    1b08:	f3bf 8f5b 	dmb	ish
    1b0c:	e853 2f00 	ldrex	r2, [r3]
    1b10:	1c51      	adds	r1, r2, #1
    1b12:	e843 1000 	strex	r0, r1, [r3]
    1b16:	2800      	cmp	r0, #0
    1b18:	d1f8      	bne.n	1b0c <z_log_msg_post_finalize+0x8>
    1b1a:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    1b1e:	4b18      	ldr	r3, [pc, #96]	; (1b80 <z_log_msg_post_finalize+0x7c>)
    1b20:	781b      	ldrb	r3, [r3, #0]
    1b22:	b183      	cbz	r3, 1b46 <z_log_msg_post_finalize+0x42>
    1b24:	f04f 0320 	mov.w	r3, #32
    1b28:	f3ef 8411 	mrs	r4, BASEPRI
    1b2c:	f383 8812 	msr	BASEPRI_MAX, r3
    1b30:	f3bf 8f6f 	isb	sy
    1b34:	2000      	movs	r0, #0
    1b36:	f7ff ff7b 	bl	1a30 <z_impl_log_process>
	__asm__ volatile(
    1b3a:	f384 8811 	msr	BASEPRI, r4
    1b3e:	f3bf 8f6f 	isb	sy
}
    1b42:	b002      	add	sp, #8
    1b44:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
    1b46:	4b0f      	ldr	r3, [pc, #60]	; (1b84 <z_log_msg_post_finalize+0x80>)
    1b48:	681b      	ldr	r3, [r3, #0]
    1b4a:	2b00      	cmp	r3, #0
    1b4c:	d0f9      	beq.n	1b42 <z_log_msg_post_finalize+0x3e>
    1b4e:	b952      	cbnz	r2, 1b66 <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
    1b50:	2200      	movs	r2, #0
    1b52:	2300      	movs	r3, #0
    1b54:	e9cd 2300 	strd	r2, r3, [sp]
    1b58:	480b      	ldr	r0, [pc, #44]	; (1b88 <z_log_msg_post_finalize+0x84>)
    1b5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1b5e:	2300      	movs	r3, #0
    1b60:	f005 faea 	bl	7138 <z_impl_k_timer_start>
    1b64:	e7ed      	b.n	1b42 <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    1b66:	2a0a      	cmp	r2, #10
    1b68:	d1eb      	bne.n	1b42 <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
    1b6a:	4807      	ldr	r0, [pc, #28]	; (1b88 <z_log_msg_post_finalize+0x84>)
    1b6c:	f006 fd74 	bl	8658 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1b70:	4806      	ldr	r0, [pc, #24]	; (1b8c <z_log_msg_post_finalize+0x88>)
}
    1b72:	b002      	add	sp, #8
    1b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1b78:	f004 bc4e 	b.w	6418 <z_impl_k_sem_give>
    1b7c:	20000894 	.word	0x20000894
    1b80:	20000b33 	.word	0x20000b33
    1b84:	200008d8 	.word	0x200008d8
    1b88:	20000568 	.word	0x20000568
    1b8c:	20000154 	.word	0x20000154

00001b90 <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
    1b90:	4b06      	ldr	r3, [pc, #24]	; (1bac <z_log_msg2_commit+0x1c>)
{
    1b92:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    1b94:	681b      	ldr	r3, [r3, #0]
{
    1b96:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1b98:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1b9a:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    1b9c:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1b9e:	4804      	ldr	r0, [pc, #16]	; (1bb0 <z_log_msg2_commit+0x20>)
    1ba0:	f005 fe6d 	bl	787e <mpsc_pbuf_commit>
}
    1ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    1ba8:	f7ff bfac 	b.w	1b04 <z_log_msg_post_finalize>
    1bac:	20000004 	.word	0x20000004
    1bb0:	200008a0 	.word	0x200008a0

00001bb4 <z_impl_log_panic>:
{
    1bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    1bb6:	4f0e      	ldr	r7, [pc, #56]	; (1bf0 <z_impl_log_panic+0x3c>)
    1bb8:	783d      	ldrb	r5, [r7, #0]
    1bba:	b975      	cbnz	r5, 1bda <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    1bbc:	4c0d      	ldr	r4, [pc, #52]	; (1bf4 <z_impl_log_panic+0x40>)
    1bbe:	4e0e      	ldr	r6, [pc, #56]	; (1bf8 <z_impl_log_panic+0x44>)
	log_init();
    1bc0:	f7ff fe76 	bl	18b0 <log_init>
    1bc4:	1b36      	subs	r6, r6, r4
    1bc6:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1bc8:	42b5      	cmp	r5, r6
    1bca:	db07      	blt.n	1bdc <z_impl_log_panic+0x28>
    1bcc:	2000      	movs	r0, #0
    1bce:	f7ff ff2f 	bl	1a30 <z_impl_log_process>
		while (log_process(false) == true) {
    1bd2:	2800      	cmp	r0, #0
    1bd4:	d1fa      	bne.n	1bcc <z_impl_log_panic+0x18>
	panic_mode = true;
    1bd6:	2301      	movs	r3, #1
    1bd8:	703b      	strb	r3, [r7, #0]
}
    1bda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    1bdc:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1bde:	795b      	ldrb	r3, [r3, #5]
    1be0:	b11b      	cbz	r3, 1bea <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    1be2:	6823      	ldr	r3, [r4, #0]
    1be4:	4620      	mov	r0, r4
    1be6:	695b      	ldr	r3, [r3, #20]
    1be8:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    1bea:	3501      	adds	r5, #1
    1bec:	3410      	adds	r4, #16
    1bee:	e7eb      	b.n	1bc8 <z_impl_log_panic+0x14>
    1bf0:	20000b33 	.word	0x20000b33
    1bf4:	00008930 	.word	0x00008930
    1bf8:	00008940 	.word	0x00008940

00001bfc <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    1bfc:	4a04      	ldr	r2, [pc, #16]	; (1c10 <log_source_name_get+0x14>)
    1bfe:	4b05      	ldr	r3, [pc, #20]	; (1c14 <log_source_name_get+0x18>)
    1c00:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1c02:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    1c06:	bf34      	ite	cc
    1c08:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1c0c:	2000      	movcs	r0, #0
}
    1c0e:	4770      	bx	lr
    1c10:	000088c0 	.word	0x000088c0
    1c14:	00008930 	.word	0x00008930

00001c18 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1c18:	4a05      	ldr	r2, [pc, #20]	; (1c30 <log_backend_enable+0x18>)
	backend->cb->id = id;
    1c1a:	6843      	ldr	r3, [r0, #4]
    1c1c:	1a80      	subs	r0, r0, r2
    1c1e:	1100      	asrs	r0, r0, #4
    1c20:	3001      	adds	r0, #1
	backend->cb->active = true;
    1c22:	2201      	movs	r2, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
	}

	log_backend_id_set(backend, id);
    1c24:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
    1c26:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1c28:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    1c2a:	f7ff be6d 	b.w	1908 <z_log_notify_backend_enabled>
    1c2e:	bf00      	nop
    1c30:	00008930 	.word	0x00008930

00001c34 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1c34:	b40e      	push	{r1, r2, r3}
    1c36:	b503      	push	{r0, r1, lr}
    1c38:	ab03      	add	r3, sp, #12
    1c3a:	4601      	mov	r1, r0
    1c3c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1c40:	4804      	ldr	r0, [pc, #16]	; (1c54 <print_formatted+0x20>)
	va_start(args, fmt);
    1c42:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1c44:	f7ff fa38 	bl	10b8 <cbvprintf>
	va_end(args);

	return length;
}
    1c48:	b002      	add	sp, #8
    1c4a:	f85d eb04 	ldr.w	lr, [sp], #4
    1c4e:	b003      	add	sp, #12
    1c50:	4770      	bx	lr
    1c52:	bf00      	nop
    1c54:	00007a63 	.word	0x00007a63

00001c58 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    1c58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1c5c:	461d      	mov	r5, r3
    1c5e:	9b08      	ldr	r3, [sp, #32]
    1c60:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1c62:	06da      	lsls	r2, r3, #27
{
    1c64:	4604      	mov	r4, r0
    1c66:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1c68:	d405      	bmi.n	1c76 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1c6a:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    1c6c:	bf4c      	ite	mi
    1c6e:	492a      	ldrmi	r1, [pc, #168]	; (1d18 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    1c70:	492a      	ldrpl	r1, [pc, #168]	; (1d1c <hexdump_line_print+0xc4>)
    1c72:	f7ff ffdf 	bl	1c34 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    1c76:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1d20 <hexdump_line_print+0xc8>
{
    1c7a:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    1c7e:	45a8      	cmp	r8, r5
    1c80:	db2a      	blt.n	1cd8 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    1c82:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1d24 <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    1c86:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1d28 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    1c8a:	f8df a094 	ldr.w	sl, [pc, #148]	; 1d20 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1c8e:	2500      	movs	r5, #0
		if (i < length) {
    1c90:	42bd      	cmp	r5, r7
    1c92:	d22f      	bcs.n	1cf4 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    1c94:	5d72      	ldrb	r2, [r6, r5]
    1c96:	4649      	mov	r1, r9
    1c98:	4620      	mov	r0, r4
    1c9a:	f7ff ffcb 	bl	1c34 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1c9e:	3501      	adds	r5, #1
    1ca0:	2d10      	cmp	r5, #16
    1ca2:	d120      	bne.n	1ce6 <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    1ca4:	4921      	ldr	r1, [pc, #132]	; (1d2c <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    1ca6:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1d20 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    1caa:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1d30 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    1cae:	4620      	mov	r0, r4
    1cb0:	f7ff ffc0 	bl	1c34 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1cb4:	2500      	movs	r5, #0
		if (i < length) {
    1cb6:	42af      	cmp	r7, r5
    1cb8:	d928      	bls.n	1d0c <hexdump_line_print+0xb4>
			char c = (char)data[i];
    1cba:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    1cbc:	f1a2 0320 	sub.w	r3, r2, #32
    1cc0:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    1cc2:	bf28      	it	cs
    1cc4:	222e      	movcs	r2, #46	; 0x2e
    1cc6:	4649      	mov	r1, r9
    1cc8:	4620      	mov	r0, r4
    1cca:	f7ff ffb3 	bl	1c34 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1cce:	3501      	adds	r5, #1
    1cd0:	2d10      	cmp	r5, #16
    1cd2:	d114      	bne.n	1cfe <hexdump_line_print+0xa6>
		}
	}
}
    1cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    1cd8:	4649      	mov	r1, r9
    1cda:	4620      	mov	r0, r4
    1cdc:	f7ff ffaa 	bl	1c34 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1ce0:	f108 0801 	add.w	r8, r8, #1
    1ce4:	e7cb      	b.n	1c7e <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    1ce6:	076a      	lsls	r2, r5, #29
    1ce8:	d1d2      	bne.n	1c90 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    1cea:	4651      	mov	r1, sl
    1cec:	4620      	mov	r0, r4
    1cee:	f7ff ffa1 	bl	1c34 <print_formatted>
    1cf2:	e7cd      	b.n	1c90 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    1cf4:	4641      	mov	r1, r8
    1cf6:	4620      	mov	r0, r4
    1cf8:	f7ff ff9c 	bl	1c34 <print_formatted>
    1cfc:	e7cf      	b.n	1c9e <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    1cfe:	076b      	lsls	r3, r5, #29
    1d00:	d1d9      	bne.n	1cb6 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    1d02:	4641      	mov	r1, r8
    1d04:	4620      	mov	r0, r4
    1d06:	f7ff ff95 	bl	1c34 <print_formatted>
    1d0a:	e7d4      	b.n	1cb6 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    1d0c:	4641      	mov	r1, r8
    1d0e:	4620      	mov	r0, r4
    1d10:	f7ff ff90 	bl	1c34 <print_formatted>
    1d14:	e7db      	b.n	1cce <hexdump_line_print+0x76>
    1d16:	bf00      	nop
    1d18:	00008daf 	.word	0x00008daf
    1d1c:	00008dae 	.word	0x00008dae
    1d20:	00008db9 	.word	0x00008db9
    1d24:	00008db7 	.word	0x00008db7
    1d28:	00008db1 	.word	0x00008db1
    1d2c:	00008dbb 	.word	0x00008dbb
    1d30:	00008dbd 	.word	0x00008dbd

00001d34 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    1d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1d38:	b087      	sub	sp, #28
    1d3a:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1d3c:	f001 0301 	and.w	r3, r1, #1
{
    1d40:	9205      	str	r2, [sp, #20]
    1d42:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    1d46:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1d4a:	9304      	str	r3, [sp, #16]
{
    1d4c:	4607      	mov	r7, r0
    1d4e:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1d50:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1d54:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    1d58:	f005 fe67 	bl	7a2a <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    1d5c:	4602      	mov	r2, r0
    1d5e:	2800      	cmp	r0, #0
    1d60:	d044      	beq.n	1dec <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    1d62:	493a      	ldr	r1, [pc, #232]	; (1e4c <prefix_print+0x118>)
    1d64:	4638      	mov	r0, r7
    1d66:	f7ff ff65 	bl	1c34 <print_formatted>
    1d6a:	4605      	mov	r5, r0
	}

	if (stamp) {
    1d6c:	f1bb 0f00 	cmp.w	fp, #0
    1d70:	d008      	beq.n	1d84 <prefix_print+0x50>
	if (!format) {
    1d72:	f018 0f44 	tst.w	r8, #68	; 0x44
    1d76:	d13b      	bne.n	1df0 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    1d78:	4935      	ldr	r1, [pc, #212]	; (1e50 <prefix_print+0x11c>)
    1d7a:	4622      	mov	r2, r4
    1d7c:	4638      	mov	r0, r7
    1d7e:	f7ff ff59 	bl	1c34 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    1d82:	4405      	add	r5, r0
	if (color) {
    1d84:	9b04      	ldr	r3, [sp, #16]
    1d86:	b153      	cbz	r3, 1d9e <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    1d88:	4b32      	ldr	r3, [pc, #200]	; (1e54 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    1d8a:	4933      	ldr	r1, [pc, #204]	; (1e58 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    1d8c:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    1d90:	4b32      	ldr	r3, [pc, #200]	; (1e5c <prefix_print+0x128>)
    1d92:	4638      	mov	r0, r7
    1d94:	2a00      	cmp	r2, #0
    1d96:	bf08      	it	eq
    1d98:	461a      	moveq	r2, r3
    1d9a:	f7ff ff4b 	bl	1c34 <print_formatted>
	if (level_on) {
    1d9e:	b13e      	cbz	r6, 1db0 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    1da0:	4b2f      	ldr	r3, [pc, #188]	; (1e60 <prefix_print+0x12c>)
    1da2:	4930      	ldr	r1, [pc, #192]	; (1e64 <prefix_print+0x130>)
    1da4:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    1da8:	4638      	mov	r0, r7
    1daa:	f7ff ff43 	bl	1c34 <print_formatted>
    1dae:	4606      	mov	r6, r0
	if (source_id >= 0) {
    1db0:	f1ba 0f00 	cmp.w	sl, #0
    1db4:	db16      	blt.n	1de4 <prefix_print+0xb0>
		total += print_formatted(output,
    1db6:	9b05      	ldr	r3, [sp, #20]
    1db8:	2b00      	cmp	r3, #0
    1dba:	d045      	beq.n	1e48 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1dbc:	2301      	movs	r3, #1
    1dbe:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    1dc2:	4b29      	ldr	r3, [pc, #164]	; (1e68 <prefix_print+0x134>)
    1dc4:	4c29      	ldr	r4, [pc, #164]	; (1e6c <prefix_print+0x138>)
    1dc6:	f019 0f10 	tst.w	r9, #16
    1dca:	bf18      	it	ne
    1dcc:	461c      	movne	r4, r3
    1dce:	4651      	mov	r1, sl
    1dd0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    1dd4:	f7ff ff12 	bl	1bfc <log_source_name_get>
    1dd8:	4621      	mov	r1, r4
    1dda:	4602      	mov	r2, r0
    1ddc:	4638      	mov	r0, r7
    1dde:	f7ff ff29 	bl	1c34 <print_formatted>
    1de2:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    1de4:	1970      	adds	r0, r6, r5
    1de6:	b007      	add	sp, #28
    1de8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    1dec:	4605      	mov	r5, r0
    1dee:	e7bd      	b.n	1d6c <prefix_print+0x38>
	} else if (freq != 0U) {
    1df0:	4b1f      	ldr	r3, [pc, #124]	; (1e70 <prefix_print+0x13c>)
    1df2:	6818      	ldr	r0, [r3, #0]
    1df4:	2800      	cmp	r0, #0
    1df6:	d0c4      	beq.n	1d82 <prefix_print+0x4e>
		timestamp /= timestamp_div;
    1df8:	4b1e      	ldr	r3, [pc, #120]	; (1e74 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    1dfa:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1dfe:	681b      	ldr	r3, [r3, #0]
    1e00:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    1e04:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    1e08:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    1e0c:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    1e10:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    1e14:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    1e18:	fbb3 f2f1 	udiv	r2, r3, r1
    1e1c:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1e20:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    1e24:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1e28:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    1e2c:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1e30:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    1e34:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1e36:	fbb4 f0f0 	udiv	r0, r4, r0
				length = print_formatted(output,
    1e3a:	490f      	ldr	r1, [pc, #60]	; (1e78 <prefix_print+0x144>)
    1e3c:	e9cd e001 	strd	lr, r0, [sp, #4]
    1e40:	4638      	mov	r0, r7
    1e42:	f7ff fef7 	bl	1c34 <print_formatted>
    1e46:	e79c      	b.n	1d82 <prefix_print+0x4e>
		total += print_formatted(output,
    1e48:	4c08      	ldr	r4, [pc, #32]	; (1e6c <prefix_print+0x138>)
    1e4a:	e7c0      	b.n	1dce <prefix_print+0x9a>
    1e4c:	00008dce 	.word	0x00008dce
    1e50:	00008dd2 	.word	0x00008dd2
    1e54:	000089c0 	.word	0x000089c0
    1e58:	00009332 	.word	0x00009332
    1e5c:	00008dc0 	.word	0x00008dc0
    1e60:	000089d4 	.word	0x000089d4
    1e64:	00008df7 	.word	0x00008df7
    1e68:	00008dca 	.word	0x00008dca
    1e6c:	00008dc5 	.word	0x00008dc5
    1e70:	200008dc 	.word	0x200008dc
    1e74:	200008e0 	.word	0x200008e0
    1e78:	00008ddb 	.word	0x00008ddb

00001e7c <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    1e7c:	b538      	push	{r3, r4, r5, lr}
    1e7e:	460c      	mov	r4, r1
	if (color) {
    1e80:	07e1      	lsls	r1, r4, #31
{
    1e82:	4605      	mov	r5, r0
	if (color) {
    1e84:	d503      	bpl.n	1e8e <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    1e86:	4a08      	ldr	r2, [pc, #32]	; (1ea8 <postfix_print+0x2c>)
    1e88:	4908      	ldr	r1, [pc, #32]	; (1eac <postfix_print+0x30>)
    1e8a:	f7ff fed3 	bl	1c34 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1e8e:	06e2      	lsls	r2, r4, #27
    1e90:	d408      	bmi.n	1ea4 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1e92:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    1e94:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    1e96:	bf4c      	ite	mi
    1e98:	4905      	ldrmi	r1, [pc, #20]	; (1eb0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    1e9a:	4906      	ldrpl	r1, [pc, #24]	; (1eb4 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    1e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    1ea0:	f7ff bec8 	b.w	1c34 <print_formatted>
}
    1ea4:	bd38      	pop	{r3, r4, r5, pc}
    1ea6:	bf00      	nop
    1ea8:	00008dc0 	.word	0x00008dc0
    1eac:	00009332 	.word	0x00009332
    1eb0:	00008daf 	.word	0x00008daf
    1eb4:	00008dae 	.word	0x00008dae

00001eb8 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    1eb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    1ebc:	880b      	ldrh	r3, [r1, #0]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    1ebe:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    1ec2:	4606      	mov	r6, r0
    1ec4:	460c      	mov	r4, r1
    1ec6:	4690      	mov	r8, r2
    1ec8:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    1ecc:	d04d      	beq.n	1f6a <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
    1ece:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    1ed0:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    1ed2:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    1ed6:	2b00      	cmp	r3, #0
    1ed8:	d044      	beq.n	1f64 <log_output_msg2_process+0xac>
    1eda:	4925      	ldr	r1, [pc, #148]	; (1f70 <log_output_msg2_process+0xb8>)
    1edc:	1a5b      	subs	r3, r3, r1
    1ede:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    1ee2:	e9cd 2301 	strd	r2, r3, [sp, #4]
    1ee6:	f8cd 9000 	str.w	r9, [sp]
    1eea:	68a3      	ldr	r3, [r4, #8]
    1eec:	2200      	movs	r2, #0
    1eee:	4641      	mov	r1, r8
    1ef0:	4630      	mov	r0, r6
    1ef2:	f7ff ff1f 	bl	1d34 <prefix_print>
    1ef6:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    1ef8:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    1efa:	f855 3b10 	ldr.w	r3, [r5], #16
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    1efe:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1f02:	b153      	cbz	r3, 1f1a <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    1f04:	4f1b      	ldr	r7, [pc, #108]	; (1f74 <log_output_msg2_process+0xbc>)
    1f06:	481c      	ldr	r0, [pc, #112]	; (1f78 <log_output_msg2_process+0xc0>)
    1f08:	491c      	ldr	r1, [pc, #112]	; (1f7c <log_output_msg2_process+0xc4>)
    1f0a:	462b      	mov	r3, r5
    1f0c:	4632      	mov	r2, r6
    1f0e:	f1b9 0f00 	cmp.w	r9, #0
    1f12:	bf08      	it	eq
    1f14:	4638      	moveq	r0, r7
    1f16:	f005 f9b6 	bl	7286 <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    1f1a:	8867      	ldrh	r7, [r4, #2]
    1f1c:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    1f20:	b197      	cbz	r7, 1f48 <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
    1f22:	6823      	ldr	r3, [r4, #0]
    1f24:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1f28:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1f2a:	2f10      	cmp	r7, #16
    1f2c:	463c      	mov	r4, r7
    1f2e:	bf28      	it	cs
    1f30:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    1f32:	4629      	mov	r1, r5
    1f34:	f8cd 8000 	str.w	r8, [sp]
    1f38:	4653      	mov	r3, sl
    1f3a:	4622      	mov	r2, r4
    1f3c:	4630      	mov	r0, r6
    1f3e:	f7ff fe8b 	bl	1c58 <hexdump_line_print>
	} while (len);
    1f42:	1b3f      	subs	r7, r7, r4
		data += length;
    1f44:	4425      	add	r5, r4
	} while (len);
    1f46:	d1f0      	bne.n	1f2a <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    1f48:	f1b9 0f00 	cmp.w	r9, #0
    1f4c:	d004      	beq.n	1f58 <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
    1f4e:	464a      	mov	r2, r9
    1f50:	4641      	mov	r1, r8
    1f52:	4630      	mov	r0, r6
    1f54:	f7ff ff92 	bl	1e7c <postfix_print>
	}

	log_output_flush(output);
    1f58:	4630      	mov	r0, r6
}
    1f5a:	b004      	add	sp, #16
    1f5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    1f60:	f005 bd72 	b.w	7a48 <log_output_flush>
		int16_t source_id = source ?
    1f64:	f04f 33ff 	mov.w	r3, #4294967295
    1f68:	e7bb      	b.n	1ee2 <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    1f6a:	46ca      	mov	sl, r9
    1f6c:	e7c4      	b.n	1ef8 <log_output_msg2_process+0x40>
    1f6e:	bf00      	nop
    1f70:	000088c0 	.word	0x000088c0
    1f74:	00007a99 	.word	0x00007a99
    1f78:	00007a63 	.word	0x00007a63
    1f7c:	000010b9 	.word	0x000010b9

00001f80 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    1f80:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1f82:	f242 730f 	movw	r3, #9999	; 0x270f
    1f86:	428b      	cmp	r3, r1
    1f88:	bf28      	it	cs
    1f8a:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    1f8c:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1f8e:	4a0f      	ldr	r2, [pc, #60]	; (1fcc <log_output_dropped_process+0x4c>)
{
    1f90:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1f92:	2105      	movs	r1, #5
    1f94:	4668      	mov	r0, sp
    1f96:	f005 f9e3 	bl	7360 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1f9a:	6863      	ldr	r3, [r4, #4]
    1f9c:	490c      	ldr	r1, [pc, #48]	; (1fd0 <log_output_dropped_process+0x50>)
    1f9e:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1fa0:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1fa2:	220b      	movs	r2, #11
    1fa4:	4628      	mov	r0, r5
    1fa6:	f005 fd42 	bl	7a2e <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    1faa:	6863      	ldr	r3, [r4, #4]
    1fac:	4632      	mov	r2, r6
    1fae:	4669      	mov	r1, sp
    1fb0:	4628      	mov	r0, r5
    1fb2:	685b      	ldr	r3, [r3, #4]
    1fb4:	f005 fd3b 	bl	7a2e <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    1fb8:	6863      	ldr	r3, [r4, #4]
    1fba:	4906      	ldr	r1, [pc, #24]	; (1fd4 <log_output_dropped_process+0x54>)
    1fbc:	685b      	ldr	r3, [r3, #4]
    1fbe:	221b      	movs	r2, #27
    1fc0:	4628      	mov	r0, r5
    1fc2:	f005 fd34 	bl	7a2e <buffer_write>
		     output->control_block->ctx);
}
    1fc6:	b002      	add	sp, #8
    1fc8:	bd70      	pop	{r4, r5, r6, pc}
    1fca:	bf00      	nop
    1fcc:	00008d5b 	.word	0x00008d5b
    1fd0:	00008e39 	.word	0x00008e39
    1fd4:	00008e1d 	.word	0x00008e1d

00001fd8 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    1fd8:	4a08      	ldr	r2, [pc, #32]	; (1ffc <log_output_timestamp_freq_set+0x24>)
{
    1fda:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    1fdc:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1fde:	4c08      	ldr	r4, [pc, #32]	; (2000 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    1fe0:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1fe2:	2100      	movs	r1, #0
    1fe4:	42a0      	cmp	r0, r4
    1fe6:	d804      	bhi.n	1ff2 <log_output_timestamp_freq_set+0x1a>
    1fe8:	b101      	cbz	r1, 1fec <log_output_timestamp_freq_set+0x14>
    1fea:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1fec:	4b05      	ldr	r3, [pc, #20]	; (2004 <log_output_timestamp_freq_set+0x2c>)
    1fee:	6018      	str	r0, [r3, #0]
}
    1ff0:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    1ff2:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1ff4:	005b      	lsls	r3, r3, #1
    1ff6:	2101      	movs	r1, #1
    1ff8:	e7f4      	b.n	1fe4 <log_output_timestamp_freq_set+0xc>
    1ffa:	bf00      	nop
    1ffc:	200008e0 	.word	0x200008e0
    2000:	000f4240 	.word	0x000f4240
    2004:	200008dc 	.word	0x200008dc

00002008 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    2008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    200c:	b087      	sub	sp, #28
    200e:	e9dd 5711 	ldrd	r5, r7, [sp, #68]	; 0x44
    2012:	469a      	mov	sl, r3
    2014:	9b10      	ldr	r3, [sp, #64]	; 0x40
    2016:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    201a:	9303      	str	r3, [sp, #12]
    201c:	4604      	mov	r4, r0
    201e:	4689      	mov	r9, r1
    2020:	4690      	mov	r8, r2
	int plen;

	if (fmt) {
    2022:	b3cf      	cbz	r7, 2098 <z_impl_z_log_msg2_runtime_vcreate+0x90>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    2024:	f8cd b000 	str.w	fp, [sp]
    2028:	463b      	mov	r3, r7
    202a:	462a      	mov	r2, r5
    202c:	2110      	movs	r1, #16
    202e:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    2030:	f8cd b014 	str.w	fp, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    2034:	f7fe fbba 	bl	7ac <cbvprintf_package>
    2038:	4606      	mov	r6, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    203a:	9a03      	ldr	r2, [sp, #12]
    203c:	f008 0307 	and.w	r3, r8, #7
    2040:	f004 0807 	and.w	r8, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    2044:	f102 0017 	add.w	r0, r2, #23
	struct log_msg2_desc desc =
    2048:	4c14      	ldr	r4, [pc, #80]	; (209c <z_impl_z_log_msg2_runtime_vcreate+0x94>)
    204a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
    204e:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    2052:	4430      	add	r0, r6
	struct log_msg2_desc desc =
    2054:	4b12      	ldr	r3, [pc, #72]	; (20a0 <z_impl_z_log_msg2_runtime_vcreate+0x98>)
    2056:	ea04 2446 	and.w	r4, r4, r6, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    205a:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg2_desc desc =
    205e:	ea48 0804 	orr.w	r8, r8, r4
    2062:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg2_alloc(msg_wlen);
    2066:	0880      	lsrs	r0, r0, #2
	struct log_msg2_desc desc =
    2068:	ea48 0803 	orr.w	r8, r8, r3
		msg = z_log_msg2_alloc(msg_wlen);
    206c:	f7ff fcc6 	bl	19fc <z_log_msg2_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    2070:	4604      	mov	r4, r0
    2072:	b140      	cbz	r0, 2086 <z_impl_z_log_msg2_runtime_vcreate+0x7e>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    2074:	b13f      	cbz	r7, 2086 <z_impl_z_log_msg2_runtime_vcreate+0x7e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    2076:	f8cd b000 	str.w	fp, [sp]
    207a:	463b      	mov	r3, r7
    207c:	462a      	mov	r2, r5
    207e:	4631      	mov	r1, r6
    2080:	3010      	adds	r0, #16
    2082:	f7fe fb93 	bl	7ac <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    2086:	4653      	mov	r3, sl
    2088:	4642      	mov	r2, r8
    208a:	4649      	mov	r1, r9
    208c:	4620      	mov	r0, r4
	}
}
    208e:	b007      	add	sp, #28
    2090:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg2_finalize(msg, source, desc, data);
    2094:	f005 bd0d 	b.w	7ab2 <z_log_msg2_finalize>
		plen = 0;
    2098:	463e      	mov	r6, r7
    209a:	e7ce      	b.n	203a <z_impl_z_log_msg2_runtime_vcreate+0x32>
    209c:	0007fe00 	.word	0x0007fe00
    20a0:	7ff80000 	.word	0x7ff80000

000020a4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    20a4:	4b01      	ldr	r3, [pc, #4]	; (20ac <log_backend_rtt_init+0x8>)
    20a6:	2201      	movs	r2, #1
    20a8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    20aa:	4770      	bx	lr
    20ac:	20000b44 	.word	0x20000b44

000020b0 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    20b0:	4b01      	ldr	r3, [pc, #4]	; (20b8 <format_set+0x8>)
	return 0;
}
    20b2:	2000      	movs	r0, #0
	log_format_current = log_type;
    20b4:	6019      	str	r1, [r3, #0]
}
    20b6:	4770      	bx	lr
    20b8:	200008ec 	.word	0x200008ec

000020bc <panic>:
	panic_mode = true;
    20bc:	4b02      	ldr	r3, [pc, #8]	; (20c8 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    20be:	4803      	ldr	r0, [pc, #12]	; (20cc <panic+0x10>)
    20c0:	2201      	movs	r2, #1
    20c2:	701a      	strb	r2, [r3, #0]
    20c4:	f005 bcc0 	b.w	7a48 <log_output_flush>
    20c8:	20000b45 	.word	0x20000b45
    20cc:	00008a08 	.word	0x00008a08

000020d0 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    20d0:	4801      	ldr	r0, [pc, #4]	; (20d8 <dropped+0x8>)
    20d2:	f7ff bf55 	b.w	1f80 <log_output_dropped_process>
    20d6:	bf00      	nop
    20d8:	00008a08 	.word	0x00008a08

000020dc <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    20dc:	4b06      	ldr	r3, [pc, #24]	; (20f8 <process+0x1c>)
{
    20de:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    20e0:	6818      	ldr	r0, [r3, #0]
{
    20e2:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    20e4:	f7ff fbde 	bl	18a4 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    20e8:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    20ea:	4603      	mov	r3, r0
}
    20ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    20f0:	4802      	ldr	r0, [pc, #8]	; (20fc <process+0x20>)
    20f2:	220f      	movs	r2, #15
    20f4:	4718      	bx	r3
    20f6:	bf00      	nop
    20f8:	200008ec 	.word	0x200008ec
    20fc:	00008a08 	.word	0x00008a08

00002100 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    2100:	4b05      	ldr	r3, [pc, #20]	; (2118 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    2102:	781b      	ldrb	r3, [r3, #0]
    2104:	b11b      	cbz	r3, 210e <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    2106:	f241 3088 	movw	r0, #5000	; 0x1388
    210a:	f006 ba95 	b.w	8638 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    210e:	20a4      	movs	r0, #164	; 0xa4
    2110:	2100      	movs	r1, #0
    2112:	f004 bdf5 	b.w	6d00 <z_impl_k_sleep>
    2116:	bf00      	nop
    2118:	20000b45 	.word	0x20000b45

0000211c <data_out_block_mode>:
{
    211c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    2120:	f8df 908c 	ldr.w	r9, [pc, #140]	; 21b0 <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
    2124:	f8df a08c 	ldr.w	sl, [pc, #140]	; 21b4 <data_out_block_mode+0x98>
{
    2128:	4680      	mov	r8, r0
    212a:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    212c:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    212e:	f899 5000 	ldrb.w	r5, [r9]
    2132:	b9cd      	cbnz	r5, 2168 <data_out_block_mode+0x4c>
    2134:	f04f 33ff 	mov.w	r3, #4294967295
    2138:	f04f 32ff 	mov.w	r2, #4294967295
    213c:	4650      	mov	r0, sl
    213e:	f004 f8b1 	bl	62a4 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2142:	463a      	mov	r2, r7
    2144:	4641      	mov	r1, r8
    2146:	4628      	mov	r0, r5
    2148:	f003 fd9e 	bl	5c88 <SEGGER_RTT_WriteSkipNoLock>
    214c:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    214e:	4650      	mov	r0, sl
    2150:	f004 f920 	bl	6394 <z_impl_k_mutex_unlock>
		if (ret) {
    2154:	4d18      	ldr	r5, [pc, #96]	; (21b8 <data_out_block_mode+0x9c>)
    2156:	b1fe      	cbz	r6, 2198 <data_out_block_mode+0x7c>
	host_present = true;
    2158:	2301      	movs	r3, #1
    215a:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    215c:	f899 3000 	ldrb.w	r3, [r9]
    2160:	b96b      	cbnz	r3, 217e <data_out_block_mode+0x62>
}
    2162:	4638      	mov	r0, r7
    2164:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    2168:	463a      	mov	r2, r7
    216a:	4641      	mov	r1, r8
    216c:	2000      	movs	r0, #0
    216e:	f003 fd8b 	bl	5c88 <SEGGER_RTT_WriteSkipNoLock>
    2172:	4606      	mov	r6, r0
    2174:	e7ee      	b.n	2154 <data_out_block_mode+0x38>
	if (retry_cnt == 0) {
    2176:	b95c      	cbnz	r4, 2190 <data_out_block_mode+0x74>
		host_present = false;
    2178:	702c      	strb	r4, [r5, #0]
    217a:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    217e:	2000      	movs	r0, #0
    2180:	f003 fdfe 	bl	5d80 <SEGGER_RTT_HasDataUp>
    2184:	2800      	cmp	r0, #0
    2186:	d0ec      	beq.n	2162 <data_out_block_mode+0x46>
    2188:	782b      	ldrb	r3, [r5, #0]
    218a:	2b00      	cmp	r3, #0
    218c:	d1f3      	bne.n	2176 <data_out_block_mode+0x5a>
    218e:	e7e8      	b.n	2162 <data_out_block_mode+0x46>
			on_failed_write(retry_cnt--);
    2190:	3c01      	subs	r4, #1
    2192:	f7ff ffb5 	bl	2100 <on_failed_write.part.0>
    2196:	e7f2      	b.n	217e <data_out_block_mode+0x62>
		} else if (host_present) {
    2198:	782b      	ldrb	r3, [r5, #0]
    219a:	b113      	cbz	r3, 21a2 <data_out_block_mode+0x86>
	if (retry_cnt == 0) {
    219c:	3c01      	subs	r4, #1
    219e:	d104      	bne.n	21aa <data_out_block_mode+0x8e>
		host_present = false;
    21a0:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    21a2:	782b      	ldrb	r3, [r5, #0]
    21a4:	2b00      	cmp	r3, #0
    21a6:	d1c2      	bne.n	212e <data_out_block_mode+0x12>
    21a8:	e7db      	b.n	2162 <data_out_block_mode+0x46>
    21aa:	f7ff ffa9 	bl	2100 <on_failed_write.part.0>
    21ae:	e7f8      	b.n	21a2 <data_out_block_mode+0x86>
    21b0:	20000b45 	.word	0x20000b45
    21b4:	20000140 	.word	0x20000140
    21b8:	20000b44 	.word	0x20000b44

000021bc <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    21bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    21c0:	4605      	mov	r5, r0
	__asm__ volatile(
    21c2:	f04f 0320 	mov.w	r3, #32
    21c6:	f3ef 8611 	mrs	r6, BASEPRI
    21ca:	f383 8812 	msr	BASEPRI_MAX, r3
    21ce:	f3bf 8f6f 	isb	sy
	return list->head;
    21d2:	4b0e      	ldr	r3, [pc, #56]	; (220c <pm_state_notify+0x50>)
    21d4:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    21d6:	b19c      	cbz	r4, 2200 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    21d8:	4f0d      	ldr	r7, [pc, #52]	; (2210 <pm_state_notify+0x54>)
    21da:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2214 <pm_state_notify+0x58>
    21de:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    21e2:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    21e6:	2d00      	cmp	r5, #0
    21e8:	bf08      	it	eq
    21ea:	4613      	moveq	r3, r2
		if (callback) {
    21ec:	b12b      	cbz	r3, 21fa <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    21ee:	f898 2014 	ldrb.w	r2, [r8, #20]
    21f2:	fb09 f202 	mul.w	r2, r9, r2
    21f6:	5cb8      	ldrb	r0, [r7, r2]
    21f8:	4798      	blx	r3
	return node->next;
    21fa:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    21fc:	2c00      	cmp	r4, #0
    21fe:	d1f0      	bne.n	21e2 <pm_state_notify+0x26>
	__asm__ volatile(
    2200:	f386 8811 	msr	BASEPRI, r6
    2204:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2208:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    220c:	200008fc 	.word	0x200008fc
    2210:	20000904 	.word	0x20000904
    2214:	20000af0 	.word	0x20000af0

00002218 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2218:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    221a:	2301      	movs	r3, #1
    221c:	f000 001f 	and.w	r0, r0, #31
    2220:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2224:	4b07      	ldr	r3, [pc, #28]	; (2244 <atomic_clear_bit.constprop.0+0x2c>)
    2226:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    222a:	43c0      	mvns	r0, r0
    222c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2230:	e853 2f00 	ldrex	r2, [r3]
    2234:	4002      	ands	r2, r0
    2236:	e843 2100 	strex	r1, r2, [r3]
    223a:	2900      	cmp	r1, #0
    223c:	d1f8      	bne.n	2230 <atomic_clear_bit.constprop.0+0x18>
    223e:	f3bf 8f5b 	dmb	ish
}
    2242:	4770      	bx	lr
    2244:	20000910 	.word	0x20000910

00002248 <pm_system_resume>:

void pm_system_resume(void)
{
    2248:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    224a:	4b1a      	ldr	r3, [pc, #104]	; (22b4 <pm_system_resume+0x6c>)
    224c:	7d1c      	ldrb	r4, [r3, #20]
    224e:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    2252:	f004 031f 	and.w	r3, r4, #31
    2256:	2201      	movs	r2, #1
    2258:	409a      	lsls	r2, r3
    225a:	4b17      	ldr	r3, [pc, #92]	; (22b8 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    225c:	0961      	lsrs	r1, r4, #5
    225e:	43d0      	mvns	r0, r2
    2260:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2264:	e853 1f00 	ldrex	r1, [r3]
    2268:	ea01 0500 	and.w	r5, r1, r0
    226c:	e843 5c00 	strex	ip, r5, [r3]
    2270:	f1bc 0f00 	cmp.w	ip, #0
    2274:	d1f6      	bne.n	2264 <pm_system_resume+0x1c>
    2276:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    227a:	4211      	tst	r1, r2
    227c:	d013      	beq.n	22a6 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    227e:	4b0f      	ldr	r3, [pc, #60]	; (22bc <pm_system_resume+0x74>)
    2280:	4d0f      	ldr	r5, [pc, #60]	; (22c0 <pm_system_resume+0x78>)
    2282:	b18b      	cbz	r3, 22a8 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    2284:	230c      	movs	r3, #12
    2286:	4363      	muls	r3, r4
    2288:	18ea      	adds	r2, r5, r3
    228a:	5ce8      	ldrb	r0, [r5, r3]
    228c:	7851      	ldrb	r1, [r2, #1]
    228e:	f005 fcd9 	bl	7c44 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    2292:	2000      	movs	r0, #0
    2294:	f7ff ff92 	bl	21bc <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    2298:	230c      	movs	r3, #12
    229a:	435c      	muls	r4, r3
    229c:	192a      	adds	r2, r5, r4
    229e:	2300      	movs	r3, #0
    22a0:	512b      	str	r3, [r5, r4]
    22a2:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    22a6:	bd38      	pop	{r3, r4, r5, pc}
    22a8:	f383 8811 	msr	BASEPRI, r3
    22ac:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    22b0:	e7ef      	b.n	2292 <pm_system_resume+0x4a>
    22b2:	bf00      	nop
    22b4:	20000af0 	.word	0x20000af0
    22b8:	20000914 	.word	0x20000914
    22bc:	00007c45 	.word	0x00007c45
    22c0:	20000904 	.word	0x20000904

000022c4 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    22c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    22c8:	4b32      	ldr	r3, [pc, #200]	; (2394 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    22ca:	4a33      	ldr	r2, [pc, #204]	; (2398 <pm_system_suspend+0xd4>)
    22cc:	7d1c      	ldrb	r4, [r3, #20]
    22ce:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    22d2:	0963      	lsrs	r3, r4, #5
    22d4:	ea4f 0983 	mov.w	r9, r3, lsl #2
    22d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    22dc:	4e2f      	ldr	r6, [pc, #188]	; (239c <pm_system_suspend+0xd8>)
    22de:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    22e2:	f004 081f 	and.w	r8, r4, #31
    22e6:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    22ea:	f013 0f01 	tst.w	r3, #1
{
    22ee:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    22f0:	d10a      	bne.n	2308 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    22f2:	4601      	mov	r1, r0
    22f4:	4620      	mov	r0, r4
    22f6:	f000 f869 	bl	23cc <pm_policy_next_state>
		if (info != NULL) {
    22fa:	b128      	cbz	r0, 2308 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    22fc:	c807      	ldmia	r0, {r0, r1, r2}
    22fe:	230c      	movs	r3, #12
    2300:	fb03 6304 	mla	r3, r3, r4, r6
    2304:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    2308:	230c      	movs	r3, #12
    230a:	4363      	muls	r3, r4
    230c:	18f2      	adds	r2, r6, r3
    230e:	5cf5      	ldrb	r5, [r6, r3]
    2310:	b92d      	cbnz	r5, 231e <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    2312:	4620      	mov	r0, r4
    2314:	f7ff ff80 	bl	2218 <atomic_clear_bit.constprop.0>
		ret = false;
    2318:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    231a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    231e:	1c7b      	adds	r3, r7, #1
    2320:	d00f      	beq.n	2342 <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2322:	f8d2 c008 	ldr.w	ip, [r2, #8]
    2326:	481e      	ldr	r0, [pc, #120]	; (23a0 <pm_system_suspend+0xdc>)
    2328:	4a1e      	ldr	r2, [pc, #120]	; (23a4 <pm_system_suspend+0xe0>)
    232a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    232e:	2100      	movs	r1, #0
    2330:	2300      	movs	r3, #0
    2332:	fbec 0105 	umlal	r0, r1, ip, r5
    2336:	f7fd fed3 	bl	e0 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    233a:	2101      	movs	r1, #1
    233c:	1a38      	subs	r0, r7, r0
    233e:	f006 f95d 	bl	85fc <z_set_timeout_expiry>
	k_sched_lock();
    2342:	f004 fa5d 	bl	6800 <k_sched_lock>
	pm_state_notify(true);
    2346:	2001      	movs	r0, #1
    2348:	f7ff ff38 	bl	21bc <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    234c:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2350:	2301      	movs	r3, #1
    2352:	fa03 f808 	lsl.w	r8, r3, r8
    2356:	4b14      	ldr	r3, [pc, #80]	; (23a8 <pm_system_suspend+0xe4>)
    2358:	4499      	add	r9, r3
    235a:	e859 3f00 	ldrex	r3, [r9]
    235e:	ea43 0308 	orr.w	r3, r3, r8
    2362:	e849 3200 	strex	r2, r3, [r9]
    2366:	2a00      	cmp	r2, #0
    2368:	d1f7      	bne.n	235a <pm_system_suspend+0x96>
    236a:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    236e:	4b0f      	ldr	r3, [pc, #60]	; (23ac <pm_system_suspend+0xe8>)
    2370:	b133      	cbz	r3, 2380 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    2372:	230c      	movs	r3, #12
    2374:	4363      	muls	r3, r4
    2376:	18f2      	adds	r2, r6, r3
    2378:	5cf0      	ldrb	r0, [r6, r3]
    237a:	7851      	ldrb	r1, [r2, #1]
    237c:	f005 fc56 	bl	7c2c <pm_state_set>
	pm_system_resume();
    2380:	f7ff ff62 	bl	2248 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    2384:	4620      	mov	r0, r4
    2386:	f7ff ff47 	bl	2218 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    238a:	f004 fc09 	bl	6ba0 <k_sched_unlock>
	bool ret = true;
    238e:	2001      	movs	r0, #1
    2390:	e7c3      	b.n	231a <pm_system_suspend+0x56>
    2392:	bf00      	nop
    2394:	20000af0 	.word	0x20000af0
    2398:	20000910 	.word	0x20000910
    239c:	20000904 	.word	0x20000904
    23a0:	000f423f 	.word	0x000f423f
    23a4:	000f4240 	.word	0x000f4240
    23a8:	20000914 	.word	0x20000914
    23ac:	00007c2d 	.word	0x00007c2d

000023b0 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    23b0:	4b05      	ldr	r3, [pc, #20]	; (23c8 <pm_policy_state_lock_is_active+0x18>)
    23b2:	f3bf 8f5b 	dmb	ish
    23b6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    23ba:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    23be:	3800      	subs	r0, #0
    23c0:	bf18      	it	ne
    23c2:	2001      	movne	r0, #1
    23c4:	4770      	bx	lr
    23c6:	bf00      	nop
    23c8:	20000918 	.word	0x20000918

000023cc <pm_policy_next_state>:
{
    23cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23d0:	b085      	sub	sp, #20
    23d2:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    23d4:	a903      	add	r1, sp, #12
    23d6:	f000 f847 	bl	2468 <pm_state_cpu_get_all>
    23da:	f8df 8080 	ldr.w	r8, [pc, #128]	; 245c <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x58>
    23de:	f8df a080 	ldr.w	sl, [pc, #128]	; 2460 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x5c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    23e2:	1e44      	subs	r4, r0, #1
    23e4:	b224      	sxth	r4, r4
    23e6:	f04f 0b00 	mov.w	fp, #0
    23ea:	1c63      	adds	r3, r4, #1
    23ec:	d104      	bne.n	23f8 <pm_policy_next_state+0x2c>
	return NULL;
    23ee:	2600      	movs	r6, #0
}
    23f0:	4630      	mov	r0, r6
    23f2:	b005      	add	sp, #20
    23f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    23f8:	9a03      	ldr	r2, [sp, #12]
    23fa:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    23fe:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    2402:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    2406:	f7ff ffd3 	bl	23b0 <pm_policy_state_lock_is_active>
    240a:	4605      	mov	r5, r0
    240c:	bb10      	cbnz	r0, 2454 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x50>
    240e:	6870      	ldr	r0, [r6, #4]
    2410:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    2414:	46c4      	mov	ip, r8
    2416:	4629      	mov	r1, r5
    2418:	fbe0 c109 	umlal	ip, r1, r0, r9
    241c:	4652      	mov	r2, sl
    241e:	465b      	mov	r3, fp
    2420:	4660      	mov	r0, ip
    2422:	f7fd fe5d 	bl	e0 <__aeabi_uldivmod>
    2426:	9001      	str	r0, [sp, #4]
    2428:	68b0      	ldr	r0, [r6, #8]
    242a:	46c4      	mov	ip, r8
    242c:	4629      	mov	r1, r5
    242e:	fbe0 c109 	umlal	ip, r1, r0, r9
    2432:	465b      	mov	r3, fp
    2434:	4652      	mov	r2, sl
    2436:	4660      	mov	r0, ip
    2438:	f7fd fe52 	bl	e0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    243c:	4b09      	ldr	r3, [pc, #36]	; (2464 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x60>)
    243e:	681b      	ldr	r3, [r3, #0]
    2440:	1c59      	adds	r1, r3, #1
    2442:	d001      	beq.n	2448 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x44>
    2444:	4283      	cmp	r3, r0
    2446:	d905      	bls.n	2454 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x50>
		if ((ticks == K_TICKS_FOREVER) ||
    2448:	1c7a      	adds	r2, r7, #1
    244a:	d0d1      	beq.n	23f0 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    244c:	9b01      	ldr	r3, [sp, #4]
    244e:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    2450:	42b8      	cmp	r0, r7
    2452:	d9cd      	bls.n	23f0 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2454:	3c01      	subs	r4, #1
    2456:	b224      	sxth	r4, r4
    2458:	e7c7      	b.n	23ea <pm_policy_next_state+0x1e>
    245a:	bf00      	nop
    245c:	000f423f 	.word	0x000f423f
    2460:	000f4240 	.word	0x000f4240
    2464:	20000008 	.word	0x20000008

00002468 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2468:	b908      	cbnz	r0, 246e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    246a:	4b02      	ldr	r3, [pc, #8]	; (2474 <pm_state_cpu_get_all+0xc>)
    246c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    246e:	2000      	movs	r0, #0
    2470:	4770      	bx	lr
    2472:	bf00      	nop
    2474:	00008a18 	.word	0x00008a18

00002478 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2478:	4901      	ldr	r1, [pc, #4]	; (2480 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    247a:	2210      	movs	r2, #16
	str	r2, [r1]
    247c:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    247e:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2480:	e000ed10 	.word	0xe000ed10

00002484 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2484:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2486:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2488:	f380 8811 	msr	BASEPRI, r0
	isb
    248c:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2490:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2494:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2496:	b662      	cpsie	i
	isb
    2498:	f3bf 8f6f 	isb	sy

	bx	lr
    249c:	4770      	bx	lr
    249e:	bf00      	nop

000024a0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    24a0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    24a2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    24a4:	f381 8811 	msr	BASEPRI, r1

	wfe
    24a8:	bf20      	wfe

	msr	BASEPRI, r0
    24aa:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    24ae:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    24b0:	4770      	bx	lr
    24b2:	bf00      	nop

000024b4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    24b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    24b8:	4681      	mov	r9, r0
    24ba:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    24bc:	460c      	mov	r4, r1
    24be:	2900      	cmp	r1, #0
    24c0:	d04c      	beq.n	255c <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    24c2:	466e      	mov	r6, sp
    24c4:	b08a      	sub	sp, #40	; 0x28
    24c6:	466d      	mov	r5, sp
    24c8:	e9d1 1200 	ldrd	r1, r2, [r1]
    24cc:	68a3      	ldr	r3, [r4, #8]
    24ce:	4827      	ldr	r0, [pc, #156]	; (256c <z_arm_fatal_error+0xb8>)
    24d0:	46a8      	mov	r8, r5
    24d2:	f04f 0a05 	mov.w	sl, #5
    24d6:	e9c5 0105 	strd	r0, r1, [r5, #20]
    24da:	e9c5 2307 	strd	r2, r3, [r5, #28]
    24de:	f848 af10 	str.w	sl, [r8, #16]!
    24e2:	4823      	ldr	r0, [pc, #140]	; (2570 <z_arm_fatal_error+0xbc>)
    24e4:	4642      	mov	r2, r8
    24e6:	2300      	movs	r3, #0
    24e8:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    24ec:	f005 fafc 	bl	7ae8 <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    24f0:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    24f4:	6963      	ldr	r3, [r4, #20]
    24f6:	481f      	ldr	r0, [pc, #124]	; (2574 <z_arm_fatal_error+0xc0>)
    24f8:	f8c5 a010 	str.w	sl, [r5, #16]
    24fc:	46b5      	mov	sp, r6
    24fe:	e9c5 0105 	strd	r0, r1, [r5, #20]
    2502:	46ad      	mov	sp, r5
    2504:	e9c5 2307 	strd	r2, r3, [r5, #28]
    2508:	4819      	ldr	r0, [pc, #100]	; (2570 <z_arm_fatal_error+0xbc>)
    250a:	4642      	mov	r2, r8
    250c:	2300      	movs	r3, #0
    250e:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    2512:	f005 fae9 	bl	7ae8 <z_impl_z_log_msg2_static_create>
    2516:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2518:	b088      	sub	sp, #32
    251a:	466d      	mov	r5, sp
    251c:	69e3      	ldr	r3, [r4, #28]
    251e:	4a16      	ldr	r2, [pc, #88]	; (2578 <z_arm_fatal_error+0xc4>)
    2520:	46a8      	mov	r8, r5
    2522:	f04f 0a03 	mov.w	sl, #3
    2526:	e9c5 2305 	strd	r2, r3, [r5, #20]
    252a:	f848 af10 	str.w	sl, [r8, #16]!
    252e:	4810      	ldr	r0, [pc, #64]	; (2570 <z_arm_fatal_error+0xbc>)
    2530:	4642      	mov	r2, r8
    2532:	2300      	movs	r3, #0
    2534:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2538:	f005 fad6 	bl	7ae8 <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    253c:	4a0f      	ldr	r2, [pc, #60]	; (257c <z_arm_fatal_error+0xc8>)
    253e:	69a3      	ldr	r3, [r4, #24]
    2540:	f8c5 a010 	str.w	sl, [r5, #16]
    2544:	46b5      	mov	sp, r6
    2546:	e9c5 2305 	strd	r2, r3, [r5, #20]
    254a:	46ad      	mov	sp, r5
    254c:	4808      	ldr	r0, [pc, #32]	; (2570 <z_arm_fatal_error+0xbc>)
    254e:	2300      	movs	r3, #0
    2550:	4642      	mov	r2, r8
    2552:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2556:	f005 fac7 	bl	7ae8 <z_impl_z_log_msg2_static_create>
    255a:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    255c:	4621      	mov	r1, r4
    255e:	4648      	mov	r0, r9
    2560:	f003 fc62 	bl	5e28 <z_fatal_error>
}
    2564:	46bd      	mov	sp, r7
    2566:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    256a:	bf00      	nop
    256c:	00008e58 	.word	0x00008e58
    2570:	000088f8 	.word	0x000088f8
    2574:	00008e87 	.word	0x00008e87
    2578:	00008eb6 	.word	0x00008eb6
    257c:	00008ec5 	.word	0x00008ec5

00002580 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2580:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2582:	2b00      	cmp	r3, #0
    2584:	db08      	blt.n	2598 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2586:	2201      	movs	r2, #1
    2588:	f000 001f 	and.w	r0, r0, #31
    258c:	fa02 f000 	lsl.w	r0, r2, r0
    2590:	095b      	lsrs	r3, r3, #5
    2592:	4a02      	ldr	r2, [pc, #8]	; (259c <arch_irq_enable+0x1c>)
    2594:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2598:	4770      	bx	lr
    259a:	bf00      	nop
    259c:	e000e100 	.word	0xe000e100

000025a0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    25a0:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    25a2:	2b00      	cmp	r3, #0
    25a4:	db0d      	blt.n	25c2 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    25a6:	2201      	movs	r2, #1
    25a8:	095b      	lsrs	r3, r3, #5
    25aa:	f000 001f 	and.w	r0, r0, #31
    25ae:	fa02 f000 	lsl.w	r0, r2, r0
    25b2:	3320      	adds	r3, #32
    25b4:	4a03      	ldr	r2, [pc, #12]	; (25c4 <arch_irq_disable+0x24>)
    25b6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    25ba:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    25be:	f3bf 8f6f 	isb	sy
}
    25c2:	4770      	bx	lr
    25c4:	e000e100 	.word	0xe000e100

000025c8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    25c8:	4b05      	ldr	r3, [pc, #20]	; (25e0 <arch_irq_is_enabled+0x18>)
    25ca:	0942      	lsrs	r2, r0, #5
    25cc:	f000 001f 	and.w	r0, r0, #31
    25d0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    25d4:	2301      	movs	r3, #1
    25d6:	fa03 f000 	lsl.w	r0, r3, r0
}
    25da:	4010      	ands	r0, r2
    25dc:	4770      	bx	lr
    25de:	bf00      	nop
    25e0:	e000e100 	.word	0xe000e100

000025e4 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    25e4:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    25e6:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    25e8:	bfa8      	it	ge
    25ea:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    25ee:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    25f2:	bfb8      	it	lt
    25f4:	4b06      	ldrlt	r3, [pc, #24]	; (2610 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    25f6:	ea4f 1141 	mov.w	r1, r1, lsl #5
    25fa:	bfac      	ite	ge
    25fc:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2600:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2604:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2606:	bfb4      	ite	lt
    2608:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    260a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    260e:	4770      	bx	lr
    2610:	e000ed14 	.word	0xe000ed14

00002614 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    2614:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    2616:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    2618:	4b04      	ldr	r3, [pc, #16]	; (262c <_arch_isr_direct_pm+0x18>)
    261a:	699a      	ldr	r2, [r3, #24]
    261c:	b11a      	cbz	r2, 2626 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    261e:	2200      	movs	r2, #0
    2620:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    2622:	f005 fe57 	bl	82d4 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    2626:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    2628:	bd08      	pop	{r3, pc}
    262a:	bf00      	nop
    262c:	20000af0 	.word	0x20000af0

00002630 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2630:	bf30      	wfi
    b z_SysNmiOnReset
    2632:	f7ff bffd 	b.w	2630 <z_SysNmiOnReset>
    2636:	bf00      	nop

00002638 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2638:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    263a:	4b08      	ldr	r3, [pc, #32]	; (265c <z_arm_prep_c+0x24>)
    263c:	4a08      	ldr	r2, [pc, #32]	; (2660 <z_arm_prep_c+0x28>)
    263e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    2642:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2644:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2648:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    264c:	f003 fc84 	bl	5f58 <z_bss_zero>
	z_data_copy();
    2650:	f004 fbda 	bl	6e08 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2654:	f000 fb94 	bl	2d80 <z_arm_interrupt_init>
	z_cstart();
    2658:	f003 fcc2 	bl	5fe0 <z_cstart>
    265c:	00000000 	.word	0x00000000
    2660:	e000ed00 	.word	0xe000ed00

00002664 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2664:	4a09      	ldr	r2, [pc, #36]	; (268c <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2666:	490a      	ldr	r1, [pc, #40]	; (2690 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2668:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    266a:	6809      	ldr	r1, [r1, #0]
    266c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    266e:	4909      	ldr	r1, [pc, #36]	; (2694 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2670:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2672:	684b      	ldr	r3, [r1, #4]
    2674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2678:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    267a:	2300      	movs	r3, #0
    267c:	f383 8811 	msr	BASEPRI, r3
    2680:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2684:	6893      	ldr	r3, [r2, #8]
}
    2686:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2688:	4770      	bx	lr
    268a:	bf00      	nop
    268c:	20000af0 	.word	0x20000af0
    2690:	00008b80 	.word	0x00008b80
    2694:	e000ed00 	.word	0xe000ed00

00002698 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2698:	4912      	ldr	r1, [pc, #72]	; (26e4 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    269a:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    269c:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    26a0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    26a2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    26a6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    26aa:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    26ac:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    26b0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    26b4:	4f0c      	ldr	r7, [pc, #48]	; (26e8 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    26b6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    26ba:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    26bc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    26be:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    26c0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    26c2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    26c4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    26c6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    26ca:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    26cc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    26ce:	f000 fbf3 	bl	2eb8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    26d2:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    26d6:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    26da:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    26de:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    26e2:	4770      	bx	lr
    ldr r1, =_kernel
    26e4:	20000af0 	.word	0x20000af0
    ldr v4, =_SCS_ICSR
    26e8:	e000ed04 	.word	0xe000ed04

000026ec <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    26ec:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    26f0:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    26f2:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    26f6:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    26fa:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    26fc:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2700:	2902      	cmp	r1, #2
    beq _oops
    2702:	d0ff      	beq.n	2704 <_oops>

00002704 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2704:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2706:	f005 fa34 	bl	7b72 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    270a:	bd01      	pop	{r0, pc}

0000270c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    270c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2710:	9b00      	ldr	r3, [sp, #0]
    2712:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2716:	490a      	ldr	r1, [pc, #40]	; (2740 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2718:	9b01      	ldr	r3, [sp, #4]
    271a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    271e:	9b02      	ldr	r3, [sp, #8]
    2720:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2724:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2728:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    272c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2730:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2734:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2736:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2738:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    273a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    273c:	4770      	bx	lr
    273e:	bf00      	nop
    2740:	0000751b 	.word	0x0000751b

00002744 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2744:	4a09      	ldr	r2, [pc, #36]	; (276c <z_check_thread_stack_fail+0x28>)
{
    2746:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    2748:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    274a:	b170      	cbz	r0, 276a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    274c:	f113 0f16 	cmn.w	r3, #22
    2750:	6e40      	ldr	r0, [r0, #100]	; 0x64
    2752:	d005      	beq.n	2760 <z_check_thread_stack_fail+0x1c>
    2754:	f1a0 0220 	sub.w	r2, r0, #32
    2758:	429a      	cmp	r2, r3
    275a:	d805      	bhi.n	2768 <z_check_thread_stack_fail+0x24>
    275c:	4283      	cmp	r3, r0
    275e:	d203      	bcs.n	2768 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2760:	4281      	cmp	r1, r0
    2762:	bf28      	it	cs
    2764:	2000      	movcs	r0, #0
    2766:	4770      	bx	lr
    2768:	2000      	movs	r0, #0
}
    276a:	4770      	bx	lr
    276c:	20000af0 	.word	0x20000af0

00002770 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2770:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2772:	4b09      	ldr	r3, [pc, #36]	; (2798 <arch_switch_to_main_thread+0x28>)
    2774:	6098      	str	r0, [r3, #8]
{
    2776:	460d      	mov	r5, r1
    2778:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    277a:	f000 fb9d 	bl	2eb8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    277e:	4620      	mov	r0, r4
    2780:	f385 8809 	msr	PSP, r5
    2784:	2100      	movs	r1, #0
    2786:	b663      	cpsie	if
    2788:	f381 8811 	msr	BASEPRI, r1
    278c:	f3bf 8f6f 	isb	sy
    2790:	2200      	movs	r2, #0
    2792:	2300      	movs	r3, #0
    2794:	f004 fec1 	bl	751a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2798:	20000af0 	.word	0x20000af0

0000279c <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    279c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    279e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    27a0:	4a0b      	ldr	r2, [pc, #44]	; (27d0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    27a2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    27a4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    27a6:	bf1e      	ittt	ne
	movne	r1, #0
    27a8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    27aa:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    27ac:	f005 fd92 	blne	82d4 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    27b0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    27b2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    27b6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    27ba:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    27be:	4905      	ldr	r1, [pc, #20]	; (27d4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    27c0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    27c2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    27c4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    27c6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    27ca:	4903      	ldr	r1, [pc, #12]	; (27d8 <_isr_wrapper+0x3c>)
	bx r1
    27cc:	4708      	bx	r1
    27ce:	0000      	.short	0x0000
	ldr r2, =_kernel
    27d0:	20000af0 	.word	0x20000af0
	ldr r1, =_sw_isr_table
    27d4:	00008780 	.word	0x00008780
	ldr r1, =z_arm_int_exit
    27d8:	000027dd 	.word	0x000027dd

000027dc <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    27dc:	4b04      	ldr	r3, [pc, #16]	; (27f0 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    27de:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    27e0:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    27e2:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    27e4:	d003      	beq.n	27ee <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    27e6:	4903      	ldr	r1, [pc, #12]	; (27f4 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    27e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    27ec:	600a      	str	r2, [r1, #0]

000027ee <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    27ee:	4770      	bx	lr
	ldr r3, =_kernel
    27f0:	20000af0 	.word	0x20000af0
	ldr r1, =_SCS_ICSR
    27f4:	e000ed04 	.word	0xe000ed04

000027f8 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    27f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    27fc:	b086      	sub	sp, #24
    27fe:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    2800:	4b3c      	ldr	r3, [pc, #240]	; (28f4 <bus_fault.constprop.0+0xfc>)
    2802:	617b      	str	r3, [r7, #20]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2804:	4606      	mov	r6, r0
    2806:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2808:	483b      	ldr	r0, [pc, #236]	; (28f8 <bus_fault.constprop.0+0x100>)
    280a:	2402      	movs	r4, #2
    280c:	f107 0210 	add.w	r2, r7, #16
    2810:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2814:	613c      	str	r4, [r7, #16]
    2816:	f005 f9bb 	bl	7b90 <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    281a:	4b38      	ldr	r3, [pc, #224]	; (28fc <bus_fault.constprop.0+0x104>)
    281c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    281e:	04db      	lsls	r3, r3, #19
    2820:	d509      	bpl.n	2836 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
    2822:	4b37      	ldr	r3, [pc, #220]	; (2900 <bus_fault.constprop.0+0x108>)
    2824:	4834      	ldr	r0, [pc, #208]	; (28f8 <bus_fault.constprop.0+0x100>)
    2826:	f107 0210 	add.w	r2, r7, #16
    282a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    282e:	e9c7 4304 	strd	r4, r3, [r7, #16]
    2832:	f005 f9ad 	bl	7b90 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2836:	4b31      	ldr	r3, [pc, #196]	; (28fc <bus_fault.constprop.0+0x104>)
    2838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    283a:	051c      	lsls	r4, r3, #20
    283c:	d50a      	bpl.n	2854 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    283e:	4b31      	ldr	r3, [pc, #196]	; (2904 <bus_fault.constprop.0+0x10c>)
    2840:	617b      	str	r3, [r7, #20]
    2842:	482d      	ldr	r0, [pc, #180]	; (28f8 <bus_fault.constprop.0+0x100>)
    2844:	2302      	movs	r3, #2
    2846:	f107 0210 	add.w	r2, r7, #16
    284a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    284e:	613b      	str	r3, [r7, #16]
    2850:	f005 f99e 	bl	7b90 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2854:	4c29      	ldr	r4, [pc, #164]	; (28fc <bus_fault.constprop.0+0x104>)
    2856:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2858:	0598      	lsls	r0, r3, #22
    285a:	d522      	bpl.n	28a2 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
    285c:	4b2a      	ldr	r3, [pc, #168]	; (2908 <bus_fault.constprop.0+0x110>)
    285e:	617b      	str	r3, [r7, #20]
    2860:	f107 0210 	add.w	r2, r7, #16
    2864:	2302      	movs	r3, #2
    2866:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    286a:	4823      	ldr	r0, [pc, #140]	; (28f8 <bus_fault.constprop.0+0x100>)
    286c:	613b      	str	r3, [r7, #16]
    286e:	f005 f98f 	bl	7b90 <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2872:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2874:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2876:	0411      	lsls	r1, r2, #16
		PR_FAULT_INFO("  Precise data bus error");
    2878:	46e8      	mov	r8, sp
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    287a:	d512      	bpl.n	28a2 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    287c:	b088      	sub	sp, #32
    287e:	4923      	ldr	r1, [pc, #140]	; (290c <bus_fault.constprop.0+0x114>)
    2880:	481d      	ldr	r0, [pc, #116]	; (28f8 <bus_fault.constprop.0+0x100>)
    2882:	466a      	mov	r2, sp
    2884:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2888:	2303      	movs	r3, #3
    288a:	f842 3f10 	str.w	r3, [r2, #16]!
    288e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2892:	f005 f97d 	bl	7b90 <z_log_msg2_static_create.constprop.0>
    2896:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    2898:	b11e      	cbz	r6, 28a2 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    289a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    289c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    28a0:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    28a2:	4b16      	ldr	r3, [pc, #88]	; (28fc <bus_fault.constprop.0+0x104>)
    28a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    28a6:	055a      	lsls	r2, r3, #21
    28a8:	d50a      	bpl.n	28c0 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
    28aa:	4b19      	ldr	r3, [pc, #100]	; (2910 <bus_fault.constprop.0+0x118>)
    28ac:	617b      	str	r3, [r7, #20]
    28ae:	4812      	ldr	r0, [pc, #72]	; (28f8 <bus_fault.constprop.0+0x100>)
    28b0:	2302      	movs	r3, #2
    28b2:	f107 0210 	add.w	r2, r7, #16
    28b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    28ba:	613b      	str	r3, [r7, #16]
    28bc:	f005 f968 	bl	7b90 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    28c0:	4b0e      	ldr	r3, [pc, #56]	; (28fc <bus_fault.constprop.0+0x104>)
    28c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    28c4:	05db      	lsls	r3, r3, #23
    28c6:	d50a      	bpl.n	28de <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    28c8:	4b12      	ldr	r3, [pc, #72]	; (2914 <bus_fault.constprop.0+0x11c>)
    28ca:	617b      	str	r3, [r7, #20]
    28cc:	480a      	ldr	r0, [pc, #40]	; (28f8 <bus_fault.constprop.0+0x100>)
    28ce:	2302      	movs	r3, #2
    28d0:	f107 0210 	add.w	r2, r7, #16
    28d4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    28d8:	613b      	str	r3, [r7, #16]
    28da:	f005 f959 	bl	7b90 <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    28de:	4a07      	ldr	r2, [pc, #28]	; (28fc <bus_fault.constprop.0+0x104>)
    28e0:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    28e2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    28e4:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
    28e8:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    28ea:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    28ec:	7028      	strb	r0, [r5, #0]
}
    28ee:	46bd      	mov	sp, r7
    28f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    28f4:	00008ef3 	.word	0x00008ef3
    28f8:	000088f8 	.word	0x000088f8
    28fc:	e000ed00 	.word	0xe000ed00
    2900:	00008f09 	.word	0x00008f09
    2904:	00008f1a 	.word	0x00008f1a
    2908:	00008f2d 	.word	0x00008f2d
    290c:	00008f46 	.word	0x00008f46
    2910:	00008f5b 	.word	0x00008f5b
    2914:	00008f76 	.word	0x00008f76

00002918 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2918:	b510      	push	{r4, lr}
    291a:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    291c:	4b33      	ldr	r3, [pc, #204]	; (29ec <usage_fault.constprop.0+0xd4>)
    291e:	4834      	ldr	r0, [pc, #208]	; (29f0 <usage_fault.constprop.0+0xd8>)
    2920:	9305      	str	r3, [sp, #20]
    2922:	2402      	movs	r4, #2
    2924:	aa04      	add	r2, sp, #16
    2926:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    292a:	9404      	str	r4, [sp, #16]
    292c:	f005 f930 	bl	7b90 <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2930:	4b30      	ldr	r3, [pc, #192]	; (29f4 <usage_fault.constprop.0+0xdc>)
    2932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2934:	019b      	lsls	r3, r3, #6
    2936:	d508      	bpl.n	294a <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
    2938:	4b2f      	ldr	r3, [pc, #188]	; (29f8 <usage_fault.constprop.0+0xe0>)
    293a:	482d      	ldr	r0, [pc, #180]	; (29f0 <usage_fault.constprop.0+0xd8>)
    293c:	aa04      	add	r2, sp, #16
    293e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2942:	e9cd 4304 	strd	r4, r3, [sp, #16]
    2946:	f005 f923 	bl	7b90 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    294a:	4b2a      	ldr	r3, [pc, #168]	; (29f4 <usage_fault.constprop.0+0xdc>)
    294c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    294e:	01dc      	lsls	r4, r3, #7
    2950:	d509      	bpl.n	2966 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
    2952:	4b2a      	ldr	r3, [pc, #168]	; (29fc <usage_fault.constprop.0+0xe4>)
    2954:	9305      	str	r3, [sp, #20]
    2956:	4826      	ldr	r0, [pc, #152]	; (29f0 <usage_fault.constprop.0+0xd8>)
    2958:	2302      	movs	r3, #2
    295a:	aa04      	add	r2, sp, #16
    295c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2960:	9304      	str	r3, [sp, #16]
    2962:	f005 f915 	bl	7b90 <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2966:	4b23      	ldr	r3, [pc, #140]	; (29f4 <usage_fault.constprop.0+0xdc>)
    2968:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    296a:	0318      	lsls	r0, r3, #12
    296c:	d509      	bpl.n	2982 <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
    296e:	4b24      	ldr	r3, [pc, #144]	; (2a00 <usage_fault.constprop.0+0xe8>)
    2970:	9305      	str	r3, [sp, #20]
    2972:	481f      	ldr	r0, [pc, #124]	; (29f0 <usage_fault.constprop.0+0xd8>)
    2974:	2302      	movs	r3, #2
    2976:	aa04      	add	r2, sp, #16
    2978:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    297c:	9304      	str	r3, [sp, #16]
    297e:	f005 f907 	bl	7b90 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2982:	4b1c      	ldr	r3, [pc, #112]	; (29f4 <usage_fault.constprop.0+0xdc>)
    2984:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2986:	0359      	lsls	r1, r3, #13
    2988:	d509      	bpl.n	299e <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    298a:	4b1e      	ldr	r3, [pc, #120]	; (2a04 <usage_fault.constprop.0+0xec>)
    298c:	9305      	str	r3, [sp, #20]
    298e:	4818      	ldr	r0, [pc, #96]	; (29f0 <usage_fault.constprop.0+0xd8>)
    2990:	2302      	movs	r3, #2
    2992:	aa04      	add	r2, sp, #16
    2994:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2998:	9304      	str	r3, [sp, #16]
    299a:	f005 f8f9 	bl	7b90 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    299e:	4b15      	ldr	r3, [pc, #84]	; (29f4 <usage_fault.constprop.0+0xdc>)
    29a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29a2:	039a      	lsls	r2, r3, #14
    29a4:	d509      	bpl.n	29ba <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    29a6:	4b18      	ldr	r3, [pc, #96]	; (2a08 <usage_fault.constprop.0+0xf0>)
    29a8:	9305      	str	r3, [sp, #20]
    29aa:	4811      	ldr	r0, [pc, #68]	; (29f0 <usage_fault.constprop.0+0xd8>)
    29ac:	2302      	movs	r3, #2
    29ae:	aa04      	add	r2, sp, #16
    29b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    29b4:	9304      	str	r3, [sp, #16]
    29b6:	f005 f8eb 	bl	7b90 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    29ba:	4b0e      	ldr	r3, [pc, #56]	; (29f4 <usage_fault.constprop.0+0xdc>)
    29bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    29be:	03db      	lsls	r3, r3, #15
    29c0:	d509      	bpl.n	29d6 <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    29c2:	4b12      	ldr	r3, [pc, #72]	; (2a0c <usage_fault.constprop.0+0xf4>)
    29c4:	9305      	str	r3, [sp, #20]
    29c6:	480a      	ldr	r0, [pc, #40]	; (29f0 <usage_fault.constprop.0+0xd8>)
    29c8:	2302      	movs	r3, #2
    29ca:	aa04      	add	r2, sp, #16
    29cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    29d0:	9304      	str	r3, [sp, #16]
    29d2:	f005 f8dd 	bl	7b90 <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    29d6:	4a07      	ldr	r2, [pc, #28]	; (29f4 <usage_fault.constprop.0+0xdc>)
    29d8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    29da:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    29de:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    29e2:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    29e4:	6293      	str	r3, [r2, #40]	; 0x28
}
    29e6:	b006      	add	sp, #24
    29e8:	bd10      	pop	{r4, pc}
    29ea:	bf00      	nop
    29ec:	00008f8e 	.word	0x00008f8e
    29f0:	000088f8 	.word	0x000088f8
    29f4:	e000ed00 	.word	0xe000ed00
    29f8:	00008fa6 	.word	0x00008fa6
    29fc:	00008fb9 	.word	0x00008fb9
    2a00:	00008fd3 	.word	0x00008fd3
    2a04:	00008ff1 	.word	0x00008ff1
    2a08:	00009016 	.word	0x00009016
    2a0c:	00009030 	.word	0x00009030

00002a10 <mem_manage_fault>:
{
    2a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2a14:	b086      	sub	sp, #24
    2a16:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** MPU FAULT *****");
    2a18:	4b43      	ldr	r3, [pc, #268]	; (2b28 <mem_manage_fault+0x118>)
    2a1a:	617b      	str	r3, [r7, #20]
{
    2a1c:	4606      	mov	r6, r0
    2a1e:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2a20:	4842      	ldr	r0, [pc, #264]	; (2b2c <mem_manage_fault+0x11c>)
{
    2a22:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    2a24:	2402      	movs	r4, #2
    2a26:	f107 0210 	add.w	r2, r7, #16
    2a2a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2a2e:	613c      	str	r4, [r7, #16]
    2a30:	f005 f8ae 	bl	7b90 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2a34:	4b3e      	ldr	r3, [pc, #248]	; (2b30 <mem_manage_fault+0x120>)
    2a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a38:	06d8      	lsls	r0, r3, #27
    2a3a:	d509      	bpl.n	2a50 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2a3c:	4b3d      	ldr	r3, [pc, #244]	; (2b34 <mem_manage_fault+0x124>)
    2a3e:	483b      	ldr	r0, [pc, #236]	; (2b2c <mem_manage_fault+0x11c>)
    2a40:	f107 0210 	add.w	r2, r7, #16
    2a44:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2a48:	e9c7 4304 	strd	r4, r3, [r7, #16]
    2a4c:	f005 f8a0 	bl	7b90 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2a50:	4b37      	ldr	r3, [pc, #220]	; (2b30 <mem_manage_fault+0x120>)
    2a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a54:	0719      	lsls	r1, r3, #28
    2a56:	d50a      	bpl.n	2a6e <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Unstacking error");
    2a58:	4b37      	ldr	r3, [pc, #220]	; (2b38 <mem_manage_fault+0x128>)
    2a5a:	617b      	str	r3, [r7, #20]
    2a5c:	4833      	ldr	r0, [pc, #204]	; (2b2c <mem_manage_fault+0x11c>)
    2a5e:	2302      	movs	r3, #2
    2a60:	f107 0210 	add.w	r2, r7, #16
    2a64:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2a68:	613b      	str	r3, [r7, #16]
    2a6a:	f005 f891 	bl	7b90 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2a6e:	4c30      	ldr	r4, [pc, #192]	; (2b30 <mem_manage_fault+0x120>)
    2a70:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2a72:	079a      	lsls	r2, r3, #30
    2a74:	d423      	bmi.n	2abe <mem_manage_fault+0xae>
	uint32_t mmfar = -EINVAL;
    2a76:	f06f 0a15 	mvn.w	sl, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2a7a:	4b2d      	ldr	r3, [pc, #180]	; (2b30 <mem_manage_fault+0x120>)
    2a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2a7e:	07d8      	lsls	r0, r3, #31
    2a80:	d50a      	bpl.n	2a98 <mem_manage_fault+0x88>
		PR_FAULT_INFO("  Instruction Access Violation");
    2a82:	4b2e      	ldr	r3, [pc, #184]	; (2b3c <mem_manage_fault+0x12c>)
    2a84:	617b      	str	r3, [r7, #20]
    2a86:	4829      	ldr	r0, [pc, #164]	; (2b2c <mem_manage_fault+0x11c>)
    2a88:	2302      	movs	r3, #2
    2a8a:	f107 0210 	add.w	r2, r7, #16
    2a8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2a92:	613b      	str	r3, [r7, #16]
    2a94:	f005 f87c 	bl	7b90 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2a98:	4b25      	ldr	r3, [pc, #148]	; (2b30 <mem_manage_fault+0x120>)
    2a9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2a9c:	06d1      	lsls	r1, r2, #27
    2a9e:	d435      	bmi.n	2b0c <mem_manage_fault+0xfc>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2aa0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2aa2:	0792      	lsls	r2, r2, #30
    2aa4:	d432      	bmi.n	2b0c <mem_manage_fault+0xfc>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2aa6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2aa8:	4a21      	ldr	r2, [pc, #132]	; (2b30 <mem_manage_fault+0x120>)
    2aaa:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2aac:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2ab0:	6293      	str	r3, [r2, #40]	; 0x28
}
    2ab2:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    2ab4:	2300      	movs	r3, #0
    2ab6:	702b      	strb	r3, [r5, #0]
}
    2ab8:	46bd      	mov	sp, r7
    2aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    2abe:	4b20      	ldr	r3, [pc, #128]	; (2b40 <mem_manage_fault+0x130>)
    2ac0:	617b      	str	r3, [r7, #20]
    2ac2:	481a      	ldr	r0, [pc, #104]	; (2b2c <mem_manage_fault+0x11c>)
    2ac4:	2302      	movs	r3, #2
    2ac6:	f107 0210 	add.w	r2, r7, #16
    2aca:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2ace:	613b      	str	r3, [r7, #16]
    2ad0:	f005 f85e 	bl	7b90 <z_log_msg2_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    2ad4:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2ad8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2ada:	061b      	lsls	r3, r3, #24
		PR_FAULT_INFO("  Data Access Violation");
    2adc:	46e9      	mov	r9, sp
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2ade:	d5ca      	bpl.n	2a76 <mem_manage_fault+0x66>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    2ae0:	b088      	sub	sp, #32
    2ae2:	4b18      	ldr	r3, [pc, #96]	; (2b44 <mem_manage_fault+0x134>)
    2ae4:	4811      	ldr	r0, [pc, #68]	; (2b2c <mem_manage_fault+0x11c>)
    2ae6:	466a      	mov	r2, sp
    2ae8:	e9c2 3a05 	strd	r3, sl, [r2, #20]
    2aec:	2303      	movs	r3, #3
    2aee:	f842 3f10 	str.w	r3, [r2, #16]!
    2af2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2af6:	f005 f84b 	bl	7b90 <z_log_msg2_static_create.constprop.0>
    2afa:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
    2afc:	f1b8 0f00 	cmp.w	r8, #0
    2b00:	d0bb      	beq.n	2a7a <mem_manage_fault+0x6a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2b02:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2b04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    2b08:	62a3      	str	r3, [r4, #40]	; 0x28
    2b0a:	e7b6      	b.n	2a7a <mem_manage_fault+0x6a>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2b0c:	685b      	ldr	r3, [r3, #4]
    2b0e:	051b      	lsls	r3, r3, #20
    2b10:	d5c9      	bpl.n	2aa6 <mem_manage_fault+0x96>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2b12:	4631      	mov	r1, r6
    2b14:	4650      	mov	r0, sl
    2b16:	f7ff fe15 	bl	2744 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2b1a:	2800      	cmp	r0, #0
    2b1c:	d0c3      	beq.n	2aa6 <mem_manage_fault+0x96>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2b1e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2b22:	2002      	movs	r0, #2
    2b24:	e7c0      	b.n	2aa8 <mem_manage_fault+0x98>
    2b26:	bf00      	nop
    2b28:	0000905b 	.word	0x0000905b
    2b2c:	000088f8 	.word	0x000088f8
    2b30:	e000ed00 	.word	0xe000ed00
    2b34:	00009071 	.word	0x00009071
    2b38:	00008f1a 	.word	0x00008f1a
    2b3c:	000090d2 	.word	0x000090d2
    2b40:	000090a4 	.word	0x000090a4
    2b44:	000090bc 	.word	0x000090bc

00002b48 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2b48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2b4c:	4b76      	ldr	r3, [pc, #472]	; (2d28 <z_arm_fault+0x1e0>)
{
    2b4e:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2b50:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    2b54:	af00      	add	r7, sp, #0
    2b56:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2b58:	f3c8 0408 	ubfx	r4, r8, #0, #9
    2b5c:	2600      	movs	r6, #0
    2b5e:	f386 8811 	msr	BASEPRI, r6
    2b62:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2b66:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2b6a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2b6e:	d10e      	bne.n	2b8e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2b70:	f002 030c 	and.w	r3, r2, #12
    2b74:	2b08      	cmp	r3, #8
    2b76:	d10c      	bne.n	2b92 <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    2b78:	4b6c      	ldr	r3, [pc, #432]	; (2d2c <z_arm_fault+0x1e4>)
    2b7a:	61fb      	str	r3, [r7, #28]
    2b7c:	486c      	ldr	r0, [pc, #432]	; (2d30 <z_arm_fault+0x1e8>)
    2b7e:	2302      	movs	r3, #2
    2b80:	f107 0218 	add.w	r2, r7, #24
    2b84:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2b88:	61bb      	str	r3, [r7, #24]
    2b8a:	f005 f801 	bl	7b90 <z_log_msg2_static_create.constprop.0>
		return NULL;
    2b8e:	4635      	mov	r5, r6
    2b90:	e003      	b.n	2b9a <z_arm_fault+0x52>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2b92:	0712      	lsls	r2, r2, #28
    2b94:	d401      	bmi.n	2b9a <z_arm_fault+0x52>
			ptr_esf = (z_arch_esf_t *)msp;
    2b96:	4605      	mov	r5, r0
			*nested_exc = true;
    2b98:	2601      	movs	r6, #1
	*recoverable = false;
    2b9a:	2300      	movs	r3, #0
    2b9c:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    2b9e:	1ee3      	subs	r3, r4, #3
    2ba0:	2b09      	cmp	r3, #9
    2ba2:	f200 80a1 	bhi.w	2ce8 <z_arm_fault+0x1a0>
    2ba6:	e8df f003 	tbb	[pc, r3]
    2baa:	9405      	.short	0x9405
    2bac:	9f9f9197 	.word	0x9f9f9197
    2bb0:	9a9f9f9f 	.word	0x9a9f9f9f
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2bb4:	f8df 8170 	ldr.w	r8, [pc, #368]	; 2d28 <z_arm_fault+0x1e0>
	PR_FAULT_INFO("***** HARD FAULT *****");
    2bb8:	4b5e      	ldr	r3, [pc, #376]	; (2d34 <z_arm_fault+0x1ec>)
    2bba:	485d      	ldr	r0, [pc, #372]	; (2d30 <z_arm_fault+0x1e8>)
    2bbc:	61fb      	str	r3, [r7, #28]
    2bbe:	f04f 0a02 	mov.w	sl, #2
    2bc2:	f107 0218 	add.w	r2, r7, #24
    2bc6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2bca:	f8c7 a018 	str.w	sl, [r7, #24]
    2bce:	f004 ffdf 	bl	7b90 <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2bd2:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    2bd6:	f04f 0b00 	mov.w	fp, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2bda:	ea14 040a 	ands.w	r4, r4, sl
	PR_FAULT_INFO("***** HARD FAULT *****");
    2bde:	46e9      	mov	r9, sp
	*recoverable = false;
    2be0:	f887 b007 	strb.w	fp, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2be4:	d00b      	beq.n	2bfe <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
    2be6:	4b54      	ldr	r3, [pc, #336]	; (2d38 <z_arm_fault+0x1f0>)
    2be8:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
    2bec:	4850      	ldr	r0, [pc, #320]	; (2d30 <z_arm_fault+0x1e8>)
    2bee:	f107 0218 	add.w	r2, r7, #24
    2bf2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2bf6:	f004 ffcb 	bl	7b90 <z_log_msg2_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2bfa:	2400      	movs	r4, #0
}
    2bfc:	e00d      	b.n	2c1a <z_arm_fault+0xd2>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2bfe:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    2c02:	2b00      	cmp	r3, #0
    2c04:	da25      	bge.n	2c52 <z_arm_fault+0x10a>
		PR_EXC("  Debug event");
    2c06:	4b4d      	ldr	r3, [pc, #308]	; (2d3c <z_arm_fault+0x1f4>)
    2c08:	4849      	ldr	r0, [pc, #292]	; (2d30 <z_arm_fault+0x1e8>)
    2c0a:	f107 0218 	add.w	r2, r7, #24
    2c0e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2c12:	e9c7 a306 	strd	sl, r3, [r7, #24]
    2c16:	f004 ffbb 	bl	7b90 <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2c1a:	79fb      	ldrb	r3, [r7, #7]
    2c1c:	b9ab      	cbnz	r3, 2c4a <z_arm_fault+0x102>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2c1e:	2220      	movs	r2, #32
    2c20:	4629      	mov	r1, r5
    2c22:	f107 0008 	add.w	r0, r7, #8
    2c26:	f004 ffdc 	bl	7be2 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2c2c:	2e00      	cmp	r6, #0
    2c2e:	d076      	beq.n	2d1e <z_arm_fault+0x1d6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2c30:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2c34:	b922      	cbnz	r2, 2c40 <z_arm_fault+0xf8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2c36:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2c3a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2c3e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2c40:	f107 0108 	add.w	r1, r7, #8
    2c44:	4620      	mov	r0, r4
    2c46:	f7ff fc35 	bl	24b4 <z_arm_fatal_error>
}
    2c4a:	372c      	adds	r7, #44	; 0x2c
    2c4c:	46bd      	mov	sp, r7
    2c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2c52:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    2c56:	005b      	lsls	r3, r3, #1
    2c58:	d5df      	bpl.n	2c1a <z_arm_fault+0xd2>
		PR_EXC("  Fault escalation (see below)");
    2c5a:	4b39      	ldr	r3, [pc, #228]	; (2d40 <z_arm_fault+0x1f8>)
    2c5c:	4834      	ldr	r0, [pc, #208]	; (2d30 <z_arm_fault+0x1e8>)
    2c5e:	f107 0218 	add.w	r2, r7, #24
    2c62:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2c66:	e9c7 a306 	strd	sl, r3, [r7, #24]
    2c6a:	f004 ff91 	bl	7b90 <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    2c6e:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2c70:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    2c74:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2c78:	429a      	cmp	r2, r3
    2c7a:	d009      	beq.n	2c90 <z_arm_fault+0x148>
		} else if (SCB_MMFSR != 0) {
    2c7c:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    2c80:	b1bb      	cbz	r3, 2cb2 <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    2c82:	1dfa      	adds	r2, r7, #7
    2c84:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2c86:	4628      	mov	r0, r5
    2c88:	f7ff fec2 	bl	2a10 <mem_manage_fault>
    2c8c:	4604      	mov	r4, r0
		break;
    2c8e:	e7c4      	b.n	2c1a <z_arm_fault+0xd2>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    2c90:	b088      	sub	sp, #32
    2c92:	682b      	ldr	r3, [r5, #0]
    2c94:	492b      	ldr	r1, [pc, #172]	; (2d44 <z_arm_fault+0x1fc>)
    2c96:	4826      	ldr	r0, [pc, #152]	; (2d30 <z_arm_fault+0x1e8>)
    2c98:	466a      	mov	r2, sp
    2c9a:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2c9e:	2303      	movs	r3, #3
    2ca0:	f842 3f10 	str.w	r3, [r2, #16]!
    2ca4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2ca8:	f004 ff72 	bl	7b90 <z_log_msg2_static_create.constprop.0>
    2cac:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    2cae:	682c      	ldr	r4, [r5, #0]
    2cb0:	e7b3      	b.n	2c1a <z_arm_fault+0xd2>
		} else if (SCB_BFSR != 0) {
    2cb2:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    2cb6:	b123      	cbz	r3, 2cc2 <z_arm_fault+0x17a>
			reason = bus_fault(esf, 1, recoverable);
    2cb8:	1df9      	adds	r1, r7, #7
    2cba:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2cbc:	f7ff fd9c 	bl	27f8 <bus_fault.constprop.0>
    2cc0:	e7e4      	b.n	2c8c <z_arm_fault+0x144>
		} else if (SCB_UFSR != 0) {
    2cc2:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    2cc6:	b29b      	uxth	r3, r3
    2cc8:	2b00      	cmp	r3, #0
    2cca:	d0a6      	beq.n	2c1a <z_arm_fault+0xd2>
		reason = usage_fault(esf);
    2ccc:	f7ff fe24 	bl	2918 <usage_fault.constprop.0>
    2cd0:	e7dc      	b.n	2c8c <z_arm_fault+0x144>
		reason = mem_manage_fault(esf, 0, recoverable);
    2cd2:	1dfa      	adds	r2, r7, #7
    2cd4:	2100      	movs	r1, #0
    2cd6:	e7d6      	b.n	2c86 <z_arm_fault+0x13e>
		reason = bus_fault(esf, 0, recoverable);
    2cd8:	1df9      	adds	r1, r7, #7
    2cda:	2000      	movs	r0, #0
    2cdc:	e7ee      	b.n	2cbc <z_arm_fault+0x174>
	PR_FAULT_INFO(
    2cde:	4b1a      	ldr	r3, [pc, #104]	; (2d48 <z_arm_fault+0x200>)
    2ce0:	61fb      	str	r3, [r7, #28]
    2ce2:	2302      	movs	r3, #2
    2ce4:	61bb      	str	r3, [r7, #24]
    2ce6:	e781      	b.n	2bec <z_arm_fault+0xa4>
	PR_FAULT_INFO("***** %s %d) *****",
    2ce8:	4a18      	ldr	r2, [pc, #96]	; (2d4c <z_arm_fault+0x204>)
    2cea:	4b19      	ldr	r3, [pc, #100]	; (2d50 <z_arm_fault+0x208>)
    2cec:	4919      	ldr	r1, [pc, #100]	; (2d54 <z_arm_fault+0x20c>)
    2cee:	4810      	ldr	r0, [pc, #64]	; (2d30 <z_arm_fault+0x1e8>)
    2cf0:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    2cf4:	46e8      	mov	r8, sp
    2cf6:	b08a      	sub	sp, #40	; 0x28
    2cf8:	bf18      	it	ne
    2cfa:	4613      	movne	r3, r2
    2cfc:	466a      	mov	r2, sp
    2cfe:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2d02:	2302      	movs	r3, #2
    2d04:	f882 3020 	strb.w	r3, [r2, #32]
    2d08:	3c10      	subs	r4, #16
    2d0a:	4b13      	ldr	r3, [pc, #76]	; (2d58 <z_arm_fault+0x210>)
    2d0c:	61d4      	str	r4, [r2, #28]
    2d0e:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    2d12:	f842 3f10 	str.w	r3, [r2, #16]!
    2d16:	f004 ff3b 	bl	7b90 <z_log_msg2_static_create.constprop.0>
    2d1a:	46c5      	mov	sp, r8
    2d1c:	e76d      	b.n	2bfa <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2d1e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2d22:	f023 0301 	bic.w	r3, r3, #1
    2d26:	e78a      	b.n	2c3e <z_arm_fault+0xf6>
    2d28:	e000ed00 	.word	0xe000ed00
    2d2c:	0000911f 	.word	0x0000911f
    2d30:	000088f8 	.word	0x000088f8
    2d34:	0000914a 	.word	0x0000914a
    2d38:	00009161 	.word	0x00009161
    2d3c:	00009182 	.word	0x00009182
    2d40:	00009190 	.word	0x00009190
    2d44:	000091af 	.word	0x000091af
    2d48:	000091cb 	.word	0x000091cb
    2d4c:	00009106 	.word	0x00009106
    2d50:	000090f1 	.word	0x000090f1
    2d54:	000091ef 	.word	0x000091ef
    2d58:	01000004 	.word	0x01000004

00002d5c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2d5c:	4a02      	ldr	r2, [pc, #8]	; (2d68 <z_arm_fault_init+0xc>)
    2d5e:	6953      	ldr	r3, [r2, #20]
    2d60:	f043 0310 	orr.w	r3, r3, #16
    2d64:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    2d66:	4770      	bx	lr
    2d68:	e000ed00 	.word	0xe000ed00

00002d6c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2d6c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2d70:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2d74:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2d76:	4672      	mov	r2, lr
	bl z_arm_fault
    2d78:	f7ff fee6 	bl	2b48 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2d7c:	bd01      	pop	{r0, pc}
    2d7e:	bf00      	nop

00002d80 <z_arm_interrupt_init>:
    2d80:	4804      	ldr	r0, [pc, #16]	; (2d94 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2d82:	2300      	movs	r3, #0
    2d84:	2120      	movs	r1, #32
    2d86:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2d88:	3301      	adds	r3, #1
    2d8a:	2b28      	cmp	r3, #40	; 0x28
    2d8c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2d90:	d1f9      	bne.n	2d86 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2d92:	4770      	bx	lr
    2d94:	e000e100 	.word	0xe000e100

00002d98 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2d98:	2000      	movs	r0, #0
    msr CONTROL, r0
    2d9a:	f380 8814 	msr	CONTROL, r0
    isb
    2d9e:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2da2:	f005 fc77 	bl	8694 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2da6:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2da8:	490d      	ldr	r1, [pc, #52]	; (2de0 <__start+0x48>)
    str r0, [r1]
    2daa:	6008      	str	r0, [r1, #0]
    dsb
    2dac:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2db0:	480c      	ldr	r0, [pc, #48]	; (2de4 <__start+0x4c>)
    msr msp, r0
    2db2:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2db6:	f000 f82b 	bl	2e10 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2dba:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2dbc:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2dc0:	4809      	ldr	r0, [pc, #36]	; (2de8 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2dc2:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    2dc6:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2dc8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2dcc:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2dd0:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2dd2:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2dd4:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2dd8:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2ddc:	f7ff fc2c 	bl	2638 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2de0:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2de4:	20001680 	.word	0x20001680
    ldr r0, =z_interrupt_stacks
    2de8:	200017c0 	.word	0x200017c0

00002dec <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2dec:	4907      	ldr	r1, [pc, #28]	; (2e0c <z_arm_clear_arm_mpu_config+0x20>)
    2dee:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    2df2:	2300      	movs	r3, #0
	int num_regions =
    2df4:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2df8:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2dfa:	4293      	cmp	r3, r2
    2dfc:	d100      	bne.n	2e00 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    2dfe:	4770      	bx	lr
  MPU->RNR = rnr;
    2e00:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    2e04:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    2e08:	3301      	adds	r3, #1
    2e0a:	e7f6      	b.n	2dfa <z_arm_clear_arm_mpu_config+0xe>
    2e0c:	e000ed00 	.word	0xe000ed00

00002e10 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2e10:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2e12:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2e14:	2300      	movs	r3, #0
    2e16:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2e1a:	f7ff ffe7 	bl	2dec <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2e1e:	4b14      	ldr	r3, [pc, #80]	; (2e70 <z_arm_init_arch_hw_at_boot+0x60>)
    2e20:	f04f 32ff 	mov.w	r2, #4294967295
    2e24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2e28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2e2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2e30:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2e34:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2e38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2e3c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2e40:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2e44:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2e48:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2e4c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    2e50:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2e54:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2e58:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2e5c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2e60:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2e64:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2e66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2e6a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2e6e:	bd08      	pop	{r3, pc}
    2e70:	e000e100 	.word	0xe000e100

00002e74 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2e74:	4b08      	ldr	r3, [pc, #32]	; (2e98 <z_impl_k_thread_abort+0x24>)
    2e76:	689b      	ldr	r3, [r3, #8]
    2e78:	4283      	cmp	r3, r0
    2e7a:	d10b      	bne.n	2e94 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2e7c:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2e80:	b143      	cbz	r3, 2e94 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2e82:	4b06      	ldr	r3, [pc, #24]	; (2e9c <z_impl_k_thread_abort+0x28>)
    2e84:	685a      	ldr	r2, [r3, #4]
    2e86:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    2e8a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    2e8c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    2e8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2e92:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    2e94:	f003 bf54 	b.w	6d40 <z_thread_abort>
    2e98:	20000af0 	.word	0x20000af0
    2e9c:	e000ed00 	.word	0xe000ed00

00002ea0 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2ea0:	4b02      	ldr	r3, [pc, #8]	; (2eac <z_arm_configure_static_mpu_regions+0xc>)
    2ea2:	4a03      	ldr	r2, [pc, #12]	; (2eb0 <z_arm_configure_static_mpu_regions+0x10>)
    2ea4:	4803      	ldr	r0, [pc, #12]	; (2eb4 <z_arm_configure_static_mpu_regions+0x14>)
    2ea6:	2101      	movs	r1, #1
    2ea8:	f000 b890 	b.w	2fcc <arm_core_mpu_configure_static_mpu_regions>
    2eac:	20008000 	.word	0x20008000
    2eb0:	20000000 	.word	0x20000000
    2eb4:	00008a18 	.word	0x00008a18

00002eb8 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2eb8:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2eba:	4b05      	ldr	r3, [pc, #20]	; (2ed0 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2ebc:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    2ebe:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2ec0:	4a04      	ldr	r2, [pc, #16]	; (2ed4 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2ec2:	2120      	movs	r1, #32
    2ec4:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2ec8:	4618      	mov	r0, r3
    2eca:	2101      	movs	r1, #1
    2ecc:	f000 b888 	b.w	2fe0 <arm_core_mpu_configure_dynamic_mpu_regions>
    2ed0:	20000934 	.word	0x20000934
    2ed4:	150b0000 	.word	0x150b0000

00002ed8 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2eda:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 2f90 <mpu_configure_regions+0xb8>
    2ede:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2ee0:	2500      	movs	r5, #0
    2ee2:	428d      	cmp	r5, r1
    2ee4:	da1a      	bge.n	2f1c <mpu_configure_regions+0x44>
		if (regions[i].size == 0U) {
    2ee6:	6844      	ldr	r4, [r0, #4]
    2ee8:	2c00      	cmp	r4, #0
    2eea:	d04d      	beq.n	2f88 <mpu_configure_regions+0xb0>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    2eec:	b1fb      	cbz	r3, 2f2e <mpu_configure_regions+0x56>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2eee:	f104 3eff 	add.w	lr, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2ef2:	ea14 0f0e 	tst.w	r4, lr
    2ef6:	d014      	beq.n	2f22 <mpu_configure_regions+0x4a>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    2ef8:	4b26      	ldr	r3, [pc, #152]	; (2f94 <mpu_configure_regions+0xbc>)
    2efa:	466c      	mov	r4, sp
    2efc:	b088      	sub	sp, #32
    2efe:	466a      	mov	r2, sp
    2f00:	e9c2 3505 	strd	r3, r5, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2f04:	2303      	movs	r3, #3
    2f06:	f842 3f10 	str.w	r3, [r2, #16]!
    2f0a:	4823      	ldr	r0, [pc, #140]	; (2f98 <mpu_configure_regions+0xc0>)
    2f0c:	2300      	movs	r3, #0
    2f0e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2f12:	f004 fde9 	bl	7ae8 <z_impl_z_log_msg2_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2f16:	f06f 0215 	mvn.w	r2, #21
    2f1a:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2f1c:	4610      	mov	r0, r2
    2f1e:	46bd      	mov	sp, r7
    2f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    2f22:	2c1f      	cmp	r4, #31
    2f24:	d9e8      	bls.n	2ef8 <mpu_configure_regions+0x20>
		((part->start & (part->size - 1U)) == 0U);
    2f26:	6806      	ldr	r6, [r0, #0]
		&&
    2f28:	ea1e 0f06 	tst.w	lr, r6
    2f2c:	d1e4      	bne.n	2ef8 <mpu_configure_regions+0x20>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2f2e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2f30:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2f32:	f8d0 e008 	ldr.w	lr, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2f36:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    2f38:	d914      	bls.n	2f64 <mpu_configure_regions+0x8c>
	if (size > (1UL << 31)) {
    2f3a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2f3e:	d813      	bhi.n	2f68 <mpu_configure_regions+0x90>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2f40:	3c01      	subs	r4, #1
    2f42:	fab4 f484 	clz	r4, r4
    2f46:	f1c4 041f 	rsb	r4, r4, #31
    2f4a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2f4c:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2f4e:	ea4e 0404 	orr.w	r4, lr, r4
    2f52:	d90b      	bls.n	2f6c <mpu_configure_regions+0x94>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    2f54:	4911      	ldr	r1, [pc, #68]	; (2f9c <mpu_configure_regions+0xc4>)
    2f56:	466c      	mov	r4, sp
    2f58:	b088      	sub	sp, #32
    2f5a:	466b      	mov	r3, sp
    2f5c:	e9c3 1205 	strd	r1, r2, [r3, #20]
    2f60:	461a      	mov	r2, r3
    2f62:	e7cf      	b.n	2f04 <mpu_configure_regions+0x2c>
		return REGION_32B;
    2f64:	2408      	movs	r4, #8
    2f66:	e7f1      	b.n	2f4c <mpu_configure_regions+0x74>
		return REGION_4G;
    2f68:	243e      	movs	r4, #62	; 0x3e
    2f6a:	e7ef      	b.n	2f4c <mpu_configure_regions+0x74>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2f6c:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
    2f70:	4316      	orrs	r6, r2
    2f72:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2f76:	f044 0401 	orr.w	r4, r4, #1
    2f7a:	f8cc 2098 	str.w	r2, [ip, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2f7e:	f8cc 609c 	str.w	r6, [ip, #156]	; 0x9c
		reg_index++;
    2f82:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2f84:	f8cc 40a0 	str.w	r4, [ip, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    2f88:	3501      	adds	r5, #1
    2f8a:	300c      	adds	r0, #12
    2f8c:	e7a9      	b.n	2ee2 <mpu_configure_regions+0xa>
    2f8e:	bf00      	nop
    2f90:	e000ed00 	.word	0xe000ed00
    2f94:	00009206 	.word	0x00009206
    2f98:	000088f0 	.word	0x000088f0
    2f9c:	00009229 	.word	0x00009229

00002fa0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2fa0:	4b04      	ldr	r3, [pc, #16]	; (2fb4 <arm_core_mpu_enable+0x14>)
    2fa2:	2205      	movs	r2, #5
    2fa4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    2fa8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2fac:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2fb0:	4770      	bx	lr
    2fb2:	bf00      	nop
    2fb4:	e000ed00 	.word	0xe000ed00

00002fb8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2fb8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2fbc:	4b02      	ldr	r3, [pc, #8]	; (2fc8 <arm_core_mpu_disable+0x10>)
    2fbe:	2200      	movs	r2, #0
    2fc0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    2fc4:	4770      	bx	lr
    2fc6:	bf00      	nop
    2fc8:	e000ed00 	.word	0xe000ed00

00002fcc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2fcc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2fce:	4c03      	ldr	r4, [pc, #12]	; (2fdc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2fd0:	2301      	movs	r3, #1
    2fd2:	7822      	ldrb	r2, [r4, #0]
    2fd4:	f7ff ff80 	bl	2ed8 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2fd8:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    2fda:	bd10      	pop	{r4, pc}
    2fdc:	20000b46 	.word	0x20000b46

00002fe0 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2fe0:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2fe2:	4a09      	ldr	r2, [pc, #36]	; (3008 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    2fe4:	2300      	movs	r3, #0
    2fe6:	7812      	ldrb	r2, [r2, #0]
    2fe8:	f7ff ff76 	bl	2ed8 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2fec:	f110 0f16 	cmn.w	r0, #22
    2ff0:	d003      	beq.n	2ffa <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    2ff2:	4b06      	ldr	r3, [pc, #24]	; (300c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    2ff4:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2ff6:	2807      	cmp	r0, #7
    2ff8:	dd00      	ble.n	2ffc <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2ffa:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    2ffc:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    3000:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    3004:	3001      	adds	r0, #1
    3006:	e7f6      	b.n	2ff6 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    3008:	20000b46 	.word	0x20000b46
    300c:	e000ed00 	.word	0xe000ed00

00003010 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3010:	4914      	ldr	r1, [pc, #80]	; (3064 <z_arm_mpu_init+0x54>)
    3012:	6808      	ldr	r0, [r1, #0]
    3014:	2808      	cmp	r0, #8
{
    3016:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3018:	d821      	bhi.n	305e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    301a:	f7ff ffcd 	bl	2fb8 <arm_core_mpu_disable>
    301e:	4c12      	ldr	r4, [pc, #72]	; (3068 <z_arm_mpu_init+0x58>)
    3020:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3022:	2200      	movs	r2, #0
    3024:	4290      	cmp	r0, r2
    3026:	f101 010c 	add.w	r1, r1, #12
    302a:	d105      	bne.n	3038 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    302c:	4b0f      	ldr	r3, [pc, #60]	; (306c <z_arm_mpu_init+0x5c>)
    302e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    3030:	f7ff ffb6 	bl	2fa0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3034:	2000      	movs	r0, #0
}
    3036:	bd10      	pop	{r4, pc}
    3038:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    303c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    3040:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3044:	4313      	orrs	r3, r2
    3046:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    304a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    304e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3052:	f043 0301 	orr.w	r3, r3, #1
    3056:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    305a:	3201      	adds	r2, #1
    305c:	e7e2      	b.n	3024 <z_arm_mpu_init+0x14>
		return -1;
    305e:	f04f 30ff 	mov.w	r0, #4294967295
    3062:	e7e8      	b.n	3036 <z_arm_mpu_init+0x26>
    3064:	00008a24 	.word	0x00008a24
    3068:	e000ed00 	.word	0xe000ed00
    306c:	20000b46 	.word	0x20000b46

00003070 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3070:	4b01      	ldr	r3, [pc, #4]	; (3078 <__stdout_hook_install+0x8>)
    3072:	6018      	str	r0, [r3, #0]
}
    3074:	4770      	bx	lr
    3076:	bf00      	nop
    3078:	2000000c 	.word	0x2000000c

0000307c <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    307c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3080:	b2c0      	uxtb	r0, r0
    3082:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    3086:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    308a:	4905      	ldr	r1, [pc, #20]	; (30a0 <sys_arch_reboot+0x24>)
    308c:	4b05      	ldr	r3, [pc, #20]	; (30a4 <sys_arch_reboot+0x28>)
    308e:	68ca      	ldr	r2, [r1, #12]
    3090:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    3094:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    3096:	60cb      	str	r3, [r1, #12]
    3098:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    309c:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    309e:	e7fd      	b.n	309c <sys_arch_reboot+0x20>
    30a0:	e000ed00 	.word	0xe000ed00
    30a4:	05fa0004 	.word	0x05fa0004

000030a8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    30a8:	b120      	cbz	r0, 30b4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    30aa:	4b03      	ldr	r3, [pc, #12]	; (30b8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    30ac:	0180      	lsls	r0, r0, #6
    30ae:	f043 0301 	orr.w	r3, r3, #1
    30b2:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    30b4:	4770      	bx	lr
    30b6:	bf00      	nop
    30b8:	00008970 	.word	0x00008970

000030bc <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    30bc:	4b08      	ldr	r3, [pc, #32]	; (30e0 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    30be:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    30c0:	1ac3      	subs	r3, r0, r3
{
    30c2:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    30c4:	4907      	ldr	r1, [pc, #28]	; (30e4 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    30c6:	109b      	asrs	r3, r3, #2
{
    30c8:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    30ca:	4359      	muls	r1, r3
    30cc:	4806      	ldr	r0, [pc, #24]	; (30e8 <onoff_stop+0x2c>)
    30ce:	2240      	movs	r2, #64	; 0x40
    30d0:	f004 fdda 	bl	7c88 <stop>
	notify(mgr, res);
    30d4:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    30d6:	4601      	mov	r1, r0
	notify(mgr, res);
    30d8:	4620      	mov	r0, r4
}
    30da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    30de:	4718      	bx	r3
    30e0:	20000950 	.word	0x20000950
    30e4:	b6db6db7 	.word	0xb6db6db7
    30e8:	00008708 	.word	0x00008708

000030ec <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    30ec:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    30ee:	4c0c      	ldr	r4, [pc, #48]	; (3120 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    30f0:	4a0c      	ldr	r2, [pc, #48]	; (3124 <onoff_start+0x38>)
    30f2:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    30f4:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    30f6:	9300      	str	r3, [sp, #0]
{
    30f8:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    30fa:	460b      	mov	r3, r1
    30fc:	490a      	ldr	r1, [pc, #40]	; (3128 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    30fe:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3100:	4361      	muls	r1, r4
{
    3102:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    3104:	4809      	ldr	r0, [pc, #36]	; (312c <onoff_start+0x40>)
    3106:	f004 fdec 	bl	7ce2 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    310a:	1e01      	subs	r1, r0, #0
    310c:	da05      	bge.n	311a <onoff_start+0x2e>
		notify(mgr, err);
    310e:	4630      	mov	r0, r6
    3110:	462b      	mov	r3, r5
	}
}
    3112:	b002      	add	sp, #8
    3114:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    3118:	4718      	bx	r3
}
    311a:	b002      	add	sp, #8
    311c:	bd70      	pop	{r4, r5, r6, pc}
    311e:	bf00      	nop
    3120:	20000950 	.word	0x20000950
    3124:	00007d51 	.word	0x00007d51
    3128:	b6db6db7 	.word	0xb6db6db7
    312c:	00008708 	.word	0x00008708

00003130 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3130:	2200      	movs	r2, #0
{
    3132:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3134:	2101      	movs	r1, #1
{
    3136:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3138:	4610      	mov	r0, r2
    313a:	f7ff fa53 	bl	25e4 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    313e:	4811      	ldr	r0, [pc, #68]	; (3184 <clk_init+0x54>)
    3140:	f002 f850 	bl	51e4 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    3144:	4b10      	ldr	r3, [pc, #64]	; (3188 <clk_init+0x58>)
    3146:	4298      	cmp	r0, r3
    3148:	d118      	bne.n	317c <clk_init+0x4c>
	hfclkaudio_init();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_DRIVER_CALIBRATION)) {
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
    314a:	6920      	ldr	r0, [r4, #16]
    314c:	f000 f9dc 	bl	3508 <z_nrf_clock_calibration_init>
	}

	nrfx_clock_enable();
    3150:	f004 ffd5 	bl	80fe <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    3154:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    3156:	490d      	ldr	r1, [pc, #52]	; (318c <clk_init+0x5c>)
    3158:	4630      	mov	r0, r6
    315a:	f004 f95d 	bl	7418 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    315e:	2800      	cmp	r0, #0
    3160:	db0b      	blt.n	317a <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    3162:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    3164:	4909      	ldr	r1, [pc, #36]	; (318c <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3166:	2501      	movs	r5, #1
    3168:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    316a:	f104 001c 	add.w	r0, r4, #28
    316e:	f004 f953 	bl	7418 <onoff_manager_init>
		if (err < 0) {
    3172:	2800      	cmp	r0, #0
    3174:	db01      	blt.n	317a <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    3176:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    3178:	2000      	movs	r0, #0
}
    317a:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    317c:	f06f 0004 	mvn.w	r0, #4
    3180:	e7fb      	b.n	317a <clk_init+0x4a>
    3182:	bf00      	nop
    3184:	000031c5 	.word	0x000031c5
    3188:	0bad0000 	.word	0x0bad0000
    318c:	00008a74 	.word	0x00008a74

00003190 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    3190:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    3192:	230c      	movs	r3, #12
    3194:	4809      	ldr	r0, [pc, #36]	; (31bc <clkstarted_handle.constprop.0+0x2c>)
    3196:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    3198:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    319a:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    319c:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    31a0:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    31a2:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    31a4:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    31a6:	4418      	add	r0, r3
    31a8:	f004 fd5b 	bl	7c62 <set_on_state>
	if (callback) {
    31ac:	b12d      	cbz	r5, 31ba <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    31ae:	4632      	mov	r2, r6
    31b0:	462b      	mov	r3, r5
    31b2:	4803      	ldr	r0, [pc, #12]	; (31c0 <clkstarted_handle.constprop.0+0x30>)
}
    31b4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    31b8:	4718      	bx	r3
}
    31ba:	bd70      	pop	{r4, r5, r6, pc}
    31bc:	20000950 	.word	0x20000950
    31c0:	00008708 	.word	0x00008708

000031c4 <clock_event_handler>:
	switch (event) {
    31c4:	2801      	cmp	r0, #1
{
    31c6:	b510      	push	{r4, lr}
    31c8:	4604      	mov	r4, r0
	switch (event) {
    31ca:	d00a      	beq.n	31e2 <clock_event_handler+0x1e>
    31cc:	2803      	cmp	r0, #3
    31ce:	d00c      	beq.n	31ea <clock_event_handler+0x26>
    31d0:	b978      	cbnz	r0, 31f2 <clock_event_handler+0x2e>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    31d2:	4b08      	ldr	r3, [pc, #32]	; (31f4 <clock_event_handler+0x30>)
    31d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    31d6:	075b      	lsls	r3, r3, #29
    31d8:	d10b      	bne.n	31f2 <clock_event_handler+0x2e>
}
    31da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    31de:	f7ff bfd7 	b.w	3190 <clkstarted_handle.constprop.0>
			z_nrf_clock_calibration_lfclk_started();
    31e2:	f000 f99f 	bl	3524 <z_nrf_clock_calibration_lfclk_started>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    31e6:	4620      	mov	r0, r4
    31e8:	e7f7      	b.n	31da <clock_event_handler+0x16>
}
    31ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			z_nrf_clock_calibration_done_handler();
    31ee:	f000 b9a7 	b.w	3540 <z_nrf_clock_calibration_done_handler>
}
    31f2:	bd10      	pop	{r4, pc}
    31f4:	20000950 	.word	0x20000950

000031f8 <generic_hfclk_start>:
{
    31f8:	b508      	push	{r3, lr}
	__asm__ volatile(
    31fa:	f04f 0320 	mov.w	r3, #32
    31fe:	f3ef 8111 	mrs	r1, BASEPRI
    3202:	f383 8812 	msr	BASEPRI_MAX, r3
    3206:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    320a:	4a12      	ldr	r2, [pc, #72]	; (3254 <generic_hfclk_start+0x5c>)
    320c:	6813      	ldr	r3, [r2, #0]
    320e:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    3212:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    3216:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    3218:	d00c      	beq.n	3234 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    321a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    321e:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    3222:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    3226:	f013 0301 	ands.w	r3, r3, #1
    322a:	d003      	beq.n	3234 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    322c:	480a      	ldr	r0, [pc, #40]	; (3258 <generic_hfclk_start+0x60>)
    322e:	f004 fd18 	bl	7c62 <set_on_state>
			already_started = true;
    3232:	2301      	movs	r3, #1
	__asm__ volatile(
    3234:	f381 8811 	msr	BASEPRI, r1
    3238:	f3bf 8f6f 	isb	sy
	if (already_started) {
    323c:	b123      	cbz	r3, 3248 <generic_hfclk_start+0x50>
}
    323e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    3242:	2000      	movs	r0, #0
    3244:	f7ff bfa4 	b.w	3190 <clkstarted_handle.constprop.0>
}
    3248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    324c:	2001      	movs	r0, #1
    324e:	f004 bf63 	b.w	8118 <nrfx_clock_start>
    3252:	bf00      	nop
    3254:	200009a0 	.word	0x200009a0
    3258:	20000990 	.word	0x20000990

0000325c <api_blocking_start>:
{
    325c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    325e:	2200      	movs	r2, #0
    3260:	2301      	movs	r3, #1
    3262:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3266:	4a09      	ldr	r2, [pc, #36]	; (328c <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3268:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    326c:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    326e:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3272:	f004 fd66 	bl	7d42 <api_start>
	if (err < 0) {
    3276:	2800      	cmp	r0, #0
    3278:	db05      	blt.n	3286 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    327a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    327e:	2300      	movs	r3, #0
    3280:	4668      	mov	r0, sp
    3282:	f003 f8e9 	bl	6458 <z_impl_k_sem_take>
}
    3286:	b005      	add	sp, #20
    3288:	f85d fb04 	ldr.w	pc, [sp], #4
    328c:	00007d69 	.word	0x00007d69

00003290 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3290:	4b09      	ldr	r3, [pc, #36]	; (32b8 <generic_hfclk_stop+0x28>)
    3292:	f3bf 8f5b 	dmb	ish
    3296:	e853 2f00 	ldrex	r2, [r3]
    329a:	f022 0102 	bic.w	r1, r2, #2
    329e:	e843 1000 	strex	r0, r1, [r3]
    32a2:	2800      	cmp	r0, #0
    32a4:	d1f7      	bne.n	3296 <generic_hfclk_stop+0x6>
    32a6:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    32aa:	07d3      	lsls	r3, r2, #31
    32ac:	d402      	bmi.n	32b4 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    32ae:	2001      	movs	r0, #1
    32b0:	f004 bf6a 	b.w	8188 <nrfx_clock_stop>
}
    32b4:	4770      	bx	lr
    32b6:	bf00      	nop
    32b8:	200009a0 	.word	0x200009a0

000032bc <z_nrf_clock_control_get_onoff>:
}
    32bc:	4a02      	ldr	r2, [pc, #8]	; (32c8 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    32be:	b2c3      	uxtb	r3, r0
}
    32c0:	201c      	movs	r0, #28
    32c2:	fb03 2000 	mla	r0, r3, r0, r2
    32c6:	4770      	bx	lr
    32c8:	20000950 	.word	0x20000950

000032cc <z_nrf_clock_control_lf_on>:
{
    32cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    32ce:	4928      	ldr	r1, [pc, #160]	; (3370 <z_nrf_clock_control_lf_on+0xa4>)
    32d0:	f3bf 8f5b 	dmb	ish
    32d4:	4606      	mov	r6, r0
    32d6:	2201      	movs	r2, #1
    32d8:	e851 3f00 	ldrex	r3, [r1]
    32dc:	e841 2000 	strex	r0, r2, [r1]
    32e0:	2800      	cmp	r0, #0
    32e2:	d1f9      	bne.n	32d8 <z_nrf_clock_control_lf_on+0xc>
    32e4:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    32e8:	b933      	cbnz	r3, 32f8 <z_nrf_clock_control_lf_on+0x2c>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    32ea:	4922      	ldr	r1, [pc, #136]	; (3374 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
    32ec:	4822      	ldr	r0, [pc, #136]	; (3378 <z_nrf_clock_control_lf_on+0xac>)
    32ee:	604b      	str	r3, [r1, #4]
    32f0:	60cb      	str	r3, [r1, #12]
    32f2:	608a      	str	r2, [r1, #8]
    32f4:	f004 f8a3 	bl	743e <onoff_request>
	switch (start_mode) {
    32f8:	1e73      	subs	r3, r6, #1
    32fa:	2b01      	cmp	r3, #1
    32fc:	d820      	bhi.n	3340 <z_nrf_clock_control_lf_on+0x74>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    32fe:	f004 ffdc 	bl	82ba <k_is_in_isr>
    3302:	4604      	mov	r4, r0
    3304:	b910      	cbnz	r0, 330c <z_nrf_clock_control_lf_on+0x40>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    3306:	4b1d      	ldr	r3, [pc, #116]	; (337c <z_nrf_clock_control_lf_on+0xb0>)
	int key = isr_mode ? irq_lock() : 0;
    3308:	781b      	ldrb	r3, [r3, #0]
    330a:	bb53      	cbnz	r3, 3362 <z_nrf_clock_control_lf_on+0x96>
	__asm__ volatile(
    330c:	f04f 0320 	mov.w	r3, #32
    3310:	f3ef 8511 	mrs	r5, BASEPRI
    3314:	f383 8812 	msr	BASEPRI_MAX, r3
    3318:	f3bf 8f6f 	isb	sy
    331c:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    331e:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    3322:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    3326:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
    332a:	03d2      	lsls	r2, r2, #15
    332c:	d509      	bpl.n	3342 <z_nrf_clock_control_lf_on+0x76>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    332e:	079b      	lsls	r3, r3, #30
    3330:	d001      	beq.n	3336 <z_nrf_clock_control_lf_on+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    3332:	2e01      	cmp	r6, #1
    3334:	d105      	bne.n	3342 <z_nrf_clock_control_lf_on+0x76>
	if (isr_mode) {
    3336:	b174      	cbz	r4, 3356 <z_nrf_clock_control_lf_on+0x8a>
	__asm__ volatile(
    3338:	f385 8811 	msr	BASEPRI, r5
    333c:	f3bf 8f6f 	isb	sy
}
    3340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3342:	b11c      	cbz	r4, 334c <z_nrf_clock_control_lf_on+0x80>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3344:	4628      	mov	r0, r5
    3346:	f7ff f8ab 	bl	24a0 <arch_cpu_atomic_idle>
}
    334a:	e7ea      	b.n	3322 <z_nrf_clock_control_lf_on+0x56>
	return z_impl_k_sleep(timeout);
    334c:	2100      	movs	r1, #0
    334e:	2021      	movs	r0, #33	; 0x21
    3350:	f003 fcd6 	bl	6d00 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    3354:	e7e5      	b.n	3322 <z_nrf_clock_control_lf_on+0x56>
    p_reg->INTENSET = mask;
    3356:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    335a:	2202      	movs	r2, #2
    335c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3360:	e7ee      	b.n	3340 <z_nrf_clock_control_lf_on+0x74>
    p_reg->INTENCLR = mask;
    3362:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3366:	2202      	movs	r2, #2
    3368:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    336c:	4605      	mov	r5, r0
}
    336e:	e7d6      	b.n	331e <z_nrf_clock_control_lf_on+0x52>
    3370:	200009a4 	.word	0x200009a4
    3374:	20000940 	.word	0x20000940
    3378:	2000096c 	.word	0x2000096c
    337c:	20000f59 	.word	0x20000f59

00003380 <temp_sensor_init.part.0>:
	total_cnt = 0;
	total_skips_cnt = 0;
}

#if CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP
static int temp_sensor_init(const struct device *arg)
    3380:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
{
	temp_sensor = DEVICE_DT_GET_OR_NULL(TEMP_NODE);
	if ((temp_sensor != NULL) && !device_is_ready(temp_sensor)) {
		LOG_ERR("Temperature sensor not ready");
    3382:	4b08      	ldr	r3, [pc, #32]	; (33a4 <temp_sensor_init.part.0+0x24>)
    3384:	9305      	str	r3, [sp, #20]
    3386:	2302      	movs	r3, #2
    3388:	9304      	str	r3, [sp, #16]
    338a:	4807      	ldr	r0, [pc, #28]	; (33a8 <temp_sensor_init.part.0+0x28>)
    338c:	2300      	movs	r3, #0
    338e:	aa04      	add	r2, sp, #16
    3390:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3394:	f004 fba8 	bl	7ae8 <z_impl_z_log_msg2_static_create>
		return -ENODEV;
	}

	return 0;
}
    3398:	f06f 0012 	mvn.w	r0, #18
    339c:	b007      	add	sp, #28
    339e:	f85d fb04 	ldr.w	pc, [sp], #4
    33a2:	bf00      	nop
    33a4:	00009282 	.word	0x00009282
    33a8:	000088d0 	.word	0x000088d0

000033ac <start_cal_process>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    33ac:	4b0d      	ldr	r3, [pc, #52]	; (33e4 <start_cal_process+0x38>)
    33ae:	f3bf 8f5b 	dmb	ish
    33b2:	2201      	movs	r2, #1
    33b4:	e853 1f00 	ldrex	r1, [r3]
    33b8:	2900      	cmp	r1, #0
    33ba:	d103      	bne.n	33c4 <start_cal_process+0x18>
    33bc:	e843 2000 	strex	r0, r2, [r3]
    33c0:	2800      	cmp	r0, #0
    33c2:	d1f7      	bne.n	33b4 <start_cal_process+0x8>
    33c4:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&cal_process_in_progress, 0, 1) == false) {
    33c8:	d10a      	bne.n	33e0 <start_cal_process+0x34>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    33ca:	4907      	ldr	r1, [pc, #28]	; (33e8 <start_cal_process+0x3c>)
    33cc:	2300      	movs	r3, #0
    33ce:	60cb      	str	r3, [r1, #12]
    33d0:	4b06      	ldr	r3, [pc, #24]	; (33ec <start_cal_process+0x40>)
    33d2:	604b      	str	r3, [r1, #4]
    33d4:	2303      	movs	r3, #3
    33d6:	608b      	str	r3, [r1, #8]
	err = onoff_request(mgr, cli);
    33d8:	4b05      	ldr	r3, [pc, #20]	; (33f0 <start_cal_process+0x44>)
    33da:	6818      	ldr	r0, [r3, #0]
    33dc:	f004 b82f 	b.w	743e <onoff_request>
}
    33e0:	4770      	bx	lr
    33e2:	bf00      	nop
    33e4:	200009a8 	.word	0x200009a8
    33e8:	200009ac 	.word	0x200009ac
    33ec:	000034dd 	.word	0x000034dd
    33f0:	200009bc 	.word	0x200009bc

000033f4 <temp_sensor_init>:
{
    33f4:	b508      	push	{r3, lr}
	temp_sensor = DEVICE_DT_GET_OR_NULL(TEMP_NODE);
    33f6:	4b06      	ldr	r3, [pc, #24]	; (3410 <temp_sensor_init+0x1c>)
    33f8:	4806      	ldr	r0, [pc, #24]	; (3414 <temp_sensor_init+0x20>)
    33fa:	6018      	str	r0, [r3, #0]
    33fc:	f004 ff4f 	bl	829e <z_device_is_ready>
	if ((temp_sensor != NULL) && !device_is_ready(temp_sensor)) {
    3400:	b918      	cbnz	r0, 340a <temp_sensor_init+0x16>
}
    3402:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    3406:	f7ff bfbb 	b.w	3380 <temp_sensor_init.part.0>
    340a:	2000      	movs	r0, #0
    340c:	bd08      	pop	{r3, pc}
    340e:	bf00      	nop
    3410:	200009c0 	.word	0x200009c0
    3414:	00008750 	.word	0x00008750

00003418 <start_cycle>:
{
    3418:	b507      	push	{r0, r1, r2, lr}
	z_impl_k_timer_start(timer, duration, period);
    341a:	2200      	movs	r2, #0
    341c:	2300      	movs	r3, #0
    341e:	e9cd 2300 	strd	r2, r3, [sp]
    3422:	4808      	ldr	r0, [pc, #32]	; (3444 <start_cycle+0x2c>)
    3424:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    3428:	2300      	movs	r3, #0
    342a:	f003 fe85 	bl	7138 <z_impl_k_timer_start>
	clk_release(&mgrs[CLOCK_CONTROL_NRF_TYPE_HFCLK]);
    342e:	4b06      	ldr	r3, [pc, #24]	; (3448 <start_cycle+0x30>)
	err = onoff_release(mgr);
    3430:	6818      	ldr	r0, [r3, #0]
    3432:	f004 f84d 	bl	74d0 <onoff_release>
	cal_process_in_progress = 0;
    3436:	4b05      	ldr	r3, [pc, #20]	; (344c <start_cycle+0x34>)
    3438:	2200      	movs	r2, #0
    343a:	601a      	str	r2, [r3, #0]
}
    343c:	b003      	add	sp, #12
    343e:	f85d fb04 	ldr.w	pc, [sp], #4
    3442:	bf00      	nop
    3444:	20000108 	.word	0x20000108
    3448:	200009bc 	.word	0x200009bc
    344c:	200009a8 	.word	0x200009a8

00003450 <measure_temperature>:
{
    3450:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int rc = sensor_sample_fetch(temp_sensor);
    3452:	4d1d      	ldr	r5, [pc, #116]	; (34c8 <measure_temperature+0x78>)
    3454:	6828      	ldr	r0, [r5, #0]
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    3456:	6883      	ldr	r3, [r0, #8]
    3458:	4c1c      	ldr	r4, [pc, #112]	; (34cc <measure_temperature+0x7c>)
    345a:	68db      	ldr	r3, [r3, #12]
    345c:	2139      	movs	r1, #57	; 0x39
    345e:	4798      	blx	r3
	if (rc == 0) {
    3460:	b170      	cbz	r0, 3480 <measure_temperature+0x30>
		calib_skip_cnt = 0;
    3462:	2300      	movs	r3, #0
    3464:	7023      	strb	r3, [r4, #0]
	int16_t diff = 0;
    3466:	461a      	mov	r2, r3
	if ((calib_skip_cnt == 0) ||
    3468:	7821      	ldrb	r1, [r4, #0]
    346a:	b109      	cbz	r1, 3470 <measure_temperature+0x20>
    346c:	2a01      	cmp	r2, #1
    346e:	dd20      	ble.n	34b2 <measure_temperature+0x62>
		prev_temperature = temperature;
    3470:	4a17      	ldr	r2, [pc, #92]	; (34d0 <measure_temperature+0x80>)
    3472:	8013      	strh	r3, [r2, #0]
	nrfx_clock_calibration_start();
    3474:	f001 fec8 	bl	5208 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    3478:	2301      	movs	r3, #1
    347a:	7023      	strb	r3, [r4, #0]
}
    347c:	b003      	add	sp, #12
    347e:	bd30      	pop	{r4, r5, pc}
		rc = sensor_channel_get(temp_sensor, SENSOR_CHAN_DIE_TEMP,
    3480:	6828      	ldr	r0, [r5, #0]
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
    3482:	6883      	ldr	r3, [r0, #8]
    3484:	466a      	mov	r2, sp
    3486:	691b      	ldr	r3, [r3, #16]
    3488:	210c      	movs	r1, #12
    348a:	4798      	blx	r3
	if (rc == 0) {
    348c:	2800      	cmp	r0, #0
    348e:	d1e8      	bne.n	3462 <measure_temperature+0x12>
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    3490:	4a10      	ldr	r2, [pc, #64]	; (34d4 <measure_temperature+0x84>)
    3492:	9b01      	ldr	r3, [sp, #4]
    3494:	fb93 f3f2 	sdiv	r3, r3, r2
    3498:	9a00      	ldr	r2, [sp, #0]
    349a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		diff = abs(temperature - prev_temperature);
    349e:	4a0c      	ldr	r2, [pc, #48]	; (34d0 <measure_temperature+0x80>)
    34a0:	f9b2 2000 	ldrsh.w	r2, [r2]
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    34a4:	b21b      	sxth	r3, r3
		diff = abs(temperature - prev_temperature);
    34a6:	1a9a      	subs	r2, r3, r2
void srand(unsigned int seed);
#endif /* CONFIG_MINIMAL_LIBC_RAND */

static inline int abs(int __n)
{
	return (__n < 0) ? -__n : __n;
    34a8:	2a00      	cmp	r2, #0
    34aa:	bfb8      	it	lt
    34ac:	4252      	neglt	r2, r2
    34ae:	b212      	sxth	r2, r2
    34b0:	e7da      	b.n	3468 <measure_temperature+0x18>
		total_skips_cnt++;
    34b2:	4a09      	ldr	r2, [pc, #36]	; (34d8 <measure_temperature+0x88>)
    34b4:	6813      	ldr	r3, [r2, #0]
		calib_skip_cnt--;
    34b6:	3901      	subs	r1, #1
		total_skips_cnt++;
    34b8:	3301      	adds	r3, #1
		calib_skip_cnt--;
    34ba:	7021      	strb	r1, [r4, #0]
		total_skips_cnt++;
    34bc:	6013      	str	r3, [r2, #0]
}
    34be:	b003      	add	sp, #12
    34c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		start_cycle();
    34c4:	f7ff bfa8 	b.w	3418 <start_cycle>
    34c8:	200009c0 	.word	0x200009c0
    34cc:	20000b47 	.word	0x20000b47
    34d0:	20000b30 	.word	0x20000b30
    34d4:	0003d090 	.word	0x0003d090
    34d8:	200009c8 	.word	0x200009c8

000034dc <cal_hf_callback>:
{
    34dc:	b508      	push	{r3, lr}
	if ((temp_sensor == NULL) || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    34de:	4b07      	ldr	r3, [pc, #28]	; (34fc <cal_hf_callback+0x20>)
    34e0:	681b      	ldr	r3, [r3, #0]
    34e2:	b92b      	cbnz	r3, 34f0 <cal_hf_callback+0x14>
	nrfx_clock_calibration_start();
    34e4:	f001 fe90 	bl	5208 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    34e8:	4b05      	ldr	r3, [pc, #20]	; (3500 <cal_hf_callback+0x24>)
    34ea:	2201      	movs	r2, #1
    34ec:	701a      	strb	r2, [r3, #0]
}
    34ee:	bd08      	pop	{r3, pc}
    34f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_submit(&temp_measure_work);
    34f4:	4803      	ldr	r0, [pc, #12]	; (3504 <cal_hf_callback+0x28>)
    34f6:	f003 b8bd 	b.w	6674 <k_work_submit>
    34fa:	bf00      	nop
    34fc:	200009c0 	.word	0x200009c0
    3500:	20000b47 	.word	0x20000b47
    3504:	20000010 	.word	0x20000010

00003508 <z_nrf_clock_calibration_init>:
	mgrs = onoff_mgrs;
    3508:	4b03      	ldr	r3, [pc, #12]	; (3518 <z_nrf_clock_calibration_init+0x10>)
	total_cnt = 0;
    350a:	4a04      	ldr	r2, [pc, #16]	; (351c <z_nrf_clock_calibration_init+0x14>)
	mgrs = onoff_mgrs;
    350c:	6018      	str	r0, [r3, #0]
	total_cnt = 0;
    350e:	2300      	movs	r3, #0
    3510:	6013      	str	r3, [r2, #0]
	total_skips_cnt = 0;
    3512:	4a03      	ldr	r2, [pc, #12]	; (3520 <z_nrf_clock_calibration_init+0x18>)
    3514:	6013      	str	r3, [r2, #0]
}
    3516:	4770      	bx	lr
    3518:	200009bc 	.word	0x200009bc
    351c:	200009c4 	.word	0x200009c4
    3520:	200009c8 	.word	0x200009c8

00003524 <z_nrf_clock_calibration_lfclk_started>:
SYS_INIT(temp_sensor_init, APPLICATION, 0);
#endif /* CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP */

static void start_unconditional_cal_process(void)
{
	calib_skip_cnt = 0;
    3524:	4b02      	ldr	r3, [pc, #8]	; (3530 <z_nrf_clock_calibration_lfclk_started+0xc>)
    3526:	2200      	movs	r2, #0
    3528:	701a      	strb	r2, [r3, #0]
	start_cal_process();
    352a:	f7ff bf3f 	b.w	33ac <start_cal_process>
    352e:	bf00      	nop
    3530:	20000b47 	.word	0x20000b47

00003534 <z_nrf_clock_calibration_lfclk_stopped>:
	z_impl_k_timer_stop(timer);
    3534:	4801      	ldr	r0, [pc, #4]	; (353c <z_nrf_clock_calibration_lfclk_stopped+0x8>)
    3536:	f005 b88f 	b.w	8658 <z_impl_k_timer_stop>
    353a:	bf00      	nop
    353c:	20000108 	.word	0x20000108

00003540 <z_nrf_clock_calibration_done_handler>:
	LOG_DBG("Calibration stopped");
}

void z_nrf_clock_calibration_done_handler(void)
{
	total_cnt++;
    3540:	4a02      	ldr	r2, [pc, #8]	; (354c <z_nrf_clock_calibration_done_handler+0xc>)
    3542:	6813      	ldr	r3, [r2, #0]
    3544:	3301      	adds	r3, #1
    3546:	6013      	str	r3, [r2, #0]
	LOG_DBG("Calibration done.");

	start_cycle();
    3548:	f7ff bf66 	b.w	3418 <start_cycle>
    354c:	200009c4 	.word	0x200009c4

00003550 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    3550:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    3552:	4c04      	ldr	r4, [pc, #16]	; (3564 <rtt_console_init+0x14>)
    3554:	4620      	mov	r0, r4
    3556:	f7fd fcb5 	bl	ec4 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    355a:	4620      	mov	r0, r4
    355c:	f7ff fd88 	bl	3070 <__stdout_hook_install>

	return 0;
}
    3560:	2000      	movs	r0, #0
    3562:	bd10      	pop	{r4, pc}
    3564:	00003569 	.word	0x00003569

00003568 <rtt_console_out>:
{
    3568:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    356c:	f8df 805c 	ldr.w	r8, [pc, #92]	; 35cc <rtt_console_out+0x64>
    3570:	4e17      	ldr	r6, [pc, #92]	; (35d0 <rtt_console_out+0x68>)
	char c = (char)character;
    3572:	f88d 0007 	strb.w	r0, [sp, #7]
{
    3576:	4604      	mov	r4, r0
	char c = (char)character;
    3578:	2503      	movs	r5, #3
    357a:	f04f 33ff 	mov.w	r3, #4294967295
    357e:	f04f 32ff 	mov.w	r2, #4294967295
    3582:	4640      	mov	r0, r8
    3584:	f002 fe8e 	bl	62a4 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    3588:	2201      	movs	r2, #1
    358a:	f10d 0107 	add.w	r1, sp, #7
    358e:	2000      	movs	r0, #0
    3590:	f002 fbc6 	bl	5d20 <SEGGER_RTT_WriteNoLock>
    3594:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    3596:	4640      	mov	r0, r8
    3598:	f002 fefc 	bl	6394 <z_impl_k_mutex_unlock>
		if (cnt) {
    359c:	b12f      	cbz	r7, 35aa <rtt_console_out+0x42>
			host_present = true;
    359e:	2301      	movs	r3, #1
    35a0:	7033      	strb	r3, [r6, #0]
}
    35a2:	4620      	mov	r0, r4
    35a4:	b002      	add	sp, #8
    35a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    35aa:	7833      	ldrb	r3, [r6, #0]
    35ac:	2b00      	cmp	r3, #0
    35ae:	d0f8      	beq.n	35a2 <rtt_console_out+0x3a>
			if (max_cnt) {
    35b0:	3d01      	subs	r5, #1
    35b2:	d008      	beq.n	35c6 <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    35b4:	f004 fe81 	bl	82ba <k_is_in_isr>
    35b8:	2800      	cmp	r0, #0
    35ba:	d1de      	bne.n	357a <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    35bc:	2100      	movs	r1, #0
    35be:	2042      	movs	r0, #66	; 0x42
    35c0:	f003 fb9e 	bl	6d00 <z_impl_k_sleep>
    35c4:	e7d9      	b.n	357a <rtt_console_out+0x12>
				host_present = false;
    35c6:	7035      	strb	r5, [r6, #0]
    35c8:	e7eb      	b.n	35a2 <rtt_console_out+0x3a>
    35ca:	bf00      	nop
    35cc:	20000140 	.word	0x20000140
    35d0:	20000b48 	.word	0x20000b48

000035d4 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    35d4:	b530      	push	{r4, r5, lr}
	return port->config;
    35d6:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    35d8:	7b04      	ldrb	r4, [r0, #12]
    35da:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    35de:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    35e2:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    35e6:	b085      	sub	sp, #20
    35e8:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    35ec:	d104      	bne.n	35f8 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    35ee:	4628      	mov	r0, r5
    35f0:	f002 f8a2 	bl	5738 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    35f4:	2000      	movs	r0, #0
    35f6:	e02e      	b.n	3656 <gpio_nrfx_pin_interrupt_configure+0x82>
	if (mode == GPIO_INT_MODE_LEVEL) {
    35f8:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    35fc:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    3600:	d12b      	bne.n	365a <gpio_nrfx_pin_interrupt_configure+0x86>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    3602:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    3606:	bf0c      	ite	eq
    3608:	2304      	moveq	r3, #4
    360a:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    360c:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    3610:	6883      	ldr	r3, [r0, #8]
    3612:	fa23 f101 	lsr.w	r1, r3, r1
    3616:	07c9      	lsls	r1, r1, #31
    3618:	d42b      	bmi.n	3672 <gpio_nrfx_pin_interrupt_configure+0x9e>
    361a:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    361e:	d128      	bne.n	3672 <gpio_nrfx_pin_interrupt_configure+0x9e>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    3620:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3624:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    3628:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    362c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    3630:	07db      	lsls	r3, r3, #31
    3632:	d41e      	bmi.n	3672 <gpio_nrfx_pin_interrupt_configure+0x9e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3634:	f10d 0407 	add.w	r4, sp, #7
    3638:	4621      	mov	r1, r4
    363a:	4628      	mov	r0, r5
    363c:	f001 ffe4 	bl	5608 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    3640:	4b14      	ldr	r3, [pc, #80]	; (3694 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    3642:	4298      	cmp	r0, r3
    3644:	d114      	bne.n	3670 <gpio_nrfx_pin_interrupt_configure+0x9c>
			err = nrfx_gpiote_channel_alloc(&ch);
    3646:	4620      	mov	r0, r4
    3648:	f002 f82c 	bl	56a4 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    364c:	4b12      	ldr	r3, [pc, #72]	; (3698 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    364e:	4298      	cmp	r0, r3
    3650:	d00e      	beq.n	3670 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
    3652:	f06f 000b 	mvn.w	r0, #11
}
    3656:	b005      	add	sp, #20
    3658:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    365a:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    365e:	d005      	beq.n	366c <gpio_nrfx_pin_interrupt_configure+0x98>
    3660:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    3664:	bf0c      	ite	eq
    3666:	2302      	moveq	r3, #2
    3668:	2301      	movne	r3, #1
    366a:	e7cf      	b.n	360c <gpio_nrfx_pin_interrupt_configure+0x38>
    366c:	2303      	movs	r3, #3
    366e:	e7cd      	b.n	360c <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    3670:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3672:	2300      	movs	r3, #0
    3674:	4619      	mov	r1, r3
    3676:	aa02      	add	r2, sp, #8
    3678:	4628      	mov	r0, r5
    367a:	f001 fe9d 	bl	53b8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    367e:	4b06      	ldr	r3, [pc, #24]	; (3698 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    3680:	4298      	cmp	r0, r3
    3682:	d104      	bne.n	368e <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3684:	2101      	movs	r1, #1
    3686:	4628      	mov	r0, r5
    3688:	f002 f812 	bl	56b0 <nrfx_gpiote_trigger_enable>
    368c:	e7b2      	b.n	35f4 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    368e:	f06f 0004 	mvn.w	r0, #4
    3692:	e7e0      	b.n	3656 <gpio_nrfx_pin_interrupt_configure+0x82>
    3694:	0bad0004 	.word	0x0bad0004
    3698:	0bad0000 	.word	0x0bad0000

0000369c <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    369c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    369e:	f001 fff1 	bl	5684 <nrfx_gpiote_is_init>
    36a2:	4604      	mov	r4, r0
    36a4:	b968      	cbnz	r0, 36c2 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    36a6:	f001 ffc5 	bl	5634 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    36aa:	4b08      	ldr	r3, [pc, #32]	; (36cc <gpio_nrfx_init+0x30>)
    36ac:	4298      	cmp	r0, r3
    36ae:	d10a      	bne.n	36c6 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    36b0:	4807      	ldr	r0, [pc, #28]	; (36d0 <gpio_nrfx_init+0x34>)
    36b2:	4621      	mov	r1, r4
    36b4:	f001 ffa2 	bl	55fc <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    36b8:	4622      	mov	r2, r4
    36ba:	2105      	movs	r1, #5
    36bc:	2006      	movs	r0, #6
    36be:	f7fe ff91 	bl	25e4 <z_arm_irq_priority_set>
		return 0;
    36c2:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    36c4:	bd10      	pop	{r4, pc}
		return -EIO;
    36c6:	f06f 0004 	mvn.w	r0, #4
    36ca:	e7fb      	b.n	36c4 <gpio_nrfx_init+0x28>
    36cc:	0bad0000 	.word	0x0bad0000
    36d0:	000036d5 	.word	0x000036d5

000036d4 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    36d4:	0943      	lsrs	r3, r0, #5
{
    36d6:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    36d8:	d110      	bne.n	36fc <nrfx_gpio_handler+0x28>
	return list->head;
    36da:	4b09      	ldr	r3, [pc, #36]	; (3700 <nrfx_gpio_handler+0x2c>)
    36dc:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    36de:	b169      	cbz	r1, 36fc <nrfx_gpio_handler+0x28>
	gpio_fire_callbacks(list, port, BIT(pin));
    36e0:	2501      	movs	r5, #1
	return node->next;
    36e2:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    36e4:	4e07      	ldr	r6, [pc, #28]	; (3704 <nrfx_gpio_handler+0x30>)
    36e6:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
    36e8:	688a      	ldr	r2, [r1, #8]
    36ea:	402a      	ands	r2, r5
    36ec:	d002      	beq.n	36f4 <nrfx_gpio_handler+0x20>
			cb->handler(port, cb, cb->pin_mask & pins);
    36ee:	684b      	ldr	r3, [r1, #4]
    36f0:	4630      	mov	r0, r6
    36f2:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    36f4:	b114      	cbz	r4, 36fc <nrfx_gpio_handler+0x28>
    36f6:	4621      	mov	r1, r4
    36f8:	6824      	ldr	r4, [r4, #0]
    36fa:	e7f5      	b.n	36e8 <nrfx_gpio_handler+0x14>
}
    36fc:	bd70      	pop	{r4, r5, r6, pc}
    36fe:	bf00      	nop
    3700:	200009cc 	.word	0x200009cc
    3704:	00008720 	.word	0x00008720

00003708 <gpio_nrfx_pin_configure>:
{
    3708:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    370c:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    370e:	7b3b      	ldrb	r3, [r7, #12]
    3710:	f001 051f 	and.w	r5, r1, #31
{
    3714:	b085      	sub	sp, #20
    3716:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3718:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    371c:	4614      	mov	r4, r2
    371e:	b9ca      	cbnz	r2, 3754 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    3720:	a902      	add	r1, sp, #8
    3722:	4628      	mov	r0, r5
    3724:	f001 ff70 	bl	5608 <nrfx_gpiote_channel_get>
    3728:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    372a:	4628      	mov	r0, r5
    372c:	f002 f82c 	bl	5788 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    3730:	4b4a      	ldr	r3, [pc, #296]	; (385c <gpio_nrfx_pin_configure+0x154>)
    3732:	4298      	cmp	r0, r3
    3734:	d004      	beq.n	3740 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    3736:	f06f 0004 	mvn.w	r0, #4
}
    373a:	b005      	add	sp, #20
    373c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    3740:	4284      	cmp	r4, r0
    3742:	d105      	bne.n	3750 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    3744:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3748:	f001 ffa6 	bl	5698 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    374c:	42a0      	cmp	r0, r4
    374e:	d1f2      	bne.n	3736 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3750:	2000      	movs	r0, #0
    3752:	e7f2      	b.n	373a <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    3754:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    3758:	f10d 0103 	add.w	r1, sp, #3
    375c:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    375e:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    3762:	f001 ff51 	bl	5608 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3766:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    3768:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    376a:	aa02      	add	r2, sp, #8
    376c:	4649      	mov	r1, r9
    376e:	4628      	mov	r0, r5
    3770:	f001 fe22 	bl	53b8 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3774:	4b39      	ldr	r3, [pc, #228]	; (385c <gpio_nrfx_pin_configure+0x154>)
    3776:	4298      	cmp	r0, r3
    3778:	d002      	beq.n	3780 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    377a:	f06f 0015 	mvn.w	r0, #21
    377e:	e7dc      	b.n	373a <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    3780:	4580      	cmp	r8, r0
    3782:	d103      	bne.n	378c <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    3784:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3788:	f001 ff86 	bl	5698 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    378c:	03a3      	lsls	r3, r4, #14
    378e:	d551      	bpl.n	3834 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    3790:	f240 6306 	movw	r3, #1542	; 0x606
    3794:	4023      	ands	r3, r4
    3796:	f240 2206 	movw	r2, #518	; 0x206
    379a:	4293      	cmp	r3, r2
    379c:	d03b      	beq.n	3816 <gpio_nrfx_pin_configure+0x10e>
    379e:	d80c      	bhi.n	37ba <gpio_nrfx_pin_configure+0xb2>
    37a0:	2b06      	cmp	r3, #6
    37a2:	d015      	beq.n	37d0 <gpio_nrfx_pin_configure+0xc8>
    37a4:	d804      	bhi.n	37b0 <gpio_nrfx_pin_configure+0xa8>
    37a6:	b19b      	cbz	r3, 37d0 <gpio_nrfx_pin_configure+0xc8>
    37a8:	2b02      	cmp	r3, #2
    37aa:	d1e6      	bne.n	377a <gpio_nrfx_pin_configure+0x72>
    37ac:	2304      	movs	r3, #4
    37ae:	e00f      	b.n	37d0 <gpio_nrfx_pin_configure+0xc8>
    37b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    37b4:	d1e1      	bne.n	377a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    37b6:	2301      	movs	r3, #1
    37b8:	e00a      	b.n	37d0 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    37ba:	f240 4202 	movw	r2, #1026	; 0x402
    37be:	4293      	cmp	r3, r2
    37c0:	d02b      	beq.n	381a <gpio_nrfx_pin_configure+0x112>
    37c2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    37c6:	d02a      	beq.n	381e <gpio_nrfx_pin_configure+0x116>
    37c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    37cc:	d1d5      	bne.n	377a <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    37ce:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    37d0:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    37d4:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    37d8:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    37dc:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    37de:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    37e2:	bf54      	ite	pl
    37e4:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    37e8:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    37ea:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    37ec:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    37f0:	d517      	bpl.n	3822 <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    37f2:	687b      	ldr	r3, [r7, #4]
    37f4:	2101      	movs	r1, #1
    37f6:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    37fa:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    37fe:	2200      	movs	r2, #0
    3800:	a901      	add	r1, sp, #4
    3802:	4628      	mov	r0, r5
    3804:	f001 fe82 	bl	550c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3808:	4b14      	ldr	r3, [pc, #80]	; (385c <gpio_nrfx_pin_configure+0x154>)
    380a:	4298      	cmp	r0, r3
    380c:	bf14      	ite	ne
    380e:	f06f 0015 	mvnne.w	r0, #21
    3812:	2000      	moveq	r0, #0
    3814:	e791      	b.n	373a <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    3816:	2307      	movs	r3, #7
    3818:	e7da      	b.n	37d0 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    381a:	2305      	movs	r3, #5
    381c:	e7d8      	b.n	37d0 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    381e:	2303      	movs	r3, #3
    3820:	e7d6      	b.n	37d0 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3822:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3824:	bf41      	itttt	mi
    3826:	687b      	ldrmi	r3, [r7, #4]
    3828:	2101      	movmi	r1, #1
    382a:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    382e:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    3832:	e7e4      	b.n	37fe <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    3834:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3836:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    383a:	bf54      	ite	pl
    383c:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    3840:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3842:	461a      	mov	r2, r3
    3844:	a901      	add	r1, sp, #4
    3846:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    3848:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    384c:	f001 fdb4 	bl	53b8 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3850:	4b02      	ldr	r3, [pc, #8]	; (385c <gpio_nrfx_pin_configure+0x154>)
    3852:	4298      	cmp	r0, r3
    3854:	f43f af7c 	beq.w	3750 <gpio_nrfx_pin_configure+0x48>
    3858:	e78f      	b.n	377a <gpio_nrfx_pin_configure+0x72>
    385a:	bf00      	nop
    385c:	0bad0000 	.word	0x0bad0000

00003860 <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    3860:	4b01      	ldr	r3, [pc, #4]	; (3868 <hfclk_on_callback+0x8>)
    3862:	2201      	movs	r2, #1
    3864:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    3866:	4770      	bx	lr
    3868:	4000c000 	.word	0x4000c000

0000386c <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    386c:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
    386e:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
    3870:	d10b      	bne.n	388a <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    3872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    3874:	4906      	ldr	r1, [pc, #24]	; (3890 <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
    3876:	4807      	ldr	r0, [pc, #28]	; (3894 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    3878:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
    387a:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
    387e:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
    3882:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    3884:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    3886:	2000      	movs	r0, #0
    3888:	4770      	bx	lr
		return -ENOTSUP;
    388a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    388e:	4770      	bx	lr
    3890:	0003d090 	.word	0x0003d090
    3894:	000f4240 	.word	0x000f4240

00003898 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    3898:	4b04      	ldr	r3, [pc, #16]	; (38ac <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
    389a:	6900      	ldr	r0, [r0, #16]
    389c:	2200      	movs	r2, #0
    389e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    38a2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	z_impl_k_sem_give(sem);
    38a6:	f002 bdb7 	b.w	6418 <z_impl_k_sem_give>
    38aa:	bf00      	nop
    38ac:	4000c000 	.word	0x4000c000

000038b0 <temp_nrf5_sample_fetch>:
{
    38b0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
    38b2:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
    38b4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    38b6:	b363      	cbz	r3, 3912 <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    38b8:	2939      	cmp	r1, #57	; 0x39
    38ba:	d001      	beq.n	38c0 <temp_nrf5_sample_fetch+0x10>
    38bc:	290c      	cmp	r1, #12
    38be:	d12b      	bne.n	3918 <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
    38c0:	f105 0610 	add.w	r6, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    38c4:	f04f 32ff 	mov.w	r2, #4294967295
    38c8:	f04f 33ff 	mov.w	r3, #4294967295
    38cc:	4630      	mov	r0, r6
    38ce:	f002 fce9 	bl	62a4 <z_impl_k_mutex_lock>
    38d2:	4b13      	ldr	r3, [pc, #76]	; (3920 <temp_nrf5_sample_fetch+0x70>)
    38d4:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
    38d6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    38d8:	2303      	movs	r3, #3
    38da:	2400      	movs	r4, #0
    38dc:	4669      	mov	r1, sp
    38de:	9403      	str	r4, [sp, #12]
    38e0:	9302      	str	r3, [sp, #8]
    38e2:	f003 fdac 	bl	743e <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    38e6:	f04f 32ff 	mov.w	r2, #4294967295
    38ea:	f04f 33ff 	mov.w	r3, #4294967295
    38ee:	4628      	mov	r0, r5
    38f0:	f002 fdb2 	bl	6458 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    38f4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    38f6:	f003 fdeb 	bl	74d0 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    38fa:	4b0a      	ldr	r3, [pc, #40]	; (3924 <temp_nrf5_sample_fetch+0x74>)
    38fc:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    3900:	626a      	str	r2, [r5, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    3902:	2201      	movs	r2, #1
    3904:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    3906:	4630      	mov	r0, r6
    3908:	f002 fd44 	bl	6394 <z_impl_k_mutex_unlock>
	return 0;
    390c:	4620      	mov	r0, r4
}
    390e:	b004      	add	sp, #16
    3910:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    3912:	f06f 000a 	mvn.w	r0, #10
    3916:	e7fa      	b.n	390e <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
    3918:	f06f 0085 	mvn.w	r0, #133	; 0x85
    391c:	e7f7      	b.n	390e <temp_nrf5_sample_fetch+0x5e>
    391e:	bf00      	nop
    3920:	00003861 	.word	0x00003861
    3924:	4000c000 	.word	0x4000c000

00003928 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    3928:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    392a:	6904      	ldr	r4, [r0, #16]

	LOG_DBG("");

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    392c:	2000      	movs	r0, #0
    392e:	f7ff fcc5 	bl	32bc <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    3932:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    3934:	f04f 32ff 	mov.w	r2, #4294967295
    3938:	2100      	movs	r1, #0
    393a:	4620      	mov	r0, r4
    393c:	f004 fce0 	bl	8300 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
    3940:	f104 0010 	add.w	r0, r4, #16
    3944:	f004 fcd5 	bl	82f2 <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
    3948:	2200      	movs	r2, #0
    394a:	2101      	movs	r1, #1
    394c:	200c      	movs	r0, #12
    394e:	f7fe fe49 	bl	25e4 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    3952:	200c      	movs	r0, #12
    3954:	f7fe fe14 	bl	2580 <arch_irq_enable>
    p_reg->INTENSET = mask;
    3958:	4b02      	ldr	r3, [pc, #8]	; (3964 <temp_nrf5_init+0x3c>)
    395a:	2201      	movs	r2, #1
    395c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    3960:	2000      	movs	r0, #0
    3962:	bd10      	pop	{r4, pc}
    3964:	4000c000 	.word	0x4000c000

00003968 <spi_0_init>:
		      &spi_##idx##z_config,				       \
		      POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		       \
		      &spi_nrfx_driver_api)

#ifdef CONFIG_SPI_0_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(0);
    3968:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    396c:	b083      	sub	sp, #12
    396e:	4604      	mov	r4, r0
    3970:	af00      	add	r7, sp, #0
    3972:	6905      	ldr	r5, [r0, #16]
    3974:	2200      	movs	r2, #0
    3976:	2101      	movs	r1, #1
    3978:	2003      	movs	r0, #3
    397a:	f7fe fe33 	bl	25e4 <z_arm_irq_priority_set>
    397e:	6863      	ldr	r3, [r4, #4]
    3980:	6a5c      	ldr	r4, [r3, #36]	; 0x24
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    3982:	1d3a      	adds	r2, r7, #4
    3984:	2100      	movs	r1, #0
    3986:	4620      	mov	r0, r4
    3988:	f004 fabd 	bl	7f06 <pinctrl_lookup_state>
	if (ret < 0) {
    398c:	2800      	cmp	r0, #0
    398e:	db30      	blt.n	39f2 <spi_0_init+0x8a>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    3990:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    3992:	6822      	ldr	r2, [r4, #0]
    3994:	7919      	ldrb	r1, [r3, #4]
    3996:	6818      	ldr	r0, [r3, #0]
    3998:	f004 faea 	bl	7f70 <pinctrl_configure_pins>
    399c:	2800      	cmp	r0, #0
    399e:	db28      	blt.n	39f2 <spi_0_init+0x8a>
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    39a0:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    39a2:	2601      	movs	r6, #1
    39a4:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    39a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    39ac:	429c      	cmp	r4, r3
    39ae:	d304      	bcc.n	39ba <spi_0_init+0x52>
    39b0:	4628      	mov	r0, r5
    39b2:	f004 fa81 	bl	7eb8 <spi_context_unlock_unconditionally>
    39b6:	2000      	movs	r0, #0
    39b8:	e01b      	b.n	39f2 <spi_0_init+0x8a>
		if (!device_is_ready(cs_gpio->port)) {
    39ba:	6820      	ldr	r0, [r4, #0]
    39bc:	f004 fc6f 	bl	829e <z_device_is_ready>
    39c0:	b9d8      	cbnz	r0, 39fa <spi_0_init+0x92>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    39c2:	6823      	ldr	r3, [r4, #0]
    39c4:	481e      	ldr	r0, [pc, #120]	; (3a40 <spi_0_init+0xd8>)
    39c6:	6819      	ldr	r1, [r3, #0]
    39c8:	7923      	ldrb	r3, [r4, #4]
    39ca:	466c      	mov	r4, sp
    39cc:	b08a      	sub	sp, #40	; 0x28
    39ce:	466a      	mov	r2, sp
    39d0:	e9c2 0105 	strd	r0, r1, [r2, #20]
    39d4:	61d3      	str	r3, [r2, #28]
    39d6:	2302      	movs	r3, #2
    39d8:	f882 3020 	strb.w	r3, [r2, #32]
    39dc:	4b19      	ldr	r3, [pc, #100]	; (3a44 <spi_0_init+0xdc>)
    39de:	481a      	ldr	r0, [pc, #104]	; (3a48 <spi_0_init+0xe0>)
    39e0:	f842 3f10 	str.w	r3, [r2, #16]!
    39e4:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    39e8:	f004 fa2d 	bl	7e46 <z_log_msg2_static_create.constprop.0>
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
    39ec:	f06f 0012 	mvn.w	r0, #18
    39f0:	46a5      	mov	sp, r4
    39f2:	370c      	adds	r7, #12
    39f4:	46bd      	mov	sp, r7
    39f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return gpio_pin_configure(spec->port,
    39fa:	6820      	ldr	r0, [r4, #0]
    39fc:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
    39fe:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
    3a00:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
    3a04:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3a08:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    3a0c:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    3a0e:	bf54      	ite	pl
    3a10:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    3a14:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    3a18:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3a1c:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    3a20:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    3a22:	bf4c      	ite	mi
    3a24:	ea4c 0308 	orrmi.w	r3, ip, r8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    3a28:	ea2c 0308 	bicpl.w	r3, ip, r8
    3a2c:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
    3a30:	f8d9 3000 	ldr.w	r3, [r9]
    3a34:	4798      	blx	r3
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
    3a36:	2800      	cmp	r0, #0
    3a38:	dbdb      	blt.n	39f2 <spi_0_init+0x8a>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    3a3a:	3408      	adds	r4, #8
    3a3c:	e7b2      	b.n	39a4 <spi_0_init+0x3c>
    3a3e:	bf00      	nop
    3a40:	000092b7 	.word	0x000092b7
    3a44:	01000004 	.word	0x01000004
    3a48:	00008920 	.word	0x00008920

00003a4c <transfer_next_chunk>:
{
    3a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    3a4e:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    3a50:	6cab      	ldr	r3, [r5, #72]	; 0x48
		return ctx->rx_len;
    3a52:	6d2c      	ldr	r4, [r5, #80]	; 0x50
{
    3a54:	b085      	sub	sp, #20
	if (!ctx->tx_len) {
    3a56:	b97b      	cbnz	r3, 3a78 <transfer_next_chunk+0x2c>
	if (chunk_len > 0) {
    3a58:	b99c      	cbnz	r4, 3a82 <transfer_next_chunk+0x36>
	_spi_context_cs_control(ctx, on, false);
    3a5a:	2200      	movs	r2, #0
    3a5c:	4611      	mov	r1, r2
    3a5e:	4628      	mov	r0, r5
    3a60:	f004 fa08 	bl	7e74 <_spi_context_cs_control>
	ctx->sync_status = status;
    3a64:	632c      	str	r4, [r5, #48]	; 0x30
	z_impl_k_sem_give(sem);
    3a66:	f105 0020 	add.w	r0, r5, #32
    3a6a:	f002 fcd5 	bl	6418 <z_impl_k_sem_give>
	dev_data->busy = false;
    3a6e:	2300      	movs	r3, #0
    3a70:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
}
    3a74:	b005      	add	sp, #20
    3a76:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (!ctx->rx_len) {
    3a78:	2c00      	cmp	r4, #0
    3a7a:	d035      	beq.n	3ae8 <transfer_next_chunk+0x9c>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    3a7c:	429c      	cmp	r4, r3
    3a7e:	bf28      	it	cs
    3a80:	461c      	movcs	r4, r3
		const uint8_t *tx_buf = ctx->tx_buf;
    3a82:	6c69      	ldr	r1, [r5, #68]	; 0x44
	const struct spi_nrfx_config *dev_config = dev->config;
    3a84:	6846      	ldr	r6, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
    3a86:	b179      	cbz	r1, 3aa8 <transfer_next_chunk+0x5c>
    3a88:	b173      	cbz	r3, 3aa8 <transfer_next_chunk+0x5c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    3a8a:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    3a8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    3a92:	d009      	beq.n	3aa8 <transfer_next_chunk+0x5c>
			if (chunk_len > sizeof(dev_data->buffer)) {
    3a94:	2c08      	cmp	r4, #8
    3a96:	bf28      	it	cs
    3a98:	2408      	movcs	r4, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
    3a9a:	f105 075e 	add.w	r7, r5, #94	; 0x5e
    3a9e:	4622      	mov	r2, r4
    3aa0:	4638      	mov	r0, r7
    3aa2:	f004 f89e 	bl	7be2 <memcpy>
			tx_buf = dev_data->buffer;
    3aa6:	4639      	mov	r1, r7
		if (chunk_len > dev_config->max_chunk_len) {
    3aa8:	68b2      	ldr	r2, [r6, #8]
    3aaa:	6c6b      	ldr	r3, [r5, #68]	; 0x44
		xfer.p_tx_buffer = tx_buf;
    3aac:	9100      	str	r1, [sp, #0]
    3aae:	4294      	cmp	r4, r2
    3ab0:	bf28      	it	cs
    3ab2:	4614      	movcs	r4, r2
		dev_data->chunk_len = chunk_len;
    3ab4:	65ac      	str	r4, [r5, #88]	; 0x58
    3ab6:	b11b      	cbz	r3, 3ac0 <transfer_next_chunk+0x74>
    3ab8:	6cab      	ldr	r3, [r5, #72]	; 0x48
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    3aba:	2b00      	cmp	r3, #0
    3abc:	bf18      	it	ne
    3abe:	4623      	movne	r3, r4
    3ac0:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    3ac2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    3ac4:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    3ac6:	b11b      	cbz	r3, 3ad0 <transfer_next_chunk+0x84>
    3ac8:	6d2b      	ldr	r3, [r5, #80]	; 0x50
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    3aca:	2b00      	cmp	r3, #0
    3acc:	bf18      	it	ne
    3ace:	4623      	movne	r3, r4
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    3ad0:	2200      	movs	r2, #0
    3ad2:	4669      	mov	r1, sp
    3ad4:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    3ad6:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    3ad8:	f002 f810 	bl	5afc <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    3adc:	4b03      	ldr	r3, [pc, #12]	; (3aec <transfer_next_chunk+0xa0>)
    3ade:	4298      	cmp	r0, r3
    3ae0:	d0c8      	beq.n	3a74 <transfer_next_chunk+0x28>
			error = -EIO;
    3ae2:	f06f 0404 	mvn.w	r4, #4
    3ae6:	e7b8      	b.n	3a5a <transfer_next_chunk+0xe>
    3ae8:	461c      	mov	r4, r3
    3aea:	e7ca      	b.n	3a82 <transfer_next_chunk+0x36>
    3aec:	0bad0000 	.word	0x0bad0000

00003af0 <event_handler>:
{
    3af0:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    3af2:	7803      	ldrb	r3, [r0, #0]
{
    3af4:	b086      	sub	sp, #24
    3af6:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    3af8:	2b00      	cmp	r3, #0
    3afa:	d154      	bne.n	3ba6 <event_handler+0xb6>
	if (!ctx->tx_len) {
    3afc:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    3afe:	b163      	cbz	r3, 3b1a <event_handler+0x2a>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    3b00:	6d8a      	ldr	r2, [r1, #88]	; 0x58
	if (len > ctx->tx_len) {
    3b02:	429a      	cmp	r2, r3
    3b04:	d91e      	bls.n	3b44 <event_handler+0x54>
		LOG_ERR("Update exceeds current buffer");
    3b06:	4b29      	ldr	r3, [pc, #164]	; (3bac <event_handler+0xbc>)
    3b08:	9305      	str	r3, [sp, #20]
    3b0a:	4829      	ldr	r0, [pc, #164]	; (3bb0 <event_handler+0xc0>)
    3b0c:	2302      	movs	r3, #2
    3b0e:	aa04      	add	r2, sp, #16
    3b10:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3b14:	9304      	str	r3, [sp, #16]
    3b16:	f004 f996 	bl	7e46 <z_log_msg2_static_create.constprop.0>
	if (!ctx->rx_len) {
    3b1a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    3b1c:	b163      	cbz	r3, 3b38 <event_handler+0x48>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    3b1e:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (len > ctx->rx_len) {
    3b20:	429a      	cmp	r2, r3
    3b22:	d927      	bls.n	3b74 <event_handler+0x84>
		LOG_ERR("Update exceeds current buffer");
    3b24:	4b21      	ldr	r3, [pc, #132]	; (3bac <event_handler+0xbc>)
    3b26:	9305      	str	r3, [sp, #20]
    3b28:	4821      	ldr	r0, [pc, #132]	; (3bb0 <event_handler+0xc0>)
    3b2a:	2302      	movs	r3, #2
    3b2c:	aa04      	add	r2, sp, #16
    3b2e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3b32:	9304      	str	r3, [sp, #16]
    3b34:	f004 f987 	bl	7e46 <z_log_msg2_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
    3b38:	6d60      	ldr	r0, [r4, #84]	; 0x54
}
    3b3a:	b006      	add	sp, #24
    3b3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    3b40:	f7ff bf84 	b.w	3a4c <transfer_next_chunk>
	ctx->tx_len -= len;
    3b44:	1a9b      	subs	r3, r3, r2
    3b46:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
    3b48:	b973      	cbnz	r3, 3b68 <event_handler+0x78>
		++ctx->current_tx;
    3b4a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    3b4c:	3308      	adds	r3, #8
    3b4e:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
    3b50:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    3b52:	3b01      	subs	r3, #1
    3b54:	638b      	str	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    3b56:	f101 0248 	add.w	r2, r1, #72	; 0x48
    3b5a:	f104 0034 	add.w	r0, r4, #52	; 0x34
    3b5e:	3138      	adds	r1, #56	; 0x38
    3b60:	f004 f960 	bl	7e24 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    3b64:	6460      	str	r0, [r4, #68]	; 0x44
    3b66:	e7d8      	b.n	3b1a <event_handler+0x2a>
	} else if (ctx->tx_buf) {
    3b68:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    3b6a:	2b00      	cmp	r3, #0
    3b6c:	d0d5      	beq.n	3b1a <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
    3b6e:	4413      	add	r3, r2
    3b70:	644b      	str	r3, [r1, #68]	; 0x44
    3b72:	e7d2      	b.n	3b1a <event_handler+0x2a>
	ctx->rx_len -= len;
    3b74:	1a9b      	subs	r3, r3, r2
    3b76:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    3b78:	b97b      	cbnz	r3, 3b9a <event_handler+0xaa>
		++ctx->current_rx;
    3b7a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    3b7c:	3308      	adds	r3, #8
    3b7e:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    3b80:	6c23      	ldr	r3, [r4, #64]	; 0x40
    3b82:	3b01      	subs	r3, #1
    3b84:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    3b86:	f104 0250 	add.w	r2, r4, #80	; 0x50
    3b8a:	f104 0140 	add.w	r1, r4, #64	; 0x40
    3b8e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    3b92:	f004 f947 	bl	7e24 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    3b96:	64e0      	str	r0, [r4, #76]	; 0x4c
    3b98:	e7ce      	b.n	3b38 <event_handler+0x48>
	} else if (ctx->rx_buf) {
    3b9a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    3b9c:	2b00      	cmp	r3, #0
    3b9e:	d0cb      	beq.n	3b38 <event_handler+0x48>
		ctx->rx_buf += dfs * len;
    3ba0:	4413      	add	r3, r2
    3ba2:	64e3      	str	r3, [r4, #76]	; 0x4c
    3ba4:	e7c8      	b.n	3b38 <event_handler+0x48>
}
    3ba6:	b006      	add	sp, #24
    3ba8:	bd10      	pop	{r4, pc}
    3baa:	bf00      	nop
    3bac:	000092db 	.word	0x000092db
    3bb0:	00008920 	.word	0x00008920

00003bb4 <spi_nrfx_transceive>:
{
    3bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3bb8:	b08b      	sub	sp, #44	; 0x2c
    3bba:	af00      	add	r7, sp, #0
    3bbc:	e9c7 3202 	strd	r3, r2, [r7, #8]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    3bc0:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    3bc2:	6904      	ldr	r4, [r0, #16]
    3bc4:	049b      	lsls	r3, r3, #18
{
    3bc6:	4683      	mov	fp, r0
    3bc8:	460e      	mov	r6, r1
    3bca:	d434      	bmi.n	3c36 <spi_nrfx_transceive+0x82>
	return z_impl_k_sem_take(sem, timeout);
    3bcc:	f04f 32ff 	mov.w	r2, #4294967295
    3bd0:	f04f 33ff 	mov.w	r3, #4294967295
    3bd4:	f104 0010 	add.w	r0, r4, #16
    3bd8:	f002 fc3e 	bl	6458 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    3bdc:	6066      	str	r6, [r4, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    3bde:	f8db 8010 	ldr.w	r8, [fp, #16]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    3be2:	f898 305d 	ldrb.w	r3, [r8, #93]	; 0x5d
    3be6:	607b      	str	r3, [r7, #4]
    3be8:	b123      	cbz	r3, 3bf4 <spi_nrfx_transceive+0x40>
    3bea:	f8d8 3000 	ldr.w	r3, [r8]
    3bee:	429e      	cmp	r6, r3
    3bf0:	f000 80d2 	beq.w	3d98 <spi_nrfx_transceive+0x1e4>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    3bf4:	f8b6 c004 	ldrh.w	ip, [r6, #4]
    3bf8:	f41c 6f00 	tst.w	ip, #2048	; 0x800
    3bfc:	d022      	beq.n	3c44 <spi_nrfx_transceive+0x90>
		LOG_ERR("Half-duplex not supported");
    3bfe:	4b9b      	ldr	r3, [pc, #620]	; (3e6c <spi_nrfx_transceive+0x2b8>)
    3c00:	627b      	str	r3, [r7, #36]	; 0x24
    3c02:	489b      	ldr	r0, [pc, #620]	; (3e70 <spi_nrfx_transceive+0x2bc>)
    3c04:	2302      	movs	r3, #2
    3c06:	f107 0220 	add.w	r2, r7, #32
    3c0a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
    3c0e:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
    3c12:	623b      	str	r3, [r7, #32]
    3c14:	f004 f917 	bl	7e46 <z_log_msg2_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    3c18:	6823      	ldr	r3, [r4, #0]
    3c1a:	889b      	ldrh	r3, [r3, #4]
    3c1c:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    3c20:	d104      	bne.n	3c2c <spi_nrfx_transceive+0x78>
		ctx->owner = NULL;
    3c22:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    3c24:	f104 0010 	add.w	r0, r4, #16
    3c28:	f002 fbf6 	bl	6418 <z_impl_k_sem_give>
}
    3c2c:	4628      	mov	r0, r5
    3c2e:	372c      	adds	r7, #44	; 0x2c
    3c30:	46bd      	mov	sp, r7
    3c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    3c36:	69a3      	ldr	r3, [r4, #24]
    3c38:	2b00      	cmp	r3, #0
    3c3a:	d1c7      	bne.n	3bcc <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
    3c3c:	6863      	ldr	r3, [r4, #4]
    3c3e:	4299      	cmp	r1, r3
    3c40:	d1c4      	bne.n	3bcc <spi_nrfx_transceive+0x18>
    3c42:	e7cc      	b.n	3bde <spi_nrfx_transceive+0x2a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    3c44:	f01c 0f01 	tst.w	ip, #1
    3c48:	d015      	beq.n	3c76 <spi_nrfx_transceive+0xc2>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    3c4a:	f8db 3000 	ldr.w	r3, [fp]
    3c4e:	4989      	ldr	r1, [pc, #548]	; (3e74 <spi_nrfx_transceive+0x2c0>)
    3c50:	4887      	ldr	r0, [pc, #540]	; (3e70 <spi_nrfx_transceive+0x2bc>)
    3c52:	466d      	mov	r5, sp
    3c54:	b088      	sub	sp, #32
    3c56:	466a      	mov	r2, sp
    3c58:	e9c2 1305 	strd	r1, r3, [r2, #20]
    3c5c:	2302      	movs	r3, #2
    3c5e:	7713      	strb	r3, [r2, #28]
    3c60:	4b85      	ldr	r3, [pc, #532]	; (3e78 <spi_nrfx_transceive+0x2c4>)
    3c62:	f842 3f10 	str.w	r3, [r2, #16]!
    3c66:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
    3c6a:	f004 f8ec 	bl	7e46 <z_log_msg2_static_create.constprop.0>
    3c6e:	46ad      	mov	sp, r5
		return -EINVAL;
    3c70:	f06f 0515 	mvn.w	r5, #21
    3c74:	e7d0      	b.n	3c18 <spi_nrfx_transceive+0x64>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    3c76:	f01c 0f08 	tst.w	ip, #8
    3c7a:	d00b      	beq.n	3c94 <spi_nrfx_transceive+0xe0>
		LOG_ERR("Loopback mode is not supported");
    3c7c:	4b7f      	ldr	r3, [pc, #508]	; (3e7c <spi_nrfx_transceive+0x2c8>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    3c7e:	627b      	str	r3, [r7, #36]	; 0x24
    3c80:	487b      	ldr	r0, [pc, #492]	; (3e70 <spi_nrfx_transceive+0x2bc>)
    3c82:	2302      	movs	r3, #2
    3c84:	f107 0220 	add.w	r2, r7, #32
    3c88:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3c8c:	623b      	str	r3, [r7, #32]
    3c8e:	f004 f8da 	bl	7e46 <z_log_msg2_static_create.constprop.0>
    3c92:	e7ed      	b.n	3c70 <spi_nrfx_transceive+0xbc>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    3c94:	f3cc 1345 	ubfx	r3, ip, #5, #6
    3c98:	2b08      	cmp	r3, #8
    3c9a:	d001      	beq.n	3ca0 <spi_nrfx_transceive+0xec>
		LOG_ERR("Word sizes other than 8 bits are not supported");
    3c9c:	4b78      	ldr	r3, [pc, #480]	; (3e80 <spi_nrfx_transceive+0x2cc>)
    3c9e:	e7ee      	b.n	3c7e <spi_nrfx_transceive+0xca>
	if (spi_cfg->frequency < 125000) {
    3ca0:	6835      	ldr	r5, [r6, #0]
    3ca2:	4b78      	ldr	r3, [pc, #480]	; (3e84 <spi_nrfx_transceive+0x2d0>)
    3ca4:	429d      	cmp	r5, r3
    3ca6:	d801      	bhi.n	3cac <spi_nrfx_transceive+0xf8>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    3ca8:	4b77      	ldr	r3, [pc, #476]	; (3e88 <spi_nrfx_transceive+0x2d4>)
    3caa:	e7e8      	b.n	3c7e <spi_nrfx_transceive+0xca>
	const struct spi_nrfx_config *dev_config = dev->config;
    3cac:	f8db 9004 	ldr.w	r9, [fp, #4]
	uint32_t max_freq = dev_config->max_freq;
    3cb0:	f8d9 300c 	ldr.w	r3, [r9, #12]
    3cb4:	603b      	str	r3, [r7, #0]
	config = dev_config->def_config;
    3cb6:	f109 0a10 	add.w	sl, r9, #16
    3cba:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
    3cbe:	f107 0e10 	add.w	lr, r7, #16
    3cc2:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    3cc6:	f8da 3000 	ldr.w	r3, [sl]
    3cca:	f8ce 3000 	str.w	r3, [lr]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    3cce:	683b      	ldr	r3, [r7, #0]
    3cd0:	429d      	cmp	r5, r3
    3cd2:	bf28      	it	cs
    3cd4:	461d      	movcs	r5, r3
	if (frequency < 250000) {
    3cd6:	4b6d      	ldr	r3, [pc, #436]	; (3e8c <spi_nrfx_transceive+0x2d8>)
    3cd8:	429d      	cmp	r5, r3
    3cda:	d945      	bls.n	3d68 <spi_nrfx_transceive+0x1b4>
	} else if (frequency < 500000) {
    3cdc:	4b6c      	ldr	r3, [pc, #432]	; (3e90 <spi_nrfx_transceive+0x2dc>)
    3cde:	429d      	cmp	r5, r3
    3ce0:	d945      	bls.n	3d6e <spi_nrfx_transceive+0x1ba>
	} else if (frequency < 1000000) {
    3ce2:	4b6c      	ldr	r3, [pc, #432]	; (3e94 <spi_nrfx_transceive+0x2e0>)
    3ce4:	429d      	cmp	r5, r3
    3ce6:	d945      	bls.n	3d74 <spi_nrfx_transceive+0x1c0>
	} else if (frequency < 2000000) {
    3ce8:	4b6b      	ldr	r3, [pc, #428]	; (3e98 <spi_nrfx_transceive+0x2e4>)
    3cea:	429d      	cmp	r5, r3
    3cec:	d945      	bls.n	3d7a <spi_nrfx_transceive+0x1c6>
	} else if (frequency < 4000000) {
    3cee:	4b6b      	ldr	r3, [pc, #428]	; (3e9c <spi_nrfx_transceive+0x2e8>)
    3cf0:	429d      	cmp	r5, r3
    3cf2:	d945      	bls.n	3d80 <spi_nrfx_transceive+0x1cc>
		return NRF_SPIM_FREQ_8M;
    3cf4:	4b6a      	ldr	r3, [pc, #424]	; (3ea0 <spi_nrfx_transceive+0x2ec>)
    3cf6:	429d      	cmp	r5, r3
    3cf8:	bf34      	ite	cc
    3cfa:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
    3cfe:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    3d02:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    3d06:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    3d08:	f00c 0304 	and.w	r3, ip, #4
    3d0c:	d03b      	beq.n	3d86 <spi_nrfx_transceive+0x1d2>
			return NRF_SPIM_MODE_2;
    3d0e:	2b00      	cmp	r3, #0
    3d10:	bf14      	ite	ne
    3d12:	2303      	movne	r3, #3
    3d14:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    3d16:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
    3d18:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
    3d1a:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    3d1e:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
    3d22:	b12b      	cbz	r3, 3d30 <spi_nrfx_transceive+0x17c>
		nrfx_spim_uninit(&dev_config->spim);
    3d24:	4648      	mov	r0, r9
    3d26:	f001 fea1 	bl	5a6c <nrfx_spim_uninit>
		dev_data->initialized = false;
    3d2a:	2300      	movs	r3, #0
    3d2c:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
	result = nrfx_spim_init(&dev_config->spim, &config,
    3d30:	4643      	mov	r3, r8
    3d32:	4a5c      	ldr	r2, [pc, #368]	; (3ea4 <spi_nrfx_transceive+0x2f0>)
    3d34:	f107 0110 	add.w	r1, r7, #16
    3d38:	4648      	mov	r0, r9
    3d3a:	f001 fdef 	bl	591c <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    3d3e:	4b5a      	ldr	r3, [pc, #360]	; (3ea8 <spi_nrfx_transceive+0x2f4>)
    3d40:	4298      	cmp	r0, r3
    3d42:	d024      	beq.n	3d8e <spi_nrfx_transceive+0x1da>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    3d44:	466d      	mov	r5, sp
    3d46:	4b59      	ldr	r3, [pc, #356]	; (3eac <spi_nrfx_transceive+0x2f8>)
    3d48:	b088      	sub	sp, #32
    3d4a:	466a      	mov	r2, sp
    3d4c:	e9c2 3005 	strd	r3, r0, [r2, #20]
    3d50:	2303      	movs	r3, #3
    3d52:	f842 3f10 	str.w	r3, [r2, #16]!
    3d56:	4846      	ldr	r0, [pc, #280]	; (3e70 <spi_nrfx_transceive+0x2bc>)
    3d58:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3d5c:	f004 f873 	bl	7e46 <z_log_msg2_static_create.constprop.0>
    3d60:	46ad      	mov	sp, r5
		return -EIO;
    3d62:	f06f 0504 	mvn.w	r5, #4
    3d66:	e757      	b.n	3c18 <spi_nrfx_transceive+0x64>
		return NRF_SPIM_FREQ_125K;
    3d68:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    3d6c:	e7c9      	b.n	3d02 <spi_nrfx_transceive+0x14e>
		return NRF_SPIM_FREQ_250K;
    3d6e:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    3d72:	e7c6      	b.n	3d02 <spi_nrfx_transceive+0x14e>
		return NRF_SPIM_FREQ_500K;
    3d74:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    3d78:	e7c3      	b.n	3d02 <spi_nrfx_transceive+0x14e>
		return NRF_SPIM_FREQ_1M;
    3d7a:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    3d7e:	e7c0      	b.n	3d02 <spi_nrfx_transceive+0x14e>
		return NRF_SPIM_FREQ_2M;
    3d80:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    3d84:	e7bd      	b.n	3d02 <spi_nrfx_transceive+0x14e>
			return NRF_SPIM_MODE_0;
    3d86:	3b00      	subs	r3, #0
    3d88:	bf18      	it	ne
    3d8a:	2301      	movne	r3, #1
    3d8c:	e7c3      	b.n	3d16 <spi_nrfx_transceive+0x162>
	dev_data->initialized = true;
    3d8e:	2301      	movs	r3, #1
    3d90:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
	ctx->config = spi_cfg;
    3d94:	f8c8 6000 	str.w	r6, [r8]
		dev_data->busy = true;
    3d98:	2301      	movs	r3, #1
    3d9a:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    3d9e:	68fb      	ldr	r3, [r7, #12]
    3da0:	2b00      	cmp	r3, #0
    3da2:	d152      	bne.n	3e4a <spi_nrfx_transceive+0x296>
    3da4:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    3da6:	461a      	mov	r2, r3
    3da8:	63a2      	str	r2, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    3daa:	f104 0138 	add.w	r1, r4, #56	; 0x38
    3dae:	f104 0248 	add.w	r2, r4, #72	; 0x48
    3db2:	f104 0034 	add.w	r0, r4, #52	; 0x34
    3db6:	f004 f835 	bl	7e24 <spi_context_get_next_buf.constprop.0>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    3dba:	68bb      	ldr	r3, [r7, #8]
	ctx->tx_buf = (const uint8_t *)
    3dbc:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    3dbe:	2b00      	cmp	r3, #0
    3dc0:	d14a      	bne.n	3e58 <spi_nrfx_transceive+0x2a4>
    3dc2:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    3dc4:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    3dc6:	f104 0250 	add.w	r2, r4, #80	; 0x50
    3dca:	f104 0140 	add.w	r1, r4, #64	; 0x40
    3dce:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    3dd2:	f004 f827 	bl	7e24 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    3dd6:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
    3dd8:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
    3dda:	64e0      	str	r0, [r4, #76]	; 0x4c
	_spi_context_cs_control(ctx, on, false);
    3ddc:	2101      	movs	r1, #1
    3dde:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    3de0:	6326      	str	r6, [r4, #48]	; 0x30
	_spi_context_cs_control(ctx, on, false);
    3de2:	f004 f847 	bl	7e74 <_spi_context_cs_control>
		transfer_next_chunk(dev);
    3de6:	4658      	mov	r0, fp
    3de8:	f7ff fe30 	bl	3a4c <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    3dec:	6d25      	ldr	r5, [r4, #80]	; 0x50
    3dee:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			     ctx->config->frequency;
    3df0:	46a0      	mov	r8, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    3df2:	429d      	cmp	r5, r3
    3df4:	bf38      	it	cc
    3df6:	461d      	movcc	r5, r3
    3df8:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
    3dfc:	435d      	muls	r5, r3
			     ctx->config->frequency;
    3dfe:	f858 3b20 	ldr.w	r3, [r8], #32
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    3e02:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    3e06:	681b      	ldr	r3, [r3, #0]
    3e08:	fbb5 f5f3 	udiv	r5, r5, r3
    3e0c:	4631      	mov	r1, r6
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    3e0e:	35c8      	adds	r5, #200	; 0xc8
    3e10:	f240 30e7 	movw	r0, #999	; 0x3e7
    3e14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3e18:	2300      	movs	r3, #0
    3e1a:	fbe5 010c 	umlal	r0, r1, r5, ip
    3e1e:	f7fc f95f 	bl	e0 <__aeabi_uldivmod>
    3e22:	4602      	mov	r2, r0
    3e24:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    3e26:	4640      	mov	r0, r8
    3e28:	f002 fb16 	bl	6458 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
    3e2c:	b1e0      	cbz	r0, 3e68 <spi_nrfx_transceive+0x2b4>
		LOG_ERR("Timeout waiting for transfer complete");
    3e2e:	4b20      	ldr	r3, [pc, #128]	; (3eb0 <spi_nrfx_transceive+0x2fc>)
    3e30:	627b      	str	r3, [r7, #36]	; 0x24
    3e32:	480f      	ldr	r0, [pc, #60]	; (3e70 <spi_nrfx_transceive+0x2bc>)
    3e34:	2302      	movs	r3, #2
    3e36:	f107 0220 	add.w	r2, r7, #32
    3e3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3e3e:	623b      	str	r3, [r7, #32]
		return -ETIMEDOUT;
    3e40:	f06f 0573 	mvn.w	r5, #115	; 0x73
		LOG_ERR("Timeout waiting for transfer complete");
    3e44:	f003 ffff 	bl	7e46 <z_log_msg2_static_create.constprop.0>
		return -ETIMEDOUT;
    3e48:	e6e6      	b.n	3c18 <spi_nrfx_transceive+0x64>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    3e4a:	68fb      	ldr	r3, [r7, #12]
    3e4c:	681a      	ldr	r2, [r3, #0]
    3e4e:	6362      	str	r2, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    3e50:	2a00      	cmp	r2, #0
    3e52:	d0a9      	beq.n	3da8 <spi_nrfx_transceive+0x1f4>
    3e54:	685a      	ldr	r2, [r3, #4]
    3e56:	e7a7      	b.n	3da8 <spi_nrfx_transceive+0x1f4>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    3e58:	68bb      	ldr	r3, [r7, #8]
    3e5a:	681b      	ldr	r3, [r3, #0]
    3e5c:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    3e5e:	2b00      	cmp	r3, #0
    3e60:	d0b0      	beq.n	3dc4 <spi_nrfx_transceive+0x210>
    3e62:	68bb      	ldr	r3, [r7, #8]
    3e64:	685b      	ldr	r3, [r3, #4]
    3e66:	e7ad      	b.n	3dc4 <spi_nrfx_transceive+0x210>
	status = ctx->sync_status;
    3e68:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return status;
    3e6a:	e6d5      	b.n	3c18 <spi_nrfx_transceive+0x64>
    3e6c:	000092f9 	.word	0x000092f9
    3e70:	00008920 	.word	0x00008920
    3e74:	00009313 	.word	0x00009313
    3e78:	01000003 	.word	0x01000003
    3e7c:	00009335 	.word	0x00009335
    3e80:	00009354 	.word	0x00009354
    3e84:	0001e847 	.word	0x0001e847
    3e88:	00009383 	.word	0x00009383
    3e8c:	0003d08f 	.word	0x0003d08f
    3e90:	0007a11f 	.word	0x0007a11f
    3e94:	000f423f 	.word	0x000f423f
    3e98:	001e847f 	.word	0x001e847f
    3e9c:	003d08ff 	.word	0x003d08ff
    3ea0:	007a1200 	.word	0x007a1200
    3ea4:	00003af1 	.word	0x00003af1
    3ea8:	0bad0000 	.word	0x0bad0000
    3eac:	000093b4 	.word	0x000093b4
    3eb0:	000093db 	.word	0x000093db

00003eb4 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    3eb4:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    3eb6:	2301      	movs	r3, #1
    3eb8:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3eba:	4a11      	ldr	r2, [pc, #68]	; (3f00 <compare_int_lock+0x4c>)
    3ebc:	f3bf 8f5b 	dmb	ish
    3ec0:	43dc      	mvns	r4, r3
    3ec2:	e852 1f00 	ldrex	r1, [r2]
    3ec6:	ea01 0c04 	and.w	ip, r1, r4
    3eca:	e842 ce00 	strex	lr, ip, [r2]
    3ece:	f1be 0f00 	cmp.w	lr, #0
    3ed2:	d1f6      	bne.n	3ec2 <compare_int_lock+0xe>
    3ed4:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3ed8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    3edc:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    3ee0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    3ee4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    3ee8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    3eec:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    3ef0:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    3ef4:	420b      	tst	r3, r1
}
    3ef6:	bf14      	ite	ne
    3ef8:	2001      	movne	r0, #1
    3efa:	2000      	moveq	r0, #0
    3efc:	bd10      	pop	{r4, pc}
    3efe:	bf00      	nop
    3f00:	20000a08 	.word	0x20000a08

00003f04 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3f04:	4919      	ldr	r1, [pc, #100]	; (3f6c <sys_clock_timeout_handler+0x68>)
{
    3f06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f08:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    3f0a:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3f0e:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    3f10:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    3f14:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    3f18:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    3f1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    3f1e:	d222      	bcs.n	3f66 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    3f20:	4b13      	ldr	r3, [pc, #76]	; (3f70 <sys_clock_timeout_handler+0x6c>)
    3f22:	681b      	ldr	r3, [r3, #0]
    3f24:	0a1a      	lsrs	r2, r3, #8
    3f26:	061b      	lsls	r3, r3, #24
    3f28:	195e      	adds	r6, r3, r5
    3f2a:	4b12      	ldr	r3, [pc, #72]	; (3f74 <sys_clock_timeout_handler+0x70>)
    3f2c:	f142 0700 	adc.w	r7, r2, #0
    3f30:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    3f34:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    3f36:	f003 f845 	bl	6fc4 <sys_clock_announce>
    return p_reg->CC[ch];
    3f3a:	00a3      	lsls	r3, r4, #2
    3f3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    3f40:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    3f44:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    3f48:	42aa      	cmp	r2, r5
    3f4a:	d10b      	bne.n	3f64 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    3f4c:	b91e      	cbnz	r6, 3f56 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    3f4e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    3f52:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    3f56:	4b08      	ldr	r3, [pc, #32]	; (3f78 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3f58:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    3f5c:	fa00 f404 	lsl.w	r4, r0, r4
    3f60:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    3f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    3f66:	2600      	movs	r6, #0
    3f68:	e7e5      	b.n	3f36 <sys_clock_timeout_handler+0x32>
    3f6a:	bf00      	nop
    3f6c:	20000638 	.word	0x20000638
    3f70:	20000a0c 	.word	0x20000a0c
    3f74:	20000620 	.word	0x20000620
    3f78:	40011000 	.word	0x40011000

00003f7c <compare_int_unlock>:
	if (key) {
    3f7c:	b319      	cbz	r1, 3fc6 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3f7e:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    3f82:	2301      	movs	r3, #1
    3f84:	4a10      	ldr	r2, [pc, #64]	; (3fc8 <compare_int_unlock+0x4c>)
    3f86:	4083      	lsls	r3, r0
    3f88:	e852 1f00 	ldrex	r1, [r2]
    3f8c:	4319      	orrs	r1, r3
    3f8e:	e842 1c00 	strex	ip, r1, [r2]
    3f92:	f1bc 0f00 	cmp.w	ip, #0
    3f96:	d1f7      	bne.n	3f88 <compare_int_unlock+0xc>
    3f98:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    3f9c:	4a0b      	ldr	r2, [pc, #44]	; (3fcc <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    3f9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    3fa2:	4083      	lsls	r3, r0
    3fa4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3fa8:	4b09      	ldr	r3, [pc, #36]	; (3fd0 <compare_int_unlock+0x54>)
    3faa:	f3bf 8f5b 	dmb	ish
    3fae:	681b      	ldr	r3, [r3, #0]
    3fb0:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    3fb4:	fa23 f000 	lsr.w	r0, r3, r0
    3fb8:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    3fba:	bf42      	ittt	mi
    3fbc:	4b05      	ldrmi	r3, [pc, #20]	; (3fd4 <compare_int_unlock+0x58>)
    3fbe:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    3fc2:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    3fc6:	4770      	bx	lr
    3fc8:	20000a08 	.word	0x20000a08
    3fcc:	40011000 	.word	0x40011000
    3fd0:	20000a04 	.word	0x20000a04
    3fd4:	e000e100 	.word	0xe000e100

00003fd8 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    3fd8:	4b0d      	ldr	r3, [pc, #52]	; (4010 <z_nrf_rtc_timer_read+0x38>)
    3fda:	6818      	ldr	r0, [r3, #0]
    3fdc:	0a01      	lsrs	r1, r0, #8
    3fde:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    3fe0:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    3fe4:	4b0b      	ldr	r3, [pc, #44]	; (4014 <z_nrf_rtc_timer_read+0x3c>)
    3fe6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    3fea:	1818      	adds	r0, r3, r0
    3fec:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    3ff0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3ff4:	d20a      	bcs.n	400c <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    3ff6:	4b08      	ldr	r3, [pc, #32]	; (4018 <z_nrf_rtc_timer_read+0x40>)
    3ff8:	e9d3 2300 	ldrd	r2, r3, [r3]
    3ffc:	4290      	cmp	r0, r2
    3ffe:	eb71 0303 	sbcs.w	r3, r1, r3
    4002:	d203      	bcs.n	400c <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    4004:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4008:	f141 0100 	adc.w	r1, r1, #0
}
    400c:	4770      	bx	lr
    400e:	bf00      	nop
    4010:	20000a0c 	.word	0x20000a0c
    4014:	40011000 	.word	0x40011000
    4018:	20000620 	.word	0x20000620

0000401c <compare_set>:
{
    401c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4020:	b085      	sub	sp, #20
    4022:	4616      	mov	r6, r2
    4024:	4698      	mov	r8, r3
    4026:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    4028:	f7ff ff44 	bl	3eb4 <compare_int_lock>
    402c:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    402e:	f7ff ffd3 	bl	3fd8 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    4032:	42b0      	cmp	r0, r6
    4034:	eb71 0308 	sbcs.w	r3, r1, r8
    4038:	d278      	bcs.n	412c <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    403a:	4b46      	ldr	r3, [pc, #280]	; (4154 <compare_set+0x138>)
    403c:	1a30      	subs	r0, r6, r0
    403e:	eb68 0101 	sbc.w	r1, r8, r1
    4042:	4298      	cmp	r0, r3
    4044:	f171 0300 	sbcs.w	r3, r1, #0
    4048:	f080 8081 	bcs.w	414e <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    404c:	4b42      	ldr	r3, [pc, #264]	; (4158 <compare_set+0x13c>)
    404e:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    4052:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    4056:	45d8      	cmp	r8, fp
    4058:	bf08      	it	eq
    405a:	4556      	cmpeq	r6, sl
    405c:	d051      	beq.n	4102 <compare_set+0xe6>
    405e:	ea4f 0985 	mov.w	r9, r5, lsl #2
    4062:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    4066:	f105 0750 	add.w	r7, r5, #80	; 0x50
    406a:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    406e:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4070:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    4074:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4078:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    407a:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    407e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4082:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    4084:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    4088:	4b34      	ldr	r3, [pc, #208]	; (415c <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    408a:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    408e:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    4090:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    4094:	1a40      	subs	r0, r0, r1
    4096:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    409a:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    409e:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    40a0:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    40a4:	d107      	bne.n	40b6 <compare_set+0x9a>
    40a6:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    40aa:	2013      	movs	r0, #19
    40ac:	f004 fac4 	bl	8638 <z_impl_k_busy_wait>
    40b0:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    40b4:	4b29      	ldr	r3, [pc, #164]	; (415c <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    40b6:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    40ba:	eba4 000c 	sub.w	r0, r4, ip
    40be:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    40c2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    40c6:	bf88      	it	hi
    40c8:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    40ca:	2000      	movs	r0, #0
    40cc:	6038      	str	r0, [r7, #0]
    40ce:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    40d0:	9801      	ldr	r0, [sp, #4]
    40d2:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    40d6:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    40da:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    40de:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    40e2:	4281      	cmp	r1, r0
    40e4:	d006      	beq.n	40f4 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    40e6:	1a20      	subs	r0, r4, r0
    40e8:	3802      	subs	r0, #2
    40ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    40ee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    40f2:	d819      	bhi.n	4128 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    40f4:	1aa4      	subs	r4, r4, r2
    40f6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    40fa:	eb14 0a06 	adds.w	sl, r4, r6
    40fe:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    4102:	4915      	ldr	r1, [pc, #84]	; (4158 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    4104:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    4106:	012b      	lsls	r3, r5, #4
    4108:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    410c:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    4110:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    4112:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    4114:	6053      	str	r3, [r2, #4]
	return ret;
    4116:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    4118:	4628      	mov	r0, r5
    411a:	9900      	ldr	r1, [sp, #0]
    411c:	f7ff ff2e 	bl	3f7c <compare_int_unlock>
}
    4120:	4620      	mov	r0, r4
    4122:	b005      	add	sp, #20
    4124:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    4128:	4620      	mov	r0, r4
    412a:	e7b1      	b.n	4090 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    412c:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    412e:	4a0c      	ldr	r2, [pc, #48]	; (4160 <compare_set+0x144>)
    4130:	f3bf 8f5b 	dmb	ish
    4134:	40ab      	lsls	r3, r5
    4136:	e852 1f00 	ldrex	r1, [r2]
    413a:	4319      	orrs	r1, r3
    413c:	e842 1000 	strex	r0, r1, [r2]
    4140:	2800      	cmp	r0, #0
    4142:	d1f8      	bne.n	4136 <compare_set+0x11a>
    4144:	f3bf 8f5b 	dmb	ish
    4148:	46b2      	mov	sl, r6
    414a:	46c3      	mov	fp, r8
    414c:	e7d9      	b.n	4102 <compare_set+0xe6>
			return -EINVAL;
    414e:	f06f 0415 	mvn.w	r4, #21
    4152:	e7e1      	b.n	4118 <compare_set+0xfc>
    4154:	01000001 	.word	0x01000001
    4158:	20000628 	.word	0x20000628
    415c:	40011000 	.word	0x40011000
    4160:	20000a04 	.word	0x20000a04

00004164 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    4164:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    4166:	4b19      	ldr	r3, [pc, #100]	; (41cc <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    4168:	4d19      	ldr	r5, [pc, #100]	; (41d0 <sys_clock_driver_init+0x6c>)
    416a:	2400      	movs	r4, #0
    416c:	f04f 30ff 	mov.w	r0, #4294967295
    4170:	f04f 31ff 	mov.w	r1, #4294967295
    4174:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    4178:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    417c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4180:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4184:	4b13      	ldr	r3, [pc, #76]	; (41d4 <sys_clock_driver_init+0x70>)
    4186:	2602      	movs	r6, #2
    4188:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    418c:	2101      	movs	r1, #1
    418e:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    4192:	2011      	movs	r0, #17
    4194:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    4198:	4622      	mov	r2, r4
    419a:	f7fe fa23 	bl	25e4 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    419e:	2011      	movs	r0, #17
    41a0:	f7fe f9ee 	bl	2580 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    41a4:	4a0c      	ldr	r2, [pc, #48]	; (41d8 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    41a6:	2301      	movs	r3, #1
    41a8:	60ab      	str	r3, [r5, #8]
    41aa:	602b      	str	r3, [r5, #0]
    41ac:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    41ae:	4b0b      	ldr	r3, [pc, #44]	; (41dc <sys_clock_driver_init+0x78>)
    41b0:	4a0b      	ldr	r2, [pc, #44]	; (41e0 <sys_clock_driver_init+0x7c>)
    41b2:	9300      	str	r3, [sp, #0]
    41b4:	9401      	str	r4, [sp, #4]
    41b6:	2300      	movs	r3, #0
    41b8:	4620      	mov	r0, r4
    41ba:	f7ff ff2f 	bl	401c <compare_set>

	z_nrf_clock_control_lf_on(mode);
    41be:	4630      	mov	r0, r6
    41c0:	f7ff f884 	bl	32cc <z_nrf_clock_control_lf_on>

	return 0;
}
    41c4:	4620      	mov	r0, r4
    41c6:	b002      	add	sp, #8
    41c8:	bd70      	pop	{r4, r5, r6, pc}
    41ca:	bf00      	nop
    41cc:	20000628 	.word	0x20000628
    41d0:	40011000 	.word	0x40011000
    41d4:	e000e100 	.word	0xe000e100
    41d8:	20000a08 	.word	0x20000a08
    41dc:	00003f05 	.word	0x00003f05
    41e0:	007fffff 	.word	0x007fffff

000041e4 <rtc_nrf_isr>:
{
    41e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    41e8:	4c35      	ldr	r4, [pc, #212]	; (42c0 <rtc_nrf_isr+0xdc>)
    41ea:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    41ee:	079a      	lsls	r2, r3, #30
    41f0:	d50b      	bpl.n	420a <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    41f2:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    41f6:	b143      	cbz	r3, 420a <rtc_nrf_isr+0x26>
		overflow_cnt++;
    41f8:	4a32      	ldr	r2, [pc, #200]	; (42c4 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    41fa:	2300      	movs	r3, #0
    41fc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    4200:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    4204:	6813      	ldr	r3, [r2, #0]
    4206:	3301      	adds	r3, #1
    4208:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    420a:	f04f 0320 	mov.w	r3, #32
    420e:	f3ef 8211 	mrs	r2, BASEPRI
    4212:	f383 8812 	msr	BASEPRI_MAX, r3
    4216:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    421a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    421e:	03db      	lsls	r3, r3, #15
    4220:	d512      	bpl.n	4248 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4222:	f3bf 8f5b 	dmb	ish
    4226:	4b28      	ldr	r3, [pc, #160]	; (42c8 <rtc_nrf_isr+0xe4>)
    4228:	e853 1f00 	ldrex	r1, [r3]
    422c:	f021 0001 	bic.w	r0, r1, #1
    4230:	e843 0600 	strex	r6, r0, [r3]
    4234:	2e00      	cmp	r6, #0
    4236:	d1f7      	bne.n	4228 <rtc_nrf_isr+0x44>
    4238:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    423c:	2900      	cmp	r1, #0
    423e:	d136      	bne.n	42ae <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    4240:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    4244:	2b00      	cmp	r3, #0
    4246:	d132      	bne.n	42ae <rtc_nrf_isr+0xca>
{
    4248:	2300      	movs	r3, #0
	__asm__ volatile(
    424a:	f382 8811 	msr	BASEPRI, r2
    424e:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    4252:	b34b      	cbz	r3, 42a8 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    4254:	f7ff fec0 	bl	3fd8 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    4258:	f04f 0320 	mov.w	r3, #32
    425c:	f3ef 8c11 	mrs	ip, BASEPRI
    4260:	f383 8812 	msr	BASEPRI_MAX, r3
    4264:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    4268:	4b18      	ldr	r3, [pc, #96]	; (42cc <rtc_nrf_isr+0xe8>)
    426a:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    426e:	42b0      	cmp	r0, r6
    4270:	eb71 0207 	sbcs.w	r2, r1, r7
    4274:	f04f 0200 	mov.w	r2, #0
    4278:	d320      	bcc.n	42bc <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    427a:	f04f 38ff 	mov.w	r8, #4294967295
    427e:	f04f 39ff 	mov.w	r9, #4294967295
			user_context = cc_data[chan].user_context;
    4282:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    4286:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    428a:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    428c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4290:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    4294:	f38c 8811 	msr	BASEPRI, ip
    4298:	f3bf 8f6f 	isb	sy
		if (handler) {
    429c:	b121      	cbz	r1, 42a8 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    429e:	9500      	str	r5, [sp, #0]
    42a0:	4632      	mov	r2, r6
    42a2:	463b      	mov	r3, r7
    42a4:	2000      	movs	r0, #0
    42a6:	4788      	blx	r1
}
    42a8:	b003      	add	sp, #12
    42aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    42ae:	2300      	movs	r3, #0
    42b0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    42b4:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    42b8:	2301      	movs	r3, #1
}
    42ba:	e7c6      	b.n	424a <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    42bc:	4611      	mov	r1, r2
    42be:	e7e9      	b.n	4294 <rtc_nrf_isr+0xb0>
    42c0:	40011000 	.word	0x40011000
    42c4:	20000a0c 	.word	0x20000a0c
    42c8:	20000a04 	.word	0x20000a04
    42cc:	20000628 	.word	0x20000628

000042d0 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    42d0:	1c43      	adds	r3, r0, #1
{
    42d2:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    42d4:	d021      	beq.n	431a <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    42d6:	2801      	cmp	r0, #1
    42d8:	dd21      	ble.n	431e <sys_clock_set_timeout+0x4e>
    42da:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    42de:	da20      	bge.n	4322 <sys_clock_set_timeout+0x52>
    42e0:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    42e2:	f7ff fe79 	bl	3fd8 <z_nrf_rtc_timer_read>
    42e6:	4b10      	ldr	r3, [pc, #64]	; (4328 <sys_clock_set_timeout+0x58>)
    42e8:	e9d3 1300 	ldrd	r1, r3, [r3]
    42ec:	1a40      	subs	r0, r0, r1
		ticks = 0;
    42ee:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    42f2:	bf28      	it	cs
    42f4:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    42f6:	3001      	adds	r0, #1
    42f8:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    42fa:	480c      	ldr	r0, [pc, #48]	; (432c <sys_clock_set_timeout+0x5c>)
    42fc:	4282      	cmp	r2, r0
    42fe:	bf28      	it	cs
    4300:	4602      	movcs	r2, r0
    4302:	1852      	adds	r2, r2, r1
    4304:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4308:	4909      	ldr	r1, [pc, #36]	; (4330 <sys_clock_set_timeout+0x60>)
    430a:	9001      	str	r0, [sp, #4]
    430c:	9100      	str	r1, [sp, #0]
    430e:	f143 0300 	adc.w	r3, r3, #0
    4312:	f7ff fe83 	bl	401c <compare_set>
}
    4316:	b002      	add	sp, #8
    4318:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    431a:	4804      	ldr	r0, [pc, #16]	; (432c <sys_clock_set_timeout+0x5c>)
    431c:	e7e0      	b.n	42e0 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    431e:	2400      	movs	r4, #0
    4320:	e7df      	b.n	42e2 <sys_clock_set_timeout+0x12>
    4322:	4c02      	ldr	r4, [pc, #8]	; (432c <sys_clock_set_timeout+0x5c>)
    4324:	e7dd      	b.n	42e2 <sys_clock_set_timeout+0x12>
    4326:	bf00      	nop
    4328:	20000638 	.word	0x20000638
    432c:	007fffff 	.word	0x007fffff
    4330:	00003f05 	.word	0x00003f05

00004334 <sys_clock_elapsed>:
{
    4334:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    4336:	f7ff fe4f 	bl	3fd8 <z_nrf_rtc_timer_read>
    433a:	4b02      	ldr	r3, [pc, #8]	; (4344 <sys_clock_elapsed+0x10>)
    433c:	681b      	ldr	r3, [r3, #0]
}
    433e:	1ac0      	subs	r0, r0, r3
    4340:	bd08      	pop	{r3, pc}
    4342:	bf00      	nop
    4344:	20000638 	.word	0x20000638

00004348 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    4348:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    434a:	f7fd fc33 	bl	1bb4 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    434e:	4b07      	ldr	r3, [pc, #28]	; (436c <k_sys_fatal_error_handler+0x24>)
    4350:	9305      	str	r3, [sp, #20]
    4352:	2302      	movs	r3, #2
    4354:	9304      	str	r3, [sp, #16]
    4356:	4806      	ldr	r0, [pc, #24]	; (4370 <k_sys_fatal_error_handler+0x28>)
    4358:	2300      	movs	r3, #0
    435a:	aa04      	add	r2, sp, #16
    435c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4360:	f003 fbc2 	bl	7ae8 <z_impl_z_log_msg2_static_create>
		sys_arch_reboot(0);
    4364:	2000      	movs	r0, #0
    4366:	f7fe fe89 	bl	307c <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    436a:	bf00      	nop
    436c:	00009415 	.word	0x00009415
    4370:	000088e0 	.word	0x000088e0

00004374 <RADIO_IRQHandler>:
	irq_unlock(key);
}

static void radio_irq_handler(void)
{
	if (NRF_RADIO->EVENTS_READY &&
    4374:	4b19      	ldr	r3, [pc, #100]	; (43dc <RADIO_IRQHandler+0x68>)
			event_handler(&event);
		}
	}
}

ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    4376:	4668      	mov	r0, sp
    4378:	f020 0107 	bic.w	r1, r0, #7
	if (NRF_RADIO->EVENTS_READY &&
    437c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    4380:	468d      	mov	sp, r1
    4382:	b501      	push	{r0, lr}
	if (NRF_RADIO->EVENTS_READY &&
    4384:	b14a      	cbz	r2, 439a <RADIO_IRQHandler+0x26>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_READY_Msk)) {
    4386:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_READY &&
    438a:	07d0      	lsls	r0, r2, #31
		NRF_RADIO->EVENTS_READY = 0;
    438c:	bf41      	itttt	mi
    438e:	2200      	movmi	r2, #0
    4390:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
		ESB_SYS_TIMER->TASKS_START;
    4394:	f503 4310 	addmi.w	r3, r3, #36864	; 0x9000
    4398:	681b      	ldrmi	r3, [r3, #0]
	if (NRF_RADIO->EVENTS_END &&
    439a:	4b10      	ldr	r3, [pc, #64]	; (43dc <RADIO_IRQHandler+0x68>)
    439c:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    43a0:	b132      	cbz	r2, 43b0 <RADIO_IRQHandler+0x3c>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_END_Msk)) {
    43a2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_END &&
    43a6:	0711      	lsls	r1, r2, #28
		NRF_RADIO->EVENTS_END = 0;
    43a8:	bf44      	itt	mi
    43aa:	2200      	movmi	r2, #0
    43ac:	f8c3 210c 	strmi.w	r2, [r3, #268]	; 0x10c
	if (NRF_RADIO->EVENTS_DISABLED &&
    43b0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    43b4:	b152      	cbz	r2, 43cc <RADIO_IRQHandler+0x58>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_DISABLED_Msk)) {
    43b6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_DISABLED &&
    43ba:	06d2      	lsls	r2, r2, #27
    43bc:	d506      	bpl.n	43cc <RADIO_IRQHandler+0x58>
		NRF_RADIO->EVENTS_DISABLED = 0;
    43be:	2200      	movs	r2, #0
    43c0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		if (on_radio_disabled) {
    43c4:	4b06      	ldr	r3, [pc, #24]	; (43e0 <RADIO_IRQHandler+0x6c>)
    43c6:	681b      	ldr	r3, [r3, #0]
    43c8:	b103      	cbz	r3, 43cc <RADIO_IRQHandler+0x58>
			on_radio_disabled();
    43ca:	4798      	blx	r3
{
	radio_irq_handler();

	ISR_DIRECT_PM();
    43cc:	f7fe f922 	bl	2614 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
    43d0:	f7fe fa04 	bl	27dc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    43d4:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    43d8:	4685      	mov	sp, r0
    43da:	4770      	bx	lr
    43dc:	40001000 	.word	0x40001000
    43e0:	20000a1c 	.word	0x20000a1c

000043e4 <SWI0_EGU0_IRQHandler>:

	return 1;
}


ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    43e4:	4668      	mov	r0, sp
    43e6:	f020 0107 	bic.w	r1, r0, #7
    43ea:	468d      	mov	sp, r1
    43ec:	b531      	push	{r0, r4, r5, lr}
	event.tx_attempts = last_tx_attempts;
    43ee:	4b1b      	ldr	r3, [pc, #108]	; (445c <SWI0_EGU0_IRQHandler+0x78>)
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    43f0:	b082      	sub	sp, #8
	event.tx_attempts = last_tx_attempts;
    43f2:	681b      	ldr	r3, [r3, #0]
    43f4:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
    43f6:	f04f 0320 	mov.w	r3, #32
    43fa:	f3ef 8111 	mrs	r1, BASEPRI
    43fe:	f383 8812 	msr	BASEPRI_MAX, r3
    4402:	f3bf 8f6f 	isb	sy
	*interrupts = interrupt_flags;
    4406:	4b16      	ldr	r3, [pc, #88]	; (4460 <SWI0_EGU0_IRQHandler+0x7c>)
	interrupt_flags = 0;
    4408:	2200      	movs	r2, #0
	*interrupts = interrupt_flags;
    440a:	681d      	ldr	r5, [r3, #0]
	interrupt_flags = 0;
    440c:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    440e:	f381 8811 	msr	BASEPRI, r1
    4412:	f3bf 8f6f 	isb	sy
	if (event_handler != NULL) {
    4416:	4c13      	ldr	r4, [pc, #76]	; (4464 <SWI0_EGU0_IRQHandler+0x80>)
    4418:	6823      	ldr	r3, [r4, #0]
    441a:	b1ab      	cbz	r3, 4448 <SWI0_EGU0_IRQHandler+0x64>
		if (interrupts & INT_TX_SUCCESS_MSK) {
    441c:	07e9      	lsls	r1, r5, #31
    441e:	d503      	bpl.n	4428 <SWI0_EGU0_IRQHandler+0x44>
			event.evt_id = ESB_EVENT_TX_SUCCESS;
    4420:	f88d 2000 	strb.w	r2, [sp]
			event_handler(&event);
    4424:	4668      	mov	r0, sp
    4426:	4798      	blx	r3
		if (interrupts & INT_TX_FAILED_MSK) {
    4428:	07aa      	lsls	r2, r5, #30
    442a:	d505      	bpl.n	4438 <SWI0_EGU0_IRQHandler+0x54>
			event.evt_id = ESB_EVENT_TX_FAILED;
    442c:	2301      	movs	r3, #1
    442e:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    4432:	4668      	mov	r0, sp
    4434:	6823      	ldr	r3, [r4, #0]
    4436:	4798      	blx	r3
		if (interrupts & INT_RX_DATA_RECEIVED_MSK) {
    4438:	076b      	lsls	r3, r5, #29
    443a:	d505      	bpl.n	4448 <SWI0_EGU0_IRQHandler+0x64>
			event.evt_id = ESB_EVENT_RX_RECEIVED;
    443c:	2302      	movs	r3, #2
    443e:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    4442:	4668      	mov	r0, sp
    4444:	6823      	ldr	r3, [r4, #0]
    4446:	4798      	blx	r3
{
	esb_evt_irq_handler();

	ISR_DIRECT_PM();
    4448:	f7fe f8e4 	bl	2614 <_arch_isr_direct_pm>
    444c:	f7fe f9c6 	bl	27dc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    4450:	b002      	add	sp, #8
    4452:	e8bd 4031 	ldmia.w	sp!, {r0, r4, r5, lr}
    4456:	4685      	mov	sp, r0
    4458:	4770      	bx	lr
    445a:	bf00      	nop
    445c:	20000a18 	.word	0x20000a18
    4460:	20000a14 	.word	0x20000a14
    4464:	20000a10 	.word	0x20000a10

00004468 <pmw3360_channel_get>:
{
	struct pmw3360_data *dev_data = &pmw3360_data;

	ARG_UNUSED(dev);

	if (unlikely(!dev_data->ready)) {
    4468:	4b0b      	ldr	r3, [pc, #44]	; (4498 <pmw3360_channel_get+0x30>)
    446a:	f893 0068 	ldrb.w	r0, [r3, #104]	; 0x68
    446e:	b178      	cbz	r0, 4490 <pmw3360_channel_get+0x28>
		LOG_DBG("Device is not initialized yet");
		return -EBUSY;
	}

	switch (chan) {
    4470:	2923      	cmp	r1, #35	; 0x23
    4472:	d004      	beq.n	447e <pmw3360_channel_get+0x16>
    4474:	2924      	cmp	r1, #36	; 0x24
    4476:	d008      	beq.n	448a <pmw3360_channel_get+0x22>
    4478:	f06f 0085 	mvn.w	r0, #133	; 0x85
    447c:	4770      	bx	lr
	case SENSOR_CHAN_POS_DX:
		val->val1 = dev_data->x;
    447e:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
		val->val2 = 0;
		break;

	case SENSOR_CHAN_POS_DY:
		val->val1 = dev_data->y;
    4482:	6013      	str	r3, [r2, #0]
		val->val2 = 0;
    4484:	2000      	movs	r0, #0
    4486:	6050      	str	r0, [r2, #4]
		break;
    4488:	4770      	bx	lr
		val->val1 = dev_data->y;
    448a:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
    448e:	e7f8      	b.n	4482 <pmw3360_channel_get+0x1a>
		return -EBUSY;
    4490:	f06f 000f 	mvn.w	r0, #15
	default:
		return -ENOTSUP;
	}

	return 0;
}
    4494:	4770      	bx	lr
    4496:	bf00      	nop
    4498:	20000640 	.word	0x20000640

0000449c <pmw3360_async_init>:
{
    449c:	b570      	push	{r4, r5, r6, lr}
	dev_data->err = async_init_fn[dev_data->async_init_step](dev_data);
    449e:	4c22      	ldr	r4, [pc, #136]	; (4528 <pmw3360_async_init+0x8c>)
    44a0:	4b22      	ldr	r3, [pc, #136]	; (452c <pmw3360_async_init+0x90>)
    44a2:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
{
    44a6:	b086      	sub	sp, #24
	dev_data->err = async_init_fn[dev_data->async_init_step](dev_data);
    44a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    44ac:	4620      	mov	r0, r4
    44ae:	4798      	blx	r3
    44b0:	4601      	mov	r1, r0
    44b2:	6660      	str	r0, [r4, #100]	; 0x64
	if (dev_data->err) {
    44b4:	b158      	cbz	r0, 44ce <pmw3360_async_init+0x32>
		LOG_ERR("PMW3360 initialization failed");
    44b6:	4b1e      	ldr	r3, [pc, #120]	; (4530 <pmw3360_async_init+0x94>)
    44b8:	9305      	str	r3, [sp, #20]
    44ba:	2302      	movs	r3, #2
    44bc:	9304      	str	r3, [sp, #16]
    44be:	aa04      	add	r2, sp, #16
    44c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			LOG_INF("PMW3360 initialized");
    44c4:	481b      	ldr	r0, [pc, #108]	; (4534 <pmw3360_async_init+0x98>)
    44c6:	f003 fda1 	bl	800c <z_log_msg2_static_create.constprop.0>
}
    44ca:	b006      	add	sp, #24
    44cc:	bd70      	pop	{r4, r5, r6, pc}
		dev_data->async_init_step++;
    44ce:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    44d2:	3301      	adds	r3, #1
    44d4:	b2db      	uxtb	r3, r3
		if (dev_data->async_init_step == ASYNC_INIT_STEP_COUNT) {
    44d6:	2b05      	cmp	r3, #5
		dev_data->async_init_step++;
    44d8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		if (dev_data->async_init_step == ASYNC_INIT_STEP_COUNT) {
    44dc:	d10a      	bne.n	44f4 <pmw3360_async_init+0x58>
			dev_data->ready = true;
    44de:	2301      	movs	r3, #1
    44e0:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
			LOG_INF("PMW3360 initialized");
    44e4:	4b14      	ldr	r3, [pc, #80]	; (4538 <pmw3360_async_init+0x9c>)
    44e6:	9305      	str	r3, [sp, #20]
    44e8:	2302      	movs	r3, #2
    44ea:	9304      	str	r3, [sp, #16]
    44ec:	aa04      	add	r2, sp, #16
    44ee:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    44f2:	e7e7      	b.n	44c4 <pmw3360_async_init+0x28>
					K_MSEC(async_init_delay[
    44f4:	4a11      	ldr	r2, [pc, #68]	; (453c <pmw3360_async_init+0xa0>)
    44f6:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    44fa:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    44fe:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    4502:	f240 30e7 	movw	r0, #999	; 0x3e7
    4506:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    450a:	2300      	movs	r3, #0
    450c:	fbc5 0106 	smlal	r0, r1, r5, r6
    4510:	f7fb fde6 	bl	e0 <__aeabi_uldivmod>
    4514:	4602      	mov	r2, r0
    4516:	460b      	mov	r3, r1
			k_work_schedule(&dev_data->init_work,
    4518:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    451c:	b006      	add	sp, #24
    451e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&dev_data->init_work,
    4522:	f002 b90f 	b.w	6744 <k_work_schedule>
    4526:	bf00      	nop
    4528:	20000640 	.word	0x20000640
    452c:	00008b34 	.word	0x00008b34
    4530:	00009432 	.word	0x00009432
    4534:	00008908 	.word	0x00008908
    4538:	00009450 	.word	0x00009450
    453c:	00008b20 	.word	0x00008b20

00004540 <spi_write.constprop.0>:
 * @param tx_bufs Buffer array where data to be sent originates from.
 *
 * @retval 0 If successful.
 * @retval -errno Negative errno code on failure.
 */
static inline int spi_write(const struct device *dev,
    4540:	b410      	push	{r4}
    4542:	460a      	mov	r2, r1
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    4544:	6883      	ldr	r3, [r0, #8]
    4546:	4903      	ldr	r1, [pc, #12]	; (4554 <spi_write.constprop.0+0x14>)
    4548:	681c      	ldr	r4, [r3, #0]
    454a:	2300      	movs	r3, #0
    454c:	46a4      	mov	ip, r4
			    const struct spi_config *config,
			    const struct spi_buf_set *tx_bufs)
{
	return spi_transceive(dev, config, tx_bufs, NULL);
}
    454e:	bc10      	pop	{r4}
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    4550:	4760      	bx	ip
    4552:	bf00      	nop
    4554:	00008b5c 	.word	0x00008b5c

00004558 <spi_cs_ctrl>:
{
    4558:	b530      	push	{r4, r5, lr}
    455a:	4604      	mov	r4, r0
    455c:	b087      	sub	sp, #28
	if (!enable) {
    455e:	460d      	mov	r5, r1
    4560:	b911      	cbnz	r1, 4568 <spi_cs_ctrl+0x10>
		k_busy_wait(T_NCS_SCLK);
    4562:	2001      	movs	r0, #1
    4564:	f003 fd50 	bl	8008 <k_busy_wait>
	err = gpio_pin_set_raw(dev_data->cs_gpio_dev, PMW3360_CS_GPIO_PIN, val);
    4568:	6820      	ldr	r0, [r4, #0]
	if (value != 0)	{
    456a:	b9b5      	cbnz	r5, 459a <spi_cs_ctrl+0x42>
	return api->port_set_bits_raw(port, pins);
    456c:	6883      	ldr	r3, [r0, #8]
    456e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    4570:	2140      	movs	r1, #64	; 0x40
    4572:	4798      	blx	r3
    4574:	4604      	mov	r4, r0
	if (err) {
    4576:	b148      	cbz	r0, 458c <spi_cs_ctrl+0x34>
		LOG_ERR("SPI CS ctrl failed");
    4578:	4b09      	ldr	r3, [pc, #36]	; (45a0 <spi_cs_ctrl+0x48>)
    457a:	9305      	str	r3, [sp, #20]
    457c:	4809      	ldr	r0, [pc, #36]	; (45a4 <spi_cs_ctrl+0x4c>)
    457e:	2302      	movs	r3, #2
    4580:	aa04      	add	r2, sp, #16
    4582:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4586:	9304      	str	r3, [sp, #16]
    4588:	f003 fd40 	bl	800c <z_log_msg2_static_create.constprop.0>
	if (enable) {
    458c:	b115      	cbz	r5, 4594 <spi_cs_ctrl+0x3c>
		k_busy_wait(T_NCS_SCLK);
    458e:	2001      	movs	r0, #1
    4590:	f003 fd3a 	bl	8008 <k_busy_wait>
}
    4594:	4620      	mov	r0, r4
    4596:	b007      	add	sp, #28
    4598:	bd30      	pop	{r4, r5, pc}
    459a:	6883      	ldr	r3, [r0, #8]
    459c:	691b      	ldr	r3, [r3, #16]
    459e:	e7e7      	b.n	4570 <spi_cs_ctrl+0x18>
    45a0:	00009464 	.word	0x00009464
    45a4:	00008908 	.word	0x00008908

000045a8 <reg_write.part.0>:
static int reg_write(struct pmw3360_data *dev_data, uint8_t reg, uint8_t val)
    45a8:	b570      	push	{r4, r5, r6, lr}
    45aa:	b08c      	sub	sp, #48	; 0x30
	const struct spi_buf tx_buf = {
    45ac:	ab01      	add	r3, sp, #4
	uint8_t buf[] = {
    45ae:	f061 017f 	orn	r1, r1, #127	; 0x7f
	const struct spi_buf tx_buf = {
    45b2:	9302      	str	r3, [sp, #8]
	const struct spi_buf_set tx = {
    45b4:	ab02      	add	r3, sp, #8
	uint8_t buf[] = {
    45b6:	f88d 1004 	strb.w	r1, [sp, #4]
	const struct spi_buf_set tx = {
    45ba:	9304      	str	r3, [sp, #16]
static int reg_write(struct pmw3360_data *dev_data, uint8_t reg, uint8_t val)
    45bc:	4605      	mov	r5, r0
	const struct spi_buf_set tx = {
    45be:	2301      	movs	r3, #1
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    45c0:	6880      	ldr	r0, [r0, #8]
	uint8_t buf[] = {
    45c2:	f88d 2005 	strb.w	r2, [sp, #5]
	const struct spi_buf tx_buf = {
    45c6:	2602      	movs	r6, #2
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    45c8:	a904      	add	r1, sp, #16
	const struct spi_buf tx_buf = {
    45ca:	9603      	str	r6, [sp, #12]
	const struct spi_buf_set tx = {
    45cc:	9305      	str	r3, [sp, #20]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    45ce:	f7ff ffb7 	bl	4540 <spi_write.constprop.0>
	if (err) {
    45d2:	4604      	mov	r4, r0
    45d4:	b158      	cbz	r0, 45ee <reg_write.part.0+0x46>
		LOG_ERR("Reg write failed on SPI write");
    45d6:	4b0e      	ldr	r3, [pc, #56]	; (4610 <reg_write.part.0+0x68>)
    45d8:	480e      	ldr	r0, [pc, #56]	; (4614 <reg_write.part.0+0x6c>)
    45da:	aa0a      	add	r2, sp, #40	; 0x28
    45dc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    45e0:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
    45e4:	f003 fd12 	bl	800c <z_log_msg2_static_create.constprop.0>
}
    45e8:	4620      	mov	r0, r4
    45ea:	b00c      	add	sp, #48	; 0x30
    45ec:	bd70      	pop	{r4, r5, r6, pc}
	k_busy_wait(T_SCLK_NCS_WR);
    45ee:	2022      	movs	r0, #34	; 0x22
    45f0:	f003 fd0a 	bl	8008 <k_busy_wait>
	err = spi_cs_ctrl(dev_data, false);
    45f4:	4621      	mov	r1, r4
    45f6:	4628      	mov	r0, r5
    45f8:	f7ff ffae 	bl	4558 <spi_cs_ctrl>
	if (err) {
    45fc:	4604      	mov	r4, r0
    45fe:	2800      	cmp	r0, #0
    4600:	d1f2      	bne.n	45e8 <reg_write.part.0+0x40>
	k_busy_wait(T_SWX);
    4602:	2092      	movs	r0, #146	; 0x92
    4604:	f003 fd00 	bl	8008 <k_busy_wait>
	dev_data->last_read_burst = false;
    4608:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69
	return 0;
    460c:	e7ec      	b.n	45e8 <reg_write.part.0+0x40>
    460e:	bf00      	nop
    4610:	00009477 	.word	0x00009477
    4614:	00008908 	.word	0x00008908

00004618 <update_cpi>:
{
    4618:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((cpi > PMW3360_MAX_CPI) || (cpi < PMW3360_MIN_CPI)) {
    461a:	f1a1 0264 	sub.w	r2, r1, #100	; 0x64
    461e:	f642 637c 	movw	r3, #11900	; 0x2e7c
{
    4622:	b087      	sub	sp, #28
	if ((cpi > PMW3360_MAX_CPI) || (cpi < PMW3360_MIN_CPI)) {
    4624:	429a      	cmp	r2, r3
{
    4626:	4605      	mov	r5, r0
    4628:	af00      	add	r7, sp, #0
	if ((cpi > PMW3360_MAX_CPI) || (cpi < PMW3360_MIN_CPI)) {
    462a:	d914      	bls.n	4656 <update_cpi+0x3e>
		LOG_ERR("CPI value %u out of range", cpi);
    462c:	466c      	mov	r4, sp
    462e:	4b1e      	ldr	r3, [pc, #120]	; (46a8 <update_cpi+0x90>)
    4630:	481e      	ldr	r0, [pc, #120]	; (46ac <update_cpi+0x94>)
    4632:	b088      	sub	sp, #32
    4634:	466a      	mov	r2, sp
    4636:	e9c2 3105 	strd	r3, r1, [r2, #20]
    463a:	2303      	movs	r3, #3
    463c:	f842 3f10 	str.w	r3, [r2, #16]!
    4640:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4644:	f003 fce2 	bl	800c <z_log_msg2_static_create.constprop.0>
    4648:	46a5      	mov	sp, r4
		return -EINVAL;
    464a:	f06f 0415 	mvn.w	r4, #21
}
    464e:	4620      	mov	r0, r4
    4650:	371c      	adds	r7, #28
    4652:	46bd      	mov	sp, r7
    4654:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("Setting CPI to %u (reg value 0x%x)", cpi, value);
    4656:	4b16      	ldr	r3, [pc, #88]	; (46b0 <update_cpi+0x98>)
    4658:	4814      	ldr	r0, [pc, #80]	; (46ac <update_cpi+0x94>)
    465a:	466e      	mov	r6, sp
    465c:	b088      	sub	sp, #32
    465e:	466a      	mov	r2, sp
	uint8_t value = (cpi / 100) - 1;
    4660:	2464      	movs	r4, #100	; 0x64
    4662:	fbb1 f4f4 	udiv	r4, r1, r4
    4666:	3c01      	subs	r4, #1
	LOG_INF("Setting CPI to %u (reg value 0x%x)", cpi, value);
    4668:	e9c2 3105 	strd	r3, r1, [r2, #20]
	uint8_t value = (cpi / 100) - 1;
    466c:	b2e4      	uxtb	r4, r4
	LOG_INF("Setting CPI to %u (reg value 0x%x)", cpi, value);
    466e:	2304      	movs	r3, #4
    4670:	61d4      	str	r4, [r2, #28]
    4672:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    4676:	f842 3f10 	str.w	r3, [r2, #16]!
    467a:	f003 fcc7 	bl	800c <z_log_msg2_static_create.constprop.0>
	int err = reg_write(dev_data, PMW3360_REG_CONFIG1, value);
    467e:	4622      	mov	r2, r4
    4680:	46b5      	mov	sp, r6
    4682:	210f      	movs	r1, #15
    4684:	4628      	mov	r0, r5
    4686:	f003 fcc4 	bl	8012 <reg_write>
	if (err) {
    468a:	4604      	mov	r4, r0
    468c:	2800      	cmp	r0, #0
    468e:	d0de      	beq.n	464e <update_cpi+0x36>
		LOG_ERR("Failed to change CPI");
    4690:	4b08      	ldr	r3, [pc, #32]	; (46b4 <update_cpi+0x9c>)
    4692:	617b      	str	r3, [r7, #20]
    4694:	4805      	ldr	r0, [pc, #20]	; (46ac <update_cpi+0x94>)
    4696:	2302      	movs	r3, #2
    4698:	f107 0210 	add.w	r2, r7, #16
    469c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    46a0:	613b      	str	r3, [r7, #16]
    46a2:	f003 fcb3 	bl	800c <z_log_msg2_static_create.constprop.0>
    46a6:	e7d2      	b.n	464e <update_cpi+0x36>
    46a8:	00009495 	.word	0x00009495
    46ac:	00008908 	.word	0x00008908
    46b0:	000094af 	.word	0x000094af
    46b4:	000094d2 	.word	0x000094d2

000046b8 <update_downshift_time>:
{
    46b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (reg_addr) {
    46bc:	2917      	cmp	r1, #23
{
    46be:	b086      	sub	sp, #24
    46c0:	4606      	mov	r6, r0
    46c2:	af00      	add	r7, sp, #0
    46c4:	460d      	mov	r5, r1
    46c6:	4614      	mov	r4, r2
	switch (reg_addr) {
    46c8:	d015      	beq.n	46f6 <update_downshift_time+0x3e>
    46ca:	291a      	cmp	r1, #26
    46cc:	d02c      	beq.n	4728 <update_downshift_time+0x70>
    46ce:	2914      	cmp	r1, #20
    46d0:	d02e      	beq.n	4730 <update_downshift_time+0x78>
		LOG_ERR("Not supported");
    46d2:	4b2d      	ldr	r3, [pc, #180]	; (4788 <update_downshift_time+0xd0>)
    46d4:	617b      	str	r3, [r7, #20]
    46d6:	482d      	ldr	r0, [pc, #180]	; (478c <update_downshift_time+0xd4>)
    46d8:	2302      	movs	r3, #2
    46da:	f107 0210 	add.w	r2, r7, #16
    46de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
    46e2:	f06f 0485 	mvn.w	r4, #133	; 0x85
		LOG_ERR("Not supported");
    46e6:	613b      	str	r3, [r7, #16]
    46e8:	f003 fc90 	bl	800c <z_log_msg2_static_create.constprop.0>
}
    46ec:	4620      	mov	r0, r4
    46ee:	3718      	adds	r7, #24
    46f0:	46bd      	mov	sp, r7
    46f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		maxtime = 81600;
    46f6:	4a26      	ldr	r2, [pc, #152]	; (4790 <update_downshift_time+0xd8>)
		mintime = 320;
    46f8:	f44f 73a0 	mov.w	r3, #320	; 0x140
	if ((time > maxtime) || (time < mintime)) {
    46fc:	4294      	cmp	r4, r2
    46fe:	d801      	bhi.n	4704 <update_downshift_time+0x4c>
    4700:	429c      	cmp	r4, r3
    4702:	d219      	bcs.n	4738 <update_downshift_time+0x80>
		LOG_WRN("Downshift time %u out of range", time);
    4704:	4b23      	ldr	r3, [pc, #140]	; (4794 <update_downshift_time+0xdc>)
    4706:	4821      	ldr	r0, [pc, #132]	; (478c <update_downshift_time+0xd4>)
    4708:	466d      	mov	r5, sp
    470a:	b088      	sub	sp, #32
    470c:	466a      	mov	r2, sp
    470e:	e9c2 3405 	strd	r3, r4, [r2, #20]
    4712:	2303      	movs	r3, #3
    4714:	f842 3f10 	str.w	r3, [r2, #16]!
    4718:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    471c:	f003 fc76 	bl	800c <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    4720:	f06f 0415 	mvn.w	r4, #21
    4724:	46ad      	mov	sp, r5
    4726:	e7e1      	b.n	46ec <update_downshift_time+0x34>
	switch (reg_addr) {
    4728:	4a1b      	ldr	r2, [pc, #108]	; (4798 <update_downshift_time+0xe0>)
    472a:	f44f 6348 	mov.w	r3, #3200	; 0xc80
    472e:	e7e5      	b.n	46fc <update_downshift_time+0x44>
		mintime = 10;
    4730:	230a      	movs	r3, #10
		maxtime = 2550;
    4732:	f640 12f6 	movw	r2, #2550	; 0x9f6
    4736:	e7e1      	b.n	46fc <update_downshift_time+0x44>
	LOG_INF("Set downshift time to %u ms (reg value 0x%x)", time, value);
    4738:	4918      	ldr	r1, [pc, #96]	; (479c <update_downshift_time+0xe4>)
	uint8_t value = time / mintime;
    473a:	fbb4 f3f3 	udiv	r3, r4, r3
	LOG_INF("Set downshift time to %u ms (reg value 0x%x)", time, value);
    473e:	46e8      	mov	r8, sp
    4740:	b088      	sub	sp, #32
    4742:	466a      	mov	r2, sp
    4744:	e9c2 1405 	strd	r1, r4, [r2, #20]
    4748:	b2dc      	uxtb	r4, r3
    474a:	2304      	movs	r3, #4
    474c:	61d4      	str	r4, [r2, #28]
    474e:	480f      	ldr	r0, [pc, #60]	; (478c <update_downshift_time+0xd4>)
    4750:	f842 3f10 	str.w	r3, [r2, #16]!
    4754:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    4758:	f003 fc58 	bl	800c <z_log_msg2_static_create.constprop.0>
	int err = reg_write(dev_data, reg_addr, value);
    475c:	4622      	mov	r2, r4
    475e:	46c5      	mov	sp, r8
    4760:	4629      	mov	r1, r5
    4762:	4630      	mov	r0, r6
    4764:	f003 fc55 	bl	8012 <reg_write>
	if (err) {
    4768:	4604      	mov	r4, r0
    476a:	2800      	cmp	r0, #0
    476c:	d0be      	beq.n	46ec <update_downshift_time+0x34>
		LOG_ERR("Failed to change downshift time");
    476e:	4b0c      	ldr	r3, [pc, #48]	; (47a0 <update_downshift_time+0xe8>)
    4770:	617b      	str	r3, [r7, #20]
    4772:	4806      	ldr	r0, [pc, #24]	; (478c <update_downshift_time+0xd4>)
    4774:	2302      	movs	r3, #2
    4776:	f107 0210 	add.w	r2, r7, #16
    477a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    477e:	613b      	str	r3, [r7, #16]
    4780:	f003 fc44 	bl	800c <z_log_msg2_static_create.constprop.0>
    4784:	e7b2      	b.n	46ec <update_downshift_time+0x34>
    4786:	bf00      	nop
    4788:	000094e7 	.word	0x000094e7
    478c:	00008908 	.word	0x00008908
    4790:	00013ec0 	.word	0x00013ec0
    4794:	000094f5 	.word	0x000094f5
    4798:	000c7380 	.word	0x000c7380
    479c:	00009514 	.word	0x00009514
    47a0:	00009541 	.word	0x00009541

000047a4 <pmw3360_async_init_configure>:
{
    47a4:	b510      	push	{r4, lr}
	err = update_cpi(dev_data, CONFIG_PMW3360_CPI);
    47a6:	f44f 7148 	mov.w	r1, #800	; 0x320
{
    47aa:	4604      	mov	r4, r0
	err = update_cpi(dev_data, CONFIG_PMW3360_CPI);
    47ac:	f7ff ff34 	bl	4618 <update_cpi>
	if (!err) {
    47b0:	b9a0      	cbnz	r0, 47dc <pmw3360_async_init_configure+0x38>
		err = update_downshift_time(dev_data,
    47b2:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    47b6:	2114      	movs	r1, #20
    47b8:	4620      	mov	r0, r4
    47ba:	f7ff ff7d 	bl	46b8 <update_downshift_time>
	if (!err) {
    47be:	b968      	cbnz	r0, 47dc <pmw3360_async_init_configure+0x38>
		err = update_downshift_time(dev_data,
    47c0:	f242 4204 	movw	r2, #9220	; 0x2404
    47c4:	2117      	movs	r1, #23
    47c6:	4620      	mov	r0, r4
    47c8:	f7ff ff76 	bl	46b8 <update_downshift_time>
	if (!err) {
    47cc:	b930      	cbnz	r0, 47dc <pmw3360_async_init_configure+0x38>
		err = update_downshift_time(dev_data,
    47ce:	4620      	mov	r0, r4
    47d0:	4a03      	ldr	r2, [pc, #12]	; (47e0 <pmw3360_async_init_configure+0x3c>)
}
    47d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = update_downshift_time(dev_data,
    47d6:	211a      	movs	r1, #26
    47d8:	f7ff bf6e 	b.w	46b8 <update_downshift_time>
}
    47dc:	bd10      	pop	{r4, pc}
    47de:	bf00      	nop
    47e0:	000249f0 	.word	0x000249f0

000047e4 <update_sample_time.constprop.0>:
static int update_sample_time(struct pmw3360_data *dev_data,
    47e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((sample_time > maxtime) || (sample_time < mintime)) {
    47e8:	1e56      	subs	r6, r2, #1
static int update_sample_time(struct pmw3360_data *dev_data,
    47ea:	b086      	sub	sp, #24
	if ((sample_time > maxtime) || (sample_time < mintime)) {
    47ec:	f5b6 6f1b 	cmp.w	r6, #2480	; 0x9b0
static int update_sample_time(struct pmw3360_data *dev_data,
    47f0:	4604      	mov	r4, r0
    47f2:	af00      	add	r7, sp, #0
    47f4:	460d      	mov	r5, r1
    47f6:	4613      	mov	r3, r2
	if ((sample_time > maxtime) || (sample_time < mintime)) {
    47f8:	d315      	bcc.n	4826 <update_sample_time.constprop.0+0x42>
		LOG_WRN("Sample time %u out of range", sample_time);
    47fa:	466c      	mov	r4, sp
    47fc:	491f      	ldr	r1, [pc, #124]	; (487c <update_sample_time.constprop.0+0x98>)
    47fe:	4820      	ldr	r0, [pc, #128]	; (4880 <update_sample_time.constprop.0+0x9c>)
    4800:	b088      	sub	sp, #32
    4802:	466a      	mov	r2, sp
    4804:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4808:	2303      	movs	r3, #3
    480a:	f842 3f10 	str.w	r3, [r2, #16]!
    480e:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    4812:	f003 fbfb 	bl	800c <z_log_msg2_static_create.constprop.0>
    4816:	46a5      	mov	sp, r4
		return -EINVAL;
    4818:	f06f 0415 	mvn.w	r4, #21
}
    481c:	4620      	mov	r0, r4
    481e:	3718      	adds	r7, #24
    4820:	46bd      	mov	sp, r7
    4822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_INF("Set sample time to %u ms", sample_time);
    4826:	4917      	ldr	r1, [pc, #92]	; (4884 <update_sample_time.constprop.0+0xa0>)
    4828:	4815      	ldr	r0, [pc, #84]	; (4880 <update_sample_time.constprop.0+0x9c>)
    482a:	46e8      	mov	r8, sp
    482c:	b088      	sub	sp, #32
    482e:	466a      	mov	r2, sp
    4830:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4834:	2303      	movs	r3, #3
    4836:	f842 3f10 	str.w	r3, [r2, #16]!
    483a:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    483e:	f003 fbe5 	bl	800c <z_log_msg2_static_create.constprop.0>
	int err = reg_write(dev_data, reg_addr_lower, buf[0]);
    4842:	4621      	mov	r1, r4
    4844:	4810      	ldr	r0, [pc, #64]	; (4888 <update_sample_time.constprop.0+0xa4>)
    4846:	46c5      	mov	sp, r8
    4848:	b2f2      	uxtb	r2, r6
    484a:	f003 fbe2 	bl	8012 <reg_write>
	if (!err) {
    484e:	4604      	mov	r4, r0
    4850:	b938      	cbnz	r0, 4862 <update_sample_time.constprop.0+0x7e>
		err = reg_write(dev_data, reg_addr_upper, buf[1]);
    4852:	480d      	ldr	r0, [pc, #52]	; (4888 <update_sample_time.constprop.0+0xa4>)
    4854:	f3c6 2207 	ubfx	r2, r6, #8, #8
    4858:	4629      	mov	r1, r5
    485a:	f003 fbda 	bl	8012 <reg_write>
    485e:	4604      	mov	r4, r0
    4860:	e7dc      	b.n	481c <update_sample_time.constprop.0+0x38>
		LOG_ERR("Failed to change sample time");
    4862:	4b0a      	ldr	r3, [pc, #40]	; (488c <update_sample_time.constprop.0+0xa8>)
    4864:	617b      	str	r3, [r7, #20]
    4866:	4806      	ldr	r0, [pc, #24]	; (4880 <update_sample_time.constprop.0+0x9c>)
    4868:	2302      	movs	r3, #2
    486a:	f107 0210 	add.w	r2, r7, #16
    486e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4872:	613b      	str	r3, [r7, #16]
    4874:	f003 fbca 	bl	800c <z_log_msg2_static_create.constprop.0>
    4878:	e7d0      	b.n	481c <update_sample_time.constprop.0+0x38>
    487a:	bf00      	nop
    487c:	00009561 	.word	0x00009561
    4880:	00008908 	.word	0x00008908
    4884:	0000957d 	.word	0x0000957d
    4888:	20000640 	.word	0x20000640
    488c:	00009596 	.word	0x00009596

00004890 <pmw3360_async_init_fw_load_continue>:
{
    4890:	b5f0      	push	{r4, r5, r6, r7, lr}
    4892:	b08f      	sub	sp, #60	; 0x3c
	LOG_INF("Uploading optical sensor firmware...");
    4894:	4b35      	ldr	r3, [pc, #212]	; (496c <pmw3360_async_init_fw_load_continue+0xdc>)
    4896:	930d      	str	r3, [sp, #52]	; 0x34
{
    4898:	4605      	mov	r5, r0
	LOG_INF("Uploading optical sensor firmware...");
    489a:	aa0c      	add	r2, sp, #48	; 0x30
    489c:	4834      	ldr	r0, [pc, #208]	; (4970 <pmw3360_async_init_fw_load_continue+0xe0>)
    489e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    48a2:	2602      	movs	r6, #2
    48a4:	960c      	str	r6, [sp, #48]	; 0x30
    48a6:	f003 fbb1 	bl	800c <z_log_msg2_static_create.constprop.0>
	err = reg_write(dev_data, PMW3360_REG_SROM_ENABLE, 0x18);
    48aa:	2218      	movs	r2, #24
    48ac:	2113      	movs	r1, #19
    48ae:	4628      	mov	r0, r5
    48b0:	f003 fbaf 	bl	8012 <reg_write>
	if (err) {
    48b4:	4604      	mov	r4, r0
    48b6:	b148      	cbz	r0, 48cc <pmw3360_async_init_fw_load_continue+0x3c>
		LOG_ERR("Cannot start SROM download");
    48b8:	4b2e      	ldr	r3, [pc, #184]	; (4974 <pmw3360_async_init_fw_load_continue+0xe4>)
    48ba:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
		LOG_ERR("Cannot write firmware to sensor");
    48be:	482c      	ldr	r0, [pc, #176]	; (4970 <pmw3360_async_init_fw_load_continue+0xe0>)
    48c0:	aa0c      	add	r2, sp, #48	; 0x30
    48c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    48c6:	f003 fba1 	bl	800c <z_log_msg2_static_create.constprop.0>
    48ca:	e029      	b.n	4920 <pmw3360_async_init_fw_load_continue+0x90>
	err = burst_write(dev_data, PMW3360_REG_SROM_LOAD_BURST,
    48cc:	4b2a      	ldr	r3, [pc, #168]	; (4978 <pmw3360_async_init_fw_load_continue+0xe8>)
	err = spi_cs_ctrl(dev_data, true);
    48ce:	2101      	movs	r1, #1
	err = burst_write(dev_data, PMW3360_REG_SROM_LOAD_BURST,
    48d0:	681b      	ldr	r3, [r3, #0]
    48d2:	9301      	str	r3, [sp, #4]
	err = spi_cs_ctrl(dev_data, true);
    48d4:	4628      	mov	r0, r5
    48d6:	f7ff fe3f 	bl	4558 <spi_cs_ctrl>
	if (err) {
    48da:	4604      	mov	r4, r0
    48dc:	bb60      	cbnz	r0, 4938 <pmw3360_async_init_fw_load_continue+0xa8>
	uint8_t write_buf = reg | SPI_WRITE_BIT;
    48de:	23e2      	movs	r3, #226	; 0xe2
    48e0:	f88d 300f 	strb.w	r3, [sp, #15]
	struct spi_buf tx_buf = {
    48e4:	f10d 030f 	add.w	r3, sp, #15
    48e8:	9304      	str	r3, [sp, #16]
	const struct spi_buf_set tx = {
    48ea:	aa04      	add	r2, sp, #16
	struct spi_buf tx_buf = {
    48ec:	2301      	movs	r3, #1
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    48ee:	68a8      	ldr	r0, [r5, #8]
	struct spi_buf tx_buf = {
    48f0:	9305      	str	r3, [sp, #20]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    48f2:	a906      	add	r1, sp, #24
	const struct spi_buf_set tx = {
    48f4:	e9cd 2306 	strd	r2, r3, [sp, #24]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    48f8:	f7ff fe22 	bl	4540 <spi_write.constprop.0>
	if (err) {
    48fc:	4604      	mov	r4, r0
    48fe:	b990      	cbnz	r0, 4926 <pmw3360_async_init_fw_load_continue+0x96>
    4900:	4f1e      	ldr	r7, [pc, #120]	; (497c <pmw3360_async_init_fw_load_continue+0xec>)
	for (size_t i = 0; i < size; i++) {
    4902:	4606      	mov	r6, r0
    4904:	9b01      	ldr	r3, [sp, #4]
    4906:	42b3      	cmp	r3, r6
    4908:	d11b      	bne.n	4942 <pmw3360_async_init_fw_load_continue+0xb2>
	err = spi_cs_ctrl(dev_data, false);
    490a:	2100      	movs	r1, #0
    490c:	4628      	mov	r0, r5
    490e:	f7ff fe23 	bl	4558 <spi_cs_ctrl>
	if (err) {
    4912:	4604      	mov	r4, r0
    4914:	b980      	cbnz	r0, 4938 <pmw3360_async_init_fw_load_continue+0xa8>
	k_busy_wait(T_BEXIT);
    4916:	2001      	movs	r0, #1
    4918:	f003 fb76 	bl	8008 <k_busy_wait>
	dev_data->last_read_burst = false;
    491c:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69
}
    4920:	4620      	mov	r0, r4
    4922:	b00f      	add	sp, #60	; 0x3c
    4924:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Burst write failed on SPI write");
    4926:	4b16      	ldr	r3, [pc, #88]	; (4980 <pmw3360_async_init_fw_load_continue+0xf0>)
    4928:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
			LOG_ERR("Burst write failed on SPI write (data)");
    492c:	4810      	ldr	r0, [pc, #64]	; (4970 <pmw3360_async_init_fw_load_continue+0xe0>)
    492e:	aa0c      	add	r2, sp, #48	; 0x30
    4930:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4934:	f003 fb6a 	bl	800c <z_log_msg2_static_create.constprop.0>
		LOG_ERR("Cannot write firmware to sensor");
    4938:	4b12      	ldr	r3, [pc, #72]	; (4984 <pmw3360_async_init_fw_load_continue+0xf4>)
    493a:	930d      	str	r3, [sp, #52]	; 0x34
    493c:	2302      	movs	r3, #2
    493e:	930c      	str	r3, [sp, #48]	; 0x30
    4940:	e7bd      	b.n	48be <pmw3360_async_init_fw_load_continue+0x2e>
		write_buf = buf[i];
    4942:	f817 3b01 	ldrb.w	r3, [r7], #1
		err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    4946:	68a8      	ldr	r0, [r5, #8]
		write_buf = buf[i];
    4948:	f88d 300f 	strb.w	r3, [sp, #15]
		err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    494c:	a906      	add	r1, sp, #24
    494e:	f7ff fdf7 	bl	4540 <spi_write.constprop.0>
		if (err) {
    4952:	4604      	mov	r4, r0
    4954:	b120      	cbz	r0, 4960 <pmw3360_async_init_fw_load_continue+0xd0>
			LOG_ERR("Burst write failed on SPI write (data)");
    4956:	4b0c      	ldr	r3, [pc, #48]	; (4988 <pmw3360_async_init_fw_load_continue+0xf8>)
    4958:	930d      	str	r3, [sp, #52]	; 0x34
    495a:	2302      	movs	r3, #2
    495c:	930c      	str	r3, [sp, #48]	; 0x30
    495e:	e7e5      	b.n	492c <pmw3360_async_init_fw_load_continue+0x9c>
		k_busy_wait(T_BRSEP);
    4960:	200f      	movs	r0, #15
    4962:	f003 fb51 	bl	8008 <k_busy_wait>
	for (size_t i = 0; i < size; i++) {
    4966:	3601      	adds	r6, #1
    4968:	e7cc      	b.n	4904 <pmw3360_async_init_fw_load_continue+0x74>
    496a:	bf00      	nop
    496c:	000095b3 	.word	0x000095b3
    4970:	00008908 	.word	0x00008908
    4974:	000095d8 	.word	0x000095d8
    4978:	00008b68 	.word	0x00008b68
    497c:	000098d0 	.word	0x000098d0
    4980:	000095f3 	.word	0x000095f3
    4984:	0000963a 	.word	0x0000963a
    4988:	00009613 	.word	0x00009613

0000498c <irq_handler>:
{
    498c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	err = gpio_pin_interrupt_configure(pmw3360_data.irq_gpio_dev,
    498e:	4b0e      	ldr	r3, [pc, #56]	; (49c8 <irq_handler+0x3c>)
    4990:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    4994:	6858      	ldr	r0, [r3, #4]
    4996:	f003 fb50 	bl	803a <gpio_pin_interrupt_configure.constprop.0>
	if (unlikely(err)) {
    499a:	b178      	cbz	r0, 49bc <irq_handler+0x30>
		LOG_ERR("Cannot disable IRQ");
    499c:	4b0b      	ldr	r3, [pc, #44]	; (49cc <irq_handler+0x40>)
    499e:	9305      	str	r3, [sp, #20]
    49a0:	480b      	ldr	r0, [pc, #44]	; (49d0 <irq_handler+0x44>)
    49a2:	2302      	movs	r3, #2
    49a4:	aa04      	add	r2, sp, #16
    49a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    49aa:	9304      	str	r3, [sp, #16]
    49ac:	f003 fb2e 	bl	800c <z_log_msg2_static_create.constprop.0>
		k_panic();
    49b0:	4040      	eors	r0, r0
    49b2:	f380 8811 	msr	BASEPRI, r0
    49b6:	f04f 0004 	mov.w	r0, #4
    49ba:	df02      	svc	2
	k_work_submit(&pmw3360_data.trigger_handler_work);
    49bc:	4805      	ldr	r0, [pc, #20]	; (49d4 <irq_handler+0x48>)
}
    49be:	b007      	add	sp, #28
    49c0:	f85d eb04 	ldr.w	lr, [sp], #4
	k_work_submit(&pmw3360_data.trigger_handler_work);
    49c4:	f001 be56 	b.w	6674 <k_work_submit>
    49c8:	20000640 	.word	0x20000640
    49cc:	0000965a 	.word	0x0000965a
    49d0:	00008908 	.word	0x00008908
    49d4:	20000660 	.word	0x20000660

000049d8 <trigger_handler>:
{
    49d8:	b530      	push	{r4, r5, lr}
    49da:	b089      	sub	sp, #36	; 0x24
	__asm__ volatile(
    49dc:	f04f 0320 	mov.w	r3, #32
    49e0:	f3ef 8211 	mrs	r2, BASEPRI
    49e4:	f383 8812 	msr	BASEPRI_MAX, r3
    49e8:	f3bf 8f6f 	isb	sy
	handler = pmw3360_data.data_ready_handler;
    49ec:	4c1a      	ldr	r4, [pc, #104]	; (4a58 <trigger_handler+0x80>)
    49ee:	69e3      	ldr	r3, [r4, #28]
	__asm__ volatile(
    49f0:	f382 8811 	msr	BASEPRI, r2
    49f4:	f3bf 8f6f 	isb	sy
	if (!handler) {
    49f8:	b363      	cbz	r3, 4a54 <trigger_handler+0x7c>
	struct sensor_trigger trig = {
    49fa:	2201      	movs	r2, #1
    49fc:	f8ad 2004 	strh.w	r2, [sp, #4]
    4a00:	2239      	movs	r2, #57	; 0x39
	handler(DEVICE_DT_INST_GET(0), &trig);
    4a02:	4816      	ldr	r0, [pc, #88]	; (4a5c <trigger_handler+0x84>)
	struct sensor_trigger trig = {
    4a04:	f8ad 2006 	strh.w	r2, [sp, #6]
	handler(DEVICE_DT_INST_GET(0), &trig);
    4a08:	a901      	add	r1, sp, #4
    4a0a:	4798      	blx	r3
	__asm__ volatile(
    4a0c:	f04f 0320 	mov.w	r3, #32
    4a10:	f3ef 8511 	mrs	r5, BASEPRI
    4a14:	f383 8812 	msr	BASEPRI_MAX, r3
    4a18:	f3bf 8f6f 	isb	sy
	if (pmw3360_data.data_ready_handler) {
    4a1c:	69e0      	ldr	r0, [r4, #28]
    4a1e:	b120      	cbz	r0, 4a2a <trigger_handler+0x52>
		err = gpio_pin_interrupt_configure(pmw3360_data.irq_gpio_dev,
    4a20:	6860      	ldr	r0, [r4, #4]
    4a22:	f04f 7110 	mov.w	r1, #37748736	; 0x2400000
    4a26:	f003 fb08 	bl	803a <gpio_pin_interrupt_configure.constprop.0>
	__asm__ volatile(
    4a2a:	f385 8811 	msr	BASEPRI, r5
    4a2e:	f3bf 8f6f 	isb	sy
	if (unlikely(err)) {
    4a32:	b178      	cbz	r0, 4a54 <trigger_handler+0x7c>
		LOG_ERR("Cannot re-enable IRQ");
    4a34:	4b0a      	ldr	r3, [pc, #40]	; (4a60 <trigger_handler+0x88>)
    4a36:	9307      	str	r3, [sp, #28]
    4a38:	480a      	ldr	r0, [pc, #40]	; (4a64 <trigger_handler+0x8c>)
    4a3a:	2302      	movs	r3, #2
    4a3c:	aa06      	add	r2, sp, #24
    4a3e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4a42:	9306      	str	r3, [sp, #24]
    4a44:	f003 fae2 	bl	800c <z_log_msg2_static_create.constprop.0>
		k_panic();
    4a48:	4040      	eors	r0, r0
    4a4a:	f380 8811 	msr	BASEPRI, r0
    4a4e:	f04f 0004 	mov.w	r0, #4
    4a52:	df02      	svc	2
}
    4a54:	b009      	add	sp, #36	; 0x24
    4a56:	bd30      	pop	{r4, r5, pc}
    4a58:	20000640 	.word	0x20000640
    4a5c:	00008768 	.word	0x00008768
    4a60:	0000966d 	.word	0x0000966d
    4a64:	00008908 	.word	0x00008908

00004a68 <pmw3360_trigger_set>:
	struct pmw3360_data *dev_data = &pmw3360_data;
	int err;

	ARG_UNUSED(dev);

	if (unlikely(trig->type != SENSOR_TRIG_DATA_READY)) {
    4a68:	880b      	ldrh	r3, [r1, #0]
    4a6a:	2b01      	cmp	r3, #1
{
    4a6c:	b570      	push	{r4, r5, r6, lr}
    4a6e:	4615      	mov	r5, r2
	if (unlikely(trig->type != SENSOR_TRIG_DATA_READY)) {
    4a70:	d11e      	bne.n	4ab0 <pmw3360_trigger_set+0x48>
		return -ENOTSUP;
	}

	if (unlikely(trig->chan != SENSOR_CHAN_ALL)) {
    4a72:	884b      	ldrh	r3, [r1, #2]
    4a74:	2b39      	cmp	r3, #57	; 0x39
    4a76:	d11b      	bne.n	4ab0 <pmw3360_trigger_set+0x48>
		return -ENOTSUP;
	}

	if (unlikely(!dev_data->ready)) {
    4a78:	4c10      	ldr	r4, [pc, #64]	; (4abc <pmw3360_trigger_set+0x54>)
    4a7a:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    4a7e:	b1d3      	cbz	r3, 4ab6 <pmw3360_trigger_set+0x4e>
	__asm__ volatile(
    4a80:	f04f 0320 	mov.w	r3, #32
    4a84:	f3ef 8611 	mrs	r6, BASEPRI
    4a88:	f383 8812 	msr	BASEPRI_MAX, r3
    4a8c:	f3bf 8f6f 	isb	sy
		return -EBUSY;
	}

	k_spinlock_key_t key = k_spin_lock(&dev_data->lock);

	if (handler) {
    4a90:	b15a      	cbz	r2, 4aaa <pmw3360_trigger_set+0x42>
		err = gpio_pin_interrupt_configure(dev_data->irq_gpio_dev,
    4a92:	f04f 7110 	mov.w	r1, #37748736	; 0x2400000
						   PMW3360_IRQ_GPIO_PIN,
						   GPIO_INT_LEVEL_LOW);
	} else {
		err = gpio_pin_interrupt_configure(dev_data->irq_gpio_dev,
    4a96:	6860      	ldr	r0, [r4, #4]
    4a98:	f003 facf 	bl	803a <gpio_pin_interrupt_configure.constprop.0>
						   PMW3360_IRQ_GPIO_PIN,
						   GPIO_INT_DISABLE);
	}

	if (!err) {
    4a9c:	b900      	cbnz	r0, 4aa0 <pmw3360_trigger_set+0x38>
		dev_data->data_ready_handler = handler;
    4a9e:	61e5      	str	r5, [r4, #28]
	__asm__ volatile(
    4aa0:	f386 8811 	msr	BASEPRI, r6
    4aa4:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&dev_data->lock, key);

	return err;
}
    4aa8:	bd70      	pop	{r4, r5, r6, pc}
		err = gpio_pin_interrupt_configure(dev_data->irq_gpio_dev,
    4aaa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    4aae:	e7f2      	b.n	4a96 <pmw3360_trigger_set+0x2e>
		return -ENOTSUP;
    4ab0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4ab4:	e7f8      	b.n	4aa8 <pmw3360_trigger_set+0x40>
		return -EBUSY;
    4ab6:	f06f 000f 	mvn.w	r0, #15
    4aba:	e7f5      	b.n	4aa8 <pmw3360_trigger_set+0x40>
    4abc:	20000640 	.word	0x20000640

00004ac0 <reg_read>:
{
    4ac0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ac2:	b091      	sub	sp, #68	; 0x44
    4ac4:	4607      	mov	r7, r0
    4ac6:	f88d 1007 	strb.w	r1, [sp, #7]
	err = spi_cs_ctrl(dev_data, true);
    4aca:	2101      	movs	r1, #1
{
    4acc:	4616      	mov	r6, r2
	err = spi_cs_ctrl(dev_data, true);
    4ace:	f7ff fd43 	bl	4558 <spi_cs_ctrl>
	if (err) {
    4ad2:	4604      	mov	r4, r0
    4ad4:	b9b8      	cbnz	r0, 4b06 <reg_read+0x46>
	const struct spi_buf tx_buf = {
    4ad6:	f10d 0307 	add.w	r3, sp, #7
    4ada:	9302      	str	r3, [sp, #8]
    4adc:	2501      	movs	r5, #1
	const struct spi_buf_set tx = {
    4ade:	ab02      	add	r3, sp, #8
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    4ae0:	68b8      	ldr	r0, [r7, #8]
	const struct spi_buf tx_buf = {
    4ae2:	9503      	str	r5, [sp, #12]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    4ae4:	a904      	add	r1, sp, #16
	const struct spi_buf_set tx = {
    4ae6:	e9cd 3504 	strd	r3, r5, [sp, #16]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    4aea:	f7ff fd29 	bl	4540 <spi_write.constprop.0>
	if (err) {
    4aee:	4604      	mov	r4, r0
    4af0:	b160      	cbz	r0, 4b0c <reg_read+0x4c>
		LOG_ERR("Reg read failed on SPI write");
    4af2:	4b16      	ldr	r3, [pc, #88]	; (4b4c <reg_read+0x8c>)
		LOG_ERR("Reg read failed on SPI read");
    4af4:	930f      	str	r3, [sp, #60]	; 0x3c
    4af6:	4816      	ldr	r0, [pc, #88]	; (4b50 <reg_read+0x90>)
    4af8:	2302      	movs	r3, #2
    4afa:	aa0e      	add	r2, sp, #56	; 0x38
    4afc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4b00:	930e      	str	r3, [sp, #56]	; 0x38
    4b02:	f003 fa83 	bl	800c <z_log_msg2_static_create.constprop.0>
}
    4b06:	4620      	mov	r0, r4
    4b08:	b011      	add	sp, #68	; 0x44
    4b0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	k_busy_wait(T_SRAD);
    4b0c:	20a0      	movs	r0, #160	; 0xa0
    4b0e:	f003 fa7b 	bl	8008 <k_busy_wait>
	const struct spi_buf_set rx = {
    4b12:	ab06      	add	r3, sp, #24
	struct spi_buf rx_buf = {
    4b14:	e9cd 6506 	strd	r6, r5, [sp, #24]
	const struct spi_buf_set rx = {
    4b18:	e9cd 3508 	strd	r3, r5, [sp, #32]
	err = spi_read(dev_data->spi_dev, &spi_cfg, &rx);
    4b1c:	68b8      	ldr	r0, [r7, #8]
    4b1e:	6883      	ldr	r3, [r0, #8]
    4b20:	490c      	ldr	r1, [pc, #48]	; (4b54 <reg_read+0x94>)
    4b22:	681d      	ldr	r5, [r3, #0]
    4b24:	4622      	mov	r2, r4
    4b26:	ab08      	add	r3, sp, #32
    4b28:	47a8      	blx	r5
	if (err) {
    4b2a:	4604      	mov	r4, r0
    4b2c:	b108      	cbz	r0, 4b32 <reg_read+0x72>
		LOG_ERR("Reg read failed on SPI read");
    4b2e:	4b0a      	ldr	r3, [pc, #40]	; (4b58 <reg_read+0x98>)
    4b30:	e7e0      	b.n	4af4 <reg_read+0x34>
	err = spi_cs_ctrl(dev_data, false);
    4b32:	4601      	mov	r1, r0
    4b34:	4638      	mov	r0, r7
    4b36:	f7ff fd0f 	bl	4558 <spi_cs_ctrl>
	if (err) {
    4b3a:	4604      	mov	r4, r0
    4b3c:	2800      	cmp	r0, #0
    4b3e:	d1e2      	bne.n	4b06 <reg_read+0x46>
	k_busy_wait(T_SRX);
    4b40:	2013      	movs	r0, #19
    4b42:	f003 fa61 	bl	8008 <k_busy_wait>
	dev_data->last_read_burst = false;
    4b46:	f887 4069 	strb.w	r4, [r7, #105]	; 0x69
	return 0;
    4b4a:	e7dc      	b.n	4b06 <reg_read+0x46>
    4b4c:	00009682 	.word	0x00009682
    4b50:	00008908 	.word	0x00008908
    4b54:	00008b5c 	.word	0x00008b5c
    4b58:	0000969f 	.word	0x0000969f

00004b5c <pmw3360_async_init_fw_load_verify>:
{
    4b5c:	b530      	push	{r4, r5, lr}
    4b5e:	b089      	sub	sp, #36	; 0x24
	err = reg_read(dev_data, PMW3360_REG_SROM_ID, &fw_id);
    4b60:	f10d 0206 	add.w	r2, sp, #6
    4b64:	212a      	movs	r1, #42	; 0x2a
{
    4b66:	4605      	mov	r5, r0
	err = reg_read(dev_data, PMW3360_REG_SROM_ID, &fw_id);
    4b68:	f7ff ffaa 	bl	4ac0 <reg_read>
	if (err) {
    4b6c:	4604      	mov	r4, r0
    4b6e:	b150      	cbz	r0, 4b86 <pmw3360_async_init_fw_load_verify+0x2a>
		LOG_ERR("Cannot obtain firmware id");
    4b70:	4b1b      	ldr	r3, [pc, #108]	; (4be0 <pmw3360_async_init_fw_load_verify+0x84>)
		LOG_ERR("Cannot enable REST modes");
    4b72:	9307      	str	r3, [sp, #28]
    4b74:	481b      	ldr	r0, [pc, #108]	; (4be4 <pmw3360_async_init_fw_load_verify+0x88>)
    4b76:	2302      	movs	r3, #2
    4b78:	aa06      	add	r2, sp, #24
    4b7a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4b7e:	9306      	str	r3, [sp, #24]
    4b80:	f003 fa44 	bl	800c <z_log_msg2_static_create.constprop.0>
    4b84:	e00f      	b.n	4ba6 <pmw3360_async_init_fw_load_verify+0x4a>
	if (fw_id != PMW3360_FIRMWARE_ID) {
    4b86:	f89d 3006 	ldrb.w	r3, [sp, #6]
    4b8a:	2b04      	cmp	r3, #4
    4b8c:	d00e      	beq.n	4bac <pmw3360_async_init_fw_load_verify+0x50>
		LOG_ERR("Chip is not running from SROM!");
    4b8e:	4b16      	ldr	r3, [pc, #88]	; (4be8 <pmw3360_async_init_fw_load_verify+0x8c>)
		LOG_ERR("Invalid product id!");
    4b90:	9307      	str	r3, [sp, #28]
    4b92:	4814      	ldr	r0, [pc, #80]	; (4be4 <pmw3360_async_init_fw_load_verify+0x88>)
    4b94:	2302      	movs	r3, #2
    4b96:	aa06      	add	r2, sp, #24
    4b98:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
    4b9c:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("Invalid product id!");
    4ba0:	9306      	str	r3, [sp, #24]
    4ba2:	f003 fa33 	bl	800c <z_log_msg2_static_create.constprop.0>
}
    4ba6:	4620      	mov	r0, r4
    4ba8:	b009      	add	sp, #36	; 0x24
    4baa:	bd30      	pop	{r4, r5, pc}
	err = reg_read(dev_data, PMW3360_REG_PRODUCT_ID, &product_id);
    4bac:	4601      	mov	r1, r0
    4bae:	f10d 0207 	add.w	r2, sp, #7
    4bb2:	4628      	mov	r0, r5
    4bb4:	f7ff ff84 	bl	4ac0 <reg_read>
	if (err) {
    4bb8:	4604      	mov	r4, r0
    4bba:	b108      	cbz	r0, 4bc0 <pmw3360_async_init_fw_load_verify+0x64>
		LOG_ERR("Cannot obtain product id");
    4bbc:	4b0b      	ldr	r3, [pc, #44]	; (4bec <pmw3360_async_init_fw_load_verify+0x90>)
    4bbe:	e7d8      	b.n	4b72 <pmw3360_async_init_fw_load_verify+0x16>
	if (product_id != PMW3360_PRODUCT_ID) {
    4bc0:	f89d 3007 	ldrb.w	r3, [sp, #7]
    4bc4:	2b42      	cmp	r3, #66	; 0x42
    4bc6:	d001      	beq.n	4bcc <pmw3360_async_init_fw_load_verify+0x70>
		LOG_ERR("Invalid product id!");
    4bc8:	4b09      	ldr	r3, [pc, #36]	; (4bf0 <pmw3360_async_init_fw_load_verify+0x94>)
    4bca:	e7e1      	b.n	4b90 <pmw3360_async_init_fw_load_verify+0x34>
	err = reg_write(dev_data, PMW3360_REG_CONFIG2, 0x20);
    4bcc:	2220      	movs	r2, #32
    4bce:	2110      	movs	r1, #16
    4bd0:	4628      	mov	r0, r5
    4bd2:	f003 fa1e 	bl	8012 <reg_write>
	if (err) {
    4bd6:	4604      	mov	r4, r0
    4bd8:	2800      	cmp	r0, #0
    4bda:	d0e4      	beq.n	4ba6 <pmw3360_async_init_fw_load_verify+0x4a>
		LOG_ERR("Cannot enable REST modes");
    4bdc:	4b05      	ldr	r3, [pc, #20]	; (4bf4 <pmw3360_async_init_fw_load_verify+0x98>)
    4bde:	e7c8      	b.n	4b72 <pmw3360_async_init_fw_load_verify+0x16>
    4be0:	000096bb 	.word	0x000096bb
    4be4:	00008908 	.word	0x00008908
    4be8:	000096d5 	.word	0x000096d5
    4bec:	000096f4 	.word	0x000096f4
    4bf0:	0000970d 	.word	0x0000970d
    4bf4:	00009721 	.word	0x00009721

00004bf8 <pmw3360_async_init_fw_load_start>:
{
    4bf8:	b570      	push	{r4, r5, r6, lr}
    4bfa:	4606      	mov	r6, r0
    4bfc:	b086      	sub	sp, #24
	for (uint8_t reg = 0x02; (reg <= 0x06) && !err; reg++) {
    4bfe:	2502      	movs	r5, #2
		err = reg_read(dev_data, reg, buf);
    4c00:	4629      	mov	r1, r5
    4c02:	466a      	mov	r2, sp
    4c04:	4630      	mov	r0, r6
    4c06:	f7ff ff5b 	bl	4ac0 <reg_read>
	for (uint8_t reg = 0x02; (reg <= 0x06) && !err; reg++) {
    4c0a:	3501      	adds	r5, #1
    4c0c:	b2ed      	uxtb	r5, r5
    4c0e:	2d07      	cmp	r5, #7
		err = reg_read(dev_data, reg, buf);
    4c10:	4604      	mov	r4, r0
	for (uint8_t reg = 0x02; (reg <= 0x06) && !err; reg++) {
    4c12:	d00e      	beq.n	4c32 <pmw3360_async_init_fw_load_start+0x3a>
    4c14:	2800      	cmp	r0, #0
    4c16:	d0f3      	beq.n	4c00 <pmw3360_async_init_fw_load_start+0x8>
		LOG_ERR("Cannot read from data registers");
    4c18:	4b10      	ldr	r3, [pc, #64]	; (4c5c <pmw3360_async_init_fw_load_start+0x64>)
		LOG_ERR("Cannot initialize SROM");
    4c1a:	9305      	str	r3, [sp, #20]
    4c1c:	4810      	ldr	r0, [pc, #64]	; (4c60 <pmw3360_async_init_fw_load_start+0x68>)
    4c1e:	2302      	movs	r3, #2
    4c20:	aa04      	add	r2, sp, #16
    4c22:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4c26:	9304      	str	r3, [sp, #16]
    4c28:	f003 f9f0 	bl	800c <z_log_msg2_static_create.constprop.0>
}
    4c2c:	4620      	mov	r0, r4
    4c2e:	b006      	add	sp, #24
    4c30:	bd70      	pop	{r4, r5, r6, pc}
	if (err) {
    4c32:	2800      	cmp	r0, #0
    4c34:	d1f0      	bne.n	4c18 <pmw3360_async_init_fw_load_start+0x20>
	err = reg_write(dev_data, PMW3360_REG_CONFIG2, 0x00);
    4c36:	4602      	mov	r2, r0
    4c38:	2110      	movs	r1, #16
    4c3a:	4630      	mov	r0, r6
    4c3c:	f003 f9e9 	bl	8012 <reg_write>
	if (err) {
    4c40:	4604      	mov	r4, r0
    4c42:	b108      	cbz	r0, 4c48 <pmw3360_async_init_fw_load_start+0x50>
		LOG_ERR("Cannot disable REST mode");
    4c44:	4b07      	ldr	r3, [pc, #28]	; (4c64 <pmw3360_async_init_fw_load_start+0x6c>)
    4c46:	e7e8      	b.n	4c1a <pmw3360_async_init_fw_load_start+0x22>
	err = reg_write(dev_data, PMW3360_REG_SROM_ENABLE, 0x1D);
    4c48:	221d      	movs	r2, #29
    4c4a:	2113      	movs	r1, #19
    4c4c:	4630      	mov	r0, r6
    4c4e:	f003 f9e0 	bl	8012 <reg_write>
	if (err) {
    4c52:	4604      	mov	r4, r0
    4c54:	2800      	cmp	r0, #0
    4c56:	d0e9      	beq.n	4c2c <pmw3360_async_init_fw_load_start+0x34>
		LOG_ERR("Cannot initialize SROM");
    4c58:	4b03      	ldr	r3, [pc, #12]	; (4c68 <pmw3360_async_init_fw_load_start+0x70>)
    4c5a:	e7de      	b.n	4c1a <pmw3360_async_init_fw_load_start+0x22>
    4c5c:	0000973a 	.word	0x0000973a
    4c60:	00008908 	.word	0x00008908
    4c64:	0000975a 	.word	0x0000975a
    4c68:	00009773 	.word	0x00009773

00004c6c <pmw3360_attr_set>:

static int pmw3360_attr_set(const struct device *dev, enum sensor_channel chan,
			    enum sensor_attribute attr,
			    const struct sensor_value *val)
{
    4c6c:	b5b0      	push	{r4, r5, r7, lr}
	struct pmw3360_data *dev_data = &pmw3360_data;
	int err;

	ARG_UNUSED(dev);

	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    4c6e:	2939      	cmp	r1, #57	; 0x39
{
    4c70:	b088      	sub	sp, #32
    4c72:	af00      	add	r7, sp, #0
	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    4c74:	d179      	bne.n	4d6a <pmw3360_attr_set+0xfe>
		return -ENOTSUP;
	}

	if (unlikely(!dev_data->ready)) {
    4c76:	4940      	ldr	r1, [pc, #256]	; (4d78 <pmw3360_attr_set+0x10c>)
    4c78:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
    4c7c:	2900      	cmp	r1, #0
    4c7e:	d077      	beq.n	4d70 <pmw3360_attr_set+0x104>
		LOG_DBG("Device is not initialized yet");
		return -EBUSY;
	}

	switch ((uint32_t)attr) {
    4c80:	3a0e      	subs	r2, #14
    4c82:	2a07      	cmp	r2, #7
    4c84:	d866      	bhi.n	4d54 <pmw3360_attr_set+0xe8>
    4c86:	e8df f002 	tbb	[pc, r2]
    4c8a:	0a04      	.short	0x0a04
    4c8c:	5754514b 	.word	0x5754514b
    4c90:	615d      	.short	0x615d
	case PMW3360_ATTR_CPI:
		err = update_cpi(dev_data, PMW3360_SVALUE_TO_CPI(*val));
    4c92:	6819      	ldr	r1, [r3, #0]
    4c94:	4838      	ldr	r0, [pc, #224]	; (4d78 <pmw3360_attr_set+0x10c>)
    4c96:	f7ff fcbf 	bl	4618 <update_cpi>
					PMW3360_REG_CONFIG2,
					PMW3360_SVALUE_TO_BOOL(*val));
		break;

	case PMW3360_ATTR_RUN_DOWNSHIFT_TIME:
		err = update_downshift_time(dev_data,
    4c9a:	4604      	mov	r4, r0
					    PMW3360_REG_RUN_DOWNSHIFT,
					    PMW3360_SVALUE_TO_TIME(*val));
		break;
    4c9c:	e012      	b.n	4cc4 <pmw3360_attr_set+0x58>
	int err = reg_read(dev_data, reg_addr, &value);
    4c9e:	4836      	ldr	r0, [pc, #216]	; (4d78 <pmw3360_attr_set+0x10c>)
					PMW3360_SVALUE_TO_BOOL(*val));
    4ca0:	681d      	ldr	r5, [r3, #0]
	int err = reg_read(dev_data, reg_addr, &value);
    4ca2:	1dfa      	adds	r2, r7, #7
    4ca4:	2110      	movs	r1, #16
    4ca6:	f7ff ff0b 	bl	4ac0 <reg_read>
	if (err) {
    4caa:	4604      	mov	r4, r0
    4cac:	b170      	cbz	r0, 4ccc <pmw3360_attr_set+0x60>
		LOG_ERR("Failed to read Config2 register");
    4cae:	4b33      	ldr	r3, [pc, #204]	; (4d7c <pmw3360_attr_set+0x110>)
    4cb0:	61fb      	str	r3, [r7, #28]
    4cb2:	2302      	movs	r3, #2
    4cb4:	61bb      	str	r3, [r7, #24]
		LOG_ERR("Failed to set rest mode");
    4cb6:	4832      	ldr	r0, [pc, #200]	; (4d80 <pmw3360_attr_set+0x114>)
    4cb8:	f107 0218 	add.w	r2, r7, #24
    4cbc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4cc0:	f003 f9a4 	bl	800c <z_log_msg2_static_create.constprop.0>
		LOG_ERR("Unknown attribute");
		return -ENOTSUP;
	}

	return err;
}
    4cc4:	4620      	mov	r0, r4
    4cc6:	3720      	adds	r7, #32
    4cc8:	46bd      	mov	sp, r7
    4cca:	bdb0      	pop	{r4, r5, r7, pc}
	WRITE_BIT(value, PMW3360_REST_EN_POS, enable);
    4ccc:	79fb      	ldrb	r3, [r7, #7]
    4cce:	b325      	cbz	r5, 4d1a <pmw3360_attr_set+0xae>
    4cd0:	f043 0320 	orr.w	r3, r3, #32
	LOG_INF("%sable rest modes", (enable) ? ("En") : ("Dis"));
    4cd4:	4a2b      	ldr	r2, [pc, #172]	; (4d84 <pmw3360_attr_set+0x118>)
	WRITE_BIT(value, PMW3360_REST_EN_POS, enable);
    4cd6:	71fb      	strb	r3, [r7, #7]
	LOG_INF("%sable rest modes", (enable) ? ("En") : ("Dis"));
    4cd8:	4b2b      	ldr	r3, [pc, #172]	; (4d88 <pmw3360_attr_set+0x11c>)
    4cda:	492c      	ldr	r1, [pc, #176]	; (4d8c <pmw3360_attr_set+0x120>)
    4cdc:	4828      	ldr	r0, [pc, #160]	; (4d80 <pmw3360_attr_set+0x114>)
    4cde:	466c      	mov	r4, sp
    4ce0:	b088      	sub	sp, #32
    4ce2:	2d00      	cmp	r5, #0
    4ce4:	bf08      	it	eq
    4ce6:	4613      	moveq	r3, r2
    4ce8:	466a      	mov	r2, sp
    4cea:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4cee:	2502      	movs	r5, #2
    4cf0:	4b27      	ldr	r3, [pc, #156]	; (4d90 <pmw3360_attr_set+0x124>)
    4cf2:	7715      	strb	r5, [r2, #28]
    4cf4:	f44f 51d6 	mov.w	r1, #6848	; 0x1ac0
    4cf8:	f842 3f10 	str.w	r3, [r2, #16]!
    4cfc:	f003 f986 	bl	800c <z_log_msg2_static_create.constprop.0>
	err = reg_write(dev_data, reg_addr, value);
    4d00:	481d      	ldr	r0, [pc, #116]	; (4d78 <pmw3360_attr_set+0x10c>)
    4d02:	79fa      	ldrb	r2, [r7, #7]
    4d04:	46a5      	mov	sp, r4
    4d06:	2110      	movs	r1, #16
    4d08:	f003 f983 	bl	8012 <reg_write>
	if (err) {
    4d0c:	4604      	mov	r4, r0
    4d0e:	2800      	cmp	r0, #0
    4d10:	d0d8      	beq.n	4cc4 <pmw3360_attr_set+0x58>
		LOG_ERR("Failed to set rest mode");
    4d12:	4b20      	ldr	r3, [pc, #128]	; (4d94 <pmw3360_attr_set+0x128>)
    4d14:	e9c7 5306 	strd	r5, r3, [r7, #24]
    4d18:	e7cd      	b.n	4cb6 <pmw3360_attr_set+0x4a>
	WRITE_BIT(value, PMW3360_REST_EN_POS, enable);
    4d1a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    4d1e:	e7d9      	b.n	4cd4 <pmw3360_attr_set+0x68>
		err = update_downshift_time(dev_data,
    4d20:	681a      	ldr	r2, [r3, #0]
    4d22:	2114      	movs	r1, #20
    4d24:	4814      	ldr	r0, [pc, #80]	; (4d78 <pmw3360_attr_set+0x10c>)
    4d26:	f7ff fcc7 	bl	46b8 <update_downshift_time>
    4d2a:	e7b6      	b.n	4c9a <pmw3360_attr_set+0x2e>
		err = update_downshift_time(dev_data,
    4d2c:	681a      	ldr	r2, [r3, #0]
    4d2e:	2117      	movs	r1, #23
    4d30:	e7f8      	b.n	4d24 <pmw3360_attr_set+0xb8>
		err = update_downshift_time(dev_data,
    4d32:	681a      	ldr	r2, [r3, #0]
    4d34:	211a      	movs	r1, #26
    4d36:	e7f5      	b.n	4d24 <pmw3360_attr_set+0xb8>
		err = update_sample_time(dev_data,
    4d38:	681a      	ldr	r2, [r3, #0]
    4d3a:	2116      	movs	r1, #22
    4d3c:	2015      	movs	r0, #21
		err = update_sample_time(dev_data,
    4d3e:	f7ff fd51 	bl	47e4 <update_sample_time.constprop.0>
    4d42:	e7aa      	b.n	4c9a <pmw3360_attr_set+0x2e>
		err = update_sample_time(dev_data,
    4d44:	681a      	ldr	r2, [r3, #0]
    4d46:	2119      	movs	r1, #25
    4d48:	2018      	movs	r0, #24
    4d4a:	e7f8      	b.n	4d3e <pmw3360_attr_set+0xd2>
		err = update_sample_time(dev_data,
    4d4c:	681a      	ldr	r2, [r3, #0]
    4d4e:	211c      	movs	r1, #28
    4d50:	201b      	movs	r0, #27
    4d52:	e7f4      	b.n	4d3e <pmw3360_attr_set+0xd2>
		LOG_ERR("Unknown attribute");
    4d54:	4b10      	ldr	r3, [pc, #64]	; (4d98 <pmw3360_attr_set+0x12c>)
    4d56:	61fb      	str	r3, [r7, #28]
    4d58:	4809      	ldr	r0, [pc, #36]	; (4d80 <pmw3360_attr_set+0x114>)
    4d5a:	2302      	movs	r3, #2
    4d5c:	f107 0218 	add.w	r2, r7, #24
    4d60:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4d64:	61bb      	str	r3, [r7, #24]
    4d66:	f003 f951 	bl	800c <z_log_msg2_static_create.constprop.0>
		return -ENOTSUP;
    4d6a:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4d6e:	e7a9      	b.n	4cc4 <pmw3360_attr_set+0x58>
		return -EBUSY;
    4d70:	f06f 040f 	mvn.w	r4, #15
    4d74:	e7a6      	b.n	4cc4 <pmw3360_attr_set+0x58>
    4d76:	bf00      	nop
    4d78:	20000640 	.word	0x20000640
    4d7c:	00009791 	.word	0x00009791
    4d80:	00008908 	.word	0x00008908
    4d84:	0000978d 	.word	0x0000978d
    4d88:	0000978a 	.word	0x0000978a
    4d8c:	000097b1 	.word	0x000097b1
    4d90:	01000003 	.word	0x01000003
    4d94:	000097c3 	.word	0x000097c3
    4d98:	000097db 	.word	0x000097db

00004d9c <pmw3360_sample_fetch>:
{
    4d9c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    4d9e:	2939      	cmp	r1, #57	; 0x39
{
    4da0:	b093      	sub	sp, #76	; 0x4c
	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    4da2:	d15b      	bne.n	4e5c <pmw3360_sample_fetch+0xc0>
	if (unlikely(!dev_data->ready)) {
    4da4:	4d30      	ldr	r5, [pc, #192]	; (4e68 <pmw3360_sample_fetch+0xcc>)
    4da6:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    4daa:	2b00      	cmp	r3, #0
    4dac:	d059      	beq.n	4e62 <pmw3360_sample_fetch+0xc6>
	if (!dev_data->last_read_burst) {
    4dae:	f895 2069 	ldrb.w	r2, [r5, #105]	; 0x69
    4db2:	b302      	cbz	r2, 4df6 <pmw3360_sample_fetch+0x5a>
	err = spi_cs_ctrl(dev_data, true);
    4db4:	482c      	ldr	r0, [pc, #176]	; (4e68 <pmw3360_sample_fetch+0xcc>)
    4db6:	2101      	movs	r1, #1
    4db8:	f7ff fbce 	bl	4558 <spi_cs_ctrl>
	if (err) {
    4dbc:	4604      	mov	r4, r0
    4dbe:	bb08      	cbnz	r0, 4e04 <pmw3360_sample_fetch+0x68>
	uint8_t reg_buf[] = {
    4dc0:	2350      	movs	r3, #80	; 0x50
    4dc2:	f88d 3004 	strb.w	r3, [sp, #4]
	const struct spi_buf tx_buf = {
    4dc6:	ab01      	add	r3, sp, #4
    4dc8:	9304      	str	r3, [sp, #16]
    4dca:	2601      	movs	r6, #1
	const struct spi_buf_set tx = {
    4dcc:	ab04      	add	r3, sp, #16
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    4dce:	68a8      	ldr	r0, [r5, #8]
	const struct spi_buf tx_buf = {
    4dd0:	9605      	str	r6, [sp, #20]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    4dd2:	a906      	add	r1, sp, #24
	const struct spi_buf_set tx = {
    4dd4:	e9cd 3606 	strd	r3, r6, [sp, #24]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    4dd8:	f7ff fbb2 	bl	4540 <spi_write.constprop.0>
	if (err) {
    4ddc:	4604      	mov	r4, r0
    4dde:	b1a0      	cbz	r0, 4e0a <pmw3360_sample_fetch+0x6e>
		LOG_ERR("Motion burst failed on SPI write");
    4de0:	4b22      	ldr	r3, [pc, #136]	; (4e6c <pmw3360_sample_fetch+0xd0>)
		LOG_ERR("Motion burst failed on SPI read");
    4de2:	9311      	str	r3, [sp, #68]	; 0x44
    4de4:	4822      	ldr	r0, [pc, #136]	; (4e70 <pmw3360_sample_fetch+0xd4>)
    4de6:	2302      	movs	r3, #2
    4de8:	aa10      	add	r2, sp, #64	; 0x40
    4dea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4dee:	9310      	str	r3, [sp, #64]	; 0x40
    4df0:	f003 f90c 	bl	800c <z_log_msg2_static_create.constprop.0>
		return err;
    4df4:	e006      	b.n	4e04 <pmw3360_sample_fetch+0x68>
		err = reg_write(dev_data, PMW3360_REG_MOTION_BURST, 0x00);
    4df6:	2150      	movs	r1, #80	; 0x50
    4df8:	4628      	mov	r0, r5
    4dfa:	f003 f90a 	bl	8012 <reg_write>
		if (err) {
    4dfe:	4604      	mov	r4, r0
    4e00:	2800      	cmp	r0, #0
    4e02:	d0d7      	beq.n	4db4 <pmw3360_sample_fetch+0x18>
}
    4e04:	4620      	mov	r0, r4
    4e06:	b013      	add	sp, #76	; 0x4c
    4e08:	bdf0      	pop	{r4, r5, r6, r7, pc}
	k_busy_wait(T_SRAD_MOTBR);
    4e0a:	2023      	movs	r0, #35	; 0x23
    4e0c:	f003 f8fc 	bl	8008 <k_busy_wait>
	const struct spi_buf rx_buf = {
    4e10:	ab02      	add	r3, sp, #8
    4e12:	9308      	str	r3, [sp, #32]
    4e14:	2306      	movs	r3, #6
    4e16:	9309      	str	r3, [sp, #36]	; 0x24
	const struct spi_buf_set rx = {
    4e18:	ab08      	add	r3, sp, #32
    4e1a:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28
	err = spi_read(dev_data->spi_dev, &spi_cfg, &rx);
    4e1e:	68a8      	ldr	r0, [r5, #8]
    4e20:	6883      	ldr	r3, [r0, #8]
    4e22:	4914      	ldr	r1, [pc, #80]	; (4e74 <pmw3360_sample_fetch+0xd8>)
    4e24:	681f      	ldr	r7, [r3, #0]
    4e26:	4622      	mov	r2, r4
    4e28:	ab0a      	add	r3, sp, #40	; 0x28
    4e2a:	47b8      	blx	r7
	if (err) {
    4e2c:	4604      	mov	r4, r0
    4e2e:	b108      	cbz	r0, 4e34 <pmw3360_sample_fetch+0x98>
		LOG_ERR("Motion burst failed on SPI read");
    4e30:	4b11      	ldr	r3, [pc, #68]	; (4e78 <pmw3360_sample_fetch+0xdc>)
    4e32:	e7d6      	b.n	4de2 <pmw3360_sample_fetch+0x46>
	err = spi_cs_ctrl(dev_data, false);
    4e34:	4601      	mov	r1, r0
    4e36:	480c      	ldr	r0, [pc, #48]	; (4e68 <pmw3360_sample_fetch+0xcc>)
    4e38:	f7ff fb8e 	bl	4558 <spi_cs_ctrl>
	if (err) {
    4e3c:	4604      	mov	r4, r0
    4e3e:	2800      	cmp	r0, #0
    4e40:	d1e0      	bne.n	4e04 <pmw3360_sample_fetch+0x68>
	k_busy_wait(T_BEXIT);
    4e42:	4630      	mov	r0, r6
    4e44:	f003 f8e0 	bl	8008 <k_busy_wait>
			dev_data->x = -x;
    4e48:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    4e4c:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
	dev_data->last_read_burst = true;
    4e50:	f885 6069 	strb.w	r6, [r5, #105]	; 0x69
			dev_data->x = -x;
    4e54:	425b      	negs	r3, r3
    4e56:	832b      	strh	r3, [r5, #24]
			dev_data->y = y;
    4e58:	836a      	strh	r2, [r5, #26]
    4e5a:	e7d3      	b.n	4e04 <pmw3360_sample_fetch+0x68>
		return -ENOTSUP;
    4e5c:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4e60:	e7d0      	b.n	4e04 <pmw3360_sample_fetch+0x68>
		return -EBUSY;
    4e62:	f06f 040f 	mvn.w	r4, #15
    4e66:	e7cd      	b.n	4e04 <pmw3360_sample_fetch+0x68>
    4e68:	20000640 	.word	0x20000640
    4e6c:	000097ed 	.word	0x000097ed
    4e70:	00008908 	.word	0x00008908
    4e74:	00008b5c 	.word	0x00008b5c
    4e78:	0000980e 	.word	0x0000980e

00004e7c <pmw3360_init>:
{
    4e7c:	b5f0      	push	{r4, r5, r6, r7, lr}
	k_work_init(&dev_data->trigger_handler_work, trigger_handler);
    4e7e:	4d45      	ldr	r5, [pc, #276]	; (4f94 <pmw3360_init+0x118>)
    4e80:	4945      	ldr	r1, [pc, #276]	; (4f98 <pmw3360_init+0x11c>)
{
    4e82:	b087      	sub	sp, #28
	k_work_init(&dev_data->trigger_handler_work, trigger_handler);
    4e84:	f105 0020 	add.w	r0, r5, #32
    4e88:	f003 fa77 	bl	837a <k_work_init>
    4e8c:	4843      	ldr	r0, [pc, #268]	; (4f9c <pmw3360_init+0x120>)
    4e8e:	f000 ffa1 	bl	5dd4 <z_impl_device_get_binding>
	dev_data->cs_gpio_dev =
    4e92:	6028      	str	r0, [r5, #0]
	if (!dev_data->cs_gpio_dev) {
    4e94:	b960      	cbnz	r0, 4eb0 <pmw3360_init+0x34>
		LOG_ERR("Cannot get CS GPIO device");
    4e96:	4b42      	ldr	r3, [pc, #264]	; (4fa0 <pmw3360_init+0x124>)
		LOG_ERR("Cannot get SPI device");
    4e98:	9305      	str	r3, [sp, #20]
    4e9a:	4842      	ldr	r0, [pc, #264]	; (4fa4 <pmw3360_init+0x128>)
    4e9c:	2302      	movs	r3, #2
    4e9e:	aa04      	add	r2, sp, #16
    4ea0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4ea4:	9304      	str	r3, [sp, #16]
		return -ENXIO;
    4ea6:	f06f 0405 	mvn.w	r4, #5
		LOG_ERR("Cannot get SPI device");
    4eaa:	f003 f8af 	bl	800c <z_log_msg2_static_create.constprop.0>
	if (err) {
    4eae:	e012      	b.n	4ed6 <pmw3360_init+0x5a>
	struct gpio_driver_data *data =
    4eb0:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
    4eb2:	6881      	ldr	r1, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    4eb4:	6813      	ldr	r3, [r2, #0]
    4eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    4eba:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    4ebc:	680b      	ldr	r3, [r1, #0]
    4ebe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4ec2:	2106      	movs	r1, #6
    4ec4:	4798      	blx	r3
	if (!err) {
    4ec6:	4604      	mov	r4, r0
    4ec8:	b940      	cbnz	r0, 4edc <pmw3360_init+0x60>
		err = spi_cs_ctrl(dev_data, false);
    4eca:	4601      	mov	r1, r0
    4ecc:	4628      	mov	r0, r5
    4ece:	f7ff fb43 	bl	4558 <spi_cs_ctrl>
	if (err) {
    4ed2:	4604      	mov	r4, r0
    4ed4:	b168      	cbz	r0, 4ef2 <pmw3360_init+0x76>
}
    4ed6:	4620      	mov	r0, r4
    4ed8:	b007      	add	sp, #28
    4eda:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Cannot configure CS PIN");
    4edc:	4b32      	ldr	r3, [pc, #200]	; (4fa8 <pmw3360_init+0x12c>)
		LOG_ERR("Cannot add IRQ GPIO callback");
    4ede:	9305      	str	r3, [sp, #20]
    4ee0:	4830      	ldr	r0, [pc, #192]	; (4fa4 <pmw3360_init+0x128>)
    4ee2:	2302      	movs	r3, #2
    4ee4:	aa04      	add	r2, sp, #16
    4ee6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4eea:	9304      	str	r3, [sp, #16]
    4eec:	f003 f88e 	bl	800c <z_log_msg2_static_create.constprop.0>
    4ef0:	e7f1      	b.n	4ed6 <pmw3360_init+0x5a>
    4ef2:	482a      	ldr	r0, [pc, #168]	; (4f9c <pmw3360_init+0x120>)
    4ef4:	f000 ff6e 	bl	5dd4 <z_impl_device_get_binding>
	dev_data->irq_gpio_dev =
    4ef8:	6068      	str	r0, [r5, #4]
	if (!dev_data->irq_gpio_dev) {
    4efa:	b908      	cbnz	r0, 4f00 <pmw3360_init+0x84>
		LOG_ERR("Cannot get IRQ GPIO device");
    4efc:	4b2b      	ldr	r3, [pc, #172]	; (4fac <pmw3360_init+0x130>)
    4efe:	e7cb      	b.n	4e98 <pmw3360_init+0x1c>
	struct gpio_driver_data *data =
    4f00:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
    4f02:	6881      	ldr	r1, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    4f04:	6813      	ldr	r3, [r2, #0]
    4f06:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    4f0a:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    4f0c:	680b      	ldr	r3, [r1, #0]
    4f0e:	4a28      	ldr	r2, [pc, #160]	; (4fb0 <pmw3360_init+0x134>)
    4f10:	2114      	movs	r1, #20
    4f12:	4798      	blx	r3
	if (err) {
    4f14:	4604      	mov	r4, r0
    4f16:	b108      	cbz	r0, 4f1c <pmw3360_init+0xa0>
		LOG_ERR("Cannot configure IRQ GPIO");
    4f18:	4b26      	ldr	r3, [pc, #152]	; (4fb4 <pmw3360_init+0x138>)
    4f1a:	e7e0      	b.n	4ede <pmw3360_init+0x62>
	callback->handler = handler;
    4f1c:	4b26      	ldr	r3, [pc, #152]	; (4fb8 <pmw3360_init+0x13c>)
	err = gpio_add_callback(dev_data->irq_gpio_dev, &dev_data->irq_gpio_cb);
    4f1e:	6868      	ldr	r0, [r5, #4]
    4f20:	612b      	str	r3, [r5, #16]
	callback->pin_mask = pin_mask;
    4f22:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    4f26:	616b      	str	r3, [r5, #20]
	if (api->manage_callback == NULL) {
    4f28:	6883      	ldr	r3, [r0, #8]
    4f2a:	69db      	ldr	r3, [r3, #28]
    4f2c:	b13b      	cbz	r3, 4f3e <pmw3360_init+0xc2>
	return api->manage_callback(port, callback, true);
    4f2e:	2201      	movs	r2, #1
    4f30:	f105 010c 	add.w	r1, r5, #12
    4f34:	4798      	blx	r3
	if (err) {
    4f36:	4604      	mov	r4, r0
    4f38:	b318      	cbz	r0, 4f82 <pmw3360_init+0x106>
		LOG_ERR("Cannot add IRQ GPIO callback");
    4f3a:	4b20      	ldr	r3, [pc, #128]	; (4fbc <pmw3360_init+0x140>)
    4f3c:	e7cf      	b.n	4ede <pmw3360_init+0x62>
		return -ENOTSUP;
    4f3e:	f06f 0485 	mvn.w	r4, #133	; 0x85
    4f42:	e7fa      	b.n	4f3a <pmw3360_init+0xbe>
	k_work_init_delayable(&dev_data->init_work, pmw3360_async_init);
    4f44:	f105 0030 	add.w	r0, r5, #48	; 0x30
    4f48:	491d      	ldr	r1, [pc, #116]	; (4fc0 <pmw3360_init+0x144>)
    4f4a:	f003 fa41 	bl	83d0 <k_work_init_delayable>
			K_MSEC(async_init_delay[dev_data->async_init_step]));
    4f4e:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
    4f52:	4b1c      	ldr	r3, [pc, #112]	; (4fc4 <pmw3360_init+0x148>)
    4f54:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
    4f58:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    4f5c:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    4f60:	4621      	mov	r1, r4
    4f62:	f240 30e7 	movw	r0, #999	; 0x3e7
    4f66:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    4f6a:	2300      	movs	r3, #0
    4f6c:	fbc6 0107 	smlal	r0, r1, r6, r7
    4f70:	f7fb f8b6 	bl	e0 <__aeabi_uldivmod>
    4f74:	4602      	mov	r2, r0
    4f76:	460b      	mov	r3, r1
	k_work_schedule(&dev_data->init_work,
    4f78:	f105 0030 	add.w	r0, r5, #48	; 0x30
    4f7c:	f001 fbe2 	bl	6744 <k_work_schedule>
	return err;
    4f80:	e7a9      	b.n	4ed6 <pmw3360_init+0x5a>
    4f82:	4811      	ldr	r0, [pc, #68]	; (4fc8 <pmw3360_init+0x14c>)
    4f84:	f000 ff26 	bl	5dd4 <z_impl_device_get_binding>
	dev_data->spi_dev = device_get_binding(PMW3360_SPI_DEV_NAME);
    4f88:	60a8      	str	r0, [r5, #8]
	if (!dev_data->spi_dev) {
    4f8a:	2800      	cmp	r0, #0
    4f8c:	d1da      	bne.n	4f44 <pmw3360_init+0xc8>
		LOG_ERR("Cannot get SPI device");
    4f8e:	4b0f      	ldr	r3, [pc, #60]	; (4fcc <pmw3360_init+0x150>)
    4f90:	e782      	b.n	4e98 <pmw3360_init+0x1c>
    4f92:	bf00      	nop
    4f94:	20000640 	.word	0x20000640
    4f98:	000049d9 	.word	0x000049d9
    4f9c:	0000929f 	.word	0x0000929f
    4fa0:	0000982e 	.word	0x0000982e
    4fa4:	00008908 	.word	0x00008908
    4fa8:	00009848 	.word	0x00009848
    4fac:	00009860 	.word	0x00009860
    4fb0:	00010010 	.word	0x00010010
    4fb4:	0000987b 	.word	0x0000987b
    4fb8:	0000498d 	.word	0x0000498d
    4fbc:	00009895 	.word	0x00009895
    4fc0:	0000449d 	.word	0x0000449d
    4fc4:	00008b20 	.word	0x00008b20
    4fc8:	00009401 	.word	0x00009401
    4fcc:	000098b2 	.word	0x000098b2

00004fd0 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    4fd0:	4a02      	ldr	r2, [pc, #8]	; (4fdc <nvmc_wait+0xc>)
    4fd2:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    4fd6:	2b00      	cmp	r3, #0
    4fd8:	d0fb      	beq.n	4fd2 <nvmc_wait+0x2>
}
    4fda:	4770      	bx	lr
    4fdc:	4001e000 	.word	0x4001e000

00004fe0 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    4fe0:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    4fe2:	f003 f835 	bl	8050 <nrf52_errata_136>
    4fe6:	b140      	cbz	r0, 4ffa <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    4fe8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4fec:	2200      	movs	r2, #0
    4fee:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    4ff2:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    4ff6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    4ffa:	f003 f829 	bl	8050 <nrf52_errata_136>
    4ffe:	2800      	cmp	r0, #0
    5000:	d046      	beq.n	5090 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    5002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5006:	4b4c      	ldr	r3, [pc, #304]	; (5138 <SystemInit+0x158>)
    5008:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    500c:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    5010:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    5014:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    5018:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    501c:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    5020:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    5024:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    5028:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    502c:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    5030:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    5034:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    5038:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    503c:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    5040:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    5044:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    5048:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    504c:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    5050:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    5054:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    5058:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    505c:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    5060:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    5064:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    5068:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    506c:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    5070:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    5074:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    5078:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    507c:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    5080:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    5084:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    5088:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    508c:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    5090:	f002 ffde 	bl	8050 <nrf52_errata_136>
    5094:	b148      	cbz	r0, 50aa <SystemInit+0xca>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    5096:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    509a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    509e:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    50a0:	bf44      	itt	mi
    50a2:	f06f 0201 	mvnmi.w	r2, #1
    50a6:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    50aa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)
            if (var1 == 0x10)
    50ae:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    50b2:	2a10      	cmp	r2, #16
    50b4:	d10e      	bne.n	50d4 <SystemInit+0xf4>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    50b6:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    50ba:	2b03      	cmp	r3, #3
    50bc:	d802      	bhi.n	50c4 <SystemInit+0xe4>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    50be:	4a1f      	ldr	r2, [pc, #124]	; (513c <SystemInit+0x15c>)
    50c0:	5cd3      	ldrb	r3, [r2, r3]
    50c2:	b13b      	cbz	r3, 50d4 <SystemInit+0xf4>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    50c4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    50c8:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    50cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    50d0:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    50d4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    50d8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    50dc:	2a00      	cmp	r2, #0
    50de:	db03      	blt.n	50e8 <SystemInit+0x108>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    50e0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    50e4:	2b00      	cmp	r3, #0
    50e6:	da22      	bge.n	512e <SystemInit+0x14e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    50e8:	4915      	ldr	r1, [pc, #84]	; (5140 <SystemInit+0x160>)
    50ea:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    50ec:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    50f0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    50f4:	2412      	movs	r4, #18
    nvmc_wait();
    50f6:	f7ff ff6b 	bl	4fd0 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    50fa:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    50fe:	f7ff ff67 	bl	4fd0 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    5102:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    5106:	f7ff ff63 	bl	4fd0 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    510a:	2300      	movs	r3, #0
    510c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    5110:	f7ff ff5e 	bl	4fd0 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    5114:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5118:	490a      	ldr	r1, [pc, #40]	; (5144 <SystemInit+0x164>)
    511a:	4b0b      	ldr	r3, [pc, #44]	; (5148 <SystemInit+0x168>)
    511c:	68ca      	ldr	r2, [r1, #12]
    511e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5122:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5124:	60cb      	str	r3, [r1, #12]
    5126:	f3bf 8f4f 	dsb	sy
    __NOP();
    512a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    512c:	e7fd      	b.n	512a <SystemInit+0x14a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    512e:	4b07      	ldr	r3, [pc, #28]	; (514c <SystemInit+0x16c>)
    5130:	4a07      	ldr	r2, [pc, #28]	; (5150 <SystemInit+0x170>)
    5132:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    5134:	bd10      	pop	{r4, pc}
    5136:	bf00      	nop
    5138:	4000c000 	.word	0x4000c000
    513c:	0000a8ce 	.word	0x0000a8ce
    5140:	4001e000 	.word	0x4001e000
    5144:	e000ed00 	.word	0xe000ed00
    5148:	05fa0004 	.word	0x05fa0004
    514c:	20000088 	.word	0x20000088
    5150:	03d09000 	.word	0x03d09000

00005154 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    5154:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    5156:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    5158:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    515a:	fab2 f382 	clz	r3, r2
    515e:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    5162:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    5164:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    5166:	d014      	beq.n	5192 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5168:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    516c:	fa05 f303 	lsl.w	r3, r5, r3
    5170:	ea22 0303 	bic.w	r3, r2, r3
    5174:	e850 6f00 	ldrex	r6, [r0]
    5178:	4296      	cmp	r6, r2
    517a:	d104      	bne.n	5186 <nrfx_flag32_alloc+0x32>
    517c:	e840 3c00 	strex	ip, r3, [r0]
    5180:	f1bc 0f00 	cmp.w	ip, #0
    5184:	d1f6      	bne.n	5174 <nrfx_flag32_alloc+0x20>
    5186:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    518a:	d1e5      	bne.n	5158 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    518c:	4802      	ldr	r0, [pc, #8]	; (5198 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    518e:	700c      	strb	r4, [r1, #0]
}
    5190:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    5192:	4802      	ldr	r0, [pc, #8]	; (519c <nrfx_flag32_alloc+0x48>)
    5194:	e7fc      	b.n	5190 <nrfx_flag32_alloc+0x3c>
    5196:	bf00      	nop
    5198:	0bad0000 	.word	0x0bad0000
    519c:	0bad0002 	.word	0x0bad0002

000051a0 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    51a0:	6803      	ldr	r3, [r0, #0]
    51a2:	40cb      	lsrs	r3, r1
    51a4:	07db      	lsls	r3, r3, #31
{
    51a6:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    51a8:	d415      	bmi.n	51d6 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    51aa:	2301      	movs	r3, #1
    51ac:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    51b0:	6803      	ldr	r3, [r0, #0]
    51b2:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    51b6:	ea41 0203 	orr.w	r2, r1, r3
    51ba:	e850 4f00 	ldrex	r4, [r0]
    51be:	429c      	cmp	r4, r3
    51c0:	d104      	bne.n	51cc <nrfx_flag32_free+0x2c>
    51c2:	e840 2c00 	strex	ip, r2, [r0]
    51c6:	f1bc 0f00 	cmp.w	ip, #0
    51ca:	d1f6      	bne.n	51ba <nrfx_flag32_free+0x1a>
    51cc:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    51d0:	d1ee      	bne.n	51b0 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    51d2:	4802      	ldr	r0, [pc, #8]	; (51dc <nrfx_flag32_free+0x3c>)
}
    51d4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    51d6:	4802      	ldr	r0, [pc, #8]	; (51e0 <nrfx_flag32_free+0x40>)
    51d8:	e7fc      	b.n	51d4 <nrfx_flag32_free+0x34>
    51da:	bf00      	nop
    51dc:	0bad0000 	.word	0x0bad0000
    51e0:	0bad0004 	.word	0x0bad0004

000051e4 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    51e4:	4b05      	ldr	r3, [pc, #20]	; (51fc <nrfx_clock_init+0x18>)
    51e6:	791a      	ldrb	r2, [r3, #4]
    51e8:	b92a      	cbnz	r2, 51f6 <nrfx_clock_init+0x12>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    }
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    51ea:	715a      	strb	r2, [r3, #5]
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    51ec:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    51ee:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    51f0:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    51f2:	4803      	ldr	r0, [pc, #12]	; (5200 <nrfx_clock_init+0x1c>)
    51f4:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    51f6:	4803      	ldr	r0, [pc, #12]	; (5204 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    51f8:	4770      	bx	lr
    51fa:	bf00      	nop
    51fc:	20000a20 	.word	0x20000a20
    5200:	0bad0000 	.word	0x0bad0000
    5204:	0bad000c 	.word	0x0bad000c

00005208 <nrfx_clock_calibration_start>:
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    5208:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    520c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    5210:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    5214:	03c8      	lsls	r0, r1, #15
    5216:	d516      	bpl.n	5246 <nrfx_clock_calibration_start+0x3e>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &clk_src))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)
    5218:	07d1      	lsls	r1, r2, #31
    521a:	d514      	bpl.n	5246 <nrfx_clock_calibration_start+0x3e>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    521c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    5220:	03d2      	lsls	r2, r2, #15
    5222:	d510      	bpl.n	5246 <nrfx_clock_calibration_start+0x3e>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_LFCLK, NULL))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (m_clock_cb.cal_state == CAL_STATE_IDLE)
    5224:	490a      	ldr	r1, [pc, #40]	; (5250 <nrfx_clock_calibration_start+0x48>)
    5226:	794a      	ldrb	r2, [r1, #5]
    5228:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    522c:	b96a      	cbnz	r2, 524a <nrfx_clock_calibration_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    522e:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    5232:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    nrfx_err_t err_code = NRFX_SUCCESS;
    5236:	4807      	ldr	r0, [pc, #28]	; (5254 <nrfx_clock_calibration_start+0x4c>)
    p_reg->INTENSET = mask;
    5238:	2208      	movs	r2, #8
    523a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_CAL;
    523e:	2201      	movs	r2, #1
    5240:	714a      	strb	r2, [r1, #5]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5242:	611a      	str	r2, [r3, #16]
}
    5244:	4770      	bx	lr
        return NRFX_ERROR_INVALID_STATE;
    5246:	4804      	ldr	r0, [pc, #16]	; (5258 <nrfx_clock_calibration_start+0x50>)
    5248:	4770      	bx	lr
#endif
        nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_CAL);
    }
    else
    {
        err_code = NRFX_ERROR_BUSY;
    524a:	4804      	ldr	r0, [pc, #16]	; (525c <nrfx_clock_calibration_start+0x54>)

    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    524c:	4770      	bx	lr
    524e:	bf00      	nop
    5250:	20000a20 	.word	0x20000a20
    5254:	0bad0000 	.word	0x0bad0000
    5258:	0bad0005 	.word	0x0bad0005
    525c:	0bad000b 	.word	0x0bad000b

00005260 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5260:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    5264:	b510      	push	{r4, lr}
    5266:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    526a:	b152      	cbz	r2, 5282 <nrfx_power_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    526c:	2000      	movs	r0, #0
    526e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    5272:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    5276:	2201      	movs	r2, #1
    5278:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    527c:	4b16      	ldr	r3, [pc, #88]	; (52d8 <nrfx_power_clock_irq_handler+0x78>)
    527e:	681b      	ldr	r3, [r3, #0]
    5280:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    5282:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5286:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    528a:	b15a      	cbz	r2, 52a4 <nrfx_power_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    528c:	2200      	movs	r2, #0
    528e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    5292:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENCLR = mask;
    5296:	2202      	movs	r2, #2
    5298:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    529c:	4b0e      	ldr	r3, [pc, #56]	; (52d8 <nrfx_power_clock_irq_handler+0x78>)
    529e:	2001      	movs	r0, #1
    52a0:	681b      	ldr	r3, [r3, #0]
    52a2:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    52a4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    52a8:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CTTO);
    }
#endif // NRF_CLOCK_HAS_CALIBRATION_TIMER && NRFX_CHECK(NRFX_CLOCK_CONFIG_CT_ENABLED)

    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_DONE) &&
    52ac:	b192      	cbz	r2, 52d4 <nrfx_power_clock_irq_handler+0x74>
    return p_reg->INTENSET & mask;
    52ae:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    52b2:	0712      	lsls	r2, r2, #28
    52b4:	d50e      	bpl.n	52d4 <nrfx_power_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    52b6:	2200      	movs	r2, #0
    52b8:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    52bc:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    p_reg->INTENCLR = mask;
    52c0:	2108      	movs	r1, #8
    52c2:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
        *(volatile uint32_t *)0x40000C34 = 0x00000000;
#endif
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_DONE");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    52c6:	4b04      	ldr	r3, [pc, #16]	; (52d8 <nrfx_power_clock_irq_handler+0x78>)
    52c8:	715a      	strb	r2, [r3, #5]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    52ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    52ce:	681b      	ldr	r3, [r3, #0]
    52d0:	2003      	movs	r0, #3
    52d2:	4718      	bx	r3
}
    52d4:	bd10      	pop	{r4, pc}
    52d6:	bf00      	nop
    52d8:	20000a20 	.word	0x20000a20

000052dc <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    52dc:	4b03      	ldr	r3, [pc, #12]	; (52ec <pin_in_use_by_te+0x10>)
    52de:	3008      	adds	r0, #8
    52e0:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    52e4:	f3c0 1040 	ubfx	r0, r0, #5, #1
    52e8:	4770      	bx	lr
    52ea:	bf00      	nop
    52ec:	2000008c 	.word	0x2000008c

000052f0 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    52f0:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    52f2:	f100 0308 	add.w	r3, r0, #8
    52f6:	4c0c      	ldr	r4, [pc, #48]	; (5328 <call_handler+0x38>)
    52f8:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    52fc:	05da      	lsls	r2, r3, #23
{
    52fe:	4605      	mov	r5, r0
    5300:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5302:	d507      	bpl.n	5314 <call_handler+0x24>
    5304:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    5308:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    530c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    5310:	6852      	ldr	r2, [r2, #4]
    5312:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    5314:	68a3      	ldr	r3, [r4, #8]
    5316:	b12b      	cbz	r3, 5324 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    5318:	68e2      	ldr	r2, [r4, #12]
    531a:	4631      	mov	r1, r6
    531c:	4628      	mov	r0, r5
    }
}
    531e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    5322:	4718      	bx	r3
}
    5324:	bd70      	pop	{r4, r5, r6, pc}
    5326:	bf00      	nop
    5328:	2000008c 	.word	0x2000008c

0000532c <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    532c:	4a12      	ldr	r2, [pc, #72]	; (5378 <release_handler+0x4c>)
    532e:	3008      	adds	r0, #8
{
    5330:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    5332:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    5336:	05d9      	lsls	r1, r3, #23
    5338:	d51b      	bpl.n	5372 <release_handler+0x46>
    533a:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    533e:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    5342:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    5346:	f102 0410 	add.w	r4, r2, #16
    534a:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    534c:	f834 3b02 	ldrh.w	r3, [r4], #2
    5350:	f413 7f80 	tst.w	r3, #256	; 0x100
    5354:	d003      	beq.n	535e <release_handler+0x32>
    5356:	f3c3 2343 	ubfx	r3, r3, #9, #4
    535a:	4299      	cmp	r1, r3
    535c:	d009      	beq.n	5372 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    535e:	3001      	adds	r0, #1
    5360:	2820      	cmp	r0, #32
    5362:	d1f3      	bne.n	534c <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    5364:	2300      	movs	r3, #0
    5366:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    536a:	4804      	ldr	r0, [pc, #16]	; (537c <release_handler+0x50>)
}
    536c:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    536e:	f7ff bf17 	b.w	51a0 <nrfx_flag32_free>
}
    5372:	bc10      	pop	{r4}
    5374:	4770      	bx	lr
    5376:	bf00      	nop
    5378:	2000008c 	.word	0x2000008c
    537c:	200000e0 	.word	0x200000e0

00005380 <pin_handler_trigger_uninit>:
{
    5380:	b538      	push	{r3, r4, r5, lr}
    5382:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    5384:	f7ff ffaa 	bl	52dc <pin_in_use_by_te>
    5388:	4c09      	ldr	r4, [pc, #36]	; (53b0 <pin_handler_trigger_uninit+0x30>)
    538a:	f102 0508 	add.w	r5, r2, #8
    538e:	b140      	cbz	r0, 53a2 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5390:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    5394:	4907      	ldr	r1, [pc, #28]	; (53b4 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    5396:	0b5b      	lsrs	r3, r3, #13
    5398:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    539c:	2000      	movs	r0, #0
    539e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    53a2:	4610      	mov	r0, r2
    53a4:	f7ff ffc2 	bl	532c <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    53a8:	2300      	movs	r3, #0
    53aa:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    53ae:	bd38      	pop	{r3, r4, r5, pc}
    53b0:	2000008c 	.word	0x2000008c
    53b4:	40006000 	.word	0x40006000

000053b8 <nrfx_gpiote_input_configure>:
{
    53b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    53bc:	4604      	mov	r4, r0
    53be:	461e      	mov	r6, r3
    if (p_input_config)
    53c0:	b309      	cbz	r1, 5406 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    53c2:	4f4d      	ldr	r7, [pc, #308]	; (54f8 <nrfx_gpiote_input_configure+0x140>)
    53c4:	f100 0808 	add.w	r8, r0, #8
    53c8:	f837 5018 	ldrh.w	r5, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    53cc:	07ab      	lsls	r3, r5, #30
    53ce:	d506      	bpl.n	53de <nrfx_gpiote_input_configure+0x26>
    53d0:	f7ff ff84 	bl	52dc <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    53d4:	b118      	cbz	r0, 53de <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    53d6:	4849      	ldr	r0, [pc, #292]	; (54fc <nrfx_gpiote_input_configure+0x144>)
}
    53d8:	b002      	add	sp, #8
    53da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    53de:	f004 001f 	and.w	r0, r4, #31
    53e2:	0080      	lsls	r0, r0, #2
    53e4:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    53e8:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    53ea:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    53ee:	f025 0502 	bic.w	r5, r5, #2
    cnf &= ~to_update;
    53f2:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    53f6:	f045 0501 	orr.w	r5, r5, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    53fa:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    53fe:	f827 5018 	strh.w	r5, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    5402:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_trigger_config)
    5406:	b192      	cbz	r2, 542e <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5408:	4b3b      	ldr	r3, [pc, #236]	; (54f8 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    540a:	7815      	ldrb	r5, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    540c:	6852      	ldr	r2, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    540e:	f104 0008 	add.w	r0, r4, #8
    5412:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    5416:	078f      	lsls	r7, r1, #30
    5418:	d50c      	bpl.n	5434 <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
    541a:	2a00      	cmp	r2, #0
    541c:	d1db      	bne.n	53d6 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    541e:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    5422:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    5426:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    542a:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    542e:	bbce      	cbnz	r6, 54a4 <nrfx_gpiote_input_configure+0xec>
    return NRFX_SUCCESS;
    5430:	4833      	ldr	r0, [pc, #204]	; (5500 <nrfx_gpiote_input_configure+0x148>)
    5432:	e7d1      	b.n	53d8 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    5434:	f021 0120 	bic.w	r1, r1, #32
    5438:	04c9      	lsls	r1, r1, #19
    543a:	0cc9      	lsrs	r1, r1, #19
    543c:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    5440:	2a00      	cmp	r2, #0
    5442:	d0ec      	beq.n	541e <nrfx_gpiote_input_configure+0x66>
                if (!edge)
    5444:	2d03      	cmp	r5, #3
    5446:	d8c6      	bhi.n	53d6 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    5448:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    544a:	b92d      	cbnz	r5, 5458 <nrfx_gpiote_input_configure+0xa0>
    544c:	4a2d      	ldr	r2, [pc, #180]	; (5504 <nrfx_gpiote_input_configure+0x14c>)
    544e:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    5452:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    5456:	e7e2      	b.n	541e <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5458:	00ba      	lsls	r2, r7, #2
    545a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    545e:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    5462:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    5466:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    546a:	f02c 0c03 	bic.w	ip, ip, #3
    546e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    5472:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    5476:	f42c 3c47 	bic.w	ip, ip, #203776	; 0x31c00
    547a:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    547e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    5482:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    5486:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    548a:	f40c 5cf8 	and.w	ip, ip, #7936	; 0x1f00
    548e:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
    5492:	ea4c 0c0e 	orr.w	ip, ip, lr
    5496:	f041 0120 	orr.w	r1, r1, #32
    549a:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    549e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    54a2:	e7bc      	b.n	541e <nrfx_gpiote_input_configure+0x66>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    54a4:	e9d6 7600 	ldrd	r7, r6, [r6]
    release_handler(pin);
    54a8:	4620      	mov	r0, r4
    54aa:	f7ff ff3f 	bl	532c <release_handler>
    if (!handler)
    54ae:	2f00      	cmp	r7, #0
    54b0:	d0be      	beq.n	5430 <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    54b2:	4d11      	ldr	r5, [pc, #68]	; (54f8 <nrfx_gpiote_input_configure+0x140>)
    54b4:	682b      	ldr	r3, [r5, #0]
    54b6:	429f      	cmp	r7, r3
    54b8:	d104      	bne.n	54c4 <nrfx_gpiote_input_configure+0x10c>
    54ba:	686b      	ldr	r3, [r5, #4]
    54bc:	429e      	cmp	r6, r3
    54be:	d101      	bne.n	54c4 <nrfx_gpiote_input_configure+0x10c>
    54c0:	2200      	movs	r2, #0
    54c2:	e009      	b.n	54d8 <nrfx_gpiote_input_configure+0x120>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    54c4:	4810      	ldr	r0, [pc, #64]	; (5508 <nrfx_gpiote_input_configure+0x150>)
    54c6:	f10d 0107 	add.w	r1, sp, #7
    54ca:	f7ff fe43 	bl	5154 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    54ce:	4b0c      	ldr	r3, [pc, #48]	; (5500 <nrfx_gpiote_input_configure+0x148>)
    54d0:	4298      	cmp	r0, r3
    54d2:	d181      	bne.n	53d8 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    54d4:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    54d8:	f845 7032 	str.w	r7, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    54dc:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    54e0:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    54e2:	605e      	str	r6, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    54e4:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    54e8:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    54ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    54f0:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    54f4:	e79c      	b.n	5430 <nrfx_gpiote_input_configure+0x78>
    54f6:	bf00      	nop
    54f8:	2000008c 	.word	0x2000008c
    54fc:	0bad0004 	.word	0x0bad0004
    5500:	0bad0000 	.word	0x0bad0000
    5504:	40006000 	.word	0x40006000
    5508:	200000e0 	.word	0x200000e0

0000550c <nrfx_gpiote_output_configure>:
{
    550c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    550e:	4604      	mov	r4, r0
    if (p_config)
    5510:	b371      	cbz	r1, 5570 <nrfx_gpiote_output_configure+0x64>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5512:	4e37      	ldr	r6, [pc, #220]	; (55f0 <nrfx_gpiote_output_configure+0xe4>)
    5514:	f100 0708 	add.w	r7, r0, #8
    5518:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    551c:	07ab      	lsls	r3, r5, #30
    551e:	d404      	bmi.n	552a <nrfx_gpiote_output_configure+0x1e>
    5520:	f7ff fedc 	bl	52dc <pin_in_use_by_te>
    5524:	b108      	cbz	r0, 552a <nrfx_gpiote_output_configure+0x1e>
    return NRFX_SUCCESS;
    5526:	4833      	ldr	r0, [pc, #204]	; (55f4 <nrfx_gpiote_output_configure+0xe8>)
}
    5528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    552a:	f015 0f1c 	tst.w	r5, #28
    552e:	784b      	ldrb	r3, [r1, #1]
    5530:	d001      	beq.n	5536 <nrfx_gpiote_output_configure+0x2a>
    5532:	2b01      	cmp	r3, #1
    5534:	d0f7      	beq.n	5526 <nrfx_gpiote_output_configure+0x1a>
    *p_pin = pin_number & 0x1F;
    5536:	f004 001f 	and.w	r0, r4, #31
    553a:	0080      	lsls	r0, r0, #2
    553c:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    5540:	f891 e000 	ldrb.w	lr, [r1]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    5544:	f8d0 c700 	ldr.w	ip, [r0, #1792]	; 0x700
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    5548:	7889      	ldrb	r1, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    554a:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    554c:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    5550:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    5554:	f02c 0c07 	bic.w	ip, ip, #7
    5558:	ea43 030c 	orr.w	r3, r3, ip
    555c:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    5560:	f045 0503 	orr.w	r5, r5, #3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    5564:	f043 0301 	orr.w	r3, r3, #1
    5568:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    556c:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_task_config)
    5570:	b90a      	cbnz	r2, 5576 <nrfx_gpiote_output_configure+0x6a>
    return NRFX_SUCCESS;
    5572:	4821      	ldr	r0, [pc, #132]	; (55f8 <nrfx_gpiote_output_configure+0xec>)
    5574:	e7d8      	b.n	5528 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5576:	4e1e      	ldr	r6, [pc, #120]	; (55f0 <nrfx_gpiote_output_configure+0xe4>)
    5578:	f104 0708 	add.w	r7, r4, #8
    557c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    5580:	0783      	lsls	r3, r0, #30
    5582:	d5d0      	bpl.n	5526 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    5584:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    5588:	4661      	mov	r1, ip
    558a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    558c:	f020 0020 	bic.w	r0, r0, #32
    5590:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    5594:	04c0      	lsls	r0, r0, #19
    5596:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    559a:	0cc0      	lsrs	r0, r0, #19
    559c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    55a0:	2300      	movs	r3, #0
    55a2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    55a6:	7855      	ldrb	r5, [r2, #1]
    55a8:	2d00      	cmp	r5, #0
    55aa:	d0e2      	beq.n	5572 <nrfx_gpiote_output_configure+0x66>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    55ac:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    55b0:	7892      	ldrb	r2, [r2, #2]
    55b2:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    55b6:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    55ba:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    55be:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    55c2:	0223      	lsls	r3, r4, #8
    55c4:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    55c8:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    55ca:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    55ce:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    55d2:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    55d4:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    55d6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    55da:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    55de:	4313      	orrs	r3, r2
    55e0:	f040 0020 	orr.w	r0, r0, #32
    55e4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    55e8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    55ec:	e7c1      	b.n	5572 <nrfx_gpiote_output_configure+0x66>
    55ee:	bf00      	nop
    55f0:	2000008c 	.word	0x2000008c
    55f4:	0bad0004 	.word	0x0bad0004
    55f8:	0bad0000 	.word	0x0bad0000

000055fc <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    55fc:	4b01      	ldr	r3, [pc, #4]	; (5604 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    55fe:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    5602:	4770      	bx	lr
    5604:	2000008c 	.word	0x2000008c

00005608 <nrfx_gpiote_channel_get>:
{
    5608:	b508      	push	{r3, lr}
    560a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    560c:	f7ff fe66 	bl	52dc <pin_in_use_by_te>
    5610:	b138      	cbz	r0, 5622 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5612:	4b05      	ldr	r3, [pc, #20]	; (5628 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    5614:	4805      	ldr	r0, [pc, #20]	; (562c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5616:	3208      	adds	r2, #8
    5618:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    561c:	0b5b      	lsrs	r3, r3, #13
    561e:	700b      	strb	r3, [r1, #0]
}
    5620:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5622:	4803      	ldr	r0, [pc, #12]	; (5630 <nrfx_gpiote_channel_get+0x28>)
    5624:	e7fc      	b.n	5620 <nrfx_gpiote_channel_get+0x18>
    5626:	bf00      	nop
    5628:	2000008c 	.word	0x2000008c
    562c:	0bad0000 	.word	0x0bad0000
    5630:	0bad0004 	.word	0x0bad0004

00005634 <nrfx_gpiote_init>:
{
    5634:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    5636:	4c0f      	ldr	r4, [pc, #60]	; (5674 <nrfx_gpiote_init+0x40>)
    5638:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    563c:	b9bd      	cbnz	r5, 566e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    563e:	2240      	movs	r2, #64	; 0x40
    5640:	4629      	mov	r1, r5
    5642:	f104 0010 	add.w	r0, r4, #16
    5646:	f002 fad7 	bl	7bf8 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    564a:	2006      	movs	r0, #6
    564c:	f7fc ff98 	bl	2580 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5650:	4b09      	ldr	r3, [pc, #36]	; (5678 <nrfx_gpiote_init+0x44>)
    return err_code;
    5652:	480a      	ldr	r0, [pc, #40]	; (567c <nrfx_gpiote_init+0x48>)
    5654:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    5658:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    565c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    5660:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    5664:	2301      	movs	r3, #1
    5666:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    566a:	6563      	str	r3, [r4, #84]	; 0x54
}
    566c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    566e:	4804      	ldr	r0, [pc, #16]	; (5680 <nrfx_gpiote_init+0x4c>)
    5670:	e7fc      	b.n	566c <nrfx_gpiote_init+0x38>
    5672:	bf00      	nop
    5674:	2000008c 	.word	0x2000008c
    5678:	40006000 	.word	0x40006000
    567c:	0bad0000 	.word	0x0bad0000
    5680:	0bad0005 	.word	0x0bad0005

00005684 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    5684:	4b03      	ldr	r3, [pc, #12]	; (5694 <nrfx_gpiote_is_init+0x10>)
    5686:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    568a:	3800      	subs	r0, #0
    568c:	bf18      	it	ne
    568e:	2001      	movne	r0, #1
    5690:	4770      	bx	lr
    5692:	bf00      	nop
    5694:	2000008c 	.word	0x2000008c

00005698 <nrfx_gpiote_channel_free>:
{
    5698:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    569a:	4801      	ldr	r0, [pc, #4]	; (56a0 <nrfx_gpiote_channel_free+0x8>)
    569c:	f7ff bd80 	b.w	51a0 <nrfx_flag32_free>
    56a0:	200000dc 	.word	0x200000dc

000056a4 <nrfx_gpiote_channel_alloc>:
{
    56a4:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    56a6:	4801      	ldr	r0, [pc, #4]	; (56ac <nrfx_gpiote_channel_alloc+0x8>)
    56a8:	f7ff bd54 	b.w	5154 <nrfx_flag32_alloc>
    56ac:	200000dc 	.word	0x200000dc

000056b0 <nrfx_gpiote_trigger_enable>:
{
    56b0:	b510      	push	{r4, lr}
    56b2:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    56b4:	f7ff fe12 	bl	52dc <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    56b8:	f102 0408 	add.w	r4, r2, #8
    56bc:	4b1c      	ldr	r3, [pc, #112]	; (5730 <nrfx_gpiote_trigger_enable+0x80>)
    56be:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    56c2:	b1e0      	cbz	r0, 56fe <nrfx_gpiote_trigger_enable+0x4e>
    56c4:	f013 0402 	ands.w	r4, r3, #2
    56c8:	d119      	bne.n	56fe <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    56ca:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    56cc:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    56ce:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    56d2:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    56d6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    56da:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    56de:	6004      	str	r4, [r0, #0]
    56e0:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    56e2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    56e6:	f040 0001 	orr.w	r0, r0, #1
    56ea:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    56ee:	b129      	cbz	r1, 56fc <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    56f0:	2201      	movs	r2, #1
    56f2:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    56f6:	4a0f      	ldr	r2, [pc, #60]	; (5734 <nrfx_gpiote_trigger_enable+0x84>)
    56f8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    56fc:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    56fe:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    5702:	2b04      	cmp	r3, #4
    5704:	d010      	beq.n	5728 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    5706:	2b05      	cmp	r3, #5
    5708:	d010      	beq.n	572c <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    570a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    570e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    5712:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5716:	40d9      	lsrs	r1, r3
    5718:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    571c:	3102      	adds	r1, #2
}
    571e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    5722:	4610      	mov	r0, r2
    5724:	f002 bd32 	b.w	818c <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    5728:	2103      	movs	r1, #3
    572a:	e7f8      	b.n	571e <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    572c:	2102      	movs	r1, #2
    572e:	e7f6      	b.n	571e <nrfx_gpiote_trigger_enable+0x6e>
    5730:	2000008c 	.word	0x2000008c
    5734:	40006000 	.word	0x40006000

00005738 <nrfx_gpiote_trigger_disable>:
{
    5738:	b508      	push	{r3, lr}
    573a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    573c:	f7ff fdce 	bl	52dc <pin_in_use_by_te>
    5740:	b1c0      	cbz	r0, 5774 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    5742:	f102 0108 	add.w	r1, r2, #8
    5746:	4b0e      	ldr	r3, [pc, #56]	; (5780 <nrfx_gpiote_trigger_disable+0x48>)
    5748:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    574c:	0799      	lsls	r1, r3, #30
    574e:	d411      	bmi.n	5774 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    5750:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    5752:	2201      	movs	r2, #1
    5754:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    5756:	009b      	lsls	r3, r3, #2
    5758:	490a      	ldr	r1, [pc, #40]	; (5784 <nrfx_gpiote_trigger_disable+0x4c>)
    575a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    575e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5762:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    5766:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    576a:	f022 0203 	bic.w	r2, r2, #3
    576e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    5772:	bd08      	pop	{r3, pc}
    5774:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5778:	2100      	movs	r1, #0
    577a:	4610      	mov	r0, r2
    577c:	f002 bd06 	b.w	818c <nrf_gpio_cfg_sense_set>
    5780:	2000008c 	.word	0x2000008c
    5784:	40006000 	.word	0x40006000

00005788 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5788:	4b0d      	ldr	r3, [pc, #52]	; (57c0 <nrfx_gpiote_pin_uninit+0x38>)
    578a:	f100 0208 	add.w	r2, r0, #8
{
    578e:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    5790:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    5794:	07db      	lsls	r3, r3, #31
{
    5796:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    5798:	d50f      	bpl.n	57ba <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    579a:	f7ff ffcd 	bl	5738 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    579e:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    57a0:	f004 041f 	and.w	r4, r4, #31
    57a4:	f7ff fdec 	bl	5380 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    57a8:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    57ac:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    57b0:	2202      	movs	r2, #2
    57b2:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    57b6:	4803      	ldr	r0, [pc, #12]	; (57c4 <nrfx_gpiote_pin_uninit+0x3c>)
}
    57b8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    57ba:	4803      	ldr	r0, [pc, #12]	; (57c8 <nrfx_gpiote_pin_uninit+0x40>)
    57bc:	e7fc      	b.n	57b8 <nrfx_gpiote_pin_uninit+0x30>
    57be:	bf00      	nop
    57c0:	2000008c 	.word	0x2000008c
    57c4:	0bad0000 	.word	0x0bad0000
    57c8:	0bad0004 	.word	0x0bad0004

000057cc <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    57cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    57d0:	4b4e      	ldr	r3, [pc, #312]	; (590c <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    57d2:	484f      	ldr	r0, [pc, #316]	; (5910 <nrfx_gpiote_irq_handler+0x144>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    57d4:	494f      	ldr	r1, [pc, #316]	; (5914 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t status = 0;
    57d6:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    57d8:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    57da:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    57dc:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    57de:	b136      	cbz	r6, 57ee <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    57e0:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    57e4:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    57e6:	bf1e      	ittt	ne
    57e8:	601c      	strne	r4, [r3, #0]
    57ea:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    57ec:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    57ee:	3304      	adds	r3, #4
    57f0:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    57f2:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    57f6:	d1f1      	bne.n	57dc <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    57f8:	4b45      	ldr	r3, [pc, #276]	; (5910 <nrfx_gpiote_irq_handler+0x144>)
    57fa:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    57fe:	b1bb      	cbz	r3, 5830 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    5800:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    5804:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    5808:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    580a:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    580e:	af01      	add	r7, sp, #4
    5810:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    5814:	9c01      	ldr	r4, [sp, #4]
    5816:	b96c      	cbnz	r4, 5834 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5818:	4b3d      	ldr	r3, [pc, #244]	; (5910 <nrfx_gpiote_irq_handler+0x144>)
    581a:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    581e:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    5822:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    5826:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    5828:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    582c:	2b00      	cmp	r3, #0
    582e:	d1ee      	bne.n	580e <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    5830:	2401      	movs	r4, #1
    5832:	e066      	b.n	5902 <nrfx_gpiote_irq_handler+0x136>
                uint32_t pin = NRF_CTZ(latch[i]);
    5834:	fa94 f4a4 	rbit	r4, r4
    5838:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    583c:	4a36      	ldr	r2, [pc, #216]	; (5918 <nrfx_gpiote_irq_handler+0x14c>)
    583e:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    5842:	08e0      	lsrs	r0, r4, #3
    5844:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
    5848:	f004 0307 	and.w	r3, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    584c:	fa08 f203 	lsl.w	r2, r8, r3
    5850:	5c3b      	ldrb	r3, [r7, r0]
    5852:	ea23 0302 	bic.w	r3, r3, r2
    5856:	543b      	strb	r3, [r7, r0]
    5858:	00a3      	lsls	r3, r4, #2
    585a:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    585e:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5862:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    5866:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5868:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    586a:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    586e:	d518      	bpl.n	58a2 <nrfx_gpiote_irq_handler+0xd6>
        call_handler(pin, trigger);
    5870:	4659      	mov	r1, fp
    5872:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5874:	fa5f fa82 	uxtb.w	sl, r2
    5878:	f7ff fd3a 	bl	52f0 <call_handler>
    587c:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    5880:	f3c3 4301 	ubfx	r3, r3, #16, #2
    5884:	459a      	cmp	sl, r3
    5886:	d107      	bne.n	5898 <nrfx_gpiote_irq_handler+0xcc>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    5888:	2100      	movs	r1, #0
    588a:	4620      	mov	r0, r4
    588c:	f002 fc7e 	bl	818c <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    5890:	4651      	mov	r1, sl
    5892:	4620      	mov	r0, r4
    5894:	f002 fc7a 	bl	818c <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    5898:	fa08 f404 	lsl.w	r4, r8, r4
    589c:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    58a0:	e7b8      	b.n	5814 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    58a2:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    58a4:	bf0c      	ite	eq
    58a6:	2103      	moveq	r1, #3
    58a8:	2102      	movne	r1, #2
    58aa:	4620      	mov	r0, r4
    58ac:	f002 fc6e 	bl	818c <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    58b0:	f1ba 0f03 	cmp.w	sl, #3
    58b4:	d004      	beq.n	58c0 <nrfx_gpiote_irq_handler+0xf4>
    58b6:	2a02      	cmp	r2, #2
    58b8:	d107      	bne.n	58ca <nrfx_gpiote_irq_handler+0xfe>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    58ba:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    58be:	d1eb      	bne.n	5898 <nrfx_gpiote_irq_handler+0xcc>
            call_handler(pin, trigger);
    58c0:	4659      	mov	r1, fp
    58c2:	4620      	mov	r0, r4
    58c4:	f7ff fd14 	bl	52f0 <call_handler>
    58c8:	e7e6      	b.n	5898 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    58ca:	2a03      	cmp	r2, #3
    58cc:	d1e4      	bne.n	5898 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    58ce:	f1ba 0f02 	cmp.w	sl, #2
    58d2:	e7f4      	b.n	58be <nrfx_gpiote_irq_handler+0xf2>
        uint32_t ch = NRF_CTZ(mask);
    58d4:	fa95 f3a5 	rbit	r3, r5
    58d8:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    58dc:	fa04 f203 	lsl.w	r2, r4, r3
    58e0:	009b      	lsls	r3, r3, #2
    58e2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    58e6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    58ea:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    58ee:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    58f2:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    58f6:	f3c0 2004 	ubfx	r0, r0, #8, #5
    58fa:	f3c1 4101 	ubfx	r1, r1, #16, #2
    58fe:	f7ff fcf7 	bl	52f0 <call_handler>
    while (mask)
    5902:	2d00      	cmp	r5, #0
    5904:	d1e6      	bne.n	58d4 <nrfx_gpiote_irq_handler+0x108>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    5906:	b003      	add	sp, #12
    5908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    590c:	40006100 	.word	0x40006100
    5910:	40006000 	.word	0x40006000
    5914:	40006120 	.word	0x40006120
    5918:	2000008c 	.word	0x2000008c

0000591c <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    591c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5920:	4606      	mov	r6, r0
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    5922:	4d4f      	ldr	r5, [pc, #316]	; (5a60 <nrfx_spim_init+0x144>)
{
    5924:	460c      	mov	r4, r1
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    5926:	7931      	ldrb	r1, [r6, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    5928:	014f      	lsls	r7, r1, #5
    592a:	eb05 1141 	add.w	r1, r5, r1, lsl #5
{
    592e:	4610      	mov	r0, r2
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    5930:	7f0a      	ldrb	r2, [r1, #28]
    5932:	2a00      	cmp	r2, #0
    5934:	f040 8092 	bne.w	5a5c <nrfx_spim_init+0x140>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    5938:	6832      	ldr	r2, [r6, #0]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    593a:	51e8      	str	r0, [r5, r7]
    p_cb->p_context = p_context;
    593c:	604b      	str	r3, [r1, #4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    593e:	7be0      	ldrb	r0, [r4, #15]
    5940:	7f8b      	ldrb	r3, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
    5942:	f894 c004 	ldrb.w	ip, [r4, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    5946:	f360 0300 	bfi	r3, r0, #0, #1
    p_cb->ss_active_high = p_config->ss_active_high;
    594a:	f36c 0341 	bfi	r3, ip, #1, #1
    594e:	778b      	strb	r3, [r1, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
#endif
    p_cb->ss_pin = p_config->ss_pin;
    5950:	78e3      	ldrb	r3, [r4, #3]
    5952:	77cb      	strb	r3, [r1, #31]

    configure_pins(p_instance, p_config);
    5954:	f8d6 8000 	ldr.w	r8, [r6]
    if (!p_config->skip_gpio_cfg)
    5958:	2800      	cmp	r0, #0
    595a:	d13d      	bne.n	59d8 <nrfx_spim_init+0xbc>
        nrf_gpio_pin_write(p_config->sck_pin,
    595c:	7b21      	ldrb	r1, [r4, #12]
    595e:	7820      	ldrb	r0, [r4, #0]
    5960:	2901      	cmp	r1, #1
    5962:	bf94      	ite	ls
    5964:	2100      	movls	r1, #0
    5966:	2101      	movhi	r1, #1
    5968:	f002 fc2a 	bl	81c0 <nrf_gpio_pin_write>
    *p_pin = pin_number & 0x1F;
    596c:	7823      	ldrb	r3, [r4, #0]
    596e:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    5972:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5976:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    597a:	2101      	movs	r1, #1
    597c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    5980:	7863      	ldrb	r3, [r4, #1]
    5982:	2bff      	cmp	r3, #255	; 0xff
    5984:	d009      	beq.n	599a <nrfx_spim_init+0x7e>
    *p_pin = pin_number & 0x1F;
    5986:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    598a:	4099      	lsls	r1, r3
    reg->PIN_CNF[pin_number] = cnf;
    598c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    p_reg->OUTCLR = clr_mask;
    5990:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = cnf;
    5994:	2103      	movs	r1, #3
    5996:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    599a:	78a3      	ldrb	r3, [r4, #2]
    599c:	2bff      	cmp	r3, #255	; 0xff
    599e:	d009      	beq.n	59b4 <nrfx_spim_init+0x98>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    59a0:	7ba1      	ldrb	r1, [r4, #14]
    *p_pin = pin_number & 0x1F;
    59a2:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    59a6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    59aa:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    59ae:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    59b0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    59b4:	78e0      	ldrb	r0, [r4, #3]
    59b6:	28ff      	cmp	r0, #255	; 0xff
    59b8:	d00e      	beq.n	59d8 <nrfx_spim_init+0xbc>
                               p_config->ss_active_high ? 0 : 1);
    59ba:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
    59bc:	f081 0101 	eor.w	r1, r1, #1
    59c0:	f002 fbfe 	bl	81c0 <nrf_gpio_pin_write>
    *p_pin = pin_number & 0x1F;
    59c4:	78e3      	ldrb	r3, [r4, #3]
    59c6:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    59ca:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    59ce:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    59d2:	2003      	movs	r0, #3
    59d4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    59d8:	7c23      	ldrb	r3, [r4, #16]
    59da:	b993      	cbnz	r3, 5a02 <nrfx_spim_init+0xe6>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    59dc:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    59de:	7820      	ldrb	r0, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    59e0:	2bff      	cmp	r3, #255	; 0xff
    59e2:	bf18      	it	ne
    59e4:	4619      	movne	r1, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    59e6:	78a3      	ldrb	r3, [r4, #2]
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
    59e8:	f8c8 0508 	str.w	r0, [r8, #1288]	; 0x508
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    59ec:	bf08      	it	eq
    59ee:	f04f 31ff 	moveq.w	r1, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    59f2:	2bff      	cmp	r3, #255	; 0xff
    59f4:	bf08      	it	eq
    59f6:	f04f 33ff 	moveq.w	r3, #4294967295
    p_reg->PSEL.MOSI = mosi_pin;
    59fa:	f8c8 150c 	str.w	r1, [r8, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    59fe:	f8c8 3510 	str.w	r3, [r8, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    5a02:	68a3      	ldr	r3, [r4, #8]
    5a04:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    5a08:	7b63      	ldrb	r3, [r4, #13]
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    5a0a:	7b21      	ldrb	r1, [r4, #12]
    5a0c:	3b00      	subs	r3, #0
    5a0e:	bf18      	it	ne
    5a10:	2301      	movne	r3, #1
    switch (spi_mode)
    5a12:	2902      	cmp	r1, #2
    5a14:	d01c      	beq.n	5a50 <nrfx_spim_init+0x134>
    5a16:	2903      	cmp	r1, #3
    5a18:	d01d      	beq.n	5a56 <nrfx_spim_init+0x13a>
    5a1a:	2901      	cmp	r1, #1
    5a1c:	d101      	bne.n	5a22 <nrfx_spim_init+0x106>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    5a1e:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    5a22:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    5a26:	79a3      	ldrb	r3, [r4, #6]
    5a28:	f8c2 35c0 	str.w	r3, [r2, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    5a2c:	2307      	movs	r3, #7
    5a2e:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    5a32:	59eb      	ldr	r3, [r5, r7]
    5a34:	b123      	cbz	r3, 5a40 <nrfx_spim_init+0x124>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    5a36:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    5a38:	f340 3007 	sbfx	r0, r0, #12, #8
    5a3c:	f7fc fda0 	bl	2580 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    5a40:	443d      	add	r5, r7
    5a42:	2300      	movs	r3, #0
    5a44:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    5a46:	4807      	ldr	r0, [pc, #28]	; (5a64 <nrfx_spim_init+0x148>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    5a48:	2301      	movs	r3, #1
    5a4a:	772b      	strb	r3, [r5, #28]
}
    5a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    5a50:	f043 0304 	orr.w	r3, r3, #4
        break;
    5a54:	e7e5      	b.n	5a22 <nrfx_spim_init+0x106>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    5a56:	f043 0306 	orr.w	r3, r3, #6
        break;
    5a5a:	e7e2      	b.n	5a22 <nrfx_spim_init+0x106>
        return err_code;
    5a5c:	4802      	ldr	r0, [pc, #8]	; (5a68 <nrfx_spim_init+0x14c>)
    5a5e:	e7f5      	b.n	5a4c <nrfx_spim_init+0x130>
    5a60:	20000a28 	.word	0x20000a28
    5a64:	0bad0000 	.word	0x0bad0000
    5a68:	0bad0005 	.word	0x0bad0005

00005a6c <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
    5a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    5a6e:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
    5a70:	4d20      	ldr	r5, [pc, #128]	; (5af4 <nrfx_spim_uninit+0x88>)
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
    5a72:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
    5a74:	015e      	lsls	r6, r3, #5
    5a76:	eb05 1743 	add.w	r7, r5, r3, lsl #5
    5a7a:	59ab      	ldr	r3, [r5, r6]
    5a7c:	b1b3      	cbz	r3, 5aac <nrfx_spim_uninit+0x40>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    5a7e:	f344 3007 	sbfx	r0, r4, #12, #8
    5a82:	f7fc fd8d 	bl	25a0 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    5a86:	4b1c      	ldr	r3, [pc, #112]	; (5af8 <nrfx_spim_uninit+0x8c>)
    5a88:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
    5a8c:	7f7b      	ldrb	r3, [r7, #29]
    5a8e:	b16b      	cbz	r3, 5aac <nrfx_spim_uninit+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5a90:	2301      	movs	r3, #1
    5a92:	6163      	str	r3, [r4, #20]
    5a94:	2764      	movs	r7, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5a96:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
    5a9a:	b923      	cbnz	r3, 5aa6 <nrfx_spim_uninit+0x3a>
    5a9c:	2001      	movs	r0, #1
    5a9e:	f002 fae1 	bl	8064 <nrfx_busy_wait>
    5aa2:	3f01      	subs	r7, #1
    5aa4:	d1f7      	bne.n	5a96 <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
    5aa6:	19ab      	adds	r3, r5, r6
    5aa8:	2200      	movs	r2, #0
    5aaa:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
    5aac:	2300      	movs	r3, #0
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
    5aae:	19a9      	adds	r1, r5, r6
    5ab0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    5ab4:	7f8b      	ldrb	r3, [r1, #30]
    5ab6:	07db      	lsls	r3, r3, #31
    5ab8:	d417      	bmi.n	5aea <nrfx_spim_uninit+0x7e>
    return p_reg->PSEL.SCK;
    5aba:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
    5abe:	f002 fb73 	bl	81a8 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
    5ac2:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
    5ac6:	f002 fb6f 	bl	81a8 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
    5aca:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
    5ace:	f002 fb6b 	bl	81a8 <spim_pin_uninit>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    5ad2:	7fcb      	ldrb	r3, [r1, #31]
    5ad4:	2bff      	cmp	r3, #255	; 0xff
    5ad6:	d008      	beq.n	5aea <nrfx_spim_uninit+0x7e>
    *p_pin = pin_number & 0x1F;
    5ad8:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    5adc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    5ae0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    5ae4:	2102      	movs	r1, #2
    5ae6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    5aea:	4435      	add	r5, r6
    5aec:	2300      	movs	r3, #0
    5aee:	772b      	strb	r3, [r5, #28]
}
    5af0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5af2:	bf00      	nop
    5af4:	20000a28 	.word	0x20000a28
    5af8:	00080152 	.word	0x00080152

00005afc <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    5afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    5b00:	4f36      	ldr	r7, [pc, #216]	; (5bdc <nrfx_spim_xfer+0xe0>)
    5b02:	7903      	ldrb	r3, [r0, #4]
    5b04:	eb07 1843 	add.w	r8, r7, r3, lsl #5
{
    5b08:	4614      	mov	r4, r2
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    5b0a:	f898 201d 	ldrb.w	r2, [r8, #29]
{
    5b0e:	4681      	mov	r9, r0
    5b10:	460d      	mov	r5, r1
    if (p_cb->transfer_in_progress)
    5b12:	015e      	lsls	r6, r3, #5
    5b14:	2a00      	cmp	r2, #0
    5b16:	d15f      	bne.n	5bd8 <nrfx_spim_xfer+0xdc>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    5b18:	59ba      	ldr	r2, [r7, r6]
    5b1a:	b12a      	cbz	r2, 5b28 <nrfx_spim_xfer+0x2c>
    5b1c:	f014 0f14 	tst.w	r4, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    5b20:	bf04      	itt	eq
    5b22:	2201      	moveq	r2, #1
    5b24:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    5b28:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    5b2c:	eb07 0c06 	add.w	ip, r7, r6
    5b30:	f10c 0c0c 	add.w	ip, ip, #12
    5b34:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
    5b38:	2101      	movs	r1, #1
    5b3a:	4640      	mov	r0, r8
    5b3c:	f002 fb4d 	bl	81da <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    5b40:	6829      	ldr	r1, [r5, #0]
    5b42:	b121      	cbz	r1, 5b4e <nrfx_spim_xfer+0x52>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    5b44:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
    5b48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5b4c:	d106      	bne.n	5b5c <nrfx_spim_xfer+0x60>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    5b4e:	68aa      	ldr	r2, [r5, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    5b50:	b152      	cbz	r2, 5b68 <nrfx_spim_xfer+0x6c>
    5b52:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    5b56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5b5a:	d005      	beq.n	5b68 <nrfx_spim_xfer+0x6c>
        p_cb->transfer_in_progress = false;
    5b5c:	443e      	add	r6, r7
    5b5e:	2300      	movs	r3, #0
        return err_code;
    5b60:	481f      	ldr	r0, [pc, #124]	; (5be0 <nrfx_spim_xfer+0xe4>)
        p_cb->transfer_in_progress = false;
    5b62:	7773      	strb	r3, [r6, #29]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
    5b64:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    5b68:	f8d9 3000 	ldr.w	r3, [r9]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    5b6c:	6868      	ldr	r0, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    5b6e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
    5b72:	68e9      	ldr	r1, [r5, #12]
    p_reg->TXD.MAXCNT = length;
    5b74:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    5b78:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b7c:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
    5b7e:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5b82:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    5b86:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    5b8a:	f014 0201 	ands.w	r2, r4, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    5b8e:	bf18      	it	ne
    5b90:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    5b92:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    5b96:	f014 0202 	ands.w	r2, r4, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    5b9a:	bf18      	it	ne
    5b9c:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    5b9e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    5ba2:	f014 0208 	ands.w	r2, r4, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5ba6:	bf04      	itt	eq
    5ba8:	2101      	moveq	r1, #1
    5baa:	6119      	streq	r1, [r3, #16]
    if (!p_cb->handler)
    5bac:	59b9      	ldr	r1, [r7, r6]
    5bae:	b949      	cbnz	r1, 5bc4 <nrfx_spim_xfer+0xc8>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    5bb0:	b912      	cbnz	r2, 5bb8 <nrfx_spim_xfer+0xbc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5bb2:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    5bb6:	e7fb      	b.n	5bb0 <nrfx_spim_xfer+0xb4>
        set_ss_pin_state(p_cb, false);
    5bb8:	2100      	movs	r1, #0
    5bba:	4640      	mov	r0, r8
    5bbc:	f002 fb0d 	bl	81da <set_ss_pin_state>
    return err_code;
    5bc0:	4808      	ldr	r0, [pc, #32]	; (5be4 <nrfx_spim_xfer+0xe8>)
}
    5bc2:	e7cf      	b.n	5b64 <nrfx_spim_xfer+0x68>
    if (!enable)
    5bc4:	f014 0f04 	tst.w	r4, #4
    5bc8:	f04f 0240 	mov.w	r2, #64	; 0x40
    p_reg->INTENCLR = mask;
    5bcc:	bf14      	ite	ne
    5bce:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
    5bd2:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
    5bd6:	e7f3      	b.n	5bc0 <nrfx_spim_xfer+0xc4>
        return err_code;
    5bd8:	4803      	ldr	r0, [pc, #12]	; (5be8 <nrfx_spim_xfer+0xec>)
    5bda:	e7c3      	b.n	5b64 <nrfx_spim_xfer+0x68>
    5bdc:	20000a28 	.word	0x20000a28
    5be0:	0bad000a 	.word	0x0bad000a
    5be4:	0bad0000 	.word	0x0bad0000
    5be8:	0bad000b 	.word	0x0bad000b

00005bec <nrfx_spim_0_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5bec:	4b0c      	ldr	r3, [pc, #48]	; (5c20 <nrfx_spim_0_irq_handler+0x34>)
    5bee:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    }
}

#if NRFX_CHECK(NRFX_SPIM0_ENABLED)
void nrfx_spim_0_irq_handler(void)
{
    5bf2:	b510      	push	{r4, lr}
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    5bf4:	b192      	cbz	r2, 5c1c <nrfx_spim_0_irq_handler+0x30>
    set_ss_pin_state(p_cb, false);
    5bf6:	4a0b      	ldr	r2, [pc, #44]	; (5c24 <nrfx_spim_0_irq_handler+0x38>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    5bf8:	2400      	movs	r4, #0
    5bfa:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
    5bfe:	4621      	mov	r1, r4
    5c00:	4610      	mov	r0, r2
    5c02:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    5c06:	f002 fae8 	bl	81da <set_ss_pin_state>
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    5c0a:	7214      	strb	r4, [r2, #8]
    p_cb->transfer_in_progress = false;
    5c0c:	7754      	strb	r4, [r2, #29]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    5c0e:	e9d2 3100 	ldrd	r3, r1, [r2]
    irq_handler(NRF_SPIM0, &m_cb[NRFX_SPIM0_INST_IDX]);
}
    5c12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    5c16:	f102 0008 	add.w	r0, r2, #8
    5c1a:	4718      	bx	r3
}
    5c1c:	bd10      	pop	{r4, pc}
    5c1e:	bf00      	nop
    5c20:	40003000 	.word	0x40003000
    5c24:	20000a28 	.word	0x20000a28

00005c28 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    5c28:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5c2a:	4c11      	ldr	r4, [pc, #68]	; (5c70 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    5c2c:	4a11      	ldr	r2, [pc, #68]	; (5c74 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    5c2e:	4912      	ldr	r1, [pc, #72]	; (5c78 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    5c30:	2303      	movs	r3, #3
    5c32:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    5c34:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    5c36:	4b11      	ldr	r3, [pc, #68]	; (5c7c <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    5c38:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    5c3a:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    5c3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
    5c40:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    5c42:	2300      	movs	r3, #0
    5c44:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    5c46:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5c48:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    5c4a:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    5c4c:	4a0c      	ldr	r2, [pc, #48]	; (5c80 <_DoInit+0x58>)
    5c4e:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    5c50:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    5c52:	2210      	movs	r2, #16
    5c54:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    5c56:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    5c58:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    5c5a:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    5c5c:	f001 ff9b 	bl	7b96 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    5c60:	4908      	ldr	r1, [pc, #32]	; (5c84 <_DoInit+0x5c>)
    5c62:	4620      	mov	r0, r4
    5c64:	f001 ff97 	bl	7b96 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    5c68:	2320      	movs	r3, #32
    5c6a:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    5c6c:	bd10      	pop	{r4, pc}
    5c6e:	bf00      	nop
    5c70:	20000a48 	.word	0x20000a48
    5c74:	0000a8d2 	.word	0x0000a8d2
    5c78:	0000a8db 	.word	0x0000a8db
    5c7c:	20000b59 	.word	0x20000b59
    5c80:	20000b49 	.word	0x20000b49
    5c84:	0000a8df 	.word	0x0000a8df

00005c88 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5c88:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    5c8c:	4f23      	ldr	r7, [pc, #140]	; (5d1c <SEGGER_RTT_WriteSkipNoLock+0x94>)
    5c8e:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5c92:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    5c94:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5c98:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    5c9a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    5c9c:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    5c9e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5ca0:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    5ca2:	d834      	bhi.n	5d0e <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    5ca4:	f8d2 a020 	ldr.w	sl, [r2, #32]
    5ca8:	ebaa 0905 	sub.w	r9, sl, r5
    5cac:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    5cb0:	4294      	cmp	r4, r2
    5cb2:	d811      	bhi.n	5cd8 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5cb4:	f04f 0918 	mov.w	r9, #24
    5cb8:	fb06 9309 	mla	r3, r6, r9, r9
    5cbc:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    5cbe:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5cc0:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    5cc2:	4641      	mov	r1, r8
    5cc4:	4428      	add	r0, r5
    5cc6:	f001 ff8c 	bl	7be2 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    5cca:	fb09 7606 	mla	r6, r9, r6, r7
    5cce:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    5cd0:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    5cd2:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    5cd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    5cd8:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    5cda:	429c      	cmp	r4, r3
    5cdc:	d81b      	bhi.n	5d16 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5cde:	fb00 bb0b 	mla	fp, r0, fp, fp
    5ce2:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    5ce4:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    5ce6:	f8db 0004 	ldr.w	r0, [fp, #4]
    5cea:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    5cec:	4428      	add	r0, r5
    5cee:	f001 ff78 	bl	7be2 <memcpy>
      if (NumBytes) {
    5cf2:	ebb4 040a 	subs.w	r4, r4, sl
    5cf6:	d006      	beq.n	5d06 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    5cf8:	f8db 0004 	ldr.w	r0, [fp, #4]
    5cfc:	4622      	mov	r2, r4
    5cfe:	eb08 0109 	add.w	r1, r8, r9
    5d02:	f001 ff6e 	bl	7be2 <memcpy>
      pRing->WrOff = NumBytes;
    5d06:	2018      	movs	r0, #24
    5d08:	fb00 7606 	mla	r6, r0, r6, r7
    5d0c:	e7e0      	b.n	5cd0 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    5d0e:	3b01      	subs	r3, #1
    5d10:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    5d12:	42a3      	cmp	r3, r4
    5d14:	d2ce      	bcs.n	5cb4 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    5d16:	2000      	movs	r0, #0
    5d18:	e7dc      	b.n	5cd4 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    5d1a:	bf00      	nop
    5d1c:	20000a48 	.word	0x20000a48

00005d20 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5d20:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    5d22:	4b16      	ldr	r3, [pc, #88]	; (5d7c <SEGGER_RTT_WriteNoLock+0x5c>)
    5d24:	2418      	movs	r4, #24
    5d26:	fb00 4504 	mla	r5, r0, r4, r4
    5d2a:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    5d2c:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    5d30:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    5d32:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    5d34:	2c01      	cmp	r4, #1
    5d36:	d00e      	beq.n	5d56 <SEGGER_RTT_WriteNoLock+0x36>
    5d38:	2c02      	cmp	r4, #2
    5d3a:	d018      	beq.n	5d6e <SEGGER_RTT_WriteNoLock+0x4e>
    5d3c:	b9e4      	cbnz	r4, 5d78 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    5d3e:	4628      	mov	r0, r5
    5d40:	f002 fa57 	bl	81f2 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    5d44:	4286      	cmp	r6, r0
    5d46:	d804      	bhi.n	5d52 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    5d48:	4632      	mov	r2, r6
    5d4a:	4628      	mov	r0, r5
    5d4c:	f002 fa5a 	bl	8204 <_WriteNoCheck>
    5d50:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    5d52:	4620      	mov	r0, r4
    5d54:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    5d56:	4628      	mov	r0, r5
    5d58:	f002 fa4b 	bl	81f2 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    5d5c:	4286      	cmp	r6, r0
    5d5e:	4634      	mov	r4, r6
    5d60:	bf28      	it	cs
    5d62:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    5d64:	4622      	mov	r2, r4
    5d66:	4628      	mov	r0, r5
    5d68:	f002 fa4c 	bl	8204 <_WriteNoCheck>
    break;
    5d6c:	e7f1      	b.n	5d52 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    5d6e:	4628      	mov	r0, r5
}
    5d70:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    5d74:	f002 ba62 	b.w	823c <_WriteBlocking>
  switch (pRing->Flags) {
    5d78:	2400      	movs	r4, #0
  return Status;
    5d7a:	e7ea      	b.n	5d52 <SEGGER_RTT_WriteNoLock+0x32>
    5d7c:	20000a48 	.word	0x20000a48

00005d80 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    5d80:	4b03      	ldr	r3, [pc, #12]	; (5d90 <SEGGER_RTT_HasDataUp+0x10>)
    5d82:	2218      	movs	r2, #24
    5d84:	fb02 3300 	mla	r3, r2, r0, r3
    5d88:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    5d8a:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    5d8c:	1a80      	subs	r0, r0, r2
    5d8e:	4770      	bx	lr
    5d90:	20000a48 	.word	0x20000a48

00005d94 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5d94:	4b0e      	ldr	r3, [pc, #56]	; (5dd0 <z_sys_init_run_level+0x3c>)
{
    5d96:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5d98:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    5d9c:	3001      	adds	r0, #1
    5d9e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    5da2:	42a6      	cmp	r6, r4
    5da4:	d800      	bhi.n	5da8 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    5da6:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    5da8:	e9d4 3500 	ldrd	r3, r5, [r4]
    5dac:	4628      	mov	r0, r5
    5dae:	4798      	blx	r3
		if (dev != NULL) {
    5db0:	b165      	cbz	r5, 5dcc <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    5db2:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    5db4:	b130      	cbz	r0, 5dc4 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    5db6:	2800      	cmp	r0, #0
    5db8:	bfb8      	it	lt
    5dba:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    5dbc:	28ff      	cmp	r0, #255	; 0xff
    5dbe:	bfa8      	it	ge
    5dc0:	20ff      	movge	r0, #255	; 0xff
    5dc2:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    5dc4:	785a      	ldrb	r2, [r3, #1]
    5dc6:	f042 0201 	orr.w	r2, r2, #1
    5dca:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    5dcc:	3408      	adds	r4, #8
    5dce:	e7e8      	b.n	5da2 <z_sys_init_run_level+0xe>
    5dd0:	00008b6c 	.word	0x00008b6c

00005dd4 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    5dd4:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    5dd6:	4605      	mov	r5, r0
    5dd8:	b910      	cbnz	r0, 5de0 <z_impl_device_get_binding+0xc>
		return NULL;
    5dda:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    5ddc:	4620      	mov	r0, r4
    5dde:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    5de0:	7803      	ldrb	r3, [r0, #0]
    5de2:	2b00      	cmp	r3, #0
    5de4:	d0f9      	beq.n	5dda <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    5de6:	4c0e      	ldr	r4, [pc, #56]	; (5e20 <z_impl_device_get_binding+0x4c>)
    5de8:	4e0e      	ldr	r6, [pc, #56]	; (5e24 <z_impl_device_get_binding+0x50>)
    5dea:	42b4      	cmp	r4, r6
    5dec:	d108      	bne.n	5e00 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    5dee:	4c0c      	ldr	r4, [pc, #48]	; (5e20 <z_impl_device_get_binding+0x4c>)
    5df0:	42b4      	cmp	r4, r6
    5df2:	d0f2      	beq.n	5dda <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    5df4:	4620      	mov	r0, r4
    5df6:	f002 fa52 	bl	829e <z_device_is_ready>
    5dfa:	b950      	cbnz	r0, 5e12 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    5dfc:	3418      	adds	r4, #24
    5dfe:	e7f7      	b.n	5df0 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    5e00:	4620      	mov	r0, r4
    5e02:	f002 fa4c 	bl	829e <z_device_is_ready>
    5e06:	b110      	cbz	r0, 5e0e <z_impl_device_get_binding+0x3a>
    5e08:	6823      	ldr	r3, [r4, #0]
    5e0a:	42ab      	cmp	r3, r5
    5e0c:	d0e6      	beq.n	5ddc <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    5e0e:	3418      	adds	r4, #24
    5e10:	e7eb      	b.n	5dea <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    5e12:	6821      	ldr	r1, [r4, #0]
    5e14:	4628      	mov	r0, r5
    5e16:	f001 fed8 	bl	7bca <strcmp>
    5e1a:	2800      	cmp	r0, #0
    5e1c:	d1ee      	bne.n	5dfc <z_impl_device_get_binding+0x28>
    5e1e:	e7dd      	b.n	5ddc <z_impl_device_get_binding+0x8>
    5e20:	00008708 	.word	0x00008708
    5e24:	00008780 	.word	0x00008780

00005e28 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5e2c:	b086      	sub	sp, #24
    5e2e:	4605      	mov	r5, r0
    5e30:	af00      	add	r7, sp, #0
    5e32:	460e      	mov	r6, r1
	__asm__ volatile(
    5e34:	f04f 0320 	mov.w	r3, #32
    5e38:	f3ef 8811 	mrs	r8, BASEPRI
    5e3c:	f383 8812 	msr	BASEPRI_MAX, r3
    5e40:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5e44:	f000 ff76 	bl	6d34 <z_impl_z_current_get>
    5e48:	2d04      	cmp	r5, #4
    5e4a:	bf96      	itet	ls
    5e4c:	4b2c      	ldrls	r3, [pc, #176]	; (5f00 <z_fatal_error+0xd8>)
    5e4e:	4b2d      	ldrhi	r3, [pc, #180]	; (5f04 <z_fatal_error+0xdc>)
    5e50:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    5e54:	492c      	ldr	r1, [pc, #176]	; (5f08 <z_fatal_error+0xe0>)
    5e56:	46e9      	mov	r9, sp
    5e58:	b08a      	sub	sp, #40	; 0x28
    5e5a:	466a      	mov	r2, sp
    5e5c:	f04f 0a00 	mov.w	sl, #0
    5e60:	61d3      	str	r3, [r2, #28]
    5e62:	2303      	movs	r3, #3
    5e64:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    5e68:	4b28      	ldr	r3, [pc, #160]	; (5f0c <z_fatal_error+0xe4>)
    5e6a:	f8c2 a020 	str.w	sl, [r2, #32]
    5e6e:	e9c2 1505 	strd	r1, r5, [r2, #20]
    5e72:	4604      	mov	r4, r0
    5e74:	f842 3f10 	str.w	r3, [r2, #16]!
    5e78:	4825      	ldr	r0, [pc, #148]	; (5f10 <z_fatal_error+0xe8>)
    5e7a:	4653      	mov	r3, sl
    5e7c:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
    5e80:	f001 fe32 	bl	7ae8 <z_impl_z_log_msg2_static_create>
    5e84:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    5e86:	b17e      	cbz	r6, 5ea8 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    5e88:	69f3      	ldr	r3, [r6, #28]
    5e8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5e8e:	b15b      	cbz	r3, 5ea8 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    5e90:	4b20      	ldr	r3, [pc, #128]	; (5f14 <z_fatal_error+0xec>)
    5e92:	617b      	str	r3, [r7, #20]
    5e94:	2302      	movs	r3, #2
    5e96:	613b      	str	r3, [r7, #16]
    5e98:	481d      	ldr	r0, [pc, #116]	; (5f10 <z_fatal_error+0xe8>)
    5e9a:	4653      	mov	r3, sl
    5e9c:	f107 0210 	add.w	r2, r7, #16
    5ea0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5ea4:	f001 fe20 	bl	7ae8 <z_impl_z_log_msg2_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    5ea8:	b12c      	cbz	r4, 5eb6 <z_fatal_error+0x8e>
    5eaa:	4620      	mov	r0, r4
    5eac:	f002 fa0e 	bl	82cc <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    5eb0:	b108      	cbz	r0, 5eb6 <z_fatal_error+0x8e>
    5eb2:	7803      	ldrb	r3, [r0, #0]
    5eb4:	b903      	cbnz	r3, 5eb8 <z_fatal_error+0x90>
		thread_name = "unknown";
    5eb6:	4818      	ldr	r0, [pc, #96]	; (5f18 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    5eb8:	4b18      	ldr	r3, [pc, #96]	; (5f1c <z_fatal_error+0xf4>)
    5eba:	46e9      	mov	r9, sp
    5ebc:	b08a      	sub	sp, #40	; 0x28
    5ebe:	466a      	mov	r2, sp
    5ec0:	e9c2 3405 	strd	r3, r4, [r2, #20]
    5ec4:	2303      	movs	r3, #3
    5ec6:	f882 3020 	strb.w	r3, [r2, #32]
    5eca:	4b15      	ldr	r3, [pc, #84]	; (5f20 <z_fatal_error+0xf8>)
    5ecc:	61d0      	str	r0, [r2, #28]
    5ece:	f842 3f10 	str.w	r3, [r2, #16]!
    5ed2:	2300      	movs	r3, #0
    5ed4:	480e      	ldr	r0, [pc, #56]	; (5f10 <z_fatal_error+0xe8>)
    5ed6:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    5eda:	f001 fe05 	bl	7ae8 <z_impl_z_log_msg2_static_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    5ede:	4631      	mov	r1, r6
    5ee0:	46cd      	mov	sp, r9
    5ee2:	4628      	mov	r0, r5
    5ee4:	f7fe fa30 	bl	4348 <k_sys_fatal_error_handler>
	__asm__ volatile(
    5ee8:	f388 8811 	msr	BASEPRI, r8
    5eec:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5ef0:	4620      	mov	r0, r4
    5ef2:	f7fc ffbf 	bl	2e74 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5ef6:	3718      	adds	r7, #24
    5ef8:	46bd      	mov	sp, r7
    5efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5efe:	bf00      	nop
    5f00:	00008b84 	.word	0x00008b84
    5f04:	0000a8e6 	.word	0x0000a8e6
    5f08:	0000a8fc 	.word	0x0000a8fc
    5f0c:	01000005 	.word	0x01000005
    5f10:	000088f8 	.word	0x000088f8
    5f14:	0000a924 	.word	0x0000a924
    5f18:	0000a8f4 	.word	0x0000a8f4
    5f1c:	0000a945 	.word	0x0000a945
    5f20:	01000004 	.word	0x01000004

00005f24 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    5f24:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    5f26:	4b0a      	ldr	r3, [pc, #40]	; (5f50 <bg_thread_main+0x2c>)
    5f28:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5f2a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    5f2c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5f2e:	f7ff ff31 	bl	5d94 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    5f32:	f001 f953 	bl	71dc <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    5f36:	2003      	movs	r0, #3
    5f38:	f7ff ff2c 	bl	5d94 <z_sys_init_run_level>

	z_init_static_threads();
    5f3c:	f000 f93a 	bl	61b4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    5f40:	f7fa fb18 	bl	574 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5f44:	4a03      	ldr	r2, [pc, #12]	; (5f54 <bg_thread_main+0x30>)
    5f46:	7b13      	ldrb	r3, [r2, #12]
    5f48:	f023 0301 	bic.w	r3, r3, #1
    5f4c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5f4e:	bd08      	pop	{r3, pc}
    5f50:	20000f59 	.word	0x20000f59
    5f54:	20000730 	.word	0x20000730

00005f58 <z_bss_zero>:
{
    5f58:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    5f5a:	4803      	ldr	r0, [pc, #12]	; (5f68 <z_bss_zero+0x10>)
    5f5c:	4a03      	ldr	r2, [pc, #12]	; (5f6c <z_bss_zero+0x14>)
    5f5e:	2100      	movs	r1, #0
    5f60:	1a12      	subs	r2, r2, r0
    5f62:	f002 f9a6 	bl	82b2 <z_early_memset>
}
    5f66:	bd08      	pop	{r3, pc}
    5f68:	20000168 	.word	0x20000168
    5f6c:	20000f5c 	.word	0x20000f5c

00005f70 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    5f70:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    5f72:	2300      	movs	r3, #0
{
    5f74:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    5f76:	2201      	movs	r2, #1
    5f78:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    5f7c:	4e13      	ldr	r6, [pc, #76]	; (5fcc <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5f7e:	4d14      	ldr	r5, [pc, #80]	; (5fd0 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    5f80:	9301      	str	r3, [sp, #4]
    5f82:	220f      	movs	r2, #15
    5f84:	e9cd 3202 	strd	r3, r2, [sp, #8]
    5f88:	4912      	ldr	r1, [pc, #72]	; (5fd4 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5f8a:	2318      	movs	r3, #24
    5f8c:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    5f90:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    5f94:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    5f96:	f44f 7090 	mov.w	r0, #288	; 0x120
    5f9a:	fb00 1104 	mla	r1, r0, r4, r1
    5f9e:	4b0e      	ldr	r3, [pc, #56]	; (5fd8 <z_init_cpu+0x68>)
    5fa0:	9500      	str	r5, [sp, #0]
    5fa2:	f44f 7280 	mov.w	r2, #256	; 0x100
    5fa6:	4630      	mov	r0, r6
    5fa8:	f000 f8a6 	bl	60f8 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5fac:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    5fae:	480b      	ldr	r0, [pc, #44]	; (5fdc <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    5fb0:	752c      	strb	r4, [r5, #20]
    5fb2:	f023 0304 	bic.w	r3, r3, #4
    5fb6:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    5fb8:	f44f 6302 	mov.w	r3, #2080	; 0x820
    5fbc:	fb03 0404 	mla	r4, r3, r4, r0
    5fc0:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    5fc2:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    5fc4:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    5fc6:	b006      	add	sp, #24
    5fc8:	bd70      	pop	{r4, r5, r6, pc}
    5fca:	bf00      	nop
    5fcc:	200006b0 	.word	0x200006b0
    5fd0:	20000af0 	.word	0x20000af0
    5fd4:	200016a0 	.word	0x200016a0
    5fd8:	0000626d 	.word	0x0000626d
    5fdc:	200017c0 	.word	0x200017c0

00005fe0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5fe0:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    5fe2:	4b2d      	ldr	r3, [pc, #180]	; (6098 <z_cstart+0xb8>)
    5fe4:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5fe6:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5fea:	4d2c      	ldr	r5, [pc, #176]	; (609c <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    5fec:	4e2c      	ldr	r6, [pc, #176]	; (60a0 <z_cstart+0xc0>)
    5fee:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5ff0:	4f2c      	ldr	r7, [pc, #176]	; (60a4 <z_cstart+0xc4>)
    5ff2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5ff6:	2400      	movs	r4, #0
    5ff8:	616b      	str	r3, [r5, #20]
    5ffa:	23e0      	movs	r3, #224	; 0xe0
    5ffc:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    6000:	77ec      	strb	r4, [r5, #31]
    6002:	762c      	strb	r4, [r5, #24]
    6004:	766c      	strb	r4, [r5, #25]
    6006:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    6008:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    600a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    600e:	626b      	str	r3, [r5, #36]	; 0x24
    6010:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    6014:	f7fc fea2 	bl	2d5c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    6018:	f7fc fa2e 	bl	2478 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    601c:	f04f 33ff 	mov.w	r3, #4294967295
    6020:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    6022:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    6024:	f7fc fff4 	bl	3010 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    6028:	f7fc ff3a 	bl	2ea0 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    602c:	f7fb fccc 	bl	19c8 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    6030:	f240 1301 	movw	r3, #257	; 0x101
    6034:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    6038:	ab06      	add	r3, sp, #24
    603a:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    603c:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    6040:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    6042:	f002 f92b 	bl	829c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    6046:	4620      	mov	r0, r4
    6048:	f7ff fea4 	bl	5d94 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    604c:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    604e:	4d16      	ldr	r5, [pc, #88]	; (60a8 <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    6050:	f7ff fea0 	bl	5d94 <z_sys_init_run_level>
	z_sched_init();
    6054:	f000 fdc0 	bl	6bd8 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    6058:	4b14      	ldr	r3, [pc, #80]	; (60ac <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
    605a:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    605c:	9305      	str	r3, [sp, #20]
    605e:	2301      	movs	r3, #1
    6060:	4913      	ldr	r1, [pc, #76]	; (60b0 <z_cstart+0xd0>)
    6062:	9400      	str	r4, [sp, #0]
    6064:	e9cd 4303 	strd	r4, r3, [sp, #12]
    6068:	f44f 6280 	mov.w	r2, #1024	; 0x400
    606c:	463b      	mov	r3, r7
    606e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    6072:	4628      	mov	r0, r5
    6074:	f000 f840 	bl	60f8 <z_setup_new_thread>
    6078:	7b6a      	ldrb	r2, [r5, #13]
    607a:	4606      	mov	r6, r0
    607c:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    6080:	4628      	mov	r0, r5
    6082:	736a      	strb	r2, [r5, #13]
    6084:	f002 f9ee 	bl	8464 <z_ready_thread>
	z_init_cpu(0);
    6088:	4620      	mov	r0, r4
    608a:	f7ff ff71 	bl	5f70 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    608e:	463a      	mov	r2, r7
    6090:	4631      	mov	r1, r6
    6092:	4628      	mov	r0, r5
    6094:	f7fc fb6c 	bl	2770 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    6098:	20001fe0 	.word	0x20001fe0
    609c:	e000ed00 	.word	0xe000ed00
    60a0:	20000af0 	.word	0x20000af0
    60a4:	00005f25 	.word	0x00005f25
    60a8:	20000730 	.word	0x20000730
    60ac:	0000a9a7 	.word	0x0000a9a7
    60b0:	20001280 	.word	0x20001280

000060b4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    60b4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    60b6:	4b0e      	ldr	r3, [pc, #56]	; (60f0 <init_mem_slab_module+0x3c>)
    60b8:	4c0e      	ldr	r4, [pc, #56]	; (60f4 <init_mem_slab_module+0x40>)
    60ba:	42a3      	cmp	r3, r4
    60bc:	d301      	bcc.n	60c2 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    60be:	2000      	movs	r0, #0
	return rc;
}
    60c0:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    60c2:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    60c6:	ea41 0200 	orr.w	r2, r1, r0
    60ca:	f012 0203 	ands.w	r2, r2, #3
    60ce:	d10b      	bne.n	60e8 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    60d0:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    60d2:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    60d4:	42aa      	cmp	r2, r5
    60d6:	d101      	bne.n	60dc <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    60d8:	331c      	adds	r3, #28
    60da:	e7ee      	b.n	60ba <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    60dc:	695e      	ldr	r6, [r3, #20]
    60de:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    60e0:	3201      	adds	r2, #1
		slab->free_list = p;
    60e2:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    60e4:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    60e6:	e7f5      	b.n	60d4 <init_mem_slab_module+0x20>
	return rc;
    60e8:	f06f 0015 	mvn.w	r0, #21
    60ec:	e7e8      	b.n	60c0 <init_mem_slab_module+0xc>
    60ee:	bf00      	nop
    60f0:	20000140 	.word	0x20000140
    60f4:	20000140 	.word	0x20000140

000060f8 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    60f8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    60fc:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    60fe:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    6100:	2604      	movs	r6, #4
    6102:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    6104:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    6106:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    6108:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    610c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    610e:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    6110:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6114:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    6116:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    6118:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    611c:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    611e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    6122:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    6126:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    6128:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    612a:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    612c:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6130:	9202      	str	r2, [sp, #8]
    6132:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    6134:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    6136:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6138:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    613a:	9200      	str	r2, [sp, #0]
    613c:	4642      	mov	r2, r8
{
    613e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    6140:	f7fc fae4 	bl	270c <arch_new_thread>
	if (!_current) {
    6144:	4b04      	ldr	r3, [pc, #16]	; (6158 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    6146:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    6148:	689b      	ldr	r3, [r3, #8]
    614a:	b103      	cbz	r3, 614e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    614c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    614e:	6723      	str	r3, [r4, #112]	; 0x70
}
    6150:	4640      	mov	r0, r8
    6152:	b004      	add	sp, #16
    6154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6158:	20000af0 	.word	0x20000af0

0000615c <z_impl_k_thread_create>:
{
    615c:	b5f0      	push	{r4, r5, r6, r7, lr}
    615e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    6160:	2700      	movs	r7, #0
    6162:	9705      	str	r7, [sp, #20]
    6164:	9f10      	ldr	r7, [sp, #64]	; 0x40
    6166:	9704      	str	r7, [sp, #16]
    6168:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    616a:	9703      	str	r7, [sp, #12]
    616c:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    616e:	9702      	str	r7, [sp, #8]
{
    6170:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    6174:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    6176:	9701      	str	r7, [sp, #4]
    6178:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    617a:	9700      	str	r7, [sp, #0]
{
    617c:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    617e:	f7ff ffbb 	bl	60f8 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    6182:	f1b5 3fff 	cmp.w	r5, #4294967295
    6186:	bf08      	it	eq
    6188:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    618c:	d005      	beq.n	619a <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    618e:	ea55 0306 	orrs.w	r3, r5, r6
    6192:	d105      	bne.n	61a0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    6194:	4620      	mov	r0, r4
    6196:	f000 fc19 	bl	69cc <z_sched_start>
}
    619a:	4620      	mov	r0, r4
    619c:	b007      	add	sp, #28
    619e:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    61a0:	4903      	ldr	r1, [pc, #12]	; (61b0 <z_impl_k_thread_create+0x54>)
    61a2:	4632      	mov	r2, r6
    61a4:	462b      	mov	r3, r5
    61a6:	f104 0018 	add.w	r0, r4, #24
    61aa:	f000 fe91 	bl	6ed0 <z_add_timeout>
    61ae:	e7f4      	b.n	619a <z_impl_k_thread_create+0x3e>
    61b0:	00008485 	.word	0x00008485

000061b4 <z_init_static_threads>:
{
    61b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    61b8:	4c29      	ldr	r4, [pc, #164]	; (6260 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    61ba:	4d2a      	ldr	r5, [pc, #168]	; (6264 <z_init_static_threads+0xb0>)
{
    61bc:	b087      	sub	sp, #28
    61be:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    61c0:	42ae      	cmp	r6, r5
    61c2:	f104 0430 	add.w	r4, r4, #48	; 0x30
    61c6:	d30f      	bcc.n	61e8 <z_init_static_threads+0x34>
	k_sched_lock();
    61c8:	f000 fb1a 	bl	6800 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    61cc:	4c24      	ldr	r4, [pc, #144]	; (6260 <z_init_static_threads+0xac>)
    61ce:	f8df 9098 	ldr.w	r9, [pc, #152]	; 6268 <z_init_static_threads+0xb4>
    61d2:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    61d6:	f240 37e7 	movw	r7, #999	; 0x3e7
    61da:	42ac      	cmp	r4, r5
    61dc:	d320      	bcc.n	6220 <z_init_static_threads+0x6c>
}
    61de:	b007      	add	sp, #28
    61e0:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    61e4:	f000 bcdc 	b.w	6ba0 <k_sched_unlock>
		z_setup_new_thread(
    61e8:	f854 3c04 	ldr.w	r3, [r4, #-4]
    61ec:	9305      	str	r3, [sp, #20]
    61ee:	f854 3c10 	ldr.w	r3, [r4, #-16]
    61f2:	9304      	str	r3, [sp, #16]
    61f4:	f854 3c14 	ldr.w	r3, [r4, #-20]
    61f8:	9303      	str	r3, [sp, #12]
    61fa:	f854 3c18 	ldr.w	r3, [r4, #-24]
    61fe:	9302      	str	r3, [sp, #8]
    6200:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    6204:	9301      	str	r3, [sp, #4]
    6206:	f854 3c20 	ldr.w	r3, [r4, #-32]
    620a:	9300      	str	r3, [sp, #0]
    620c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    6210:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    6214:	f7ff ff70 	bl	60f8 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    6218:	f854 3c30 	ldr.w	r3, [r4, #-48]
    621c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    621e:	e7ce      	b.n	61be <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    6220:	6a63      	ldr	r3, [r4, #36]	; 0x24
    6222:	1c5a      	adds	r2, r3, #1
    6224:	d00d      	beq.n	6242 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    6226:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    622a:	2100      	movs	r1, #0
    622c:	4638      	mov	r0, r7
    622e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    6232:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    6236:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    623a:	d104      	bne.n	6246 <z_init_static_threads+0x92>
	z_sched_start(thread);
    623c:	4640      	mov	r0, r8
    623e:	f000 fbc5 	bl	69cc <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    6242:	3430      	adds	r4, #48	; 0x30
    6244:	e7c9      	b.n	61da <z_init_static_threads+0x26>
    6246:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    624a:	2300      	movs	r3, #0
    624c:	f7f9 ff48 	bl	e0 <__aeabi_uldivmod>
    6250:	4602      	mov	r2, r0
    6252:	460b      	mov	r3, r1
    6254:	f108 0018 	add.w	r0, r8, #24
    6258:	4649      	mov	r1, r9
    625a:	f000 fe39 	bl	6ed0 <z_add_timeout>
    625e:	e7f0      	b.n	6242 <z_init_static_threads+0x8e>
    6260:	20000104 	.word	0x20000104
    6264:	20000104 	.word	0x20000104
    6268:	00008485 	.word	0x00008485

0000626c <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    626c:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    626e:	4c0b      	ldr	r4, [pc, #44]	; (629c <idle+0x30>)
	return !z_sys_post_kernel;
    6270:	4d0b      	ldr	r5, [pc, #44]	; (62a0 <idle+0x34>)
	__asm__ volatile(
    6272:	f04f 0220 	mov.w	r2, #32
    6276:	f3ef 8311 	mrs	r3, BASEPRI
    627a:	f382 8812 	msr	BASEPRI_MAX, r2
    627e:	f3bf 8f6f 	isb	sy
    6282:	f002 f9ab 	bl	85dc <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    6286:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    6288:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    628a:	b913      	cbnz	r3, 6292 <idle+0x26>
	arch_cpu_idle();
    628c:	f7fc f8fa 	bl	2484 <arch_cpu_idle>
}
    6290:	e7ef      	b.n	6272 <idle+0x6>
    6292:	f7fc f817 	bl	22c4 <pm_system_suspend>
    6296:	2800      	cmp	r0, #0
    6298:	d1eb      	bne.n	6272 <idle+0x6>
    629a:	e7f7      	b.n	628c <idle+0x20>
    629c:	20000af0 	.word	0x20000af0
    62a0:	20000f59 	.word	0x20000f59

000062a4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    62a4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    62a8:	4604      	mov	r4, r0
    62aa:	4617      	mov	r7, r2
    62ac:	461e      	mov	r6, r3
    62ae:	f04f 0320 	mov.w	r3, #32
    62b2:	f3ef 8811 	mrs	r8, BASEPRI
    62b6:	f383 8812 	msr	BASEPRI_MAX, r3
    62ba:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    62be:	68c3      	ldr	r3, [r0, #12]
    62c0:	4a32      	ldr	r2, [pc, #200]	; (638c <z_impl_k_mutex_lock+0xe8>)
    62c2:	b16b      	cbz	r3, 62e0 <z_impl_k_mutex_lock+0x3c>
    62c4:	6880      	ldr	r0, [r0, #8]
    62c6:	6891      	ldr	r1, [r2, #8]
    62c8:	4288      	cmp	r0, r1
    62ca:	d019      	beq.n	6300 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    62cc:	ea57 0306 	orrs.w	r3, r7, r6
    62d0:	d118      	bne.n	6304 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    62d2:	f388 8811 	msr	BASEPRI, r8
    62d6:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    62da:	f06f 000f 	mvn.w	r0, #15
    62de:	e00c      	b.n	62fa <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    62e0:	6891      	ldr	r1, [r2, #8]
    62e2:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    62e6:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    62e8:	3301      	adds	r3, #1
    62ea:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    62ec:	6893      	ldr	r3, [r2, #8]
    62ee:	60a3      	str	r3, [r4, #8]
    62f0:	f388 8811 	msr	BASEPRI, r8
    62f4:	f3bf 8f6f 	isb	sy
		return 0;
    62f8:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    62fa:	b002      	add	sp, #8
    62fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    6300:	6921      	ldr	r1, [r4, #16]
    6302:	e7f0      	b.n	62e6 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    6304:	f991 100e 	ldrsb.w	r1, [r1, #14]
    6308:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    630c:	4299      	cmp	r1, r3
    630e:	bfa8      	it	ge
    6310:	4619      	movge	r1, r3
    6312:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    6316:	4291      	cmp	r1, r2
    6318:	bfb8      	it	lt
    631a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    631c:	428b      	cmp	r3, r1
    631e:	dd2e      	ble.n	637e <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    6320:	f001 ffdf 	bl	82e2 <adjust_owner_prio.isra.0>
    6324:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    6326:	e9cd 7600 	strd	r7, r6, [sp]
    632a:	4819      	ldr	r0, [pc, #100]	; (6390 <z_impl_k_mutex_lock+0xec>)
    632c:	4622      	mov	r2, r4
    632e:	4641      	mov	r1, r8
    6330:	f000 fba8 	bl	6a84 <z_pend_curr>
	if (got_mutex == 0) {
    6334:	2800      	cmp	r0, #0
    6336:	d0e0      	beq.n	62fa <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    6338:	f04f 0320 	mov.w	r3, #32
    633c:	f3ef 8611 	mrs	r6, BASEPRI
    6340:	f383 8812 	msr	BASEPRI_MAX, r3
    6344:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    6348:	6823      	ldr	r3, [r4, #0]
    634a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    634c:	429c      	cmp	r4, r3
    634e:	d00a      	beq.n	6366 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    6350:	b14b      	cbz	r3, 6366 <z_impl_k_mutex_lock+0xc2>
    6352:	f993 300e 	ldrsb.w	r3, [r3, #14]
    6356:	4299      	cmp	r1, r3
    6358:	bfa8      	it	ge
    635a:	4619      	movge	r1, r3
    635c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    6360:	4299      	cmp	r1, r3
    6362:	bfb8      	it	lt
    6364:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    6366:	68a0      	ldr	r0, [r4, #8]
    6368:	f001 ffbb 	bl	82e2 <adjust_owner_prio.isra.0>
    636c:	b900      	cbnz	r0, 6370 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    636e:	b145      	cbz	r5, 6382 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    6370:	4807      	ldr	r0, [pc, #28]	; (6390 <z_impl_k_mutex_lock+0xec>)
    6372:	4631      	mov	r1, r6
    6374:	f000 fa32 	bl	67dc <z_reschedule>
	return -EAGAIN;
    6378:	f06f 000a 	mvn.w	r0, #10
    637c:	e7bd      	b.n	62fa <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    637e:	2500      	movs	r5, #0
    6380:	e7d1      	b.n	6326 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    6382:	f386 8811 	msr	BASEPRI, r6
    6386:	f3bf 8f6f 	isb	sy
    638a:	e7f5      	b.n	6378 <z_impl_k_mutex_lock+0xd4>
    638c:	20000af0 	.word	0x20000af0
    6390:	20000f5a 	.word	0x20000f5a

00006394 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    6394:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    6396:	6883      	ldr	r3, [r0, #8]
{
    6398:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    639a:	2b00      	cmp	r3, #0
    639c:	d032      	beq.n	6404 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    639e:	4a1c      	ldr	r2, [pc, #112]	; (6410 <z_impl_k_mutex_unlock+0x7c>)
    63a0:	6892      	ldr	r2, [r2, #8]
    63a2:	4293      	cmp	r3, r2
    63a4:	d131      	bne.n	640a <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    63a6:	7bda      	ldrb	r2, [r3, #15]
    63a8:	3a01      	subs	r2, #1
    63aa:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    63ac:	68c3      	ldr	r3, [r0, #12]
    63ae:	2b01      	cmp	r3, #1
    63b0:	d905      	bls.n	63be <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    63b2:	3b01      	subs	r3, #1
    63b4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    63b6:	f000 fbf3 	bl	6ba0 <k_sched_unlock>

	return 0;
    63ba:	2000      	movs	r0, #0
}
    63bc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    63be:	f04f 0320 	mov.w	r3, #32
    63c2:	f3ef 8511 	mrs	r5, BASEPRI
    63c6:	f383 8812 	msr	BASEPRI_MAX, r3
    63ca:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    63ce:	6901      	ldr	r1, [r0, #16]
    63d0:	6880      	ldr	r0, [r0, #8]
    63d2:	f001 ff86 	bl	82e2 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    63d6:	4620      	mov	r0, r4
    63d8:	f002 f8b5 	bl	8546 <z_unpend_first_thread>
	mutex->owner = new_owner;
    63dc:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    63de:	b158      	cbz	r0, 63f8 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    63e0:	f990 200e 	ldrsb.w	r2, [r0, #14]
    63e4:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    63e6:	2200      	movs	r2, #0
    63e8:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    63ea:	f002 f83b 	bl	8464 <z_ready_thread>
		z_reschedule(&lock, key);
    63ee:	4809      	ldr	r0, [pc, #36]	; (6414 <z_impl_k_mutex_unlock+0x80>)
    63f0:	4629      	mov	r1, r5
    63f2:	f000 f9f3 	bl	67dc <z_reschedule>
    63f6:	e7de      	b.n	63b6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    63f8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    63fa:	f385 8811 	msr	BASEPRI, r5
    63fe:	f3bf 8f6f 	isb	sy
    6402:	e7d8      	b.n	63b6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    6404:	f06f 0015 	mvn.w	r0, #21
    6408:	e7d8      	b.n	63bc <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    640a:	f04f 30ff 	mov.w	r0, #4294967295
    640e:	e7d5      	b.n	63bc <z_impl_k_mutex_unlock+0x28>
    6410:	20000af0 	.word	0x20000af0
    6414:	20000f5a 	.word	0x20000f5a

00006418 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    6418:	b538      	push	{r3, r4, r5, lr}
    641a:	4604      	mov	r4, r0
	__asm__ volatile(
    641c:	f04f 0320 	mov.w	r3, #32
    6420:	f3ef 8511 	mrs	r5, BASEPRI
    6424:	f383 8812 	msr	BASEPRI_MAX, r3
    6428:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    642c:	f002 f88b 	bl	8546 <z_unpend_first_thread>

	if (thread != NULL) {
    6430:	b148      	cbz	r0, 6446 <z_impl_k_sem_give+0x2e>
    6432:	2200      	movs	r2, #0
    6434:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    6436:	f002 f815 	bl	8464 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    643a:	4629      	mov	r1, r5
    643c:	4805      	ldr	r0, [pc, #20]	; (6454 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    643e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    6442:	f000 b9cb 	b.w	67dc <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    6446:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    644a:	429a      	cmp	r2, r3
    644c:	bf18      	it	ne
    644e:	3301      	addne	r3, #1
    6450:	60a3      	str	r3, [r4, #8]
}
    6452:	e7f2      	b.n	643a <z_impl_k_sem_give+0x22>
    6454:	20000f5a 	.word	0x20000f5a

00006458 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    6458:	b513      	push	{r0, r1, r4, lr}
    645a:	f04f 0420 	mov.w	r4, #32
    645e:	f3ef 8111 	mrs	r1, BASEPRI
    6462:	f384 8812 	msr	BASEPRI_MAX, r4
    6466:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    646a:	6884      	ldr	r4, [r0, #8]
    646c:	b144      	cbz	r4, 6480 <z_impl_k_sem_take+0x28>
		sem->count--;
    646e:	3c01      	subs	r4, #1
    6470:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    6472:	f381 8811 	msr	BASEPRI, r1
    6476:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    647a:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    647c:	b002      	add	sp, #8
    647e:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    6480:	ea52 0403 	orrs.w	r4, r2, r3
    6484:	d106      	bne.n	6494 <z_impl_k_sem_take+0x3c>
    6486:	f381 8811 	msr	BASEPRI, r1
    648a:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    648e:	f06f 000f 	mvn.w	r0, #15
    6492:	e7f3      	b.n	647c <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    6494:	e9cd 2300 	strd	r2, r3, [sp]
    6498:	4602      	mov	r2, r0
    649a:	4802      	ldr	r0, [pc, #8]	; (64a4 <z_impl_k_sem_take+0x4c>)
    649c:	f000 faf2 	bl	6a84 <z_pend_curr>
	return ret;
    64a0:	e7ec      	b.n	647c <z_impl_k_sem_take+0x24>
    64a2:	bf00      	nop
    64a4:	20000f5a 	.word	0x20000f5a

000064a8 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    64a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    64ac:	4e47      	ldr	r6, [pc, #284]	; (65cc <work_queue_main+0x124>)
    64ae:	b085      	sub	sp, #20
    64b0:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    64b2:	f04f 38ff 	mov.w	r8, #4294967295
    64b6:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
    64ba:	f04f 0320 	mov.w	r3, #32
    64be:	f3ef 8711 	mrs	r7, BASEPRI
    64c2:	f383 8812 	msr	BASEPRI_MAX, r3
    64c6:	f3bf 8f6f 	isb	sy
    64ca:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    64ce:	b98d      	cbnz	r5, 64f4 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    64d0:	2102      	movs	r1, #2
    64d2:	f104 0098 	add.w	r0, r4, #152	; 0x98
    64d6:	f001 ff1f 	bl	8318 <flag_test_and_clear>
    64da:	2800      	cmp	r0, #0
    64dc:	d135      	bne.n	654a <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    64de:	2300      	movs	r3, #0
    64e0:	e9cd 8900 	strd	r8, r9, [sp]
    64e4:	9302      	str	r3, [sp, #8]
    64e6:	f104 0288 	add.w	r2, r4, #136	; 0x88
    64ea:	4639      	mov	r1, r7
    64ec:	4838      	ldr	r0, [pc, #224]	; (65d0 <work_queue_main+0x128>)
    64ee:	f000 fc79 	bl	6de4 <z_sched_wait>
			continue;
    64f2:	e7e2      	b.n	64ba <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    64f4:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    64f8:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    64fa:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    64fe:	4295      	cmp	r5, r2
    6500:	d101      	bne.n	6506 <work_queue_main+0x5e>
	list->tail = node;
    6502:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    6506:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    650a:	f043 0302 	orr.w	r3, r3, #2
    650e:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    6512:	68eb      	ldr	r3, [r5, #12]
    6514:	f023 0304 	bic.w	r3, r3, #4
    6518:	f043 0301 	orr.w	r3, r3, #1
    651c:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    651e:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    6520:	f387 8811 	msr	BASEPRI, r7
    6524:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    6528:	4628      	mov	r0, r5
    652a:	4798      	blx	r3
	__asm__ volatile(
    652c:	f04f 0320 	mov.w	r3, #32
    6530:	f3ef 8b11 	mrs	fp, BASEPRI
    6534:	f383 8812 	msr	BASEPRI_MAX, r3
    6538:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    653c:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    653e:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    6540:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    6544:	d40b      	bmi.n	655e <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
    6546:	60ea      	str	r2, [r5, #12]
    6548:	e00e      	b.n	6568 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    654a:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    654e:	2200      	movs	r2, #0
    6550:	2101      	movs	r1, #1
    6552:	4628      	mov	r0, r5
    6554:	f002 f80f 	bl	8576 <z_sched_wake>
    6558:	2800      	cmp	r0, #0
    655a:	d1f8      	bne.n	654e <work_queue_main+0xa6>
    655c:	e7bf      	b.n	64de <work_queue_main+0x36>
	return list->head;
    655e:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    6560:	f023 0303 	bic.w	r3, r3, #3
    6564:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    6566:	b970      	cbnz	r0, 6586 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
    6568:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    656c:	f023 0302 	bic.w	r3, r3, #2
    6570:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    6574:	f38b 8811 	msr	BASEPRI, fp
    6578:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    657c:	05d8      	lsls	r0, r3, #23
    657e:	d49c      	bmi.n	64ba <work_queue_main+0x12>
	z_impl_k_yield();
    6580:	f000 fb36 	bl	6bf0 <z_impl_k_yield>
}
    6584:	e799      	b.n	64ba <work_queue_main+0x12>
	return node->next;
    6586:	2700      	movs	r7, #0
    6588:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    658c:	463b      	mov	r3, r7
		if (wc->work == work) {
    658e:	6842      	ldr	r2, [r0, #4]
    6590:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    6592:	4601      	mov	r1, r0
		if (wc->work == work) {
    6594:	d10c      	bne.n	65b0 <work_queue_main+0x108>
	return node->next;
    6596:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    6598:	b997      	cbnz	r7, 65c0 <work_queue_main+0x118>
    659a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    659c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    659e:	4282      	cmp	r2, r0
    65a0:	d100      	bne.n	65a4 <work_queue_main+0xfc>
	list->tail = node;
    65a2:	6071      	str	r1, [r6, #4]
	parent->next = child;
    65a4:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    65a8:	f7ff ff36 	bl	6418 <z_impl_k_sem_give>
}
    65ac:	4639      	mov	r1, r7
    65ae:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    65b0:	f1ba 0f00 	cmp.w	sl, #0
    65b4:	d0d8      	beq.n	6568 <work_queue_main+0xc0>
	return node->next;
    65b6:	4650      	mov	r0, sl
    65b8:	460f      	mov	r7, r1
    65ba:	f8da a000 	ldr.w	sl, [sl]
    65be:	e7e6      	b.n	658e <work_queue_main+0xe6>
	return list->tail;
    65c0:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
    65c2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    65c4:	4290      	cmp	r0, r2
	list->tail = node;
    65c6:	bf08      	it	eq
    65c8:	6077      	streq	r7, [r6, #4]
}
    65ca:	e7eb      	b.n	65a4 <work_queue_main+0xfc>
    65cc:	20000b18 	.word	0x20000b18
    65d0:	20000f5a 	.word	0x20000f5a

000065d4 <submit_to_queue_locked>:
{
    65d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    65d6:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    65d8:	079a      	lsls	r2, r3, #30
{
    65da:	4604      	mov	r4, r0
    65dc:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    65de:	f3c3 0540 	ubfx	r5, r3, #1, #1
    65e2:	d41f      	bmi.n	6624 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    65e4:	075f      	lsls	r7, r3, #29
    65e6:	d41f      	bmi.n	6628 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    65e8:	680a      	ldr	r2, [r1, #0]
    65ea:	b90a      	cbnz	r2, 65f0 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    65ec:	6882      	ldr	r2, [r0, #8]
    65ee:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    65f0:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    65f2:	bf44      	itt	mi
    65f4:	68a3      	ldrmi	r3, [r4, #8]
    65f6:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    65f8:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    65fa:	bf4c      	ite	mi
    65fc:	2502      	movmi	r5, #2
		ret = 1;
    65fe:	2501      	movpl	r5, #1
	if (queue == NULL) {
    6600:	b37f      	cbz	r7, 6662 <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    6602:	4b1b      	ldr	r3, [pc, #108]	; (6670 <submit_to_queue_locked+0x9c>)
    6604:	689b      	ldr	r3, [r3, #8]
    6606:	42bb      	cmp	r3, r7
    6608:	d111      	bne.n	662e <submit_to_queue_locked+0x5a>
    660a:	f001 fe56 	bl	82ba <k_is_in_isr>
    660e:	f080 0001 	eor.w	r0, r0, #1
    6612:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
    6614:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    6618:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    661a:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    661e:	d523      	bpl.n	6668 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    6620:	b13a      	cbz	r2, 6632 <submit_to_queue_locked+0x5e>
    6622:	b940      	cbnz	r0, 6636 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    6624:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    6628:	2300      	movs	r3, #0
    662a:	6033      	str	r3, [r6, #0]
	return ret;
    662c:	e013      	b.n	6656 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    662e:	2000      	movs	r0, #0
    6630:	e7f0      	b.n	6614 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    6632:	071b      	lsls	r3, r3, #28
    6634:	d4f6      	bmi.n	6624 <submit_to_queue_locked+0x50>
	parent->next = child;
    6636:	2300      	movs	r3, #0
    6638:	6023      	str	r3, [r4, #0]
	return list->tail;
    663a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    663e:	b963      	cbnz	r3, 665a <submit_to_queue_locked+0x86>
	list->head = node;
    6640:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    6644:	4638      	mov	r0, r7
    6646:	f001 fe72 	bl	832e <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    664a:	68e3      	ldr	r3, [r4, #12]
    664c:	f043 0304 	orr.w	r3, r3, #4
    6650:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    6652:	6833      	ldr	r3, [r6, #0]
    6654:	60a3      	str	r3, [r4, #8]
}
    6656:	4628      	mov	r0, r5
    6658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    665a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    665c:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    6660:	e7f0      	b.n	6644 <submit_to_queue_locked+0x70>
		return -EINVAL;
    6662:	f06f 0515 	mvn.w	r5, #21
    6666:	e7df      	b.n	6628 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    6668:	f06f 0512 	mvn.w	r5, #18
    666c:	e7dc      	b.n	6628 <submit_to_queue_locked+0x54>
    666e:	bf00      	nop
    6670:	20000af0 	.word	0x20000af0

00006674 <k_work_submit>:
{
    6674:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    6676:	4801      	ldr	r0, [pc, #4]	; (667c <k_work_submit+0x8>)
    6678:	f001 be88 	b.w	838c <k_work_submit_to_queue>
    667c:	200007b8 	.word	0x200007b8

00006680 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    6680:	b5f0      	push	{r4, r5, r6, r7, lr}
    6682:	b089      	sub	sp, #36	; 0x24
    6684:	4604      	mov	r4, r0
	list->head = NULL;
    6686:	2000      	movs	r0, #0
	list->tail = NULL;
    6688:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    668c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    668e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    6692:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    6696:	f104 0090 	add.w	r0, r4, #144	; 0x90
    669a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    669e:	b31d      	cbz	r5, 66e8 <k_work_queue_start+0x68>
    66a0:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    66a2:	2800      	cmp	r0, #0
    66a4:	f240 1001 	movw	r0, #257	; 0x101
    66a8:	bf08      	it	eq
    66aa:	2001      	moveq	r0, #1
	*flagp = flags;
    66ac:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    66b0:	2000      	movs	r0, #0
    66b2:	f04f 36ff 	mov.w	r6, #4294967295
    66b6:	f04f 37ff 	mov.w	r7, #4294967295
    66ba:	e9cd 3003 	strd	r3, r0, [sp, #12]
    66be:	e9cd 0001 	strd	r0, r0, [sp, #4]
    66c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
    66c6:	4b09      	ldr	r3, [pc, #36]	; (66ec <k_work_queue_start+0x6c>)
    66c8:	9400      	str	r4, [sp, #0]
    66ca:	4620      	mov	r0, r4
    66cc:	f7ff fd46 	bl	615c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    66d0:	b125      	cbz	r5, 66dc <k_work_queue_start+0x5c>
    66d2:	6829      	ldr	r1, [r5, #0]
    66d4:	b111      	cbz	r1, 66dc <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    66d6:	4620      	mov	r0, r4
    66d8:	f001 fdf5 	bl	82c6 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    66dc:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    66de:	b009      	add	sp, #36	; 0x24
    66e0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    66e4:	f001 bdf4 	b.w	82d0 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    66e8:	2001      	movs	r0, #1
    66ea:	e7df      	b.n	66ac <k_work_queue_start+0x2c>
    66ec:	000064a9 	.word	0x000064a9

000066f0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    66f0:	b513      	push	{r0, r1, r4, lr}
    66f2:	9001      	str	r0, [sp, #4]
    66f4:	4608      	mov	r0, r1
	__asm__ volatile(
    66f6:	f04f 0120 	mov.w	r1, #32
    66fa:	f3ef 8411 	mrs	r4, BASEPRI
    66fe:	f381 8812 	msr	BASEPRI_MAX, r1
    6702:	f3bf 8f6f 	isb	sy
	return *flagp;
    6706:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    6708:	f011 0f0e 	tst.w	r1, #14
    670c:	d116      	bne.n	673c <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    670e:	ea53 0c02 	orrs.w	ip, r3, r2
    6712:	d108      	bne.n	6726 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    6714:	a901      	add	r1, sp, #4
    6716:	f7ff ff5d 	bl	65d4 <submit_to_queue_locked>
	__asm__ volatile(
    671a:	f384 8811 	msr	BASEPRI, r4
    671e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    6722:	b002      	add	sp, #8
    6724:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
    6726:	f041 0108 	orr.w	r1, r1, #8
    672a:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    672c:	9901      	ldr	r1, [sp, #4]
    672e:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    6730:	3010      	adds	r0, #16
    6732:	4903      	ldr	r1, [pc, #12]	; (6740 <k_work_schedule_for_queue+0x50>)
    6734:	f000 fbcc 	bl	6ed0 <z_add_timeout>
	return ret;
    6738:	2001      	movs	r0, #1
    673a:	e7ee      	b.n	671a <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    673c:	2000      	movs	r0, #0
    673e:	e7ec      	b.n	671a <k_work_schedule_for_queue+0x2a>
    6740:	0000833d 	.word	0x0000833d

00006744 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
    6744:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
    6746:	4801      	ldr	r0, [pc, #4]	; (674c <k_work_schedule+0x8>)
    6748:	f7ff bfd2 	b.w	66f0 <k_work_schedule_for_queue>
    674c:	200007b8 	.word	0x200007b8

00006750 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    6750:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    6752:	4d07      	ldr	r5, [pc, #28]	; (6770 <z_reset_time_slice+0x20>)
    6754:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    6756:	b154      	cbz	r4, 676e <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    6758:	f7fd fdec 	bl	4334 <sys_clock_elapsed>
    675c:	4b05      	ldr	r3, [pc, #20]	; (6774 <z_reset_time_slice+0x24>)
    675e:	4404      	add	r4, r0
    6760:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    6762:	6828      	ldr	r0, [r5, #0]
    6764:	2100      	movs	r1, #0
	}
}
    6766:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    676a:	f001 bf47 	b.w	85fc <z_set_timeout_expiry>
}
    676e:	bd38      	pop	{r3, r4, r5, pc}
    6770:	20000b28 	.word	0x20000b28
    6774:	20000af0 	.word	0x20000af0

00006778 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    6778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    677a:	4604      	mov	r4, r0
    677c:	460d      	mov	r5, r1
	__asm__ volatile(
    677e:	f04f 0320 	mov.w	r3, #32
    6782:	f3ef 8711 	mrs	r7, BASEPRI
    6786:	f383 8812 	msr	BASEPRI_MAX, r3
    678a:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    678e:	4e10      	ldr	r6, [pc, #64]	; (67d0 <k_sched_time_slice_set+0x58>)
    6790:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    6792:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    6796:	f240 30e7 	movw	r0, #999	; 0x3e7
    679a:	6131      	str	r1, [r6, #16]
    679c:	2300      	movs	r3, #0
    679e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    67a2:	fbe4 010c 	umlal	r0, r1, r4, ip
    67a6:	f7f9 fc9b 	bl	e0 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    67aa:	2c00      	cmp	r4, #0
    67ac:	4b09      	ldr	r3, [pc, #36]	; (67d4 <k_sched_time_slice_set+0x5c>)
    67ae:	dc0a      	bgt.n	67c6 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    67b0:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    67b2:	4b09      	ldr	r3, [pc, #36]	; (67d8 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    67b4:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    67b6:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    67b8:	f7ff ffca 	bl	6750 <z_reset_time_slice>
	__asm__ volatile(
    67bc:	f387 8811 	msr	BASEPRI, r7
    67c0:	f3bf 8f6f 	isb	sy
	}
}
    67c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    67c6:	2802      	cmp	r0, #2
    67c8:	bfb8      	it	lt
    67ca:	2002      	movlt	r0, #2
    67cc:	e7f0      	b.n	67b0 <k_sched_time_slice_set+0x38>
    67ce:	bf00      	nop
    67d0:	20000af0 	.word	0x20000af0
    67d4:	20000b28 	.word	0x20000b28
    67d8:	20000b24 	.word	0x20000b24

000067dc <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    67dc:	b949      	cbnz	r1, 67f2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    67de:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    67e2:	b930      	cbnz	r0, 67f2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    67e4:	4b05      	ldr	r3, [pc, #20]	; (67fc <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    67e6:	69da      	ldr	r2, [r3, #28]
    67e8:	689b      	ldr	r3, [r3, #8]
    67ea:	429a      	cmp	r2, r3
    67ec:	d001      	beq.n	67f2 <z_reschedule+0x16>
	ret = arch_swap(key);
    67ee:	f7fb bf39 	b.w	2664 <arch_swap>
    67f2:	f381 8811 	msr	BASEPRI, r1
    67f6:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    67fa:	4770      	bx	lr
    67fc:	20000af0 	.word	0x20000af0

00006800 <k_sched_lock>:
	__asm__ volatile(
    6800:	f04f 0320 	mov.w	r3, #32
    6804:	f3ef 8111 	mrs	r1, BASEPRI
    6808:	f383 8812 	msr	BASEPRI_MAX, r3
    680c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    6810:	4b04      	ldr	r3, [pc, #16]	; (6824 <k_sched_lock+0x24>)
    6812:	689a      	ldr	r2, [r3, #8]
    6814:	7bd3      	ldrb	r3, [r2, #15]
    6816:	3b01      	subs	r3, #1
    6818:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    681a:	f381 8811 	msr	BASEPRI, r1
    681e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    6822:	4770      	bx	lr
    6824:	20000af0 	.word	0x20000af0

00006828 <update_cache>:
{
    6828:	b538      	push	{r3, r4, r5, lr}
    682a:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    682c:	480c      	ldr	r0, [pc, #48]	; (6860 <update_cache+0x38>)
    682e:	4d0d      	ldr	r5, [pc, #52]	; (6864 <update_cache+0x3c>)
    6830:	f001 fe12 	bl	8458 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    6834:	4604      	mov	r4, r0
    6836:	b900      	cbnz	r0, 683a <update_cache+0x12>
    6838:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    683a:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    683c:	b94a      	cbnz	r2, 6852 <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    683e:	7b5a      	ldrb	r2, [r3, #13]
    6840:	06d2      	lsls	r2, r2, #27
    6842:	d106      	bne.n	6852 <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    6844:	69a2      	ldr	r2, [r4, #24]
    6846:	b922      	cbnz	r2, 6852 <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    6848:	89da      	ldrh	r2, [r3, #14]
    684a:	2a7f      	cmp	r2, #127	; 0x7f
    684c:	d901      	bls.n	6852 <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    684e:	61eb      	str	r3, [r5, #28]
}
    6850:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    6852:	429c      	cmp	r4, r3
    6854:	d002      	beq.n	685c <update_cache+0x34>
			z_reset_time_slice(thread);
    6856:	4620      	mov	r0, r4
    6858:	f7ff ff7a 	bl	6750 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    685c:	61ec      	str	r4, [r5, #28]
}
    685e:	e7f7      	b.n	6850 <update_cache+0x28>
    6860:	20000b10 	.word	0x20000b10
    6864:	20000af0 	.word	0x20000af0

00006868 <move_thread_to_end_of_prio_q>:
{
    6868:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    686a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    686e:	7b43      	ldrb	r3, [r0, #13]
    6870:	2a00      	cmp	r2, #0
{
    6872:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    6874:	da04      	bge.n	6880 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6876:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    687a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    687c:	f001 fdb4 	bl	83e8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6880:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    6882:	4a15      	ldr	r2, [pc, #84]	; (68d8 <move_thread_to_end_of_prio_q+0x70>)
    6884:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6888:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    688a:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    688e:	f102 0520 	add.w	r5, r2, #32
    6892:	42ab      	cmp	r3, r5
    6894:	d01b      	beq.n	68ce <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6896:	b1d3      	cbz	r3, 68ce <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    6898:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    689c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    68a0:	4286      	cmp	r6, r0
    68a2:	d00f      	beq.n	68c4 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    68a4:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    68a6:	2800      	cmp	r0, #0
    68a8:	dd0c      	ble.n	68c4 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    68aa:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    68ac:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    68b0:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    68b2:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    68b4:	6890      	ldr	r0, [r2, #8]
    68b6:	1a43      	subs	r3, r0, r1
    68b8:	4258      	negs	r0, r3
}
    68ba:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    68be:	4158      	adcs	r0, r3
    68c0:	f7ff bfb2 	b.w	6828 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    68c4:	42a3      	cmp	r3, r4
    68c6:	d002      	beq.n	68ce <move_thread_to_end_of_prio_q+0x66>
    68c8:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    68ca:	2b00      	cmp	r3, #0
    68cc:	d1e6      	bne.n	689c <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    68ce:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    68d2:	6021      	str	r1, [r4, #0]
	list->tail = node;
    68d4:	6251      	str	r1, [r2, #36]	; 0x24
}
    68d6:	e7ed      	b.n	68b4 <move_thread_to_end_of_prio_q+0x4c>
    68d8:	20000af0 	.word	0x20000af0

000068dc <z_time_slice>:
{
    68dc:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    68de:	f04f 0320 	mov.w	r3, #32
    68e2:	f3ef 8511 	mrs	r5, BASEPRI
    68e6:	f383 8812 	msr	BASEPRI_MAX, r3
    68ea:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    68ee:	4b17      	ldr	r3, [pc, #92]	; (694c <z_time_slice+0x70>)
    68f0:	4a17      	ldr	r2, [pc, #92]	; (6950 <z_time_slice+0x74>)
    68f2:	689c      	ldr	r4, [r3, #8]
    68f4:	6811      	ldr	r1, [r2, #0]
    68f6:	428c      	cmp	r4, r1
    68f8:	d107      	bne.n	690a <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    68fa:	4620      	mov	r0, r4
    68fc:	f7ff ff28 	bl	6750 <z_reset_time_slice>
	__asm__ volatile(
    6900:	f385 8811 	msr	BASEPRI, r5
    6904:	f3bf 8f6f 	isb	sy
}
    6908:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    690a:	2100      	movs	r1, #0
    690c:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    690e:	4a11      	ldr	r2, [pc, #68]	; (6954 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    6910:	6812      	ldr	r2, [r2, #0]
    6912:	b1c2      	cbz	r2, 6946 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    6914:	89e2      	ldrh	r2, [r4, #14]
    6916:	2a7f      	cmp	r2, #127	; 0x7f
    6918:	d815      	bhi.n	6946 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    691a:	7b62      	ldrb	r2, [r4, #13]
    691c:	06d2      	lsls	r2, r2, #27
    691e:	d112      	bne.n	6946 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    6920:	4a0d      	ldr	r2, [pc, #52]	; (6958 <z_time_slice+0x7c>)
    6922:	f994 100e 	ldrsb.w	r1, [r4, #14]
    6926:	6812      	ldr	r2, [r2, #0]
    6928:	4291      	cmp	r1, r2
    692a:	db0c      	blt.n	6946 <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    692c:	4a0b      	ldr	r2, [pc, #44]	; (695c <z_time_slice+0x80>)
    692e:	4294      	cmp	r4, r2
    6930:	d009      	beq.n	6946 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    6932:	691a      	ldr	r2, [r3, #16]
    6934:	4282      	cmp	r2, r0
    6936:	dc03      	bgt.n	6940 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    6938:	4620      	mov	r0, r4
    693a:	f7ff ff95 	bl	6868 <move_thread_to_end_of_prio_q>
    693e:	e7dc      	b.n	68fa <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    6940:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    6942:	611a      	str	r2, [r3, #16]
    6944:	e7dc      	b.n	6900 <z_time_slice+0x24>
    6946:	2200      	movs	r2, #0
    6948:	e7fb      	b.n	6942 <z_time_slice+0x66>
    694a:	bf00      	nop
    694c:	20000af0 	.word	0x20000af0
    6950:	20000b20 	.word	0x20000b20
    6954:	20000b28 	.word	0x20000b28
    6958:	20000b24 	.word	0x20000b24
    695c:	200006b0 	.word	0x200006b0

00006960 <ready_thread>:
{
    6960:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    6962:	f990 200d 	ldrsb.w	r2, [r0, #13]
    6966:	7b43      	ldrb	r3, [r0, #13]
    6968:	2a00      	cmp	r2, #0
    696a:	db2a      	blt.n	69c2 <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    696c:	06da      	lsls	r2, r3, #27
    696e:	d128      	bne.n	69c2 <ready_thread+0x62>
    6970:	6982      	ldr	r2, [r0, #24]
    6972:	bb32      	cbnz	r2, 69c2 <ready_thread+0x62>
	return list->head == list;
    6974:	4a14      	ldr	r2, [pc, #80]	; (69c8 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    6976:	f063 037f 	orn	r3, r3, #127	; 0x7f
    697a:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    697c:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6980:	f102 0520 	add.w	r5, r2, #32
    6984:	42ab      	cmp	r3, r5
    6986:	d017      	beq.n	69b8 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6988:	b1b3      	cbz	r3, 69b8 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    698a:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    698e:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    6992:	428e      	cmp	r6, r1
    6994:	d00b      	beq.n	69ae <ready_thread+0x4e>
		return b2 - b1;
    6996:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    6998:	2900      	cmp	r1, #0
    699a:	dd08      	ble.n	69ae <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    699c:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    699e:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    69a2:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    69a4:	6058      	str	r0, [r3, #4]
}
    69a6:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    69a8:	2000      	movs	r0, #0
    69aa:	f7ff bf3d 	b.w	6828 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    69ae:	42a3      	cmp	r3, r4
    69b0:	d002      	beq.n	69b8 <ready_thread+0x58>
    69b2:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    69b4:	2b00      	cmp	r3, #0
    69b6:	d1ea      	bne.n	698e <ready_thread+0x2e>
	node->prev = tail;
    69b8:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    69bc:	6020      	str	r0, [r4, #0]
	list->tail = node;
    69be:	6250      	str	r0, [r2, #36]	; 0x24
}
    69c0:	e7f1      	b.n	69a6 <ready_thread+0x46>
}
    69c2:	bc70      	pop	{r4, r5, r6}
    69c4:	4770      	bx	lr
    69c6:	bf00      	nop
    69c8:	20000af0 	.word	0x20000af0

000069cc <z_sched_start>:
{
    69cc:	b510      	push	{r4, lr}
	__asm__ volatile(
    69ce:	f04f 0220 	mov.w	r2, #32
    69d2:	f3ef 8411 	mrs	r4, BASEPRI
    69d6:	f382 8812 	msr	BASEPRI_MAX, r2
    69da:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    69de:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    69e0:	0751      	lsls	r1, r2, #29
    69e2:	d404      	bmi.n	69ee <z_sched_start+0x22>
	__asm__ volatile(
    69e4:	f384 8811 	msr	BASEPRI, r4
    69e8:	f3bf 8f6f 	isb	sy
}
    69ec:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    69ee:	f022 0204 	bic.w	r2, r2, #4
    69f2:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    69f4:	f7ff ffb4 	bl	6960 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    69f8:	4621      	mov	r1, r4
    69fa:	4802      	ldr	r0, [pc, #8]	; (6a04 <z_sched_start+0x38>)
}
    69fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    6a00:	f7ff beec 	b.w	67dc <z_reschedule>
    6a04:	20000f5a 	.word	0x20000f5a

00006a08 <unready_thread>:
{
    6a08:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    6a0a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    6a0e:	7b43      	ldrb	r3, [r0, #13]
    6a10:	2a00      	cmp	r2, #0
{
    6a12:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    6a14:	da04      	bge.n	6a20 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6a16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6a1a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6a1c:	f001 fce4 	bl	83e8 <sys_dlist_remove>
	update_cache(thread == _current);
    6a20:	4b04      	ldr	r3, [pc, #16]	; (6a34 <unready_thread+0x2c>)
    6a22:	6898      	ldr	r0, [r3, #8]
    6a24:	1a43      	subs	r3, r0, r1
    6a26:	4258      	negs	r0, r3
    6a28:	4158      	adcs	r0, r3
}
    6a2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    6a2e:	f7ff befb 	b.w	6828 <update_cache>
    6a32:	bf00      	nop
    6a34:	20000af0 	.word	0x20000af0

00006a38 <pend>:
{
    6a38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6a3c:	4606      	mov	r6, r0
    6a3e:	4615      	mov	r5, r2
    6a40:	461c      	mov	r4, r3
	__asm__ volatile(
    6a42:	f04f 0320 	mov.w	r3, #32
    6a46:	f3ef 8711 	mrs	r7, BASEPRI
    6a4a:	f383 8812 	msr	BASEPRI_MAX, r3
    6a4e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    6a52:	f001 fd39 	bl	84c8 <add_to_waitq_locked>
	__asm__ volatile(
    6a56:	f387 8811 	msr	BASEPRI, r7
    6a5a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6a5e:	f1b4 3fff 	cmp.w	r4, #4294967295
    6a62:	bf08      	it	eq
    6a64:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    6a68:	d008      	beq.n	6a7c <pend+0x44>
    6a6a:	462a      	mov	r2, r5
    6a6c:	4623      	mov	r3, r4
    6a6e:	f106 0018 	add.w	r0, r6, #24
    6a72:	4903      	ldr	r1, [pc, #12]	; (6a80 <pend+0x48>)
}
    6a74:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6a78:	f000 ba2a 	b.w	6ed0 <z_add_timeout>
    6a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6a80:	00008485 	.word	0x00008485

00006a84 <z_pend_curr>:
{
    6a84:	b510      	push	{r4, lr}
	pending_current = _current;
    6a86:	4b07      	ldr	r3, [pc, #28]	; (6aa4 <z_pend_curr+0x20>)
    6a88:	6898      	ldr	r0, [r3, #8]
    6a8a:	4b07      	ldr	r3, [pc, #28]	; (6aa8 <z_pend_curr+0x24>)
{
    6a8c:	460c      	mov	r4, r1
	pending_current = _current;
    6a8e:	6018      	str	r0, [r3, #0]
{
    6a90:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    6a92:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    6a96:	f7ff ffcf 	bl	6a38 <pend>
    6a9a:	4620      	mov	r0, r4
}
    6a9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    6aa0:	f7fb bde0 	b.w	2664 <arch_swap>
    6aa4:	20000af0 	.word	0x20000af0
    6aa8:	20000b20 	.word	0x20000b20

00006aac <z_set_prio>:
{
    6aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6aae:	4604      	mov	r4, r0
	__asm__ volatile(
    6ab0:	f04f 0320 	mov.w	r3, #32
    6ab4:	f3ef 8611 	mrs	r6, BASEPRI
    6ab8:	f383 8812 	msr	BASEPRI_MAX, r3
    6abc:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    6ac0:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6ac2:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    6ac4:	b249      	sxtb	r1, r1
    6ac6:	d133      	bne.n	6b30 <z_set_prio+0x84>
		if (need_sched) {
    6ac8:	6982      	ldr	r2, [r0, #24]
    6aca:	bb8a      	cbnz	r2, 6b30 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6acc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6ad0:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6ad2:	f001 fc89 	bl	83e8 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6ad6:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    6ad8:	4a17      	ldr	r2, [pc, #92]	; (6b38 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    6ada:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    6adc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6ae0:	7343      	strb	r3, [r0, #13]
    6ae2:	4610      	mov	r0, r2
    6ae4:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6ae8:	4283      	cmp	r3, r0
    6aea:	d01b      	beq.n	6b24 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6aec:	b1d3      	cbz	r3, 6b24 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    6aee:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    6af0:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    6af4:	42a9      	cmp	r1, r5
    6af6:	d010      	beq.n	6b1a <z_set_prio+0x6e>
		return b2 - b1;
    6af8:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    6afa:	2d00      	cmp	r5, #0
    6afc:	dd0d      	ble.n	6b1a <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    6afe:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6b00:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6b04:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6b06:	605c      	str	r4, [r3, #4]
			update_cache(1);
    6b08:	2001      	movs	r0, #1
    6b0a:	f7ff fe8d 	bl	6828 <update_cache>
    6b0e:	2001      	movs	r0, #1
	__asm__ volatile(
    6b10:	f386 8811 	msr	BASEPRI, r6
    6b14:	f3bf 8f6f 	isb	sy
}
    6b18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    6b1a:	42bb      	cmp	r3, r7
    6b1c:	d002      	beq.n	6b24 <z_set_prio+0x78>
    6b1e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6b20:	2b00      	cmp	r3, #0
    6b22:	d1e5      	bne.n	6af0 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    6b24:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    6b26:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    6b2a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6b2c:	6254      	str	r4, [r2, #36]	; 0x24
}
    6b2e:	e7eb      	b.n	6b08 <z_set_prio+0x5c>
			thread->base.prio = prio;
    6b30:	73a1      	strb	r1, [r4, #14]
    6b32:	2000      	movs	r0, #0
    6b34:	e7ec      	b.n	6b10 <z_set_prio+0x64>
    6b36:	bf00      	nop
    6b38:	20000af0 	.word	0x20000af0

00006b3c <z_impl_k_thread_suspend>:
{
    6b3c:	b570      	push	{r4, r5, r6, lr}
    6b3e:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    6b40:	3018      	adds	r0, #24
    6b42:	f001 fd35 	bl	85b0 <z_abort_timeout>
	__asm__ volatile(
    6b46:	f04f 0320 	mov.w	r3, #32
    6b4a:	f3ef 8611 	mrs	r6, BASEPRI
    6b4e:	f383 8812 	msr	BASEPRI_MAX, r3
    6b52:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    6b56:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    6b5a:	7b63      	ldrb	r3, [r4, #13]
    6b5c:	2a00      	cmp	r2, #0
    6b5e:	da05      	bge.n	6b6c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6b60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6b64:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6b66:	4620      	mov	r0, r4
    6b68:	f001 fc3e 	bl	83e8 <sys_dlist_remove>
		update_cache(thread == _current);
    6b6c:	4d0b      	ldr	r5, [pc, #44]	; (6b9c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6b6e:	7b63      	ldrb	r3, [r4, #13]
    6b70:	68a8      	ldr	r0, [r5, #8]
    6b72:	f043 0310 	orr.w	r3, r3, #16
    6b76:	7363      	strb	r3, [r4, #13]
    6b78:	1b03      	subs	r3, r0, r4
    6b7a:	4258      	negs	r0, r3
    6b7c:	4158      	adcs	r0, r3
    6b7e:	f7ff fe53 	bl	6828 <update_cache>
	__asm__ volatile(
    6b82:	f386 8811 	msr	BASEPRI, r6
    6b86:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    6b8a:	68ab      	ldr	r3, [r5, #8]
    6b8c:	42a3      	cmp	r3, r4
    6b8e:	d103      	bne.n	6b98 <z_impl_k_thread_suspend+0x5c>
}
    6b90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    6b94:	f001 bc56 	b.w	8444 <z_reschedule_unlocked>
}
    6b98:	bd70      	pop	{r4, r5, r6, pc}
    6b9a:	bf00      	nop
    6b9c:	20000af0 	.word	0x20000af0

00006ba0 <k_sched_unlock>:
{
    6ba0:	b510      	push	{r4, lr}
	__asm__ volatile(
    6ba2:	f04f 0320 	mov.w	r3, #32
    6ba6:	f3ef 8411 	mrs	r4, BASEPRI
    6baa:	f383 8812 	msr	BASEPRI_MAX, r3
    6bae:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    6bb2:	4b08      	ldr	r3, [pc, #32]	; (6bd4 <k_sched_unlock+0x34>)
    6bb4:	689a      	ldr	r2, [r3, #8]
    6bb6:	7bd3      	ldrb	r3, [r2, #15]
    6bb8:	3301      	adds	r3, #1
    6bba:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    6bbc:	2000      	movs	r0, #0
    6bbe:	f7ff fe33 	bl	6828 <update_cache>
	__asm__ volatile(
    6bc2:	f384 8811 	msr	BASEPRI, r4
    6bc6:	f3bf 8f6f 	isb	sy
}
    6bca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    6bce:	f001 bc39 	b.w	8444 <z_reschedule_unlocked>
    6bd2:	bf00      	nop
    6bd4:	20000af0 	.word	0x20000af0

00006bd8 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    6bd8:	4b04      	ldr	r3, [pc, #16]	; (6bec <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    6bda:	2100      	movs	r1, #0
    6bdc:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    6be0:	e9c3 2208 	strd	r2, r2, [r3, #32]
    6be4:	4608      	mov	r0, r1
    6be6:	f7ff bdc7 	b.w	6778 <k_sched_time_slice_set>
    6bea:	bf00      	nop
    6bec:	20000af0 	.word	0x20000af0

00006bf0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    6bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    6bf2:	f04f 0320 	mov.w	r3, #32
    6bf6:	f3ef 8511 	mrs	r5, BASEPRI
    6bfa:	f383 8812 	msr	BASEPRI_MAX, r3
    6bfe:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    6c02:	491a      	ldr	r1, [pc, #104]	; (6c6c <z_impl_k_yield+0x7c>)
    6c04:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6c06:	7b43      	ldrb	r3, [r0, #13]
    6c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6c0c:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6c0e:	f001 fbeb 	bl	83e8 <sys_dlist_remove>
	}
	queue_thread(_current);
    6c12:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    6c14:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    6c16:	4608      	mov	r0, r1
    6c18:	f062 027f 	orn	r2, r2, #127	; 0x7f
    6c1c:	735a      	strb	r2, [r3, #13]
    6c1e:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6c22:	4282      	cmp	r2, r0
    6c24:	d01c      	beq.n	6c60 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6c26:	b1da      	cbz	r2, 6c60 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    6c28:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    6c2a:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    6c2e:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    6c32:	42a6      	cmp	r6, r4
    6c34:	d00f      	beq.n	6c56 <z_impl_k_yield+0x66>
		return b2 - b1;
    6c36:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    6c38:	2c00      	cmp	r4, #0
    6c3a:	dd0c      	ble.n	6c56 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    6c3c:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    6c3e:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    6c42:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    6c44:	6053      	str	r3, [r2, #4]
	update_cache(1);
    6c46:	2001      	movs	r0, #1
    6c48:	f7ff fdee 	bl	6828 <update_cache>
    6c4c:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    6c4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    6c52:	f7fb bd07 	b.w	2664 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    6c56:	42ba      	cmp	r2, r7
    6c58:	d002      	beq.n	6c60 <z_impl_k_yield+0x70>
    6c5a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6c5c:	2a00      	cmp	r2, #0
    6c5e:	d1e6      	bne.n	6c2e <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    6c60:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    6c62:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    6c66:	6013      	str	r3, [r2, #0]
	list->tail = node;
    6c68:	624b      	str	r3, [r1, #36]	; 0x24
}
    6c6a:	e7ec      	b.n	6c46 <z_impl_k_yield+0x56>
    6c6c:	20000af0 	.word	0x20000af0

00006c70 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    6c70:	ea50 0301 	orrs.w	r3, r0, r1
{
    6c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6c78:	4605      	mov	r5, r0
    6c7a:	460e      	mov	r6, r1
	if (ticks == 0) {
    6c7c:	d103      	bne.n	6c86 <z_tick_sleep+0x16>
	z_impl_k_yield();
    6c7e:	f7ff ffb7 	bl	6bf0 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    6c82:	2000      	movs	r0, #0
    6c84:	e033      	b.n	6cee <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    6c86:	f06f 0401 	mvn.w	r4, #1
    6c8a:	1a24      	subs	r4, r4, r0
    6c8c:	f04f 33ff 	mov.w	r3, #4294967295
    6c90:	eb63 0301 	sbc.w	r3, r3, r1
    6c94:	2c01      	cmp	r4, #1
    6c96:	f173 0300 	sbcs.w	r3, r3, #0
    6c9a:	da02      	bge.n	6ca2 <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    6c9c:	f001 fcc8 	bl	8630 <sys_clock_tick_get_32>
    6ca0:	1944      	adds	r4, r0, r5
    6ca2:	f04f 0320 	mov.w	r3, #32
    6ca6:	f3ef 8811 	mrs	r8, BASEPRI
    6caa:	f383 8812 	msr	BASEPRI_MAX, r3
    6cae:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    6cb2:	4f10      	ldr	r7, [pc, #64]	; (6cf4 <z_tick_sleep+0x84>)
    6cb4:	4b10      	ldr	r3, [pc, #64]	; (6cf8 <z_tick_sleep+0x88>)
    6cb6:	68b8      	ldr	r0, [r7, #8]
    6cb8:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    6cba:	f7ff fea5 	bl	6a08 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    6cbe:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6cc0:	490e      	ldr	r1, [pc, #56]	; (6cfc <z_tick_sleep+0x8c>)
    6cc2:	462a      	mov	r2, r5
    6cc4:	4633      	mov	r3, r6
    6cc6:	3018      	adds	r0, #24
    6cc8:	f000 f902 	bl	6ed0 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    6ccc:	68ba      	ldr	r2, [r7, #8]
    6cce:	7b53      	ldrb	r3, [r2, #13]
    6cd0:	f043 0310 	orr.w	r3, r3, #16
    6cd4:	7353      	strb	r3, [r2, #13]
    6cd6:	4640      	mov	r0, r8
    6cd8:	f7fb fcc4 	bl	2664 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    6cdc:	f001 fca8 	bl	8630 <sys_clock_tick_get_32>
    6ce0:	1a20      	subs	r0, r4, r0
    6ce2:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    6ce6:	2801      	cmp	r0, #1
    6ce8:	f173 0300 	sbcs.w	r3, r3, #0
    6cec:	dbc9      	blt.n	6c82 <z_tick_sleep+0x12>
}
    6cee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6cf2:	bf00      	nop
    6cf4:	20000af0 	.word	0x20000af0
    6cf8:	20000b20 	.word	0x20000b20
    6cfc:	00008485 	.word	0x00008485

00006d00 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6d00:	f1b1 3fff 	cmp.w	r1, #4294967295
    6d04:	bf08      	it	eq
    6d06:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    6d0a:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6d0c:	d106      	bne.n	6d1c <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    6d0e:	4b08      	ldr	r3, [pc, #32]	; (6d30 <z_impl_k_sleep+0x30>)
    6d10:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    6d12:	f7ff ff13 	bl	6b3c <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    6d16:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    6d1a:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    6d1c:	f7ff ffa8 	bl	6c70 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    6d20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    6d24:	fb80 0303 	smull	r0, r3, r0, r3
    6d28:	0bc0      	lsrs	r0, r0, #15
    6d2a:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    6d2e:	e7f4      	b.n	6d1a <z_impl_k_sleep+0x1a>
    6d30:	20000af0 	.word	0x20000af0

00006d34 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    6d34:	4b01      	ldr	r3, [pc, #4]	; (6d3c <z_impl_z_current_get+0x8>)
    6d36:	6898      	ldr	r0, [r3, #8]
    6d38:	4770      	bx	lr
    6d3a:	bf00      	nop
    6d3c:	20000af0 	.word	0x20000af0

00006d40 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    6d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d44:	4604      	mov	r4, r0
    6d46:	f04f 0320 	mov.w	r3, #32
    6d4a:	f3ef 8611 	mrs	r6, BASEPRI
    6d4e:	f383 8812 	msr	BASEPRI_MAX, r3
    6d52:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    6d56:	7b43      	ldrb	r3, [r0, #13]
    6d58:	071a      	lsls	r2, r3, #28
    6d5a:	d505      	bpl.n	6d68 <z_thread_abort+0x28>
	__asm__ volatile(
    6d5c:	f386 8811 	msr	BASEPRI, r6
    6d60:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    6d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6d68:	f023 0220 	bic.w	r2, r3, #32
    6d6c:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    6d70:	09d2      	lsrs	r2, r2, #7
    6d72:	d120      	bne.n	6db6 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    6d74:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    6d76:	68a3      	ldr	r3, [r4, #8]
    6d78:	b113      	cbz	r3, 6d80 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    6d7a:	4620      	mov	r0, r4
    6d7c:	f001 fb3c 	bl	83f8 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    6d80:	f104 0018 	add.w	r0, r4, #24
    6d84:	f001 fc14 	bl	85b0 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    6d88:	f104 0758 	add.w	r7, r4, #88	; 0x58
    6d8c:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    6d90:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6d92:	42bd      	cmp	r5, r7
    6d94:	d000      	beq.n	6d98 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    6d96:	b9b5      	cbnz	r5, 6dc6 <z_thread_abort+0x86>
		update_cache(1);
    6d98:	2001      	movs	r0, #1
    6d9a:	f7ff fd45 	bl	6828 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    6d9e:	4b10      	ldr	r3, [pc, #64]	; (6de0 <z_thread_abort+0xa0>)
    6da0:	689b      	ldr	r3, [r3, #8]
    6da2:	42a3      	cmp	r3, r4
    6da4:	d1da      	bne.n	6d5c <z_thread_abort+0x1c>
    6da6:	f3ef 8305 	mrs	r3, IPSR
    6daa:	2b00      	cmp	r3, #0
    6dac:	d1d6      	bne.n	6d5c <z_thread_abort+0x1c>
    6dae:	4630      	mov	r0, r6
    6db0:	f7fb fc58 	bl	2664 <arch_swap>
	return ret;
    6db4:	e7d2      	b.n	6d5c <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6db6:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    6dba:	f043 0308 	orr.w	r3, r3, #8
    6dbe:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    6dc0:	f001 fb12 	bl	83e8 <sys_dlist_remove>
}
    6dc4:	e7d7      	b.n	6d76 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    6dc6:	4628      	mov	r0, r5
    6dc8:	f001 fb16 	bl	83f8 <unpend_thread_no_timeout>
    6dcc:	f105 0018 	add.w	r0, r5, #24
    6dd0:	f001 fbee 	bl	85b0 <z_abort_timeout>
    6dd4:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    6dd8:	4628      	mov	r0, r5
    6dda:	f7ff fdc1 	bl	6960 <ready_thread>
    6dde:	e7d7      	b.n	6d90 <z_thread_abort+0x50>
    6de0:	20000af0 	.word	0x20000af0

00006de4 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    6de4:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    6de6:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    6dea:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    6dec:	e9cd 6700 	strd	r6, r7, [sp]
    6df0:	f7ff fe48 	bl	6a84 <z_pend_curr>

	if (data != NULL) {
    6df4:	b11c      	cbz	r4, 6dfe <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    6df6:	4b03      	ldr	r3, [pc, #12]	; (6e04 <z_sched_wait+0x20>)
    6df8:	689b      	ldr	r3, [r3, #8]
    6dfa:	695b      	ldr	r3, [r3, #20]
    6dfc:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    6dfe:	b002      	add	sp, #8
    6e00:	bdd0      	pop	{r4, r6, r7, pc}
    6e02:	bf00      	nop
    6e04:	20000af0 	.word	0x20000af0

00006e08 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    6e08:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    6e0a:	4806      	ldr	r0, [pc, #24]	; (6e24 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    6e0c:	4a06      	ldr	r2, [pc, #24]	; (6e28 <z_data_copy+0x20>)
    6e0e:	4907      	ldr	r1, [pc, #28]	; (6e2c <z_data_copy+0x24>)
    6e10:	1a12      	subs	r2, r2, r0
    6e12:	f001 fa50 	bl	82b6 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    6e16:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    6e1a:	4a05      	ldr	r2, [pc, #20]	; (6e30 <z_data_copy+0x28>)
    6e1c:	4905      	ldr	r1, [pc, #20]	; (6e34 <z_data_copy+0x2c>)
    6e1e:	4806      	ldr	r0, [pc, #24]	; (6e38 <z_data_copy+0x30>)
    6e20:	f001 ba49 	b.w	82b6 <z_early_memcpy>
    6e24:	20000000 	.word	0x20000000
    6e28:	20000164 	.word	0x20000164
    6e2c:	0000a9f0 	.word	0x0000a9f0
    6e30:	00000000 	.word	0x00000000
    6e34:	0000a9f0 	.word	0x0000a9f0
    6e38:	20000000 	.word	0x20000000

00006e3c <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    6e3c:	4b03      	ldr	r3, [pc, #12]	; (6e4c <elapsed+0x10>)
    6e3e:	681b      	ldr	r3, [r3, #0]
    6e40:	b90b      	cbnz	r3, 6e46 <elapsed+0xa>
    6e42:	f7fd ba77 	b.w	4334 <sys_clock_elapsed>
}
    6e46:	2000      	movs	r0, #0
    6e48:	4770      	bx	lr
    6e4a:	bf00      	nop
    6e4c:	20000b2c 	.word	0x20000b2c

00006e50 <next_timeout>:
	return list->head == list;
    6e50:	4b10      	ldr	r3, [pc, #64]	; (6e94 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    6e52:	b510      	push	{r4, lr}
    6e54:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6e56:	429c      	cmp	r4, r3
    6e58:	bf08      	it	eq
    6e5a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    6e5c:	f7ff ffee 	bl	6e3c <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    6e60:	b1a4      	cbz	r4, 6e8c <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    6e62:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    6e66:	1a1b      	subs	r3, r3, r0
    6e68:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    6e6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    6e70:	f170 0200 	sbcs.w	r2, r0, #0
    6e74:	da0a      	bge.n	6e8c <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    6e76:	2800      	cmp	r0, #0
    6e78:	bfac      	ite	ge
    6e7a:	4618      	movge	r0, r3
    6e7c:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    6e7e:	4b06      	ldr	r3, [pc, #24]	; (6e98 <next_timeout+0x48>)
    6e80:	691b      	ldr	r3, [r3, #16]
    6e82:	b113      	cbz	r3, 6e8a <next_timeout+0x3a>
    6e84:	4298      	cmp	r0, r3
    6e86:	bfa8      	it	ge
    6e88:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    6e8a:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    6e8c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    6e90:	e7f5      	b.n	6e7e <next_timeout+0x2e>
    6e92:	bf00      	nop
    6e94:	200000e8 	.word	0x200000e8
    6e98:	20000af0 	.word	0x20000af0

00006e9c <remove_timeout>:
{
    6e9c:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    6e9e:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6ea0:	b168      	cbz	r0, 6ebe <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    6ea2:	4a0a      	ldr	r2, [pc, #40]	; (6ecc <remove_timeout+0x30>)
    6ea4:	6852      	ldr	r2, [r2, #4]
    6ea6:	4290      	cmp	r0, r2
    6ea8:	d009      	beq.n	6ebe <remove_timeout+0x22>
	if (next(t) != NULL) {
    6eaa:	b143      	cbz	r3, 6ebe <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    6eac:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    6eb0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    6eb4:	1912      	adds	r2, r2, r4
    6eb6:	eb41 0105 	adc.w	r1, r1, r5
    6eba:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    6ebe:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    6ec0:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    6ec2:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    6ec4:	2300      	movs	r3, #0
	node->prev = NULL;
    6ec6:	e9c0 3300 	strd	r3, r3, [r0]
}
    6eca:	bd30      	pop	{r4, r5, pc}
    6ecc:	200000e8 	.word	0x200000e8

00006ed0 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6ed0:	f1b3 3fff 	cmp.w	r3, #4294967295
    6ed4:	bf08      	it	eq
    6ed6:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    6eda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6edc:	4604      	mov	r4, r0
    6ede:	461f      	mov	r7, r3
    6ee0:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6ee2:	d067      	beq.n	6fb4 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    6ee4:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    6ee6:	f04f 0320 	mov.w	r3, #32
    6eea:	f3ef 8611 	mrs	r6, BASEPRI
    6eee:	f383 8812 	msr	BASEPRI_MAX, r3
    6ef2:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    6ef6:	f06f 0201 	mvn.w	r2, #1
    6efa:	1b53      	subs	r3, r2, r5
    6efc:	f04f 3cff 	mov.w	ip, #4294967295
    6f00:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    6f04:	2b00      	cmp	r3, #0
    6f06:	db1b      	blt.n	6f40 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    6f08:	4b2b      	ldr	r3, [pc, #172]	; (6fb8 <z_add_timeout+0xe8>)
    6f0a:	e9d3 1300 	ldrd	r1, r3, [r3]
    6f0e:	1a52      	subs	r2, r2, r1
    6f10:	eb6c 0303 	sbc.w	r3, ip, r3
    6f14:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    6f16:	eb63 0307 	sbc.w	r3, r3, r7
    6f1a:	2d01      	cmp	r5, #1
    6f1c:	f173 0200 	sbcs.w	r2, r3, #0
    6f20:	bfbc      	itt	lt
    6f22:	2501      	movlt	r5, #1
    6f24:	2300      	movlt	r3, #0
    6f26:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    6f2a:	4824      	ldr	r0, [pc, #144]	; (6fbc <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    6f2c:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6f30:	4283      	cmp	r3, r0
    6f32:	d118      	bne.n	6f66 <z_add_timeout+0x96>
	node->prev = tail;
    6f34:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    6f38:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    6f3c:	6044      	str	r4, [r0, #4]
}
    6f3e:	e026      	b.n	6f8e <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    6f40:	f7ff ff7c 	bl	6e3c <elapsed>
    6f44:	3501      	adds	r5, #1
    6f46:	f147 0700 	adc.w	r7, r7, #0
    6f4a:	182d      	adds	r5, r5, r0
    6f4c:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    6f50:	e9c4 5704 	strd	r5, r7, [r4, #16]
    6f54:	e7e9      	b.n	6f2a <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    6f56:	1a52      	subs	r2, r2, r1
    6f58:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    6f5c:	459c      	cmp	ip, r3
    6f5e:	e9c4 2504 	strd	r2, r5, [r4, #16]
    6f62:	d0e7      	beq.n	6f34 <z_add_timeout+0x64>
    6f64:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    6f66:	2b00      	cmp	r3, #0
    6f68:	d0e4      	beq.n	6f34 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    6f6a:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    6f6e:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    6f72:	428a      	cmp	r2, r1
    6f74:	eb75 0e07 	sbcs.w	lr, r5, r7
    6f78:	daed      	bge.n	6f56 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    6f7a:	1a8a      	subs	r2, r1, r2
    6f7c:	eb67 0505 	sbc.w	r5, r7, r5
    6f80:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    6f84:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6f86:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6f8a:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6f8c:	605c      	str	r4, [r3, #4]
	return list->head == list;
    6f8e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6f90:	4283      	cmp	r3, r0
    6f92:	d00b      	beq.n	6fac <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    6f94:	429c      	cmp	r4, r3
    6f96:	d109      	bne.n	6fac <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    6f98:	f7ff ff5a 	bl	6e50 <next_timeout>

			if (next_time == 0 ||
    6f9c:	b118      	cbz	r0, 6fa6 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    6f9e:	4b08      	ldr	r3, [pc, #32]	; (6fc0 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    6fa0:	691b      	ldr	r3, [r3, #16]
    6fa2:	4283      	cmp	r3, r0
    6fa4:	d002      	beq.n	6fac <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    6fa6:	2100      	movs	r1, #0
    6fa8:	f7fd f992 	bl	42d0 <sys_clock_set_timeout>
	__asm__ volatile(
    6fac:	f386 8811 	msr	BASEPRI, r6
    6fb0:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    6fb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6fb6:	bf00      	nop
    6fb8:	200007b0 	.word	0x200007b0
    6fbc:	200000e8 	.word	0x200000e8
    6fc0:	20000af0 	.word	0x20000af0

00006fc4 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    6fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6fc8:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    6fca:	f7ff fc87 	bl	68dc <z_time_slice>
	__asm__ volatile(
    6fce:	f04f 0320 	mov.w	r3, #32
    6fd2:	f3ef 8411 	mrs	r4, BASEPRI
    6fd6:	f383 8812 	msr	BASEPRI_MAX, r3
    6fda:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    6fde:	4e24      	ldr	r6, [pc, #144]	; (7070 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x70>)
	return list->head == list;
    6fe0:	f8df 8090 	ldr.w	r8, [pc, #144]	; 7074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
    6fe4:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    6fe6:	4d24      	ldr	r5, [pc, #144]	; (7078 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x78>)
    6fe8:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    6fec:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6fee:	4540      	cmp	r0, r8
		curr_tick += dt;
    6ff0:	e9d5 1e00 	ldrd	r1, lr, [r5]
    6ff4:	ea4f 77e2 	mov.w	r7, r2, asr #31
    6ff8:	d00b      	beq.n	7012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    6ffa:	b150      	cbz	r0, 7012 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x12>
    6ffc:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    7000:	429a      	cmp	r2, r3
    7002:	eb77 090c 	sbcs.w	r9, r7, ip
    7006:	da16      	bge.n	7036 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x36>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    7008:	1a9b      	subs	r3, r3, r2
    700a:	eb6c 0c07 	sbc.w	ip, ip, r7
    700e:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    7012:	1852      	adds	r2, r2, r1
    7014:	eb4e 0707 	adc.w	r7, lr, r7
    7018:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    701c:	2500      	movs	r5, #0
    701e:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    7020:	f7ff ff16 	bl	6e50 <next_timeout>
    7024:	4629      	mov	r1, r5
    7026:	f7fd f953 	bl	42d0 <sys_clock_set_timeout>
	__asm__ volatile(
    702a:	f384 8811 	msr	BASEPRI, r4
    702e:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    7032:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    7036:	1859      	adds	r1, r3, r1
    7038:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    703c:	1ad3      	subs	r3, r2, r3
    703e:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    7040:	2200      	movs	r2, #0
    7042:	2300      	movs	r3, #0
    7044:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    7048:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    704c:	f7ff ff26 	bl	6e9c <remove_timeout>
    7050:	f384 8811 	msr	BASEPRI, r4
    7054:	f3bf 8f6f 	isb	sy
		t->fn(t);
    7058:	6883      	ldr	r3, [r0, #8]
    705a:	4798      	blx	r3
	__asm__ volatile(
    705c:	f04f 0320 	mov.w	r3, #32
    7060:	f3ef 8411 	mrs	r4, BASEPRI
    7064:	f383 8812 	msr	BASEPRI_MAX, r3
    7068:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    706c:	e7bc      	b.n	6fe8 <sys_clock_announce+0x24>
    706e:	bf00      	nop
    7070:	20000b2c 	.word	0x20000b2c
    7074:	200000e8 	.word	0x200000e8
    7078:	200007b0 	.word	0x200007b0

0000707c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    707c:	b510      	push	{r4, lr}
    707e:	f04f 0320 	mov.w	r3, #32
    7082:	f3ef 8411 	mrs	r4, BASEPRI
    7086:	f383 8812 	msr	BASEPRI_MAX, r3
    708a:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    708e:	f7fd f951 	bl	4334 <sys_clock_elapsed>
    7092:	4a05      	ldr	r2, [pc, #20]	; (70a8 <sys_clock_tick_get+0x2c>)
    7094:	e9d2 3100 	ldrd	r3, r1, [r2]
    7098:	18c0      	adds	r0, r0, r3
    709a:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    709e:	f384 8811 	msr	BASEPRI, r4
    70a2:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    70a6:	bd10      	pop	{r4, pc}
    70a8:	200007b0 	.word	0x200007b0

000070ac <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    70ac:	b570      	push	{r4, r5, r6, lr}
    70ae:	4604      	mov	r4, r0
	__asm__ volatile(
    70b0:	f04f 0320 	mov.w	r3, #32
    70b4:	f3ef 8511 	mrs	r5, BASEPRI
    70b8:	f383 8812 	msr	BASEPRI_MAX, r3
    70bc:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    70c0:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    70c4:	3301      	adds	r3, #1
    70c6:	f142 0200 	adc.w	r2, r2, #0
    70ca:	2b02      	cmp	r3, #2
    70cc:	f172 0300 	sbcs.w	r3, r2, #0
    70d0:	d304      	bcc.n	70dc <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    70d2:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    70d6:	4917      	ldr	r1, [pc, #92]	; (7134 <z_timer_expiration_handler+0x88>)
    70d8:	f7ff fefa 	bl	6ed0 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    70dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    70de:	3301      	adds	r3, #1
    70e0:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    70e2:	6a23      	ldr	r3, [r4, #32]
    70e4:	b173      	cbz	r3, 7104 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
    70e6:	f385 8811 	msr	BASEPRI, r5
    70ea:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    70ee:	6a23      	ldr	r3, [r4, #32]
    70f0:	4620      	mov	r0, r4
    70f2:	4798      	blx	r3
	__asm__ volatile(
    70f4:	f04f 0320 	mov.w	r3, #32
    70f8:	f3ef 8511 	mrs	r5, BASEPRI
    70fc:	f383 8812 	msr	BASEPRI_MAX, r3
    7100:	f3bf 8f6f 	isb	sy
	return list->head == list;
    7104:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7108:	42a6      	cmp	r6, r4
    710a:	d000      	beq.n	710e <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    710c:	b926      	cbnz	r6, 7118 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
    710e:	f385 8811 	msr	BASEPRI, r5
    7112:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    7116:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    7118:	4630      	mov	r0, r6
    711a:	f001 f977 	bl	840c <z_unpend_thread_no_timeout>
    711e:	2300      	movs	r3, #0
    7120:	67b3      	str	r3, [r6, #120]	; 0x78
    7122:	f385 8811 	msr	BASEPRI, r5
    7126:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    712a:	4630      	mov	r0, r6
}
    712c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    7130:	f001 b998 	b.w	8464 <z_ready_thread>
    7134:	000070ad 	.word	0x000070ad

00007138 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    7138:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    713c:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    713e:	f1b3 3fff 	cmp.w	r3, #4294967295
    7142:	bf08      	it	eq
    7144:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
    7148:	4606      	mov	r6, r0
    714a:	461c      	mov	r4, r3
    714c:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    7150:	4689      	mov	r9, r1
    7152:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    7154:	d03e      	beq.n	71d4 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    7156:	f1b0 3fff 	cmp.w	r0, #4294967295
    715a:	bf08      	it	eq
    715c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    7160:	4615      	mov	r5, r2
    7162:	4607      	mov	r7, r0
    7164:	d014      	beq.n	7190 <z_impl_k_timer_start+0x58>
    7166:	ea50 0302 	orrs.w	r3, r0, r2
    716a:	d011      	beq.n	7190 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    716c:	f06f 0301 	mvn.w	r3, #1
    7170:	1a9b      	subs	r3, r3, r2
    7172:	f04f 33ff 	mov.w	r3, #4294967295
    7176:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    717a:	2b00      	cmp	r3, #0
    717c:	da08      	bge.n	7190 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    717e:	2a02      	cmp	r2, #2
    7180:	f170 0300 	sbcs.w	r3, r0, #0
    7184:	bfbc      	itt	lt
    7186:	2502      	movlt	r5, #2
    7188:	2700      	movlt	r7, #0
    718a:	3d01      	subs	r5, #1
    718c:	f147 37ff 	adc.w	r7, r7, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    7190:	f06f 0301 	mvn.w	r3, #1
    7194:	1a5b      	subs	r3, r3, r1
    7196:	f04f 33ff 	mov.w	r3, #4294967295
    719a:	eb63 0304 	sbc.w	r3, r3, r4
    719e:	2b00      	cmp	r3, #0
    71a0:	da09      	bge.n	71b6 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    71a2:	2901      	cmp	r1, #1
    71a4:	f174 0300 	sbcs.w	r3, r4, #0
    71a8:	bfbc      	itt	lt
    71aa:	2101      	movlt	r1, #1
    71ac:	2400      	movlt	r4, #0
    71ae:	f111 39ff 	adds.w	r9, r1, #4294967295
    71b2:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    71b6:	4630      	mov	r0, r6
    71b8:	f001 f9fa 	bl	85b0 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    71bc:	2300      	movs	r3, #0
    71be:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
    71c0:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    71c4:	464a      	mov	r2, r9
    71c6:	4643      	mov	r3, r8
    71c8:	4630      	mov	r0, r6
    71ca:	4903      	ldr	r1, [pc, #12]	; (71d8 <z_impl_k_timer_start+0xa0>)
		     duration);
}
    71cc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    71d0:	f7ff be7e 	b.w	6ed0 <z_add_timeout>
}
    71d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    71d8:	000070ad 	.word	0x000070ad

000071dc <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    71dc:	4a02      	ldr	r2, [pc, #8]	; (71e8 <boot_banner+0xc>)
    71de:	4903      	ldr	r1, [pc, #12]	; (71ec <boot_banner+0x10>)
    71e0:	4803      	ldr	r0, [pc, #12]	; (71f0 <boot_banner+0x14>)
    71e2:	f000 b8b0 	b.w	7346 <printk>
    71e6:	bf00      	nop
    71e8:	00008db0 	.word	0x00008db0
    71ec:	0000a9af 	.word	0x0000a9af
    71f0:	0000a9be 	.word	0x0000a9be

000071f4 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    71f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    71f6:	4b09      	ldr	r3, [pc, #36]	; (721c <k_sys_work_q_init+0x28>)
    71f8:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    71fa:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    71fc:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    71fe:	9300      	str	r3, [sp, #0]
    7200:	4907      	ldr	r1, [pc, #28]	; (7220 <k_sys_work_q_init+0x2c>)
    7202:	4808      	ldr	r0, [pc, #32]	; (7224 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    7204:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    7208:	f04f 33ff 	mov.w	r3, #4294967295
    720c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    7210:	f7ff fa36 	bl	6680 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    7214:	4620      	mov	r0, r4
    7216:	b004      	add	sp, #16
    7218:	bd10      	pop	{r4, pc}
    721a:	bf00      	nop
    721c:	0000a9e5 	.word	0x0000a9e5
    7220:	20001fe0 	.word	0x20001fe0
    7224:	200007b8 	.word	0x200007b8

00007228 <gpio_pin_get_dt>:
{
    7228:	b537      	push	{r0, r1, r2, r4, r5, lr}
    722a:	4603      	mov	r3, r0
	return gpio_pin_get(spec->port, spec->pin);
    722c:	6800      	ldr	r0, [r0, #0]
    722e:	791c      	ldrb	r4, [r3, #4]
	const struct gpio_driver_data *const data =
    7230:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
    7232:	6883      	ldr	r3, [r0, #8]
    7234:	a901      	add	r1, sp, #4
    7236:	685b      	ldr	r3, [r3, #4]
    7238:	4798      	blx	r3
	if (ret == 0) {
    723a:	b940      	cbnz	r0, 724e <gpio_pin_get_dt+0x26>
		*value ^= data->invert;
    723c:	682b      	ldr	r3, [r5, #0]
    723e:	9a01      	ldr	r2, [sp, #4]
    7240:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    7242:	2301      	movs	r3, #1
    7244:	40a3      	lsls	r3, r4
    7246:	421a      	tst	r2, r3
    7248:	bf14      	ite	ne
    724a:	2001      	movne	r0, #1
    724c:	2000      	moveq	r0, #0
}
    724e:	b003      	add	sp, #12
    7250:	bd30      	pop	{r4, r5, pc}

00007252 <button_pressed>:
}
    7252:	4770      	bx	lr

00007254 <sensor_channel_get.isra.0>:
    7254:	6883      	ldr	r3, [r0, #8]
    7256:	691b      	ldr	r3, [r3, #16]
    7258:	4718      	bx	r3

0000725a <fetch_pmw3360_data>:
	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    725a:	6883      	ldr	r3, [r0, #8]
    725c:	2139      	movs	r1, #57	; 0x39
    725e:	68db      	ldr	r3, [r3, #12]
    7260:	4718      	bx	r3

00007262 <get_dx>:
int get_dx(const struct device *dev) {
    7262:	b507      	push	{r0, r1, r2, lr}
	sensor_channel_get(dev, SENSOR_CHAN_POS_DX, &x);
    7264:	2123      	movs	r1, #35	; 0x23
    7266:	466a      	mov	r2, sp
    7268:	f7ff fff4 	bl	7254 <sensor_channel_get.isra.0>
}
    726c:	9800      	ldr	r0, [sp, #0]
    726e:	b003      	add	sp, #12
    7270:	f85d fb04 	ldr.w	pc, [sp], #4

00007274 <get_dy>:
int get_dy(const struct device *dev) {
    7274:	b507      	push	{r0, r1, r2, lr}
	sensor_channel_get(dev, SENSOR_CHAN_POS_DY, &y);
    7276:	2124      	movs	r1, #36	; 0x24
    7278:	466a      	mov	r2, sp
    727a:	f7ff ffeb 	bl	7254 <sensor_channel_get.isra.0>
}
    727e:	9800      	ldr	r0, [sp, #0]
    7280:	b003      	add	sp, #12
    7282:	f85d fb04 	ldr.w	pc, [sp], #4

00007286 <cbpprintf_external>:
{
    7286:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    728a:	4607      	mov	r7, r0
    728c:	460e      	mov	r6, r1
    728e:	4690      	mov	r8, r2
	if (buf == NULL) {
    7290:	461d      	mov	r5, r3
    7292:	b30b      	cbz	r3, 72d8 <cbpprintf_external+0x52>
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    7294:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = buf[2];
    7296:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
    7298:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = buf[3];
    729c:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    729e:	441c      	add	r4, r3
    72a0:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    72a4:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
    72a6:	f04f 0900 	mov.w	r9, #0
    72aa:	45d1      	cmp	r9, sl
    72ac:	d308      	bcc.n	72c0 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    72ae:	686a      	ldr	r2, [r5, #4]
    72b0:	f105 0308 	add.w	r3, r5, #8
    72b4:	4641      	mov	r1, r8
    72b6:	4638      	mov	r0, r7
    72b8:	46b4      	mov	ip, r6
}
    72ba:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    72be:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    72c0:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    72c4:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    72c8:	4620      	mov	r0, r4
    72ca:	f000 fc6e 	bl	7baa <strlen>
    72ce:	3001      	adds	r0, #1
    72d0:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    72d2:	f109 0901 	add.w	r9, r9, #1
    72d6:	e7e8      	b.n	72aa <cbpprintf_external+0x24>
}
    72d8:	f06f 0015 	mvn.w	r0, #21
    72dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000072e0 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    72e0:	4603      	mov	r3, r0
    72e2:	b158      	cbz	r0, 72fc <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    72e4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    72e6:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    72ea:	2a01      	cmp	r2, #1
    72ec:	d003      	beq.n	72f6 <sys_notify_validate+0x16>
    72ee:	2a03      	cmp	r2, #3
    72f0:	d104      	bne.n	72fc <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    72f2:	6802      	ldr	r2, [r0, #0]
    72f4:	b112      	cbz	r2, 72fc <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    72f6:	2000      	movs	r0, #0
    72f8:	6098      	str	r0, [r3, #8]
    72fa:	4770      	bx	lr
		return -EINVAL;
    72fc:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    7300:	4770      	bx	lr

00007302 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    7302:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    7304:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    7306:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    730a:	2a03      	cmp	r2, #3
    730c:	f04f 0200 	mov.w	r2, #0
{
    7310:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    7312:	bf0c      	ite	eq
    7314:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    7316:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    7318:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    731a:	4770      	bx	lr

0000731c <arch_printk_char_out>:
}
    731c:	2000      	movs	r0, #0
    731e:	4770      	bx	lr

00007320 <str_out>:
{
    7320:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    7322:	688a      	ldr	r2, [r1, #8]
    7324:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    7326:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    7328:	b114      	cbz	r4, 7330 <str_out+0x10>
    732a:	684b      	ldr	r3, [r1, #4]
    732c:	4293      	cmp	r3, r2
    732e:	dc01      	bgt.n	7334 <str_out+0x14>
		ctx->count++;
    7330:	608d      	str	r5, [r1, #8]
}
    7332:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    7334:	3b01      	subs	r3, #1
    7336:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    7338:	bf08      	it	eq
    733a:	2200      	moveq	r2, #0
    733c:	608d      	str	r5, [r1, #8]
    733e:	bf0c      	ite	eq
    7340:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    7342:	54a0      	strbne	r0, [r4, r2]
    7344:	e7f5      	b.n	7332 <str_out+0x12>

00007346 <printk>:
{
    7346:	b40f      	push	{r0, r1, r2, r3}
    7348:	b507      	push	{r0, r1, r2, lr}
    734a:	a904      	add	r1, sp, #16
    734c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    7350:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    7352:	f000 fb55 	bl	7a00 <z_log_vprintk>
}
    7356:	b003      	add	sp, #12
    7358:	f85d eb04 	ldr.w	lr, [sp], #4
    735c:	b004      	add	sp, #16
    735e:	4770      	bx	lr

00007360 <snprintk>:
{
    7360:	b40c      	push	{r2, r3}
    7362:	b507      	push	{r0, r1, r2, lr}
    7364:	ab04      	add	r3, sp, #16
    7366:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    736a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    736c:	f7f9 fdb0 	bl	ed0 <vsnprintk>
}
    7370:	b003      	add	sp, #12
    7372:	f85d eb04 	ldr.w	lr, [sp], #4
    7376:	b002      	add	sp, #8
    7378:	4770      	bx	lr

0000737a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    737a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    737c:	f013 0307 	ands.w	r3, r3, #7
    7380:	d105      	bne.n	738e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    7382:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    7384:	2b00      	cmp	r3, #0
    7386:	bf0c      	ite	eq
    7388:	2000      	moveq	r0, #0
    738a:	2003      	movne	r0, #3
    738c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    738e:	2b02      	cmp	r3, #2
    7390:	d105      	bne.n	739e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    7392:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    7394:	2b00      	cmp	r3, #0
    7396:	bf14      	ite	ne
    7398:	2000      	movne	r0, #0
    739a:	2004      	moveq	r0, #4
    739c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    739e:	2b01      	cmp	r3, #1
    73a0:	d105      	bne.n	73ae <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    73a2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    73a4:	2b00      	cmp	r3, #0
    73a6:	bf0c      	ite	eq
    73a8:	2000      	moveq	r0, #0
    73aa:	2005      	movne	r0, #5
    73ac:	4770      	bx	lr
	int evt = EVT_NOP;
    73ae:	2000      	movs	r0, #0
}
    73b0:	4770      	bx	lr

000073b2 <notify_one>:
{
    73b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    73b6:	460d      	mov	r5, r1
    73b8:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    73ba:	4619      	mov	r1, r3
    73bc:	1d28      	adds	r0, r5, #4
{
    73be:	4690      	mov	r8, r2
    73c0:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    73c2:	f7ff ff9e 	bl	7302 <sys_notify_finalize>
	if (cb) {
    73c6:	4604      	mov	r4, r0
    73c8:	b138      	cbz	r0, 73da <notify_one+0x28>
		cb(mgr, cli, state, res);
    73ca:	4633      	mov	r3, r6
    73cc:	4642      	mov	r2, r8
    73ce:	4629      	mov	r1, r5
    73d0:	4638      	mov	r0, r7
    73d2:	46a4      	mov	ip, r4
}
    73d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    73d8:	4760      	bx	ip
}
    73da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000073de <transition_complete>:
{
    73de:	b410      	push	{r4}
	__asm__ volatile(
    73e0:	f04f 0420 	mov.w	r4, #32
    73e4:	f3ef 8211 	mrs	r2, BASEPRI
    73e8:	f384 8812 	msr	BASEPRI_MAX, r4
    73ec:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    73f0:	6141      	str	r1, [r0, #20]
}
    73f2:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    73f4:	2101      	movs	r1, #1
    73f6:	f7f9 bd7f 	b.w	ef8 <process_event>

000073fa <validate_args>:
{
    73fa:	b510      	push	{r4, lr}
    73fc:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    73fe:	b140      	cbz	r0, 7412 <validate_args+0x18>
    7400:	b139      	cbz	r1, 7412 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    7402:	1d08      	adds	r0, r1, #4
    7404:	f7ff ff6c 	bl	72e0 <sys_notify_validate>
	if ((rv == 0)
    7408:	b928      	cbnz	r0, 7416 <validate_args+0x1c>
	    && ((cli->notify.flags
    740a:	68a3      	ldr	r3, [r4, #8]
    740c:	f033 0303 	bics.w	r3, r3, #3
    7410:	d001      	beq.n	7416 <validate_args+0x1c>
		rv = -EINVAL;
    7412:	f06f 0015 	mvn.w	r0, #21
}
    7416:	bd10      	pop	{r4, pc}

00007418 <onoff_manager_init>:
{
    7418:	b538      	push	{r3, r4, r5, lr}
    741a:	460c      	mov	r4, r1
	if ((mgr == NULL)
    741c:	4605      	mov	r5, r0
    741e:	b158      	cbz	r0, 7438 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    7420:	b151      	cbz	r1, 7438 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    7422:	680b      	ldr	r3, [r1, #0]
    7424:	b143      	cbz	r3, 7438 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    7426:	684b      	ldr	r3, [r1, #4]
    7428:	b133      	cbz	r3, 7438 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    742a:	221c      	movs	r2, #28
    742c:	2100      	movs	r1, #0
    742e:	f000 fbe3 	bl	7bf8 <memset>
    7432:	612c      	str	r4, [r5, #16]
	return 0;
    7434:	2000      	movs	r0, #0
}
    7436:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    7438:	f06f 0015 	mvn.w	r0, #21
    743c:	e7fb      	b.n	7436 <onoff_manager_init+0x1e>

0000743e <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    743e:	b570      	push	{r4, r5, r6, lr}
    7440:	4604      	mov	r4, r0
    7442:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    7444:	f7ff ffd9 	bl	73fa <validate_args>

	if (rv < 0) {
    7448:	1e05      	subs	r5, r0, #0
    744a:	db31      	blt.n	74b0 <onoff_request+0x72>
    744c:	f04f 0320 	mov.w	r3, #32
    7450:	f3ef 8111 	mrs	r1, BASEPRI
    7454:	f383 8812 	msr	BASEPRI_MAX, r3
    7458:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    745c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    745e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    7460:	f64f 75ff 	movw	r5, #65535	; 0xffff
    7464:	42ab      	cmp	r3, r5
    7466:	f000 0207 	and.w	r2, r0, #7
    746a:	d02e      	beq.n	74ca <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    746c:	2a02      	cmp	r2, #2
    746e:	d10e      	bne.n	748e <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    7470:	3301      	adds	r3, #1
    7472:	8363      	strh	r3, [r4, #26]
	rv = state;
    7474:	4615      	mov	r5, r2
		notify = true;
    7476:	2301      	movs	r3, #1
	__asm__ volatile(
    7478:	f381 8811 	msr	BASEPRI, r1
    747c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    7480:	b1b3      	cbz	r3, 74b0 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    7482:	2300      	movs	r3, #0
    7484:	4631      	mov	r1, r6
    7486:	4620      	mov	r0, r4
    7488:	f7ff ff93 	bl	73b2 <notify_one>
    748c:	e010      	b.n	74b0 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    748e:	0783      	lsls	r3, r0, #30
    7490:	d001      	beq.n	7496 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    7492:	2a06      	cmp	r2, #6
    7494:	d10e      	bne.n	74b4 <onoff_request+0x76>
	parent->next = child;
    7496:	2300      	movs	r3, #0
    7498:	6033      	str	r3, [r6, #0]
	return list->tail;
    749a:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    749c:	b993      	cbnz	r3, 74c4 <onoff_request+0x86>
	list->head = node;
    749e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    74a2:	4615      	mov	r5, r2
    74a4:	b962      	cbnz	r2, 74c0 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    74a6:	460a      	mov	r2, r1
    74a8:	4620      	mov	r0, r4
    74aa:	2102      	movs	r1, #2
    74ac:	f7f9 fd24 	bl	ef8 <process_event>
		}
	}

	return rv;
}
    74b0:	4628      	mov	r0, r5
    74b2:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    74b4:	2a05      	cmp	r2, #5
    74b6:	bf0c      	ite	eq
    74b8:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    74bc:	f06f 0504 	mvnne.w	r5, #4
    74c0:	2300      	movs	r3, #0
    74c2:	e7d9      	b.n	7478 <onoff_request+0x3a>
	parent->next = child;
    74c4:	601e      	str	r6, [r3, #0]
	list->tail = node;
    74c6:	6066      	str	r6, [r4, #4]
}
    74c8:	e7eb      	b.n	74a2 <onoff_request+0x64>
		rv = -EAGAIN;
    74ca:	f06f 050a 	mvn.w	r5, #10
    74ce:	e7f7      	b.n	74c0 <onoff_request+0x82>

000074d0 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    74d0:	b510      	push	{r4, lr}
	__asm__ volatile(
    74d2:	f04f 0320 	mov.w	r3, #32
    74d6:	f3ef 8211 	mrs	r2, BASEPRI
    74da:	f383 8812 	msr	BASEPRI_MAX, r3
    74de:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    74e2:	8b04      	ldrh	r4, [r0, #24]
    74e4:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    74e8:	2c02      	cmp	r4, #2
    74ea:	d00a      	beq.n	7502 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    74ec:	2c01      	cmp	r4, #1
    74ee:	bf0c      	ite	eq
    74f0:	f06f 0004 	mvneq.w	r0, #4
    74f4:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    74f8:	f382 8811 	msr	BASEPRI, r2
    74fc:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    7500:	e008      	b.n	7514 <onoff_release+0x44>
	mgr->refs -= 1U;
    7502:	8b43      	ldrh	r3, [r0, #26]
    7504:	3b01      	subs	r3, #1
    7506:	b29b      	uxth	r3, r3
    7508:	8343      	strh	r3, [r0, #26]
	if (stop) {
    750a:	b923      	cbnz	r3, 7516 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    750c:	4621      	mov	r1, r4
    750e:	f7f9 fcf3 	bl	ef8 <process_event>
	int rv = state;
    7512:	4620      	mov	r0, r4
}
    7514:	bd10      	pop	{r4, pc}
	int rv = state;
    7516:	4620      	mov	r0, r4
    7518:	e7ee      	b.n	74f8 <onoff_release+0x28>

0000751a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    751a:	4604      	mov	r4, r0
    751c:	b508      	push	{r3, lr}
    751e:	4608      	mov	r0, r1
    7520:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    7522:	461a      	mov	r2, r3
    7524:	47a0      	blx	r4
	return z_impl_z_current_get();
    7526:	f7ff fc05 	bl	6d34 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    752a:	f7fb fca3 	bl	2e74 <z_impl_k_thread_abort>

0000752e <encode_uint>:
{
    752e:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7532:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    7534:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    7536:	2b6f      	cmp	r3, #111	; 0x6f
{
    7538:	4680      	mov	r8, r0
    753a:	460f      	mov	r7, r1
    753c:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    753e:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    7542:	d029      	beq.n	7598 <encode_uint+0x6a>
    7544:	d824      	bhi.n	7590 <encode_uint+0x62>
		return 16;
    7546:	2b58      	cmp	r3, #88	; 0x58
    7548:	bf14      	ite	ne
    754a:	260a      	movne	r6, #10
    754c:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    754e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    7552:	4632      	mov	r2, r6
    7554:	2300      	movs	r3, #0
    7556:	4640      	mov	r0, r8
    7558:	4639      	mov	r1, r7
    755a:	f7f8 fdc1 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    755e:	2a09      	cmp	r2, #9
    7560:	b2d4      	uxtb	r4, r2
    7562:	d81e      	bhi.n	75a2 <encode_uint+0x74>
    7564:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    7566:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    7568:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    756a:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    756e:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    7572:	d301      	bcc.n	7578 <encode_uint+0x4a>
    7574:	45d1      	cmp	r9, sl
    7576:	d811      	bhi.n	759c <encode_uint+0x6e>
	if (conv->flag_hash) {
    7578:	782b      	ldrb	r3, [r5, #0]
    757a:	069b      	lsls	r3, r3, #26
    757c:	d505      	bpl.n	758a <encode_uint+0x5c>
		if (radix == 8) {
    757e:	2e08      	cmp	r6, #8
    7580:	d115      	bne.n	75ae <encode_uint+0x80>
			conv->altform_0 = true;
    7582:	78ab      	ldrb	r3, [r5, #2]
    7584:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    7588:	70ab      	strb	r3, [r5, #2]
}
    758a:	4648      	mov	r0, r9
    758c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    7590:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    7594:	2b70      	cmp	r3, #112	; 0x70
    7596:	e7d7      	b.n	7548 <encode_uint+0x1a>
	switch (specifier) {
    7598:	2608      	movs	r6, #8
    759a:	e7d8      	b.n	754e <encode_uint+0x20>
		value /= radix;
    759c:	4680      	mov	r8, r0
    759e:	460f      	mov	r7, r1
    75a0:	e7d7      	b.n	7552 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    75a2:	f1bb 0f19 	cmp.w	fp, #25
    75a6:	bf94      	ite	ls
    75a8:	3437      	addls	r4, #55	; 0x37
    75aa:	3457      	addhi	r4, #87	; 0x57
    75ac:	e7db      	b.n	7566 <encode_uint+0x38>
		} else if (radix == 16) {
    75ae:	2e10      	cmp	r6, #16
    75b0:	d1eb      	bne.n	758a <encode_uint+0x5c>
			conv->altform_0c = true;
    75b2:	78ab      	ldrb	r3, [r5, #2]
    75b4:	f043 0310 	orr.w	r3, r3, #16
    75b8:	e7e6      	b.n	7588 <encode_uint+0x5a>

000075ba <outs>:
{
    75ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75be:	4607      	mov	r7, r0
    75c0:	4688      	mov	r8, r1
    75c2:	4615      	mov	r5, r2
    75c4:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    75c6:	4614      	mov	r4, r2
    75c8:	42b4      	cmp	r4, r6
    75ca:	eba4 0005 	sub.w	r0, r4, r5
    75ce:	d302      	bcc.n	75d6 <outs+0x1c>
    75d0:	b93e      	cbnz	r6, 75e2 <outs+0x28>
    75d2:	7823      	ldrb	r3, [r4, #0]
    75d4:	b12b      	cbz	r3, 75e2 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    75d6:	f814 0b01 	ldrb.w	r0, [r4], #1
    75da:	4641      	mov	r1, r8
    75dc:	47b8      	blx	r7
		if (rc < 0) {
    75de:	2800      	cmp	r0, #0
    75e0:	daf2      	bge.n	75c8 <outs+0xe>
}
    75e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000075e6 <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    75e6:	4602      	mov	r2, r0
    75e8:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    75ea:	68c0      	ldr	r0, [r0, #12]
    75ec:	6814      	ldr	r4, [r2, #0]
    75ee:	42a0      	cmp	r0, r4
    75f0:	d904      	bls.n	75fc <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    75f2:	3801      	subs	r0, #1
    75f4:	1b00      	subs	r0, r0, r4
    75f6:	6008      	str	r0, [r1, #0]

		return false;
    75f8:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
    75fa:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    75fc:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
    75fe:	b918      	cbnz	r0, 7608 <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    7600:	3b01      	subs	r3, #1
    7602:	1b1b      	subs	r3, r3, r4
    7604:	600b      	str	r3, [r1, #0]
		return false;
    7606:	e7f8      	b.n	75fa <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
    7608:	1b1b      	subs	r3, r3, r4
    760a:	600b      	str	r3, [r1, #0]
	return true;
    760c:	2001      	movs	r0, #1
    760e:	e7f4      	b.n	75fa <free_space+0x14>

00007610 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    7610:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    7612:	a901      	add	r1, sp, #4
{
    7614:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    7616:	f7ff ffe6 	bl	75e6 <free_space>
    761a:	b120      	cbz	r0, 7626 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    761c:	9b01      	ldr	r3, [sp, #4]
    761e:	68e2      	ldr	r2, [r4, #12]
    7620:	3b01      	subs	r3, #1
    7622:	4413      	add	r3, r2
    7624:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    7626:	9801      	ldr	r0, [sp, #4]
    7628:	6a23      	ldr	r3, [r4, #32]
    762a:	43c0      	mvns	r0, r0
}
    762c:	4418      	add	r0, r3
    762e:	b002      	add	sp, #8
    7630:	bd10      	pop	{r4, pc}

00007632 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
    7632:	b510      	push	{r4, lr}
    7634:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    7636:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    7638:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    763a:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    763c:	07d2      	lsls	r2, r2, #31
    763e:	d502      	bpl.n	7646 <idx_inc+0x14>
		return i & (buffer->size - 1);
    7640:	3b01      	subs	r3, #1
    7642:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    7644:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    7646:	4298      	cmp	r0, r3
    7648:	bf28      	it	cs
    764a:	1ac0      	subcs	r0, r0, r3
    764c:	e7fa      	b.n	7644 <idx_inc+0x12>

0000764e <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    764e:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    7650:	69c2      	ldr	r2, [r0, #28]
{
    7652:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
    7654:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    7656:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    7658:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    765c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    7660:	462a      	mov	r2, r5
    7662:	6801      	ldr	r1, [r0, #0]
{
    7664:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    7666:	f7ff ffe4 	bl	7632 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    766a:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    766c:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    766e:	462a      	mov	r2, r5
    7670:	4620      	mov	r0, r4
    7672:	f7ff ffde 	bl	7632 <idx_inc>
    7676:	6060      	str	r0, [r4, #4]
}
    7678:	bd38      	pop	{r3, r4, r5, pc}

0000767a <max_utilization_update>:
{
    767a:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    767c:	6903      	ldr	r3, [r0, #16]
    767e:	075b      	lsls	r3, r3, #29
{
    7680:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    7682:	d506      	bpl.n	7692 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    7684:	6a45      	ldr	r5, [r0, #36]	; 0x24
    7686:	f7ff ffc3 	bl	7610 <get_usage>
    768a:	4285      	cmp	r5, r0
    768c:	d902      	bls.n	7694 <max_utilization_update+0x1a>
    768e:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7690:	6260      	str	r0, [r4, #36]	; 0x24
}
    7692:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    7694:	4620      	mov	r0, r4
    7696:	f7ff ffbb 	bl	7610 <get_usage>
    769a:	e7f9      	b.n	7690 <max_utilization_update+0x16>

0000769c <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    769c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    76a0:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    76a4:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
    76a8:	461f      	mov	r7, r3
	*user_packet = false;
    76aa:	2300      	movs	r3, #0
    76ac:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
    76ae:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    76b2:	f003 0303 	and.w	r3, r3, #3
    76b6:	2b02      	cmp	r3, #2
{
    76b8:	4604      	mov	r4, r0
    76ba:	468b      	mov	fp, r1
    76bc:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    76be:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    76c2:	d103      	bne.n	76cc <drop_item_locked+0x30>
		return item->skip.len;
    76c4:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    76c8:	08ad      	lsrs	r5, r5, #2
    76ca:	d12e      	bne.n	772a <drop_item_locked+0x8e>
    76cc:	69a3      	ldr	r3, [r4, #24]
    76ce:	4630      	mov	r0, r6
    76d0:	4798      	blx	r3
    76d2:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
    76d4:	f1b8 0f00 	cmp.w	r8, #0
    76d8:	d036      	beq.n	7748 <drop_item_locked+0xac>
		if (item->hdr.busy) {
    76da:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    76de:	079b      	lsls	r3, r3, #30
    76e0:	d52f      	bpl.n	7742 <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
    76e2:	f10b 0101 	add.w	r1, fp, #1
    76e6:	4620      	mov	r0, r4
    76e8:	f7ff ffb1 	bl	764e <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    76ec:	6861      	ldr	r1, [r4, #4]
    76ee:	462a      	mov	r2, r5
    76f0:	4620      	mov	r0, r4
    76f2:	f7ff ff9e 	bl	7632 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    76f6:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    76f8:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    76fa:	462a      	mov	r2, r5
    76fc:	4620      	mov	r0, r4
    76fe:	f7ff ff98 	bl	7632 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    7702:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    7704:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    7706:	68e1      	ldr	r1, [r4, #12]
    7708:	4620      	mov	r0, r4
    770a:	f7ff ff92 	bl	7632 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    770e:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
    7710:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
    7714:	f002 0203 	and.w	r2, r2, #3
    7718:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    771a:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    771e:	d10c      	bne.n	773a <drop_item_locked+0x9e>
		return item->skip.len;
    7720:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
    7724:	089b      	lsrs	r3, r3, #2
    7726:	d008      	beq.n	773a <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
    7728:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    772a:	68e1      	ldr	r1, [r4, #12]
    772c:	462a      	mov	r2, r5
    772e:	4620      	mov	r0, r4
    7730:	f7ff ff7f 	bl	7632 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    7734:	e9c4 0002 	strd	r0, r0, [r4, #8]
    7738:	e007      	b.n	774a <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
    773a:	69a3      	ldr	r3, [r4, #24]
    773c:	4630      	mov	r0, r6
    773e:	4798      	blx	r3
    7740:	4405      	add	r5, r0
			*user_packet = true;
    7742:	2301      	movs	r3, #1
    7744:	703b      	strb	r3, [r7, #0]
    7746:	e7f0      	b.n	772a <drop_item_locked+0x8e>
		item = NULL;
    7748:	4646      	mov	r6, r8
	}

	return item;
}
    774a:	4630      	mov	r0, r6
    774c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00007750 <mpsc_pbuf_init>:
{
    7750:	b538      	push	{r3, r4, r5, lr}
    7752:	460d      	mov	r5, r1
    7754:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    7756:	221c      	movs	r2, #28
    7758:	2100      	movs	r1, #0
    775a:	f000 fa4d 	bl	7bf8 <memset>
	buffer->get_wlen = cfg->get_wlen;
    775e:	68eb      	ldr	r3, [r5, #12]
    7760:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    7762:	68ab      	ldr	r3, [r5, #8]
	buffer->size = cfg->size;
    7764:	686a      	ldr	r2, [r5, #4]
	buffer->notify_drop = cfg->notify_drop;
    7766:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    7768:	682b      	ldr	r3, [r5, #0]
    776a:	61e3      	str	r3, [r4, #28]
	buffer->max_usage = 0;
    776c:	2300      	movs	r3, #0
    776e:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->size = cfg->size;
    7770:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
    7772:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    7774:	b122      	cbz	r2, 7780 <mpsc_pbuf_init+0x30>
    7776:	1e51      	subs	r1, r2, #1
    7778:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    777a:	bf08      	it	eq
    777c:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
    7780:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    7782:	2201      	movs	r2, #1
    7784:	f104 0028 	add.w	r0, r4, #40	; 0x28
    7788:	2100      	movs	r1, #0
}
    778a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    778e:	f000 bdb7 	b.w	8300 <z_impl_k_sem_init>

00007792 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    7792:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7796:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    7798:	6a03      	ldr	r3, [r0, #32]
    779a:	3b01      	subs	r3, #1
    779c:	428b      	cmp	r3, r1
{
    779e:	b085      	sub	sp, #20
    77a0:	4604      	mov	r4, r0
    77a2:	460f      	mov	r7, r1
    77a4:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
    77a6:	d364      	bcc.n	7872 <mpsc_pbuf_alloc+0xe0>
	union mpsc_pbuf_generic *dropped_item = NULL;
    77a8:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
    77aa:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
    77ac:	f100 0b28 	add.w	fp, r0, #40	; 0x28
	__asm__ volatile(
    77b0:	f04f 0320 	mov.w	r3, #32
    77b4:	f3ef 8611 	mrs	r6, BASEPRI
    77b8:	f383 8812 	msr	BASEPRI_MAX, r3
    77bc:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
    77c0:	a903      	add	r1, sp, #12
    77c2:	4620      	mov	r0, r4
    77c4:	f7ff ff0f 	bl	75e6 <free_space>
		if (free_wlen >= wlen) {
    77c8:	9903      	ldr	r1, [sp, #12]
    77ca:	42b9      	cmp	r1, r7
    77cc:	d321      	bcc.n	7812 <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    77ce:	6821      	ldr	r1, [r4, #0]
			item =
    77d0:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    77d2:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
    77d6:	f022 0203 	bic.w	r2, r2, #3
    77da:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    77de:	4620      	mov	r0, r4
    77e0:	463a      	mov	r2, r7
			item =
    77e2:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
    77e6:	f7ff ff24 	bl	7632 <idx_inc>
		cont = false;
    77ea:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    77ec:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
    77ee:	f386 8811 	msr	BASEPRI, r6
    77f2:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    77f6:	2b00      	cmp	r3, #0
    77f8:	d03d      	beq.n	7876 <mpsc_pbuf_alloc+0xe4>
    77fa:	2d00      	cmp	r5, #0
    77fc:	d0d8      	beq.n	77b0 <mpsc_pbuf_alloc+0x1e>
    77fe:	f89d 300b 	ldrb.w	r3, [sp, #11]
    7802:	2b00      	cmp	r3, #0
    7804:	d0d4      	beq.n	77b0 <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
    7806:	4629      	mov	r1, r5
    7808:	6963      	ldr	r3, [r4, #20]
    780a:	4620      	mov	r0, r4
    780c:	4798      	blx	r3
			dropped_item = NULL;
    780e:	2500      	movs	r5, #0
    7810:	e7ce      	b.n	77b0 <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
    7812:	b128      	cbz	r0, 7820 <mpsc_pbuf_alloc+0x8e>
    7814:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
    7816:	4620      	mov	r0, r4
    7818:	f7ff ff19 	bl	764e <add_skip_item>
			cont = true;
    781c:	9b01      	ldr	r3, [sp, #4]
    781e:	e7e6      	b.n	77ee <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    7820:	ea58 0309 	orrs.w	r3, r8, r9
    7824:	d017      	beq.n	7856 <mpsc_pbuf_alloc+0xc4>
			   !k_is_in_isr()) {
    7826:	f000 fd48 	bl	82ba <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    782a:	b9a0      	cbnz	r0, 7856 <mpsc_pbuf_alloc+0xc4>
    782c:	f386 8811 	msr	BASEPRI, r6
    7830:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    7834:	4642      	mov	r2, r8
    7836:	464b      	mov	r3, r9
    7838:	4658      	mov	r0, fp
    783a:	f7fe fe0d 	bl	6458 <z_impl_k_sem_take>
	__asm__ volatile(
    783e:	f04f 0320 	mov.w	r3, #32
    7842:	f3ef 8611 	mrs	r6, BASEPRI
    7846:	f383 8812 	msr	BASEPRI_MAX, r3
    784a:	f3bf 8f6f 	isb	sy
			if (err == 0) {
    784e:	fab0 f380 	clz	r3, r0
    7852:	095b      	lsrs	r3, r3, #5
    7854:	e7cb      	b.n	77ee <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    7856:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    7858:	9903      	ldr	r1, [sp, #12]
    785a:	f10d 030b 	add.w	r3, sp, #11
    785e:	f3c2 0240 	ubfx	r2, r2, #1, #1
    7862:	4620      	mov	r0, r4
    7864:	f7ff ff1a 	bl	769c <drop_item_locked>
			cont = dropped_item != NULL;
    7868:	1e03      	subs	r3, r0, #0
    786a:	4605      	mov	r5, r0
    786c:	bf18      	it	ne
    786e:	2301      	movne	r3, #1
    7870:	e7bd      	b.n	77ee <mpsc_pbuf_alloc+0x5c>
		return NULL;
    7872:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    7876:	4650      	mov	r0, sl
    7878:	b005      	add	sp, #20
    787a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000787e <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    787e:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    7880:	6983      	ldr	r3, [r0, #24]
{
    7882:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    7884:	4608      	mov	r0, r1
{
    7886:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    7888:	4798      	blx	r3
    788a:	4602      	mov	r2, r0
    788c:	f04f 0320 	mov.w	r3, #32
    7890:	f3ef 8611 	mrs	r6, BASEPRI
    7894:	f383 8812 	msr	BASEPRI_MAX, r3
    7898:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    789c:	782b      	ldrb	r3, [r5, #0]
    789e:	f043 0301 	orr.w	r3, r3, #1
    78a2:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    78a4:	6861      	ldr	r1, [r4, #4]
    78a6:	4620      	mov	r0, r4
    78a8:	f7ff fec3 	bl	7632 <idx_inc>
    78ac:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    78ae:	4620      	mov	r0, r4
    78b0:	f7ff fee3 	bl	767a <max_utilization_update>
	__asm__ volatile(
    78b4:	f386 8811 	msr	BASEPRI, r6
    78b8:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    78bc:	bd70      	pop	{r4, r5, r6, pc}

000078be <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    78be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78c2:	4604      	mov	r4, r0
	__asm__ volatile(
    78c4:	f04f 0320 	mov.w	r3, #32
    78c8:	f3ef 8611 	mrs	r6, BASEPRI
    78cc:	f383 8812 	msr	BASEPRI_MAX, r3
    78d0:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    78d4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
    78d8:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    78da:	bf88      	it	hi
    78dc:	6a23      	ldrhi	r3, [r4, #32]
    78de:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    78e0:	b1f3      	cbz	r3, 7920 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
    78e2:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
    78e4:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
    78e8:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
    78ec:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
    78f0:	d016      	beq.n	7920 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
    78f2:	2b02      	cmp	r3, #2
    78f4:	d103      	bne.n	78fe <mpsc_pbuf_claim+0x40>
		return item->skip.len;
    78f6:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    78fa:	08ad      	lsrs	r5, r5, #2
    78fc:	d115      	bne.n	792a <mpsc_pbuf_claim+0x6c>
    78fe:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
    7900:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
    7902:	d50f      	bpl.n	7924 <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
    7904:	f042 0202 	orr.w	r2, r2, #2
    7908:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
    790c:	4640      	mov	r0, r8
    790e:	4798      	blx	r3
    7910:	4639      	mov	r1, r7
    7912:	4602      	mov	r2, r0
    7914:	4620      	mov	r0, r4
    7916:	f7ff fe8c 	bl	7632 <idx_inc>
		cont = false;
    791a:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
    791c:	60a0      	str	r0, [r4, #8]
    791e:	e011      	b.n	7944 <mpsc_pbuf_claim+0x86>
			item = NULL;
    7920:	4698      	mov	r8, r3
    7922:	e00f      	b.n	7944 <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
    7924:	4640      	mov	r0, r8
    7926:	4798      	blx	r3
    7928:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    792a:	68a1      	ldr	r1, [r4, #8]
    792c:	462a      	mov	r2, r5
    792e:	4620      	mov	r0, r4
    7930:	f7ff fe7f 	bl	7632 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
    7934:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    7936:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    7938:	462a      	mov	r2, r5
    793a:	4620      	mov	r0, r4
    793c:	f7ff fe79 	bl	7632 <idx_inc>
				cont = true;
    7940:	2301      	movs	r3, #1
				buffer->rd_idx =
    7942:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    7944:	f386 8811 	msr	BASEPRI, r6
    7948:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    794c:	2b00      	cmp	r3, #0
    794e:	d1b9      	bne.n	78c4 <mpsc_pbuf_claim+0x6>

	return item;
}
    7950:	4640      	mov	r0, r8
    7952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00007956 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    7956:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    7958:	6983      	ldr	r3, [r0, #24]
{
    795a:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    795c:	4608      	mov	r0, r1
{
    795e:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    7960:	4798      	blx	r3
    7962:	4602      	mov	r2, r0
	__asm__ volatile(
    7964:	f04f 0320 	mov.w	r3, #32
    7968:	f3ef 8611 	mrs	r6, BASEPRI
    796c:	f383 8812 	msr	BASEPRI_MAX, r3
    7970:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    7974:	782b      	ldrb	r3, [r5, #0]
    7976:	f36f 0300 	bfc	r3, #0, #1
    797a:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    797c:	6923      	ldr	r3, [r4, #16]
    797e:	079b      	lsls	r3, r3, #30
    7980:	d505      	bpl.n	798e <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    7982:	68e1      	ldr	r1, [r4, #12]
    7984:	69e3      	ldr	r3, [r4, #28]
    7986:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    798a:	429d      	cmp	r5, r3
    798c:	d112      	bne.n	79b4 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
    798e:	782b      	ldrb	r3, [r5, #0]
    7990:	f36f 0341 	bfc	r3, #1, #1
    7994:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    7996:	68e1      	ldr	r1, [r4, #12]
    7998:	4620      	mov	r0, r4
    799a:	f7ff fe4a 	bl	7632 <idx_inc>
    799e:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    79a0:	f386 8811 	msr	BASEPRI, r6
    79a4:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    79a8:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    79ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    79b0:	f7fe bd32 	b.w	6418 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    79b4:	682b      	ldr	r3, [r5, #0]
    79b6:	f360 039f 	bfi	r3, r0, #2, #30
    79ba:	602b      	str	r3, [r5, #0]
    79bc:	e7f0      	b.n	79a0 <mpsc_pbuf_free+0x4a>

000079be <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    79be:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    79c2:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    79c4:	bf8a      	itet	hi
    79c6:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    79c8:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    79ca:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    79cc:	1e18      	subs	r0, r3, #0
    79ce:	bf18      	it	ne
    79d0:	2001      	movne	r0, #1
    79d2:	4770      	bx	lr

000079d4 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    79d4:	4770      	bx	lr

000079d6 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    79d6:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    79d8:	075b      	lsls	r3, r3, #29
    79da:	d40b      	bmi.n	79f4 <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    79dc:	6803      	ldr	r3, [r0, #0]
    79de:	8840      	ldrh	r0, [r0, #2]
    79e0:	f3c3 2349 	ubfx	r3, r3, #9, #10
    79e4:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    79e8:	4418      	add	r0, r3
    79ea:	3017      	adds	r0, #23
    79ec:	f020 0007 	bic.w	r0, r0, #7
    79f0:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
    79f2:	4770      	bx	lr
	return 0;
    79f4:	2000      	movs	r0, #0
}
    79f6:	4770      	bx	lr

000079f8 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    79f8:	f000 ba81 	b.w	7efe <sys_clock_cycle_get_32>

000079fc <dummy_timestamp>:
    79fc:	2000      	movs	r0, #0
    79fe:	4770      	bx	lr

00007a00 <z_log_vprintk>:
{
    7a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    7a02:	2300      	movs	r3, #0
    7a04:	e9cd 0102 	strd	r0, r1, [sp, #8]
    7a08:	e9cd 3300 	strd	r3, r3, [sp]
    7a0c:	461a      	mov	r2, r3
    7a0e:	4619      	mov	r1, r3
    7a10:	4618      	mov	r0, r3
    7a12:	f7fa faf9 	bl	2008 <z_impl_z_log_msg2_runtime_vcreate>
}
    7a16:	b005      	add	sp, #20
    7a18:	f85d fb04 	ldr.w	pc, [sp], #4

00007a1c <notify_drop>:
	z_log_dropped(true);
    7a1c:	2001      	movs	r0, #1
    7a1e:	f7f9 bf81 	b.w	1924 <z_log_dropped>

00007a22 <get_msg>:
{
    7a22:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
    7a24:	f7f9 fff2 	bl	1a0c <z_log_msg2_claim>
}
    7a28:	bd08      	pop	{r3, pc}

00007a2a <z_log_get_tag>:
}
    7a2a:	2000      	movs	r0, #0
    7a2c:	4770      	bx	lr

00007a2e <buffer_write>:
{
    7a2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a30:	4606      	mov	r6, r0
    7a32:	460d      	mov	r5, r1
    7a34:	4614      	mov	r4, r2
    7a36:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    7a38:	4621      	mov	r1, r4
    7a3a:	4628      	mov	r0, r5
    7a3c:	463a      	mov	r2, r7
    7a3e:	47b0      	blx	r6
	} while (len != 0);
    7a40:	1a24      	subs	r4, r4, r0
		buf += processed;
    7a42:	4405      	add	r5, r0
	} while (len != 0);
    7a44:	d1f8      	bne.n	7a38 <buffer_write+0xa>
}
    7a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007a48 <log_output_flush>:
		     output->control_block->offset,
    7a48:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    7a4a:	6881      	ldr	r1, [r0, #8]
{
    7a4c:	b510      	push	{r4, lr}
    7a4e:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    7a50:	e9d2 2300 	ldrd	r2, r3, [r2]
    7a54:	6800      	ldr	r0, [r0, #0]
    7a56:	f7ff ffea 	bl	7a2e <buffer_write>
	output->control_block->offset = 0;
    7a5a:	6863      	ldr	r3, [r4, #4]
    7a5c:	2200      	movs	r2, #0
    7a5e:	601a      	str	r2, [r3, #0]
}
    7a60:	bd10      	pop	{r4, pc}

00007a62 <out_func>:
{
    7a62:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    7a64:	684b      	ldr	r3, [r1, #4]
    7a66:	681a      	ldr	r2, [r3, #0]
    7a68:	68cb      	ldr	r3, [r1, #12]
    7a6a:	429a      	cmp	r2, r3
{
    7a6c:	4605      	mov	r5, r0
    7a6e:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    7a70:	d102      	bne.n	7a78 <out_func+0x16>
		log_output_flush(out_ctx);
    7a72:	4608      	mov	r0, r1
    7a74:	f7ff ffe8 	bl	7a48 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    7a78:	6863      	ldr	r3, [r4, #4]
    7a7a:	f3bf 8f5b 	dmb	ish
    7a7e:	e853 2f00 	ldrex	r2, [r3]
    7a82:	1c51      	adds	r1, r2, #1
    7a84:	e843 1000 	strex	r0, r1, [r3]
    7a88:	2800      	cmp	r0, #0
    7a8a:	d1f8      	bne.n	7a7e <out_func+0x1c>
    7a8c:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    7a90:	68a3      	ldr	r3, [r4, #8]
    7a92:	549d      	strb	r5, [r3, r2]
}
    7a94:	2000      	movs	r0, #0
    7a96:	bd38      	pop	{r3, r4, r5, pc}

00007a98 <cr_out_func>:
{
    7a98:	b538      	push	{r3, r4, r5, lr}
    7a9a:	4605      	mov	r5, r0
    7a9c:	460c      	mov	r4, r1
	out_func(c, ctx);
    7a9e:	f7ff ffe0 	bl	7a62 <out_func>
	if (c == '\n') {
    7aa2:	2d0a      	cmp	r5, #10
    7aa4:	d103      	bne.n	7aae <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    7aa6:	4621      	mov	r1, r4
    7aa8:	200d      	movs	r0, #13
    7aaa:	f7ff ffda 	bl	7a62 <out_func>
}
    7aae:	2000      	movs	r0, #0
    7ab0:	bd38      	pop	{r3, r4, r5, pc}

00007ab2 <z_log_msg2_finalize>:
{
    7ab2:	b570      	push	{r4, r5, r6, lr}
    7ab4:	460e      	mov	r6, r1
    7ab6:	4615      	mov	r5, r2
    7ab8:	4619      	mov	r1, r3
	if (!msg) {
    7aba:	4604      	mov	r4, r0
    7abc:	b918      	cbnz	r0, 7ac6 <z_log_msg2_finalize+0x14>
}
    7abe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    7ac2:	f7f9 bf2f 	b.w	1924 <z_log_dropped>
	if (data) {
    7ac6:	b143      	cbz	r3, 7ada <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
    7ac8:	f100 0310 	add.w	r3, r0, #16
    7acc:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    7ad0:	4418      	add	r0, r3
    7ad2:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    7ad6:	f000 f884 	bl	7be2 <memcpy>
	msg->hdr.source = source;
    7ada:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    7ade:	4620      	mov	r0, r4
}
    7ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    7ae4:	f7fa b854 	b.w	1b90 <z_log_msg2_commit>

00007ae8 <z_impl_z_log_msg2_static_create>:
{
    7ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    7aec:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    7af0:	f3c1 2649 	ubfx	r6, r1, #9, #10
    7af4:	b089      	sub	sp, #36	; 0x24
    7af6:	4681      	mov	r9, r0
    7af8:	460d      	mov	r5, r1
    7afa:	4690      	mov	r8, r2
    7afc:	469a      	mov	sl, r3
    7afe:	3417      	adds	r4, #23
	if (inlen > 0) {
    7b00:	b386      	cbz	r6, 7b64 <z_impl_z_log_msg2_static_create+0x7c>
		len = cbprintf_package_copy(package, inlen,
    7b02:	2302      	movs	r3, #2
    7b04:	9300      	str	r3, [sp, #0]
    7b06:	f04f 0b04 	mov.w	fp, #4
    7b0a:	2300      	movs	r3, #0
    7b0c:	af06      	add	r7, sp, #24
    7b0e:	4631      	mov	r1, r6
    7b10:	461a      	mov	r2, r3
    7b12:	f8cd b008 	str.w	fp, [sp, #8]
    7b16:	9701      	str	r7, [sp, #4]
    7b18:	4640      	mov	r0, r8
    7b1a:	9605      	str	r6, [sp, #20]
    7b1c:	f7f9 f882 	bl	c24 <cbprintf_package_copy>
		out_desc.package_len = len;
    7b20:	f3c0 0309 	ubfx	r3, r0, #0, #10
    7b24:	1918      	adds	r0, r3, r4
    7b26:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    7b2a:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    7b2c:	461e      	mov	r6, r3
    7b2e:	9304      	str	r3, [sp, #16]
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    7b30:	f7f9 ff64 	bl	19fc <z_log_msg2_alloc>
		if (msg) {
    7b34:	4604      	mov	r4, r0
    7b36:	b150      	cbz	r0, 7b4e <z_impl_z_log_msg2_static_create+0x66>
			len = cbprintf_package_copy(package, inlen,
    7b38:	2302      	movs	r3, #2
    7b3a:	9300      	str	r3, [sp, #0]
    7b3c:	f100 0210 	add.w	r2, r0, #16
    7b40:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    7b44:	9b04      	ldr	r3, [sp, #16]
    7b46:	9905      	ldr	r1, [sp, #20]
    7b48:	4640      	mov	r0, r8
    7b4a:	f7f9 f86b 	bl	c24 <cbprintf_package_copy>
	z_log_msg2_finalize(msg, source, out_desc, data);
    7b4e:	f366 2552 	bfi	r5, r6, #9, #10
    7b52:	4653      	mov	r3, sl
    7b54:	462a      	mov	r2, r5
    7b56:	4649      	mov	r1, r9
    7b58:	4620      	mov	r0, r4
}
    7b5a:	b009      	add	sp, #36	; 0x24
    7b5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg2_finalize(msg, source, out_desc, data);
    7b60:	f7ff bfa7 	b.w	7ab2 <z_log_msg2_finalize>
    7b64:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    7b68:	0880      	lsrs	r0, r0, #2
    7b6a:	f7f9 ff47 	bl	19fc <z_log_msg2_alloc>
    7b6e:	4604      	mov	r4, r0
    7b70:	e7ed      	b.n	7b4e <z_impl_z_log_msg2_static_create+0x66>

00007b72 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    7b72:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    7b74:	6800      	ldr	r0, [r0, #0]
    7b76:	f7fa bc9d 	b.w	24b4 <z_arm_fatal_error>

00007b7a <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    7b7a:	2100      	movs	r1, #0
    7b7c:	2001      	movs	r0, #1
    7b7e:	f7fa bc99 	b.w	24b4 <z_arm_fatal_error>

00007b82 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    7b82:	b508      	push	{r3, lr}
	handler();
    7b84:	f7fa fd54 	bl	2630 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    7b88:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    7b8c:	f7fa be26 	b.w	27dc <z_arm_exc_exit>

00007b90 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    7b90:	2300      	movs	r3, #0
    7b92:	f7ff bfa9 	b.w	7ae8 <z_impl_z_log_msg2_static_create>

00007b96 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    7b96:	3901      	subs	r1, #1
    7b98:	4603      	mov	r3, r0
    7b9a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    7b9e:	b90a      	cbnz	r2, 7ba4 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    7ba0:	701a      	strb	r2, [r3, #0]

	return dest;
}
    7ba2:	4770      	bx	lr
		*d = *s;
    7ba4:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    7ba8:	e7f7      	b.n	7b9a <strcpy+0x4>

00007baa <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    7baa:	4603      	mov	r3, r0
	size_t n = 0;
    7bac:	2000      	movs	r0, #0

	while (*s != '\0') {
    7bae:	5c1a      	ldrb	r2, [r3, r0]
    7bb0:	b902      	cbnz	r2, 7bb4 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    7bb2:	4770      	bx	lr
		n++;
    7bb4:	3001      	adds	r0, #1
    7bb6:	e7fa      	b.n	7bae <strlen+0x4>

00007bb8 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    7bb8:	4603      	mov	r3, r0
	size_t n = 0;
    7bba:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    7bbc:	5c1a      	ldrb	r2, [r3, r0]
    7bbe:	b10a      	cbz	r2, 7bc4 <strnlen+0xc>
    7bc0:	4288      	cmp	r0, r1
    7bc2:	d100      	bne.n	7bc6 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    7bc4:	4770      	bx	lr
		n++;
    7bc6:	3001      	adds	r0, #1
    7bc8:	e7f8      	b.n	7bbc <strnlen+0x4>

00007bca <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    7bca:	1e43      	subs	r3, r0, #1
    7bcc:	3901      	subs	r1, #1
    7bce:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    7bd2:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    7bd6:	4282      	cmp	r2, r0
    7bd8:	d101      	bne.n	7bde <strcmp+0x14>
    7bda:	2a00      	cmp	r2, #0
    7bdc:	d1f7      	bne.n	7bce <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    7bde:	1a10      	subs	r0, r2, r0
    7be0:	4770      	bx	lr

00007be2 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    7be2:	b510      	push	{r4, lr}
    7be4:	1e43      	subs	r3, r0, #1
    7be6:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    7be8:	4291      	cmp	r1, r2
    7bea:	d100      	bne.n	7bee <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    7bec:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    7bee:	f811 4b01 	ldrb.w	r4, [r1], #1
    7bf2:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    7bf6:	e7f7      	b.n	7be8 <memcpy+0x6>

00007bf8 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    7bf8:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    7bfa:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    7bfc:	4603      	mov	r3, r0
	while (n > 0) {
    7bfe:	4293      	cmp	r3, r2
    7c00:	d100      	bne.n	7c04 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    7c02:	4770      	bx	lr
		*(d_byte++) = c_byte;
    7c04:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    7c08:	e7f9      	b.n	7bfe <memset+0x6>

00007c0a <_stdout_hook_default>:
}
    7c0a:	f04f 30ff 	mov.w	r0, #4294967295
    7c0e:	4770      	bx	lr

00007c10 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    7c10:	f04f 0220 	mov.w	r2, #32
    7c14:	f3ef 8311 	mrs	r3, BASEPRI
    7c18:	f382 8812 	msr	BASEPRI_MAX, r2
    7c1c:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    7c20:	f383 8811 	msr	BASEPRI, r3
    7c24:	f3bf 8f6f 	isb	sy
}
    7c28:	2000      	movs	r0, #0
    7c2a:	4770      	bx	lr

00007c2c <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    7c2c:	2806      	cmp	r0, #6
    7c2e:	d108      	bne.n	7c42 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    7c30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7c34:	2201      	movs	r2, #1
    7c36:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    7c3a:	f3bf 8f4f 	dsb	sy
        __WFE();
    7c3e:	bf20      	wfe
    while (true)
    7c40:	e7fd      	b.n	7c3e <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    7c42:	4770      	bx	lr

00007c44 <pm_state_exit_post_ops>:
    7c44:	2300      	movs	r3, #0
    7c46:	f383 8811 	msr	BASEPRI, r3
    7c4a:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    7c4e:	4770      	bx	lr

00007c50 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    7c50:	6903      	ldr	r3, [r0, #16]
    7c52:	b2c9      	uxtb	r1, r1
    7c54:	220c      	movs	r2, #12
    7c56:	fb01 3302 	mla	r3, r1, r2, r3
    7c5a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    7c5c:	f000 0007 	and.w	r0, r0, #7
    7c60:	4770      	bx	lr

00007c62 <set_on_state>:
	__asm__ volatile(
    7c62:	f04f 0320 	mov.w	r3, #32
    7c66:	f3ef 8211 	mrs	r2, BASEPRI
    7c6a:	f383 8812 	msr	BASEPRI_MAX, r3
    7c6e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    7c72:	6803      	ldr	r3, [r0, #0]
    7c74:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7c78:	f043 0302 	orr.w	r3, r3, #2
    7c7c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    7c7e:	f382 8811 	msr	BASEPRI, r2
    7c82:	f3bf 8f6f 	isb	sy
}
    7c86:	4770      	bx	lr

00007c88 <stop>:
{
    7c88:	4603      	mov	r3, r0
    7c8a:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    7c8c:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    7c8e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    7c90:	f04f 0420 	mov.w	r4, #32
    7c94:	f3ef 8611 	mrs	r6, BASEPRI
    7c98:	f384 8812 	msr	BASEPRI_MAX, r4
    7c9c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7ca0:	250c      	movs	r5, #12
    7ca2:	fb05 0401 	mla	r4, r5, r1, r0
    7ca6:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    7ca8:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    7cac:	d001      	beq.n	7cb2 <stop+0x2a>
    7cae:	42a2      	cmp	r2, r4
    7cb0:	d111      	bne.n	7cd6 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    7cb2:	fb05 0001 	mla	r0, r5, r1, r0
    7cb6:	2201      	movs	r2, #1
    7cb8:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    7cba:	2000      	movs	r0, #0
	__asm__ volatile(
    7cbc:	f386 8811 	msr	BASEPRI, r6
    7cc0:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    7cc4:	b930      	cbnz	r0, 7cd4 <stop+0x4c>
	get_sub_config(dev, type)->stop();
    7cc6:	685b      	ldr	r3, [r3, #4]
    7cc8:	220c      	movs	r2, #12
    7cca:	fb02 3101 	mla	r1, r2, r1, r3
    7cce:	684b      	ldr	r3, [r1, #4]
    7cd0:	4798      	blx	r3
	return 0;
    7cd2:	2000      	movs	r0, #0
}
    7cd4:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    7cd6:	f04f 30ff 	mov.w	r0, #4294967295
    7cda:	e7ef      	b.n	7cbc <stop+0x34>

00007cdc <api_stop>:
	return stop(dev, subsys, CTX_API);
    7cdc:	2280      	movs	r2, #128	; 0x80
    7cde:	f7ff bfd3 	b.w	7c88 <stop>

00007ce2 <async_start>:
{
    7ce2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7ce4:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    7ce6:	6904      	ldr	r4, [r0, #16]
{
    7ce8:	4605      	mov	r5, r0
    7cea:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    7cec:	f04f 0020 	mov.w	r0, #32
    7cf0:	f3ef 8c11 	mrs	ip, BASEPRI
    7cf4:	f380 8812 	msr	BASEPRI_MAX, r0
    7cf8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    7cfc:	260c      	movs	r6, #12
    7cfe:	fb06 4601 	mla	r6, r6, r1, r4
    7d02:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    7d04:	f000 0e07 	and.w	lr, r0, #7
    7d08:	f1be 0f01 	cmp.w	lr, #1
    7d0c:	d110      	bne.n	7d30 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    7d0e:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    7d10:	2600      	movs	r6, #0
	__asm__ volatile(
    7d12:	f38c 8811 	msr	BASEPRI, ip
    7d16:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    7d1a:	b93e      	cbnz	r6, 7d2c <async_start+0x4a>
	subdata->cb = cb;
    7d1c:	200c      	movs	r0, #12
    7d1e:	4341      	muls	r1, r0
    7d20:	440c      	add	r4, r1
	subdata->user_data = user_data;
    7d22:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    7d26:	686b      	ldr	r3, [r5, #4]
    7d28:	585b      	ldr	r3, [r3, r1]
    7d2a:	4798      	blx	r3
}
    7d2c:	4630      	mov	r0, r6
    7d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    7d30:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    7d34:	4287      	cmp	r7, r0
    7d36:	bf14      	ite	ne
    7d38:	f04f 36ff 	movne.w	r6, #4294967295
    7d3c:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    7d40:	e7e7      	b.n	7d12 <async_start+0x30>

00007d42 <api_start>:
{
    7d42:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    7d44:	2480      	movs	r4, #128	; 0x80
    7d46:	9400      	str	r4, [sp, #0]
    7d48:	f7ff ffcb 	bl	7ce2 <async_start>
}
    7d4c:	b002      	add	sp, #8
    7d4e:	bd10      	pop	{r4, pc}

00007d50 <onoff_started_callback>:
	return &data->mgr[type];
    7d50:	6900      	ldr	r0, [r0, #16]
{
    7d52:	b410      	push	{r4}
	return &data->mgr[type];
    7d54:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    7d56:	241c      	movs	r4, #28
    7d58:	fb03 0004 	mla	r0, r3, r4, r0
    7d5c:	2100      	movs	r1, #0
}
    7d5e:	bc10      	pop	{r4}
	notify(mgr, 0);
    7d60:	4710      	bx	r2

00007d62 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    7d62:	2000      	movs	r0, #0
    7d64:	f000 b9d8 	b.w	8118 <nrfx_clock_start>

00007d68 <blocking_start_callback>:
{
    7d68:	4610      	mov	r0, r2
    7d6a:	f7fe bb55 	b.w	6418 <z_impl_k_sem_give>

00007d6e <lfclk_stop>:
{
    7d6e:	b508      	push	{r3, lr}
		z_nrf_clock_calibration_lfclk_stopped();
    7d70:	f7fb fbe0 	bl	3534 <z_nrf_clock_calibration_lfclk_stopped>
}
    7d74:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    7d78:	2000      	movs	r0, #0
    7d7a:	f000 ba05 	b.w	8188 <nrfx_clock_stop>

00007d7e <timeout_handler>:
	start_cal_process();
    7d7e:	f7fb bb15 	b.w	33ac <start_cal_process>

00007d82 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7d82:	6843      	ldr	r3, [r0, #4]
    7d84:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    7d86:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    7d8a:	600b      	str	r3, [r1, #0]
}
    7d8c:	2000      	movs	r0, #0
    7d8e:	4770      	bx	lr

00007d90 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7d90:	6843      	ldr	r3, [r0, #4]
    7d92:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    7d94:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    7d98:	4042      	eors	r2, r0
    7d9a:	400a      	ands	r2, r1
    7d9c:	4042      	eors	r2, r0
    p_reg->OUT = value;
    7d9e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    7da2:	2000      	movs	r0, #0
    7da4:	4770      	bx	lr

00007da6 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7da6:	6843      	ldr	r3, [r0, #4]
    7da8:	685b      	ldr	r3, [r3, #4]
}
    7daa:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    7dac:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    7db0:	4770      	bx	lr

00007db2 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7db2:	6843      	ldr	r3, [r0, #4]
    7db4:	685b      	ldr	r3, [r3, #4]
}
    7db6:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    7db8:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    7dbc:	4770      	bx	lr

00007dbe <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    7dbe:	6843      	ldr	r3, [r0, #4]
    7dc0:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    7dc2:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    7dc6:	404b      	eors	r3, r1
    p_reg->OUT = value;
    7dc8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    7dcc:	2000      	movs	r0, #0
    7dce:	4770      	bx	lr

00007dd0 <gpio_nrfx_manage_callback>:
	return port->data;
    7dd0:	6903      	ldr	r3, [r0, #16]
	return list->head;
    7dd2:	6858      	ldr	r0, [r3, #4]
{
    7dd4:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    7dd6:	b158      	cbz	r0, 7df0 <gpio_nrfx_manage_callback+0x20>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7dd8:	2400      	movs	r4, #0
    7dda:	4281      	cmp	r1, r0
    7ddc:	d112      	bne.n	7e04 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    7dde:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    7de0:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    7de2:	b954      	cbnz	r4, 7dfa <gpio_nrfx_manage_callback+0x2a>
    7de4:	428d      	cmp	r5, r1
	list->head = node;
    7de6:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    7de8:	d100      	bne.n	7dec <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    7dea:	6098      	str	r0, [r3, #8]
	parent->next = child;
    7dec:	2000      	movs	r0, #0
    7dee:	6008      	str	r0, [r1, #0]
	if (set) {
    7df0:	b96a      	cbnz	r2, 7e0e <gpio_nrfx_manage_callback+0x3e>
	return 0;
    7df2:	2000      	movs	r0, #0
}
    7df4:	bd30      	pop	{r4, r5, pc}
    7df6:	4628      	mov	r0, r5
    7df8:	e7ef      	b.n	7dda <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    7dfa:	428d      	cmp	r5, r1
	parent->next = child;
    7dfc:	6020      	str	r0, [r4, #0]
	list->tail = node;
    7dfe:	bf08      	it	eq
    7e00:	609c      	streq	r4, [r3, #8]
}
    7e02:	e7f3      	b.n	7dec <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    7e04:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7e06:	4604      	mov	r4, r0
    7e08:	2d00      	cmp	r5, #0
    7e0a:	d1f4      	bne.n	7df6 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    7e0c:	b13a      	cbz	r2, 7e1e <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    7e0e:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    7e10:	685a      	ldr	r2, [r3, #4]
    7e12:	600a      	str	r2, [r1, #0]
	list->head = node;
    7e14:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    7e16:	2800      	cmp	r0, #0
    7e18:	d1eb      	bne.n	7df2 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    7e1a:	6099      	str	r1, [r3, #8]
}
    7e1c:	e7ea      	b.n	7df4 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    7e1e:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    7e22:	e7e7      	b.n	7df4 <gpio_nrfx_manage_callback+0x24>

00007e24 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    7e24:	b530      	push	{r4, r5, lr}
    7e26:	4604      	mov	r4, r0
	while (*count) {
    7e28:	6808      	ldr	r0, [r1, #0]
    7e2a:	b908      	cbnz	r0, 7e30 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
    7e2c:	6010      	str	r0, [r2, #0]
	return NULL;
    7e2e:	e004      	b.n	7e3a <spi_context_get_next_buf.constprop.0+0x16>
		if (((*current)->len / dfs) != 0) {
    7e30:	6823      	ldr	r3, [r4, #0]
    7e32:	685d      	ldr	r5, [r3, #4]
    7e34:	b115      	cbz	r5, 7e3c <spi_context_get_next_buf.constprop.0+0x18>
			return (*current)->buf;
    7e36:	6818      	ldr	r0, [r3, #0]
			*buf_len = (*current)->len / dfs;
    7e38:	6015      	str	r5, [r2, #0]
}
    7e3a:	bd30      	pop	{r4, r5, pc}
		++(*current);
    7e3c:	3308      	adds	r3, #8
		--(*count);
    7e3e:	3801      	subs	r0, #1
		++(*current);
    7e40:	6023      	str	r3, [r4, #0]
		--(*count);
    7e42:	6008      	str	r0, [r1, #0]
    7e44:	e7f0      	b.n	7e28 <spi_context_get_next_buf.constprop.0+0x4>

00007e46 <z_log_msg2_static_create.constprop.0>:
    7e46:	2300      	movs	r3, #0
    7e48:	f7ff be4e 	b.w	7ae8 <z_impl_z_log_msg2_static_create>

00007e4c <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    7e4c:	4603      	mov	r3, r0
    7e4e:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    7e50:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    7e52:	7919      	ldrb	r1, [r3, #4]
    7e54:	2301      	movs	r3, #1
    7e56:	fa03 f101 	lsl.w	r1, r3, r1
    7e5a:	6903      	ldr	r3, [r0, #16]
    7e5c:	681b      	ldr	r3, [r3, #0]
    7e5e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    7e60:	bf18      	it	ne
    7e62:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    7e66:	b112      	cbz	r2, 7e6e <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    7e68:	6883      	ldr	r3, [r0, #8]
    7e6a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    7e6c:	4718      	bx	r3
    7e6e:	6883      	ldr	r3, [r0, #8]
    7e70:	691b      	ldr	r3, [r3, #16]
    7e72:	e7fb      	b.n	7e6c <gpio_pin_set_dt.isra.0+0x20>

00007e74 <_spi_context_cs_control>:
{
    7e74:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    7e76:	6803      	ldr	r3, [r0, #0]
{
    7e78:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    7e7a:	b1e3      	cbz	r3, 7eb6 <__kernel_ram_size+0x1e>
    7e7c:	6898      	ldr	r0, [r3, #8]
    7e7e:	b1d0      	cbz	r0, 7eb6 <__kernel_ram_size+0x1e>
    7e80:	6805      	ldr	r5, [r0, #0]
    7e82:	b1c5      	cbz	r5, 7eb6 <__kernel_ram_size+0x1e>
		if (on) {
    7e84:	b149      	cbz	r1, 7e9a <__kernel_ram_size+0x2>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    7e86:	2101      	movs	r1, #1
    7e88:	f7ff ffe0 	bl	7e4c <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    7e8c:	6823      	ldr	r3, [r4, #0]
    7e8e:	689b      	ldr	r3, [r3, #8]
    7e90:	6898      	ldr	r0, [r3, #8]
}
    7e92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    7e96:	f000 bbcf 	b.w	8638 <z_impl_k_busy_wait>
			if (!force_off &&
    7e9a:	b912      	cbnz	r2, 7ea2 <__kernel_ram_size+0xa>
    7e9c:	889b      	ldrh	r3, [r3, #4]
    7e9e:	04db      	lsls	r3, r3, #19
    7ea0:	d409      	bmi.n	7eb6 <__kernel_ram_size+0x1e>
			k_busy_wait(ctx->config->cs->delay);
    7ea2:	6880      	ldr	r0, [r0, #8]
    7ea4:	f000 fbc8 	bl	8638 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    7ea8:	6823      	ldr	r3, [r4, #0]
    7eaa:	2100      	movs	r1, #0
    7eac:	6898      	ldr	r0, [r3, #8]
}
    7eae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    7eb2:	f7ff bfcb 	b.w	7e4c <gpio_pin_set_dt.isra.0>
}
    7eb6:	bd38      	pop	{r3, r4, r5, pc}

00007eb8 <spi_context_unlock_unconditionally>:
{
    7eb8:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    7eba:	2201      	movs	r2, #1
    7ebc:	2100      	movs	r1, #0
{
    7ebe:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    7ec0:	f7ff ffd8 	bl	7e74 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    7ec4:	69a3      	ldr	r3, [r4, #24]
    7ec6:	b933      	cbnz	r3, 7ed6 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    7ec8:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    7eca:	f104 0010 	add.w	r0, r4, #16
}
    7ece:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    7ed2:	f7fe baa1 	b.w	6418 <z_impl_k_sem_give>
    7ed6:	bd10      	pop	{r4, pc}

00007ed8 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = dev->data;
    7ed8:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    7eda:	6803      	ldr	r3, [r0, #0]
    7edc:	428b      	cmp	r3, r1
{
    7ede:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    7ee0:	d106      	bne.n	7ef0 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    7ee2:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
    7ee6:	b934      	cbnz	r4, 7ef6 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    7ee8:	f7ff ffe6 	bl	7eb8 <spi_context_unlock_unconditionally>
	return 0;
    7eec:	4620      	mov	r0, r4
}
    7eee:	bd10      	pop	{r4, pc}
		return -EINVAL;
    7ef0:	f06f 0015 	mvn.w	r0, #21
    7ef4:	e7fb      	b.n	7eee <spi_nrfx_release+0x16>
		return -EBUSY;
    7ef6:	f06f 000f 	mvn.w	r0, #15
    7efa:	e7f8      	b.n	7eee <spi_nrfx_release+0x16>

00007efc <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    7efc:	4770      	bx	lr

00007efe <sys_clock_cycle_get_32>:
{
    7efe:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    7f00:	f7fc f86a 	bl	3fd8 <z_nrf_rtc_timer_read>
}
    7f04:	bd08      	pop	{r3, pc}

00007f06 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    7f06:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    7f08:	6843      	ldr	r3, [r0, #4]
    7f0a:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    7f0c:	7a03      	ldrb	r3, [r0, #8]
    7f0e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    7f12:	3b01      	subs	r3, #1
    7f14:	00db      	lsls	r3, r3, #3
    7f16:	6845      	ldr	r5, [r0, #4]
    7f18:	6814      	ldr	r4, [r2, #0]
    7f1a:	441d      	add	r5, r3
    7f1c:	42ac      	cmp	r4, r5
    7f1e:	d902      	bls.n	7f26 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    7f20:	f06f 0001 	mvn.w	r0, #1
}
    7f24:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    7f26:	7965      	ldrb	r5, [r4, #5]
    7f28:	428d      	cmp	r5, r1
    7f2a:	d002      	beq.n	7f32 <pinctrl_lookup_state+0x2c>
		(*state)++;
    7f2c:	3408      	adds	r4, #8
    7f2e:	6014      	str	r4, [r2, #0]
    7f30:	e7f1      	b.n	7f16 <pinctrl_lookup_state+0x10>
			return 0;
    7f32:	2000      	movs	r0, #0
    7f34:	e7f6      	b.n	7f24 <pinctrl_lookup_state+0x1e>

00007f36 <nrf_pin_configure.constprop.0>:
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    7f36:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    7f3a:	2b00      	cmp	r3, #0
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
    7f3c:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
    7f3e:	f000 031f 	and.w	r3, r0, #31
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    7f42:	bf08      	it	eq
    7f44:	4614      	moveq	r4, r2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7f46:	f3c0 1281 	ubfx	r2, r0, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    7f4a:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
    7f4e:	bf18      	it	ne
    7f50:	2100      	movne	r1, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7f52:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
    7f56:	ea42 0201 	orr.w	r2, r2, r1
    7f5a:	bf18      	it	ne
    7f5c:	2401      	movne	r4, #1
    reg->PIN_CNF[pin_number] = cnf;
    7f5e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7f62:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7f66:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    7f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    7f6e:	bd10      	pop	{r4, pc}

00007f70 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    7f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7f74:	4615      	mov	r5, r2
    7f76:	4604      	mov	r4, r0
    7f78:	eb00 0681 	add.w	r6, r0, r1, lsl #2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7f7c:	2701      	movs	r7, #1
    p_reg->OUTCLR = clr_mask;
    7f7e:	f04f 48a0 	mov.w	r8, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7f82:	42b4      	cmp	r4, r6
    7f84:	d102      	bne.n	7f8c <pinctrl_configure_pins+0x1c>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    7f86:	2000      	movs	r0, #0
}
    7f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    7f8c:	6823      	ldr	r3, [r4, #0]
		switch (NRF_GET_FUN(pins[i])) {
    7f8e:	0c1a      	lsrs	r2, r3, #16
    7f90:	2a05      	cmp	r2, #5
    7f92:	d015      	beq.n	7fc0 <pinctrl_configure_pins+0x50>
    7f94:	2a06      	cmp	r2, #6
    7f96:	d021      	beq.n	7fdc <pinctrl_configure_pins+0x6c>
    7f98:	2a04      	cmp	r2, #4
    7f9a:	d125      	bne.n	7fe8 <pinctrl_configure_pins+0x78>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    7f9c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7fa0:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    7fa4:	6823      	ldr	r3, [r4, #0]
    7fa6:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7faa:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    7fae:	f8c8 350c 	str.w	r3, [r8, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7fb2:	2200      	movs	r2, #0
    7fb4:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7fb6:	6820      	ldr	r0, [r4, #0]
    7fb8:	f7ff ffbd 	bl	7f36 <nrf_pin_configure.constprop.0>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    7fbc:	3404      	adds	r4, #4
    7fbe:	e7e0      	b.n	7f82 <pinctrl_configure_pins+0x12>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    7fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7fc4:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    7fc8:	6823      	ldr	r3, [r4, #0]
    7fca:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    7fce:	fa07 f303 	lsl.w	r3, r7, r3
    p_reg->OUTCLR = clr_mask;
    7fd2:	f8c8 350c 	str.w	r3, [r8, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    7fd6:	2201      	movs	r2, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7fd8:	4611      	mov	r1, r2
    7fda:	e7ec      	b.n	7fb6 <pinctrl_configure_pins+0x46>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    7fdc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7fe0:	f8c5 3510 	str.w	r3, [r5, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    7fe4:	2200      	movs	r2, #0
    7fe6:	e7f7      	b.n	7fd8 <pinctrl_configure_pins+0x68>
		switch (NRF_GET_FUN(pins[i])) {
    7fe8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    7fec:	e7cc      	b.n	7f88 <pinctrl_configure_pins+0x18>

00007fee <ESB_SYS_TIMER_IRQHandler>:

	return 1;
}

ISR_DIRECT_DECLARE(ESB_SYS_TIMER_IRQHandler)
    7fee:	4668      	mov	r0, sp
    7ff0:	f020 0107 	bic.w	r1, r0, #7
    7ff4:	468d      	mov	sp, r1
    7ff6:	b501      	push	{r0, lr}
{
	ISR_DIRECT_PM();
    7ff8:	f7fa fb0c 	bl	2614 <_arch_isr_direct_pm>
    7ffc:	f7fa fbee 	bl	27dc <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_SYS_TIMER_IRQHandler)
    8000:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    8004:	4685      	mov	sp, r0
    8006:	4770      	bx	lr

00008008 <k_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    8008:	f000 bb16 	b.w	8638 <z_impl_k_busy_wait>

0000800c <z_log_msg2_static_create.constprop.0>:
    800c:	2300      	movs	r3, #0
    800e:	f7ff bd6b 	b.w	7ae8 <z_impl_z_log_msg2_static_create>

00008012 <reg_write>:
{
    8012:	b570      	push	{r4, r5, r6, lr}
    8014:	460d      	mov	r5, r1
	err = spi_cs_ctrl(dev_data, true);
    8016:	2101      	movs	r1, #1
{
    8018:	4604      	mov	r4, r0
    801a:	4616      	mov	r6, r2
	err = spi_cs_ctrl(dev_data, true);
    801c:	f7fc fa9c 	bl	4558 <spi_cs_ctrl>
	if (err) {
    8020:	b930      	cbnz	r0, 8030 <reg_write+0x1e>
    8022:	4632      	mov	r2, r6
    8024:	4629      	mov	r1, r5
    8026:	4620      	mov	r0, r4
}
    8028:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    802c:	f7fc babc 	b.w	45a8 <reg_write.part.0>
    8030:	bd70      	pop	{r4, r5, r6, pc}

00008032 <pmw3360_async_init_power_up>:
	return reg_write(dev_data, PMW3360_REG_POWER_UP_RESET, 0x5A);
    8032:	225a      	movs	r2, #90	; 0x5a
    8034:	213a      	movs	r1, #58	; 0x3a
    8036:	f7ff bfec 	b.w	8012 <reg_write>

0000803a <gpio_pin_interrupt_configure.constprop.0>:
#endif

extern int z_impl_gpio_pin_interrupt_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_interrupt_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
    803a:	b410      	push	{r4}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    803c:	6883      	ldr	r3, [r0, #8]
    803e:	699c      	ldr	r4, [r3, #24]
    8040:	f001 72b0 	and.w	r2, r1, #23068672	; 0x1600000
    8044:	f001 63c0 	and.w	r3, r1, #100663296	; 0x6000000
    8048:	46a4      	mov	ip, r4
    804a:	2114      	movs	r1, #20
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
}
    804c:	bc10      	pop	{r4}
    804e:	4760      	bx	ip

00008050 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    8050:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x10)
    8054:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    8058:	f1a0 0310 	sub.w	r3, r0, #16
    805c:	4258      	negs	r0, r3
    805e:	4158      	adcs	r0, r3
    8060:	4770      	bx	lr

00008062 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    8062:	4700      	bx	r0

00008064 <nrfx_busy_wait>:
    8064:	f000 bae8 	b.w	8638 <z_impl_k_busy_wait>

00008068 <clock_stop>:
{
    8068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    806a:	4604      	mov	r4, r0
    806c:	b118      	cbz	r0, 8076 <clock_stop+0xe>
    806e:	2801      	cmp	r0, #1
    8070:	d024      	beq.n	80bc <clock_stop+0x54>
}
    8072:	b003      	add	sp, #12
    8074:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8076:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    807a:	2202      	movs	r2, #2
    807c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8080:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    8084:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8088:	2201      	movs	r2, #1
    808a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    808c:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    808e:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    8090:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    8094:	bf14      	ite	ne
    8096:	2500      	movne	r5, #0
    8098:	f10d 0507 	addeq.w	r5, sp, #7
    809c:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    80a0:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    80a4:	b1ac      	cbz	r4, 80d2 <clock_stop+0x6a>
    80a6:	2c01      	cmp	r4, #1
    80a8:	d1e3      	bne.n	8072 <clock_stop+0xa>
            if (p_clk_src != NULL)
    80aa:	b125      	cbz	r5, 80b6 <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    80ac:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    80b0:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    80b4:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    80b6:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    80ba:	e012      	b.n	80e2 <clock_stop+0x7a>
    p_reg->INTENCLR = mask;
    80bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    80c0:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    80c2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    80c6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    80ca:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    80ce:	6058      	str	r0, [r3, #4]
}
    80d0:	e7dc      	b.n	808c <clock_stop+0x24>
            if (p_clk_src != NULL)
    80d2:	b125      	cbz	r5, 80de <clock_stop+0x76>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    80d4:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    80d8:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    80dc:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    80de:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    80e2:	03db      	lsls	r3, r3, #15
    80e4:	d5c5      	bpl.n	8072 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    80e6:	b92d      	cbnz	r5, 80f4 <clock_stop+0x8c>
    80e8:	2001      	movs	r0, #1
    80ea:	f7ff ffbb 	bl	8064 <nrfx_busy_wait>
    80ee:	3f01      	subs	r7, #1
    80f0:	d1d8      	bne.n	80a4 <clock_stop+0x3c>
    80f2:	e7be      	b.n	8072 <clock_stop+0xa>
    80f4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    80f8:	2b01      	cmp	r3, #1
    80fa:	d0f5      	beq.n	80e8 <clock_stop+0x80>
    80fc:	e7b9      	b.n	8072 <clock_stop+0xa>

000080fe <nrfx_clock_enable>:
{
    80fe:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    8100:	2000      	movs	r0, #0
    8102:	f7fa fa61 	bl	25c8 <arch_irq_is_enabled>
    8106:	b908      	cbnz	r0, 810c <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8108:	f7fa fa3a 	bl	2580 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    810c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8110:	2200      	movs	r2, #0
    8112:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
    8116:	bd08      	pop	{r3, pc}

00008118 <nrfx_clock_start>:
{
    8118:	b508      	push	{r3, lr}
    switch (domain)
    811a:	b110      	cbz	r0, 8122 <nrfx_clock_start+0xa>
    811c:	2801      	cmp	r0, #1
    811e:	d028      	beq.n	8172 <nrfx_clock_start+0x5a>
}
    8120:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    8122:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8126:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    812a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    812e:	03c9      	lsls	r1, r1, #15
    8130:	d40b      	bmi.n	814a <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    8132:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    8136:	07d0      	lsls	r0, r2, #31
    8138:	d50c      	bpl.n	8154 <nrfx_clock_start+0x3c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    813a:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
    if (!is_correct_clk)
    813e:	0792      	lsls	r2, r2, #30
    8140:	d105      	bne.n	814e <nrfx_clock_start+0x36>
    p_reg->INTENSET = mask;
    8142:	2202      	movs	r2, #2
    8144:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    8148:	e7ea      	b.n	8120 <nrfx_clock_start+0x8>
    if (!is_correct_clk)
    814a:	0791      	lsls	r1, r2, #30
    814c:	d002      	beq.n	8154 <nrfx_clock_start+0x3c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    814e:	2000      	movs	r0, #0
    8150:	f7ff ff8a 	bl	8068 <clock_stop>
    p_reg->LFCLKSRC = (uint32_t)(source);
    8154:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8158:	2200      	movs	r2, #0
    815a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    815e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    8162:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    8166:	2202      	movs	r2, #2
    8168:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    816c:	2201      	movs	r2, #1
    816e:	609a      	str	r2, [r3, #8]
}
    8170:	e7d6      	b.n	8120 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8172:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8176:	2200      	movs	r2, #0
    8178:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    817c:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    8180:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    8184:	6018      	str	r0, [r3, #0]
}
    8186:	e7cb      	b.n	8120 <nrfx_clock_start+0x8>

00008188 <nrfx_clock_stop>:
    clock_stop(domain);
    8188:	f7ff bf6e 	b.w	8068 <clock_stop>

0000818c <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    818c:	f000 001f 	and.w	r0, r0, #31
    8190:	0080      	lsls	r0, r0, #2
    8192:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8196:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    819a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    819e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    81a2:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    81a6:	4770      	bx	lr

000081a8 <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    81a8:	1c43      	adds	r3, r0, #1
    81aa:	d008      	beq.n	81be <spim_pin_uninit+0x16>
    *p_pin = pin_number & 0x1F;
    81ac:	f000 001f 	and.w	r0, r0, #31
    reg->PIN_CNF[pin_number] = cnf;
    81b0:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    81b4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    81b8:	2202      	movs	r2, #2
    81ba:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    81be:	4770      	bx	lr

000081c0 <nrf_gpio_pin_write>:
    *p_pin = pin_number & 0x1F;
    81c0:	f000 031f 	and.w	r3, r0, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    81c4:	2001      	movs	r0, #1
    81c6:	4098      	lsls	r0, r3
    81c8:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    if (value == 0)
    81cc:	b911      	cbnz	r1, 81d4 <nrf_gpio_pin_write+0x14>
    p_reg->OUTCLR = clr_mask;
    81ce:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
    81d2:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
    81d4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
    81d8:	4770      	bx	lr

000081da <set_ss_pin_state>:
{
    81da:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    81dc:	7fc0      	ldrb	r0, [r0, #31]
    81de:	28ff      	cmp	r0, #255	; 0xff
    81e0:	d006      	beq.n	81f0 <set_ss_pin_state+0x16>
                           p_cb->ss_active_high ? active : !active);
    81e2:	7f9b      	ldrb	r3, [r3, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
    81e4:	079b      	lsls	r3, r3, #30
    81e6:	bf58      	it	pl
    81e8:	f081 0101 	eorpl.w	r1, r1, #1
    81ec:	f7ff bfe8 	b.w	81c0 <nrf_gpio_pin_write>
}
    81f0:	4770      	bx	lr

000081f2 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    81f2:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    81f4:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    81f6:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    81f8:	bf9c      	itt	ls
    81fa:	6880      	ldrls	r0, [r0, #8]
    81fc:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
    81fe:	3b01      	subs	r3, #1
    8200:	1a98      	subs	r0, r3, r2
}
    8202:	4770      	bx	lr

00008204 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    8204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    8208:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    820c:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    820e:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    8212:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    8214:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    8216:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    8218:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    821a:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    821c:	d904      	bls.n	8228 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    821e:	f7ff fce0 	bl	7be2 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
    8222:	60ec      	str	r4, [r5, #12]
}
    8224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    8228:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
    822a:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    822e:	f7ff fcd8 	bl	7be2 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    8232:	6868      	ldr	r0, [r5, #4]
    8234:	4622      	mov	r2, r4
    8236:	eb07 0108 	add.w	r1, r7, r8
    823a:	e7f0      	b.n	821e <_WriteNoCheck+0x1a>

0000823c <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    823c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    8240:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    8242:	4606      	mov	r6, r0
    8244:	4689      	mov	r9, r1
    8246:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    8248:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    824c:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    824e:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    8250:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    8252:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    8254:	bf28      	it	cs
    8256:	18e4      	addcs	r4, r4, r3
    8258:	3c01      	subs	r4, #1
    825a:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    825c:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    825e:	42bc      	cmp	r4, r7
    8260:	bf28      	it	cs
    8262:	463c      	movcs	r4, r7
    8264:	4294      	cmp	r4, r2
    8266:	bf28      	it	cs
    8268:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    826a:	4649      	mov	r1, r9
    826c:	4428      	add	r0, r5
    826e:	4622      	mov	r2, r4
    8270:	f7ff fcb7 	bl	7be2 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    8274:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    8276:	4425      	add	r5, r4
      WrOff = 0u;
    8278:	42ab      	cmp	r3, r5
    827a:	bf08      	it	eq
    827c:	2500      	moveq	r5, #0
  } while (NumBytes);
    827e:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    8280:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    8282:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    8284:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    8286:	d1e1      	bne.n	824c <_WriteBlocking+0x10>
}
    8288:	4640      	mov	r0, r8
    828a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000828e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    828e:	f7fd bccb 	b.w	5c28 <_DoInit>

00008292 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    8292:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    8294:	f7ff fffb 	bl	828e <SEGGER_RTT_Init>

	return 0;
}
    8298:	2000      	movs	r0, #0
    829a:	bd08      	pop	{r3, pc}

0000829c <z_device_state_init>:
}
    829c:	4770      	bx	lr

0000829e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    829e:	b138      	cbz	r0, 82b0 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    82a0:	68c3      	ldr	r3, [r0, #12]
    82a2:	8818      	ldrh	r0, [r3, #0]
    82a4:	f3c0 0008 	ubfx	r0, r0, #0, #9
    82a8:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    82ac:	4258      	negs	r0, r3
    82ae:	4158      	adcs	r0, r3
}
    82b0:	4770      	bx	lr

000082b2 <z_early_memset>:
	(void) memset(dst, c, n);
    82b2:	f7ff bca1 	b.w	7bf8 <memset>

000082b6 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    82b6:	f7ff bc94 	b.w	7be2 <memcpy>

000082ba <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    82ba:	f3ef 8005 	mrs	r0, IPSR
}
    82be:	3800      	subs	r0, #0
    82c0:	bf18      	it	ne
    82c2:	2001      	movne	r0, #1
    82c4:	4770      	bx	lr

000082c6 <z_impl_k_thread_name_set>:
}
    82c6:	f06f 0057 	mvn.w	r0, #87	; 0x57
    82ca:	4770      	bx	lr

000082cc <k_thread_name_get>:
}
    82cc:	2000      	movs	r0, #0
    82ce:	4770      	bx	lr

000082d0 <z_impl_k_thread_start>:
	z_sched_start(thread);
    82d0:	f7fe bb7c 	b.w	69cc <z_sched_start>

000082d4 <z_pm_save_idle_exit>:
{
    82d4:	b508      	push	{r3, lr}
	pm_system_resume();
    82d6:	f7f9 ffb7 	bl	2248 <pm_system_resume>
}
    82da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    82de:	f7ff be0d 	b.w	7efc <sys_clock_idle_exit>

000082e2 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    82e2:	f990 300e 	ldrsb.w	r3, [r0, #14]
    82e6:	428b      	cmp	r3, r1
    82e8:	d001      	beq.n	82ee <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    82ea:	f7fe bbdf 	b.w	6aac <z_set_prio>
}
    82ee:	2000      	movs	r0, #0
    82f0:	4770      	bx	lr

000082f2 <z_impl_k_mutex_init>:
{
    82f2:	4603      	mov	r3, r0
	mutex->owner = NULL;
    82f4:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    82f6:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
    82fa:	e9c3 3300 	strd	r3, r3, [r3]
}
    82fe:	4770      	bx	lr

00008300 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    8300:	b13a      	cbz	r2, 8312 <z_impl_k_sem_init+0x12>
    8302:	428a      	cmp	r2, r1
    8304:	d305      	bcc.n	8312 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    8306:	e9c0 1202 	strd	r1, r2, [r0, #8]
    830a:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    830e:	2000      	movs	r0, #0
    8310:	4770      	bx	lr
		return -EINVAL;
    8312:	f06f 0015 	mvn.w	r0, #21
}
    8316:	4770      	bx	lr

00008318 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    8318:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    831a:	2301      	movs	r3, #1
    831c:	408b      	lsls	r3, r1
    831e:	ea22 0303 	bic.w	r3, r2, r3
    8322:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    8324:	fa22 f001 	lsr.w	r0, r2, r1
}
    8328:	f000 0001 	and.w	r0, r0, #1
    832c:	4770      	bx	lr

0000832e <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    832e:	b120      	cbz	r0, 833a <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    8330:	2200      	movs	r2, #0
    8332:	4611      	mov	r1, r2
    8334:	3088      	adds	r0, #136	; 0x88
    8336:	f000 b91e 	b.w	8576 <z_sched_wake>
}
    833a:	4770      	bx	lr

0000833c <work_timeout>:
{
    833c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    833e:	4604      	mov	r4, r0
	__asm__ volatile(
    8340:	f04f 0320 	mov.w	r3, #32
    8344:	f3ef 8511 	mrs	r5, BASEPRI
    8348:	f383 8812 	msr	BASEPRI_MAX, r3
    834c:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    8350:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    8352:	f1a0 0610 	sub.w	r6, r0, #16
    8356:	2103      	movs	r1, #3
    8358:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    835a:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    835c:	f7ff ffdc 	bl	8318 <flag_test_and_clear>
    8360:	b128      	cbz	r0, 836e <work_timeout+0x32>
		queue = dw->queue;
    8362:	69a3      	ldr	r3, [r4, #24]
    8364:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    8366:	a901      	add	r1, sp, #4
    8368:	4630      	mov	r0, r6
    836a:	f7fe f933 	bl	65d4 <submit_to_queue_locked>
	__asm__ volatile(
    836e:	f385 8811 	msr	BASEPRI, r5
    8372:	f3bf 8f6f 	isb	sy
}
    8376:	b002      	add	sp, #8
    8378:	bd70      	pop	{r4, r5, r6, pc}

0000837a <k_work_init>:
{
    837a:	b538      	push	{r3, r4, r5, lr}
    837c:	4604      	mov	r4, r0
    837e:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    8380:	2210      	movs	r2, #16
    8382:	2100      	movs	r1, #0
    8384:	f7ff fc38 	bl	7bf8 <memset>
    8388:	6065      	str	r5, [r4, #4]
}
    838a:	bd38      	pop	{r3, r4, r5, pc}

0000838c <k_work_submit_to_queue>:
{
    838c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    838e:	9001      	str	r0, [sp, #4]
    8390:	4608      	mov	r0, r1
	__asm__ volatile(
    8392:	f04f 0320 	mov.w	r3, #32
    8396:	f3ef 8511 	mrs	r5, BASEPRI
    839a:	f383 8812 	msr	BASEPRI_MAX, r3
    839e:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    83a2:	a901      	add	r1, sp, #4
    83a4:	f7fe f916 	bl	65d4 <submit_to_queue_locked>
    83a8:	4604      	mov	r4, r0
	__asm__ volatile(
    83aa:	f385 8811 	msr	BASEPRI, r5
    83ae:	f3bf 8f6f 	isb	sy
	if (ret > 0) {
    83b2:	2800      	cmp	r0, #0
    83b4:	dd09      	ble.n	83ca <k_work_submit_to_queue+0x3e>
	__asm__ volatile(
    83b6:	f04f 0320 	mov.w	r3, #32
    83ba:	f3ef 8011 	mrs	r0, BASEPRI
    83be:	f383 8812 	msr	BASEPRI_MAX, r3
    83c2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    83c6:	f000 f831 	bl	842c <z_reschedule_irqlock>
}
    83ca:	4620      	mov	r0, r4
    83cc:	b003      	add	sp, #12
    83ce:	bd30      	pop	{r4, r5, pc}

000083d0 <k_work_init_delayable>:
{
    83d0:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    83d2:	2230      	movs	r2, #48	; 0x30
{
    83d4:	4604      	mov	r4, r0
    83d6:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    83d8:	2100      	movs	r1, #0
    83da:	f7ff fc0d 	bl	7bf8 <memset>
    83de:	f44f 7380 	mov.w	r3, #256	; 0x100
    83e2:	6065      	str	r5, [r4, #4]
    83e4:	60e3      	str	r3, [r4, #12]
}
    83e6:	bd38      	pop	{r3, r4, r5, pc}

000083e8 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    83e8:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    83ec:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    83ee:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    83f0:	2300      	movs	r3, #0
	node->prev = NULL;
    83f2:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    83f6:	4770      	bx	lr

000083f8 <unpend_thread_no_timeout>:
{
    83f8:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    83fa:	f7ff fff5 	bl	83e8 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    83fe:	7b43      	ldrb	r3, [r0, #13]
    8400:	f023 0302 	bic.w	r3, r3, #2
    8404:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    8406:	2300      	movs	r3, #0
    8408:	6083      	str	r3, [r0, #8]
}
    840a:	bd08      	pop	{r3, pc}

0000840c <z_unpend_thread_no_timeout>:
{
    840c:	b508      	push	{r3, lr}
    840e:	f04f 0320 	mov.w	r3, #32
    8412:	f3ef 8111 	mrs	r1, BASEPRI
    8416:	f383 8812 	msr	BASEPRI_MAX, r3
    841a:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    841e:	f7ff ffeb 	bl	83f8 <unpend_thread_no_timeout>
	__asm__ volatile(
    8422:	f381 8811 	msr	BASEPRI, r1
    8426:	f3bf 8f6f 	isb	sy
}
    842a:	bd08      	pop	{r3, pc}

0000842c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    842c:	4603      	mov	r3, r0
    842e:	b920      	cbnz	r0, 843a <z_reschedule_irqlock+0xe>
    8430:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    8434:	b90a      	cbnz	r2, 843a <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    8436:	f7fa b915 	b.w	2664 <arch_swap>
    843a:	f383 8811 	msr	BASEPRI, r3
    843e:	f3bf 8f6f 	isb	sy
}
    8442:	4770      	bx	lr

00008444 <z_reschedule_unlocked>:
	__asm__ volatile(
    8444:	f04f 0320 	mov.w	r3, #32
    8448:	f3ef 8011 	mrs	r0, BASEPRI
    844c:	f383 8812 	msr	BASEPRI_MAX, r3
    8450:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    8454:	f7ff bfea 	b.w	842c <z_reschedule_irqlock>

00008458 <z_priq_dumb_best>:
{
    8458:	4603      	mov	r3, r0
	return list->head == list;
    845a:	6800      	ldr	r0, [r0, #0]
}
    845c:	4283      	cmp	r3, r0
    845e:	bf08      	it	eq
    8460:	2000      	moveq	r0, #0
    8462:	4770      	bx	lr

00008464 <z_ready_thread>:
{
    8464:	b510      	push	{r4, lr}
    8466:	f04f 0320 	mov.w	r3, #32
    846a:	f3ef 8411 	mrs	r4, BASEPRI
    846e:	f383 8812 	msr	BASEPRI_MAX, r3
    8472:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    8476:	f7fe fa73 	bl	6960 <ready_thread>
	__asm__ volatile(
    847a:	f384 8811 	msr	BASEPRI, r4
    847e:	f3bf 8f6f 	isb	sy
}
    8482:	bd10      	pop	{r4, pc}

00008484 <z_thread_timeout>:
{
    8484:	b510      	push	{r4, lr}
    8486:	4601      	mov	r1, r0
	__asm__ volatile(
    8488:	f04f 0320 	mov.w	r3, #32
    848c:	f3ef 8411 	mrs	r4, BASEPRI
    8490:	f383 8812 	msr	BASEPRI_MAX, r3
    8494:	f3bf 8f6f 	isb	sy
		if (!killed) {
    8498:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    849c:	f013 0f28 	tst.w	r3, #40	; 0x28
    84a0:	d10d      	bne.n	84be <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    84a2:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    84a6:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    84a8:	b10b      	cbz	r3, 84ae <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    84aa:	f7ff ffa5 	bl	83f8 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    84ae:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    84b2:	f023 0314 	bic.w	r3, r3, #20
    84b6:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    84ba:	f7fe fa51 	bl	6960 <ready_thread>
	__asm__ volatile(
    84be:	f384 8811 	msr	BASEPRI, r4
    84c2:	f3bf 8f6f 	isb	sy
}
    84c6:	bd10      	pop	{r4, pc}

000084c8 <add_to_waitq_locked>:
{
    84c8:	b538      	push	{r3, r4, r5, lr}
    84ca:	4604      	mov	r4, r0
    84cc:	460d      	mov	r5, r1
	unready_thread(thread);
    84ce:	f7fe fa9b 	bl	6a08 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    84d2:	7b63      	ldrb	r3, [r4, #13]
    84d4:	f043 0302 	orr.w	r3, r3, #2
    84d8:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    84da:	b195      	cbz	r5, 8502 <add_to_waitq_locked+0x3a>
    84dc:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    84de:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    84e0:	429d      	cmp	r5, r3
    84e2:	d015      	beq.n	8510 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    84e4:	b1a3      	cbz	r3, 8510 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    84e6:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    84ea:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    84ee:	4291      	cmp	r1, r2
    84f0:	d008      	beq.n	8504 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    84f2:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    84f4:	2a00      	cmp	r2, #0
    84f6:	dd05      	ble.n	8504 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    84f8:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    84fa:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    84fe:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    8500:	605c      	str	r4, [r3, #4]
}
    8502:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    8504:	686a      	ldr	r2, [r5, #4]
    8506:	4293      	cmp	r3, r2
    8508:	d002      	beq.n	8510 <add_to_waitq_locked+0x48>
    850a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    850c:	2b00      	cmp	r3, #0
    850e:	d1ec      	bne.n	84ea <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    8510:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    8512:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    8516:	601c      	str	r4, [r3, #0]
	list->tail = node;
    8518:	606c      	str	r4, [r5, #4]
}
    851a:	e7f2      	b.n	8502 <add_to_waitq_locked+0x3a>

0000851c <z_unpend1_no_timeout>:
{
    851c:	b510      	push	{r4, lr}
	__asm__ volatile(
    851e:	f04f 0320 	mov.w	r3, #32
    8522:	f3ef 8411 	mrs	r4, BASEPRI
    8526:	f383 8812 	msr	BASEPRI_MAX, r3
    852a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    852e:	f7ff ff93 	bl	8458 <z_priq_dumb_best>
		if (thread != NULL) {
    8532:	4601      	mov	r1, r0
    8534:	b108      	cbz	r0, 853a <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    8536:	f7ff ff5f 	bl	83f8 <unpend_thread_no_timeout>
	__asm__ volatile(
    853a:	f384 8811 	msr	BASEPRI, r4
    853e:	f3bf 8f6f 	isb	sy
}
    8542:	4608      	mov	r0, r1
    8544:	bd10      	pop	{r4, pc}

00008546 <z_unpend_first_thread>:
{
    8546:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8548:	f04f 0320 	mov.w	r3, #32
    854c:	f3ef 8511 	mrs	r5, BASEPRI
    8550:	f383 8812 	msr	BASEPRI_MAX, r3
    8554:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    8558:	f7ff ff7e 	bl	8458 <z_priq_dumb_best>
		if (thread != NULL) {
    855c:	4604      	mov	r4, r0
    855e:	b120      	cbz	r0, 856a <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    8560:	f7ff ff4a 	bl	83f8 <unpend_thread_no_timeout>
    8564:	3018      	adds	r0, #24
    8566:	f000 f823 	bl	85b0 <z_abort_timeout>
	__asm__ volatile(
    856a:	f385 8811 	msr	BASEPRI, r5
    856e:	f3bf 8f6f 	isb	sy
}
    8572:	4620      	mov	r0, r4
    8574:	bd38      	pop	{r3, r4, r5, pc}

00008576 <z_sched_wake>:
{
    8576:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8578:	f04f 0320 	mov.w	r3, #32
    857c:	f3ef 8511 	mrs	r5, BASEPRI
    8580:	f383 8812 	msr	BASEPRI_MAX, r3
    8584:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    8588:	f7ff ff66 	bl	8458 <z_priq_dumb_best>
		if (thread != NULL) {
    858c:	4604      	mov	r4, r0
    858e:	b150      	cbz	r0, 85a6 <z_sched_wake+0x30>
    8590:	6781      	str	r1, [r0, #120]	; 0x78
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    8592:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    8594:	f7ff ff30 	bl	83f8 <unpend_thread_no_timeout>
    8598:	3018      	adds	r0, #24
    859a:	f000 f809 	bl	85b0 <z_abort_timeout>
			ready_thread(thread);
    859e:	4620      	mov	r0, r4
    85a0:	f7fe f9de 	bl	6960 <ready_thread>
			ret = true;
    85a4:	2001      	movs	r0, #1
	__asm__ volatile(
    85a6:	f385 8811 	msr	BASEPRI, r5
    85aa:	f3bf 8f6f 	isb	sy
}
    85ae:	bd38      	pop	{r3, r4, r5, pc}

000085b0 <z_abort_timeout>:
{
    85b0:	b510      	push	{r4, lr}
	__asm__ volatile(
    85b2:	f04f 0220 	mov.w	r2, #32
    85b6:	f3ef 8411 	mrs	r4, BASEPRI
    85ba:	f382 8812 	msr	BASEPRI_MAX, r2
    85be:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    85c2:	6803      	ldr	r3, [r0, #0]
    85c4:	b13b      	cbz	r3, 85d6 <z_abort_timeout+0x26>
			remove_timeout(to);
    85c6:	f7fe fc69 	bl	6e9c <remove_timeout>
			ret = 0;
    85ca:	2000      	movs	r0, #0
	__asm__ volatile(
    85cc:	f384 8811 	msr	BASEPRI, r4
    85d0:	f3bf 8f6f 	isb	sy
}
    85d4:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    85d6:	f06f 0015 	mvn.w	r0, #21
    85da:	e7f7      	b.n	85cc <z_abort_timeout+0x1c>

000085dc <z_get_next_timeout_expiry>:
{
    85dc:	b510      	push	{r4, lr}
	__asm__ volatile(
    85de:	f04f 0320 	mov.w	r3, #32
    85e2:	f3ef 8411 	mrs	r4, BASEPRI
    85e6:	f383 8812 	msr	BASEPRI_MAX, r3
    85ea:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    85ee:	f7fe fc2f 	bl	6e50 <next_timeout>
	__asm__ volatile(
    85f2:	f384 8811 	msr	BASEPRI, r4
    85f6:	f3bf 8f6f 	isb	sy
}
    85fa:	bd10      	pop	{r4, pc}

000085fc <z_set_timeout_expiry>:
{
    85fc:	b570      	push	{r4, r5, r6, lr}
    85fe:	4604      	mov	r4, r0
    8600:	460d      	mov	r5, r1
	__asm__ volatile(
    8602:	f04f 0320 	mov.w	r3, #32
    8606:	f3ef 8611 	mrs	r6, BASEPRI
    860a:	f383 8812 	msr	BASEPRI_MAX, r3
    860e:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    8612:	f7fe fc1d 	bl	6e50 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    8616:	2801      	cmp	r0, #1
    8618:	dd05      	ble.n	8626 <z_set_timeout_expiry+0x2a>
    861a:	42a0      	cmp	r0, r4
    861c:	db03      	blt.n	8626 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    861e:	4629      	mov	r1, r5
    8620:	4620      	mov	r0, r4
    8622:	f7fb fe55 	bl	42d0 <sys_clock_set_timeout>
	__asm__ volatile(
    8626:	f386 8811 	msr	BASEPRI, r6
    862a:	f3bf 8f6f 	isb	sy
}
    862e:	bd70      	pop	{r4, r5, r6, pc}

00008630 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    8630:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    8632:	f7fe fd23 	bl	707c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    8636:	bd08      	pop	{r3, pc}

00008638 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    8638:	b108      	cbz	r0, 863e <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    863a:	f7fa bd35 	b.w	30a8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    863e:	4770      	bx	lr

00008640 <k_timer_init>:
	timer->status = 0U;
    8640:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    8642:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    8646:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    864a:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    864e:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    8652:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    8654:	6343      	str	r3, [r0, #52]	; 0x34
}
    8656:	4770      	bx	lr

00008658 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    8658:	b510      	push	{r4, lr}
    865a:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    865c:	f7ff ffa8 	bl	85b0 <z_abort_timeout>

	if (inactive) {
    8660:	b9b0      	cbnz	r0, 8690 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    8662:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8664:	b10b      	cbz	r3, 866a <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    8666:	4620      	mov	r0, r4
    8668:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    866a:	f104 0018 	add.w	r0, r4, #24
    866e:	f7ff ff55 	bl	851c <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    8672:	b168      	cbz	r0, 8690 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    8674:	f7ff fef6 	bl	8464 <z_ready_thread>
	__asm__ volatile(
    8678:	f04f 0320 	mov.w	r3, #32
    867c:	f3ef 8011 	mrs	r0, BASEPRI
    8680:	f383 8812 	msr	BASEPRI_MAX, r3
    8684:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    8688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    868c:	f7ff bece 	b.w	842c <z_reschedule_irqlock>
    8690:	bd10      	pop	{r4, pc}

00008692 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    8692:	4770      	bx	lr

00008694 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    8694:	f7fc bca4 	b.w	4fe0 <SystemInit>
