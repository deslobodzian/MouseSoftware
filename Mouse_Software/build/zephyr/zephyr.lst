
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	40 38 00 20 19 51 00 00 ad ca 00 00 ed 50 00 00     @8. .Q.......P..
  10:	ed 50 00 00 ed 50 00 00 ed 50 00 00 00 00 00 00     .P...P...P......
	...
  2c:	41 4a 00 00 ed 50 00 00 00 00 00 00 ed 49 00 00     AJ...P.......I..
  3c:	ed 50 00 00                                         .P..

00000040 <_irq_vector_table>:
  40:	f1 4a 00 00 95 75 00 00 f1 4a 00 00 f1 4a 00 00     .J...u...J...J..
  50:	f1 4a 00 00 f1 4a 00 00 f1 4a 00 00 f1 4a 00 00     .J...J...J...J..
  60:	f1 4a 00 00 f1 4a 00 00 65 95 00 00 f1 4a 00 00     .J...J..e....J..
  70:	f1 4a 00 00 f1 4a 00 00 f1 4a 00 00 f1 4a 00 00     .J...J...J...J..
  80:	f1 4a 00 00 f1 4a 00 00 f1 4a 00 00 f1 4a 00 00     .J...J...J...J..
  90:	7d 77 00 00 f1 4a 00 00 f1 4a 00 00 f1 4a 00 00     }w...J...J...J..
  a0:	f1 4a 00 00 f1 4a 00 00 f1 4a 00 00 f1 4a 00 00     .J...J...J...J..
  b0:	f1 4a 00 00 f1 4a 00 00 f1 4a 00 00 f1 4a 00 00     .J...J...J...J..
  c0:	f1 4a 00 00 f1 4a 00 00 f1 4a 00 00 f1 4a 00 00     .J...J...J...J..
  d0:	f1 4a 00 00 f1 4a 00 00 f1 4a 00 00 f1 4a 00 00     .J...J...J...J..

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295
      f0:	f04f 30ff 	movne.w	r0, #4294967295
      f4:	f000 b80c 	b.w	110 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f904 	bl	30c <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__aeabi_idiv0>:
     110:	4770      	bx	lr
     112:	bf00      	nop

00000114 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>:
     114:	b570      	push	{r4, r5, r6, lr}
     116:	4c17      	ldr	r4, [pc, #92]	; (174 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x7>)
     118:	7860      	ldrb	r0, [r4, #1]
     11a:	2800      	cmp	r0, #0
     11c:	d123      	bne.n	166 <__data_size+0x22>
     11e:	2001      	movs	r0, #1
     120:	7060      	strb	r0, [r4, #1]
     122:	f000 fa61 	bl	5e8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>
     126:	f06f 0527 	mvn.w	r5, #39	; 0x27
     12a:	b928      	cbnz	r0, 138 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     12c:	f000 fa72 	bl	614 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>
     130:	b910      	cbnz	r0, 138 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x24>
     132:	f000 fa79 	bl	628 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>
     136:	b120      	cbz	r0, 142 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA+0x2e>
     138:	480f      	ldr	r0, [pc, #60]	; (178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>)
     13a:	6060      	str	r0, [r4, #4]
     13c:	70a5      	strb	r5, [r4, #2]
     13e:	2008      	movs	r0, #8
     140:	e010      	b.n	164 <__data_size+0x20>
     142:	f000 fa33 	bl	5ac <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>
     146:	b940      	cbnz	r0, 15a <__data_size+0x16>
     148:	f000 fa3a 	bl	5c0 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>
     14c:	b928      	cbnz	r0, 15a <__data_size+0x16>
     14e:	f000 fa41 	bl	5d4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>
     152:	b910      	cbnz	r0, 15a <__data_size+0x16>
     154:	f000 fa52 	bl	5fc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>
     158:	b130      	cbz	r0, 168 <__data_size+0x24>
     15a:	4807      	ldr	r0, [pc, #28]	; (178 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xb>)
     15c:	3031      	adds	r0, #49	; 0x31
     15e:	6060      	str	r0, [r4, #4]
     160:	70a5      	strb	r5, [r4, #2]
     162:	2004      	movs	r0, #4
     164:	70e0      	strb	r0, [r4, #3]
     166:	bd70      	pop	{r4, r5, r6, pc}
     168:	f240 113f 	movw	r1, #319	; 0x13f
     16c:	2074      	movs	r0, #116	; 0x74
     16e:	f000 f855 	bl	21c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>
     172:	0000      	.short	0x0000
     174:	20000000 	.word	0x20000000
     178:	000006d4 	.word	0x000006d4

0000017c <mpsl_tx_power_radio_supported_power_adjust>:
     17c:	4a06      	ldr	r2, [pc, #24]	; (198 <mpsl_tx_power_radio_supported_power_adjust+0x1c>)
     17e:	b500      	push	{lr}
     180:	f992 2003 	ldrsb.w	r2, [r2, #3]
     184:	4290      	cmp	r0, r2
     186:	db01      	blt.n	18c <mpsl_tx_power_radio_supported_power_adjust+0x10>
     188:	4610      	mov	r0, r2
     18a:	bd00      	pop	{pc}
     18c:	f000 f808 	bl	1a0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>
     190:	4902      	ldr	r1, [pc, #8]	; (19c <mpsl_tx_power_radio_supported_power_adjust+0x20>)
     192:	5608      	ldrsb	r0, [r1, r0]
     194:	bd00      	pop	{pc}
     196:	0000      	.short	0x0000
     198:	20000000 	.word	0x20000000
     19c:	000006c6 	.word	0x000006c6

000001a0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ>:
     1a0:	4602      	mov	r2, r0
     1a2:	4813      	ldr	r0, [pc, #76]	; (1f0 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x50>)
     1a4:	b510      	push	{r4, lr}
     1a6:	f990 3003 	ldrsb.w	r3, [r0, #3]
     1aa:	429a      	cmp	r2, r3
     1ac:	db01      	blt.n	1b2 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x12>
     1ae:	200d      	movs	r0, #13
     1b0:	bd10      	pop	{r4, pc}
     1b2:	f990 3002 	ldrsb.w	r3, [r0, #2]
     1b6:	429a      	cmp	r2, r3
     1b8:	dc01      	bgt.n	1be <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1e>
     1ba:	2000      	movs	r0, #0
     1bc:	bd10      	pop	{r4, pc}
     1be:	b101      	cbz	r1, 1c2 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x22>
     1c0:	2101      	movs	r1, #1
     1c2:	1ad4      	subs	r4, r2, r3
     1c4:	6843      	ldr	r3, [r0, #4]
     1c6:	5d18      	ldrb	r0, [r3, r4]
     1c8:	4c0a      	ldr	r4, [pc, #40]	; (1f4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
     1ca:	5624      	ldrsb	r4, [r4, r0]
     1cc:	4294      	cmp	r4, r2
     1ce:	d0f5      	beq.n	1bc <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
     1d0:	4c08      	ldr	r4, [pc, #32]	; (1f4 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x54>)
     1d2:	4408      	add	r0, r1
     1d4:	343f      	adds	r4, #63	; 0x3f
     1d6:	b2c0      	uxtb	r0, r0
     1d8:	b2d2      	uxtb	r2, r2
     1da:	42a3      	cmp	r3, r4
     1dc:	d1ee      	bne.n	1bc <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
     1de:	2900      	cmp	r1, #0
     1e0:	d0ec      	beq.n	1bc <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
     1e2:	2a01      	cmp	r2, #1
     1e4:	d001      	beq.n	1ea <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x4a>
     1e6:	2a02      	cmp	r2, #2
     1e8:	d1e8      	bne.n	1bc <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x1c>
     1ea:	1c40      	adds	r0, r0, #1
     1ec:	b2c0      	uxtb	r0, r0
     1ee:	bd10      	pop	{r4, pc}
     1f0:	20000000 	.word	0x20000000
     1f4:	000006c6 	.word	0x000006c6
     1f8:	f3bf 8f4f 	dsb	sy
     1fc:	4805      	ldr	r0, [pc, #20]	; (214 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x74>)
     1fe:	6801      	ldr	r1, [r0, #0]
     200:	4a05      	ldr	r2, [pc, #20]	; (218 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x78>)
     202:	f401 61e0 	and.w	r1, r1, #1792	; 0x700
     206:	4311      	orrs	r1, r2
     208:	6001      	str	r1, [r0, #0]
     20a:	f3bf 8f4f 	dsb	sy
     20e:	bf00      	nop
     210:	e7fd      	b.n	20e <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x6e>
     212:	0000      	.short	0x0000
     214:	e000ed0c 	.word	0xe000ed0c
     218:	05fa0004 	.word	0x05fa0004

0000021c <sym_S2UAPMFVIQXDUOA6CV7GJMB33TYHEUH5D6LHO5Q>:
     21c:	b50e      	push	{r1, r2, r3, lr}
     21e:	b672      	cpsid	i
     220:	4a0f      	ldr	r2, [pc, #60]	; (260 <CONFIG_USB_DEVICE_PID+0x40>)
     222:	6855      	ldr	r5, [r2, #4]
     224:	b1d5      	cbz	r5, 25c <CONFIG_USB_DEVICE_PID+0x3c>
     226:	2200      	movs	r2, #0
     228:	4603      	mov	r3, r0
     22a:	466e      	mov	r6, sp
     22c:	240a      	movs	r4, #10
     22e:	e003      	b.n	238 <CONFIG_USB_DEVICE_PID+0x18>
     230:	fbb0 f0f4 	udiv	r0, r0, r4
     234:	1c52      	adds	r2, r2, #1
     236:	b2d2      	uxtb	r2, r2
     238:	2800      	cmp	r0, #0
     23a:	d1f9      	bne.n	230 <CONFIG_USB_DEVICE_PID+0x10>
     23c:	54b0      	strb	r0, [r6, r2]
     23e:	e009      	b.n	254 <CONFIG_USB_DEVICE_PID+0x34>
     240:	fbb3 f0f4 	udiv	r0, r3, r4
     244:	fb04 3010 	mls	r0, r4, r0, r3
     248:	fbb3 f3f4 	udiv	r3, r3, r4
     24c:	1e52      	subs	r2, r2, #1
     24e:	b2d2      	uxtb	r2, r2
     250:	3030      	adds	r0, #48	; 0x30
     252:	54b0      	strb	r0, [r6, r2]
     254:	2a00      	cmp	r2, #0
     256:	d1f3      	bne.n	240 <CONFIG_USB_DEVICE_PID+0x20>
     258:	4630      	mov	r0, r6
     25a:	47a8      	blx	r5
     25c:	f7ff ffcc 	bl	1f8 <sym_VWOYI7XCNXBFVPWSS6WFJ2CWKPJYCMRRQTU7QWQ+0x58>
     260:	20000008 	.word	0x20000008

00000264 <sym_NIQMZN22R7GGCSNM3BZ25GTCR6D457XB3DIUGWA>:
     264:	00000655 0000068d 00000677 00000665     U.......w...e...
     274:	00000671 0000065f 00000653 00000651     q..._...S...Q...
     284:	00000689 0000067d 0000066b 00000659     ....}...k...Y...
     294:	0000064b 00000643 00000647 0000063d     K...C...G...=...

000002a4 <mpsl_fem_deactivate_now>:
     2a4:	4901      	ldr	r1, [pc, #4]	; (2ac <mpsl_fem_deactivate_now+0x8>)
     2a6:	6809      	ldr	r1, [r1, #0]
     2a8:	6989      	ldr	r1, [r1, #24]
     2aa:	4708      	bx	r1
     2ac:	20000010 	.word	0x20000010

000002b0 <mpsl_fem_disable>:
     2b0:	4801      	ldr	r0, [pc, #4]	; (2b8 <mpsl_fem_disable+0x8>)
     2b2:	6800      	ldr	r0, [r0, #0]
     2b4:	6800      	ldr	r0, [r0, #0]
     2b6:	4700      	bx	r0
     2b8:	20000010 	.word	0x20000010

000002bc <mpsl_fem_lna_configuration_clear>:
     2bc:	4801      	ldr	r0, [pc, #4]	; (2c4 <mpsl_fem_lna_configuration_clear+0x8>)
     2be:	6800      	ldr	r0, [r0, #0]
     2c0:	6940      	ldr	r0, [r0, #20]
     2c2:	4700      	bx	r0
     2c4:	20000010 	.word	0x20000010

000002c8 <mpsl_fem_lna_configuration_set>:
     2c8:	4a01      	ldr	r2, [pc, #4]	; (2d0 <mpsl_fem_lna_configuration_set+0x8>)
     2ca:	6812      	ldr	r2, [r2, #0]
     2cc:	68d2      	ldr	r2, [r2, #12]
     2ce:	4710      	bx	r2
     2d0:	20000010 	.word	0x20000010

000002d4 <mpsl_fem_pa_configuration_clear>:
     2d4:	4801      	ldr	r0, [pc, #4]	; (2dc <mpsl_fem_pa_configuration_clear+0x8>)
     2d6:	6800      	ldr	r0, [r0, #0]
     2d8:	6900      	ldr	r0, [r0, #16]
     2da:	4700      	bx	r0
     2dc:	20000010 	.word	0x20000010

000002e0 <mpsl_fem_pa_configuration_set>:
     2e0:	4a01      	ldr	r2, [pc, #4]	; (2e8 <mpsl_fem_pa_configuration_set+0x8>)
     2e2:	6812      	ldr	r2, [r2, #0]
     2e4:	6892      	ldr	r2, [r2, #8]
     2e6:	4710      	bx	r2
     2e8:	20000010 	.word	0x20000010

000002ec <mpsl_fem_pa_gain_set>:
     2ec:	4901      	ldr	r1, [pc, #4]	; (2f4 <mpsl_fem_pa_gain_set+0x8>)
     2ee:	6809      	ldr	r1, [r1, #0]
     2f0:	6a49      	ldr	r1, [r1, #36]	; 0x24
     2f2:	4708      	bx	r1
     2f4:	20000010 	.word	0x20000010

000002f8 <mpsl_fem_tx_power_split>:
     2f8:	b430      	push	{r4, r5}
     2fa:	4c03      	ldr	r4, [pc, #12]	; (308 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x8>)
     2fc:	6824      	ldr	r4, [r4, #0]
     2fe:	6864      	ldr	r4, [r4, #4]
     300:	46a4      	mov	ip, r4
     302:	bc30      	pop	{r4, r5}
     304:	4760      	bx	ip
     306:	0000      	.short	0x0000
     308:	20000010 	.word	0x20000010

0000030c <__udivmoddi4>:
     30c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     310:	4686      	mov	lr, r0
     312:	468c      	mov	ip, r1
     314:	4608      	mov	r0, r1
     316:	9e08      	ldr	r6, [sp, #32]
     318:	4615      	mov	r5, r2
     31a:	4674      	mov	r4, lr
     31c:	4619      	mov	r1, r3
     31e:	2b00      	cmp	r3, #0
     320:	f040 80c2 	bne.w	4a8 <CONFIG_LOG_BUFFER_SIZE+0xa8>
     324:	4285      	cmp	r5, r0
     326:	fab2 f282 	clz	r2, r2
     32a:	d945      	bls.n	3b8 <__udivmoddi4+0xac>
     32c:	b14a      	cbz	r2, 342 <__udivmoddi4+0x36>
     32e:	f1c2 0320 	rsb	r3, r2, #32
     332:	fa00 fc02 	lsl.w	ip, r0, r2
     336:	fa2e f303 	lsr.w	r3, lr, r3
     33a:	4095      	lsls	r5, r2
     33c:	ea43 0c0c 	orr.w	ip, r3, ip
     340:	4094      	lsls	r4, r2
     342:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     346:	b2a8      	uxth	r0, r5
     348:	fbbc f8fe 	udiv	r8, ip, lr
     34c:	0c23      	lsrs	r3, r4, #16
     34e:	fb0e cc18 	mls	ip, lr, r8, ip
     352:	fb08 f900 	mul.w	r9, r8, r0
     356:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
     35a:	4599      	cmp	r9, r3
     35c:	d928      	bls.n	3b0 <__udivmoddi4+0xa4>
     35e:	18eb      	adds	r3, r5, r3
     360:	f108 37ff 	add.w	r7, r8, #4294967295
     364:	d204      	bcs.n	370 <__udivmoddi4+0x64>
     366:	4599      	cmp	r9, r3
     368:	d902      	bls.n	370 <__udivmoddi4+0x64>
     36a:	f1a8 0702 	sub.w	r7, r8, #2
     36e:	442b      	add	r3, r5
     370:	eba3 0309 	sub.w	r3, r3, r9
     374:	b2a4      	uxth	r4, r4
     376:	fbb3 fcfe 	udiv	ip, r3, lr
     37a:	fb0e 331c 	mls	r3, lr, ip, r3
     37e:	fb0c f000 	mul.w	r0, ip, r0
     382:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     386:	42a0      	cmp	r0, r4
     388:	d914      	bls.n	3b4 <__udivmoddi4+0xa8>
     38a:	192c      	adds	r4, r5, r4
     38c:	f10c 33ff 	add.w	r3, ip, #4294967295
     390:	d204      	bcs.n	39c <__udivmoddi4+0x90>
     392:	42a0      	cmp	r0, r4
     394:	d902      	bls.n	39c <__udivmoddi4+0x90>
     396:	f1ac 0302 	sub.w	r3, ip, #2
     39a:	442c      	add	r4, r5
     39c:	1a24      	subs	r4, r4, r0
     39e:	ea43 4007 	orr.w	r0, r3, r7, lsl #16
     3a2:	b11e      	cbz	r6, 3ac <__udivmoddi4+0xa0>
     3a4:	40d4      	lsrs	r4, r2
     3a6:	2300      	movs	r3, #0
     3a8:	6034      	str	r4, [r6, #0]
     3aa:	6073      	str	r3, [r6, #4]
     3ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     3b0:	4647      	mov	r7, r8
     3b2:	e7dd      	b.n	370 <__udivmoddi4+0x64>
     3b4:	4663      	mov	r3, ip
     3b6:	e7f1      	b.n	39c <__udivmoddi4+0x90>
     3b8:	bb92      	cbnz	r2, 420 <CONFIG_LOG_BUFFER_SIZE+0x20>
     3ba:	1b43      	subs	r3, r0, r5
     3bc:	2101      	movs	r1, #1
     3be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     3c2:	b2af      	uxth	r7, r5
     3c4:	fbb3 fcfe 	udiv	ip, r3, lr
     3c8:	0c20      	lsrs	r0, r4, #16
     3ca:	fb0e 331c 	mls	r3, lr, ip, r3
     3ce:	fb0c f807 	mul.w	r8, ip, r7
     3d2:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     3d6:	4598      	cmp	r8, r3
     3d8:	d962      	bls.n	4a0 <CONFIG_LOG_BUFFER_SIZE+0xa0>
     3da:	18eb      	adds	r3, r5, r3
     3dc:	f10c 30ff 	add.w	r0, ip, #4294967295
     3e0:	d204      	bcs.n	3ec <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x4>
     3e2:	4598      	cmp	r8, r3
     3e4:	d902      	bls.n	3ec <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x4>
     3e6:	f1ac 0002 	sub.w	r0, ip, #2
     3ea:	442b      	add	r3, r5
     3ec:	eba3 0308 	sub.w	r3, r3, r8
     3f0:	b2a4      	uxth	r4, r4
     3f2:	fbb3 fcfe 	udiv	ip, r3, lr
     3f6:	fb0e 331c 	mls	r3, lr, ip, r3
     3fa:	fb0c f707 	mul.w	r7, ip, r7
     3fe:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     402:	42a7      	cmp	r7, r4
     404:	d94e      	bls.n	4a4 <CONFIG_LOG_BUFFER_SIZE+0xa4>
     406:	192c      	adds	r4, r5, r4
     408:	f10c 33ff 	add.w	r3, ip, #4294967295
     40c:	d204      	bcs.n	418 <CONFIG_LOG_BUFFER_SIZE+0x18>
     40e:	42a7      	cmp	r7, r4
     410:	d902      	bls.n	418 <CONFIG_LOG_BUFFER_SIZE+0x18>
     412:	f1ac 0302 	sub.w	r3, ip, #2
     416:	442c      	add	r4, r5
     418:	1be4      	subs	r4, r4, r7
     41a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     41e:	e7c0      	b.n	3a2 <__udivmoddi4+0x96>
     420:	f1c2 0320 	rsb	r3, r2, #32
     424:	fa20 f103 	lsr.w	r1, r0, r3
     428:	4095      	lsls	r5, r2
     42a:	4090      	lsls	r0, r2
     42c:	fa2e f303 	lsr.w	r3, lr, r3
     430:	4303      	orrs	r3, r0
     432:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     436:	b2af      	uxth	r7, r5
     438:	fbb1 fcfe 	udiv	ip, r1, lr
     43c:	fb0e 101c 	mls	r0, lr, ip, r1
     440:	0c19      	lsrs	r1, r3, #16
     442:	fb0c f807 	mul.w	r8, ip, r7
     446:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     44a:	4588      	cmp	r8, r1
     44c:	fa04 f402 	lsl.w	r4, r4, r2
     450:	d922      	bls.n	498 <CONFIG_LOG_BUFFER_SIZE+0x98>
     452:	1869      	adds	r1, r5, r1
     454:	f10c 30ff 	add.w	r0, ip, #4294967295
     458:	d204      	bcs.n	464 <CONFIG_LOG_BUFFER_SIZE+0x64>
     45a:	4588      	cmp	r8, r1
     45c:	d902      	bls.n	464 <CONFIG_LOG_BUFFER_SIZE+0x64>
     45e:	f1ac 0002 	sub.w	r0, ip, #2
     462:	4429      	add	r1, r5
     464:	eba1 0108 	sub.w	r1, r1, r8
     468:	b29b      	uxth	r3, r3
     46a:	fbb1 fcfe 	udiv	ip, r1, lr
     46e:	fb0e 111c 	mls	r1, lr, ip, r1
     472:	fb0c f707 	mul.w	r7, ip, r7
     476:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
     47a:	429f      	cmp	r7, r3
     47c:	d90e      	bls.n	49c <CONFIG_LOG_BUFFER_SIZE+0x9c>
     47e:	18eb      	adds	r3, r5, r3
     480:	f10c 31ff 	add.w	r1, ip, #4294967295
     484:	d204      	bcs.n	490 <CONFIG_LOG_BUFFER_SIZE+0x90>
     486:	429f      	cmp	r7, r3
     488:	d902      	bls.n	490 <CONFIG_LOG_BUFFER_SIZE+0x90>
     48a:	f1ac 0102 	sub.w	r1, ip, #2
     48e:	442b      	add	r3, r5
     490:	1bdb      	subs	r3, r3, r7
     492:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
     496:	e792      	b.n	3be <__udivmoddi4+0xb2>
     498:	4660      	mov	r0, ip
     49a:	e7e3      	b.n	464 <CONFIG_LOG_BUFFER_SIZE+0x64>
     49c:	4661      	mov	r1, ip
     49e:	e7f7      	b.n	490 <CONFIG_LOG_BUFFER_SIZE+0x90>
     4a0:	4660      	mov	r0, ip
     4a2:	e7a3      	b.n	3ec <CONFIG_LOG_FAILURE_REPORT_PERIOD+0x4>
     4a4:	4663      	mov	r3, ip
     4a6:	e7b7      	b.n	418 <CONFIG_LOG_BUFFER_SIZE+0x18>
     4a8:	4283      	cmp	r3, r0
     4aa:	d906      	bls.n	4ba <CONFIG_LOG_BUFFER_SIZE+0xba>
     4ac:	b916      	cbnz	r6, 4b4 <CONFIG_LOG_BUFFER_SIZE+0xb4>
     4ae:	2100      	movs	r1, #0
     4b0:	4608      	mov	r0, r1
     4b2:	e77b      	b.n	3ac <__udivmoddi4+0xa0>
     4b4:	e9c6 e000 	strd	lr, r0, [r6]
     4b8:	e7f9      	b.n	4ae <CONFIG_LOG_BUFFER_SIZE+0xae>
     4ba:	fab3 f783 	clz	r7, r3
     4be:	b98f      	cbnz	r7, 4e4 <CONFIG_LOG_BUFFER_SIZE+0xe4>
     4c0:	4283      	cmp	r3, r0
     4c2:	d301      	bcc.n	4c8 <CONFIG_LOG_BUFFER_SIZE+0xc8>
     4c4:	4572      	cmp	r2, lr
     4c6:	d808      	bhi.n	4da <CONFIG_LOG_BUFFER_SIZE+0xda>
     4c8:	ebbe 0402 	subs.w	r4, lr, r2
     4cc:	eb60 0303 	sbc.w	r3, r0, r3
     4d0:	2001      	movs	r0, #1
     4d2:	469c      	mov	ip, r3
     4d4:	b91e      	cbnz	r6, 4de <CONFIG_LOG_BUFFER_SIZE+0xde>
     4d6:	2100      	movs	r1, #0
     4d8:	e768      	b.n	3ac <__udivmoddi4+0xa0>
     4da:	4638      	mov	r0, r7
     4dc:	e7fa      	b.n	4d4 <CONFIG_LOG_BUFFER_SIZE+0xd4>
     4de:	e9c6 4c00 	strd	r4, ip, [r6]
     4e2:	e7f8      	b.n	4d6 <CONFIG_LOG_BUFFER_SIZE+0xd6>
     4e4:	f1c7 0c20 	rsb	ip, r7, #32
     4e8:	40bb      	lsls	r3, r7
     4ea:	fa22 f40c 	lsr.w	r4, r2, ip
     4ee:	431c      	orrs	r4, r3
     4f0:	fa2e f10c 	lsr.w	r1, lr, ip
     4f4:	fa20 f30c 	lsr.w	r3, r0, ip
     4f8:	40b8      	lsls	r0, r7
     4fa:	4301      	orrs	r1, r0
     4fc:	ea4f 4914 	mov.w	r9, r4, lsr #16
     500:	fa0e f507 	lsl.w	r5, lr, r7
     504:	fbb3 f8f9 	udiv	r8, r3, r9
     508:	fa1f fe84 	uxth.w	lr, r4
     50c:	fb09 3018 	mls	r0, r9, r8, r3
     510:	0c0b      	lsrs	r3, r1, #16
     512:	fb08 fa0e 	mul.w	sl, r8, lr
     516:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
     51a:	459a      	cmp	sl, r3
     51c:	fa02 f207 	lsl.w	r2, r2, r7
     520:	d940      	bls.n	5a4 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xbc>
     522:	18e3      	adds	r3, r4, r3
     524:	f108 30ff 	add.w	r0, r8, #4294967295
     528:	d204      	bcs.n	534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>
     52a:	459a      	cmp	sl, r3
     52c:	d902      	bls.n	534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>
     52e:	f1a8 0002 	sub.w	r0, r8, #2
     532:	4423      	add	r3, r4
     534:	eba3 030a 	sub.w	r3, r3, sl
     538:	b289      	uxth	r1, r1
     53a:	fbb3 f8f9 	udiv	r8, r3, r9
     53e:	fb09 3318 	mls	r3, r9, r8, r3
     542:	fb08 fe0e 	mul.w	lr, r8, lr
     546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
     54a:	458e      	cmp	lr, r1
     54c:	d92c      	bls.n	5a8 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0xc0>
     54e:	1861      	adds	r1, r4, r1
     550:	f108 33ff 	add.w	r3, r8, #4294967295
     554:	d204      	bcs.n	560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>
     556:	458e      	cmp	lr, r1
     558:	d902      	bls.n	560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>
     55a:	f1a8 0302 	sub.w	r3, r8, #2
     55e:	4421      	add	r1, r4
     560:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     564:	fba0 9802 	umull	r9, r8, r0, r2
     568:	eba1 010e 	sub.w	r1, r1, lr
     56c:	4541      	cmp	r1, r8
     56e:	46ce      	mov	lr, r9
     570:	4643      	mov	r3, r8
     572:	d302      	bcc.n	57a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x92>
     574:	d106      	bne.n	584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>
     576:	454d      	cmp	r5, r9
     578:	d204      	bcs.n	584 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x9c>
     57a:	ebb9 0e02 	subs.w	lr, r9, r2
     57e:	eb68 0304 	sbc.w	r3, r8, r4
     582:	3801      	subs	r0, #1
     584:	2e00      	cmp	r6, #0
     586:	d0a6      	beq.n	4d6 <CONFIG_LOG_BUFFER_SIZE+0xd6>
     588:	ebb5 020e 	subs.w	r2, r5, lr
     58c:	eb61 0103 	sbc.w	r1, r1, r3
     590:	fa01 fc0c 	lsl.w	ip, r1, ip
     594:	fa22 f307 	lsr.w	r3, r2, r7
     598:	ea4c 0303 	orr.w	r3, ip, r3
     59c:	40f9      	lsrs	r1, r7
     59e:	e9c6 3100 	strd	r3, r1, [r6]
     5a2:	e798      	b.n	4d6 <CONFIG_LOG_BUFFER_SIZE+0xd6>
     5a4:	4640      	mov	r0, r8
     5a6:	e7c5      	b.n	534 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x4c>
     5a8:	4643      	mov	r3, r8
     5aa:	e7d9      	b.n	560 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x78>

000005ac <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA>:
     5ac:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     5b0:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     5b4:	280f      	cmp	r0, #15
     5b6:	d001      	beq.n	5bc <sym_BN6ZO2NBHRGKZ2NRQYWFBXVGKNG6Y5K55UNAWGA+0x10>
     5b8:	2000      	movs	r0, #0
     5ba:	4770      	bx	lr
     5bc:	2001      	movs	r0, #1
     5be:	4770      	bx	lr

000005c0 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY>:
     5c0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     5c4:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     5c8:	280a      	cmp	r0, #10
     5ca:	d001      	beq.n	5d0 <sym_5EMXP3L6SPQSCAJKKRH62ZOKJCCSKLI3WEX2WHY+0x10>
     5cc:	2000      	movs	r0, #0
     5ce:	4770      	bx	lr
     5d0:	2001      	movs	r0, #1
     5d2:	4770      	bx	lr

000005d4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q>:
     5d4:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     5d8:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     5dc:	280e      	cmp	r0, #14
     5de:	d001      	beq.n	5e4 <sym_H2QJCU2ORTYAFBAQQ2FHUYIAZO4HCXEKCQ4SS2Q+0x10>
     5e0:	2000      	movs	r0, #0
     5e2:	4770      	bx	lr
     5e4:	2001      	movs	r0, #1
     5e6:	4770      	bx	lr

000005e8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA>:
     5e8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     5ec:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     5f0:	2810      	cmp	r0, #16
     5f2:	d001      	beq.n	5f8 <sym_SWIBDSDMHUYNCG5ZWLB52J7NETJIUBPCO5IIQFA+0x10>
     5f4:	2000      	movs	r0, #0
     5f6:	4770      	bx	lr
     5f8:	2001      	movs	r0, #1
     5fa:	4770      	bx	lr

000005fc <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ>:
     5fc:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     600:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     604:	2806      	cmp	r0, #6
     606:	d003      	beq.n	610 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
     608:	1c40      	adds	r0, r0, #1
     60a:	d001      	beq.n	610 <sym_QPP3IZFSWHUV4JQ6ODMIVIARPB4PQYUFESV7BRQ+0x14>
     60c:	2000      	movs	r0, #0
     60e:	4770      	bx	lr
     610:	2001      	movs	r0, #1
     612:	4770      	bx	lr

00000614 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA>:
     614:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     618:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     61c:	280d      	cmp	r0, #13
     61e:	d001      	beq.n	624 <sym_6PVOPWDLWTXOTRZZ7LP36TLYTLPTQHNAUQNFHEA+0x10>
     620:	2000      	movs	r0, #0
     622:	4770      	bx	lr
     624:	2001      	movs	r0, #1
     626:	4770      	bx	lr

00000628 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ>:
     628:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
     62c:	f8d0 0130 	ldr.w	r0, [r0, #304]	; 0x130
     630:	2808      	cmp	r0, #8
     632:	d001      	beq.n	638 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x10>
     634:	2000      	movs	r0, #0
     636:	4770      	bx	lr
     638:	2001      	movs	r0, #1
     63a:	4770      	bx	lr
     63c:	f04f 30ff 	mov.w	r0, #4294967295
     640:	4770      	bx	lr
     642:	2000      	movs	r0, #0
     644:	4770      	bx	lr
     646:	2000      	movs	r0, #0
     648:	4770      	bx	lr
     64a:	f04f 30ff 	mov.w	r0, #4294967295
     64e:	4770      	bx	lr
     650:	4770      	bx	lr
     652:	4770      	bx	lr
     654:	2000      	movs	r0, #0
     656:	4770      	bx	lr
     658:	2100      	movs	r1, #0
     65a:	7001      	strb	r1, [r0, #0]
     65c:	4770      	bx	lr
     65e:	f04f 30ff 	mov.w	r0, #4294967295
     662:	4770      	bx	lr
     664:	f04f 30ff 	mov.w	r0, #4294967295
     668:	4770      	bx	lr
     66a:	2100      	movs	r1, #0
     66c:	7001      	strb	r1, [r0, #0]
     66e:	4770      	bx	lr
     670:	f04f 30ff 	mov.w	r0, #4294967295
     674:	4770      	bx	lr
     676:	f04f 30ff 	mov.w	r0, #4294967295
     67a:	4770      	bx	lr
     67c:	7800      	ldrb	r0, [r0, #0]
     67e:	2800      	cmp	r0, #0
     680:	d001      	beq.n	686 <sym_USR4MDT6VMTQLOGKNN4MALBZ3GJPD2KOEY4HFAQ+0x5e>
     682:	f06f 0015 	mvn.w	r0, #21
     686:	4770      	bx	lr
     688:	2000      	movs	r0, #0
     68a:	4770      	bx	lr
     68c:	2200      	movs	r2, #0
     68e:	f000 b802 	b.w	696 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>

00000692 <mpsl_fem_init>:
     692:	f7ff bd3f 	b.w	114 <sym_JBMIQXYLJQQB56KLSIZ2WVKBMEMRZHLRBGLEPTA>

00000696 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA>:
     696:	b570      	push	{r4, r5, r6, lr}
     698:	4614      	mov	r4, r2
     69a:	460d      	mov	r5, r1
     69c:	1b00      	subs	r0, r0, r4
     69e:	f06f 017f 	mvn.w	r1, #127	; 0x7f
     6a2:	4288      	cmp	r0, r1
     6a4:	da01      	bge.n	6aa <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x14>
     6a6:	4608      	mov	r0, r1
     6a8:	e002      	b.n	6b0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
     6aa:	287f      	cmp	r0, #127	; 0x7f
     6ac:	dd00      	ble.n	6b0 <sym_PX4SKXGNX25XLMGGWQM65ZRFHI6666YGHL6AYMA+0x1a>
     6ae:	207f      	movs	r0, #127	; 0x7f
     6b0:	4619      	mov	r1, r3
     6b2:	b240      	sxtb	r0, r0
     6b4:	f7ff fd62 	bl	17c <mpsl_tx_power_radio_supported_power_adjust>
     6b8:	7028      	strb	r0, [r5, #0]
     6ba:	706c      	strb	r4, [r5, #1]
     6bc:	2100      	movs	r1, #0
     6be:	4420      	add	r0, r4
     6c0:	70a9      	strb	r1, [r5, #2]
     6c2:	b240      	sxtb	r0, r0
     6c4:	bd70      	pop	{r4, r5, r6, pc}
     6c6:	ecd8      	.short	0xecd8
     6c8:	fcf8f4f0 	.word	0xfcf8f4f0
     6cc:	04030200 	.word	0x04030200
     6d0:	08070605 	.word	0x08070605
	...
     6e8:	01010101 	.word	0x01010101
     6ec:	02020202 	.word	0x02020202
     6f0:	03030303 	.word	0x03030303
     6f4:	04040404 	.word	0x04040404
     6f8:	05050505 	.word	0x05050505
     6fc:	08070606 	.word	0x08070606
     700:	0c0b0a09 	.word	0x0c0b0a09
     704:	0000000d 	.word	0x0000000d
	...
     718:	01010100 	.word	0x01010100
     71c:	02020201 	.word	0x02020201
     720:	03030302 	.word	0x03030302
     724:	04040403 	.word	0x04040403
     728:	05050504 	.word	0x05050504
     72c:	06060605 	.word	0x06060605
     730:	00000908 	.word	0x00000908

00000734 <configure_callback.constprop.0>:
    //     button_states = states;
    // }
    // k_sem_give(&button_sem);
}

static void configure_callback(const struct gpio_dt_spec *spec, gpio_callback_handler_t handler, struct gpio_callback *cb) {
     734:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
     738:	4604      	mov	r4, r0
    const struct device *gpio = spec->port;
     73a:	6805      	ldr	r5, [r0, #0]
	gpio_pin_t pin = spec->pin;
     73c:	7906      	ldrb	r6, [r0, #4]
static void configure_callback(const struct gpio_dt_spec *spec, gpio_callback_handler_t handler, struct gpio_callback *cb) {
     73e:	af00      	add	r7, sp, #0
     740:	4688      	mov	r8, r1
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
     742:	4628      	mov	r0, r5
     744:	f00c fdf6 	bl	d334 <z_device_is_ready>
	int ret;
	if (gpio == NULL) {
		/* Optional GPIO is missing. */
		// return 0;
	}
	if (!device_is_ready(gpio)) {
     748:	4603      	mov	r3, r0
     74a:	b990      	cbnz	r0, 772 <configure_callback.constprop.0+0x3e>
		LOG_ERR("GPIO port %s is not ready", gpio->name);
     74c:	46e9      	mov	r9, sp
     74e:	b088      	sub	sp, #32
     750:	6829      	ldr	r1, [r5, #0]
     752:	466a      	mov	r2, sp
     754:	4847      	ldr	r0, [pc, #284]	; (874 <__z_interrupt_stack_SIZEOF+0x34>)
     756:	e9c2 0105 	strd	r0, r1, [r2, #20]
     75a:	f44f 7100 	mov.w	r1, #512	; 0x200
     75e:	8391      	strh	r1, [r2, #28]
     760:	4945      	ldr	r1, [pc, #276]	; (878 <__z_interrupt_stack_SIZEOF+0x38>)
     762:	f842 1f10 	str.w	r1, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_static_create(source, desc, package, data);
     766:	4845      	ldr	r0, [pc, #276]	; (87c <__z_interrupt_stack_SIZEOF+0x3c>)
     768:	f44f 51e2 	mov.w	r1, #7232	; 0x1c40
     76c:	f002 fc88 	bl	3080 <z_impl_z_log_msg_static_create>
     770:	46cd      	mov	sp, r9
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
				  spec->dt_flags | extra_flags);
     772:	88e3      	ldrh	r3, [r4, #6]
	return gpio_pin_configure(spec->port,
     774:	6820      	ldr	r0, [r4, #0]
				  spec->pin,
     776:	7921      	ldrb	r1, [r4, #4]
	return gpio_pin_configure(spec->port,
     778:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
	struct gpio_driver_data *data =
     77c:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
     780:	f8d0 9008 	ldr.w	r9, [r0, #8]
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
     784:	f013 0f01 	tst.w	r3, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
     788:	f04f 0c01 	mov.w	ip, #1
     78c:	f8de 3000 	ldr.w	r3, [lr]
     790:	fa0c fc01 	lsl.w	ip, ip, r1
     794:	bf14      	ite	ne
     796:	ea4c 0303 	orrne.w	r3, ip, r3
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
     79a:	ea23 030c 	biceq.w	r3, r3, ip
     79e:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
     7a2:	f8d9 3000 	ldr.w	r3, [r9]
     7a6:	4798      	blx	r3
		// return -ENODEV;
	}
	ret = gpio_pin_configure_dt(spec, GPIO_INPUT);
	if (ret < 0) {
     7a8:	2800      	cmp	r0, #0
     7aa:	da15      	bge.n	7d8 <configure_callback.constprop.0+0xa4>
		LOG_ERR("Failed to configure port %s pin %u, error: %d",
     7ac:	46e9      	mov	r9, sp
     7ae:	b08a      	sub	sp, #40	; 0x28
     7b0:	682b      	ldr	r3, [r5, #0]
     7b2:	466a      	mov	r2, sp
     7b4:	4932      	ldr	r1, [pc, #200]	; (880 <__z_interrupt_stack_SIZEOF+0x40>)
     7b6:	e9c2 1305 	strd	r1, r3, [r2, #20]
     7ba:	f44f 7300 	mov.w	r3, #512	; 0x200
     7be:	8493      	strh	r3, [r2, #36]	; 0x24
     7c0:	4b30      	ldr	r3, [pc, #192]	; (884 <__z_interrupt_stack_SIZEOF+0x44>)
     7c2:	e9c2 6007 	strd	r6, r0, [r2, #28]
     7c6:	f842 3f10 	str.w	r3, [r2, #16]!
     7ca:	482c      	ldr	r0, [pc, #176]	; (87c <__z_interrupt_stack_SIZEOF+0x3c>)
     7cc:	2300      	movs	r3, #0
     7ce:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
     7d2:	f002 fc55 	bl	3080 <z_impl_z_log_msg_static_create>
     7d6:	46cd      	mov	sp, r9
			gpio->name, pin, ret);
		// return ret;
	}
	ret = gpio_pin_get(gpio, pin);
     7d8:	4631      	mov	r1, r6
     7da:	4628      	mov	r0, r5
     7dc:	f00b f9d2 	bl	bb84 <gpio_pin_get>
	if (ret < 0) {
     7e0:	2800      	cmp	r0, #0
     7e2:	da15      	bge.n	810 <CONFIG_ISR_STACK_SIZE+0x10>
		LOG_ERR("Failed to get the state of port %s pin %u, error: %d",
     7e4:	46e9      	mov	r9, sp
     7e6:	b08a      	sub	sp, #40	; 0x28
     7e8:	682b      	ldr	r3, [r5, #0]
     7ea:	466a      	mov	r2, sp
     7ec:	4926      	ldr	r1, [pc, #152]	; (888 <__z_interrupt_stack_SIZEOF+0x48>)
     7ee:	e9c2 1305 	strd	r1, r3, [r2, #20]
     7f2:	f44f 7300 	mov.w	r3, #512	; 0x200
     7f6:	8493      	strh	r3, [r2, #36]	; 0x24
     7f8:	4b22      	ldr	r3, [pc, #136]	; (884 <__z_interrupt_stack_SIZEOF+0x44>)
     7fa:	e9c2 6007 	strd	r6, r0, [r2, #28]
     7fe:	f842 3f10 	str.w	r3, [r2, #16]!
     802:	481e      	ldr	r0, [pc, #120]	; (87c <__z_interrupt_stack_SIZEOF+0x3c>)
     804:	2300      	movs	r3, #0
     806:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
     80a:	f002 fc39 	bl	3080 <z_impl_z_log_msg_static_create>
     80e:	46cd      	mov	sp, r9
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
     810:	4b1e      	ldr	r3, [pc, #120]	; (88c <__z_interrupt_stack_SIZEOF+0x4c>)
     812:	f8c8 3004 	str.w	r3, [r8, #4]
			gpio->name, pin, ret);
		// return ret;
	}

	gpio_init_callback(cb, button_callback, BIT(pin));
     816:	2201      	movs	r2, #1
     818:	fa02 f306 	lsl.w	r3, r2, r6
	callback->pin_mask = pin_mask;
     81c:	f8c8 3008 	str.w	r3, [r8, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
     820:	68ab      	ldr	r3, [r5, #8]
     822:	69db      	ldr	r3, [r3, #28]
     824:	b113      	cbz	r3, 82c <CONFIG_ISR_STACK_SIZE+0x2c>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
     826:	4641      	mov	r1, r8
     828:	4628      	mov	r0, r5
     82a:	4798      	blx	r3
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
     82c:	6820      	ldr	r0, [r4, #0]
     82e:	7921      	ldrb	r1, [r4, #4]
	return api->pin_interrupt_configure(port, pin, mode, trig);
     830:	6883      	ldr	r3, [r0, #8]
     832:	f04f 72a0 	mov.w	r2, #20971520	; 0x1400000
     836:	699c      	ldr	r4, [r3, #24]
     838:	f04f 63c0 	mov.w	r3, #100663296	; 0x6000000
     83c:	47a0      	blx	r4
	ret = gpio_add_callback(gpio, cb);
	
	ret = gpio_pin_interrupt_configure_dt(spec, GPIO_INT_EDGE_BOTH);
	if (ret < 0) {
     83e:	2800      	cmp	r0, #0
     840:	da15      	bge.n	86e <__z_interrupt_stack_SIZEOF+0x2e>
		LOG_ERR("Failed to configure interrupt for port %s pin %u, "
     842:	466c      	mov	r4, sp
     844:	b08a      	sub	sp, #40	; 0x28
     846:	682b      	ldr	r3, [r5, #0]
     848:	466a      	mov	r2, sp
     84a:	4911      	ldr	r1, [pc, #68]	; (890 <__z_interrupt_stack_SIZEOF+0x50>)
     84c:	e9c2 1305 	strd	r1, r3, [r2, #20]
     850:	f44f 7300 	mov.w	r3, #512	; 0x200
     854:	8493      	strh	r3, [r2, #36]	; 0x24
     856:	4b0b      	ldr	r3, [pc, #44]	; (884 <__z_interrupt_stack_SIZEOF+0x44>)
     858:	e9c2 6007 	strd	r6, r0, [r2, #28]
     85c:	f842 3f10 	str.w	r3, [r2, #16]!
     860:	4806      	ldr	r0, [pc, #24]	; (87c <__z_interrupt_stack_SIZEOF+0x3c>)
     862:	2300      	movs	r3, #0
     864:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
     868:	f002 fc0a 	bl	3080 <z_impl_z_log_msg_static_create>
     86c:	46a5      	mov	sp, r4
		// return ret;
	}

    LOG_DBG("Set up button at %s pin %d", gpio->name, pin);
	// return 0;
}
     86e:	46bd      	mov	sp, r7
     870:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
     874:	0000df50 	.word	0x0000df50
     878:	01000003 	.word	0x01000003
     87c:	0000db74 	.word	0x0000db74
     880:	0000df6a 	.word	0x0000df6a
     884:	01000005 	.word	0x01000005
     888:	0000df98 	.word	0x0000df98
     88c:	0000bbb5 	.word	0x0000bbb5
     890:	0000dfcd 	.word	0x0000dfcd

00000894 <init_buttons>:
bool init_buttons(void) {
     894:	b510      	push	{r4, lr}
		union { uintptr_t x; unsigned int val; } parm2 = { .val = limit };
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     896:	2201      	movs	r2, #1
    configure_callback(&mouse_one, button_callback, &callbacks[0]);
     898:	4c0f      	ldr	r4, [pc, #60]	; (8d8 <init_buttons+0x44>)
     89a:	4810      	ldr	r0, [pc, #64]	; (8dc <init_buttons+0x48>)
     89c:	4611      	mov	r1, r2
     89e:	f00c fe3b 	bl	d518 <z_impl_k_sem_init>
     8a2:	4621      	mov	r1, r4
     8a4:	480e      	ldr	r0, [pc, #56]	; (8e0 <init_buttons+0x4c>)
     8a6:	f7ff ff45 	bl	734 <configure_callback.constprop.0>
    configure_callback(&mouse_two, button_callback, &callbacks[1]);
     8aa:	f104 010c 	add.w	r1, r4, #12
     8ae:	480d      	ldr	r0, [pc, #52]	; (8e4 <init_buttons+0x50>)
     8b0:	f7ff ff40 	bl	734 <configure_callback.constprop.0>
    configure_callback(&mouse_three, button_callback, &callbacks[2]);
     8b4:	f104 0118 	add.w	r1, r4, #24
     8b8:	480b      	ldr	r0, [pc, #44]	; (8e8 <init_buttons+0x54>)
     8ba:	f7ff ff3b 	bl	734 <configure_callback.constprop.0>
    configure_callback(&mouse_four, button_callback, &callbacks[3]);
     8be:	f104 0124 	add.w	r1, r4, #36	; 0x24
     8c2:	480a      	ldr	r0, [pc, #40]	; (8ec <init_buttons+0x58>)
     8c4:	f7ff ff36 	bl	734 <configure_callback.constprop.0>
    configure_callback(&mouse_five, button_callback, &callbacks[4]);
     8c8:	4809      	ldr	r0, [pc, #36]	; (8f0 <init_buttons+0x5c>)
     8ca:	f104 0130 	add.w	r1, r4, #48	; 0x30
     8ce:	f7ff ff31 	bl	734 <configure_callback.constprop.0>
}
     8d2:	2001      	movs	r0, #1
     8d4:	bd10      	pop	{r4, pc}
     8d6:	bf00      	nop
     8d8:	20000b80 	.word	0x20000b80
     8dc:	20000bbc 	.word	0x20000bbc
     8e0:	0000dc98 	.word	0x0000dc98
     8e4:	0000dc90 	.word	0x0000dc90
     8e8:	0000dc88 	.word	0x0000dc88
     8ec:	0000dc80 	.word	0x0000dc80
     8f0:	0000dc78 	.word	0x0000dc78

000008f4 <fetch_buttons>:

void fetch_buttons(uint8_t* button_array) {
     8f4:	b510      	push	{r4, lr}
     8f6:	4604      	mov	r4, r0
    button_array[0] = gpio_pin_get_dt(&mouse_one);
     8f8:	480a      	ldr	r0, [pc, #40]	; (924 <fetch_buttons+0x30>)
     8fa:	f00b f957 	bl	bbac <gpio_pin_get_dt>
     8fe:	7020      	strb	r0, [r4, #0]
    button_array[1] = gpio_pin_get_dt(&mouse_two);
     900:	4809      	ldr	r0, [pc, #36]	; (928 <fetch_buttons+0x34>)
     902:	f00b f953 	bl	bbac <gpio_pin_get_dt>
     906:	7060      	strb	r0, [r4, #1]
    button_array[2] = gpio_pin_get_dt(&mouse_three);
     908:	4808      	ldr	r0, [pc, #32]	; (92c <fetch_buttons+0x38>)
     90a:	f00b f94f 	bl	bbac <gpio_pin_get_dt>
     90e:	70a0      	strb	r0, [r4, #2]
    button_array[3] = gpio_pin_get_dt(&mouse_four);
     910:	4807      	ldr	r0, [pc, #28]	; (930 <fetch_buttons+0x3c>)
     912:	f00b f94b 	bl	bbac <gpio_pin_get_dt>
     916:	70e0      	strb	r0, [r4, #3]
    button_array[4] = gpio_pin_get_dt(&mouse_five);
     918:	4806      	ldr	r0, [pc, #24]	; (934 <fetch_buttons+0x40>)
     91a:	f00b f947 	bl	bbac <gpio_pin_get_dt>
     91e:	7120      	strb	r0, [r4, #4]
}
     920:	bd10      	pop	{r4, pc}
     922:	bf00      	nop
     924:	0000dc98 	.word	0x0000dc98
     928:	0000dc90 	.word	0x0000dc90
     92c:	0000dc88 	.word	0x0000dc88
     930:	0000dc80 	.word	0x0000dc80
     934:	0000dc78 	.word	0x0000dc78

00000938 <main>:
void test_func(void) {
    motion_info_t motion = read_motion();
    // LOG_INF("dx: %i, dy: %i", motion.dx, motion.dy);
}

void main(void) {
     938:	b510      	push	{r4, lr}
     93a:	b086      	sub	sp, #24
    LOG_INF("Starting mouse");
     93c:	4b10      	ldr	r3, [pc, #64]	; (980 <main+0x48>)
     93e:	9305      	str	r3, [sp, #20]
     940:	2402      	movs	r4, #2
     942:	9404      	str	r4, [sp, #16]
     944:	2300      	movs	r3, #0
     946:	aa04      	add	r2, sp, #16
     948:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     94c:	480d      	ldr	r0, [pc, #52]	; (984 <main+0x4c>)
     94e:	f002 fb97 	bl	3080 <z_impl_z_log_msg_static_create>
    // init_pmw3360_sensor();
    // while(!is_pmw3360_ready()){
    //     k_sleep(K_MSEC(1));
    // }
    init_mouse();
     952:	f000 f83d 	bl	9d0 <init_mouse>
    LOG_INF("Mouse Initialized");
     956:	4b0c      	ldr	r3, [pc, #48]	; (988 <main+0x50>)
     958:	e9cd 4304 	strd	r4, r3, [sp, #16]
     95c:	2300      	movs	r3, #0
     95e:	aa04      	add	r2, sp, #16
     960:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     964:	4807      	ldr	r0, [pc, #28]	; (984 <main+0x4c>)
     966:	f002 fb8b 	bl	3080 <z_impl_z_log_msg_static_create>

    // uint32_t time = 0;
    set_wireless(true);
     96a:	2001      	movs	r0, #1
     96c:	f000 f8ca 	bl	b04 <set_wireless>
	return z_impl_k_sleep(timeout);
     970:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     974:	2100      	movs	r1, #0
     976:	f00a fe25 	bl	b5c4 <z_impl_k_sleep>
    k_sleep(K_MSEC(1000));
    for (;;) {
        // time = measure_function_time(test_func);
        // LOG_INF("Time taken by function: %u microseconds", time);
        // k_sleep(K_MSEC(100));
        handle_mouse_transmission();
     97a:	f000 f8c9 	bl	b10 <handle_mouse_transmission>
    for (;;) {
     97e:	e7fc      	b.n	97a <main+0x42>
     980:	0000e011 	.word	0x0000e011
     984:	0000dbb4 	.word	0x0000dbb4
     988:	0000e020 	.word	0x0000e020

0000098c <configure_pmw3360>:

uint16_t get_cpi(void) {
    return get_pmw3360_cpi();
}

bool configure_pmw3360(void) {
     98c:	b510      	push	{r4, lr}
     98e:	b086      	sub	sp, #24
    return is_pmw3360_ready();
     990:	f000 fcd2 	bl	1338 <is_pmw3360_ready>
    if (!is_motion_sensor_ready()) {
     994:	4604      	mov	r4, r0
     996:	b178      	cbz	r0, 9b8 <configure_pmw3360+0x2c>
        return false;
    }

    if (set_cpi(800)) {
     998:	f44f 7048 	mov.w	r0, #800	; 0x320
     99c:	f00b f90d 	bl	bbba <set_cpi>
     9a0:	b170      	cbz	r0, 9c0 <configure_pmw3360+0x34>
        LOG_ERR("Failed to set CPI");
     9a2:	4b09      	ldr	r3, [pc, #36]	; (9c8 <configure_pmw3360+0x3c>)
     9a4:	9305      	str	r3, [sp, #20]
     9a6:	2302      	movs	r3, #2
     9a8:	9304      	str	r3, [sp, #16]
     9aa:	4808      	ldr	r0, [pc, #32]	; (9cc <configure_pmw3360+0x40>)
     9ac:	2300      	movs	r3, #0
     9ae:	aa04      	add	r2, sp, #16
     9b0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     9b4:	f002 fb64 	bl	3080 <z_impl_z_log_msg_static_create>
        return false;
     9b8:	2400      	movs	r4, #0
        LOG_ERR("Failed to get CPI");
        return false;
    }

    return true;
}
     9ba:	4620      	mov	r0, r4
     9bc:	b006      	add	sp, #24
     9be:	bd10      	pop	{r4, pc}
    return get_pmw3360_cpi();
     9c0:	f000 fdd2 	bl	1568 <get_pmw3360_cpi>
    return true;
     9c4:	e7f9      	b.n	9ba <configure_pmw3360+0x2e>
     9c6:	bf00      	nop
     9c8:	0000e037 	.word	0x0000e037
     9cc:	0000dbbc 	.word	0x0000dbbc

000009d0 <init_mouse>:
K_FIFO_DEFINE(mouse_fifo);

// static mouse_t mouse_data;
static mouse_config_t mouse_cfg;

int init_mouse() {
     9d0:	b510      	push	{r4, lr}
     9d2:	b086      	sub	sp, #24
    while (!init_pmw3360_sensor()) {
     9d4:	f00b f8ef 	bl	bbb6 <init_pmw3360_sensor>
     9d8:	2800      	cmp	r0, #0
     9da:	d05f      	beq.n	a9c <init_mouse+0xcc>
        LOG_DBG("PMW3360 sensor not ready");
        k_sleep(K_MSEC(1));
    }
    LOG_INF("PMW3360 sensor is ready");
     9dc:	4b41      	ldr	r3, [pc, #260]	; (ae4 <init_mouse+0x114>)
     9de:	9305      	str	r3, [sp, #20]
     9e0:	2302      	movs	r3, #2
     9e2:	9304      	str	r3, [sp, #16]
     9e4:	4840      	ldr	r0, [pc, #256]	; (ae8 <init_mouse+0x118>)
     9e6:	2300      	movs	r3, #0
     9e8:	aa04      	add	r2, sp, #16
     9ea:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     9ee:	f002 fb47 	bl	3080 <z_impl_z_log_msg_static_create>
    while (!is_pmw3360_ready()) {
     9f2:	f000 fca1 	bl	1338 <is_pmw3360_ready>
     9f6:	2800      	cmp	r0, #0
     9f8:	d055      	beq.n	aa6 <init_mouse+0xd6>
        LOG_DBG("PMW3360 not ready");
        k_sleep(K_MSEC(1));
    }
    LOG_INF("PMW3360 is ready");
     9fa:	4b3c      	ldr	r3, [pc, #240]	; (aec <init_mouse+0x11c>)
     9fc:	9305      	str	r3, [sp, #20]
     9fe:	2302      	movs	r3, #2
     a00:	9304      	str	r3, [sp, #16]
     a02:	4839      	ldr	r0, [pc, #228]	; (ae8 <init_mouse+0x118>)
     a04:	2300      	movs	r3, #0
     a06:	aa04      	add	r2, sp, #16
     a08:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     a0c:	f002 fb38 	bl	3080 <z_impl_z_log_msg_static_create>

    while (!init_buttons()) {
     a10:	f7ff ff40 	bl	894 <init_buttons>
     a14:	2800      	cmp	r0, #0
     a16:	d04b      	beq.n	ab0 <init_mouse+0xe0>
        LOG_DBG("Buttons not ready");
        k_sleep(K_MSEC(1));
    }
    LOG_INF("Buttons are ready");
     a18:	4b35      	ldr	r3, [pc, #212]	; (af0 <init_mouse+0x120>)
     a1a:	9305      	str	r3, [sp, #20]
     a1c:	2302      	movs	r3, #2
     a1e:	9304      	str	r3, [sp, #16]
     a20:	4831      	ldr	r0, [pc, #196]	; (ae8 <init_mouse+0x118>)
     a22:	2300      	movs	r3, #0
     a24:	aa04      	add	r2, sp, #16
     a26:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     a2a:	f002 fb29 	bl	3080 <z_impl_z_log_msg_static_create>

    while (init_wheel() != 0) {
     a2e:	f000 ffcf 	bl	19d0 <init_wheel>
     a32:	4603      	mov	r3, r0
     a34:	2800      	cmp	r0, #0
     a36:	d140      	bne.n	aba <init_mouse+0xea>
        LOG_DBG("Wheel not ready");
        k_sleep(K_MSEC(1));
    }
    LOG_INF("Wheel Encoder is ready");
     a38:	4a2e      	ldr	r2, [pc, #184]	; (af4 <init_mouse+0x124>)
     a3a:	9205      	str	r2, [sp, #20]
     a3c:	2202      	movs	r2, #2
     a3e:	9204      	str	r2, [sp, #16]
     a40:	4829      	ldr	r0, [pc, #164]	; (ae8 <init_mouse+0x118>)
     a42:	aa04      	add	r2, sp, #16
     a44:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     a48:	f002 fb1a 	bl	3080 <z_impl_z_log_msg_static_create>
    while (!configure_pmw3360()) {
     a4c:	f7ff ff9e 	bl	98c <configure_pmw3360>
     a50:	2800      	cmp	r0, #0
     a52:	d037      	beq.n	ac4 <init_mouse+0xf4>
        LOG_DBG("Configuring PMW3360 is not ready");
        k_sleep(K_MSEC(1));
    }

    while(init_usb() != 0) {
     a54:	f000 ff3c 	bl	18d0 <init_usb>
     a58:	4603      	mov	r3, r0
     a5a:	2800      	cmp	r0, #0
     a5c:	d137      	bne.n	ace <init_mouse+0xfe>
        LOG_DBG("Configuring USB is not ready");
        k_sleep(K_MSEC(1));
    }
    LOG_INF("USB is ready");
     a5e:	4a26      	ldr	r2, [pc, #152]	; (af8 <init_mouse+0x128>)
     a60:	9205      	str	r2, [sp, #20]
     a62:	2202      	movs	r2, #2
     a64:	9204      	str	r2, [sp, #16]
     a66:	4820      	ldr	r0, [pc, #128]	; (ae8 <init_mouse+0x118>)
     a68:	aa04      	add	r2, sp, #16
     a6a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     a6e:	f002 fb07 	bl	3080 <z_impl_z_log_msg_static_create>
    while (init_transceiver() != 0) {
     a72:	f000 fe79 	bl	1768 <init_transceiver>
     a76:	4604      	mov	r4, r0
     a78:	bb70      	cbnz	r0, ad8 <init_mouse+0x108>
        LOG_DBG("Configuring ESB is not ready");
        k_sleep(K_MSEC(1));
    }
    LOG_INF("ESB is ready");
     a7a:	4b20      	ldr	r3, [pc, #128]	; (afc <init_mouse+0x12c>)
     a7c:	9305      	str	r3, [sp, #20]
     a7e:	2302      	movs	r3, #2
     a80:	9304      	str	r3, [sp, #16]
     a82:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     a86:	4603      	mov	r3, r0
     a88:	aa04      	add	r2, sp, #16
     a8a:	4817      	ldr	r0, [pc, #92]	; (ae8 <init_mouse+0x118>)
     a8c:	f002 faf8 	bl	3080 <z_impl_z_log_msg_static_create>
	z_impl_k_queue_init(queue);
     a90:	481b      	ldr	r0, [pc, #108]	; (b00 <init_mouse+0x130>)
     a92:	f00c fd2e 	bl	d4f2 <z_impl_k_queue_init>

    k_fifo_init(&mouse_fifo);
    return 0;
}
     a96:	4620      	mov	r0, r4
     a98:	b006      	add	sp, #24
     a9a:	bd10      	pop	{r4, pc}
        k_sleep(K_MSEC(1));
     a9c:	2021      	movs	r0, #33	; 0x21
     a9e:	2100      	movs	r1, #0
     aa0:	f00b f8a4 	bl	bbec <k_sleep.constprop.0.isra.0>
     aa4:	e796      	b.n	9d4 <init_mouse+0x4>
        k_sleep(K_MSEC(1));
     aa6:	2021      	movs	r0, #33	; 0x21
     aa8:	2100      	movs	r1, #0
     aaa:	f00b f89f 	bl	bbec <k_sleep.constprop.0.isra.0>
     aae:	e7a0      	b.n	9f2 <init_mouse+0x22>
        k_sleep(K_MSEC(1));
     ab0:	2021      	movs	r0, #33	; 0x21
     ab2:	2100      	movs	r1, #0
     ab4:	f00b f89a 	bl	bbec <k_sleep.constprop.0.isra.0>
     ab8:	e7aa      	b.n	a10 <init_mouse+0x40>
        k_sleep(K_MSEC(1));
     aba:	2021      	movs	r0, #33	; 0x21
     abc:	2100      	movs	r1, #0
     abe:	f00b f895 	bl	bbec <k_sleep.constprop.0.isra.0>
     ac2:	e7b4      	b.n	a2e <init_mouse+0x5e>
        k_sleep(K_MSEC(1));
     ac4:	2021      	movs	r0, #33	; 0x21
     ac6:	2100      	movs	r1, #0
     ac8:	f00b f890 	bl	bbec <k_sleep.constprop.0.isra.0>
     acc:	e7be      	b.n	a4c <init_mouse+0x7c>
        k_sleep(K_MSEC(1));
     ace:	2021      	movs	r0, #33	; 0x21
     ad0:	2100      	movs	r1, #0
     ad2:	f00b f88b 	bl	bbec <k_sleep.constprop.0.isra.0>
     ad6:	e7bd      	b.n	a54 <init_mouse+0x84>
        k_sleep(K_MSEC(1));
     ad8:	2021      	movs	r0, #33	; 0x21
     ada:	2100      	movs	r1, #0
     adc:	f00b f886 	bl	bbec <k_sleep.constprop.0.isra.0>
     ae0:	e7c7      	b.n	a72 <init_mouse+0xa2>
     ae2:	bf00      	nop
     ae4:	0000e057 	.word	0x0000e057
     ae8:	0000dbc4 	.word	0x0000dbc4
     aec:	0000e06f 	.word	0x0000e06f
     af0:	0000e080 	.word	0x0000e080
     af4:	0000e092 	.word	0x0000e092
     af8:	0000e0a9 	.word	0x0000e0a9
     afc:	0000e0b6 	.word	0x0000e0b6
     b00:	20000320 	.word	0x20000320

00000b04 <set_wireless>:

void set_wireless(bool wireless) {
    mouse_cfg.is_wireless = wireless;
     b04:	4b01      	ldr	r3, [pc, #4]	; (b0c <set_wireless+0x8>)
     b06:	7098      	strb	r0, [r3, #2]
}
     b08:	4770      	bx	lr
     b0a:	bf00      	nop
     b0c:	20001c08 	.word	0x20001c08

00000b10 <handle_mouse_transmission>:
    mouse->wheel_data = fetch_wheel_data();
    mouse->motion_info = read_motion();
    fetch_buttons(mouse->button_states);
}

void handle_mouse_transmission(void) {
     b10:	b5f0      	push	{r4, r5, r6, r7, lr}
     b12:	b085      	sub	sp, #20
    static message_t messages[2];
    static int current_message_index = 0;

    mouse_t new_data;
    update_mouse(&new_data);
     b14:	ad01      	add	r5, sp, #4
     b16:	4628      	mov	r0, r5
     b18:	f00b f86a 	bl	bbf0 <update_mouse>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
     b1c:	4c26      	ldr	r4, [pc, #152]	; (bb8 <handle_mouse_transmission+0xa8>)

    if (!k_fifo_is_empty(&mouse_fifo)) {
     b1e:	6823      	ldr	r3, [r4, #0]
     b20:	b36b      	cbz	r3, b7e <handle_mouse_transmission+0x6e>
	return z_impl_k_queue_get(queue, timeout);
     b22:	2200      	movs	r2, #0
     b24:	2300      	movs	r3, #0
     b26:	4620      	mov	r0, r4
     b28:	f00a f896 	bl	ac58 <z_impl_k_queue_get>
        message_t *prev_message = k_fifo_get(&mouse_fifo, K_NO_WAIT);
        prev_message->data.motion_info.dx += new_data.motion_info.dx;
     b2c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
     b30:	88c3      	ldrh	r3, [r0, #6]
     b32:	4413      	add	r3, r2
     b34:	80c3      	strh	r3, [r0, #6]
        prev_message->data.motion_info.dy += new_data.motion_info.dy;
     b36:	f8bd 2008 	ldrh.w	r2, [sp, #8]
     b3a:	8903      	ldrh	r3, [r0, #8]
     b3c:	4413      	add	r3, r2
     b3e:	8103      	strh	r3, [r0, #8]
        prev_message->data.wheel_data.rotation += new_data.wheel_data.rotation;
     b40:	f8bd 2004 	ldrh.w	r2, [sp, #4]
     b44:	8883      	ldrh	r3, [r0, #4]
     b46:	4413      	add	r3, r2
     b48:	4601      	mov	r1, r0
     b4a:	8083      	strh	r3, [r0, #4]
        k_fifo_put(&mouse_fifo, prev_message);
     b4c:	4620      	mov	r0, r4
     b4e:	f00c fcd8 	bl	d502 <k_queue_append>
    } else {
        messages[current_message_index].data = new_data;
        k_fifo_put(&mouse_fifo, &messages[current_message_index]);
        current_message_index = (current_message_index + 1) % 2;
    }
    bool line_busy = mouse_cfg.is_wireless ? esb_line_busy() : usb_line_busy();
     b52:	4d1a      	ldr	r5, [pc, #104]	; (bbc <handle_mouse_transmission+0xac>)
     b54:	78ab      	ldrb	r3, [r5, #2]
     b56:	b343      	cbz	r3, baa <handle_mouse_transmission+0x9a>
     b58:	f000 fea6 	bl	18a8 <esb_line_busy>
    if (!line_busy && !k_fifo_is_empty(&mouse_fifo)) {
     b5c:	b968      	cbnz	r0, b7a <handle_mouse_transmission+0x6a>
     b5e:	6823      	ldr	r3, [r4, #0]
     b60:	b15b      	cbz	r3, b7a <handle_mouse_transmission+0x6a>
     b62:	2300      	movs	r3, #0
     b64:	4814      	ldr	r0, [pc, #80]	; (bb8 <handle_mouse_transmission+0xa8>)
     b66:	2200      	movs	r2, #0
     b68:	f00a f876 	bl	ac58 <z_impl_k_queue_get>
        message_t *message_to_send = k_fifo_get(&mouse_fifo, K_NO_WAIT);
        if (mouse_cfg.is_wireless) {
     b6c:	78ab      	ldrb	r3, [r5, #2]
     b6e:	3004      	adds	r0, #4
     b70:	b1f3      	cbz	r3, bb0 <handle_mouse_transmission+0xa0>
            esb_create_message(&message_to_send->data);
     b72:	f000 fe3f 	bl	17f4 <esb_create_message>
            write_message();
     b76:	f000 fe6b 	bl	1850 <write_message>
        } else {
            hid_write(&message_to_send->data);
        }
    }
}
     b7a:	b005      	add	sp, #20
     b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        messages[current_message_index].data = new_data;
     b7e:	4e10      	ldr	r6, [pc, #64]	; (bc0 <handle_mouse_transmission+0xb0>)
     b80:	4b10      	ldr	r3, [pc, #64]	; (bc4 <handle_mouse_transmission+0xb4>)
     b82:	6832      	ldr	r2, [r6, #0]
     b84:	eb03 1302 	add.w	r3, r3, r2, lsl #4
     b88:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
     b8c:	1d1f      	adds	r7, r3, #4
     b8e:	e887 0007 	stmia.w	r7, {r0, r1, r2}
        k_fifo_put(&mouse_fifo, &messages[current_message_index]);
     b92:	4619      	mov	r1, r3
     b94:	4620      	mov	r0, r4
     b96:	f00c fcb4 	bl	d502 <k_queue_append>
        current_message_index = (current_message_index + 1) % 2;
     b9a:	6833      	ldr	r3, [r6, #0]
     b9c:	3301      	adds	r3, #1
     b9e:	f003 0301 	and.w	r3, r3, #1
     ba2:	bf48      	it	mi
     ba4:	425b      	negmi	r3, r3
     ba6:	6033      	str	r3, [r6, #0]
     ba8:	e7d3      	b.n	b52 <handle_mouse_transmission+0x42>
    bool line_busy = mouse_cfg.is_wireless ? esb_line_busy() : usb_line_busy();
     baa:	f000 ff0b 	bl	19c4 <usb_line_busy>
     bae:	e7d5      	b.n	b5c <handle_mouse_transmission+0x4c>
            hid_write(&message_to_send->data);
     bb0:	f000 fed2 	bl	1958 <hid_write>
}
     bb4:	e7e1      	b.n	b7a <handle_mouse_transmission+0x6a>
     bb6:	bf00      	nop
     bb8:	20000320 	.word	0x20000320
     bbc:	20001c08 	.word	0x20001c08
     bc0:	20000bec 	.word	0x20000bec
     bc4:	20000bcc 	.word	0x20000bcc

00000bc8 <pmw3360_async_init>:
					    PMW3360_REST2_DOWNSHIFT_TIME_MS);
	}

	return err;
}
static void pmw3360_async_init(struct k_work *work) {
     bc8:	b5f0      	push	{r4, r5, r6, r7, lr}
     bca:	b087      	sub	sp, #28
	pmw3360_data_t *data = CONTAINER_OF(work, pmw3360_data_t, init_work);

	LOG_DBG("PMW3360 async init step %d", data->async_init_step);
     bcc:	466d      	mov	r5, sp
static void pmw3360_async_init(struct k_work *work) {
     bce:	af00      	add	r7, sp, #0
	LOG_DBG("PMW3360 async init step %d", data->async_init_step);
     bd0:	b088      	sub	sp, #32
     bd2:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
static void pmw3360_async_init(struct k_work *work) {
     bd6:	4604      	mov	r4, r0
	LOG_DBG("PMW3360 async init step %d", data->async_init_step);
     bd8:	466a      	mov	r2, sp
     bda:	4927      	ldr	r1, [pc, #156]	; (c78 <pmw3360_async_init+0xb0>)
     bdc:	6151      	str	r1, [r2, #20]
     bde:	4927      	ldr	r1, [pc, #156]	; (c7c <pmw3360_async_init+0xb4>)
     be0:	4827      	ldr	r0, [pc, #156]	; (c80 <pmw3360_async_init+0xb8>)
     be2:	e9c2 1306 	strd	r1, r3, [r2, #24]
     be6:	2304      	movs	r3, #4
     be8:	f842 3f10 	str.w	r3, [r2, #16]!
     bec:	f44f 5104 	mov.w	r1, #8448	; 0x2100
     bf0:	f00b f810 	bl	bc14 <z_log_msg_static_create.constprop.0>

	data->err = async_init_fn[data->async_init_step]();
     bf4:	4b23      	ldr	r3, [pc, #140]	; (c84 <pmw3360_async_init+0xbc>)
     bf6:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
     bfa:	46ad      	mov	sp, r5
     bfc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
     c00:	4798      	blx	r3
     c02:	4601      	mov	r1, r0
     c04:	6360      	str	r0, [r4, #52]	; 0x34
	if (data->err) {
     c06:	b168      	cbz	r0, c24 <pmw3360_async_init+0x5c>
		LOG_ERR("PMW3360 initialization failed");
     c08:	4b1f      	ldr	r3, [pc, #124]	; (c88 <pmw3360_async_init+0xc0>)
     c0a:	617b      	str	r3, [r7, #20]
     c0c:	2302      	movs	r3, #2
     c0e:	613b      	str	r3, [r7, #16]
     c10:	f107 0210 	add.w	r2, r7, #16
     c14:	f44f 5182 	mov.w	r1, #4160	; 0x1040
	} else {
		data->async_init_step++;

		if (data->async_init_step == ASYNC_INIT_STEP_COUNT) {
			data->ready = true;
			LOG_INF("PMW3360 initialized");
     c18:	4819      	ldr	r0, [pc, #100]	; (c80 <pmw3360_async_init+0xb8>)
     c1a:	f00a fffb 	bl	bc14 <z_log_msg_static_create.constprop.0>
			k_work_schedule(&data->init_work,
					K_MSEC(async_init_delay[
						data->async_init_step]));
		}
	}
}
     c1e:	371c      	adds	r7, #28
     c20:	46bd      	mov	sp, r7
     c22:	bdf0      	pop	{r4, r5, r6, r7, pc}
		data->async_init_step++;
     c24:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
     c28:	3301      	adds	r3, #1
     c2a:	b2db      	uxtb	r3, r3
		if (data->async_init_step == ASYNC_INIT_STEP_COUNT) {
     c2c:	2b05      	cmp	r3, #5
		data->async_init_step++;
     c2e:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
		if (data->async_init_step == ASYNC_INIT_STEP_COUNT) {
     c32:	d10b      	bne.n	c4c <pmw3360_async_init+0x84>
			data->ready = true;
     c34:	2301      	movs	r3, #1
     c36:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
			LOG_INF("PMW3360 initialized");
     c3a:	4b14      	ldr	r3, [pc, #80]	; (c8c <pmw3360_async_init+0xc4>)
     c3c:	617b      	str	r3, [r7, #20]
     c3e:	2302      	movs	r3, #2
     c40:	613b      	str	r3, [r7, #16]
     c42:	f107 0210 	add.w	r2, r7, #16
     c46:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     c4a:	e7e5      	b.n	c18 <pmw3360_async_init+0x50>
					K_MSEC(async_init_delay[
     c4c:	4a10      	ldr	r2, [pc, #64]	; (c90 <pmw3360_async_init+0xc8>)
     c4e:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
     c52:	f44f 4600 	mov.w	r6, #32768	; 0x8000
     c56:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
     c5a:	f240 30e7 	movw	r0, #999	; 0x3e7
     c5e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
     c62:	2300      	movs	r3, #0
     c64:	fbc5 0106 	smlal	r0, r1, r5, r6
     c68:	f7ff fa3a 	bl	e0 <__aeabi_uldivmod>
     c6c:	4602      	mov	r2, r0
     c6e:	460b      	mov	r3, r1
			k_work_schedule(&data->init_work,
     c70:	4620      	mov	r0, r4
     c72:	f00a f9df 	bl	b034 <k_work_schedule>
}
     c76:	e7d2      	b.n	c1e <pmw3360_async_init+0x56>
     c78:	0000e0c3 	.word	0x0000e0c3
     c7c:	0000e538 	.word	0x0000e538
     c80:	0000dbe4 	.word	0x0000dbe4
     c84:	0000dca0 	.word	0x0000dca0
     c88:	0000e0e2 	.word	0x0000e0e2
     c8c:	0000e100 	.word	0x0000e100
     c90:	0000dcb4 	.word	0x0000dcb4

00000c94 <spi_cs_ctrl>:
static int spi_cs_ctrl(bool enable) {
     c94:	b570      	push	{r4, r5, r6, lr}
	const struct gpio_driver_data *const data =
     c96:	4c14      	ldr	r4, [pc, #80]	; (ce8 <spi_cs_ctrl+0x54>)
     c98:	b086      	sub	sp, #24
     c9a:	6926      	ldr	r6, [r4, #16]
	if (!enable) {
     c9c:	4605      	mov	r5, r0
     c9e:	b1d0      	cbz	r0, cd6 <spi_cs_ctrl+0x42>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     ca0:	6833      	ldr	r3, [r6, #0]
     ca2:	065a      	lsls	r2, r3, #25
     ca4:	d41d      	bmi.n	ce2 <spi_cs_ctrl+0x4e>
	return api->port_set_bits_raw(port, pins);
     ca6:	68a3      	ldr	r3, [r4, #8]
     ca8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
     caa:	480f      	ldr	r0, [pc, #60]	; (ce8 <spi_cs_ctrl+0x54>)
     cac:	2140      	movs	r1, #64	; 0x40
     cae:	4798      	blx	r3
     cb0:	4604      	mov	r4, r0
	if (err) {
     cb2:	b148      	cbz	r0, cc8 <spi_cs_ctrl+0x34>
		LOG_ERR("SPI CS ctrl failed");
     cb4:	4b0d      	ldr	r3, [pc, #52]	; (cec <spi_cs_ctrl+0x58>)
     cb6:	9305      	str	r3, [sp, #20]
     cb8:	480d      	ldr	r0, [pc, #52]	; (cf0 <spi_cs_ctrl+0x5c>)
     cba:	2302      	movs	r3, #2
     cbc:	aa04      	add	r2, sp, #16
     cbe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     cc2:	9304      	str	r3, [sp, #16]
     cc4:	f00a ffa6 	bl	bc14 <z_log_msg_static_create.constprop.0>
	if (enable) {
     cc8:	b115      	cbz	r5, cd0 <spi_cs_ctrl+0x3c>
		k_busy_wait(T_NCS_SCLK);
     cca:	2001      	movs	r0, #1
     ccc:	f00a ffa0 	bl	bc10 <k_busy_wait>
}
     cd0:	4620      	mov	r0, r4
     cd2:	b006      	add	sp, #24
     cd4:	bd70      	pop	{r4, r5, r6, pc}
		k_busy_wait(T_NCS_SCLK);
     cd6:	2001      	movs	r0, #1
     cd8:	f00a ff9a 	bl	bc10 <k_busy_wait>
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
     cdc:	6833      	ldr	r3, [r6, #0]
     cde:	065b      	lsls	r3, r3, #25
     ce0:	d4e1      	bmi.n	ca6 <spi_cs_ctrl+0x12>
	return api->port_clear_bits_raw(port, pins);
     ce2:	68a3      	ldr	r3, [r4, #8]
     ce4:	691b      	ldr	r3, [r3, #16]
     ce6:	e7e0      	b.n	caa <spi_cs_ctrl+0x16>
     ce8:	0000dabc 	.word	0x0000dabc
     cec:	0000e114 	.word	0x0000e114
     cf0:	0000dbe4 	.word	0x0000dbe4

00000cf4 <update_cpi>:
static int update_cpi(uint32_t cpi) {
     cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
    if ((cpi > PMW3360_MAX_CPI) || (cpi < PMW3360_MIN_CPI)) {
     cf6:	f1a0 0264 	sub.w	r2, r0, #100	; 0x64
     cfa:	f642 637c 	movw	r3, #11900	; 0x2e7c
static int update_cpi(uint32_t cpi) {
     cfe:	b08d      	sub	sp, #52	; 0x34
    if ((cpi > PMW3360_MAX_CPI) || (cpi < PMW3360_MIN_CPI)) {
     d00:	429a      	cmp	r2, r3
static int update_cpi(uint32_t cpi) {
     d02:	af00      	add	r7, sp, #0
    if ((cpi > PMW3360_MAX_CPI) || (cpi < PMW3360_MIN_CPI)) {
     d04:	d914      	bls.n	d30 <update_cpi+0x3c>
        LOG_ERR("CPI value %u out of range", cpi);
     d06:	466c      	mov	r4, sp
     d08:	b088      	sub	sp, #32
     d0a:	466a      	mov	r2, sp
     d0c:	4b2b      	ldr	r3, [pc, #172]	; (dbc <update_cpi+0xc8>)
     d0e:	e9c2 3005 	strd	r3, r0, [r2, #20]
     d12:	2303      	movs	r3, #3
     d14:	f842 3f10 	str.w	r3, [r2, #16]!
     d18:	4829      	ldr	r0, [pc, #164]	; (dc0 <update_cpi+0xcc>)
     d1a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
     d1e:	f00a ff79 	bl	bc14 <z_log_msg_static_create.constprop.0>
     d22:	46a5      	mov	sp, r4
        return -EINVAL;
     d24:	f06f 0415 	mvn.w	r4, #21
}
     d28:	4620      	mov	r0, r4
     d2a:	3734      	adds	r7, #52	; 0x34
     d2c:	46bd      	mov	sp, r7
     d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LOG_DBG("Setting CPI to %u (reg value 0x%x)", cpi, value);
     d30:	466d      	mov	r5, sp
    uint8_t value = (cpi / 100) - 1;
     d32:	2464      	movs	r4, #100	; 0x64
    LOG_DBG("Setting CPI to %u (reg value 0x%x)", cpi, value);
     d34:	b08a      	sub	sp, #40	; 0x28
    uint8_t value = (cpi / 100) - 1;
     d36:	fbb0 f4f4 	udiv	r4, r0, r4
     d3a:	3c01      	subs	r4, #1
     d3c:	b2e4      	uxtb	r4, r4
    LOG_DBG("Setting CPI to %u (reg value 0x%x)", cpi, value);
     d3e:	466a      	mov	r2, sp
     d40:	4b20      	ldr	r3, [pc, #128]	; (dc4 <update_cpi+0xd0>)
     d42:	6153      	str	r3, [r2, #20]
     d44:	4b20      	ldr	r3, [pc, #128]	; (dc8 <update_cpi+0xd4>)
     d46:	6214      	str	r4, [r2, #32]
     d48:	e9c2 3006 	strd	r3, r0, [r2, #24]
     d4c:	2305      	movs	r3, #5
     d4e:	f842 3f10 	str.w	r3, [r2, #16]!
     d52:	481b      	ldr	r0, [pc, #108]	; (dc0 <update_cpi+0xcc>)
     d54:	f44f 5124 	mov.w	r1, #10496	; 0x2900
     d58:	f00a ff5c 	bl	bc14 <z_log_msg_static_create.constprop.0>
    uint8_t tx_data[] = {reg, value};
     d5c:	238f      	movs	r3, #143	; 0x8f
     d5e:	713b      	strb	r3, [r7, #4]
    nrfx_spim_xfer_desc_t xfer_desc = NRFX_SPIM_XFER_TX(tx_data, sizeof(tx_data));
     d60:	1d3b      	adds	r3, r7, #4
     d62:	60bb      	str	r3, [r7, #8]
     d64:	46ad      	mov	sp, r5
     d66:	2300      	movs	r3, #0
     d68:	2602      	movs	r6, #2
    nrfx_err_t err = spi_cs_ctrl(true); 
     d6a:	2001      	movs	r0, #1
    uint8_t tx_data[] = {reg, value};
     d6c:	717c      	strb	r4, [r7, #5]
    nrfx_spim_xfer_desc_t xfer_desc = NRFX_SPIM_XFER_TX(tx_data, sizeof(tx_data));
     d6e:	e9c7 6303 	strd	r6, r3, [r7, #12]
     d72:	617b      	str	r3, [r7, #20]
    nrfx_err_t err = spi_cs_ctrl(true); 
     d74:	f7ff ff8e 	bl	c94 <spi_cs_ctrl>
    if (err) {
     d78:	4604      	mov	r4, r0
     d7a:	2800      	cmp	r0, #0
     d7c:	d1d4      	bne.n	d28 <update_cpi+0x34>
    err = nrfx_spim_xfer(&spim_instance, &xfer_desc, 0);
     d7e:	4602      	mov	r2, r0
     d80:	f107 0108 	add.w	r1, r7, #8
     d84:	4811      	ldr	r0, [pc, #68]	; (dcc <update_cpi+0xd8>)
     d86:	f008 fafd 	bl	9384 <nrfx_spim_xfer>
    if (err != NRFX_SUCCESS) {
     d8a:	4b11      	ldr	r3, [pc, #68]	; (dd0 <update_cpi+0xdc>)
     d8c:	4298      	cmp	r0, r3
    err = nrfx_spim_xfer(&spim_instance, &xfer_desc, 0);
     d8e:	4605      	mov	r5, r0
    if (err != NRFX_SUCCESS) {
     d90:	d00e      	beq.n	db0 <update_cpi+0xbc>
        LOG_ERR("Failed to change CPI");
     d92:	4b10      	ldr	r3, [pc, #64]	; (dd4 <update_cpi+0xe0>)
     d94:	480a      	ldr	r0, [pc, #40]	; (dc0 <update_cpi+0xcc>)
     d96:	f107 0228 	add.w	r2, r7, #40	; 0x28
     d9a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     d9e:	e9c7 630a 	strd	r6, r3, [r7, #40]	; 0x28
     da2:	f00a ff37 	bl	bc14 <z_log_msg_static_create.constprop.0>
        spi_cs_ctrl(false); 
     da6:	4620      	mov	r0, r4
     da8:	f7ff ff74 	bl	c94 <spi_cs_ctrl>
        return err;
     dac:	462c      	mov	r4, r5
     dae:	e7bb      	b.n	d28 <update_cpi+0x34>
    err = spi_cs_ctrl(false); 
     db0:	4620      	mov	r0, r4
     db2:	f7ff ff6f 	bl	c94 <spi_cs_ctrl>
     db6:	4604      	mov	r4, r0
    return err;
     db8:	e7b6      	b.n	d28 <update_cpi+0x34>
     dba:	bf00      	nop
     dbc:	0000e127 	.word	0x0000e127
     dc0:	0000dbe4 	.word	0x0000dbe4
     dc4:	0000e141 	.word	0x0000e141
     dc8:	0000e52d 	.word	0x0000e52d
     dcc:	0000dcc8 	.word	0x0000dcc8
     dd0:	0bad0000 	.word	0x0bad0000
     dd4:	0000e168 	.word	0x0000e168

00000dd8 <update_downshift_time>:
static int update_downshift_time(uint8_t reg_addr, uint32_t time) {
     dd8:	b5f0      	push	{r4, r5, r6, r7, lr}
    switch (reg_addr) {
     dda:	2817      	cmp	r0, #23
static int update_downshift_time(uint8_t reg_addr, uint32_t time) {
     ddc:	b08d      	sub	sp, #52	; 0x34
     dde:	4604      	mov	r4, r0
     de0:	af00      	add	r7, sp, #0
    switch (reg_addr) {
     de2:	d058      	beq.n	e96 <update_downshift_time+0xbe>
     de4:	281a      	cmp	r0, #26
     de6:	d012      	beq.n	e0e <update_downshift_time+0x36>
     de8:	2814      	cmp	r0, #20
     dea:	d05a      	beq.n	ea2 <update_downshift_time+0xca>
		LOG_ERR("Not supported");
     dec:	4b3b      	ldr	r3, [pc, #236]	; (edc <update_downshift_time+0x104>)
     dee:	62fb      	str	r3, [r7, #44]	; 0x2c
     df0:	2302      	movs	r3, #2
     df2:	483b      	ldr	r0, [pc, #236]	; (ee0 <update_downshift_time+0x108>)
     df4:	62bb      	str	r3, [r7, #40]	; 0x28
     df6:	f107 0228 	add.w	r2, r7, #40	; 0x28
     dfa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
     dfe:	f06f 0485 	mvn.w	r4, #133	; 0x85
		LOG_ERR("Not supported");
     e02:	f00a ff07 	bl	bc14 <z_log_msg_static_create.constprop.0>
}
     e06:	4620      	mov	r0, r4
     e08:	3734      	adds	r7, #52	; 0x34
     e0a:	46bd      	mov	sp, r7
     e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((time > maxtime) || (time < mintime)) {
     e0e:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
     e12:	d34a      	bcc.n	eaa <update_downshift_time+0xd2>
     e14:	f44f 6348 	mov.w	r3, #3200	; 0xc80
    LOG_DBG("Set downshift time to %u ms (reg value 0x%x)", time, value);
     e18:	466e      	mov	r6, sp
     e1a:	b08a      	sub	sp, #40	; 0x28
     e1c:	466a      	mov	r2, sp
    uint8_t value = time / mintime;
     e1e:	fbb1 f5f3 	udiv	r5, r1, r3
    LOG_DBG("Set downshift time to %u ms (reg value 0x%x)", time, value);
     e22:	4b30      	ldr	r3, [pc, #192]	; (ee4 <update_downshift_time+0x10c>)
     e24:	6153      	str	r3, [r2, #20]
     e26:	4b30      	ldr	r3, [pc, #192]	; (ee8 <update_downshift_time+0x110>)
     e28:	482d      	ldr	r0, [pc, #180]	; (ee0 <update_downshift_time+0x108>)
     e2a:	e9c2 3106 	strd	r3, r1, [r2, #24]
     e2e:	b2eb      	uxtb	r3, r5
     e30:	6213      	str	r3, [r2, #32]
     e32:	2305      	movs	r3, #5
     e34:	f842 3f10 	str.w	r3, [r2, #16]!
     e38:	f44f 5124 	mov.w	r1, #10496	; 0x2900
     e3c:	f00a feea 	bl	bc14 <z_log_msg_static_create.constprop.0>
    nrfx_spim_xfer_desc_t xfer_desc = NRFX_SPIM_XFER_TX(tx_data, sizeof(tx_data));
     e40:	1d3b      	adds	r3, r7, #4
     e42:	46b5      	mov	sp, r6
    uint8_t reg = reg_addr | SPI_WRITE_BIT; // Include write bit
     e44:	f064 047f 	orn	r4, r4, #127	; 0x7f
    nrfx_spim_xfer_desc_t xfer_desc = NRFX_SPIM_XFER_TX(tx_data, sizeof(tx_data));
     e48:	60bb      	str	r3, [r7, #8]
     e4a:	2602      	movs	r6, #2
     e4c:	2300      	movs	r3, #0
    nrfx_err_t err = spi_cs_ctrl(true); // Enable CS
     e4e:	2001      	movs	r0, #1
    uint8_t tx_data[] = {reg, value};
     e50:	713c      	strb	r4, [r7, #4]
    nrfx_spim_xfer_desc_t xfer_desc = NRFX_SPIM_XFER_TX(tx_data, sizeof(tx_data));
     e52:	e9c7 6303 	strd	r6, r3, [r7, #12]
    uint8_t value = time / mintime;
     e56:	717d      	strb	r5, [r7, #5]
    nrfx_spim_xfer_desc_t xfer_desc = NRFX_SPIM_XFER_TX(tx_data, sizeof(tx_data));
     e58:	617b      	str	r3, [r7, #20]
    nrfx_err_t err = spi_cs_ctrl(true); // Enable CS
     e5a:	f7ff ff1b 	bl	c94 <spi_cs_ctrl>
    if (err) {
     e5e:	4604      	mov	r4, r0
     e60:	2800      	cmp	r0, #0
     e62:	d1d0      	bne.n	e06 <update_downshift_time+0x2e>
    err = nrfx_spim_xfer(&spim_instance, &xfer_desc, 0);
     e64:	4602      	mov	r2, r0
     e66:	f107 0108 	add.w	r1, r7, #8
     e6a:	4820      	ldr	r0, [pc, #128]	; (eec <update_downshift_time+0x114>)
     e6c:	f008 fa8a 	bl	9384 <nrfx_spim_xfer>
    if (err != NRFX_SUCCESS) {
     e70:	4b1f      	ldr	r3, [pc, #124]	; (ef0 <update_downshift_time+0x118>)
     e72:	4298      	cmp	r0, r3
    err = nrfx_spim_xfer(&spim_instance, &xfer_desc, 0);
     e74:	4605      	mov	r5, r0
    if (err != NRFX_SUCCESS) {
     e76:	d02c      	beq.n	ed2 <update_downshift_time+0xfa>
        LOG_ERR("Failed to change downshift time");
     e78:	4b1e      	ldr	r3, [pc, #120]	; (ef4 <update_downshift_time+0x11c>)
     e7a:	4819      	ldr	r0, [pc, #100]	; (ee0 <update_downshift_time+0x108>)
     e7c:	e9c7 630a 	strd	r6, r3, [r7, #40]	; 0x28
     e80:	f107 0228 	add.w	r2, r7, #40	; 0x28
     e84:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     e88:	f00a fec4 	bl	bc14 <z_log_msg_static_create.constprop.0>
        spi_cs_ctrl(false); // Disable CS on error
     e8c:	4620      	mov	r0, r4
     e8e:	f7ff ff01 	bl	c94 <spi_cs_ctrl>
        return err;
     e92:	462c      	mov	r4, r5
     e94:	e7b7      	b.n	e06 <update_downshift_time+0x2e>
    if ((time > maxtime) || (time < mintime)) {
     e96:	4b18      	ldr	r3, [pc, #96]	; (ef8 <update_downshift_time+0x120>)
     e98:	4299      	cmp	r1, r3
     e9a:	d806      	bhi.n	eaa <update_downshift_time+0xd2>
		mintime = 320;
     e9c:	f44f 73a0 	mov.w	r3, #320	; 0x140
     ea0:	e7ba      	b.n	e18 <update_downshift_time+0x40>
    if ((time > maxtime) || (time < mintime)) {
     ea2:	f640 13f6 	movw	r3, #2550	; 0x9f6
     ea6:	4299      	cmp	r1, r3
     ea8:	d911      	bls.n	ece <update_downshift_time+0xf6>
        LOG_WRN("Downshift time %u out of range", time);
     eaa:	466c      	mov	r4, sp
     eac:	b088      	sub	sp, #32
     eae:	466a      	mov	r2, sp
     eb0:	4b12      	ldr	r3, [pc, #72]	; (efc <update_downshift_time+0x124>)
     eb2:	480b      	ldr	r0, [pc, #44]	; (ee0 <update_downshift_time+0x108>)
     eb4:	e9c2 3105 	strd	r3, r1, [r2, #20]
     eb8:	2303      	movs	r3, #3
     eba:	f842 3f10 	str.w	r3, [r2, #16]!
     ebe:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
     ec2:	f00a fea7 	bl	bc14 <z_log_msg_static_create.constprop.0>
     ec6:	46a5      	mov	sp, r4
        return -EINVAL;
     ec8:	f06f 0415 	mvn.w	r4, #21
     ecc:	e79b      	b.n	e06 <update_downshift_time+0x2e>
		mintime = 10;
     ece:	230a      	movs	r3, #10
     ed0:	e7a2      	b.n	e18 <update_downshift_time+0x40>
    err = spi_cs_ctrl(false); // Disable CS
     ed2:	4620      	mov	r0, r4
     ed4:	f7ff fede 	bl	c94 <spi_cs_ctrl>
     ed8:	4604      	mov	r4, r0
    return err;
     eda:	e794      	b.n	e06 <update_downshift_time+0x2e>
     edc:	0000e17d 	.word	0x0000e17d
     ee0:	0000dbe4 	.word	0x0000dbe4
     ee4:	0000e1aa 	.word	0x0000e1aa
     ee8:	0000e517 	.word	0x0000e517
     eec:	0000dcc8 	.word	0x0000dcc8
     ef0:	0bad0000 	.word	0x0bad0000
     ef4:	0000e1db 	.word	0x0000e1db
     ef8:	00013ec0 	.word	0x00013ec0
     efc:	0000e18b 	.word	0x0000e18b

00000f00 <pmw3360_async_init_configure>:
static int pmw3360_async_init_configure() {
     f00:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    LOG_INF("Configuring");
     f02:	4b12      	ldr	r3, [pc, #72]	; (f4c <pmw3360_async_init_configure+0x4c>)
     f04:	4812      	ldr	r0, [pc, #72]	; (f50 <pmw3360_async_init_configure+0x50>)
     f06:	9305      	str	r3, [sp, #20]
     f08:	aa04      	add	r2, sp, #16
     f0a:	2302      	movs	r3, #2
     f0c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
     f10:	9304      	str	r3, [sp, #16]
     f12:	f00a fe7f 	bl	bc14 <z_log_msg_static_create.constprop.0>
	err = update_cpi(PMW3360_CPI);
     f16:	f44f 7048 	mov.w	r0, #800	; 0x320
     f1a:	f7ff feeb 	bl	cf4 <update_cpi>
	if (!err) {
     f1e:	b990      	cbnz	r0, f46 <pmw3360_async_init_configure+0x46>
		err = update_downshift_time(
     f20:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     f24:	2014      	movs	r0, #20
     f26:	f7ff ff57 	bl	dd8 <update_downshift_time>
	if (!err) {
     f2a:	b960      	cbnz	r0, f46 <pmw3360_async_init_configure+0x46>
		err = update_downshift_time(
     f2c:	f242 4104 	movw	r1, #9220	; 0x2404
     f30:	2017      	movs	r0, #23
     f32:	f7ff ff51 	bl	dd8 <update_downshift_time>
	if (!err) {
     f36:	b930      	cbnz	r0, f46 <pmw3360_async_init_configure+0x46>
		err = update_downshift_time(
     f38:	4906      	ldr	r1, [pc, #24]	; (f54 <pmw3360_async_init_configure+0x54>)
     f3a:	201a      	movs	r0, #26
}
     f3c:	b007      	add	sp, #28
     f3e:	f85d eb04 	ldr.w	lr, [sp], #4
		err = update_downshift_time(
     f42:	f7ff bf49 	b.w	dd8 <update_downshift_time>
}
     f46:	b007      	add	sp, #28
     f48:	f85d fb04 	ldr.w	pc, [sp], #4
     f4c:	0000e1fb 	.word	0x0000e1fb
     f50:	0000dbe4 	.word	0x0000dbe4
     f54:	000249f0 	.word	0x000249f0

00000f58 <reg_read>:
static int reg_read(uint8_t reg, uint8_t *buf) {
     f58:	b5f0      	push	{r4, r5, r6, r7, lr}
     f5a:	b091      	sub	sp, #68	; 0x44
     f5c:	460e      	mov	r6, r1
     f5e:	f88d 0007 	strb.w	r0, [sp, #7]
    err = spi_cs_ctrl(true);
     f62:	2001      	movs	r0, #1
     f64:	f7ff fe96 	bl	c94 <spi_cs_ctrl>
    if (err) {
     f68:	4604      	mov	r4, r0
     f6a:	b9d0      	cbnz	r0, fa2 <reg_read+0x4a>
    nrfx_spim_xfer_desc_t xfer_desc_tx = NRFX_SPIM_XFER_TX(&reg, 1);
     f6c:	2701      	movs	r7, #1
     f6e:	f10d 0307 	add.w	r3, sp, #7
     f72:	e9cd 7003 	strd	r7, r0, [sp, #12]
     f76:	9005      	str	r0, [sp, #20]
    err = nrfx_spim_xfer(&spim_instance, &xfer_desc_tx, 0);
     f78:	4602      	mov	r2, r0
     f7a:	a902      	add	r1, sp, #8
     f7c:	481e      	ldr	r0, [pc, #120]	; (ff8 <reg_read+0xa0>)
    nrfx_spim_xfer_desc_t xfer_desc_tx = NRFX_SPIM_XFER_TX(&reg, 1);
     f7e:	9302      	str	r3, [sp, #8]
    err = nrfx_spim_xfer(&spim_instance, &xfer_desc_tx, 0);
     f80:	f008 fa00 	bl	9384 <nrfx_spim_xfer>
    if (err != NRFX_SUCCESS) {
     f84:	4b1d      	ldr	r3, [pc, #116]	; (ffc <reg_read+0xa4>)
     f86:	4298      	cmp	r0, r3
    err = nrfx_spim_xfer(&spim_instance, &xfer_desc_tx, 0);
     f88:	4605      	mov	r5, r0
    if (err != NRFX_SUCCESS) {
     f8a:	d00d      	beq.n	fa8 <reg_read+0x50>
        LOG_ERR("Reg read failed on SPI write");
     f8c:	4b1c      	ldr	r3, [pc, #112]	; (1000 <CONFIG_FPROTECT_BLOCK_SIZE>)
     f8e:	930f      	str	r3, [sp, #60]	; 0x3c
     f90:	481c      	ldr	r0, [pc, #112]	; (1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
     f92:	2302      	movs	r3, #2
     f94:	aa0e      	add	r2, sp, #56	; 0x38
     f96:	f44f 5182 	mov.w	r1, #4160	; 0x1040
        return err;
     f9a:	462c      	mov	r4, r5
        LOG_ERR("Reg read failed on SPI write");
     f9c:	930e      	str	r3, [sp, #56]	; 0x38
     f9e:	f00a fe39 	bl	bc14 <z_log_msg_static_create.constprop.0>
}
     fa2:	4620      	mov	r0, r4
     fa4:	b011      	add	sp, #68	; 0x44
     fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    k_busy_wait(T_SRAD);
     fa8:	20a0      	movs	r0, #160	; 0xa0
     faa:	f00a fe31 	bl	bc10 <k_busy_wait>
    err = nrfx_spim_xfer(&spim_instance, &xfer_desc_rx, 0);
     fae:	4812      	ldr	r0, [pc, #72]	; (ff8 <reg_read+0xa0>)
     fb0:	4622      	mov	r2, r4
     fb2:	a906      	add	r1, sp, #24
    nrfx_spim_xfer_desc_t xfer_desc_rx = NRFX_SPIM_XFER_RX(buf, 1);
     fb4:	e9cd 6708 	strd	r6, r7, [sp, #32]
     fb8:	e9cd 4406 	strd	r4, r4, [sp, #24]
    err = nrfx_spim_xfer(&spim_instance, &xfer_desc_rx, 0);
     fbc:	f008 f9e2 	bl	9384 <nrfx_spim_xfer>
    if (err != NRFX_SUCCESS) {
     fc0:	42a8      	cmp	r0, r5
    err = nrfx_spim_xfer(&spim_instance, &xfer_desc_rx, 0);
     fc2:	4606      	mov	r6, r0
    if (err != NRFX_SUCCESS) {
     fc4:	d00b      	beq.n	fde <reg_read+0x86>
        LOG_ERR("Reg read failed on SPI read");
     fc6:	4b10      	ldr	r3, [pc, #64]	; (1008 <CONFIG_FPROTECT_BLOCK_SIZE+0x8>)
     fc8:	930f      	str	r3, [sp, #60]	; 0x3c
     fca:	480e      	ldr	r0, [pc, #56]	; (1004 <CONFIG_FPROTECT_BLOCK_SIZE+0x4>)
     fcc:	2302      	movs	r3, #2
     fce:	aa0e      	add	r2, sp, #56	; 0x38
     fd0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
     fd4:	930e      	str	r3, [sp, #56]	; 0x38
        return err;
     fd6:	4634      	mov	r4, r6
        LOG_ERR("Reg read failed on SPI read");
     fd8:	f00a fe1c 	bl	bc14 <z_log_msg_static_create.constprop.0>
        return err;
     fdc:	e7e1      	b.n	fa2 <reg_read+0x4a>
    err = spi_cs_ctrl(false);
     fde:	4620      	mov	r0, r4
     fe0:	f7ff fe58 	bl	c94 <spi_cs_ctrl>
    if (err) {
     fe4:	4604      	mov	r4, r0
     fe6:	2800      	cmp	r0, #0
     fe8:	d1db      	bne.n	fa2 <reg_read+0x4a>
    k_busy_wait(T_SRX);
     fea:	2013      	movs	r0, #19
     fec:	f00a fe10 	bl	bc10 <k_busy_wait>
    data.last_read_burst = false;
     ff0:	4b06      	ldr	r3, [pc, #24]	; (100c <CONFIG_FPROTECT_BLOCK_SIZE+0xc>)
     ff2:	f883 4051 	strb.w	r4, [r3, #81]	; 0x51
    return 0;
     ff6:	e7d4      	b.n	fa2 <reg_read+0x4a>
     ff8:	0000dcc8 	.word	0x0000dcc8
     ffc:	0bad0000 	.word	0x0bad0000
    1000:	0000e207 	.word	0x0000e207
    1004:	0000dbe4 	.word	0x0000dbe4
    1008:	0000e224 	.word	0x0000e224
    100c:	200003e8 	.word	0x200003e8

00001010 <reg_write>:
static int reg_write(uint8_t reg, uint8_t val) {
    1010:	b570      	push	{r4, r5, r6, lr}
    1012:	b08c      	sub	sp, #48	; 0x30
    uint8_t tx_data[] = {
    1014:	f060 007f 	orn	r0, r0, #127	; 0x7f
    1018:	f88d 0004 	strb.w	r0, [sp, #4]
    err = spi_cs_ctrl(true);
    101c:	2001      	movs	r0, #1
    uint8_t tx_data[] = {
    101e:	f88d 1005 	strb.w	r1, [sp, #5]
    err = spi_cs_ctrl(true);
    1022:	f7ff fe37 	bl	c94 <spi_cs_ctrl>
    if (err) {
    1026:	4604      	mov	r4, r0
    1028:	b9d8      	cbnz	r0, 1062 <reg_write+0x52>
    nrfx_spim_xfer_desc_t xfer_desc = NRFX_SPIM_XFER_TX(tx_data, sizeof(tx_data));
    102a:	2602      	movs	r6, #2
    102c:	ab01      	add	r3, sp, #4
    102e:	e9cd 6003 	strd	r6, r0, [sp, #12]
    1032:	9005      	str	r0, [sp, #20]
    err = nrfx_spim_xfer(&spim_instance, &xfer_desc, 0);
    1034:	4602      	mov	r2, r0
    1036:	a902      	add	r1, sp, #8
    1038:	4813      	ldr	r0, [pc, #76]	; (1088 <reg_write+0x78>)
    nrfx_spim_xfer_desc_t xfer_desc = NRFX_SPIM_XFER_TX(tx_data, sizeof(tx_data));
    103a:	9302      	str	r3, [sp, #8]
    err = nrfx_spim_xfer(&spim_instance, &xfer_desc, 0);
    103c:	f008 f9a2 	bl	9384 <nrfx_spim_xfer>
    if (err != NRFX_SUCCESS) {
    1040:	4b12      	ldr	r3, [pc, #72]	; (108c <reg_write+0x7c>)
    1042:	4298      	cmp	r0, r3
    err = nrfx_spim_xfer(&spim_instance, &xfer_desc, 0);
    1044:	4605      	mov	r5, r0
    if (err != NRFX_SUCCESS) {
    1046:	d00f      	beq.n	1068 <reg_write+0x58>
        LOG_ERR("Reg write failed on SPI write");
    1048:	4b11      	ldr	r3, [pc, #68]	; (1090 <reg_write+0x80>)
    104a:	4812      	ldr	r0, [pc, #72]	; (1094 <reg_write+0x84>)
    104c:	aa0a      	add	r2, sp, #40	; 0x28
    104e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    1052:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
    1056:	f00a fddd 	bl	bc14 <z_log_msg_static_create.constprop.0>
        spi_cs_ctrl(false); 
    105a:	4620      	mov	r0, r4
    105c:	f7ff fe1a 	bl	c94 <spi_cs_ctrl>
        return err;
    1060:	462c      	mov	r4, r5
}
    1062:	4620      	mov	r0, r4
    1064:	b00c      	add	sp, #48	; 0x30
    1066:	bd70      	pop	{r4, r5, r6, pc}
    k_busy_wait(T_SCLK_NCS_WR);
    1068:	2022      	movs	r0, #34	; 0x22
    106a:	f00a fdd1 	bl	bc10 <k_busy_wait>
    err = spi_cs_ctrl(false); 
    106e:	4620      	mov	r0, r4
    1070:	f7ff fe10 	bl	c94 <spi_cs_ctrl>
    if (err) {
    1074:	4604      	mov	r4, r0
    1076:	2800      	cmp	r0, #0
    1078:	d1f3      	bne.n	1062 <reg_write+0x52>
    k_busy_wait(T_SWX);
    107a:	2092      	movs	r0, #146	; 0x92
    107c:	f00a fdc8 	bl	bc10 <k_busy_wait>
    data.last_read_burst = false;
    1080:	4b05      	ldr	r3, [pc, #20]	; (1098 <reg_write+0x88>)
    1082:	f883 4051 	strb.w	r4, [r3, #81]	; 0x51
    return 0;
    1086:	e7ec      	b.n	1062 <reg_write+0x52>
    1088:	0000dcc8 	.word	0x0000dcc8
    108c:	0bad0000 	.word	0x0bad0000
    1090:	0000e240 	.word	0x0000e240
    1094:	0000dbe4 	.word	0x0000dbe4
    1098:	200003e8 	.word	0x200003e8

0000109c <pmw3360_async_init_fw_load_verify>:
{
    109c:	b5b0      	push	{r4, r5, r7, lr}
    109e:	b088      	sub	sp, #32
    10a0:	af00      	add	r7, sp, #0
	err = reg_read(PMW3360_REG_SROM_ID, &fw_id);
    10a2:	1db9      	adds	r1, r7, #6
    10a4:	202a      	movs	r0, #42	; 0x2a
    10a6:	f7ff ff57 	bl	f58 <reg_read>
	if (err) {
    10aa:	4604      	mov	r4, r0
    10ac:	b158      	cbz	r0, 10c6 <pmw3360_async_init_fw_load_verify+0x2a>
		LOG_ERR("Cannot obtain firmware id");
    10ae:	4b24      	ldr	r3, [pc, #144]	; (1140 <pmw3360_async_init_fw_load_verify+0xa4>)
		LOG_ERR("Cannot enable REST modes");
    10b0:	61fb      	str	r3, [r7, #28]
    10b2:	2302      	movs	r3, #2
    10b4:	4823      	ldr	r0, [pc, #140]	; (1144 <pmw3360_async_init_fw_load_verify+0xa8>)
    10b6:	61bb      	str	r3, [r7, #24]
    10b8:	f107 0218 	add.w	r2, r7, #24
    10bc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    10c0:	f00a fda8 	bl	bc14 <z_log_msg_static_create.constprop.0>
    10c4:	e021      	b.n	110a <pmw3360_async_init_fw_load_verify+0x6e>
	LOG_DBG("Optical chip firmware ID: 0x%x", fw_id);
    10c6:	466d      	mov	r5, sp
    10c8:	b088      	sub	sp, #32
    10ca:	79bb      	ldrb	r3, [r7, #6]
    10cc:	466a      	mov	r2, sp
    10ce:	491e      	ldr	r1, [pc, #120]	; (1148 <pmw3360_async_init_fw_load_verify+0xac>)
    10d0:	6151      	str	r1, [r2, #20]
    10d2:	491e      	ldr	r1, [pc, #120]	; (114c <pmw3360_async_init_fw_load_verify+0xb0>)
    10d4:	481b      	ldr	r0, [pc, #108]	; (1144 <pmw3360_async_init_fw_load_verify+0xa8>)
    10d6:	e9c2 1306 	strd	r1, r3, [r2, #24]
    10da:	2304      	movs	r3, #4
    10dc:	f842 3f10 	str.w	r3, [r2, #16]!
    10e0:	f44f 5104 	mov.w	r1, #8448	; 0x2100
    10e4:	f00a fd96 	bl	bc14 <z_log_msg_static_create.constprop.0>
	if (fw_id != PMW3360_FIRMWARE_ID) {
    10e8:	79bb      	ldrb	r3, [r7, #6]
    10ea:	2b04      	cmp	r3, #4
    10ec:	46ad      	mov	sp, r5
    10ee:	d010      	beq.n	1112 <pmw3360_async_init_fw_load_verify+0x76>
		LOG_ERR("Chip is not running from SROM!");
    10f0:	4b17      	ldr	r3, [pc, #92]	; (1150 <pmw3360_async_init_fw_load_verify+0xb4>)
		LOG_ERR("Invalid product id!");
    10f2:	61fb      	str	r3, [r7, #28]
    10f4:	2302      	movs	r3, #2
    10f6:	4813      	ldr	r0, [pc, #76]	; (1144 <pmw3360_async_init_fw_load_verify+0xa8>)
    10f8:	61bb      	str	r3, [r7, #24]
    10fa:	f107 0218 	add.w	r2, r7, #24
    10fe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
    1102:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("Invalid product id!");
    1106:	f00a fd85 	bl	bc14 <z_log_msg_static_create.constprop.0>
}
    110a:	4620      	mov	r0, r4
    110c:	3720      	adds	r7, #32
    110e:	46bd      	mov	sp, r7
    1110:	bdb0      	pop	{r4, r5, r7, pc}
	err = reg_read(PMW3360_REG_PRODUCT_ID, &product_id);
    1112:	4620      	mov	r0, r4
    1114:	1df9      	adds	r1, r7, #7
    1116:	f7ff ff1f 	bl	f58 <reg_read>
	if (err) {
    111a:	4604      	mov	r4, r0
    111c:	b108      	cbz	r0, 1122 <pmw3360_async_init_fw_load_verify+0x86>
		LOG_ERR("Cannot obtain product id");
    111e:	4b0d      	ldr	r3, [pc, #52]	; (1154 <pmw3360_async_init_fw_load_verify+0xb8>)
    1120:	e7c6      	b.n	10b0 <pmw3360_async_init_fw_load_verify+0x14>
	if (product_id != PMW3360_PRODUCT_ID) {
    1122:	79fb      	ldrb	r3, [r7, #7]
    1124:	2b42      	cmp	r3, #66	; 0x42
    1126:	d001      	beq.n	112c <pmw3360_async_init_fw_load_verify+0x90>
		LOG_ERR("Invalid product id!");
    1128:	4b0b      	ldr	r3, [pc, #44]	; (1158 <pmw3360_async_init_fw_load_verify+0xbc>)
    112a:	e7e2      	b.n	10f2 <pmw3360_async_init_fw_load_verify+0x56>
	err = reg_write(PMW3360_REG_CONFIG2, 0x20);
    112c:	2120      	movs	r1, #32
    112e:	2010      	movs	r0, #16
    1130:	f7ff ff6e 	bl	1010 <reg_write>
	if (err) {
    1134:	4604      	mov	r4, r0
    1136:	2800      	cmp	r0, #0
    1138:	d0e7      	beq.n	110a <pmw3360_async_init_fw_load_verify+0x6e>
		LOG_ERR("Cannot enable REST modes");
    113a:	4b08      	ldr	r3, [pc, #32]	; (115c <pmw3360_async_init_fw_load_verify+0xc0>)
    113c:	e7b8      	b.n	10b0 <pmw3360_async_init_fw_load_verify+0x14>
    113e:	bf00      	nop
    1140:	0000e25e 	.word	0x0000e25e
    1144:	0000dbe4 	.word	0x0000dbe4
    1148:	0000e278 	.word	0x0000e278
    114c:	0000e4f5 	.word	0x0000e4f5
    1150:	0000e29b 	.word	0x0000e29b
    1154:	0000e2ba 	.word	0x0000e2ba
    1158:	0000e2d3 	.word	0x0000e2d3
    115c:	0000e2e7 	.word	0x0000e2e7

00001160 <pmw3360_async_init_fw_load_start>:
static int pmw3360_async_init_fw_load_start(void) {
    1160:	b530      	push	{r4, r5, lr}
    for (uint8_t reg = 0x02; (reg <= 0x06) && !err; reg++) {
    1162:	2502      	movs	r5, #2
static int pmw3360_async_init_fw_load_start(void) {
    1164:	b087      	sub	sp, #28
        err = reg_read(reg, buf);
    1166:	4628      	mov	r0, r5
    1168:	4669      	mov	r1, sp
    116a:	f7ff fef5 	bl	f58 <reg_read>
    for (uint8_t reg = 0x02; (reg <= 0x06) && !err; reg++) {
    116e:	3501      	adds	r5, #1
    1170:	b2ed      	uxtb	r5, r5
    1172:	2d07      	cmp	r5, #7
        err = reg_read(reg, buf);
    1174:	4604      	mov	r4, r0
    for (uint8_t reg = 0x02; (reg <= 0x06) && !err; reg++) {
    1176:	d00e      	beq.n	1196 <pmw3360_async_init_fw_load_start+0x36>
    1178:	2800      	cmp	r0, #0
    117a:	d0f4      	beq.n	1166 <pmw3360_async_init_fw_load_start+0x6>
        LOG_ERR("Cannot read from data registers");
    117c:	4b0f      	ldr	r3, [pc, #60]	; (11bc <pmw3360_async_init_fw_load_start+0x5c>)
        LOG_ERR("Cannot initialize SROM");
    117e:	9305      	str	r3, [sp, #20]
    1180:	480f      	ldr	r0, [pc, #60]	; (11c0 <pmw3360_async_init_fw_load_start+0x60>)
    1182:	2302      	movs	r3, #2
    1184:	aa04      	add	r2, sp, #16
    1186:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    118a:	9304      	str	r3, [sp, #16]
    118c:	f00a fd42 	bl	bc14 <z_log_msg_static_create.constprop.0>
}
    1190:	4620      	mov	r0, r4
    1192:	b007      	add	sp, #28
    1194:	bd30      	pop	{r4, r5, pc}
    if (err) {
    1196:	2800      	cmp	r0, #0
    1198:	d1f0      	bne.n	117c <pmw3360_async_init_fw_load_start+0x1c>
    err = reg_write(PMW3360_REG_CONFIG2, 0x00);
    119a:	4601      	mov	r1, r0
    119c:	2010      	movs	r0, #16
    119e:	f7ff ff37 	bl	1010 <reg_write>
    if (err) {
    11a2:	4604      	mov	r4, r0
    11a4:	b108      	cbz	r0, 11aa <pmw3360_async_init_fw_load_start+0x4a>
        LOG_ERR("Cannot disable REST mode");
    11a6:	4b07      	ldr	r3, [pc, #28]	; (11c4 <pmw3360_async_init_fw_load_start+0x64>)
    11a8:	e7e9      	b.n	117e <pmw3360_async_init_fw_load_start+0x1e>
    err = reg_write(PMW3360_REG_SROM_ENABLE, 0x1D);
    11aa:	211d      	movs	r1, #29
    11ac:	2013      	movs	r0, #19
    11ae:	f7ff ff2f 	bl	1010 <reg_write>
    if (err) {
    11b2:	4604      	mov	r4, r0
    11b4:	2800      	cmp	r0, #0
    11b6:	d0eb      	beq.n	1190 <pmw3360_async_init_fw_load_start+0x30>
        LOG_ERR("Cannot initialize SROM");
    11b8:	4b03      	ldr	r3, [pc, #12]	; (11c8 <pmw3360_async_init_fw_load_start+0x68>)
    11ba:	e7e0      	b.n	117e <pmw3360_async_init_fw_load_start+0x1e>
    11bc:	0000e300 	.word	0x0000e300
    11c0:	0000dbe4 	.word	0x0000dbe4
    11c4:	0000e320 	.word	0x0000e320
    11c8:	0000e339 	.word	0x0000e339

000011cc <pmw3360_async_init_power_up>:
{
    11cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    LOG_INF("Power Up");
    11ce:	4b08      	ldr	r3, [pc, #32]	; (11f0 <pmw3360_async_init_power_up+0x24>)
    11d0:	9305      	str	r3, [sp, #20]
    11d2:	4808      	ldr	r0, [pc, #32]	; (11f4 <pmw3360_async_init_power_up+0x28>)
    11d4:	2302      	movs	r3, #2
    11d6:	aa04      	add	r2, sp, #16
    11d8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    11dc:	9304      	str	r3, [sp, #16]
    11de:	f00a fd19 	bl	bc14 <z_log_msg_static_create.constprop.0>
	return reg_write(PMW3360_REG_POWER_UP_RESET, 0x5A);
    11e2:	215a      	movs	r1, #90	; 0x5a
    11e4:	203a      	movs	r0, #58	; 0x3a
}
    11e6:	b007      	add	sp, #28
    11e8:	f85d eb04 	ldr.w	lr, [sp], #4
	return reg_write(PMW3360_REG_POWER_UP_RESET, 0x5A);
    11ec:	f7ff bf10 	b.w	1010 <reg_write>
    11f0:	0000e350 	.word	0x0000e350
    11f4:	0000dbe4 	.word	0x0000dbe4

000011f8 <pmw3360_async_init_fw_load_continue>:
{
    11f8:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
    11fc:	b08e      	sub	sp, #56	; 0x38
    LOG_INF("Uploading optical sensor firmware...");
    11fe:	4b43      	ldr	r3, [pc, #268]	; (130c <pmw3360_async_init_fw_load_continue+0x114>)
    1200:	4843      	ldr	r0, [pc, #268]	; (1310 <pmw3360_async_init_fw_load_continue+0x118>)
    1202:	930d      	str	r3, [sp, #52]	; 0x34
    1204:	aa0c      	add	r2, sp, #48	; 0x30
    1206:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    120a:	2502      	movs	r5, #2
    120c:	950c      	str	r5, [sp, #48]	; 0x30
    120e:	f00a fd01 	bl	bc14 <z_log_msg_static_create.constprop.0>
    err = reg_write(PMW3360_REG_SROM_ENABLE, 0x18);
    1212:	2118      	movs	r1, #24
    1214:	2013      	movs	r0, #19
    1216:	f7ff fefb 	bl	1010 <reg_write>
    if (err) {
    121a:	4604      	mov	r4, r0
    121c:	b160      	cbz	r0, 1238 <pmw3360_async_init_fw_load_continue+0x40>
        LOG_ERR("Cannot start SROM download");
    121e:	4b3d      	ldr	r3, [pc, #244]	; (1314 <pmw3360_async_init_fw_load_continue+0x11c>)
    1220:	483b      	ldr	r0, [pc, #236]	; (1310 <pmw3360_async_init_fw_load_continue+0x118>)
    1222:	aa0c      	add	r2, sp, #48	; 0x30
    1224:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    1228:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
    122c:	f00a fcf2 	bl	bc14 <z_log_msg_static_create.constprop.0>
}
    1230:	4620      	mov	r0, r4
    1232:	b00e      	add	sp, #56	; 0x38
    1234:	e8bd 8bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, pc}
    err = burst_write(PMW3360_REG_SROM_LOAD_BURST,
    1238:	4b37      	ldr	r3, [pc, #220]	; (1318 <pmw3360_async_init_fw_load_continue+0x120>)
    nrfx_spim_xfer_desc_t xfer_desc_tx = NRFX_SPIM_XFER_TX(&write_buf, 1);
    123a:	9407      	str	r4, [sp, #28]
    err = burst_write(PMW3360_REG_SROM_LOAD_BURST,
    123c:	681b      	ldr	r3, [r3, #0]
    123e:	9301      	str	r3, [sp, #4]
    nrfx_spim_xfer_desc_t xfer_desc_tx = NRFX_SPIM_XFER_TX(&write_buf, 1);
    1240:	2001      	movs	r0, #1
    write_buf = reg | SPI_WRITE_BIT;
    1242:	23e2      	movs	r3, #226	; 0xe2
    nrfx_spim_xfer_desc_t xfer_desc_tx = NRFX_SPIM_XFER_TX(&write_buf, 1);
    1244:	f10d 060f 	add.w	r6, sp, #15
    1248:	e9cd 0405 	strd	r0, r4, [sp, #20]
    write_buf = reg | SPI_WRITE_BIT;
    124c:	f88d 300f 	strb.w	r3, [sp, #15]
    nrfx_spim_xfer_desc_t xfer_desc_tx = NRFX_SPIM_XFER_TX(&write_buf, 1);
    1250:	9604      	str	r6, [sp, #16]
    err = spi_cs_ctrl(true); 
    1252:	f7ff fd1f 	bl	c94 <spi_cs_ctrl>
    if (err) {
    1256:	4604      	mov	r4, r0
    1258:	b160      	cbz	r0, 1274 <pmw3360_async_init_fw_load_continue+0x7c>
        return err;
    125a:	4605      	mov	r5, r0
        LOG_ERR("Cannot write firmware to sensor");
    125c:	4b2f      	ldr	r3, [pc, #188]	; (131c <pmw3360_async_init_fw_load_continue+0x124>)
    125e:	930d      	str	r3, [sp, #52]	; 0x34
    1260:	482b      	ldr	r0, [pc, #172]	; (1310 <pmw3360_async_init_fw_load_continue+0x118>)
    1262:	2302      	movs	r3, #2
    1264:	aa0c      	add	r2, sp, #48	; 0x30
    1266:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    126a:	930c      	str	r3, [sp, #48]	; 0x30
    126c:	462c      	mov	r4, r5
    126e:	f00a fcd1 	bl	bc14 <z_log_msg_static_create.constprop.0>
    1272:	e7dd      	b.n	1230 <pmw3360_async_init_fw_load_continue+0x38>
    err = nrfx_spim_xfer(&spim_instance, &xfer_desc_tx, 0);
    1274:	4602      	mov	r2, r0
    1276:	a904      	add	r1, sp, #16
    1278:	4829      	ldr	r0, [pc, #164]	; (1320 <pmw3360_async_init_fw_load_continue+0x128>)
    127a:	f008 f883 	bl	9384 <nrfx_spim_xfer>
    if (err != NRFX_SUCCESS) {
    127e:	4b29      	ldr	r3, [pc, #164]	; (1324 <pmw3360_async_init_fw_load_continue+0x12c>)
    1280:	4298      	cmp	r0, r3
    err = nrfx_spim_xfer(&spim_instance, &xfer_desc_tx, 0);
    1282:	4680      	mov	r8, r0
    if (err != NRFX_SUCCESS) {
    1284:	d113      	bne.n	12ae <pmw3360_async_init_fw_load_continue+0xb6>
    1286:	4f28      	ldr	r7, [pc, #160]	; (1328 <pmw3360_async_init_fw_load_continue+0x130>)
        err = nrfx_spim_xfer(&spim_instance, &xfer_desc_tx, 0);
    1288:	f8df b094 	ldr.w	fp, [pc, #148]	; 1320 <pmw3360_async_init_fw_load_continue+0x128>
    for (size_t i = 0; i < size; i++) {
    128c:	46a1      	mov	r9, r4
    128e:	9b01      	ldr	r3, [sp, #4]
    1290:	454b      	cmp	r3, r9
    1292:	d11c      	bne.n	12ce <pmw3360_async_init_fw_load_continue+0xd6>
    err = spi_cs_ctrl(false);
    1294:	2000      	movs	r0, #0
    1296:	f7ff fcfd 	bl	c94 <spi_cs_ctrl>
    if (err) {
    129a:	4605      	mov	r5, r0
    129c:	2800      	cmp	r0, #0
    129e:	d1dd      	bne.n	125c <pmw3360_async_init_fw_load_continue+0x64>
    k_busy_wait(T_BEXIT);
    12a0:	2001      	movs	r0, #1
    12a2:	f00a fcb5 	bl	bc10 <k_busy_wait>
    data.last_read_burst = false;
    12a6:	4b21      	ldr	r3, [pc, #132]	; (132c <pmw3360_async_init_fw_load_continue+0x134>)
    12a8:	f883 5051 	strb.w	r5, [r3, #81]	; 0x51
    if (err) {
    12ac:	e7c0      	b.n	1230 <pmw3360_async_init_fw_load_continue+0x38>
        LOG_ERR("Burst write failed on SPI write");
    12ae:	4b20      	ldr	r3, [pc, #128]	; (1330 <pmw3360_async_init_fw_load_continue+0x138>)
    12b0:	4817      	ldr	r0, [pc, #92]	; (1310 <pmw3360_async_init_fw_load_continue+0x118>)
    12b2:	aa0c      	add	r2, sp, #48	; 0x30
    12b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    12b8:	e9cd 530c 	strd	r5, r3, [sp, #48]	; 0x30
    12bc:	f00a fcaa 	bl	bc14 <z_log_msg_static_create.constprop.0>
        spi_cs_ctrl(false); 
    12c0:	4620      	mov	r0, r4
    12c2:	f7ff fce7 	bl	c94 <spi_cs_ctrl>
        return err;
    12c6:	4645      	mov	r5, r8
    if (err) {
    12c8:	2d00      	cmp	r5, #0
    12ca:	d0b1      	beq.n	1230 <pmw3360_async_init_fw_load_continue+0x38>
    12cc:	e7c6      	b.n	125c <pmw3360_async_init_fw_load_continue+0x64>
        write_buf = buf[i];
    12ce:	f817 3b01 	ldrb.w	r3, [r7], #1
    12d2:	f88d 300f 	strb.w	r3, [sp, #15]
        err = nrfx_spim_xfer(&spim_instance, &xfer_desc_tx, 0);
    12d6:	2200      	movs	r2, #0
    12d8:	a904      	add	r1, sp, #16
    12da:	4658      	mov	r0, fp
        xfer_desc_tx.p_tx_buffer = &write_buf;
    12dc:	9604      	str	r6, [sp, #16]
        err = nrfx_spim_xfer(&spim_instance, &xfer_desc_tx, 0);
    12de:	f008 f851 	bl	9384 <nrfx_spim_xfer>
        if (err != NRFX_SUCCESS) {
    12e2:	4540      	cmp	r0, r8
        err = nrfx_spim_xfer(&spim_instance, &xfer_desc_tx, 0);
    12e4:	4605      	mov	r5, r0
        if (err != NRFX_SUCCESS) {
    12e6:	d00a      	beq.n	12fe <pmw3360_async_init_fw_load_continue+0x106>
            LOG_ERR("Burst write failed on SPI write (data)");
    12e8:	4b12      	ldr	r3, [pc, #72]	; (1334 <pmw3360_async_init_fw_load_continue+0x13c>)
    12ea:	930d      	str	r3, [sp, #52]	; 0x34
    12ec:	4808      	ldr	r0, [pc, #32]	; (1310 <pmw3360_async_init_fw_load_continue+0x118>)
    12ee:	2302      	movs	r3, #2
    12f0:	aa0c      	add	r2, sp, #48	; 0x30
    12f2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    12f6:	930c      	str	r3, [sp, #48]	; 0x30
    12f8:	f00a fc8c 	bl	bc14 <z_log_msg_static_create.constprop.0>
            return err;
    12fc:	e7e4      	b.n	12c8 <pmw3360_async_init_fw_load_continue+0xd0>
        k_busy_wait(T_BRSEP);
    12fe:	200f      	movs	r0, #15
    1300:	f00a fc86 	bl	bc10 <k_busy_wait>
    for (size_t i = 0; i < size; i++) {
    1304:	f109 0901 	add.w	r9, r9, #1
    1308:	e7c1      	b.n	128e <pmw3360_async_init_fw_load_continue+0x96>
    130a:	bf00      	nop
    130c:	0000e359 	.word	0x0000e359
    1310:	0000dbe4 	.word	0x0000dbe4
    1314:	0000e37e 	.word	0x0000e37e
    1318:	0000dcd0 	.word	0x0000dcd0
    131c:	0000e3e0 	.word	0x0000e3e0
    1320:	0000dcc8 	.word	0x0000dcc8
    1324:	0bad0000 	.word	0x0bad0000
    1328:	0000e553 	.word	0x0000e553
    132c:	200003e8 	.word	0x200003e8
    1330:	0000e399 	.word	0x0000e399
    1334:	0000e3b9 	.word	0x0000e3b9

00001338 <is_pmw3360_ready>:
// 	return err;
// }

bool is_pmw3360_ready(void) {
    return data.ready;
}
    1338:	4b01      	ldr	r3, [pc, #4]	; (1340 <is_pmw3360_ready+0x8>)
    133a:	f893 0050 	ldrb.w	r0, [r3, #80]	; 0x50
    133e:	4770      	bx	lr
    1340:	200003e8 	.word	0x200003e8

00001344 <pmw3360_init>:

int pmw3360_init(void) {
    1344:	b5f0      	push	{r4, r5, r6, r7, lr}
    data.ready = false;
	int err;

    nrfx_err_t spi_err;
    spim_config.ss_active_high = false;
    1346:	4931      	ldr	r1, [pc, #196]	; (140c <pmw3360_init+0xc8>)
    data.ready = false;
    1348:	4d31      	ldr	r5, [pc, #196]	; (1410 <pmw3360_init+0xcc>)
    spim_config.frequency = SPI_FREQUENCY;
    spim_config.mode = NRF_SPIM_MODE_3;
    spim_config.bit_order = NRF_SPIM_BIT_ORDER_MSB_FIRST;

    // spi_err = nrfx_spim_init(&spim_instance, &spim_config, spim_event_handler, NULL);
    spi_err = nrfx_spim_init(&spim_instance, &spim_config, NULL, NULL);
    134a:	4832      	ldr	r0, [pc, #200]	; (1414 <pmw3360_init+0xd0>)
    spim_config.frequency = SPI_FREQUENCY;
    134c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    data.ready = false;
    1350:	2300      	movs	r3, #0
    spim_config.frequency = SPI_FREQUENCY;
    1352:	608a      	str	r2, [r1, #8]
    spim_config.mode = NRF_SPIM_MODE_3;
    1354:	2203      	movs	r2, #3
    1356:	818a      	strh	r2, [r1, #12]
int pmw3360_init(void) {
    1358:	b087      	sub	sp, #28
    spi_err = nrfx_spim_init(&spim_instance, &spim_config, NULL, NULL);
    135a:	461a      	mov	r2, r3
    data.ready = false;
    135c:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
    spim_config.ss_active_high = false;
    1360:	710b      	strb	r3, [r1, #4]
    spi_err = nrfx_spim_init(&spim_instance, &spim_config, NULL, NULL);
    1362:	f007 ff61 	bl	9228 <nrfx_spim_init>
    if (spi_err != NRFX_SUCCESS) {
    1366:	4b2c      	ldr	r3, [pc, #176]	; (1418 <pmw3360_init+0xd4>)
    1368:	4298      	cmp	r0, r3
    136a:	d14c      	bne.n	1406 <pmw3360_init+0xc2>
    136c:	4c2b      	ldr	r4, [pc, #172]	; (141c <pmw3360_init+0xd8>)
    136e:	4620      	mov	r0, r4
    1370:	f00b ffe0 	bl	d334 <z_device_is_ready>
        return -1;
    }
    // config data
    if (!device_is_ready(cs_gpio.port)) {
    1374:	b970      	cbnz	r0, 1394 <pmw3360_init+0x50>
		LOG_ERR("SPI CS device not ready");
    1376:	4b2a      	ldr	r3, [pc, #168]	; (1420 <pmw3360_init+0xdc>)
    1378:	9305      	str	r3, [sp, #20]
    137a:	482a      	ldr	r0, [pc, #168]	; (1424 <pmw3360_init+0xe0>)
    137c:	2302      	movs	r3, #2
    137e:	aa04      	add	r2, sp, #16
    1380:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENODEV;
    1384:	f06f 0412 	mvn.w	r4, #18
		LOG_ERR("SPI CS device not ready");
    1388:	9304      	str	r3, [sp, #16]
    138a:	f00a fc43 	bl	bc14 <z_log_msg_static_create.constprop.0>
        &data.init_work,
		K_MSEC(async_init_delay[data.async_init_step])
    );

	return err;
}
    138e:	4620      	mov	r0, r4
    1390:	b007      	add	sp, #28
    1392:	bdf0      	pop	{r4, r5, r6, r7, pc}
	struct gpio_driver_data *data =
    1394:	6922      	ldr	r2, [r4, #16]
	const struct gpio_driver_api *api =
    1396:	68a1      	ldr	r1, [r4, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    1398:	6813      	ldr	r3, [r2, #0]
    139a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    139e:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    13a0:	680b      	ldr	r3, [r1, #0]
    13a2:	4a21      	ldr	r2, [pc, #132]	; (1428 <pmw3360_init+0xe4>)
    13a4:	4620      	mov	r0, r4
    13a6:	2106      	movs	r1, #6
    13a8:	4798      	blx	r3
	if (err) {
    13aa:	4604      	mov	r4, r0
    13ac:	b150      	cbz	r0, 13c4 <pmw3360_init+0x80>
		LOG_ERR("Cannot configure SPI CS GPIO");
    13ae:	4b1f      	ldr	r3, [pc, #124]	; (142c <pmw3360_init+0xe8>)
    13b0:	9305      	str	r3, [sp, #20]
    13b2:	481c      	ldr	r0, [pc, #112]	; (1424 <pmw3360_init+0xe0>)
    13b4:	2302      	movs	r3, #2
    13b6:	aa04      	add	r2, sp, #16
    13b8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    13bc:	9304      	str	r3, [sp, #16]
    13be:	f00a fc29 	bl	bc14 <z_log_msg_static_create.constprop.0>
		return err;
    13c2:	e7e4      	b.n	138e <pmw3360_init+0x4a>
    data.last_read_burst = false;
    13c4:	f885 0051 	strb.w	r0, [r5, #81]	; 0x51
	k_work_init_delayable(&data.init_work, pmw3360_async_init);
    13c8:	4919      	ldr	r1, [pc, #100]	; (1430 <pmw3360_init+0xec>)
    13ca:	f105 0018 	add.w	r0, r5, #24
    13ce:	f00c f90e 	bl	d5ee <k_work_init_delayable>
		K_MSEC(async_init_delay[data.async_init_step])
    13d2:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
    13d6:	4b17      	ldr	r3, [pc, #92]	; (1434 <pmw3360_init+0xf0>)
    13d8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
    13dc:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    13e0:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    13e4:	4621      	mov	r1, r4
    13e6:	f240 30e7 	movw	r0, #999	; 0x3e7
    13ea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    13ee:	2300      	movs	r3, #0
    13f0:	fbc6 0107 	smlal	r0, r1, r6, r7
    13f4:	f7fe fe74 	bl	e0 <__aeabi_uldivmod>
    13f8:	4602      	mov	r2, r0
    13fa:	460b      	mov	r3, r1
	k_work_schedule(
    13fc:	f105 0018 	add.w	r0, r5, #24
    1400:	f009 fe18 	bl	b034 <k_work_schedule>
	return err;
    1404:	e7c3      	b.n	138e <pmw3360_init+0x4a>
        return -1;
    1406:	f04f 34ff 	mov.w	r4, #4294967295
    140a:	e7c0      	b.n	138e <pmw3360_init+0x4a>
    140c:	20000014 	.word	0x20000014
    1410:	200003e8 	.word	0x200003e8
    1414:	0000dcc8 	.word	0x0000dcc8
    1418:	0bad0000 	.word	0x0bad0000
    141c:	0000dabc 	.word	0x0000dabc
    1420:	0000e400 	.word	0x0000e400
    1424:	0000dbe4 	.word	0x0000dbe4
    1428:	000a0001 	.word	0x000a0001
    142c:	0000e418 	.word	0x0000e418
    1430:	00000bc9 	.word	0x00000bc9
    1434:	0000dcb4 	.word	0x0000dcb4

00001438 <pmw3360_fetch>:

int pmw3360_fetch(void) {
    1438:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t buf[PMW3360_BURST_SIZE];

	if (unlikely(!data.ready)) {
    143c:	4d3f      	ldr	r5, [pc, #252]	; (153c <pmw3360_fetch+0x104>)
int pmw3360_fetch(void) {
    143e:	b093      	sub	sp, #76	; 0x4c
	if (unlikely(!data.ready)) {
    1440:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
int pmw3360_fetch(void) {
    1444:	af00      	add	r7, sp, #0
	if (unlikely(!data.ready)) {
    1446:	b9b3      	cbnz	r3, 1476 <pmw3360_fetch+0x3e>
		LOG_DBG("Device is not initialized yet");
    1448:	466c      	mov	r4, sp
    144a:	b088      	sub	sp, #32
    144c:	466a      	mov	r2, sp
    144e:	4b3c      	ldr	r3, [pc, #240]	; (1540 <pmw3360_fetch+0x108>)
    1450:	6153      	str	r3, [r2, #20]
    1452:	4b3c      	ldr	r3, [pc, #240]	; (1544 <pmw3360_fetch+0x10c>)
    1454:	6193      	str	r3, [r2, #24]
    1456:	2303      	movs	r3, #3
    1458:	f842 3f10 	str.w	r3, [r2, #16]!
    145c:	483a      	ldr	r0, [pc, #232]	; (1548 <pmw3360_fetch+0x110>)
    145e:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
    1462:	f00a fbd7 	bl	bc14 <z_log_msg_static_create.constprop.0>
    1466:	46a5      	mov	sp, r4
		return -EBUSY;
    1468:	f06f 040f 	mvn.w	r4, #15

	data.x = -x;
	data.y = y;

	return err;
}
    146c:	4620      	mov	r0, r4
    146e:	374c      	adds	r7, #76	; 0x4c
    1470:	46bd      	mov	sp, r7
    1472:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (!data.last_read_burst) {
    1476:	f895 1051 	ldrb.w	r1, [r5, #81]	; 0x51
    uint8_t reg_buf = PMW3360_REG_MOTION_BURST;
    147a:	2050      	movs	r0, #80	; 0x50
    147c:	71f8      	strb	r0, [r7, #7]
    if (!data.last_read_burst) {
    147e:	b321      	cbz	r1, 14ca <pmw3360_fetch+0x92>
    err = spi_cs_ctrl(true); 
    1480:	2001      	movs	r0, #1
    1482:	f7ff fc07 	bl	c94 <spi_cs_ctrl>
    if (err) {
    1486:	4604      	mov	r4, r0
    1488:	bb20      	cbnz	r0, 14d4 <pmw3360_fetch+0x9c>
    nrfx_spim_xfer_desc_t xfer_desc_tx = NRFX_SPIM_XFER_TX(&reg_buf, 1);
    148a:	f04f 0901 	mov.w	r9, #1
    148e:	1dfb      	adds	r3, r7, #7
    1490:	e9c7 9005 	strd	r9, r0, [r7, #20]
    1494:	61f8      	str	r0, [r7, #28]
    err = nrfx_spim_xfer(&spim_instance, &xfer_desc_tx, 0);
    1496:	4602      	mov	r2, r0
    1498:	f107 0110 	add.w	r1, r7, #16
    149c:	482b      	ldr	r0, [pc, #172]	; (154c <pmw3360_fetch+0x114>)
    nrfx_spim_xfer_desc_t xfer_desc_tx = NRFX_SPIM_XFER_TX(&reg_buf, 1);
    149e:	613b      	str	r3, [r7, #16]
    data.last_read_burst = true;
    14a0:	f885 9051 	strb.w	r9, [r5, #81]	; 0x51
    err = nrfx_spim_xfer(&spim_instance, &xfer_desc_tx, 0);
    14a4:	f007 ff6e 	bl	9384 <nrfx_spim_xfer>
    if (err != NRFX_SUCCESS) {
    14a8:	4b29      	ldr	r3, [pc, #164]	; (1550 <pmw3360_fetch+0x118>)
    14aa:	4298      	cmp	r0, r3
    err = nrfx_spim_xfer(&spim_instance, &xfer_desc_tx, 0);
    14ac:	4606      	mov	r6, r0
    if (err != NRFX_SUCCESS) {
    14ae:	d018      	beq.n	14e2 <pmw3360_fetch+0xaa>
        LOG_ERR("Motion burst failed on SPI write");
    14b0:	4b28      	ldr	r3, [pc, #160]	; (1554 <pmw3360_fetch+0x11c>)
    14b2:	647b      	str	r3, [r7, #68]	; 0x44
    14b4:	2302      	movs	r3, #2
    14b6:	4824      	ldr	r0, [pc, #144]	; (1548 <pmw3360_fetch+0x110>)
    14b8:	643b      	str	r3, [r7, #64]	; 0x40
    14ba:	f107 0240 	add.w	r2, r7, #64	; 0x40
    14be:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    14c2:	f00a fba7 	bl	bc14 <z_log_msg_static_create.constprop.0>
        return err;
    14c6:	4634      	mov	r4, r6
    14c8:	e004      	b.n	14d4 <pmw3360_fetch+0x9c>
        err = reg_write(PMW3360_REG_MOTION_BURST, 0x00);
    14ca:	f7ff fda1 	bl	1010 <reg_write>
        if (err) {
    14ce:	4604      	mov	r4, r0
    14d0:	2800      	cmp	r0, #0
    14d2:	d0d5      	beq.n	1480 <pmw3360_fetch+0x48>
	data.x = -x;
    14d4:	897b      	ldrh	r3, [r7, #10]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    14d6:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
	data.y = y;
    14da:	81ea      	strh	r2, [r5, #14]
	data.x = -x;
    14dc:	425b      	negs	r3, r3
    14de:	81ab      	strh	r3, [r5, #12]
	return err;
    14e0:	e7c4      	b.n	146c <pmw3360_fetch+0x34>
    k_busy_wait(T_SRAD_MOTBR);
    14e2:	2023      	movs	r0, #35	; 0x23
    14e4:	f00a fb94 	bl	bc10 <k_busy_wait>
    nrfx_spim_xfer_desc_t xfer_desc_rx = NRFX_SPIM_XFER_RX(buf, burst_size);
    14e8:	f107 0308 	add.w	r3, r7, #8
    14ec:	62bb      	str	r3, [r7, #40]	; 0x28
    err = nrfx_spim_xfer(&spim_instance, &xfer_desc_rx, 0);
    14ee:	4817      	ldr	r0, [pc, #92]	; (154c <pmw3360_fetch+0x114>)
    nrfx_spim_xfer_desc_t xfer_desc_rx = NRFX_SPIM_XFER_RX(buf, burst_size);
    14f0:	2306      	movs	r3, #6
    err = nrfx_spim_xfer(&spim_instance, &xfer_desc_rx, 0);
    14f2:	4622      	mov	r2, r4
    14f4:	f107 0120 	add.w	r1, r7, #32
    nrfx_spim_xfer_desc_t xfer_desc_rx = NRFX_SPIM_XFER_RX(buf, burst_size);
    14f8:	e9c7 4408 	strd	r4, r4, [r7, #32]
    14fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    err = nrfx_spim_xfer(&spim_instance, &xfer_desc_rx, 0);
    14fe:	f007 ff41 	bl	9384 <nrfx_spim_xfer>
    if (err != NRFX_SUCCESS) {
    1502:	42b0      	cmp	r0, r6
    err = nrfx_spim_xfer(&spim_instance, &xfer_desc_rx, 0);
    1504:	4680      	mov	r8, r0
    if (err != NRFX_SUCCESS) {
    1506:	d00c      	beq.n	1522 <pmw3360_fetch+0xea>
        LOG_ERR("Motion burst failed on SPI read");
    1508:	4b13      	ldr	r3, [pc, #76]	; (1558 <pmw3360_fetch+0x120>)
    150a:	647b      	str	r3, [r7, #68]	; 0x44
    150c:	2302      	movs	r3, #2
    150e:	480e      	ldr	r0, [pc, #56]	; (1548 <pmw3360_fetch+0x110>)
    1510:	643b      	str	r3, [r7, #64]	; 0x40
    1512:	f107 0240 	add.w	r2, r7, #64	; 0x40
    1516:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    151a:	f00a fb7b 	bl	bc14 <z_log_msg_static_create.constprop.0>
        return err;
    151e:	4644      	mov	r4, r8
    1520:	e7d8      	b.n	14d4 <pmw3360_fetch+0x9c>
    err = spi_cs_ctrl(false); 
    1522:	4620      	mov	r0, r4
    1524:	f7ff fbb6 	bl	c94 <spi_cs_ctrl>
    if (err) {
    1528:	4604      	mov	r4, r0
    152a:	2800      	cmp	r0, #0
    152c:	d1d2      	bne.n	14d4 <pmw3360_fetch+0x9c>
    k_busy_wait(T_BEXIT);
    152e:	4648      	mov	r0, r9
    1530:	f00a fb6e 	bl	bc10 <k_busy_wait>
    data.last_read_burst = true;
    1534:	f885 9051 	strb.w	r9, [r5, #81]	; 0x51
    return 0;
    1538:	e7cc      	b.n	14d4 <pmw3360_fetch+0x9c>
    153a:	bf00      	nop
    153c:	200003e8 	.word	0x200003e8
    1540:	0000e435 	.word	0x0000e435
    1544:	0000e4e7 	.word	0x0000e4e7
    1548:	0000dbe4 	.word	0x0000dbe4
    154c:	0000dcc8 	.word	0x0000dcc8
    1550:	0bad0000 	.word	0x0bad0000
    1554:	0000e457 	.word	0x0000e457
    1558:	0000e478 	.word	0x0000e478

0000155c <set_pmw3360_cpi>:

int set_pmw3360_cpi(uint32_t cpi) {
    cfg.cpi = cpi;
    155c:	4b01      	ldr	r3, [pc, #4]	; (1564 <set_pmw3360_cpi+0x8>)
    155e:	6018      	str	r0, [r3, #0]
    return update_cpi(cpi);
    1560:	f7ff bbc8 	b.w	cf4 <update_cpi>
    1564:	20000bf0 	.word	0x20000bf0

00001568 <get_pmw3360_cpi>:
}

uint32_t get_pmw3360_cpi(void) {
    1568:	b5b0      	push	{r4, r5, r7, lr}
    156a:	b088      	sub	sp, #32
    156c:	af00      	add	r7, sp, #0
    int err = reg_read(reg, &value);
    156e:	1df9      	adds	r1, r7, #7
    1570:	200f      	movs	r0, #15
    1572:	f7ff fcf1 	bl	f58 <reg_read>
    if (err) {
    1576:	4c1a      	ldr	r4, [pc, #104]	; (15e0 <get_pmw3360_cpi+0x78>)
    1578:	b1d8      	cbz	r0, 15b2 <get_pmw3360_cpi+0x4a>
        LOG_ERR("Failed to read CPI register");
    157a:	4b1a      	ldr	r3, [pc, #104]	; (15e4 <get_pmw3360_cpi+0x7c>)
    157c:	481a      	ldr	r0, [pc, #104]	; (15e8 <get_pmw3360_cpi+0x80>)
    157e:	61fb      	str	r3, [r7, #28]
    1580:	2502      	movs	r5, #2
    1582:	61bd      	str	r5, [r7, #24]
    1584:	f107 0218 	add.w	r2, r7, #24
    1588:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    158c:	f00a fb42 	bl	bc14 <z_log_msg_static_create.constprop.0>
    int err;
    err = read_cpi(&cfg.cpi);
    if (err != 0) {
        LOG_ERR("Failed to read CPI");
    1590:	4b16      	ldr	r3, [pc, #88]	; (15ec <get_pmw3360_cpi+0x84>)
    1592:	4815      	ldr	r0, [pc, #84]	; (15e8 <get_pmw3360_cpi+0x80>)
    1594:	e9c7 5306 	strd	r5, r3, [r7, #24]
    1598:	f107 0218 	add.w	r2, r7, #24
    159c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    15a0:	f00a fb38 	bl	bc14 <z_log_msg_static_create.constprop.0>
        cfg.cpi = -1;
    15a4:	f04f 33ff 	mov.w	r3, #4294967295
    15a8:	6023      	str	r3, [r4, #0]
    }
    return cfg.cpi;
}
    15aa:	6820      	ldr	r0, [r4, #0]
    15ac:	3720      	adds	r7, #32
    15ae:	46bd      	mov	sp, r7
    15b0:	bdb0      	pop	{r4, r5, r7, pc}
    *cpi_value = (value + 1) * 100;
    15b2:	79fa      	ldrb	r2, [r7, #7]
    15b4:	2364      	movs	r3, #100	; 0x64
    15b6:	fb02 3303 	mla	r3, r2, r3, r3
    LOG_DBG("Read CPI value: %u", *cpi_value);
    15ba:	466d      	mov	r5, sp
    15bc:	b088      	sub	sp, #32
    *cpi_value = (value + 1) * 100;
    15be:	6023      	str	r3, [r4, #0]
    LOG_DBG("Read CPI value: %u", *cpi_value);
    15c0:	466a      	mov	r2, sp
    15c2:	490b      	ldr	r1, [pc, #44]	; (15f0 <get_pmw3360_cpi+0x88>)
    15c4:	6151      	str	r1, [r2, #20]
    15c6:	490b      	ldr	r1, [pc, #44]	; (15f4 <get_pmw3360_cpi+0x8c>)
    15c8:	4807      	ldr	r0, [pc, #28]	; (15e8 <get_pmw3360_cpi+0x80>)
    15ca:	e9c2 1306 	strd	r1, r3, [r2, #24]
    15ce:	2304      	movs	r3, #4
    15d0:	f842 3f10 	str.w	r3, [r2, #16]!
    15d4:	f44f 5104 	mov.w	r1, #8448	; 0x2100
    15d8:	f00a fb1c 	bl	bc14 <z_log_msg_static_create.constprop.0>
    15dc:	46ad      	mov	sp, r5
    if (err != 0) {
    15de:	e7e4      	b.n	15aa <get_pmw3360_cpi+0x42>
    15e0:	20000bf0 	.word	0x20000bf0
    15e4:	0000e498 	.word	0x0000e498
    15e8:	0000dbe4 	.word	0x0000dbe4
    15ec:	0000e4b4 	.word	0x0000e4b4
    15f0:	0000e4c7 	.word	0x0000e4c7
    15f4:	0000e4de 	.word	0x0000e4de

000015f8 <get_pmw3360_dx>:

int16_t get_pmw3360_dx(void) {
    return data.x;
}
    15f8:	4b01      	ldr	r3, [pc, #4]	; (1600 <get_pmw3360_dx+0x8>)
    15fa:	f9b3 000c 	ldrsh.w	r0, [r3, #12]
    15fe:	4770      	bx	lr
    1600:	200003e8 	.word	0x200003e8

00001604 <get_pmw3360_dy>:

int16_t get_pmw3360_dy(void) {
    return data.y;
}
    1604:	4b01      	ldr	r3, [pc, #4]	; (160c <get_pmw3360_dy+0x8>)
    1606:	f9b3 000e 	ldrsh.w	r0, [r3, #14]
    160a:	4770      	bx	lr
    160c:	200003e8 	.word	0x200003e8

00001610 <event_handler>:
         RADIO_SHORTS_DISABLED_RSSISTOP_Msk)                            
LOG_MODULE_REGISTER(esb_transmitter, CONFIG_LOG_DEFAULT_LEVEL);

static esb_data_t esb_data = INIT_ESB_DATA(0, 0x01, 0x02, 0x03, 0x04, 0x05);

void event_handler(struct esb_evt const *event) {
    1610:	b510      	push	{r4, lr}
    esb_data.ready = true;
    1612:	4c06      	ldr	r4, [pc, #24]	; (162c <event_handler+0x1c>)
    1614:	2301      	movs	r3, #1
    1616:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
    switch(event -> evt_id) {
    161a:	7803      	ldrb	r3, [r0, #0]
    161c:	2b02      	cmp	r3, #2
    161e:	d104      	bne.n	162a <event_handler+0x1a>
        case ESB_EVENT_TX_SUCCESS:
            break;
        case ESB_EVENT_TX_FAILED:
            break;
        case ESB_EVENT_RX_RECEIVED:
            while (esb_read_rx_payload(&esb_data.received_message) == 1) {
    1620:	4620      	mov	r0, r4
    1622:	f006 fc9f 	bl	7f64 <esb_read_rx_payload>
    1626:	2801      	cmp	r0, #1
    1628:	e7f9      	b.n	161e <event_handler+0xe>
            }
            break;
    }
}
    162a:	bd10      	pop	{r4, pc}
    162c:	200000f8 	.word	0x200000f8

00001630 <clocks_start>:

int clocks_start(void) {
    1630:	b5b0      	push	{r4, r5, r7, lr}
    1632:	b086      	sub	sp, #24
    int res;

    struct onoff_manager *clk_mgr;
    struct onoff_client clk_cli;

    clk_mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    1634:	2000      	movs	r0, #0
int clocks_start(void) {
    1636:	af00      	add	r7, sp, #0
    clk_mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    1638:	f005 f8ca 	bl	67d0 <z_nrf_clock_control_get_onoff>
    if (!clk_mgr) {
    163c:	b980      	cbnz	r0, 1660 <clocks_start+0x30>
        LOG_ERR("Unable to get the Clock manager");
    163e:	4b1b      	ldr	r3, [pc, #108]	; (16ac <clocks_start+0x7c>)
    1640:	617b      	str	r3, [r7, #20]
    1642:	2302      	movs	r3, #2
    1644:	481a      	ldr	r0, [pc, #104]	; (16b0 <clocks_start+0x80>)
    1646:	613b      	str	r3, [r7, #16]
    1648:	f107 0210 	add.w	r2, r7, #16
    164c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
        return -ENXIO;
    1650:	f06f 0405 	mvn.w	r4, #5
        LOG_ERR("Unable to get the Clock manager");
    1654:	f00a fae1 	bl	bc1a <z_log_msg_static_create.constprop.0>
            return res;
        }
    } while (err);
    LOG_DBG("High Frequency clock started");
    return 0;
}
    1658:	4620      	mov	r0, r4
    165a:	3718      	adds	r7, #24
    165c:	46bd      	mov	sp, r7
    165e:	bdb0      	pop	{r4, r5, r7, pc}
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    1660:	2300      	movs	r3, #0
    1662:	607b      	str	r3, [r7, #4]
    1664:	60fb      	str	r3, [r7, #12]
    1666:	2301      	movs	r3, #1
    1668:	60bb      	str	r3, [r7, #8]
    err = onoff_request(clk_mgr, &clk_cli);
    166a:	4639      	mov	r1, r7
    166c:	f00a fdaa 	bl	c1c4 <onoff_request>
    if (err < 0) {
    1670:	1e04      	subs	r4, r0, #0
    1672:	da0f      	bge.n	1694 <clocks_start+0x64>
        LOG_ERR("Clock request failed: %d", err);
    1674:	466d      	mov	r5, sp
    1676:	b088      	sub	sp, #32
    1678:	466a      	mov	r2, sp
    167a:	4b0e      	ldr	r3, [pc, #56]	; (16b4 <clocks_start+0x84>)
            LOG_ERR("Clock could not be started: %d", res);
    167c:	480c      	ldr	r0, [pc, #48]	; (16b0 <clocks_start+0x80>)
    167e:	e9c2 3405 	strd	r3, r4, [r2, #20]
    1682:	2303      	movs	r3, #3
    1684:	f842 3f10 	str.w	r3, [r2, #16]!
    1688:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    168c:	f00a fac5 	bl	bc1a <z_log_msg_static_create.constprop.0>
    1690:	46ad      	mov	sp, r5
            return res;
    1692:	e7e1      	b.n	1658 <clocks_start+0x28>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    1694:	68bb      	ldr	r3, [r7, #8]
	if (sys_notify_get_method(notify) == SYS_NOTIFY_METHOD_COMPLETED) {
    1696:	079b      	lsls	r3, r3, #30
    1698:	d1fc      	bne.n	1694 <clocks_start+0x64>
		*result = notify->result;
    169a:	68fc      	ldr	r4, [r7, #12]
        if (!err && res) {
    169c:	2c00      	cmp	r4, #0
    169e:	d0db      	beq.n	1658 <clocks_start+0x28>
            LOG_ERR("Clock could not be started: %d", res);
    16a0:	466d      	mov	r5, sp
    16a2:	b088      	sub	sp, #32
    16a4:	466a      	mov	r2, sp
    16a6:	4b04      	ldr	r3, [pc, #16]	; (16b8 <clocks_start+0x88>)
    16a8:	e7e8      	b.n	167c <clocks_start+0x4c>
    16aa:	bf00      	nop
    16ac:	0000f551 	.word	0x0000f551
    16b0:	0000db94 	.word	0x0000db94
    16b4:	0000f571 	.word	0x0000f571
    16b8:	0000f58a 	.word	0x0000f58a

000016bc <init_esb>:

int init_esb(void) {
    16bc:	b530      	push	{r4, r5, lr}
    
    int err;
    uint8_t base_addr_0[4] = {0xE7, 0xE7, 0xE7, 0xE7};
    uint8_t base_addr_1[4] = {0xC2, 0xC2, 0xC2, 0xC2};
    16be:	f04f 32e7 	mov.w	r2, #3890735079	; 0xe7e7e7e7
int init_esb(void) {
    16c2:	b091      	sub	sp, #68	; 0x44
    uint8_t base_addr_1[4] = {0xC2, 0xC2, 0xC2, 0xC2};
    16c4:	f04f 33c2 	mov.w	r3, #3267543746	; 0xc2c2c2c2
    16c8:	e9cd 2301 	strd	r2, r3, [sp, #4]
    uint8_t addr_prefix[8] = {0xE7, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8};
    16cc:	4a1e      	ldr	r2, [pc, #120]	; (1748 <init_esb+0x8c>)
    struct esb_config config = ESB_DEFAULT_CONFIG;
    16ce:	4d1f      	ldr	r5, [pc, #124]	; (174c <init_esb+0x90>)
    uint8_t addr_prefix[8] = {0xE7, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8};
    16d0:	6810      	ldr	r0, [r2, #0]
    16d2:	6851      	ldr	r1, [r2, #4]
    16d4:	ab03      	add	r3, sp, #12
    16d6:	c303      	stmia	r3!, {r0, r1}
    struct esb_config config = ESB_DEFAULT_CONFIG;
    16d8:	461c      	mov	r4, r3
    16da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    16dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    16de:	682b      	ldr	r3, [r5, #0]
    16e0:	6023      	str	r3, [r4, #0]

    config.protocol = ESB_PROTOCOL_ESB_DPL;
    config.retransmit_delay = 600; //ms
    config.bitrate = ESB_BITRATE_2MBPS;
    config.crc = ESB_CRC_8BIT;
    16e2:	2301      	movs	r3, #1
    16e4:	f88d 301d 	strb.w	r3, [sp, #29]
    config.event_handler = event_handler;
    16e8:	4b19      	ldr	r3, [pc, #100]	; (1750 <init_esb+0x94>)
    16ea:	9306      	str	r3, [sp, #24]
    config.mode = ESB_MODE_PTX;
    config.use_fast_ramp_up = true;
    config.selective_auto_ack = true;

    err = esb_init(&config);
    16ec:	a805      	add	r0, sp, #20
    config.selective_auto_ack = true;
    16ee:	f240 1301 	movw	r3, #257	; 0x101
    16f2:	f8ad 3026 	strh.w	r3, [sp, #38]	; 0x26
    err = esb_init(&config);
    16f6:	f006 fa61 	bl	7bbc <esb_init>

    if (err) {
    16fa:	4604      	mov	r4, r0
    16fc:	b160      	cbz	r0, 1718 <init_esb+0x5c>
        LOG_ERR("Error initializing esb");
    16fe:	4b15      	ldr	r3, [pc, #84]	; (1754 <init_esb+0x98>)
        return err;
    }   

    err = esb_set_prefixes(addr_prefix, ARRAY_SIZE(addr_prefix));
    if (err) {
        LOG_ERR("Error setting address prefix");
    1700:	930f      	str	r3, [sp, #60]	; 0x3c
    1702:	4815      	ldr	r0, [pc, #84]	; (1758 <init_esb+0x9c>)
    1704:	2302      	movs	r3, #2
    1706:	aa0e      	add	r2, sp, #56	; 0x38
    1708:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    170c:	930e      	str	r3, [sp, #56]	; 0x38
    170e:	f00a fa84 	bl	bc1a <z_log_msg_static_create.constprop.0>
        return err;
    }   

    return 0;
}
    1712:	4620      	mov	r0, r4
    1714:	b011      	add	sp, #68	; 0x44
    1716:	bd30      	pop	{r4, r5, pc}
    err = esb_set_base_address_0(base_addr_0);
    1718:	a801      	add	r0, sp, #4
    171a:	f006 fc8f 	bl	803c <esb_set_base_address_0>
    if (err) {
    171e:	4604      	mov	r4, r0
    1720:	b108      	cbz	r0, 1726 <init_esb+0x6a>
        LOG_ERR("Error setting base address 0");
    1722:	4b0e      	ldr	r3, [pc, #56]	; (175c <init_esb+0xa0>)
    1724:	e7ec      	b.n	1700 <init_esb+0x44>
    err = esb_set_base_address_1(base_addr_1);
    1726:	a802      	add	r0, sp, #8
    1728:	f006 fcaa 	bl	8080 <esb_set_base_address_1>
    if (err) {
    172c:	4604      	mov	r4, r0
    172e:	b108      	cbz	r0, 1734 <init_esb+0x78>
        LOG_ERR("Error setting base address 1");
    1730:	4b0b      	ldr	r3, [pc, #44]	; (1760 <init_esb+0xa4>)
    1732:	e7e5      	b.n	1700 <init_esb+0x44>
    err = esb_set_prefixes(addr_prefix, ARRAY_SIZE(addr_prefix));
    1734:	2108      	movs	r1, #8
    1736:	a803      	add	r0, sp, #12
    1738:	f006 fcc4 	bl	80c4 <esb_set_prefixes>
    if (err) {
    173c:	4604      	mov	r4, r0
    173e:	2800      	cmp	r0, #0
    1740:	d0e7      	beq.n	1712 <init_esb+0x56>
        LOG_ERR("Error setting address prefix");
    1742:	4b08      	ldr	r3, [pc, #32]	; (1764 <init_esb+0xa8>)
    1744:	e7dc      	b.n	1700 <init_esb+0x44>
    1746:	bf00      	nop
    1748:	0000f617 	.word	0x0000f617
    174c:	0000dc50 	.word	0x0000dc50
    1750:	00001611 	.word	0x00001611
    1754:	0000f5a9 	.word	0x0000f5a9
    1758:	0000db94 	.word	0x0000db94
    175c:	0000f5c0 	.word	0x0000f5c0
    1760:	0000f5dd 	.word	0x0000f5dd
    1764:	0000f5fa 	.word	0x0000f5fa

00001768 <init_transceiver>:

int init_transceiver(void) {
    1768:	b5f0      	push	{r4, r5, r6, r7, lr}
    176a:	b087      	sub	sp, #28
    int err;
    LOG_INF("Staring mouse board transceiver");
    176c:	466e      	mov	r6, sp
int init_transceiver(void) {
    176e:	af00      	add	r7, sp, #0
    LOG_INF("Staring mouse board transceiver");
    1770:	4b1b      	ldr	r3, [pc, #108]	; (17e0 <init_transceiver+0x78>)
    1772:	481c      	ldr	r0, [pc, #112]	; (17e4 <init_transceiver+0x7c>)
    1774:	617b      	str	r3, [r7, #20]
    1776:	2502      	movs	r5, #2
    1778:	f107 0210 	add.w	r2, r7, #16
    177c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    1780:	613d      	str	r5, [r7, #16]
    1782:	f00a fa4a 	bl	bc1a <z_log_msg_static_create.constprop.0>
    err = clocks_start();
    1786:	f7ff ff53 	bl	1630 <clocks_start>
    if (err) {
    178a:	b988      	cbnz	r0, 17b0 <init_transceiver+0x48>
        return -1;
    }
    err = init_esb();
    178c:	f7ff ff96 	bl	16bc <init_esb>
    if (err) {
    1790:	4604      	mov	r4, r0
    1792:	b198      	cbz	r0, 17bc <init_transceiver+0x54>
        LOG_ERR("ESB init failed, err %d", err);
    1794:	b088      	sub	sp, #32
    1796:	466a      	mov	r2, sp
    1798:	4b13      	ldr	r3, [pc, #76]	; (17e8 <init_transceiver+0x80>)
    179a:	e9c2 3005 	strd	r3, r0, [r2, #20]
    179e:	2303      	movs	r3, #3
    17a0:	f842 3f10 	str.w	r3, [r2, #16]!
    17a4:	480f      	ldr	r0, [pc, #60]	; (17e4 <init_transceiver+0x7c>)
    17a6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    17aa:	f00a fa36 	bl	bc1a <z_log_msg_static_create.constprop.0>
    17ae:	46b5      	mov	sp, r6
        return -1;
    17b0:	f04f 34ff 	mov.w	r4, #4294967295
    }
    LOG_INF("Initialization complete");
    esb_data.ready = true;
    esb_data.message.noack = false;
    return 0;
}
    17b4:	4620      	mov	r0, r4
    17b6:	371c      	adds	r7, #28
    17b8:	46bd      	mov	sp, r7
    17ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
    LOG_INF("Initialization complete");
    17bc:	4b0b      	ldr	r3, [pc, #44]	; (17ec <init_transceiver+0x84>)
    17be:	4809      	ldr	r0, [pc, #36]	; (17e4 <init_transceiver+0x7c>)
    17c0:	e9c7 5304 	strd	r5, r3, [r7, #16]
    17c4:	f107 0210 	add.w	r2, r7, #16
    17c8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    17cc:	f00a fa25 	bl	bc1a <z_log_msg_static_create.constprop.0>
    esb_data.ready = true;
    17d0:	4b07      	ldr	r3, [pc, #28]	; (17f0 <init_transceiver+0x88>)
    17d2:	2201      	movs	r2, #1
    17d4:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
    esb_data.message.noack = false;
    17d8:	f883 4028 	strb.w	r4, [r3, #40]	; 0x28
    return 0;
    17dc:	e7ea      	b.n	17b4 <init_transceiver+0x4c>
    17de:	bf00      	nop
    17e0:	0000f620 	.word	0x0000f620
    17e4:	0000db94 	.word	0x0000db94
    17e8:	0000f640 	.word	0x0000f640
    17ec:	0000f658 	.word	0x0000f658
    17f0:	200000f8 	.word	0x200000f8

000017f4 <esb_create_message>:

int esb_create_message(const mouse_t *mouse) {
    uint8_t button_bm = 0;
	for (size_t i = 0; i < 5; i++) {
    17f4:	2300      	movs	r3, #0
int esb_create_message(const mouse_t *mouse) {
    17f6:	b530      	push	{r4, r5, lr}
    17f8:	1d42      	adds	r2, r0, #5
    uint8_t button_bm = 0;
    17fa:	461c      	mov	r4, r3
        if (mouse->button_states[i]) {
		    uint8_t mask = 1 << (i);
    17fc:	2101      	movs	r1, #1
        if (mouse->button_states[i]) {
    17fe:	f812 5f01 	ldrb.w	r5, [r2, #1]!
    1802:	b11d      	cbz	r5, 180c <esb_create_message+0x18>
		    uint8_t mask = 1 << (i);
    1804:	fa01 f503 	lsl.w	r5, r1, r3
		    button_bm |= mask;
    1808:	432c      	orrs	r4, r5
    180a:	b2e4      	uxtb	r4, r4
	for (size_t i = 0; i < 5; i++) {
    180c:	3301      	adds	r3, #1
    180e:	2b05      	cmp	r3, #5
    1810:	d1f5      	bne.n	17fe <esb_create_message+0xa>
	}
    uint8_t x_buf[sizeof(mouse->motion_info.dx)];
    uint8_t y_buf[sizeof(mouse->motion_info.dy)];
    sys_put_le16(mouse->motion_info.dx, x_buf);
    sys_put_le16(mouse->motion_info.dy, y_buf);
    esb_data.message.data[0] = button_bm; //button_bit_mask;
    1812:	490e      	ldr	r1, [pc, #56]	; (184c <esb_create_message+0x58>)
    sys_put_le16(mouse->motion_info.dx, x_buf);
    1814:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
	dst[0] = val;
    1818:	7903      	ldrb	r3, [r0, #4]
    sys_put_le16(mouse->motion_info.dy, y_buf);
    181a:	f9b0 5004 	ldrsh.w	r5, [r0, #4]
    esb_data.message.data[0] = button_bm; //button_bit_mask;
    181e:	f881 402a 	strb.w	r4, [r1, #42]	; 0x2a
    esb_data.message.data[1] = mouse->wheel_data.rotation; // wheel;
    1822:	8800      	ldrh	r0, [r0, #0]
    1824:	f881 202c 	strb.w	r2, [r1, #44]	; 0x2c
    esb_data.message.data[2] = x_buf[0];
    esb_data.message.data[3] = (y_buf[0] << 4) | (x_buf[1] & 0x0f);
    1828:	f3c2 2203 	ubfx	r2, r2, #8, #4
    182c:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
    1830:	f881 202d 	strb.w	r2, [r1, #45]	; 0x2d
    esb_data.message.data[4] = (y_buf[1] << 4) | (y_buf[0] >> 4);
    1834:	091b      	lsrs	r3, r3, #4
    1836:	f3c5 2207 	ubfx	r2, r5, #8, #8
    183a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    esb_data.message.data[1] = mouse->wheel_data.rotation; // wheel;
    183e:	f881 002b 	strb.w	r0, [r1, #43]	; 0x2b
    esb_data.message.data[4] = (y_buf[1] << 4) | (y_buf[0] >> 4);
    1842:	f881 302e 	strb.w	r3, [r1, #46]	; 0x2e
    return 0;
}
    1846:	2000      	movs	r0, #0
    1848:	bd30      	pop	{r4, r5, pc}
    184a:	bf00      	nop
    184c:	200000f8 	.word	0x200000f8

00001850 <write_message>:

int write_message() {
    1850:	b598      	push	{r3, r4, r7, lr}
    int err;
    // LOG_DBG("Esb_data ready {%u}", esb_data.ready);
    if (esb_data.ready) {
    1852:	4c12      	ldr	r4, [pc, #72]	; (189c <write_message+0x4c>)
    1854:	f894 304a 	ldrb.w	r3, [r4, #74]	; 0x4a
int write_message() {
    1858:	af00      	add	r7, sp, #0
    if (esb_data.ready) {
    185a:	b91b      	cbnz	r3, 1864 <write_message+0x14>
        esb_data.ready = false;
        esb_flush_tx();
        err = esb_write_payload(&esb_data.message);
        if (err) {
            LOG_ERR("Failed to write, err: %d", err);
            return -1;
    185c:	f04f 30ff 	mov.w	r0, #4294967295
        }
        return 0;
    }
    return -1;
}
    1860:	46bd      	mov	sp, r7
    1862:	bd98      	pop	{r3, r4, r7, pc}
        esb_data.ready = false;
    1864:	2300      	movs	r3, #0
    1866:	f884 304a 	strb.w	r3, [r4, #74]	; 0x4a
        esb_flush_tx();
    186a:	f006 fbcb 	bl	8004 <esb_flush_tx>
        err = esb_write_payload(&esb_data.message);
    186e:	f104 0025 	add.w	r0, r4, #37	; 0x25
    1872:	f006 fad1 	bl	7e18 <esb_write_payload>
        if (err) {
    1876:	2800      	cmp	r0, #0
    1878:	d0f2      	beq.n	1860 <write_message+0x10>
            LOG_ERR("Failed to write, err: %d", err);
    187a:	466c      	mov	r4, sp
    187c:	b088      	sub	sp, #32
    187e:	466a      	mov	r2, sp
    1880:	4b07      	ldr	r3, [pc, #28]	; (18a0 <write_message+0x50>)
    1882:	e9c2 3005 	strd	r3, r0, [r2, #20]
    1886:	2303      	movs	r3, #3
    1888:	f842 3f10 	str.w	r3, [r2, #16]!
    188c:	4805      	ldr	r0, [pc, #20]	; (18a4 <write_message+0x54>)
    188e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    1892:	f00a f9c2 	bl	bc1a <z_log_msg_static_create.constprop.0>
    1896:	46a5      	mov	sp, r4
            return -1;
    1898:	e7e0      	b.n	185c <write_message+0xc>
    189a:	bf00      	nop
    189c:	200000f8 	.word	0x200000f8
    18a0:	0000f670 	.word	0x0000f670
    18a4:	0000db94 	.word	0x0000db94

000018a8 <esb_line_busy>:

bool esb_line_busy(void) {
    return !esb_data.ready;
    18a8:	4b02      	ldr	r3, [pc, #8]	; (18b4 <esb_line_busy+0xc>)
    18aa:	f893 004a 	ldrb.w	r0, [r3, #74]	; 0x4a
    18ae:	f080 0001 	eor.w	r0, r0, #1
    18b2:	4770      	bx	lr
    18b4:	200000f8 	.word	0x200000f8

000018b8 <int_in_ready_cb>:
static uint8_t message_buffer[MESSAGE_SIZE];
static bool transmission_busy = false;

void int_in_ready_cb(const struct device *dev) {
    ARG_UNUSED(dev);
    transmission_busy = false;
    18b8:	4b01      	ldr	r3, [pc, #4]	; (18c0 <int_in_ready_cb+0x8>)
    18ba:	2200      	movs	r2, #0
    18bc:	701a      	strb	r2, [r3, #0]
}
    18be:	4770      	bx	lr
    18c0:	20001c2c 	.word	0x20001c2c

000018c4 <status_callback>:

void status_callback(enum usb_dc_status_code status, const uint8_t *param) {
    usb_device.status = status;
    18c4:	4b01      	ldr	r3, [pc, #4]	; (18cc <status_callback+0x8>)
    18c6:	7118      	strb	r0, [r3, #4]
}
    18c8:	4770      	bx	lr
    18ca:	bf00      	nop
    18cc:	20000bf4 	.word	0x20000bf4

000018d0 <init_usb>:

static const struct hid_ops ops = {
    .int_in_ready = int_in_ready_cb
};

int init_usb(void) {
    18d0:	b510      	push	{r4, lr}
    18d2:	b086      	sub	sp, #24
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    18d4:	4818      	ldr	r0, [pc, #96]	; (1938 <init_usb+0x68>)
    usb_device.dev = device_get_binding(HID_DEVICE_ID); 
    18d6:	4c19      	ldr	r4, [pc, #100]	; (193c <init_usb+0x6c>)
    18d8:	f008 fe5a 	bl	a590 <z_impl_device_get_binding>
    18dc:	4603      	mov	r3, r0
    18de:	6020      	str	r0, [r4, #0]
    if (!usb_device.dev) {
    18e0:	b970      	cbnz	r0, 1900 <init_usb+0x30>
        LOG_ERR("Failed to get USB device binding");
    18e2:	4a17      	ldr	r2, [pc, #92]	; (1940 <init_usb+0x70>)
    18e4:	9205      	str	r2, [sp, #20]
    18e6:	2202      	movs	r2, #2
    18e8:	9204      	str	r2, [sp, #16]
    18ea:	4816      	ldr	r0, [pc, #88]	; (1944 <init_usb+0x74>)
    18ec:	aa04      	add	r2, sp, #16
    18ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
        return -ENODEV;
    18f2:	f06f 0412 	mvn.w	r4, #18
    18f6:	f001 fbc3 	bl	3080 <z_impl_z_log_msg_static_create>
        LOG_ERR("Failed to initialize USB HID");
        return err;
    }

    return usb_enable(status_callback);
}
    18fa:	4620      	mov	r0, r4
    18fc:	b006      	add	sp, #24
    18fe:	bd10      	pop	{r4, pc}
    usb_hid_register_device(
    1900:	4b11      	ldr	r3, [pc, #68]	; (1948 <init_usb+0x78>)
    1902:	4912      	ldr	r1, [pc, #72]	; (194c <init_usb+0x7c>)
    1904:	223e      	movs	r2, #62	; 0x3e
    1906:	f003 ff1d 	bl	5744 <usb_hid_register_device>
    int err = usb_hid_init(usb_device.dev);
    190a:	6820      	ldr	r0, [r4, #0]
    190c:	f00b f93c 	bl	cb88 <usb_hid_init>
    if (err) {
    1910:	4604      	mov	r4, r0
    1912:	b158      	cbz	r0, 192c <init_usb+0x5c>
        LOG_ERR("Failed to initialize USB HID");
    1914:	4b0e      	ldr	r3, [pc, #56]	; (1950 <init_usb+0x80>)
    1916:	9305      	str	r3, [sp, #20]
    1918:	2302      	movs	r3, #2
    191a:	9304      	str	r3, [sp, #16]
    191c:	4809      	ldr	r0, [pc, #36]	; (1944 <init_usb+0x74>)
    191e:	2300      	movs	r3, #0
    1920:	aa04      	add	r2, sp, #16
    1922:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    1926:	f001 fbab 	bl	3080 <z_impl_z_log_msg_static_create>
        return err;
    192a:	e7e6      	b.n	18fa <init_usb+0x2a>
    return usb_enable(status_callback);
    192c:	4809      	ldr	r0, [pc, #36]	; (1954 <init_usb+0x84>)
}
    192e:	b006      	add	sp, #24
    1930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return usb_enable(status_callback);
    1934:	f002 bc48 	b.w	41c8 <usb_enable>
    1938:	0000f699 	.word	0x0000f699
    193c:	20000bf4 	.word	0x20000bf4
    1940:	0000f69f 	.word	0x0000f69f
    1944:	0000dc04 	.word	0x0000dc04
    1948:	0000dcd4 	.word	0x0000dcd4
    194c:	0000f6e1 	.word	0x0000f6e1
    1950:	0000f6c0 	.word	0x0000f6c0
    1954:	000018c5 	.word	0x000018c5

00001958 <hid_write>:

int hid_write(const mouse_t* mouse) {
    uint8_t button_bm = 0;
    for (size_t i = 0; i < 5; i++) {
    1958:	2300      	movs	r3, #0
int hid_write(const mouse_t* mouse) {
    195a:	b570      	push	{r4, r5, r6, lr}
    195c:	1d42      	adds	r2, r0, #5
    uint8_t button_bm = 0;
    195e:	461d      	mov	r5, r3
        if (mouse->button_states[i]) {
            button_bm |= (1 << i);
    1960:	2101      	movs	r1, #1
        if (mouse->button_states[i]) {
    1962:	f812 4f01 	ldrb.w	r4, [r2, #1]!
    1966:	b11c      	cbz	r4, 1970 <hid_write+0x18>
            button_bm |= (1 << i);
    1968:	fa01 f403 	lsl.w	r4, r1, r3
    196c:	4325      	orrs	r5, r4
    196e:	b2ed      	uxtb	r5, r5
    for (size_t i = 0; i < 5; i++) {
    1970:	3301      	adds	r3, #1
    1972:	2b05      	cmp	r3, #5
    1974:	d1f5      	bne.n	1962 <hid_write+0xa>
    uint8_t y_buf[sizeof(mouse->motion_info.dy)];

    sys_put_le16(mouse->motion_info.dx, x_buf);
    sys_put_le16(mouse->motion_info.dy, y_buf);

    message_buffer[0] = 0x01;
    1976:	4910      	ldr	r1, [pc, #64]	; (19b8 <hid_write+0x60>)
    sys_put_le16(mouse->motion_info.dx, x_buf);
    1978:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
    197c:	7903      	ldrb	r3, [r0, #4]
    message_buffer[1] = button_bm;
    197e:	704d      	strb	r5, [r1, #1]
    message_buffer[0] = 0x01;
    1980:	2401      	movs	r4, #1
    1982:	700c      	strb	r4, [r1, #0]
    sys_put_le16(mouse->motion_info.dy, y_buf);
    1984:	f9b0 6004 	ldrsh.w	r6, [r0, #4]
    message_buffer[2] = mouse->wheel_data.rotation;
    1988:	8800      	ldrh	r0, [r0, #0]
    198a:	70ca      	strb	r2, [r1, #3]
    message_buffer[3] = x_buf[0];
    message_buffer[4] = (y_buf[0] << 4) | (x_buf[1] & 0x0f);
    198c:	f3c2 2203 	ubfx	r2, r2, #8, #4
    1990:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
    message_buffer[2] = mouse->wheel_data.rotation;
    1994:	7088      	strb	r0, [r1, #2]
    message_buffer[4] = (y_buf[0] << 4) | (x_buf[1] & 0x0f);
    1996:	710a      	strb	r2, [r1, #4]
    message_buffer[5] = (y_buf[1] << 4) | (y_buf[0] >> 4);

    int err = hid_int_ep_write(usb_device.dev, message_buffer, MESSAGE_SIZE, NULL);
    1998:	4808      	ldr	r0, [pc, #32]	; (19bc <hid_write+0x64>)
    message_buffer[5] = (y_buf[1] << 4) | (y_buf[0] >> 4);
    199a:	f3c6 2207 	ubfx	r2, r6, #8, #8
    199e:	091b      	lsrs	r3, r3, #4
    19a0:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
    19a4:	714b      	strb	r3, [r1, #5]
    int err = hid_int_ep_write(usb_device.dev, message_buffer, MESSAGE_SIZE, NULL);
    19a6:	6800      	ldr	r0, [r0, #0]
    19a8:	2300      	movs	r3, #0
    19aa:	2206      	movs	r2, #6
    19ac:	f003 fee0 	bl	5770 <hid_int_ep_write>
    if (err == 0) {
    19b0:	b908      	cbnz	r0, 19b6 <hid_write+0x5e>
        transmission_busy = true;
    19b2:	4b03      	ldr	r3, [pc, #12]	; (19c0 <hid_write+0x68>)
    19b4:	701c      	strb	r4, [r3, #0]
    }
    return err;
}
    19b6:	bd70      	pop	{r4, r5, r6, pc}
    19b8:	20001c2d 	.word	0x20001c2d
    19bc:	20000bf4 	.word	0x20000bf4
    19c0:	20001c2c 	.word	0x20001c2c

000019c4 <usb_line_busy>:

bool usb_line_busy(void) {
    return transmission_busy;
}
    19c4:	4b01      	ldr	r3, [pc, #4]	; (19cc <usb_line_busy+0x8>)
    19c6:	7818      	ldrb	r0, [r3, #0]
    19c8:	4770      	bx	lr
    19ca:	bf00      	nop
    19cc:	20001c2c 	.word	0x20001c2c

000019d0 <init_wheel>:

LOG_MODULE_REGISTER(wheel, CONFIG_LOG_DEFAULT_LEVEL);

static const struct device *qdec_dev = DEVICE_DT_GET(DT_NODELABEL(qdec));

int init_wheel(void) {
    19d0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    19d2:	480b      	ldr	r0, [pc, #44]	; (1a00 <init_wheel+0x30>)
    19d4:	f00b fcae 	bl	d334 <z_device_is_ready>
    if (!device_is_ready(qdec_dev)) {
    19d8:	4603      	mov	r3, r0
    19da:	b970      	cbnz	r0, 19fa <init_wheel+0x2a>
        LOG_ERR("QDEC not ready!");
    19dc:	4a09      	ldr	r2, [pc, #36]	; (1a04 <init_wheel+0x34>)
    19de:	9205      	str	r2, [sp, #20]
    19e0:	2202      	movs	r2, #2
    19e2:	9204      	str	r2, [sp, #16]
    19e4:	4808      	ldr	r0, [pc, #32]	; (1a08 <init_wheel+0x38>)
    19e6:	aa04      	add	r2, sp, #16
    19e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    19ec:	f001 fb48 	bl	3080 <z_impl_z_log_msg_static_create>
        return -1;
    19f0:	f04f 30ff 	mov.w	r0, #4294967295
    }
    return 0;
}
    19f4:	b007      	add	sp, #28
    19f6:	f85d fb04 	ldr.w	pc, [sp], #4
    return 0;
    19fa:	2000      	movs	r0, #0
    19fc:	e7fa      	b.n	19f4 <init_wheel+0x24>
    19fe:	bf00      	nop
    1a00:	0000daec 	.word	0x0000daec
    1a04:	0000f71f 	.word	0x0000f71f
    1a08:	0000dc34 	.word	0x0000dc34

00001a0c <fetch_wheel_data>:

wheel_data_t fetch_wheel_data() {
    1a0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    1a0e:	4c07      	ldr	r4, [pc, #28]	; (1a2c <fetch_wheel_data+0x20>)
    1a10:	68a5      	ldr	r5, [r4, #8]
    1a12:	2139      	movs	r1, #57	; 0x39
    1a14:	68eb      	ldr	r3, [r5, #12]
    1a16:	4620      	mov	r0, r4
    1a18:	4798      	blx	r3
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
    1a1a:	2122      	movs	r1, #34	; 0x22
    1a1c:	692b      	ldr	r3, [r5, #16]
    1a1e:	466a      	mov	r2, sp
    1a20:	4620      	mov	r0, r4
    1a22:	4798      	blx	r3
    wheel_data_t data;
    /* Negative as thats what USB expects */
    data.rotation = -wheel;

    return data;
}
    1a24:	9800      	ldr	r0, [sp, #0]
    1a26:	4240      	negs	r0, r0
    1a28:	b003      	add	sp, #12
    1a2a:	bd30      	pop	{r4, r5, pc}
    1a2c:	0000daec 	.word	0x0000daec

00001a30 <cbvprintf_package>:
	return cb(str, strl, ctx);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
    1a30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1a34:	b091      	sub	sp, #68	; 0x44
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
	bool is_str_arg = false;
	union cbprintf_package_hdr *pkg_hdr = packaged;

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
    1a36:	0784      	lsls	r4, r0, #30
{
    1a38:	9300      	str	r3, [sp, #0]
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
    1a3a:	f002 0304 	and.w	r3, r2, #4
    1a3e:	9302      	str	r3, [sp, #8]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    1a40:	f3c2 03c2 	ubfx	r3, r2, #3, #3
    1a44:	f103 0301 	add.w	r3, r3, #1
    1a48:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
{
    1a4c:	9203      	str	r2, [sp, #12]
    1a4e:	4605      	mov	r5, r0
    1a50:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
    1a52:	9305      	str	r3, [sp, #20]
	if ((uintptr_t)packaged % sizeof(void *)) {
    1a54:	f040 81be 	bne.w	1dd4 <cbvprintf_package+0x3a4>
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * multiple of pointer size for the above to preserve alignment.
	 *
	 * Refer to union cbprintf_package_hdr for more details.
	 */
	buf += sizeof(*pkg_hdr);
    1a58:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
    1a5a:	b130      	cbz	r0, 1a6a <cbvprintf_package+0x3a>

	/*
	 * Otherwise we must ensure we can store at least
	 * the pointer to the format string itself.
	 */
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
    1a5c:	2907      	cmp	r1, #7
    1a5e:	d809      	bhi.n	1a74 <cbvprintf_package+0x44>
		return -ENOSPC;
    1a60:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
    1a64:	b011      	add	sp, #68	; 0x44
    1a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
    1a6a:	f001 0607 	and.w	r6, r1, #7
    1a6e:	1d34      	adds	r4, r6, #4
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
    1a70:	f1c6 0608 	rsb	r6, r6, #8
	s = fmt--;
    1a74:	9b00      	ldr	r3, [sp, #0]
	unsigned int s_ro_cnt = 0; /* number of ro strings */
    1a76:	f04f 0900 	mov.w	r9, #0
	s = fmt--;
    1a7a:	1e59      	subs	r1, r3, #1
	align = VA_STACK_ALIGN(char *);
    1a7c:	f04f 0a04 	mov.w	sl, #4
	int arg_idx	      = -1; /* Argument index. Preincremented thus starting from -1.*/
    1a80:	f04f 33ff 	mov.w	r3, #4294967295
    1a84:	9301      	str	r3, [sp, #4]
	unsigned int s_rw_cnt = 0; /* number of rw strings */
    1a86:	f8cd 9010 	str.w	r9, [sp, #16]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
    1a8a:	464f      	mov	r7, r9
	bool parsing = false;
    1a8c:	46cb      	mov	fp, r9
	size = sizeof(char *);
    1a8e:	4653      	mov	r3, sl
			if (buf0 != NULL) {
    1a90:	b10d      	cbz	r5, 1a96 <cbvprintf_package+0x66>
				*(const char **)buf = s;
    1a92:	9a00      	ldr	r2, [sp, #0]
    1a94:	6022      	str	r2, [r4, #0]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1a96:	9805      	ldr	r0, [sp, #20]
    1a98:	2800      	cmp	r0, #0
    1a9a:	f300 80eb 	bgt.w	1c74 <cbvprintf_package+0x244>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
    1a9e:	489a      	ldr	r0, [pc, #616]	; (1d08 <cbvprintf_package+0x2d8>)
    1aa0:	9a00      	ldr	r2, [sp, #0]
    1aa2:	4282      	cmp	r2, r0
    1aa4:	d303      	bcc.n	1aae <cbvprintf_package+0x7e>
    1aa6:	4899      	ldr	r0, [pc, #612]	; (1d0c <cbvprintf_package+0x2dc>)
    1aa8:	4282      	cmp	r2, r0
    1aaa:	f0c0 80e3 	bcc.w	1c74 <cbvprintf_package+0x244>
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1aae:	9a03      	ldr	r2, [sp, #12]
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1ab0:	eba4 0e05 	sub.w	lr, r4, r5
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1ab4:	0792      	lsls	r2, r2, #30
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1ab6:	ea4f 009e 	mov.w	r0, lr, lsr #2
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1aba:	f100 8106 	bmi.w	1cca <cbvprintf_package+0x29a>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    1abe:	2f0f      	cmp	r7, #15
    1ac0:	f200 80b4 	bhi.w	1c2c <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
    1ac4:	2d00      	cmp	r5, #0
    1ac6:	f000 8108 	beq.w	1cda <cbvprintf_package+0x2aa>
					str_ptr_pos[s_idx] = s_ptr_idx;
    1aca:	f107 0240 	add.w	r2, r7, #64	; 0x40
    1ace:	eb0d 0c02 	add.w	ip, sp, r2
					str_ptr_arg[s_idx] = arg_idx;
    1ad2:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    1ad4:	f80c 0c20 	strb.w	r0, [ip, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    1ad8:	f80c 2c10 	strb.w	r2, [ip, #-16]
						s_rw_cnt++;
    1adc:	9804      	ldr	r0, [sp, #16]
    1ade:	3001      	adds	r0, #1
    1ae0:	9004      	str	r0, [sp, #16]
    1ae2:	e0ea      	b.n	1cba <cbvprintf_package+0x28a>
			switch (*fmt) {
    1ae4:	287a      	cmp	r0, #122	; 0x7a
    1ae6:	d860      	bhi.n	1baa <cbvprintf_package+0x17a>
    1ae8:	284b      	cmp	r0, #75	; 0x4b
    1aea:	d80e      	bhi.n	1b0a <cbvprintf_package+0xda>
    1aec:	2847      	cmp	r0, #71	; 0x47
    1aee:	d85c      	bhi.n	1baa <cbvprintf_package+0x17a>
    1af0:	2829      	cmp	r0, #41	; 0x29
    1af2:	d82f      	bhi.n	1b54 <cbvprintf_package+0x124>
    1af4:	2825      	cmp	r0, #37	; 0x25
    1af6:	d055      	beq.n	1ba4 <cbvprintf_package+0x174>
    1af8:	d857      	bhi.n	1baa <cbvprintf_package+0x17a>
    1afa:	2820      	cmp	r0, #32
    1afc:	d07d      	beq.n	1bfa <cbvprintf_package+0x1ca>
    1afe:	3823      	subs	r0, #35	; 0x23
    1b00:	f1d0 0b00 	rsbs	fp, r0, #0
    1b04:	eb4b 0b00 	adc.w	fp, fp, r0
    1b08:	e077      	b.n	1bfa <cbvprintf_package+0x1ca>
    1b0a:	f1a0 0c4c 	sub.w	ip, r0, #76	; 0x4c
    1b0e:	f1bc 0f2e 	cmp.w	ip, #46	; 0x2e
    1b12:	d84a      	bhi.n	1baa <cbvprintf_package+0x17a>
    1b14:	e8df f00c 	tbb	[pc, ip]
    1b18:	49494971 	.word	0x49494971
    1b1c:	49494949 	.word	0x49494949
    1b20:	49494949 	.word	0x49494949
    1b24:	4949494c 	.word	0x4949494c
    1b28:	49494949 	.word	0x49494949
    1b2c:	4c495a49 	.word	0x4c495a49
    1b30:	5a5a5a4c 	.word	0x5a5a5a4c
    1b34:	496e4c71 	.word	0x496e4c71
    1b38:	4c184971 	.word	0x4c184971
    1b3c:	83494918 	.word	0x83494918
    1b40:	49494c80 	.word	0x49494c80
    1b44:	494c      	.short	0x494c
    1b46:	80          	.byte	0x80
    1b47:	00          	.byte	0x00
    1b48:	2000      	movs	r0, #0
    1b4a:	f04f 0b00 	mov.w	fp, #0
				align = VA_STACK_ALIGN(void *);
    1b4e:	f04f 0a04 	mov.w	sl, #4
    1b52:	e039      	b.n	1bc8 <cbvprintf_package+0x198>
			switch (*fmt) {
    1b54:	f1a0 0c2a 	sub.w	ip, r0, #42	; 0x2a
    1b58:	fa5f fc8c 	uxtb.w	ip, ip
    1b5c:	2201      	movs	r2, #1
    1b5e:	fa02 fc0c 	lsl.w	ip, r2, ip
    1b62:	ea1c 0f0e 	tst.w	ip, lr
    1b66:	d148      	bne.n	1bfa <cbvprintf_package+0x1ca>
    1b68:	f01c 5062 	ands.w	r0, ip, #947912704	; 0x38800000
    1b6c:	d12e      	bne.n	1bcc <cbvprintf_package+0x19c>
    1b6e:	ea1c 0b02 	ands.w	fp, ip, r2
    1b72:	d042      	beq.n	1bfa <cbvprintf_package+0x1ca>
		buf = (void *) ROUND_UP(buf, align);
    1b74:	3c01      	subs	r4, #1
    1b76:	4454      	add	r4, sl
    1b78:	f1ca 0c00 	rsb	ip, sl, #0
    1b7c:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
    1b80:	2d00      	cmp	r5, #0
    1b82:	d061      	beq.n	1c48 <cbvprintf_package+0x218>
    1b84:	eba3 0c05 	sub.w	ip, r3, r5
    1b88:	44a4      	add	ip, r4
    1b8a:	45b4      	cmp	ip, r6
    1b8c:	f63f af68 	bhi.w	1a60 <cbvprintf_package+0x30>
		if (is_str_arg) {
    1b90:	2800      	cmp	r0, #0
    1b92:	d168      	bne.n	1c66 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
    1b94:	2b04      	cmp	r3, #4
    1b96:	d147      	bne.n	1c28 <cbvprintf_package+0x1f8>
			int v = va_arg(ap, int);
    1b98:	f858 3b04 	ldr.w	r3, [r8], #4
				*(int *)buf = v;
    1b9c:	6023      	str	r3, [r4, #0]
			buf += sizeof(int);
    1b9e:	3404      	adds	r4, #4
    1ba0:	2304      	movs	r3, #4
    1ba2:	e02a      	b.n	1bfa <cbvprintf_package+0x1ca>
				arg_idx--;
    1ba4:	9a01      	ldr	r2, [sp, #4]
    1ba6:	3a01      	subs	r2, #1
    1ba8:	9201      	str	r2, [sp, #4]
				parsing = false;
    1baa:	f04f 0b00 	mov.w	fp, #0
				continue;
    1bae:	e024      	b.n	1bfa <cbvprintf_package+0x1ca>
				if (fmt[-1] == 'l') {
    1bb0:	f811 0c01 	ldrb.w	r0, [r1, #-1]
    1bb4:	286c      	cmp	r0, #108	; 0x6c
    1bb6:	d134      	bne.n	1c22 <cbvprintf_package+0x1f2>
					if (fmt[-2] == 'l') {
    1bb8:	f811 3c02 	ldrb.w	r3, [r1, #-2]
    1bbc:	2000      	movs	r0, #0
    1bbe:	2b6c      	cmp	r3, #108	; 0x6c
				parsing = false;
    1bc0:	4683      	mov	fp, r0
					if (fmt[-2] == 'l') {
    1bc2:	d1c4      	bne.n	1b4e <cbvprintf_package+0x11e>
						align = VA_STACK_ALIGN(long long);
    1bc4:	f04f 0a08 	mov.w	sl, #8
				size = sizeof(void *);
    1bc8:	4653      	mov	r3, sl
    1bca:	e7d3      	b.n	1b74 <cbvprintf_package+0x144>
					v.ld = va_arg(ap, long double);
    1bcc:	f108 0807 	add.w	r8, r8, #7
    1bd0:	f028 0807 	bic.w	r8, r8, #7
				buf = (void *) ROUND_UP(buf, align);
    1bd4:	3407      	adds	r4, #7
					v.ld = va_arg(ap, long double);
    1bd6:	e8f8 ab02 	ldrd	sl, fp, [r8], #8
				buf = (void *) ROUND_UP(buf, align);
    1bda:	f024 0407 	bic.w	r4, r4, #7
				if (buf0 != NULL) {
    1bde:	b135      	cbz	r5, 1bee <cbvprintf_package+0x1be>
					if (BUF_OFFSET + size > len) {
    1be0:	9806      	ldr	r0, [sp, #24]
    1be2:	4420      	add	r0, r4
    1be4:	42b0      	cmp	r0, r6
    1be6:	f63f af3b 	bhi.w	1a60 <cbvprintf_package+0x30>
						*(long double *)buf = v.ld;
    1bea:	e9c4 ab00 	strd	sl, fp, [r4]
				buf += size;
    1bee:	3408      	adds	r4, #8
				parsing = false;
    1bf0:	f04f 0b00 	mov.w	fp, #0
			switch (*fmt) {
    1bf4:	f04f 0a08 	mov.w	sl, #8
    1bf8:	4653      	mov	r3, sl
			if (*++fmt == '\0') {
    1bfa:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    1bfe:	2800      	cmp	r0, #0
    1c00:	d078      	beq.n	1cf4 <cbvprintf_package+0x2c4>
			if (!parsing) {
    1c02:	f1bb 0f00 	cmp.w	fp, #0
    1c06:	f47f af6d 	bne.w	1ae4 <cbvprintf_package+0xb4>
				if (*fmt == '%') {
    1c0a:	2825      	cmp	r0, #37	; 0x25
    1c0c:	d1f5      	bne.n	1bfa <cbvprintf_package+0x1ca>
					arg_idx++;
    1c0e:	9b01      	ldr	r3, [sp, #4]
    1c10:	3301      	adds	r3, #1
    1c12:	9301      	str	r3, [sp, #4]
					parsing = true;
    1c14:	f04f 0b01 	mov.w	fp, #1
				align = VA_STACK_ALIGN(size_t);
    1c18:	f04f 0a04 	mov.w	sl, #4
    1c1c:	e7ec      	b.n	1bf8 <cbvprintf_package+0x1c8>
			switch (*fmt) {
    1c1e:	4658      	mov	r0, fp
    1c20:	e793      	b.n	1b4a <cbvprintf_package+0x11a>
    1c22:	2000      	movs	r0, #0
				parsing = false;
    1c24:	4683      	mov	fp, r0
    1c26:	e7a5      	b.n	1b74 <cbvprintf_package+0x144>
		} else if (size == sizeof(long long)) {
    1c28:	2b08      	cmp	r3, #8
    1c2a:	d002      	beq.n	1c32 <cbvprintf_package+0x202>
					return -EINVAL;
    1c2c:	f06f 0015 	mvn.w	r0, #21
    1c30:	e718      	b.n	1a64 <cbvprintf_package+0x34>
			long long v = va_arg(ap, long long);
    1c32:	f108 0807 	add.w	r8, r8, #7
    1c36:	f028 0807 	bic.w	r8, r8, #7
    1c3a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
					*(long long *)buf = v;
    1c3e:	e9c4 2300 	strd	r2, r3, [r4]
			buf += sizeof(long long);
    1c42:	3408      	adds	r4, #8
    1c44:	2308      	movs	r3, #8
    1c46:	e7d8      	b.n	1bfa <cbvprintf_package+0x1ca>
		if (is_str_arg) {
    1c48:	b968      	cbnz	r0, 1c66 <cbvprintf_package+0x236>
		} else if (size == sizeof(int)) {
    1c4a:	2b04      	cmp	r3, #4
    1c4c:	d102      	bne.n	1c54 <cbvprintf_package+0x224>
			int v = va_arg(ap, int);
    1c4e:	f108 0804 	add.w	r8, r8, #4
			if (buf0 != NULL) {
    1c52:	e7a4      	b.n	1b9e <cbvprintf_package+0x16e>
		} else if (size == sizeof(long long)) {
    1c54:	2b08      	cmp	r3, #8
    1c56:	d1e9      	bne.n	1c2c <cbvprintf_package+0x1fc>
			long long v = va_arg(ap, long long);
    1c58:	f108 0807 	add.w	r8, r8, #7
    1c5c:	f028 0807 	bic.w	r8, r8, #7
    1c60:	f108 0808 	add.w	r8, r8, #8
			if (buf0 != NULL) {
    1c64:	e7ed      	b.n	1c42 <cbvprintf_package+0x212>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1c66:	9a05      	ldr	r2, [sp, #20]
    1c68:	3a01      	subs	r2, #1
    1c6a:	9205      	str	r2, [sp, #20]
			s = va_arg(ap, char *);
    1c6c:	f858 2b04 	ldr.w	r2, [r8], #4
    1c70:	9200      	str	r2, [sp, #0]
    1c72:	e70d      	b.n	1a90 <cbvprintf_package+0x60>
			if (is_ro && !do_ro) {
    1c74:	9a03      	ldr	r2, [sp, #12]
    1c76:	0790      	lsls	r0, r2, #30
    1c78:	d520      	bpl.n	1cbc <cbvprintf_package+0x28c>
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
    1c7a:	eba4 0e05 	sub.w	lr, r4, r5
    1c7e:	ea4f 009e 	mov.w	r0, lr, lsr #2
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1c82:	f04f 0c01 	mov.w	ip, #1
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
    1c86:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    1c8a:	d2cf      	bcs.n	1c2c <cbvprintf_package+0x1fc>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
    1c8c:	2f0f      	cmp	r7, #15
    1c8e:	d8cd      	bhi.n	1c2c <cbvprintf_package+0x1fc>
				if (buf0 != NULL) {
    1c90:	b1f5      	cbz	r5, 1cd0 <cbvprintf_package+0x2a0>
					str_ptr_pos[s_idx] = s_ptr_idx;
    1c92:	f107 0240 	add.w	r2, r7, #64	; 0x40
    1c96:	eb0d 0e02 	add.w	lr, sp, r2
    1c9a:	b2c0      	uxtb	r0, r0
					str_ptr_arg[s_idx] = arg_idx;
    1c9c:	9a01      	ldr	r2, [sp, #4]
					str_ptr_pos[s_idx] = s_ptr_idx;
    1c9e:	f80e 0c20 	strb.w	r0, [lr, #-32]
					str_ptr_arg[s_idx] = arg_idx;
    1ca2:	f80e 2c10 	strb.w	r2, [lr, #-16]
					if (is_ro) {
    1ca6:	f1bc 0f00 	cmp.w	ip, #0
    1caa:	f43f af17 	beq.w	1adc <cbvprintf_package+0xac>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
    1cae:	f060 007f 	orn	r0, r0, #127	; 0x7f
    1cb2:	f80e 0c20 	strb.w	r0, [lr, #-32]
						s_ro_cnt++;
    1cb6:	f109 0901 	add.w	r9, r9, #1
				s_idx++;
    1cba:	3701      	adds	r7, #1
					if (BUF_OFFSET + size > len) {
    1cbc:	f1c5 0208 	rsb	r2, r5, #8
			buf += sizeof(char *);
    1cc0:	3404      	adds	r4, #4
					if (BUF_OFFSET + size > len) {
    1cc2:	9206      	str	r2, [sp, #24]
			switch (*fmt) {
    1cc4:	f64f 7eda 	movw	lr, #65498	; 0xffda
    1cc8:	e797      	b.n	1bfa <cbvprintf_package+0x1ca>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
    1cca:	f04f 0c00 	mov.w	ip, #0
    1cce:	e7da      	b.n	1c86 <cbvprintf_package+0x256>
				} else if (is_ro) {
    1cd0:	f1bc 0f00 	cmp.w	ip, #0
    1cd4:	d001      	beq.n	1cda <cbvprintf_package+0x2aa>
					len += 1;
    1cd6:	3601      	adds	r6, #1
    1cd8:	e7ef      	b.n	1cba <cbvprintf_package+0x28a>
				} else if (rws_pos_en) {
    1cda:	9802      	ldr	r0, [sp, #8]
					len += 2;
    1cdc:	3602      	adds	r6, #2
				} else if (rws_pos_en) {
    1cde:	2800      	cmp	r0, #0
    1ce0:	d1eb      	bne.n	1cba <cbvprintf_package+0x28a>
					len += strlen(s) + 1 + 1;
    1ce2:	9800      	ldr	r0, [sp, #0]
    1ce4:	e9cd 3106 	strd	r3, r1, [sp, #24]
    1ce8:	f00a fef4 	bl	cad4 <strlen>
    1cec:	e9dd 3106 	ldrd	r3, r1, [sp, #24]
    1cf0:	4406      	add	r6, r0
    1cf2:	e7e2      	b.n	1cba <cbvprintf_package+0x28a>
	if (BUF_OFFSET / sizeof(int) > 255) {
    1cf4:	1b63      	subs	r3, r4, r5
    1cf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    1cfa:	d297      	bcs.n	1c2c <cbvprintf_package+0x1fc>
	if (buf0 == NULL) {
    1cfc:	b945      	cbnz	r5, 1d10 <cbvprintf_package+0x2e0>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
    1cfe:	f1a6 0408 	sub.w	r4, r6, #8
    1d02:	18e0      	adds	r0, r4, r3
    1d04:	e6ae      	b.n	1a64 <cbvprintf_package+0x34>
    1d06:	bf00      	nop
    1d08:	0000da24 	.word	0x0000da24
    1d0c:	00010558 	.word	0x00010558
	if (rws_pos_en) {
    1d10:	9a02      	ldr	r2, [sp, #8]
	*(char **)buf0 = NULL;
    1d12:	6028      	str	r0, [r5, #0]
	pkg_hdr->desc.len = BUF_OFFSET / sizeof(int);
    1d14:	089b      	lsrs	r3, r3, #2
    1d16:	702b      	strb	r3, [r5, #0]
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    1d18:	f89d 3010 	ldrb.w	r3, [sp, #16]
	if (rws_pos_en) {
    1d1c:	b1c2      	cbz	r2, 1d50 <cbvprintf_package+0x320>
		pkg_hdr->desc.rw_str_cnt = s_rw_cnt;
    1d1e:	70eb      	strb	r3, [r5, #3]
	pkg_hdr->desc.ro_str_cnt = s_ro_cnt;
    1d20:	f885 9002 	strb.w	r9, [r5, #2]
	if (s_ro_cnt) {
    1d24:	f1b9 0f00 	cmp.w	r9, #0
    1d28:	d005      	beq.n	1d36 <cbvprintf_package+0x306>
    1d2a:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
    1d2c:	2200      	movs	r2, #0
			if (BUF_OFFSET + 1 > len) {
    1d2e:	f1c5 0c01 	rsb	ip, r5, #1
		for (i = 0; i < s_idx; i++) {
    1d32:	4297      	cmp	r7, r2
    1d34:	d10e      	bne.n	1d54 <cbvprintf_package+0x324>
		if (BUF_OFFSET + 1 + size > len) {
    1d36:	f1c5 0301 	rsb	r3, r5, #1
    1d3a:	f10d 0820 	add.w	r8, sp, #32
			*buf++ = str_ptr_arg[i];
    1d3e:	f04f 0a00 	mov.w	sl, #0
		if (BUF_OFFSET + 1 + size > len) {
    1d42:	9301      	str	r3, [sp, #4]
			*buf++ = str_ptr_arg[i];
    1d44:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
	for (i = 0; i < s_idx; i++) {
    1d48:	4557      	cmp	r7, sl
    1d4a:	d112      	bne.n	1d72 <cbvprintf_package+0x342>
	return BUF_OFFSET;
    1d4c:	1b60      	subs	r0, r4, r5
    1d4e:	e689      	b.n	1a64 <cbvprintf_package+0x34>
		pkg_hdr->desc.str_cnt = s_rw_cnt;
    1d50:	706b      	strb	r3, [r5, #1]
		pkg_hdr->desc.rw_str_cnt = 0;
    1d52:	e7e5      	b.n	1d20 <cbvprintf_package+0x2f0>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
    1d54:	f810 3b01 	ldrb.w	r3, [r0], #1
    1d58:	0619      	lsls	r1, r3, #24
    1d5a:	d508      	bpl.n	1d6e <cbvprintf_package+0x33e>
			if (BUF_OFFSET + 1 > len) {
    1d5c:	eb04 0e0c 	add.w	lr, r4, ip
    1d60:	45b6      	cmp	lr, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
    1d62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
    1d66:	f63f ae7b 	bhi.w	1a60 <cbvprintf_package+0x30>
			*buf++ = pos;
    1d6a:	f804 3b01 	strb.w	r3, [r4], #1
		for (i = 0; i < s_idx; i++) {
    1d6e:	3201      	adds	r2, #1
    1d70:	e7df      	b.n	1d32 <cbvprintf_package+0x302>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
    1d72:	f1b9 0f00 	cmp.w	r9, #0
    1d76:	d003      	beq.n	1d80 <cbvprintf_package+0x350>
    1d78:	f998 2000 	ldrsb.w	r2, [r8]
    1d7c:	2a00      	cmp	r2, #0
    1d7e:	db17      	blt.n	1db0 <cbvprintf_package+0x380>
		if (rws_pos_en) {
    1d80:	9b02      	ldr	r3, [sp, #8]
    1d82:	b1d3      	cbz	r3, 1dba <cbvprintf_package+0x38a>
			*buf++ = str_ptr_arg[i];
    1d84:	f81a 200b 	ldrb.w	r2, [sl, fp]
    1d88:	f804 2b01 	strb.w	r2, [r4], #1
			size = 0;
    1d8c:	2200      	movs	r2, #0
		if (BUF_OFFSET + 1 + size > len) {
    1d8e:	9b01      	ldr	r3, [sp, #4]
    1d90:	1898      	adds	r0, r3, r2
    1d92:	4420      	add	r0, r4
    1d94:	42b0      	cmp	r0, r6
    1d96:	f63f ae63 	bhi.w	1a60 <cbvprintf_package+0x30>
		*buf++ = str_ptr_pos[i];
    1d9a:	f898 0000 	ldrb.w	r0, [r8]
    1d9e:	f804 0b01 	strb.w	r0, [r4], #1
		memcpy(buf, s, size);
    1da2:	9900      	ldr	r1, [sp, #0]
    1da4:	9203      	str	r2, [sp, #12]
    1da6:	4620      	mov	r0, r4
    1da8:	f00a feb0 	bl	cb0c <memcpy>
		buf += size;
    1dac:	9a03      	ldr	r2, [sp, #12]
    1dae:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
    1db0:	f10a 0a01 	add.w	sl, sl, #1
    1db4:	f108 0801 	add.w	r8, r8, #1
    1db8:	e7c6      	b.n	1d48 <cbvprintf_package+0x318>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
    1dba:	f898 2000 	ldrb.w	r2, [r8]
    1dbe:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    1dc2:	9300      	str	r3, [sp, #0]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
    1dc4:	9b02      	ldr	r3, [sp, #8]
    1dc6:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
    1dca:	9800      	ldr	r0, [sp, #0]
    1dcc:	f00a fe82 	bl	cad4 <strlen>
    1dd0:	1c42      	adds	r2, r0, #1
    1dd2:	e7dc      	b.n	1d8e <cbvprintf_package+0x35e>
		return -EFAULT;
    1dd4:	f06f 000d 	mvn.w	r0, #13
    1dd8:	e644      	b.n	1a64 <cbvprintf_package+0x34>
    1dda:	bf00      	nop

00001ddc <cbprintf_package_convert>:
			     cbprintf_convert_cb cb,
			     void *ctx,
			     uint32_t flags,
			     uint16_t *strl,
			     size_t strl_len)
{
    1ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1de0:	b095      	sub	sp, #84	; 0x54
    1de2:	af00      	add	r7, sp, #0
    1de4:	4604      	mov	r4, r0
    1de6:	f8d7 b078 	ldr.w	fp, [r7, #120]	; 0x78
    1dea:	61bb      	str	r3, [r7, #24]
    1dec:	f3cb 03c0 	ubfx	r3, fp, #3, #1
    1df0:	627a      	str	r2, [r7, #36]	; 0x24
    1df2:	613b      	str	r3, [r7, #16]
	bool fmt_present = flags & CBPRINTF_PACKAGE_CONVERT_PTR_CHECK ? true : false;
	bool rw_cpy;
	bool ro_cpy;
	struct cbprintf_package_desc *in_desc = in_packaged;

	in_len = in_len != 0 ? in_len : get_package_len(in_packaged);
    1df4:	6239      	str	r1, [r7, #32]
    1df6:	b951      	cbnz	r1, 1e0e <cbprintf_package_convert+0x32>
	buf += ros_nbr;
    1df8:	7803      	ldrb	r3, [r0, #0]
	s_nbr     = buf[1];
    1dfa:	7846      	ldrb	r6, [r0, #1]
	buf += ros_nbr;
    1dfc:	7880      	ldrb	r0, [r0, #2]
    1dfe:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    1e02:	4420      	add	r0, r4
	for (unsigned int i = 0; i < s_nbr; i++) {
    1e04:	6a3b      	ldr	r3, [r7, #32]
    1e06:	429e      	cmp	r6, r3
    1e08:	d81a      	bhi.n	1e40 <cbprintf_package_convert+0x64>
	return (size_t)(uintptr_t)(buf - start);
    1e0a:	1b03      	subs	r3, r0, r4
    1e0c:	623b      	str	r3, [r7, #32]

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = in_desc->ro_str_cnt;
    1e0e:	f894 a002 	ldrb.w	sl, [r4, #2]
		(flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) == CBPRINTF_PACKAGE_CONVERT_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = in_desc->rw_str_cnt;
    1e12:	78e3      	ldrb	r3, [r4, #3]
    1e14:	617b      	str	r3, [r7, #20]
	ros_nbr = in_desc->ro_str_cnt;
    1e16:	4656      	mov	r6, sl
	ro_cpy = ros_nbr &&
    1e18:	f1ba 0f00 	cmp.w	sl, #0
    1e1c:	d002      	beq.n	1e24 <cbprintf_package_convert+0x48>
    1e1e:	f01b 0f01 	tst.w	fp, #1
    1e22:	d117      	bne.n	1e54 <cbprintf_package_convert+0x78>
	rw_cpy = rws_nbr > 0 &&
    1e24:	697b      	ldr	r3, [r7, #20]
    1e26:	bb5b      	cbnz	r3, 1e80 <cbprintf_package_convert+0xa4>
	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
		if (cb) {
    1e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1e2a:	b11b      	cbz	r3, 1e34 <cbprintf_package_convert+0x58>
			cb(in_packaged, in_len, ctx);
    1e2c:	69ba      	ldr	r2, [r7, #24]
    1e2e:	6a39      	ldr	r1, [r7, #32]
    1e30:	4620      	mov	r0, r4
    1e32:	4798      	blx	r3
		}

		return in_len;
    1e34:	6a3d      	ldr	r5, [r7, #32]

	/* Empty call (can be interpreted as flushing) */
	(void)cb(NULL, 0, ctx);

	return out_len;
}
    1e36:	4628      	mov	r0, r5
    1e38:	3754      	adds	r7, #84	; 0x54
    1e3a:	46bd      	mov	sp, r7
    1e3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf++;
    1e40:	1c45      	adds	r5, r0, #1
		buf += strlen((const char *)buf) + 1;
    1e42:	4628      	mov	r0, r5
    1e44:	f00a fe46 	bl	cad4 <strlen>
	for (unsigned int i = 0; i < s_nbr; i++) {
    1e48:	6a3b      	ldr	r3, [r7, #32]
		buf += strlen((const char *)buf) + 1;
    1e4a:	3001      	adds	r0, #1
	for (unsigned int i = 0; i < s_nbr; i++) {
    1e4c:	3301      	adds	r3, #1
		buf += strlen((const char *)buf) + 1;
    1e4e:	4428      	add	r0, r5
	for (unsigned int i = 0; i < s_nbr; i++) {
    1e50:	623b      	str	r3, [r7, #32]
    1e52:	e7d7      	b.n	1e04 <cbprintf_package_convert+0x28>
	rw_cpy = rws_nbr > 0 &&
    1e54:	f894 8000 	ldrb.w	r8, [r4]
    1e58:	6863      	ldr	r3, [r4, #4]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    1e5a:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    1e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	args_size = in_desc->len * sizeof(int);
    1e5e:	ea4f 0288 	mov.w	r2, r8, lsl #2
    1e62:	60fa      	str	r2, [r7, #12]
	uint8_t *str_pos = &buf[args_size];
    1e64:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
    1e68:	2b00      	cmp	r3, #0
    1e6a:	f040 8101 	bne.w	2070 <CONFIG_USB_DEVICE_VID+0x72>
		out_len = (int)in_len;
    1e6e:	6a3d      	ldr	r5, [r7, #32]
		if (ro_cpy) {
    1e70:	46c1      	mov	r9, r8
    1e72:	eb0a 0308 	add.w	r3, sl, r8
	size_t strl_cnt = 0;
    1e76:	2600      	movs	r6, #0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    1e78:	454b      	cmp	r3, r9
    1e7a:	d14e      	bne.n	1f1a <cbprintf_package_convert+0x13e>
    1e7c:	44d0      	add	r8, sl
    1e7e:	e013      	b.n	1ea8 <cbprintf_package_convert+0xcc>
	rw_cpy = rws_nbr > 0 &&
    1e80:	f01b 0f02 	tst.w	fp, #2
    1e84:	d0d0      	beq.n	1e28 <cbprintf_package_convert+0x4c>
	args_size = in_desc->len * sizeof(int);
    1e86:	f894 8000 	ldrb.w	r8, [r4]
    1e8a:	ea4f 0388 	mov.w	r3, r8, lsl #2
    1e8e:	60fb      	str	r3, [r7, #12]
	const char *fmt = *(const char **)(buf + sizeof(void *));
    1e90:	6863      	ldr	r3, [r4, #4]
    1e92:	61fb      	str	r3, [r7, #28]
	if (cb == NULL) {
    1e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	uint8_t *str_pos = &buf[args_size];
    1e96:	eb04 0888 	add.w	r8, r4, r8, lsl #2
	if (cb == NULL) {
    1e9a:	2b00      	cmp	r3, #0
    1e9c:	d178      	bne.n	1f90 <cbprintf_package_convert+0x1b4>
		out_len = (int)in_len;
    1e9e:	6a3d      	ldr	r5, [r7, #32]
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1ea0:	f1ba 0f00 	cmp.w	sl, #0
    1ea4:	d14e      	bne.n	1f44 <cbprintf_package_convert+0x168>
	size_t strl_cnt = 0;
    1ea6:	4656      	mov	r6, sl
		for (unsigned int i = 0; i < rws_nbr; i++) {
    1ea8:	f01b 0f05 	tst.w	fp, #5
    1eac:	bf0c      	ite	eq
    1eae:	2302      	moveq	r3, #2
    1eb0:	2301      	movne	r3, #1
    1eb2:	627b      	str	r3, [r7, #36]	; 0x24
    1eb4:	697b      	ldr	r3, [r7, #20]
    1eb6:	eb08 0a43 	add.w	sl, r8, r3, lsl #1
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1eba:	f00b 0302 	and.w	r3, fp, #2
    1ebe:	623b      	str	r3, [r7, #32]
		for (unsigned int i = 0; i < rws_nbr; i++) {
    1ec0:	45d0      	cmp	r8, sl
    1ec2:	d0b8      	beq.n	1e36 <cbprintf_package_convert+0x5a>
			uint8_t arg_idx = *str_pos++;
    1ec4:	f818 1b02 	ldrb.w	r1, [r8], #2
			const char *str = *(const char **)&buf32[arg_pos];
    1ec8:	f818 3c01 	ldrb.w	r3, [r8, #-1]
    1ecc:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
    1ed0:	4bac      	ldr	r3, [pc, #688]	; (2184 <CONFIG_USB_DEVICE_VID+0x186>)
    1ed2:	4599      	cmp	r9, r3
    1ed4:	d302      	bcc.n	1edc <cbprintf_package_convert+0x100>
    1ed6:	4bac      	ldr	r3, [pc, #688]	; (2188 <CONFIG_USB_DEVICE_VID+0x18a>)
    1ed8:	4599      	cmp	r9, r3
    1eda:	d339      	bcc.n	1f50 <cbprintf_package_convert+0x174>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    1edc:	693b      	ldr	r3, [r7, #16]
    1ede:	2b00      	cmp	r3, #0
    1ee0:	d043      	beq.n	1f6a <cbprintf_package_convert+0x18e>
    1ee2:	69f8      	ldr	r0, [r7, #28]
    1ee4:	f009 fecd 	bl	bc82 <is_ptr>
    1ee8:	2800      	cmp	r0, #0
    1eea:	d03e      	beq.n	1f6a <cbprintf_package_convert+0x18e>
				LOG_WRN("(unsigned) char * used for %%p argument. "
    1eec:	46e9      	mov	r9, sp
    1eee:	b08a      	sub	sp, #40	; 0x28
    1ef0:	466a      	mov	r2, sp
    1ef2:	4ba6      	ldr	r3, [pc, #664]	; (218c <CONFIG_USB_DEVICE_VID+0x18e>)
    1ef4:	6153      	str	r3, [r2, #20]
    1ef6:	69fb      	ldr	r3, [r7, #28]
    1ef8:	e9c2 3106 	strd	r3, r1, [r2, #24]
    1efc:	f44f 7300 	mov.w	r3, #512	; 0x200
    1f00:	8413      	strh	r3, [r2, #32]
    1f02:	4ba3      	ldr	r3, [pc, #652]	; (2190 <CONFIG_USB_DEVICE_VID+0x192>)
    1f04:	f842 3f10 	str.w	r3, [r2, #16]!
    1f08:	48a2      	ldr	r0, [pc, #648]	; (2194 <CONFIG_USB_DEVICE_VID+0x196>)
    1f0a:	2300      	movs	r3, #0
    1f0c:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    1f10:	f001 f8b6 	bl	3080 <z_impl_z_log_msg_static_create>
				out_len -= 2;
    1f14:	3d02      	subs	r5, #2
    1f16:	46cd      	mov	sp, r9
				continue;
    1f18:	e7d2      	b.n	1ec0 <cbprintf_package_convert+0xe4>
				const char *str = *(const char **)&buf32[*str_pos];
    1f1a:	f819 2b01 	ldrb.w	r2, [r9], #1
    1f1e:	627b      	str	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    1f20:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    1f24:	f00a fdd6 	bl	cad4 <strlen>
				if (strl && strl_cnt < strl_len) {
    1f28:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
    1f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
		return 1 + strlen(str);
    1f2c:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
    1f2e:	b13a      	cbz	r2, 1f40 <cbprintf_package_convert+0x164>
    1f30:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
    1f34:	4296      	cmp	r6, r2
					strl[strl_cnt++] = (uint16_t)len;
    1f36:	bf3e      	ittt	cc
    1f38:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
    1f3a:	f822 0016 	strhcc.w	r0, [r2, r6, lsl #1]
    1f3e:	3601      	addcc	r6, #1
				out_len += len;
    1f40:	4405      	add	r5, r0
			for (unsigned int i = 0; i < ros_nbr; i++) {
    1f42:	e799      	b.n	1e78 <cbprintf_package_convert+0x9c>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1f44:	f01b 0604 	ands.w	r6, fp, #4
	size_t strl_cnt = 0;
    1f48:	bf1c      	itt	ne
    1f4a:	6a7e      	ldrne	r6, [r7, #36]	; 0x24
				str_pos += ros_nbr;
    1f4c:	44d0      	addne	r8, sl
    1f4e:	e7ab      	b.n	1ea8 <cbprintf_package_convert+0xcc>
			if (fmt_present && is_ptr(fmt, arg_idx)) {
    1f50:	693b      	ldr	r3, [r7, #16]
    1f52:	b123      	cbz	r3, 1f5e <cbprintf_package_convert+0x182>
    1f54:	69f8      	ldr	r0, [r7, #28]
    1f56:	f009 fe94 	bl	bc82 <is_ptr>
    1f5a:	2800      	cmp	r0, #0
    1f5c:	d1c6      	bne.n	1eec <cbprintf_package_convert+0x110>
				if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    1f5e:	f01b 0f01 	tst.w	fp, #1
    1f62:	d105      	bne.n	1f70 <cbprintf_package_convert+0x194>
					out_len -= drop_ro_str_pos ? 2 : 1;
    1f64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    1f66:	1aed      	subs	r5, r5, r3
    1f68:	e7aa      	b.n	1ec0 <cbprintf_package_convert+0xe4>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1f6a:	6a3b      	ldr	r3, [r7, #32]
    1f6c:	2b00      	cmp	r3, #0
    1f6e:	d0a7      	beq.n	1ec0 <cbprintf_package_convert+0xe4>
		return 1 + strlen(str);
    1f70:	4648      	mov	r0, r9
    1f72:	f00a fdaf 	bl	cad4 <strlen>
				if (strl && strl_cnt < strl_len) {
    1f76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    1f78:	b143      	cbz	r3, 1f8c <cbprintf_package_convert+0x1b0>
    1f7a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
    1f7e:	429e      	cmp	r6, r3
					strl[strl_cnt++] = (uint16_t)len;
    1f80:	bf3f      	itttt	cc
    1f82:	6ffa      	ldrcc	r2, [r7, #124]	; 0x7c
		return 1 + strlen(str);
    1f84:	1c43      	addcc	r3, r0, #1
					strl[strl_cnt++] = (uint16_t)len;
    1f86:	f822 3016 	strhcc.w	r3, [r2, r6, lsl #1]
    1f8a:	3601      	addcc	r6, #1
				out_len += (len - 1);
    1f8c:	4405      	add	r5, r0
		for (unsigned int i = 0; i < rws_nbr; i++) {
    1f8e:	e797      	b.n	1ec0 <cbprintf_package_convert+0xe4>
	} else if (ros_nbr && flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    1f90:	f1ba 0f00 	cmp.w	sl, #0
    1f94:	d071      	beq.n	207a <CONFIG_USB_DEVICE_VID+0x7c>
    1f96:	f01b 0604 	ands.w	r6, fp, #4
    1f9a:	d071      	beq.n	2080 <CONFIG_USB_DEVICE_VID+0x82>
		keep_cnt = ros_nbr;
    1f9c:	46d1      	mov	r9, sl
		scpy_cnt = 0;
    1f9e:	2600      	movs	r6, #0
		dst = keep_str_pos;
    1fa0:	f107 0040 	add.w	r0, r7, #64	; 0x40
		memcpy(dst, str_pos, ros_nbr);
    1fa4:	4652      	mov	r2, sl
    1fa6:	4641      	mov	r1, r8
    1fa8:	f00a fdb0 	bl	cb0c <memcpy>
	str_pos += ros_nbr;
    1fac:	697b      	ldr	r3, [r7, #20]
    1fae:	005b      	lsls	r3, r3, #1
    1fb0:	60bb      	str	r3, [r7, #8]
    1fb2:	697b      	ldr	r3, [r7, #20]
    1fb4:	44d0      	add	r8, sl
	for (unsigned int i = 0; i < rws_nbr; i++) {
    1fb6:	eb08 0343 	add.w	r3, r8, r3, lsl #1
    1fba:	617b      	str	r3, [r7, #20]
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    1fbc:	f00b 0302 	and.w	r3, fp, #2
    1fc0:	607b      	str	r3, [r7, #4]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    1fc2:	697b      	ldr	r3, [r7, #20]
    1fc4:	4598      	cmp	r8, r3
    1fc6:	d15d      	bne.n	2084 <CONFIG_USB_DEVICE_VID+0x86>
	out_desc.len = in_desc->len;
    1fc8:	7823      	ldrb	r3, [r4, #0]
    1fca:	61fb      	str	r3, [r7, #28]
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    1fcc:	7863      	ldrb	r3, [r4, #1]
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    1fce:	f01b 0f02 	tst.w	fp, #2
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    1fd2:	eb06 0203 	add.w	r2, r6, r3
	out_desc.rw_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) ? 0 : (keep_cnt / 2);
    1fd6:	bf0c      	ite	eq
    1fd8:	ea4f 0159 	moveq.w	r1, r9, lsr #1
    1fdc:	2100      	movne	r1, #0
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    1fde:	f01b 0f01 	tst.w	fp, #1
	out_desc.str_cnt = in_desc->str_cnt + scpy_cnt;
    1fe2:	b2d2      	uxtb	r2, r2
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    1fe4:	f040 809d 	bne.w	2122 <CONFIG_USB_DEVICE_VID+0x124>
    1fe8:	f01b 0f04 	tst.w	fp, #4
    1fec:	bf14      	ite	ne
    1fee:	4648      	movne	r0, r9
    1ff0:	2000      	moveq	r0, #0
	struct cbprintf_package_desc in_desc_backup = *in_desc;
    1ff2:	f894 b002 	ldrb.w	fp, [r4, #2]
    1ff6:	f894 8003 	ldrb.w	r8, [r4, #3]
    1ffa:	613b      	str	r3, [r7, #16]
	*in_desc = out_desc;
    1ffc:	7062      	strb	r2, [r4, #1]
    1ffe:	70a0      	strb	r0, [r4, #2]
    2000:	70e1      	strb	r1, [r4, #3]
	rv = cb(in_packaged, args_size, ctx);
    2002:	69ba      	ldr	r2, [r7, #24]
    2004:	68f9      	ldr	r1, [r7, #12]
    2006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2008:	4620      	mov	r0, r4
    200a:	4798      	blx	r3
	if (rv < 0) {
    200c:	1e05      	subs	r5, r0, #0
    200e:	f6ff af12 	blt.w	1e36 <cbprintf_package_convert+0x5a>
	*in_desc = in_desc_backup;
    2012:	69fb      	ldr	r3, [r7, #28]
    2014:	7023      	strb	r3, [r4, #0]
    2016:	693b      	ldr	r3, [r7, #16]
    2018:	7063      	strb	r3, [r4, #1]
    201a:	f884 8003 	strb.w	r8, [r4, #3]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    201e:	69ba      	ldr	r2, [r7, #24]
    2020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	*in_desc = in_desc_backup;
    2022:	f884 b002 	strb.w	fp, [r4, #2]
	rv = cb(keep_str_pos, keep_cnt, ctx);
    2026:	4649      	mov	r1, r9
    2028:	f107 0040 	add.w	r0, r7, #64	; 0x40
    202c:	4798      	blx	r3
	if (rv < 0) {
    202e:	f1b0 0800 	subs.w	r8, r0, #0
    2032:	f2c0 80a3 	blt.w	217c <CONFIG_USB_DEVICE_VID+0x17e>
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    2036:	6a3b      	ldr	r3, [r7, #32]
	rv = cb(str_pos, strs_len, ctx);
    2038:	69ba      	ldr	r2, [r7, #24]
    203a:	6978      	ldr	r0, [r7, #20]
	size_t strs_len = in_len - (args_size + ros_nbr + 2 * rws_nbr);
    203c:	eba3 010a 	sub.w	r1, r3, sl
    2040:	68fb      	ldr	r3, [r7, #12]
    2042:	1ac9      	subs	r1, r1, r3
	rv = cb(str_pos, strs_len, ctx);
    2044:	68bb      	ldr	r3, [r7, #8]
    2046:	1ac9      	subs	r1, r1, r3
    2048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    204a:	4798      	blx	r3
	if (rv < 0) {
    204c:	2800      	cmp	r0, #0
    204e:	f2c0 8097 	blt.w	2180 <CONFIG_USB_DEVICE_VID+0x182>
	out_len += rv;
    2052:	44a8      	add	r8, r5
	out_len += rv;
    2054:	eb08 0500 	add.w	r5, r8, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    2058:	f04f 0b00 	mov.w	fp, #0
		uint8_t loc = cpy_str_pos[i];
    205c:	f107 0a30 	add.w	sl, r7, #48	; 0x30
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    2060:	45b3      	cmp	fp, r6
    2062:	d360      	bcc.n	2126 <CONFIG_USB_DEVICE_VID+0x128>
	(void)cb(NULL, 0, ctx);
    2064:	2100      	movs	r1, #0
    2066:	69ba      	ldr	r2, [r7, #24]
    2068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    206a:	4608      	mov	r0, r1
    206c:	4798      	blx	r3
	return out_len;
    206e:	e6e2      	b.n	1e36 <cbprintf_package_convert+0x5a>
	if (cb == NULL) {
    2070:	f04f 0900 	mov.w	r9, #0
    2074:	f107 0030 	add.w	r0, r7, #48	; 0x30
    2078:	e794      	b.n	1fa4 <cbprintf_package_convert+0x1c8>
		scpy_cnt = 0;
    207a:	4656      	mov	r6, sl
		keep_cnt = 0;
    207c:	46d1      	mov	r9, sl
    207e:	e795      	b.n	1fac <cbprintf_package_convert+0x1d0>
    2080:	46b1      	mov	r9, r6
    2082:	e793      	b.n	1fac <cbprintf_package_convert+0x1d0>
		uint8_t arg_idx = *str_pos++;
    2084:	f818 1b02 	ldrb.w	r1, [r8], #2
    2088:	4a3e      	ldr	r2, [pc, #248]	; (2184 <CONFIG_USB_DEVICE_VID+0x186>)
		uint8_t arg_pos = *str_pos++;
    208a:	f818 5c01 	ldrb.w	r5, [r8, #-1]
		const char *str = *(const char **)&buf32[arg_pos];
    208e:	f854 3025 	ldr.w	r3, [r4, r5, lsl #2]
    2092:	4293      	cmp	r3, r2
    2094:	d302      	bcc.n	209c <CONFIG_USB_DEVICE_VID+0x9e>
    2096:	4a3c      	ldr	r2, [pc, #240]	; (2188 <CONFIG_USB_DEVICE_VID+0x18a>)
    2098:	4293      	cmp	r3, r2
    209a:	d31c      	bcc.n	20d6 <CONFIG_USB_DEVICE_VID+0xd8>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    209c:	693b      	ldr	r3, [r7, #16]
    209e:	b123      	cbz	r3, 20aa <CONFIG_USB_DEVICE_VID+0xac>
    20a0:	69f8      	ldr	r0, [r7, #28]
    20a2:	f009 fdee 	bl	bc82 <is_ptr>
    20a6:	2800      	cmp	r0, #0
    20a8:	d18b      	bne.n	1fc2 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RW_STR) {
    20aa:	687b      	ldr	r3, [r7, #4]
    20ac:	b9f3      	cbnz	r3, 20ec <CONFIG_USB_DEVICE_VID+0xee>
				keep_str_pos[keep_cnt++] = arg_idx;
    20ae:	f109 0228 	add.w	r2, r9, #40	; 0x28
    20b2:	f107 0028 	add.w	r0, r7, #40	; 0x28
    20b6:	4402      	add	r2, r0
    20b8:	f109 0301 	add.w	r3, r9, #1
    20bc:	f802 1c10 	strb.w	r1, [r2, #-16]
				keep_str_pos[keep_cnt++] = arg_pos;
    20c0:	f107 0250 	add.w	r2, r7, #80	; 0x50
    20c4:	fa52 f383 	uxtab	r3, r2, r3
    20c8:	f109 0902 	add.w	r9, r9, #2
    20cc:	fa5f f989 	uxtb.w	r9, r9
    20d0:	f803 5c10 	strb.w	r5, [r3, #-16]
	for (unsigned int i = 0; i < rws_nbr; i++) {
    20d4:	e775      	b.n	1fc2 <cbprintf_package_convert+0x1e6>
		if (fmt_present && is_ptr(fmt, arg_idx)) {
    20d6:	693b      	ldr	r3, [r7, #16]
    20d8:	b12b      	cbz	r3, 20e6 <CONFIG_USB_DEVICE_VID+0xe8>
    20da:	69f8      	ldr	r0, [r7, #28]
    20dc:	f009 fdd1 	bl	bc82 <is_ptr>
    20e0:	2800      	cmp	r0, #0
    20e2:	f47f af6e 	bne.w	1fc2 <cbprintf_package_convert+0x1e6>
			if (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) {
    20e6:	f01b 0f01 	tst.w	fp, #1
    20ea:	d009      	beq.n	2100 <CONFIG_USB_DEVICE_VID+0x102>
				cpy_str_pos[scpy_cnt++] = arg_pos;
    20ec:	f106 0228 	add.w	r2, r6, #40	; 0x28
    20f0:	f107 0128 	add.w	r1, r7, #40	; 0x28
    20f4:	1c73      	adds	r3, r6, #1
    20f6:	1856      	adds	r6, r2, r1
    20f8:	f806 5c20 	strb.w	r5, [r6, #-32]
    20fc:	b2de      	uxtb	r6, r3
    20fe:	e760      	b.n	1fc2 <cbprintf_package_convert+0x1e6>
			} else if (flags & CBPRINTF_PACKAGE_CONVERT_KEEP_RO_STR) {
    2100:	f01b 0f04 	tst.w	fp, #4
    2104:	f43f af5d 	beq.w	1fc2 <cbprintf_package_convert+0x1e6>
				keep_str_pos[keep_cnt++] = arg_pos;
    2108:	f109 0228 	add.w	r2, r9, #40	; 0x28
    210c:	f107 0128 	add.w	r1, r7, #40	; 0x28
    2110:	f109 0301 	add.w	r3, r9, #1
    2114:	eb02 0901 	add.w	r9, r2, r1
    2118:	f809 5c10 	strb.w	r5, [r9, #-16]
    211c:	fa5f f983 	uxtb.w	r9, r3
    2120:	e74f      	b.n	1fc2 <cbprintf_package_convert+0x1e6>
	out_desc.ro_str_cnt = (flags & CBPRINTF_PACKAGE_CONVERT_RO_STR) ? 0 :
    2122:	2000      	movs	r0, #0
    2124:	e765      	b.n	1ff2 <cbprintf_package_convert+0x216>
		uint8_t loc = cpy_str_pos[i];
    2126:	f81b 300a 	ldrb.w	r3, [fp, sl]
    212a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		const char *str = *(const char **)&buf32[loc];
    212e:	f854 9023 	ldr.w	r9, [r4, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
    2132:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
    2134:	b1fb      	cbz	r3, 2176 <CONFIG_USB_DEVICE_VID+0x178>
    2136:	f833 801b 	ldrh.w	r8, [r3, fp, lsl #1]
		rv = cb(&loc, 1, ctx);
    213a:	69ba      	ldr	r2, [r7, #24]
    213c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    213e:	2101      	movs	r1, #1
    2140:	f107 002f 	add.w	r0, r7, #47	; 0x2f
    2144:	4798      	blx	r3
		if (rv < 0) {
    2146:	2800      	cmp	r0, #0
    2148:	db1a      	blt.n	2180 <CONFIG_USB_DEVICE_VID+0x182>
		out_len += rv;
    214a:	4405      	add	r5, r0
	strl = strl > 0 ? strl : strlen(str) + 1;
    214c:	f1b8 0f00 	cmp.w	r8, #0
    2150:	d106      	bne.n	2160 <CONFIG_USB_DEVICE_VID+0x162>
    2152:	4648      	mov	r0, r9
    2154:	f00a fcbe 	bl	cad4 <strlen>
    2158:	f100 0801 	add.w	r8, r0, #1
    215c:	fa1f f888 	uxth.w	r8, r8
	return cb(str, strl, ctx);
    2160:	69ba      	ldr	r2, [r7, #24]
    2162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    2164:	4641      	mov	r1, r8
    2166:	4648      	mov	r0, r9
    2168:	4798      	blx	r3
		if (rv < 0) {
    216a:	2800      	cmp	r0, #0
    216c:	db08      	blt.n	2180 <CONFIG_USB_DEVICE_VID+0x182>
		out_len += rv;
    216e:	4405      	add	r5, r0
	for (unsigned int i = 0; i < scpy_cnt; i++) {
    2170:	f10b 0b01 	add.w	fp, fp, #1
    2174:	e774      	b.n	2060 <CONFIG_USB_DEVICE_VID+0x62>
		uint16_t str_len = strl ? strl[i] : 0;
    2176:	f8d7 807c 	ldr.w	r8, [r7, #124]	; 0x7c
    217a:	e7de      	b.n	213a <CONFIG_USB_DEVICE_VID+0x13c>
    217c:	4645      	mov	r5, r8
    217e:	e65a      	b.n	1e36 <cbprintf_package_convert+0x5a>
    2180:	4605      	mov	r5, r0
    2182:	e658      	b.n	1e36 <cbprintf_package_convert+0x5a>
    2184:	0000da24 	.word	0x0000da24
    2188:	00010558 	.word	0x00010558
    218c:	0000f735 	.word	0x0000f735
    2190:	01000004 	.word	0x01000004
    2194:	0000db7c 	.word	0x0000db7c

00002198 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int c))
{
	_char_out = fn;
    2198:	4b01      	ldr	r3, [pc, #4]	; (21a0 <__printk_hook_install+0x8>)
    219a:	6018      	str	r0, [r3, #0]
}
    219c:	4770      	bx	lr
    219e:	bf00      	nop
    21a0:	20000028 	.word	0x20000028

000021a4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    21a4:	b530      	push	{r4, r5, lr}
    21a6:	b087      	sub	sp, #28
	struct str_context ctx = { str, size, 0 };
    21a8:	2500      	movs	r5, #0
    21aa:	e9cd 0103 	strd	r0, r1, [sp, #12]
{
    21ae:	4604      	mov	r4, r0
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap);
#else
static inline
int cbvprintf(cbprintf_cb out, void *ctx, const char *format, va_list ap)
{
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    21b0:	9500      	str	r5, [sp, #0]
    21b2:	a903      	add	r1, sp, #12
    21b4:	4805      	ldr	r0, [pc, #20]	; (21cc <vsnprintk+0x28>)
	struct str_context ctx = { str, size, 0 };
    21b6:	9505      	str	r5, [sp, #20]
    21b8:	f000 f918 	bl	23ec <z_cbvprintf_impl>

	cbvprintf(str_out, &ctx, fmt, ap);

	if (ctx.count < ctx.max) {
    21bc:	e9dd 3004 	ldrd	r3, r0, [sp, #16]
    21c0:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    21c2:	bfb8      	it	lt
    21c4:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    21c6:	b007      	add	sp, #28
    21c8:	bd30      	pop	{r4, r5, pc}
    21ca:	bf00      	nop
    21cc:	0000bcd1 	.word	0x0000bcd1

000021d0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    21d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    21d4:	8b05      	ldrh	r5, [r0, #24]
{
    21d6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    21d8:	0728      	lsls	r0, r5, #28
{
    21da:	4690      	mov	r8, r2
	if (processing) {
    21dc:	d411      	bmi.n	2202 <process_event+0x32>

	sys_slist_init(&clients);
	do {
		onoff_transition_fn transit = NULL;

		if (evt == EVT_RECHECK) {
    21de:	2902      	cmp	r1, #2
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    21e0:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    21e4:	f040 80cd 	bne.w	2382 <process_event+0x1b2>
			evt = process_recheck(mgr);
    21e8:	4620      	mov	r0, r4
    21ea:	f009 ff88 	bl	c0fe <process_recheck>
		}

		if (evt == EVT_NOP) {
    21ee:	b178      	cbz	r0, 2210 <process_event+0x40>
			break;
		}

		res = 0;
		if (evt == EVT_COMPLETE) {
    21f0:	3801      	subs	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    21f2:	8b21      	ldrh	r1, [r4, #24]
    21f4:	2804      	cmp	r0, #4
    21f6:	d811      	bhi.n	221c <process_event+0x4c>
    21f8:	e8df f000 	tbb	[pc, r0]
    21fc:	856d10c3 	.word	0x856d10c3
    2200:	95          	.byte	0x95
    2201:	00          	.byte	0x00
		if (evt == EVT_COMPLETE) {
    2202:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    2204:	bf0c      	ite	eq
    2206:	f045 0510 	orreq.w	r5, r5, #16
			mgr->flags |= ONOFF_FLAG_RECHECK;
    220a:	f045 0520 	orrne.w	r5, r5, #32
    220e:	8325      	strh	r5, [r4, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    2210:	f388 8811 	msr	BASEPRI, r8
    2214:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    2218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    221c:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    2220:	45aa      	cmp	sl, r5
    2222:	f000 80a6 	beq.w	2372 <process_event+0x1a2>
	 * a memory barrier when used like this, and we don't have a
	 * Zephyr framework for that.
	 */
	atomic_clear(&l->locked);
#endif
	arch_irq_unlock(key.key);
    2226:	2700      	movs	r7, #0
    2228:	46b9      	mov	r9, r7
    222a:	463e      	mov	r6, r7
    222c:	68a3      	ldr	r3, [r4, #8]
    222e:	2b00      	cmp	r3, #0
    2230:	f000 80bd 	beq.w	23ae <process_event+0x1de>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    2234:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    2238:	8321      	strh	r1, [r4, #24]
    223a:	f388 8811 	msr	BASEPRI, r8
    223e:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    2242:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2244:	2900      	cmp	r1, #0
    2246:	f000 80bb 	beq.w	23c0 <process_event+0x1f0>
	return node->next;
    224a:	680d      	ldr	r5, [r1, #0]
    224c:	2900      	cmp	r1, #0
    224e:	f000 80b7 	beq.w	23c0 <process_event+0x1f0>
		mon->callback(mgr, mon, state, res);
    2252:	f8d1 8004 	ldr.w	r8, [r1, #4]
    2256:	4633      	mov	r3, r6
    2258:	4652      	mov	r2, sl
    225a:	4620      	mov	r0, r4
    225c:	47c0      	blx	r8
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    225e:	2d00      	cmp	r5, #0
    2260:	d076      	beq.n	2350 <process_event+0x180>
    2262:	682b      	ldr	r3, [r5, #0]
    2264:	4629      	mov	r1, r5
    2266:	461d      	mov	r5, r3
    2268:	e7f0      	b.n	224c <process_event+0x7c>
    226a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    226e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    2270:	2a01      	cmp	r2, #1
    2272:	d81b      	bhi.n	22ac <process_event+0xdc>
	list->head = NULL;
    2274:	2200      	movs	r2, #0
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2276:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    227a:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    227c:	6827      	ldr	r7, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    227e:	b289      	uxth	r1, r1
	list->tail = NULL;
    2280:	e9c4 2200 	strd	r2, r2, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    2284:	d109      	bne.n	229a <process_event+0xca>
    2286:	463b      	mov	r3, r7
    2288:	e003      	b.n	2292 <process_event+0xc2>
				mgr->refs += 1U;
    228a:	8b62      	ldrh	r2, [r4, #26]
    228c:	3201      	adds	r2, #1
    228e:	8362      	strh	r2, [r4, #26]
	return node->next;
    2290:	681b      	ldr	r3, [r3, #0]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    2292:	2b00      	cmp	r3, #0
    2294:	d1f9      	bne.n	228a <process_event+0xba>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2296:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    229a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    229c:	4620      	mov	r0, r4
    229e:	f009 ff2e 	bl	c0fe <process_recheck>
    22a2:	2800      	cmp	r0, #0
    22a4:	d07b      	beq.n	239e <process_event+0x1ce>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    22a6:	f041 0120 	orr.w	r1, r1, #32
    22aa:	e077      	b.n	239c <process_event+0x1cc>
	} else if (state == ONOFF_STATE_TO_OFF) {
    22ac:	2b04      	cmp	r3, #4
    22ae:	d10a      	bne.n	22c6 <process_event+0xf6>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    22b0:	f021 0107 	bic.w	r1, r1, #7
    22b4:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    22b6:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    22b8:	4620      	mov	r0, r4
    22ba:	f009 ff20 	bl	c0fe <process_recheck>
    22be:	b110      	cbz	r0, 22c6 <process_event+0xf6>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    22c0:	f041 0120 	orr.w	r1, r1, #32
    22c4:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    22c6:	8b21      	ldrh	r1, [r4, #24]
    22c8:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    22cc:	45aa      	cmp	sl, r5
    22ce:	d050      	beq.n	2372 <process_event+0x1a2>
    22d0:	2700      	movs	r7, #0
		onoff_transition_fn transit = NULL;
    22d2:	46b9      	mov	r9, r7
    22d4:	e7aa      	b.n	222c <process_event+0x5c>
			transit = mgr->transitions->start;
    22d6:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    22d8:	f021 0107 	bic.w	r1, r1, #7
    22dc:	f041 0106 	orr.w	r1, r1, #6
				   && !sys_slist_is_empty(&mgr->monitors);
    22e0:	2d06      	cmp	r5, #6
			transit = mgr->transitions->start;
    22e2:	f8d3 9000 	ldr.w	r9, [r3]
	mgr->flags = (state & ONOFF_STATE_MASK)
    22e6:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    22e8:	d12d      	bne.n	2346 <process_event+0x176>
		    || (transit != NULL)) {
    22ea:	f1b9 0f00 	cmp.w	r9, #0
    22ee:	d040      	beq.n	2372 <process_event+0x1a2>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    22f0:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    22f4:	8321      	strh	r1, [r4, #24]
    22f6:	f388 8811 	msr	BASEPRI, r8
    22fa:	f3bf 8f6f 	isb	sy
				transit(mgr, transition_complete);
    22fe:	493a      	ldr	r1, [pc, #232]	; (23e8 <process_event+0x218>)
    2300:	4620      	mov	r0, r4
    2302:	47c8      	blx	r9
    2304:	e029      	b.n	235a <process_event+0x18a>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2306:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->stop;
    230a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    230c:	f041 0104 	orr.w	r1, r1, #4
    2310:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    2312:	2d04      	cmp	r5, #4
			transit = mgr->transitions->stop;
    2314:	f8d3 9004 	ldr.w	r9, [r3, #4]
	mgr->flags = (state & ONOFF_STATE_MASK)
    2318:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    231a:	d0e6      	beq.n	22ea <process_event+0x11a>
    231c:	2700      	movs	r7, #0
		res = 0;
    231e:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2320:	f04f 0a04 	mov.w	sl, #4
    2324:	e782      	b.n	222c <process_event+0x5c>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2326:	f021 0107 	bic.w	r1, r1, #7
			transit = mgr->transitions->reset;
    232a:	6923      	ldr	r3, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    232c:	f041 0105 	orr.w	r1, r1, #5
    2330:	b289      	uxth	r1, r1
				   && !sys_slist_is_empty(&mgr->monitors);
    2332:	2d05      	cmp	r5, #5
			transit = mgr->transitions->reset;
    2334:	f8d3 9008 	ldr.w	r9, [r3, #8]
	mgr->flags = (state & ONOFF_STATE_MASK)
    2338:	8321      	strh	r1, [r4, #24]
				   && !sys_slist_is_empty(&mgr->monitors);
    233a:	d0d6      	beq.n	22ea <process_event+0x11a>
    233c:	2700      	movs	r7, #0
		res = 0;
    233e:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    2340:	f04f 0a05 	mov.w	sl, #5
    2344:	e772      	b.n	222c <process_event+0x5c>
				   && !sys_slist_is_empty(&mgr->monitors);
    2346:	2700      	movs	r7, #0
		res = 0;
    2348:	463e      	mov	r6, r7
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    234a:	f04f 0a06 	mov.w	sl, #6
    234e:	e76d      	b.n	222c <process_event+0x5c>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2350:	462b      	mov	r3, r5
    2352:	e787      	b.n	2264 <process_event+0x94>
			if (transit != NULL) {
    2354:	f1b9 0f00 	cmp.w	r9, #0
    2358:	d1d1      	bne.n	22fe <process_event+0x12e>
	__asm__ volatile(
    235a:	f04f 0340 	mov.w	r3, #64	; 0x40
    235e:	f3ef 8811 	mrs	r8, BASEPRI
    2362:	f383 8812 	msr	BASEPRI_MAX, r3
    2366:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    236a:	8b23      	ldrh	r3, [r4, #24]
    236c:	f023 0308 	bic.w	r3, r3, #8
    2370:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    2372:	8b25      	ldrh	r5, [r4, #24]
    2374:	06ea      	lsls	r2, r5, #27
    2376:	d52e      	bpl.n	23d6 <process_event+0x206>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    2378:	f025 0310 	bic.w	r3, r5, #16
    237c:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    237e:	f005 0507 	and.w	r5, r5, #7
			res = mgr->last_res;
    2382:	6966      	ldr	r6, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    2384:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    2386:	2e00      	cmp	r6, #0
    2388:	f6bf af6f 	bge.w	226a <process_event+0x9a>
	list->head = NULL;
    238c:	2300      	movs	r3, #0
		*clients = mgr->clients;
    238e:	6827      	ldr	r7, [r4, #0]
	list->tail = NULL;
    2390:	e9c4 3300 	strd	r3, r3, [r4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2394:	f021 0107 	bic.w	r1, r1, #7
    2398:	f041 0101 	orr.w	r1, r1, #1
			mgr->flags |= ONOFF_FLAG_RECHECK;
    239c:	8321      	strh	r1, [r4, #24]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    239e:	8b21      	ldrh	r1, [r4, #24]
    23a0:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    23a4:	45aa      	cmp	sl, r5
    23a6:	f04f 0900 	mov.w	r9, #0
    23aa:	f47f af3f 	bne.w	222c <process_event+0x5c>
		    || !sys_slist_is_empty(&clients)
    23ae:	2f00      	cmp	r7, #0
    23b0:	d09b      	beq.n	22ea <process_event+0x11a>
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    23b2:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    23b6:	8321      	strh	r1, [r4, #24]
	__asm__ volatile(
    23b8:	f388 8811 	msr	BASEPRI, r8
    23bc:	f3bf 8f6f 	isb	sy
			if (!sys_slist_is_empty(&clients)) {
    23c0:	2f00      	cmp	r7, #0
    23c2:	d0c7      	beq.n	2354 <process_event+0x184>
	return node->next;
    23c4:	683d      	ldr	r5, [r7, #0]
		notify_one(mgr, cli, state, res);
    23c6:	4639      	mov	r1, r7
    23c8:	4633      	mov	r3, r6
    23ca:	4652      	mov	r2, sl
    23cc:	4620      	mov	r0, r4
    23ce:	f009 fec2 	bl	c156 <notify_one>
	list->head = node;
    23d2:	462f      	mov	r7, r5
	while (!sys_slist_is_empty(list)) {
    23d4:	e7f4      	b.n	23c0 <process_event+0x1f0>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    23d6:	06ab      	lsls	r3, r5, #26
    23d8:	f57f af1a 	bpl.w	2210 <process_event+0x40>
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    23dc:	f025 0320 	bic.w	r3, r5, #32
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    23e0:	8323      	strh	r3, [r4, #24]
		state = mgr->flags & ONOFF_STATE_MASK;
    23e2:	f005 0507 	and.w	r5, r5, #7
		if (evt == EVT_RECHECK) {
    23e6:	e6ff      	b.n	21e8 <process_event+0x18>
    23e8:	0000c183 	.word	0x0000c183

000023ec <z_cbvprintf_impl>:
	return (int)count;
}

int z_cbvprintf_impl(cbprintf_cb out, void *ctx, const char *fp,
		     va_list ap, uint32_t flags)
{
    23ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23f0:	4681      	mov	r9, r0
    23f2:	b095      	sub	sp, #84	; 0x54
    23f4:	468b      	mov	fp, r1
    23f6:	4617      	mov	r7, r2
    23f8:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    23fa:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    23fc:	7838      	ldrb	r0, [r7, #0]
    23fe:	b908      	cbnz	r0, 2404 <z_cbvprintf_impl+0x18>
			OUTC(' ');
			--width;
		}
	}

	return count;
    2400:	4628      	mov	r0, r5
    2402:	e358      	b.n	2ab6 <z_cbvprintf_impl+0x6ca>
			OUTC(*fp++);
    2404:	1c7b      	adds	r3, r7, #1
		if (*fp != '%') {
    2406:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    2408:	9303      	str	r3, [sp, #12]
		if (*fp != '%') {
    240a:	d006      	beq.n	241a <z_cbvprintf_impl+0x2e>
			OUTC('%');
    240c:	4659      	mov	r1, fp
    240e:	47c8      	blx	r9
    2410:	2800      	cmp	r0, #0
    2412:	f2c0 8350 	blt.w	2ab6 <z_cbvprintf_impl+0x6ca>
    2416:	3501      	adds	r5, #1
		if (bps == NULL) {
    2418:	e1fb      	b.n	2812 <z_cbvprintf_impl+0x426>
		} state = {
    241a:	2218      	movs	r2, #24
    241c:	2100      	movs	r1, #0
    241e:	a80e      	add	r0, sp, #56	; 0x38
    2420:	f00a fb7f 	bl	cb22 <memset>
	if (*sp == '%') {
    2424:	787b      	ldrb	r3, [r7, #1]
    2426:	2b25      	cmp	r3, #37	; 0x25
    2428:	d07d      	beq.n	2526 <z_cbvprintf_impl+0x13a>
    242a:	2300      	movs	r3, #0
    242c:	1c78      	adds	r0, r7, #1
    242e:	4698      	mov	r8, r3
    2430:	469e      	mov	lr, r3
    2432:	469c      	mov	ip, r3
    2434:	461e      	mov	r6, r3
    2436:	4601      	mov	r1, r0
		switch (*sp) {
    2438:	f810 2b01 	ldrb.w	r2, [r0], #1
    243c:	2a2b      	cmp	r2, #43	; 0x2b
    243e:	f000 80a1 	beq.w	2584 <z_cbvprintf_impl+0x198>
    2442:	f200 8098 	bhi.w	2576 <z_cbvprintf_impl+0x18a>
    2446:	2a20      	cmp	r2, #32
    2448:	f000 809f 	beq.w	258a <z_cbvprintf_impl+0x19e>
    244c:	2a23      	cmp	r2, #35	; 0x23
    244e:	f000 809f 	beq.w	2590 <z_cbvprintf_impl+0x1a4>
    2452:	b12b      	cbz	r3, 2460 <z_cbvprintf_impl+0x74>
    2454:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    2458:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    245c:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    2460:	f1b8 0f00 	cmp.w	r8, #0
    2464:	d005      	beq.n	2472 <z_cbvprintf_impl+0x86>
    2466:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    246a:	f043 0320 	orr.w	r3, r3, #32
    246e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    2472:	f1be 0f00 	cmp.w	lr, #0
    2476:	d005      	beq.n	2484 <z_cbvprintf_impl+0x98>
    2478:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    247c:	f043 0310 	orr.w	r3, r3, #16
    2480:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    2484:	f1bc 0f00 	cmp.w	ip, #0
    2488:	d005      	beq.n	2496 <z_cbvprintf_impl+0xaa>
    248a:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    248e:	f043 0308 	orr.w	r3, r3, #8
    2492:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
    2496:	b12e      	cbz	r6, 24a4 <z_cbvprintf_impl+0xb8>
    2498:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    249c:	f043 0304 	orr.w	r3, r3, #4
    24a0:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (conv->flag_zero && conv->flag_dash) {
    24a4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    24a8:	f003 0044 	and.w	r0, r3, #68	; 0x44
    24ac:	2844      	cmp	r0, #68	; 0x44
    24ae:	d103      	bne.n	24b8 <z_cbvprintf_impl+0xcc>
		conv->flag_zero = false;
    24b0:	f36f 1386 	bfc	r3, #6, #1
    24b4:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	conv->width_present = true;
    24b8:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    24bc:	2a2a      	cmp	r2, #42	; 0x2a
	conv->width_present = true;
    24be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    24c2:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
	if (*sp == '*') {
    24c6:	d17f      	bne.n	25c8 <z_cbvprintf_impl+0x1dc>
		conv->width_star = true;
    24c8:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    24cc:	f042 0201 	orr.w	r2, r2, #1
		return ++sp;
    24d0:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    24d2:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	conv->prec_present = (*sp == '.');
    24d6:	781a      	ldrb	r2, [r3, #0]
    24d8:	2a2e      	cmp	r2, #46	; 0x2e
    24da:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    24de:	bf0c      	ite	eq
    24e0:	2101      	moveq	r1, #1
    24e2:	2100      	movne	r1, #0
    24e4:	f361 0241 	bfi	r2, r1, #1, #1
    24e8:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
	if (!conv->prec_present) {
    24ec:	d178      	bne.n	25e0 <z_cbvprintf_impl+0x1f4>
	if (*sp == '*') {
    24ee:	785a      	ldrb	r2, [r3, #1]
    24f0:	2a2a      	cmp	r2, #42	; 0x2a
    24f2:	d06e      	beq.n	25d2 <z_cbvprintf_impl+0x1e6>
	++sp;
    24f4:	3301      	adds	r3, #1
	size_t val = 0;
    24f6:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    24f8:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    24fc:	4619      	mov	r1, r3
    24fe:	f811 0b01 	ldrb.w	r0, [r1], #1
    2502:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    2506:	2e09      	cmp	r6, #9
    2508:	f240 8095 	bls.w	2636 <z_cbvprintf_impl+0x24a>
	conv->unsupported |= ((conv->prec_value < 0)
    250c:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
	conv->prec_value = prec;
    2510:	9212      	str	r2, [sp, #72]	; 0x48
	conv->unsupported |= ((conv->prec_value < 0)
    2512:	f3c1 0040 	ubfx	r0, r1, #1, #1
    2516:	ea40 70d2 	orr.w	r0, r0, r2, lsr #31
    251a:	460a      	mov	r2, r1
    251c:	f360 0241 	bfi	r2, r0, #1, #1
    2520:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    2524:	e05c      	b.n	25e0 <z_cbvprintf_impl+0x1f4>
		conv->specifier = *sp++;
    2526:	1cba      	adds	r2, r7, #2
    2528:	9203      	str	r2, [sp, #12]
    252a:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
		if (conv->width_star) {
    252e:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    2532:	07da      	lsls	r2, r3, #31
    2534:	f140 812e 	bpl.w	2794 <z_cbvprintf_impl+0x3a8>
			width = va_arg(ap, int);
    2538:	f854 8b04 	ldr.w	r8, [r4], #4
			if (width < 0) {
    253c:	f1b8 0f00 	cmp.w	r8, #0
    2540:	da07      	bge.n	2552 <z_cbvprintf_impl+0x166>
				conv->flag_dash = true;
    2542:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    2546:	f042 0204 	orr.w	r2, r2, #4
    254a:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				width = -width;
    254e:	f1c8 0800 	rsb	r8, r8, #0
		if (conv->prec_star) {
    2552:	075e      	lsls	r6, r3, #29
    2554:	f140 8127 	bpl.w	27a6 <z_cbvprintf_impl+0x3ba>
			int arg = va_arg(ap, int);
    2558:	f854 ab04 	ldr.w	sl, [r4], #4
			if (arg < 0) {
    255c:	f1ba 0f00 	cmp.w	sl, #0
    2560:	f280 8126 	bge.w	27b0 <z_cbvprintf_impl+0x3c4>
				conv->prec_present = false;
    2564:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
    2568:	f36f 0341 	bfc	r3, #1, #1
    256c:	f88d 3041 	strb.w	r3, [sp, #65]	; 0x41
		int precision = -1;
    2570:	f04f 3aff 	mov.w	sl, #4294967295
    2574:	e11c      	b.n	27b0 <z_cbvprintf_impl+0x3c4>
		switch (*sp) {
    2576:	2a2d      	cmp	r2, #45	; 0x2d
    2578:	d00d      	beq.n	2596 <z_cbvprintf_impl+0x1aa>
    257a:	2a30      	cmp	r2, #48	; 0x30
    257c:	f47f af69 	bne.w	2452 <z_cbvprintf_impl+0x66>
    2580:	2301      	movs	r3, #1
	} while (loop);
    2582:	e758      	b.n	2436 <z_cbvprintf_impl+0x4a>
		switch (*sp) {
    2584:	f04f 0c01 	mov.w	ip, #1
    2588:	e755      	b.n	2436 <z_cbvprintf_impl+0x4a>
    258a:	f04f 0e01 	mov.w	lr, #1
    258e:	e752      	b.n	2436 <z_cbvprintf_impl+0x4a>
    2590:	f04f 0801 	mov.w	r8, #1
    2594:	e74f      	b.n	2436 <z_cbvprintf_impl+0x4a>
    2596:	2601      	movs	r6, #1
    2598:	e74d      	b.n	2436 <z_cbvprintf_impl+0x4a>
		val = 10U * val + *sp++ - '0';
    259a:	fb0e 6202 	mla	r2, lr, r2, r6
    259e:	3a30      	subs	r2, #48	; 0x30
    25a0:	4603      	mov	r3, r0
    25a2:	4618      	mov	r0, r3
    25a4:	f810 6b01 	ldrb.w	r6, [r0], #1
    25a8:	f1a6 0c30 	sub.w	ip, r6, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp) != 0) {
    25ac:	f1bc 0f09 	cmp.w	ip, #9
    25b0:	d9f3      	bls.n	259a <z_cbvprintf_impl+0x1ae>
	if (sp != wp) {
    25b2:	4299      	cmp	r1, r3
    25b4:	d08f      	beq.n	24d6 <z_cbvprintf_impl+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    25b6:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
		conv->width_value = width;
    25ba:	9211      	str	r2, [sp, #68]	; 0x44
				      || (width != (size_t)conv->width_value));
    25bc:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    25be:	f362 0141 	bfi	r1, r2, #1, #1
    25c2:	f88d 1040 	strb.w	r1, [sp, #64]	; 0x40
    25c6:	e786      	b.n	24d6 <z_cbvprintf_impl+0xea>
    25c8:	460b      	mov	r3, r1
	size_t val = 0;
    25ca:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    25cc:	f04f 0e0a 	mov.w	lr, #10
    25d0:	e7e7      	b.n	25a2 <z_cbvprintf_impl+0x1b6>
		conv->prec_star = true;
    25d2:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    25d6:	f042 0204 	orr.w	r2, r2, #4
    25da:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		return ++sp;
    25de:	3302      	adds	r3, #2
	switch (*sp) {
    25e0:	781a      	ldrb	r2, [r3, #0]
    25e2:	2a6c      	cmp	r2, #108	; 0x6c
    25e4:	d047      	beq.n	2676 <z_cbvprintf_impl+0x28a>
    25e6:	d82b      	bhi.n	2640 <z_cbvprintf_impl+0x254>
    25e8:	2a68      	cmp	r2, #104	; 0x68
    25ea:	d031      	beq.n	2650 <z_cbvprintf_impl+0x264>
    25ec:	2a6a      	cmp	r2, #106	; 0x6a
    25ee:	d04b      	beq.n	2688 <z_cbvprintf_impl+0x29c>
    25f0:	2a4c      	cmp	r2, #76	; 0x4c
    25f2:	d051      	beq.n	2698 <z_cbvprintf_impl+0x2ac>
	conv->specifier = *sp++;
    25f4:	461a      	mov	r2, r3
    25f6:	f812 3b01 	ldrb.w	r3, [r2], #1
    25fa:	9203      	str	r2, [sp, #12]
	switch (conv->specifier) {
    25fc:	2b78      	cmp	r3, #120	; 0x78
		if (conv->length_mod == LENGTH_UPPER_L) {
    25fe:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
	conv->specifier = *sp++;
    2602:	f88d 3043 	strb.w	r3, [sp, #67]	; 0x43
	switch (conv->specifier) {
    2606:	f200 80be 	bhi.w	2786 <z_cbvprintf_impl+0x39a>
    260a:	2b6d      	cmp	r3, #109	; 0x6d
    260c:	d851      	bhi.n	26b2 <z_cbvprintf_impl+0x2c6>
    260e:	2b69      	cmp	r3, #105	; 0x69
    2610:	f200 80b9 	bhi.w	2786 <z_cbvprintf_impl+0x39a>
    2614:	2b57      	cmp	r3, #87	; 0x57
    2616:	d867      	bhi.n	26e8 <z_cbvprintf_impl+0x2fc>
    2618:	2b41      	cmp	r3, #65	; 0x41
    261a:	d003      	beq.n	2624 <z_cbvprintf_impl+0x238>
    261c:	3b45      	subs	r3, #69	; 0x45
    261e:	2b02      	cmp	r3, #2
    2620:	f200 80b1 	bhi.w	2786 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_FP;
    2624:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    2628:	2204      	movs	r2, #4
    262a:	f362 0302 	bfi	r3, r2, #0, #3
    262e:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
			unsupported = true;
    2632:	2301      	movs	r3, #1
			break;
    2634:	e073      	b.n	271e <z_cbvprintf_impl+0x332>
		val = 10U * val + *sp++ - '0';
    2636:	fb0c 0202 	mla	r2, ip, r2, r0
    263a:	3a30      	subs	r2, #48	; 0x30
    263c:	460b      	mov	r3, r1
    263e:	e75d      	b.n	24fc <z_cbvprintf_impl+0x110>
	switch (*sp) {
    2640:	2a74      	cmp	r2, #116	; 0x74
    2642:	d025      	beq.n	2690 <z_cbvprintf_impl+0x2a4>
    2644:	2a7a      	cmp	r2, #122	; 0x7a
    2646:	d1d5      	bne.n	25f4 <z_cbvprintf_impl+0x208>
		conv->length_mod = LENGTH_Z;
    2648:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    264c:	2106      	movs	r1, #6
    264e:	e00c      	b.n	266a <z_cbvprintf_impl+0x27e>
		if (*++sp == 'h') {
    2650:	785a      	ldrb	r2, [r3, #1]
    2652:	2a68      	cmp	r2, #104	; 0x68
    2654:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    2658:	d106      	bne.n	2668 <z_cbvprintf_impl+0x27c>
			conv->length_mod = LENGTH_HH;
    265a:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    265c:	f361 02c6 	bfi	r2, r1, #3, #4
    2660:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
			++sp;
    2664:	3302      	adds	r3, #2
    2666:	e7c5      	b.n	25f4 <z_cbvprintf_impl+0x208>
			conv->length_mod = LENGTH_H;
    2668:	2102      	movs	r1, #2
    266a:	f361 02c6 	bfi	r2, r1, #3, #4
    266e:	f88d 2041 	strb.w	r2, [sp, #65]	; 0x41
		if (*++sp == 'h') {
    2672:	3301      	adds	r3, #1
    2674:	e7be      	b.n	25f4 <z_cbvprintf_impl+0x208>
		if (*++sp == 'l') {
    2676:	785a      	ldrb	r2, [r3, #1]
    2678:	2a6c      	cmp	r2, #108	; 0x6c
    267a:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    267e:	d101      	bne.n	2684 <z_cbvprintf_impl+0x298>
			conv->length_mod = LENGTH_LL;
    2680:	2104      	movs	r1, #4
    2682:	e7eb      	b.n	265c <z_cbvprintf_impl+0x270>
			conv->length_mod = LENGTH_L;
    2684:	2103      	movs	r1, #3
    2686:	e7f0      	b.n	266a <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_J;
    2688:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    268c:	2105      	movs	r1, #5
    268e:	e7ec      	b.n	266a <z_cbvprintf_impl+0x27e>
		conv->length_mod = LENGTH_T;
    2690:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
    2694:	2107      	movs	r1, #7
    2696:	e7e8      	b.n	266a <z_cbvprintf_impl+0x27e>
		conv->unsupported = true;
    2698:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
    269c:	f422 42f0 	bic.w	r2, r2, #30720	; 0x7800
    26a0:	f022 0202 	bic.w	r2, r2, #2
    26a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
    26a8:	f042 0202 	orr.w	r2, r2, #2
    26ac:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
		break;
    26b0:	e7df      	b.n	2672 <z_cbvprintf_impl+0x286>
	switch (conv->specifier) {
    26b2:	3b6e      	subs	r3, #110	; 0x6e
    26b4:	b2d9      	uxtb	r1, r3
    26b6:	2301      	movs	r3, #1
    26b8:	408b      	lsls	r3, r1
    26ba:	f240 4182 	movw	r1, #1154	; 0x482
    26be:	420b      	tst	r3, r1
    26c0:	d137      	bne.n	2732 <z_cbvprintf_impl+0x346>
    26c2:	f013 0f24 	tst.w	r3, #36	; 0x24
    26c6:	d151      	bne.n	276c <z_cbvprintf_impl+0x380>
    26c8:	07d8      	lsls	r0, r3, #31
    26ca:	d55c      	bpl.n	2786 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_PTR;
    26cc:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    26d0:	2103      	movs	r1, #3
    26d2:	f361 0302 	bfi	r3, r1, #0, #3
    26d6:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    26da:	f002 0378 	and.w	r3, r2, #120	; 0x78
    26de:	f1a3 0140 	sub.w	r1, r3, #64	; 0x40
    26e2:	424b      	negs	r3, r1
    26e4:	414b      	adcs	r3, r1
    26e6:	e01a      	b.n	271e <z_cbvprintf_impl+0x332>
	switch (conv->specifier) {
    26e8:	f1a3 0158 	sub.w	r1, r3, #88	; 0x58
    26ec:	b2c9      	uxtb	r1, r1
    26ee:	2001      	movs	r0, #1
    26f0:	fa00 f101 	lsl.w	r1, r0, r1
    26f4:	f411 4f62 	tst.w	r1, #57856	; 0xe200
    26f8:	d194      	bne.n	2624 <z_cbvprintf_impl+0x238>
    26fa:	f640 0601 	movw	r6, #2049	; 0x801
    26fe:	4231      	tst	r1, r6
    2700:	d11d      	bne.n	273e <z_cbvprintf_impl+0x352>
    2702:	f411 3f04 	tst.w	r1, #135168	; 0x21000
    2706:	d03e      	beq.n	2786 <z_cbvprintf_impl+0x39a>
		conv->specifier_cat = SPECIFIER_SINT;
    2708:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    270c:	f360 0302 	bfi	r3, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    2710:	f002 0278 	and.w	r2, r2, #120	; 0x78
    2714:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_SINT;
    2716:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod == LENGTH_UPPER_L) {
    271a:	d034      	beq.n	2786 <z_cbvprintf_impl+0x39a>
	bool unsupported = false;
    271c:	2300      	movs	r3, #0
	conv->unsupported |= unsupported;
    271e:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
    2722:	f3c2 0140 	ubfx	r1, r2, #1, #1
    2726:	430b      	orrs	r3, r1
    2728:	f363 0241 	bfi	r2, r3, #1, #1
    272c:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
	return sp;
    2730:	e6fd      	b.n	252e <z_cbvprintf_impl+0x142>
		conv->specifier_cat = SPECIFIER_UINT;
    2732:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    2736:	2102      	movs	r1, #2
    2738:	f361 0302 	bfi	r3, r1, #0, #3
    273c:	e7e8      	b.n	2710 <z_cbvprintf_impl+0x324>
    273e:	f89d 1042 	ldrb.w	r1, [sp, #66]	; 0x42
    2742:	2002      	movs	r0, #2
		if (conv->length_mod == LENGTH_UPPER_L) {
    2744:	f002 0278 	and.w	r2, r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    2748:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    274c:	2a40      	cmp	r2, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    274e:	f88d 1042 	strb.w	r1, [sp, #66]	; 0x42
			conv->invalid = true;
    2752:	bf02      	ittt	eq
    2754:	f89d 1040 	ldrbeq.w	r1, [sp, #64]	; 0x40
    2758:	f041 0101 	orreq.w	r1, r1, #1
    275c:	f88d 1040 	strbeq.w	r1, [sp, #64]	; 0x40
		if (conv->specifier == 'c') {
    2760:	2b63      	cmp	r3, #99	; 0x63
    2762:	d1db      	bne.n	271c <z_cbvprintf_impl+0x330>
			unsupported = (conv->length_mod != LENGTH_NONE);
    2764:	1e13      	subs	r3, r2, #0
    2766:	bf18      	it	ne
    2768:	2301      	movne	r3, #1
    276a:	e7d8      	b.n	271e <z_cbvprintf_impl+0x332>
		conv->specifier_cat = SPECIFIER_PTR;
    276c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    2770:	2103      	movs	r1, #3
    2772:	f361 0302 	bfi	r3, r1, #0, #3
		if (conv->length_mod != LENGTH_NONE) {
    2776:	f012 0f78 	tst.w	r2, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    277a:	f88d 3042 	strb.w	r3, [sp, #66]	; 0x42
		if (conv->length_mod != LENGTH_NONE) {
    277e:	bf14      	ite	ne
    2780:	2301      	movne	r3, #1
    2782:	2300      	moveq	r3, #0
    2784:	e7cb      	b.n	271e <z_cbvprintf_impl+0x332>
		conv->invalid = true;
    2786:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    278a:	f043 0301 	orr.w	r3, r3, #1
    278e:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
		break;
    2792:	e7c3      	b.n	271c <z_cbvprintf_impl+0x330>
		} else if (conv->width_present) {
    2794:	f99d 2040 	ldrsb.w	r2, [sp, #64]	; 0x40
    2798:	2a00      	cmp	r2, #0
			width = conv->width_value;
    279a:	bfb4      	ite	lt
    279c:	f8dd 8044 	ldrlt.w	r8, [sp, #68]	; 0x44
		int width = -1;
    27a0:	f04f 38ff 	movge.w	r8, #4294967295
    27a4:	e6d5      	b.n	2552 <z_cbvprintf_impl+0x166>
		} else if (conv->prec_present) {
    27a6:	0798      	lsls	r0, r3, #30
    27a8:	f57f aee2 	bpl.w	2570 <z_cbvprintf_impl+0x184>
			precision = conv->prec_value;
    27ac:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
			= (enum length_mod_enum)conv->length_mod;
    27b0:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
		conv->pad0_value = 0;
    27b4:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    27b6:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
			= (enum specifier_cat_enum)conv->specifier_cat;
    27ba:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
		enum specifier_cat_enum specifier_cat
    27be:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    27c2:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    27c4:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    27c8:	d133      	bne.n	2832 <z_cbvprintf_impl+0x446>
			switch (length_mod) {
    27ca:	1ecb      	subs	r3, r1, #3
    27cc:	2b04      	cmp	r3, #4
    27ce:	d804      	bhi.n	27da <z_cbvprintf_impl+0x3ee>
    27d0:	e8df f003 	tbb	[pc, r3]
    27d4:	21464621 	.word	0x21464621
    27d8:	21          	.byte	0x21
    27d9:	00          	.byte	0x00
				value->sint = va_arg(ap, int);
    27da:	6823      	ldr	r3, [r4, #0]
			if (length_mod == LENGTH_HH) {
    27dc:	2901      	cmp	r1, #1
				value->sint = va_arg(ap, int);
    27de:	ea4f 72e3 	mov.w	r2, r3, asr #31
    27e2:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    27e6:	d11c      	bne.n	2822 <z_cbvprintf_impl+0x436>
				value->sint = (signed char)value->sint;
    27e8:	f99d 3038 	ldrsb.w	r3, [sp, #56]	; 0x38
    27ec:	17da      	asrs	r2, r3, #31
    27ee:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
				value->sint = va_arg(ap, int);
    27f2:	3404      	adds	r4, #4
		if (conv->invalid || conv->unsupported) {
    27f4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
    27f8:	f013 0603 	ands.w	r6, r3, #3
    27fc:	d050      	beq.n	28a0 <z_cbvprintf_impl+0x4b4>
			OUTS(sp, fp);
    27fe:	9b03      	ldr	r3, [sp, #12]
    2800:	463a      	mov	r2, r7
    2802:	4659      	mov	r1, fp
    2804:	4648      	mov	r0, r9
    2806:	f009 fdda 	bl	c3be <outs>
    280a:	2800      	cmp	r0, #0
    280c:	f2c0 8153 	blt.w	2ab6 <z_cbvprintf_impl+0x6ca>
    2810:	4405      	add	r5, r0
			continue;
    2812:	9f03      	ldr	r7, [sp, #12]
    2814:	e5f2      	b.n	23fc <z_cbvprintf_impl+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    2816:	f854 3b04 	ldr.w	r3, [r4], #4
    281a:	17da      	asrs	r2, r3, #31
				value->uint = (unsigned char)value->uint;
    281c:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
    2820:	e7e8      	b.n	27f4 <z_cbvprintf_impl+0x408>
			} else if (length_mod == LENGTH_H) {
    2822:	2902      	cmp	r1, #2
    2824:	d1e5      	bne.n	27f2 <z_cbvprintf_impl+0x406>
				value->sint = (short)value->sint;
    2826:	b21a      	sxth	r2, r3
    2828:	f343 33c0 	sbfx	r3, r3, #15, #1
    282c:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    2830:	e7df      	b.n	27f2 <z_cbvprintf_impl+0x406>
		} else if (specifier_cat == SPECIFIER_UINT) {
    2832:	2b02      	cmp	r3, #2
    2834:	d124      	bne.n	2880 <z_cbvprintf_impl+0x494>
			switch (length_mod) {
    2836:	1ecb      	subs	r3, r1, #3
    2838:	2b04      	cmp	r3, #4
    283a:	d804      	bhi.n	2846 <z_cbvprintf_impl+0x45a>
    283c:	e8df f003 	tbb	[pc, r3]
    2840:	18101018 	.word	0x18101018
    2844:	18          	.byte	0x18
    2845:	00          	.byte	0x00
			if (length_mod == LENGTH_HH) {
    2846:	2901      	cmp	r1, #1
				value->uint = va_arg(ap, unsigned int);
    2848:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    284c:	f04f 0200 	mov.w	r2, #0
    2850:	d014      	beq.n	287c <z_cbvprintf_impl+0x490>
			} else if (length_mod == LENGTH_H) {
    2852:	2902      	cmp	r1, #2
				value->uint = va_arg(ap, unsigned int);
    2854:	e9cd 320e 	strd	r3, r2, [sp, #56]	; 0x38
			} else if (length_mod == LENGTH_H) {
    2858:	d1cc      	bne.n	27f4 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned short)value->uint;
    285a:	b29b      	uxth	r3, r3
			value->ptr = va_arg(ap, void *);
    285c:	930e      	str	r3, [sp, #56]	; 0x38
    285e:	e7c9      	b.n	27f4 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap,
    2860:	3407      	adds	r4, #7
    2862:	f024 0407 	bic.w	r4, r4, #7
				value->uint =
    2866:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    286a:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
			if (length_mod == LENGTH_HH) {
    286e:	e7c1      	b.n	27f4 <z_cbvprintf_impl+0x408>
					(uint_value_type)va_arg(ap, size_t);
    2870:	f854 3b04 	ldr.w	r3, [r4], #4
    2874:	930e      	str	r3, [sp, #56]	; 0x38
    2876:	2300      	movs	r3, #0
    2878:	930f      	str	r3, [sp, #60]	; 0x3c
			} else if (length_mod == LENGTH_H) {
    287a:	e7bb      	b.n	27f4 <z_cbvprintf_impl+0x408>
				value->uint = (unsigned char)value->uint;
    287c:	b2db      	uxtb	r3, r3
    287e:	e7cd      	b.n	281c <z_cbvprintf_impl+0x430>
		} else if (specifier_cat == SPECIFIER_FP) {
    2880:	2b04      	cmp	r3, #4
    2882:	d108      	bne.n	2896 <z_cbvprintf_impl+0x4aa>
					(sint_value_type)va_arg(ap, long long);
    2884:	3407      	adds	r4, #7
				value->ldbl = va_arg(ap, long double);
    2886:	f024 0407 	bic.w	r4, r4, #7
    288a:	e9d4 2300 	ldrd	r2, r3, [r4]
    288e:	3408      	adds	r4, #8
    2890:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
    2894:	e7ae      	b.n	27f4 <z_cbvprintf_impl+0x408>
		} else if (specifier_cat == SPECIFIER_PTR) {
    2896:	2b03      	cmp	r3, #3
    2898:	d1ac      	bne.n	27f4 <z_cbvprintf_impl+0x408>
			value->ptr = va_arg(ap, void *);
    289a:	f854 3b04 	ldr.w	r3, [r4], #4
    289e:	e7dd      	b.n	285c <z_cbvprintf_impl+0x470>
		switch (conv->specifier) {
    28a0:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    28a4:	2878      	cmp	r0, #120	; 0x78
    28a6:	d8b4      	bhi.n	2812 <z_cbvprintf_impl+0x426>
    28a8:	2862      	cmp	r0, #98	; 0x62
    28aa:	d81c      	bhi.n	28e6 <z_cbvprintf_impl+0x4fa>
    28ac:	2825      	cmp	r0, #37	; 0x25
    28ae:	f43f adad 	beq.w	240c <z_cbvprintf_impl+0x20>
    28b2:	2858      	cmp	r0, #88	; 0x58
    28b4:	d1ad      	bne.n	2812 <z_cbvprintf_impl+0x426>
			bps = encode_uint(value->uint, conv, buf, bpe);
    28b6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    28ba:	9300      	str	r3, [sp, #0]
    28bc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
    28c0:	ab08      	add	r3, sp, #32
    28c2:	aa10      	add	r2, sp, #64	; 0x40
    28c4:	f009 fd35 	bl	c332 <encode_uint>
			if (precision >= 0) {
    28c8:	f1ba 0f00 	cmp.w	sl, #0
			bps = encode_uint(value->uint, conv, buf, bpe);
    28cc:	4607      	mov	r7, r0
			if (precision >= 0) {
    28ce:	f280 809a 	bge.w	2a06 <z_cbvprintf_impl+0x61a>
		if (bps == NULL) {
    28d2:	2f00      	cmp	r7, #0
    28d4:	d09d      	beq.n	2812 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    28d6:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    28da:	1bd8      	subs	r0, r3, r7
		if (sign != 0) {
    28dc:	2e00      	cmp	r6, #0
    28de:	f000 80c1 	beq.w	2a64 <z_cbvprintf_impl+0x678>
			nj_len += 1U;
    28e2:	3001      	adds	r0, #1
    28e4:	e0be      	b.n	2a64 <z_cbvprintf_impl+0x678>
		switch (conv->specifier) {
    28e6:	3863      	subs	r0, #99	; 0x63
    28e8:	2815      	cmp	r0, #21
    28ea:	d892      	bhi.n	2812 <z_cbvprintf_impl+0x426>
    28ec:	a201      	add	r2, pc, #4	; (adr r2, 28f4 <z_cbvprintf_impl+0x508>)
    28ee:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    28f2:	bf00      	nop
    28f4:	000029c9 	.word	0x000029c9
    28f8:	000029db 	.word	0x000029db
    28fc:	00002813 	.word	0x00002813
    2900:	00002813 	.word	0x00002813
    2904:	00002813 	.word	0x00002813
    2908:	00002813 	.word	0x00002813
    290c:	000029db 	.word	0x000029db
    2910:	00002813 	.word	0x00002813
    2914:	00002813 	.word	0x00002813
    2918:	00002813 	.word	0x00002813
    291c:	00002813 	.word	0x00002813
    2920:	00002a69 	.word	0x00002a69
    2924:	00002a01 	.word	0x00002a01
    2928:	00002a27 	.word	0x00002a27
    292c:	00002813 	.word	0x00002813
    2930:	00002813 	.word	0x00002813
    2934:	0000294d 	.word	0x0000294d
    2938:	00002813 	.word	0x00002813
    293c:	00002a01 	.word	0x00002a01
    2940:	00002813 	.word	0x00002813
    2944:	00002813 	.word	0x00002813
    2948:	00002a01 	.word	0x00002a01
			if (precision >= 0) {
    294c:	f1ba 0f00 	cmp.w	sl, #0
			bps = (const char *)value->ptr;
    2950:	9f0e      	ldr	r7, [sp, #56]	; 0x38
			if (precision >= 0) {
    2952:	db35      	blt.n	29c0 <z_cbvprintf_impl+0x5d4>
				len = strnlen(bps, precision);
    2954:	4651      	mov	r1, sl
    2956:	4638      	mov	r0, r7
    2958:	f00a f8c3 	bl	cae2 <strnlen>
			bpe = bps + len;
    295c:	eb07 0a00 	add.w	sl, r7, r0
		if (bps == NULL) {
    2960:	2f00      	cmp	r7, #0
    2962:	f43f af56 	beq.w	2812 <z_cbvprintf_impl+0x426>
		char sign = 0;
    2966:	2600      	movs	r6, #0
		if (conv->altform_0c) {
    2968:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    296c:	f013 0210 	ands.w	r2, r3, #16
    2970:	9205      	str	r2, [sp, #20]
    2972:	f000 8093 	beq.w	2a9c <z_cbvprintf_impl+0x6b0>
			nj_len += 2U;
    2976:	3002      	adds	r0, #2
		if (conv->pad_fp) {
    2978:	065b      	lsls	r3, r3, #25
		nj_len += conv->pad0_value;
    297a:	9a11      	ldr	r2, [sp, #68]	; 0x44
			nj_len += conv->pad0_pre_exp;
    297c:	bf48      	it	mi
    297e:	9b12      	ldrmi	r3, [sp, #72]	; 0x48
		nj_len += conv->pad0_value;
    2980:	9204      	str	r2, [sp, #16]
    2982:	4410      	add	r0, r2
			nj_len += conv->pad0_pre_exp;
    2984:	bf48      	it	mi
    2986:	18c0      	addmi	r0, r0, r3
		if (width > 0) {
    2988:	f1b8 0f00 	cmp.w	r8, #0
    298c:	f340 80a0 	ble.w	2ad0 <z_cbvprintf_impl+0x6e4>
			if (!conv->flag_dash) {
    2990:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
			width -= (int)nj_len;
    2994:	eba8 0800 	sub.w	r8, r8, r0
			if (!conv->flag_dash) {
    2998:	f3c2 0380 	ubfx	r3, r2, #2, #1
    299c:	0750      	lsls	r0, r2, #29
    299e:	9306      	str	r3, [sp, #24]
    29a0:	f100 8096 	bmi.w	2ad0 <z_cbvprintf_impl+0x6e4>
				if (conv->flag_zero) {
    29a4:	0651      	lsls	r1, r2, #25
    29a6:	f140 8089 	bpl.w	2abc <z_cbvprintf_impl+0x6d0>
					if (sign != 0) {
    29aa:	b13e      	cbz	r6, 29bc <z_cbvprintf_impl+0x5d0>
						OUTC(sign);
    29ac:	4659      	mov	r1, fp
    29ae:	4630      	mov	r0, r6
    29b0:	47c8      	blx	r9
    29b2:	2800      	cmp	r0, #0
    29b4:	db7f      	blt.n	2ab6 <z_cbvprintf_impl+0x6ca>
    29b6:	9b06      	ldr	r3, [sp, #24]
    29b8:	3501      	adds	r5, #1
    29ba:	461e      	mov	r6, r3
					pad = '0';
    29bc:	2230      	movs	r2, #48	; 0x30
    29be:	e07e      	b.n	2abe <z_cbvprintf_impl+0x6d2>
				len = strlen(bps);
    29c0:	4638      	mov	r0, r7
    29c2:	f00a f887 	bl	cad4 <strlen>
    29c6:	e7c9      	b.n	295c <z_cbvprintf_impl+0x570>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    29c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    29ca:	f88d 3020 	strb.w	r3, [sp, #32]
		char sign = 0;
    29ce:	2600      	movs	r6, #0
			bps = buf;
    29d0:	af08      	add	r7, sp, #32
			bpe = buf + 1;
    29d2:	f10d 0a21 	add.w	sl, sp, #33	; 0x21
		size_t nj_len = (bpe - bps);
    29d6:	2001      	movs	r0, #1
    29d8:	e7c6      	b.n	2968 <z_cbvprintf_impl+0x57c>
			if (conv->flag_plus) {
    29da:	0719      	lsls	r1, r3, #28
			} else if (conv->flag_space) {
    29dc:	bf5c      	itt	pl
    29de:	f3c3 1300 	ubfxpl	r3, r3, #4, #1
    29e2:	015e      	lslpl	r6, r3, #5
			sint = value->sint;
    29e4:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
				sign = '+';
    29e8:	bf48      	it	mi
    29ea:	262b      	movmi	r6, #43	; 0x2b
			if (sint < 0) {
    29ec:	2b00      	cmp	r3, #0
    29ee:	f6bf af62 	bge.w	28b6 <z_cbvprintf_impl+0x4ca>
				value->uint = (uint_value_type)-sint;
    29f2:	4252      	negs	r2, r2
    29f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    29f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
				sign = '-';
    29fc:	262d      	movs	r6, #45	; 0x2d
    29fe:	e75a      	b.n	28b6 <z_cbvprintf_impl+0x4ca>
		switch (conv->specifier) {
    2a00:	2600      	movs	r6, #0
    2a02:	e758      	b.n	28b6 <z_cbvprintf_impl+0x4ca>
		char sign = 0;
    2a04:	2600      	movs	r6, #0
				conv->flag_zero = false;
    2a06:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
				size_t len = bpe - bps;
    2a0a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    2a0e:	1bdb      	subs	r3, r3, r7
				conv->flag_zero = false;
    2a10:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    2a14:	459a      	cmp	sl, r3
				conv->flag_zero = false;
    2a16:	f88d 2040 	strb.w	r2, [sp, #64]	; 0x40
				if (len < (size_t)precision) {
    2a1a:	f67f af5a 	bls.w	28d2 <z_cbvprintf_impl+0x4e6>
					conv->pad0_value = precision - (int)len;
    2a1e:	ebaa 0303 	sub.w	r3, sl, r3
    2a22:	9311      	str	r3, [sp, #68]	; 0x44
    2a24:	e755      	b.n	28d2 <z_cbvprintf_impl+0x4e6>
			if (value->ptr != NULL) {
    2a26:	980e      	ldr	r0, [sp, #56]	; 0x38
    2a28:	b390      	cbz	r0, 2a90 <z_cbvprintf_impl+0x6a4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2a2a:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    2a2e:	9300      	str	r3, [sp, #0]
    2a30:	aa10      	add	r2, sp, #64	; 0x40
    2a32:	ab08      	add	r3, sp, #32
    2a34:	2100      	movs	r1, #0
    2a36:	f009 fc7c 	bl	c332 <encode_uint>
				conv->altform_0c = true;
    2a3a:	f8bd 3042 	ldrh.w	r3, [sp, #66]	; 0x42
    2a3e:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    2a42:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    2a46:	f043 0310 	orr.w	r3, r3, #16
			if (precision >= 0) {
    2a4a:	f1ba 0f00 	cmp.w	sl, #0
				bps = encode_uint((uintptr_t)value->ptr, conv,
    2a4e:	4607      	mov	r7, r0
				conv->altform_0c = true;
    2a50:	f8ad 3042 	strh.w	r3, [sp, #66]	; 0x42
			if (precision >= 0) {
    2a54:	dad6      	bge.n	2a04 <z_cbvprintf_impl+0x618>
		if (bps == NULL) {
    2a56:	2800      	cmp	r0, #0
    2a58:	f43f aedb 	beq.w	2812 <z_cbvprintf_impl+0x426>
		size_t nj_len = (bpe - bps);
    2a5c:	f10d 0336 	add.w	r3, sp, #54	; 0x36
    2a60:	1a18      	subs	r0, r3, r0
		char sign = 0;
    2a62:	2600      	movs	r6, #0
    2a64:	469a      	mov	sl, r3
    2a66:	e77f      	b.n	2968 <z_cbvprintf_impl+0x57c>
				store_count(conv, value->ptr, count);
    2a68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	switch ((enum length_mod_enum)conv->length_mod) {
    2a6a:	2907      	cmp	r1, #7
    2a6c:	f63f aed1 	bhi.w	2812 <z_cbvprintf_impl+0x426>
    2a70:	e8df f001 	tbb	[pc, r1]
    2a74:	0c06040c 	.word	0x0c06040c
    2a78:	0c0c0808 	.word	0x0c0c0808
		*(signed char *)dp = (signed char)count;
    2a7c:	701d      	strb	r5, [r3, #0]
		if (bps == NULL) {
    2a7e:	e6c8      	b.n	2812 <z_cbvprintf_impl+0x426>
		*(short *)dp = (short)count;
    2a80:	801d      	strh	r5, [r3, #0]
		if (bps == NULL) {
    2a82:	e6c6      	b.n	2812 <z_cbvprintf_impl+0x426>
		*(intmax_t *)dp = (intmax_t)count;
    2a84:	17ea      	asrs	r2, r5, #31
    2a86:	e9c3 5200 	strd	r5, r2, [r3]
		if (bps == NULL) {
    2a8a:	e6c2      	b.n	2812 <z_cbvprintf_impl+0x426>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    2a8c:	601d      	str	r5, [r3, #0]
		if (bps == NULL) {
    2a8e:	e6c0      	b.n	2812 <z_cbvprintf_impl+0x426>
    2a90:	4f2e      	ldr	r7, [pc, #184]	; (2b4c <z_cbvprintf_impl+0x760>)
		char sign = 0;
    2a92:	4606      	mov	r6, r0
			bpe = bps + 5;
    2a94:	f107 0a05 	add.w	sl, r7, #5
		size_t nj_len = (bpe - bps);
    2a98:	2005      	movs	r0, #5
    2a9a:	e765      	b.n	2968 <z_cbvprintf_impl+0x57c>
		} else if (conv->altform_0) {
    2a9c:	071a      	lsls	r2, r3, #28
			nj_len += 1U;
    2a9e:	bf48      	it	mi
    2aa0:	3001      	addmi	r0, #1
    2aa2:	e769      	b.n	2978 <z_cbvprintf_impl+0x58c>
    2aa4:	9307      	str	r3, [sp, #28]
					OUTC(pad);
    2aa6:	4610      	mov	r0, r2
    2aa8:	9206      	str	r2, [sp, #24]
    2aaa:	4659      	mov	r1, fp
    2aac:	47c8      	blx	r9
    2aae:	2800      	cmp	r0, #0
    2ab0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    2ab4:	da04      	bge.n	2ac0 <z_cbvprintf_impl+0x6d4>
#undef OUTS
#undef OUTC
}
    2ab6:	b015      	add	sp, #84	; 0x54
    2ab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    2abc:	2220      	movs	r2, #32
					pad = '0';
    2abe:	4643      	mov	r3, r8
				while (width-- > 0) {
    2ac0:	4619      	mov	r1, r3
    2ac2:	2900      	cmp	r1, #0
    2ac4:	f103 33ff 	add.w	r3, r3, #4294967295
    2ac8:	dcec      	bgt.n	2aa4 <z_cbvprintf_impl+0x6b8>
    2aca:	4445      	add	r5, r8
    2acc:	1a6d      	subs	r5, r5, r1
    2ace:	4698      	mov	r8, r3
		if (sign != 0) {
    2ad0:	b12e      	cbz	r6, 2ade <z_cbvprintf_impl+0x6f2>
			OUTC(sign);
    2ad2:	4659      	mov	r1, fp
    2ad4:	4630      	mov	r0, r6
    2ad6:	47c8      	blx	r9
    2ad8:	2800      	cmp	r0, #0
    2ada:	dbec      	blt.n	2ab6 <z_cbvprintf_impl+0x6ca>
    2adc:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    2ade:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
    2ae2:	06da      	lsls	r2, r3, #27
    2ae4:	d401      	bmi.n	2aea <z_cbvprintf_impl+0x6fe>
    2ae6:	071b      	lsls	r3, r3, #28
    2ae8:	d505      	bpl.n	2af6 <z_cbvprintf_impl+0x70a>
				OUTC('0');
    2aea:	4659      	mov	r1, fp
    2aec:	2030      	movs	r0, #48	; 0x30
    2aee:	47c8      	blx	r9
    2af0:	2800      	cmp	r0, #0
    2af2:	dbe0      	blt.n	2ab6 <z_cbvprintf_impl+0x6ca>
    2af4:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    2af6:	9b05      	ldr	r3, [sp, #20]
    2af8:	b133      	cbz	r3, 2b08 <z_cbvprintf_impl+0x71c>
				OUTC(conv->specifier);
    2afa:	f89d 0043 	ldrb.w	r0, [sp, #67]	; 0x43
    2afe:	4659      	mov	r1, fp
    2b00:	47c8      	blx	r9
    2b02:	2800      	cmp	r0, #0
    2b04:	dbd7      	blt.n	2ab6 <z_cbvprintf_impl+0x6ca>
    2b06:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2b08:	9e04      	ldr	r6, [sp, #16]
    2b0a:	442e      	add	r6, r5
    2b0c:	e005      	b.n	2b1a <z_cbvprintf_impl+0x72e>
				OUTC('0');
    2b0e:	4659      	mov	r1, fp
    2b10:	2030      	movs	r0, #48	; 0x30
    2b12:	47c8      	blx	r9
    2b14:	2800      	cmp	r0, #0
    2b16:	dbce      	blt.n	2ab6 <z_cbvprintf_impl+0x6ca>
    2b18:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    2b1a:	1b73      	subs	r3, r6, r5
    2b1c:	2b00      	cmp	r3, #0
    2b1e:	dcf6      	bgt.n	2b0e <z_cbvprintf_impl+0x722>
			OUTS(bps, bpe);
    2b20:	4653      	mov	r3, sl
    2b22:	463a      	mov	r2, r7
    2b24:	4659      	mov	r1, fp
    2b26:	4648      	mov	r0, r9
    2b28:	f009 fc49 	bl	c3be <outs>
    2b2c:	2800      	cmp	r0, #0
    2b2e:	dbc2      	blt.n	2ab6 <z_cbvprintf_impl+0x6ca>
    2b30:	4405      	add	r5, r0
		while (width > 0) {
    2b32:	44a8      	add	r8, r5
    2b34:	eba8 0305 	sub.w	r3, r8, r5
    2b38:	2b00      	cmp	r3, #0
    2b3a:	f77f ae6a 	ble.w	2812 <z_cbvprintf_impl+0x426>
			OUTC(' ');
    2b3e:	4659      	mov	r1, fp
    2b40:	2020      	movs	r0, #32
    2b42:	47c8      	blx	r9
    2b44:	2800      	cmp	r0, #0
    2b46:	dbb6      	blt.n	2ab6 <z_cbvprintf_impl+0x6ca>
    2b48:	3501      	adds	r5, #1
			--width;
    2b4a:	e7f3      	b.n	2b34 <z_cbvprintf_impl+0x748>
    2b4c:	0000f7e9 	.word	0x0000f7e9

00002b50 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    2b50:	f005 bd74 	b.w	863c <SystemInit>

00002b54 <activate_foreach_backend>:
		z_log_runtime_filters_init();
	}
}

static uint32_t activate_foreach_backend(uint32_t mask)
{
    2b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	while (mask_cpy) {
		uint32_t i = __builtin_ctz(mask_cpy);
		const struct log_backend *backend = log_backend_get(i);

		mask_cpy &= ~BIT(i);
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    2b58:	f8df 8058 	ldr.w	r8, [pc, #88]	; 2bb4 <activate_foreach_backend+0x60>
{
    2b5c:	4604      	mov	r4, r0
	while (mask_cpy) {
    2b5e:	4607      	mov	r7, r0
		mask_cpy &= ~BIT(i);
    2b60:	f04f 0901 	mov.w	r9, #1
	while (mask_cpy) {
    2b64:	b914      	cbnz	r4, 2b6c <activate_foreach_backend+0x18>
					   CONFIG_LOG_MAX_LEVEL);
		}
	}

	return mask;
}
    2b66:	4638      	mov	r0, r7
    2b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uint32_t i = __builtin_ctz(mask_cpy);
    2b6c:	fa94 f5a4 	rbit	r5, r4
    2b70:	fab5 f585 	clz	r5, r5
		mask_cpy &= ~BIT(i);
    2b74:	fa09 f305 	lsl.w	r3, r9, r5
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    2b78:	012e      	lsls	r6, r5, #4
    2b7a:	eb08 1505 	add.w	r5, r8, r5, lsl #4
		mask_cpy &= ~BIT(i);
    2b7e:	ea6f 0a03 	mvn.w	sl, r3
    2b82:	ea24 0403 	bic.w	r4, r4, r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    2b86:	7b2b      	ldrb	r3, [r5, #12]
    2b88:	2b00      	cmp	r3, #0
    2b8a:	d0eb      	beq.n	2b64 <activate_foreach_backend+0x10>
 * @retval -EBUSY if backend is not yet ready.
 */
static inline int log_backend_is_ready(const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	if (backend->api->is_ready != NULL) {
    2b8c:	f858 3006 	ldr.w	r3, [r8, r6]
    2b90:	691b      	ldr	r3, [r3, #16]
    2b92:	b94b      	cbnz	r3, 2ba8 <activate_foreach_backend+0x54>
					   backend->cb->ctx,
    2b94:	4446      	add	r6, r8
			log_backend_enable(backend,
    2b96:	2204      	movs	r2, #4
    2b98:	6873      	ldr	r3, [r6, #4]
    2b9a:	4628      	mov	r0, r5
    2b9c:	6819      	ldr	r1, [r3, #0]
			mask &= ~BIT(i);
    2b9e:	ea07 070a 	and.w	r7, r7, sl
			log_backend_enable(backend,
    2ba2:	f000 fa59 	bl	3058 <log_backend_enable>
    2ba6:	e7dd      	b.n	2b64 <activate_foreach_backend+0x10>
		return backend->api->is_ready(backend);
    2ba8:	4628      	mov	r0, r5
    2baa:	4798      	blx	r3
		if (backend->autostart && (log_backend_is_ready(backend) == 0)) {
    2bac:	2800      	cmp	r0, #0
    2bae:	d1d9      	bne.n	2b64 <activate_foreach_backend+0x10>
    2bb0:	e7f0      	b.n	2b94 <activate_foreach_backend+0x40>
    2bb2:	bf00      	nop
    2bb4:	0000dc3c 	.word	0x0000dc3c

00002bb8 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(void)
{
    2bb8:	b530      	push	{r4, r5, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    2bba:	4910      	ldr	r1, [pc, #64]	; (2bfc <enable_logger+0x44>)
    2bbc:	4810      	ldr	r0, [pc, #64]	; (2c00 <enable_logger+0x48>)
{
    2bbe:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    2bc0:	2200      	movs	r2, #0
    2bc2:	f00a fe88 	bl	d8d6 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    2bc6:	4d0f      	ldr	r5, [pc, #60]	; (2c04 <enable_logger+0x4c>)
    2bc8:	490f      	ldr	r1, [pc, #60]	; (2c08 <enable_logger+0x50>)
    2bca:	2200      	movs	r2, #0
    2bcc:	2300      	movs	r3, #0
    2bce:	e9cd 2306 	strd	r2, r3, [sp, #24]
    2bd2:	2400      	movs	r4, #0
    2bd4:	230e      	movs	r3, #14
    2bd6:	e9cd 3403 	strd	r3, r4, [sp, #12]
    2bda:	e9cd 4401 	strd	r4, r4, [sp, #4]
    2bde:	4b0b      	ldr	r3, [pc, #44]	; (2c0c <enable_logger+0x54>)
    2be0:	9400      	str	r4, [sp, #0]
    2be2:	f44f 7240 	mov.w	r2, #768	; 0x300
    2be6:	4628      	mov	r0, r5
    2be8:	f007 fedc 	bl	a9a4 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    2bec:	4908      	ldr	r1, [pc, #32]	; (2c10 <enable_logger+0x58>)
    2bee:	4628      	mov	r0, r5
    2bf0:	f00a fbf4 	bl	d3dc <z_impl_k_thread_name_set>
	} else {
		(void)z_log_init(false, false);
	}

	return 0;
}
    2bf4:	4620      	mov	r0, r4
    2bf6:	b009      	add	sp, #36	; 0x24
    2bf8:	bd30      	pop	{r4, r5, pc}
    2bfa:	bf00      	nop
    2bfc:	00002c15 	.word	0x00002c15
    2c00:	200008c8 	.word	0x200008c8
    2c04:	20000440 	.word	0x20000440
    2c08:	20002340 	.word	0x20002340
    2c0c:	00002f05 	.word	0x00002f05
    2c10:	0000f7ef 	.word	0x0000f7ef

00002c14 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    2c14:	4801      	ldr	r0, [pc, #4]	; (2c1c <log_process_thread_timer_expiry_fn+0x8>)
    2c16:	f008 b853 	b.w	acc0 <z_impl_k_sem_give>
    2c1a:	bf00      	nop
    2c1c:	20000310 	.word	0x20000310

00002c20 <z_log_init>:
{
    2c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2c24:	4680      	mov	r8, r0
	if (atomic_inc(&initialized) != 0) {
    2c26:	481f      	ldr	r0, [pc, #124]	; (2ca4 <z_log_init+0x84>)
{
    2c28:	460f      	mov	r7, r1
	if (atomic_inc(&initialized) != 0) {
    2c2a:	f009 fe48 	bl	c8be <atomic_inc>
    2c2e:	4606      	mov	r6, r0
    2c30:	2800      	cmp	r0, #0
    2c32:	d030      	beq.n	2c96 <z_log_init+0x76>
	uint32_t mask = 0;
    2c34:	2500      	movs	r5, #0
}
    2c36:	4628      	mov	r0, r5
    2c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (backend->autostart) {
    2c3c:	7b23      	ldrb	r3, [r4, #12]
    2c3e:	b173      	cbz	r3, 2c5e <z_log_init+0x3e>
	if (backend->api->init) {
    2c40:	6823      	ldr	r3, [r4, #0]
    2c42:	68db      	ldr	r3, [r3, #12]
    2c44:	b10b      	cbz	r3, 2c4a <z_log_init+0x2a>
		backend->api->init(backend);
    2c46:	4620      	mov	r0, r4
    2c48:	4798      	blx	r3
	if (backend->api->is_ready != NULL) {
    2c4a:	6823      	ldr	r3, [r4, #0]
    2c4c:	691b      	ldr	r3, [r3, #16]
    2c4e:	b9d3      	cbnz	r3, 2c86 <z_log_init+0x66>
				log_backend_enable(backend,
    2c50:	6863      	ldr	r3, [r4, #4]
    2c52:	2204      	movs	r2, #4
    2c54:	6819      	ldr	r1, [r3, #0]
    2c56:	4620      	mov	r0, r4
    2c58:	f000 f9fe 	bl	3058 <log_backend_enable>
			i++;
    2c5c:	3601      	adds	r6, #1
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2c5e:	3410      	adds	r4, #16
    2c60:	454c      	cmp	r4, r9
    2c62:	d3eb      	bcc.n	2c3c <z_log_init+0x1c>
	if (blocking) {
    2c64:	f1b8 0f00 	cmp.w	r8, #0
    2c68:	d0e5      	beq.n	2c36 <z_log_init+0x16>
		while (mask) {
    2c6a:	2d00      	cmp	r5, #0
    2c6c:	d0e2      	beq.n	2c34 <z_log_init+0x14>
			mask = activate_foreach_backend(mask);
    2c6e:	4628      	mov	r0, r5
    2c70:	f7ff ff70 	bl	2b54 <activate_foreach_backend>
    2c74:	4605      	mov	r5, r0
			if (IS_ENABLED(CONFIG_MULTITHREADING) && can_sleep) {
    2c76:	2f00      	cmp	r7, #0
    2c78:	d0f7      	beq.n	2c6a <z_log_init+0x4a>
	return z_impl_k_sleep(timeout);
    2c7a:	2100      	movs	r1, #0
    2c7c:	f44f 70a4 	mov.w	r0, #328	; 0x148
    2c80:	f008 fca0 	bl	b5c4 <z_impl_k_sleep>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    2c84:	e7f1      	b.n	2c6a <z_log_init+0x4a>
		return backend->api->is_ready(backend);
    2c86:	4620      	mov	r0, r4
    2c88:	4798      	blx	r3
			if (log_backend_is_ready(backend) == 0) {
    2c8a:	2800      	cmp	r0, #0
    2c8c:	d0e0      	beq.n	2c50 <z_log_init+0x30>
				mask |= BIT(i);
    2c8e:	fa0a f306 	lsl.w	r3, sl, r6
    2c92:	431d      	orrs	r5, r3
    2c94:	e7e2      	b.n	2c5c <z_log_init+0x3c>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2c96:	4c04      	ldr	r4, [pc, #16]	; (2ca8 <z_log_init+0x88>)
    2c98:	f8df 9010 	ldr.w	r9, [pc, #16]	; 2cac <z_log_init+0x8c>
	uint32_t mask = 0;
    2c9c:	4605      	mov	r5, r0
				mask |= BIT(i);
    2c9e:	f04f 0a01 	mov.w	sl, #1
    2ca2:	e7dd      	b.n	2c60 <z_log_init+0x40>
    2ca4:	20000c0c 	.word	0x20000c0c
    2ca8:	0000dc3c 	.word	0x0000dc3c
    2cac:	0000dc4c 	.word	0x0000dc4c

00002cb0 <log_format_func_t_get>:
}
    2cb0:	4b01      	ldr	r3, [pc, #4]	; (2cb8 <log_format_func_t_get+0x8>)
    2cb2:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2cb6:	4770      	bx	lr
    2cb8:	0000dcfc 	.word	0x0000dcfc

00002cbc <log_set_timestamp_func>:
{
    2cbc:	b508      	push	{r3, lr}
    2cbe:	4603      	mov	r3, r0
    2cc0:	4608      	mov	r0, r1
	if (timestamp_getter == NULL) {
    2cc2:	b12b      	cbz	r3, 2cd0 <log_set_timestamp_func+0x14>
	timestamp_func = timestamp_getter;
    2cc4:	4a04      	ldr	r2, [pc, #16]	; (2cd8 <log_set_timestamp_func+0x1c>)
    2cc6:	6013      	str	r3, [r2, #0]
		log_output_timestamp_freq_set(freq);
    2cc8:	f000 fc78 	bl	35bc <log_output_timestamp_freq_set>
	return 0;
    2ccc:	2000      	movs	r0, #0
}
    2cce:	bd08      	pop	{r3, pc}
		return -EINVAL;
    2cd0:	f06f 0015 	mvn.w	r0, #21
    2cd4:	e7fb      	b.n	2cce <log_set_timestamp_func+0x12>
    2cd6:	bf00      	nop
    2cd8:	2000002c 	.word	0x2000002c

00002cdc <z_log_notify_backend_enabled>:
{
    2cdc:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    2cde:	4c04      	ldr	r4, [pc, #16]	; (2cf0 <z_log_notify_backend_enabled+0x14>)
    2ce0:	7823      	ldrb	r3, [r4, #0]
    2ce2:	b913      	cbnz	r3, 2cea <z_log_notify_backend_enabled+0xe>
	z_impl_k_sem_give(sem);
    2ce4:	4803      	ldr	r0, [pc, #12]	; (2cf4 <z_log_notify_backend_enabled+0x18>)
    2ce6:	f007 ffeb 	bl	acc0 <z_impl_k_sem_give>
	backend_attached = true;
    2cea:	2301      	movs	r3, #1
    2cec:	7023      	strb	r3, [r4, #0]
}
    2cee:	bd10      	pop	{r4, pc}
    2cf0:	20001c33 	.word	0x20001c33
    2cf4:	20000310 	.word	0x20000310

00002cf8 <z_log_dropped>:
{
    2cf8:	b510      	push	{r4, lr}
    2cfa:	4604      	mov	r4, r0
	atomic_inc(&dropped_cnt);
    2cfc:	4808      	ldr	r0, [pc, #32]	; (2d20 <z_log_dropped+0x28>)
    2cfe:	f009 fdde 	bl	c8be <atomic_inc>
	if (buffered) {
    2d02:	b15c      	cbz	r4, 2d1c <z_log_dropped+0x24>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2d04:	f3bf 8f5b 	dmb	ish
    2d08:	4b06      	ldr	r3, [pc, #24]	; (2d24 <z_log_dropped+0x2c>)
    2d0a:	e853 1f00 	ldrex	r1, [r3]
    2d0e:	3901      	subs	r1, #1
    2d10:	e843 1200 	strex	r2, r1, [r3]
    2d14:	2a00      	cmp	r2, #0
    2d16:	d1f8      	bne.n	2d0a <z_log_dropped+0x12>
    2d18:	f3bf 8f5b 	dmb	ish
}
    2d1c:	bd10      	pop	{r4, pc}
    2d1e:	bf00      	nop
    2d20:	20000c04 	.word	0x20000c04
    2d24:	20000c08 	.word	0x20000c08

00002d28 <z_log_dropped_read_and_clear>:
}
    2d28:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    2d2a:	4b06      	ldr	r3, [pc, #24]	; (2d44 <z_log_dropped_read_and_clear+0x1c>)
    2d2c:	f3bf 8f5b 	dmb	ish
    2d30:	4601      	mov	r1, r0
    2d32:	e853 0f00 	ldrex	r0, [r3]
    2d36:	e843 1200 	strex	r2, r1, [r3]
    2d3a:	2a00      	cmp	r2, #0
    2d3c:	d1f9      	bne.n	2d32 <z_log_dropped_read_and_clear+0xa>
    2d3e:	f3bf 8f5b 	dmb	ish
    2d42:	4770      	bx	lr
    2d44:	20000c04 	.word	0x20000c04

00002d48 <dropped_notify>:
{
    2d48:	b570      	push	{r4, r5, r6, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    2d4a:	f7ff ffed 	bl	2d28 <z_log_dropped_read_and_clear>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2d4e:	4c08      	ldr	r4, [pc, #32]	; (2d70 <dropped_notify+0x28>)
    2d50:	4e08      	ldr	r6, [pc, #32]	; (2d74 <dropped_notify+0x2c>)
	uint32_t dropped = z_log_dropped_read_and_clear();
    2d52:	4605      	mov	r5, r0
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2d54:	42b4      	cmp	r4, r6
    2d56:	d300      	bcc.n	2d5a <dropped_notify+0x12>
}
    2d58:	bd70      	pop	{r4, r5, r6, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    2d5a:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2d5c:	795b      	ldrb	r3, [r3, #5]
    2d5e:	b12b      	cbz	r3, 2d6c <dropped_notify+0x24>
	if (backend->api->dropped != NULL) {
    2d60:	6823      	ldr	r3, [r4, #0]
    2d62:	685b      	ldr	r3, [r3, #4]
    2d64:	b113      	cbz	r3, 2d6c <dropped_notify+0x24>
		backend->api->dropped(backend, cnt);
    2d66:	4629      	mov	r1, r5
    2d68:	4620      	mov	r0, r4
    2d6a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2d6c:	3410      	adds	r4, #16
    2d6e:	e7f1      	b.n	2d54 <dropped_notify+0xc>
    2d70:	0000dc3c 	.word	0x0000dc3c
    2d74:	0000dc4c 	.word	0x0000dc4c

00002d78 <z_log_msg_init>:
{
    2d78:	b510      	push	{r4, lr}
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    2d7a:	4c04      	ldr	r4, [pc, #16]	; (2d8c <z_log_msg_init+0x14>)
    2d7c:	4904      	ldr	r1, [pc, #16]	; (2d90 <z_log_msg_init+0x18>)
    2d7e:	4620      	mov	r0, r4
    2d80:	f009 fc2e 	bl	c5e0 <mpsc_pbuf_init>
	curr_log_buffer = &log_buffer;
    2d84:	4b03      	ldr	r3, [pc, #12]	; (2d94 <z_log_msg_init+0x1c>)
    2d86:	601c      	str	r4, [r3, #0]
}
    2d88:	bd10      	pop	{r4, pc}
    2d8a:	bf00      	nop
    2d8c:	20000290 	.word	0x20000290
    2d90:	0000dce8 	.word	0x0000dce8
    2d94:	20000bfc 	.word	0x20000bfc

00002d98 <log_core_init>:
	panic_mode = false;
    2d98:	4a08      	ldr	r2, [pc, #32]	; (2dbc <log_core_init+0x24>)
		log_set_timestamp_func(default_get_timestamp,
    2d9a:	4809      	ldr	r0, [pc, #36]	; (2dc0 <log_core_init+0x28>)
{
    2d9c:	b508      	push	{r3, lr}
	panic_mode = false;
    2d9e:	2300      	movs	r3, #0
    2da0:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    2da2:	4a08      	ldr	r2, [pc, #32]	; (2dc4 <log_core_init+0x2c>)
    2da4:	6013      	str	r3, [r2, #0]
	buffered_cnt = 0;
    2da6:	4a08      	ldr	r2, [pc, #32]	; (2dc8 <log_core_init+0x30>)
		log_set_timestamp_func(default_get_timestamp,
    2da8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
	buffered_cnt = 0;
    2dac:	6013      	str	r3, [r2, #0]
		log_set_timestamp_func(default_get_timestamp,
    2dae:	f7ff ff85 	bl	2cbc <log_set_timestamp_func>
}
    2db2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg_init();
    2db6:	f7ff bfdf 	b.w	2d78 <z_log_msg_init>
    2dba:	bf00      	nop
    2dbc:	20001c34 	.word	0x20001c34
    2dc0:	0000c8bb 	.word	0x0000c8bb
    2dc4:	20000c04 	.word	0x20000c04
    2dc8:	20000c08 	.word	0x20000c08

00002dcc <z_log_msg_alloc>:
{
    2dcc:	4601      	mov	r1, r0
	return (struct log_msg *)mpsc_pbuf_alloc(buffer, wlen,
    2dce:	2200      	movs	r2, #0
    2dd0:	4801      	ldr	r0, [pc, #4]	; (2dd8 <z_log_msg_alloc+0xc>)
    2dd2:	2300      	movs	r3, #0
    2dd4:	f009 bc25 	b.w	c622 <mpsc_pbuf_alloc>
    2dd8:	20000290 	.word	0x20000290

00002ddc <z_log_msg_local_claim>:
	return (union log_msg_generic *)mpsc_pbuf_claim(&log_buffer);
    2ddc:	4801      	ldr	r0, [pc, #4]	; (2de4 <z_log_msg_local_claim+0x8>)
    2dde:	f009 bcbe 	b.w	c75e <mpsc_pbuf_claim>
    2de2:	bf00      	nop
    2de4:	20000290 	.word	0x20000290

00002de8 <z_log_msg_free>:
	mpsc_pbuf_free(buffer, &msg->buf);
    2de8:	4b02      	ldr	r3, [pc, #8]	; (2df4 <z_log_msg_free+0xc>)
{
    2dea:	4601      	mov	r1, r0
	mpsc_pbuf_free(buffer, &msg->buf);
    2dec:	6818      	ldr	r0, [r3, #0]
    2dee:	f009 bd08 	b.w	c802 <mpsc_pbuf_free>
    2df2:	bf00      	nop
    2df4:	20000bfc 	.word	0x20000bfc

00002df8 <z_log_msg_pending>:
	return mpsc_pbuf_is_pending(buffer);
    2df8:	4801      	ldr	r0, [pc, #4]	; (2e00 <z_log_msg_pending+0x8>)
    2dfa:	f009 bd3e 	b.w	c87a <mpsc_pbuf_is_pending>
    2dfe:	bf00      	nop
    2e00:	20000290 	.word	0x20000290

00002e04 <z_impl_log_process>:
{
    2e04:	b570      	push	{r4, r5, r6, lr}
	if (!backend_attached) {
    2e06:	4b28      	ldr	r3, [pc, #160]	; (2ea8 <z_impl_log_process+0xa4>)
    2e08:	7818      	ldrb	r0, [r3, #0]
    2e0a:	2800      	cmp	r0, #0
    2e0c:	d04b      	beq.n	2ea6 <z_impl_log_process+0xa2>
	return z_log_msg_local_claim();
    2e0e:	f7ff ffe5 	bl	2ddc <z_log_msg_local_claim>
	if (msg) {
    2e12:	4605      	mov	r5, r0
    2e14:	b190      	cbz	r0, 2e3c <z_impl_log_process+0x38>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    2e16:	f3bf 8f5b 	dmb	ish
    2e1a:	4b24      	ldr	r3, [pc, #144]	; (2eac <z_impl_log_process+0xa8>)
    2e1c:	e853 1f00 	ldrex	r1, [r3]
    2e20:	3901      	subs	r1, #1
    2e22:	e843 1200 	strex	r2, r1, [r3]
    2e26:	2a00      	cmp	r2, #0
    2e28:	d1f8      	bne.n	2e1c <z_impl_log_process+0x18>
    2e2a:	f3bf 8f5b 	dmb	ish
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2e2e:	4c20      	ldr	r4, [pc, #128]	; (2eb0 <z_impl_log_process+0xac>)
    2e30:	4e20      	ldr	r6, [pc, #128]	; (2eb4 <z_impl_log_process+0xb0>)
    2e32:	42b4      	cmp	r4, r6
    2e34:	d32d      	bcc.n	2e92 <z_impl_log_process+0x8e>
		z_log_msg_free(msg);
    2e36:	4628      	mov	r0, r5
    2e38:	f7ff ffd6 	bl	2de8 <z_log_msg_free>
	return dropped_cnt > 0;
    2e3c:	4b1e      	ldr	r3, [pc, #120]	; (2eb8 <z_impl_log_process+0xb4>)
    2e3e:	4c1f      	ldr	r4, [pc, #124]	; (2ebc <z_impl_log_process+0xb8>)
		if ((dropped_pend || unordered_pend) &&
    2e40:	681b      	ldr	r3, [r3, #0]
    2e42:	2b00      	cmp	r3, #0
    2e44:	dd19      	ble.n	2e7a <z_impl_log_process+0x76>
	return z_impl_k_uptime_ticks();
    2e46:	f00a fd1e 	bl	d886 <z_impl_k_uptime_ticks>
    2e4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2e4e:	fba0 0302 	umull	r0, r3, r0, r2
    2e52:	fb02 3101 	mla	r1, r2, r1, r3
    2e56:	0bc3      	lsrs	r3, r0, #15
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    2e58:	e9d4 2000 	ldrd	r2, r0, [r4]
    2e5c:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    2e60:	1a9b      	subs	r3, r3, r2
    2e62:	ea4f 31d1 	mov.w	r1, r1, lsr #15
		if ((dropped_pend || unordered_pend) &&
    2e66:	f240 32e9 	movw	r2, #1001	; 0x3e9
		   (k_uptime_get() - last_failure_report) > CONFIG_LOG_FAILURE_REPORT_PERIOD) {
    2e6a:	eb61 0100 	sbc.w	r1, r1, r0
		if ((dropped_pend || unordered_pend) &&
    2e6e:	4293      	cmp	r3, r2
    2e70:	f171 0100 	sbcs.w	r1, r1, #0
    2e74:	d301      	bcc.n	2e7a <z_impl_log_process+0x76>
				dropped_notify();
    2e76:	f7ff ff67 	bl	2d48 <dropped_notify>
		last_failure_report += CONFIG_LOG_FAILURE_REPORT_PERIOD;
    2e7a:	e9d4 3200 	ldrd	r3, r2, [r4]
    2e7e:	f513 737a 	adds.w	r3, r3, #1000	; 0x3e8
    2e82:	f142 0200 	adc.w	r2, r2, #0
    2e86:	e9c4 3200 	strd	r3, r2, [r4]
}
    2e8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return z_log_msg_pending();
    2e8e:	f7ff bfb3 	b.w	2df8 <z_log_msg_pending>
	return backend->cb->active;
    2e92:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend) &&
    2e94:	795b      	ldrb	r3, [r3, #5]
    2e96:	b123      	cbz	r3, 2ea2 <z_impl_log_process+0x9e>
	backend->api->process(backend, msg);
    2e98:	6823      	ldr	r3, [r4, #0]
    2e9a:	4629      	mov	r1, r5
    2e9c:	681b      	ldr	r3, [r3, #0]
    2e9e:	4620      	mov	r0, r4
    2ea0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2ea2:	3410      	adds	r4, #16
    2ea4:	e7c5      	b.n	2e32 <z_impl_log_process+0x2e>
}
    2ea6:	bd70      	pop	{r4, r5, r6, pc}
    2ea8:	20001c33 	.word	0x20001c33
    2eac:	20000c08 	.word	0x20000c08
    2eb0:	0000dc3c 	.word	0x0000dc3c
    2eb4:	0000dc4c 	.word	0x0000dc4c
    2eb8:	20000c04 	.word	0x20000c04
    2ebc:	200008c0 	.word	0x200008c0

00002ec0 <z_impl_log_panic>:
{
    2ec0:	b570      	push	{r4, r5, r6, lr}
	if (panic_mode) {
    2ec2:	4d0d      	ldr	r5, [pc, #52]	; (2ef8 <z_impl_log_panic+0x38>)
    2ec4:	7829      	ldrb	r1, [r5, #0]
    2ec6:	b961      	cbnz	r1, 2ee2 <z_impl_log_panic+0x22>
	(void)z_log_init(true, false);
    2ec8:	2001      	movs	r0, #1
    2eca:	f7ff fea9 	bl	2c20 <z_log_init>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2ece:	4c0b      	ldr	r4, [pc, #44]	; (2efc <z_impl_log_panic+0x3c>)
    2ed0:	4e0b      	ldr	r6, [pc, #44]	; (2f00 <z_impl_log_panic+0x40>)
    2ed2:	42b4      	cmp	r4, r6
    2ed4:	d306      	bcc.n	2ee4 <z_impl_log_panic+0x24>
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke0(K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process();
    2ed6:	f7ff ff95 	bl	2e04 <z_impl_log_process>
		while (log_process() == true) {
    2eda:	2800      	cmp	r0, #0
    2edc:	d1fb      	bne.n	2ed6 <z_impl_log_panic+0x16>
	panic_mode = true;
    2ede:	2301      	movs	r3, #1
    2ee0:	702b      	strb	r3, [r5, #0]
}
    2ee2:	bd70      	pop	{r4, r5, r6, pc}
	return backend->cb->active;
    2ee4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    2ee6:	795b      	ldrb	r3, [r3, #5]
    2ee8:	b11b      	cbz	r3, 2ef2 <z_impl_log_panic+0x32>
	backend->api->panic(backend);
    2eea:	6823      	ldr	r3, [r4, #0]
    2eec:	4620      	mov	r0, r4
    2eee:	689b      	ldr	r3, [r3, #8]
    2ef0:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2ef2:	3410      	adds	r4, #16
    2ef4:	e7ed      	b.n	2ed2 <z_impl_log_panic+0x12>
    2ef6:	bf00      	nop
    2ef8:	20001c34 	.word	0x20001c34
    2efc:	0000dc3c 	.word	0x0000dc3c
    2f00:	0000dc4c 	.word	0x0000dc4c

00002f04 <log_process_thread_func>:
	uint32_t activate_mask = z_log_init(false, false);
    2f04:	2100      	movs	r1, #0
{
    2f06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t activate_mask = z_log_init(false, false);
    2f0a:	4608      	mov	r0, r1
    2f0c:	f7ff fe88 	bl	2c20 <z_log_init>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    2f10:	4604      	mov	r4, r0
    2f12:	b348      	cbz	r0, 2f68 <log_process_thread_func+0x64>
    2f14:	f240 6867 	movw	r8, #1639	; 0x667
    2f18:	f04f 0900 	mov.w	r9, #0
	return z_impl_z_current_get();
    2f1c:	f008 fb86 	bl	b62c <z_impl_z_current_get>
	proc_tid = process_tid;
    2f20:	4b1a      	ldr	r3, [pc, #104]	; (2f8c <log_process_thread_func+0x88>)
    2f22:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    2f24:	b130      	cbz	r0, 2f34 <log_process_thread_func+0x30>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    2f26:	4b1a      	ldr	r3, [pc, #104]	; (2f90 <log_process_thread_func+0x8c>)
	    process_tid &&
    2f28:	681b      	ldr	r3, [r3, #0]
    2f2a:	2b09      	cmp	r3, #9
    2f2c:	dd02      	ble.n	2f34 <log_process_thread_func+0x30>
	z_impl_k_sem_give(sem);
    2f2e:	4819      	ldr	r0, [pc, #100]	; (2f94 <log_process_thread_func+0x90>)
    2f30:	f007 fec6 	bl	acc0 <z_impl_k_sem_give>
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2f34:	4f18      	ldr	r7, [pc, #96]	; (2f98 <log_process_thread_func+0x94>)
	return z_impl_k_sem_take(sem, timeout);
    2f36:	f8df a05c 	ldr.w	sl, [pc, #92]	; 2f94 <log_process_thread_func+0x90>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    2f3a:	2500      	movs	r5, #0
		if (activate_mask) {
    2f3c:	b144      	cbz	r4, 2f50 <log_process_thread_func+0x4c>
			activate_mask = activate_foreach_backend(activate_mask);
    2f3e:	4620      	mov	r0, r4
    2f40:	f7ff fe08 	bl	2b54 <activate_foreach_backend>
			if (!activate_mask) {
    2f44:	4604      	mov	r4, r0
    2f46:	b918      	cbnz	r0, 2f50 <log_process_thread_func+0x4c>
				timeout = K_FOREVER;
    2f48:	f04f 38ff 	mov.w	r8, #4294967295
    2f4c:	f04f 39ff 	mov.w	r9, #4294967295
    2f50:	f7ff ff58 	bl	2e04 <z_impl_log_process>
		if (log_process() == false) {
    2f54:	4606      	mov	r6, r0
    2f56:	b928      	cbnz	r0, 2f64 <log_process_thread_func+0x60>
			if (processed_any) {
    2f58:	b9b5      	cbnz	r5, 2f88 <log_process_thread_func+0x84>
    2f5a:	4642      	mov	r2, r8
    2f5c:	464b      	mov	r3, r9
    2f5e:	4650      	mov	r0, sl
    2f60:	f007 fece 	bl	ad00 <z_impl_k_sem_take>
	k_timeout_t timeout = (activate_mask != 0) ? K_MSEC(50) : K_FOREVER;
    2f64:	4635      	mov	r5, r6
    2f66:	e7e9      	b.n	2f3c <log_process_thread_func+0x38>
    2f68:	f04f 38ff 	mov.w	r8, #4294967295
    2f6c:	f04f 39ff 	mov.w	r9, #4294967295
    2f70:	e7d4      	b.n	2f1c <log_process_thread_func+0x18>
				      enum log_backend_evt event,
				      union log_backend_evt_arg *arg)
{
	__ASSERT_NO_MSG(backend != NULL);

	if (backend->api->notify) {
    2f72:	682b      	ldr	r3, [r5, #0]
    2f74:	699b      	ldr	r3, [r3, #24]
    2f76:	b11b      	cbz	r3, 2f80 <log_process_thread_func+0x7c>
		backend->api->notify(backend, event, arg);
    2f78:	2200      	movs	r2, #0
    2f7a:	4611      	mov	r1, r2
    2f7c:	4628      	mov	r0, r5
    2f7e:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(log_backend, backend) {
    2f80:	3510      	adds	r5, #16
    2f82:	42bd      	cmp	r5, r7
    2f84:	d3f5      	bcc.n	2f72 <log_process_thread_func+0x6e>
    2f86:	e7e8      	b.n	2f5a <log_process_thread_func+0x56>
    2f88:	4d04      	ldr	r5, [pc, #16]	; (2f9c <log_process_thread_func+0x98>)
    2f8a:	e7fa      	b.n	2f82 <log_process_thread_func+0x7e>
    2f8c:	20000c00 	.word	0x20000c00
    2f90:	20000c08 	.word	0x20000c08
    2f94:	20000310 	.word	0x20000310
    2f98:	0000dc4c 	.word	0x0000dc4c
    2f9c:	0000dc3c 	.word	0x0000dc3c

00002fa0 <z_log_msg_post_finalize>:
{
    2fa0:	b513      	push	{r0, r1, r4, lr}
	atomic_val_t cnt = atomic_inc(&buffered_cnt);
    2fa2:	4818      	ldr	r0, [pc, #96]	; (3004 <z_log_msg_post_finalize+0x64>)
    2fa4:	f009 fc8b 	bl	c8be <atomic_inc>
	if (panic_mode) {
    2fa8:	4b17      	ldr	r3, [pc, #92]	; (3008 <z_log_msg_post_finalize+0x68>)
    2faa:	781b      	ldrb	r3, [r3, #0]
    2fac:	b17b      	cbz	r3, 2fce <z_log_msg_post_finalize+0x2e>
	__asm__ volatile(
    2fae:	f04f 0340 	mov.w	r3, #64	; 0x40
    2fb2:	f3ef 8411 	mrs	r4, BASEPRI
    2fb6:	f383 8812 	msr	BASEPRI_MAX, r3
    2fba:	f3bf 8f6f 	isb	sy
    2fbe:	f7ff ff21 	bl	2e04 <z_impl_log_process>
	__asm__ volatile(
    2fc2:	f384 8811 	msr	BASEPRI, r4
    2fc6:	f3bf 8f6f 	isb	sy
}
    2fca:	b002      	add	sp, #8
    2fcc:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL) {
    2fce:	4b0f      	ldr	r3, [pc, #60]	; (300c <z_log_msg_post_finalize+0x6c>)
    2fd0:	681b      	ldr	r3, [r3, #0]
    2fd2:	2b00      	cmp	r3, #0
    2fd4:	d0f9      	beq.n	2fca <z_log_msg_post_finalize+0x2a>
		if (cnt == 0) {
    2fd6:	b950      	cbnz	r0, 2fee <z_log_msg_post_finalize+0x4e>
	z_impl_k_timer_start(timer, duration, period);
    2fd8:	2200      	movs	r2, #0
    2fda:	2300      	movs	r3, #0
    2fdc:	e9cd 2300 	strd	r2, r3, [sp]
    2fe0:	480b      	ldr	r0, [pc, #44]	; (3010 <z_log_msg_post_finalize+0x70>)
    2fe2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    2fe6:	2300      	movs	r3, #0
    2fe8:	f008 fd64 	bl	bab4 <z_impl_k_timer_start>
    2fec:	e7ed      	b.n	2fca <z_log_msg_post_finalize+0x2a>
		} else if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    2fee:	280a      	cmp	r0, #10
    2ff0:	d1eb      	bne.n	2fca <z_log_msg_post_finalize+0x2a>
	z_impl_k_timer_stop(timer);
    2ff2:	4807      	ldr	r0, [pc, #28]	; (3010 <z_log_msg_post_finalize+0x70>)
    2ff4:	f00a fc7b 	bl	d8ee <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    2ff8:	4806      	ldr	r0, [pc, #24]	; (3014 <z_log_msg_post_finalize+0x74>)
}
    2ffa:	b002      	add	sp, #8
    2ffc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3000:	f007 be5e 	b.w	acc0 <z_impl_k_sem_give>
    3004:	20000c08 	.word	0x20000c08
    3008:	20001c34 	.word	0x20001c34
    300c:	20000c00 	.word	0x20000c00
    3010:	200008c8 	.word	0x200008c8
    3014:	20000310 	.word	0x20000310

00003018 <z_log_msg_commit>:
{
    3018:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    301a:	4b06      	ldr	r3, [pc, #24]	; (3034 <z_log_msg_commit+0x1c>)
    301c:	681b      	ldr	r3, [r3, #0]
{
    301e:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    3020:	4798      	blx	r3
	mpsc_pbuf_commit(buffer, &m->buf);
    3022:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    3024:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(buffer, &m->buf);
    3026:	4804      	ldr	r0, [pc, #16]	; (3038 <z_log_msg_commit+0x20>)
    3028:	f009 fb79 	bl	c71e <mpsc_pbuf_commit>
}
    302c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    3030:	f7ff bfb6 	b.w	2fa0 <z_log_msg_post_finalize>
    3034:	2000002c 	.word	0x2000002c
    3038:	20000290 	.word	0x20000290

0000303c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    303c:	4a04      	ldr	r2, [pc, #16]	; (3050 <log_source_name_get+0x14>)
    303e:	4b05      	ldr	r3, [pc, #20]	; (3054 <log_source_name_get+0x18>)
    3040:	1a9b      	subs	r3, r3, r2
}

const char *log_source_name_get(uint32_t domain_id, uint32_t source_id)
{
	if (z_log_is_local_domain(domain_id)) {
		if (source_id < log_src_cnt_get(domain_id)) {
    3042:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
			return __log_const_start[source_id].name;
    3046:	bf34      	ite	cc
    3048:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
		} else {
			return NULL;
    304c:	2000      	movcs	r0, #0
		}
	}

	return link_source_name_get(domain_id, source_id);
}
    304e:	4770      	bx	lr
    3050:	0000db3c 	.word	0x0000db3c
    3054:	0000dc3c 	.word	0x0000dc3c

00003058 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    3058:	4b08      	ldr	r3, [pc, #32]	; (307c <log_backend_enable+0x24>)
    305a:	1ac3      	subs	r3, r0, r3
{
    305c:	b410      	push	{r4}
	id += backend - log_backend_get(0);
    305e:	111b      	asrs	r3, r3, #4
	backend->cb->id = id;
    3060:	6844      	ldr	r4, [r0, #4]
    3062:	3301      	adds	r3, #1

	log_backend_id_set(backend, id);
    3064:	7123      	strb	r3, [r4, #4]
	backend->cb->level = level;
    3066:	6843      	ldr	r3, [r0, #4]
    3068:	719a      	strb	r2, [r3, #6]
	backend->cb->ctx = ctx;
    306a:	6843      	ldr	r3, [r0, #4]
    306c:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    306e:	6843      	ldr	r3, [r0, #4]
    3070:	2201      	movs	r2, #1
    3072:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
}
    3074:	bc10      	pop	{r4}
	z_log_notify_backend_enabled();
    3076:	f7ff be31 	b.w	2cdc <z_log_notify_backend_enabled>
    307a:	bf00      	nop
    307c:	0000dc3c 	.word	0x0000dc3c

00003080 <z_impl_z_log_msg_static_create>:
}

void z_impl_z_log_msg_static_create(const void *source,
			      const struct log_msg_desc desc,
			      uint8_t *package, const void *data)
{
    3080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3084:	b08f      	sub	sp, #60	; 0x3c
    3086:	af04      	add	r7, sp, #16
    3088:	f3c1 284a 	ubfx	r8, r1, #9, #11
    308c:	60b8      	str	r0, [r7, #8]
    308e:	460d      	mov	r5, r1
    3090:	4691      	mov	r9, r2
    3092:	607b      	str	r3, [r7, #4]

	if (!BACKENDS_IN_USE()) {
		return;
	}

	struct log_msg_desc out_desc = desc;
    3094:	0d0c      	lsrs	r4, r1, #20
	int inlen = desc.package_len;
	struct log_msg *msg;

	if (inlen > 0) {
    3096:	f1b8 0f00 	cmp.w	r8, #0
    309a:	d063      	beq.n	3164 <z_impl_z_log_msg_static_create+0xe4>
	struct z_cbprintf_buf_desc buf_desc = {
    309c:	2600      	movs	r6, #0
	return cbprintf_package_convert(in_packaged, in_len,
    309e:	f107 0314 	add.w	r3, r7, #20
    30a2:	f04f 0b04 	mov.w	fp, #4
    30a6:	f04f 0a0a 	mov.w	sl, #10
		uint32_t flags = CBPRINTF_PACKAGE_CONVERT_RW_STR |
				 CBPRINTF_PACKAGE_CONVERT_PTR_CHECK;
		uint16_t strl[4];
		int len;

		len = cbprintf_package_copy(package, inlen,
    30aa:	f8c7 800c 	str.w	r8, [r7, #12]
	struct z_cbprintf_buf_desc buf_desc = {
    30ae:	e9c7 6607 	strd	r6, r6, [r7, #28]
    30b2:	627e      	str	r6, [r7, #36]	; 0x24
	return cbprintf_package_convert(in_packaged, in_len,
    30b4:	9301      	str	r3, [sp, #4]
    30b6:	f8cd b008 	str.w	fp, [sp, #8]
    30ba:	f8cd a000 	str.w	sl, [sp]
    30be:	f107 031c 	add.w	r3, r7, #28
    30c2:	68f9      	ldr	r1, [r7, #12]
    30c4:	4632      	mov	r2, r6
    30c6:	4648      	mov	r0, r9
    30c8:	f7fe fe88 	bl	1ddc <cbprintf_package_convert>
					    NULL, 0, flags,
					    strl, ARRAY_SIZE(strl));

		if (len > Z_LOG_MSG_MAX_PACKAGE) {
    30cc:	f5b0 6f00 	cmp.w	r0, #2048	; 0x800
    30d0:	4603      	mov	r3, r0
    30d2:	d31c      	bcc.n	310e <z_impl_z_log_msg_static_create+0x8e>
			struct cbprintf_package_hdr_ext *pkg =
				(struct cbprintf_package_hdr_ext *)package;

			LOG_WRN("Message (\"%s\") dropped because it exceeds size limitation (%u)",
    30d4:	466c      	mov	r4, sp
    30d6:	b08a      	sub	sp, #40	; 0x28
    30d8:	f8d9 1004 	ldr.w	r1, [r9, #4]
    30dc:	ab04      	add	r3, sp, #16
    30de:	4826      	ldr	r0, [pc, #152]	; (3178 <z_impl_z_log_msg_static_create+0xf8>)
    30e0:	e9c3 0105 	strd	r0, r1, [r3, #20]
    30e4:	f240 71ff 	movw	r1, #2047	; 0x7ff
    30e8:	61d9      	str	r1, [r3, #28]
    30ea:	461a      	mov	r2, r3
    30ec:	f44f 7100 	mov.w	r1, #512	; 0x200
    30f0:	8419      	strh	r1, [r3, #32]
    30f2:	4b22      	ldr	r3, [pc, #136]	; (317c <z_impl_z_log_msg_static_create+0xfc>)
    30f4:	f842 3f10 	str.w	r3, [r2, #16]!
    30f8:	4821      	ldr	r0, [pc, #132]	; (3180 <z_impl_z_log_msg_static_create+0x100>)
    30fa:	4633      	mov	r3, r6
    30fc:	f44f 5112 	mov.w	r1, #9344	; 0x2480
    3100:	f7ff ffbe 	bl	3080 <z_impl_z_log_msg_static_create>
    3104:	46a5      	mov	sp, r4
	} else {
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
	}

	z_log_msg_finalize(msg, source, out_desc, data);
}
    3106:	372c      	adds	r7, #44	; 0x2c
    3108:	46bd      	mov	sp, r7
    310a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		out_desc.package_len = len;
    310e:	f3c0 080a 	ubfx	r8, r0, #0, #11
 *
 * @return Length.
 */
static inline uint32_t log_msg_get_total_wlen(const struct log_msg_desc desc)
{
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    3112:	f104 0017 	add.w	r0, r4, #23
    3116:	4418      	add	r0, r3
    3118:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    311c:	0880      	lsrs	r0, r0, #2
    311e:	603b      	str	r3, [r7, #0]
    3120:	f7ff fe54 	bl	2dcc <z_log_msg_alloc>
    3124:	f368 2553 	bfi	r5, r8, #9, #11
		if (msg) {
    3128:	4604      	mov	r4, r0
    312a:	b190      	cbz	r0, 3152 <z_impl_z_log_msg_static_create+0xd2>
	struct z_cbprintf_buf_desc buf_desc = {
    312c:	683b      	ldr	r3, [r7, #0]
	return cbprintf_package_convert(in_packaged, in_len,
    312e:	4a15      	ldr	r2, [pc, #84]	; (3184 <z_impl_z_log_msg_static_create+0x104>)
	struct z_cbprintf_buf_desc buf_desc = {
    3130:	e9c7 3608 	strd	r3, r6, [r7, #32]
						    msg->data, out_desc.package_len,
    3134:	f100 0110 	add.w	r1, r0, #16
	return cbprintf_package_convert(in_packaged, in_len,
    3138:	f107 0314 	add.w	r3, r7, #20
	struct z_cbprintf_buf_desc buf_desc = {
    313c:	61f9      	str	r1, [r7, #28]
	return cbprintf_package_convert(in_packaged, in_len,
    313e:	e9cd a300 	strd	sl, r3, [sp]
    3142:	f8cd b008 	str.w	fp, [sp, #8]
    3146:	68f9      	ldr	r1, [r7, #12]
    3148:	f107 031c 	add.w	r3, r7, #28
    314c:	4648      	mov	r0, r9
    314e:	f7fe fe45 	bl	1ddc <cbprintf_package_convert>
	z_log_msg_finalize(msg, source, out_desc, data);
    3152:	f368 2553 	bfi	r5, r8, #9, #11
    3156:	687b      	ldr	r3, [r7, #4]
    3158:	68b9      	ldr	r1, [r7, #8]
    315a:	462a      	mov	r2, r5
    315c:	4620      	mov	r0, r4
    315e:	f009 fbe4 	bl	c92a <z_log_msg_finalize>
    3162:	e7d0      	b.n	3106 <z_impl_z_log_msg_static_create+0x86>
    3164:	f104 0017 	add.w	r0, r4, #23
    3168:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg_alloc(log_msg_get_total_wlen(out_desc));
    316c:	0880      	lsrs	r0, r0, #2
    316e:	f7ff fe2d 	bl	2dcc <z_log_msg_alloc>
    3172:	4604      	mov	r4, r0
    3174:	e7ed      	b.n	3152 <z_impl_z_log_msg_static_create+0xd2>
    3176:	bf00      	nop
    3178:	0000f804 	.word	0x0000f804
    317c:	01000004 	.word	0x01000004
    3180:	0000dba4 	.word	0x0000dba4
    3184:	0000c8ff 	.word	0x0000c8ff

00003188 <z_impl_z_log_msg_runtime_vcreate>:
#endif

void z_impl_z_log_msg_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    3188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    318c:	b087      	sub	sp, #28
    318e:	e9dd 6912 	ldrd	r6, r9, [sp, #72]	; 0x48
    3192:	e9dd 5a10 	ldrd	r5, sl, [sp, #64]	; 0x40
    3196:	4604      	mov	r4, r0
    3198:	460f      	mov	r7, r1
    319a:	4693      	mov	fp, r2
    319c:	4698      	mov	r8, r3
	int plen;

	if (fmt) {
    319e:	b3a6      	cbz	r6, 320a <z_impl_z_log_msg_runtime_vcreate+0x82>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    31a0:	2110      	movs	r1, #16
    31a2:	f8cd 9000 	str.w	r9, [sp]
    31a6:	4633      	mov	r3, r6
    31a8:	4652      	mov	r2, sl
    31aa:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    31ac:	f8cd 9014 	str.w	r9, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG_ALIGN_OFFSET,
    31b0:	f7fe fc3e 	bl	1a30 <cbvprintf_package>
    31b4:	4601      	mov	r1, r0
		va_end(ap2);
	} else {
		plen = 0;
	}

	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    31b6:	f105 0017 	add.w	r0, r5, #23
    31ba:	4408      	add	r0, r1
	struct log_msg *msg;
	uint8_t *pkg;
	struct log_msg_desc desc =
    31bc:	4b14      	ldr	r3, [pc, #80]	; (3210 <z_impl_z_log_msg_runtime_vcreate+0x88>)
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    31be:	9103      	str	r1, [sp, #12]
	struct log_msg_desc desc =
    31c0:	f004 0407 	and.w	r4, r4, #7
    31c4:	f00b 0b07 	and.w	fp, fp, #7
    31c8:	00e4      	lsls	r4, r4, #3
	size_t msg_wlen = Z_LOG_MSG_ALIGNED_WLEN(plen, dlen);
    31ca:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg_desc desc =
    31ce:	ea03 2341 	and.w	r3, r3, r1, lsl #9
    31d2:	ea44 148b 	orr.w	r4, r4, fp, lsl #6
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg_alloc(msg_wlen);
    31d6:	0880      	lsrs	r0, r0, #2
	struct log_msg_desc desc =
    31d8:	431c      	orrs	r4, r3
		msg = z_log_msg_alloc(msg_wlen);
    31da:	f7ff fdf7 	bl	2dcc <z_log_msg_alloc>
	struct log_msg_desc desc =
    31de:	ea44 5405 	orr.w	r4, r4, r5, lsl #20
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    31e2:	4605      	mov	r5, r0
    31e4:	b140      	cbz	r0, 31f8 <z_impl_z_log_msg_runtime_vcreate+0x70>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    31e6:	b13e      	cbz	r6, 31f8 <z_impl_z_log_msg_runtime_vcreate+0x70>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    31e8:	9903      	ldr	r1, [sp, #12]
    31ea:	f8cd 9000 	str.w	r9, [sp]
    31ee:	4633      	mov	r3, r6
    31f0:	4652      	mov	r2, sl
    31f2:	3010      	adds	r0, #16
    31f4:	f7fe fc1c 	bl	1a30 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg_finalize(msg, source, desc, data);
    31f8:	4643      	mov	r3, r8
    31fa:	4622      	mov	r2, r4
    31fc:	4639      	mov	r1, r7
    31fe:	4628      	mov	r0, r5
	}
}
    3200:	b007      	add	sp, #28
    3202:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg_finalize(msg, source, desc, data);
    3206:	f009 bb90 	b.w	c92a <z_log_msg_finalize>
		plen = 0;
    320a:	4631      	mov	r1, r6
    320c:	e7d3      	b.n	31b6 <z_impl_z_log_msg_runtime_vcreate+0x2e>
    320e:	bf00      	nop
    3210:	000ffe00 	.word	0x000ffe00

00003214 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    3214:	b40e      	push	{r1, r2, r3}
    3216:	b503      	push	{r0, r1, lr}
    3218:	ab03      	add	r3, sp, #12
    321a:	4601      	mov	r1, r0
    321c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    3220:	4804      	ldr	r0, [pc, #16]	; (3234 <print_formatted+0x20>)
	va_start(args, fmt);
    3222:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    3224:	f009 fba7 	bl	c976 <cbvprintf>
	va_end(args);

	return length;
}
    3228:	b002      	add	sp, #8
    322a:	f85d eb04 	ldr.w	lr, [sp], #4
    322e:	b003      	add	sp, #12
    3230:	4770      	bx	lr
    3232:	bf00      	nop
    3234:	0000c99f 	.word	0x0000c99f

00003238 <newline_print>:
	if (IS_ENABLED(CONFIG_LOG_BACKEND_NET) &&
	    flags & LOG_OUTPUT_FLAG_FORMAT_SYSLOG) {
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    3238:	06ca      	lsls	r2, r1, #27
    323a:	d405      	bmi.n	3248 <newline_print+0x10>
		return;
	}

	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    323c:	068b      	lsls	r3, r1, #26
		print_formatted(ctx, "\n");
    323e:	bf4c      	ite	mi
    3240:	4902      	ldrmi	r1, [pc, #8]	; (324c <newline_print+0x14>)
	} else {
		print_formatted(ctx, "\r\n");
    3242:	4903      	ldrpl	r1, [pc, #12]	; (3250 <newline_print+0x18>)
    3244:	f7ff bfe6 	b.w	3214 <print_formatted>
	}
}
    3248:	4770      	bx	lr
    324a:	bf00      	nop
    324c:	0000f844 	.word	0x0000f844
    3250:	0000f843 	.word	0x0000f843

00003254 <log_output_process>:
			uint8_t level,
			const uint8_t *package,
			const uint8_t *data,
			size_t data_len,
			uint32_t flags)
{
    3254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3258:	b089      	sub	sp, #36	; 0x24
    325a:	469b      	mov	fp, r3
    325c:	f89d 3048 	ldrb.w	r3, [sp, #72]	; 0x48
    3260:	9304      	str	r3, [sp, #16]
    3262:	e9dd 9313 	ldrd	r9, r3, [sp, #76]	; 0x4c
    3266:	9305      	str	r3, [sp, #20]
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;
	cbprintf_cb cb;

	if (!raw_string) {
    3268:	9b04      	ldr	r3, [sp, #16]
{
    326a:	9206      	str	r2, [sp, #24]
    326c:	e9dd 7615 	ldrd	r7, r6, [sp, #84]	; 0x54
    3270:	4604      	mov	r4, r0
    3272:	460d      	mov	r5, r1
	if (!raw_string) {
    3274:	2b00      	cmp	r3, #0
    3276:	f000 8087 	beq.w	3388 <log_output_process+0x134>
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    327a:	f006 0308 	and.w	r3, r6, #8
    327e:	9307      	str	r3, [sp, #28]
	const char *tag = IS_ENABLED(CONFIG_LOG) ? z_log_get_tag() : NULL;
    3280:	f009 fb3b 	bl	c8fa <z_log_get_tag>
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    3284:	f006 0a02 	and.w	sl, r6, #2
	if (tag) {
    3288:	4602      	mov	r2, r0
    328a:	2800      	cmp	r0, #0
    328c:	d04b      	beq.n	3326 <log_output_process+0xd2>
		length += print_formatted(output, "%s ", tag);
    328e:	4986      	ldr	r1, [pc, #536]	; (34a8 <log_output_process+0x254>)
    3290:	4620      	mov	r0, r4
    3292:	f7ff ffbf 	bl	3214 <print_formatted>
    3296:	4680      	mov	r8, r0
	if (stamp) {
    3298:	f1ba 0f00 	cmp.w	sl, #0
    329c:	d008      	beq.n	32b0 <log_output_process+0x5c>
	if (!format) {
    329e:	f016 0f44 	tst.w	r6, #68	; 0x44
    32a2:	d142      	bne.n	332a <log_output_process+0xd6>
		length = print_formatted(output, "[%08lu] ", timestamp);
    32a4:	4981      	ldr	r1, [pc, #516]	; (34ac <log_output_process+0x258>)
    32a6:	462a      	mov	r2, r5
    32a8:	4620      	mov	r0, r4
    32aa:	f7ff ffb3 	bl	3214 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    32ae:	4480      	add	r8, r0
	if (color) {
    32b0:	f006 0301 	and.w	r3, r6, #1
    32b4:	b15b      	cbz	r3, 32ce <log_output_process+0x7a>
		const char *log_color = start && (colors[level] != NULL) ?
    32b6:	4b7e      	ldr	r3, [pc, #504]	; (34b0 <log_output_process+0x25c>)
    32b8:	9a04      	ldr	r2, [sp, #16]
		print_formatted(output, "%s", log_color);
    32ba:	497e      	ldr	r1, [pc, #504]	; (34b4 <log_output_process+0x260>)
		const char *log_color = start && (colors[level] != NULL) ?
    32bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
		print_formatted(output, "%s", log_color);
    32c0:	4b7d      	ldr	r3, [pc, #500]	; (34b8 <log_output_process+0x264>)
    32c2:	4620      	mov	r0, r4
    32c4:	2a00      	cmp	r2, #0
    32c6:	bf08      	it	eq
    32c8:	461a      	moveq	r2, r3
    32ca:	f7ff ffa3 	bl	3214 <print_formatted>
	if (level_on) {
    32ce:	f006 0308 	and.w	r3, r6, #8
    32d2:	2b00      	cmp	r3, #0
    32d4:	d055      	beq.n	3382 <log_output_process+0x12e>
		total += print_formatted(output, "<%s> ", severity[level]);
    32d6:	4b79      	ldr	r3, [pc, #484]	; (34bc <log_output_process+0x268>)
    32d8:	9a04      	ldr	r2, [sp, #16]
    32da:	4979      	ldr	r1, [pc, #484]	; (34c0 <log_output_process+0x26c>)
    32dc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    32e0:	4620      	mov	r0, r4
    32e2:	f7ff ff97 	bl	3214 <print_formatted>
    32e6:	4605      	mov	r5, r0
	if (domain) {
    32e8:	9b06      	ldr	r3, [sp, #24]
    32ea:	b12b      	cbz	r3, 32f8 <log_output_process+0xa4>
		total += print_formatted(output, "%s/", domain);
    32ec:	4975      	ldr	r1, [pc, #468]	; (34c4 <log_output_process+0x270>)
    32ee:	461a      	mov	r2, r3
    32f0:	4620      	mov	r0, r4
    32f2:	f7ff ff8f 	bl	3214 <print_formatted>
    32f6:	4405      	add	r5, r0
	if (source) {
    32f8:	f1bb 0f00 	cmp.w	fp, #0
    32fc:	d005      	beq.n	330a <log_output_process+0xb6>
		total += print_formatted(output,
    32fe:	4972      	ldr	r1, [pc, #456]	; (34c8 <log_output_process+0x274>)
    3300:	465a      	mov	r2, fp
    3302:	4620      	mov	r0, r4
    3304:	f7ff ff86 	bl	3214 <print_formatted>
    3308:	4405      	add	r5, r0
	length += ids_print(output, level_on, func_on, domain, source, level);
    330a:	4445      	add	r5, r8
		 * appending <CR> to the new line character).
		 */
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
	}

	if (package) {
    330c:	f1b9 0f00 	cmp.w	r9, #0
    3310:	d149      	bne.n	33a6 <log_output_process+0x152>

		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	if (data_len) {
    3312:	2f00      	cmp	r7, #0
    3314:	d14f      	bne.n	33b6 <log_output_process+0x162>
	if (color) {
    3316:	07f3      	lsls	r3, r6, #31
    3318:	f100 80c0 	bmi.w	349c <log_output_process+0x248>
	newline_print(output, flags);
    331c:	4631      	mov	r1, r6
    331e:	4620      	mov	r0, r4
    3320:	f7ff ff8a 	bl	3238 <newline_print>
}
    3324:	e0b4      	b.n	3490 <log_output_process+0x23c>
	uint32_t length = 0U;
    3326:	4680      	mov	r8, r0
    3328:	e7b6      	b.n	3298 <log_output_process+0x44>
	} else if (freq != 0U) {
    332a:	4b68      	ldr	r3, [pc, #416]	; (34cc <log_output_process+0x278>)
    332c:	6818      	ldr	r0, [r3, #0]
    332e:	2800      	cmp	r0, #0
    3330:	d0bd      	beq.n	32ae <log_output_process+0x5a>
		timestamp /= timestamp_div;
    3332:	4b67      	ldr	r3, [pc, #412]	; (34d0 <log_output_process+0x27c>)
		ms = (remainder * 1000U) / freq;
    3334:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		timestamp /= timestamp_div;
    3338:	681b      	ldr	r3, [r3, #0]
    333a:	fbb5 f5f3 	udiv	r5, r5, r3
		total_seconds = timestamp / freq;
    333e:	f44f 6261 	mov.w	r2, #3600	; 0xe10
    3342:	fbb5 f3f0 	udiv	r3, r5, r0
		remainder = timestamp % freq;
    3346:	fb00 5513 	mls	r5, r0, r3, r5
    334a:	fbb3 faf2 	udiv	sl, r3, r2
		ms = (remainder * 1000U) / freq;
    334e:	fb0e f505 	mul.w	r5, lr, r5
    3352:	fb02 321a 	mls	r2, r2, sl, r3
		mins = seconds / 60U;
    3356:	213c      	movs	r1, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3358:	fbb5 fcf0 	udiv	ip, r5, r0
		mins = seconds / 60U;
    335c:	fbb2 f3f1 	udiv	r3, r2, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3360:	fb00 551c 	mls	r5, r0, ip, r5
				length = print_formatted(output,
    3364:	fb01 2213 	mls	r2, r1, r3, r2
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    3368:	fb0e f505 	mul.w	r5, lr, r5
				length = print_formatted(output,
    336c:	9200      	str	r2, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    336e:	fbb5 f5f0 	udiv	r5, r5, r0
				length = print_formatted(output,
    3372:	4958      	ldr	r1, [pc, #352]	; (34d4 <log_output_process+0x280>)
    3374:	e9cd c501 	strd	ip, r5, [sp, #4]
    3378:	4652      	mov	r2, sl
    337a:	4620      	mov	r0, r4
    337c:	f7ff ff4a 	bl	3214 <print_formatted>
    3380:	e795      	b.n	32ae <log_output_process+0x5a>
	int total = 0;
    3382:	f006 0508 	and.w	r5, r6, #8
    3386:	e7af      	b.n	32e8 <log_output_process+0x94>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    3388:	f1bb 0f01 	cmp.w	fp, #1
    338c:	d106      	bne.n	339c <log_output_process+0x148>
	if (package) {
    338e:	f1b9 0f00 	cmp.w	r9, #0
    3392:	d164      	bne.n	345e <log_output_process+0x20a>
	if (data_len) {
    3394:	2f00      	cmp	r7, #0
    3396:	d07b      	beq.n	3490 <log_output_process+0x23c>
		prefix_offset = 0;
    3398:	2500      	movs	r5, #0
    339a:	e00c      	b.n	33b6 <log_output_process+0x162>
	if (package) {
    339c:	f1b9 0f00 	cmp.w	r9, #0
    33a0:	d0f8      	beq.n	3394 <log_output_process+0x140>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    33a2:	484d      	ldr	r0, [pc, #308]	; (34d8 <log_output_process+0x284>)
    33a4:	e05c      	b.n	3460 <log_output_process+0x20c>
		cb = out_func;
    33a6:	484d      	ldr	r0, [pc, #308]	; (34dc <log_output_process+0x288>)
		return cbpprintf_external(out, cbvprintf_tagged_args,
					  ctx, packaged);
	}
#endif

	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    33a8:	494d      	ldr	r1, [pc, #308]	; (34e0 <log_output_process+0x28c>)
    33aa:	464b      	mov	r3, r9
    33ac:	4622      	mov	r2, r4
    33ae:	f008 fc37 	bl	bc20 <cbpprintf_external>
	if (data_len) {
    33b2:	2f00      	cmp	r7, #0
    33b4:	d068      	beq.n	3488 <log_output_process+0x234>
		print_formatted(output, " ");
    33b6:	f8df 912c 	ldr.w	r9, [pc, #300]	; 34e4 <log_output_process+0x290>
			print_formatted(output, "%02x ", data[i]);
    33ba:	f8df a12c 	ldr.w	sl, [pc, #300]	; 34e8 <log_output_process+0x294>
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    33be:	2f10      	cmp	r7, #16
	newline_print(output, flags);
    33c0:	4631      	mov	r1, r6
    33c2:	4620      	mov	r0, r4
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    33c4:	46b8      	mov	r8, r7
    33c6:	bf28      	it	cs
    33c8:	f04f 0810 	movcs.w	r8, #16
	newline_print(output, flags);
    33cc:	f7ff ff34 	bl	3238 <newline_print>
	for (int i = 0; i < prefix_offset; i++) {
    33d0:	f04f 0b00 	mov.w	fp, #0
    33d4:	455d      	cmp	r5, fp
    33d6:	dc45      	bgt.n	3464 <log_output_process+0x210>
			print_formatted(output, "%02x ", data[i]);
    33d8:	9b05      	ldr	r3, [sp, #20]
    33da:	4651      	mov	r1, sl
    33dc:	781a      	ldrb	r2, [r3, #0]
    33de:	4620      	mov	r0, r4
    33e0:	f7ff ff18 	bl	3214 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    33e4:	f04f 0b01 	mov.w	fp, #1
		if (i > 0 && !(i % 8)) {
    33e8:	f01b 0f07 	tst.w	fp, #7
    33ec:	d103      	bne.n	33f6 <log_output_process+0x1a2>
			print_formatted(output, " ");
    33ee:	4649      	mov	r1, r9
    33f0:	4620      	mov	r0, r4
    33f2:	f7ff ff0f 	bl	3214 <print_formatted>
		if (i < length) {
    33f6:	45d8      	cmp	r8, fp
    33f8:	d93b      	bls.n	3472 <log_output_process+0x21e>
			print_formatted(output, "%02x ", data[i]);
    33fa:	9b05      	ldr	r3, [sp, #20]
    33fc:	4651      	mov	r1, sl
    33fe:	f813 200b 	ldrb.w	r2, [r3, fp]
    3402:	4620      	mov	r0, r4
    3404:	f7ff ff06 	bl	3214 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3408:	f10b 0b01 	add.w	fp, fp, #1
    340c:	f1bb 0f10 	cmp.w	fp, #16
    3410:	d1ea      	bne.n	33e8 <log_output_process+0x194>
	print_formatted(output, "|");
    3412:	4936      	ldr	r1, [pc, #216]	; (34ec <log_output_process+0x298>)
    3414:	4620      	mov	r0, r4
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3416:	f04f 0b00 	mov.w	fp, #0
	print_formatted(output, "|");
    341a:	f7ff fefb 	bl	3214 <print_formatted>
		if (i < length) {
    341e:	465a      	mov	r2, fp
			unsigned char c = (unsigned char)data[i];
    3420:	9b05      	ldr	r3, [sp, #20]
    3422:	5c9a      	ldrb	r2, [r3, r2]
	return (int)((((unsigned)c) >= ' ') &&
    3424:	f1a2 0120 	sub.w	r1, r2, #32
			print_formatted(output, "%c",
    3428:	295f      	cmp	r1, #95	; 0x5f
    342a:	bf28      	it	cs
    342c:	222e      	movcs	r2, #46	; 0x2e
    342e:	4930      	ldr	r1, [pc, #192]	; (34f0 <log_output_process+0x29c>)
    3430:	4620      	mov	r0, r4
    3432:	f7ff feef 	bl	3214 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    3436:	f10b 0b01 	add.w	fp, fp, #1
    343a:	f1bb 0f10 	cmp.w	fp, #16
    343e:	d01d      	beq.n	347c <log_output_process+0x228>
		if (i > 0 && !(i % 8)) {
    3440:	f01b 0f07 	tst.w	fp, #7
    3444:	d103      	bne.n	344e <log_output_process+0x1fa>
			print_formatted(output, " ");
    3446:	4649      	mov	r1, r9
    3448:	4620      	mov	r0, r4
    344a:	f7ff fee3 	bl	3214 <print_formatted>
		if (i < length) {
    344e:	45d8      	cmp	r8, fp
    3450:	465a      	mov	r2, fp
    3452:	d8e5      	bhi.n	3420 <log_output_process+0x1cc>
			print_formatted(output, " ");
    3454:	4649      	mov	r1, r9
    3456:	4620      	mov	r0, r4
    3458:	f7ff fedc 	bl	3214 <print_formatted>
    345c:	e7eb      	b.n	3436 <log_output_process+0x1e2>
		cb = ((uintptr_t)source == 1) ? out_func : cr_out_func;
    345e:	481f      	ldr	r0, [pc, #124]	; (34dc <log_output_process+0x288>)
		prefix_offset = 0;
    3460:	9d04      	ldr	r5, [sp, #16]
    3462:	e7a1      	b.n	33a8 <log_output_process+0x154>
		print_formatted(output, " ");
    3464:	4649      	mov	r1, r9
    3466:	4620      	mov	r0, r4
    3468:	f7ff fed4 	bl	3214 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    346c:	f10b 0b01 	add.w	fp, fp, #1
    3470:	e7b0      	b.n	33d4 <log_output_process+0x180>
			print_formatted(output, "   ");
    3472:	4920      	ldr	r1, [pc, #128]	; (34f4 <log_output_process+0x2a0>)
    3474:	4620      	mov	r0, r4
    3476:	f7ff fecd 	bl	3214 <print_formatted>
    347a:	e7c5      	b.n	3408 <log_output_process+0x1b4>
		data += length;
    347c:	9b05      	ldr	r3, [sp, #20]
	} while (len);
    347e:	ebb7 0708 	subs.w	r7, r7, r8
		data += length;
    3482:	4443      	add	r3, r8
    3484:	9305      	str	r3, [sp, #20]
	} while (len);
    3486:	d19a      	bne.n	33be <log_output_process+0x16a>
		log_msg_hexdump(output, (uint8_t *)data, data_len, prefix_offset, flags);
	}

	if (!raw_string) {
    3488:	9b04      	ldr	r3, [sp, #16]
    348a:	2b00      	cmp	r3, #0
    348c:	f47f af43 	bne.w	3316 <log_output_process+0xc2>
		postfix_print(output, flags, level);
	}

	log_output_flush(output);
    3490:	4620      	mov	r0, r4
}
    3492:	b009      	add	sp, #36	; 0x24
    3494:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	log_output_flush(output);
    3498:	f009 ba74 	b.w	c984 <log_output_flush>
		print_formatted(output, "%s", log_color);
    349c:	4a06      	ldr	r2, [pc, #24]	; (34b8 <log_output_process+0x264>)
    349e:	4905      	ldr	r1, [pc, #20]	; (34b4 <log_output_process+0x260>)
    34a0:	4620      	mov	r0, r4
    34a2:	f7ff feb7 	bl	3214 <print_formatted>
}
    34a6:	e739      	b.n	331c <log_output_process+0xc8>
    34a8:	0000f84b 	.word	0x0000f84b
    34ac:	0000f84f 	.word	0x0000f84f
    34b0:	0000dd0c 	.word	0x0000dd0c
    34b4:	0000f874 	.word	0x0000f874
    34b8:	0000f846 	.word	0x0000f846
    34bc:	0000dd20 	.word	0x0000dd20
    34c0:	0000f877 	.word	0x0000f877
    34c4:	0000f87d 	.word	0x0000f87d
    34c8:	0000f881 	.word	0x0000f881
    34cc:	20000c14 	.word	0x20000c14
    34d0:	20000c10 	.word	0x20000c10
    34d4:	0000f858 	.word	0x0000f858
    34d8:	0000c9d5 	.word	0x0000c9d5
    34dc:	0000c99f 	.word	0x0000c99f
    34e0:	0000c977 	.word	0x0000c977
    34e4:	0000f88e 	.word	0x0000f88e
    34e8:	0000f886 	.word	0x0000f886
    34ec:	0000f890 	.word	0x0000f890
    34f0:	0000f892 	.word	0x0000f892
    34f4:	0000f88c 	.word	0x0000f88c

000034f8 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *output,
			    struct log_msg *msg, uint32_t flags)
{
    34f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg_get_level(struct log_msg *msg)
{
	return msg->hdr.desc.level;
    34fc:	880f      	ldrh	r7, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg_get_source(struct log_msg *msg)
{
	return msg->hdr.source;
    34fe:	684b      	ldr	r3, [r1, #4]
 *
 * @return Timestamp.
 */
static inline log_timestamp_t log_msg_get_timestamp(struct log_msg *msg)
{
	return msg->hdr.timestamp;
    3500:	688e      	ldr	r6, [r1, #8]
    3502:	b086      	sub	sp, #24
    3504:	4605      	mov	r5, r0
    3506:	460c      	mov	r4, r1
    3508:	4690      	mov	r8, r2
	return msg->hdr.desc.level;
    350a:	f3c7 1782 	ubfx	r7, r7, #6, #3
		/* Remote domain is converting source pointer to ID */
		source_id = (int16_t)(uintptr_t)log_msg_get_source(msg);
	} else {
		void *source = (void *)log_msg_get_source(msg);

		if (source != NULL) {
    350e:	b15b      	cbz	r3, 3528 <log_output_msg_process+0x30>
    3510:	4a13      	ldr	r2, [pc, #76]	; (3560 <log_output_msg_process+0x68>)
    3512:	1a9b      	subs	r3, r3, r2
			source_id = IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
    3514:	f343 01cf 	sbfx	r1, r3, #3, #16
		} else {
			source_id = -1;
		}
	}

	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    3518:	2900      	cmp	r1, #0
    351a:	db1f      	blt.n	355c <log_output_msg_process+0x64>
	return msg->hdr.desc.domain;
    351c:	7820      	ldrb	r0, [r4, #0]
    351e:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    3522:	f7ff fd8b 	bl	303c <log_source_name_get>
    3526:	4603      	mov	r3, r0
 *
 * @return pointer to the package.
 */
static inline uint8_t *log_msg_get_package(struct log_msg *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;
    3528:	4621      	mov	r1, r4
	*len = msg->hdr.desc.data_len;
    352a:	8860      	ldrh	r0, [r4, #2]
	*len = msg->hdr.desc.package_len;
    352c:	f851 2b10 	ldr.w	r2, [r1], #16
	size_t plen, dlen;
	uint8_t *package = log_msg_get_package(msg, &plen);
	uint8_t *data = log_msg_get_data(msg, &dlen);

	log_output_process(output, timestamp, NULL, sname, level,
    3530:	9700      	str	r7, [sp, #0]
    3532:	f3c2 224a 	ubfx	r2, r2, #9, #11
    3536:	2a00      	cmp	r2, #0
	return msg->data + msg->hdr.desc.package_len;
    3538:	eb01 0402 	add.w	r4, r1, r2
	*len = msg->hdr.desc.data_len;
    353c:	f3c0 100b 	ubfx	r0, r0, #4, #12
    3540:	bf08      	it	eq
    3542:	2100      	moveq	r1, #0
    3544:	e9cd 0803 	strd	r0, r8, [sp, #12]
    3548:	e9cd 1401 	strd	r1, r4, [sp, #4]
    354c:	2200      	movs	r2, #0
    354e:	4631      	mov	r1, r6
    3550:	4628      	mov	r0, r5
    3552:	f7ff fe7f 	bl	3254 <log_output_process>
			   plen > 0 ? package : NULL, data, dlen, flags);
}
    3556:	b006      	add	sp, #24
    3558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	const char *sname = source_id >= 0 ? log_source_name_get(domain_id, source_id) : NULL;
    355c:	2300      	movs	r3, #0
    355e:	e7e3      	b.n	3528 <log_output_msg_process+0x30>
    3560:	0000db3c 	.word	0x0000db3c

00003564 <log_output_dropped_process>:

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    3564:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3566:	f242 730f 	movw	r3, #9999	; 0x270f
    356a:	428b      	cmp	r3, r1
    356c:	bf28      	it	cs
    356e:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    3570:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3572:	4a0f      	ldr	r2, [pc, #60]	; (35b0 <log_output_dropped_process+0x4c>)
{
    3574:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3576:	2105      	movs	r1, #5
    3578:	4668      	mov	r0, sp
    357a:	f008 fbc9 	bl	bd10 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    357e:	6863      	ldr	r3, [r4, #4]
    3580:	490c      	ldr	r1, [pc, #48]	; (35b4 <log_output_dropped_process+0x50>)
    3582:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    3584:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    3586:	220b      	movs	r2, #11
    3588:	4628      	mov	r0, r5
    358a:	f009 f9e7 	bl	c95c <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    358e:	6863      	ldr	r3, [r4, #4]
    3590:	4632      	mov	r2, r6
    3592:	4669      	mov	r1, sp
    3594:	4628      	mov	r0, r5
    3596:	685b      	ldr	r3, [r3, #4]
    3598:	f009 f9e0 	bl	c95c <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    359c:	6863      	ldr	r3, [r4, #4]
    359e:	4906      	ldr	r1, [pc, #24]	; (35b8 <log_output_dropped_process+0x54>)
    35a0:	685b      	ldr	r3, [r3, #4]
    35a2:	221b      	movs	r2, #27
    35a4:	4628      	mov	r0, r5
    35a6:	f009 f9d9 	bl	c95c <buffer_write>
		     output->control_block->ctx);
}
    35aa:	b002      	add	sp, #8
    35ac:	bd70      	pop	{r4, r5, r6, pc}
    35ae:	bf00      	nop
    35b0:	0000f587 	.word	0x0000f587
    35b4:	0000f8b1 	.word	0x0000f8b1
    35b8:	0000f895 	.word	0x0000f895

000035bc <log_output_timestamp_freq_set>:
{
	timestamp_div = 1U;
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    35bc:	4a07      	ldr	r2, [pc, #28]	; (35dc <log_output_timestamp_freq_set+0x20>)
    35be:	2100      	movs	r1, #0
    35c0:	2301      	movs	r3, #1
    35c2:	4290      	cmp	r0, r2
    35c4:	d806      	bhi.n	35d4 <log_output_timestamp_freq_set+0x18>
    35c6:	4a06      	ldr	r2, [pc, #24]	; (35e0 <log_output_timestamp_freq_set+0x24>)
    35c8:	b901      	cbnz	r1, 35cc <log_output_timestamp_freq_set+0x10>
	timestamp_div = 1U;
    35ca:	2301      	movs	r3, #1
    35cc:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    35ce:	4b05      	ldr	r3, [pc, #20]	; (35e4 <log_output_timestamp_freq_set+0x28>)
    35d0:	6018      	str	r0, [r3, #0]
}
    35d2:	4770      	bx	lr
		frequency /= 2U;
    35d4:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    35d6:	005b      	lsls	r3, r3, #1
    35d8:	2101      	movs	r1, #1
    35da:	e7f2      	b.n	35c2 <log_output_timestamp_freq_set+0x6>
    35dc:	000f4240 	.word	0x000f4240
    35e0:	20000c10 	.word	0x20000c10
    35e4:	20000c14 	.word	0x20000c14

000035e8 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    35e8:	4b01      	ldr	r3, [pc, #4]	; (35f0 <log_backend_rtt_init+0x8>)
    35ea:	2201      	movs	r2, #1
    35ec:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    35ee:	4770      	bx	lr
    35f0:	20001c35 	.word	0x20001c35

000035f4 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    35f4:	4b01      	ldr	r3, [pc, #4]	; (35fc <format_set+0x8>)
	return 0;
}
    35f6:	2000      	movs	r0, #0
	log_format_current = log_type;
    35f8:	6019      	str	r1, [r3, #0]
}
    35fa:	4770      	bx	lr
    35fc:	20000c2c 	.word	0x20000c2c

00003600 <panic>:
	panic_mode = true;
    3600:	4b02      	ldr	r3, [pc, #8]	; (360c <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    3602:	4803      	ldr	r0, [pc, #12]	; (3610 <panic+0x10>)
    3604:	2201      	movs	r2, #1
    3606:	701a      	strb	r2, [r3, #0]
    3608:	f009 b9bc 	b.w	c984 <log_output_flush>
    360c:	20001c36 	.word	0x20001c36
    3610:	0000dd50 	.word	0x0000dd50

00003614 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    3614:	4801      	ldr	r0, [pc, #4]	; (361c <dropped+0x8>)
    3616:	f7ff bfa5 	b.w	3564 <log_output_dropped_process>
    361a:	bf00      	nop
    361c:	0000dd50 	.word	0x0000dd50

00003620 <process>:
{
    3620:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3622:	4b06      	ldr	r3, [pc, #24]	; (363c <process+0x1c>)
    3624:	6818      	ldr	r0, [r3, #0]
{
    3626:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    3628:	f7ff fb42 	bl	2cb0 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    362c:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    362e:	4603      	mov	r3, r0
}
    3630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    3634:	4802      	ldr	r0, [pc, #8]	; (3640 <process+0x20>)
    3636:	220f      	movs	r2, #15
    3638:	4718      	bx	r3
    363a:	bf00      	nop
    363c:	20000c2c 	.word	0x20000c2c
    3640:	0000dd50 	.word	0x0000dd50

00003644 <on_failed_write>:
	if (retry_cnt == 0) {
    3644:	b910      	cbnz	r0, 364c <on_failed_write+0x8>
		host_present = false;
    3646:	4b07      	ldr	r3, [pc, #28]	; (3664 <on_failed_write+0x20>)
    3648:	7018      	strb	r0, [r3, #0]
}
    364a:	4770      	bx	lr
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    364c:	4b06      	ldr	r3, [pc, #24]	; (3668 <on_failed_write+0x24>)
	} else if (is_sync_mode()) {
    364e:	781b      	ldrb	r3, [r3, #0]
    3650:	b11b      	cbz	r3, 365a <on_failed_write+0x16>
	z_impl_k_busy_wait(usec_to_wait);
    3652:	f241 3088 	movw	r0, #5000	; 0x1388
    3656:	f00a b918 	b.w	d88a <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    365a:	20a4      	movs	r0, #164	; 0xa4
    365c:	2100      	movs	r1, #0
    365e:	f007 bfb1 	b.w	b5c4 <z_impl_k_sleep>
    3662:	bf00      	nop
    3664:	20001c35 	.word	0x20001c35
    3668:	20001c36 	.word	0x20001c36

0000366c <data_out_block_mode>:
{
    366c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    3670:	f8df 9074 	ldr.w	r9, [pc, #116]	; 36e8 <data_out_block_mode+0x7c>
    3674:	4f1d      	ldr	r7, [pc, #116]	; (36ec <data_out_block_mode+0x80>)
{
    3676:	4680      	mov	r8, r0
    3678:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    367a:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    367c:	f899 5000 	ldrb.w	r5, [r9]
    3680:	b995      	cbnz	r5, 36a8 <data_out_block_mode+0x3c>
			RTT_LOCK();
    3682:	f006 ff75 	bl	a570 <zephyr_rtt_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    3686:	4628      	mov	r0, r5
    3688:	4632      	mov	r2, r6
    368a:	4641      	mov	r1, r8
    368c:	f006 fef2 	bl	a474 <SEGGER_RTT_WriteSkipNoLock>
    3690:	4605      	mov	r5, r0
			RTT_UNLOCK();
    3692:	f006 ff77 	bl	a584 <zephyr_rtt_mutex_unlock>
		if (ret) {
    3696:	b1e5      	cbz	r5, 36d2 <data_out_block_mode+0x66>
	host_present = true;
    3698:	2301      	movs	r3, #1
    369a:	703b      	strb	r3, [r7, #0]
	if (is_panic_mode()) {
    369c:	f899 3000 	ldrb.w	r3, [r9]
    36a0:	b973      	cbnz	r3, 36c0 <data_out_block_mode+0x54>
}
    36a2:	4630      	mov	r0, r6
    36a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    36a8:	4632      	mov	r2, r6
    36aa:	4641      	mov	r1, r8
    36ac:	2000      	movs	r0, #0
    36ae:	f006 fee1 	bl	a474 <SEGGER_RTT_WriteSkipNoLock>
    36b2:	4605      	mov	r5, r0
    36b4:	e7ef      	b.n	3696 <data_out_block_mode+0x2a>
			on_failed_write(retry_cnt--);
    36b6:	4620      	mov	r0, r4
    36b8:	f7ff ffc4 	bl	3644 <on_failed_write>
    36bc:	1e65      	subs	r5, r4, #1
    36be:	462c      	mov	r4, r5
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    36c0:	2000      	movs	r0, #0
    36c2:	f006 ff4b 	bl	a55c <SEGGER_RTT_HasDataUp>
    36c6:	2800      	cmp	r0, #0
    36c8:	d0eb      	beq.n	36a2 <data_out_block_mode+0x36>
    36ca:	783b      	ldrb	r3, [r7, #0]
    36cc:	2b00      	cmp	r3, #0
    36ce:	d1f2      	bne.n	36b6 <data_out_block_mode+0x4a>
    36d0:	e7e7      	b.n	36a2 <data_out_block_mode+0x36>
		} else if (host_present) {
    36d2:	783b      	ldrb	r3, [r7, #0]
    36d4:	2b00      	cmp	r3, #0
    36d6:	d0e4      	beq.n	36a2 <data_out_block_mode+0x36>
			retry_cnt--;
    36d8:	3c01      	subs	r4, #1
			on_failed_write(retry_cnt);
    36da:	4620      	mov	r0, r4
    36dc:	f7ff ffb2 	bl	3644 <on_failed_write>
	} while ((ret == 0) && host_present);
    36e0:	783b      	ldrb	r3, [r7, #0]
    36e2:	2b00      	cmp	r3, #0
    36e4:	d1ca      	bne.n	367c <data_out_block_mode+0x10>
    36e6:	e7dc      	b.n	36a2 <data_out_block_mode+0x36>
    36e8:	20001c36 	.word	0x20001c36
    36ec:	20001c35 	.word	0x20001c35

000036f0 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    36f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    36f4:	4605      	mov	r5, r0
	__asm__ volatile(
    36f6:	f04f 0340 	mov.w	r3, #64	; 0x40
    36fa:	f3ef 8611 	mrs	r6, BASEPRI
    36fe:	f383 8812 	msr	BASEPRI_MAX, r3
    3702:	f3bf 8f6f 	isb	sy
	return list->head;
    3706:	4b0e      	ldr	r3, [pc, #56]	; (3740 <pm_state_notify+0x50>)
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    3708:	4f0e      	ldr	r7, [pc, #56]	; (3744 <pm_state_notify+0x54>)
    370a:	681c      	ldr	r4, [r3, #0]
    370c:	f8df 8038 	ldr.w	r8, [pc, #56]	; 3748 <pm_state_notify+0x58>
    3710:	f04f 090c 	mov.w	r9, #12
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    3714:	b92c      	cbnz	r4, 3722 <pm_state_notify+0x32>
	__asm__ volatile(
    3716:	f386 8811 	msr	BASEPRI, r6
    371a:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    371e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			callback = notifier->state_exit;
    3722:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
			callback = notifier->state_entry;
    3726:	2d00      	cmp	r5, #0
    3728:	bf18      	it	ne
    372a:	4613      	movne	r3, r2
		if (callback) {
    372c:	b12b      	cbz	r3, 373a <pm_state_notify+0x4a>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    372e:	f898 2010 	ldrb.w	r2, [r8, #16]
    3732:	fb09 f202 	mul.w	r2, r9, r2
    3736:	5cb8      	ldrb	r0, [r7, r2]
    3738:	4798      	blx	r3
	return node->next;
    373a:	6824      	ldr	r4, [r4, #0]
    373c:	e7ea      	b.n	3714 <pm_state_notify+0x24>
    373e:	bf00      	nop
    3740:	20000c48 	.word	0x20000c48
    3744:	20000c3c 	.word	0x20000c3c
    3748:	20001bcc 	.word	0x20001bcc

0000374c <pm_system_resume>:

void pm_system_resume(void)
{
    374c:	b570      	push	{r4, r5, r6, lr}
	uint8_t id = CURRENT_CPU;
    374e:	4b19      	ldr	r3, [pc, #100]	; (37b4 <pm_system_resume+0x68>)
    3750:	7c1c      	ldrb	r4, [r3, #16]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3752:	f3bf 8f5b 	dmb	ish
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    3756:	f004 031f 	and.w	r3, r4, #31
    375a:	2201      	movs	r2, #1
    375c:	409a      	lsls	r2, r3
    375e:	4b16      	ldr	r3, [pc, #88]	; (37b8 <pm_system_resume+0x6c>)
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    3760:	0961      	lsrs	r1, r4, #5
    3762:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    3766:	43d0      	mvns	r0, r2
    3768:	e853 1f00 	ldrex	r1, [r3]
    376c:	ea01 0500 	and.w	r5, r1, r0
    3770:	e843 5600 	strex	r6, r5, [r3]
    3774:	2e00      	cmp	r6, #0
    3776:	d1f7      	bne.n	3768 <pm_system_resume+0x1c>
    3778:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    377c:	420a      	tst	r2, r1
    377e:	d013      	beq.n	37a8 <pm_system_resume+0x5c>
	if (pm_state_exit_post_ops != NULL) {
    3780:	4b0e      	ldr	r3, [pc, #56]	; (37bc <pm_system_resume+0x70>)
    3782:	4d0f      	ldr	r5, [pc, #60]	; (37c0 <pm_system_resume+0x74>)
    3784:	b18b      	cbz	r3, 37aa <pm_system_resume+0x5e>
		pm_state_exit_post_ops(info->state, info->substate_id);
    3786:	230c      	movs	r3, #12
    3788:	4363      	muls	r3, r4
    378a:	18ea      	adds	r2, r5, r3
    378c:	5ce8      	ldrb	r0, [r5, r3]
    378e:	7851      	ldrb	r1, [r2, #1]
    3790:	f009 f9ed 	bl	cb6e <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    3794:	2000      	movs	r0, #0
    3796:	f7ff ffab 	bl	36f0 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    379a:	230c      	movs	r3, #12
    379c:	435c      	muls	r4, r3
    379e:	192a      	adds	r2, r5, r4
    37a0:	2300      	movs	r3, #0
    37a2:	512b      	str	r3, [r5, r4]
    37a4:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    37a8:	bd70      	pop	{r4, r5, r6, pc}
    37aa:	f383 8811 	msr	BASEPRI, r3
    37ae:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    37b2:	e7ef      	b.n	3794 <pm_system_resume+0x48>
    37b4:	20001bcc 	.word	0x20001bcc
    37b8:	20000c50 	.word	0x20000c50
    37bc:	0000cb6f 	.word	0x0000cb6f
    37c0:	20000c3c 	.word	0x20000c3c

000037c4 <pm_system_suspend>:

	return true;
}

bool pm_system_suspend(int32_t ticks)
{
    37c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t id = CURRENT_CPU;
    37c8:	4b35      	ldr	r3, [pc, #212]	; (38a0 <pm_system_suspend+0xdc>)
{
    37ca:	4607      	mov	r7, r0
	uint8_t id = CURRENT_CPU;
    37cc:	7c1d      	ldrb	r5, [r3, #16]
	__asm__ volatile(
    37ce:	f04f 0340 	mov.w	r3, #64	; 0x40
    37d2:	f3ef 8811 	mrs	r8, BASEPRI
    37d6:	f383 8812 	msr	BASEPRI_MAX, r3
    37da:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key;

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	key = k_spin_lock(&pm_forced_state_lock);
	if (z_cpus_pm_forced_state[id].state != PM_STATE_ACTIVE) {
    37de:	240c      	movs	r4, #12
    37e0:	4b30      	ldr	r3, [pc, #192]	; (38a4 <pm_system_suspend+0xe0>)
    37e2:	4e31      	ldr	r6, [pc, #196]	; (38a8 <pm_system_suspend+0xe4>)
    37e4:	436c      	muls	r4, r5
    37e6:	191a      	adds	r2, r3, r4
    37e8:	5d19      	ldrb	r1, [r3, r4]
    37ea:	2900      	cmp	r1, #0
    37ec:	d04c      	beq.n	3888 <pm_system_suspend+0xc4>
		z_cpus_pm_state[id] = z_cpus_pm_forced_state[id];
    37ee:	ca07      	ldmia	r2, {r0, r1, r2}
    37f0:	eb06 0c04 	add.w	ip, r6, r4
    37f4:	e88c 0007 	stmia.w	ip, {r0, r1, r2}
		z_cpus_pm_forced_state[id].state = PM_STATE_ACTIVE;
    37f8:	2200      	movs	r2, #0
    37fa:	551a      	strb	r2, [r3, r4]
	__asm__ volatile(
    37fc:	f388 8811 	msr	BASEPRI, r8
    3800:	f3bf 8f6f 	isb	sy
			z_cpus_pm_state[id] = *info;
		}
	}
	k_spin_unlock(&pm_forced_state_lock, key);

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    3804:	230c      	movs	r3, #12
    3806:	436b      	muls	r3, r5
    3808:	18f2      	adds	r2, r6, r3
    380a:	5cf0      	ldrb	r0, [r6, r3]
    380c:	2800      	cmp	r0, #0
    380e:	d039      	beq.n	3884 <pm_system_suspend+0xc0>
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		return false;
	}

	if (ticks != K_TICKS_FOREVER) {
    3810:	1c7b      	adds	r3, r7, #1
    3812:	d010      	beq.n	3836 <pm_system_suspend+0x72>
			return (uint32_t)((t * to_hz + off) / from_hz);
    3814:	f8d2 c008 	ldr.w	ip, [r2, #8]
    3818:	4c24      	ldr	r4, [pc, #144]	; (38ac <pm_system_suspend+0xe8>)
    381a:	4a25      	ldr	r2, [pc, #148]	; (38b0 <pm_system_suspend+0xec>)
    381c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    3820:	2100      	movs	r1, #0
    3822:	fbec 4100 	umlal	r4, r1, ip, r0
    3826:	2300      	movs	r3, #0
    3828:	4620      	mov	r0, r4
    382a:	f7fc fc59 	bl	e0 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		sys_clock_set_timeout(ticks -
    382e:	2101      	movs	r1, #1
    3830:	1a38      	subs	r0, r7, r0
    3832:	f003 fce7 	bl	7204 <sys_clock_set_timeout>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    3836:	f007 fe0b 	bl	b450 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    383a:	2001      	movs	r0, #1
    383c:	f7ff ff58 	bl	36f0 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3840:	f3bf 8f5b 	dmb	ish
    3844:	4b1b      	ldr	r3, [pc, #108]	; (38b4 <pm_system_suspend+0xf0>)
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    3846:	096a      	lsrs	r2, r5, #5
    3848:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	atomic_val_t mask = ATOMIC_MASK(bit);
    384c:	f005 011f 	and.w	r1, r5, #31
    3850:	2201      	movs	r2, #1
    3852:	408a      	lsls	r2, r1
    3854:	e853 0f00 	ldrex	r0, [r3]
    3858:	4310      	orrs	r0, r2
    385a:	e843 0100 	strex	r1, r0, [r3]
    385e:	2900      	cmp	r1, #0
    3860:	d1f8      	bne.n	3854 <pm_system_suspend+0x90>
    3862:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    3866:	4b14      	ldr	r3, [pc, #80]	; (38b8 <pm_system_suspend+0xf4>)
    3868:	b13b      	cbz	r3, 387a <pm_system_suspend+0xb6>
		pm_state_set(info->state, info->substate_id);
    386a:	230c      	movs	r3, #12
    386c:	fb03 f005 	mul.w	r0, r3, r5
    3870:	1833      	adds	r3, r6, r0
    3872:	5c30      	ldrb	r0, [r6, r0]
    3874:	7859      	ldrb	r1, [r3, #1]
    3876:	f009 f96e 	bl	cb56 <pm_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_cpus_pm_state[id].state);
	pm_system_resume();
    387a:	f7ff ff67 	bl	374c <pm_system_resume>
	k_sched_unlock();
    387e:	f007 fdfb 	bl	b478 <k_sched_unlock>
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

	return true;
    3882:	2001      	movs	r0, #1
}
    3884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		info = pm_policy_next_state(id, ticks);
    3888:	4601      	mov	r1, r0
    388a:	4628      	mov	r0, r5
    388c:	f000 f816 	bl	38bc <pm_policy_next_state>
		if (info != NULL) {
    3890:	2800      	cmp	r0, #0
    3892:	d0b3      	beq.n	37fc <pm_system_suspend+0x38>
			z_cpus_pm_state[id] = *info;
    3894:	c807      	ldmia	r0, {r0, r1, r2}
    3896:	4434      	add	r4, r6
    3898:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    389c:	e7ae      	b.n	37fc <pm_system_suspend+0x38>
    389e:	bf00      	nop
    38a0:	20001bcc 	.word	0x20001bcc
    38a4:	20000c30 	.word	0x20000c30
    38a8:	20000c3c 	.word	0x20000c3c
    38ac:	000f423f 	.word	0x000f423f
    38b0:	000f4240 	.word	0x000f4240
    38b4:	20000c50 	.word	0x20000c50
    38b8:	0000cb57 	.word	0x0000cb57

000038bc <pm_policy_next_state>:
	}
}

#ifdef CONFIG_PM_POLICY_DEFAULT
const struct pm_state_info *pm_policy_next_state(uint8_t cpu, int32_t ticks)
{
    38bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    38c0:	b085      	sub	sp, #20
    38c2:	460e      	mov	r6, r1
	uint8_t num_cpu_states;
	const struct pm_state_info *cpu_states;

	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    38c4:	a903      	add	r1, sp, #12
    38c6:	f000 f843 	bl	3950 <pm_state_cpu_get_all>

		min_residency = k_us_to_ticks_ceil32(state->min_residency_us);
		exit_latency = k_us_to_ticks_ceil32(state->exit_latency_us);

		/* skip state if it brings too much latency */
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    38ca:	4b1e      	ldr	r3, [pc, #120]	; (3944 <pm_policy_next_state+0x88>)
    38cc:	9d03      	ldr	r5, [sp, #12]
    38ce:	f8d3 a000 	ldr.w	sl, [r3]
    38d2:	f8df 8074 	ldr.w	r8, [pc, #116]	; 3948 <pm_policy_next_state+0x8c>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    38d6:	1e43      	subs	r3, r0, #1
    38d8:	b21b      	sxth	r3, r3
    38da:	eb03 0343 	add.w	r3, r3, r3, lsl #1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    38de:	4604      	mov	r4, r0
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    38e0:	eb05 0583 	add.w	r5, r5, r3, lsl #2
    38e4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    38e8:	f04f 0b00 	mov.w	fp, #0
    38ec:	b924      	cbnz	r4, 38f8 <pm_policy_next_state+0x3c>
		    (ticks >= (min_residency + exit_latency))) {
			return state;
		}
	}

	return NULL;
    38ee:	46a1      	mov	r9, r4
}
    38f0:	4648      	mov	r0, r9
    38f2:	b005      	add	sp, #20
    38f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    38f8:	6868      	ldr	r0, [r5, #4]
    38fa:	4a14      	ldr	r2, [pc, #80]	; (394c <pm_policy_next_state+0x90>)
    38fc:	46c4      	mov	ip, r8
    38fe:	4659      	mov	r1, fp
    3900:	fbe0 c107 	umlal	ip, r1, r0, r7
    3904:	2300      	movs	r3, #0
    3906:	4660      	mov	r0, ip
    3908:	f7fc fbea 	bl	e0 <__aeabi_uldivmod>
    390c:	9001      	str	r0, [sp, #4]
    390e:	68a8      	ldr	r0, [r5, #8]
    3910:	4a0e      	ldr	r2, [pc, #56]	; (394c <pm_policy_next_state+0x90>)
    3912:	46c4      	mov	ip, r8
    3914:	4659      	mov	r1, fp
    3916:	fbe0 c107 	umlal	ip, r1, r0, r7
    391a:	2300      	movs	r3, #0
    391c:	4660      	mov	r0, ip
    391e:	f7fc fbdf 	bl	e0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    3922:	f1ba 3fff 	cmp.w	sl, #4294967295
		const struct pm_state_info *state = &cpu_states[i];
    3926:	46a9      	mov	r9, r5
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    3928:	d001      	beq.n	392e <pm_policy_next_state+0x72>
    392a:	4582      	cmp	sl, r0
    392c:	d905      	bls.n	393a <pm_policy_next_state+0x7e>
		if ((ticks == K_TICKS_FOREVER) ||
    392e:	1c73      	adds	r3, r6, #1
    3930:	d0de      	beq.n	38f0 <pm_policy_next_state+0x34>
		    (ticks >= (min_residency + exit_latency))) {
    3932:	9b01      	ldr	r3, [sp, #4]
    3934:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    3936:	42b0      	cmp	r0, r6
    3938:	d9da      	bls.n	38f0 <pm_policy_next_state+0x34>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    393a:	3c01      	subs	r4, #1
    393c:	b2a4      	uxth	r4, r4
    393e:	3d0c      	subs	r5, #12
    3940:	e7d4      	b.n	38ec <pm_policy_next_state+0x30>
    3942:	bf00      	nop
    3944:	20000030 	.word	0x20000030
    3948:	000f423f 	.word	0x000f423f
    394c:	000f4240 	.word	0x000f4240

00003950 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD_SEP(DT_PATH(cpus), DT_NUM_CPU_POWER_STATES, (,))
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    3950:	b908      	cbnz	r0, 3956 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    3952:	4b02      	ldr	r3, [pc, #8]	; (395c <pm_state_cpu_get_all+0xc>)
    3954:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    3956:	2000      	movs	r0, #0
    3958:	4770      	bx	lr
    395a:	bf00      	nop
    395c:	0000dd60 	.word	0x0000dd60

00003960 <class_handler>:
 * usb_enable() is no longer needed.
 */

static int class_handler(struct usb_setup_packet *pSetup,
			 int32_t *len, uint8_t **data)
{
    3960:	b4f0      	push	{r4, r5, r6, r7}
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3962:	4b0c      	ldr	r3, [pc, #48]	; (3994 <class_handler+0x34>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3964:	4e0c      	ldr	r6, [pc, #48]	; (3998 <class_handler+0x38>)
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3966:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3968:	4b0c      	ldr	r3, [pc, #48]	; (399c <class_handler+0x3c>)
    396a:	42b3      	cmp	r3, r6
    396c:	d303      	bcc.n	3976 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    396e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3972:	bcf0      	pop	{r4, r5, r6, r7}
    3974:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    3976:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    3978:	42bd      	cmp	r5, r7
    397a:	d309      	bcc.n	3990 <class_handler+0x30>
		if (iface->class_handler &&
    397c:	691c      	ldr	r4, [r3, #16]
    397e:	b13c      	cbz	r4, 3990 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    3980:	f895 c002 	ldrb.w	ip, [r5, #2]
    3984:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    3986:	45ac      	cmp	ip, r5
    3988:	d102      	bne.n	3990 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    398a:	4623      	mov	r3, r4
}
    398c:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    398e:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3990:	3324      	adds	r3, #36	; 0x24
    3992:	e7ea      	b.n	396a <class_handler+0xa>
    3994:	20000c54 	.word	0x20000c54
    3998:	200003e8 	.word	0x200003e8
    399c:	200003c4 	.word	0x200003c4

000039a0 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    39a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    39a4:	4c13      	ldr	r4, [pc, #76]	; (39f4 <custom_handler+0x54>)
    39a6:	f8df 8050 	ldr.w	r8, [pc, #80]	; 39f8 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    39aa:	f8df 9050 	ldr.w	r9, [pc, #80]	; 39fc <custom_handler+0x5c>
{
    39ae:	4605      	mov	r5, r0
    39b0:	460e      	mov	r6, r1
    39b2:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    39b4:	4544      	cmp	r4, r8
    39b6:	d303      	bcc.n	39c0 <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    39b8:	f06f 0085 	mvn.w	r0, #133	; 0x85
    39bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    39c0:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    39c2:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    39c6:	429a      	cmp	r2, r3
    39c8:	d312      	bcc.n	39f0 <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    39ca:	69a3      	ldr	r3, [r4, #24]
    39cc:	b183      	cbz	r3, 39f0 <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    39ce:	7890      	ldrb	r0, [r2, #2]
    39d0:	7929      	ldrb	r1, [r5, #4]
    39d2:	4288      	cmp	r0, r1
    39d4:	d105      	bne.n	39e2 <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    39d6:	463a      	mov	r2, r7
    39d8:	4631      	mov	r1, r6
    39da:	4628      	mov	r0, r5
}
    39dc:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    39e0:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    39e2:	7952      	ldrb	r2, [r2, #5]
    39e4:	2a01      	cmp	r2, #1
    39e6:	d103      	bne.n	39f0 <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    39e8:	463a      	mov	r2, r7
    39ea:	4631      	mov	r1, r6
    39ec:	4628      	mov	r0, r5
    39ee:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    39f0:	3424      	adds	r4, #36	; 0x24
    39f2:	e7df      	b.n	39b4 <custom_handler+0x14>
    39f4:	200003c4 	.word	0x200003c4
    39f8:	200003e8 	.word	0x200003e8
    39fc:	20000c54 	.word	0x20000c54

00003a00 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    3a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3a04:	4c0b      	ldr	r4, [pc, #44]	; (3a34 <vendor_handler+0x34>)
    3a06:	f8df 8030 	ldr.w	r8, [pc, #48]	; 3a38 <vendor_handler+0x38>
{
    3a0a:	4605      	mov	r5, r0
    3a0c:	460e      	mov	r6, r1
    3a0e:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3a10:	4544      	cmp	r4, r8
    3a12:	d302      	bcc.n	3a1a <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    3a14:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3a18:	e009      	b.n	3a2e <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    3a1a:	6963      	ldr	r3, [r4, #20]
    3a1c:	b90b      	cbnz	r3, 3a22 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3a1e:	3424      	adds	r4, #36	; 0x24
    3a20:	e7f6      	b.n	3a10 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    3a22:	463a      	mov	r2, r7
    3a24:	4631      	mov	r1, r6
    3a26:	4628      	mov	r0, r5
    3a28:	4798      	blx	r3
    3a2a:	2800      	cmp	r0, #0
    3a2c:	d1f7      	bne.n	3a1e <vendor_handler+0x1e>
}
    3a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3a32:	bf00      	nop
    3a34:	200003c4 	.word	0x200003c4
    3a38:	200003e8 	.word	0x200003e8

00003a3c <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    3a3c:	4802      	ldr	r0, [pc, #8]	; (3a48 <usb_reset_alt_setting+0xc>)
    3a3e:	2208      	movs	r2, #8
    3a40:	2100      	movs	r1, #0
    3a42:	f009 b86e 	b.w	cb22 <memset>
    3a46:	bf00      	nop
    3a48:	20000d0f 	.word	0x20000d0f

00003a4c <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    3a4c:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3a4e:	4b0b      	ldr	r3, [pc, #44]	; (3a7c <is_ep_valid.part.0+0x30>)
    3a50:	4c0b      	ldr	r4, [pc, #44]	; (3a80 <is_ep_valid.part.0+0x34>)
    3a52:	42a3      	cmp	r3, r4
    3a54:	d301      	bcc.n	3a5a <is_ep_valid.part.0+0xe>
	return false;
    3a56:	2000      	movs	r0, #0
}
    3a58:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    3a5a:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    3a5c:	7f1e      	ldrb	r6, [r3, #28]
    3a5e:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    3a60:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    3a62:	b2d5      	uxtb	r5, r2
    3a64:	42ae      	cmp	r6, r5
    3a66:	d801      	bhi.n	3a6c <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3a68:	3324      	adds	r3, #36	; 0x24
    3a6a:	e7f2      	b.n	3a52 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    3a6c:	3201      	adds	r2, #1
    3a6e:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    3a72:	4285      	cmp	r5, r0
    3a74:	d1f5      	bne.n	3a62 <is_ep_valid.part.0+0x16>
		return true;
    3a76:	2001      	movs	r0, #1
    3a78:	e7ee      	b.n	3a58 <is_ep_valid.part.0+0xc>
    3a7a:	bf00      	nop
    3a7c:	200003c4 	.word	0x200003c4
    3a80:	200003e8 	.word	0x200003e8

00003a84 <usb_handle_request.constprop.0>:
static bool usb_handle_request(struct usb_setup_packet *setup,
    3a84:	b508      	push	{r3, lr}
	handler = usb_dev.req_handlers[type];
    3a86:	4809      	ldr	r0, [pc, #36]	; (3aac <usb_handle_request.constprop.0+0x28>)
	uint32_t type = setup->RequestType.type;
    3a88:	7803      	ldrb	r3, [r0, #0]
    3a8a:	f3c3 1341 	ubfx	r3, r3, #5, #2
	handler = usb_dev.req_handlers[type];
    3a8e:	330a      	adds	r3, #10
    3a90:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
	if (handler == NULL) {
    3a94:	b13b      	cbz	r3, 3aa6 <usb_handle_request.constprop.0+0x22>
	if ((*handler)(setup, len, data) < 0) {
    3a96:	f100 0208 	add.w	r2, r0, #8
    3a9a:	f100 0110 	add.w	r1, r0, #16
    3a9e:	4798      	blx	r3
    3aa0:	43c0      	mvns	r0, r0
    3aa2:	0fc0      	lsrs	r0, r0, #31
}
    3aa4:	bd08      	pop	{r3, pc}
		return false;
    3aa6:	4618      	mov	r0, r3
    3aa8:	e7fc      	b.n	3aa4 <usb_handle_request.constprop.0+0x20>
    3aaa:	bf00      	nop
    3aac:	20000c54 	.word	0x20000c54

00003ab0 <usb_device_init.part.0>:

/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(void)
    3ab0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
	if (!device_descriptor) {
		LOG_ERR("Failed to configure USB device stack");
    3ab2:	4b08      	ldr	r3, [pc, #32]	; (3ad4 <usb_device_init.part.0+0x24>)
    3ab4:	9305      	str	r3, [sp, #20]
    3ab6:	2302      	movs	r3, #2
    3ab8:	9304      	str	r3, [sp, #16]
    3aba:	4807      	ldr	r0, [pc, #28]	; (3ad8 <usb_device_init.part.0+0x28>)
    3abc:	2300      	movs	r3, #0
    3abe:	aa04      	add	r2, sp, #16
    3ac0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3ac4:	f7ff fadc 	bl	3080 <z_impl_z_log_msg_static_create>
	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
}
    3ac8:	f04f 30ff 	mov.w	r0, #4294967295
    3acc:	b007      	add	sp, #28
    3ace:	f85d fb04 	ldr.w	pc, [sp], #4
    3ad2:	bf00      	nop
    3ad4:	0000f8f0 	.word	0x0000f8f0
    3ad8:	0000dc14 	.word	0x0000dc14

00003adc <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    3adc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    3ade:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    3ae0:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    3ae2:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    3ae4:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    3ae8:	d007      	beq.n	3afa <usb_halt_endpoint_req.isra.0+0x1e>
    3aea:	4620      	mov	r0, r4
    3aec:	f7ff ffae 	bl	3a4c <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    3af0:	b178      	cbz	r0, 3b12 <usb_halt_endpoint_req.isra.0+0x36>
	return (usb_dev.configuration != 0);
    3af2:	4b0d      	ldr	r3, [pc, #52]	; (3b28 <usb_halt_endpoint_req.isra.0+0x4c>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    3af4:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    3af8:	b158      	cbz	r0, 3b12 <usb_halt_endpoint_req.isra.0+0x36>
		if (halt) {
    3afa:	4e0b      	ldr	r6, [pc, #44]	; (3b28 <usb_halt_endpoint_req.isra.0+0x4c>)
			usb_dc_ep_set_stall(ep);
    3afc:	4620      	mov	r0, r4
		if (halt) {
    3afe:	b155      	cbz	r5, 3b16 <usb_halt_endpoint_req.isra.0+0x3a>
			usb_dc_ep_set_stall(ep);
    3b00:	f002 fb46 	bl	6190 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    3b04:	69f3      	ldr	r3, [r6, #28]
    3b06:	b11b      	cbz	r3, 3b10 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    3b08:	f10d 0107 	add.w	r1, sp, #7
    3b0c:	2008      	movs	r0, #8
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    3b0e:	4798      	blx	r3
		return true;
    3b10:	2001      	movs	r0, #1
}
    3b12:	b002      	add	sp, #8
    3b14:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    3b16:	f002 fb75 	bl	6204 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    3b1a:	69f3      	ldr	r3, [r6, #28]
    3b1c:	2b00      	cmp	r3, #0
    3b1e:	d0f7      	beq.n	3b10 <usb_halt_endpoint_req.isra.0+0x34>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    3b20:	f10d 0107 	add.w	r1, sp, #7
    3b24:	2009      	movs	r0, #9
    3b26:	e7f2      	b.n	3b0e <usb_halt_endpoint_req.isra.0+0x32>
    3b28:	20000c54 	.word	0x20000c54

00003b2c <get_ep_bm_from_addr.part.0>:
static uint32_t get_ep_bm_from_addr(uint8_t ep)
    3b2c:	b580      	push	{r7, lr}
    3b2e:	af00      	add	r7, sp, #0
		LOG_ERR("Endpoint 0x%02x is invalid", ep);
    3b30:	b088      	sub	sp, #32
    3b32:	466a      	mov	r2, sp
    3b34:	4b07      	ldr	r3, [pc, #28]	; (3b54 <get_ep_bm_from_addr.part.0+0x28>)
    3b36:	e9c2 3005 	strd	r3, r0, [r2, #20]
    3b3a:	2303      	movs	r3, #3
    3b3c:	f842 3f10 	str.w	r3, [r2, #16]!
    3b40:	4805      	ldr	r0, [pc, #20]	; (3b58 <get_ep_bm_from_addr.part.0+0x2c>)
    3b42:	2300      	movs	r3, #0
    3b44:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3b48:	f7ff fa9a 	bl	3080 <z_impl_z_log_msg_static_create>
}
    3b4c:	2000      	movs	r0, #0
    3b4e:	46bd      	mov	sp, r7
    3b50:	bd80      	pop	{r7, pc}
    3b52:	bf00      	nop
    3b54:	0000f915 	.word	0x0000f915
    3b58:	0000dc14 	.word	0x0000dc14

00003b5c <forward_status_cb>:
	if (status == USB_DC_DISCONNECTED) {
    3b5c:	2804      	cmp	r0, #4
{
    3b5e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b62:	f8df 909c 	ldr.w	r9, [pc, #156]	; 3c00 <forward_status_cb+0xa4>
    3b66:	4604      	mov	r4, r0
    3b68:	460f      	mov	r7, r1
	if (status == USB_DC_DISCONNECTED) {
    3b6a:	d015      	beq.n	3b98 <forward_status_cb+0x3c>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    3b6c:	2801      	cmp	r0, #1
    3b6e:	d12f      	bne.n	3bd0 <forward_status_cb+0x74>
		if (usb_dev.configured) {
    3b70:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3c04 <forward_status_cb+0xa8>
    3b74:	f898 30b9 	ldrb.w	r3, [r8, #185]	; 0xb9
    3b78:	b353      	cbz	r3, 3bd0 <forward_status_cb+0x74>
			usb_cancel_transfers();
    3b7a:	f000 fdf3 	bl	4764 <usb_cancel_transfers>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3b7e:	4d22      	ldr	r5, [pc, #136]	; (3c08 <forward_status_cb+0xac>)
    3b80:	454d      	cmp	r5, r9
    3b82:	d222      	bcs.n	3bca <forward_status_cb+0x6e>
		ep_data = cfg_data->endpoint;
    3b84:	6a2a      	ldr	r2, [r5, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    3b86:	f04f 0a00 	mov.w	sl, #0
    3b8a:	7f2b      	ldrb	r3, [r5, #28]
    3b8c:	fa5f f68a 	uxtb.w	r6, sl
    3b90:	42b3      	cmp	r3, r6
    3b92:	d804      	bhi.n	3b9e <forward_status_cb+0x42>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3b94:	3524      	adds	r5, #36	; 0x24
    3b96:	e7f3      	b.n	3b80 <forward_status_cb+0x24>
		usb_reset_alt_setting();
    3b98:	f7ff ff50 	bl	3a3c <usb_reset_alt_setting>
	if (status == USB_DC_DISCONNECTED || status == USB_DC_RESET) {
    3b9c:	e7e8      	b.n	3b70 <forward_status_cb+0x14>
			ret = endpoint_callback(&ep_data[n]);
    3b9e:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
    3ba2:	9201      	str	r2, [sp, #4]
	ret = usb_dc_ep_disable(ep_data->ep_addr);
    3ba4:	7930      	ldrb	r0, [r6, #4]
    3ba6:	f009 f813 	bl	cbd0 <usb_dc_ep_disable>
    3baa:	4683      	mov	fp, r0
	ep_bm = get_ep_bm_from_addr(ep_data->ep_addr);
    3bac:	7930      	ldrb	r0, [r6, #4]
    3bae:	f008 ff1f 	bl	c9f0 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    3bb2:	f8d8 30c4 	ldr.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    3bb6:	9a01      	ldr	r2, [sp, #4]
	usb_dev.ep_bm &= ~ep_bm;
    3bb8:	ea23 0300 	bic.w	r3, r3, r0
			if (ret < 0) {
    3bbc:	f1bb 0f00 	cmp.w	fp, #0
	usb_dev.ep_bm &= ~ep_bm;
    3bc0:	f8c8 30c4 	str.w	r3, [r8, #196]	; 0xc4
			if (ret < 0) {
    3bc4:	f10a 0a01 	add.w	sl, sl, #1
    3bc8:	dadf      	bge.n	3b8a <forward_status_cb+0x2e>
			usb_dev.configured = false;
    3bca:	2300      	movs	r3, #0
    3bcc:	f888 30b9 	strb.w	r3, [r8, #185]	; 0xb9
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3bd0:	4d0d      	ldr	r5, [pc, #52]	; (3c08 <forward_status_cb+0xac>)
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3bd2:	454d      	cmp	r5, r9
    3bd4:	d308      	bcc.n	3be8 <forward_status_cb+0x8c>
	if (usb_dev.user_status_callback) {
    3bd6:	4b0b      	ldr	r3, [pc, #44]	; (3c04 <forward_status_cb+0xa8>)
    3bd8:	6a1b      	ldr	r3, [r3, #32]
    3bda:	b16b      	cbz	r3, 3bf8 <forward_status_cb+0x9c>
		usb_dev.user_status_callback(status, param);
    3bdc:	4639      	mov	r1, r7
    3bde:	4620      	mov	r0, r4
}
    3be0:	b003      	add	sp, #12
    3be2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		usb_dev.user_status_callback(status, param);
    3be6:	4718      	bx	r3
		if (cfg_data->cb_usb_status) {
    3be8:	68eb      	ldr	r3, [r5, #12]
    3bea:	b11b      	cbz	r3, 3bf4 <forward_status_cb+0x98>
			cfg_data->cb_usb_status(cfg_data, status, param);
    3bec:	463a      	mov	r2, r7
    3bee:	4621      	mov	r1, r4
    3bf0:	4628      	mov	r0, r5
    3bf2:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    3bf4:	3524      	adds	r5, #36	; 0x24
    3bf6:	e7ec      	b.n	3bd2 <forward_status_cb+0x76>
}
    3bf8:	b003      	add	sp, #12
    3bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3bfe:	bf00      	nop
    3c00:	200003e8 	.word	0x200003e8
    3c04:	20000c54 	.word	0x20000c54
    3c08:	200003c4 	.word	0x200003c4

00003c0c <disable_endpoint>:
{
    3c0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c0e:	af00      	add	r7, sp, #0
    3c10:	4605      	mov	r5, r0
	ret = usb_dc_ep_disable(ep_addr);
    3c12:	f008 ffdd 	bl	cbd0 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    3c16:	f110 0f78 	cmn.w	r0, #120	; 0x78
	ret = usb_dc_ep_disable(ep_addr);
    3c1a:	4604      	mov	r4, r0
	if (ret == -EALREADY) {
    3c1c:	d013      	beq.n	3c46 <disable_endpoint+0x3a>
	} else if (ret) {
    3c1e:	b190      	cbz	r0, 3c46 <disable_endpoint+0x3a>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_addr);
    3c20:	466e      	mov	r6, sp
    3c22:	b088      	sub	sp, #32
    3c24:	466a      	mov	r2, sp
    3c26:	4b0e      	ldr	r3, [pc, #56]	; (3c60 <disable_endpoint+0x54>)
    3c28:	e9c2 3505 	strd	r3, r5, [r2, #20]
    3c2c:	2303      	movs	r3, #3
    3c2e:	f842 3f10 	str.w	r3, [r2, #16]!
    3c32:	480c      	ldr	r0, [pc, #48]	; (3c64 <disable_endpoint+0x58>)
    3c34:	2300      	movs	r3, #0
    3c36:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3c3a:	f7ff fa21 	bl	3080 <z_impl_z_log_msg_static_create>
    3c3e:	46b5      	mov	sp, r6
}
    3c40:	4620      	mov	r0, r4
    3c42:	46bd      	mov	sp, r7
    3c44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	ep_bm = get_ep_bm_from_addr(ep_addr);
    3c46:	4628      	mov	r0, r5
    3c48:	f008 fed2 	bl	c9f0 <get_ep_bm_from_addr>
	usb_dev.ep_bm &= ~ep_bm;
    3c4c:	4a06      	ldr	r2, [pc, #24]	; (3c68 <disable_endpoint+0x5c>)
    3c4e:	f8d2 30c4 	ldr.w	r3, [r2, #196]	; 0xc4
    3c52:	ea23 0300 	bic.w	r3, r3, r0
    3c56:	f8c2 30c4 	str.w	r3, [r2, #196]	; 0xc4
	return 0;
    3c5a:	2400      	movs	r4, #0
    3c5c:	e7f0      	b.n	3c40 <disable_endpoint+0x34>
    3c5e:	bf00      	nop
    3c60:	0000f930 	.word	0x0000f930
    3c64:	0000dc14 	.word	0x0000dc14
    3c68:	20000c54 	.word	0x20000c54

00003c6c <set_endpoint>:
{
    3c6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    3c6e:	b083      	sub	sp, #12
    3c70:	af00      	add	r7, sp, #0
    3c72:	4604      	mov	r4, r0
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    3c74:	7880      	ldrb	r0, [r0, #2]
    3c76:	7038      	strb	r0, [r7, #0]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    3c78:	7923      	ldrb	r3, [r4, #4]
    3c7a:	7962      	ldrb	r2, [r4, #5]
	if (ep_bm & usb_dev.ep_bm) {
    3c7c:	4d27      	ldr	r5, [pc, #156]	; (3d1c <set_endpoint+0xb0>)
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    3c7e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    3c82:	807b      	strh	r3, [r7, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    3c84:	78e3      	ldrb	r3, [r4, #3]
    3c86:	f003 0303 	and.w	r3, r3, #3
    3c8a:	713b      	strb	r3, [r7, #4]
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    3c8c:	f008 feb0 	bl	c9f0 <get_ep_bm_from_addr>
	if (ep_bm & usb_dev.ep_bm) {
    3c90:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    3c94:	4218      	tst	r0, r3
	ep_bm = get_ep_bm_from_addr(ep_desc->bEndpointAddress);
    3c96:	4606      	mov	r6, r0
	if (ep_bm & usb_dev.ep_bm) {
    3c98:	d00c      	beq.n	3cb4 <set_endpoint+0x48>
		reset_endpoint(ep_desc);
    3c9a:	78a4      	ldrb	r4, [r4, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    3c9c:	4620      	mov	r0, r4
    3c9e:	f000 fd43 	bl	4728 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    3ca2:	4620      	mov	r0, r4
    3ca4:	f7ff ffb2 	bl	3c0c <disable_endpoint>
		if (!k_is_in_isr()) {
    3ca8:	f009 fb92 	bl	d3d0 <k_is_in_isr>
    3cac:	b910      	cbnz	r0, 3cb4 <set_endpoint+0x48>
	return z_impl_k_usleep(us);
    3cae:	2096      	movs	r0, #150	; 0x96
    3cb0:	f007 fca2 	bl	b5f8 <z_impl_k_usleep>
	ret = usb_dc_ep_configure(&ep_cfg);
    3cb4:	4638      	mov	r0, r7
    3cb6:	f002 fa37 	bl	6128 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    3cba:	f110 0f78 	cmn.w	r0, #120	; 0x78
	ret = usb_dc_ep_configure(&ep_cfg);
    3cbe:	4603      	mov	r3, r0
	if (ret == -EALREADY) {
    3cc0:	7838      	ldrb	r0, [r7, #0]
    3cc2:	d014      	beq.n	3cee <set_endpoint+0x82>
	} else if (ret) {
    3cc4:	b19b      	cbz	r3, 3cee <set_endpoint+0x82>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    3cc6:	466c      	mov	r4, sp
    3cc8:	b088      	sub	sp, #32
    3cca:	466a      	mov	r2, sp
    3ccc:	4b14      	ldr	r3, [pc, #80]	; (3d20 <set_endpoint+0xb4>)
    3cce:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    3cd2:	2303      	movs	r3, #3
    3cd4:	f842 3f10 	str.w	r3, [r2, #16]!
    3cd8:	4812      	ldr	r0, [pc, #72]	; (3d24 <set_endpoint+0xb8>)
    3cda:	2300      	movs	r3, #0
    3cdc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3ce0:	f7ff f9ce 	bl	3080 <z_impl_z_log_msg_static_create>
		return false;
    3ce4:	2000      	movs	r0, #0
    3ce6:	46a5      	mov	sp, r4
}
    3ce8:	370c      	adds	r7, #12
    3cea:	46bd      	mov	sp, r7
    3cec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    3cee:	f002 fac5 	bl	627c <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    3cf2:	f110 0f78 	cmn.w	r0, #120	; 0x78
    3cf6:	d008      	beq.n	3d0a <set_endpoint+0x9e>
	} else if (ret) {
    3cf8:	b138      	cbz	r0, 3d0a <set_endpoint+0x9e>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    3cfa:	466c      	mov	r4, sp
    3cfc:	b088      	sub	sp, #32
    3cfe:	783b      	ldrb	r3, [r7, #0]
    3d00:	466a      	mov	r2, sp
    3d02:	4909      	ldr	r1, [pc, #36]	; (3d28 <set_endpoint+0xbc>)
    3d04:	e9c2 1305 	strd	r1, r3, [r2, #20]
    3d08:	e7e3      	b.n	3cd2 <set_endpoint+0x66>
	usb_dev.ep_bm |= ep_bm;
    3d0a:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	usb_dev.configured = true;
    3d0e:	2001      	movs	r0, #1
	usb_dev.ep_bm |= ep_bm;
    3d10:	4333      	orrs	r3, r6
	usb_dev.configured = true;
    3d12:	f885 00b9 	strb.w	r0, [r5, #185]	; 0xb9
	usb_dev.ep_bm |= ep_bm;
    3d16:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	return true;
    3d1a:	e7e5      	b.n	3ce8 <set_endpoint+0x7c>
    3d1c:	20000c54 	.word	0x20000c54
    3d20:	0000f952 	.word	0x0000f952
    3d24:	0000dc14 	.word	0x0000dc14
    3d28:	0000f976 	.word	0x0000f976

00003d2c <usb_handle_standard_request>:
{
    3d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (usb_dev.custom_req_handler &&
    3d30:	4ea3      	ldr	r6, [pc, #652]	; (3fc0 <usb_handle_standard_request+0x294>)
    3d32:	69b3      	ldr	r3, [r6, #24]
{
    3d34:	4604      	mov	r4, r0
    3d36:	460f      	mov	r7, r1
    3d38:	4615      	mov	r5, r2
	if (usb_dev.custom_req_handler &&
    3d3a:	b9fb      	cbnz	r3, 3d7c <usb_handle_standard_request+0x50>
	switch (setup->RequestType.recipient) {
    3d3c:	7823      	ldrb	r3, [r4, #0]
    3d3e:	f003 031f 	and.w	r3, r3, #31
    3d42:	2b01      	cmp	r3, #1
    3d44:	f000 809d 	beq.w	3e82 <usb_handle_standard_request+0x156>
    3d48:	2b02      	cmp	r3, #2
    3d4a:	f000 8104 	beq.w	3f56 <usb_handle_standard_request+0x22a>
    3d4e:	bb33      	cbnz	r3, 3d9e <usb_handle_standard_request+0x72>
	if (usb_reqtype_is_to_host(setup)) {
    3d50:	f994 0000 	ldrsb.w	r0, [r4]
	uint8_t *data = *data_buf;
    3d54:	682a      	ldr	r2, [r5, #0]
		switch (setup->bRequest) {
    3d56:	7861      	ldrb	r1, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    3d58:	2800      	cmp	r0, #0
    3d5a:	da34      	bge.n	3dc6 <usb_handle_standard_request+0x9a>
		switch (setup->bRequest) {
    3d5c:	2906      	cmp	r1, #6
    3d5e:	d012      	beq.n	3d86 <usb_handle_standard_request+0x5a>
    3d60:	2908      	cmp	r1, #8
    3d62:	d02b      	beq.n	3dbc <usb_handle_standard_request+0x90>
    3d64:	b9d9      	cbnz	r1, 3d9e <usb_handle_standard_request+0x72>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    3d66:	2301      	movs	r3, #1
    3d68:	7013      	strb	r3, [r2, #0]
	data[1] = 0U;
    3d6a:	7051      	strb	r1, [r2, #1]
		data[0] |= (usb_dev.remote_wakeup ?
    3d6c:	f896 30c3 	ldrb.w	r3, [r6, #195]	; 0xc3
    3d70:	005b      	lsls	r3, r3, #1
    3d72:	f043 0301 	orr.w	r3, r3, #1
    3d76:	7013      	strb	r3, [r2, #0]
		*len = 2;
    3d78:	2302      	movs	r3, #2
    3d7a:	e12a      	b.n	3fd2 <usb_handle_standard_request+0x2a6>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    3d7c:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    3d7e:	2800      	cmp	r0, #0
    3d80:	d1dc      	bne.n	3d3c <usb_handle_standard_request+0x10>
		return 0;
    3d82:	2000      	movs	r0, #0
    3d84:	e00d      	b.n	3da2 <usb_handle_standard_request+0x76>
			return usb_get_descriptor(setup, len, data_buf);
    3d86:	8862      	ldrh	r2, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    3d88:	0a10      	lsrs	r0, r2, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    3d8a:	1f01      	subs	r1, r0, #4
    3d8c:	2901      	cmp	r1, #1
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    3d8e:	4684      	mov	ip, r0
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    3d90:	d905      	bls.n	3d9e <usb_handle_standard_request+0x72>
    3d92:	2807      	cmp	r0, #7
    3d94:	d803      	bhi.n	3d9e <usb_handle_standard_request+0x72>
	p = (uint8_t *)usb_dev.descriptors;
    3d96:	6a71      	ldr	r1, [r6, #36]	; 0x24
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    3d98:	b2d2      	uxtb	r2, r2
	while (p[DESC_bLength] != 0U) {
    3d9a:	780c      	ldrb	r4, [r1, #0]
    3d9c:	b91c      	cbnz	r4, 3da6 <usb_handle_standard_request+0x7a>
			rc = -EINVAL;
    3d9e:	f06f 0015 	mvn.w	r0, #21
}
    3da2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (p[DESC_bDescriptorType] == type) {
    3da6:	784e      	ldrb	r6, [r1, #1]
    3da8:	4566      	cmp	r6, ip
    3daa:	d103      	bne.n	3db4 <usb_handle_standard_request+0x88>
			if (cur_index == index) {
    3dac:	429a      	cmp	r2, r3
    3dae:	f000 810b 	beq.w	3fc8 <usb_handle_standard_request+0x29c>
			cur_index++;
    3db2:	3301      	adds	r3, #1
		p += p[DESC_bLength];
    3db4:	4421      	add	r1, r4
    3db6:	e7f0      	b.n	3d9a <usb_handle_standard_request+0x6e>
			*len = p[DESC_bLength];
    3db8:	780b      	ldrb	r3, [r1, #0]
    3dba:	e10a      	b.n	3fd2 <usb_handle_standard_request+0x2a6>
			data[0] = usb_dev.configuration;
    3dbc:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    3dc0:	7013      	strb	r3, [r2, #0]
				*len = 1;
    3dc2:	2301      	movs	r3, #1
    3dc4:	e105      	b.n	3fd2 <usb_handle_standard_request+0x2a6>
		switch (setup->bRequest) {
    3dc6:	3901      	subs	r1, #1
    3dc8:	2908      	cmp	r1, #8
    3dca:	d8e8      	bhi.n	3d9e <usb_handle_standard_request+0x72>
    3dcc:	a301      	add	r3, pc, #4	; (adr r3, 3dd4 <usb_handle_standard_request+0xa8>)
    3dce:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
    3dd2:	bf00      	nop
    3dd4:	00003e6d 	.word	0x00003e6d
    3dd8:	00003d9f 	.word	0x00003d9f
    3ddc:	00003e7b 	.word	0x00003e7b
    3de0:	00003d9f 	.word	0x00003d9f
    3de4:	00003df9 	.word	0x00003df9
    3de8:	00003d9f 	.word	0x00003d9f
    3dec:	00003d9f 	.word	0x00003d9f
    3df0:	00003d9f 	.word	0x00003d9f
    3df4:	00003e05 	.word	0x00003e05
			return !usb_dc_set_address(setup->wValue);
    3df8:	78a0      	ldrb	r0, [r4, #2]
    3dfa:	f002 f951 	bl	60a0 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    3dfe:	2800      	cmp	r0, #0
    3e00:	d0bf      	beq.n	3d82 <usb_handle_standard_request+0x56>
    3e02:	e7cc      	b.n	3d9e <usb_handle_standard_request+0x72>
	if (setup->wValue == 0U) {
    3e04:	8863      	ldrh	r3, [r4, #2]
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    3e06:	6a75      	ldr	r5, [r6, #36]	; 0x24
	if (setup->wValue == 0U) {
    3e08:	bb63      	cbnz	r3, 3e64 <usb_handle_standard_request+0x138>
		usb_reset_alt_setting();
    3e0a:	f7ff fe17 	bl	3a3c <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    3e0e:	8863      	ldrh	r3, [r4, #2]
    3e10:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    3e14:	69f3      	ldr	r3, [r6, #28]
    3e16:	2b00      	cmp	r3, #0
    3e18:	d0b3      	beq.n	3d82 <usb_handle_standard_request+0x56>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    3e1a:	496a      	ldr	r1, [pc, #424]	; (3fc4 <usb_handle_standard_request+0x298>)
    3e1c:	2003      	movs	r0, #3
    3e1e:	4798      	blx	r3
    3e20:	e7af      	b.n	3d82 <usb_handle_standard_request+0x56>
		switch (p[DESC_bDescriptorType]) {
    3e22:	786b      	ldrb	r3, [r5, #1]
    3e24:	2b04      	cmp	r3, #4
    3e26:	d010      	beq.n	3e4a <usb_handle_standard_request+0x11e>
    3e28:	2b05      	cmp	r3, #5
    3e2a:	d011      	beq.n	3e50 <usb_handle_standard_request+0x124>
    3e2c:	2b02      	cmp	r3, #2
    3e2e:	d104      	bne.n	3e3a <usb_handle_standard_request+0x10e>
			cur_config = p[CONF_DESC_bConfigurationValue];
    3e30:	796f      	ldrb	r7, [r5, #5]
			if (cur_config == setup->wValue) {
    3e32:	8863      	ldrh	r3, [r4, #2]
				found = true;
    3e34:	42bb      	cmp	r3, r7
    3e36:	bf08      	it	eq
    3e38:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    3e3a:	782b      	ldrb	r3, [r5, #0]
    3e3c:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    3e3e:	782b      	ldrb	r3, [r5, #0]
    3e40:	2b00      	cmp	r3, #0
    3e42:	d1ee      	bne.n	3e22 <usb_handle_standard_request+0xf6>
	if (found) {
    3e44:	2800      	cmp	r0, #0
    3e46:	d0aa      	beq.n	3d9e <usb_handle_standard_request+0x72>
    3e48:	e7df      	b.n	3e0a <usb_handle_standard_request+0xde>
			cur_alt_setting =
    3e4a:	f895 8003 	ldrb.w	r8, [r5, #3]
			break;
    3e4e:	e7f4      	b.n	3e3a <usb_handle_standard_request+0x10e>
			if ((cur_config != setup->wValue) ||
    3e50:	8863      	ldrh	r3, [r4, #2]
    3e52:	42bb      	cmp	r3, r7
    3e54:	d1f1      	bne.n	3e3a <usb_handle_standard_request+0x10e>
    3e56:	f1b8 0f00 	cmp.w	r8, #0
    3e5a:	d1ee      	bne.n	3e3a <usb_handle_standard_request+0x10e>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    3e5c:	4628      	mov	r0, r5
    3e5e:	f7ff ff05 	bl	3c6c <set_endpoint>
			break;
    3e62:	e7ea      	b.n	3e3a <usb_handle_standard_request+0x10e>
	uint8_t cur_config = 0xFF;
    3e64:	27ff      	movs	r7, #255	; 0xff
	bool found = false;
    3e66:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    3e68:	46b8      	mov	r8, r7
    3e6a:	e7e8      	b.n	3e3e <usb_handle_standard_request+0x112>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    3e6c:	8863      	ldrh	r3, [r4, #2]
    3e6e:	2b01      	cmp	r3, #1
    3e70:	d195      	bne.n	3d9e <usb_handle_standard_request+0x72>
					usb_dev.remote_wakeup = false;
    3e72:	2300      	movs	r3, #0
					usb_dev.remote_wakeup = true;
    3e74:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    3e78:	e783      	b.n	3d82 <usb_handle_standard_request+0x56>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    3e7a:	8863      	ldrh	r3, [r4, #2]
    3e7c:	2b01      	cmp	r3, #1
    3e7e:	d18e      	bne.n	3d9e <usb_handle_standard_request+0x72>
    3e80:	e7f8      	b.n	3e74 <usb_handle_standard_request+0x148>
	if (!is_device_configured() ||
    3e82:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    3e86:	f8d5 c000 	ldr.w	ip, [r5]
    3e8a:	2b00      	cmp	r3, #0
    3e8c:	d087      	beq.n	3d9e <usb_handle_standard_request+0x72>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    3e8e:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    3e90:	88a3      	ldrh	r3, [r4, #4]
    3e92:	f894 e004 	ldrb.w	lr, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    3e96:	462a      	mov	r2, r5
	while (p[DESC_bLength] != 0U) {
    3e98:	7810      	ldrb	r0, [r2, #0]
    3e9a:	2800      	cmp	r0, #0
    3e9c:	f43f af7f 	beq.w	3d9e <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    3ea0:	7851      	ldrb	r1, [r2, #1]
    3ea2:	2902      	cmp	r1, #2
    3ea4:	d104      	bne.n	3eb0 <usb_handle_standard_request+0x184>
			if (interface < cfg_descr->bNumInterfaces) {
    3ea6:	f892 8004 	ldrb.w	r8, [r2, #4]
    3eaa:	45f0      	cmp	r8, lr
    3eac:	f200 8093 	bhi.w	3fd6 <usb_handle_standard_request+0x2aa>
		p += p[DESC_bLength];
    3eb0:	4402      	add	r2, r0
    3eb2:	e7f1      	b.n	3e98 <usb_handle_standard_request+0x16c>
			data[0] = 0U;
    3eb4:	f88c 2000 	strb.w	r2, [ip]
			data[1] = 0U;
    3eb8:	f88c 2001 	strb.w	r2, [ip, #1]
			*len = 2;
    3ebc:	6039      	str	r1, [r7, #0]
			return true;
    3ebe:	e760      	b.n	3d82 <usb_handle_standard_request+0x56>
		p += p[DESC_bLength];
    3ec0:	4415      	add	r5, r2
    3ec2:	e094      	b.n	3fee <usb_handle_standard_request+0x2c2>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    3ec4:	2a0b      	cmp	r2, #11
    3ec6:	f47f af6a 	bne.w	3d9e <usb_handle_standard_request+0x72>
	bool ret = false;
    3eca:	2700      	movs	r7, #0
	uint8_t cur_iface = 0xFF;
    3ecc:	f04f 08ff 	mov.w	r8, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    3ed0:	46c1      	mov	r9, r8
	const uint8_t *if_desc = NULL;
    3ed2:	46ba      	mov	sl, r7
    3ed4:	e006      	b.n	3ee4 <usb_handle_standard_request+0x1b8>
		switch (p[DESC_bDescriptorType]) {
    3ed6:	786b      	ldrb	r3, [r5, #1]
    3ed8:	2b04      	cmp	r3, #4
    3eda:	d00f      	beq.n	3efc <usb_handle_standard_request+0x1d0>
    3edc:	2b05      	cmp	r3, #5
    3ede:	d021      	beq.n	3f24 <usb_handle_standard_request+0x1f8>
		p += p[DESC_bLength];
    3ee0:	782b      	ldrb	r3, [r5, #0]
    3ee2:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    3ee4:	782b      	ldrb	r3, [r5, #0]
    3ee6:	2b00      	cmp	r3, #0
    3ee8:	d1f5      	bne.n	3ed6 <usb_handle_standard_request+0x1aa>
	if (usb_dev.status_callback) {
    3eea:	69f3      	ldr	r3, [r6, #28]
    3eec:	b113      	cbz	r3, 3ef4 <usb_handle_standard_request+0x1c8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    3eee:	4651      	mov	r1, sl
    3ef0:	2007      	movs	r0, #7
    3ef2:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    3ef4:	2f00      	cmp	r7, #0
    3ef6:	f47f af44 	bne.w	3d82 <usb_handle_standard_request+0x56>
    3efa:	e750      	b.n	3d9e <usb_handle_standard_request+0x72>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    3efc:	f895 8002 	ldrb.w	r8, [r5, #2]
			if (cur_iface == setup->wIndex &&
    3f00:	88a3      	ldrh	r3, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    3f02:	f895 9003 	ldrb.w	r9, [r5, #3]
			if (cur_iface == setup->wIndex &&
    3f06:	4598      	cmp	r8, r3
    3f08:	d1ea      	bne.n	3ee0 <usb_handle_standard_request+0x1b4>
			    cur_alt_setting == setup->wValue) {
    3f0a:	8863      	ldrh	r3, [r4, #2]
			if (cur_iface == setup->wIndex &&
    3f0c:	4599      	cmp	r9, r3
    3f0e:	d1e7      	bne.n	3ee0 <usb_handle_standard_request+0x1b4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    3f10:	f1b8 0f07 	cmp.w	r8, #7
    3f14:	d81c      	bhi.n	3f50 <usb_handle_standard_request+0x224>
		usb_dev.alt_setting[iface] = alt_setting;
    3f16:	eb06 0308 	add.w	r3, r6, r8
		return true;
    3f1a:	46aa      	mov	sl, r5
				ret = usb_set_alt_setting(setup->wIndex,
    3f1c:	f883 90bb 	strb.w	r9, [r3, #187]	; 0xbb
		return true;
    3f20:	2701      	movs	r7, #1
    3f22:	e7dd      	b.n	3ee0 <usb_handle_standard_request+0x1b4>
			if (cur_iface == setup->wIndex) {
    3f24:	88a3      	ldrh	r3, [r4, #4]
    3f26:	4543      	cmp	r3, r8
    3f28:	d1da      	bne.n	3ee0 <usb_handle_standard_request+0x1b4>
	if (cur_alt_setting != alt_setting) {
    3f2a:	78a3      	ldrb	r3, [r4, #2]
    3f2c:	454b      	cmp	r3, r9
    3f2e:	d00a      	beq.n	3f46 <usb_handle_standard_request+0x21a>
		ret = reset_endpoint(ep_desc);
    3f30:	78af      	ldrb	r7, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    3f32:	4638      	mov	r0, r7
    3f34:	f000 fbf8 	bl	4728 <usb_cancel_transfer>
	return disable_endpoint(ep_cfg.ep_addr) ? false : true;
    3f38:	4638      	mov	r0, r7
    3f3a:	f7ff fe67 	bl	3c0c <disable_endpoint>
    3f3e:	fab0 f780 	clz	r7, r0
    3f42:	097f      	lsrs	r7, r7, #5
    3f44:	e7cc      	b.n	3ee0 <usb_handle_standard_request+0x1b4>
		ret = set_endpoint(ep_desc);
    3f46:	4628      	mov	r0, r5
    3f48:	f7ff fe90 	bl	3c6c <set_endpoint>
    3f4c:	4607      	mov	r7, r0
    3f4e:	e7c7      	b.n	3ee0 <usb_handle_standard_request+0x1b4>
    3f50:	46aa      	mov	sl, r5
	return false;
    3f52:	2700      	movs	r7, #0
    3f54:	e7c4      	b.n	3ee0 <usb_handle_standard_request+0x1b4>
	if (usb_reqtype_is_to_host(setup)) {
    3f56:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    3f5a:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    3f5c:	2a00      	cmp	r2, #0
    3f5e:	da18      	bge.n	3f92 <usb_handle_standard_request+0x266>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    3f60:	2b00      	cmp	r3, #0
    3f62:	f47f af1c 	bne.w	3d9e <usb_handle_standard_request+0x72>
	uint8_t ep = setup->wIndex;
    3f66:	7924      	ldrb	r4, [r4, #4]
    3f68:	682d      	ldr	r5, [r5, #0]
	if (USB_EP_GET_IDX(ep) == 0) {
    3f6a:	0663      	lsls	r3, r4, #25
    3f6c:	d00a      	beq.n	3f84 <usb_handle_standard_request+0x258>
    3f6e:	4620      	mov	r0, r4
    3f70:	f7ff fd6c 	bl	3a4c <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    3f74:	2800      	cmp	r0, #0
    3f76:	f43f af12 	beq.w	3d9e <usb_handle_standard_request+0x72>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    3f7a:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    3f7e:	2b00      	cmp	r3, #0
    3f80:	f43f af0d 	beq.w	3d9e <usb_handle_standard_request+0x72>
		usb_dc_ep_is_stalled(ep, &data[0]);
    3f84:	4629      	mov	r1, r5
    3f86:	4620      	mov	r0, r4
    3f88:	f002 f95c 	bl	6244 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    3f8c:	2300      	movs	r3, #0
    3f8e:	706b      	strb	r3, [r5, #1]
    3f90:	e6f2      	b.n	3d78 <usb_handle_standard_request+0x4c>
		switch (setup->bRequest) {
    3f92:	2b01      	cmp	r3, #1
    3f94:	d008      	beq.n	3fa8 <usb_handle_standard_request+0x27c>
    3f96:	2b03      	cmp	r3, #3
    3f98:	f47f af01 	bne.w	3d9e <usb_handle_standard_request+0x72>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    3f9c:	8863      	ldrh	r3, [r4, #2]
    3f9e:	2b00      	cmp	r3, #0
    3fa0:	f47f aefd 	bne.w	3d9e <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    3fa4:	2101      	movs	r1, #1
    3fa6:	e003      	b.n	3fb0 <usb_handle_standard_request+0x284>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    3fa8:	8861      	ldrh	r1, [r4, #2]
    3faa:	2900      	cmp	r1, #0
    3fac:	f47f aef7 	bne.w	3d9e <usb_handle_standard_request+0x72>
				return usb_halt_endpoint_req(setup, true);
    3fb0:	88a0      	ldrh	r0, [r4, #4]
    3fb2:	f7ff fd93 	bl	3adc <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    3fb6:	2800      	cmp	r0, #0
    3fb8:	f47f aee3 	bne.w	3d82 <usb_handle_standard_request+0x56>
    3fbc:	e6ef      	b.n	3d9e <usb_handle_standard_request+0x72>
    3fbe:	bf00      	nop
    3fc0:	20000c54 	.word	0x20000c54
    3fc4:	20000d0e 	.word	0x20000d0e
		if (type == USB_DESC_CONFIGURATION) {
    3fc8:	2802      	cmp	r0, #2
		*data = p;
    3fca:	6029      	str	r1, [r5, #0]
		if (type == USB_DESC_CONFIGURATION) {
    3fcc:	f47f aef4 	bne.w	3db8 <usb_handle_standard_request+0x8c>
			*len = (p[CONF_DESC_wTotalLength]) |
    3fd0:	884b      	ldrh	r3, [r1, #2]
		*len = 2;
    3fd2:	603b      	str	r3, [r7, #0]
		return true;
    3fd4:	e6d5      	b.n	3d82 <usb_handle_standard_request+0x56>
	if (usb_reqtype_is_to_host(setup)) {
    3fd6:	f994 0000 	ldrsb.w	r0, [r4]
		switch (setup->bRequest) {
    3fda:	7862      	ldrb	r2, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    3fdc:	2800      	cmp	r0, #0
    3fde:	f6bf af71 	bge.w	3ec4 <usb_handle_standard_request+0x198>
		switch (setup->bRequest) {
    3fe2:	2a00      	cmp	r2, #0
    3fe4:	f43f af66 	beq.w	3eb4 <usb_handle_standard_request+0x188>
    3fe8:	2a0a      	cmp	r2, #10
    3fea:	f47f aed8 	bne.w	3d9e <usb_handle_standard_request+0x72>
	while (p[DESC_bLength] != 0U) {
    3fee:	782a      	ldrb	r2, [r5, #0]
    3ff0:	2a00      	cmp	r2, #0
    3ff2:	f43f aed4 	beq.w	3d9e <usb_handle_standard_request+0x72>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    3ff6:	7869      	ldrb	r1, [r5, #1]
    3ff8:	2904      	cmp	r1, #4
    3ffa:	f47f af61 	bne.w	3ec0 <usb_handle_standard_request+0x194>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    3ffe:	78a9      	ldrb	r1, [r5, #2]
			if (cur_iface == setup->wIndex) {
    4000:	428b      	cmp	r3, r1
    4002:	f47f af5d 	bne.w	3ec0 <usb_handle_standard_request+0x194>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    4006:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    4008:	bf96      	itet	ls
    400a:	199b      	addls	r3, r3, r6
	return 0;
    400c:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    400e:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    4012:	f88c 3000 	strb.w	r3, [ip]
    4016:	e6d4      	b.n	3dc2 <usb_handle_standard_request+0x96>

00004018 <usb_data_to_host>:
{
    4018:	b513      	push	{r0, r1, r4, lr}
	if (usb_dev.zlp_flag == false) {
    401a:	4c13      	ldr	r4, [pc, #76]	; (4068 <usb_data_to_host+0x50>)
    401c:	7d23      	ldrb	r3, [r4, #20]
    401e:	b9cb      	cbnz	r3, 4054 <usb_data_to_host+0x3c>
		uint32_t chunk = usb_dev.data_buf_residue;
    4020:	68e2      	ldr	r2, [r4, #12]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    4022:	68a1      	ldr	r1, [r4, #8]
		uint32_t chunk = usb_dev.data_buf_residue;
    4024:	9201      	str	r2, [sp, #4]
		usb_write(USB_CONTROL_EP_IN, usb_dev.data_buf,
    4026:	ab01      	add	r3, sp, #4
    4028:	2080      	movs	r0, #128	; 0x80
    402a:	f008 fcef 	bl	ca0c <usb_write>
		usb_dev.data_buf += chunk;
    402e:	9a01      	ldr	r2, [sp, #4]
    4030:	68a3      	ldr	r3, [r4, #8]
    4032:	4413      	add	r3, r2
    4034:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    4036:	68e3      	ldr	r3, [r4, #12]
    4038:	1a9b      	subs	r3, r3, r2
    403a:	60e3      	str	r3, [r4, #12]
		if (!usb_dev.data_buf_residue && chunk &&
    403c:	b943      	cbnz	r3, 4050 <usb_data_to_host+0x38>
    403e:	b13a      	cbz	r2, 4050 <usb_data_to_host+0x38>
		    usb_dev.setup.wLength > usb_dev.data_buf_len) {
    4040:	6923      	ldr	r3, [r4, #16]
    4042:	88e2      	ldrh	r2, [r4, #6]
		if (!usb_dev.data_buf_residue && chunk &&
    4044:	429a      	cmp	r2, r3
    4046:	dd03      	ble.n	4050 <usb_data_to_host+0x38>
			if (!(usb_dev.data_buf_len % USB_MAX_CTRL_MPS)) {
    4048:	069b      	lsls	r3, r3, #26
    404a:	d101      	bne.n	4050 <usb_data_to_host+0x38>
				usb_dev.zlp_flag = true;
    404c:	2301      	movs	r3, #1
    404e:	7523      	strb	r3, [r4, #20]
}
    4050:	b002      	add	sp, #8
    4052:	bd10      	pop	{r4, pc}
		usb_dev.zlp_flag = false;
    4054:	2300      	movs	r3, #0
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    4056:	461a      	mov	r2, r3
    4058:	4619      	mov	r1, r3
    405a:	2080      	movs	r0, #128	; 0x80
		usb_dev.zlp_flag = false;
    405c:	7523      	strb	r3, [r4, #20]
}
    405e:	b002      	add	sp, #8
    4060:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		usb_dc_ep_write(USB_CONTROL_EP_IN, NULL, 0, NULL);
    4064:	f002 b934 	b.w	62d0 <usb_dc_ep_write>
    4068:	20000c54 	.word	0x20000c54

0000406c <usb_handle_control_transfer>:
{
    406c:	b570      	push	{r4, r5, r6, lr}
    406e:	b08a      	sub	sp, #40	; 0x28
	uint32_t chunk = 0U;
    4070:	2300      	movs	r3, #0
{
    4072:	460d      	mov	r5, r1
	uint32_t chunk = 0U;
    4074:	9301      	str	r3, [sp, #4]
	if (ep == USB_CONTROL_EP_OUT && ep_status == USB_DC_EP_SETUP) {
    4076:	4606      	mov	r6, r0
    4078:	2800      	cmp	r0, #0
    407a:	d168      	bne.n	414e <usb_handle_control_transfer+0xe2>
    407c:	2900      	cmp	r1, #0
    407e:	d140      	bne.n	4102 <usb_handle_control_transfer+0x96>
		if (usb_dc_ep_read(ep, (uint8_t *)&setup_raw,
    4080:	2208      	movs	r2, #8
    4082:	460b      	mov	r3, r1
    4084:	eb0d 0102 	add.w	r1, sp, r2
    4088:	f008 fdbb 	bl	cc02 <usb_dc_ep_read>
    408c:	2800      	cmp	r0, #0
    408e:	da04      	bge.n	409a <usb_handle_control_transfer+0x2e>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    4090:	2080      	movs	r0, #128	; 0x80
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    4092:	f002 f87d 	bl	6190 <usb_dc_ep_set_stall>
}
    4096:	b00a      	add	sp, #40	; 0x28
    4098:	bd70      	pop	{r4, r5, r6, pc}
		setup->bmRequestType = setup_raw.bmRequestType;
    409a:	4c32      	ldr	r4, [pc, #200]	; (4164 <usb_handle_control_transfer+0xf8>)
    409c:	9a02      	ldr	r2, [sp, #8]
    409e:	6022      	str	r2, [r4, #0]
		setup->wIndex = sys_le16_to_cpu(setup_raw.wIndex);
    40a0:	9a03      	ldr	r2, [sp, #12]
    40a2:	6062      	str	r2, [r4, #4]
		usb_dev.data_buf = usb_dev.req_data;
    40a4:	f104 0238 	add.w	r2, r4, #56	; 0x38
    40a8:	60a2      	str	r2, [r4, #8]
		if (usb_reqtype_is_to_device(setup)) {
    40aa:	f99d 2008 	ldrsb.w	r2, [sp, #8]
		setup->wLength = sys_le16_to_cpu(setup_raw.wLength);
    40ae:	f8bd 300e 	ldrh.w	r3, [sp, #14]
		usb_dev.zlp_flag = false;
    40b2:	7525      	strb	r5, [r4, #20]
		if (usb_reqtype_is_to_device(setup)) {
    40b4:	2a00      	cmp	r2, #0
		usb_dev.data_buf_residue = 0;
    40b6:	e9c4 5503 	strd	r5, r5, [r4, #12]
		if (usb_reqtype_is_to_device(setup)) {
    40ba:	db15      	blt.n	40e8 <usb_handle_control_transfer+0x7c>
			if (setup->wLength > CONFIG_USB_REQUEST_BUFFER_SIZE) {
    40bc:	2b80      	cmp	r3, #128	; 0x80
    40be:	d90f      	bls.n	40e0 <usb_handle_control_transfer+0x74>
				LOG_ERR("Request buffer too small");
    40c0:	4b29      	ldr	r3, [pc, #164]	; (4168 <usb_handle_control_transfer+0xfc>)
    40c2:	9309      	str	r3, [sp, #36]	; 0x24
    40c4:	2302      	movs	r3, #2
    40c6:	9308      	str	r3, [sp, #32]
    40c8:	4828      	ldr	r0, [pc, #160]	; (416c <usb_handle_control_transfer+0x100>)
    40ca:	462b      	mov	r3, r5
    40cc:	aa08      	add	r2, sp, #32
    40ce:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    40d2:	f7fe ffd5 	bl	3080 <z_impl_z_log_msg_static_create>
				usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    40d6:	2080      	movs	r0, #128	; 0x80
    40d8:	f002 f85a 	bl	6190 <usb_dc_ep_set_stall>
				usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    40dc:	4628      	mov	r0, r5
    40de:	e7d8      	b.n	4092 <usb_handle_control_transfer+0x26>
			if (setup->wLength) {
    40e0:	b113      	cbz	r3, 40e8 <usb_handle_control_transfer+0x7c>
				usb_dev.data_buf_residue = setup->wLength;
    40e2:	e9c4 3303 	strd	r3, r3, [r4, #12]
				return;
    40e6:	e7d6      	b.n	4096 <usb_handle_control_transfer+0x2a>
		if (!usb_handle_request(setup,
    40e8:	f7ff fccc 	bl	3a84 <usb_handle_request.constprop.0>
    40ec:	2800      	cmp	r0, #0
    40ee:	d0cf      	beq.n	4090 <usb_handle_control_transfer+0x24>
		usb_dev.data_buf_residue = MIN(usb_dev.data_buf_len,
    40f0:	88e2      	ldrh	r2, [r4, #6]
    40f2:	6923      	ldr	r3, [r4, #16]
    40f4:	429a      	cmp	r2, r3
    40f6:	bfd4      	ite	le
    40f8:	60e2      	strle	r2, [r4, #12]
    40fa:	60e3      	strgt	r3, [r4, #12]
			usb_data_to_host();
    40fc:	f7ff ff8c 	bl	4018 <usb_data_to_host>
    4100:	e7c9      	b.n	4096 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue <= 0) {
    4102:	4c18      	ldr	r4, [pc, #96]	; (4164 <usb_handle_control_transfer+0xf8>)
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    4104:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
		if (usb_dev.data_buf_residue <= 0) {
    4108:	2a00      	cmp	r2, #0
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    410a:	ab01      	add	r3, sp, #4
		if (usb_dev.data_buf_residue <= 0) {
    410c:	dc05      	bgt.n	411a <usb_handle_control_transfer+0xae>
			if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    410e:	4602      	mov	r2, r0
    4110:	f008 fd77 	bl	cc02 <usb_dc_ep_read>
    4114:	2800      	cmp	r0, #0
    4116:	dabe      	bge.n	4096 <usb_handle_control_transfer+0x2a>
    4118:	e7ba      	b.n	4090 <usb_handle_control_transfer+0x24>
		if (usb_dc_ep_read(USB_CONTROL_EP_OUT,
    411a:	f008 fd72 	bl	cc02 <usb_dc_ep_read>
    411e:	2800      	cmp	r0, #0
    4120:	da04      	bge.n	412c <usb_handle_control_transfer+0xc0>
			usb_dc_ep_set_stall(USB_CONTROL_EP_IN);
    4122:	2080      	movs	r0, #128	; 0x80
    4124:	f002 f834 	bl	6190 <usb_dc_ep_set_stall>
			usb_dc_ep_set_stall(USB_CONTROL_EP_OUT);
    4128:	4630      	mov	r0, r6
    412a:	e7b2      	b.n	4092 <usb_handle_control_transfer+0x26>
		usb_dev.data_buf += chunk;
    412c:	9a01      	ldr	r2, [sp, #4]
    412e:	68a3      	ldr	r3, [r4, #8]
    4130:	4413      	add	r3, r2
    4132:	60a3      	str	r3, [r4, #8]
		usb_dev.data_buf_residue -= chunk;
    4134:	68e3      	ldr	r3, [r4, #12]
    4136:	1a9b      	subs	r3, r3, r2
    4138:	60e3      	str	r3, [r4, #12]
		if (usb_dev.data_buf_residue == 0) {
    413a:	2b00      	cmp	r3, #0
    413c:	d1ab      	bne.n	4096 <usb_handle_control_transfer+0x2a>
			usb_dev.data_buf = usb_dev.req_data;
    413e:	f104 0338 	add.w	r3, r4, #56	; 0x38
    4142:	60a3      	str	r3, [r4, #8]
			if (!usb_handle_request(setup,
    4144:	f7ff fc9e 	bl	3a84 <usb_handle_request.constprop.0>
    4148:	2800      	cmp	r0, #0
    414a:	d1d7      	bne.n	40fc <usb_handle_control_transfer+0x90>
    414c:	e7a0      	b.n	4090 <usb_handle_control_transfer+0x24>
	} else if (ep == USB_CONTROL_EP_IN) {
    414e:	2880      	cmp	r0, #128	; 0x80
    4150:	d1a1      	bne.n	4096 <usb_handle_control_transfer+0x2a>
		if (usb_dev.data_buf_residue != 0 || usb_dev.zlp_flag == true) {
    4152:	4b04      	ldr	r3, [pc, #16]	; (4164 <usb_handle_control_transfer+0xf8>)
    4154:	68da      	ldr	r2, [r3, #12]
    4156:	2a00      	cmp	r2, #0
    4158:	d1d0      	bne.n	40fc <usb_handle_control_transfer+0x90>
    415a:	7d1b      	ldrb	r3, [r3, #20]
    415c:	2b00      	cmp	r3, #0
    415e:	d1cd      	bne.n	40fc <usb_handle_control_transfer+0x90>
    4160:	e799      	b.n	4096 <usb_handle_control_transfer+0x2a>
    4162:	bf00      	nop
    4164:	20000c54 	.word	0x20000c54
    4168:	0000f997 	.word	0x0000f997
    416c:	0000dc14 	.word	0x0000dc14

00004170 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    4170:	4b05      	ldr	r3, [pc, #20]	; (4188 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    4172:	4a06      	ldr	r2, [pc, #24]	; (418c <usb_set_config+0x1c>)
    4174:	629a      	str	r2, [r3, #40]	; 0x28
    4176:	4a06      	ldr	r2, [pc, #24]	; (4190 <usb_set_config+0x20>)
    4178:	62da      	str	r2, [r3, #44]	; 0x2c
    417a:	4a06      	ldr	r2, [pc, #24]	; (4194 <usb_set_config+0x24>)
    417c:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    417e:	4a06      	ldr	r2, [pc, #24]	; (4198 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    4180:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    4182:	619a      	str	r2, [r3, #24]
}
    4184:	2000      	movs	r0, #0
    4186:	4770      	bx	lr
    4188:	20000c54 	.word	0x20000c54
    418c:	00003d2d 	.word	0x00003d2d
    4190:	00003961 	.word	0x00003961
    4194:	00003a01 	.word	0x00003a01
    4198:	000039a1 	.word	0x000039a1

0000419c <usb_device_init>:
{
    419c:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
    419e:	4b09      	ldr	r3, [pc, #36]	; (41c4 <usb_device_init+0x28>)
    41a0:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    41a4:	b954      	cbnz	r4, 41bc <usb_device_init+0x20>
	device_descriptor = usb_get_device_descriptor();
    41a6:	f000 f8d9 	bl	435c <usb_get_device_descriptor>
	if (!device_descriptor) {
    41aa:	b918      	cbnz	r0, 41b4 <usb_device_init+0x18>
}
    41ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    41b0:	f7ff bc7e 	b.w	3ab0 <usb_device_init.part.0>
	usb_set_config(device_descriptor);
    41b4:	f7ff ffdc 	bl	4170 <usb_set_config>
	return 0;
    41b8:	4620      	mov	r0, r4
}
    41ba:	bd10      	pop	{r4, pc}
		return -EALREADY;
    41bc:	f06f 0077 	mvn.w	r0, #119	; 0x77
    41c0:	e7fb      	b.n	41ba <usb_device_init+0x1e>
    41c2:	bf00      	nop
    41c4:	20000c54 	.word	0x20000c54

000041c8 <usb_enable>:
{
    41c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    41cc:	4604      	mov	r4, r0
	if (usb_dev.enabled == true) {
    41ce:	4d3b      	ldr	r5, [pc, #236]	; (42bc <usb_enable+0xf4>)
	return z_impl_k_mutex_lock(mutex, timeout);
    41d0:	483b      	ldr	r0, [pc, #236]	; (42c0 <usb_enable+0xf8>)
    41d2:	f04f 32ff 	mov.w	r2, #4294967295
    41d6:	f04f 33ff 	mov.w	r3, #4294967295
    41da:	f006 fc87 	bl	aaec <z_impl_k_mutex_lock>
    41de:	f895 60b8 	ldrb.w	r6, [r5, #184]	; 0xb8
    41e2:	2e00      	cmp	r6, #0
    41e4:	d167      	bne.n	42b6 <usb_enable+0xee>
	usb_dev.status_callback = cb;
    41e6:	4837      	ldr	r0, [pc, #220]	; (42c4 <usb_enable+0xfc>)
	usb_dev.user_status_callback = status_cb;
    41e8:	622c      	str	r4, [r5, #32]
	usb_dev.status_callback = cb;
    41ea:	61e8      	str	r0, [r5, #28]
	usb_dc_set_status_callback(forward_status_cb);
    41ec:	f002 f9e4 	bl	65b8 <usb_dc_set_status_callback>
	ret = usb_dc_attach();
    41f0:	f001 ff24 	bl	603c <usb_dc_attach>
	if (ret < 0) {
    41f4:	1e04      	subs	r4, r0, #0
    41f6:	db42      	blt.n	427e <usb_enable+0xb6>
	ret = usb_transfer_init();
    41f8:	f000 fad8 	bl	47ac <usb_transfer_init>
	if (ret < 0) {
    41fc:	1e04      	subs	r4, r0, #0
    41fe:	db3e      	blt.n	427e <usb_enable+0xb6>
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    4200:	2340      	movs	r3, #64	; 0x40
	ret = usb_dc_ep_configure(&ep0_cfg);
    4202:	4668      	mov	r0, sp
	ep0_cfg.ep_mps = USB_MAX_CTRL_MPS;
    4204:	f8ad 3002 	strh.w	r3, [sp, #2]
	ep0_cfg.ep_type = USB_DC_EP_CONTROL;
    4208:	f88d 6004 	strb.w	r6, [sp, #4]
	ep0_cfg.ep_addr = USB_CONTROL_EP_OUT;
    420c:	f88d 6000 	strb.w	r6, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    4210:	f001 ff8a 	bl	6128 <usb_dc_ep_configure>
	if (ret < 0) {
    4214:	1e04      	subs	r4, r0, #0
    4216:	db32      	blt.n	427e <usb_enable+0xb6>
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    4218:	2780      	movs	r7, #128	; 0x80
	ret = usb_dc_ep_configure(&ep0_cfg);
    421a:	4668      	mov	r0, sp
	ep0_cfg.ep_addr = USB_CONTROL_EP_IN;
    421c:	f88d 7000 	strb.w	r7, [sp]
	ret = usb_dc_ep_configure(&ep0_cfg);
    4220:	f001 ff82 	bl	6128 <usb_dc_ep_configure>
	if (ret < 0) {
    4224:	1e04      	subs	r4, r0, #0
    4226:	db2a      	blt.n	427e <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_OUT,
    4228:	4927      	ldr	r1, [pc, #156]	; (42c8 <usb_enable+0x100>)
    422a:	4630      	mov	r0, r6
    422c:	f002 f9b0 	bl	6590 <usb_dc_ep_set_callback>
	if (ret < 0) {
    4230:	1e04      	subs	r4, r0, #0
    4232:	db24      	blt.n	427e <usb_enable+0xb6>
	ret = usb_dc_ep_set_callback(USB_CONTROL_EP_IN,
    4234:	4924      	ldr	r1, [pc, #144]	; (42c8 <usb_enable+0x100>)
    4236:	4638      	mov	r0, r7
    4238:	f002 f9aa 	bl	6590 <usb_dc_ep_set_callback>
	if (ret < 0) {
    423c:	1e04      	subs	r4, r0, #0
    423e:	db1e      	blt.n	427e <usb_enable+0xb6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4240:	4c22      	ldr	r4, [pc, #136]	; (42cc <usb_enable+0x104>)
    4242:	f8df 808c 	ldr.w	r8, [pc, #140]	; 42d0 <usb_enable+0x108>
    4246:	4544      	cmp	r4, r8
    4248:	d320      	bcc.n	428c <usb_enable+0xc4>
	ret = usb_dc_ep_enable(USB_CONTROL_EP_OUT);
    424a:	2000      	movs	r0, #0
    424c:	f002 f816 	bl	627c <usb_dc_ep_enable>
	if (ret < 0) {
    4250:	1e04      	subs	r4, r0, #0
    4252:	db14      	blt.n	427e <usb_enable+0xb6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    4254:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    4258:	2080      	movs	r0, #128	; 0x80
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_OUT);
    425a:	f043 0301 	orr.w	r3, r3, #1
    425e:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	ret = usb_dc_ep_enable(USB_CONTROL_EP_IN);
    4262:	f002 f80b 	bl	627c <usb_dc_ep_enable>
	if (ret < 0) {
    4266:	1e04      	subs	r4, r0, #0
    4268:	db09      	blt.n	427e <usb_enable+0xb6>
	usb_dev.ep_bm |= get_ep_bm_from_addr(USB_CONTROL_EP_IN);
    426a:	f8d5 30c4 	ldr.w	r3, [r5, #196]	; 0xc4
    426e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    4272:	f8c5 30c4 	str.w	r3, [r5, #196]	; 0xc4
	usb_dev.enabled = true;
    4276:	2301      	movs	r3, #1
    4278:	f885 30b8 	strb.w	r3, [r5, #184]	; 0xb8
	ret = 0;
    427c:	2400      	movs	r4, #0
	return z_impl_k_mutex_unlock(mutex);
    427e:	4810      	ldr	r0, [pc, #64]	; (42c0 <usb_enable+0xf8>)
    4280:	f006 fcae 	bl	abe0 <z_impl_k_mutex_unlock>
}
    4284:	4620      	mov	r0, r4
    4286:	b002      	add	sp, #8
    4288:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ep_data = cfg_data->endpoint;
    428c:	6a27      	ldr	r7, [r4, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    428e:	2600      	movs	r6, #0
    4290:	7f22      	ldrb	r2, [r4, #28]
    4292:	b2f3      	uxtb	r3, r6
    4294:	429a      	cmp	r2, r3
    4296:	d801      	bhi.n	429c <usb_enable+0xd4>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    4298:	3424      	adds	r4, #36	; 0x24
    429a:	e7d4      	b.n	4246 <usb_enable+0x7e>
			if (usb_dc_ep_set_callback(ep_data[n].ep_addr,
    429c:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    42a0:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    42a4:	7910      	ldrb	r0, [r2, #4]
    42a6:	f002 f973 	bl	6590 <usb_dc_ep_set_callback>
    42aa:	3601      	adds	r6, #1
    42ac:	2800      	cmp	r0, #0
    42ae:	d0ef      	beq.n	4290 <usb_enable+0xc8>
    42b0:	f04f 34ff 	mov.w	r4, #4294967295
    42b4:	e7e3      	b.n	427e <usb_enable+0xb6>
		ret = -EALREADY;
    42b6:	f06f 0477 	mvn.w	r4, #119	; 0x77
    42ba:	e7e0      	b.n	427e <usb_enable+0xb6>
    42bc:	20000c54 	.word	0x20000c54
    42c0:	200002fc 	.word	0x200002fc
    42c4:	00003b5d 	.word	0x00003b5d
    42c8:	0000406d 	.word	0x0000406d
    42cc:	200003c4 	.word	0x200003c4
    42d0:	200003e8 	.word	0x200003e8

000042d4 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    42d4:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    42d6:	4b1f      	ldr	r3, [pc, #124]	; (4354 <usb_update_sn_string_descriptor+0x80>)
{
    42d8:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    42da:	aa05      	add	r2, sp, #20
    42dc:	f103 0510 	add.w	r5, r3, #16
    42e0:	6818      	ldr	r0, [r3, #0]
    42e2:	6859      	ldr	r1, [r3, #4]
    42e4:	4614      	mov	r4, r2
    42e6:	c403      	stmia	r4!, {r0, r1}
    42e8:	3308      	adds	r3, #8
    42ea:	42ab      	cmp	r3, r5
    42ec:	4622      	mov	r2, r4
    42ee:	d1f7      	bne.n	42e0 <usb_update_sn_string_descriptor+0xc>
    42f0:	781b      	ldrb	r3, [r3, #0]
    42f2:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    42f4:	2210      	movs	r2, #16
    42f6:	2100      	movs	r1, #0
    42f8:	a801      	add	r0, sp, #4
    42fa:	f008 fc12 	bl	cb22 <memset>
	memset(sn, 0, sizeof(sn));
    42fe:	2212      	movs	r2, #18
    4300:	2100      	movs	r1, #0
    4302:	4815      	ldr	r0, [pc, #84]	; (4358 <usb_update_sn_string_descriptor+0x84>)
    4304:	f008 fc0d 	bl	cb22 <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    4308:	2110      	movs	r1, #16
    430a:	a801      	add	r0, sp, #4
    430c:	f008 fd6c 	bl	cde8 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    4310:	2800      	cmp	r0, #0
    4312:	dd1b      	ble.n	434c <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    4314:	2808      	cmp	r0, #8
    4316:	bfb8      	it	lt
    4318:	2008      	movlt	r0, #8
    431a:	3809      	subs	r0, #9
    431c:	ab01      	add	r3, sp, #4
    431e:	490e      	ldr	r1, [pc, #56]	; (4358 <usb_update_sn_string_descriptor+0x84>)
    4320:	181a      	adds	r2, r3, r0
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    4322:	2000      	movs	r0, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    4324:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    4328:	ac0a      	add	r4, sp, #40	; 0x28
    432a:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    432e:	f003 030f 	and.w	r3, r3, #15
    4332:	3328      	adds	r3, #40	; 0x28
    4334:	446b      	add	r3, sp
		for (int i = 0; i < usblen; i++) {
    4336:	3001      	adds	r0, #1
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    4338:	f814 4c14 	ldrb.w	r4, [r4, #-20]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    433c:	f813 3c14 	ldrb.w	r3, [r3, #-20]
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    4340:	700c      	strb	r4, [r1, #0]
		for (int i = 0; i < usblen; i++) {
    4342:	2808      	cmp	r0, #8
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    4344:	704b      	strb	r3, [r1, #1]
		for (int i = 0; i < usblen; i++) {
    4346:	f101 0102 	add.w	r1, r1, #2
    434a:	d1eb      	bne.n	4324 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    434c:	4802      	ldr	r0, [pc, #8]	; (4358 <usb_update_sn_string_descriptor+0x84>)
    434e:	b00b      	add	sp, #44	; 0x2c
    4350:	bd30      	pop	{r4, r5, pc}
    4352:	bf00      	nop
    4354:	0000f9bb 	.word	0x0000f9bb
    4358:	20001c47 	.word	0x20001c47

0000435c <usb_get_device_descriptor>:
	return 0;
}


uint8_t *usb_get_device_descriptor(void)
{
    435c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4360:	4c83      	ldr	r4, [pc, #524]	; (4570 <usb_get_device_descriptor+0x214>)
    4362:	b08b      	sub	sp, #44	; 0x2c
    4364:	af00      	add	r7, sp, #0
	uint8_t str_descr_idx = 0U;
    4366:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    4368:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    436c:	46b2      	mov	sl, r6
	struct usb_cfg_data *cfg_data = NULL;
    436e:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    4370:	46b0      	mov	r8, r6
	while (head->bLength != 0U) {
    4372:	7823      	ldrb	r3, [r4, #0]
    4374:	b943      	cbnz	r3, 4388 <usb_get_device_descriptor+0x2c>
	if ((head + 1) != __usb_descriptor_end) {
    4376:	4b7f      	ldr	r3, [pc, #508]	; (4574 <usb_get_device_descriptor+0x218>)
    4378:	3402      	adds	r4, #2
    437a:	429c      	cmp	r4, r3
    437c:	d1f3      	bne.n	4366 <usb_get_device_descriptor+0xa>
	if (usb_fix_descriptor(__usb_descriptor_start)) {
		LOG_ERR("Failed to fixup USB descriptor");
		return NULL;
	}

	return (uint8_t *) __usb_descriptor_start;
    437e:	487c      	ldr	r0, [pc, #496]	; (4570 <usb_get_device_descriptor+0x214>)
}
    4380:	372c      	adds	r7, #44	; 0x2c
    4382:	46bd      	mov	sp, r7
    4384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (head->bDescriptorType) {
    4388:	7863      	ldrb	r3, [r4, #1]
    438a:	2b05      	cmp	r3, #5
    438c:	d805      	bhi.n	439a <usb_get_device_descriptor+0x3e>
    438e:	e8df f003 	tbb	[pc, r3]
    4392:	04a6      	.short	0x04a6
    4394:	3f07a603 	.word	0x3f07a603
    4398:	46a0      	mov	r8, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    439a:	7823      	ldrb	r3, [r4, #0]
    439c:	441c      	add	r4, r3
    439e:	e7e8      	b.n	4372 <usb_get_device_descriptor+0x16>
			if (if_descr->bAlternateSetting) {
    43a0:	78e3      	ldrb	r3, [r4, #3]
    43a2:	2b00      	cmp	r3, #0
    43a4:	d1f9      	bne.n	439a <usb_get_device_descriptor+0x3e>
			if (if_descr->bInterfaceNumber == 0U) {
    43a6:	78a3      	ldrb	r3, [r4, #2]
    43a8:	b343      	cbz	r3, 43fc <usb_get_device_descriptor+0xa0>
			numof_ifaces++;
    43aa:	f10a 0a01 	add.w	sl, sl, #1
    43ae:	fa5f fa8a 	uxtb.w	sl, sl
			break;
    43b2:	e7f2      	b.n	439a <usb_get_device_descriptor+0x3e>
		if (cfg_data->interface_descriptor == iface) {
    43b4:	686a      	ldr	r2, [r5, #4]
    43b6:	4294      	cmp	r4, r2
    43b8:	d023      	beq.n	4402 <usb_get_device_descriptor+0xa6>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    43ba:	3524      	adds	r5, #36	; 0x24
    43bc:	429d      	cmp	r5, r3
    43be:	d3f9      	bcc.n	43b4 <usb_get_device_descriptor+0x58>
					LOG_ERR("There is no usb_cfg_data "
    43c0:	466d      	mov	r5, sp
    43c2:	b088      	sub	sp, #32
    43c4:	466a      	mov	r2, sp
    43c6:	4b6c      	ldr	r3, [pc, #432]	; (4578 <usb_get_device_descriptor+0x21c>)
    43c8:	e9c2 3405 	strd	r3, r4, [r2, #20]
    43cc:	2303      	movs	r3, #3
    43ce:	f842 3f10 	str.w	r3, [r2, #16]!
    43d2:	486a      	ldr	r0, [pc, #424]	; (457c <usb_get_device_descriptor+0x220>)
    43d4:	2300      	movs	r3, #0
    43d6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    43da:	f7fe fe51 	bl	3080 <z_impl_z_log_msg_static_create>
    43de:	46ad      	mov	sp, r5
		LOG_ERR("Failed to fixup USB descriptor");
    43e0:	4b67      	ldr	r3, [pc, #412]	; (4580 <usb_get_device_descriptor+0x224>)
    43e2:	627b      	str	r3, [r7, #36]	; 0x24
    43e4:	2302      	movs	r3, #2
    43e6:	623b      	str	r3, [r7, #32]
    43e8:	4864      	ldr	r0, [pc, #400]	; (457c <usb_get_device_descriptor+0x220>)
    43ea:	2300      	movs	r3, #0
    43ec:	f107 0220 	add.w	r2, r7, #32
    43f0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    43f4:	f7fe fe44 	bl	3080 <z_impl_z_log_msg_static_create>
		return NULL;
    43f8:	2000      	movs	r0, #0
    43fa:	e7c1      	b.n	4380 <usb_get_device_descriptor+0x24>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    43fc:	4d61      	ldr	r5, [pc, #388]	; (4584 <usb_get_device_descriptor+0x228>)
    43fe:	4b62      	ldr	r3, [pc, #392]	; (4588 <usb_get_device_descriptor+0x22c>)
    4400:	e7dc      	b.n	43bc <usb_get_device_descriptor+0x60>
				if (cfg_data->interface_config) {
    4402:	68ab      	ldr	r3, [r5, #8]
    4404:	2b00      	cmp	r3, #0
    4406:	d0d0      	beq.n	43aa <usb_get_device_descriptor+0x4e>
					cfg_data->interface_config(head,
    4408:	4651      	mov	r1, sl
    440a:	4620      	mov	r0, r4
    440c:	4798      	blx	r3
    440e:	e7cc      	b.n	43aa <usb_get_device_descriptor+0x4e>
			if (!cfg_data) {
    4410:	2d00      	cmp	r5, #0
    4412:	d162      	bne.n	44da <usb_get_device_descriptor+0x17e>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    4414:	4b5d      	ldr	r3, [pc, #372]	; (458c <usb_get_device_descriptor+0x230>)
				LOG_ERR("Failed to validate endpoints");
    4416:	627b      	str	r3, [r7, #36]	; 0x24
    4418:	2302      	movs	r3, #2
    441a:	623b      	str	r3, [r7, #32]
    441c:	4857      	ldr	r0, [pc, #348]	; (457c <usb_get_device_descriptor+0x220>)
    441e:	2300      	movs	r3, #0
    4420:	f107 0220 	add.w	r2, r7, #32
    4424:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4428:	f7fe fe2a 	bl	3080 <z_impl_z_log_msg_static_create>
				return -1;
    442c:	e7d8      	b.n	43e0 <usb_get_device_descriptor+0x84>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    442e:	6a29      	ldr	r1, [r5, #32]
    4430:	78a0      	ldrb	r0, [r4, #2]
    4432:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    4436:	790b      	ldrb	r3, [r1, #4]
    4438:	4298      	cmp	r0, r3
    443a:	d005      	beq.n	4448 <usb_get_device_descriptor+0xec>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    443c:	3201      	adds	r2, #1
    443e:	7f2b      	ldrb	r3, [r5, #28]
    4440:	429a      	cmp	r2, r3
    4442:	d3f4      	bcc.n	442e <usb_get_device_descriptor+0xd2>
				LOG_ERR("Failed to validate endpoints");
    4444:	4b52      	ldr	r3, [pc, #328]	; (4590 <usb_get_device_descriptor+0x234>)
    4446:	e7e6      	b.n	4416 <usb_get_device_descriptor+0xba>
    4448:	f04f 0901 	mov.w	r9, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    444c:	78e0      	ldrb	r0, [r4, #3]
    444e:	f000 0003 	and.w	r0, r0, #3
    4452:	7538      	strb	r0, [r7, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    4454:	7920      	ldrb	r0, [r4, #4]
    4456:	f894 c005 	ldrb.w	ip, [r4, #5]
    445a:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    445e:	8278      	strh	r0, [r7, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    4460:	f994 0002 	ldrsb.w	r0, [r4, #2]
    4464:	2800      	cmp	r0, #0
    4466:	fa5f f389 	uxtb.w	r3, r9
    446a:	da28      	bge.n	44be <usb_get_device_descriptor+0x162>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    446c:	f109 0010 	add.w	r0, r9, #16
    4470:	f04f 0c01 	mov.w	ip, #1
    4474:	fa0c f000 	lsl.w	r0, ip, r0
    4478:	ea10 0f0b 	tst.w	r0, fp
    447c:	d127      	bne.n	44ce <usb_get_device_descriptor+0x172>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    447e:	f043 0080 	orr.w	r0, r3, #128	; 0x80
    4482:	7438      	strb	r0, [r7, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    4484:	f107 0010 	add.w	r0, r7, #16
    4488:	e9c7 3101 	strd	r3, r1, [r7, #4]
    448c:	60fa      	str	r2, [r7, #12]
    448e:	f001 fe19 	bl	60c4 <usb_dc_ep_check_cap>
    4492:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    4496:	687b      	ldr	r3, [r7, #4]
    4498:	b9c8      	cbnz	r0, 44ce <usb_get_device_descriptor+0x172>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    449a:	7c3a      	ldrb	r2, [r7, #16]
    449c:	70a2      	strb	r2, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    449e:	f012 0f80 	tst.w	r2, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    44a2:	bf18      	it	ne
    44a4:	3310      	addne	r3, #16
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    44a6:	710a      	strb	r2, [r1, #4]
					*requested_ep |= (1U << (idx + 16U));
    44a8:	bf18      	it	ne
    44aa:	b2db      	uxtbne	r3, r3
    44ac:	f04f 0201 	mov.w	r2, #1
    44b0:	bf14      	ite	ne
    44b2:	409a      	lslne	r2, r3
					*requested_ep |= (1U << idx);
    44b4:	fa02 f209 	lsleq.w	r2, r2, r9
    44b8:	ea4b 0b02 	orr.w	fp, fp, r2
				return 0;
    44bc:	e76d      	b.n	439a <usb_get_device_descriptor+0x3e>
				if ((*requested_ep & (1U << (idx)))) {
    44be:	2001      	movs	r0, #1
    44c0:	fa00 f009 	lsl.w	r0, r0, r9
    44c4:	ea10 0f0b 	tst.w	r0, fp
    44c8:	d101      	bne.n	44ce <usb_get_device_descriptor+0x172>
    44ca:	4618      	mov	r0, r3
    44cc:	e7d9      	b.n	4482 <usb_get_device_descriptor+0x126>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    44ce:	f109 0901 	add.w	r9, r9, #1
    44d2:	f1b9 0f10 	cmp.w	r9, #16
    44d6:	d1b9      	bne.n	444c <usb_get_device_descriptor+0xf0>
    44d8:	e7b0      	b.n	443c <usb_get_device_descriptor+0xe0>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    44da:	2200      	movs	r2, #0
    44dc:	e7af      	b.n	443e <usb_get_device_descriptor+0xe2>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    44de:	2e03      	cmp	r6, #3
    44e0:	d12a      	bne.n	4538 <usb_get_device_descriptor+0x1dc>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    44e2:	f7ff fef7 	bl	42d4 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    44e6:	4681      	mov	r9, r0
    44e8:	b1a8      	cbz	r0, 4516 <usb_get_device_descriptor+0x1ba>
	runtime_sn_len = strlen(runtime_sn);
    44ea:	f008 faf3 	bl	cad4 <strlen>
	if (!runtime_sn_len) {
    44ee:	60f8      	str	r0, [r7, #12]
    44f0:	b188      	cbz	r0, 4516 <usb_get_device_descriptor+0x1ba>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    44f2:	4828      	ldr	r0, [pc, #160]	; (4594 <usb_get_device_descriptor+0x238>)
    44f4:	f008 faee 	bl	cad4 <strlen>
	if (runtime_sn_len != default_sn_len) {
    44f8:	68fa      	ldr	r2, [r7, #12]
    44fa:	4282      	cmp	r2, r0
    44fc:	d017      	beq.n	452e <usb_get_device_descriptor+0x1d2>
		LOG_ERR("the new SN descriptor doesn't have the same "
    44fe:	4b26      	ldr	r3, [pc, #152]	; (4598 <usb_get_device_descriptor+0x23c>)
    4500:	627b      	str	r3, [r7, #36]	; 0x24
    4502:	2302      	movs	r3, #2
    4504:	623b      	str	r3, [r7, #32]
    4506:	481d      	ldr	r0, [pc, #116]	; (457c <usb_get_device_descriptor+0x220>)
    4508:	2300      	movs	r3, #0
    450a:	f107 0220 	add.w	r2, r7, #32
    450e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4512:	f7fe fdb5 	bl	3080 <z_impl_z_log_msg_static_create>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    4516:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    4518:	f06f 0102 	mvn.w	r1, #2
    451c:	18e2      	adds	r2, r4, r3
    451e:	1b09      	subs	r1, r1, r4
    4520:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    4524:	42d1      	cmn	r1, r2
    4526:	d50e      	bpl.n	4546 <usb_get_device_descriptor+0x1ea>
			str_descr_idx += 1U;
    4528:	3601      	adds	r6, #1
    452a:	b2f6      	uxtb	r6, r6
			break;
    452c:	e735      	b.n	439a <usb_get_device_descriptor+0x3e>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    452e:	4649      	mov	r1, r9
    4530:	1ca0      	adds	r0, r4, #2
    4532:	f008 faeb 	bl	cb0c <memcpy>
			if (str_descr_idx) {
    4536:	e7ee      	b.n	4516 <usb_get_device_descriptor+0x1ba>
    4538:	2e00      	cmp	r6, #0
    453a:	d1ec      	bne.n	4516 <usb_get_device_descriptor+0x1ba>
				if (!cfg_descr) {
    453c:	f1b8 0f00 	cmp.w	r8, #0
    4540:	d10a      	bne.n	4558 <usb_get_device_descriptor+0x1fc>
					LOG_ERR("Incomplete device descriptor");
    4542:	4b16      	ldr	r3, [pc, #88]	; (459c <usb_get_device_descriptor+0x240>)
    4544:	e767      	b.n	4416 <usb_get_device_descriptor+0xba>
		buf[i] = 0U;
    4546:	f04f 0000 	mov.w	r0, #0
    454a:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    454e:	f813 0901 	ldrb.w	r0, [r3], #-1
    4552:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    4556:	e7e5      	b.n	4524 <usb_get_device_descriptor+0x1c8>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    4558:	eba4 0308 	sub.w	r3, r4, r8
    455c:	f888 3002 	strb.w	r3, [r8, #2]
	dst[1] = val >> 8;
    4560:	f3c3 2307 	ubfx	r3, r3, #8, #8
    4564:	f888 3003 	strb.w	r3, [r8, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    4568:	f888 a004 	strb.w	sl, [r8, #4]
    456c:	e7dc      	b.n	4528 <usb_get_device_descriptor+0x1cc>
    456e:	bf00      	nop
    4570:	20000340 	.word	0x20000340
    4574:	200003c2 	.word	0x200003c2
    4578:	0000f9cc 	.word	0x0000f9cc
    457c:	0000dc0c 	.word	0x0000dc0c
    4580:	0000fab2 	.word	0x0000fab2
    4584:	200003c4 	.word	0x200003c4
    4588:	200003e8 	.word	0x200003e8
    458c:	0000f9ec 	.word	0x0000f9ec
    4590:	0000fa2d 	.word	0x0000fa2d
    4594:	0000f9bb 	.word	0x0000f9bb
    4598:	0000fa4a 	.word	0x0000fa4a
    459c:	0000fa95 	.word	0x0000fa95

000045a0 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    45a0:	b510      	push	{r4, lr}
    45a2:	4b09      	ldr	r3, [pc, #36]	; (45c8 <usb_ep_get_transfer+0x28>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    45a4:	2100      	movs	r1, #0
    45a6:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    45a8:	781c      	ldrb	r4, [r3, #0]
    45aa:	4284      	cmp	r4, r0
    45ac:	d104      	bne.n	45b8 <usb_ep_get_transfer+0x18>
    45ae:	685c      	ldr	r4, [r3, #4]
    45b0:	b114      	cbz	r4, 45b8 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
    45b2:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
    45b6:	bd10      	pop	{r4, pc}
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    45b8:	3101      	adds	r1, #1
    45ba:	2904      	cmp	r1, #4
    45bc:	f103 0340 	add.w	r3, r3, #64	; 0x40
    45c0:	d1f2      	bne.n	45a8 <usb_ep_get_transfer+0x8>
	return NULL;
    45c2:	2000      	movs	r0, #0
    45c4:	e7f7      	b.n	45b6 <usb_ep_get_transfer+0x16>
    45c6:	bf00      	nop
    45c8:	20000d1c 	.word	0x20000d1c

000045cc <usb_transfer_work>:

	return false;
}

static void usb_transfer_work(struct k_work *item)
{
    45cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    45d0:	b083      	sub	sp, #12
	uint8_t ep;

	trans = CONTAINER_OF(item, struct usb_transfer_data, work);
	ep = trans->ep;

	if (trans->status != -EBUSY) {
    45d2:	f850 3c28 	ldr.w	r3, [r0, #-40]
	ep = trans->ep;
    45d6:	f810 5c2c 	ldrb.w	r5, [r0, #-44]
	if (trans->status != -EBUSY) {
    45da:	3310      	adds	r3, #16
{
    45dc:	af00      	add	r7, sp, #0
    45de:	4604      	mov	r4, r0
	if (trans->status != -EBUSY) {
    45e0:	d111      	bne.n	4606 <usb_transfer_work+0x3a>
		/* transfer cancelled or already completed */
		LOG_DBG("Transfer cancelled or completed, ep 0x%02x", ep);
		goto done;
	}

	if (trans->flags & USB_TRANS_WRITE) {
    45e2:	6903      	ldr	r3, [r0, #16]
		if (!trans->bsize) {
    45e4:	f850 2c20 	ldr.w	r2, [r0, #-32]
	if (trans->flags & USB_TRANS_WRITE) {
    45e8:	f013 0602 	ands.w	r6, r3, #2
    45ec:	d04e      	beq.n	468c <usb_transfer_work+0xc0>
		if (!trans->bsize) {
    45ee:	bb0a      	cbnz	r2, 4634 <usb_transfer_work+0x68>
			if (!(trans->flags & USB_TRANS_NO_ZLP)) {
    45f0:	f013 0304 	ands.w	r3, r3, #4
    45f4:	d104      	bne.n	4600 <usb_transfer_work+0x34>
				LOG_DBG("Transfer ZLP");
				usb_write(ep, NULL, 0, NULL);
    45f6:	461a      	mov	r2, r3
    45f8:	4619      	mov	r1, r3
    45fa:	4628      	mov	r0, r5
    45fc:	f008 fa06 	bl	ca0c <usb_write>
			}
			trans->status = 0;
    4600:	2300      	movs	r3, #0

		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
		if (ret) {
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
			/* transfer error */
			trans->status = -EINVAL;
    4602:	f844 3c28 	str.w	r3, [r4, #-40]
		/* we expect mote data, clear NAK */
		usb_dc_ep_read_continue(ep);
	}

done:
	if (trans->status != -EBUSY && trans->cb) { /* Transfer complete */
    4606:	f854 3c28 	ldr.w	r3, [r4, #-40]
    460a:	3310      	adds	r3, #16
    460c:	d00e      	beq.n	462c <usb_transfer_work+0x60>
    460e:	f854 6c18 	ldr.w	r6, [r4, #-24]
    4612:	b15e      	cbz	r6, 462c <usb_transfer_work+0x60>
		usb_transfer_callback cb = trans->cb;
		int tsize = trans->tsize;
    4614:	f854 8c1c 	ldr.w	r8, [r4, #-28]
		void *priv = trans->priv;
    4618:	f854 9c14 	ldr.w	r9, [r4, #-20]

		if (k_is_in_isr()) {
    461c:	f008 fed8 	bl	d3d0 <k_is_in_isr>
    4620:	2800      	cmp	r0, #0
    4622:	d06f      	beq.n	4704 <usb_transfer_work+0x138>
			/* reschedule completion in thread context */
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4624:	483d      	ldr	r0, [pc, #244]	; (471c <usb_transfer_work+0x150>)
    4626:	4621      	mov	r1, r4
    4628:	f008 ffd0 	bl	d5cc <k_work_submit_to_queue>
		k_sem_give(&trans->sem);

		/* Transfer completion callback */
		cb(ep, tsize, priv);
	}
}
    462c:	370c      	adds	r7, #12
    462e:	46bd      	mov	sp, r7
    4630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		ret = usb_write(ep, trans->buffer, trans->bsize, &bytes);
    4634:	f850 1c24 	ldr.w	r1, [r0, #-36]
    4638:	1d3b      	adds	r3, r7, #4
    463a:	4628      	mov	r0, r5
    463c:	f008 f9e6 	bl	ca0c <usb_write>
		if (ret) {
    4640:	b198      	cbz	r0, 466a <usb_transfer_work+0x9e>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    4642:	466e      	mov	r6, sp
    4644:	b088      	sub	sp, #32
    4646:	466a      	mov	r2, sp
    4648:	4b35      	ldr	r3, [pc, #212]	; (4720 <usb_transfer_work+0x154>)
    464a:	61d5      	str	r5, [r2, #28]
    464c:	e9c2 3005 	strd	r3, r0, [r2, #20]
    4650:	2304      	movs	r3, #4
    4652:	f842 3f10 	str.w	r3, [r2, #16]!
    4656:	4833      	ldr	r0, [pc, #204]	; (4724 <usb_transfer_work+0x158>)
    4658:	2300      	movs	r3, #0
    465a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    465e:	f7fe fd0f 	bl	3080 <z_impl_z_log_msg_static_create>
    4662:	46b5      	mov	sp, r6
			trans->status = -EINVAL;
    4664:	f06f 0315 	mvn.w	r3, #21
    4668:	e7cb      	b.n	4602 <usb_transfer_work+0x36>
		trans->buffer += bytes;
    466a:	687a      	ldr	r2, [r7, #4]
    466c:	f854 3c24 	ldr.w	r3, [r4, #-36]
    4670:	4413      	add	r3, r2
    4672:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    4676:	f854 3c20 	ldr.w	r3, [r4, #-32]
    467a:	1a9b      	subs	r3, r3, r2
    467c:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    4680:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    4684:	4413      	add	r3, r2
    4686:	f844 3c1c 	str.w	r3, [r4, #-28]
    468a:	e7bc      	b.n	4606 <usb_transfer_work+0x3a>
		ret = usb_dc_ep_read_wait(ep, trans->buffer, trans->bsize,
    468c:	f850 1c24 	ldr.w	r1, [r0, #-36]
    4690:	1d3b      	adds	r3, r7, #4
    4692:	4628      	mov	r0, r5
    4694:	f001 febe 	bl	6414 <usb_dc_ep_read_wait>
		if (ret) {
    4698:	b188      	cbz	r0, 46be <usb_transfer_work+0xf2>
			LOG_ERR("Transfer error %d, ep 0x%02x", ret, ep);
    469a:	46e8      	mov	r8, sp
    469c:	b088      	sub	sp, #32
    469e:	466a      	mov	r2, sp
    46a0:	4b1f      	ldr	r3, [pc, #124]	; (4720 <usb_transfer_work+0x154>)
    46a2:	61d5      	str	r5, [r2, #28]
    46a4:	e9c2 3005 	strd	r3, r0, [r2, #20]
    46a8:	2304      	movs	r3, #4
    46aa:	f842 3f10 	str.w	r3, [r2, #16]!
    46ae:	481d      	ldr	r0, [pc, #116]	; (4724 <usb_transfer_work+0x158>)
    46b0:	4633      	mov	r3, r6
    46b2:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    46b6:	f7fe fce3 	bl	3080 <z_impl_z_log_msg_static_create>
    46ba:	46c5      	mov	sp, r8
			trans->status = -EINVAL;
    46bc:	e7d2      	b.n	4664 <usb_transfer_work+0x98>
		trans->buffer += bytes;
    46be:	687e      	ldr	r6, [r7, #4]
    46c0:	f854 3c24 	ldr.w	r3, [r4, #-36]
    46c4:	4433      	add	r3, r6
    46c6:	f844 3c24 	str.w	r3, [r4, #-36]
		trans->bsize -= bytes;
    46ca:	f854 3c20 	ldr.w	r3, [r4, #-32]
    46ce:	1b9b      	subs	r3, r3, r6
    46d0:	f844 3c20 	str.w	r3, [r4, #-32]
		trans->tsize += bytes;
    46d4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    46d8:	4433      	add	r3, r6
    46da:	f844 3c1c 	str.w	r3, [r4, #-28]
		if (!bytes || (bytes % usb_dc_ep_mps(ep)) || !trans->bsize) {
    46de:	2e00      	cmp	r6, #0
    46e0:	d08e      	beq.n	4600 <usb_transfer_work+0x34>
    46e2:	4628      	mov	r0, r5
    46e4:	f001 ff6e 	bl	65c4 <usb_dc_ep_mps>
    46e8:	fbb6 f3f0 	udiv	r3, r6, r0
    46ec:	fb03 6610 	mls	r6, r3, r0, r6
    46f0:	2e00      	cmp	r6, #0
    46f2:	d185      	bne.n	4600 <usb_transfer_work+0x34>
    46f4:	f854 3c20 	ldr.w	r3, [r4, #-32]
    46f8:	2b00      	cmp	r3, #0
    46fa:	d081      	beq.n	4600 <usb_transfer_work+0x34>
		usb_dc_ep_read_continue(ep);
    46fc:	4628      	mov	r0, r5
    46fe:	f001 feef 	bl	64e0 <usb_dc_ep_read_continue>
    4702:	e780      	b.n	4606 <usb_transfer_work+0x3a>
		trans->cb = NULL;
    4704:	f844 0c18 	str.w	r0, [r4, #-24]
	z_impl_k_sem_give(sem);
    4708:	f1a4 0010 	sub.w	r0, r4, #16
    470c:	f006 fad8 	bl	acc0 <z_impl_k_sem_give>
		cb(ep, tsize, priv);
    4710:	464a      	mov	r2, r9
    4712:	4641      	mov	r1, r8
    4714:	4628      	mov	r0, r5
    4716:	47b0      	blx	r6
    4718:	e788      	b.n	462c <usb_transfer_work+0x60>
    471a:	bf00      	nop
    471c:	20000ac0 	.word	0x20000ac0
    4720:	0000fae0 	.word	0x0000fae0
    4724:	0000dc2c 	.word	0x0000dc2c

00004728 <usb_cancel_transfer>:
	irq_unlock(key);
	return ret;
}

void usb_cancel_transfer(uint8_t ep)
{
    4728:	b510      	push	{r4, lr}
	__asm__ volatile(
    472a:	f04f 0340 	mov.w	r3, #64	; 0x40
    472e:	f3ef 8411 	mrs	r4, BASEPRI
    4732:	f383 8812 	msr	BASEPRI_MAX, r3
    4736:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    473a:	f7ff ff31 	bl	45a0 <usb_ep_get_transfer>
	if (!trans) {
    473e:	b150      	cbz	r0, 4756 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    4740:	6843      	ldr	r3, [r0, #4]
    4742:	3310      	adds	r3, #16
    4744:	d107      	bne.n	4756 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    4746:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    474a:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    474c:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    4750:	4803      	ldr	r0, [pc, #12]	; (4760 <usb_cancel_transfer+0x38>)
    4752:	f008 ff3b 	bl	d5cc <k_work_submit_to_queue>
	__asm__ volatile(
    4756:	f384 8811 	msr	BASEPRI, r4
    475a:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    475e:	bd10      	pop	{r4, pc}
    4760:	20000ac0 	.word	0x20000ac0

00004764 <usb_cancel_transfers>:

void usb_cancel_transfers(void)
{
    4764:	b570      	push	{r4, r5, r6, lr}
    4766:	4c0f      	ldr	r4, [pc, #60]	; (47a4 <usb_cancel_transfers+0x40>)
    4768:	2504      	movs	r5, #4
	__asm__ volatile(
    476a:	f04f 0340 	mov.w	r3, #64	; 0x40
    476e:	f3ef 8611 	mrs	r6, BASEPRI
    4772:	f383 8812 	msr	BASEPRI_MAX, r3
    4776:	f3bf 8f6f 	isb	sy
		struct usb_transfer_data *trans = &ut_data[i];
		unsigned int key;

		key = irq_lock();

		if (trans->status == -EBUSY) {
    477a:	6863      	ldr	r3, [r4, #4]
    477c:	3310      	adds	r3, #16
    477e:	d107      	bne.n	4790 <usb_cancel_transfers+0x2c>
			trans->status = -ECANCELED;
    4780:	f06f 038b 	mvn.w	r3, #139	; 0x8b
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4784:	4808      	ldr	r0, [pc, #32]	; (47a8 <usb_cancel_transfers+0x44>)
			trans->status = -ECANCELED;
    4786:	6063      	str	r3, [r4, #4]
			k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    4788:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    478c:	f008 ff1e 	bl	d5cc <k_work_submit_to_queue>
	__asm__ volatile(
    4790:	f386 8811 	msr	BASEPRI, r6
    4794:	f3bf 8f6f 	isb	sy
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    4798:	3d01      	subs	r5, #1
    479a:	f104 0440 	add.w	r4, r4, #64	; 0x40
    479e:	d1e4      	bne.n	476a <usb_cancel_transfers+0x6>
			LOG_DBG("Cancel transfer for ep: 0x%02x", trans->ep);
		}

		irq_unlock(key);
	}
}
    47a0:	bd70      	pop	{r4, r5, r6, pc}
    47a2:	bf00      	nop
    47a4:	20000d1c 	.word	0x20000d1c
    47a8:	20000ac0 	.word	0x20000ac0

000047ac <usb_transfer_init>:
	return pdata.tsize;
}

/* Init transfer slots */
int usb_transfer_init(void)
{
    47ac:	b570      	push	{r4, r5, r6, lr}
    47ae:	4c0a      	ldr	r4, [pc, #40]	; (47d8 <usb_transfer_init+0x2c>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
		k_work_init(&ut_data[i].work, usb_transfer_work);
    47b0:	4e0a      	ldr	r6, [pc, #40]	; (47dc <usb_transfer_init+0x30>)
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    47b2:	2500      	movs	r5, #0
		k_work_init(&ut_data[i].work, usb_transfer_work);
    47b4:	4631      	mov	r1, r6
    47b6:	4620      	mov	r0, r4
    47b8:	f008 feeb 	bl	d592 <k_work_init>
	return z_impl_k_sem_init(sem, initial_count, limit);
    47bc:	2201      	movs	r2, #1
    47be:	f1a4 0010 	sub.w	r0, r4, #16
    47c2:	4611      	mov	r1, r2
	for (size_t i = 0; i < ARRAY_SIZE(ut_data); i++) {
    47c4:	3501      	adds	r5, #1
    47c6:	f008 fea7 	bl	d518 <z_impl_k_sem_init>
    47ca:	2d04      	cmp	r5, #4
    47cc:	f104 0440 	add.w	r4, r4, #64	; 0x40
    47d0:	d1f0      	bne.n	47b4 <usb_transfer_init+0x8>
		k_sem_init(&ut_data[i].sem, 1, 1);
	}

	return 0;
}
    47d2:	2000      	movs	r0, #0
    47d4:	bd70      	pop	{r4, r5, r6, pc}
    47d6:	bf00      	nop
    47d8:	20000d48 	.word	0x20000d48
    47dc:	000045cd 	.word	0x000045cd

000047e0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    47e0:	4901      	ldr	r1, [pc, #4]	; (47e8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    47e2:	2210      	movs	r2, #16
	str	r2, [r1]
    47e4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    47e6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    47e8:	e000ed10 	.word	0xe000ed10

000047ec <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    47ec:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    47ee:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    47f0:	f380 8811 	msr	BASEPRI, r0
	isb
    47f4:	f3bf 8f6f 	isb	sy
	 * (i.e. if the caller sets _kernel.idle).
	 */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */

	/* Enter low power state */
	_sleep_if_allowed wfi
    47f8:	f3bf 8f4f 	dsb	sy
    47fc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    47fe:	b662      	cpsie	i
	isb
    4800:	f3bf 8f6f 	isb	sy

	bx	lr
    4804:	4770      	bx	lr
    4806:	bf00      	nop

00004808 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    4808:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    480c:	4681      	mov	r9, r0
    480e:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    4810:	460c      	mov	r4, r1
    4812:	2900      	cmp	r1, #0
    4814:	d04c      	beq.n	48b0 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    4816:	466e      	mov	r6, sp
    4818:	b08a      	sub	sp, #40	; 0x28
    481a:	e9d1 1200 	ldrd	r1, r2, [r1]
    481e:	68a3      	ldr	r3, [r4, #8]
    4820:	466d      	mov	r5, sp
    4822:	4827      	ldr	r0, [pc, #156]	; (48c0 <z_arm_fatal_error+0xb8>)
    4824:	46a8      	mov	r8, r5
    4826:	f04f 0a05 	mov.w	sl, #5
    482a:	e9c5 0105 	strd	r0, r1, [r5, #20]
    482e:	e9c5 2307 	strd	r2, r3, [r5, #28]
    4832:	f848 af10 	str.w	sl, [r8, #16]!
    4836:	4823      	ldr	r0, [pc, #140]	; (48c4 <z_arm_fatal_error+0xbc>)
    4838:	4642      	mov	r2, r8
    483a:	2300      	movs	r3, #0
    483c:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    4840:	f7fe fc1e 	bl	3080 <z_impl_z_log_msg_static_create>
    4844:	46b5      	mov	sp, r6
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    4846:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    484a:	6963      	ldr	r3, [r4, #20]
    484c:	46ad      	mov	sp, r5
    484e:	481e      	ldr	r0, [pc, #120]	; (48c8 <z_arm_fatal_error+0xc0>)
    4850:	f8c5 a010 	str.w	sl, [r5, #16]
    4854:	e9c5 0105 	strd	r0, r1, [r5, #20]
    4858:	e9c5 2307 	strd	r2, r3, [r5, #28]
    485c:	4819      	ldr	r0, [pc, #100]	; (48c4 <z_arm_fatal_error+0xbc>)
    485e:	2300      	movs	r3, #0
    4860:	4642      	mov	r2, r8
    4862:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    4866:	f7fe fc0b 	bl	3080 <z_impl_z_log_msg_static_create>
    486a:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    486c:	b088      	sub	sp, #32
    486e:	69e3      	ldr	r3, [r4, #28]
    4870:	466d      	mov	r5, sp
    4872:	4a16      	ldr	r2, [pc, #88]	; (48cc <z_arm_fatal_error+0xc4>)
    4874:	46a8      	mov	r8, r5
    4876:	f04f 0a03 	mov.w	sl, #3
    487a:	e9c5 2305 	strd	r2, r3, [r5, #20]
    487e:	f848 af10 	str.w	sl, [r8, #16]!
    4882:	4810      	ldr	r0, [pc, #64]	; (48c4 <z_arm_fatal_error+0xbc>)
    4884:	2300      	movs	r3, #0
    4886:	4642      	mov	r2, r8
    4888:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    488c:	f7fe fbf8 	bl	3080 <z_impl_z_log_msg_static_create>
    4890:	46b5      	mov	sp, r6
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    4892:	69a3      	ldr	r3, [r4, #24]
    4894:	46ad      	mov	sp, r5
    4896:	4a0e      	ldr	r2, [pc, #56]	; (48d0 <z_arm_fatal_error+0xc8>)
    4898:	f8c5 a010 	str.w	sl, [r5, #16]
    489c:	e9c5 2305 	strd	r2, r3, [r5, #20]
    48a0:	4808      	ldr	r0, [pc, #32]	; (48c4 <z_arm_fatal_error+0xbc>)
    48a2:	2300      	movs	r3, #0
    48a4:	4642      	mov	r2, r8
    48a6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    48aa:	f7fe fbe9 	bl	3080 <z_impl_z_log_msg_static_create>
    48ae:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    48b0:	4621      	mov	r1, r4
    48b2:	4648      	mov	r0, r9
    48b4:	f005 fe96 	bl	a5e4 <z_fatal_error>
}
    48b8:	46bd      	mov	sp, r7
    48ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    48be:	bf00      	nop
    48c0:	0000fb0a 	.word	0x0000fb0a
    48c4:	0000dbd4 	.word	0x0000dbd4
    48c8:	0000fb39 	.word	0x0000fb39
    48cc:	0000fb68 	.word	0x0000fb68
    48d0:	0000fb77 	.word	0x0000fb77

000048d4 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    48d4:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    48d6:	2800      	cmp	r0, #0
    48d8:	db07      	blt.n	48ea <arch_irq_enable+0x16>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    48da:	4a04      	ldr	r2, [pc, #16]	; (48ec <arch_irq_enable+0x18>)
    48dc:	0941      	lsrs	r1, r0, #5
    48de:	2301      	movs	r3, #1
    48e0:	f000 001f 	and.w	r0, r0, #31
    48e4:	4083      	lsls	r3, r0
    48e6:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
}
    48ea:	4770      	bx	lr
    48ec:	e000e100 	.word	0xe000e100

000048f0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    48f0:	b240      	sxtb	r0, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    48f2:	2800      	cmp	r0, #0
    48f4:	db0c      	blt.n	4910 <arch_irq_disable+0x20>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    48f6:	0943      	lsrs	r3, r0, #5
    48f8:	4906      	ldr	r1, [pc, #24]	; (4914 <arch_irq_disable+0x24>)
    48fa:	f000 001f 	and.w	r0, r0, #31
    48fe:	3320      	adds	r3, #32
    4900:	2201      	movs	r2, #1
    4902:	4082      	lsls	r2, r0
    4904:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    4908:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    490c:	f3bf 8f6f 	isb	sy
}
    4910:	4770      	bx	lr
    4912:	bf00      	nop
    4914:	e000e100 	.word	0xe000e100

00004918 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    4918:	4b05      	ldr	r3, [pc, #20]	; (4930 <arch_irq_is_enabled+0x18>)
    491a:	0942      	lsrs	r2, r0, #5
    491c:	f000 001f 	and.w	r0, r0, #31
    4920:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    4924:	2301      	movs	r3, #1
    4926:	fa03 f000 	lsl.w	r0, r3, r0
}
    492a:	4010      	ands	r0, r2
    492c:	4770      	bx	lr
    492e:	bf00      	nop
    4930:	e000e100 	.word	0xe000e100

00004934 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    4934:	b240      	sxtb	r0, r0
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
    4936:	07d3      	lsls	r3, r2, #31
		prio += _IRQ_PRIO_OFFSET;
    4938:	bf54      	ite	pl
    493a:	3102      	addpl	r1, #2
			prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
    493c:	2100      	movmi	r1, #0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    493e:	2800      	cmp	r0, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4940:	bfac      	ite	ge
    4942:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4946:	4a07      	ldrlt	r2, [pc, #28]	; (4964 <z_arm_irq_priority_set+0x30>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4948:	ea4f 1341 	mov.w	r3, r1, lsl #5
    494c:	bfac      	ite	ge
    494e:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4952:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4956:	b2db      	uxtb	r3, r3
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    4958:	bfb4      	ite	lt
    495a:	5413      	strblt	r3, [r2, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    495c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
}
    4960:	4770      	bx	lr
    4962:	bf00      	nop
    4964:	e000ed14 	.word	0xe000ed14

00004968 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    4968:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    496a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    496c:	4b04      	ldr	r3, [pc, #16]	; (4980 <_arch_isr_direct_pm+0x18>)
    496e:	695a      	ldr	r2, [r3, #20]
    4970:	b11a      	cbz	r2, 497a <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    4972:	2200      	movs	r2, #0
    4974:	615a      	str	r2, [r3, #20]
		z_pm_save_idle_exit();
    4976:	f008 fd38 	bl	d3ea <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    497a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    497c:	bd08      	pop	{r3, pc}
    497e:	bf00      	nop
    4980:	20001bcc 	.word	0x20001bcc

00004984 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    4984:	bf30      	wfi
    b z_SysNmiOnReset
    4986:	f7ff bffd 	b.w	4984 <z_SysNmiOnReset>
    498a:	bf00      	nop

0000498c <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    498c:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    498e:	4b08      	ldr	r3, [pc, #32]	; (49b0 <z_arm_prep_c+0x24>)
    4990:	4a08      	ldr	r2, [pc, #32]	; (49b4 <z_arm_prep_c+0x28>)
    4992:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    4996:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    4998:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    499c:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    49a0:	f005 fedc 	bl	a75c <z_bss_zero>
	z_data_copy();
    49a4:	f006 feba 	bl	b71c <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    49a8:	f000 fbaa 	bl	5100 <z_arm_interrupt_init>
	z_cstart();
    49ac:	f005 ff1a 	bl	a7e4 <z_cstart>
    49b0:	00000000 	.word	0x00000000
    49b4:	e000ed00 	.word	0xe000ed00

000049b8 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    49b8:	4a09      	ldr	r2, [pc, #36]	; (49e0 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    49ba:	490a      	ldr	r1, [pc, #40]	; (49e4 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    49bc:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    49be:	6809      	ldr	r1, [r1, #0]
    49c0:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    49c2:	4909      	ldr	r1, [pc, #36]	; (49e8 <arch_swap+0x30>)
	_current->arch.basepri = key;
    49c4:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    49c6:	684b      	ldr	r3, [r1, #4]
    49c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    49cc:	604b      	str	r3, [r1, #4]
    49ce:	2300      	movs	r3, #0
    49d0:	f383 8811 	msr	BASEPRI, r3
    49d4:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    49d8:	6893      	ldr	r3, [r2, #8]
}
    49da:	6f98      	ldr	r0, [r3, #120]	; 0x78
    49dc:	4770      	bx	lr
    49de:	bf00      	nop
    49e0:	20001bcc 	.word	0x20001bcc
    49e4:	0000defc 	.word	0x0000defc
    49e8:	e000ed00 	.word	0xe000ed00

000049ec <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    49ec:	4912      	ldr	r1, [pc, #72]	; (4a38 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    49ee:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    49f0:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    49f4:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    49f6:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    49fa:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    49fe:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI_MAX, r0
    4a00:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    4a04:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    4a08:	4f0c      	ldr	r7, [pc, #48]	; (4a3c <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    4a0a:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    4a0e:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
    4a10:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    4a12:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    4a14:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    4a16:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    4a18:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    4a1a:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    4a1e:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    4a20:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    4a22:	f000 fc09 	bl	5238 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    4a26:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    4a2a:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    4a2e:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    4a32:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    4a36:	4770      	bx	lr
    ldr r1, =_kernel
    4a38:	20001bcc 	.word	0x20001bcc
    ldr v4, =_SCS_ICSR
    4a3c:	e000ed04 	.word	0xe000ed04

00004a40 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    4a40:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    4a44:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    4a46:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    4a4a:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    4a4e:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    4a50:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    4a54:	2902      	cmp	r1, #2
    beq _oops
    4a56:	d0ff      	beq.n	4a58 <_oops>

00004a58 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    4a58:	b501      	push	{r0, lr}
    push {r1, r2}
    push {r4-r11}
    mov  r1, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    bl z_do_kernel_oops
    4a5a:	f008 f81f 	bl	ca9c <z_do_kernel_oops>
     * the MSP to its value prior to entering the function
     */
    add sp, #40
#endif /* CONFIG_ARMV7_M_ARMV8_M_MAINLINE */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
    pop {r0, pc}
    4a5e:	bd01      	pop	{r0, pc}

00004a60 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    4a60:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    4a64:	9b00      	ldr	r3, [sp, #0]
    4a66:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    4a6a:	490a      	ldr	r1, [pc, #40]	; (4a94 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    4a6c:	9b01      	ldr	r3, [sp, #4]
    4a6e:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    4a72:	9b02      	ldr	r3, [sp, #8]
    4a74:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    4a78:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    4a7c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    4a80:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    4a84:	f842 1c08 	str.w	r1, [r2, #-8]
		((uintptr_t)iframe - sizeof(struct __fpu_sf));
	memset(iframe, 0, sizeof(struct __fpu_sf));
#endif

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    4a88:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    4a8a:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    4a8c:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    4a8e:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    4a90:	4770      	bx	lr
    4a92:	bf00      	nop
    4a94:	0000bd2b 	.word	0x0000bd2b

00004a98 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    4a98:	4a09      	ldr	r2, [pc, #36]	; (4ac0 <z_check_thread_stack_fail+0x28>)
{
    4a9a:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    4a9c:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    4a9e:	b170      	cbz	r0, 4abe <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    4aa0:	f113 0f16 	cmn.w	r3, #22
    4aa4:	6e40      	ldr	r0, [r0, #100]	; 0x64
    4aa6:	d005      	beq.n	4ab4 <z_check_thread_stack_fail+0x1c>
    4aa8:	f1a0 0240 	sub.w	r2, r0, #64	; 0x40
    4aac:	429a      	cmp	r2, r3
    4aae:	d805      	bhi.n	4abc <z_check_thread_stack_fail+0x24>
    4ab0:	4283      	cmp	r3, r0
    4ab2:	d203      	bcs.n	4abc <z_check_thread_stack_fail+0x24>
		return 0;
    4ab4:	4281      	cmp	r1, r0
    4ab6:	bf28      	it	cs
    4ab8:	2000      	movcs	r0, #0
    4aba:	4770      	bx	lr
    4abc:	2000      	movs	r0, #0
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
}
    4abe:	4770      	bx	lr
    4ac0:	20001bcc 	.word	0x20001bcc

00004ac4 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    4ac4:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    4ac6:	4b09      	ldr	r3, [pc, #36]	; (4aec <arch_switch_to_main_thread+0x28>)
{
    4ac8:	460d      	mov	r5, r1
    4aca:	4614      	mov	r4, r2
	_current = main_thread;
    4acc:	6098      	str	r0, [r3, #8]
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    4ace:	f000 fbb3 	bl	5238 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    4ad2:	4620      	mov	r0, r4
    4ad4:	f385 8809 	msr	PSP, r5
    4ad8:	2100      	movs	r1, #0
    4ada:	b663      	cpsie	if
    4adc:	f381 8811 	msr	BASEPRI, r1
    4ae0:	f3bf 8f6f 	isb	sy
    4ae4:	2200      	movs	r2, #0
    4ae6:	2300      	movs	r3, #0
    4ae8:	f007 f91f 	bl	bd2a <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    4aec:	20001bcc 	.word	0x20001bcc

00004af0 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    4af0:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    4af2:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    4af4:	4a0b      	ldr	r2, [pc, #44]	; (4b24 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    4af6:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
    4af8:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    4afa:	bf1e      	ittt	ne
	movne	r1, #0
    4afc:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    4afe:	6151      	strne	r1, [r2, #20]
		blne	z_pm_save_idle_exit
    4b00:	f008 fc73 	blne	d3ea <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    4b04:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    4b06:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    4b0a:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    4b0e:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    4b12:	4905      	ldr	r1, [pc, #20]	; (4b28 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    4b14:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    4b16:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    4b18:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    4b1a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    4b1e:	4903      	ldr	r1, [pc, #12]	; (4b2c <_isr_wrapper+0x3c>)
	bx r1
    4b20:	4708      	bx	r1
    4b22:	0000      	.short	0x0000
	ldr r2, =_kernel
    4b24:	20001bcc 	.word	0x20001bcc
	ldr r1, =_sw_isr_table
    4b28:	20000144 	.word	0x20000144
	ldr r1, =z_arm_int_exit
    4b2c:	00004b31 	.word	0x00004b31

00004b30 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    4b30:	4b04      	ldr	r3, [pc, #16]	; (4b44 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    4b32:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    4b34:	6998      	ldr	r0, [r3, #24]
	cmp r0, r1
    4b36:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    4b38:	d003      	beq.n	4b42 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    4b3a:	4903      	ldr	r1, [pc, #12]	; (4b48 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    4b3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    4b40:	600a      	str	r2, [r1, #0]

00004b42 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    4b42:	4770      	bx	lr
	ldr r3, =_kernel
    4b44:	20001bcc 	.word	0x20001bcc
	ldr r1, =_SCS_ICSR
    4b48:	e000ed04 	.word	0xe000ed04

00004b4c <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    4b4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4b50:	b086      	sub	sp, #24
    4b52:	4606      	mov	r6, r0
    4b54:	af00      	add	r7, sp, #0
    4b56:	460d      	mov	r5, r1
{
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;

	PR_FAULT_INFO("***** BUS FAULT *****");
    4b58:	4b3f      	ldr	r3, [pc, #252]	; (4c58 <bus_fault.constprop.0+0x10c>)
    4b5a:	617b      	str	r3, [r7, #20]
    4b5c:	2402      	movs	r4, #2
    4b5e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4b62:	483e      	ldr	r0, [pc, #248]	; (4c5c <bus_fault.constprop.0+0x110>)
    4b64:	613c      	str	r4, [r7, #16]
    4b66:	f107 0210 	add.w	r2, r7, #16
    4b6a:	f007 ffa6 	bl	caba <z_log_msg_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    4b6e:	4b3c      	ldr	r3, [pc, #240]	; (4c60 <bus_fault.constprop.0+0x114>)
    4b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4b72:	04d9      	lsls	r1, r3, #19
    4b74:	d56d      	bpl.n	4c52 <bus_fault.constprop.0+0x106>
		reason = K_ERR_ARM_BUS_STACKING;
		PR_FAULT_INFO("  Stacking error");
    4b76:	4b3b      	ldr	r3, [pc, #236]	; (4c64 <bus_fault.constprop.0+0x118>)
    4b78:	4838      	ldr	r0, [pc, #224]	; (4c5c <bus_fault.constprop.0+0x110>)
    4b7a:	e9c7 4304 	strd	r4, r3, [r7, #16]
    4b7e:	f107 0210 	add.w	r2, r7, #16
    4b82:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4b86:	f007 ff98 	bl	caba <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_STACKING;
    4b8a:	2017      	movs	r0, #23
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    4b8c:	4b34      	ldr	r3, [pc, #208]	; (4c60 <bus_fault.constprop.0+0x114>)
    4b8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4b90:	051a      	lsls	r2, r3, #20
    4b92:	d50b      	bpl.n	4bac <bus_fault.constprop.0+0x60>
		reason = K_ERR_ARM_BUS_UNSTACKING;
		PR_FAULT_INFO("  Unstacking error");
    4b94:	4b34      	ldr	r3, [pc, #208]	; (4c68 <bus_fault.constprop.0+0x11c>)
    4b96:	617b      	str	r3, [r7, #20]
    4b98:	2302      	movs	r3, #2
    4b9a:	4830      	ldr	r0, [pc, #192]	; (4c5c <bus_fault.constprop.0+0x110>)
    4b9c:	613b      	str	r3, [r7, #16]
    4b9e:	f107 0210 	add.w	r2, r7, #16
    4ba2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4ba6:	f007 ff88 	bl	caba <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_UNSTACKING;
    4baa:	2018      	movs	r0, #24
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    4bac:	4c2c      	ldr	r4, [pc, #176]	; (4c60 <bus_fault.constprop.0+0x114>)
    4bae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4bb0:	059b      	lsls	r3, r3, #22
    4bb2:	d523      	bpl.n	4bfc <bus_fault.constprop.0+0xb0>
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
		PR_FAULT_INFO("  Precise data bus error");
    4bb4:	46e8      	mov	r8, sp
    4bb6:	4b2d      	ldr	r3, [pc, #180]	; (4c6c <bus_fault.constprop.0+0x120>)
    4bb8:	617b      	str	r3, [r7, #20]
    4bba:	2302      	movs	r3, #2
    4bbc:	613b      	str	r3, [r7, #16]
    4bbe:	f107 0210 	add.w	r2, r7, #16
    4bc2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4bc6:	4825      	ldr	r0, [pc, #148]	; (4c5c <bus_fault.constprop.0+0x110>)
    4bc8:	f007 ff77 	bl	caba <z_log_msg_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    4bcc:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    4bce:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    4bd0:	0411      	lsls	r1, r2, #16
    4bd2:	d512      	bpl.n	4bfa <bus_fault.constprop.0+0xae>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    4bd4:	b088      	sub	sp, #32
    4bd6:	466a      	mov	r2, sp
    4bd8:	4925      	ldr	r1, [pc, #148]	; (4c70 <bus_fault.constprop.0+0x124>)
    4bda:	4820      	ldr	r0, [pc, #128]	; (4c5c <bus_fault.constprop.0+0x110>)
    4bdc:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4be0:	2303      	movs	r3, #3
    4be2:	f842 3f10 	str.w	r3, [r2, #16]!
    4be6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4bea:	f007 ff66 	bl	caba <z_log_msg_static_create.constprop.0>
    4bee:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    4bf0:	b11e      	cbz	r6, 4bfa <bus_fault.constprop.0+0xae>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    4bf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4bf4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    4bf8:	62a3      	str	r3, [r4, #40]	; 0x28
		reason = K_ERR_ARM_BUS_PRECISE_DATA_BUS;
    4bfa:	2019      	movs	r0, #25
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    4bfc:	4b18      	ldr	r3, [pc, #96]	; (4c60 <bus_fault.constprop.0+0x114>)
    4bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c00:	055a      	lsls	r2, r3, #21
    4c02:	d50b      	bpl.n	4c1c <bus_fault.constprop.0+0xd0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
		PR_FAULT_INFO("  Imprecise data bus error");
    4c04:	4b1b      	ldr	r3, [pc, #108]	; (4c74 <bus_fault.constprop.0+0x128>)
    4c06:	617b      	str	r3, [r7, #20]
    4c08:	2302      	movs	r3, #2
    4c0a:	4814      	ldr	r0, [pc, #80]	; (4c5c <bus_fault.constprop.0+0x110>)
    4c0c:	613b      	str	r3, [r7, #16]
    4c0e:	f107 0210 	add.w	r2, r7, #16
    4c12:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4c16:	f007 ff50 	bl	caba <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_IMPRECISE_DATA_BUS;
    4c1a:	201a      	movs	r0, #26
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    4c1c:	4b10      	ldr	r3, [pc, #64]	; (4c60 <bus_fault.constprop.0+0x114>)
    4c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c20:	05db      	lsls	r3, r3, #23
    4c22:	d50b      	bpl.n	4c3c <bus_fault.constprop.0+0xf0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
		PR_FAULT_INFO("  Instruction bus error");
    4c24:	4b14      	ldr	r3, [pc, #80]	; (4c78 <bus_fault.constprop.0+0x12c>)
    4c26:	617b      	str	r3, [r7, #20]
    4c28:	2302      	movs	r3, #2
    4c2a:	480c      	ldr	r0, [pc, #48]	; (4c5c <bus_fault.constprop.0+0x110>)
    4c2c:	613b      	str	r3, [r7, #16]
    4c2e:	f107 0210 	add.w	r2, r7, #16
    4c32:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4c36:	f007 ff40 	bl	caba <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_BUS_INSTRUCTION_BUS;
    4c3a:	201b      	movs	r0, #27
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    4c3c:	4a08      	ldr	r2, [pc, #32]	; (4c60 <bus_fault.constprop.0+0x114>)
    4c3e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4c40:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    4c44:	6293      	str	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);

	return reason;
}
    4c46:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    4c48:	2300      	movs	r3, #0
    4c4a:	702b      	strb	r3, [r5, #0]
}
    4c4c:	46bd      	mov	sp, r7
    4c4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	uint32_t reason = K_ERR_ARM_BUS_GENERIC;
    4c52:	2016      	movs	r0, #22
    4c54:	e79a      	b.n	4b8c <bus_fault.constprop.0+0x40>
    4c56:	bf00      	nop
    4c58:	0000fba5 	.word	0x0000fba5
    4c5c:	0000dbd4 	.word	0x0000dbd4
    4c60:	e000ed00 	.word	0xe000ed00
    4c64:	0000fbbb 	.word	0x0000fbbb
    4c68:	0000fbcc 	.word	0x0000fbcc
    4c6c:	0000fbdf 	.word	0x0000fbdf
    4c70:	0000fbf8 	.word	0x0000fbf8
    4c74:	0000fc0d 	.word	0x0000fc0d
    4c78:	0000fc28 	.word	0x0000fc28

00004c7c <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    4c7c:	b510      	push	{r4, lr}
    4c7e:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    4c80:	4b36      	ldr	r3, [pc, #216]	; (4d5c <usage_fault.constprop.0+0xe0>)
    4c82:	4837      	ldr	r0, [pc, #220]	; (4d60 <usage_fault.constprop.0+0xe4>)
    4c84:	9305      	str	r3, [sp, #20]
    4c86:	aa04      	add	r2, sp, #16
    4c88:	2402      	movs	r4, #2
    4c8a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4c8e:	9404      	str	r4, [sp, #16]
    4c90:	f007 ff13 	bl	caba <z_log_msg_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    4c94:	4b33      	ldr	r3, [pc, #204]	; (4d64 <usage_fault.constprop.0+0xe8>)
    4c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4c98:	019a      	lsls	r2, r3, #6
    4c9a:	d55d      	bpl.n	4d58 <usage_fault.constprop.0+0xdc>
		reason = K_ERR_ARM_USAGE_DIV_0;
		PR_FAULT_INFO("  Division by zero");
    4c9c:	4b32      	ldr	r3, [pc, #200]	; (4d68 <usage_fault.constprop.0+0xec>)
    4c9e:	4830      	ldr	r0, [pc, #192]	; (4d60 <usage_fault.constprop.0+0xe4>)
    4ca0:	aa04      	add	r2, sp, #16
    4ca2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4ca6:	e9cd 4304 	strd	r4, r3, [sp, #16]
    4caa:	f007 ff06 	bl	caba <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_DIV_0;
    4cae:	201e      	movs	r0, #30
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    4cb0:	4b2c      	ldr	r3, [pc, #176]	; (4d64 <usage_fault.constprop.0+0xe8>)
    4cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4cb4:	01db      	lsls	r3, r3, #7
    4cb6:	d50a      	bpl.n	4cce <usage_fault.constprop.0+0x52>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
		PR_FAULT_INFO("  Unaligned memory access");
    4cb8:	4b2c      	ldr	r3, [pc, #176]	; (4d6c <usage_fault.constprop.0+0xf0>)
    4cba:	4829      	ldr	r0, [pc, #164]	; (4d60 <usage_fault.constprop.0+0xe4>)
    4cbc:	9305      	str	r3, [sp, #20]
    4cbe:	aa04      	add	r2, sp, #16
    4cc0:	2302      	movs	r3, #2
    4cc2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4cc6:	9304      	str	r3, [sp, #16]
    4cc8:	f007 fef7 	bl	caba <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNALIGNED_ACCESS;
    4ccc:	201f      	movs	r0, #31
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    4cce:	4b25      	ldr	r3, [pc, #148]	; (4d64 <usage_fault.constprop.0+0xe8>)
    4cd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4cd2:	031c      	lsls	r4, r3, #12
    4cd4:	d50a      	bpl.n	4cec <usage_fault.constprop.0+0x70>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
		PR_FAULT_INFO("  No coprocessor instructions");
    4cd6:	4b26      	ldr	r3, [pc, #152]	; (4d70 <usage_fault.constprop.0+0xf4>)
    4cd8:	4821      	ldr	r0, [pc, #132]	; (4d60 <usage_fault.constprop.0+0xe4>)
    4cda:	9305      	str	r3, [sp, #20]
    4cdc:	aa04      	add	r2, sp, #16
    4cde:	2302      	movs	r3, #2
    4ce0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4ce4:	9304      	str	r3, [sp, #16]
    4ce6:	f007 fee8 	bl	caba <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_NO_COPROCESSOR;
    4cea:	2021      	movs	r0, #33	; 0x21
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    4cec:	4b1d      	ldr	r3, [pc, #116]	; (4d64 <usage_fault.constprop.0+0xe8>)
    4cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4cf0:	0359      	lsls	r1, r3, #13
    4cf2:	d50a      	bpl.n	4d0a <usage_fault.constprop.0+0x8e>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    4cf4:	4b1f      	ldr	r3, [pc, #124]	; (4d74 <usage_fault.constprop.0+0xf8>)
    4cf6:	481a      	ldr	r0, [pc, #104]	; (4d60 <usage_fault.constprop.0+0xe4>)
    4cf8:	9305      	str	r3, [sp, #20]
    4cfa:	aa04      	add	r2, sp, #16
    4cfc:	2302      	movs	r3, #2
    4cfe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4d02:	9304      	str	r3, [sp, #16]
    4d04:	f007 fed9 	bl	caba <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EXC_RETURN;
    4d08:	2022      	movs	r0, #34	; 0x22
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    4d0a:	4b16      	ldr	r3, [pc, #88]	; (4d64 <usage_fault.constprop.0+0xe8>)
    4d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d0e:	039a      	lsls	r2, r3, #14
    4d10:	d50a      	bpl.n	4d28 <usage_fault.constprop.0+0xac>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
		PR_FAULT_INFO("  Illegal use of the EPSR");
    4d12:	4b19      	ldr	r3, [pc, #100]	; (4d78 <usage_fault.constprop.0+0xfc>)
    4d14:	4812      	ldr	r0, [pc, #72]	; (4d60 <usage_fault.constprop.0+0xe4>)
    4d16:	9305      	str	r3, [sp, #20]
    4d18:	aa04      	add	r2, sp, #16
    4d1a:	2302      	movs	r3, #2
    4d1c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4d20:	9304      	str	r3, [sp, #16]
    4d22:	f007 feca 	bl	caba <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_ILLEGAL_EPSR;
    4d26:	2023      	movs	r0, #35	; 0x23
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    4d28:	4b0e      	ldr	r3, [pc, #56]	; (4d64 <usage_fault.constprop.0+0xe8>)
    4d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4d2c:	03db      	lsls	r3, r3, #15
    4d2e:	d50a      	bpl.n	4d46 <usage_fault.constprop.0+0xca>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    4d30:	4b12      	ldr	r3, [pc, #72]	; (4d7c <usage_fault.constprop.0+0x100>)
    4d32:	480b      	ldr	r0, [pc, #44]	; (4d60 <usage_fault.constprop.0+0xe4>)
    4d34:	9305      	str	r3, [sp, #20]
    4d36:	aa04      	add	r2, sp, #16
    4d38:	2302      	movs	r3, #2
    4d3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4d3e:	9304      	str	r3, [sp, #16]
    4d40:	f007 febb 	bl	caba <z_log_msg_static_create.constprop.0>
		reason = K_ERR_ARM_USAGE_UNDEFINED_INSTRUCTION;
    4d44:	2024      	movs	r0, #36	; 0x24
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    4d46:	4a07      	ldr	r2, [pc, #28]	; (4d64 <usage_fault.constprop.0+0xe8>)
    4d48:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4d4a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    4d4e:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    4d52:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    4d54:	b006      	add	sp, #24
    4d56:	bd10      	pop	{r4, pc}
	uint32_t reason = K_ERR_ARM_USAGE_GENERIC;
    4d58:	201d      	movs	r0, #29
    4d5a:	e7a9      	b.n	4cb0 <usage_fault.constprop.0+0x34>
    4d5c:	0000fc40 	.word	0x0000fc40
    4d60:	0000dbd4 	.word	0x0000dbd4
    4d64:	e000ed00 	.word	0xe000ed00
    4d68:	0000fc58 	.word	0x0000fc58
    4d6c:	0000fc6b 	.word	0x0000fc6b
    4d70:	0000fc85 	.word	0x0000fc85
    4d74:	0000fca3 	.word	0x0000fca3
    4d78:	0000fcc8 	.word	0x0000fcc8
    4d7c:	0000fce2 	.word	0x0000fce2

00004d80 <mem_manage_fault>:
{
    4d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4d84:	b086      	sub	sp, #24
    4d86:	4681      	mov	r9, r0
    4d88:	af00      	add	r7, sp, #0
    4d8a:	468a      	mov	sl, r1
    4d8c:	4690      	mov	r8, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    4d8e:	4b45      	ldr	r3, [pc, #276]	; (4ea4 <mem_manage_fault+0x124>)
    4d90:	4845      	ldr	r0, [pc, #276]	; (4ea8 <mem_manage_fault+0x128>)
    4d92:	617b      	str	r3, [r7, #20]
    4d94:	2402      	movs	r4, #2
    4d96:	613c      	str	r4, [r7, #16]
    4d98:	f107 0210 	add.w	r2, r7, #16
    4d9c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4da0:	f007 fe8b 	bl	caba <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    4da4:	4b41      	ldr	r3, [pc, #260]	; (4eac <mem_manage_fault+0x12c>)
    4da6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4da8:	06d8      	lsls	r0, r3, #27
    4daa:	d545      	bpl.n	4e38 <mem_manage_fault+0xb8>
		PR_FAULT_INFO("  Stacking error (context area might be"
    4dac:	4b40      	ldr	r3, [pc, #256]	; (4eb0 <mem_manage_fault+0x130>)
    4dae:	483e      	ldr	r0, [pc, #248]	; (4ea8 <mem_manage_fault+0x128>)
    4db0:	e9c7 4304 	strd	r4, r3, [r7, #16]
    4db4:	f107 0210 	add.w	r2, r7, #16
    4db8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_STACKING;
    4dbc:	2411      	movs	r4, #17
		PR_FAULT_INFO("  Stacking error (context area might be"
    4dbe:	f007 fe7c 	bl	caba <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    4dc2:	4b3a      	ldr	r3, [pc, #232]	; (4eac <mem_manage_fault+0x12c>)
    4dc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4dc6:	0719      	lsls	r1, r3, #28
    4dc8:	d50b      	bpl.n	4de2 <mem_manage_fault+0x62>
		PR_FAULT_INFO("  Unstacking error");
    4dca:	4b3a      	ldr	r3, [pc, #232]	; (4eb4 <mem_manage_fault+0x134>)
    4dcc:	617b      	str	r3, [r7, #20]
    4dce:	2302      	movs	r3, #2
    4dd0:	4835      	ldr	r0, [pc, #212]	; (4ea8 <mem_manage_fault+0x128>)
    4dd2:	613b      	str	r3, [r7, #16]
    4dd4:	f107 0210 	add.w	r2, r7, #16
    4dd8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_UNSTACKING;
    4ddc:	2412      	movs	r4, #18
		PR_FAULT_INFO("  Unstacking error");
    4dde:	f007 fe6c 	bl	caba <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    4de2:	4d32      	ldr	r5, [pc, #200]	; (4eac <mem_manage_fault+0x12c>)
    4de4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4de6:	079a      	lsls	r2, r3, #30
    4de8:	d528      	bpl.n	4e3c <mem_manage_fault+0xbc>
		PR_FAULT_INFO("  Data Access Violation");
    4dea:	466c      	mov	r4, sp
    4dec:	4b32      	ldr	r3, [pc, #200]	; (4eb8 <mem_manage_fault+0x138>)
    4dee:	617b      	str	r3, [r7, #20]
    4df0:	2302      	movs	r3, #2
    4df2:	613b      	str	r3, [r7, #16]
    4df4:	482c      	ldr	r0, [pc, #176]	; (4ea8 <mem_manage_fault+0x128>)
    4df6:	f107 0210 	add.w	r2, r7, #16
    4dfa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4dfe:	f007 fe5c 	bl	caba <z_log_msg_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    4e02:	6b6e      	ldr	r6, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    4e04:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4e06:	061b      	lsls	r3, r3, #24
    4e08:	d549      	bpl.n	4e9e <mem_manage_fault+0x11e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    4e0a:	b088      	sub	sp, #32
    4e0c:	466a      	mov	r2, sp
    4e0e:	4b2b      	ldr	r3, [pc, #172]	; (4ebc <mem_manage_fault+0x13c>)
    4e10:	4825      	ldr	r0, [pc, #148]	; (4ea8 <mem_manage_fault+0x128>)
    4e12:	e9c2 3605 	strd	r3, r6, [r2, #20]
    4e16:	2303      	movs	r3, #3
    4e18:	f842 3f10 	str.w	r3, [r2, #16]!
    4e1c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4e20:	f007 fe4b 	bl	caba <z_log_msg_static_create.constprop.0>
    4e24:	46a5      	mov	sp, r4
			if (from_hard_fault != 0) {
    4e26:	f1ba 0f00 	cmp.w	sl, #0
    4e2a:	d003      	beq.n	4e34 <mem_manage_fault+0xb4>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    4e2c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4e2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    4e32:	62ab      	str	r3, [r5, #40]	; 0x28
		reason = K_ERR_ARM_MEM_DATA_ACCESS;
    4e34:	2413      	movs	r4, #19
    4e36:	e003      	b.n	4e40 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_ARM_MEM_GENERIC;
    4e38:	2410      	movs	r4, #16
    4e3a:	e7c2      	b.n	4dc2 <mem_manage_fault+0x42>
	uint32_t mmfar = -EINVAL;
    4e3c:	f06f 0615 	mvn.w	r6, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    4e40:	4b1a      	ldr	r3, [pc, #104]	; (4eac <mem_manage_fault+0x12c>)
    4e42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    4e44:	07d8      	lsls	r0, r3, #31
    4e46:	d50b      	bpl.n	4e60 <mem_manage_fault+0xe0>
		PR_FAULT_INFO("  Instruction Access Violation");
    4e48:	4b1d      	ldr	r3, [pc, #116]	; (4ec0 <mem_manage_fault+0x140>)
    4e4a:	617b      	str	r3, [r7, #20]
    4e4c:	2302      	movs	r3, #2
    4e4e:	4816      	ldr	r0, [pc, #88]	; (4ea8 <mem_manage_fault+0x128>)
    4e50:	613b      	str	r3, [r7, #16]
    4e52:	f107 0210 	add.w	r2, r7, #16
    4e56:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		reason = K_ERR_ARM_MEM_INSTRUCTION_ACCESS;
    4e5a:	2414      	movs	r4, #20
		PR_FAULT_INFO("  Instruction Access Violation");
    4e5c:	f007 fe2d 	bl	caba <z_log_msg_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4e60:	4b12      	ldr	r3, [pc, #72]	; (4eac <mem_manage_fault+0x12c>)
    4e62:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    4e64:	06d1      	lsls	r1, r2, #27
    4e66:	d402      	bmi.n	4e6e <mem_manage_fault+0xee>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    4e68:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    4e6a:	0792      	lsls	r2, r2, #30
    4e6c:	d50a      	bpl.n	4e84 <mem_manage_fault+0x104>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    4e6e:	685b      	ldr	r3, [r3, #4]
    4e70:	051b      	lsls	r3, r3, #20
    4e72:	d507      	bpl.n	4e84 <mem_manage_fault+0x104>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    4e74:	4649      	mov	r1, r9
    4e76:	4630      	mov	r0, r6
    4e78:	f7ff fe0e 	bl	4a98 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    4e7c:	b110      	cbz	r0, 4e84 <mem_manage_fault+0x104>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    4e7e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    4e82:	2402      	movs	r4, #2
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    4e84:	4a09      	ldr	r2, [pc, #36]	; (4eac <mem_manage_fault+0x12c>)
    4e86:	6a93      	ldr	r3, [r2, #40]	; 0x28
    4e88:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    4e8c:	6293      	str	r3, [r2, #40]	; 0x28
}
    4e8e:	4620      	mov	r0, r4
	*recoverable = memory_fault_recoverable(esf, true);
    4e90:	2300      	movs	r3, #0
}
    4e92:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    4e94:	f888 3000 	strb.w	r3, [r8]
}
    4e98:	46bd      	mov	sp, r7
    4e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	uint32_t mmfar = -EINVAL;
    4e9e:	f06f 0615 	mvn.w	r6, #21
    4ea2:	e7c7      	b.n	4e34 <mem_manage_fault+0xb4>
    4ea4:	0000fd0d 	.word	0x0000fd0d
    4ea8:	0000dbd4 	.word	0x0000dbd4
    4eac:	e000ed00 	.word	0xe000ed00
    4eb0:	0000fd23 	.word	0x0000fd23
    4eb4:	0000fbcc 	.word	0x0000fbcc
    4eb8:	0000fd56 	.word	0x0000fd56
    4ebc:	0000fd6e 	.word	0x0000fd6e
    4ec0:	0000fd84 	.word	0x0000fd84

00004ec4 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    4ec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4ec8:	4b77      	ldr	r3, [pc, #476]	; (50a8 <z_arm_fault+0x1e4>)
{
    4eca:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4ecc:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    4ed0:	af00      	add	r7, sp, #0
    4ed2:	4605      	mov	r5, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    4ed4:	f3c8 0408 	ubfx	r4, r8, #0, #9
    4ed8:	2600      	movs	r6, #0
    4eda:	f386 8811 	msr	BASEPRI, r6
    4ede:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    4ee2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    4ee6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    4eea:	d10e      	bne.n	4f0a <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    4eec:	f002 030c 	and.w	r3, r2, #12
    4ef0:	2b08      	cmp	r3, #8
    4ef2:	d119      	bne.n	4f28 <z_arm_fault+0x64>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    4ef4:	4b6d      	ldr	r3, [pc, #436]	; (50ac <z_arm_fault+0x1e8>)
    4ef6:	61fb      	str	r3, [r7, #28]
    4ef8:	2302      	movs	r3, #2
    4efa:	486d      	ldr	r0, [pc, #436]	; (50b0 <z_arm_fault+0x1ec>)
    4efc:	61bb      	str	r3, [r7, #24]
    4efe:	f107 0218 	add.w	r2, r7, #24
    4f02:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4f06:	f007 fdd8 	bl	caba <z_log_msg_static_create.constprop.0>
	*nested_exc = false;
    4f0a:	2600      	movs	r6, #0
		return NULL;
    4f0c:	4635      	mov	r5, r6
	*recoverable = false;
    4f0e:	2300      	movs	r3, #0
    4f10:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    4f12:	1ee3      	subs	r3, r4, #3
    4f14:	2b09      	cmp	r3, #9
    4f16:	f200 80a6 	bhi.w	5066 <z_arm_fault+0x1a2>
    4f1a:	e8df f003 	tbb	[pc, r3]
    4f1e:	990a      	.short	0x990a
    4f20:	a4a4959c 	.word	0xa4a4959c
    4f24:	9fa4a4a4 	.word	0x9fa4a4a4
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    4f28:	0710      	lsls	r0, r2, #28
			ptr_esf =  (z_arch_esf_t *)psp;
    4f2a:	bf4c      	ite	mi
    4f2c:	460d      	movmi	r5, r1
			*nested_exc = true;
    4f2e:	2601      	movpl	r6, #1
    4f30:	e7ed      	b.n	4f0e <z_arm_fault+0x4a>
	PR_FAULT_INFO("***** HARD FAULT *****");
    4f32:	46e9      	mov	r9, sp
    4f34:	4b5f      	ldr	r3, [pc, #380]	; (50b4 <z_arm_fault+0x1f0>)
    4f36:	61fb      	str	r3, [r7, #28]
    4f38:	f04f 0802 	mov.w	r8, #2
    4f3c:	f107 0218 	add.w	r2, r7, #24
    4f40:	485b      	ldr	r0, [pc, #364]	; (50b0 <z_arm_fault+0x1ec>)
    4f42:	f8c7 8018 	str.w	r8, [r7, #24]
    4f46:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4f4a:	f007 fdb6 	bl	caba <z_log_msg_static_create.constprop.0>
	*recoverable = false;
    4f4e:	2300      	movs	r3, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4f50:	4c55      	ldr	r4, [pc, #340]	; (50a8 <z_arm_fault+0x1e4>)
	*recoverable = false;
    4f52:	71fb      	strb	r3, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    4f54:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4f56:	079a      	lsls	r2, r3, #30
    4f58:	d50b      	bpl.n	4f72 <z_arm_fault+0xae>
		PR_EXC("  Bus fault on vector table read");
    4f5a:	4b57      	ldr	r3, [pc, #348]	; (50b8 <z_arm_fault+0x1f4>)
		PR_EXC("  Debug event");
    4f5c:	e9c7 8306 	strd	r8, r3, [r7, #24]
	PR_FAULT_INFO(
    4f60:	4853      	ldr	r0, [pc, #332]	; (50b0 <z_arm_fault+0x1ec>)
    4f62:	f107 0218 	add.w	r2, r7, #24
    4f66:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4f6a:	f007 fda6 	bl	caba <z_log_msg_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    4f6e:	2400      	movs	r4, #0
    4f70:	e041      	b.n	4ff6 <z_arm_fault+0x132>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    4f72:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4f74:	2b00      	cmp	r3, #0
    4f76:	da01      	bge.n	4f7c <z_arm_fault+0xb8>
		PR_EXC("  Debug event");
    4f78:	4b50      	ldr	r3, [pc, #320]	; (50bc <z_arm_fault+0x1f8>)
    4f7a:	e7ef      	b.n	4f5c <z_arm_fault+0x98>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    4f7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    4f7e:	005b      	lsls	r3, r3, #1
    4f80:	d5f5      	bpl.n	4f6e <z_arm_fault+0xaa>
		PR_EXC("  Fault escalation (see below)");
    4f82:	4b4f      	ldr	r3, [pc, #316]	; (50c0 <z_arm_fault+0x1fc>)
    4f84:	484a      	ldr	r0, [pc, #296]	; (50b0 <z_arm_fault+0x1ec>)
    4f86:	e9c7 8306 	strd	r8, r3, [r7, #24]
    4f8a:	f107 0218 	add.w	r2, r7, #24
    4f8e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4f92:	f007 fd92 	bl	caba <z_log_msg_static_create.constprop.0>
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    4f96:	6963      	ldr	r3, [r4, #20]
	uint16_t *ret_addr = (uint16_t *)esf->basic.pc;
    4f98:	69aa      	ldr	r2, [r5, #24]
	SCB->CCR |= SCB_CCR_BFHFNMIGN_Msk;
    4f9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4f9e:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    4fa0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4fa4:	f3bf 8f6f 	isb	sy
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    4fa8:	6963      	ldr	r3, [r4, #20]
	uint16_t fault_insn = *(ret_addr - 1);
    4faa:	f832 2c02 	ldrh.w	r2, [r2, #-2]
	SCB->CCR &= ~SCB_CCR_BFHFNMIGN_Msk;
    4fae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
    4fb2:	6163      	str	r3, [r4, #20]
  __ASM volatile ("dsb 0xF":::"memory");
    4fb4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    4fb8:	f3bf 8f6f 	isb	sy
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    4fbc:	f64d 7302 	movw	r3, #57090	; 0xdf02
    4fc0:	429a      	cmp	r2, r3
    4fc2:	d008      	beq.n	4fd6 <z_arm_fault+0x112>
		} else if ((SCB->CFSR & SCB_CFSR_MEMFAULTSR_Msk) != 0) {
    4fc4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    4fc6:	b2db      	uxtb	r3, r3
    4fc8:	b38b      	cbz	r3, 502e <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    4fca:	1dfa      	adds	r2, r7, #7
    4fcc:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    4fce:	4628      	mov	r0, r5
    4fd0:	f7ff fed6 	bl	4d80 <mem_manage_fault>
    4fd4:	e03a      	b.n	504c <z_arm_fault+0x188>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    4fd6:	b088      	sub	sp, #32
    4fd8:	682b      	ldr	r3, [r5, #0]
    4fda:	466a      	mov	r2, sp
    4fdc:	4939      	ldr	r1, [pc, #228]	; (50c4 <z_arm_fault+0x200>)
    4fde:	4834      	ldr	r0, [pc, #208]	; (50b0 <z_arm_fault+0x1ec>)
    4fe0:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4fe4:	2303      	movs	r3, #3
    4fe6:	f842 3f10 	str.w	r3, [r2, #16]!
    4fea:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4fee:	f007 fd64 	bl	caba <z_log_msg_static_create.constprop.0>
			reason = esf->basic.r0;
    4ff2:	682c      	ldr	r4, [r5, #0]
    4ff4:	46cd      	mov	sp, r9
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    4ff6:	79fb      	ldrb	r3, [r7, #7]
    4ff8:	b9ab      	cbnz	r3, 5026 <z_arm_fault+0x162>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    4ffa:	2220      	movs	r2, #32
    4ffc:	4629      	mov	r1, r5
    4ffe:	f107 0008 	add.w	r0, r7, #8
    5002:	f007 fd83 	bl	cb0c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    5006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    5008:	2e00      	cmp	r6, #0
    500a:	d047      	beq.n	509c <z_arm_fault+0x1d8>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    500c:	f3c3 0208 	ubfx	r2, r3, #0, #9
    5010:	b922      	cbnz	r2, 501c <z_arm_fault+0x158>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    5012:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    5016:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    501a:	627b      	str	r3, [r7, #36]	; 0x24

	if (IS_ENABLED(CONFIG_SIMPLIFIED_EXCEPTION_CODES) && (reason >= K_ERR_ARCH_START)) {
		reason = K_ERR_CPU_EXCEPTION;
	}

	z_arm_fatal_error(reason, &esf_copy);
    501c:	f107 0108 	add.w	r1, r7, #8
    5020:	4620      	mov	r0, r4
    5022:	f7ff fbf1 	bl	4808 <z_arm_fatal_error>
}
    5026:	372c      	adds	r7, #44	; 0x2c
    5028:	46bd      	mov	sp, r7
    502a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((SCB->CFSR & SCB_CFSR_BUSFAULTSR_Msk) != 0) {
    502e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5030:	f413 4f7f 	tst.w	r3, #65280	; 0xff00
    5034:	d004      	beq.n	5040 <z_arm_fault+0x17c>
			reason = bus_fault(esf, 1, recoverable);
    5036:	1df9      	adds	r1, r7, #7
    5038:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    503a:	f7ff fd87 	bl	4b4c <bus_fault.constprop.0>
    503e:	e005      	b.n	504c <z_arm_fault+0x188>
		} else if ((SCB->CFSR & SCB_CFSR_USGFAULTSR_Msk) != 0) {
    5040:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5042:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    5046:	d392      	bcc.n	4f6e <z_arm_fault+0xaa>
			reason = usage_fault(esf);
    5048:	f7ff fe18 	bl	4c7c <usage_fault.constprop.0>
    504c:	4604      	mov	r4, r0
    504e:	e7d2      	b.n	4ff6 <z_arm_fault+0x132>
		reason = mem_manage_fault(esf, 0, recoverable);
    5050:	1dfa      	adds	r2, r7, #7
    5052:	2100      	movs	r1, #0
    5054:	e7bb      	b.n	4fce <z_arm_fault+0x10a>
		reason = bus_fault(esf, 0, recoverable);
    5056:	1df9      	adds	r1, r7, #7
    5058:	2000      	movs	r0, #0
    505a:	e7ee      	b.n	503a <z_arm_fault+0x176>
	PR_FAULT_INFO(
    505c:	4b1a      	ldr	r3, [pc, #104]	; (50c8 <z_arm_fault+0x204>)
    505e:	61fb      	str	r3, [r7, #28]
    5060:	2302      	movs	r3, #2
    5062:	61bb      	str	r3, [r7, #24]
    5064:	e77c      	b.n	4f60 <z_arm_fault+0x9c>
	PR_FAULT_INFO("***** %s %d) *****",
    5066:	4a19      	ldr	r2, [pc, #100]	; (50cc <z_arm_fault+0x208>)
    5068:	4b19      	ldr	r3, [pc, #100]	; (50d0 <z_arm_fault+0x20c>)
    506a:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    506e:	46e8      	mov	r8, sp
    5070:	b08a      	sub	sp, #40	; 0x28
    5072:	bf18      	it	ne
    5074:	4613      	movne	r3, r2
    5076:	466a      	mov	r2, sp
    5078:	4916      	ldr	r1, [pc, #88]	; (50d4 <z_arm_fault+0x210>)
    507a:	480d      	ldr	r0, [pc, #52]	; (50b0 <z_arm_fault+0x1ec>)
    507c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    5080:	f44f 7300 	mov.w	r3, #512	; 0x200
    5084:	8413      	strh	r3, [r2, #32]
    5086:	3c10      	subs	r4, #16
    5088:	4b13      	ldr	r3, [pc, #76]	; (50d8 <z_arm_fault+0x214>)
    508a:	61d4      	str	r4, [r2, #28]
    508c:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    5090:	f842 3f10 	str.w	r3, [r2, #16]!
    5094:	f007 fd11 	bl	caba <z_log_msg_static_create.constprop.0>
    5098:	46c5      	mov	sp, r8
}
    509a:	e768      	b.n	4f6e <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    509c:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    50a0:	f023 0301 	bic.w	r3, r3, #1
    50a4:	e7b9      	b.n	501a <z_arm_fault+0x156>
    50a6:	bf00      	nop
    50a8:	e000ed00 	.word	0xe000ed00
    50ac:	0000fdd1 	.word	0x0000fdd1
    50b0:	0000dbd4 	.word	0x0000dbd4
    50b4:	0000fdfc 	.word	0x0000fdfc
    50b8:	0000fe13 	.word	0x0000fe13
    50bc:	0000fe34 	.word	0x0000fe34
    50c0:	0000fe42 	.word	0x0000fe42
    50c4:	0000fe61 	.word	0x0000fe61
    50c8:	0000fe7d 	.word	0x0000fe7d
    50cc:	0000fdb8 	.word	0x0000fdb8
    50d0:	0000fda3 	.word	0x0000fda3
    50d4:	0000fea1 	.word	0x0000fea1
    50d8:	01000004 	.word	0x01000004

000050dc <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    50dc:	4a02      	ldr	r2, [pc, #8]	; (50e8 <z_arm_fault_init+0xc>)
    50de:	6953      	ldr	r3, [r2, #20]
    50e0:	f043 0310 	orr.w	r3, r3, #16
    50e4:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    50e6:	4770      	bx	lr
    50e8:	e000ed00 	.word	0xe000ed00

000050ec <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    50ec:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    50f0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    50f4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    50f6:	4672      	mov	r2, lr
	bl z_arm_fault
    50f8:	f7ff fee4 	bl	4ec4 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    50fc:	bd01      	pop	{r0, pc}
    50fe:	bf00      	nop

00005100 <z_arm_interrupt_init>:
    5100:	4804      	ldr	r0, [pc, #16]	; (5114 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    5102:	2300      	movs	r3, #0
    5104:	2140      	movs	r1, #64	; 0x40
    5106:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    5108:	3301      	adds	r3, #1
    510a:	2b28      	cmp	r3, #40	; 0x28
    510c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    5110:	d1f9      	bne.n	5106 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    5112:	4770      	bx	lr
    5114:	e000e100 	.word	0xe000e100

00005118 <__start>:
    strb r0, [r1]
#endif /* CONFIG_DEBUG_THREAD_INFO */

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    5118:	2000      	movs	r0, #0
    msr CONTROL, r0
    511a:	f380 8814 	msr	CONTROL, r0
    isb
    511e:	f3bf 8f6f 	isb	sy
#if defined(CONFIG_PM_S2RAM)
    bl arch_pm_s2ram_resume
#endif /* CONFIG_PM_S2RAM */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    5122:	f7fd fd15 	bl	2b50 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    5126:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    5128:	490d      	ldr	r1, [pc, #52]	; (5160 <__start+0x48>)
    str r0, [r1]
    512a:	6008      	str	r0, [r1, #0]
    dsb
    512c:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    5130:	480c      	ldr	r0, [pc, #48]	; (5164 <__start+0x4c>)
    msr msp, r0
    5132:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    5136:	f000 f82b 	bl	5190 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    513a:	2040      	movs	r0, #64	; 0x40
    msr BASEPRI, r0
    513c:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    5140:	4809      	ldr	r0, [pc, #36]	; (5168 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    5142:	f44f 6104 	mov.w	r1, #2112	; 0x840
    adds r0, r0, r1
    5146:	1840      	adds	r0, r0, r1
    msr PSP, r0
    5148:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    514c:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    5150:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    5152:	4308      	orrs	r0, r1
    msr CONTROL, r0
    5154:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    5158:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    515c:	f7ff fc16 	bl	498c <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    5160:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    5164:	20003840 	.word	0x20003840
    ldr r0, =z_interrupt_stacks
    5168:	20002ac0 	.word	0x20002ac0

0000516c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    516c:	4907      	ldr	r1, [pc, #28]	; (518c <z_arm_clear_arm_mpu_config+0x20>)
    516e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    5172:	2300      	movs	r3, #0
	int num_regions =
    5174:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    5178:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    517a:	4293      	cmp	r3, r2
    517c:	db00      	blt.n	5180 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    517e:	4770      	bx	lr
  MPU->RNR = rnr;
    5180:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    5184:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    5188:	3301      	adds	r3, #1
    518a:	e7f6      	b.n	517a <z_arm_clear_arm_mpu_config+0xe>
    518c:	e000ed00 	.word	0xe000ed00

00005190 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    5190:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    5192:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    5194:	2300      	movs	r3, #0
    5196:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    519a:	f7ff ffe7 	bl	516c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    519e:	4b14      	ldr	r3, [pc, #80]	; (51f0 <z_arm_init_arch_hw_at_boot+0x60>)
    51a0:	f04f 32ff 	mov.w	r2, #4294967295
    51a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    51a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    51ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    51b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    51b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    51b8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    51bc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    51c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    51c4:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    51c8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    51cc:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    51d0:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    51d4:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    51d8:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    51dc:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    51e0:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    51e4:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    51e6:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    51ea:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    51ee:	bd08      	pop	{r3, pc}
    51f0:	e000e100 	.word	0xe000e100

000051f4 <z_impl_k_thread_abort>:
#include <zephyr/wait_q.h>
#include <zephyr/sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    51f4:	4b08      	ldr	r3, [pc, #32]	; (5218 <z_impl_k_thread_abort+0x24>)
    51f6:	689b      	ldr	r3, [r3, #8]
    51f8:	4283      	cmp	r3, r0
    51fa:	d10b      	bne.n	5214 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    51fc:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    5200:	b143      	cbz	r3, 5214 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5202:	4b06      	ldr	r3, [pc, #24]	; (521c <z_impl_k_thread_abort+0x28>)
    5204:	685a      	ldr	r2, [r3, #4]
    5206:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    520a:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    520c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    520e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    5212:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    5214:	f006 ba10 	b.w	b638 <z_thread_abort>
    5218:	20001bcc 	.word	0x20001bcc
    521c:	e000ed00 	.word	0xe000ed00

00005220 <z_arm_configure_static_mpu_regions>:
	 * into account the unused SRAM area, as well.
	 */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    5220:	4b02      	ldr	r3, [pc, #8]	; (522c <z_arm_configure_static_mpu_regions+0xc>)
    5222:	4a03      	ldr	r2, [pc, #12]	; (5230 <z_arm_configure_static_mpu_regions+0x10>)
    5224:	4803      	ldr	r0, [pc, #12]	; (5234 <z_arm_configure_static_mpu_regions+0x14>)
    5226:	2101      	movs	r1, #1
    5228:	f000 b892 	b.w	5350 <arm_core_mpu_configure_static_mpu_regions>
    522c:	20008000 	.word	0x20008000
    5230:	20000000 	.word	0x20000000
    5234:	0000dd60 	.word	0x0000dd60

00005238 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    5238:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    523a:	4b05      	ldr	r3, [pc, #20]	; (5250 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    523c:	3a40      	subs	r2, #64	; 0x40
	dynamic_regions[region_num].start = guard_start;
    523e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    5240:	4a04      	ldr	r2, [pc, #16]	; (5254 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    5242:	2140      	movs	r1, #64	; 0x40
    5244:	e9c3 1201 	strd	r1, r2, [r3, #4]

	/* Configure the dynamic MPU regions */
#ifdef CONFIG_AARCH32_ARMV8_R
	arm_core_mpu_disable();
#endif
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    5248:	4618      	mov	r0, r3
    524a:	2101      	movs	r1, #1
    524c:	f000 b88a 	b.w	5364 <arm_core_mpu_configure_dynamic_mpu_regions>
    5250:	20000e1c 	.word	0x20000e1c
    5254:	150b0000 	.word	0x150b0000

00005258 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    5258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    525c:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 5314 <mpu_configure_regions+0xbc>
    5260:	469c      	mov	ip, r3
    5262:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;
    5264:	4615      	mov	r5, r2

	for (i = 0; i < regions_num; i++) {
    5266:	2300      	movs	r3, #0
    5268:	428b      	cmp	r3, r1
    526a:	da1a      	bge.n	52a2 <mpu_configure_regions+0x4a>
		if (regions[i].size == 0U) {
    526c:	6844      	ldr	r4, [r0, #4]
    526e:	2c00      	cmp	r4, #0
    5270:	d04d      	beq.n	530e <mpu_configure_regions+0xb6>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    5272:	f1bc 0f00 	cmp.w	ip, #0
    5276:	d01d      	beq.n	52b4 <mpu_configure_regions+0x5c>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    5278:	1e66      	subs	r6, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    527a:	4234      	tst	r4, r6
    527c:	d015      	beq.n	52aa <mpu_configure_regions+0x52>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    527e:	466c      	mov	r4, sp
    5280:	b088      	sub	sp, #32
    5282:	466a      	mov	r2, sp
    5284:	4924      	ldr	r1, [pc, #144]	; (5318 <mpu_configure_regions+0xc0>)
    5286:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    528a:	2303      	movs	r3, #3
    528c:	f842 3f10 	str.w	r3, [r2, #16]!
    5290:	4822      	ldr	r0, [pc, #136]	; (531c <mpu_configure_regions+0xc4>)
    5292:	2300      	movs	r3, #0
    5294:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5298:	f7fd fef2 	bl	3080 <z_impl_z_log_msg_static_create>
			return -EINVAL;
    529c:	f06f 0515 	mvn.w	r5, #21
    52a0:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    52a2:	4628      	mov	r0, r5
    52a4:	46bd      	mov	sp, r7
    52a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		&&
    52aa:	2c1f      	cmp	r4, #31
    52ac:	d9e7      	bls.n	527e <mpu_configure_regions+0x26>
		((part->start & (part->size - 1U)) == 0U);
    52ae:	6802      	ldr	r2, [r0, #0]
		&&
    52b0:	4216      	tst	r6, r2
    52b2:	d1e4      	bne.n	527e <mpu_configure_regions+0x26>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    52b4:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    52b6:	6802      	ldr	r2, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    52b8:	6886      	ldr	r6, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    52ba:	fa5f f885 	uxtb.w	r8, r5
	if (size <= 32U) {
    52be:	d914      	bls.n	52ea <mpu_configure_regions+0x92>
	if (size > (1UL << 31)) {
    52c0:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    52c4:	d813      	bhi.n	52ee <mpu_configure_regions+0x96>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    52c6:	3c01      	subs	r4, #1
    52c8:	fab4 f484 	clz	r4, r4
    52cc:	f1c4 041f 	rsb	r4, r4, #31
    52d0:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    52d2:	f1b8 0f07 	cmp.w	r8, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    52d6:	ea46 0604 	orr.w	r6, r6, r4
    52da:	d90a      	bls.n	52f2 <mpu_configure_regions+0x9a>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    52dc:	466c      	mov	r4, sp
    52de:	b088      	sub	sp, #32
    52e0:	466a      	mov	r2, sp
    52e2:	4b0f      	ldr	r3, [pc, #60]	; (5320 <mpu_configure_regions+0xc8>)
    52e4:	e9c2 3505 	strd	r3, r5, [r2, #20]
    52e8:	e7cf      	b.n	528a <mpu_configure_regions+0x32>
		return REGION_32B;
    52ea:	2408      	movs	r4, #8
    52ec:	e7f1      	b.n	52d2 <mpu_configure_regions+0x7a>
		return REGION_4G;
    52ee:	243e      	movs	r4, #62	; 0x3e
    52f0:	e7ef      	b.n	52d2 <mpu_configure_regions+0x7a>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    52f2:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    52f6:	432a      	orrs	r2, r5
    52f8:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    52fc:	f046 0601 	orr.w	r6, r6, #1
    5300:	f8ce 5098 	str.w	r5, [lr, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5304:	f8ce 209c 	str.w	r2, [lr, #156]	; 0x9c
		reg_index++;
    5308:	3501      	adds	r5, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    530a:	f8ce 60a0 	str.w	r6, [lr, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    530e:	3301      	adds	r3, #1
    5310:	300c      	adds	r0, #12
    5312:	e7a9      	b.n	5268 <mpu_configure_regions+0x10>
    5314:	e000ed00 	.word	0xe000ed00
    5318:	0000feb8 	.word	0x0000feb8
    531c:	0000dbcc 	.word	0x0000dbcc
    5320:	0000fedb 	.word	0x0000fedb

00005324 <arm_core_mpu_enable>:
	 * background region for privileged software access if desired.
	 */
#if defined(CONFIG_MPU_DISABLE_BACKGROUND_MAP)
	MPU->CTRL = MPU_CTRL_ENABLE_Msk;
#else
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    5324:	4b04      	ldr	r3, [pc, #16]	; (5338 <arm_core_mpu_enable+0x14>)
    5326:	2205      	movs	r2, #5
    5328:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    532c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5330:	f3bf 8f6f 	isb	sy
#endif

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    5334:	4770      	bx	lr
    5336:	bf00      	nop
    5338:	e000ed00 	.word	0xe000ed00

0000533c <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    533c:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    5340:	4b02      	ldr	r3, [pc, #8]	; (534c <arm_core_mpu_disable+0x10>)
    5342:	2200      	movs	r2, #0
    5344:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    5348:	4770      	bx	lr
    534a:	bf00      	nop
    534c:	e000ed00 	.word	0xe000ed00

00005350 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	*static_regions, const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    5350:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    5352:	4c03      	ldr	r4, [pc, #12]	; (5360 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    5354:	2301      	movs	r3, #1
    5356:	7822      	ldrb	r2, [r4, #0]
    5358:	f7ff ff7e 	bl	5258 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    535c:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    535e:	bd10      	pop	{r4, pc}
    5360:	20001c59 	.word	0x20001c59

00005364 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	*dynamic_regions, uint8_t regions_num)
{
    5364:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    5366:	4a09      	ldr	r2, [pc, #36]	; (538c <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    5368:	2300      	movs	r3, #0
    536a:	7812      	ldrb	r2, [r2, #0]
    536c:	f7ff ff74 	bl	5258 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    5370:	f110 0f16 	cmn.w	r0, #22
    5374:	d003      	beq.n	537e <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    5376:	4b06      	ldr	r3, [pc, #24]	; (5390 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    5378:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    537a:	2807      	cmp	r0, #7
    537c:	dd00      	ble.n	5380 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    537e:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    5380:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    5384:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    5388:	3001      	adds	r0, #1
    538a:	e7f6      	b.n	537a <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    538c:	20001c59 	.word	0x20001c59
    5390:	e000ed00 	.word	0xe000ed00

00005394 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    5394:	4914      	ldr	r1, [pc, #80]	; (53e8 <z_arm_mpu_init+0x54>)
    5396:	6808      	ldr	r0, [r1, #0]
    5398:	2808      	cmp	r0, #8
{
    539a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    539c:	d821      	bhi.n	53e2 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    539e:	f7ff ffcd 	bl	533c <arm_core_mpu_disable>
    53a2:	4c12      	ldr	r4, [pc, #72]	; (53ec <z_arm_mpu_init+0x58>)
    53a4:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    53a6:	2200      	movs	r2, #0
    53a8:	4290      	cmp	r0, r2
    53aa:	f101 010c 	add.w	r1, r1, #12
    53ae:	d105      	bne.n	53bc <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    53b0:	4b0f      	ldr	r3, [pc, #60]	; (53f0 <z_arm_mpu_init+0x5c>)
    53b2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    53b4:	f7ff ffb6 	bl	5324 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    53b8:	2000      	movs	r0, #0
}
    53ba:	bd10      	pop	{r4, pc}
    53bc:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    53c0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    53c4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    53c8:	4313      	orrs	r3, r2
    53ca:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    53ce:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    53d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
    53d6:	f043 0301 	orr.w	r3, r3, #1
    53da:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    53de:	3201      	adds	r2, #1
    53e0:	e7e2      	b.n	53a8 <z_arm_mpu_init+0x14>
		return -1;
    53e2:	f04f 30ff 	mov.w	r0, #4294967295
    53e6:	e7e8      	b.n	53ba <z_arm_mpu_init+0x26>
    53e8:	0000dd6c 	.word	0x0000dd6c
    53ec:	e000ed00 	.word	0xe000ed00
    53f0:	20001c59 	.word	0x20001c59

000053f4 <__stdout_hook_install>:

static int (*_stdout_hook)(int c) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int c))
{
	_stdout_hook = hook;
    53f4:	4b01      	ldr	r3, [pc, #4]	; (53fc <__stdout_hook_install+0x8>)
    53f6:	6018      	str	r0, [r3, #0]
}
    53f8:	4770      	bx	lr
    53fa:	bf00      	nop
    53fc:	20000034 	.word	0x20000034

00005400 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    5400:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5404:	b2c0      	uxtb	r0, r0
    5406:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    540a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    540e:	4905      	ldr	r1, [pc, #20]	; (5424 <sys_arch_reboot+0x24>)
    5410:	4b05      	ldr	r3, [pc, #20]	; (5428 <sys_arch_reboot+0x28>)
    5412:	68ca      	ldr	r2, [r1, #12]
    5414:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5418:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    541a:	60cb      	str	r3, [r1, #12]
    541c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    5420:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5422:	e7fd      	b.n	5420 <sys_arch_reboot+0x20>
    5424:	e000ed00 	.word	0xe000ed00
    5428:	05fa0004 	.word	0x05fa0004

0000542c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    542c:	b120      	cbz	r0, 5438 <arch_busy_wait+0xc>
    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    542e:	4b03      	ldr	r3, [pc, #12]	; (543c <arch_busy_wait+0x10>)
    5430:	0180      	lsls	r0, r0, #6
    5432:	f043 0301 	orr.w	r3, r3, #1
    5436:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    5438:	4770      	bx	lr
    543a:	bf00      	nop
    543c:	0000dc70 	.word	0x0000dc70

00005440 <hid_status_cb.part.0>:
		break;
	}

}

static void hid_status_cb(struct usb_cfg_data *cfg,
    5440:	b580      	push	{r7, lr}
    5442:	af00      	add	r7, sp, #0

	LOG_DBG("cfg %p status %d", cfg, status);

	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
	if (common == NULL) {
		LOG_WRN("Device data not found for cfg %p", cfg);
    5444:	b088      	sub	sp, #32
    5446:	466a      	mov	r2, sp
    5448:	4b06      	ldr	r3, [pc, #24]	; (5464 <hid_status_cb.part.0+0x24>)
    544a:	e9c2 3005 	strd	r3, r0, [r2, #20]
    544e:	2303      	movs	r3, #3
    5450:	f842 3f10 	str.w	r3, [r2, #16]!
    5454:	4804      	ldr	r0, [pc, #16]	; (5468 <hid_status_cb.part.0+0x28>)
    5456:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    545a:	f007 fb92 	bl	cb82 <z_log_msg_static_create.constprop.0>
	}

	dev_data = CONTAINER_OF(common, struct hid_device_info, common);

	hid_do_status_cb(dev_data, status, param);
}
    545e:	46bd      	mov	sp, r7
    5460:	bd80      	pop	{r7, pc}
    5462:	bf00      	nop
    5464:	0000ff14 	.word	0x0000ff14
    5468:	0000dc1c 	.word	0x0000dc1c

0000546c <hid_status_cb>:
{
    546c:	b570      	push	{r4, r5, r6, lr}
    546e:	4606      	mov	r6, r0
    5470:	b086      	sub	sp, #24
    5472:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
    5474:	4601      	mov	r1, r0
    5476:	4835      	ldr	r0, [pc, #212]	; (554c <hid_status_cb+0xe0>)
    5478:	f007 fae0 	bl	ca3c <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    547c:	4604      	mov	r4, r0
    547e:	b928      	cbnz	r0, 548c <hid_status_cb+0x20>
    5480:	4630      	mov	r0, r6
}
    5482:	b006      	add	sp, #24
    5484:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5488:	f7ff bfda 	b.w	5440 <hid_status_cb.part.0>
	switch (status) {
    548c:	2d0a      	cmp	r5, #10
    548e:	d85a      	bhi.n	5546 <hid_status_cb+0xda>
    5490:	e8df f005 	tbb	[pc, r5]
    5494:	23211106 	.word	0x23211106
    5498:	59403432 	.word	0x59403432
    549c:	5959      	.short	0x5959
    549e:	30          	.byte	0x30
    549f:	00          	.byte	0x00
		LOG_INF("Device error");
    54a0:	4b2b      	ldr	r3, [pc, #172]	; (5550 <hid_status_cb+0xe4>)
		LOG_INF("Unknown event");
    54a2:	9305      	str	r3, [sp, #20]
    54a4:	482b      	ldr	r0, [pc, #172]	; (5554 <hid_status_cb+0xe8>)
    54a6:	2302      	movs	r3, #2
    54a8:	aa04      	add	r2, sp, #16
    54aa:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    54ae:	9304      	str	r3, [sp, #16]
    54b0:	f007 fb67 	bl	cb82 <z_log_msg_static_create.constprop.0>
    54b4:	e01e      	b.n	54f4 <hid_status_cb+0x88>
		LOG_INF("Device reset detected");
    54b6:	4b28      	ldr	r3, [pc, #160]	; (5558 <hid_status_cb+0xec>)
		LOG_INF("Device disconnected");
    54b8:	9305      	str	r3, [sp, #20]
    54ba:	4826      	ldr	r0, [pc, #152]	; (5554 <hid_status_cb+0xe8>)
    54bc:	2302      	movs	r3, #2
    54be:	aa04      	add	r2, sp, #16
    54c0:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    54c4:	9304      	str	r3, [sp, #16]
    54c6:	f007 fb5c 	bl	cb82 <z_log_msg_static_create.constprop.0>
		dev_data->configured = false;
    54ca:	2300      	movs	r3, #0
    54cc:	f804 3c04 	strb.w	r3, [r4, #-4]
			dev_data->suspended = false;
    54d0:	f804 3c03 	strb.w	r3, [r4, #-3]
    54d4:	e00e      	b.n	54f4 <hid_status_cb+0x88>
		LOG_INF("Device connected");
    54d6:	4b21      	ldr	r3, [pc, #132]	; (555c <hid_status_cb+0xf0>)
    54d8:	e7e3      	b.n	54a2 <hid_status_cb+0x36>
		LOG_INF("Device configured");
    54da:	4b21      	ldr	r3, [pc, #132]	; (5560 <hid_status_cb+0xf4>)
    54dc:	9305      	str	r3, [sp, #20]
    54de:	481d      	ldr	r0, [pc, #116]	; (5554 <hid_status_cb+0xe8>)
    54e0:	2302      	movs	r3, #2
    54e2:	aa04      	add	r2, sp, #16
    54e4:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    54e8:	9304      	str	r3, [sp, #16]
    54ea:	f007 fb4a 	bl	cb82 <z_log_msg_static_create.constprop.0>
		dev_data->configured = true;
    54ee:	2301      	movs	r3, #1
    54f0:	f804 3c04 	strb.w	r3, [r4, #-4]
}
    54f4:	b006      	add	sp, #24
    54f6:	bd70      	pop	{r4, r5, r6, pc}
		LOG_INF("Device disconnected");
    54f8:	4b1a      	ldr	r3, [pc, #104]	; (5564 <hid_status_cb+0xf8>)
    54fa:	e7dd      	b.n	54b8 <hid_status_cb+0x4c>
		LOG_INF("Device suspended");
    54fc:	4b1a      	ldr	r3, [pc, #104]	; (5568 <hid_status_cb+0xfc>)
    54fe:	9305      	str	r3, [sp, #20]
    5500:	4814      	ldr	r0, [pc, #80]	; (5554 <hid_status_cb+0xe8>)
    5502:	2302      	movs	r3, #2
    5504:	aa04      	add	r2, sp, #16
    5506:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    550a:	9304      	str	r3, [sp, #16]
    550c:	f007 fb39 	bl	cb82 <z_log_msg_static_create.constprop.0>
		dev_data->suspended = true;
    5510:	2301      	movs	r3, #1
    5512:	e7dd      	b.n	54d0 <hid_status_cb+0x64>
		LOG_INF("Device resumed");
    5514:	4b15      	ldr	r3, [pc, #84]	; (556c <hid_status_cb+0x100>)
    5516:	480f      	ldr	r0, [pc, #60]	; (5554 <hid_status_cb+0xe8>)
    5518:	9305      	str	r3, [sp, #20]
    551a:	2502      	movs	r5, #2
    551c:	aa04      	add	r2, sp, #16
    551e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5522:	9504      	str	r5, [sp, #16]
    5524:	f007 fb2d 	bl	cb82 <z_log_msg_static_create.constprop.0>
		if (dev_data->suspended) {
    5528:	f814 3c03 	ldrb.w	r3, [r4, #-3]
    552c:	2b00      	cmp	r3, #0
    552e:	d0e1      	beq.n	54f4 <hid_status_cb+0x88>
			LOG_INF("from suspend");
    5530:	4b0f      	ldr	r3, [pc, #60]	; (5570 <hid_status_cb+0x104>)
    5532:	4808      	ldr	r0, [pc, #32]	; (5554 <hid_status_cb+0xe8>)
    5534:	aa04      	add	r2, sp, #16
    5536:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    553a:	e9cd 5304 	strd	r5, r3, [sp, #16]
    553e:	f007 fb20 	bl	cb82 <z_log_msg_static_create.constprop.0>
			dev_data->suspended = false;
    5542:	2300      	movs	r3, #0
    5544:	e7c4      	b.n	54d0 <hid_status_cb+0x64>
		LOG_INF("Unknown event");
    5546:	4b0b      	ldr	r3, [pc, #44]	; (5574 <hid_status_cb+0x108>)
    5548:	e7ab      	b.n	54a2 <hid_status_cb+0x36>
    554a:	bf00      	nop
    554c:	20000e40 	.word	0x20000e40
    5550:	0000ff35 	.word	0x0000ff35
    5554:	0000dc1c 	.word	0x0000dc1c
    5558:	0000ff42 	.word	0x0000ff42
    555c:	0000ff58 	.word	0x0000ff58
    5560:	0000ff69 	.word	0x0000ff69
    5564:	0000ff7b 	.word	0x0000ff7b
    5568:	0000ff8f 	.word	0x0000ff8f
    556c:	0000ffa0 	.word	0x0000ffa0
    5570:	0000ffaf 	.word	0x0000ffaf
    5574:	0000ffbc 	.word	0x0000ffbc

00005578 <hid_class_handle_req>:

static int hid_class_handle_req(struct usb_setup_packet *setup,
				int32_t *len, uint8_t **data)
{
    5578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    557c:	4604      	mov	r4, r0
    557e:	af00      	add	r7, sp, #0
    5580:	4688      	mov	r8, r1

	LOG_DBG("Class request:"
		"bRequest 0x%02x, bmRequestType 0x%02x len %d",
		setup->bRequest, setup->bmRequestType, *len);

	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
    5582:	7901      	ldrb	r1, [r0, #4]
    5584:	4826      	ldr	r0, [pc, #152]	; (5620 <hid_class_handle_req+0xa8>)
{
    5586:	4691      	mov	r9, r2
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
    5588:	f007 fa64 	bl	ca54 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    558c:	4606      	mov	r6, r0
    558e:	b9a0      	cbnz	r0, 55ba <hid_class_handle_req+0x42>
		LOG_WRN("Device data not found for interface %u",
    5590:	88a3      	ldrh	r3, [r4, #4]
    5592:	466c      	mov	r4, sp
    5594:	b088      	sub	sp, #32
    5596:	466a      	mov	r2, sp
    5598:	4922      	ldr	r1, [pc, #136]	; (5624 <hid_class_handle_req+0xac>)
    559a:	4823      	ldr	r0, [pc, #140]	; (5628 <hid_class_handle_req+0xb0>)
    559c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    55a0:	2303      	movs	r3, #3
    55a2:	f842 3f10 	str.w	r3, [r2, #16]!
    55a6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    55aa:	f007 faea 	bl	cb82 <z_log_msg_static_create.constprop.0>
			setup->wIndex);
		return -ENODEV;
    55ae:	f06f 0012 	mvn.w	r0, #18
    55b2:	46a5      	mov	sp, r4
			break;
		}
	}

	return -ENOTSUP;
}
    55b4:	46bd      	mov	sp, r7
    55b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (usb_reqtype_is_to_host(setup)) {
    55ba:	f994 3000 	ldrsb.w	r3, [r4]
	dev = common->dev;
    55be:	6800      	ldr	r0, [r0, #0]
		switch (setup->bRequest) {
    55c0:	7865      	ldrb	r5, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    55c2:	2b00      	cmp	r3, #0
    55c4:	da1c      	bge.n	5600 <hid_class_handle_req+0x88>
		switch (setup->bRequest) {
    55c6:	2d01      	cmp	r5, #1
    55c8:	d012      	beq.n	55f0 <hid_class_handle_req+0x78>
    55ca:	1eab      	subs	r3, r5, #2
		switch (setup->bRequest) {
    55cc:	2b01      	cmp	r3, #1
    55ce:	d914      	bls.n	55fa <hid_class_handle_req+0x82>
			LOG_ERR("Unhandled request 0x%02x", setup->bRequest);
    55d0:	466c      	mov	r4, sp
    55d2:	b088      	sub	sp, #32
    55d4:	466a      	mov	r2, sp
    55d6:	4b15      	ldr	r3, [pc, #84]	; (562c <hid_class_handle_req+0xb4>)
    55d8:	4813      	ldr	r0, [pc, #76]	; (5628 <hid_class_handle_req+0xb0>)
    55da:	e9c2 3505 	strd	r3, r5, [r2, #20]
    55de:	2303      	movs	r3, #3
    55e0:	f842 3f10 	str.w	r3, [r2, #16]!
    55e4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    55e8:	f007 facb 	bl	cb82 <z_log_msg_static_create.constprop.0>
    55ec:	46a5      	mov	sp, r4
    55ee:	e004      	b.n	55fa <hid_class_handle_req+0x82>
			if (dev_data->ops && dev_data->ops->get_report) {
    55f0:	f856 3c08 	ldr.w	r3, [r6, #-8]
    55f4:	b10b      	cbz	r3, 55fa <hid_class_handle_req+0x82>
    55f6:	681d      	ldr	r5, [r3, #0]
    55f8:	b96d      	cbnz	r5, 5616 <hid_class_handle_req+0x9e>
			return hid_on_get_idle(dev_data, setup, len, data);
    55fa:	f06f 0085 	mvn.w	r0, #133	; 0x85
    55fe:	e7d9      	b.n	55b4 <hid_class_handle_req+0x3c>
		switch (setup->bRequest) {
    5600:	2d09      	cmp	r5, #9
    5602:	d002      	beq.n	560a <hid_class_handle_req+0x92>
    5604:	f1a5 030a 	sub.w	r3, r5, #10
    5608:	e7e0      	b.n	55cc <hid_class_handle_req+0x54>
			if (dev_data->ops && dev_data->ops->set_report) {
    560a:	f856 3c08 	ldr.w	r3, [r6, #-8]
    560e:	2b00      	cmp	r3, #0
    5610:	d0f3      	beq.n	55fa <hid_class_handle_req+0x82>
    5612:	685d      	ldr	r5, [r3, #4]
    5614:	e7f0      	b.n	55f8 <hid_class_handle_req+0x80>
				return dev_data->ops->set_report(dev, setup,
    5616:	464b      	mov	r3, r9
    5618:	4642      	mov	r2, r8
    561a:	4621      	mov	r1, r4
    561c:	47a8      	blx	r5
    561e:	e7c9      	b.n	55b4 <hid_class_handle_req+0x3c>
    5620:	20000e40 	.word	0x20000e40
    5624:	0000ffca 	.word	0x0000ffca
    5628:	0000dc1c 	.word	0x0000dc1c
    562c:	0000fff1 	.word	0x0000fff1

00005630 <hid_custom_handle_req>:

static int hid_custom_handle_req(struct usb_setup_packet *setup,
				 int32_t *len, uint8_t **data)
{
    5630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	LOG_DBG("Standard request:"
		"bRequest 0x%02x, bmRequestType 0x%02x, len %d",
		setup->bRequest, setup->bmRequestType, setup->wLength);

	if (usb_reqtype_is_to_host(setup) &&
    5634:	f990 3000 	ldrsb.w	r3, [r0]
    5638:	2b00      	cmp	r3, #0
{
    563a:	af00      	add	r7, sp, #0
    563c:	4604      	mov	r4, r0
    563e:	460d      	mov	r5, r1
    5640:	4616      	mov	r6, r2
	if (usb_reqtype_is_to_host(setup) &&
    5642:	db04      	blt.n	564e <hid_custom_handle_req+0x1e>

		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
		if (common == NULL) {
			LOG_WRN("Device data not found for interface %u",
				iface_num);
			return -EINVAL;
    5644:	f06f 0015 	mvn.w	r0, #21

		return 0;
	}

	return -EINVAL;
}
    5648:	46bd      	mov	sp, r7
    564a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	    setup->RequestType.recipient == USB_REQTYPE_RECIPIENT_INTERFACE &&
    564e:	8803      	ldrh	r3, [r0, #0]
    5650:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
    5654:	b29b      	uxth	r3, r3
    5656:	f240 6201 	movw	r2, #1537	; 0x601
    565a:	4293      	cmp	r3, r2
    565c:	d1f2      	bne.n	5644 <hid_custom_handle_req+0x14>
		uint8_t iface_num = (uint8_t)setup->wIndex;
    565e:	f890 9004 	ldrb.w	r9, [r0, #4]
		uint8_t value = (uint8_t)(setup->wValue >> 8);
    5662:	f8b0 8002 	ldrh.w	r8, [r0, #2]
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
    5666:	481b      	ldr	r0, [pc, #108]	; (56d4 <hid_custom_handle_req+0xa4>)
    5668:	4649      	mov	r1, r9
		uint8_t value = (uint8_t)(setup->wValue >> 8);
    566a:	ea4f 2818 	mov.w	r8, r8, lsr #8
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
    566e:	f007 f9f1 	bl	ca54 <usb_get_dev_data_by_iface>
		if (common == NULL) {
    5672:	b978      	cbnz	r0, 5694 <hid_custom_handle_req+0x64>
			LOG_WRN("Device data not found for interface %u",
    5674:	466c      	mov	r4, sp
    5676:	b088      	sub	sp, #32
    5678:	466a      	mov	r2, sp
    567a:	4b17      	ldr	r3, [pc, #92]	; (56d8 <hid_custom_handle_req+0xa8>)
    567c:	4817      	ldr	r0, [pc, #92]	; (56dc <hid_custom_handle_req+0xac>)
    567e:	e9c2 3905 	strd	r3, r9, [r2, #20]
    5682:	2303      	movs	r3, #3
    5684:	f842 3f10 	str.w	r3, [r2, #16]!
    5688:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    568c:	f007 fa79 	bl	cb82 <z_log_msg_static_create.constprop.0>
    5690:	46a5      	mov	sp, r4
			return -EINVAL;
    5692:	e7d7      	b.n	5644 <hid_custom_handle_req+0x14>
		switch (value) {
    5694:	f1b8 0f21 	cmp.w	r8, #33	; 0x21
    5698:	d005      	beq.n	56a6 <hid_custom_handle_req+0x76>
    569a:	f1b8 0f22 	cmp.w	r8, #34	; 0x22
    569e:	d00f      	beq.n	56c0 <hid_custom_handle_req+0x90>
    56a0:	f06f 0085 	mvn.w	r0, #133	; 0x85
    56a4:	e7d0      	b.n	5648 <hid_custom_handle_req+0x18>
			cfg = common->dev->config;
    56a6:	6803      	ldr	r3, [r0, #0]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
    56a8:	88e1      	ldrh	r1, [r4, #6]
			hid_desc = cfg->interface_descriptor;
    56aa:	685b      	ldr	r3, [r3, #4]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
    56ac:	685b      	ldr	r3, [r3, #4]
    56ae:	f813 2f09 	ldrb.w	r2, [r3, #9]!
    56b2:	4291      	cmp	r1, r2
    56b4:	bf94      	ite	ls
    56b6:	6029      	strls	r1, [r5, #0]
    56b8:	602a      	strhi	r2, [r5, #0]
			*data = (uint8_t *)dev_data->report_desc;
    56ba:	6033      	str	r3, [r6, #0]
		return 0;
    56bc:	2000      	movs	r0, #0
    56be:	e7c3      	b.n	5648 <hid_custom_handle_req+0x18>
			*len = MIN(setup->wLength, dev_data->report_size);
    56c0:	88e3      	ldrh	r3, [r4, #6]
    56c2:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    56c6:	429a      	cmp	r2, r3
    56c8:	bf94      	ite	ls
    56ca:	602a      	strls	r2, [r5, #0]
    56cc:	602b      	strhi	r3, [r5, #0]
			*data = (uint8_t *)dev_data->report_desc;
    56ce:	f850 3c10 	ldr.w	r3, [r0, #-16]
			break;
    56d2:	e7f2      	b.n	56ba <hid_custom_handle_req+0x8a>
    56d4:	20000e40 	.word	0x20000e40
    56d8:	0000ffca 	.word	0x0000ffca
    56dc:	0000dc1c 	.word	0x0000dc1c

000056e0 <hid_int_in.part.0>:

static void hid_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
    56e0:	b580      	push	{r7, lr}
    56e2:	af00      	add	r7, sp, #0
	struct hid_device_info *dev_data;
	struct usb_dev_data *common;

	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
	if (common == NULL) {
		LOG_WRN("Device data not found for endpoint %u", ep);
    56e4:	b088      	sub	sp, #32
    56e6:	466a      	mov	r2, sp
    56e8:	4b06      	ldr	r3, [pc, #24]	; (5704 <hid_int_in.part.0+0x24>)
    56ea:	e9c2 3005 	strd	r3, r0, [r2, #20]
    56ee:	2303      	movs	r3, #3
    56f0:	f842 3f10 	str.w	r3, [r2, #16]!
    56f4:	4804      	ldr	r0, [pc, #16]	; (5708 <hid_int_in.part.0+0x28>)
    56f6:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    56fa:	f007 fa42 	bl	cb82 <z_log_msg_static_create.constprop.0>
	    dev_data->ops->int_in_ready == NULL) {
		return;
	}

	dev_data->ops->int_in_ready(common->dev);
}
    56fe:	46bd      	mov	sp, r7
    5700:	bd80      	pop	{r7, pc}
    5702:	bf00      	nop
    5704:	0001000a 	.word	0x0001000a
    5708:	0000dc1c 	.word	0x0000dc1c

0000570c <hid_int_in>:
{
    570c:	b570      	push	{r4, r5, r6, lr}
    570e:	4604      	mov	r4, r0
    5710:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
    5712:	4601      	mov	r1, r0
    5714:	480a      	ldr	r0, [pc, #40]	; (5740 <hid_int_in+0x34>)
    5716:	f007 f9ab 	bl	ca70 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    571a:	b920      	cbnz	r0, 5726 <hid_int_in+0x1a>
    571c:	4620      	mov	r0, r4
}
    571e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    5722:	f7ff bfdd 	b.w	56e0 <hid_int_in.part.0>
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
    5726:	2d02      	cmp	r5, #2
    5728:	d108      	bne.n	573c <hid_int_in+0x30>
    572a:	f850 3c08 	ldr.w	r3, [r0, #-8]
    572e:	b12b      	cbz	r3, 573c <hid_int_in+0x30>
	    dev_data->ops->int_in_ready == NULL) {
    5730:	691b      	ldr	r3, [r3, #16]
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
    5732:	b11b      	cbz	r3, 573c <hid_int_in+0x30>
}
    5734:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	dev_data->ops->int_in_ready(common->dev);
    5738:	6800      	ldr	r0, [r0, #0]
    573a:	4718      	bx	r3
}
    573c:	bd70      	pop	{r4, r5, r6, pc}
    573e:	bf00      	nop
    5740:	20000e40 	.word	0x20000e40

00005744 <usb_hid_register_device>:
	return 0;
}

void usb_hid_register_device(const struct device *dev, const uint8_t *desc,
			     size_t size, const struct hid_ops *ops)
{
    5744:	b510      	push	{r4, lr}
	struct hid_device_info *dev_data = dev->data;
    5746:	6904      	ldr	r4, [r0, #16]

	dev_data->report_desc = desc;
	dev_data->report_size = size;
    5748:	e9c4 1200 	strd	r1, r2, [r4]

	dev_data->ops = ops;
    574c:	60a3      	str	r3, [r4, #8]
	parent->next = child;
    574e:	2300      	movs	r3, #0
    5750:	6163      	str	r3, [r4, #20]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    5752:	4b06      	ldr	r3, [pc, #24]	; (576c <usb_hid_register_device+0x28>)
	dev_data->common.dev = dev;
    5754:	6120      	str	r0, [r4, #16]
    5756:	6859      	ldr	r1, [r3, #4]

	sys_slist_append(&usb_hid_devlist, &dev_data->common.node);
    5758:	f104 0214 	add.w	r2, r4, #20
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    575c:	b911      	cbnz	r1, 5764 <usb_hid_register_device+0x20>
	list->head = node;
    575e:	e9c3 2200 	strd	r2, r2, [r3]

	LOG_DBG("Added dev_data %p dev %p to devlist %p", dev_data, dev,
		&usb_hid_devlist);
}
    5762:	bd10      	pop	{r4, pc}
	parent->next = child;
    5764:	600a      	str	r2, [r1, #0]
	list->tail = node;
    5766:	605a      	str	r2, [r3, #4]
    5768:	e7fb      	b.n	5762 <usb_hid_register_device+0x1e>
    576a:	bf00      	nop
    576c:	20000e40 	.word	0x20000e40

00005770 <hid_int_ep_write>:

int hid_int_ep_write(const struct device *dev, const uint8_t *data, uint32_t data_len,
		     uint32_t *bytes_ret)
{
    5770:	b530      	push	{r4, r5, lr}
	const struct usb_cfg_data *cfg = dev->config;
    5772:	6844      	ldr	r4, [r0, #4]
	struct hid_device_info *hid_dev_data = dev->data;
    5774:	6900      	ldr	r0, [r0, #16]

	if (hid_dev_data->configured && !hid_dev_data->suspended) {
    5776:	7b05      	ldrb	r5, [r0, #12]
{
    5778:	b087      	sub	sp, #28
	if (hid_dev_data->configured && !hid_dev_data->suspended) {
    577a:	b145      	cbz	r5, 578e <hid_int_ep_write+0x1e>
    577c:	7b40      	ldrb	r0, [r0, #13]
    577e:	b930      	cbnz	r0, 578e <hid_int_ep_write+0x1e>
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
    5780:	6a20      	ldr	r0, [r4, #32]
    5782:	7900      	ldrb	r0, [r0, #4]
	} else {
		LOG_WRN("Device is not configured");
		return -EAGAIN;
	}

}
    5784:	b007      	add	sp, #28
    5786:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
    578a:	f007 b93f 	b.w	ca0c <usb_write>
		LOG_WRN("Device is not configured");
    578e:	4b07      	ldr	r3, [pc, #28]	; (57ac <hid_int_ep_write+0x3c>)
    5790:	9305      	str	r3, [sp, #20]
    5792:	4807      	ldr	r0, [pc, #28]	; (57b0 <hid_int_ep_write+0x40>)
    5794:	2302      	movs	r3, #2
    5796:	aa04      	add	r2, sp, #16
    5798:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    579c:	9304      	str	r3, [sp, #16]
    579e:	f007 f9f0 	bl	cb82 <z_log_msg_static_create.constprop.0>
}
    57a2:	f06f 000a 	mvn.w	r0, #10
    57a6:	b007      	add	sp, #28
    57a8:	bd30      	pop	{r4, r5, pc}
    57aa:	bf00      	nop
    57ac:	00010030 	.word	0x00010030
    57b0:	0000dc1c 	.word	0x0000dc1c

000057b4 <endpoint_ctx>:

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    57b4:	0602      	lsls	r2, r0, #24
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    57b6:	f000 037f 	and.w	r3, r0, #127	; 0x7f
	if (NRF_USBD_EPIN_CHECK(ep)) {
    57ba:	d512      	bpl.n	57e2 <endpoint_ctx+0x2e>
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    57bc:	2b08      	cmp	r3, #8
    57be:	d105      	bne.n	57cc <endpoint_ctx+0x18>

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    57c0:	0701      	lsls	r1, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    57c2:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    57c6:	d506      	bpl.n	57d6 <endpoint_ctx+0x22>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    57c8:	480e      	ldr	r0, [pc, #56]	; (5804 <endpoint_ctx+0x50>)
    57ca:	4770      	bx	lr
			if (ep_num >= CFG_EPIN_CNT) {
    57cc:	f010 0f78 	tst.w	r0, #120	; 0x78
    57d0:	d112      	bne.n	57f8 <endpoint_ctx+0x44>
	ep_num = NRF_USBD_EP_NR_GET(ep);
    57d2:	f000 030f 	and.w	r3, r0, #15
		} else {
			return &ctx->ep_ctx[ep_num];
    57d6:	204c      	movs	r0, #76	; 0x4c
    57d8:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    57dc:	4b0a      	ldr	r3, [pc, #40]	; (5808 <endpoint_ctx+0x54>)
    57de:	4418      	add	r0, r3
    57e0:	4770      	bx	lr
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    57e2:	2b08      	cmp	r3, #8
    57e4:	d105      	bne.n	57f2 <endpoint_ctx+0x3e>
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    57e6:	0702      	lsls	r2, r0, #28
	ep_num = NRF_USBD_EP_NR_GET(ep);
    57e8:	f000 030f 	and.w	r3, r0, #15
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    57ec:	d506      	bpl.n	57fc <endpoint_ctx+0x48>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    57ee:	4807      	ldr	r0, [pc, #28]	; (580c <endpoint_ctx+0x58>)
    57f0:	4770      	bx	lr
			if (ep_num >= CFG_EPOUT_CNT) {
    57f2:	f010 0f78 	tst.w	r0, #120	; 0x78
    57f6:	d0f6      	beq.n	57e6 <endpoint_ctx+0x32>
		return NULL;
    57f8:	2000      	movs	r0, #0
					    ep_num];
		}
	}

	return NULL;
}
    57fa:	4770      	bx	lr
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    57fc:	4804      	ldr	r0, [pc, #16]	; (5810 <endpoint_ctx+0x5c>)
    57fe:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    5802:	4770      	bx	lr
    5804:	20000f94 	.word	0x20000f94
    5808:	20000e48 	.word	0x20000e48
    580c:	200010b4 	.word	0x200010b4
    5810:	20000fb4 	.word	0x20000fb4

00005814 <usbd_work_schedule>:
 *
 * Should be called after usbd_evt_put().
 */
static inline void usbd_work_schedule(void)
{
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    5814:	4901      	ldr	r1, [pc, #4]	; (581c <usbd_work_schedule+0x8>)
    5816:	4802      	ldr	r0, [pc, #8]	; (5820 <usbd_work_schedule+0xc>)
    5818:	f007 bed8 	b.w	d5cc <k_work_submit_to_queue>
    581c:	20000e70 	.word	0x20000e70
    5820:	20000900 	.word	0x20000900

00005824 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    5824:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    5826:	4801      	ldr	r0, [pc, #4]	; (582c <usbd_evt_put+0x8>)
    5828:	f007 be6b 	b.w	d502 <k_queue_append>
    582c:	20000330 	.word	0x20000330

00005830 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    5830:	4802      	ldr	r0, [pc, #8]	; (583c <usbd_evt_get+0xc>)
    5832:	2200      	movs	r2, #0
    5834:	2300      	movs	r3, #0
    5836:	f005 ba0f 	b.w	ac58 <z_impl_k_queue_get>
    583a:	bf00      	nop
    583c:	20000330 	.word	0x20000330

00005840 <usbd_evt_flush>:

/**
 * @brief Drop all enqueued events.
 */
static inline void usbd_evt_flush(void)
{
    5840:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5842:	4c05      	ldr	r4, [pc, #20]	; (5858 <usbd_evt_flush+0x18>)
	struct usbd_event *ev;

	do {
		ev = usbd_evt_get();
    5844:	f7ff fff4 	bl	5830 <usbd_evt_get>
		if (ev) {
    5848:	b120      	cbz	r0, 5854 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    584a:	1d01      	adds	r1, r0, #4
    584c:	4620      	mov	r0, r4
    584e:	f007 fd96 	bl	d37e <k_mem_slab_free>
			usbd_evt_free(ev);
		}
	} while (ev != NULL);
    5852:	e7f7      	b.n	5844 <usbd_evt_flush+0x4>
}
    5854:	bd10      	pop	{r4, pc}
    5856:	bf00      	nop
    5858:	200002cc 	.word	0x200002cc

0000585c <usbd_evt_alloc>:
 * This function should be called prior to usbd_evt_put().
 *
 * @returns Pointer to the allocated event or NULL if there was no space left.
 */
static inline struct usbd_event *usbd_evt_alloc(void)
{
    585c:	b510      	push	{r4, lr}
    585e:	b088      	sub	sp, #32
	struct usbd_event *ev;
	struct usbd_mem_block block;

	if (k_mem_slab_alloc(&fifo_elem_slab,
    5860:	4818      	ldr	r0, [pc, #96]	; (58c4 <usbd_evt_alloc+0x68>)
    5862:	2200      	movs	r2, #0
    5864:	2300      	movs	r3, #0
    5866:	a901      	add	r1, sp, #4
    5868:	f005 f83c 	bl	a8e4 <k_mem_slab_alloc>
    586c:	b330      	cbz	r0, 58bc <usbd_evt_alloc+0x60>
			     (void **)&block.data, K_NO_WAIT)) {
		LOG_ERR("USBD event allocation failed!");
    586e:	4b16      	ldr	r3, [pc, #88]	; (58c8 <usbd_evt_alloc+0x6c>)
    5870:	4816      	ldr	r0, [pc, #88]	; (58cc <usbd_evt_alloc+0x70>)
    5872:	9307      	str	r3, [sp, #28]
    5874:	aa06      	add	r2, sp, #24
    5876:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    587a:	2402      	movs	r4, #2
    587c:	9406      	str	r4, [sp, #24]
    587e:	f007 f9a0 	bl	cbc2 <z_log_msg_static_create.constprop.0>
		 * Allocation may fail if workqueue thread is starved or event
		 * queue size is too small (CONFIG_USB_NRFX_EVT_QUEUE_SIZE).
		 * Wipe all events, free the space and schedule
		 * reinitialization.
		 */
		usbd_evt_flush();
    5882:	f7ff ffdd 	bl	5840 <usbd_evt_flush>

		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    5886:	480f      	ldr	r0, [pc, #60]	; (58c4 <usbd_evt_alloc+0x68>)
    5888:	2200      	movs	r2, #0
    588a:	2300      	movs	r3, #0
    588c:	a901      	add	r1, sp, #4
    588e:	f005 f829 	bl	a8e4 <k_mem_slab_alloc>
    5892:	b150      	cbz	r0, 58aa <usbd_evt_alloc+0x4e>
			LOG_ERR("USBD event memory corrupted");
    5894:	4b0e      	ldr	r3, [pc, #56]	; (58d0 <usbd_evt_alloc+0x74>)
    5896:	480d      	ldr	r0, [pc, #52]	; (58cc <usbd_evt_alloc+0x70>)
    5898:	aa06      	add	r2, sp, #24
    589a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    589e:	e9cd 4306 	strd	r4, r3, [sp, #24]
    58a2:	f007 f98e 	bl	cbc2 <z_log_msg_static_create.constprop.0>
			__ASSERT_NO_MSG(0);
			return NULL;
    58a6:	2000      	movs	r0, #0
    58a8:	e00a      	b.n	58c0 <usbd_evt_alloc+0x64>
		}

		ev = (struct usbd_event *)block.data;
    58aa:	9801      	ldr	r0, [sp, #4]
		ev->block = block;
		ev->evt_type = USBD_EVT_REINIT;
    58ac:	2304      	movs	r3, #4
		ev->block = block;
    58ae:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    58b0:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    58b2:	f7ff ffb7 	bl	5824 <usbd_evt_put>
		usbd_work_schedule();
    58b6:	f7ff ffad 	bl	5814 <usbd_work_schedule>

		return NULL;
    58ba:	e7f4      	b.n	58a6 <usbd_evt_alloc+0x4a>
	}

	ev = (struct usbd_event *)block.data;
    58bc:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    58be:	6040      	str	r0, [r0, #4]

	return ev;
}
    58c0:	b008      	add	sp, #32
    58c2:	bd10      	pop	{r4, pc}
    58c4:	200002cc 	.word	0x200002cc
    58c8:	00010051 	.word	0x00010051
    58cc:	0000dc24 	.word	0x0000dc24
    58d0:	0001006f 	.word	0x0001006f

000058d4 <usb_dc_power_event_handler>:

static K_TIMER_DEFINE(delay_timer, attached_evt_delay_handler, NULL);
#endif

static void usb_dc_power_event_handler(nrfx_power_usb_evt_t event)
{
    58d4:	b598      	push	{r3, r4, r7, lr}
    58d6:	2802      	cmp	r0, #2
    58d8:	af00      	add	r7, sp, #0
    58da:	d811      	bhi.n	5900 <usb_dc_power_event_handler+0x2c>
    58dc:	4b10      	ldr	r3, [pc, #64]	; (5920 <usb_dc_power_event_handler+0x4c>)
    58de:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    58e0:	f7ff ffbc 	bl	585c <usbd_evt_alloc>
	if (!ev) {
    58e4:	b150      	cbz	r0, 58fc <usb_dc_power_event_handler+0x28>
	ev->evt_type = USBD_EVT_POWER;
    58e6:	2200      	movs	r2, #0
    58e8:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    58ea:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    58ec:	f7ff ff9a 	bl	5824 <usbd_evt_put>
	if (usbd_ctx.attached) {
    58f0:	4b0c      	ldr	r3, [pc, #48]	; (5924 <usb_dc_power_event_handler+0x50>)
    58f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    58f6:	b10b      	cbz	r3, 58fc <usb_dc_power_event_handler+0x28>
		usbd_work_schedule();
    58f8:	f7ff ff8c 	bl	5814 <usbd_work_schedule>
		LOG_ERR("Unknown USB power event %d", event);
		return;
	}

	submit_dc_power_event(new_state);
}
    58fc:	46bd      	mov	sp, r7
    58fe:	bd98      	pop	{r3, r4, r7, pc}
		LOG_ERR("Unknown USB power event %d", event);
    5900:	466c      	mov	r4, sp
    5902:	b088      	sub	sp, #32
    5904:	466a      	mov	r2, sp
    5906:	4b08      	ldr	r3, [pc, #32]	; (5928 <usb_dc_power_event_handler+0x54>)
	switch (event) {
    5908:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Unknown USB power event %d", event);
    590c:	2303      	movs	r3, #3
    590e:	f842 3f10 	str.w	r3, [r2, #16]!
    5912:	4806      	ldr	r0, [pc, #24]	; (592c <usb_dc_power_event_handler+0x58>)
    5914:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5918:	f007 f953 	bl	cbc2 <z_log_msg_static_create.constprop.0>
    591c:	46a5      	mov	sp, r4
    591e:	e7ed      	b.n	58fc <usb_dc_power_event_handler+0x28>
    5920:	00010261 	.word	0x00010261
    5924:	20000e48 	.word	0x20000e48
    5928:	0001008b 	.word	0x0001008b
    592c:	0000dc24 	.word	0x0000dc24

00005930 <usbd_event_transfer_data>:
		}
	}
}

static void usbd_event_transfer_data(nrfx_usbd_evt_t const *const p_event)
{
    5930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct nrf_usbd_ep_ctx *ep_ctx =
		endpoint_ctx(p_event->data.eptransfer.ep);
    5934:	f890 8002 	ldrb.w	r8, [r0, #2]
{
    5938:	4606      	mov	r6, r0
    593a:	af00      	add	r7, sp, #0
		endpoint_ctx(p_event->data.eptransfer.ep);
    593c:	4640      	mov	r0, r8
    593e:	f7ff ff39 	bl	57b4 <endpoint_ctx>

	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    5942:	f018 0f80 	tst.w	r8, #128	; 0x80
		switch (p_event->data.eptransfer.status) {
    5946:	78f4      	ldrb	r4, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    5948:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    594a:	d025      	beq.n	5998 <usbd_event_transfer_data+0x68>
		switch (p_event->data.eptransfer.status) {
    594c:	b19c      	cbz	r4, 5976 <usbd_event_transfer_data+0x46>
    594e:	2c03      	cmp	r4, #3
    5950:	d01f      	beq.n	5992 <usbd_event_transfer_data+0x62>
			usbd_work_schedule();
		}
		break;

		default: {
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    5952:	466d      	mov	r5, sp
    5954:	b088      	sub	sp, #32
    5956:	466a      	mov	r2, sp
    5958:	4b2a      	ldr	r3, [pc, #168]	; (5a04 <usbd_event_transfer_data+0xd4>)
    595a:	f8c2 801c 	str.w	r8, [r2, #28]
    595e:	e9c2 3405 	strd	r3, r4, [r2, #20]
    5962:	2304      	movs	r3, #4
    5964:	f842 3f10 	str.w	r3, [r2, #16]!
    5968:	4827      	ldr	r0, [pc, #156]	; (5a08 <usbd_event_transfer_data+0xd8>)
    596a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    596e:	f007 f928 	bl	cbc2 <z_log_msg_static_create.constprop.0>
    5972:	46ad      	mov	sp, r5
    5974:	e00d      	b.n	5992 <usbd_event_transfer_data+0x62>
			struct usbd_event *ev = usbd_evt_alloc();
    5976:	f7ff ff71 	bl	585c <usbd_evt_alloc>
			if (!ev) {
    597a:	4603      	mov	r3, r0
    597c:	b148      	cbz	r0, 5992 <usbd_event_transfer_data+0x62>
			ev->evt_type = USBD_EVT_EP;
    597e:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    5980:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    5982:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    5984:	2203      	movs	r2, #3
    5986:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    5988:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
    598a:	f7ff ff4b 	bl	5824 <usbd_evt_put>
			usbd_work_schedule();
    598e:	f7ff ff41 	bl	5814 <usbd_work_schedule>
				p_event->data.eptransfer.ep);
		}
		break;
		}
	}
}
    5992:	46bd      	mov	sp, r7
    5994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (p_event->data.eptransfer.status) {
    5998:	b154      	cbz	r4, 59b0 <usbd_event_transfer_data+0x80>
    599a:	2c01      	cmp	r4, #1
    599c:	d1d9      	bne.n	5952 <usbd_event_transfer_data+0x22>
			struct usbd_event *ev = usbd_evt_alloc();
    599e:	f7ff ff5d 	bl	585c <usbd_evt_alloc>
			if (!ev) {
    59a2:	4603      	mov	r3, r0
    59a4:	2800      	cmp	r0, #0
    59a6:	d0f4      	beq.n	5992 <usbd_event_transfer_data+0x62>
			ep_ctx->read_pending = true;
    59a8:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    59aa:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    59ac:	7304      	strb	r4, [r0, #12]
    59ae:	e7eb      	b.n	5988 <usbd_event_transfer_data+0x58>
			struct usbd_event *ev = usbd_evt_alloc();
    59b0:	f7ff ff54 	bl	585c <usbd_evt_alloc>
			if (!ev) {
    59b4:	2800      	cmp	r0, #0
    59b6:	d0ec      	beq.n	5992 <usbd_event_transfer_data+0x62>
				p_event->data.eptransfer.ep);
    59b8:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    59ba:	4b14      	ldr	r3, [pc, #80]	; (5a0c <usbd_event_transfer_data+0xdc>)
    59bc:	f012 0f80 	tst.w	r2, #128	; 0x80
    59c0:	f002 0108 	and.w	r1, r2, #8
    59c4:	d011      	beq.n	59ea <usbd_event_transfer_data+0xba>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    59c6:	b141      	cbz	r1, 59da <usbd_event_transfer_data+0xaa>
        {
            ret = p_reg->ISOIN.AMOUNT;
    59c8:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    59cc:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    59ce:	2301      	movs	r3, #1
    59d0:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    59d2:	2302      	movs	r3, #2
    59d4:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    59d6:	6085      	str	r5, [r0, #8]
    59d8:	e7d7      	b.n	598a <usbd_event_transfer_data+0x5a>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    59da:	f002 020f 	and.w	r2, r2, #15
    59de:	2114      	movs	r1, #20
    59e0:	fb01 3302 	mla	r3, r1, r2, r3
    59e4:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    59e8:	e7f0      	b.n	59cc <usbd_event_transfer_data+0x9c>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    59ea:	b111      	cbz	r1, 59f2 <usbd_event_transfer_data+0xc2>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    59ec:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    59f0:	e7ec      	b.n	59cc <usbd_event_transfer_data+0x9c>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    59f2:	f002 020f 	and.w	r2, r2, #15
    59f6:	2114      	movs	r1, #20
    59f8:	fb01 3302 	mla	r3, r1, r2, r3
    59fc:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    5a00:	e7e4      	b.n	59cc <usbd_event_transfer_data+0x9c>
    5a02:	bf00      	nop
    5a04:	000100a6 	.word	0x000100a6
    5a08:	0000dc24 	.word	0x0000dc24
    5a0c:	40027000 	.word	0x40027000

00005a10 <usb_init>:
	}
	return 0;
}

static int usb_init(void)
{
    5a10:	b513      	push	{r0, r1, r4, lr}

	static const nrfx_power_usbevt_config_t usbevt_config = {
		.handler = usb_dc_power_event_handler
	};

	err = nrfx_usbd_init(usbd_event_handler);
    5a12:	4812      	ldr	r0, [pc, #72]	; (5a5c <usb_init+0x4c>)
    5a14:	f004 f880 	bl	9b18 <nrfx_usbd_init>
	if (err != NRFX_SUCCESS) {
    5a18:	4b11      	ldr	r3, [pc, #68]	; (5a60 <usb_init+0x50>)
    5a1a:	4298      	cmp	r0, r3
    5a1c:	d11a      	bne.n	5a54 <usb_init+0x44>
	}

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    5a1e:	4811      	ldr	r0, [pc, #68]	; (5a64 <usb_init+0x54>)
    5a20:	f003 fa6e 	bl	8f00 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    5a24:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    5a26:	4810      	ldr	r0, [pc, #64]	; (5a68 <usb_init+0x58>)
    5a28:	f003 fa94 	bl	8f54 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    5a2c:	490f      	ldr	r1, [pc, #60]	; (5a6c <usb_init+0x5c>)
    5a2e:	4810      	ldr	r0, [pc, #64]	; (5a70 <usb_init+0x60>)
    5a30:	9400      	str	r4, [sp, #0]
    5a32:	f04f 33ff 	mov.w	r3, #4294967295
    5a36:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5a3a:	f005 fa99 	bl	af70 <k_work_queue_start>
	return z_impl_k_thread_name_set(thread, str);
    5a3e:	490d      	ldr	r1, [pc, #52]	; (5a74 <usb_init+0x64>)
    5a40:	480b      	ldr	r0, [pc, #44]	; (5a70 <usb_init+0x60>)
    5a42:	f007 fccb 	bl	d3dc <z_impl_k_thread_name_set>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_thread_name_set(&usbd_work_queue.thread, "usbd_workq");
	k_work_init(&ctx->usb_work, usbd_work_handler);
    5a46:	480c      	ldr	r0, [pc, #48]	; (5a78 <usb_init+0x68>)
    5a48:	490c      	ldr	r1, [pc, #48]	; (5a7c <usb_init+0x6c>)
    5a4a:	f007 fda2 	bl	d592 <k_work_init>

	return 0;
    5a4e:	4620      	mov	r0, r4
}
    5a50:	b002      	add	sp, #8
    5a52:	bd10      	pop	{r4, pc}
		return -EIO;
    5a54:	f06f 0004 	mvn.w	r0, #4
    5a58:	e7fa      	b.n	5a50 <usb_init+0x40>
    5a5a:	bf00      	nop
    5a5c:	00005ac1 	.word	0x00005ac1
    5a60:	0bad0000 	.word	0x0bad0000
    5a64:	00010264 	.word	0x00010264
    5a68:	0000dd90 	.word	0x0000dd90
    5a6c:	20002680 	.word	0x20002680
    5a70:	20000900 	.word	0x20000900
    5a74:	000100d2 	.word	0x000100d2
    5a78:	20000e70 	.word	0x20000e70
    5a7c:	00005c99 	.word	0x00005c99

00005a80 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    5a80:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    5a82:	490e      	ldr	r1, [pc, #56]	; (5abc <hfxo_stop.constprop.0.isra.0+0x3c>)
    5a84:	f3bf 8f5b 	dmb	ish
    5a88:	2300      	movs	r3, #0
    5a8a:	e851 2f00 	ldrex	r2, [r1]
    5a8e:	2a01      	cmp	r2, #1
    5a90:	d103      	bne.n	5a9a <hfxo_stop.constprop.0.isra.0+0x1a>
    5a92:	e841 3000 	strex	r0, r3, [r1]
    5a96:	2800      	cmp	r0, #0
    5a98:	d1f7      	bne.n	5a8a <hfxo_stop.constprop.0.isra.0+0xa>
    5a9a:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    5a9e:	d10c      	bne.n	5aba <hfxo_stop.constprop.0.isra.0+0x3a>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    5aa0:	f851 4c04 	ldr.w	r4, [r1, #-4]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    5aa4:	3914      	subs	r1, #20
    5aa6:	4620      	mov	r0, r4
    5aa8:	f006 fc09 	bl	c2be <onoff_cancel>

	if (rv == -EALREADY) {
    5aac:	3078      	adds	r0, #120	; 0x78
    5aae:	d104      	bne.n	5aba <hfxo_stop.constprop.0.isra.0+0x3a>
		rv = onoff_release(mgr);
    5ab0:	4620      	mov	r0, r4
}
    5ab2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5ab6:	f006 bbdd 	b.w	c274 <onoff_release>
    5aba:	bd10      	pop	{r4, pc}
    5abc:	20000e68 	.word	0x20000e68

00005ac0 <usbd_event_handler>:
{
    5ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ac4:	b088      	sub	sp, #32
    5ac6:	4606      	mov	r6, r0
    5ac8:	af00      	add	r7, sp, #0
	struct usbd_event evt = {0};
    5aca:	2214      	movs	r2, #20
    5acc:	2100      	movs	r1, #0
    5ace:	f107 000c 	add.w	r0, r7, #12
    5ad2:	f007 f826 	bl	cb22 <memset>
	switch (p_event->type) {
    5ad6:	7833      	ldrb	r3, [r6, #0]
    5ad8:	3b01      	subs	r3, #1
    5ada:	2b05      	cmp	r3, #5
    5adc:	d821      	bhi.n	5b22 <usbd_event_handler+0x62>
    5ade:	e8df f003 	tbb	[pc, r3]
    5ae2:	039b      	.short	0x039b
    5ae4:	158d1313 	.word	0x158d1313
    5ae8:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    5aea:	753b      	strb	r3, [r7, #20]
		evt.evt_type = USBD_EVT_POWER;
    5aec:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
    5aee:	f7ff feb5 	bl	585c <usbd_evt_alloc>
		if (!ev) {
    5af2:	4603      	mov	r3, r0
    5af4:	b1a8      	cbz	r0, 5b22 <usbd_event_handler+0x62>
		ev->evt_type = evt.evt_type;
    5af6:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    5af8:	f100 0208 	add.w	r2, r0, #8
    5afc:	e9d7 0105 	ldrd	r0, r1, [r7, #20]
    5b00:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    5b04:	4618      	mov	r0, r3
    5b06:	e034      	b.n	5b72 <usbd_event_handler+0xb2>
	switch (p_event->type) {
    5b08:	2304      	movs	r3, #4
    5b0a:	e7ee      	b.n	5aea <usbd_event_handler+0x2a>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    5b0c:	f896 8002 	ldrb.w	r8, [r6, #2]
    5b10:	4640      	mov	r0, r8
    5b12:	f7ff fe4f 	bl	57b4 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    5b16:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    5b18:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
    5b1a:	b133      	cbz	r3, 5b2a <usbd_event_handler+0x6a>
    5b1c:	3b01      	subs	r3, #1
    5b1e:	2b02      	cmp	r3, #2
    5b20:	d968      	bls.n	5bf4 <usbd_event_handler+0x134>
}
    5b22:	3720      	adds	r7, #32
    5b24:	46bd      	mov	sp, r7
    5b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    5b2a:	f018 0f80 	tst.w	r8, #128	; 0x80
		switch (p_event->data.eptransfer.status) {
    5b2e:	78f4      	ldrb	r4, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    5b30:	d024      	beq.n	5b7c <usbd_event_handler+0xbc>
		switch (p_event->data.eptransfer.status) {
    5b32:	b19c      	cbz	r4, 5b5c <usbd_event_handler+0x9c>
    5b34:	2c03      	cmp	r4, #3
    5b36:	d0f4      	beq.n	5b22 <usbd_event_handler+0x62>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    5b38:	466d      	mov	r5, sp
    5b3a:	b088      	sub	sp, #32
    5b3c:	466a      	mov	r2, sp
    5b3e:	4b37      	ldr	r3, [pc, #220]	; (5c1c <usbd_event_handler+0x15c>)
    5b40:	f8c2 801c 	str.w	r8, [r2, #28]
    5b44:	e9c2 3405 	strd	r3, r4, [r2, #20]
    5b48:	2304      	movs	r3, #4
    5b4a:	f842 3f10 	str.w	r3, [r2, #16]!
    5b4e:	4834      	ldr	r0, [pc, #208]	; (5c20 <usbd_event_handler+0x160>)
    5b50:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    5b54:	f007 f835 	bl	cbc2 <z_log_msg_static_create.constprop.0>
    5b58:	46ad      	mov	sp, r5
    5b5a:	e7e2      	b.n	5b22 <usbd_event_handler+0x62>
			struct usbd_event *ev = usbd_evt_alloc();
    5b5c:	f7ff fe7e 	bl	585c <usbd_evt_alloc>
			if (!ev) {
    5b60:	4603      	mov	r3, r0
    5b62:	2800      	cmp	r0, #0
    5b64:	d0dd      	beq.n	5b22 <usbd_event_handler+0x62>
			ev->evt_type = USBD_EVT_EP;
    5b66:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    5b68:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    5b6a:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    5b6c:	2203      	movs	r2, #3
    5b6e:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    5b70:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
    5b72:	f7ff fe57 	bl	5824 <usbd_evt_put>
		usbd_work_schedule();
    5b76:	f7ff fe4d 	bl	5814 <usbd_work_schedule>
    5b7a:	e7d2      	b.n	5b22 <usbd_event_handler+0x62>
		switch (p_event->data.eptransfer.status) {
    5b7c:	b154      	cbz	r4, 5b94 <usbd_event_handler+0xd4>
    5b7e:	2c01      	cmp	r4, #1
    5b80:	d1da      	bne.n	5b38 <usbd_event_handler+0x78>
			struct usbd_event *ev = usbd_evt_alloc();
    5b82:	f7ff fe6b 	bl	585c <usbd_evt_alloc>
			if (!ev) {
    5b86:	4603      	mov	r3, r0
    5b88:	2800      	cmp	r0, #0
    5b8a:	d0ca      	beq.n	5b22 <usbd_event_handler+0x62>
			ep_ctx->read_pending = true;
    5b8c:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    5b8e:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    5b90:	7304      	strb	r4, [r0, #12]
    5b92:	e7ed      	b.n	5b70 <usbd_event_handler+0xb0>
			struct usbd_event *ev = usbd_evt_alloc();
    5b94:	f7ff fe62 	bl	585c <usbd_evt_alloc>
			if (!ev) {
    5b98:	4604      	mov	r4, r0
    5b9a:	2800      	cmp	r0, #0
    5b9c:	d0c1      	beq.n	5b22 <usbd_event_handler+0x62>
			ev->evt_type = USBD_EVT_EP;
    5b9e:	2301      	movs	r3, #1
    5ba0:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    5ba2:	2302      	movs	r3, #2
    5ba4:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    5ba6:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    5ba8:	78b0      	ldrb	r0, [r6, #2]
    5baa:	f105 010c 	add.w	r1, r5, #12
    5bae:	f007 fb3d 	bl	d22c <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    5bb2:	b170      	cbz	r0, 5bd2 <usbd_event_handler+0x112>
				LOG_ERR("_ep_status_get failed! Code: %d",
    5bb4:	466e      	mov	r6, sp
    5bb6:	b088      	sub	sp, #32
    5bb8:	466a      	mov	r2, sp
    5bba:	4b1a      	ldr	r3, [pc, #104]	; (5c24 <usbd_event_handler+0x164>)
    5bbc:	e9c2 3005 	strd	r3, r0, [r2, #20]
    5bc0:	2303      	movs	r3, #3
    5bc2:	f842 3f10 	str.w	r3, [r2, #16]!
    5bc6:	4816      	ldr	r0, [pc, #88]	; (5c20 <usbd_event_handler+0x160>)
    5bc8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5bcc:	f006 fff9 	bl	cbc2 <z_log_msg_static_create.constprop.0>
    5bd0:	46b5      	mov	sp, r6
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    5bd2:	4a15      	ldr	r2, [pc, #84]	; (5c28 <usbd_event_handler+0x168>)
    5bd4:	68e9      	ldr	r1, [r5, #12]
    5bd6:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    5bda:	428b      	cmp	r3, r1
    5bdc:	d906      	bls.n	5bec <usbd_event_handler+0x12c>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    5bde:	1a5b      	subs	r3, r3, r1
    5be0:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    5be4:	f004 f9cc 	bl	9f80 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    5be8:	4620      	mov	r0, r4
    5bea:	e7c2      	b.n	5b72 <usbd_event_handler+0xb2>
				ctx->ctrl_read_len = 0U;
    5bec:	2300      	movs	r3, #0
    5bee:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
    5bf2:	e7f9      	b.n	5be8 <usbd_event_handler+0x128>
			usbd_event_transfer_data(p_event);
    5bf4:	4630      	mov	r0, r6
    5bf6:	f7ff fe9b 	bl	5930 <usbd_event_transfer_data>
	if (put_evt) {
    5bfa:	e792      	b.n	5b22 <usbd_event_handler+0x62>
		nrfx_usbd_setup_get(&drv_setup);
    5bfc:	1d38      	adds	r0, r7, #4
    5bfe:	f004 f999 	bl	9f34 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    5c02:	797b      	ldrb	r3, [r7, #5]
    5c04:	2b05      	cmp	r3, #5
    5c06:	d103      	bne.n	5c10 <usbd_event_handler+0x150>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    5c08:	793b      	ldrb	r3, [r7, #4]
    5c0a:	f013 0f60 	tst.w	r3, #96	; 0x60
    5c0e:	d088      	beq.n	5b22 <usbd_event_handler+0x62>
			evt.evt.ep_evt.ep = ep_ctx;
    5c10:	4b06      	ldr	r3, [pc, #24]	; (5c2c <usbd_event_handler+0x16c>)
    5c12:	617b      	str	r3, [r7, #20]
			evt.evt_type = USBD_EVT_EP;
    5c14:	2401      	movs	r4, #1
    5c16:	e76a      	b.n	5aee <usbd_event_handler+0x2e>
	switch (p_event->type) {
    5c18:	2402      	movs	r4, #2
    5c1a:	e768      	b.n	5aee <usbd_event_handler+0x2e>
    5c1c:	000100a6 	.word	0x000100a6
    5c20:	0000dc24 	.word	0x0000dc24
    5c24:	000100dd 	.word	0x000100dd
    5c28:	20000e48 	.word	0x20000e48
    5c2c:	20000fb4 	.word	0x20000fb4

00005c30 <eps_ctx_init>:
{
    5c30:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    5c32:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    5c34:	f064 007f 	orn	r0, r4, #127	; 0x7f
    5c38:	b2c0      	uxtb	r0, r0
    5c3a:	f7ff fdbb 	bl	57b4 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    5c3e:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    5c40:	f006 ffac 	bl	cb9c <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    5c44:	2c08      	cmp	r4, #8
    5c46:	d1f5      	bne.n	5c34 <eps_ctx_init+0x4>
    5c48:	4d0e      	ldr	r5, [pc, #56]	; (5c84 <eps_ctx_init+0x54>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    5c4a:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    5c4c:	b2e0      	uxtb	r0, r4
    5c4e:	f7ff fdb1 	bl	57b4 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    5c52:	6903      	ldr	r3, [r0, #16]
    5c54:	b903      	cbnz	r3, 5c58 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    5c56:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    5c58:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    5c5a:	f006 ff9f 	bl	cb9c <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    5c5e:	2c08      	cmp	r4, #8
    5c60:	f105 0540 	add.w	r5, r5, #64	; 0x40
    5c64:	d1f2      	bne.n	5c4c <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    5c66:	4808      	ldr	r0, [pc, #32]	; (5c88 <eps_ctx_init+0x58>)
    5c68:	f006 ff98 	bl	cb9c <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    5c6c:	4b07      	ldr	r3, [pc, #28]	; (5c8c <eps_ctx_init+0x5c>)
    5c6e:	f8d3 227c 	ldr.w	r2, [r3, #636]	; 0x27c
    5c72:	b912      	cbnz	r2, 5c7a <eps_ctx_init+0x4a>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    5c74:	4a06      	ldr	r2, [pc, #24]	; (5c90 <eps_ctx_init+0x60>)
    5c76:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    5c7a:	4806      	ldr	r0, [pc, #24]	; (5c94 <eps_ctx_init+0x64>)
    5c7c:	f006 ff8e 	bl	cb9c <ep_ctx_reset>
}
    5c80:	2000      	movs	r0, #0
    5c82:	bd38      	pop	{r3, r4, r5, pc}
    5c84:	200014d8 	.word	0x200014d8
    5c88:	20000f94 	.word	0x20000f94
    5c8c:	20000e48 	.word	0x20000e48
    5c90:	200010d8 	.word	0x200010d8
    5c94:	200010b4 	.word	0x200010b4

00005c98 <usbd_work_handler>:
{
    5c98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->ready;
    5c9c:	4ca3      	ldr	r4, [pc, #652]	; (5f2c <usbd_work_handler+0x294>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5c9e:	f8df a290 	ldr.w	sl, [pc, #656]	; 5f30 <usbd_work_handler+0x298>
{
    5ca2:	b086      	sub	sp, #24
    5ca4:	4680      	mov	r8, r0
    5ca6:	af00      	add	r7, sp, #0
	while ((ev = usbd_evt_get()) != NULL) {
    5ca8:	f7ff fdc2 	bl	5830 <usbd_evt_get>
    5cac:	4606      	mov	r6, r0
    5cae:	b918      	cbnz	r0, 5cb8 <usbd_work_handler+0x20>
}
    5cb0:	3718      	adds	r7, #24
    5cb2:	46bd      	mov	sp, r7
    5cb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return get_usbd_ctx()->ready;
    5cb8:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    5cbc:	7c33      	ldrb	r3, [r6, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5cbe:	f106 0904 	add.w	r9, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    5cc2:	b93a      	cbnz	r2, 5cd4 <usbd_work_handler+0x3c>
    5cc4:	2b00      	cmp	r3, #0
    5cc6:	f000 80af 	beq.w	5e28 <usbd_work_handler+0x190>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5cca:	4899      	ldr	r0, [pc, #612]	; (5f30 <usbd_work_handler+0x298>)
    5ccc:	4649      	mov	r1, r9
    5cce:	f007 fb56 	bl	d37e <k_mem_slab_free>
}
    5cd2:	e7e9      	b.n	5ca8 <usbd_work_handler+0x10>
		switch (ev->evt_type) {
    5cd4:	2b04      	cmp	r3, #4
    5cd6:	f200 8195 	bhi.w	6004 <usbd_work_handler+0x36c>
    5cda:	e8df f013 	tbh	[pc, r3, lsl #1]
    5cde:	00a5      	.short	0x00a5
    5ce0:	013b0005 	.word	0x013b0005
    5ce4:	01780151 	.word	0x01780151
			if (!ctx->attached) {
    5ce8:	f818 3c04 	ldrb.w	r3, [r8, #-4]
    5cec:	b983      	cbnz	r3, 5d10 <usbd_work_handler+0x78>
				LOG_ERR("not attached, EP 0x%02x event dropped",
    5cee:	68b3      	ldr	r3, [r6, #8]
    5cf0:	466d      	mov	r5, sp
    5cf2:	b088      	sub	sp, #32
    5cf4:	7a5b      	ldrb	r3, [r3, #9]
    5cf6:	466a      	mov	r2, sp
    5cf8:	498e      	ldr	r1, [pc, #568]	; (5f34 <usbd_work_handler+0x29c>)
    5cfa:	488f      	ldr	r0, [pc, #572]	; (5f38 <usbd_work_handler+0x2a0>)
    5cfc:	e9c2 1305 	strd	r1, r3, [r2, #20]
    5d00:	2303      	movs	r3, #3
    5d02:	f842 3f10 	str.w	r3, [r2, #16]!
    5d06:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5d0a:	f006 ff5a 	bl	cbc2 <z_log_msg_static_create.constprop.0>
    5d0e:	46ad      	mov	sp, r5
	switch (ep_evt->evt_type) {
    5d10:	7b33      	ldrb	r3, [r6, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    5d12:	68b5      	ldr	r5, [r6, #8]
	switch (ep_evt->evt_type) {
    5d14:	2b03      	cmp	r3, #3
    5d16:	d839      	bhi.n	5d8c <usbd_work_handler+0xf4>
    5d18:	e8df f003 	tbb	[pc, r3]
    5d1c:	736e3f02 	.word	0x736e3f02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    5d20:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    5d22:	2208      	movs	r2, #8
    5d24:	2100      	movs	r1, #0
    5d26:	4630      	mov	r0, r6
    5d28:	f006 fefb 	bl	cb22 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    5d2c:	4b83      	ldr	r3, [pc, #524]	; (5f3c <usbd_work_handler+0x2a4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    5d2e:	4884      	ldr	r0, [pc, #528]	; (5f40 <usbd_work_handler+0x2a8>)
    5d30:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    5d34:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    5d36:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    5d3a:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    5d3c:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    5d40:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    5d44:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    5d48:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    5d4a:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    5d4e:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    5d52:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    5d56:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    5d58:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    5d5c:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    5d60:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    5d64:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    5d66:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    5d68:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    5d6a:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    5d6c:	f006 fece 	bl	cb0c <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    5d70:	682b      	ldr	r3, [r5, #0]
    5d72:	7a68      	ldrb	r0, [r5, #9]
    5d74:	2100      	movs	r1, #0
    5d76:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    5d78:	f996 3000 	ldrsb.w	r3, [r6]
    5d7c:	2b00      	cmp	r3, #0
    5d7e:	db08      	blt.n	5d92 <usbd_work_handler+0xfa>
    5d80:	88f3      	ldrh	r3, [r6, #6]
    5d82:	b133      	cbz	r3, 5d92 <usbd_work_handler+0xfa>
		ctx->ctrl_read_len = usbd_setup->wLength;
    5d84:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    5d88:	f004 f8fa 	bl	9f80 <nrfx_usbd_setup_data_clear>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    5d8c:	4649      	mov	r1, r9
    5d8e:	4650      	mov	r0, sl
    5d90:	e79d      	b.n	5cce <usbd_work_handler+0x36>
		ctx->ctrl_read_len = 0U;
    5d92:	2300      	movs	r3, #0
    5d94:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    5d98:	e7f8      	b.n	5d8c <usbd_work_handler+0xf4>
	if (!ep_ctx->read_pending) {
    5d9a:	7f6b      	ldrb	r3, [r5, #29]
    5d9c:	2b00      	cmp	r3, #0
    5d9e:	d0f5      	beq.n	5d8c <usbd_work_handler+0xf4>
	if (!ep_ctx->read_complete) {
    5da0:	7f2b      	ldrb	r3, [r5, #28]
    5da2:	2b00      	cmp	r3, #0
    5da4:	d0f2      	beq.n	5d8c <usbd_work_handler+0xf4>
	ep_ctx->read_pending = false;
    5da6:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5da8:	4866      	ldr	r0, [pc, #408]	; (5f44 <usbd_work_handler+0x2ac>)
	ep_ctx->read_pending = false;
    5daa:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5dac:	f04f 32ff 	mov.w	r2, #4294967295
    5db0:	f04f 33ff 	mov.w	r3, #4294967295
	ep_ctx->read_complete = false;
    5db4:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5db6:	f006 ff07 	bl	cbc8 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    5dba:	696b      	ldr	r3, [r5, #20]
    5dbc:	603b      	str	r3, [r7, #0]
    5dbe:	686b      	ldr	r3, [r5, #4]
    5dc0:	e9c7 3601 	strd	r3, r6, [r7, #4]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    5dc4:	4639      	mov	r1, r7
    5dc6:	7a68      	ldrb	r0, [r5, #9]
    5dc8:	f003 fee8 	bl	9b9c <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    5dcc:	4b5e      	ldr	r3, [pc, #376]	; (5f48 <usbd_work_handler+0x2b0>)
    5dce:	4298      	cmp	r0, r3
    5dd0:	d00e      	beq.n	5df0 <usbd_work_handler+0x158>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    5dd2:	466d      	mov	r5, sp
    5dd4:	b088      	sub	sp, #32
    5dd6:	466a      	mov	r2, sp
    5dd8:	4b5c      	ldr	r3, [pc, #368]	; (5f4c <usbd_work_handler+0x2b4>)
    5dda:	e9c2 3005 	strd	r3, r0, [r2, #20]
    5dde:	2303      	movs	r3, #3
    5de0:	f842 3f10 	str.w	r3, [r2, #16]!
    5de4:	4854      	ldr	r0, [pc, #336]	; (5f38 <usbd_work_handler+0x2a0>)
    5de6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5dea:	f006 feea 	bl	cbc2 <z_log_msg_static_create.constprop.0>
    5dee:	46ad      	mov	sp, r5
	k_mutex_unlock(&ctx->drv_lock);
    5df0:	4854      	ldr	r0, [pc, #336]	; (5f44 <usbd_work_handler+0x2ac>)
    5df2:	f006 feeb 	bl	cbcc <k_mutex_unlock.isra.0>
    5df6:	e7c9      	b.n	5d8c <usbd_work_handler+0xf4>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    5df8:	682b      	ldr	r3, [r5, #0]
    5dfa:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    5dfc:	7a68      	ldrb	r0, [r5, #9]
    5dfe:	4798      	blx	r3
		break;
    5e00:	e7c4      	b.n	5d8c <usbd_work_handler+0xf4>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    5e02:	7aab      	ldrb	r3, [r5, #10]
    5e04:	b96b      	cbnz	r3, 5e22 <usbd_work_handler+0x18a>
    5e06:	7feb      	ldrb	r3, [r5, #31]
    5e08:	b95b      	cbnz	r3, 5e22 <usbd_work_handler+0x18a>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5e0a:	484e      	ldr	r0, [pc, #312]	; (5f44 <usbd_work_handler+0x2ac>)
    5e0c:	f04f 32ff 	mov.w	r2, #4294967295
    5e10:	f04f 33ff 	mov.w	r3, #4294967295
    5e14:	f006 fed8 	bl	cbc8 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    5e18:	f004 f8e6 	bl	9fe8 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    5e1c:	4849      	ldr	r0, [pc, #292]	; (5f44 <usbd_work_handler+0x2ac>)
    5e1e:	f006 fed5 	bl	cbcc <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    5e22:	682b      	ldr	r3, [r5, #0]
    5e24:	2102      	movs	r1, #2
    5e26:	e7e9      	b.n	5dfc <usbd_work_handler+0x164>
	switch (pwr_evt->state) {
    5e28:	7a33      	ldrb	r3, [r6, #8]
    5e2a:	2b04      	cmp	r3, #4
    5e2c:	d8ae      	bhi.n	5d8c <usbd_work_handler+0xf4>
    5e2e:	e8df f003 	tbb	[pc, r3]
    5e32:	0359      	.short	0x0359
    5e34:	6723      	.short	0x6723
    5e36:	73          	.byte	0x73
    5e37:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    5e38:	f003 fe38 	bl	9aac <nrfx_usbd_is_enabled>
    5e3c:	4605      	mov	r5, r0
    5e3e:	2800      	cmp	r0, #0
    5e40:	d1a4      	bne.n	5d8c <usbd_work_handler+0xf4>
			nrfx_usbd_enable();
    5e42:	f003 fdc5 	bl	99d0 <nrfx_usbd_enable>
    5e46:	f3bf 8f5b 	dmb	ish
    5e4a:	4941      	ldr	r1, [pc, #260]	; (5f50 <usbd_work_handler+0x2b8>)
    5e4c:	2301      	movs	r3, #1
    5e4e:	e851 2f00 	ldrex	r2, [r1]
    5e52:	2a00      	cmp	r2, #0
    5e54:	d103      	bne.n	5e5e <usbd_work_handler+0x1c6>
    5e56:	e841 3000 	strex	r0, r3, [r1]
    5e5a:	2800      	cmp	r0, #0
    5e5c:	d1f7      	bne.n	5e4e <usbd_work_handler+0x1b6>
    5e5e:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    5e62:	d193      	bne.n	5d8c <usbd_work_handler+0xf4>
	*notify = (struct sys_notify){
    5e64:	f841 5c08 	str.w	r5, [r1, #-8]
    5e68:	f841 5c10 	str.w	r5, [r1, #-16]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    5e6c:	69e0      	ldr	r0, [r4, #28]
    5e6e:	6163      	str	r3, [r4, #20]
    5e70:	3914      	subs	r1, #20
    5e72:	f006 f9a7 	bl	c1c4 <onoff_request>
    5e76:	e789      	b.n	5d8c <usbd_work_handler+0xf4>
	switch (pwr_evt->state) {
    5e78:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    5e7a:	f065 007f 	orn	r0, r5, #127	; 0x7f
    5e7e:	b2c0      	uxtb	r0, r0
    5e80:	f7ff fc98 	bl	57b4 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    5e84:	7a03      	ldrb	r3, [r0, #8]
    5e86:	b113      	cbz	r3, 5e8e <usbd_work_handler+0x1f6>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    5e88:	7a40      	ldrb	r0, [r0, #9]
    5e8a:	f004 fa5f 	bl	a34c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    5e8e:	3501      	adds	r5, #1
    5e90:	2d08      	cmp	r5, #8
    5e92:	d1f2      	bne.n	5e7a <usbd_work_handler+0x1e2>
		if (ep_ctx->cfg.en) {
    5e94:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    5e98:	b11b      	cbz	r3, 5ea2 <usbd_work_handler+0x20a>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    5e9a:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    5e9e:	f004 fa55 	bl	a34c <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    5ea2:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    5ea4:	b2e8      	uxtb	r0, r5
    5ea6:	f7ff fc85 	bl	57b4 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    5eaa:	7a03      	ldrb	r3, [r0, #8]
    5eac:	b113      	cbz	r3, 5eb4 <usbd_work_handler+0x21c>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    5eae:	7a40      	ldrb	r0, [r0, #9]
    5eb0:	f004 fa4c 	bl	a34c <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    5eb4:	3501      	adds	r5, #1
    5eb6:	2d08      	cmp	r5, #8
    5eb8:	d1f4      	bne.n	5ea4 <usbd_work_handler+0x20c>
		if (ep_ctx->cfg.en) {
    5eba:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    5ebe:	b11b      	cbz	r3, 5ec8 <usbd_work_handler+0x230>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    5ec0:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    5ec4:	f004 fa42 	bl	a34c <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    5ec8:	2001      	movs	r0, #1
    5eca:	f003 fdd1 	bl	9a70 <nrfx_usbd_start>
		ctx->ready = true;
    5ece:	2301      	movs	r3, #1
    5ed0:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    5ed4:	6823      	ldr	r3, [r4, #0]
    5ed6:	2b00      	cmp	r3, #0
    5ed8:	f43f af58 	beq.w	5d8c <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    5edc:	2100      	movs	r1, #0
    5ede:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_RESET, NULL);
    5ee0:	4798      	blx	r3
    5ee2:	e753      	b.n	5d8c <usbd_work_handler+0xf4>
		ctx->ready = false;
    5ee4:	2500      	movs	r5, #0
    5ee6:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    5eea:	f004 f9e9 	bl	a2c0 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    5eee:	f7ff fdc7 	bl	5a80 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    5ef2:	6823      	ldr	r3, [r4, #0]
    5ef4:	2b00      	cmp	r3, #0
    5ef6:	f43f af49 	beq.w	5d8c <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    5efa:	4629      	mov	r1, r5
    5efc:	2004      	movs	r0, #4
    5efe:	e7ef      	b.n	5ee0 <usbd_work_handler+0x248>
		if (dev_ready()) {
    5f00:	2a00      	cmp	r2, #0
    5f02:	f43f af43 	beq.w	5d8c <usbd_work_handler+0xf4>
			nrfx_usbd_suspend();
    5f06:	f003 fddb 	bl	9ac0 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    5f0a:	6823      	ldr	r3, [r4, #0]
    5f0c:	2b00      	cmp	r3, #0
    5f0e:	f43f af3d 	beq.w	5d8c <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    5f12:	2100      	movs	r1, #0
    5f14:	2005      	movs	r0, #5
    5f16:	e7e3      	b.n	5ee0 <usbd_work_handler+0x248>
		if (ctx->status_cb && dev_ready()) {
    5f18:	6823      	ldr	r3, [r4, #0]
    5f1a:	2b00      	cmp	r3, #0
    5f1c:	f43f af36 	beq.w	5d8c <usbd_work_handler+0xf4>
    5f20:	2a00      	cmp	r2, #0
    5f22:	f43f af33 	beq.w	5d8c <usbd_work_handler+0xf4>
			ctx->status_cb(USB_DC_RESUME, NULL);
    5f26:	2100      	movs	r1, #0
    5f28:	2006      	movs	r0, #6
    5f2a:	e7d9      	b.n	5ee0 <usbd_work_handler+0x248>
    5f2c:	20000e48 	.word	0x20000e48
    5f30:	200002cc 	.word	0x200002cc
    5f34:	000100fd 	.word	0x000100fd
    5f38:	0000dc24 	.word	0x0000dc24
    5f3c:	40027000 	.word	0x40027000
    5f40:	20000e4c 	.word	0x20000e4c
    5f44:	20000e80 	.word	0x20000e80
    5f48:	0bad0000 	.word	0x0bad0000
    5f4c:	00010123 	.word	0x00010123
    5f50:	20000e68 	.word	0x20000e68
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    5f54:	f108 0510 	add.w	r5, r8, #16
    5f58:	f04f 33ff 	mov.w	r3, #4294967295
    5f5c:	f04f 32ff 	mov.w	r2, #4294967295
    5f60:	4628      	mov	r0, r5
    5f62:	f006 fe31 	bl	cbc8 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    5f66:	f7ff fe63 	bl	5c30 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    5f6a:	4628      	mov	r0, r5
    5f6c:	f006 fe2e 	bl	cbcc <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    5f70:	f858 3c28 	ldr.w	r3, [r8, #-40]
    5f74:	2b00      	cmp	r3, #0
    5f76:	f43f af09 	beq.w	5d8c <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_RESET, NULL);
    5f7a:	2100      	movs	r1, #0
    5f7c:	2001      	movs	r0, #1
    5f7e:	e7af      	b.n	5ee0 <usbd_work_handler+0x248>
	if (ep_ctx->cfg.en) {
    5f80:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    5f84:	b193      	cbz	r3, 5fac <usbd_work_handler+0x314>
		ep_ctx->read_pending = true;
    5f86:	2501      	movs	r5, #1
    5f88:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    5f8c:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    5f90:	f7ff fc64 	bl	585c <usbd_evt_alloc>
		if (!ev) {
    5f94:	b990      	cbnz	r0, 5fbc <usbd_work_handler+0x324>
			LOG_ERR("Failed to alloc evt");
    5f96:	4b23      	ldr	r3, [pc, #140]	; (6024 <usbd_work_handler+0x38c>)
    5f98:	617b      	str	r3, [r7, #20]
    5f9a:	2302      	movs	r3, #2
    5f9c:	4822      	ldr	r0, [pc, #136]	; (6028 <usbd_work_handler+0x390>)
    5f9e:	613b      	str	r3, [r7, #16]
    5fa0:	f107 0210 	add.w	r2, r7, #16
    5fa4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5fa8:	f006 fe0b 	bl	cbc2 <z_log_msg_static_create.constprop.0>
			if (ctx->status_cb) {
    5fac:	f858 3c28 	ldr.w	r3, [r8, #-40]
    5fb0:	2b00      	cmp	r3, #0
    5fb2:	f43f aeeb 	beq.w	5d8c <usbd_work_handler+0xf4>
				ctx->status_cb(USB_DC_SOF, NULL);
    5fb6:	2100      	movs	r1, #0
    5fb8:	200a      	movs	r0, #10
    5fba:	e791      	b.n	5ee0 <usbd_work_handler+0x248>
		ev->evt.ep_evt.ep = ep_ctx;
    5fbc:	4a1b      	ldr	r2, [pc, #108]	; (602c <usbd_work_handler+0x394>)
		ev->evt_type = USBD_EVT_EP;
    5fbe:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    5fc0:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    5fc2:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    5fc4:	f7ff fc2e 	bl	5824 <usbd_evt_put>
		usbd_work_schedule();
    5fc8:	f7ff fc24 	bl	5814 <usbd_work_schedule>
    5fcc:	e7ee      	b.n	5fac <usbd_work_handler+0x314>
				LOG_ERR("USBD event queue full!");
    5fce:	4b18      	ldr	r3, [pc, #96]	; (6030 <usbd_work_handler+0x398>)
    5fd0:	617b      	str	r3, [r7, #20]
    5fd2:	2302      	movs	r3, #2
    5fd4:	613b      	str	r3, [r7, #16]
    5fd6:	f107 0210 	add.w	r2, r7, #16
    5fda:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5fde:	4812      	ldr	r0, [pc, #72]	; (6028 <usbd_work_handler+0x390>)
    5fe0:	f006 fdef 	bl	cbc2 <z_log_msg_static_create.constprop.0>
	nrfx_power_usbevt_disable();
    5fe4:	f007 f880 	bl	d0e8 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    5fe8:	f004 f96a 	bl	a2c0 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    5fec:	f003 fce6 	bl	99bc <nrfx_usbd_uninit>
	usbd_evt_flush();
    5ff0:	f7ff fc26 	bl	5840 <usbd_evt_flush>
	ret = eps_ctx_init();
    5ff4:	f7ff fe1c 	bl	5c30 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    5ff8:	f007 f86f 	bl	d0da <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    5ffc:	480d      	ldr	r0, [pc, #52]	; (6034 <usbd_work_handler+0x39c>)
    5ffe:	f003 fd8b 	bl	9b18 <nrfx_usbd_init>
}
    6002:	e6c3      	b.n	5d8c <usbd_work_handler+0xf4>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    6004:	466d      	mov	r5, sp
    6006:	b088      	sub	sp, #32
    6008:	466a      	mov	r2, sp
    600a:	490b      	ldr	r1, [pc, #44]	; (6038 <usbd_work_handler+0x3a0>)
    600c:	4806      	ldr	r0, [pc, #24]	; (6028 <usbd_work_handler+0x390>)
		switch (ev->evt_type) {
    600e:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    6012:	2303      	movs	r3, #3
    6014:	f842 3f10 	str.w	r3, [r2, #16]!
    6018:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    601c:	f006 fdd1 	bl	cbc2 <z_log_msg_static_create.constprop.0>
    6020:	46ad      	mov	sp, r5
    6022:	e6b3      	b.n	5d8c <usbd_work_handler+0xf4>
    6024:	00010149 	.word	0x00010149
    6028:	0000dc24 	.word	0x0000dc24
    602c:	200010b4 	.word	0x200010b4
    6030:	0001015d 	.word	0x0001015d
    6034:	00005ac1 	.word	0x00005ac1
    6038:	00010174 	.word	0x00010174

0000603c <usb_dc_attach>:
{
    603c:	b538      	push	{r3, r4, r5, lr}
	if (ctx->attached) {
    603e:	4d16      	ldr	r5, [pc, #88]	; (6098 <usb_dc_attach+0x5c>)
    6040:	f895 4024 	ldrb.w	r4, [r5, #36]	; 0x24
    6044:	bb2c      	cbnz	r4, 6092 <usb_dc_attach+0x56>
	return z_impl_k_mutex_init(mutex);
    6046:	f105 0038 	add.w	r0, r5, #56	; 0x38
    604a:	f007 f9dd 	bl	d408 <z_impl_k_mutex_init>
		z_nrf_clock_control_get_onoff(
    604e:	4620      	mov	r0, r4
    6050:	f000 fbbe 	bl	67d0 <z_nrf_clock_control_get_onoff>
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6054:	4622      	mov	r2, r4
    6056:	2101      	movs	r1, #1
	ctx->hfxo_mgr =
    6058:	61e8      	str	r0, [r5, #28]
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    605a:	2027      	movs	r0, #39	; 0x27
    605c:	f7fe fc6a 	bl	4934 <z_arm_irq_priority_set>
	nrfx_power_usbevt_enable();
    6060:	f007 f83b 	bl	d0da <nrfx_power_usbevt_enable>
	ret = eps_ctx_init();
    6064:	f7ff fde4 	bl	5c30 <eps_ctx_init>
	if (ret == 0) {
    6068:	4604      	mov	r4, r0
    606a:	b910      	cbnz	r0, 6072 <usb_dc_attach+0x36>
		ctx->attached = true;
    606c:	2301      	movs	r3, #1
    606e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    6072:	4b0a      	ldr	r3, [pc, #40]	; (609c <usb_dc_attach+0x60>)
	if (!k_fifo_is_empty(&usbd_evt_fifo)) {
    6074:	681b      	ldr	r3, [r3, #0]
    6076:	b10b      	cbz	r3, 607c <usb_dc_attach+0x40>
		usbd_work_schedule();
    6078:	f7ff fbcc 	bl	5814 <usbd_work_schedule>
#endif // NRF_POWER_HAS_MAINREGSTATUS

#if NRF_POWER_HAS_USBREG
NRF_STATIC_INLINE uint32_t nrf_power_usbregstatus_get(NRF_POWER_Type const * p_reg)
{
    return p_reg->USBREGSTATUS;
    607c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6080:	f8d3 3438 	ldr.w	r3, [r3, #1080]	; 0x438
#ifndef NRFX_DECLARE_ONLY
#if NRF_POWER_HAS_USBREG
NRFX_STATIC_INLINE nrfx_power_usb_state_t nrfx_power_usbstatus_get(void)
{
    uint32_t status = nrf_power_usbregstatus_get(NRF_POWER);
    if(0 == (status & NRF_POWER_USBREGSTATUS_VBUSDETECT_MASK))
    6084:	07db      	lsls	r3, r3, #31
    6086:	d502      	bpl.n	608e <usb_dc_attach+0x52>
		usb_dc_power_event_handler(NRFX_POWER_USB_EVT_DETECTED);
    6088:	2000      	movs	r0, #0
    608a:	f7ff fc23 	bl	58d4 <usb_dc_power_event_handler>
}
    608e:	4620      	mov	r0, r4
    6090:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
    6092:	2400      	movs	r4, #0
    6094:	e7fb      	b.n	608e <usb_dc_attach+0x52>
    6096:	bf00      	nop
    6098:	20000e48 	.word	0x20000e48
    609c:	20000330 	.word	0x20000330

000060a0 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    60a0:	4b07      	ldr	r3, [pc, #28]	; (60c0 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    60a2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    60a6:	b13a      	cbz	r2, 60b8 <usb_dc_set_address+0x18>
    60a8:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		return -ENODEV;
    60ac:	2b00      	cmp	r3, #0
    60ae:	bf14      	ite	ne
    60b0:	2000      	movne	r0, #0
    60b2:	f06f 0012 	mvneq.w	r0, #18
    60b6:	4770      	bx	lr
    60b8:	f06f 0012 	mvn.w	r0, #18
}
    60bc:	4770      	bx	lr
    60be:	bf00      	nop
    60c0:	20000e48 	.word	0x20000e48

000060c4 <usb_dc_ep_check_cap>:
{
    60c4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    60c6:	4603      	mov	r3, r0
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    60c8:	7802      	ldrb	r2, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    60ca:	791b      	ldrb	r3, [r3, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    60cc:	f002 000f 	and.w	r0, r2, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    60d0:	b97b      	cbnz	r3, 60f2 <usb_dc_ep_check_cap+0x2e>
    60d2:	b158      	cbz	r0, 60ec <usb_dc_ep_check_cap+0x28>
		LOG_ERR("invalid endpoint configuration");
    60d4:	4b10      	ldr	r3, [pc, #64]	; (6118 <usb_dc_ep_check_cap+0x54>)
		LOG_ERR("invalid endpoint index/address");
    60d6:	9305      	str	r3, [sp, #20]
    60d8:	2302      	movs	r3, #2
    60da:	9304      	str	r3, [sp, #16]
    60dc:	aa04      	add	r2, sp, #16
    60de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    60e2:	480e      	ldr	r0, [pc, #56]	; (611c <usb_dc_ep_check_cap+0x58>)
    60e4:	f006 fd6d 	bl	cbc2 <z_log_msg_static_create.constprop.0>
		return -1;
    60e8:	f04f 30ff 	mov.w	r0, #4294967295
}
    60ec:	b007      	add	sp, #28
    60ee:	f85d fb04 	ldr.w	pc, [sp], #4
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    60f2:	2808      	cmp	r0, #8
    60f4:	d901      	bls.n	60fa <usb_dc_ep_check_cap+0x36>
		LOG_ERR("invalid endpoint index/address");
    60f6:	4b0a      	ldr	r3, [pc, #40]	; (6120 <usb_dc_ep_check_cap+0x5c>)
    60f8:	e7ed      	b.n	60d6 <usb_dc_ep_check_cap+0x12>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    60fa:	2b01      	cmp	r3, #1
    60fc:	d109      	bne.n	6112 <usb_dc_ep_check_cap+0x4e>
    60fe:	0713      	lsls	r3, r2, #28
    6100:	d407      	bmi.n	6112 <usb_dc_ep_check_cap+0x4e>
		LOG_WRN("invalid endpoint type");
    6102:	4b08      	ldr	r3, [pc, #32]	; (6124 <usb_dc_ep_check_cap+0x60>)
    6104:	9305      	str	r3, [sp, #20]
    6106:	2302      	movs	r3, #2
    6108:	9304      	str	r3, [sp, #16]
    610a:	aa04      	add	r2, sp, #16
    610c:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    6110:	e7e7      	b.n	60e2 <usb_dc_ep_check_cap+0x1e>
	return 0;
    6112:	2000      	movs	r0, #0
    6114:	e7ea      	b.n	60ec <usb_dc_ep_check_cap+0x28>
    6116:	bf00      	nop
    6118:	0001018b 	.word	0x0001018b
    611c:	0000dc24 	.word	0x0000dc24
    6120:	000101aa 	.word	0x000101aa
    6124:	000101c9 	.word	0x000101c9

00006128 <usb_dc_ep_configure>:
{
    6128:	b530      	push	{r4, r5, lr}
	return get_usbd_ctx()->attached;
    612a:	4b16      	ldr	r3, [pc, #88]	; (6184 <usb_dc_ep_configure+0x5c>)
	if (!dev_attached()) {
    612c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    6130:	b087      	sub	sp, #28
    6132:	4604      	mov	r4, r0
	if (!dev_attached()) {
    6134:	b31b      	cbz	r3, 617e <usb_dc_ep_configure+0x56>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    6136:	7805      	ldrb	r5, [r0, #0]
    6138:	4628      	mov	r0, r5
    613a:	f7ff fb3b 	bl	57b4 <endpoint_ctx>
	if (!ep_ctx) {
    613e:	b1b0      	cbz	r0, 616e <usb_dc_ep_configure+0x46>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    6140:	7245      	strb	r5, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    6142:	7923      	ldrb	r3, [r4, #4]
    6144:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    6146:	8863      	ldrh	r3, [r4, #2]
    6148:	6043      	str	r3, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    614a:	7820      	ldrb	r0, [r4, #0]
    614c:	8861      	ldrh	r1, [r4, #2]
    614e:	f010 0f08 	tst.w	r0, #8
    6152:	d110      	bne.n	6176 <usb_dc_ep_configure+0x4e>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    6154:	1e4b      	subs	r3, r1, #1
    6156:	420b      	tst	r3, r1
    6158:	d00d      	beq.n	6176 <usb_dc_ep_configure+0x4e>
			LOG_ERR("EP max packet size must be a power of 2");
    615a:	4b0b      	ldr	r3, [pc, #44]	; (6188 <usb_dc_ep_configure+0x60>)
    615c:	9305      	str	r3, [sp, #20]
    615e:	480b      	ldr	r0, [pc, #44]	; (618c <usb_dc_ep_configure+0x64>)
    6160:	2302      	movs	r3, #2
    6162:	aa04      	add	r2, sp, #16
    6164:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6168:	9304      	str	r3, [sp, #16]
    616a:	f006 fd2a 	bl	cbc2 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    616e:	f06f 0015 	mvn.w	r0, #21
}
    6172:	b007      	add	sp, #28
    6174:	bd30      	pop	{r4, r5, pc}
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    6176:	f007 f854 	bl	d222 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    617a:	2000      	movs	r0, #0
    617c:	e7f9      	b.n	6172 <usb_dc_ep_configure+0x4a>
		return -ENODEV;
    617e:	f06f 0012 	mvn.w	r0, #18
    6182:	e7f6      	b.n	6172 <usb_dc_ep_configure+0x4a>
    6184:	20000e48 	.word	0x20000e48
    6188:	000101df 	.word	0x000101df
    618c:	0000dc24 	.word	0x0000dc24

00006190 <usb_dc_ep_set_stall>:
{
    6190:	b530      	push	{r4, r5, lr}
	return get_usbd_ctx()->attached;
    6192:	4b19      	ldr	r3, [pc, #100]	; (61f8 <usb_dc_ep_set_stall+0x68>)
	if (!dev_attached() || !dev_ready()) {
    6194:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    6198:	b087      	sub	sp, #28
    619a:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    619c:	b342      	cbz	r2, 61f0 <usb_dc_ep_set_stall+0x60>
    619e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    61a2:	b32b      	cbz	r3, 61f0 <usb_dc_ep_set_stall+0x60>
	ep_ctx = endpoint_ctx(ep);
    61a4:	f7ff fb06 	bl	57b4 <endpoint_ctx>
	if (!ep_ctx) {
    61a8:	4604      	mov	r4, r0
    61aa:	b918      	cbnz	r0, 61b4 <usb_dc_ep_set_stall+0x24>
		return -EINVAL;
    61ac:	f06f 0015 	mvn.w	r0, #21
}
    61b0:	b007      	add	sp, #28
    61b2:	bd30      	pop	{r4, r5, pc}
	switch (ep_ctx->cfg.type) {
    61b4:	7a83      	ldrb	r3, [r0, #10]
    61b6:	2b01      	cmp	r3, #1
    61b8:	d00f      	beq.n	61da <usb_dc_ep_set_stall+0x4a>
    61ba:	d907      	bls.n	61cc <usb_dc_ep_set_stall+0x3c>
    61bc:	3b02      	subs	r3, #2
    61be:	2b01      	cmp	r3, #1
    61c0:	d907      	bls.n	61d2 <usb_dc_ep_set_stall+0x42>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    61c2:	6963      	ldr	r3, [r4, #20]
    61c4:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    61c6:	2000      	movs	r0, #0
    61c8:	60e0      	str	r0, [r4, #12]
	return 0;
    61ca:	e7f1      	b.n	61b0 <usb_dc_ep_set_stall+0x20>
		nrfx_usbd_setup_stall();
    61cc:	f003 ff14 	bl	9ff8 <nrfx_usbd_setup_stall>
		break;
    61d0:	e7f7      	b.n	61c2 <usb_dc_ep_set_stall+0x32>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    61d2:	4628      	mov	r0, r5
    61d4:	f003 fe80 	bl	9ed8 <nrfx_usbd_ep_stall>
		break;
    61d8:	e7f3      	b.n	61c2 <usb_dc_ep_set_stall+0x32>
		LOG_ERR("STALL unsupported on ISO endpoint");
    61da:	4b08      	ldr	r3, [pc, #32]	; (61fc <usb_dc_ep_set_stall+0x6c>)
    61dc:	9305      	str	r3, [sp, #20]
    61de:	4808      	ldr	r0, [pc, #32]	; (6200 <usb_dc_ep_set_stall+0x70>)
    61e0:	2302      	movs	r3, #2
    61e2:	aa04      	add	r2, sp, #16
    61e4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    61e8:	9304      	str	r3, [sp, #16]
    61ea:	f006 fcea 	bl	cbc2 <z_log_msg_static_create.constprop.0>
		return -EINVAL;
    61ee:	e7dd      	b.n	61ac <usb_dc_ep_set_stall+0x1c>
		return -ENODEV;
    61f0:	f06f 0012 	mvn.w	r0, #18
    61f4:	e7dc      	b.n	61b0 <usb_dc_ep_set_stall+0x20>
    61f6:	bf00      	nop
    61f8:	20000e48 	.word	0x20000e48
    61fc:	00010207 	.word	0x00010207
    6200:	0000dc24 	.word	0x0000dc24

00006204 <usb_dc_ep_clear_stall>:
{
    6204:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6206:	4b0e      	ldr	r3, [pc, #56]	; (6240 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    6208:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    620c:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    620e:	b182      	cbz	r2, 6232 <usb_dc_ep_clear_stall+0x2e>
    6210:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6214:	b16b      	cbz	r3, 6232 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    6216:	f7ff facd 	bl	57b4 <endpoint_ctx>
	if (!ep_ctx) {
    621a:	b168      	cbz	r0, 6238 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    621c:	f015 0408 	ands.w	r4, r5, #8
    6220:	d10a      	bne.n	6238 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    6222:	4628      	mov	r0, r5
    6224:	f003 fe7a 	bl	9f1c <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    6228:	4628      	mov	r0, r5
    622a:	f004 f8e3 	bl	a3f4 <nrfx_usbd_ep_stall_clear>
	return 0;
    622e:	4620      	mov	r0, r4
}
    6230:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    6232:	f06f 0012 	mvn.w	r0, #18
    6236:	e7fb      	b.n	6230 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    6238:	f06f 0015 	mvn.w	r0, #21
    623c:	e7f8      	b.n	6230 <usb_dc_ep_clear_stall+0x2c>
    623e:	bf00      	nop
    6240:	20000e48 	.word	0x20000e48

00006244 <usb_dc_ep_is_stalled>:
{
    6244:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    6246:	4b0c      	ldr	r3, [pc, #48]	; (6278 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    6248:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    624c:	4605      	mov	r5, r0
    624e:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    6250:	b162      	cbz	r2, 626c <usb_dc_ep_is_stalled+0x28>
    6252:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6256:	b14b      	cbz	r3, 626c <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    6258:	f7ff faac 	bl	57b4 <endpoint_ctx>
	if (!ep_ctx) {
    625c:	b148      	cbz	r0, 6272 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    625e:	b144      	cbz	r4, 6272 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    6260:	4628      	mov	r0, r5
    6262:	f003 fe41 	bl	9ee8 <nrfx_usbd_ep_stall_check>
    6266:	7020      	strb	r0, [r4, #0]
	return 0;
    6268:	2000      	movs	r0, #0
}
    626a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    626c:	f06f 0012 	mvn.w	r0, #18
    6270:	e7fb      	b.n	626a <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    6272:	f06f 0015 	mvn.w	r0, #21
    6276:	e7f8      	b.n	626a <usb_dc_ep_is_stalled+0x26>
    6278:	20000e48 	.word	0x20000e48

0000627c <usb_dc_ep_enable>:
{
    627c:	b570      	push	{r4, r5, r6, lr}
	return get_usbd_ctx()->attached;
    627e:	4e13      	ldr	r6, [pc, #76]	; (62cc <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    6280:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
{
    6284:	4604      	mov	r4, r0
	if (!dev_attached()) {
    6286:	b1c3      	cbz	r3, 62ba <usb_dc_ep_enable+0x3e>
	ep_ctx = endpoint_ctx(ep);
    6288:	f7ff fa94 	bl	57b4 <endpoint_ctx>
	if (!ep_ctx) {
    628c:	4605      	mov	r5, r0
    628e:	b1b8      	cbz	r0, 62c0 <usb_dc_ep_enable+0x44>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    6290:	0723      	lsls	r3, r4, #28
    6292:	d405      	bmi.n	62a0 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    6294:	4620      	mov	r0, r4
    6296:	f003 fe41 	bl	9f1c <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    629a:	4620      	mov	r0, r4
    629c:	f004 f8aa 	bl	a3f4 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    62a0:	7a2b      	ldrb	r3, [r5, #8]
    62a2:	b983      	cbnz	r3, 62c6 <usb_dc_ep_enable+0x4a>
	ep_ctx->cfg.en = true;
    62a4:	2301      	movs	r3, #1
    62a6:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    62a8:	f896 3025 	ldrb.w	r3, [r6, #37]	; 0x25
    62ac:	b90b      	cbnz	r3, 62b2 <usb_dc_ep_enable+0x36>
	return 0;
    62ae:	2000      	movs	r0, #0
}
    62b0:	bd70      	pop	{r4, r5, r6, pc}
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    62b2:	4620      	mov	r0, r4
    62b4:	f004 f84a 	bl	a34c <nrfx_usbd_ep_enable>
    62b8:	e7f9      	b.n	62ae <usb_dc_ep_enable+0x32>
		return -ENODEV;
    62ba:	f06f 0012 	mvn.w	r0, #18
    62be:	e7f7      	b.n	62b0 <usb_dc_ep_enable+0x34>
		return -EINVAL;
    62c0:	f06f 0015 	mvn.w	r0, #21
    62c4:	e7f4      	b.n	62b0 <usb_dc_ep_enable+0x34>
		return -EALREADY;
    62c6:	f06f 0077 	mvn.w	r0, #119	; 0x77
    62ca:	e7f1      	b.n	62b0 <usb_dc_ep_enable+0x34>
    62cc:	20000e48 	.word	0x20000e48

000062d0 <usb_dc_ep_write>:
{
    62d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->attached;
    62d4:	f8df 9124 	ldr.w	r9, [pc, #292]	; 63fc <usb_dc_ep_write+0x12c>
{
    62d8:	b084      	sub	sp, #16
    62da:	461e      	mov	r6, r3
	if (!dev_attached() || !dev_ready()) {
    62dc:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
{
    62e0:	af00      	add	r7, sp, #0
    62e2:	4680      	mov	r8, r0
    62e4:	468a      	mov	sl, r1
    62e6:	4615      	mov	r5, r2
	if (!dev_attached() || !dev_ready()) {
    62e8:	2b00      	cmp	r3, #0
    62ea:	f000 8083 	beq.w	63f4 <usb_dc_ep_write+0x124>
    62ee:	f899 3025 	ldrb.w	r3, [r9, #37]	; 0x25
    62f2:	2b00      	cmp	r3, #0
    62f4:	d07e      	beq.n	63f4 <usb_dc_ep_write+0x124>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    62f6:	f010 0f80 	tst.w	r0, #128	; 0x80
    62fa:	d014      	beq.n	6326 <usb_dc_ep_write+0x56>
	ep_ctx = endpoint_ctx(ep);
    62fc:	f7ff fa5a 	bl	57b4 <endpoint_ctx>
	if (!ep_ctx) {
    6300:	4604      	mov	r4, r0
    6302:	b180      	cbz	r0, 6326 <usb_dc_ep_write+0x56>
	if (!ep_ctx->cfg.en) {
    6304:	7a03      	ldrb	r3, [r0, #8]
    6306:	b9ab      	cbnz	r3, 6334 <usb_dc_ep_write+0x64>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    6308:	466c      	mov	r4, sp
    630a:	b088      	sub	sp, #32
    630c:	466a      	mov	r2, sp
    630e:	4b3c      	ldr	r3, [pc, #240]	; (6400 <usb_dc_ep_write+0x130>)
    6310:	483c      	ldr	r0, [pc, #240]	; (6404 <usb_dc_ep_write+0x134>)
    6312:	e9c2 3805 	strd	r3, r8, [r2, #20]
    6316:	2303      	movs	r3, #3
    6318:	f842 3f10 	str.w	r3, [r2, #16]!
    631c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6320:	f006 fc4f 	bl	cbc2 <z_log_msg_static_create.constprop.0>
    6324:	46a5      	mov	sp, r4
		return -EINVAL;
    6326:	f06f 0415 	mvn.w	r4, #21
}
    632a:	4620      	mov	r0, r4
    632c:	3710      	adds	r7, #16
    632e:	46bd      	mov	sp, r7
    6330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6334:	f04f 33ff 	mov.w	r3, #4294967295
    6338:	f04f 32ff 	mov.w	r2, #4294967295
    633c:	f109 0038 	add.w	r0, r9, #56	; 0x38
    6340:	f006 fc42 	bl	cbc8 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    6344:	7fa3      	ldrb	r3, [r4, #30]
    6346:	b133      	cbz	r3, 6356 <usb_dc_ep_write+0x86>
		k_mutex_unlock(&ctx->drv_lock);
    6348:	f109 0038 	add.w	r0, r9, #56	; 0x38
    634c:	f006 fc3e 	bl	cbcc <k_mutex_unlock.isra.0>
		return -EAGAIN;
    6350:	f06f 040a 	mvn.w	r4, #10
    6354:	e7e9      	b.n	632a <usb_dc_ep_write+0x5a>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    6356:	7aa3      	ldrb	r3, [r4, #10]
	if (!data_len && ep_ctx->trans_zlp) {
    6358:	b355      	cbz	r5, 63b0 <usb_dc_ep_write+0xe0>
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    635a:	2b00      	cmp	r3, #0
    635c:	d038      	beq.n	63d0 <usb_dc_ep_write+0x100>
	ep_ctx->write_in_progress = true;
    635e:	2301      	movs	r3, #1
    6360:	77a3      	strb	r3, [r4, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    6362:	f04f 0900 	mov.w	r9, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    6366:	1d39      	adds	r1, r7, #4
    6368:	4640      	mov	r0, r8
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    636a:	e9c7 a501 	strd	sl, r5, [r7, #4]
    636e:	f8c7 900c 	str.w	r9, [r7, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    6372:	f003 fc13 	bl	9b9c <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    6376:	4b24      	ldr	r3, [pc, #144]	; (6408 <usb_dc_ep_write+0x138>)
    6378:	4298      	cmp	r0, r3
    637a:	d037      	beq.n	63ec <usb_dc_ep_write+0x11c>
		ep_ctx->write_in_progress = false;
    637c:	f884 901e 	strb.w	r9, [r4, #30]
		if (ret_bytes) {
    6380:	b10e      	cbz	r6, 6386 <usb_dc_ep_write+0xb6>
			*ret_bytes = 0;
    6382:	f8c6 9000 	str.w	r9, [r6]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    6386:	466c      	mov	r4, sp
    6388:	b088      	sub	sp, #32
    638a:	466a      	mov	r2, sp
    638c:	4b1f      	ldr	r3, [pc, #124]	; (640c <usb_dc_ep_write+0x13c>)
    638e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    6392:	2303      	movs	r3, #3
    6394:	f842 3f10 	str.w	r3, [r2, #16]!
    6398:	481a      	ldr	r0, [pc, #104]	; (6404 <usb_dc_ep_write+0x134>)
    639a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    639e:	f006 fc10 	bl	cbc2 <z_log_msg_static_create.constprop.0>
    63a2:	46a5      	mov	sp, r4
		result = -EIO;
    63a4:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
    63a8:	4819      	ldr	r0, [pc, #100]	; (6410 <usb_dc_ep_write+0x140>)
    63aa:	f006 fc0f 	bl	cbcc <k_mutex_unlock.isra.0>
	return result;
    63ae:	e7bc      	b.n	632a <usb_dc_ep_write+0x5a>
	if (!data_len && ep_ctx->trans_zlp) {
    63b0:	7fe2      	ldrb	r2, [r4, #31]
    63b2:	b102      	cbz	r2, 63b6 <usb_dc_ep_write+0xe6>
		ep_ctx->trans_zlp = false;
    63b4:	77e5      	strb	r5, [r4, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    63b6:	2b00      	cmp	r3, #0
    63b8:	d1d1      	bne.n	635e <usb_dc_ep_write+0x8e>
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    63ba:	f003 fe25 	bl	a008 <nrfx_usbd_last_setup_dir_get>
    63be:	4580      	cmp	r8, r0
    63c0:	d0cd      	beq.n	635e <usb_dc_ep_write+0x8e>
		nrfx_usbd_setup_clear();
    63c2:	f003 fe11 	bl	9fe8 <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    63c6:	4812      	ldr	r0, [pc, #72]	; (6410 <usb_dc_ep_write+0x140>)
    63c8:	f006 fc00 	bl	cbcc <k_mutex_unlock.isra.0>
		return 0;
    63cc:	2400      	movs	r4, #0
    63ce:	e7ac      	b.n	632a <usb_dc_ep_write+0x5a>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    63d0:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    63d4:	429d      	cmp	r5, r3
    63d6:	d2f0      	bcs.n	63ba <usb_dc_ep_write+0xea>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    63d8:	6862      	ldr	r2, [r4, #4]
    63da:	fbb5 f3f2 	udiv	r3, r5, r2
    63de:	fb02 5313 	mls	r3, r2, r3, r5
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    63e2:	2b00      	cmp	r3, #0
    63e4:	d1e9      	bne.n	63ba <usb_dc_ep_write+0xea>
			ep_ctx->trans_zlp = true;
    63e6:	2301      	movs	r3, #1
    63e8:	77e3      	strb	r3, [r4, #31]
	if ((ep_ctx->cfg.type == USB_DC_EP_CONTROL)
    63ea:	e7e6      	b.n	63ba <usb_dc_ep_write+0xea>
		if (ret_bytes) {
    63ec:	b106      	cbz	r6, 63f0 <usb_dc_ep_write+0x120>
			*ret_bytes = data_len;
    63ee:	6035      	str	r5, [r6, #0]
	int result = 0;
    63f0:	2400      	movs	r4, #0
    63f2:	e7d9      	b.n	63a8 <usb_dc_ep_write+0xd8>
		return -ENODEV;
    63f4:	f06f 0412 	mvn.w	r4, #18
    63f8:	e797      	b.n	632a <usb_dc_ep_write+0x5a>
    63fa:	bf00      	nop
    63fc:	20000e48 	.word	0x20000e48
    6400:	00010229 	.word	0x00010229
    6404:	0000dc24 	.word	0x0000dc24
    6408:	0bad0000 	.word	0x0bad0000
    640c:	00010248 	.word	0x00010248
    6410:	20000e80 	.word	0x20000e80

00006414 <usb_dc_ep_read_wait>:
{
    6414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6418:	461d      	mov	r5, r3
	return get_usbd_ctx()->attached;
    641a:	4b2d      	ldr	r3, [pc, #180]	; (64d0 <usb_dc_ep_read_wait+0xbc>)
{
    641c:	4690      	mov	r8, r2
	if (!dev_attached() || !dev_ready()) {
    641e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    6422:	af00      	add	r7, sp, #0
    6424:	4681      	mov	r9, r0
    6426:	460e      	mov	r6, r1
	if (!dev_attached() || !dev_ready()) {
    6428:	2a00      	cmp	r2, #0
    642a:	d04d      	beq.n	64c8 <usb_dc_ep_read_wait+0xb4>
    642c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    6430:	2b00      	cmp	r3, #0
    6432:	d049      	beq.n	64c8 <usb_dc_ep_read_wait+0xb4>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    6434:	f010 0f80 	tst.w	r0, #128	; 0x80
    6438:	d119      	bne.n	646e <usb_dc_ep_read_wait+0x5a>
	if (!data && max_data_len) {
    643a:	b911      	cbnz	r1, 6442 <usb_dc_ep_read_wait+0x2e>
    643c:	f1b8 0f00 	cmp.w	r8, #0
    6440:	d115      	bne.n	646e <usb_dc_ep_read_wait+0x5a>
	ep_ctx = endpoint_ctx(ep);
    6442:	4648      	mov	r0, r9
    6444:	f7ff f9b6 	bl	57b4 <endpoint_ctx>
	if (!ep_ctx) {
    6448:	4604      	mov	r4, r0
    644a:	b180      	cbz	r0, 646e <usb_dc_ep_read_wait+0x5a>
	if (!ep_ctx->cfg.en) {
    644c:	7a03      	ldrb	r3, [r0, #8]
    644e:	b98b      	cbnz	r3, 6474 <usb_dc_ep_read_wait+0x60>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    6450:	466c      	mov	r4, sp
    6452:	b088      	sub	sp, #32
    6454:	466a      	mov	r2, sp
    6456:	4b1f      	ldr	r3, [pc, #124]	; (64d4 <usb_dc_ep_read_wait+0xc0>)
    6458:	481f      	ldr	r0, [pc, #124]	; (64d8 <usb_dc_ep_read_wait+0xc4>)
    645a:	e9c2 3905 	strd	r3, r9, [r2, #20]
    645e:	2303      	movs	r3, #3
    6460:	f842 3f10 	str.w	r3, [r2, #16]!
    6464:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6468:	f006 fbab 	bl	cbc2 <z_log_msg_static_create.constprop.0>
    646c:	46a5      	mov	sp, r4
		return -EINVAL;
    646e:	f06f 0015 	mvn.w	r0, #21
    6472:	e015      	b.n	64a0 <usb_dc_ep_read_wait+0x8c>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    6474:	f04f 33ff 	mov.w	r3, #4294967295
    6478:	4818      	ldr	r0, [pc, #96]	; (64dc <usb_dc_ep_read_wait+0xc8>)
    647a:	f04f 32ff 	mov.w	r2, #4294967295
    647e:	f006 fba3 	bl	cbc8 <k_mutex_lock.constprop.0.isra.0>
	bytes_to_copy = MIN(max_data_len, ep_ctx->buf.len);
    6482:	68e3      	ldr	r3, [r4, #12]
    6484:	4598      	cmp	r8, r3
    6486:	46c1      	mov	r9, r8
    6488:	bf28      	it	cs
    648a:	4699      	movcs	r9, r3
	if (!data && !max_data_len) {
    648c:	b95e      	cbnz	r6, 64a6 <usb_dc_ep_read_wait+0x92>
    648e:	f1b8 0f00 	cmp.w	r8, #0
    6492:	d108      	bne.n	64a6 <usb_dc_ep_read_wait+0x92>
		if (read_bytes) {
    6494:	b105      	cbz	r5, 6498 <usb_dc_ep_read_wait+0x84>
			*read_bytes = ep_ctx->buf.len;
    6496:	602b      	str	r3, [r5, #0]
		k_mutex_unlock(&ctx->drv_lock);
    6498:	4810      	ldr	r0, [pc, #64]	; (64dc <usb_dc_ep_read_wait+0xc8>)
    649a:	f006 fb97 	bl	cbcc <k_mutex_unlock.isra.0>
		return 0;
    649e:	2000      	movs	r0, #0
}
    64a0:	46bd      	mov	sp, r7
    64a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	memcpy(data, ep_ctx->buf.curr, bytes_to_copy);
    64a6:	69a1      	ldr	r1, [r4, #24]
    64a8:	464a      	mov	r2, r9
    64aa:	4630      	mov	r0, r6
    64ac:	f006 fb2e 	bl	cb0c <memcpy>
	ep_ctx->buf.curr += bytes_to_copy;
    64b0:	69a3      	ldr	r3, [r4, #24]
    64b2:	444b      	add	r3, r9
    64b4:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len -= bytes_to_copy;
    64b6:	68e3      	ldr	r3, [r4, #12]
    64b8:	eba3 0309 	sub.w	r3, r3, r9
    64bc:	60e3      	str	r3, [r4, #12]
	if (read_bytes) {
    64be:	2d00      	cmp	r5, #0
    64c0:	d0ea      	beq.n	6498 <usb_dc_ep_read_wait+0x84>
		*read_bytes = bytes_to_copy;
    64c2:	f8c5 9000 	str.w	r9, [r5]
    64c6:	e7e7      	b.n	6498 <usb_dc_ep_read_wait+0x84>
		return -ENODEV;
    64c8:	f06f 0012 	mvn.w	r0, #18
    64cc:	e7e8      	b.n	64a0 <usb_dc_ep_read_wait+0x8c>
    64ce:	bf00      	nop
    64d0:	20000e48 	.word	0x20000e48
    64d4:	00010229 	.word	0x00010229
    64d8:	0000dc24 	.word	0x0000dc24
    64dc:	20000e80 	.word	0x20000e80

000064e0 <usb_dc_ep_read_continue>:
{
    64e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    64e2:	4d27      	ldr	r5, [pc, #156]	; (6580 <usb_dc_ep_read_continue+0xa0>)
	if (!dev_attached() || !dev_ready()) {
    64e4:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
{
    64e8:	af00      	add	r7, sp, #0
    64ea:	4606      	mov	r6, r0
	if (!dev_attached() || !dev_ready()) {
    64ec:	2b00      	cmp	r3, #0
    64ee:	d044      	beq.n	657a <usb_dc_ep_read_continue+0x9a>
    64f0:	f895 3025 	ldrb.w	r3, [r5, #37]	; 0x25
    64f4:	2b00      	cmp	r3, #0
    64f6:	d040      	beq.n	657a <usb_dc_ep_read_continue+0x9a>
	if (NRF_USBD_EPIN_CHECK(ep)) {
    64f8:	0603      	lsls	r3, r0, #24
    64fa:	d414      	bmi.n	6526 <usb_dc_ep_read_continue+0x46>
	ep_ctx = endpoint_ctx(ep);
    64fc:	f7ff f95a 	bl	57b4 <endpoint_ctx>
	if (!ep_ctx) {
    6500:	4604      	mov	r4, r0
    6502:	b180      	cbz	r0, 6526 <usb_dc_ep_read_continue+0x46>
	if (!ep_ctx->cfg.en) {
    6504:	7a03      	ldrb	r3, [r0, #8]
    6506:	b993      	cbnz	r3, 652e <usb_dc_ep_read_continue+0x4e>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    6508:	466c      	mov	r4, sp
    650a:	b088      	sub	sp, #32
    650c:	466a      	mov	r2, sp
    650e:	4b1d      	ldr	r3, [pc, #116]	; (6584 <usb_dc_ep_read_continue+0xa4>)
    6510:	481d      	ldr	r0, [pc, #116]	; (6588 <usb_dc_ep_read_continue+0xa8>)
    6512:	e9c2 3605 	strd	r3, r6, [r2, #20]
    6516:	2303      	movs	r3, #3
    6518:	f842 3f10 	str.w	r3, [r2, #16]!
    651c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6520:	f006 fb4f 	bl	cbc2 <z_log_msg_static_create.constprop.0>
    6524:	46a5      	mov	sp, r4
		return -EINVAL;
    6526:	f06f 0015 	mvn.w	r0, #21
}
    652a:	46bd      	mov	sp, r7
    652c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    652e:	f04f 33ff 	mov.w	r3, #4294967295
    6532:	f04f 32ff 	mov.w	r2, #4294967295
    6536:	f105 0038 	add.w	r0, r5, #56	; 0x38
    653a:	f006 fb45 	bl	cbc8 <k_mutex_lock.constprop.0.isra.0>
	if (!ep_ctx->buf.len) {
    653e:	68e3      	ldr	r3, [r4, #12]
    6540:	b9b3      	cbnz	r3, 6570 <usb_dc_ep_read_continue+0x90>
		ep_ctx->read_complete = true;
    6542:	2601      	movs	r6, #1
		ep_ctx->buf.curr = ep_ctx->buf.data;
    6544:	6963      	ldr	r3, [r4, #20]
		ep_ctx->read_complete = true;
    6546:	7726      	strb	r6, [r4, #28]
		ep_ctx->buf.curr = ep_ctx->buf.data;
    6548:	61a3      	str	r3, [r4, #24]
		if (ep_ctx->read_pending) {
    654a:	7f63      	ldrb	r3, [r4, #29]
    654c:	b183      	cbz	r3, 6570 <usb_dc_ep_read_continue+0x90>
			struct usbd_event *ev = usbd_evt_alloc();
    654e:	f7ff f985 	bl	585c <usbd_evt_alloc>
			if (!ev) {
    6552:	b930      	cbnz	r0, 6562 <usb_dc_ep_read_continue+0x82>
				k_mutex_unlock(&ctx->drv_lock);
    6554:	f105 0038 	add.w	r0, r5, #56	; 0x38
    6558:	f006 fb38 	bl	cbcc <k_mutex_unlock.isra.0>
				return -ENOMEM;
    655c:	f06f 000b 	mvn.w	r0, #11
    6560:	e7e3      	b.n	652a <usb_dc_ep_read_continue+0x4a>
			ev->evt_type = USBD_EVT_EP;
    6562:	7406      	strb	r6, [r0, #16]
			ev->evt.ep_evt.ep = ep_ctx;
    6564:	6084      	str	r4, [r0, #8]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    6566:	7306      	strb	r6, [r0, #12]
			usbd_evt_put(ev);
    6568:	f7ff f95c 	bl	5824 <usbd_evt_put>
			usbd_work_schedule();
    656c:	f7ff f952 	bl	5814 <usbd_work_schedule>
	k_mutex_unlock(&ctx->drv_lock);
    6570:	4806      	ldr	r0, [pc, #24]	; (658c <usb_dc_ep_read_continue+0xac>)
    6572:	f006 fb2b 	bl	cbcc <k_mutex_unlock.isra.0>
	return 0;
    6576:	2000      	movs	r0, #0
    6578:	e7d7      	b.n	652a <usb_dc_ep_read_continue+0x4a>
		return -ENODEV;
    657a:	f06f 0012 	mvn.w	r0, #18
    657e:	e7d4      	b.n	652a <usb_dc_ep_read_continue+0x4a>
    6580:	20000e48 	.word	0x20000e48
    6584:	00010229 	.word	0x00010229
    6588:	0000dc24 	.word	0x0000dc24
    658c:	20000e80 	.word	0x20000e80

00006590 <usb_dc_ep_set_callback>:
{
    6590:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    6592:	4b08      	ldr	r3, [pc, #32]	; (65b4 <usb_dc_ep_set_callback+0x24>)
	if (!dev_attached()) {
    6594:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    6598:	460c      	mov	r4, r1
	if (!dev_attached()) {
    659a:	b12b      	cbz	r3, 65a8 <usb_dc_ep_set_callback+0x18>
	ep_ctx = endpoint_ctx(ep);
    659c:	f7ff f90a 	bl	57b4 <endpoint_ctx>
	if (!ep_ctx) {
    65a0:	b128      	cbz	r0, 65ae <usb_dc_ep_set_callback+0x1e>
	ep_ctx->cfg.cb = cb;
    65a2:	6004      	str	r4, [r0, #0]
	return 0;
    65a4:	2000      	movs	r0, #0
}
    65a6:	bd10      	pop	{r4, pc}
		return -ENODEV;
    65a8:	f06f 0012 	mvn.w	r0, #18
    65ac:	e7fb      	b.n	65a6 <usb_dc_ep_set_callback+0x16>
		return -EINVAL;
    65ae:	f06f 0015 	mvn.w	r0, #21
    65b2:	e7f8      	b.n	65a6 <usb_dc_ep_set_callback+0x16>
    65b4:	20000e48 	.word	0x20000e48

000065b8 <usb_dc_set_status_callback>:
	get_usbd_ctx()->status_cb = cb;
    65b8:	4b01      	ldr	r3, [pc, #4]	; (65c0 <usb_dc_set_status_callback+0x8>)
    65ba:	6018      	str	r0, [r3, #0]
}
    65bc:	4770      	bx	lr
    65be:	bf00      	nop
    65c0:	20000e48 	.word	0x20000e48

000065c4 <usb_dc_ep_mps>:
{
    65c4:	b508      	push	{r3, lr}
	return get_usbd_ctx()->attached;
    65c6:	4b07      	ldr	r3, [pc, #28]	; (65e4 <usb_dc_ep_mps+0x20>)
	if (!dev_attached()) {
    65c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    65cc:	b123      	cbz	r3, 65d8 <usb_dc_ep_mps+0x14>
	ep_ctx = endpoint_ctx(ep);
    65ce:	f7ff f8f1 	bl	57b4 <endpoint_ctx>
	if (!ep_ctx) {
    65d2:	b120      	cbz	r0, 65de <usb_dc_ep_mps+0x1a>
	return ep_ctx->cfg.max_sz;
    65d4:	6840      	ldr	r0, [r0, #4]
}
    65d6:	bd08      	pop	{r3, pc}
		return -ENODEV;
    65d8:	f06f 0012 	mvn.w	r0, #18
    65dc:	e7fb      	b.n	65d6 <usb_dc_ep_mps+0x12>
		return -EINVAL;
    65de:	f06f 0015 	mvn.w	r0, #21
    65e2:	e7f8      	b.n	65d6 <usb_dc_ep_mps+0x12>
    65e4:	20000e48 	.word	0x20000e48

000065e8 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    65e8:	4b08      	ldr	r3, [pc, #32]	; (660c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    65ea:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    65ec:	1ac3      	subs	r3, r0, r3
{
    65ee:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    65f0:	4907      	ldr	r1, [pc, #28]	; (6610 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    65f2:	109b      	asrs	r3, r3, #2
{
    65f4:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    65f6:	4359      	muls	r1, r3
    65f8:	4806      	ldr	r0, [pc, #24]	; (6614 <onoff_stop+0x2c>)
    65fa:	2240      	movs	r2, #64	; 0x40
    65fc:	f006 fb2c 	bl	cc58 <stop>
	notify(mgr, res);
    6600:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6602:	4601      	mov	r1, r0
	notify(mgr, res);
    6604:	4620      	mov	r0, r4
}
    6606:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    660a:	4718      	bx	r3
    660c:	200016ec 	.word	0x200016ec
    6610:	b6db6db7 	.word	0xb6db6db7
    6614:	0000daa4 	.word	0x0000daa4

00006618 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6618:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    661a:	4c0c      	ldr	r4, [pc, #48]	; (664c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    661c:	4a0c      	ldr	r2, [pc, #48]	; (6650 <onoff_start+0x38>)
    661e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    6620:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6622:	9300      	str	r3, [sp, #0]
{
    6624:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6626:	460b      	mov	r3, r1
    6628:	490a      	ldr	r1, [pc, #40]	; (6654 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    662a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    662c:	4361      	muls	r1, r4
{
    662e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6630:	4809      	ldr	r0, [pc, #36]	; (6658 <onoff_start+0x40>)
    6632:	f006 fb3d 	bl	ccb0 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    6636:	1e01      	subs	r1, r0, #0
    6638:	da05      	bge.n	6646 <onoff_start+0x2e>
		notify(mgr, err);
    663a:	4630      	mov	r0, r6
    663c:	462b      	mov	r3, r5
	}
}
    663e:	b002      	add	sp, #8
    6640:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    6644:	4718      	bx	r3
}
    6646:	b002      	add	sp, #8
    6648:	bd70      	pop	{r4, r5, r6, pc}
    664a:	bf00      	nop
    664c:	200016ec 	.word	0x200016ec
    6650:	0000cd1b 	.word	0x0000cd1b
    6654:	b6db6db7 	.word	0xb6db6db7
    6658:	0000daa4 	.word	0x0000daa4

0000665c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    665c:	2200      	movs	r2, #0
{
    665e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6660:	2101      	movs	r1, #1
{
    6662:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6664:	4610      	mov	r0, r2
    6666:	f7fe f965 	bl	4934 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    666a:	480f      	ldr	r0, [pc, #60]	; (66a8 <clk_init+0x4c>)
    666c:	f002 f8d2 	bl	8814 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    6670:	4b0e      	ldr	r3, [pc, #56]	; (66ac <clk_init+0x50>)
    6672:	4298      	cmp	r0, r3
    6674:	d115      	bne.n	66a2 <clk_init+0x46>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    6676:	f002 f8dd 	bl	8834 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    667a:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    667c:	490c      	ldr	r1, [pc, #48]	; (66b0 <clk_init+0x54>)
    667e:	4630      	mov	r0, r6
    6680:	f005 fd8d 	bl	c19e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    6684:	2800      	cmp	r0, #0
    6686:	db0b      	blt.n	66a0 <clk_init+0x44>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    6688:	2501      	movs	r5, #1
    668a:	6435      	str	r5, [r6, #64]	; 0x40
	struct nrf_clock_control_data *data = dev->data;
    668c:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    668e:	4908      	ldr	r1, [pc, #32]	; (66b0 <clk_init+0x54>)
    6690:	f104 001c 	add.w	r0, r4, #28
    6694:	f005 fd83 	bl	c19e <onoff_manager_init>
		if (err < 0) {
    6698:	2800      	cmp	r0, #0
    669a:	db01      	blt.n	66a0 <clk_init+0x44>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    669c:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    669e:	2000      	movs	r0, #0
}
    66a0:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    66a2:	f06f 0004 	mvn.w	r0, #4
    66a6:	e7fb      	b.n	66a0 <clk_init+0x44>
    66a8:	000066e9 	.word	0x000066e9
    66ac:	0bad0000 	.word	0x0bad0000
    66b0:	0000dd94 	.word	0x0000dd94

000066b4 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    66b4:	b570      	push	{r4, r5, r6, lr}
    66b6:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    66b8:	230c      	movs	r3, #12
    66ba:	4809      	ldr	r0, [pc, #36]	; (66e0 <clkstarted_handle.constprop.0+0x2c>)
    66bc:	434b      	muls	r3, r1
    66be:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    66c0:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    66c4:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    66c6:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    66c8:	4418      	add	r0, r3
	sub_data->cb = NULL;
    66ca:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    66cc:	f006 fab1 	bl	cc32 <set_on_state>
	if (callback) {
    66d0:	b12d      	cbz	r5, 66de <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    66d2:	4632      	mov	r2, r6
    66d4:	462b      	mov	r3, r5
    66d6:	4803      	ldr	r0, [pc, #12]	; (66e4 <clkstarted_handle.constprop.0+0x30>)
}
    66d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    66dc:	4718      	bx	r3
}
    66de:	bd70      	pop	{r4, r5, r6, pc}
    66e0:	200016ec 	.word	0x200016ec
    66e4:	0000daa4 	.word	0x0000daa4

000066e8 <clock_event_handler>:
	switch (event) {
    66e8:	b110      	cbz	r0, 66f0 <clock_event_handler+0x8>
    66ea:	2801      	cmp	r0, #1
    66ec:	d004      	beq.n	66f8 <clock_event_handler+0x10>
    66ee:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    66f0:	4b03      	ldr	r3, [pc, #12]	; (6700 <clock_event_handler+0x18>)
    66f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    66f4:	075b      	lsls	r3, r3, #29
    66f6:	d101      	bne.n	66fc <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    66f8:	f7ff bfdc 	b.w	66b4 <clkstarted_handle.constprop.0>
}
    66fc:	4770      	bx	lr
    66fe:	bf00      	nop
    6700:	200016ec 	.word	0x200016ec

00006704 <generic_hfclk_start>:
{
    6704:	b508      	push	{r3, lr}
	__asm__ volatile(
    6706:	f04f 0340 	mov.w	r3, #64	; 0x40
    670a:	f3ef 8111 	mrs	r1, BASEPRI
    670e:	f383 8812 	msr	BASEPRI_MAX, r3
    6712:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    6716:	4a12      	ldr	r2, [pc, #72]	; (6760 <generic_hfclk_start+0x5c>)
    6718:	6813      	ldr	r3, [r2, #0]
    671a:	f043 0002 	orr.w	r0, r3, #2
    671e:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    6720:	07da      	lsls	r2, r3, #31
    6722:	d408      	bmi.n	6736 <generic_hfclk_start+0x32>
	__asm__ volatile(
    6724:	f381 8811 	msr	BASEPRI, r1
    6728:	f3bf 8f6f 	isb	sy
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    672c:	2001      	movs	r0, #1
}
    672e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    6732:	f006 bc7b 	b.w	d02c <nrfx_clock_start>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6736:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    673a:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    673e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    6742:	07d3      	lsls	r3, r2, #31
    6744:	d5ee      	bpl.n	6724 <generic_hfclk_start+0x20>
			set_on_state(get_hf_flags());
    6746:	4807      	ldr	r0, [pc, #28]	; (6764 <generic_hfclk_start+0x60>)
    6748:	f006 fa73 	bl	cc32 <set_on_state>
    674c:	f381 8811 	msr	BASEPRI, r1
    6750:	f3bf 8f6f 	isb	sy
		clkstarted_handle(CLOCK_DEVICE,
    6754:	2000      	movs	r0, #0
}
    6756:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    675a:	f7ff bfab 	b.w	66b4 <clkstarted_handle.constprop.0>
    675e:	bf00      	nop
    6760:	2000173c 	.word	0x2000173c
    6764:	2000172c 	.word	0x2000172c

00006768 <api_blocking_start>:
{
    6768:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    676a:	2200      	movs	r2, #0
    676c:	2301      	movs	r3, #1
    676e:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6772:	4a09      	ldr	r2, [pc, #36]	; (6798 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6774:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6778:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    677a:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    677e:	f006 fac5 	bl	cd0c <api_start>
	if (err < 0) {
    6782:	2800      	cmp	r0, #0
    6784:	db05      	blt.n	6792 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    6786:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    678a:	2300      	movs	r3, #0
    678c:	4668      	mov	r0, sp
    678e:	f004 fab7 	bl	ad00 <z_impl_k_sem_take>
}
    6792:	b005      	add	sp, #20
    6794:	f85d fb04 	ldr.w	pc, [sp], #4
    6798:	0000cd39 	.word	0x0000cd39

0000679c <generic_hfclk_stop>:
{
    679c:	b510      	push	{r4, lr}
	__asm__ volatile(
    679e:	f04f 0340 	mov.w	r3, #64	; 0x40
    67a2:	f3ef 8411 	mrs	r4, BASEPRI
    67a6:	f383 8812 	msr	BASEPRI_MAX, r3
    67aa:	f3bf 8f6f 	isb	sy
	hfclk_users &= ~HF_USER_GENERIC;
    67ae:	4a07      	ldr	r2, [pc, #28]	; (67cc <generic_hfclk_stop+0x30>)
    67b0:	6813      	ldr	r3, [r2, #0]
    67b2:	f023 0102 	bic.w	r1, r3, #2
	if (!(hfclk_users & HF_USER_BT)) {
    67b6:	07db      	lsls	r3, r3, #31
	hfclk_users &= ~HF_USER_GENERIC;
    67b8:	6011      	str	r1, [r2, #0]
	if (!(hfclk_users & HF_USER_BT)) {
    67ba:	d402      	bmi.n	67c2 <generic_hfclk_stop+0x26>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    67bc:	2001      	movs	r0, #1
    67be:	f006 fc70 	bl	d0a2 <nrfx_clock_stop>
	__asm__ volatile(
    67c2:	f384 8811 	msr	BASEPRI, r4
    67c6:	f3bf 8f6f 	isb	sy
}
    67ca:	bd10      	pop	{r4, pc}
    67cc:	2000173c 	.word	0x2000173c

000067d0 <z_nrf_clock_control_get_onoff>:
}
    67d0:	4a02      	ldr	r2, [pc, #8]	; (67dc <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    67d2:	b2c3      	uxtb	r3, r0
}
    67d4:	201c      	movs	r0, #28
    67d6:	fb03 2000 	mla	r0, r3, r0, r2
    67da:	4770      	bx	lr
    67dc:	200016ec 	.word	0x200016ec

000067e0 <z_nrf_clock_control_lf_on>:
{
    67e0:	b538      	push	{r3, r4, r5, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    67e2:	4924      	ldr	r1, [pc, #144]	; (6874 <z_nrf_clock_control_lf_on+0x94>)
    67e4:	f3bf 8f5b 	dmb	ish
    67e8:	4604      	mov	r4, r0
    67ea:	2201      	movs	r2, #1
    67ec:	e851 3f00 	ldrex	r3, [r1]
    67f0:	e841 2000 	strex	r0, r2, [r1]
    67f4:	2800      	cmp	r0, #0
    67f6:	d1f9      	bne.n	67ec <z_nrf_clock_control_lf_on+0xc>
    67f8:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    67fc:	b933      	cbnz	r3, 680c <z_nrf_clock_control_lf_on+0x2c>
    67fe:	491e      	ldr	r1, [pc, #120]	; (6878 <z_nrf_clock_control_lf_on+0x98>)
		err = onoff_request(mgr, &cli);
    6800:	481e      	ldr	r0, [pc, #120]	; (687c <z_nrf_clock_control_lf_on+0x9c>)
    6802:	604b      	str	r3, [r1, #4]
    6804:	60cb      	str	r3, [r1, #12]
    6806:	608a      	str	r2, [r1, #8]
    6808:	f005 fcdc 	bl	c1c4 <onoff_request>
	switch (start_mode) {
    680c:	1e63      	subs	r3, r4, #1
    680e:	2b01      	cmp	r3, #1
    6810:	d81e      	bhi.n	6850 <z_nrf_clock_control_lf_on+0x70>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6812:	f006 fddd 	bl	d3d0 <k_is_in_isr>
    6816:	b9e0      	cbnz	r0, 6852 <z_nrf_clock_control_lf_on+0x72>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    6818:	4b19      	ldr	r3, [pc, #100]	; (6880 <z_nrf_clock_control_lf_on+0xa0>)
    681a:	781b      	ldrb	r3, [r3, #0]
    681c:	b1cb      	cbz	r3, 6852 <z_nrf_clock_control_lf_on+0x72>
    p_reg->INTENCLR = mask;
    681e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6822:	2202      	movs	r2, #2
    6824:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    6828:	4603      	mov	r3, r0
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    682a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    682e:	f8d1 2418 	ldr.w	r2, [r1, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6832:	f8d1 5418 	ldr.w	r5, [r1, #1048]	; 0x418
    6836:	03ed      	lsls	r5, r5, #15
    6838:	d5f9      	bpl.n	682e <z_nrf_clock_control_lf_on+0x4e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    683a:	f002 0203 	and.w	r2, r2, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    683e:	2a02      	cmp	r2, #2
    6840:	d001      	beq.n	6846 <z_nrf_clock_control_lf_on+0x66>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    6842:	2c01      	cmp	r4, #1
    6844:	d1f3      	bne.n	682e <z_nrf_clock_control_lf_on+0x4e>
	if (isr_mode) {
    6846:	b170      	cbz	r0, 6866 <z_nrf_clock_control_lf_on+0x86>
    6848:	f383 8811 	msr	BASEPRI, r3
    684c:	f3bf 8f6f 	isb	sy
}
    6850:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    6852:	f04f 0240 	mov.w	r2, #64	; 0x40
    6856:	f3ef 8311 	mrs	r3, BASEPRI
    685a:	f382 8812 	msr	BASEPRI_MAX, r2
    685e:	f3bf 8f6f 	isb	sy
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6862:	2001      	movs	r0, #1
    6864:	e7e1      	b.n	682a <z_nrf_clock_control_lf_on+0x4a>
    p_reg->INTENSET = mask;
    6866:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    686a:	2202      	movs	r2, #2
    686c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6870:	e7ee      	b.n	6850 <z_nrf_clock_control_lf_on+0x70>
    6872:	bf00      	nop
    6874:	200016e8 	.word	0x200016e8
    6878:	200016d8 	.word	0x200016d8
    687c:	20001708 	.word	0x20001708
    6880:	20002318 	.word	0x20002318

00006884 <rtt_console_init>:

	return character;
}

static int rtt_console_init(void)
{
    6884:	b510      	push	{r4, lr}

#ifdef CONFIG_PRINTK
	__printk_hook_install(rtt_console_out);
    6886:	4c04      	ldr	r4, [pc, #16]	; (6898 <rtt_console_init+0x14>)
    6888:	4620      	mov	r0, r4
    688a:	f7fb fc85 	bl	2198 <__printk_hook_install>
#endif
	__stdout_hook_install(rtt_console_out);
    688e:	4620      	mov	r0, r4
    6890:	f7fe fdb0 	bl	53f4 <__stdout_hook_install>

	return 0;
}
    6894:	2000      	movs	r0, #0
    6896:	bd10      	pop	{r4, pc}
    6898:	0000689d 	.word	0x0000689d

0000689c <rtt_console_out>:
{
    689c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    689e:	4e13      	ldr	r6, [pc, #76]	; (68ec <rtt_console_out+0x50>)
	char c = (char)character;
    68a0:	f88d 0007 	strb.w	r0, [sp, #7]
{
    68a4:	4604      	mov	r4, r0
	char c = (char)character;
    68a6:	2503      	movs	r5, #3
		SEGGER_RTT_LOCK();
    68a8:	f003 fe62 	bl	a570 <zephyr_rtt_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    68ac:	2201      	movs	r2, #1
    68ae:	f10d 0107 	add.w	r1, sp, #7
    68b2:	2000      	movs	r0, #0
    68b4:	f003 fe26 	bl	a504 <SEGGER_RTT_WriteNoLock>
    68b8:	4607      	mov	r7, r0
		SEGGER_RTT_UNLOCK();
    68ba:	f003 fe63 	bl	a584 <zephyr_rtt_mutex_unlock>
		if (cnt) {
    68be:	b127      	cbz	r7, 68ca <rtt_console_out+0x2e>
			host_present = true;
    68c0:	2301      	movs	r3, #1
    68c2:	7033      	strb	r3, [r6, #0]
}
    68c4:	4620      	mov	r0, r4
    68c6:	b003      	add	sp, #12
    68c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		} else if (host_present) {
    68ca:	7833      	ldrb	r3, [r6, #0]
    68cc:	2b00      	cmp	r3, #0
    68ce:	d0f9      	beq.n	68c4 <rtt_console_out+0x28>
			if (max_cnt) {
    68d0:	3d01      	subs	r5, #1
    68d2:	d008      	beq.n	68e6 <rtt_console_out+0x4a>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    68d4:	f006 fd7c 	bl	d3d0 <k_is_in_isr>
    68d8:	2800      	cmp	r0, #0
    68da:	d1e5      	bne.n	68a8 <rtt_console_out+0xc>
	return z_impl_k_sleep(timeout);
    68dc:	2100      	movs	r1, #0
    68de:	2042      	movs	r0, #66	; 0x42
    68e0:	f004 fe70 	bl	b5c4 <z_impl_k_sleep>
		SEGGER_RTT_LOCK();
    68e4:	e7e0      	b.n	68a8 <rtt_console_out+0xc>
				host_present = false;
    68e6:	7035      	strb	r5, [r6, #0]
    68e8:	e7ec      	b.n	68c4 <rtt_console_out+0x28>
    68ea:	bf00      	nop
    68ec:	20001c5a 	.word	0x20001c5a

000068f0 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    68f0:	b530      	push	{r4, r5, lr}
	return port->config;
    68f2:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    68f4:	7b05      	ldrb	r5, [r0, #12]
    68f6:	f001 041f 	and.w	r4, r1, #31
	nrfx_err_t err;
	uint8_t ch;

	if (mode == GPIO_INT_MODE_DISABLED) {
    68fa:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
{
    68fe:	b085      	sub	sp, #20
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    6900:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    6904:	d105      	bne.n	6912 <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    6906:	4620      	mov	r0, r4
    6908:	f002 fa06 	bl	8d18 <nrfx_gpiote_trigger_disable>

		return 0;
    690c:	2000      	movs	r0, #0
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
}
    690e:	b005      	add	sp, #20
    6910:	bd30      	pop	{r4, r5, pc}
	nrfx_gpiote_trigger_config_t trigger_config = {
    6912:	2500      	movs	r5, #0
	if (mode == GPIO_INT_MODE_LEVEL) {
    6914:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    6918:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    691c:	d114      	bne.n	6948 <gpio_nrfx_pin_interrupt_configure+0x58>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    691e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
	nrfx_gpiote_trigger_config_t trigger_config = {
    6922:	bf0c      	ite	eq
    6924:	2304      	moveq	r3, #4
    6926:	2305      	movne	r3, #5
    6928:	f88d 3008 	strb.w	r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    692c:	2300      	movs	r3, #0
    692e:	4619      	mov	r1, r3
    6930:	aa02      	add	r2, sp, #8
    6932:	4620      	mov	r0, r4
    6934:	f002 f826 	bl	8984 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    6938:	4b1d      	ldr	r3, [pc, #116]	; (69b0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    693a:	4298      	cmp	r0, r3
    693c:	d135      	bne.n	69aa <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    693e:	2101      	movs	r1, #1
    6940:	4620      	mov	r0, r4
    6942:	f002 f9a5 	bl	8c90 <nrfx_gpiote_trigger_enable>
	return 0;
    6946:	e7e1      	b.n	690c <gpio_nrfx_pin_interrupt_configure+0x1c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    6948:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    694c:	d022      	beq.n	6994 <gpio_nrfx_pin_interrupt_configure+0xa4>
    694e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    6952:	bf14      	ite	ne
    6954:	2301      	movne	r3, #1
    6956:	2302      	moveq	r3, #2
	nrfx_gpiote_trigger_config_t trigger_config = {
    6958:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    695c:	6883      	ldr	r3, [r0, #8]
    695e:	40cb      	lsrs	r3, r1
    6960:	07d9      	lsls	r1, r3, #31
    6962:	d4e3      	bmi.n	692c <gpio_nrfx_pin_interrupt_configure+0x3c>
    6964:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    6968:	d1e0      	bne.n	692c <gpio_nrfx_pin_interrupt_configure+0x3c>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    696a:	f004 031f 	and.w	r3, r4, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    696e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    6972:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    6976:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    697a:	07db      	lsls	r3, r3, #31
    697c:	d4d6      	bmi.n	692c <gpio_nrfx_pin_interrupt_configure+0x3c>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    697e:	f10d 0507 	add.w	r5, sp, #7
    6982:	4629      	mov	r1, r5
    6984:	4620      	mov	r0, r4
    6986:	f002 f92f 	bl	8be8 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    698a:	4b0a      	ldr	r3, [pc, #40]	; (69b4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    698c:	4298      	cmp	r0, r3
    698e:	d003      	beq.n	6998 <gpio_nrfx_pin_interrupt_configure+0xa8>
		trigger_config.p_in_channel = &ch;
    6990:	9503      	str	r5, [sp, #12]
    6992:	e7cb      	b.n	692c <gpio_nrfx_pin_interrupt_configure+0x3c>
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    6994:	2303      	movs	r3, #3
    6996:	e7df      	b.n	6958 <gpio_nrfx_pin_interrupt_configure+0x68>
			err = nrfx_gpiote_channel_alloc(&ch);
    6998:	4628      	mov	r0, r5
    699a:	f002 f973 	bl	8c84 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    699e:	4b04      	ldr	r3, [pc, #16]	; (69b0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    69a0:	4298      	cmp	r0, r3
    69a2:	d0f5      	beq.n	6990 <gpio_nrfx_pin_interrupt_configure+0xa0>
				return -ENOMEM;
    69a4:	f06f 000b 	mvn.w	r0, #11
    69a8:	e7b1      	b.n	690e <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EINVAL;
    69aa:	f06f 0015 	mvn.w	r0, #21
    69ae:	e7ae      	b.n	690e <gpio_nrfx_pin_interrupt_configure+0x1e>
    69b0:	0bad0000 	.word	0x0bad0000
    69b4:	0bad0004 	.word	0x0bad0004

000069b8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    69b8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    69ba:	f002 f953 	bl	8c64 <nrfx_gpiote_is_init>
    69be:	4604      	mov	r4, r0
    69c0:	b968      	cbnz	r0, 69de <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    69c2:	f002 f927 	bl	8c14 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    69c6:	4b08      	ldr	r3, [pc, #32]	; (69e8 <gpio_nrfx_init+0x30>)
    69c8:	4298      	cmp	r0, r3
    69ca:	d10a      	bne.n	69e2 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    69cc:	4807      	ldr	r0, [pc, #28]	; (69ec <gpio_nrfx_init+0x34>)
    69ce:	4621      	mov	r1, r4
    69d0:	f002 f904 	bl	8bdc <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    69d4:	4622      	mov	r2, r4
    69d6:	2105      	movs	r1, #5
    69d8:	2006      	movs	r0, #6
    69da:	f7fd ffab 	bl	4934 <z_arm_irq_priority_set>
		return 0;
    69de:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    69e0:	bd10      	pop	{r4, pc}
		return -EIO;
    69e2:	f06f 0004 	mvn.w	r0, #4
    69e6:	e7fb      	b.n	69e0 <gpio_nrfx_init+0x28>
    69e8:	0bad0000 	.word	0x0bad0000
    69ec:	000069f1 	.word	0x000069f1

000069f0 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    69f0:	0943      	lsrs	r3, r0, #5
{
    69f2:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    69f4:	d107      	bne.n	6a06 <nrfx_gpio_handler+0x16>
	return list->head;
    69f6:	4b0b      	ldr	r3, [pc, #44]	; (6a24 <nrfx_gpio_handler+0x34>)
    69f8:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    69fa:	b121      	cbz	r1, 6a06 <nrfx_gpio_handler+0x16>
	gpio_fire_callbacks(list, port, BIT(pin));
    69fc:	2501      	movs	r5, #1
	return node->next;
    69fe:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    6a00:	4e09      	ldr	r6, [pc, #36]	; (6a28 <nrfx_gpio_handler+0x38>)
    6a02:	4085      	lsls	r5, r0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    6a04:	b901      	cbnz	r1, 6a08 <nrfx_gpio_handler+0x18>
}
    6a06:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->pin_mask & pins) {
    6a08:	688a      	ldr	r2, [r1, #8]
    6a0a:	402a      	ands	r2, r5
    6a0c:	d002      	beq.n	6a14 <nrfx_gpio_handler+0x24>
			cb->handler(port, cb, cb->pin_mask & pins);
    6a0e:	684b      	ldr	r3, [r1, #4]
    6a10:	4630      	mov	r0, r6
    6a12:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    6a14:	b11c      	cbz	r4, 6a1e <nrfx_gpio_handler+0x2e>
    6a16:	6823      	ldr	r3, [r4, #0]
    6a18:	4621      	mov	r1, r4
    6a1a:	461c      	mov	r4, r3
    6a1c:	e7f2      	b.n	6a04 <nrfx_gpio_handler+0x14>
    6a1e:	4623      	mov	r3, r4
    6a20:	e7fa      	b.n	6a18 <nrfx_gpio_handler+0x28>
    6a22:	bf00      	nop
    6a24:	20001740 	.word	0x20001740
    6a28:	0000dabc 	.word	0x0000dabc

00006a2c <gpio_nrfx_pin_configure>:
{
    6a2c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return port->config;
    6a30:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    6a32:	7b3b      	ldrb	r3, [r7, #12]
    6a34:	f001 051f 	and.w	r5, r1, #31
    6a38:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
{
    6a3c:	460e      	mov	r6, r1
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    6a3e:	4628      	mov	r0, r5
    6a40:	f10d 0103 	add.w	r1, sp, #3
{
    6a44:	4614      	mov	r4, r2
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    6a46:	f002 f8cf 	bl	8be8 <nrfx_gpiote_channel_get>
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    6a4a:	f414 3f40 	tst.w	r4, #196608	; 0x30000
	err = nrfx_gpiote_channel_get(abs_pin, &ch);
    6a4e:	4680      	mov	r8, r0
	if ((flags & (GPIO_INPUT | GPIO_OUTPUT)) == GPIO_DISCONNECTED) {
    6a50:	d10b      	bne.n	6a6a <gpio_nrfx_pin_configure+0x3e>
		(void)nrfx_gpiote_pin_uninit(abs_pin);
    6a52:	4628      	mov	r0, r5
    6a54:	f002 f988 	bl	8d68 <nrfx_gpiote_pin_uninit>
		if (free_ch) {
    6a58:	4b3d      	ldr	r3, [pc, #244]	; (6b50 <gpio_nrfx_pin_configure+0x124>)
    6a5a:	4598      	cmp	r8, r3
    6a5c:	d103      	bne.n	6a66 <gpio_nrfx_pin_configure+0x3a>
			err = nrfx_gpiote_channel_free(ch);
    6a5e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    6a62:	f002 f909 	bl	8c78 <nrfx_gpiote_channel_free>
		return 0;
    6a66:	2000      	movs	r0, #0
    6a68:	e00c      	b.n	6a84 <gpio_nrfx_pin_configure+0x58>
	nrfx_gpiote_trigger_config_t trigger_config = {
    6a6a:	2300      	movs	r3, #0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    6a6c:	4619      	mov	r1, r3
    6a6e:	aa02      	add	r2, sp, #8
    6a70:	4628      	mov	r0, r5
	nrfx_gpiote_trigger_config_t trigger_config = {
    6a72:	e9cd 3302 	strd	r3, r3, [sp, #8]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    6a76:	f001 ff85 	bl	8984 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    6a7a:	4b35      	ldr	r3, [pc, #212]	; (6b50 <gpio_nrfx_pin_configure+0x124>)
    6a7c:	4298      	cmp	r0, r3
    6a7e:	d004      	beq.n	6a8a <gpio_nrfx_pin_configure+0x5e>
		return NRF_GPIO_PIN_PULLUP;
    6a80:	f06f 0015 	mvn.w	r0, #21
}
    6a84:	b004      	add	sp, #16
    6a86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (free_ch) {
    6a8a:	4580      	cmp	r8, r0
    6a8c:	d103      	bne.n	6a96 <gpio_nrfx_pin_configure+0x6a>
		err = nrfx_gpiote_channel_free(ch);
    6a8e:	f89d 0003 	ldrb.w	r0, [sp, #3]
    6a92:	f002 f8f1 	bl	8c78 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    6a96:	03a3      	lsls	r3, r4, #14
    6a98:	d54b      	bpl.n	6b32 <gpio_nrfx_pin_configure+0x106>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    6a9a:	f240 3306 	movw	r3, #774	; 0x306
    6a9e:	4023      	ands	r3, r4
    6aa0:	f5b3 7f83 	cmp.w	r3, #262	; 0x106
    6aa4:	d019      	beq.n	6ada <gpio_nrfx_pin_configure+0xae>
    6aa6:	d80c      	bhi.n	6ac2 <gpio_nrfx_pin_configure+0x96>
    6aa8:	2b06      	cmp	r3, #6
    6aaa:	d017      	beq.n	6adc <gpio_nrfx_pin_configure+0xb0>
    6aac:	d804      	bhi.n	6ab8 <gpio_nrfx_pin_configure+0x8c>
    6aae:	b1ab      	cbz	r3, 6adc <gpio_nrfx_pin_configure+0xb0>
    6ab0:	2b02      	cmp	r3, #2
    6ab2:	d1e5      	bne.n	6a80 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0S1;
    6ab4:	2304      	movs	r3, #4
    6ab6:	e011      	b.n	6adc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    6ab8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
    6abc:	d1e0      	bne.n	6a80 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_H0S1;
    6abe:	2301      	movs	r3, #1
    6ac0:	e00c      	b.n	6adc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    6ac2:	f240 2202 	movw	r2, #514	; 0x202
    6ac6:	4293      	cmp	r3, r2
    6ac8:	d027      	beq.n	6b1a <gpio_nrfx_pin_configure+0xee>
    6aca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
    6ace:	d026      	beq.n	6b1e <gpio_nrfx_pin_configure+0xf2>
    6ad0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6ad4:	d1d4      	bne.n	6a80 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_S0H1;
    6ad6:	2302      	movs	r3, #2
    6ad8:	e000      	b.n	6adc <gpio_nrfx_pin_configure+0xb0>
		*drive = NRF_GPIO_PIN_H0D1;
    6ada:	2307      	movs	r3, #7
		nrfx_gpiote_output_config_t output_config = {
    6adc:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    6ae0:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    6ae4:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    6ae8:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    6aea:	f88d 3005 	strb.w	r3, [sp, #5]
	} else if (flags & GPIO_PULL_DOWN) {
    6aee:	bf54      	ite	pl
    6af0:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    6af4:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    6af6:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    6af8:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    6afc:	d511      	bpl.n	6b22 <gpio_nrfx_pin_configure+0xf6>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    6afe:	687a      	ldr	r2, [r7, #4]
    6b00:	2301      	movs	r3, #1
    6b02:	40b3      	lsls	r3, r6
    p_reg->OUTSET = set_mask;
    6b04:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    6b08:	2200      	movs	r2, #0
    6b0a:	a901      	add	r1, sp, #4
    6b0c:	4628      	mov	r0, r5
    6b0e:	f001 ffe7 	bl	8ae0 <nrfx_gpiote_output_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    6b12:	4b0f      	ldr	r3, [pc, #60]	; (6b50 <gpio_nrfx_pin_configure+0x124>)
    6b14:	4298      	cmp	r0, r3
    6b16:	d0a6      	beq.n	6a66 <gpio_nrfx_pin_configure+0x3a>
    6b18:	e7b2      	b.n	6a80 <gpio_nrfx_pin_configure+0x54>
		*drive = NRF_GPIO_PIN_D0H1;
    6b1a:	2305      	movs	r3, #5
    6b1c:	e7de      	b.n	6adc <gpio_nrfx_pin_configure+0xb0>
	switch (flags & (NRF_GPIO_DRIVE_MSK | GPIO_OPEN_DRAIN)) {
    6b1e:	2303      	movs	r3, #3
    6b20:	e7dc      	b.n	6adc <gpio_nrfx_pin_configure+0xb0>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    6b22:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    6b24:	bf41      	itttt	mi
    6b26:	2301      	movmi	r3, #1
    6b28:	687a      	ldrmi	r2, [r7, #4]
    6b2a:	40b3      	lslmi	r3, r6
    p_reg->OUTCLR = clr_mask;
    6b2c:	f8c2 350c 	strmi.w	r3, [r2, #1292]	; 0x50c
}
    6b30:	e7ea      	b.n	6b08 <gpio_nrfx_pin_configure+0xdc>
	if (flags & GPIO_PULL_UP) {
    6b32:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    6b34:	f04f 0300 	mov.w	r3, #0
	} else if (flags & GPIO_PULL_DOWN) {
    6b38:	bf54      	ite	pl
    6b3a:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    6b3e:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    6b40:	461a      	mov	r2, r3
    6b42:	a901      	add	r1, sp, #4
    6b44:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    6b46:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    6b4a:	f001 ff1b 	bl	8984 <nrfx_gpiote_input_configure>
    6b4e:	e7e0      	b.n	6b12 <gpio_nrfx_pin_configure+0xe6>
    6b50:	0bad0000 	.word	0x0bad0000

00006b54 <qdec_nrfx_channel_get>:
	const int32_t steps = QDEC_STEPS;

	ARG_UNUSED(dev);
	LOG_DBG("");

	if (chan != SENSOR_CHAN_ROTATION) {
    6b54:	2922      	cmp	r1, #34	; 0x22
{
    6b56:	b510      	push	{r4, lr}
	if (chan != SENSOR_CHAN_ROTATION) {
    6b58:	d114      	bne.n	6b84 <qdec_nrfx_channel_get+0x30>
    6b5a:	f04f 0340 	mov.w	r3, #64	; 0x40
    6b5e:	f3ef 8411 	mrs	r4, BASEPRI
    6b62:	f383 8812 	msr	BASEPRI_MAX, r3
    6b66:	f3bf 8f6f 	isb	sy
		return -ENOTSUP;
	}

	key = irq_lock();
	acc = data->acc;
    6b6a:	4908      	ldr	r1, [pc, #32]	; (6b8c <qdec_nrfx_channel_get+0x38>)
	data->acc = 0;
    6b6c:	2000      	movs	r0, #0
	acc = data->acc;
    6b6e:	680b      	ldr	r3, [r1, #0]
	data->acc = 0;
    6b70:	6008      	str	r0, [r1, #0]
	__asm__ volatile(
    6b72:	f384 8811 	msr	BASEPRI, r4
    6b76:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BUILD_ASSERT(QDEC_STEPS > 0, "only positive number valid");
	BUILD_ASSERT(QDEC_STEPS <= 2048, "overflow possible");

	val->val1 = (acc * FULL_ANGLE) / steps;
    6b7a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
	val->val2 = (acc * FULL_ANGLE) - (val->val1 * steps);
    6b7e:	e9c2 3000 	strd	r3, r0, [r2]
		val->val2 *= 1000000;
		val->val2 /= steps;
	}

	return 0;
}
    6b82:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    6b84:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6b88:	e7fb      	b.n	6b82 <qdec_nrfx_channel_get+0x2e>
    6b8a:	bf00      	nop
    6b8c:	2000174c 	.word	0x2000174c

00006b90 <qdec_nrfx_trigger_set>:
	unsigned int key;

	ARG_UNUSED(dev);
	LOG_DBG("");

	if (trig->type != SENSOR_TRIG_DATA_READY) {
    6b90:	880b      	ldrh	r3, [r1, #0]
    6b92:	2b01      	cmp	r3, #1
    6b94:	d115      	bne.n	6bc2 <qdec_nrfx_trigger_set+0x32>
		return -ENOTSUP;
	}

	if ((trig->chan != SENSOR_CHAN_ALL) &&
    6b96:	884b      	ldrh	r3, [r1, #2]
    6b98:	2b39      	cmp	r3, #57	; 0x39
    6b9a:	d001      	beq.n	6ba0 <qdec_nrfx_trigger_set+0x10>
    6b9c:	2b22      	cmp	r3, #34	; 0x22
    6b9e:	d110      	bne.n	6bc2 <qdec_nrfx_trigger_set+0x32>
	__asm__ volatile(
    6ba0:	f04f 0340 	mov.w	r3, #64	; 0x40
    6ba4:	f3ef 8011 	mrs	r0, BASEPRI
    6ba8:	f383 8812 	msr	BASEPRI_MAX, r3
    6bac:	f3bf 8f6f 	isb	sy
	    (trig->chan != SENSOR_CHAN_ROTATION)) {
		return -ENOTSUP;
	}

	key = irq_lock();
	data->data_ready_handler = handler;
    6bb0:	4b05      	ldr	r3, [pc, #20]	; (6bc8 <qdec_nrfx_trigger_set+0x38>)
	data->data_ready_trigger = trig;
    6bb2:	e9c3 2101 	strd	r2, r1, [r3, #4]
	__asm__ volatile(
    6bb6:	f380 8811 	msr	BASEPRI, r0
    6bba:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	return 0;
    6bbe:	2000      	movs	r0, #0
    6bc0:	4770      	bx	lr
		return -ENOTSUP;
    6bc2:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    6bc6:	4770      	bx	lr
    6bc8:	2000174c 	.word	0x2000174c

00006bcc <accumulate.constprop.0>:
static void accumulate(struct qdec_nrfx_data *data, int16_t acc)
    6bcc:	b510      	push	{r4, lr}
	__asm__ volatile(
    6bce:	f04f 0340 	mov.w	r3, #64	; 0x40
    6bd2:	f3ef 8111 	mrs	r1, BASEPRI
    6bd6:	f383 8812 	msr	BASEPRI_MAX, r3
    6bda:	f3bf 8f6f 	isb	sy
	bool overflow = ((acc > 0) && (ACC_MAX - acc < data->acc)) ||
    6bde:	2800      	cmp	r0, #0
    6be0:	4b0b      	ldr	r3, [pc, #44]	; (6c10 <accumulate.constprop.0+0x44>)
    6be2:	dd0a      	ble.n	6bfa <accumulate.constprop.0+0x2e>
    6be4:	681c      	ldr	r4, [r3, #0]
    6be6:	f5c0 02b6 	rsb	r2, r0, #5963776	; 0x5b0000
    6bea:	f502 62b6 	add.w	r2, r2, #1456	; 0x5b0
    6bee:	42a2      	cmp	r2, r4
    6bf0:	db09      	blt.n	6c06 <accumulate.constprop.0+0x3a>
		data->acc += acc;
    6bf2:	681a      	ldr	r2, [r3, #0]
    6bf4:	4402      	add	r2, r0
    6bf6:	601a      	str	r2, [r3, #0]
    6bf8:	e005      	b.n	6c06 <accumulate.constprop.0+0x3a>
	bool overflow = ((acc > 0) && (ACC_MAX - acc < data->acc)) ||
    6bfa:	d0fa      	beq.n	6bf2 <accumulate.constprop.0+0x26>
			((acc < 0) && (ACC_MIN - acc > data->acc));
    6bfc:	4a05      	ldr	r2, [pc, #20]	; (6c14 <accumulate.constprop.0+0x48>)
    6bfe:	681c      	ldr	r4, [r3, #0]
    6c00:	1a12      	subs	r2, r2, r0
    6c02:	42a2      	cmp	r2, r4
    6c04:	ddf5      	ble.n	6bf2 <accumulate.constprop.0+0x26>
	__asm__ volatile(
    6c06:	f381 8811 	msr	BASEPRI, r1
    6c0a:	f3bf 8f6f 	isb	sy
}
    6c0e:	bd10      	pop	{r4, pc}
    6c10:	2000174c 	.word	0x2000174c
    6c14:	ffa4fa50 	.word	0xffa4fa50

00006c18 <qdec_nrfx_event_handler>:

static void qdec_nrfx_event_handler(nrfx_qdec_event_t event)
{
    6c18:	b590      	push	{r4, r7, lr}
    6c1a:	b083      	sub	sp, #12
    6c1c:	af00      	add	r7, sp, #0
    6c1e:	f107 0308 	add.w	r3, r7, #8
    6c22:	e903 0003 	stmdb	r3, {r0, r1}
    6c26:	883b      	ldrh	r3, [r7, #0]
	sensor_trigger_handler_t handler;
	const struct sensor_trigger *trig;
	unsigned int key;

	switch (event.type) {
    6c28:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
    6c2c:	d118      	bne.n	6c60 <qdec_nrfx_event_handler+0x48>
	case NRF_QDEC_EVENT_REPORTRDY:
		accumulate(&qdec_nrfx_data, event.data.report.acc);
    6c2e:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
    6c32:	f7ff ffcb 	bl	6bcc <accumulate.constprop.0>
	__asm__ volatile(
    6c36:	f04f 0340 	mov.w	r3, #64	; 0x40
    6c3a:	f3ef 8011 	mrs	r0, BASEPRI
    6c3e:	f383 8812 	msr	BASEPRI_MAX, r3
    6c42:	f3bf 8f6f 	isb	sy

		key = irq_lock();
		handler = qdec_nrfx_data.data_ready_handler;
    6c46:	4a0f      	ldr	r2, [pc, #60]	; (6c84 <qdec_nrfx_event_handler+0x6c>)
		trig = qdec_nrfx_data.data_ready_trigger;
    6c48:	e9d2 3101 	ldrd	r3, r1, [r2, #4]
	__asm__ volatile(
    6c4c:	f380 8811 	msr	BASEPRI, r0
    6c50:	f3bf 8f6f 	isb	sy
		irq_unlock(key);

		if (handler) {
    6c54:	b10b      	cbz	r3, 6c5a <qdec_nrfx_event_handler+0x42>
			handler(DEVICE_DT_INST_GET(0), trig);
    6c56:	480c      	ldr	r0, [pc, #48]	; (6c88 <qdec_nrfx_event_handler+0x70>)
    6c58:	4798      	blx	r3

	default:
		LOG_ERR("unhandled event (0x%x)", event.type);
		break;
	}
}
    6c5a:	370c      	adds	r7, #12
    6c5c:	46bd      	mov	sp, r7
    6c5e:	bd90      	pop	{r4, r7, pc}
		LOG_ERR("unhandled event (0x%x)", event.type);
    6c60:	466c      	mov	r4, sp
    6c62:	b088      	sub	sp, #32
    6c64:	466a      	mov	r2, sp
    6c66:	4909      	ldr	r1, [pc, #36]	; (6c8c <qdec_nrfx_event_handler+0x74>)
	switch (event.type) {
    6c68:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("unhandled event (0x%x)", event.type);
    6c6c:	2303      	movs	r3, #3
    6c6e:	f842 3f10 	str.w	r3, [r2, #16]!
    6c72:	4807      	ldr	r0, [pc, #28]	; (6c90 <qdec_nrfx_event_handler+0x78>)
    6c74:	2300      	movs	r3, #0
    6c76:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    6c7a:	f7fc fa01 	bl	3080 <z_impl_z_log_msg_static_create>
    6c7e:	46a5      	mov	sp, r4
}
    6c80:	e7eb      	b.n	6c5a <qdec_nrfx_event_handler+0x42>
    6c82:	bf00      	nop
    6c84:	2000174c 	.word	0x2000174c
    6c88:	0000daec 	.word	0x0000daec
    6c8c:	000102a5 	.word	0x000102a5
    6c90:	0000dbec 	.word	0x0000dbec

00006c94 <qdec_nrfx_init.part.0>:
#endif
}

NRF_DT_CHECK_NODE_HAS_PINCTRL_SLEEP(DT_DRV_INST(0));

static int qdec_nrfx_init(const struct device *dev)
    6c94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	if (ret < 0) {
		return ret;
	}

	nerr = nrfx_qdec_init(&config, qdec_nrfx_event_handler);
    6c96:	491a      	ldr	r1, [pc, #104]	; (6d00 <qdec_nrfx_init.part.0+0x6c>)
    6c98:	481a      	ldr	r0, [pc, #104]	; (6d04 <qdec_nrfx_init.part.0+0x70>)
    6c9a:	f002 fa3d 	bl	9118 <nrfx_qdec_init>
	if (nerr == NRFX_ERROR_INVALID_STATE) {
    6c9e:	4b1a      	ldr	r3, [pc, #104]	; (6d08 <qdec_nrfx_init.part.0+0x74>)
    6ca0:	4298      	cmp	r0, r3
    6ca2:	d10f      	bne.n	6cc4 <qdec_nrfx_init.part.0+0x30>
		LOG_ERR("qdec already in use");
    6ca4:	4b19      	ldr	r3, [pc, #100]	; (6d0c <qdec_nrfx_init.part.0+0x78>)
    6ca6:	9305      	str	r3, [sp, #20]
    6ca8:	2302      	movs	r3, #2
    6caa:	9304      	str	r3, [sp, #16]
    6cac:	4818      	ldr	r0, [pc, #96]	; (6d10 <qdec_nrfx_init.part.0+0x7c>)
    6cae:	2300      	movs	r3, #0
    6cb0:	aa04      	add	r2, sp, #16
    6cb2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6cb6:	f7fc f9e3 	bl	3080 <z_impl_z_log_msg_static_create>
		return -EBUSY;
    6cba:	f06f 000f 	mvn.w	r0, #15

	qdec_nrfx_gpio_ctrl(true);
	nrfx_qdec_enable();

	return 0;
}
    6cbe:	b007      	add	sp, #28
    6cc0:	f85d fb04 	ldr.w	pc, [sp], #4
	} else if (nerr != NRFX_SUCCESS) {
    6cc4:	4b13      	ldr	r3, [pc, #76]	; (6d14 <qdec_nrfx_init.part.0+0x80>)
    6cc6:	4298      	cmp	r0, r3
    6cc8:	d00d      	beq.n	6ce6 <qdec_nrfx_init.part.0+0x52>
		LOG_ERR("failed to initialize qdec");
    6cca:	4b13      	ldr	r3, [pc, #76]	; (6d18 <qdec_nrfx_init.part.0+0x84>)
    6ccc:	9305      	str	r3, [sp, #20]
    6cce:	2302      	movs	r3, #2
    6cd0:	9304      	str	r3, [sp, #16]
    6cd2:	480f      	ldr	r0, [pc, #60]	; (6d10 <qdec_nrfx_init.part.0+0x7c>)
    6cd4:	2300      	movs	r3, #0
    6cd6:	aa04      	add	r2, sp, #16
    6cd8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6cdc:	f7fc f9d0 	bl	3080 <z_impl_z_log_msg_static_create>
		return -EFAULT;
    6ce0:	f06f 000d 	mvn.w	r0, #13
    6ce4:	e7eb      	b.n	6cbe <qdec_nrfx_init.part.0+0x2a>
    p_reg->OUTCLR = clr_mask;
    6ce6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6cea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6cee:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = cnf;
    6cf2:	2203      	movs	r2, #3
    6cf4:	f8c3 2778 	str.w	r2, [r3, #1912]	; 0x778
	nrfx_qdec_enable();
    6cf8:	f002 fa7c 	bl	91f4 <nrfx_qdec_enable>
	return 0;
    6cfc:	2000      	movs	r0, #0
    6cfe:	e7de      	b.n	6cbe <qdec_nrfx_init.part.0+0x2a>
    6d00:	00006c19 	.word	0x00006c19
    6d04:	0000de08 	.word	0x0000de08
    6d08:	0bad0005 	.word	0x0bad0005
    6d0c:	000102bc 	.word	0x000102bc
    6d10:	0000dbec 	.word	0x0000dbec
    6d14:	0bad0000 	.word	0x0bad0000
    6d18:	000102d0 	.word	0x000102d0

00006d1c <qdec_nrfx_init>:
{
    6d1c:	b507      	push	{r0, r1, r2, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6d1e:	2200      	movs	r2, #0
    6d20:	2101      	movs	r1, #1
    6d22:	2012      	movs	r0, #18
    6d24:	f7fd fe06 	bl	4934 <z_arm_irq_priority_set>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    6d28:	480b      	ldr	r0, [pc, #44]	; (6d58 <qdec_nrfx_init+0x3c>)
    6d2a:	aa01      	add	r2, sp, #4
    6d2c:	2100      	movs	r1, #0
    6d2e:	f006 f86f 	bl	ce10 <pinctrl_lookup_state>
	if (ret < 0) {
    6d32:	2800      	cmp	r0, #0
    6d34:	db0c      	blt.n	6d50 <qdec_nrfx_init+0x34>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    6d36:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    6d38:	4a08      	ldr	r2, [pc, #32]	; (6d5c <qdec_nrfx_init+0x40>)
    6d3a:	7919      	ldrb	r1, [r3, #4]
    6d3c:	6818      	ldr	r0, [r3, #0]
    6d3e:	f006 f87a 	bl	ce36 <pinctrl_configure_pins>
	if (ret < 0) {
    6d42:	2800      	cmp	r0, #0
    6d44:	db04      	blt.n	6d50 <qdec_nrfx_init+0x34>
}
    6d46:	b003      	add	sp, #12
    6d48:	f85d eb04 	ldr.w	lr, [sp], #4
    6d4c:	f7ff bfa2 	b.w	6c94 <qdec_nrfx_init.part.0>
    6d50:	b003      	add	sp, #12
    6d52:	f85d fb04 	ldr.w	pc, [sp], #4
    6d56:	bf00      	nop
    6d58:	0000de38 	.word	0x0000de38
    6d5c:	40012000 	.word	0x40012000

00006d60 <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    6d60:	4b01      	ldr	r3, [pc, #4]	; (6d68 <hfclk_on_callback+0x8>)
    6d62:	2201      	movs	r2, #1
    6d64:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    6d66:	4770      	bx	lr
    6d68:	4000c000 	.word	0x4000c000

00006d6c <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    6d6c:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
    6d6e:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
    6d70:	d10b      	bne.n	6d8a <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    6d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    6d74:	4906      	ldr	r1, [pc, #24]	; (6d90 <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
    6d76:	4807      	ldr	r0, [pc, #28]	; (6d94 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    6d78:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
    6d7a:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
    6d7e:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
    6d82:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    6d84:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    6d86:	2000      	movs	r0, #0
    6d88:	4770      	bx	lr
		return -ENOTSUP;
    6d8a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    6d8e:	4770      	bx	lr
    6d90:	0003d090 	.word	0x0003d090
    6d94:	000f4240 	.word	0x000f4240

00006d98 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6d98:	4b04      	ldr	r3, [pc, #16]	; (6dac <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(const void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
    6d9a:	6900      	ldr	r0, [r0, #16]
    6d9c:	2200      	movs	r2, #0
    6d9e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    6da2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	z_impl_k_sem_give(sem);
    6da6:	f003 bf8b 	b.w	acc0 <z_impl_k_sem_give>
    6daa:	bf00      	nop
    6dac:	4000c000 	.word	0x4000c000

00006db0 <temp_nrf5_sample_fetch>:
{
    6db0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
    6db2:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
    6db4:	6aab      	ldr	r3, [r5, #40]	; 0x28
    6db6:	b363      	cbz	r3, 6e12 <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    6db8:	2939      	cmp	r1, #57	; 0x39
    6dba:	d001      	beq.n	6dc0 <temp_nrf5_sample_fetch+0x10>
    6dbc:	290c      	cmp	r1, #12
    6dbe:	d12b      	bne.n	6e18 <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
    6dc0:	f105 0610 	add.w	r6, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    6dc4:	f04f 32ff 	mov.w	r2, #4294967295
    6dc8:	f04f 33ff 	mov.w	r3, #4294967295
    6dcc:	4630      	mov	r0, r6
    6dce:	f003 fe8d 	bl	aaec <z_impl_k_mutex_lock>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    6dd2:	4b13      	ldr	r3, [pc, #76]	; (6e20 <temp_nrf5_sample_fetch+0x70>)
    6dd4:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
    6dd6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    6dd8:	2303      	movs	r3, #3
    6dda:	2400      	movs	r4, #0
    6ddc:	4669      	mov	r1, sp
    6dde:	9403      	str	r4, [sp, #12]
    6de0:	9302      	str	r3, [sp, #8]
    6de2:	f005 f9ef 	bl	c1c4 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    6de6:	f04f 32ff 	mov.w	r2, #4294967295
    6dea:	f04f 33ff 	mov.w	r3, #4294967295
    6dee:	4628      	mov	r0, r5
    6df0:	f003 ff86 	bl	ad00 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    6df4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    6df6:	f005 fa3d 	bl	c274 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    6dfa:	4b0a      	ldr	r3, [pc, #40]	; (6e24 <temp_nrf5_sample_fetch+0x74>)
    6dfc:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    6e00:	626a      	str	r2, [r5, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    6e02:	2201      	movs	r2, #1
    6e04:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    6e06:	4630      	mov	r0, r6
    6e08:	f003 feea 	bl	abe0 <z_impl_k_mutex_unlock>
	return 0;
    6e0c:	4620      	mov	r0, r4
}
    6e0e:	b004      	add	sp, #16
    6e10:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    6e12:	f06f 000a 	mvn.w	r0, #10
    6e16:	e7fa      	b.n	6e0e <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
    6e18:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6e1c:	e7f7      	b.n	6e0e <temp_nrf5_sample_fetch+0x5e>
    6e1e:	bf00      	nop
    6e20:	00006d61 	.word	0x00006d61
    6e24:	4000c000 	.word	0x4000c000

00006e28 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    6e28:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    6e2a:	6904      	ldr	r4, [r0, #16]

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    6e2c:	2000      	movs	r0, #0
    6e2e:	f7ff fccf 	bl	67d0 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    6e32:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    6e34:	f04f 32ff 	mov.w	r2, #4294967295
    6e38:	2100      	movs	r1, #0
    6e3a:	4620      	mov	r0, r4
    6e3c:	f006 fb6c 	bl	d518 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
    6e40:	f104 0010 	add.w	r0, r4, #16
    6e44:	f006 fae0 	bl	d408 <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
    6e48:	2200      	movs	r2, #0
    6e4a:	2101      	movs	r1, #1
    6e4c:	200c      	movs	r0, #12
    6e4e:	f7fd fd71 	bl	4934 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    6e52:	200c      	movs	r0, #12
    6e54:	f7fd fd3e 	bl	48d4 <arch_irq_enable>
    p_reg->INTENSET = mask;
    6e58:	4b02      	ldr	r3, [pc, #8]	; (6e64 <temp_nrf5_init+0x3c>)
    6e5a:	2201      	movs	r2, #1
    6e5c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    6e60:	2000      	movs	r0, #0
    6e62:	bd10      	pop	{r4, pc}
    6e64:	4000c000 	.word	0x4000c000

00006e68 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    6e68:	b570      	push	{r4, r5, r6, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    6e6a:	2301      	movs	r3, #1
    6e6c:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6e6e:	4a0e      	ldr	r2, [pc, #56]	; (6ea8 <compare_int_lock+0x40>)
    6e70:	f3bf 8f5b 	dmb	ish
    6e74:	43dc      	mvns	r4, r3
    6e76:	e852 1f00 	ldrex	r1, [r2]
    6e7a:	ea01 0504 	and.w	r5, r1, r4
    6e7e:	e842 5600 	strex	r6, r5, [r2]
    6e82:	2e00      	cmp	r6, #0
    6e84:	d1f7      	bne.n	6e76 <compare_int_lock+0xe>
    6e86:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6e8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    6e8e:	4082      	lsls	r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    6e90:	4806      	ldr	r0, [pc, #24]	; (6eac <compare_int_lock+0x44>)
    6e92:	f8c0 2308 	str.w	r2, [r0, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    6e96:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    6e9a:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    6e9e:	420b      	tst	r3, r1
}
    6ea0:	bf14      	ite	ne
    6ea2:	2001      	movne	r0, #1
    6ea4:	2000      	moveq	r0, #0
    6ea6:	bd70      	pop	{r4, r5, r6, pc}
    6ea8:	20001788 	.word	0x20001788
    6eac:	40011000 	.word	0x40011000

00006eb0 <sys_clock_timeout_handler>:
}

static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
    6eb0:	b470      	push	{r4, r5, r6}
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint32_t dticks = (uint32_t)(expire_time - last_count) / CYC_PER_TICK;
    6eb2:	490e      	ldr	r1, [pc, #56]	; (6eec <sys_clock_timeout_handler+0x3c>)
    6eb4:	e9d1 3400 	ldrd	r3, r4, [r1]
    6eb8:	1ad0      	subs	r0, r2, r3

	last_count += dticks * CYC_PER_TICK;
    6eba:	18c3      	adds	r3, r0, r3
    6ebc:	f144 0400 	adc.w	r4, r4, #0
	return absolute_time & COUNTER_MAX;
    6ec0:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	last_count += dticks * CYC_PER_TICK;
    6ec4:	e9c1 3400 	strd	r3, r4, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    6ec8:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	if (in_anchor_range(cc_value)) {
    6ecc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    6ed0:	d209      	bcs.n	6ee6 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    6ed2:	4b07      	ldr	r3, [pc, #28]	; (6ef0 <sys_clock_timeout_handler+0x40>)
    6ed4:	681b      	ldr	r3, [r3, #0]
    6ed6:	0a1a      	lsrs	r2, r3, #8
    6ed8:	061b      	lsls	r3, r3, #24
    6eda:	199c      	adds	r4, r3, r6
    6edc:	4b05      	ldr	r3, [pc, #20]	; (6ef4 <sys_clock_timeout_handler+0x44>)
    6ede:	f142 0500 	adc.w	r5, r2, #0
    6ee2:	e9c3 4500 	strd	r4, r5, [r3]
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(dticks);
}
    6ee6:	bc70      	pop	{r4, r5, r6}
	sys_clock_announce(dticks);
    6ee8:	f004 bcee 	b.w	b8c8 <sys_clock_announce>
    6eec:	200009b0 	.word	0x200009b0
    6ef0:	2000178c 	.word	0x2000178c
    6ef4:	200009b8 	.word	0x200009b8

00006ef8 <compare_int_unlock>:
	if (key) {
    6ef8:	b311      	cbz	r1, 6f40 <compare_int_unlock+0x48>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6efa:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    6efe:	2301      	movs	r3, #1
    6f00:	4a10      	ldr	r2, [pc, #64]	; (6f44 <compare_int_unlock+0x4c>)
    6f02:	4083      	lsls	r3, r0
    6f04:	e852 cf00 	ldrex	ip, [r2]
    6f08:	ea4c 0c03 	orr.w	ip, ip, r3
    6f0c:	e842 c100 	strex	r1, ip, [r2]
    6f10:	2900      	cmp	r1, #0
    6f12:	d1f7      	bne.n	6f04 <compare_int_unlock+0xc>
    6f14:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    6f18:	4a0b      	ldr	r2, [pc, #44]	; (6f48 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6f1a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    6f1e:	4083      	lsls	r3, r0
    6f20:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6f24:	4b09      	ldr	r3, [pc, #36]	; (6f4c <compare_int_unlock+0x54>)
    6f26:	f3bf 8f5b 	dmb	ish
    6f2a:	681b      	ldr	r3, [r3, #0]
    6f2c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    6f30:	40c3      	lsrs	r3, r0
    6f32:	07db      	lsls	r3, r3, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6f34:	bf42      	ittt	mi
    6f36:	4b06      	ldrmi	r3, [pc, #24]	; (6f50 <compare_int_unlock+0x58>)
    6f38:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    6f3c:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    6f40:	4770      	bx	lr
    6f42:	bf00      	nop
    6f44:	20001788 	.word	0x20001788
    6f48:	40011000 	.word	0x40011000
    6f4c:	20001784 	.word	0x20001784
    6f50:	e000e100 	.word	0xe000e100

00006f54 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    6f54:	4b0d      	ldr	r3, [pc, #52]	; (6f8c <z_nrf_rtc_timer_read+0x38>)
    6f56:	6818      	ldr	r0, [r3, #0]
    6f58:	0a01      	lsrs	r1, r0, #8
    6f5a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    6f5c:	f3bf 8f5f 	dmb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    6f60:	4b0b      	ldr	r3, [pc, #44]	; (6f90 <z_nrf_rtc_timer_read+0x3c>)
    6f62:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    6f66:	1818      	adds	r0, r3, r0
    6f68:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    6f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    6f70:	d20a      	bcs.n	6f88 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    6f72:	4b08      	ldr	r3, [pc, #32]	; (6f94 <z_nrf_rtc_timer_read+0x40>)
    6f74:	e9d3 2300 	ldrd	r2, r3, [r3]
    6f78:	4290      	cmp	r0, r2
    6f7a:	eb71 0303 	sbcs.w	r3, r1, r3
    6f7e:	d203      	bcs.n	6f88 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    6f80:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    6f84:	f141 0100 	adc.w	r1, r1, #0
}
    6f88:	4770      	bx	lr
    6f8a:	bf00      	nop
    6f8c:	2000178c 	.word	0x2000178c
    6f90:	40011000 	.word	0x40011000
    6f94:	200009b8 	.word	0x200009b8

00006f98 <compare_set>:
{
    6f98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6f9c:	4616      	mov	r6, r2
    6f9e:	461f      	mov	r7, r3
    6fa0:	4604      	mov	r4, r0
	key = compare_int_lock(chan);
    6fa2:	f7ff ff61 	bl	6e68 <compare_int_lock>
    6fa6:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    6fa8:	f7ff ffd4 	bl	6f54 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    6fac:	42b0      	cmp	r0, r6
    6fae:	eb71 0307 	sbcs.w	r3, r1, r7
    6fb2:	d251      	bcs.n	7058 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x58>
		if (target_time - curr_time > COUNTER_HALF_SPAN) {
    6fb4:	4b3a      	ldr	r3, [pc, #232]	; (70a0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa0>)
    6fb6:	1a30      	subs	r0, r6, r0
    6fb8:	eb67 0101 	sbc.w	r1, r7, r1
    6fbc:	4298      	cmp	r0, r3
    6fbe:	f171 0100 	sbcs.w	r1, r1, #0
    6fc2:	d26a      	bcs.n	709a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x9a>
		if (target_time != cc_data[chan].target_time) {
    6fc4:	4b37      	ldr	r3, [pc, #220]	; (70a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>)
    6fc6:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    6fca:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    6fce:	429f      	cmp	r7, r3
    6fd0:	bf08      	it	eq
    6fd2:	4296      	cmpeq	r6, r2
    6fd4:	d04e      	beq.n	7074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
    p_reg->EVTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    6fd6:	4934      	ldr	r1, [pc, #208]	; (70a8 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa8>)
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6fd8:	f44f 3980 	mov.w	r9, #65536	; 0x10000
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6fdc:	f104 0550 	add.w	r5, r4, #80	; 0x50
	nrf_rtc_event_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6fe0:	fa09 f904 	lsl.w	r9, r9, r4
	return nrf_rtc_event_check(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6fe4:	00ad      	lsls	r5, r5, #2
    6fe6:	f8c1 9348 	str.w	r9, [r1, #840]	; 0x348
	event_clear(chan);
    6fea:	4620      	mov	r0, r4
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6fec:	b2ad      	uxth	r5, r5
    6fee:	f005 ff9c 	bl	cf2a <event_clear>
	return absolute_time & COUNTER_MAX;
    6ff2:	f026 4b7f 	bic.w	fp, r6, #4278190080	; 0xff000000
    6ff6:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
    p_reg->CC[ch] = cc_val;
    6ffa:	f504 73a8 	add.w	r3, r4, #336	; 0x150
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    6ffe:	4a2b      	ldr	r2, [pc, #172]	; (70ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>)
    7000:	9301      	str	r3, [sp, #4]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7002:	f505 3588 	add.w	r5, r5, #69632	; 0x11000
	uint32_t cc_val = req_cc;
    7006:	46dc      	mov	ip, fp
	uint32_t cc_inc = MIN_CYCLES_FROM_NOW;
    7008:	f04f 0a03 	mov.w	sl, #3
    p_reg->CC[ch] = cc_val;
    700c:	9b01      	ldr	r3, [sp, #4]
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    700e:	f02c 407f 	bic.w	r0, ip, #4278190080	; 0xff000000
    7012:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    p_reg->EVTENSET = mask;
    7016:	f8c1 9344 	str.w	r9, [r1, #836]	; 0x344
     return p_reg->COUNTER;
    701a:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    701e:	f06f 0002 	mvn.w	r0, #2
    7022:	eba0 0008 	sub.w	r0, r0, r8
    7026:	4460      	add	r0, ip
    7028:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (counter_sub(cc_val, now + MIN_CYCLES_FROM_NOW) >
    702c:	4290      	cmp	r0, r2
    702e:	d921      	bls.n	7074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7030:	6828      	ldr	r0, [r5, #0]
			if (event_check(chan)) {
    7032:	b160      	cbz	r0, 704e <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4e>
     return p_reg->COUNTER;
    7034:	f8d1 8504 	ldr.w	r8, [r1, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    7038:	eba8 000b 	sub.w	r0, r8, fp
    703c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				if (counter_sub(now, req_cc) > COUNTER_HALF_SPAN) {
    7040:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    7044:	d916      	bls.n	7074 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x74>
					event_clear(chan);
    7046:	4620      	mov	r0, r4
    7048:	f005 ff6f 	bl	cf2a <event_clear>
    704c:	4a17      	ldr	r2, [pc, #92]	; (70ac <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xac>)
			cc_val = now + cc_inc;
    704e:	eb0a 0c08 	add.w	ip, sl, r8
			cc_inc++;
    7052:	f10a 0a01 	add.w	sl, sl, #1
	for (;;) {
    7056:	e7d9      	b.n	700c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xc>
		atomic_or(&force_isr_mask, BIT(chan));
    7058:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    705a:	4a15      	ldr	r2, [pc, #84]	; (70b0 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xb0>)
    705c:	f3bf 8f5b 	dmb	ish
    7060:	40a3      	lsls	r3, r4
    7062:	e852 0f00 	ldrex	r0, [r2]
    7066:	4318      	orrs	r0, r3
    7068:	e842 0100 	strex	r1, r0, [r2]
    706c:	2900      	cmp	r1, #0
    706e:	d1f8      	bne.n	7062 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x62>
    7070:	f3bf 8f5b 	dmb	ish
	cc_data[chan].target_time = target_time;
    7074:	490b      	ldr	r1, [pc, #44]	; (70a4 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0xa4>)
	cc_data[chan].callback = handler;
    7076:	980c      	ldr	r0, [sp, #48]	; 0x30
	cc_data[chan].target_time = target_time;
    7078:	0123      	lsls	r3, r4, #4
    707a:	eb01 1204 	add.w	r2, r1, r4, lsl #4
    707e:	e9c2 6702 	strd	r6, r7, [r2, #8]
	cc_data[chan].callback = handler;
    7082:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    7084:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7086:	6053      	str	r3, [r2, #4]
	return ret;
    7088:	2500      	movs	r5, #0
	compare_int_unlock(chan, key);
    708a:	4620      	mov	r0, r4
    708c:	9900      	ldr	r1, [sp, #0]
    708e:	f7ff ff33 	bl	6ef8 <compare_int_unlock>
}
    7092:	4628      	mov	r0, r5
    7094:	b003      	add	sp, #12
    7096:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			return -EINVAL;
    709a:	f06f 0515 	mvn.w	r5, #21
    709e:	e7f4      	b.n	708a <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x8a>
    70a0:	00800001 	.word	0x00800001
    70a4:	200009a0 	.word	0x200009a0
    70a8:	40011000 	.word	0x40011000
    70ac:	007ffffd 	.word	0x007ffffd
    70b0:	20001784 	.word	0x20001784

000070b4 <sys_clock_driver_init>:
	int_event_disable_rtc();
	NVIC_ClearPendingIRQ(RTC_IRQn);
}

static int sys_clock_driver_init(void)
{
    70b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    p_reg->INTENCLR = mask;
    70b6:	4c1b      	ldr	r4, [pc, #108]	; (7124 <sys_clock_driver_init+0x70>)
    70b8:	4b1b      	ldr	r3, [pc, #108]	; (7128 <sys_clock_driver_init+0x74>)
    70ba:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    p_reg->EVTENCLR = mask;
    70be:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	int_event_disable_rtc();

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    70c2:	4b1a      	ldr	r3, [pc, #104]	; (712c <sys_clock_driver_init+0x78>)
    p_reg->PRESCALER = val;
    70c4:	2500      	movs	r5, #0
    70c6:	f04f 30ff 	mov.w	r0, #4294967295
    70ca:	f04f 31ff 	mov.w	r1, #4294967295
    70ce:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    70d2:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    70d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    70da:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    70de:	4b14      	ldr	r3, [pc, #80]	; (7130 <sys_clock_driver_init+0x7c>)
    70e0:	2602      	movs	r6, #2
    70e2:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    70e6:	2101      	movs	r1, #1
    70e8:	f8c4 6304 	str.w	r6, [r4, #772]	; 0x304
    70ec:	2011      	movs	r0, #17
    70ee:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    70f2:	462a      	mov	r2, r5
    70f4:	f7fd fc1e 	bl	4934 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    70f8:	2011      	movs	r0, #17
    70fa:	f7fd fbeb 	bl	48d4 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    70fe:	4a0d      	ldr	r2, [pc, #52]	; (7134 <sys_clock_driver_init+0x80>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    7100:	2301      	movs	r3, #1
    7102:	60a3      	str	r3, [r4, #8]
    7104:	6023      	str	r3, [r4, #0]
    7106:	6013      	str	r3, [r2, #0]
	}

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		MAX_CYCLES : CYC_PER_TICK;

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    7108:	4b0b      	ldr	r3, [pc, #44]	; (7138 <sys_clock_driver_init+0x84>)
    710a:	4a0c      	ldr	r2, [pc, #48]	; (713c <sys_clock_driver_init+0x88>)
    710c:	9300      	str	r3, [sp, #0]
    710e:	9501      	str	r5, [sp, #4]
    7110:	2300      	movs	r3, #0
    7112:	4628      	mov	r0, r5
    7114:	f7ff ff40 	bl	6f98 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    7118:	4630      	mov	r0, r6
    711a:	f7ff fb61 	bl	67e0 <z_nrf_clock_control_lf_on>

	return 0;
}
    711e:	4628      	mov	r0, r5
    7120:	b002      	add	sp, #8
    7122:	bd70      	pop	{r4, r5, r6, pc}
    7124:	40011000 	.word	0x40011000
    7128:	000f0003 	.word	0x000f0003
    712c:	200009a0 	.word	0x200009a0
    7130:	e000e100 	.word	0xe000e100
    7134:	20001788 	.word	0x20001788
    7138:	00006eb1 	.word	0x00006eb1
    713c:	007fffff 	.word	0x007fffff

00007140 <rtc_nrf_isr>:
{
    7140:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    7144:	4c2b      	ldr	r4, [pc, #172]	; (71f4 <rtc_nrf_isr+0xb4>)
    7146:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    714a:	0799      	lsls	r1, r3, #30
    714c:	d50b      	bpl.n	7166 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    714e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    7152:	b143      	cbz	r3, 7166 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    7154:	4a28      	ldr	r2, [pc, #160]	; (71f8 <rtc_nrf_isr+0xb8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7156:	2300      	movs	r3, #0
    7158:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    715c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    7160:	6813      	ldr	r3, [r2, #0]
    7162:	3301      	adds	r3, #1
    7164:	6013      	str	r3, [r2, #0]
    return p_reg->INTENSET & mask;
    7166:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    716a:	03da      	lsls	r2, r3, #15
    716c:	d523      	bpl.n	71b6 <rtc_nrf_isr+0x76>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    716e:	f3bf 8f5b 	dmb	ish
    7172:	4b22      	ldr	r3, [pc, #136]	; (71fc <rtc_nrf_isr+0xbc>)
    7174:	e853 2f00 	ldrex	r2, [r3]
    7178:	f022 0101 	bic.w	r1, r2, #1
    717c:	e843 1000 	strex	r0, r1, [r3]
    7180:	2800      	cmp	r0, #0
    7182:	d1f7      	bne.n	7174 <rtc_nrf_isr+0x34>
    7184:	f3bf 8f5b 	dmb	ish
		if ((atomic_and(&force_isr_mask, ~BIT(chan)) & BIT(chan)) ||
    7188:	07d3      	lsls	r3, r2, #31
    718a:	d402      	bmi.n	7192 <rtc_nrf_isr+0x52>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    718c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    7190:	b18b      	cbz	r3, 71b6 <rtc_nrf_isr+0x76>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7192:	2500      	movs	r5, #0
    7194:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    7198:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		curr_time = z_nrf_rtc_timer_read();
    719c:	f7ff feda 	bl	6f54 <z_nrf_rtc_timer_read>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
    71a0:	f3ef 8210 	mrs	r2, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
    71a4:	b672      	cpsid	i
		expire_time = cc_data[chan].target_time;
    71a6:	4b16      	ldr	r3, [pc, #88]	; (7200 <rtc_nrf_isr+0xc0>)
    71a8:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    71ac:	42b0      	cmp	r0, r6
    71ae:	41b9      	sbcs	r1, r7
    71b0:	d204      	bcs.n	71bc <rtc_nrf_isr+0x7c>
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
    71b2:	f382 8810 	msr	PRIMASK, r2
}
    71b6:	b003      	add	sp, #12
    71b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    71bc:	f04f 38ff 	mov.w	r8, #4294967295
    71c0:	f04f 39ff 	mov.w	r9, #4294967295
    71c4:	e9c3 8902 	strd	r8, r9, [r3, #8]
			user_context = cc_data[chan].user_context;
    71c8:	e9d3 1000 	ldrd	r1, r0, [r3]
			cc_data[chan].callback = NULL;
    71cc:	601d      	str	r5, [r3, #0]
    p_reg->EVTENCLR = mask;
    71ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    71d2:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    71d6:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    71da:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    71de:	f382 8810 	msr	PRIMASK, r2
		if (handler) {
    71e2:	2900      	cmp	r1, #0
    71e4:	d0e7      	beq.n	71b6 <rtc_nrf_isr+0x76>
			handler(chan, expire_time, user_context);
    71e6:	9000      	str	r0, [sp, #0]
    71e8:	4632      	mov	r2, r6
    71ea:	463b      	mov	r3, r7
    71ec:	4628      	mov	r0, r5
    71ee:	4788      	blx	r1
    71f0:	e7e1      	b.n	71b6 <rtc_nrf_isr+0x76>
    71f2:	bf00      	nop
    71f4:	40011000 	.word	0x40011000
    71f8:	2000178c 	.word	0x2000178c
    71fc:	20001784 	.word	0x20001784
    7200:	200009a0 	.word	0x200009a0

00007204 <sys_clock_set_timeout>:
	if (ticks == K_TICKS_FOREVER) {
    7204:	1c43      	adds	r3, r0, #1
{
    7206:	b513      	push	{r0, r1, r4, lr}
	if (ticks == K_TICKS_FOREVER) {
    7208:	d022      	beq.n	7250 <sys_clock_set_timeout+0x4c>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    720a:	2801      	cmp	r0, #1
    720c:	dd22      	ble.n	7254 <sys_clock_set_timeout+0x50>
    720e:	4a12      	ldr	r2, [pc, #72]	; (7258 <sys_clock_set_timeout+0x54>)
    7210:	4b12      	ldr	r3, [pc, #72]	; (725c <sys_clock_set_timeout+0x58>)
    7212:	4290      	cmp	r0, r2
    7214:	bfd4      	ite	le
    7216:	4604      	movle	r4, r0
    7218:	461c      	movgt	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    721a:	f7ff fe9b 	bl	6f54 <z_nrf_rtc_timer_read>
    721e:	4b10      	ldr	r3, [pc, #64]	; (7260 <sys_clock_set_timeout+0x5c>)
	if (cyc > MAX_CYCLES) {
    7220:	490e      	ldr	r1, [pc, #56]	; (725c <sys_clock_set_timeout+0x58>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    7222:	e9d3 2300 	ldrd	r2, r3, [r3]
    7226:	1a80      	subs	r0, r0, r2
		cyc = 0;
    7228:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    722c:	bf28      	it	cs
    722e:	2400      	movcs	r4, #0
	cyc += unannounced;
    7230:	4404      	add	r4, r0
	if (cyc > MAX_CYCLES) {
    7232:	428c      	cmp	r4, r1
    7234:	bf28      	it	cs
    7236:	460c      	movcs	r4, r1
	uint64_t target_time = cyc + last_count;
    7238:	18a2      	adds	r2, r4, r2
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    723a:	490a      	ldr	r1, [pc, #40]	; (7264 <sys_clock_set_timeout+0x60>)
    723c:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    723e:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    7242:	9001      	str	r0, [sp, #4]
    7244:	f143 0300 	adc.w	r3, r3, #0
    7248:	f7ff fea6 	bl	6f98 <compare_set>
}
    724c:	b002      	add	sp, #8
    724e:	bd10      	pop	{r4, pc}
		cyc = MAX_TICKS * CYC_PER_TICK;
    7250:	4c02      	ldr	r4, [pc, #8]	; (725c <sys_clock_set_timeout+0x58>)
    7252:	e7e2      	b.n	721a <sys_clock_set_timeout+0x16>
		cyc = CLAMP(ticks, 1, (int32_t)MAX_TICKS);
    7254:	2401      	movs	r4, #1
    7256:	e7e0      	b.n	721a <sys_clock_set_timeout+0x16>
    7258:	007ffffe 	.word	0x007ffffe
    725c:	007fffff 	.word	0x007fffff
    7260:	200009b0 	.word	0x200009b0
    7264:	00006eb1 	.word	0x00006eb1

00007268 <sys_clock_elapsed>:
{
    7268:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    726a:	f7ff fe73 	bl	6f54 <z_nrf_rtc_timer_read>
    726e:	4b02      	ldr	r3, [pc, #8]	; (7278 <sys_clock_elapsed+0x10>)
    7270:	681b      	ldr	r3, [r3, #0]
}
    7272:	1ac0      	subs	r0, r0, r3
    7274:	bd08      	pop	{r3, pc}
    7276:	bf00      	nop
    7278:	200009b0 	.word	0x200009b0

0000727c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    727c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    727e:	f7fb fe1f 	bl	2ec0 <z_impl_log_panic>
	ARG_UNUSED(reason);

	LOG_PANIC();

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    7282:	4b07      	ldr	r3, [pc, #28]	; (72a0 <k_sys_fatal_error_handler+0x24>)
    7284:	9305      	str	r3, [sp, #20]
    7286:	2302      	movs	r3, #2
    7288:	9304      	str	r3, [sp, #16]
    728a:	4806      	ldr	r0, [pc, #24]	; (72a4 <k_sys_fatal_error_handler+0x28>)
    728c:	2300      	movs	r3, #0
    728e:	aa04      	add	r2, sp, #16
    7290:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7294:	f7fb fef4 	bl	3080 <z_impl_z_log_msg_static_create>
		sys_arch_reboot(0);
    7298:	2000      	movs	r0, #0
    729a:	f7fe f8b1 	bl	5400 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    729e:	bf00      	nop
    72a0:	0001031a 	.word	0x0001031a
    72a4:	0000db9c 	.word	0x0000db9c

000072a8 <update_radio_bitrate>:
	nrf_radio_txpower_set(NRF_RADIO, tx_power.radio_tx_power);
}

static bool update_radio_bitrate(void)
{
	nrf_radio_mode_set(NRF_RADIO, esb_cfg.bitrate);
    72a8:	4b0b      	ldr	r3, [pc, #44]	; (72d8 <update_radio_bitrate+0x30>)
    return (nrf_radio_txpower_t)(p_reg->TXPOWER >> RADIO_TXPOWER_TXPOWER_Pos);
}

NRF_STATIC_INLINE void nrf_radio_mode_set(NRF_RADIO_Type * p_reg, nrf_radio_mode_t radio_mode)
{
    p_reg->MODE = ((uint32_t) radio_mode << RADIO_MODE_MODE_Pos);
    72aa:	4a0c      	ldr	r2, [pc, #48]	; (72dc <update_radio_bitrate+0x34>)
    72ac:	7a1b      	ldrb	r3, [r3, #8]
    72ae:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510

	switch (esb_cfg.bitrate) {
    72b2:	2b04      	cmp	r3, #4
    72b4:	d80d      	bhi.n	72d2 <update_radio_bitrate+0x2a>
    72b6:	e8df f003 	tbb	[pc, r3]
    72ba:	0308      	.short	0x0308
    72bc:	080c      	.short	0x080c
    72be:	03          	.byte	0x03
    72bf:	00          	.byte	0x00

#if defined(RADIO_MODE_MODE_Ble_2Mbit)
	case ESB_BITRATE_2MBPS_BLE:
#endif /* defined(RADIO_MODE_MODE_Ble_2Mbit) */

		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_2MBPS;
    72c0:	4b07      	ldr	r3, [pc, #28]	; (72e0 <update_radio_bitrate+0x38>)
    72c2:	22a0      	movs	r2, #160	; 0xa0
    72c4:	601a      	str	r2, [r3, #0]
	default:
		/* Should not be reached */
		return false;
	}

	return true;
    72c6:	2001      	movs	r0, #1
    72c8:	4770      	bx	lr
		wait_for_ack_timeout_us = RX_ACK_TIMEOUT_US_1MBPS_BLE;
    72ca:	4b05      	ldr	r3, [pc, #20]	; (72e0 <update_radio_bitrate+0x38>)
    72cc:	f44f 7296 	mov.w	r2, #300	; 0x12c
    72d0:	e7f8      	b.n	72c4 <update_radio_bitrate+0x1c>
	switch (esb_cfg.bitrate) {
    72d2:	2000      	movs	r0, #0
}
    72d4:	4770      	bx	lr
    72d6:	bf00      	nop
    72d8:	20001888 	.word	0x20001888
    72dc:	40001000 	.word	0x40001000
    72e0:	20001798 	.word	0x20001798

000072e4 <reset_fifos>:
	return params_valid;
}

static void reset_fifos(void)
{
	tx_fifo.back = 0;
    72e4:	4a04      	ldr	r2, [pc, #16]	; (72f8 <reset_fifos+0x14>)
    72e6:	2300      	movs	r3, #0
	tx_fifo.front = 0;
    72e8:	e9c2 3308 	strd	r3, r3, [r2, #32]
	tx_fifo.count = 0;
    72ec:	6293      	str	r3, [r2, #40]	; 0x28

	rx_fifo.back = 0;
    72ee:	4a03      	ldr	r2, [pc, #12]	; (72fc <reset_fifos+0x18>)
	rx_fifo.front = 0;
    72f0:	e9c2 3308 	strd	r3, r3, [r2, #32]
	rx_fifo.count = 0;
    72f4:	6293      	str	r3, [r2, #40]	; 0x28
}
    72f6:	4770      	bx	lr
    72f8:	20001854 	.word	0x20001854
    72fc:	20001828 	.word	0x20001828

00007300 <esb_timer_handler>:
	return true;
}

static void esb_timer_handler(nrf_timer_event_t event_type, void *context)
{
	if (nrf_timer_int_enable_check(esb_timer.p_reg, NRF_TIMER_INT_COMPARE1_MASK)) {
    7300:	4b05      	ldr	r3, [pc, #20]	; (7318 <esb_timer_handler+0x18>)
    7302:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_timer_int_enable_check(NRF_TIMER_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
    7304:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    7308:	0392      	lsls	r2, r2, #14
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    730a:	bf42      	ittt	mi
    730c:	2200      	movmi	r2, #0
    730e:	f8c3 2144 	strmi.w	r2, [r3, #324]	; 0x144
    7312:	f8d3 3144 	ldrmi.w	r3, [r3, #324]	; 0x144
		nrf_timer_event_clear(esb_timer.p_reg, NRF_TIMER_EVENT_COMPARE1);
		if (on_timer_compare1 != NULL) {
			on_timer_compare1();
		}
	}
}
    7316:	4770      	bx	lr
    7318:	20000084 	.word	0x20000084

0000731c <esb_fem_for_tx_set>:
{
    731c:	b538      	push	{r3, r4, r5, lr}
	timer_shorts = NRF_TIMER_SHORT_COMPARE2_STOP_MASK;
    731e:	2800      	cmp	r0, #0
	if (mpsl_fem_pa_configuration_set(&tx_event, &disable_event) == 0) {
    7320:	490a      	ldr	r1, [pc, #40]	; (734c <esb_fem_for_tx_set+0x30>)
    7322:	480b      	ldr	r0, [pc, #44]	; (7350 <esb_fem_for_tx_set+0x34>)
    7324:	4d0b      	ldr	r5, [pc, #44]	; (7354 <esb_fem_for_tx_set+0x38>)
	timer_shorts = NRF_TIMER_SHORT_COMPARE2_STOP_MASK;
    7326:	f240 4404 	movw	r4, #1028	; 0x404
    732a:	bf08      	it	eq
    732c:	f44f 6480 	moveq.w	r4, #1024	; 0x400
	if (mpsl_fem_pa_configuration_set(&tx_event, &disable_event) == 0) {
    7330:	f7f8 ffd6 	bl	2e0 <mpsl_fem_pa_configuration_set>
    7334:	b928      	cbnz	r0, 7342 <esb_fem_for_tx_set+0x26>
		esb_ppi_for_fem_set();
    7336:	f000 feeb 	bl	8110 <esb_ppi_for_fem_set>
	nrf_timer_shorts_set(esb_timer.p_reg, timer_shorts);
    733a:	682b      	ldr	r3, [r5, #0]
    p_reg->SHORTS = mask;
    733c:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
}
    7340:	bd38      	pop	{r3, r4, r5, pc}
		nrf_timer_cc_set(esb_timer.p_reg, NRF_TIMER_CC_CHANNEL2, TX_RAMP_UP_TIME_US);
    7342:	682b      	ldr	r3, [r5, #0]

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
    7344:	2281      	movs	r2, #129	; 0x81
    7346:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
}
    734a:	e7f6      	b.n	733a <esb_fem_for_tx_set+0x1e>
    734c:	20000040 	.word	0x20000040
    7350:	0000de68 	.word	0x0000de68
    7354:	20000084 	.word	0x20000084

00007358 <esb_fem_reset>:
{
    7358:	b508      	push	{r3, lr}
	nrf_timer_task_trigger(esb_timer.p_reg, NRF_TIMER_TASK_SHUTDOWN);
    735a:	4b08      	ldr	r3, [pc, #32]	; (737c <esb_fem_reset+0x24>)
    735c:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    735e:	2201      	movs	r2, #1
    7360:	611a      	str	r2, [r3, #16]
	mpsl_fem_lna_configuration_clear();
    7362:	f7f8 ffab 	bl	2bc <mpsl_fem_lna_configuration_clear>
	mpsl_fem_pa_configuration_clear();
    7366:	f7f8 ffb5 	bl	2d4 <mpsl_fem_pa_configuration_clear>
	esb_ppi_for_fem_clear();
    736a:	f000 feed 	bl	8148 <esb_ppi_for_fem_clear>
	mpsl_fem_deactivate_now(MPSL_FEM_ALL);
    736e:	2003      	movs	r0, #3
    7370:	f7f8 ff98 	bl	2a4 <mpsl_fem_deactivate_now>
}
    7374:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mpsl_fem_disable();
    7378:	f7f8 bf9a 	b.w	2b0 <mpsl_fem_disable>
    737c:	20000084 	.word	0x20000084

00007380 <update_radio_tx_power>:
{
    7380:	b507      	push	{r0, r1, r2, lr}
				      (RADIO_BASE_FREQUENCY + esb_addr.rf_channel), false);
    7382:	4b0b      	ldr	r3, [pc, #44]	; (73b0 <update_radio_tx_power+0x30>)
	(void)mpsl_fem_tx_power_split(esb_cfg.tx_output_power, &tx_power,
    7384:	480b      	ldr	r0, [pc, #44]	; (73b4 <update_radio_tx_power+0x34>)
				      (RADIO_BASE_FREQUENCY + esb_addr.rf_channel), false);
    7386:	7cda      	ldrb	r2, [r3, #19]
	(void)mpsl_fem_tx_power_split(esb_cfg.tx_output_power, &tx_power,
    7388:	f990 000a 	ldrsb.w	r0, [r0, #10]
    738c:	2300      	movs	r3, #0
    738e:	f502 6216 	add.w	r2, r2, #2400	; 0x960
    7392:	a901      	add	r1, sp, #4
    7394:	f7f8 ffb0 	bl	2f8 <mpsl_fem_tx_power_split>
	err = mpsl_fem_pa_gain_set(&tx_power.fem);
    7398:	f10d 0005 	add.w	r0, sp, #5
    739c:	f7f8 ffa6 	bl	2ec <mpsl_fem_pa_gain_set>
    p_reg->TXPOWER = (((uint32_t)tx_power) << RADIO_TXPOWER_TXPOWER_Pos);
    73a0:	f89d 2004 	ldrb.w	r2, [sp, #4]
    73a4:	4b04      	ldr	r3, [pc, #16]	; (73b8 <update_radio_tx_power+0x38>)
    73a6:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
}
    73aa:	b003      	add	sp, #12
    73ac:	f85d fb04 	ldr.w	pc, [sp], #4
    73b0:	20000070 	.word	0x20000070
    73b4:	20001888 	.word	0x20001888
    73b8:	40001000 	.word	0x40001000

000073bc <update_radio_addresses.part.0>:
static void update_radio_addresses(uint8_t update_mask)
    73bc:	b510      	push	{r4, lr}
		nrf_radio_prefix0_set(NRF_RADIO, bytewise_bit_swap(&esb_addr.pipe_prefixes[0]));
    73be:	4c06      	ldr	r4, [pc, #24]	; (73d8 <update_radio_addresses.part.0+0x1c>)
    return p_reg->BASE1;
}

NRF_STATIC_INLINE void nrf_radio_prefix0_set(NRF_RADIO_Type * p_reg, uint32_t prefixes)
{
    p_reg->PREFIX0 = prefixes;
    73c0:	4906      	ldr	r1, [pc, #24]	; (73dc <update_radio_addresses.part.0+0x20>)
    73c2:	4620      	mov	r0, r4
    73c4:	f005 fdc1 	bl	cf4a <bytewise_bit_swap>
    73c8:	f8c1 0524 	str.w	r0, [r1, #1316]	; 0x524
		nrf_radio_prefix1_set(NRF_RADIO, bytewise_bit_swap(&esb_addr.pipe_prefixes[4]));
    73cc:	1d20      	adds	r0, r4, #4
    73ce:	f005 fdbc 	bl	cf4a <bytewise_bit_swap>
    return p_reg->PREFIX0;
}

NRF_STATIC_INLINE void nrf_radio_prefix1_set(NRF_RADIO_Type * p_reg, uint32_t prefixes)
{
    p_reg->PREFIX1 = prefixes;
    73d2:	f8c1 0528 	str.w	r0, [r1, #1320]	; 0x528
}
    73d6:	bd10      	pop	{r4, pc}
    73d8:	20000078 	.word	0x20000078
    73dc:	40001000 	.word	0x40001000

000073e0 <tx_fifo_remove_last.part.0>:
	__asm__ volatile(
    73e0:	f04f 0340 	mov.w	r3, #64	; 0x40
    73e4:	f3ef 8111 	mrs	r1, BASEPRI
    73e8:	f383 8812 	msr	BASEPRI_MAX, r3
    73ec:	f3bf 8f6f 	isb	sy
	tx_fifo.count--;
    73f0:	4a07      	ldr	r2, [pc, #28]	; (7410 <tx_fifo_remove_last.part.0+0x30>)
    73f2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    73f4:	3b01      	subs	r3, #1
    73f6:	6293      	str	r3, [r2, #40]	; 0x28
	if (++tx_fifo.front >= CONFIG_ESB_TX_FIFO_SIZE) {
    73f8:	6a53      	ldr	r3, [r2, #36]	; 0x24
    73fa:	3301      	adds	r3, #1
		tx_fifo.front = 0;
    73fc:	2b08      	cmp	r3, #8
    73fe:	bf28      	it	cs
    7400:	2300      	movcs	r3, #0
    7402:	6253      	str	r3, [r2, #36]	; 0x24
	__asm__ volatile(
    7404:	f381 8811 	msr	BASEPRI, r1
    7408:	f3bf 8f6f 	isb	sy
}
    740c:	4770      	bx	lr
    740e:	bf00      	nop
    7410:	20001854 	.word	0x20001854

00007414 <rx_fifo_push_rfbuf.part.0>:
static bool rx_fifo_push_rfbuf(uint8_t pipe, uint8_t pid)
    7414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (esb_cfg.protocol == ESB_PROTOCOL_ESB_DPL) {
    7418:	4b22      	ldr	r3, [pc, #136]	; (74a4 <rx_fifo_push_rfbuf.part.0+0x90>)
    741a:	4f23      	ldr	r7, [pc, #140]	; (74a8 <rx_fifo_push_rfbuf.part.0+0x94>)
    741c:	781a      	ldrb	r2, [r3, #0]
    741e:	2a01      	cmp	r2, #1
static bool rx_fifo_push_rfbuf(uint8_t pipe, uint8_t pid)
    7420:	4680      	mov	r8, r0
    7422:	460e      	mov	r6, r1
	if (esb_cfg.protocol == ESB_PROTOCOL_ESB_DPL) {
    7424:	d130      	bne.n	7488 <rx_fifo_push_rfbuf.part.0+0x74>
		if (rx_pdu->type.dpl_pdu.length > CONFIG_ESB_MAX_PAYLOAD_LENGTH) {
    7426:	783b      	ldrb	r3, [r7, #0]
    7428:	f3c3 0205 	ubfx	r2, r3, #0, #6
    742c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    7430:	2b20      	cmp	r3, #32
    7432:	d834      	bhi.n	749e <rx_fifo_push_rfbuf.part.0+0x8a>
		rx_fifo.payload[rx_fifo.back]->length = rx_pdu->type.dpl_pdu.length;
    7434:	4b1d      	ldr	r3, [pc, #116]	; (74ac <rx_fifo_push_rfbuf.part.0+0x98>)
    7436:	6a19      	ldr	r1, [r3, #32]
    7438:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
    743c:	701a      	strb	r2, [r3, #0]
	memcpy(rx_fifo.payload[rx_fifo.back]->data, rx_pdu->data,
    743e:	4c1b      	ldr	r4, [pc, #108]	; (74ac <rx_fifo_push_rfbuf.part.0+0x98>)
    7440:	491b      	ldr	r1, [pc, #108]	; (74b0 <rx_fifo_push_rfbuf.part.0+0x9c>)
    7442:	6a23      	ldr	r3, [r4, #32]
    7444:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
    7448:	f810 2b05 	ldrb.w	r2, [r0], #5
    744c:	f005 fb5e 	bl	cb0c <memcpy>
	rx_fifo.payload[rx_fifo.back]->pipe = pipe;
    7450:	6a23      	ldr	r3, [r4, #32]
    return p_reg->TIFS;
}

NRF_STATIC_INLINE uint8_t nrf_radio_rssi_sample_get(NRF_RADIO_Type const * p_reg)
{
    return (uint8_t)((p_reg->RSSISAMPLE & RADIO_RSSISAMPLE_RSSISAMPLE_Msk) >>
    7452:	4a18      	ldr	r2, [pc, #96]	; (74b4 <rx_fifo_push_rfbuf.part.0+0xa0>)
    7454:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
    7458:	f885 8001 	strb.w	r8, [r5, #1]
    745c:	f8d2 2548 	ldr.w	r2, [r2, #1352]	; 0x548
	rx_fifo.payload[rx_fifo.back]->pid = pid;
    7460:	712e      	strb	r6, [r5, #4]
	if (++rx_fifo.back >= CONFIG_ESB_RX_FIFO_SIZE) {
    7462:	3301      	adds	r3, #1
    7464:	f002 027f 	and.w	r2, r2, #127	; 0x7f
		rx_fifo.back = 0;
    7468:	2b08      	cmp	r3, #8
	rx_fifo.payload[rx_fifo.back]->rssi = nrf_radio_rssi_sample_get(NRF_RADIO);
    746a:	70aa      	strb	r2, [r5, #2]
	rx_fifo.payload[rx_fifo.back]->noack = !rx_pdu->type.dpl_pdu.no_ack;
    746c:	787a      	ldrb	r2, [r7, #1]
		rx_fifo.back = 0;
    746e:	bf28      	it	cs
    7470:	2300      	movcs	r3, #0
    7472:	6223      	str	r3, [r4, #32]
	rx_fifo.count++;
    7474:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	rx_fifo.payload[rx_fifo.back]->noack = !rx_pdu->type.dpl_pdu.no_ack;
    7476:	43d2      	mvns	r2, r2
    7478:	f002 0201 	and.w	r2, r2, #1
	rx_fifo.count++;
    747c:	3301      	adds	r3, #1
	rx_fifo.payload[rx_fifo.back]->noack = !rx_pdu->type.dpl_pdu.no_ack;
    747e:	70ea      	strb	r2, [r5, #3]
	rx_fifo.count++;
    7480:	62a3      	str	r3, [r4, #40]	; 0x28
	return true;
    7482:	2001      	movs	r0, #1
}
    7484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_fifo.payload[rx_fifo.back]->length = rx_pdu->type.dpl_pdu.length;
    7488:	4a08      	ldr	r2, [pc, #32]	; (74ac <rx_fifo_push_rfbuf.part.0+0x98>)
    748a:	6a11      	ldr	r1, [r2, #32]
    748c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
	} else if (esb_cfg.mode == ESB_MODE_PTX) {
    7490:	7859      	ldrb	r1, [r3, #1]
    7492:	b909      	cbnz	r1, 7498 <rx_fifo_push_rfbuf.part.0+0x84>
		rx_fifo.payload[rx_fifo.back]->length = 0;
    7494:	7011      	strb	r1, [r2, #0]
    7496:	e7d2      	b.n	743e <rx_fifo_push_rfbuf.part.0+0x2a>
		rx_fifo.payload[rx_fifo.back]->length = esb_cfg.payload_length;
    7498:	7c5b      	ldrb	r3, [r3, #17]
    749a:	7013      	strb	r3, [r2, #0]
    749c:	e7cf      	b.n	743e <rx_fifo_push_rfbuf.part.0+0x2a>
		return false;
    749e:	2000      	movs	r0, #0
    74a0:	e7f0      	b.n	7484 <rx_fifo_push_rfbuf.part.0+0x70>
    74a2:	bf00      	nop
    74a4:	20001888 	.word	0x20001888
    74a8:	20001eb3 	.word	0x20001eb3
    74ac:	20001828 	.word	0x20001828
    74b0:	20001eb5 	.word	0x20001eb5
    74b4:	40001000 	.word	0x40001000

000074b8 <nrf_radio_packet_configure.constprop.0>:
                    ((uint32_t)p_config->s1len << RADIO_PCNF0_S1LEN_Pos) |
    74b8:	7883      	ldrb	r3, [r0, #2]
                    ((uint32_t)p_config->s0len << RADIO_PCNF0_S0LEN_Pos) |
    74ba:	7842      	ldrb	r2, [r0, #1]
                    ((uint32_t)p_config->s1len << RADIO_PCNF0_S1LEN_Pos) |
    74bc:	041b      	lsls	r3, r3, #16
                    ((uint32_t)p_config->s0len << RADIO_PCNF0_S0LEN_Pos) |
    74be:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    p_reg->PCNF0 = (((uint32_t)p_config->lflen << RADIO_PCNF0_LFLEN_Pos) |
    74c2:	7802      	ldrb	r2, [r0, #0]
                    ((uint32_t)p_config->s0len << RADIO_PCNF0_S0LEN_Pos) |
    74c4:	4313      	orrs	r3, r2
                        (RADIO_PCNF0_S1INCL_Include   << RADIO_PCNF0_S1INCL_Pos) :
    74c6:	78c2      	ldrb	r2, [r0, #3]
                    ((uint32_t)p_config->s1len << RADIO_PCNF0_S1LEN_Pos) |
    74c8:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
                    ((uint32_t)p_config->cilen << RADIO_PCNF0_CILEN_Pos) |
    74cc:	7902      	ldrb	r2, [r0, #4]
                        (RADIO_PCNF0_S1INCL_Automatic << RADIO_PCNF0_S1INCL_Pos) ) |
    74ce:	ea43 5382 	orr.w	r3, r3, r2, lsl #22
                    ((uint32_t)p_config->plen << RADIO_PCNF0_PLEN_Pos) |
    74d2:	7942      	ldrb	r2, [r0, #5]
                    ((uint32_t)p_config->cilen << RADIO_PCNF0_CILEN_Pos) |
    74d4:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
                        (RADIO_PCNF0_CRCINC_Include << RADIO_PCNF0_CRCINC_Pos) :
    74d8:	7982      	ldrb	r2, [r0, #6]
                    ((uint32_t)p_config->plen << RADIO_PCNF0_PLEN_Pos) |
    74da:	ea43 6382 	orr.w	r3, r3, r2, lsl #26
                    ((uint32_t)p_config->termlen << RADIO_PCNF0_TERMLEN_Pos) |
    74de:	79c2      	ldrb	r2, [r0, #7]
    74e0:	ea43 7342 	orr.w	r3, r3, r2, lsl #29
    p_reg->PCNF0 = (((uint32_t)p_config->lflen << RADIO_PCNF0_LFLEN_Pos) |
    74e4:	4a09      	ldr	r2, [pc, #36]	; (750c <nrf_radio_packet_configure.constprop.0+0x54>)
    74e6:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
                    ((uint32_t)p_config->balen   << RADIO_PCNF1_BALEN_Pos) |
    74ea:	7a83      	ldrb	r3, [r0, #10]
                    ((uint32_t)p_config->statlen << RADIO_PCNF1_STATLEN_Pos) |
    74ec:	7a41      	ldrb	r1, [r0, #9]
                    ((uint32_t)p_config->balen   << RADIO_PCNF1_BALEN_Pos) |
    74ee:	041b      	lsls	r3, r3, #16
                    ((uint32_t)p_config->statlen << RADIO_PCNF1_STATLEN_Pos) |
    74f0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    p_reg->PCNF1 = (((uint32_t)p_config->maxlen  << RADIO_PCNF1_MAXLEN_Pos) |
    74f4:	7a01      	ldrb	r1, [r0, #8]
                    ((uint32_t)p_config->statlen << RADIO_PCNF1_STATLEN_Pos) |
    74f6:	430b      	orrs	r3, r1
                         (RADIO_PCNF1_ENDIAN_Big    << RADIO_PCNF1_ENDIAN_Pos) :
    74f8:	7ac1      	ldrb	r1, [r0, #11]
                    ((uint32_t)p_config->balen   << RADIO_PCNF1_BALEN_Pos) |
    74fa:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
                         (RADIO_PCNF1_WHITEEN_Enabled  << RADIO_PCNF1_WHITEEN_Pos) :
    74fe:	7b01      	ldrb	r1, [r0, #12]
                         (RADIO_PCNF1_ENDIAN_Little << RADIO_PCNF1_ENDIAN_Pos) ) |
    7500:	ea43 6341 	orr.w	r3, r3, r1, lsl #25
    p_reg->PCNF1 = (((uint32_t)p_config->maxlen  << RADIO_PCNF1_MAXLEN_Pos) |
    7504:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
}
    7508:	4770      	bx	lr
    750a:	bf00      	nop
    750c:	40001000 	.word	0x40001000

00007510 <update_rf_payload_format_esb>:
{
    7510:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    7512:	4604      	mov	r4, r0
	const nrf_radio_packet_conf_t packet_config = {
    7514:	220d      	movs	r2, #13
    7516:	2100      	movs	r1, #0
    7518:	4668      	mov	r0, sp
    751a:	f005 fb02 	bl	cb22 <memset>
    751e:	4b0a      	ldr	r3, [pc, #40]	; (7548 <update_rf_payload_format_esb+0x38>)
    7520:	9300      	str	r3, [sp, #0]
		.balen = (esb_addr.addr_length - 1),
    7522:	4b0a      	ldr	r3, [pc, #40]	; (754c <update_rf_payload_format_esb+0x3c>)
    7524:	7c5b      	ldrb	r3, [r3, #17]
	const nrf_radio_packet_conf_t packet_config = {
    7526:	b2e0      	uxtb	r0, r4
		.balen = (esb_addr.addr_length - 1),
    7528:	3b01      	subs	r3, #1
	const nrf_radio_packet_conf_t packet_config = {
    752a:	f88d 0008 	strb.w	r0, [sp, #8]
    752e:	f88d 0009 	strb.w	r0, [sp, #9]
    7532:	f88d 300a 	strb.w	r3, [sp, #10]
	nrf_radio_packet_configure(NRF_RADIO, &packet_config);
    7536:	4668      	mov	r0, sp
	const nrf_radio_packet_conf_t packet_config = {
    7538:	2301      	movs	r3, #1
    753a:	f88d 300b 	strb.w	r3, [sp, #11]
	nrf_radio_packet_configure(NRF_RADIO, &packet_config);
    753e:	f7ff ffbb 	bl	74b8 <nrf_radio_packet_configure.constprop.0>
}
    7542:	b004      	add	sp, #16
    7544:	bd10      	pop	{r4, pc}
    7546:	bf00      	nop
    7548:	00010100 	.word	0x00010100
    754c:	20000070 	.word	0x20000070

00007550 <update_rf_payload_format_esb_dpl>:
{
    7550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	nrf_radio_packet_conf_t packet_config = { 0 };
    7552:	2300      	movs	r3, #0
    7554:	f8cd 3009 	str.w	r3, [sp, #9]
    7558:	f8cd 3001 	str.w	r3, [sp, #1]
    755c:	f8cd 3005 	str.w	r3, [sp, #5]
	packet_config.s1len = 3;
    7560:	2303      	movs	r3, #3
    7562:	f88d 3002 	strb.w	r3, [sp, #2]
	packet_config.lflen = (CONFIG_ESB_MAX_PAYLOAD_LENGTH <= 32) ? 6 : 8;
    7566:	2306      	movs	r3, #6
    7568:	f88d 3000 	strb.w	r3, [sp]
	packet_config.big_endian = true;
    756c:	2301      	movs	r3, #1
    756e:	f88d 300b 	strb.w	r3, [sp, #11]
	packet_config.balen = (esb_addr.addr_length - 1);
    7572:	4b07      	ldr	r3, [pc, #28]	; (7590 <update_rf_payload_format_esb_dpl+0x40>)
    7574:	7c5b      	ldrb	r3, [r3, #17]
    7576:	3b01      	subs	r3, #1
    7578:	f88d 300a 	strb.w	r3, [sp, #10]
	nrf_radio_packet_configure(NRF_RADIO, &packet_config);
    757c:	4668      	mov	r0, sp
	packet_config.maxlen = CONFIG_ESB_MAX_PAYLOAD_LENGTH;
    757e:	2320      	movs	r3, #32
    7580:	f88d 3008 	strb.w	r3, [sp, #8]
	nrf_radio_packet_configure(NRF_RADIO, &packet_config);
    7584:	f7ff ff98 	bl	74b8 <nrf_radio_packet_configure.constprop.0>
}
    7588:	b005      	add	sp, #20
    758a:	f85d fb04 	ldr.w	pc, [sp], #4
    758e:	bf00      	nop
    7590:	20000070 	.word	0x20000070

00007594 <RADIO_IRQHandler>:
	ISR_DIRECT_PM();
}

#else /* !IS_ENABLED(CONFIG_ESB_DYNAMIC_INTERRUPTS) */

ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    7594:	4668      	mov	r0, sp
    7596:	f020 0107 	bic.w	r1, r0, #7
    759a:	468d      	mov	sp, r1
    759c:	b501      	push	{r0, lr}
    return p_reg->INTENSET & mask;
    759e:	4b0c      	ldr	r3, [pc, #48]	; (75d0 <RADIO_IRQHandler+0x3c>)
    75a0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_radio_int_enable_check(NRF_RADIO, NRF_RADIO_INT_DISABLED_MASK) &&
    75a4:	06d2      	lsls	r2, r2, #27
    75a6:	d50b      	bpl.n	75c0 <RADIO_IRQHandler+0x2c>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    75a8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    75ac:	b142      	cbz	r2, 75c0 <RADIO_IRQHandler+0x2c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    75ae:	2200      	movs	r2, #0
    75b0:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    75b4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
		if (on_radio_disabled) {
    75b8:	4b06      	ldr	r3, [pc, #24]	; (75d4 <RADIO_IRQHandler+0x40>)
    75ba:	681b      	ldr	r3, [r3, #0]
    75bc:	b103      	cbz	r3, 75c0 <RADIO_IRQHandler+0x2c>
			on_radio_disabled();
    75be:	4798      	blx	r3
{
	radio_irq_handler();

	ISR_DIRECT_PM();
    75c0:	f7fd f9d2 	bl	4968 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
    75c4:	f7fd fab4 	bl	4b30 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    75c8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    75cc:	4685      	mov	sp, r0
    75ce:	4770      	bx	lr
    75d0:	40001000 	.word	0x40001000
    75d4:	20001794 	.word	0x20001794

000075d8 <start_tx_transaction>:
{
    75d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	last_tx_attempts = 1;
    75da:	4b58      	ldr	r3, [pc, #352]	; (773c <start_tx_transaction+0x164>)
	switch (esb_cfg.protocol) {
    75dc:	4f58      	ldr	r7, [pc, #352]	; (7740 <start_tx_transaction+0x168>)
	current_payload = tx_fifo.payload[tx_fifo.front];
    75de:	4d59      	ldr	r5, [pc, #356]	; (7744 <start_tx_transaction+0x16c>)
	switch (esb_cfg.protocol) {
    75e0:	783c      	ldrb	r4, [r7, #0]
    75e2:	4e59      	ldr	r6, [pc, #356]	; (7748 <start_tx_transaction+0x170>)
	last_tx_attempts = 1;
    75e4:	2201      	movs	r2, #1
    75e6:	601a      	str	r2, [r3, #0]
	current_payload = tx_fifo.payload[tx_fifo.front];
    75e8:	4b58      	ldr	r3, [pc, #352]	; (774c <start_tx_transaction+0x174>)
    75ea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    75ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    75f0:	602b      	str	r3, [r5, #0]
	switch (esb_cfg.protocol) {
    75f2:	2c00      	cmp	r4, #0
    75f4:	d037      	beq.n	7666 <start_tx_transaction+0x8e>
    75f6:	2c01      	cmp	r4, #1
    75f8:	d05d      	beq.n	76b6 <start_tx_transaction+0xde>
		ack = !current_payload->noack || !esb_cfg.selective_auto_ack;
    75fa:	2401      	movs	r4, #1
	nrf_radio_txaddress_set(NRF_RADIO, current_payload->pipe);
    75fc:	682b      	ldr	r3, [r5, #0]
    p_reg->TXADDRESS = ((uint32_t)txaddress) << RADIO_TXADDRESS_TXADDRESS_Pos;
    75fe:	4d54      	ldr	r5, [pc, #336]	; (7750 <start_tx_transaction+0x178>)
    7600:	785a      	ldrb	r2, [r3, #1]
    7602:	f8c5 252c 	str.w	r2, [r5, #1324]	; 0x52c
	nrf_radio_rxaddresses_set(NRF_RADIO, BIT(current_payload->pipe));
    7606:	785b      	ldrb	r3, [r3, #1]
    7608:	2701      	movs	r7, #1
    760a:	fa07 f303 	lsl.w	r3, r7, r3
    760e:	b2db      	uxtb	r3, r3
    p_reg->RXADDRESSES = (uint32_t)(rxaddresses);
    7610:	f8c5 3530 	str.w	r3, [r5, #1328]	; 0x530
        delta = ((uint32_t)(radio_frequency - 2400)) |
    7614:	4b4f      	ldr	r3, [pc, #316]	; (7754 <start_tx_transaction+0x17c>)
    7616:	7cdb      	ldrb	r3, [r3, #19]
    p_reg->FREQUENCY = delta;
    7618:	f8c5 3508 	str.w	r3, [r5, #1288]	; 0x508
	update_radio_tx_power();
    761c:	f7ff feb0 	bl	7380 <update_radio_tx_power>
    7620:	4b4d      	ldr	r3, [pc, #308]	; (7758 <start_tx_transaction+0x180>)
    p_reg->PACKETPTR = (uint32_t)p_packet;
    7622:	f8c5 6504 	str.w	r6, [r5, #1284]	; 0x504
    7626:	2202      	movs	r2, #2
    7628:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
    762c:	4638      	mov	r0, r7
    762e:	f7fd f951 	bl	48d4 <arch_irq_enable>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7632:	2000      	movs	r0, #0
    7634:	f8c5 0104 	str.w	r0, [r5, #260]	; 0x104
    7638:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    763c:	f8c5 0108 	str.w	r0, [r5, #264]	; 0x108
    7640:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
    7644:	f8c5 0110 	str.w	r0, [r5, #272]	; 0x110
    7648:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    764c:	f8c5 010c 	str.w	r0, [r5, #268]	; 0x10c
		esb_ppi_for_txrx_set(false, ack);
    7650:	4621      	mov	r1, r4
    7652:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    7656:	f000 fd8d 	bl	8174 <esb_ppi_for_txrx_set>
		esb_fem_for_tx_set(ack);
    765a:	4620      	mov	r0, r4
    765c:	f7ff fe5e 	bl	731c <esb_fem_for_tx_set>
}

NRF_STATIC_INLINE void nrf_egu_task_trigger(NRF_EGU_Type * p_reg, nrf_egu_task_t egu_task)
{
    NRFX_ASSERT(p_reg);
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_task)) = 0x1UL;
    7660:	4b3e      	ldr	r3, [pc, #248]	; (775c <start_tx_transaction+0x184>)
    7662:	619f      	str	r7, [r3, #24]
}
    7664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memset(&pdu->type.fixed_pdu, 0, sizeof(pdu->type.fixed_pdu));
    7666:	4621      	mov	r1, r4
    7668:	2202      	movs	r2, #2
    766a:	4630      	mov	r0, r6
    766c:	f005 fa59 	bl	cb22 <memset>
		update_rf_payload_format(current_payload->length);
    7670:	682a      	ldr	r2, [r5, #0]
    7672:	4b3b      	ldr	r3, [pc, #236]	; (7760 <start_tx_transaction+0x188>)
    7674:	7810      	ldrb	r0, [r2, #0]
    7676:	681b      	ldr	r3, [r3, #0]
    7678:	4798      	blx	r3
		pdu->type.fixed_pdu.pid = current_payload->pid;
    767a:	6829      	ldr	r1, [r5, #0]
    767c:	7833      	ldrb	r3, [r6, #0]
    767e:	790a      	ldrb	r2, [r1, #4]
    7680:	4630      	mov	r0, r6
    7682:	f362 0301 	bfi	r3, r2, #0, #2
    7686:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(pdu->data, current_payload->data, current_payload->length);
    768a:	f811 2b05 	ldrb.w	r2, [r1], #5
    768e:	f005 fa3d 	bl	cb0c <memcpy>
    p_reg->SHORTS = shorts_mask;
    7692:	4b2f      	ldr	r3, [pc, #188]	; (7750 <start_tx_transaction+0x178>)
    7694:	f240 121b 	movw	r2, #283	; 0x11b
    7698:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->INTENSET = mask;
    769c:	2210      	movs	r2, #16
    769e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		retransmits_remaining = esb_cfg.retransmit_count;
    76a2:	4b30      	ldr	r3, [pc, #192]	; (7764 <start_tx_transaction+0x18c>)
    76a4:	89fa      	ldrh	r2, [r7, #14]
    76a6:	601a      	str	r2, [r3, #0]
		on_radio_disabled = on_radio_disabled_tx;
    76a8:	4b2f      	ldr	r3, [pc, #188]	; (7768 <start_tx_transaction+0x190>)
    76aa:	4a30      	ldr	r2, [pc, #192]	; (776c <start_tx_transaction+0x194>)
    76ac:	601a      	str	r2, [r3, #0]
		esb_state = ESB_STATE_PTX_TX_ACK;
    76ae:	4b30      	ldr	r3, [pc, #192]	; (7770 <start_tx_transaction+0x198>)
    76b0:	2202      	movs	r2, #2
    76b2:	701a      	strb	r2, [r3, #0]
		break;
    76b4:	e7a1      	b.n	75fa <start_tx_transaction+0x22>
		memset(&pdu->type.dpl_pdu, 0, sizeof(pdu->type.dpl_pdu));
    76b6:	2202      	movs	r2, #2
    76b8:	2100      	movs	r1, #0
    76ba:	4630      	mov	r0, r6
    76bc:	f005 fa31 	bl	cb22 <memset>
		ack = !current_payload->noack || !esb_cfg.selective_auto_ack;
    76c0:	6829      	ldr	r1, [r5, #0]
    76c2:	78ca      	ldrb	r2, [r1, #3]
    76c4:	b112      	cbz	r2, 76cc <start_tx_transaction+0xf4>
    76c6:	7cbc      	ldrb	r4, [r7, #18]
    76c8:	f084 0401 	eor.w	r4, r4, #1
		pdu->type.dpl_pdu.pid = current_payload->pid;
    76cc:	790b      	ldrb	r3, [r1, #4]
		pdu->type.dpl_pdu.length = current_payload->length;
    76ce:	f891 c000 	ldrb.w	ip, [r1]
    76d2:	7830      	ldrb	r0, [r6, #0]
		pdu->type.dpl_pdu.no_ack = current_payload->noack ? 0x00 : 0x01;
    76d4:	005b      	lsls	r3, r3, #1
    76d6:	f003 0306 	and.w	r3, r3, #6
    76da:	2a00      	cmp	r2, #0
    76dc:	bf08      	it	eq
    76de:	f043 0301 	orreq.w	r3, r3, #1
    76e2:	7872      	ldrb	r2, [r6, #1]
    76e4:	f022 0207 	bic.w	r2, r2, #7
    76e8:	4313      	orrs	r3, r2
		pdu->type.dpl_pdu.length = current_payload->length;
    76ea:	f36c 0005 	bfi	r0, ip, #0, #6
    76ee:	7030      	strb	r0, [r6, #0]
		pdu->type.dpl_pdu.no_ack = current_payload->noack ? 0x00 : 0x01;
    76f0:	7073      	strb	r3, [r6, #1]
		memcpy(pdu->data, current_payload->data, current_payload->length);
    76f2:	f811 2b05 	ldrb.w	r2, [r1], #5
    76f6:	481f      	ldr	r0, [pc, #124]	; (7774 <start_tx_transaction+0x19c>)
    76f8:	f005 fa08 	bl	cb0c <memcpy>
		if (ack) {
    76fc:	4b14      	ldr	r3, [pc, #80]	; (7750 <start_tx_transaction+0x178>)
    76fe:	491a      	ldr	r1, [pc, #104]	; (7768 <start_tx_transaction+0x190>)
    7700:	4a1b      	ldr	r2, [pc, #108]	; (7770 <start_tx_transaction+0x198>)
    7702:	b174      	cbz	r4, 7722 <start_tx_transaction+0x14a>
    p_reg->SHORTS = shorts_mask;
    7704:	f240 101b 	movw	r0, #283	; 0x11b
    7708:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
			retransmits_remaining = esb_cfg.retransmit_count;
    770c:	4815      	ldr	r0, [pc, #84]	; (7764 <start_tx_transaction+0x18c>)
    770e:	89fc      	ldrh	r4, [r7, #14]
    7710:	6004      	str	r4, [r0, #0]
			on_radio_disabled = on_radio_disabled_tx;
    7712:	4816      	ldr	r0, [pc, #88]	; (776c <start_tx_transaction+0x194>)
    7714:	6008      	str	r0, [r1, #0]
			esb_state = ESB_STATE_PTX_TX_ACK;
    7716:	2102      	movs	r1, #2
    7718:	7011      	strb	r1, [r2, #0]
    p_reg->INTENSET = mask;
    771a:	2210      	movs	r2, #16
    771c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    7720:	e76b      	b.n	75fa <start_tx_transaction+0x22>
    p_reg->SHORTS = shorts_mask;
    7722:	f240 1013 	movw	r0, #275	; 0x113
    7726:	f8c3 0200 	str.w	r0, [r3, #512]	; 0x200
			on_radio_disabled = on_radio_disabled_tx_noack;
    772a:	4813      	ldr	r0, [pc, #76]	; (7778 <start_tx_transaction+0x1a0>)
    772c:	6008      	str	r0, [r1, #0]
			esb_state = ESB_STATE_PTX_TX;
    772e:	2101      	movs	r1, #1
    7730:	7011      	strb	r1, [r2, #0]
    p_reg->INTENSET = mask;
    7732:	2210      	movs	r2, #16
    7734:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    7738:	e760      	b.n	75fc <start_tx_transaction+0x24>
    773a:	bf00      	nop
    773c:	2000179c 	.word	0x2000179c
    7740:	20001888 	.word	0x20001888
    7744:	20001880 	.word	0x20001880
    7748:	20001ed5 	.word	0x20001ed5
    774c:	20001854 	.word	0x20001854
    7750:	40001000 	.word	0x40001000
    7754:	20000070 	.word	0x20000070
    7758:	e000e100 	.word	0xe000e100
    775c:	40014000 	.word	0x40014000
    7760:	20001790 	.word	0x20001790
    7764:	200017a0 	.word	0x200017a0
    7768:	20001794 	.word	0x20001794
    776c:	000078a1 	.word	0x000078a1
    7770:	20001ef7 	.word	0x20001ef7
    7774:	20001ed7 	.word	0x20001ed7
    7778:	00007801 	.word	0x00007801

0000777c <SWI0_EGU0_IRQHandler>:

	return 1;
}


ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    777c:	4668      	mov	r0, sp
    777e:	f020 0107 	bic.w	r1, r0, #7
    7782:	468d      	mov	sp, r1
    7784:	b531      	push	{r0, r4, r5, lr}
	event.tx_attempts = last_tx_attempts;
    7786:	4b1b      	ldr	r3, [pc, #108]	; (77f4 <SWI0_EGU0_IRQHandler+0x78>)
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    7788:	b082      	sub	sp, #8
	event.tx_attempts = last_tx_attempts;
    778a:	681b      	ldr	r3, [r3, #0]
    778c:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
    778e:	f04f 0340 	mov.w	r3, #64	; 0x40
    7792:	f3ef 8111 	mrs	r1, BASEPRI
    7796:	f383 8812 	msr	BASEPRI_MAX, r3
    779a:	f3bf 8f6f 	isb	sy
	*interrupts = interrupt_flags;
    779e:	4b16      	ldr	r3, [pc, #88]	; (77f8 <SWI0_EGU0_IRQHandler+0x7c>)
	interrupt_flags = 0;
    77a0:	2200      	movs	r2, #0
	*interrupts = interrupt_flags;
    77a2:	681d      	ldr	r5, [r3, #0]
	interrupt_flags = 0;
    77a4:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    77a6:	f381 8811 	msr	BASEPRI, r1
    77aa:	f3bf 8f6f 	isb	sy
	if (event_handler != NULL) {
    77ae:	4c13      	ldr	r4, [pc, #76]	; (77fc <SWI0_EGU0_IRQHandler+0x80>)
    77b0:	6823      	ldr	r3, [r4, #0]
    77b2:	b1ab      	cbz	r3, 77e0 <SWI0_EGU0_IRQHandler+0x64>
		if (interrupts & INT_TX_SUCCESS_MSK) {
    77b4:	07e9      	lsls	r1, r5, #31
    77b6:	d503      	bpl.n	77c0 <SWI0_EGU0_IRQHandler+0x44>
			event.evt_id = ESB_EVENT_TX_SUCCESS;
    77b8:	f88d 2000 	strb.w	r2, [sp]
			event_handler(&event);
    77bc:	4668      	mov	r0, sp
    77be:	4798      	blx	r3
		if (interrupts & INT_TX_FAILED_MSK) {
    77c0:	07aa      	lsls	r2, r5, #30
    77c2:	d505      	bpl.n	77d0 <SWI0_EGU0_IRQHandler+0x54>
			event.evt_id = ESB_EVENT_TX_FAILED;
    77c4:	2301      	movs	r3, #1
    77c6:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    77ca:	4668      	mov	r0, sp
    77cc:	6823      	ldr	r3, [r4, #0]
    77ce:	4798      	blx	r3
		if (interrupts & INT_RX_DATA_RECEIVED_MSK) {
    77d0:	076b      	lsls	r3, r5, #29
    77d2:	d505      	bpl.n	77e0 <SWI0_EGU0_IRQHandler+0x64>
			event.evt_id = ESB_EVENT_RX_RECEIVED;
    77d4:	2302      	movs	r3, #2
    77d6:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    77da:	4668      	mov	r0, sp
    77dc:	6823      	ldr	r3, [r4, #0]
    77de:	4798      	blx	r3
{
	esb_evt_irq_handler();

	ISR_DIRECT_PM();
    77e0:	f7fd f8c2 	bl	4968 <_arch_isr_direct_pm>
    77e4:	f7fd f9a4 	bl	4b30 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    77e8:	b002      	add	sp, #8
    77ea:	e8bd 4031 	ldmia.w	sp!, {r0, r4, r5, lr}
    77ee:	4685      	mov	sp, r0
    77f0:	4770      	bx	lr
    77f2:	bf00      	nop
    77f4:	2000179c 	.word	0x2000179c
    77f8:	200017a4 	.word	0x200017a4
    77fc:	20001884 	.word	0x20001884

00007800 <on_radio_disabled_tx_noack>:
{
    7800:	b510      	push	{r4, lr}
	mpsl_fem_pa_configuration_clear();
    7802:	f7f8 fd67 	bl	2d4 <mpsl_fem_pa_configuration_clear>
	nrf_timer_task_trigger(esb_timer.p_reg, NRF_TIMER_TASK_SHUTDOWN);
    7806:	4b15      	ldr	r3, [pc, #84]	; (785c <on_radio_disabled_tx_noack+0x5c>)
	if (tx_fifo.count == 0) {
    7808:	4c15      	ldr	r4, [pc, #84]	; (7860 <on_radio_disabled_tx_noack+0x60>)
	nrf_timer_task_trigger(esb_timer.p_reg, NRF_TIMER_TASK_SHUTDOWN);
    780a:	681b      	ldr	r3, [r3, #0]
    780c:	2201      	movs	r2, #1
    780e:	611a      	str	r2, [r3, #16]
	esb_ppi_for_fem_clear();
    7810:	f000 fc9a 	bl	8148 <esb_ppi_for_fem_clear>
	mpsl_fem_disable();
    7814:	f7f8 fd4c 	bl	2b0 <mpsl_fem_disable>
	esb_ppi_for_txrx_clear(false, false);
    7818:	2100      	movs	r1, #0
    781a:	4608      	mov	r0, r1
    781c:	f000 fd16 	bl	824c <esb_ppi_for_txrx_clear>
	interrupt_flags |= INT_TX_SUCCESS_MSK;
    7820:	4a10      	ldr	r2, [pc, #64]	; (7864 <on_radio_disabled_tx_noack+0x64>)
    7822:	4811      	ldr	r0, [pc, #68]	; (7868 <on_radio_disabled_tx_noack+0x68>)
    7824:	6813      	ldr	r3, [r2, #0]
    7826:	f043 0301 	orr.w	r3, r3, #1
    782a:	6013      	str	r3, [r2, #0]
	if (tx_fifo.count == 0) {
    782c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    782e:	b93b      	cbnz	r3, 7840 <on_radio_disabled_tx_noack+0x40>
		esb_state = ESB_STATE_IDLE;
    7830:	4b0e      	ldr	r3, [pc, #56]	; (786c <on_radio_disabled_tx_noack+0x6c>)
    7832:	2200      	movs	r2, #0
    7834:	701a      	strb	r2, [r3, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7836:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    783a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
}
    783e:	bd10      	pop	{r4, pc}
    7840:	f7ff fdce 	bl	73e0 <tx_fifo_remove_last.part.0>
	if (tx_fifo.count == 0) {
    7844:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7846:	2b00      	cmp	r3, #0
    7848:	d0f2      	beq.n	7830 <on_radio_disabled_tx_noack+0x30>
    784a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    784e:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
}
    7852:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		start_tx_transaction();
    7856:	f7ff bebf 	b.w	75d8 <start_tx_transaction>
    785a:	bf00      	nop
    785c:	20000084 	.word	0x20000084
    7860:	20001854 	.word	0x20001854
    7864:	200017a4 	.word	0x200017a4
    7868:	e000e100 	.word	0xe000e100
    786c:	20001ef7 	.word	0x20001ef7

00007870 <esb_fem_for_rx_ack>:
{
    7870:	b508      	push	{r3, lr}
	mpsl_fem_pa_configuration_clear();
    7872:	f7f8 fd2f 	bl	2d4 <mpsl_fem_pa_configuration_clear>
	mpsl_fem_lna_configuration_set(&rx_event, &disable_event);
    7876:	4907      	ldr	r1, [pc, #28]	; (7894 <esb_fem_for_rx_ack+0x24>)
    7878:	4807      	ldr	r0, [pc, #28]	; (7898 <esb_fem_for_rx_ack+0x28>)
    787a:	f7f8 fd25 	bl	2c8 <mpsl_fem_lna_configuration_set>
	nrf_timer_shorts_disable(esb_timer.p_reg,
    787e:	4b07      	ldr	r3, [pc, #28]	; (789c <esb_fem_for_rx_ack+0x2c>)
    7880:	681a      	ldr	r2, [r3, #0]
    p_reg->SHORTS &= ~(mask);
    7882:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    7886:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    788a:	f023 0304 	bic.w	r3, r3, #4
    788e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    7892:	bd08      	pop	{r3, pc}
    7894:	20000040 	.word	0x20000040
    7898:	0000de80 	.word	0x0000de80
    789c:	20000084 	.word	0x20000084

000078a0 <on_radio_disabled_tx>:
{
    78a0:	b570      	push	{r4, r5, r6, lr}
	esb_ppi_for_txrx_clear(false, true);
    78a2:	2101      	movs	r1, #1
    78a4:	2000      	movs	r0, #0
    p_reg->SHORTS = shorts_mask;
    78a6:	4c23      	ldr	r4, [pc, #140]	; (7934 <on_radio_disabled_tx+0x94>)
	uint16_t ramp_up = esb_cfg.use_fast_ramp_up ? TX_FAST_RAMP_UP_TIME_US : TX_RAMP_UP_TIME_US;
    78a8:	4d23      	ldr	r5, [pc, #140]	; (7938 <on_radio_disabled_tx+0x98>)
	nrfx_timer_compare(&esb_timer, NRF_TIMER_CC_CHANNEL1,
    78aa:	4e24      	ldr	r6, [pc, #144]	; (793c <on_radio_disabled_tx+0x9c>)
	esb_ppi_for_txrx_clear(false, true);
    78ac:	f000 fcce 	bl	824c <esb_ppi_for_txrx_clear>
	esb_ppi_for_fem_clear();
    78b0:	f000 fc4a 	bl	8148 <esb_ppi_for_fem_clear>
	esb_fem_for_rx_ack();
    78b4:	f7ff ffdc 	bl	7870 <esb_fem_for_rx_ack>
    78b8:	f240 1313 	movw	r3, #275	; 0x113
    78bc:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
	nrfx_timer_compare(&esb_timer, NRF_TIMER_CC_CHANNEL0,
    78c0:	4b1f      	ldr	r3, [pc, #124]	; (7940 <on_radio_disabled_tx+0xa0>)
    78c2:	481e      	ldr	r0, [pc, #120]	; (793c <on_radio_disabled_tx+0x9c>)
    78c4:	681a      	ldr	r2, [r3, #0]
    78c6:	2300      	movs	r3, #0
    78c8:	320d      	adds	r2, #13
    78ca:	4619      	mov	r1, r3
    78cc:	f005 fc33 	bl	d136 <nrfx_timer_compare>
	uint16_t ramp_up = esb_cfg.use_fast_ramp_up ? TX_FAST_RAMP_UP_TIME_US : TX_RAMP_UP_TIME_US;
    78d0:	7ceb      	ldrb	r3, [r5, #19]
			   (esb_cfg.retransmit_delay - ramp_up), false);
    78d2:	89a9      	ldrh	r1, [r5, #12]
	uint16_t ramp_up = esb_cfg.use_fast_ramp_up ? TX_FAST_RAMP_UP_TIME_US : TX_RAMP_UP_TIME_US;
    78d4:	2b00      	cmp	r3, #0
    78d6:	bf0c      	ite	eq
    78d8:	2281      	moveq	r2, #129	; 0x81
    78da:	2228      	movne	r2, #40	; 0x28
	nrfx_timer_compare(&esb_timer, NRF_TIMER_CC_CHANNEL1,
    78dc:	4630      	mov	r0, r6
    78de:	1a8a      	subs	r2, r1, r2
    78e0:	2300      	movs	r3, #0
    78e2:	2101      	movs	r1, #1
    78e4:	f005 fc27 	bl	d136 <nrfx_timer_compare>
	nrf_timer_shorts_set(esb_timer.p_reg,
    78e8:	6833      	ldr	r3, [r6, #0]
    p_reg->SHORTS = mask;
    78ea:	f240 2202 	movw	r2, #514	; 0x202
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    78ee:	2600      	movs	r6, #0
    p_reg->SHORTS = mask;
    78f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    78f4:	f8c3 6140 	str.w	r6, [r3, #320]	; 0x140
    78f8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
    78fc:	f8c3 6144 	str.w	r6, [r3, #324]	; 0x144
    7900:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
	esb_ppi_for_wait_for_ack_set();
    7904:	f000 fd60 	bl	83c8 <esb_ppi_for_wait_for_ack_set>
	esb_ppi_for_retransmission_clear();
    7908:	f000 fd38 	bl	837c <esb_ppi_for_retransmission_clear>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    790c:	f8c4 610c 	str.w	r6, [r4, #268]	; 0x10c
	if (esb_cfg.protocol == ESB_PROTOCOL_ESB) {
    7910:	7828      	ldrb	r0, [r5, #0]
    7912:	f8d4 310c 	ldr.w	r3, [r4, #268]	; 0x10c
    7916:	b910      	cbnz	r0, 791e <on_radio_disabled_tx+0x7e>
		update_rf_payload_format(0);
    7918:	4b0a      	ldr	r3, [pc, #40]	; (7944 <on_radio_disabled_tx+0xa4>)
    791a:	681b      	ldr	r3, [r3, #0]
    791c:	4798      	blx	r3
    p_reg->PACKETPTR = (uint32_t)p_packet;
    791e:	4b0a      	ldr	r3, [pc, #40]	; (7948 <on_radio_disabled_tx+0xa8>)
    7920:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
	on_radio_disabled = on_radio_disabled_tx_wait_for_ack;
    7924:	4b09      	ldr	r3, [pc, #36]	; (794c <on_radio_disabled_tx+0xac>)
    7926:	4a0a      	ldr	r2, [pc, #40]	; (7950 <on_radio_disabled_tx+0xb0>)
    7928:	601a      	str	r2, [r3, #0]
	esb_state = ESB_STATE_PTX_RX_ACK;
    792a:	4b0a      	ldr	r3, [pc, #40]	; (7954 <on_radio_disabled_tx+0xb4>)
    792c:	2203      	movs	r2, #3
    792e:	701a      	strb	r2, [r3, #0]
}
    7930:	bd70      	pop	{r4, r5, r6, pc}
    7932:	bf00      	nop
    7934:	40001000 	.word	0x40001000
    7938:	20001888 	.word	0x20001888
    793c:	20000084 	.word	0x20000084
    7940:	20001798 	.word	0x20001798
    7944:	20001790 	.word	0x20001790
    7948:	20001eb3 	.word	0x20001eb3
    794c:	20001794 	.word	0x20001794
    7950:	000079bd 	.word	0x000079bd
    7954:	20001ef7 	.word	0x20001ef7

00007958 <esb_fem_for_tx_retry>:
{
    7958:	b538      	push	{r3, r4, r5, lr}
		nrf_timer_cc_get(esb_timer.p_reg, NRF_TIMER_CC_CHANNEL1) + TX_RAMP_UP_TIME_US;
    795a:	4c0a      	ldr	r4, [pc, #40]	; (7984 <esb_fem_for_tx_retry+0x2c>)
	tx_time_shifted.event.timer.counter_period.end =
    795c:	4d0a      	ldr	r5, [pc, #40]	; (7988 <esb_fem_for_tx_retry+0x30>)
		nrf_timer_cc_get(esb_timer.p_reg, NRF_TIMER_CC_CHANNEL1) + TX_RAMP_UP_TIME_US;
    795e:	6823      	ldr	r3, [r4, #0]

NRF_STATIC_INLINE uint32_t nrf_timer_cc_get(NRF_TIMER_Type const * p_reg,
                                            nrf_timer_cc_channel_t cc_channel)
{
    return (uint32_t)p_reg->CC[cc_channel];
    7960:	f8d3 3544 	ldr.w	r3, [r3, #1348]	; 0x544
    7964:	3381      	adds	r3, #129	; 0x81
	tx_time_shifted.event.timer.counter_period.end =
    7966:	60eb      	str	r3, [r5, #12]
	esb_ppi_for_fem_set();
    7968:	f000 fbd2 	bl	8110 <esb_ppi_for_fem_set>
	if (mpsl_fem_pa_configuration_set(&tx_time_shifted, &disable_event) == 0) {
    796c:	4907      	ldr	r1, [pc, #28]	; (798c <esb_fem_for_tx_retry+0x34>)
    796e:	4628      	mov	r0, r5
    7970:	f7f8 fcb6 	bl	2e0 <mpsl_fem_pa_configuration_set>
    7974:	b920      	cbnz	r0, 7980 <esb_fem_for_tx_retry+0x28>
		nrf_timer_shorts_set(esb_timer.p_reg,
    7976:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS = mask;
    7978:	f240 4204 	movw	r2, #1028	; 0x404
    797c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
    7980:	bd38      	pop	{r3, r4, r5, pc}
    7982:	bf00      	nop
    7984:	20000084 	.word	0x20000084
    7988:	20000058 	.word	0x20000058
    798c:	20000040 	.word	0x20000040

00007990 <esb_fem_for_tx_retry_clear>:
{
    7990:	b508      	push	{r3, lr}
	esb_ppi_for_fem_clear();
    7992:	f000 fbd9 	bl	8148 <esb_ppi_for_fem_clear>
	mpsl_fem_pa_configuration_clear();
    7996:	f7f8 fc9d 	bl	2d4 <mpsl_fem_pa_configuration_clear>
	mpsl_fem_deactivate_now(MPSL_FEM_ALL);
    799a:	2003      	movs	r0, #3
    799c:	f7f8 fc82 	bl	2a4 <mpsl_fem_deactivate_now>
	nrf_timer_shorts_disable(esb_timer.p_reg,
    79a0:	4b05      	ldr	r3, [pc, #20]	; (79b8 <esb_fem_for_tx_retry_clear+0x28>)
    79a2:	681a      	ldr	r2, [r3, #0]
    p_reg->SHORTS &= ~(mask);
    79a4:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    79a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    79ac:	f023 0304 	bic.w	r3, r3, #4
    79b0:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
}
    79b4:	bd08      	pop	{r3, pc}
    79b6:	bf00      	nop
    79b8:	20000084 	.word	0x20000084

000079bc <on_radio_disabled_tx_wait_for_ack>:
{
    79bc:	b570      	push	{r4, r5, r6, lr}
	esb_ppi_for_wait_for_ack_clear();
    79be:	f000 fd35 	bl	842c <esb_ppi_for_wait_for_ack_clear>
	mpsl_fem_lna_configuration_clear();
    79c2:	f7f8 fc7b 	bl	2bc <mpsl_fem_lna_configuration_clear>
	mpsl_fem_disable();
    79c6:	f7f8 fc73 	bl	2b0 <mpsl_fem_disable>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    79ca:	4b4e      	ldr	r3, [pc, #312]	; (7b04 <on_radio_disabled_tx_wait_for_ack+0x148>)
    79cc:	4a4e      	ldr	r2, [pc, #312]	; (7b08 <on_radio_disabled_tx_wait_for_ack+0x14c>)
    79ce:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
	if (nrf_radio_event_check(NRF_RADIO, NRF_RADIO_EVENT_END) &&
    79d2:	2900      	cmp	r1, #0
    79d4:	d043      	beq.n	7a5e <on_radio_disabled_tx_wait_for_ack+0xa2>
    return ((p_reg->CRCSTATUS & RADIO_CRCSTATUS_CRCSTATUS_Msk) >> RADIO_CRCSTATUS_CRCSTATUS_Pos)
    79d6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    79da:	07d9      	lsls	r1, r3, #31
    79dc:	d53f      	bpl.n	7a5e <on_radio_disabled_tx_wait_for_ack+0xa2>
		interrupt_flags |= INT_TX_SUCCESS_MSK;
    79de:	4c4b      	ldr	r4, [pc, #300]	; (7b0c <on_radio_disabled_tx_wait_for_ack+0x150>)
		last_tx_attempts = esb_cfg.retransmit_count - retransmits_remaining + 1;
    79e0:	4d4b      	ldr	r5, [pc, #300]	; (7b10 <on_radio_disabled_tx_wait_for_ack+0x154>)
		interrupt_flags |= INT_TX_SUCCESS_MSK;
    79e2:	6823      	ldr	r3, [r4, #0]
	if (tx_fifo.count == 0) {
    79e4:	4e4b      	ldr	r6, [pc, #300]	; (7b14 <on_radio_disabled_tx_wait_for_ack+0x158>)
		interrupt_flags |= INT_TX_SUCCESS_MSK;
    79e6:	f043 0301 	orr.w	r3, r3, #1
    79ea:	6023      	str	r3, [r4, #0]
		last_tx_attempts = esb_cfg.retransmit_count - retransmits_remaining + 1;
    79ec:	6812      	ldr	r2, [r2, #0]
    79ee:	89eb      	ldrh	r3, [r5, #14]
    79f0:	1a9b      	subs	r3, r3, r2
    79f2:	4a49      	ldr	r2, [pc, #292]	; (7b18 <on_radio_disabled_tx_wait_for_ack+0x15c>)
    79f4:	3301      	adds	r3, #1
    79f6:	6013      	str	r3, [r2, #0]
	if (tx_fifo.count == 0) {
    79f8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    79fa:	b10b      	cbz	r3, 7a00 <on_radio_disabled_tx_wait_for_ack+0x44>
    79fc:	f7ff fcf0 	bl	73e0 <tx_fifo_remove_last.part.0>
		if ((esb_cfg.protocol != ESB_PROTOCOL_ESB) && (rx_pdu->type.dpl_pdu.length > 0)) {
    7a00:	782b      	ldrb	r3, [r5, #0]
    7a02:	b1b3      	cbz	r3, 7a32 <on_radio_disabled_tx_wait_for_ack+0x76>
    7a04:	4b45      	ldr	r3, [pc, #276]	; (7b1c <on_radio_disabled_tx_wait_for_ack+0x160>)
    7a06:	781a      	ldrb	r2, [r3, #0]
    7a08:	0692      	lsls	r2, r2, #26
    7a0a:	d012      	beq.n	7a32 <on_radio_disabled_tx_wait_for_ack+0x76>
				nrf_radio_txaddress_get(NRF_RADIO), rx_pdu->type.dpl_pdu.pid)) {
    7a0c:	7859      	ldrb	r1, [r3, #1]
	if (rx_fifo.count >= CONFIG_ESB_RX_FIFO_SIZE) {
    7a0e:	4b44      	ldr	r3, [pc, #272]	; (7b20 <on_radio_disabled_tx_wait_for_ack+0x164>)
    return (uint8_t)((p_reg->TXADDRESS & RADIO_TXADDRESS_TXADDRESS_Msk) >>
    7a10:	4a3c      	ldr	r2, [pc, #240]	; (7b04 <on_radio_disabled_tx_wait_for_ack+0x148>)
    7a12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    7a14:	f8d2 052c 	ldr.w	r0, [r2, #1324]	; 0x52c
    7a18:	2b07      	cmp	r3, #7
				nrf_radio_txaddress_get(NRF_RADIO), rx_pdu->type.dpl_pdu.pid)) {
    7a1a:	f3c1 0141 	ubfx	r1, r1, #1, #2
	if (rx_fifo.count >= CONFIG_ESB_RX_FIFO_SIZE) {
    7a1e:	d808      	bhi.n	7a32 <on_radio_disabled_tx_wait_for_ack+0x76>
    7a20:	f000 0007 	and.w	r0, r0, #7
    7a24:	f7ff fcf6 	bl	7414 <rx_fifo_push_rfbuf.part.0>
			if (rx_fifo_push_rfbuf(
    7a28:	b118      	cbz	r0, 7a32 <on_radio_disabled_tx_wait_for_ack+0x76>
				interrupt_flags |= INT_RX_DATA_RECEIVED_MSK;
    7a2a:	6823      	ldr	r3, [r4, #0]
    7a2c:	f043 0304 	orr.w	r3, r3, #4
    7a30:	6023      	str	r3, [r4, #0]
		if ((tx_fifo.count == 0) || (esb_cfg.tx_mode == ESB_TXMODE_MANUAL)) {
    7a32:	6ab2      	ldr	r2, [r6, #40]	; 0x28
    7a34:	4b3b      	ldr	r3, [pc, #236]	; (7b24 <on_radio_disabled_tx_wait_for_ack+0x168>)
    7a36:	b112      	cbz	r2, 7a3e <on_radio_disabled_tx_wait_for_ack+0x82>
    7a38:	7c2a      	ldrb	r2, [r5, #16]
    7a3a:	2a01      	cmp	r2, #1
    7a3c:	d107      	bne.n	7a4e <on_radio_disabled_tx_wait_for_ack+0x92>
			esb_state = ESB_STATE_IDLE;
    7a3e:	4a3a      	ldr	r2, [pc, #232]	; (7b28 <on_radio_disabled_tx_wait_for_ack+0x16c>)
    7a40:	2100      	movs	r1, #0
    7a42:	7011      	strb	r1, [r2, #0]
    7a44:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    7a48:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    7a4c:	bd70      	pop	{r4, r5, r6, pc}
    7a4e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
    7a52:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    7a56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			start_tx_transaction();
    7a5a:	f7ff bdbd 	b.w	75d8 <start_tx_transaction>
		if (retransmits_remaining-- == 0) {
    7a5e:	6813      	ldr	r3, [r2, #0]
    7a60:	4e31      	ldr	r6, [pc, #196]	; (7b28 <on_radio_disabled_tx_wait_for_ack+0x16c>)
    7a62:	4d32      	ldr	r5, [pc, #200]	; (7b2c <on_radio_disabled_tx_wait_for_ack+0x170>)
    7a64:	1e59      	subs	r1, r3, #1
    7a66:	6011      	str	r1, [r2, #0]
    7a68:	b97b      	cbnz	r3, 7a8a <on_radio_disabled_tx_wait_for_ack+0xce>
			nrf_timer_task_trigger(esb_timer.p_reg, NRF_TIMER_TASK_SHUTDOWN);
    7a6a:	682a      	ldr	r2, [r5, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7a6c:	2101      	movs	r1, #1
    7a6e:	6111      	str	r1, [r2, #16]
			last_tx_attempts = esb_cfg.retransmit_count + 1;
    7a70:	4a27      	ldr	r2, [pc, #156]	; (7b10 <on_radio_disabled_tx_wait_for_ack+0x154>)
    7a72:	89d2      	ldrh	r2, [r2, #14]
    7a74:	440a      	add	r2, r1
    7a76:	4928      	ldr	r1, [pc, #160]	; (7b18 <on_radio_disabled_tx_wait_for_ack+0x15c>)
    7a78:	600a      	str	r2, [r1, #0]
			interrupt_flags |= INT_TX_FAILED_MSK;
    7a7a:	4924      	ldr	r1, [pc, #144]	; (7b0c <on_radio_disabled_tx_wait_for_ack+0x150>)
    7a7c:	680a      	ldr	r2, [r1, #0]
    7a7e:	f042 0202 	orr.w	r2, r2, #2
    7a82:	600a      	str	r2, [r1, #0]
			esb_state = ESB_STATE_IDLE;
    7a84:	7033      	strb	r3, [r6, #0]
    7a86:	4b27      	ldr	r3, [pc, #156]	; (7b24 <on_radio_disabled_tx_wait_for_ack+0x168>)
    7a88:	e7dc      	b.n	7a44 <on_radio_disabled_tx_wait_for_ack+0x88>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7a8a:	4c1e      	ldr	r4, [pc, #120]	; (7b04 <on_radio_disabled_tx_wait_for_ack+0x148>)
    7a8c:	2300      	movs	r3, #0
    7a8e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    7a92:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    p_reg->SHORTS = shorts_mask;
    7a96:	f240 131b 	movw	r3, #283	; 0x11b
    7a9a:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
			update_rf_payload_format(current_payload->length);
    7a9e:	4b24      	ldr	r3, [pc, #144]	; (7b30 <on_radio_disabled_tx_wait_for_ack+0x174>)
    7aa0:	681a      	ldr	r2, [r3, #0]
    7aa2:	4b24      	ldr	r3, [pc, #144]	; (7b34 <on_radio_disabled_tx_wait_for_ack+0x178>)
    7aa4:	7810      	ldrb	r0, [r2, #0]
    7aa6:	681b      	ldr	r3, [r3, #0]
    7aa8:	4798      	blx	r3
    p_reg->PACKETPTR = (uint32_t)p_packet;
    7aaa:	4b23      	ldr	r3, [pc, #140]	; (7b38 <on_radio_disabled_tx_wait_for_ack+0x17c>)
    7aac:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
			on_radio_disabled = on_radio_disabled_tx;
    7ab0:	4b22      	ldr	r3, [pc, #136]	; (7b3c <on_radio_disabled_tx_wait_for_ack+0x180>)
    7ab2:	4a23      	ldr	r2, [pc, #140]	; (7b40 <on_radio_disabled_tx_wait_for_ack+0x184>)
    7ab4:	601a      	str	r2, [r3, #0]
			esb_state = ESB_STATE_PTX_TX_ACK;
    7ab6:	2302      	movs	r3, #2
    7ab8:	7033      	strb	r3, [r6, #0]
			update_radio_tx_power();
    7aba:	f7ff fc61 	bl	7380 <update_radio_tx_power>
			esb_fem_for_tx_retry();
    7abe:	f7ff ff4b 	bl	7958 <esb_fem_for_tx_retry>
			esb_ppi_for_retransmission_set();
    7ac2:	f000 fc21 	bl	8308 <esb_ppi_for_retransmission_set>
			if (nrf_timer_event_check(esb_timer.p_reg, NRF_TIMER_EVENT_COMPARE1)) {
    7ac6:	682b      	ldr	r3, [r5, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7ac8:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
    7acc:	b1ba      	cbz	r2, 7afe <on_radio_disabled_tx_wait_for_ack+0x142>
                     RADIO_RSSISAMPLE_RSSISAMPLE_Pos);
}

NRF_STATIC_INLINE nrf_radio_state_t nrf_radio_state_get(NRF_RADIO_Type const * p_reg)
{
    return (nrf_radio_state_t) p_reg->STATE;
    7ace:	f8d4 3550 	ldr.w	r3, [r4, #1360]	; 0x550
					(nrf_radio_state_get(NRF_RADIO) == NRF_RADIO_STATE_TXRU) ||
    7ad2:	b2db      	uxtb	r3, r3
    7ad4:	2b09      	cmp	r3, #9
    7ad6:	d0b9      	beq.n	7a4c <on_radio_disabled_tx_wait_for_ack+0x90>
    return (bool) *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
    7ad8:	f8d4 4100 	ldr.w	r4, [r4, #256]	; 0x100
    7adc:	2c00      	cmp	r4, #0
    7ade:	d1b5      	bne.n	7a4c <on_radio_disabled_tx_wait_for_ack+0x90>
				esb_fem_for_tx_retry_clear();
    7ae0:	f7ff ff56 	bl	7990 <esb_fem_for_tx_retry_clear>
				esb_ppi_for_retransmission_clear();
    7ae4:	f000 fc4a 	bl	837c <esb_ppi_for_retransmission_clear>
				esb_ppi_for_txrx_set(false, true);
    7ae8:	2101      	movs	r1, #1
    7aea:	4620      	mov	r0, r4
    7aec:	f000 fb42 	bl	8174 <esb_ppi_for_txrx_set>
				esb_fem_for_tx_set(true);
    7af0:	2001      	movs	r0, #1
    7af2:	f7ff fc13 	bl	731c <esb_fem_for_tx_set>
    7af6:	4b13      	ldr	r3, [pc, #76]	; (7b44 <on_radio_disabled_tx_wait_for_ack+0x188>)
    7af8:	2201      	movs	r2, #1
    7afa:	619a      	str	r2, [r3, #24]
}
    7afc:	e7a6      	b.n	7a4c <on_radio_disabled_tx_wait_for_ack+0x90>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7afe:	2201      	movs	r2, #1
    7b00:	601a      	str	r2, [r3, #0]
}
    7b02:	e7a3      	b.n	7a4c <on_radio_disabled_tx_wait_for_ack+0x90>
    7b04:	40001000 	.word	0x40001000
    7b08:	200017a0 	.word	0x200017a0
    7b0c:	200017a4 	.word	0x200017a4
    7b10:	20001888 	.word	0x20001888
    7b14:	20001854 	.word	0x20001854
    7b18:	2000179c 	.word	0x2000179c
    7b1c:	20001eb3 	.word	0x20001eb3
    7b20:	20001828 	.word	0x20001828
    7b24:	e000e100 	.word	0xe000e100
    7b28:	20001ef7 	.word	0x20001ef7
    7b2c:	20000084 	.word	0x20000084
    7b30:	20001880 	.word	0x20001880
    7b34:	20001790 	.word	0x20001790
    7b38:	20001ed5 	.word	0x20001ed5
    7b3c:	20001794 	.word	0x20001794
    7b40:	000078a1 	.word	0x000078a1
    7b44:	40014000 	.word	0x40014000

00007b48 <esb_disable>:

	return 0;
}

void esb_disable(void)
{
    7b48:	b510      	push	{r4, lr}
	esb_ppi_disable_all();
    7b4a:	f000 fd03 	bl	8554 <esb_ppi_disable_all>
	esb_fem_reset();
    7b4e:	f7ff fc03 	bl	7358 <esb_fem_reset>
	nrfx_timer_uninit(&esb_timer);
    7b52:	4814      	ldr	r0, [pc, #80]	; (7ba4 <esb_disable+0x5c>)
    7b54:	f001 fce8 	bl	9528 <nrfx_timer_uninit>

	sys_timer_deinit();
	esb_ppi_deinit();
    7b58:	f000 fd26 	bl	85a8 <esb_ppi_deinit>
            RADIO_MODECNF0_RU_Fast;
}

NRF_STATIC_INLINE uint8_t nrf_radio_modecnf0_dtx_get(NRF_RADIO_Type const * p_reg)
{
    return (uint8_t)((p_reg->MODECNF0 & RADIO_MODECNF0_DTX_Msk) >> RADIO_MODECNF0_DTX_Pos);
    7b5c:	4a12      	ldr	r2, [pc, #72]	; (7ba8 <esb_disable+0x60>)
	esb_state = ESB_STATE_IDLE;
	esb_initialized = false;

	reset_fifos();

	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    7b5e:	4813      	ldr	r0, [pc, #76]	; (7bac <esb_disable+0x64>)
    7b60:	f8d2 3650 	ldr.w	r3, [r2, #1616]	; 0x650
                      (((uint32_t)default_tx) << RADIO_MODECNF0_DTX_Pos);
    7b64:	f403 7340 	and.w	r3, r3, #768	; 0x300
    p_reg->MODECNF0 = (fast_ramp_up ? (RADIO_MODECNF0_RU_Fast    << RADIO_MODECNF0_RU_Pos) :
    7b68:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
	esb_state = ESB_STATE_IDLE;
    7b6c:	4b10      	ldr	r3, [pc, #64]	; (7bb0 <esb_disable+0x68>)
    7b6e:	2400      	movs	r4, #0
    7b70:	701c      	strb	r4, [r3, #0]
	esb_initialized = false;
    7b72:	4b10      	ldr	r3, [pc, #64]	; (7bb4 <esb_disable+0x6c>)
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    7b74:	4621      	mov	r1, r4
	esb_initialized = false;
    7b76:	701c      	strb	r4, [r3, #0]
	reset_fifos();
    7b78:	f7ff fbb4 	bl	72e4 <reset_fifos>
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    7b7c:	2220      	movs	r2, #32
    7b7e:	f004 ffd0 	bl	cb22 <memset>
	memset(pids, 0, sizeof(pids));
    7b82:	4621      	mov	r1, r4
    7b84:	2208      	movs	r2, #8
    7b86:	480c      	ldr	r0, [pc, #48]	; (7bb8 <esb_disable+0x70>)
    7b88:	f004 ffcb 	bl	cb22 <memset>
	irq_disable(RADIO_IRQn);
    7b8c:	2001      	movs	r0, #1
    7b8e:	f7fc feaf 	bl	48f0 <arch_irq_disable>
	irq_disable(ESB_EVT_IRQ);
    7b92:	2014      	movs	r0, #20
    7b94:	f7fc feac 	bl	48f0 <arch_irq_disable>

	esb_irq_disable();
}
    7b98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	irq_disable(ESB_TIMER_IRQ);
    7b9c:	200a      	movs	r0, #10
    7b9e:	f7fc bea7 	b.w	48f0 <arch_irq_disable>
    7ba2:	bf00      	nop
    7ba4:	20000084 	.word	0x20000084
    7ba8:	40001000 	.word	0x40001000
    7bac:	20001c0c 	.word	0x20001c0c
    7bb0:	20001ef7 	.word	0x20001ef7
    7bb4:	20001ef8 	.word	0x20001ef8
    7bb8:	20001eab 	.word	0x20001eab

00007bbc <esb_init>:
{
    7bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
    7bbe:	b087      	sub	sp, #28
	if (!config) {
    7bc0:	4604      	mov	r4, r0
{
    7bc2:	af00      	add	r7, sp, #0
	if (!config) {
    7bc4:	2800      	cmp	r0, #0
    7bc6:	f000 80ec 	beq.w	7da2 <__kernel_ram_size+0x18a>
	if (esb_initialized) {
    7bca:	4d77      	ldr	r5, [pc, #476]	; (7da8 <__kernel_ram_size+0x190>)
    7bcc:	782b      	ldrb	r3, [r5, #0]
    7bce:	b10b      	cbz	r3, 7bd4 <esb_init+0x18>
		esb_disable();
    7bd0:	f7ff ffba 	bl	7b48 <esb_disable>
	event_handler = config->event_handler;
    7bd4:	4b75      	ldr	r3, [pc, #468]	; (7dac <__kernel_ram_size+0x194>)
	memcpy(&esb_cfg, config, sizeof(esb_cfg));
    7bd6:	4e76      	ldr	r6, [pc, #472]	; (7db0 <__kernel_ram_size+0x198>)
	event_handler = config->event_handler;
    7bd8:	6862      	ldr	r2, [r4, #4]
    7bda:	601a      	str	r2, [r3, #0]
	memcpy(&esb_cfg, config, sizeof(esb_cfg));
    7bdc:	4621      	mov	r1, r4
    7bde:	2214      	movs	r2, #20
    7be0:	4630      	mov	r0, r6
    7be2:	f004 ff93 	bl	cb0c <memcpy>
	interrupt_flags = 0;
    7be6:	2400      	movs	r4, #0
    7be8:	4b72      	ldr	r3, [pc, #456]	; (7db4 <__kernel_ram_size+0x19c>)
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    7bea:	4873      	ldr	r0, [pc, #460]	; (7db8 <__kernel_ram_size+0x1a0>)
	interrupt_flags = 0;
    7bec:	601c      	str	r4, [r3, #0]
	memset(rx_pipe_info, 0, sizeof(rx_pipe_info));
    7bee:	2220      	movs	r2, #32
    7bf0:	4621      	mov	r1, r4
    7bf2:	f004 ff96 	bl	cb22 <memset>
	memset(pids, 0, sizeof(pids));
    7bf6:	2208      	movs	r2, #8
    7bf8:	4621      	mov	r1, r4
    7bfa:	4870      	ldr	r0, [pc, #448]	; (7dbc <__kernel_ram_size+0x1a4>)
    7bfc:	f004 ff91 	bl	cb22 <memset>
	params_valid &= update_radio_bitrate();
    7c00:	f7ff fb52 	bl	72a8 <update_radio_bitrate>
	switch (esb_cfg.protocol) {
    7c04:	7833      	ldrb	r3, [r6, #0]
    7c06:	496e      	ldr	r1, [pc, #440]	; (7dc0 <__kernel_ram_size+0x1a8>)
    7c08:	b17b      	cbz	r3, 7c2a <__kernel_ram_size+0x12>
    7c0a:	2b01      	cmp	r3, #1
    7c0c:	d101      	bne.n	7c12 <esb_init+0x56>
		update_rf_payload_format = update_rf_payload_format_esb_dpl;
    7c0e:	4b6d      	ldr	r3, [pc, #436]	; (7dc4 <__kernel_ram_size+0x1ac>)
		update_rf_payload_format = update_rf_payload_format_esb;
    7c10:	600b      	str	r3, [r1, #0]
	switch (esb_cfg.crc) {
    7c12:	7a72      	ldrb	r2, [r6, #9]
    7c14:	4b6c      	ldr	r3, [pc, #432]	; (7dc8 <__kernel_ram_size+0x1b0>)
    7c16:	2a01      	cmp	r2, #1
    7c18:	d06f      	beq.n	7cfa <__kernel_ram_size+0xe2>
    7c1a:	2a02      	cmp	r2, #2
    7c1c:	d007      	beq.n	7c2e <__kernel_ram_size+0x16>
    7c1e:	b97a      	cbnz	r2, 7c40 <__kernel_ram_size+0x28>
    p_reg->CRCINIT = crc_init_value;
    7c20:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
    p_reg->CRCCNF = ((uint32_t)crc_length  << RADIO_CRCCNF_LEN_Pos) |
    7c24:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    7c28:	e008      	b.n	7c3c <__kernel_ram_size+0x24>
		update_rf_payload_format = update_rf_payload_format_esb;
    7c2a:	4b68      	ldr	r3, [pc, #416]	; (7dcc <__kernel_ram_size+0x1b4>)
    7c2c:	e7f0      	b.n	7c10 <esb_init+0x54>
    p_reg->CRCINIT = crc_init_value;
    7c2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
    7c32:	f8c3 053c 	str.w	r0, [r3, #1340]	; 0x53c
    p_reg->CRCCNF = ((uint32_t)crc_length  << RADIO_CRCCNF_LEN_Pos) |
    7c36:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->CRCPOLY = (crc_polynominal << RADIO_CRCPOLY_CRCPOLY_Pos);
    7c3a:	4a65      	ldr	r2, [pc, #404]	; (7dd0 <__kernel_ram_size+0x1b8>)
    7c3c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	update_rf_payload_format(esb_cfg.payload_length);
    7c40:	680b      	ldr	r3, [r1, #0]
    7c42:	7c70      	ldrb	r0, [r6, #17]
    7c44:	4798      	blx	r3
    p_reg->BASE0 = address;
    7c46:	4b60      	ldr	r3, [pc, #384]	; (7dc8 <__kernel_ram_size+0x1b0>)
    7c48:	4862      	ldr	r0, [pc, #392]	; (7dd4 <__kernel_ram_size+0x1bc>)
    7c4a:	4963      	ldr	r1, [pc, #396]	; (7dd8 <__kernel_ram_size+0x1c0>)
    7c4c:	f04f 32e7 	mov.w	r2, #3890735079	; 0xe7e7e7e7
    7c50:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->BASE1 = address;
    7c54:	f04f 3243 	mov.w	r2, #1128481603	; 0x43434343
    7c58:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
    p_reg->PREFIX0 = prefixes;
    7c5c:	4a5f      	ldr	r2, [pc, #380]	; (7ddc <__kernel_ram_size+0x1c4>)
    7c5e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
    p_reg->PREFIX1 = prefixes;
    7c62:	4a5f      	ldr	r2, [pc, #380]	; (7de0 <__kernel_ram_size+0x1c8>)
    7c64:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	reset_fifos();
    7c68:	f7ff fb3c 	bl	72e4 <reset_fifos>
    7c6c:	4602      	mov	r2, r0
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    7c6e:	2300      	movs	r3, #0
    7c70:	3301      	adds	r3, #1
    7c72:	2b08      	cmp	r3, #8
		tx_fifo.payload[i] = &tx_payload[i];
    7c74:	f841 2b04 	str.w	r2, [r1], #4
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    7c78:	f102 0225 	add.w	r2, r2, #37	; 0x25
    7c7c:	d1f8      	bne.n	7c70 <__kernel_ram_size+0x58>
    7c7e:	4a59      	ldr	r2, [pc, #356]	; (7de4 <__kernel_ram_size+0x1cc>)
    7c80:	4959      	ldr	r1, [pc, #356]	; (7de8 <__kernel_ram_size+0x1d0>)
	for (size_t i = 0; i < CONFIG_ESB_RX_FIFO_SIZE; i++) {
    7c82:	2300      	movs	r3, #0
    7c84:	3301      	adds	r3, #1
    7c86:	2b08      	cmp	r3, #8
		rx_fifo.payload[i] = &rx_payload[i];
    7c88:	f841 2b04 	str.w	r2, [r1], #4
	for (size_t i = 0; i < CONFIG_ESB_RX_FIFO_SIZE; i++) {
    7c8c:	f102 0225 	add.w	r2, r2, #37	; 0x25
    7c90:	d1f8      	bne.n	7c84 <__kernel_ram_size+0x6c>
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    7c92:	2100      	movs	r1, #0
    7c94:	4a55      	ldr	r2, [pc, #340]	; (7dec <__kernel_ram_size+0x1d4>)
		ack_pl_wrap[i].in_use = false;
    7c96:	460b      	mov	r3, r1
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    7c98:	3101      	adds	r1, #1
    7c9a:	2908      	cmp	r1, #8
		ack_pl_wrap[i].p_payload = &tx_payload[i];
    7c9c:	6010      	str	r0, [r2, #0]
		ack_pl_wrap[i].in_use = false;
    7c9e:	7113      	strb	r3, [r2, #4]
		ack_pl_wrap[i].p_next = 0;
    7ca0:	6093      	str	r3, [r2, #8]
	for (size_t i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    7ca2:	f100 0025 	add.w	r0, r0, #37	; 0x25
    7ca6:	f102 020c 	add.w	r2, r2, #12
    7caa:	d1f5      	bne.n	7c98 <__kernel_ram_size+0x80>
		ack_pl_wrap_pipe[i] = 0;
    7cac:	4a50      	ldr	r2, [pc, #320]	; (7df0 <__kernel_ram_size+0x1d8>)
	nrfx_err = nrfx_timer_init(&esb_timer, &config, esb_timer_handler);
    7cae:	4851      	ldr	r0, [pc, #324]	; (7df4 <__kernel_ram_size+0x1dc>)
		ack_pl_wrap_pipe[i] = 0;
    7cb0:	e9c2 3300 	strd	r3, r3, [r2]
    7cb4:	e9c2 3302 	strd	r3, r3, [r2, #8]
    7cb8:	e9c2 3304 	strd	r3, r3, [r2, #16]
    7cbc:	e9c2 3306 	strd	r3, r3, [r2, #24]
	const nrfx_timer_config_t config = {
    7cc0:	e9c7 3300 	strd	r3, r3, [r7]
    7cc4:	2304      	movs	r3, #4
    7cc6:	703b      	strb	r3, [r7, #0]
	nrfx_err = nrfx_timer_init(&esb_timer, &config, esb_timer_handler);
    7cc8:	4a4b      	ldr	r2, [pc, #300]	; (7df8 <__kernel_ram_size+0x1e0>)
    7cca:	4639      	mov	r1, r7
    7ccc:	f001 fbd6 	bl	947c <nrfx_timer_init>
	if (nrfx_err != NRFX_SUCCESS) {
    7cd0:	4b4a      	ldr	r3, [pc, #296]	; (7dfc <__kernel_ram_size+0x1e4>)
    7cd2:	4298      	cmp	r0, r3
    7cd4:	d119      	bne.n	7d0a <__kernel_ram_size+0xf2>
	err = esb_ppi_init();
    7cd6:	f000 fbcf 	bl	8478 <esb_ppi_init>
	if (err) {
    7cda:	4604      	mov	r4, r0
    7cdc:	2800      	cmp	r0, #0
    7cde:	d036      	beq.n	7d4e <__kernel_ram_size+0x136>
		LOG_ERR("Failed to initialize PPI");
    7ce0:	4b47      	ldr	r3, [pc, #284]	; (7e00 <__kernel_ram_size+0x1e8>)
    7ce2:	617b      	str	r3, [r7, #20]
    7ce4:	2302      	movs	r3, #2
    7ce6:	613b      	str	r3, [r7, #16]
    7ce8:	4846      	ldr	r0, [pc, #280]	; (7e04 <__kernel_ram_size+0x1ec>)
    7cea:	2300      	movs	r3, #0
    7cec:	f107 0210 	add.w	r2, r7, #16
    7cf0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    7cf4:	f7fb f9c4 	bl	3080 <z_impl_z_log_msg_static_create>
		return err;
    7cf8:	e025      	b.n	7d46 <__kernel_ram_size+0x12e>
    p_reg->CRCINIT = crc_init_value;
    7cfa:	20ff      	movs	r0, #255	; 0xff
    7cfc:	f8c3 053c 	str.w	r0, [r3, #1340]	; 0x53c
    p_reg->CRCCNF = ((uint32_t)crc_length  << RADIO_CRCCNF_LEN_Pos) |
    7d00:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    p_reg->CRCPOLY = (crc_polynominal << RADIO_CRCPOLY_CRCPOLY_Pos);
    7d04:	f240 1207 	movw	r2, #263	; 0x107
    7d08:	e798      	b.n	7c3c <__kernel_ram_size+0x24>
		LOG_ERR("Failed to initialize nrfx timer (err %d)", nrfx_err);
    7d0a:	466c      	mov	r4, sp
    7d0c:	b088      	sub	sp, #32
    7d0e:	466a      	mov	r2, sp
    7d10:	4b3d      	ldr	r3, [pc, #244]	; (7e08 <__kernel_ram_size+0x1f0>)
    7d12:	e9c2 3005 	strd	r3, r0, [r2, #20]
    7d16:	2303      	movs	r3, #3
    7d18:	f842 3f10 	str.w	r3, [r2, #16]!
    7d1c:	4839      	ldr	r0, [pc, #228]	; (7e04 <__kernel_ram_size+0x1ec>)
    7d1e:	2300      	movs	r3, #0
    7d20:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    7d24:	f7fb f9ac 	bl	3080 <z_impl_z_log_msg_static_create>
    7d28:	46a5      	mov	sp, r4
		LOG_ERR("Failed to initialize ESB system timer");
    7d2a:	4b38      	ldr	r3, [pc, #224]	; (7e0c <__kernel_ram_size+0x1f4>)
    7d2c:	617b      	str	r3, [r7, #20]
    7d2e:	2302      	movs	r3, #2
    7d30:	613b      	str	r3, [r7, #16]
    7d32:	4834      	ldr	r0, [pc, #208]	; (7e04 <__kernel_ram_size+0x1ec>)
    7d34:	2300      	movs	r3, #0
    7d36:	f107 0210 	add.w	r2, r7, #16
    7d3a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EFAULT;
    7d3e:	f06f 040d 	mvn.w	r4, #13
    7d42:	f7fb f99d 	bl	3080 <z_impl_z_log_msg_static_create>
}
    7d46:	4620      	mov	r0, r4
    7d48:	371c      	adds	r7, #28
    7d4a:	46bd      	mov	sp, r7
    7d4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	disable_event.event.generic.event = esb_ppi_radio_disabled_get();
    7d4e:	f000 fbfd 	bl	854c <esb_ppi_radio_disabled_get>
    7d52:	4b2f      	ldr	r3, [pc, #188]	; (7e10 <__kernel_ram_size+0x1f8>)
    return (uint8_t)((p_reg->MODECNF0 & RADIO_MODECNF0_DTX_Msk) >> RADIO_MODECNF0_DTX_Pos);
    7d54:	4a1c      	ldr	r2, [pc, #112]	; (7dc8 <__kernel_ram_size+0x1b0>)
    7d56:	6058      	str	r0, [r3, #4]
    7d58:	f8d2 3650 	ldr.w	r3, [r2, #1616]	; 0x650
    p_reg->MODECNF0 = (fast_ramp_up ? (RADIO_MODECNF0_RU_Fast    << RADIO_MODECNF0_RU_Pos) :
    7d5c:	7cf1      	ldrb	r1, [r6, #19]
                      (((uint32_t)default_tx) << RADIO_MODECNF0_DTX_Pos);
    7d5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
                                      (RADIO_MODECNF0_RU_Default << RADIO_MODECNF0_RU_Pos) ) |
    7d62:	430b      	orrs	r3, r1
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_ESB_RADIO_IRQ_PRIORITY,
    7d64:	2101      	movs	r1, #1
    p_reg->MODECNF0 = (fast_ramp_up ? (RADIO_MODECNF0_RU_Fast    << RADIO_MODECNF0_RU_Pos) :
    7d66:	f8c2 3650 	str.w	r3, [r2, #1616]	; 0x650
    7d6a:	4608      	mov	r0, r1
    7d6c:	4622      	mov	r2, r4
    7d6e:	f7fc fde1 	bl	4934 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(ESB_EVT_IRQ, CONFIG_ESB_EVENT_IRQ_PRIORITY,
    7d72:	4622      	mov	r2, r4
    7d74:	2102      	movs	r1, #2
    7d76:	2014      	movs	r0, #20
    7d78:	f7fc fddc 	bl	4934 <z_arm_irq_priority_set>
	IRQ_DIRECT_CONNECT(ESB_TIMER_IRQ, CONFIG_ESB_EVENT_IRQ_PRIORITY,
    7d7c:	4622      	mov	r2, r4
    7d7e:	2102      	movs	r1, #2
    7d80:	200a      	movs	r0, #10
    7d82:	f7fc fdd7 	bl	4934 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
    7d86:	2001      	movs	r0, #1
    7d88:	f7fc fda4 	bl	48d4 <arch_irq_enable>
	irq_enable(ESB_EVT_IRQ);
    7d8c:	2014      	movs	r0, #20
    7d8e:	f7fc fda1 	bl	48d4 <arch_irq_enable>
	irq_enable(ESB_TIMER_IRQ);
    7d92:	200a      	movs	r0, #10
    7d94:	f7fc fd9e 	bl	48d4 <arch_irq_enable>
	esb_state = ESB_STATE_IDLE;
    7d98:	4b1e      	ldr	r3, [pc, #120]	; (7e14 <__kernel_ram_size+0x1fc>)
    7d9a:	701c      	strb	r4, [r3, #0]
	esb_initialized = true;
    7d9c:	2301      	movs	r3, #1
    7d9e:	702b      	strb	r3, [r5, #0]
	return 0;
    7da0:	e7d1      	b.n	7d46 <__kernel_ram_size+0x12e>
		return -EINVAL;
    7da2:	f06f 0415 	mvn.w	r4, #21
    7da6:	e7ce      	b.n	7d46 <__kernel_ram_size+0x12e>
    7da8:	20001ef8 	.word	0x20001ef8
    7dac:	20001884 	.word	0x20001884
    7db0:	20001888 	.word	0x20001888
    7db4:	200017a4 	.word	0x200017a4
    7db8:	20001c0c 	.word	0x20001c0c
    7dbc:	20001eab 	.word	0x20001eab
    7dc0:	20001790 	.word	0x20001790
    7dc4:	00007551 	.word	0x00007551
    7dc8:	40001000 	.word	0x40001000
    7dcc:	00007511 	.word	0x00007511
    7dd0:	00011021 	.word	0x00011021
    7dd4:	20001d83 	.word	0x20001d83
    7dd8:	20001854 	.word	0x20001854
    7ddc:	23c343e7 	.word	0x23c343e7
    7de0:	13e363a3 	.word	0x13e363a3
    7de4:	20001c5b 	.word	0x20001c5b
    7de8:	20001828 	.word	0x20001828
    7dec:	200017c8 	.word	0x200017c8
    7df0:	200017a8 	.word	0x200017a8
    7df4:	20000084 	.word	0x20000084
    7df8:	00007301 	.word	0x00007301
    7dfc:	0bad0000 	.word	0x0bad0000
    7e00:	00010386 	.word	0x00010386
    7e04:	0000db8c 	.word	0x0000db8c
    7e08:	00010337 	.word	0x00010337
    7e0c:	00010360 	.word	0x00010360
    7e10:	20000040 	.word	0x20000040
    7e14:	20001ef7 	.word	0x20001ef7

00007e18 <esb_write_payload>:

	return 0;
}

int esb_write_payload(const struct esb_payload *payload)
{
    7e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!esb_initialized) {
    7e1c:	4b4a      	ldr	r3, [pc, #296]	; (7f48 <esb_write_payload+0x130>)
    7e1e:	781b      	ldrb	r3, [r3, #0]
{
    7e20:	4604      	mov	r4, r0
	if (!esb_initialized) {
    7e22:	2b00      	cmp	r3, #0
    7e24:	f000 8083 	beq.w	7f2e <esb_write_payload+0x116>
		return -EACCES;
	}

	if (payload == NULL) {
    7e28:	2800      	cmp	r0, #0
    7e2a:	f000 8089 	beq.w	7f40 <esb_write_payload+0x128>
		return -EINVAL;
	}

	if ((payload->length == 0) || (payload->length > CONFIG_ESB_MAX_PAYLOAD_LENGTH) ||
    7e2e:	7803      	ldrb	r3, [r0, #0]
    7e30:	1e5a      	subs	r2, r3, #1
    7e32:	2a1f      	cmp	r2, #31
    7e34:	d87e      	bhi.n	7f34 <esb_write_payload+0x11c>
	    ((esb_cfg.protocol == ESB_PROTOCOL_ESB) &&
    7e36:	4f45      	ldr	r7, [pc, #276]	; (7f4c <esb_write_payload+0x134>)
	if ((payload->length == 0) || (payload->length > CONFIG_ESB_MAX_PAYLOAD_LENGTH) ||
    7e38:	783a      	ldrb	r2, [r7, #0]
    7e3a:	b912      	cbnz	r2, 7e42 <esb_write_payload+0x2a>
	    ((esb_cfg.protocol == ESB_PROTOCOL_ESB) &&
    7e3c:	7c7a      	ldrb	r2, [r7, #17]
    7e3e:	429a      	cmp	r2, r3
    7e40:	d378      	bcc.n	7f34 <esb_write_payload+0x11c>
	     (payload->length > esb_cfg.payload_length))) {
		return -EMSGSIZE;
	}

	if (tx_fifo.count >= CONFIG_ESB_TX_FIFO_SIZE) {
    7e42:	4d43      	ldr	r5, [pc, #268]	; (7f50 <esb_write_payload+0x138>)
    7e44:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7e46:	2b07      	cmp	r3, #7
    7e48:	d877      	bhi.n	7f3a <esb_write_payload+0x122>
		return -ENOMEM;
	}

	if (payload->pipe >= CONFIG_ESB_PIPE_COUNT) {
    7e4a:	7863      	ldrb	r3, [r4, #1]
    7e4c:	2b07      	cmp	r3, #7
    7e4e:	d877      	bhi.n	7f40 <esb_write_payload+0x128>
	__asm__ volatile(
    7e50:	f04f 0340 	mov.w	r3, #64	; 0x40
    7e54:	f3ef 8811 	mrs	r8, BASEPRI
    7e58:	f383 8812 	msr	BASEPRI_MAX, r3
    7e5c:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	unsigned int key = irq_lock();

	if (esb_cfg.mode == ESB_MODE_PTX) {
    7e60:	787b      	ldrb	r3, [r7, #1]
    7e62:	b9eb      	cbnz	r3, 7ea0 <esb_write_payload+0x88>
		memcpy(tx_fifo.payload[tx_fifo.back], payload, sizeof(struct esb_payload));
    7e64:	6a2b      	ldr	r3, [r5, #32]
    7e66:	2225      	movs	r2, #37	; 0x25
    7e68:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    7e6c:	4621      	mov	r1, r4
    7e6e:	f004 fe4d 	bl	cb0c <memcpy>

		pids[payload->pipe] = (pids[payload->pipe] + 1) % (PID_MAX + 1);
    7e72:	7861      	ldrb	r1, [r4, #1]
    7e74:	4a37      	ldr	r2, [pc, #220]	; (7f54 <esb_write_payload+0x13c>)
    7e76:	5c53      	ldrb	r3, [r2, r1]
    7e78:	3301      	adds	r3, #1
    7e7a:	f003 0303 	and.w	r3, r3, #3
    7e7e:	5453      	strb	r3, [r2, r1]
		tx_fifo.payload[tx_fifo.back]->pid = pids[payload->pipe];
    7e80:	6a2b      	ldr	r3, [r5, #32]
    7e82:	7861      	ldrb	r1, [r4, #1]
    7e84:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    7e88:	5c52      	ldrb	r2, [r2, r1]
    7e8a:	711a      	strb	r2, [r3, #4]

		if (++tx_fifo.back >= CONFIG_ESB_TX_FIFO_SIZE) {
    7e8c:	6a2b      	ldr	r3, [r5, #32]
    7e8e:	3301      	adds	r3, #1
			tx_fifo.back = 0;
    7e90:	2b08      	cmp	r3, #8
    7e92:	bf28      	it	cs
    7e94:	2300      	movcs	r3, #0
    7e96:	622b      	str	r3, [r5, #32]
				while (pl->p_next != 0) {
					pl = (struct payload_wrap *)pl->p_next;
				}
				pl->p_next = (struct payload_wrap *)new_ack_payload;
			}
			tx_fifo.count++;
    7e98:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7e9a:	3301      	adds	r3, #1
    7e9c:	62ab      	str	r3, [r5, #40]	; 0x28
    7e9e:	e02d      	b.n	7efc <esb_write_payload+0xe4>
    7ea0:	4a2d      	ldr	r2, [pc, #180]	; (7f58 <esb_write_payload+0x140>)
	for (int i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    7ea2:	2300      	movs	r3, #0
    7ea4:	4692      	mov	sl, r2
		if (!ack_pl_wrap[i].in_use) {
    7ea6:	7911      	ldrb	r1, [r2, #4]
    7ea8:	bb19      	cbnz	r1, 7ef2 <esb_write_payload+0xda>
			return &ack_pl_wrap[i];
    7eaa:	220c      	movs	r2, #12
    7eac:	fb02 f603 	mul.w	r6, r2, r3
    7eb0:	eb0a 0906 	add.w	r9, sl, r6
			new_ack_payload->in_use = true;
    7eb4:	2301      	movs	r3, #1
			new_ack_payload->p_next = 0;
    7eb6:	f8c9 1008 	str.w	r1, [r9, #8]
			memcpy(new_ack_payload->p_payload, payload, sizeof(struct esb_payload));
    7eba:	2225      	movs	r2, #37	; 0x25
    7ebc:	4621      	mov	r1, r4
    7ebe:	f85a 0006 	ldr.w	r0, [sl, r6]
			new_ack_payload->in_use = true;
    7ec2:	f889 3004 	strb.w	r3, [r9, #4]
			memcpy(new_ack_payload->p_payload, payload, sizeof(struct esb_payload));
    7ec6:	f004 fe21 	bl	cb0c <memcpy>
			pids[payload->pipe] = (pids[payload->pipe] + 1) % (PID_MAX + 1);
    7eca:	7861      	ldrb	r1, [r4, #1]
    7ecc:	4a21      	ldr	r2, [pc, #132]	; (7f54 <esb_write_payload+0x13c>)
    7ece:	5c53      	ldrb	r3, [r2, r1]
    7ed0:	3301      	adds	r3, #1
    7ed2:	f003 0303 	and.w	r3, r3, #3
    7ed6:	5453      	strb	r3, [r2, r1]
			new_ack_payload->p_payload->pid = pids[payload->pipe];
    7ed8:	7861      	ldrb	r1, [r4, #1]
    7eda:	f85a 3006 	ldr.w	r3, [sl, r6]
    7ede:	5c52      	ldrb	r2, [r2, r1]
    7ee0:	711a      	strb	r2, [r3, #4]
			if (ack_pl_wrap_pipe[payload->pipe] == 0) {
    7ee2:	7861      	ldrb	r1, [r4, #1]
    7ee4:	4a1d      	ldr	r2, [pc, #116]	; (7f5c <esb_write_payload+0x144>)
    7ee6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
    7eea:	b993      	cbnz	r3, 7f12 <esb_write_payload+0xfa>
				ack_pl_wrap_pipe[payload->pipe] = new_ack_payload;
    7eec:	f842 9021 	str.w	r9, [r2, r1, lsl #2]
    7ef0:	e7d2      	b.n	7e98 <esb_write_payload+0x80>
	for (int i = 0; i < CONFIG_ESB_TX_FIFO_SIZE; i++) {
    7ef2:	3301      	adds	r3, #1
    7ef4:	2b08      	cmp	r3, #8
    7ef6:	f102 020c 	add.w	r2, r2, #12
    7efa:	d1d4      	bne.n	7ea6 <esb_write_payload+0x8e>
	__asm__ volatile(
    7efc:	f388 8811 	msr	BASEPRI, r8
    7f00:	f3bf 8f6f 	isb	sy
		}
	}

	irq_unlock(key);

	if (esb_cfg.mode == ESB_MODE_PTX &&
    7f04:	787b      	ldrb	r3, [r7, #1]
    7f06:	7c3a      	ldrb	r2, [r7, #16]
    7f08:	4313      	orrs	r3, r2
    7f0a:	d009      	beq.n	7f20 <esb_write_payload+0x108>
	    esb_cfg.tx_mode == ESB_TXMODE_AUTO &&
	    esb_state == ESB_STATE_IDLE) {
		start_tx_transaction();
	}

	return 0;
    7f0c:	2000      	movs	r0, #0
}
    7f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
				while (pl->p_next != 0) {
    7f12:	461a      	mov	r2, r3
    7f14:	689b      	ldr	r3, [r3, #8]
    7f16:	2b00      	cmp	r3, #0
    7f18:	d1fb      	bne.n	7f12 <esb_write_payload+0xfa>
				pl->p_next = (struct payload_wrap *)new_ack_payload;
    7f1a:	f8c2 9008 	str.w	r9, [r2, #8]
    7f1e:	e7bb      	b.n	7e98 <esb_write_payload+0x80>
	    esb_state == ESB_STATE_IDLE) {
    7f20:	4b0f      	ldr	r3, [pc, #60]	; (7f60 <esb_write_payload+0x148>)
    7f22:	781b      	ldrb	r3, [r3, #0]
	    esb_cfg.tx_mode == ESB_TXMODE_AUTO &&
    7f24:	2b00      	cmp	r3, #0
    7f26:	d1f1      	bne.n	7f0c <esb_write_payload+0xf4>
		start_tx_transaction();
    7f28:	f7ff fb56 	bl	75d8 <start_tx_transaction>
    7f2c:	e7ee      	b.n	7f0c <esb_write_payload+0xf4>
		return -EACCES;
    7f2e:	f06f 000c 	mvn.w	r0, #12
    7f32:	e7ec      	b.n	7f0e <esb_write_payload+0xf6>
		return -EMSGSIZE;
    7f34:	f06f 0079 	mvn.w	r0, #121	; 0x79
    7f38:	e7e9      	b.n	7f0e <esb_write_payload+0xf6>
		return -ENOMEM;
    7f3a:	f06f 000b 	mvn.w	r0, #11
    7f3e:	e7e6      	b.n	7f0e <esb_write_payload+0xf6>
		return -EINVAL;
    7f40:	f06f 0015 	mvn.w	r0, #21
    7f44:	e7e3      	b.n	7f0e <esb_write_payload+0xf6>
    7f46:	bf00      	nop
    7f48:	20001ef8 	.word	0x20001ef8
    7f4c:	20001888 	.word	0x20001888
    7f50:	20001854 	.word	0x20001854
    7f54:	20001eab 	.word	0x20001eab
    7f58:	200017c8 	.word	0x200017c8
    7f5c:	200017a8 	.word	0x200017a8
    7f60:	20001ef7 	.word	0x20001ef7

00007f64 <esb_read_rx_payload>:

int esb_read_rx_payload(struct esb_payload *payload)
{
    7f64:	b538      	push	{r3, r4, r5, lr}
	if (!esb_initialized) {
    7f66:	4b25      	ldr	r3, [pc, #148]	; (7ffc <esb_read_rx_payload+0x98>)
    7f68:	781b      	ldrb	r3, [r3, #0]
    7f6a:	2b00      	cmp	r3, #0
    7f6c:	d03d      	beq.n	7fea <esb_read_rx_payload+0x86>
		return -EACCES;
	}
	if (payload == NULL) {
    7f6e:	2800      	cmp	r0, #0
    7f70:	d03e      	beq.n	7ff0 <esb_read_rx_payload+0x8c>
		return -EINVAL;
	}

	if (rx_fifo.count == 0) {
    7f72:	4c23      	ldr	r4, [pc, #140]	; (8000 <CONFIG_PM_SRAM_SIZE>)
    7f74:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7f76:	2b00      	cmp	r3, #0
    7f78:	d03d      	beq.n	7ff6 <esb_read_rx_payload+0x92>
	__asm__ volatile(
    7f7a:	f04f 0340 	mov.w	r3, #64	; 0x40
    7f7e:	f3ef 8511 	mrs	r5, BASEPRI
    7f82:	f383 8812 	msr	BASEPRI_MAX, r3
    7f86:	f3bf 8f6f 	isb	sy
		return -ENODATA;
	}

	unsigned int key = irq_lock();

	payload->length = rx_fifo.payload[rx_fifo.front]->length;
    7f8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7f8c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    7f90:	781a      	ldrb	r2, [r3, #0]
    7f92:	7002      	strb	r2, [r0, #0]
	payload->pipe = rx_fifo.payload[rx_fifo.front]->pipe;
    7f94:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7f96:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    7f9a:	785b      	ldrb	r3, [r3, #1]
    7f9c:	7043      	strb	r3, [r0, #1]
	payload->rssi = rx_fifo.payload[rx_fifo.front]->rssi;
    7f9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7fa0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    7fa4:	f993 3002 	ldrsb.w	r3, [r3, #2]
    7fa8:	7083      	strb	r3, [r0, #2]
	payload->pid = rx_fifo.payload[rx_fifo.front]->pid;
    7faa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7fac:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    7fb0:	791b      	ldrb	r3, [r3, #4]
    7fb2:	7103      	strb	r3, [r0, #4]
	payload->noack = rx_fifo.payload[rx_fifo.front]->noack;
    7fb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7fb6:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    7fba:	78db      	ldrb	r3, [r3, #3]
    7fbc:	70c3      	strb	r3, [r0, #3]
	memcpy(payload->data, rx_fifo.payload[rx_fifo.front]->data,
    7fbe:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7fc0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
    7fc4:	3005      	adds	r0, #5
    7fc6:	3105      	adds	r1, #5
    7fc8:	f004 fda0 	bl	cb0c <memcpy>
	       payload->length);

	if (++rx_fifo.front >= CONFIG_ESB_RX_FIFO_SIZE) {
    7fcc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7fce:	3301      	adds	r3, #1
		rx_fifo.front = 0;
    7fd0:	2b08      	cmp	r3, #8
    7fd2:	bf28      	it	cs
    7fd4:	2300      	movcs	r3, #0
    7fd6:	6263      	str	r3, [r4, #36]	; 0x24
	}

	rx_fifo.count--;
    7fd8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7fda:	3b01      	subs	r3, #1
    7fdc:	62a3      	str	r3, [r4, #40]	; 0x28
	__asm__ volatile(
    7fde:	f385 8811 	msr	BASEPRI, r5
    7fe2:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	return 0;
    7fe6:	2000      	movs	r0, #0
}
    7fe8:	bd38      	pop	{r3, r4, r5, pc}
		return -EACCES;
    7fea:	f06f 000c 	mvn.w	r0, #12
    7fee:	e7fb      	b.n	7fe8 <esb_read_rx_payload+0x84>
		return -EINVAL;
    7ff0:	f06f 0015 	mvn.w	r0, #21
    7ff4:	e7f8      	b.n	7fe8 <esb_read_rx_payload+0x84>
		return -ENODATA;
    7ff6:	f06f 003c 	mvn.w	r0, #60	; 0x3c
    7ffa:	e7f5      	b.n	7fe8 <esb_read_rx_payload+0x84>
    7ffc:	20001ef8 	.word	0x20001ef8
    8000:	20001828 	.word	0x20001828

00008004 <esb_flush_tx>:
	return 0;
}

int esb_flush_tx(void)
{
	if (!esb_initialized) {
    8004:	4b0b      	ldr	r3, [pc, #44]	; (8034 <esb_flush_tx+0x30>)
    8006:	781b      	ldrb	r3, [r3, #0]
    8008:	b18b      	cbz	r3, 802e <esb_flush_tx+0x2a>
	__asm__ volatile(
    800a:	f04f 0340 	mov.w	r3, #64	; 0x40
    800e:	f3ef 8211 	mrs	r2, BASEPRI
    8012:	f383 8812 	msr	BASEPRI_MAX, r3
    8016:	f3bf 8f6f 	isb	sy
		return -EACCES;
	}

	unsigned int key = irq_lock();

	tx_fifo.count = 0;
    801a:	4b07      	ldr	r3, [pc, #28]	; (8038 <esb_flush_tx+0x34>)
    801c:	2000      	movs	r0, #0
    801e:	6298      	str	r0, [r3, #40]	; 0x28
	tx_fifo.back = 0;
	tx_fifo.front = 0;
    8020:	e9c3 0008 	strd	r0, r0, [r3, #32]
	__asm__ volatile(
    8024:	f382 8811 	msr	BASEPRI, r2
    8028:	f3bf 8f6f 	isb	sy

	irq_unlock(key);

	return 0;
    802c:	4770      	bx	lr
		return -EACCES;
    802e:	f06f 000c 	mvn.w	r0, #12
}
    8032:	4770      	bx	lr
    8034:	20001ef8 	.word	0x20001ef8
    8038:	20001854 	.word	0x20001854

0000803c <esb_set_base_address_0>:

	return 0;
}

int esb_set_base_address_0(const uint8_t *addr)
{
    803c:	b510      	push	{r4, lr}
	if (esb_state != ESB_STATE_IDLE) {
    803e:	4b0d      	ldr	r3, [pc, #52]	; (8074 <esb_set_base_address_0+0x38>)
    8040:	781b      	ldrb	r3, [r3, #0]
{
    8042:	4601      	mov	r1, r0
	if (esb_state != ESB_STATE_IDLE) {
    8044:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    8048:	b96b      	cbnz	r3, 8066 <esb_set_base_address_0+0x2a>
		return -EBUSY;
	}
	if (addr == NULL) {
    804a:	b178      	cbz	r0, 806c <esb_set_base_address_0+0x30>
		return -EINVAL;
	}

	memcpy(esb_addr.base_addr_p0, addr, sizeof(esb_addr.base_addr_p0));
    804c:	2204      	movs	r2, #4
    804e:	480a      	ldr	r0, [pc, #40]	; (8078 <esb_set_base_address_0+0x3c>)
    8050:	f004 fd5c 	bl	cb0c <memcpy>
	return __REV(bytewise_bit_swap(addr));
    8054:	4808      	ldr	r0, [pc, #32]	; (8078 <esb_set_base_address_0+0x3c>)
    8056:	f004 ff78 	bl	cf4a <bytewise_bit_swap>
    p_reg->BASE0 = address;
    805a:	4b08      	ldr	r3, [pc, #32]	; (807c <esb_set_base_address_0+0x40>)
  return __builtin_bswap32(value);
    805c:	ba00      	rev	r0, r0
    805e:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c

	update_radio_addresses(ADDR_UPDATE_MASK_BASE0);

	return 0;
    8062:	4620      	mov	r0, r4
}
    8064:	bd10      	pop	{r4, pc}
		return -EBUSY;
    8066:	f06f 000f 	mvn.w	r0, #15
    806a:	e7fb      	b.n	8064 <esb_set_base_address_0+0x28>
		return -EINVAL;
    806c:	f06f 0015 	mvn.w	r0, #21
    8070:	e7f8      	b.n	8064 <esb_set_base_address_0+0x28>
    8072:	bf00      	nop
    8074:	20001ef7 	.word	0x20001ef7
    8078:	20000070 	.word	0x20000070
    807c:	40001000 	.word	0x40001000

00008080 <esb_set_base_address_1>:

int esb_set_base_address_1(const uint8_t *addr)
{
    8080:	b510      	push	{r4, lr}
	if (esb_state != ESB_STATE_IDLE) {
    8082:	4b0d      	ldr	r3, [pc, #52]	; (80b8 <esb_set_base_address_1+0x38>)
    8084:	781b      	ldrb	r3, [r3, #0]
{
    8086:	4601      	mov	r1, r0
	if (esb_state != ESB_STATE_IDLE) {
    8088:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    808c:	b96b      	cbnz	r3, 80aa <esb_set_base_address_1+0x2a>
		return -EBUSY;
	}
	if (addr == NULL) {
    808e:	b178      	cbz	r0, 80b0 <esb_set_base_address_1+0x30>
		return -EINVAL;
	}

	memcpy(esb_addr.base_addr_p1, addr, sizeof(esb_addr.base_addr_p1));
    8090:	2204      	movs	r2, #4
    8092:	480a      	ldr	r0, [pc, #40]	; (80bc <esb_set_base_address_1+0x3c>)
    8094:	f004 fd3a 	bl	cb0c <memcpy>
	return __REV(bytewise_bit_swap(addr));
    8098:	4808      	ldr	r0, [pc, #32]	; (80bc <esb_set_base_address_1+0x3c>)
    809a:	f004 ff56 	bl	cf4a <bytewise_bit_swap>
    p_reg->BASE1 = address;
    809e:	4b08      	ldr	r3, [pc, #32]	; (80c0 <esb_set_base_address_1+0x40>)
    80a0:	ba00      	rev	r0, r0
    80a2:	f8c3 0520 	str.w	r0, [r3, #1312]	; 0x520

	update_radio_addresses(ADDR_UPDATE_MASK_BASE1);

	return 0;
    80a6:	4620      	mov	r0, r4
}
    80a8:	bd10      	pop	{r4, pc}
		return -EBUSY;
    80aa:	f06f 000f 	mvn.w	r0, #15
    80ae:	e7fb      	b.n	80a8 <esb_set_base_address_1+0x28>
		return -EINVAL;
    80b0:	f06f 0015 	mvn.w	r0, #21
    80b4:	e7f8      	b.n	80a8 <esb_set_base_address_1+0x28>
    80b6:	bf00      	nop
    80b8:	20001ef7 	.word	0x20001ef7
    80bc:	20000074 	.word	0x20000074
    80c0:	40001000 	.word	0x40001000

000080c4 <esb_set_prefixes>:

int esb_set_prefixes(const uint8_t *prefixes, uint8_t num_pipes)
{
    80c4:	b538      	push	{r3, r4, r5, lr}
	if (esb_state != ESB_STATE_IDLE) {
    80c6:	4b0f      	ldr	r3, [pc, #60]	; (8104 <esb_set_prefixes+0x40>)
    80c8:	781b      	ldrb	r3, [r3, #0]
{
    80ca:	460c      	mov	r4, r1
	if (esb_state != ESB_STATE_IDLE) {
    80cc:	f003 05ff 	and.w	r5, r3, #255	; 0xff
    80d0:	b993      	cbnz	r3, 80f8 <esb_set_prefixes+0x34>
		return -EBUSY;
	}
	if (prefixes == NULL) {
    80d2:	b1a0      	cbz	r0, 80fe <esb_set_prefixes+0x3a>
		return -EINVAL;
	}
	if (!(num_pipes <= CONFIG_ESB_PIPE_COUNT)) {
    80d4:	2908      	cmp	r1, #8
    80d6:	d812      	bhi.n	80fe <esb_set_prefixes+0x3a>
		return -EINVAL;
	}

	memcpy(esb_addr.pipe_prefixes, prefixes, num_pipes);
    80d8:	460a      	mov	r2, r1
    80da:	4601      	mov	r1, r0
    80dc:	480a      	ldr	r0, [pc, #40]	; (8108 <esb_set_prefixes+0x44>)
    80de:	f004 fd15 	bl	cb0c <memcpy>

	esb_addr.num_pipes = num_pipes;
    80e2:	4a0a      	ldr	r2, [pc, #40]	; (810c <esb_set_prefixes+0x48>)
	esb_addr.rx_pipes_enabled = BIT_MASK_UINT_8(num_pipes);
    80e4:	23ff      	movs	r3, #255	; 0xff
	esb_addr.num_pipes = num_pipes;
    80e6:	7414      	strb	r4, [r2, #16]
	esb_addr.rx_pipes_enabled = BIT_MASK_UINT_8(num_pipes);
    80e8:	f1c4 0408 	rsb	r4, r4, #8
    80ec:	4123      	asrs	r3, r4
    80ee:	7493      	strb	r3, [r2, #18]
	if ((update_mask & ADDR_UPDATE_MASK_PREFIX) != 0) {
    80f0:	f7ff f964 	bl	73bc <update_radio_addresses.part.0>

	update_radio_addresses(ADDR_UPDATE_MASK_PREFIX);

	return 0;
    80f4:	4628      	mov	r0, r5
}
    80f6:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    80f8:	f06f 000f 	mvn.w	r0, #15
    80fc:	e7fb      	b.n	80f6 <esb_set_prefixes+0x32>
		return -EINVAL;
    80fe:	f06f 0015 	mvn.w	r0, #21
    8102:	e7f8      	b.n	80f6 <esb_set_prefixes+0x32>
    8104:	20001ef7 	.word	0x20001ef7
    8108:	20000078 	.word	0x20000078
    810c:	20000070 	.word	0x20000070

00008110 <esb_ppi_for_fem_set>:
{
	uint32_t egu_event = nrf_egu_event_address_get(ESB_EGU, ESB_EGU_EVENT);
	uint32_t timer_task = nrf_timer_task_address_get(ESB_NRF_TIMER_INSTANCE,
							 NRF_TIMER_TASK_START);

	nrf_ppi_channel_endpoint_setup(NRF_PPI, egu_timer_start, egu_event, timer_task);
    8110:	4b09      	ldr	r3, [pc, #36]	; (8138 <esb_ppi_for_fem_set+0x28>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    8112:	490a      	ldr	r1, [pc, #40]	; (813c <esb_ppi_for_fem_set+0x2c>)
    8114:	781a      	ldrb	r2, [r3, #0]
    8116:	00d3      	lsls	r3, r2, #3
    8118:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    811c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    8120:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    8124:	4906      	ldr	r1, [pc, #24]	; (8140 <esb_ppi_for_fem_set+0x30>)
    8126:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
    p_reg->CHENSET = PPI_CHENSET_CH0_Set << ((uint32_t) channel);
    812a:	2301      	movs	r3, #1
    812c:	4093      	lsls	r3, r2
    812e:	4a05      	ldr	r2, [pc, #20]	; (8144 <esb_ppi_for_fem_set+0x34>)
    8130:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
	nrf_ppi_channel_enable(NRF_PPI, egu_timer_start);
}
    8134:	4770      	bx	lr
    8136:	bf00      	nop
    8138:	20001efb 	.word	0x20001efb
    813c:	40014118 	.word	0x40014118
    8140:	4000a000 	.word	0x4000a000
    8144:	4001f000 	.word	0x4001f000

00008148 <esb_ppi_for_fem_clear>:

void esb_ppi_for_fem_clear(void)
{
	nrf_ppi_channel_disable(NRF_PPI, egu_timer_start);
    8148:	4b08      	ldr	r3, [pc, #32]	; (816c <esb_ppi_for_fem_clear+0x24>)
    p_reg->CHENCLR = PPI_CHENCLR_CH0_Clear << ((uint32_t) channel);
    814a:	4909      	ldr	r1, [pc, #36]	; (8170 <esb_ppi_for_fem_clear+0x28>)
    814c:	781b      	ldrb	r3, [r3, #0]
    814e:	2201      	movs	r2, #1
    8150:	409a      	lsls	r2, r3
    8152:	00db      	lsls	r3, r3, #3
    8154:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8158:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    815c:	f8c1 2508 	str.w	r2, [r1, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
    8160:	2200      	movs	r2, #0
    8162:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    8166:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_ppi_channel_endpoint_setup(NRF_PPI, egu_timer_start, 0, 0);
}
    816a:	4770      	bx	lr
    816c:	20001efb 	.word	0x20001efb
    8170:	4001f000 	.word	0x4001f000

00008174 <esb_ppi_for_txrx_set>:

void esb_ppi_for_txrx_set(bool rx, bool timer_start)
{
    8174:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t channels_mask;
	uint32_t egu_event = nrf_egu_event_address_get(ESB_EGU, ESB_EGU_EVENT);
	uint32_t egu_task = nrf_egu_task_address_get(ESB_EGU, ESB_EGU_TASK);
	uint32_t group_disable_task =
			nrf_ppi_task_group_disable_address_get(NRF_PPI, ramp_up_ppi_group);
    8176:	4b2b      	ldr	r3, [pc, #172]	; (8224 <esb_ppi_for_txrx_set+0xb0>)
}

NRF_STATIC_INLINE uint32_t nrf_ppi_task_group_disable_address_get(NRF_PPI_Type const *    p_reg,
                                                                  nrf_ppi_channel_group_t group)
{
    return (uint32_t) &p_reg->TASKS_CHG[(uint32_t) group].DIS;
    8178:	4c2b      	ldr	r4, [pc, #172]	; (8228 <esb_ppi_for_txrx_set+0xb4>)
    817a:	781b      	ldrb	r3, [r3, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
    817c:	4f2b      	ldr	r7, [pc, #172]	; (822c <esb_ppi_for_txrx_set+0xb8>)
    return (uint32_t) &p_reg->TASKS_CHG[(uint32_t) group].DIS;
    817e:	00da      	lsls	r2, r3, #3
    8180:	4414      	add	r4, r2
}

NRF_STATIC_INLINE void nrf_egu_event_clear(NRF_EGU_Type * p_reg, nrf_egu_event_t egu_event)
{
    NRFX_ASSERT(p_reg);
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)egu_event)) = 0x0UL;
    8182:	4a2b      	ldr	r2, [pc, #172]	; (8230 <esb_ppi_for_txrx_set+0xbc>)
    8184:	2500      	movs	r5, #0
    8186:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
    818a:	f8d2 2118 	ldr.w	r2, [r2, #280]	; 0x118
						NRF_RADIO_EVENT_DISABLED);
	uint32_t timer_task = nrf_timer_task_address_get(ESB_NRF_TIMER_INSTANCE,
							 NRF_TIMER_TASK_START);

	nrf_egu_event_clear(ESB_EGU, ESB_EGU_EVENT);
	nrf_ppi_channel_and_fork_endpoint_setup(NRF_PPI, egu_ramp_up, egu_event, radio_en_task,
    818e:	4a29      	ldr	r2, [pc, #164]	; (8234 <esb_ppi_for_txrx_set+0xc0>)
    8190:	7815      	ldrb	r5, [r2, #0]
	uint32_t radio_en_task = nrf_radio_task_address_get(NRF_RADIO,
    8192:	0080      	lsls	r0, r0, #2
    8194:	00ea      	lsls	r2, r5, #3
    return ((uint32_t)p_reg + (uint32_t)task);
    8196:	b2c0      	uxtb	r0, r0
    8198:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    819c:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    81a0:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    81a4:	f500 5080 	add.w	r0, r0, #4096	; 0x1000
    p_reg->CH[(uint32_t) channel].EEP = eep;
    81a8:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    81ac:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
    p_reg->FORK[(uint32_t) channel].TEP = fork_tep;
    81b0:	4a21      	ldr	r2, [pc, #132]	; (8238 <esb_ppi_for_txrx_set+0xc4>)
    81b2:	f505 7011 	add.w	r0, r5, #580	; 0x244
    81b6:	f842 4020 	str.w	r4, [r2, r0, lsl #2]
						group_disable_task);
	nrf_ppi_channel_endpoint_setup(NRF_PPI, disabled_egu, radio_disabled_event, egu_task);
    81ba:	4a20      	ldr	r2, [pc, #128]	; (823c <esb_ppi_for_txrx_set+0xc8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
    81bc:	4820      	ldr	r0, [pc, #128]	; (8240 <esb_ppi_for_txrx_set+0xcc>)
    81be:	7816      	ldrb	r6, [r2, #0]
    81c0:	00f2      	lsls	r2, r6, #3
    81c2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    81c6:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000

	channels_mask = BIT(egu_ramp_up) | BIT(disabled_egu);
    81ca:	2401      	movs	r4, #1
    81cc:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    81d0:	f500 3097 	add.w	r0, r0, #77312	; 0x12e00
    81d4:	f500 7084 	add.w	r0, r0, #264	; 0x108
    81d8:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
    81dc:	fa04 f606 	lsl.w	r6, r4, r6
    81e0:	fa04 f005 	lsl.w	r0, r4, r5
    81e4:	4330      	orrs	r0, r6

	if (timer_start) {
    81e6:	b169      	cbz	r1, 8204 <esb_ppi_for_txrx_set+0x90>
		nrf_ppi_channel_endpoint_setup(NRF_PPI, egu_timer_start, egu_event, timer_task);
    81e8:	4a16      	ldr	r2, [pc, #88]	; (8244 <esb_ppi_for_txrx_set+0xd0>)
    81ea:	4e17      	ldr	r6, [pc, #92]	; (8248 <esb_ppi_for_txrx_set+0xd4>)
    81ec:	7811      	ldrb	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
    81ee:	00ca      	lsls	r2, r1, #3
    81f0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    81f4:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
		channels_mask |= BIT(egu_timer_start);
    81f8:	408c      	lsls	r4, r1
    81fa:	f8c2 7510 	str.w	r7, [r2, #1296]	; 0x510
    81fe:	4320      	orrs	r0, r4
    p_reg->CH[(uint32_t) channel].TEP = tep;
    8200:	f8c2 6514 	str.w	r6, [r2, #1300]	; 0x514
    p_reg->CHG[(uint32_t) channel_group] |= (PPI_CHG_CH0_Included << ((uint32_t) channel));
    8204:	009b      	lsls	r3, r3, #2
    8206:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    820a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    820e:	2201      	movs	r2, #1
    8210:	f8d3 1800 	ldr.w	r1, [r3, #2048]	; 0x800
    8214:	40aa      	lsls	r2, r5
    8216:	430a      	orrs	r2, r1
    8218:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
    p_reg->CHENSET = mask;
    821c:	4b06      	ldr	r3, [pc, #24]	; (8238 <esb_ppi_for_txrx_set+0xc4>)
    821e:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	}

	nrf_ppi_channel_include_in_group(NRF_PPI, egu_ramp_up, ramp_up_ppi_group);
	nrf_ppi_channels_enable(NRF_PPI, channels_mask);
}
    8222:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8224:	20001ef9 	.word	0x20001ef9
    8228:	4001f004 	.word	0x4001f004
    822c:	40014118 	.word	0x40014118
    8230:	40014000 	.word	0x40014000
    8234:	20001efc 	.word	0x20001efc
    8238:	4001f000 	.word	0x4001f000
    823c:	20001efa 	.word	0x20001efa
    8240:	40001110 	.word	0x40001110
    8244:	20001efb 	.word	0x20001efb
    8248:	4000a000 	.word	0x4000a000

0000824c <esb_ppi_for_txrx_clear>:

void esb_ppi_for_txrx_clear(bool rx, bool timer_start)
{
    824c:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t channels_mask = (BIT(egu_ramp_up) | BIT(disabled_egu));
    824e:	4b29      	ldr	r3, [pc, #164]	; (82f4 <esb_ppi_for_txrx_clear+0xa8>)
    8250:	4e29      	ldr	r6, [pc, #164]	; (82f8 <esb_ppi_for_txrx_clear+0xac>)
    8252:	7818      	ldrb	r0, [r3, #0]
    8254:	4b29      	ldr	r3, [pc, #164]	; (82fc <esb_ppi_for_txrx_clear+0xb0>)
    8256:	781a      	ldrb	r2, [r3, #0]
    8258:	2401      	movs	r4, #1
    825a:	fa04 f302 	lsl.w	r3, r4, r2
    825e:	fa04 f500 	lsl.w	r5, r4, r0
    8262:	431d      	orrs	r5, r3

	ARG_UNUSED(rx);

	if (timer_start) {
    8264:	f500 7711 	add.w	r7, r0, #580	; 0x244
    8268:	00c3      	lsls	r3, r0, #3
    826a:	ea4f 0cc2 	mov.w	ip, r2, lsl #3
    826e:	bb19      	cbnz	r1, 82b8 <esb_ppi_for_txrx_clear+0x6c>
    p_reg->CHENCLR = mask;
    8270:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8274:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    8278:	f8c6 5508 	str.w	r5, [r6, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
    827c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    8280:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
    p_reg->FORK[(uint32_t) channel].TEP = fork_tep;
    8284:	f846 1027 	str.w	r1, [r6, r7, lsl #2]
    p_reg->CH[(uint32_t) channel].EEP = eep;
    8288:	f10c 4380 	add.w	r3, ip, #1073741824	; 0x40000000
    828c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    8290:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    8294:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514

	if (timer_start) {
		nrf_ppi_channel_endpoint_setup(NRF_PPI, egu_timer_start, 0, 0);
	}

	nrf_ppi_channel_remove_from_group(NRF_PPI, egu_ramp_up, ramp_up_ppi_group);
    8298:	4b19      	ldr	r3, [pc, #100]	; (8300 <esb_ppi_for_txrx_clear+0xb4>)
    p_reg->CHG[(uint32_t) channel_group] &= ~(PPI_CHG_CH0_Included << ((uint32_t) channel));
    829a:	781b      	ldrb	r3, [r3, #0]
    829c:	009b      	lsls	r3, r3, #2
    829e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    82a2:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    82a6:	2101      	movs	r1, #1
    82a8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	; 0x800
    82ac:	4081      	lsls	r1, r0
    82ae:	ea22 0201 	bic.w	r2, r2, r1
    82b2:	f8c3 2800 	str.w	r2, [r3, #2048]	; 0x800
}
    82b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		channels_mask |= BIT(egu_timer_start);
    82b8:	4a12      	ldr	r2, [pc, #72]	; (8304 <esb_ppi_for_txrx_clear+0xb8>)
    82ba:	7812      	ldrb	r2, [r2, #0]
    82bc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    82c0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    82c4:	4094      	lsls	r4, r2
    p_reg->CH[(uint32_t) channel].EEP = eep;
    82c6:	2100      	movs	r1, #0
    82c8:	432c      	orrs	r4, r5
    p_reg->CHENCLR = mask;
    82ca:	f8c6 4508 	str.w	r4, [r6, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
    82ce:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    82d2:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
    p_reg->FORK[(uint32_t) channel].TEP = fork_tep;
    82d6:	f10c 4380 	add.w	r3, ip, #1073741824	; 0x40000000
    82da:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    82de:	f846 1027 	str.w	r1, [r6, r7, lsl #2]
    p_reg->CH[(uint32_t) channel].EEP = eep;
    82e2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    82e6:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
    p_reg->CH[(uint32_t) channel].EEP = eep;
    82ea:	00d3      	lsls	r3, r2, #3
    82ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    82f0:	e7cc      	b.n	828c <esb_ppi_for_txrx_clear+0x40>
    82f2:	bf00      	nop
    82f4:	20001efc 	.word	0x20001efc
    82f8:	4001f000 	.word	0x4001f000
    82fc:	20001efa 	.word	0x20001efa
    8300:	20001ef9 	.word	0x20001ef9
    8304:	20001efb 	.word	0x20001efb

00008308 <esb_ppi_for_retransmission_set>:
    8308:	4b15      	ldr	r3, [pc, #84]	; (8360 <esb_ppi_for_retransmission_set+0x58>)
    830a:	4916      	ldr	r1, [pc, #88]	; (8364 <esb_ppi_for_retransmission_set+0x5c>)
    830c:	4816      	ldr	r0, [pc, #88]	; (8368 <esb_ppi_for_retransmission_set+0x60>)
    830e:	2200      	movs	r2, #0
    8310:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    8314:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118

	uint32_t egu_task = nrf_egu_task_address_get(ESB_EGU, ESB_EGU_TASK);
	uint32_t radio_disabled_event = nrf_radio_event_address_get(NRF_RADIO,
						NRF_RADIO_EVENT_DISABLED);
	nrf_egu_event_clear(ESB_EGU, ESB_EGU_EVENT);
	nrf_ppi_channel_endpoint_setup(NRF_PPI, disabled_egu, radio_disabled_event, egu_task);
    8318:	4b14      	ldr	r3, [pc, #80]	; (836c <esb_ppi_for_retransmission_set+0x64>)
    831a:	781b      	ldrb	r3, [r3, #0]
    831c:	00da      	lsls	r2, r3, #3
    831e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    8322:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    8326:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    832a:	f501 3197 	add.w	r1, r1, #77312	; 0x12e00
    832e:	f501 7184 	add.w	r1, r1, #264	; 0x108
    8332:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514

	nrf_ppi_channel_endpoint_setup(NRF_PPI, timer_compare1_radio_txen,
    8336:	4a0e      	ldr	r2, [pc, #56]	; (8370 <esb_ppi_for_retransmission_set+0x68>)
    8338:	7811      	ldrb	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
    833a:	00ca      	lsls	r2, r1, #3
    833c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    8340:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    8344:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    8348:	480a      	ldr	r0, [pc, #40]	; (8374 <esb_ppi_for_retransmission_set+0x6c>)
    834a:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
		nrf_timer_event_address_get(ESB_NRF_TIMER_INSTANCE, NRF_TIMER_EVENT_COMPARE1),
		nrf_radio_task_address_get(NRF_RADIO, NRF_RADIO_TASK_TXEN));

	channels_mask = BIT(disabled_egu) | BIT(timer_compare1_radio_txen);
    834e:	2201      	movs	r2, #1
    8350:	fa02 f303 	lsl.w	r3, r2, r3
    8354:	408a      	lsls	r2, r1
    8356:	4313      	orrs	r3, r2
    p_reg->CHENSET = mask;
    8358:	4a07      	ldr	r2, [pc, #28]	; (8378 <esb_ppi_for_retransmission_set+0x70>)
    835a:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	nrf_ppi_channels_enable(NRF_PPI, channels_mask);
}
    835e:	4770      	bx	lr
    8360:	40014000 	.word	0x40014000
    8364:	40001110 	.word	0x40001110
    8368:	4000a144 	.word	0x4000a144
    836c:	20001efa 	.word	0x20001efa
    8370:	20001efd 	.word	0x20001efd
    8374:	40001000 	.word	0x40001000
    8378:	4001f000 	.word	0x4001f000

0000837c <esb_ppi_for_retransmission_clear>:

void esb_ppi_for_retransmission_clear(void)
{
	uint32_t channels_mask;

	channels_mask = (BIT(disabled_egu) |
    837c:	4b0f      	ldr	r3, [pc, #60]	; (83bc <esb_ppi_for_retransmission_clear+0x40>)
    837e:	781a      	ldrb	r2, [r3, #0]
			 BIT(timer_compare1_radio_txen));
    8380:	4b0f      	ldr	r3, [pc, #60]	; (83c0 <esb_ppi_for_retransmission_clear+0x44>)
    8382:	781b      	ldrb	r3, [r3, #0]
	channels_mask = (BIT(disabled_egu) |
    8384:	2101      	movs	r1, #1
    8386:	fa01 f002 	lsl.w	r0, r1, r2
			 BIT(timer_compare1_radio_txen));
    838a:	4099      	lsls	r1, r3
    838c:	00d2      	lsls	r2, r2, #3
    838e:	00db      	lsls	r3, r3, #3
	channels_mask = (BIT(disabled_egu) |
    8390:	4301      	orrs	r1, r0
    p_reg->CHENCLR = mask;
    8392:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    8396:	480b      	ldr	r0, [pc, #44]	; (83c4 <esb_ppi_for_retransmission_clear+0x48>)
    8398:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    839c:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    83a0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    83a4:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
    83a8:	2100      	movs	r1, #0
    83aa:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    83ae:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    p_reg->CH[(uint32_t) channel].EEP = eep;
    83b2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    83b6:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514

	nrf_ppi_channels_disable(NRF_PPI, channels_mask);

	nrf_ppi_channel_endpoint_setup(NRF_PPI, disabled_egu, 0, 0);
	nrf_ppi_channel_endpoint_setup(NRF_PPI, timer_compare1_radio_txen, 0, 0);
}
    83ba:	4770      	bx	lr
    83bc:	20001efa 	.word	0x20001efa
    83c0:	20001efd 	.word	0x20001efd
    83c4:	4001f000 	.word	0x4001f000

000083c8 <esb_ppi_for_wait_for_ack_set>:

void esb_ppi_for_wait_for_ack_set(void)
{
	uint32_t ppi_channels_mask;

	nrf_ppi_channel_endpoint_setup(NRF_PPI, radio_address_timer_stop,
    83c8:	4b13      	ldr	r3, [pc, #76]	; (8418 <esb_ppi_for_wait_for_ack_set+0x50>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
    83ca:	4914      	ldr	r1, [pc, #80]	; (841c <esb_ppi_for_wait_for_ack_set+0x54>)
    83cc:	781b      	ldrb	r3, [r3, #0]
    83ce:	4814      	ldr	r0, [pc, #80]	; (8420 <esb_ppi_for_wait_for_ack_set+0x58>)
    83d0:	00da      	lsls	r2, r3, #3
    83d2:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    83d6:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    83da:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    83de:	f501 410f 	add.w	r1, r1, #36608	; 0x8f00
    83e2:	310c      	adds	r1, #12
    83e4:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
		nrf_radio_event_address_get(NRF_RADIO, NRF_RADIO_EVENT_ADDRESS),
		nrf_timer_task_address_get(ESB_NRF_TIMER_INSTANCE, NRF_TIMER_TASK_SHUTDOWN));

	nrf_ppi_channel_endpoint_setup(NRF_PPI, timer_compare0_radio_disable,
    83e8:	4a0e      	ldr	r2, [pc, #56]	; (8424 <esb_ppi_for_wait_for_ack_set+0x5c>)
    83ea:	7811      	ldrb	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
    83ec:	00ca      	lsls	r2, r1, #3
    83ee:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    83f2:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    83f6:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    83fa:	f5a0 4011 	sub.w	r0, r0, #37120	; 0x9100
    83fe:	3830      	subs	r0, #48	; 0x30
    8400:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
		nrf_timer_event_address_get(ESB_NRF_TIMER_INSTANCE, NRF_TIMER_EVENT_COMPARE0),
		nrf_radio_task_address_get(NRF_RADIO, NRF_RADIO_TASK_DISABLE));

	ppi_channels_mask = (BIT(radio_address_timer_stop) |
    8404:	2201      	movs	r2, #1
    8406:	fa02 f303 	lsl.w	r3, r2, r3
			     BIT(timer_compare0_radio_disable));
    840a:	408a      	lsls	r2, r1
	ppi_channels_mask = (BIT(radio_address_timer_stop) |
    840c:	4313      	orrs	r3, r2
    p_reg->CHENSET = mask;
    840e:	4a06      	ldr	r2, [pc, #24]	; (8428 <esb_ppi_for_wait_for_ack_set+0x60>)
    8410:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504

	nrf_ppi_channels_enable(NRF_PPI, ppi_channels_mask);
}
    8414:	4770      	bx	lr
    8416:	bf00      	nop
    8418:	20001eff 	.word	0x20001eff
    841c:	40001104 	.word	0x40001104
    8420:	4000a140 	.word	0x4000a140
    8424:	20001efe 	.word	0x20001efe
    8428:	4001f000 	.word	0x4001f000

0000842c <esb_ppi_for_wait_for_ack_clear>:

void esb_ppi_for_wait_for_ack_clear(void)
{
	uint32_t ppi_channels_mask;

	ppi_channels_mask = (BIT(radio_address_timer_stop) |
    842c:	4b0f      	ldr	r3, [pc, #60]	; (846c <esb_ppi_for_wait_for_ack_clear+0x40>)
    842e:	781a      	ldrb	r2, [r3, #0]
			     BIT(timer_compare0_radio_disable));
    8430:	4b0f      	ldr	r3, [pc, #60]	; (8470 <esb_ppi_for_wait_for_ack_clear+0x44>)
    8432:	781b      	ldrb	r3, [r3, #0]
	ppi_channels_mask = (BIT(radio_address_timer_stop) |
    8434:	2101      	movs	r1, #1
    8436:	fa01 f002 	lsl.w	r0, r1, r2
			     BIT(timer_compare0_radio_disable));
    843a:	4099      	lsls	r1, r3
    843c:	00d2      	lsls	r2, r2, #3
    843e:	00db      	lsls	r3, r3, #3
	ppi_channels_mask = (BIT(radio_address_timer_stop) |
    8440:	4301      	orrs	r1, r0
    p_reg->CHENCLR = mask;
    8442:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    8446:	480b      	ldr	r0, [pc, #44]	; (8474 <esb_ppi_for_wait_for_ack_clear+0x48>)
    8448:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    844c:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
    8450:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    8454:	f8c0 1508 	str.w	r1, [r0, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
    8458:	2100      	movs	r1, #0
    845a:	f8c2 1510 	str.w	r1, [r2, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    845e:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    p_reg->CH[(uint32_t) channel].EEP = eep;
    8462:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    8466:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514

	nrf_ppi_channels_disable(NRF_PPI, ppi_channels_mask);

	nrf_ppi_channel_endpoint_setup(NRF_PPI, radio_address_timer_stop, 0, 0);
	nrf_ppi_channel_endpoint_setup(NRF_PPI, timer_compare0_radio_disable, 0, 0);
}
    846a:	4770      	bx	lr
    846c:	20001eff 	.word	0x20001eff
    8470:	20001efe 	.word	0x20001efe
    8474:	4001f000 	.word	0x4001f000

00008478 <esb_ppi_init>:

	nrf_ppi_channel_endpoint_setup(NRF_PPI, radio_end_timer_start, 0, 0);
}

int esb_ppi_init(void)
{
    8478:	b5b0      	push	{r4, r5, r7, lr}
	nrfx_err_t err;

	err = nrfx_ppi_channel_alloc(&egu_ramp_up);
    847a:	4829      	ldr	r0, [pc, #164]	; (8520 <esb_ppi_init+0xa8>)
	if (err != NRFX_SUCCESS) {
    847c:	4d29      	ldr	r5, [pc, #164]	; (8524 <esb_ppi_init+0xac>)
{
    847e:	af00      	add	r7, sp, #0
	err = nrfx_ppi_channel_alloc(&egu_ramp_up);
    8480:	f000 fdc2 	bl	9008 <nrfx_ppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    8484:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_alloc(&egu_ramp_up);
    8486:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    8488:	d136      	bne.n	84f8 <esb_ppi_init+0x80>
		goto error;
	}

	err = nrfx_ppi_channel_alloc(&disabled_egu);
    848a:	4827      	ldr	r0, [pc, #156]	; (8528 <esb_ppi_init+0xb0>)
    848c:	f000 fdbc 	bl	9008 <nrfx_ppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    8490:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_alloc(&disabled_egu);
    8492:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    8494:	d130      	bne.n	84f8 <esb_ppi_init+0x80>
		goto error;
	}

	err = nrfx_ppi_channel_alloc(&egu_timer_start);
    8496:	4825      	ldr	r0, [pc, #148]	; (852c <esb_ppi_init+0xb4>)
    8498:	f000 fdb6 	bl	9008 <nrfx_ppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    849c:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_alloc(&egu_timer_start);
    849e:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    84a0:	d12a      	bne.n	84f8 <esb_ppi_init+0x80>
		goto error;
	}

	err = nrfx_ppi_channel_alloc(&radio_address_timer_stop);
    84a2:	4823      	ldr	r0, [pc, #140]	; (8530 <esb_ppi_init+0xb8>)
    84a4:	f000 fdb0 	bl	9008 <nrfx_ppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    84a8:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_alloc(&radio_address_timer_stop);
    84aa:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    84ac:	d124      	bne.n	84f8 <esb_ppi_init+0x80>
		goto error;
	}

	err = nrfx_ppi_channel_alloc(&timer_compare0_radio_disable);
    84ae:	4821      	ldr	r0, [pc, #132]	; (8534 <esb_ppi_init+0xbc>)
    84b0:	f000 fdaa 	bl	9008 <nrfx_ppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    84b4:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_alloc(&timer_compare0_radio_disable);
    84b6:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    84b8:	d11e      	bne.n	84f8 <esb_ppi_init+0x80>
		goto error;
	}

	err = nrfx_ppi_channel_alloc(&timer_compare1_radio_txen);
    84ba:	481f      	ldr	r0, [pc, #124]	; (8538 <esb_ppi_init+0xc0>)
    84bc:	f000 fda4 	bl	9008 <nrfx_ppi_channel_alloc>
	if (err != NRFX_SUCCESS) {
    84c0:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_alloc(&timer_compare1_radio_txen);
    84c2:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    84c4:	d118      	bne.n	84f8 <esb_ppi_init+0x80>
		if (err != NRFX_SUCCESS) {
			goto error;
		}
	}

	err = nrfx_ppi_group_alloc(&ramp_up_ppi_group);
    84c6:	481d      	ldr	r0, [pc, #116]	; (853c <esb_ppi_init+0xc4>)
    84c8:	f000 fdb8 	bl	903c <nrfx_ppi_group_alloc>
	if (err != NRFX_SUCCESS) {
    84cc:	42a0      	cmp	r0, r4
    84ce:	d024      	beq.n	851a <esb_ppi_init+0xa2>
		LOG_ERR("gppi_group_alloc failed with: %d\n", err);
    84d0:	466c      	mov	r4, sp
    84d2:	b088      	sub	sp, #32
    84d4:	466a      	mov	r2, sp
    84d6:	4b1a      	ldr	r3, [pc, #104]	; (8540 <esb_ppi_init+0xc8>)
    84d8:	e9c2 3005 	strd	r3, r0, [r2, #20]
    84dc:	2303      	movs	r3, #3
    84de:	f842 3f10 	str.w	r3, [r2, #16]!
    84e2:	4818      	ldr	r0, [pc, #96]	; (8544 <esb_ppi_init+0xcc>)
    84e4:	2300      	movs	r3, #0
    84e6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    84ea:	f7fa fdc9 	bl	3080 <z_impl_z_log_msg_static_create>
    84ee:	46a5      	mov	sp, r4
		return -ENODEV;
    84f0:	f06f 0012 	mvn.w	r0, #18
	return 0;

error:
	LOG_ERR("gppi_channel_alloc failed with: %d\n", err);
	return -ENODEV;
}
    84f4:	46bd      	mov	sp, r7
    84f6:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_ERR("gppi_channel_alloc failed with: %d\n", err);
    84f8:	466d      	mov	r5, sp
    84fa:	b088      	sub	sp, #32
    84fc:	466a      	mov	r2, sp
    84fe:	4b12      	ldr	r3, [pc, #72]	; (8548 <esb_ppi_init+0xd0>)
    8500:	e9c2 3405 	strd	r3, r4, [r2, #20]
    8504:	2303      	movs	r3, #3
    8506:	f842 3f10 	str.w	r3, [r2, #16]!
    850a:	480e      	ldr	r0, [pc, #56]	; (8544 <esb_ppi_init+0xcc>)
    850c:	2300      	movs	r3, #0
    850e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    8512:	f7fa fdb5 	bl	3080 <z_impl_z_log_msg_static_create>
    8516:	46ad      	mov	sp, r5
	return -ENODEV;
    8518:	e7ea      	b.n	84f0 <esb_ppi_init+0x78>
	return 0;
    851a:	2000      	movs	r0, #0
    851c:	e7ea      	b.n	84f4 <esb_ppi_init+0x7c>
    851e:	bf00      	nop
    8520:	20001efc 	.word	0x20001efc
    8524:	0bad0000 	.word	0x0bad0000
    8528:	20001efa 	.word	0x20001efa
    852c:	20001efb 	.word	0x20001efb
    8530:	20001eff 	.word	0x20001eff
    8534:	20001efe 	.word	0x20001efe
    8538:	20001efd 	.word	0x20001efd
    853c:	20001ef9 	.word	0x20001ef9
    8540:	0001039f 	.word	0x0001039f
    8544:	0000db8c 	.word	0x0000db8c
    8548:	000103c1 	.word	0x000103c1

0000854c <esb_ppi_radio_disabled_get>:

uint32_t esb_ppi_radio_disabled_get(void)
{
	return nrf_radio_event_address_get(NRF_RADIO, NRF_RADIO_EVENT_DISABLED);
}
    854c:	4800      	ldr	r0, [pc, #0]	; (8550 <esb_ppi_radio_disabled_get+0x4>)
    854e:	4770      	bx	lr
    8550:	40001110 	.word	0x40001110

00008554 <esb_ppi_disable_all>:

void esb_ppi_disable_all(void)
{
	uint32_t channels_mask = (BIT(egu_ramp_up) |
    8554:	4b0e      	ldr	r3, [pc, #56]	; (8590 <esb_ppi_disable_all+0x3c>)
				  BIT(disabled_egu) |
				  BIT(egu_timer_start) |
				  BIT(radio_address_timer_stop) |
				  BIT(timer_compare0_radio_disable) |
    8556:	490f      	ldr	r1, [pc, #60]	; (8594 <esb_ppi_disable_all+0x40>)
	uint32_t channels_mask = (BIT(egu_ramp_up) |
    8558:	781b      	ldrb	r3, [r3, #0]
				  BIT(timer_compare0_radio_disable) |
    855a:	7809      	ldrb	r1, [r1, #0]
	uint32_t channels_mask = (BIT(egu_ramp_up) |
    855c:	2201      	movs	r2, #1
				  BIT(timer_compare0_radio_disable) |
    855e:	fa02 f101 	lsl.w	r1, r2, r1
	uint32_t channels_mask = (BIT(egu_ramp_up) |
    8562:	fa02 f303 	lsl.w	r3, r2, r3
				  BIT(radio_address_timer_stop) |
    8566:	430b      	orrs	r3, r1
				  BIT(disabled_egu) |
    8568:	490b      	ldr	r1, [pc, #44]	; (8598 <esb_ppi_disable_all+0x44>)
    856a:	7809      	ldrb	r1, [r1, #0]
    856c:	fa02 f101 	lsl.w	r1, r2, r1
				  BIT(radio_address_timer_stop) |
    8570:	430b      	orrs	r3, r1
				  BIT(egu_timer_start) |
    8572:	490a      	ldr	r1, [pc, #40]	; (859c <esb_ppi_disable_all+0x48>)
    8574:	7809      	ldrb	r1, [r1, #0]
    8576:	fa02 f101 	lsl.w	r1, r2, r1
				  BIT(radio_address_timer_stop) |
    857a:	430b      	orrs	r3, r1
    857c:	4908      	ldr	r1, [pc, #32]	; (85a0 <esb_ppi_disable_all+0x4c>)
    857e:	7809      	ldrb	r1, [r1, #0]
    8580:	408a      	lsls	r2, r1
    8582:	4313      	orrs	r3, r2
    p_reg->CHENCLR = mask;
    8584:	4a07      	ldr	r2, [pc, #28]	; (85a4 <esb_ppi_disable_all+0x50>)
	uint32_t channels_mask = (BIT(egu_ramp_up) |
    8586:	f043 0301 	orr.w	r3, r3, #1
    858a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
				  BIT(radio_end_timer_start) |
				  (IS_ENABLED(CONFIG_ESB_NEVER_DISABLE_TX) ?
					BIT(timer_compare1_radio_txen) : 0));

	nrf_ppi_channels_disable(NRF_PPI, channels_mask);
}
    858e:	4770      	bx	lr
    8590:	20001efc 	.word	0x20001efc
    8594:	20001efe 	.word	0x20001efe
    8598:	20001efa 	.word	0x20001efa
    859c:	20001efb 	.word	0x20001efb
    85a0:	20001eff 	.word	0x20001eff
    85a4:	4001f000 	.word	0x4001f000

000085a8 <esb_ppi_deinit>:

void esb_ppi_deinit(void)
{
    85a8:	b538      	push	{r3, r4, r5, lr}
	nrfx_err_t err;

	err = nrfx_ppi_channel_free(egu_ramp_up);
    85aa:	4b18      	ldr	r3, [pc, #96]	; (860c <esb_ppi_deinit+0x64>)
    85ac:	7818      	ldrb	r0, [r3, #0]
    85ae:	f000 fd31 	bl	9014 <nrfx_ppi_channel_free>
	if (err != NRFX_SUCCESS) {
    85b2:	4b17      	ldr	r3, [pc, #92]	; (8610 <esb_ppi_deinit+0x68>)
    85b4:	4298      	cmp	r0, r3
	err = nrfx_ppi_channel_free(egu_ramp_up);
    85b6:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    85b8:	d127      	bne.n	860a <esb_ppi_deinit+0x62>
		goto error;
	}

	err = nrfx_ppi_channel_free(disabled_egu);
    85ba:	4b16      	ldr	r3, [pc, #88]	; (8614 <esb_ppi_deinit+0x6c>)
    85bc:	7818      	ldrb	r0, [r3, #0]
    85be:	f000 fd29 	bl	9014 <nrfx_ppi_channel_free>
	if (err != NRFX_SUCCESS) {
    85c2:	42a0      	cmp	r0, r4
	err = nrfx_ppi_channel_free(disabled_egu);
    85c4:	4605      	mov	r5, r0
	if (err != NRFX_SUCCESS) {
    85c6:	d120      	bne.n	860a <esb_ppi_deinit+0x62>
		goto error;
	}

	err = nrfx_ppi_channel_free(egu_timer_start);
    85c8:	4b13      	ldr	r3, [pc, #76]	; (8618 <esb_ppi_deinit+0x70>)
    85ca:	7818      	ldrb	r0, [r3, #0]
    85cc:	f000 fd22 	bl	9014 <nrfx_ppi_channel_free>
	if (err != NRFX_SUCCESS) {
    85d0:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_free(egu_timer_start);
    85d2:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    85d4:	d119      	bne.n	860a <esb_ppi_deinit+0x62>
		goto error;
	}

	err = nrfx_ppi_channel_free(radio_address_timer_stop);
    85d6:	4b11      	ldr	r3, [pc, #68]	; (861c <esb_ppi_deinit+0x74>)
    85d8:	7818      	ldrb	r0, [r3, #0]
    85da:	f000 fd1b 	bl	9014 <nrfx_ppi_channel_free>
	if (err != NRFX_SUCCESS) {
    85de:	42a0      	cmp	r0, r4
	err = nrfx_ppi_channel_free(radio_address_timer_stop);
    85e0:	4605      	mov	r5, r0
	if (err != NRFX_SUCCESS) {
    85e2:	d112      	bne.n	860a <esb_ppi_deinit+0x62>
		goto error;
	}

	err = nrfx_ppi_channel_free(timer_compare0_radio_disable);
    85e4:	4b0e      	ldr	r3, [pc, #56]	; (8620 <esb_ppi_deinit+0x78>)
    85e6:	7818      	ldrb	r0, [r3, #0]
    85e8:	f000 fd14 	bl	9014 <nrfx_ppi_channel_free>
	if (err != NRFX_SUCCESS) {
    85ec:	42a8      	cmp	r0, r5
	err = nrfx_ppi_channel_free(timer_compare0_radio_disable);
    85ee:	4604      	mov	r4, r0
	if (err != NRFX_SUCCESS) {
    85f0:	d10b      	bne.n	860a <esb_ppi_deinit+0x62>
		goto error;
	}

	err = nrfx_ppi_channel_free(timer_compare1_radio_txen);
    85f2:	4b0c      	ldr	r3, [pc, #48]	; (8624 <esb_ppi_deinit+0x7c>)
    85f4:	7818      	ldrb	r0, [r3, #0]
    85f6:	f000 fd0d 	bl	9014 <nrfx_ppi_channel_free>
	if (err != NRFX_SUCCESS) {
    85fa:	42a0      	cmp	r0, r4
    85fc:	d105      	bne.n	860a <esb_ppi_deinit+0x62>
		if (err != NRFX_SUCCESS) {
			goto error;
		}
	}

	err = nrfx_ppi_group_free(ramp_up_ppi_group);
    85fe:	4b0a      	ldr	r3, [pc, #40]	; (8628 <esb_ppi_deinit+0x80>)
    8600:	7818      	ldrb	r0, [r3, #0]
	return;

/* Should not happen. */
error:
	__ASSERT(false, "Failed to free PPI resources");
}
    8602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	err = nrfx_ppi_group_free(ramp_up_ppi_group);
    8606:	f000 bd1f 	b.w	9048 <nrfx_ppi_group_free>
}
    860a:	bd38      	pop	{r3, r4, r5, pc}
    860c:	20001efc 	.word	0x20001efc
    8610:	0bad0000 	.word	0x0bad0000
    8614:	20001efa 	.word	0x20001efa
    8618:	20001efb 	.word	0x20001efb
    861c:	20001eff 	.word	0x20001eff
    8620:	20001efe 	.word	0x20001efe
    8624:	20001efd 	.word	0x20001efd
    8628:	20001ef9 	.word	0x20001ef9

0000862c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    862c:	4a02      	ldr	r2, [pc, #8]	; (8638 <nvmc_wait+0xc>)
    862e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    8632:	2b00      	cmp	r3, #0
    8634:	d0fb      	beq.n	862e <nvmc_wait+0x2>
}
    8636:	4770      	bx	lr
    8638:	4001e000 	.word	0x4001e000

0000863c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_DEFAULT;
}

void SystemInit(void)
{
    863c:	b510      	push	{r4, lr}
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    863e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)
            if (var1 == 0x10)
    8642:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    8646:	2a10      	cmp	r2, #16
    8648:	d155      	bne.n	86f6 <SystemInit+0xba>

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
            NRF_CLOCK->EVENTS_DONE = 0;
    864a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    864e:	2200      	movs	r2, #0
    8650:	f8c1 210c 	str.w	r2, [r1, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    8654:	f8c1 2110 	str.w	r2, [r1, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    8658:	f8c1 2538 	str.w	r2, [r1, #1336]	; 0x538

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    865c:	4a48      	ldr	r2, [pc, #288]	; (8780 <SystemInit+0x144>)
    865e:	f8d3 0404 	ldr.w	r0, [r3, #1028]	; 0x404
    8662:	f8c2 0520 	str.w	r0, [r2, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    8666:	f8d3 0408 	ldr.w	r0, [r3, #1032]	; 0x408
    866a:	f8c2 0524 	str.w	r0, [r2, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    866e:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    8672:	f8c2 0528 	str.w	r0, [r2, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    8676:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
    867a:	f8c2 052c 	str.w	r0, [r2, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    867e:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
    8682:	f8c2 0530 	str.w	r0, [r2, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    8686:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
    868a:	f8c2 0534 	str.w	r0, [r2, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    868e:	f8d3 041c 	ldr.w	r0, [r3, #1052]	; 0x41c
    8692:	f8c2 0540 	str.w	r0, [r2, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    8696:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
    869a:	f8c2 0544 	str.w	r0, [r2, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    869e:	f8d3 0424 	ldr.w	r0, [r3, #1060]	; 0x424
    86a2:	f8c2 0548 	str.w	r0, [r2, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    86a6:	f8d3 0428 	ldr.w	r0, [r3, #1064]	; 0x428
    86aa:	f8c2 054c 	str.w	r0, [r2, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    86ae:	f8d3 042c 	ldr.w	r0, [r3, #1068]	; 0x42c
    86b2:	f8c2 0550 	str.w	r0, [r2, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    86b6:	f8d3 0430 	ldr.w	r0, [r3, #1072]	; 0x430
    86ba:	f8c2 0554 	str.w	r0, [r2, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    86be:	f8d3 0434 	ldr.w	r0, [r3, #1076]	; 0x434
    86c2:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    86c6:	f8d3 0438 	ldr.w	r0, [r3, #1080]	; 0x438
    86ca:	f8c2 0564 	str.w	r0, [r2, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    86ce:	f8d3 043c 	ldr.w	r0, [r3, #1084]	; 0x43c
    86d2:	f8c2 0568 	str.w	r0, [r2, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    86d6:	f8d3 0440 	ldr.w	r0, [r3, #1088]	; 0x440
    86da:	f8c2 056c 	str.w	r0, [r2, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    86de:	f8d3 3444 	ldr.w	r3, [r3, #1092]	; 0x444
    86e2:	f8c2 3570 	str.w	r3, [r2, #1392]	; 0x570

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    86e6:	f8d1 3400 	ldr.w	r3, [r1, #1024]	; 0x400
    86ea:	07db      	lsls	r3, r3, #31
    86ec:	d509      	bpl.n	8702 <SystemInit+0xc6>
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    86ee:	f06f 0301 	mvn.w	r3, #1
    86f2:	f8c1 3400 	str.w	r3, [r1, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    86f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)
            if (var1 == 0x10)
    86fa:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    86fe:	2b10      	cmp	r3, #16
    8700:	d110      	bne.n	8724 <SystemInit+0xe8>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    8702:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    8706:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    870a:	2b03      	cmp	r3, #3
    870c:	d802      	bhi.n	8714 <SystemInit+0xd8>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    870e:	4a1d      	ldr	r2, [pc, #116]	; (8784 <SystemInit+0x148>)
    8710:	5cd3      	ldrb	r3, [r2, r3]
    8712:	b13b      	cbz	r3, 8724 <SystemInit+0xe8>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    8714:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8718:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    871c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8720:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    8724:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    8728:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    872c:	2a00      	cmp	r2, #0
    872e:	db03      	blt.n	8738 <SystemInit+0xfc>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    8730:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    8734:	2b00      	cmp	r3, #0
    8736:	da22      	bge.n	877e <SystemInit+0x142>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    8738:	4913      	ldr	r1, [pc, #76]	; (8788 <SystemInit+0x14c>)
    873a:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    873c:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    8740:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    8744:	2412      	movs	r4, #18
    nvmc_wait();
    8746:	f7ff ff71 	bl	862c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    874a:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    874e:	f7ff ff6d 	bl	862c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    8752:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    8756:	f7ff ff69 	bl	862c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    875a:	2300      	movs	r3, #0
    875c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    8760:	f7ff ff64 	bl	862c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    8764:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    8768:	4908      	ldr	r1, [pc, #32]	; (878c <SystemInit+0x150>)
    876a:	4b09      	ldr	r3, [pc, #36]	; (8790 <SystemInit+0x154>)
    876c:	68ca      	ldr	r2, [r1, #12]
    876e:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8772:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    8774:	60cb      	str	r3, [r1, #12]
    8776:	f3bf 8f4f 	dsb	sy
    __NOP();
    877a:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    877c:	e7fd      	b.n	877a <SystemInit+0x13e>
            nvmc_wait();
            nvmc_config(NVMC_CONFIG_WEN_Ren);
            NVIC_SystemReset();
        }
    #endif
}
    877e:	bd10      	pop	{r4, pc}
    8780:	4000c000 	.word	0x4000c000
    8784:	000103e5 	.word	0x000103e5
    8788:	4001e000 	.word	0x4001e000
    878c:	e000ed00 	.word	0xe000ed00
    8790:	05fa0004 	.word	0x05fa0004

00008794 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    8794:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    8796:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    8798:	6802      	ldr	r2, [r0, #0]
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    879a:	f3bf 8f5b 	dmb	ish
        idx = 31 - NRF_CLZ(prev_mask);
    879e:	fab2 f382 	clz	r3, r2
    87a2:	f1c3 031f 	rsb	r3, r3, #31
    87a6:	b2db      	uxtb	r3, r3
        new_mask = prev_mask & ~NRFX_BIT(idx);
    87a8:	fa05 f403 	lsl.w	r4, r5, r3
    87ac:	ea22 0404 	bic.w	r4, r2, r4
    87b0:	e850 6f00 	ldrex	r6, [r0]
    87b4:	4296      	cmp	r6, r2
    87b6:	d104      	bne.n	87c2 <nrfx_flag32_alloc+0x2e>
    87b8:	e840 4c00 	strex	ip, r4, [r0]
    87bc:	f1bc 0f00 	cmp.w	ip, #0
    87c0:	d1f6      	bne.n	87b0 <nrfx_flag32_alloc+0x1c>
    87c2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    87c6:	d1e7      	bne.n	8798 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
}
    87c8:	4801      	ldr	r0, [pc, #4]	; (87d0 <nrfx_flag32_alloc+0x3c>)
    *p_flag = idx;
    87ca:	700b      	strb	r3, [r1, #0]
}
    87cc:	bd70      	pop	{r4, r5, r6, pc}
    87ce:	bf00      	nop
    87d0:	0bad0000 	.word	0x0bad0000

000087d4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    87d4:	b510      	push	{r4, lr}
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    87d6:	6803      	ldr	r3, [r0, #0]
    87d8:	40cb      	lsrs	r3, r1
    87da:	07db      	lsls	r3, r3, #31
    87dc:	d414      	bmi.n	8808 <nrfx_flag32_free+0x34>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    87de:	2301      	movs	r3, #1
    87e0:	408b      	lsls	r3, r1
        prev_mask = *p_mask;
    87e2:	6802      	ldr	r2, [r0, #0]
    87e4:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    87e8:	ea43 0102 	orr.w	r1, r3, r2
    87ec:	e850 4f00 	ldrex	r4, [r0]
    87f0:	4294      	cmp	r4, r2
    87f2:	d104      	bne.n	87fe <nrfx_flag32_free+0x2a>
    87f4:	e840 1c00 	strex	ip, r1, [r0]
    87f8:	f1bc 0f00 	cmp.w	ip, #0
    87fc:	d1f6      	bne.n	87ec <nrfx_flag32_free+0x18>
    87fe:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    8802:	d1ee      	bne.n	87e2 <nrfx_flag32_free+0xe>

    return NRFX_SUCCESS;
    8804:	4801      	ldr	r0, [pc, #4]	; (880c <nrfx_flag32_free+0x38>)
}
    8806:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    8808:	4801      	ldr	r0, [pc, #4]	; (8810 <nrfx_flag32_free+0x3c>)
    880a:	e7fc      	b.n	8806 <nrfx_flag32_free+0x32>
    880c:	0bad0000 	.word	0x0bad0000
    8810:	0bad0004 	.word	0x0bad0004

00008814 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    8814:	4b04      	ldr	r3, [pc, #16]	; (8828 <nrfx_clock_init+0x14>)
    8816:	791a      	ldrb	r2, [r3, #4]
    8818:	b922      	cbnz	r2, 8824 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    881a:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    881c:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    881e:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    8820:	4802      	ldr	r0, [pc, #8]	; (882c <nrfx_clock_init+0x18>)
    8822:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    8824:	4802      	ldr	r0, [pc, #8]	; (8830 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    8826:	4770      	bx	lr
    8828:	2000189c 	.word	0x2000189c
    882c:	0bad0000 	.word	0x0bad0000
    8830:	0bad000c 	.word	0x0bad000c

00008834 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    8834:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    8836:	2000      	movs	r0, #0
    8838:	f7fc f86e 	bl	4918 <arch_irq_is_enabled>
    883c:	b908      	cbnz	r0, 8842 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    883e:	f7fc f849 	bl	48d4 <arch_irq_enable>
#pragma GCC diagnostic pop
#endif

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    8842:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8846:	2202      	movs	r2, #2
    8848:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    884c:	4b01      	ldr	r3, [pc, #4]	; (8854 <nrfx_clock_enable+0x20>)
    884e:	2201      	movs	r2, #1
    8850:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    8852:	bd08      	pop	{r3, pc}
    8854:	20001f00 	.word	0x20001f00

00008858 <nrfx_clock_irq_handler>:
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    8858:	b510      	push	{r4, lr}
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    885a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    885e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    8862:	b152      	cbz	r2, 887a <nrfx_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8864:	2000      	movs	r0, #0
    8866:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    886a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    886e:	2201      	movs	r2, #1
    8870:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    8874:	4b0b      	ldr	r3, [pc, #44]	; (88a4 <nrfx_clock_irq_handler+0x4c>)
    8876:	681b      	ldr	r3, [r3, #0]
    8878:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    887a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    887e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    8882:	b16a      	cbz	r2, 88a0 <nrfx_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    8884:	2200      	movs	r2, #0
    8886:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    888a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENCLR = mask;
    888e:	2202      	movs	r2, #2
    8890:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    8894:	4b03      	ldr	r3, [pc, #12]	; (88a4 <nrfx_clock_irq_handler+0x4c>)
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    8896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    889a:	681b      	ldr	r3, [r3, #0]
    889c:	2001      	movs	r0, #1
    889e:	4718      	bx	r3
}
    88a0:	bd10      	pop	{r4, pc}
    88a2:	bf00      	nop
    88a4:	2000189c 	.word	0x2000189c

000088a8 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    88a8:	4b03      	ldr	r3, [pc, #12]	; (88b8 <pin_in_use_by_te+0x10>)
    88aa:	3008      	adds	r0, #8
    88ac:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    88b0:	f3c0 1040 	ubfx	r0, r0, #5, #1
    88b4:	4770      	bx	lr
    88b6:	bf00      	nop
    88b8:	2000008c 	.word	0x2000008c

000088bc <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    88bc:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    88be:	f100 0308 	add.w	r3, r0, #8
    88c2:	4c0c      	ldr	r4, [pc, #48]	; (88f4 <call_handler+0x38>)
    88c4:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    88c8:	05da      	lsls	r2, r3, #23
{
    88ca:	4605      	mov	r5, r0
    88cc:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    88ce:	d507      	bpl.n	88e0 <call_handler+0x24>
    88d0:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    88d4:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    88d8:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    88dc:	6852      	ldr	r2, [r2, #4]
    88de:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    88e0:	68a3      	ldr	r3, [r4, #8]
    88e2:	b12b      	cbz	r3, 88f0 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    88e4:	68e2      	ldr	r2, [r4, #12]
    88e6:	4631      	mov	r1, r6
    88e8:	4628      	mov	r0, r5
    }
}
    88ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    88ee:	4718      	bx	r3
}
    88f0:	bd70      	pop	{r4, r5, r6, pc}
    88f2:	bf00      	nop
    88f4:	2000008c 	.word	0x2000008c

000088f8 <release_handler>:
{
    88f8:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    88fa:	4a12      	ldr	r2, [pc, #72]	; (8944 <release_handler+0x4c>)
    88fc:	3008      	adds	r0, #8
    88fe:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    8902:	05d9      	lsls	r1, r3, #23
    8904:	d51b      	bpl.n	893e <release_handler+0x46>
    8906:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    890a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    890e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    8912:	f102 040e 	add.w	r4, r2, #14
    8916:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    8918:	f834 3f02 	ldrh.w	r3, [r4, #2]!
    891c:	f413 7f80 	tst.w	r3, #256	; 0x100
    8920:	d003      	beq.n	892a <release_handler+0x32>
    8922:	f3c3 2343 	ubfx	r3, r3, #9, #4
    8926:	4299      	cmp	r1, r3
    8928:	d009      	beq.n	893e <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    892a:	3001      	adds	r0, #1
    892c:	2820      	cmp	r0, #32
    892e:	d1f3      	bne.n	8918 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    8930:	2300      	movs	r3, #0
    8932:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    8936:	4804      	ldr	r0, [pc, #16]	; (8948 <release_handler+0x50>)
}
    8938:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    893a:	f7ff bf4b 	b.w	87d4 <nrfx_flag32_free>
}
    893e:	bc10      	pop	{r4}
    8940:	4770      	bx	lr
    8942:	bf00      	nop
    8944:	2000008c 	.word	0x2000008c
    8948:	200000e0 	.word	0x200000e0

0000894c <pin_handler_trigger_uninit>:
{
    894c:	b538      	push	{r3, r4, r5, lr}
    894e:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    8950:	f7ff ffaa 	bl	88a8 <pin_in_use_by_te>
    8954:	4c09      	ldr	r4, [pc, #36]	; (897c <pin_handler_trigger_uninit+0x30>)
    8956:	f102 0508 	add.w	r5, r2, #8
    895a:	b140      	cbz	r0, 896e <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    895c:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    8960:	4907      	ldr	r1, [pc, #28]	; (8980 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    8962:	0b5b      	lsrs	r3, r3, #13
    8964:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    8968:	2000      	movs	r0, #0
    896a:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    896e:	4610      	mov	r0, r2
    8970:	f7ff ffc2 	bl	88f8 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    8974:	2300      	movs	r3, #0
    8976:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    897a:	bd38      	pop	{r3, r4, r5, pc}
    897c:	2000008c 	.word	0x2000008c
    8980:	40006000 	.word	0x40006000

00008984 <nrfx_gpiote_input_configure>:
{
    8984:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8988:	4604      	mov	r4, r0
    898a:	461d      	mov	r5, r3
    if (p_input_config)
    898c:	b309      	cbz	r1, 89d2 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    898e:	4f4f      	ldr	r7, [pc, #316]	; (8acc <nrfx_gpiote_input_configure+0x148>)
    8990:	f100 0808 	add.w	r8, r0, #8
    8994:	f837 6018 	ldrh.w	r6, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    8998:	07b3      	lsls	r3, r6, #30
    899a:	d506      	bpl.n	89aa <nrfx_gpiote_input_configure+0x26>
    899c:	f7ff ff84 	bl	88a8 <pin_in_use_by_te>
    89a0:	b118      	cbz	r0, 89aa <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    89a2:	484b      	ldr	r0, [pc, #300]	; (8ad0 <nrfx_gpiote_input_configure+0x14c>)
}
    89a4:	b002      	add	sp, #8
    89a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    89aa:	f004 031f 	and.w	r3, r4, #31
    89ae:	009b      	lsls	r3, r3, #2
    89b0:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    89b4:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    89b6:	f8d3 0700 	ldr.w	r0, [r3, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    89ba:	f026 0602 	bic.w	r6, r6, #2
    cnf &= ~to_update;
    89be:	f020 000f 	bic.w	r0, r0, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    89c2:	f046 0601 	orr.w	r6, r6, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    89c6:	ea40 0181 	orr.w	r1, r0, r1, lsl #2
    89ca:	f827 6018 	strh.w	r6, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    89ce:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
    if (p_trigger_config)
    89d2:	b19a      	cbz	r2, 89fc <nrfx_gpiote_input_configure+0x78>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    89d4:	4b3d      	ldr	r3, [pc, #244]	; (8acc <nrfx_gpiote_input_configure+0x148>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    89d6:	7817      	ldrb	r7, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    89d8:	6850      	ldr	r0, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    89da:	f104 0608 	add.w	r6, r4, #8
    89de:	f833 1016 	ldrh.w	r1, [r3, r6, lsl #1]
        if (pin_is_output(pin))
    89e2:	f011 0f02 	tst.w	r1, #2
    89e6:	d00d      	beq.n	8a04 <nrfx_gpiote_input_configure+0x80>
            if (use_evt)
    89e8:	2800      	cmp	r0, #0
    89ea:	d1da      	bne.n	89a2 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    89ec:	f833 2016 	ldrh.w	r2, [r3, r6, lsl #1]
    89f0:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    89f4:	ea42 0287 	orr.w	r2, r2, r7, lsl #2
    89f8:	f823 2016 	strh.w	r2, [r3, r6, lsl #1]
    if (p_handler_config)
    89fc:	2d00      	cmp	r5, #0
    89fe:	d13b      	bne.n	8a78 <nrfx_gpiote_input_configure+0xf4>
        err = NRFX_SUCCESS;
    8a00:	4834      	ldr	r0, [pc, #208]	; (8ad4 <nrfx_gpiote_input_configure+0x150>)
    8a02:	e7cf      	b.n	89a4 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    8a04:	f021 0120 	bic.w	r1, r1, #32
    8a08:	04c9      	lsls	r1, r1, #19
    8a0a:	0cc9      	lsrs	r1, r1, #19
    8a0c:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
            if (use_evt)
    8a10:	2800      	cmp	r0, #0
    8a12:	d0eb      	beq.n	89ec <nrfx_gpiote_input_configure+0x68>
                if (!edge)
    8a14:	2f03      	cmp	r7, #3
    8a16:	d8c4      	bhi.n	89a2 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    8a18:	6852      	ldr	r2, [r2, #4]
    8a1a:	f892 c000 	ldrb.w	ip, [r2]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    8a1e:	b92f      	cbnz	r7, 8a2c <nrfx_gpiote_input_configure+0xa8>
    8a20:	4a2d      	ldr	r2, [pc, #180]	; (8ad8 <nrfx_gpiote_input_configure+0x154>)
    8a22:	f50c 7ca2 	add.w	ip, ip, #324	; 0x144
    8a26:	f842 702c 	str.w	r7, [r2, ip, lsl #2]
#if defined(NRF53_SERIES) || defined(NRF91_SERIES)
    p_reg->CONFIG[idx] = 0;
#endif
}
    8a2a:	e7df      	b.n	89ec <nrfx_gpiote_input_configure+0x68>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    8a2c:	ea4f 028c 	mov.w	r2, ip, lsl #2
    8a30:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    8a34:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    8a38:	ea41 314c 	orr.w	r1, r1, ip, lsl #13
    8a3c:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    8a40:	f020 0003 	bic.w	r0, r0, #3
    8a44:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    8a48:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    8a4c:	f420 3047 	bic.w	r0, r0, #203776	; 0x31c00
    8a50:	f420 7040 	bic.w	r0, r0, #768	; 0x300
    8a54:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8a58:	0220      	lsls	r0, r4, #8
    8a5a:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    8a5e:	f400 50f8 	and.w	r0, r0, #7936	; 0x1f00
    8a62:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
    8a66:	ea40 000e 	orr.w	r0, r0, lr
    8a6a:	f041 0120 	orr.w	r1, r1, #32
    8a6e:	f823 1016 	strh.w	r1, [r3, r6, lsl #1]
    8a72:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
    8a76:	e7b9      	b.n	89ec <nrfx_gpiote_input_configure+0x68>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    8a78:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    8a7c:	4620      	mov	r0, r4
    8a7e:	f7ff ff3b 	bl	88f8 <release_handler>
    if (!handler)
    8a82:	2e00      	cmp	r6, #0
    8a84:	d0bc      	beq.n	8a00 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    8a86:	4d11      	ldr	r5, [pc, #68]	; (8acc <nrfx_gpiote_input_configure+0x148>)
    8a88:	e9d5 2300 	ldrd	r2, r3, [r5]
    8a8c:	4296      	cmp	r6, r2
    8a8e:	d101      	bne.n	8a94 <nrfx_gpiote_input_configure+0x110>
    8a90:	429f      	cmp	r7, r3
    8a92:	d019      	beq.n	8ac8 <nrfx_gpiote_input_configure+0x144>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    8a94:	4811      	ldr	r0, [pc, #68]	; (8adc <nrfx_gpiote_input_configure+0x158>)
    8a96:	f10d 0107 	add.w	r1, sp, #7
    8a9a:	f7ff fe7b 	bl	8794 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    8a9e:	4b0d      	ldr	r3, [pc, #52]	; (8ad4 <nrfx_gpiote_input_configure+0x150>)
    8aa0:	4298      	cmp	r0, r3
    8aa2:	f47f af7f 	bne.w	89a4 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    8aa6:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    8aaa:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    8aae:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    8ab2:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    8ab4:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    8ab6:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    8aba:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    8abe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    8ac2:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    return NRFX_SUCCESS;
    8ac6:	e79b      	b.n	8a00 <nrfx_gpiote_input_configure+0x7c>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    8ac8:	2200      	movs	r2, #0
    8aca:	e7ee      	b.n	8aaa <nrfx_gpiote_input_configure+0x126>
    8acc:	2000008c 	.word	0x2000008c
    8ad0:	0bad0004 	.word	0x0bad0004
    8ad4:	0bad0000 	.word	0x0bad0000
    8ad8:	40006000 	.word	0x40006000
    8adc:	200000e0 	.word	0x200000e0

00008ae0 <nrfx_gpiote_output_configure>:
{
    8ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8ae2:	4604      	mov	r4, r0
    if (p_config)
    8ae4:	b389      	cbz	r1, 8b4a <nrfx_gpiote_output_configure+0x6a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8ae6:	4e3a      	ldr	r6, [pc, #232]	; (8bd0 <nrfx_gpiote_output_configure+0xf0>)
    8ae8:	f100 0708 	add.w	r7, r0, #8
    8aec:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    8af0:	07ab      	lsls	r3, r5, #30
    8af2:	d404      	bmi.n	8afe <nrfx_gpiote_output_configure+0x1e>
    8af4:	f7ff fed8 	bl	88a8 <pin_in_use_by_te>
    8af8:	b108      	cbz	r0, 8afe <nrfx_gpiote_output_configure+0x1e>
{
    8afa:	4836      	ldr	r0, [pc, #216]	; (8bd4 <nrfx_gpiote_output_configure+0xf4>)
}
    8afc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    8afe:	f015 0f1c 	tst.w	r5, #28
    8b02:	784b      	ldrb	r3, [r1, #1]
    8b04:	d124      	bne.n	8b50 <nrfx_gpiote_output_configure+0x70>
    *p_pin = pin_number & 0x1F;
    8b06:	f004 001f 	and.w	r0, r4, #31
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8b0a:	f500 7ee0 	add.w	lr, r0, #448	; 0x1c0
    8b0e:	f04f 4ca0 	mov.w	ip, #1342177280	; 0x50000000
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    8b12:	005b      	lsls	r3, r3, #1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    8b14:	f85c c02e 	ldr.w	ip, [ip, lr, lsl #2]
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    8b18:	f891 e002 	ldrb.w	lr, [r1, #2]
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    8b1c:	7809      	ldrb	r1, [r1, #0]
    cnf &= ~to_update;
    8b1e:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    8b22:	ea43 038e 	orr.w	r3, r3, lr, lsl #2
    8b26:	f02c 0c07 	bic.w	ip, ip, #7
    8b2a:	ea43 030c 	orr.w	r3, r3, ip
    8b2e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    reg->PIN_CNF[pin_number] = cnf;
    8b32:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    8b36:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    8b3a:	f043 0301 	orr.w	r3, r3, #1
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    8b3e:	f045 0503 	orr.w	r5, r5, #3
    reg->PIN_CNF[pin_number] = cnf;
    8b42:	f841 3020 	str.w	r3, [r1, r0, lsl #2]
    8b46:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    if (p_task_config)
    8b4a:	b922      	cbnz	r2, 8b56 <nrfx_gpiote_output_configure+0x76>
    return NRFX_SUCCESS;
    8b4c:	4822      	ldr	r0, [pc, #136]	; (8bd8 <nrfx_gpiote_output_configure+0xf8>)
    8b4e:	e7d5      	b.n	8afc <nrfx_gpiote_output_configure+0x1c>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    8b50:	2b01      	cmp	r3, #1
    8b52:	d1d8      	bne.n	8b06 <nrfx_gpiote_output_configure+0x26>
    8b54:	e7d1      	b.n	8afa <nrfx_gpiote_output_configure+0x1a>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8b56:	4e1e      	ldr	r6, [pc, #120]	; (8bd0 <nrfx_gpiote_output_configure+0xf0>)
    8b58:	f104 0708 	add.w	r7, r4, #8
    8b5c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    8b60:	0783      	lsls	r3, r0, #30
    8b62:	d5ca      	bpl.n	8afa <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    8b64:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    8b68:	4661      	mov	r1, ip
    8b6a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    8b6c:	f020 0020 	bic.w	r0, r0, #32
    8b70:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    8b74:	04c0      	lsls	r0, r0, #19
    8b76:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    8b7a:	0cc0      	lsrs	r0, r0, #19
    8b7c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    8b80:	2300      	movs	r3, #0
    8b82:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    8b86:	7855      	ldrb	r5, [r2, #1]
    8b88:	2d00      	cmp	r5, #0
    8b8a:	d0df      	beq.n	8b4c <nrfx_gpiote_output_configure+0x6c>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    8b8c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
                                      p_task_config->init_val);
    8b90:	7892      	ldrb	r2, [r2, #2]
    8b92:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    8b96:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    8b9a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8b9e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    8ba2:	0223      	lsls	r3, r4, #8
    8ba4:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    8ba8:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8baa:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    8bae:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    8bb2:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8bb4:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    8bb6:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    8bba:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    8bbe:	4313      	orrs	r3, r2
    8bc0:	f040 0020 	orr.w	r0, r0, #32
    8bc4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    8bc8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    8bcc:	e7be      	b.n	8b4c <nrfx_gpiote_output_configure+0x6c>
    8bce:	bf00      	nop
    8bd0:	2000008c 	.word	0x2000008c
    8bd4:	0bad0004 	.word	0x0bad0004
    8bd8:	0bad0000 	.word	0x0bad0000

00008bdc <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    8bdc:	4b01      	ldr	r3, [pc, #4]	; (8be4 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    8bde:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    8be2:	4770      	bx	lr
    8be4:	2000008c 	.word	0x2000008c

00008be8 <nrfx_gpiote_channel_get>:
{
    8be8:	b508      	push	{r3, lr}
    8bea:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    8bec:	f7ff fe5c 	bl	88a8 <pin_in_use_by_te>
    8bf0:	b138      	cbz	r0, 8c02 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    8bf2:	4b05      	ldr	r3, [pc, #20]	; (8c08 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    8bf4:	4805      	ldr	r0, [pc, #20]	; (8c0c <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    8bf6:	3208      	adds	r2, #8
    8bf8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    8bfc:	0b5b      	lsrs	r3, r3, #13
    8bfe:	700b      	strb	r3, [r1, #0]
}
    8c00:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    8c02:	4803      	ldr	r0, [pc, #12]	; (8c10 <nrfx_gpiote_channel_get+0x28>)
    8c04:	e7fc      	b.n	8c00 <nrfx_gpiote_channel_get+0x18>
    8c06:	bf00      	nop
    8c08:	2000008c 	.word	0x2000008c
    8c0c:	0bad0000 	.word	0x0bad0000
    8c10:	0bad0004 	.word	0x0bad0004

00008c14 <nrfx_gpiote_init>:
{
    8c14:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    8c16:	4c0f      	ldr	r4, [pc, #60]	; (8c54 <nrfx_gpiote_init+0x40>)
    8c18:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    8c1c:	b9bd      	cbnz	r5, 8c4e <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    8c1e:	2240      	movs	r2, #64	; 0x40
    8c20:	4629      	mov	r1, r5
    8c22:	f104 0010 	add.w	r0, r4, #16
    8c26:	f003 ff7c 	bl	cb22 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    8c2a:	2006      	movs	r0, #6
    8c2c:	f7fb fe52 	bl	48d4 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8c30:	4b09      	ldr	r3, [pc, #36]	; (8c58 <nrfx_gpiote_init+0x44>)
    return err_code;
    8c32:	480a      	ldr	r0, [pc, #40]	; (8c5c <nrfx_gpiote_init+0x48>)
    8c34:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    8c38:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    8c3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    8c40:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    8c44:	2301      	movs	r3, #1
    8c46:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    8c4a:	6563      	str	r3, [r4, #84]	; 0x54
}
    8c4c:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    8c4e:	4804      	ldr	r0, [pc, #16]	; (8c60 <nrfx_gpiote_init+0x4c>)
    8c50:	e7fc      	b.n	8c4c <nrfx_gpiote_init+0x38>
    8c52:	bf00      	nop
    8c54:	2000008c 	.word	0x2000008c
    8c58:	40006000 	.word	0x40006000
    8c5c:	0bad0000 	.word	0x0bad0000
    8c60:	0bad0005 	.word	0x0bad0005

00008c64 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    8c64:	4b03      	ldr	r3, [pc, #12]	; (8c74 <nrfx_gpiote_is_init+0x10>)
    8c66:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    8c6a:	3800      	subs	r0, #0
    8c6c:	bf18      	it	ne
    8c6e:	2001      	movne	r0, #1
    8c70:	4770      	bx	lr
    8c72:	bf00      	nop
    8c74:	2000008c 	.word	0x2000008c

00008c78 <nrfx_gpiote_channel_free>:
{
    8c78:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    8c7a:	4801      	ldr	r0, [pc, #4]	; (8c80 <nrfx_gpiote_channel_free+0x8>)
    8c7c:	f7ff bdaa 	b.w	87d4 <nrfx_flag32_free>
    8c80:	200000dc 	.word	0x200000dc

00008c84 <nrfx_gpiote_channel_alloc>:
{
    8c84:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    8c86:	4801      	ldr	r0, [pc, #4]	; (8c8c <nrfx_gpiote_channel_alloc+0x8>)
    8c88:	f7ff bd84 	b.w	8794 <nrfx_flag32_alloc>
    8c8c:	200000dc 	.word	0x200000dc

00008c90 <nrfx_gpiote_trigger_enable>:
{
    8c90:	b510      	push	{r4, lr}
    8c92:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    8c94:	f7ff fe08 	bl	88a8 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8c98:	f102 0408 	add.w	r4, r2, #8
    8c9c:	4b1c      	ldr	r3, [pc, #112]	; (8d10 <nrfx_gpiote_trigger_enable+0x80>)
    8c9e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    8ca2:	b1e0      	cbz	r0, 8cde <nrfx_gpiote_trigger_enable+0x4e>
    8ca4:	f013 0402 	ands.w	r4, r3, #2
    8ca8:	d119      	bne.n	8cde <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    8caa:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    8cac:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    8cae:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    8cb2:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    8cb6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    8cba:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8cbe:	6004      	str	r4, [r0, #0]
    8cc0:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    8cc2:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    8cc6:	f040 0001 	orr.w	r0, r0, #1
    8cca:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    8cce:	b129      	cbz	r1, 8cdc <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    8cd0:	2201      	movs	r2, #1
    8cd2:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    8cd6:	4a0f      	ldr	r2, [pc, #60]	; (8d14 <nrfx_gpiote_trigger_enable+0x84>)
    8cd8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    8cdc:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    8cde:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    8ce2:	2b04      	cmp	r3, #4
    8ce4:	d010      	beq.n	8d08 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    8ce6:	2b05      	cmp	r3, #5
    8ce8:	d010      	beq.n	8d0c <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    8cea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8cee:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    8cf2:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    8cf6:	40d9      	lsrs	r1, r3
    8cf8:	f001 0101 	and.w	r1, r1, #1
    8cfc:	3102      	adds	r1, #2
}
    8cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    8d02:	4610      	mov	r0, r2
    8d04:	f004 b9cf 	b.w	d0a6 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    8d08:	2103      	movs	r1, #3
    8d0a:	e7f8      	b.n	8cfe <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    8d0c:	2102      	movs	r1, #2
    8d0e:	e7f6      	b.n	8cfe <nrfx_gpiote_trigger_enable+0x6e>
    8d10:	2000008c 	.word	0x2000008c
    8d14:	40006000 	.word	0x40006000

00008d18 <nrfx_gpiote_trigger_disable>:
{
    8d18:	b508      	push	{r3, lr}
    8d1a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    8d1c:	f7ff fdc4 	bl	88a8 <pin_in_use_by_te>
    8d20:	b1c0      	cbz	r0, 8d54 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    8d22:	f102 0108 	add.w	r1, r2, #8
    8d26:	4b0e      	ldr	r3, [pc, #56]	; (8d60 <nrfx_gpiote_trigger_disable+0x48>)
    8d28:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    8d2c:	0799      	lsls	r1, r3, #30
    8d2e:	d411      	bmi.n	8d54 <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    8d30:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    8d32:	2201      	movs	r2, #1
    8d34:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    8d36:	009b      	lsls	r3, r3, #2
    8d38:	490a      	ldr	r1, [pc, #40]	; (8d64 <nrfx_gpiote_trigger_disable+0x4c>)
    8d3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8d3e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    8d42:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    8d46:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    8d4a:	f022 0203 	bic.w	r2, r2, #3
    8d4e:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    8d52:	bd08      	pop	{r3, pc}
    8d54:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    8d58:	2100      	movs	r1, #0
    8d5a:	4610      	mov	r0, r2
    8d5c:	f004 b9a3 	b.w	d0a6 <nrf_gpio_cfg_sense_set>
    8d60:	2000008c 	.word	0x2000008c
    8d64:	40006000 	.word	0x40006000

00008d68 <nrfx_gpiote_pin_uninit>:
{
    8d68:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    8d6a:	4b0d      	ldr	r3, [pc, #52]	; (8da0 <nrfx_gpiote_pin_uninit+0x38>)
    8d6c:	f100 0208 	add.w	r2, r0, #8
{
    8d70:	4604      	mov	r4, r0
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    8d72:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    8d76:	07db      	lsls	r3, r3, #31
    8d78:	d50f      	bpl.n	8d9a <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    8d7a:	f7ff ffcd 	bl	8d18 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    8d7e:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    8d80:	f004 041f 	and.w	r4, r4, #31
    8d84:	f7ff fde2 	bl	894c <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    8d88:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    8d8c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    8d90:	2202      	movs	r2, #2
    8d92:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    8d96:	4803      	ldr	r0, [pc, #12]	; (8da4 <nrfx_gpiote_pin_uninit+0x3c>)
}
    8d98:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    8d9a:	4803      	ldr	r0, [pc, #12]	; (8da8 <nrfx_gpiote_pin_uninit+0x40>)
    8d9c:	e7fc      	b.n	8d98 <nrfx_gpiote_pin_uninit+0x30>
    8d9e:	bf00      	nop
    8da0:	2000008c 	.word	0x2000008c
    8da4:	0bad0000 	.word	0x0bad0000
    8da8:	0bad0004 	.word	0x0bad0004

00008dac <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    8dac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8db0:	4b4f      	ldr	r3, [pc, #316]	; (8ef0 <nrfx_gpiote_irq_handler+0x144>)
    return p_reg->INTENSET & mask;
    8db2:	4850      	ldr	r0, [pc, #320]	; (8ef4 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    8db4:	4950      	ldr	r1, [pc, #320]	; (8ef8 <nrfx_gpiote_irq_handler+0x14c>)
    uint32_t status = 0;
    8db6:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    8db8:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8dba:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8dbc:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    8dbe:	b136      	cbz	r6, 8dce <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    8dc0:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    8dc4:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8dc6:	bf1e      	ittt	ne
    8dc8:	601c      	strne	r4, [r3, #0]
    8dca:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    8dcc:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    8dce:	3304      	adds	r3, #4
    8dd0:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    8dd2:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    8dd6:	d1f1      	bne.n	8dbc <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    8dd8:	4b46      	ldr	r3, [pc, #280]	; (8ef4 <nrfx_gpiote_irq_handler+0x148>)
    8dda:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    8dde:	b1bb      	cbz	r3, 8e10 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    8de0:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    8de4:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    8de8:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    8dea:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    8dee:	af01      	add	r7, sp, #4
    8df0:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    8df4:	9c01      	ldr	r4, [sp, #4]
    8df6:	b98c      	cbnz	r4, 8e1c <nrfx_gpiote_irq_handler+0x70>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    8df8:	4b3e      	ldr	r3, [pc, #248]	; (8ef4 <nrfx_gpiote_irq_handler+0x148>)
    8dfa:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    8dfe:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    8e02:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    8e06:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    8e08:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    8e0c:	2b00      	cmp	r3, #0
    8e0e:	d1ee      	bne.n	8dee <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    8e10:	2401      	movs	r4, #1
    while (mask)
    8e12:	2d00      	cmp	r5, #0
    8e14:	d153      	bne.n	8ebe <nrfx_gpiote_irq_handler+0x112>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    8e16:	b003      	add	sp, #12
    8e18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    8e1c:	fa94 f4a4 	rbit	r4, r4
    8e20:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    8e24:	4a35      	ldr	r2, [pc, #212]	; (8efc <nrfx_gpiote_irq_handler+0x150>)
    8e26:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    8e2a:	08e0      	lsrs	r0, r4, #3
    8e2c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    p_mask8[byte_idx] &= ~(1 << bit);
    8e30:	5c3b      	ldrb	r3, [r7, r0]
    bit = BITMASK_RELBIT_GET(bit);
    8e32:	f004 0207 	and.w	r2, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    8e36:	fa08 f202 	lsl.w	r2, r8, r2
    8e3a:	ea23 0302 	bic.w	r3, r3, r2
    8e3e:	543b      	strb	r3, [r7, r0]
    8e40:	00a3      	lsls	r3, r4, #2
    8e42:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    8e46:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    8e4a:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    8e4e:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    8e50:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    8e52:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    8e56:	d518      	bpl.n	8e8a <nrfx_gpiote_irq_handler+0xde>
        call_handler(pin, trigger);
    8e58:	4659      	mov	r1, fp
    8e5a:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    8e5c:	fa5f fa82 	uxtb.w	sl, r2
    8e60:	f7ff fd2c 	bl	88bc <call_handler>
    8e64:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    8e68:	f3c3 4301 	ubfx	r3, r3, #16, #2
    8e6c:	459a      	cmp	sl, r3
    8e6e:	d107      	bne.n	8e80 <nrfx_gpiote_irq_handler+0xd4>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    8e70:	2100      	movs	r1, #0
    8e72:	4620      	mov	r0, r4
    8e74:	f004 f917 	bl	d0a6 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    8e78:	4651      	mov	r1, sl
    8e7a:	4620      	mov	r0, r4
    8e7c:	f004 f913 	bl	d0a6 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    8e80:	fa08 f404 	lsl.w	r4, r8, r4
    8e84:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    8e88:	e7b4      	b.n	8df4 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    8e8a:	2a02      	cmp	r2, #2
    8e8c:	d10c      	bne.n	8ea8 <nrfx_gpiote_irq_handler+0xfc>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    8e8e:	2103      	movs	r1, #3
    8e90:	4620      	mov	r0, r4
    8e92:	f004 f908 	bl	d0a6 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    8e96:	f00a 0305 	and.w	r3, sl, #5
    8e9a:	2b01      	cmp	r3, #1
    8e9c:	d1f0      	bne.n	8e80 <nrfx_gpiote_irq_handler+0xd4>
            call_handler(pin, trigger);
    8e9e:	4659      	mov	r1, fp
    8ea0:	4620      	mov	r0, r4
    8ea2:	f7ff fd0b 	bl	88bc <call_handler>
    8ea6:	e7eb      	b.n	8e80 <nrfx_gpiote_irq_handler+0xd4>
        nrf_gpio_cfg_sense_set(pin, next_sense);
    8ea8:	2102      	movs	r1, #2
    8eaa:	4620      	mov	r0, r4
    8eac:	f004 f8fb 	bl	d0a6 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    8eb0:	f1ba 0f03 	cmp.w	sl, #3
    8eb4:	d0f3      	beq.n	8e9e <nrfx_gpiote_irq_handler+0xf2>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    8eb6:	2a03      	cmp	r2, #3
    8eb8:	d1e2      	bne.n	8e80 <nrfx_gpiote_irq_handler+0xd4>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    8eba:	458a      	cmp	sl, r1
    8ebc:	e7ee      	b.n	8e9c <nrfx_gpiote_irq_handler+0xf0>
        uint32_t ch = NRF_CTZ(mask);
    8ebe:	fa95 f3a5 	rbit	r3, r5
    8ec2:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    8ec6:	fa04 f203 	lsl.w	r2, r4, r3
    8eca:	009b      	lsls	r3, r3, #2
    8ecc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    8ed0:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    8ed4:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    8ed8:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    8edc:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    8ee0:	f3c0 2004 	ubfx	r0, r0, #8, #5
    8ee4:	f3c1 4101 	ubfx	r1, r1, #16, #2
    8ee8:	f7ff fce8 	bl	88bc <call_handler>
    8eec:	e791      	b.n	8e12 <nrfx_gpiote_irq_handler+0x66>
    8eee:	bf00      	nop
    8ef0:	40006100 	.word	0x40006100
    8ef4:	40006000 	.word	0x40006000
    8ef8:	40006120 	.word	0x40006120
    8efc:	2000008c 	.word	0x2000008c

00008f00 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    8f00:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    8f02:	4c0b      	ldr	r4, [pc, #44]	; (8f30 <nrfx_power_init+0x30>)
{
    8f04:	4603      	mov	r3, r0
    if (m_initialized)
    8f06:	7820      	ldrb	r0, [r4, #0]
    8f08:	b978      	cbnz	r0, 8f2a <nrfx_power_init+0x2a>
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
    8f0a:	781b      	ldrb	r3, [r3, #0]
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    8f0c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    8f10:	f003 0301 	and.w	r3, r3, #1
    8f14:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    8f18:	f7fb fcfe 	bl	4918 <arch_irq_is_enabled>
    8f1c:	b908      	cbnz	r0, 8f22 <nrfx_power_init+0x22>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    8f1e:	f7fb fcd9 	bl	48d4 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    8f22:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    8f24:	4803      	ldr	r0, [pc, #12]	; (8f34 <nrfx_power_init+0x34>)
    m_initialized = true;
    8f26:	7023      	strb	r3, [r4, #0]
}
    8f28:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    8f2a:	4803      	ldr	r0, [pc, #12]	; (8f38 <nrfx_power_init+0x38>)
    8f2c:	e7fc      	b.n	8f28 <nrfx_power_init+0x28>
    8f2e:	bf00      	nop
    8f30:	20001f01 	.word	0x20001f01
    8f34:	0bad0000 	.word	0x0bad0000
    8f38:	0bad000c 	.word	0x0bad000c

00008f3c <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    8f3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8f40:	f44f 7260 	mov.w	r2, #896	; 0x380
    8f44:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    8f48:	4b01      	ldr	r3, [pc, #4]	; (8f50 <nrfx_power_usbevt_uninit+0x14>)
    8f4a:	2200      	movs	r2, #0
    8f4c:	601a      	str	r2, [r3, #0]
}
    8f4e:	4770      	bx	lr
    8f50:	200018a4 	.word	0x200018a4

00008f54 <nrfx_power_usbevt_init>:
{
    8f54:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    8f56:	f7ff fff1 	bl	8f3c <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    8f5a:	6803      	ldr	r3, [r0, #0]
    8f5c:	b10b      	cbz	r3, 8f62 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    8f5e:	4a01      	ldr	r2, [pc, #4]	; (8f64 <nrfx_power_usbevt_init+0x10>)
    8f60:	6013      	str	r3, [r2, #0]
}
    8f62:	bd08      	pop	{r3, pc}
    8f64:	200018a4 	.word	0x200018a4

00008f68 <nrfx_power_irq_handler>:

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    8f68:	b510      	push	{r4, lr}
    return p_reg->INTENSET;
    8f6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    8f6e:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    8f72:	0762      	lsls	r2, r4, #29
    8f74:	d507      	bpl.n	8f86 <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    8f76:	f44f 7084 	mov.w	r0, #264	; 0x108
    8f7a:	f004 f8a2 	bl	d0c2 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    8f7e:	b110      	cbz	r0, 8f86 <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    8f80:	4b1e      	ldr	r3, [pc, #120]	; (8ffc <nrfx_power_irq_handler+0x94>)
    8f82:	681b      	ldr	r3, [r3, #0]
    8f84:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    8f86:	06a3      	lsls	r3, r4, #26
    8f88:	d508      	bpl.n	8f9c <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    8f8a:	f44f 708a 	mov.w	r0, #276	; 0x114
    8f8e:	f004 f898 	bl	d0c2 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    8f92:	b118      	cbz	r0, 8f9c <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    8f94:	4b1a      	ldr	r3, [pc, #104]	; (9000 <nrfx_power_irq_handler+0x98>)
    8f96:	2000      	movs	r0, #0
    8f98:	681b      	ldr	r3, [r3, #0]
    8f9a:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    8f9c:	0660      	lsls	r0, r4, #25
    8f9e:	d508      	bpl.n	8fb2 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    8fa0:	f44f 708c 	mov.w	r0, #280	; 0x118
    8fa4:	f004 f88d 	bl	d0c2 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    8fa8:	b118      	cbz	r0, 8fb2 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    8faa:	4b15      	ldr	r3, [pc, #84]	; (9000 <nrfx_power_irq_handler+0x98>)
    8fac:	2001      	movs	r0, #1
    8fae:	681b      	ldr	r3, [r3, #0]
    8fb0:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    8fb2:	0621      	lsls	r1, r4, #24
    8fb4:	d508      	bpl.n	8fc8 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    8fb6:	f44f 708e 	mov.w	r0, #284	; 0x11c
    8fba:	f004 f882 	bl	d0c2 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    8fbe:	b118      	cbz	r0, 8fc8 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    8fc0:	4b10      	ldr	r3, [pc, #64]	; (9004 <nrfx_power_irq_handler+0x9c>)
    8fc2:	2000      	movs	r0, #0
    8fc4:	681b      	ldr	r3, [r3, #0]
    8fc6:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    8fc8:	05e2      	lsls	r2, r4, #23
    8fca:	d508      	bpl.n	8fde <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    8fcc:	f44f 7090 	mov.w	r0, #288	; 0x120
    8fd0:	f004 f877 	bl	d0c2 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    8fd4:	b118      	cbz	r0, 8fde <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    8fd6:	4b0b      	ldr	r3, [pc, #44]	; (9004 <nrfx_power_irq_handler+0x9c>)
    8fd8:	2001      	movs	r0, #1
    8fda:	681b      	ldr	r3, [r3, #0]
    8fdc:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    8fde:	05a3      	lsls	r3, r4, #22
    8fe0:	d50a      	bpl.n	8ff8 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    8fe2:	f44f 7092 	mov.w	r0, #292	; 0x124
    8fe6:	f004 f86c 	bl	d0c2 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    8fea:	b128      	cbz	r0, 8ff8 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    8fec:	4b05      	ldr	r3, [pc, #20]	; (9004 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    8fee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    8ff2:	681b      	ldr	r3, [r3, #0]
    8ff4:	2002      	movs	r0, #2
    8ff6:	4718      	bx	r3
}
    8ff8:	bd10      	pop	{r4, pc}
    8ffa:	bf00      	nop
    8ffc:	200018ac 	.word	0x200018ac
    9000:	200018a8 	.word	0x200018a8
    9004:	200018a4 	.word	0x200018a4

00009008 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    9008:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    900a:	4801      	ldr	r0, [pc, #4]	; (9010 <nrfx_ppi_channel_alloc+0x8>)
    900c:	f7ff bbc2 	b.w	8794 <nrfx_flag32_alloc>
    9010:	200000ec 	.word	0x200000ec

00009014 <nrfx_ppi_channel_free>:
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
    9014:	2301      	movs	r3, #1
    9016:	4083      	lsls	r3, r0
    return ((NRFX_PPI_PROG_APP_CHANNELS_MASK & nrfx_ppi_channel_to_mask(channel)) != 0);
    9018:	f3c3 0213 	ubfx	r2, r3, #0, #20
}


nrfx_err_t nrfx_ppi_channel_free(nrf_ppi_channel_t channel)
{
    901c:	4601      	mov	r1, r0
    if (!is_programmable_app_channel(channel))
    901e:	b12a      	cbz	r2, 902c <nrfx_ppi_channel_free+0x18>
    p_reg->CHENCLR = PPI_CHENCLR_CH0_Clear << ((uint32_t) channel);
    9020:	4a03      	ldr	r2, [pc, #12]	; (9030 <nrfx_ppi_channel_free+0x1c>)
        return NRFX_ERROR_INVALID_PARAM;
    }

    nrf_ppi_channel_disable(NRF_PPI, channel);

    return nrfx_flag32_free(&m_channels_allocated, channel);
    9022:	4804      	ldr	r0, [pc, #16]	; (9034 <nrfx_ppi_channel_free+0x20>)
    9024:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
    9028:	f7ff bbd4 	b.w	87d4 <nrfx_flag32_free>
}
    902c:	4802      	ldr	r0, [pc, #8]	; (9038 <nrfx_ppi_channel_free+0x24>)
    902e:	4770      	bx	lr
    9030:	4001f000 	.word	0x4001f000
    9034:	200000ec 	.word	0x200000ec
    9038:	0bad0004 	.word	0x0bad0004

0000903c <nrfx_ppi_group_alloc>:
    return err_code;
}


nrfx_err_t nrfx_ppi_group_alloc(nrf_ppi_channel_group_t * p_group)
{
    903c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_groups_allocated, (uint8_t *)p_group);
    903e:	4801      	ldr	r0, [pc, #4]	; (9044 <nrfx_ppi_group_alloc+0x8>)
    9040:	f7ff bba8 	b.w	8794 <nrfx_flag32_alloc>
    9044:	200000e8 	.word	0x200000e8

00009048 <nrfx_ppi_group_free>:
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
    9048:	00c3      	lsls	r3, r0, #3
    904a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    904e:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    9052:	2201      	movs	r2, #1
}


nrfx_err_t nrfx_ppi_group_free(nrf_ppi_channel_group_t group)
{
    9054:	4601      	mov	r1, r0
    9056:	605a      	str	r2, [r3, #4]
    nrf_ppi_group_disable(NRF_PPI, group);
    return nrfx_flag32_free(&m_groups_allocated, group);
    9058:	4801      	ldr	r0, [pc, #4]	; (9060 <nrfx_ppi_group_free+0x18>)
    905a:	f7ff bbbb 	b.w	87d4 <nrfx_flag32_free>
    905e:	bf00      	nop
    9060:	200000e8 	.word	0x200000e8

00009064 <nrfx_qdec_irq_handler>:
static nrfx_qdec_event_handler_t m_qdec_event_handler = NULL;
static nrfx_drv_state_t m_state = NRFX_DRV_STATE_UNINITIALIZED;
static bool m_skip_gpio_cfg;

void nrfx_qdec_irq_handler(void)
{
    9064:	b513      	push	{r0, r1, r4, lr}
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_qdec_event_check(NRF_QDEC_Type const * p_reg, nrf_qdec_event_t event)
{
    return (bool)*(volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event);
    9066:	4c2a      	ldr	r4, [pc, #168]	; (9110 <nrfx_qdec_irq_handler+0xac>)
    9068:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    nrfx_qdec_event_t event;
    if ( nrf_qdec_event_check(NRF_QDEC, NRF_QDEC_EVENT_SAMPLERDY) &&
    906c:	b1b3      	cbz	r3, 909c <nrfx_qdec_irq_handler+0x38>
    return p_reg->INTENSET & mask; // when read this register will return the value of INTEN.
    906e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    9072:	07d9      	lsls	r1, r3, #31
    9074:	d512      	bpl.n	909c <nrfx_qdec_irq_handler+0x38>
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event) ) = 0;
    9076:	2300      	movs	r3, #0
    9078:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    907c:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
         nrf_qdec_int_enable_check(NRF_QDEC, NRF_QDEC_INT_SAMPLERDY_MASK) )
    {
        nrf_qdec_event_clear(NRF_QDEC, NRF_QDEC_EVENT_SAMPLERDY);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_QDEC_EVENT_SAMPLERDY));

        event.type = NRF_QDEC_EVENT_SAMPLERDY;
    9080:	f44f 7380 	mov.w	r3, #256	; 0x100
    9084:	f8ad 3000 	strh.w	r3, [sp]
    return (nrf_qdec_sampleper_t)(p_reg->SAMPLEPER);
}

NRF_STATIC_INLINE int32_t nrf_qdec_sample_get(NRF_QDEC_Type const * p_reg)
{
    return p_reg->SAMPLE;
    9088:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
        event.data.sample.value = (int8_t)nrf_qdec_sample_get(NRF_QDEC);
    908c:	f88d 3002 	strb.w	r3, [sp, #2]
        m_qdec_event_handler(event);
    9090:	4b20      	ldr	r3, [pc, #128]	; (9114 <nrfx_qdec_irq_handler+0xb0>)
    9092:	aa02      	add	r2, sp, #8
    9094:	e912 0003 	ldmdb	r2, {r0, r1}
    9098:	681b      	ldr	r3, [r3, #0]
    909a:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event);
    909c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    }

    if ( nrf_qdec_event_check(NRF_QDEC, NRF_QDEC_EVENT_REPORTRDY) &&
    90a0:	b1d3      	cbz	r3, 90d8 <nrfx_qdec_irq_handler+0x74>
    return p_reg->INTENSET & mask; // when read this register will return the value of INTEN.
    90a2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    90a6:	079a      	lsls	r2, r3, #30
    90a8:	d516      	bpl.n	90d8 <nrfx_qdec_irq_handler+0x74>
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event) ) = 0;
    90aa:	2300      	movs	r3, #0
    90ac:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    90b0:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
         nrf_qdec_int_enable_check(NRF_QDEC, NRF_QDEC_INT_REPORTRDY_MASK) )
    {
        nrf_qdec_event_clear(NRF_QDEC, NRF_QDEC_EVENT_REPORTRDY);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_QDEC_EVENT_REPORTRDY));

        event.type = NRF_QDEC_EVENT_REPORTRDY;
    90b4:	f44f 7382 	mov.w	r3, #260	; 0x104
    90b8:	f8ad 3000 	strh.w	r3, [sp]
    return p_reg->ACC;
}

NRF_STATIC_INLINE int32_t nrf_qdec_accread_get(NRF_QDEC_Type const * p_reg)
{
    return p_reg->ACCREAD;
    90bc:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518

        event.data.report.acc    = (int16_t)nrf_qdec_accread_get(NRF_QDEC);
    90c0:	f8ad 3002 	strh.w	r3, [sp, #2]
    return p_reg->ACCDBL;
}

NRF_STATIC_INLINE uint32_t nrf_qdec_accdblread_get(NRF_QDEC_Type const * p_reg)
{
    return p_reg->ACCDBLREAD;
    90c4:	f8d4 3548 	ldr.w	r3, [r4, #1352]	; 0x548
        event.data.report.accdbl = (uint16_t)nrf_qdec_accdblread_get(NRF_QDEC);
    90c8:	f8ad 3004 	strh.w	r3, [sp, #4]
        m_qdec_event_handler(event);
    90cc:	4b11      	ldr	r3, [pc, #68]	; (9114 <nrfx_qdec_irq_handler+0xb0>)
    90ce:	aa02      	add	r2, sp, #8
    90d0:	e912 0003 	ldmdb	r2, {r0, r1}
    90d4:	681b      	ldr	r3, [r3, #0]
    90d6:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event);
    90d8:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    }

    if ( nrf_qdec_event_check(NRF_QDEC, NRF_QDEC_EVENT_ACCOF) &&
    90dc:	b1ab      	cbz	r3, 910a <nrfx_qdec_irq_handler+0xa6>
    return p_reg->INTENSET & mask; // when read this register will return the value of INTEN.
    90de:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    90e2:	075b      	lsls	r3, r3, #29
    90e4:	d511      	bpl.n	910a <nrfx_qdec_irq_handler+0xa6>
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event) ) = 0;
    90e6:	2300      	movs	r3, #0
    90e8:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    90ec:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
         nrf_qdec_int_enable_check(NRF_QDEC, NRF_QDEC_INT_ACCOF_MASK) )
    {
        nrf_qdec_event_clear(NRF_QDEC, NRF_QDEC_EVENT_ACCOF);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_QDEC_EVENT_ACCOF));

        event.type = NRF_QDEC_EVENT_ACCOF;
    90f0:	f44f 7384 	mov.w	r3, #264	; 0x108
    90f4:	f8ad 3000 	strh.w	r3, [sp]
        m_qdec_event_handler(event);
    90f8:	aa02      	add	r2, sp, #8
    90fa:	4b06      	ldr	r3, [pc, #24]	; (9114 <nrfx_qdec_irq_handler+0xb0>)
    90fc:	e912 0003 	ldmdb	r2, {r0, r1}
    9100:	681b      	ldr	r3, [r3, #0]
    }
}
    9102:	b002      	add	sp, #8
    9104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_qdec_event_handler(event);
    9108:	4718      	bx	r3
}
    910a:	b002      	add	sp, #8
    910c:	bd10      	pop	{r4, pc}
    910e:	bf00      	nop
    9110:	40012000 	.word	0x40012000
    9114:	200018b0 	.word	0x200018b0

00009118 <nrfx_qdec_init>:


nrfx_err_t nrfx_qdec_init(nrfx_qdec_config_t const * p_config,
                          nrfx_qdec_event_handler_t  event_handler)
{
    9118:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(event_handler);
    nrfx_err_t err_code;

    if (m_state != NRFX_DRV_STATE_UNINITIALIZED)
    911a:	4c30      	ldr	r4, [pc, #192]	; (91dc <nrfx_qdec_init+0xc4>)
    911c:	7823      	ldrb	r3, [r4, #0]
    911e:	2b00      	cmp	r3, #0
    9120:	d159      	bne.n	91d6 <nrfx_qdec_init+0xbe>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    m_qdec_event_handler = event_handler;
    9122:	4b2f      	ldr	r3, [pc, #188]	; (91e0 <nrfx_qdec_init+0xc8>)
    m_skip_gpio_cfg = p_config->skip_gpio_cfg;
    9124:	7e02      	ldrb	r2, [r0, #24]
    m_qdec_event_handler = event_handler;
    9126:	6019      	str	r1, [r3, #0]
    m_skip_gpio_cfg = p_config->skip_gpio_cfg;
    9128:	4b2e      	ldr	r3, [pc, #184]	; (91e4 <nrfx_qdec_init+0xcc>)
    912a:	701a      	strb	r2, [r3, #0]

    if (!p_config->skip_gpio_cfg)
    912c:	b9c2      	cbnz	r2, 9160 <nrfx_qdec_init+0x48>
    *p_pin = pin_number & 0x1F;
    912e:	6843      	ldr	r3, [r0, #4]
    9130:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    9134:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    9138:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    913c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
    9140:	6883      	ldr	r3, [r0, #8]
    9142:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    9146:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    914a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    {
        nrf_gpio_cfg_input(p_config->psela, NRF_GPIO_PIN_NOPULL);
        nrf_gpio_cfg_input(p_config->pselb, NRF_GPIO_PIN_NOPULL);
        if (p_config->pselled != NRF_QDEC_LED_NOT_CONNECTED)
    914e:	68c3      	ldr	r3, [r0, #12]
    9150:	1c5d      	adds	r5, r3, #1
    *p_pin = pin_number & 0x1F;
    9152:	bf1e      	ittt	ne
    9154:	f003 031f 	andne.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    9158:	f503 73e0 	addne.w	r3, r3, #448	; 0x1c0
    915c:	f841 2023 	strne.w	r2, [r1, r3, lsl #2]
        {
            nrf_gpio_cfg_input(p_config->pselled, NRF_GPIO_PIN_NOPULL);
        }
    }
    if (!p_config->skip_psel_cfg)
    9160:	7e42      	ldrb	r2, [r0, #25]
    9162:	4b21      	ldr	r3, [pc, #132]	; (91e8 <nrfx_qdec_init+0xd0>)
    9164:	b942      	cbnz	r2, 9178 <nrfx_qdec_init+0x60>
    {
        nrf_qdec_pins_set(NRF_QDEC, p_config->psela, p_config->pselb, p_config->pselled);
    9166:	e9d0 5101 	ldrd	r5, r1, [r0, #4]
    916a:	68c2      	ldr	r2, [r0, #12]
    p_reg->PSEL.A = phase_a_pin;
    916c:	f8c3 5520 	str.w	r5, [r3, #1312]	; 0x520
    p_reg->PSEL.B = phase_b_pin;
    9170:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
    p_reg->PSEL.LED = led_pin;
    9174:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->SAMPLEPER = sampleper;
    9178:	7842      	ldrb	r2, [r0, #1]
    917a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    return p_reg->PSEL.LED;
    917e:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    }

    nrf_qdec_sampleper_set(NRF_QDEC, p_config->sampleper);
    // Change the period and polarity of the LED only when it is used,
    // otherwise the ledpre field might have an invalid value.
    if (nrf_qdec_led_pin_get(NRF_QDEC) != NRF_QDEC_LED_NOT_CONNECTED)
    9182:	3201      	adds	r2, #1
    {
        nrf_qdec_ledpre_set(NRF_QDEC, p_config->ledpre);
    9184:	bf1f      	itttt	ne
    9186:	6902      	ldrne	r2, [r0, #16]
}

NRF_STATIC_INLINE void nrf_qdec_ledpre_set(NRF_QDEC_Type * p_reg, uint32_t time_us)
{
    p_reg->LEDPRE = time_us;
    9188:	f8c3 2540 	strne.w	r2, [r3, #1344]	; 0x540
    return (reportper == NRF_QDEC_REPORTPER_10) ? 10 : reportper * 40;
}

NRF_STATIC_INLINE void nrf_qdec_ledpol_set(NRF_QDEC_Type * p_reg, nrf_qdec_ledpol_t pol)
{
    p_reg->LEDPOL = pol;
    918c:	7d02      	ldrbne	r2, [r0, #20]
    918e:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
        nrf_qdec_ledpol_set(NRF_QDEC, p_config->ledpol);
    }

    if (p_config->dbfen)
    9192:	7d42      	ldrb	r2, [r0, #21]
    9194:	b102      	cbz	r2, 9198 <nrfx_qdec_init+0x80>
    p_reg->DBFEN = NRF_QDEC_DBFEN_ENABLE;
    9196:	2201      	movs	r2, #1
    p_reg->DBFEN = NRF_QDEC_DBFEN_DISABLE;
    9198:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
        nrf_qdec_dbfen_disable(NRF_QDEC);
    }

    uint32_t int_mask = NRF_QDEC_INT_ACCOF_MASK;

    if (p_config->reportper != NRF_QDEC_REPORTPER_DISABLED)
    919c:	7802      	ldrb	r2, [r0, #0]
    919e:	2a10      	cmp	r2, #16
    p_reg->SHORTS |= mask;
    91a0:	bf1f      	itttt	ne
    91a2:	f8d3 2200 	ldrne.w	r2, [r3, #512]	; 0x200
    91a6:	f042 0201 	orrne.w	r2, r2, #1
    91aa:	f8c3 2200 	strne.w	r2, [r3, #512]	; 0x200
    p_reg->REPORTPER = reportper;
    91ae:	7802      	ldrbne	r2, [r0, #0]
    91b0:	bf18      	it	ne
    91b2:	f8c3 2510 	strne.w	r2, [r3, #1296]	; 0x510
        nrf_qdec_shorts_enable(NRF_QDEC, NRF_QDEC_SHORT_REPORTRDY_READCLRACC_MASK);
        nrf_qdec_reportper_set(NRF_QDEC, p_config->reportper);
        int_mask |= NRF_QDEC_INT_REPORTRDY_MASK;
    }

    if (p_config->sample_inten)
    91b6:	7d81      	ldrb	r1, [r0, #22]
        int_mask |= NRF_QDEC_INT_REPORTRDY_MASK;
    91b8:	bf14      	ite	ne
    91ba:	2206      	movne	r2, #6
    uint32_t int_mask = NRF_QDEC_INT_ACCOF_MASK;
    91bc:	2204      	moveq	r2, #4
    if (p_config->sample_inten)
    91be:	b109      	cbz	r1, 91c4 <nrfx_qdec_init+0xac>
    {
        int_mask |= NRF_QDEC_INT_SAMPLERDY_MASK;
    91c0:	f042 0201 	orr.w	r2, r2, #1
    p_reg->INTENSET = mask; // writing 0 has no effect
    91c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    }

    nrf_qdec_int_enable(NRF_QDEC, int_mask);
    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_QDEC), p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_QDEC));
    91c8:	2012      	movs	r0, #18
    91ca:	f7fb fb83 	bl	48d4 <arch_irq_enable>

    m_state = NRFX_DRV_STATE_INITIALIZED;
    91ce:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    91d0:	4806      	ldr	r0, [pc, #24]	; (91ec <nrfx_qdec_init+0xd4>)
    m_state = NRFX_DRV_STATE_INITIALIZED;
    91d2:	7023      	strb	r3, [r4, #0]
}
    91d4:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    91d6:	4806      	ldr	r0, [pc, #24]	; (91f0 <nrfx_qdec_init+0xd8>)
    91d8:	e7fc      	b.n	91d4 <nrfx_qdec_init+0xbc>
    91da:	bf00      	nop
    91dc:	20001f03 	.word	0x20001f03
    91e0:	200018b0 	.word	0x200018b0
    91e4:	20001f02 	.word	0x20001f02
    91e8:	40012000 	.word	0x40012000
    91ec:	0bad0000 	.word	0x0bad0000
    91f0:	0bad0005 	.word	0x0bad0005

000091f4 <nrfx_qdec_enable>:
    p_reg->ENABLE = NRF_QDEC_ENABLE;
    91f4:	4b04      	ldr	r3, [pc, #16]	; (9208 <nrfx_qdec_enable+0x14>)
    91f6:	2201      	movs	r2, #1
    91f8:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)task) ) = 1;
    91fc:	601a      	str	r2, [r3, #0]
void nrfx_qdec_enable(void)
{
    NRFX_ASSERT(m_state == NRFX_DRV_STATE_INITIALIZED);
    nrf_qdec_enable(NRF_QDEC);
    nrf_qdec_task_trigger(NRF_QDEC, NRF_QDEC_TASK_START);
    m_state = NRFX_DRV_STATE_POWERED_ON;
    91fe:	4b03      	ldr	r3, [pc, #12]	; (920c <nrfx_qdec_enable+0x18>)
    9200:	2202      	movs	r2, #2
    9202:	701a      	strb	r2, [r3, #0]
    NRFX_LOG_INFO("Enabled.");
}
    9204:	4770      	bx	lr
    9206:	bf00      	nop
    9208:	40012000 	.word	0x40012000
    920c:	20001f03 	.word	0x20001f03

00009210 <nrfx_qdec_accumulators_read>:
    9210:	4b04      	ldr	r3, [pc, #16]	; (9224 <nrfx_qdec_accumulators_read+0x14>)
    9212:	2201      	movs	r2, #1
    9214:	609a      	str	r2, [r3, #8]
    return p_reg->ACCREAD;
    9216:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
void nrfx_qdec_accumulators_read(int16_t * p_acc, int16_t * p_accdbl)
{
    NRFX_ASSERT(m_state == NRFX_DRV_STATE_POWERED_ON);
    nrf_qdec_task_trigger(NRF_QDEC, NRF_QDEC_TASK_READCLRACC);

    *p_acc    = (int16_t)nrf_qdec_accread_get(NRF_QDEC);
    921a:	8002      	strh	r2, [r0, #0]
    return p_reg->ACCDBLREAD;
    921c:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
    *p_accdbl = (int16_t)nrf_qdec_accdblread_get(NRF_QDEC);
    9220:	800b      	strh	r3, [r1, #0]

    NRFX_LOG_DEBUG("Accumulators data, ACC register:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_acc, sizeof(p_acc[0]));
    NRFX_LOG_DEBUG("Accumulators data, ACCDBL register:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_accdbl, sizeof(p_accdbl[0]));
}
    9222:	4770      	bx	lr
    9224:	40012000 	.word	0x40012000

00009228 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    9228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    922c:	4d52      	ldr	r5, [pc, #328]	; (9378 <nrfx_spim_init+0x150>)
{
    922e:	460c      	mov	r4, r1
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    9230:	7901      	ldrb	r1, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    9232:	014f      	lsls	r7, r1, #5
    9234:	eb05 1141 	add.w	r1, r5, r1, lsl #5
{
    9238:	4606      	mov	r6, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    923a:	7f08      	ldrb	r0, [r1, #28]
    923c:	2800      	cmp	r0, #0
    923e:	f040 8098 	bne.w	9372 <nrfx_spim_init+0x14a>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    9242:	f8d6 8000 	ldr.w	r8, [r6]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    9246:	51ea      	str	r2, [r5, r7]
    p_cb->p_context = p_context;
    9248:	604b      	str	r3, [r1, #4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    924a:	7be0      	ldrb	r0, [r4, #15]
    924c:	7f8a      	ldrb	r2, [r1, #30]
    924e:	f360 0200 	bfi	r2, r0, #0, #1
    9252:	778a      	strb	r2, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
    9254:	7920      	ldrb	r0, [r4, #4]
    9256:	b2d2      	uxtb	r2, r2
    9258:	f360 0241 	bfi	r2, r0, #1, #1
    925c:	778a      	strb	r2, [r1, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
#endif
    p_cb->ss_pin = p_config->ss_pin;
    925e:	78e3      	ldrb	r3, [r4, #3]
    9260:	77cb      	strb	r3, [r1, #31]
    if (!p_config->skip_gpio_cfg)
    9262:	7be3      	ldrb	r3, [r4, #15]
    9264:	f8d6 9000 	ldr.w	r9, [r6]
    9268:	2b00      	cmp	r3, #0
    926a:	d140      	bne.n	92ee <nrfx_spim_init+0xc6>
        nrf_gpio_pin_write(p_config->sck_pin,
    926c:	7b21      	ldrb	r1, [r4, #12]
    926e:	7820      	ldrb	r0, [r4, #0]
    9270:	2901      	cmp	r1, #1
    9272:	bf94      	ite	ls
    9274:	2100      	movls	r1, #0
    9276:	2101      	movhi	r1, #1
    9278:	f003 ff44 	bl	d104 <nrf_gpio_pin_write>
    *p_pin = pin_number & 0x1F;
    927c:	7823      	ldrb	r3, [r4, #0]
    927e:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    9282:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    9286:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    928a:	2201      	movs	r2, #1
    928c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    9290:	7863      	ldrb	r3, [r4, #1]
    9292:	2bff      	cmp	r3, #255	; 0xff
    9294:	d00c      	beq.n	92b0 <nrfx_spim_init+0x88>
    *p_pin = pin_number & 0x1F;
    9296:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    929a:	409a      	lsls	r2, r3
    p_reg->OUTCLR = clr_mask;
    929c:	f8c1 250c 	str.w	r2, [r1, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    92a0:	7863      	ldrb	r3, [r4, #1]
    92a2:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    92a6:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    92aa:	2203      	movs	r2, #3
    92ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    92b0:	78a3      	ldrb	r3, [r4, #2]
    92b2:	2bff      	cmp	r3, #255	; 0xff
    92b4:	d009      	beq.n	92ca <nrfx_spim_init+0xa2>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    92b6:	7ba2      	ldrb	r2, [r4, #14]
    *p_pin = pin_number & 0x1F;
    92b8:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    92bc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    92c0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    92c4:	0092      	lsls	r2, r2, #2
    reg->PIN_CNF[pin_number] = cnf;
    92c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    92ca:	78e0      	ldrb	r0, [r4, #3]
    92cc:	28ff      	cmp	r0, #255	; 0xff
    92ce:	d00e      	beq.n	92ee <nrfx_spim_init+0xc6>
                               p_config->ss_active_high ? 0 : 1);
    92d0:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
    92d2:	f081 0101 	eor.w	r1, r1, #1
    92d6:	f003 ff15 	bl	d104 <nrf_gpio_pin_write>
    *p_pin = pin_number & 0x1F;
    92da:	78e3      	ldrb	r3, [r4, #3]
    92dc:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    92e0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    92e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    92e8:	2103      	movs	r1, #3
    92ea:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    92ee:	7c23      	ldrb	r3, [r4, #16]
    92f0:	b993      	cbnz	r3, 9318 <nrfx_spim_init+0xf0>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    92f2:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    92f4:	7821      	ldrb	r1, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    92f6:	2bff      	cmp	r3, #255	; 0xff
    92f8:	bf18      	it	ne
    92fa:	461a      	movne	r2, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    92fc:	78a3      	ldrb	r3, [r4, #2]
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
    92fe:	f8c9 1508 	str.w	r1, [r9, #1288]	; 0x508
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    9302:	bf08      	it	eq
    9304:	f04f 32ff 	moveq.w	r2, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    9308:	2bff      	cmp	r3, #255	; 0xff
    930a:	bf08      	it	eq
    930c:	f04f 33ff 	moveq.w	r3, #4294967295
    p_reg->PSEL.MOSI = mosi_pin;
    9310:	f8c9 250c 	str.w	r2, [r9, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    9314:	f8c9 3510 	str.w	r3, [r9, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    9318:	68a3      	ldr	r3, [r4, #8]
    931a:	f8c8 3524 	str.w	r3, [r8, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    931e:	7b63      	ldrb	r3, [r4, #13]
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    9320:	7b22      	ldrb	r2, [r4, #12]
    9322:	3b00      	subs	r3, #0
    9324:	bf18      	it	ne
    9326:	2301      	movne	r3, #1
    switch (spi_mode)
    9328:	2a02      	cmp	r2, #2
    932a:	d01c      	beq.n	9366 <nrfx_spim_init+0x13e>
    932c:	2a03      	cmp	r2, #3
    932e:	d01d      	beq.n	936c <nrfx_spim_init+0x144>
    9330:	2a01      	cmp	r2, #1
    9332:	d101      	bne.n	9338 <nrfx_spim_init+0x110>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    9334:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    9338:	f8c8 3554 	str.w	r3, [r8, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    933c:	79a3      	ldrb	r3, [r4, #6]
    933e:	f8c8 35c0 	str.w	r3, [r8, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    9342:	2307      	movs	r3, #7
    9344:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    9348:	59eb      	ldr	r3, [r5, r7]
    934a:	b123      	cbz	r3, 9356 <nrfx_spim_init+0x12e>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    934c:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    934e:	f340 3007 	sbfx	r0, r0, #12, #8
    9352:	f7fb fabf 	bl	48d4 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    9356:	443d      	add	r5, r7
    9358:	2300      	movs	r3, #0
    935a:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    935c:	4807      	ldr	r0, [pc, #28]	; (937c <nrfx_spim_init+0x154>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    935e:	2301      	movs	r3, #1
    9360:	772b      	strb	r3, [r5, #28]
}
    9362:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    9366:	f043 0304 	orr.w	r3, r3, #4
        break;
    936a:	e7e5      	b.n	9338 <nrfx_spim_init+0x110>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    936c:	f043 0306 	orr.w	r3, r3, #6
        break;
    9370:	e7e2      	b.n	9338 <nrfx_spim_init+0x110>
        return err_code;
    9372:	4803      	ldr	r0, [pc, #12]	; (9380 <nrfx_spim_init+0x158>)
    9374:	e7f5      	b.n	9362 <nrfx_spim_init+0x13a>
    9376:	bf00      	nop
    9378:	200018b4 	.word	0x200018b4
    937c:	0bad0000 	.word	0x0bad0000
    9380:	0bad0005 	.word	0x0bad0005

00009384 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    9384:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    9388:	4f38      	ldr	r7, [pc, #224]	; (946c <nrfx_spim_xfer+0xe8>)
    938a:	7903      	ldrb	r3, [r0, #4]
    938c:	eb07 1843 	add.w	r8, r7, r3, lsl #5
{
    9390:	4615      	mov	r5, r2
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    9392:	f898 201d 	ldrb.w	r2, [r8, #29]
{
    9396:	4681      	mov	r9, r0
    9398:	460c      	mov	r4, r1
    if (p_cb->transfer_in_progress)
    939a:	015e      	lsls	r6, r3, #5
    939c:	2a00      	cmp	r2, #0
    939e:	d163      	bne.n	9468 <nrfx_spim_xfer+0xe4>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    93a0:	59ba      	ldr	r2, [r7, r6]
    93a2:	b12a      	cbz	r2, 93b0 <nrfx_spim_xfer+0x2c>
    93a4:	f015 0f14 	tst.w	r5, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    93a8:	bf04      	itt	eq
    93aa:	2201      	moveq	r2, #1
    93ac:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    93b0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    93b4:	eb07 0c06 	add.w	ip, r7, r6
    93b8:	f10c 0c0c 	add.w	ip, ip, #12
    93bc:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
    93c0:	2101      	movs	r1, #1
    93c2:	4640      	mov	r0, r8
    93c4:	f003 feab 	bl	d11e <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    93c8:	6821      	ldr	r1, [r4, #0]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    93ca:	f8d9 3000 	ldr.w	r3, [r9]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    93ce:	b121      	cbz	r1, 93da <nrfx_spim_xfer+0x56>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    93d0:	f001 4260 	and.w	r2, r1, #3758096384	; 0xe0000000
    93d4:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    93d8:	d106      	bne.n	93e8 <nrfx_spim_xfer+0x64>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    93da:	68a2      	ldr	r2, [r4, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    93dc:	b152      	cbz	r2, 93f4 <nrfx_spim_xfer+0x70>
    93de:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    93e2:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
    93e6:	d005      	beq.n	93f4 <nrfx_spim_xfer+0x70>
        p_cb->transfer_in_progress = false;
    93e8:	443e      	add	r6, r7
    93ea:	2300      	movs	r3, #0
        return err_code;
    93ec:	4820      	ldr	r0, [pc, #128]	; (9470 <nrfx_spim_xfer+0xec>)
        p_cb->transfer_in_progress = false;
    93ee:	7773      	strb	r3, [r6, #29]
}
    93f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    93f4:	6862      	ldr	r2, [r4, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    93f6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    93fa:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    93fe:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
    9402:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    9406:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    940a:	2200      	movs	r2, #0
    940c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    9410:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    9414:	f015 0201 	ands.w	r2, r5, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    9418:	bf18      	it	ne
    941a:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    941c:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    9420:	f015 0202 	ands.w	r2, r5, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    9424:	bf18      	it	ne
    9426:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    9428:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    942c:	072a      	lsls	r2, r5, #28
    942e:	d507      	bpl.n	9440 <nrfx_spim_xfer+0xbc>
    if (!p_cb->handler)
    9430:	59ba      	ldr	r2, [r7, r6]
    9432:	b972      	cbnz	r2, 9452 <nrfx_spim_xfer+0xce>
        set_ss_pin_state(p_cb, false);
    9434:	2100      	movs	r1, #0
    9436:	4640      	mov	r0, r8
    9438:	f003 fe71 	bl	d11e <set_ss_pin_state>
    return err_code;
    943c:	480d      	ldr	r0, [pc, #52]	; (9474 <nrfx_spim_xfer+0xf0>)
    943e:	e7d7      	b.n	93f0 <nrfx_spim_xfer+0x6c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9440:	2201      	movs	r2, #1
    9442:	611a      	str	r2, [r3, #16]
    if (!p_cb->handler)
    9444:	59ba      	ldr	r2, [r7, r6]
    9446:	b922      	cbnz	r2, 9452 <nrfx_spim_xfer+0xce>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9448:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
            while (!nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    944c:	2a00      	cmp	r2, #0
    944e:	d0fb      	beq.n	9448 <nrfx_spim_xfer+0xc4>
    9450:	e7f0      	b.n	9434 <nrfx_spim_xfer+0xb0>
    if (!enable)
    9452:	f015 0f04 	tst.w	r5, #4
    9456:	f04f 0240 	mov.w	r2, #64	; 0x40
    945a:	d002      	beq.n	9462 <nrfx_spim_xfer+0xde>
    p_reg->INTENCLR = mask;
    945c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    9460:	e7ec      	b.n	943c <nrfx_spim_xfer+0xb8>
    p_reg->INTENSET = mask;
    9462:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    9466:	e7e9      	b.n	943c <nrfx_spim_xfer+0xb8>
        return err_code;
    9468:	4803      	ldr	r0, [pc, #12]	; (9478 <nrfx_spim_xfer+0xf4>)
    946a:	e7c1      	b.n	93f0 <nrfx_spim_xfer+0x6c>
    946c:	200018b4 	.word	0x200018b4
    9470:	0bad000a 	.word	0x0bad000a
    9474:	0bad0000 	.word	0x0bad0000
    9478:	0bad000b 	.word	0x0bad000b

0000947c <nrfx_timer_init>:
static timer_control_block_t m_cb[NRFX_TIMER_ENABLED_COUNT];

nrfx_err_t nrfx_timer_init(nrfx_timer_t const *        p_instance,
                           nrfx_timer_config_t const * p_config,
                           nrfx_timer_event_handler_t  timer_event_handler)
{
    947c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    timer_control_block_t * p_cb = &m_cb[p_instance->instance_id];
    947e:	7907      	ldrb	r7, [r0, #4]
#endif
    NRFX_ASSERT(p_config);

    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    9480:	4e20      	ldr	r6, [pc, #128]	; (9504 <nrfx_timer_init+0x88>)
{
    9482:	460d      	mov	r5, r1
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    9484:	210c      	movs	r1, #12
    9486:	4379      	muls	r1, r7
{
    9488:	4604      	mov	r4, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    948a:	1870      	adds	r0, r6, r1
    948c:	7a03      	ldrb	r3, [r0, #8]
    948e:	2b00      	cmp	r3, #0
    9490:	d135      	bne.n	94fe <nrfx_timer_init+0x82>
        return err_code;
    }

    NRFX_ASSERT(NRF_TIMER_IS_BIT_WIDTH_VALID(p_instance->p_reg, p_config->bit_width));

    p_cb->handler = timer_event_handler;
    9492:	5072      	str	r2, [r6, r1]
    p_cb->context = p_config->p_context;
    9494:	686a      	ldr	r2, [r5, #4]
    9496:	6042      	str	r2, [r0, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9498:	469c      	mov	ip, r3

    uint8_t i;
    for (i = 0; i < p_instance->cc_channel_count; ++i)
    949a:	7961      	ldrb	r1, [r4, #5]
    {
        nrf_timer_event_clear(p_instance->p_reg,
    949c:	6820      	ldr	r0, [r4, #0]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
    949e:	b2da      	uxtb	r2, r3
    94a0:	4291      	cmp	r1, r2
    94a2:	d824      	bhi.n	94ee <nrfx_timer_init+0x72>
                              nrf_timer_compare_event_get(i));
    }

    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
        p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    94a4:	f340 3007 	sbfx	r0, r0, #12, #8
    94a8:	f7fb fa14 	bl	48d4 <arch_irq_enable>

    nrf_timer_mode_set(p_instance->p_reg, p_config->mode);
    94ac:	6821      	ldr	r1, [r4, #0]
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
    94ae:	786b      	ldrb	r3, [r5, #1]
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
    94b0:	f8d1 2504 	ldr.w	r2, [r1, #1284]	; 0x504

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    94b4:	4814      	ldr	r0, [pc, #80]	; (9508 <nrfx_timer_init+0x8c>)
    94b6:	f022 0203 	bic.w	r2, r2, #3
                    ((mode << TIMER_MODE_MODE_Pos) & TIMER_MODE_MODE_Msk);
    94ba:	f003 0303 	and.w	r3, r3, #3
    p_reg->MODE = (p_reg->MODE & ~TIMER_MODE_MODE_Msk) |
    94be:	4313      	orrs	r3, r2
    94c0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nrf_timer_bit_width_set(p_instance->p_reg, p_config->bit_width);
    94c4:	6821      	ldr	r1, [r4, #0]
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
    94c6:	78ab      	ldrb	r3, [r5, #2]
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
    94c8:	f8d1 2508 	ldr.w	r2, [r1, #1288]	; 0x508
                       ((bit_width << TIMER_BITMODE_BITMODE_Pos) &
    94cc:	f003 0303 	and.w	r3, r3, #3
    p_reg->BITMODE = (p_reg->BITMODE & ~TIMER_BITMODE_BITMODE_Msk) |
    94d0:	f022 0203 	bic.w	r2, r2, #3
    94d4:	4313      	orrs	r3, r2
    94d6:	f8c1 3508 	str.w	r3, [r1, #1288]	; 0x508
    nrf_timer_prescaler_set(p_instance->p_reg, (uint32_t)p_config->frequency);
    94da:	6823      	ldr	r3, [r4, #0]
    94dc:	782a      	ldrb	r2, [r5, #0]
    p_reg->PRESCALER = prescaler_factor;
    94de:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    94e2:	230c      	movs	r3, #12
    94e4:	fb03 6607 	mla	r6, r3, r7, r6
    94e8:	2301      	movs	r3, #1
    94ea:	7233      	strb	r3, [r6, #8]
}
    94ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return (nrf_timer_task_t)NRFX_OFFSETOF(NRF_TIMER_Type, TASKS_CAPTURE[channel]);
}

NRF_STATIC_INLINE nrf_timer_event_t nrf_timer_compare_event_get(uint32_t channel)
{
    return (nrf_timer_event_t)NRFX_OFFSETOF(NRF_TIMER_Type, EVENTS_COMPARE[channel]);
    94ee:	0092      	lsls	r2, r2, #2
    94f0:	f502 72a0 	add.w	r2, r2, #320	; 0x140
    94f4:	3301      	adds	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    94f6:	f840 c002 	str.w	ip, [r0, r2]
    94fa:	5882      	ldr	r2, [r0, r2]
    for (i = 0; i < p_instance->cc_channel_count; ++i)
    94fc:	e7cd      	b.n	949a <nrfx_timer_init+0x1e>
        return err_code;
    94fe:	4803      	ldr	r0, [pc, #12]	; (950c <nrfx_timer_init+0x90>)
    9500:	e7f4      	b.n	94ec <nrfx_timer_init+0x70>
    9502:	bf00      	nop
    9504:	200018d4 	.word	0x200018d4
    9508:	0bad0000 	.word	0x0bad0000
    950c:	0bad0005 	.word	0x0bad0005

00009510 <nrfx_timer_disable>:
}

void nrfx_timer_disable(nrfx_timer_t const * p_instance)
{
    NRFX_ASSERT(m_cb[p_instance->instance_id].state != NRFX_DRV_STATE_UNINITIALIZED);
    nrf_timer_task_trigger(p_instance->p_reg, NRF_TIMER_TASK_SHUTDOWN);
    9510:	6803      	ldr	r3, [r0, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9512:	2201      	movs	r2, #1
    9514:	611a      	str	r2, [r3, #16]
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_INITIALIZED;
    9516:	7901      	ldrb	r1, [r0, #4]
    9518:	4b02      	ldr	r3, [pc, #8]	; (9524 <nrfx_timer_disable+0x14>)
    951a:	200c      	movs	r0, #12
    951c:	fb00 3301 	mla	r3, r0, r1, r3
    9520:	721a      	strb	r2, [r3, #8]
    NRFX_LOG_INFO("Disabled instance: %d.", p_instance->instance_id);
}
    9522:	4770      	bx	lr
    9524:	200018d4 	.word	0x200018d4

00009528 <nrfx_timer_uninit>:
{
    9528:	b538      	push	{r3, r4, r5, lr}
    952a:	4604      	mov	r4, r0
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    952c:	6800      	ldr	r0, [r0, #0]
    NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    952e:	f340 3007 	sbfx	r0, r0, #12, #8
    9532:	f7fb f9dd 	bl	48f0 <arch_irq_disable>
    nrf_timer_shorts_disable(p_instance->p_reg, DISABLE_ALL);
    9536:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS &= ~(mask);
    9538:	2500      	movs	r5, #0
    953a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    953e:	f8c3 5200 	str.w	r5, [r3, #512]	; 0x200
    nrf_timer_int_disable(p_instance->p_reg, DISABLE_ALL);
    9542:	6823      	ldr	r3, [r4, #0]
    p_reg->INTENCLR = mask;
    9544:	f04f 32ff 	mov.w	r2, #4294967295
    9548:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    nrfx_timer_disable(p_instance);
    954c:	4620      	mov	r0, r4
    954e:	f7ff ffdf 	bl	9510 <nrfx_timer_disable>
    m_cb[p_instance->instance_id].state = NRFX_DRV_STATE_UNINITIALIZED;
    9552:	7922      	ldrb	r2, [r4, #4]
    9554:	4b02      	ldr	r3, [pc, #8]	; (9560 <nrfx_timer_uninit+0x38>)
    9556:	210c      	movs	r1, #12
    9558:	fb01 3302 	mla	r3, r1, r2, r3
    955c:	721d      	strb	r5, [r3, #8]
}
    955e:	bd38      	pop	{r3, r4, r5, pc}
    9560:	200018d4 	.word	0x200018d4

00009564 <nrfx_timer_2_irq_handler>:
}
#endif

#if NRFX_CHECK(NRFX_TIMER2_ENABLED)
void nrfx_timer_2_irq_handler(void)
{
    9564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9568:	4c0f      	ldr	r4, [pc, #60]	; (95a8 <nrfx_timer_2_irq_handler+0x44>)
    return p_reg->INTENSET & mask;
    956a:	4f10      	ldr	r7, [pc, #64]	; (95ac <nrfx_timer_2_irq_handler+0x48>)
            if (p_cb->handler)
    956c:	4e10      	ldr	r6, [pc, #64]	; (95b0 <nrfx_timer_2_irq_handler+0x4c>)
{
    956e:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE nrf_timer_int_mask_t nrf_timer_compare_int_get(uint32_t channel)
{
    return (nrf_timer_int_mask_t)
    9570:	f44f 3880 	mov.w	r8, #65536	; 0x10000
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9574:	6823      	ldr	r3, [r4, #0]
        if (nrf_timer_event_check(p_reg, event) &&
    9576:	b17b      	cbz	r3, 9598 <nrfx_timer_2_irq_handler+0x34>
    return p_reg->INTENSET & mask;
    9578:	f8d7 3304 	ldr.w	r3, [r7, #772]	; 0x304
    return (nrf_timer_int_mask_t)
    957c:	fa08 f205 	lsl.w	r2, r8, r5
    9580:	421a      	tst	r2, r3
    9582:	d009      	beq.n	9598 <nrfx_timer_2_irq_handler+0x34>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9584:	2300      	movs	r3, #0
    9586:	6023      	str	r3, [r4, #0]
    9588:	6823      	ldr	r3, [r4, #0]
            if (p_cb->handler)
    958a:	6833      	ldr	r3, [r6, #0]
    958c:	b123      	cbz	r3, 9598 <nrfx_timer_2_irq_handler+0x34>
                p_cb->handler(event, p_cb->context);
    958e:	f504 40c0 	add.w	r0, r4, #24576	; 0x6000
    9592:	6871      	ldr	r1, [r6, #4]
    9594:	b280      	uxth	r0, r0
    9596:	4798      	blx	r3
    for (i = 0; i < channel_count; ++i)
    9598:	3501      	adds	r5, #1
    959a:	2d04      	cmp	r5, #4
    959c:	f104 0404 	add.w	r4, r4, #4
    95a0:	d1e8      	bne.n	9574 <nrfx_timer_2_irq_handler+0x10>
    irq_handler(NRF_TIMER2, &m_cb[NRFX_TIMER2_INST_IDX],
        NRF_TIMER_CC_CHANNEL_COUNT(2));
}
    95a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    95a6:	bf00      	nop
    95a8:	4000a140 	.word	0x4000a140
    95ac:	4000a000 	.word	0x4000a000
    95b0:	200018d4 	.word	0x200018d4

000095b4 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    95b4:	4b05      	ldr	r3, [pc, #20]	; (95cc <ep_state_access+0x18>)
    95b6:	f010 0f80 	tst.w	r0, #128	; 0x80
    95ba:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    95be:	bf08      	it	eq
    95c0:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    95c2:	f000 000f 	and.w	r0, r0, #15
}
    95c6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    95ca:	4770      	bx	lr
    95cc:	20001a88 	.word	0x20001a88

000095d0 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    95d0:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    95d2:	4a07      	ldr	r2, [pc, #28]	; (95f0 <ev_usbreset_handler+0x20>)
    95d4:	2300      	movs	r3, #0
    95d6:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    95d8:	4a06      	ldr	r2, [pc, #24]	; (95f4 <ev_usbreset_handler+0x24>)
    95da:	7013      	strb	r3, [r2, #0]

    const nrfx_usbd_evt_t evt = {
    95dc:	2301      	movs	r3, #1
    95de:	9301      	str	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    95e0:	4b05      	ldr	r3, [pc, #20]	; (95f8 <ev_usbreset_handler+0x28>)
    95e2:	a801      	add	r0, sp, #4
    95e4:	681b      	ldr	r3, [r3, #0]
    95e6:	4798      	blx	r3
}
    95e8:	b003      	add	sp, #12
    95ea:	f85d fb04 	ldr.w	pc, [sp], #4
    95ee:	bf00      	nop
    95f0:	20001f06 	.word	0x20001f06
    95f4:	20001f05 	.word	0x20001f05
    95f8:	20001b20 	.word	0x20001b20

000095fc <ev_usbevent_handler>:
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    95fc:	b513      	push	{r0, r1, r4, lr}
    return p_reg->EVENTCAUSE;
    95fe:	4b19      	ldr	r3, [pc, #100]	; (9664 <ev_usbevent_handler+0x68>)
    9600:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    9604:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    9608:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    960a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    960e:	d508      	bpl.n	9622 <ev_usbevent_handler+0x26>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    9610:	4b15      	ldr	r3, [pc, #84]	; (9668 <ev_usbevent_handler+0x6c>)
    9612:	2201      	movs	r2, #1
    9614:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    9616:	2302      	movs	r3, #2
    9618:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    961a:	4b14      	ldr	r3, [pc, #80]	; (966c <ev_usbevent_handler+0x70>)
    961c:	a801      	add	r0, sp, #4
    961e:	681b      	ldr	r3, [r3, #0]
    9620:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    9622:	05a2      	lsls	r2, r4, #22
    9624:	d508      	bpl.n	9638 <ev_usbevent_handler+0x3c>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    9626:	4b10      	ldr	r3, [pc, #64]	; (9668 <ev_usbevent_handler+0x6c>)
    9628:	2200      	movs	r2, #0
    962a:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    962c:	2303      	movs	r3, #3
    962e:	9301      	str	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    9630:	4b0e      	ldr	r3, [pc, #56]	; (966c <ev_usbevent_handler+0x70>)
    9632:	a801      	add	r0, sp, #4
    9634:	681b      	ldr	r3, [r3, #0]
    9636:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    9638:	0563      	lsls	r3, r4, #21
    963a:	d510      	bpl.n	965e <ev_usbevent_handler+0x62>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    963c:	4b0a      	ldr	r3, [pc, #40]	; (9668 <ev_usbevent_handler+0x6c>)
    963e:	781a      	ldrb	r2, [r3, #0]
    9640:	b16a      	cbz	r2, 965e <ev_usbevent_handler+0x62>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    9642:	2200      	movs	r2, #0
    9644:	701a      	strb	r2, [r3, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    9646:	4b07      	ldr	r3, [pc, #28]	; (9664 <ev_usbevent_handler+0x68>)
    9648:	2201      	movs	r2, #1
    964a:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    964e:	659a      	str	r2, [r3, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9650:	6d9b      	ldr	r3, [r3, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    9652:	2304      	movs	r3, #4
    9654:	9301      	str	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    9656:	4b05      	ldr	r3, [pc, #20]	; (966c <ev_usbevent_handler+0x70>)
    9658:	a801      	add	r0, sp, #4
    965a:	681b      	ldr	r3, [r3, #0]
    965c:	4798      	blx	r3
        }
    }
}
    965e:	b002      	add	sp, #8
    9660:	bd10      	pop	{r4, pc}
    9662:	bf00      	nop
    9664:	40027000 	.word	0x40027000
    9668:	20001f06 	.word	0x20001f06
    966c:	20001b20 	.word	0x20001b20

00009670 <usbd_errata_187_211_begin>:
	__asm__ volatile(
    9670:	f04f 0340 	mov.w	r3, #64	; 0x40
    9674:	f3ef 8011 	mrs	r0, BASEPRI
    9678:	f383 8812 	msr	BASEPRI_MAX, r3
    967c:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    9680:	4b0a      	ldr	r3, [pc, #40]	; (96ac <usbd_errata_187_211_begin+0x3c>)
    9682:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    9686:	2203      	movs	r2, #3
    9688:	b961      	cbnz	r1, 96a4 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    968a:	f249 3175 	movw	r1, #37749	; 0x9375
    968e:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    9692:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    9696:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    969a:	f380 8811 	msr	BASEPRI, r0
    969e:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    96a2:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    96a4:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    96a8:	e7f7      	b.n	969a <usbd_errata_187_211_begin+0x2a>
    96aa:	bf00      	nop
    96ac:	4006e000 	.word	0x4006e000

000096b0 <usbd_errata_187_211_end>:
	__asm__ volatile(
    96b0:	f04f 0340 	mov.w	r3, #64	; 0x40
    96b4:	f3ef 8011 	mrs	r0, BASEPRI
    96b8:	f383 8812 	msr	BASEPRI_MAX, r3
    96bc:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    96c0:	4b0a      	ldr	r3, [pc, #40]	; (96ec <usbd_errata_187_211_end+0x3c>)
    96c2:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    96c6:	b961      	cbnz	r1, 96e2 <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    96c8:	f249 3275 	movw	r2, #37749	; 0x9375
    96cc:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    96d0:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    96d4:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    96d8:	f380 8811 	msr	BASEPRI, r0
    96dc:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    96e0:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    96e2:	2200      	movs	r2, #0
    96e4:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    96e8:	e7f6      	b.n	96d8 <usbd_errata_187_211_end+0x28>
    96ea:	bf00      	nop
    96ec:	4006e000 	.word	0x4006e000

000096f0 <nrfx_usbd_feeder_flash>:
{
    96f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    96f2:	684b      	ldr	r3, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    96f4:	4f0b      	ldr	r7, [pc, #44]	; (9724 <nrfx_usbd_feeder_flash+0x34>)
    96f6:	429a      	cmp	r2, r3
    96f8:	bf28      	it	cs
    96fa:	461a      	movcs	r2, r3
{
    96fc:	460c      	mov	r4, r1
    96fe:	4615      	mov	r5, r2
    9700:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    9702:	6809      	ldr	r1, [r1, #0]
    9704:	4638      	mov	r0, r7
    9706:	f003 fa01 	bl	cb0c <memcpy>
    p_next->size = tx_size;
    970a:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->size -= tx_size;
    970e:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    9710:	6823      	ldr	r3, [r4, #0]
    p_transfer->size -= tx_size;
    9712:	1b40      	subs	r0, r0, r5
    p_transfer->p_data.addr += tx_size;
    9714:	442b      	add	r3, r5
    p_transfer->size -= tx_size;
    9716:	6060      	str	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    9718:	6023      	str	r3, [r4, #0]
}
    971a:	3800      	subs	r0, #0
    971c:	bf18      	it	ne
    971e:	2001      	movne	r0, #1
    9720:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9722:	bf00      	nop
    9724:	200018e0 	.word	0x200018e0

00009728 <nrfx_usbd_feeder_flash_zlp>:
{
    9728:	b570      	push	{r4, r5, r6, lr}
    972a:	684b      	ldr	r3, [r1, #4]
    972c:	429a      	cmp	r2, r3
    972e:	bf28      	it	cs
    9730:	461a      	movcs	r2, r3
    9732:	4606      	mov	r6, r0
    9734:	460d      	mov	r5, r1
    9736:	4614      	mov	r4, r2
    if (tx_size != 0)
    9738:	b182      	cbz	r2, 975c <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    973a:	6809      	ldr	r1, [r1, #0]
    973c:	4808      	ldr	r0, [pc, #32]	; (9760 <nrfx_usbd_feeder_flash_zlp+0x38>)
    973e:	f003 f9e5 	bl	cb0c <memcpy>
        p_next->p_data.tx = p_buffer;
    9742:	4b07      	ldr	r3, [pc, #28]	; (9760 <nrfx_usbd_feeder_flash_zlp+0x38>)
    p_next->size = tx_size;
    9744:	e9c6 3400 	strd	r3, r4, [r6]
    p_transfer->size -= tx_size;
    9748:	686b      	ldr	r3, [r5, #4]
    974a:	1b1b      	subs	r3, r3, r4
    974c:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    974e:	682b      	ldr	r3, [r5, #0]
    9750:	4423      	add	r3, r4
}
    9752:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    9754:	602b      	str	r3, [r5, #0]
}
    9756:	bf18      	it	ne
    9758:	2001      	movne	r0, #1
    975a:	bd70      	pop	{r4, r5, r6, pc}
    975c:	4613      	mov	r3, r2
    975e:	e7f1      	b.n	9744 <nrfx_usbd_feeder_flash_zlp+0x1c>
    9760:	200018e0 	.word	0x200018e0

00009764 <ev_sof_handler>:
{
    9764:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    9766:	2300      	movs	r3, #0
    9768:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    976c:	4b0b      	ldr	r3, [pc, #44]	; (979c <ev_sof_handler+0x38>)
    976e:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    9772:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    9776:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    977a:	4a09      	ldr	r2, [pc, #36]	; (97a0 <ev_sof_handler+0x3c>)
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    977c:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
    977e:	6813      	ldr	r3, [r2, #0]
    uint32_t iso_ready_mask = (1U << ep2bit(NRFX_USBD_EPIN8));
    9780:	bf14      	ite	ne
    9782:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    9786:	f44f 7180 	moveq.w	r1, #256	; 0x100
    m_ep_ready |= iso_ready_mask;
    978a:	430b      	orrs	r3, r1
    978c:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    978e:	4b05      	ldr	r3, [pc, #20]	; (97a4 <ev_sof_handler+0x40>)
    9790:	a801      	add	r0, sp, #4
    9792:	681b      	ldr	r3, [r3, #0]
    9794:	4798      	blx	r3
}
    9796:	b003      	add	sp, #12
    9798:	f85d fb04 	ldr.w	pc, [sp], #4
    979c:	40027000 	.word	0x40027000
    97a0:	20001b1c 	.word	0x20001b1c
    97a4:	20001b20 	.word	0x20001b20

000097a8 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    97a8:	4b06      	ldr	r3, [pc, #24]	; (97c4 <atomic_and.constprop.0.isra.0+0x1c>)
    97aa:	f3bf 8f5b 	dmb	ish
    97ae:	e853 1f00 	ldrex	r1, [r3]
    97b2:	4001      	ands	r1, r0
    97b4:	e843 1200 	strex	r2, r1, [r3]
    97b8:	2a00      	cmp	r2, #0
    97ba:	d1f8      	bne.n	97ae <atomic_and.constprop.0.isra.0+0x6>
    97bc:	f3bf 8f5b 	dmb	ish
}
    97c0:	4770      	bx	lr
    97c2:	bf00      	nop
    97c4:	20001b18 	.word	0x20001b18

000097c8 <nrf_usbd_epin_dma_handler>:
{
    97c8:	b508      	push	{r3, lr}
    m_dma_pending = false;
    97ca:	4b0c      	ldr	r3, [pc, #48]	; (97fc <nrf_usbd_epin_dma_handler+0x34>)
    97cc:	2200      	movs	r2, #0
    97ce:	701a      	strb	r2, [r3, #0]
{
    97d0:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    97d2:	f7ff feef 	bl	95b4 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    97d6:	7b83      	ldrb	r3, [r0, #14]
    97d8:	2b03      	cmp	r3, #3
    97da:	d10a      	bne.n	97f2 <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    97dc:	4608      	mov	r0, r1
    97de:	f003 fd00 	bl	d1e2 <ep2bit>
    97e2:	2301      	movs	r3, #1
    97e4:	fa03 f000 	lsl.w	r0, r3, r0
    97e8:	43c0      	mvns	r0, r0
}
    97ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    97ee:	f7ff bfdb 	b.w	97a8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    97f2:	6803      	ldr	r3, [r0, #0]
    97f4:	2b00      	cmp	r3, #0
    97f6:	d0f1      	beq.n	97dc <nrf_usbd_epin_dma_handler+0x14>
}
    97f8:	bd08      	pop	{r3, pc}
    97fa:	bf00      	nop
    97fc:	20001f04 	.word	0x20001f04

00009800 <nrf_usbd_ep0in_dma_handler>:
    m_dma_pending = false;
    9800:	4b08      	ldr	r3, [pc, #32]	; (9824 <nrf_usbd_ep0in_dma_handler+0x24>)
    9802:	2200      	movs	r2, #0
    9804:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9806:	4b08      	ldr	r3, [pc, #32]	; (9828 <nrf_usbd_ep0in_dma_handler+0x28>)
    9808:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    980c:	2a03      	cmp	r2, #3
    980e:	d103      	bne.n	9818 <nrf_usbd_ep0in_dma_handler+0x18>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9810:	f06f 0001 	mvn.w	r0, #1
    9814:	f7ff bfc8 	b.w	97a8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    9818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    981c:	2b00      	cmp	r3, #0
    981e:	d0f7      	beq.n	9810 <nrf_usbd_ep0in_dma_handler+0x10>
}
    9820:	4770      	bx	lr
    9822:	bf00      	nop
    9824:	20001f04 	.word	0x20001f04
    9828:	200019f8 	.word	0x200019f8

0000982c <usbd_ep_data_handler>:
{
    982c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    982e:	2201      	movs	r2, #1
    9830:	fa02 f501 	lsl.w	r5, r2, r1
    9834:	491c      	ldr	r1, [pc, #112]	; (98a8 <usbd_ep_data_handler+0x7c>)
    9836:	4e1d      	ldr	r6, [pc, #116]	; (98ac <usbd_ep_data_handler+0x80>)
    9838:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    983a:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    983e:	ea43 0305 	orr.w	r3, r3, r5
{
    9842:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    9844:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    9846:	d024      	beq.n	9892 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    9848:	f000 020f 	and.w	r2, r0, #15
    984c:	4b18      	ldr	r3, [pc, #96]	; (98b0 <usbd_ep_data_handler+0x84>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    984e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    9852:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9856:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    985a:	681a      	ldr	r2, [r3, #0]
    if (ret)
    985c:	b132      	cbz	r2, 986c <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    985e:	2200      	movs	r2, #0
    9860:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    9862:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    9864:	681b      	ldr	r3, [r3, #0]
    9866:	d011      	beq.n	988c <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    9868:	f7ff ffae 	bl	97c8 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    986c:	6833      	ldr	r3, [r6, #0]
    986e:	402b      	ands	r3, r5
    9870:	d10a      	bne.n	9888 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9872:	2206      	movs	r2, #6
    9874:	f88d 2004 	strb.w	r2, [sp, #4]
    9878:	f88d 4006 	strb.w	r4, [sp, #6]
    987c:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    9880:	4b0c      	ldr	r3, [pc, #48]	; (98b4 <usbd_ep_data_handler+0x88>)
    9882:	a801      	add	r0, sp, #4
    9884:	681b      	ldr	r3, [r3, #0]
    9886:	4798      	blx	r3
}
    9888:	b002      	add	sp, #8
    988a:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    988c:	f7ff ffb8 	bl	9800 <nrf_usbd_ep0in_dma_handler>
    9890:	e7ec      	b.n	986c <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    9892:	6833      	ldr	r3, [r6, #0]
    9894:	421d      	tst	r5, r3
    9896:	d1f7      	bne.n	9888 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    9898:	2306      	movs	r3, #6
    989a:	f88d 3004 	strb.w	r3, [sp, #4]
    989e:	f88d 0006 	strb.w	r0, [sp, #6]
    98a2:	f88d 2007 	strb.w	r2, [sp, #7]
    98a6:	e7eb      	b.n	9880 <usbd_ep_data_handler+0x54>
    98a8:	20001b1c 	.word	0x20001b1c
    98ac:	20001b18 	.word	0x20001b18
    98b0:	0000df3e 	.word	0x0000df3e
    98b4:	20001b20 	.word	0x20001b20

000098b8 <ev_setup_data_handler>:
{
    98b8:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    98ba:	4b05      	ldr	r3, [pc, #20]	; (98d0 <ev_setup_data_handler+0x18>)
    98bc:	781a      	ldrb	r2, [r3, #0]
    98be:	4610      	mov	r0, r2
    98c0:	f003 fc8f 	bl	d1e2 <ep2bit>
}
    98c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    98c8:	4601      	mov	r1, r0
    98ca:	4610      	mov	r0, r2
    98cc:	f7ff bfae 	b.w	982c <usbd_ep_data_handler>
    98d0:	20001f05 	.word	0x20001f05

000098d4 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    98d4:	b507      	push	{r0, r1, r2, lr}
    m_dma_pending = false;
    98d6:	4b0e      	ldr	r3, [pc, #56]	; (9910 <ev_dma_epout8_handler+0x3c>)
    98d8:	2200      	movs	r2, #0
    98da:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    98dc:	4b0d      	ldr	r3, [pc, #52]	; (9914 <ev_dma_epout8_handler+0x40>)
    98de:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    98e2:	2a03      	cmp	r2, #3
    98e4:	d010      	beq.n	9908 <ev_dma_epout8_handler+0x34>
    else if (p_state->handler.consumer == NULL)
    98e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    98ea:	b96b      	cbnz	r3, 9908 <ev_dma_epout8_handler+0x34>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    98ec:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    98f0:	f7ff ff5a 	bl	97a8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    98f4:	2306      	movs	r3, #6
    98f6:	f88d 3004 	strb.w	r3, [sp, #4]
    98fa:	2308      	movs	r3, #8
    98fc:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    9900:	4b05      	ldr	r3, [pc, #20]	; (9918 <ev_dma_epout8_handler+0x44>)
    9902:	a801      	add	r0, sp, #4
    9904:	681b      	ldr	r3, [r3, #0]
    9906:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    9908:	b003      	add	sp, #12
    990a:	f85d fb04 	ldr.w	pc, [sp], #4
    990e:	bf00      	nop
    9910:	20001f04 	.word	0x20001f04
    9914:	200019f8 	.word	0x200019f8
    9918:	20001b20 	.word	0x20001b20

0000991c <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    991c:	b507      	push	{r0, r1, r2, lr}
    m_dma_pending = false;
    991e:	4b11      	ldr	r3, [pc, #68]	; (9964 <ev_dma_epin8_handler+0x48>)
    9920:	2200      	movs	r2, #0
    9922:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9924:	4b10      	ldr	r3, [pc, #64]	; (9968 <ev_dma_epin8_handler+0x4c>)
    9926:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    992a:	2a03      	cmp	r2, #3
    992c:	d106      	bne.n	993c <ev_dma_epin8_handler+0x20>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    992e:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    9932:	b003      	add	sp, #12
    9934:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9938:	f7ff bf36 	b.w	97a8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    993c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    9940:	b96b      	cbnz	r3, 995e <ev_dma_epin8_handler+0x42>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9942:	f46f 7080 	mvn.w	r0, #256	; 0x100
    9946:	f7ff ff2f 	bl	97a8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    994a:	2306      	movs	r3, #6
    994c:	f88d 3004 	strb.w	r3, [sp, #4]
    9950:	2388      	movs	r3, #136	; 0x88
    9952:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    9956:	4b05      	ldr	r3, [pc, #20]	; (996c <ev_dma_epin8_handler+0x50>)
    9958:	a801      	add	r0, sp, #4
    995a:	681b      	ldr	r3, [r3, #0]
    995c:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    995e:	b003      	add	sp, #12
    9960:	f85d fb04 	ldr.w	pc, [sp], #4
    9964:	20001f04 	.word	0x20001f04
    9968:	200019f8 	.word	0x200019f8
    996c:	20001b20 	.word	0x20001b20

00009970 <usbd_enable>:

/**
 * @brief Enable USBD peripheral.
 */
static void usbd_enable(void)
{
    9970:	b508      	push	{r3, lr}
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9972:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x10)
    9976:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    997a:	2b10      	cmp	r3, #16
    997c:	d101      	bne.n	9982 <usbd_enable+0x12>
    if (nrfx_usbd_errata_187())
    {
        usbd_errata_187_211_begin();
    997e:	f7ff fe77 	bl	9670 <usbd_errata_187_211_begin>
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    9982:	4b0d      	ldr	r3, [pc, #52]	; (99b8 <usbd_enable+0x48>)
    9984:	2201      	movs	r2, #1
    9986:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    998a:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    998e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    9992:	0512      	lsls	r2, r2, #20
    9994:	d5fb      	bpl.n	998e <usbd_enable+0x1e>
    p_reg->EVENTCAUSE = flags;
    9996:	f44f 6200 	mov.w	r2, #2048	; 0x800
    999a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    999e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    99a2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x10)
    99a6:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    99aa:	2b10      	cmp	r3, #16
    99ac:	d103      	bne.n	99b6 <usbd_enable+0x46>

    if (nrfx_usbd_errata_187())
    {
        usbd_errata_187_211_end();
    }
}
    99ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
    99b2:	f7ff be7d 	b.w	96b0 <usbd_errata_187_211_end>
}
    99b6:	bd08      	pop	{r3, pc}
    99b8:	40027000 	.word	0x40027000

000099bc <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    99bc:	4a02      	ldr	r2, [pc, #8]	; (99c8 <nrfx_usbd_uninit+0xc>)
    99be:	2300      	movs	r3, #0
    99c0:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    99c2:	4a02      	ldr	r2, [pc, #8]	; (99cc <nrfx_usbd_uninit+0x10>)
    99c4:	7013      	strb	r3, [r2, #0]
    return;
}
    99c6:	4770      	bx	lr
    99c8:	20001b20 	.word	0x20001b20
    99cc:	20001f07 	.word	0x20001f07

000099d0 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    99d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    p_reg->EVENTCAUSE = flags;
    99d2:	4c20      	ldr	r4, [pc, #128]	; (9a54 <nrfx_usbd_enable+0x84>)
    99d4:	f44f 6300 	mov.w	r3, #2048	; 0x800
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    99d8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    99dc:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    99e0:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD, NRF_USBD_EVENTCAUSE_READY_MASK);

    usbd_enable();
    99e4:	f7ff ffc4 	bl	9970 <usbd_enable>
            if (var1 == 0x10)
    99e8:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
    99ec:	2b10      	cmp	r3, #16
    99ee:	d104      	bne.n	99fa <nrfx_usbd_enable+0x2a>

    if (nrfx_usbd_errata_223() && m_first_enable)
    99f0:	4e19      	ldr	r6, [pc, #100]	; (9a58 <nrfx_usbd_enable+0x88>)
    99f2:	7833      	ldrb	r3, [r6, #0]
    99f4:	b9fb      	cbnz	r3, 9a36 <nrfx_usbd_enable+0x66>
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
#endif
    {
        usbd_errata_187_211_begin();
    99f6:	f7ff fe3b 	bl	9670 <usbd_errata_187_211_begin>
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    99fa:	4a16      	ldr	r2, [pc, #88]	; (9a54 <nrfx_usbd_enable+0x84>)
    99fc:	2380      	movs	r3, #128	; 0x80
    99fe:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    9a02:	2300      	movs	r3, #0
    9a04:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    9a08:	4a14      	ldr	r2, [pc, #80]	; (9a5c <nrfx_usbd_enable+0x8c>)
    9a0a:	f240 11ff 	movw	r1, #511	; 0x1ff
    9a0e:	6011      	str	r1, [r2, #0]
    m_ep_dma_waiting = 0;
    9a10:	4a13      	ldr	r2, [pc, #76]	; (9a60 <nrfx_usbd_enable+0x90>)
    9a12:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    9a14:	4a13      	ldr	r2, [pc, #76]	; (9a64 <nrfx_usbd_enable+0x94>)
    9a16:	7013      	strb	r3, [r2, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    9a18:	4a13      	ldr	r2, [pc, #76]	; (9a68 <nrfx_usbd_enable+0x98>)
    9a1a:	7013      	strb	r3, [r2, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    9a1c:	4b13      	ldr	r3, [pc, #76]	; (9a6c <nrfx_usbd_enable+0x9c>)
    9a1e:	2202      	movs	r2, #2
    9a20:	701a      	strb	r2, [r3, #0]
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    9a22:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x10)
    9a26:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
    9a2a:	2b10      	cmp	r3, #16
    9a2c:	d110      	bne.n	9a50 <nrfx_usbd_enable+0x80>
    if (nrfx_usbd_errata_187())
#endif
    {
        usbd_errata_187_211_end();
    }
}
    9a2e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
        usbd_errata_187_211_end();
    9a32:	f7ff be3d 	b.w	96b0 <usbd_errata_187_211_end>
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    9a36:	2700      	movs	r7, #0
    9a38:	f8c4 7500 	str.w	r7, [r4, #1280]	; 0x500
    (void) p_reg->ENABLE;
    9a3c:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
         usbd_enable();
    9a40:	f7ff ff96 	bl	9970 <usbd_enable>
         m_first_enable = false;
    9a44:	7037      	strb	r7, [r6, #0]
    9a46:	f8d5 3130 	ldr.w	r3, [r5, #304]	; 0x130
    9a4a:	2b10      	cmp	r3, #16
    9a4c:	d1d5      	bne.n	99fa <nrfx_usbd_enable+0x2a>
    9a4e:	e7d2      	b.n	99f6 <nrfx_usbd_enable+0x26>
}
    9a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a52:	bf00      	nop
    9a54:	40027000 	.word	0x40027000
    9a58:	20000143 	.word	0x20000143
    9a5c:	20001b1c 	.word	0x20001b1c
    9a60:	20001b18 	.word	0x20001b18
    9a64:	20001f04 	.word	0x20001f04
    9a68:	20001f05 	.word	0x20001f05
    9a6c:	20001f07 	.word	0x20001f07

00009a70 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    9a70:	4b0a      	ldr	r3, [pc, #40]	; (9a9c <nrfx_usbd_start+0x2c>)
    9a72:	2200      	movs	r2, #0
{
    9a74:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    9a76:	701a      	strb	r2, [r3, #0]

    uint32_t ints_to_enable =
    9a78:	4a09      	ldr	r2, [pc, #36]	; (9aa0 <nrfx_usbd_start+0x30>)
    9a7a:	4b0a      	ldr	r3, [pc, #40]	; (9aa4 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    9a7c:	4c0a      	ldr	r4, [pc, #40]	; (9aa8 <nrfx_usbd_start+0x38>)
    9a7e:	2800      	cmp	r0, #0
    9a80:	bf08      	it	eq
    9a82:	4613      	moveq	r3, r2
    9a84:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    9a88:	2027      	movs	r0, #39	; 0x27
    9a8a:	f7fa ff23 	bl	48d4 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    9a8e:	2301      	movs	r3, #1
    9a90:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    9a94:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    9a98:	bd10      	pop	{r4, pc}
    9a9a:	bf00      	nop
    9a9c:	20001f06 	.word	0x20001f06
    9aa0:	01c01407 	.word	0x01c01407
    9aa4:	01e01407 	.word	0x01e01407
    9aa8:	40027000 	.word	0x40027000

00009aac <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    9aac:	4b03      	ldr	r3, [pc, #12]	; (9abc <nrfx_usbd_is_enabled+0x10>)
    9aae:	7818      	ldrb	r0, [r3, #0]
}
    9ab0:	2801      	cmp	r0, #1
    9ab2:	bf94      	ite	ls
    9ab4:	2000      	movls	r0, #0
    9ab6:	2001      	movhi	r0, #1
    9ab8:	4770      	bx	lr
    9aba:	bf00      	nop
    9abc:	20001f07 	.word	0x20001f07

00009ac0 <nrfx_usbd_suspend>:
{
    return (nrfx_usbd_is_enabled() && NRFX_IRQ_IS_ENABLED(USBD_IRQn));
}

bool nrfx_usbd_suspend(void)
{
    9ac0:	b510      	push	{r4, lr}
	__asm__ volatile(
    9ac2:	f04f 0340 	mov.w	r3, #64	; 0x40
    9ac6:	f3ef 8111 	mrs	r1, BASEPRI
    9aca:	f383 8812 	msr	BASEPRI_MAX, r3
    9ace:	f3bf 8f6f 	isb	sy
    bool suspended = false;

    NRFX_CRITICAL_SECTION_ENTER();
    if (m_bus_suspend)
    9ad2:	4b0f      	ldr	r3, [pc, #60]	; (9b10 <nrfx_usbd_suspend+0x50>)
    9ad4:	781b      	ldrb	r3, [r3, #0]
    9ad6:	f003 00ff 	and.w	r0, r3, #255	; 0xff
    9ada:	b193      	cbz	r3, 9b02 <nrfx_usbd_suspend+0x42>
    return p_reg->EVENTCAUSE;
    9adc:	4b0d      	ldr	r3, [pc, #52]	; (9b14 <nrfx_usbd_suspend+0x54>)
    9ade:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    {
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    9ae2:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    9ae6:	d10c      	bne.n	9b02 <nrfx_usbd_suspend+0x42>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    9ae8:	2401      	movs	r4, #1
    9aea:	f8c3 452c 	str.w	r4, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    9aee:	f8d3 452c 	ldr.w	r4, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    9af2:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
        {
            nrf_usbd_lowpower_enable(NRF_USBD);
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    9af6:	05a4      	lsls	r4, r4, #22
    9af8:	d504      	bpl.n	9b04 <nrfx_usbd_suspend+0x44>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    9afa:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    9afe:	f8d3 352c 	ldr.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    9b02:	2000      	movs	r0, #0
	__asm__ volatile(
    9b04:	f381 8811 	msr	BASEPRI, r1
    9b08:	f3bf 8f6f 	isb	sy
        }
    }
    NRFX_CRITICAL_SECTION_EXIT();

    return suspended;
}
    9b0c:	bd10      	pop	{r4, pc}
    9b0e:	bf00      	nop
    9b10:	20001f06 	.word	0x20001f06
    9b14:	40027000 	.word	0x40027000

00009b18 <nrfx_usbd_init>:
{
    9b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    9b1a:	4b1c      	ldr	r3, [pc, #112]	; (9b8c <nrfx_usbd_init+0x74>)
    9b1c:	781c      	ldrb	r4, [r3, #0]
    9b1e:	bb94      	cbnz	r4, 9b86 <nrfx_usbd_init+0x6e>
    m_event_handler = event_handler;
    9b20:	4a1b      	ldr	r2, [pc, #108]	; (9b90 <nrfx_usbd_init+0x78>)
    9b22:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    9b24:	2201      	movs	r2, #1
    9b26:	701a      	strb	r2, [r3, #0]
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9b28:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    9b2c:	4626      	mov	r6, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    9b2e:	f064 057f 	orn	r5, r4, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9b32:	f014 0f08 	tst.w	r4, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    9b36:	b2ed      	uxtb	r5, r5
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9b38:	bf14      	ite	ne
    9b3a:	4639      	movne	r1, r7
    9b3c:	2140      	moveq	r1, #64	; 0x40
    9b3e:	4628      	mov	r0, r5
    9b40:	f003 fb6f 	bl	d222 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    9b44:	4628      	mov	r0, r5
    9b46:	f7ff fd35 	bl	95b4 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    9b4a:	3401      	adds	r4, #1
    9b4c:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    9b4e:	7386      	strb	r6, [r0, #14]
        p_state->handler.feeder = NULL;
    9b50:	6006      	str	r6, [r0, #0]
        p_state->transfer_cnt = 0;
    9b52:	6086      	str	r6, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    9b54:	d1eb      	bne.n	9b2e <nrfx_usbd_init+0x16>
    9b56:	2400      	movs	r4, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9b58:	f240 17ff 	movw	r7, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    9b5c:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    9b5e:	f014 0f08 	tst.w	r4, #8
    9b62:	b2e6      	uxtb	r6, r4
    9b64:	bf14      	ite	ne
    9b66:	4639      	movne	r1, r7
    9b68:	2140      	moveq	r1, #64	; 0x40
    9b6a:	4630      	mov	r0, r6
    9b6c:	f003 fb59 	bl	d222 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    9b70:	4630      	mov	r0, r6
    9b72:	f7ff fd1f 	bl	95b4 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    9b76:	3401      	adds	r4, #1
    9b78:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    9b7a:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    9b7c:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    9b7e:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    9b80:	d1ed      	bne.n	9b5e <nrfx_usbd_init+0x46>
    return NRFX_SUCCESS;
    9b82:	4804      	ldr	r0, [pc, #16]	; (9b94 <nrfx_usbd_init+0x7c>)
}
    9b84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        return NRFX_ERROR_INVALID_STATE;
    9b86:	4804      	ldr	r0, [pc, #16]	; (9b98 <nrfx_usbd_init+0x80>)
    9b88:	e7fc      	b.n	9b84 <nrfx_usbd_init+0x6c>
    9b8a:	bf00      	nop
    9b8c:	20001f07 	.word	0x20001f07
    9b90:	20001b20 	.word	0x20001b20
    9b94:	0bad0000 	.word	0x0bad0000
    9b98:	0bad0005 	.word	0x0bad0005

00009b9c <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    9b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9ba0:	4604      	mov	r4, r0
	__asm__ volatile(
    9ba2:	f04f 0340 	mov.w	r3, #64	; 0x40
    9ba6:	f3ef 8611 	mrs	r6, BASEPRI
    9baa:	f383 8812 	msr	BASEPRI_MAX, r3
    9bae:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    9bb2:	f010 090f 	ands.w	r9, r0, #15
    9bb6:	d103      	bne.n	9bc0 <nrfx_usbd_ep_transfer+0x24>
    9bb8:	4b27      	ldr	r3, [pc, #156]	; (9c58 <nrfx_usbd_ep_transfer+0xbc>)
    9bba:	781b      	ldrb	r3, [r3, #0]
    9bbc:	4283      	cmp	r3, r0
    9bbe:	d147      	bne.n	9c50 <nrfx_usbd_ep_transfer+0xb4>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    9bc0:	4b26      	ldr	r3, [pc, #152]	; (9c5c <nrfx_usbd_ep_transfer+0xc0>)
    9bc2:	4f27      	ldr	r7, [pc, #156]	; (9c60 <nrfx_usbd_ep_transfer+0xc4>)
    9bc4:	681a      	ldr	r2, [r3, #0]
    9bc6:	683b      	ldr	r3, [r7, #0]
    9bc8:	43d2      	mvns	r2, r2
    9bca:	b292      	uxth	r2, r2
    const uint8_t ep_bitpos = ep2bit(ep);
    9bcc:	4620      	mov	r0, r4
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    9bce:	431a      	orrs	r2, r3
    const uint8_t ep_bitpos = ep2bit(ep);
    9bd0:	f003 fb07 	bl	d1e2 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    9bd4:	f04f 0801 	mov.w	r8, #1
    9bd8:	fa08 f800 	lsl.w	r8, r8, r0
    9bdc:	ea12 0f08 	tst.w	r2, r8
    9be0:	d138      	bne.n	9c54 <nrfx_usbd_ep_transfer+0xb8>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    9be2:	4620      	mov	r0, r4
    9be4:	f7ff fce6 	bl	95b4 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    9be8:	230c      	movs	r3, #12
        if (NRF_USBD_EPIN_CHECK(ep))
    9bea:	0622      	lsls	r2, r4, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    9bec:	4605      	mov	r5, r0
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    9bee:	fb03 f309 	mul.w	r3, r3, r9
        if (NRF_USBD_EPIN_CHECK(ep))
    9bf2:	d529      	bpl.n	9c48 <nrfx_usbd_ep_transfer+0xac>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    9bf4:	680a      	ldr	r2, [r1, #0]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    9bf6:	6888      	ldr	r0, [r1, #8]
    9bf8:	f002 4260 	and.w	r2, r2, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    9bfc:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    9c00:	f000 0001 	and.w	r0, r0, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    9c04:	d11d      	bne.n	9c42 <nrfx_usbd_ep_transfer+0xa6>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    9c06:	4a17      	ldr	r2, [pc, #92]	; (9c64 <nrfx_usbd_ep_transfer+0xc8>)
    9c08:	4c17      	ldr	r4, [pc, #92]	; (9c68 <nrfx_usbd_ep_transfer+0xcc>)
    9c0a:	2800      	cmp	r0, #0
    9c0c:	bf08      	it	eq
    9c0e:	4622      	moveq	r2, r4
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    9c10:	4816      	ldr	r0, [pc, #88]	; (9c6c <nrfx_usbd_ep_transfer+0xd0>)
    9c12:	4403      	add	r3, r0
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    9c14:	602a      	str	r2, [r5, #0]
        }
        *p_context = *p_transfer;
    9c16:	c907      	ldmia	r1, {r0, r1, r2}
    9c18:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        p_state->p_context = p_context;
    9c1c:	606b      	str	r3, [r5, #4]

        p_state->transfer_cnt = 0;
    9c1e:	2300      	movs	r3, #0
    9c20:	60ab      	str	r3, [r5, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    9c22:	73ab      	strb	r3, [r5, #14]
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    9c24:	683b      	ldr	r3, [r7, #0]
        ret = NRFX_SUCCESS;
    9c26:	4812      	ldr	r0, [pc, #72]	; (9c70 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    9c28:	ea43 0308 	orr.w	r3, r3, r8
    9c2c:	603b      	str	r3, [r7, #0]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    9c2e:	4b11      	ldr	r3, [pc, #68]	; (9c74 <nrfx_usbd_ep_transfer+0xd8>)
    9c30:	2280      	movs	r2, #128	; 0x80
    9c32:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    9c36:	f386 8811 	msr	BASEPRI, r6
    9c3a:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    9c3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    9c42:	4a0d      	ldr	r2, [pc, #52]	; (9c78 <nrfx_usbd_ep_transfer+0xdc>)
    9c44:	4c0d      	ldr	r4, [pc, #52]	; (9c7c <nrfx_usbd_ep_transfer+0xe0>)
    9c46:	e7e0      	b.n	9c0a <nrfx_usbd_ep_transfer+0x6e>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    9c48:	4a0d      	ldr	r2, [pc, #52]	; (9c80 <nrfx_usbd_ep_transfer+0xe4>)
    9c4a:	4413      	add	r3, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    9c4c:	4a0d      	ldr	r2, [pc, #52]	; (9c84 <nrfx_usbd_ep_transfer+0xe8>)
    9c4e:	e7e1      	b.n	9c14 <nrfx_usbd_ep_transfer+0x78>
        ret = NRFX_ERROR_INVALID_ADDR;
    9c50:	480d      	ldr	r0, [pc, #52]	; (9c88 <nrfx_usbd_ep_transfer+0xec>)
    9c52:	e7f0      	b.n	9c36 <nrfx_usbd_ep_transfer+0x9a>
        ret = NRFX_ERROR_BUSY;
    9c54:	480d      	ldr	r0, [pc, #52]	; (9c8c <nrfx_usbd_ep_transfer+0xf0>)
    9c56:	e7ee      	b.n	9c36 <nrfx_usbd_ep_transfer+0x9a>
    9c58:	20001f05 	.word	0x20001f05
    9c5c:	20001b1c 	.word	0x20001b1c
    9c60:	20001b18 	.word	0x20001b18
    9c64:	0000d1bb 	.word	0x0000d1bb
    9c68:	0000d199 	.word	0x0000d199
    9c6c:	2000198c 	.word	0x2000198c
    9c70:	0bad0000 	.word	0x0bad0000
    9c74:	e000e100 	.word	0xe000e100
    9c78:	00009729 	.word	0x00009729
    9c7c:	000096f1 	.word	0x000096f1
    9c80:	20001920 	.word	0x20001920
    9c84:	0000d167 	.word	0x0000d167
    9c88:	0bad000a 	.word	0x0bad000a
    9c8c:	0bad000b 	.word	0x0bad000b

00009c90 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    9c90:	f010 0f08 	tst.w	r0, #8
    9c94:	4b07      	ldr	r3, [pc, #28]	; (9cb4 <nrfx_usbd_epout_size_get+0x24>)
    9c96:	d006      	beq.n	9ca6 <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    9c98:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    9c9c:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    9ca0:	bf18      	it	ne
    9ca2:	2000      	movne	r0, #0
    9ca4:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    9ca6:	f000 000f 	and.w	r0, r0, #15
    9caa:	f500 7094 	add.w	r0, r0, #296	; 0x128
    9cae:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    9cb2:	4770      	bx	lr
    9cb4:	40027000 	.word	0x40027000

00009cb8 <usbd_dmareq_process>:
{
    9cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    9cbc:	4e54      	ldr	r6, [pc, #336]	; (9e10 <usbd_dmareq_process+0x158>)
    9cbe:	7833      	ldrb	r3, [r6, #0]
{
    9cc0:	b085      	sub	sp, #20
    if (!m_dma_pending)
    9cc2:	2b00      	cmp	r3, #0
    9cc4:	d169      	bne.n	9d9a <usbd_dmareq_process+0xe2>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    9cc6:	f8df 814c 	ldr.w	r8, [pc, #332]	; 9e14 <usbd_dmareq_process+0x15c>
    9cca:	4d53      	ldr	r5, [pc, #332]	; (9e18 <usbd_dmareq_process+0x160>)
    9ccc:	f8d8 4000 	ldr.w	r4, [r8]
    9cd0:	682b      	ldr	r3, [r5, #0]
    9cd2:	401c      	ands	r4, r3
    9cd4:	d061      	beq.n	9d9a <usbd_dmareq_process+0xe2>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    9cd6:	f014 2301 	ands.w	r3, r4, #16777472	; 0x1000100
    return NRF_CTZ(req);
    9cda:	bf14      	ite	ne
    9cdc:	fa93 f4a3 	rbitne	r4, r3
    9ce0:	fa94 f4a4 	rbiteq	r4, r4
    9ce4:	fab4 f484 	clz	r4, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    9ce8:	f04f 0901 	mov.w	r9, #1
    9cec:	fa09 f904 	lsl.w	r9, r9, r4
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9cf0:	2c0f      	cmp	r4, #15
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    9cf2:	ea6f 0909 	mvn.w	r9, r9
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9cf6:	d953      	bls.n	9da0 <usbd_dmareq_process+0xe8>
    9cf8:	3c10      	subs	r4, #16
    9cfa:	b2e4      	uxtb	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    9cfc:	4620      	mov	r0, r4
    9cfe:	f7ff fc59 	bl	95b4 <ep_state_access>
    9d02:	4682      	mov	sl, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    9d04:	4620      	mov	r0, r4
    9d06:	f7ff ffc3 	bl	9c90 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    9d0a:	f8da 7000 	ldr.w	r7, [sl]
    9d0e:	f8ba 200c 	ldrh.w	r2, [sl, #12]
    9d12:	f8da 1004 	ldr.w	r1, [sl, #4]
    9d16:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    9d18:	4683      	mov	fp, r0
                continue_transfer = p_state->handler.consumer(
    9d1a:	a802      	add	r0, sp, #8
    9d1c:	47b8      	blx	r7
                if (transfer.p_data.rx == NULL)
    9d1e:	9b02      	ldr	r3, [sp, #8]
    9d20:	2b00      	cmp	r3, #0
    9d22:	d149      	bne.n	9db8 <usbd_dmareq_process+0x100>
                if (!continue_transfer)
    9d24:	b908      	cbnz	r0, 9d2a <usbd_dmareq_process+0x72>
                    p_state->handler.consumer = NULL;
    9d26:	f8ca 0000 	str.w	r0, [sl]
    m_dma_pending = true;
    9d2a:	2301      	movs	r3, #1
    9d2c:	7033      	strb	r3, [r6, #0]
            m_ep_ready &= ~(1U << pos);
    9d2e:	682b      	ldr	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    9d30:	9a03      	ldr	r2, [sp, #12]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    9d32:	9802      	ldr	r0, [sp, #8]
            m_ep_ready &= ~(1U << pos);
    9d34:	ea03 0309 	and.w	r3, r3, r9
    9d38:	602b      	str	r3, [r5, #0]
            p_state->transfer_cnt += transfer.size;
    9d3a:	f8da 3008 	ldr.w	r3, [sl, #8]
            if (NRF_USBD_EPIN_CHECK(ep))
    9d3e:	b261      	sxtb	r1, r4
            p_state->transfer_cnt += transfer.size;
    9d40:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
    9d42:	2900      	cmp	r1, #0
    9d44:	f8ca 3008 	str.w	r3, [sl, #8]
    9d48:	f004 0508 	and.w	r5, r4, #8
    9d4c:	4b33      	ldr	r3, [pc, #204]	; (9e1c <usbd_dmareq_process+0x164>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    9d4e:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    9d52:	da4e      	bge.n	9df2 <usbd_dmareq_process+0x13a>
        if (NRF_USBD_EPISO_CHECK(ep))
    9d54:	2d00      	cmp	r5, #0
    9d56:	d044      	beq.n	9de2 <usbd_dmareq_process+0x12a>
            p_reg->ISOIN.PTR    = ptr;
    9d58:	f8c3 06a0 	str.w	r0, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    9d5c:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    9d60:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9d62:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    9d66:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9d6a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9d6e:	2201      	movs	r2, #1
    9d70:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9d72:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    9d74:	4a2a      	ldr	r2, [pc, #168]	; (9e20 <usbd_dmareq_process+0x168>)
    9d76:	4b2b      	ldr	r3, [pc, #172]	; (9e24 <usbd_dmareq_process+0x16c>)
    9d78:	ea13 0321 	ands.w	r3, r3, r1, asr #32
    9d7c:	bf38      	it	cc
    9d7e:	4613      	movcc	r3, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    9d80:	4926      	ldr	r1, [pc, #152]	; (9e1c <usbd_dmareq_process+0x164>)
    9d82:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    9d86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    9d8a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    9d8e:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    9d90:	b91a      	cbnz	r2, 9d9a <usbd_dmareq_process+0xe2>
    9d92:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    9d96:	2a00      	cmp	r2, #0
    9d98:	d0f9      	beq.n	9d8e <usbd_dmareq_process+0xd6>
}
    9d9a:	b005      	add	sp, #20
    9d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9da0:	f044 0480 	orr.w	r4, r4, #128	; 0x80
            usbd_ep_state_t * p_state = ep_state_access(ep);
    9da4:	4620      	mov	r0, r4
    9da6:	f7ff fc05 	bl	95b4 <ep_state_access>
                continue_transfer = p_state->handler.feeder(
    9daa:	6803      	ldr	r3, [r0, #0]
    9dac:	8982      	ldrh	r2, [r0, #12]
    9dae:	6841      	ldr	r1, [r0, #4]
            usbd_ep_state_t * p_state = ep_state_access(ep);
    9db0:	4682      	mov	sl, r0
                continue_transfer = p_state->handler.feeder(
    9db2:	a802      	add	r0, sp, #8
    9db4:	4798      	blx	r3
    9db6:	e7b5      	b.n	9d24 <usbd_dmareq_process+0x6c>
                else if (transfer.size < rx_size)
    9db8:	9b03      	ldr	r3, [sp, #12]
    9dba:	459b      	cmp	fp, r3
    9dbc:	d9b2      	bls.n	9d24 <usbd_dmareq_process+0x6c>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    9dbe:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    9dc0:	4648      	mov	r0, r9
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    9dc2:	f88a 700e 	strb.w	r7, [sl, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    9dc6:	f7ff fcef 	bl	97a8 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    9dca:	2306      	movs	r3, #6
    9dcc:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    9dd0:	4b15      	ldr	r3, [pc, #84]	; (9e28 <usbd_dmareq_process+0x170>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    9dd2:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    9dd6:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    9dd8:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    9ddc:	a801      	add	r0, sp, #4
    9dde:	4798      	blx	r3
                    continue;
    9de0:	e774      	b.n	9ccc <usbd_dmareq_process+0x14>
            p_reg->EPIN[epnr].PTR    = ptr;
    9de2:	2514      	movs	r5, #20
    9de4:	fb05 3304 	mla	r3, r5, r4, r3
    9de8:	f8c3 0600 	str.w	r0, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    9dec:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    return (nrf_usbd_task_t)(
    9df0:	e7b6      	b.n	9d60 <usbd_dmareq_process+0xa8>
        if (NRF_USBD_EPISO_CHECK(ep))
    9df2:	b12d      	cbz	r5, 9e00 <usbd_dmareq_process+0x148>
            p_reg->ISOOUT.PTR    = ptr;
    9df4:	f8c3 07a0 	str.w	r0, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    9df8:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    9dfc:	2328      	movs	r3, #40	; 0x28
    9dfe:	e7b0      	b.n	9d62 <usbd_dmareq_process+0xaa>
            p_reg->EPOUT[epnr].PTR    = ptr;
    9e00:	2514      	movs	r5, #20
    9e02:	fb05 3304 	mla	r3, r5, r4, r3
    9e06:	f8c3 0700 	str.w	r0, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    9e0a:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    9e0e:	e7f5      	b.n	9dfc <usbd_dmareq_process+0x144>
    9e10:	20001f04 	.word	0x20001f04
    9e14:	20001b18 	.word	0x20001b18
    9e18:	20001b1c 	.word	0x20001b1c
    9e1c:	40027000 	.word	0x40027000
    9e20:	0000df2c 	.word	0x0000df2c
    9e24:	0000df3e 	.word	0x0000df3e
    9e28:	20001b20 	.word	0x20001b20

00009e2c <ev_epdata_handler>:
{
    9e2c:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    9e2e:	4b0f      	ldr	r3, [pc, #60]	; (9e6c <ev_epdata_handler+0x40>)
    9e30:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    9e34:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    9e38:	2501      	movs	r5, #1
    while (dataepstatus)
    9e3a:	b91c      	cbnz	r4, 9e44 <ev_epdata_handler+0x18>
}
    9e3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    9e40:	f7ff bf3a 	b.w	9cb8 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    9e44:	fa94 f3a4 	rbit	r3, r4
    9e48:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9e4c:	2b0f      	cmp	r3, #15
    9e4e:	bfc8      	it	gt
    9e50:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    9e54:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    9e56:	bfd4      	ite	le
    9e58:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    9e5c:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    9e5e:	fa05 f303 	lsl.w	r3, r5, r3
    9e62:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    9e66:	f7ff fce1 	bl	982c <usbd_ep_data_handler>
    9e6a:	e7e6      	b.n	9e3a <ev_epdata_handler+0xe>
    9e6c:	40027000 	.word	0x40027000

00009e70 <nrf_usbd_epout_dma_handler>:
    m_dma_pending = false;
    9e70:	4b17      	ldr	r3, [pc, #92]	; (9ed0 <nrf_usbd_epout_dma_handler+0x60>)
{
    9e72:	b537      	push	{r0, r1, r2, r4, r5, lr}
    m_dma_pending = false;
    9e74:	2200      	movs	r2, #0
    9e76:	701a      	strb	r2, [r3, #0]
{
    9e78:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    9e7a:	f7ff fb9b 	bl	95b4 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9e7e:	7b83      	ldrb	r3, [r0, #14]
    9e80:	2b03      	cmp	r3, #3
    9e82:	d10d      	bne.n	9ea0 <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9e84:	4620      	mov	r0, r4
    9e86:	f003 f9ac 	bl	d1e2 <ep2bit>
    9e8a:	2301      	movs	r3, #1
    9e8c:	fa03 f000 	lsl.w	r0, r3, r0
    9e90:	43c0      	mvns	r0, r0
    9e92:	f7ff fc89 	bl	97a8 <atomic_and.constprop.0.isra.0>
}
    9e96:	b003      	add	sp, #12
    9e98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    9e9c:	f7ff bf0c 	b.w	9cb8 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    9ea0:	6805      	ldr	r5, [r0, #0]
    9ea2:	2d00      	cmp	r5, #0
    9ea4:	d1f7      	bne.n	9e96 <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9ea6:	4620      	mov	r0, r4
    9ea8:	f003 f99b 	bl	d1e2 <ep2bit>
    9eac:	2301      	movs	r3, #1
    9eae:	fa03 f000 	lsl.w	r0, r3, r0
    9eb2:	43c0      	mvns	r0, r0
    9eb4:	f7ff fc78 	bl	97a8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9eb8:	2306      	movs	r3, #6
    9eba:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    9ebe:	4b05      	ldr	r3, [pc, #20]	; (9ed4 <nrf_usbd_epout_dma_handler+0x64>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9ec0:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    9ec4:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9ec6:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    9eca:	a801      	add	r0, sp, #4
    9ecc:	4798      	blx	r3
    9ece:	e7e2      	b.n	9e96 <nrf_usbd_epout_dma_handler+0x26>
    9ed0:	20001f04 	.word	0x20001f04
    9ed4:	20001b20 	.word	0x20001b20

00009ed8 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    9ed8:	4b02      	ldr	r3, [pc, #8]	; (9ee4 <nrfx_usbd_ep_stall+0xc>)
    9eda:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    9ede:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    9ee2:	4770      	bx	lr
    9ee4:	40027000 	.word	0x40027000

00009ee8 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    9ee8:	0702      	lsls	r2, r0, #28
    9eea:	d413      	bmi.n	9f14 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    9eec:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    9ef0:	f010 0f80 	tst.w	r0, #128	; 0x80
    9ef4:	4a08      	ldr	r2, [pc, #32]	; (9f18 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    9ef6:	bf0b      	itete	eq
    9ef8:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    9efc:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    9f00:	eb02 0283 	addeq.w	r2, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    9f04:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    9f08:	bf08      	it	eq
    9f0a:	6850      	ldreq	r0, [r2, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    9f0c:	1e43      	subs	r3, r0, #1
    9f0e:	4258      	negs	r0, r3
    9f10:	4158      	adcs	r0, r3
    9f12:	4770      	bx	lr
        return false;
    9f14:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    9f16:	4770      	bx	lr
    9f18:	40027000 	.word	0x40027000

00009f1c <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    9f1c:	4b04      	ldr	r3, [pc, #16]	; (9f30 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    9f1e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    9f22:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    9f26:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    9f2a:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    9f2e:	4770      	bx	lr
    9f30:	40027000 	.word	0x40027000

00009f34 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    9f34:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    9f36:	2208      	movs	r2, #8
    9f38:	2100      	movs	r1, #0
{
    9f3a:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    9f3c:	f002 fdf1 	bl	cb22 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    9f40:	4b0e      	ldr	r3, [pc, #56]	; (9f7c <nrfx_usbd_setup_get+0x48>)
    9f42:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    9f46:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    9f48:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    9f4c:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    9f4e:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    9f52:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    9f56:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    9f5a:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    9f5c:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    9f60:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    9f64:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    9f68:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    9f6a:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    9f6e:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    9f72:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    9f76:	80e3      	strh	r3, [r4, #6]
}
    9f78:	bd10      	pop	{r4, pc}
    9f7a:	bf00      	nop
    9f7c:	40027000 	.word	0x40027000

00009f80 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9f80:	4b02      	ldr	r3, [pc, #8]	; (9f8c <nrfx_usbd_setup_data_clear+0xc>)
    9f82:	2201      	movs	r2, #1
    9f84:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9f86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    9f88:	4770      	bx	lr
    9f8a:	bf00      	nop
    9f8c:	40027000 	.word	0x40027000

00009f90 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    9f90:	b513      	push	{r0, r1, r4, lr}
    m_dma_pending = false;
    9f92:	4b12      	ldr	r3, [pc, #72]	; (9fdc <ev_dma_epout0_handler+0x4c>)
    9f94:	2200      	movs	r2, #0
    9f96:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    9f98:	4b11      	ldr	r3, [pc, #68]	; (9fe0 <ev_dma_epout0_handler+0x50>)
    9f9a:	7b9a      	ldrb	r2, [r3, #14]
    9f9c:	2a03      	cmp	r2, #3
    9f9e:	d106      	bne.n	9fae <ev_dma_epout0_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9fa0:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    9fa4:	b002      	add	sp, #8
    9fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9faa:	f7ff bbfd 	b.w	97a8 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    9fae:	681c      	ldr	r4, [r3, #0]
    9fb0:	b974      	cbnz	r4, 9fd0 <ev_dma_epout0_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    9fb2:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    9fb6:	f7ff fbf7 	bl	97a8 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9fba:	2306      	movs	r3, #6
    9fbc:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    9fc0:	4b08      	ldr	r3, [pc, #32]	; (9fe4 <ev_dma_epout0_handler+0x54>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    9fc2:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    9fc6:	681b      	ldr	r3, [r3, #0]
    9fc8:	a801      	add	r0, sp, #4
    9fca:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    9fcc:	b002      	add	sp, #8
    9fce:	bd10      	pop	{r4, pc}
    9fd0:	b002      	add	sp, #8
    9fd2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    9fd6:	f7ff bfd3 	b.w	9f80 <nrfx_usbd_setup_data_clear>
    9fda:	bf00      	nop
    9fdc:	20001f04 	.word	0x20001f04
    9fe0:	200019f8 	.word	0x200019f8
    9fe4:	20001b20 	.word	0x20001b20

00009fe8 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9fe8:	4b02      	ldr	r3, [pc, #8]	; (9ff4 <nrfx_usbd_setup_clear+0xc>)
    9fea:	2201      	movs	r2, #1
    9fec:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9fee:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    9ff0:	4770      	bx	lr
    9ff2:	bf00      	nop
    9ff4:	40027000 	.word	0x40027000

00009ff8 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    9ff8:	4b02      	ldr	r3, [pc, #8]	; (a004 <nrfx_usbd_setup_stall+0xc>)
    9ffa:	2201      	movs	r2, #1
    9ffc:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    9ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    a000:	4770      	bx	lr
    a002:	bf00      	nop
    a004:	40027000 	.word	0x40027000

0000a008 <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    a008:	4b01      	ldr	r3, [pc, #4]	; (a010 <nrfx_usbd_last_setup_dir_get+0x8>)
    a00a:	7818      	ldrb	r0, [r3, #0]
    a00c:	4770      	bx	lr
    a00e:	bf00      	nop
    a010:	20001f05 	.word	0x20001f05

0000a014 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    a014:	b510      	push	{r4, lr}
    a016:	4602      	mov	r2, r0
	__asm__ volatile(
    a018:	f04f 0340 	mov.w	r3, #64	; 0x40
    a01c:	f3ef 8411 	mrs	r4, BASEPRI
    a020:	f383 8812 	msr	BASEPRI_MAX, r3
    a024:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    a028:	f003 f8db 	bl	d1e2 <ep2bit>
    a02c:	490d      	ldr	r1, [pc, #52]	; (a064 <nrfx_usbd_transfer_out_drop+0x50>)
    a02e:	2301      	movs	r3, #1
    a030:	fa03 f000 	lsl.w	r0, r3, r0
    a034:	680b      	ldr	r3, [r1, #0]
    a036:	ea23 0300 	bic.w	r3, r3, r0
    a03a:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    a03c:	f012 0108 	ands.w	r1, r2, #8
    a040:	d10a      	bne.n	a058 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    a042:	f002 030f 	and.w	r3, r2, #15
    a046:	009b      	lsls	r3, r3, #2
    a048:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    a04c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    a050:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    a054:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    a058:	f384 8811 	msr	BASEPRI, r4
    a05c:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    a060:	bd10      	pop	{r4, pc}
    a062:	bf00      	nop
    a064:	20001b1c 	.word	0x20001b1c

0000a068 <usbd_ep_abort>:
{
    a068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    a06a:	4601      	mov	r1, r0
	__asm__ volatile(
    a06c:	f04f 0340 	mov.w	r3, #64	; 0x40
    a070:	f3ef 8511 	mrs	r5, BASEPRI
    a074:	f383 8812 	msr	BASEPRI_MAX, r3
    a078:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    a07c:	f7ff fa9a 	bl	95b4 <ep_state_access>
    a080:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    a082:	4608      	mov	r0, r1
    a084:	f003 f8ad 	bl	d1e2 <ep2bit>
    a088:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    a08a:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    a08e:	fa02 f200 	lsl.w	r2, r2, r0
    a092:	482e      	ldr	r0, [pc, #184]	; (a14c <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    a094:	d119      	bne.n	a0ca <usbd_ep_abort+0x62>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    a096:	6803      	ldr	r3, [r0, #0]
    a098:	ea32 0303 	bics.w	r3, r2, r3
    a09c:	d00a      	beq.n	a0b4 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    a09e:	4608      	mov	r0, r1
    a0a0:	f7ff ffb8 	bl	a014 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    a0a4:	2303      	movs	r3, #3
    a0a6:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    a0a8:	f385 8811 	msr	BASEPRI, r5
    a0ac:	f3bf 8f6f 	isb	sy
}
    a0b0:	b003      	add	sp, #12
    a0b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            p_state->handler.consumer = NULL;
    a0b4:	6033      	str	r3, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a0b6:	6803      	ldr	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    a0b8:	4925      	ldr	r1, [pc, #148]	; (a150 <usbd_ep_abort+0xe8>)
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a0ba:	ea23 0302 	bic.w	r3, r3, r2
    a0be:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    a0c0:	680b      	ldr	r3, [r1, #0]
    a0c2:	ea23 0302 	bic.w	r3, r3, r2
    a0c6:	600b      	str	r3, [r1, #0]
    a0c8:	e7ec      	b.n	a0a4 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    a0ca:	070b      	lsls	r3, r1, #28
    a0cc:	d415      	bmi.n	a0fa <usbd_ep_abort+0x92>
            if(ep != NRFX_USBD_EPIN0)
    a0ce:	2980      	cmp	r1, #128	; 0x80
    a0d0:	4b20      	ldr	r3, [pc, #128]	; (a154 <usbd_ep_abort+0xec>)
    a0d2:	d02f      	beq.n	a134 <usbd_ep_abort+0xcc>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    a0d4:	f001 040f 	and.w	r4, r1, #15
    a0d8:	f204 34da 	addw	r4, r4, #986	; 0x3da
    a0dc:	0064      	lsls	r4, r4, #1
    a0de:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a0e2:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a0e6:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a0ea:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a0ec:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a0f0:	433c      	orrs	r4, r7
    a0f2:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    a0f6:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    a0fa:	4f15      	ldr	r7, [pc, #84]	; (a150 <usbd_ep_abort+0xe8>)
    a0fc:	6804      	ldr	r4, [r0, #0]
    a0fe:	683b      	ldr	r3, [r7, #0]
    a100:	ea64 0c03 	orn	ip, r4, r3
    a104:	ea1c 0f02 	tst.w	ip, r2
    a108:	d0ce      	beq.n	a0a8 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    a10a:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a10c:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    a110:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    a112:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a114:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    a116:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    a118:	2303      	movs	r3, #3
    a11a:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    a11c:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    a120:	4b0d      	ldr	r3, [pc, #52]	; (a158 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    a122:	f88d 1006 	strb.w	r1, [sp, #6]
    a126:	2206      	movs	r2, #6
            m_event_handler(&evt);
    a128:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    a12a:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    a12e:	a801      	add	r0, sp, #4
    a130:	4798      	blx	r3
    a132:	e7b9      	b.n	a0a8 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    a134:	f240 74b4 	movw	r4, #1972	; 0x7b4
    a138:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a13c:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a140:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    a144:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    a146:	f044 0404 	orr.w	r4, r4, #4
    a14a:	e7d1      	b.n	a0f0 <usbd_ep_abort+0x88>
    a14c:	20001b18 	.word	0x20001b18
    a150:	20001b1c 	.word	0x20001b1c
    a154:	40027000 	.word	0x40027000
    a158:	20001b20 	.word	0x20001b20

0000a15c <ev_setup_handler>:
{
    a15c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    a15e:	4b14      	ldr	r3, [pc, #80]	; (a1b0 <ev_setup_handler+0x54>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a160:	4c14      	ldr	r4, [pc, #80]	; (a1b4 <ev_setup_handler+0x58>)
    a162:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    a166:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    a168:	4e13      	ldr	r6, [pc, #76]	; (a1b8 <ev_setup_handler+0x5c>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a16a:	43da      	mvns	r2, r3
    a16c:	4b13      	ldr	r3, [pc, #76]	; (a1bc <ev_setup_handler+0x60>)
        & (1U <<ep2bit(m_last_setup_dir)))
    a16e:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a170:	681b      	ldr	r3, [r3, #0]
    a172:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    a174:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a176:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    a178:	f003 f833 	bl	d1e2 <ep2bit>
    a17c:	2301      	movs	r3, #1
    a17e:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    a180:	4213      	tst	r3, r2
    a182:	d002      	beq.n	a18a <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    a184:	4608      	mov	r0, r1
    a186:	f7ff ff6f 	bl	a068 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    a18a:	f025 057f 	bic.w	r5, r5, #127	; 0x7f
    (void)(NRFX_ATOMIC_FETCH_AND(
    a18e:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    a192:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    a194:	f7ff fb08 	bl	97a8 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    a198:	6823      	ldr	r3, [r4, #0]
    a19a:	f043 0301 	orr.w	r3, r3, #1
    a19e:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    a1a0:	2305      	movs	r3, #5
    a1a2:	9301      	str	r3, [sp, #4]
    m_event_handler(&evt);
    a1a4:	4b06      	ldr	r3, [pc, #24]	; (a1c0 <ev_setup_handler+0x64>)
    a1a6:	a801      	add	r0, sp, #4
    a1a8:	681b      	ldr	r3, [r3, #0]
    a1aa:	4798      	blx	r3
}
    a1ac:	b002      	add	sp, #8
    a1ae:	bd70      	pop	{r4, r5, r6, pc}
    a1b0:	40027000 	.word	0x40027000
    a1b4:	20001b1c 	.word	0x20001b1c
    a1b8:	20001f05 	.word	0x20001f05
    a1bc:	20001b18 	.word	0x20001b18
    a1c0:	20001b20 	.word	0x20001b20

0000a1c4 <nrfx_usbd_irq_handler>:
{
    a1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    return p_reg->INTENSET;
    a1c8:	4b1a      	ldr	r3, [pc, #104]	; (a234 <nrfx_usbd_irq_handler+0x70>)
    a1ca:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    a1ce:	2300      	movs	r3, #0
            active |= 1UL << event_nr;
    a1d0:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    a1d2:	461d      	mov	r5, r3
    while (to_process)
    a1d4:	b970      	cbnz	r0, a1f4 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
    a1d6:	4f18      	ldr	r7, [pc, #96]	; (a238 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    a1d8:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    a1dc:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    a1e0:	f04f 0801 	mov.w	r8, #1
    while (active)
    a1e4:	b9bc      	cbnz	r4, a216 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    a1e6:	f7ff fd67 	bl	9cb8 <usbd_dmareq_process>
    if (setup_active)
    a1ea:	b306      	cbz	r6, a22e <nrfx_usbd_irq_handler+0x6a>
}
    a1ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    a1f0:	f7ff bfb4 	b.w	a15c <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    a1f4:	fa90 f2a0 	rbit	r2, r0
    a1f8:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    a1fc:	490f      	ldr	r1, [pc, #60]	; (a23c <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    a1fe:	0096      	lsls	r6, r2, #2
    a200:	4431      	add	r1, r6
            active |= 1UL << event_nr;
    a202:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    a206:	680e      	ldr	r6, [r1, #0]
    if (ret)
    a208:	b116      	cbz	r6, a210 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    a20a:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    a20c:	6809      	ldr	r1, [r1, #0]
    a20e:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    a210:	ea20 0002 	bic.w	r0, r0, r2
    a214:	e7de      	b.n	a1d4 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    a216:	fa94 f5a4 	rbit	r5, r4
    a21a:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    a21e:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    a222:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    a226:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    a228:	ea24 0405 	bic.w	r4, r4, r5
    a22c:	e7da      	b.n	a1e4 <nrfx_usbd_irq_handler+0x20>
}
    a22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a232:	bf00      	nop
    a234:	40027000 	.word	0x40027000
    a238:	0000de98 	.word	0x0000de98
    a23c:	40027100 	.word	0x40027100

0000a240 <nrfx_usbd_stop>:
{
    a240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    a242:	4b1b      	ldr	r3, [pc, #108]	; (a2b0 <nrfx_usbd_stop+0x70>)
    a244:	2280      	movs	r2, #128	; 0x80
    a246:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    a24a:	2027      	movs	r0, #39	; 0x27
    a24c:	f7fa fb64 	bl	4918 <arch_irq_is_enabled>
    a250:	b1b8      	cbz	r0, a282 <nrfx_usbd_stop+0x42>
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    a252:	4e18      	ldr	r6, [pc, #96]	; (a2b4 <nrfx_usbd_stop+0x74>)
    a254:	4b18      	ldr	r3, [pc, #96]	; (a2b8 <nrfx_usbd_stop+0x78>)
    a256:	6834      	ldr	r4, [r6, #0]
    a258:	681b      	ldr	r3, [r3, #0]
    a25a:	0c24      	lsrs	r4, r4, #16
    a25c:	0424      	lsls	r4, r4, #16
    a25e:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
    a260:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    a262:	b97c      	cbnz	r4, a284 <nrfx_usbd_stop+0x44>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    a264:	4d15      	ldr	r5, [pc, #84]	; (a2bc <nrfx_usbd_stop+0x7c>)
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    a266:	f240 13ff 	movw	r3, #511	; 0x1ff
    a26a:	6033      	str	r3, [r6, #0]
        NRFX_IRQ_DISABLE(USBD_IRQn);
    a26c:	2027      	movs	r0, #39	; 0x27
    a26e:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    a272:	f8d5 3504 	ldr.w	r3, [r5, #1284]	; 0x504
    a276:	f7fa fb3b 	bl	48f0 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    a27a:	f04f 33ff 	mov.w	r3, #4294967295
    a27e:	f8c5 3308 	str.w	r3, [r5, #776]	; 0x308
}
    a282:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    a284:	fa94 f5a4 	rbit	r5, r4
    a288:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a28c:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    a28e:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    a290:	bfc6      	itte	gt
    a292:	f1a5 0010 	subgt.w	r0, r5, #16
    a296:	b2c0      	uxtbgt	r0, r0
    a298:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    a29c:	0703      	lsls	r3, r0, #28
    a29e:	d401      	bmi.n	a2a4 <nrfx_usbd_stop+0x64>
            usbd_ep_abort(bit2ep(bitpos));
    a2a0:	f7ff fee2 	bl	a068 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    a2a4:	fa07 f505 	lsl.w	r5, r7, r5
    a2a8:	ea24 0405 	bic.w	r4, r4, r5
    a2ac:	e7d9      	b.n	a262 <nrfx_usbd_stop+0x22>
    a2ae:	bf00      	nop
    a2b0:	e000e100 	.word	0xe000e100
    a2b4:	20001b1c 	.word	0x20001b1c
    a2b8:	20001b18 	.word	0x20001b18
    a2bc:	40027000 	.word	0x40027000

0000a2c0 <nrfx_usbd_disable>:
{
    a2c0:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    a2c2:	f7ff ffbd 	bl	a240 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    a2c6:	4b08      	ldr	r3, [pc, #32]	; (a2e8 <nrfx_usbd_disable+0x28>)
    a2c8:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    a2cc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    a2d0:	2200      	movs	r2, #0
    a2d2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    a2d6:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    m_dma_pending = false;
    a2da:	4b04      	ldr	r3, [pc, #16]	; (a2ec <nrfx_usbd_disable+0x2c>)
    a2dc:	701a      	strb	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    a2de:	4b04      	ldr	r3, [pc, #16]	; (a2f0 <nrfx_usbd_disable+0x30>)
    a2e0:	2201      	movs	r2, #1
    a2e2:	701a      	strb	r2, [r3, #0]
}
    a2e4:	bd08      	pop	{r3, pc}
    a2e6:	bf00      	nop
    a2e8:	40027000 	.word	0x40027000
    a2ec:	20001f04 	.word	0x20001f04
    a2f0:	20001f07 	.word	0x20001f07

0000a2f4 <nrfx_usbd_ep_disable>:
{
    a2f4:	b510      	push	{r4, lr}
    a2f6:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    a2f8:	f7ff feb6 	bl	a068 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    a2fc:	4a10      	ldr	r2, [pc, #64]	; (a340 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    a2fe:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    a302:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    a306:	f04f 0301 	mov.w	r3, #1
    a30a:	bf14      	ite	ne
    a30c:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    a310:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    a314:	fa03 f300 	lsl.w	r3, r3, r0
    a318:	ea6f 0303 	mvn.w	r3, r3
    a31c:	bf15      	itete	ne
    a31e:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    a320:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    a322:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    a326:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    a32a:	bf14      	ite	ne
    a32c:	4b05      	ldrne	r3, [pc, #20]	; (a344 <nrfx_usbd_ep_disable+0x50>)
    a32e:	4b06      	ldreq	r3, [pc, #24]	; (a348 <nrfx_usbd_ep_disable+0x54>)
    a330:	5c1a      	ldrb	r2, [r3, r0]
    a332:	2301      	movs	r3, #1
    a334:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    a336:	4a02      	ldr	r2, [pc, #8]	; (a340 <nrfx_usbd_ep_disable+0x4c>)
    a338:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    a33c:	bd10      	pop	{r4, pc}
    a33e:	bf00      	nop
    a340:	40027000 	.word	0x40027000
    a344:	00010431 	.word	0x00010431
    a348:	00010428 	.word	0x00010428

0000a34c <nrfx_usbd_ep_enable>:
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    a34c:	f010 0f80 	tst.w	r0, #128	; 0x80
{
    a350:	b570      	push	{r4, r5, r6, lr}
    a352:	4924      	ldr	r1, [pc, #144]	; (a3e4 <nrfx_usbd_ep_enable+0x98>)
    a354:	4604      	mov	r4, r0
    a356:	f000 030f 	and.w	r3, r0, #15
    a35a:	f04f 0501 	mov.w	r5, #1
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    a35e:	d012      	beq.n	a386 <nrfx_usbd_ep_enable+0x3a>
    a360:	4a21      	ldr	r2, [pc, #132]	; (a3e8 <nrfx_usbd_ep_enable+0x9c>)
    a362:	5cd2      	ldrb	r2, [r2, r3]
    a364:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    a368:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    a36c:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    a370:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    a372:	07d0      	lsls	r0, r2, #31
    a374:	d406      	bmi.n	a384 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPINEN |= 1UL << epnr;
    a376:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
    a37a:	fa05 f303 	lsl.w	r3, r5, r3
    a37e:	4313      	orrs	r3, r2
    a380:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
}
    a384:	bd70      	pop	{r4, r5, r6, pc}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    a386:	4a19      	ldr	r2, [pc, #100]	; (a3ec <nrfx_usbd_ep_enable+0xa0>)
    a388:	5cd2      	ldrb	r2, [r2, r3]
    a38a:	fa05 f202 	lsl.w	r2, r5, r2
    p_reg->INTENSET = mask;
    a38e:	f8c1 2304 	str.w	r2, [r1, #772]	; 0x304
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    a392:	f8d1 2514 	ldr.w	r2, [r1, #1300]	; 0x514
    a396:	40da      	lsrs	r2, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    a398:	07d2      	lsls	r2, r2, #31
    a39a:	d4f3      	bmi.n	a384 <nrfx_usbd_ep_enable+0x38>
        p_reg->EPOUTEN |= 1UL << epnr;
    a39c:	f8d1 6514 	ldr.w	r6, [r1, #1300]	; 0x514
    a3a0:	fa05 f203 	lsl.w	r2, r5, r3
    a3a4:	4332      	orrs	r2, r6
    a3a6:	f8c1 2514 	str.w	r2, [r1, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    a3aa:	2b00      	cmp	r3, #0
    a3ac:	d0ea      	beq.n	a384 <nrfx_usbd_ep_enable+0x38>
        NRF_USBD_EPOUT_CHECK(ep) &&
    a3ae:	0703      	lsls	r3, r0, #28
    a3b0:	d4e8      	bmi.n	a384 <nrfx_usbd_ep_enable+0x38>
	__asm__ volatile(
    a3b2:	f04f 0340 	mov.w	r3, #64	; 0x40
    a3b6:	f3ef 8611 	mrs	r6, BASEPRI
    a3ba:	f383 8812 	msr	BASEPRI_MAX, r3
    a3be:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    a3c2:	f7ff fe27 	bl	a014 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    a3c6:	4620      	mov	r0, r4
    a3c8:	f002 ff0b 	bl	d1e2 <ep2bit>
    a3cc:	4a08      	ldr	r2, [pc, #32]	; (a3f0 <nrfx_usbd_ep_enable+0xa4>)
    a3ce:	6813      	ldr	r3, [r2, #0]
    a3d0:	fa05 f000 	lsl.w	r0, r5, r0
    a3d4:	ea23 0300 	bic.w	r3, r3, r0
    a3d8:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    a3da:	f386 8811 	msr	BASEPRI, r6
    a3de:	f3bf 8f6f 	isb	sy
}
    a3e2:	e7cf      	b.n	a384 <nrfx_usbd_ep_enable+0x38>
    a3e4:	40027000 	.word	0x40027000
    a3e8:	00010431 	.word	0x00010431
    a3ec:	00010428 	.word	0x00010428
    a3f0:	20001b18 	.word	0x20001b18

0000a3f4 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    a3f4:	0603      	lsls	r3, r0, #24
{
    a3f6:	b510      	push	{r4, lr}
    a3f8:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    a3fa:	d405      	bmi.n	a408 <nrfx_usbd_ep_stall_clear+0x14>
    a3fc:	f7ff fd74 	bl	9ee8 <nrfx_usbd_ep_stall_check>
    a400:	b110      	cbz	r0, a408 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    a402:	4620      	mov	r0, r4
    a404:	f7ff fe06 	bl	a014 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    a408:	4b01      	ldr	r3, [pc, #4]	; (a410 <nrfx_usbd_ep_stall_clear+0x1c>)
    a40a:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    a40e:	bd10      	pop	{r4, pc}
    a410:	40027000 	.word	0x40027000

0000a414 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    a414:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    a416:	4c11      	ldr	r4, [pc, #68]	; (a45c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    a418:	4a11      	ldr	r2, [pc, #68]	; (a460 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    a41a:	4912      	ldr	r1, [pc, #72]	; (a464 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    a41c:	2303      	movs	r3, #3
    a41e:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    a420:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    a422:	4b11      	ldr	r3, [pc, #68]	; (a468 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    a424:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    a426:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    a428:	f44f 6380 	mov.w	r3, #1024	; 0x400
    a42c:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    a42e:	2300      	movs	r3, #0
    a430:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    a432:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    a434:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    a436:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    a438:	4a0c      	ldr	r2, [pc, #48]	; (a46c <_DoInit+0x58>)
    a43a:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    a43c:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    a43e:	2210      	movs	r2, #16
    a440:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    a442:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    a444:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    a446:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    a448:	f002 fb3a 	bl	cac0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    a44c:	4908      	ldr	r1, [pc, #32]	; (a470 <_DoInit+0x5c>)
    a44e:	4620      	mov	r0, r4
    a450:	f002 fb36 	bl	cac0 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    a454:	2320      	movs	r3, #32
    a456:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    a458:	bd10      	pop	{r4, pc}
    a45a:	bf00      	nop
    a45c:	20001b24 	.word	0x20001b24
    a460:	00010444 	.word	0x00010444
    a464:	0001044d 	.word	0x0001044d
    a468:	20001f18 	.word	0x20001f18
    a46c:	20001f08 	.word	0x20001f08
    a470:	00010451 	.word	0x00010451

0000a474 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    a474:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    a478:	4f21      	ldr	r7, [pc, #132]	; (a500 <SEGGER_RTT_WriteSkipNoLock+0x8c>)
    a47a:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    a47e:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    a480:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    a484:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    a486:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    a488:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    a48a:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    a48c:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    a48e:	d831      	bhi.n	a4f4 <SEGGER_RTT_WriteSkipNoLock+0x80>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    a490:	f8d2 a020 	ldr.w	sl, [r2, #32]
    a494:	ebaa 0905 	sub.w	r9, sl, r5
    a498:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    a49c:	4294      	cmp	r4, r2
    a49e:	d811      	bhi.n	a4c4 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    a4a0:	2318      	movs	r3, #24
    a4a2:	fb06 3303 	mla	r3, r6, r3, r3
    a4a6:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    a4a8:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    a4aa:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    a4ac:	4641      	mov	r1, r8
    a4ae:	4428      	add	r0, r5
    a4b0:	f002 fb2c 	bl	cb0c <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    a4b4:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    a4b6:	2318      	movs	r3, #24
    a4b8:	fb03 7306 	mla	r3, r3, r6, r7
      return 1;
    a4bc:	2001      	movs	r0, #1
      pRing->WrOff = NumBytes;
    a4be:	625c      	str	r4, [r3, #36]	; 0x24
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    a4c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    a4c4:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    a4c6:	429c      	cmp	r4, r3
    a4c8:	d818      	bhi.n	a4fc <SEGGER_RTT_WriteSkipNoLock+0x88>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    a4ca:	fb00 bb0b 	mla	fp, r0, fp, fp
    a4ce:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    a4d0:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    a4d2:	f8db 0004 	ldr.w	r0, [fp, #4]
    a4d6:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    a4d8:	4428      	add	r0, r5
    a4da:	f002 fb17 	bl	cb0c <memcpy>
      if (NumBytes) {
    a4de:	ebb4 040a 	subs.w	r4, r4, sl
    a4e2:	d0e8      	beq.n	a4b6 <SEGGER_RTT_WriteSkipNoLock+0x42>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    a4e4:	f8db 0004 	ldr.w	r0, [fp, #4]
    a4e8:	4622      	mov	r2, r4
    a4ea:	eb08 0109 	add.w	r1, r8, r9
    a4ee:	f002 fb0d 	bl	cb0c <memcpy>
      return 1;
    a4f2:	e7e0      	b.n	a4b6 <SEGGER_RTT_WriteSkipNoLock+0x42>
    Avail = RdOff - WrOff - 1u;
    a4f4:	3b01      	subs	r3, #1
    a4f6:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    a4f8:	42a3      	cmp	r3, r4
    a4fa:	d2d1      	bcs.n	a4a0 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    a4fc:	2000      	movs	r0, #0
    a4fe:	e7df      	b.n	a4c0 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    a500:	20001b24 	.word	0x20001b24

0000a504 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    a504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    a506:	4b14      	ldr	r3, [pc, #80]	; (a558 <SEGGER_RTT_WriteNoLock+0x54>)
    a508:	2718      	movs	r7, #24
    a50a:	fb00 7507 	mla	r5, r0, r7, r7
    a50e:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    a510:	fb07 3300 	mla	r3, r7, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    a514:	460e      	mov	r6, r1
  switch (pRing->Flags) {
    a516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    a518:	2b01      	cmp	r3, #1
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    a51a:	4614      	mov	r4, r2
  switch (pRing->Flags) {
    a51c:	d00a      	beq.n	a534 <SEGGER_RTT_WriteNoLock+0x30>
    a51e:	2b02      	cmp	r3, #2
    a520:	d014      	beq.n	a54c <SEGGER_RTT_WriteNoLock+0x48>
    a522:	b923      	cbnz	r3, a52e <SEGGER_RTT_WriteNoLock+0x2a>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    a524:	4628      	mov	r0, r5
    a526:	f002 feaf 	bl	d288 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    a52a:	4284      	cmp	r4, r0
    a52c:	d908      	bls.n	a540 <SEGGER_RTT_WriteNoLock+0x3c>
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
    break;
  default:
    Status = 0u;
    a52e:	2400      	movs	r4, #0
  }
  //
  // Finish up.
  //
  return Status;
}
    a530:	4620      	mov	r0, r4
    a532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    Avail = _GetAvailWriteSpace(pRing);
    a534:	4628      	mov	r0, r5
    a536:	f002 fea7 	bl	d288 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    a53a:	4284      	cmp	r4, r0
    a53c:	bf28      	it	cs
    a53e:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    a540:	4622      	mov	r2, r4
    a542:	4631      	mov	r1, r6
    a544:	4628      	mov	r0, r5
    a546:	f002 fea8 	bl	d29a <_WriteNoCheck>
    break;
    a54a:	e7f1      	b.n	a530 <SEGGER_RTT_WriteNoLock+0x2c>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    a54c:	4628      	mov	r0, r5
}
    a54e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    a552:	f002 bebd 	b.w	d2d0 <_WriteBlocking>
    a556:	bf00      	nop
    a558:	20001b24 	.word	0x20001b24

0000a55c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    a55c:	4b03      	ldr	r3, [pc, #12]	; (a56c <SEGGER_RTT_HasDataUp+0x10>)
    a55e:	2218      	movs	r2, #24
    a560:	fb02 3300 	mla	r3, r2, r0, r3
    a564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    a566:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    a568:	1a80      	subs	r0, r0, r2
    a56a:	4770      	bx	lr
    a56c:	20001b24 	.word	0x20001b24

0000a570 <zephyr_rtt_mutex_lock>:
	return z_impl_k_mutex_lock(mutex, timeout);
    a570:	4803      	ldr	r0, [pc, #12]	; (a580 <zephyr_rtt_mutex_lock+0x10>)
    a572:	f04f 32ff 	mov.w	r2, #4294967295
    a576:	f04f 33ff 	mov.w	r3, #4294967295
    a57a:	f000 bab7 	b.w	aaec <z_impl_k_mutex_lock>
    a57e:	bf00      	nop
    a580:	200002e8 	.word	0x200002e8

0000a584 <zephyr_rtt_mutex_unlock>:
	return z_impl_k_mutex_unlock(mutex);
    a584:	4801      	ldr	r0, [pc, #4]	; (a58c <zephyr_rtt_mutex_unlock+0x8>)
    a586:	f000 bb2b 	b.w	abe0 <z_impl_k_mutex_unlock>
    a58a:	bf00      	nop
    a58c:	200002e8 	.word	0x200002e8

0000a590 <z_impl_device_get_binding>:
		++dev;
	}
}

const struct device *z_impl_device_get_binding(const char *name)
{
    a590:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    a592:	4605      	mov	r5, r0
    a594:	b910      	cbnz	r0, a59c <z_impl_device_get_binding+0xc>
		return NULL;
    a596:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    a598:	4620      	mov	r0, r4
    a59a:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    a59c:	7803      	ldrb	r3, [r0, #0]
    a59e:	2b00      	cmp	r3, #0
    a5a0:	d0f9      	beq.n	a596 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    a5a2:	4c0e      	ldr	r4, [pc, #56]	; (a5dc <z_impl_device_get_binding+0x4c>)
    a5a4:	4e0e      	ldr	r6, [pc, #56]	; (a5e0 <z_impl_device_get_binding+0x50>)
    a5a6:	42b4      	cmp	r4, r6
    a5a8:	d108      	bne.n	a5bc <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    a5aa:	4c0c      	ldr	r4, [pc, #48]	; (a5dc <z_impl_device_get_binding+0x4c>)
    a5ac:	42b4      	cmp	r4, r6
    a5ae:	d0f2      	beq.n	a596 <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    a5b0:	4620      	mov	r0, r4
    a5b2:	f002 febf 	bl	d334 <z_device_is_ready>
    a5b6:	b950      	cbnz	r0, a5ce <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    a5b8:	3418      	adds	r4, #24
    a5ba:	e7f7      	b.n	a5ac <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    a5bc:	4620      	mov	r0, r4
    a5be:	f002 feb9 	bl	d334 <z_device_is_ready>
    a5c2:	b110      	cbz	r0, a5ca <z_impl_device_get_binding+0x3a>
    a5c4:	6823      	ldr	r3, [r4, #0]
    a5c6:	42ab      	cmp	r3, r5
    a5c8:	d0e6      	beq.n	a598 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    a5ca:	3418      	adds	r4, #24
    a5cc:	e7eb      	b.n	a5a6 <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    a5ce:	6821      	ldr	r1, [r4, #0]
    a5d0:	4628      	mov	r0, r5
    a5d2:	f002 fa8f 	bl	caf4 <strcmp>
    a5d6:	2800      	cmp	r0, #0
    a5d8:	d1ee      	bne.n	a5b8 <z_impl_device_get_binding+0x28>
    a5da:	e7dd      	b.n	a598 <z_impl_device_get_binding+0x8>
    a5dc:	0000daa4 	.word	0x0000daa4
    a5e0:	0000db1c 	.word	0x0000db1c

0000a5e4 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    a5e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a5e8:	b086      	sub	sp, #24
    a5ea:	4605      	mov	r5, r0
    a5ec:	af00      	add	r7, sp, #0
    a5ee:	460e      	mov	r6, r1
	__asm__ volatile(
    a5f0:	f04f 0340 	mov.w	r3, #64	; 0x40
    a5f4:	f3ef 8811 	mrs	r8, BASEPRI
    a5f8:	f383 8812 	msr	BASEPRI_MAX, r3
    a5fc:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    a600:	f001 f814 	bl	b62c <z_impl_z_current_get>
    a604:	2d04      	cmp	r5, #4
    a606:	bf96      	itet	ls
    a608:	4b2c      	ldrls	r3, [pc, #176]	; (a6bc <z_fatal_error+0xd8>)
    a60a:	4b2d      	ldrhi	r3, [pc, #180]	; (a6c0 <z_fatal_error+0xdc>)
    a60c:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    a610:	46e9      	mov	r9, sp
    a612:	b08a      	sub	sp, #40	; 0x28
    a614:	4604      	mov	r4, r0
    a616:	466a      	mov	r2, sp
    a618:	492a      	ldr	r1, [pc, #168]	; (a6c4 <z_fatal_error+0xe0>)
    a61a:	61d3      	str	r3, [r2, #28]
    a61c:	f240 3301 	movw	r3, #769	; 0x301
    a620:	8493      	strh	r3, [r2, #36]	; 0x24
    a622:	f04f 0a00 	mov.w	sl, #0
    a626:	4b28      	ldr	r3, [pc, #160]	; (a6c8 <z_fatal_error+0xe4>)
    a628:	f8c2 a020 	str.w	sl, [r2, #32]
    a62c:	e9c2 1505 	strd	r1, r5, [r2, #20]
    a630:	f842 3f10 	str.w	r3, [r2, #16]!
    a634:	4825      	ldr	r0, [pc, #148]	; (a6cc <z_fatal_error+0xe8>)
    a636:	4653      	mov	r3, sl
    a638:	f44f 5131 	mov.w	r1, #11328	; 0x2c40
    a63c:	f7f8 fd20 	bl	3080 <z_impl_z_log_msg_static_create>
    a640:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    a642:	b17e      	cbz	r6, a664 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    a644:	69f3      	ldr	r3, [r6, #28]
    a646:	f3c3 0308 	ubfx	r3, r3, #0, #9
    a64a:	b15b      	cbz	r3, a664 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    a64c:	4b20      	ldr	r3, [pc, #128]	; (a6d0 <z_fatal_error+0xec>)
    a64e:	617b      	str	r3, [r7, #20]
    a650:	2302      	movs	r3, #2
    a652:	613b      	str	r3, [r7, #16]
    a654:	481d      	ldr	r0, [pc, #116]	; (a6cc <z_fatal_error+0xe8>)
    a656:	4653      	mov	r3, sl
    a658:	f107 0210 	add.w	r2, r7, #16
    a65c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    a660:	f7f8 fd0e 	bl	3080 <z_impl_z_log_msg_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    a664:	b12c      	cbz	r4, a672 <z_fatal_error+0x8e>
    a666:	4620      	mov	r0, r4
    a668:	f002 febb 	bl	d3e2 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    a66c:	b108      	cbz	r0, a672 <z_fatal_error+0x8e>
    a66e:	7803      	ldrb	r3, [r0, #0]
    a670:	b903      	cbnz	r3, a674 <z_fatal_error+0x90>
		thread_name = "unknown";
    a672:	4818      	ldr	r0, [pc, #96]	; (a6d4 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    a674:	46e9      	mov	r9, sp
    a676:	b08a      	sub	sp, #40	; 0x28
    a678:	466a      	mov	r2, sp
    a67a:	4b17      	ldr	r3, [pc, #92]	; (a6d8 <z_fatal_error+0xf4>)
    a67c:	61d0      	str	r0, [r2, #28]
    a67e:	e9c2 3405 	strd	r3, r4, [r2, #20]
    a682:	f240 3301 	movw	r3, #769	; 0x301
    a686:	8413      	strh	r3, [r2, #32]
    a688:	4b14      	ldr	r3, [pc, #80]	; (a6dc <z_fatal_error+0xf8>)
    a68a:	f842 3f10 	str.w	r3, [r2, #16]!
    a68e:	2300      	movs	r3, #0
    a690:	480e      	ldr	r0, [pc, #56]	; (a6cc <z_fatal_error+0xe8>)
    a692:	f44f 5111 	mov.w	r1, #9280	; 0x2440
    a696:	f7f8 fcf3 	bl	3080 <z_impl_z_log_msg_static_create>

#ifndef CONFIG_XTENSA
	coredump(reason, esf, thread);
#endif

	k_sys_fatal_error_handler(reason, esf);
    a69a:	4631      	mov	r1, r6
    a69c:	46cd      	mov	sp, r9
    a69e:	4628      	mov	r0, r5
    a6a0:	f7fc fdec 	bl	727c <k_sys_fatal_error_handler>
	__asm__ volatile(
    a6a4:	f388 8811 	msr	BASEPRI, r8
    a6a8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    a6ac:	4620      	mov	r0, r4
    a6ae:	f7fa fda1 	bl	51f4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    a6b2:	3718      	adds	r7, #24
    a6b4:	46bd      	mov	sp, r7
    a6b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a6ba:	bf00      	nop
    a6bc:	0000df00 	.word	0x0000df00
    a6c0:	00010458 	.word	0x00010458
    a6c4:	0001046e 	.word	0x0001046e
    a6c8:	01000005 	.word	0x01000005
    a6cc:	0000dbd4 	.word	0x0000dbd4
    a6d0:	00010496 	.word	0x00010496
    a6d4:	00010466 	.word	0x00010466
    a6d8:	000104b7 	.word	0x000104b7
    a6dc:	01000004 	.word	0x01000004

0000a6e0 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a6e0:	4b10      	ldr	r3, [pc, #64]	; (a724 <z_sys_init_run_level+0x44>)
{
    a6e2:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a6e4:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    a6e8:	3001      	adds	r0, #1
    a6ea:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    a6ee:	42a6      	cmp	r6, r4
    a6f0:	d800      	bhi.n	a6f4 <z_sys_init_run_level+0x14>
			}
		} else {
			(void)entry->init_fn.sys();
		}
	}
}
    a6f2:	bd70      	pop	{r4, r5, r6, pc}
			int rc = entry->init_fn.dev(dev);
    a6f4:	e9d4 3500 	ldrd	r3, r5, [r4]
		if (dev != NULL) {
    a6f8:	b18d      	cbz	r5, a71e <z_sys_init_run_level+0x3e>
			int rc = entry->init_fn.dev(dev);
    a6fa:	4628      	mov	r0, r5
    a6fc:	4798      	blx	r3
			if (rc != 0) {
    a6fe:	b138      	cbz	r0, a710 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    a700:	2800      	cmp	r0, #0
    a702:	bfb8      	it	lt
    a704:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    a706:	68eb      	ldr	r3, [r5, #12]
				if (rc > UINT8_MAX) {
    a708:	28ff      	cmp	r0, #255	; 0xff
    a70a:	bfa8      	it	ge
    a70c:	20ff      	movge	r0, #255	; 0xff
				dev->state->init_res = rc;
    a70e:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    a710:	68ea      	ldr	r2, [r5, #12]
    a712:	7853      	ldrb	r3, [r2, #1]
    a714:	f043 0301 	orr.w	r3, r3, #1
    a718:	7053      	strb	r3, [r2, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    a71a:	3408      	adds	r4, #8
    a71c:	e7e7      	b.n	a6ee <z_sys_init_run_level+0xe>
			(void)entry->init_fn.sys();
    a71e:	4798      	blx	r3
    a720:	e7fb      	b.n	a71a <z_sys_init_run_level+0x3a>
    a722:	bf00      	nop
    a724:	0000df14 	.word	0x0000df14

0000a728 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    a728:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    a72a:	4b0a      	ldr	r3, [pc, #40]	; (a754 <bg_thread_main+0x2c>)
    a72c:	2201      	movs	r2, #1

	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    a72e:	2003      	movs	r0, #3
	z_sys_post_kernel = true;
    a730:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(INIT_LEVEL_POST_KERNEL);
    a732:	f7ff ffd5 	bl	a6e0 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    a736:	f001 fa0d 	bl	bb54 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(INIT_LEVEL_APPLICATION);
    a73a:	2004      	movs	r0, #4
    a73c:	f7ff ffd0 	bl	a6e0 <z_sys_init_run_level>

	z_init_static_threads();
    a740:	f000 f95c 	bl	a9fc <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern int main(void);

	(void)main();
    a744:	f7f6 f8f8 	bl	938 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    a748:	4a03      	ldr	r2, [pc, #12]	; (a758 <bg_thread_main+0x30>)
    a74a:	7b13      	ldrb	r3, [r2, #12]
    a74c:	f023 0301 	bic.w	r3, r3, #1
    a750:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    a752:	bd08      	pop	{r3, pc}
    a754:	20002318 	.word	0x20002318
    a758:	20000a40 	.word	0x20000a40

0000a75c <z_bss_zero>:
{
    a75c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    a75e:	4803      	ldr	r0, [pc, #12]	; (a76c <z_bss_zero+0x10>)
    a760:	4a03      	ldr	r2, [pc, #12]	; (a770 <z_bss_zero+0x14>)
    a762:	2100      	movs	r1, #0
    a764:	1a12      	subs	r2, r2, r0
    a766:	f002 fdf0 	bl	d34a <z_early_memset>
}
    a76a:	bd08      	pop	{r3, pc}
    a76c:	200003e8 	.word	0x200003e8
    a770:	2000231c 	.word	0x2000231c

0000a774 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    a774:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    a776:	2300      	movs	r3, #0
{
    a778:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    a77a:	2201      	movs	r2, #1
    a77c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    a780:	4e13      	ldr	r6, [pc, #76]	; (a7d0 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    a782:	4d14      	ldr	r5, [pc, #80]	; (a7d4 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    a784:	9301      	str	r3, [sp, #4]
    a786:	220f      	movs	r2, #15
    a788:	e9cd 3202 	strd	r3, r2, [sp, #8]
    a78c:	4912      	ldr	r1, [pc, #72]	; (a7d8 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    a78e:	2314      	movs	r3, #20
    a790:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    a794:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    a798:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    a79a:	f44f 70a0 	mov.w	r0, #320	; 0x140
    a79e:	fb00 1104 	mla	r1, r0, r4, r1
    a7a2:	4b0e      	ldr	r3, [pc, #56]	; (a7dc <z_init_cpu+0x68>)
    a7a4:	9500      	str	r5, [sp, #0]
    a7a6:	f44f 7280 	mov.w	r2, #256	; 0x100
    a7aa:	4630      	mov	r0, r6
    a7ac:	f000 f8c8 	bl	a940 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    a7b0:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    a7b2:	4a0b      	ldr	r2, [pc, #44]	; (a7e0 <z_init_cpu+0x6c>)
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    a7b4:	60ee      	str	r6, [r5, #12]
    a7b6:	f023 0304 	bic.w	r3, r3, #4
    a7ba:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    a7bc:	f44f 6304 	mov.w	r3, #2112	; 0x840
    a7c0:	fb04 3303 	mla	r3, r4, r3, r3
    a7c4:	4413      	add	r3, r2
	_kernel.cpus[id].id = id;
    a7c6:	742c      	strb	r4, [r5, #16]
	_kernel.cpus[id].irq_stack =
    a7c8:	606b      	str	r3, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    a7ca:	b006      	add	sp, #24
    a7cc:	bd70      	pop	{r4, r5, r6, pc}
    a7ce:	bf00      	nop
    a7d0:	200009c0 	.word	0x200009c0
    a7d4:	20001bcc 	.word	0x20001bcc
    a7d8:	20003300 	.word	0x20003300
    a7dc:	0000aab5 	.word	0x0000aab5
    a7e0:	20002ac0 	.word	0x20002ac0

0000a7e4 <z_cstart>:
 * @return Does not return
 */
__boot_func
FUNC_NO_STACK_PROTECTOR
FUNC_NORETURN void z_cstart(void)
{
    a7e4:	b580      	push	{r7, lr}
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	/* initialize early init calls */
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    a7e6:	2000      	movs	r0, #0
{
    a7e8:	b0a6      	sub	sp, #152	; 0x98
	z_sys_init_run_level(INIT_LEVEL_EARLY);
    a7ea:	f7ff ff79 	bl	a6e0 <z_sys_init_run_level>
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    a7ee:	4b2d      	ldr	r3, [pc, #180]	; (a8a4 <z_cstart+0xc0>)
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    a7f0:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    a7f4:	4d2c      	ldr	r5, [pc, #176]	; (a8a8 <z_cstart+0xc4>)

#ifdef CONFIG_TIMESLICE_PER_THREAD
	dummy_thread->base.slice_ticks = 0;
#endif

	_current_cpu->current = dummy_thread;
    a7f6:	4e2d      	ldr	r6, [pc, #180]	; (a8ac <z_cstart+0xc8>)
    a7f8:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a7fa:	4f2d      	ldr	r7, [pc, #180]	; (a8b0 <z_cstart+0xcc>)
    a7fc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    a800:	616b      	str	r3, [r5, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    a802:	23e0      	movs	r3, #224	; 0xe0
    a804:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    a808:	2400      	movs	r4, #0
    a80a:	2320      	movs	r3, #32
    a80c:	77eb      	strb	r3, [r5, #31]
    a80e:	762c      	strb	r4, [r5, #24]
    a810:	766c      	strb	r4, [r5, #25]
    a812:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    a814:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    a816:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    a81a:	626b      	str	r3, [r5, #36]	; 0x24
    a81c:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    a820:	f7fa fc5c 	bl	50dc <z_arm_fault_init>
	z_arm_cpu_idle_init();
    a824:	f7f9 ffdc 	bl	47e0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    a828:	f04f 33ff 	mov.w	r3, #4294967295
    a82c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    a82e:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    a830:	f7fa fdb0 	bl	5394 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    a834:	f7fa fcf4 	bl	5220 <z_arm_configure_static_mpu_regions>

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    a838:	f7f8 faae 	bl	2d98 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    a83c:	f240 1301 	movw	r3, #257	; 0x101
    a840:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    a844:	ab06      	add	r3, sp, #24
    a846:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    a848:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    a84c:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    a84e:	f002 fd70 	bl	d332 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_1);
    a852:	2001      	movs	r0, #1
    a854:	f7ff ff44 	bl	a6e0 <z_sys_init_run_level>
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    a858:	2002      	movs	r0, #2
	_kernel.ready_q.cache = &z_main_thread;
    a85a:	4d16      	ldr	r5, [pc, #88]	; (a8b4 <z_cstart+0xd0>)
	z_sys_init_run_level(INIT_LEVEL_PRE_KERNEL_2);
    a85c:	f7ff ff40 	bl	a6e0 <z_sys_init_run_level>
	z_sched_init();
    a860:	f000 fe26 	bl	b4b0 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a864:	4b14      	ldr	r3, [pc, #80]	; (a8b8 <z_cstart+0xd4>)
	_kernel.ready_q.cache = &z_main_thread;
    a866:	61b5      	str	r5, [r6, #24]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    a868:	9305      	str	r3, [sp, #20]
    a86a:	2301      	movs	r3, #1
    a86c:	4913      	ldr	r1, [pc, #76]	; (a8bc <z_cstart+0xd8>)
    a86e:	9400      	str	r4, [sp, #0]
    a870:	e9cd 4303 	strd	r4, r3, [sp, #12]
    a874:	f44f 6280 	mov.w	r2, #1024	; 0x400
    a878:	463b      	mov	r3, r7
    a87a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    a87e:	4628      	mov	r0, r5
    a880:	f000 f85e 	bl	a940 <z_setup_new_thread>
    a884:	7b6a      	ldrb	r2, [r5, #13]
    a886:	4606      	mov	r6, r0
    a888:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    a88c:	4628      	mov	r0, r5
    a88e:	736a      	strb	r2, [r5, #13]
    a890:	f002 fef3 	bl	d67a <z_ready_thread>
	z_init_cpu(0);
    a894:	4620      	mov	r0, r4
    a896:	f7ff ff6d 	bl	a774 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    a89a:	463a      	mov	r2, r7
    a89c:	4631      	mov	r1, r6
    a89e:	4628      	mov	r0, r5
    a8a0:	f7fa f910 	bl	4ac4 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    a8a4:	20003300 	.word	0x20003300
    a8a8:	e000ed00 	.word	0xe000ed00
    a8ac:	20001bcc 	.word	0x20001bcc
    a8b0:	0000a729 	.word	0x0000a729
    a8b4:	20000a40 	.word	0x20000a40
    a8b8:	0000e032 	.word	0x0000e032
    a8bc:	20003440 	.word	0x20003440

0000a8c0 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(void)
{
    a8c0:	b538      	push	{r3, r4, r5, lr}
	int rc = 0;

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a8c2:	4c06      	ldr	r4, [pc, #24]	; (a8dc <init_mem_slab_module+0x1c>)
    a8c4:	4d06      	ldr	r5, [pc, #24]	; (a8e0 <init_mem_slab_module+0x20>)
	int rc = 0;
    a8c6:	2000      	movs	r0, #0
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a8c8:	42ac      	cmp	r4, r5
    a8ca:	d300      	bcc.n	a8ce <init_mem_slab_module+0xe>
		z_object_init(slab);
	}

out:
	return rc;
}
    a8cc:	bd38      	pop	{r3, r4, r5, pc}
		rc = create_free_list(slab);
    a8ce:	4620      	mov	r0, r4
    a8d0:	f002 fd3f 	bl	d352 <create_free_list>
		if (rc < 0) {
    a8d4:	2800      	cmp	r0, #0
    a8d6:	dbf9      	blt.n	a8cc <init_mem_slab_module+0xc>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    a8d8:	341c      	adds	r4, #28
    a8da:	e7f5      	b.n	a8c8 <init_mem_slab_module+0x8>
    a8dc:	200002cc 	.word	0x200002cc
    a8e0:	200002e8 	.word	0x200002e8

0000a8e4 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    a8e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    a8e6:	460c      	mov	r4, r1
	__asm__ volatile(
    a8e8:	f04f 0540 	mov.w	r5, #64	; 0x40
    a8ec:	f3ef 8111 	mrs	r1, BASEPRI
    a8f0:	f385 8812 	msr	BASEPRI_MAX, r5
    a8f4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    a8f8:	6945      	ldr	r5, [r0, #20]
    a8fa:	b15d      	cbz	r5, a914 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    a8fc:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    a8fe:	682b      	ldr	r3, [r5, #0]
    a900:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    a902:	6983      	ldr	r3, [r0, #24]
    a904:	3301      	adds	r3, #1
    a906:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    a908:	2000      	movs	r0, #0
	__asm__ volatile(
    a90a:	f381 8811 	msr	BASEPRI, r1
    a90e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    a912:	e011      	b.n	a938 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    a914:	ea52 0603 	orrs.w	r6, r2, r3
    a918:	d103      	bne.n	a922 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    a91a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    a91c:	f06f 000b 	mvn.w	r0, #11
    a920:	e7f3      	b.n	a90a <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    a922:	e9cd 2300 	strd	r2, r3, [sp]
    a926:	4602      	mov	r2, r0
    a928:	3008      	adds	r0, #8
    a92a:	f000 fccb 	bl	b2c4 <z_pend_curr>
		if (result == 0) {
    a92e:	b918      	cbnz	r0, a938 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    a930:	4b02      	ldr	r3, [pc, #8]	; (a93c <k_mem_slab_alloc+0x58>)
    a932:	689b      	ldr	r3, [r3, #8]
    a934:	695b      	ldr	r3, [r3, #20]
    a936:	6023      	str	r3, [r4, #0]
}
    a938:	b002      	add	sp, #8
    a93a:	bd70      	pop	{r4, r5, r6, pc}
    a93c:	20001bcc 	.word	0x20001bcc

0000a940 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    a940:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    a944:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    a946:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    a948:	2604      	movs	r6, #4
    a94a:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    a94c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    a94e:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    a950:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    a954:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    a956:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    a958:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a95c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    a95e:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    a960:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    a964:	3740      	adds	r7, #64	; 0x40
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    a966:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    a96a:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    a96e:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    a970:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    a972:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    a974:	f106 0840 	add.w	r8, r6, #64	; 0x40
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a978:	9202      	str	r2, [sp, #8]
    a97a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    a97c:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    a97e:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a980:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    a982:	9200      	str	r2, [sp, #0]
    a984:	4642      	mov	r2, r8
{
    a986:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    a988:	f7fa f86a 	bl	4a60 <arch_new_thread>
	if (!_current) {
    a98c:	4b04      	ldr	r3, [pc, #16]	; (a9a0 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    a98e:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    a990:	689b      	ldr	r3, [r3, #8]
    a992:	b103      	cbz	r3, a996 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    a994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    a996:	6723      	str	r3, [r4, #112]	; 0x70
}
    a998:	4640      	mov	r0, r8
    a99a:	b004      	add	sp, #16
    a99c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a9a0:	20001bcc 	.word	0x20001bcc

0000a9a4 <z_impl_k_thread_create>:
{
    a9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a9a6:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a9a8:	2500      	movs	r5, #0
    a9aa:	9505      	str	r5, [sp, #20]
    a9ac:	9d10      	ldr	r5, [sp, #64]	; 0x40
    a9ae:	9504      	str	r5, [sp, #16]
    a9b0:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
    a9b2:	9503      	str	r5, [sp, #12]
    a9b4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    a9b6:	9502      	str	r5, [sp, #8]
{
    a9b8:	e9dd 7612 	ldrd	r7, r6, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a9bc:	9d0d      	ldr	r5, [sp, #52]	; 0x34
    a9be:	9501      	str	r5, [sp, #4]
    a9c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
    a9c2:	9500      	str	r5, [sp, #0]
{
    a9c4:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    a9c6:	f7ff ffbb 	bl	a940 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    a9ca:	f1b6 3fff 	cmp.w	r6, #4294967295
    a9ce:	bf08      	it	eq
    a9d0:	f1b7 3fff 	cmpeq.w	r7, #4294967295
    a9d4:	d005      	beq.n	a9e2 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    a9d6:	ea56 0307 	orrs.w	r3, r6, r7
    a9da:	d105      	bne.n	a9e8 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    a9dc:	4620      	mov	r0, r4
    a9de:	f000 fce7 	bl	b3b0 <z_sched_start>
}
    a9e2:	4620      	mov	r0, r4
    a9e4:	b007      	add	sp, #28
    a9e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    a9e8:	4903      	ldr	r1, [pc, #12]	; (a9f8 <z_impl_k_thread_create+0x54>)
    a9ea:	463a      	mov	r2, r7
    a9ec:	4633      	mov	r3, r6
    a9ee:	f104 0018 	add.w	r0, r4, #24
    a9f2:	f000 fef3 	bl	b7dc <z_add_timeout>
    a9f6:	e7f4      	b.n	a9e2 <z_impl_k_thread_create+0x3e>
    a9f8:	0000d703 	.word	0x0000d703

0000a9fc <z_init_static_threads>:
{
    a9fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    aa00:	4c29      	ldr	r4, [pc, #164]	; (aaa8 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    aa02:	4d2a      	ldr	r5, [pc, #168]	; (aaac <z_init_static_threads+0xb0>)
{
    aa04:	b087      	sub	sp, #28
    aa06:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    aa08:	42ae      	cmp	r6, r5
    aa0a:	f104 042c 	add.w	r4, r4, #44	; 0x2c
    aa0e:	d30f      	bcc.n	aa30 <z_init_static_threads+0x34>
	k_sched_lock();
    aa10:	f000 fd1e 	bl	b450 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    aa14:	4c24      	ldr	r4, [pc, #144]	; (aaa8 <z_init_static_threads+0xac>)
    aa16:	f8df 9098 	ldr.w	r9, [pc, #152]	; aab0 <z_init_static_threads+0xb4>
			return ((t * to_hz + off) / from_hz);
    aa1a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    aa1e:	f240 37e7 	movw	r7, #999	; 0x3e7
    aa22:	42ac      	cmp	r4, r5
    aa24:	d320      	bcc.n	aa68 <z_init_static_threads+0x6c>
}
    aa26:	b007      	add	sp, #28
    aa28:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    aa2c:	f000 bd24 	b.w	b478 <k_sched_unlock>
		z_setup_new_thread(
    aa30:	f854 3c04 	ldr.w	r3, [r4, #-4]
    aa34:	9305      	str	r3, [sp, #20]
    aa36:	f854 3c0c 	ldr.w	r3, [r4, #-12]
    aa3a:	9304      	str	r3, [sp, #16]
    aa3c:	f854 3c10 	ldr.w	r3, [r4, #-16]
    aa40:	9303      	str	r3, [sp, #12]
    aa42:	f854 3c14 	ldr.w	r3, [r4, #-20]
    aa46:	9302      	str	r3, [sp, #8]
    aa48:	f854 3c18 	ldr.w	r3, [r4, #-24]
    aa4c:	9301      	str	r3, [sp, #4]
    aa4e:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    aa52:	9300      	str	r3, [sp, #0]
    aa54:	e954 2309 	ldrd	r2, r3, [r4, #-36]	; 0x24
    aa58:	e954 010b 	ldrd	r0, r1, [r4, #-44]	; 0x2c
    aa5c:	f7ff ff70 	bl	a940 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    aa60:	f854 3c2c 	ldr.w	r3, [r4, #-44]
    aa64:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    aa66:	e7ce      	b.n	aa06 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    aa68:	6a63      	ldr	r3, [r4, #36]	; 0x24
    aa6a:	1c5a      	adds	r2, r3, #1
    aa6c:	d00d      	beq.n	aa8a <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    aa6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    aa72:	2100      	movs	r1, #0
    aa74:	4638      	mov	r0, r7
    aa76:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    aa7a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    aa7e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    aa82:	d104      	bne.n	aa8e <z_init_static_threads+0x92>
	z_sched_start(thread);
    aa84:	4640      	mov	r0, r8
    aa86:	f000 fc93 	bl	b3b0 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    aa8a:	342c      	adds	r4, #44	; 0x2c
    aa8c:	e7c9      	b.n	aa22 <z_init_static_threads+0x26>
    aa8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    aa92:	2300      	movs	r3, #0
    aa94:	f7f5 fb24 	bl	e0 <__aeabi_uldivmod>
    aa98:	4602      	mov	r2, r0
    aa9a:	460b      	mov	r3, r1
    aa9c:	f108 0018 	add.w	r0, r8, #24
    aaa0:	4649      	mov	r1, r9
    aaa2:	f000 fe9b 	bl	b7dc <z_add_timeout>
    aaa6:	e7f0      	b.n	aa8a <z_init_static_threads+0x8e>
    aaa8:	0000db1c 	.word	0x0000db1c
    aaac:	0000db1c 	.word	0x0000db1c
    aab0:	0000d703 	.word	0x0000d703

0000aab4 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    aab4:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    aab6:	4c0b      	ldr	r4, [pc, #44]	; (aae4 <idle+0x30>)
    aab8:	4d0b      	ldr	r5, [pc, #44]	; (aae8 <idle+0x34>)
	__asm__ volatile(
    aaba:	f04f 0240 	mov.w	r2, #64	; 0x40
    aabe:	f3ef 8311 	mrs	r3, BASEPRI
    aac2:	f382 8812 	msr	BASEPRI_MAX, r2
    aac6:	f3bf 8f6f 	isb	sy
    aaca:	f002 fec8 	bl	d85e <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    aace:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    aad0:	6160      	str	r0, [r4, #20]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    aad2:	b913      	cbnz	r3, aada <idle+0x26>
 * @note In some architectures, before returning, the function unmasks interrupts
 * unconditionally.
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    aad4:	f7f9 fe8a 	bl	47ec <arch_cpu_idle>
}
    aad8:	e7ef      	b.n	aaba <idle+0x6>
    aada:	f7f8 fe73 	bl	37c4 <pm_system_suspend>
    aade:	2800      	cmp	r0, #0
    aae0:	d1eb      	bne.n	aaba <idle+0x6>
    aae2:	e7f7      	b.n	aad4 <idle+0x20>
    aae4:	20001bcc 	.word	0x20001bcc
    aae8:	20002318 	.word	0x20002318

0000aaec <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    aaec:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    aaf0:	4604      	mov	r4, r0
    aaf2:	4617      	mov	r7, r2
    aaf4:	461e      	mov	r6, r3
    aaf6:	f04f 0340 	mov.w	r3, #64	; 0x40
    aafa:	f3ef 8811 	mrs	r8, BASEPRI
    aafe:	f383 8812 	msr	BASEPRI_MAX, r3
    ab02:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    ab06:	68c3      	ldr	r3, [r0, #12]
    ab08:	4a33      	ldr	r2, [pc, #204]	; (abd8 <z_impl_k_mutex_lock+0xec>)
    ab0a:	b17b      	cbz	r3, ab2c <z_impl_k_mutex_lock+0x40>
    ab0c:	6880      	ldr	r0, [r0, #8]
    ab0e:	6891      	ldr	r1, [r2, #8]
    ab10:	4288      	cmp	r0, r1
    ab12:	d019      	beq.n	ab48 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    ab14:	ea57 0306 	orrs.w	r3, r7, r6
    ab18:	d118      	bne.n	ab4c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    ab1a:	f388 8811 	msr	BASEPRI, r8
    ab1e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    ab22:	f06f 000f 	mvn.w	r0, #15
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    ab26:	b002      	add	sp, #8
    ab28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    ab2c:	6891      	ldr	r1, [r2, #8]
    ab2e:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    ab32:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    ab34:	3301      	adds	r3, #1
    ab36:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    ab38:	6893      	ldr	r3, [r2, #8]
    ab3a:	60a3      	str	r3, [r4, #8]
    ab3c:	f388 8811 	msr	BASEPRI, r8
    ab40:	f3bf 8f6f 	isb	sy
		return 0;
    ab44:	2000      	movs	r0, #0
    ab46:	e7ee      	b.n	ab26 <z_impl_k_mutex_lock+0x3a>
					_current->base.prio :
    ab48:	6921      	ldr	r1, [r4, #16]
    ab4a:	e7f2      	b.n	ab32 <z_impl_k_mutex_lock+0x46>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    ab4c:	f991 100e 	ldrsb.w	r1, [r1, #14]
    ab50:	f990 300e 	ldrsb.w	r3, [r0, #14]
	return prio >= CONFIG_PRIORITY_CEILING;
}

static inline int z_get_new_prio_with_ceiling(int prio)
{
	return z_is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
    ab54:	4299      	cmp	r1, r3
    ab56:	bfa8      	it	ge
    ab58:	4619      	movge	r1, r3
    ab5a:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    ab5e:	4291      	cmp	r1, r2
    ab60:	bfb8      	it	lt
    ab62:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    ab64:	428b      	cmp	r3, r1
    ab66:	dd2e      	ble.n	abc6 <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    ab68:	f002 fc46 	bl	d3f8 <adjust_owner_prio.isra.0>
    ab6c:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    ab6e:	e9cd 7600 	strd	r7, r6, [sp]
    ab72:	481a      	ldr	r0, [pc, #104]	; (abdc <z_impl_k_mutex_lock+0xf0>)
    ab74:	4622      	mov	r2, r4
    ab76:	4641      	mov	r1, r8
    ab78:	f000 fba4 	bl	b2c4 <z_pend_curr>
	if (got_mutex == 0) {
    ab7c:	2800      	cmp	r0, #0
    ab7e:	d0e1      	beq.n	ab44 <z_impl_k_mutex_lock+0x58>
	__asm__ volatile(
    ab80:	f04f 0340 	mov.w	r3, #64	; 0x40
    ab84:	f3ef 8611 	mrs	r6, BASEPRI
    ab88:	f383 8812 	msr	BASEPRI_MAX, r3
    ab8c:	f3bf 8f6f 	isb	sy
	if (likely(mutex->owner != NULL)) {
    ab90:	68a0      	ldr	r0, [r4, #8]
    ab92:	b1d0      	cbz	r0, abca <z_impl_k_mutex_lock+0xde>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    ab94:	6823      	ldr	r3, [r4, #0]
			new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    ab96:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ab98:	429c      	cmp	r4, r3
    ab9a:	d00a      	beq.n	abb2 <z_impl_k_mutex_lock+0xc6>
    ab9c:	b14b      	cbz	r3, abb2 <z_impl_k_mutex_lock+0xc6>
    ab9e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    aba2:	4299      	cmp	r1, r3
    aba4:	bfa8      	it	ge
    aba6:	4619      	movge	r1, r3
    aba8:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    abac:	4299      	cmp	r1, r3
    abae:	bfb8      	it	lt
    abb0:	4619      	movlt	r1, r3
		resched = adjust_owner_prio(mutex, new_prio) || resched;
    abb2:	f002 fc21 	bl	d3f8 <adjust_owner_prio.isra.0>
    abb6:	b140      	cbz	r0, abca <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    abb8:	4808      	ldr	r0, [pc, #32]	; (abdc <z_impl_k_mutex_lock+0xf0>)
    abba:	4631      	mov	r1, r6
    abbc:	f000 fbe6 	bl	b38c <z_reschedule>
	return -EAGAIN;
    abc0:	f06f 000a 	mvn.w	r0, #10
    abc4:	e7af      	b.n	ab26 <z_impl_k_mutex_lock+0x3a>
	bool resched = false;
    abc6:	2500      	movs	r5, #0
    abc8:	e7d1      	b.n	ab6e <z_impl_k_mutex_lock+0x82>
	if (resched) {
    abca:	2d00      	cmp	r5, #0
    abcc:	d1f4      	bne.n	abb8 <z_impl_k_mutex_lock+0xcc>
	__asm__ volatile(
    abce:	f386 8811 	msr	BASEPRI, r6
    abd2:	f3bf 8f6f 	isb	sy
    abd6:	e7f3      	b.n	abc0 <z_impl_k_mutex_lock+0xd4>
    abd8:	20001bcc 	.word	0x20001bcc
    abdc:	20002319 	.word	0x20002319

0000abe0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    abe0:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    abe2:	6883      	ldr	r3, [r0, #8]
{
    abe4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    abe6:	b36b      	cbz	r3, ac44 <z_impl_k_mutex_unlock+0x64>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    abe8:	4a19      	ldr	r2, [pc, #100]	; (ac50 <z_impl_k_mutex_unlock+0x70>)
    abea:	6892      	ldr	r2, [r2, #8]
    abec:	4293      	cmp	r3, r2
    abee:	d12c      	bne.n	ac4a <z_impl_k_mutex_unlock+0x6a>

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    abf0:	68c3      	ldr	r3, [r0, #12]
    abf2:	2b01      	cmp	r3, #1
    abf4:	d903      	bls.n	abfe <z_impl_k_mutex_unlock+0x1e>
		mutex->lock_count--;
    abf6:	3b01      	subs	r3, #1
    abf8:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	return 0;
    abfa:	2000      	movs	r0, #0
}
    abfc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    abfe:	f04f 0340 	mov.w	r3, #64	; 0x40
    ac02:	f3ef 8511 	mrs	r5, BASEPRI
    ac06:	f383 8812 	msr	BASEPRI_MAX, r3
    ac0a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    ac0e:	6901      	ldr	r1, [r0, #16]
    ac10:	6880      	ldr	r0, [r0, #8]
    ac12:	f002 fbf1 	bl	d3f8 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    ac16:	4620      	mov	r0, r4
    ac18:	f002 fd8e 	bl	d738 <z_unpend_first_thread>
	mutex->owner = new_owner;
    ac1c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    ac1e:	b158      	cbz	r0, ac38 <z_impl_k_mutex_unlock+0x58>
		mutex->owner_orig_prio = new_owner->base.prio;
    ac20:	f990 200e 	ldrsb.w	r2, [r0, #14]
    ac24:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    ac26:	2200      	movs	r2, #0
    ac28:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    ac2a:	f002 fd26 	bl	d67a <z_ready_thread>
		z_reschedule(&lock, key);
    ac2e:	4809      	ldr	r0, [pc, #36]	; (ac54 <z_impl_k_mutex_unlock+0x74>)
    ac30:	4629      	mov	r1, r5
    ac32:	f000 fbab 	bl	b38c <z_reschedule>
    ac36:	e7e0      	b.n	abfa <z_impl_k_mutex_unlock+0x1a>
		mutex->lock_count = 0U;
    ac38:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    ac3a:	f385 8811 	msr	BASEPRI, r5
    ac3e:	f3bf 8f6f 	isb	sy
    ac42:	e7da      	b.n	abfa <z_impl_k_mutex_unlock+0x1a>
		return -EINVAL;
    ac44:	f06f 0015 	mvn.w	r0, #21
    ac48:	e7d8      	b.n	abfc <z_impl_k_mutex_unlock+0x1c>
		return -EPERM;
    ac4a:	f04f 30ff 	mov.w	r0, #4294967295
    ac4e:	e7d5      	b.n	abfc <z_impl_k_mutex_unlock+0x1c>
    ac50:	20001bcc 	.word	0x20001bcc
    ac54:	20002319 	.word	0x20002319

0000ac58 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    ac58:	b537      	push	{r0, r1, r2, r4, r5, lr}
    ac5a:	4611      	mov	r1, r2
	__asm__ volatile(
    ac5c:	f04f 0240 	mov.w	r2, #64	; 0x40
    ac60:	f3ef 8511 	mrs	r5, BASEPRI
    ac64:	f382 8812 	msr	BASEPRI_MAX, r2
    ac68:	f3bf 8f6f 	isb	sy
    ac6c:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    ac6e:	b19c      	cbz	r4, ac98 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    ac70:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    ac72:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    ac74:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    ac78:	4294      	cmp	r4, r2
	list->head = node;
    ac7a:	6003      	str	r3, [r0, #0]
	list->tail = node;
    ac7c:	bf08      	it	eq
    ac7e:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    ac80:	2101      	movs	r1, #1
    ac82:	4620      	mov	r0, r4
    ac84:	f002 fc29 	bl	d4da <z_queue_node_peek>
    ac88:	4604      	mov	r4, r0
	__asm__ volatile(
    ac8a:	f385 8811 	msr	BASEPRI, r5
    ac8e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    ac92:	4620      	mov	r0, r4
    ac94:	b003      	add	sp, #12
    ac96:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    ac98:	ea51 0203 	orrs.w	r2, r1, r3
    ac9c:	d0f5      	beq.n	ac8a <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    ac9e:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    aca2:	e9cd 1300 	strd	r1, r3, [sp]
    aca6:	4610      	mov	r0, r2
    aca8:	4629      	mov	r1, r5
    acaa:	f000 fb0b 	bl	b2c4 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    acae:	2800      	cmp	r0, #0
    acb0:	d1ef      	bne.n	ac92 <z_impl_k_queue_get+0x3a>
    acb2:	4b02      	ldr	r3, [pc, #8]	; (acbc <z_impl_k_queue_get+0x64>)
    acb4:	689b      	ldr	r3, [r3, #8]
    acb6:	695c      	ldr	r4, [r3, #20]
    acb8:	e7eb      	b.n	ac92 <z_impl_k_queue_get+0x3a>
    acba:	bf00      	nop
    acbc:	20001bcc 	.word	0x20001bcc

0000acc0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    acc0:	b538      	push	{r3, r4, r5, lr}
    acc2:	4604      	mov	r4, r0
	__asm__ volatile(
    acc4:	f04f 0340 	mov.w	r3, #64	; 0x40
    acc8:	f3ef 8511 	mrs	r5, BASEPRI
    accc:	f383 8812 	msr	BASEPRI_MAX, r3
    acd0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    acd4:	f002 fd30 	bl	d738 <z_unpend_first_thread>

	if (thread != NULL) {
    acd8:	b148      	cbz	r0, acee <z_impl_k_sem_give+0x2e>
    acda:	2200      	movs	r2, #0
    acdc:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    acde:	f002 fccc 	bl	d67a <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    ace2:	4629      	mov	r1, r5
    ace4:	4805      	ldr	r0, [pc, #20]	; (acfc <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    ace6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    acea:	f000 bb4f 	b.w	b38c <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    acee:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    acf2:	429a      	cmp	r2, r3
    acf4:	bf18      	it	ne
    acf6:	3301      	addne	r3, #1
    acf8:	60a3      	str	r3, [r4, #8]
}
    acfa:	e7f2      	b.n	ace2 <z_impl_k_sem_give+0x22>
    acfc:	20002319 	.word	0x20002319

0000ad00 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    ad00:	b513      	push	{r0, r1, r4, lr}
    ad02:	f04f 0440 	mov.w	r4, #64	; 0x40
    ad06:	f3ef 8111 	mrs	r1, BASEPRI
    ad0a:	f384 8812 	msr	BASEPRI_MAX, r4
    ad0e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    ad12:	6884      	ldr	r4, [r0, #8]
    ad14:	b144      	cbz	r4, ad28 <z_impl_k_sem_take+0x28>
		sem->count--;
    ad16:	3c01      	subs	r4, #1
    ad18:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    ad1a:	f381 8811 	msr	BASEPRI, r1
    ad1e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    ad22:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    ad24:	b002      	add	sp, #8
    ad26:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    ad28:	ea52 0403 	orrs.w	r4, r2, r3
    ad2c:	d106      	bne.n	ad3c <z_impl_k_sem_take+0x3c>
    ad2e:	f381 8811 	msr	BASEPRI, r1
    ad32:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    ad36:	f06f 000f 	mvn.w	r0, #15
    ad3a:	e7f3      	b.n	ad24 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    ad3c:	e9cd 2300 	strd	r2, r3, [sp]
    ad40:	4602      	mov	r2, r0
    ad42:	4802      	ldr	r0, [pc, #8]	; (ad4c <z_impl_k_sem_take+0x4c>)
    ad44:	f000 fabe 	bl	b2c4 <z_pend_curr>
	return ret;
    ad48:	e7ec      	b.n	ad24 <z_impl_k_sem_take+0x24>
    ad4a:	bf00      	nop
    ad4c:	20002319 	.word	0x20002319

0000ad50 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(void)
{
    ad50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_work_queue_config cfg = {
    ad52:	4b09      	ldr	r3, [pc, #36]	; (ad78 <k_sys_work_q_init+0x28>)
    ad54:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    ad56:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    ad58:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    ad5a:	9300      	str	r3, [sp, #0]
    ad5c:	4907      	ldr	r1, [pc, #28]	; (ad7c <k_sys_work_q_init+0x2c>)
    ad5e:	4808      	ldr	r0, [pc, #32]	; (ad80 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    ad60:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    ad64:	f04f 33ff 	mov.w	r3, #4294967295
    ad68:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ad6c:	f000 f900 	bl	af70 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    ad70:	4620      	mov	r0, r4
    ad72:	b004      	add	sp, #16
    ad74:	bd10      	pop	{r4, pc}
    ad76:	bf00      	nop
    ad78:	0001051c 	.word	0x0001051c
    ad7c:	20003880 	.word	0x20003880
    ad80:	20000ac0 	.word	0x20000ac0

0000ad84 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    ad84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    ad88:	4e4a      	ldr	r6, [pc, #296]	; (aeb4 <work_queue_main+0x130>)
    ad8a:	b085      	sub	sp, #20
    ad8c:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    ad8e:	f04f 38ff 	mov.w	r8, #4294967295
    ad92:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
    ad96:	f04f 0340 	mov.w	r3, #64	; 0x40
    ad9a:	f3ef 8711 	mrs	r7, BASEPRI
    ad9e:	f383 8812 	msr	BASEPRI_MAX, r3
    ada2:	f3bf 8f6f 	isb	sy
    ada6:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    adaa:	b98d      	cbnz	r5, add0 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    adac:	2102      	movs	r1, #2
    adae:	f104 0098 	add.w	r0, r4, #152	; 0x98
    adb2:	f002 fbbd 	bl	d530 <flag_test_and_clear>
    adb6:	2800      	cmp	r0, #0
    adb8:	d143      	bne.n	ae42 <work_queue_main+0xbe>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    adba:	2300      	movs	r3, #0
    adbc:	e9cd 8900 	strd	r8, r9, [sp]
    adc0:	9302      	str	r3, [sp, #8]
    adc2:	f104 0288 	add.w	r2, r4, #136	; 0x88
    adc6:	4639      	mov	r1, r7
    adc8:	483b      	ldr	r0, [pc, #236]	; (aeb8 <work_queue_main+0x134>)
    adca:	f000 fc95 	bl	b6f8 <z_sched_wait>
			continue;
    adce:	e7e2      	b.n	ad96 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    add0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    add4:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    add6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    adda:	4295      	cmp	r5, r2
	list->tail = node;
    addc:	bf08      	it	eq
    adde:	f8c4 3084 	streq.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    ade2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ade6:	f043 0302 	orr.w	r3, r3, #2
    adea:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    adee:	68eb      	ldr	r3, [r5, #12]
    adf0:	f023 0304 	bic.w	r3, r3, #4
    adf4:	f043 0301 	orr.w	r3, r3, #1
    adf8:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    adfa:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    adfc:	f387 8811 	msr	BASEPRI, r7
    ae00:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    ae04:	4628      	mov	r0, r5
    ae06:	4798      	blx	r3
	__asm__ volatile(
    ae08:	f04f 0340 	mov.w	r3, #64	; 0x40
    ae0c:	f3ef 8b11 	mrs	fp, BASEPRI
    ae10:	f383 8812 	msr	BASEPRI_MAX, r3
    ae14:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    ae18:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    ae1a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    ae1c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    ae20:	d419      	bmi.n	ae56 <work_queue_main+0xd2>
	*flagp &= ~BIT(bit);
    ae22:	60ea      	str	r2, [r5, #12]
    ae24:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    ae28:	f023 0302 	bic.w	r3, r3, #2
    ae2c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    ae30:	f38b 8811 	msr	BASEPRI, fp
    ae34:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    ae38:	05db      	lsls	r3, r3, #23
    ae3a:	d4ac      	bmi.n	ad96 <work_queue_main+0x12>
	z_impl_k_yield();
    ae3c:	f000 fb40 	bl	b4c0 <z_impl_k_yield>
}
    ae40:	e7a9      	b.n	ad96 <work_queue_main+0x12>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    ae42:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    ae46:	2200      	movs	r2, #0
    ae48:	2101      	movs	r1, #1
    ae4a:	4628      	mov	r0, r5
    ae4c:	f002 fcce 	bl	d7ec <z_sched_wake>
    ae50:	2800      	cmp	r0, #0
    ae52:	d1f8      	bne.n	ae46 <work_queue_main+0xc2>
    ae54:	e7b1      	b.n	adba <work_queue_main+0x36>
	return list->head;
    ae56:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    ae58:	f023 0303 	bic.w	r3, r3, #3
    ae5c:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    ae5e:	2800      	cmp	r0, #0
    ae60:	d0e0      	beq.n	ae24 <work_queue_main+0xa0>
	return node->next;
    ae62:	2700      	movs	r7, #0
    ae64:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    ae68:	463b      	mov	r3, r7
    ae6a:	2800      	cmp	r0, #0
    ae6c:	d0da      	beq.n	ae24 <work_queue_main+0xa0>
		if (wc->work == work) {
    ae6e:	6842      	ldr	r2, [r0, #4]
    ae70:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    ae72:	4601      	mov	r1, r0
		if (wc->work == work) {
    ae74:	d10c      	bne.n	ae90 <work_queue_main+0x10c>
	return node->next;
    ae76:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    ae78:	b99f      	cbnz	r7, aea2 <work_queue_main+0x11e>
    ae7a:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    ae7c:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    ae7e:	4282      	cmp	r2, r0
    ae80:	d100      	bne.n	ae84 <work_queue_main+0x100>
	list->tail = node;
    ae82:	6071      	str	r1, [r6, #4]
	parent->next = child;
    ae84:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    ae88:	f7ff ff1a 	bl	acc0 <z_impl_k_sem_give>
}
    ae8c:	4639      	mov	r1, r7
    ae8e:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    ae90:	f1ba 0f00 	cmp.w	sl, #0
    ae94:	d00b      	beq.n	aeae <work_queue_main+0x12a>
	return node->next;
    ae96:	f8da 2000 	ldr.w	r2, [sl]
    ae9a:	4650      	mov	r0, sl
    ae9c:	460f      	mov	r7, r1
    ae9e:	4692      	mov	sl, r2
    aea0:	e7e3      	b.n	ae6a <work_queue_main+0xe6>
	parent->next = child;
    aea2:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    aea4:	6872      	ldr	r2, [r6, #4]
    aea6:	4282      	cmp	r2, r0
	list->tail = node;
    aea8:	bf08      	it	eq
    aeaa:	6077      	streq	r7, [r6, #4]
}
    aeac:	e7ea      	b.n	ae84 <work_queue_main+0x100>
    aeae:	4652      	mov	r2, sl
    aeb0:	e7f3      	b.n	ae9a <work_queue_main+0x116>
    aeb2:	bf00      	nop
    aeb4:	20001bf0 	.word	0x20001bf0
    aeb8:	20002319 	.word	0x20002319

0000aebc <submit_to_queue_locked>:
{
    aebc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    aebe:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    aec0:	079a      	lsls	r2, r3, #30
{
    aec2:	4604      	mov	r4, r0
    aec4:	460f      	mov	r7, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    aec6:	f3c3 0640 	ubfx	r6, r3, #1, #1
    aeca:	d42c      	bmi.n	af26 <submit_to_queue_locked+0x6a>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    aecc:	075b      	lsls	r3, r3, #29
    aece:	d41a      	bmi.n	af06 <submit_to_queue_locked+0x4a>
		if (*queuep == NULL) {
    aed0:	680b      	ldr	r3, [r1, #0]
    aed2:	b90b      	cbnz	r3, aed8 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    aed4:	6883      	ldr	r3, [r0, #8]
    aed6:	600b      	str	r3, [r1, #0]
	return (*flagp & BIT(bit)) != 0U;
    aed8:	68e3      	ldr	r3, [r4, #12]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    aeda:	07dd      	lsls	r5, r3, #31
			*queuep = work->queue;
    aedc:	bf44      	itt	mi
    aede:	68a3      	ldrmi	r3, [r4, #8]
    aee0:	603b      	strmi	r3, [r7, #0]
		int rc = queue_submit_locked(*queuep, work);
    aee2:	683d      	ldr	r5, [r7, #0]
			ret = 2;
    aee4:	bf4c      	ite	mi
    aee6:	2602      	movmi	r6, #2
		ret = 1;
    aee8:	2601      	movpl	r6, #1
	if (queue == NULL) {
    aeea:	2d00      	cmp	r5, #0
    aeec:	d03a      	beq.n	af64 <submit_to_queue_locked+0xa8>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    aeee:	4b1f      	ldr	r3, [pc, #124]	; (af6c <submit_to_queue_locked+0xb0>)
    aef0:	689b      	ldr	r3, [r3, #8]
    aef2:	42ab      	cmp	r3, r5
    aef4:	d00a      	beq.n	af0c <submit_to_queue_locked+0x50>
	return (*flagp & BIT(bit)) != 0U;
    aef6:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    aefa:	07d8      	lsls	r0, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    aefc:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    af00:	d414      	bmi.n	af2c <submit_to_queue_locked+0x70>
		ret = -EBUSY;
    af02:	f06f 0612 	mvn.w	r6, #18
		*queuep = NULL;
    af06:	2300      	movs	r3, #0
    af08:	603b      	str	r3, [r7, #0]
	return ret;
    af0a:	e025      	b.n	af58 <submit_to_queue_locked+0x9c>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    af0c:	f002 fa60 	bl	d3d0 <k_is_in_isr>
    af10:	f8d5 3098 	ldr.w	r3, [r5, #152]	; 0x98
    af14:	2800      	cmp	r0, #0
    af16:	d1f0      	bne.n	aefa <submit_to_queue_locked+0x3e>
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    af18:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    af1a:	f3c3 02c0 	ubfx	r2, r3, #3, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    af1e:	d5f0      	bpl.n	af02 <submit_to_queue_locked+0x46>
	} else if (plugged && !draining) {
    af20:	b152      	cbz	r2, af38 <submit_to_queue_locked+0x7c>
    af22:	075b      	lsls	r3, r3, #29
    af24:	d408      	bmi.n	af38 <submit_to_queue_locked+0x7c>
		ret = -EBUSY;
    af26:	f06f 060f 	mvn.w	r6, #15
    af2a:	e7ec      	b.n	af06 <submit_to_queue_locked+0x4a>
	} else if (draining && !chained) {
    af2c:	2a00      	cmp	r2, #0
    af2e:	d1fa      	bne.n	af26 <submit_to_queue_locked+0x6a>
	return (*flagp & BIT(bit)) != 0U;
    af30:	f3c3 03c0 	ubfx	r3, r3, #3, #1
	} else if (plugged && !draining) {
    af34:	2b00      	cmp	r3, #0
    af36:	d1f6      	bne.n	af26 <submit_to_queue_locked+0x6a>
	parent->next = child;
    af38:	2300      	movs	r3, #0
    af3a:	6023      	str	r3, [r4, #0]
	return list->tail;
    af3c:	f8d5 3084 	ldr.w	r3, [r5, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    af40:	b963      	cbnz	r3, af5c <submit_to_queue_locked+0xa0>
	list->head = node;
    af42:	e9c5 4420 	strd	r4, r4, [r5, #128]	; 0x80
		(void)notify_queue_locked(queue);
    af46:	4628      	mov	r0, r5
    af48:	f002 fafd 	bl	d546 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    af4c:	68e3      	ldr	r3, [r4, #12]
    af4e:	f043 0304 	orr.w	r3, r3, #4
    af52:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    af54:	683b      	ldr	r3, [r7, #0]
    af56:	60a3      	str	r3, [r4, #8]
}
    af58:	4630      	mov	r0, r6
    af5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    af5c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    af5e:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
}
    af62:	e7f0      	b.n	af46 <submit_to_queue_locked+0x8a>
		return -EINVAL;
    af64:	f06f 0615 	mvn.w	r6, #21
    af68:	e7cd      	b.n	af06 <submit_to_queue_locked+0x4a>
    af6a:	bf00      	nop
    af6c:	20001bcc 	.word	0x20001bcc

0000af70 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    af70:	b5f0      	push	{r4, r5, r6, r7, lr}
    af72:	b089      	sub	sp, #36	; 0x24
    af74:	4604      	mov	r4, r0
	list->head = NULL;
    af76:	2000      	movs	r0, #0
	list->tail = NULL;
    af78:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    af7c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    af7e:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    af82:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    af86:	f104 0090 	add.w	r0, r4, #144	; 0x90
    af8a:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    af8e:	b31d      	cbz	r5, afd8 <k_work_queue_start+0x68>
    af90:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    af92:	2800      	cmp	r0, #0
    af94:	f240 1001 	movw	r0, #257	; 0x101
    af98:	bf08      	it	eq
    af9a:	2001      	moveq	r0, #1
	*flagp = flags;
    af9c:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    afa0:	2000      	movs	r0, #0
    afa2:	f04f 36ff 	mov.w	r6, #4294967295
    afa6:	f04f 37ff 	mov.w	r7, #4294967295
    afaa:	e9cd 3003 	strd	r3, r0, [sp, #12]
    afae:	e9cd 0001 	strd	r0, r0, [sp, #4]
    afb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
    afb6:	4b09      	ldr	r3, [pc, #36]	; (afdc <k_work_queue_start+0x6c>)
    afb8:	9400      	str	r4, [sp, #0]
    afba:	4620      	mov	r0, r4
    afbc:	f7ff fcf2 	bl	a9a4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    afc0:	b125      	cbz	r5, afcc <k_work_queue_start+0x5c>
    afc2:	6829      	ldr	r1, [r5, #0]
    afc4:	b111      	cbz	r1, afcc <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    afc6:	4620      	mov	r0, r4
    afc8:	f002 fa08 	bl	d3dc <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    afcc:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    afce:	b009      	add	sp, #36	; 0x24
    afd0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    afd4:	f002 ba07 	b.w	d3e6 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    afd8:	2001      	movs	r0, #1
    afda:	e7df      	b.n	af9c <k_work_queue_start+0x2c>
    afdc:	0000ad85 	.word	0x0000ad85

0000afe0 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    afe0:	b537      	push	{r0, r1, r2, r4, r5, lr}
    afe2:	9001      	str	r0, [sp, #4]
    afe4:	4608      	mov	r0, r1
	__asm__ volatile(
    afe6:	f04f 0140 	mov.w	r1, #64	; 0x40
    afea:	f3ef 8411 	mrs	r4, BASEPRI
    afee:	f381 8812 	msr	BASEPRI_MAX, r1
    aff2:	f3bf 8f6f 	isb	sy
	return *flagp;
    aff6:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    aff8:	f011 0f0e 	tst.w	r1, #14
    affc:	d116      	bne.n	b02c <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    affe:	ea53 0502 	orrs.w	r5, r3, r2
    b002:	d108      	bne.n	b016 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    b004:	a901      	add	r1, sp, #4
    b006:	f7ff ff59 	bl	aebc <submit_to_queue_locked>
	__asm__ volatile(
    b00a:	f384 8811 	msr	BASEPRI, r4
    b00e:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    b012:	b003      	add	sp, #12
    b014:	bd30      	pop	{r4, r5, pc}
	*flagp |= BIT(bit);
    b016:	f041 0108 	orr.w	r1, r1, #8
    b01a:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    b01c:	9901      	ldr	r1, [sp, #4]
    b01e:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    b020:	3010      	adds	r0, #16
    b022:	4903      	ldr	r1, [pc, #12]	; (b030 <k_work_schedule_for_queue+0x50>)
    b024:	f000 fbda 	bl	b7dc <z_add_timeout>
	return ret;
    b028:	2001      	movs	r0, #1
    b02a:	e7ee      	b.n	b00a <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    b02c:	2000      	movs	r0, #0
    b02e:	e7ec      	b.n	b00a <k_work_schedule_for_queue+0x2a>
    b030:	0000d555 	.word	0x0000d555

0000b034 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
    b034:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
    b036:	4801      	ldr	r0, [pc, #4]	; (b03c <k_work_schedule+0x8>)
    b038:	f7ff bfd2 	b.w	afe0 <k_work_schedule_for_queue>
    b03c:	20000ac0 	.word	0x20000ac0

0000b040 <sliceable>:
{
	bool ret = is_preempt(thread)
		&& slice_time(thread) != 0
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
		&& !z_is_thread_prevented_from_running(thread)
		&& !z_is_idle_thread_object(thread);
    b040:	89c3      	ldrh	r3, [r0, #14]
    b042:	2b7f      	cmp	r3, #127	; 0x7f
    b044:	d812      	bhi.n	b06c <sliceable+0x2c>
	int ret = slice_ticks;
    b046:	4b0a      	ldr	r3, [pc, #40]	; (b070 <sliceable+0x30>)
    b048:	681b      	ldr	r3, [r3, #0]
		&& slice_time(thread) != 0
    b04a:	b163      	cbz	r3, b066 <sliceable+0x26>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    b04c:	4b09      	ldr	r3, [pc, #36]	; (b074 <sliceable+0x34>)
    b04e:	f990 200e 	ldrsb.w	r2, [r0, #14]
    b052:	681b      	ldr	r3, [r3, #0]
    b054:	429a      	cmp	r2, r3
    b056:	db09      	blt.n	b06c <sliceable+0x2c>
		&& !z_is_thread_prevented_from_running(thread)
    b058:	7b43      	ldrb	r3, [r0, #13]
    b05a:	06db      	lsls	r3, r3, #27
    b05c:	d106      	bne.n	b06c <sliceable+0x2c>
		&& !z_is_idle_thread_object(thread);
    b05e:	4b06      	ldr	r3, [pc, #24]	; (b078 <sliceable+0x38>)
    b060:	1ac3      	subs	r3, r0, r3
    b062:	bf18      	it	ne
    b064:	2301      	movne	r3, #1
#ifdef CONFIG_TIMESLICE_PER_THREAD
	ret |= thread->base.slice_ticks != 0;
#endif

	return ret;
}
    b066:	f003 0001 	and.w	r0, r3, #1
    b06a:	4770      	bx	lr
		&& !z_is_idle_thread_object(thread);
    b06c:	2300      	movs	r3, #0
    b06e:	e7fa      	b.n	b066 <sliceable+0x26>
    b070:	20001c00 	.word	0x20001c00
    b074:	20001bfc 	.word	0x20001bfc
    b078:	200009c0 	.word	0x200009c0

0000b07c <slice_timeout>:

static void slice_timeout(struct _timeout *t)
{
	int cpu = ARRAY_INDEX(slice_timeouts, t);
    b07c:	4b04      	ldr	r3, [pc, #16]	; (b090 <slice_timeout+0x14>)
    b07e:	1ac0      	subs	r0, r0, r3
    b080:	4b04      	ldr	r3, [pc, #16]	; (b094 <slice_timeout+0x18>)
    b082:	10c0      	asrs	r0, r0, #3
    b084:	4358      	muls	r0, r3

	slice_expired[cpu] = true;
    b086:	4b04      	ldr	r3, [pc, #16]	; (b098 <slice_timeout+0x1c>)
    b088:	2201      	movs	r2, #1
    b08a:	541a      	strb	r2, [r3, r0]
	 * the specific core, but that's not part of the API yet.
	 */
	if (IS_ENABLED(CONFIG_SMP) && cpu != _current_cpu->id) {
		flag_ipi();
	}
}
    b08c:	4770      	bx	lr
    b08e:	bf00      	nop
    b090:	20000b60 	.word	0x20000b60
    b094:	aaaaaaab 	.word	0xaaaaaaab
    b098:	20002319 	.word	0x20002319

0000b09c <z_reset_time_slice>:

void z_reset_time_slice(struct k_thread *curr)
{
    b09c:	b570      	push	{r4, r5, r6, lr}
	int cpu = _current_cpu->id;
    b09e:	4b0e      	ldr	r3, [pc, #56]	; (b0d8 <z_reset_time_slice+0x3c>)

	z_abort_timeout(&slice_timeouts[cpu]);
    b0a0:	4c0e      	ldr	r4, [pc, #56]	; (b0dc <z_reset_time_slice+0x40>)
	int cpu = _current_cpu->id;
    b0a2:	7c1e      	ldrb	r6, [r3, #16]
	z_abort_timeout(&slice_timeouts[cpu]);
    b0a4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    b0a8:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
{
    b0ac:	4605      	mov	r5, r0
	z_abort_timeout(&slice_timeouts[cpu]);
    b0ae:	4620      	mov	r0, r4
    b0b0:	f002 fbbf 	bl	d832 <z_abort_timeout>
	slice_expired[cpu] = false;
    b0b4:	4b0a      	ldr	r3, [pc, #40]	; (b0e0 <z_reset_time_slice+0x44>)
    b0b6:	2200      	movs	r2, #0
	if (sliceable(curr)) {
    b0b8:	4628      	mov	r0, r5
	slice_expired[cpu] = false;
    b0ba:	559a      	strb	r2, [r3, r6]
	if (sliceable(curr)) {
    b0bc:	f7ff ffc0 	bl	b040 <sliceable>
    b0c0:	b148      	cbz	r0, b0d6 <z_reset_time_slice+0x3a>
	int ret = slice_ticks;
    b0c2:	4b08      	ldr	r3, [pc, #32]	; (b0e4 <z_reset_time_slice+0x48>)
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    b0c4:	4908      	ldr	r1, [pc, #32]	; (b0e8 <z_reset_time_slice+0x4c>)
			      K_TICKS(slice_time(curr) - 1));
    b0c6:	681a      	ldr	r2, [r3, #0]
    b0c8:	3a01      	subs	r2, #1
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    b0ca:	4620      	mov	r0, r4
    b0cc:	17d3      	asrs	r3, r2, #31
	}
}
    b0ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_add_timeout(&slice_timeouts[cpu], slice_timeout,
    b0d2:	f000 bb83 	b.w	b7dc <z_add_timeout>
}
    b0d6:	bd70      	pop	{r4, r5, r6, pc}
    b0d8:	20001bcc 	.word	0x20001bcc
    b0dc:	20000b60 	.word	0x20000b60
    b0e0:	20002319 	.word	0x20002319
    b0e4:	20001c00 	.word	0x20001c00
    b0e8:	0000b07d 	.word	0x0000b07d

0000b0ec <update_cache>:
	}
#endif
}

static void update_cache(int preempt_ok)
{
    b0ec:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    b0ee:	4d0d      	ldr	r5, [pc, #52]	; (b124 <update_cache+0x38>)
    b0f0:	462b      	mov	r3, r5
    b0f2:	f853 4f1c 	ldr.w	r4, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b0f6:	429c      	cmp	r4, r3
    b0f8:	d000      	beq.n	b0fc <update_cache+0x10>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    b0fa:	b904      	cbnz	r4, b0fe <update_cache+0x12>
    b0fc:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    b0fe:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    b100:	b938      	cbnz	r0, b112 <update_cache+0x26>
	if (z_is_thread_prevented_from_running(_current)) {
    b102:	7b5a      	ldrb	r2, [r3, #13]
    b104:	06d2      	lsls	r2, r2, #27
    b106:	d104      	bne.n	b112 <update_cache+0x26>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    b108:	69a2      	ldr	r2, [r4, #24]
    b10a:	b912      	cbnz	r2, b112 <update_cache+0x26>
	if (is_preempt(_current) || is_metairq(thread)) {
    b10c:	89da      	ldrh	r2, [r3, #14]
    b10e:	2a7f      	cmp	r2, #127	; 0x7f
    b110:	d805      	bhi.n	b11e <update_cache+0x32>
#ifndef CONFIG_SMP
	struct k_thread *thread = next_up();

	if (should_preempt(thread, preempt_ok)) {
#ifdef CONFIG_TIMESLICING
		if (thread != _current) {
    b112:	429c      	cmp	r4, r3
    b114:	d002      	beq.n	b11c <update_cache+0x30>
			z_reset_time_slice(thread);
    b116:	4620      	mov	r0, r4
    b118:	f7ff ffc0 	bl	b09c <z_reset_time_slice>
		}
#endif
		update_metairq_preempt(thread);
		_kernel.ready_q.cache = thread;
    b11c:	4623      	mov	r3, r4
    b11e:	61ab      	str	r3, [r5, #24]
	 * thread because if the thread gets preempted for whatever
	 * reason the scheduler will make the same decision anyway.
	 */
	_current_cpu->swap_ok = preempt_ok;
#endif
}
    b120:	bd38      	pop	{r3, r4, r5, pc}
    b122:	bf00      	nop
    b124:	20001bcc 	.word	0x20001bcc

0000b128 <move_thread_to_end_of_prio_q>:
{
    b128:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    b12a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    b12e:	7b43      	ldrb	r3, [r0, #13]
    b130:	2a00      	cmp	r2, #0
{
    b132:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    b134:	da04      	bge.n	b140 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b13a:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    b13c:	f002 fa63 	bl	d606 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    b140:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    b142:	4a15      	ldr	r2, [pc, #84]	; (b198 <move_thread_to_end_of_prio_q+0x70>)
    b144:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b148:	4610      	mov	r0, r2
    b14a:	734b      	strb	r3, [r1, #13]
    b14c:	f850 3f1c 	ldr.w	r3, [r0, #28]!
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    b150:	6a14      	ldr	r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b152:	4283      	cmp	r3, r0
    b154:	bf08      	it	eq
    b156:	2300      	moveq	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b158:	b923      	cbnz	r3, b164 <move_thread_to_end_of_prio_q+0x3c>
static inline void sys_dlist_append(sys_dlist_t *list, sys_dnode_t *node)
{
	sys_dnode_t *const tail = list->tail;

	node->next = list;
	node->prev = tail;
    b15a:	e9c1 0400 	strd	r0, r4, [r1]

	tail->next = node;
    b15e:	6021      	str	r1, [r4, #0]
	list->tail = node;
    b160:	6211      	str	r1, [r2, #32]
}
    b162:	e00c      	b.n	b17e <move_thread_to_end_of_prio_q+0x56>
	int32_t b1 = thread_1->base.prio;
    b164:	f991 500e 	ldrsb.w	r5, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    b168:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    b16c:	42b5      	cmp	r5, r6
    b16e:	d00e      	beq.n	b18e <move_thread_to_end_of_prio_q+0x66>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b170:	42ae      	cmp	r6, r5
    b172:	dd0c      	ble.n	b18e <move_thread_to_end_of_prio_q+0x66>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    b174:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    b176:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    b17a:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    b17c:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    b17e:	6890      	ldr	r0, [r2, #8]
    b180:	1a43      	subs	r3, r0, r1
    b182:	4258      	negs	r0, r3
}
    b184:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    b188:	4158      	adcs	r0, r3
    b18a:	f7ff bfaf 	b.w	b0ec <update_cache>
	return (node == list->tail) ? NULL : node->next;
    b18e:	429c      	cmp	r4, r3
    b190:	d0e3      	beq.n	b15a <move_thread_to_end_of_prio_q+0x32>
    b192:	681b      	ldr	r3, [r3, #0]
    b194:	e7e0      	b.n	b158 <move_thread_to_end_of_prio_q+0x30>
    b196:	bf00      	nop
    b198:	20001bcc 	.word	0x20001bcc

0000b19c <ready_thread>:
{
    b19c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    b19e:	f990 300d 	ldrsb.w	r3, [r0, #13]
    b1a2:	7b42      	ldrb	r2, [r0, #13]
    b1a4:	2b00      	cmp	r3, #0
    b1a6:	db29      	blt.n	b1fc <ready_thread+0x60>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    b1a8:	06d3      	lsls	r3, r2, #27
    b1aa:	d127      	bne.n	b1fc <ready_thread+0x60>
	return node->next != NULL;
    b1ac:	6983      	ldr	r3, [r0, #24]
    b1ae:	bb2b      	cbnz	r3, b1fc <ready_thread+0x60>
	return list->head == list;
    b1b0:	4913      	ldr	r1, [pc, #76]	; (b200 <ready_thread+0x64>)
	thread->base.thread_state |= _THREAD_QUEUED;
    b1b2:	f062 027f 	orn	r2, r2, #127	; 0x7f
    b1b6:	7342      	strb	r2, [r0, #13]
    b1b8:	460a      	mov	r2, r1
    b1ba:	f852 4f1c 	ldr.w	r4, [r2, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b1be:	4294      	cmp	r4, r2
    b1c0:	bf18      	it	ne
    b1c2:	4623      	movne	r3, r4
	return (node == list->tail) ? NULL : node->next;
    b1c4:	6a0c      	ldr	r4, [r1, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b1c6:	b923      	cbnz	r3, b1d2 <ready_thread+0x36>
	node->prev = tail;
    b1c8:	e9c0 2400 	strd	r2, r4, [r0]
	tail->next = node;
    b1cc:	6020      	str	r0, [r4, #0]
	list->tail = node;
    b1ce:	6208      	str	r0, [r1, #32]
}
    b1d0:	e00c      	b.n	b1ec <ready_thread+0x50>
	int32_t b1 = thread_1->base.prio;
    b1d2:	f990 500e 	ldrsb.w	r5, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    b1d6:	f993 600e 	ldrsb.w	r6, [r3, #14]
	if (b1 != b2) {
    b1da:	42b5      	cmp	r5, r6
    b1dc:	d00a      	beq.n	b1f4 <ready_thread+0x58>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b1de:	42ae      	cmp	r6, r5
    b1e0:	dd08      	ble.n	b1f4 <ready_thread+0x58>
	sys_dnode_t *const prev = successor->prev;
    b1e2:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    b1e4:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    b1e8:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    b1ea:	6058      	str	r0, [r3, #4]
}
    b1ec:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    b1ee:	2000      	movs	r0, #0
    b1f0:	f7ff bf7c 	b.w	b0ec <update_cache>
	return (node == list->tail) ? NULL : node->next;
    b1f4:	42a3      	cmp	r3, r4
    b1f6:	d0e7      	beq.n	b1c8 <ready_thread+0x2c>
    b1f8:	681b      	ldr	r3, [r3, #0]
    b1fa:	e7e4      	b.n	b1c6 <ready_thread+0x2a>
}
    b1fc:	bc70      	pop	{r4, r5, r6}
    b1fe:	4770      	bx	lr
    b200:	20001bcc 	.word	0x20001bcc

0000b204 <unready_thread>:
{
    b204:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    b206:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    b20a:	7b43      	ldrb	r3, [r0, #13]
    b20c:	2a00      	cmp	r2, #0
{
    b20e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    b210:	da04      	bge.n	b21c <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b212:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b216:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b218:	f002 f9f5 	bl	d606 <sys_dlist_remove>
	update_cache(thread == _current);
    b21c:	4b04      	ldr	r3, [pc, #16]	; (b230 <unready_thread+0x2c>)
    b21e:	6898      	ldr	r0, [r3, #8]
    b220:	1a43      	subs	r3, r0, r1
    b222:	4258      	negs	r0, r3
    b224:	4158      	adcs	r0, r3
}
    b226:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    b22a:	f7ff bf5f 	b.w	b0ec <update_cache>
    b22e:	bf00      	nop
    b230:	20001bcc 	.word	0x20001bcc

0000b234 <pend_locked>:
{
    b234:	b570      	push	{r4, r5, r6, lr}
    b236:	4615      	mov	r5, r2
    b238:	461c      	mov	r4, r3
    b23a:	4606      	mov	r6, r0
	add_to_waitq_locked(thread, wait_q);
    b23c:	f002 f9f5 	bl	d62a <add_to_waitq_locked>
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b240:	f1b4 3fff 	cmp.w	r4, #4294967295
    b244:	bf08      	it	eq
    b246:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    b24a:	d008      	beq.n	b25e <pend_locked+0x2a>
    b24c:	462a      	mov	r2, r5
    b24e:	4623      	mov	r3, r4
    b250:	f106 0018 	add.w	r0, r6, #24
    b254:	4902      	ldr	r1, [pc, #8]	; (b260 <pend_locked+0x2c>)
}
    b256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b25a:	f000 babf 	b.w	b7dc <z_add_timeout>
    b25e:	bd70      	pop	{r4, r5, r6, pc}
    b260:	0000d703 	.word	0x0000d703

0000b264 <z_time_slice>:
{
    b264:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    b266:	f04f 0340 	mov.w	r3, #64	; 0x40
    b26a:	f3ef 8511 	mrs	r5, BASEPRI
    b26e:	f383 8812 	msr	BASEPRI_MAX, r3
    b272:	f3bf 8f6f 	isb	sy
	struct k_thread *curr = _current;
    b276:	4b10      	ldr	r3, [pc, #64]	; (b2b8 <z_time_slice+0x54>)
	if (pending_current == curr) {
    b278:	4a10      	ldr	r2, [pc, #64]	; (b2bc <z_time_slice+0x58>)
	struct k_thread *curr = _current;
    b27a:	689c      	ldr	r4, [r3, #8]
	if (pending_current == curr) {
    b27c:	6810      	ldr	r0, [r2, #0]
    b27e:	42a0      	cmp	r0, r4
    b280:	d106      	bne.n	b290 <z_time_slice+0x2c>
		z_reset_time_slice(curr);
    b282:	f7ff ff0b 	bl	b09c <z_reset_time_slice>
	__asm__ volatile(
    b286:	f385 8811 	msr	BASEPRI, r5
    b28a:	f3bf 8f6f 	isb	sy
}
    b28e:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    b290:	2100      	movs	r1, #0
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    b292:	7c1b      	ldrb	r3, [r3, #16]
	pending_current = NULL;
    b294:	6011      	str	r1, [r2, #0]
	if (slice_expired[_current_cpu->id] && sliceable(curr)) {
    b296:	4a0a      	ldr	r2, [pc, #40]	; (b2c0 <z_time_slice+0x5c>)
    b298:	5cd3      	ldrb	r3, [r2, r3]
    b29a:	2b00      	cmp	r3, #0
    b29c:	d0f3      	beq.n	b286 <z_time_slice+0x22>
    b29e:	4620      	mov	r0, r4
    b2a0:	f7ff fece 	bl	b040 <sliceable>
    b2a4:	2800      	cmp	r0, #0
    b2a6:	d0ee      	beq.n	b286 <z_time_slice+0x22>
		if (!z_is_thread_prevented_from_running(curr)) {
    b2a8:	7b63      	ldrb	r3, [r4, #13]
    b2aa:	06db      	lsls	r3, r3, #27
    b2ac:	d102      	bne.n	b2b4 <z_time_slice+0x50>
			move_thread_to_end_of_prio_q(curr);
    b2ae:	4620      	mov	r0, r4
    b2b0:	f7ff ff3a 	bl	b128 <move_thread_to_end_of_prio_q>
		z_reset_time_slice(curr);
    b2b4:	4620      	mov	r0, r4
    b2b6:	e7e4      	b.n	b282 <z_time_slice+0x1e>
    b2b8:	20001bcc 	.word	0x20001bcc
    b2bc:	20001bf8 	.word	0x20001bf8
    b2c0:	20002319 	.word	0x20002319

0000b2c4 <z_pend_curr>:
{
    b2c4:	b570      	push	{r4, r5, r6, lr}
	pending_current = _current;
    b2c6:	480c      	ldr	r0, [pc, #48]	; (b2f8 <z_pend_curr+0x34>)
    b2c8:	4d0c      	ldr	r5, [pc, #48]	; (b2fc <z_pend_curr+0x38>)
    b2ca:	6886      	ldr	r6, [r0, #8]
    b2cc:	602e      	str	r6, [r5, #0]
{
    b2ce:	460c      	mov	r4, r1
    b2d0:	4611      	mov	r1, r2
    b2d2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
	__asm__ volatile(
    b2d6:	f04f 0640 	mov.w	r6, #64	; 0x40
    b2da:	f3ef 8511 	mrs	r5, BASEPRI
    b2de:	f386 8812 	msr	BASEPRI_MAX, r6
    b2e2:	f3bf 8f6f 	isb	sy
	pend_locked(_current, wait_q, timeout);
    b2e6:	6880      	ldr	r0, [r0, #8]
    b2e8:	f7ff ffa4 	bl	b234 <pend_locked>
	ret = arch_swap(key);
    b2ec:	4620      	mov	r0, r4
}
    b2ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b2f2:	f7f9 bb61 	b.w	49b8 <arch_swap>
    b2f6:	bf00      	nop
    b2f8:	20001bcc 	.word	0x20001bcc
    b2fc:	20001bf8 	.word	0x20001bf8

0000b300 <z_set_prio>:
{
    b300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b302:	4604      	mov	r4, r0
    b304:	f04f 0340 	mov.w	r3, #64	; 0x40
    b308:	f3ef 8611 	mrs	r6, BASEPRI
    b30c:	f383 8812 	msr	BASEPRI_MAX, r3
    b310:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    b314:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    b316:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    b318:	b249      	sxtb	r1, r1
    b31a:	d119      	bne.n	b350 <z_set_prio+0x50>
	return node->next != NULL;
    b31c:	6985      	ldr	r5, [r0, #24]
    b31e:	b9bd      	cbnz	r5, b350 <z_set_prio+0x50>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b324:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b326:	f002 f96e 	bl	d606 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    b32a:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    b32c:	4a16      	ldr	r2, [pc, #88]	; (b388 <z_set_prio+0x88>)
				thread->base.prio = prio;
    b32e:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    b330:	f063 037f 	orn	r3, r3, #127	; 0x7f
    b334:	7343      	strb	r3, [r0, #13]
    b336:	4613      	mov	r3, r2
    b338:	f853 0f1c 	ldr.w	r0, [r3, #28]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b33c:	4298      	cmp	r0, r3
    b33e:	bf18      	it	ne
    b340:	4605      	movne	r5, r0
	return (node == list->tail) ? NULL : node->next;
    b342:	6a10      	ldr	r0, [r2, #32]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b344:	b95d      	cbnz	r5, b35e <z_set_prio+0x5e>
	node->prev = tail;
    b346:	e9c4 3000 	strd	r3, r0, [r4]
	tail->next = node;
    b34a:	6004      	str	r4, [r0, #0]
	list->tail = node;
    b34c:	6214      	str	r4, [r2, #32]
}
    b34e:	e011      	b.n	b374 <z_set_prio+0x74>
			thread->base.prio = prio;
    b350:	73a1      	strb	r1, [r4, #14]
    b352:	2000      	movs	r0, #0
	__asm__ volatile(
    b354:	f386 8811 	msr	BASEPRI, r6
    b358:	f3bf 8f6f 	isb	sy
}
    b35c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	int32_t b2 = thread_2->base.prio;
    b35e:	f995 700e 	ldrsb.w	r7, [r5, #14]
	if (b1 != b2) {
    b362:	42b9      	cmp	r1, r7
    b364:	d00b      	beq.n	b37e <z_set_prio+0x7e>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b366:	428f      	cmp	r7, r1
    b368:	dd09      	ble.n	b37e <z_set_prio+0x7e>
	sys_dnode_t *const prev = successor->prev;
    b36a:	686b      	ldr	r3, [r5, #4]
	node->next = successor;
    b36c:	e9c4 5300 	strd	r5, r3, [r4]
	prev->next = node;
    b370:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    b372:	606c      	str	r4, [r5, #4]
			update_cache(1);
    b374:	2001      	movs	r0, #1
    b376:	f7ff feb9 	bl	b0ec <update_cache>
    b37a:	2001      	movs	r0, #1
    b37c:	e7ea      	b.n	b354 <z_set_prio+0x54>
	return (node == list->tail) ? NULL : node->next;
    b37e:	42a8      	cmp	r0, r5
    b380:	d0e1      	beq.n	b346 <z_set_prio+0x46>
    b382:	682d      	ldr	r5, [r5, #0]
    b384:	e7de      	b.n	b344 <z_set_prio+0x44>
    b386:	bf00      	nop
    b388:	20001bcc 	.word	0x20001bcc

0000b38c <z_reschedule>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    b38c:	b949      	cbnz	r1, b3a2 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b38e:	f3ef 8005 	mrs	r0, IPSR
    b392:	b930      	cbnz	r0, b3a2 <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    b394:	4b05      	ldr	r3, [pc, #20]	; (b3ac <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    b396:	699a      	ldr	r2, [r3, #24]
    b398:	689b      	ldr	r3, [r3, #8]
    b39a:	429a      	cmp	r2, r3
    b39c:	d001      	beq.n	b3a2 <z_reschedule+0x16>
    b39e:	f7f9 bb0b 	b.w	49b8 <arch_swap>
    b3a2:	f381 8811 	msr	BASEPRI, r1
    b3a6:	f3bf 8f6f 	isb	sy
}
    b3aa:	4770      	bx	lr
    b3ac:	20001bcc 	.word	0x20001bcc

0000b3b0 <z_sched_start>:
{
    b3b0:	b510      	push	{r4, lr}
	__asm__ volatile(
    b3b2:	f04f 0240 	mov.w	r2, #64	; 0x40
    b3b6:	f3ef 8411 	mrs	r4, BASEPRI
    b3ba:	f382 8812 	msr	BASEPRI_MAX, r2
    b3be:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    b3c2:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    b3c4:	0751      	lsls	r1, r2, #29
    b3c6:	d404      	bmi.n	b3d2 <z_sched_start+0x22>
	__asm__ volatile(
    b3c8:	f384 8811 	msr	BASEPRI, r4
    b3cc:	f3bf 8f6f 	isb	sy
}
    b3d0:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    b3d2:	f022 0204 	bic.w	r2, r2, #4
    b3d6:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    b3d8:	f7ff fee0 	bl	b19c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    b3dc:	4621      	mov	r1, r4
    b3de:	4802      	ldr	r0, [pc, #8]	; (b3e8 <z_sched_start+0x38>)
}
    b3e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    b3e4:	f7ff bfd2 	b.w	b38c <z_reschedule>
    b3e8:	2000231a 	.word	0x2000231a

0000b3ec <z_impl_k_thread_suspend>:
{
    b3ec:	b570      	push	{r4, r5, r6, lr}
    b3ee:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    b3f0:	3018      	adds	r0, #24
    b3f2:	f002 fa1e 	bl	d832 <z_abort_timeout>
	__asm__ volatile(
    b3f6:	f04f 0340 	mov.w	r3, #64	; 0x40
    b3fa:	f3ef 8611 	mrs	r6, BASEPRI
    b3fe:	f383 8812 	msr	BASEPRI_MAX, r3
    b402:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    b406:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    b40a:	7b63      	ldrb	r3, [r4, #13]
    b40c:	2a00      	cmp	r2, #0
    b40e:	da05      	bge.n	b41c <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b410:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b414:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b416:	4620      	mov	r0, r4
    b418:	f002 f8f5 	bl	d606 <sys_dlist_remove>
		update_cache(thread == _current);
    b41c:	4d0b      	ldr	r5, [pc, #44]	; (b44c <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    b41e:	7b63      	ldrb	r3, [r4, #13]
    b420:	68a8      	ldr	r0, [r5, #8]
    b422:	f043 0310 	orr.w	r3, r3, #16
    b426:	7363      	strb	r3, [r4, #13]
    b428:	1b03      	subs	r3, r0, r4
    b42a:	4258      	negs	r0, r3
    b42c:	4158      	adcs	r0, r3
    b42e:	f7ff fe5d 	bl	b0ec <update_cache>
	__asm__ volatile(
    b432:	f386 8811 	msr	BASEPRI, r6
    b436:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    b43a:	68ab      	ldr	r3, [r5, #8]
    b43c:	42a3      	cmp	r3, r4
    b43e:	d103      	bne.n	b448 <z_impl_k_thread_suspend+0x5c>
}
    b440:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    b444:	f002 b9b8 	b.w	d7b8 <z_reschedule_unlocked>
}
    b448:	bd70      	pop	{r4, r5, r6, pc}
    b44a:	bf00      	nop
    b44c:	20001bcc 	.word	0x20001bcc

0000b450 <k_sched_lock>:
	__asm__ volatile(
    b450:	f04f 0340 	mov.w	r3, #64	; 0x40
    b454:	f3ef 8111 	mrs	r1, BASEPRI
    b458:	f383 8812 	msr	BASEPRI_MAX, r3
    b45c:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    b460:	4b04      	ldr	r3, [pc, #16]	; (b474 <k_sched_lock+0x24>)
    b462:	689a      	ldr	r2, [r3, #8]
    b464:	7bd3      	ldrb	r3, [r2, #15]
    b466:	3b01      	subs	r3, #1
    b468:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    b46a:	f381 8811 	msr	BASEPRI, r1
    b46e:	f3bf 8f6f 	isb	sy
}
    b472:	4770      	bx	lr
    b474:	20001bcc 	.word	0x20001bcc

0000b478 <k_sched_unlock>:
{
    b478:	b510      	push	{r4, lr}
	__asm__ volatile(
    b47a:	f04f 0340 	mov.w	r3, #64	; 0x40
    b47e:	f3ef 8411 	mrs	r4, BASEPRI
    b482:	f383 8812 	msr	BASEPRI_MAX, r3
    b486:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    b48a:	4b08      	ldr	r3, [pc, #32]	; (b4ac <k_sched_unlock+0x34>)
    b48c:	689a      	ldr	r2, [r3, #8]
    b48e:	7bd3      	ldrb	r3, [r2, #15]
    b490:	3301      	adds	r3, #1
    b492:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    b494:	2000      	movs	r0, #0
    b496:	f7ff fe29 	bl	b0ec <update_cache>
	__asm__ volatile(
    b49a:	f384 8811 	msr	BASEPRI, r4
    b49e:	f3bf 8f6f 	isb	sy
}
    b4a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    b4a6:	f002 b987 	b.w	d7b8 <z_reschedule_unlocked>
    b4aa:	bf00      	nop
    b4ac:	20001bcc 	.word	0x20001bcc

0000b4b0 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    b4b0:	4b02      	ldr	r3, [pc, #8]	; (b4bc <z_sched_init+0xc>)
    b4b2:	f103 021c 	add.w	r2, r3, #28
	list->tail = (sys_dnode_t *)list;
    b4b6:	e9c3 2207 	strd	r2, r2, [r3, #28]
		init_ready_q(&_kernel.cpus[i].ready_q);
	}
#else
	init_ready_q(&_kernel.ready_q);
#endif
}
    b4ba:	4770      	bx	lr
    b4bc:	20001bcc 	.word	0x20001bcc

0000b4c0 <z_impl_k_yield>:
	return !(k_is_pre_kernel() || k_is_in_isr() ||
		 z_is_idle_thread_object(_current));
}

void z_impl_k_yield(void)
{
    b4c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    b4c2:	f04f 0340 	mov.w	r3, #64	; 0x40
    b4c6:	f3ef 8511 	mrs	r5, BASEPRI
    b4ca:	f383 8812 	msr	BASEPRI_MAX, r3
    b4ce:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    b4d2:	4919      	ldr	r1, [pc, #100]	; (b538 <z_impl_k_yield+0x78>)
    b4d4:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b4d6:	7b43      	ldrb	r3, [r0, #13]
    b4d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    b4dc:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b4de:	f002 f892 	bl	d606 <sys_dlist_remove>
	}
	queue_thread(_current);
    b4e2:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    b4e4:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    b4e6:	4608      	mov	r0, r1
    b4e8:	f062 027f 	orn	r2, r2, #127	; 0x7f
    b4ec:	735a      	strb	r2, [r3, #13]
    b4ee:	f850 2f1c 	ldr.w	r2, [r0, #28]!
	return (node == list->tail) ? NULL : node->next;
    b4f2:	6a0c      	ldr	r4, [r1, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b4f4:	4282      	cmp	r2, r0
    b4f6:	bf08      	it	eq
    b4f8:	2200      	moveq	r2, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b4fa:	b922      	cbnz	r2, b506 <z_impl_k_yield+0x46>
	node->prev = tail;
    b4fc:	e9c3 0400 	strd	r0, r4, [r3]
	tail->next = node;
    b500:	6023      	str	r3, [r4, #0]
	list->tail = node;
    b502:	620b      	str	r3, [r1, #32]
}
    b504:	e00c      	b.n	b520 <z_impl_k_yield+0x60>
	int32_t b1 = thread_1->base.prio;
    b506:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    b50a:	f992 700e 	ldrsb.w	r7, [r2, #14]
	if (b1 != b2) {
    b50e:	42be      	cmp	r6, r7
    b510:	d00e      	beq.n	b530 <z_impl_k_yield+0x70>
		if (z_sched_prio_cmp(thread, t) > 0) {
    b512:	42b7      	cmp	r7, r6
    b514:	dd0c      	ble.n	b530 <z_impl_k_yield+0x70>
	sys_dnode_t *const prev = successor->prev;
    b516:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    b518:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    b51c:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    b51e:	6053      	str	r3, [r2, #4]
	update_cache(1);
    b520:	2001      	movs	r0, #1
    b522:	f7ff fde3 	bl	b0ec <update_cache>
    b526:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    b528:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    b52c:	f7f9 ba44 	b.w	49b8 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    b530:	42a2      	cmp	r2, r4
    b532:	d0e3      	beq.n	b4fc <z_impl_k_yield+0x3c>
    b534:	6812      	ldr	r2, [r2, #0]
    b536:	e7e0      	b.n	b4fa <z_impl_k_yield+0x3a>
    b538:	20001bcc 	.word	0x20001bcc

0000b53c <z_tick_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	LOG_DBG("thread %p for %lu ticks", _current, (unsigned long)ticks);

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    b53c:	ea50 0301 	orrs.w	r3, r0, r1
{
    b540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b544:	4605      	mov	r5, r0
    b546:	460e      	mov	r6, r1
	if (ticks == 0) {
    b548:	d103      	bne.n	b552 <z_tick_sleep+0x16>
	z_impl_k_yield();
    b54a:	f7ff ffb9 	bl	b4c0 <z_impl_k_yield>
		k_yield();
		return 0;
    b54e:	2000      	movs	r0, #0
    b550:	e02c      	b.n	b5ac <z_tick_sleep+0x70>
	}

	k_timeout_t timeout = Z_TIMEOUT_TICKS(ticks);
	if (Z_TICK_ABS(ticks) <= 0) {
    b552:	1c83      	adds	r3, r0, #2
    b554:	f171 33ff 	sbcs.w	r3, r1, #4294967295
    b558:	db2a      	blt.n	b5b0 <z_tick_sleep+0x74>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    b55a:	f002 f990 	bl	d87e <sys_clock_tick_get_32>
    b55e:	182c      	adds	r4, r5, r0
    b560:	f04f 0340 	mov.w	r3, #64	; 0x40
    b564:	f3ef 8811 	mrs	r8, BASEPRI
    b568:	f383 8812 	msr	BASEPRI_MAX, r3
    b56c:	f3bf 8f6f 	isb	sy
	}

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
    b570:	4f11      	ldr	r7, [pc, #68]	; (b5b8 <z_tick_sleep+0x7c>)
    b572:	4b12      	ldr	r3, [pc, #72]	; (b5bc <z_tick_sleep+0x80>)
    b574:	68b8      	ldr	r0, [r7, #8]
    b576:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
    b578:	f7ff fe44 	bl	b204 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    b57c:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    b57e:	4910      	ldr	r1, [pc, #64]	; (b5c0 <z_tick_sleep+0x84>)
    b580:	462a      	mov	r2, r5
    b582:	4633      	mov	r3, r6
    b584:	3018      	adds	r0, #24
    b586:	f000 f929 	bl	b7dc <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    b58a:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
    b58c:	7b53      	ldrb	r3, [r2, #13]
    b58e:	f043 0310 	orr.w	r3, r3, #16
    b592:	7353      	strb	r3, [r2, #13]
    b594:	4640      	mov	r0, r8
    b596:	f7f9 fa0f 	bl	49b8 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    b59a:	f002 f970 	bl	d87e <sys_clock_tick_get_32>
    b59e:	1a20      	subs	r0, r4, r0
    b5a0:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    b5a4:	2801      	cmp	r0, #1
    b5a6:	f173 0300 	sbcs.w	r3, r3, #0
    b5aa:	dbd0      	blt.n	b54e <z_tick_sleep+0x12>
		return ticks;
	}
#endif

	return 0;
}
    b5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    b5b0:	f06f 0401 	mvn.w	r4, #1
    b5b4:	1a24      	subs	r4, r4, r0
    b5b6:	e7d3      	b.n	b560 <z_tick_sleep+0x24>
    b5b8:	20001bcc 	.word	0x20001bcc
    b5bc:	20001bf8 	.word	0x20001bf8
    b5c0:	0000d703 	.word	0x0000d703

0000b5c4 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b5c4:	f1b1 3fff 	cmp.w	r1, #4294967295
    b5c8:	bf08      	it	eq
    b5ca:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    b5ce:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b5d0:	d106      	bne.n	b5e0 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    b5d2:	4b08      	ldr	r3, [pc, #32]	; (b5f4 <z_impl_k_sleep+0x30>)
    b5d4:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    b5d6:	f7ff ff09 	bl	b3ec <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    b5da:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    b5de:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    b5e0:	f7ff ffac 	bl	b53c <z_tick_sleep>
    b5e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    b5e8:	fb80 0303 	smull	r0, r3, r0, r3
    b5ec:	0bc0      	lsrs	r0, r0, #15
    b5ee:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    b5f2:	e7f4      	b.n	b5de <z_impl_k_sleep+0x1a>
    b5f4:	20001bcc 	.word	0x20001bcc

0000b5f8 <z_impl_k_usleep>:
}
#include <syscalls/k_sleep_mrsh.c>
#endif

int32_t z_impl_k_usleep(int us)
{
    b5f8:	b538      	push	{r3, r4, r5, lr}
    b5fa:	4c0a      	ldr	r4, [pc, #40]	; (b624 <z_impl_k_usleep+0x2c>)
    b5fc:	4a0a      	ldr	r2, [pc, #40]	; (b628 <z_impl_k_usleep+0x30>)
    b5fe:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    b602:	2100      	movs	r1, #0
    b604:	fbc0 4105 	smlal	r4, r1, r0, r5
    b608:	2300      	movs	r3, #0
    b60a:	4620      	mov	r0, r4
    b60c:	f7f4 fd68 	bl	e0 <__aeabi_uldivmod>
	int32_t ticks;

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, usleep, us);

	ticks = k_us_to_ticks_ceil64(us);
	ticks = z_tick_sleep(ticks);
    b610:	17c1      	asrs	r1, r0, #31
    b612:	f7ff ff93 	bl	b53c <z_tick_sleep>
    b616:	4b04      	ldr	r3, [pc, #16]	; (b628 <z_impl_k_usleep+0x30>)
    b618:	fb80 0303 	smull	r0, r3, r0, r3
    b61c:	0bc0      	lsrs	r0, r0, #15

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, usleep, us, k_ticks_to_us_floor64(ticks));

	return k_ticks_to_us_floor64(ticks);
}
    b61e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
    b622:	bd38      	pop	{r3, r4, r5, pc}
    b624:	000f423f 	.word	0x000f423f
    b628:	000f4240 	.word	0x000f4240

0000b62c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    b62c:	4b01      	ldr	r3, [pc, #4]	; (b634 <z_impl_z_current_get+0x8>)
    b62e:	6898      	ldr	r0, [r3, #8]
    b630:	4770      	bx	lr
    b632:	bf00      	nop
    b634:	20001bcc 	.word	0x20001bcc

0000b638 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    b638:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b63c:	4604      	mov	r4, r0
    b63e:	f04f 0340 	mov.w	r3, #64	; 0x40
    b642:	f3ef 8611 	mrs	r6, BASEPRI
    b646:	f383 8812 	msr	BASEPRI_MAX, r3
    b64a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.user_options & K_ESSENTIAL) != 0) {
    b64e:	7b03      	ldrb	r3, [r0, #12]
    b650:	07d9      	lsls	r1, r3, #31
    b652:	d50b      	bpl.n	b66c <z_thread_abort+0x34>
	__asm__ volatile(
    b654:	f386 8811 	msr	BASEPRI, r6
    b658:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&sched_spinlock, key);
		__ASSERT(false, "aborting essential thread %p", thread);
		k_panic();
    b65c:	4040      	eors	r0, r0
    b65e:	f380 8811 	msr	BASEPRI, r0
    b662:	f04f 0004 	mov.w	r0, #4
    b666:	df02      	svc	2
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    b668:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    b66c:	7b43      	ldrb	r3, [r0, #13]
    b66e:	071a      	lsls	r2, r3, #28
    b670:	d504      	bpl.n	b67c <z_thread_abort+0x44>
    b672:	f386 8811 	msr	BASEPRI, r6
    b676:	f3bf 8f6f 	isb	sy
    b67a:	e7f5      	b.n	b668 <z_thread_abort+0x30>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    b67c:	f023 0220 	bic.w	r2, r3, #32
    b680:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    b684:	09d2      	lsrs	r2, r2, #7
    b686:	d120      	bne.n	b6ca <z_thread_abort+0x92>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    b688:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    b68a:	68a3      	ldr	r3, [r4, #8]
    b68c:	b113      	cbz	r3, b694 <z_thread_abort+0x5c>
			unpend_thread_no_timeout(thread);
    b68e:	4620      	mov	r0, r4
    b690:	f001 ffc1 	bl	d616 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    b694:	f104 0018 	add.w	r0, r4, #24
    b698:	f002 f8cb 	bl	d832 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    b69c:	f104 0758 	add.w	r7, r4, #88	; 0x58
    b6a0:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    b6a4:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b6a6:	42bd      	cmp	r5, r7
    b6a8:	d000      	beq.n	b6ac <z_thread_abort+0x74>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    b6aa:	b9b5      	cbnz	r5, b6da <z_thread_abort+0xa2>
		update_cache(1);
    b6ac:	2001      	movs	r0, #1
    b6ae:	f7ff fd1d 	bl	b0ec <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    b6b2:	4b10      	ldr	r3, [pc, #64]	; (b6f4 <z_thread_abort+0xbc>)
    b6b4:	689b      	ldr	r3, [r3, #8]
    b6b6:	42a3      	cmp	r3, r4
    b6b8:	d1db      	bne.n	b672 <z_thread_abort+0x3a>
    b6ba:	f3ef 8305 	mrs	r3, IPSR
    b6be:	2b00      	cmp	r3, #0
    b6c0:	d1d7      	bne.n	b672 <z_thread_abort+0x3a>
    b6c2:	4630      	mov	r0, r6
    b6c4:	f7f9 f978 	bl	49b8 <arch_swap>
	return ret;
    b6c8:	e7d3      	b.n	b672 <z_thread_abort+0x3a>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    b6ca:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    b6ce:	f043 0308 	orr.w	r3, r3, #8
    b6d2:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    b6d4:	f001 ff97 	bl	d606 <sys_dlist_remove>
}
    b6d8:	e7d7      	b.n	b68a <z_thread_abort+0x52>
		unpend_thread_no_timeout(thread);
    b6da:	4628      	mov	r0, r5
    b6dc:	f001 ff9b 	bl	d616 <unpend_thread_no_timeout>
    b6e0:	f105 0018 	add.w	r0, r5, #24
    b6e4:	f002 f8a5 	bl	d832 <z_abort_timeout>
    b6e8:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    b6ec:	4628      	mov	r0, r5
    b6ee:	f7ff fd55 	bl	b19c <ready_thread>
    b6f2:	e7d7      	b.n	b6a4 <z_thread_abort+0x6c>
    b6f4:	20001bcc 	.word	0x20001bcc

0000b6f8 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    b6f8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    b6fa:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    b6fe:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    b700:	e9cd 6700 	strd	r6, r7, [sp]
    b704:	f7ff fdde 	bl	b2c4 <z_pend_curr>

	if (data != NULL) {
    b708:	b11c      	cbz	r4, b712 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    b70a:	4b03      	ldr	r3, [pc, #12]	; (b718 <z_sched_wait+0x20>)
    b70c:	689b      	ldr	r3, [r3, #8]
    b70e:	695b      	ldr	r3, [r3, #20]
    b710:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    b712:	b002      	add	sp, #8
    b714:	bdd0      	pop	{r4, r6, r7, pc}
    b716:	bf00      	nop
    b718:	20001bcc 	.word	0x20001bcc

0000b71c <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    b71c:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    b71e:	4806      	ldr	r0, [pc, #24]	; (b738 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    b720:	4a06      	ldr	r2, [pc, #24]	; (b73c <z_data_copy+0x20>)
    b722:	4907      	ldr	r1, [pc, #28]	; (b740 <z_data_copy+0x24>)
    b724:	1a12      	subs	r2, r2, r0
    b726:	f001 fe12 	bl	d34e <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    b72a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    b72e:	4a05      	ldr	r2, [pc, #20]	; (b744 <z_data_copy+0x28>)
    b730:	4905      	ldr	r1, [pc, #20]	; (b748 <z_data_copy+0x2c>)
    b732:	4806      	ldr	r0, [pc, #24]	; (b74c <z_data_copy+0x30>)
    b734:	f001 be0b 	b.w	d34e <z_early_memcpy>
    b738:	20000000 	.word	0x20000000
    b73c:	200003e8 	.word	0x200003e8
    b740:	00010558 	.word	0x00010558
    b744:	00000000 	.word	0x00000000
    b748:	00010558 	.word	0x00010558
    b74c:	20000000 	.word	0x20000000

0000b750 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    b750:	4b03      	ldr	r3, [pc, #12]	; (b760 <elapsed+0x10>)
    b752:	681b      	ldr	r3, [r3, #0]
    b754:	b90b      	cbnz	r3, b75a <elapsed+0xa>
    b756:	f7fb bd87 	b.w	7268 <sys_clock_elapsed>
}
    b75a:	2000      	movs	r0, #0
    b75c:	4770      	bx	lr
    b75e:	bf00      	nop
    b760:	20001c04 	.word	0x20001c04

0000b764 <next_timeout>:

static int32_t next_timeout(void)
{
    b764:	b510      	push	{r4, lr}
	return list->head == list;
    b766:	4b0e      	ldr	r3, [pc, #56]	; (b7a0 <next_timeout+0x3c>)
    b768:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b76a:	429c      	cmp	r4, r3
    b76c:	d104      	bne.n	b778 <next_timeout+0x14>
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    b76e:	f7ff ffef 	bl	b750 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
		ret = MAX_WAIT;
    b772:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
	}

	return ret;
}
    b776:	bd10      	pop	{r4, pc}
	int32_t ticks_elapsed = elapsed();
    b778:	f7ff ffea 	bl	b750 <elapsed>
	if ((to == NULL) ||
    b77c:	2c00      	cmp	r4, #0
    b77e:	d0f8      	beq.n	b772 <next_timeout+0xe>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    b780:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    b784:	1a1b      	subs	r3, r3, r0
    b786:	eb62 72e0 	sbc.w	r2, r2, r0, asr #31
	if ((to == NULL) ||
    b78a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    b78e:	f172 0100 	sbcs.w	r1, r2, #0
    b792:	daee      	bge.n	b772 <next_timeout+0xe>
		ret = MAX(0, to->dticks - ticks_elapsed);
    b794:	2a00      	cmp	r2, #0
    b796:	bfac      	ite	ge
    b798:	4618      	movge	r0, r3
    b79a:	2000      	movlt	r0, #0
	return ret;
    b79c:	e7eb      	b.n	b776 <next_timeout+0x12>
    b79e:	bf00      	nop
    b7a0:	200000f0 	.word	0x200000f0

0000b7a4 <remove_timeout>:
{
    b7a4:	b530      	push	{r4, r5, lr}
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    b7a6:	b170      	cbz	r0, b7c6 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    b7a8:	4b0b      	ldr	r3, [pc, #44]	; (b7d8 <remove_timeout+0x34>)
    b7aa:	685b      	ldr	r3, [r3, #4]
    b7ac:	4298      	cmp	r0, r3
    b7ae:	d00a      	beq.n	b7c6 <remove_timeout+0x22>
    b7b0:	6803      	ldr	r3, [r0, #0]
	if (next(t) != NULL) {
    b7b2:	b143      	cbz	r3, b7c6 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    b7b4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    b7b8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    b7bc:	1912      	adds	r2, r2, r4
    b7be:	eb41 0105 	adc.w	r1, r1, r5
    b7c2:	e9c3 2104 	strd	r2, r1, [r3, #16]
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
	sys_dnode_t *const next = node->next;
    b7c6:	e9d0 3200 	ldrd	r3, r2, [r0]

	prev->next = next;
    b7ca:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    b7cc:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b7ce:	2300      	movs	r3, #0
	node->prev = NULL;
    b7d0:	e9c0 3300 	strd	r3, r3, [r0]
}
    b7d4:	bd30      	pop	{r4, r5, pc}
    b7d6:	bf00      	nop
    b7d8:	200000f0 	.word	0x200000f0

0000b7dc <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b7dc:	f1b3 3fff 	cmp.w	r3, #4294967295
    b7e0:	bf08      	it	eq
    b7e2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    b7e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b7e8:	4604      	mov	r4, r0
    b7ea:	461d      	mov	r5, r3
    b7ec:	4616      	mov	r6, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b7ee:	d05c      	beq.n	b8aa <z_add_timeout+0xce>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    b7f0:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    b7f2:	f04f 0340 	mov.w	r3, #64	; 0x40
    b7f6:	f3ef 8711 	mrs	r7, BASEPRI
    b7fa:	f383 8812 	msr	BASEPRI_MAX, r3
    b7fe:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    b802:	3201      	adds	r2, #1
    b804:	f175 33ff 	sbcs.w	r3, r5, #4294967295
    b808:	da24      	bge.n	b854 <z_add_timeout+0x78>
		    Z_TICK_ABS(timeout.ticks) >= 0) {
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    b80a:	492d      	ldr	r1, [pc, #180]	; (b8c0 <z_add_timeout+0xe4>)
    b80c:	e9d1 2000 	ldrd	r2, r0, [r1]
    b810:	f06f 0301 	mvn.w	r3, #1
    b814:	1a9b      	subs	r3, r3, r2
    b816:	f04f 32ff 	mov.w	r2, #4294967295
    b81a:	eb62 0000 	sbc.w	r0, r2, r0
    b81e:	1b9e      	subs	r6, r3, r6
    b820:	eb60 0005 	sbc.w	r0, r0, r5

			to->dticks = MAX(1, ticks);
    b824:	2e01      	cmp	r6, #1
    b826:	f170 0300 	sbcs.w	r3, r0, #0
    b82a:	da01      	bge.n	b830 <z_add_timeout+0x54>
    b82c:	2601      	movs	r6, #1
    b82e:	2000      	movs	r0, #0
    b830:	e9c4 6004 	strd	r6, r0, [r4, #16]
	return list->head == list;
    b834:	4e23      	ldr	r6, [pc, #140]	; (b8c4 <z_add_timeout+0xe8>)
    b836:	f8d6 c000 	ldr.w	ip, [r6]
	return (node == list->tail) ? NULL : node->next;
    b83a:	6875      	ldr	r5, [r6, #4]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b83c:	45b4      	cmp	ip, r6
    b83e:	bf08      	it	eq
    b840:	f04f 0c00 	moveq.w	ip, #0
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
		}

		for (t = first(); t != NULL; t = next(t)) {
    b844:	f1bc 0f00 	cmp.w	ip, #0
    b848:	d10d      	bne.n	b866 <z_add_timeout+0x8a>
	node->prev = tail;
    b84a:	e9c4 6500 	strd	r6, r5, [r4]
	tail->next = node;
    b84e:	602c      	str	r4, [r5, #0]
	list->tail = node;
    b850:	6074      	str	r4, [r6, #4]
}
    b852:	e01c      	b.n	b88e <z_add_timeout+0xb2>
			to->dticks = timeout.ticks + 1 + elapsed();
    b854:	f7ff ff7c 	bl	b750 <elapsed>
    b858:	3601      	adds	r6, #1
    b85a:	f145 0500 	adc.w	r5, r5, #0
    b85e:	1836      	adds	r6, r6, r0
    b860:	eb45 70e0 	adc.w	r0, r5, r0, asr #31
    b864:	e7e4      	b.n	b830 <z_add_timeout+0x54>
			if (t->dticks > to->dticks) {
    b866:	e9dc 2004 	ldrd	r2, r0, [ip, #16]
    b86a:	e9d4 3104 	ldrd	r3, r1, [r4, #16]
    b86e:	4293      	cmp	r3, r2
    b870:	eb71 0e00 	sbcs.w	lr, r1, r0
    b874:	da1a      	bge.n	b8ac <z_add_timeout+0xd0>
				t->dticks -= to->dticks;
    b876:	1ad2      	subs	r2, r2, r3
	sys_dnode_t *const prev = successor->prev;
    b878:	f8dc 3004 	ldr.w	r3, [ip, #4]
    b87c:	eb60 0001 	sbc.w	r0, r0, r1
    b880:	e9cc 2004 	strd	r2, r0, [ip, #16]
	node->next = successor;
    b884:	e9c4 c300 	strd	ip, r3, [r4]
	prev->next = node;
    b888:	601c      	str	r4, [r3, #0]
	successor->prev = node;
    b88a:	f8cc 4004 	str.w	r4, [ip, #4]
	return list->head == list;
    b88e:	6833      	ldr	r3, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b890:	42b3      	cmp	r3, r6
    b892:	d006      	beq.n	b8a2 <z_add_timeout+0xc6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    b894:	429c      	cmp	r4, r3
    b896:	d104      	bne.n	b8a2 <z_add_timeout+0xc6>
			sys_clock_set_timeout(next_timeout(), false);
    b898:	f7ff ff64 	bl	b764 <next_timeout>
    b89c:	2100      	movs	r1, #0
    b89e:	f7fb fcb1 	bl	7204 <sys_clock_set_timeout>
	__asm__ volatile(
    b8a2:	f387 8811 	msr	BASEPRI, r7
    b8a6:	f3bf 8f6f 	isb	sy
		}
	}
}
    b8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			to->dticks -= t->dticks;
    b8ac:	1a9b      	subs	r3, r3, r2
    b8ae:	eb61 0100 	sbc.w	r1, r1, r0
	return (node == list->tail) ? NULL : node->next;
    b8b2:	45ac      	cmp	ip, r5
    b8b4:	e9c4 3104 	strd	r3, r1, [r4, #16]
    b8b8:	d0c7      	beq.n	b84a <z_add_timeout+0x6e>
    b8ba:	f8dc c000 	ldr.w	ip, [ip]
    b8be:	e7c1      	b.n	b844 <z_add_timeout+0x68>
    b8c0:	20000b78 	.word	0x20000b78
    b8c4:	200000f0 	.word	0x200000f0

0000b8c8 <sys_clock_announce>:
	}
	return ret;
}

void sys_clock_announce(int32_t ticks)
{
    b8c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__asm__ volatile(
    b8cc:	f04f 0340 	mov.w	r3, #64	; 0x40
    b8d0:	f3ef 8c11 	mrs	ip, BASEPRI
    b8d4:	f383 8812 	msr	BASEPRI_MAX, r3
    b8d8:	f3bf 8f6f 	isb	sy
	return list->head == list;
    b8dc:	f8df a0b0 	ldr.w	sl, [pc, #176]	; b990 <sys_clock_announce+0xc8>
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    b8e0:	f8df 90b0 	ldr.w	r9, [pc, #176]	; b994 <sys_clock_announce+0xcc>
	for (t = first();
	     (t != NULL) && (t->dticks <= announce_remaining);
	     t = first()) {
		int dt = t->dticks;

		curr_tick += dt;
    b8e4:	4f2c      	ldr	r7, [pc, #176]	; (b998 <sys_clock_announce+0xd0>)
	announce_remaining = ticks;
    b8e6:	f8c9 0000 	str.w	r0, [r9]
    b8ea:	f8da 0000 	ldr.w	r0, [sl]
		t->dticks = 0;
    b8ee:	2400      	movs	r4, #0
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b8f0:	4550      	cmp	r0, sl
    b8f2:	bf08      	it	eq
    b8f4:	2000      	moveq	r0, #0
    b8f6:	2500      	movs	r5, #0
		curr_tick += dt;
    b8f8:	e9d7 2100 	ldrd	r2, r1, [r7]
	     (t != NULL) && (t->dticks <= announce_remaining);
    b8fc:	f8d9 3000 	ldr.w	r3, [r9]
    b900:	46e0      	mov	r8, ip
    b902:	b380      	cbz	r0, b966 <sys_clock_announce+0x9e>
    b904:	e9d0 6c04 	ldrd	r6, ip, [r0, #16]
    b908:	ea4f 7ee3 	mov.w	lr, r3, asr #31
    b90c:	42b3      	cmp	r3, r6
    b90e:	eb7e 0b0c 	sbcs.w	fp, lr, ip
    b912:	da05      	bge.n	b920 <sys_clock_announce+0x58>
		key = k_spin_lock(&timeout_lock);
		announce_remaining -= dt;
	}

	if (t != NULL) {
		t->dticks -= announce_remaining;
    b914:	1af6      	subs	r6, r6, r3
    b916:	eb6c 040e 	sbc.w	r4, ip, lr
    b91a:	e9c0 6404 	strd	r6, r4, [r0, #16]
    b91e:	e022      	b.n	b966 <sys_clock_announce+0x9e>
		curr_tick += dt;
    b920:	18b2      	adds	r2, r6, r2
    b922:	eb41 71e6 	adc.w	r1, r1, r6, asr #31
		t->dticks = 0;
    b926:	e9c0 4504 	strd	r4, r5, [r0, #16]
		curr_tick += dt;
    b92a:	e9c7 2100 	strd	r2, r1, [r7]
		remove_timeout(t);
    b92e:	f7ff ff39 	bl	b7a4 <remove_timeout>
	__asm__ volatile(
    b932:	f388 8811 	msr	BASEPRI, r8
    b936:	f3bf 8f6f 	isb	sy
		t->fn(t);
    b93a:	6883      	ldr	r3, [r0, #8]
    b93c:	4798      	blx	r3
	__asm__ volatile(
    b93e:	f04f 0340 	mov.w	r3, #64	; 0x40
    b942:	f3ef 8811 	mrs	r8, BASEPRI
    b946:	f383 8812 	msr	BASEPRI_MAX, r3
    b94a:	f3bf 8f6f 	isb	sy
		announce_remaining -= dt;
    b94e:	f8d9 3000 	ldr.w	r3, [r9]
	return list->head == list;
    b952:	f8da 0000 	ldr.w	r0, [sl]
    b956:	1b9b      	subs	r3, r3, r6
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b958:	4550      	cmp	r0, sl
	k.key = arch_irq_lock();
    b95a:	46c4      	mov	ip, r8
    b95c:	f8c9 3000 	str.w	r3, [r9]
    b960:	d1ca      	bne.n	b8f8 <sys_clock_announce+0x30>
		curr_tick += dt;
    b962:	e9d7 2100 	ldrd	r2, r1, [r7]
	}

	curr_tick += announce_remaining;
    b966:	189a      	adds	r2, r3, r2
    b968:	eb41 73e3 	adc.w	r3, r1, r3, asr #31
	announce_remaining = 0;
    b96c:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    b96e:	e9c7 2300 	strd	r2, r3, [r7]
	announce_remaining = 0;
    b972:	f8c9 4000 	str.w	r4, [r9]

	sys_clock_set_timeout(next_timeout(), false);
    b976:	f7ff fef5 	bl	b764 <next_timeout>
    b97a:	4621      	mov	r1, r4
    b97c:	f7fb fc42 	bl	7204 <sys_clock_set_timeout>
	__asm__ volatile(
    b980:	f388 8811 	msr	BASEPRI, r8
    b984:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&timeout_lock, key);

#ifdef CONFIG_TIMESLICING
	z_time_slice();
#endif
}
    b988:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_time_slice();
    b98c:	f7ff bc6a 	b.w	b264 <z_time_slice>
    b990:	200000f0 	.word	0x200000f0
    b994:	20001c04 	.word	0x20001c04
    b998:	20000b78 	.word	0x20000b78

0000b99c <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    b99c:	b510      	push	{r4, lr}
	__asm__ volatile(
    b99e:	f04f 0340 	mov.w	r3, #64	; 0x40
    b9a2:	f3ef 8411 	mrs	r4, BASEPRI
    b9a6:	f383 8812 	msr	BASEPRI_MAX, r3
    b9aa:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + elapsed();
    b9ae:	f7ff fecf 	bl	b750 <elapsed>
    b9b2:	4a06      	ldr	r2, [pc, #24]	; (b9cc <sys_clock_tick_get+0x30>)
    b9b4:	4603      	mov	r3, r0
    b9b6:	e9d2 0100 	ldrd	r0, r1, [r2]
    b9ba:	1818      	adds	r0, r3, r0
    b9bc:	eb41 71e3 	adc.w	r1, r1, r3, asr #31
	__asm__ volatile(
    b9c0:	f384 8811 	msr	BASEPRI, r4
    b9c4:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    b9c8:	bd10      	pop	{r4, pc}
    b9ca:	bf00      	nop
    b9cc:	20000b78 	.word	0x20000b78

0000b9d0 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    b9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b9d2:	4604      	mov	r4, r0
	__asm__ volatile(
    b9d4:	f04f 0340 	mov.w	r3, #64	; 0x40
    b9d8:	f3ef 8711 	mrs	r7, BASEPRI
    b9dc:	f383 8812 	msr	BASEPRI_MAX, r3
    b9e0:	f3bf 8f6f 	isb	sy
	 * interrupt. Then, the timeout structure for this timer will turn out
	 * to be linked to the timeout list. And in such case, since the timer
	 * was restarted, its expiration handler should not be executed then,
	 * so the function exits immediately.
	 */
	if (sys_dnode_is_linked(&t->node)) {
    b9e4:	6802      	ldr	r2, [r0, #0]
    b9e6:	b122      	cbz	r2, b9f2 <z_timer_expiration_handler+0x22>
	__asm__ volatile(
    b9e8:	f387 8811 	msr	BASEPRI, r7
    b9ec:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    b9f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    b9f2:	e9d0 360a 	ldrd	r3, r6, [r0, #40]	; 0x28
    b9f6:	1c58      	adds	r0, r3, #1
    b9f8:	f146 0100 	adc.w	r1, r6, #0
    b9fc:	2802      	cmp	r0, #2
    b9fe:	f171 0100 	sbcs.w	r1, r1, #0
    ba02:	d327      	bcc.n	ba54 <z_timer_expiration_handler+0x84>
		next.ticks = MAX(next.ticks - 1, 0);
    ba04:	2b01      	cmp	r3, #1
    ba06:	f176 0100 	sbcs.w	r1, r6, #0
    ba0a:	bfbc      	itt	lt
    ba0c:	2301      	movlt	r3, #1
    ba0e:	4616      	movlt	r6, r2
    ba10:	1e5d      	subs	r5, r3, #1
    ba12:	f146 36ff 	adc.w	r6, r6, #4294967295
	return z_impl_k_uptime_ticks();
    ba16:	f001 ff36 	bl	d886 <z_impl_k_uptime_ticks>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    ba1a:	3001      	adds	r0, #1
    ba1c:	f141 0100 	adc.w	r1, r1, #0
    ba20:	1940      	adds	r0, r0, r5
    ba22:	eb46 0101 	adc.w	r1, r6, r1
    ba26:	2801      	cmp	r0, #1
    ba28:	f171 0100 	sbcs.w	r1, r1, #0
    ba2c:	db3a      	blt.n	baa4 <z_timer_expiration_handler+0xd4>
    ba2e:	f001 ff2a 	bl	d886 <z_impl_k_uptime_ticks>
    ba32:	3001      	adds	r0, #1
    ba34:	f141 0100 	adc.w	r1, r1, #0
    ba38:	f06f 0201 	mvn.w	r2, #1
    ba3c:	1940      	adds	r0, r0, r5
    ba3e:	eb46 0301 	adc.w	r3, r6, r1
    ba42:	1a12      	subs	r2, r2, r0
    ba44:	f04f 31ff 	mov.w	r1, #4294967295
    ba48:	eb61 0303 	sbc.w	r3, r1, r3
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    ba4c:	4918      	ldr	r1, [pc, #96]	; (bab0 <z_timer_expiration_handler+0xe0>)
    ba4e:	4620      	mov	r0, r4
    ba50:	f7ff fec4 	bl	b7dc <z_add_timeout>
	timer->status += 1U;
    ba54:	6b23      	ldr	r3, [r4, #48]	; 0x30
    ba56:	3301      	adds	r3, #1
    ba58:	6323      	str	r3, [r4, #48]	; 0x30
	if (timer->expiry_fn != NULL) {
    ba5a:	6a23      	ldr	r3, [r4, #32]
    ba5c:	b173      	cbz	r3, ba7c <z_timer_expiration_handler+0xac>
    ba5e:	f387 8811 	msr	BASEPRI, r7
    ba62:	f3bf 8f6f 	isb	sy
		timer->expiry_fn(timer);
    ba66:	6a23      	ldr	r3, [r4, #32]
    ba68:	4620      	mov	r0, r4
    ba6a:	4798      	blx	r3
	__asm__ volatile(
    ba6c:	f04f 0340 	mov.w	r3, #64	; 0x40
    ba70:	f3ef 8711 	mrs	r7, BASEPRI
    ba74:	f383 8812 	msr	BASEPRI_MAX, r3
    ba78:	f3bf 8f6f 	isb	sy
	return list->head == list;
    ba7c:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    ba80:	42a5      	cmp	r5, r4
    ba82:	d0b1      	beq.n	b9e8 <z_timer_expiration_handler+0x18>
	if (thread == NULL) {
    ba84:	2d00      	cmp	r5, #0
    ba86:	d0af      	beq.n	b9e8 <z_timer_expiration_handler+0x18>
	z_unpend_thread_no_timeout(thread);
    ba88:	4628      	mov	r0, r5
    ba8a:	f001 fe06 	bl	d69a <z_unpend_thread_no_timeout>
    ba8e:	2300      	movs	r3, #0
    ba90:	67ab      	str	r3, [r5, #120]	; 0x78
	__asm__ volatile(
    ba92:	f387 8811 	msr	BASEPRI, r7
    ba96:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    ba9a:	4628      	mov	r0, r5
}
    ba9c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    baa0:	f001 bdeb 	b.w	d67a <z_ready_thread>
		next = K_TIMEOUT_ABS_TICKS(k_uptime_ticks() + 1 + next.ticks);
    baa4:	f06f 0201 	mvn.w	r2, #1
    baa8:	f04f 33ff 	mov.w	r3, #4294967295
    baac:	e7ce      	b.n	ba4c <z_timer_expiration_handler+0x7c>
    baae:	bf00      	nop
    bab0:	0000b9d1 	.word	0x0000b9d1

0000bab4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    bab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer, duration, period);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    bab8:	f1b3 3fff 	cmp.w	r3, #4294967295
    babc:	bf08      	it	eq
    babe:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    bac2:	e9dd 6708 	ldrd	r6, r7, [sp, #32]
    bac6:	4605      	mov	r5, r0
    bac8:	461c      	mov	r4, r3
    baca:	4691      	mov	r9, r2
    bacc:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    bace:	d01c      	beq.n	bb0a <z_impl_k_timer_start+0x56>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (Z_TICK_ABS(duration.ticks) < 0) {
    bad0:	1c53      	adds	r3, r2, #1
    bad2:	f174 33ff 	sbcs.w	r3, r4, #4294967295
    bad6:	db09      	blt.n	baec <z_impl_k_timer_start+0x38>
		duration.ticks = MAX(duration.ticks - 1, 0);
    bad8:	2a01      	cmp	r2, #1
    bada:	f174 0300 	sbcs.w	r3, r4, #0
    bade:	bfbc      	itt	lt
    bae0:	2201      	movlt	r2, #1
    bae2:	2400      	movlt	r4, #0
    bae4:	f112 39ff 	adds.w	r9, r2, #4294967295
    bae8:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    baec:	4628      	mov	r0, r5
    baee:	f001 fea0 	bl	d832 <z_abort_timeout>
	timer->period = period;
    baf2:	e9c5 670a 	strd	r6, r7, [r5, #40]	; 0x28
	timer->status = 0U;
    baf6:	2300      	movs	r3, #0
    baf8:	632b      	str	r3, [r5, #48]	; 0x30

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    bafa:	464a      	mov	r2, r9
    bafc:	4643      	mov	r3, r8
    bafe:	4628      	mov	r0, r5
    bb00:	4903      	ldr	r1, [pc, #12]	; (bb10 <z_impl_k_timer_start+0x5c>)
		     duration);
}
    bb02:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    bb06:	f7ff be69 	b.w	b7dc <z_add_timeout>
}
    bb0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    bb0e:	bf00      	nop
    bb10:	0000b9d1 	.word	0x0000b9d1

0000bb14 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    bb14:	b573      	push	{r0, r1, r4, r5, r6, lr}
    bb16:	4606      	mov	r6, r0
    bb18:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    bb1a:	f001 fc59 	bl	d3d0 <k_is_in_isr>
    bb1e:	b978      	cbnz	r0, bb40 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    bb20:	4b0b      	ldr	r3, [pc, #44]	; (bb50 <z_thread_aligned_alloc+0x3c>)
    bb22:	689b      	ldr	r3, [r3, #8]
    bb24:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
    bb26:	b17c      	cbz	r4, bb48 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    bb28:	1d2a      	adds	r2, r5, #4
    bb2a:	d209      	bcs.n	bb40 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    bb2c:	2000      	movs	r0, #0
    bb2e:	2100      	movs	r1, #0
    bb30:	e9cd 0100 	strd	r0, r1, [sp]
    bb34:	f046 0104 	orr.w	r1, r6, #4
    bb38:	4620      	mov	r0, r4
    bb3a:	f001 ff04 	bl	d946 <k_heap_aligned_alloc>
	if (mem == NULL) {
    bb3e:	b908      	cbnz	r0, bb44 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    bb40:	2400      	movs	r4, #0
	}

	return ret;
    bb42:	e001      	b.n	bb48 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
    bb44:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    bb46:	1d04      	adds	r4, r0, #4
}
    bb48:	4620      	mov	r0, r4
    bb4a:	b002      	add	sp, #8
    bb4c:	bd70      	pop	{r4, r5, r6, pc}
    bb4e:	bf00      	nop
    bb50:	20001bcc 	.word	0x20001bcc

0000bb54 <boot_banner>:
	printk("***** delaying boot " DELAY_STR "ms (per build configuration) *****\n");
	k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
#endif /* defined(CONFIG_BOOT_DELAY) && (CONFIG_BOOT_DELAY > 0) */

#if CONFIG_BOOT_BANNER
	printk("*** Booting Zephyr OS build " BANNER_VERSION BANNER_POSTFIX " ***\n");
    bb54:	4801      	ldr	r0, [pc, #4]	; (bb5c <boot_banner+0x8>)
    bb56:	f000 b8ce 	b.w	bcf6 <printk>
    bb5a:	bf00      	nop
    bb5c:	00010525 	.word	0x00010525

0000bb60 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(void)
{
    bb60:	b538      	push	{r3, r4, r5, lr}
	STRUCT_SECTION_FOREACH(k_heap, h) {
    bb62:	4c06      	ldr	r4, [pc, #24]	; (bb7c <statics_init+0x1c>)
    bb64:	4d06      	ldr	r5, [pc, #24]	; (bb80 <statics_init+0x20>)
    bb66:	42ac      	cmp	r4, r5
    bb68:	d301      	bcc.n	bb6e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    bb6a:	2000      	movs	r0, #0
    bb6c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    bb6e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    bb72:	4620      	mov	r0, r4
    bb74:	f001 fedf 	bl	d936 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    bb78:	3414      	adds	r4, #20
    bb7a:	e7f4      	b.n	bb66 <statics_init+0x6>
    bb7c:	200002e8 	.word	0x200002e8
    bb80:	200002e8 	.word	0x200002e8

0000bb84 <gpio_pin_get>:
{
    bb84:	b537      	push	{r0, r1, r2, r4, r5, lr}
    bb86:	460c      	mov	r4, r1
	const struct gpio_driver_data *const data =
    bb88:	6905      	ldr	r5, [r0, #16]
	return api->port_get_raw(port, value);
    bb8a:	6883      	ldr	r3, [r0, #8]
    bb8c:	a901      	add	r1, sp, #4
    bb8e:	685b      	ldr	r3, [r3, #4]
    bb90:	4798      	blx	r3
	if (ret == 0) {
    bb92:	b948      	cbnz	r0, bba8 <gpio_pin_get+0x24>
		*value ^= data->invert;
    bb94:	9b01      	ldr	r3, [sp, #4]
    bb96:	682a      	ldr	r2, [r5, #0]
    bb98:	405a      	eors	r2, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
    bb9a:	2301      	movs	r3, #1
    bb9c:	fa03 f104 	lsl.w	r1, r3, r4
    bba0:	420a      	tst	r2, r1
    bba2:	bf14      	ite	ne
    bba4:	4618      	movne	r0, r3
    bba6:	2000      	moveq	r0, #0
}
    bba8:	b003      	add	sp, #12
    bbaa:	bd30      	pop	{r4, r5, pc}

0000bbac <gpio_pin_get_dt>:
	return gpio_pin_get(spec->port, spec->pin);
    bbac:	7901      	ldrb	r1, [r0, #4]
    bbae:	6800      	ldr	r0, [r0, #0]
    bbb0:	f7ff bfe8 	b.w	bb84 <gpio_pin_get>

0000bbb4 <button_callback>:
}
    bbb4:	4770      	bx	lr

0000bbb6 <init_pmw3360_sensor>:
    err = pmw3360_init();
    bbb6:	f7f5 bbc5 	b.w	1344 <pmw3360_init>

0000bbba <set_cpi>:
bool set_cpi(uint16_t cpi) {
    bbba:	b508      	push	{r3, lr}
    return set_pmw3360_cpi(cpi);
    bbbc:	f7f5 fcce 	bl	155c <set_pmw3360_cpi>
}
    bbc0:	3800      	subs	r0, #0
    bbc2:	bf18      	it	ne
    bbc4:	2001      	movne	r0, #1
    bbc6:	bd08      	pop	{r3, pc}

0000bbc8 <read_motion>:

motion_info_t read_motion(void) {
    bbc8:	b513      	push	{r0, r1, r4, lr}
    pmw3360_fetch();
    bbca:	f7f5 fc35 	bl	1438 <pmw3360_fetch>
    motion_info_t info;
    info.dx = get_pmw3360_dx(); //dx.val1;
    bbce:	f7f5 fd13 	bl	15f8 <get_pmw3360_dx>
    bbd2:	4604      	mov	r4, r0
    info.dy = -get_pmw3360_dy(); //-dy.val1;
    bbd4:	f7f5 fd16 	bl	1604 <get_pmw3360_dy>
    return info;
    bbd8:	b2a4      	uxth	r4, r4
    bbda:	4243      	negs	r3, r0
    bbdc:	2000      	movs	r0, #0
    bbde:	f364 000f 	bfi	r0, r4, #0, #16
    bbe2:	b29b      	uxth	r3, r3
    bbe4:	f363 401f 	bfi	r0, r3, #16, #16
}
    bbe8:	b002      	add	sp, #8
    bbea:	bd10      	pop	{r4, pc}

0000bbec <k_sleep.constprop.0.isra.0>:
	return z_impl_k_sleep(timeout);
    bbec:	f7ff bcea 	b.w	b5c4 <z_impl_k_sleep>

0000bbf0 <update_mouse>:
void update_mouse(mouse_t* mouse) {
    bbf0:	b510      	push	{r4, lr}
    bbf2:	4604      	mov	r4, r0
    mouse->wheel_data = fetch_wheel_data();
    bbf4:	f7f5 ff0a 	bl	1a0c <fetch_wheel_data>
    bbf8:	8020      	strh	r0, [r4, #0]
    mouse->motion_info = read_motion();
    bbfa:	f7ff ffe5 	bl	bbc8 <read_motion>
    bbfe:	8060      	strh	r0, [r4, #2]
    bc00:	f3c0 400f 	ubfx	r0, r0, #16, #16
    bc04:	80a0      	strh	r0, [r4, #4]
    fetch_buttons(mouse->button_states);
    bc06:	1da0      	adds	r0, r4, #6
}
    bc08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fetch_buttons(mouse->button_states);
    bc0c:	f7f4 be72 	b.w	8f4 <fetch_buttons>

0000bc10 <k_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    bc10:	f001 be3b 	b.w	d88a <z_impl_k_busy_wait>

0000bc14 <z_log_msg_static_create.constprop.0>:
    bc14:	2300      	movs	r3, #0
    bc16:	f7f7 ba33 	b.w	3080 <z_impl_z_log_msg_static_create>

0000bc1a <z_log_msg_static_create.constprop.0>:
    bc1a:	2300      	movs	r3, #0
    bc1c:	f7f7 ba30 	b.w	3080 <z_impl_z_log_msg_static_create>

0000bc20 <cbpprintf_external>:
{
    bc20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    bc24:	4606      	mov	r6, r0
    bc26:	460d      	mov	r5, r1
    bc28:	4617      	mov	r7, r2
	if (buf == NULL) {
    bc2a:	4698      	mov	r8, r3
    bc2c:	b32b      	cbz	r3, bc7a <cbpprintf_external+0x5a>
	args_size = hdr->hdr.desc.len * sizeof(int);
    bc2e:	f898 4000 	ldrb.w	r4, [r8]
	s_nbr     = hdr->hdr.desc.str_cnt;
    bc32:	f893 9001 	ldrb.w	r9, [r3, #1]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    bc36:	78db      	ldrb	r3, [r3, #3]
	args_size = hdr->hdr.desc.len * sizeof(int);
    bc38:	00a4      	lsls	r4, r4, #2
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    bc3a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	ros_nbr   = hdr->hdr.desc.ro_str_cnt;
    bc3e:	f898 3002 	ldrb.w	r3, [r8, #2]
	s = (char *)(buf + args_size + ros_nbr + 2 * rws_nbr);
    bc42:	441c      	add	r4, r3
    bc44:	4444      	add	r4, r8
	for (i = 0; i < s_nbr; i++) {
    bc46:	f04f 0a00 	mov.w	sl, #0
    bc4a:	45ca      	cmp	sl, r9
    bc4c:	d309      	bcc.n	bc62 <cbpprintf_external+0x42>
	return formatter(out, ctx, fmt, u.ap);
    bc4e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    bc52:	f108 0308 	add.w	r3, r8, #8
    bc56:	4639      	mov	r1, r7
    bc58:	4630      	mov	r0, r6
    bc5a:	46ac      	mov	ip, r5
}
    bc5c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    bc60:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    bc62:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    bc66:	f848 4023 	str.w	r4, [r8, r3, lsl #2]
		s += strlen(s) + 1;
    bc6a:	4620      	mov	r0, r4
    bc6c:	f000 ff32 	bl	cad4 <strlen>
    bc70:	3001      	adds	r0, #1
    bc72:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    bc74:	f10a 0a01 	add.w	sl, sl, #1
    bc78:	e7e7      	b.n	bc4a <cbpprintf_external+0x2a>
}
    bc7a:	f06f 0015 	mvn.w	r0, #21
    bc7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000bc82 <is_ptr>:
{
    bc82:	b570      	push	{r4, r5, r6, lr}
	int cnt = 0;
    bc84:	2500      	movs	r5, #0
{
    bc86:	4602      	mov	r2, r0
	bool mod = false;
    bc88:	4628      	mov	r0, r5
	while ((c = *fmt++) != '\0') {
    bc8a:	4614      	mov	r4, r2
    bc8c:	f814 3b01 	ldrb.w	r3, [r4], #1
    bc90:	b90b      	cbnz	r3, bc96 <is_ptr+0x14>
					return false;
    bc92:	4618      	mov	r0, r3
    bc94:	e009      	b.n	bcaa <is_ptr+0x28>
		if (mod) {
    bc96:	b198      	cbz	r0, bcc0 <is_ptr+0x3e>
			if (cnt == n) {
    bc98:	428d      	cmp	r5, r1
    bc9a:	d107      	bne.n	bcac <is_ptr+0x2a>
				if (c == 'p') {
    bc9c:	2b70      	cmp	r3, #112	; 0x70
    bc9e:	d004      	beq.n	bcaa <is_ptr+0x28>
				} else if (is_fmt_spec(c)) {
    bca0:	f1a3 0240 	sub.w	r2, r3, #64	; 0x40
    bca4:	2a3a      	cmp	r2, #58	; 0x3a
    bca6:	d80b      	bhi.n	bcc0 <is_ptr+0x3e>
					return false;
    bca8:	2000      	movs	r0, #0
}
    bcaa:	bd70      	pop	{r4, r5, r6, pc}
			} else if (is_fmt_spec(c)) {
    bcac:	f1a3 0640 	sub.w	r6, r3, #64	; 0x40
    bcb0:	2e3a      	cmp	r6, #58	; 0x3a
    bcb2:	d805      	bhi.n	bcc0 <is_ptr+0x3e>
	while ((c = *fmt++) != '\0') {
    bcb4:	7853      	ldrb	r3, [r2, #1]
				cnt++;
    bcb6:	3501      	adds	r5, #1
	while ((c = *fmt++) != '\0') {
    bcb8:	1c94      	adds	r4, r2, #2
    bcba:	2b00      	cmp	r3, #0
    bcbc:	d0e9      	beq.n	bc92 <is_ptr+0x10>
    bcbe:	2000      	movs	r0, #0
		if (c == '%') {
    bcc0:	2b25      	cmp	r3, #37	; 0x25
			mod = !mod;
    bcc2:	bf08      	it	eq
    bcc4:	f080 0001 	eoreq.w	r0, r0, #1
	while ((c = *fmt++) != '\0') {
    bcc8:	4622      	mov	r2, r4
    bcca:	e7de      	b.n	bc8a <is_ptr+0x8>

0000bccc <arch_printk_char_out>:
}
    bccc:	2000      	movs	r0, #0
    bcce:	4770      	bx	lr

0000bcd0 <str_out>:
{
    bcd0:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    bcd2:	688a      	ldr	r2, [r1, #8]
    bcd4:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    bcd6:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    bcd8:	b114      	cbz	r4, bce0 <str_out+0x10>
    bcda:	684b      	ldr	r3, [r1, #4]
    bcdc:	4293      	cmp	r3, r2
    bcde:	dc01      	bgt.n	bce4 <str_out+0x14>
		ctx->count++;
    bce0:	608d      	str	r5, [r1, #8]
}
    bce2:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    bce4:	3b01      	subs	r3, #1
    bce6:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    bce8:	bf08      	it	eq
    bcea:	2200      	moveq	r2, #0
    bcec:	608d      	str	r5, [r1, #8]
    bcee:	bf0c      	ite	eq
    bcf0:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    bcf2:	54a0      	strbne	r0, [r4, r2]
    bcf4:	e7f5      	b.n	bce2 <str_out+0x12>

0000bcf6 <printk>:
{
    bcf6:	b40f      	push	{r0, r1, r2, r3}
    bcf8:	b507      	push	{r0, r1, r2, lr}
    bcfa:	a904      	add	r1, sp, #16
    bcfc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    bd00:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    bd02:	f000 fde9 	bl	c8d8 <z_log_vprintk>
}
    bd06:	b003      	add	sp, #12
    bd08:	f85d eb04 	ldr.w	lr, [sp], #4
    bd0c:	b004      	add	sp, #16
    bd0e:	4770      	bx	lr

0000bd10 <snprintk>:
{
    bd10:	b40c      	push	{r2, r3}
    bd12:	b507      	push	{r0, r1, r2, lr}
    bd14:	ab04      	add	r3, sp, #16
    bd16:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    bd1a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    bd1c:	f7f6 fa42 	bl	21a4 <vsnprintk>
}
    bd20:	b003      	add	sp, #12
    bd22:	f85d eb04 	ldr.w	lr, [sp], #4
    bd26:	b002      	add	sp, #8
    bd28:	4770      	bx	lr

0000bd2a <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    bd2a:	4604      	mov	r4, r0
    bd2c:	b508      	push	{r3, lr}
    bd2e:	4608      	mov	r0, r1
    bd30:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    bd32:	461a      	mov	r2, r3
    bd34:	47a0      	blx	r4
	return z_impl_z_current_get();
    bd36:	f7ff fc79 	bl	b62c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    bd3a:	f7f9 fa5b 	bl	51f4 <z_impl_k_thread_abort>

0000bd3e <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    bd3e:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    bd42:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    bd44:	0840      	lsrs	r0, r0, #1
    bd46:	4770      	bx	lr

0000bd48 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    bd48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd4a:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    bd4c:	f7ff fff7 	bl	bd3e <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    bd50:	fab0 f080 	clz	r0, r0
    bd54:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    bd58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    bd5c:	00ca      	lsls	r2, r1, #3
    bd5e:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    bd62:	1d17      	adds	r7, r2, #4
{
    bd64:	460c      	mov	r4, r1
    bd66:	3206      	adds	r2, #6
    bd68:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    bd6a:	b956      	cbnz	r6, bd82 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    bd6c:	2101      	movs	r1, #1
    bd6e:	fa01 f000 	lsl.w	r0, r1, r0
    bd72:	68d9      	ldr	r1, [r3, #12]
    bd74:	4301      	orrs	r1, r0
    bd76:	60d9      	str	r1, [r3, #12]
		b->next = c;
    bd78:	f8cc 4010 	str.w	r4, [ip, #16]
    bd7c:	53dd      	strh	r5, [r3, r7]
    bd7e:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    bd80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    bd82:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    bd84:	3104      	adds	r1, #4
    bd86:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    bd88:	53d8      	strh	r0, [r3, r7]
    bd8a:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    bd8e:	529e      	strh	r6, [r3, r2]
    bd90:	80c5      	strh	r5, [r0, #6]
    bd92:	525d      	strh	r5, [r3, r1]
    bd94:	e7f4      	b.n	bd80 <free_list_add+0x38>

0000bd96 <free_list_remove_bidx>:
{
    bd96:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    bd98:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    bd9c:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    bd9e:	4299      	cmp	r1, r3
    bda0:	f102 0104 	add.w	r1, r2, #4
    bda4:	d10a      	bne.n	bdbc <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    bda6:	2301      	movs	r3, #1
    bda8:	fa03 f202 	lsl.w	r2, r3, r2
    bdac:	68c3      	ldr	r3, [r0, #12]
    bdae:	ea23 0302 	bic.w	r3, r3, r2
    bdb2:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    bdb4:	2300      	movs	r3, #0
    bdb6:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    bdba:	bd10      	pop	{r4, pc}
    bdbc:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    bdbe:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    bdc2:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    bdc6:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    bdca:	80cb      	strh	r3, [r1, #6]
    bdcc:	8082      	strh	r2, [r0, #4]
}
    bdce:	e7f4      	b.n	bdba <free_list_remove_bidx+0x24>

0000bdd0 <free_list_remove>:
{
    bdd0:	b508      	push	{r3, lr}
    bdd2:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    bdd4:	f7ff ffb3 	bl	bd3e <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    bdd8:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    bddc:	f1c2 021f 	rsb	r2, r2, #31
    bde0:	4618      	mov	r0, r3
}
    bde2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    bde6:	f7ff bfd6 	b.w	bd96 <free_list_remove_bidx>

0000bdea <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    bdea:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bdee:	fab1 f581 	clz	r5, r1
    bdf2:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    bdf6:	eb00 0889 	add.w	r8, r0, r9, lsl #2
{
    bdfa:	4603      	mov	r3, r0
	if (b->next) {
    bdfc:	f8d8 2010 	ldr.w	r2, [r8, #16]
{
    be00:	460e      	mov	r6, r1
	if (b->next) {
    be02:	b1c2      	cbz	r2, be36 <alloc_chunk+0x4c>
    be04:	2703      	movs	r7, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    be06:	f8d8 4010 	ldr.w	r4, [r8, #16]
			if (chunk_size(h, c) >= sz) {
    be0a:	4618      	mov	r0, r3
    be0c:	4621      	mov	r1, r4
    be0e:	f7ff ff96 	bl	bd3e <chunk_size>
    be12:	42b0      	cmp	r0, r6
    be14:	d306      	bcc.n	be24 <alloc_chunk+0x3a>
				free_list_remove_bidx(h, c, bi);
    be16:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    be18:	4618      	mov	r0, r3
    be1a:	f7ff ffbc 	bl	bd96 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    be1e:	4620      	mov	r0, r4
    be20:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    be24:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
		} while (--i && b->next != first);
    be28:	3f01      	subs	r7, #1
    be2a:	88e0      	ldrh	r0, [r4, #6]
			b->next = next_free_chunk(h, c);
    be2c:	f8c8 0010 	str.w	r0, [r8, #16]
		} while (--i && b->next != first);
    be30:	d001      	beq.n	be36 <alloc_chunk+0x4c>
    be32:	4282      	cmp	r2, r0
    be34:	d1e7      	bne.n	be06 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    be36:	f1c5 0220 	rsb	r2, r5, #32
    be3a:	f04f 34ff 	mov.w	r4, #4294967295
    be3e:	4094      	lsls	r4, r2
    be40:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    be42:	4014      	ands	r4, r2
    be44:	d0eb      	beq.n	be1e <alloc_chunk+0x34>
		int minbucket = __builtin_ctz(bmask);
    be46:	fa94 f2a4 	rbit	r2, r4
    be4a:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    be4e:	1d11      	adds	r1, r2, #4
    be50:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    be54:	4621      	mov	r1, r4
    be56:	e7df      	b.n	be18 <alloc_chunk+0x2e>

0000be58 <merge_chunks>:
{
    be58:	b538      	push	{r3, r4, r5, lr}
    be5a:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    be5c:	f7ff ff6f 	bl	bd3e <chunk_size>
{
    be60:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    be62:	4604      	mov	r4, r0
    be64:	4611      	mov	r1, r2
    be66:	4618      	mov	r0, r3
    be68:	f7ff ff69 	bl	bd3e <chunk_size>
		((uint16_t *)cmem)[f] = val;
    be6c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    be70:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    be72:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    be74:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    be76:	4618      	mov	r0, r3
    be78:	f7ff ff61 	bl	bd3e <chunk_size>
	void *cmem = &buf[c];
    be7c:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    be7e:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    be82:	bd38      	pop	{r3, r4, r5, pc}

0000be84 <split_chunks>:
{
    be84:	b538      	push	{r3, r4, r5, lr}
    be86:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    be88:	f7ff ff59 	bl	bd3e <chunk_size>
{
    be8c:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    be8e:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    be90:	1a51      	subs	r1, r2, r1
    be92:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    be96:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    be98:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    be9a:	8060      	strh	r0, [r4, #2]
    be9c:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    bea0:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    bea2:	8044      	strh	r4, [r0, #2]
    bea4:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    bea8:	4618      	mov	r0, r3
    beaa:	4611      	mov	r1, r2
    beac:	f7ff ff47 	bl	bd3e <chunk_size>
	void *cmem = &buf[c];
    beb0:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    beb2:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    beb6:	bd38      	pop	{r3, r4, r5, pc}

0000beb8 <free_chunk>:
{
    beb8:	b538      	push	{r3, r4, r5, lr}
    beba:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    bebc:	f7ff ff3f 	bl	bd3e <chunk_size>
    bec0:	460c      	mov	r4, r1
    bec2:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    bec4:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    bec8:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    beca:	07da      	lsls	r2, r3, #31
    becc:	d40a      	bmi.n	bee4 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    bece:	4628      	mov	r0, r5
    bed0:	f7ff ff7e 	bl	bdd0 <free_list_remove>
	return c + chunk_size(h, c);
    bed4:	4621      	mov	r1, r4
    bed6:	4628      	mov	r0, r5
    bed8:	f7ff ff31 	bl	bd3e <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    bedc:	1822      	adds	r2, r4, r0
    bede:	4628      	mov	r0, r5
    bee0:	f7ff ffba 	bl	be58 <merge_chunks>
		return ((uint16_t *)cmem)[f];
    bee4:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    bee8:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    beea:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    beee:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    bef0:	07db      	lsls	r3, r3, #31
    bef2:	d40c      	bmi.n	bf0e <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    bef4:	4628      	mov	r0, r5
    bef6:	f7ff ff6b 	bl	bdd0 <free_list_remove>
		return ((uint16_t *)cmem)[f];
    befa:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    befe:	4622      	mov	r2, r4
    bf00:	1a61      	subs	r1, r4, r1
    bf02:	4628      	mov	r0, r5
    bf04:	f7ff ffa8 	bl	be58 <merge_chunks>
    bf08:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    bf0c:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    bf0e:	4621      	mov	r1, r4
    bf10:	4628      	mov	r0, r5
}
    bf12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    bf16:	f7ff bf17 	b.w	bd48 <free_list_add>

0000bf1a <sys_heap_free>:
	if (mem == NULL) {
    bf1a:	b161      	cbz	r1, bf36 <sys_heap_free+0x1c>
    bf1c:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    bf1e:	3904      	subs	r1, #4
    bf20:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    bf22:	f021 0307 	bic.w	r3, r1, #7
    bf26:	4403      	add	r3, r0
	free_chunk(h, c);
    bf28:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    bf2a:	885a      	ldrh	r2, [r3, #2]
    bf2c:	f022 0201 	bic.w	r2, r2, #1
    bf30:	805a      	strh	r2, [r3, #2]
    bf32:	f7ff bfc1 	b.w	beb8 <free_chunk>
}
    bf36:	4770      	bx	lr

0000bf38 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    bf38:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    bf3a:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    bf3c:	b909      	cbnz	r1, bf42 <sys_heap_alloc+0xa>
		return NULL;
    bf3e:	2000      	movs	r0, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    bf40:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    bf42:	68ab      	ldr	r3, [r5, #8]
    bf44:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    bf48:	d9f9      	bls.n	bf3e <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    bf4a:	310b      	adds	r1, #11
    bf4c:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    bf4e:	4621      	mov	r1, r4
    bf50:	4628      	mov	r0, r5
    bf52:	f7ff ff4a 	bl	bdea <alloc_chunk>
	if (c == 0U) {
    bf56:	4606      	mov	r6, r0
    bf58:	2800      	cmp	r0, #0
    bf5a:	d0f0      	beq.n	bf3e <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    bf5c:	4601      	mov	r1, r0
    bf5e:	4628      	mov	r0, r5
    bf60:	f7ff feed 	bl	bd3e <chunk_size>
    bf64:	42a0      	cmp	r0, r4
    bf66:	d907      	bls.n	bf78 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    bf68:	1932      	adds	r2, r6, r4
    bf6a:	4628      	mov	r0, r5
    bf6c:	f7ff ff8a 	bl	be84 <split_chunks>
		free_list_add(h, c + chunk_sz);
    bf70:	4611      	mov	r1, r2
    bf72:	4628      	mov	r0, r5
    bf74:	f7ff fee8 	bl	bd48 <free_list_add>
	void *cmem = &buf[c];
    bf78:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    bf7c:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    bf7e:	8853      	ldrh	r3, [r2, #2]
    bf80:	f043 0301 	orr.w	r3, r3, #1
    bf84:	8053      	strh	r3, [r2, #2]
    bf86:	3004      	adds	r0, #4
	return mem;
    bf88:	e7da      	b.n	bf40 <sys_heap_alloc+0x8>

0000bf8a <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    bf8a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    bf8e:	f101 39ff 	add.w	r9, r1, #4294967295
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
	if (align != rew) {
    bf92:	ea19 0901 	ands.w	r9, r9, r1
	struct z_heap *h = heap->heap;
    bf96:	6806      	ldr	r6, [r0, #0]
{
    bf98:	460f      	mov	r7, r1
    bf9a:	4614      	mov	r4, r2
	if (align != rew) {
    bf9c:	d00c      	beq.n	bfb8 <sys_heap_aligned_alloc+0x2e>
	rew = align & -align;
    bf9e:	424b      	negs	r3, r1
    bfa0:	400b      	ands	r3, r1
		align -= rew;
		gap = MIN(rew, chunk_header_bytes(h));
    bfa2:	2b04      	cmp	r3, #4
    bfa4:	461a      	mov	r2, r3
    bfa6:	464f      	mov	r7, r9
    bfa8:	bf28      	it	cs
    bfaa:	2204      	movcs	r2, #4
	rew = align & -align;
    bfac:	4699      	mov	r9, r3
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    bfae:	b964      	cbnz	r4, bfca <sys_heap_aligned_alloc+0x40>
		return NULL;
    bfb0:	2500      	movs	r5, #0
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	IF_ENABLED(CONFIG_MSAN, (__msan_allocated_memory(mem, bytes)));
	return mem;
}
    bfb2:	4628      	mov	r0, r5
    bfb4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    bfb8:	2904      	cmp	r1, #4
    bfba:	d804      	bhi.n	bfc6 <sys_heap_aligned_alloc+0x3c>
}
    bfbc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    bfc0:	4611      	mov	r1, r2
    bfc2:	f7ff bfb9 	b.w	bf38 <sys_heap_alloc>
		gap = chunk_header_bytes(h);
    bfc6:	2204      	movs	r2, #4
    bfc8:	e7f1      	b.n	bfae <sys_heap_aligned_alloc+0x24>
	if (bytes == 0 || size_too_big(h, bytes)) {
    bfca:	68b3      	ldr	r3, [r6, #8]
    bfcc:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    bfd0:	d9ee      	bls.n	bfb0 <sys_heap_aligned_alloc+0x26>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    bfd2:	f104 010b 	add.w	r1, r4, #11
    bfd6:	4439      	add	r1, r7
    bfd8:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    bfda:	08c9      	lsrs	r1, r1, #3
    bfdc:	4630      	mov	r0, r6
    bfde:	f7ff ff04 	bl	bdea <alloc_chunk>
	if (c0 == 0) {
    bfe2:	4680      	mov	r8, r0
    bfe4:	2800      	cmp	r0, #0
    bfe6:	d0e3      	beq.n	bfb0 <sys_heap_aligned_alloc+0x26>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    bfe8:	f109 0504 	add.w	r5, r9, #4
    bfec:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    bff0:	1e7b      	subs	r3, r7, #1
    bff2:	4435      	add	r5, r6
    bff4:	441d      	add	r5, r3
    bff6:	427f      	negs	r7, r7
    bff8:	403d      	ands	r5, r7
    bffa:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    bffe:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c000:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    c002:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c004:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    c006:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    c00a:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    c00c:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    c010:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    c014:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    c018:	d208      	bcs.n	c02c <sys_heap_aligned_alloc+0xa2>
		split_chunks(h, c0, c);
    c01a:	4601      	mov	r1, r0
    c01c:	463a      	mov	r2, r7
    c01e:	4630      	mov	r0, r6
    c020:	f7ff ff30 	bl	be84 <split_chunks>
		free_list_add(h, c0);
    c024:	4641      	mov	r1, r8
    c026:	4630      	mov	r0, r6
    c028:	f7ff fe8e 	bl	bd48 <free_list_add>
	return c + chunk_size(h, c);
    c02c:	4639      	mov	r1, r7
    c02e:	4630      	mov	r0, r6
    c030:	f7ff fe85 	bl	bd3e <chunk_size>
    c034:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    c036:	4284      	cmp	r4, r0
    c038:	d207      	bcs.n	c04a <sys_heap_aligned_alloc+0xc0>
		split_chunks(h, c, c_end);
    c03a:	4630      	mov	r0, r6
    c03c:	4622      	mov	r2, r4
    c03e:	f7ff ff21 	bl	be84 <split_chunks>
		free_list_add(h, c_end);
    c042:	4621      	mov	r1, r4
    c044:	4630      	mov	r0, r6
    c046:	f7ff fe7f 	bl	bd48 <free_list_add>
	void *cmem = &buf[c];
    c04a:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c04e:	8873      	ldrh	r3, [r6, #2]
    c050:	f043 0301 	orr.w	r3, r3, #1
    c054:	8073      	strh	r3, [r6, #2]
    c056:	e7ac      	b.n	bfb2 <sys_heap_aligned_alloc+0x28>

0000c058 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    c058:	3a04      	subs	r2, #4
{
    c05a:	b4f0      	push	{r4, r5, r6, r7}
    c05c:	4604      	mov	r4, r0

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    c05e:	1dc8      	adds	r0, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    c060:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    c062:	f020 0007 	bic.w	r0, r0, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    c066:	f021 0107 	bic.w	r1, r1, #7
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    c06a:	1a0e      	subs	r6, r1, r0
    c06c:	08f3      	lsrs	r3, r6, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    c06e:	6020      	str	r0, [r4, #0]
	return 31 - __builtin_clz(usable_sz);
    c070:	fab3 f283 	clz	r2, r3
	h->end_chunk = heap_sz;
	h->avail_buckets = 0;
    c074:	4604      	mov	r4, r0
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    c076:	f1c2 0524 	rsb	r5, r2, #36	; 0x24
	h->avail_buckets = 0;
    c07a:	2700      	movs	r7, #0
	h->end_chunk = heap_sz;
    c07c:	6083      	str	r3, [r0, #8]
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    c07e:	00ad      	lsls	r5, r5, #2
	h->avail_buckets = 0;
    c080:	f844 7f0c 	str.w	r7, [r4, #12]!
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    c084:	3507      	adds	r5, #7
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    c086:	f1c2 0220 	rsb	r2, r2, #32
    c08a:	08e9      	lsrs	r1, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    c08c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
		h->buckets[i].next = 0;
    c090:	f844 7f04 	str.w	r7, [r4, #4]!
	for (int i = 0; i < nb_buckets; i++) {
    c094:	4294      	cmp	r4, r2
    c096:	d1fb      	bne.n	c090 <sys_heap_init+0x38>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c098:	004a      	lsls	r2, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c09a:	f042 0201 	orr.w	r2, r2, #1
    c09e:	8042      	strh	r2, [r0, #2]
		((uint16_t *)cmem)[f] = val;
    c0a0:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    c0a4:	1a5a      	subs	r2, r3, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    c0a6:	0055      	lsls	r5, r2, #1
		((uint16_t *)cmem)[f] = val;
    c0a8:	8007      	strh	r7, [r0, #0]
    c0aa:	8065      	strh	r5, [r4, #2]
    c0ac:	1984      	adds	r4, r0, r6
    c0ae:	f820 1031 	strh.w	r1, [r0, r1, lsl #3]
	void *cmem = &buf[c];
    c0b2:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
		((uint16_t *)cmem)[f] = val;
    c0b6:	8067      	strh	r7, [r4, #2]
    c0b8:	5382      	strh	r2, [r0, r6]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    c0ba:	885a      	ldrh	r2, [r3, #2]
    c0bc:	f042 0201 	orr.w	r2, r2, #1
    c0c0:	805a      	strh	r2, [r3, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    c0c2:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    c0c4:	f7ff be40 	b.w	bd48 <free_list_add>

0000c0c8 <sys_slist_find_and_remove>:
	return list->head;
    c0c8:	6803      	ldr	r3, [r0, #0]
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    c0ca:	2200      	movs	r2, #0
    c0cc:	b90b      	cbnz	r3, c0d2 <sys_slist_find_and_remove+0xa>
    c0ce:	4618      	mov	r0, r3
    c0d0:	4770      	bx	lr
    c0d2:	428b      	cmp	r3, r1
    c0d4:	d110      	bne.n	c0f8 <sys_slist_find_and_remove+0x30>
	return node->next;
    c0d6:	680b      	ldr	r3, [r1, #0]
Z_GENLIST_REMOVE(slist, snode)
    c0d8:	b942      	cbnz	r2, c0ec <sys_slist_find_and_remove+0x24>
    c0da:	6842      	ldr	r2, [r0, #4]
	list->head = node;
    c0dc:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
    c0de:	4291      	cmp	r1, r2
    c0e0:	d100      	bne.n	c0e4 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    c0e2:	6043      	str	r3, [r0, #4]
	parent->next = child;
    c0e4:	2300      	movs	r3, #0
    c0e6:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    c0e8:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
    c0ea:	4770      	bx	lr
	parent->next = child;
    c0ec:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    c0ee:	6843      	ldr	r3, [r0, #4]
    c0f0:	4299      	cmp	r1, r3
	list->tail = node;
    c0f2:	bf08      	it	eq
    c0f4:	6042      	streq	r2, [r0, #4]
}
    c0f6:	e7f5      	b.n	c0e4 <sys_slist_find_and_remove+0x1c>
	return node->next;
    c0f8:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    c0fa:	681b      	ldr	r3, [r3, #0]
    c0fc:	e7e6      	b.n	c0cc <sys_slist_find_and_remove+0x4>

0000c0fe <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c0fe:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    c100:	f013 0307 	ands.w	r3, r3, #7
    c104:	d105      	bne.n	c112 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    c106:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    c108:	2b00      	cmp	r3, #0
    c10a:	bf0c      	ite	eq
    c10c:	2000      	moveq	r0, #0
    c10e:	2003      	movne	r0, #3
    c110:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    c112:	2b02      	cmp	r3, #2
    c114:	d105      	bne.n	c122 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    c116:	8b40      	ldrh	r0, [r0, #26]
    c118:	fab0 f080 	clz	r0, r0
    c11c:	0940      	lsrs	r0, r0, #5
    c11e:	0080      	lsls	r0, r0, #2
    c120:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    c122:	2b01      	cmp	r3, #1
    c124:	d105      	bne.n	c132 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    c126:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    c128:	2b00      	cmp	r3, #0
    c12a:	bf0c      	ite	eq
    c12c:	2000      	moveq	r0, #0
    c12e:	2005      	movne	r0, #5
    c130:	4770      	bx	lr
	int evt = EVT_NOP;
    c132:	2000      	movs	r0, #0
}
    c134:	4770      	bx	lr

0000c136 <validate_args>:
{
    c136:	b510      	push	{r4, lr}
    c138:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    c13a:	b100      	cbz	r0, c13e <validate_args+0x8>
    c13c:	b911      	cbnz	r1, c144 <validate_args+0xe>
		return -EINVAL;
    c13e:	f06f 0015 	mvn.w	r0, #21
}
    c142:	bd10      	pop	{r4, pc}
	int rv = sys_notify_validate(&cli->notify);
    c144:	1d08      	adds	r0, r1, #4
    c146:	f000 f8d6 	bl	c2f6 <sys_notify_validate>
	if ((rv == 0)
    c14a:	2800      	cmp	r0, #0
    c14c:	d1f9      	bne.n	c142 <validate_args+0xc>
	    && ((cli->notify.flags
    c14e:	68a3      	ldr	r3, [r4, #8]
    c150:	2b03      	cmp	r3, #3
    c152:	d9f6      	bls.n	c142 <validate_args+0xc>
    c154:	e7f3      	b.n	c13e <validate_args+0x8>

0000c156 <notify_one>:
{
    c156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c15a:	460d      	mov	r5, r1
    c15c:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    c15e:	4619      	mov	r1, r3
    c160:	1d28      	adds	r0, r5, #4
{
    c162:	4690      	mov	r8, r2
    c164:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    c166:	f000 f8d7 	bl	c318 <sys_notify_finalize>
	if (cb) {
    c16a:	4604      	mov	r4, r0
    c16c:	b138      	cbz	r0, c17e <notify_one+0x28>
		cb(mgr, cli, state, res);
    c16e:	4633      	mov	r3, r6
    c170:	4642      	mov	r2, r8
    c172:	4629      	mov	r1, r5
    c174:	4638      	mov	r0, r7
    c176:	46a4      	mov	ip, r4
}
    c178:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    c17c:	4760      	bx	ip
}
    c17e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c182 <transition_complete>:
{
    c182:	b410      	push	{r4}
	__asm__ volatile(
    c184:	f04f 0440 	mov.w	r4, #64	; 0x40
    c188:	f3ef 8211 	mrs	r2, BASEPRI
    c18c:	f384 8812 	msr	BASEPRI_MAX, r4
    c190:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    c194:	6141      	str	r1, [r0, #20]
}
    c196:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    c198:	2101      	movs	r1, #1
    c19a:	f7f6 b819 	b.w	21d0 <process_event>

0000c19e <onoff_manager_init>:
{
    c19e:	b538      	push	{r3, r4, r5, lr}
    c1a0:	460c      	mov	r4, r1
	if ((mgr == NULL)
    c1a2:	4605      	mov	r5, r0
    c1a4:	b158      	cbz	r0, c1be <onoff_manager_init+0x20>
	    || (transitions == NULL)
    c1a6:	b151      	cbz	r1, c1be <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    c1a8:	680b      	ldr	r3, [r1, #0]
    c1aa:	b143      	cbz	r3, c1be <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    c1ac:	684b      	ldr	r3, [r1, #4]
    c1ae:	b133      	cbz	r3, c1be <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    c1b0:	221c      	movs	r2, #28
    c1b2:	2100      	movs	r1, #0
    c1b4:	f000 fcb5 	bl	cb22 <memset>
    c1b8:	612c      	str	r4, [r5, #16]
	return 0;
    c1ba:	2000      	movs	r0, #0
}
    c1bc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    c1be:	f06f 0015 	mvn.w	r0, #21
    c1c2:	e7fb      	b.n	c1bc <onoff_manager_init+0x1e>

0000c1c4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    c1c4:	b570      	push	{r4, r5, r6, lr}
    c1c6:	4605      	mov	r5, r0
    c1c8:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    c1ca:	f7ff ffb4 	bl	c136 <validate_args>

	if (rv < 0) {
    c1ce:	1e04      	subs	r4, r0, #0
    c1d0:	db15      	blt.n	c1fe <onoff_request+0x3a>
    c1d2:	f04f 0340 	mov.w	r3, #64	; 0x40
    c1d6:	f3ef 8211 	mrs	r2, BASEPRI
    c1da:	f383 8812 	msr	BASEPRI_MAX, r3
    c1de:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    c1e2:	8b6b      	ldrh	r3, [r5, #26]
    c1e4:	8b2c      	ldrh	r4, [r5, #24]
    c1e6:	f64f 71ff 	movw	r1, #65535	; 0xffff
    c1ea:	428b      	cmp	r3, r1
    c1ec:	f004 0407 	and.w	r4, r4, #7
    c1f0:	d107      	bne.n	c202 <onoff_request+0x3e>
	__asm__ volatile(
    c1f2:	f382 8811 	msr	BASEPRI, r2
    c1f6:	f3bf 8f6f 	isb	sy
		rv = -EAGAIN;
    c1fa:	f06f 040a 	mvn.w	r4, #10
			notify_one(mgr, cli, state, 0);
		}
	}

	return rv;
}
    c1fe:	4620      	mov	r0, r4
    c200:	bd70      	pop	{r4, r5, r6, pc}
	if (state == ONOFF_STATE_ON) {
    c202:	2c02      	cmp	r4, #2
    c204:	d10c      	bne.n	c220 <onoff_request+0x5c>
		mgr->refs += 1U;
    c206:	3301      	adds	r3, #1
    c208:	836b      	strh	r3, [r5, #26]
    c20a:	f382 8811 	msr	BASEPRI, r2
    c20e:	f3bf 8f6f 	isb	sy
			notify_one(mgr, cli, state, 0);
    c212:	2300      	movs	r3, #0
    c214:	4622      	mov	r2, r4
    c216:	4631      	mov	r1, r6
    c218:	4628      	mov	r0, r5
    c21a:	f7ff ff9c 	bl	c156 <notify_one>
    c21e:	e7ee      	b.n	c1fe <onoff_request+0x3a>
	} else if ((state == ONOFF_STATE_OFF)
    c220:	2c06      	cmp	r4, #6
    c222:	d814      	bhi.n	c24e <onoff_request+0x8a>
    c224:	e8df f004 	tbb	[pc, r4]
    c228:	13131304 	.word	0x13131304
    c22c:	1a04      	.short	0x1a04
    c22e:	04          	.byte	0x04
    c22f:	00          	.byte	0x00
	parent->next = child;
    c230:	2300      	movs	r3, #0
    c232:	6033      	str	r3, [r6, #0]
	return list->tail;
    c234:	686b      	ldr	r3, [r5, #4]
Z_GENLIST_APPEND(slist, snode)
    c236:	b93b      	cbnz	r3, c248 <onoff_request+0x84>
	list->head = node;
    c238:	e9c5 6600 	strd	r6, r6, [r5]
	if (start) {
    c23c:	b9ac      	cbnz	r4, c26a <onoff_request+0xa6>
		process_event(mgr, EVT_RECHECK, key);
    c23e:	2102      	movs	r1, #2
    c240:	4628      	mov	r0, r5
    c242:	f7f5 ffc5 	bl	21d0 <process_event>
    c246:	e7da      	b.n	c1fe <onoff_request+0x3a>
	parent->next = child;
    c248:	601e      	str	r6, [r3, #0]
	list->tail = node;
    c24a:	606e      	str	r6, [r5, #4]
}
    c24c:	e7f6      	b.n	c23c <onoff_request+0x78>
    c24e:	f382 8811 	msr	BASEPRI, r2
    c252:	f3bf 8f6f 	isb	sy
		rv = -EIO;
    c256:	f06f 0404 	mvn.w	r4, #4
    c25a:	e7d0      	b.n	c1fe <onoff_request+0x3a>
    c25c:	f382 8811 	msr	BASEPRI, r2
    c260:	f3bf 8f6f 	isb	sy
    c264:	f06f 0485 	mvn.w	r4, #133	; 0x85
    c268:	e7c9      	b.n	c1fe <onoff_request+0x3a>
    c26a:	f382 8811 	msr	BASEPRI, r2
    c26e:	f3bf 8f6f 	isb	sy
		if (notify) {
    c272:	e7c4      	b.n	c1fe <onoff_request+0x3a>

0000c274 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    c274:	b510      	push	{r4, lr}
	__asm__ volatile(
    c276:	f04f 0340 	mov.w	r3, #64	; 0x40
    c27a:	f3ef 8211 	mrs	r2, BASEPRI
    c27e:	f383 8812 	msr	BASEPRI_MAX, r3
    c282:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c286:	8b04      	ldrh	r4, [r0, #24]
    c288:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    c28c:	2c02      	cmp	r4, #2
    c28e:	d00a      	beq.n	c2a6 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    c290:	2c01      	cmp	r4, #1
    c292:	bf0c      	ite	eq
    c294:	f06f 0004 	mvneq.w	r0, #4
    c298:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    c29c:	f382 8811 	msr	BASEPRI, r2
    c2a0:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    c2a4:	e008      	b.n	c2b8 <onoff_release+0x44>
	mgr->refs -= 1U;
    c2a6:	8b43      	ldrh	r3, [r0, #26]
    c2a8:	3b01      	subs	r3, #1
    c2aa:	b29b      	uxth	r3, r3
    c2ac:	8343      	strh	r3, [r0, #26]
	if (stop) {
    c2ae:	b923      	cbnz	r3, c2ba <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    c2b0:	4621      	mov	r1, r4
    c2b2:	f7f5 ff8d 	bl	21d0 <process_event>
	int rv = state;
    c2b6:	4620      	mov	r0, r4
}
    c2b8:	bd10      	pop	{r4, pc}
	int rv = state;
    c2ba:	4620      	mov	r0, r4
    c2bc:	e7ee      	b.n	c29c <onoff_release+0x28>

0000c2be <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    c2be:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    c2c0:	b1b0      	cbz	r0, c2f0 <onoff_cancel+0x32>
    c2c2:	b1a9      	cbz	r1, c2f0 <onoff_cancel+0x32>
	__asm__ volatile(
    c2c4:	f04f 0240 	mov.w	r2, #64	; 0x40
    c2c8:	f3ef 8511 	mrs	r5, BASEPRI
    c2cc:	f382 8812 	msr	BASEPRI_MAX, r2
    c2d0:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    c2d4:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    c2d6:	f7ff fef7 	bl	c0c8 <sys_slist_find_and_remove>
    c2da:	b130      	cbz	r0, c2ea <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    c2dc:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    c2e0:	f385 8811 	msr	BASEPRI, r5
    c2e4:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    c2e8:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    c2ea:	f06f 0077 	mvn.w	r0, #119	; 0x77
    c2ee:	e7f7      	b.n	c2e0 <onoff_cancel+0x22>
		return -EINVAL;
    c2f0:	f06f 0015 	mvn.w	r0, #21
    c2f4:	e7f8      	b.n	c2e8 <onoff_cancel+0x2a>

0000c2f6 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    c2f6:	4603      	mov	r3, r0
    c2f8:	b158      	cbz	r0, c312 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    c2fa:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    c2fc:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    c300:	2a01      	cmp	r2, #1
    c302:	d003      	beq.n	c30c <sys_notify_validate+0x16>
    c304:	2a03      	cmp	r2, #3
    c306:	d104      	bne.n	c312 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    c308:	6802      	ldr	r2, [r0, #0]
    c30a:	b112      	cbz	r2, c312 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    c30c:	2000      	movs	r0, #0
    c30e:	6098      	str	r0, [r3, #8]
    c310:	4770      	bx	lr
    c312:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    c316:	4770      	bx	lr

0000c318 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    c318:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    c31a:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    c31c:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    c320:	2a03      	cmp	r2, #3
    c322:	f04f 0200 	mov.w	r2, #0
{
    c326:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    c328:	bf0c      	ite	eq
    c32a:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    c32c:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    c32e:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    c330:	4770      	bx	lr

0000c332 <encode_uint>:
{
    c332:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c336:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier) != 0;
    c338:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    c33a:	2b6f      	cmp	r3, #111	; 0x6f
{
    c33c:	4680      	mov	r8, r0
    c33e:	460f      	mov	r7, r1
    c340:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    c342:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    c346:	d029      	beq.n	c39c <encode_uint+0x6a>
    c348:	d824      	bhi.n	c394 <encode_uint+0x62>
		return 10;
    c34a:	2b58      	cmp	r3, #88	; 0x58
    c34c:	bf0c      	ite	eq
    c34e:	2610      	moveq	r6, #16
    c350:	260a      	movne	r6, #10
	char *bp = bps + (bpe - bps);
    c352:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    c356:	4632      	mov	r2, r6
    c358:	2300      	movs	r3, #0
    c35a:	4640      	mov	r0, r8
    c35c:	4639      	mov	r1, r7
    c35e:	f7f3 febf 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c362:	2a09      	cmp	r2, #9
    c364:	b2d4      	uxtb	r4, r2
    c366:	d81e      	bhi.n	c3a6 <encode_uint+0x74>
    c368:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    c36a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c36c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    c36e:	f177 0700 	sbcs.w	r7, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c372:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    c376:	d301      	bcc.n	c37c <encode_uint+0x4a>
    c378:	45d1      	cmp	r9, sl
    c37a:	d811      	bhi.n	c3a0 <encode_uint+0x6e>
	if (conv->flag_hash) {
    c37c:	782b      	ldrb	r3, [r5, #0]
    c37e:	069b      	lsls	r3, r3, #26
    c380:	d505      	bpl.n	c38e <encode_uint+0x5c>
		if (radix == 8) {
    c382:	2e08      	cmp	r6, #8
    c384:	d115      	bne.n	c3b2 <encode_uint+0x80>
			conv->altform_0 = true;
    c386:	78ab      	ldrb	r3, [r5, #2]
    c388:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    c38c:	70ab      	strb	r3, [r5, #2]
}
    c38e:	4648      	mov	r0, r9
    c390:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    c394:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 10;
    c398:	2b70      	cmp	r3, #112	; 0x70
    c39a:	e7d7      	b.n	c34c <encode_uint+0x1a>
	switch (specifier) {
    c39c:	2608      	movs	r6, #8
    c39e:	e7d8      	b.n	c352 <encode_uint+0x20>
		value /= radix;
    c3a0:	4680      	mov	r8, r0
    c3a2:	460f      	mov	r7, r1
    c3a4:	e7d7      	b.n	c356 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    c3a6:	f1bb 0f19 	cmp.w	fp, #25
    c3aa:	bf94      	ite	ls
    c3ac:	3437      	addls	r4, #55	; 0x37
    c3ae:	3457      	addhi	r4, #87	; 0x57
    c3b0:	e7db      	b.n	c36a <encode_uint+0x38>
		} else if (radix == 16) {
    c3b2:	2e10      	cmp	r6, #16
    c3b4:	d1eb      	bne.n	c38e <encode_uint+0x5c>
			conv->altform_0c = true;
    c3b6:	78ab      	ldrb	r3, [r5, #2]
    c3b8:	f043 0310 	orr.w	r3, r3, #16
    c3bc:	e7e6      	b.n	c38c <encode_uint+0x5a>

0000c3be <outs>:
{
    c3be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c3c2:	4607      	mov	r7, r0
    c3c4:	4688      	mov	r8, r1
    c3c6:	4615      	mov	r5, r2
    c3c8:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c3ca:	4614      	mov	r4, r2
    c3cc:	42b4      	cmp	r4, r6
    c3ce:	d305      	bcc.n	c3dc <outs+0x1e>
    c3d0:	b10e      	cbz	r6, c3d6 <outs+0x18>
	return (int)count;
    c3d2:	1b60      	subs	r0, r4, r5
    c3d4:	e008      	b.n	c3e8 <outs+0x2a>
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    c3d6:	7823      	ldrb	r3, [r4, #0]
    c3d8:	2b00      	cmp	r3, #0
    c3da:	d0fa      	beq.n	c3d2 <outs+0x14>
		int rc = out((int)*sp++, ctx);
    c3dc:	f814 0b01 	ldrb.w	r0, [r4], #1
    c3e0:	4641      	mov	r1, r8
    c3e2:	47b8      	blx	r7
		if (rc < 0) {
    c3e4:	2800      	cmp	r0, #0
    c3e6:	daf1      	bge.n	c3cc <outs+0xe>
}
    c3e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000c3ec <free_space>:
 * @retval true when space was calculated until end of buffer (and there might
 * be more space available after wrapping.
 * @retval false When result is total free space.
 */
static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    c3ec:	b510      	push	{r4, lr}
	if (buffer->flags & MPSC_PBUF_FULL) {
    c3ee:	6903      	ldr	r3, [r0, #16]
{
    c3f0:	4602      	mov	r2, r0
	if (buffer->flags & MPSC_PBUF_FULL) {
    c3f2:	f013 0008 	ands.w	r0, r3, #8
    c3f6:	d109      	bne.n	c40c <free_space+0x20>
		*res = 0;
		return false;
	}

	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    c3f8:	6813      	ldr	r3, [r2, #0]
    c3fa:	68d4      	ldr	r4, [r2, #12]
    c3fc:	429c      	cmp	r4, r3
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
		return false;
	}
	*res = buffer->size - buffer->tmp_wr_idx;
    c3fe:	bf97      	itett	ls
    c400:	6a12      	ldrls	r2, [r2, #32]
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    c402:	1ae3      	subhi	r3, r4, r3
	*res = buffer->size - buffer->tmp_wr_idx;
    c404:	1ad3      	subls	r3, r2, r3

	return true;
    c406:	2001      	movls	r0, #1
		*res =  buffer->rd_idx - buffer->tmp_wr_idx;
    c408:	600b      	str	r3, [r1, #0]
}
    c40a:	bd10      	pop	{r4, pc}
    c40c:	2300      	movs	r3, #0
		return false;
    c40e:	4618      	mov	r0, r3
    c410:	e7fa      	b.n	c408 <free_space+0x1c>

0000c412 <get_usage>:

	return false;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    c412:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    c414:	a901      	add	r1, sp, #4
{
    c416:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    c418:	f7ff ffe8 	bl	c3ec <free_space>
    c41c:	b120      	cbz	r0, c428 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    c41e:	9b01      	ldr	r3, [sp, #4]
    c420:	68e2      	ldr	r2, [r4, #12]
    c422:	3b01      	subs	r3, #1
    c424:	4413      	add	r3, r2
    c426:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    c428:	6a20      	ldr	r0, [r4, #32]
    c42a:	9b01      	ldr	r3, [sp, #4]
    c42c:	1ac0      	subs	r0, r0, r3
}
    c42e:	3801      	subs	r0, #1
    c430:	b002      	add	sp, #8
    c432:	bd10      	pop	{r4, pc}

0000c434 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, int32_t val)
{
    c434:	b510      	push	{r4, lr}
    c436:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    c438:	1850      	adds	r0, r2, r1

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    c43a:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    c43c:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    c43e:	07d2      	lsls	r2, r2, #31
    c440:	d502      	bpl.n	c448 <idx_inc+0x14>
		return i & (buffer->size - 1);
    c442:	3b01      	subs	r3, #1
    c444:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    c446:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    c448:	4298      	cmp	r0, r3
    c44a:	bf28      	it	cs
    c44c:	1ac0      	subcs	r0, r0, r3
    c44e:	e7fa      	b.n	c446 <idx_inc+0x12>

0000c450 <rd_idx_inc>:
		buffer->flags |= MPSC_PBUF_FULL;
	}
}

static void rd_idx_inc(struct mpsc_pbuf_buffer *buffer, int32_t wlen)
{
    c450:	b510      	push	{r4, lr}
    c452:	4604      	mov	r4, r0
    c454:	460a      	mov	r2, r1
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    c456:	68c1      	ldr	r1, [r0, #12]
    c458:	f7ff ffec 	bl	c434 <idx_inc>
	buffer->flags &= ~MPSC_PBUF_FULL;
    c45c:	6923      	ldr	r3, [r4, #16]
	buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    c45e:	60e0      	str	r0, [r4, #12]
	buffer->flags &= ~MPSC_PBUF_FULL;
    c460:	f023 0308 	bic.w	r3, r3, #8
    c464:	6123      	str	r3, [r4, #16]
}
    c466:	bd10      	pop	{r4, pc}

0000c468 <add_skip_item>:

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    c468:	b538      	push	{r3, r4, r5, lr}
    c46a:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    c46c:	69c2      	ldr	r2, [r0, #28]
	union mpsc_pbuf_generic skip = {
    c46e:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    c470:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    c472:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    c476:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
{
    c47a:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    c47c:	6801      	ldr	r1, [r0, #0]
    c47e:	462a      	mov	r2, r5
    c480:	f7ff ffd8 	bl	c434 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    c484:	68e3      	ldr	r3, [r4, #12]
	tmp_wr_idx_inc(buffer, wlen);
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    c486:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    c488:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    c48a:	4298      	cmp	r0, r3
		buffer->flags |= MPSC_PBUF_FULL;
    c48c:	bf02      	ittt	eq
    c48e:	6923      	ldreq	r3, [r4, #16]
    c490:	f043 0308 	orreq.w	r3, r3, #8
    c494:	6123      	streq	r3, [r4, #16]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    c496:	462a      	mov	r2, r5
    c498:	4620      	mov	r0, r4
    c49a:	f7ff ffcb 	bl	c434 <idx_inc>
    c49e:	6060      	str	r0, [r4, #4]
}
    c4a0:	bd38      	pop	{r3, r4, r5, pc}

0000c4a2 <drop_item_locked>:

static bool drop_item_locked(struct mpsc_pbuf_buffer *buffer,
			     uint32_t free_wlen,
			     union mpsc_pbuf_generic **item_to_drop,
			     uint32_t *tmp_wr_idx_shift)
{
    c4a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t skip_wlen;

	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    c4a6:	68c7      	ldr	r7, [r0, #12]
    c4a8:	69c6      	ldr	r6, [r0, #28]
{
    c4aa:	469b      	mov	fp, r3
	if (item->hdr.busy && !item->hdr.valid) {
    c4ac:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    c4b0:	f003 0303 	and.w	r3, r3, #3
    c4b4:	2b02      	cmp	r3, #2
{
    c4b6:	4604      	mov	r4, r0
    c4b8:	4688      	mov	r8, r1
    c4ba:	4691      	mov	r9, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    c4bc:	eb06 0a87 	add.w	sl, r6, r7, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    c4c0:	f04f 0300 	mov.w	r3, #0
    c4c4:	d009      	beq.n	c4da <drop_item_locked+0x38>
	skip_wlen = get_skip(item);
	*item_to_drop = NULL;
    c4c6:	6013      	str	r3, [r2, #0]
	*tmp_wr_idx_shift = 0;
    c4c8:	f8cb 3000 	str.w	r3, [fp]
		buffer->tmp_rd_idx = buffer->rd_idx;
		return true;
	}

	/* Other options for dropping available only in overwrite mode. */
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE)) {
    c4cc:	6923      	ldr	r3, [r4, #16]
    c4ce:	0799      	lsls	r1, r3, #30
    c4d0:	d410      	bmi.n	c4f4 <drop_item_locked+0x52>
		return false;
    c4d2:	2000      	movs	r0, #0
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
			       item, rd_wlen);
	}

	return true;
}
    c4d4:	b003      	add	sp, #12
    c4d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return item->skip.len;
    c4da:	f856 1027 	ldr.w	r1, [r6, r7, lsl #2]
	*item_to_drop = NULL;
    c4de:	6013      	str	r3, [r2, #0]
	if (skip_wlen) {
    c4e0:	0889      	lsrs	r1, r1, #2
	*tmp_wr_idx_shift = 0;
    c4e2:	f8cb 3000 	str.w	r3, [fp]
	if (skip_wlen) {
    c4e6:	d0f1      	beq.n	c4cc <drop_item_locked+0x2a>
		rd_idx_inc(buffer, skip_wlen);
    c4e8:	f7ff ffb2 	bl	c450 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    c4ec:	68e3      	ldr	r3, [r4, #12]
    c4ee:	60a3      	str	r3, [r4, #8]
		return true;
    c4f0:	2001      	movs	r0, #1
    c4f2:	e7ef      	b.n	c4d4 <drop_item_locked+0x32>
	uint32_t rd_wlen = buffer->get_wlen(item);
    c4f4:	69a3      	ldr	r3, [r4, #24]
    c4f6:	4650      	mov	r0, sl
    c4f8:	4798      	blx	r3
	return item->hdr.valid;
    c4fa:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
	if (!is_valid(item)) {
    c4fe:	07da      	lsls	r2, r3, #31
	uint32_t rd_wlen = buffer->get_wlen(item);
    c500:	4605      	mov	r5, r0
	if (!is_valid(item)) {
    c502:	d5e6      	bpl.n	c4d2 <drop_item_locked+0x30>
	} else if (item->hdr.busy) {
    c504:	f013 0302 	ands.w	r3, r3, #2
    c508:	d01d      	beq.n	c546 <drop_item_locked+0xa4>
		if (free_wlen) {
    c50a:	f1b8 0f00 	cmp.w	r8, #0
    c50e:	d003      	beq.n	c518 <drop_item_locked+0x76>
			add_skip_item(buffer, free_wlen);
    c510:	4641      	mov	r1, r8
    c512:	4620      	mov	r0, r4
    c514:	f7ff ffa8 	bl	c468 <add_skip_item>
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    c518:	6861      	ldr	r1, [r4, #4]
    c51a:	462a      	mov	r2, r5
    c51c:	4620      	mov	r0, r4
    c51e:	f7ff ff89 	bl	c434 <idx_inc>
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    c522:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    c526:	4299      	cmp	r1, r3
		buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    c528:	6060      	str	r0, [r4, #4]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    c52a:	d104      	bne.n	c536 <drop_item_locked+0x94>
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, rd_wlen);
    c52c:	462a      	mov	r2, r5
    c52e:	4620      	mov	r0, r4
    c530:	f7ff ff80 	bl	c434 <idx_inc>
    c534:	60a0      	str	r0, [r4, #8]
		buffer->tmp_wr_idx = buffer->tmp_rd_idx;
    c536:	68a3      	ldr	r3, [r4, #8]
    c538:	6023      	str	r3, [r4, #0]
		buffer->rd_idx = buffer->tmp_rd_idx;
    c53a:	60e3      	str	r3, [r4, #12]
		buffer->flags |= MPSC_PBUF_FULL;
    c53c:	6923      	ldr	r3, [r4, #16]
    c53e:	f043 0308 	orr.w	r3, r3, #8
    c542:	6123      	str	r3, [r4, #16]
    c544:	e7d4      	b.n	c4f0 <drop_item_locked+0x4e>
		rd_idx_inc(buffer, rd_wlen);
    c546:	4601      	mov	r1, r0
    c548:	4620      	mov	r0, r4
    c54a:	9301      	str	r3, [sp, #4]
    c54c:	f7ff ff80 	bl	c450 <rd_idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    c550:	68e2      	ldr	r2, [r4, #12]
    c552:	60a2      	str	r2, [r4, #8]
		if (free_wlen) {
    c554:	f1b8 0f00 	cmp.w	r8, #0
    c558:	d004      	beq.n	c564 <drop_item_locked+0xc2>
			buffer->buf[buffer->tmp_wr_idx] = invalid.raw;
    c55a:	6821      	ldr	r1, [r4, #0]
    c55c:	69e2      	ldr	r2, [r4, #28]
    c55e:	9b01      	ldr	r3, [sp, #4]
    c560:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		*tmp_wr_idx_shift = rd_wlen + free_wlen;
    c564:	eb05 0208 	add.w	r2, r5, r8
    c568:	f8cb 2000 	str.w	r2, [fp]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    c56c:	6821      	ldr	r1, [r4, #0]
    c56e:	4620      	mov	r0, r4
    c570:	f7ff ff60 	bl	c434 <idx_inc>
		buffer->flags |= MPSC_PBUF_FULL;
    c574:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, *tmp_wr_idx_shift);
    c576:	6020      	str	r0, [r4, #0]
		buffer->flags |= MPSC_PBUF_FULL;
    c578:	f043 0308 	orr.w	r3, r3, #8
    c57c:	6123      	str	r3, [r4, #16]
		item->hdr.valid = 0;
    c57e:	f816 3027 	ldrb.w	r3, [r6, r7, lsl #2]
    c582:	f36f 0300 	bfc	r3, #0, #1
    c586:	f806 3027 	strb.w	r3, [r6, r7, lsl #2]
		*item_to_drop = item;
    c58a:	f8c9 a000 	str.w	sl, [r9]
		MPSC_PBUF_DBG(buffer, "no space: dropping packet %p (len: %d)",
    c58e:	e7af      	b.n	c4f0 <drop_item_locked+0x4e>

0000c590 <post_drop_action>:

static void post_drop_action(struct mpsc_pbuf_buffer *buffer,
			     uint32_t prev_tmp_wr_idx,
			     uint32_t tmp_wr_idx_shift)
{
    c590:	b570      	push	{r4, r5, r6, lr}
    c592:	4604      	mov	r4, r0
    c594:	4615      	mov	r5, r2
	uint32_t cmp_tmp_wr_idx = idx_inc(buffer, prev_tmp_wr_idx, tmp_wr_idx_shift);
    c596:	f7ff ff4d 	bl	c434 <idx_inc>

	if (cmp_tmp_wr_idx == buffer->tmp_wr_idx) {
    c59a:	6823      	ldr	r3, [r4, #0]
    c59c:	4283      	cmp	r3, r0
    c59e:	d105      	bne.n	c5ac <post_drop_action+0x1c>
		/* Operation not interrupted by another alloc. */
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
		buffer->flags &= ~MPSC_PBUF_FULL;
    c5a0:	6923      	ldr	r3, [r4, #16]
		buffer->tmp_wr_idx = prev_tmp_wr_idx;
    c5a2:	6021      	str	r1, [r4, #0]
		buffer->flags &= ~MPSC_PBUF_FULL;
    c5a4:	f023 0308 	bic.w	r3, r3, #8
    c5a8:	6123      	str	r3, [r4, #16]
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
	buffer->wr_idx = idx_inc(buffer,
				 buffer->wr_idx,
				 tmp_wr_idx_shift);
	/* full flag? */
}
    c5aa:	bd70      	pop	{r4, r5, r6, pc}
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    c5ac:	69e2      	ldr	r2, [r4, #28]
	union mpsc_pbuf_generic skip = {
    c5ae:	00ab      	lsls	r3, r5, #2
    c5b0:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[prev_tmp_wr_idx] = skip.raw;
    c5b4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->wr_idx = idx_inc(buffer,
    c5b8:	4620      	mov	r0, r4
    c5ba:	6861      	ldr	r1, [r4, #4]
    c5bc:	462a      	mov	r2, r5
    c5be:	f7ff ff39 	bl	c434 <idx_inc>
    c5c2:	6060      	str	r0, [r4, #4]
    c5c4:	e7f1      	b.n	c5aa <post_drop_action+0x1a>

0000c5c6 <max_utilization_update>:
{
    c5c6:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    c5c8:	6903      	ldr	r3, [r0, #16]
    c5ca:	075b      	lsls	r3, r3, #29
{
    c5cc:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    c5ce:	d506      	bpl.n	c5de <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    c5d0:	6a45      	ldr	r5, [r0, #36]	; 0x24
    c5d2:	f7ff ff1e 	bl	c412 <get_usage>
    c5d6:	4285      	cmp	r5, r0
    c5d8:	bf2c      	ite	cs
    c5da:	6265      	strcs	r5, [r4, #36]	; 0x24
    c5dc:	6260      	strcc	r0, [r4, #36]	; 0x24
}
    c5de:	bd38      	pop	{r3, r4, r5, pc}

0000c5e0 <mpsc_pbuf_init>:
{
    c5e0:	b538      	push	{r3, r4, r5, lr}
    c5e2:	460d      	mov	r5, r1
    c5e4:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    c5e6:	221c      	movs	r2, #28
    c5e8:	2100      	movs	r1, #0
    c5ea:	f000 fa9a 	bl	cb22 <memset>
	buffer->get_wlen = cfg->get_wlen;
    c5ee:	68eb      	ldr	r3, [r5, #12]
    c5f0:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    c5f2:	68ab      	ldr	r3, [r5, #8]
    c5f4:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    c5f6:	682b      	ldr	r3, [r5, #0]
    c5f8:	61e3      	str	r3, [r4, #28]
	buffer->size = cfg->size;
    c5fa:	686b      	ldr	r3, [r5, #4]
    c5fc:	6223      	str	r3, [r4, #32]
	buffer->max_usage = 0;
    c5fe:	2200      	movs	r2, #0
    c600:	6262      	str	r2, [r4, #36]	; 0x24
	buffer->flags = cfg->flags;
    c602:	692a      	ldr	r2, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return IS_POWER_OF_TWO(x);
    c604:	b123      	cbz	r3, c610 <mpsc_pbuf_init+0x30>
    c606:	1e59      	subs	r1, r3, #1
    c608:	4219      	tst	r1, r3
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    c60a:	bf08      	it	eq
    c60c:	f042 0201 	orreq.w	r2, r2, #1
	buffer->flags = cfg->flags;
    c610:	6122      	str	r2, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    c612:	2201      	movs	r2, #1
    c614:	f104 0028 	add.w	r0, r4, #40	; 0x28
    c618:	2100      	movs	r1, #0
}
    c61a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    c61e:	f000 bf7b 	b.w	d518 <z_impl_k_sem_init>

0000c622 <mpsc_pbuf_alloc>:
	} while (cont);
}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    c622:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c626:	b087      	sub	sp, #28
	union mpsc_pbuf_generic *item = NULL;
	union mpsc_pbuf_generic *dropped_item = NULL;
    c628:	2500      	movs	r5, #0
{
    c62a:	9300      	str	r3, [sp, #0]
	uint32_t tmp_wr_idx_shift = 0;
	uint32_t tmp_wr_idx_val = 0;

	MPSC_PBUF_DBG(buffer, "alloc %d words", (int)wlen);

	if (wlen > (buffer->size)) {
    c62c:	6a03      	ldr	r3, [r0, #32]
	union mpsc_pbuf_generic *dropped_item = NULL;
    c62e:	9503      	str	r5, [sp, #12]
	if (wlen > (buffer->size)) {
    c630:	428b      	cmp	r3, r1
{
    c632:	4604      	mov	r4, r0
    c634:	460e      	mov	r6, r1
    c636:	4692      	mov	sl, r2
	uint32_t tmp_wr_idx_shift = 0;
    c638:	9505      	str	r5, [sp, #20]
		MPSC_PBUF_DBG(buffer, "Failed to alloc");
		return NULL;
    c63a:	46a9      	mov	r9, r5
	if (wlen > (buffer->size)) {
    c63c:	d33a      	bcc.n	c6b4 <mpsc_pbuf_alloc+0x92>
	__asm__ volatile(
    c63e:	f04f 0340 	mov.w	r3, #64	; 0x40
    c642:	f3ef 8b11 	mrs	fp, BASEPRI
    c646:	f383 8812 	msr	BASEPRI_MAX, r3
    c64a:	f3bf 8f6f 	isb	sy
	do {
		k_spinlock_key_t key;
		bool wrap;

		key = k_spin_lock(&buffer->lock);
		if (tmp_wr_idx_shift) {
    c64e:	9a05      	ldr	r2, [sp, #20]
    c650:	46d8      	mov	r8, fp
    c652:	b12a      	cbz	r2, c660 <mpsc_pbuf_alloc+0x3e>
			post_drop_action(buffer, tmp_wr_idx_val, tmp_wr_idx_shift);
    c654:	4629      	mov	r1, r5
    c656:	4620      	mov	r0, r4
    c658:	f7ff ff9a 	bl	c590 <post_drop_action>
			tmp_wr_idx_shift = 0;
    c65c:	2300      	movs	r3, #0
    c65e:	9305      	str	r3, [sp, #20]
		}

		wrap = free_space(buffer, &free_wlen);
    c660:	a904      	add	r1, sp, #16
    c662:	4620      	mov	r0, r4
    c664:	f7ff fec2 	bl	c3ec <free_space>

		if (free_wlen >= wlen) {
    c668:	9904      	ldr	r1, [sp, #16]
    c66a:	42b1      	cmp	r1, r6
		wrap = free_space(buffer, &free_wlen);
    c66c:	4607      	mov	r7, r0
		if (free_wlen >= wlen) {
    c66e:	d32a      	bcc.n	c6c6 <mpsc_pbuf_alloc+0xa4>
			item =
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    c670:	6822      	ldr	r2, [r4, #0]
			item =
    c672:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    c674:	f813 1022 	ldrb.w	r1, [r3, r2, lsl #2]
    c678:	f021 0103 	bic.w	r1, r1, #3
    c67c:	f803 1022 	strb.w	r1, [r3, r2, lsl #2]
			item =
    c680:	eb03 0982 	add.w	r9, r3, r2, lsl #2
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    c684:	6821      	ldr	r1, [r4, #0]
    c686:	4632      	mov	r2, r6
    c688:	4620      	mov	r0, r4
    c68a:	f7ff fed3 	bl	c434 <idx_inc>
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    c68e:	68e3      	ldr	r3, [r4, #12]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    c690:	6020      	str	r0, [r4, #0]
	if (buffer->tmp_wr_idx == buffer->rd_idx) {
    c692:	4298      	cmp	r0, r3
    c694:	d012      	beq.n	c6bc <mpsc_pbuf_alloc+0x9a>
			item->hdr.busy = 0;
			tmp_wr_idx_inc(buffer, wlen);
			cont = false;
    c696:	2700      	movs	r7, #0
	__asm__ volatile(
    c698:	f388 8811 	msr	BASEPRI, r8
    c69c:	f3bf 8f6f 	isb	sy
			cont = drop_item_locked(buffer, free_wlen,
						&dropped_item, &tmp_wr_idx_shift);
		}
		k_spin_unlock(&buffer->lock, key);

		if (dropped_item) {
    c6a0:	9903      	ldr	r1, [sp, #12]
    c6a2:	b129      	cbz	r1, c6b0 <mpsc_pbuf_alloc+0x8e>
			/* Notify about item being dropped. */
			if (buffer->notify_drop) {
    c6a4:	6962      	ldr	r2, [r4, #20]
    c6a6:	b10a      	cbz	r2, c6ac <mpsc_pbuf_alloc+0x8a>
				buffer->notify_drop(buffer, dropped_item);
    c6a8:	4620      	mov	r0, r4
    c6aa:	4790      	blx	r2
			}
			dropped_item = NULL;
    c6ac:	2300      	movs	r3, #0
    c6ae:	9303      	str	r3, [sp, #12]
		}
	} while (cont);
    c6b0:	2f00      	cmp	r7, #0
    c6b2:	d1c4      	bne.n	c63e <mpsc_pbuf_alloc+0x1c>
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    c6b4:	4648      	mov	r0, r9
    c6b6:	b007      	add	sp, #28
    c6b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buffer->flags |= MPSC_PBUF_FULL;
    c6bc:	6923      	ldr	r3, [r4, #16]
    c6be:	f043 0308 	orr.w	r3, r3, #8
    c6c2:	6123      	str	r3, [r4, #16]
    c6c4:	e7e7      	b.n	c696 <mpsc_pbuf_alloc+0x74>
		} else if (wrap) {
    c6c6:	b118      	cbz	r0, c6d0 <mpsc_pbuf_alloc+0xae>
			add_skip_item(buffer, free_wlen);
    c6c8:	4620      	mov	r0, r4
    c6ca:	f7ff fecd 	bl	c468 <add_skip_item>
			cont = true;
    c6ce:	e7e3      	b.n	c698 <mpsc_pbuf_alloc+0x76>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    c6d0:	9b00      	ldr	r3, [sp, #0]
    c6d2:	ea5a 0303 	orrs.w	r3, sl, r3
    c6d6:	d01a      	beq.n	c70e <mpsc_pbuf_alloc+0xec>
    c6d8:	9101      	str	r1, [sp, #4]
    c6da:	f000 fe79 	bl	d3d0 <k_is_in_isr>
    c6de:	9901      	ldr	r1, [sp, #4]
    c6e0:	b9a8      	cbnz	r0, c70e <mpsc_pbuf_alloc+0xec>
    c6e2:	f38b 8811 	msr	BASEPRI, fp
    c6e6:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    c6ea:	9b00      	ldr	r3, [sp, #0]
    c6ec:	4652      	mov	r2, sl
    c6ee:	f104 0028 	add.w	r0, r4, #40	; 0x28
    c6f2:	f7fe fb05 	bl	ad00 <z_impl_k_sem_take>
	__asm__ volatile(
    c6f6:	f04f 0340 	mov.w	r3, #64	; 0x40
    c6fa:	f3ef 8811 	mrs	r8, BASEPRI
    c6fe:	f383 8812 	msr	BASEPRI_MAX, r3
    c702:	f3bf 8f6f 	isb	sy
			cont = (err == 0) ? true : false;
    c706:	fab0 f780 	clz	r7, r0
    c70a:	097f      	lsrs	r7, r7, #5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) && !k_is_in_isr()) {
    c70c:	e7c4      	b.n	c698 <mpsc_pbuf_alloc+0x76>
			cont = drop_item_locked(buffer, free_wlen,
    c70e:	ab05      	add	r3, sp, #20
    c710:	aa03      	add	r2, sp, #12
    c712:	4620      	mov	r0, r4
			tmp_wr_idx_val = buffer->tmp_wr_idx;
    c714:	6825      	ldr	r5, [r4, #0]
			cont = drop_item_locked(buffer, free_wlen,
    c716:	f7ff fec4 	bl	c4a2 <drop_item_locked>
    c71a:	4607      	mov	r7, r0
    c71c:	e7bc      	b.n	c698 <mpsc_pbuf_alloc+0x76>

0000c71e <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    c71e:	b570      	push	{r4, r5, r6, lr}
    c720:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    c722:	6983      	ldr	r3, [r0, #24]
    c724:	4608      	mov	r0, r1
{
    c726:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    c728:	4798      	blx	r3
    c72a:	4602      	mov	r2, r0
    c72c:	f04f 0340 	mov.w	r3, #64	; 0x40
    c730:	f3ef 8611 	mrs	r6, BASEPRI
    c734:	f383 8812 	msr	BASEPRI_MAX, r3
    c738:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    c73c:	782b      	ldrb	r3, [r5, #0]
    c73e:	f043 0301 	orr.w	r3, r3, #1
    c742:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    c744:	6861      	ldr	r1, [r4, #4]
    c746:	4620      	mov	r0, r4
    c748:	f7ff fe74 	bl	c434 <idx_inc>
    c74c:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    c74e:	4620      	mov	r0, r4
    c750:	f7ff ff39 	bl	c5c6 <max_utilization_update>
	__asm__ volatile(
    c754:	f386 8811 	msr	BASEPRI, r6
    c758:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p", item);
}
    c75c:	bd70      	pop	{r4, r5, r6, pc}

0000c75e <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    c75e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c760:	4604      	mov	r4, r0
	__asm__ volatile(
    c762:	f04f 0340 	mov.w	r3, #64	; 0x40
    c766:	f3ef 8611 	mrs	r6, BASEPRI
    c76a:	f383 8812 	msr	BASEPRI_MAX, r3
    c76e:	f3bf 8f6f 	isb	sy
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    c772:	6923      	ldr	r3, [r4, #16]
    c774:	f013 0f08 	tst.w	r3, #8
    c778:	68a3      	ldr	r3, [r4, #8]
    c77a:	d102      	bne.n	c782 <mpsc_pbuf_claim+0x24>
    c77c:	6862      	ldr	r2, [r4, #4]
    c77e:	4293      	cmp	r3, r2
    c780:	d900      	bls.n	c784 <mpsc_pbuf_claim+0x26>
		*res = buffer->size - buffer->tmp_rd_idx;
    c782:	6a22      	ldr	r2, [r4, #32]

		cont = false;
		key = k_spin_lock(&buffer->lock);
		(void)available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];
    c784:	69e1      	ldr	r1, [r4, #28]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    c786:	1ad2      	subs	r2, r2, r3

		if (!a || is_invalid(item)) {
    c788:	b92a      	cbnz	r2, c796 <mpsc_pbuf_claim+0x38>
	__asm__ volatile(
    c78a:	f386 8811 	msr	BASEPRI, r6
    c78e:	f3bf 8f6f 	isb	sy
			MPSC_PBUF_DBG(buffer, "invalid claim %d: %p", a, item);
			item = NULL;
    c792:	2700      	movs	r7, #0
			MPSC_PBUF_DBG(buffer, ">>claimed %d: %p", a, item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);

	return item;
    c794:	e033      	b.n	c7fe <mpsc_pbuf_claim+0xa0>
	return !item->hdr.valid && !item->hdr.busy;
    c796:	f811 2023 	ldrb.w	r2, [r1, r3, lsl #2]
		if (!a || is_invalid(item)) {
    c79a:	f012 0003 	ands.w	r0, r2, #3
		item = (union mpsc_pbuf_generic *)
    c79e:	eb01 0783 	add.w	r7, r1, r3, lsl #2
		if (!a || is_invalid(item)) {
    c7a2:	d0f2      	beq.n	c78a <mpsc_pbuf_claim+0x2c>
	if (item->hdr.busy && !item->hdr.valid) {
    c7a4:	2802      	cmp	r0, #2
    c7a6:	d103      	bne.n	c7b0 <mpsc_pbuf_claim+0x52>
		return item->skip.len;
    c7a8:	f851 5023 	ldr.w	r5, [r1, r3, lsl #2]
			if (skip || !is_valid(item)) {
    c7ac:	08ad      	lsrs	r5, r5, #2
    c7ae:	d105      	bne.n	c7bc <mpsc_pbuf_claim+0x5e>
    c7b0:	07d0      	lsls	r0, r2, #31
    c7b2:	d412      	bmi.n	c7da <mpsc_pbuf_claim+0x7c>
					skip ? skip : buffer->get_wlen(item);
    c7b4:	69a3      	ldr	r3, [r4, #24]
    c7b6:	4638      	mov	r0, r7
    c7b8:	4798      	blx	r3
    c7ba:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    c7bc:	68a1      	ldr	r1, [r4, #8]
    c7be:	462a      	mov	r2, r5
    c7c0:	4620      	mov	r0, r4
    c7c2:	f7ff fe37 	bl	c434 <idx_inc>
				rd_idx_inc(buffer, inc);
    c7c6:	4629      	mov	r1, r5
				buffer->tmp_rd_idx =
    c7c8:	60a0      	str	r0, [r4, #8]
				rd_idx_inc(buffer, inc);
    c7ca:	4620      	mov	r0, r4
    c7cc:	f7ff fe40 	bl	c450 <rd_idx_inc>
    c7d0:	f386 8811 	msr	BASEPRI, r6
    c7d4:	f3bf 8f6f 	isb	sy
	} while (cont);
    c7d8:	e7c3      	b.n	c762 <mpsc_pbuf_claim+0x4>
				item->hdr.busy = 1;
    c7da:	f042 0202 	orr.w	r2, r2, #2
    c7de:	f801 2023 	strb.w	r2, [r1, r3, lsl #2]
						buffer->get_wlen(item));
    c7e2:	4638      	mov	r0, r7
    c7e4:	69a3      	ldr	r3, [r4, #24]
					idx_inc(buffer, buffer->tmp_rd_idx,
    c7e6:	68a5      	ldr	r5, [r4, #8]
						buffer->get_wlen(item));
    c7e8:	4798      	blx	r3
					idx_inc(buffer, buffer->tmp_rd_idx,
    c7ea:	4629      	mov	r1, r5
						buffer->get_wlen(item));
    c7ec:	4602      	mov	r2, r0
					idx_inc(buffer, buffer->tmp_rd_idx,
    c7ee:	4620      	mov	r0, r4
    c7f0:	f7ff fe20 	bl	c434 <idx_inc>
				buffer->tmp_rd_idx =
    c7f4:	60a0      	str	r0, [r4, #8]
    c7f6:	f386 8811 	msr	BASEPRI, r6
    c7fa:	f3bf 8f6f 	isb	sy
}
    c7fe:	4638      	mov	r0, r7
    c800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c802 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    c802:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c804:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    c806:	6983      	ldr	r3, [r0, #24]
    c808:	4608      	mov	r0, r1
{
    c80a:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    c80c:	4798      	blx	r3
    c80e:	4606      	mov	r6, r0
	__asm__ volatile(
    c810:	f04f 0340 	mov.w	r3, #64	; 0x40
    c814:	f3ef 8711 	mrs	r7, BASEPRI
    c818:	f383 8812 	msr	BASEPRI_MAX, r3
    c81c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    c820:	782b      	ldrb	r3, [r5, #0]
    c822:	f36f 0300 	bfc	r3, #0, #1
    c826:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    c828:	6923      	ldr	r3, [r4, #16]
    c82a:	079b      	lsls	r3, r3, #30
    c82c:	d505      	bpl.n	c83a <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    c82e:	68e2      	ldr	r2, [r4, #12]
    c830:	69e3      	ldr	r3, [r4, #28]
    c832:	eb03 0382 	add.w	r3, r3, r2, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    c836:	429d      	cmp	r5, r3
    c838:	d11a      	bne.n	c870 <mpsc_pbuf_free+0x6e>
		witem->hdr.busy = 0;
    c83a:	782b      	ldrb	r3, [r5, #0]
    c83c:	f36f 0341 	bfc	r3, #1, #1
    c840:	702b      	strb	r3, [r5, #0]
		if (buffer->rd_idx == buffer->tmp_rd_idx) {
    c842:	e9d4 3102 	ldrd	r3, r1, [r4, #8]
    c846:	4299      	cmp	r1, r3
    c848:	d104      	bne.n	c854 <mpsc_pbuf_free+0x52>
			 * at claimed item. In that case tmp_rd_idx points at
			 * the same location. In that case increment also tmp_rd_idx
			 * which will mark freed buffer as the only free space in
			 * the buffer.
			 */
			buffer->tmp_rd_idx = idx_inc(buffer, buffer->tmp_rd_idx, wlen);
    c84a:	4632      	mov	r2, r6
    c84c:	4620      	mov	r0, r4
    c84e:	f7ff fdf1 	bl	c434 <idx_inc>
    c852:	60a0      	str	r0, [r4, #8]
		}
		rd_idx_inc(buffer, wlen);
    c854:	4631      	mov	r1, r6
    c856:	4620      	mov	r0, r4
    c858:	f7ff fdfa 	bl	c450 <rd_idx_inc>
	__asm__ volatile(
    c85c:	f387 8811 	msr	BASEPRI, r7
    c860:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    c864:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "<<freed: %p", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    c868:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    c86c:	f7fe ba28 	b.w	acc0 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    c870:	682b      	ldr	r3, [r5, #0]
    c872:	f360 039f 	bfi	r3, r0, #2, #30
    c876:	602b      	str	r3, [r5, #0]
    c878:	e7f0      	b.n	c85c <mpsc_pbuf_free+0x5a>

0000c87a <mpsc_pbuf_is_pending>:
	if (buffer->flags & MPSC_PBUF_FULL || buffer->tmp_rd_idx > buffer->wr_idx) {
    c87a:	6902      	ldr	r2, [r0, #16]
    c87c:	6883      	ldr	r3, [r0, #8]
    c87e:	0712      	lsls	r2, r2, #28
    c880:	d402      	bmi.n	c888 <mpsc_pbuf_is_pending+0xe>
    c882:	6842      	ldr	r2, [r0, #4]
    c884:	429a      	cmp	r2, r3
    c886:	d200      	bcs.n	c88a <mpsc_pbuf_is_pending+0x10>
		*res = buffer->size - buffer->tmp_rd_idx;
    c888:	6a02      	ldr	r2, [r0, #32]
	*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    c88a:	1ad3      	subs	r3, r2, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    c88c:	1e18      	subs	r0, r3, #0
    c88e:	bf18      	it	ne
    c890:	2001      	movne	r0, #1
    c892:	4770      	bx	lr

0000c894 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_STRIP_PATHS, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_WARN_DEPRECATED, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_ENFORCE_ZEPHYR_STDINT, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    c894:	4770      	bx	lr

0000c896 <log_msg_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG_LOG;
    c896:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    c898:	075b      	lsls	r3, r3, #29
	return Z_LOG_MSG_ALIGNED_WLEN(desc.package_len, desc.data_len);
    c89a:	bf5f      	itttt	pl
    c89c:	6803      	ldrpl	r3, [r0, #0]
    c89e:	8842      	ldrhpl	r2, [r0, #2]
    c8a0:	f3c3 234a 	ubfxpl	r3, r3, #9, #11
    c8a4:	eb03 1012 	addpl.w	r0, r3, r2, lsr #4
    c8a8:	bf5d      	ittte	pl
    c8aa:	3017      	addpl	r0, #23
    c8ac:	f020 0007 	bicpl.w	r0, r0, #7
    c8b0:	0880      	lsrpl	r0, r0, #2
	return 0;
    c8b2:	2000      	movmi	r0, #0
}
    c8b4:	4770      	bx	lr

0000c8b6 <dummy_timestamp>:
}
    c8b6:	2000      	movs	r0, #0
    c8b8:	4770      	bx	lr

0000c8ba <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    c8ba:	f000 bb42 	b.w	cf42 <sys_clock_cycle_get_32>

0000c8be <atomic_inc>:
{
    c8be:	4603      	mov	r3, r0
}
    c8c0:	f3bf 8f5b 	dmb	ish
    c8c4:	e853 0f00 	ldrex	r0, [r3]
    c8c8:	1c42      	adds	r2, r0, #1
    c8ca:	e843 2100 	strex	r1, r2, [r3]
    c8ce:	2900      	cmp	r1, #0
    c8d0:	d1f8      	bne.n	c8c4 <atomic_inc+0x6>
    c8d2:	f3bf 8f5b 	dmb	ish
    c8d6:	4770      	bx	lr

0000c8d8 <z_log_vprintk>:
{
    c8d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    c8da:	2300      	movs	r3, #0
    c8dc:	e9cd 0102 	strd	r0, r1, [sp, #8]
    c8e0:	e9cd 3300 	strd	r3, r3, [sp]
    c8e4:	461a      	mov	r2, r3
    c8e6:	4619      	mov	r1, r3
    c8e8:	4618      	mov	r0, r3
    c8ea:	f7f6 fc4d 	bl	3188 <z_impl_z_log_msg_runtime_vcreate>
}
    c8ee:	b005      	add	sp, #20
    c8f0:	f85d fb04 	ldr.w	pc, [sp], #4

0000c8f4 <z_log_notify_drop>:
				     const union mpsc_pbuf_generic *item)
{
	ARG_UNUSED(buffer);
	ARG_UNUSED(item);

	z_log_dropped(true);
    c8f4:	2001      	movs	r0, #1
    c8f6:	f7f6 b9ff 	b.w	2cf8 <z_log_dropped>

0000c8fa <z_log_get_tag>:
}
    c8fa:	2000      	movs	r0, #0
    c8fc:	4770      	bx	lr

0000c8fe <z_cbprintf_cpy>:
{
    c8fe:	b570      	push	{r4, r5, r6, lr}
	if ((desc->size - desc->off) < len) {
    c900:	e9d2 3601 	ldrd	r3, r6, [r2, #4]
    c904:	1b9b      	subs	r3, r3, r6
    c906:	428b      	cmp	r3, r1
{
    c908:	460c      	mov	r4, r1
    c90a:	4615      	mov	r5, r2
	if ((desc->size - desc->off) < len) {
    c90c:	d30a      	bcc.n	c924 <z_cbprintf_cpy+0x26>
	memcpy(&((uint8_t *)desc->buf)[desc->off], buf, len);
    c90e:	6813      	ldr	r3, [r2, #0]
    c910:	460a      	mov	r2, r1
    c912:	4601      	mov	r1, r0
    c914:	1998      	adds	r0, r3, r6
    c916:	f000 f8f9 	bl	cb0c <memcpy>
	desc->off += len;
    c91a:	68ab      	ldr	r3, [r5, #8]
    c91c:	4423      	add	r3, r4
    c91e:	60ab      	str	r3, [r5, #8]
	return len;
    c920:	4620      	mov	r0, r4
}
    c922:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOSPC;
    c924:	f06f 001b 	mvn.w	r0, #27
    c928:	e7fb      	b.n	c922 <z_cbprintf_cpy+0x24>

0000c92a <z_log_msg_finalize>:
{
    c92a:	b570      	push	{r4, r5, r6, lr}
    c92c:	460e      	mov	r6, r1
    c92e:	4615      	mov	r5, r2
    c930:	4619      	mov	r1, r3
	if (!msg) {
    c932:	4604      	mov	r4, r0
    c934:	b918      	cbnz	r0, c93e <z_log_msg_finalize+0x14>
}
    c936:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    c93a:	f7f6 b9dd 	b.w	2cf8 <z_log_dropped>
	if (data) {
    c93e:	b133      	cbz	r3, c94e <z_log_msg_finalize+0x24>
		uint8_t *d = msg->data + desc.package_len;
    c940:	f3c2 234a 	ubfx	r3, r2, #9, #11
    c944:	3010      	adds	r0, #16
		memcpy(d, data, desc.data_len);
    c946:	0d12      	lsrs	r2, r2, #20
    c948:	4418      	add	r0, r3
    c94a:	f000 f8df 	bl	cb0c <memcpy>
	msg->hdr.source = source;
    c94e:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg_commit(msg);
    c952:	4620      	mov	r0, r4
}
    c954:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg_commit(msg);
    c958:	f7f6 bb5e 	b.w	3018 <z_log_msg_commit>

0000c95c <buffer_write>:
{
    c95c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    c95e:	4606      	mov	r6, r0
    c960:	460d      	mov	r5, r1
    c962:	4614      	mov	r4, r2
    c964:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    c966:	4621      	mov	r1, r4
    c968:	4628      	mov	r0, r5
    c96a:	463a      	mov	r2, r7
    c96c:	47b0      	blx	r6
	} while (len != 0);
    c96e:	1a24      	subs	r4, r4, r0
		buf += processed;
    c970:	4405      	add	r5, r0
	} while (len != 0);
    c972:	d1f8      	bne.n	c966 <buffer_write+0xa>
}
    c974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000c976 <cbvprintf>:
{
    c976:	b513      	push	{r0, r1, r4, lr}
	return z_cbvprintf_impl(out, ctx, format, ap, 0);
    c978:	2400      	movs	r4, #0
    c97a:	9400      	str	r4, [sp, #0]
    c97c:	f7f5 fd36 	bl	23ec <z_cbvprintf_impl>
}
    c980:	b002      	add	sp, #8
    c982:	bd10      	pop	{r4, pc}

0000c984 <log_output_flush>:
{
    c984:	b510      	push	{r4, lr}
		     output->control_block->offset,
    c986:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    c988:	6881      	ldr	r1, [r0, #8]
{
    c98a:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    c98c:	e9d2 2300 	ldrd	r2, r3, [r2]
    c990:	6800      	ldr	r0, [r0, #0]
    c992:	f7ff ffe3 	bl	c95c <buffer_write>
	output->control_block->offset = 0;
    c996:	6863      	ldr	r3, [r4, #4]
    c998:	2200      	movs	r2, #0
    c99a:	601a      	str	r2, [r3, #0]
}
    c99c:	bd10      	pop	{r4, pc}

0000c99e <out_func>:
{
    c99e:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    c9a0:	684b      	ldr	r3, [r1, #4]
    c9a2:	681a      	ldr	r2, [r3, #0]
    c9a4:	68cb      	ldr	r3, [r1, #12]
    c9a6:	429a      	cmp	r2, r3
{
    c9a8:	4605      	mov	r5, r0
    c9aa:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    c9ac:	d102      	bne.n	c9b4 <out_func+0x16>
		log_output_flush(out_ctx);
    c9ae:	4608      	mov	r0, r1
    c9b0:	f7ff ffe8 	bl	c984 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    c9b4:	6863      	ldr	r3, [r4, #4]
    c9b6:	f3bf 8f5b 	dmb	ish
    c9ba:	e853 2f00 	ldrex	r2, [r3]
    c9be:	1c51      	adds	r1, r2, #1
    c9c0:	e843 1000 	strex	r0, r1, [r3]
    c9c4:	2800      	cmp	r0, #0
    c9c6:	d1f8      	bne.n	c9ba <out_func+0x1c>
    c9c8:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    c9cc:	68a3      	ldr	r3, [r4, #8]
    c9ce:	549d      	strb	r5, [r3, r2]
}
    c9d0:	2000      	movs	r0, #0
    c9d2:	bd38      	pop	{r3, r4, r5, pc}

0000c9d4 <cr_out_func>:
	if (c == '\n') {
    c9d4:	280a      	cmp	r0, #10
{
    c9d6:	b538      	push	{r3, r4, r5, lr}
    c9d8:	4604      	mov	r4, r0
    c9da:	460d      	mov	r5, r1
	if (c == '\n') {
    c9dc:	d102      	bne.n	c9e4 <cr_out_func+0x10>
		out_func((int)'\r', ctx);
    c9de:	200d      	movs	r0, #13
    c9e0:	f7ff ffdd 	bl	c99e <out_func>
	out_func(c, ctx);
    c9e4:	4629      	mov	r1, r5
    c9e6:	4620      	mov	r0, r4
    c9e8:	f7ff ffd9 	bl	c99e <out_func>
}
    c9ec:	2000      	movs	r0, #0
    c9ee:	bd38      	pop	{r3, r4, r5, pc}

0000c9f0 <get_ep_bm_from_addr>:
	if (ep_idx > 15) {
    c9f0:	f010 0f70 	tst.w	r0, #112	; 0x70
	ep_idx = ep & (~USB_EP_DIR_IN);
    c9f4:	f000 027f 	and.w	r2, r0, #127	; 0x7f
	if (ep_idx > 15) {
    c9f8:	d001      	beq.n	c9fe <get_ep_bm_from_addr+0xe>
    c9fa:	f7f7 b897 	b.w	3b2c <get_ep_bm_from_addr.part.0>
	if (ep & USB_EP_DIR_IN) {
    c9fe:	f010 0f80 	tst.w	r0, #128	; 0x80
		ep_bm = BIT(ep_idx + 16);
    ca02:	bf18      	it	ne
    ca04:	3210      	addne	r2, #16
    ca06:	2001      	movs	r0, #1
		ep_bm = BIT(ep_idx);
    ca08:	4090      	lsls	r0, r2
}
    ca0a:	4770      	bx	lr

0000ca0c <usb_write>:
{
    ca0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    ca10:	4606      	mov	r6, r0
    ca12:	460f      	mov	r7, r1
    ca14:	4690      	mov	r8, r2
    ca16:	4699      	mov	r9, r3
    ca18:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    ca1a:	464b      	mov	r3, r9
    ca1c:	4642      	mov	r2, r8
    ca1e:	4639      	mov	r1, r7
    ca20:	4630      	mov	r0, r6
    ca22:	f7f9 fc55 	bl	62d0 <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    ca26:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    ca2a:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    ca2c:	d103      	bne.n	ca36 <usb_write+0x2a>
	z_impl_k_yield();
    ca2e:	f7fe fd47 	bl	b4c0 <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    ca32:	3d01      	subs	r5, #1
    ca34:	d1f1      	bne.n	ca1a <usb_write+0xe>
}
    ca36:	4620      	mov	r0, r4
    ca38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000ca3c <usb_get_dev_data_by_cfg>:
	return list->head;
    ca3c:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    ca3e:	b140      	cbz	r0, ca52 <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    ca40:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
    ca44:	685b      	ldr	r3, [r3, #4]
    ca46:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    ca48:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
    ca4c:	d001      	beq.n	ca52 <usb_get_dev_data_by_cfg+0x16>
	return node->next;
    ca4e:	6840      	ldr	r0, [r0, #4]
    ca50:	e7f5      	b.n	ca3e <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    ca52:	4770      	bx	lr

0000ca54 <usb_get_dev_data_by_iface>:
	return list->head;
    ca54:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    ca56:	b150      	cbz	r0, ca6e <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    ca58:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
    ca5c:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    ca5e:	685b      	ldr	r3, [r3, #4]
    ca60:	789b      	ldrb	r3, [r3, #2]
    ca62:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    ca64:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
    ca68:	d001      	beq.n	ca6e <usb_get_dev_data_by_iface+0x1a>
	return node->next;
    ca6a:	6840      	ldr	r0, [r0, #4]
    ca6c:	e7f3      	b.n	ca56 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    ca6e:	4770      	bx	lr

0000ca70 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    ca70:	b530      	push	{r4, r5, lr}
	return list->head;
    ca72:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    ca74:	b188      	cbz	r0, ca9a <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    ca76:	f850 3c04 	ldr.w	r3, [r0, #-4]
    ca7a:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    ca7c:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    ca7e:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    ca80:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    ca82:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    ca84:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    ca86:	b2dc      	uxtb	r4, r3
    ca88:	42a5      	cmp	r5, r4
    ca8a:	d801      	bhi.n	ca90 <usb_get_dev_data_by_ep+0x20>
	return node->next;
    ca8c:	6840      	ldr	r0, [r0, #4]
    ca8e:	e7f1      	b.n	ca74 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    ca90:	3301      	adds	r3, #1
    ca92:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    ca96:	428c      	cmp	r4, r1
    ca98:	d1f5      	bne.n	ca86 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    ca9a:	bd30      	pop	{r4, r5, pc}

0000ca9c <z_do_kernel_oops>:
 *
 * @param esf exception frame
 * @param callee_regs Callee-saved registers (R4-R11)
 */
void z_do_kernel_oops(const z_arch_esf_t *esf, _callee_saved_t *callee_regs)
{
    ca9c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    ca9e:	6800      	ldr	r0, [r0, #0]
    caa0:	f7f7 beb2 	b.w	4808 <z_arm_fatal_error>

0000caa4 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    caa4:	2100      	movs	r1, #0
    caa6:	2001      	movs	r0, #1
    caa8:	f7f7 beae 	b.w	4808 <z_arm_fatal_error>

0000caac <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    caac:	b508      	push	{r3, lr}
	handler();
    caae:	f7f7 ff69 	bl	4984 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    cab2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    cab6:	f7f8 b83b 	b.w	4b30 <z_arm_exc_exit>

0000caba <z_log_msg_static_create.constprop.0>:
	z_impl_z_log_msg_static_create(source, desc, package, data);
    caba:	2300      	movs	r3, #0
    cabc:	f7f6 bae0 	b.w	3080 <z_impl_z_log_msg_static_create>

0000cac0 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    cac0:	3901      	subs	r1, #1
    cac2:	4603      	mov	r3, r0
    cac4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    cac8:	b90a      	cbnz	r2, cace <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    caca:	701a      	strb	r2, [r3, #0]

	return dest;
}
    cacc:	4770      	bx	lr
		*d = *s;
    cace:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    cad2:	e7f7      	b.n	cac4 <strcpy+0x4>

0000cad4 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    cad4:	4603      	mov	r3, r0
	size_t n = 0;
    cad6:	2000      	movs	r0, #0

	while (*s != '\0') {
    cad8:	5c1a      	ldrb	r2, [r3, r0]
    cada:	b902      	cbnz	r2, cade <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    cadc:	4770      	bx	lr
		n++;
    cade:	3001      	adds	r0, #1
    cae0:	e7fa      	b.n	cad8 <strlen+0x4>

0000cae2 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    cae2:	4603      	mov	r3, r0
	size_t n = 0;
    cae4:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    cae6:	5c1a      	ldrb	r2, [r3, r0]
    cae8:	b10a      	cbz	r2, caee <strnlen+0xc>
    caea:	4288      	cmp	r0, r1
    caec:	d100      	bne.n	caf0 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    caee:	4770      	bx	lr
		n++;
    caf0:	3001      	adds	r0, #1
    caf2:	e7f8      	b.n	cae6 <strnlen+0x4>

0000caf4 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    caf4:	1e43      	subs	r3, r0, #1
    caf6:	3901      	subs	r1, #1
    caf8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    cafc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    cb00:	4282      	cmp	r2, r0
    cb02:	d101      	bne.n	cb08 <strcmp+0x14>
    cb04:	2a00      	cmp	r2, #0
    cb06:	d1f7      	bne.n	caf8 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    cb08:	1a10      	subs	r0, r2, r0
    cb0a:	4770      	bx	lr

0000cb0c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    cb0c:	b510      	push	{r4, lr}
    cb0e:	1e43      	subs	r3, r0, #1
    cb10:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    cb12:	4291      	cmp	r1, r2
    cb14:	d100      	bne.n	cb18 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    cb16:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    cb18:	f811 4b01 	ldrb.w	r4, [r1], #1
    cb1c:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    cb20:	e7f7      	b.n	cb12 <memcpy+0x6>

0000cb22 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    cb22:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    cb24:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    cb26:	4603      	mov	r3, r0
	while (n > 0) {
    cb28:	4293      	cmp	r3, r2
    cb2a:	d100      	bne.n	cb2e <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    cb2c:	4770      	bx	lr
		*(d_byte++) = c_byte;
    cb2e:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    cb32:	e7f9      	b.n	cb28 <memset+0x6>

0000cb34 <_stdout_hook_default>:
}
    cb34:	f04f 30ff 	mov.w	r0, #4294967295
    cb38:	4770      	bx	lr

0000cb3a <nordicsemi_nrf52_init>:
	__asm__ volatile(
    cb3a:	f04f 0240 	mov.w	r2, #64	; 0x40
    cb3e:	f3ef 8311 	mrs	r3, BASEPRI
    cb42:	f382 8812 	msr	BASEPRI_MAX, r2
    cb46:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    cb4a:	f383 8811 	msr	BASEPRI, r3
    cb4e:	f3bf 8f6f 	isb	sy
}
    cb52:	2000      	movs	r0, #0
    cb54:	4770      	bx	lr

0000cb56 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    cb56:	2806      	cmp	r0, #6
    cb58:	d108      	bne.n	cb6c <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    cb5a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cb5e:	2201      	movs	r2, #1
    cb60:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    cb64:	f3bf 8f4f 	dsb	sy
        __WFE();
    cb68:	bf20      	wfe
    while (true)
    cb6a:	e7fd      	b.n	cb68 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    cb6c:	4770      	bx	lr

0000cb6e <pm_state_exit_post_ops>:
    cb6e:	2300      	movs	r3, #0
    cb70:	f383 8811 	msr	BASEPRI, r3
    cb74:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    cb78:	4770      	bx	lr

0000cb7a <hid_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    cb7a:	7081      	strb	r1, [r0, #2]
}
    cb7c:	4770      	bx	lr

0000cb7e <usb_hid_device_init>:
static int usb_hid_device_init(const struct device *dev)
{
	LOG_DBG("Init HID Device: dev %p (%s)", dev, dev->name);

	return 0;
}
    cb7e:	2000      	movs	r0, #0
    cb80:	4770      	bx	lr

0000cb82 <z_log_msg_static_create.constprop.0>:
    cb82:	2300      	movs	r3, #0
    cb84:	f7f6 ba7c 	b.w	3080 <z_impl_z_log_msg_static_create>

0000cb88 <usb_hid_init>:
	usb_set_hid_report_size(cfg, dev_data->report_size);
    cb88:	6903      	ldr	r3, [r0, #16]
    cb8a:	6842      	ldr	r2, [r0, #4]
    cb8c:	685b      	ldr	r3, [r3, #4]
    cb8e:	6852      	ldr	r2, [r2, #4]
	dst[0] = val;
    cb90:	7413      	strb	r3, [r2, #16]
	dst[1] = val >> 8;
    cb92:	f3c3 2307 	ubfx	r3, r3, #8, #8
    cb96:	7453      	strb	r3, [r2, #17]
}
    cb98:	2000      	movs	r0, #0
    cb9a:	4770      	bx	lr

0000cb9c <ep_ctx_reset>:
{
    cb9c:	b510      	push	{r4, lr}
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    cb9e:	6903      	ldr	r3, [r0, #16]
	ep_ctx->buf.curr = ep_ctx->buf.data;
    cba0:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    cba4:	2300      	movs	r3, #0
    cba6:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    cba8:	7f83      	ldrb	r3, [r0, #30]
{
    cbaa:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    cbac:	b113      	cbz	r3, cbb4 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    cbae:	7a40      	ldrb	r0, [r0, #9]
    cbb0:	f000 fb68 	bl	d284 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    cbb4:	2301      	movs	r3, #1
    cbb6:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    cbb8:	2300      	movs	r3, #0
    cbba:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    cbbc:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    cbbe:	77a3      	strb	r3, [r4, #30]
}
    cbc0:	bd10      	pop	{r4, pc}

0000cbc2 <z_log_msg_static_create.constprop.0>:
    cbc2:	2300      	movs	r3, #0
    cbc4:	f7f6 ba5c 	b.w	3080 <z_impl_z_log_msg_static_create>

0000cbc8 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    cbc8:	f7fd bf90 	b.w	aaec <z_impl_k_mutex_lock>

0000cbcc <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    cbcc:	f7fe b808 	b.w	abe0 <z_impl_k_mutex_unlock>

0000cbd0 <usb_dc_ep_disable>:
{
    cbd0:	b538      	push	{r3, r4, r5, lr}
    cbd2:	4604      	mov	r4, r0
	ep_ctx = endpoint_ctx(ep);
    cbd4:	f7f8 fdee 	bl	57b4 <endpoint_ctx>
	if (!ep_ctx) {
    cbd8:	4605      	mov	r5, r0
    cbda:	b160      	cbz	r0, cbf6 <usb_dc_ep_disable+0x26>
	if (!ep_ctx->cfg.en) {
    cbdc:	7a03      	ldrb	r3, [r0, #8]
    cbde:	b16b      	cbz	r3, cbfc <usb_dc_ep_disable+0x2c>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    cbe0:	4620      	mov	r0, r4
	ep_ctx->write_in_progress = false;
    cbe2:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    cbe4:	f7fd fb86 	bl	a2f4 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    cbe8:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    cbea:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    cbec:	f7ff ffd6 	bl	cb9c <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    cbf0:	722c      	strb	r4, [r5, #8]
	return 0;
    cbf2:	4620      	mov	r0, r4
}
    cbf4:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    cbf6:	f06f 0015 	mvn.w	r0, #21
    cbfa:	e7fb      	b.n	cbf4 <usb_dc_ep_disable+0x24>
		return -EALREADY;
    cbfc:	f06f 0077 	mvn.w	r0, #119	; 0x77
    cc00:	e7f8      	b.n	cbf4 <usb_dc_ep_disable+0x24>

0000cc02 <usb_dc_ep_read>:
{
    cc02:	b570      	push	{r4, r5, r6, lr}
    cc04:	4604      	mov	r4, r0
    cc06:	460e      	mov	r6, r1
    cc08:	4615      	mov	r5, r2
	ret = usb_dc_ep_read_wait(ep, data, max_data_len, read_bytes);
    cc0a:	f7f9 fc03 	bl	6414 <usb_dc_ep_read_wait>
	if (ret) {
    cc0e:	b930      	cbnz	r0, cc1e <usb_dc_ep_read+0x1c>
	if (!data && !max_data_len) {
    cc10:	b906      	cbnz	r6, cc14 <usb_dc_ep_read+0x12>
    cc12:	b125      	cbz	r5, cc1e <usb_dc_ep_read+0x1c>
	ret = usb_dc_ep_read_continue(ep);
    cc14:	4620      	mov	r0, r4
}
    cc16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ret = usb_dc_ep_read_continue(ep);
    cc1a:	f7f9 bc61 	b.w	64e0 <usb_dc_ep_read_continue>
}
    cc1e:	bd70      	pop	{r4, r5, r6, pc}

0000cc20 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    cc20:	6903      	ldr	r3, [r0, #16]
    cc22:	b2c9      	uxtb	r1, r1
    cc24:	220c      	movs	r2, #12
    cc26:	fb01 3302 	mla	r3, r1, r2, r3
    cc2a:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    cc2c:	f000 0007 	and.w	r0, r0, #7
    cc30:	4770      	bx	lr

0000cc32 <set_on_state>:
	__asm__ volatile(
    cc32:	f04f 0340 	mov.w	r3, #64	; 0x40
    cc36:	f3ef 8211 	mrs	r2, BASEPRI
    cc3a:	f383 8812 	msr	BASEPRI_MAX, r3
    cc3e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    cc42:	6803      	ldr	r3, [r0, #0]
    cc44:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    cc48:	f043 0302 	orr.w	r3, r3, #2
    cc4c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    cc4e:	f382 8811 	msr	BASEPRI, r2
    cc52:	f3bf 8f6f 	isb	sy
}
    cc56:	4770      	bx	lr

0000cc58 <stop>:
{
    cc58:	b570      	push	{r4, r5, r6, lr}
    cc5a:	b2c9      	uxtb	r1, r1
	struct nrf_clock_control_data *data = dev->data;
    cc5c:	6903      	ldr	r3, [r0, #16]
	__asm__ volatile(
    cc5e:	f04f 0440 	mov.w	r4, #64	; 0x40
    cc62:	f3ef 8511 	mrs	r5, BASEPRI
    cc66:	f384 8812 	msr	BASEPRI_MAX, r4
    cc6a:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    cc6e:	260c      	movs	r6, #12
    cc70:	fb06 3401 	mla	r4, r6, r1, r3
    cc74:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    cc76:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    cc7a:	d008      	beq.n	cc8e <stop+0x36>
    cc7c:	42a2      	cmp	r2, r4
    cc7e:	d006      	beq.n	cc8e <stop+0x36>
	__asm__ volatile(
    cc80:	f385 8811 	msr	BASEPRI, r5
    cc84:	f3bf 8f6f 	isb	sy
		err = -EPERM;
    cc88:	f04f 30ff 	mov.w	r0, #4294967295
}
    cc8c:	bd70      	pop	{r4, r5, r6, pc}
		*flags = CLOCK_CONTROL_STATUS_OFF;
    cc8e:	4371      	muls	r1, r6
    cc90:	440b      	add	r3, r1
    cc92:	2201      	movs	r2, #1
    cc94:	641a      	str	r2, [r3, #64]	; 0x40
    cc96:	f385 8811 	msr	BASEPRI, r5
    cc9a:	f3bf 8f6f 	isb	sy
	get_sub_config(dev, type)->stop();
    cc9e:	6843      	ldr	r3, [r0, #4]
    cca0:	440b      	add	r3, r1
    cca2:	685b      	ldr	r3, [r3, #4]
    cca4:	4798      	blx	r3
	return 0;
    cca6:	2000      	movs	r0, #0
    cca8:	e7f0      	b.n	cc8c <stop+0x34>

0000ccaa <api_stop>:
	return stop(dev, subsys, CTX_API);
    ccaa:	2280      	movs	r2, #128	; 0x80
    ccac:	f7ff bfd4 	b.w	cc58 <stop>

0000ccb0 <async_start>:
{
    ccb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ccb2:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    ccb4:	6904      	ldr	r4, [r0, #16]
	return &data->subsys[type];
    ccb6:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    ccb8:	f04f 0540 	mov.w	r5, #64	; 0x40
    ccbc:	f3ef 8611 	mrs	r6, BASEPRI
    ccc0:	f385 8812 	msr	BASEPRI_MAX, r5
    ccc4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    ccc8:	250c      	movs	r5, #12
    ccca:	4369      	muls	r1, r5
    cccc:	440c      	add	r4, r1
    ccce:	6c25      	ldr	r5, [r4, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    ccd0:	f005 0c07 	and.w	ip, r5, #7
    ccd4:	f1bc 0f01 	cmp.w	ip, #1
    ccd8:	d10b      	bne.n	ccf2 <async_start+0x42>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    ccda:	6427      	str	r7, [r4, #64]	; 0x40
	__asm__ volatile(
    ccdc:	f386 8811 	msr	BASEPRI, r6
    cce0:	f3bf 8f6f 	isb	sy
	subdata->user_data = user_data;
    cce4:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    cce8:	6843      	ldr	r3, [r0, #4]
    ccea:	585b      	ldr	r3, [r3, r1]
    ccec:	4798      	blx	r3
	return 0;
    ccee:	2000      	movs	r0, #0
}
    ccf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    ccf2:	f005 05c0 	and.w	r5, r5, #192	; 0xc0
	} else if (current_ctx != ctx) {
    ccf6:	42af      	cmp	r7, r5
    ccf8:	f386 8811 	msr	BASEPRI, r6
    ccfc:	f3bf 8f6f 	isb	sy
		err = -EALREADY;
    cd00:	bf0c      	ite	eq
    cd02:	f06f 0077 	mvneq.w	r0, #119	; 0x77
		err = -EPERM;
    cd06:	f04f 30ff 	movne.w	r0, #4294967295
    cd0a:	e7f1      	b.n	ccf0 <async_start+0x40>

0000cd0c <api_start>:
{
    cd0c:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    cd0e:	2480      	movs	r4, #128	; 0x80
    cd10:	9400      	str	r4, [sp, #0]
    cd12:	f7ff ffcd 	bl	ccb0 <async_start>
}
    cd16:	b002      	add	sp, #8
    cd18:	bd10      	pop	{r4, pc}

0000cd1a <onoff_started_callback>:
{
    cd1a:	b410      	push	{r4}
	return &data->mgr[type];
    cd1c:	6900      	ldr	r0, [r0, #16]
    cd1e:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    cd20:	241c      	movs	r4, #28
    cd22:	fb03 0004 	mla	r0, r3, r4, r0
    cd26:	2100      	movs	r1, #0
}
    cd28:	bc10      	pop	{r4}
	notify(mgr, 0);
    cd2a:	4710      	bx	r2

0000cd2c <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    cd2c:	2000      	movs	r0, #0
    cd2e:	f000 b97d 	b.w	d02c <nrfx_clock_start>

0000cd32 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    cd32:	2000      	movs	r0, #0
    cd34:	f000 b9b5 	b.w	d0a2 <nrfx_clock_stop>

0000cd38 <blocking_start_callback>:
{
    cd38:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    cd3a:	f7fd bfc1 	b.w	acc0 <z_impl_k_sem_give>

0000cd3e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    cd3e:	6843      	ldr	r3, [r0, #4]
    cd40:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    cd42:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    cd46:	600b      	str	r3, [r1, #0]
}
    cd48:	2000      	movs	r0, #0
    cd4a:	4770      	bx	lr

0000cd4c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    cd4c:	6843      	ldr	r3, [r0, #4]
    cd4e:	685b      	ldr	r3, [r3, #4]
	const uint32_t set_mask = value & mask;
    cd50:	ea02 0001 	and.w	r0, r2, r1
	const uint32_t clear_mask = (~set_mask) & mask;
    cd54:	ea21 0102 	bic.w	r1, r1, r2
    p_reg->OUTSET = set_mask;
    cd58:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    cd5c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
}
    cd60:	2000      	movs	r0, #0
    cd62:	4770      	bx	lr

0000cd64 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    cd64:	6843      	ldr	r3, [r0, #4]
    cd66:	685b      	ldr	r3, [r3, #4]
}
    cd68:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    cd6a:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    cd6e:	4770      	bx	lr

0000cd70 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    cd70:	6843      	ldr	r3, [r0, #4]
    cd72:	685b      	ldr	r3, [r3, #4]
}
    cd74:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    cd76:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    cd7a:	4770      	bx	lr

0000cd7c <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    cd7c:	6843      	ldr	r3, [r0, #4]
    cd7e:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    cd80:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	const uint32_t set_mask = value & mask;
    cd84:	ea21 0003 	bic.w	r0, r1, r3
	const uint32_t clear_mask = (~value) & mask;
    cd88:	400b      	ands	r3, r1
    p_reg->OUTSET = set_mask;
    cd8a:	f8c2 0508 	str.w	r0, [r2, #1288]	; 0x508
    p_reg->OUTCLR = clr_mask;
    cd8e:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    cd92:	2000      	movs	r0, #0
    cd94:	4770      	bx	lr

0000cd96 <gpio_nrfx_manage_callback>:
{
    cd96:	b510      	push	{r4, lr}
	return port->data;
    cd98:	6903      	ldr	r3, [r0, #16]
	return list->head;
    cd9a:	6858      	ldr	r0, [r3, #4]
	if (!sys_slist_is_empty(callbacks)) {
    cd9c:	b1f8      	cbz	r0, cdde <gpio_nrfx_manage_callback+0x48>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    cd9e:	4288      	cmp	r0, r1
    cda0:	d119      	bne.n	cdd6 <gpio_nrfx_manage_callback+0x40>
Z_GENLIST_REMOVE(slist, snode)
    cda2:	689c      	ldr	r4, [r3, #8]
	return node->next;
    cda4:	6808      	ldr	r0, [r1, #0]
	list->head = node;
    cda6:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    cda8:	42a1      	cmp	r1, r4
    cdaa:	d100      	bne.n	cdae <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    cdac:	6098      	str	r0, [r3, #8]
	parent->next = child;
    cdae:	2000      	movs	r0, #0
    cdb0:	6008      	str	r0, [r1, #0]
	if (set) {
    cdb2:	b12a      	cbz	r2, cdc0 <gpio_nrfx_manage_callback+0x2a>
	return list->head;
    cdb4:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
    cdb6:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
    cdb8:	689a      	ldr	r2, [r3, #8]
	list->head = node;
    cdba:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    cdbc:	b902      	cbnz	r2, cdc0 <gpio_nrfx_manage_callback+0x2a>
	list->tail = node;
    cdbe:	6099      	str	r1, [r3, #8]
	return 0;
    cdc0:	2000      	movs	r0, #0
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    cdc2:	e010      	b.n	cde6 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    cdc4:	4281      	cmp	r1, r0
    cdc6:	d106      	bne.n	cdd6 <gpio_nrfx_manage_callback+0x40>
	return node->next;
    cdc8:	6808      	ldr	r0, [r1, #0]
	parent->next = child;
    cdca:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
    cdcc:	6898      	ldr	r0, [r3, #8]
    cdce:	4281      	cmp	r1, r0
    cdd0:	d1ed      	bne.n	cdae <gpio_nrfx_manage_callback+0x18>
	list->tail = node;
    cdd2:	609c      	str	r4, [r3, #8]
}
    cdd4:	e7eb      	b.n	cdae <gpio_nrfx_manage_callback+0x18>
	return node->next;
    cdd6:	4604      	mov	r4, r0
    cdd8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    cdda:	2800      	cmp	r0, #0
    cddc:	d1f2      	bne.n	cdc4 <gpio_nrfx_manage_callback+0x2e>
			if (!set) {
    cdde:	2a00      	cmp	r2, #0
    cde0:	d1e8      	bne.n	cdb4 <gpio_nrfx_manage_callback+0x1e>
				return -EINVAL;
    cde2:	f06f 0015 	mvn.w	r0, #21
}
    cde6:	bd10      	pop	{r4, pc}

0000cde8 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    cde8:	b513      	push	{r0, r1, r4, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    cdea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);

	if (length > sizeof(dev_id.id)) {
    cdee:	2908      	cmp	r1, #8
    cdf0:	6e13      	ldr	r3, [r2, #96]	; 0x60
    cdf2:	6e52      	ldr	r2, [r2, #100]	; 0x64
    cdf4:	bf28      	it	cs
    cdf6:	2108      	movcs	r1, #8
    cdf8:	ba12      	rev	r2, r2
	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    cdfa:	9200      	str	r2, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    cdfc:	ba1b      	rev	r3, r3
	if (length > sizeof(dev_id.id)) {
    cdfe:	460c      	mov	r4, r1
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    ce00:	460a      	mov	r2, r1
    ce02:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    ce04:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    ce06:	f7ff fe81 	bl	cb0c <memcpy>

	return length;
}
    ce0a:	4620      	mov	r0, r4
    ce0c:	b002      	add	sp, #8
    ce0e:	bd10      	pop	{r4, pc}

0000ce10 <pinctrl_lookup_state>:

#include <zephyr/drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    ce10:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    ce12:	6843      	ldr	r3, [r0, #4]
    ce14:	6013      	str	r3, [r2, #0]
	while (*state < &config->states[config->state_cnt]) {
    ce16:	7a05      	ldrb	r5, [r0, #8]
    ce18:	6844      	ldr	r4, [r0, #4]
    ce1a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
    ce1e:	42a3      	cmp	r3, r4
    ce20:	d302      	bcc.n	ce28 <pinctrl_lookup_state+0x18>
		}

		(*state)++;
	}

	return -ENOENT;
    ce22:	f06f 0001 	mvn.w	r0, #1
}
    ce26:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    ce28:	795c      	ldrb	r4, [r3, #5]
    ce2a:	428c      	cmp	r4, r1
    ce2c:	d001      	beq.n	ce32 <pinctrl_lookup_state+0x22>
		(*state)++;
    ce2e:	3308      	adds	r3, #8
    ce30:	e7f0      	b.n	ce14 <pinctrl_lookup_state+0x4>
			return 0;
    ce32:	2000      	movs	r0, #0
    ce34:	e7f7      	b.n	ce26 <pinctrl_lookup_state+0x16>

0000ce36 <pinctrl_configure_pins>:
#define NRF_PSEL_QSPI(reg, line) ((NRF_QSPI_Type *)reg)->PSEL.line
#endif

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    ce36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ce3a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    ce3e:	2701      	movs	r7, #1
    p_reg->OUTCLR = clr_mask;
    ce40:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    ce44:	4281      	cmp	r1, r0
    ce46:	d101      	bne.n	ce4c <pinctrl_configure_pins+0x16>
			nrf_gpio_cfg(pin, dir, input, NRF_GET_PULL(pins[i]),
				     drive, NRF_GPIO_PIN_NOSENSE);
		}
	}

	return 0;
    ce48:	2000      	movs	r0, #0
    ce4a:	e015      	b.n	ce78 <pinctrl_configure_pins+0x42>
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    ce4c:	6804      	ldr	r4, [r0, #0]
		uint32_t pin = NRF_GET_PIN(pins[i]);
    ce4e:	f004 037f 	and.w	r3, r4, #127	; 0x7f
			pin = 0xFFFFFFFFU;
    ce52:	2b7f      	cmp	r3, #127	; 0x7f
		nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    ce54:	f3c4 2543 	ubfx	r5, r4, #9, #4
		switch (NRF_GET_FUN(pins[i])) {
    ce58:	ea4f 4414 	mov.w	r4, r4, lsr #16
			pin = 0xFFFFFFFFU;
    ce5c:	bf08      	it	eq
    ce5e:	f04f 33ff 	moveq.w	r3, #4294967295
		switch (NRF_GET_FUN(pins[i])) {
    ce62:	2c1a      	cmp	r4, #26
    ce64:	d045      	beq.n	cef2 <pinctrl_configure_pins+0xbc>
    ce66:	d809      	bhi.n	ce7c <pinctrl_configure_pins+0x46>
    ce68:	2c05      	cmp	r4, #5
    ce6a:	d01b      	beq.n	cea4 <pinctrl_configure_pins+0x6e>
    ce6c:	2c06      	cmp	r4, #6
    ce6e:	d01e      	beq.n	ceae <pinctrl_configure_pins+0x78>
    ce70:	2c04      	cmp	r4, #4
    ce72:	d00a      	beq.n	ce8a <pinctrl_configure_pins+0x54>
    ce74:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    ce78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (NRF_GET_FUN(pins[i])) {
    ce7c:	2c1b      	cmp	r4, #27
    ce7e:	d03b      	beq.n	cef8 <pinctrl_configure_pins+0xc2>
    ce80:	2c1c      	cmp	r4, #28
    ce82:	d1f7      	bne.n	ce74 <pinctrl_configure_pins+0x3e>
			NRF_PSEL_QDEC(reg, LED) = pin;
    ce84:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
			if (write != NO_WRITE) {
    ce88:	e013      	b.n	ceb2 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_SPIM(reg, SCK) = pin;
    ce8a:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    ce8e:	f04f 0c00 	mov.w	ip, #0
    *p_pin = pin_number & 0x1F;
    ce92:	f003 041f 	and.w	r4, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    ce96:	fa07 f404 	lsl.w	r4, r7, r4
    p_reg->OUTCLR = clr_mask;
    ce9a:	f8c6 450c 	str.w	r4, [r6, #1292]	; 0x50c
}
    ce9e:	f04f 0e01 	mov.w	lr, #1
    cea2:	e009      	b.n	ceb8 <pinctrl_configure_pins+0x82>
			NRF_PSEL_SPIM(reg, MOSI) = pin;
    cea4:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
			input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    cea8:	f04f 0c01 	mov.w	ip, #1
    ceac:	e7f1      	b.n	ce92 <pinctrl_configure_pins+0x5c>
			NRF_PSEL_SPIM(reg, MISO) = pin;
    ceae:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
			input = NRF_GPIO_PIN_INPUT_CONNECT;
    ceb2:	f04f 0c00 	mov.w	ip, #0
			dir = NRF_GPIO_PIN_DIR_INPUT;
    ceb6:	46e6      	mov	lr, ip
			if (NRF_GET_LP(pins[i]) == NRF_LP_ENABLE) {
    ceb8:	f850 4b04 	ldr.w	r4, [r0], #4
    cebc:	f404 5800 	and.w	r8, r4, #8192	; 0x2000
				input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    cec0:	f1b8 0f00 	cmp.w	r8, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    cec4:	f3c4 18c1 	ubfx	r8, r4, #7, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    cec8:	ea4f 2405 	mov.w	r4, r5, lsl #8
    cecc:	bf18      	it	ne
    cece:	f04f 0e00 	movne.w	lr, #0
    *p_pin = pin_number & 0x1F;
    ced2:	f003 031f 	and.w	r3, r3, #31
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    ced6:	ea44 0488 	orr.w	r4, r4, r8, lsl #2
    ceda:	bf18      	it	ne
    cedc:	f04f 0c01 	movne.w	ip, #1
    cee0:	ea44 040e 	orr.w	r4, r4, lr
    reg->PIN_CNF[pin_number] = cnf;
    cee4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    cee8:	ea44 044c 	orr.w	r4, r4, ip, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    ceec:	f846 4023 	str.w	r4, [r6, r3, lsl #2]
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    cef0:	e7a8      	b.n	ce44 <pinctrl_configure_pins+0xe>
			NRF_PSEL_QDEC(reg, A) = pin;
    cef2:	f8c2 3520 	str.w	r3, [r2, #1312]	; 0x520
			if (write != NO_WRITE) {
    cef6:	e7dc      	b.n	ceb2 <pinctrl_configure_pins+0x7c>
			NRF_PSEL_QDEC(reg, B) = pin;
    cef8:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
			if (write != NO_WRITE) {
    cefc:	e7d9      	b.n	ceb2 <pinctrl_configure_pins+0x7c>

0000cefe <qdec_nrfx_sample_fetch>:
	if ((chan != SENSOR_CHAN_ALL) && (chan != SENSOR_CHAN_ROTATION)) {
    cefe:	2939      	cmp	r1, #57	; 0x39
{
    cf00:	b507      	push	{r0, r1, r2, lr}
	if ((chan != SENSOR_CHAN_ALL) && (chan != SENSOR_CHAN_ROTATION)) {
    cf02:	d001      	beq.n	cf08 <qdec_nrfx_sample_fetch+0xa>
    cf04:	2922      	cmp	r1, #34	; 0x22
    cf06:	d10c      	bne.n	cf22 <qdec_nrfx_sample_fetch+0x24>
	nrfx_qdec_accumulators_read(&acc, &accdbl);
    cf08:	f10d 0106 	add.w	r1, sp, #6
    cf0c:	a801      	add	r0, sp, #4
    cf0e:	f7fc f97f 	bl	9210 <nrfx_qdec_accumulators_read>
	accumulate(data, acc);
    cf12:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
    cf16:	f7f9 fe59 	bl	6bcc <accumulate.constprop.0>
	return 0;
    cf1a:	2000      	movs	r0, #0
}
    cf1c:	b003      	add	sp, #12
    cf1e:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENOTSUP;
    cf22:	f06f 0085 	mvn.w	r0, #133	; 0x85
    cf26:	e7f9      	b.n	cf1c <qdec_nrfx_sample_fetch+0x1e>

0000cf28 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    cf28:	4770      	bx	lr

0000cf2a <event_clear>:
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    cf2a:	f100 0350 	add.w	r3, r0, #80	; 0x50
    cf2e:	009b      	lsls	r3, r3, #2
    cf30:	b29b      	uxth	r3, r3
    cf32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    cf36:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    cf3a:	2200      	movs	r2, #0
    cf3c:	601a      	str	r2, [r3, #0]
    cf3e:	681b      	ldr	r3, [r3, #0]
}
    cf40:	4770      	bx	lr

0000cf42 <sys_clock_cycle_get_32>:
{
    cf42:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    cf44:	f7fa f806 	bl	6f54 <z_nrf_rtc_timer_read>
}
    cf48:	bd08      	pop	{r3, pc}

0000cf4a <bytewise_bit_swap>:
	uint32_t inp = (*(uint32_t *)input);
    cf4a:	6803      	ldr	r3, [r0, #0]
   __ASM ("rbit %0, %1" : "=r" (result) : "r" (value) );
    cf4c:	fa93 f3a3 	rbit	r3, r3
	return sys_cpu_to_be32((uint32_t)__RBIT(inp));
    cf50:	0618      	lsls	r0, r3, #24
    cf52:	0a1a      	lsrs	r2, r3, #8
    cf54:	ea40 6013 	orr.w	r0, r0, r3, lsr #24
    cf58:	f402 427f 	and.w	r2, r2, #65280	; 0xff00
    cf5c:	021b      	lsls	r3, r3, #8
    cf5e:	4310      	orrs	r0, r2
    cf60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
}
    cf64:	4318      	orrs	r0, r3
    cf66:	4770      	bx	lr

0000cf68 <mpsl_fem_api_init>:

#include <mpsl_fem_init.h>
#include <zephyr/device.h>

static int mpsl_fem_api_init(void)
{
    cf68:	b508      	push	{r3, lr}

	mpsl_fem_init();
    cf6a:	f7f3 fb92 	bl	692 <mpsl_fem_init>

	return 0;
}
    cf6e:	2000      	movs	r0, #0
    cf70:	bd08      	pop	{r3, pc}

0000cf72 <nrfx_isr>:
#include <zephyr/kernel.h>
#include <soc/nrfx_coredep.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    cf72:	4700      	bx	r0

0000cf74 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    cf74:	f000 bc89 	b.w	d88a <z_impl_k_busy_wait>

0000cf78 <clock_stop>:
{
    cf78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    cf7a:	4604      	mov	r4, r0
    cf7c:	b118      	cbz	r0, cf86 <clock_stop+0xe>
    cf7e:	2801      	cmp	r0, #1
    cf80:	d020      	beq.n	cfc4 <clock_stop+0x4c>
}
    cf82:	b003      	add	sp, #12
    cf84:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cf86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    cf8a:	2202      	movs	r2, #2
    cf8c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cf90:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    cf94:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cf98:	2201      	movs	r2, #1
    cf9a:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    cf9c:	4607      	mov	r7, r0
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    cf9e:	2301      	movs	r3, #1
    cfa0:	f88d 3007 	strb.w	r3, [sp, #7]
    cfa4:	f242 7510 	movw	r5, #10000	; 0x2710
    cfa8:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    cfac:	b1bc      	cbz	r4, cfde <clock_stop+0x66>
    cfae:	2c01      	cmp	r4, #1
    cfb0:	d1e7      	bne.n	cf82 <clock_stop+0xa>
            if (p_clk_src != NULL)
    cfb2:	b38f      	cbz	r7, d018 <clock_stop+0xa0>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    cfb4:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    cfb8:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    cfbc:	703b      	strb	r3, [r7, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    cfbe:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    cfc2:	e014      	b.n	cfee <clock_stop+0x76>
    p_reg->INTENCLR = mask;
    cfc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cfc8:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    cfca:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    cfce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    cfd2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    cfd6:	6058      	str	r0, [r3, #4]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    cfd8:	f10d 0707 	add.w	r7, sp, #7
    cfdc:	e7df      	b.n	cf9e <clock_stop+0x26>
            if (p_clk_src != NULL)
    cfde:	b18f      	cbz	r7, d004 <clock_stop+0x8c>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    cfe0:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    cfe4:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    cfe8:	603b      	str	r3, [r7, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    cfea:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    cfee:	03da      	lsls	r2, r3, #15
    cff0:	d5c7      	bpl.n	cf82 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    cff2:	f89d 0007 	ldrb.w	r0, [sp, #7]
    cff6:	2801      	cmp	r0, #1
    cff8:	d1c3      	bne.n	cf82 <clock_stop+0xa>
    cffa:	f7ff ffbb 	bl	cf74 <nrfx_busy_wait>
    cffe:	3d01      	subs	r5, #1
    d000:	d1d4      	bne.n	cfac <clock_stop+0x34>
    d002:	e7be      	b.n	cf82 <clock_stop+0xa>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d004:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    d008:	03d9      	lsls	r1, r3, #15
    d00a:	d5ba      	bpl.n	cf82 <clock_stop+0xa>
    d00c:	2001      	movs	r0, #1
    d00e:	f7ff ffb1 	bl	cf74 <nrfx_busy_wait>
    d012:	3d01      	subs	r5, #1
    d014:	d1f6      	bne.n	d004 <clock_stop+0x8c>
    d016:	e7b4      	b.n	cf82 <clock_stop+0xa>
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    d018:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    d01c:	03db      	lsls	r3, r3, #15
    d01e:	d5b0      	bpl.n	cf82 <clock_stop+0xa>
    d020:	2001      	movs	r0, #1
    d022:	f7ff ffa7 	bl	cf74 <nrfx_busy_wait>
    d026:	3d01      	subs	r5, #1
    d028:	d1f6      	bne.n	d018 <clock_stop+0xa0>
    d02a:	e7aa      	b.n	cf82 <clock_stop+0xa>

0000d02c <nrfx_clock_start>:
{
    d02c:	b508      	push	{r3, lr}
    switch (domain)
    d02e:	b110      	cbz	r0, d036 <nrfx_clock_start+0xa>
    d030:	2801      	cmp	r0, #1
    d032:	d02b      	beq.n	d08c <nrfx_clock_start+0x60>
}
    d034:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    d036:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d03a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    d03e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    d042:	03c9      	lsls	r1, r1, #15
    d044:	d40c      	bmi.n	d060 <nrfx_clock_start+0x34>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    d046:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    d04a:	07d2      	lsls	r2, r2, #31
    d04c:	d50f      	bpl.n	d06e <nrfx_clock_start+0x42>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    d04e:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
    d052:	f002 0203 	and.w	r2, r2, #3
    if (!is_correct_clk)
    d056:	2a02      	cmp	r2, #2
    d058:	d106      	bne.n	d068 <nrfx_clock_start+0x3c>
    p_reg->INTENSET = mask;
    d05a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    d05e:	e7e9      	b.n	d034 <nrfx_clock_start+0x8>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    d060:	f002 0303 	and.w	r3, r2, #3
    if (!is_correct_clk)
    d064:	2b02      	cmp	r3, #2
    d066:	d002      	beq.n	d06e <nrfx_clock_start+0x42>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    d068:	2000      	movs	r0, #0
    d06a:	f7ff ff85 	bl	cf78 <clock_stop>
    p_reg->LFCLKSRC = (uint32_t)(source);
    d06e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d072:	2202      	movs	r2, #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d074:	2100      	movs	r1, #0
    p_reg->LFCLKSRC = (uint32_t)(source);
    d076:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d07a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
    d07e:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    d082:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d086:	2201      	movs	r2, #1
    d088:	609a      	str	r2, [r3, #8]
}
    d08a:	e7d3      	b.n	d034 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d08c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d090:	2200      	movs	r2, #0
    d092:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    d096:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    d09a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    d09e:	6018      	str	r0, [r3, #0]
}
    d0a0:	e7c8      	b.n	d034 <nrfx_clock_start+0x8>

0000d0a2 <nrfx_clock_stop>:
    clock_stop(domain);
    d0a2:	f7ff bf69 	b.w	cf78 <clock_stop>

0000d0a6 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    d0a6:	f000 001f 	and.w	r0, r0, #31
    d0aa:	0080      	lsls	r0, r0, #2
    d0ac:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    d0b0:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    d0b4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    d0b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    d0bc:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    d0c0:	4770      	bx	lr

0000d0c2 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d0c2:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    d0c6:	681a      	ldr	r2, [r3, #0]
    d0c8:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d0ca:	bf1f      	itttt	ne
    d0cc:	2200      	movne	r2, #0
    d0ce:	601a      	strne	r2, [r3, #0]
    d0d0:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    d0d2:	2001      	movne	r0, #1
    d0d4:	bf08      	it	eq
    d0d6:	2000      	moveq	r0, #0
}
    d0d8:	4770      	bx	lr

0000d0da <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    d0da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d0de:	f44f 7260 	mov.w	r2, #896	; 0x380
    d0e2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    d0e6:	4770      	bx	lr

0000d0e8 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    d0e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    d0ec:	f44f 7260 	mov.w	r2, #896	; 0x380
    d0f0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    d0f4:	4770      	bx	lr

0000d0f6 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    d0f6:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    d0f8:	f7fb ff36 	bl	8f68 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    d0fc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    d100:	f7fb bbaa 	b.w	8858 <nrfx_clock_irq_handler>

0000d104 <nrf_gpio_pin_write>:
    *p_pin = pin_number & 0x1F;
    d104:	f000 001f 	and.w	r0, r0, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    d108:	2301      	movs	r3, #1
    d10a:	4083      	lsls	r3, r0
    d10c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    if (value == 0)
    d110:	b911      	cbnz	r1, d118 <nrf_gpio_pin_write+0x14>
    p_reg->OUTCLR = clr_mask;
    d112:	f8c2 350c 	str.w	r3, [r2, #1292]	; 0x50c
}
    d116:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
    d118:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
}
    d11c:	4770      	bx	lr

0000d11e <set_ss_pin_state>:
{
    d11e:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    d120:	7fc0      	ldrb	r0, [r0, #31]
    d122:	28ff      	cmp	r0, #255	; 0xff
    d124:	d006      	beq.n	d134 <set_ss_pin_state+0x16>
                           p_cb->ss_active_high ? active : !active);
    d126:	7f9b      	ldrb	r3, [r3, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
    d128:	079b      	lsls	r3, r3, #30
    d12a:	bf58      	it	pl
    d12c:	f081 0101 	eorpl.w	r1, r1, #1
    d130:	f7ff bfe8 	b.w	d104 <nrf_gpio_pin_write>
}
    d134:	4770      	bx	lr

0000d136 <nrfx_timer_compare>:
{
    d136:	b570      	push	{r4, r5, r6, lr}
    return (nrf_timer_int_mask_t)
    d138:	f44f 3480 	mov.w	r4, #65536	; 0x10000
        nrf_timer_event_clear(p_instance->p_reg, nrf_timer_compare_event_get(cc_channel));
    d13c:	6805      	ldr	r5, [r0, #0]
    d13e:	408c      	lsls	r4, r1
    if (enable_int)
    d140:	b173      	cbz	r3, d160 <nrfx_timer_compare+0x2a>
    return (nrf_timer_event_t)NRFX_OFFSETOF(NRF_TIMER_Type, EVENTS_COMPARE[channel]);
    d142:	008b      	lsls	r3, r1, #2
    d144:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    d148:	2600      	movs	r6, #0
    d14a:	50ee      	str	r6, [r5, r3]
    d14c:	58eb      	ldr	r3, [r5, r3]
        nrf_timer_int_enable(p_instance->p_reg, timer_int);
    d14e:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENSET = mask;
    d150:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    nrf_timer_cc_set(p_instance->p_reg, cc_channel, cc_value);
    d154:	6803      	ldr	r3, [r0, #0]
    p_reg->CC[cc_channel] = cc_value;
    d156:	f501 71a8 	add.w	r1, r1, #336	; 0x150
    d15a:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
}
    d15e:	bd70      	pop	{r4, r5, r6, pc}
    p_reg->INTENCLR = mask;
    d160:	f8c5 4308 	str.w	r4, [r5, #776]	; 0x308
}
    d164:	e7f6      	b.n	d154 <nrfx_timer_compare+0x1e>

0000d166 <nrfx_usbd_consumer>:
{
    d166:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    d168:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    d16a:	429c      	cmp	r4, r3
    d16c:	d209      	bcs.n	d182 <nrfx_usbd_consumer+0x1c>
        p_next->size = 0;
    d16e:	2500      	movs	r5, #0
    d170:	6045      	str	r5, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    d172:	6809      	ldr	r1, [r1, #0]
    d174:	6001      	str	r1, [r0, #0]
    return (ep_size == data_size) && (size != 0);
    d176:	429a      	cmp	r2, r3
    d178:	d10c      	bne.n	d194 <nrfx_usbd_consumer+0x2e>
    d17a:	1e20      	subs	r0, r4, #0
    d17c:	bf18      	it	ne
    d17e:	2001      	movne	r0, #1
}
    d180:	bd30      	pop	{r4, r5, pc}
        p_next->size = data_size;
    d182:	6043      	str	r3, [r0, #4]
        p_next->p_data = p_transfer->p_data;
    d184:	680d      	ldr	r5, [r1, #0]
    d186:	6005      	str	r5, [r0, #0]
        p_transfer->p_data.addr += data_size;
    d188:	6808      	ldr	r0, [r1, #0]
        size -= data_size;
    d18a:	1ae4      	subs	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    d18c:	4418      	add	r0, r3
        p_transfer->size = size;
    d18e:	604c      	str	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    d190:	6008      	str	r0, [r1, #0]
    d192:	e7f0      	b.n	d176 <nrfx_usbd_consumer+0x10>
    return (ep_size == data_size) && (size != 0);
    d194:	2000      	movs	r0, #0
    d196:	e7f3      	b.n	d180 <nrfx_usbd_consumer+0x1a>

0000d198 <nrfx_usbd_feeder_ram>:
    if (tx_size > ep_size)
    d198:	684b      	ldr	r3, [r1, #4]
    d19a:	429a      	cmp	r2, r3
    d19c:	bf28      	it	cs
    d19e:	461a      	movcs	r2, r3
    p_next->p_data = p_transfer->p_data;
    d1a0:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    d1a2:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    d1a6:	6848      	ldr	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    d1a8:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    d1aa:	1a80      	subs	r0, r0, r2
    d1ac:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    d1ae:	4413      	add	r3, r2
}
    d1b0:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    d1b2:	600b      	str	r3, [r1, #0]
}
    d1b4:	bf18      	it	ne
    d1b6:	2001      	movne	r0, #1
    d1b8:	4770      	bx	lr

0000d1ba <nrfx_usbd_feeder_ram_zlp>:
    if (tx_size > ep_size)
    d1ba:	684b      	ldr	r3, [r1, #4]
    d1bc:	429a      	cmp	r2, r3
    d1be:	bf28      	it	cs
    d1c0:	461a      	movcs	r2, r3
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    d1c2:	b162      	cbz	r2, d1de <nrfx_usbd_feeder_ram_zlp+0x24>
    d1c4:	680b      	ldr	r3, [r1, #0]
    p_next->size = tx_size;
    d1c6:	e9c0 3200 	strd	r3, r2, [r0]
    p_transfer->size -= tx_size;
    d1ca:	684b      	ldr	r3, [r1, #4]
    d1cc:	1a9b      	subs	r3, r3, r2
    d1ce:	604b      	str	r3, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    d1d0:	680b      	ldr	r3, [r1, #0]
}
    d1d2:	1e10      	subs	r0, r2, #0
    p_transfer->p_data.addr += tx_size;
    d1d4:	4413      	add	r3, r2
    d1d6:	600b      	str	r3, [r1, #0]
}
    d1d8:	bf18      	it	ne
    d1da:	2001      	movne	r0, #1
    d1dc:	4770      	bx	lr
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    d1de:	4613      	mov	r3, r2
    d1e0:	e7f1      	b.n	d1c6 <nrfx_usbd_feeder_ram_zlp+0xc>

0000d1e2 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    d1e2:	43c3      	mvns	r3, r0
    d1e4:	f3c3 13c0 	ubfx	r3, r3, #7, #1
    d1e8:	f000 000f 	and.w	r0, r0, #15
}
    d1ec:	eb00 1003 	add.w	r0, r0, r3, lsl #4
    d1f0:	4770      	bx	lr

0000d1f2 <ev_started_handler>:
}
    d1f2:	4770      	bx	lr

0000d1f4 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    d1f4:	2087      	movs	r0, #135	; 0x87
    d1f6:	f7fc bae7 	b.w	97c8 <nrf_usbd_epin_dma_handler>

0000d1fa <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    d1fa:	2086      	movs	r0, #134	; 0x86
    d1fc:	f7fc bae4 	b.w	97c8 <nrf_usbd_epin_dma_handler>

0000d200 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    d200:	2085      	movs	r0, #133	; 0x85
    d202:	f7fc bae1 	b.w	97c8 <nrf_usbd_epin_dma_handler>

0000d206 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    d206:	2084      	movs	r0, #132	; 0x84
    d208:	f7fc bade 	b.w	97c8 <nrf_usbd_epin_dma_handler>

0000d20c <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    d20c:	2083      	movs	r0, #131	; 0x83
    d20e:	f7fc badb 	b.w	97c8 <nrf_usbd_epin_dma_handler>

0000d212 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    d212:	2082      	movs	r0, #130	; 0x82
    d214:	f7fc bad8 	b.w	97c8 <nrf_usbd_epin_dma_handler>

0000d218 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    d218:	2081      	movs	r0, #129	; 0x81
    d21a:	f7fc bad5 	b.w	97c8 <nrf_usbd_epin_dma_handler>

0000d21e <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    d21e:	f7fc baef 	b.w	9800 <nrf_usbd_ep0in_dma_handler>

0000d222 <nrfx_usbd_ep_max_packet_size_set>:
{
    d222:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    d224:	f7fc f9c6 	bl	95b4 <ep_state_access>
    p_state->max_packet_size = size;
    d228:	8181      	strh	r1, [r0, #12]
}
    d22a:	bd08      	pop	{r3, pc}

0000d22c <nrfx_usbd_ep_status_get>:
{
    d22c:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    d22e:	f7fc f9c1 	bl	95b4 <ep_state_access>
	__asm__ volatile(
    d232:	f04f 0240 	mov.w	r2, #64	; 0x40
    d236:	f3ef 8311 	mrs	r3, BASEPRI
    d23a:	f382 8812 	msr	BASEPRI_MAX, r2
    d23e:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    d242:	6882      	ldr	r2, [r0, #8]
    d244:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    d246:	6802      	ldr	r2, [r0, #0]
    d248:	b92a      	cbnz	r2, d256 <nrfx_usbd_ep_status_get+0x2a>
    d24a:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    d24c:	f383 8811 	msr	BASEPRI, r3
    d250:	f3bf 8f6f 	isb	sy
}
    d254:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    d256:	2004      	movs	r0, #4
    d258:	e7f8      	b.n	d24c <nrfx_usbd_ep_status_get+0x20>

0000d25a <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    d25a:	2007      	movs	r0, #7
    d25c:	f7fc be08 	b.w	9e70 <nrf_usbd_epout_dma_handler>

0000d260 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    d260:	2006      	movs	r0, #6
    d262:	f7fc be05 	b.w	9e70 <nrf_usbd_epout_dma_handler>

0000d266 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    d266:	2005      	movs	r0, #5
    d268:	f7fc be02 	b.w	9e70 <nrf_usbd_epout_dma_handler>

0000d26c <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    d26c:	2004      	movs	r0, #4
    d26e:	f7fc bdff 	b.w	9e70 <nrf_usbd_epout_dma_handler>

0000d272 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    d272:	2003      	movs	r0, #3
    d274:	f7fc bdfc 	b.w	9e70 <nrf_usbd_epout_dma_handler>

0000d278 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    d278:	2002      	movs	r0, #2
    d27a:	f7fc bdf9 	b.w	9e70 <nrf_usbd_epout_dma_handler>

0000d27e <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    d27e:	2001      	movs	r0, #1
    d280:	f7fc bdf6 	b.w	9e70 <nrf_usbd_epout_dma_handler>

0000d284 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    d284:	f7fc bef0 	b.w	a068 <usbd_ep_abort>

0000d288 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    d288:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    d28a:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    d28c:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    d28e:	bf9c      	itt	ls
    d290:	6881      	ldrls	r1, [r0, #8]
    d292:	185b      	addls	r3, r3, r1
    r = RdOff - WrOff - 1u;
    d294:	3b01      	subs	r3, #1
    d296:	1a98      	subs	r0, r3, r2
}
    d298:	4770      	bx	lr

0000d29a <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    d29a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    d29e:	e9d0 8402 	ldrd	r8, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    d2a2:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    d2a4:	eba8 0604 	sub.w	r6, r8, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    d2a8:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    d2aa:	4296      	cmp	r6, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    d2ac:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    d2ae:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    d2b0:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    d2b2:	d904      	bls.n	d2be <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    d2b4:	f7ff fc2a 	bl	cb0c <memcpy>
    pRing->WrOff = WrOff + NumBytes;
    d2b8:	60ec      	str	r4, [r5, #12]
}
    d2ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    d2be:	4632      	mov	r2, r6
    NumBytesAtOnce = NumBytes - Rem;
    d2c0:	eba4 0408 	sub.w	r4, r4, r8
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    d2c4:	f7ff fc22 	bl	cb0c <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    d2c8:	6868      	ldr	r0, [r5, #4]
    d2ca:	4622      	mov	r2, r4
    d2cc:	19b9      	adds	r1, r7, r6
    d2ce:	e7f1      	b.n	d2b4 <_WriteNoCheck+0x1a>

0000d2d0 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    d2d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    d2d4:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    d2d6:	4606      	mov	r6, r0
    d2d8:	4689      	mov	r9, r1
    d2da:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    d2dc:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    d2e0:	6933      	ldr	r3, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    d2e2:	68b4      	ldr	r4, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    d2e4:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    d2e6:	429d      	cmp	r5, r3
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    d2e8:	bf28      	it	cs
    d2ea:	191b      	addcs	r3, r3, r4
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    d2ec:	1b64      	subs	r4, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    d2ee:	42bc      	cmp	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    d2f0:	f103 33ff 	add.w	r3, r3, #4294967295
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    d2f4:	bf28      	it	cs
    d2f6:	463c      	movcs	r4, r7
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    d2f8:	1b5b      	subs	r3, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    d2fa:	429c      	cmp	r4, r3
    d2fc:	bf28      	it	cs
    d2fe:	461c      	movcs	r4, r3
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    d300:	4649      	mov	r1, r9
    d302:	4428      	add	r0, r5
    d304:	4622      	mov	r2, r4
    d306:	f7ff fc01 	bl	cb0c <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    d30a:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    d30c:	4425      	add	r5, r4
      WrOff = 0u;
    d30e:	42ab      	cmp	r3, r5
    d310:	bf08      	it	eq
    d312:	2500      	moveq	r5, #0
  } while (NumBytes);
    d314:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    d316:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    d318:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    d31a:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    d31c:	d1e0      	bne.n	d2e0 <_WriteBlocking+0x10>
}
    d31e:	4640      	mov	r0, r8
    d320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000d324 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    d324:	f7fd b876 	b.w	a414 <_DoInit>

0000d328 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(void)
{
    d328:	b508      	push	{r3, lr}

	SEGGER_RTT_Init();
    d32a:	f7ff fffb 	bl	d324 <SEGGER_RTT_Init>

	return 0;
}
    d32e:	2000      	movs	r0, #0
    d330:	bd08      	pop	{r3, pc}

0000d332 <z_device_state_init>:
}
    d332:	4770      	bx	lr

0000d334 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    d334:	b140      	cbz	r0, d348 <z_device_is_ready+0x14>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    d336:	68c3      	ldr	r3, [r0, #12]
    d338:	7858      	ldrb	r0, [r3, #1]
    d33a:	f010 0001 	ands.w	r0, r0, #1
    d33e:	bf1e      	ittt	ne
    d340:	7818      	ldrbne	r0, [r3, #0]
    d342:	fab0 f080 	clzne	r0, r0
    d346:	0940      	lsrne	r0, r0, #5
}
    d348:	4770      	bx	lr

0000d34a <z_early_memset>:
	(void) memset(dst, c, n);
    d34a:	f7ff bbea 	b.w	cb22 <memset>

0000d34e <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    d34e:	f7ff bbdd 	b.w	cb0c <memcpy>

0000d352 <create_free_list>:
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    d352:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
    d356:	4313      	orrs	r3, r2
    d358:	f013 0303 	ands.w	r3, r3, #3
    d35c:	d10c      	bne.n	d378 <create_free_list+0x26>
	slab->free_list = NULL;
    d35e:	6143      	str	r3, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    d360:	6881      	ldr	r1, [r0, #8]
    d362:	4299      	cmp	r1, r3
    d364:	d801      	bhi.n	d36a <create_free_list+0x18>
	return 0;
    d366:	2000      	movs	r0, #0
    d368:	4770      	bx	lr
		*(char **)p = slab->free_list;
    d36a:	6941      	ldr	r1, [r0, #20]
    d36c:	6011      	str	r1, [r2, #0]
		p += slab->block_size;
    d36e:	68c1      	ldr	r1, [r0, #12]
		slab->free_list = p;
    d370:	6142      	str	r2, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    d372:	3301      	adds	r3, #1
		p += slab->block_size;
    d374:	440a      	add	r2, r1
	for (j = 0U; j < slab->num_blocks; j++) {
    d376:	e7f3      	b.n	d360 <create_free_list+0xe>
		return -EINVAL;
    d378:	f06f 0015 	mvn.w	r0, #21
}
    d37c:	4770      	bx	lr

0000d37e <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    d37e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d380:	4604      	mov	r4, r0
    d382:	460d      	mov	r5, r1
	__asm__ volatile(
    d384:	f04f 0340 	mov.w	r3, #64	; 0x40
    d388:	f3ef 8611 	mrs	r6, BASEPRI
    d38c:	f383 8812 	msr	BASEPRI_MAX, r3
    d390:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    d394:	6947      	ldr	r7, [r0, #20]
    d396:	b977      	cbnz	r7, d3b6 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    d398:	f000 f9ce 	bl	d738 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    d39c:	b158      	cbz	r0, d3b6 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    d39e:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    d3a0:	6142      	str	r2, [r0, #20]
    d3a2:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    d3a4:	f000 f969 	bl	d67a <z_ready_thread>
			z_reschedule(&slab->lock, key);
    d3a8:	4631      	mov	r1, r6
    d3aa:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    d3ae:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    d3b2:	f7fd bfeb 	b.w	b38c <z_reschedule>
	**(char ***) mem = slab->free_list;
    d3b6:	682b      	ldr	r3, [r5, #0]
    d3b8:	6962      	ldr	r2, [r4, #20]
    d3ba:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    d3bc:	682b      	ldr	r3, [r5, #0]
    d3be:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    d3c0:	69a3      	ldr	r3, [r4, #24]
    d3c2:	3b01      	subs	r3, #1
    d3c4:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    d3c6:	f386 8811 	msr	BASEPRI, r6
    d3ca:	f3bf 8f6f 	isb	sy
}
    d3ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000d3d0 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    d3d0:	f3ef 8005 	mrs	r0, IPSR
}
    d3d4:	3800      	subs	r0, #0
    d3d6:	bf18      	it	ne
    d3d8:	2001      	movne	r0, #1
    d3da:	4770      	bx	lr

0000d3dc <z_impl_k_thread_name_set>:
}
    d3dc:	f06f 0057 	mvn.w	r0, #87	; 0x57
    d3e0:	4770      	bx	lr

0000d3e2 <k_thread_name_get>:
}
    d3e2:	2000      	movs	r0, #0
    d3e4:	4770      	bx	lr

0000d3e6 <z_impl_k_thread_start>:
	z_sched_start(thread);
    d3e6:	f7fd bfe3 	b.w	b3b0 <z_sched_start>

0000d3ea <z_pm_save_idle_exit>:
{
    d3ea:	b508      	push	{r3, lr}
	pm_system_resume();
    d3ec:	f7f6 f9ae 	bl	374c <pm_system_resume>
}
    d3f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    d3f4:	f7ff bd98 	b.w	cf28 <sys_clock_idle_exit>

0000d3f8 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    d3f8:	f990 300e 	ldrsb.w	r3, [r0, #14]
    d3fc:	428b      	cmp	r3, r1
    d3fe:	d001      	beq.n	d404 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    d400:	f7fd bf7e 	b.w	b300 <z_set_prio>
}
    d404:	2000      	movs	r0, #0
    d406:	4770      	bx	lr

0000d408 <z_impl_k_mutex_init>:
{
    d408:	4603      	mov	r3, r0
	mutex->owner = NULL;
    d40a:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    d40c:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
    d410:	e9c3 3300 	strd	r3, r3, [r3]
}
    d414:	4770      	bx	lr

0000d416 <queue_insert>:
{
    d416:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d41a:	4699      	mov	r9, r3
    d41c:	4604      	mov	r4, r0
    d41e:	f89d 3020 	ldrb.w	r3, [sp, #32]
    d422:	460d      	mov	r5, r1
    d424:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    d426:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
    d42a:	f04f 0240 	mov.w	r2, #64	; 0x40
    d42e:	f3ef 8711 	mrs	r7, BASEPRI
    d432:	f382 8812 	msr	BASEPRI_MAX, r2
    d436:	f3bf 8f6f 	isb	sy
	if (is_append) {
    d43a:	b103      	cbz	r3, d43e <queue_insert+0x28>
	return list->tail;
    d43c:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    d43e:	4630      	mov	r0, r6
    d440:	f000 f97a 	bl	d738 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    d444:	b158      	cbz	r0, d45e <queue_insert+0x48>
    d446:	2300      	movs	r3, #0
    d448:	6783      	str	r3, [r0, #120]	; 0x78
    d44a:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    d44e:	f000 f914 	bl	d67a <z_ready_thread>
	z_reschedule(&queue->lock, key);
    d452:	4630      	mov	r0, r6
    d454:	4639      	mov	r1, r7
    d456:	f7fd ff99 	bl	b38c <z_reschedule>
		return 0;
    d45a:	2000      	movs	r0, #0
    d45c:	e00c      	b.n	d478 <queue_insert+0x62>
	if (alloc) {
    d45e:	f1b9 0f00 	cmp.w	r9, #0
    d462:	d01c      	beq.n	d49e <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    d464:	2108      	movs	r1, #8
    d466:	f7fe fb55 	bl	bb14 <z_thread_aligned_alloc>
		if (anode == NULL) {
    d46a:	b938      	cbnz	r0, d47c <queue_insert+0x66>
	__asm__ volatile(
    d46c:	f387 8811 	msr	BASEPRI, r7
    d470:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    d474:	f06f 000b 	mvn.w	r0, #11
}
    d478:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    d47c:	2201      	movs	r2, #1
		anode->data = data;
    d47e:	f8c0 8004 	str.w	r8, [r0, #4]
    d482:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    d484:	6801      	ldr	r1, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    d486:	f001 0103 	and.w	r1, r1, #3
Z_GENLIST_INSERT(sflist, sfnode)
    d48a:	b965      	cbnz	r5, d4a6 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    d48c:	6822      	ldr	r2, [r4, #0]
    d48e:	430a      	orrs	r2, r1
    d490:	6002      	str	r2, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    d492:	6862      	ldr	r2, [r4, #4]
	list->head = node;
    d494:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    d496:	2a00      	cmp	r2, #0
    d498:	d1db      	bne.n	d452 <queue_insert+0x3c>
	list->tail = node;
    d49a:	6060      	str	r0, [r4, #4]
}
    d49c:	e7d9      	b.n	d452 <queue_insert+0x3c>
	node->next_and_flags = flags;
    d49e:	f8c8 9000 	str.w	r9, [r8]
}
    d4a2:	4640      	mov	r0, r8
    d4a4:	e7ee      	b.n	d484 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    d4a6:	682a      	ldr	r2, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    d4a8:	2a03      	cmp	r2, #3
    d4aa:	d80b      	bhi.n	d4c4 <queue_insert+0xae>
	parent->next_and_flags = cur_flags | (unative_t)child;
    d4ac:	6001      	str	r1, [r0, #0]
	return list->tail;
    d4ae:	6861      	ldr	r1, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    d4b0:	b911      	cbnz	r1, d4b8 <queue_insert+0xa2>
	list->head = node;
    d4b2:	e9c4 0000 	strd	r0, r0, [r4]
}
    d4b6:	e7cc      	b.n	d452 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    d4b8:	680a      	ldr	r2, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    d4ba:	f002 0203 	and.w	r2, r2, #3
    d4be:	4302      	orrs	r2, r0
    d4c0:	600a      	str	r2, [r1, #0]
    d4c2:	e7ea      	b.n	d49a <queue_insert+0x84>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    d4c4:	f022 0203 	bic.w	r2, r2, #3
	parent->next_and_flags = cur_flags | (unative_t)child;
    d4c8:	430a      	orrs	r2, r1
    d4ca:	6002      	str	r2, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    d4cc:	682a      	ldr	r2, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    d4ce:	f002 0203 	and.w	r2, r2, #3
    d4d2:	ea40 0302 	orr.w	r3, r0, r2
    d4d6:	602b      	str	r3, [r5, #0]
}
    d4d8:	e7bb      	b.n	d452 <queue_insert+0x3c>

0000d4da <z_queue_node_peek>:
{
    d4da:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    d4dc:	4604      	mov	r4, r0
    d4de:	b130      	cbz	r0, d4ee <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    d4e0:	6802      	ldr	r2, [r0, #0]
    d4e2:	0793      	lsls	r3, r2, #30
    d4e4:	d003      	beq.n	d4ee <z_queue_node_peek+0x14>
		ret = anode->data;
    d4e6:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    d4e8:	b109      	cbz	r1, d4ee <z_queue_node_peek+0x14>
			k_free(anode);
    d4ea:	f000 fa1d 	bl	d928 <k_free>
}
    d4ee:	4620      	mov	r0, r4
    d4f0:	bd10      	pop	{r4, pc}

0000d4f2 <z_impl_k_queue_init>:
	list->head = NULL;
    d4f2:	2300      	movs	r3, #0
	list->tail = NULL;
    d4f4:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
    d4f8:	f100 0308 	add.w	r3, r0, #8
    d4fc:	e9c0 3302 	strd	r3, r3, [r0, #8]
}
    d500:	4770      	bx	lr

0000d502 <k_queue_append>:
{
    d502:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    d504:	2301      	movs	r3, #1
    d506:	9300      	str	r3, [sp, #0]
    d508:	2300      	movs	r3, #0
{
    d50a:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    d50c:	4619      	mov	r1, r3
    d50e:	f7ff ff82 	bl	d416 <queue_insert>
}
    d512:	b003      	add	sp, #12
    d514:	f85d fb04 	ldr.w	pc, [sp], #4

0000d518 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    d518:	b13a      	cbz	r2, d52a <z_impl_k_sem_init+0x12>
    d51a:	428a      	cmp	r2, r1
    d51c:	d305      	bcc.n	d52a <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    d51e:	e9c0 1202 	strd	r1, r2, [r0, #8]
    d522:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    d526:	2000      	movs	r0, #0
    d528:	4770      	bx	lr
		return -EINVAL;
    d52a:	f06f 0015 	mvn.w	r0, #21
}
    d52e:	4770      	bx	lr

0000d530 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    d530:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    d532:	2301      	movs	r3, #1
    d534:	408b      	lsls	r3, r1
    d536:	ea22 0303 	bic.w	r3, r2, r3
    d53a:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    d53c:	fa22 f001 	lsr.w	r0, r2, r1
}
    d540:	f000 0001 	and.w	r0, r0, #1
    d544:	4770      	bx	lr

0000d546 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    d546:	b120      	cbz	r0, d552 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    d548:	2200      	movs	r2, #0
    d54a:	4611      	mov	r1, r2
    d54c:	3088      	adds	r0, #136	; 0x88
    d54e:	f000 b94d 	b.w	d7ec <z_sched_wake>
}
    d552:	4770      	bx	lr

0000d554 <work_timeout>:
{
    d554:	b573      	push	{r0, r1, r4, r5, r6, lr}
    d556:	4604      	mov	r4, r0
	__asm__ volatile(
    d558:	f04f 0340 	mov.w	r3, #64	; 0x40
    d55c:	f3ef 8511 	mrs	r5, BASEPRI
    d560:	f383 8812 	msr	BASEPRI_MAX, r3
    d564:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    d568:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    d56a:	f1a0 0610 	sub.w	r6, r0, #16
    d56e:	2103      	movs	r1, #3
    d570:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    d572:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    d574:	f7ff ffdc 	bl	d530 <flag_test_and_clear>
    d578:	b128      	cbz	r0, d586 <work_timeout+0x32>
		queue = dw->queue;
    d57a:	69a3      	ldr	r3, [r4, #24]
    d57c:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    d57e:	a901      	add	r1, sp, #4
    d580:	4630      	mov	r0, r6
    d582:	f7fd fc9b 	bl	aebc <submit_to_queue_locked>
	__asm__ volatile(
    d586:	f385 8811 	msr	BASEPRI, r5
    d58a:	f3bf 8f6f 	isb	sy
}
    d58e:	b002      	add	sp, #8
    d590:	bd70      	pop	{r4, r5, r6, pc}

0000d592 <k_work_init>:
{
    d592:	b538      	push	{r3, r4, r5, lr}
    d594:	4604      	mov	r4, r0
    d596:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    d598:	2210      	movs	r2, #16
    d59a:	2100      	movs	r1, #0
    d59c:	f7ff fac1 	bl	cb22 <memset>
    d5a0:	6065      	str	r5, [r4, #4]
}
    d5a2:	bd38      	pop	{r3, r4, r5, pc}

0000d5a4 <z_work_submit_to_queue>:
{
    d5a4:	b513      	push	{r0, r1, r4, lr}
    d5a6:	9001      	str	r0, [sp, #4]
    d5a8:	4608      	mov	r0, r1
	__asm__ volatile(
    d5aa:	f04f 0340 	mov.w	r3, #64	; 0x40
    d5ae:	f3ef 8411 	mrs	r4, BASEPRI
    d5b2:	f383 8812 	msr	BASEPRI_MAX, r3
    d5b6:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    d5ba:	a901      	add	r1, sp, #4
    d5bc:	f7fd fc7e 	bl	aebc <submit_to_queue_locked>
	__asm__ volatile(
    d5c0:	f384 8811 	msr	BASEPRI, r4
    d5c4:	f3bf 8f6f 	isb	sy
}
    d5c8:	b002      	add	sp, #8
    d5ca:	bd10      	pop	{r4, pc}

0000d5cc <k_work_submit_to_queue>:
{
    d5cc:	b510      	push	{r4, lr}
	int ret = z_work_submit_to_queue(queue, work);
    d5ce:	f7ff ffe9 	bl	d5a4 <z_work_submit_to_queue>
	if (ret > 0) {
    d5d2:	1e04      	subs	r4, r0, #0
    d5d4:	dd09      	ble.n	d5ea <k_work_submit_to_queue+0x1e>
	__asm__ volatile(
    d5d6:	f04f 0340 	mov.w	r3, #64	; 0x40
    d5da:	f3ef 8011 	mrs	r0, BASEPRI
    d5de:	f383 8812 	msr	BASEPRI_MAX, r3
    d5e2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    d5e6:	f000 f8db 	bl	d7a0 <z_reschedule_irqlock>
}
    d5ea:	4620      	mov	r0, r4
    d5ec:	bd10      	pop	{r4, pc}

0000d5ee <k_work_init_delayable>:
{
    d5ee:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    d5f0:	2230      	movs	r2, #48	; 0x30
{
    d5f2:	4604      	mov	r4, r0
    d5f4:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    d5f6:	2100      	movs	r1, #0
    d5f8:	f7ff fa93 	bl	cb22 <memset>
    d5fc:	f44f 7380 	mov.w	r3, #256	; 0x100
    d600:	6065      	str	r5, [r4, #4]
    d602:	60e3      	str	r3, [r4, #12]
}
    d604:	bd38      	pop	{r3, r4, r5, pc}

0000d606 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    d606:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    d60a:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    d60c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    d60e:	2300      	movs	r3, #0
	node->prev = NULL;
    d610:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    d614:	4770      	bx	lr

0000d616 <unpend_thread_no_timeout>:
{
    d616:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    d618:	f7ff fff5 	bl	d606 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    d61c:	7b43      	ldrb	r3, [r0, #13]
    d61e:	f023 0302 	bic.w	r3, r3, #2
    d622:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    d624:	2300      	movs	r3, #0
    d626:	6083      	str	r3, [r0, #8]
}
    d628:	bd08      	pop	{r3, pc}

0000d62a <add_to_waitq_locked>:
{
    d62a:	b538      	push	{r3, r4, r5, lr}
    d62c:	4604      	mov	r4, r0
    d62e:	460d      	mov	r5, r1
	unready_thread(thread);
    d630:	f7fd fde8 	bl	b204 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    d634:	7b63      	ldrb	r3, [r4, #13]
    d636:	f043 0302 	orr.w	r3, r3, #2
    d63a:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    d63c:	b1e5      	cbz	r5, d678 <add_to_waitq_locked+0x4e>
		thread->base.pended_on = wait_q;
    d63e:	60a5      	str	r5, [r4, #8]
	return list->head == list;
    d640:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d642:	429d      	cmp	r5, r3
    d644:	d109      	bne.n	d65a <add_to_waitq_locked+0x30>
	sys_dnode_t *const tail = list->tail;
    d646:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    d648:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    d64c:	601c      	str	r4, [r3, #0]
	list->tail = node;
    d64e:	606c      	str	r4, [r5, #4]
}
    d650:	e012      	b.n	d678 <add_to_waitq_locked+0x4e>
	return (node == list->tail) ? NULL : node->next;
    d652:	686a      	ldr	r2, [r5, #4]
    d654:	4293      	cmp	r3, r2
    d656:	d0f6      	beq.n	d646 <add_to_waitq_locked+0x1c>
    d658:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    d65a:	2b00      	cmp	r3, #0
    d65c:	d0f3      	beq.n	d646 <add_to_waitq_locked+0x1c>
	int32_t b1 = thread_1->base.prio;
    d65e:	f994 200e 	ldrsb.w	r2, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    d662:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    d666:	428a      	cmp	r2, r1
    d668:	d0f3      	beq.n	d652 <add_to_waitq_locked+0x28>
		if (z_sched_prio_cmp(thread, t) > 0) {
    d66a:	4291      	cmp	r1, r2
    d66c:	ddf1      	ble.n	d652 <add_to_waitq_locked+0x28>
	sys_dnode_t *const prev = successor->prev;
    d66e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    d670:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    d674:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    d676:	605c      	str	r4, [r3, #4]
}
    d678:	bd38      	pop	{r3, r4, r5, pc}

0000d67a <z_ready_thread>:
{
    d67a:	b510      	push	{r4, lr}
    d67c:	f04f 0340 	mov.w	r3, #64	; 0x40
    d680:	f3ef 8411 	mrs	r4, BASEPRI
    d684:	f383 8812 	msr	BASEPRI_MAX, r3
    d688:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    d68c:	f7fd fd86 	bl	b19c <ready_thread>
	__asm__ volatile(
    d690:	f384 8811 	msr	BASEPRI, r4
    d694:	f3bf 8f6f 	isb	sy
}
    d698:	bd10      	pop	{r4, pc}

0000d69a <z_unpend_thread_no_timeout>:
{
    d69a:	b508      	push	{r3, lr}
	__asm__ volatile(
    d69c:	f04f 0240 	mov.w	r2, #64	; 0x40
    d6a0:	f3ef 8111 	mrs	r1, BASEPRI
    d6a4:	f382 8812 	msr	BASEPRI_MAX, r2
    d6a8:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    d6ac:	6883      	ldr	r3, [r0, #8]
    d6ae:	b10b      	cbz	r3, d6b4 <z_unpend_thread_no_timeout+0x1a>
			unpend_thread_no_timeout(thread);
    d6b0:	f7ff ffb1 	bl	d616 <unpend_thread_no_timeout>
	__asm__ volatile(
    d6b4:	f381 8811 	msr	BASEPRI, r1
    d6b8:	f3bf 8f6f 	isb	sy
}
    d6bc:	bd08      	pop	{r3, pc}

0000d6be <z_sched_wake_thread>:
{
    d6be:	b538      	push	{r3, r4, r5, lr}
    d6c0:	4604      	mov	r4, r0
	__asm__ volatile(
    d6c2:	f04f 0340 	mov.w	r3, #64	; 0x40
    d6c6:	f3ef 8511 	mrs	r5, BASEPRI
    d6ca:	f383 8812 	msr	BASEPRI_MAX, r3
    d6ce:	f3bf 8f6f 	isb	sy
		if (!killed) {
    d6d2:	7b43      	ldrb	r3, [r0, #13]
    d6d4:	f013 0f28 	tst.w	r3, #40	; 0x28
    d6d8:	d10b      	bne.n	d6f2 <z_sched_wake_thread+0x34>
			if (thread->base.pended_on != NULL) {
    d6da:	6883      	ldr	r3, [r0, #8]
    d6dc:	b10b      	cbz	r3, d6e2 <z_sched_wake_thread+0x24>
				unpend_thread_no_timeout(thread);
    d6de:	f7ff ff9a 	bl	d616 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_PRESTART;
    d6e2:	7b63      	ldrb	r3, [r4, #13]
			if (is_timeout) {
    d6e4:	b951      	cbnz	r1, d6fc <z_sched_wake_thread+0x3e>
    d6e6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    d6ea:	7363      	strb	r3, [r4, #13]
			ready_thread(thread);
    d6ec:	4620      	mov	r0, r4
    d6ee:	f7fd fd55 	bl	b19c <ready_thread>
	__asm__ volatile(
    d6f2:	f385 8811 	msr	BASEPRI, r5
    d6f6:	f3bf 8f6f 	isb	sy
}
    d6fa:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    d6fc:	f003 03eb 	and.w	r3, r3, #235	; 0xeb
}
    d700:	e7f3      	b.n	d6ea <z_sched_wake_thread+0x2c>

0000d702 <z_thread_timeout>:
	z_sched_wake_thread(thread, true);
    d702:	2101      	movs	r1, #1
    d704:	3818      	subs	r0, #24
    d706:	f7ff bfda 	b.w	d6be <z_sched_wake_thread>

0000d70a <z_unpend1_no_timeout>:
{
    d70a:	b508      	push	{r3, lr}
    d70c:	4603      	mov	r3, r0
	__asm__ volatile(
    d70e:	f04f 0240 	mov.w	r2, #64	; 0x40
    d712:	f3ef 8111 	mrs	r1, BASEPRI
    d716:	f382 8812 	msr	BASEPRI_MAX, r2
    d71a:	f3bf 8f6f 	isb	sy
	return list->head == list;
    d71e:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d720:	4283      	cmp	r3, r0
    d722:	d007      	beq.n	d734 <z_unpend1_no_timeout+0x2a>
		if (thread != NULL) {
    d724:	b108      	cbz	r0, d72a <z_unpend1_no_timeout+0x20>
			unpend_thread_no_timeout(thread);
    d726:	f7ff ff76 	bl	d616 <unpend_thread_no_timeout>
	__asm__ volatile(
    d72a:	f381 8811 	msr	BASEPRI, r1
    d72e:	f3bf 8f6f 	isb	sy
}
    d732:	bd08      	pop	{r3, pc}
    d734:	2000      	movs	r0, #0
    d736:	e7f8      	b.n	d72a <z_unpend1_no_timeout+0x20>

0000d738 <z_unpend_first_thread>:
{
    d738:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    d73a:	f04f 0340 	mov.w	r3, #64	; 0x40
    d73e:	f3ef 8511 	mrs	r5, BASEPRI
    d742:	f383 8812 	msr	BASEPRI_MAX, r3
    d746:	f3bf 8f6f 	isb	sy
	return list->head == list;
    d74a:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d74c:	42a0      	cmp	r0, r4
    d74e:	d00d      	beq.n	d76c <z_unpend_first_thread+0x34>
		if (thread != NULL) {
    d750:	b134      	cbz	r4, d760 <z_unpend_first_thread+0x28>
			unpend_thread_no_timeout(thread);
    d752:	4620      	mov	r0, r4
    d754:	f7ff ff5f 	bl	d616 <unpend_thread_no_timeout>
    d758:	f104 0018 	add.w	r0, r4, #24
    d75c:	f000 f869 	bl	d832 <z_abort_timeout>
	__asm__ volatile(
    d760:	f385 8811 	msr	BASEPRI, r5
    d764:	f3bf 8f6f 	isb	sy
}
    d768:	4620      	mov	r0, r4
    d76a:	bd38      	pop	{r3, r4, r5, pc}
    d76c:	2400      	movs	r4, #0
    d76e:	e7f7      	b.n	d760 <z_unpend_first_thread+0x28>

0000d770 <z_unpend_thread>:
{
    d770:	b510      	push	{r4, lr}
    d772:	4601      	mov	r1, r0
	__asm__ volatile(
    d774:	f04f 0340 	mov.w	r3, #64	; 0x40
    d778:	f3ef 8411 	mrs	r4, BASEPRI
    d77c:	f383 8812 	msr	BASEPRI_MAX, r3
    d780:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
    d784:	6883      	ldr	r3, [r0, #8]
    d786:	b10b      	cbz	r3, d78c <z_unpend_thread+0x1c>
			unpend_thread_no_timeout(thread);
    d788:	f7ff ff45 	bl	d616 <unpend_thread_no_timeout>
	__asm__ volatile(
    d78c:	f384 8811 	msr	BASEPRI, r4
    d790:	f3bf 8f6f 	isb	sy
}
    d794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d798:	f101 0018 	add.w	r0, r1, #24
    d79c:	f000 b849 	b.w	d832 <z_abort_timeout>

0000d7a0 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    d7a0:	4603      	mov	r3, r0
    d7a2:	b920      	cbnz	r0, d7ae <z_reschedule_irqlock+0xe>
    d7a4:	f3ef 8205 	mrs	r2, IPSR
    d7a8:	b90a      	cbnz	r2, d7ae <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    d7aa:	f7f7 b905 	b.w	49b8 <arch_swap>
    d7ae:	f383 8811 	msr	BASEPRI, r3
    d7b2:	f3bf 8f6f 	isb	sy
}
    d7b6:	4770      	bx	lr

0000d7b8 <z_reschedule_unlocked>:
	__asm__ volatile(
    d7b8:	f04f 0340 	mov.w	r3, #64	; 0x40
    d7bc:	f3ef 8011 	mrs	r0, BASEPRI
    d7c0:	f383 8812 	msr	BASEPRI_MAX, r3
    d7c4:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    d7c8:	f7ff bfea 	b.w	d7a0 <z_reschedule_irqlock>

0000d7cc <z_unpend_all>:
{
    d7cc:	b538      	push	{r3, r4, r5, lr}
    d7ce:	4605      	mov	r5, r0
	int need_sched = 0;
    d7d0:	2000      	movs	r0, #0
	return list->head == list;
    d7d2:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d7d4:	42a5      	cmp	r5, r4
    d7d6:	d000      	beq.n	d7da <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    d7d8:	b904      	cbnz	r4, d7dc <z_unpend_all+0x10>
}
    d7da:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    d7dc:	4620      	mov	r0, r4
    d7de:	f7ff ffc7 	bl	d770 <z_unpend_thread>
		z_ready_thread(thread);
    d7e2:	4620      	mov	r0, r4
    d7e4:	f7ff ff49 	bl	d67a <z_ready_thread>
		need_sched = 1;
    d7e8:	2001      	movs	r0, #1
    d7ea:	e7f2      	b.n	d7d2 <z_unpend_all+0x6>

0000d7ec <z_sched_wake>:
{
    d7ec:	b538      	push	{r3, r4, r5, lr}
    d7ee:	f04f 0340 	mov.w	r3, #64	; 0x40
    d7f2:	f3ef 8511 	mrs	r5, BASEPRI
    d7f6:	f383 8812 	msr	BASEPRI_MAX, r3
    d7fa:	f3bf 8f6f 	isb	sy
	return list->head == list;
    d7fe:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    d800:	42a0      	cmp	r0, r4
    d802:	d012      	beq.n	d82a <z_sched_wake+0x3e>
		if (thread != NULL) {
    d804:	b19c      	cbz	r4, d82e <z_sched_wake+0x42>
    d806:	67a1      	str	r1, [r4, #120]	; 0x78
	thread->base.swap_data = data;
    d808:	6162      	str	r2, [r4, #20]
			unpend_thread_no_timeout(thread);
    d80a:	4620      	mov	r0, r4
    d80c:	f7ff ff03 	bl	d616 <unpend_thread_no_timeout>
    d810:	f104 0018 	add.w	r0, r4, #24
    d814:	f000 f80d 	bl	d832 <z_abort_timeout>
			ready_thread(thread);
    d818:	4620      	mov	r0, r4
    d81a:	f7fd fcbf 	bl	b19c <ready_thread>
			ret = true;
    d81e:	2001      	movs	r0, #1
	__asm__ volatile(
    d820:	f385 8811 	msr	BASEPRI, r5
    d824:	f3bf 8f6f 	isb	sy
}
    d828:	bd38      	pop	{r3, r4, r5, pc}
	bool ret = false;
    d82a:	2000      	movs	r0, #0
    d82c:	e7f8      	b.n	d820 <z_sched_wake+0x34>
    d82e:	4620      	mov	r0, r4
    d830:	e7f6      	b.n	d820 <z_sched_wake+0x34>

0000d832 <z_abort_timeout>:
{
    d832:	b510      	push	{r4, lr}
	__asm__ volatile(
    d834:	f04f 0240 	mov.w	r2, #64	; 0x40
    d838:	f3ef 8411 	mrs	r4, BASEPRI
    d83c:	f382 8812 	msr	BASEPRI_MAX, r2
    d840:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    d844:	6803      	ldr	r3, [r0, #0]
    d846:	b13b      	cbz	r3, d858 <z_abort_timeout+0x26>
			remove_timeout(to);
    d848:	f7fd ffac 	bl	b7a4 <remove_timeout>
			ret = 0;
    d84c:	2000      	movs	r0, #0
	__asm__ volatile(
    d84e:	f384 8811 	msr	BASEPRI, r4
    d852:	f3bf 8f6f 	isb	sy
}
    d856:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    d858:	f06f 0015 	mvn.w	r0, #21
    d85c:	e7f7      	b.n	d84e <z_abort_timeout+0x1c>

0000d85e <z_get_next_timeout_expiry>:
{
    d85e:	b510      	push	{r4, lr}
	__asm__ volatile(
    d860:	f04f 0340 	mov.w	r3, #64	; 0x40
    d864:	f3ef 8411 	mrs	r4, BASEPRI
    d868:	f383 8812 	msr	BASEPRI_MAX, r3
    d86c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    d870:	f7fd ff78 	bl	b764 <next_timeout>
	__asm__ volatile(
    d874:	f384 8811 	msr	BASEPRI, r4
    d878:	f3bf 8f6f 	isb	sy
}
    d87c:	bd10      	pop	{r4, pc}

0000d87e <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    d87e:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    d880:	f7fe f88c 	bl	b99c <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    d884:	bd08      	pop	{r3, pc}

0000d886 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    d886:	f7fe b889 	b.w	b99c <sys_clock_tick_get>

0000d88a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    d88a:	b108      	cbz	r0, d890 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    d88c:	f7f7 bdce 	b.w	542c <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    d890:	4770      	bx	lr

0000d892 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d892:	f1b1 3fff 	cmp.w	r1, #4294967295
    d896:	bf08      	it	eq
    d898:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    d89c:	b538      	push	{r3, r4, r5, lr}
    d89e:	460c      	mov	r4, r1
    d8a0:	4605      	mov	r5, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    d8a2:	d014      	beq.n	d8ce <sys_clock_timeout_end_calc+0x3c>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    d8a4:	4308      	orrs	r0, r1
    d8a6:	d103      	bne.n	d8b0 <sys_clock_timeout_end_calc+0x1e>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    d8a8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    d8ac:	f7fe b876 	b.w	b99c <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    d8b0:	f06f 0001 	mvn.w	r0, #1
    d8b4:	1b40      	subs	r0, r0, r5
    d8b6:	f04f 33ff 	mov.w	r3, #4294967295
    d8ba:	eb63 0101 	sbc.w	r1, r3, r1
    d8be:	2900      	cmp	r1, #0
    d8c0:	da04      	bge.n	d8cc <sys_clock_timeout_end_calc+0x3a>
		return sys_clock_tick_get() + MAX(1, dt);
    d8c2:	f7fe f86b 	bl	b99c <sys_clock_tick_get>
    d8c6:	1940      	adds	r0, r0, r5
    d8c8:	eb41 0104 	adc.w	r1, r1, r4
}
    d8cc:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    d8ce:	f04f 30ff 	mov.w	r0, #4294967295
    d8d2:	4601      	mov	r1, r0
    d8d4:	e7fa      	b.n	d8cc <sys_clock_timeout_end_calc+0x3a>

0000d8d6 <k_timer_init>:
	timer->status = 0U;
    d8d6:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    d8d8:	e9c0 1208 	strd	r1, r2, [r0, #32]
    d8dc:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    d8e0:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    d8e4:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    d8e8:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    d8ea:	6343      	str	r3, [r0, #52]	; 0x34
}
    d8ec:	4770      	bx	lr

0000d8ee <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    d8ee:	b510      	push	{r4, lr}
    d8f0:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	bool inactive = (z_abort_timeout(&timer->timeout) != 0);
    d8f2:	f7ff ff9e 	bl	d832 <z_abort_timeout>

	if (inactive) {
    d8f6:	b9b0      	cbnz	r0, d926 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    d8f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    d8fa:	b10b      	cbz	r3, d900 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    d8fc:	4620      	mov	r0, r4
    d8fe:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    d900:	f104 0018 	add.w	r0, r4, #24
    d904:	f7ff ff01 	bl	d70a <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    d908:	b168      	cbz	r0, d926 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    d90a:	f7ff feb6 	bl	d67a <z_ready_thread>
	__asm__ volatile(
    d90e:	f04f 0340 	mov.w	r3, #64	; 0x40
    d912:	f3ef 8011 	mrs	r0, BASEPRI
    d916:	f383 8812 	msr	BASEPRI_MAX, r3
    d91a:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    d91e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    d922:	f7ff bf3d 	b.w	d7a0 <z_reschedule_irqlock>
    d926:	bd10      	pop	{r4, pc}

0000d928 <k_free>:
	if (ptr != NULL) {
    d928:	b120      	cbz	r0, d934 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    d92a:	1f01      	subs	r1, r0, #4
    d92c:	f850 0c04 	ldr.w	r0, [r0, #-4]
    d930:	f000 b856 	b.w	d9e0 <k_heap_free>
}
    d934:	4770      	bx	lr

0000d936 <k_heap_init>:
{
    d936:	b410      	push	{r4}
    d938:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    d93c:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    d940:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    d942:	f7fe bb89 	b.w	c058 <sys_heap_init>

0000d946 <k_heap_aligned_alloc>:
SYS_INIT_NAMED(statics_init_post, statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    d946:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d94a:	b085      	sub	sp, #20
    d94c:	e9dd a40e 	ldrd	sl, r4, [sp, #56]	; 0x38
    d950:	4607      	mov	r7, r0
    d952:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    d954:	4650      	mov	r0, sl
    d956:	4621      	mov	r1, r4
{
    d958:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    d95a:	f7ff ff9a 	bl	d892 <sys_clock_timeout_end_calc>
	void *ret = NULL;

	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    d95e:	f1b4 3fff 	cmp.w	r4, #4294967295
    d962:	bf08      	it	eq
    d964:	f1ba 3fff 	cmpeq.w	sl, #4294967295
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    d968:	4605      	mov	r5, r0
    d96a:	460e      	mov	r6, r1
	end = K_TIMEOUT_EQ(timeout, K_FOREVER) ? INT64_MAX : end;
    d96c:	bf04      	itt	eq
    d96e:	f04f 35ff 	moveq.w	r5, #4294967295
    d972:	f06f 4600 	mvneq.w	r6, #2147483648	; 0x80000000

	k_spinlock_key_t key = k_spin_lock(&h->lock);
    d976:	f107 0a14 	add.w	sl, r7, #20
    d97a:	f04f 0340 	mov.w	r3, #64	; 0x40
    d97e:	f3ef 8411 	mrs	r4, BASEPRI
    d982:	f383 8812 	msr	BASEPRI_MAX, r3
    d986:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    d98a:	f107 0b0c 	add.w	fp, r7, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    d98e:	464a      	mov	r2, r9
    d990:	4641      	mov	r1, r8
    d992:	4638      	mov	r0, r7
    d994:	f7fe faf9 	bl	bf8a <sys_heap_aligned_alloc>
    d998:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    d99a:	f7fd ffff 	bl	b99c <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    d99e:	9b03      	ldr	r3, [sp, #12]
    d9a0:	b13b      	cbz	r3, d9b2 <k_heap_aligned_alloc+0x6c>
	__asm__ volatile(
    d9a2:	f384 8811 	msr	BASEPRI, r4
    d9a6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    d9aa:	4618      	mov	r0, r3
    d9ac:	b005      	add	sp, #20
    d9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    d9b2:	1a28      	subs	r0, r5, r0
    d9b4:	eb66 0101 	sbc.w	r1, r6, r1
    d9b8:	2801      	cmp	r0, #1
    d9ba:	f171 0200 	sbcs.w	r2, r1, #0
    d9be:	dbf0      	blt.n	d9a2 <k_heap_aligned_alloc+0x5c>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    d9c0:	e9cd 0100 	strd	r0, r1, [sp]
    d9c4:	465a      	mov	r2, fp
    d9c6:	4621      	mov	r1, r4
    d9c8:	4650      	mov	r0, sl
    d9ca:	f7fd fc7b 	bl	b2c4 <z_pend_curr>
	__asm__ volatile(
    d9ce:	f04f 0340 	mov.w	r3, #64	; 0x40
    d9d2:	f3ef 8411 	mrs	r4, BASEPRI
    d9d6:	f383 8812 	msr	BASEPRI_MAX, r3
    d9da:	f3bf 8f6f 	isb	sy
	return k;
    d9de:	e7d6      	b.n	d98e <k_heap_aligned_alloc+0x48>

0000d9e0 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    d9e0:	b538      	push	{r3, r4, r5, lr}
    d9e2:	4604      	mov	r4, r0
    d9e4:	f04f 0340 	mov.w	r3, #64	; 0x40
    d9e8:	f3ef 8511 	mrs	r5, BASEPRI
    d9ec:	f383 8812 	msr	BASEPRI_MAX, r3
    d9f0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    d9f4:	f7fe fa91 	bl	bf1a <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    d9f8:	f104 000c 	add.w	r0, r4, #12
    d9fc:	f7ff fee6 	bl	d7cc <z_unpend_all>
    da00:	b130      	cbz	r0, da10 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    da02:	4629      	mov	r1, r5
    da04:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    da08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    da0c:	f7fd bcbe 	b.w	b38c <z_reschedule>
	__asm__ volatile(
    da10:	f385 8811 	msr	BASEPRI, r5
    da14:	f3bf 8f6f 	isb	sy
}
    da18:	bd38      	pop	{r3, r4, r5, pc}

0000da1a <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    da1a:	4770      	bx	lr
