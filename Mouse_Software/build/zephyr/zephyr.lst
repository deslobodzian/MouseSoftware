
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	e0 28 00 20 e1 32 00 00 17 a7 00 00 b5 32 00 00     .(. .2.......2..
  10:	b5 32 00 00 b5 32 00 00 b5 32 00 00 00 00 00 00     .2...2...2......
	...
  2c:	35 2c 00 00 b5 32 00 00 00 00 00 00 e1 2b 00 00     5,...2.......+..
  3c:	b5 32 00 00                                         .2..

00000040 <_irq_vector_table>:
  40:	e5 2c 00 00 79 58 00 00 e5 2c 00 00 e5 2c 00 00     .,..yX...,...,..
  50:	e5 2c 00 00 e5 2c 00 00 e5 2c 00 00 e5 2c 00 00     .,...,...,...,..
  60:	e5 2c 00 00 e5 2c 00 00 4d ac 00 00 e5 2c 00 00     .,...,..M....,..
  70:	e5 2c 00 00 e5 2c 00 00 e5 2c 00 00 e5 2c 00 00     .,...,...,...,..
  80:	e5 2c 00 00 e5 2c 00 00 e5 2c 00 00 e5 2c 00 00     .,...,...,...,..
  90:	e9 58 00 00 e5 2c 00 00 e5 2c 00 00 e5 2c 00 00     .X...,...,...,..
  a0:	e5 2c 00 00 e5 2c 00 00 e5 2c 00 00 e5 2c 00 00     .,...,...,...,..
  b0:	e5 2c 00 00 e5 2c 00 00 e5 2c 00 00 e5 2c 00 00     .,...,...,...,..
  c0:	e5 2c 00 00 e5 2c 00 00 e5 2c 00 00 e5 2c 00 00     .,...,...,...,..
  d0:	e5 2c 00 00 e5 2c 00 00 e5 2c 00 00 e5 2c 00 00     .,...,...,...,..

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295
      f0:	f04f 30ff 	movne.w	r0, #4294967295
      f4:	f000 b80c 	b.w	110 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f808 	bl	114 <__udivmoddi4>
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__aeabi_idiv0>:
     110:	4770      	bx	lr
     112:	bf00      	nop

00000114 <__udivmoddi4>:
     114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     118:	4607      	mov	r7, r0
     11a:	468c      	mov	ip, r1
     11c:	4608      	mov	r0, r1
     11e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     120:	4615      	mov	r5, r2
     122:	463c      	mov	r4, r7
     124:	4619      	mov	r1, r3
     126:	2b00      	cmp	r3, #0
     128:	f040 80c6 	bne.w	2b8 <CONFIG_USB_DEVICE_PID+0x98>
     12c:	4282      	cmp	r2, r0
     12e:	fab2 f782 	clz	r7, r2
     132:	d946      	bls.n	1c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x55>
     134:	b14f      	cbz	r7, 14a <__udivmoddi4+0x36>
     136:	f1c7 0e20 	rsb	lr, r7, #32
     13a:	fa24 fe0e 	lsr.w	lr, r4, lr
     13e:	fa00 f307 	lsl.w	r3, r0, r7
     142:	40bd      	lsls	r5, r7
     144:	ea4e 0c03 	orr.w	ip, lr, r3
     148:	40bc      	lsls	r4, r7
     14a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     14e:	fa1f fe85 	uxth.w	lr, r5
     152:	fbbc f9f8 	udiv	r9, ip, r8
     156:	0c22      	lsrs	r2, r4, #16
     158:	fb08 c319 	mls	r3, r8, r9, ip
     15c:	fb09 fa0e 	mul.w	sl, r9, lr
     160:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     164:	459a      	cmp	sl, r3
     166:	d928      	bls.n	1ba <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4d>
     168:	18eb      	adds	r3, r5, r3
     16a:	f109 30ff 	add.w	r0, r9, #4294967295
     16e:	d204      	bcs.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     170:	459a      	cmp	sl, r3
     172:	d902      	bls.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     174:	f1a9 0002 	sub.w	r0, r9, #2
     178:	442b      	add	r3, r5
     17a:	eba3 030a 	sub.w	r3, r3, sl
     17e:	b2a4      	uxth	r4, r4
     180:	fbb3 f2f8 	udiv	r2, r3, r8
     184:	fb08 3312 	mls	r3, r8, r2, r3
     188:	fb02 fe0e 	mul.w	lr, r2, lr
     18c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     190:	45a6      	cmp	lr, r4
     192:	d914      	bls.n	1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     194:	192c      	adds	r4, r5, r4
     196:	f102 33ff 	add.w	r3, r2, #4294967295
     19a:	d203      	bcs.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     19c:	45a6      	cmp	lr, r4
     19e:	d901      	bls.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     1a0:	1e93      	subs	r3, r2, #2
     1a2:	442c      	add	r4, r5
     1a4:	eba4 040e 	sub.w	r4, r4, lr
     1a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1ac:	b11e      	cbz	r6, 1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     1ae:	40fc      	lsrs	r4, r7
     1b0:	2300      	movs	r3, #0
     1b2:	6034      	str	r4, [r6, #0]
     1b4:	6073      	str	r3, [r6, #4]
     1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1ba:	4648      	mov	r0, r9
     1bc:	e7dd      	b.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     1be:	4613      	mov	r3, r2
     1c0:	e7f0      	b.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     1c2:	b902      	cbnz	r2, 1c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x59>
     1c4:	deff      	udf	#255	; 0xff
     1c6:	bb87      	cbnz	r7, 22a <CONFIG_USB_DEVICE_PID+0xa>
     1c8:	1a83      	subs	r3, r0, r2
     1ca:	2101      	movs	r1, #1
     1cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1d0:	b2aa      	uxth	r2, r5
     1d2:	fbb3 fcfe 	udiv	ip, r3, lr
     1d6:	0c20      	lsrs	r0, r4, #16
     1d8:	fb0e 331c 	mls	r3, lr, ip, r3
     1dc:	fb0c f802 	mul.w	r8, ip, r2
     1e0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1e4:	4598      	cmp	r8, r3
     1e6:	d963      	bls.n	2b0 <CONFIG_USB_DEVICE_PID+0x90>
     1e8:	18eb      	adds	r3, r5, r3
     1ea:	f10c 30ff 	add.w	r0, ip, #4294967295
     1ee:	d204      	bcs.n	1fa <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6>
     1f0:	4598      	cmp	r8, r3
     1f2:	d902      	bls.n	1fa <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6>
     1f4:	f1ac 0002 	sub.w	r0, ip, #2
     1f8:	442b      	add	r3, r5
     1fa:	eba3 0308 	sub.w	r3, r3, r8
     1fe:	b2a4      	uxth	r4, r4
     200:	fbb3 fcfe 	udiv	ip, r3, lr
     204:	fb0e 331c 	mls	r3, lr, ip, r3
     208:	fb0c f202 	mul.w	r2, ip, r2
     20c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     210:	42a2      	cmp	r2, r4
     212:	d94f      	bls.n	2b4 <CONFIG_USB_DEVICE_PID+0x94>
     214:	192c      	adds	r4, r5, r4
     216:	f10c 33ff 	add.w	r3, ip, #4294967295
     21a:	d204      	bcs.n	226 <CONFIG_USB_DEVICE_PID+0x6>
     21c:	42a2      	cmp	r2, r4
     21e:	d902      	bls.n	226 <CONFIG_USB_DEVICE_PID+0x6>
     220:	f1ac 0302 	sub.w	r3, ip, #2
     224:	442c      	add	r4, r5
     226:	1aa4      	subs	r4, r4, r2
     228:	e7be      	b.n	1a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3b>
     22a:	f1c7 0c20 	rsb	ip, r7, #32
     22e:	fa20 f80c 	lsr.w	r8, r0, ip
     232:	fa00 f307 	lsl.w	r3, r0, r7
     236:	fa24 fc0c 	lsr.w	ip, r4, ip
     23a:	40bd      	lsls	r5, r7
     23c:	ea4c 0203 	orr.w	r2, ip, r3
     240:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     244:	b2ab      	uxth	r3, r5
     246:	fbb8 fcfe 	udiv	ip, r8, lr
     24a:	0c11      	lsrs	r1, r2, #16
     24c:	fb0e 801c 	mls	r0, lr, ip, r8
     250:	fb0c f903 	mul.w	r9, ip, r3
     254:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     258:	4581      	cmp	r9, r0
     25a:	fa04 f407 	lsl.w	r4, r4, r7
     25e:	d923      	bls.n	2a8 <CONFIG_USB_DEVICE_PID+0x88>
     260:	1828      	adds	r0, r5, r0
     262:	f10c 31ff 	add.w	r1, ip, #4294967295
     266:	d204      	bcs.n	272 <CONFIG_USB_DEVICE_PID+0x52>
     268:	4581      	cmp	r9, r0
     26a:	d902      	bls.n	272 <CONFIG_USB_DEVICE_PID+0x52>
     26c:	f1ac 0102 	sub.w	r1, ip, #2
     270:	4428      	add	r0, r5
     272:	eba0 0009 	sub.w	r0, r0, r9
     276:	b292      	uxth	r2, r2
     278:	fbb0 fcfe 	udiv	ip, r0, lr
     27c:	fb0e 001c 	mls	r0, lr, ip, r0
     280:	fb0c f803 	mul.w	r8, ip, r3
     284:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     288:	4598      	cmp	r8, r3
     28a:	d90f      	bls.n	2ac <CONFIG_USB_DEVICE_PID+0x8c>
     28c:	18eb      	adds	r3, r5, r3
     28e:	f10c 32ff 	add.w	r2, ip, #4294967295
     292:	d204      	bcs.n	29e <CONFIG_USB_DEVICE_PID+0x7e>
     294:	4598      	cmp	r8, r3
     296:	d902      	bls.n	29e <CONFIG_USB_DEVICE_PID+0x7e>
     298:	f1ac 0202 	sub.w	r2, ip, #2
     29c:	442b      	add	r3, r5
     29e:	eba3 0308 	sub.w	r3, r3, r8
     2a2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2a6:	e791      	b.n	1cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5f>
     2a8:	4661      	mov	r1, ip
     2aa:	e7e2      	b.n	272 <CONFIG_USB_DEVICE_PID+0x52>
     2ac:	4662      	mov	r2, ip
     2ae:	e7f6      	b.n	29e <CONFIG_USB_DEVICE_PID+0x7e>
     2b0:	4660      	mov	r0, ip
     2b2:	e7a2      	b.n	1fa <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6>
     2b4:	4663      	mov	r3, ip
     2b6:	e7b6      	b.n	226 <CONFIG_USB_DEVICE_PID+0x6>
     2b8:	4283      	cmp	r3, r0
     2ba:	d905      	bls.n	2c8 <CONFIG_USB_DEVICE_PID+0xa8>
     2bc:	b10e      	cbz	r6, 2c2 <CONFIG_USB_DEVICE_PID+0xa2>
     2be:	e9c6 7000 	strd	r7, r0, [r6]
     2c2:	2100      	movs	r1, #0
     2c4:	4608      	mov	r0, r1
     2c6:	e776      	b.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     2c8:	fab3 f183 	clz	r1, r3
     2cc:	b981      	cbnz	r1, 2f0 <CONFIG_USB_DEVICE_PID+0xd0>
     2ce:	4283      	cmp	r3, r0
     2d0:	d301      	bcc.n	2d6 <CONFIG_USB_DEVICE_PID+0xb6>
     2d2:	42ba      	cmp	r2, r7
     2d4:	d80a      	bhi.n	2ec <CONFIG_USB_DEVICE_PID+0xcc>
     2d6:	1abc      	subs	r4, r7, r2
     2d8:	eb60 0303 	sbc.w	r3, r0, r3
     2dc:	2001      	movs	r0, #1
     2de:	469c      	mov	ip, r3
     2e0:	2e00      	cmp	r6, #0
     2e2:	d068      	beq.n	3b6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb6>
     2e4:	e9c6 4c00 	strd	r4, ip, [r6]
     2e8:	2100      	movs	r1, #0
     2ea:	e764      	b.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     2ec:	4608      	mov	r0, r1
     2ee:	e7f7      	b.n	2e0 <CONFIG_USB_DEVICE_PID+0xc0>
     2f0:	f1c1 0c20 	rsb	ip, r1, #32
     2f4:	408b      	lsls	r3, r1
     2f6:	fa22 f40c 	lsr.w	r4, r2, ip
     2fa:	431c      	orrs	r4, r3
     2fc:	fa02 f501 	lsl.w	r5, r2, r1
     300:	fa00 f301 	lsl.w	r3, r0, r1
     304:	fa27 f20c 	lsr.w	r2, r7, ip
     308:	fa20 fb0c 	lsr.w	fp, r0, ip
     30c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     310:	4313      	orrs	r3, r2
     312:	fbbb f8f9 	udiv	r8, fp, r9
     316:	fa1f fe84 	uxth.w	lr, r4
     31a:	fb09 bb18 	mls	fp, r9, r8, fp
     31e:	0c1a      	lsrs	r2, r3, #16
     320:	fb08 fa0e 	mul.w	sl, r8, lr
     324:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     328:	4592      	cmp	sl, r2
     32a:	fa07 f701 	lsl.w	r7, r7, r1
     32e:	d93e      	bls.n	3ae <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xae>
     330:	18a2      	adds	r2, r4, r2
     332:	f108 30ff 	add.w	r0, r8, #4294967295
     336:	d204      	bcs.n	342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     338:	4592      	cmp	sl, r2
     33a:	d902      	bls.n	342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     33c:	f1a8 0002 	sub.w	r0, r8, #2
     340:	4422      	add	r2, r4
     342:	eba2 020a 	sub.w	r2, r2, sl
     346:	b29b      	uxth	r3, r3
     348:	fbb2 f8f9 	udiv	r8, r2, r9
     34c:	fb09 2218 	mls	r2, r9, r8, r2
     350:	fb08 fe0e 	mul.w	lr, r8, lr
     354:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     358:	4596      	cmp	lr, r2
     35a:	d92a      	bls.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     35c:	18a2      	adds	r2, r4, r2
     35e:	f108 33ff 	add.w	r3, r8, #4294967295
     362:	d204      	bcs.n	36e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6e>
     364:	4596      	cmp	lr, r2
     366:	d902      	bls.n	36e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6e>
     368:	f1a8 0302 	sub.w	r3, r8, #2
     36c:	4422      	add	r2, r4
     36e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     372:	fba0 9305 	umull	r9, r3, r0, r5
     376:	eba2 020e 	sub.w	r2, r2, lr
     37a:	429a      	cmp	r2, r3
     37c:	46ce      	mov	lr, r9
     37e:	4698      	mov	r8, r3
     380:	d302      	bcc.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>
     382:	d106      	bne.n	392 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x92>
     384:	454f      	cmp	r7, r9
     386:	d204      	bcs.n	392 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x92>
     388:	ebb9 0e05 	subs.w	lr, r9, r5
     38c:	eb63 0804 	sbc.w	r8, r3, r4
     390:	3801      	subs	r0, #1
     392:	b186      	cbz	r6, 3b6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb6>
     394:	ebb7 030e 	subs.w	r3, r7, lr
     398:	eb62 0708 	sbc.w	r7, r2, r8
     39c:	fa07 fc0c 	lsl.w	ip, r7, ip
     3a0:	40cb      	lsrs	r3, r1
     3a2:	ea4c 0303 	orr.w	r3, ip, r3
     3a6:	40cf      	lsrs	r7, r1
     3a8:	e9c6 3700 	strd	r3, r7, [r6]
     3ac:	e79c      	b.n	2e8 <CONFIG_USB_DEVICE_PID+0xc8>
     3ae:	4640      	mov	r0, r8
     3b0:	e7c7      	b.n	342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     3b2:	4643      	mov	r3, r8
     3b4:	e7db      	b.n	36e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6e>
     3b6:	4631      	mov	r1, r6
     3b8:	e6fd      	b.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
	...

000003bc <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     3c0:	b08d      	sub	sp, #52	; 0x34
     3c2:	461f      	mov	r7, r3
     3c4:	9b16      	ldr	r3, [sp, #88]	; 0x58
     3c6:	9202      	str	r2, [sp, #8]
     3c8:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     3ca:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     3ce:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     3d2:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     3d4:	1c53      	adds	r3, r2, #1

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     3d6:	0782      	lsls	r2, r0, #30
{
     3d8:	4605      	mov	r5, r0
     3da:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     3dc:	9304      	str	r3, [sp, #16]
	if ((uintptr_t)packaged % sizeof(void *)) {
     3de:	f040 8221 	bne.w	824 <CONFIG_ISR_STACK_SIZE+0x24>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     3e2:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     3e4:	2800      	cmp	r0, #0
     3e6:	f040 8220 	bne.w	82a <CONFIG_ISR_STACK_SIZE+0x2a>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     3ea:	f001 0607 	and.w	r6, r1, #7
     3ee:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     3f0:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     3f4:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
     3f8:	f04f 0804 	mov.w	r8, #4
	s = fmt--;
     3fc:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     3fe:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     402:	4652      	mov	r2, sl
	bool parsing = false;
     404:	46d1      	mov	r9, sl
	size = sizeof(char *);
     406:	4641      	mov	r1, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     408:	b105      	cbz	r5, 40c <CONFIG_LOG_BUFFER_SIZE+0xc>
				*(const char **)buf = s;
     40a:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     40c:	9804      	ldr	r0, [sp, #16]
     40e:	2800      	cmp	r0, #0
     410:	dc07      	bgt.n	422 <CONFIG_LOG_BUFFER_SIZE+0x22>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     412:	48cb      	ldr	r0, [pc, #812]	; (740 <CONFIG_PMW3360_CPI+0x100>)
     414:	4287      	cmp	r7, r0
     416:	f0c0 8141 	bcc.w	69c <CONFIG_PMW3360_CPI+0x5c>
     41a:	48ca      	ldr	r0, [pc, #808]	; (744 <CONFIG_PMW3360_CPI+0x104>)
     41c:	4287      	cmp	r7, r0
     41e:	f080 813d 	bcs.w	69c <CONFIG_PMW3360_CPI+0x5c>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     422:	9802      	ldr	r0, [sp, #8]
     424:	f010 0e02 	ands.w	lr, r0, #2
     428:	f000 8151 	beq.w	6ce <CONFIG_PMW3360_CPI+0x8e>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     42c:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     430:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     432:	f1be 0f00 	cmp.w	lr, #0
     436:	f000 8137 	beq.w	6a8 <CONFIG_PMW3360_CPI+0x68>
     43a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
     43e:	f0c0 8133 	bcc.w	6a8 <CONFIG_PMW3360_CPI+0x68>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
     442:	f06f 0015 	mvn.w	r0, #21
     446:	e0fe      	b.n	646 <CONFIG_PMW3360_CPI+0x6>
		if (!parsing) {
     448:	f1b9 0f00 	cmp.w	r9, #0
     44c:	d108      	bne.n	460 <CONFIG_LOG_BUFFER_SIZE+0x60>
			if (*fmt == '%') {
     44e:	2825      	cmp	r0, #37	; 0x25
     450:	f040 8141 	bne.w	6d6 <CONFIG_PMW3360_CPI+0x96>
				parsing = true;
     454:	f04f 0901 	mov.w	r9, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
     458:	f04f 0804 	mov.w	r8, #4
			size = sizeof(intmax_t);
     45c:	4641      	mov	r1, r8
     45e:	e13a      	b.n	6d6 <CONFIG_PMW3360_CPI+0x96>
		switch (*fmt) {
     460:	282b      	cmp	r0, #43	; 0x2b
     462:	d825      	bhi.n	4b0 <CONFIG_LOG_BUFFER_SIZE+0xb0>
     464:	281f      	cmp	r0, #31
     466:	d802      	bhi.n	46e <CONFIG_LOG_BUFFER_SIZE+0x6e>
			parsing = false;
     468:	f04f 0900 	mov.w	r9, #0
     46c:	e133      	b.n	6d6 <CONFIG_PMW3360_CPI+0x96>
		switch (*fmt) {
     46e:	f1a0 0c20 	sub.w	ip, r0, #32
     472:	f1bc 0f0b 	cmp.w	ip, #11
     476:	d8f7      	bhi.n	468 <CONFIG_LOG_BUFFER_SIZE+0x68>
     478:	f20f 0e04 	addw	lr, pc, #4
     47c:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
     480:	000006d7 	.word	0x000006d7
     484:	00000469 	.word	0x00000469
     488:	00000469 	.word	0x00000469
     48c:	000006d7 	.word	0x000006d7
     490:	00000469 	.word	0x00000469
     494:	00000469 	.word	0x00000469
     498:	00000469 	.word	0x00000469
     49c:	00000469 	.word	0x00000469
     4a0:	00000469 	.word	0x00000469
     4a4:	00000469 	.word	0x00000469
     4a8:	00000667 	.word	0x00000667
     4ac:	000006d7 	.word	0x000006d7
     4b0:	f1a0 0c2d 	sub.w	ip, r0, #45	; 0x2d
     4b4:	fa5f fe8c 	uxtb.w	lr, ip
     4b8:	f1be 0f4d 	cmp.w	lr, #77	; 0x4d
     4bc:	d8d4      	bhi.n	468 <CONFIG_LOG_BUFFER_SIZE+0x68>
     4be:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
     4c2:	d8d1      	bhi.n	468 <CONFIG_LOG_BUFFER_SIZE+0x68>
     4c4:	f20f 0e04 	addw	lr, pc, #4
     4c8:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
     4cc:	000006d7 	.word	0x000006d7
     4d0:	000006d7 	.word	0x000006d7
     4d4:	00000469 	.word	0x00000469
     4d8:	000006d7 	.word	0x000006d7
     4dc:	000006d7 	.word	0x000006d7
     4e0:	000006d7 	.word	0x000006d7
     4e4:	000006d7 	.word	0x000006d7
     4e8:	000006d7 	.word	0x000006d7
     4ec:	000006d7 	.word	0x000006d7
     4f0:	000006d7 	.word	0x000006d7
     4f4:	000006d7 	.word	0x000006d7
     4f8:	000006d7 	.word	0x000006d7
     4fc:	000006d7 	.word	0x000006d7
     500:	00000469 	.word	0x00000469
     504:	00000469 	.word	0x00000469
     508:	00000469 	.word	0x00000469
     50c:	00000469 	.word	0x00000469
     510:	00000469 	.word	0x00000469
     514:	00000469 	.word	0x00000469
     518:	00000469 	.word	0x00000469
     51c:	00000623 	.word	0x00000623
     520:	00000469 	.word	0x00000469
     524:	00000469 	.word	0x00000469
     528:	00000469 	.word	0x00000469
     52c:	00000623 	.word	0x00000623
     530:	00000623 	.word	0x00000623
     534:	00000623 	.word	0x00000623
     538:	00000469 	.word	0x00000469
     53c:	00000469 	.word	0x00000469
     540:	00000469 	.word	0x00000469
     544:	00000469 	.word	0x00000469
     548:	000006d7 	.word	0x000006d7
     54c:	00000469 	.word	0x00000469
     550:	00000469 	.word	0x00000469
     554:	00000469 	.word	0x00000469
     558:	00000469 	.word	0x00000469
     55c:	00000469 	.word	0x00000469
     560:	00000469 	.word	0x00000469
     564:	00000469 	.word	0x00000469
     568:	00000469 	.word	0x00000469
     56c:	00000469 	.word	0x00000469
     570:	00000469 	.word	0x00000469
     574:	00000469 	.word	0x00000469
     578:	00000605 	.word	0x00000605
     57c:	00000469 	.word	0x00000469
     580:	00000469 	.word	0x00000469
     584:	00000469 	.word	0x00000469
     588:	00000469 	.word	0x00000469
     58c:	00000469 	.word	0x00000469
     590:	00000469 	.word	0x00000469
     594:	00000469 	.word	0x00000469
     598:	00000469 	.word	0x00000469
     59c:	00000623 	.word	0x00000623
     5a0:	00000469 	.word	0x00000469
     5a4:	00000605 	.word	0x00000605
     5a8:	00000605 	.word	0x00000605
     5ac:	00000623 	.word	0x00000623
     5b0:	00000623 	.word	0x00000623
     5b4:	00000623 	.word	0x00000623
     5b8:	000006d7 	.word	0x000006d7
     5bc:	00000605 	.word	0x00000605
     5c0:	00000657 	.word	0x00000657
     5c4:	00000469 	.word	0x00000469
     5c8:	000006d7 	.word	0x000006d7
     5cc:	00000469 	.word	0x00000469
     5d0:	0000065d 	.word	0x0000065d
     5d4:	00000605 	.word	0x00000605
     5d8:	0000065d 	.word	0x0000065d
     5dc:	00000469 	.word	0x00000469
     5e0:	00000469 	.word	0x00000469
     5e4:	0000065d 	.word	0x0000065d
     5e8:	00000459 	.word	0x00000459
     5ec:	00000605 	.word	0x00000605
     5f0:	00000469 	.word	0x00000469
     5f4:	00000469 	.word	0x00000469
     5f8:	00000605 	.word	0x00000605
     5fc:	00000469 	.word	0x00000469
     600:	00000459 	.word	0x00000459
			if (fmt[-1] == 'l') {
     604:	f813 cc01 	ldrb.w	ip, [r3, #-1]
     608:	f1bc 0f6c 	cmp.w	ip, #108	; 0x6c
     60c:	d129      	bne.n	662 <CONFIG_PMW3360_CPI+0x22>
				if (fmt[-2] == 'l') {
     60e:	f813 1c02 	ldrb.w	r1, [r3, #-2]
     612:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
     614:	f04f 0900 	mov.w	r9, #0
				if (fmt[-2] == 'l') {
     618:	d03d      	beq.n	696 <CONFIG_PMW3360_CPI+0x56>
			align = VA_STACK_ALIGN(void *);
     61a:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long long);
     61e:	4641      	mov	r1, r8
     620:	e021      	b.n	666 <CONFIG_PMW3360_CPI+0x26>
				v.ld = va_arg(ap, long double);
     622:	9800      	ldr	r0, [sp, #0]
     624:	f100 0b07 	add.w	fp, r0, #7
     628:	f02b 0007 	bic.w	r0, fp, #7
     62c:	e8f0 8902 	ldrd	r8, r9, [r0], #8
			buf = (void *) ROUND_UP(buf, align);
     630:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
     632:	9000      	str	r0, [sp, #0]
			buf = (void *) ROUND_UP(buf, align);
     634:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
     638:	b155      	cbz	r5, 650 <CONFIG_PMW3360_CPI+0x10>
				if (BUF_OFFSET + size > len) {
     63a:	9805      	ldr	r0, [sp, #20]
     63c:	4420      	add	r0, r4
     63e:	42b0      	cmp	r0, r6
     640:	d904      	bls.n	64c <CONFIG_PMW3360_CPI+0xc>
					return -ENOSPC;
     642:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     646:	b00d      	add	sp, #52	; 0x34
     648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
     64c:	e9c4 8900 	strd	r8, r9, [r4]
			buf += size;
     650:	3408      	adds	r4, #8
			parsing = false;
     652:	f04f 0900 	mov.w	r9, #0
			align = VA_STACK_ALIGN(intmax_t);
     656:	f04f 0808 	mov.w	r8, #8
     65a:	e6ff      	b.n	45c <CONFIG_LOG_BUFFER_SIZE+0x5c>
			parsing = false;
     65c:	f04f 0900 	mov.w	r9, #0
     660:	e7db      	b.n	61a <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x132>
			parsing = false;
     662:	f04f 0900 	mov.w	r9, #0
		buf = (void *) ROUND_UP(buf, align);
     666:	3c01      	subs	r4, #1
     668:	4444      	add	r4, r8
     66a:	f1c8 0c00 	rsb	ip, r8, #0
     66e:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     672:	b125      	cbz	r5, 67e <CONFIG_PMW3360_CPI+0x3e>
     674:	eba1 0c05 	sub.w	ip, r1, r5
     678:	44a4      	add	ip, r4
     67a:	45b4      	cmp	ip, r6
     67c:	d8e1      	bhi.n	642 <CONFIG_PMW3360_CPI+0x2>
		if (*fmt == 's') {
     67e:	2873      	cmp	r0, #115	; 0x73
     680:	d152      	bne.n	728 <CONFIG_PMW3360_CPI+0xe8>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     682:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
     684:	f8dd b000 	ldr.w	fp, [sp]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     688:	3801      	subs	r0, #1
			s = va_arg(ap, char *);
     68a:	f85b 7b04 	ldr.w	r7, [fp], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     68e:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
     690:	f8cd b000 	str.w	fp, [sp]
     694:	e6b8      	b.n	408 <CONFIG_LOG_BUFFER_SIZE+0x8>
					align = VA_STACK_ALIGN(long long);
     696:	f04f 0808 	mov.w	r8, #8
     69a:	e7c0      	b.n	61e <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x136>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     69c:	9802      	ldr	r0, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     69e:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     6a2:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
     6a6:	e6c3      	b.n	430 <CONFIG_LOG_BUFFER_SIZE+0x30>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     6a8:	2a0f      	cmp	r2, #15
     6aa:	f63f aeca 	bhi.w	442 <CONFIG_LOG_BUFFER_SIZE+0x42>
				if (buf0 != NULL) {
     6ae:	b345      	cbz	r5, 702 <CONFIG_PMW3360_CPI+0xc2>
					str_ptr_pos[s_idx] = s_ptr_idx;
     6b0:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
     6b4:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
     6b8:	4496      	add	lr, r2
     6ba:	f1bc 0f00 	cmp.w	ip, #0
     6be:	d01a      	beq.n	6f6 <CONFIG_PMW3360_CPI+0xb6>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     6c0:	f060 007f 	orn	r0, r0, #127	; 0x7f
     6c4:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
     6c8:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
     6cc:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
     6ce:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
     6d2:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
     6d4:	9005      	str	r0, [sp, #20]
	while (*++fmt != '\0') {
     6d6:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     6da:	2800      	cmp	r0, #0
     6dc:	f47f aeb4 	bne.w	448 <CONFIG_LOG_BUFFER_SIZE+0x48>
	if (BUF_OFFSET / sizeof(int) > 255) {
     6e0:	1b61      	subs	r1, r4, r5
     6e2:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
     6e6:	f4bf aeac 	bcs.w	442 <CONFIG_LOG_BUFFER_SIZE+0x42>
	if (buf0 == NULL) {
     6ea:	2d00      	cmp	r5, #0
     6ec:	d13e      	bne.n	76c <CONFIG_PMW3360_CPI+0x12c>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     6ee:	f1a6 0408 	sub.w	r4, r6, #8
     6f2:	1860      	adds	r0, r4, r1
     6f4:	e7a7      	b.n	646 <CONFIG_PMW3360_CPI+0x6>
					str_ptr_pos[s_idx] = s_ptr_idx;
     6f6:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
     6fa:	9803      	ldr	r0, [sp, #12]
     6fc:	3001      	adds	r0, #1
     6fe:	9003      	str	r0, [sp, #12]
     700:	e7e4      	b.n	6cc <CONFIG_PMW3360_CPI+0x8c>
				} else if (is_ro || rws_pos_en) {
     702:	f1bc 0f00 	cmp.w	ip, #0
     706:	d101      	bne.n	70c <CONFIG_PMW3360_CPI+0xcc>
     708:	9801      	ldr	r0, [sp, #4]
     70a:	b108      	cbz	r0, 710 <CONFIG_PMW3360_CPI+0xd0>
					len += 1;
     70c:	3601      	adds	r6, #1
     70e:	e7dd      	b.n	6cc <CONFIG_PMW3360_CPI+0x8c>
					len += strlen(s) + 1 + 1;
     710:	4638      	mov	r0, r7
     712:	e9cd 1206 	strd	r1, r2, [sp, #24]
     716:	9305      	str	r3, [sp, #20]
     718:	f00a f811 	bl	a73e <strlen>
     71c:	3602      	adds	r6, #2
     71e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
     722:	9b05      	ldr	r3, [sp, #20]
     724:	4406      	add	r6, r0
     726:	e7d1      	b.n	6cc <CONFIG_PMW3360_CPI+0x8c>
		} else if (size == sizeof(int)) {
     728:	2904      	cmp	r1, #4
     72a:	d10d      	bne.n	748 <CONFIG_PMW3360_CPI+0x108>
			int v = va_arg(ap, int);
     72c:	9800      	ldr	r0, [sp, #0]
     72e:	f100 0c04 	add.w	ip, r0, #4
			if (buf0 != NULL) {
     732:	b10d      	cbz	r5, 738 <CONFIG_PMW3360_CPI+0xf8>
			int v = va_arg(ap, int);
     734:	6800      	ldr	r0, [r0, #0]
				*(int *)buf = v;
     736:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
     738:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
     73a:	f8cd c000 	str.w	ip, [sp]
     73e:	e7ca      	b.n	6d6 <CONFIG_PMW3360_CPI+0x96>
     740:	0000b714 	.word	0x0000b714
     744:	0000deac 	.word	0x0000deac
		} else if (size == sizeof(long long)) {
     748:	2908      	cmp	r1, #8
     74a:	f47f ae7a 	bne.w	442 <CONFIG_LOG_BUFFER_SIZE+0x42>
			long long v = va_arg(ap, long long);
     74e:	9800      	ldr	r0, [sp, #0]
     750:	3007      	adds	r0, #7
     752:	f020 0007 	bic.w	r0, r0, #7
     756:	f100 0c08 	add.w	ip, r0, #8
     75a:	f8cd c000 	str.w	ip, [sp]
			if (buf0 != NULL) {
     75e:	b11d      	cbz	r5, 768 <CONFIG_PMW3360_CPI+0x128>
			long long v = va_arg(ap, long long);
     760:	e9d0 bc00 	ldrd	fp, ip, [r0]
     764:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
     768:	3408      	adds	r4, #8
     76a:	e7b4      	b.n	6d6 <CONFIG_PMW3360_CPI+0x96>
	if (rws_pos_en) {
     76c:	9b01      	ldr	r3, [sp, #4]
	*(char **)buf0 = NULL;
     76e:	6028      	str	r0, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
     770:	0889      	lsrs	r1, r1, #2
     772:	7029      	strb	r1, [r5, #0]
		buf0[3] = s_rw_cnt;
     774:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
     778:	b1a3      	cbz	r3, 7a4 <CONFIG_PMW3360_CPI+0x164>
		buf0[1] = 0;
     77a:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
     77c:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
     77e:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
     782:	f1ba 0f00 	cmp.w	sl, #0
     786:	d006      	beq.n	796 <CONFIG_PMW3360_CPI+0x156>
     788:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
     78a:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
     78e:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
     792:	4562      	cmp	r2, ip
     794:	d10a      	bne.n	7ac <CONFIG_PMW3360_CPI+0x16c>
     796:	f10d 0820 	add.w	r8, sp, #32
     79a:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
     79e:	f1c5 0b01 	rsb	fp, r5, #1
     7a2:	e039      	b.n	818 <CONFIG_ISR_STACK_SIZE+0x18>
		buf0[3] = 0;
     7a4:	9b01      	ldr	r3, [sp, #4]
		buf0[1] = s_rw_cnt;
     7a6:	7069      	strb	r1, [r5, #1]
		buf0[3] = 0;
     7a8:	70eb      	strb	r3, [r5, #3]
     7aa:	e7e8      	b.n	77e <CONFIG_PMW3360_CPI+0x13e>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     7ac:	f810 1b01 	ldrb.w	r1, [r0], #1
     7b0:	060b      	lsls	r3, r1, #24
     7b2:	d508      	bpl.n	7c6 <CONFIG_PMW3360_CPI+0x186>
			if (BUF_OFFSET + 1 > len) {
     7b4:	eb04 080e 	add.w	r8, r4, lr
     7b8:	45b0      	cmp	r8, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     7ba:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     7be:	f63f af40 	bhi.w	642 <CONFIG_PMW3360_CPI+0x2>
			*buf++ = pos;
     7c2:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
     7c6:	f10c 0c01 	add.w	ip, ip, #1
     7ca:	e7e2      	b.n	792 <CONFIG_PMW3360_CPI+0x152>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     7cc:	f1ba 0f00 	cmp.w	sl, #0
     7d0:	d003      	beq.n	7da <CONFIG_PMW3360_CPI+0x19a>
     7d2:	f998 2000 	ldrsb.w	r2, [r8]
     7d6:	2a00      	cmp	r2, #0
     7d8:	db1c      	blt.n	814 <CONFIG_ISR_STACK_SIZE+0x14>
		if (rws_pos_en) {
     7da:	9b01      	ldr	r3, [sp, #4]
     7dc:	bb03      	cbnz	r3, 820 <CONFIG_ISR_STACK_SIZE+0x20>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     7de:	f898 2000 	ldrb.w	r2, [r8]
     7e2:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     7e6:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
     7ea:	4638      	mov	r0, r7
     7ec:	f009 ffa7 	bl	a73e <strlen>
     7f0:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
     7f2:	eb04 010b 	add.w	r1, r4, fp
     7f6:	4411      	add	r1, r2
     7f8:	42b1      	cmp	r1, r6
     7fa:	f63f af22 	bhi.w	642 <CONFIG_PMW3360_CPI+0x2>
		*buf++ = str_ptr_pos[i];
     7fe:	f898 1000 	ldrb.w	r1, [r8]
     802:	f804 1b01 	strb.w	r1, [r4], #1
		memcpy(buf, s, size);
     806:	4639      	mov	r1, r7
     808:	4620      	mov	r0, r4
     80a:	9200      	str	r2, [sp, #0]
     80c:	f009 ffb3 	bl	a776 <memcpy>
		buf += size;
     810:	9a00      	ldr	r2, [sp, #0]
     812:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
     814:	f108 0801 	add.w	r8, r8, #1
     818:	45c1      	cmp	r9, r8
     81a:	d1d7      	bne.n	7cc <CONFIG_PMW3360_CPI+0x18c>
	return BUF_OFFSET;
     81c:	1b60      	subs	r0, r4, r5
     81e:	e712      	b.n	646 <CONFIG_PMW3360_CPI+0x6>
			size = 0;
     820:	2200      	movs	r2, #0
     822:	e7e6      	b.n	7f2 <CONFIG_PMW3360_CPI+0x1b2>
		return -EFAULT;
     824:	f06f 000d 	mvn.w	r0, #13
     828:	e70d      	b.n	646 <CONFIG_PMW3360_CPI+0x6>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     82a:	2907      	cmp	r1, #7
     82c:	f63f ade2 	bhi.w	3f4 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0xc>
     830:	e707      	b.n	642 <CONFIG_PMW3360_CPI+0x2>
     832:	bf00      	nop

00000834 <cbprintf_package_copy>:
			  void *packaged,
			  size_t len,
			  uint32_t flags,
			  uint16_t *strl,
			  size_t strl_len)
{
     834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     838:	b08b      	sub	sp, #44	; 0x2c
     83a:	4606      	mov	r6, r0
     83c:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
     840:	9304      	str	r3, [sp, #16]
     842:	4614      	mov	r4, r2
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;

	in_len != 0 ? in_len : get_package_len(in_packaged);
     844:	460f      	mov	r7, r1
     846:	b1b1      	cbz	r1, 876 <cbprintf_package_copy+0x42>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = buf[2];
     848:	78b5      	ldrb	r5, [r6, #2]
     84a:	9505      	str	r5, [sp, #20]
	ro_cpy = ros_nbr &&
     84c:	bb35      	cbnz	r5, 89c <cbprintf_package_copy+0x68>
     84e:	46aa      	mov	sl, r5
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = buf[3];
     850:	78f3      	ldrb	r3, [r6, #3]
     852:	9301      	str	r3, [sp, #4]
	rw_cpy = rws_nbr > 0 &&
     854:	b113      	cbz	r3, 85c <cbprintf_package_copy+0x28>

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
     856:	f01b 0f02 	tst.w	fp, #2
     85a:	d122      	bne.n	8a2 <cbprintf_package_copy+0x6e>
     85c:	f1ba 0f00 	cmp.w	sl, #0
     860:	d11f      	bne.n	8a2 <cbprintf_package_copy+0x6e>
		if (packaged) {
     862:	b124      	cbz	r4, 86e <cbprintf_package_copy+0x3a>
			memcpy(packaged, in_packaged, in_len);
     864:	463a      	mov	r2, r7
     866:	4631      	mov	r1, r6
     868:	4620      	mov	r0, r4
     86a:	f009 ff84 	bl	a776 <memcpy>
			}

			str_pos++;
		}

		return out_len;
     86e:	4638      	mov	r0, r7
		rem -= cpy_len;
		dst += cpy_len;
	}

	return len - rem;
}
     870:	b00b      	add	sp, #44	; 0x2c
     872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s_nbr     = buf[1];
     876:	f890 9001 	ldrb.w	r9, [r0, #1]
	buf += ros_nbr;
     87a:	78b5      	ldrb	r5, [r6, #2]
     87c:	7800      	ldrb	r0, [r0, #0]
     87e:	eb05 0580 	add.w	r5, r5, r0, lsl #2
     882:	4435      	add	r5, r6
	for (int i = 0; i < s_nbr; i++) {
     884:	468a      	mov	sl, r1
     886:	45ca      	cmp	sl, r9
     888:	d2de      	bcs.n	848 <cbprintf_package_copy+0x14>
		buf++;
     88a:	3501      	adds	r5, #1
		buf += strlen((const char *)buf) + 1;
     88c:	4628      	mov	r0, r5
     88e:	f009 ff56 	bl	a73e <strlen>
     892:	3001      	adds	r0, #1
     894:	4405      	add	r5, r0
	for (int i = 0; i < s_nbr; i++) {
     896:	f10a 0a01 	add.w	sl, sl, #1
     89a:	e7f4      	b.n	886 <cbprintf_package_copy+0x52>
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
     89c:	f00b 0a01 	and.w	sl, fp, #1
     8a0:	e7d6      	b.n	850 <cbprintf_package_copy+0x1c>
	args_size = buf[0] * sizeof(int);
     8a2:	f896 9000 	ldrb.w	r9, [r6]
     8a6:	ea4f 0389 	mov.w	r3, r9, lsl #2
     8aa:	9303      	str	r3, [sp, #12]
	uint8_t *str_pos = &buf[args_size];
     8ac:	eb06 0989 	add.w	r9, r6, r9, lsl #2
	if (packaged == NULL) {
     8b0:	2c00      	cmp	r4, #0
     8b2:	d15b      	bne.n	96c <cbprintf_package_copy+0x138>
		if (ro_cpy) {
     8b4:	f1ba 0f00 	cmp.w	sl, #0
     8b8:	d032      	beq.n	920 <cbprintf_package_copy+0xec>
     8ba:	444d      	add	r5, r9
			for (int i = 0; i < ros_nbr; i++) {
     8bc:	454d      	cmp	r5, r9
     8be:	d11d      	bne.n	8fc <cbprintf_package_copy+0xc8>
     8c0:	46a9      	mov	r9, r5
		bool drop_ro_str_pos = !(flags &
     8c2:	f8dd a004 	ldr.w	sl, [sp, #4]
     8c6:	f8df c204 	ldr.w	ip, [pc, #516]	; acc <cbprintf_package_copy+0x298>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     8ca:	4981      	ldr	r1, [pc, #516]	; (ad0 <cbprintf_package_copy+0x29c>)
		bool drop_ro_str_pos = !(flags &
     8cc:	f00b 0805 	and.w	r8, fp, #5
		for (int i = 0; i < rws_nbr; i++) {
     8d0:	464d      	mov	r5, r9
     8d2:	44ca      	add	sl, r9
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     8d4:	f00b 0202 	and.w	r2, fp, #2
		for (int i = 0; i < rws_nbr; i++) {
     8d8:	45aa      	cmp	sl, r5
     8da:	d0c8      	beq.n	86e <cbprintf_package_copy+0x3a>
			const char *str = *(const char **)&buf32[*str_pos];
     8dc:	f815 0b01 	ldrb.w	r0, [r5], #1
     8e0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
     8e4:	4560      	cmp	r0, ip
     8e6:	d324      	bcc.n	932 <cbprintf_package_copy+0xfe>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     8e8:	4288      	cmp	r0, r1
     8ea:	d222      	bcs.n	932 <cbprintf_package_copy+0xfe>
     8ec:	f01b 0f01 	tst.w	fp, #1
     8f0:	d139      	bne.n	966 <cbprintf_package_copy+0x132>
			if (is_ro && drop_ro_str_pos) {
     8f2:	f1b8 0f00 	cmp.w	r8, #0
     8f6:	d1ef      	bne.n	8d8 <cbprintf_package_copy+0xa4>
				out_len--;
     8f8:	3f01      	subs	r7, #1
		for (int i = 0; i < rws_nbr; i++) {
     8fa:	e7ed      	b.n	8d8 <cbprintf_package_copy+0xa4>
				const char *str = *(const char **)&buf32[*str_pos];
     8fc:	f819 3b01 	ldrb.w	r3, [r9], #1
		return 1 + strlen(str);
     900:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
     904:	f009 ff1b 	bl	a73e <strlen>
				if (strl && strl_cnt < strl_len) {
     908:	9b15      	ldr	r3, [sp, #84]	; 0x54
		return 1 + strlen(str);
     90a:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     90c:	b133      	cbz	r3, 91c <cbprintf_package_copy+0xe8>
     90e:	9b16      	ldr	r3, [sp, #88]	; 0x58
     910:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
     912:	bf3e      	ittt	cc
     914:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
     916:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
     91a:	3401      	addcc	r4, #1
				out_len += len;
     91c:	4407      	add	r7, r0
			for (int i = 0; i < ros_nbr; i++) {
     91e:	e7cd      	b.n	8bc <cbprintf_package_copy+0x88>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     920:	b12d      	cbz	r5, 92e <cbprintf_package_copy+0xfa>
     922:	f01b 0404 	ands.w	r4, fp, #4
     926:	d0cc      	beq.n	8c2 <cbprintf_package_copy+0x8e>
				str_pos += ros_nbr;
     928:	44a9      	add	r9, r5
	size_t strl_cnt = 0;
     92a:	4654      	mov	r4, sl
     92c:	e7c9      	b.n	8c2 <cbprintf_package_copy+0x8e>
     92e:	462c      	mov	r4, r5
     930:	e7c7      	b.n	8c2 <cbprintf_package_copy+0x8e>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     932:	2a00      	cmp	r2, #0
     934:	d0d0      	beq.n	8d8 <cbprintf_package_copy+0xa4>
     936:	f04f 0900 	mov.w	r9, #0
		return 1 + strlen(str);
     93a:	9201      	str	r2, [sp, #4]
     93c:	f009 feff 	bl	a73e <strlen>
				if (strl && strl_cnt < strl_len) {
     940:	9b15      	ldr	r3, [sp, #84]	; 0x54
     942:	f8df c188 	ldr.w	ip, [pc, #392]	; acc <cbprintf_package_copy+0x298>
     946:	9a01      	ldr	r2, [sp, #4]
     948:	4961      	ldr	r1, [pc, #388]	; (ad0 <cbprintf_package_copy+0x29c>)
		return 1 + strlen(str);
     94a:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     94c:	b133      	cbz	r3, 95c <cbprintf_package_copy+0x128>
     94e:	9b16      	ldr	r3, [sp, #88]	; 0x58
     950:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
     952:	bf3e      	ittt	cc
     954:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
     956:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
     95a:	3401      	addcc	r4, #1
				out_len += len;
     95c:	4407      	add	r7, r0
			if (is_ro && drop_ro_str_pos) {
     95e:	f1b9 0f00 	cmp.w	r9, #0
     962:	d0b9      	beq.n	8d8 <cbprintf_package_copy+0xa4>
     964:	e7c5      	b.n	8f2 <cbprintf_package_copy+0xbe>
     966:	f04f 0901 	mov.w	r9, #1
     96a:	e7e6      	b.n	93a <cbprintf_package_copy+0x106>
	memcpy(dst, in_packaged, args_size);
     96c:	9a03      	ldr	r2, [sp, #12]
     96e:	4631      	mov	r1, r6
     970:	4620      	mov	r0, r4
     972:	f009 ff00 	bl	a776 <memcpy>
	dst += args_size;
     976:	9b03      	ldr	r3, [sp, #12]
     978:	18e3      	adds	r3, r4, r3
     97a:	9302      	str	r3, [sp, #8]
	if (ro_cpy) {
     97c:	f1ba 0f00 	cmp.w	sl, #0
     980:	d00a      	beq.n	998 <cbprintf_package_copy+0x164>
		memcpy(cpy_str_pos, str_pos, ros_nbr);
     982:	4649      	mov	r1, r9
     984:	462a      	mov	r2, r5
     986:	a806      	add	r0, sp, #24
     988:	f009 fef5 	bl	a776 <memcpy>
		dst_hdr[2] = 0;
     98c:	2300      	movs	r3, #0
     98e:	70a3      	strb	r3, [r4, #2]
		str_pos += ros_nbr;
     990:	44a9      	add	r9, r5
	dst += args_size;
     992:	f8dd 8008 	ldr.w	r8, [sp, #8]
     996:	e00d      	b.n	9b4 <cbprintf_package_copy+0x180>
		if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     998:	b1bd      	cbz	r5, 9ca <cbprintf_package_copy+0x196>
     99a:	f01b 0f04 	tst.w	fp, #4
     99e:	d014      	beq.n	9ca <cbprintf_package_copy+0x196>
			memcpy(dst, str_pos, ros_nbr);
     9a0:	462a      	mov	r2, r5
     9a2:	4649      	mov	r1, r9
     9a4:	9802      	ldr	r0, [sp, #8]
     9a6:	f009 fee6 	bl	a776 <memcpy>
			dst += ros_nbr;
     9aa:	9b02      	ldr	r3, [sp, #8]
			str_pos += ros_nbr;
     9ac:	44a9      	add	r9, r5
			dst += ros_nbr;
     9ae:	eb03 0805 	add.w	r8, r3, r5
		scpy_cnt = 0;
     9b2:	4655      	mov	r5, sl
     9b4:	9b01      	ldr	r3, [sp, #4]
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     9b6:	f00b 0e02 	and.w	lr, fp, #2
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     9ba:	f00b 0001 	and.w	r0, fp, #1
     9be:	464a      	mov	r2, r9
     9c0:	eb09 0c03 	add.w	ip, r9, r3
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     9c4:	f00b 0b04 	and.w	fp, fp, #4
     9c8:	e025      	b.n	a16 <cbprintf_package_copy+0x1e2>
			dst_hdr[2] = 0;
     9ca:	2500      	movs	r5, #0
     9cc:	70a5      	strb	r5, [r4, #2]
     9ce:	e7e0      	b.n	992 <cbprintf_package_copy+0x15e>
		const char *str = *(const char **)&buf32[*str_pos];
     9d0:	f812 3b01 	ldrb.w	r3, [r2], #1
     9d4:	f8df a0f4 	ldr.w	sl, [pc, #244]	; acc <cbprintf_package_copy+0x298>
     9d8:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
     9dc:	4551      	cmp	r1, sl
     9de:	d303      	bcc.n	9e8 <cbprintf_package_copy+0x1b4>
     9e0:	f8df a0ec 	ldr.w	sl, [pc, #236]	; ad0 <cbprintf_package_copy+0x29c>
     9e4:	4551      	cmp	r1, sl
     9e6:	d305      	bcc.n	9f4 <cbprintf_package_copy+0x1c0>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     9e8:	f1be 0f00 	cmp.w	lr, #0
     9ec:	d103      	bne.n	9f6 <cbprintf_package_copy+0x1c2>
				*dst++ = *str_pos;
     9ee:	f808 3b01 	strb.w	r3, [r8], #1
	for (int i = 0; i < rws_nbr; i++) {
     9f2:	e010      	b.n	a16 <cbprintf_package_copy+0x1e2>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     9f4:	b138      	cbz	r0, a06 <cbprintf_package_copy+0x1d2>
				cpy_str_pos[scpy_cnt++] = *str_pos;
     9f6:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
     9fa:	1c69      	adds	r1, r5, #1
     9fc:	4455      	add	r5, sl
     9fe:	f805 3c10 	strb.w	r3, [r5, #-16]
     a02:	b2cd      	uxtb	r5, r1
     a04:	e007      	b.n	a16 <cbprintf_package_copy+0x1e2>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     a06:	f1bb 0f00 	cmp.w	fp, #0
     a0a:	d004      	beq.n	a16 <cbprintf_package_copy+0x1e2>
				*dst++ = *str_pos;
     a0c:	f808 3b01 	strb.w	r3, [r8], #1
				dst_hdr[2]++;
     a10:	78a3      	ldrb	r3, [r4, #2]
     a12:	3301      	adds	r3, #1
     a14:	70a3      	strb	r3, [r4, #2]
	for (int i = 0; i < rws_nbr; i++) {
     a16:	4594      	cmp	ip, r2
     a18:	d1da      	bne.n	9d0 <cbprintf_package_copy+0x19c>
	dst_hdr[1] += scpy_cnt;
     a1a:	7863      	ldrb	r3, [r4, #1]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     a1c:	9a01      	ldr	r2, [sp, #4]
	dst_hdr[1] += scpy_cnt;
     a1e:	442b      	add	r3, r5
     a20:	7063      	strb	r3, [r4, #1]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
     a22:	9b02      	ldr	r3, [sp, #8]
     a24:	eba8 0b03 	sub.w	fp, r8, r3
     a28:	78a3      	ldrb	r3, [r4, #2]
     a2a:	ebab 0b03 	sub.w	fp, fp, r3
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     a2e:	9b05      	ldr	r3, [sp, #20]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
     a30:	f884 b003 	strb.w	fp, [r4, #3]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     a34:	4413      	add	r3, r2
     a36:	1aff      	subs	r7, r7, r3
     a38:	9b03      	ldr	r3, [sp, #12]
     a3a:	1aff      	subs	r7, r7, r3
	memcpy(dst, str_pos, strs_len);
     a3c:	9b01      	ldr	r3, [sp, #4]
     a3e:	4640      	mov	r0, r8
     a40:	463a      	mov	r2, r7
     a42:	eb09 0103 	add.w	r1, r9, r3
	dst += strs_len;
     a46:	44b8      	add	r8, r7
	memcpy(dst, str_pos, strs_len);
     a48:	f009 fe95 	bl	a776 <memcpy>
		return dst - dst_hdr;
     a4c:	eba8 0004 	sub.w	r0, r8, r4
	if (scpy_cnt == 0) {
     a50:	2d00      	cmp	r5, #0
     a52:	f43f af0d 	beq.w	870 <cbprintf_package_copy+0x3c>
	size_t rem = len - ((size_t)(uintptr_t)(dst - dst_hdr));
     a56:	9b04      	ldr	r3, [sp, #16]
     a58:	1a1c      	subs	r4, r3, r0
	if (rem <= scpy_cnt) {
     a5a:	42a5      	cmp	r5, r4
     a5c:	d302      	bcc.n	a64 <cbprintf_package_copy+0x230>
		return -ENOSPC;
     a5e:	f06f 001b 	mvn.w	r0, #27
     a62:	e705      	b.n	870 <cbprintf_package_copy+0x3c>
	for (int i = 0; i < scpy_cnt; i++) {
     a64:	f04f 0900 	mov.w	r9, #0
		uint8_t loc = cpy_str_pos[i];
     a68:	ab06      	add	r3, sp, #24
		uint16_t str_len = strl ? strl[i] : 0;
     a6a:	9a15      	ldr	r2, [sp, #84]	; 0x54
		uint8_t loc = cpy_str_pos[i];
     a6c:	f813 3009 	ldrb.w	r3, [r3, r9]
		const char *str = *(const char **)&buf32[loc];
     a70:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
     a74:	b1c2      	cbz	r2, aa8 <cbprintf_package_copy+0x274>
     a76:	f832 7019 	ldrh.w	r7, [r2, r9, lsl #1]
		*dst = loc;
     a7a:	46c2      	mov	sl, r8
		rem--;
     a7c:	f104 3bff 	add.w	fp, r4, #4294967295
		*dst = loc;
     a80:	f80a 3b01 	strb.w	r3, [sl], #1
	if (strl) {
     a84:	b197      	cbz	r7, aac <cbprintf_package_copy+0x278>
		memcpy(dst, str, strl);
     a86:	463a      	mov	r2, r7
     a88:	4650      	mov	r0, sl
     a8a:	f009 fe74 	bl	a776 <memcpy>
	for (int i = 0; i < scpy_cnt; i++) {
     a8e:	f109 0901 	add.w	r9, r9, #1
     a92:	454d      	cmp	r5, r9
		rem -= cpy_len;
     a94:	ebab 0407 	sub.w	r4, fp, r7
		dst += cpy_len;
     a98:	eb0a 0807 	add.w	r8, sl, r7
	for (int i = 0; i < scpy_cnt; i++) {
     a9c:	dce4      	bgt.n	a68 <cbprintf_package_copy+0x234>
	return len - rem;
     a9e:	9b04      	ldr	r3, [sp, #16]
     aa0:	441f      	add	r7, r3
     aa2:	eba7 000b 	sub.w	r0, r7, fp
     aa6:	e6e3      	b.n	870 <cbprintf_package_copy+0x3c>
		uint16_t str_len = strl ? strl[i] : 0;
     aa8:	9f15      	ldr	r7, [sp, #84]	; 0x54
     aaa:	e7e6      	b.n	a7a <cbprintf_package_copy+0x246>
     aac:	3901      	subs	r1, #1
	if (strl) {
     aae:	2301      	movs	r3, #1
	for (size_t i = 0; i < num; i++) {
     ab0:	429c      	cmp	r4, r3
     ab2:	d0d4      	beq.n	a5e <cbprintf_package_copy+0x22a>
		dst[i] = src[i];
     ab4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     ab8:	f808 2003 	strb.w	r2, [r8, r3]
		if (src[i] == '\0') {
     abc:	1c58      	adds	r0, r3, #1
     abe:	b912      	cbnz	r2, ac6 <cbprintf_package_copy+0x292>
		if (cpy_len < 0) {
     ac0:	1e1f      	subs	r7, r3, #0
     ac2:	dae4      	bge.n	a8e <cbprintf_package_copy+0x25a>
     ac4:	e7cb      	b.n	a5e <cbprintf_package_copy+0x22a>
     ac6:	4603      	mov	r3, r0
     ac8:	e7f2      	b.n	ab0 <cbprintf_package_copy+0x27c>
     aca:	bf00      	nop
     acc:	0000b714 	.word	0x0000b714
     ad0:	0000deac 	.word	0x0000deac

00000ad4 <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
     ad4:	4b01      	ldr	r3, [pc, #4]	; (adc <__printk_hook_install+0x8>)
     ad6:	6018      	str	r0, [r3, #0]
}
     ad8:	4770      	bx	lr
     ada:	bf00      	nop
     adc:	20000000 	.word	0x20000000

00000ae0 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     ae0:	b530      	push	{r4, r5, lr}
     ae2:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     ae4:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     ae8:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     aea:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
     aec:	a901      	add	r1, sp, #4
     aee:	4805      	ldr	r0, [pc, #20]	; (b04 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     af0:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
     af2:	f000 f8e9 	bl	cc8 <cbvprintf>

	if (ctx.count < ctx.max) {
     af6:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     afa:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     afc:	bfb8      	it	lt
     afe:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     b00:	b005      	add	sp, #20
     b02:	bd30      	pop	{r4, r5, pc}
     b04:	00009a5d 	.word	0x00009a5d

00000b08 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     b08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     b0c:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     b10:	f019 0808 	ands.w	r8, r9, #8
{
     b14:	4604      	mov	r4, r0
     b16:	4693      	mov	fp, r2
	if (processing) {
     b18:	d00d      	beq.n	b36 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     b1a:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     b1c:	bf0c      	ite	eq
     b1e:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     b22:	f049 0920 	orrne.w	r9, r9, #32
     b26:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     b2a:	f38b 8811 	msr	BASEPRI, fp
     b2e:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     b32:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     b36:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     b3a:	2902      	cmp	r1, #2
     b3c:	d107      	bne.n	b4e <process_event+0x46>
			evt = process_recheck(mgr);
     b3e:	4620      	mov	r0, r4
     b40:	f008 ffd3 	bl	9aea <process_recheck>
		if (evt == EVT_NOP) {
     b44:	2800      	cmp	r0, #0
     b46:	d0f0      	beq.n	b2a <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     b48:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     b4a:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     b4c:	d14e      	bne.n	bec <process_event+0xe4>
			res = mgr->last_res;
     b4e:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     b50:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     b52:	2f00      	cmp	r7, #0
     b54:	da15      	bge.n	b82 <process_event+0x7a>
		*clients = mgr->clients;
     b56:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     b58:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     b5c:	e9c4 8800 	strd	r8, r8, [r4]
     b60:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     b64:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     b66:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     b68:	8b21      	ldrh	r1, [r4, #24]
     b6a:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     b6e:	45ca      	cmp	sl, r9
     b70:	d002      	beq.n	b78 <process_event+0x70>
		if (do_monitors
     b72:	68a3      	ldr	r3, [r4, #8]
     b74:	2b00      	cmp	r3, #0
     b76:	d15a      	bne.n	c2e <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     b78:	b90d      	cbnz	r5, b7e <process_event+0x76>
		    || (transit != NULL)) {
     b7a:	2e00      	cmp	r6, #0
     b7c:	d071      	beq.n	c62 <process_event+0x15a>
     b7e:	2300      	movs	r3, #0
     b80:	e056      	b.n	c30 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     b82:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     b86:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     b88:	2a01      	cmp	r2, #1
     b8a:	d81e      	bhi.n	bca <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     b8c:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     b90:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     b92:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     b94:	b289      	uxth	r1, r1
     b96:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     b9a:	d10a      	bne.n	bb2 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     b9c:	b13d      	cbz	r5, bae <process_event+0xa6>
     b9e:	8b63      	ldrh	r3, [r4, #26]
     ba0:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     ba2:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     ba4:	3301      	adds	r3, #1
     ba6:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     ba8:	2a00      	cmp	r2, #0
     baa:	d1fa      	bne.n	ba2 <process_event+0x9a>
     bac:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     bae:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     bb2:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     bb4:	4620      	mov	r0, r4
     bb6:	f008 ff98 	bl	9aea <process_recheck>
     bba:	4606      	mov	r6, r0
     bbc:	2800      	cmp	r0, #0
     bbe:	d0d3      	beq.n	b68 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     bc0:	8b23      	ldrh	r3, [r4, #24]
     bc2:	f043 0320 	orr.w	r3, r3, #32
     bc6:	8323      	strh	r3, [r4, #24]
     bc8:	e7cd      	b.n	b66 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     bca:	2b04      	cmp	r3, #4
     bcc:	d10c      	bne.n	be8 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     bce:	f021 0107 	bic.w	r1, r1, #7
     bd2:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     bd4:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     bd6:	4620      	mov	r0, r4
     bd8:	f008 ff87 	bl	9aea <process_recheck>
     bdc:	4605      	mov	r5, r0
     bde:	2800      	cmp	r0, #0
     be0:	d0c1      	beq.n	b66 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     be2:	f041 0120 	orr.w	r1, r1, #32
     be6:	8321      	strh	r1, [r4, #24]
     be8:	2500      	movs	r5, #0
     bea:	e7bc      	b.n	b66 <process_event+0x5e>
		} else if (evt == EVT_START) {
     bec:	2803      	cmp	r0, #3
     bee:	d109      	bne.n	c04 <process_event+0xfc>
			transit = mgr->transitions->start;
     bf0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     bf2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     bf6:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     bf8:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     bfc:	8323      	strh	r3, [r4, #24]
}
     bfe:	2500      	movs	r5, #0
		res = 0;
     c00:	462f      	mov	r7, r5
     c02:	e7b1      	b.n	b68 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     c04:	2804      	cmp	r0, #4
     c06:	d106      	bne.n	c16 <process_event+0x10e>
			transit = mgr->transitions->stop;
     c08:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c0a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     c0e:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c10:	f043 0304 	orr.w	r3, r3, #4
     c14:	e7f2      	b.n	bfc <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     c16:	2805      	cmp	r0, #5
     c18:	d106      	bne.n	c28 <process_event+0x120>
			transit = mgr->transitions->reset;
     c1a:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c1c:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     c20:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     c22:	f043 0305 	orr.w	r3, r3, #5
     c26:	e7e9      	b.n	bfc <process_event+0xf4>
     c28:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     c2a:	462e      	mov	r6, r5
     c2c:	e7e8      	b.n	c00 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     c2e:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     c30:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     c34:	8321      	strh	r1, [r4, #24]
     c36:	f38b 8811 	msr	BASEPRI, fp
     c3a:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     c3e:	b9fb      	cbnz	r3, c80 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     c40:	bb85      	cbnz	r5, ca4 <process_event+0x19c>
			if (transit != NULL) {
     c42:	b116      	cbz	r6, c4a <process_event+0x142>
				transit(mgr, transition_complete);
     c44:	491f      	ldr	r1, [pc, #124]	; (cc4 <process_event+0x1bc>)
     c46:	4620      	mov	r0, r4
     c48:	47b0      	blx	r6
	__asm__ volatile(
     c4a:	f04f 0320 	mov.w	r3, #32
     c4e:	f3ef 8b11 	mrs	fp, BASEPRI
     c52:	f383 8812 	msr	BASEPRI_MAX, r3
     c56:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     c5a:	8b23      	ldrh	r3, [r4, #24]
     c5c:	f023 0308 	bic.w	r3, r3, #8
     c60:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     c62:	8b23      	ldrh	r3, [r4, #24]
     c64:	06da      	lsls	r2, r3, #27
     c66:	d525      	bpl.n	cb4 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     c68:	f023 0310 	bic.w	r3, r3, #16
     c6c:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     c6e:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     c70:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     c74:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     c78:	2900      	cmp	r1, #0
     c7a:	f47f af5e 	bne.w	b3a <process_event+0x32>
out:
     c7e:	e754      	b.n	b2a <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     c80:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     c82:	2900      	cmp	r1, #0
     c84:	d0dc      	beq.n	c40 <process_event+0x138>
	return node->next;
     c86:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     c8a:	f8d1 b004 	ldr.w	fp, [r1, #4]
     c8e:	463b      	mov	r3, r7
     c90:	4652      	mov	r2, sl
     c92:	4620      	mov	r0, r4
     c94:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     c96:	f1b9 0f00 	cmp.w	r9, #0
     c9a:	d0d1      	beq.n	c40 <process_event+0x138>
     c9c:	4649      	mov	r1, r9
     c9e:	f8d9 9000 	ldr.w	r9, [r9]
     ca2:	e7f2      	b.n	c8a <process_event+0x182>
     ca4:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     ca6:	463b      	mov	r3, r7
     ca8:	4652      	mov	r2, sl
     caa:	4620      	mov	r0, r4
     cac:	682d      	ldr	r5, [r5, #0]
     cae:	f008 ff38 	bl	9b22 <notify_one>
     cb2:	e7c5      	b.n	c40 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     cb4:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     cb8:	bf1e      	ittt	ne
     cba:	f023 0320 	bicne.w	r3, r3, #32
     cbe:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     cc0:	2102      	movne	r1, #2
     cc2:	e7d5      	b.n	c70 <process_event+0x168>
     cc4:	00009b4f 	.word	0x00009b4f

00000cc8 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     ccc:	b091      	sub	sp, #68	; 0x44
     cce:	468b      	mov	fp, r1
     cd0:	9002      	str	r0, [sp, #8]
     cd2:	4692      	mov	sl, r2
     cd4:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     cd6:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     cd8:	f89a 0000 	ldrb.w	r0, [sl]
     cdc:	b908      	cbnz	r0, ce2 <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     cde:	4628      	mov	r0, r5
     ce0:	e35f      	b.n	13a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a2>
		if (*fp != '%') {
     ce2:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     ce4:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     ce8:	d007      	beq.n	cfa <cbvprintf+0x32>
			OUTC('%');
     cea:	9b02      	ldr	r3, [sp, #8]
     cec:	4659      	mov	r1, fp
     cee:	4798      	blx	r3
     cf0:	2800      	cmp	r0, #0
     cf2:	f2c0 8356 	blt.w	13a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a2>
     cf6:	3501      	adds	r5, #1
			break;
     cf8:	e212      	b.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
		} state = {
     cfa:	2218      	movs	r2, #24
     cfc:	2100      	movs	r1, #0
     cfe:	a80a      	add	r0, sp, #40	; 0x28
     d00:	f009 fd44 	bl	a78c <memset>
	if (*sp == '%') {
     d04:	f89a 3001 	ldrb.w	r3, [sl, #1]
     d08:	2b25      	cmp	r3, #37	; 0x25
     d0a:	d078      	beq.n	dfe <cbvprintf+0x136>
     d0c:	2200      	movs	r2, #0
     d0e:	4610      	mov	r0, r2
     d10:	4696      	mov	lr, r2
     d12:	4694      	mov	ip, r2
     d14:	4616      	mov	r6, r2
     d16:	4639      	mov	r1, r7
		switch (*sp) {
     d18:	f817 3b01 	ldrb.w	r3, [r7], #1
     d1c:	2b2b      	cmp	r3, #43	; 0x2b
     d1e:	f000 809d 	beq.w	e5c <cbvprintf+0x194>
     d22:	f200 8094 	bhi.w	e4e <cbvprintf+0x186>
     d26:	2b20      	cmp	r3, #32
     d28:	f000 809b 	beq.w	e62 <cbvprintf+0x19a>
     d2c:	2b23      	cmp	r3, #35	; 0x23
     d2e:	f000 809b 	beq.w	e68 <cbvprintf+0x1a0>
     d32:	b12e      	cbz	r6, d40 <cbvprintf+0x78>
     d34:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     d38:	f046 0604 	orr.w	r6, r6, #4
     d3c:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     d40:	f1bc 0f00 	cmp.w	ip, #0
     d44:	d005      	beq.n	d52 <cbvprintf+0x8a>
     d46:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     d4a:	f046 0608 	orr.w	r6, r6, #8
     d4e:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     d52:	f1be 0f00 	cmp.w	lr, #0
     d56:	d005      	beq.n	d64 <cbvprintf+0x9c>
     d58:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     d5c:	f046 0610 	orr.w	r6, r6, #16
     d60:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     d64:	b128      	cbz	r0, d72 <cbvprintf+0xaa>
     d66:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     d6a:	f040 0020 	orr.w	r0, r0, #32
     d6e:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     d72:	b12a      	cbz	r2, d80 <cbvprintf+0xb8>
     d74:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     d78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     d7c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     d80:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     d84:	f002 0044 	and.w	r0, r2, #68	; 0x44
     d88:	2844      	cmp	r0, #68	; 0x44
     d8a:	d103      	bne.n	d94 <cbvprintf+0xcc>
		conv->flag_zero = false;
     d8c:	f36f 1286 	bfc	r2, #6, #1
     d90:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     d94:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     d98:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     d9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     d9e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     da2:	d17b      	bne.n	e9c <cbvprintf+0x1d4>
		conv->width_star = true;
     da4:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     da8:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     dac:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     dae:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     db2:	781a      	ldrb	r2, [r3, #0]
     db4:	2a2e      	cmp	r2, #46	; 0x2e
     db6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     dba:	bf0c      	ite	eq
     dbc:	2101      	moveq	r1, #1
     dbe:	2100      	movne	r1, #0
     dc0:	f361 0241 	bfi	r2, r1, #1, #1
     dc4:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     dc8:	d174      	bne.n	eb4 <cbvprintf+0x1ec>
	if (*sp == '*') {
     dca:	785a      	ldrb	r2, [r3, #1]
     dcc:	2a2a      	cmp	r2, #42	; 0x2a
     dce:	d06a      	beq.n	ea6 <cbvprintf+0x1de>
	++sp;
     dd0:	3301      	adds	r3, #1
	size_t val = 0;
     dd2:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     dd4:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     dd6:	4618      	mov	r0, r3
     dd8:	f810 2b01 	ldrb.w	r2, [r0], #1
     ddc:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     de0:	2f09      	cmp	r7, #9
     de2:	f240 808e 	bls.w	f02 <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
     de6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     dea:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     dec:	f3c2 0040 	ubfx	r0, r2, #1, #1
     df0:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     df4:	f361 0241 	bfi	r2, r1, #1, #1
     df8:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     dfc:	e05a      	b.n	eb4 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
     dfe:	f10a 0702 	add.w	r7, sl, #2
     e02:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     e06:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     e0a:	07d9      	lsls	r1, r3, #31
     e0c:	f140 8149 	bpl.w	10a2 <CONFIG_FPROTECT_BLOCK_SIZE+0xa2>
			width = va_arg(ap, int);
     e10:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     e14:	f1b9 0f00 	cmp.w	r9, #0
     e18:	da07      	bge.n	e2a <cbvprintf+0x162>
				conv->flag_dash = true;
     e1a:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     e1e:	f042 0204 	orr.w	r2, r2, #4
     e22:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
     e26:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
     e2a:	075a      	lsls	r2, r3, #29
     e2c:	f140 8142 	bpl.w	10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>
			int arg = va_arg(ap, int);
     e30:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
     e34:	f1b8 0f00 	cmp.w	r8, #0
     e38:	f280 8141 	bge.w	10be <CONFIG_FPROTECT_BLOCK_SIZE+0xbe>
				conv->prec_present = false;
     e3c:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     e40:	f36f 0341 	bfc	r3, #1, #1
     e44:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
     e48:	f04f 38ff 	mov.w	r8, #4294967295
     e4c:	e137      	b.n	10be <CONFIG_FPROTECT_BLOCK_SIZE+0xbe>
		switch (*sp) {
     e4e:	2b2d      	cmp	r3, #45	; 0x2d
     e50:	d00c      	beq.n	e6c <cbvprintf+0x1a4>
     e52:	2b30      	cmp	r3, #48	; 0x30
     e54:	f47f af6d 	bne.w	d32 <cbvprintf+0x6a>
			conv->flag_zero = true;
     e58:	2201      	movs	r2, #1
	} while (loop);
     e5a:	e75c      	b.n	d16 <cbvprintf+0x4e>
			conv->flag_plus = true;
     e5c:	f04f 0c01 	mov.w	ip, #1
     e60:	e759      	b.n	d16 <cbvprintf+0x4e>
			conv->flag_space = true;
     e62:	f04f 0e01 	mov.w	lr, #1
     e66:	e756      	b.n	d16 <cbvprintf+0x4e>
			conv->flag_hash = true;
     e68:	2001      	movs	r0, #1
     e6a:	e754      	b.n	d16 <cbvprintf+0x4e>
		switch (*sp) {
     e6c:	2601      	movs	r6, #1
     e6e:	e752      	b.n	d16 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
     e70:	fb0c 0202 	mla	r2, ip, r2, r0
     e74:	3a30      	subs	r2, #48	; 0x30
     e76:	4633      	mov	r3, r6
     e78:	461e      	mov	r6, r3
     e7a:	f816 0b01 	ldrb.w	r0, [r6], #1
     e7e:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     e82:	2f09      	cmp	r7, #9
     e84:	d9f4      	bls.n	e70 <cbvprintf+0x1a8>
	if (sp != wp) {
     e86:	4299      	cmp	r1, r3
     e88:	d093      	beq.n	db2 <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
     e8a:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
     e8e:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
     e90:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
     e92:	f362 0141 	bfi	r1, r2, #1, #1
     e96:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
     e9a:	e78a      	b.n	db2 <cbvprintf+0xea>
     e9c:	460b      	mov	r3, r1
	size_t val = 0;
     e9e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
     ea0:	f04f 0c0a 	mov.w	ip, #10
     ea4:	e7e8      	b.n	e78 <cbvprintf+0x1b0>
		conv->prec_star = true;
     ea6:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     eaa:	f042 0204 	orr.w	r2, r2, #4
     eae:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
     eb2:	3302      	adds	r3, #2
	switch (*sp) {
     eb4:	461f      	mov	r7, r3
     eb6:	f817 2b01 	ldrb.w	r2, [r7], #1
     eba:	2a6c      	cmp	r2, #108	; 0x6c
     ebc:	d041      	beq.n	f42 <cbvprintf+0x27a>
     ebe:	d825      	bhi.n	f0c <cbvprintf+0x244>
     ec0:	2a68      	cmp	r2, #104	; 0x68
     ec2:	d02b      	beq.n	f1c <cbvprintf+0x254>
     ec4:	2a6a      	cmp	r2, #106	; 0x6a
     ec6:	d046      	beq.n	f56 <cbvprintf+0x28e>
     ec8:	2a4c      	cmp	r2, #76	; 0x4c
     eca:	d04c      	beq.n	f66 <cbvprintf+0x29e>
     ecc:	461f      	mov	r7, r3
	conv->specifier = *sp++;
     ece:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
     ed2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
     ed6:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
     eda:	2a78      	cmp	r2, #120	; 0x78
     edc:	f200 80d9 	bhi.w	1092 <CONFIG_FPROTECT_BLOCK_SIZE+0x92>
     ee0:	2a57      	cmp	r2, #87	; 0x57
     ee2:	d84d      	bhi.n	f80 <cbvprintf+0x2b8>
     ee4:	2a41      	cmp	r2, #65	; 0x41
     ee6:	d003      	beq.n	ef0 <cbvprintf+0x228>
     ee8:	3a45      	subs	r2, #69	; 0x45
     eea:	2a02      	cmp	r2, #2
     eec:	f200 80d1 	bhi.w	1092 <CONFIG_FPROTECT_BLOCK_SIZE+0x92>
		conv->specifier_cat = SPECIFIER_FP;
     ef0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
     ef4:	2204      	movs	r2, #4
     ef6:	f362 0302 	bfi	r3, r2, #0, #3
     efa:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
     efe:	2301      	movs	r3, #1
			break;
     f00:	e09e      	b.n	1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>
		val = 10U * val + *sp++ - '0';
     f02:	fb06 2101 	mla	r1, r6, r1, r2
     f06:	3930      	subs	r1, #48	; 0x30
     f08:	4603      	mov	r3, r0
     f0a:	e764      	b.n	dd6 <cbvprintf+0x10e>
	switch (*sp) {
     f0c:	2a74      	cmp	r2, #116	; 0x74
     f0e:	d026      	beq.n	f5e <cbvprintf+0x296>
     f10:	2a7a      	cmp	r2, #122	; 0x7a
     f12:	d1db      	bne.n	ecc <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
     f14:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     f18:	2206      	movs	r2, #6
     f1a:	e00d      	b.n	f38 <cbvprintf+0x270>
		if (*++sp == 'h') {
     f1c:	785a      	ldrb	r2, [r3, #1]
     f1e:	2a68      	cmp	r2, #104	; 0x68
     f20:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     f24:	d106      	bne.n	f34 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
     f26:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
     f28:	f361 02c6 	bfi	r2, r1, #3, #4
     f2c:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
     f30:	1c9f      	adds	r7, r3, #2
     f32:	e7cc      	b.n	ece <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
     f34:	4613      	mov	r3, r2
     f36:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
     f38:	f362 03c6 	bfi	r3, r2, #3, #4
     f3c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
     f40:	e7c5      	b.n	ece <cbvprintf+0x206>
		if (*++sp == 'l') {
     f42:	785a      	ldrb	r2, [r3, #1]
     f44:	2a6c      	cmp	r2, #108	; 0x6c
     f46:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     f4a:	d101      	bne.n	f50 <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
     f4c:	2104      	movs	r1, #4
     f4e:	e7eb      	b.n	f28 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
     f50:	4613      	mov	r3, r2
     f52:	2203      	movs	r2, #3
     f54:	e7f0      	b.n	f38 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
     f56:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     f5a:	2205      	movs	r2, #5
     f5c:	e7ec      	b.n	f38 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
     f5e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     f62:	2207      	movs	r2, #7
     f64:	e7e8      	b.n	f38 <cbvprintf+0x270>
		conv->unsupported = true;
     f66:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
     f6a:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
     f6e:	f023 0302 	bic.w	r3, r3, #2
     f72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     f76:	f043 0302 	orr.w	r3, r3, #2
     f7a:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
     f7e:	e7a6      	b.n	ece <cbvprintf+0x206>
	switch (conv->specifier) {
     f80:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
     f84:	2920      	cmp	r1, #32
     f86:	f200 8084 	bhi.w	1092 <CONFIG_FPROTECT_BLOCK_SIZE+0x92>
     f8a:	a001      	add	r0, pc, #4	; (adr r0, f90 <cbvprintf+0x2c8>)
     f8c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
     f90:	00001055 	.word	0x00001055
     f94:	00001093 	.word	0x00001093
     f98:	00001093 	.word	0x00001093
     f9c:	00001093 	.word	0x00001093
     fa0:	00001093 	.word	0x00001093
     fa4:	00001093 	.word	0x00001093
     fa8:	00001093 	.word	0x00001093
     fac:	00001093 	.word	0x00001093
     fb0:	00001093 	.word	0x00001093
     fb4:	00000ef1 	.word	0x00000ef1
     fb8:	00001093 	.word	0x00001093
     fbc:	00001055 	.word	0x00001055
     fc0:	00001015 	.word	0x00001015
     fc4:	00000ef1 	.word	0x00000ef1
     fc8:	00000ef1 	.word	0x00000ef1
     fcc:	00000ef1 	.word	0x00000ef1
     fd0:	00001093 	.word	0x00001093
     fd4:	00001015 	.word	0x00001015
     fd8:	00001093 	.word	0x00001093
     fdc:	00001093 	.word	0x00001093
     fe0:	00001093 	.word	0x00001093
     fe4:	00001093 	.word	0x00001093
     fe8:	0000105d 	.word	0x0000105d
     fec:	00001055 	.word	0x00001055
     ff0:	00001079 	.word	0x00001079
     ff4:	00001093 	.word	0x00001093
     ff8:	00001093 	.word	0x00001093
     ffc:	00001079 	.word	0x00001079
    1000:	00001093 	.word	0x00001093
    1004:	00001055 	.word	0x00001055
    1008:	00001093 	.word	0x00001093
    100c:	00001093 	.word	0x00001093
    1010:	00001055 	.word	0x00001055
		conv->specifier_cat = SPECIFIER_SINT;
    1014:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1018:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    101a:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    101e:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1022:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    1024:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    1028:	bf02      	ittt	eq
    102a:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    102e:	f041 0101 	orreq.w	r1, r1, #1
    1032:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    1036:	2a63      	cmp	r2, #99	; 0x63
    1038:	d131      	bne.n	109e <CONFIG_FPROTECT_BLOCK_SIZE+0x9e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    103a:	3b00      	subs	r3, #0
    103c:	bf18      	it	ne
    103e:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1040:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1044:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1048:	430b      	orrs	r3, r1
    104a:	f363 0241 	bfi	r2, r3, #1, #1
    104e:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    1052:	e6d8      	b.n	e06 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    1054:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1058:	2002      	movs	r0, #2
    105a:	e7de      	b.n	101a <CONFIG_FPROTECT_BLOCK_SIZE+0x1a>
		conv->specifier_cat = SPECIFIER_PTR;
    105c:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1060:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1064:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1068:	2103      	movs	r1, #3
    106a:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    106e:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    1070:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1074:	4143      	adcs	r3, r0
    1076:	e7e3      	b.n	1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>
		conv->specifier_cat = SPECIFIER_PTR;
    1078:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    107c:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    107e:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    1082:	f361 0202 	bfi	r2, r1, #0, #3
    1086:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    108a:	bf14      	ite	ne
    108c:	2301      	movne	r3, #1
    108e:	2300      	moveq	r3, #0
    1090:	e7d6      	b.n	1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>
		conv->invalid = true;
    1092:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1096:	f043 0301 	orr.w	r3, r3, #1
    109a:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    109e:	2300      	movs	r3, #0
    10a0:	e7ce      	b.n	1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>
		} else if (conv->width_present) {
    10a2:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    10a6:	2a00      	cmp	r2, #0
			width = conv->width_value;
    10a8:	bfb4      	ite	lt
    10aa:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    10ae:	f04f 39ff 	movge.w	r9, #4294967295
    10b2:	e6ba      	b.n	e2a <cbvprintf+0x162>
		} else if (conv->prec_present) {
    10b4:	079b      	lsls	r3, r3, #30
    10b6:	f57f aec7 	bpl.w	e48 <cbvprintf+0x180>
			precision = conv->prec_value;
    10ba:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    10be:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    10c2:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    10c4:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    10c8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    10cc:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    10d0:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    10d2:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    10d6:	d138      	bne.n	114a <CONFIG_FPROTECT_BLOCK_SIZE+0x14a>
			switch (length_mod) {
    10d8:	1ecb      	subs	r3, r1, #3
    10da:	2b04      	cmp	r3, #4
    10dc:	d822      	bhi.n	1124 <CONFIG_FPROTECT_BLOCK_SIZE+0x124>
    10de:	e8df f003 	tbb	[pc, r3]
    10e2:	0903      	.short	0x0903
    10e4:	2109      	.short	0x2109
    10e6:	21          	.byte	0x21
    10e7:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    10e8:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    10ec:	17da      	asrs	r2, r3, #31
    10ee:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    10f2:	e006      	b.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
					(sint_value_type)va_arg(ap, intmax_t);
    10f4:	3407      	adds	r4, #7
    10f6:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    10fa:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    10fe:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    1102:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1106:	f013 0603 	ands.w	r6, r3, #3
    110a:	d056      	beq.n	11ba <CONFIG_FPROTECT_BLOCK_SIZE+0x1ba>
			OUTS(sp, fp);
    110c:	9802      	ldr	r0, [sp, #8]
    110e:	463b      	mov	r3, r7
    1110:	4652      	mov	r2, sl
    1112:	4659      	mov	r1, fp
    1114:	f008 ffeb 	bl	a0ee <outs>
    1118:	2800      	cmp	r0, #0
    111a:	f2c0 8142 	blt.w	13a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a2>
    111e:	4405      	add	r5, r0
			continue;
    1120:	46ba      	mov	sl, r7
    1122:	e5d9      	b.n	cd8 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1124:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1128:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    112a:	ea4f 72e3 	mov.w	r2, r3, asr #31
    112e:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1132:	d105      	bne.n	1140 <CONFIG_FPROTECT_BLOCK_SIZE+0x140>
				value->uint = (unsigned char)value->uint;
    1134:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    1138:	930a      	str	r3, [sp, #40]	; 0x28
    113a:	2300      	movs	r3, #0
    113c:	930b      	str	r3, [sp, #44]	; 0x2c
    113e:	e7e0      	b.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
			} else if (length_mod == LENGTH_H) {
    1140:	2902      	cmp	r1, #2
    1142:	d1de      	bne.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
				value->sint = (short)value->sint;
    1144:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    1148:	e7d0      	b.n	10ec <CONFIG_FPROTECT_BLOCK_SIZE+0xec>
		} else if (specifier_cat == SPECIFIER_UINT) {
    114a:	2b02      	cmp	r3, #2
    114c:	d123      	bne.n	1196 <CONFIG_FPROTECT_BLOCK_SIZE+0x196>
			switch (length_mod) {
    114e:	1ecb      	subs	r3, r1, #3
    1150:	2b04      	cmp	r3, #4
    1152:	d813      	bhi.n	117c <CONFIG_FPROTECT_BLOCK_SIZE+0x17c>
    1154:	e8df f003 	tbb	[pc, r3]
    1158:	120a0a03 	.word	0x120a0a03
    115c:	12          	.byte	0x12
    115d:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    115e:	6822      	ldr	r2, [r4, #0]
    1160:	920a      	str	r2, [sp, #40]	; 0x28
    1162:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    1164:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    1166:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    1168:	4604      	mov	r4, r0
    116a:	e7ca      	b.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
					(uint_value_type)va_arg(ap,
    116c:	1de0      	adds	r0, r4, #7
    116e:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    1172:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    1176:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    117a:	e7f5      	b.n	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
					(uint_value_type)va_arg(ap, size_t);
    117c:	f854 3b04 	ldr.w	r3, [r4], #4
    1180:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1182:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    1184:	f04f 0300 	mov.w	r3, #0
    1188:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    118a:	d0d3      	beq.n	1134 <CONFIG_FPROTECT_BLOCK_SIZE+0x134>
			} else if (length_mod == LENGTH_H) {
    118c:	2902      	cmp	r1, #2
    118e:	d1b8      	bne.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
				value->uint = (unsigned short)value->uint;
    1190:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1194:	e7d0      	b.n	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
		} else if (specifier_cat == SPECIFIER_FP) {
    1196:	2b04      	cmp	r3, #4
    1198:	d109      	bne.n	11ae <CONFIG_FPROTECT_BLOCK_SIZE+0x1ae>
					(sint_value_type)va_arg(ap, long long);
    119a:	1de3      	adds	r3, r4, #7
    119c:	f023 0307 	bic.w	r3, r3, #7
    11a0:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    11a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    11a8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    11ac:	e7a9      	b.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
		} else if (specifier_cat == SPECIFIER_PTR) {
    11ae:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    11b0:	bf04      	itt	eq
    11b2:	f854 3b04 	ldreq.w	r3, [r4], #4
    11b6:	930a      	streq	r3, [sp, #40]	; 0x28
    11b8:	e7a3      	b.n	1102 <CONFIG_FPROTECT_BLOCK_SIZE+0x102>
		switch (conv->specifier) {
    11ba:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    11be:	2878      	cmp	r0, #120	; 0x78
    11c0:	d8ae      	bhi.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    11c2:	2862      	cmp	r0, #98	; 0x62
    11c4:	d822      	bhi.n	120c <CONFIG_FPROTECT_BLOCK_SIZE+0x20c>
    11c6:	2825      	cmp	r0, #37	; 0x25
    11c8:	f43f ad8f 	beq.w	cea <cbvprintf+0x22>
    11cc:	2858      	cmp	r0, #88	; 0x58
    11ce:	d1a7      	bne.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
			bps = encode_uint(value->uint, conv, buf, bpe);
    11d0:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    11d4:	9300      	str	r3, [sp, #0]
    11d6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    11da:	ab04      	add	r3, sp, #16
    11dc:	aa0c      	add	r2, sp, #48	; 0x30
    11de:	f008 ff40 	bl	a062 <encode_uint>
    11e2:	4682      	mov	sl, r0
			if (precision >= 0) {
    11e4:	f1b8 0f00 	cmp.w	r8, #0
    11e8:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    11ec:	db0c      	blt.n	1208 <CONFIG_FPROTECT_BLOCK_SIZE+0x208>
				conv->flag_zero = false;
    11ee:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    11f2:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    11f6:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    11fa:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    11fc:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1200:	d902      	bls.n	1208 <CONFIG_FPROTECT_BLOCK_SIZE+0x208>
					conv->pad0_value = precision - (int)len;
    1202:	eba8 0303 	sub.w	r3, r8, r3
    1206:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1208:	4680      	mov	r8, r0
    120a:	e03d      	b.n	1288 <CONFIG_FPROTECT_BLOCK_SIZE+0x288>
		switch (conv->specifier) {
    120c:	3863      	subs	r0, #99	; 0x63
    120e:	2815      	cmp	r0, #21
    1210:	d886      	bhi.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    1212:	a201      	add	r2, pc, #4	; (adr r2, 1218 <CONFIG_FPROTECT_BLOCK_SIZE+0x218>)
    1214:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1218:	00001299 	.word	0x00001299
    121c:	000012fd 	.word	0x000012fd
    1220:	00001121 	.word	0x00001121
    1224:	00001121 	.word	0x00001121
    1228:	00001121 	.word	0x00001121
    122c:	00001121 	.word	0x00001121
    1230:	000012fd 	.word	0x000012fd
    1234:	00001121 	.word	0x00001121
    1238:	00001121 	.word	0x00001121
    123c:	00001121 	.word	0x00001121
    1240:	00001121 	.word	0x00001121
    1244:	00001357 	.word	0x00001357
    1248:	00001325 	.word	0x00001325
    124c:	00001329 	.word	0x00001329
    1250:	00001121 	.word	0x00001121
    1254:	00001121 	.word	0x00001121
    1258:	00001271 	.word	0x00001271
    125c:	00001121 	.word	0x00001121
    1260:	00001325 	.word	0x00001325
    1264:	00001121 	.word	0x00001121
    1268:	00001121 	.word	0x00001121
    126c:	00001325 	.word	0x00001325
			if (precision >= 0) {
    1270:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1274:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1278:	db0a      	blt.n	1290 <CONFIG_FPROTECT_BLOCK_SIZE+0x290>
				len = strnlen(bps, precision);
    127a:	4641      	mov	r1, r8
    127c:	4650      	mov	r0, sl
    127e:	f009 fa65 	bl	a74c <strnlen>
			bpe = bps + len;
    1282:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    1286:	2600      	movs	r6, #0
		if (bps == NULL) {
    1288:	f1ba 0f00 	cmp.w	sl, #0
    128c:	d10c      	bne.n	12a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a8>
    128e:	e747      	b.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
				len = strlen(bps);
    1290:	4650      	mov	r0, sl
    1292:	f009 fa54 	bl	a73e <strlen>
    1296:	e7f4      	b.n	1282 <CONFIG_FPROTECT_BLOCK_SIZE+0x282>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1298:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    129a:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    129e:	2600      	movs	r6, #0
			bps = buf;
    12a0:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    12a4:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    12a8:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    12ac:	b106      	cbz	r6, 12b0 <CONFIG_FPROTECT_BLOCK_SIZE+0x2b0>
			nj_len += 1U;
    12ae:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    12b0:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    12b4:	06d0      	lsls	r0, r2, #27
    12b6:	d568      	bpl.n	138a <CONFIG_FPROTECT_BLOCK_SIZE+0x38a>
			nj_len += 2U;
    12b8:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    12ba:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    12bc:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    12be:	bf48      	it	mi
    12c0:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    12c2:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    12c4:	bf48      	it	mi
    12c6:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    12c8:	f1b9 0f00 	cmp.w	r9, #0
    12cc:	dd76      	ble.n	13bc <CONFIG_FPROTECT_BLOCK_SIZE+0x3bc>
			if (!conv->flag_dash) {
    12ce:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    12d2:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    12d6:	f3c2 0380 	ubfx	r3, r2, #2, #1
    12da:	9303      	str	r3, [sp, #12]
    12dc:	0753      	lsls	r3, r2, #29
    12de:	d46d      	bmi.n	13bc <CONFIG_FPROTECT_BLOCK_SIZE+0x3bc>
				if (conv->flag_zero) {
    12e0:	0650      	lsls	r0, r2, #25
    12e2:	d561      	bpl.n	13a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a8>
					if (sign != 0) {
    12e4:	b146      	cbz	r6, 12f8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2f8>
						OUTC(sign);
    12e6:	9b02      	ldr	r3, [sp, #8]
    12e8:	4659      	mov	r1, fp
    12ea:	4630      	mov	r0, r6
    12ec:	4798      	blx	r3
    12ee:	2800      	cmp	r0, #0
    12f0:	db57      	blt.n	13a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a2>
						sign = 0;
    12f2:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    12f4:	3501      	adds	r5, #1
						sign = 0;
    12f6:	461e      	mov	r6, r3
					pad = '0';
    12f8:	2330      	movs	r3, #48	; 0x30
    12fa:	e056      	b.n	13aa <CONFIG_FPROTECT_BLOCK_SIZE+0x3aa>
			if (conv->flag_plus) {
    12fc:	071e      	lsls	r6, r3, #28
    12fe:	d40f      	bmi.n	1320 <CONFIG_FPROTECT_BLOCK_SIZE+0x320>
				sign = ' ';
    1300:	f013 0610 	ands.w	r6, r3, #16
    1304:	bf18      	it	ne
    1306:	2620      	movne	r6, #32
			sint = value->sint;
    1308:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    130c:	2b00      	cmp	r3, #0
    130e:	f6bf af5f 	bge.w	11d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d0>
				value->uint = (uint_value_type)-sint;
    1312:	4252      	negs	r2, r2
    1314:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1318:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    131c:	262d      	movs	r6, #45	; 0x2d
    131e:	e757      	b.n	11d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d0>
				sign = '+';
    1320:	262b      	movs	r6, #43	; 0x2b
    1322:	e7f1      	b.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
		switch (conv->specifier) {
    1324:	2600      	movs	r6, #0
    1326:	e753      	b.n	11d0 <CONFIG_FPROTECT_BLOCK_SIZE+0x1d0>
			if (value->ptr != NULL) {
    1328:	980a      	ldr	r0, [sp, #40]	; 0x28
    132a:	b340      	cbz	r0, 137e <CONFIG_FPROTECT_BLOCK_SIZE+0x37e>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    132c:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1330:	9300      	str	r3, [sp, #0]
    1332:	aa0c      	add	r2, sp, #48	; 0x30
    1334:	ab04      	add	r3, sp, #16
    1336:	2100      	movs	r1, #0
    1338:	f008 fe93 	bl	a062 <encode_uint>
				conv->altform_0c = true;
    133c:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    1340:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1344:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1348:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    134c:	4682      	mov	sl, r0
				conv->altform_0c = true;
    134e:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    1352:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1354:	e746      	b.n	11e4 <CONFIG_FPROTECT_BLOCK_SIZE+0x1e4>
				store_count(conv, value->ptr, count);
    1356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1358:	2907      	cmp	r1, #7
    135a:	f63f aee1 	bhi.w	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
    135e:	e8df f001 	tbb	[pc, r1]
    1362:	040c      	.short	0x040c
    1364:	08080c06 	.word	0x08080c06
    1368:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    136a:	701d      	strb	r5, [r3, #0]
		break;
    136c:	e6d8      	b.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
		*(short *)dp = (short)count;
    136e:	801d      	strh	r5, [r3, #0]
		break;
    1370:	e6d6      	b.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
		*(intmax_t *)dp = (intmax_t)count;
    1372:	17ea      	asrs	r2, r5, #31
    1374:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    1378:	e6d2      	b.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    137a:	601d      	str	r5, [r3, #0]
		break;
    137c:	e6d0      	b.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
			bps = "(nil)";
    137e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1448 <CONFIG_FPROTECT_BLOCK_SIZE+0x448>
    1382:	4606      	mov	r6, r0
			bpe = bps + 5;
    1384:	f10a 0805 	add.w	r8, sl, #5
    1388:	e78e      	b.n	12a8 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a8>
		} else if (conv->altform_0) {
    138a:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    138c:	bf48      	it	mi
    138e:	3301      	addmi	r3, #1
    1390:	e793      	b.n	12ba <CONFIG_FPROTECT_BLOCK_SIZE+0x2ba>
					OUTC(pad);
    1392:	4618      	mov	r0, r3
    1394:	9303      	str	r3, [sp, #12]
    1396:	4659      	mov	r1, fp
    1398:	9b02      	ldr	r3, [sp, #8]
    139a:	4798      	blx	r3
    139c:	2800      	cmp	r0, #0
    139e:	9b03      	ldr	r3, [sp, #12]
    13a0:	da04      	bge.n	13ac <CONFIG_FPROTECT_BLOCK_SIZE+0x3ac>
#undef OUTS
#undef OUTC
}
    13a2:	b011      	add	sp, #68	; 0x44
    13a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    13a8:	2320      	movs	r3, #32
    13aa:	444d      	add	r5, r9
    13ac:	464a      	mov	r2, r9
				while (width-- > 0) {
    13ae:	2a00      	cmp	r2, #0
    13b0:	eba5 0109 	sub.w	r1, r5, r9
    13b4:	f109 39ff 	add.w	r9, r9, #4294967295
    13b8:	dceb      	bgt.n	1392 <CONFIG_FPROTECT_BLOCK_SIZE+0x392>
    13ba:	460d      	mov	r5, r1
		if (sign != 0) {
    13bc:	b136      	cbz	r6, 13cc <CONFIG_FPROTECT_BLOCK_SIZE+0x3cc>
			OUTC(sign);
    13be:	9b02      	ldr	r3, [sp, #8]
    13c0:	4659      	mov	r1, fp
    13c2:	4630      	mov	r0, r6
    13c4:	4798      	blx	r3
    13c6:	2800      	cmp	r0, #0
    13c8:	dbeb      	blt.n	13a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a2>
    13ca:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    13cc:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    13d0:	06d9      	lsls	r1, r3, #27
    13d2:	d401      	bmi.n	13d8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3d8>
    13d4:	071a      	lsls	r2, r3, #28
    13d6:	d506      	bpl.n	13e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x3e6>
				OUTC('0');
    13d8:	9b02      	ldr	r3, [sp, #8]
    13da:	4659      	mov	r1, fp
    13dc:	2030      	movs	r0, #48	; 0x30
    13de:	4798      	blx	r3
    13e0:	2800      	cmp	r0, #0
    13e2:	dbde      	blt.n	13a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a2>
    13e4:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    13e6:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    13ea:	06db      	lsls	r3, r3, #27
    13ec:	d507      	bpl.n	13fe <CONFIG_FPROTECT_BLOCK_SIZE+0x3fe>
				OUTC(conv->specifier);
    13ee:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    13f2:	9b02      	ldr	r3, [sp, #8]
    13f4:	4659      	mov	r1, fp
    13f6:	4798      	blx	r3
    13f8:	2800      	cmp	r0, #0
    13fa:	dbd2      	blt.n	13a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a2>
    13fc:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    13fe:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1400:	442e      	add	r6, r5
    1402:	1b73      	subs	r3, r6, r5
    1404:	2b00      	cmp	r3, #0
    1406:	dc16      	bgt.n	1436 <CONFIG_FPROTECT_BLOCK_SIZE+0x436>
			OUTS(bps, bpe);
    1408:	9802      	ldr	r0, [sp, #8]
    140a:	4643      	mov	r3, r8
    140c:	4652      	mov	r2, sl
    140e:	4659      	mov	r1, fp
    1410:	f008 fe6d 	bl	a0ee <outs>
    1414:	2800      	cmp	r0, #0
    1416:	dbc4      	blt.n	13a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a2>
    1418:	4405      	add	r5, r0
		while (width > 0) {
    141a:	44a9      	add	r9, r5
    141c:	eba9 0305 	sub.w	r3, r9, r5
    1420:	2b00      	cmp	r3, #0
    1422:	f77f ae7d 	ble.w	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
			OUTC(' ');
    1426:	9b02      	ldr	r3, [sp, #8]
    1428:	4659      	mov	r1, fp
    142a:	2020      	movs	r0, #32
    142c:	4798      	blx	r3
    142e:	2800      	cmp	r0, #0
    1430:	dbb7      	blt.n	13a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a2>
    1432:	3501      	adds	r5, #1
			--width;
    1434:	e7f2      	b.n	141c <CONFIG_FPROTECT_BLOCK_SIZE+0x41c>
				OUTC('0');
    1436:	9b02      	ldr	r3, [sp, #8]
    1438:	4659      	mov	r1, fp
    143a:	2030      	movs	r0, #48	; 0x30
    143c:	4798      	blx	r3
    143e:	2800      	cmp	r0, #0
    1440:	dbaf      	blt.n	13a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a2>
    1442:	3501      	adds	r5, #1
    1444:	e7dd      	b.n	1402 <CONFIG_FPROTECT_BLOCK_SIZE+0x402>
    1446:	bf00      	nop
    1448:	0000bd3c 	.word	0x0000bd3c

0000144c <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    144c:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    144e:	4910      	ldr	r1, [pc, #64]	; (1490 <enable_logger+0x44>)
    1450:	4810      	ldr	r0, [pc, #64]	; (1494 <enable_logger+0x48>)
{
    1452:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    1454:	2200      	movs	r2, #0
    1456:	f00a f8bf 	bl	b5d8 <k_timer_init>
		};
		return (k_tid_t) arch_syscall_invoke6(parm0.x, parm1.x, parm2.x, parm3.x, parm4.x, (uintptr_t) &more, K_SYSCALL_K_THREAD_CREATE);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    145a:	4d0f      	ldr	r5, [pc, #60]	; (1498 <enable_logger+0x4c>)
    145c:	490f      	ldr	r1, [pc, #60]	; (149c <enable_logger+0x50>)
    145e:	2200      	movs	r2, #0
    1460:	2300      	movs	r3, #0
    1462:	e9cd 2306 	strd	r2, r3, [sp, #24]
    1466:	2400      	movs	r4, #0
    1468:	230e      	movs	r3, #14
    146a:	e9cd 3403 	strd	r3, r4, [sp, #12]
    146e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1472:	4b0b      	ldr	r3, [pc, #44]	; (14a0 <enable_logger+0x54>)
    1474:	9400      	str	r4, [sp, #0]
    1476:	f44f 7240 	mov.w	r2, #768	; 0x300
    147a:	4628      	mov	r0, r5
    147c:	f007 f9d4 	bl	8828 <z_impl_k_thread_create>
		union { uintptr_t x; const char * val; } parm1 = { .val = str };
		return (int) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_K_THREAD_NAME_SET);
	}
#endif
	compiler_barrier();
	return z_impl_k_thread_name_set(thread, str);
    1480:	4908      	ldr	r1, [pc, #32]	; (14a4 <enable_logger+0x58>)
    1482:	4628      	mov	r0, r5
    1484:	f009 fe25 	bl	b0d2 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    1488:	4620      	mov	r0, r4
    148a:	b009      	add	sp, #36	; 0x24
    148c:	bd30      	pop	{r4, r5, pc}
    148e:	bf00      	nop
    1490:	000014a9 	.word	0x000014a9
    1494:	20000648 	.word	0x20000648
    1498:	20000680 	.word	0x20000680
    149c:	20001da0 	.word	0x20001da0
    14a0:	000016cd 	.word	0x000016cd
    14a4:	0000bd42 	.word	0x0000bd42

000014a8 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    14a8:	4801      	ldr	r0, [pc, #4]	; (14b0 <log_process_thread_timer_expiry_fn+0x8>)
    14aa:	f007 bb4f 	b.w	8b4c <z_impl_k_sem_give>
    14ae:	bf00      	nop
    14b0:	20000180 	.word	0x20000180

000014b4 <log_format_func_t_get>:
}
    14b4:	4b01      	ldr	r3, [pc, #4]	; (14bc <log_format_func_t_get+0x8>)
    14b6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    14ba:	4770      	bx	lr
    14bc:	0000ba68 	.word	0x0000ba68

000014c0 <log_init>:
{
    14c0:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    14c2:	4b12      	ldr	r3, [pc, #72]	; (150c <log_init+0x4c>)
    14c4:	f3bf 8f5b 	dmb	ish
    14c8:	e853 5f00 	ldrex	r5, [r3]
    14cc:	1c6a      	adds	r2, r5, #1
    14ce:	e843 2100 	strex	r1, r2, [r3]
    14d2:	2900      	cmp	r1, #0
    14d4:	d1f8      	bne.n	14c8 <log_init+0x8>
    14d6:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    14da:	b92d      	cbnz	r5, 14e8 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    14dc:	4c0c      	ldr	r4, [pc, #48]	; (1510 <log_init+0x50>)
    14de:	4e0d      	ldr	r6, [pc, #52]	; (1514 <log_init+0x54>)
    14e0:	1b36      	subs	r6, r6, r4
    14e2:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    14e4:	42b5      	cmp	r5, r6
    14e6:	db00      	blt.n	14ea <log_init+0x2a>
}
    14e8:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    14ea:	7b23      	ldrb	r3, [r4, #12]
    14ec:	b153      	cbz	r3, 1504 <log_init+0x44>
			if (backend->api->init != NULL) {
    14ee:	6823      	ldr	r3, [r4, #0]
    14f0:	699b      	ldr	r3, [r3, #24]
    14f2:	b10b      	cbz	r3, 14f8 <log_init+0x38>
				backend->api->init(backend);
    14f4:	4620      	mov	r0, r4
    14f6:	4798      	blx	r3
			log_backend_enable(backend,
    14f8:	6863      	ldr	r3, [r4, #4]
    14fa:	2204      	movs	r2, #4
    14fc:	6819      	ldr	r1, [r3, #0]
    14fe:	4620      	mov	r0, r4
    1500:	f000 f992 	bl	1828 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    1504:	3501      	adds	r5, #1
    1506:	3410      	adds	r4, #16
    1508:	e7ec      	b.n	14e4 <log_init+0x24>
    150a:	bf00      	nop
    150c:	200009e0 	.word	0x200009e0
    1510:	0000ba0c 	.word	0x0000ba0c
    1514:	0000ba1c 	.word	0x0000ba1c

00001518 <z_log_notify_backend_enabled>:
{
    1518:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    151a:	4c04      	ldr	r4, [pc, #16]	; (152c <z_log_notify_backend_enabled+0x14>)
    151c:	7823      	ldrb	r3, [r4, #0]
    151e:	b913      	cbnz	r3, 1526 <z_log_notify_backend_enabled+0xe>
    1520:	4803      	ldr	r0, [pc, #12]	; (1530 <z_log_notify_backend_enabled+0x18>)
    1522:	f007 fb13 	bl	8b4c <z_impl_k_sem_give>
	backend_attached = true;
    1526:	2301      	movs	r3, #1
    1528:	7023      	strb	r3, [r4, #0]
}
    152a:	bd10      	pop	{r4, pc}
    152c:	20001946 	.word	0x20001946
    1530:	20000180 	.word	0x20000180

00001534 <z_log_dropped>:
    1534:	4b0c      	ldr	r3, [pc, #48]	; (1568 <z_log_dropped+0x34>)
    1536:	f3bf 8f5b 	dmb	ish
    153a:	e853 2f00 	ldrex	r2, [r3]
    153e:	3201      	adds	r2, #1
    1540:	e843 2100 	strex	r1, r2, [r3]
    1544:	2900      	cmp	r1, #0
    1546:	d1f8      	bne.n	153a <z_log_dropped+0x6>
    1548:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    154c:	b158      	cbz	r0, 1566 <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    154e:	f3bf 8f5b 	dmb	ish
    1552:	4b06      	ldr	r3, [pc, #24]	; (156c <z_log_dropped+0x38>)
    1554:	e853 2f00 	ldrex	r2, [r3]
    1558:	3a01      	subs	r2, #1
    155a:	e843 2100 	strex	r1, r2, [r3]
    155e:	2900      	cmp	r1, #0
    1560:	d1f8      	bne.n	1554 <z_log_dropped+0x20>
    1562:	f3bf 8f5b 	dmb	ish
}
    1566:	4770      	bx	lr
    1568:	200009dc 	.word	0x200009dc
    156c:	200009d8 	.word	0x200009d8

00001570 <z_log_dropped_read_and_clear>:
}
    1570:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1572:	4b06      	ldr	r3, [pc, #24]	; (158c <z_log_dropped_read_and_clear+0x1c>)
    1574:	f3bf 8f5b 	dmb	ish
    1578:	4602      	mov	r2, r0
    157a:	e853 0f00 	ldrex	r0, [r3]
    157e:	e843 2100 	strex	r1, r2, [r3]
    1582:	2900      	cmp	r1, #0
    1584:	d1f9      	bne.n	157a <z_log_dropped_read_and_clear+0xa>
    1586:	f3bf 8f5b 	dmb	ish
    158a:	4770      	bx	lr
    158c:	200009dc 	.word	0x200009dc

00001590 <dropped_notify>:
{
    1590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    1592:	f7ff ffed 	bl	1570 <z_log_dropped_read_and_clear>
    1596:	4c0a      	ldr	r4, [pc, #40]	; (15c0 <dropped_notify+0x30>)
    1598:	4d0a      	ldr	r5, [pc, #40]	; (15c4 <dropped_notify+0x34>)
    159a:	1b2d      	subs	r5, r5, r4
    159c:	4607      	mov	r7, r0
    159e:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    15a0:	2600      	movs	r6, #0
    15a2:	42ae      	cmp	r6, r5
    15a4:	db00      	blt.n	15a8 <dropped_notify+0x18>
}
    15a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    15a8:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    15aa:	795b      	ldrb	r3, [r3, #5]
    15ac:	b12b      	cbz	r3, 15ba <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    15ae:	6823      	ldr	r3, [r4, #0]
    15b0:	691b      	ldr	r3, [r3, #16]
    15b2:	b113      	cbz	r3, 15ba <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    15b4:	4639      	mov	r1, r7
    15b6:	4620      	mov	r0, r4
    15b8:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    15ba:	3601      	adds	r6, #1
    15bc:	3410      	adds	r4, #16
    15be:	e7f0      	b.n	15a2 <dropped_notify+0x12>
    15c0:	0000ba0c 	.word	0x0000ba0c
    15c4:	0000ba1c 	.word	0x0000ba1c

000015c8 <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    15c8:	4901      	ldr	r1, [pc, #4]	; (15d0 <z_log_msg2_init+0x8>)
    15ca:	4802      	ldr	r0, [pc, #8]	; (15d4 <z_log_msg2_init+0xc>)
    15cc:	f008 be5a 	b.w	a284 <mpsc_pbuf_init>
    15d0:	0000ba74 	.word	0x0000ba74
    15d4:	200009e4 	.word	0x200009e4

000015d8 <log_core_init>:
	panic_mode = false;
    15d8:	4a08      	ldr	r2, [pc, #32]	; (15fc <log_core_init+0x24>)
{
    15da:	b508      	push	{r3, lr}
	panic_mode = false;
    15dc:	2300      	movs	r3, #0
    15de:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    15e0:	4a07      	ldr	r2, [pc, #28]	; (1600 <log_core_init+0x28>)
    15e2:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    15e4:	4b07      	ldr	r3, [pc, #28]	; (1604 <log_core_init+0x2c>)
    15e6:	4a08      	ldr	r2, [pc, #32]	; (1608 <log_core_init+0x30>)
    15e8:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    15ea:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    15ee:	f000 fafb 	bl	1be8 <log_output_timestamp_freq_set>
}
    15f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg2_init();
    15f6:	f7ff bfe7 	b.w	15c8 <z_log_msg2_init>
    15fa:	bf00      	nop
    15fc:	20001947 	.word	0x20001947
    1600:	200009dc 	.word	0x200009dc
    1604:	20000004 	.word	0x20000004
    1608:	0000a52d 	.word	0x0000a52d

0000160c <z_log_msg2_alloc>:
{
    160c:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    160e:	2200      	movs	r2, #0
    1610:	4801      	ldr	r0, [pc, #4]	; (1618 <z_log_msg2_alloc+0xc>)
    1612:	2300      	movs	r3, #0
    1614:	f008 be57 	b.w	a2c6 <mpsc_pbuf_alloc>
    1618:	200009e4 	.word	0x200009e4

0000161c <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    161c:	4801      	ldr	r0, [pc, #4]	; (1624 <z_log_msg2_claim+0x8>)
    161e:	f008 bee8 	b.w	a3f2 <mpsc_pbuf_claim>
    1622:	bf00      	nop
    1624:	200009e4 	.word	0x200009e4

00001628 <z_log_msg2_free>:
{
    1628:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    162a:	4801      	ldr	r0, [pc, #4]	; (1630 <z_log_msg2_free+0x8>)
    162c:	f008 bf2d 	b.w	a48a <mpsc_pbuf_free>
    1630:	200009e4 	.word	0x200009e4

00001634 <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    1634:	4801      	ldr	r0, [pc, #4]	; (163c <z_log_msg2_pending+0x8>)
    1636:	f008 bf5c 	b.w	a4f2 <mpsc_pbuf_is_pending>
    163a:	bf00      	nop
    163c:	200009e4 	.word	0x200009e4

00001640 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    1640:	4b1d      	ldr	r3, [pc, #116]	; (16b8 <z_impl_log_process+0x78>)
    1642:	781b      	ldrb	r3, [r3, #0]
{
    1644:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1648:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    164a:	b903      	cbnz	r3, 164e <z_impl_log_process+0xe>
    164c:	b388      	cbz	r0, 16b2 <z_impl_log_process+0x72>
	msg = get_msg();
    164e:	f008 ff82 	bl	a556 <get_msg>
	if (msg.msg) {
    1652:	4606      	mov	r6, r0
    1654:	b118      	cbz	r0, 165e <z_impl_log_process+0x1e>
		if (!bypass) {
    1656:	b16d      	cbz	r5, 1674 <z_impl_log_process+0x34>
		z_log_msg2_free(msg.msg2);
    1658:	4630      	mov	r0, r6
    165a:	f7ff ffe5 	bl	1628 <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
    165e:	b92d      	cbnz	r5, 166c <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
    1660:	4b16      	ldr	r3, [pc, #88]	; (16bc <z_impl_log_process+0x7c>)
	if (!bypass && z_log_dropped_pending()) {
    1662:	681b      	ldr	r3, [r3, #0]
    1664:	2b00      	cmp	r3, #0
    1666:	dd01      	ble.n	166c <z_impl_log_process+0x2c>
		dropped_notify();
    1668:	f7ff ff92 	bl	1590 <dropped_notify>
}
    166c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_log_msg2_pending();
    1670:	f7ff bfe0 	b.w	1634 <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1674:	4b12      	ldr	r3, [pc, #72]	; (16c0 <z_impl_log_process+0x80>)
    1676:	f3bf 8f5b 	dmb	ish
    167a:	e853 2f00 	ldrex	r2, [r3]
    167e:	3a01      	subs	r2, #1
    1680:	e843 2100 	strex	r1, r2, [r3]
    1684:	2900      	cmp	r1, #0
    1686:	d1f8      	bne.n	167a <z_impl_log_process+0x3a>
    1688:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
    168c:	4c0d      	ldr	r4, [pc, #52]	; (16c4 <z_impl_log_process+0x84>)
    168e:	4f0e      	ldr	r7, [pc, #56]	; (16c8 <z_impl_log_process+0x88>)
    1690:	1b3f      	subs	r7, r7, r4
    1692:	113f      	asrs	r7, r7, #4
    1694:	46a8      	mov	r8, r5
		for (int i = 0; i < log_backend_count_get(); i++) {
    1696:	45b8      	cmp	r8, r7
    1698:	dade      	bge.n	1658 <z_impl_log_process+0x18>
	return backend->cb->active;
    169a:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    169c:	795b      	ldrb	r3, [r3, #5]
    169e:	b123      	cbz	r3, 16aa <z_impl_log_process+0x6a>
	backend->api->process(backend, msg);
    16a0:	6823      	ldr	r3, [r4, #0]
    16a2:	4631      	mov	r1, r6
    16a4:	681b      	ldr	r3, [r3, #0]
    16a6:	4620      	mov	r0, r4
    16a8:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    16aa:	f108 0801 	add.w	r8, r8, #1
    16ae:	3410      	adds	r4, #16
    16b0:	e7f1      	b.n	1696 <z_impl_log_process+0x56>
}
    16b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    16b6:	bf00      	nop
    16b8:	20001946 	.word	0x20001946
    16bc:	200009dc 	.word	0x200009dc
    16c0:	200009d8 	.word	0x200009d8
    16c4:	0000ba0c 	.word	0x0000ba0c
    16c8:	0000ba1c 	.word	0x0000ba1c

000016cc <log_process_thread_func>:
{
    16cc:	b510      	push	{r4, lr}
	log_init();
    16ce:	f7ff fef7 	bl	14c0 <log_init>
	return z_impl_z_current_get();
    16d2:	f007 fee3 	bl	949c <z_impl_z_current_get>
	proc_tid = process_tid;
    16d6:	4b0c      	ldr	r3, [pc, #48]	; (1708 <log_process_thread_func+0x3c>)
    16d8:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    16da:	b130      	cbz	r0, 16ea <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    16dc:	4b0b      	ldr	r3, [pc, #44]	; (170c <log_process_thread_func+0x40>)
	    process_tid &&
    16de:	681b      	ldr	r3, [r3, #0]
    16e0:	2b09      	cmp	r3, #9
    16e2:	dd02      	ble.n	16ea <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    16e4:	480a      	ldr	r0, [pc, #40]	; (1710 <log_process_thread_func+0x44>)
    16e6:	f007 fa31 	bl	8b4c <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    16ea:	4c09      	ldr	r4, [pc, #36]	; (1710 <log_process_thread_func+0x44>)
		union { uintptr_t x; bool val; } parm0 = { .val = bypass };
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    16ec:	2000      	movs	r0, #0
    16ee:	f7ff ffa7 	bl	1640 <z_impl_log_process>
		if (log_process(false) == false) {
    16f2:	2800      	cmp	r0, #0
    16f4:	d1fa      	bne.n	16ec <log_process_thread_func+0x20>
    16f6:	f04f 32ff 	mov.w	r2, #4294967295
    16fa:	f04f 33ff 	mov.w	r3, #4294967295
    16fe:	4620      	mov	r0, r4
    1700:	f007 fa44 	bl	8b8c <z_impl_k_sem_take>
    1704:	e7f2      	b.n	16ec <log_process_thread_func+0x20>
    1706:	bf00      	nop
    1708:	20000a1c 	.word	0x20000a1c
    170c:	200009d8 	.word	0x200009d8
    1710:	20000180 	.word	0x20000180

00001714 <z_log_msg_post_finalize>:
{
    1714:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    1716:	4b1d      	ldr	r3, [pc, #116]	; (178c <z_log_msg_post_finalize+0x78>)
    1718:	f3bf 8f5b 	dmb	ish
    171c:	e853 2f00 	ldrex	r2, [r3]
    1720:	1c51      	adds	r1, r2, #1
    1722:	e843 1000 	strex	r0, r1, [r3]
    1726:	2800      	cmp	r0, #0
    1728:	d1f8      	bne.n	171c <z_log_msg_post_finalize+0x8>
    172a:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    172e:	4b18      	ldr	r3, [pc, #96]	; (1790 <z_log_msg_post_finalize+0x7c>)
    1730:	781b      	ldrb	r3, [r3, #0]
    1732:	b183      	cbz	r3, 1756 <z_log_msg_post_finalize+0x42>
    1734:	f04f 0320 	mov.w	r3, #32
    1738:	f3ef 8411 	mrs	r4, BASEPRI
    173c:	f383 8812 	msr	BASEPRI_MAX, r3
    1740:	f3bf 8f6f 	isb	sy
    1744:	2000      	movs	r0, #0
    1746:	f7ff ff7b 	bl	1640 <z_impl_log_process>
	__asm__ volatile(
    174a:	f384 8811 	msr	BASEPRI, r4
    174e:	f3bf 8f6f 	isb	sy
}
    1752:	b002      	add	sp, #8
    1754:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
    1756:	4b0f      	ldr	r3, [pc, #60]	; (1794 <z_log_msg_post_finalize+0x80>)
    1758:	681b      	ldr	r3, [r3, #0]
    175a:	2b00      	cmp	r3, #0
    175c:	d0f9      	beq.n	1752 <z_log_msg_post_finalize+0x3e>
    175e:	b952      	cbnz	r2, 1776 <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
    1760:	2200      	movs	r2, #0
    1762:	2300      	movs	r3, #0
    1764:	e9cd 2300 	strd	r2, r3, [sp]
    1768:	480b      	ldr	r0, [pc, #44]	; (1798 <z_log_msg_post_finalize+0x84>)
    176a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    176e:	2300      	movs	r3, #0
    1770:	f008 f896 	bl	98a0 <z_impl_k_timer_start>
    1774:	e7ed      	b.n	1752 <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    1776:	2a0a      	cmp	r2, #10
    1778:	d1eb      	bne.n	1752 <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
    177a:	4807      	ldr	r0, [pc, #28]	; (1798 <z_log_msg_post_finalize+0x84>)
    177c:	f009 ff38 	bl	b5f0 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1780:	4806      	ldr	r0, [pc, #24]	; (179c <z_log_msg_post_finalize+0x88>)
}
    1782:	b002      	add	sp, #8
    1784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1788:	f007 b9e0 	b.w	8b4c <z_impl_k_sem_give>
    178c:	200009d8 	.word	0x200009d8
    1790:	20001947 	.word	0x20001947
    1794:	20000a1c 	.word	0x20000a1c
    1798:	20000648 	.word	0x20000648
    179c:	20000180 	.word	0x20000180

000017a0 <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
    17a0:	4b06      	ldr	r3, [pc, #24]	; (17bc <z_log_msg2_commit+0x1c>)
{
    17a2:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    17a4:	681b      	ldr	r3, [r3, #0]
{
    17a6:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    17a8:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    17aa:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    17ac:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    17ae:	4804      	ldr	r0, [pc, #16]	; (17c0 <z_log_msg2_commit+0x20>)
    17b0:	f008 fdff 	bl	a3b2 <mpsc_pbuf_commit>
}
    17b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    17b8:	f7ff bfac 	b.w	1714 <z_log_msg_post_finalize>
    17bc:	20000004 	.word	0x20000004
    17c0:	200009e4 	.word	0x200009e4

000017c4 <z_impl_log_panic>:
{
    17c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    17c6:	4f0e      	ldr	r7, [pc, #56]	; (1800 <z_impl_log_panic+0x3c>)
    17c8:	783d      	ldrb	r5, [r7, #0]
    17ca:	b975      	cbnz	r5, 17ea <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    17cc:	4c0d      	ldr	r4, [pc, #52]	; (1804 <z_impl_log_panic+0x40>)
    17ce:	4e0e      	ldr	r6, [pc, #56]	; (1808 <z_impl_log_panic+0x44>)
	log_init();
    17d0:	f7ff fe76 	bl	14c0 <log_init>
    17d4:	1b36      	subs	r6, r6, r4
    17d6:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    17d8:	42b5      	cmp	r5, r6
    17da:	db07      	blt.n	17ec <z_impl_log_panic+0x28>
    17dc:	2000      	movs	r0, #0
    17de:	f7ff ff2f 	bl	1640 <z_impl_log_process>
		while (log_process(false) == true) {
    17e2:	2800      	cmp	r0, #0
    17e4:	d1fa      	bne.n	17dc <z_impl_log_panic+0x18>
	panic_mode = true;
    17e6:	2301      	movs	r3, #1
    17e8:	703b      	strb	r3, [r7, #0]
}
    17ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    17ec:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    17ee:	795b      	ldrb	r3, [r3, #5]
    17f0:	b11b      	cbz	r3, 17fa <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    17f2:	6823      	ldr	r3, [r4, #0]
    17f4:	4620      	mov	r0, r4
    17f6:	695b      	ldr	r3, [r3, #20]
    17f8:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    17fa:	3501      	adds	r5, #1
    17fc:	3410      	adds	r4, #16
    17fe:	e7eb      	b.n	17d8 <z_impl_log_panic+0x14>
    1800:	20001947 	.word	0x20001947
    1804:	0000ba0c 	.word	0x0000ba0c
    1808:	0000ba1c 	.word	0x0000ba1c

0000180c <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    180c:	4a04      	ldr	r2, [pc, #16]	; (1820 <log_source_name_get+0x14>)
    180e:	4b05      	ldr	r3, [pc, #20]	; (1824 <log_source_name_get+0x18>)
    1810:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1812:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    1816:	bf34      	ite	cc
    1818:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    181c:	2000      	movcs	r0, #0
}
    181e:	4770      	bx	lr
    1820:	0000b98c 	.word	0x0000b98c
    1824:	0000ba0c 	.word	0x0000ba0c

00001828 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1828:	4a05      	ldr	r2, [pc, #20]	; (1840 <log_backend_enable+0x18>)
	backend->cb->id = id;
    182a:	6843      	ldr	r3, [r0, #4]
    182c:	1a80      	subs	r0, r0, r2
    182e:	1100      	asrs	r0, r0, #4
    1830:	3001      	adds	r0, #1
	backend->cb->active = true;
    1832:	2201      	movs	r2, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
	}

	log_backend_id_set(backend, id);
    1834:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
    1836:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1838:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    183a:	f7ff be6d 	b.w	1518 <z_log_notify_backend_enabled>
    183e:	bf00      	nop
    1840:	0000ba0c 	.word	0x0000ba0c

00001844 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1844:	b40e      	push	{r1, r2, r3}
    1846:	b503      	push	{r0, r1, lr}
    1848:	ab03      	add	r3, sp, #12
    184a:	4601      	mov	r1, r0
    184c:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1850:	4804      	ldr	r0, [pc, #16]	; (1864 <print_formatted+0x20>)
	va_start(args, fmt);
    1852:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1854:	f7ff fa38 	bl	cc8 <cbvprintf>
	va_end(args);

	return length;
}
    1858:	b002      	add	sp, #8
    185a:	f85d eb04 	ldr.w	lr, [sp], #4
    185e:	b003      	add	sp, #12
    1860:	4770      	bx	lr
    1862:	bf00      	nop
    1864:	0000a597 	.word	0x0000a597

00001868 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    1868:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    186c:	461d      	mov	r5, r3
    186e:	9b08      	ldr	r3, [sp, #32]
    1870:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1872:	06da      	lsls	r2, r3, #27
{
    1874:	4604      	mov	r4, r0
    1876:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1878:	d405      	bmi.n	1886 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    187a:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    187c:	bf4c      	ite	mi
    187e:	492a      	ldrmi	r1, [pc, #168]	; (1928 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    1880:	492a      	ldrpl	r1, [pc, #168]	; (192c <hexdump_line_print+0xc4>)
    1882:	f7ff ffdf 	bl	1844 <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    1886:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1930 <hexdump_line_print+0xc8>
{
    188a:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    188e:	45a8      	cmp	r8, r5
    1890:	db2a      	blt.n	18e8 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    1892:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1934 <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    1896:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1938 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    189a:	f8df a094 	ldr.w	sl, [pc, #148]	; 1930 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    189e:	2500      	movs	r5, #0
		if (i < length) {
    18a0:	42bd      	cmp	r5, r7
    18a2:	d22f      	bcs.n	1904 <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    18a4:	5d72      	ldrb	r2, [r6, r5]
    18a6:	4649      	mov	r1, r9
    18a8:	4620      	mov	r0, r4
    18aa:	f7ff ffcb 	bl	1844 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    18ae:	3501      	adds	r5, #1
    18b0:	2d10      	cmp	r5, #16
    18b2:	d120      	bne.n	18f6 <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    18b4:	4921      	ldr	r1, [pc, #132]	; (193c <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    18b6:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1930 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    18ba:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1940 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    18be:	4620      	mov	r0, r4
    18c0:	f7ff ffc0 	bl	1844 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    18c4:	2500      	movs	r5, #0
		if (i < length) {
    18c6:	42af      	cmp	r7, r5
    18c8:	d928      	bls.n	191c <hexdump_line_print+0xb4>
			char c = (char)data[i];
    18ca:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    18cc:	f1a2 0320 	sub.w	r3, r2, #32
    18d0:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    18d2:	bf28      	it	cs
    18d4:	222e      	movcs	r2, #46	; 0x2e
    18d6:	4649      	mov	r1, r9
    18d8:	4620      	mov	r0, r4
    18da:	f7ff ffb3 	bl	1844 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    18de:	3501      	adds	r5, #1
    18e0:	2d10      	cmp	r5, #16
    18e2:	d114      	bne.n	190e <hexdump_line_print+0xa6>
		}
	}
}
    18e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    18e8:	4649      	mov	r1, r9
    18ea:	4620      	mov	r0, r4
    18ec:	f7ff ffaa 	bl	1844 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    18f0:	f108 0801 	add.w	r8, r8, #1
    18f4:	e7cb      	b.n	188e <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    18f6:	076a      	lsls	r2, r5, #29
    18f8:	d1d2      	bne.n	18a0 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    18fa:	4651      	mov	r1, sl
    18fc:	4620      	mov	r0, r4
    18fe:	f7ff ffa1 	bl	1844 <print_formatted>
    1902:	e7cd      	b.n	18a0 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    1904:	4641      	mov	r1, r8
    1906:	4620      	mov	r0, r4
    1908:	f7ff ff9c 	bl	1844 <print_formatted>
    190c:	e7cf      	b.n	18ae <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    190e:	076b      	lsls	r3, r5, #29
    1910:	d1d9      	bne.n	18c6 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    1912:	4641      	mov	r1, r8
    1914:	4620      	mov	r0, r4
    1916:	f7ff ff95 	bl	1844 <print_formatted>
    191a:	e7d4      	b.n	18c6 <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    191c:	4641      	mov	r1, r8
    191e:	4620      	mov	r0, r4
    1920:	f7ff ff90 	bl	1844 <print_formatted>
    1924:	e7db      	b.n	18de <hexdump_line_print+0x76>
    1926:	bf00      	nop
    1928:	0000bd4f 	.word	0x0000bd4f
    192c:	0000bd4e 	.word	0x0000bd4e
    1930:	0000bd59 	.word	0x0000bd59
    1934:	0000bd57 	.word	0x0000bd57
    1938:	0000bd51 	.word	0x0000bd51
    193c:	0000bd5b 	.word	0x0000bd5b
    1940:	0000bd5d 	.word	0x0000bd5d

00001944 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    1944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1948:	b087      	sub	sp, #28
    194a:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    194c:	f001 0301 	and.w	r3, r1, #1
{
    1950:	9205      	str	r2, [sp, #20]
    1952:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    1956:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    195a:	9304      	str	r3, [sp, #16]
{
    195c:	4607      	mov	r7, r0
    195e:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1960:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1964:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    1968:	f008 fdf9 	bl	a55e <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    196c:	4602      	mov	r2, r0
    196e:	2800      	cmp	r0, #0
    1970:	d044      	beq.n	19fc <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    1972:	493a      	ldr	r1, [pc, #232]	; (1a5c <prefix_print+0x118>)
    1974:	4638      	mov	r0, r7
    1976:	f7ff ff65 	bl	1844 <print_formatted>
    197a:	4605      	mov	r5, r0
	}

	if (stamp) {
    197c:	f1bb 0f00 	cmp.w	fp, #0
    1980:	d008      	beq.n	1994 <prefix_print+0x50>
	if (!format) {
    1982:	f018 0f44 	tst.w	r8, #68	; 0x44
    1986:	d13b      	bne.n	1a00 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    1988:	4935      	ldr	r1, [pc, #212]	; (1a60 <prefix_print+0x11c>)
    198a:	4622      	mov	r2, r4
    198c:	4638      	mov	r0, r7
    198e:	f7ff ff59 	bl	1844 <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    1992:	4405      	add	r5, r0
	if (color) {
    1994:	9b04      	ldr	r3, [sp, #16]
    1996:	b153      	cbz	r3, 19ae <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    1998:	4b32      	ldr	r3, [pc, #200]	; (1a64 <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    199a:	4933      	ldr	r1, [pc, #204]	; (1a68 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    199c:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    19a0:	4b32      	ldr	r3, [pc, #200]	; (1a6c <prefix_print+0x128>)
    19a2:	4638      	mov	r0, r7
    19a4:	2a00      	cmp	r2, #0
    19a6:	bf08      	it	eq
    19a8:	461a      	moveq	r2, r3
    19aa:	f7ff ff4b 	bl	1844 <print_formatted>
	if (level_on) {
    19ae:	b13e      	cbz	r6, 19c0 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    19b0:	4b2f      	ldr	r3, [pc, #188]	; (1a70 <prefix_print+0x12c>)
    19b2:	4930      	ldr	r1, [pc, #192]	; (1a74 <prefix_print+0x130>)
    19b4:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    19b8:	4638      	mov	r0, r7
    19ba:	f7ff ff43 	bl	1844 <print_formatted>
    19be:	4606      	mov	r6, r0
	if (source_id >= 0) {
    19c0:	f1ba 0f00 	cmp.w	sl, #0
    19c4:	db16      	blt.n	19f4 <prefix_print+0xb0>
		total += print_formatted(output,
    19c6:	9b05      	ldr	r3, [sp, #20]
    19c8:	2b00      	cmp	r3, #0
    19ca:	d045      	beq.n	1a58 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    19cc:	2301      	movs	r3, #1
    19ce:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    19d2:	4b29      	ldr	r3, [pc, #164]	; (1a78 <prefix_print+0x134>)
    19d4:	4c29      	ldr	r4, [pc, #164]	; (1a7c <prefix_print+0x138>)
    19d6:	f019 0f10 	tst.w	r9, #16
    19da:	bf18      	it	ne
    19dc:	461c      	movne	r4, r3
    19de:	4651      	mov	r1, sl
    19e0:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    19e4:	f7ff ff12 	bl	180c <log_source_name_get>
    19e8:	4621      	mov	r1, r4
    19ea:	4602      	mov	r2, r0
    19ec:	4638      	mov	r0, r7
    19ee:	f7ff ff29 	bl	1844 <print_formatted>
    19f2:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    19f4:	1970      	adds	r0, r6, r5
    19f6:	b007      	add	sp, #28
    19f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    19fc:	4605      	mov	r5, r0
    19fe:	e7bd      	b.n	197c <prefix_print+0x38>
	} else if (freq != 0U) {
    1a00:	4b1f      	ldr	r3, [pc, #124]	; (1a80 <prefix_print+0x13c>)
    1a02:	6818      	ldr	r0, [r3, #0]
    1a04:	2800      	cmp	r0, #0
    1a06:	d0c4      	beq.n	1992 <prefix_print+0x4e>
		timestamp /= timestamp_div;
    1a08:	4b1e      	ldr	r3, [pc, #120]	; (1a84 <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    1a0a:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1a0e:	681b      	ldr	r3, [r3, #0]
    1a10:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    1a14:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    1a18:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    1a1c:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    1a20:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    1a24:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    1a28:	fbb3 f2f1 	udiv	r2, r3, r1
    1a2c:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1a30:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    1a34:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1a38:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    1a3c:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1a40:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    1a44:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1a46:	fbb4 f0f0 	udiv	r0, r4, r0
				length = print_formatted(output,
    1a4a:	490f      	ldr	r1, [pc, #60]	; (1a88 <prefix_print+0x144>)
    1a4c:	e9cd e001 	strd	lr, r0, [sp, #4]
    1a50:	4638      	mov	r0, r7
    1a52:	f7ff fef7 	bl	1844 <print_formatted>
    1a56:	e79c      	b.n	1992 <prefix_print+0x4e>
		total += print_formatted(output,
    1a58:	4c08      	ldr	r4, [pc, #32]	; (1a7c <prefix_print+0x138>)
    1a5a:	e7c0      	b.n	19de <prefix_print+0x9a>
    1a5c:	0000bd6e 	.word	0x0000bd6e
    1a60:	0000bd72 	.word	0x0000bd72
    1a64:	0000ba88 	.word	0x0000ba88
    1a68:	0000c7dd 	.word	0x0000c7dd
    1a6c:	0000bd60 	.word	0x0000bd60
    1a70:	0000ba9c 	.word	0x0000ba9c
    1a74:	0000bd97 	.word	0x0000bd97
    1a78:	0000bd6a 	.word	0x0000bd6a
    1a7c:	0000bd65 	.word	0x0000bd65
    1a80:	20000a20 	.word	0x20000a20
    1a84:	20000a24 	.word	0x20000a24
    1a88:	0000bd7b 	.word	0x0000bd7b

00001a8c <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    1a8c:	b538      	push	{r3, r4, r5, lr}
    1a8e:	460c      	mov	r4, r1
	if (color) {
    1a90:	07e1      	lsls	r1, r4, #31
{
    1a92:	4605      	mov	r5, r0
	if (color) {
    1a94:	d503      	bpl.n	1a9e <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    1a96:	4a08      	ldr	r2, [pc, #32]	; (1ab8 <postfix_print+0x2c>)
    1a98:	4908      	ldr	r1, [pc, #32]	; (1abc <postfix_print+0x30>)
    1a9a:	f7ff fed3 	bl	1844 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1a9e:	06e2      	lsls	r2, r4, #27
    1aa0:	d408      	bmi.n	1ab4 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1aa2:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    1aa4:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    1aa6:	bf4c      	ite	mi
    1aa8:	4905      	ldrmi	r1, [pc, #20]	; (1ac0 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    1aaa:	4906      	ldrpl	r1, [pc, #24]	; (1ac4 <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    1aac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    1ab0:	f7ff bec8 	b.w	1844 <print_formatted>
}
    1ab4:	bd38      	pop	{r3, r4, r5, pc}
    1ab6:	bf00      	nop
    1ab8:	0000bd60 	.word	0x0000bd60
    1abc:	0000c7dd 	.word	0x0000c7dd
    1ac0:	0000bd4f 	.word	0x0000bd4f
    1ac4:	0000bd4e 	.word	0x0000bd4e

00001ac8 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    1ac8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    1acc:	880b      	ldrh	r3, [r1, #0]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    1ace:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    1ad2:	4606      	mov	r6, r0
    1ad4:	460c      	mov	r4, r1
    1ad6:	4690      	mov	r8, r2
    1ad8:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    1adc:	d04d      	beq.n	1b7a <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
    1ade:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    1ae0:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    1ae2:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    1ae6:	2b00      	cmp	r3, #0
    1ae8:	d044      	beq.n	1b74 <log_output_msg2_process+0xac>
    1aea:	4925      	ldr	r1, [pc, #148]	; (1b80 <log_output_msg2_process+0xb8>)
    1aec:	1a5b      	subs	r3, r3, r1
    1aee:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    1af2:	e9cd 2301 	strd	r2, r3, [sp, #4]
    1af6:	f8cd 9000 	str.w	r9, [sp]
    1afa:	68a3      	ldr	r3, [r4, #8]
    1afc:	2200      	movs	r2, #0
    1afe:	4641      	mov	r1, r8
    1b00:	4630      	mov	r0, r6
    1b02:	f7ff ff1f 	bl	1944 <prefix_print>
    1b06:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    1b08:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    1b0a:	f855 3b10 	ldr.w	r3, [r5], #16
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    1b0e:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1b12:	b153      	cbz	r3, 1b2a <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    1b14:	4f1b      	ldr	r7, [pc, #108]	; (1b84 <log_output_msg2_process+0xbc>)
    1b16:	481c      	ldr	r0, [pc, #112]	; (1b88 <log_output_msg2_process+0xc0>)
    1b18:	491c      	ldr	r1, [pc, #112]	; (1b8c <log_output_msg2_process+0xc4>)
    1b1a:	462b      	mov	r3, r5
    1b1c:	4632      	mov	r2, r6
    1b1e:	f1b9 0f00 	cmp.w	r9, #0
    1b22:	bf08      	it	eq
    1b24:	4638      	moveq	r0, r7
    1b26:	f007 ff4c 	bl	99c2 <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    1b2a:	8867      	ldrh	r7, [r4, #2]
    1b2c:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    1b30:	b197      	cbz	r7, 1b58 <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
    1b32:	6823      	ldr	r3, [r4, #0]
    1b34:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1b38:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1b3a:	2f10      	cmp	r7, #16
    1b3c:	463c      	mov	r4, r7
    1b3e:	bf28      	it	cs
    1b40:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    1b42:	4629      	mov	r1, r5
    1b44:	f8cd 8000 	str.w	r8, [sp]
    1b48:	4653      	mov	r3, sl
    1b4a:	4622      	mov	r2, r4
    1b4c:	4630      	mov	r0, r6
    1b4e:	f7ff fe8b 	bl	1868 <hexdump_line_print>
	} while (len);
    1b52:	1b3f      	subs	r7, r7, r4
		data += length;
    1b54:	4425      	add	r5, r4
	} while (len);
    1b56:	d1f0      	bne.n	1b3a <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    1b58:	f1b9 0f00 	cmp.w	r9, #0
    1b5c:	d004      	beq.n	1b68 <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
    1b5e:	464a      	mov	r2, r9
    1b60:	4641      	mov	r1, r8
    1b62:	4630      	mov	r0, r6
    1b64:	f7ff ff92 	bl	1a8c <postfix_print>
	}

	log_output_flush(output);
    1b68:	4630      	mov	r0, r6
}
    1b6a:	b004      	add	sp, #16
    1b6c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    1b70:	f008 bd04 	b.w	a57c <log_output_flush>
		int16_t source_id = source ?
    1b74:	f04f 33ff 	mov.w	r3, #4294967295
    1b78:	e7bb      	b.n	1af2 <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    1b7a:	46ca      	mov	sl, r9
    1b7c:	e7c4      	b.n	1b08 <log_output_msg2_process+0x40>
    1b7e:	bf00      	nop
    1b80:	0000b98c 	.word	0x0000b98c
    1b84:	0000a5cd 	.word	0x0000a5cd
    1b88:	0000a597 	.word	0x0000a597
    1b8c:	00000cc9 	.word	0x00000cc9

00001b90 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    1b90:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1b92:	f242 730f 	movw	r3, #9999	; 0x270f
    1b96:	428b      	cmp	r3, r1
    1b98:	bf28      	it	cs
    1b9a:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    1b9c:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1b9e:	4a0f      	ldr	r2, [pc, #60]	; (1bdc <log_output_dropped_process+0x4c>)
{
    1ba0:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1ba2:	2105      	movs	r1, #5
    1ba4:	4668      	mov	r0, sp
    1ba6:	f007 ff79 	bl	9a9c <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1baa:	6863      	ldr	r3, [r4, #4]
    1bac:	490c      	ldr	r1, [pc, #48]	; (1be0 <log_output_dropped_process+0x50>)
    1bae:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1bb0:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1bb2:	220b      	movs	r2, #11
    1bb4:	4628      	mov	r0, r5
    1bb6:	f008 fcd4 	bl	a562 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    1bba:	6863      	ldr	r3, [r4, #4]
    1bbc:	4632      	mov	r2, r6
    1bbe:	4669      	mov	r1, sp
    1bc0:	4628      	mov	r0, r5
    1bc2:	685b      	ldr	r3, [r3, #4]
    1bc4:	f008 fccd 	bl	a562 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    1bc8:	6863      	ldr	r3, [r4, #4]
    1bca:	4906      	ldr	r1, [pc, #24]	; (1be4 <log_output_dropped_process+0x54>)
    1bcc:	685b      	ldr	r3, [r3, #4]
    1bce:	221b      	movs	r2, #27
    1bd0:	4628      	mov	r0, r5
    1bd2:	f008 fcc6 	bl	a562 <buffer_write>
		     output->control_block->ctx);
}
    1bd6:	b002      	add	sp, #8
    1bd8:	bd70      	pop	{r4, r5, r6, pc}
    1bda:	bf00      	nop
    1bdc:	0000c593 	.word	0x0000c593
    1be0:	0000bdd9 	.word	0x0000bdd9
    1be4:	0000bdbd 	.word	0x0000bdbd

00001be8 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    1be8:	4a08      	ldr	r2, [pc, #32]	; (1c0c <log_output_timestamp_freq_set+0x24>)
{
    1bea:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    1bec:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1bee:	4c08      	ldr	r4, [pc, #32]	; (1c10 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    1bf0:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1bf2:	2100      	movs	r1, #0
    1bf4:	42a0      	cmp	r0, r4
    1bf6:	d804      	bhi.n	1c02 <log_output_timestamp_freq_set+0x1a>
    1bf8:	b101      	cbz	r1, 1bfc <log_output_timestamp_freq_set+0x14>
    1bfa:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1bfc:	4b05      	ldr	r3, [pc, #20]	; (1c14 <log_output_timestamp_freq_set+0x2c>)
    1bfe:	6018      	str	r0, [r3, #0]
}
    1c00:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    1c02:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1c04:	005b      	lsls	r3, r3, #1
    1c06:	2101      	movs	r1, #1
    1c08:	e7f4      	b.n	1bf4 <log_output_timestamp_freq_set+0xc>
    1c0a:	bf00      	nop
    1c0c:	20000a24 	.word	0x20000a24
    1c10:	000f4240 	.word	0x000f4240
    1c14:	20000a20 	.word	0x20000a20

00001c18 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    1c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c1c:	b087      	sub	sp, #28
    1c1e:	e9dd 5711 	ldrd	r5, r7, [sp, #68]	; 0x44
    1c22:	469a      	mov	sl, r3
    1c24:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1c26:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    1c2a:	9303      	str	r3, [sp, #12]
    1c2c:	4604      	mov	r4, r0
    1c2e:	4689      	mov	r9, r1
    1c30:	4690      	mov	r8, r2
	int plen;

	if (fmt) {
    1c32:	b3cf      	cbz	r7, 1ca8 <z_impl_z_log_msg2_runtime_vcreate+0x90>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    1c34:	f8cd b000 	str.w	fp, [sp]
    1c38:	463b      	mov	r3, r7
    1c3a:	462a      	mov	r2, r5
    1c3c:	2110      	movs	r1, #16
    1c3e:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    1c40:	f8cd b014 	str.w	fp, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    1c44:	f7fe fbba 	bl	3bc <cbvprintf_package>
    1c48:	4606      	mov	r6, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    1c4a:	9a03      	ldr	r2, [sp, #12]
    1c4c:	f008 0307 	and.w	r3, r8, #7
    1c50:	f004 0807 	and.w	r8, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1c54:	f102 0017 	add.w	r0, r2, #23
	struct log_msg2_desc desc =
    1c58:	4c14      	ldr	r4, [pc, #80]	; (1cac <z_impl_z_log_msg2_runtime_vcreate+0x94>)
    1c5a:	ea4f 08c8 	mov.w	r8, r8, lsl #3
    1c5e:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1c62:	4430      	add	r0, r6
	struct log_msg2_desc desc =
    1c64:	4b12      	ldr	r3, [pc, #72]	; (1cb0 <z_impl_z_log_msg2_runtime_vcreate+0x98>)
    1c66:	ea04 2446 	and.w	r4, r4, r6, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1c6a:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg2_desc desc =
    1c6e:	ea48 0804 	orr.w	r8, r8, r4
    1c72:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg2_alloc(msg_wlen);
    1c76:	0880      	lsrs	r0, r0, #2
	struct log_msg2_desc desc =
    1c78:	ea48 0803 	orr.w	r8, r8, r3
		msg = z_log_msg2_alloc(msg_wlen);
    1c7c:	f7ff fcc6 	bl	160c <z_log_msg2_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    1c80:	4604      	mov	r4, r0
    1c82:	b140      	cbz	r0, 1c96 <z_impl_z_log_msg2_runtime_vcreate+0x7e>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    1c84:	b13f      	cbz	r7, 1c96 <z_impl_z_log_msg2_runtime_vcreate+0x7e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    1c86:	f8cd b000 	str.w	fp, [sp]
    1c8a:	463b      	mov	r3, r7
    1c8c:	462a      	mov	r2, r5
    1c8e:	4631      	mov	r1, r6
    1c90:	3010      	adds	r0, #16
    1c92:	f7fe fb93 	bl	3bc <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    1c96:	4653      	mov	r3, sl
    1c98:	4642      	mov	r2, r8
    1c9a:	4649      	mov	r1, r9
    1c9c:	4620      	mov	r0, r4
	}
}
    1c9e:	b007      	add	sp, #28
    1ca0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg2_finalize(msg, source, desc, data);
    1ca4:	f008 bc9f 	b.w	a5e6 <z_log_msg2_finalize>
		plen = 0;
    1ca8:	463e      	mov	r6, r7
    1caa:	e7ce      	b.n	1c4a <z_impl_z_log_msg2_runtime_vcreate+0x32>
    1cac:	0007fe00 	.word	0x0007fe00
    1cb0:	7ff80000 	.word	0x7ff80000

00001cb4 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    1cb4:	4b01      	ldr	r3, [pc, #4]	; (1cbc <log_backend_rtt_init+0x8>)
    1cb6:	2201      	movs	r2, #1
    1cb8:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    1cba:	4770      	bx	lr
    1cbc:	20001958 	.word	0x20001958

00001cc0 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    1cc0:	4b01      	ldr	r3, [pc, #4]	; (1cc8 <format_set+0x8>)
	return 0;
}
    1cc2:	2000      	movs	r0, #0
	log_format_current = log_type;
    1cc4:	6019      	str	r1, [r3, #0]
}
    1cc6:	4770      	bx	lr
    1cc8:	20000a30 	.word	0x20000a30

00001ccc <panic>:
	panic_mode = true;
    1ccc:	4b02      	ldr	r3, [pc, #8]	; (1cd8 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    1cce:	4803      	ldr	r0, [pc, #12]	; (1cdc <panic+0x10>)
    1cd0:	2201      	movs	r2, #1
    1cd2:	701a      	strb	r2, [r3, #0]
    1cd4:	f008 bc52 	b.w	a57c <log_output_flush>
    1cd8:	20001959 	.word	0x20001959
    1cdc:	0000bad0 	.word	0x0000bad0

00001ce0 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    1ce0:	4801      	ldr	r0, [pc, #4]	; (1ce8 <dropped+0x8>)
    1ce2:	f7ff bf55 	b.w	1b90 <log_output_dropped_process>
    1ce6:	bf00      	nop
    1ce8:	0000bad0 	.word	0x0000bad0

00001cec <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1cec:	4b06      	ldr	r3, [pc, #24]	; (1d08 <process+0x1c>)
{
    1cee:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1cf0:	6818      	ldr	r0, [r3, #0]
{
    1cf2:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1cf4:	f7ff fbde 	bl	14b4 <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    1cf8:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1cfa:	4603      	mov	r3, r0
}
    1cfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    1d00:	4802      	ldr	r0, [pc, #8]	; (1d0c <process+0x20>)
    1d02:	220f      	movs	r2, #15
    1d04:	4718      	bx	r3
    1d06:	bf00      	nop
    1d08:	20000a30 	.word	0x20000a30
    1d0c:	0000bad0 	.word	0x0000bad0

00001d10 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    1d10:	4b05      	ldr	r3, [pc, #20]	; (1d28 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    1d12:	781b      	ldrb	r3, [r3, #0]
    1d14:	b11b      	cbz	r3, 1d1e <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    1d16:	f241 3088 	movw	r0, #5000	; 0x1388
    1d1a:	f009 bc2e 	b.w	b57a <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    1d1e:	20a4      	movs	r0, #164	; 0xa4
    1d20:	2100      	movs	r1, #0
    1d22:	f007 bba1 	b.w	9468 <z_impl_k_sleep>
    1d26:	bf00      	nop
    1d28:	20001959 	.word	0x20001959

00001d2c <data_out_block_mode>:
{
    1d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    1d30:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1dc0 <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
    1d34:	f8df a08c 	ldr.w	sl, [pc, #140]	; 1dc4 <data_out_block_mode+0x98>
{
    1d38:	4680      	mov	r8, r0
    1d3a:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    1d3c:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    1d3e:	f899 5000 	ldrb.w	r5, [r9]
    1d42:	b9cd      	cbnz	r5, 1d78 <data_out_block_mode+0x4c>
    1d44:	f04f 33ff 	mov.w	r3, #4294967295
    1d48:	f04f 32ff 	mov.w	r2, #4294967295
    1d4c:	4650      	mov	r0, sl
    1d4e:	f006 fe0f 	bl	8970 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1d52:	463a      	mov	r2, r7
    1d54:	4641      	mov	r1, r8
    1d56:	4628      	mov	r0, r5
    1d58:	f006 face 	bl	82f8 <SEGGER_RTT_WriteSkipNoLock>
    1d5c:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    1d5e:	4650      	mov	r0, sl
    1d60:	f006 fe7e 	bl	8a60 <z_impl_k_mutex_unlock>
		if (ret) {
    1d64:	4d18      	ldr	r5, [pc, #96]	; (1dc8 <data_out_block_mode+0x9c>)
    1d66:	b1fe      	cbz	r6, 1da8 <data_out_block_mode+0x7c>
	host_present = true;
    1d68:	2301      	movs	r3, #1
    1d6a:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    1d6c:	f899 3000 	ldrb.w	r3, [r9]
    1d70:	b96b      	cbnz	r3, 1d8e <data_out_block_mode+0x62>
}
    1d72:	4638      	mov	r0, r7
    1d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1d78:	463a      	mov	r2, r7
    1d7a:	4641      	mov	r1, r8
    1d7c:	2000      	movs	r0, #0
    1d7e:	f006 fabb 	bl	82f8 <SEGGER_RTT_WriteSkipNoLock>
    1d82:	4606      	mov	r6, r0
    1d84:	e7ee      	b.n	1d64 <data_out_block_mode+0x38>
	if (retry_cnt == 0) {
    1d86:	b95c      	cbnz	r4, 1da0 <data_out_block_mode+0x74>
		host_present = false;
    1d88:	702c      	strb	r4, [r5, #0]
    1d8a:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    1d8e:	2000      	movs	r0, #0
    1d90:	f006 fb2e 	bl	83f0 <SEGGER_RTT_HasDataUp>
    1d94:	2800      	cmp	r0, #0
    1d96:	d0ec      	beq.n	1d72 <data_out_block_mode+0x46>
    1d98:	782b      	ldrb	r3, [r5, #0]
    1d9a:	2b00      	cmp	r3, #0
    1d9c:	d1f3      	bne.n	1d86 <data_out_block_mode+0x5a>
    1d9e:	e7e8      	b.n	1d72 <data_out_block_mode+0x46>
			on_failed_write(retry_cnt--);
    1da0:	3c01      	subs	r4, #1
    1da2:	f7ff ffb5 	bl	1d10 <on_failed_write.part.0>
    1da6:	e7f2      	b.n	1d8e <data_out_block_mode+0x62>
		} else if (host_present) {
    1da8:	782b      	ldrb	r3, [r5, #0]
    1daa:	b113      	cbz	r3, 1db2 <data_out_block_mode+0x86>
	if (retry_cnt == 0) {
    1dac:	3c01      	subs	r4, #1
    1dae:	d104      	bne.n	1dba <data_out_block_mode+0x8e>
		host_present = false;
    1db0:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    1db2:	782b      	ldrb	r3, [r5, #0]
    1db4:	2b00      	cmp	r3, #0
    1db6:	d1c2      	bne.n	1d3e <data_out_block_mode+0x12>
    1db8:	e7db      	b.n	1d72 <data_out_block_mode+0x46>
    1dba:	f7ff ffa9 	bl	1d10 <on_failed_write.part.0>
    1dbe:	e7f8      	b.n	1db2 <data_out_block_mode+0x86>
    1dc0:	20001959 	.word	0x20001959
    1dc4:	2000016c 	.word	0x2000016c
    1dc8:	20001958 	.word	0x20001958

00001dcc <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1dcc:	4b0c      	ldr	r3, [pc, #48]	; (1e00 <class_handler+0x34>)
{
    1dce:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1dd0:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1dd2:	4e0c      	ldr	r6, [pc, #48]	; (1e04 <class_handler+0x38>)
    1dd4:	4b0c      	ldr	r3, [pc, #48]	; (1e08 <class_handler+0x3c>)
    1dd6:	42b3      	cmp	r3, r6
    1dd8:	d303      	bcc.n	1de2 <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    1dda:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1dde:	bcf0      	pop	{r4, r5, r6, r7}
    1de0:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    1de2:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1de4:	42bd      	cmp	r5, r7
    1de6:	d309      	bcc.n	1dfc <class_handler+0x30>
		if (iface->class_handler &&
    1de8:	691c      	ldr	r4, [r3, #16]
    1dea:	b13c      	cbz	r4, 1dfc <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    1dec:	f895 c002 	ldrb.w	ip, [r5, #2]
    1df0:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    1df2:	45ac      	cmp	ip, r5
    1df4:	d102      	bne.n	1dfc <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    1df6:	4623      	mov	r3, r4
}
    1df8:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    1dfa:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1dfc:	3324      	adds	r3, #36	; 0x24
    1dfe:	e7ea      	b.n	1dd6 <class_handler+0xa>
    1e00:	20000a40 	.word	0x20000a40
    1e04:	20000248 	.word	0x20000248
    1e08:	20000224 	.word	0x20000224

00001e0c <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    1e0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1e10:	4c13      	ldr	r4, [pc, #76]	; (1e60 <custom_handler+0x54>)
    1e12:	f8df 8050 	ldr.w	r8, [pc, #80]	; 1e64 <custom_handler+0x58>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1e16:	f8df 9050 	ldr.w	r9, [pc, #80]	; 1e68 <custom_handler+0x5c>
{
    1e1a:	4605      	mov	r5, r0
    1e1c:	460e      	mov	r6, r1
    1e1e:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1e20:	4544      	cmp	r4, r8
    1e22:	d303      	bcc.n	1e2c <custom_handler+0x20>
			}
		}
	}

	return -ENOTSUP;
}
    1e24:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1e28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    1e2c:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1e2e:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    1e32:	429a      	cmp	r2, r3
    1e34:	d312      	bcc.n	1e5c <custom_handler+0x50>
		if (iface->custom_handler == NULL) {
    1e36:	69a3      	ldr	r3, [r4, #24]
    1e38:	b183      	cbz	r3, 1e5c <custom_handler+0x50>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    1e3a:	7890      	ldrb	r0, [r2, #2]
    1e3c:	7929      	ldrb	r1, [r5, #4]
    1e3e:	4288      	cmp	r0, r1
    1e40:	d105      	bne.n	1e4e <custom_handler+0x42>
			return iface->custom_handler(pSetup, len, data);
    1e42:	463a      	mov	r2, r7
    1e44:	4631      	mov	r1, r6
    1e46:	4628      	mov	r0, r5
}
    1e48:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    1e4c:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    1e4e:	7952      	ldrb	r2, [r2, #5]
    1e50:	2a01      	cmp	r2, #1
    1e52:	d103      	bne.n	1e5c <custom_handler+0x50>
				(void)iface->custom_handler(pSetup, len, data);
    1e54:	463a      	mov	r2, r7
    1e56:	4631      	mov	r1, r6
    1e58:	4628      	mov	r0, r5
    1e5a:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1e5c:	3424      	adds	r4, #36	; 0x24
    1e5e:	e7df      	b.n	1e20 <custom_handler+0x14>
    1e60:	20000224 	.word	0x20000224
    1e64:	20000248 	.word	0x20000248
    1e68:	20000a40 	.word	0x20000a40

00001e6c <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    1e6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1e70:	4c0b      	ldr	r4, [pc, #44]	; (1ea0 <vendor_handler+0x34>)
    1e72:	f8df 8030 	ldr.w	r8, [pc, #48]	; 1ea4 <vendor_handler+0x38>
{
    1e76:	4605      	mov	r5, r0
    1e78:	460e      	mov	r6, r1
    1e7a:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1e7c:	4544      	cmp	r4, r8
    1e7e:	d302      	bcc.n	1e86 <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    1e80:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1e84:	e009      	b.n	1e9a <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    1e86:	6963      	ldr	r3, [r4, #20]
    1e88:	b90b      	cbnz	r3, 1e8e <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1e8a:	3424      	adds	r4, #36	; 0x24
    1e8c:	e7f6      	b.n	1e7c <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    1e8e:	463a      	mov	r2, r7
    1e90:	4631      	mov	r1, r6
    1e92:	4628      	mov	r0, r5
    1e94:	4798      	blx	r3
    1e96:	2800      	cmp	r0, #0
    1e98:	d1f7      	bne.n	1e8a <vendor_handler+0x1e>
}
    1e9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1e9e:	bf00      	nop
    1ea0:	20000224 	.word	0x20000224
    1ea4:	20000248 	.word	0x20000248

00001ea8 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    1ea8:	4802      	ldr	r0, [pc, #8]	; (1eb4 <usb_reset_alt_setting+0xc>)
    1eaa:	2208      	movs	r2, #8
    1eac:	2100      	movs	r1, #0
    1eae:	f008 bc6d 	b.w	a78c <memset>
    1eb2:	bf00      	nop
    1eb4:	20000afb 	.word	0x20000afb

00001eb8 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    1eb8:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1eba:	4b0b      	ldr	r3, [pc, #44]	; (1ee8 <is_ep_valid.part.0+0x30>)
    1ebc:	4c0b      	ldr	r4, [pc, #44]	; (1eec <is_ep_valid.part.0+0x34>)
    1ebe:	42a3      	cmp	r3, r4
    1ec0:	d301      	bcc.n	1ec6 <is_ep_valid.part.0+0xe>
	return false;
    1ec2:	2000      	movs	r0, #0
}
    1ec4:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    1ec6:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1ec8:	7f1e      	ldrb	r6, [r3, #28]
    1eca:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    1ecc:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    1ece:	b2d5      	uxtb	r5, r2
    1ed0:	42ae      	cmp	r6, r5
    1ed2:	d801      	bhi.n	1ed8 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1ed4:	3324      	adds	r3, #36	; 0x24
    1ed6:	e7f2      	b.n	1ebe <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    1ed8:	3201      	adds	r2, #1
    1eda:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    1ede:	4285      	cmp	r5, r0
    1ee0:	d1f5      	bne.n	1ece <is_ep_valid.part.0+0x16>
				return true;
    1ee2:	2001      	movs	r0, #1
    1ee4:	e7ee      	b.n	1ec4 <is_ep_valid.part.0+0xc>
    1ee6:	bf00      	nop
    1ee8:	20000224 	.word	0x20000224
    1eec:	20000248 	.word	0x20000248

00001ef0 <usb_device_init.part.0>:

/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
    1ef0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
	if (!device_descriptor) {
		LOG_ERR("Failed to configure USB device stack");
    1ef2:	4b08      	ldr	r3, [pc, #32]	; (1f14 <usb_device_init.part.0+0x24>)
    1ef4:	9305      	str	r3, [sp, #20]
    1ef6:	2302      	movs	r3, #2
    1ef8:	9304      	str	r3, [sp, #16]
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    1efa:	4807      	ldr	r0, [pc, #28]	; (1f18 <usb_device_init.part.0+0x28>)
    1efc:	2300      	movs	r3, #0
    1efe:	aa04      	add	r2, sp, #16
    1f00:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    1f04:	f008 fb8a 	bl	a61c <z_impl_z_log_msg2_static_create>
	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
}
    1f08:	f04f 30ff 	mov.w	r0, #4294967295
    1f0c:	b007      	add	sp, #28
    1f0e:	f85d fb04 	ldr.w	pc, [sp], #4
    1f12:	bf00      	nop
    1f14:	0000bdf5 	.word	0x0000bdf5
    1f18:	0000b9ec 	.word	0x0000b9ec

00001f1c <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    1f1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    1f1e:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    1f20:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    1f22:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    1f24:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    1f28:	d007      	beq.n	1f3a <usb_halt_endpoint_req.isra.0+0x1e>
    1f2a:	4620      	mov	r0, r4
    1f2c:	f7ff ffc4 	bl	1eb8 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    1f30:	b188      	cbz	r0, 1f56 <usb_halt_endpoint_req.isra.0+0x3a>
	return (usb_dev.configuration != 0);
    1f32:	4b0f      	ldr	r3, [pc, #60]	; (1f70 <usb_halt_endpoint_req.isra.0+0x54>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    1f34:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    1f38:	b168      	cbz	r0, 1f56 <usb_halt_endpoint_req.isra.0+0x3a>
		if (halt) {
    1f3a:	4e0d      	ldr	r6, [pc, #52]	; (1f70 <usb_halt_endpoint_req.isra.0+0x54>)
			usb_dc_ep_set_stall(ep);
    1f3c:	4620      	mov	r0, r4
		if (halt) {
    1f3e:	b165      	cbz	r5, 1f5a <usb_halt_endpoint_req.isra.0+0x3e>
			usb_dc_ep_set_stall(ep);
    1f40:	f002 f972 	bl	4228 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    1f44:	69f3      	ldr	r3, [r6, #28]
    1f46:	b90b      	cbnz	r3, 1f4c <usb_halt_endpoint_req.isra.0+0x30>
		return true;
    1f48:	2001      	movs	r0, #1
    1f4a:	e004      	b.n	1f56 <usb_halt_endpoint_req.isra.0+0x3a>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    1f4c:	2008      	movs	r0, #8
    1f4e:	f10d 0107 	add.w	r1, sp, #7
    1f52:	4798      	blx	r3
		return true;
    1f54:	4628      	mov	r0, r5
}
    1f56:	b002      	add	sp, #8
    1f58:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    1f5a:	f002 f99d 	bl	4298 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    1f5e:	69f3      	ldr	r3, [r6, #28]
    1f60:	2b00      	cmp	r3, #0
    1f62:	d0f1      	beq.n	1f48 <usb_halt_endpoint_req.isra.0+0x2c>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    1f64:	f10d 0107 	add.w	r1, sp, #7
    1f68:	2009      	movs	r0, #9
    1f6a:	4798      	blx	r3
    1f6c:	e7ec      	b.n	1f48 <usb_halt_endpoint_req.isra.0+0x2c>
    1f6e:	bf00      	nop
    1f70:	20000a40 	.word	0x20000a40

00001f74 <set_endpoint>:
{
    1f74:	b590      	push	{r4, r7, lr}
    1f76:	b083      	sub	sp, #12
    1f78:	af00      	add	r7, sp, #0
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    1f7a:	7883      	ldrb	r3, [r0, #2]
    1f7c:	703b      	strb	r3, [r7, #0]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    1f7e:	7903      	ldrb	r3, [r0, #4]
    1f80:	7942      	ldrb	r2, [r0, #5]
    1f82:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    1f86:	807b      	strh	r3, [r7, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    1f88:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
    1f8a:	4638      	mov	r0, r7
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    1f8c:	f003 0303 	and.w	r3, r3, #3
    1f90:	713b      	strb	r3, [r7, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
    1f92:	f002 f917 	bl	41c4 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    1f96:	f110 0f78 	cmn.w	r0, #120	; 0x78
	ret = usb_dc_ep_configure(&ep_cfg);
    1f9a:	4603      	mov	r3, r0
	if (ret == -EALREADY) {
    1f9c:	7838      	ldrb	r0, [r7, #0]
    1f9e:	d014      	beq.n	1fca <set_endpoint+0x56>
	} else if (ret) {
    1fa0:	b19b      	cbz	r3, 1fca <set_endpoint+0x56>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    1fa2:	4b13      	ldr	r3, [pc, #76]	; (1ff0 <set_endpoint+0x7c>)
    1fa4:	466c      	mov	r4, sp
    1fa6:	b088      	sub	sp, #32
    1fa8:	466a      	mov	r2, sp
    1faa:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    1fae:	2303      	movs	r3, #3
    1fb0:	f842 3f10 	str.w	r3, [r2, #16]!
    1fb4:	480f      	ldr	r0, [pc, #60]	; (1ff4 <set_endpoint+0x80>)
    1fb6:	2300      	movs	r3, #0
    1fb8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    1fbc:	f008 fb2e 	bl	a61c <z_impl_z_log_msg2_static_create>
		return false;
    1fc0:	2000      	movs	r0, #0
    1fc2:	46a5      	mov	sp, r4
}
    1fc4:	370c      	adds	r7, #12
    1fc6:	46bd      	mov	sp, r7
    1fc8:	bd90      	pop	{r4, r7, pc}
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    1fca:	f002 f9a1 	bl	4310 <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    1fce:	f110 0f78 	cmn.w	r0, #120	; 0x78
    1fd2:	d008      	beq.n	1fe6 <set_endpoint+0x72>
	} else if (ret) {
    1fd4:	b138      	cbz	r0, 1fe6 <set_endpoint+0x72>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    1fd6:	783b      	ldrb	r3, [r7, #0]
    1fd8:	4907      	ldr	r1, [pc, #28]	; (1ff8 <set_endpoint+0x84>)
    1fda:	466c      	mov	r4, sp
    1fdc:	b088      	sub	sp, #32
    1fde:	466a      	mov	r2, sp
    1fe0:	e9c2 1305 	strd	r1, r3, [r2, #20]
    1fe4:	e7e3      	b.n	1fae <set_endpoint+0x3a>
	usb_dev.configured = true;
    1fe6:	4b05      	ldr	r3, [pc, #20]	; (1ffc <set_endpoint+0x88>)
    1fe8:	2001      	movs	r0, #1
    1fea:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
    1fee:	e7e9      	b.n	1fc4 <set_endpoint+0x50>
    1ff0:	0000be1a 	.word	0x0000be1a
    1ff4:	0000b9ec 	.word	0x0000b9ec
    1ff8:	0000be3e 	.word	0x0000be3e
    1ffc:	20000a40 	.word	0x20000a40

00002000 <usb_handle_standard_request>:
{
    2000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (usb_dev.custom_req_handler &&
    2004:	4ead      	ldr	r6, [pc, #692]	; (22bc <usb_handle_standard_request+0x2bc>)
{
    2006:	b083      	sub	sp, #12
	if (usb_dev.custom_req_handler &&
    2008:	69b3      	ldr	r3, [r6, #24]
{
    200a:	af00      	add	r7, sp, #0
    200c:	4604      	mov	r4, r0
    200e:	4688      	mov	r8, r1
    2010:	4691      	mov	r9, r2
	if (usb_dev.custom_req_handler &&
    2012:	b963      	cbnz	r3, 202e <usb_handle_standard_request+0x2e>
	switch (setup->RequestType.recipient) {
    2014:	7820      	ldrb	r0, [r4, #0]
    2016:	f000 001f 	and.w	r0, r0, #31
    201a:	2801      	cmp	r0, #1
    201c:	f000 80ac 	beq.w	2178 <usb_handle_standard_request+0x178>
    2020:	2802      	cmp	r0, #2
    2022:	f000 812b 	beq.w	227c <usb_handle_standard_request+0x27c>
    2026:	b138      	cbz	r0, 2038 <usb_handle_standard_request+0x38>
		switch (setup->bRequest) {
    2028:	f06f 0015 	mvn.w	r0, #21
    202c:	e099      	b.n	2162 <usb_handle_standard_request+0x162>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    202e:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    2030:	2800      	cmp	r0, #0
    2032:	d1ef      	bne.n	2014 <usb_handle_standard_request+0x14>
	int rc = 0;
    2034:	2000      	movs	r0, #0
    2036:	e094      	b.n	2162 <usb_handle_standard_request+0x162>
	if (usb_reqtype_is_to_host(setup)) {
    2038:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    203c:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    203e:	2a00      	cmp	r2, #0
    2040:	da32      	bge.n	20a8 <usb_handle_standard_request+0xa8>
		switch (setup->bRequest) {
    2042:	2b06      	cmp	r3, #6
	uint8_t *data = *data_buf;
    2044:	f8d9 2000 	ldr.w	r2, [r9]
		switch (setup->bRequest) {
    2048:	d010      	beq.n	206c <usb_handle_standard_request+0x6c>
    204a:	2b08      	cmp	r3, #8
    204c:	d025      	beq.n	209a <usb_handle_standard_request+0x9a>
    204e:	2b00      	cmp	r3, #0
    2050:	d1ea      	bne.n	2028 <usb_handle_standard_request+0x28>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    2052:	2101      	movs	r1, #1
	data[1] = 0U;
    2054:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    2056:	7011      	strb	r1, [r2, #0]
		data[0] |= (usb_dev.remote_wakeup ?
    2058:	f896 10c3 	ldrb.w	r1, [r6, #195]	; 0xc3
    205c:	2900      	cmp	r1, #0
    205e:	bf18      	it	ne
    2060:	2302      	movne	r3, #2
    2062:	f043 0301 	orr.w	r3, r3, #1
    2066:	7013      	strb	r3, [r2, #0]
		*len = 2;
    2068:	2302      	movs	r3, #2
    206a:	e01a      	b.n	20a2 <usb_handle_standard_request+0xa2>
			return usb_get_descriptor(setup, len, data_buf);
    206c:	8863      	ldrh	r3, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    206e:	0a1a      	lsrs	r2, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    2070:	1f11      	subs	r1, r2, #4
    2072:	2901      	cmp	r1, #1
    2074:	d9d8      	bls.n	2028 <usb_handle_standard_request+0x28>
    2076:	2a07      	cmp	r2, #7
    2078:	d8d6      	bhi.n	2028 <usb_handle_standard_request+0x28>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    207a:	b2d9      	uxtb	r1, r3
	p = (uint8_t *)usb_dev.descriptors;
    207c:	6a73      	ldr	r3, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
    207e:	781c      	ldrb	r4, [r3, #0]
    2080:	2c00      	cmp	r4, #0
    2082:	d0d1      	beq.n	2028 <usb_handle_standard_request+0x28>
		if (p[DESC_bDescriptorType] == type) {
    2084:	785d      	ldrb	r5, [r3, #1]
    2086:	4295      	cmp	r5, r2
    2088:	d103      	bne.n	2092 <usb_handle_standard_request+0x92>
			if (cur_index == index) {
    208a:	4281      	cmp	r1, r0
    208c:	f000 8134 	beq.w	22f8 <usb_handle_standard_request+0x2f8>
			cur_index++;
    2090:	3001      	adds	r0, #1
		p += p[DESC_bLength];
    2092:	4423      	add	r3, r4
    2094:	e7f3      	b.n	207e <usb_handle_standard_request+0x7e>
			*len = p[DESC_bLength];
    2096:	781b      	ldrb	r3, [r3, #0]
    2098:	e134      	b.n	2304 <usb_handle_standard_request+0x304>
			data[0] = usb_dev.configuration;
    209a:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    209e:	7013      	strb	r3, [r2, #0]
			*len = 1;
    20a0:	2301      	movs	r3, #1
		*len = 2;
    20a2:	f8c8 3000 	str.w	r3, [r8]
		return true;
    20a6:	e05c      	b.n	2162 <usb_handle_standard_request+0x162>
		switch (setup->bRequest) {
    20a8:	3b01      	subs	r3, #1
    20aa:	2b08      	cmp	r3, #8
    20ac:	d8bc      	bhi.n	2028 <usb_handle_standard_request+0x28>
    20ae:	a201      	add	r2, pc, #4	; (adr r2, 20b4 <usb_handle_standard_request+0xb4>)
    20b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    20b4:	00002155 	.word	0x00002155
    20b8:	00002029 	.word	0x00002029
    20bc:	0000216b 	.word	0x0000216b
    20c0:	00002029 	.word	0x00002029
    20c4:	000020d9 	.word	0x000020d9
    20c8:	00002029 	.word	0x00002029
    20cc:	00002029 	.word	0x00002029
    20d0:	00002029 	.word	0x00002029
    20d4:	000020e5 	.word	0x000020e5
			return !usb_dc_set_address(setup->wValue);
    20d8:	78a0      	ldrb	r0, [r4, #2]
    20da:	f002 f837 	bl	414c <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    20de:	2800      	cmp	r0, #0
    20e0:	d0a8      	beq.n	2034 <usb_handle_standard_request+0x34>
    20e2:	e7a1      	b.n	2028 <usb_handle_standard_request+0x28>
	if (setup->wValue == 0U) {
    20e4:	8865      	ldrh	r5, [r4, #2]
    20e6:	b155      	cbz	r5, 20fe <usb_handle_standard_request+0xfe>
	uint8_t cur_config = 0xFF;
    20e8:	f04f 09ff 	mov.w	r9, #255	; 0xff
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    20ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
	bool found = false;
    20f0:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    20f2:	46ca      	mov	sl, r9
	while (p[DESC_bLength] != 0U) {
    20f4:	f898 5000 	ldrb.w	r5, [r8]
    20f8:	b96d      	cbnz	r5, 2116 <usb_handle_standard_request+0x116>
	if (found) {
    20fa:	2800      	cmp	r0, #0
    20fc:	d094      	beq.n	2028 <usb_handle_standard_request+0x28>
		usb_reset_alt_setting();
    20fe:	f7ff fed3 	bl	1ea8 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    2102:	8863      	ldrh	r3, [r4, #2]
    2104:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    2108:	69f3      	ldr	r3, [r6, #28]
    210a:	2b00      	cmp	r3, #0
    210c:	d092      	beq.n	2034 <usb_handle_standard_request+0x34>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    210e:	496c      	ldr	r1, [pc, #432]	; (22c0 <usb_handle_standard_request+0x2c0>)
    2110:	2003      	movs	r0, #3
    2112:	4798      	blx	r3
    2114:	e78e      	b.n	2034 <usb_handle_standard_request+0x34>
		switch (p[DESC_bDescriptorType]) {
    2116:	f898 3001 	ldrb.w	r3, [r8, #1]
    211a:	2b04      	cmp	r3, #4
    211c:	d00d      	beq.n	213a <usb_handle_standard_request+0x13a>
    211e:	2b05      	cmp	r3, #5
    2120:	d00e      	beq.n	2140 <usb_handle_standard_request+0x140>
    2122:	2b02      	cmp	r3, #2
    2124:	d105      	bne.n	2132 <usb_handle_standard_request+0x132>
			cur_config = p[CONF_DESC_bConfigurationValue];
    2126:	f898 9005 	ldrb.w	r9, [r8, #5]
			if (cur_config == setup->wValue) {
    212a:	8862      	ldrh	r2, [r4, #2]
				found = true;
    212c:	454a      	cmp	r2, r9
    212e:	bf08      	it	eq
    2130:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    2132:	f898 3000 	ldrb.w	r3, [r8]
    2136:	4498      	add	r8, r3
    2138:	e7dc      	b.n	20f4 <usb_handle_standard_request+0xf4>
			cur_alt_setting =
    213a:	f898 a003 	ldrb.w	sl, [r8, #3]
			break;
    213e:	e7f8      	b.n	2132 <usb_handle_standard_request+0x132>
			if ((cur_config != setup->wValue) ||
    2140:	8863      	ldrh	r3, [r4, #2]
    2142:	454b      	cmp	r3, r9
    2144:	d1f5      	bne.n	2132 <usb_handle_standard_request+0x132>
    2146:	f1ba 0f00 	cmp.w	sl, #0
    214a:	d1f2      	bne.n	2132 <usb_handle_standard_request+0x132>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    214c:	4640      	mov	r0, r8
    214e:	f7ff ff11 	bl	1f74 <set_endpoint>
			break;
    2152:	e7ee      	b.n	2132 <usb_handle_standard_request+0x132>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    2154:	8863      	ldrh	r3, [r4, #2]
    2156:	2b01      	cmp	r3, #1
    2158:	f47f af66 	bne.w	2028 <usb_handle_standard_request+0x28>
					usb_dev.remote_wakeup = false;
    215c:	2000      	movs	r0, #0
    215e:	f886 00c3 	strb.w	r0, [r6, #195]	; 0xc3
}
    2162:	370c      	adds	r7, #12
    2164:	46bd      	mov	sp, r7
    2166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    216a:	8863      	ldrh	r3, [r4, #2]
    216c:	2b01      	cmp	r3, #1
    216e:	f47f af5b 	bne.w	2028 <usb_handle_standard_request+0x28>
					usb_dev.remote_wakeup = true;
    2172:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    2176:	e75d      	b.n	2034 <usb_handle_standard_request+0x34>
	if (!is_device_configured() ||
    2178:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    217c:	2b00      	cmp	r3, #0
    217e:	f43f af53 	beq.w	2028 <usb_handle_standard_request+0x28>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2182:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    2184:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    2188:	7920      	ldrb	r0, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    218a:	462b      	mov	r3, r5
	while (p[DESC_bLength] != 0U) {
    218c:	781a      	ldrb	r2, [r3, #0]
    218e:	2a00      	cmp	r2, #0
    2190:	f43f af4a 	beq.w	2028 <usb_handle_standard_request+0x28>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    2194:	7859      	ldrb	r1, [r3, #1]
    2196:	2902      	cmp	r1, #2
    2198:	d104      	bne.n	21a4 <usb_handle_standard_request+0x1a4>
			if (interface < cfg_descr->bNumInterfaces) {
    219a:	f893 e004 	ldrb.w	lr, [r3, #4]
    219e:	4586      	cmp	lr, r0
    21a0:	f200 80b3 	bhi.w	230a <usb_handle_standard_request+0x30a>
		p += p[DESC_bLength];
    21a4:	4413      	add	r3, r2
    21a6:	e7f1      	b.n	218c <usb_handle_standard_request+0x18c>
			data[0] = 0U;
    21a8:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
    21aa:	7050      	strb	r0, [r2, #1]
			*len = 2;
    21ac:	f8c8 1000 	str.w	r1, [r8]
			return true;
    21b0:	e7d7      	b.n	2162 <usb_handle_standard_request+0x162>
		p += p[DESC_bLength];
    21b2:	440d      	add	r5, r1
    21b4:	e0b7      	b.n	2326 <usb_handle_standard_request+0x326>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    21b6:	280b      	cmp	r0, #11
    21b8:	f47f af36 	bne.w	2028 <usb_handle_standard_request+0x28>
	bool ret = false;
    21bc:	f04f 0b00 	mov.w	fp, #0
	uint8_t cur_iface = 0xFF;
    21c0:	f04f 0aff 	mov.w	sl, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    21c4:	46d0      	mov	r8, sl
	const uint8_t *if_desc = NULL;
    21c6:	46d9      	mov	r9, fp
    21c8:	e006      	b.n	21d8 <usb_handle_standard_request+0x1d8>
		switch (p[DESC_bDescriptorType]) {
    21ca:	786b      	ldrb	r3, [r5, #1]
    21cc:	2b04      	cmp	r3, #4
    21ce:	d010      	beq.n	21f2 <usb_handle_standard_request+0x1f2>
    21d0:	2b05      	cmp	r3, #5
    21d2:	d024      	beq.n	221e <usb_handle_standard_request+0x21e>
		p += p[DESC_bLength];
    21d4:	782b      	ldrb	r3, [r5, #0]
    21d6:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    21d8:	782b      	ldrb	r3, [r5, #0]
    21da:	2b00      	cmp	r3, #0
    21dc:	d1f5      	bne.n	21ca <usb_handle_standard_request+0x1ca>
	if (usb_dev.status_callback) {
    21de:	69f3      	ldr	r3, [r6, #28]
    21e0:	b113      	cbz	r3, 21e8 <usb_handle_standard_request+0x1e8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    21e2:	4649      	mov	r1, r9
    21e4:	2007      	movs	r0, #7
    21e6:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    21e8:	f1bb 0f00 	cmp.w	fp, #0
    21ec:	f47f af22 	bne.w	2034 <usb_handle_standard_request+0x34>
    21f0:	e71a      	b.n	2028 <usb_handle_standard_request+0x28>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    21f2:	f895 a002 	ldrb.w	sl, [r5, #2]
			if (cur_iface == setup->wIndex &&
    21f6:	88a2      	ldrh	r2, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    21f8:	f895 8003 	ldrb.w	r8, [r5, #3]
			if (cur_iface == setup->wIndex &&
    21fc:	4592      	cmp	sl, r2
    21fe:	4653      	mov	r3, sl
    2200:	d1e8      	bne.n	21d4 <usb_handle_standard_request+0x1d4>
			    cur_alt_setting == setup->wValue) {
    2202:	8861      	ldrh	r1, [r4, #2]
			if (cur_iface == setup->wIndex &&
    2204:	4588      	cmp	r8, r1
    2206:	fa1f f288 	uxth.w	r2, r8
    220a:	d1e3      	bne.n	21d4 <usb_handle_standard_request+0x1d4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    220c:	2b07      	cmp	r3, #7
    220e:	d833      	bhi.n	2278 <usb_handle_standard_request+0x278>
		usb_dev.alt_setting[iface] = alt_setting;
    2210:	4433      	add	r3, r6
		return true;
    2212:	46a9      	mov	r9, r5
				ret = usb_set_alt_setting(setup->wIndex,
    2214:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	return true;
    2218:	f04f 0b01 	mov.w	fp, #1
    221c:	e7da      	b.n	21d4 <usb_handle_standard_request+0x1d4>
			if (cur_iface == setup->wIndex) {
    221e:	88a3      	ldrh	r3, [r4, #4]
    2220:	4553      	cmp	r3, sl
    2222:	d1d7      	bne.n	21d4 <usb_handle_standard_request+0x1d4>
	if (cur_alt_setting != alt_setting) {
    2224:	78a3      	ldrb	r3, [r4, #2]
    2226:	4543      	cmp	r3, r8
    2228:	d021      	beq.n	226e <usb_handle_standard_request+0x26e>
		ret = reset_endpoint(ep_desc);
    222a:	78ab      	ldrb	r3, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    222c:	607b      	str	r3, [r7, #4]
    222e:	4618      	mov	r0, r3
    2230:	f000 fa4a 	bl	26c8 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    2234:	687b      	ldr	r3, [r7, #4]
    2236:	4618      	mov	r0, r3
    2238:	f002 f894 	bl	4364 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    223c:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2240:	d0ea      	beq.n	2218 <usb_handle_standard_request+0x218>
	} else if (ret) {
    2242:	687b      	ldr	r3, [r7, #4]
    2244:	2800      	cmp	r0, #0
    2246:	d0e7      	beq.n	2218 <usb_handle_standard_request+0x218>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    2248:	491e      	ldr	r1, [pc, #120]	; (22c4 <usb_handle_standard_request+0x2c4>)
    224a:	46eb      	mov	fp, sp
    224c:	b088      	sub	sp, #32
    224e:	466a      	mov	r2, sp
    2250:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2254:	2303      	movs	r3, #3
    2256:	f842 3f10 	str.w	r3, [r2, #16]!
    225a:	481b      	ldr	r0, [pc, #108]	; (22c8 <usb_handle_standard_request+0x2c8>)
    225c:	2300      	movs	r3, #0
    225e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2262:	f008 f9db 	bl	a61c <z_impl_z_log_msg2_static_create>
    2266:	46dd      	mov	sp, fp
	return false;
    2268:	f04f 0b00 	mov.w	fp, #0
    226c:	e7b2      	b.n	21d4 <usb_handle_standard_request+0x1d4>
		ret = set_endpoint(ep_desc);
    226e:	4628      	mov	r0, r5
    2270:	f7ff fe80 	bl	1f74 <set_endpoint>
    2274:	4683      	mov	fp, r0
    2276:	e7ad      	b.n	21d4 <usb_handle_standard_request+0x1d4>
    2278:	46a9      	mov	r9, r5
    227a:	e7f5      	b.n	2268 <usb_handle_standard_request+0x268>
	if (usb_reqtype_is_to_host(setup)) {
    227c:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    2280:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    2282:	2a00      	cmp	r2, #0
    2284:	da22      	bge.n	22cc <usb_handle_standard_request+0x2cc>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    2286:	2b00      	cmp	r3, #0
    2288:	f47f aece 	bne.w	2028 <usb_handle_standard_request+0x28>
	uint8_t ep = setup->wIndex;
    228c:	7924      	ldrb	r4, [r4, #4]
	if (USB_EP_GET_IDX(ep) == 0) {
    228e:	0663      	lsls	r3, r4, #25
    2290:	d00a      	beq.n	22a8 <usb_handle_standard_request+0x2a8>
    2292:	4620      	mov	r0, r4
    2294:	f7ff fe10 	bl	1eb8 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    2298:	2800      	cmp	r0, #0
    229a:	f43f aec5 	beq.w	2028 <usb_handle_standard_request+0x28>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    229e:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    22a2:	2b00      	cmp	r3, #0
    22a4:	f43f aec0 	beq.w	2028 <usb_handle_standard_request+0x28>
    22a8:	f8d9 5000 	ldr.w	r5, [r9]
		usb_dc_ep_is_stalled(ep, &data[0]);
    22ac:	4620      	mov	r0, r4
    22ae:	4629      	mov	r1, r5
    22b0:	f002 f812 	bl	42d8 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    22b4:	2000      	movs	r0, #0
    22b6:	7068      	strb	r0, [r5, #1]
    22b8:	e6d6      	b.n	2068 <usb_handle_standard_request+0x68>
    22ba:	bf00      	nop
    22bc:	20000a40 	.word	0x20000a40
    22c0:	20000afa 	.word	0x20000afa
    22c4:	0000be5f 	.word	0x0000be5f
    22c8:	0000b9ec 	.word	0x0000b9ec
		switch (setup->bRequest) {
    22cc:	2b01      	cmp	r3, #1
    22ce:	d008      	beq.n	22e2 <usb_handle_standard_request+0x2e2>
    22d0:	2b03      	cmp	r3, #3
    22d2:	f47f aea9 	bne.w	2028 <usb_handle_standard_request+0x28>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    22d6:	8863      	ldrh	r3, [r4, #2]
    22d8:	2b00      	cmp	r3, #0
    22da:	f47f aea5 	bne.w	2028 <usb_handle_standard_request+0x28>
				return usb_halt_endpoint_req(setup, true);
    22de:	2101      	movs	r1, #1
    22e0:	e003      	b.n	22ea <usb_handle_standard_request+0x2ea>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    22e2:	8861      	ldrh	r1, [r4, #2]
    22e4:	2900      	cmp	r1, #0
    22e6:	f47f ae9f 	bne.w	2028 <usb_handle_standard_request+0x28>
				return usb_halt_endpoint_req(setup, true);
    22ea:	88a0      	ldrh	r0, [r4, #4]
    22ec:	f7ff fe16 	bl	1f1c <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    22f0:	2800      	cmp	r0, #0
    22f2:	f47f ae9f 	bne.w	2034 <usb_handle_standard_request+0x34>
    22f6:	e697      	b.n	2028 <usb_handle_standard_request+0x28>
		if (type == USB_DESC_CONFIGURATION) {
    22f8:	2a02      	cmp	r2, #2
		*data = p;
    22fa:	f8c9 3000 	str.w	r3, [r9]
		if (type == USB_DESC_CONFIGURATION) {
    22fe:	f47f aeca 	bne.w	2096 <usb_handle_standard_request+0x96>
			*len = (p[CONF_DESC_wTotalLength]) |
    2302:	885b      	ldrh	r3, [r3, #2]
				*len = 1;
    2304:	f8c8 3000 	str.w	r3, [r8]
    2308:	e694      	b.n	2034 <usb_handle_standard_request+0x34>
	if (usb_reqtype_is_to_host(setup)) {
    230a:	f994 3000 	ldrsb.w	r3, [r4]
		switch (setup->bRequest) {
    230e:	7860      	ldrb	r0, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    2310:	2b00      	cmp	r3, #0
    2312:	f6bf af50 	bge.w	21b6 <usb_handle_standard_request+0x1b6>
    2316:	f8d9 2000 	ldr.w	r2, [r9]
		switch (setup->bRequest) {
    231a:	2800      	cmp	r0, #0
    231c:	f43f af44 	beq.w	21a8 <usb_handle_standard_request+0x1a8>
    2320:	280a      	cmp	r0, #10
    2322:	f47f ae81 	bne.w	2028 <usb_handle_standard_request+0x28>
	while (p[DESC_bLength] != 0U) {
    2326:	7829      	ldrb	r1, [r5, #0]
    2328:	2900      	cmp	r1, #0
    232a:	f43f ae7d 	beq.w	2028 <usb_handle_standard_request+0x28>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    232e:	786b      	ldrb	r3, [r5, #1]
    2330:	2b04      	cmp	r3, #4
    2332:	f47f af3e 	bne.w	21b2 <usb_handle_standard_request+0x1b2>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    2336:	78ab      	ldrb	r3, [r5, #2]
			if (cur_iface == setup->wIndex) {
    2338:	459c      	cmp	ip, r3
    233a:	f47f af3a 	bne.w	21b2 <usb_handle_standard_request+0x1b2>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    233e:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    2340:	bf96      	itet	ls
    2342:	199b      	addls	r3, r3, r6
	return 0;
    2344:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    2346:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    234a:	7013      	strb	r3, [r2, #0]
				*len = 1;
    234c:	2301      	movs	r3, #1
    234e:	e7d9      	b.n	2304 <usb_handle_standard_request+0x304>

00002350 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    2350:	4b05      	ldr	r3, [pc, #20]	; (2368 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    2352:	4a06      	ldr	r2, [pc, #24]	; (236c <usb_set_config+0x1c>)
    2354:	629a      	str	r2, [r3, #40]	; 0x28
    2356:	4a06      	ldr	r2, [pc, #24]	; (2370 <usb_set_config+0x20>)
    2358:	62da      	str	r2, [r3, #44]	; 0x2c
    235a:	4a06      	ldr	r2, [pc, #24]	; (2374 <usb_set_config+0x24>)
    235c:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    235e:	4a06      	ldr	r2, [pc, #24]	; (2378 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    2360:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    2362:	619a      	str	r2, [r3, #24]
}
    2364:	2000      	movs	r0, #0
    2366:	4770      	bx	lr
    2368:	20000a40 	.word	0x20000a40
    236c:	00002001 	.word	0x00002001
    2370:	00001dcd 	.word	0x00001dcd
    2374:	00001e6d 	.word	0x00001e6d
    2378:	00001e0d 	.word	0x00001e0d

0000237c <usb_device_init>:
	if (usb_dev.enabled == true) {
    237c:	4b09      	ldr	r3, [pc, #36]	; (23a4 <usb_device_init+0x28>)
{
    237e:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
    2380:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    2384:	b954      	cbnz	r4, 239c <usb_device_init+0x20>
	device_descriptor = usb_get_device_descriptor();
    2386:	f000 f96d 	bl	2664 <usb_get_device_descriptor>
	if (!device_descriptor) {
    238a:	b918      	cbnz	r0, 2394 <usb_device_init+0x18>
}
    238c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2390:	f7ff bdae 	b.w	1ef0 <usb_device_init.part.0>
	usb_set_config(device_descriptor);
    2394:	f7ff ffdc 	bl	2350 <usb_set_config>
	return 0;
    2398:	4620      	mov	r0, r4
}
    239a:	bd10      	pop	{r4, pc}
		return -EALREADY;
    239c:	f06f 0077 	mvn.w	r0, #119	; 0x77
    23a0:	e7fb      	b.n	239a <usb_device_init+0x1e>
    23a2:	bf00      	nop
    23a4:	20000a40 	.word	0x20000a40

000023a8 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    23a8:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    23aa:	4b1f      	ldr	r3, [pc, #124]	; (2428 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x24>)
{
    23ac:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    23ae:	aa05      	add	r2, sp, #20
    23b0:	f103 0510 	add.w	r5, r3, #16
    23b4:	6818      	ldr	r0, [r3, #0]
    23b6:	6859      	ldr	r1, [r3, #4]
    23b8:	4614      	mov	r4, r2
    23ba:	c403      	stmia	r4!, {r0, r1}
    23bc:	3308      	adds	r3, #8
    23be:	42ab      	cmp	r3, r5
    23c0:	4622      	mov	r2, r4
    23c2:	d1f7      	bne.n	23b4 <usb_update_sn_string_descriptor+0xc>
    23c4:	781b      	ldrb	r3, [r3, #0]
    23c6:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    23c8:	2210      	movs	r2, #16
    23ca:	2100      	movs	r1, #0
    23cc:	a801      	add	r0, sp, #4
    23ce:	f008 f9dd 	bl	a78c <memset>
	memset(sn, 0, sizeof(sn));
    23d2:	2212      	movs	r2, #18
    23d4:	2100      	movs	r1, #0
    23d6:	4815      	ldr	r0, [pc, #84]	; (242c <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x28>)
    23d8:	f008 f9d8 	bl	a78c <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    23dc:	2110      	movs	r1, #16
    23de:	a801      	add	r0, sp, #4
    23e0:	f008 fb8c 	bl	aafc <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    23e4:	2800      	cmp	r0, #0
    23e6:	dd1b      	ble.n	2420 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x1c>
		skip = MAX(0, hwlen - usblen);
    23e8:	2808      	cmp	r0, #8
    23ea:	bfb8      	it	lt
    23ec:	2008      	movlt	r0, #8
    23ee:	3808      	subs	r0, #8
    23f0:	ab01      	add	r3, sp, #4
    23f2:	4a0e      	ldr	r2, [pc, #56]	; (242c <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x28>)
    23f4:	4418      	add	r0, r3
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    23f6:	2100      	movs	r1, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    23f8:	f810 3b01 	ldrb.w	r3, [r0], #1
    23fc:	ac0a      	add	r4, sp, #40	; 0x28
    23fe:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2402:	f003 030f 	and.w	r3, r3, #15
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    2406:	f814 4c14 	ldrb.w	r4, [r4, #-20]
    240a:	7014      	strb	r4, [r2, #0]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    240c:	ac0a      	add	r4, sp, #40	; 0x28
    240e:	4423      	add	r3, r4
		for (int i = 0; i < usblen; i++) {
    2410:	3101      	adds	r1, #1
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    2412:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    2416:	7053      	strb	r3, [r2, #1]
		for (int i = 0; i < usblen; i++) {
    2418:	2908      	cmp	r1, #8
    241a:	f102 0202 	add.w	r2, r2, #2
    241e:	d1eb      	bne.n	23f8 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    2420:	4802      	ldr	r0, [pc, #8]	; (242c <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x28>)
    2422:	b00b      	add	sp, #44	; 0x2c
    2424:	bd30      	pop	{r4, r5, pc}
    2426:	bf00      	nop
    2428:	0000be8c 	.word	0x0000be8c
    242c:	2000195a 	.word	0x2000195a

00002430 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    2430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2434:	b08b      	sub	sp, #44	; 0x2c
    2436:	4604      	mov	r4, r0
    2438:	af00      	add	r7, sp, #0
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
    243a:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    243c:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    2440:	46b2      	mov	sl, r6
	struct usb_cfg_data *cfg_data = NULL;
    2442:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    2444:	46b0      	mov	r8, r6

	while (head->bLength != 0U) {
    2446:	7820      	ldrb	r0, [r4, #0]
    2448:	b938      	cbnz	r0, 245a <usb_fix_descriptor+0x2a>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
    244a:	4b7c      	ldr	r3, [pc, #496]	; (263c <usb_fix_descriptor+0x20c>)
    244c:	3402      	adds	r4, #2
    244e:	429c      	cmp	r4, r3
    2450:	d1f3      	bne.n	243a <usb_fix_descriptor+0xa>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
}
    2452:	372c      	adds	r7, #44	; 0x2c
    2454:	46bd      	mov	sp, r7
    2456:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (head->bDescriptorType) {
    245a:	7863      	ldrb	r3, [r4, #1]
    245c:	2b05      	cmp	r3, #5
    245e:	d805      	bhi.n	246c <usb_fix_descriptor+0x3c>
    2460:	e8df f003 	tbb	[pc, r3]
    2464:	97030497 	.word	0x97030497
    2468:	2c07      	.short	0x2c07
    246a:	46a0      	mov	r8, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    246c:	7823      	ldrb	r3, [r4, #0]
    246e:	441c      	add	r4, r3
    2470:	e7e9      	b.n	2446 <usb_fix_descriptor+0x16>
			if (if_descr->bAlternateSetting) {
    2472:	78e3      	ldrb	r3, [r4, #3]
    2474:	2b00      	cmp	r3, #0
    2476:	d1f9      	bne.n	246c <usb_fix_descriptor+0x3c>
			if (if_descr->bInterfaceNumber == 0U) {
    2478:	78a3      	ldrb	r3, [r4, #2]
    247a:	b1e3      	cbz	r3, 24b6 <usb_fix_descriptor+0x86>
			numof_ifaces++;
    247c:	f10a 0a01 	add.w	sl, sl, #1
    2480:	fa5f fa8a 	uxtb.w	sl, sl
			break;
    2484:	e7f2      	b.n	246c <usb_fix_descriptor+0x3c>
		if (cfg_data->interface_descriptor == iface) {
    2486:	686a      	ldr	r2, [r5, #4]
    2488:	4294      	cmp	r4, r2
    248a:	f000 80ce 	beq.w	262a <usb_fix_descriptor+0x1fa>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    248e:	3524      	adds	r5, #36	; 0x24
    2490:	429d      	cmp	r5, r3
    2492:	d3f8      	bcc.n	2486 <usb_fix_descriptor+0x56>
					LOG_ERR("There is no usb_cfg_data "
    2494:	4b6a      	ldr	r3, [pc, #424]	; (2640 <usb_fix_descriptor+0x210>)
    2496:	466d      	mov	r5, sp
    2498:	b088      	sub	sp, #32
    249a:	466a      	mov	r2, sp
    249c:	e9c2 3405 	strd	r3, r4, [r2, #20]
    24a0:	2303      	movs	r3, #3
    24a2:	f842 3f10 	str.w	r3, [r2, #16]!
    24a6:	4867      	ldr	r0, [pc, #412]	; (2644 <usb_fix_descriptor+0x214>)
    24a8:	2300      	movs	r3, #0
    24aa:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    24ae:	f008 f8b5 	bl	a61c <z_impl_z_log_msg2_static_create>
    24b2:	46ad      	mov	sp, r5
    24b4:	e010      	b.n	24d8 <usb_fix_descriptor+0xa8>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    24b6:	4d64      	ldr	r5, [pc, #400]	; (2648 <usb_fix_descriptor+0x218>)
    24b8:	4b64      	ldr	r3, [pc, #400]	; (264c <usb_fix_descriptor+0x21c>)
    24ba:	e7e9      	b.n	2490 <usb_fix_descriptor+0x60>
			if (!cfg_data) {
    24bc:	2d00      	cmp	r5, #0
    24be:	d166      	bne.n	258e <usb_fix_descriptor+0x15e>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    24c0:	4b63      	ldr	r3, [pc, #396]	; (2650 <usb_fix_descriptor+0x220>)
				LOG_ERR("Failed to validate endpoints");
    24c2:	627b      	str	r3, [r7, #36]	; 0x24
    24c4:	2302      	movs	r3, #2
    24c6:	623b      	str	r3, [r7, #32]
    24c8:	2300      	movs	r3, #0
    24ca:	485e      	ldr	r0, [pc, #376]	; (2644 <usb_fix_descriptor+0x214>)
    24cc:	f107 0220 	add.w	r2, r7, #32
    24d0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    24d4:	f008 f8a2 	bl	a61c <z_impl_z_log_msg2_static_create>
					return -1;
    24d8:	f04f 30ff 	mov.w	r0, #4294967295
    24dc:	e7b9      	b.n	2452 <usb_fix_descriptor+0x22>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    24de:	6a29      	ldr	r1, [r5, #32]
    24e0:	78a0      	ldrb	r0, [r4, #2]
    24e2:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    24e6:	790b      	ldrb	r3, [r1, #4]
    24e8:	4298      	cmp	r0, r3
    24ea:	d005      	beq.n	24f8 <usb_fix_descriptor+0xc8>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    24ec:	3201      	adds	r2, #1
    24ee:	7f2b      	ldrb	r3, [r5, #28]
    24f0:	429a      	cmp	r2, r3
    24f2:	d3f4      	bcc.n	24de <usb_fix_descriptor+0xae>
				LOG_ERR("Failed to validate endpoints");
    24f4:	4b57      	ldr	r3, [pc, #348]	; (2654 <usb_fix_descriptor+0x224>)
    24f6:	e7e4      	b.n	24c2 <usb_fix_descriptor+0x92>
    24f8:	f04f 0901 	mov.w	r9, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    24fc:	78e0      	ldrb	r0, [r4, #3]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    24fe:	f894 c005 	ldrb.w	ip, [r4, #5]
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    2502:	f000 0003 	and.w	r0, r0, #3
    2506:	7538      	strb	r0, [r7, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    2508:	7920      	ldrb	r0, [r4, #4]
    250a:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    250e:	8278      	strh	r0, [r7, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    2510:	f994 0002 	ldrsb.w	r0, [r4, #2]
    2514:	2800      	cmp	r0, #0
    2516:	fa5f f389 	uxtb.w	r3, r9
    251a:	da2a      	bge.n	2572 <usb_fix_descriptor+0x142>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    251c:	f109 0010 	add.w	r0, r9, #16
    2520:	f04f 0c01 	mov.w	ip, #1
    2524:	fa0c f000 	lsl.w	r0, ip, r0
    2528:	ea10 0f0b 	tst.w	r0, fp
    252c:	d129      	bne.n	2582 <usb_fix_descriptor+0x152>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    252e:	f063 007f 	orn	r0, r3, #127	; 0x7f
    2532:	7438      	strb	r0, [r7, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    2534:	f107 0010 	add.w	r0, r7, #16
    2538:	e9c7 3101 	strd	r3, r1, [r7, #4]
    253c:	60fa      	str	r2, [r7, #12]
    253e:	f001 fe17 	bl	4170 <usb_dc_ep_check_cap>
    2542:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    2546:	687b      	ldr	r3, [r7, #4]
    2548:	b9d8      	cbnz	r0, 2582 <usb_fix_descriptor+0x152>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    254a:	7c3a      	ldrb	r2, [r7, #16]
    254c:	70a2      	strb	r2, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    254e:	f012 0f80 	tst.w	r2, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    2552:	bf1c      	itt	ne
    2554:	3310      	addne	r3, #16
    2556:	b2db      	uxtbne	r3, r3
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    2558:	710a      	strb	r2, [r1, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    255a:	f04f 0201 	mov.w	r2, #1
					*requested_ep |= (1U << (idx + 16U));
    255e:	bf15      	itete	ne
    2560:	fa02 f303 	lslne.w	r3, r2, r3
					*requested_ep |= (1U << idx);
    2564:	fa02 f209 	lsleq.w	r2, r2, r9
					*requested_ep |= (1U << (idx + 16U));
    2568:	ea4b 0b03 	orrne.w	fp, fp, r3
					*requested_ep |= (1U << idx);
    256c:	ea4b 0b02 	orreq.w	fp, fp, r2
				return 0;
    2570:	e77c      	b.n	246c <usb_fix_descriptor+0x3c>
				if ((*requested_ep & (1U << (idx)))) {
    2572:	2001      	movs	r0, #1
    2574:	fa00 f009 	lsl.w	r0, r0, r9
    2578:	ea10 0f0b 	tst.w	r0, fp
    257c:	d101      	bne.n	2582 <usb_fix_descriptor+0x152>
				ep_cfg.ep_addr = idx;
    257e:	743b      	strb	r3, [r7, #16]
    2580:	e7d8      	b.n	2534 <usb_fix_descriptor+0x104>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    2582:	f109 0901 	add.w	r9, r9, #1
    2586:	f1b9 0f10 	cmp.w	r9, #16
    258a:	d1b7      	bne.n	24fc <usb_fix_descriptor+0xcc>
    258c:	e7ae      	b.n	24ec <usb_fix_descriptor+0xbc>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    258e:	2200      	movs	r2, #0
    2590:	e7ad      	b.n	24ee <usb_fix_descriptor+0xbe>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    2592:	2e03      	cmp	r6, #3
    2594:	d12a      	bne.n	25ec <usb_fix_descriptor+0x1bc>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    2596:	f7ff ff07 	bl	23a8 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    259a:	4681      	mov	r9, r0
    259c:	b1a8      	cbz	r0, 25ca <usb_fix_descriptor+0x19a>
	runtime_sn_len = strlen(runtime_sn);
    259e:	f008 f8ce 	bl	a73e <strlen>
	if (!runtime_sn_len) {
    25a2:	60f8      	str	r0, [r7, #12]
    25a4:	b188      	cbz	r0, 25ca <usb_fix_descriptor+0x19a>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    25a6:	482c      	ldr	r0, [pc, #176]	; (2658 <usb_fix_descriptor+0x228>)
    25a8:	f008 f8c9 	bl	a73e <strlen>
	if (runtime_sn_len != default_sn_len) {
    25ac:	68fa      	ldr	r2, [r7, #12]
    25ae:	4282      	cmp	r2, r0
    25b0:	d017      	beq.n	25e2 <usb_fix_descriptor+0x1b2>
		LOG_ERR("the new SN descriptor doesn't have the same "
    25b2:	4b2a      	ldr	r3, [pc, #168]	; (265c <usb_fix_descriptor+0x22c>)
    25b4:	627b      	str	r3, [r7, #36]	; 0x24
    25b6:	2302      	movs	r3, #2
    25b8:	623b      	str	r3, [r7, #32]
    25ba:	4822      	ldr	r0, [pc, #136]	; (2644 <usb_fix_descriptor+0x214>)
    25bc:	2300      	movs	r3, #0
    25be:	f107 0220 	add.w	r2, r7, #32
    25c2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    25c6:	f008 f829 	bl	a61c <z_impl_z_log_msg2_static_create>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    25ca:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    25cc:	f06f 0102 	mvn.w	r1, #2
    25d0:	18e2      	adds	r2, r4, r3
    25d2:	1b09      	subs	r1, r1, r4
    25d4:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    25d8:	42d1      	cmn	r1, r2
    25da:	d512      	bpl.n	2602 <usb_fix_descriptor+0x1d2>
			str_descr_idx += 1U;
    25dc:	3601      	adds	r6, #1
    25de:	b2f6      	uxtb	r6, r6
			break;
    25e0:	e744      	b.n	246c <usb_fix_descriptor+0x3c>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    25e2:	4649      	mov	r1, r9
    25e4:	1ca0      	adds	r0, r4, #2
    25e6:	f008 f8c6 	bl	a776 <memcpy>
    25ea:	e7ee      	b.n	25ca <usb_fix_descriptor+0x19a>
			if (str_descr_idx) {
    25ec:	2e00      	cmp	r6, #0
    25ee:	d1ec      	bne.n	25ca <usb_fix_descriptor+0x19a>
				if (!cfg_descr) {
    25f0:	f1b8 0f00 	cmp.w	r8, #0
    25f4:	d10e      	bne.n	2614 <usb_fix_descriptor+0x1e4>
					LOG_ERR("Incomplete device descriptor");
    25f6:	4b1a      	ldr	r3, [pc, #104]	; (2660 <usb_fix_descriptor+0x230>)
    25f8:	627b      	str	r3, [r7, #36]	; 0x24
    25fa:	2302      	movs	r3, #2
    25fc:	623b      	str	r3, [r7, #32]
    25fe:	4643      	mov	r3, r8
    2600:	e763      	b.n	24ca <usb_fix_descriptor+0x9a>
		buf[i] = 0U;
    2602:	f04f 0000 	mov.w	r0, #0
    2606:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    260a:	f813 0901 	ldrb.w	r0, [r3], #-1
    260e:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    2612:	e7e1      	b.n	25d8 <usb_fix_descriptor+0x1a8>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    2614:	eba4 0308 	sub.w	r3, r4, r8
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    2618:	f888 3002 	strb.w	r3, [r8, #2]
	dst[1] = val >> 8;
    261c:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2620:	f888 3003 	strb.w	r3, [r8, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    2624:	f888 a004 	strb.w	sl, [r8, #4]
    2628:	e7d8      	b.n	25dc <usb_fix_descriptor+0x1ac>
				if (cfg_data->interface_config) {
    262a:	68ab      	ldr	r3, [r5, #8]
    262c:	2b00      	cmp	r3, #0
    262e:	f43f af25 	beq.w	247c <usb_fix_descriptor+0x4c>
					cfg_data->interface_config(head,
    2632:	4651      	mov	r1, sl
    2634:	4620      	mov	r0, r4
    2636:	4798      	blx	r3
    2638:	e720      	b.n	247c <usb_fix_descriptor+0x4c>
    263a:	bf00      	nop
    263c:	20000222 	.word	0x20000222
    2640:	0000bf63 	.word	0x0000bf63
    2644:	0000b9e4 	.word	0x0000b9e4
    2648:	20000224 	.word	0x20000224
    264c:	20000248 	.word	0x20000248
    2650:	0000be9d 	.word	0x0000be9d
    2654:	0000bede 	.word	0x0000bede
    2658:	0000be8c 	.word	0x0000be8c
    265c:	0000befb 	.word	0x0000befb
    2660:	0000bf46 	.word	0x0000bf46

00002664 <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    2664:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    2666:	480a      	ldr	r0, [pc, #40]	; (2690 <usb_get_device_descriptor+0x2c>)
    2668:	f7ff fee2 	bl	2430 <usb_fix_descriptor>
    266c:	b170      	cbz	r0, 268c <usb_get_device_descriptor+0x28>
		LOG_ERR("Failed to fixup USB descriptor");
    266e:	4b09      	ldr	r3, [pc, #36]	; (2694 <usb_get_device_descriptor+0x30>)
    2670:	9305      	str	r3, [sp, #20]
    2672:	2302      	movs	r3, #2
    2674:	9304      	str	r3, [sp, #16]
    2676:	4808      	ldr	r0, [pc, #32]	; (2698 <usb_get_device_descriptor+0x34>)
    2678:	2300      	movs	r3, #0
    267a:	aa04      	add	r2, sp, #16
    267c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2680:	f007 ffcc 	bl	a61c <z_impl_z_log_msg2_static_create>
		return NULL;
    2684:	2000      	movs	r0, #0
	}

	return (uint8_t *) __usb_descriptor_start;
}
    2686:	b007      	add	sp, #28
    2688:	f85d fb04 	ldr.w	pc, [sp], #4
	return (uint8_t *) __usb_descriptor_start;
    268c:	4800      	ldr	r0, [pc, #0]	; (2690 <usb_get_device_descriptor+0x2c>)
    268e:	e7fa      	b.n	2686 <usb_get_device_descriptor+0x22>
    2690:	200001a0 	.word	0x200001a0
    2694:	0000bf83 	.word	0x0000bf83
    2698:	0000b9e4 	.word	0x0000b9e4

0000269c <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    269c:	b510      	push	{r4, lr}
    269e:	4b09      	ldr	r3, [pc, #36]	; (26c4 <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    26a0:	2100      	movs	r1, #0
    26a2:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    26a4:	781c      	ldrb	r4, [r3, #0]
    26a6:	4284      	cmp	r4, r0
    26a8:	d104      	bne.n	26b4 <usb_ep_get_transfer+0x18>
    26aa:	685c      	ldr	r4, [r3, #4]
    26ac:	b114      	cbz	r4, 26b4 <usb_ep_get_transfer+0x18>
			return &ut_data[i];
    26ae:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
    26b2:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    26b4:	3101      	adds	r1, #1
    26b6:	2904      	cmp	r1, #4
    26b8:	f103 0340 	add.w	r3, r3, #64	; 0x40
    26bc:	d1f2      	bne.n	26a4 <usb_ep_get_transfer+0x8>
	return NULL;
    26be:	2000      	movs	r0, #0
    26c0:	e7f7      	b.n	26b2 <usb_ep_get_transfer+0x16>
    26c2:	bf00      	nop
    26c4:	20000b04 	.word	0x20000b04

000026c8 <usb_cancel_transfer>:
	irq_unlock(key);
	return ret;
}

void usb_cancel_transfer(uint8_t ep)
{
    26c8:	b510      	push	{r4, lr}
	__asm__ volatile(
    26ca:	f04f 0320 	mov.w	r3, #32
    26ce:	f3ef 8411 	mrs	r4, BASEPRI
    26d2:	f383 8812 	msr	BASEPRI_MAX, r3
    26d6:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    26da:	f7ff ffdf 	bl	269c <usb_ep_get_transfer>
	if (!trans) {
    26de:	b150      	cbz	r0, 26f6 <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    26e0:	6843      	ldr	r3, [r0, #4]
    26e2:	3310      	adds	r3, #16
    26e4:	d107      	bne.n	26f6 <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    26e6:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    26ea:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    26ec:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    26f0:	4803      	ldr	r0, [pc, #12]	; (2700 <usb_cancel_transfer+0x38>)
    26f2:	f008 fdc8 	bl	b286 <k_work_submit_to_queue>
	__asm__ volatile(
    26f6:	f384 8811 	msr	BASEPRI, r4
    26fa:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    26fe:	bd10      	pop	{r4, pc}
    2700:	20000930 	.word	0x20000930

00002704 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2708:	4605      	mov	r5, r0
	__asm__ volatile(
    270a:	f04f 0320 	mov.w	r3, #32
    270e:	f3ef 8611 	mrs	r6, BASEPRI
    2712:	f383 8812 	msr	BASEPRI_MAX, r3
    2716:	f3bf 8f6f 	isb	sy
	return list->head;
    271a:	4b0e      	ldr	r3, [pc, #56]	; (2754 <pm_state_notify+0x50>)
    271c:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    271e:	b19c      	cbz	r4, 2748 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2720:	4f0d      	ldr	r7, [pc, #52]	; (2758 <pm_state_notify+0x54>)
    2722:	f8df 8038 	ldr.w	r8, [pc, #56]	; 275c <pm_state_notify+0x58>
    2726:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    272a:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    272e:	2d00      	cmp	r5, #0
    2730:	bf08      	it	eq
    2732:	4613      	moveq	r3, r2
		if (callback) {
    2734:	b12b      	cbz	r3, 2742 <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2736:	f898 2014 	ldrb.w	r2, [r8, #20]
    273a:	fb09 f202 	mul.w	r2, r9, r2
    273e:	5cb8      	ldrb	r0, [r7, r2]
    2740:	4798      	blx	r3
	return node->next;
    2742:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2744:	2c00      	cmp	r4, #0
    2746:	d1f0      	bne.n	272a <pm_state_notify+0x26>
	__asm__ volatile(
    2748:	f386 8811 	msr	BASEPRI, r6
    274c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2750:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2754:	20000c04 	.word	0x20000c04
    2758:	20000c0c 	.word	0x20000c0c
    275c:	20001904 	.word	0x20001904

00002760 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2760:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    2762:	2301      	movs	r3, #1
    2764:	f000 001f 	and.w	r0, r0, #31
    2768:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    276c:	4b07      	ldr	r3, [pc, #28]	; (278c <atomic_clear_bit.constprop.0+0x2c>)
    276e:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2772:	43c0      	mvns	r0, r0
    2774:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2778:	e853 2f00 	ldrex	r2, [r3]
    277c:	4002      	ands	r2, r0
    277e:	e843 2100 	strex	r1, r2, [r3]
    2782:	2900      	cmp	r1, #0
    2784:	d1f8      	bne.n	2778 <atomic_clear_bit.constprop.0+0x18>
    2786:	f3bf 8f5b 	dmb	ish
}
    278a:	4770      	bx	lr
    278c:	20000c18 	.word	0x20000c18

00002790 <pm_system_resume>:

void pm_system_resume(void)
{
    2790:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    2792:	4b1a      	ldr	r3, [pc, #104]	; (27fc <pm_system_resume+0x6c>)
    2794:	7d1c      	ldrb	r4, [r3, #20]
    2796:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    279a:	f004 031f 	and.w	r3, r4, #31
    279e:	2201      	movs	r2, #1
    27a0:	409a      	lsls	r2, r3
    27a2:	4b17      	ldr	r3, [pc, #92]	; (2800 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    27a4:	0961      	lsrs	r1, r4, #5
    27a6:	43d0      	mvns	r0, r2
    27a8:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    27ac:	e853 1f00 	ldrex	r1, [r3]
    27b0:	ea01 0500 	and.w	r5, r1, r0
    27b4:	e843 5c00 	strex	ip, r5, [r3]
    27b8:	f1bc 0f00 	cmp.w	ip, #0
    27bc:	d1f6      	bne.n	27ac <pm_system_resume+0x1c>
    27be:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    27c2:	4211      	tst	r1, r2
    27c4:	d013      	beq.n	27ee <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    27c6:	4b0f      	ldr	r3, [pc, #60]	; (2804 <pm_system_resume+0x74>)
    27c8:	4d0f      	ldr	r5, [pc, #60]	; (2808 <pm_system_resume+0x78>)
    27ca:	b18b      	cbz	r3, 27f0 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    27cc:	230c      	movs	r3, #12
    27ce:	4363      	muls	r3, r4
    27d0:	18ea      	adds	r2, r5, r3
    27d2:	5ce8      	ldrb	r0, [r5, r3]
    27d4:	7851      	ldrb	r1, [r2, #1]
    27d6:	f007 ffff 	bl	a7d8 <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    27da:	2000      	movs	r0, #0
    27dc:	f7ff ff92 	bl	2704 <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    27e0:	230c      	movs	r3, #12
    27e2:	435c      	muls	r4, r3
    27e4:	192a      	adds	r2, r5, r4
    27e6:	2300      	movs	r3, #0
    27e8:	512b      	str	r3, [r5, r4]
    27ea:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    27ee:	bd38      	pop	{r3, r4, r5, pc}
    27f0:	f383 8811 	msr	BASEPRI, r3
    27f4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    27f8:	e7ef      	b.n	27da <pm_system_resume+0x4a>
    27fa:	bf00      	nop
    27fc:	20001904 	.word	0x20001904
    2800:	20000c1c 	.word	0x20000c1c
    2804:	0000a7d9 	.word	0x0000a7d9
    2808:	20000c0c 	.word	0x20000c0c

0000280c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    280c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2810:	4b32      	ldr	r3, [pc, #200]	; (28dc <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2812:	4a33      	ldr	r2, [pc, #204]	; (28e0 <pm_system_suspend+0xd4>)
    2814:	7d1c      	ldrb	r4, [r3, #20]
    2816:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    281a:	0963      	lsrs	r3, r4, #5
    281c:	ea4f 0983 	mov.w	r9, r3, lsl #2
    2820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2824:	4e2f      	ldr	r6, [pc, #188]	; (28e4 <pm_system_suspend+0xd8>)
    2826:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    282a:	f004 081f 	and.w	r8, r4, #31
    282e:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    2832:	f013 0f01 	tst.w	r3, #1
{
    2836:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    2838:	d10a      	bne.n	2850 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    283a:	4601      	mov	r1, r0
    283c:	4620      	mov	r0, r4
    283e:	f000 f869 	bl	2914 <pm_policy_next_state>
		if (info != NULL) {
    2842:	b128      	cbz	r0, 2850 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    2844:	c807      	ldmia	r0, {r0, r1, r2}
    2846:	230c      	movs	r3, #12
    2848:	fb03 6304 	mla	r3, r3, r4, r6
    284c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    2850:	230c      	movs	r3, #12
    2852:	4363      	muls	r3, r4
    2854:	18f2      	adds	r2, r6, r3
    2856:	5cf5      	ldrb	r5, [r6, r3]
    2858:	b92d      	cbnz	r5, 2866 <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    285a:	4620      	mov	r0, r4
    285c:	f7ff ff80 	bl	2760 <atomic_clear_bit.constprop.0>
		ret = false;
    2860:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    2862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    2866:	1c7b      	adds	r3, r7, #1
    2868:	d00f      	beq.n	288a <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    286a:	f8d2 c008 	ldr.w	ip, [r2, #8]
    286e:	481e      	ldr	r0, [pc, #120]	; (28e8 <pm_system_suspend+0xdc>)
    2870:	4a1e      	ldr	r2, [pc, #120]	; (28ec <pm_system_suspend+0xe0>)
    2872:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    2876:	2100      	movs	r1, #0
    2878:	2300      	movs	r3, #0
    287a:	fbec 0105 	umlal	r0, r1, ip, r5
    287e:	f7fd fc2f 	bl	e0 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    2882:	2101      	movs	r1, #1
    2884:	1a38      	subs	r0, r7, r0
    2886:	f008 fe5a 	bl	b53e <z_set_timeout_expiry>
	k_sched_lock();
    288a:	f006 fb6d 	bl	8f68 <k_sched_lock>
	pm_state_notify(true);
    288e:	2001      	movs	r0, #1
    2890:	f7ff ff38 	bl	2704 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2894:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2898:	2301      	movs	r3, #1
    289a:	fa03 f808 	lsl.w	r8, r3, r8
    289e:	4b14      	ldr	r3, [pc, #80]	; (28f0 <pm_system_suspend+0xe4>)
    28a0:	4499      	add	r9, r3
    28a2:	e859 3f00 	ldrex	r3, [r9]
    28a6:	ea43 0308 	orr.w	r3, r3, r8
    28aa:	e849 3200 	strex	r2, r3, [r9]
    28ae:	2a00      	cmp	r2, #0
    28b0:	d1f7      	bne.n	28a2 <pm_system_suspend+0x96>
    28b2:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    28b6:	4b0f      	ldr	r3, [pc, #60]	; (28f4 <pm_system_suspend+0xe8>)
    28b8:	b133      	cbz	r3, 28c8 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    28ba:	230c      	movs	r3, #12
    28bc:	4363      	muls	r3, r4
    28be:	18f2      	adds	r2, r6, r3
    28c0:	5cf0      	ldrb	r0, [r6, r3]
    28c2:	7851      	ldrb	r1, [r2, #1]
    28c4:	f007 ff7c 	bl	a7c0 <pm_state_set>
	pm_system_resume();
    28c8:	f7ff ff62 	bl	2790 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    28cc:	4620      	mov	r0, r4
    28ce:	f7ff ff47 	bl	2760 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    28d2:	f006 fd19 	bl	9308 <k_sched_unlock>
	bool ret = true;
    28d6:	2001      	movs	r0, #1
    28d8:	e7c3      	b.n	2862 <pm_system_suspend+0x56>
    28da:	bf00      	nop
    28dc:	20001904 	.word	0x20001904
    28e0:	20000c18 	.word	0x20000c18
    28e4:	20000c0c 	.word	0x20000c0c
    28e8:	000f423f 	.word	0x000f423f
    28ec:	000f4240 	.word	0x000f4240
    28f0:	20000c1c 	.word	0x20000c1c
    28f4:	0000a7c1 	.word	0x0000a7c1

000028f8 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    28f8:	4b05      	ldr	r3, [pc, #20]	; (2910 <pm_policy_state_lock_is_active+0x18>)
    28fa:	f3bf 8f5b 	dmb	ish
    28fe:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2902:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    2906:	3800      	subs	r0, #0
    2908:	bf18      	it	ne
    290a:	2001      	movne	r0, #1
    290c:	4770      	bx	lr
    290e:	bf00      	nop
    2910:	20000c20 	.word	0x20000c20

00002914 <pm_policy_next_state>:
{
    2914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2918:	b085      	sub	sp, #20
    291a:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    291c:	a903      	add	r1, sp, #12
    291e:	f000 f847 	bl	29b0 <pm_state_cpu_get_all>
    2922:	f8df 8080 	ldr.w	r8, [pc, #128]	; 29a4 <pm_policy_next_state+0x90>
    2926:	f8df a080 	ldr.w	sl, [pc, #128]	; 29a8 <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    292a:	1e44      	subs	r4, r0, #1
    292c:	b224      	sxth	r4, r4
    292e:	f04f 0b00 	mov.w	fp, #0
    2932:	1c63      	adds	r3, r4, #1
    2934:	d104      	bne.n	2940 <pm_policy_next_state+0x2c>
	return NULL;
    2936:	2600      	movs	r6, #0
}
    2938:	4630      	mov	r0, r6
    293a:	b005      	add	sp, #20
    293c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    2940:	9a03      	ldr	r2, [sp, #12]
    2942:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    2946:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    294a:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    294e:	f7ff ffd3 	bl	28f8 <pm_policy_state_lock_is_active>
    2952:	4605      	mov	r5, r0
    2954:	bb10      	cbnz	r0, 299c <pm_policy_next_state+0x88>
    2956:	6870      	ldr	r0, [r6, #4]
    2958:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    295c:	46c4      	mov	ip, r8
    295e:	4629      	mov	r1, r5
    2960:	fbe0 c109 	umlal	ip, r1, r0, r9
    2964:	4652      	mov	r2, sl
    2966:	465b      	mov	r3, fp
    2968:	4660      	mov	r0, ip
    296a:	f7fd fbb9 	bl	e0 <__aeabi_uldivmod>
    296e:	9001      	str	r0, [sp, #4]
    2970:	68b0      	ldr	r0, [r6, #8]
    2972:	46c4      	mov	ip, r8
    2974:	4629      	mov	r1, r5
    2976:	fbe0 c109 	umlal	ip, r1, r0, r9
    297a:	465b      	mov	r3, fp
    297c:	4652      	mov	r2, sl
    297e:	4660      	mov	r0, ip
    2980:	f7fd fbae 	bl	e0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2984:	4b09      	ldr	r3, [pc, #36]	; (29ac <pm_policy_next_state+0x98>)
    2986:	681b      	ldr	r3, [r3, #0]
    2988:	1c59      	adds	r1, r3, #1
    298a:	d001      	beq.n	2990 <pm_policy_next_state+0x7c>
    298c:	4283      	cmp	r3, r0
    298e:	d905      	bls.n	299c <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    2990:	1c7a      	adds	r2, r7, #1
    2992:	d0d1      	beq.n	2938 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    2994:	9b01      	ldr	r3, [sp, #4]
    2996:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    2998:	42b8      	cmp	r0, r7
    299a:	d9cd      	bls.n	2938 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    299c:	3c01      	subs	r4, #1
    299e:	b224      	sxth	r4, r4
    29a0:	e7c7      	b.n	2932 <pm_policy_next_state+0x1e>
    29a2:	bf00      	nop
    29a4:	000f423f 	.word	0x000f423f
    29a8:	000f4240 	.word	0x000f4240
    29ac:	20000008 	.word	0x20000008

000029b0 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    29b0:	b908      	cbnz	r0, 29b6 <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    29b2:	4b02      	ldr	r3, [pc, #8]	; (29bc <pm_state_cpu_get_all+0xc>)
    29b4:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    29b6:	2000      	movs	r0, #0
    29b8:	4770      	bx	lr
    29ba:	bf00      	nop
    29bc:	0000bae0 	.word	0x0000bae0

000029c0 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    29c0:	4901      	ldr	r1, [pc, #4]	; (29c8 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    29c2:	2210      	movs	r2, #16
	str	r2, [r1]
    29c4:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    29c6:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    29c8:	e000ed10 	.word	0xe000ed10

000029cc <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    29cc:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    29ce:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    29d0:	f380 8811 	msr	BASEPRI, r0
	isb
    29d4:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    29d8:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    29dc:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    29de:	b662      	cpsie	i
	isb
    29e0:	f3bf 8f6f 	isb	sy

	bx	lr
    29e4:	4770      	bx	lr
    29e6:	bf00      	nop

000029e8 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    29e8:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    29ea:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    29ec:	f381 8811 	msr	BASEPRI, r1

	wfe
    29f0:	bf20      	wfe

	msr	BASEPRI, r0
    29f2:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    29f6:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    29f8:	4770      	bx	lr
    29fa:	bf00      	nop

000029fc <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    29fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2a00:	4681      	mov	r9, r0
    2a02:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    2a04:	460c      	mov	r4, r1
    2a06:	2900      	cmp	r1, #0
    2a08:	d04c      	beq.n	2aa4 <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2a0a:	466e      	mov	r6, sp
    2a0c:	b08a      	sub	sp, #40	; 0x28
    2a0e:	466d      	mov	r5, sp
    2a10:	e9d1 1200 	ldrd	r1, r2, [r1]
    2a14:	68a3      	ldr	r3, [r4, #8]
    2a16:	4827      	ldr	r0, [pc, #156]	; (2ab4 <z_arm_fatal_error+0xb8>)
    2a18:	46a8      	mov	r8, r5
    2a1a:	f04f 0a05 	mov.w	sl, #5
    2a1e:	e9c5 0105 	strd	r0, r1, [r5, #20]
    2a22:	e9c5 2307 	strd	r2, r3, [r5, #28]
    2a26:	f848 af10 	str.w	sl, [r8, #16]!
    2a2a:	4823      	ldr	r0, [pc, #140]	; (2ab8 <z_arm_fatal_error+0xbc>)
    2a2c:	4642      	mov	r2, r8
    2a2e:	2300      	movs	r3, #0
    2a30:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    2a34:	f007 fdf2 	bl	a61c <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2a38:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    2a3c:	6963      	ldr	r3, [r4, #20]
    2a3e:	481f      	ldr	r0, [pc, #124]	; (2abc <z_arm_fatal_error+0xc0>)
    2a40:	f8c5 a010 	str.w	sl, [r5, #16]
    2a44:	46b5      	mov	sp, r6
    2a46:	e9c5 0105 	strd	r0, r1, [r5, #20]
    2a4a:	46ad      	mov	sp, r5
    2a4c:	e9c5 2307 	strd	r2, r3, [r5, #28]
    2a50:	4819      	ldr	r0, [pc, #100]	; (2ab8 <z_arm_fatal_error+0xbc>)
    2a52:	4642      	mov	r2, r8
    2a54:	2300      	movs	r3, #0
    2a56:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    2a5a:	f007 fddf 	bl	a61c <z_impl_z_log_msg2_static_create>
    2a5e:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2a60:	b088      	sub	sp, #32
    2a62:	466d      	mov	r5, sp
    2a64:	69e3      	ldr	r3, [r4, #28]
    2a66:	4a16      	ldr	r2, [pc, #88]	; (2ac0 <z_arm_fatal_error+0xc4>)
    2a68:	46a8      	mov	r8, r5
    2a6a:	f04f 0a03 	mov.w	sl, #3
    2a6e:	e9c5 2305 	strd	r2, r3, [r5, #20]
    2a72:	f848 af10 	str.w	sl, [r8, #16]!
    2a76:	4810      	ldr	r0, [pc, #64]	; (2ab8 <z_arm_fatal_error+0xbc>)
    2a78:	4642      	mov	r2, r8
    2a7a:	2300      	movs	r3, #0
    2a7c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2a80:	f007 fdcc 	bl	a61c <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2a84:	4a0f      	ldr	r2, [pc, #60]	; (2ac4 <z_arm_fatal_error+0xc8>)
    2a86:	69a3      	ldr	r3, [r4, #24]
    2a88:	f8c5 a010 	str.w	sl, [r5, #16]
    2a8c:	46b5      	mov	sp, r6
    2a8e:	e9c5 2305 	strd	r2, r3, [r5, #20]
    2a92:	46ad      	mov	sp, r5
    2a94:	4808      	ldr	r0, [pc, #32]	; (2ab8 <z_arm_fatal_error+0xbc>)
    2a96:	2300      	movs	r3, #0
    2a98:	4642      	mov	r2, r8
    2a9a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2a9e:	f007 fdbd 	bl	a61c <z_impl_z_log_msg2_static_create>
    2aa2:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2aa4:	4621      	mov	r1, r4
    2aa6:	4648      	mov	r0, r9
    2aa8:	f005 fcf6 	bl	8498 <z_fatal_error>
}
    2aac:	46bd      	mov	sp, r7
    2aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2ab2:	bf00      	nop
    2ab4:	0000bfc1 	.word	0x0000bfc1
    2ab8:	0000b9ac 	.word	0x0000b9ac
    2abc:	0000bff0 	.word	0x0000bff0
    2ac0:	0000c01f 	.word	0x0000c01f
    2ac4:	0000c02e 	.word	0x0000c02e

00002ac8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2ac8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2aca:	2b00      	cmp	r3, #0
    2acc:	db08      	blt.n	2ae0 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2ace:	2201      	movs	r2, #1
    2ad0:	f000 001f 	and.w	r0, r0, #31
    2ad4:	fa02 f000 	lsl.w	r0, r2, r0
    2ad8:	095b      	lsrs	r3, r3, #5
    2ada:	4a02      	ldr	r2, [pc, #8]	; (2ae4 <arch_irq_enable+0x1c>)
    2adc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2ae0:	4770      	bx	lr
    2ae2:	bf00      	nop
    2ae4:	e000e100 	.word	0xe000e100

00002ae8 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    2ae8:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2aea:	2b00      	cmp	r3, #0
    2aec:	db0d      	blt.n	2b0a <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2aee:	2201      	movs	r2, #1
    2af0:	095b      	lsrs	r3, r3, #5
    2af2:	f000 001f 	and.w	r0, r0, #31
    2af6:	fa02 f000 	lsl.w	r0, r2, r0
    2afa:	3320      	adds	r3, #32
    2afc:	4a03      	ldr	r2, [pc, #12]	; (2b0c <arch_irq_disable+0x24>)
    2afe:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2b02:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b06:	f3bf 8f6f 	isb	sy
}
    2b0a:	4770      	bx	lr
    2b0c:	e000e100 	.word	0xe000e100

00002b10 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2b10:	4b05      	ldr	r3, [pc, #20]	; (2b28 <arch_irq_is_enabled+0x18>)
    2b12:	0942      	lsrs	r2, r0, #5
    2b14:	f000 001f 	and.w	r0, r0, #31
    2b18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2b1c:	2301      	movs	r3, #1
    2b1e:	fa03 f000 	lsl.w	r0, r3, r0
}
    2b22:	4010      	ands	r0, r2
    2b24:	4770      	bx	lr
    2b26:	bf00      	nop
    2b28:	e000e100 	.word	0xe000e100

00002b2c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2b2c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2b2e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2b30:	bfa8      	it	ge
    2b32:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    2b36:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2b3a:	bfb8      	it	lt
    2b3c:	4b06      	ldrlt	r3, [pc, #24]	; (2b58 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2b3e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2b42:	bfac      	ite	ge
    2b44:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2b48:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2b4c:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2b4e:	bfb4      	ite	lt
    2b50:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2b52:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    2b56:	4770      	bx	lr
    2b58:	e000ed14 	.word	0xe000ed14

00002b5c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    2b5c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    2b5e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    2b60:	4b04      	ldr	r3, [pc, #16]	; (2b74 <_arch_isr_direct_pm+0x18>)
    2b62:	699a      	ldr	r2, [r3, #24]
    2b64:	b11a      	cbz	r2, 2b6e <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    2b66:	2200      	movs	r2, #0
    2b68:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    2b6a:	f008 fab9 	bl	b0e0 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    2b6e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    2b70:	bd08      	pop	{r3, pc}
    2b72:	bf00      	nop
    2b74:	20001904 	.word	0x20001904

00002b78 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2b78:	bf30      	wfi
    b z_SysNmiOnReset
    2b7a:	f7ff bffd 	b.w	2b78 <z_SysNmiOnReset>
    2b7e:	bf00      	nop

00002b80 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2b80:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2b82:	4b08      	ldr	r3, [pc, #32]	; (2ba4 <z_arm_prep_c+0x24>)
    2b84:	4a08      	ldr	r2, [pc, #32]	; (2ba8 <z_arm_prep_c+0x28>)
    2b86:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    2b8a:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2b8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2b90:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2b94:	f005 fd18 	bl	85c8 <z_bss_zero>
	z_data_copy();
    2b98:	f006 fcea 	bl	9570 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2b9c:	f000 fb94 	bl	32c8 <z_arm_interrupt_init>
	z_cstart();
    2ba0:	f005 fd56 	bl	8650 <z_cstart>
    2ba4:	00000000 	.word	0x00000000
    2ba8:	e000ed00 	.word	0xe000ed00

00002bac <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2bac:	4a09      	ldr	r2, [pc, #36]	; (2bd4 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2bae:	490a      	ldr	r1, [pc, #40]	; (2bd8 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2bb0:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2bb2:	6809      	ldr	r1, [r1, #0]
    2bb4:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2bb6:	4909      	ldr	r1, [pc, #36]	; (2bdc <arch_swap+0x30>)
	_current->arch.basepri = key;
    2bb8:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2bba:	684b      	ldr	r3, [r1, #4]
    2bbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2bc0:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    2bc2:	2300      	movs	r3, #0
    2bc4:	f383 8811 	msr	BASEPRI, r3
    2bc8:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2bcc:	6893      	ldr	r3, [r2, #8]
}
    2bce:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2bd0:	4770      	bx	lr
    2bd2:	bf00      	nop
    2bd4:	20001904 	.word	0x20001904
    2bd8:	0000bd00 	.word	0x0000bd00
    2bdc:	e000ed00 	.word	0xe000ed00

00002be0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2be0:	4912      	ldr	r1, [pc, #72]	; (2c2c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2be2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2be4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2be8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2bea:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2bee:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2bf2:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2bf4:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2bf8:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2bfc:	4f0c      	ldr	r7, [pc, #48]	; (2c30 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2bfe:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2c02:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2c04:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2c06:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2c08:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    2c0a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2c0c:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2c0e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2c12:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2c14:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2c16:	f000 fbf3 	bl	3400 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2c1a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2c1e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2c22:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2c26:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2c2a:	4770      	bx	lr
    ldr r1, =_kernel
    2c2c:	20001904 	.word	0x20001904
    ldr v4, =_SCS_ICSR
    2c30:	e000ed04 	.word	0xe000ed04

00002c34 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2c34:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2c38:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2c3a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2c3e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2c42:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2c44:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2c48:	2902      	cmp	r1, #2
    beq _oops
    2c4a:	d0ff      	beq.n	2c4c <_oops>

00002c4c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2c4c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2c4e:	f007 fd5a 	bl	a706 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2c52:	bd01      	pop	{r0, pc}

00002c54 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2c54:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2c58:	9b00      	ldr	r3, [sp, #0]
    2c5a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2c5e:	490a      	ldr	r1, [pc, #40]	; (2c88 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2c60:	9b01      	ldr	r3, [sp, #4]
    2c62:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2c66:	9b02      	ldr	r3, [sp, #8]
    2c68:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2c6c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2c70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2c74:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2c78:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2c7c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2c7e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2c80:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2c82:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2c84:	4770      	bx	lr
    2c86:	bf00      	nop
    2c88:	00009cc3 	.word	0x00009cc3

00002c8c <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2c8c:	4a09      	ldr	r2, [pc, #36]	; (2cb4 <z_check_thread_stack_fail+0x28>)
{
    2c8e:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    2c90:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    2c92:	b170      	cbz	r0, 2cb2 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2c94:	f113 0f16 	cmn.w	r3, #22
    2c98:	6e40      	ldr	r0, [r0, #100]	; 0x64
    2c9a:	d005      	beq.n	2ca8 <z_check_thread_stack_fail+0x1c>
    2c9c:	f1a0 0220 	sub.w	r2, r0, #32
    2ca0:	429a      	cmp	r2, r3
    2ca2:	d805      	bhi.n	2cb0 <z_check_thread_stack_fail+0x24>
    2ca4:	4283      	cmp	r3, r0
    2ca6:	d203      	bcs.n	2cb0 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2ca8:	4281      	cmp	r1, r0
    2caa:	bf28      	it	cs
    2cac:	2000      	movcs	r0, #0
    2cae:	4770      	bx	lr
    2cb0:	2000      	movs	r0, #0
}
    2cb2:	4770      	bx	lr
    2cb4:	20001904 	.word	0x20001904

00002cb8 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2cb8:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2cba:	4b09      	ldr	r3, [pc, #36]	; (2ce0 <arch_switch_to_main_thread+0x28>)
    2cbc:	6098      	str	r0, [r3, #8]
{
    2cbe:	460d      	mov	r5, r1
    2cc0:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2cc2:	f000 fb9d 	bl	3400 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2cc6:	4620      	mov	r0, r4
    2cc8:	f385 8809 	msr	PSP, r5
    2ccc:	2100      	movs	r1, #0
    2cce:	b663      	cpsie	if
    2cd0:	f381 8811 	msr	BASEPRI, r1
    2cd4:	f3bf 8f6f 	isb	sy
    2cd8:	2200      	movs	r2, #0
    2cda:	2300      	movs	r3, #0
    2cdc:	f006 fff1 	bl	9cc2 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2ce0:	20001904 	.word	0x20001904

00002ce4 <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2ce4:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2ce6:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2ce8:	4a0b      	ldr	r2, [pc, #44]	; (2d18 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2cea:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2cec:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2cee:	bf1e      	ittt	ne
	movne	r1, #0
    2cf0:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2cf2:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2cf4:	f008 f9f4 	blne	b0e0 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2cf8:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2cfa:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2cfe:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2d02:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2d06:	4905      	ldr	r1, [pc, #20]	; (2d1c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2d08:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2d0a:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2d0c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2d0e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2d12:	4903      	ldr	r1, [pc, #12]	; (2d20 <_isr_wrapper+0x3c>)
	bx r1
    2d14:	4708      	bx	r1
    2d16:	0000      	.short	0x0000
	ldr r2, =_kernel
    2d18:	20001904 	.word	0x20001904
	ldr r1, =_sw_isr_table
    2d1c:	0000b84c 	.word	0x0000b84c
	ldr r1, =z_arm_int_exit
    2d20:	00002d25 	.word	0x00002d25

00002d24 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2d24:	4b04      	ldr	r3, [pc, #16]	; (2d38 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2d26:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2d28:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2d2a:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2d2c:	d003      	beq.n	2d36 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2d2e:	4903      	ldr	r1, [pc, #12]	; (2d3c <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2d30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2d34:	600a      	str	r2, [r1, #0]

00002d36 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2d36:	4770      	bx	lr
	ldr r3, =_kernel
    2d38:	20001904 	.word	0x20001904
	ldr r1, =_SCS_ICSR
    2d3c:	e000ed04 	.word	0xe000ed04

00002d40 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d44:	b086      	sub	sp, #24
    2d46:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    2d48:	4b3c      	ldr	r3, [pc, #240]	; (2e3c <bus_fault.constprop.0+0xfc>)
    2d4a:	617b      	str	r3, [r7, #20]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2d4c:	4606      	mov	r6, r0
    2d4e:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2d50:	483b      	ldr	r0, [pc, #236]	; (2e40 <bus_fault.constprop.0+0x100>)
    2d52:	2402      	movs	r4, #2
    2d54:	f107 0210 	add.w	r2, r7, #16
    2d58:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2d5c:	613c      	str	r4, [r7, #16]
    2d5e:	f007 fce1 	bl	a724 <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2d62:	4b38      	ldr	r3, [pc, #224]	; (2e44 <bus_fault.constprop.0+0x104>)
    2d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d66:	04db      	lsls	r3, r3, #19
    2d68:	d509      	bpl.n	2d7e <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
    2d6a:	4b37      	ldr	r3, [pc, #220]	; (2e48 <bus_fault.constprop.0+0x108>)
    2d6c:	4834      	ldr	r0, [pc, #208]	; (2e40 <bus_fault.constprop.0+0x100>)
    2d6e:	f107 0210 	add.w	r2, r7, #16
    2d72:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2d76:	e9c7 4304 	strd	r4, r3, [r7, #16]
    2d7a:	f007 fcd3 	bl	a724 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2d7e:	4b31      	ldr	r3, [pc, #196]	; (2e44 <bus_fault.constprop.0+0x104>)
    2d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2d82:	051c      	lsls	r4, r3, #20
    2d84:	d50a      	bpl.n	2d9c <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    2d86:	4b31      	ldr	r3, [pc, #196]	; (2e4c <bus_fault.constprop.0+0x10c>)
    2d88:	617b      	str	r3, [r7, #20]
    2d8a:	482d      	ldr	r0, [pc, #180]	; (2e40 <bus_fault.constprop.0+0x100>)
    2d8c:	2302      	movs	r3, #2
    2d8e:	f107 0210 	add.w	r2, r7, #16
    2d92:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2d96:	613b      	str	r3, [r7, #16]
    2d98:	f007 fcc4 	bl	a724 <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2d9c:	4c29      	ldr	r4, [pc, #164]	; (2e44 <bus_fault.constprop.0+0x104>)
    2d9e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2da0:	0598      	lsls	r0, r3, #22
    2da2:	d522      	bpl.n	2dea <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
    2da4:	4b2a      	ldr	r3, [pc, #168]	; (2e50 <bus_fault.constprop.0+0x110>)
    2da6:	617b      	str	r3, [r7, #20]
    2da8:	f107 0210 	add.w	r2, r7, #16
    2dac:	2302      	movs	r3, #2
    2dae:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2db2:	4823      	ldr	r0, [pc, #140]	; (2e40 <bus_fault.constprop.0+0x100>)
    2db4:	613b      	str	r3, [r7, #16]
    2db6:	f007 fcb5 	bl	a724 <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2dba:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2dbc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2dbe:	0411      	lsls	r1, r2, #16
		PR_FAULT_INFO("  Precise data bus error");
    2dc0:	46e8      	mov	r8, sp
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2dc2:	d512      	bpl.n	2dea <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2dc4:	b088      	sub	sp, #32
    2dc6:	4923      	ldr	r1, [pc, #140]	; (2e54 <bus_fault.constprop.0+0x114>)
    2dc8:	481d      	ldr	r0, [pc, #116]	; (2e40 <bus_fault.constprop.0+0x100>)
    2dca:	466a      	mov	r2, sp
    2dcc:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2dd0:	2303      	movs	r3, #3
    2dd2:	f842 3f10 	str.w	r3, [r2, #16]!
    2dd6:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2dda:	f007 fca3 	bl	a724 <z_log_msg2_static_create.constprop.0>
    2dde:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    2de0:	b11e      	cbz	r6, 2dea <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2de2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2de4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2de8:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2dea:	4b16      	ldr	r3, [pc, #88]	; (2e44 <bus_fault.constprop.0+0x104>)
    2dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2dee:	055a      	lsls	r2, r3, #21
    2df0:	d50a      	bpl.n	2e08 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
    2df2:	4b19      	ldr	r3, [pc, #100]	; (2e58 <bus_fault.constprop.0+0x118>)
    2df4:	617b      	str	r3, [r7, #20]
    2df6:	4812      	ldr	r0, [pc, #72]	; (2e40 <bus_fault.constprop.0+0x100>)
    2df8:	2302      	movs	r3, #2
    2dfa:	f107 0210 	add.w	r2, r7, #16
    2dfe:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2e02:	613b      	str	r3, [r7, #16]
    2e04:	f007 fc8e 	bl	a724 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2e08:	4b0e      	ldr	r3, [pc, #56]	; (2e44 <bus_fault.constprop.0+0x104>)
    2e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e0c:	05db      	lsls	r3, r3, #23
    2e0e:	d50a      	bpl.n	2e26 <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    2e10:	4b12      	ldr	r3, [pc, #72]	; (2e5c <bus_fault.constprop.0+0x11c>)
    2e12:	617b      	str	r3, [r7, #20]
    2e14:	480a      	ldr	r0, [pc, #40]	; (2e40 <bus_fault.constprop.0+0x100>)
    2e16:	2302      	movs	r3, #2
    2e18:	f107 0210 	add.w	r2, r7, #16
    2e1c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2e20:	613b      	str	r3, [r7, #16]
    2e22:	f007 fc7f 	bl	a724 <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2e26:	4a07      	ldr	r2, [pc, #28]	; (2e44 <bus_fault.constprop.0+0x104>)
    2e28:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2e2a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2e2c:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
    2e30:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2e32:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2e34:	7028      	strb	r0, [r5, #0]
}
    2e36:	46bd      	mov	sp, r7
    2e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2e3c:	0000c05c 	.word	0x0000c05c
    2e40:	0000b9ac 	.word	0x0000b9ac
    2e44:	e000ed00 	.word	0xe000ed00
    2e48:	0000c072 	.word	0x0000c072
    2e4c:	0000c083 	.word	0x0000c083
    2e50:	0000c096 	.word	0x0000c096
    2e54:	0000c0af 	.word	0x0000c0af
    2e58:	0000c0c4 	.word	0x0000c0c4
    2e5c:	0000c0df 	.word	0x0000c0df

00002e60 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    2e60:	b510      	push	{r4, lr}
    2e62:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    2e64:	4b33      	ldr	r3, [pc, #204]	; (2f34 <usage_fault.constprop.0+0xd4>)
    2e66:	4834      	ldr	r0, [pc, #208]	; (2f38 <usage_fault.constprop.0+0xd8>)
    2e68:	9305      	str	r3, [sp, #20]
    2e6a:	2402      	movs	r4, #2
    2e6c:	aa04      	add	r2, sp, #16
    2e6e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2e72:	9404      	str	r4, [sp, #16]
    2e74:	f007 fc56 	bl	a724 <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2e78:	4b30      	ldr	r3, [pc, #192]	; (2f3c <usage_fault.constprop.0+0xdc>)
    2e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e7c:	019b      	lsls	r3, r3, #6
    2e7e:	d508      	bpl.n	2e92 <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
    2e80:	4b2f      	ldr	r3, [pc, #188]	; (2f40 <usage_fault.constprop.0+0xe0>)
    2e82:	482d      	ldr	r0, [pc, #180]	; (2f38 <usage_fault.constprop.0+0xd8>)
    2e84:	aa04      	add	r2, sp, #16
    2e86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2e8a:	e9cd 4304 	strd	r4, r3, [sp, #16]
    2e8e:	f007 fc49 	bl	a724 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2e92:	4b2a      	ldr	r3, [pc, #168]	; (2f3c <usage_fault.constprop.0+0xdc>)
    2e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2e96:	01dc      	lsls	r4, r3, #7
    2e98:	d509      	bpl.n	2eae <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
    2e9a:	4b2a      	ldr	r3, [pc, #168]	; (2f44 <usage_fault.constprop.0+0xe4>)
    2e9c:	9305      	str	r3, [sp, #20]
    2e9e:	4826      	ldr	r0, [pc, #152]	; (2f38 <usage_fault.constprop.0+0xd8>)
    2ea0:	2302      	movs	r3, #2
    2ea2:	aa04      	add	r2, sp, #16
    2ea4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2ea8:	9304      	str	r3, [sp, #16]
    2eaa:	f007 fc3b 	bl	a724 <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2eae:	4b23      	ldr	r3, [pc, #140]	; (2f3c <usage_fault.constprop.0+0xdc>)
    2eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2eb2:	0318      	lsls	r0, r3, #12
    2eb4:	d509      	bpl.n	2eca <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
    2eb6:	4b24      	ldr	r3, [pc, #144]	; (2f48 <usage_fault.constprop.0+0xe8>)
    2eb8:	9305      	str	r3, [sp, #20]
    2eba:	481f      	ldr	r0, [pc, #124]	; (2f38 <usage_fault.constprop.0+0xd8>)
    2ebc:	2302      	movs	r3, #2
    2ebe:	aa04      	add	r2, sp, #16
    2ec0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2ec4:	9304      	str	r3, [sp, #16]
    2ec6:	f007 fc2d 	bl	a724 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2eca:	4b1c      	ldr	r3, [pc, #112]	; (2f3c <usage_fault.constprop.0+0xdc>)
    2ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ece:	0359      	lsls	r1, r3, #13
    2ed0:	d509      	bpl.n	2ee6 <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    2ed2:	4b1e      	ldr	r3, [pc, #120]	; (2f4c <usage_fault.constprop.0+0xec>)
    2ed4:	9305      	str	r3, [sp, #20]
    2ed6:	4818      	ldr	r0, [pc, #96]	; (2f38 <usage_fault.constprop.0+0xd8>)
    2ed8:	2302      	movs	r3, #2
    2eda:	aa04      	add	r2, sp, #16
    2edc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2ee0:	9304      	str	r3, [sp, #16]
    2ee2:	f007 fc1f 	bl	a724 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2ee6:	4b15      	ldr	r3, [pc, #84]	; (2f3c <usage_fault.constprop.0+0xdc>)
    2ee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2eea:	039a      	lsls	r2, r3, #14
    2eec:	d509      	bpl.n	2f02 <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    2eee:	4b18      	ldr	r3, [pc, #96]	; (2f50 <usage_fault.constprop.0+0xf0>)
    2ef0:	9305      	str	r3, [sp, #20]
    2ef2:	4811      	ldr	r0, [pc, #68]	; (2f38 <usage_fault.constprop.0+0xd8>)
    2ef4:	2302      	movs	r3, #2
    2ef6:	aa04      	add	r2, sp, #16
    2ef8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2efc:	9304      	str	r3, [sp, #16]
    2efe:	f007 fc11 	bl	a724 <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2f02:	4b0e      	ldr	r3, [pc, #56]	; (2f3c <usage_fault.constprop.0+0xdc>)
    2f04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f06:	03db      	lsls	r3, r3, #15
    2f08:	d509      	bpl.n	2f1e <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    2f0a:	4b12      	ldr	r3, [pc, #72]	; (2f54 <usage_fault.constprop.0+0xf4>)
    2f0c:	9305      	str	r3, [sp, #20]
    2f0e:	480a      	ldr	r0, [pc, #40]	; (2f38 <usage_fault.constprop.0+0xd8>)
    2f10:	2302      	movs	r3, #2
    2f12:	aa04      	add	r2, sp, #16
    2f14:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f18:	9304      	str	r3, [sp, #16]
    2f1a:	f007 fc03 	bl	a724 <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2f1e:	4a07      	ldr	r2, [pc, #28]	; (2f3c <usage_fault.constprop.0+0xdc>)
    2f20:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2f22:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    2f26:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    2f2a:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2f2c:	6293      	str	r3, [r2, #40]	; 0x28
}
    2f2e:	b006      	add	sp, #24
    2f30:	bd10      	pop	{r4, pc}
    2f32:	bf00      	nop
    2f34:	0000c0f7 	.word	0x0000c0f7
    2f38:	0000b9ac 	.word	0x0000b9ac
    2f3c:	e000ed00 	.word	0xe000ed00
    2f40:	0000c10f 	.word	0x0000c10f
    2f44:	0000c122 	.word	0x0000c122
    2f48:	0000c13c 	.word	0x0000c13c
    2f4c:	0000c15a 	.word	0x0000c15a
    2f50:	0000c17f 	.word	0x0000c17f
    2f54:	0000c199 	.word	0x0000c199

00002f58 <mem_manage_fault>:
{
    2f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2f5c:	b086      	sub	sp, #24
    2f5e:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** MPU FAULT *****");
    2f60:	4b43      	ldr	r3, [pc, #268]	; (3070 <mem_manage_fault+0x118>)
    2f62:	617b      	str	r3, [r7, #20]
{
    2f64:	4606      	mov	r6, r0
    2f66:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    2f68:	4842      	ldr	r0, [pc, #264]	; (3074 <mem_manage_fault+0x11c>)
{
    2f6a:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    2f6c:	2402      	movs	r4, #2
    2f6e:	f107 0210 	add.w	r2, r7, #16
    2f72:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f76:	613c      	str	r4, [r7, #16]
    2f78:	f007 fbd4 	bl	a724 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2f7c:	4b3e      	ldr	r3, [pc, #248]	; (3078 <mem_manage_fault+0x120>)
    2f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f80:	06d8      	lsls	r0, r3, #27
    2f82:	d509      	bpl.n	2f98 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    2f84:	4b3d      	ldr	r3, [pc, #244]	; (307c <mem_manage_fault+0x124>)
    2f86:	483b      	ldr	r0, [pc, #236]	; (3074 <mem_manage_fault+0x11c>)
    2f88:	f107 0210 	add.w	r2, r7, #16
    2f8c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f90:	e9c7 4304 	strd	r4, r3, [r7, #16]
    2f94:	f007 fbc6 	bl	a724 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2f98:	4b37      	ldr	r3, [pc, #220]	; (3078 <mem_manage_fault+0x120>)
    2f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f9c:	0719      	lsls	r1, r3, #28
    2f9e:	d50a      	bpl.n	2fb6 <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Unstacking error");
    2fa0:	4b37      	ldr	r3, [pc, #220]	; (3080 <mem_manage_fault+0x128>)
    2fa2:	617b      	str	r3, [r7, #20]
    2fa4:	4833      	ldr	r0, [pc, #204]	; (3074 <mem_manage_fault+0x11c>)
    2fa6:	2302      	movs	r3, #2
    2fa8:	f107 0210 	add.w	r2, r7, #16
    2fac:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2fb0:	613b      	str	r3, [r7, #16]
    2fb2:	f007 fbb7 	bl	a724 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2fb6:	4c30      	ldr	r4, [pc, #192]	; (3078 <mem_manage_fault+0x120>)
    2fb8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2fba:	079a      	lsls	r2, r3, #30
    2fbc:	d423      	bmi.n	3006 <mem_manage_fault+0xae>
	uint32_t mmfar = -EINVAL;
    2fbe:	f06f 0a15 	mvn.w	sl, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2fc2:	4b2d      	ldr	r3, [pc, #180]	; (3078 <mem_manage_fault+0x120>)
    2fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2fc6:	07d8      	lsls	r0, r3, #31
    2fc8:	d50a      	bpl.n	2fe0 <mem_manage_fault+0x88>
		PR_FAULT_INFO("  Instruction Access Violation");
    2fca:	4b2e      	ldr	r3, [pc, #184]	; (3084 <mem_manage_fault+0x12c>)
    2fcc:	617b      	str	r3, [r7, #20]
    2fce:	4829      	ldr	r0, [pc, #164]	; (3074 <mem_manage_fault+0x11c>)
    2fd0:	2302      	movs	r3, #2
    2fd2:	f107 0210 	add.w	r2, r7, #16
    2fd6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2fda:	613b      	str	r3, [r7, #16]
    2fdc:	f007 fba2 	bl	a724 <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2fe0:	4b25      	ldr	r3, [pc, #148]	; (3078 <mem_manage_fault+0x120>)
    2fe2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2fe4:	06d1      	lsls	r1, r2, #27
    2fe6:	d435      	bmi.n	3054 <mem_manage_fault+0xfc>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2fea:	0792      	lsls	r2, r2, #30
    2fec:	d432      	bmi.n	3054 <mem_manage_fault+0xfc>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2fee:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2ff0:	4a21      	ldr	r2, [pc, #132]	; (3078 <mem_manage_fault+0x120>)
    2ff2:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2ff4:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2ff8:	6293      	str	r3, [r2, #40]	; 0x28
}
    2ffa:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    2ffc:	2300      	movs	r3, #0
    2ffe:	702b      	strb	r3, [r5, #0]
}
    3000:	46bd      	mov	sp, r7
    3002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    3006:	4b20      	ldr	r3, [pc, #128]	; (3088 <mem_manage_fault+0x130>)
    3008:	617b      	str	r3, [r7, #20]
    300a:	481a      	ldr	r0, [pc, #104]	; (3074 <mem_manage_fault+0x11c>)
    300c:	2302      	movs	r3, #2
    300e:	f107 0210 	add.w	r2, r7, #16
    3012:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3016:	613b      	str	r3, [r7, #16]
    3018:	f007 fb84 	bl	a724 <z_log_msg2_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    301c:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3020:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3022:	061b      	lsls	r3, r3, #24
		PR_FAULT_INFO("  Data Access Violation");
    3024:	46e9      	mov	r9, sp
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3026:	d5ca      	bpl.n	2fbe <mem_manage_fault+0x66>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    3028:	b088      	sub	sp, #32
    302a:	4b18      	ldr	r3, [pc, #96]	; (308c <mem_manage_fault+0x134>)
    302c:	4811      	ldr	r0, [pc, #68]	; (3074 <mem_manage_fault+0x11c>)
    302e:	466a      	mov	r2, sp
    3030:	e9c2 3a05 	strd	r3, sl, [r2, #20]
    3034:	2303      	movs	r3, #3
    3036:	f842 3f10 	str.w	r3, [r2, #16]!
    303a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    303e:	f007 fb71 	bl	a724 <z_log_msg2_static_create.constprop.0>
    3042:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
    3044:	f1b8 0f00 	cmp.w	r8, #0
    3048:	d0bb      	beq.n	2fc2 <mem_manage_fault+0x6a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    304a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    304c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3050:	62a3      	str	r3, [r4, #40]	; 0x28
    3052:	e7b6      	b.n	2fc2 <mem_manage_fault+0x6a>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    3054:	685b      	ldr	r3, [r3, #4]
    3056:	051b      	lsls	r3, r3, #20
    3058:	d5c9      	bpl.n	2fee <mem_manage_fault+0x96>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    305a:	4631      	mov	r1, r6
    305c:	4650      	mov	r0, sl
    305e:	f7ff fe15 	bl	2c8c <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    3062:	2800      	cmp	r0, #0
    3064:	d0c3      	beq.n	2fee <mem_manage_fault+0x96>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    3066:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    306a:	2002      	movs	r0, #2
    306c:	e7c0      	b.n	2ff0 <mem_manage_fault+0x98>
    306e:	bf00      	nop
    3070:	0000c1c4 	.word	0x0000c1c4
    3074:	0000b9ac 	.word	0x0000b9ac
    3078:	e000ed00 	.word	0xe000ed00
    307c:	0000c1da 	.word	0x0000c1da
    3080:	0000c083 	.word	0x0000c083
    3084:	0000c23b 	.word	0x0000c23b
    3088:	0000c20d 	.word	0x0000c20d
    308c:	0000c225 	.word	0x0000c225

00003090 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3094:	4b76      	ldr	r3, [pc, #472]	; (3270 <z_arm_fault+0x1e0>)
{
    3096:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3098:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    309c:	af00      	add	r7, sp, #0
    309e:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    30a0:	f3c8 0408 	ubfx	r4, r8, #0, #9
    30a4:	2600      	movs	r6, #0
    30a6:	f386 8811 	msr	BASEPRI, r6
    30aa:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    30ae:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    30b2:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    30b6:	d10e      	bne.n	30d6 <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    30b8:	f002 030c 	and.w	r3, r2, #12
    30bc:	2b08      	cmp	r3, #8
    30be:	d10c      	bne.n	30da <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    30c0:	4b6c      	ldr	r3, [pc, #432]	; (3274 <z_arm_fault+0x1e4>)
    30c2:	61fb      	str	r3, [r7, #28]
    30c4:	486c      	ldr	r0, [pc, #432]	; (3278 <z_arm_fault+0x1e8>)
    30c6:	2302      	movs	r3, #2
    30c8:	f107 0218 	add.w	r2, r7, #24
    30cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    30d0:	61bb      	str	r3, [r7, #24]
    30d2:	f007 fb27 	bl	a724 <z_log_msg2_static_create.constprop.0>
		return NULL;
    30d6:	4635      	mov	r5, r6
    30d8:	e003      	b.n	30e2 <z_arm_fault+0x52>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    30da:	0712      	lsls	r2, r2, #28
    30dc:	d401      	bmi.n	30e2 <z_arm_fault+0x52>
			ptr_esf = (z_arch_esf_t *)msp;
    30de:	4605      	mov	r5, r0
			*nested_exc = true;
    30e0:	2601      	movs	r6, #1
	*recoverable = false;
    30e2:	2300      	movs	r3, #0
    30e4:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    30e6:	1ee3      	subs	r3, r4, #3
    30e8:	2b09      	cmp	r3, #9
    30ea:	f200 80a1 	bhi.w	3230 <z_arm_fault+0x1a0>
    30ee:	e8df f003 	tbb	[pc, r3]
    30f2:	9405      	.short	0x9405
    30f4:	9f9f9197 	.word	0x9f9f9197
    30f8:	9a9f9f9f 	.word	0x9a9f9f9f
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    30fc:	f8df 8170 	ldr.w	r8, [pc, #368]	; 3270 <z_arm_fault+0x1e0>
	PR_FAULT_INFO("***** HARD FAULT *****");
    3100:	4b5e      	ldr	r3, [pc, #376]	; (327c <z_arm_fault+0x1ec>)
    3102:	485d      	ldr	r0, [pc, #372]	; (3278 <z_arm_fault+0x1e8>)
    3104:	61fb      	str	r3, [r7, #28]
    3106:	f04f 0a02 	mov.w	sl, #2
    310a:	f107 0218 	add.w	r2, r7, #24
    310e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3112:	f8c7 a018 	str.w	sl, [r7, #24]
    3116:	f007 fb05 	bl	a724 <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    311a:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    311e:	f04f 0b00 	mov.w	fp, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3122:	ea14 040a 	ands.w	r4, r4, sl
	PR_FAULT_INFO("***** HARD FAULT *****");
    3126:	46e9      	mov	r9, sp
	*recoverable = false;
    3128:	f887 b007 	strb.w	fp, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    312c:	d00b      	beq.n	3146 <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
    312e:	4b54      	ldr	r3, [pc, #336]	; (3280 <z_arm_fault+0x1f0>)
    3130:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
    3134:	4850      	ldr	r0, [pc, #320]	; (3278 <z_arm_fault+0x1e8>)
    3136:	f107 0218 	add.w	r2, r7, #24
    313a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    313e:	f007 faf1 	bl	a724 <z_log_msg2_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    3142:	2400      	movs	r4, #0
}
    3144:	e00d      	b.n	3162 <z_arm_fault+0xd2>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    3146:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    314a:	2b00      	cmp	r3, #0
    314c:	da25      	bge.n	319a <z_arm_fault+0x10a>
		PR_EXC("  Debug event");
    314e:	4b4d      	ldr	r3, [pc, #308]	; (3284 <z_arm_fault+0x1f4>)
    3150:	4849      	ldr	r0, [pc, #292]	; (3278 <z_arm_fault+0x1e8>)
    3152:	f107 0218 	add.w	r2, r7, #24
    3156:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    315a:	e9c7 a306 	strd	sl, r3, [r7, #24]
    315e:	f007 fae1 	bl	a724 <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    3162:	79fb      	ldrb	r3, [r7, #7]
    3164:	b9ab      	cbnz	r3, 3192 <z_arm_fault+0x102>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    3166:	2220      	movs	r2, #32
    3168:	4629      	mov	r1, r5
    316a:	f107 0008 	add.w	r0, r7, #8
    316e:	f007 fb02 	bl	a776 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    3172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    3174:	2e00      	cmp	r6, #0
    3176:	d076      	beq.n	3266 <z_arm_fault+0x1d6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3178:	f3c3 0208 	ubfx	r2, r3, #0, #9
    317c:	b922      	cbnz	r2, 3188 <z_arm_fault+0xf8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    317e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    3182:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3186:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    3188:	f107 0108 	add.w	r1, r7, #8
    318c:	4620      	mov	r0, r4
    318e:	f7ff fc35 	bl	29fc <z_arm_fatal_error>
}
    3192:	372c      	adds	r7, #44	; 0x2c
    3194:	46bd      	mov	sp, r7
    3196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    319a:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    319e:	005b      	lsls	r3, r3, #1
    31a0:	d5df      	bpl.n	3162 <z_arm_fault+0xd2>
		PR_EXC("  Fault escalation (see below)");
    31a2:	4b39      	ldr	r3, [pc, #228]	; (3288 <z_arm_fault+0x1f8>)
    31a4:	4834      	ldr	r0, [pc, #208]	; (3278 <z_arm_fault+0x1e8>)
    31a6:	f107 0218 	add.w	r2, r7, #24
    31aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    31ae:	e9c7 a306 	strd	sl, r3, [r7, #24]
    31b2:	f007 fab7 	bl	a724 <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    31b6:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    31b8:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    31bc:	f64d 7302 	movw	r3, #57090	; 0xdf02
    31c0:	429a      	cmp	r2, r3
    31c2:	d009      	beq.n	31d8 <z_arm_fault+0x148>
		} else if (SCB_MMFSR != 0) {
    31c4:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    31c8:	b1bb      	cbz	r3, 31fa <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    31ca:	1dfa      	adds	r2, r7, #7
    31cc:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    31ce:	4628      	mov	r0, r5
    31d0:	f7ff fec2 	bl	2f58 <mem_manage_fault>
    31d4:	4604      	mov	r4, r0
		break;
    31d6:	e7c4      	b.n	3162 <z_arm_fault+0xd2>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    31d8:	b088      	sub	sp, #32
    31da:	682b      	ldr	r3, [r5, #0]
    31dc:	492b      	ldr	r1, [pc, #172]	; (328c <z_arm_fault+0x1fc>)
    31de:	4826      	ldr	r0, [pc, #152]	; (3278 <z_arm_fault+0x1e8>)
    31e0:	466a      	mov	r2, sp
    31e2:	e9c2 1305 	strd	r1, r3, [r2, #20]
    31e6:	2303      	movs	r3, #3
    31e8:	f842 3f10 	str.w	r3, [r2, #16]!
    31ec:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    31f0:	f007 fa98 	bl	a724 <z_log_msg2_static_create.constprop.0>
    31f4:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    31f6:	682c      	ldr	r4, [r5, #0]
    31f8:	e7b3      	b.n	3162 <z_arm_fault+0xd2>
		} else if (SCB_BFSR != 0) {
    31fa:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    31fe:	b123      	cbz	r3, 320a <z_arm_fault+0x17a>
			reason = bus_fault(esf, 1, recoverable);
    3200:	1df9      	adds	r1, r7, #7
    3202:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    3204:	f7ff fd9c 	bl	2d40 <bus_fault.constprop.0>
    3208:	e7e4      	b.n	31d4 <z_arm_fault+0x144>
		} else if (SCB_UFSR != 0) {
    320a:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    320e:	b29b      	uxth	r3, r3
    3210:	2b00      	cmp	r3, #0
    3212:	d0a6      	beq.n	3162 <z_arm_fault+0xd2>
		reason = usage_fault(esf);
    3214:	f7ff fe24 	bl	2e60 <usage_fault.constprop.0>
    3218:	e7dc      	b.n	31d4 <z_arm_fault+0x144>
		reason = mem_manage_fault(esf, 0, recoverable);
    321a:	1dfa      	adds	r2, r7, #7
    321c:	2100      	movs	r1, #0
    321e:	e7d6      	b.n	31ce <z_arm_fault+0x13e>
		reason = bus_fault(esf, 0, recoverable);
    3220:	1df9      	adds	r1, r7, #7
    3222:	2000      	movs	r0, #0
    3224:	e7ee      	b.n	3204 <z_arm_fault+0x174>
	PR_FAULT_INFO(
    3226:	4b1a      	ldr	r3, [pc, #104]	; (3290 <z_arm_fault+0x200>)
    3228:	61fb      	str	r3, [r7, #28]
    322a:	2302      	movs	r3, #2
    322c:	61bb      	str	r3, [r7, #24]
    322e:	e781      	b.n	3134 <z_arm_fault+0xa4>
	PR_FAULT_INFO("***** %s %d) *****",
    3230:	4a18      	ldr	r2, [pc, #96]	; (3294 <z_arm_fault+0x204>)
    3232:	4b19      	ldr	r3, [pc, #100]	; (3298 <z_arm_fault+0x208>)
    3234:	4919      	ldr	r1, [pc, #100]	; (329c <z_arm_fault+0x20c>)
    3236:	4810      	ldr	r0, [pc, #64]	; (3278 <z_arm_fault+0x1e8>)
    3238:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    323c:	46e8      	mov	r8, sp
    323e:	b08a      	sub	sp, #40	; 0x28
    3240:	bf18      	it	ne
    3242:	4613      	movne	r3, r2
    3244:	466a      	mov	r2, sp
    3246:	e9c2 1305 	strd	r1, r3, [r2, #20]
    324a:	2302      	movs	r3, #2
    324c:	f882 3020 	strb.w	r3, [r2, #32]
    3250:	3c10      	subs	r4, #16
    3252:	4b13      	ldr	r3, [pc, #76]	; (32a0 <z_arm_fault+0x210>)
    3254:	61d4      	str	r4, [r2, #28]
    3256:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    325a:	f842 3f10 	str.w	r3, [r2, #16]!
    325e:	f007 fa61 	bl	a724 <z_log_msg2_static_create.constprop.0>
    3262:	46c5      	mov	sp, r8
    3264:	e76d      	b.n	3142 <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    3266:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    326a:	f023 0301 	bic.w	r3, r3, #1
    326e:	e78a      	b.n	3186 <z_arm_fault+0xf6>
    3270:	e000ed00 	.word	0xe000ed00
    3274:	0000c288 	.word	0x0000c288
    3278:	0000b9ac 	.word	0x0000b9ac
    327c:	0000c2b3 	.word	0x0000c2b3
    3280:	0000c2ca 	.word	0x0000c2ca
    3284:	0000c2eb 	.word	0x0000c2eb
    3288:	0000c2f9 	.word	0x0000c2f9
    328c:	0000c318 	.word	0x0000c318
    3290:	0000c334 	.word	0x0000c334
    3294:	0000c26f 	.word	0x0000c26f
    3298:	0000c25a 	.word	0x0000c25a
    329c:	0000c358 	.word	0x0000c358
    32a0:	01000004 	.word	0x01000004

000032a4 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    32a4:	4a02      	ldr	r2, [pc, #8]	; (32b0 <z_arm_fault_init+0xc>)
    32a6:	6953      	ldr	r3, [r2, #20]
    32a8:	f043 0310 	orr.w	r3, r3, #16
    32ac:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    32ae:	4770      	bx	lr
    32b0:	e000ed00 	.word	0xe000ed00

000032b4 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    32b4:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    32b8:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    32bc:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    32be:	4672      	mov	r2, lr
	bl z_arm_fault
    32c0:	f7ff fee6 	bl	3090 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    32c4:	bd01      	pop	{r0, pc}
    32c6:	bf00      	nop

000032c8 <z_arm_interrupt_init>:
    32c8:	4804      	ldr	r0, [pc, #16]	; (32dc <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    32ca:	2300      	movs	r3, #0
    32cc:	2120      	movs	r1, #32
    32ce:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    32d0:	3301      	adds	r3, #1
    32d2:	2b28      	cmp	r3, #40	; 0x28
    32d4:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    32d8:	d1f9      	bne.n	32ce <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    32da:	4770      	bx	lr
    32dc:	e000e100 	.word	0xe000e100

000032e0 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    32e0:	2000      	movs	r0, #0
    msr CONTROL, r0
    32e2:	f380 8814 	msr	CONTROL, r0
    isb
    32e6:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    32ea:	f008 fa0d 	bl	b708 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    32ee:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    32f0:	490d      	ldr	r1, [pc, #52]	; (3328 <__start+0x48>)
    str r0, [r1]
    32f2:	6008      	str	r0, [r1, #0]
    dsb
    32f4:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    32f8:	480c      	ldr	r0, [pc, #48]	; (332c <__start+0x4c>)
    msr msp, r0
    32fa:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    32fe:	f000 f82b 	bl	3358 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    3302:	2020      	movs	r0, #32
    msr BASEPRI, r0
    3304:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    3308:	4809      	ldr	r0, [pc, #36]	; (3330 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    330a:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    330e:	1840      	adds	r0, r0, r1
    msr PSP, r0
    3310:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    3314:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3318:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    331a:	4308      	orrs	r0, r1
    msr CONTROL, r0
    331c:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3320:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    3324:	f7ff fc2c 	bl	2b80 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    3328:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    332c:	200028e0 	.word	0x200028e0
    ldr r0, =z_interrupt_stacks
    3330:	20002a20 	.word	0x20002a20

00003334 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    3334:	4907      	ldr	r1, [pc, #28]	; (3354 <z_arm_clear_arm_mpu_config+0x20>)
    3336:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    333a:	2300      	movs	r3, #0
	int num_regions =
    333c:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    3340:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    3342:	4293      	cmp	r3, r2
    3344:	d100      	bne.n	3348 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    3346:	4770      	bx	lr
  MPU->RNR = rnr;
    3348:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    334c:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    3350:	3301      	adds	r3, #1
    3352:	e7f6      	b.n	3342 <z_arm_clear_arm_mpu_config+0xe>
    3354:	e000ed00 	.word	0xe000ed00

00003358 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3358:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    335a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    335c:	2300      	movs	r3, #0
    335e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    3362:	f7ff ffe7 	bl	3334 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    3366:	4b14      	ldr	r3, [pc, #80]	; (33b8 <z_arm_init_arch_hw_at_boot+0x60>)
    3368:	f04f 32ff 	mov.w	r2, #4294967295
    336c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    3370:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    3374:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    3378:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    337c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    3380:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    3384:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3388:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    338c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3390:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    3394:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    3398:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    339c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    33a0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    33a4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    33a8:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    33ac:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    33ae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    33b2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    33b6:	bd08      	pop	{r3, pc}
    33b8:	e000e100 	.word	0xe000e100

000033bc <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    33bc:	4b08      	ldr	r3, [pc, #32]	; (33e0 <z_impl_k_thread_abort+0x24>)
    33be:	689b      	ldr	r3, [r3, #8]
    33c0:	4283      	cmp	r3, r0
    33c2:	d10b      	bne.n	33dc <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    33c4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    33c8:	b143      	cbz	r3, 33dc <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    33ca:	4b06      	ldr	r3, [pc, #24]	; (33e4 <z_impl_k_thread_abort+0x28>)
    33cc:	685a      	ldr	r2, [r3, #4]
    33ce:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    33d2:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    33d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    33d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    33da:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    33dc:	f006 b864 	b.w	94a8 <z_thread_abort>
    33e0:	20001904 	.word	0x20001904
    33e4:	e000ed00 	.word	0xe000ed00

000033e8 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    33e8:	4b02      	ldr	r3, [pc, #8]	; (33f4 <z_arm_configure_static_mpu_regions+0xc>)
    33ea:	4a03      	ldr	r2, [pc, #12]	; (33f8 <z_arm_configure_static_mpu_regions+0x10>)
    33ec:	4803      	ldr	r0, [pc, #12]	; (33fc <z_arm_configure_static_mpu_regions+0x14>)
    33ee:	2101      	movs	r1, #1
    33f0:	f000 b890 	b.w	3514 <arm_core_mpu_configure_static_mpu_regions>
    33f4:	20008000 	.word	0x20008000
    33f8:	20000000 	.word	0x20000000
    33fc:	0000bae0 	.word	0x0000bae0

00003400 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    3400:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    3402:	4b05      	ldr	r3, [pc, #20]	; (3418 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    3404:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    3406:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    3408:	4a04      	ldr	r2, [pc, #16]	; (341c <z_arm_configure_dynamic_mpu_regions+0x1c>)
    340a:	2120      	movs	r1, #32
    340c:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    3410:	4618      	mov	r0, r3
    3412:	2101      	movs	r1, #1
    3414:	f000 b888 	b.w	3528 <arm_core_mpu_configure_dynamic_mpu_regions>
    3418:	20000c3c 	.word	0x20000c3c
    341c:	150b0000 	.word	0x150b0000

00003420 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    3422:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 34d8 <mpu_configure_regions+0xb8>
    3426:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    3428:	2500      	movs	r5, #0
    342a:	428d      	cmp	r5, r1
    342c:	da1a      	bge.n	3464 <mpu_configure_regions+0x44>
		if (regions[i].size == 0U) {
    342e:	6844      	ldr	r4, [r0, #4]
    3430:	2c00      	cmp	r4, #0
    3432:	d04d      	beq.n	34d0 <mpu_configure_regions+0xb0>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    3434:	b1fb      	cbz	r3, 3476 <mpu_configure_regions+0x56>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    3436:	f104 3eff 	add.w	lr, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    343a:	ea14 0f0e 	tst.w	r4, lr
    343e:	d014      	beq.n	346a <mpu_configure_regions+0x4a>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    3440:	4b26      	ldr	r3, [pc, #152]	; (34dc <mpu_configure_regions+0xbc>)
    3442:	466c      	mov	r4, sp
    3444:	b088      	sub	sp, #32
    3446:	466a      	mov	r2, sp
    3448:	e9c2 3505 	strd	r3, r5, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    344c:	2303      	movs	r3, #3
    344e:	f842 3f10 	str.w	r3, [r2, #16]!
    3452:	4823      	ldr	r0, [pc, #140]	; (34e0 <mpu_configure_regions+0xc0>)
    3454:	2300      	movs	r3, #0
    3456:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    345a:	f007 f8df 	bl	a61c <z_impl_z_log_msg2_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    345e:	f06f 0215 	mvn.w	r2, #21
    3462:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    3464:	4610      	mov	r0, r2
    3466:	46bd      	mov	sp, r7
    3468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    346a:	2c1f      	cmp	r4, #31
    346c:	d9e8      	bls.n	3440 <mpu_configure_regions+0x20>
		((part->start & (part->size - 1U)) == 0U);
    346e:	6806      	ldr	r6, [r0, #0]
		&&
    3470:	ea1e 0f06 	tst.w	lr, r6
    3474:	d1e4      	bne.n	3440 <mpu_configure_regions+0x20>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    3476:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    3478:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    347a:	f8d0 e008 	ldr.w	lr, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    347e:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    3480:	d914      	bls.n	34ac <mpu_configure_regions+0x8c>
	if (size > (1UL << 31)) {
    3482:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    3486:	d813      	bhi.n	34b0 <mpu_configure_regions+0x90>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3488:	3c01      	subs	r4, #1
    348a:	fab4 f484 	clz	r4, r4
    348e:	f1c4 041f 	rsb	r4, r4, #31
    3492:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    3494:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3496:	ea4e 0404 	orr.w	r4, lr, r4
    349a:	d90b      	bls.n	34b4 <mpu_configure_regions+0x94>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    349c:	4911      	ldr	r1, [pc, #68]	; (34e4 <mpu_configure_regions+0xc4>)
    349e:	466c      	mov	r4, sp
    34a0:	b088      	sub	sp, #32
    34a2:	466b      	mov	r3, sp
    34a4:	e9c3 1205 	strd	r1, r2, [r3, #20]
    34a8:	461a      	mov	r2, r3
    34aa:	e7cf      	b.n	344c <mpu_configure_regions+0x2c>
		return REGION_32B;
    34ac:	2408      	movs	r4, #8
    34ae:	e7f1      	b.n	3494 <mpu_configure_regions+0x74>
		return REGION_4G;
    34b0:	243e      	movs	r4, #62	; 0x3e
    34b2:	e7ef      	b.n	3494 <mpu_configure_regions+0x74>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    34b4:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
    34b8:	4316      	orrs	r6, r2
    34ba:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    34be:	f044 0401 	orr.w	r4, r4, #1
    34c2:	f8cc 2098 	str.w	r2, [ip, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    34c6:	f8cc 609c 	str.w	r6, [ip, #156]	; 0x9c
		reg_index++;
    34ca:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    34cc:	f8cc 40a0 	str.w	r4, [ip, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    34d0:	3501      	adds	r5, #1
    34d2:	300c      	adds	r0, #12
    34d4:	e7a9      	b.n	342a <mpu_configure_regions+0xa>
    34d6:	bf00      	nop
    34d8:	e000ed00 	.word	0xe000ed00
    34dc:	0000c36f 	.word	0x0000c36f
    34e0:	0000b9a4 	.word	0x0000b9a4
    34e4:	0000c392 	.word	0x0000c392

000034e8 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    34e8:	4b04      	ldr	r3, [pc, #16]	; (34fc <arm_core_mpu_enable+0x14>)
    34ea:	2205      	movs	r2, #5
    34ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    34f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    34f4:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    34f8:	4770      	bx	lr
    34fa:	bf00      	nop
    34fc:	e000ed00 	.word	0xe000ed00

00003500 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    3500:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    3504:	4b02      	ldr	r3, [pc, #8]	; (3510 <arm_core_mpu_disable+0x10>)
    3506:	2200      	movs	r2, #0
    3508:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    350c:	4770      	bx	lr
    350e:	bf00      	nop
    3510:	e000ed00 	.word	0xe000ed00

00003514 <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    3514:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    3516:	4c03      	ldr	r4, [pc, #12]	; (3524 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3518:	2301      	movs	r3, #1
    351a:	7822      	ldrb	r2, [r4, #0]
    351c:	f7ff ff80 	bl	3420 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3520:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    3522:	bd10      	pop	{r4, pc}
    3524:	2000196c 	.word	0x2000196c

00003528 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3528:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    352a:	4a09      	ldr	r2, [pc, #36]	; (3550 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    352c:	2300      	movs	r3, #0
    352e:	7812      	ldrb	r2, [r2, #0]
    3530:	f7ff ff76 	bl	3420 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    3534:	f110 0f16 	cmn.w	r0, #22
    3538:	d003      	beq.n	3542 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    353a:	4b06      	ldr	r3, [pc, #24]	; (3554 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    353c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    353e:	2807      	cmp	r0, #7
    3540:	dd00      	ble.n	3544 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    3542:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    3544:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    3548:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    354c:	3001      	adds	r0, #1
    354e:	e7f6      	b.n	353e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    3550:	2000196c 	.word	0x2000196c
    3554:	e000ed00 	.word	0xe000ed00

00003558 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3558:	4914      	ldr	r1, [pc, #80]	; (35ac <z_arm_mpu_init+0x54>)
    355a:	6808      	ldr	r0, [r1, #0]
    355c:	2808      	cmp	r0, #8
{
    355e:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3560:	d821      	bhi.n	35a6 <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    3562:	f7ff ffcd 	bl	3500 <arm_core_mpu_disable>
    3566:	4c12      	ldr	r4, [pc, #72]	; (35b0 <z_arm_mpu_init+0x58>)
    3568:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    356a:	2200      	movs	r2, #0
    356c:	4290      	cmp	r0, r2
    356e:	f101 010c 	add.w	r1, r1, #12
    3572:	d105      	bne.n	3580 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    3574:	4b0f      	ldr	r3, [pc, #60]	; (35b4 <z_arm_mpu_init+0x5c>)
    3576:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    3578:	f7ff ffb6 	bl	34e8 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    357c:	2000      	movs	r0, #0
}
    357e:	bd10      	pop	{r4, pc}
    3580:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3584:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    3588:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    358c:	4313      	orrs	r3, r2
    358e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    3592:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    3596:	f851 3c04 	ldr.w	r3, [r1, #-4]
    359a:	f043 0301 	orr.w	r3, r3, #1
    359e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    35a2:	3201      	adds	r2, #1
    35a4:	e7e2      	b.n	356c <z_arm_mpu_init+0x14>
		return -1;
    35a6:	f04f 30ff 	mov.w	r0, #4294967295
    35aa:	e7e8      	b.n	357e <z_arm_mpu_init+0x26>
    35ac:	0000baec 	.word	0x0000baec
    35b0:	e000ed00 	.word	0xe000ed00
    35b4:	2000196c 	.word	0x2000196c

000035b8 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    35b8:	4b01      	ldr	r3, [pc, #4]	; (35c0 <__stdout_hook_install+0x8>)
    35ba:	6018      	str	r0, [r3, #0]
}
    35bc:	4770      	bx	lr
    35be:	bf00      	nop
    35c0:	2000000c 	.word	0x2000000c

000035c4 <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    35c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    35c8:	b2c0      	uxtb	r0, r0
    35ca:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    35ce:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    35d2:	4905      	ldr	r1, [pc, #20]	; (35e8 <sys_arch_reboot+0x24>)
    35d4:	4b05      	ldr	r3, [pc, #20]	; (35ec <sys_arch_reboot+0x28>)
    35d6:	68ca      	ldr	r2, [r1, #12]
    35d8:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    35dc:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    35de:	60cb      	str	r3, [r1, #12]
    35e0:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    35e4:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    35e6:	e7fd      	b.n	35e4 <sys_arch_reboot+0x20>
    35e8:	e000ed00 	.word	0xe000ed00
    35ec:	05fa0004 	.word	0x05fa0004

000035f0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    35f0:	b120      	cbz	r0, 35fc <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    35f2:	4b03      	ldr	r3, [pc, #12]	; (3600 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    35f4:	0180      	lsls	r0, r0, #6
    35f6:	f043 0301 	orr.w	r3, r3, #1
    35fa:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    35fc:	4770      	bx	lr
    35fe:	bf00      	nop
    3600:	0000ba60 	.word	0x0000ba60

00003604 <hid_status_cb.part.0>:
		break;
	}

}

static void hid_status_cb(struct usb_cfg_data *cfg,
    3604:	b580      	push	{r7, lr}

	LOG_DBG("cfg %p status %d", cfg, status);

	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
	if (common == NULL) {
		LOG_WRN("Device data not found for cfg %p", cfg);
    3606:	4b08      	ldr	r3, [pc, #32]	; (3628 <hid_status_cb.part.0+0x24>)
static void hid_status_cb(struct usb_cfg_data *cfg,
    3608:	af00      	add	r7, sp, #0
		LOG_WRN("Device data not found for cfg %p", cfg);
    360a:	b088      	sub	sp, #32
    360c:	466a      	mov	r2, sp
    360e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    3612:	2303      	movs	r3, #3
    3614:	f842 3f10 	str.w	r3, [r2, #16]!
    3618:	4804      	ldr	r0, [pc, #16]	; (362c <hid_status_cb.part.0+0x28>)
    361a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    361e:	f007 f8e5 	bl	a7ec <z_log_msg2_static_create.constprop.0>
	}

	dev_data = CONTAINER_OF(common, struct hid_device_info, common);

	hid_do_status_cb(dev_data, status, param);
}
    3622:	46bd      	mov	sp, r7
    3624:	bd80      	pop	{r7, pc}
    3626:	bf00      	nop
    3628:	0000c3cb 	.word	0x0000c3cb
    362c:	0000b9f4 	.word	0x0000b9f4

00003630 <hid_status_cb>:
{
    3630:	b570      	push	{r4, r5, r6, lr}
    3632:	4606      	mov	r6, r0
    3634:	b086      	sub	sp, #24
    3636:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
    3638:	4601      	mov	r1, r0
    363a:	4835      	ldr	r0, [pc, #212]	; (3710 <hid_status_cb+0xe0>)
    363c:	f007 f833 	bl	a6a6 <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    3640:	4604      	mov	r4, r0
    3642:	b928      	cbnz	r0, 3650 <hid_status_cb+0x20>
    3644:	4630      	mov	r0, r6
}
    3646:	b006      	add	sp, #24
    3648:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    364c:	f7ff bfda 	b.w	3604 <hid_status_cb.part.0>
	switch (status) {
    3650:	2d0a      	cmp	r5, #10
    3652:	d85a      	bhi.n	370a <hid_status_cb+0xda>
    3654:	e8df f005 	tbb	[pc, r5]
    3658:	23211106 	.word	0x23211106
    365c:	59403432 	.word	0x59403432
    3660:	5959      	.short	0x5959
    3662:	30          	.byte	0x30
    3663:	00          	.byte	0x00
		LOG_INF("Device error");
    3664:	4b2b      	ldr	r3, [pc, #172]	; (3714 <hid_status_cb+0xe4>)
		LOG_INF("Unknown event");
    3666:	9305      	str	r3, [sp, #20]
    3668:	482b      	ldr	r0, [pc, #172]	; (3718 <hid_status_cb+0xe8>)
    366a:	2302      	movs	r3, #2
    366c:	aa04      	add	r2, sp, #16
    366e:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    3672:	9304      	str	r3, [sp, #16]
    3674:	f007 f8ba 	bl	a7ec <z_log_msg2_static_create.constprop.0>
    3678:	e01e      	b.n	36b8 <hid_status_cb+0x88>
		LOG_INF("Device reset detected");
    367a:	4b28      	ldr	r3, [pc, #160]	; (371c <hid_status_cb+0xec>)
		LOG_INF("Device disconnected");
    367c:	9305      	str	r3, [sp, #20]
    367e:	4826      	ldr	r0, [pc, #152]	; (3718 <hid_status_cb+0xe8>)
    3680:	2302      	movs	r3, #2
    3682:	aa04      	add	r2, sp, #16
    3684:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    3688:	9304      	str	r3, [sp, #16]
    368a:	f007 f8af 	bl	a7ec <z_log_msg2_static_create.constprop.0>
		dev_data->configured = false;
    368e:	2300      	movs	r3, #0
    3690:	f804 3c04 	strb.w	r3, [r4, #-4]
			dev_data->suspended = false;
    3694:	f804 3c03 	strb.w	r3, [r4, #-3]
    3698:	e00e      	b.n	36b8 <hid_status_cb+0x88>
		LOG_INF("Device connected");
    369a:	4b21      	ldr	r3, [pc, #132]	; (3720 <hid_status_cb+0xf0>)
    369c:	e7e3      	b.n	3666 <hid_status_cb+0x36>
		LOG_INF("Device configured");
    369e:	4b21      	ldr	r3, [pc, #132]	; (3724 <hid_status_cb+0xf4>)
    36a0:	9305      	str	r3, [sp, #20]
    36a2:	481d      	ldr	r0, [pc, #116]	; (3718 <hid_status_cb+0xe8>)
    36a4:	2302      	movs	r3, #2
    36a6:	aa04      	add	r2, sp, #16
    36a8:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    36ac:	9304      	str	r3, [sp, #16]
    36ae:	f007 f89d 	bl	a7ec <z_log_msg2_static_create.constprop.0>
		dev_data->configured = true;
    36b2:	2301      	movs	r3, #1
    36b4:	f804 3c04 	strb.w	r3, [r4, #-4]
}
    36b8:	b006      	add	sp, #24
    36ba:	bd70      	pop	{r4, r5, r6, pc}
		LOG_INF("Device disconnected");
    36bc:	4b1a      	ldr	r3, [pc, #104]	; (3728 <hid_status_cb+0xf8>)
    36be:	e7dd      	b.n	367c <hid_status_cb+0x4c>
		LOG_INF("Device suspended");
    36c0:	4b1a      	ldr	r3, [pc, #104]	; (372c <hid_status_cb+0xfc>)
    36c2:	9305      	str	r3, [sp, #20]
    36c4:	4814      	ldr	r0, [pc, #80]	; (3718 <hid_status_cb+0xe8>)
    36c6:	2302      	movs	r3, #2
    36c8:	aa04      	add	r2, sp, #16
    36ca:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    36ce:	9304      	str	r3, [sp, #16]
    36d0:	f007 f88c 	bl	a7ec <z_log_msg2_static_create.constprop.0>
		dev_data->suspended = true;
    36d4:	2301      	movs	r3, #1
    36d6:	e7dd      	b.n	3694 <hid_status_cb+0x64>
		LOG_INF("Device resumed");
    36d8:	4b15      	ldr	r3, [pc, #84]	; (3730 <hid_status_cb+0x100>)
    36da:	480f      	ldr	r0, [pc, #60]	; (3718 <hid_status_cb+0xe8>)
    36dc:	9305      	str	r3, [sp, #20]
    36de:	2502      	movs	r5, #2
    36e0:	aa04      	add	r2, sp, #16
    36e2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    36e6:	9504      	str	r5, [sp, #16]
    36e8:	f007 f880 	bl	a7ec <z_log_msg2_static_create.constprop.0>
		if (dev_data->suspended) {
    36ec:	f814 3c03 	ldrb.w	r3, [r4, #-3]
    36f0:	2b00      	cmp	r3, #0
    36f2:	d0e1      	beq.n	36b8 <hid_status_cb+0x88>
			LOG_INF("from suspend");
    36f4:	4b0f      	ldr	r3, [pc, #60]	; (3734 <hid_status_cb+0x104>)
    36f6:	4808      	ldr	r0, [pc, #32]	; (3718 <hid_status_cb+0xe8>)
    36f8:	aa04      	add	r2, sp, #16
    36fa:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    36fe:	e9cd 5304 	strd	r5, r3, [sp, #16]
    3702:	f007 f873 	bl	a7ec <z_log_msg2_static_create.constprop.0>
			dev_data->suspended = false;
    3706:	2300      	movs	r3, #0
    3708:	e7c4      	b.n	3694 <hid_status_cb+0x64>
		LOG_INF("Unknown event");
    370a:	4b0b      	ldr	r3, [pc, #44]	; (3738 <hid_status_cb+0x108>)
    370c:	e7ab      	b.n	3666 <hid_status_cb+0x36>
    370e:	bf00      	nop
    3710:	20000c60 	.word	0x20000c60
    3714:	0000c3ec 	.word	0x0000c3ec
    3718:	0000b9f4 	.word	0x0000b9f4
    371c:	0000c3f9 	.word	0x0000c3f9
    3720:	0000c40f 	.word	0x0000c40f
    3724:	0000c420 	.word	0x0000c420
    3728:	0000c432 	.word	0x0000c432
    372c:	0000c446 	.word	0x0000c446
    3730:	0000c457 	.word	0x0000c457
    3734:	0000c466 	.word	0x0000c466
    3738:	0000c473 	.word	0x0000c473

0000373c <hid_class_handle_req>:

static int hid_class_handle_req(struct usb_setup_packet *setup,
				int32_t *len, uint8_t **data)
{
    373c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3740:	4604      	mov	r4, r0
    3742:	af00      	add	r7, sp, #0
    3744:	4688      	mov	r8, r1

	LOG_DBG("Class request:"
		"bRequest 0x%02x, bmRequestType 0x%02x len %d",
		setup->bRequest, setup->bmRequestType, *len);

	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
    3746:	7901      	ldrb	r1, [r0, #4]
    3748:	4827      	ldr	r0, [pc, #156]	; (37e8 <hid_class_handle_req+0xac>)
{
    374a:	4691      	mov	r9, r2
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
    374c:	f006 ffb7 	bl	a6be <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    3750:	4606      	mov	r6, r0
    3752:	b9a0      	cbnz	r0, 377e <hid_class_handle_req+0x42>
		LOG_WRN("Device data not found for interface %u",
    3754:	88a3      	ldrh	r3, [r4, #4]
    3756:	4925      	ldr	r1, [pc, #148]	; (37ec <hid_class_handle_req+0xb0>)
    3758:	4825      	ldr	r0, [pc, #148]	; (37f0 <hid_class_handle_req+0xb4>)
    375a:	466c      	mov	r4, sp
    375c:	b088      	sub	sp, #32
    375e:	466a      	mov	r2, sp
    3760:	e9c2 1305 	strd	r1, r3, [r2, #20]
    3764:	2303      	movs	r3, #3
    3766:	f842 3f10 	str.w	r3, [r2, #16]!
    376a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    376e:	f007 f83d 	bl	a7ec <z_log_msg2_static_create.constprop.0>
			setup->wIndex);
		return -ENODEV;
    3772:	f06f 0012 	mvn.w	r0, #18
    3776:	46a5      	mov	sp, r4
			break;
		}
	}

	return -ENOTSUP;
}
    3778:	46bd      	mov	sp, r7
    377a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (usb_reqtype_is_to_host(setup)) {
    377e:	f994 3000 	ldrsb.w	r3, [r4]
	dev = common->dev;
    3782:	6800      	ldr	r0, [r0, #0]
		switch (setup->bRequest) {
    3784:	7865      	ldrb	r5, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    3786:	2b00      	cmp	r3, #0
    3788:	da13      	bge.n	37b2 <hid_class_handle_req+0x76>
		switch (setup->bRequest) {
    378a:	2d01      	cmp	r5, #1
    378c:	d005      	beq.n	379a <hid_class_handle_req+0x5e>
    378e:	1eab      	subs	r3, r5, #2
		switch (setup->bRequest) {
    3790:	2b01      	cmp	r3, #1
    3792:	d819      	bhi.n	37c8 <hid_class_handle_req+0x8c>
				return hid_on_get_report(dev_data, setup, len,
    3794:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3798:	e7ee      	b.n	3778 <hid_class_handle_req+0x3c>
			if (dev_data->ops && dev_data->ops->get_report) {
    379a:	f856 3c08 	ldr.w	r3, [r6, #-8]
    379e:	2b00      	cmp	r3, #0
    37a0:	d0f8      	beq.n	3794 <hid_class_handle_req+0x58>
    37a2:	681d      	ldr	r5, [r3, #0]
			if (dev_data->ops && dev_data->ops->set_report) {
    37a4:	2d00      	cmp	r5, #0
    37a6:	d0f5      	beq.n	3794 <hid_class_handle_req+0x58>
				return dev_data->ops->set_report(dev, setup,
    37a8:	464b      	mov	r3, r9
    37aa:	4642      	mov	r2, r8
    37ac:	4621      	mov	r1, r4
    37ae:	47a8      	blx	r5
    37b0:	e7e2      	b.n	3778 <hid_class_handle_req+0x3c>
		switch (setup->bRequest) {
    37b2:	2d09      	cmp	r5, #9
    37b4:	d002      	beq.n	37bc <hid_class_handle_req+0x80>
    37b6:	f1a5 030a 	sub.w	r3, r5, #10
    37ba:	e7e9      	b.n	3790 <hid_class_handle_req+0x54>
			if (dev_data->ops && dev_data->ops->set_report) {
    37bc:	f856 3c08 	ldr.w	r3, [r6, #-8]
    37c0:	2b00      	cmp	r3, #0
    37c2:	d0e7      	beq.n	3794 <hid_class_handle_req+0x58>
    37c4:	685d      	ldr	r5, [r3, #4]
    37c6:	e7ed      	b.n	37a4 <hid_class_handle_req+0x68>
			LOG_ERR("Unhandled request 0x%02x", setup->bRequest);
    37c8:	4b0a      	ldr	r3, [pc, #40]	; (37f4 <hid_class_handle_req+0xb8>)
    37ca:	4809      	ldr	r0, [pc, #36]	; (37f0 <hid_class_handle_req+0xb4>)
    37cc:	466c      	mov	r4, sp
    37ce:	b088      	sub	sp, #32
    37d0:	466a      	mov	r2, sp
    37d2:	e9c2 3505 	strd	r3, r5, [r2, #20]
    37d6:	2303      	movs	r3, #3
    37d8:	f842 3f10 	str.w	r3, [r2, #16]!
    37dc:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    37e0:	f007 f804 	bl	a7ec <z_log_msg2_static_create.constprop.0>
    37e4:	46a5      	mov	sp, r4
    37e6:	e7d5      	b.n	3794 <hid_class_handle_req+0x58>
    37e8:	20000c60 	.word	0x20000c60
    37ec:	0000c481 	.word	0x0000c481
    37f0:	0000b9f4 	.word	0x0000b9f4
    37f4:	0000c4a8 	.word	0x0000c4a8

000037f8 <hid_custom_handle_req>:

static int hid_custom_handle_req(struct usb_setup_packet *setup,
				 int32_t *len, uint8_t **data)
{
    37f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	LOG_DBG("Standard request:"
		"bRequest 0x%02x, bmRequestType 0x%02x, len %d",
		setup->bRequest, setup->bmRequestType, setup->wLength);

	if (usb_reqtype_is_to_host(setup) &&
    37fc:	f990 3000 	ldrsb.w	r3, [r0]
    3800:	2b00      	cmp	r3, #0
{
    3802:	af00      	add	r7, sp, #0
    3804:	4604      	mov	r4, r0
    3806:	460e      	mov	r6, r1
    3808:	4615      	mov	r5, r2
	if (usb_reqtype_is_to_host(setup) &&
    380a:	da20      	bge.n	384e <hid_custom_handle_req+0x56>
	    setup->RequestType.recipient == USB_REQTYPE_RECIPIENT_INTERFACE &&
    380c:	8803      	ldrh	r3, [r0, #0]
    380e:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
    3812:	b29b      	uxth	r3, r3
    3814:	f240 6201 	movw	r2, #1537	; 0x601
    3818:	4293      	cmp	r3, r2
    381a:	d118      	bne.n	384e <hid_custom_handle_req+0x56>
	    setup->bRequest == USB_SREQ_GET_DESCRIPTOR) {
		uint8_t value = (uint8_t)(setup->wValue >> 8);
		uint8_t iface_num = (uint8_t)setup->wIndex;
    381c:	f890 9004 	ldrb.w	r9, [r0, #4]
		uint8_t value = (uint8_t)(setup->wValue >> 8);
    3820:	8843      	ldrh	r3, [r0, #2]
		struct hid_device_info *dev_data;
		struct usb_dev_data *common;
		const struct usb_cfg_data *cfg;
		const struct usb_hid_config *hid_desc;

		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
    3822:	481d      	ldr	r0, [pc, #116]	; (3898 <hid_custom_handle_req+0xa0>)
    3824:	4649      	mov	r1, r9
		uint8_t value = (uint8_t)(setup->wValue >> 8);
    3826:	ea4f 2a13 	mov.w	sl, r3, lsr #8
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
    382a:	f006 ff48 	bl	a6be <usb_get_dev_data_by_iface>
		if (common == NULL) {
    382e:	b988      	cbnz	r0, 3854 <hid_custom_handle_req+0x5c>
			LOG_WRN("Device data not found for interface %u",
    3830:	4b1a      	ldr	r3, [pc, #104]	; (389c <hid_custom_handle_req+0xa4>)
    3832:	481b      	ldr	r0, [pc, #108]	; (38a0 <hid_custom_handle_req+0xa8>)
    3834:	466c      	mov	r4, sp
    3836:	b088      	sub	sp, #32
    3838:	466a      	mov	r2, sp
    383a:	e9c2 3905 	strd	r3, r9, [r2, #20]
    383e:	2303      	movs	r3, #3
    3840:	f842 3f10 	str.w	r3, [r2, #16]!
    3844:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    3848:	f006 ffd0 	bl	a7ec <z_log_msg2_static_create.constprop.0>
    384c:	46a5      	mov	sp, r4
		}

		return 0;
	}

	return -EINVAL;
    384e:	f06f 0015 	mvn.w	r0, #21
    3852:	e007      	b.n	3864 <hid_custom_handle_req+0x6c>
		switch (value) {
    3854:	f1ba 0f21 	cmp.w	sl, #33	; 0x21
    3858:	d007      	beq.n	386a <hid_custom_handle_req+0x72>
    385a:	f1ba 0f22 	cmp.w	sl, #34	; 0x22
    385e:	d011      	beq.n	3884 <hid_custom_handle_req+0x8c>
    3860:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    3864:	46bd      	mov	sp, r7
    3866:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cfg = common->dev->config;
    386a:	6803      	ldr	r3, [r0, #0]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
    386c:	88e1      	ldrh	r1, [r4, #6]
			hid_desc = cfg->interface_descriptor;
    386e:	685b      	ldr	r3, [r3, #4]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
    3870:	685b      	ldr	r3, [r3, #4]
    3872:	f813 2f09 	ldrb.w	r2, [r3, #9]!
    3876:	4291      	cmp	r1, r2
    3878:	bf94      	ite	ls
    387a:	6031      	strls	r1, [r6, #0]
    387c:	6032      	strhi	r2, [r6, #0]
			*data = (uint8_t *)dev_data->report_desc;
    387e:	602b      	str	r3, [r5, #0]
		return 0;
    3880:	2000      	movs	r0, #0
			break;
    3882:	e7ef      	b.n	3864 <hid_custom_handle_req+0x6c>
			*len = MIN(setup->wLength, dev_data->report_size);
    3884:	88e3      	ldrh	r3, [r4, #6]
    3886:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    388a:	429a      	cmp	r2, r3
    388c:	bf94      	ite	ls
    388e:	6032      	strls	r2, [r6, #0]
    3890:	6033      	strhi	r3, [r6, #0]
			*data = (uint8_t *)dev_data->report_desc;
    3892:	f850 3c10 	ldr.w	r3, [r0, #-16]
    3896:	e7f2      	b.n	387e <hid_custom_handle_req+0x86>
    3898:	20000c60 	.word	0x20000c60
    389c:	0000c481 	.word	0x0000c481
    38a0:	0000b9f4 	.word	0x0000b9f4

000038a4 <hid_int_in.part.0>:

static void hid_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
    38a4:	b580      	push	{r7, lr}
	struct hid_device_info *dev_data;
	struct usb_dev_data *common;

	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
	if (common == NULL) {
		LOG_WRN("Device data not found for endpoint %u", ep);
    38a6:	4b08      	ldr	r3, [pc, #32]	; (38c8 <hid_int_in.part.0+0x24>)
static void hid_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
    38a8:	af00      	add	r7, sp, #0
		LOG_WRN("Device data not found for endpoint %u", ep);
    38aa:	b088      	sub	sp, #32
    38ac:	466a      	mov	r2, sp
    38ae:	e9c2 3005 	strd	r3, r0, [r2, #20]
    38b2:	2303      	movs	r3, #3
    38b4:	f842 3f10 	str.w	r3, [r2, #16]!
    38b8:	4804      	ldr	r0, [pc, #16]	; (38cc <hid_int_in.part.0+0x28>)
    38ba:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    38be:	f006 ff95 	bl	a7ec <z_log_msg2_static_create.constprop.0>
	    dev_data->ops->int_in_ready == NULL) {
		return;
	}

	dev_data->ops->int_in_ready(common->dev);
}
    38c2:	46bd      	mov	sp, r7
    38c4:	bd80      	pop	{r7, pc}
    38c6:	bf00      	nop
    38c8:	0000c4c1 	.word	0x0000c4c1
    38cc:	0000b9f4 	.word	0x0000b9f4

000038d0 <hid_int_in>:
{
    38d0:	b570      	push	{r4, r5, r6, lr}
    38d2:	4604      	mov	r4, r0
    38d4:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
    38d6:	4601      	mov	r1, r0
    38d8:	480a      	ldr	r0, [pc, #40]	; (3904 <hid_int_in+0x34>)
    38da:	f006 fefe 	bl	a6da <usb_get_dev_data_by_ep>
	if (common == NULL) {
    38de:	b920      	cbnz	r0, 38ea <hid_int_in+0x1a>
    38e0:	4620      	mov	r0, r4
}
    38e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    38e6:	f7ff bfdd 	b.w	38a4 <hid_int_in.part.0>
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
    38ea:	2d02      	cmp	r5, #2
    38ec:	d108      	bne.n	3900 <hid_int_in+0x30>
    38ee:	f850 3c08 	ldr.w	r3, [r0, #-8]
    38f2:	b12b      	cbz	r3, 3900 <hid_int_in+0x30>
	    dev_data->ops->int_in_ready == NULL) {
    38f4:	691b      	ldr	r3, [r3, #16]
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
    38f6:	b11b      	cbz	r3, 3900 <hid_int_in+0x30>
}
    38f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	dev_data->ops->int_in_ready(common->dev);
    38fc:	6800      	ldr	r0, [r0, #0]
    38fe:	4718      	bx	r3
}
    3900:	bd70      	pop	{r4, r5, r6, pc}
    3902:	bf00      	nop
    3904:	20000c60 	.word	0x20000c60

00003908 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    3908:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    390c:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
    390e:	b242      	sxtb	r2, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    3910:	d004      	beq.n	391c <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
    3912:	f010 0f78 	tst.w	r0, #120	; 0x78
    3916:	d001      	beq.n	391c <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
    3918:	2000      	movs	r0, #0
    391a:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    391c:	2a00      	cmp	r2, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
    391e:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
    3922:	f000 0008 	and.w	r0, r0, #8
    3926:	da05      	bge.n	3934 <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3928:	b958      	cbnz	r0, 3942 <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
    392a:	4808      	ldr	r0, [pc, #32]	; (394c <endpoint_ctx+0x44>)
    392c:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    3930:	304c      	adds	r0, #76	; 0x4c
    3932:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3934:	b938      	cbnz	r0, 3946 <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    3936:	4805      	ldr	r0, [pc, #20]	; (394c <endpoint_ctx+0x44>)
    3938:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    393c:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
    3940:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    3942:	4803      	ldr	r0, [pc, #12]	; (3950 <endpoint_ctx+0x48>)
    3944:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    3946:	4803      	ldr	r0, [pc, #12]	; (3954 <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
    3948:	4770      	bx	lr
    394a:	bf00      	nop
    394c:	20001268 	.word	0x20001268
    3950:	200013b4 	.word	0x200013b4
    3954:	200014d4 	.word	0x200014d4

00003958 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    3958:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    395a:	4801      	ldr	r0, [pc, #4]	; (3960 <usbd_evt_put+0x8>)
    395c:	f007 bc42 	b.w	b1e4 <k_queue_append>
    3960:	20000190 	.word	0x20000190

00003964 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    3964:	4901      	ldr	r1, [pc, #4]	; (396c <usbd_work_schedule+0x8>)
    3966:	4802      	ldr	r0, [pc, #8]	; (3970 <usbd_work_schedule+0xc>)
    3968:	f007 bc8d 	b.w	b286 <k_work_submit_to_queue>
    396c:	20001290 	.word	0x20001290
    3970:	20000700 	.word	0x20000700

00003974 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    3974:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    3976:	480b      	ldr	r0, [pc, #44]	; (39a4 <usb_init+0x30>)
    3978:	f003 fa64 	bl	6e44 <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    397c:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    397e:	480a      	ldr	r0, [pc, #40]	; (39a8 <usb_init+0x34>)
    3980:	f003 fa8a 	bl	6e98 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    3984:	f04f 33ff 	mov.w	r3, #4294967295
    3988:	f44f 6280 	mov.w	r2, #1024	; 0x400
    398c:	4907      	ldr	r1, [pc, #28]	; (39ac <usb_init+0x38>)
    398e:	4808      	ldr	r0, [pc, #32]	; (39b0 <usb_init+0x3c>)
    3990:	9400      	str	r4, [sp, #0]
    3992:	f005 fa29 	bl	8de8 <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
    3996:	4907      	ldr	r1, [pc, #28]	; (39b4 <usb_init+0x40>)
    3998:	4807      	ldr	r0, [pc, #28]	; (39b8 <usb_init+0x44>)
    399a:	f007 fc6b 	bl	b274 <k_work_init>

	return 0;
}
    399e:	4620      	mov	r0, r4
    39a0:	b002      	add	sp, #8
    39a2:	bd10      	pop	{r4, pc}
    39a4:	0000c6b8 	.word	0x0000c6b8
    39a8:	0000bb10 	.word	0x0000bb10
    39ac:	200020c0 	.word	0x200020c0
    39b0:	20000700 	.word	0x20000700
    39b4:	00003da5 	.word	0x00003da5
    39b8:	20001290 	.word	0x20001290

000039bc <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    39bc:	4802      	ldr	r0, [pc, #8]	; (39c8 <usbd_evt_get+0xc>)
    39be:	2200      	movs	r2, #0
    39c0:	2300      	movs	r3, #0
    39c2:	f005 b88f 	b.w	8ae4 <z_impl_k_queue_get>
    39c6:	bf00      	nop
    39c8:	20000190 	.word	0x20000190

000039cc <usbd_evt_flush>:
{
    39cc:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    39ce:	4c05      	ldr	r4, [pc, #20]	; (39e4 <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
    39d0:	f7ff fff4 	bl	39bc <usbd_evt_get>
		if (ev) {
    39d4:	b120      	cbz	r0, 39e0 <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    39d6:	1d01      	adds	r1, r0, #4
    39d8:	4620      	mov	r0, r4
    39da:	f007 fb4b 	bl	b074 <k_mem_slab_free>
	} while (ev != NULL);
    39de:	e7f7      	b.n	39d0 <usbd_evt_flush+0x4>
}
    39e0:	bd10      	pop	{r4, pc}
    39e2:	bf00      	nop
    39e4:	20000150 	.word	0x20000150

000039e8 <usbd_evt_alloc>:
{
    39e8:	b510      	push	{r4, lr}
    39ea:	b088      	sub	sp, #32
	if (k_mem_slab_alloc(&fifo_elem_slab,
    39ec:	4818      	ldr	r0, [pc, #96]	; (3a50 <usbd_evt_alloc+0x68>)
    39ee:	2200      	movs	r2, #0
    39f0:	2300      	movs	r3, #0
    39f2:	a901      	add	r1, sp, #4
    39f4:	f004 feb8 	bl	8768 <k_mem_slab_alloc>
    39f8:	b330      	cbz	r0, 3a48 <usbd_evt_alloc+0x60>
		LOG_ERR("USBD event allocation failed!");
    39fa:	4b16      	ldr	r3, [pc, #88]	; (3a54 <usbd_evt_alloc+0x6c>)
    39fc:	4816      	ldr	r0, [pc, #88]	; (3a58 <usbd_evt_alloc+0x70>)
    39fe:	9307      	str	r3, [sp, #28]
    3a00:	aa06      	add	r2, sp, #24
    3a02:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3a06:	2402      	movs	r4, #2
    3a08:	9406      	str	r4, [sp, #24]
    3a0a:	f006 ff05 	bl	a818 <z_log_msg2_static_create.constprop.0>
		usbd_evt_flush();
    3a0e:	f7ff ffdd 	bl	39cc <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    3a12:	480f      	ldr	r0, [pc, #60]	; (3a50 <usbd_evt_alloc+0x68>)
    3a14:	2200      	movs	r2, #0
    3a16:	2300      	movs	r3, #0
    3a18:	a901      	add	r1, sp, #4
    3a1a:	f004 fea5 	bl	8768 <k_mem_slab_alloc>
    3a1e:	b150      	cbz	r0, 3a36 <usbd_evt_alloc+0x4e>
			LOG_ERR("USBD event memory corrupted");
    3a20:	4b0e      	ldr	r3, [pc, #56]	; (3a5c <usbd_evt_alloc+0x74>)
    3a22:	480d      	ldr	r0, [pc, #52]	; (3a58 <usbd_evt_alloc+0x70>)
    3a24:	aa06      	add	r2, sp, #24
    3a26:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3a2a:	e9cd 4306 	strd	r4, r3, [sp, #24]
    3a2e:	f006 fef3 	bl	a818 <z_log_msg2_static_create.constprop.0>
			return NULL;
    3a32:	2000      	movs	r0, #0
    3a34:	e00a      	b.n	3a4c <usbd_evt_alloc+0x64>
		ev = (struct usbd_event *)block.data;
    3a36:	9801      	ldr	r0, [sp, #4]
		ev->evt_type = USBD_EVT_REINIT;
    3a38:	2304      	movs	r3, #4
		ev->block = block;
    3a3a:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    3a3c:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    3a3e:	f7ff ff8b 	bl	3958 <usbd_evt_put>
		usbd_work_schedule();
    3a42:	f7ff ff8f 	bl	3964 <usbd_work_schedule>
		return NULL;
    3a46:	e7f4      	b.n	3a32 <usbd_evt_alloc+0x4a>
	ev = (struct usbd_event *)block.data;
    3a48:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    3a4a:	6040      	str	r0, [r0, #4]
}
    3a4c:	b008      	add	sp, #32
    3a4e:	bd10      	pop	{r4, pc}
    3a50:	20000150 	.word	0x20000150
    3a54:	0000c4f5 	.word	0x0000c4f5
    3a58:	0000b9fc 	.word	0x0000b9fc
    3a5c:	0000c513 	.word	0x0000c513

00003a60 <usbd_event_transfer_data>:
{
    3a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		endpoint_ctx(p_event->data.eptransfer.ep);
    3a62:	7881      	ldrb	r1, [r0, #2]
{
    3a64:	4606      	mov	r6, r0
    3a66:	af00      	add	r7, sp, #0
		endpoint_ctx(p_event->data.eptransfer.ep);
    3a68:	4608      	mov	r0, r1
    3a6a:	f7ff ff4d 	bl	3908 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3a6e:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
    3a70:	78f4      	ldrb	r4, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    3a72:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3a74:	d523      	bpl.n	3abe <usbd_event_transfer_data+0x5e>
		switch (p_event->data.eptransfer.status) {
    3a76:	b194      	cbz	r4, 3a9e <usbd_event_transfer_data+0x3e>
    3a78:	2c03      	cmp	r4, #3
    3a7a:	d01e      	beq.n	3aba <usbd_event_transfer_data+0x5a>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    3a7c:	4b2a      	ldr	r3, [pc, #168]	; (3b28 <usbd_event_transfer_data+0xc8>)
    3a7e:	482b      	ldr	r0, [pc, #172]	; (3b2c <usbd_event_transfer_data+0xcc>)
    3a80:	466d      	mov	r5, sp
    3a82:	b088      	sub	sp, #32
    3a84:	466a      	mov	r2, sp
    3a86:	e9c2 3405 	strd	r3, r4, [r2, #20]
    3a8a:	2304      	movs	r3, #4
    3a8c:	61d1      	str	r1, [r2, #28]
    3a8e:	f842 3f10 	str.w	r3, [r2, #16]!
    3a92:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    3a96:	f006 febf 	bl	a818 <z_log_msg2_static_create.constprop.0>
    3a9a:	46ad      	mov	sp, r5
    3a9c:	e00d      	b.n	3aba <usbd_event_transfer_data+0x5a>
			struct usbd_event *ev = usbd_evt_alloc();
    3a9e:	f7ff ffa3 	bl	39e8 <usbd_evt_alloc>
			if (!ev) {
    3aa2:	4603      	mov	r3, r0
    3aa4:	b148      	cbz	r0, 3aba <usbd_event_transfer_data+0x5a>
			ev->evt_type = USBD_EVT_EP;
    3aa6:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    3aa8:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    3aaa:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    3aac:	2203      	movs	r2, #3
    3aae:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    3ab0:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
    3ab2:	f7ff ff51 	bl	3958 <usbd_evt_put>
			usbd_work_schedule();
    3ab6:	f7ff ff55 	bl	3964 <usbd_work_schedule>
}
    3aba:	46bd      	mov	sp, r7
    3abc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (p_event->data.eptransfer.status) {
    3abe:	b154      	cbz	r4, 3ad6 <usbd_event_transfer_data+0x76>
    3ac0:	2c01      	cmp	r4, #1
    3ac2:	d1db      	bne.n	3a7c <usbd_event_transfer_data+0x1c>
			struct usbd_event *ev = usbd_evt_alloc();
    3ac4:	f7ff ff90 	bl	39e8 <usbd_evt_alloc>
			if (!ev) {
    3ac8:	4603      	mov	r3, r0
    3aca:	2800      	cmp	r0, #0
    3acc:	d0f5      	beq.n	3aba <usbd_event_transfer_data+0x5a>
			ep_ctx->read_pending = true;
    3ace:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    3ad0:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    3ad2:	7304      	strb	r4, [r0, #12]
    3ad4:	e7ec      	b.n	3ab0 <usbd_event_transfer_data+0x50>
			struct usbd_event *ev = usbd_evt_alloc();
    3ad6:	f7ff ff87 	bl	39e8 <usbd_evt_alloc>
			if (!ev) {
    3ada:	2800      	cmp	r0, #0
    3adc:	d0ed      	beq.n	3aba <usbd_event_transfer_data+0x5a>
				p_event->data.eptransfer.ep);
    3ade:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    3ae0:	4b13      	ldr	r3, [pc, #76]	; (3b30 <usbd_event_transfer_data+0xd0>)
    3ae2:	f012 0f80 	tst.w	r2, #128	; 0x80
    3ae6:	f002 0108 	and.w	r1, r2, #8
    3aea:	d011      	beq.n	3b10 <usbd_event_transfer_data+0xb0>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    3aec:	b141      	cbz	r1, 3b00 <usbd_event_transfer_data+0xa0>
        {
            ret = p_reg->ISOIN.AMOUNT;
    3aee:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    3af2:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    3af4:	2301      	movs	r3, #1
    3af6:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    3af8:	2302      	movs	r3, #2
    3afa:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    3afc:	6085      	str	r5, [r0, #8]
    3afe:	e7d8      	b.n	3ab2 <usbd_event_transfer_data+0x52>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    3b00:	f002 020f 	and.w	r2, r2, #15
    3b04:	2114      	movs	r1, #20
    3b06:	fb01 3302 	mla	r3, r1, r2, r3
    3b0a:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3b0e:	e7f0      	b.n	3af2 <usbd_event_transfer_data+0x92>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    3b10:	b111      	cbz	r1, 3b18 <usbd_event_transfer_data+0xb8>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    3b12:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    3b16:	e7ec      	b.n	3af2 <usbd_event_transfer_data+0x92>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    3b18:	f002 020f 	and.w	r2, r2, #15
    3b1c:	2114      	movs	r1, #20
    3b1e:	fb01 3302 	mla	r3, r1, r2, r3
    3b22:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    3b26:	e7e4      	b.n	3af2 <usbd_event_transfer_data+0x92>
    3b28:	0000c52f 	.word	0x0000c52f
    3b2c:	0000b9fc 	.word	0x0000b9fc
    3b30:	40027000 	.word	0x40027000

00003b34 <usb_dc_power_event_handler>:
{
    3b34:	b598      	push	{r3, r4, r7, lr}
    3b36:	2802      	cmp	r0, #2
    3b38:	af00      	add	r7, sp, #0
    3b3a:	d811      	bhi.n	3b60 <usb_dc_power_event_handler+0x2c>
    3b3c:	4b10      	ldr	r3, [pc, #64]	; (3b80 <usb_dc_power_event_handler+0x4c>)
    3b3e:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    3b40:	f7ff ff52 	bl	39e8 <usbd_evt_alloc>
	if (!ev) {
    3b44:	b150      	cbz	r0, 3b5c <usb_dc_power_event_handler+0x28>
	ev->evt_type = USBD_EVT_POWER;
    3b46:	2200      	movs	r2, #0
    3b48:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    3b4a:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    3b4c:	f7ff ff04 	bl	3958 <usbd_evt_put>
	if (usbd_ctx.attached) {
    3b50:	4b0c      	ldr	r3, [pc, #48]	; (3b84 <usb_dc_power_event_handler+0x50>)
    3b52:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    3b56:	b10b      	cbz	r3, 3b5c <usb_dc_power_event_handler+0x28>
		usbd_work_schedule();
    3b58:	f7ff ff04 	bl	3964 <usbd_work_schedule>
}
    3b5c:	46bd      	mov	sp, r7
    3b5e:	bd98      	pop	{r3, r4, r7, pc}
		LOG_ERR("Unknown USB power event %d", event);
    3b60:	4b09      	ldr	r3, [pc, #36]	; (3b88 <usb_dc_power_event_handler+0x54>)
    3b62:	466c      	mov	r4, sp
    3b64:	b088      	sub	sp, #32
    3b66:	466a      	mov	r2, sp
	switch (event) {
    3b68:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Unknown USB power event %d", event);
    3b6c:	2303      	movs	r3, #3
    3b6e:	f842 3f10 	str.w	r3, [r2, #16]!
    3b72:	4806      	ldr	r0, [pc, #24]	; (3b8c <usb_dc_power_event_handler+0x58>)
    3b74:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3b78:	f006 fe4e 	bl	a818 <z_log_msg2_static_create.constprop.0>
    3b7c:	46a5      	mov	sp, r4
    3b7e:	e7ed      	b.n	3b5c <usb_dc_power_event_handler+0x28>
    3b80:	0000c6b5 	.word	0x0000c6b5
    3b84:	20001268 	.word	0x20001268
    3b88:	0000c55b 	.word	0x0000c55b
    3b8c:	0000b9fc 	.word	0x0000b9fc

00003b90 <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    3b90:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3b92:	490f      	ldr	r1, [pc, #60]	; (3bd0 <hfxo_stop.constprop.0.isra.0+0x40>)
    3b94:	f3bf 8f5b 	dmb	ish
    3b98:	f101 0320 	add.w	r3, r1, #32
    3b9c:	2200      	movs	r2, #0
    3b9e:	e853 0f00 	ldrex	r0, [r3]
    3ba2:	2801      	cmp	r0, #1
    3ba4:	d103      	bne.n	3bae <hfxo_stop.constprop.0.isra.0+0x1e>
    3ba6:	e843 2400 	strex	r4, r2, [r3]
    3baa:	2c00      	cmp	r4, #0
    3bac:	d1f7      	bne.n	3b9e <hfxo_stop.constprop.0.isra.0+0xe>
    3bae:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    3bb2:	d10b      	bne.n	3bcc <hfxo_stop.constprop.0.isra.0+0x3c>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    3bb4:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    3bb6:	310c      	adds	r1, #12
    3bb8:	4620      	mov	r0, r4
    3bba:	f006 f866 	bl	9c8a <onoff_cancel>

	if (rv == -EALREADY) {
    3bbe:	3078      	adds	r0, #120	; 0x78
    3bc0:	d104      	bne.n	3bcc <hfxo_stop.constprop.0.isra.0+0x3c>
		rv = onoff_release(mgr);
    3bc2:	4620      	mov	r0, r4
}
    3bc4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3bc8:	f006 b83a 	b.w	9c40 <onoff_release>
    3bcc:	bd10      	pop	{r4, pc}
    3bce:	bf00      	nop
    3bd0:	20001268 	.word	0x20001268

00003bd4 <usbd_event_handler>:
{
    3bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
    3bd6:	b089      	sub	sp, #36	; 0x24
    3bd8:	4606      	mov	r6, r0
    3bda:	af00      	add	r7, sp, #0
	struct usbd_event evt = {0};
    3bdc:	2214      	movs	r2, #20
    3bde:	2100      	movs	r1, #0
    3be0:	f107 000c 	add.w	r0, r7, #12
    3be4:	f006 fdd2 	bl	a78c <memset>
	switch (p_event->type) {
    3be8:	7833      	ldrb	r3, [r6, #0]
    3bea:	3b01      	subs	r3, #1
    3bec:	2b05      	cmp	r3, #5
    3bee:	d820      	bhi.n	3c32 <usbd_event_handler+0x5e>
    3bf0:	e8df f003 	tbb	[pc, r3]
    3bf4:	13130397 	.word	0x13130397
    3bf8:	1589      	.short	0x1589
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    3bfa:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
    3bfc:	753b      	strb	r3, [r7, #20]
		evt.evt_type = USBD_EVT_POWER;
    3bfe:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
    3c00:	f7ff fef2 	bl	39e8 <usbd_evt_alloc>
		if (!ev) {
    3c04:	4603      	mov	r3, r0
    3c06:	b1a0      	cbz	r0, 3c32 <usbd_event_handler+0x5e>
		ev->evt_type = evt.evt_type;
    3c08:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    3c0a:	f100 0208 	add.w	r2, r0, #8
    3c0e:	e9d7 0105 	ldrd	r0, r1, [r7, #20]
    3c12:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    3c16:	4618      	mov	r0, r3
    3c18:	e030      	b.n	3c7c <usbd_event_handler+0xa8>
		evt.evt.pwr_evt.state = USBD_RESUMED;
    3c1a:	2304      	movs	r3, #4
    3c1c:	e7ee      	b.n	3bfc <usbd_event_handler+0x28>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    3c1e:	78b1      	ldrb	r1, [r6, #2]
    3c20:	4608      	mov	r0, r1
    3c22:	f7ff fe71 	bl	3908 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    3c26:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    3c28:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
    3c2a:	b12b      	cbz	r3, 3c38 <usbd_event_handler+0x64>
    3c2c:	3b01      	subs	r3, #1
    3c2e:	2b02      	cmp	r3, #2
    3c30:	d965      	bls.n	3cfe <usbd_event_handler+0x12a>
}
    3c32:	3724      	adds	r7, #36	; 0x24
    3c34:	46bd      	mov	sp, r7
    3c36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3c38:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
    3c3a:	78f4      	ldrb	r4, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3c3c:	d523      	bpl.n	3c86 <usbd_event_handler+0xb2>
		switch (p_event->data.eptransfer.status) {
    3c3e:	b194      	cbz	r4, 3c66 <usbd_event_handler+0x92>
    3c40:	2c03      	cmp	r4, #3
    3c42:	d0f6      	beq.n	3c32 <usbd_event_handler+0x5e>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    3c44:	4b38      	ldr	r3, [pc, #224]	; (3d28 <usbd_event_handler+0x154>)
    3c46:	4839      	ldr	r0, [pc, #228]	; (3d2c <usbd_event_handler+0x158>)
    3c48:	466d      	mov	r5, sp
    3c4a:	b088      	sub	sp, #32
    3c4c:	466a      	mov	r2, sp
    3c4e:	e9c2 3405 	strd	r3, r4, [r2, #20]
    3c52:	2304      	movs	r3, #4
    3c54:	61d1      	str	r1, [r2, #28]
    3c56:	f842 3f10 	str.w	r3, [r2, #16]!
    3c5a:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    3c5e:	f006 fddb 	bl	a818 <z_log_msg2_static_create.constprop.0>
    3c62:	46ad      	mov	sp, r5
    3c64:	e7e5      	b.n	3c32 <usbd_event_handler+0x5e>
			struct usbd_event *ev = usbd_evt_alloc();
    3c66:	f7ff febf 	bl	39e8 <usbd_evt_alloc>
			if (!ev) {
    3c6a:	4603      	mov	r3, r0
    3c6c:	2800      	cmp	r0, #0
    3c6e:	d0e0      	beq.n	3c32 <usbd_event_handler+0x5e>
			ev->evt_type = USBD_EVT_EP;
    3c70:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    3c72:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    3c74:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    3c76:	2203      	movs	r2, #3
    3c78:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    3c7a:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
    3c7c:	f7ff fe6c 	bl	3958 <usbd_evt_put>
		usbd_work_schedule();
    3c80:	f7ff fe70 	bl	3964 <usbd_work_schedule>
    3c84:	e7d5      	b.n	3c32 <usbd_event_handler+0x5e>
		switch (p_event->data.eptransfer.status) {
    3c86:	b154      	cbz	r4, 3c9e <usbd_event_handler+0xca>
    3c88:	2c01      	cmp	r4, #1
    3c8a:	d1db      	bne.n	3c44 <usbd_event_handler+0x70>
			struct usbd_event *ev = usbd_evt_alloc();
    3c8c:	f7ff feac 	bl	39e8 <usbd_evt_alloc>
			if (!ev) {
    3c90:	4603      	mov	r3, r0
    3c92:	2800      	cmp	r0, #0
    3c94:	d0cd      	beq.n	3c32 <usbd_event_handler+0x5e>
			ep_ctx->read_pending = true;
    3c96:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    3c98:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    3c9a:	7304      	strb	r4, [r0, #12]
    3c9c:	e7ed      	b.n	3c7a <usbd_event_handler+0xa6>
			struct usbd_event *ev = usbd_evt_alloc();
    3c9e:	f7ff fea3 	bl	39e8 <usbd_evt_alloc>
			if (!ev) {
    3ca2:	4604      	mov	r4, r0
    3ca4:	2800      	cmp	r0, #0
    3ca6:	d0c4      	beq.n	3c32 <usbd_event_handler+0x5e>
			ev->evt_type = USBD_EVT_EP;
    3ca8:	2301      	movs	r3, #1
    3caa:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    3cac:	2302      	movs	r3, #2
    3cae:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    3cb0:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    3cb2:	f105 010c 	add.w	r1, r5, #12
    3cb6:	78b0      	ldrb	r0, [r6, #2]
    3cb8:	f007 f94a 	bl	af50 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    3cbc:	b170      	cbz	r0, 3cdc <usbd_event_handler+0x108>
				LOG_ERR("_ep_status_get failed! Code: %d",
    3cbe:	4b1c      	ldr	r3, [pc, #112]	; (3d30 <usbd_event_handler+0x15c>)
    3cc0:	466e      	mov	r6, sp
    3cc2:	b088      	sub	sp, #32
    3cc4:	466a      	mov	r2, sp
    3cc6:	e9c2 3005 	strd	r3, r0, [r2, #20]
    3cca:	2303      	movs	r3, #3
    3ccc:	f842 3f10 	str.w	r3, [r2, #16]!
    3cd0:	4816      	ldr	r0, [pc, #88]	; (3d2c <usbd_event_handler+0x158>)
    3cd2:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3cd6:	f006 fd9f 	bl	a818 <z_log_msg2_static_create.constprop.0>
    3cda:	46b5      	mov	sp, r6
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    3cdc:	4a15      	ldr	r2, [pc, #84]	; (3d34 <usbd_event_handler+0x160>)
    3cde:	68e9      	ldr	r1, [r5, #12]
    3ce0:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    3ce4:	428b      	cmp	r3, r1
    3ce6:	d906      	bls.n	3cf6 <usbd_event_handler+0x122>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    3ce8:	1a5b      	subs	r3, r3, r1
    3cea:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    3cee:	f004 f855 	bl	7d9c <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    3cf2:	4620      	mov	r0, r4
    3cf4:	e7c2      	b.n	3c7c <usbd_event_handler+0xa8>
				ctx->ctrl_read_len = 0U;
    3cf6:	2300      	movs	r3, #0
    3cf8:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
    3cfc:	e7f9      	b.n	3cf2 <usbd_event_handler+0x11e>
			usbd_event_transfer_data(p_event);
    3cfe:	4630      	mov	r0, r6
    3d00:	f7ff feae 	bl	3a60 <usbd_event_transfer_data>
	if (put_evt) {
    3d04:	e795      	b.n	3c32 <usbd_event_handler+0x5e>
		nrfx_usbd_setup_get(&drv_setup);
    3d06:	1d38      	adds	r0, r7, #4
    3d08:	f004 f822 	bl	7d50 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    3d0c:	797b      	ldrb	r3, [r7, #5]
    3d0e:	2b05      	cmp	r3, #5
    3d10:	d103      	bne.n	3d1a <usbd_event_handler+0x146>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    3d12:	793b      	ldrb	r3, [r7, #4]
    3d14:	f013 0f60 	tst.w	r3, #96	; 0x60
    3d18:	d08b      	beq.n	3c32 <usbd_event_handler+0x5e>
			evt.evt.ep_evt.ep = ep_ctx;
    3d1a:	4b07      	ldr	r3, [pc, #28]	; (3d38 <usbd_event_handler+0x164>)
    3d1c:	617b      	str	r3, [r7, #20]
			evt.evt_type = USBD_EVT_EP;
    3d1e:	2401      	movs	r4, #1
    3d20:	e76e      	b.n	3c00 <usbd_event_handler+0x2c>
	switch (p_event->type) {
    3d22:	2402      	movs	r4, #2
    3d24:	e76c      	b.n	3c00 <usbd_event_handler+0x2c>
    3d26:	bf00      	nop
    3d28:	0000c52f 	.word	0x0000c52f
    3d2c:	0000b9fc 	.word	0x0000b9fc
    3d30:	0000c576 	.word	0x0000c576
    3d34:	20001268 	.word	0x20001268
    3d38:	200013d4 	.word	0x200013d4

00003d3c <eps_ctx_init>:
{
    3d3c:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    3d3e:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    3d40:	f064 007f 	orn	r0, r4, #127	; 0x7f
    3d44:	b2c0      	uxtb	r0, r0
    3d46:	f7ff fddf 	bl	3908 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    3d4a:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    3d4c:	f006 fd51 	bl	a7f2 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    3d50:	2c08      	cmp	r4, #8
    3d52:	d1f5      	bne.n	3d40 <eps_ctx_init+0x4>
    3d54:	4d0f      	ldr	r5, [pc, #60]	; (3d94 <eps_ctx_init+0x58>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    3d56:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    3d58:	b2e0      	uxtb	r0, r4
    3d5a:	f7ff fdd5 	bl	3908 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    3d5e:	6903      	ldr	r3, [r0, #16]
    3d60:	b903      	cbnz	r3, 3d64 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    3d62:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    3d64:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    3d66:	f006 fd44 	bl	a7f2 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    3d6a:	2c08      	cmp	r4, #8
    3d6c:	f105 0540 	add.w	r5, r5, #64	; 0x40
    3d70:	d1f2      	bne.n	3d58 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    3d72:	4c09      	ldr	r4, [pc, #36]	; (3d98 <eps_ctx_init+0x5c>)
    3d74:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    3d78:	f006 fd3b 	bl	a7f2 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    3d7c:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
    3d80:	b913      	cbnz	r3, 3d88 <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    3d82:	4b06      	ldr	r3, [pc, #24]	; (3d9c <eps_ctx_init+0x60>)
    3d84:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    3d88:	4805      	ldr	r0, [pc, #20]	; (3da0 <eps_ctx_init+0x64>)
    3d8a:	f006 fd32 	bl	a7f2 <ep_ctx_reset>
}
    3d8e:	2000      	movs	r0, #0
    3d90:	bd38      	pop	{r3, r4, r5, pc}
    3d92:	bf00      	nop
    3d94:	20001068 	.word	0x20001068
    3d98:	20001268 	.word	0x20001268
    3d9c:	20000c68 	.word	0x20000c68
    3da0:	200014d4 	.word	0x200014d4

00003da4 <usbd_work_handler>:
{
    3da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->ready;
    3da8:	4caf      	ldr	r4, [pc, #700]	; (4068 <usbd_work_handler+0x2c4>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3daa:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 406c <usbd_work_handler+0x2c8>
{
    3dae:	b086      	sub	sp, #24
    3db0:	4680      	mov	r8, r0
    3db2:	af00      	add	r7, sp, #0
	while ((ev = usbd_evt_get()) != NULL) {
    3db4:	f7ff fe02 	bl	39bc <usbd_evt_get>
    3db8:	4606      	mov	r6, r0
    3dba:	b918      	cbnz	r0, 3dc4 <usbd_work_handler+0x20>
}
    3dbc:	3718      	adds	r7, #24
    3dbe:	46bd      	mov	sp, r7
    3dc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return get_usbd_ctx()->ready;
    3dc4:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    3dc8:	7c33      	ldrb	r3, [r6, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3dca:	f106 0a04 	add.w	sl, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    3dce:	b93a      	cbnz	r2, 3de0 <usbd_work_handler+0x3c>
    3dd0:	2b00      	cmp	r3, #0
    3dd2:	f000 80ad 	beq.w	3f30 <usbd_work_handler+0x18c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3dd6:	4651      	mov	r1, sl
    3dd8:	4648      	mov	r0, r9
    3dda:	f007 f94b 	bl	b074 <k_mem_slab_free>
}
    3dde:	e7e9      	b.n	3db4 <usbd_work_handler+0x10>
		switch (ev->evt_type) {
    3de0:	2b04      	cmp	r3, #4
    3de2:	f200 8197 	bhi.w	4114 <usbd_work_handler+0x370>
    3de6:	e8df f013 	tbh	[pc, r3, lsl #1]
    3dea:	00a3      	.short	0x00a3
    3dec:	01280005 	.word	0x01280005
    3df0:	017a0153 	.word	0x017a0153
			if (!ctx->attached) {
    3df4:	f818 3c04 	ldrb.w	r3, [r8, #-4]
    3df8:	b983      	cbnz	r3, 3e1c <usbd_work_handler+0x78>
				LOG_ERR("not attached, EP 0x%02x event dropped",
    3dfa:	68b3      	ldr	r3, [r6, #8]
    3dfc:	499c      	ldr	r1, [pc, #624]	; (4070 <usbd_work_handler+0x2cc>)
    3dfe:	7a5b      	ldrb	r3, [r3, #9]
    3e00:	489c      	ldr	r0, [pc, #624]	; (4074 <usbd_work_handler+0x2d0>)
    3e02:	466d      	mov	r5, sp
    3e04:	b088      	sub	sp, #32
    3e06:	466a      	mov	r2, sp
    3e08:	e9c2 1305 	strd	r1, r3, [r2, #20]
    3e0c:	2303      	movs	r3, #3
    3e0e:	f842 3f10 	str.w	r3, [r2, #16]!
    3e12:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3e16:	f006 fcff 	bl	a818 <z_log_msg2_static_create.constprop.0>
    3e1a:	46ad      	mov	sp, r5
	switch (ep_evt->evt_type) {
    3e1c:	7b33      	ldrb	r3, [r6, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    3e1e:	68b5      	ldr	r5, [r6, #8]
	switch (ep_evt->evt_type) {
    3e20:	2b03      	cmp	r3, #3
    3e22:	d8d8      	bhi.n	3dd6 <usbd_work_handler+0x32>
    3e24:	e8df f003 	tbb	[pc, r3]
    3e28:	716c3d02 	.word	0x716c3d02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    3e2c:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    3e2e:	2208      	movs	r2, #8
    3e30:	2100      	movs	r1, #0
    3e32:	4630      	mov	r0, r6
    3e34:	f006 fcaa 	bl	a78c <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    3e38:	4b8f      	ldr	r3, [pc, #572]	; (4078 <usbd_work_handler+0x2d4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    3e3a:	4890      	ldr	r0, [pc, #576]	; (407c <usbd_work_handler+0x2d8>)
    3e3c:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    3e40:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    3e42:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    3e46:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    3e48:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    3e4c:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    3e50:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    3e54:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    3e56:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    3e5a:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    3e5e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    3e62:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    3e64:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    3e68:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    3e6c:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    3e70:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    3e72:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    3e74:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    3e76:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    3e78:	f006 fc7d 	bl	a776 <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    3e7c:	682b      	ldr	r3, [r5, #0]
    3e7e:	7a68      	ldrb	r0, [r5, #9]
    3e80:	2100      	movs	r1, #0
    3e82:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    3e84:	f996 3000 	ldrsb.w	r3, [r6]
    3e88:	2b00      	cmp	r3, #0
    3e8a:	db06      	blt.n	3e9a <usbd_work_handler+0xf6>
    3e8c:	88f3      	ldrh	r3, [r6, #6]
    3e8e:	b123      	cbz	r3, 3e9a <usbd_work_handler+0xf6>
		ctx->ctrl_read_len = usbd_setup->wLength;
    3e90:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    3e94:	f003 ff82 	bl	7d9c <nrfx_usbd_setup_data_clear>
    3e98:	e79d      	b.n	3dd6 <usbd_work_handler+0x32>
		ctx->ctrl_read_len = 0U;
    3e9a:	2300      	movs	r3, #0
    3e9c:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    3ea0:	e799      	b.n	3dd6 <usbd_work_handler+0x32>
	if (!ep_ctx->read_pending) {
    3ea2:	7f6b      	ldrb	r3, [r5, #29]
    3ea4:	2b00      	cmp	r3, #0
    3ea6:	d096      	beq.n	3dd6 <usbd_work_handler+0x32>
	if (!ep_ctx->read_complete) {
    3ea8:	7f2b      	ldrb	r3, [r5, #28]
    3eaa:	2b00      	cmp	r3, #0
    3eac:	d093      	beq.n	3dd6 <usbd_work_handler+0x32>
	ep_ctx->read_pending = false;
    3eae:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    3eb0:	4873      	ldr	r0, [pc, #460]	; (4080 <usbd_work_handler+0x2dc>)
	ep_ctx->read_pending = false;
    3eb2:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    3eb4:	f04f 32ff 	mov.w	r2, #4294967295
    3eb8:	f04f 33ff 	mov.w	r3, #4294967295
	ep_ctx->read_complete = false;
    3ebc:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    3ebe:	f006 fcae 	bl	a81e <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    3ec2:	696b      	ldr	r3, [r5, #20]
    3ec4:	603b      	str	r3, [r7, #0]
    3ec6:	686b      	ldr	r3, [r5, #4]
    3ec8:	e9c7 3601 	strd	r3, r6, [r7, #4]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    3ecc:	4639      	mov	r1, r7
    3ece:	7a68      	ldrb	r0, [r5, #9]
    3ed0:	f003 fd74 	bl	79bc <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    3ed4:	4b6b      	ldr	r3, [pc, #428]	; (4084 <usbd_work_handler+0x2e0>)
    3ed6:	4298      	cmp	r0, r3
    3ed8:	d00e      	beq.n	3ef8 <usbd_work_handler+0x154>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    3eda:	4b6b      	ldr	r3, [pc, #428]	; (4088 <usbd_work_handler+0x2e4>)
    3edc:	466d      	mov	r5, sp
    3ede:	b088      	sub	sp, #32
    3ee0:	466a      	mov	r2, sp
    3ee2:	e9c2 3005 	strd	r3, r0, [r2, #20]
    3ee6:	2303      	movs	r3, #3
    3ee8:	f842 3f10 	str.w	r3, [r2, #16]!
    3eec:	4861      	ldr	r0, [pc, #388]	; (4074 <usbd_work_handler+0x2d0>)
    3eee:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3ef2:	f006 fc91 	bl	a818 <z_log_msg2_static_create.constprop.0>
    3ef6:	46ad      	mov	sp, r5
	k_mutex_unlock(&ctx->drv_lock);
    3ef8:	4861      	ldr	r0, [pc, #388]	; (4080 <usbd_work_handler+0x2dc>)
    3efa:	f006 fc92 	bl	a822 <k_mutex_unlock.isra.0>
    3efe:	e76a      	b.n	3dd6 <usbd_work_handler+0x32>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    3f00:	682b      	ldr	r3, [r5, #0]
    3f02:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    3f04:	7a68      	ldrb	r0, [r5, #9]
    3f06:	4798      	blx	r3
		break;
    3f08:	e765      	b.n	3dd6 <usbd_work_handler+0x32>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    3f0a:	7aab      	ldrb	r3, [r5, #10]
    3f0c:	b96b      	cbnz	r3, 3f2a <usbd_work_handler+0x186>
    3f0e:	7feb      	ldrb	r3, [r5, #31]
    3f10:	b95b      	cbnz	r3, 3f2a <usbd_work_handler+0x186>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    3f12:	485b      	ldr	r0, [pc, #364]	; (4080 <usbd_work_handler+0x2dc>)
    3f14:	f04f 32ff 	mov.w	r2, #4294967295
    3f18:	f04f 33ff 	mov.w	r3, #4294967295
    3f1c:	f006 fc7f 	bl	a81e <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    3f20:	f003 ff70 	bl	7e04 <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    3f24:	4856      	ldr	r0, [pc, #344]	; (4080 <usbd_work_handler+0x2dc>)
    3f26:	f006 fc7c 	bl	a822 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    3f2a:	682b      	ldr	r3, [r5, #0]
    3f2c:	2102      	movs	r1, #2
    3f2e:	e7e9      	b.n	3f04 <usbd_work_handler+0x160>
	switch (pwr_evt->state) {
    3f30:	7a33      	ldrb	r3, [r6, #8]
    3f32:	2b04      	cmp	r3, #4
    3f34:	f63f af4f 	bhi.w	3dd6 <usbd_work_handler+0x32>
    3f38:	e8df f003 	tbb	[pc, r3]
    3f3c:	6925035b 	.word	0x6925035b
    3f40:	75          	.byte	0x75
    3f41:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    3f42:	f003 fceb 	bl	791c <nrfx_usbd_is_enabled>
    3f46:	4605      	mov	r5, r0
    3f48:	2800      	cmp	r0, #0
    3f4a:	f47f af44 	bne.w	3dd6 <usbd_work_handler+0x32>
			nrfx_usbd_enable();
    3f4e:	f003 fc7f 	bl	7850 <nrfx_usbd_enable>
    3f52:	f3bf 8f5b 	dmb	ish
    3f56:	494d      	ldr	r1, [pc, #308]	; (408c <usbd_work_handler+0x2e8>)
    3f58:	2301      	movs	r3, #1
    3f5a:	e851 2f00 	ldrex	r2, [r1]
    3f5e:	2a00      	cmp	r2, #0
    3f60:	d103      	bne.n	3f6a <usbd_work_handler+0x1c6>
    3f62:	e841 3000 	strex	r0, r3, [r1]
    3f66:	2800      	cmp	r0, #0
    3f68:	d1f7      	bne.n	3f5a <usbd_work_handler+0x1b6>
    3f6a:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    3f6e:	f47f af32 	bne.w	3dd6 <usbd_work_handler+0x32>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3f72:	f841 5c10 	str.w	r5, [r1, #-16]
    3f76:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    3f7a:	69e0      	ldr	r0, [r4, #28]
    3f7c:	6163      	str	r3, [r4, #20]
    3f7e:	3914      	subs	r1, #20
    3f80:	f005 fe15 	bl	9bae <onoff_request>
    3f84:	e727      	b.n	3dd6 <usbd_work_handler+0x32>
	switch (pwr_evt->state) {
    3f86:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    3f88:	f065 007f 	orn	r0, r5, #127	; 0x7f
    3f8c:	b2c0      	uxtb	r0, r0
    3f8e:	f7ff fcbb 	bl	3908 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    3f92:	7a03      	ldrb	r3, [r0, #8]
    3f94:	b113      	cbz	r3, 3f9c <usbd_work_handler+0x1f8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    3f96:	7a40      	ldrb	r0, [r0, #9]
    3f98:	f004 f91c 	bl	81d4 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    3f9c:	3501      	adds	r5, #1
    3f9e:	2d08      	cmp	r5, #8
    3fa0:	d1f2      	bne.n	3f88 <usbd_work_handler+0x1e4>
		if (ep_ctx->cfg.en) {
    3fa2:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    3fa6:	b11b      	cbz	r3, 3fb0 <usbd_work_handler+0x20c>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    3fa8:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    3fac:	f004 f912 	bl	81d4 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    3fb0:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    3fb2:	b2e8      	uxtb	r0, r5
    3fb4:	f7ff fca8 	bl	3908 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    3fb8:	7a03      	ldrb	r3, [r0, #8]
    3fba:	b113      	cbz	r3, 3fc2 <usbd_work_handler+0x21e>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    3fbc:	7a40      	ldrb	r0, [r0, #9]
    3fbe:	f004 f909 	bl	81d4 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    3fc2:	3501      	adds	r5, #1
    3fc4:	2d08      	cmp	r5, #8
    3fc6:	d1f4      	bne.n	3fb2 <usbd_work_handler+0x20e>
		if (ep_ctx->cfg.en) {
    3fc8:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    3fcc:	b11b      	cbz	r3, 3fd6 <usbd_work_handler+0x232>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    3fce:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    3fd2:	f004 f8ff 	bl	81d4 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    3fd6:	2001      	movs	r0, #1
    3fd8:	f003 fc82 	bl	78e0 <nrfx_usbd_start>
		ctx->ready = true;
    3fdc:	2301      	movs	r3, #1
    3fde:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    3fe2:	6823      	ldr	r3, [r4, #0]
    3fe4:	2b00      	cmp	r3, #0
    3fe6:	f43f aef6 	beq.w	3dd6 <usbd_work_handler+0x32>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    3fea:	2100      	movs	r1, #0
    3fec:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_RESET, NULL);
    3fee:	4798      	blx	r3
    3ff0:	e6f1      	b.n	3dd6 <usbd_work_handler+0x32>
		ctx->ready = false;
    3ff2:	2500      	movs	r5, #0
    3ff4:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    3ff8:	f004 f876 	bl	80e8 <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    3ffc:	f7ff fdc8 	bl	3b90 <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    4000:	6823      	ldr	r3, [r4, #0]
    4002:	2b00      	cmp	r3, #0
    4004:	f43f aee7 	beq.w	3dd6 <usbd_work_handler+0x32>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    4008:	4629      	mov	r1, r5
    400a:	2004      	movs	r0, #4
    400c:	e7ef      	b.n	3fee <usbd_work_handler+0x24a>
		if (dev_ready()) {
    400e:	2a00      	cmp	r2, #0
    4010:	f43f aee1 	beq.w	3dd6 <usbd_work_handler+0x32>
			nrfx_usbd_suspend();
    4014:	f004 f882 	bl	811c <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    4018:	6823      	ldr	r3, [r4, #0]
    401a:	2b00      	cmp	r3, #0
    401c:	f43f aedb 	beq.w	3dd6 <usbd_work_handler+0x32>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    4020:	2100      	movs	r1, #0
    4022:	2005      	movs	r0, #5
    4024:	e7e3      	b.n	3fee <usbd_work_handler+0x24a>
		if (ctx->status_cb && dev_ready()) {
    4026:	6823      	ldr	r3, [r4, #0]
    4028:	2b00      	cmp	r3, #0
    402a:	f43f aed4 	beq.w	3dd6 <usbd_work_handler+0x32>
    402e:	2a00      	cmp	r2, #0
    4030:	f43f aed1 	beq.w	3dd6 <usbd_work_handler+0x32>
			ctx->status_cb(USB_DC_RESUME, NULL);
    4034:	2100      	movs	r1, #0
    4036:	2006      	movs	r0, #6
    4038:	e7d9      	b.n	3fee <usbd_work_handler+0x24a>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    403a:	f108 0510 	add.w	r5, r8, #16
    403e:	f04f 33ff 	mov.w	r3, #4294967295
    4042:	f04f 32ff 	mov.w	r2, #4294967295
    4046:	4628      	mov	r0, r5
    4048:	f006 fbe9 	bl	a81e <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    404c:	f7ff fe76 	bl	3d3c <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    4050:	4628      	mov	r0, r5
    4052:	f006 fbe6 	bl	a822 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    4056:	f858 3c28 	ldr.w	r3, [r8, #-40]
    405a:	2b00      	cmp	r3, #0
    405c:	f43f aebb 	beq.w	3dd6 <usbd_work_handler+0x32>
				ctx->status_cb(USB_DC_RESET, NULL);
    4060:	2100      	movs	r1, #0
    4062:	2001      	movs	r0, #1
    4064:	e7c3      	b.n	3fee <usbd_work_handler+0x24a>
    4066:	bf00      	nop
    4068:	20001268 	.word	0x20001268
    406c:	20000150 	.word	0x20000150
    4070:	0000c596 	.word	0x0000c596
    4074:	0000b9fc 	.word	0x0000b9fc
    4078:	40027000 	.word	0x40027000
    407c:	2000126c 	.word	0x2000126c
    4080:	200012a0 	.word	0x200012a0
    4084:	0bad0000 	.word	0x0bad0000
    4088:	0000c5bc 	.word	0x0000c5bc
    408c:	20001288 	.word	0x20001288
	if (ep_ctx->cfg.en) {
    4090:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    4094:	b193      	cbz	r3, 40bc <usbd_work_handler+0x318>
		ep_ctx->read_pending = true;
    4096:	2501      	movs	r5, #1
    4098:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    409c:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    40a0:	f7ff fca2 	bl	39e8 <usbd_evt_alloc>
		if (!ev) {
    40a4:	b990      	cbnz	r0, 40cc <usbd_work_handler+0x328>
			LOG_ERR("Failed to alloc evt");
    40a6:	4b23      	ldr	r3, [pc, #140]	; (4134 <usbd_work_handler+0x390>)
    40a8:	617b      	str	r3, [r7, #20]
    40aa:	4823      	ldr	r0, [pc, #140]	; (4138 <usbd_work_handler+0x394>)
    40ac:	2302      	movs	r3, #2
    40ae:	f107 0210 	add.w	r2, r7, #16
    40b2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    40b6:	613b      	str	r3, [r7, #16]
    40b8:	f006 fbae 	bl	a818 <z_log_msg2_static_create.constprop.0>
			if (ctx->status_cb) {
    40bc:	f858 3c28 	ldr.w	r3, [r8, #-40]
    40c0:	2b00      	cmp	r3, #0
    40c2:	f43f ae88 	beq.w	3dd6 <usbd_work_handler+0x32>
				ctx->status_cb(USB_DC_SOF, NULL);
    40c6:	2100      	movs	r1, #0
    40c8:	200a      	movs	r0, #10
    40ca:	e790      	b.n	3fee <usbd_work_handler+0x24a>
		ev->evt.ep_evt.ep = ep_ctx;
    40cc:	4a1b      	ldr	r2, [pc, #108]	; (413c <usbd_work_handler+0x398>)
		ev->evt_type = USBD_EVT_EP;
    40ce:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    40d0:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    40d2:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    40d4:	f7ff fc40 	bl	3958 <usbd_evt_put>
		usbd_work_schedule();
    40d8:	f7ff fc44 	bl	3964 <usbd_work_schedule>
    40dc:	e7ee      	b.n	40bc <usbd_work_handler+0x318>
				LOG_ERR("USBD event queue full!");
    40de:	4b18      	ldr	r3, [pc, #96]	; (4140 <usbd_work_handler+0x39c>)
    40e0:	4815      	ldr	r0, [pc, #84]	; (4138 <usbd_work_handler+0x394>)
    40e2:	617b      	str	r3, [r7, #20]
    40e4:	f107 0210 	add.w	r2, r7, #16
    40e8:	2302      	movs	r3, #2
    40ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    40ee:	613b      	str	r3, [r7, #16]
    40f0:	f006 fb92 	bl	a818 <z_log_msg2_static_create.constprop.0>
	nrfx_power_usbevt_disable();
    40f4:	f006 fe8d 	bl	ae12 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    40f8:	f003 fff6 	bl	80e8 <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    40fc:	f003 fb9e 	bl	783c <nrfx_usbd_uninit>
	usbd_evt_flush();
    4100:	f7ff fc64 	bl	39cc <usbd_evt_flush>
	ret = eps_ctx_init();
    4104:	f7ff fe1a 	bl	3d3c <eps_ctx_init>
	nrfx_power_usbevt_enable();
    4108:	f006 fe7c 	bl	ae04 <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    410c:	480d      	ldr	r0, [pc, #52]	; (4144 <usbd_work_handler+0x3a0>)
    410e:	f003 fc0f 	bl	7930 <nrfx_usbd_init>
}
    4112:	e660      	b.n	3dd6 <usbd_work_handler+0x32>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    4114:	490c      	ldr	r1, [pc, #48]	; (4148 <usbd_work_handler+0x3a4>)
    4116:	4808      	ldr	r0, [pc, #32]	; (4138 <usbd_work_handler+0x394>)
    4118:	466d      	mov	r5, sp
    411a:	b088      	sub	sp, #32
    411c:	466a      	mov	r2, sp
		switch (ev->evt_type) {
    411e:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    4122:	2303      	movs	r3, #3
    4124:	f842 3f10 	str.w	r3, [r2, #16]!
    4128:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    412c:	f006 fb74 	bl	a818 <z_log_msg2_static_create.constprop.0>
    4130:	46ad      	mov	sp, r5
    4132:	e650      	b.n	3dd6 <usbd_work_handler+0x32>
    4134:	0000c5e2 	.word	0x0000c5e2
    4138:	0000b9fc 	.word	0x0000b9fc
    413c:	200014d4 	.word	0x200014d4
    4140:	0000c5f6 	.word	0x0000c5f6
    4144:	00003bd5 	.word	0x00003bd5
    4148:	0000c60d 	.word	0x0000c60d

0000414c <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    414c:	4b07      	ldr	r3, [pc, #28]	; (416c <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    414e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    4152:	b13a      	cbz	r2, 4164 <usb_dc_set_address+0x18>
    4154:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	return 0;
    4158:	2b00      	cmp	r3, #0
    415a:	bf0c      	ite	eq
    415c:	f06f 0012 	mvneq.w	r0, #18
    4160:	2000      	movne	r0, #0
    4162:	4770      	bx	lr
		return -ENODEV;
    4164:	f06f 0012 	mvn.w	r0, #18
}
    4168:	4770      	bx	lr
    416a:	bf00      	nop
    416c:	20001268 	.word	0x20001268

00004170 <usb_dc_ep_check_cap>:
{
    4170:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    4172:	4602      	mov	r2, r0
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    4174:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    4176:	7912      	ldrb	r2, [r2, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    4178:	f003 000f 	and.w	r0, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    417c:	b97a      	cbnz	r2, 419e <usb_dc_ep_check_cap+0x2e>
    417e:	b158      	cbz	r0, 4198 <usb_dc_ep_check_cap+0x28>
		LOG_ERR("invalid endpoint configuration");
    4180:	4b0d      	ldr	r3, [pc, #52]	; (41b8 <usb_dc_ep_check_cap+0x48>)
		LOG_ERR("invalid endpoint index/address");
    4182:	480e      	ldr	r0, [pc, #56]	; (41bc <usb_dc_ep_check_cap+0x4c>)
    4184:	9305      	str	r3, [sp, #20]
    4186:	aa04      	add	r2, sp, #16
    4188:	2302      	movs	r3, #2
    418a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    418e:	9304      	str	r3, [sp, #16]
    4190:	f006 fb42 	bl	a818 <z_log_msg2_static_create.constprop.0>
		return -1;
    4194:	f04f 30ff 	mov.w	r0, #4294967295
}
    4198:	b007      	add	sp, #28
    419a:	f85d fb04 	ldr.w	pc, [sp], #4
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    419e:	2808      	cmp	r0, #8
    41a0:	d901      	bls.n	41a6 <usb_dc_ep_check_cap+0x36>
		LOG_ERR("invalid endpoint index/address");
    41a2:	4b07      	ldr	r3, [pc, #28]	; (41c0 <usb_dc_ep_check_cap+0x50>)
    41a4:	e7ed      	b.n	4182 <usb_dc_ep_check_cap+0x12>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    41a6:	2a01      	cmp	r2, #1
    41a8:	bf06      	itte	eq
    41aa:	f083 0008 	eoreq.w	r0, r3, #8
    41ae:	f340 00c0 	sbfxeq	r0, r0, #3, #1
	return 0;
    41b2:	2000      	movne	r0, #0
    41b4:	e7f0      	b.n	4198 <usb_dc_ep_check_cap+0x28>
    41b6:	bf00      	nop
    41b8:	0000c624 	.word	0x0000c624
    41bc:	0000b9fc 	.word	0x0000b9fc
    41c0:	0000c643 	.word	0x0000c643

000041c4 <usb_dc_ep_configure>:
{
    41c4:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    41c6:	4b15      	ldr	r3, [pc, #84]	; (421c <usb_dc_ep_configure+0x58>)
	if (!dev_attached()) {
    41c8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    41cc:	b086      	sub	sp, #24
    41ce:	4601      	mov	r1, r0
	if (!dev_attached()) {
    41d0:	b30b      	cbz	r3, 4216 <usb_dc_ep_configure+0x52>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    41d2:	7804      	ldrb	r4, [r0, #0]
    41d4:	4620      	mov	r0, r4
    41d6:	f7ff fb97 	bl	3908 <endpoint_ctx>
	if (!ep_ctx) {
    41da:	b198      	cbz	r0, 4204 <usb_dc_ep_configure+0x40>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    41dc:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    41de:	790b      	ldrb	r3, [r1, #4]
    41e0:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    41e2:	8849      	ldrh	r1, [r1, #2]
    41e4:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    41e6:	0723      	lsls	r3, r4, #28
    41e8:	d40f      	bmi.n	420a <usb_dc_ep_configure+0x46>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    41ea:	1e4b      	subs	r3, r1, #1
    41ec:	420b      	tst	r3, r1
    41ee:	d00c      	beq.n	420a <usb_dc_ep_configure+0x46>
			LOG_ERR("EP max packet size must be a power of 2");
    41f0:	4b0b      	ldr	r3, [pc, #44]	; (4220 <usb_dc_ep_configure+0x5c>)
    41f2:	9305      	str	r3, [sp, #20]
    41f4:	480b      	ldr	r0, [pc, #44]	; (4224 <usb_dc_ep_configure+0x60>)
    41f6:	2302      	movs	r3, #2
    41f8:	aa04      	add	r2, sp, #16
    41fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    41fe:	9304      	str	r3, [sp, #16]
    4200:	f006 fb0a 	bl	a818 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    4204:	f06f 0015 	mvn.w	r0, #21
    4208:	e003      	b.n	4212 <usb_dc_ep_configure+0x4e>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    420a:	4620      	mov	r0, r4
    420c:	f006 fe9b 	bl	af46 <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    4210:	2000      	movs	r0, #0
}
    4212:	b006      	add	sp, #24
    4214:	bd10      	pop	{r4, pc}
		return -ENODEV;
    4216:	f06f 0012 	mvn.w	r0, #18
    421a:	e7fa      	b.n	4212 <usb_dc_ep_configure+0x4e>
    421c:	20001268 	.word	0x20001268
    4220:	0000c662 	.word	0x0000c662
    4224:	0000b9fc 	.word	0x0000b9fc

00004228 <usb_dc_ep_set_stall>:
{
    4228:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    422a:	4b18      	ldr	r3, [pc, #96]	; (428c <usb_dc_ep_set_stall+0x64>)
	if (!dev_attached() || !dev_ready()) {
    422c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4230:	b086      	sub	sp, #24
    4232:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    4234:	b33a      	cbz	r2, 4286 <usb_dc_ep_set_stall+0x5e>
    4236:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    423a:	b323      	cbz	r3, 4286 <usb_dc_ep_set_stall+0x5e>
	ep_ctx = endpoint_ctx(ep);
    423c:	f7ff fb64 	bl	3908 <endpoint_ctx>
	if (!ep_ctx) {
    4240:	4604      	mov	r4, r0
    4242:	b1e8      	cbz	r0, 4280 <usb_dc_ep_set_stall+0x58>
	switch (ep_ctx->cfg.type) {
    4244:	7a83      	ldrb	r3, [r0, #10]
    4246:	2b01      	cmp	r3, #1
    4248:	d010      	beq.n	426c <usb_dc_ep_set_stall+0x44>
    424a:	d908      	bls.n	425e <usb_dc_ep_set_stall+0x36>
    424c:	3b02      	subs	r3, #2
    424e:	2b01      	cmp	r3, #1
    4250:	d908      	bls.n	4264 <usb_dc_ep_set_stall+0x3c>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    4252:	6963      	ldr	r3, [r4, #20]
    4254:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    4256:	2000      	movs	r0, #0
    4258:	60e0      	str	r0, [r4, #12]
}
    425a:	b006      	add	sp, #24
    425c:	bd10      	pop	{r4, pc}
		nrfx_usbd_setup_stall();
    425e:	f003 fdd9 	bl	7e14 <nrfx_usbd_setup_stall>
		break;
    4262:	e7f6      	b.n	4252 <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    4264:	4608      	mov	r0, r1
    4266:	f003 fd45 	bl	7cf4 <nrfx_usbd_ep_stall>
		break;
    426a:	e7f2      	b.n	4252 <usb_dc_ep_set_stall+0x2a>
		LOG_ERR("STALL unsupported on ISO endpoint");
    426c:	4b08      	ldr	r3, [pc, #32]	; (4290 <usb_dc_ep_set_stall+0x68>)
    426e:	9305      	str	r3, [sp, #20]
    4270:	4808      	ldr	r0, [pc, #32]	; (4294 <usb_dc_ep_set_stall+0x6c>)
    4272:	2302      	movs	r3, #2
    4274:	aa04      	add	r2, sp, #16
    4276:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    427a:	9304      	str	r3, [sp, #16]
    427c:	f006 facc 	bl	a818 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    4280:	f06f 0015 	mvn.w	r0, #21
    4284:	e7e9      	b.n	425a <usb_dc_ep_set_stall+0x32>
		return -ENODEV;
    4286:	f06f 0012 	mvn.w	r0, #18
    428a:	e7e6      	b.n	425a <usb_dc_ep_set_stall+0x32>
    428c:	20001268 	.word	0x20001268
    4290:	0000c68a 	.word	0x0000c68a
    4294:	0000b9fc 	.word	0x0000b9fc

00004298 <usb_dc_ep_clear_stall>:
{
    4298:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    429a:	4b0e      	ldr	r3, [pc, #56]	; (42d4 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    429c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    42a0:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    42a2:	b182      	cbz	r2, 42c6 <usb_dc_ep_clear_stall+0x2e>
    42a4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    42a8:	b16b      	cbz	r3, 42c6 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    42aa:	f7ff fb2d 	bl	3908 <endpoint_ctx>
	if (!ep_ctx) {
    42ae:	b168      	cbz	r0, 42cc <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    42b0:	f015 0408 	ands.w	r4, r5, #8
    42b4:	d10a      	bne.n	42cc <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    42b6:	4628      	mov	r0, r5
    42b8:	f003 fd3e 	bl	7d38 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    42bc:	4628      	mov	r0, r5
    42be:	f003 ffdb 	bl	8278 <nrfx_usbd_ep_stall_clear>
	return 0;
    42c2:	4620      	mov	r0, r4
}
    42c4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    42c6:	f06f 0012 	mvn.w	r0, #18
    42ca:	e7fb      	b.n	42c4 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    42cc:	f06f 0015 	mvn.w	r0, #21
    42d0:	e7f8      	b.n	42c4 <usb_dc_ep_clear_stall+0x2c>
    42d2:	bf00      	nop
    42d4:	20001268 	.word	0x20001268

000042d8 <usb_dc_ep_is_stalled>:
{
    42d8:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    42da:	4b0c      	ldr	r3, [pc, #48]	; (430c <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    42dc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    42e0:	4605      	mov	r5, r0
    42e2:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    42e4:	b162      	cbz	r2, 4300 <usb_dc_ep_is_stalled+0x28>
    42e6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    42ea:	b14b      	cbz	r3, 4300 <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    42ec:	f7ff fb0c 	bl	3908 <endpoint_ctx>
	if (!ep_ctx) {
    42f0:	b148      	cbz	r0, 4306 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    42f2:	b141      	cbz	r1, 4306 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    42f4:	4628      	mov	r0, r5
    42f6:	f003 fd05 	bl	7d04 <nrfx_usbd_ep_stall_check>
    42fa:	7020      	strb	r0, [r4, #0]
	return 0;
    42fc:	2000      	movs	r0, #0
}
    42fe:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    4300:	f06f 0012 	mvn.w	r0, #18
    4304:	e7fb      	b.n	42fe <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    4306:	f06f 0015 	mvn.w	r0, #21
    430a:	e7f8      	b.n	42fe <usb_dc_ep_is_stalled+0x26>
    430c:	20001268 	.word	0x20001268

00004310 <usb_dc_ep_enable>:
{
    4310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    4312:	4f13      	ldr	r7, [pc, #76]	; (4360 <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    4314:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
{
    4318:	4604      	mov	r4, r0
	if (!dev_attached()) {
    431a:	b1bb      	cbz	r3, 434c <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
    431c:	f7ff faf4 	bl	3908 <endpoint_ctx>
	if (!ep_ctx) {
    4320:	4605      	mov	r5, r0
    4322:	b1b0      	cbz	r0, 4352 <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    4324:	0723      	lsls	r3, r4, #28
    4326:	d405      	bmi.n	4334 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    4328:	4620      	mov	r0, r4
    432a:	f003 fd05 	bl	7d38 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    432e:	4620      	mov	r0, r4
    4330:	f003 ffa2 	bl	8278 <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    4334:	7a2e      	ldrb	r6, [r5, #8]
    4336:	b97e      	cbnz	r6, 4358 <usb_dc_ep_enable+0x48>
	if (dev_ready()) {
    4338:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
	ep_ctx->cfg.en = true;
    433c:	2301      	movs	r3, #1
    433e:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    4340:	b118      	cbz	r0, 434a <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    4342:	4620      	mov	r0, r4
    4344:	f003 ff46 	bl	81d4 <nrfx_usbd_ep_enable>
	return 0;
    4348:	4630      	mov	r0, r6
}
    434a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
    434c:	f06f 0012 	mvn.w	r0, #18
    4350:	e7fb      	b.n	434a <usb_dc_ep_enable+0x3a>
		return -EINVAL;
    4352:	f06f 0015 	mvn.w	r0, #21
    4356:	e7f8      	b.n	434a <usb_dc_ep_enable+0x3a>
		return -EALREADY;
    4358:	f06f 0077 	mvn.w	r0, #119	; 0x77
    435c:	e7f5      	b.n	434a <usb_dc_ep_enable+0x3a>
    435e:	bf00      	nop
    4360:	20001268 	.word	0x20001268

00004364 <usb_dc_ep_disable>:
{
    4364:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4366:	4b11      	ldr	r3, [pc, #68]	; (43ac <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
    4368:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    436c:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    436e:	b19a      	cbz	r2, 4398 <usb_dc_ep_disable+0x34>
    4370:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4374:	b183      	cbz	r3, 4398 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
    4376:	f7ff fac7 	bl	3908 <endpoint_ctx>
	if (!ep_ctx) {
    437a:	4605      	mov	r5, r0
    437c:	b178      	cbz	r0, 439e <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
    437e:	7a03      	ldrb	r3, [r0, #8]
    4380:	b183      	cbz	r3, 43a4 <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    4382:	4608      	mov	r0, r1
	ep_ctx->write_in_progress = false;
    4384:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    4386:	f003 fef9 	bl	817c <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    438a:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    438c:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    438e:	f006 fa30 	bl	a7f2 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    4392:	722c      	strb	r4, [r5, #8]
	return 0;
    4394:	4620      	mov	r0, r4
}
    4396:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    4398:	f06f 0012 	mvn.w	r0, #18
    439c:	e7fb      	b.n	4396 <usb_dc_ep_disable+0x32>
		return -EINVAL;
    439e:	f06f 0015 	mvn.w	r0, #21
    43a2:	e7f8      	b.n	4396 <usb_dc_ep_disable+0x32>
		return -EALREADY;
    43a4:	f06f 0077 	mvn.w	r0, #119	; 0x77
    43a8:	e7f5      	b.n	4396 <usb_dc_ep_disable+0x32>
    43aa:	bf00      	nop
    43ac:	20001268 	.word	0x20001268

000043b0 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    43b0:	4b08      	ldr	r3, [pc, #32]	; (43d4 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    43b2:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    43b4:	1ac3      	subs	r3, r0, r3
{
    43b6:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    43b8:	4907      	ldr	r1, [pc, #28]	; (43d8 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    43ba:	109b      	asrs	r3, r3, #2
{
    43bc:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    43be:	4359      	muls	r1, r3
    43c0:	4806      	ldr	r0, [pc, #24]	; (43dc <onoff_stop+0x2c>)
    43c2:	2240      	movs	r2, #64	; 0x40
    43c4:	f006 fa4b 	bl	a85e <stop>
	notify(mgr, res);
    43c8:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    43ca:	4601      	mov	r1, r0
	notify(mgr, res);
    43cc:	4620      	mov	r0, r4
}
    43ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    43d2:	4718      	bx	r3
    43d4:	20001508 	.word	0x20001508
    43d8:	b6db6db7 	.word	0xb6db6db7
    43dc:	0000b7a4 	.word	0x0000b7a4

000043e0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    43e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    43e2:	4c0c      	ldr	r4, [pc, #48]	; (4414 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    43e4:	4a0c      	ldr	r2, [pc, #48]	; (4418 <onoff_start+0x38>)
    43e6:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    43e8:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    43ea:	9300      	str	r3, [sp, #0]
{
    43ec:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    43ee:	460b      	mov	r3, r1
    43f0:	490a      	ldr	r1, [pc, #40]	; (441c <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    43f2:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    43f4:	4361      	muls	r1, r4
{
    43f6:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    43f8:	4809      	ldr	r0, [pc, #36]	; (4420 <onoff_start+0x40>)
    43fa:	f006 fa5d 	bl	a8b8 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    43fe:	1e01      	subs	r1, r0, #0
    4400:	da05      	bge.n	440e <onoff_start+0x2e>
		notify(mgr, err);
    4402:	4630      	mov	r0, r6
    4404:	462b      	mov	r3, r5
	}
}
    4406:	b002      	add	sp, #8
    4408:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    440c:	4718      	bx	r3
}
    440e:	b002      	add	sp, #8
    4410:	bd70      	pop	{r4, r5, r6, pc}
    4412:	bf00      	nop
    4414:	20001508 	.word	0x20001508
    4418:	0000a927 	.word	0x0000a927
    441c:	b6db6db7 	.word	0xb6db6db7
    4420:	0000b7a4 	.word	0x0000b7a4

00004424 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4424:	2200      	movs	r2, #0
{
    4426:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4428:	2101      	movs	r1, #1
{
    442a:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    442c:	4610      	mov	r0, r2
    442e:	f7fe fb7d 	bl	2b2c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    4432:	4811      	ldr	r0, [pc, #68]	; (4478 <clk_init+0x54>)
    4434:	f002 f958 	bl	66e8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4438:	4b10      	ldr	r3, [pc, #64]	; (447c <clk_init+0x58>)
    443a:	4298      	cmp	r0, r3
    443c:	d118      	bne.n	4470 <clk_init+0x4c>
	hfclkaudio_init();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_DRIVER_CALIBRATION)) {
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
    443e:	6920      	ldr	r0, [r4, #16]
    4440:	f000 f9dc 	bl	47fc <z_nrf_clock_calibration_init>
	}

	nrfx_clock_enable();
    4444:	f002 f962 	bl	670c <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    4448:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    444a:	490d      	ldr	r1, [pc, #52]	; (4480 <clk_init+0x5c>)
    444c:	4630      	mov	r0, r6
    444e:	f005 fb9b 	bl	9b88 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4452:	2800      	cmp	r0, #0
    4454:	db0b      	blt.n	446e <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    4456:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4458:	4909      	ldr	r1, [pc, #36]	; (4480 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    445a:	2501      	movs	r5, #1
    445c:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    445e:	f104 001c 	add.w	r0, r4, #28
    4462:	f005 fb91 	bl	9b88 <onoff_manager_init>
		if (err < 0) {
    4466:	2800      	cmp	r0, #0
    4468:	db01      	blt.n	446e <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    446a:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    446c:	2000      	movs	r0, #0
}
    446e:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4470:	f06f 0004 	mvn.w	r0, #4
    4474:	e7fb      	b.n	446e <clk_init+0x4a>
    4476:	bf00      	nop
    4478:	000044b9 	.word	0x000044b9
    447c:	0bad0000 	.word	0x0bad0000
    4480:	0000bb44 	.word	0x0000bb44

00004484 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    4484:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    4486:	230c      	movs	r3, #12
    4488:	4809      	ldr	r0, [pc, #36]	; (44b0 <clkstarted_handle.constprop.0+0x2c>)
    448a:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    448c:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    448e:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    4490:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    4494:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    4496:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    4498:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    449a:	4418      	add	r0, r3
    449c:	f006 f9cc 	bl	a838 <set_on_state>
	if (callback) {
    44a0:	b12d      	cbz	r5, 44ae <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    44a2:	4632      	mov	r2, r6
    44a4:	462b      	mov	r3, r5
    44a6:	4803      	ldr	r0, [pc, #12]	; (44b4 <clkstarted_handle.constprop.0+0x30>)
}
    44a8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    44ac:	4718      	bx	r3
}
    44ae:	bd70      	pop	{r4, r5, r6, pc}
    44b0:	20001508 	.word	0x20001508
    44b4:	0000b7a4 	.word	0x0000b7a4

000044b8 <clock_event_handler>:
	switch (event) {
    44b8:	2801      	cmp	r0, #1
{
    44ba:	b510      	push	{r4, lr}
    44bc:	4604      	mov	r4, r0
	switch (event) {
    44be:	d00a      	beq.n	44d6 <clock_event_handler+0x1e>
    44c0:	2803      	cmp	r0, #3
    44c2:	d00c      	beq.n	44de <clock_event_handler+0x26>
    44c4:	b978      	cbnz	r0, 44e6 <clock_event_handler+0x2e>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    44c6:	4b08      	ldr	r3, [pc, #32]	; (44e8 <clock_event_handler+0x30>)
    44c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    44ca:	075b      	lsls	r3, r3, #29
    44cc:	d10b      	bne.n	44e6 <clock_event_handler+0x2e>
}
    44ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    44d2:	f7ff bfd7 	b.w	4484 <clkstarted_handle.constprop.0>
			z_nrf_clock_calibration_lfclk_started();
    44d6:	f000 f99f 	bl	4818 <z_nrf_clock_calibration_lfclk_started>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    44da:	4620      	mov	r0, r4
    44dc:	e7f7      	b.n	44ce <clock_event_handler+0x16>
}
    44de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			z_nrf_clock_calibration_done_handler();
    44e2:	f000 b9a7 	b.w	4834 <z_nrf_clock_calibration_done_handler>
}
    44e6:	bd10      	pop	{r4, pc}
    44e8:	20001508 	.word	0x20001508

000044ec <generic_hfclk_start>:
{
    44ec:	b508      	push	{r3, lr}
	__asm__ volatile(
    44ee:	f04f 0320 	mov.w	r3, #32
    44f2:	f3ef 8111 	mrs	r1, BASEPRI
    44f6:	f383 8812 	msr	BASEPRI_MAX, r3
    44fa:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    44fe:	4a12      	ldr	r2, [pc, #72]	; (4548 <generic_hfclk_start+0x5c>)
    4500:	6813      	ldr	r3, [r2, #0]
    4502:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    4506:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    450a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    450c:	d00c      	beq.n	4528 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    450e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4512:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4516:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    451a:	f013 0301 	ands.w	r3, r3, #1
    451e:	d003      	beq.n	4528 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    4520:	480a      	ldr	r0, [pc, #40]	; (454c <generic_hfclk_start+0x60>)
    4522:	f006 f989 	bl	a838 <set_on_state>
			already_started = true;
    4526:	2301      	movs	r3, #1
	__asm__ volatile(
    4528:	f381 8811 	msr	BASEPRI, r1
    452c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    4530:	b123      	cbz	r3, 453c <generic_hfclk_start+0x50>
}
    4532:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    4536:	2000      	movs	r0, #0
    4538:	f7ff bfa4 	b.w	4484 <clkstarted_handle.constprop.0>
}
    453c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    4540:	2001      	movs	r0, #1
    4542:	f006 bc0b 	b.w	ad5c <nrfx_clock_start>
    4546:	bf00      	nop
    4548:	20001558 	.word	0x20001558
    454c:	20001548 	.word	0x20001548

00004550 <api_blocking_start>:
{
    4550:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4552:	2200      	movs	r2, #0
    4554:	2301      	movs	r3, #1
    4556:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    455a:	4a09      	ldr	r2, [pc, #36]	; (4580 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    455c:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4560:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4562:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    4566:	f006 f9d7 	bl	a918 <api_start>
	if (err < 0) {
    456a:	2800      	cmp	r0, #0
    456c:	db05      	blt.n	457a <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    456e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4572:	2300      	movs	r3, #0
    4574:	4668      	mov	r0, sp
    4576:	f004 fb09 	bl	8b8c <z_impl_k_sem_take>
}
    457a:	b005      	add	sp, #20
    457c:	f85d fb04 	ldr.w	pc, [sp], #4
    4580:	0000a93f 	.word	0x0000a93f

00004584 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4584:	4b09      	ldr	r3, [pc, #36]	; (45ac <generic_hfclk_stop+0x28>)
    4586:	f3bf 8f5b 	dmb	ish
    458a:	e853 2f00 	ldrex	r2, [r3]
    458e:	f022 0102 	bic.w	r1, r2, #2
    4592:	e843 1000 	strex	r0, r1, [r3]
    4596:	2800      	cmp	r0, #0
    4598:	d1f7      	bne.n	458a <generic_hfclk_stop+0x6>
    459a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    459e:	07d3      	lsls	r3, r2, #31
    45a0:	d402      	bmi.n	45a8 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    45a2:	2001      	movs	r0, #1
    45a4:	f006 bc12 	b.w	adcc <nrfx_clock_stop>
}
    45a8:	4770      	bx	lr
    45aa:	bf00      	nop
    45ac:	20001558 	.word	0x20001558

000045b0 <z_nrf_clock_control_get_onoff>:
}
    45b0:	4a02      	ldr	r2, [pc, #8]	; (45bc <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    45b2:	b2c3      	uxtb	r3, r0
}
    45b4:	201c      	movs	r0, #28
    45b6:	fb03 2000 	mla	r0, r3, r0, r2
    45ba:	4770      	bx	lr
    45bc:	20001508 	.word	0x20001508

000045c0 <z_nrf_clock_control_lf_on>:
{
    45c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    45c2:	4928      	ldr	r1, [pc, #160]	; (4664 <z_nrf_clock_control_lf_on+0xa4>)
    45c4:	f3bf 8f5b 	dmb	ish
    45c8:	4606      	mov	r6, r0
    45ca:	2201      	movs	r2, #1
    45cc:	e851 3f00 	ldrex	r3, [r1]
    45d0:	e841 2000 	strex	r0, r2, [r1]
    45d4:	2800      	cmp	r0, #0
    45d6:	d1f9      	bne.n	45cc <z_nrf_clock_control_lf_on+0xc>
    45d8:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    45dc:	b933      	cbnz	r3, 45ec <z_nrf_clock_control_lf_on+0x2c>
    45de:	4922      	ldr	r1, [pc, #136]	; (4668 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
    45e0:	4822      	ldr	r0, [pc, #136]	; (466c <z_nrf_clock_control_lf_on+0xac>)
    45e2:	604b      	str	r3, [r1, #4]
    45e4:	60cb      	str	r3, [r1, #12]
    45e6:	608a      	str	r2, [r1, #8]
    45e8:	f005 fae1 	bl	9bae <onoff_request>
	switch (start_mode) {
    45ec:	1e73      	subs	r3, r6, #1
    45ee:	2b01      	cmp	r3, #1
    45f0:	d820      	bhi.n	4634 <z_nrf_clock_control_lf_on+0x74>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    45f2:	f006 fd68 	bl	b0c6 <k_is_in_isr>
    45f6:	4604      	mov	r4, r0
    45f8:	b910      	cbnz	r0, 4600 <z_nrf_clock_control_lf_on+0x40>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    45fa:	4b1d      	ldr	r3, [pc, #116]	; (4670 <z_nrf_clock_control_lf_on+0xb0>)
	int key = isr_mode ? irq_lock() : 0;
    45fc:	781b      	ldrb	r3, [r3, #0]
    45fe:	bb53      	cbnz	r3, 4656 <z_nrf_clock_control_lf_on+0x96>
	__asm__ volatile(
    4600:	f04f 0320 	mov.w	r3, #32
    4604:	f3ef 8511 	mrs	r5, BASEPRI
    4608:	f383 8812 	msr	BASEPRI_MAX, r3
    460c:	f3bf 8f6f 	isb	sy
    4610:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4612:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    4616:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    461a:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
    461e:	03d2      	lsls	r2, r2, #15
    4620:	d509      	bpl.n	4636 <z_nrf_clock_control_lf_on+0x76>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4622:	079b      	lsls	r3, r3, #30
    4624:	d001      	beq.n	462a <z_nrf_clock_control_lf_on+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4626:	2e01      	cmp	r6, #1
    4628:	d105      	bne.n	4636 <z_nrf_clock_control_lf_on+0x76>
	if (isr_mode) {
    462a:	b174      	cbz	r4, 464a <z_nrf_clock_control_lf_on+0x8a>
	__asm__ volatile(
    462c:	f385 8811 	msr	BASEPRI, r5
    4630:	f3bf 8f6f 	isb	sy
}
    4634:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4636:	b11c      	cbz	r4, 4640 <z_nrf_clock_control_lf_on+0x80>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4638:	4628      	mov	r0, r5
    463a:	f7fe f9d5 	bl	29e8 <arch_cpu_atomic_idle>
}
    463e:	e7ea      	b.n	4616 <z_nrf_clock_control_lf_on+0x56>
	return z_impl_k_sleep(timeout);
    4640:	2100      	movs	r1, #0
    4642:	2021      	movs	r0, #33	; 0x21
    4644:	f004 ff10 	bl	9468 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4648:	e7e5      	b.n	4616 <z_nrf_clock_control_lf_on+0x56>
    p_reg->INTENSET = mask;
    464a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    464e:	2202      	movs	r2, #2
    4650:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4654:	e7ee      	b.n	4634 <z_nrf_clock_control_lf_on+0x74>
    p_reg->INTENCLR = mask;
    4656:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    465a:	2202      	movs	r2, #2
    465c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    4660:	4605      	mov	r5, r0
}
    4662:	e7d6      	b.n	4612 <z_nrf_clock_control_lf_on+0x52>
    4664:	2000155c 	.word	0x2000155c
    4668:	200014f8 	.word	0x200014f8
    466c:	20001524 	.word	0x20001524
    4670:	20001d87 	.word	0x20001d87

00004674 <temp_sensor_init.part.0>:
	total_cnt = 0;
	total_skips_cnt = 0;
}

#if CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP
static int temp_sensor_init(const struct device *arg)
    4674:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
{
	temp_sensor = DEVICE_DT_GET_OR_NULL(TEMP_NODE);
	if ((temp_sensor != NULL) && !device_is_ready(temp_sensor)) {
		LOG_ERR("Temperature sensor not ready");
    4676:	4b08      	ldr	r3, [pc, #32]	; (4698 <temp_sensor_init.part.0+0x24>)
    4678:	9305      	str	r3, [sp, #20]
    467a:	2302      	movs	r3, #2
    467c:	9304      	str	r3, [sp, #16]
    467e:	4807      	ldr	r0, [pc, #28]	; (469c <temp_sensor_init.part.0+0x28>)
    4680:	2300      	movs	r3, #0
    4682:	aa04      	add	r2, sp, #16
    4684:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4688:	f005 ffc8 	bl	a61c <z_impl_z_log_msg2_static_create>
		return -ENODEV;
	}

	return 0;
}
    468c:	f06f 0012 	mvn.w	r0, #18
    4690:	b007      	add	sp, #28
    4692:	f85d fb04 	ldr.w	pc, [sp], #4
    4696:	bf00      	nop
    4698:	0000c6d9 	.word	0x0000c6d9
    469c:	0000b98c 	.word	0x0000b98c

000046a0 <start_cal_process>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    46a0:	4b0d      	ldr	r3, [pc, #52]	; (46d8 <start_cal_process+0x38>)
    46a2:	f3bf 8f5b 	dmb	ish
    46a6:	2201      	movs	r2, #1
    46a8:	e853 1f00 	ldrex	r1, [r3]
    46ac:	2900      	cmp	r1, #0
    46ae:	d103      	bne.n	46b8 <start_cal_process+0x18>
    46b0:	e843 2000 	strex	r0, r2, [r3]
    46b4:	2800      	cmp	r0, #0
    46b6:	d1f7      	bne.n	46a8 <start_cal_process+0x8>
    46b8:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&cal_process_in_progress, 0, 1) == false) {
    46bc:	d10a      	bne.n	46d4 <start_cal_process+0x34>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    46be:	4907      	ldr	r1, [pc, #28]	; (46dc <start_cal_process+0x3c>)
    46c0:	2300      	movs	r3, #0
    46c2:	60cb      	str	r3, [r1, #12]
    46c4:	4b06      	ldr	r3, [pc, #24]	; (46e0 <start_cal_process+0x40>)
    46c6:	604b      	str	r3, [r1, #4]
    46c8:	2303      	movs	r3, #3
    46ca:	608b      	str	r3, [r1, #8]
	err = onoff_request(mgr, cli);
    46cc:	4b05      	ldr	r3, [pc, #20]	; (46e4 <start_cal_process+0x44>)
    46ce:	6818      	ldr	r0, [r3, #0]
    46d0:	f005 ba6d 	b.w	9bae <onoff_request>
}
    46d4:	4770      	bx	lr
    46d6:	bf00      	nop
    46d8:	20001560 	.word	0x20001560
    46dc:	20001564 	.word	0x20001564
    46e0:	000047d1 	.word	0x000047d1
    46e4:	20001574 	.word	0x20001574

000046e8 <temp_sensor_init>:
{
    46e8:	b508      	push	{r3, lr}
	temp_sensor = DEVICE_DT_GET_OR_NULL(TEMP_NODE);
    46ea:	4b06      	ldr	r3, [pc, #24]	; (4704 <temp_sensor_init+0x1c>)
    46ec:	4806      	ldr	r0, [pc, #24]	; (4708 <temp_sensor_init+0x20>)
    46ee:	6018      	str	r0, [r3, #0]
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
    46f0:	f006 fcb2 	bl	b058 <z_device_is_ready>
	if ((temp_sensor != NULL) && !device_is_ready(temp_sensor)) {
    46f4:	b918      	cbnz	r0, 46fe <temp_sensor_init+0x16>
}
    46f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    46fa:	f7ff bfbb 	b.w	4674 <temp_sensor_init.part.0>
    46fe:	2000      	movs	r0, #0
    4700:	bd08      	pop	{r3, pc}
    4702:	bf00      	nop
    4704:	20001578 	.word	0x20001578
    4708:	0000b81c 	.word	0x0000b81c

0000470c <start_cycle>:
{
    470c:	b507      	push	{r0, r1, r2, lr}
	z_impl_k_timer_start(timer, duration, period);
    470e:	2200      	movs	r2, #0
    4710:	2300      	movs	r3, #0
    4712:	e9cd 2300 	strd	r2, r3, [sp]
    4716:	4808      	ldr	r0, [pc, #32]	; (4738 <start_cycle+0x2c>)
    4718:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    471c:	2300      	movs	r3, #0
    471e:	f005 f8bf 	bl	98a0 <z_impl_k_timer_start>
	clk_release(&mgrs[CLOCK_CONTROL_NRF_TYPE_HFCLK]);
    4722:	4b06      	ldr	r3, [pc, #24]	; (473c <start_cycle+0x30>)
	err = onoff_release(mgr);
    4724:	6818      	ldr	r0, [r3, #0]
    4726:	f005 fa8b 	bl	9c40 <onoff_release>
	cal_process_in_progress = 0;
    472a:	4b05      	ldr	r3, [pc, #20]	; (4740 <start_cycle+0x34>)
    472c:	2200      	movs	r2, #0
    472e:	601a      	str	r2, [r3, #0]
}
    4730:	b003      	add	sp, #12
    4732:	f85d fb04 	ldr.w	pc, [sp], #4
    4736:	bf00      	nop
    4738:	20000118 	.word	0x20000118
    473c:	20001574 	.word	0x20001574
    4740:	20001560 	.word	0x20001560

00004744 <measure_temperature>:
{
    4744:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int rc = sensor_sample_fetch(temp_sensor);
    4746:	4d1d      	ldr	r5, [pc, #116]	; (47bc <measure_temperature+0x78>)
    4748:	6828      	ldr	r0, [r5, #0]
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    474a:	6883      	ldr	r3, [r0, #8]
    474c:	4c1c      	ldr	r4, [pc, #112]	; (47c0 <measure_temperature+0x7c>)
    474e:	68db      	ldr	r3, [r3, #12]
    4750:	2139      	movs	r1, #57	; 0x39
    4752:	4798      	blx	r3
	if (rc == 0) {
    4754:	b170      	cbz	r0, 4774 <measure_temperature+0x30>
		calib_skip_cnt = 0;
    4756:	2300      	movs	r3, #0
    4758:	7023      	strb	r3, [r4, #0]
	int16_t diff = 0;
    475a:	461a      	mov	r2, r3
	if ((calib_skip_cnt == 0) ||
    475c:	7821      	ldrb	r1, [r4, #0]
    475e:	b109      	cbz	r1, 4764 <measure_temperature+0x20>
    4760:	2a01      	cmp	r2, #1
    4762:	dd20      	ble.n	47a6 <measure_temperature+0x62>
		prev_temperature = temperature;
    4764:	4a17      	ldr	r2, [pc, #92]	; (47c4 <measure_temperature+0x80>)
    4766:	8013      	strh	r3, [r2, #0]
	nrfx_clock_calibration_start();
    4768:	f001 ffe2 	bl	6730 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    476c:	2301      	movs	r3, #1
    476e:	7023      	strb	r3, [r4, #0]
}
    4770:	b003      	add	sp, #12
    4772:	bd30      	pop	{r4, r5, pc}
		rc = sensor_channel_get(temp_sensor, SENSOR_CHAN_DIE_TEMP,
    4774:	6828      	ldr	r0, [r5, #0]
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
    4776:	6883      	ldr	r3, [r0, #8]
    4778:	466a      	mov	r2, sp
    477a:	691b      	ldr	r3, [r3, #16]
    477c:	210c      	movs	r1, #12
    477e:	4798      	blx	r3
	if (rc == 0) {
    4780:	2800      	cmp	r0, #0
    4782:	d1e8      	bne.n	4756 <measure_temperature+0x12>
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    4784:	4a10      	ldr	r2, [pc, #64]	; (47c8 <measure_temperature+0x84>)
    4786:	9b01      	ldr	r3, [sp, #4]
    4788:	fb93 f3f2 	sdiv	r3, r3, r2
    478c:	9a00      	ldr	r2, [sp, #0]
    478e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		diff = abs(temperature - prev_temperature);
    4792:	4a0c      	ldr	r2, [pc, #48]	; (47c4 <measure_temperature+0x80>)
    4794:	f9b2 2000 	ldrsh.w	r2, [r2]
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    4798:	b21b      	sxth	r3, r3
		diff = abs(temperature - prev_temperature);
    479a:	1a9a      	subs	r2, r3, r2
void srand(unsigned int seed);
#endif /* CONFIG_MINIMAL_LIBC_RAND */

static inline int abs(int __n)
{
	return (__n < 0) ? -__n : __n;
    479c:	2a00      	cmp	r2, #0
    479e:	bfb8      	it	lt
    47a0:	4252      	neglt	r2, r2
    47a2:	b212      	sxth	r2, r2
    47a4:	e7da      	b.n	475c <measure_temperature+0x18>
		total_skips_cnt++;
    47a6:	4a09      	ldr	r2, [pc, #36]	; (47cc <measure_temperature+0x88>)
    47a8:	6813      	ldr	r3, [r2, #0]
		calib_skip_cnt--;
    47aa:	3901      	subs	r1, #1
		total_skips_cnt++;
    47ac:	3301      	adds	r3, #1
		calib_skip_cnt--;
    47ae:	7021      	strb	r1, [r4, #0]
		total_skips_cnt++;
    47b0:	6013      	str	r3, [r2, #0]
}
    47b2:	b003      	add	sp, #12
    47b4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		start_cycle();
    47b8:	f7ff bfa8 	b.w	470c <start_cycle>
    47bc:	20001578 	.word	0x20001578
    47c0:	2000196d 	.word	0x2000196d
    47c4:	20001944 	.word	0x20001944
    47c8:	0003d090 	.word	0x0003d090
    47cc:	20001580 	.word	0x20001580

000047d0 <cal_hf_callback>:
{
    47d0:	b508      	push	{r3, lr}
	if ((temp_sensor == NULL) || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    47d2:	4b07      	ldr	r3, [pc, #28]	; (47f0 <cal_hf_callback+0x20>)
    47d4:	681b      	ldr	r3, [r3, #0]
    47d6:	b92b      	cbnz	r3, 47e4 <cal_hf_callback+0x14>
	nrfx_clock_calibration_start();
    47d8:	f001 ffaa 	bl	6730 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    47dc:	4b05      	ldr	r3, [pc, #20]	; (47f4 <cal_hf_callback+0x24>)
    47de:	2201      	movs	r2, #1
    47e0:	701a      	strb	r2, [r3, #0]
}
    47e2:	bd08      	pop	{r3, pc}
    47e4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_submit(&temp_measure_work);
    47e8:	4803      	ldr	r0, [pc, #12]	; (47f8 <cal_hf_callback+0x28>)
    47ea:	f004 baf7 	b.w	8ddc <k_work_submit>
    47ee:	bf00      	nop
    47f0:	20001578 	.word	0x20001578
    47f4:	2000196d 	.word	0x2000196d
    47f8:	20000018 	.word	0x20000018

000047fc <z_nrf_clock_calibration_init>:
	mgrs = onoff_mgrs;
    47fc:	4b03      	ldr	r3, [pc, #12]	; (480c <z_nrf_clock_calibration_init+0x10>)
	total_cnt = 0;
    47fe:	4a04      	ldr	r2, [pc, #16]	; (4810 <z_nrf_clock_calibration_init+0x14>)
	mgrs = onoff_mgrs;
    4800:	6018      	str	r0, [r3, #0]
	total_cnt = 0;
    4802:	2300      	movs	r3, #0
    4804:	6013      	str	r3, [r2, #0]
	total_skips_cnt = 0;
    4806:	4a03      	ldr	r2, [pc, #12]	; (4814 <z_nrf_clock_calibration_init+0x18>)
    4808:	6013      	str	r3, [r2, #0]
}
    480a:	4770      	bx	lr
    480c:	20001574 	.word	0x20001574
    4810:	2000157c 	.word	0x2000157c
    4814:	20001580 	.word	0x20001580

00004818 <z_nrf_clock_calibration_lfclk_started>:
SYS_INIT(temp_sensor_init, APPLICATION, 0);
#endif /* CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP */

static void start_unconditional_cal_process(void)
{
	calib_skip_cnt = 0;
    4818:	4b02      	ldr	r3, [pc, #8]	; (4824 <z_nrf_clock_calibration_lfclk_started+0xc>)
    481a:	2200      	movs	r2, #0
    481c:	701a      	strb	r2, [r3, #0]
	start_cal_process();
    481e:	f7ff bf3f 	b.w	46a0 <start_cal_process>
    4822:	bf00      	nop
    4824:	2000196d 	.word	0x2000196d

00004828 <z_nrf_clock_calibration_lfclk_stopped>:
	z_impl_k_timer_stop(timer);
    4828:	4801      	ldr	r0, [pc, #4]	; (4830 <z_nrf_clock_calibration_lfclk_stopped+0x8>)
    482a:	f006 bee1 	b.w	b5f0 <z_impl_k_timer_stop>
    482e:	bf00      	nop
    4830:	20000118 	.word	0x20000118

00004834 <z_nrf_clock_calibration_done_handler>:
	LOG_DBG("Calibration stopped");
}

void z_nrf_clock_calibration_done_handler(void)
{
	total_cnt++;
    4834:	4a02      	ldr	r2, [pc, #8]	; (4840 <z_nrf_clock_calibration_done_handler+0xc>)
    4836:	6813      	ldr	r3, [r2, #0]
    4838:	3301      	adds	r3, #1
    483a:	6013      	str	r3, [r2, #0]
	LOG_DBG("Calibration done.");

	start_cycle();
    483c:	f7ff bf66 	b.w	470c <start_cycle>
    4840:	2000157c 	.word	0x2000157c

00004844 <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    4844:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    4846:	4c04      	ldr	r4, [pc, #16]	; (4858 <rtt_console_init+0x14>)
    4848:	4620      	mov	r0, r4
    484a:	f7fc f943 	bl	ad4 <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    484e:	4620      	mov	r0, r4
    4850:	f7fe feb2 	bl	35b8 <__stdout_hook_install>

	return 0;
}
    4854:	2000      	movs	r0, #0
    4856:	bd10      	pop	{r4, pc}
    4858:	0000485d 	.word	0x0000485d

0000485c <rtt_console_out>:
{
    485c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    4860:	f8df 805c 	ldr.w	r8, [pc, #92]	; 48c0 <rtt_console_out+0x64>
    4864:	4e17      	ldr	r6, [pc, #92]	; (48c4 <rtt_console_out+0x68>)
	char c = (char)character;
    4866:	f88d 0007 	strb.w	r0, [sp, #7]
{
    486a:	4604      	mov	r4, r0
	char c = (char)character;
    486c:	2503      	movs	r5, #3
    486e:	f04f 33ff 	mov.w	r3, #4294967295
    4872:	f04f 32ff 	mov.w	r2, #4294967295
    4876:	4640      	mov	r0, r8
    4878:	f004 f87a 	bl	8970 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    487c:	2201      	movs	r2, #1
    487e:	f10d 0107 	add.w	r1, sp, #7
    4882:	2000      	movs	r0, #0
    4884:	f003 fd84 	bl	8390 <SEGGER_RTT_WriteNoLock>
    4888:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    488a:	4640      	mov	r0, r8
    488c:	f004 f8e8 	bl	8a60 <z_impl_k_mutex_unlock>
		if (cnt) {
    4890:	b12f      	cbz	r7, 489e <rtt_console_out+0x42>
			host_present = true;
    4892:	2301      	movs	r3, #1
    4894:	7033      	strb	r3, [r6, #0]
}
    4896:	4620      	mov	r0, r4
    4898:	b002      	add	sp, #8
    489a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    489e:	7833      	ldrb	r3, [r6, #0]
    48a0:	2b00      	cmp	r3, #0
    48a2:	d0f8      	beq.n	4896 <rtt_console_out+0x3a>
			if (max_cnt) {
    48a4:	3d01      	subs	r5, #1
    48a6:	d008      	beq.n	48ba <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    48a8:	f006 fc0d 	bl	b0c6 <k_is_in_isr>
    48ac:	2800      	cmp	r0, #0
    48ae:	d1de      	bne.n	486e <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    48b0:	2100      	movs	r1, #0
    48b2:	2042      	movs	r0, #66	; 0x42
    48b4:	f004 fdd8 	bl	9468 <z_impl_k_sleep>
    48b8:	e7d9      	b.n	486e <rtt_console_out+0x12>
				host_present = false;
    48ba:	7035      	strb	r5, [r6, #0]
    48bc:	e7eb      	b.n	4896 <rtt_console_out+0x3a>
    48be:	bf00      	nop
    48c0:	2000016c 	.word	0x2000016c
    48c4:	2000196e 	.word	0x2000196e

000048c8 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    48c8:	b530      	push	{r4, r5, lr}
	return port->config;
    48ca:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    48cc:	7b04      	ldrb	r4, [r0, #12]
    48ce:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    48d2:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    48d6:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    48da:	b085      	sub	sp, #20
    48dc:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    48e0:	d104      	bne.n	48ec <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    48e2:	4628      	mov	r0, r5
    48e4:	f002 f9bc 	bl	6c60 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    48e8:	2000      	movs	r0, #0
    48ea:	e02e      	b.n	494a <gpio_nrfx_pin_interrupt_configure+0x82>
	if (mode == GPIO_INT_MODE_LEVEL) {
    48ec:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    48f0:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    48f4:	d12b      	bne.n	494e <gpio_nrfx_pin_interrupt_configure+0x86>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    48f6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    48fa:	bf0c      	ite	eq
    48fc:	2304      	moveq	r3, #4
    48fe:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    4900:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4904:	6883      	ldr	r3, [r0, #8]
    4906:	fa23 f101 	lsr.w	r1, r3, r1
    490a:	07c9      	lsls	r1, r1, #31
    490c:	d42b      	bmi.n	4966 <gpio_nrfx_pin_interrupt_configure+0x9e>
    490e:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    4912:	d128      	bne.n	4966 <gpio_nrfx_pin_interrupt_configure+0x9e>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    4914:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4918:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    491c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4924:	07db      	lsls	r3, r3, #31
    4926:	d41e      	bmi.n	4966 <gpio_nrfx_pin_interrupt_configure+0x9e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4928:	f10d 0407 	add.w	r4, sp, #7
    492c:	4621      	mov	r1, r4
    492e:	4628      	mov	r0, r5
    4930:	f002 f8fe 	bl	6b30 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    4934:	4b14      	ldr	r3, [pc, #80]	; (4988 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    4936:	4298      	cmp	r0, r3
    4938:	d114      	bne.n	4964 <gpio_nrfx_pin_interrupt_configure+0x9c>
			err = nrfx_gpiote_channel_alloc(&ch);
    493a:	4620      	mov	r0, r4
    493c:	f002 f946 	bl	6bcc <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    4940:	4b12      	ldr	r3, [pc, #72]	; (498c <gpio_nrfx_pin_interrupt_configure+0xc4>)
    4942:	4298      	cmp	r0, r3
    4944:	d00e      	beq.n	4964 <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
    4946:	f06f 000b 	mvn.w	r0, #11
}
    494a:	b005      	add	sp, #20
    494c:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    494e:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    4952:	d005      	beq.n	4960 <gpio_nrfx_pin_interrupt_configure+0x98>
    4954:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    4958:	bf0c      	ite	eq
    495a:	2302      	moveq	r3, #2
    495c:	2301      	movne	r3, #1
    495e:	e7cf      	b.n	4900 <gpio_nrfx_pin_interrupt_configure+0x38>
    4960:	2303      	movs	r3, #3
    4962:	e7cd      	b.n	4900 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    4964:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4966:	2300      	movs	r3, #0
    4968:	4619      	mov	r1, r3
    496a:	aa02      	add	r2, sp, #8
    496c:	4628      	mov	r0, r5
    496e:	f001 ffb7 	bl	68e0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4972:	4b06      	ldr	r3, [pc, #24]	; (498c <gpio_nrfx_pin_interrupt_configure+0xc4>)
    4974:	4298      	cmp	r0, r3
    4976:	d104      	bne.n	4982 <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4978:	2101      	movs	r1, #1
    497a:	4628      	mov	r0, r5
    497c:	f002 f92c 	bl	6bd8 <nrfx_gpiote_trigger_enable>
    4980:	e7b2      	b.n	48e8 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    4982:	f06f 0004 	mvn.w	r0, #4
    4986:	e7e0      	b.n	494a <gpio_nrfx_pin_interrupt_configure+0x82>
    4988:	0bad0004 	.word	0x0bad0004
    498c:	0bad0000 	.word	0x0bad0000

00004990 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4990:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    4992:	f002 f90b 	bl	6bac <nrfx_gpiote_is_init>
    4996:	4604      	mov	r4, r0
    4998:	b968      	cbnz	r0, 49b6 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    499a:	f002 f8df 	bl	6b5c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    499e:	4b08      	ldr	r3, [pc, #32]	; (49c0 <gpio_nrfx_init+0x30>)
    49a0:	4298      	cmp	r0, r3
    49a2:	d10a      	bne.n	49ba <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    49a4:	4807      	ldr	r0, [pc, #28]	; (49c4 <gpio_nrfx_init+0x34>)
    49a6:	4621      	mov	r1, r4
    49a8:	f002 f8bc 	bl	6b24 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    49ac:	4622      	mov	r2, r4
    49ae:	2105      	movs	r1, #5
    49b0:	2006      	movs	r0, #6
    49b2:	f7fe f8bb 	bl	2b2c <z_arm_irq_priority_set>
		return 0;
    49b6:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    49b8:	bd10      	pop	{r4, pc}
		return -EIO;
    49ba:	f06f 0004 	mvn.w	r0, #4
    49be:	e7fb      	b.n	49b8 <gpio_nrfx_init+0x28>
    49c0:	0bad0000 	.word	0x0bad0000
    49c4:	000049c9 	.word	0x000049c9

000049c8 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    49c8:	0943      	lsrs	r3, r0, #5
{
    49ca:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    49cc:	d110      	bne.n	49f0 <nrfx_gpio_handler+0x28>
	return list->head;
    49ce:	4b09      	ldr	r3, [pc, #36]	; (49f4 <nrfx_gpio_handler+0x2c>)
    49d0:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    49d2:	b169      	cbz	r1, 49f0 <nrfx_gpio_handler+0x28>
	gpio_fire_callbacks(list, port, BIT(pin));
    49d4:	2501      	movs	r5, #1
	return node->next;
    49d6:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    49d8:	4e07      	ldr	r6, [pc, #28]	; (49f8 <nrfx_gpio_handler+0x30>)
    49da:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
    49dc:	688a      	ldr	r2, [r1, #8]
    49de:	402a      	ands	r2, r5
    49e0:	d002      	beq.n	49e8 <nrfx_gpio_handler+0x20>
			cb->handler(port, cb, cb->pin_mask & pins);
    49e2:	684b      	ldr	r3, [r1, #4]
    49e4:	4630      	mov	r0, r6
    49e6:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    49e8:	b114      	cbz	r4, 49f0 <nrfx_gpio_handler+0x28>
    49ea:	4621      	mov	r1, r4
    49ec:	6824      	ldr	r4, [r4, #0]
    49ee:	e7f5      	b.n	49dc <nrfx_gpio_handler+0x14>
}
    49f0:	bd70      	pop	{r4, r5, r6, pc}
    49f2:	bf00      	nop
    49f4:	20001584 	.word	0x20001584
    49f8:	0000b7bc 	.word	0x0000b7bc

000049fc <gpio_nrfx_pin_configure>:
{
    49fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    4a00:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4a02:	7b3b      	ldrb	r3, [r7, #12]
    4a04:	f001 051f 	and.w	r5, r1, #31
{
    4a08:	b085      	sub	sp, #20
    4a0a:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4a0c:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    4a10:	4614      	mov	r4, r2
    4a12:	b9ca      	cbnz	r2, 4a48 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    4a14:	a902      	add	r1, sp, #8
    4a16:	4628      	mov	r0, r5
    4a18:	f002 f88a 	bl	6b30 <nrfx_gpiote_channel_get>
    4a1c:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    4a1e:	4628      	mov	r0, r5
    4a20:	f002 f946 	bl	6cb0 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    4a24:	4b4a      	ldr	r3, [pc, #296]	; (4b50 <gpio_nrfx_pin_configure+0x154>)
    4a26:	4298      	cmp	r0, r3
    4a28:	d004      	beq.n	4a34 <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    4a2a:	f06f 0004 	mvn.w	r0, #4
}
    4a2e:	b005      	add	sp, #20
    4a30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    4a34:	4284      	cmp	r4, r0
    4a36:	d105      	bne.n	4a44 <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    4a38:	f89d 0008 	ldrb.w	r0, [sp, #8]
    4a3c:	f002 f8c0 	bl	6bc0 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    4a40:	42a0      	cmp	r0, r4
    4a42:	d1f2      	bne.n	4a2a <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4a44:	2000      	movs	r0, #0
    4a46:	e7f2      	b.n	4a2e <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4a48:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    4a4c:	f10d 0103 	add.w	r1, sp, #3
    4a50:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    4a52:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    4a56:	f002 f86b 	bl	6b30 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4a5a:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    4a5c:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4a5e:	aa02      	add	r2, sp, #8
    4a60:	4649      	mov	r1, r9
    4a62:	4628      	mov	r0, r5
    4a64:	f001 ff3c 	bl	68e0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4a68:	4b39      	ldr	r3, [pc, #228]	; (4b50 <gpio_nrfx_pin_configure+0x154>)
    4a6a:	4298      	cmp	r0, r3
    4a6c:	d002      	beq.n	4a74 <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    4a6e:	f06f 0015 	mvn.w	r0, #21
    4a72:	e7dc      	b.n	4a2e <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    4a74:	4580      	cmp	r8, r0
    4a76:	d103      	bne.n	4a80 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    4a78:	f89d 0003 	ldrb.w	r0, [sp, #3]
    4a7c:	f002 f8a0 	bl	6bc0 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    4a80:	03a3      	lsls	r3, r4, #14
    4a82:	d551      	bpl.n	4b28 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    4a84:	f240 6306 	movw	r3, #1542	; 0x606
    4a88:	4023      	ands	r3, r4
    4a8a:	f240 2206 	movw	r2, #518	; 0x206
    4a8e:	4293      	cmp	r3, r2
    4a90:	d03b      	beq.n	4b0a <gpio_nrfx_pin_configure+0x10e>
    4a92:	d80c      	bhi.n	4aae <gpio_nrfx_pin_configure+0xb2>
    4a94:	2b06      	cmp	r3, #6
    4a96:	d015      	beq.n	4ac4 <gpio_nrfx_pin_configure+0xc8>
    4a98:	d804      	bhi.n	4aa4 <gpio_nrfx_pin_configure+0xa8>
    4a9a:	b19b      	cbz	r3, 4ac4 <gpio_nrfx_pin_configure+0xc8>
    4a9c:	2b02      	cmp	r3, #2
    4a9e:	d1e6      	bne.n	4a6e <gpio_nrfx_pin_configure+0x72>
    4aa0:	2304      	movs	r3, #4
    4aa2:	e00f      	b.n	4ac4 <gpio_nrfx_pin_configure+0xc8>
    4aa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4aa8:	d1e1      	bne.n	4a6e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    4aaa:	2301      	movs	r3, #1
    4aac:	e00a      	b.n	4ac4 <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    4aae:	f240 4202 	movw	r2, #1026	; 0x402
    4ab2:	4293      	cmp	r3, r2
    4ab4:	d02b      	beq.n	4b0e <gpio_nrfx_pin_configure+0x112>
    4ab6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    4aba:	d02a      	beq.n	4b12 <gpio_nrfx_pin_configure+0x116>
    4abc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    4ac0:	d1d5      	bne.n	4a6e <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    4ac2:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    4ac4:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    4ac8:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    4acc:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    4ad0:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    4ad2:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    4ad6:	bf54      	ite	pl
    4ad8:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    4adc:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4ade:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    4ae0:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4ae4:	d517      	bpl.n	4b16 <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    4ae6:	687b      	ldr	r3, [r7, #4]
    4ae8:	2101      	movs	r1, #1
    4aea:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    4aee:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    4af2:	2200      	movs	r2, #0
    4af4:	a901      	add	r1, sp, #4
    4af6:	4628      	mov	r0, r5
    4af8:	f001 ff9c 	bl	6a34 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4afc:	4b14      	ldr	r3, [pc, #80]	; (4b50 <gpio_nrfx_pin_configure+0x154>)
    4afe:	4298      	cmp	r0, r3
    4b00:	bf14      	ite	ne
    4b02:	f06f 0015 	mvnne.w	r0, #21
    4b06:	2000      	moveq	r0, #0
    4b08:	e791      	b.n	4a2e <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    4b0a:	2307      	movs	r3, #7
    4b0c:	e7da      	b.n	4ac4 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    4b0e:	2305      	movs	r3, #5
    4b10:	e7d8      	b.n	4ac4 <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    4b12:	2303      	movs	r3, #3
    4b14:	e7d6      	b.n	4ac4 <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4b16:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    4b18:	bf41      	itttt	mi
    4b1a:	687b      	ldrmi	r3, [r7, #4]
    4b1c:	2101      	movmi	r1, #1
    4b1e:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    4b22:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    4b26:	e7e4      	b.n	4af2 <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    4b28:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4b2a:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    4b2e:	bf54      	ite	pl
    4b30:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    4b34:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4b36:	461a      	mov	r2, r3
    4b38:	a901      	add	r1, sp, #4
    4b3a:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    4b3c:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4b40:	f001 fece 	bl	68e0 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4b44:	4b02      	ldr	r3, [pc, #8]	; (4b50 <gpio_nrfx_pin_configure+0x154>)
    4b46:	4298      	cmp	r0, r3
    4b48:	f43f af7c 	beq.w	4a44 <gpio_nrfx_pin_configure+0x48>
    4b4c:	e78f      	b.n	4a6e <gpio_nrfx_pin_configure+0x72>
    4b4e:	bf00      	nop
    4b50:	0bad0000 	.word	0x0bad0000

00004b54 <qdec_nrfx_channel_get>:
	const int32_t steps = DT_INST_PROP(0, steps);

	ARG_UNUSED(dev);
	LOG_DBG("");

	if (chan != SENSOR_CHAN_ROTATION) {
    4b54:	2922      	cmp	r1, #34	; 0x22
{
    4b56:	b510      	push	{r4, lr}
	if (chan != SENSOR_CHAN_ROTATION) {
    4b58:	d115      	bne.n	4b86 <qdec_nrfx_channel_get+0x32>
	__asm__ volatile(
    4b5a:	f04f 0320 	mov.w	r3, #32
    4b5e:	f3ef 8011 	mrs	r0, BASEPRI
    4b62:	f383 8812 	msr	BASEPRI_MAX, r3
    4b66:	f3bf 8f6f 	isb	sy
		return -ENOTSUP;
	}

	key = irq_lock();
	acc = data->acc;
    4b6a:	4908      	ldr	r1, [pc, #32]	; (4b8c <qdec_nrfx_channel_get+0x38>)
	data->acc = 0;
    4b6c:	2400      	movs	r4, #0
	acc = data->acc;
    4b6e:	680b      	ldr	r3, [r1, #0]
	data->acc = 0;
    4b70:	600c      	str	r4, [r1, #0]
	__asm__ volatile(
    4b72:	f380 8811 	msr	BASEPRI, r0
    4b76:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BUILD_ASSERT(steps > 0, "only positive number valid");
	BUILD_ASSERT(steps <= 2048, "overflow possible");

	val->val1 = (acc * FULL_ANGLE) / steps;
    4b7a:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    4b7e:	6013      	str	r3, [r2, #0]
	val->val2 = (acc * FULL_ANGLE) - (val->val1 * steps);
    4b80:	4620      	mov	r0, r4
    4b82:	6054      	str	r4, [r2, #4]
		val->val2 *= 1000000;
		val->val2 /= steps;
	}

	return 0;
}
    4b84:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    4b86:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4b8a:	e7fb      	b.n	4b84 <qdec_nrfx_channel_get+0x30>
    4b8c:	20001590 	.word	0x20001590

00004b90 <qdec_nrfx_trigger_set>:
	unsigned int key;

	ARG_UNUSED(dev);
	LOG_DBG("");

	if (trig->type != SENSOR_TRIG_DATA_READY) {
    4b90:	880b      	ldrh	r3, [r1, #0]
    4b92:	2b01      	cmp	r3, #1
    4b94:	d114      	bne.n	4bc0 <qdec_nrfx_trigger_set+0x30>
		return -ENOTSUP;
	}

	if ((trig->chan != SENSOR_CHAN_ALL) &&
    4b96:	884b      	ldrh	r3, [r1, #2]
    4b98:	2b39      	cmp	r3, #57	; 0x39
    4b9a:	d001      	beq.n	4ba0 <qdec_nrfx_trigger_set+0x10>
    4b9c:	2b22      	cmp	r3, #34	; 0x22
    4b9e:	d10f      	bne.n	4bc0 <qdec_nrfx_trigger_set+0x30>
	__asm__ volatile(
    4ba0:	f04f 0120 	mov.w	r1, #32
    4ba4:	f3ef 8311 	mrs	r3, BASEPRI
    4ba8:	f381 8812 	msr	BASEPRI_MAX, r1
    4bac:	f3bf 8f6f 	isb	sy
	    (trig->chan != SENSOR_CHAN_ROTATION)) {
		return -ENOTSUP;
	}

	key = irq_lock();
	data->data_ready_handler = handler;
    4bb0:	4905      	ldr	r1, [pc, #20]	; (4bc8 <qdec_nrfx_trigger_set+0x38>)
    4bb2:	604a      	str	r2, [r1, #4]
	__asm__ volatile(
    4bb4:	f383 8811 	msr	BASEPRI, r3
    4bb8:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	return 0;
    4bbc:	2000      	movs	r0, #0
    4bbe:	4770      	bx	lr
		return -ENOTSUP;
    4bc0:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    4bc4:	4770      	bx	lr
    4bc6:	bf00      	nop
    4bc8:	20001590 	.word	0x20001590

00004bcc <accumulate.constprop.0>:
static void accumulate(struct qdec_nrfx_data *data, int16_t acc)
    4bcc:	b510      	push	{r4, lr}
	__asm__ volatile(
    4bce:	f04f 0320 	mov.w	r3, #32
    4bd2:	f3ef 8111 	mrs	r1, BASEPRI
    4bd6:	f383 8812 	msr	BASEPRI_MAX, r3
    4bda:	f3bf 8f6f 	isb	sy
	bool overflow = ((acc > 0) && (ACC_MAX - acc < data->acc)) ||
    4bde:	2800      	cmp	r0, #0
    4be0:	4b0b      	ldr	r3, [pc, #44]	; (4c10 <accumulate.constprop.0+0x44>)
    4be2:	dd0a      	ble.n	4bfa <accumulate.constprop.0+0x2e>
    4be4:	681c      	ldr	r4, [r3, #0]
    4be6:	f5c0 02b6 	rsb	r2, r0, #5963776	; 0x5b0000
    4bea:	f502 62b6 	add.w	r2, r2, #1456	; 0x5b0
    4bee:	42a2      	cmp	r2, r4
    4bf0:	db09      	blt.n	4c06 <accumulate.constprop.0+0x3a>
		data->acc += acc;
    4bf2:	681a      	ldr	r2, [r3, #0]
    4bf4:	4410      	add	r0, r2
    4bf6:	6018      	str	r0, [r3, #0]
    4bf8:	e005      	b.n	4c06 <accumulate.constprop.0+0x3a>
	bool overflow = ((acc > 0) && (ACC_MAX - acc < data->acc)) ||
    4bfa:	d0fa      	beq.n	4bf2 <accumulate.constprop.0+0x26>
			((acc < 0) && (ACC_MIN - acc > data->acc));
    4bfc:	4a05      	ldr	r2, [pc, #20]	; (4c14 <accumulate.constprop.0+0x48>)
    4bfe:	681c      	ldr	r4, [r3, #0]
    4c00:	1a12      	subs	r2, r2, r0
    4c02:	42a2      	cmp	r2, r4
    4c04:	ddf5      	ble.n	4bf2 <accumulate.constprop.0+0x26>
	__asm__ volatile(
    4c06:	f381 8811 	msr	BASEPRI, r1
    4c0a:	f3bf 8f6f 	isb	sy
}
    4c0e:	bd10      	pop	{r4, pc}
    4c10:	20001590 	.word	0x20001590
    4c14:	ffa4fa50 	.word	0xffa4fa50

00004c18 <qdec_nrfx_event_handler>:

static void qdec_nrfx_event_handler(nrfx_qdec_event_t event)
{
    4c18:	b590      	push	{r4, r7, lr}
    4c1a:	b085      	sub	sp, #20
    4c1c:	af00      	add	r7, sp, #0
    4c1e:	e9c7 0100 	strd	r0, r1, [r7]
    4c22:	883b      	ldrh	r3, [r7, #0]
	sensor_trigger_handler_t handler;
	unsigned int key;

	switch (event.type) {
    4c24:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
    4c28:	d11d      	bne.n	4c66 <qdec_nrfx_event_handler+0x4e>
	case NRF_QDEC_EVENT_REPORTRDY:
		accumulate(&qdec_nrfx_data, event.data.report.acc);
    4c2a:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
    4c2e:	f7ff ffcd 	bl	4bcc <accumulate.constprop.0>
	__asm__ volatile(
    4c32:	f04f 0320 	mov.w	r3, #32
    4c36:	f3ef 8211 	mrs	r2, BASEPRI
    4c3a:	f383 8812 	msr	BASEPRI_MAX, r3
    4c3e:	f3bf 8f6f 	isb	sy

		key = irq_lock();
		handler = qdec_nrfx_data.data_ready_handler;
    4c42:	4b11      	ldr	r3, [pc, #68]	; (4c88 <qdec_nrfx_event_handler+0x70>)
    4c44:	685b      	ldr	r3, [r3, #4]
	__asm__ volatile(
    4c46:	f382 8811 	msr	BASEPRI, r2
    4c4a:	f3bf 8f6f 	isb	sy
		irq_unlock(key);

		if (handler) {
    4c4e:	b13b      	cbz	r3, 4c60 <qdec_nrfx_event_handler+0x48>
			struct sensor_trigger trig = {
    4c50:	2201      	movs	r2, #1
    4c52:	81ba      	strh	r2, [r7, #12]
    4c54:	2222      	movs	r2, #34	; 0x22
				.type = SENSOR_TRIG_DATA_READY,
				.chan = SENSOR_CHAN_ROTATION,
			};

			handler(DEVICE_DT_INST_GET(0), &trig);
    4c56:	480d      	ldr	r0, [pc, #52]	; (4c8c <qdec_nrfx_event_handler+0x74>)
			struct sensor_trigger trig = {
    4c58:	81fa      	strh	r2, [r7, #14]
			handler(DEVICE_DT_INST_GET(0), &trig);
    4c5a:	f107 010c 	add.w	r1, r7, #12
    4c5e:	4798      	blx	r3

	default:
		LOG_ERR("unhandled event (0x%x)", event.type);
		break;
	}
}
    4c60:	3714      	adds	r7, #20
    4c62:	46bd      	mov	sp, r7
    4c64:	bd90      	pop	{r4, r7, pc}
		LOG_ERR("unhandled event (0x%x)", event.type);
    4c66:	490a      	ldr	r1, [pc, #40]	; (4c90 <qdec_nrfx_event_handler+0x78>)
    4c68:	466c      	mov	r4, sp
    4c6a:	b088      	sub	sp, #32
    4c6c:	466a      	mov	r2, sp
	switch (event.type) {
    4c6e:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("unhandled event (0x%x)", event.type);
    4c72:	2303      	movs	r3, #3
    4c74:	f842 3f10 	str.w	r3, [r2, #16]!
    4c78:	4806      	ldr	r0, [pc, #24]	; (4c94 <qdec_nrfx_event_handler+0x7c>)
    4c7a:	2300      	movs	r3, #0
    4c7c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4c80:	f005 fccc 	bl	a61c <z_impl_z_log_msg2_static_create>
    4c84:	46a5      	mov	sp, r4
}
    4c86:	e7eb      	b.n	4c60 <qdec_nrfx_event_handler+0x48>
    4c88:	20001590 	.word	0x20001590
    4c8c:	0000b804 	.word	0x0000b804
    4c90:	0000c6fd 	.word	0x0000c6fd
    4c94:	0000b9c4 	.word	0x0000b9c4

00004c98 <qdec_nrfx_init.part.0>:
#endif
}

NRF_DT_CHECK_PIN_ASSIGNMENTS(DT_DRV_INST(0), 1, a_pin, b_pin, led_pin);

static int qdec_nrfx_init(const struct device *dev)
    4c98:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (ret < 0) {
		return ret;
	}
#endif

	nerr = nrfx_qdec_init(&config, qdec_nrfx_event_handler);
    4c9a:	491a      	ldr	r1, [pc, #104]	; (4d04 <qdec_nrfx_init.part.0+0x6c>)
    4c9c:	481a      	ldr	r0, [pc, #104]	; (4d08 <qdec_nrfx_init.part.0+0x70>)
    4c9e:	f002 f9af 	bl	7000 <nrfx_qdec_init>
	if (nerr == NRFX_ERROR_INVALID_STATE) {
    4ca2:	4b1a      	ldr	r3, [pc, #104]	; (4d0c <qdec_nrfx_init.part.0+0x74>)
    4ca4:	4298      	cmp	r0, r3
    4ca6:	d10f      	bne.n	4cc8 <qdec_nrfx_init.part.0+0x30>
		LOG_ERR("qdec already in use");
    4ca8:	4b19      	ldr	r3, [pc, #100]	; (4d10 <qdec_nrfx_init.part.0+0x78>)
    4caa:	9305      	str	r3, [sp, #20]
    4cac:	2302      	movs	r3, #2
    4cae:	9304      	str	r3, [sp, #16]
    4cb0:	4818      	ldr	r0, [pc, #96]	; (4d14 <qdec_nrfx_init.part.0+0x7c>)
    4cb2:	2300      	movs	r3, #0
    4cb4:	aa04      	add	r2, sp, #16
    4cb6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4cba:	f005 fcaf 	bl	a61c <z_impl_z_log_msg2_static_create>
		return -EBUSY;
    4cbe:	f06f 000f 	mvn.w	r0, #15

	qdec_nrfx_gpio_ctrl(true);
	nrfx_qdec_enable();

	return 0;
}
    4cc2:	b007      	add	sp, #28
    4cc4:	f85d fb04 	ldr.w	pc, [sp], #4
	} else if (nerr != NRFX_SUCCESS) {
    4cc8:	4b13      	ldr	r3, [pc, #76]	; (4d18 <qdec_nrfx_init.part.0+0x80>)
    4cca:	4298      	cmp	r0, r3
    4ccc:	d00d      	beq.n	4cea <qdec_nrfx_init.part.0+0x52>
		LOG_ERR("failed to initialize qdec");
    4cce:	4b13      	ldr	r3, [pc, #76]	; (4d1c <qdec_nrfx_init.part.0+0x84>)
    4cd0:	9305      	str	r3, [sp, #20]
    4cd2:	2302      	movs	r3, #2
    4cd4:	9304      	str	r3, [sp, #16]
    4cd6:	480f      	ldr	r0, [pc, #60]	; (4d14 <qdec_nrfx_init.part.0+0x7c>)
    4cd8:	2300      	movs	r3, #0
    4cda:	aa04      	add	r2, sp, #16
    4cdc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    4ce0:	f005 fc9c 	bl	a61c <z_impl_z_log_msg2_static_create>
		return -EFAULT;
    4ce4:	f06f 000d 	mvn.w	r0, #13
    4ce8:	e7eb      	b.n	4cc2 <qdec_nrfx_init.part.0+0x2a>
    p_reg->OUTCLR = clr_mask;
    4cea:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    4cee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4cf2:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = cnf;
    4cf6:	2203      	movs	r2, #3
    4cf8:	f8c3 2778 	str.w	r2, [r3, #1912]	; 0x778
	nrfx_qdec_enable();
    4cfc:	f002 f9ec 	bl	70d8 <nrfx_qdec_enable>
	return 0;
    4d00:	2000      	movs	r0, #0
    4d02:	e7de      	b.n	4cc2 <qdec_nrfx_init.part.0+0x2a>
    4d04:	00004c19 	.word	0x00004c19
    4d08:	0000bba0 	.word	0x0000bba0
    4d0c:	0bad0005 	.word	0x0bad0005
    4d10:	0000c714 	.word	0x0000c714
    4d14:	0000b9c4 	.word	0x0000b9c4
    4d18:	0bad0000 	.word	0x0bad0000
    4d1c:	0000c728 	.word	0x0000c728

00004d20 <qdec_nrfx_init>:
{
    4d20:	b507      	push	{r0, r1, r2, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4d22:	2200      	movs	r2, #0
    4d24:	2101      	movs	r1, #1
    4d26:	2012      	movs	r0, #18
    4d28:	f7fd ff00 	bl	2b2c <z_arm_irq_priority_set>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    4d2c:	480b      	ldr	r0, [pc, #44]	; (4d5c <qdec_nrfx_init+0x3c>)
    4d2e:	aa01      	add	r2, sp, #4
    4d30:	2100      	movs	r1, #0
    4d32:	f005 fefc 	bl	ab2e <pinctrl_lookup_state>
	if (ret < 0) {
    4d36:	2800      	cmp	r0, #0
    4d38:	db0c      	blt.n	4d54 <qdec_nrfx_init+0x34>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    4d3a:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    4d3c:	4a08      	ldr	r2, [pc, #32]	; (4d60 <qdec_nrfx_init+0x40>)
    4d3e:	7919      	ldrb	r1, [r3, #4]
    4d40:	6818      	ldr	r0, [r3, #0]
    4d42:	f005 ff29 	bl	ab98 <pinctrl_configure_pins>
	if (ret < 0) {
    4d46:	2800      	cmp	r0, #0
    4d48:	db04      	blt.n	4d54 <qdec_nrfx_init+0x34>
}
    4d4a:	b003      	add	sp, #12
    4d4c:	f85d eb04 	ldr.w	lr, [sp], #4
    4d50:	f7ff bfa2 	b.w	4c98 <qdec_nrfx_init.part.0>
    4d54:	b003      	add	sp, #12
    4d56:	f85d fb04 	ldr.w	pc, [sp], #4
    4d5a:	bf00      	nop
    4d5c:	0000bb84 	.word	0x0000bb84
    4d60:	40012000 	.word	0x40012000

00004d64 <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    4d64:	4b01      	ldr	r3, [pc, #4]	; (4d6c <hfclk_on_callback+0x8>)
    4d66:	2201      	movs	r2, #1
    4d68:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    4d6a:	4770      	bx	lr
    4d6c:	4000c000 	.word	0x4000c000

00004d70 <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    4d70:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
    4d72:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
    4d74:	d10b      	bne.n	4d8e <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    4d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    4d78:	4906      	ldr	r1, [pc, #24]	; (4d94 <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
    4d7a:	4807      	ldr	r0, [pc, #28]	; (4d98 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    4d7c:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
    4d7e:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
    4d82:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
    4d86:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    4d88:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    4d8a:	2000      	movs	r0, #0
    4d8c:	4770      	bx	lr
		return -ENOTSUP;
    4d8e:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    4d92:	4770      	bx	lr
    4d94:	0003d090 	.word	0x0003d090
    4d98:	000f4240 	.word	0x000f4240

00004d9c <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4d9c:	4b04      	ldr	r3, [pc, #16]	; (4db0 <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
    4d9e:	6900      	ldr	r0, [r0, #16]
    4da0:	2200      	movs	r2, #0
    4da2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4da6:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	z_impl_k_sem_give(sem);
    4daa:	f003 becf 	b.w	8b4c <z_impl_k_sem_give>
    4dae:	bf00      	nop
    4db0:	4000c000 	.word	0x4000c000

00004db4 <temp_nrf5_sample_fetch>:
{
    4db4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
    4db6:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
    4db8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    4dba:	b363      	cbz	r3, 4e16 <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    4dbc:	2939      	cmp	r1, #57	; 0x39
    4dbe:	d001      	beq.n	4dc4 <temp_nrf5_sample_fetch+0x10>
    4dc0:	290c      	cmp	r1, #12
    4dc2:	d12b      	bne.n	4e1c <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
    4dc4:	f105 0610 	add.w	r6, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    4dc8:	f04f 32ff 	mov.w	r2, #4294967295
    4dcc:	f04f 33ff 	mov.w	r3, #4294967295
    4dd0:	4630      	mov	r0, r6
    4dd2:	f003 fdcd 	bl	8970 <z_impl_k_mutex_lock>
    4dd6:	4b13      	ldr	r3, [pc, #76]	; (4e24 <temp_nrf5_sample_fetch+0x70>)
    4dd8:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
    4dda:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    4ddc:	2303      	movs	r3, #3
    4dde:	2400      	movs	r4, #0
    4de0:	4669      	mov	r1, sp
    4de2:	9403      	str	r4, [sp, #12]
    4de4:	9302      	str	r3, [sp, #8]
    4de6:	f004 fee2 	bl	9bae <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    4dea:	f04f 32ff 	mov.w	r2, #4294967295
    4dee:	f04f 33ff 	mov.w	r3, #4294967295
    4df2:	4628      	mov	r0, r5
    4df4:	f003 feca 	bl	8b8c <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    4df8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    4dfa:	f004 ff21 	bl	9c40 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    4dfe:	4b0a      	ldr	r3, [pc, #40]	; (4e28 <temp_nrf5_sample_fetch+0x74>)
    4e00:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    4e04:	626a      	str	r2, [r5, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    4e06:	2201      	movs	r2, #1
    4e08:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    4e0a:	4630      	mov	r0, r6
    4e0c:	f003 fe28 	bl	8a60 <z_impl_k_mutex_unlock>
	return 0;
    4e10:	4620      	mov	r0, r4
}
    4e12:	b004      	add	sp, #16
    4e14:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    4e16:	f06f 000a 	mvn.w	r0, #10
    4e1a:	e7fa      	b.n	4e12 <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
    4e1c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4e20:	e7f7      	b.n	4e12 <temp_nrf5_sample_fetch+0x5e>
    4e22:	bf00      	nop
    4e24:	00004d65 	.word	0x00004d65
    4e28:	4000c000 	.word	0x4000c000

00004e2c <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    4e2c:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    4e2e:	6904      	ldr	r4, [r0, #16]

	LOG_DBG("");

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    4e30:	2000      	movs	r0, #0
    4e32:	f7ff fbbd 	bl	45b0 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    4e36:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    4e38:	f04f 32ff 	mov.w	r2, #4294967295
    4e3c:	2100      	movs	r1, #0
    4e3e:	4620      	mov	r0, r4
    4e40:	f006 f9db 	bl	b1fa <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
    4e44:	f104 0010 	add.w	r0, r4, #16
    4e48:	f006 f959 	bl	b0fe <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
    4e4c:	2200      	movs	r2, #0
    4e4e:	2101      	movs	r1, #1
    4e50:	200c      	movs	r0, #12
    4e52:	f7fd fe6b 	bl	2b2c <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    4e56:	200c      	movs	r0, #12
    4e58:	f7fd fe36 	bl	2ac8 <arch_irq_enable>
    p_reg->INTENSET = mask;
    4e5c:	4b02      	ldr	r3, [pc, #8]	; (4e68 <temp_nrf5_init+0x3c>)
    4e5e:	2201      	movs	r2, #1
    4e60:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    4e64:	2000      	movs	r0, #0
    4e66:	bd10      	pop	{r4, pc}
    4e68:	4000c000 	.word	0x4000c000

00004e6c <spi_0_init>:
		      &spi_##idx##z_config,				       \
		      POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		       \
		      &spi_nrfx_driver_api)

#ifdef CONFIG_SPI_0_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(0);
    4e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4e70:	b083      	sub	sp, #12
    4e72:	4604      	mov	r4, r0
    4e74:	af00      	add	r7, sp, #0
    4e76:	6905      	ldr	r5, [r0, #16]
    4e78:	2200      	movs	r2, #0
    4e7a:	2101      	movs	r1, #1
    4e7c:	2003      	movs	r0, #3
    4e7e:	f7fd fe55 	bl	2b2c <z_arm_irq_priority_set>
    4e82:	6863      	ldr	r3, [r4, #4]
    4e84:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	ret = pinctrl_lookup_state(config, id, &state);
    4e86:	1d3a      	adds	r2, r7, #4
    4e88:	2100      	movs	r1, #0
    4e8a:	4620      	mov	r0, r4
    4e8c:	f005 fe4f 	bl	ab2e <pinctrl_lookup_state>
	if (ret < 0) {
    4e90:	2800      	cmp	r0, #0
    4e92:	db30      	blt.n	4ef6 <spi_0_init+0x8a>
	return pinctrl_apply_state_direct(config, state);
    4e94:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    4e96:	6822      	ldr	r2, [r4, #0]
    4e98:	7919      	ldrb	r1, [r3, #4]
    4e9a:	6818      	ldr	r0, [r3, #0]
    4e9c:	f005 fe7c 	bl	ab98 <pinctrl_configure_pins>
    4ea0:	2800      	cmp	r0, #0
    4ea2:	db28      	blt.n	4ef6 <spi_0_init+0x8a>
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    4ea4:	68ac      	ldr	r4, [r5, #8]
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4ea6:	2601      	movs	r6, #1
    4ea8:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    4eac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    4eb0:	429c      	cmp	r4, r3
    4eb2:	d304      	bcc.n	4ebe <spi_0_init+0x52>
    4eb4:	4628      	mov	r0, r5
    4eb6:	f005 fdff 	bl	aab8 <spi_context_unlock_unconditionally>
    4eba:	2000      	movs	r0, #0
    4ebc:	e01b      	b.n	4ef6 <spi_0_init+0x8a>
		if (!device_is_ready(cs_gpio->port)) {
    4ebe:	6820      	ldr	r0, [r4, #0]
    4ec0:	f006 f8ca 	bl	b058 <z_device_is_ready>
    4ec4:	b9d8      	cbnz	r0, 4efe <spi_0_init+0x92>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    4ec6:	6823      	ldr	r3, [r4, #0]
    4ec8:	481e      	ldr	r0, [pc, #120]	; (4f44 <spi_0_init+0xd8>)
    4eca:	6819      	ldr	r1, [r3, #0]
    4ecc:	7923      	ldrb	r3, [r4, #4]
    4ece:	466c      	mov	r4, sp
    4ed0:	b08a      	sub	sp, #40	; 0x28
    4ed2:	466a      	mov	r2, sp
    4ed4:	e9c2 0105 	strd	r0, r1, [r2, #20]
    4ed8:	61d3      	str	r3, [r2, #28]
    4eda:	2302      	movs	r3, #2
    4edc:	f882 3020 	strb.w	r3, [r2, #32]
    4ee0:	4b19      	ldr	r3, [pc, #100]	; (4f48 <spi_0_init+0xdc>)
    4ee2:	481a      	ldr	r0, [pc, #104]	; (4f4c <spi_0_init+0xe0>)
    4ee4:	f842 3f10 	str.w	r3, [r2, #16]!
    4ee8:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    4eec:	f005 fdab 	bl	aa46 <z_log_msg2_static_create.constprop.0>
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
    4ef0:	f06f 0012 	mvn.w	r0, #18
    4ef4:	46a5      	mov	sp, r4
    4ef6:	370c      	adds	r7, #12
    4ef8:	46bd      	mov	sp, r7
    4efa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 * @return a value from gpio_pin_configure()
 */
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
    4efe:	6820      	ldr	r0, [r4, #0]
    4f00:	7921      	ldrb	r1, [r4, #4]
				  spec->pin,
				  spec->dt_flags | extra_flags);
    4f02:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
    4f04:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
    4f08:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4f0c:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    4f10:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    4f12:	bf54      	ite	pl
    4f14:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    4f18:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    4f1c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4f20:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    4f24:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    4f26:	bf4c      	ite	mi
    4f28:	ea4c 0308 	orrmi.w	r3, ip, r8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    4f2c:	ea2c 0308 	bicpl.w	r3, ip, r8
    4f30:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
    4f34:	f8d9 3000 	ldr.w	r3, [r9]
    4f38:	4798      	blx	r3
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
    4f3a:	2800      	cmp	r0, #0
    4f3c:	dbdb      	blt.n	4ef6 <spi_0_init+0x8a>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    4f3e:	3408      	adds	r4, #8
    4f40:	e7b2      	b.n	4ea8 <spi_0_init+0x3c>
    4f42:	bf00      	nop
    4f44:	0000c762 	.word	0x0000c762
    4f48:	01000004 	.word	0x01000004
    4f4c:	0000b9d4 	.word	0x0000b9d4

00004f50 <transfer_next_chunk>:
{
    4f50:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    4f52:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    4f54:	6cab      	ldr	r3, [r5, #72]	; 0x48
		return ctx->rx_len;
    4f56:	6d2c      	ldr	r4, [r5, #80]	; 0x50
{
    4f58:	b085      	sub	sp, #20
	if (!ctx->tx_len) {
    4f5a:	b97b      	cbnz	r3, 4f7c <transfer_next_chunk+0x2c>
	if (chunk_len > 0) {
    4f5c:	b99c      	cbnz	r4, 4f86 <transfer_next_chunk+0x36>
	_spi_context_cs_control(ctx, on, false);
    4f5e:	2200      	movs	r2, #0
    4f60:	4611      	mov	r1, r2
    4f62:	4628      	mov	r0, r5
    4f64:	f005 fd86 	bl	aa74 <_spi_context_cs_control>
	ctx->sync_status = status;
    4f68:	632c      	str	r4, [r5, #48]	; 0x30
	z_impl_k_sem_give(sem);
    4f6a:	f105 0020 	add.w	r0, r5, #32
    4f6e:	f003 fded 	bl	8b4c <z_impl_k_sem_give>
	dev_data->busy = false;
    4f72:	2300      	movs	r3, #0
    4f74:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
}
    4f78:	b005      	add	sp, #20
    4f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (!ctx->rx_len) {
    4f7c:	2c00      	cmp	r4, #0
    4f7e:	d035      	beq.n	4fec <transfer_next_chunk+0x9c>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    4f80:	429c      	cmp	r4, r3
    4f82:	bf28      	it	cs
    4f84:	461c      	movcs	r4, r3
		const uint8_t *tx_buf = ctx->tx_buf;
    4f86:	6c69      	ldr	r1, [r5, #68]	; 0x44
	const struct spi_nrfx_config *dev_config = dev->config;
    4f88:	6846      	ldr	r6, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
    4f8a:	b179      	cbz	r1, 4fac <transfer_next_chunk+0x5c>
    4f8c:	b173      	cbz	r3, 4fac <transfer_next_chunk+0x5c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    4f8e:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    4f92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    4f96:	d009      	beq.n	4fac <transfer_next_chunk+0x5c>
			if (chunk_len > sizeof(dev_data->buffer)) {
    4f98:	2c08      	cmp	r4, #8
    4f9a:	bf28      	it	cs
    4f9c:	2408      	movcs	r4, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
    4f9e:	f105 075e 	add.w	r7, r5, #94	; 0x5e
    4fa2:	4622      	mov	r2, r4
    4fa4:	4638      	mov	r0, r7
    4fa6:	f005 fbe6 	bl	a776 <memcpy>
			tx_buf = dev_data->buffer;
    4faa:	4639      	mov	r1, r7
		if (chunk_len > dev_config->max_chunk_len) {
    4fac:	68b2      	ldr	r2, [r6, #8]
    4fae:	6c6b      	ldr	r3, [r5, #68]	; 0x44
		xfer.p_tx_buffer = tx_buf;
    4fb0:	9100      	str	r1, [sp, #0]
    4fb2:	4294      	cmp	r4, r2
    4fb4:	bf28      	it	cs
    4fb6:	4614      	movcs	r4, r2
		dev_data->chunk_len = chunk_len;
    4fb8:	65ac      	str	r4, [r5, #88]	; 0x58
    4fba:	b11b      	cbz	r3, 4fc4 <transfer_next_chunk+0x74>
    4fbc:	6cab      	ldr	r3, [r5, #72]	; 0x48
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    4fbe:	2b00      	cmp	r3, #0
    4fc0:	bf18      	it	ne
    4fc2:	4623      	movne	r3, r4
    4fc4:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    4fc6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    4fc8:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    4fca:	b11b      	cbz	r3, 4fd4 <transfer_next_chunk+0x84>
    4fcc:	6d2b      	ldr	r3, [r5, #80]	; 0x50
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    4fce:	2b00      	cmp	r3, #0
    4fd0:	bf18      	it	ne
    4fd2:	4623      	movne	r3, r4
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    4fd4:	2200      	movs	r2, #0
    4fd6:	4669      	mov	r1, sp
    4fd8:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    4fda:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    4fdc:	f002 f986 	bl	72ec <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    4fe0:	4b03      	ldr	r3, [pc, #12]	; (4ff0 <transfer_next_chunk+0xa0>)
    4fe2:	4298      	cmp	r0, r3
    4fe4:	d0c8      	beq.n	4f78 <transfer_next_chunk+0x28>
			error = -EIO;
    4fe6:	f06f 0404 	mvn.w	r4, #4
    4fea:	e7b8      	b.n	4f5e <transfer_next_chunk+0xe>
    4fec:	461c      	mov	r4, r3
    4fee:	e7ca      	b.n	4f86 <transfer_next_chunk+0x36>
    4ff0:	0bad0000 	.word	0x0bad0000

00004ff4 <event_handler>:
{
    4ff4:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    4ff6:	7803      	ldrb	r3, [r0, #0]
{
    4ff8:	b086      	sub	sp, #24
    4ffa:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    4ffc:	2b00      	cmp	r3, #0
    4ffe:	d154      	bne.n	50aa <event_handler+0xb6>
	if (!ctx->tx_len) {
    5000:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    5002:	b163      	cbz	r3, 501e <event_handler+0x2a>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    5004:	6d8a      	ldr	r2, [r1, #88]	; 0x58
	if (len > ctx->tx_len) {
    5006:	429a      	cmp	r2, r3
    5008:	d91e      	bls.n	5048 <event_handler+0x54>
		LOG_ERR("Update exceeds current buffer");
    500a:	4b29      	ldr	r3, [pc, #164]	; (50b0 <event_handler+0xbc>)
    500c:	9305      	str	r3, [sp, #20]
    500e:	4829      	ldr	r0, [pc, #164]	; (50b4 <event_handler+0xc0>)
    5010:	2302      	movs	r3, #2
    5012:	aa04      	add	r2, sp, #16
    5014:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5018:	9304      	str	r3, [sp, #16]
    501a:	f005 fd14 	bl	aa46 <z_log_msg2_static_create.constprop.0>
	if (!ctx->rx_len) {
    501e:	6d23      	ldr	r3, [r4, #80]	; 0x50
    5020:	b163      	cbz	r3, 503c <event_handler+0x48>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    5022:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (len > ctx->rx_len) {
    5024:	429a      	cmp	r2, r3
    5026:	d927      	bls.n	5078 <event_handler+0x84>
		LOG_ERR("Update exceeds current buffer");
    5028:	4b21      	ldr	r3, [pc, #132]	; (50b0 <event_handler+0xbc>)
    502a:	9305      	str	r3, [sp, #20]
    502c:	4821      	ldr	r0, [pc, #132]	; (50b4 <event_handler+0xc0>)
    502e:	2302      	movs	r3, #2
    5030:	aa04      	add	r2, sp, #16
    5032:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5036:	9304      	str	r3, [sp, #16]
    5038:	f005 fd05 	bl	aa46 <z_log_msg2_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
    503c:	6d60      	ldr	r0, [r4, #84]	; 0x54
}
    503e:	b006      	add	sp, #24
    5040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    5044:	f7ff bf84 	b.w	4f50 <transfer_next_chunk>
	ctx->tx_len -= len;
    5048:	1a9b      	subs	r3, r3, r2
    504a:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
    504c:	b973      	cbnz	r3, 506c <event_handler+0x78>
		++ctx->current_tx;
    504e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    5050:	3308      	adds	r3, #8
    5052:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
    5054:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    5056:	3b01      	subs	r3, #1
    5058:	638b      	str	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    505a:	f101 0248 	add.w	r2, r1, #72	; 0x48
    505e:	f104 0034 	add.w	r0, r4, #52	; 0x34
    5062:	3138      	adds	r1, #56	; 0x38
    5064:	f005 fcde 	bl	aa24 <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    5068:	6460      	str	r0, [r4, #68]	; 0x44
    506a:	e7d8      	b.n	501e <event_handler+0x2a>
	} else if (ctx->tx_buf) {
    506c:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    506e:	2b00      	cmp	r3, #0
    5070:	d0d5      	beq.n	501e <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
    5072:	4413      	add	r3, r2
    5074:	644b      	str	r3, [r1, #68]	; 0x44
    5076:	e7d2      	b.n	501e <event_handler+0x2a>
	ctx->rx_len -= len;
    5078:	1a9b      	subs	r3, r3, r2
    507a:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    507c:	b97b      	cbnz	r3, 509e <event_handler+0xaa>
		++ctx->current_rx;
    507e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    5080:	3308      	adds	r3, #8
    5082:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    5084:	6c23      	ldr	r3, [r4, #64]	; 0x40
    5086:	3b01      	subs	r3, #1
    5088:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    508a:	f104 0250 	add.w	r2, r4, #80	; 0x50
    508e:	f104 0140 	add.w	r1, r4, #64	; 0x40
    5092:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    5096:	f005 fcc5 	bl	aa24 <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    509a:	64e0      	str	r0, [r4, #76]	; 0x4c
    509c:	e7ce      	b.n	503c <event_handler+0x48>
	} else if (ctx->rx_buf) {
    509e:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    50a0:	2b00      	cmp	r3, #0
    50a2:	d0cb      	beq.n	503c <event_handler+0x48>
		ctx->rx_buf += dfs * len;
    50a4:	4413      	add	r3, r2
    50a6:	64e3      	str	r3, [r4, #76]	; 0x4c
    50a8:	e7c8      	b.n	503c <event_handler+0x48>
}
    50aa:	b006      	add	sp, #24
    50ac:	bd10      	pop	{r4, pc}
    50ae:	bf00      	nop
    50b0:	0000c786 	.word	0x0000c786
    50b4:	0000b9d4 	.word	0x0000b9d4

000050b8 <spi_nrfx_transceive>:
{
    50b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    50bc:	b08b      	sub	sp, #44	; 0x2c
    50be:	af00      	add	r7, sp, #0
    50c0:	e9c7 3202 	strd	r3, r2, [r7, #8]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    50c4:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    50c6:	6904      	ldr	r4, [r0, #16]
    50c8:	049b      	lsls	r3, r3, #18
{
    50ca:	4683      	mov	fp, r0
    50cc:	460e      	mov	r6, r1
    50ce:	d434      	bmi.n	513a <spi_nrfx_transceive+0x82>
	return z_impl_k_sem_take(sem, timeout);
    50d0:	f04f 32ff 	mov.w	r2, #4294967295
    50d4:	f04f 33ff 	mov.w	r3, #4294967295
    50d8:	f104 0010 	add.w	r0, r4, #16
    50dc:	f003 fd56 	bl	8b8c <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    50e0:	6066      	str	r6, [r4, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    50e2:	f8db 8010 	ldr.w	r8, [fp, #16]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    50e6:	f898 305d 	ldrb.w	r3, [r8, #93]	; 0x5d
    50ea:	607b      	str	r3, [r7, #4]
    50ec:	b123      	cbz	r3, 50f8 <spi_nrfx_transceive+0x40>
    50ee:	f8d8 3000 	ldr.w	r3, [r8]
    50f2:	429e      	cmp	r6, r3
    50f4:	f000 80d2 	beq.w	529c <spi_nrfx_transceive+0x1e4>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    50f8:	f8b6 c004 	ldrh.w	ip, [r6, #4]
    50fc:	f41c 6f00 	tst.w	ip, #2048	; 0x800
    5100:	d022      	beq.n	5148 <spi_nrfx_transceive+0x90>
		LOG_ERR("Half-duplex not supported");
    5102:	4b9b      	ldr	r3, [pc, #620]	; (5370 <spi_nrfx_transceive+0x2b8>)
    5104:	627b      	str	r3, [r7, #36]	; 0x24
    5106:	489b      	ldr	r0, [pc, #620]	; (5374 <spi_nrfx_transceive+0x2bc>)
    5108:	2302      	movs	r3, #2
    510a:	f107 0220 	add.w	r2, r7, #32
    510e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
    5112:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
    5116:	623b      	str	r3, [r7, #32]
    5118:	f005 fc95 	bl	aa46 <z_log_msg2_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    511c:	6823      	ldr	r3, [r4, #0]
    511e:	889b      	ldrh	r3, [r3, #4]
    5120:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    5124:	d104      	bne.n	5130 <spi_nrfx_transceive+0x78>
		ctx->owner = NULL;
    5126:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    5128:	f104 0010 	add.w	r0, r4, #16
    512c:	f003 fd0e 	bl	8b4c <z_impl_k_sem_give>
}
    5130:	4628      	mov	r0, r5
    5132:	372c      	adds	r7, #44	; 0x2c
    5134:	46bd      	mov	sp, r7
    5136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    513a:	69a3      	ldr	r3, [r4, #24]
    513c:	2b00      	cmp	r3, #0
    513e:	d1c7      	bne.n	50d0 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
    5140:	6863      	ldr	r3, [r4, #4]
    5142:	4299      	cmp	r1, r3
    5144:	d1c4      	bne.n	50d0 <spi_nrfx_transceive+0x18>
    5146:	e7cc      	b.n	50e2 <spi_nrfx_transceive+0x2a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    5148:	f01c 0f01 	tst.w	ip, #1
    514c:	d015      	beq.n	517a <spi_nrfx_transceive+0xc2>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    514e:	f8db 3000 	ldr.w	r3, [fp]
    5152:	4989      	ldr	r1, [pc, #548]	; (5378 <spi_nrfx_transceive+0x2c0>)
    5154:	4887      	ldr	r0, [pc, #540]	; (5374 <spi_nrfx_transceive+0x2bc>)
    5156:	466d      	mov	r5, sp
    5158:	b088      	sub	sp, #32
    515a:	466a      	mov	r2, sp
    515c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    5160:	2302      	movs	r3, #2
    5162:	7713      	strb	r3, [r2, #28]
    5164:	4b85      	ldr	r3, [pc, #532]	; (537c <spi_nrfx_transceive+0x2c4>)
    5166:	f842 3f10 	str.w	r3, [r2, #16]!
    516a:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
    516e:	f005 fc6a 	bl	aa46 <z_log_msg2_static_create.constprop.0>
    5172:	46ad      	mov	sp, r5
		return -EINVAL;
    5174:	f06f 0515 	mvn.w	r5, #21
    5178:	e7d0      	b.n	511c <spi_nrfx_transceive+0x64>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    517a:	f01c 0f08 	tst.w	ip, #8
    517e:	d00b      	beq.n	5198 <spi_nrfx_transceive+0xe0>
		LOG_ERR("Loopback mode is not supported");
    5180:	4b7f      	ldr	r3, [pc, #508]	; (5380 <spi_nrfx_transceive+0x2c8>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    5182:	627b      	str	r3, [r7, #36]	; 0x24
    5184:	487b      	ldr	r0, [pc, #492]	; (5374 <spi_nrfx_transceive+0x2bc>)
    5186:	2302      	movs	r3, #2
    5188:	f107 0220 	add.w	r2, r7, #32
    518c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5190:	623b      	str	r3, [r7, #32]
    5192:	f005 fc58 	bl	aa46 <z_log_msg2_static_create.constprop.0>
    5196:	e7ed      	b.n	5174 <spi_nrfx_transceive+0xbc>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    5198:	f3cc 1345 	ubfx	r3, ip, #5, #6
    519c:	2b08      	cmp	r3, #8
    519e:	d001      	beq.n	51a4 <spi_nrfx_transceive+0xec>
		LOG_ERR("Word sizes other than 8 bits are not supported");
    51a0:	4b78      	ldr	r3, [pc, #480]	; (5384 <spi_nrfx_transceive+0x2cc>)
    51a2:	e7ee      	b.n	5182 <spi_nrfx_transceive+0xca>
	if (spi_cfg->frequency < 125000) {
    51a4:	6835      	ldr	r5, [r6, #0]
    51a6:	4b78      	ldr	r3, [pc, #480]	; (5388 <spi_nrfx_transceive+0x2d0>)
    51a8:	429d      	cmp	r5, r3
    51aa:	d801      	bhi.n	51b0 <spi_nrfx_transceive+0xf8>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    51ac:	4b77      	ldr	r3, [pc, #476]	; (538c <spi_nrfx_transceive+0x2d4>)
    51ae:	e7e8      	b.n	5182 <spi_nrfx_transceive+0xca>
	const struct spi_nrfx_config *dev_config = dev->config;
    51b0:	f8db 9004 	ldr.w	r9, [fp, #4]
	uint32_t max_freq = dev_config->max_freq;
    51b4:	f8d9 300c 	ldr.w	r3, [r9, #12]
    51b8:	603b      	str	r3, [r7, #0]
	config = dev_config->def_config;
    51ba:	f109 0a10 	add.w	sl, r9, #16
    51be:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
    51c2:	f107 0e10 	add.w	lr, r7, #16
    51c6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    51ca:	f8da 3000 	ldr.w	r3, [sl]
    51ce:	f8ce 3000 	str.w	r3, [lr]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    51d2:	683b      	ldr	r3, [r7, #0]
    51d4:	429d      	cmp	r5, r3
    51d6:	bf28      	it	cs
    51d8:	461d      	movcs	r5, r3
	if (frequency < 250000) {
    51da:	4b6d      	ldr	r3, [pc, #436]	; (5390 <spi_nrfx_transceive+0x2d8>)
    51dc:	429d      	cmp	r5, r3
    51de:	d945      	bls.n	526c <spi_nrfx_transceive+0x1b4>
	} else if (frequency < 500000) {
    51e0:	4b6c      	ldr	r3, [pc, #432]	; (5394 <spi_nrfx_transceive+0x2dc>)
    51e2:	429d      	cmp	r5, r3
    51e4:	d945      	bls.n	5272 <spi_nrfx_transceive+0x1ba>
	} else if (frequency < 1000000) {
    51e6:	4b6c      	ldr	r3, [pc, #432]	; (5398 <spi_nrfx_transceive+0x2e0>)
    51e8:	429d      	cmp	r5, r3
    51ea:	d945      	bls.n	5278 <spi_nrfx_transceive+0x1c0>
	} else if (frequency < 2000000) {
    51ec:	4b6b      	ldr	r3, [pc, #428]	; (539c <spi_nrfx_transceive+0x2e4>)
    51ee:	429d      	cmp	r5, r3
    51f0:	d945      	bls.n	527e <spi_nrfx_transceive+0x1c6>
	} else if (frequency < 4000000) {
    51f2:	4b6b      	ldr	r3, [pc, #428]	; (53a0 <spi_nrfx_transceive+0x2e8>)
    51f4:	429d      	cmp	r5, r3
    51f6:	d945      	bls.n	5284 <spi_nrfx_transceive+0x1cc>
		return NRF_SPIM_FREQ_8M;
    51f8:	4b6a      	ldr	r3, [pc, #424]	; (53a4 <spi_nrfx_transceive+0x2ec>)
    51fa:	429d      	cmp	r5, r3
    51fc:	bf34      	ite	cc
    51fe:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
    5202:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    5206:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    520a:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    520c:	f00c 0304 	and.w	r3, ip, #4
    5210:	d03b      	beq.n	528a <spi_nrfx_transceive+0x1d2>
			return NRF_SPIM_MODE_2;
    5212:	2b00      	cmp	r3, #0
    5214:	bf14      	ite	ne
    5216:	2303      	movne	r3, #3
    5218:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    521a:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
    521c:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
    521e:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    5222:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
    5226:	b12b      	cbz	r3, 5234 <spi_nrfx_transceive+0x17c>
		nrfx_spim_uninit(&dev_config->spim);
    5228:	4648      	mov	r0, r9
    522a:	f002 f817 	bl	725c <nrfx_spim_uninit>
		dev_data->initialized = false;
    522e:	2300      	movs	r3, #0
    5230:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
	result = nrfx_spim_init(&dev_config->spim, &config,
    5234:	4643      	mov	r3, r8
    5236:	4a5c      	ldr	r2, [pc, #368]	; (53a8 <spi_nrfx_transceive+0x2f0>)
    5238:	f107 0110 	add.w	r1, r7, #16
    523c:	4648      	mov	r0, r9
    523e:	f001 ff65 	bl	710c <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    5242:	4b5a      	ldr	r3, [pc, #360]	; (53ac <spi_nrfx_transceive+0x2f4>)
    5244:	4298      	cmp	r0, r3
    5246:	d024      	beq.n	5292 <spi_nrfx_transceive+0x1da>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    5248:	466d      	mov	r5, sp
    524a:	4b59      	ldr	r3, [pc, #356]	; (53b0 <spi_nrfx_transceive+0x2f8>)
    524c:	b088      	sub	sp, #32
    524e:	466a      	mov	r2, sp
    5250:	e9c2 3005 	strd	r3, r0, [r2, #20]
    5254:	2303      	movs	r3, #3
    5256:	f842 3f10 	str.w	r3, [r2, #16]!
    525a:	4846      	ldr	r0, [pc, #280]	; (5374 <spi_nrfx_transceive+0x2bc>)
    525c:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5260:	f005 fbf1 	bl	aa46 <z_log_msg2_static_create.constprop.0>
    5264:	46ad      	mov	sp, r5
		return -EIO;
    5266:	f06f 0504 	mvn.w	r5, #4
    526a:	e757      	b.n	511c <spi_nrfx_transceive+0x64>
		return NRF_SPIM_FREQ_125K;
    526c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    5270:	e7c9      	b.n	5206 <spi_nrfx_transceive+0x14e>
		return NRF_SPIM_FREQ_250K;
    5272:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    5276:	e7c6      	b.n	5206 <spi_nrfx_transceive+0x14e>
		return NRF_SPIM_FREQ_500K;
    5278:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    527c:	e7c3      	b.n	5206 <spi_nrfx_transceive+0x14e>
		return NRF_SPIM_FREQ_1M;
    527e:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    5282:	e7c0      	b.n	5206 <spi_nrfx_transceive+0x14e>
		return NRF_SPIM_FREQ_2M;
    5284:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    5288:	e7bd      	b.n	5206 <spi_nrfx_transceive+0x14e>
			return NRF_SPIM_MODE_0;
    528a:	3b00      	subs	r3, #0
    528c:	bf18      	it	ne
    528e:	2301      	movne	r3, #1
    5290:	e7c3      	b.n	521a <spi_nrfx_transceive+0x162>
	dev_data->initialized = true;
    5292:	2301      	movs	r3, #1
    5294:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
	ctx->config = spi_cfg;
    5298:	f8c8 6000 	str.w	r6, [r8]
		dev_data->busy = true;
    529c:	2301      	movs	r3, #1
    529e:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    52a2:	68fb      	ldr	r3, [r7, #12]
    52a4:	2b00      	cmp	r3, #0
    52a6:	d152      	bne.n	534e <spi_nrfx_transceive+0x296>
    52a8:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    52aa:	461a      	mov	r2, r3
    52ac:	63a2      	str	r2, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    52ae:	f104 0138 	add.w	r1, r4, #56	; 0x38
    52b2:	f104 0248 	add.w	r2, r4, #72	; 0x48
    52b6:	f104 0034 	add.w	r0, r4, #52	; 0x34
    52ba:	f005 fbb3 	bl	aa24 <spi_context_get_next_buf.constprop.0>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    52be:	68bb      	ldr	r3, [r7, #8]
	ctx->tx_buf = (const uint8_t *)
    52c0:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    52c2:	2b00      	cmp	r3, #0
    52c4:	d14a      	bne.n	535c <spi_nrfx_transceive+0x2a4>
    52c6:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    52c8:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    52ca:	f104 0250 	add.w	r2, r4, #80	; 0x50
    52ce:	f104 0140 	add.w	r1, r4, #64	; 0x40
    52d2:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    52d6:	f005 fba5 	bl	aa24 <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    52da:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
    52dc:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
    52de:	64e0      	str	r0, [r4, #76]	; 0x4c
	_spi_context_cs_control(ctx, on, false);
    52e0:	2101      	movs	r1, #1
    52e2:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    52e4:	6326      	str	r6, [r4, #48]	; 0x30
	_spi_context_cs_control(ctx, on, false);
    52e6:	f005 fbc5 	bl	aa74 <_spi_context_cs_control>
		transfer_next_chunk(dev);
    52ea:	4658      	mov	r0, fp
    52ec:	f7ff fe30 	bl	4f50 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    52f0:	6d25      	ldr	r5, [r4, #80]	; 0x50
    52f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			     ctx->config->frequency;
    52f4:	46a0      	mov	r8, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    52f6:	429d      	cmp	r5, r3
    52f8:	bf38      	it	cc
    52fa:	461d      	movcc	r5, r3
    52fc:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
    5300:	435d      	muls	r5, r3
			     ctx->config->frequency;
    5302:	f858 3b20 	ldr.w	r3, [r8], #32
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    5306:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    530a:	681b      	ldr	r3, [r3, #0]
    530c:	fbb5 f5f3 	udiv	r5, r5, r3
    5310:	4631      	mov	r1, r6
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    5312:	35c8      	adds	r5, #200	; 0xc8
    5314:	f240 30e7 	movw	r0, #999	; 0x3e7
    5318:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    531c:	2300      	movs	r3, #0
    531e:	fbe5 010c 	umlal	r0, r1, r5, ip
    5322:	f7fa fedd 	bl	e0 <__aeabi_uldivmod>
    5326:	4602      	mov	r2, r0
    5328:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    532a:	4640      	mov	r0, r8
    532c:	f003 fc2e 	bl	8b8c <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
    5330:	b1e0      	cbz	r0, 536c <spi_nrfx_transceive+0x2b4>
		LOG_ERR("Timeout waiting for transfer complete");
    5332:	4b20      	ldr	r3, [pc, #128]	; (53b4 <spi_nrfx_transceive+0x2fc>)
    5334:	627b      	str	r3, [r7, #36]	; 0x24
    5336:	480f      	ldr	r0, [pc, #60]	; (5374 <spi_nrfx_transceive+0x2bc>)
    5338:	2302      	movs	r3, #2
    533a:	f107 0220 	add.w	r2, r7, #32
    533e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5342:	623b      	str	r3, [r7, #32]
		return -ETIMEDOUT;
    5344:	f06f 0573 	mvn.w	r5, #115	; 0x73
		LOG_ERR("Timeout waiting for transfer complete");
    5348:	f005 fb7d 	bl	aa46 <z_log_msg2_static_create.constprop.0>
		return -ETIMEDOUT;
    534c:	e6e6      	b.n	511c <spi_nrfx_transceive+0x64>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    534e:	68fb      	ldr	r3, [r7, #12]
    5350:	681a      	ldr	r2, [r3, #0]
    5352:	6362      	str	r2, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    5354:	2a00      	cmp	r2, #0
    5356:	d0a9      	beq.n	52ac <spi_nrfx_transceive+0x1f4>
    5358:	685a      	ldr	r2, [r3, #4]
    535a:	e7a7      	b.n	52ac <spi_nrfx_transceive+0x1f4>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    535c:	68bb      	ldr	r3, [r7, #8]
    535e:	681b      	ldr	r3, [r3, #0]
    5360:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    5362:	2b00      	cmp	r3, #0
    5364:	d0b0      	beq.n	52c8 <spi_nrfx_transceive+0x210>
    5366:	68bb      	ldr	r3, [r7, #8]
    5368:	685b      	ldr	r3, [r3, #4]
    536a:	e7ad      	b.n	52c8 <spi_nrfx_transceive+0x210>
	status = ctx->sync_status;
    536c:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return status;
    536e:	e6d5      	b.n	511c <spi_nrfx_transceive+0x64>
    5370:	0000c7a4 	.word	0x0000c7a4
    5374:	0000b9d4 	.word	0x0000b9d4
    5378:	0000c7be 	.word	0x0000c7be
    537c:	01000003 	.word	0x01000003
    5380:	0000c7e0 	.word	0x0000c7e0
    5384:	0000c7ff 	.word	0x0000c7ff
    5388:	0001e847 	.word	0x0001e847
    538c:	0000c82e 	.word	0x0000c82e
    5390:	0003d08f 	.word	0x0003d08f
    5394:	0007a11f 	.word	0x0007a11f
    5398:	000f423f 	.word	0x000f423f
    539c:	001e847f 	.word	0x001e847f
    53a0:	003d08ff 	.word	0x003d08ff
    53a4:	007a1200 	.word	0x007a1200
    53a8:	00004ff5 	.word	0x00004ff5
    53ac:	0bad0000 	.word	0x0bad0000
    53b0:	0000c85f 	.word	0x0000c85f
    53b4:	0000c886 	.word	0x0000c886

000053b8 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    53b8:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    53ba:	2301      	movs	r3, #1
    53bc:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    53be:	4a11      	ldr	r2, [pc, #68]	; (5404 <compare_int_lock+0x4c>)
    53c0:	f3bf 8f5b 	dmb	ish
    53c4:	43dc      	mvns	r4, r3
    53c6:	e852 1f00 	ldrex	r1, [r2]
    53ca:	ea01 0c04 	and.w	ip, r1, r4
    53ce:	e842 ce00 	strex	lr, ip, [r2]
    53d2:	f1be 0f00 	cmp.w	lr, #0
    53d6:	d1f6      	bne.n	53c6 <compare_int_lock+0xe>
    53d8:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    53dc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    53e0:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    53e4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    53e8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    53ec:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    53f0:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    53f4:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    53f8:	420b      	tst	r3, r1
}
    53fa:	bf14      	ite	ne
    53fc:	2001      	movne	r0, #1
    53fe:	2000      	moveq	r0, #0
    5400:	bd10      	pop	{r4, pc}
    5402:	bf00      	nop
    5404:	200015c8 	.word	0x200015c8

00005408 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5408:	4919      	ldr	r1, [pc, #100]	; (5470 <sys_clock_timeout_handler+0x68>)
{
    540a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    540c:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    540e:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5412:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    5414:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5418:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    541c:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    541e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    5422:	d222      	bcs.n	546a <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    5424:	4b13      	ldr	r3, [pc, #76]	; (5474 <sys_clock_timeout_handler+0x6c>)
    5426:	681b      	ldr	r3, [r3, #0]
    5428:	0a1a      	lsrs	r2, r3, #8
    542a:	061b      	lsls	r3, r3, #24
    542c:	195e      	adds	r6, r3, r5
    542e:	4b12      	ldr	r3, [pc, #72]	; (5478 <sys_clock_timeout_handler+0x70>)
    5430:	f142 0700 	adc.w	r7, r2, #0
    5434:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    5438:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    543a:	f004 f977 	bl	972c <sys_clock_announce>
    return p_reg->CC[ch];
    543e:	00a3      	lsls	r3, r4, #2
    5440:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5444:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    5448:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    544c:	42aa      	cmp	r2, r5
    544e:	d10b      	bne.n	5468 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    5450:	b91e      	cbnz	r6, 545a <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    5452:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    5456:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    545a:	4b08      	ldr	r3, [pc, #32]	; (547c <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    545c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    5460:	fa00 f404 	lsl.w	r4, r0, r4
    5464:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    5468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    546a:	2600      	movs	r6, #0
    546c:	e7e5      	b.n	543a <sys_clock_timeout_handler+0x32>
    546e:	bf00      	nop
    5470:	200007b8 	.word	0x200007b8
    5474:	200015cc 	.word	0x200015cc
    5478:	200007a0 	.word	0x200007a0
    547c:	40011000 	.word	0x40011000

00005480 <compare_int_unlock>:
	if (key) {
    5480:	b319      	cbz	r1, 54ca <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5482:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    5486:	2301      	movs	r3, #1
    5488:	4a10      	ldr	r2, [pc, #64]	; (54cc <compare_int_unlock+0x4c>)
    548a:	4083      	lsls	r3, r0
    548c:	e852 1f00 	ldrex	r1, [r2]
    5490:	4319      	orrs	r1, r3
    5492:	e842 1c00 	strex	ip, r1, [r2]
    5496:	f1bc 0f00 	cmp.w	ip, #0
    549a:	d1f7      	bne.n	548c <compare_int_unlock+0xc>
    549c:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    54a0:	4a0b      	ldr	r2, [pc, #44]	; (54d0 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    54a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    54a6:	4083      	lsls	r3, r0
    54a8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    54ac:	4b09      	ldr	r3, [pc, #36]	; (54d4 <compare_int_unlock+0x54>)
    54ae:	f3bf 8f5b 	dmb	ish
    54b2:	681b      	ldr	r3, [r3, #0]
    54b4:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    54b8:	fa23 f000 	lsr.w	r0, r3, r0
    54bc:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    54be:	bf42      	ittt	mi
    54c0:	4b05      	ldrmi	r3, [pc, #20]	; (54d8 <compare_int_unlock+0x58>)
    54c2:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    54c6:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    54ca:	4770      	bx	lr
    54cc:	200015c8 	.word	0x200015c8
    54d0:	40011000 	.word	0x40011000
    54d4:	200015c4 	.word	0x200015c4
    54d8:	e000e100 	.word	0xe000e100

000054dc <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    54dc:	4b0d      	ldr	r3, [pc, #52]	; (5514 <z_nrf_rtc_timer_read+0x38>)
    54de:	6818      	ldr	r0, [r3, #0]
    54e0:	0a01      	lsrs	r1, r0, #8
    54e2:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    54e4:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    54e8:	4b0b      	ldr	r3, [pc, #44]	; (5518 <z_nrf_rtc_timer_read+0x3c>)
    54ea:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    54ee:	1818      	adds	r0, r3, r0
    54f0:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    54f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    54f8:	d20a      	bcs.n	5510 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    54fa:	4b08      	ldr	r3, [pc, #32]	; (551c <z_nrf_rtc_timer_read+0x40>)
    54fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    5500:	4290      	cmp	r0, r2
    5502:	eb71 0303 	sbcs.w	r3, r1, r3
    5506:	d203      	bcs.n	5510 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    5508:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    550c:	f141 0100 	adc.w	r1, r1, #0
}
    5510:	4770      	bx	lr
    5512:	bf00      	nop
    5514:	200015cc 	.word	0x200015cc
    5518:	40011000 	.word	0x40011000
    551c:	200007a0 	.word	0x200007a0

00005520 <compare_set>:
{
    5520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5524:	b085      	sub	sp, #20
    5526:	4616      	mov	r6, r2
    5528:	4698      	mov	r8, r3
    552a:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    552c:	f7ff ff44 	bl	53b8 <compare_int_lock>
    5530:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    5532:	f7ff ffd3 	bl	54dc <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    5536:	42b0      	cmp	r0, r6
    5538:	eb71 0308 	sbcs.w	r3, r1, r8
    553c:	d278      	bcs.n	5630 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    553e:	4b46      	ldr	r3, [pc, #280]	; (5658 <compare_set+0x138>)
    5540:	1a30      	subs	r0, r6, r0
    5542:	eb68 0101 	sbc.w	r1, r8, r1
    5546:	4298      	cmp	r0, r3
    5548:	f171 0300 	sbcs.w	r3, r1, #0
    554c:	f080 8081 	bcs.w	5652 <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    5550:	4b42      	ldr	r3, [pc, #264]	; (565c <compare_set+0x13c>)
    5552:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    5556:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    555a:	45d8      	cmp	r8, fp
    555c:	bf08      	it	eq
    555e:	4556      	cmpeq	r6, sl
    5560:	d051      	beq.n	5606 <compare_set+0xe6>
    5562:	ea4f 0985 	mov.w	r9, r5, lsl #2
    5566:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    556a:	f105 0750 	add.w	r7, r5, #80	; 0x50
    556e:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    5572:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5574:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    5578:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    557c:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    557e:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    5582:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5586:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    5588:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    558c:	4b34      	ldr	r3, [pc, #208]	; (5660 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    558e:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    5592:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    5594:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    5598:	1a40      	subs	r0, r0, r1
    559a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    559e:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    55a2:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    55a4:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    55a8:	d107      	bne.n	55ba <compare_set+0x9a>
    55aa:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    55ae:	2013      	movs	r0, #19
    55b0:	f005 ffe3 	bl	b57a <z_impl_k_busy_wait>
    55b4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    55b8:	4b29      	ldr	r3, [pc, #164]	; (5660 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    55ba:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    55be:	eba4 000c 	sub.w	r0, r4, ip
    55c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    55c6:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    55ca:	bf88      	it	hi
    55cc:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    55ce:	2000      	movs	r0, #0
    55d0:	6038      	str	r0, [r7, #0]
    55d2:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    55d4:	9801      	ldr	r0, [sp, #4]
    55d6:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    55da:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    55de:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    55e2:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    55e6:	4281      	cmp	r1, r0
    55e8:	d006      	beq.n	55f8 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    55ea:	1a20      	subs	r0, r4, r0
    55ec:	3802      	subs	r0, #2
    55ee:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    55f2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    55f6:	d819      	bhi.n	562c <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    55f8:	1aa4      	subs	r4, r4, r2
    55fa:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    55fe:	eb14 0a06 	adds.w	sl, r4, r6
    5602:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    5606:	4915      	ldr	r1, [pc, #84]	; (565c <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    5608:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    560a:	012b      	lsls	r3, r5, #4
    560c:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    5610:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    5614:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    5616:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5618:	6053      	str	r3, [r2, #4]
	return ret;
    561a:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    561c:	4628      	mov	r0, r5
    561e:	9900      	ldr	r1, [sp, #0]
    5620:	f7ff ff2e 	bl	5480 <compare_int_unlock>
}
    5624:	4620      	mov	r0, r4
    5626:	b005      	add	sp, #20
    5628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    562c:	4620      	mov	r0, r4
    562e:	e7b1      	b.n	5594 <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    5630:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5632:	4a0c      	ldr	r2, [pc, #48]	; (5664 <compare_set+0x144>)
    5634:	f3bf 8f5b 	dmb	ish
    5638:	40ab      	lsls	r3, r5
    563a:	e852 1f00 	ldrex	r1, [r2]
    563e:	4319      	orrs	r1, r3
    5640:	e842 1000 	strex	r0, r1, [r2]
    5644:	2800      	cmp	r0, #0
    5646:	d1f8      	bne.n	563a <compare_set+0x11a>
    5648:	f3bf 8f5b 	dmb	ish
    564c:	46b2      	mov	sl, r6
    564e:	46c3      	mov	fp, r8
    5650:	e7d9      	b.n	5606 <compare_set+0xe6>
			return -EINVAL;
    5652:	f06f 0415 	mvn.w	r4, #21
    5656:	e7e1      	b.n	561c <compare_set+0xfc>
    5658:	01000001 	.word	0x01000001
    565c:	200007a8 	.word	0x200007a8
    5660:	40011000 	.word	0x40011000
    5664:	200015c4 	.word	0x200015c4

00005668 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    5668:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    566a:	4b19      	ldr	r3, [pc, #100]	; (56d0 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    566c:	4d19      	ldr	r5, [pc, #100]	; (56d4 <sys_clock_driver_init+0x6c>)
    566e:	2400      	movs	r4, #0
    5670:	f04f 30ff 	mov.w	r0, #4294967295
    5674:	f04f 31ff 	mov.w	r1, #4294967295
    5678:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    567c:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    5680:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5684:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5688:	4b13      	ldr	r3, [pc, #76]	; (56d8 <sys_clock_driver_init+0x70>)
    568a:	2602      	movs	r6, #2
    568c:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    5690:	2101      	movs	r1, #1
    5692:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    5696:	2011      	movs	r0, #17
    5698:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    569c:	4622      	mov	r2, r4
    569e:	f7fd fa45 	bl	2b2c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    56a2:	2011      	movs	r0, #17
    56a4:	f7fd fa10 	bl	2ac8 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    56a8:	4a0c      	ldr	r2, [pc, #48]	; (56dc <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    56aa:	2301      	movs	r3, #1
    56ac:	60ab      	str	r3, [r5, #8]
    56ae:	602b      	str	r3, [r5, #0]
    56b0:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    56b2:	4b0b      	ldr	r3, [pc, #44]	; (56e0 <sys_clock_driver_init+0x78>)
    56b4:	4a0b      	ldr	r2, [pc, #44]	; (56e4 <sys_clock_driver_init+0x7c>)
    56b6:	9300      	str	r3, [sp, #0]
    56b8:	9401      	str	r4, [sp, #4]
    56ba:	2300      	movs	r3, #0
    56bc:	4620      	mov	r0, r4
    56be:	f7ff ff2f 	bl	5520 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    56c2:	4630      	mov	r0, r6
    56c4:	f7fe ff7c 	bl	45c0 <z_nrf_clock_control_lf_on>

	return 0;
}
    56c8:	4620      	mov	r0, r4
    56ca:	b002      	add	sp, #8
    56cc:	bd70      	pop	{r4, r5, r6, pc}
    56ce:	bf00      	nop
    56d0:	200007a8 	.word	0x200007a8
    56d4:	40011000 	.word	0x40011000
    56d8:	e000e100 	.word	0xe000e100
    56dc:	200015c8 	.word	0x200015c8
    56e0:	00005409 	.word	0x00005409
    56e4:	007fffff 	.word	0x007fffff

000056e8 <rtc_nrf_isr>:
{
    56e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    56ec:	4c35      	ldr	r4, [pc, #212]	; (57c4 <rtc_nrf_isr+0xdc>)
    56ee:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    56f2:	079a      	lsls	r2, r3, #30
    56f4:	d50b      	bpl.n	570e <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    56f6:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    56fa:	b143      	cbz	r3, 570e <rtc_nrf_isr+0x26>
		overflow_cnt++;
    56fc:	4a32      	ldr	r2, [pc, #200]	; (57c8 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    56fe:	2300      	movs	r3, #0
    5700:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    5704:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    5708:	6813      	ldr	r3, [r2, #0]
    570a:	3301      	adds	r3, #1
    570c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    570e:	f04f 0320 	mov.w	r3, #32
    5712:	f3ef 8211 	mrs	r2, BASEPRI
    5716:	f383 8812 	msr	BASEPRI_MAX, r3
    571a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    571e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    5722:	03db      	lsls	r3, r3, #15
    5724:	d512      	bpl.n	574c <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5726:	f3bf 8f5b 	dmb	ish
    572a:	4b28      	ldr	r3, [pc, #160]	; (57cc <rtc_nrf_isr+0xe4>)
    572c:	e853 1f00 	ldrex	r1, [r3]
    5730:	f021 0001 	bic.w	r0, r1, #1
    5734:	e843 0600 	strex	r6, r0, [r3]
    5738:	2e00      	cmp	r6, #0
    573a:	d1f7      	bne.n	572c <rtc_nrf_isr+0x44>
    573c:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5740:	2900      	cmp	r1, #0
    5742:	d136      	bne.n	57b2 <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5744:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    5748:	2b00      	cmp	r3, #0
    574a:	d132      	bne.n	57b2 <rtc_nrf_isr+0xca>
{
    574c:	2300      	movs	r3, #0
	__asm__ volatile(
    574e:	f382 8811 	msr	BASEPRI, r2
    5752:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    5756:	b34b      	cbz	r3, 57ac <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    5758:	f7ff fec0 	bl	54dc <z_nrf_rtc_timer_read>
	__asm__ volatile(
    575c:	f04f 0320 	mov.w	r3, #32
    5760:	f3ef 8c11 	mrs	ip, BASEPRI
    5764:	f383 8812 	msr	BASEPRI_MAX, r3
    5768:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    576c:	4b18      	ldr	r3, [pc, #96]	; (57d0 <rtc_nrf_isr+0xe8>)
    576e:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    5772:	42b0      	cmp	r0, r6
    5774:	eb71 0207 	sbcs.w	r2, r1, r7
    5778:	f04f 0200 	mov.w	r2, #0
    577c:	d320      	bcc.n	57c0 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    577e:	f04f 38ff 	mov.w	r8, #4294967295
    5782:	f04f 39ff 	mov.w	r9, #4294967295
			user_context = cc_data[chan].user_context;
    5786:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    578a:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    578e:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    5790:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5794:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    5798:	f38c 8811 	msr	BASEPRI, ip
    579c:	f3bf 8f6f 	isb	sy
		if (handler) {
    57a0:	b121      	cbz	r1, 57ac <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    57a2:	9500      	str	r5, [sp, #0]
    57a4:	4632      	mov	r2, r6
    57a6:	463b      	mov	r3, r7
    57a8:	2000      	movs	r0, #0
    57aa:	4788      	blx	r1
}
    57ac:	b003      	add	sp, #12
    57ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    57b2:	2300      	movs	r3, #0
    57b4:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    57b8:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    57bc:	2301      	movs	r3, #1
}
    57be:	e7c6      	b.n	574e <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    57c0:	4611      	mov	r1, r2
    57c2:	e7e9      	b.n	5798 <rtc_nrf_isr+0xb0>
    57c4:	40011000 	.word	0x40011000
    57c8:	200015cc 	.word	0x200015cc
    57cc:	200015c4 	.word	0x200015c4
    57d0:	200007a8 	.word	0x200007a8

000057d4 <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    57d4:	1c43      	adds	r3, r0, #1
{
    57d6:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    57d8:	d021      	beq.n	581e <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    57da:	2801      	cmp	r0, #1
    57dc:	dd21      	ble.n	5822 <sys_clock_set_timeout+0x4e>
    57de:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    57e2:	da20      	bge.n	5826 <sys_clock_set_timeout+0x52>
    57e4:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    57e6:	f7ff fe79 	bl	54dc <z_nrf_rtc_timer_read>
    57ea:	4b10      	ldr	r3, [pc, #64]	; (582c <sys_clock_set_timeout+0x58>)
    57ec:	e9d3 1300 	ldrd	r1, r3, [r3]
    57f0:	1a40      	subs	r0, r0, r1
		ticks = 0;
    57f2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    57f6:	bf28      	it	cs
    57f8:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    57fa:	3001      	adds	r0, #1
    57fc:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    57fe:	480c      	ldr	r0, [pc, #48]	; (5830 <sys_clock_set_timeout+0x5c>)
    5800:	4282      	cmp	r2, r0
    5802:	bf28      	it	cs
    5804:	4602      	movcs	r2, r0
    5806:	1852      	adds	r2, r2, r1
    5808:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    580c:	4909      	ldr	r1, [pc, #36]	; (5834 <sys_clock_set_timeout+0x60>)
    580e:	9001      	str	r0, [sp, #4]
    5810:	9100      	str	r1, [sp, #0]
    5812:	f143 0300 	adc.w	r3, r3, #0
    5816:	f7ff fe83 	bl	5520 <compare_set>
}
    581a:	b002      	add	sp, #8
    581c:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    581e:	4804      	ldr	r0, [pc, #16]	; (5830 <sys_clock_set_timeout+0x5c>)
    5820:	e7e0      	b.n	57e4 <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5822:	2400      	movs	r4, #0
    5824:	e7df      	b.n	57e6 <sys_clock_set_timeout+0x12>
    5826:	4c02      	ldr	r4, [pc, #8]	; (5830 <sys_clock_set_timeout+0x5c>)
    5828:	e7dd      	b.n	57e6 <sys_clock_set_timeout+0x12>
    582a:	bf00      	nop
    582c:	200007b8 	.word	0x200007b8
    5830:	007fffff 	.word	0x007fffff
    5834:	00005409 	.word	0x00005409

00005838 <sys_clock_elapsed>:
{
    5838:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    583a:	f7ff fe4f 	bl	54dc <z_nrf_rtc_timer_read>
    583e:	4b02      	ldr	r3, [pc, #8]	; (5848 <sys_clock_elapsed+0x10>)
    5840:	681b      	ldr	r3, [r3, #0]
}
    5842:	1ac0      	subs	r0, r0, r3
    5844:	bd08      	pop	{r3, pc}
    5846:	bf00      	nop
    5848:	200007b8 	.word	0x200007b8

0000584c <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    584c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    584e:	f7fb ffb9 	bl	17c4 <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    5852:	4b07      	ldr	r3, [pc, #28]	; (5870 <k_sys_fatal_error_handler+0x24>)
    5854:	9305      	str	r3, [sp, #20]
    5856:	2302      	movs	r3, #2
    5858:	9304      	str	r3, [sp, #16]
    585a:	4806      	ldr	r0, [pc, #24]	; (5874 <k_sys_fatal_error_handler+0x28>)
    585c:	2300      	movs	r3, #0
    585e:	aa04      	add	r2, sp, #16
    5860:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5864:	f004 feda 	bl	a61c <z_impl_z_log_msg2_static_create>
		sys_arch_reboot(0);
    5868:	2000      	movs	r0, #0
    586a:	f7fd feab 	bl	35c4 <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    586e:	bf00      	nop
    5870:	0000c8c0 	.word	0x0000c8c0
    5874:	0000b994 	.word	0x0000b994

00005878 <RADIO_IRQHandler>:
	irq_unlock(key);
}

static void radio_irq_handler(void)
{
	if (NRF_RADIO->EVENTS_READY &&
    5878:	4b19      	ldr	r3, [pc, #100]	; (58e0 <RADIO_IRQHandler+0x68>)
			event_handler(&event);
		}
	}
}

ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    587a:	4668      	mov	r0, sp
    587c:	f020 0107 	bic.w	r1, r0, #7
	if (NRF_RADIO->EVENTS_READY &&
    5880:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    5884:	468d      	mov	sp, r1
    5886:	b501      	push	{r0, lr}
	if (NRF_RADIO->EVENTS_READY &&
    5888:	b14a      	cbz	r2, 589e <RADIO_IRQHandler+0x26>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_READY_Msk)) {
    588a:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_READY &&
    588e:	07d0      	lsls	r0, r2, #31
		NRF_RADIO->EVENTS_READY = 0;
    5890:	bf41      	itttt	mi
    5892:	2200      	movmi	r2, #0
    5894:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
		ESB_SYS_TIMER->TASKS_START;
    5898:	f503 4310 	addmi.w	r3, r3, #36864	; 0x9000
    589c:	681b      	ldrmi	r3, [r3, #0]
	if (NRF_RADIO->EVENTS_END &&
    589e:	4b10      	ldr	r3, [pc, #64]	; (58e0 <RADIO_IRQHandler+0x68>)
    58a0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    58a4:	b132      	cbz	r2, 58b4 <RADIO_IRQHandler+0x3c>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_END_Msk)) {
    58a6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_END &&
    58aa:	0711      	lsls	r1, r2, #28
		NRF_RADIO->EVENTS_END = 0;
    58ac:	bf44      	itt	mi
    58ae:	2200      	movmi	r2, #0
    58b0:	f8c3 210c 	strmi.w	r2, [r3, #268]	; 0x10c
	if (NRF_RADIO->EVENTS_DISABLED &&
    58b4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    58b8:	b152      	cbz	r2, 58d0 <RADIO_IRQHandler+0x58>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_DISABLED_Msk)) {
    58ba:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_DISABLED &&
    58be:	06d2      	lsls	r2, r2, #27
    58c0:	d506      	bpl.n	58d0 <RADIO_IRQHandler+0x58>
		NRF_RADIO->EVENTS_DISABLED = 0;
    58c2:	2200      	movs	r2, #0
    58c4:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		if (on_radio_disabled) {
    58c8:	4b06      	ldr	r3, [pc, #24]	; (58e4 <RADIO_IRQHandler+0x6c>)
    58ca:	681b      	ldr	r3, [r3, #0]
    58cc:	b103      	cbz	r3, 58d0 <RADIO_IRQHandler+0x58>
			on_radio_disabled();
    58ce:	4798      	blx	r3
{
	radio_irq_handler();

	ISR_DIRECT_PM();
    58d0:	f7fd f944 	bl	2b5c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
    58d4:	f7fd fa26 	bl	2d24 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    58d8:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    58dc:	4685      	mov	sp, r0
    58de:	4770      	bx	lr
    58e0:	40001000 	.word	0x40001000
    58e4:	200015dc 	.word	0x200015dc

000058e8 <SWI0_EGU0_IRQHandler>:

	return 1;
}


ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    58e8:	4668      	mov	r0, sp
    58ea:	f020 0107 	bic.w	r1, r0, #7
    58ee:	468d      	mov	sp, r1
    58f0:	b531      	push	{r0, r4, r5, lr}
	event.tx_attempts = last_tx_attempts;
    58f2:	4b1b      	ldr	r3, [pc, #108]	; (5960 <SWI0_EGU0_IRQHandler+0x78>)
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    58f4:	b082      	sub	sp, #8
	event.tx_attempts = last_tx_attempts;
    58f6:	681b      	ldr	r3, [r3, #0]
    58f8:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
    58fa:	f04f 0320 	mov.w	r3, #32
    58fe:	f3ef 8111 	mrs	r1, BASEPRI
    5902:	f383 8812 	msr	BASEPRI_MAX, r3
    5906:	f3bf 8f6f 	isb	sy
	*interrupts = interrupt_flags;
    590a:	4b16      	ldr	r3, [pc, #88]	; (5964 <SWI0_EGU0_IRQHandler+0x7c>)
	interrupt_flags = 0;
    590c:	2200      	movs	r2, #0
	*interrupts = interrupt_flags;
    590e:	681d      	ldr	r5, [r3, #0]
	interrupt_flags = 0;
    5910:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    5912:	f381 8811 	msr	BASEPRI, r1
    5916:	f3bf 8f6f 	isb	sy
	if (event_handler != NULL) {
    591a:	4c13      	ldr	r4, [pc, #76]	; (5968 <SWI0_EGU0_IRQHandler+0x80>)
    591c:	6823      	ldr	r3, [r4, #0]
    591e:	b1ab      	cbz	r3, 594c <SWI0_EGU0_IRQHandler+0x64>
		if (interrupts & INT_TX_SUCCESS_MSK) {
    5920:	07e9      	lsls	r1, r5, #31
    5922:	d503      	bpl.n	592c <SWI0_EGU0_IRQHandler+0x44>
			event.evt_id = ESB_EVENT_TX_SUCCESS;
    5924:	f88d 2000 	strb.w	r2, [sp]
			event_handler(&event);
    5928:	4668      	mov	r0, sp
    592a:	4798      	blx	r3
		if (interrupts & INT_TX_FAILED_MSK) {
    592c:	07aa      	lsls	r2, r5, #30
    592e:	d505      	bpl.n	593c <SWI0_EGU0_IRQHandler+0x54>
			event.evt_id = ESB_EVENT_TX_FAILED;
    5930:	2301      	movs	r3, #1
    5932:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    5936:	4668      	mov	r0, sp
    5938:	6823      	ldr	r3, [r4, #0]
    593a:	4798      	blx	r3
		if (interrupts & INT_RX_DATA_RECEIVED_MSK) {
    593c:	076b      	lsls	r3, r5, #29
    593e:	d505      	bpl.n	594c <SWI0_EGU0_IRQHandler+0x64>
			event.evt_id = ESB_EVENT_RX_RECEIVED;
    5940:	2302      	movs	r3, #2
    5942:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    5946:	4668      	mov	r0, sp
    5948:	6823      	ldr	r3, [r4, #0]
    594a:	4798      	blx	r3
{
	esb_evt_irq_handler();

	ISR_DIRECT_PM();
    594c:	f7fd f906 	bl	2b5c <_arch_isr_direct_pm>
    5950:	f7fd f9e8 	bl	2d24 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    5954:	b002      	add	sp, #8
    5956:	e8bd 4031 	ldmia.w	sp!, {r0, r4, r5, lr}
    595a:	4685      	mov	sp, r0
    595c:	4770      	bx	lr
    595e:	bf00      	nop
    5960:	200015d8 	.word	0x200015d8
    5964:	200015d4 	.word	0x200015d4
    5968:	200015d0 	.word	0x200015d0

0000596c <pmw3360_channel_get>:
{
	struct pmw3360_data *dev_data = &pmw3360_data;

	ARG_UNUSED(dev);

	if (unlikely(!dev_data->ready)) {
    596c:	4b0b      	ldr	r3, [pc, #44]	; (599c <pmw3360_channel_get+0x30>)
    596e:	f893 0068 	ldrb.w	r0, [r3, #104]	; 0x68
    5972:	b178      	cbz	r0, 5994 <pmw3360_channel_get+0x28>
		LOG_DBG("Device is not initialized yet");
		return -EBUSY;
	}

	switch (chan) {
    5974:	2923      	cmp	r1, #35	; 0x23
    5976:	d004      	beq.n	5982 <pmw3360_channel_get+0x16>
    5978:	2924      	cmp	r1, #36	; 0x24
    597a:	d008      	beq.n	598e <pmw3360_channel_get+0x22>
    597c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5980:	4770      	bx	lr
	case SENSOR_CHAN_POS_DX:
		val->val1 = dev_data->x;
    5982:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
		val->val2 = 0;
		break;

	case SENSOR_CHAN_POS_DY:
		val->val1 = dev_data->y;
    5986:	6013      	str	r3, [r2, #0]
		val->val2 = 0;
    5988:	2000      	movs	r0, #0
    598a:	6050      	str	r0, [r2, #4]
		break;
    598c:	4770      	bx	lr
		val->val1 = dev_data->y;
    598e:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
    5992:	e7f8      	b.n	5986 <pmw3360_channel_get+0x1a>
		return -EBUSY;
    5994:	f06f 000f 	mvn.w	r0, #15
	default:
		return -ENOTSUP;
	}

	return 0;
}
    5998:	4770      	bx	lr
    599a:	bf00      	nop
    599c:	200007c0 	.word	0x200007c0

000059a0 <pmw3360_async_init>:
{
    59a0:	b570      	push	{r4, r5, r6, lr}
	dev_data->err = async_init_fn[dev_data->async_init_step](dev_data);
    59a2:	4c22      	ldr	r4, [pc, #136]	; (5a2c <pmw3360_async_init+0x8c>)
    59a4:	4b22      	ldr	r3, [pc, #136]	; (5a30 <pmw3360_async_init+0x90>)
    59a6:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
{
    59aa:	b086      	sub	sp, #24
	dev_data->err = async_init_fn[dev_data->async_init_step](dev_data);
    59ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    59b0:	4620      	mov	r0, r4
    59b2:	4798      	blx	r3
    59b4:	4601      	mov	r1, r0
    59b6:	6660      	str	r0, [r4, #100]	; 0x64
	if (dev_data->err) {
    59b8:	b158      	cbz	r0, 59d2 <pmw3360_async_init+0x32>
		LOG_ERR("PMW3360 initialization failed");
    59ba:	4b1e      	ldr	r3, [pc, #120]	; (5a34 <pmw3360_async_init+0x94>)
    59bc:	9305      	str	r3, [sp, #20]
    59be:	2302      	movs	r3, #2
    59c0:	9304      	str	r3, [sp, #16]
    59c2:	aa04      	add	r2, sp, #16
    59c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			LOG_INF("PMW3360 initialized");
    59c8:	481b      	ldr	r0, [pc, #108]	; (5a38 <pmw3360_async_init+0x98>)
    59ca:	f005 f94e 	bl	ac6a <z_log_msg2_static_create.constprop.0>
}
    59ce:	b006      	add	sp, #24
    59d0:	bd70      	pop	{r4, r5, r6, pc}
		dev_data->async_init_step++;
    59d2:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    59d6:	3301      	adds	r3, #1
    59d8:	b2db      	uxtb	r3, r3
		if (dev_data->async_init_step == ASYNC_INIT_STEP_COUNT) {
    59da:	2b05      	cmp	r3, #5
		dev_data->async_init_step++;
    59dc:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		if (dev_data->async_init_step == ASYNC_INIT_STEP_COUNT) {
    59e0:	d10a      	bne.n	59f8 <pmw3360_async_init+0x58>
			dev_data->ready = true;
    59e2:	2301      	movs	r3, #1
    59e4:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
			LOG_INF("PMW3360 initialized");
    59e8:	4b14      	ldr	r3, [pc, #80]	; (5a3c <pmw3360_async_init+0x9c>)
    59ea:	9305      	str	r3, [sp, #20]
    59ec:	2302      	movs	r3, #2
    59ee:	9304      	str	r3, [sp, #16]
    59f0:	aa04      	add	r2, sp, #16
    59f2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    59f6:	e7e7      	b.n	59c8 <pmw3360_async_init+0x28>
					K_MSEC(async_init_delay[
    59f8:	4a11      	ldr	r2, [pc, #68]	; (5a40 <pmw3360_async_init+0xa0>)
    59fa:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    59fe:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    5a02:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    5a06:	f240 30e7 	movw	r0, #999	; 0x3e7
    5a0a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5a0e:	2300      	movs	r3, #0
    5a10:	fbc5 0106 	smlal	r0, r1, r5, r6
    5a14:	f7fa fb64 	bl	e0 <__aeabi_uldivmod>
    5a18:	4602      	mov	r2, r0
    5a1a:	460b      	mov	r3, r1
			k_work_schedule(&dev_data->init_work,
    5a1c:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    5a20:	b006      	add	sp, #24
    5a22:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&dev_data->init_work,
    5a26:	f003 ba41 	b.w	8eac <k_work_schedule>
    5a2a:	bf00      	nop
    5a2c:	200007c0 	.word	0x200007c0
    5a30:	0000bc50 	.word	0x0000bc50
    5a34:	0000c8dd 	.word	0x0000c8dd
    5a38:	0000b9bc 	.word	0x0000b9bc
    5a3c:	0000c8fb 	.word	0x0000c8fb
    5a40:	0000bc3c 	.word	0x0000bc3c

00005a44 <spi_write.constprop.0>:
 * @param tx_bufs Buffer array where data to be sent originates from.
 *
 * @retval 0 If successful.
 * @retval -errno Negative errno code on failure.
 */
static inline int spi_write(const struct device *dev,
    5a44:	b410      	push	{r4}
    5a46:	460a      	mov	r2, r1
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    5a48:	6883      	ldr	r3, [r0, #8]
    5a4a:	4903      	ldr	r1, [pc, #12]	; (5a58 <spi_write.constprop.0+0x14>)
    5a4c:	681c      	ldr	r4, [r3, #0]
    5a4e:	2300      	movs	r3, #0
    5a50:	46a4      	mov	ip, r4
			    const struct spi_config *config,
			    const struct spi_buf_set *tx_bufs)
{
	return spi_transceive(dev, config, tx_bufs, NULL);
}
    5a52:	bc10      	pop	{r4}
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    5a54:	4760      	bx	ip
    5a56:	bf00      	nop
    5a58:	0000bc78 	.word	0x0000bc78

00005a5c <spi_cs_ctrl>:
{
    5a5c:	b530      	push	{r4, r5, lr}
    5a5e:	4604      	mov	r4, r0
    5a60:	b087      	sub	sp, #28
	if (!enable) {
    5a62:	460d      	mov	r5, r1
    5a64:	b911      	cbnz	r1, 5a6c <spi_cs_ctrl+0x10>
		k_busy_wait(T_NCS_SCLK);
    5a66:	2001      	movs	r0, #1
    5a68:	f005 f8fd 	bl	ac66 <k_busy_wait>
	err = gpio_pin_set_raw(dev_data->cs_gpio_dev, PMW3360_CS_GPIO_PIN, val);
    5a6c:	6820      	ldr	r0, [r4, #0]

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (value != 0)	{
    5a6e:	b9b5      	cbnz	r5, 5a9e <spi_cs_ctrl+0x42>
	return api->port_set_bits_raw(port, pins);
    5a70:	6883      	ldr	r3, [r0, #8]
    5a72:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    5a74:	2140      	movs	r1, #64	; 0x40
    5a76:	4798      	blx	r3
    5a78:	4604      	mov	r4, r0
	if (err) {
    5a7a:	b148      	cbz	r0, 5a90 <spi_cs_ctrl+0x34>
		LOG_ERR("SPI CS ctrl failed");
    5a7c:	4b09      	ldr	r3, [pc, #36]	; (5aa4 <spi_cs_ctrl+0x48>)
    5a7e:	9305      	str	r3, [sp, #20]
    5a80:	4809      	ldr	r0, [pc, #36]	; (5aa8 <spi_cs_ctrl+0x4c>)
    5a82:	2302      	movs	r3, #2
    5a84:	aa04      	add	r2, sp, #16
    5a86:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5a8a:	9304      	str	r3, [sp, #16]
    5a8c:	f005 f8ed 	bl	ac6a <z_log_msg2_static_create.constprop.0>
	if (enable) {
    5a90:	b115      	cbz	r5, 5a98 <spi_cs_ctrl+0x3c>
		k_busy_wait(T_NCS_SCLK);
    5a92:	2001      	movs	r0, #1
    5a94:	f005 f8e7 	bl	ac66 <k_busy_wait>
}
    5a98:	4620      	mov	r0, r4
    5a9a:	b007      	add	sp, #28
    5a9c:	bd30      	pop	{r4, r5, pc}
    5a9e:	6883      	ldr	r3, [r0, #8]
    5aa0:	691b      	ldr	r3, [r3, #16]
    5aa2:	e7e7      	b.n	5a74 <spi_cs_ctrl+0x18>
    5aa4:	0000c90f 	.word	0x0000c90f
    5aa8:	0000b9bc 	.word	0x0000b9bc

00005aac <reg_write.part.0>:
static int reg_write(struct pmw3360_data *dev_data, uint8_t reg, uint8_t val)
    5aac:	b570      	push	{r4, r5, r6, lr}
    5aae:	b08c      	sub	sp, #48	; 0x30
	const struct spi_buf tx_buf = {
    5ab0:	ab01      	add	r3, sp, #4
	uint8_t buf[] = {
    5ab2:	f061 017f 	orn	r1, r1, #127	; 0x7f
	const struct spi_buf tx_buf = {
    5ab6:	9302      	str	r3, [sp, #8]
	const struct spi_buf_set tx = {
    5ab8:	ab02      	add	r3, sp, #8
	uint8_t buf[] = {
    5aba:	f88d 1004 	strb.w	r1, [sp, #4]
	const struct spi_buf_set tx = {
    5abe:	9304      	str	r3, [sp, #16]
static int reg_write(struct pmw3360_data *dev_data, uint8_t reg, uint8_t val)
    5ac0:	4605      	mov	r5, r0
	const struct spi_buf_set tx = {
    5ac2:	2301      	movs	r3, #1
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    5ac4:	6880      	ldr	r0, [r0, #8]
	uint8_t buf[] = {
    5ac6:	f88d 2005 	strb.w	r2, [sp, #5]
	const struct spi_buf tx_buf = {
    5aca:	2602      	movs	r6, #2
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    5acc:	a904      	add	r1, sp, #16
	const struct spi_buf tx_buf = {
    5ace:	9603      	str	r6, [sp, #12]
	const struct spi_buf_set tx = {
    5ad0:	9305      	str	r3, [sp, #20]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    5ad2:	f7ff ffb7 	bl	5a44 <spi_write.constprop.0>
	if (err) {
    5ad6:	4604      	mov	r4, r0
    5ad8:	b158      	cbz	r0, 5af2 <reg_write.part.0+0x46>
		LOG_ERR("Reg write failed on SPI write");
    5ada:	4b0e      	ldr	r3, [pc, #56]	; (5b14 <reg_write.part.0+0x68>)
    5adc:	480e      	ldr	r0, [pc, #56]	; (5b18 <reg_write.part.0+0x6c>)
    5ade:	aa0a      	add	r2, sp, #40	; 0x28
    5ae0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5ae4:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
    5ae8:	f005 f8bf 	bl	ac6a <z_log_msg2_static_create.constprop.0>
}
    5aec:	4620      	mov	r0, r4
    5aee:	b00c      	add	sp, #48	; 0x30
    5af0:	bd70      	pop	{r4, r5, r6, pc}
	k_busy_wait(T_SCLK_NCS_WR);
    5af2:	2022      	movs	r0, #34	; 0x22
    5af4:	f005 f8b7 	bl	ac66 <k_busy_wait>
	err = spi_cs_ctrl(dev_data, false);
    5af8:	4621      	mov	r1, r4
    5afa:	4628      	mov	r0, r5
    5afc:	f7ff ffae 	bl	5a5c <spi_cs_ctrl>
	if (err) {
    5b00:	4604      	mov	r4, r0
    5b02:	2800      	cmp	r0, #0
    5b04:	d1f2      	bne.n	5aec <reg_write.part.0+0x40>
	k_busy_wait(T_SWX);
    5b06:	2092      	movs	r0, #146	; 0x92
    5b08:	f005 f8ad 	bl	ac66 <k_busy_wait>
	dev_data->last_read_burst = false;
    5b0c:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69
	return 0;
    5b10:	e7ec      	b.n	5aec <reg_write.part.0+0x40>
    5b12:	bf00      	nop
    5b14:	0000c922 	.word	0x0000c922
    5b18:	0000b9bc 	.word	0x0000b9bc

00005b1c <update_cpi>:
{
    5b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((cpi > PMW3360_MAX_CPI) || (cpi < PMW3360_MIN_CPI)) {
    5b1e:	f1a1 0264 	sub.w	r2, r1, #100	; 0x64
    5b22:	f642 637c 	movw	r3, #11900	; 0x2e7c
{
    5b26:	b087      	sub	sp, #28
	if ((cpi > PMW3360_MAX_CPI) || (cpi < PMW3360_MIN_CPI)) {
    5b28:	429a      	cmp	r2, r3
{
    5b2a:	4605      	mov	r5, r0
    5b2c:	af00      	add	r7, sp, #0
	if ((cpi > PMW3360_MAX_CPI) || (cpi < PMW3360_MIN_CPI)) {
    5b2e:	d914      	bls.n	5b5a <update_cpi+0x3e>
		LOG_ERR("CPI value %u out of range", cpi);
    5b30:	466c      	mov	r4, sp
    5b32:	4b1e      	ldr	r3, [pc, #120]	; (5bac <update_cpi+0x90>)
    5b34:	481e      	ldr	r0, [pc, #120]	; (5bb0 <update_cpi+0x94>)
    5b36:	b088      	sub	sp, #32
    5b38:	466a      	mov	r2, sp
    5b3a:	e9c2 3105 	strd	r3, r1, [r2, #20]
    5b3e:	2303      	movs	r3, #3
    5b40:	f842 3f10 	str.w	r3, [r2, #16]!
    5b44:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5b48:	f005 f88f 	bl	ac6a <z_log_msg2_static_create.constprop.0>
    5b4c:	46a5      	mov	sp, r4
		return -EINVAL;
    5b4e:	f06f 0415 	mvn.w	r4, #21
}
    5b52:	4620      	mov	r0, r4
    5b54:	371c      	adds	r7, #28
    5b56:	46bd      	mov	sp, r7
    5b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("Setting CPI to %u (reg value 0x%x)", cpi, value);
    5b5a:	4b16      	ldr	r3, [pc, #88]	; (5bb4 <update_cpi+0x98>)
    5b5c:	4814      	ldr	r0, [pc, #80]	; (5bb0 <update_cpi+0x94>)
    5b5e:	466e      	mov	r6, sp
    5b60:	b088      	sub	sp, #32
    5b62:	466a      	mov	r2, sp
	uint8_t value = (cpi / 100) - 1;
    5b64:	2464      	movs	r4, #100	; 0x64
    5b66:	fbb1 f4f4 	udiv	r4, r1, r4
    5b6a:	3c01      	subs	r4, #1
	LOG_INF("Setting CPI to %u (reg value 0x%x)", cpi, value);
    5b6c:	e9c2 3105 	strd	r3, r1, [r2, #20]
	uint8_t value = (cpi / 100) - 1;
    5b70:	b2e4      	uxtb	r4, r4
	LOG_INF("Setting CPI to %u (reg value 0x%x)", cpi, value);
    5b72:	2304      	movs	r3, #4
    5b74:	61d4      	str	r4, [r2, #28]
    5b76:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    5b7a:	f842 3f10 	str.w	r3, [r2, #16]!
    5b7e:	f005 f874 	bl	ac6a <z_log_msg2_static_create.constprop.0>
	int err = reg_write(dev_data, PMW3360_REG_CONFIG1, value);
    5b82:	4622      	mov	r2, r4
    5b84:	46b5      	mov	sp, r6
    5b86:	210f      	movs	r1, #15
    5b88:	4628      	mov	r0, r5
    5b8a:	f005 f871 	bl	ac70 <reg_write>
	if (err) {
    5b8e:	4604      	mov	r4, r0
    5b90:	2800      	cmp	r0, #0
    5b92:	d0de      	beq.n	5b52 <update_cpi+0x36>
		LOG_ERR("Failed to change CPI");
    5b94:	4b08      	ldr	r3, [pc, #32]	; (5bb8 <update_cpi+0x9c>)
    5b96:	617b      	str	r3, [r7, #20]
    5b98:	4805      	ldr	r0, [pc, #20]	; (5bb0 <update_cpi+0x94>)
    5b9a:	2302      	movs	r3, #2
    5b9c:	f107 0210 	add.w	r2, r7, #16
    5ba0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5ba4:	613b      	str	r3, [r7, #16]
    5ba6:	f005 f860 	bl	ac6a <z_log_msg2_static_create.constprop.0>
    5baa:	e7d2      	b.n	5b52 <update_cpi+0x36>
    5bac:	0000c940 	.word	0x0000c940
    5bb0:	0000b9bc 	.word	0x0000b9bc
    5bb4:	0000c95a 	.word	0x0000c95a
    5bb8:	0000c97d 	.word	0x0000c97d

00005bbc <update_downshift_time>:
{
    5bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (reg_addr) {
    5bc0:	2917      	cmp	r1, #23
{
    5bc2:	b086      	sub	sp, #24
    5bc4:	4606      	mov	r6, r0
    5bc6:	af00      	add	r7, sp, #0
    5bc8:	460d      	mov	r5, r1
    5bca:	4614      	mov	r4, r2
	switch (reg_addr) {
    5bcc:	d015      	beq.n	5bfa <update_downshift_time+0x3e>
    5bce:	291a      	cmp	r1, #26
    5bd0:	d02c      	beq.n	5c2c <update_downshift_time+0x70>
    5bd2:	2914      	cmp	r1, #20
    5bd4:	d02e      	beq.n	5c34 <update_downshift_time+0x78>
		LOG_ERR("Not supported");
    5bd6:	4b2d      	ldr	r3, [pc, #180]	; (5c8c <update_downshift_time+0xd0>)
    5bd8:	617b      	str	r3, [r7, #20]
    5bda:	482d      	ldr	r0, [pc, #180]	; (5c90 <update_downshift_time+0xd4>)
    5bdc:	2302      	movs	r3, #2
    5bde:	f107 0210 	add.w	r2, r7, #16
    5be2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
    5be6:	f06f 0485 	mvn.w	r4, #133	; 0x85
		LOG_ERR("Not supported");
    5bea:	613b      	str	r3, [r7, #16]
    5bec:	f005 f83d 	bl	ac6a <z_log_msg2_static_create.constprop.0>
}
    5bf0:	4620      	mov	r0, r4
    5bf2:	3718      	adds	r7, #24
    5bf4:	46bd      	mov	sp, r7
    5bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		maxtime = 81600;
    5bfa:	4a26      	ldr	r2, [pc, #152]	; (5c94 <update_downshift_time+0xd8>)
		mintime = 320;
    5bfc:	f44f 73a0 	mov.w	r3, #320	; 0x140
	if ((time > maxtime) || (time < mintime)) {
    5c00:	4294      	cmp	r4, r2
    5c02:	d801      	bhi.n	5c08 <update_downshift_time+0x4c>
    5c04:	429c      	cmp	r4, r3
    5c06:	d219      	bcs.n	5c3c <update_downshift_time+0x80>
		LOG_WRN("Downshift time %u out of range", time);
    5c08:	4b23      	ldr	r3, [pc, #140]	; (5c98 <update_downshift_time+0xdc>)
    5c0a:	4821      	ldr	r0, [pc, #132]	; (5c90 <update_downshift_time+0xd4>)
    5c0c:	466d      	mov	r5, sp
    5c0e:	b088      	sub	sp, #32
    5c10:	466a      	mov	r2, sp
    5c12:	e9c2 3405 	strd	r3, r4, [r2, #20]
    5c16:	2303      	movs	r3, #3
    5c18:	f842 3f10 	str.w	r3, [r2, #16]!
    5c1c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    5c20:	f005 f823 	bl	ac6a <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    5c24:	f06f 0415 	mvn.w	r4, #21
    5c28:	46ad      	mov	sp, r5
    5c2a:	e7e1      	b.n	5bf0 <update_downshift_time+0x34>
	switch (reg_addr) {
    5c2c:	4a1b      	ldr	r2, [pc, #108]	; (5c9c <update_downshift_time+0xe0>)
    5c2e:	f44f 6348 	mov.w	r3, #3200	; 0xc80
    5c32:	e7e5      	b.n	5c00 <update_downshift_time+0x44>
		mintime = 10;
    5c34:	230a      	movs	r3, #10
		maxtime = 2550;
    5c36:	f640 12f6 	movw	r2, #2550	; 0x9f6
    5c3a:	e7e1      	b.n	5c00 <update_downshift_time+0x44>
	LOG_INF("Set downshift time to %u ms (reg value 0x%x)", time, value);
    5c3c:	4918      	ldr	r1, [pc, #96]	; (5ca0 <update_downshift_time+0xe4>)
	uint8_t value = time / mintime;
    5c3e:	fbb4 f3f3 	udiv	r3, r4, r3
	LOG_INF("Set downshift time to %u ms (reg value 0x%x)", time, value);
    5c42:	46e8      	mov	r8, sp
    5c44:	b088      	sub	sp, #32
    5c46:	466a      	mov	r2, sp
    5c48:	e9c2 1405 	strd	r1, r4, [r2, #20]
    5c4c:	b2dc      	uxtb	r4, r3
    5c4e:	2304      	movs	r3, #4
    5c50:	61d4      	str	r4, [r2, #28]
    5c52:	480f      	ldr	r0, [pc, #60]	; (5c90 <update_downshift_time+0xd4>)
    5c54:	f842 3f10 	str.w	r3, [r2, #16]!
    5c58:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    5c5c:	f005 f805 	bl	ac6a <z_log_msg2_static_create.constprop.0>
	int err = reg_write(dev_data, reg_addr, value);
    5c60:	4622      	mov	r2, r4
    5c62:	46c5      	mov	sp, r8
    5c64:	4629      	mov	r1, r5
    5c66:	4630      	mov	r0, r6
    5c68:	f005 f802 	bl	ac70 <reg_write>
	if (err) {
    5c6c:	4604      	mov	r4, r0
    5c6e:	2800      	cmp	r0, #0
    5c70:	d0be      	beq.n	5bf0 <update_downshift_time+0x34>
		LOG_ERR("Failed to change downshift time");
    5c72:	4b0c      	ldr	r3, [pc, #48]	; (5ca4 <update_downshift_time+0xe8>)
    5c74:	617b      	str	r3, [r7, #20]
    5c76:	4806      	ldr	r0, [pc, #24]	; (5c90 <update_downshift_time+0xd4>)
    5c78:	2302      	movs	r3, #2
    5c7a:	f107 0210 	add.w	r2, r7, #16
    5c7e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5c82:	613b      	str	r3, [r7, #16]
    5c84:	f004 fff1 	bl	ac6a <z_log_msg2_static_create.constprop.0>
    5c88:	e7b2      	b.n	5bf0 <update_downshift_time+0x34>
    5c8a:	bf00      	nop
    5c8c:	0000c992 	.word	0x0000c992
    5c90:	0000b9bc 	.word	0x0000b9bc
    5c94:	00013ec0 	.word	0x00013ec0
    5c98:	0000c9a0 	.word	0x0000c9a0
    5c9c:	000c7380 	.word	0x000c7380
    5ca0:	0000c9bf 	.word	0x0000c9bf
    5ca4:	0000c9ec 	.word	0x0000c9ec

00005ca8 <pmw3360_async_init_configure>:
{
    5ca8:	b510      	push	{r4, lr}
	err = update_cpi(dev_data, CONFIG_PMW3360_CPI);
    5caa:	f44f 61c8 	mov.w	r1, #1600	; 0x640
{
    5cae:	4604      	mov	r4, r0
	err = update_cpi(dev_data, CONFIG_PMW3360_CPI);
    5cb0:	f7ff ff34 	bl	5b1c <update_cpi>
	if (!err) {
    5cb4:	b9a0      	cbnz	r0, 5ce0 <pmw3360_async_init_configure+0x38>
		err = update_downshift_time(dev_data,
    5cb6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    5cba:	2114      	movs	r1, #20
    5cbc:	4620      	mov	r0, r4
    5cbe:	f7ff ff7d 	bl	5bbc <update_downshift_time>
	if (!err) {
    5cc2:	b968      	cbnz	r0, 5ce0 <pmw3360_async_init_configure+0x38>
		err = update_downshift_time(dev_data,
    5cc4:	f242 4204 	movw	r2, #9220	; 0x2404
    5cc8:	2117      	movs	r1, #23
    5cca:	4620      	mov	r0, r4
    5ccc:	f7ff ff76 	bl	5bbc <update_downshift_time>
	if (!err) {
    5cd0:	b930      	cbnz	r0, 5ce0 <pmw3360_async_init_configure+0x38>
		err = update_downshift_time(dev_data,
    5cd2:	4620      	mov	r0, r4
    5cd4:	4a03      	ldr	r2, [pc, #12]	; (5ce4 <pmw3360_async_init_configure+0x3c>)
}
    5cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = update_downshift_time(dev_data,
    5cda:	211a      	movs	r1, #26
    5cdc:	f7ff bf6e 	b.w	5bbc <update_downshift_time>
}
    5ce0:	bd10      	pop	{r4, pc}
    5ce2:	bf00      	nop
    5ce4:	000249f0 	.word	0x000249f0

00005ce8 <update_sample_time.constprop.0>:
static int update_sample_time(struct pmw3360_data *dev_data,
    5ce8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((sample_time > maxtime) || (sample_time < mintime)) {
    5cec:	1e56      	subs	r6, r2, #1
static int update_sample_time(struct pmw3360_data *dev_data,
    5cee:	b086      	sub	sp, #24
	if ((sample_time > maxtime) || (sample_time < mintime)) {
    5cf0:	f5b6 6f1b 	cmp.w	r6, #2480	; 0x9b0
static int update_sample_time(struct pmw3360_data *dev_data,
    5cf4:	4604      	mov	r4, r0
    5cf6:	af00      	add	r7, sp, #0
    5cf8:	460d      	mov	r5, r1
    5cfa:	4613      	mov	r3, r2
	if ((sample_time > maxtime) || (sample_time < mintime)) {
    5cfc:	d315      	bcc.n	5d2a <update_sample_time.constprop.0+0x42>
		LOG_WRN("Sample time %u out of range", sample_time);
    5cfe:	466c      	mov	r4, sp
    5d00:	491f      	ldr	r1, [pc, #124]	; (5d80 <update_sample_time.constprop.0+0x98>)
    5d02:	4820      	ldr	r0, [pc, #128]	; (5d84 <update_sample_time.constprop.0+0x9c>)
    5d04:	b088      	sub	sp, #32
    5d06:	466a      	mov	r2, sp
    5d08:	e9c2 1305 	strd	r1, r3, [r2, #20]
    5d0c:	2303      	movs	r3, #3
    5d0e:	f842 3f10 	str.w	r3, [r2, #16]!
    5d12:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    5d16:	f004 ffa8 	bl	ac6a <z_log_msg2_static_create.constprop.0>
    5d1a:	46a5      	mov	sp, r4
		return -EINVAL;
    5d1c:	f06f 0415 	mvn.w	r4, #21
}
    5d20:	4620      	mov	r0, r4
    5d22:	3718      	adds	r7, #24
    5d24:	46bd      	mov	sp, r7
    5d26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_INF("Set sample time to %u ms", sample_time);
    5d2a:	4917      	ldr	r1, [pc, #92]	; (5d88 <update_sample_time.constprop.0+0xa0>)
    5d2c:	4815      	ldr	r0, [pc, #84]	; (5d84 <update_sample_time.constprop.0+0x9c>)
    5d2e:	46e8      	mov	r8, sp
    5d30:	b088      	sub	sp, #32
    5d32:	466a      	mov	r2, sp
    5d34:	e9c2 1305 	strd	r1, r3, [r2, #20]
    5d38:	2303      	movs	r3, #3
    5d3a:	f842 3f10 	str.w	r3, [r2, #16]!
    5d3e:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    5d42:	f004 ff92 	bl	ac6a <z_log_msg2_static_create.constprop.0>
	int err = reg_write(dev_data, reg_addr_lower, buf[0]);
    5d46:	4621      	mov	r1, r4
    5d48:	4810      	ldr	r0, [pc, #64]	; (5d8c <update_sample_time.constprop.0+0xa4>)
    5d4a:	46c5      	mov	sp, r8
    5d4c:	b2f2      	uxtb	r2, r6
    5d4e:	f004 ff8f 	bl	ac70 <reg_write>
	if (!err) {
    5d52:	4604      	mov	r4, r0
    5d54:	b938      	cbnz	r0, 5d66 <update_sample_time.constprop.0+0x7e>
		err = reg_write(dev_data, reg_addr_upper, buf[1]);
    5d56:	480d      	ldr	r0, [pc, #52]	; (5d8c <update_sample_time.constprop.0+0xa4>)
    5d58:	f3c6 2207 	ubfx	r2, r6, #8, #8
    5d5c:	4629      	mov	r1, r5
    5d5e:	f004 ff87 	bl	ac70 <reg_write>
    5d62:	4604      	mov	r4, r0
    5d64:	e7dc      	b.n	5d20 <update_sample_time.constprop.0+0x38>
		LOG_ERR("Failed to change sample time");
    5d66:	4b0a      	ldr	r3, [pc, #40]	; (5d90 <update_sample_time.constprop.0+0xa8>)
    5d68:	617b      	str	r3, [r7, #20]
    5d6a:	4806      	ldr	r0, [pc, #24]	; (5d84 <update_sample_time.constprop.0+0x9c>)
    5d6c:	2302      	movs	r3, #2
    5d6e:	f107 0210 	add.w	r2, r7, #16
    5d72:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5d76:	613b      	str	r3, [r7, #16]
    5d78:	f004 ff77 	bl	ac6a <z_log_msg2_static_create.constprop.0>
    5d7c:	e7d0      	b.n	5d20 <update_sample_time.constprop.0+0x38>
    5d7e:	bf00      	nop
    5d80:	0000ca0c 	.word	0x0000ca0c
    5d84:	0000b9bc 	.word	0x0000b9bc
    5d88:	0000ca28 	.word	0x0000ca28
    5d8c:	200007c0 	.word	0x200007c0
    5d90:	0000ca41 	.word	0x0000ca41

00005d94 <pmw3360_async_init_fw_load_continue>:
{
    5d94:	b5f0      	push	{r4, r5, r6, r7, lr}
    5d96:	b08f      	sub	sp, #60	; 0x3c
	LOG_INF("Uploading optical sensor firmware...");
    5d98:	4b35      	ldr	r3, [pc, #212]	; (5e70 <pmw3360_async_init_fw_load_continue+0xdc>)
    5d9a:	930d      	str	r3, [sp, #52]	; 0x34
{
    5d9c:	4605      	mov	r5, r0
	LOG_INF("Uploading optical sensor firmware...");
    5d9e:	aa0c      	add	r2, sp, #48	; 0x30
    5da0:	4834      	ldr	r0, [pc, #208]	; (5e74 <pmw3360_async_init_fw_load_continue+0xe0>)
    5da2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5da6:	2602      	movs	r6, #2
    5da8:	960c      	str	r6, [sp, #48]	; 0x30
    5daa:	f004 ff5e 	bl	ac6a <z_log_msg2_static_create.constprop.0>
	err = reg_write(dev_data, PMW3360_REG_SROM_ENABLE, 0x18);
    5dae:	2218      	movs	r2, #24
    5db0:	2113      	movs	r1, #19
    5db2:	4628      	mov	r0, r5
    5db4:	f004 ff5c 	bl	ac70 <reg_write>
	if (err) {
    5db8:	4604      	mov	r4, r0
    5dba:	b148      	cbz	r0, 5dd0 <pmw3360_async_init_fw_load_continue+0x3c>
		LOG_ERR("Cannot start SROM download");
    5dbc:	4b2e      	ldr	r3, [pc, #184]	; (5e78 <pmw3360_async_init_fw_load_continue+0xe4>)
    5dbe:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
		LOG_ERR("Cannot write firmware to sensor");
    5dc2:	482c      	ldr	r0, [pc, #176]	; (5e74 <pmw3360_async_init_fw_load_continue+0xe0>)
    5dc4:	aa0c      	add	r2, sp, #48	; 0x30
    5dc6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5dca:	f004 ff4e 	bl	ac6a <z_log_msg2_static_create.constprop.0>
    5dce:	e029      	b.n	5e24 <pmw3360_async_init_fw_load_continue+0x90>
	err = burst_write(dev_data, PMW3360_REG_SROM_LOAD_BURST,
    5dd0:	4b2a      	ldr	r3, [pc, #168]	; (5e7c <pmw3360_async_init_fw_load_continue+0xe8>)
	err = spi_cs_ctrl(dev_data, true);
    5dd2:	2101      	movs	r1, #1
	err = burst_write(dev_data, PMW3360_REG_SROM_LOAD_BURST,
    5dd4:	681b      	ldr	r3, [r3, #0]
    5dd6:	9301      	str	r3, [sp, #4]
	err = spi_cs_ctrl(dev_data, true);
    5dd8:	4628      	mov	r0, r5
    5dda:	f7ff fe3f 	bl	5a5c <spi_cs_ctrl>
	if (err) {
    5dde:	4604      	mov	r4, r0
    5de0:	bb60      	cbnz	r0, 5e3c <pmw3360_async_init_fw_load_continue+0xa8>
	uint8_t write_buf = reg | SPI_WRITE_BIT;
    5de2:	23e2      	movs	r3, #226	; 0xe2
    5de4:	f88d 300f 	strb.w	r3, [sp, #15]
	struct spi_buf tx_buf = {
    5de8:	f10d 030f 	add.w	r3, sp, #15
    5dec:	9304      	str	r3, [sp, #16]
	const struct spi_buf_set tx = {
    5dee:	aa04      	add	r2, sp, #16
	struct spi_buf tx_buf = {
    5df0:	2301      	movs	r3, #1
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    5df2:	68a8      	ldr	r0, [r5, #8]
	struct spi_buf tx_buf = {
    5df4:	9305      	str	r3, [sp, #20]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    5df6:	a906      	add	r1, sp, #24
	const struct spi_buf_set tx = {
    5df8:	e9cd 2306 	strd	r2, r3, [sp, #24]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    5dfc:	f7ff fe22 	bl	5a44 <spi_write.constprop.0>
	if (err) {
    5e00:	4604      	mov	r4, r0
    5e02:	b990      	cbnz	r0, 5e2a <pmw3360_async_init_fw_load_continue+0x96>
    5e04:	4f1e      	ldr	r7, [pc, #120]	; (5e80 <pmw3360_async_init_fw_load_continue+0xec>)
	for (size_t i = 0; i < size; i++) {
    5e06:	4606      	mov	r6, r0
    5e08:	9b01      	ldr	r3, [sp, #4]
    5e0a:	42b3      	cmp	r3, r6
    5e0c:	d11b      	bne.n	5e46 <pmw3360_async_init_fw_load_continue+0xb2>
	err = spi_cs_ctrl(dev_data, false);
    5e0e:	2100      	movs	r1, #0
    5e10:	4628      	mov	r0, r5
    5e12:	f7ff fe23 	bl	5a5c <spi_cs_ctrl>
	if (err) {
    5e16:	4604      	mov	r4, r0
    5e18:	b980      	cbnz	r0, 5e3c <pmw3360_async_init_fw_load_continue+0xa8>
	k_busy_wait(T_BEXIT);
    5e1a:	2001      	movs	r0, #1
    5e1c:	f004 ff23 	bl	ac66 <k_busy_wait>
	dev_data->last_read_burst = false;
    5e20:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69
}
    5e24:	4620      	mov	r0, r4
    5e26:	b00f      	add	sp, #60	; 0x3c
    5e28:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Burst write failed on SPI write");
    5e2a:	4b16      	ldr	r3, [pc, #88]	; (5e84 <pmw3360_async_init_fw_load_continue+0xf0>)
    5e2c:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
			LOG_ERR("Burst write failed on SPI write (data)");
    5e30:	4810      	ldr	r0, [pc, #64]	; (5e74 <pmw3360_async_init_fw_load_continue+0xe0>)
    5e32:	aa0c      	add	r2, sp, #48	; 0x30
    5e34:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5e38:	f004 ff17 	bl	ac6a <z_log_msg2_static_create.constprop.0>
		LOG_ERR("Cannot write firmware to sensor");
    5e3c:	4b12      	ldr	r3, [pc, #72]	; (5e88 <pmw3360_async_init_fw_load_continue+0xf4>)
    5e3e:	930d      	str	r3, [sp, #52]	; 0x34
    5e40:	2302      	movs	r3, #2
    5e42:	930c      	str	r3, [sp, #48]	; 0x30
    5e44:	e7bd      	b.n	5dc2 <pmw3360_async_init_fw_load_continue+0x2e>
		write_buf = buf[i];
    5e46:	f817 3b01 	ldrb.w	r3, [r7], #1
		err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    5e4a:	68a8      	ldr	r0, [r5, #8]
		write_buf = buf[i];
    5e4c:	f88d 300f 	strb.w	r3, [sp, #15]
		err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    5e50:	a906      	add	r1, sp, #24
    5e52:	f7ff fdf7 	bl	5a44 <spi_write.constprop.0>
		if (err) {
    5e56:	4604      	mov	r4, r0
    5e58:	b120      	cbz	r0, 5e64 <pmw3360_async_init_fw_load_continue+0xd0>
			LOG_ERR("Burst write failed on SPI write (data)");
    5e5a:	4b0c      	ldr	r3, [pc, #48]	; (5e8c <pmw3360_async_init_fw_load_continue+0xf8>)
    5e5c:	930d      	str	r3, [sp, #52]	; 0x34
    5e5e:	2302      	movs	r3, #2
    5e60:	930c      	str	r3, [sp, #48]	; 0x30
    5e62:	e7e5      	b.n	5e30 <pmw3360_async_init_fw_load_continue+0x9c>
		k_busy_wait(T_BRSEP);
    5e64:	200f      	movs	r0, #15
    5e66:	f004 fefe 	bl	ac66 <k_busy_wait>
	for (size_t i = 0; i < size; i++) {
    5e6a:	3601      	adds	r6, #1
    5e6c:	e7cc      	b.n	5e08 <pmw3360_async_init_fw_load_continue+0x74>
    5e6e:	bf00      	nop
    5e70:	0000ca5e 	.word	0x0000ca5e
    5e74:	0000b9bc 	.word	0x0000b9bc
    5e78:	0000ca83 	.word	0x0000ca83
    5e7c:	0000bc84 	.word	0x0000bc84
    5e80:	0000cd7b 	.word	0x0000cd7b
    5e84:	0000ca9e 	.word	0x0000ca9e
    5e88:	0000cae5 	.word	0x0000cae5
    5e8c:	0000cabe 	.word	0x0000cabe

00005e90 <irq_handler>:
{
    5e90:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	err = gpio_pin_interrupt_configure(pmw3360_data.irq_gpio_dev,
    5e92:	4b0e      	ldr	r3, [pc, #56]	; (5ecc <irq_handler+0x3c>)
    5e94:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    5e98:	6858      	ldr	r0, [r3, #4]
    5e9a:	f004 fefd 	bl	ac98 <gpio_pin_interrupt_configure.constprop.0>
	if (unlikely(err)) {
    5e9e:	b178      	cbz	r0, 5ec0 <irq_handler+0x30>
		LOG_ERR("Cannot disable IRQ");
    5ea0:	4b0b      	ldr	r3, [pc, #44]	; (5ed0 <irq_handler+0x40>)
    5ea2:	9305      	str	r3, [sp, #20]
    5ea4:	480b      	ldr	r0, [pc, #44]	; (5ed4 <irq_handler+0x44>)
    5ea6:	2302      	movs	r3, #2
    5ea8:	aa04      	add	r2, sp, #16
    5eaa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5eae:	9304      	str	r3, [sp, #16]
    5eb0:	f004 fedb 	bl	ac6a <z_log_msg2_static_create.constprop.0>
		k_panic();
    5eb4:	4040      	eors	r0, r0
    5eb6:	f380 8811 	msr	BASEPRI, r0
    5eba:	f04f 0004 	mov.w	r0, #4
    5ebe:	df02      	svc	2
	k_work_submit(&pmw3360_data.trigger_handler_work);
    5ec0:	4805      	ldr	r0, [pc, #20]	; (5ed8 <irq_handler+0x48>)
}
    5ec2:	b007      	add	sp, #28
    5ec4:	f85d eb04 	ldr.w	lr, [sp], #4
	k_work_submit(&pmw3360_data.trigger_handler_work);
    5ec8:	f002 bf88 	b.w	8ddc <k_work_submit>
    5ecc:	200007c0 	.word	0x200007c0
    5ed0:	0000cb05 	.word	0x0000cb05
    5ed4:	0000b9bc 	.word	0x0000b9bc
    5ed8:	200007e0 	.word	0x200007e0

00005edc <trigger_handler>:
{
    5edc:	b530      	push	{r4, r5, lr}
    5ede:	b089      	sub	sp, #36	; 0x24
	__asm__ volatile(
    5ee0:	f04f 0320 	mov.w	r3, #32
    5ee4:	f3ef 8211 	mrs	r2, BASEPRI
    5ee8:	f383 8812 	msr	BASEPRI_MAX, r3
    5eec:	f3bf 8f6f 	isb	sy
	handler = pmw3360_data.data_ready_handler;
    5ef0:	4c1a      	ldr	r4, [pc, #104]	; (5f5c <trigger_handler+0x80>)
    5ef2:	69e3      	ldr	r3, [r4, #28]
	__asm__ volatile(
    5ef4:	f382 8811 	msr	BASEPRI, r2
    5ef8:	f3bf 8f6f 	isb	sy
	if (!handler) {
    5efc:	b363      	cbz	r3, 5f58 <trigger_handler+0x7c>
	struct sensor_trigger trig = {
    5efe:	2201      	movs	r2, #1
    5f00:	f8ad 2004 	strh.w	r2, [sp, #4]
    5f04:	2239      	movs	r2, #57	; 0x39
	handler(DEVICE_DT_INST_GET(0), &trig);
    5f06:	4816      	ldr	r0, [pc, #88]	; (5f60 <trigger_handler+0x84>)
	struct sensor_trigger trig = {
    5f08:	f8ad 2006 	strh.w	r2, [sp, #6]
	handler(DEVICE_DT_INST_GET(0), &trig);
    5f0c:	a901      	add	r1, sp, #4
    5f0e:	4798      	blx	r3
	__asm__ volatile(
    5f10:	f04f 0320 	mov.w	r3, #32
    5f14:	f3ef 8511 	mrs	r5, BASEPRI
    5f18:	f383 8812 	msr	BASEPRI_MAX, r3
    5f1c:	f3bf 8f6f 	isb	sy
	if (pmw3360_data.data_ready_handler) {
    5f20:	69e0      	ldr	r0, [r4, #28]
    5f22:	b120      	cbz	r0, 5f2e <trigger_handler+0x52>
		err = gpio_pin_interrupt_configure(pmw3360_data.irq_gpio_dev,
    5f24:	6860      	ldr	r0, [r4, #4]
    5f26:	f04f 7110 	mov.w	r1, #37748736	; 0x2400000
    5f2a:	f004 feb5 	bl	ac98 <gpio_pin_interrupt_configure.constprop.0>
	__asm__ volatile(
    5f2e:	f385 8811 	msr	BASEPRI, r5
    5f32:	f3bf 8f6f 	isb	sy
	if (unlikely(err)) {
    5f36:	b178      	cbz	r0, 5f58 <trigger_handler+0x7c>
		LOG_ERR("Cannot re-enable IRQ");
    5f38:	4b0a      	ldr	r3, [pc, #40]	; (5f64 <trigger_handler+0x88>)
    5f3a:	9307      	str	r3, [sp, #28]
    5f3c:	480a      	ldr	r0, [pc, #40]	; (5f68 <trigger_handler+0x8c>)
    5f3e:	2302      	movs	r3, #2
    5f40:	aa06      	add	r2, sp, #24
    5f42:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5f46:	9306      	str	r3, [sp, #24]
    5f48:	f004 fe8f 	bl	ac6a <z_log_msg2_static_create.constprop.0>
		k_panic();
    5f4c:	4040      	eors	r0, r0
    5f4e:	f380 8811 	msr	BASEPRI, r0
    5f52:	f04f 0004 	mov.w	r0, #4
    5f56:	df02      	svc	2
}
    5f58:	b009      	add	sp, #36	; 0x24
    5f5a:	bd30      	pop	{r4, r5, pc}
    5f5c:	200007c0 	.word	0x200007c0
    5f60:	0000b834 	.word	0x0000b834
    5f64:	0000cb18 	.word	0x0000cb18
    5f68:	0000b9bc 	.word	0x0000b9bc

00005f6c <pmw3360_trigger_set>:
	struct pmw3360_data *dev_data = &pmw3360_data;
	int err;

	ARG_UNUSED(dev);

	if (unlikely(trig->type != SENSOR_TRIG_DATA_READY)) {
    5f6c:	880b      	ldrh	r3, [r1, #0]
    5f6e:	2b01      	cmp	r3, #1
{
    5f70:	b570      	push	{r4, r5, r6, lr}
    5f72:	4615      	mov	r5, r2
	if (unlikely(trig->type != SENSOR_TRIG_DATA_READY)) {
    5f74:	d11e      	bne.n	5fb4 <pmw3360_trigger_set+0x48>
		return -ENOTSUP;
	}

	if (unlikely(trig->chan != SENSOR_CHAN_ALL)) {
    5f76:	884b      	ldrh	r3, [r1, #2]
    5f78:	2b39      	cmp	r3, #57	; 0x39
    5f7a:	d11b      	bne.n	5fb4 <pmw3360_trigger_set+0x48>
		return -ENOTSUP;
	}

	if (unlikely(!dev_data->ready)) {
    5f7c:	4c10      	ldr	r4, [pc, #64]	; (5fc0 <pmw3360_trigger_set+0x54>)
    5f7e:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    5f82:	b1d3      	cbz	r3, 5fba <pmw3360_trigger_set+0x4e>
	__asm__ volatile(
    5f84:	f04f 0320 	mov.w	r3, #32
    5f88:	f3ef 8611 	mrs	r6, BASEPRI
    5f8c:	f383 8812 	msr	BASEPRI_MAX, r3
    5f90:	f3bf 8f6f 	isb	sy
		return -EBUSY;
	}

	k_spinlock_key_t key = k_spin_lock(&dev_data->lock);

	if (handler) {
    5f94:	b15a      	cbz	r2, 5fae <pmw3360_trigger_set+0x42>
		err = gpio_pin_interrupt_configure(dev_data->irq_gpio_dev,
    5f96:	f04f 7110 	mov.w	r1, #37748736	; 0x2400000
						   PMW3360_IRQ_GPIO_PIN,
						   GPIO_INT_LEVEL_LOW);
	} else {
		err = gpio_pin_interrupt_configure(dev_data->irq_gpio_dev,
    5f9a:	6860      	ldr	r0, [r4, #4]
    5f9c:	f004 fe7c 	bl	ac98 <gpio_pin_interrupt_configure.constprop.0>
						   PMW3360_IRQ_GPIO_PIN,
						   GPIO_INT_DISABLE);
	}

	if (!err) {
    5fa0:	b900      	cbnz	r0, 5fa4 <pmw3360_trigger_set+0x38>
		dev_data->data_ready_handler = handler;
    5fa2:	61e5      	str	r5, [r4, #28]
	__asm__ volatile(
    5fa4:	f386 8811 	msr	BASEPRI, r6
    5fa8:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&dev_data->lock, key);

	return err;
}
    5fac:	bd70      	pop	{r4, r5, r6, pc}
		err = gpio_pin_interrupt_configure(dev_data->irq_gpio_dev,
    5fae:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    5fb2:	e7f2      	b.n	5f9a <pmw3360_trigger_set+0x2e>
		return -ENOTSUP;
    5fb4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5fb8:	e7f8      	b.n	5fac <pmw3360_trigger_set+0x40>
		return -EBUSY;
    5fba:	f06f 000f 	mvn.w	r0, #15
    5fbe:	e7f5      	b.n	5fac <pmw3360_trigger_set+0x40>
    5fc0:	200007c0 	.word	0x200007c0

00005fc4 <reg_read>:
{
    5fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
    5fc6:	b091      	sub	sp, #68	; 0x44
    5fc8:	4607      	mov	r7, r0
    5fca:	f88d 1007 	strb.w	r1, [sp, #7]
	err = spi_cs_ctrl(dev_data, true);
    5fce:	2101      	movs	r1, #1
{
    5fd0:	4616      	mov	r6, r2
	err = spi_cs_ctrl(dev_data, true);
    5fd2:	f7ff fd43 	bl	5a5c <spi_cs_ctrl>
	if (err) {
    5fd6:	4604      	mov	r4, r0
    5fd8:	b9b8      	cbnz	r0, 600a <reg_read+0x46>
	const struct spi_buf tx_buf = {
    5fda:	f10d 0307 	add.w	r3, sp, #7
    5fde:	9302      	str	r3, [sp, #8]
    5fe0:	2501      	movs	r5, #1
	const struct spi_buf_set tx = {
    5fe2:	ab02      	add	r3, sp, #8
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    5fe4:	68b8      	ldr	r0, [r7, #8]
	const struct spi_buf tx_buf = {
    5fe6:	9503      	str	r5, [sp, #12]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    5fe8:	a904      	add	r1, sp, #16
	const struct spi_buf_set tx = {
    5fea:	e9cd 3504 	strd	r3, r5, [sp, #16]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    5fee:	f7ff fd29 	bl	5a44 <spi_write.constprop.0>
	if (err) {
    5ff2:	4604      	mov	r4, r0
    5ff4:	b160      	cbz	r0, 6010 <reg_read+0x4c>
		LOG_ERR("Reg read failed on SPI write");
    5ff6:	4b16      	ldr	r3, [pc, #88]	; (6050 <reg_read+0x8c>)
		LOG_ERR("Reg read failed on SPI read");
    5ff8:	930f      	str	r3, [sp, #60]	; 0x3c
    5ffa:	4816      	ldr	r0, [pc, #88]	; (6054 <reg_read+0x90>)
    5ffc:	2302      	movs	r3, #2
    5ffe:	aa0e      	add	r2, sp, #56	; 0x38
    6000:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6004:	930e      	str	r3, [sp, #56]	; 0x38
    6006:	f004 fe30 	bl	ac6a <z_log_msg2_static_create.constprop.0>
}
    600a:	4620      	mov	r0, r4
    600c:	b011      	add	sp, #68	; 0x44
    600e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	k_busy_wait(T_SRAD);
    6010:	20a0      	movs	r0, #160	; 0xa0
    6012:	f004 fe28 	bl	ac66 <k_busy_wait>
	const struct spi_buf_set rx = {
    6016:	ab06      	add	r3, sp, #24
	struct spi_buf rx_buf = {
    6018:	e9cd 6506 	strd	r6, r5, [sp, #24]
	const struct spi_buf_set rx = {
    601c:	e9cd 3508 	strd	r3, r5, [sp, #32]
	err = spi_read(dev_data->spi_dev, &spi_cfg, &rx);
    6020:	68b8      	ldr	r0, [r7, #8]
    6022:	6883      	ldr	r3, [r0, #8]
    6024:	490c      	ldr	r1, [pc, #48]	; (6058 <reg_read+0x94>)
    6026:	681d      	ldr	r5, [r3, #0]
    6028:	4622      	mov	r2, r4
    602a:	ab08      	add	r3, sp, #32
    602c:	47a8      	blx	r5
	if (err) {
    602e:	4604      	mov	r4, r0
    6030:	b108      	cbz	r0, 6036 <reg_read+0x72>
		LOG_ERR("Reg read failed on SPI read");
    6032:	4b0a      	ldr	r3, [pc, #40]	; (605c <reg_read+0x98>)
    6034:	e7e0      	b.n	5ff8 <reg_read+0x34>
	err = spi_cs_ctrl(dev_data, false);
    6036:	4601      	mov	r1, r0
    6038:	4638      	mov	r0, r7
    603a:	f7ff fd0f 	bl	5a5c <spi_cs_ctrl>
	if (err) {
    603e:	4604      	mov	r4, r0
    6040:	2800      	cmp	r0, #0
    6042:	d1e2      	bne.n	600a <reg_read+0x46>
	k_busy_wait(T_SRX);
    6044:	2013      	movs	r0, #19
    6046:	f004 fe0e 	bl	ac66 <k_busy_wait>
	dev_data->last_read_burst = false;
    604a:	f887 4069 	strb.w	r4, [r7, #105]	; 0x69
	return 0;
    604e:	e7dc      	b.n	600a <reg_read+0x46>
    6050:	0000cb2d 	.word	0x0000cb2d
    6054:	0000b9bc 	.word	0x0000b9bc
    6058:	0000bc78 	.word	0x0000bc78
    605c:	0000cb4a 	.word	0x0000cb4a

00006060 <pmw3360_async_init_fw_load_verify>:
{
    6060:	b530      	push	{r4, r5, lr}
    6062:	b089      	sub	sp, #36	; 0x24
	err = reg_read(dev_data, PMW3360_REG_SROM_ID, &fw_id);
    6064:	f10d 0206 	add.w	r2, sp, #6
    6068:	212a      	movs	r1, #42	; 0x2a
{
    606a:	4605      	mov	r5, r0
	err = reg_read(dev_data, PMW3360_REG_SROM_ID, &fw_id);
    606c:	f7ff ffaa 	bl	5fc4 <reg_read>
	if (err) {
    6070:	4604      	mov	r4, r0
    6072:	b150      	cbz	r0, 608a <pmw3360_async_init_fw_load_verify+0x2a>
		LOG_ERR("Cannot obtain firmware id");
    6074:	4b1b      	ldr	r3, [pc, #108]	; (60e4 <pmw3360_async_init_fw_load_verify+0x84>)
		LOG_ERR("Cannot enable REST modes");
    6076:	9307      	str	r3, [sp, #28]
    6078:	481b      	ldr	r0, [pc, #108]	; (60e8 <pmw3360_async_init_fw_load_verify+0x88>)
    607a:	2302      	movs	r3, #2
    607c:	aa06      	add	r2, sp, #24
    607e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6082:	9306      	str	r3, [sp, #24]
    6084:	f004 fdf1 	bl	ac6a <z_log_msg2_static_create.constprop.0>
    6088:	e00f      	b.n	60aa <pmw3360_async_init_fw_load_verify+0x4a>
	if (fw_id != PMW3360_FIRMWARE_ID) {
    608a:	f89d 3006 	ldrb.w	r3, [sp, #6]
    608e:	2b04      	cmp	r3, #4
    6090:	d00e      	beq.n	60b0 <pmw3360_async_init_fw_load_verify+0x50>
		LOG_ERR("Chip is not running from SROM!");
    6092:	4b16      	ldr	r3, [pc, #88]	; (60ec <pmw3360_async_init_fw_load_verify+0x8c>)
		LOG_ERR("Invalid product id!");
    6094:	9307      	str	r3, [sp, #28]
    6096:	4814      	ldr	r0, [pc, #80]	; (60e8 <pmw3360_async_init_fw_load_verify+0x88>)
    6098:	2302      	movs	r3, #2
    609a:	aa06      	add	r2, sp, #24
    609c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
    60a0:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("Invalid product id!");
    60a4:	9306      	str	r3, [sp, #24]
    60a6:	f004 fde0 	bl	ac6a <z_log_msg2_static_create.constprop.0>
}
    60aa:	4620      	mov	r0, r4
    60ac:	b009      	add	sp, #36	; 0x24
    60ae:	bd30      	pop	{r4, r5, pc}
	err = reg_read(dev_data, PMW3360_REG_PRODUCT_ID, &product_id);
    60b0:	4601      	mov	r1, r0
    60b2:	f10d 0207 	add.w	r2, sp, #7
    60b6:	4628      	mov	r0, r5
    60b8:	f7ff ff84 	bl	5fc4 <reg_read>
	if (err) {
    60bc:	4604      	mov	r4, r0
    60be:	b108      	cbz	r0, 60c4 <pmw3360_async_init_fw_load_verify+0x64>
		LOG_ERR("Cannot obtain product id");
    60c0:	4b0b      	ldr	r3, [pc, #44]	; (60f0 <pmw3360_async_init_fw_load_verify+0x90>)
    60c2:	e7d8      	b.n	6076 <pmw3360_async_init_fw_load_verify+0x16>
	if (product_id != PMW3360_PRODUCT_ID) {
    60c4:	f89d 3007 	ldrb.w	r3, [sp, #7]
    60c8:	2b42      	cmp	r3, #66	; 0x42
    60ca:	d001      	beq.n	60d0 <pmw3360_async_init_fw_load_verify+0x70>
		LOG_ERR("Invalid product id!");
    60cc:	4b09      	ldr	r3, [pc, #36]	; (60f4 <pmw3360_async_init_fw_load_verify+0x94>)
    60ce:	e7e1      	b.n	6094 <pmw3360_async_init_fw_load_verify+0x34>
	err = reg_write(dev_data, PMW3360_REG_CONFIG2, 0x20);
    60d0:	2220      	movs	r2, #32
    60d2:	2110      	movs	r1, #16
    60d4:	4628      	mov	r0, r5
    60d6:	f004 fdcb 	bl	ac70 <reg_write>
	if (err) {
    60da:	4604      	mov	r4, r0
    60dc:	2800      	cmp	r0, #0
    60de:	d0e4      	beq.n	60aa <pmw3360_async_init_fw_load_verify+0x4a>
		LOG_ERR("Cannot enable REST modes");
    60e0:	4b05      	ldr	r3, [pc, #20]	; (60f8 <pmw3360_async_init_fw_load_verify+0x98>)
    60e2:	e7c8      	b.n	6076 <pmw3360_async_init_fw_load_verify+0x16>
    60e4:	0000cb66 	.word	0x0000cb66
    60e8:	0000b9bc 	.word	0x0000b9bc
    60ec:	0000cb80 	.word	0x0000cb80
    60f0:	0000cb9f 	.word	0x0000cb9f
    60f4:	0000cbb8 	.word	0x0000cbb8
    60f8:	0000cbcc 	.word	0x0000cbcc

000060fc <pmw3360_async_init_fw_load_start>:
{
    60fc:	b570      	push	{r4, r5, r6, lr}
    60fe:	4606      	mov	r6, r0
    6100:	b086      	sub	sp, #24
	for (uint8_t reg = 0x02; (reg <= 0x06) && !err; reg++) {
    6102:	2502      	movs	r5, #2
		err = reg_read(dev_data, reg, buf);
    6104:	4629      	mov	r1, r5
    6106:	466a      	mov	r2, sp
    6108:	4630      	mov	r0, r6
    610a:	f7ff ff5b 	bl	5fc4 <reg_read>
	for (uint8_t reg = 0x02; (reg <= 0x06) && !err; reg++) {
    610e:	3501      	adds	r5, #1
    6110:	b2ed      	uxtb	r5, r5
    6112:	2d07      	cmp	r5, #7
		err = reg_read(dev_data, reg, buf);
    6114:	4604      	mov	r4, r0
	for (uint8_t reg = 0x02; (reg <= 0x06) && !err; reg++) {
    6116:	d00e      	beq.n	6136 <pmw3360_async_init_fw_load_start+0x3a>
    6118:	2800      	cmp	r0, #0
    611a:	d0f3      	beq.n	6104 <pmw3360_async_init_fw_load_start+0x8>
		LOG_ERR("Cannot read from data registers");
    611c:	4b10      	ldr	r3, [pc, #64]	; (6160 <pmw3360_async_init_fw_load_start+0x64>)
		LOG_ERR("Cannot initialize SROM");
    611e:	9305      	str	r3, [sp, #20]
    6120:	4810      	ldr	r0, [pc, #64]	; (6164 <pmw3360_async_init_fw_load_start+0x68>)
    6122:	2302      	movs	r3, #2
    6124:	aa04      	add	r2, sp, #16
    6126:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    612a:	9304      	str	r3, [sp, #16]
    612c:	f004 fd9d 	bl	ac6a <z_log_msg2_static_create.constprop.0>
}
    6130:	4620      	mov	r0, r4
    6132:	b006      	add	sp, #24
    6134:	bd70      	pop	{r4, r5, r6, pc}
	if (err) {
    6136:	2800      	cmp	r0, #0
    6138:	d1f0      	bne.n	611c <pmw3360_async_init_fw_load_start+0x20>
	err = reg_write(dev_data, PMW3360_REG_CONFIG2, 0x00);
    613a:	4602      	mov	r2, r0
    613c:	2110      	movs	r1, #16
    613e:	4630      	mov	r0, r6
    6140:	f004 fd96 	bl	ac70 <reg_write>
	if (err) {
    6144:	4604      	mov	r4, r0
    6146:	b108      	cbz	r0, 614c <pmw3360_async_init_fw_load_start+0x50>
		LOG_ERR("Cannot disable REST mode");
    6148:	4b07      	ldr	r3, [pc, #28]	; (6168 <pmw3360_async_init_fw_load_start+0x6c>)
    614a:	e7e8      	b.n	611e <pmw3360_async_init_fw_load_start+0x22>
	err = reg_write(dev_data, PMW3360_REG_SROM_ENABLE, 0x1D);
    614c:	221d      	movs	r2, #29
    614e:	2113      	movs	r1, #19
    6150:	4630      	mov	r0, r6
    6152:	f004 fd8d 	bl	ac70 <reg_write>
	if (err) {
    6156:	4604      	mov	r4, r0
    6158:	2800      	cmp	r0, #0
    615a:	d0e9      	beq.n	6130 <pmw3360_async_init_fw_load_start+0x34>
		LOG_ERR("Cannot initialize SROM");
    615c:	4b03      	ldr	r3, [pc, #12]	; (616c <pmw3360_async_init_fw_load_start+0x70>)
    615e:	e7de      	b.n	611e <pmw3360_async_init_fw_load_start+0x22>
    6160:	0000cbe5 	.word	0x0000cbe5
    6164:	0000b9bc 	.word	0x0000b9bc
    6168:	0000cc05 	.word	0x0000cc05
    616c:	0000cc1e 	.word	0x0000cc1e

00006170 <pmw3360_attr_set>:

static int pmw3360_attr_set(const struct device *dev, enum sensor_channel chan,
			    enum sensor_attribute attr,
			    const struct sensor_value *val)
{
    6170:	b5b0      	push	{r4, r5, r7, lr}
	struct pmw3360_data *dev_data = &pmw3360_data;
	int err;

	ARG_UNUSED(dev);

	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    6172:	2939      	cmp	r1, #57	; 0x39
{
    6174:	b088      	sub	sp, #32
    6176:	af00      	add	r7, sp, #0
	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    6178:	d179      	bne.n	626e <pmw3360_attr_set+0xfe>
		return -ENOTSUP;
	}

	if (unlikely(!dev_data->ready)) {
    617a:	4940      	ldr	r1, [pc, #256]	; (627c <pmw3360_attr_set+0x10c>)
    617c:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
    6180:	2900      	cmp	r1, #0
    6182:	d077      	beq.n	6274 <pmw3360_attr_set+0x104>
		LOG_DBG("Device is not initialized yet");
		return -EBUSY;
	}

	switch ((uint32_t)attr) {
    6184:	3a0e      	subs	r2, #14
    6186:	2a07      	cmp	r2, #7
    6188:	d866      	bhi.n	6258 <pmw3360_attr_set+0xe8>
    618a:	e8df f002 	tbb	[pc, r2]
    618e:	0a04      	.short	0x0a04
    6190:	5754514b 	.word	0x5754514b
    6194:	615d      	.short	0x615d
	case PMW3360_ATTR_CPI:
		err = update_cpi(dev_data, PMW3360_SVALUE_TO_CPI(*val));
    6196:	6819      	ldr	r1, [r3, #0]
    6198:	4838      	ldr	r0, [pc, #224]	; (627c <pmw3360_attr_set+0x10c>)
    619a:	f7ff fcbf 	bl	5b1c <update_cpi>
					PMW3360_REG_CONFIG2,
					PMW3360_SVALUE_TO_BOOL(*val));
		break;

	case PMW3360_ATTR_RUN_DOWNSHIFT_TIME:
		err = update_downshift_time(dev_data,
    619e:	4604      	mov	r4, r0
					    PMW3360_REG_RUN_DOWNSHIFT,
					    PMW3360_SVALUE_TO_TIME(*val));
		break;
    61a0:	e012      	b.n	61c8 <pmw3360_attr_set+0x58>
	int err = reg_read(dev_data, reg_addr, &value);
    61a2:	4836      	ldr	r0, [pc, #216]	; (627c <pmw3360_attr_set+0x10c>)
					PMW3360_SVALUE_TO_BOOL(*val));
    61a4:	681d      	ldr	r5, [r3, #0]
	int err = reg_read(dev_data, reg_addr, &value);
    61a6:	1dfa      	adds	r2, r7, #7
    61a8:	2110      	movs	r1, #16
    61aa:	f7ff ff0b 	bl	5fc4 <reg_read>
	if (err) {
    61ae:	4604      	mov	r4, r0
    61b0:	b170      	cbz	r0, 61d0 <pmw3360_attr_set+0x60>
		LOG_ERR("Failed to read Config2 register");
    61b2:	4b33      	ldr	r3, [pc, #204]	; (6280 <pmw3360_attr_set+0x110>)
    61b4:	61fb      	str	r3, [r7, #28]
    61b6:	2302      	movs	r3, #2
    61b8:	61bb      	str	r3, [r7, #24]
		LOG_ERR("Failed to set rest mode");
    61ba:	4832      	ldr	r0, [pc, #200]	; (6284 <pmw3360_attr_set+0x114>)
    61bc:	f107 0218 	add.w	r2, r7, #24
    61c0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    61c4:	f004 fd51 	bl	ac6a <z_log_msg2_static_create.constprop.0>
		LOG_ERR("Unknown attribute");
		return -ENOTSUP;
	}

	return err;
}
    61c8:	4620      	mov	r0, r4
    61ca:	3720      	adds	r7, #32
    61cc:	46bd      	mov	sp, r7
    61ce:	bdb0      	pop	{r4, r5, r7, pc}
	WRITE_BIT(value, PMW3360_REST_EN_POS, enable);
    61d0:	79fb      	ldrb	r3, [r7, #7]
    61d2:	b325      	cbz	r5, 621e <pmw3360_attr_set+0xae>
    61d4:	f043 0320 	orr.w	r3, r3, #32
	LOG_INF("%sable rest modes", (enable) ? ("En") : ("Dis"));
    61d8:	4a2b      	ldr	r2, [pc, #172]	; (6288 <pmw3360_attr_set+0x118>)
	WRITE_BIT(value, PMW3360_REST_EN_POS, enable);
    61da:	71fb      	strb	r3, [r7, #7]
	LOG_INF("%sable rest modes", (enable) ? ("En") : ("Dis"));
    61dc:	4b2b      	ldr	r3, [pc, #172]	; (628c <pmw3360_attr_set+0x11c>)
    61de:	492c      	ldr	r1, [pc, #176]	; (6290 <pmw3360_attr_set+0x120>)
    61e0:	4828      	ldr	r0, [pc, #160]	; (6284 <pmw3360_attr_set+0x114>)
    61e2:	466c      	mov	r4, sp
    61e4:	b088      	sub	sp, #32
    61e6:	2d00      	cmp	r5, #0
    61e8:	bf08      	it	eq
    61ea:	4613      	moveq	r3, r2
    61ec:	466a      	mov	r2, sp
    61ee:	e9c2 1305 	strd	r1, r3, [r2, #20]
    61f2:	2502      	movs	r5, #2
    61f4:	4b27      	ldr	r3, [pc, #156]	; (6294 <pmw3360_attr_set+0x124>)
    61f6:	7715      	strb	r5, [r2, #28]
    61f8:	f44f 51d6 	mov.w	r1, #6848	; 0x1ac0
    61fc:	f842 3f10 	str.w	r3, [r2, #16]!
    6200:	f004 fd33 	bl	ac6a <z_log_msg2_static_create.constprop.0>
	err = reg_write(dev_data, reg_addr, value);
    6204:	481d      	ldr	r0, [pc, #116]	; (627c <pmw3360_attr_set+0x10c>)
    6206:	79fa      	ldrb	r2, [r7, #7]
    6208:	46a5      	mov	sp, r4
    620a:	2110      	movs	r1, #16
    620c:	f004 fd30 	bl	ac70 <reg_write>
	if (err) {
    6210:	4604      	mov	r4, r0
    6212:	2800      	cmp	r0, #0
    6214:	d0d8      	beq.n	61c8 <pmw3360_attr_set+0x58>
		LOG_ERR("Failed to set rest mode");
    6216:	4b20      	ldr	r3, [pc, #128]	; (6298 <pmw3360_attr_set+0x128>)
    6218:	e9c7 5306 	strd	r5, r3, [r7, #24]
    621c:	e7cd      	b.n	61ba <pmw3360_attr_set+0x4a>
	WRITE_BIT(value, PMW3360_REST_EN_POS, enable);
    621e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    6222:	e7d9      	b.n	61d8 <pmw3360_attr_set+0x68>
		err = update_downshift_time(dev_data,
    6224:	681a      	ldr	r2, [r3, #0]
    6226:	2114      	movs	r1, #20
    6228:	4814      	ldr	r0, [pc, #80]	; (627c <pmw3360_attr_set+0x10c>)
    622a:	f7ff fcc7 	bl	5bbc <update_downshift_time>
    622e:	e7b6      	b.n	619e <pmw3360_attr_set+0x2e>
		err = update_downshift_time(dev_data,
    6230:	681a      	ldr	r2, [r3, #0]
    6232:	2117      	movs	r1, #23
    6234:	e7f8      	b.n	6228 <pmw3360_attr_set+0xb8>
		err = update_downshift_time(dev_data,
    6236:	681a      	ldr	r2, [r3, #0]
    6238:	211a      	movs	r1, #26
    623a:	e7f5      	b.n	6228 <pmw3360_attr_set+0xb8>
		err = update_sample_time(dev_data,
    623c:	681a      	ldr	r2, [r3, #0]
    623e:	2116      	movs	r1, #22
    6240:	2015      	movs	r0, #21
		err = update_sample_time(dev_data,
    6242:	f7ff fd51 	bl	5ce8 <update_sample_time.constprop.0>
    6246:	e7aa      	b.n	619e <pmw3360_attr_set+0x2e>
		err = update_sample_time(dev_data,
    6248:	681a      	ldr	r2, [r3, #0]
    624a:	2119      	movs	r1, #25
    624c:	2018      	movs	r0, #24
    624e:	e7f8      	b.n	6242 <pmw3360_attr_set+0xd2>
		err = update_sample_time(dev_data,
    6250:	681a      	ldr	r2, [r3, #0]
    6252:	211c      	movs	r1, #28
    6254:	201b      	movs	r0, #27
    6256:	e7f4      	b.n	6242 <pmw3360_attr_set+0xd2>
		LOG_ERR("Unknown attribute");
    6258:	4b10      	ldr	r3, [pc, #64]	; (629c <pmw3360_attr_set+0x12c>)
    625a:	61fb      	str	r3, [r7, #28]
    625c:	4809      	ldr	r0, [pc, #36]	; (6284 <pmw3360_attr_set+0x114>)
    625e:	2302      	movs	r3, #2
    6260:	f107 0218 	add.w	r2, r7, #24
    6264:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6268:	61bb      	str	r3, [r7, #24]
    626a:	f004 fcfe 	bl	ac6a <z_log_msg2_static_create.constprop.0>
		return -ENOTSUP;
    626e:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6272:	e7a9      	b.n	61c8 <pmw3360_attr_set+0x58>
		return -EBUSY;
    6274:	f06f 040f 	mvn.w	r4, #15
    6278:	e7a6      	b.n	61c8 <pmw3360_attr_set+0x58>
    627a:	bf00      	nop
    627c:	200007c0 	.word	0x200007c0
    6280:	0000cc3c 	.word	0x0000cc3c
    6284:	0000b9bc 	.word	0x0000b9bc
    6288:	0000cc38 	.word	0x0000cc38
    628c:	0000cc35 	.word	0x0000cc35
    6290:	0000cc5c 	.word	0x0000cc5c
    6294:	01000003 	.word	0x01000003
    6298:	0000cc6e 	.word	0x0000cc6e
    629c:	0000cc86 	.word	0x0000cc86

000062a0 <pmw3360_sample_fetch>:
{
    62a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    62a2:	2939      	cmp	r1, #57	; 0x39
{
    62a4:	b093      	sub	sp, #76	; 0x4c
	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    62a6:	d15b      	bne.n	6360 <pmw3360_sample_fetch+0xc0>
	if (unlikely(!dev_data->ready)) {
    62a8:	4d30      	ldr	r5, [pc, #192]	; (636c <pmw3360_sample_fetch+0xcc>)
    62aa:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    62ae:	2b00      	cmp	r3, #0
    62b0:	d059      	beq.n	6366 <pmw3360_sample_fetch+0xc6>
	if (!dev_data->last_read_burst) {
    62b2:	f895 2069 	ldrb.w	r2, [r5, #105]	; 0x69
    62b6:	b302      	cbz	r2, 62fa <pmw3360_sample_fetch+0x5a>
	err = spi_cs_ctrl(dev_data, true);
    62b8:	482c      	ldr	r0, [pc, #176]	; (636c <pmw3360_sample_fetch+0xcc>)
    62ba:	2101      	movs	r1, #1
    62bc:	f7ff fbce 	bl	5a5c <spi_cs_ctrl>
	if (err) {
    62c0:	4604      	mov	r4, r0
    62c2:	bb08      	cbnz	r0, 6308 <pmw3360_sample_fetch+0x68>
	uint8_t reg_buf[] = {
    62c4:	2350      	movs	r3, #80	; 0x50
    62c6:	f88d 3004 	strb.w	r3, [sp, #4]
	const struct spi_buf tx_buf = {
    62ca:	ab01      	add	r3, sp, #4
    62cc:	9304      	str	r3, [sp, #16]
    62ce:	2601      	movs	r6, #1
	const struct spi_buf_set tx = {
    62d0:	ab04      	add	r3, sp, #16
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    62d2:	68a8      	ldr	r0, [r5, #8]
	const struct spi_buf tx_buf = {
    62d4:	9605      	str	r6, [sp, #20]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    62d6:	a906      	add	r1, sp, #24
	const struct spi_buf_set tx = {
    62d8:	e9cd 3606 	strd	r3, r6, [sp, #24]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    62dc:	f7ff fbb2 	bl	5a44 <spi_write.constprop.0>
	if (err) {
    62e0:	4604      	mov	r4, r0
    62e2:	b1a0      	cbz	r0, 630e <pmw3360_sample_fetch+0x6e>
		LOG_ERR("Motion burst failed on SPI write");
    62e4:	4b22      	ldr	r3, [pc, #136]	; (6370 <pmw3360_sample_fetch+0xd0>)
		LOG_ERR("Motion burst failed on SPI read");
    62e6:	9311      	str	r3, [sp, #68]	; 0x44
    62e8:	4822      	ldr	r0, [pc, #136]	; (6374 <pmw3360_sample_fetch+0xd4>)
    62ea:	2302      	movs	r3, #2
    62ec:	aa10      	add	r2, sp, #64	; 0x40
    62ee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    62f2:	9310      	str	r3, [sp, #64]	; 0x40
    62f4:	f004 fcb9 	bl	ac6a <z_log_msg2_static_create.constprop.0>
		return err;
    62f8:	e006      	b.n	6308 <pmw3360_sample_fetch+0x68>
		err = reg_write(dev_data, PMW3360_REG_MOTION_BURST, 0x00);
    62fa:	2150      	movs	r1, #80	; 0x50
    62fc:	4628      	mov	r0, r5
    62fe:	f004 fcb7 	bl	ac70 <reg_write>
		if (err) {
    6302:	4604      	mov	r4, r0
    6304:	2800      	cmp	r0, #0
    6306:	d0d7      	beq.n	62b8 <pmw3360_sample_fetch+0x18>
}
    6308:	4620      	mov	r0, r4
    630a:	b013      	add	sp, #76	; 0x4c
    630c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	k_busy_wait(T_SRAD_MOTBR);
    630e:	2023      	movs	r0, #35	; 0x23
    6310:	f004 fca9 	bl	ac66 <k_busy_wait>
	const struct spi_buf rx_buf = {
    6314:	ab02      	add	r3, sp, #8
    6316:	9308      	str	r3, [sp, #32]
    6318:	2306      	movs	r3, #6
    631a:	9309      	str	r3, [sp, #36]	; 0x24
	const struct spi_buf_set rx = {
    631c:	ab08      	add	r3, sp, #32
    631e:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28
	err = spi_read(dev_data->spi_dev, &spi_cfg, &rx);
    6322:	68a8      	ldr	r0, [r5, #8]
    6324:	6883      	ldr	r3, [r0, #8]
    6326:	4914      	ldr	r1, [pc, #80]	; (6378 <pmw3360_sample_fetch+0xd8>)
    6328:	681f      	ldr	r7, [r3, #0]
    632a:	4622      	mov	r2, r4
    632c:	ab0a      	add	r3, sp, #40	; 0x28
    632e:	47b8      	blx	r7
	if (err) {
    6330:	4604      	mov	r4, r0
    6332:	b108      	cbz	r0, 6338 <pmw3360_sample_fetch+0x98>
		LOG_ERR("Motion burst failed on SPI read");
    6334:	4b11      	ldr	r3, [pc, #68]	; (637c <pmw3360_sample_fetch+0xdc>)
    6336:	e7d6      	b.n	62e6 <pmw3360_sample_fetch+0x46>
	err = spi_cs_ctrl(dev_data, false);
    6338:	4601      	mov	r1, r0
    633a:	480c      	ldr	r0, [pc, #48]	; (636c <pmw3360_sample_fetch+0xcc>)
    633c:	f7ff fb8e 	bl	5a5c <spi_cs_ctrl>
	if (err) {
    6340:	4604      	mov	r4, r0
    6342:	2800      	cmp	r0, #0
    6344:	d1e0      	bne.n	6308 <pmw3360_sample_fetch+0x68>
	k_busy_wait(T_BEXIT);
    6346:	4630      	mov	r0, r6
    6348:	f004 fc8d 	bl	ac66 <k_busy_wait>
			dev_data->x = -x;
    634c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    6350:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
	dev_data->last_read_burst = true;
    6354:	f885 6069 	strb.w	r6, [r5, #105]	; 0x69
			dev_data->x = -x;
    6358:	425b      	negs	r3, r3
    635a:	832b      	strh	r3, [r5, #24]
			dev_data->y = y;
    635c:	836a      	strh	r2, [r5, #26]
    635e:	e7d3      	b.n	6308 <pmw3360_sample_fetch+0x68>
		return -ENOTSUP;
    6360:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6364:	e7d0      	b.n	6308 <pmw3360_sample_fetch+0x68>
		return -EBUSY;
    6366:	f06f 040f 	mvn.w	r4, #15
    636a:	e7cd      	b.n	6308 <pmw3360_sample_fetch+0x68>
    636c:	200007c0 	.word	0x200007c0
    6370:	0000cc98 	.word	0x0000cc98
    6374:	0000b9bc 	.word	0x0000b9bc
    6378:	0000bc78 	.word	0x0000bc78
    637c:	0000ccb9 	.word	0x0000ccb9

00006380 <pmw3360_init>:
{
    6380:	b5f0      	push	{r4, r5, r6, r7, lr}
	k_work_init(&dev_data->trigger_handler_work, trigger_handler);
    6382:	4d45      	ldr	r5, [pc, #276]	; (6498 <pmw3360_init+0x118>)
    6384:	4945      	ldr	r1, [pc, #276]	; (649c <pmw3360_init+0x11c>)
{
    6386:	b087      	sub	sp, #28
	k_work_init(&dev_data->trigger_handler_work, trigger_handler);
    6388:	f105 0020 	add.w	r0, r5, #32
    638c:	f004 ff72 	bl	b274 <k_work_init>
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    6390:	4843      	ldr	r0, [pc, #268]	; (64a0 <pmw3360_init+0x120>)
    6392:	f002 f857 	bl	8444 <z_impl_device_get_binding>
	dev_data->cs_gpio_dev =
    6396:	6028      	str	r0, [r5, #0]
	if (!dev_data->cs_gpio_dev) {
    6398:	b960      	cbnz	r0, 63b4 <pmw3360_init+0x34>
		LOG_ERR("Cannot get CS GPIO device");
    639a:	4b42      	ldr	r3, [pc, #264]	; (64a4 <pmw3360_init+0x124>)
		LOG_ERR("Cannot get SPI device");
    639c:	9305      	str	r3, [sp, #20]
    639e:	4842      	ldr	r0, [pc, #264]	; (64a8 <pmw3360_init+0x128>)
    63a0:	2302      	movs	r3, #2
    63a2:	aa04      	add	r2, sp, #16
    63a4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    63a8:	9304      	str	r3, [sp, #16]
		return -ENXIO;
    63aa:	f06f 0405 	mvn.w	r4, #5
		LOG_ERR("Cannot get SPI device");
    63ae:	f004 fc5c 	bl	ac6a <z_log_msg2_static_create.constprop.0>
	if (err) {
    63b2:	e012      	b.n	63da <pmw3360_init+0x5a>
	struct gpio_driver_data *data =
    63b4:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
    63b6:	6881      	ldr	r1, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    63b8:	6813      	ldr	r3, [r2, #0]
    63ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    63be:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    63c0:	680b      	ldr	r3, [r1, #0]
    63c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    63c6:	2106      	movs	r1, #6
    63c8:	4798      	blx	r3
	if (!err) {
    63ca:	4604      	mov	r4, r0
    63cc:	b940      	cbnz	r0, 63e0 <pmw3360_init+0x60>
		err = spi_cs_ctrl(dev_data, false);
    63ce:	4601      	mov	r1, r0
    63d0:	4628      	mov	r0, r5
    63d2:	f7ff fb43 	bl	5a5c <spi_cs_ctrl>
	if (err) {
    63d6:	4604      	mov	r4, r0
    63d8:	b168      	cbz	r0, 63f6 <pmw3360_init+0x76>
}
    63da:	4620      	mov	r0, r4
    63dc:	b007      	add	sp, #28
    63de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Cannot configure CS PIN");
    63e0:	4b32      	ldr	r3, [pc, #200]	; (64ac <pmw3360_init+0x12c>)
		LOG_ERR("Cannot add IRQ GPIO callback");
    63e2:	9305      	str	r3, [sp, #20]
    63e4:	4830      	ldr	r0, [pc, #192]	; (64a8 <pmw3360_init+0x128>)
    63e6:	2302      	movs	r3, #2
    63e8:	aa04      	add	r2, sp, #16
    63ea:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    63ee:	9304      	str	r3, [sp, #16]
    63f0:	f004 fc3b 	bl	ac6a <z_log_msg2_static_create.constprop.0>
    63f4:	e7f1      	b.n	63da <pmw3360_init+0x5a>
    63f6:	482a      	ldr	r0, [pc, #168]	; (64a0 <pmw3360_init+0x120>)
    63f8:	f002 f824 	bl	8444 <z_impl_device_get_binding>
	dev_data->irq_gpio_dev =
    63fc:	6068      	str	r0, [r5, #4]
	if (!dev_data->irq_gpio_dev) {
    63fe:	b908      	cbnz	r0, 6404 <pmw3360_init+0x84>
		LOG_ERR("Cannot get IRQ GPIO device");
    6400:	4b2b      	ldr	r3, [pc, #172]	; (64b0 <pmw3360_init+0x130>)
    6402:	e7cb      	b.n	639c <pmw3360_init+0x1c>
	struct gpio_driver_data *data =
    6404:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
    6406:	6881      	ldr	r1, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    6408:	6813      	ldr	r3, [r2, #0]
    640a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    640e:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    6410:	680b      	ldr	r3, [r1, #0]
    6412:	4a28      	ldr	r2, [pc, #160]	; (64b4 <pmw3360_init+0x134>)
    6414:	2114      	movs	r1, #20
    6416:	4798      	blx	r3
	if (err) {
    6418:	4604      	mov	r4, r0
    641a:	b108      	cbz	r0, 6420 <pmw3360_init+0xa0>
		LOG_ERR("Cannot configure IRQ GPIO");
    641c:	4b26      	ldr	r3, [pc, #152]	; (64b8 <pmw3360_init+0x138>)
    641e:	e7e0      	b.n	63e2 <pmw3360_init+0x62>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    6420:	4b26      	ldr	r3, [pc, #152]	; (64bc <pmw3360_init+0x13c>)
	err = gpio_add_callback(dev_data->irq_gpio_dev, &dev_data->irq_gpio_cb);
    6422:	6868      	ldr	r0, [r5, #4]
    6424:	612b      	str	r3, [r5, #16]
	callback->pin_mask = pin_mask;
    6426:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    642a:	616b      	str	r3, [r5, #20]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    642c:	6883      	ldr	r3, [r0, #8]
    642e:	69db      	ldr	r3, [r3, #28]
    6430:	b13b      	cbz	r3, 6442 <pmw3360_init+0xc2>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    6432:	2201      	movs	r2, #1
    6434:	f105 010c 	add.w	r1, r5, #12
    6438:	4798      	blx	r3
	if (err) {
    643a:	4604      	mov	r4, r0
    643c:	b318      	cbz	r0, 6486 <pmw3360_init+0x106>
		LOG_ERR("Cannot add IRQ GPIO callback");
    643e:	4b20      	ldr	r3, [pc, #128]	; (64c0 <pmw3360_init+0x140>)
    6440:	e7cf      	b.n	63e2 <pmw3360_init+0x62>
		return -ENOTSUP;
    6442:	f06f 0485 	mvn.w	r4, #133	; 0x85
    6446:	e7fa      	b.n	643e <pmw3360_init+0xbe>
	k_work_init_delayable(&dev_data->init_work, pmw3360_async_init);
    6448:	f105 0030 	add.w	r0, r5, #48	; 0x30
    644c:	491d      	ldr	r1, [pc, #116]	; (64c4 <pmw3360_init+0x144>)
    644e:	f004 ff3c 	bl	b2ca <k_work_init_delayable>
			K_MSEC(async_init_delay[dev_data->async_init_step]));
    6452:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
    6456:	4b1c      	ldr	r3, [pc, #112]	; (64c8 <pmw3360_init+0x148>)
    6458:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
    645c:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    6460:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    6464:	4621      	mov	r1, r4
    6466:	f240 30e7 	movw	r0, #999	; 0x3e7
    646a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    646e:	2300      	movs	r3, #0
    6470:	fbc6 0107 	smlal	r0, r1, r6, r7
    6474:	f7f9 fe34 	bl	e0 <__aeabi_uldivmod>
    6478:	4602      	mov	r2, r0
    647a:	460b      	mov	r3, r1
	k_work_schedule(&dev_data->init_work,
    647c:	f105 0030 	add.w	r0, r5, #48	; 0x30
    6480:	f002 fd14 	bl	8eac <k_work_schedule>
	return err;
    6484:	e7a9      	b.n	63da <pmw3360_init+0x5a>
    6486:	4811      	ldr	r0, [pc, #68]	; (64cc <pmw3360_init+0x14c>)
    6488:	f001 ffdc 	bl	8444 <z_impl_device_get_binding>
	dev_data->spi_dev = device_get_binding(PMW3360_SPI_DEV_NAME);
    648c:	60a8      	str	r0, [r5, #8]
	if (!dev_data->spi_dev) {
    648e:	2800      	cmp	r0, #0
    6490:	d1da      	bne.n	6448 <pmw3360_init+0xc8>
		LOG_ERR("Cannot get SPI device");
    6492:	4b0f      	ldr	r3, [pc, #60]	; (64d0 <pmw3360_init+0x150>)
    6494:	e782      	b.n	639c <pmw3360_init+0x1c>
    6496:	bf00      	nop
    6498:	200007c0 	.word	0x200007c0
    649c:	00005edd 	.word	0x00005edd
    64a0:	0000c6f6 	.word	0x0000c6f6
    64a4:	0000ccd9 	.word	0x0000ccd9
    64a8:	0000b9bc 	.word	0x0000b9bc
    64ac:	0000ccf3 	.word	0x0000ccf3
    64b0:	0000cd0b 	.word	0x0000cd0b
    64b4:	00010010 	.word	0x00010010
    64b8:	0000cd26 	.word	0x0000cd26
    64bc:	00005e91 	.word	0x00005e91
    64c0:	0000cd40 	.word	0x0000cd40
    64c4:	000059a1 	.word	0x000059a1
    64c8:	0000bc3c 	.word	0x0000bc3c
    64cc:	0000c8ac 	.word	0x0000c8ac
    64d0:	0000cd5d 	.word	0x0000cd5d

000064d4 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    64d4:	4a02      	ldr	r2, [pc, #8]	; (64e0 <nvmc_wait+0xc>)
    64d6:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    64da:	2b00      	cmp	r3, #0
    64dc:	d0fb      	beq.n	64d6 <nvmc_wait+0x2>
}
    64de:	4770      	bx	lr
    64e0:	4001e000 	.word	0x4001e000

000064e4 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    64e4:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    64e6:	f004 fbe2 	bl	acae <nrf52_errata_136>
    64ea:	b140      	cbz	r0, 64fe <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    64ec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    64f0:	2200      	movs	r2, #0
    64f2:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    64f6:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    64fa:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    64fe:	f004 fbd6 	bl	acae <nrf52_errata_136>
    6502:	2800      	cmp	r0, #0
    6504:	d046      	beq.n	6594 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    6506:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    650a:	4b4c      	ldr	r3, [pc, #304]	; (663c <SystemInit+0x158>)
    650c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    6510:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    6514:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    6518:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    651c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    6520:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    6524:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    6528:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    652c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    6530:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    6534:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    6538:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    653c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    6540:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    6544:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    6548:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    654c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    6550:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    6554:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    6558:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    655c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    6560:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    6564:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    6568:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    656c:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    6570:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    6574:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    6578:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    657c:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    6580:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    6584:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    6588:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    658c:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    6590:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    6594:	f004 fb8b 	bl	acae <nrf52_errata_136>
    6598:	b148      	cbz	r0, 65ae <SystemInit+0xca>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    659a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    659e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    65a2:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    65a4:	bf44      	itt	mi
    65a6:	f06f 0201 	mvnmi.w	r2, #1
    65aa:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    65ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)
            if (var1 == 0x10)
    65b2:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    65b6:	2a10      	cmp	r2, #16
    65b8:	d10e      	bne.n	65d8 <SystemInit+0xf4>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    65ba:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    65be:	2b03      	cmp	r3, #3
    65c0:	d802      	bhi.n	65c8 <SystemInit+0xe4>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    65c2:	4a1f      	ldr	r2, [pc, #124]	; (6640 <SystemInit+0x15c>)
    65c4:	5cd3      	ldrb	r3, [r2, r3]
    65c6:	b13b      	cbz	r3, 65d8 <SystemInit+0xf4>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    65c8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    65cc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    65d0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    65d4:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    65d8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    65dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    65e0:	2a00      	cmp	r2, #0
    65e2:	db03      	blt.n	65ec <SystemInit+0x108>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    65e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    65e8:	2b00      	cmp	r3, #0
    65ea:	da22      	bge.n	6632 <SystemInit+0x14e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    65ec:	4915      	ldr	r1, [pc, #84]	; (6644 <SystemInit+0x160>)
    65ee:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    65f0:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    65f4:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    65f8:	2412      	movs	r4, #18
    nvmc_wait();
    65fa:	f7ff ff6b 	bl	64d4 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    65fe:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    6602:	f7ff ff67 	bl	64d4 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    6606:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    660a:	f7ff ff63 	bl	64d4 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    660e:	2300      	movs	r3, #0
    6610:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    6614:	f7ff ff5e 	bl	64d4 <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    6618:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    661c:	490a      	ldr	r1, [pc, #40]	; (6648 <SystemInit+0x164>)
    661e:	4b0b      	ldr	r3, [pc, #44]	; (664c <SystemInit+0x168>)
    6620:	68ca      	ldr	r2, [r1, #12]
    6622:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    6626:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    6628:	60cb      	str	r3, [r1, #12]
    662a:	f3bf 8f4f 	dsb	sy
    __NOP();
    662e:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    6630:	e7fd      	b.n	662e <SystemInit+0x14a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    6632:	4b07      	ldr	r3, [pc, #28]	; (6650 <SystemInit+0x16c>)
    6634:	4a07      	ldr	r2, [pc, #28]	; (6654 <SystemInit+0x170>)
    6636:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    6638:	bd10      	pop	{r4, pc}
    663a:	bf00      	nop
    663c:	4000c000 	.word	0x4000c000
    6640:	0000dd79 	.word	0x0000dd79
    6644:	4001e000 	.word	0x4001e000
    6648:	e000ed00 	.word	0xe000ed00
    664c:	05fa0004 	.word	0x05fa0004
    6650:	20000090 	.word	0x20000090
    6654:	03d09000 	.word	0x03d09000

00006658 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    6658:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    665a:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    665c:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    665e:	fab2 f382 	clz	r3, r2
    6662:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    6666:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    6668:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    666a:	d014      	beq.n	6696 <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    666c:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    6670:	fa05 f303 	lsl.w	r3, r5, r3
    6674:	ea22 0303 	bic.w	r3, r2, r3
    6678:	e850 6f00 	ldrex	r6, [r0]
    667c:	4296      	cmp	r6, r2
    667e:	d104      	bne.n	668a <nrfx_flag32_alloc+0x32>
    6680:	e840 3c00 	strex	ip, r3, [r0]
    6684:	f1bc 0f00 	cmp.w	ip, #0
    6688:	d1f6      	bne.n	6678 <nrfx_flag32_alloc+0x20>
    668a:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    668e:	d1e5      	bne.n	665c <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    6690:	4802      	ldr	r0, [pc, #8]	; (669c <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    6692:	700c      	strb	r4, [r1, #0]
}
    6694:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    6696:	4802      	ldr	r0, [pc, #8]	; (66a0 <nrfx_flag32_alloc+0x48>)
    6698:	e7fc      	b.n	6694 <nrfx_flag32_alloc+0x3c>
    669a:	bf00      	nop
    669c:	0bad0000 	.word	0x0bad0000
    66a0:	0bad0002 	.word	0x0bad0002

000066a4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    66a4:	6803      	ldr	r3, [r0, #0]
    66a6:	40cb      	lsrs	r3, r1
    66a8:	07db      	lsls	r3, r3, #31
{
    66aa:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    66ac:	d415      	bmi.n	66da <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    66ae:	2301      	movs	r3, #1
    66b0:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    66b4:	6803      	ldr	r3, [r0, #0]
    66b6:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    66ba:	ea41 0203 	orr.w	r2, r1, r3
    66be:	e850 4f00 	ldrex	r4, [r0]
    66c2:	429c      	cmp	r4, r3
    66c4:	d104      	bne.n	66d0 <nrfx_flag32_free+0x2c>
    66c6:	e840 2c00 	strex	ip, r2, [r0]
    66ca:	f1bc 0f00 	cmp.w	ip, #0
    66ce:	d1f6      	bne.n	66be <nrfx_flag32_free+0x1a>
    66d0:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    66d4:	d1ee      	bne.n	66b4 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    66d6:	4802      	ldr	r0, [pc, #8]	; (66e0 <nrfx_flag32_free+0x3c>)
}
    66d8:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    66da:	4802      	ldr	r0, [pc, #8]	; (66e4 <nrfx_flag32_free+0x40>)
    66dc:	e7fc      	b.n	66d8 <nrfx_flag32_free+0x34>
    66de:	bf00      	nop
    66e0:	0bad0000 	.word	0x0bad0000
    66e4:	0bad0004 	.word	0x0bad0004

000066e8 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    66e8:	4b05      	ldr	r3, [pc, #20]	; (6700 <nrfx_clock_init+0x18>)
    66ea:	791a      	ldrb	r2, [r3, #4]
    66ec:	b92a      	cbnz	r2, 66fa <nrfx_clock_init+0x12>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    }
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    66ee:	715a      	strb	r2, [r3, #5]
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    66f0:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    66f2:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    66f4:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    66f6:	4803      	ldr	r0, [pc, #12]	; (6704 <nrfx_clock_init+0x1c>)
    66f8:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    66fa:	4803      	ldr	r0, [pc, #12]	; (6708 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    66fc:	4770      	bx	lr
    66fe:	bf00      	nop
    6700:	200015e0 	.word	0x200015e0
    6704:	0bad0000 	.word	0x0bad0000
    6708:	0bad000c 	.word	0x0bad000c

0000670c <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    670c:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    670e:	2000      	movs	r0, #0
    6710:	f7fc f9fe 	bl	2b10 <arch_irq_is_enabled>
    6714:	b908      	cbnz	r0, 671a <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6716:	f7fc f9d7 	bl	2ac8 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    671a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    671e:	2200      	movs	r2, #0
    6720:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    6724:	4b01      	ldr	r3, [pc, #4]	; (672c <nrfx_clock_enable+0x20>)
    6726:	2201      	movs	r2, #1
    6728:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    672a:	bd08      	pop	{r3, pc}
    672c:	2000196f 	.word	0x2000196f

00006730 <nrfx_clock_calibration_start>:
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6730:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6734:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6738:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    673c:	03c8      	lsls	r0, r1, #15
    673e:	d516      	bpl.n	676e <nrfx_clock_calibration_start+0x3e>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &clk_src))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)
    6740:	07d1      	lsls	r1, r2, #31
    6742:	d514      	bpl.n	676e <nrfx_clock_calibration_start+0x3e>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6744:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    6748:	03d2      	lsls	r2, r2, #15
    674a:	d510      	bpl.n	676e <nrfx_clock_calibration_start+0x3e>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_LFCLK, NULL))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (m_clock_cb.cal_state == CAL_STATE_IDLE)
    674c:	490a      	ldr	r1, [pc, #40]	; (6778 <nrfx_clock_calibration_start+0x48>)
    674e:	794a      	ldrb	r2, [r1, #5]
    6750:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    6754:	b96a      	cbnz	r2, 6772 <nrfx_clock_calibration_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6756:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    675a:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    nrfx_err_t err_code = NRFX_SUCCESS;
    675e:	4807      	ldr	r0, [pc, #28]	; (677c <nrfx_clock_calibration_start+0x4c>)
    p_reg->INTENSET = mask;
    6760:	2208      	movs	r2, #8
    6762:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_CAL;
    6766:	2201      	movs	r2, #1
    6768:	714a      	strb	r2, [r1, #5]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    676a:	611a      	str	r2, [r3, #16]
}
    676c:	4770      	bx	lr
        return NRFX_ERROR_INVALID_STATE;
    676e:	4804      	ldr	r0, [pc, #16]	; (6780 <nrfx_clock_calibration_start+0x50>)
    6770:	4770      	bx	lr
#endif
        nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_CAL);
    }
    else
    {
        err_code = NRFX_ERROR_BUSY;
    6772:	4804      	ldr	r0, [pc, #16]	; (6784 <nrfx_clock_calibration_start+0x54>)

    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6774:	4770      	bx	lr
    6776:	bf00      	nop
    6778:	200015e0 	.word	0x200015e0
    677c:	0bad0000 	.word	0x0bad0000
    6780:	0bad0005 	.word	0x0bad0005
    6784:	0bad000b 	.word	0x0bad000b

00006788 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6788:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    678c:	b510      	push	{r4, lr}
    678e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    6792:	b152      	cbz	r2, 67aa <nrfx_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6794:	2000      	movs	r0, #0
    6796:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    679a:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    679e:	2201      	movs	r2, #1
    67a0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    67a4:	4b16      	ldr	r3, [pc, #88]	; (6800 <nrfx_clock_irq_handler+0x78>)
    67a6:	681b      	ldr	r3, [r3, #0]
    67a8:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    67aa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    67ae:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    67b2:	b15a      	cbz	r2, 67cc <nrfx_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    67b4:	2200      	movs	r2, #0
    67b6:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    67ba:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENCLR = mask;
    67be:	2202      	movs	r2, #2
    67c0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    67c4:	4b0e      	ldr	r3, [pc, #56]	; (6800 <nrfx_clock_irq_handler+0x78>)
    67c6:	2001      	movs	r0, #1
    67c8:	681b      	ldr	r3, [r3, #0]
    67ca:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    67cc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    67d0:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CTTO);
    }
#endif // NRF_CLOCK_HAS_CALIBRATION_TIMER && NRFX_CHECK(NRFX_CLOCK_CONFIG_CT_ENABLED)

    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_DONE) &&
    67d4:	b192      	cbz	r2, 67fc <nrfx_clock_irq_handler+0x74>
    return p_reg->INTENSET & mask;
    67d6:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    67da:	0712      	lsls	r2, r2, #28
    67dc:	d50e      	bpl.n	67fc <nrfx_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    67de:	2200      	movs	r2, #0
    67e0:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    67e4:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    p_reg->INTENCLR = mask;
    67e8:	2108      	movs	r1, #8
    67ea:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
        *(volatile uint32_t *)0x40000C34 = 0x00000000;
#endif
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_DONE");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    67ee:	4b04      	ldr	r3, [pc, #16]	; (6800 <nrfx_clock_irq_handler+0x78>)
    67f0:	715a      	strb	r2, [r3, #5]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    67f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    67f6:	681b      	ldr	r3, [r3, #0]
    67f8:	2003      	movs	r0, #3
    67fa:	4718      	bx	r3
}
    67fc:	bd10      	pop	{r4, pc}
    67fe:	bf00      	nop
    6800:	200015e0 	.word	0x200015e0

00006804 <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    6804:	4b03      	ldr	r3, [pc, #12]	; (6814 <pin_in_use_by_te+0x10>)
    6806:	3008      	adds	r0, #8
    6808:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    680c:	f3c0 1040 	ubfx	r0, r0, #5, #1
    6810:	4770      	bx	lr
    6812:	bf00      	nop
    6814:	20000094 	.word	0x20000094

00006818 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    6818:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    681a:	f100 0308 	add.w	r3, r0, #8
    681e:	4c0c      	ldr	r4, [pc, #48]	; (6850 <call_handler+0x38>)
    6820:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    6824:	05da      	lsls	r2, r3, #23
{
    6826:	4605      	mov	r5, r0
    6828:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    682a:	d507      	bpl.n	683c <call_handler+0x24>
    682c:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    6830:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    6834:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    6838:	6852      	ldr	r2, [r2, #4]
    683a:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    683c:	68a3      	ldr	r3, [r4, #8]
    683e:	b12b      	cbz	r3, 684c <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6840:	68e2      	ldr	r2, [r4, #12]
    6842:	4631      	mov	r1, r6
    6844:	4628      	mov	r0, r5
    }
}
    6846:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    684a:	4718      	bx	r3
}
    684c:	bd70      	pop	{r4, r5, r6, pc}
    684e:	bf00      	nop
    6850:	20000094 	.word	0x20000094

00006854 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6854:	4a12      	ldr	r2, [pc, #72]	; (68a0 <release_handler+0x4c>)
    6856:	3008      	adds	r0, #8
{
    6858:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    685a:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    685e:	05d9      	lsls	r1, r3, #23
    6860:	d51b      	bpl.n	689a <release_handler+0x46>
    6862:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    6866:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    686a:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    686e:	f102 0410 	add.w	r4, r2, #16
    6872:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    6874:	f834 3b02 	ldrh.w	r3, [r4], #2
    6878:	f413 7f80 	tst.w	r3, #256	; 0x100
    687c:	d003      	beq.n	6886 <release_handler+0x32>
    687e:	f3c3 2343 	ubfx	r3, r3, #9, #4
    6882:	4299      	cmp	r1, r3
    6884:	d009      	beq.n	689a <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6886:	3001      	adds	r0, #1
    6888:	2820      	cmp	r0, #32
    688a:	d1f3      	bne.n	6874 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    688c:	2300      	movs	r3, #0
    688e:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    6892:	4804      	ldr	r0, [pc, #16]	; (68a4 <release_handler+0x50>)
}
    6894:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    6896:	f7ff bf05 	b.w	66a4 <nrfx_flag32_free>
}
    689a:	bc10      	pop	{r4}
    689c:	4770      	bx	lr
    689e:	bf00      	nop
    68a0:	20000094 	.word	0x20000094
    68a4:	200000e8 	.word	0x200000e8

000068a8 <pin_handler_trigger_uninit>:
{
    68a8:	b538      	push	{r3, r4, r5, lr}
    68aa:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    68ac:	f7ff ffaa 	bl	6804 <pin_in_use_by_te>
    68b0:	4c09      	ldr	r4, [pc, #36]	; (68d8 <pin_handler_trigger_uninit+0x30>)
    68b2:	f102 0508 	add.w	r5, r2, #8
    68b6:	b140      	cbz	r0, 68ca <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    68b8:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    68bc:	4907      	ldr	r1, [pc, #28]	; (68dc <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    68be:	0b5b      	lsrs	r3, r3, #13
    68c0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    68c4:	2000      	movs	r0, #0
    68c6:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    68ca:	4610      	mov	r0, r2
    68cc:	f7ff ffc2 	bl	6854 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    68d0:	2300      	movs	r3, #0
    68d2:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    68d6:	bd38      	pop	{r3, r4, r5, pc}
    68d8:	20000094 	.word	0x20000094
    68dc:	40006000 	.word	0x40006000

000068e0 <nrfx_gpiote_input_configure>:
{
    68e0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    68e4:	4604      	mov	r4, r0
    68e6:	461e      	mov	r6, r3
    if (p_input_config)
    68e8:	b309      	cbz	r1, 692e <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    68ea:	4f4d      	ldr	r7, [pc, #308]	; (6a20 <nrfx_gpiote_input_configure+0x140>)
    68ec:	f100 0808 	add.w	r8, r0, #8
    68f0:	f837 5018 	ldrh.w	r5, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    68f4:	07ab      	lsls	r3, r5, #30
    68f6:	d506      	bpl.n	6906 <nrfx_gpiote_input_configure+0x26>
    68f8:	f7ff ff84 	bl	6804 <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    68fc:	b118      	cbz	r0, 6906 <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    68fe:	4849      	ldr	r0, [pc, #292]	; (6a24 <nrfx_gpiote_input_configure+0x144>)
}
    6900:	b002      	add	sp, #8
    6902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    6906:	f004 001f 	and.w	r0, r4, #31
    690a:	0080      	lsls	r0, r0, #2
    690c:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6910:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6912:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    6916:	f025 0502 	bic.w	r5, r5, #2
    cnf &= ~to_update;
    691a:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    691e:	f045 0501 	orr.w	r5, r5, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6922:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    6926:	f827 5018 	strh.w	r5, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    692a:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_trigger_config)
    692e:	b192      	cbz	r2, 6956 <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6930:	4b3b      	ldr	r3, [pc, #236]	; (6a20 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    6932:	7815      	ldrb	r5, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    6934:	6852      	ldr	r2, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6936:	f104 0008 	add.w	r0, r4, #8
    693a:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    693e:	078f      	lsls	r7, r1, #30
    6940:	d50c      	bpl.n	695c <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
    6942:	2a00      	cmp	r2, #0
    6944:	d1db      	bne.n	68fe <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    6946:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    694a:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    694e:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    6952:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    6956:	bbce      	cbnz	r6, 69cc <nrfx_gpiote_input_configure+0xec>
    return NRFX_SUCCESS;
    6958:	4833      	ldr	r0, [pc, #204]	; (6a28 <nrfx_gpiote_input_configure+0x148>)
    695a:	e7d1      	b.n	6900 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    695c:	f021 0120 	bic.w	r1, r1, #32
    6960:	04c9      	lsls	r1, r1, #19
    6962:	0cc9      	lsrs	r1, r1, #19
    6964:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    6968:	2a00      	cmp	r2, #0
    696a:	d0ec      	beq.n	6946 <nrfx_gpiote_input_configure+0x66>
                if (!edge)
    696c:	2d03      	cmp	r5, #3
    696e:	d8c6      	bhi.n	68fe <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    6970:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    6972:	b92d      	cbnz	r5, 6980 <nrfx_gpiote_input_configure+0xa0>
    6974:	4a2d      	ldr	r2, [pc, #180]	; (6a2c <nrfx_gpiote_input_configure+0x14c>)
    6976:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    697a:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    697e:	e7e2      	b.n	6946 <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6980:	00ba      	lsls	r2, r7, #2
    6982:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6986:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    698a:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    698e:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    6992:	f02c 0c03 	bic.w	ip, ip, #3
    6996:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    699a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    699e:	f42c 3c47 	bic.w	ip, ip, #203776	; 0x31c00
    69a2:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    69a6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    69aa:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    69ae:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    69b2:	f40c 5cf8 	and.w	ip, ip, #7936	; 0x1f00
    69b6:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
    69ba:	ea4c 0c0e 	orr.w	ip, ip, lr
    69be:	f041 0120 	orr.w	r1, r1, #32
    69c2:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    69c6:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    69ca:	e7bc      	b.n	6946 <nrfx_gpiote_input_configure+0x66>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    69cc:	e9d6 7600 	ldrd	r7, r6, [r6]
    release_handler(pin);
    69d0:	4620      	mov	r0, r4
    69d2:	f7ff ff3f 	bl	6854 <release_handler>
    if (!handler)
    69d6:	2f00      	cmp	r7, #0
    69d8:	d0be      	beq.n	6958 <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    69da:	4d11      	ldr	r5, [pc, #68]	; (6a20 <nrfx_gpiote_input_configure+0x140>)
    69dc:	682b      	ldr	r3, [r5, #0]
    69de:	429f      	cmp	r7, r3
    69e0:	d104      	bne.n	69ec <nrfx_gpiote_input_configure+0x10c>
    69e2:	686b      	ldr	r3, [r5, #4]
    69e4:	429e      	cmp	r6, r3
    69e6:	d101      	bne.n	69ec <nrfx_gpiote_input_configure+0x10c>
    69e8:	2200      	movs	r2, #0
    69ea:	e009      	b.n	6a00 <nrfx_gpiote_input_configure+0x120>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    69ec:	4810      	ldr	r0, [pc, #64]	; (6a30 <nrfx_gpiote_input_configure+0x150>)
    69ee:	f10d 0107 	add.w	r1, sp, #7
    69f2:	f7ff fe31 	bl	6658 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    69f6:	4b0c      	ldr	r3, [pc, #48]	; (6a28 <nrfx_gpiote_input_configure+0x148>)
    69f8:	4298      	cmp	r0, r3
    69fa:	d181      	bne.n	6900 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    69fc:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    6a00:	f845 7032 	str.w	r7, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    6a04:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6a08:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    6a0a:	605e      	str	r6, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6a0c:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    6a10:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    6a14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6a18:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    6a1c:	e79c      	b.n	6958 <nrfx_gpiote_input_configure+0x78>
    6a1e:	bf00      	nop
    6a20:	20000094 	.word	0x20000094
    6a24:	0bad0004 	.word	0x0bad0004
    6a28:	0bad0000 	.word	0x0bad0000
    6a2c:	40006000 	.word	0x40006000
    6a30:	200000e8 	.word	0x200000e8

00006a34 <nrfx_gpiote_output_configure>:
{
    6a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6a36:	4604      	mov	r4, r0
    if (p_config)
    6a38:	b371      	cbz	r1, 6a98 <nrfx_gpiote_output_configure+0x64>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6a3a:	4e37      	ldr	r6, [pc, #220]	; (6b18 <nrfx_gpiote_output_configure+0xe4>)
    6a3c:	f100 0708 	add.w	r7, r0, #8
    6a40:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    6a44:	07ab      	lsls	r3, r5, #30
    6a46:	d404      	bmi.n	6a52 <nrfx_gpiote_output_configure+0x1e>
    6a48:	f7ff fedc 	bl	6804 <pin_in_use_by_te>
    6a4c:	b108      	cbz	r0, 6a52 <nrfx_gpiote_output_configure+0x1e>
    return NRFX_SUCCESS;
    6a4e:	4833      	ldr	r0, [pc, #204]	; (6b1c <nrfx_gpiote_output_configure+0xe8>)
}
    6a50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    6a52:	f015 0f1c 	tst.w	r5, #28
    6a56:	784b      	ldrb	r3, [r1, #1]
    6a58:	d001      	beq.n	6a5e <nrfx_gpiote_output_configure+0x2a>
    6a5a:	2b01      	cmp	r3, #1
    6a5c:	d0f7      	beq.n	6a4e <nrfx_gpiote_output_configure+0x1a>
    *p_pin = pin_number & 0x1F;
    6a5e:	f004 001f 	and.w	r0, r4, #31
    6a62:	0080      	lsls	r0, r0, #2
    6a64:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    6a68:	f891 e000 	ldrb.w	lr, [r1]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6a6c:	f8d0 c700 	ldr.w	ip, [r0, #1792]	; 0x700
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6a70:	7889      	ldrb	r1, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    6a72:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    6a74:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    6a78:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    6a7c:	f02c 0c07 	bic.w	ip, ip, #7
    6a80:	ea43 030c 	orr.w	r3, r3, ip
    6a84:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    6a88:	f045 0503 	orr.w	r5, r5, #3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6a8c:	f043 0301 	orr.w	r3, r3, #1
    6a90:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    6a94:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_task_config)
    6a98:	b90a      	cbnz	r2, 6a9e <nrfx_gpiote_output_configure+0x6a>
    return NRFX_SUCCESS;
    6a9a:	4821      	ldr	r0, [pc, #132]	; (6b20 <nrfx_gpiote_output_configure+0xec>)
    6a9c:	e7d8      	b.n	6a50 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6a9e:	4e1e      	ldr	r6, [pc, #120]	; (6b18 <nrfx_gpiote_output_configure+0xe4>)
    6aa0:	f104 0708 	add.w	r7, r4, #8
    6aa4:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    6aa8:	0783      	lsls	r3, r0, #30
    6aaa:	d5d0      	bpl.n	6a4e <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    6aac:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    6ab0:	4661      	mov	r1, ip
    6ab2:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    6ab4:	f020 0020 	bic.w	r0, r0, #32
    6ab8:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    6abc:	04c0      	lsls	r0, r0, #19
    6abe:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    6ac2:	0cc0      	lsrs	r0, r0, #19
    6ac4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    6ac8:	2300      	movs	r3, #0
    6aca:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    6ace:	7855      	ldrb	r5, [r2, #1]
    6ad0:	2d00      	cmp	r5, #0
    6ad2:	d0e2      	beq.n	6a9a <nrfx_gpiote_output_configure+0x66>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    6ad4:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    6ad8:	7892      	ldrb	r2, [r2, #2]
    6ada:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    6ade:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6ae2:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6ae6:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    6aea:	0223      	lsls	r3, r4, #8
    6aec:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6af0:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6af2:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6af6:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    6afa:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6afc:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    6afe:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6b02:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6b06:	4313      	orrs	r3, r2
    6b08:	f040 0020 	orr.w	r0, r0, #32
    6b0c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    6b10:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    6b14:	e7c1      	b.n	6a9a <nrfx_gpiote_output_configure+0x66>
    6b16:	bf00      	nop
    6b18:	20000094 	.word	0x20000094
    6b1c:	0bad0004 	.word	0x0bad0004
    6b20:	0bad0000 	.word	0x0bad0000

00006b24 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    6b24:	4b01      	ldr	r3, [pc, #4]	; (6b2c <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    6b26:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    6b2a:	4770      	bx	lr
    6b2c:	20000094 	.word	0x20000094

00006b30 <nrfx_gpiote_channel_get>:
{
    6b30:	b508      	push	{r3, lr}
    6b32:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    6b34:	f7ff fe66 	bl	6804 <pin_in_use_by_te>
    6b38:	b138      	cbz	r0, 6b4a <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6b3a:	4b05      	ldr	r3, [pc, #20]	; (6b50 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    6b3c:	4805      	ldr	r0, [pc, #20]	; (6b54 <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6b3e:	3208      	adds	r2, #8
    6b40:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    6b44:	0b5b      	lsrs	r3, r3, #13
    6b46:	700b      	strb	r3, [r1, #0]
}
    6b48:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6b4a:	4803      	ldr	r0, [pc, #12]	; (6b58 <nrfx_gpiote_channel_get+0x28>)
    6b4c:	e7fc      	b.n	6b48 <nrfx_gpiote_channel_get+0x18>
    6b4e:	bf00      	nop
    6b50:	20000094 	.word	0x20000094
    6b54:	0bad0000 	.word	0x0bad0000
    6b58:	0bad0004 	.word	0x0bad0004

00006b5c <nrfx_gpiote_init>:
{
    6b5c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    6b5e:	4c0f      	ldr	r4, [pc, #60]	; (6b9c <nrfx_gpiote_init+0x40>)
    6b60:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    6b64:	b9bd      	cbnz	r5, 6b96 <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    6b66:	2240      	movs	r2, #64	; 0x40
    6b68:	4629      	mov	r1, r5
    6b6a:	f104 0010 	add.w	r0, r4, #16
    6b6e:	f003 fe0d 	bl	a78c <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    6b72:	2006      	movs	r0, #6
    6b74:	f7fb ffa8 	bl	2ac8 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6b78:	4b09      	ldr	r3, [pc, #36]	; (6ba0 <nrfx_gpiote_init+0x44>)
    return err_code;
    6b7a:	480a      	ldr	r0, [pc, #40]	; (6ba4 <nrfx_gpiote_init+0x48>)
    6b7c:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    6b80:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    6b84:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6b88:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    6b8c:	2301      	movs	r3, #1
    6b8e:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    6b92:	6563      	str	r3, [r4, #84]	; 0x54
}
    6b94:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    6b96:	4804      	ldr	r0, [pc, #16]	; (6ba8 <nrfx_gpiote_init+0x4c>)
    6b98:	e7fc      	b.n	6b94 <nrfx_gpiote_init+0x38>
    6b9a:	bf00      	nop
    6b9c:	20000094 	.word	0x20000094
    6ba0:	40006000 	.word	0x40006000
    6ba4:	0bad0000 	.word	0x0bad0000
    6ba8:	0bad0005 	.word	0x0bad0005

00006bac <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    6bac:	4b03      	ldr	r3, [pc, #12]	; (6bbc <nrfx_gpiote_is_init+0x10>)
    6bae:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    6bb2:	3800      	subs	r0, #0
    6bb4:	bf18      	it	ne
    6bb6:	2001      	movne	r0, #1
    6bb8:	4770      	bx	lr
    6bba:	bf00      	nop
    6bbc:	20000094 	.word	0x20000094

00006bc0 <nrfx_gpiote_channel_free>:
{
    6bc0:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    6bc2:	4801      	ldr	r0, [pc, #4]	; (6bc8 <nrfx_gpiote_channel_free+0x8>)
    6bc4:	f7ff bd6e 	b.w	66a4 <nrfx_flag32_free>
    6bc8:	200000e4 	.word	0x200000e4

00006bcc <nrfx_gpiote_channel_alloc>:
{
    6bcc:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    6bce:	4801      	ldr	r0, [pc, #4]	; (6bd4 <nrfx_gpiote_channel_alloc+0x8>)
    6bd0:	f7ff bd42 	b.w	6658 <nrfx_flag32_alloc>
    6bd4:	200000e4 	.word	0x200000e4

00006bd8 <nrfx_gpiote_trigger_enable>:
{
    6bd8:	b510      	push	{r4, lr}
    6bda:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6bdc:	f7ff fe12 	bl	6804 <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6be0:	f102 0408 	add.w	r4, r2, #8
    6be4:	4b1c      	ldr	r3, [pc, #112]	; (6c58 <nrfx_gpiote_trigger_enable+0x80>)
    6be6:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6bea:	b1e0      	cbz	r0, 6c26 <nrfx_gpiote_trigger_enable+0x4e>
    6bec:	f013 0402 	ands.w	r4, r3, #2
    6bf0:	d119      	bne.n	6c26 <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6bf2:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6bf4:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    6bf6:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    6bfa:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    6bfe:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6c02:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6c06:	6004      	str	r4, [r0, #0]
    6c08:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    6c0a:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    6c0e:	f040 0001 	orr.w	r0, r0, #1
    6c12:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    6c16:	b129      	cbz	r1, 6c24 <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    6c18:	2201      	movs	r2, #1
    6c1a:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    6c1e:	4a0f      	ldr	r2, [pc, #60]	; (6c5c <nrfx_gpiote_trigger_enable+0x84>)
    6c20:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    6c24:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6c26:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    6c2a:	2b04      	cmp	r3, #4
    6c2c:	d010      	beq.n	6c50 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    6c2e:	2b05      	cmp	r3, #5
    6c30:	d010      	beq.n	6c54 <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    6c32:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6c36:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    6c3a:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6c3e:	40d9      	lsrs	r1, r3
    6c40:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6c44:	3102      	adds	r1, #2
}
    6c46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    6c4a:	4610      	mov	r0, r2
    6c4c:	f004 b8c0 	b.w	add0 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    6c50:	2103      	movs	r1, #3
    6c52:	e7f8      	b.n	6c46 <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    6c54:	2102      	movs	r1, #2
    6c56:	e7f6      	b.n	6c46 <nrfx_gpiote_trigger_enable+0x6e>
    6c58:	20000094 	.word	0x20000094
    6c5c:	40006000 	.word	0x40006000

00006c60 <nrfx_gpiote_trigger_disable>:
{
    6c60:	b508      	push	{r3, lr}
    6c62:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6c64:	f7ff fdce 	bl	6804 <pin_in_use_by_te>
    6c68:	b1c0      	cbz	r0, 6c9c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6c6a:	f102 0108 	add.w	r1, r2, #8
    6c6e:	4b0e      	ldr	r3, [pc, #56]	; (6ca8 <nrfx_gpiote_trigger_disable+0x48>)
    6c70:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6c74:	0799      	lsls	r1, r3, #30
    6c76:	d411      	bmi.n	6c9c <nrfx_gpiote_trigger_disable+0x3c>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6c78:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    6c7a:	2201      	movs	r2, #1
    6c7c:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    6c7e:	009b      	lsls	r3, r3, #2
    6c80:	490a      	ldr	r1, [pc, #40]	; (6cac <nrfx_gpiote_trigger_disable+0x4c>)
    6c82:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6c86:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    6c8a:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6c8e:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    6c92:	f022 0203 	bic.w	r2, r2, #3
    6c96:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    6c9a:	bd08      	pop	{r3, pc}
    6c9c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    6ca0:	2100      	movs	r1, #0
    6ca2:	4610      	mov	r0, r2
    6ca4:	f004 b894 	b.w	add0 <nrf_gpio_cfg_sense_set>
    6ca8:	20000094 	.word	0x20000094
    6cac:	40006000 	.word	0x40006000

00006cb0 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    6cb0:	4b0d      	ldr	r3, [pc, #52]	; (6ce8 <nrfx_gpiote_pin_uninit+0x38>)
    6cb2:	f100 0208 	add.w	r2, r0, #8
{
    6cb6:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    6cb8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    6cbc:	07db      	lsls	r3, r3, #31
{
    6cbe:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    6cc0:	d50f      	bpl.n	6ce2 <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    6cc2:	f7ff ffcd 	bl	6c60 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    6cc6:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    6cc8:	f004 041f 	and.w	r4, r4, #31
    6ccc:	f7ff fdec 	bl	68a8 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    6cd0:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    6cd4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6cd8:	2202      	movs	r2, #2
    6cda:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    6cde:	4803      	ldr	r0, [pc, #12]	; (6cec <nrfx_gpiote_pin_uninit+0x3c>)
}
    6ce0:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6ce2:	4803      	ldr	r0, [pc, #12]	; (6cf0 <nrfx_gpiote_pin_uninit+0x40>)
    6ce4:	e7fc      	b.n	6ce0 <nrfx_gpiote_pin_uninit+0x30>
    6ce6:	bf00      	nop
    6ce8:	20000094 	.word	0x20000094
    6cec:	0bad0000 	.word	0x0bad0000
    6cf0:	0bad0004 	.word	0x0bad0004

00006cf4 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    6cf4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6cf8:	4b4e      	ldr	r3, [pc, #312]	; (6e34 <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    6cfa:	484f      	ldr	r0, [pc, #316]	; (6e38 <nrfx_gpiote_irq_handler+0x144>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6cfc:	494f      	ldr	r1, [pc, #316]	; (6e3c <nrfx_gpiote_irq_handler+0x148>)
    uint32_t status = 0;
    6cfe:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    6d00:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6d02:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6d04:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    6d06:	b136      	cbz	r6, 6d16 <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    6d08:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    6d0c:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6d0e:	bf1e      	ittt	ne
    6d10:	601c      	strne	r4, [r3, #0]
    6d12:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    6d14:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6d16:	3304      	adds	r3, #4
    6d18:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    6d1a:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    6d1e:	d1f1      	bne.n	6d04 <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    6d20:	4b45      	ldr	r3, [pc, #276]	; (6e38 <nrfx_gpiote_irq_handler+0x144>)
    6d22:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    6d26:	b1bb      	cbz	r3, 6d58 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    6d28:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    6d2c:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    6d30:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    6d32:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    6d36:	af01      	add	r7, sp, #4
    6d38:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    6d3c:	9c01      	ldr	r4, [sp, #4]
    6d3e:	b96c      	cbnz	r4, 6d5c <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6d40:	4b3d      	ldr	r3, [pc, #244]	; (6e38 <nrfx_gpiote_irq_handler+0x144>)
    6d42:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    6d46:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    6d4a:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    6d4e:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    6d50:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    6d54:	2b00      	cmp	r3, #0
    6d56:	d1ee      	bne.n	6d36 <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    6d58:	2401      	movs	r4, #1
    6d5a:	e066      	b.n	6e2a <nrfx_gpiote_irq_handler+0x136>
                uint32_t pin = NRF_CTZ(latch[i]);
    6d5c:	fa94 f4a4 	rbit	r4, r4
    6d60:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6d64:	4a36      	ldr	r2, [pc, #216]	; (6e40 <nrfx_gpiote_irq_handler+0x14c>)
    6d66:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    6d6a:	08e0      	lsrs	r0, r4, #3
    6d6c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
    6d70:	f004 0307 	and.w	r3, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    6d74:	fa08 f203 	lsl.w	r2, r8, r3
    6d78:	5c3b      	ldrb	r3, [r7, r0]
    6d7a:	ea23 0302 	bic.w	r3, r3, r2
    6d7e:	543b      	strb	r3, [r7, r0]
    6d80:	00a3      	lsls	r3, r4, #2
    6d82:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    6d86:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6d8a:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    6d8e:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6d90:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    6d92:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    6d96:	d518      	bpl.n	6dca <nrfx_gpiote_irq_handler+0xd6>
        call_handler(pin, trigger);
    6d98:	4659      	mov	r1, fp
    6d9a:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    6d9c:	fa5f fa82 	uxtb.w	sl, r2
    6da0:	f7ff fd3a 	bl	6818 <call_handler>
    6da4:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    6da8:	f3c3 4301 	ubfx	r3, r3, #16, #2
    6dac:	459a      	cmp	sl, r3
    6dae:	d107      	bne.n	6dc0 <nrfx_gpiote_irq_handler+0xcc>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    6db0:	2100      	movs	r1, #0
    6db2:	4620      	mov	r0, r4
    6db4:	f004 f80c 	bl	add0 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    6db8:	4651      	mov	r1, sl
    6dba:	4620      	mov	r0, r4
    6dbc:	f004 f808 	bl	add0 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    6dc0:	fa08 f404 	lsl.w	r4, r8, r4
    6dc4:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    6dc8:	e7b8      	b.n	6d3c <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6dca:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    6dcc:	bf0c      	ite	eq
    6dce:	2103      	moveq	r1, #3
    6dd0:	2102      	movne	r1, #2
    6dd2:	4620      	mov	r0, r4
    6dd4:	f003 fffc 	bl	add0 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    6dd8:	f1ba 0f03 	cmp.w	sl, #3
    6ddc:	d004      	beq.n	6de8 <nrfx_gpiote_irq_handler+0xf4>
    6dde:	2a02      	cmp	r2, #2
    6de0:	d107      	bne.n	6df2 <nrfx_gpiote_irq_handler+0xfe>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6de2:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    6de6:	d1eb      	bne.n	6dc0 <nrfx_gpiote_irq_handler+0xcc>
            call_handler(pin, trigger);
    6de8:	4659      	mov	r1, fp
    6dea:	4620      	mov	r0, r4
    6dec:	f7ff fd14 	bl	6818 <call_handler>
    6df0:	e7e6      	b.n	6dc0 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    6df2:	2a03      	cmp	r2, #3
    6df4:	d1e4      	bne.n	6dc0 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    6df6:	f1ba 0f02 	cmp.w	sl, #2
    6dfa:	e7f4      	b.n	6de6 <nrfx_gpiote_irq_handler+0xf2>
        uint32_t ch = NRF_CTZ(mask);
    6dfc:	fa95 f3a5 	rbit	r3, r5
    6e00:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    6e04:	fa04 f203 	lsl.w	r2, r4, r3
    6e08:	009b      	lsls	r3, r3, #2
    6e0a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6e0e:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    6e12:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    6e16:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    6e1a:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    6e1e:	f3c0 2004 	ubfx	r0, r0, #8, #5
    6e22:	f3c1 4101 	ubfx	r1, r1, #16, #2
    6e26:	f7ff fcf7 	bl	6818 <call_handler>
    while (mask)
    6e2a:	2d00      	cmp	r5, #0
    6e2c:	d1e6      	bne.n	6dfc <nrfx_gpiote_irq_handler+0x108>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    6e2e:	b003      	add	sp, #12
    6e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6e34:	40006100 	.word	0x40006100
    6e38:	40006000 	.word	0x40006000
    6e3c:	40006120 	.word	0x40006120
    6e40:	20000094 	.word	0x20000094

00006e44 <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    6e44:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    6e46:	4c0b      	ldr	r4, [pc, #44]	; (6e74 <nrfx_power_init+0x30>)
{
    6e48:	4603      	mov	r3, r0
    if (m_initialized)
    6e4a:	7820      	ldrb	r0, [r4, #0]
    6e4c:	b978      	cbnz	r0, 6e6e <nrfx_power_init+0x2a>
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
    6e4e:	781b      	ldrb	r3, [r3, #0]
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    6e50:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6e54:	f003 0301 	and.w	r3, r3, #1
    6e58:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6e5c:	f7fb fe58 	bl	2b10 <arch_irq_is_enabled>
    6e60:	b908      	cbnz	r0, 6e66 <nrfx_power_init+0x22>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6e62:	f7fb fe31 	bl	2ac8 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    6e66:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    6e68:	4803      	ldr	r0, [pc, #12]	; (6e78 <nrfx_power_init+0x34>)
    m_initialized = true;
    6e6a:	7023      	strb	r3, [r4, #0]
}
    6e6c:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    6e6e:	4803      	ldr	r0, [pc, #12]	; (6e7c <nrfx_power_init+0x38>)
    6e70:	e7fc      	b.n	6e6c <nrfx_power_init+0x28>
    6e72:	bf00      	nop
    6e74:	20001970 	.word	0x20001970
    6e78:	0bad0000 	.word	0x0bad0000
    6e7c:	0bad000c 	.word	0x0bad000c

00006e80 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    6e80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6e84:	f44f 7260 	mov.w	r2, #896	; 0x380
    6e88:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    6e8c:	4b01      	ldr	r3, [pc, #4]	; (6e94 <nrfx_power_usbevt_uninit+0x14>)
    6e8e:	2200      	movs	r2, #0
    6e90:	601a      	str	r2, [r3, #0]
}
    6e92:	4770      	bx	lr
    6e94:	200015f0 	.word	0x200015f0

00006e98 <nrfx_power_usbevt_init>:
{
    6e98:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    6e9a:	f7ff fff1 	bl	6e80 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    6e9e:	6803      	ldr	r3, [r0, #0]
    6ea0:	b10b      	cbz	r3, 6ea6 <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    6ea2:	4a01      	ldr	r2, [pc, #4]	; (6ea8 <nrfx_power_usbevt_init+0x10>)
    6ea4:	6013      	str	r3, [r2, #0]
}
    6ea6:	bd08      	pop	{r3, pc}
    6ea8:	200015f0 	.word	0x200015f0

00006eac <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
    6eac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    6eb0:	b510      	push	{r4, lr}
    6eb2:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    6eb6:	0762      	lsls	r2, r4, #29
    6eb8:	d507      	bpl.n	6eca <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    6eba:	f44f 7084 	mov.w	r0, #264	; 0x108
    6ebe:	f003 ff95 	bl	adec <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    6ec2:	b110      	cbz	r0, 6eca <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    6ec4:	4b1e      	ldr	r3, [pc, #120]	; (6f40 <nrfx_power_irq_handler+0x94>)
    6ec6:	681b      	ldr	r3, [r3, #0]
    6ec8:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    6eca:	06a3      	lsls	r3, r4, #26
    6ecc:	d508      	bpl.n	6ee0 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    6ece:	f44f 708a 	mov.w	r0, #276	; 0x114
    6ed2:	f003 ff8b 	bl	adec <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    6ed6:	b118      	cbz	r0, 6ee0 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    6ed8:	4b1a      	ldr	r3, [pc, #104]	; (6f44 <nrfx_power_irq_handler+0x98>)
    6eda:	2000      	movs	r0, #0
    6edc:	681b      	ldr	r3, [r3, #0]
    6ede:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    6ee0:	0660      	lsls	r0, r4, #25
    6ee2:	d508      	bpl.n	6ef6 <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    6ee4:	f44f 708c 	mov.w	r0, #280	; 0x118
    6ee8:	f003 ff80 	bl	adec <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    6eec:	b118      	cbz	r0, 6ef6 <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    6eee:	4b15      	ldr	r3, [pc, #84]	; (6f44 <nrfx_power_irq_handler+0x98>)
    6ef0:	2001      	movs	r0, #1
    6ef2:	681b      	ldr	r3, [r3, #0]
    6ef4:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    6ef6:	0621      	lsls	r1, r4, #24
    6ef8:	d508      	bpl.n	6f0c <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    6efa:	f44f 708e 	mov.w	r0, #284	; 0x11c
    6efe:	f003 ff75 	bl	adec <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    6f02:	b118      	cbz	r0, 6f0c <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    6f04:	4b10      	ldr	r3, [pc, #64]	; (6f48 <nrfx_power_irq_handler+0x9c>)
    6f06:	2000      	movs	r0, #0
    6f08:	681b      	ldr	r3, [r3, #0]
    6f0a:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    6f0c:	05e2      	lsls	r2, r4, #23
    6f0e:	d508      	bpl.n	6f22 <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    6f10:	f44f 7090 	mov.w	r0, #288	; 0x120
    6f14:	f003 ff6a 	bl	adec <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    6f18:	b118      	cbz	r0, 6f22 <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    6f1a:	4b0b      	ldr	r3, [pc, #44]	; (6f48 <nrfx_power_irq_handler+0x9c>)
    6f1c:	2001      	movs	r0, #1
    6f1e:	681b      	ldr	r3, [r3, #0]
    6f20:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    6f22:	05a3      	lsls	r3, r4, #22
    6f24:	d50a      	bpl.n	6f3c <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    6f26:	f44f 7092 	mov.w	r0, #292	; 0x124
    6f2a:	f003 ff5f 	bl	adec <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    6f2e:	b128      	cbz	r0, 6f3c <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    6f30:	4b05      	ldr	r3, [pc, #20]	; (6f48 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    6f32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    6f36:	681b      	ldr	r3, [r3, #0]
    6f38:	2002      	movs	r0, #2
    6f3a:	4718      	bx	r3
}
    6f3c:	bd10      	pop	{r4, pc}
    6f3e:	bf00      	nop
    6f40:	200015e8 	.word	0x200015e8
    6f44:	200015ec 	.word	0x200015ec
    6f48:	200015f0 	.word	0x200015f0

00006f4c <nrfx_qdec_irq_handler>:
static nrfx_qdec_event_handler_t m_qdec_event_handler = NULL;
static nrfx_drv_state_t m_state = NRFX_DRV_STATE_UNINITIALIZED;
static bool m_skip_gpio_cfg;

void nrfx_qdec_irq_handler(void)
{
    6f4c:	b513      	push	{r0, r1, r4, lr}
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_qdec_event_check(NRF_QDEC_Type const * p_reg, nrf_qdec_event_t event)
{
    return (bool)*(volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event);
    6f4e:	4c2a      	ldr	r4, [pc, #168]	; (6ff8 <nrfx_qdec_irq_handler+0xac>)
    6f50:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    nrfx_qdec_event_t event;
    if ( nrf_qdec_event_check(NRF_QDEC, NRF_QDEC_EVENT_SAMPLERDY) &&
    6f54:	b1b3      	cbz	r3, 6f84 <nrfx_qdec_irq_handler+0x38>
    return p_reg->INTENSET & mask; // when read this register will return the value of INTEN.
    6f56:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    6f5a:	07d9      	lsls	r1, r3, #31
    6f5c:	d512      	bpl.n	6f84 <nrfx_qdec_irq_handler+0x38>
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event) ) = 0;
    6f5e:	2300      	movs	r3, #0
    6f60:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    6f64:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
         nrf_qdec_int_enable_check(NRF_QDEC, NRF_QDEC_INT_SAMPLERDY_MASK) )
    {
        nrf_qdec_event_clear(NRF_QDEC, NRF_QDEC_EVENT_SAMPLERDY);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_QDEC_EVENT_SAMPLERDY));

        event.type = NRF_QDEC_EVENT_SAMPLERDY;
    6f68:	f44f 7380 	mov.w	r3, #256	; 0x100
    6f6c:	f8ad 3000 	strh.w	r3, [sp]
    return (nrf_qdec_sampleper_t)(p_reg->SAMPLEPER);
}

NRF_STATIC_INLINE int32_t nrf_qdec_sample_get(NRF_QDEC_Type const * p_reg)
{
    return p_reg->SAMPLE;
    6f70:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
        event.data.sample.value = (int8_t)nrf_qdec_sample_get(NRF_QDEC);
    6f74:	f88d 3002 	strb.w	r3, [sp, #2]
        m_qdec_event_handler(event);
    6f78:	4b20      	ldr	r3, [pc, #128]	; (6ffc <nrfx_qdec_irq_handler+0xb0>)
    6f7a:	aa02      	add	r2, sp, #8
    6f7c:	e912 0003 	ldmdb	r2, {r0, r1}
    6f80:	681b      	ldr	r3, [r3, #0]
    6f82:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event);
    6f84:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    }

    if ( nrf_qdec_event_check(NRF_QDEC, NRF_QDEC_EVENT_REPORTRDY) &&
    6f88:	b1d3      	cbz	r3, 6fc0 <nrfx_qdec_irq_handler+0x74>
    return p_reg->INTENSET & mask; // when read this register will return the value of INTEN.
    6f8a:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    6f8e:	079a      	lsls	r2, r3, #30
    6f90:	d516      	bpl.n	6fc0 <nrfx_qdec_irq_handler+0x74>
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event) ) = 0;
    6f92:	2300      	movs	r3, #0
    6f94:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    6f98:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
         nrf_qdec_int_enable_check(NRF_QDEC, NRF_QDEC_INT_REPORTRDY_MASK) )
    {
        nrf_qdec_event_clear(NRF_QDEC, NRF_QDEC_EVENT_REPORTRDY);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_QDEC_EVENT_REPORTRDY));

        event.type = NRF_QDEC_EVENT_REPORTRDY;
    6f9c:	f44f 7382 	mov.w	r3, #260	; 0x104
    6fa0:	f8ad 3000 	strh.w	r3, [sp]
    return p_reg->ACC;
}

NRF_STATIC_INLINE int32_t nrf_qdec_accread_get(NRF_QDEC_Type const * p_reg)
{
    return p_reg->ACCREAD;
    6fa4:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518

        event.data.report.acc    = (int16_t)nrf_qdec_accread_get(NRF_QDEC);
    6fa8:	f8ad 3002 	strh.w	r3, [sp, #2]
    return p_reg->ACCDBL;
}

NRF_STATIC_INLINE uint32_t nrf_qdec_accdblread_get(NRF_QDEC_Type const * p_reg)
{
    return p_reg->ACCDBLREAD;
    6fac:	f8d4 3548 	ldr.w	r3, [r4, #1352]	; 0x548
        event.data.report.accdbl = (uint16_t)nrf_qdec_accdblread_get(NRF_QDEC);
    6fb0:	f8ad 3004 	strh.w	r3, [sp, #4]
        m_qdec_event_handler(event);
    6fb4:	4b11      	ldr	r3, [pc, #68]	; (6ffc <nrfx_qdec_irq_handler+0xb0>)
    6fb6:	aa02      	add	r2, sp, #8
    6fb8:	e912 0003 	ldmdb	r2, {r0, r1}
    6fbc:	681b      	ldr	r3, [r3, #0]
    6fbe:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event);
    6fc0:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    }

    if ( nrf_qdec_event_check(NRF_QDEC, NRF_QDEC_EVENT_ACCOF) &&
    6fc4:	b1ab      	cbz	r3, 6ff2 <nrfx_qdec_irq_handler+0xa6>
    return p_reg->INTENSET & mask; // when read this register will return the value of INTEN.
    6fc6:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    6fca:	075b      	lsls	r3, r3, #29
    6fcc:	d511      	bpl.n	6ff2 <nrfx_qdec_irq_handler+0xa6>
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event) ) = 0;
    6fce:	2300      	movs	r3, #0
    6fd0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    6fd4:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
         nrf_qdec_int_enable_check(NRF_QDEC, NRF_QDEC_INT_ACCOF_MASK) )
    {
        nrf_qdec_event_clear(NRF_QDEC, NRF_QDEC_EVENT_ACCOF);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_QDEC_EVENT_ACCOF));

        event.type = NRF_QDEC_EVENT_ACCOF;
    6fd8:	f44f 7384 	mov.w	r3, #264	; 0x108
    6fdc:	f8ad 3000 	strh.w	r3, [sp]
        m_qdec_event_handler(event);
    6fe0:	aa02      	add	r2, sp, #8
    6fe2:	4b06      	ldr	r3, [pc, #24]	; (6ffc <nrfx_qdec_irq_handler+0xb0>)
    6fe4:	e912 0003 	ldmdb	r2, {r0, r1}
    6fe8:	681b      	ldr	r3, [r3, #0]
    }
}
    6fea:	b002      	add	sp, #8
    6fec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_qdec_event_handler(event);
    6ff0:	4718      	bx	r3
}
    6ff2:	b002      	add	sp, #8
    6ff4:	bd10      	pop	{r4, pc}
    6ff6:	bf00      	nop
    6ff8:	40012000 	.word	0x40012000
    6ffc:	200015f4 	.word	0x200015f4

00007000 <nrfx_qdec_init>:


nrfx_err_t nrfx_qdec_init(nrfx_qdec_config_t const * p_config,
                          nrfx_qdec_event_handler_t  event_handler)
{
    7000:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(event_handler);
    nrfx_err_t err_code;

    if (m_state != NRFX_DRV_STATE_UNINITIALIZED)
    7002:	4c2f      	ldr	r4, [pc, #188]	; (70c0 <nrfx_qdec_init+0xc0>)
    7004:	7823      	ldrb	r3, [r4, #0]
    7006:	2b00      	cmp	r3, #0
    7008:	d157      	bne.n	70ba <nrfx_qdec_init+0xba>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    m_qdec_event_handler = event_handler;
    700a:	4b2e      	ldr	r3, [pc, #184]	; (70c4 <nrfx_qdec_init+0xc4>)
    m_skip_gpio_cfg = p_config->skip_gpio_cfg;
    700c:	7e02      	ldrb	r2, [r0, #24]
    m_qdec_event_handler = event_handler;
    700e:	6019      	str	r1, [r3, #0]
    m_skip_gpio_cfg = p_config->skip_gpio_cfg;
    7010:	4b2d      	ldr	r3, [pc, #180]	; (70c8 <nrfx_qdec_init+0xc8>)
    7012:	701a      	strb	r2, [r3, #0]

    if (!p_config->skip_gpio_cfg)
    7014:	b9c2      	cbnz	r2, 7048 <nrfx_qdec_init+0x48>
    *p_pin = pin_number & 0x1F;
    7016:	6843      	ldr	r3, [r0, #4]
    7018:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    701c:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7020:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7024:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
    7028:	6883      	ldr	r3, [r0, #8]
    702a:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    702e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    {
        nrf_gpio_cfg_input(p_config->psela, NRF_GPIO_PIN_NOPULL);
        nrf_gpio_cfg_input(p_config->pselb, NRF_GPIO_PIN_NOPULL);
        if (p_config->pselled != NRF_QDEC_LED_NOT_CONNECTED)
    7036:	68c3      	ldr	r3, [r0, #12]
    7038:	1c5d      	adds	r5, r3, #1
    *p_pin = pin_number & 0x1F;
    703a:	bf1e      	ittt	ne
    703c:	f003 031f 	andne.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    7040:	f503 73e0 	addne.w	r3, r3, #448	; 0x1c0
    7044:	f841 2023 	strne.w	r2, [r1, r3, lsl #2]
        {
            nrf_gpio_cfg_input(p_config->pselled, NRF_GPIO_PIN_NOPULL);
        }
    }
    if (!p_config->skip_psel_cfg)
    7048:	7e42      	ldrb	r2, [r0, #25]
    704a:	4b20      	ldr	r3, [pc, #128]	; (70cc <nrfx_qdec_init+0xcc>)
    704c:	b942      	cbnz	r2, 7060 <nrfx_qdec_init+0x60>
    {
        nrf_qdec_pins_set(NRF_QDEC, p_config->psela, p_config->pselb, p_config->pselled);
    704e:	e9d0 5101 	ldrd	r5, r1, [r0, #4]
    7052:	68c2      	ldr	r2, [r0, #12]
    p_reg->PSEL.A = phase_a_pin;
    7054:	f8c3 5520 	str.w	r5, [r3, #1312]	; 0x520
    p_reg->PSEL.B = phase_b_pin;
    7058:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
    p_reg->PSEL.LED = led_pin;
    705c:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->SAMPLEPER = sampleper;
    7060:	7842      	ldrb	r2, [r0, #1]
    7062:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    return p_reg->PSEL.LED;
    7066:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    }

    nrf_qdec_sampleper_set(NRF_QDEC, p_config->sampleper);
    // Change the period and polarity of the LED only when it is used,
    // otherwise the ledpre field might have an invalid value.
    if (nrf_qdec_led_pin_get(NRF_QDEC) != NRF_QDEC_LED_NOT_CONNECTED)
    706a:	3201      	adds	r2, #1
    {
        nrf_qdec_ledpre_set(NRF_QDEC, p_config->ledpre);
    706c:	bf1f      	itttt	ne
    706e:	6902      	ldrne	r2, [r0, #16]
}

NRF_STATIC_INLINE void nrf_qdec_ledpre_set(NRF_QDEC_Type * p_reg, uint32_t time_us)
{
    p_reg->LEDPRE = time_us;
    7070:	f8c3 2540 	strne.w	r2, [r3, #1344]	; 0x540
    return (reportper == NRF_QDEC_REPORTPER_10) ? 10 : reportper * 40;
}

NRF_STATIC_INLINE void nrf_qdec_ledpol_set(NRF_QDEC_Type * p_reg, nrf_qdec_ledpol_t pol)
{
    p_reg->LEDPOL = pol;
    7074:	7d02      	ldrbne	r2, [r0, #20]
    7076:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
        nrf_qdec_ledpol_set(NRF_QDEC, p_config->ledpol);
    }

    if (p_config->dbfen)
    707a:	7d42      	ldrb	r2, [r0, #21]
    707c:	b102      	cbz	r2, 7080 <nrfx_qdec_init+0x80>
    p_reg->DBFEN = NRF_QDEC_DBFEN_ENABLE;
    707e:	2201      	movs	r2, #1
    p_reg->DBFEN = NRF_QDEC_DBFEN_DISABLE;
    7080:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
        nrf_qdec_dbfen_disable(NRF_QDEC);
    }

    uint32_t int_mask = NRF_QDEC_INT_ACCOF_MASK;

    if (p_config->reportper != NRF_QDEC_REPORTPER_DISABLED)
    7084:	7801      	ldrb	r1, [r0, #0]
    7086:	2910      	cmp	r1, #16
    p_reg->SHORTS |= mask;
    7088:	bf1f      	itttt	ne
    708a:	f8d3 2200 	ldrne.w	r2, [r3, #512]	; 0x200
    708e:	f042 0201 	orrne.w	r2, r2, #1
    7092:	f8c3 2200 	strne.w	r2, [r3, #512]	; 0x200
    p_reg->REPORTPER = reportper;
    7096:	f8c3 1510 	strne.w	r1, [r3, #1296]	; 0x510
        nrf_qdec_shorts_enable(NRF_QDEC, NRF_QDEC_SHORT_REPORTRDY_READCLRACC_MASK);
        nrf_qdec_reportper_set(NRF_QDEC, p_config->reportper);
        int_mask |= NRF_QDEC_INT_REPORTRDY_MASK;
    }

    if (p_config->sample_inten)
    709a:	7d81      	ldrb	r1, [r0, #22]
        int_mask |= NRF_QDEC_INT_REPORTRDY_MASK;
    709c:	bf14      	ite	ne
    709e:	2206      	movne	r2, #6
    uint32_t int_mask = NRF_QDEC_INT_ACCOF_MASK;
    70a0:	2204      	moveq	r2, #4
    if (p_config->sample_inten)
    70a2:	b109      	cbz	r1, 70a8 <nrfx_qdec_init+0xa8>
    {
        int_mask |= NRF_QDEC_INT_SAMPLERDY_MASK;
    70a4:	f042 0201 	orr.w	r2, r2, #1
    p_reg->INTENSET = mask; // writing 0 has no effect
    70a8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    }

    nrf_qdec_int_enable(NRF_QDEC, int_mask);
    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_QDEC), p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_QDEC));
    70ac:	2012      	movs	r0, #18
    70ae:	f7fb fd0b 	bl	2ac8 <arch_irq_enable>

    m_state = NRFX_DRV_STATE_INITIALIZED;
    70b2:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    70b4:	4806      	ldr	r0, [pc, #24]	; (70d0 <nrfx_qdec_init+0xd0>)
    m_state = NRFX_DRV_STATE_INITIALIZED;
    70b6:	7023      	strb	r3, [r4, #0]
}
    70b8:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    70ba:	4806      	ldr	r0, [pc, #24]	; (70d4 <nrfx_qdec_init+0xd4>)
    70bc:	e7fc      	b.n	70b8 <nrfx_qdec_init+0xb8>
    70be:	bf00      	nop
    70c0:	20001972 	.word	0x20001972
    70c4:	200015f4 	.word	0x200015f4
    70c8:	20001971 	.word	0x20001971
    70cc:	40012000 	.word	0x40012000
    70d0:	0bad0000 	.word	0x0bad0000
    70d4:	0bad0005 	.word	0x0bad0005

000070d8 <nrfx_qdec_enable>:
    p_reg->ENABLE = NRF_QDEC_ENABLE;
    70d8:	4b04      	ldr	r3, [pc, #16]	; (70ec <nrfx_qdec_enable+0x14>)
    70da:	2201      	movs	r2, #1
    70dc:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)task) ) = 1;
    70e0:	601a      	str	r2, [r3, #0]
void nrfx_qdec_enable(void)
{
    NRFX_ASSERT(m_state == NRFX_DRV_STATE_INITIALIZED);
    nrf_qdec_enable(NRF_QDEC);
    nrf_qdec_task_trigger(NRF_QDEC, NRF_QDEC_TASK_START);
    m_state = NRFX_DRV_STATE_POWERED_ON;
    70e2:	4b03      	ldr	r3, [pc, #12]	; (70f0 <nrfx_qdec_enable+0x18>)
    70e4:	2202      	movs	r2, #2
    70e6:	701a      	strb	r2, [r3, #0]
    NRFX_LOG_INFO("Enabled.");
}
    70e8:	4770      	bx	lr
    70ea:	bf00      	nop
    70ec:	40012000 	.word	0x40012000
    70f0:	20001972 	.word	0x20001972

000070f4 <nrfx_qdec_accumulators_read>:
    70f4:	4b04      	ldr	r3, [pc, #16]	; (7108 <nrfx_qdec_accumulators_read+0x14>)
    70f6:	2201      	movs	r2, #1
    70f8:	609a      	str	r2, [r3, #8]
    return p_reg->ACCREAD;
    70fa:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    return p_reg->ACCDBLREAD;
    70fe:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
void nrfx_qdec_accumulators_read(int16_t * p_acc, int16_t * p_accdbl)
{
    NRFX_ASSERT(m_state == NRFX_DRV_STATE_POWERED_ON);
    nrf_qdec_task_trigger(NRF_QDEC, NRF_QDEC_TASK_READCLRACC);

    *p_acc    = (int16_t)nrf_qdec_accread_get(NRF_QDEC);
    7102:	8002      	strh	r2, [r0, #0]
    *p_accdbl = (int16_t)nrf_qdec_accdblread_get(NRF_QDEC);
    7104:	800b      	strh	r3, [r1, #0]

    NRFX_LOG_DEBUG("Accumulators data, ACC register:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_acc, sizeof(p_acc[0]));
    NRFX_LOG_DEBUG("Accumulators data, ACCDBL register:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_accdbl, sizeof(p_accdbl[0]));
}
    7106:	4770      	bx	lr
    7108:	40012000 	.word	0x40012000

0000710c <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    710c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7110:	4606      	mov	r6, r0
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    7112:	4d4f      	ldr	r5, [pc, #316]	; (7250 <nrfx_spim_init+0x144>)
{
    7114:	460c      	mov	r4, r1
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    7116:	7931      	ldrb	r1, [r6, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    7118:	014f      	lsls	r7, r1, #5
    711a:	eb05 1141 	add.w	r1, r5, r1, lsl #5
{
    711e:	4610      	mov	r0, r2
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    7120:	7f0a      	ldrb	r2, [r1, #28]
    7122:	2a00      	cmp	r2, #0
    7124:	f040 8092 	bne.w	724c <nrfx_spim_init+0x140>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    7128:	6832      	ldr	r2, [r6, #0]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    712a:	51e8      	str	r0, [r5, r7]
    p_cb->p_context = p_context;
    712c:	604b      	str	r3, [r1, #4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    712e:	7be0      	ldrb	r0, [r4, #15]
    7130:	7f8b      	ldrb	r3, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
    7132:	f894 c004 	ldrb.w	ip, [r4, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    7136:	f360 0300 	bfi	r3, r0, #0, #1
    p_cb->ss_active_high = p_config->ss_active_high;
    713a:	f36c 0341 	bfi	r3, ip, #1, #1
    713e:	778b      	strb	r3, [r1, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
#endif
    p_cb->ss_pin = p_config->ss_pin;
    7140:	78e3      	ldrb	r3, [r4, #3]
    7142:	77cb      	strb	r3, [r1, #31]

    configure_pins(p_instance, p_config);
    7144:	f8d6 8000 	ldr.w	r8, [r6]
    if (!p_config->skip_gpio_cfg)
    7148:	2800      	cmp	r0, #0
    714a:	d13d      	bne.n	71c8 <nrfx_spim_init+0xbc>
        nrf_gpio_pin_write(p_config->sck_pin,
    714c:	7b21      	ldrb	r1, [r4, #12]
    714e:	7820      	ldrb	r0, [r4, #0]
    7150:	2901      	cmp	r1, #1
    7152:	bf94      	ite	ls
    7154:	2100      	movls	r1, #0
    7156:	2101      	movhi	r1, #1
    7158:	f003 fe75 	bl	ae46 <nrf_gpio_pin_write>
    *p_pin = pin_number & 0x1F;
    715c:	7823      	ldrb	r3, [r4, #0]
    715e:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    7162:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7166:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    716a:	2101      	movs	r1, #1
    716c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    7170:	7863      	ldrb	r3, [r4, #1]
    7172:	2bff      	cmp	r3, #255	; 0xff
    7174:	d009      	beq.n	718a <nrfx_spim_init+0x7e>
    *p_pin = pin_number & 0x1F;
    7176:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    717a:	4099      	lsls	r1, r3
    reg->PIN_CNF[pin_number] = cnf;
    717c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    p_reg->OUTCLR = clr_mask;
    7180:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = cnf;
    7184:	2103      	movs	r1, #3
    7186:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    718a:	78a3      	ldrb	r3, [r4, #2]
    718c:	2bff      	cmp	r3, #255	; 0xff
    718e:	d009      	beq.n	71a4 <nrfx_spim_init+0x98>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7190:	7ba1      	ldrb	r1, [r4, #14]
    *p_pin = pin_number & 0x1F;
    7192:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    7196:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    719a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    719e:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    71a0:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    71a4:	78e0      	ldrb	r0, [r4, #3]
    71a6:	28ff      	cmp	r0, #255	; 0xff
    71a8:	d00e      	beq.n	71c8 <nrfx_spim_init+0xbc>
                               p_config->ss_active_high ? 0 : 1);
    71aa:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
    71ac:	f081 0101 	eor.w	r1, r1, #1
    71b0:	f003 fe49 	bl	ae46 <nrf_gpio_pin_write>
    *p_pin = pin_number & 0x1F;
    71b4:	78e3      	ldrb	r3, [r4, #3]
    71b6:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    71ba:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    71be:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    71c2:	2003      	movs	r0, #3
    71c4:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    71c8:	7c23      	ldrb	r3, [r4, #16]
    71ca:	b993      	cbnz	r3, 71f2 <nrfx_spim_init+0xe6>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    71cc:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    71ce:	7820      	ldrb	r0, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    71d0:	2bff      	cmp	r3, #255	; 0xff
    71d2:	bf18      	it	ne
    71d4:	4619      	movne	r1, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    71d6:	78a3      	ldrb	r3, [r4, #2]
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
    71d8:	f8c8 0508 	str.w	r0, [r8, #1288]	; 0x508
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    71dc:	bf08      	it	eq
    71de:	f04f 31ff 	moveq.w	r1, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    71e2:	2bff      	cmp	r3, #255	; 0xff
    71e4:	bf08      	it	eq
    71e6:	f04f 33ff 	moveq.w	r3, #4294967295
    p_reg->PSEL.MOSI = mosi_pin;
    71ea:	f8c8 150c 	str.w	r1, [r8, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    71ee:	f8c8 3510 	str.w	r3, [r8, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    71f2:	68a3      	ldr	r3, [r4, #8]
    71f4:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    71f8:	7b63      	ldrb	r3, [r4, #13]
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    71fa:	7b21      	ldrb	r1, [r4, #12]
    71fc:	3b00      	subs	r3, #0
    71fe:	bf18      	it	ne
    7200:	2301      	movne	r3, #1
    switch (spi_mode)
    7202:	2902      	cmp	r1, #2
    7204:	d01c      	beq.n	7240 <nrfx_spim_init+0x134>
    7206:	2903      	cmp	r1, #3
    7208:	d01d      	beq.n	7246 <nrfx_spim_init+0x13a>
    720a:	2901      	cmp	r1, #1
    720c:	d101      	bne.n	7212 <nrfx_spim_init+0x106>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    720e:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    7212:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    7216:	79a3      	ldrb	r3, [r4, #6]
    7218:	f8c2 35c0 	str.w	r3, [r2, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    721c:	2307      	movs	r3, #7
    721e:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    7222:	59eb      	ldr	r3, [r5, r7]
    7224:	b123      	cbz	r3, 7230 <nrfx_spim_init+0x124>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    7226:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    7228:	f340 3007 	sbfx	r0, r0, #12, #8
    722c:	f7fb fc4c 	bl	2ac8 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    7230:	443d      	add	r5, r7
    7232:	2300      	movs	r3, #0
    7234:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    7236:	4807      	ldr	r0, [pc, #28]	; (7254 <nrfx_spim_init+0x148>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    7238:	2301      	movs	r3, #1
    723a:	772b      	strb	r3, [r5, #28]
}
    723c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    7240:	f043 0304 	orr.w	r3, r3, #4
        break;
    7244:	e7e5      	b.n	7212 <nrfx_spim_init+0x106>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    7246:	f043 0306 	orr.w	r3, r3, #6
        break;
    724a:	e7e2      	b.n	7212 <nrfx_spim_init+0x106>
        return err_code;
    724c:	4802      	ldr	r0, [pc, #8]	; (7258 <nrfx_spim_init+0x14c>)
    724e:	e7f5      	b.n	723c <nrfx_spim_init+0x130>
    7250:	200015f8 	.word	0x200015f8
    7254:	0bad0000 	.word	0x0bad0000
    7258:	0bad0005 	.word	0x0bad0005

0000725c <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
    725c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    725e:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
    7260:	4d20      	ldr	r5, [pc, #128]	; (72e4 <nrfx_spim_uninit+0x88>)
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
    7262:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
    7264:	015e      	lsls	r6, r3, #5
    7266:	eb05 1743 	add.w	r7, r5, r3, lsl #5
    726a:	59ab      	ldr	r3, [r5, r6]
    726c:	b1b3      	cbz	r3, 729c <nrfx_spim_uninit+0x40>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    726e:	f344 3007 	sbfx	r0, r4, #12, #8
    7272:	f7fb fc39 	bl	2ae8 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    7276:	4b1c      	ldr	r3, [pc, #112]	; (72e8 <nrfx_spim_uninit+0x8c>)
    7278:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
    727c:	7f7b      	ldrb	r3, [r7, #29]
    727e:	b16b      	cbz	r3, 729c <nrfx_spim_uninit+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7280:	2301      	movs	r3, #1
    7282:	6163      	str	r3, [r4, #20]
    7284:	2764      	movs	r7, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7286:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
    728a:	b923      	cbnz	r3, 7296 <nrfx_spim_uninit+0x3a>
    728c:	2001      	movs	r0, #1
    728e:	f003 fd18 	bl	acc2 <nrfx_busy_wait>
    7292:	3f01      	subs	r7, #1
    7294:	d1f7      	bne.n	7286 <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
    7296:	19ab      	adds	r3, r5, r6
    7298:	2200      	movs	r2, #0
    729a:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
    729c:	2300      	movs	r3, #0
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
    729e:	19a9      	adds	r1, r5, r6
    72a0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    72a4:	7f8b      	ldrb	r3, [r1, #30]
    72a6:	07db      	lsls	r3, r3, #31
    72a8:	d417      	bmi.n	72da <nrfx_spim_uninit+0x7e>
    return p_reg->PSEL.SCK;
    72aa:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
    72ae:	f003 fdbe 	bl	ae2e <spim_pin_uninit>
    return p_reg->PSEL.MISO;
    72b2:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
    72b6:	f003 fdba 	bl	ae2e <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
    72ba:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
    72be:	f003 fdb6 	bl	ae2e <spim_pin_uninit>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    72c2:	7fcb      	ldrb	r3, [r1, #31]
    72c4:	2bff      	cmp	r3, #255	; 0xff
    72c6:	d008      	beq.n	72da <nrfx_spim_uninit+0x7e>
    *p_pin = pin_number & 0x1F;
    72c8:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    72cc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    72d0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    72d4:	2102      	movs	r1, #2
    72d6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    72da:	4435      	add	r5, r6
    72dc:	2300      	movs	r3, #0
    72de:	772b      	strb	r3, [r5, #28]
}
    72e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    72e2:	bf00      	nop
    72e4:	200015f8 	.word	0x200015f8
    72e8:	00080152 	.word	0x00080152

000072ec <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    72ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    72f0:	4f36      	ldr	r7, [pc, #216]	; (73cc <nrfx_spim_xfer+0xe0>)
    72f2:	7903      	ldrb	r3, [r0, #4]
    72f4:	eb07 1843 	add.w	r8, r7, r3, lsl #5
{
    72f8:	4614      	mov	r4, r2
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    72fa:	f898 201d 	ldrb.w	r2, [r8, #29]
{
    72fe:	4681      	mov	r9, r0
    7300:	460d      	mov	r5, r1
    if (p_cb->transfer_in_progress)
    7302:	015e      	lsls	r6, r3, #5
    7304:	2a00      	cmp	r2, #0
    7306:	d15f      	bne.n	73c8 <nrfx_spim_xfer+0xdc>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    7308:	59ba      	ldr	r2, [r7, r6]
    730a:	b12a      	cbz	r2, 7318 <nrfx_spim_xfer+0x2c>
    730c:	f014 0f14 	tst.w	r4, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    7310:	bf04      	itt	eq
    7312:	2201      	moveq	r2, #1
    7314:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    7318:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    731c:	eb07 0c06 	add.w	ip, r7, r6
    7320:	f10c 0c0c 	add.w	ip, ip, #12
    7324:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
    7328:	2101      	movs	r1, #1
    732a:	4640      	mov	r0, r8
    732c:	f003 fd98 	bl	ae60 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    7330:	6829      	ldr	r1, [r5, #0]
    7332:	b121      	cbz	r1, 733e <nrfx_spim_xfer+0x52>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    7334:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
    7338:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    733c:	d106      	bne.n	734c <nrfx_spim_xfer+0x60>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    733e:	68aa      	ldr	r2, [r5, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    7340:	b152      	cbz	r2, 7358 <nrfx_spim_xfer+0x6c>
    7342:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    7346:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    734a:	d005      	beq.n	7358 <nrfx_spim_xfer+0x6c>
        p_cb->transfer_in_progress = false;
    734c:	443e      	add	r6, r7
    734e:	2300      	movs	r3, #0
        return err_code;
    7350:	481f      	ldr	r0, [pc, #124]	; (73d0 <nrfx_spim_xfer+0xe4>)
        p_cb->transfer_in_progress = false;
    7352:	7773      	strb	r3, [r6, #29]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
    7354:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    7358:	f8d9 3000 	ldr.w	r3, [r9]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    735c:	6868      	ldr	r0, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    735e:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
    7362:	68e9      	ldr	r1, [r5, #12]
    p_reg->TXD.MAXCNT = length;
    7364:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    7368:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    736c:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
    736e:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7372:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    7376:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    737a:	f014 0201 	ands.w	r2, r4, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    737e:	bf18      	it	ne
    7380:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    7382:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    7386:	f014 0202 	ands.w	r2, r4, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    738a:	bf18      	it	ne
    738c:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    738e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    7392:	f014 0208 	ands.w	r2, r4, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    7396:	bf04      	itt	eq
    7398:	2101      	moveq	r1, #1
    739a:	6119      	streq	r1, [r3, #16]
    if (!p_cb->handler)
    739c:	59b9      	ldr	r1, [r7, r6]
    739e:	b949      	cbnz	r1, 73b4 <nrfx_spim_xfer+0xc8>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    73a0:	b912      	cbnz	r2, 73a8 <nrfx_spim_xfer+0xbc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    73a2:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    73a6:	e7fb      	b.n	73a0 <nrfx_spim_xfer+0xb4>
        set_ss_pin_state(p_cb, false);
    73a8:	2100      	movs	r1, #0
    73aa:	4640      	mov	r0, r8
    73ac:	f003 fd58 	bl	ae60 <set_ss_pin_state>
    return err_code;
    73b0:	4808      	ldr	r0, [pc, #32]	; (73d4 <nrfx_spim_xfer+0xe8>)
}
    73b2:	e7cf      	b.n	7354 <nrfx_spim_xfer+0x68>
    if (!enable)
    73b4:	f014 0f04 	tst.w	r4, #4
    73b8:	f04f 0240 	mov.w	r2, #64	; 0x40
    p_reg->INTENCLR = mask;
    73bc:	bf14      	ite	ne
    73be:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
    73c2:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
    73c6:	e7f3      	b.n	73b0 <nrfx_spim_xfer+0xc4>
        return err_code;
    73c8:	4803      	ldr	r0, [pc, #12]	; (73d8 <nrfx_spim_xfer+0xec>)
    73ca:	e7c3      	b.n	7354 <nrfx_spim_xfer+0x68>
    73cc:	200015f8 	.word	0x200015f8
    73d0:	0bad000a 	.word	0x0bad000a
    73d4:	0bad0000 	.word	0x0bad0000
    73d8:	0bad000b 	.word	0x0bad000b

000073dc <nrfx_spim_0_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    73dc:	4b0c      	ldr	r3, [pc, #48]	; (7410 <nrfx_spim_0_irq_handler+0x34>)
    73de:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    }
}

#if NRFX_CHECK(NRFX_SPIM0_ENABLED)
void nrfx_spim_0_irq_handler(void)
{
    73e2:	b510      	push	{r4, lr}
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    73e4:	b192      	cbz	r2, 740c <nrfx_spim_0_irq_handler+0x30>
    set_ss_pin_state(p_cb, false);
    73e6:	4a0b      	ldr	r2, [pc, #44]	; (7414 <nrfx_spim_0_irq_handler+0x38>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    73e8:	2400      	movs	r4, #0
    73ea:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
    73ee:	4621      	mov	r1, r4
    73f0:	4610      	mov	r0, r2
    73f2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    73f6:	f003 fd33 	bl	ae60 <set_ss_pin_state>
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    73fa:	7214      	strb	r4, [r2, #8]
    p_cb->transfer_in_progress = false;
    73fc:	7754      	strb	r4, [r2, #29]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    73fe:	e9d2 3100 	ldrd	r3, r1, [r2]
    irq_handler(NRF_SPIM0, &m_cb[NRFX_SPIM0_INST_IDX]);
}
    7402:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    7406:	f102 0008 	add.w	r0, r2, #8
    740a:	4718      	bx	r3
}
    740c:	bd10      	pop	{r4, pc}
    740e:	bf00      	nop
    7410:	40003000 	.word	0x40003000
    7414:	200015f8 	.word	0x200015f8

00007418 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    7418:	4b05      	ldr	r3, [pc, #20]	; (7430 <ep_state_access+0x18>)
    741a:	f010 0f80 	tst.w	r0, #128	; 0x80
    741e:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    7422:	bf08      	it	eq
    7424:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    7426:	f000 000f 	and.w	r0, r0, #15
}
    742a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    742e:	4770      	bx	lr
    7430:	20001788 	.word	0x20001788

00007434 <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    7434:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    7436:	4a09      	ldr	r2, [pc, #36]	; (745c <ev_usbreset_handler+0x28>)
    7438:	2300      	movs	r3, #0
    743a:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    743c:	4a08      	ldr	r2, [pc, #32]	; (7460 <ev_usbreset_handler+0x2c>)

    const nrfx_usbd_evt_t evt = {
    743e:	f8ad 3005 	strh.w	r3, [sp, #5]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    7442:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    7444:	f88d 3007 	strb.w	r3, [sp, #7]
    7448:	2301      	movs	r3, #1
    744a:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    744e:	4b05      	ldr	r3, [pc, #20]	; (7464 <ev_usbreset_handler+0x30>)
    7450:	a801      	add	r0, sp, #4
    7452:	681b      	ldr	r3, [r3, #0]
    7454:	4798      	blx	r3
}
    7456:	b003      	add	sp, #12
    7458:	f85d fb04 	ldr.w	pc, [sp], #4
    745c:	20001973 	.word	0x20001973
    7460:	20001976 	.word	0x20001976
    7464:	20001818 	.word	0x20001818

00007468 <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
    7468:	4b21      	ldr	r3, [pc, #132]	; (74f0 <ev_usbevent_handler+0x88>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    746a:	b513      	push	{r0, r1, r4, lr}
    746c:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    7470:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    7474:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    7476:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    747a:	d50e      	bpl.n	749a <ev_usbevent_handler+0x32>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    747c:	4b1d      	ldr	r3, [pc, #116]	; (74f4 <ev_usbevent_handler+0x8c>)
    747e:	2201      	movs	r2, #1
    7480:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    7482:	2300      	movs	r3, #0
    7484:	f8ad 3005 	strh.w	r3, [sp, #5]
    7488:	f88d 3007 	strb.w	r3, [sp, #7]
    748c:	2302      	movs	r3, #2
    748e:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    7492:	4b19      	ldr	r3, [pc, #100]	; (74f8 <ev_usbevent_handler+0x90>)
    7494:	a801      	add	r0, sp, #4
    7496:	681b      	ldr	r3, [r3, #0]
    7498:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    749a:	05a2      	lsls	r2, r4, #22
    749c:	d50d      	bpl.n	74ba <ev_usbevent_handler+0x52>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    749e:	4a15      	ldr	r2, [pc, #84]	; (74f4 <ev_usbevent_handler+0x8c>)
    74a0:	2300      	movs	r3, #0
    74a2:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    74a4:	f8ad 3005 	strh.w	r3, [sp, #5]
    74a8:	f88d 3007 	strb.w	r3, [sp, #7]
    74ac:	2303      	movs	r3, #3
    74ae:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    74b2:	4b11      	ldr	r3, [pc, #68]	; (74f8 <ev_usbevent_handler+0x90>)
    74b4:	a801      	add	r0, sp, #4
    74b6:	681b      	ldr	r3, [r3, #0]
    74b8:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    74ba:	0563      	lsls	r3, r4, #21
    74bc:	d515      	bpl.n	74ea <ev_usbevent_handler+0x82>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    74be:	4a0d      	ldr	r2, [pc, #52]	; (74f4 <ev_usbevent_handler+0x8c>)
    74c0:	7813      	ldrb	r3, [r2, #0]
    74c2:	b193      	cbz	r3, 74ea <ev_usbevent_handler+0x82>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    74c4:	2300      	movs	r3, #0
    74c6:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    74c8:	4a09      	ldr	r2, [pc, #36]	; (74f0 <ev_usbevent_handler+0x88>)
    74ca:	2101      	movs	r1, #1
    74cc:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    74d0:	6591      	str	r1, [r2, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    74d2:	6d92      	ldr	r2, [r2, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    74d4:	f8ad 3005 	strh.w	r3, [sp, #5]
    74d8:	f88d 3007 	strb.w	r3, [sp, #7]
    74dc:	2304      	movs	r3, #4
    74de:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    74e2:	4b05      	ldr	r3, [pc, #20]	; (74f8 <ev_usbevent_handler+0x90>)
    74e4:	a801      	add	r0, sp, #4
    74e6:	681b      	ldr	r3, [r3, #0]
    74e8:	4798      	blx	r3
        }
    }
}
    74ea:	b002      	add	sp, #8
    74ec:	bd10      	pop	{r4, pc}
    74ee:	bf00      	nop
    74f0:	40027000 	.word	0x40027000
    74f4:	20001973 	.word	0x20001973
    74f8:	20001818 	.word	0x20001818

000074fc <usbd_errata_187_211_begin>:
	__asm__ volatile(
    74fc:	f04f 0320 	mov.w	r3, #32
    7500:	f3ef 8011 	mrs	r0, BASEPRI
    7504:	f383 8812 	msr	BASEPRI_MAX, r3
    7508:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    750c:	4b0a      	ldr	r3, [pc, #40]	; (7538 <usbd_errata_187_211_begin+0x3c>)
    750e:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    7512:	2203      	movs	r2, #3
    7514:	b961      	cbnz	r1, 7530 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7516:	f249 3175 	movw	r1, #37749	; 0x9375
    751a:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    751e:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7522:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    7526:	f380 8811 	msr	BASEPRI, r0
    752a:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    752e:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    7530:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    7534:	e7f7      	b.n	7526 <usbd_errata_187_211_begin+0x2a>
    7536:	bf00      	nop
    7538:	4006e000 	.word	0x4006e000

0000753c <usbd_errata_187_211_end>:
	__asm__ volatile(
    753c:	f04f 0320 	mov.w	r3, #32
    7540:	f3ef 8011 	mrs	r0, BASEPRI
    7544:	f383 8812 	msr	BASEPRI_MAX, r3
    7548:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    754c:	4b0a      	ldr	r3, [pc, #40]	; (7578 <usbd_errata_187_211_end+0x3c>)
    754e:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    7552:	b961      	cbnz	r1, 756e <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7554:	f249 3275 	movw	r2, #37749	; 0x9375
    7558:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    755c:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    7560:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    7564:	f380 8811 	msr	BASEPRI, r0
    7568:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    756c:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    756e:	2200      	movs	r2, #0
    7570:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    7574:	e7f6      	b.n	7564 <usbd_errata_187_211_end+0x28>
    7576:	bf00      	nop
    7578:	4006e000 	.word	0x4006e000

0000757c <nrfx_usbd_feeder_flash>:
{
    757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    757e:	684d      	ldr	r5, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    7580:	4f0b      	ldr	r7, [pc, #44]	; (75b0 <nrfx_usbd_feeder_flash+0x34>)
    7582:	4295      	cmp	r5, r2
    7584:	bf28      	it	cs
    7586:	4615      	movcs	r5, r2
{
    7588:	460c      	mov	r4, r1
    758a:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    758c:	462a      	mov	r2, r5
    758e:	6809      	ldr	r1, [r1, #0]
    7590:	4638      	mov	r0, r7
    7592:	f003 f8f0 	bl	a776 <memcpy>
    p_transfer->size -= tx_size;
    7596:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    7598:	6822      	ldr	r2, [r4, #0]
    p_transfer->size -= tx_size;
    759a:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
    759c:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
    75a0:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
    75a2:	6060      	str	r0, [r4, #4]
}
    75a4:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    75a6:	6022      	str	r2, [r4, #0]
}
    75a8:	bf18      	it	ne
    75aa:	2001      	movne	r0, #1
    75ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    75ae:	bf00      	nop
    75b0:	2000181c 	.word	0x2000181c

000075b4 <nrfx_usbd_feeder_flash_zlp>:
{
    75b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    75b6:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
    75b8:	4294      	cmp	r4, r2
    75ba:	bf28      	it	cs
    75bc:	4614      	movcs	r4, r2
{
    75be:	4606      	mov	r6, r0
    75c0:	460d      	mov	r5, r1
    if (tx_size != 0)
    75c2:	b18c      	cbz	r4, 75e8 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    75c4:	4f09      	ldr	r7, [pc, #36]	; (75ec <nrfx_usbd_feeder_flash_zlp+0x38>)
    75c6:	6809      	ldr	r1, [r1, #0]
    75c8:	4622      	mov	r2, r4
    75ca:	4638      	mov	r0, r7
    75cc:	f003 f8d3 	bl	a776 <memcpy>
        p_next->p_data.tx = p_buffer;
    75d0:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
    75d2:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
    75d4:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
    75d6:	1b1b      	subs	r3, r3, r4
    75d8:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    75da:	682b      	ldr	r3, [r5, #0]
}
    75dc:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    75de:	4423      	add	r3, r4
    75e0:	602b      	str	r3, [r5, #0]
}
    75e2:	bf18      	it	ne
    75e4:	2001      	movne	r0, #1
    75e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
    75e8:	6004      	str	r4, [r0, #0]
    75ea:	e7f2      	b.n	75d2 <nrfx_usbd_feeder_flash_zlp+0x1e>
    75ec:	2000181c 	.word	0x2000181c

000075f0 <usbd_enable>:

/**
 * @brief Enable USBD peripheral.
 */
static void usbd_enable(void)
{
    75f0:	b508      	push	{r3, lr}
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    75f2:	f003 fc41 	bl	ae78 <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    75f6:	b108      	cbz	r0, 75fc <usbd_enable+0xc>
    {
        usbd_errata_187_211_begin();
    75f8:	f7ff ff80 	bl	74fc <usbd_errata_187_211_begin>
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    75fc:	4b0b      	ldr	r3, [pc, #44]	; (762c <usbd_enable+0x3c>)
    75fe:	2201      	movs	r2, #1
    7600:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    7604:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    7608:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    760c:	0512      	lsls	r2, r2, #20
    760e:	d5fb      	bpl.n	7608 <usbd_enable+0x18>
    p_reg->EVENTCAUSE = flags;
    7610:	f44f 6200 	mov.w	r2, #2048	; 0x800
    7614:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    7618:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    761c:	f003 fc2c 	bl	ae78 <nrf52_errata_187>
    if (nrfx_usbd_errata_171())
    {
        usbd_errata_171_end();
    }

    if (nrfx_usbd_errata_187())
    7620:	b118      	cbz	r0, 762a <usbd_enable+0x3a>
    {
        usbd_errata_187_211_end();
    }
}
    7622:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
    7626:	f7ff bf89 	b.w	753c <usbd_errata_187_211_end>
}
    762a:	bd08      	pop	{r3, pc}
    762c:	40027000 	.word	0x40027000

00007630 <ev_sof_handler>:
{
    7630:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    7632:	2300      	movs	r3, #0
    7634:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    7638:	4b0b      	ldr	r3, [pc, #44]	; (7668 <ev_sof_handler+0x38>)
    763a:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    763e:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    7642:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    7646:	4a09      	ldr	r2, [pc, #36]	; (766c <ev_sof_handler+0x3c>)
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    7648:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
    764a:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    764c:	bf0c      	ite	eq
    764e:	f44f 7180 	moveq.w	r1, #256	; 0x100
    7652:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
    7656:	430b      	orrs	r3, r1
    7658:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    765a:	4b05      	ldr	r3, [pc, #20]	; (7670 <ev_sof_handler+0x40>)
    765c:	a801      	add	r0, sp, #4
    765e:	681b      	ldr	r3, [r3, #0]
    7660:	4798      	blx	r3
}
    7662:	b003      	add	sp, #12
    7664:	f85d fb04 	ldr.w	pc, [sp], #4
    7668:	40027000 	.word	0x40027000
    766c:	200016f4 	.word	0x200016f4
    7670:	20001818 	.word	0x20001818

00007674 <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7674:	4b06      	ldr	r3, [pc, #24]	; (7690 <atomic_and.constprop.0.isra.0+0x1c>)
    7676:	f3bf 8f5b 	dmb	ish
    767a:	e853 2f00 	ldrex	r2, [r3]
    767e:	4002      	ands	r2, r0
    7680:	e843 2100 	strex	r1, r2, [r3]
    7684:	2900      	cmp	r1, #0
    7686:	d1f8      	bne.n	767a <atomic_and.constprop.0.isra.0+0x6>
    7688:	f3bf 8f5b 	dmb	ish
}
    768c:	4770      	bx	lr
    768e:	bf00      	nop
    7690:	20001684 	.word	0x20001684

00007694 <nrf_usbd_epin_dma_handler>:
{
    7694:	b508      	push	{r3, lr}
    m_dma_pending = false;
    7696:	4b0c      	ldr	r3, [pc, #48]	; (76c8 <nrf_usbd_epin_dma_handler+0x34>)
    7698:	2200      	movs	r2, #0
    769a:	701a      	strb	r2, [r3, #0]
{
    769c:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    769e:	f7ff febb 	bl	7418 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    76a2:	7b83      	ldrb	r3, [r0, #14]
    76a4:	2b03      	cmp	r3, #3
    76a6:	d10a      	bne.n	76be <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    76a8:	4608      	mov	r0, r1
    76aa:	f003 fc2b 	bl	af04 <ep2bit>
    76ae:	2301      	movs	r3, #1
    76b0:	fa03 f000 	lsl.w	r0, r3, r0
    76b4:	43c0      	mvns	r0, r0
}
    76b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    76ba:	f7ff bfdb 	b.w	7674 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    76be:	6803      	ldr	r3, [r0, #0]
    76c0:	2b00      	cmp	r3, #0
    76c2:	d0f1      	beq.n	76a8 <nrf_usbd_epin_dma_handler+0x14>
}
    76c4:	bd08      	pop	{r3, pc}
    76c6:	bf00      	nop
    76c8:	20001974 	.word	0x20001974

000076cc <nrf_usbd_ep0in_dma_handler>:
    m_dma_pending = false;
    76cc:	4b08      	ldr	r3, [pc, #32]	; (76f0 <nrf_usbd_ep0in_dma_handler+0x24>)
    76ce:	2200      	movs	r2, #0
    76d0:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    76d2:	4b08      	ldr	r3, [pc, #32]	; (76f4 <nrf_usbd_ep0in_dma_handler+0x28>)
    76d4:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    76d8:	2a03      	cmp	r2, #3
    76da:	d103      	bne.n	76e4 <nrf_usbd_ep0in_dma_handler+0x18>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    76dc:	f06f 0001 	mvn.w	r0, #1
    76e0:	f7ff bfc8 	b.w	7674 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    76e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    76e8:	2b00      	cmp	r3, #0
    76ea:	d0f7      	beq.n	76dc <nrf_usbd_ep0in_dma_handler+0x10>
}
    76ec:	4770      	bx	lr
    76ee:	bf00      	nop
    76f0:	20001974 	.word	0x20001974
    76f4:	200016f8 	.word	0x200016f8

000076f8 <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
    76f8:	2201      	movs	r2, #1
{
    76fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    76fc:	fa02 f501 	lsl.w	r5, r2, r1
    7700:	491c      	ldr	r1, [pc, #112]	; (7774 <usbd_ep_data_handler+0x7c>)
    7702:	4e1d      	ldr	r6, [pc, #116]	; (7778 <usbd_ep_data_handler+0x80>)
    7704:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    7706:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    770a:	ea43 0305 	orr.w	r3, r3, r5
{
    770e:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    7710:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    7712:	d024      	beq.n	775e <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    7714:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7718:	4b18      	ldr	r3, [pc, #96]	; (777c <usbd_ep_data_handler+0x84>)
    771a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    771e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7722:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7726:	681a      	ldr	r2, [r3, #0]
    if (ret)
    7728:	b132      	cbz	r2, 7738 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    772a:	2200      	movs	r2, #0
    772c:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    772e:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    7730:	681b      	ldr	r3, [r3, #0]
    7732:	d011      	beq.n	7758 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    7734:	f7ff ffae 	bl	7694 <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    7738:	6831      	ldr	r1, [r6, #0]
    773a:	4029      	ands	r1, r5
    773c:	d10a      	bne.n	7754 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    773e:	2306      	movs	r3, #6
    7740:	f88d 3004 	strb.w	r3, [sp, #4]
    7744:	f88d 4006 	strb.w	r4, [sp, #6]
    7748:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
    774c:	4b0c      	ldr	r3, [pc, #48]	; (7780 <usbd_ep_data_handler+0x88>)
    774e:	a801      	add	r0, sp, #4
    7750:	681b      	ldr	r3, [r3, #0]
    7752:	4798      	blx	r3
}
    7754:	b002      	add	sp, #8
    7756:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    7758:	f7ff ffb8 	bl	76cc <nrf_usbd_ep0in_dma_handler>
    775c:	e7ec      	b.n	7738 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    775e:	6833      	ldr	r3, [r6, #0]
    7760:	421d      	tst	r5, r3
    7762:	d1f7      	bne.n	7754 <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    7764:	2306      	movs	r3, #6
    7766:	f88d 3004 	strb.w	r3, [sp, #4]
    776a:	f88d 0006 	strb.w	r0, [sp, #6]
    776e:	f88d 2007 	strb.w	r2, [sp, #7]
    7772:	e7eb      	b.n	774c <usbd_ep_data_handler+0x54>
    7774:	200016f4 	.word	0x200016f4
    7778:	20001684 	.word	0x20001684
    777c:	0000bd18 	.word	0x0000bd18
    7780:	20001818 	.word	0x20001818

00007784 <ev_setup_data_handler>:
{
    7784:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    7786:	4b05      	ldr	r3, [pc, #20]	; (779c <ev_setup_data_handler+0x18>)
    7788:	781a      	ldrb	r2, [r3, #0]
    778a:	4610      	mov	r0, r2
    778c:	f003 fbba 	bl	af04 <ep2bit>
}
    7790:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    7794:	4601      	mov	r1, r0
    7796:	4610      	mov	r0, r2
    7798:	f7ff bfae 	b.w	76f8 <usbd_ep_data_handler>
    779c:	20001976 	.word	0x20001976

000077a0 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    77a0:	b507      	push	{r0, r1, r2, lr}
    m_dma_pending = false;
    77a2:	4b0e      	ldr	r3, [pc, #56]	; (77dc <ev_dma_epout8_handler+0x3c>)
    77a4:	2200      	movs	r2, #0
    77a6:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    77a8:	4b0d      	ldr	r3, [pc, #52]	; (77e0 <ev_dma_epout8_handler+0x40>)
    77aa:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    77ae:	2a03      	cmp	r2, #3
    77b0:	d010      	beq.n	77d4 <ev_dma_epout8_handler+0x34>
    else if (p_state->handler.consumer == NULL)
    77b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    77b6:	b96b      	cbnz	r3, 77d4 <ev_dma_epout8_handler+0x34>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    77b8:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    77bc:	f7ff ff5a 	bl	7674 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    77c0:	2306      	movs	r3, #6
    77c2:	f88d 3004 	strb.w	r3, [sp, #4]
    77c6:	2308      	movs	r3, #8
    77c8:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    77cc:	4b05      	ldr	r3, [pc, #20]	; (77e4 <ev_dma_epout8_handler+0x44>)
    77ce:	a801      	add	r0, sp, #4
    77d0:	681b      	ldr	r3, [r3, #0]
    77d2:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    77d4:	b003      	add	sp, #12
    77d6:	f85d fb04 	ldr.w	pc, [sp], #4
    77da:	bf00      	nop
    77dc:	20001974 	.word	0x20001974
    77e0:	200016f8 	.word	0x200016f8
    77e4:	20001818 	.word	0x20001818

000077e8 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    77e8:	b507      	push	{r0, r1, r2, lr}
    m_dma_pending = false;
    77ea:	4b11      	ldr	r3, [pc, #68]	; (7830 <ev_dma_epin8_handler+0x48>)
    77ec:	2200      	movs	r2, #0
    77ee:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    77f0:	4b10      	ldr	r3, [pc, #64]	; (7834 <ev_dma_epin8_handler+0x4c>)
    77f2:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    77f6:	2a03      	cmp	r2, #3
    77f8:	d106      	bne.n	7808 <ev_dma_epin8_handler+0x20>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    77fa:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    77fe:	b003      	add	sp, #12
    7800:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7804:	f7ff bf36 	b.w	7674 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    7808:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    780c:	b96b      	cbnz	r3, 782a <ev_dma_epin8_handler+0x42>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    780e:	f46f 7080 	mvn.w	r0, #256	; 0x100
    7812:	f7ff ff2f 	bl	7674 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7816:	2306      	movs	r3, #6
    7818:	f88d 3004 	strb.w	r3, [sp, #4]
    781c:	2388      	movs	r3, #136	; 0x88
    781e:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    7822:	4b05      	ldr	r3, [pc, #20]	; (7838 <ev_dma_epin8_handler+0x50>)
    7824:	a801      	add	r0, sp, #4
    7826:	681b      	ldr	r3, [r3, #0]
    7828:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    782a:	b003      	add	sp, #12
    782c:	f85d fb04 	ldr.w	pc, [sp], #4
    7830:	20001974 	.word	0x20001974
    7834:	200016f8 	.word	0x200016f8
    7838:	20001818 	.word	0x20001818

0000783c <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    783c:	4a02      	ldr	r2, [pc, #8]	; (7848 <nrfx_usbd_uninit+0xc>)
    783e:	2300      	movs	r3, #0
    7840:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    7842:	4a02      	ldr	r2, [pc, #8]	; (784c <nrfx_usbd_uninit+0x10>)
    7844:	7013      	strb	r3, [r2, #0]
    return;
}
    7846:	4770      	bx	lr
    7848:	20001818 	.word	0x20001818
    784c:	20001975 	.word	0x20001975

00007850 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    7850:	b570      	push	{r4, r5, r6, lr}
    p_reg->EVENTCAUSE = flags;
    7852:	4c1c      	ldr	r4, [pc, #112]	; (78c4 <nrfx_usbd_enable+0x74>)
    7854:	f44f 6300 	mov.w	r3, #2048	; 0x800
    7858:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    785c:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD, NRF_USBD_EVENTCAUSE_READY_MASK);

    usbd_enable();
    7860:	f7ff fec6 	bl	75f0 <usbd_enable>
}

/* Errata: Unexpected behavior after reset. **/
static inline bool nrfx_usbd_errata_223(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_223();
    7864:	f003 fb08 	bl	ae78 <nrf52_errata_187>

    if (nrfx_usbd_errata_223() && m_first_enable)
    7868:	b150      	cbz	r0, 7880 <nrfx_usbd_enable+0x30>
    786a:	4d17      	ldr	r5, [pc, #92]	; (78c8 <nrfx_usbd_enable+0x78>)
    786c:	782b      	ldrb	r3, [r5, #0]
    786e:	b13b      	cbz	r3, 7880 <nrfx_usbd_enable+0x30>
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    7870:	2600      	movs	r6, #0
    7872:	f8c4 6500 	str.w	r6, [r4, #1280]	; 0x500
    (void) p_reg->ENABLE;
    7876:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
    {
         nrf_usbd_disable(NRF_USBD);

         usbd_enable();
    787a:	f7ff feb9 	bl	75f0 <usbd_enable>

         m_first_enable = false;
    787e:	702e      	strb	r6, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    7880:	f003 fafa 	bl	ae78 <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    7884:	b108      	cbz	r0, 788a <nrfx_usbd_enable+0x3a>
#endif
    {
        usbd_errata_187_211_begin();
    7886:	f7ff fe39 	bl	74fc <usbd_errata_187_211_begin>
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    788a:	4a0e      	ldr	r2, [pc, #56]	; (78c4 <nrfx_usbd_enable+0x74>)
    788c:	2380      	movs	r3, #128	; 0x80
    788e:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    7892:	2300      	movs	r3, #0
    7894:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    7898:	4a0c      	ldr	r2, [pc, #48]	; (78cc <nrfx_usbd_enable+0x7c>)
    789a:	f240 11ff 	movw	r1, #511	; 0x1ff
    789e:	6011      	str	r1, [r2, #0]
    m_ep_dma_waiting = 0;
    78a0:	4a0b      	ldr	r2, [pc, #44]	; (78d0 <nrfx_usbd_enable+0x80>)
    78a2:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    78a4:	4a0b      	ldr	r2, [pc, #44]	; (78d4 <nrfx_usbd_enable+0x84>)
    78a6:	7013      	strb	r3, [r2, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    78a8:	4a0b      	ldr	r2, [pc, #44]	; (78d8 <nrfx_usbd_enable+0x88>)
    78aa:	7013      	strb	r3, [r2, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    78ac:	4b0b      	ldr	r3, [pc, #44]	; (78dc <nrfx_usbd_enable+0x8c>)
    78ae:	2202      	movs	r2, #2
    78b0:	701a      	strb	r2, [r3, #0]
    78b2:	f003 fae1 	bl	ae78 <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    78b6:	b118      	cbz	r0, 78c0 <nrfx_usbd_enable+0x70>
#endif
    {
        usbd_errata_187_211_end();
    }
}
    78b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        usbd_errata_187_211_end();
    78bc:	f7ff be3e 	b.w	753c <usbd_errata_187_211_end>
}
    78c0:	bd70      	pop	{r4, r5, r6, pc}
    78c2:	bf00      	nop
    78c4:	40027000 	.word	0x40027000
    78c8:	200000f8 	.word	0x200000f8
    78cc:	200016f4 	.word	0x200016f4
    78d0:	20001684 	.word	0x20001684
    78d4:	20001974 	.word	0x20001974
    78d8:	20001976 	.word	0x20001976
    78dc:	20001975 	.word	0x20001975

000078e0 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    78e0:	4b0a      	ldr	r3, [pc, #40]	; (790c <nrfx_usbd_start+0x2c>)
    78e2:	2200      	movs	r2, #0
{
    78e4:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    78e6:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    78e8:	4a09      	ldr	r2, [pc, #36]	; (7910 <nrfx_usbd_start+0x30>)
    78ea:	4b0a      	ldr	r3, [pc, #40]	; (7914 <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    78ec:	4c0a      	ldr	r4, [pc, #40]	; (7918 <nrfx_usbd_start+0x38>)
    78ee:	2800      	cmp	r0, #0
    78f0:	bf18      	it	ne
    78f2:	4613      	movne	r3, r2
    78f4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    78f8:	2027      	movs	r0, #39	; 0x27
    78fa:	f7fb f8e5 	bl	2ac8 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    78fe:	2301      	movs	r3, #1
    7900:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    7904:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    7908:	bd10      	pop	{r4, pc}
    790a:	bf00      	nop
    790c:	20001973 	.word	0x20001973
    7910:	01e01407 	.word	0x01e01407
    7914:	01c01407 	.word	0x01c01407
    7918:	40027000 	.word	0x40027000

0000791c <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    791c:	4b03      	ldr	r3, [pc, #12]	; (792c <nrfx_usbd_is_enabled+0x10>)
    791e:	7818      	ldrb	r0, [r3, #0]
}
    7920:	2801      	cmp	r0, #1
    7922:	bf94      	ite	ls
    7924:	2000      	movls	r0, #0
    7926:	2001      	movhi	r0, #1
    7928:	4770      	bx	lr
    792a:	bf00      	nop
    792c:	20001975 	.word	0x20001975

00007930 <nrfx_usbd_init>:
{
    7930:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    7934:	4b1d      	ldr	r3, [pc, #116]	; (79ac <nrfx_usbd_init+0x7c>)
    7936:	781c      	ldrb	r4, [r3, #0]
    7938:	2c00      	cmp	r4, #0
    793a:	d135      	bne.n	79a8 <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
    793c:	4a1c      	ldr	r2, [pc, #112]	; (79b0 <nrfx_usbd_init+0x80>)
    793e:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    7940:	2201      	movs	r2, #1
    7942:	701a      	strb	r2, [r3, #0]
    7944:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7946:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    794a:	4627      	mov	r7, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    794c:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7950:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    7954:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7956:	bf14      	ite	ne
    7958:	4641      	movne	r1, r8
    795a:	2140      	moveq	r1, #64	; 0x40
    795c:	4630      	mov	r0, r6
    795e:	f003 faf2 	bl	af46 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    7962:	4630      	mov	r0, r6
    7964:	f7ff fd58 	bl	7418 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    7968:	3501      	adds	r5, #1
    796a:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
    796c:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
    796e:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
    7970:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    7972:	d1eb      	bne.n	794c <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7974:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
    7976:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7978:	f240 16ff 	movw	r6, #511	; 0x1ff
    797c:	4620      	mov	r0, r4
    797e:	f003 fae2 	bl	af46 <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    7982:	4620      	mov	r0, r4
    7984:	f7ff fd48 	bl	7418 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    7988:	3401      	adds	r4, #1
    798a:	b2e4      	uxtb	r4, r4
    798c:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    798e:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    7990:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    7992:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    7994:	d102      	bne.n	799c <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
    7996:	4807      	ldr	r0, [pc, #28]	; (79b4 <nrfx_usbd_init+0x84>)
}
    7998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    799c:	f014 0f08 	tst.w	r4, #8
    79a0:	bf14      	ite	ne
    79a2:	4631      	movne	r1, r6
    79a4:	2140      	moveq	r1, #64	; 0x40
    79a6:	e7e9      	b.n	797c <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
    79a8:	4803      	ldr	r0, [pc, #12]	; (79b8 <nrfx_usbd_init+0x88>)
    79aa:	e7f5      	b.n	7998 <nrfx_usbd_init+0x68>
    79ac:	20001975 	.word	0x20001975
    79b0:	20001818 	.word	0x20001818
    79b4:	0bad0000 	.word	0x0bad0000
    79b8:	0bad0005 	.word	0x0bad0005

000079bc <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    79bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    79c0:	4605      	mov	r5, r0
	__asm__ volatile(
    79c2:	f04f 0320 	mov.w	r3, #32
    79c6:	f3ef 8811 	mrs	r8, BASEPRI
    79ca:	f383 8812 	msr	BASEPRI_MAX, r3
    79ce:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    79d2:	f010 040f 	ands.w	r4, r0, #15
    79d6:	d103      	bne.n	79e0 <nrfx_usbd_ep_transfer+0x24>
    79d8:	4b27      	ldr	r3, [pc, #156]	; (7a78 <nrfx_usbd_ep_transfer+0xbc>)
    79da:	781b      	ldrb	r3, [r3, #0]
    79dc:	4283      	cmp	r3, r0
    79de:	d146      	bne.n	7a6e <nrfx_usbd_ep_transfer+0xb2>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    79e0:	4b26      	ldr	r3, [pc, #152]	; (7a7c <nrfx_usbd_ep_transfer+0xc0>)
    79e2:	4f27      	ldr	r7, [pc, #156]	; (7a80 <nrfx_usbd_ep_transfer+0xc4>)
    79e4:	681a      	ldr	r2, [r3, #0]
    79e6:	683e      	ldr	r6, [r7, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
    79e8:	4628      	mov	r0, r5
    79ea:	f003 fa8b 	bl	af04 <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    79ee:	43d2      	mvns	r2, r2
    79f0:	b292      	uxth	r2, r2
    79f2:	f04f 0901 	mov.w	r9, #1
    79f6:	4332      	orrs	r2, r6
    79f8:	fa09 f900 	lsl.w	r9, r9, r0
    79fc:	ea12 0f09 	tst.w	r2, r9
    7a00:	d137      	bne.n	7a72 <nrfx_usbd_ep_transfer+0xb6>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    7a02:	4628      	mov	r0, r5
    7a04:	f7ff fd08 	bl	7418 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    7a08:	220c      	movs	r2, #12
    7a0a:	4354      	muls	r4, r2
        if (NRF_USBD_EPIN_CHECK(ep))
    7a0c:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    7a0e:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
    7a10:	d529      	bpl.n	7a66 <nrfx_usbd_ep_transfer+0xaa>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    7a12:	4a1c      	ldr	r2, [pc, #112]	; (7a84 <nrfx_usbd_ep_transfer+0xc8>)
    7a14:	6808      	ldr	r0, [r1, #0]
    7a16:	4414      	add	r4, r2
    7a18:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    7a1c:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    7a1e:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    7a22:	f002 0201 	and.w	r2, r2, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    7a26:	d119      	bne.n	7a5c <nrfx_usbd_ep_transfer+0xa0>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    7a28:	b9b2      	cbnz	r2, 7a58 <nrfx_usbd_ep_transfer+0x9c>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    7a2a:	4a17      	ldr	r2, [pc, #92]	; (7a88 <nrfx_usbd_ep_transfer+0xcc>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    7a2c:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
    7a2e:	c907      	ldmia	r1, {r0, r1, r2}
    7a30:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
    7a34:	2200      	movs	r2, #0
    7a36:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    7a38:	739a      	strb	r2, [r3, #14]
        p_state->p_context = p_context;
    7a3a:	605c      	str	r4, [r3, #4]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7a3c:	4b13      	ldr	r3, [pc, #76]	; (7a8c <nrfx_usbd_ep_transfer+0xd0>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
    7a3e:	4814      	ldr	r0, [pc, #80]	; (7a90 <nrfx_usbd_ep_transfer+0xd4>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    7a40:	ea46 0609 	orr.w	r6, r6, r9
    7a44:	2280      	movs	r2, #128	; 0x80
    7a46:	603e      	str	r6, [r7, #0]
    7a48:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    7a4c:	f388 8811 	msr	BASEPRI, r8
    7a50:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    7a54:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    7a58:	4a0e      	ldr	r2, [pc, #56]	; (7a94 <nrfx_usbd_ep_transfer+0xd8>)
    7a5a:	e7e7      	b.n	7a2c <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    7a5c:	b90a      	cbnz	r2, 7a62 <nrfx_usbd_ep_transfer+0xa6>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    7a5e:	4a0e      	ldr	r2, [pc, #56]	; (7a98 <nrfx_usbd_ep_transfer+0xdc>)
    7a60:	e7e4      	b.n	7a2c <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    7a62:	4a0e      	ldr	r2, [pc, #56]	; (7a9c <nrfx_usbd_ep_transfer+0xe0>)
    7a64:	e7e2      	b.n	7a2c <nrfx_usbd_ep_transfer+0x70>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    7a66:	4a0e      	ldr	r2, [pc, #56]	; (7aa0 <nrfx_usbd_ep_transfer+0xe4>)
    7a68:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    7a6a:	4a0e      	ldr	r2, [pc, #56]	; (7aa4 <nrfx_usbd_ep_transfer+0xe8>)
    7a6c:	e7de      	b.n	7a2c <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_INVALID_ADDR;
    7a6e:	480e      	ldr	r0, [pc, #56]	; (7aa8 <nrfx_usbd_ep_transfer+0xec>)
    7a70:	e7ec      	b.n	7a4c <nrfx_usbd_ep_transfer+0x90>
        ret = NRFX_ERROR_BUSY;
    7a72:	480e      	ldr	r0, [pc, #56]	; (7aac <nrfx_usbd_ep_transfer+0xf0>)
    7a74:	e7ea      	b.n	7a4c <nrfx_usbd_ep_transfer+0x90>
    7a76:	bf00      	nop
    7a78:	20001976 	.word	0x20001976
    7a7c:	200016f4 	.word	0x200016f4
    7a80:	20001684 	.word	0x20001684
    7a84:	20001688 	.word	0x20001688
    7a88:	0000aeb9 	.word	0x0000aeb9
    7a8c:	e000e100 	.word	0xe000e100
    7a90:	0bad0000 	.word	0x0bad0000
    7a94:	0000aedb 	.word	0x0000aedb
    7a98:	0000757d 	.word	0x0000757d
    7a9c:	000075b5 	.word	0x000075b5
    7aa0:	20001618 	.word	0x20001618
    7aa4:	0000ae8b 	.word	0x0000ae8b
    7aa8:	0bad000a 	.word	0x0bad000a
    7aac:	0bad000b 	.word	0x0bad000b

00007ab0 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    7ab0:	f010 0f08 	tst.w	r0, #8
    7ab4:	4b07      	ldr	r3, [pc, #28]	; (7ad4 <nrfx_usbd_epout_size_get+0x24>)
    7ab6:	d006      	beq.n	7ac6 <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    7ab8:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    7abc:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    7ac0:	bf18      	it	ne
    7ac2:	2000      	movne	r0, #0
    7ac4:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    7ac6:	f000 000f 	and.w	r0, r0, #15
    7aca:	f500 7094 	add.w	r0, r0, #296	; 0x128
    7ace:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    7ad2:	4770      	bx	lr
    7ad4:	40027000 	.word	0x40027000

00007ad8 <usbd_dmareq_process>:
{
    7ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    7adc:	f8df 814c 	ldr.w	r8, [pc, #332]	; 7c2c <usbd_dmareq_process+0x154>
    7ae0:	f898 3000 	ldrb.w	r3, [r8]
{
    7ae4:	b085      	sub	sp, #20
    if (!m_dma_pending)
    7ae6:	2b00      	cmp	r3, #0
    7ae8:	d164      	bne.n	7bb4 <usbd_dmareq_process+0xdc>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    7aea:	f8df 9144 	ldr.w	r9, [pc, #324]	; 7c30 <usbd_dmareq_process+0x158>
    7aee:	4e51      	ldr	r6, [pc, #324]	; (7c34 <usbd_dmareq_process+0x15c>)
    7af0:	f8d9 1000 	ldr.w	r1, [r9]
    7af4:	6833      	ldr	r3, [r6, #0]
    7af6:	4019      	ands	r1, r3
    7af8:	d05c      	beq.n	7bb4 <usbd_dmareq_process+0xdc>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    7afa:	f011 2301 	ands.w	r3, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
    7afe:	bf14      	ite	ne
    7b00:	fa93 f1a3 	rbitne	r1, r3
    7b04:	fa91 f1a1 	rbiteq	r1, r1
    7b08:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7b0c:	290f      	cmp	r1, #15
    7b0e:	bf8a      	itet	hi
    7b10:	f1a1 0410 	subhi.w	r4, r1, #16
    7b14:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
    7b18:	b2e4      	uxtbhi	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    7b1a:	4620      	mov	r0, r4
    7b1c:	f7ff fc7c 	bl	7418 <ep_state_access>
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    7b20:	f04f 0b01 	mov.w	fp, #1
            if (NRF_USBD_EPIN_CHECK(ep))
    7b24:	fa4f fa84 	sxtb.w	sl, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    7b28:	fa0b f101 	lsl.w	r1, fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
    7b2c:	f1ba 0f00 	cmp.w	sl, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
    7b30:	4605      	mov	r5, r0
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    7b32:	ea6f 0b01 	mvn.w	fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
    7b36:	da40      	bge.n	7bba <usbd_dmareq_process+0xe2>
                continue_transfer = p_state->handler.feeder(
    7b38:	6803      	ldr	r3, [r0, #0]
    7b3a:	8982      	ldrh	r2, [r0, #12]
    7b3c:	6841      	ldr	r1, [r0, #4]
    7b3e:	a802      	add	r0, sp, #8
    7b40:	4798      	blx	r3
                if (!continue_transfer)
    7b42:	b900      	cbnz	r0, 7b46 <usbd_dmareq_process+0x6e>
                    p_state->handler.consumer = NULL;
    7b44:	6028      	str	r0, [r5, #0]
    m_dma_pending = true;
    7b46:	2301      	movs	r3, #1
            m_ep_ready &= ~(1U << pos);
    7b48:	6831      	ldr	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
    7b4a:	9a03      	ldr	r2, [sp, #12]
    m_dma_pending = true;
    7b4c:	f888 3000 	strb.w	r3, [r8]
            p_state->transfer_cnt += transfer.size;
    7b50:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
    7b52:	ea01 010b 	and.w	r1, r1, fp
            p_state->transfer_cnt += transfer.size;
    7b56:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
    7b58:	f1ba 0f00 	cmp.w	sl, #0
            m_ep_ready &= ~(1U << pos);
    7b5c:	6031      	str	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
    7b5e:	60ab      	str	r3, [r5, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    7b60:	f004 0008 	and.w	r0, r4, #8
    7b64:	9902      	ldr	r1, [sp, #8]
    7b66:	4b34      	ldr	r3, [pc, #208]	; (7c38 <usbd_dmareq_process+0x160>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    7b68:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    7b6c:	da4f      	bge.n	7c0e <usbd_dmareq_process+0x136>
        if (NRF_USBD_EPISO_CHECK(ep))
    7b6e:	2800      	cmp	r0, #0
    7b70:	d045      	beq.n	7bfe <usbd_dmareq_process+0x126>
            p_reg->ISOIN.PTR    = ptr;
    7b72:	f8c3 16a0 	str.w	r1, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    7b76:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    7b7a:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7b7c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    7b80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7b84:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7b88:	2201      	movs	r2, #1
    7b8a:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    7b8c:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    7b8e:	4a2b      	ldr	r2, [pc, #172]	; (7c3c <usbd_dmareq_process+0x164>)
    7b90:	4b2b      	ldr	r3, [pc, #172]	; (7c40 <usbd_dmareq_process+0x168>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7b92:	4929      	ldr	r1, [pc, #164]	; (7c38 <usbd_dmareq_process+0x160>)
    7b94:	ea13 032a 	ands.w	r3, r3, sl, asr #32
    7b98:	bf38      	it	cc
    7b9a:	4613      	movcc	r3, r2
    7b9c:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    7ba0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7ba4:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7ba8:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    7baa:	b91a      	cbnz	r2, 7bb4 <usbd_dmareq_process+0xdc>
    7bac:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    7bb0:	2a00      	cmp	r2, #0
    7bb2:	d0f9      	beq.n	7ba8 <usbd_dmareq_process+0xd0>
}
    7bb4:	b005      	add	sp, #20
    7bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    7bba:	4620      	mov	r0, r4
    7bbc:	f7ff ff78 	bl	7ab0 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    7bc0:	89aa      	ldrh	r2, [r5, #12]
    7bc2:	6869      	ldr	r1, [r5, #4]
    7bc4:	f8d5 c000 	ldr.w	ip, [r5]
    7bc8:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    7bca:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
    7bcc:	a802      	add	r0, sp, #8
    7bce:	47e0      	blx	ip
                if (transfer.p_data.rx == NULL)
    7bd0:	9a02      	ldr	r2, [sp, #8]
    7bd2:	2a00      	cmp	r2, #0
    7bd4:	d0b5      	beq.n	7b42 <usbd_dmareq_process+0x6a>
                else if (transfer.size < rx_size)
    7bd6:	9a03      	ldr	r2, [sp, #12]
    7bd8:	4297      	cmp	r7, r2
    7bda:	d9b2      	bls.n	7b42 <usbd_dmareq_process+0x6a>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    7bdc:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    7bde:	4658      	mov	r0, fp
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    7be0:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    7be2:	f7ff fd47 	bl	7674 <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    7be6:	2306      	movs	r3, #6
    7be8:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    7bec:	4b15      	ldr	r3, [pc, #84]	; (7c44 <usbd_dmareq_process+0x16c>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    7bee:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    7bf2:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    7bf4:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    7bf8:	a801      	add	r0, sp, #4
    7bfa:	4798      	blx	r3
                    continue;
    7bfc:	e778      	b.n	7af0 <usbd_dmareq_process+0x18>
            p_reg->EPIN[epnr].PTR    = ptr;
    7bfe:	2014      	movs	r0, #20
    7c00:	fb00 3304 	mla	r3, r0, r4, r3
    7c04:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    7c08:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    7c0c:	e7b5      	b.n	7b7a <usbd_dmareq_process+0xa2>
        if (NRF_USBD_EPISO_CHECK(ep))
    7c0e:	b128      	cbz	r0, 7c1c <usbd_dmareq_process+0x144>
            p_reg->ISOOUT.PTR    = ptr;
    7c10:	f8c3 17a0 	str.w	r1, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    7c14:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
    7c18:	2328      	movs	r3, #40	; 0x28
    7c1a:	e7af      	b.n	7b7c <usbd_dmareq_process+0xa4>
            p_reg->EPOUT[epnr].PTR    = ptr;
    7c1c:	2014      	movs	r0, #20
    7c1e:	fb00 3304 	mla	r3, r0, r4, r3
    7c22:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    7c26:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    7c2a:	e7f5      	b.n	7c18 <usbd_dmareq_process+0x140>
    7c2c:	20001974 	.word	0x20001974
    7c30:	20001684 	.word	0x20001684
    7c34:	200016f4 	.word	0x200016f4
    7c38:	40027000 	.word	0x40027000
    7c3c:	0000bd2a 	.word	0x0000bd2a
    7c40:	0000bd18 	.word	0x0000bd18
    7c44:	20001818 	.word	0x20001818

00007c48 <ev_epdata_handler>:
{
    7c48:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    7c4a:	4b0f      	ldr	r3, [pc, #60]	; (7c88 <ev_epdata_handler+0x40>)
    7c4c:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    7c50:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    7c54:	2501      	movs	r5, #1
    while (dataepstatus)
    7c56:	b91c      	cbnz	r4, 7c60 <ev_epdata_handler+0x18>
}
    7c58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    7c5c:	f7ff bf3c 	b.w	7ad8 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    7c60:	fa94 f3a4 	rbit	r3, r4
    7c64:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7c68:	2b0f      	cmp	r3, #15
    7c6a:	bfc8      	it	gt
    7c6c:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    7c70:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7c72:	bfd4      	ite	le
    7c74:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    7c78:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    7c7a:	fa05 f303 	lsl.w	r3, r5, r3
    7c7e:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    7c82:	f7ff fd39 	bl	76f8 <usbd_ep_data_handler>
    7c86:	e7e6      	b.n	7c56 <ev_epdata_handler+0xe>
    7c88:	40027000 	.word	0x40027000

00007c8c <nrf_usbd_epout_dma_handler>:
    m_dma_pending = false;
    7c8c:	4b17      	ldr	r3, [pc, #92]	; (7cec <nrf_usbd_epout_dma_handler+0x60>)
{
    7c8e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    m_dma_pending = false;
    7c90:	2200      	movs	r2, #0
    7c92:	701a      	strb	r2, [r3, #0]
{
    7c94:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    7c96:	f7ff fbbf 	bl	7418 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7c9a:	7b83      	ldrb	r3, [r0, #14]
    7c9c:	2b03      	cmp	r3, #3
    7c9e:	d10d      	bne.n	7cbc <nrf_usbd_epout_dma_handler+0x30>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7ca0:	4620      	mov	r0, r4
    7ca2:	f003 f92f 	bl	af04 <ep2bit>
    7ca6:	2301      	movs	r3, #1
    7ca8:	fa03 f000 	lsl.w	r0, r3, r0
    7cac:	43c0      	mvns	r0, r0
    7cae:	f7ff fce1 	bl	7674 <atomic_and.constprop.0.isra.0>
}
    7cb2:	b003      	add	sp, #12
    7cb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    7cb8:	f7ff bf0e 	b.w	7ad8 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    7cbc:	6805      	ldr	r5, [r0, #0]
    7cbe:	2d00      	cmp	r5, #0
    7cc0:	d1f7      	bne.n	7cb2 <nrf_usbd_epout_dma_handler+0x26>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7cc2:	4620      	mov	r0, r4
    7cc4:	f003 f91e 	bl	af04 <ep2bit>
    7cc8:	2301      	movs	r3, #1
    7cca:	fa03 f000 	lsl.w	r0, r3, r0
    7cce:	43c0      	mvns	r0, r0
    7cd0:	f7ff fcd0 	bl	7674 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7cd4:	2306      	movs	r3, #6
    7cd6:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    7cda:	4b05      	ldr	r3, [pc, #20]	; (7cf0 <nrf_usbd_epout_dma_handler+0x64>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7cdc:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    7ce0:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7ce2:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    7ce6:	a801      	add	r0, sp, #4
    7ce8:	4798      	blx	r3
    7cea:	e7e2      	b.n	7cb2 <nrf_usbd_epout_dma_handler+0x26>
    7cec:	20001974 	.word	0x20001974
    7cf0:	20001818 	.word	0x20001818

00007cf4 <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    7cf4:	4b02      	ldr	r3, [pc, #8]	; (7d00 <nrfx_usbd_ep_stall+0xc>)
    7cf6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    7cfa:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    7cfe:	4770      	bx	lr
    7d00:	40027000 	.word	0x40027000

00007d04 <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    7d04:	0702      	lsls	r2, r0, #28
    7d06:	d413      	bmi.n	7d30 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    7d08:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    7d0c:	f010 0f80 	tst.w	r0, #128	; 0x80
    7d10:	4a08      	ldr	r2, [pc, #32]	; (7d34 <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    7d12:	bf0b      	itete	eq
    7d14:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    7d18:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    7d1c:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    7d20:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    7d24:	bf08      	it	eq
    7d26:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    7d28:	1e43      	subs	r3, r0, #1
    7d2a:	4258      	negs	r0, r3
    7d2c:	4158      	adcs	r0, r3
    7d2e:	4770      	bx	lr
        return false;
    7d30:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    7d32:	4770      	bx	lr
    7d34:	40027000 	.word	0x40027000

00007d38 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    7d38:	4b04      	ldr	r3, [pc, #16]	; (7d4c <nrfx_usbd_ep_dtoggle_clear+0x14>)
    7d3a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    7d3e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    7d42:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    7d46:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    7d4a:	4770      	bx	lr
    7d4c:	40027000 	.word	0x40027000

00007d50 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    7d50:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    7d52:	2208      	movs	r2, #8
    7d54:	2100      	movs	r1, #0
{
    7d56:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    7d58:	f002 fd18 	bl	a78c <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    7d5c:	4b0e      	ldr	r3, [pc, #56]	; (7d98 <nrfx_usbd_setup_get+0x48>)
    7d5e:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    7d62:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    7d64:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    7d68:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    7d6a:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    7d6e:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    7d72:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    7d76:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    7d78:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    7d7c:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    7d80:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    7d84:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    7d86:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    7d8a:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    7d8e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    7d92:	80e3      	strh	r3, [r4, #6]
}
    7d94:	bd10      	pop	{r4, pc}
    7d96:	bf00      	nop
    7d98:	40027000 	.word	0x40027000

00007d9c <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7d9c:	4b02      	ldr	r3, [pc, #8]	; (7da8 <nrfx_usbd_setup_data_clear+0xc>)
    7d9e:	2201      	movs	r2, #1
    7da0:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    7da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    7da4:	4770      	bx	lr
    7da6:	bf00      	nop
    7da8:	40027000 	.word	0x40027000

00007dac <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    7dac:	b513      	push	{r0, r1, r4, lr}
    m_dma_pending = false;
    7dae:	4b12      	ldr	r3, [pc, #72]	; (7df8 <__kernel_ram_size+0x40>)
    7db0:	2200      	movs	r2, #0
    7db2:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7db4:	4b11      	ldr	r3, [pc, #68]	; (7dfc <__kernel_ram_size+0x44>)
    7db6:	7b9a      	ldrb	r2, [r3, #14]
    7db8:	2a03      	cmp	r2, #3
    7dba:	d106      	bne.n	7dca <__kernel_ram_size+0x12>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7dbc:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    7dc0:	b002      	add	sp, #8
    7dc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7dc6:	f7ff bc55 	b.w	7674 <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    7dca:	681c      	ldr	r4, [r3, #0]
    7dcc:	b974      	cbnz	r4, 7dec <__kernel_ram_size+0x34>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7dce:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    7dd2:	f7ff fc4f 	bl	7674 <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7dd6:	2306      	movs	r3, #6
    7dd8:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    7ddc:	4b08      	ldr	r3, [pc, #32]	; (7e00 <__kernel_ram_size+0x48>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7dde:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    7de2:	681b      	ldr	r3, [r3, #0]
    7de4:	a801      	add	r0, sp, #4
    7de6:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    7de8:	b002      	add	sp, #8
    7dea:	bd10      	pop	{r4, pc}
    7dec:	b002      	add	sp, #8
    7dee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    7df2:	f7ff bfd3 	b.w	7d9c <nrfx_usbd_setup_data_clear>
    7df6:	bf00      	nop
    7df8:	20001974 	.word	0x20001974
    7dfc:	200016f8 	.word	0x200016f8
    7e00:	20001818 	.word	0x20001818

00007e04 <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7e04:	4b02      	ldr	r3, [pc, #8]	; (7e10 <nrfx_usbd_setup_clear+0xc>)
    7e06:	2201      	movs	r2, #1
    7e08:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    7e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    7e0c:	4770      	bx	lr
    7e0e:	bf00      	nop
    7e10:	40027000 	.word	0x40027000

00007e14 <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7e14:	4b02      	ldr	r3, [pc, #8]	; (7e20 <nrfx_usbd_setup_stall+0xc>)
    7e16:	2201      	movs	r2, #1
    7e18:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    7e1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    7e1c:	4770      	bx	lr
    7e1e:	bf00      	nop
    7e20:	40027000 	.word	0x40027000

00007e24 <nrfx_usbd_transfer_out_drop>:
{
    return m_last_setup_dir;
}

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    7e24:	b510      	push	{r4, lr}
    7e26:	4602      	mov	r2, r0
	__asm__ volatile(
    7e28:	f04f 0320 	mov.w	r3, #32
    7e2c:	f3ef 8411 	mrs	r4, BASEPRI
    7e30:	f383 8812 	msr	BASEPRI_MAX, r3
    7e34:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    7e38:	f003 f864 	bl	af04 <ep2bit>
    7e3c:	490d      	ldr	r1, [pc, #52]	; (7e74 <nrfx_usbd_transfer_out_drop+0x50>)
    7e3e:	2301      	movs	r3, #1
    7e40:	fa03 f000 	lsl.w	r0, r3, r0
    7e44:	680b      	ldr	r3, [r1, #0]
    7e46:	ea23 0300 	bic.w	r3, r3, r0
    7e4a:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    7e4c:	f012 0108 	ands.w	r1, r2, #8
    7e50:	d10a      	bne.n	7e68 <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    7e52:	f002 030f 	and.w	r3, r2, #15
    7e56:	009b      	lsls	r3, r3, #2
    7e58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7e5c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    7e60:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    7e64:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    7e68:	f384 8811 	msr	BASEPRI, r4
    7e6c:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    7e70:	bd10      	pop	{r4, pc}
    7e72:	bf00      	nop
    7e74:	200016f4 	.word	0x200016f4

00007e78 <usbd_ep_abort>:
{
    7e78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    7e7a:	4601      	mov	r1, r0
	__asm__ volatile(
    7e7c:	f04f 0320 	mov.w	r3, #32
    7e80:	f3ef 8511 	mrs	r5, BASEPRI
    7e84:	f383 8812 	msr	BASEPRI_MAX, r3
    7e88:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    7e8c:	f7ff fac4 	bl	7418 <ep_state_access>
    7e90:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    7e92:	4608      	mov	r0, r1
    7e94:	f003 f836 	bl	af04 <ep2bit>
    7e98:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    7e9a:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    7e9e:	fa02 f200 	lsl.w	r2, r2, r0
    7ea2:	482e      	ldr	r0, [pc, #184]	; (7f5c <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    7ea4:	d118      	bne.n	7ed8 <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    7ea6:	6803      	ldr	r3, [r0, #0]
    7ea8:	ea32 0403 	bics.w	r4, r2, r3
    7eac:	d00a      	beq.n	7ec4 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    7eae:	4608      	mov	r0, r1
    7eb0:	f7ff ffb8 	bl	7e24 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    7eb4:	2303      	movs	r3, #3
    7eb6:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    7eb8:	f385 8811 	msr	BASEPRI, r5
    7ebc:	f3bf 8f6f 	isb	sy
}
    7ec0:	b003      	add	sp, #12
    7ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7ec4:	ea23 0302 	bic.w	r3, r3, r2
            p_state->handler.consumer = NULL;
    7ec8:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7eca:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    7ecc:	4b24      	ldr	r3, [pc, #144]	; (7f60 <usbd_ep_abort+0xe8>)
    7ece:	6818      	ldr	r0, [r3, #0]
    7ed0:	ea20 0002 	bic.w	r0, r0, r2
    7ed4:	6018      	str	r0, [r3, #0]
    7ed6:	e7ed      	b.n	7eb4 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    7ed8:	070b      	lsls	r3, r1, #28
    7eda:	d415      	bmi.n	7f08 <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
    7edc:	2980      	cmp	r1, #128	; 0x80
    7ede:	4b21      	ldr	r3, [pc, #132]	; (7f64 <usbd_ep_abort+0xec>)
    7ee0:	d02f      	beq.n	7f42 <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    7ee2:	f001 040f 	and.w	r4, r1, #15
    7ee6:	f204 34da 	addw	r4, r4, #986	; 0x3da
    7eea:	0064      	lsls	r4, r4, #1
    7eec:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7ef0:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    7ef4:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7ef8:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    7efa:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    7efe:	433c      	orrs	r4, r7
    7f00:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    7f04:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    7f08:	4f15      	ldr	r7, [pc, #84]	; (7f60 <usbd_ep_abort+0xe8>)
    7f0a:	6804      	ldr	r4, [r0, #0]
    7f0c:	683b      	ldr	r3, [r7, #0]
    7f0e:	ea64 0c03 	orn	ip, r4, r3
    7f12:	ea1c 0f02 	tst.w	ip, r2
    7f16:	d0cf      	beq.n	7eb8 <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    7f18:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7f1a:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    7f1e:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    7f20:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    7f22:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    7f24:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    7f26:	2303      	movs	r3, #3
    7f28:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    7f2a:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    7f2e:	4b0e      	ldr	r3, [pc, #56]	; (7f68 <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    7f30:	f88d 1006 	strb.w	r1, [sp, #6]
    7f34:	2206      	movs	r2, #6
            m_event_handler(&evt);
    7f36:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    7f38:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    7f3c:	a801      	add	r0, sp, #4
    7f3e:	4798      	blx	r3
    7f40:	e7ba      	b.n	7eb8 <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    7f42:	f240 74b4 	movw	r4, #1972	; 0x7b4
    7f46:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7f4a:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    7f4e:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    7f52:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    7f54:	f044 0404 	orr.w	r4, r4, #4
    7f58:	e7d1      	b.n	7efe <usbd_ep_abort+0x86>
    7f5a:	bf00      	nop
    7f5c:	20001684 	.word	0x20001684
    7f60:	200016f4 	.word	0x200016f4
    7f64:	40027000 	.word	0x40027000
    7f68:	20001818 	.word	0x20001818

00007f6c <ev_setup_handler>:
{
    7f6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    7f6e:	4b17      	ldr	r3, [pc, #92]	; (7fcc <ev_setup_handler+0x60>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    7f70:	4c17      	ldr	r4, [pc, #92]	; (7fd0 <ev_setup_handler+0x64>)
    7f72:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    7f76:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    7f78:	4e16      	ldr	r6, [pc, #88]	; (7fd4 <ev_setup_handler+0x68>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    7f7a:	43da      	mvns	r2, r3
    7f7c:	4b16      	ldr	r3, [pc, #88]	; (7fd8 <ev_setup_handler+0x6c>)
        & (1U <<ep2bit(m_last_setup_dir)))
    7f7e:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    7f80:	681b      	ldr	r3, [r3, #0]
    7f82:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    7f84:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    7f86:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    7f88:	f002 ffbc 	bl	af04 <ep2bit>
    7f8c:	2301      	movs	r3, #1
    7f8e:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    7f90:	4213      	tst	r3, r2
    7f92:	d002      	beq.n	7f9a <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    7f94:	4608      	mov	r0, r1
    7f96:	f7ff ff6f 	bl	7e78 <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    7f9a:	f005 0580 	and.w	r5, r5, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
    7f9e:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    7fa2:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    7fa4:	f7ff fb66 	bl	7674 <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    7fa8:	6823      	ldr	r3, [r4, #0]
    7faa:	f043 0301 	orr.w	r3, r3, #1
    7fae:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    7fb0:	2300      	movs	r3, #0
    7fb2:	f8ad 3005 	strh.w	r3, [sp, #5]
    7fb6:	f88d 3007 	strb.w	r3, [sp, #7]
    7fba:	2305      	movs	r3, #5
    7fbc:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    7fc0:	4b06      	ldr	r3, [pc, #24]	; (7fdc <ev_setup_handler+0x70>)
    7fc2:	a801      	add	r0, sp, #4
    7fc4:	681b      	ldr	r3, [r3, #0]
    7fc6:	4798      	blx	r3
}
    7fc8:	b002      	add	sp, #8
    7fca:	bd70      	pop	{r4, r5, r6, pc}
    7fcc:	40027000 	.word	0x40027000
    7fd0:	200016f4 	.word	0x200016f4
    7fd4:	20001976 	.word	0x20001976
    7fd8:	20001684 	.word	0x20001684
    7fdc:	20001818 	.word	0x20001818

00007fe0 <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
    7fe0:	4b1b      	ldr	r3, [pc, #108]	; (8050 <CONFIG_PM_SRAM_SIZE+0x50>)
    7fe2:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    7fe6:	2300      	movs	r3, #0
{
    7fe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
    7fec:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    7fee:	461d      	mov	r5, r3
    while (to_process)
    7ff0:	b970      	cbnz	r0, 8010 <CONFIG_PM_SRAM_SIZE+0x10>
        m_isr[event_nr]();
    7ff2:	4f18      	ldr	r7, [pc, #96]	; (8054 <CONFIG_PM_SRAM_SIZE+0x54>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    7ff4:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    7ff8:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    7ffc:	f04f 0801 	mov.w	r8, #1
    while (active)
    8000:	b9bc      	cbnz	r4, 8032 <CONFIG_PM_SRAM_SIZE+0x32>
    usbd_dmareq_process();
    8002:	f7ff fd69 	bl	7ad8 <usbd_dmareq_process>
    if (setup_active)
    8006:	b306      	cbz	r6, 804a <CONFIG_PM_SRAM_SIZE+0x4a>
}
    8008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    800c:	f7ff bfae 	b.w	7f6c <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    8010:	fa90 f2a0 	rbit	r2, r0
    8014:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    8018:	490f      	ldr	r1, [pc, #60]	; (8058 <CONFIG_PM_SRAM_SIZE+0x58>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    801a:	0096      	lsls	r6, r2, #2
    801c:	4431      	add	r1, r6
            active |= 1UL << event_nr;
    801e:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8022:	680e      	ldr	r6, [r1, #0]
    if (ret)
    8024:	b116      	cbz	r6, 802c <CONFIG_PM_SRAM_SIZE+0x2c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    8026:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    8028:	6809      	ldr	r1, [r1, #0]
    802a:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    802c:	ea20 0002 	bic.w	r0, r0, r2
    8030:	e7de      	b.n	7ff0 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    8032:	fa94 f5a4 	rbit	r5, r4
    8036:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    803a:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    803e:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    8042:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    8044:	ea24 0405 	bic.w	r4, r4, r5
    8048:	e7da      	b.n	8000 <CONFIG_PM_SRAM_SIZE>
}
    804a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    804e:	bf00      	nop
    8050:	40027000 	.word	0x40027000
    8054:	0000bc88 	.word	0x0000bc88
    8058:	40027100 	.word	0x40027100

0000805c <usbd_ep_abort_all>:
{
    805c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    805e:	4e11      	ldr	r6, [pc, #68]	; (80a4 <usbd_ep_abort_all+0x48>)
    8060:	4b11      	ldr	r3, [pc, #68]	; (80a8 <usbd_ep_abort_all+0x4c>)
    8062:	6834      	ldr	r4, [r6, #0]
    8064:	681b      	ldr	r3, [r3, #0]
    8066:	0c24      	lsrs	r4, r4, #16
    8068:	0424      	lsls	r4, r4, #16
    806a:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
    806c:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    806e:	b91c      	cbnz	r4, 8078 <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    8070:	f240 13ff 	movw	r3, #511	; 0x1ff
    8074:	6033      	str	r3, [r6, #0]
}
    8076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    8078:	fa94 f5a4 	rbit	r5, r4
    807c:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8080:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    8082:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    8084:	bfc6      	itte	gt
    8086:	f1a5 0010 	subgt.w	r0, r5, #16
    808a:	b2c0      	uxtbgt	r0, r0
    808c:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    8090:	0703      	lsls	r3, r0, #28
    8092:	d401      	bmi.n	8098 <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
    8094:	f7ff fef0 	bl	7e78 <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    8098:	fa07 f505 	lsl.w	r5, r7, r5
    809c:	ea24 0405 	bic.w	r4, r4, r5
    80a0:	e7e5      	b.n	806e <usbd_ep_abort_all+0x12>
    80a2:	bf00      	nop
    80a4:	200016f4 	.word	0x200016f4
    80a8:	20001684 	.word	0x20001684

000080ac <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    80ac:	4b0c      	ldr	r3, [pc, #48]	; (80e0 <nrfx_usbd_stop+0x34>)
    80ae:	2280      	movs	r2, #128	; 0x80
{
    80b0:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    80b2:	2027      	movs	r0, #39	; 0x27
    80b4:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    80b8:	f7fa fd2a 	bl	2b10 <arch_irq_is_enabled>
    80bc:	b170      	cbz	r0, 80dc <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    80be:	4c09      	ldr	r4, [pc, #36]	; (80e4 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
    80c0:	f7ff ffcc 	bl	805c <usbd_ep_abort_all>
    80c4:	2300      	movs	r3, #0
    80c6:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
    80ca:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
    80cc:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
    80d0:	f7fa fd0a 	bl	2ae8 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    80d4:	f04f 33ff 	mov.w	r3, #4294967295
    80d8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    80dc:	bd10      	pop	{r4, pc}
    80de:	bf00      	nop
    80e0:	e000e100 	.word	0xe000e100
    80e4:	40027000 	.word	0x40027000

000080e8 <nrfx_usbd_disable>:
{
    80e8:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    80ea:	f7ff ffdf 	bl	80ac <nrfx_usbd_stop>
    return p_reg->INTENSET;
    80ee:	4b08      	ldr	r3, [pc, #32]	; (8110 <nrfx_usbd_disable+0x28>)
    80f0:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    80f4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    80f8:	2200      	movs	r2, #0
    80fa:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    80fe:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    m_dma_pending = false;
    8102:	4b04      	ldr	r3, [pc, #16]	; (8114 <nrfx_usbd_disable+0x2c>)
    8104:	701a      	strb	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    8106:	4b04      	ldr	r3, [pc, #16]	; (8118 <nrfx_usbd_disable+0x30>)
    8108:	2201      	movs	r2, #1
    810a:	701a      	strb	r2, [r3, #0]
}
    810c:	bd08      	pop	{r3, pc}
    810e:	bf00      	nop
    8110:	40027000 	.word	0x40027000
    8114:	20001974 	.word	0x20001974
    8118:	20001975 	.word	0x20001975

0000811c <nrfx_usbd_suspend>:
{
    811c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    811e:	f04f 0320 	mov.w	r3, #32
    8122:	f3ef 8511 	mrs	r5, BASEPRI
    8126:	f383 8812 	msr	BASEPRI_MAX, r3
    812a:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    812e:	4b11      	ldr	r3, [pc, #68]	; (8174 <nrfx_usbd_suspend+0x58>)
    8130:	781b      	ldrb	r3, [r3, #0]
    8132:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    8136:	b933      	cbnz	r3, 8146 <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
    8138:	2400      	movs	r4, #0
	__asm__ volatile(
    813a:	f385 8811 	msr	BASEPRI, r5
    813e:	f3bf 8f6f 	isb	sy
}
    8142:	4620      	mov	r0, r4
    8144:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
    8146:	f7ff ff89 	bl	805c <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
    814a:	4b0b      	ldr	r3, [pc, #44]	; (8178 <nrfx_usbd_suspend+0x5c>)
    814c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    8150:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    8154:	d1f0      	bne.n	8138 <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    8156:	2101      	movs	r1, #1
    8158:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    815c:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    8160:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    8164:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    8166:	bf42      	ittt	mi
    8168:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    816c:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    8170:	4614      	movmi	r4, r2
}
    8172:	e7e2      	b.n	813a <nrfx_usbd_suspend+0x1e>
    8174:	20001973 	.word	0x20001973
    8178:	40027000 	.word	0x40027000

0000817c <nrfx_usbd_ep_disable>:
{
    817c:	b510      	push	{r4, lr}
    817e:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    8180:	f7ff fe7a 	bl	7e78 <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    8184:	4a10      	ldr	r2, [pc, #64]	; (81c8 <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    8186:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    818a:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    818e:	f04f 0301 	mov.w	r3, #1
    8192:	bf14      	ite	ne
    8194:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    8198:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    819c:	fa03 f300 	lsl.w	r3, r3, r0
    81a0:	ea6f 0303 	mvn.w	r3, r3
    81a4:	bf15      	itete	ne
    81a6:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    81a8:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    81aa:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    81ae:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    81b2:	bf14      	ite	ne
    81b4:	4b05      	ldrne	r3, [pc, #20]	; (81cc <nrfx_usbd_ep_disable+0x50>)
    81b6:	4b06      	ldreq	r3, [pc, #24]	; (81d0 <nrfx_usbd_ep_disable+0x54>)
    81b8:	5c1a      	ldrb	r2, [r3, r0]
    81ba:	2301      	movs	r3, #1
    81bc:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    81be:	4a02      	ldr	r2, [pc, #8]	; (81c8 <nrfx_usbd_ep_disable+0x4c>)
    81c0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    81c4:	bd10      	pop	{r4, pc}
    81c6:	bf00      	nop
    81c8:	40027000 	.word	0x40027000
    81cc:	0000dd7d 	.word	0x0000dd7d
    81d0:	0000dd86 	.word	0x0000dd86

000081d4 <nrfx_usbd_ep_enable>:
{
    81d4:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    81d6:	b243      	sxtb	r3, r0
    81d8:	2b00      	cmp	r3, #0
    81da:	4b23      	ldr	r3, [pc, #140]	; (8268 <nrfx_usbd_ep_enable+0x94>)
    81dc:	4a23      	ldr	r2, [pc, #140]	; (826c <nrfx_usbd_ep_enable+0x98>)
    81de:	bfa8      	it	ge
    81e0:	461a      	movge	r2, r3
    81e2:	f000 030f 	and.w	r3, r0, #15
    81e6:	f04f 0401 	mov.w	r4, #1
    81ea:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
    81ec:	4a20      	ldr	r2, [pc, #128]	; (8270 <nrfx_usbd_ep_enable+0x9c>)
    81ee:	fa04 f101 	lsl.w	r1, r4, r1
{
    81f2:	4605      	mov	r5, r0
    81f4:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
    81f8:	da0c      	bge.n	8214 <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    81fa:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    81fe:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    8200:	07c8      	lsls	r0, r1, #31
    8202:	d406      	bmi.n	8212 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
    8204:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    8208:	fa04 f303 	lsl.w	r3, r4, r3
    820c:	4303      	orrs	r3, r0
    820e:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
    8212:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    8214:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
    8218:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    821a:	07c9      	lsls	r1, r1, #31
    821c:	d4f9      	bmi.n	8212 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
    821e:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
    8222:	fa04 f103 	lsl.w	r1, r4, r3
    8226:	4331      	orrs	r1, r6
    8228:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    822c:	2b00      	cmp	r3, #0
    822e:	d0f0      	beq.n	8212 <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
    8230:	0703      	lsls	r3, r0, #28
    8232:	d4ee      	bmi.n	8212 <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
    8234:	f04f 0320 	mov.w	r3, #32
    8238:	f3ef 8611 	mrs	r6, BASEPRI
    823c:	f383 8812 	msr	BASEPRI_MAX, r3
    8240:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    8244:	f7ff fdee 	bl	7e24 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8248:	4628      	mov	r0, r5
    824a:	f002 fe5b 	bl	af04 <ep2bit>
    824e:	4a09      	ldr	r2, [pc, #36]	; (8274 <nrfx_usbd_ep_enable+0xa0>)
    8250:	6813      	ldr	r3, [r2, #0]
    8252:	fa04 f000 	lsl.w	r0, r4, r0
    8256:	ea23 0000 	bic.w	r0, r3, r0
    825a:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
    825c:	f386 8811 	msr	BASEPRI, r6
    8260:	f3bf 8f6f 	isb	sy
}
    8264:	e7d5      	b.n	8212 <nrfx_usbd_ep_enable+0x3e>
    8266:	bf00      	nop
    8268:	0000dd86 	.word	0x0000dd86
    826c:	0000dd7d 	.word	0x0000dd7d
    8270:	40027000 	.word	0x40027000
    8274:	20001684 	.word	0x20001684

00008278 <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    8278:	0603      	lsls	r3, r0, #24
{
    827a:	b510      	push	{r4, lr}
    827c:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    827e:	d405      	bmi.n	828c <nrfx_usbd_ep_stall_clear+0x14>
    8280:	f7ff fd40 	bl	7d04 <nrfx_usbd_ep_stall_check>
    8284:	b110      	cbz	r0, 828c <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    8286:	4620      	mov	r0, r4
    8288:	f7ff fdcc 	bl	7e24 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    828c:	4b01      	ldr	r3, [pc, #4]	; (8294 <nrfx_usbd_ep_stall_clear+0x1c>)
    828e:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    8292:	bd10      	pop	{r4, pc}
    8294:	40027000 	.word	0x40027000

00008298 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    8298:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    829a:	4c11      	ldr	r4, [pc, #68]	; (82e0 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    829c:	4a11      	ldr	r2, [pc, #68]	; (82e4 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    829e:	4912      	ldr	r1, [pc, #72]	; (82e8 <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    82a0:	2303      	movs	r3, #3
    82a2:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    82a4:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    82a6:	4b11      	ldr	r3, [pc, #68]	; (82ec <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    82a8:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    82aa:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    82ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
    82b0:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    82b2:	2300      	movs	r3, #0
    82b4:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    82b6:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    82b8:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    82ba:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    82bc:	4a0c      	ldr	r2, [pc, #48]	; (82f0 <_DoInit+0x58>)
    82be:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    82c0:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    82c2:	2210      	movs	r2, #16
    82c4:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    82c6:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    82c8:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    82ca:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    82cc:	f002 fa2d 	bl	a72a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    82d0:	4908      	ldr	r1, [pc, #32]	; (82f4 <_DoInit+0x5c>)
    82d2:	4620      	mov	r0, r4
    82d4:	f002 fa29 	bl	a72a <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    82d8:	2320      	movs	r3, #32
    82da:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    82dc:	bd10      	pop	{r4, pc}
    82de:	bf00      	nop
    82e0:	2000185c 	.word	0x2000185c
    82e4:	0000dd8f 	.word	0x0000dd8f
    82e8:	0000dd98 	.word	0x0000dd98
    82ec:	20001987 	.word	0x20001987
    82f0:	20001977 	.word	0x20001977
    82f4:	0000dd9c 	.word	0x0000dd9c

000082f8 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    82f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    82fc:	4f23      	ldr	r7, [pc, #140]	; (838c <SEGGER_RTT_WriteSkipNoLock+0x94>)
    82fe:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    8302:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    8304:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    8308:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    830a:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    830c:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    830e:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    8310:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    8312:	d834      	bhi.n	837e <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    8314:	f8d2 a020 	ldr.w	sl, [r2, #32]
    8318:	ebaa 0905 	sub.w	r9, sl, r5
    831c:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    8320:	4294      	cmp	r4, r2
    8322:	d811      	bhi.n	8348 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    8324:	f04f 0918 	mov.w	r9, #24
    8328:	fb06 9309 	mla	r3, r6, r9, r9
    832c:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    832e:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    8330:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    8332:	4641      	mov	r1, r8
    8334:	4428      	add	r0, r5
    8336:	f002 fa1e 	bl	a776 <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    833a:	fb09 7606 	mla	r6, r9, r6, r7
    833e:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    8340:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    8342:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    8344:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    8348:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    834a:	429c      	cmp	r4, r3
    834c:	d81b      	bhi.n	8386 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    834e:	fb00 bb0b 	mla	fp, r0, fp, fp
    8352:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    8354:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    8356:	f8db 0004 	ldr.w	r0, [fp, #4]
    835a:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    835c:	4428      	add	r0, r5
    835e:	f002 fa0a 	bl	a776 <memcpy>
      if (NumBytes) {
    8362:	ebb4 040a 	subs.w	r4, r4, sl
    8366:	d006      	beq.n	8376 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    8368:	f8db 0004 	ldr.w	r0, [fp, #4]
    836c:	4622      	mov	r2, r4
    836e:	eb08 0109 	add.w	r1, r8, r9
    8372:	f002 fa00 	bl	a776 <memcpy>
      pRing->WrOff = NumBytes;
    8376:	2018      	movs	r0, #24
    8378:	fb00 7606 	mla	r6, r0, r6, r7
    837c:	e7e0      	b.n	8340 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    837e:	3b01      	subs	r3, #1
    8380:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    8382:	42a3      	cmp	r3, r4
    8384:	d2ce      	bcs.n	8324 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    8386:	2000      	movs	r0, #0
    8388:	e7dc      	b.n	8344 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    838a:	bf00      	nop
    838c:	2000185c 	.word	0x2000185c

00008390 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    8390:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    8392:	4b16      	ldr	r3, [pc, #88]	; (83ec <SEGGER_RTT_WriteNoLock+0x5c>)
    8394:	2418      	movs	r4, #24
    8396:	fb00 4504 	mla	r5, r0, r4, r4
    839a:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    839c:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    83a0:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    83a2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    83a4:	2c01      	cmp	r4, #1
    83a6:	d00e      	beq.n	83c6 <SEGGER_RTT_WriteNoLock+0x36>
    83a8:	2c02      	cmp	r4, #2
    83aa:	d018      	beq.n	83de <SEGGER_RTT_WriteNoLock+0x4e>
    83ac:	b9e4      	cbnz	r4, 83e8 <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    83ae:	4628      	mov	r0, r5
    83b0:	f002 fdfc 	bl	afac <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    83b4:	4286      	cmp	r6, r0
    83b6:	d804      	bhi.n	83c2 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    83b8:	4632      	mov	r2, r6
    83ba:	4628      	mov	r0, r5
    83bc:	f002 fdff 	bl	afbe <_WriteNoCheck>
    83c0:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    83c2:	4620      	mov	r0, r4
    83c4:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    83c6:	4628      	mov	r0, r5
    83c8:	f002 fdf0 	bl	afac <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    83cc:	4286      	cmp	r6, r0
    83ce:	4634      	mov	r4, r6
    83d0:	bf28      	it	cs
    83d2:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    83d4:	4622      	mov	r2, r4
    83d6:	4628      	mov	r0, r5
    83d8:	f002 fdf1 	bl	afbe <_WriteNoCheck>
    break;
    83dc:	e7f1      	b.n	83c2 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    83de:	4628      	mov	r0, r5
}
    83e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    83e4:	f002 be07 	b.w	aff6 <_WriteBlocking>
  switch (pRing->Flags) {
    83e8:	2400      	movs	r4, #0
  return Status;
    83ea:	e7ea      	b.n	83c2 <SEGGER_RTT_WriteNoLock+0x32>
    83ec:	2000185c 	.word	0x2000185c

000083f0 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    83f0:	4b03      	ldr	r3, [pc, #12]	; (8400 <SEGGER_RTT_HasDataUp+0x10>)
    83f2:	2218      	movs	r2, #24
    83f4:	fb02 3300 	mla	r3, r2, r0, r3
    83f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    83fa:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    83fc:	1a80      	subs	r0, r0, r2
    83fe:	4770      	bx	lr
    8400:	2000185c 	.word	0x2000185c

00008404 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8404:	4b0e      	ldr	r3, [pc, #56]	; (8440 <z_sys_init_run_level+0x3c>)
{
    8406:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8408:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    840c:	3001      	adds	r0, #1
    840e:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    8412:	42a6      	cmp	r6, r4
    8414:	d800      	bhi.n	8418 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    8416:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    8418:	e9d4 3500 	ldrd	r3, r5, [r4]
    841c:	4628      	mov	r0, r5
    841e:	4798      	blx	r3
		if (dev != NULL) {
    8420:	b165      	cbz	r5, 843c <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    8422:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    8424:	b130      	cbz	r0, 8434 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    8426:	2800      	cmp	r0, #0
    8428:	bfb8      	it	lt
    842a:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    842c:	28ff      	cmp	r0, #255	; 0xff
    842e:	bfa8      	it	ge
    8430:	20ff      	movge	r0, #255	; 0xff
    8432:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    8434:	785a      	ldrb	r2, [r3, #1]
    8436:	f042 0201 	orr.w	r2, r2, #1
    843a:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    843c:	3408      	adds	r4, #8
    843e:	e7e8      	b.n	8412 <z_sys_init_run_level+0xe>
    8440:	0000bcec 	.word	0x0000bcec

00008444 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    8444:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    8446:	4605      	mov	r5, r0
    8448:	b910      	cbnz	r0, 8450 <z_impl_device_get_binding+0xc>
		return NULL;
    844a:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    844c:	4620      	mov	r0, r4
    844e:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    8450:	7803      	ldrb	r3, [r0, #0]
    8452:	2b00      	cmp	r3, #0
    8454:	d0f9      	beq.n	844a <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    8456:	4c0e      	ldr	r4, [pc, #56]	; (8490 <z_impl_device_get_binding+0x4c>)
    8458:	4e0e      	ldr	r6, [pc, #56]	; (8494 <z_impl_device_get_binding+0x50>)
    845a:	42b4      	cmp	r4, r6
    845c:	d108      	bne.n	8470 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    845e:	4c0c      	ldr	r4, [pc, #48]	; (8490 <z_impl_device_get_binding+0x4c>)
    8460:	42b4      	cmp	r4, r6
    8462:	d0f2      	beq.n	844a <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    8464:	4620      	mov	r0, r4
    8466:	f002 fdf7 	bl	b058 <z_device_is_ready>
    846a:	b950      	cbnz	r0, 8482 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    846c:	3418      	adds	r4, #24
    846e:	e7f7      	b.n	8460 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    8470:	4620      	mov	r0, r4
    8472:	f002 fdf1 	bl	b058 <z_device_is_ready>
    8476:	b110      	cbz	r0, 847e <z_impl_device_get_binding+0x3a>
    8478:	6823      	ldr	r3, [r4, #0]
    847a:	42ab      	cmp	r3, r5
    847c:	d0e6      	beq.n	844c <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    847e:	3418      	adds	r4, #24
    8480:	e7eb      	b.n	845a <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    8482:	6821      	ldr	r1, [r4, #0]
    8484:	4628      	mov	r0, r5
    8486:	f002 f96a 	bl	a75e <strcmp>
    848a:	2800      	cmp	r0, #0
    848c:	d1ee      	bne.n	846c <z_impl_device_get_binding+0x28>
    848e:	e7dd      	b.n	844c <z_impl_device_get_binding+0x8>
    8490:	0000b7a4 	.word	0x0000b7a4
    8494:	0000b84c 	.word	0x0000b84c

00008498 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    8498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    849c:	b086      	sub	sp, #24
    849e:	4605      	mov	r5, r0
    84a0:	af00      	add	r7, sp, #0
    84a2:	460e      	mov	r6, r1
	__asm__ volatile(
    84a4:	f04f 0320 	mov.w	r3, #32
    84a8:	f3ef 8811 	mrs	r8, BASEPRI
    84ac:	f383 8812 	msr	BASEPRI_MAX, r3
    84b0:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    84b4:	f000 fff2 	bl	949c <z_impl_z_current_get>
    84b8:	2d04      	cmp	r5, #4
    84ba:	bf96      	itet	ls
    84bc:	4b2c      	ldrls	r3, [pc, #176]	; (8570 <z_fatal_error+0xd8>)
    84be:	4b2d      	ldrhi	r3, [pc, #180]	; (8574 <z_fatal_error+0xdc>)
    84c0:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    84c4:	492c      	ldr	r1, [pc, #176]	; (8578 <z_fatal_error+0xe0>)
    84c6:	46e9      	mov	r9, sp
    84c8:	b08a      	sub	sp, #40	; 0x28
    84ca:	466a      	mov	r2, sp
    84cc:	f04f 0a00 	mov.w	sl, #0
    84d0:	61d3      	str	r3, [r2, #28]
    84d2:	2303      	movs	r3, #3
    84d4:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    84d8:	4b28      	ldr	r3, [pc, #160]	; (857c <z_fatal_error+0xe4>)
    84da:	f8c2 a020 	str.w	sl, [r2, #32]
    84de:	e9c2 1505 	strd	r1, r5, [r2, #20]
    84e2:	4604      	mov	r4, r0
    84e4:	f842 3f10 	str.w	r3, [r2, #16]!
    84e8:	4825      	ldr	r0, [pc, #148]	; (8580 <z_fatal_error+0xe8>)
    84ea:	4653      	mov	r3, sl
    84ec:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
    84f0:	f002 f894 	bl	a61c <z_impl_z_log_msg2_static_create>
    84f4:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    84f6:	b17e      	cbz	r6, 8518 <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    84f8:	69f3      	ldr	r3, [r6, #28]
    84fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
    84fe:	b15b      	cbz	r3, 8518 <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    8500:	4b20      	ldr	r3, [pc, #128]	; (8584 <z_fatal_error+0xec>)
    8502:	617b      	str	r3, [r7, #20]
    8504:	2302      	movs	r3, #2
    8506:	613b      	str	r3, [r7, #16]
    8508:	481d      	ldr	r0, [pc, #116]	; (8580 <z_fatal_error+0xe8>)
    850a:	4653      	mov	r3, sl
    850c:	f107 0210 	add.w	r2, r7, #16
    8510:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8514:	f002 f882 	bl	a61c <z_impl_z_log_msg2_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    8518:	b12c      	cbz	r4, 8526 <z_fatal_error+0x8e>
    851a:	4620      	mov	r0, r4
    851c:	f002 fddc 	bl	b0d8 <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    8520:	b108      	cbz	r0, 8526 <z_fatal_error+0x8e>
    8522:	7803      	ldrb	r3, [r0, #0]
    8524:	b903      	cbnz	r3, 8528 <z_fatal_error+0x90>
		thread_name = "unknown";
    8526:	4818      	ldr	r0, [pc, #96]	; (8588 <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    8528:	4b18      	ldr	r3, [pc, #96]	; (858c <z_fatal_error+0xf4>)
    852a:	46e9      	mov	r9, sp
    852c:	b08a      	sub	sp, #40	; 0x28
    852e:	466a      	mov	r2, sp
    8530:	e9c2 3405 	strd	r3, r4, [r2, #20]
    8534:	2303      	movs	r3, #3
    8536:	f882 3020 	strb.w	r3, [r2, #32]
    853a:	4b15      	ldr	r3, [pc, #84]	; (8590 <z_fatal_error+0xf8>)
    853c:	61d0      	str	r0, [r2, #28]
    853e:	f842 3f10 	str.w	r3, [r2, #16]!
    8542:	2300      	movs	r3, #0
    8544:	480e      	ldr	r0, [pc, #56]	; (8580 <z_fatal_error+0xe8>)
    8546:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    854a:	f002 f867 	bl	a61c <z_impl_z_log_msg2_static_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    854e:	4631      	mov	r1, r6
    8550:	46cd      	mov	sp, r9
    8552:	4628      	mov	r0, r5
    8554:	f7fd f97a 	bl	584c <k_sys_fatal_error_handler>
	__asm__ volatile(
    8558:	f388 8811 	msr	BASEPRI, r8
    855c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    8560:	4620      	mov	r0, r4
    8562:	f7fa ff2b 	bl	33bc <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    8566:	3718      	adds	r7, #24
    8568:	46bd      	mov	sp, r7
    856a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    856e:	bf00      	nop
    8570:	0000bd04 	.word	0x0000bd04
    8574:	0000dda3 	.word	0x0000dda3
    8578:	0000ddb9 	.word	0x0000ddb9
    857c:	01000005 	.word	0x01000005
    8580:	0000b9ac 	.word	0x0000b9ac
    8584:	0000dde1 	.word	0x0000dde1
    8588:	0000ddb1 	.word	0x0000ddb1
    858c:	0000de02 	.word	0x0000de02
    8590:	01000004 	.word	0x01000004

00008594 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    8594:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    8596:	4b0a      	ldr	r3, [pc, #40]	; (85c0 <bg_thread_main+0x2c>)
    8598:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    859a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    859c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    859e:	f7ff ff31 	bl	8404 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    85a2:	f001 f9ef 	bl	9984 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    85a6:	2003      	movs	r0, #3
    85a8:	f7ff ff2c 	bl	8404 <z_sys_init_run_level>

	z_init_static_threads();
    85ac:	f000 f968 	bl	8880 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    85b0:	f001 fa06 	bl	99c0 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    85b4:	4a03      	ldr	r2, [pc, #12]	; (85c4 <bg_thread_main+0x30>)
    85b6:	7b13      	ldrb	r3, [r2, #12]
    85b8:	f023 0301 	bic.w	r3, r3, #1
    85bc:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    85be:	bd08      	pop	{r3, pc}
    85c0:	20001d87 	.word	0x20001d87
    85c4:	200008b0 	.word	0x200008b0

000085c8 <z_bss_zero>:
{
    85c8:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    85ca:	4803      	ldr	r0, [pc, #12]	; (85d8 <z_bss_zero+0x10>)
    85cc:	4a03      	ldr	r2, [pc, #12]	; (85dc <z_bss_zero+0x14>)
    85ce:	2100      	movs	r1, #0
    85d0:	1a12      	subs	r2, r2, r0
    85d2:	f002 fd4b 	bl	b06c <z_early_memset>
}
    85d6:	bd08      	pop	{r3, pc}
    85d8:	20000248 	.word	0x20000248
    85dc:	20001d88 	.word	0x20001d88

000085e0 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    85e0:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    85e2:	2300      	movs	r3, #0
{
    85e4:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    85e6:	2201      	movs	r2, #1
    85e8:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    85ec:	4e13      	ldr	r6, [pc, #76]	; (863c <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    85ee:	4d14      	ldr	r5, [pc, #80]	; (8640 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    85f0:	9301      	str	r3, [sp, #4]
    85f2:	220f      	movs	r2, #15
    85f4:	e9cd 3202 	strd	r3, r2, [sp, #8]
    85f8:	4912      	ldr	r1, [pc, #72]	; (8644 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    85fa:	2318      	movs	r3, #24
    85fc:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    8600:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    8604:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    8606:	f44f 7090 	mov.w	r0, #288	; 0x120
    860a:	fb00 1104 	mla	r1, r0, r4, r1
    860e:	4b0e      	ldr	r3, [pc, #56]	; (8648 <z_init_cpu+0x68>)
    8610:	9500      	str	r5, [sp, #0]
    8612:	f44f 7280 	mov.w	r2, #256	; 0x100
    8616:	4630      	mov	r0, r6
    8618:	f000 f8d4 	bl	87c4 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    861c:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    861e:	480b      	ldr	r0, [pc, #44]	; (864c <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    8620:	752c      	strb	r4, [r5, #20]
    8622:	f023 0304 	bic.w	r3, r3, #4
    8626:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    8628:	f44f 6302 	mov.w	r3, #2080	; 0x820
    862c:	fb03 0404 	mla	r4, r3, r4, r0
    8630:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    8632:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    8634:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    8636:	b006      	add	sp, #24
    8638:	bd70      	pop	{r4, r5, r6, pc}
    863a:	bf00      	nop
    863c:	20000830 	.word	0x20000830
    8640:	20001904 	.word	0x20001904
    8644:	20002900 	.word	0x20002900
    8648:	00008939 	.word	0x00008939
    864c:	20002a20 	.word	0x20002a20

00008650 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    8650:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    8652:	4b2d      	ldr	r3, [pc, #180]	; (8708 <z_cstart+0xb8>)
    8654:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    8656:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    865a:	4d2c      	ldr	r5, [pc, #176]	; (870c <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    865c:	4e2c      	ldr	r6, [pc, #176]	; (8710 <z_cstart+0xc0>)
    865e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    8660:	4f2c      	ldr	r7, [pc, #176]	; (8714 <z_cstart+0xc4>)
    8662:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    8666:	2400      	movs	r4, #0
    8668:	616b      	str	r3, [r5, #20]
    866a:	23e0      	movs	r3, #224	; 0xe0
    866c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    8670:	77ec      	strb	r4, [r5, #31]
    8672:	762c      	strb	r4, [r5, #24]
    8674:	766c      	strb	r4, [r5, #25]
    8676:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    8678:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    867a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    867e:	626b      	str	r3, [r5, #36]	; 0x24
    8680:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    8684:	f7fa fe0e 	bl	32a4 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    8688:	f7fa f99a 	bl	29c0 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    868c:	f04f 33ff 	mov.w	r3, #4294967295
    8690:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    8692:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    8694:	f7fa ff60 	bl	3558 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    8698:	f7fa fea6 	bl	33e8 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    869c:	f7f8 ff9c 	bl	15d8 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    86a0:	f240 1301 	movw	r3, #257	; 0x101
    86a4:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    86a8:	ab06      	add	r3, sp, #24
    86aa:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    86ac:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    86b0:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    86b2:	f002 fcd0 	bl	b056 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    86b6:	4620      	mov	r0, r4
    86b8:	f7ff fea4 	bl	8404 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    86bc:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    86be:	4d16      	ldr	r5, [pc, #88]	; (8718 <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    86c0:	f7ff fea0 	bl	8404 <z_sys_init_run_level>
	z_sched_init();
    86c4:	f000 fe3c 	bl	9340 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    86c8:	4b14      	ldr	r3, [pc, #80]	; (871c <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
    86ca:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    86cc:	9305      	str	r3, [sp, #20]
    86ce:	2301      	movs	r3, #1
    86d0:	4913      	ldr	r1, [pc, #76]	; (8720 <z_cstart+0xd0>)
    86d2:	9400      	str	r4, [sp, #0]
    86d4:	e9cd 4303 	strd	r4, r3, [sp, #12]
    86d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
    86dc:	463b      	mov	r3, r7
    86de:	e9cd 4401 	strd	r4, r4, [sp, #4]
    86e2:	4628      	mov	r0, r5
    86e4:	f000 f86e 	bl	87c4 <z_setup_new_thread>
    86e8:	7b6a      	ldrb	r2, [r5, #13]
    86ea:	4606      	mov	r6, r0
    86ec:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    86f0:	4628      	mov	r0, r5
    86f2:	736a      	strb	r2, [r5, #13]
    86f4:	f002 fe47 	bl	b386 <z_ready_thread>
	z_init_cpu(0);
    86f8:	4620      	mov	r0, r4
    86fa:	f7ff ff71 	bl	85e0 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    86fe:	463a      	mov	r2, r7
    8700:	4631      	mov	r1, r6
    8702:	4628      	mov	r0, r5
    8704:	f7fa fad8 	bl	2cb8 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    8708:	20003240 	.word	0x20003240
    870c:	e000ed00 	.word	0xe000ed00
    8710:	20001904 	.word	0x20001904
    8714:	00008595 	.word	0x00008595
    8718:	200008b0 	.word	0x200008b0
    871c:	0000de64 	.word	0x0000de64
    8720:	200024e0 	.word	0x200024e0

00008724 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    8724:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    8726:	4b0e      	ldr	r3, [pc, #56]	; (8760 <init_mem_slab_module+0x3c>)
    8728:	4c0e      	ldr	r4, [pc, #56]	; (8764 <init_mem_slab_module+0x40>)
    872a:	42a3      	cmp	r3, r4
    872c:	d301      	bcc.n	8732 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    872e:	2000      	movs	r0, #0
	return rc;
}
    8730:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8732:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    8736:	ea41 0200 	orr.w	r2, r1, r0
    873a:	f012 0203 	ands.w	r2, r2, #3
    873e:	d10b      	bne.n	8758 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    8740:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    8742:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    8744:	42aa      	cmp	r2, r5
    8746:	d101      	bne.n	874c <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    8748:	331c      	adds	r3, #28
    874a:	e7ee      	b.n	872a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    874c:	695e      	ldr	r6, [r3, #20]
    874e:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    8750:	3201      	adds	r2, #1
		slab->free_list = p;
    8752:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    8754:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    8756:	e7f5      	b.n	8744 <init_mem_slab_module+0x20>
	return rc;
    8758:	f06f 0015 	mvn.w	r0, #21
    875c:	e7e8      	b.n	8730 <init_mem_slab_module+0xc>
    875e:	bf00      	nop
    8760:	20000150 	.word	0x20000150
    8764:	2000016c 	.word	0x2000016c

00008768 <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    8768:	b537      	push	{r0, r1, r2, r4, r5, lr}
    876a:	460c      	mov	r4, r1
	__asm__ volatile(
    876c:	f04f 0520 	mov.w	r5, #32
    8770:	f3ef 8111 	mrs	r1, BASEPRI
    8774:	f385 8812 	msr	BASEPRI_MAX, r5
    8778:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    877c:	6945      	ldr	r5, [r0, #20]
    877e:	b15d      	cbz	r5, 8798 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    8780:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    8782:	682b      	ldr	r3, [r5, #0]
    8784:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    8786:	6983      	ldr	r3, [r0, #24]
    8788:	3301      	adds	r3, #1
    878a:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    878c:	2000      	movs	r0, #0
	__asm__ volatile(
    878e:	f381 8811 	msr	BASEPRI, r1
    8792:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    8796:	e011      	b.n	87bc <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    8798:	ea52 0c03 	orrs.w	ip, r2, r3
    879c:	d103      	bne.n	87a6 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    879e:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    87a0:	f06f 000b 	mvn.w	r0, #11
    87a4:	e7f3      	b.n	878e <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    87a6:	e9cd 2300 	strd	r2, r3, [sp]
    87aa:	4602      	mov	r2, r0
    87ac:	3008      	adds	r0, #8
    87ae:	f000 fd1d 	bl	91ec <z_pend_curr>
		if (result == 0) {
    87b2:	b918      	cbnz	r0, 87bc <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    87b4:	4b02      	ldr	r3, [pc, #8]	; (87c0 <k_mem_slab_alloc+0x58>)
    87b6:	689b      	ldr	r3, [r3, #8]
    87b8:	695b      	ldr	r3, [r3, #20]
    87ba:	6023      	str	r3, [r4, #0]
}
    87bc:	b003      	add	sp, #12
    87be:	bd30      	pop	{r4, r5, pc}
    87c0:	20001904 	.word	0x20001904

000087c4 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    87c4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    87c8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    87ca:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    87cc:	2604      	movs	r6, #4
    87ce:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    87d0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    87d2:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    87d4:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    87d8:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    87da:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    87dc:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    87e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    87e2:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    87e4:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    87e8:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    87ea:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    87ee:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    87f2:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    87f4:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    87f6:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    87f8:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    87fc:	9202      	str	r2, [sp, #8]
    87fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8800:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    8802:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8804:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8806:	9200      	str	r2, [sp, #0]
    8808:	4642      	mov	r2, r8
{
    880a:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    880c:	f7fa fa22 	bl	2c54 <arch_new_thread>
	if (!_current) {
    8810:	4b04      	ldr	r3, [pc, #16]	; (8824 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    8812:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    8814:	689b      	ldr	r3, [r3, #8]
    8816:	b103      	cbz	r3, 881a <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    8818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    881a:	6723      	str	r3, [r4, #112]	; 0x70
}
    881c:	4640      	mov	r0, r8
    881e:	b004      	add	sp, #16
    8820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8824:	20001904 	.word	0x20001904

00008828 <z_impl_k_thread_create>:
{
    8828:	b5f0      	push	{r4, r5, r6, r7, lr}
    882a:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    882c:	2700      	movs	r7, #0
    882e:	9705      	str	r7, [sp, #20]
    8830:	9f10      	ldr	r7, [sp, #64]	; 0x40
    8832:	9704      	str	r7, [sp, #16]
    8834:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    8836:	9703      	str	r7, [sp, #12]
    8838:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    883a:	9702      	str	r7, [sp, #8]
{
    883c:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8840:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    8842:	9701      	str	r7, [sp, #4]
    8844:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    8846:	9700      	str	r7, [sp, #0]
{
    8848:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    884a:	f7ff ffbb 	bl	87c4 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    884e:	f1b5 3fff 	cmp.w	r5, #4294967295
    8852:	bf08      	it	eq
    8854:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    8858:	d005      	beq.n	8866 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    885a:	ea55 0306 	orrs.w	r3, r5, r6
    885e:	d105      	bne.n	886c <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    8860:	4620      	mov	r0, r4
    8862:	f000 fc67 	bl	9134 <z_sched_start>
}
    8866:	4620      	mov	r0, r4
    8868:	b007      	add	sp, #28
    886a:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    886c:	4903      	ldr	r1, [pc, #12]	; (887c <z_impl_k_thread_create+0x54>)
    886e:	4632      	mov	r2, r6
    8870:	462b      	mov	r3, r5
    8872:	f104 0018 	add.w	r0, r4, #24
    8876:	f000 fedf 	bl	9638 <z_add_timeout>
    887a:	e7f4      	b.n	8866 <z_impl_k_thread_create+0x3e>
    887c:	0000b3a7 	.word	0x0000b3a7

00008880 <z_init_static_threads>:
{
    8880:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8884:	4c29      	ldr	r4, [pc, #164]	; (892c <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    8886:	4d2a      	ldr	r5, [pc, #168]	; (8930 <z_init_static_threads+0xb0>)
{
    8888:	b087      	sub	sp, #28
    888a:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    888c:	42ae      	cmp	r6, r5
    888e:	f104 0430 	add.w	r4, r4, #48	; 0x30
    8892:	d30f      	bcc.n	88b4 <z_init_static_threads+0x34>
	k_sched_lock();
    8894:	f000 fb68 	bl	8f68 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    8898:	4c24      	ldr	r4, [pc, #144]	; (892c <z_init_static_threads+0xac>)
    889a:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8934 <z_init_static_threads+0xb4>
    889e:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    88a2:	f240 37e7 	movw	r7, #999	; 0x3e7
    88a6:	42ac      	cmp	r4, r5
    88a8:	d320      	bcc.n	88ec <z_init_static_threads+0x6c>
}
    88aa:	b007      	add	sp, #28
    88ac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    88b0:	f000 bd2a 	b.w	9308 <k_sched_unlock>
		z_setup_new_thread(
    88b4:	f854 3c04 	ldr.w	r3, [r4, #-4]
    88b8:	9305      	str	r3, [sp, #20]
    88ba:	f854 3c10 	ldr.w	r3, [r4, #-16]
    88be:	9304      	str	r3, [sp, #16]
    88c0:	f854 3c14 	ldr.w	r3, [r4, #-20]
    88c4:	9303      	str	r3, [sp, #12]
    88c6:	f854 3c18 	ldr.w	r3, [r4, #-24]
    88ca:	9302      	str	r3, [sp, #8]
    88cc:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    88d0:	9301      	str	r3, [sp, #4]
    88d2:	f854 3c20 	ldr.w	r3, [r4, #-32]
    88d6:	9300      	str	r3, [sp, #0]
    88d8:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    88dc:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    88e0:	f7ff ff70 	bl	87c4 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    88e4:	f854 3c30 	ldr.w	r3, [r4, #-48]
    88e8:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    88ea:	e7ce      	b.n	888a <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    88ec:	6a63      	ldr	r3, [r4, #36]	; 0x24
    88ee:	1c5a      	adds	r2, r3, #1
    88f0:	d00d      	beq.n	890e <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    88f2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    88f6:	2100      	movs	r1, #0
    88f8:	4638      	mov	r0, r7
    88fa:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    88fe:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    8902:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8906:	d104      	bne.n	8912 <z_init_static_threads+0x92>
	z_sched_start(thread);
    8908:	4640      	mov	r0, r8
    890a:	f000 fc13 	bl	9134 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    890e:	3430      	adds	r4, #48	; 0x30
    8910:	e7c9      	b.n	88a6 <z_init_static_threads+0x26>
    8912:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8916:	2300      	movs	r3, #0
    8918:	f7f7 fbe2 	bl	e0 <__aeabi_uldivmod>
    891c:	4602      	mov	r2, r0
    891e:	460b      	mov	r3, r1
    8920:	f108 0018 	add.w	r0, r8, #24
    8924:	4649      	mov	r1, r9
    8926:	f000 fe87 	bl	9638 <z_add_timeout>
    892a:	e7f0      	b.n	890e <z_init_static_threads+0x8e>
    892c:	20000118 	.word	0x20000118
    8930:	20000118 	.word	0x20000118
    8934:	0000b3a7 	.word	0x0000b3a7

00008938 <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    8938:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    893a:	4c0b      	ldr	r4, [pc, #44]	; (8968 <idle+0x30>)
	return !z_sys_post_kernel;
    893c:	4d0b      	ldr	r5, [pc, #44]	; (896c <idle+0x34>)
	__asm__ volatile(
    893e:	f04f 0220 	mov.w	r2, #32
    8942:	f3ef 8311 	mrs	r3, BASEPRI
    8946:	f382 8812 	msr	BASEPRI_MAX, r2
    894a:	f3bf 8f6f 	isb	sy
    894e:	f002 fde6 	bl	b51e <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    8952:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    8954:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    8956:	b913      	cbnz	r3, 895e <idle+0x26>
	arch_cpu_idle();
    8958:	f7fa f838 	bl	29cc <arch_cpu_idle>
}
    895c:	e7ef      	b.n	893e <idle+0x6>
    895e:	f7f9 ff55 	bl	280c <pm_system_suspend>
    8962:	2800      	cmp	r0, #0
    8964:	d1eb      	bne.n	893e <idle+0x6>
    8966:	e7f7      	b.n	8958 <idle+0x20>
    8968:	20001904 	.word	0x20001904
    896c:	20001d87 	.word	0x20001d87

00008970 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    8970:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8974:	4604      	mov	r4, r0
    8976:	4617      	mov	r7, r2
    8978:	461e      	mov	r6, r3
    897a:	f04f 0320 	mov.w	r3, #32
    897e:	f3ef 8811 	mrs	r8, BASEPRI
    8982:	f383 8812 	msr	BASEPRI_MAX, r3
    8986:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    898a:	68c3      	ldr	r3, [r0, #12]
    898c:	4a32      	ldr	r2, [pc, #200]	; (8a58 <z_impl_k_mutex_lock+0xe8>)
    898e:	b16b      	cbz	r3, 89ac <z_impl_k_mutex_lock+0x3c>
    8990:	6880      	ldr	r0, [r0, #8]
    8992:	6891      	ldr	r1, [r2, #8]
    8994:	4288      	cmp	r0, r1
    8996:	d019      	beq.n	89cc <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    8998:	ea57 0306 	orrs.w	r3, r7, r6
    899c:	d118      	bne.n	89d0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    899e:	f388 8811 	msr	BASEPRI, r8
    89a2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    89a6:	f06f 000f 	mvn.w	r0, #15
    89aa:	e00c      	b.n	89c6 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    89ac:	6891      	ldr	r1, [r2, #8]
    89ae:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    89b2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    89b4:	3301      	adds	r3, #1
    89b6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    89b8:	6893      	ldr	r3, [r2, #8]
    89ba:	60a3      	str	r3, [r4, #8]
    89bc:	f388 8811 	msr	BASEPRI, r8
    89c0:	f3bf 8f6f 	isb	sy
		return 0;
    89c4:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    89c6:	b002      	add	sp, #8
    89c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    89cc:	6921      	ldr	r1, [r4, #16]
    89ce:	e7f0      	b.n	89b2 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    89d0:	f991 100e 	ldrsb.w	r1, [r1, #14]
    89d4:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    89d8:	4299      	cmp	r1, r3
    89da:	bfa8      	it	ge
    89dc:	4619      	movge	r1, r3
    89de:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    89e2:	4291      	cmp	r1, r2
    89e4:	bfb8      	it	lt
    89e6:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    89e8:	428b      	cmp	r3, r1
    89ea:	dd2e      	ble.n	8a4a <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    89ec:	f002 fb7f 	bl	b0ee <adjust_owner_prio.isra.0>
    89f0:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    89f2:	e9cd 7600 	strd	r7, r6, [sp]
    89f6:	4819      	ldr	r0, [pc, #100]	; (8a5c <z_impl_k_mutex_lock+0xec>)
    89f8:	4622      	mov	r2, r4
    89fa:	4641      	mov	r1, r8
    89fc:	f000 fbf6 	bl	91ec <z_pend_curr>
	if (got_mutex == 0) {
    8a00:	2800      	cmp	r0, #0
    8a02:	d0e0      	beq.n	89c6 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    8a04:	f04f 0320 	mov.w	r3, #32
    8a08:	f3ef 8611 	mrs	r6, BASEPRI
    8a0c:	f383 8812 	msr	BASEPRI_MAX, r3
    8a10:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    8a14:	6823      	ldr	r3, [r4, #0]
    8a16:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8a18:	429c      	cmp	r4, r3
    8a1a:	d00a      	beq.n	8a32 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    8a1c:	b14b      	cbz	r3, 8a32 <z_impl_k_mutex_lock+0xc2>
    8a1e:	f993 300e 	ldrsb.w	r3, [r3, #14]
    8a22:	4299      	cmp	r1, r3
    8a24:	bfa8      	it	ge
    8a26:	4619      	movge	r1, r3
    8a28:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    8a2c:	4299      	cmp	r1, r3
    8a2e:	bfb8      	it	lt
    8a30:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    8a32:	68a0      	ldr	r0, [r4, #8]
    8a34:	f002 fb5b 	bl	b0ee <adjust_owner_prio.isra.0>
    8a38:	b900      	cbnz	r0, 8a3c <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    8a3a:	b145      	cbz	r5, 8a4e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    8a3c:	4807      	ldr	r0, [pc, #28]	; (8a5c <z_impl_k_mutex_lock+0xec>)
    8a3e:	4631      	mov	r1, r6
    8a40:	f000 fa80 	bl	8f44 <z_reschedule>
	return -EAGAIN;
    8a44:	f06f 000a 	mvn.w	r0, #10
    8a48:	e7bd      	b.n	89c6 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    8a4a:	2500      	movs	r5, #0
    8a4c:	e7d1      	b.n	89f2 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    8a4e:	f386 8811 	msr	BASEPRI, r6
    8a52:	f3bf 8f6f 	isb	sy
    8a56:	e7f5      	b.n	8a44 <z_impl_k_mutex_lock+0xd4>
    8a58:	20001904 	.word	0x20001904
    8a5c:	20001d88 	.word	0x20001d88

00008a60 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    8a60:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    8a62:	6883      	ldr	r3, [r0, #8]
{
    8a64:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    8a66:	2b00      	cmp	r3, #0
    8a68:	d032      	beq.n	8ad0 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    8a6a:	4a1c      	ldr	r2, [pc, #112]	; (8adc <z_impl_k_mutex_unlock+0x7c>)
    8a6c:	6892      	ldr	r2, [r2, #8]
    8a6e:	4293      	cmp	r3, r2
    8a70:	d131      	bne.n	8ad6 <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    8a72:	7bda      	ldrb	r2, [r3, #15]
    8a74:	3a01      	subs	r2, #1
    8a76:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    8a78:	68c3      	ldr	r3, [r0, #12]
    8a7a:	2b01      	cmp	r3, #1
    8a7c:	d905      	bls.n	8a8a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    8a7e:	3b01      	subs	r3, #1
    8a80:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    8a82:	f000 fc41 	bl	9308 <k_sched_unlock>

	return 0;
    8a86:	2000      	movs	r0, #0
}
    8a88:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    8a8a:	f04f 0320 	mov.w	r3, #32
    8a8e:	f3ef 8511 	mrs	r5, BASEPRI
    8a92:	f383 8812 	msr	BASEPRI_MAX, r3
    8a96:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    8a9a:	6901      	ldr	r1, [r0, #16]
    8a9c:	6880      	ldr	r0, [r0, #8]
    8a9e:	f002 fb26 	bl	b0ee <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    8aa2:	4620      	mov	r0, r4
    8aa4:	f002 fce0 	bl	b468 <z_unpend_first_thread>
	mutex->owner = new_owner;
    8aa8:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    8aaa:	b158      	cbz	r0, 8ac4 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    8aac:	f990 200e 	ldrsb.w	r2, [r0, #14]
    8ab0:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    8ab2:	2200      	movs	r2, #0
    8ab4:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    8ab6:	f002 fc66 	bl	b386 <z_ready_thread>
		z_reschedule(&lock, key);
    8aba:	4809      	ldr	r0, [pc, #36]	; (8ae0 <z_impl_k_mutex_unlock+0x80>)
    8abc:	4629      	mov	r1, r5
    8abe:	f000 fa41 	bl	8f44 <z_reschedule>
    8ac2:	e7de      	b.n	8a82 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    8ac4:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    8ac6:	f385 8811 	msr	BASEPRI, r5
    8aca:	f3bf 8f6f 	isb	sy
    8ace:	e7d8      	b.n	8a82 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    8ad0:	f06f 0015 	mvn.w	r0, #21
    8ad4:	e7d8      	b.n	8a88 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    8ad6:	f04f 30ff 	mov.w	r0, #4294967295
    8ada:	e7d5      	b.n	8a88 <z_impl_k_mutex_unlock+0x28>
    8adc:	20001904 	.word	0x20001904
    8ae0:	20001d88 	.word	0x20001d88

00008ae4 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    8ae4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8ae6:	4611      	mov	r1, r2
	__asm__ volatile(
    8ae8:	f04f 0220 	mov.w	r2, #32
    8aec:	f3ef 8511 	mrs	r5, BASEPRI
    8af0:	f382 8812 	msr	BASEPRI_MAX, r2
    8af4:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    8af8:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    8afa:	b19c      	cbz	r4, 8b24 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    8afc:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    8afe:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    8b00:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    8b04:	4294      	cmp	r4, r2
	list->head = node;
    8b06:	6003      	str	r3, [r0, #0]
	list->tail = node;
    8b08:	bf08      	it	eq
    8b0a:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    8b0c:	2101      	movs	r1, #1
    8b0e:	4620      	mov	r0, r4
    8b10:	f002 fb5c 	bl	b1cc <z_queue_node_peek>
    8b14:	4604      	mov	r4, r0
	__asm__ volatile(
    8b16:	f385 8811 	msr	BASEPRI, r5
    8b1a:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    8b1e:	4620      	mov	r0, r4
    8b20:	b003      	add	sp, #12
    8b22:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8b24:	ea51 0203 	orrs.w	r2, r1, r3
    8b28:	d0f5      	beq.n	8b16 <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    8b2a:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    8b2e:	e9cd 1300 	strd	r1, r3, [sp]
    8b32:	4610      	mov	r0, r2
    8b34:	4629      	mov	r1, r5
    8b36:	f000 fb59 	bl	91ec <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    8b3a:	2800      	cmp	r0, #0
    8b3c:	d1ef      	bne.n	8b1e <z_impl_k_queue_get+0x3a>
    8b3e:	4b02      	ldr	r3, [pc, #8]	; (8b48 <z_impl_k_queue_get+0x64>)
    8b40:	689b      	ldr	r3, [r3, #8]
    8b42:	695c      	ldr	r4, [r3, #20]
    8b44:	e7eb      	b.n	8b1e <z_impl_k_queue_get+0x3a>
    8b46:	bf00      	nop
    8b48:	20001904 	.word	0x20001904

00008b4c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    8b4c:	b538      	push	{r3, r4, r5, lr}
    8b4e:	4604      	mov	r4, r0
	__asm__ volatile(
    8b50:	f04f 0320 	mov.w	r3, #32
    8b54:	f3ef 8511 	mrs	r5, BASEPRI
    8b58:	f383 8812 	msr	BASEPRI_MAX, r3
    8b5c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    8b60:	f002 fc82 	bl	b468 <z_unpend_first_thread>

	if (thread != NULL) {
    8b64:	b148      	cbz	r0, 8b7a <z_impl_k_sem_give+0x2e>
    8b66:	2200      	movs	r2, #0
    8b68:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    8b6a:	f002 fc0c 	bl	b386 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    8b6e:	4629      	mov	r1, r5
    8b70:	4805      	ldr	r0, [pc, #20]	; (8b88 <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    8b72:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    8b76:	f000 b9e5 	b.w	8f44 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    8b7a:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    8b7e:	429a      	cmp	r2, r3
    8b80:	bf18      	it	ne
    8b82:	3301      	addne	r3, #1
    8b84:	60a3      	str	r3, [r4, #8]
}
    8b86:	e7f2      	b.n	8b6e <z_impl_k_sem_give+0x22>
    8b88:	20001d88 	.word	0x20001d88

00008b8c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    8b8c:	b513      	push	{r0, r1, r4, lr}
    8b8e:	f04f 0420 	mov.w	r4, #32
    8b92:	f3ef 8111 	mrs	r1, BASEPRI
    8b96:	f384 8812 	msr	BASEPRI_MAX, r4
    8b9a:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    8b9e:	6884      	ldr	r4, [r0, #8]
    8ba0:	b144      	cbz	r4, 8bb4 <z_impl_k_sem_take+0x28>
		sem->count--;
    8ba2:	3c01      	subs	r4, #1
    8ba4:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    8ba6:	f381 8811 	msr	BASEPRI, r1
    8baa:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    8bae:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    8bb0:	b002      	add	sp, #8
    8bb2:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8bb4:	ea52 0403 	orrs.w	r4, r2, r3
    8bb8:	d106      	bne.n	8bc8 <z_impl_k_sem_take+0x3c>
    8bba:	f381 8811 	msr	BASEPRI, r1
    8bbe:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    8bc2:	f06f 000f 	mvn.w	r0, #15
    8bc6:	e7f3      	b.n	8bb0 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    8bc8:	e9cd 2300 	strd	r2, r3, [sp]
    8bcc:	4602      	mov	r2, r0
    8bce:	4802      	ldr	r0, [pc, #8]	; (8bd8 <z_impl_k_sem_take+0x4c>)
    8bd0:	f000 fb0c 	bl	91ec <z_pend_curr>
	return ret;
    8bd4:	e7ec      	b.n	8bb0 <z_impl_k_sem_take+0x24>
    8bd6:	bf00      	nop
    8bd8:	20001d88 	.word	0x20001d88

00008bdc <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    8bdc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    8bde:	4b09      	ldr	r3, [pc, #36]	; (8c04 <k_sys_work_q_init+0x28>)
    8be0:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    8be2:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    8be4:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    8be6:	9300      	str	r3, [sp, #0]
    8be8:	4907      	ldr	r1, [pc, #28]	; (8c08 <k_sys_work_q_init+0x2c>)
    8bea:	4808      	ldr	r0, [pc, #32]	; (8c0c <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    8bec:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    8bf0:	f04f 33ff 	mov.w	r3, #4294967295
    8bf4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8bf8:	f000 f8f6 	bl	8de8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    8bfc:	4620      	mov	r0, r4
    8bfe:	b004      	add	sp, #16
    8c00:	bd10      	pop	{r4, pc}
    8c02:	bf00      	nop
    8c04:	0000de6c 	.word	0x0000de6c
    8c08:	20003240 	.word	0x20003240
    8c0c:	20000930 	.word	0x20000930

00008c10 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    8c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    8c14:	4e47      	ldr	r6, [pc, #284]	; (8d34 <work_queue_main+0x124>)
    8c16:	b085      	sub	sp, #20
    8c18:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    8c1a:	f04f 38ff 	mov.w	r8, #4294967295
    8c1e:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
    8c22:	f04f 0320 	mov.w	r3, #32
    8c26:	f3ef 8711 	mrs	r7, BASEPRI
    8c2a:	f383 8812 	msr	BASEPRI_MAX, r3
    8c2e:	f3bf 8f6f 	isb	sy
    8c32:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    8c36:	b98d      	cbnz	r5, 8c5c <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    8c38:	2102      	movs	r1, #2
    8c3a:	f104 0098 	add.w	r0, r4, #152	; 0x98
    8c3e:	f002 fae8 	bl	b212 <flag_test_and_clear>
    8c42:	2800      	cmp	r0, #0
    8c44:	d135      	bne.n	8cb2 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    8c46:	2300      	movs	r3, #0
    8c48:	e9cd 8900 	strd	r8, r9, [sp]
    8c4c:	9302      	str	r3, [sp, #8]
    8c4e:	f104 0288 	add.w	r2, r4, #136	; 0x88
    8c52:	4639      	mov	r1, r7
    8c54:	4838      	ldr	r0, [pc, #224]	; (8d38 <work_queue_main+0x128>)
    8c56:	f000 fc79 	bl	954c <z_sched_wait>
			continue;
    8c5a:	e7e2      	b.n	8c22 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8c5c:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    8c60:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    8c62:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8c66:	4295      	cmp	r5, r2
    8c68:	d101      	bne.n	8c6e <work_queue_main+0x5e>
	list->tail = node;
    8c6a:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    8c6e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    8c72:	f043 0302 	orr.w	r3, r3, #2
    8c76:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    8c7a:	68eb      	ldr	r3, [r5, #12]
    8c7c:	f023 0304 	bic.w	r3, r3, #4
    8c80:	f043 0301 	orr.w	r3, r3, #1
    8c84:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    8c86:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    8c88:	f387 8811 	msr	BASEPRI, r7
    8c8c:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    8c90:	4628      	mov	r0, r5
    8c92:	4798      	blx	r3
	__asm__ volatile(
    8c94:	f04f 0320 	mov.w	r3, #32
    8c98:	f3ef 8b11 	mrs	fp, BASEPRI
    8c9c:	f383 8812 	msr	BASEPRI_MAX, r3
    8ca0:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    8ca4:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8ca6:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    8ca8:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8cac:	d40b      	bmi.n	8cc6 <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
    8cae:	60ea      	str	r2, [r5, #12]
    8cb0:	e00e      	b.n	8cd0 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    8cb2:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    8cb6:	2200      	movs	r2, #0
    8cb8:	2101      	movs	r1, #1
    8cba:	4628      	mov	r0, r5
    8cbc:	f002 fbfc 	bl	b4b8 <z_sched_wake>
    8cc0:	2800      	cmp	r0, #0
    8cc2:	d1f8      	bne.n	8cb6 <work_queue_main+0xa6>
    8cc4:	e7bf      	b.n	8c46 <work_queue_main+0x36>
	return list->head;
    8cc6:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    8cc8:	f023 0303 	bic.w	r3, r3, #3
    8ccc:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    8cce:	b970      	cbnz	r0, 8cee <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
    8cd0:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    8cd4:	f023 0302 	bic.w	r3, r3, #2
    8cd8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    8cdc:	f38b 8811 	msr	BASEPRI, fp
    8ce0:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    8ce4:	05d8      	lsls	r0, r3, #23
    8ce6:	d49c      	bmi.n	8c22 <work_queue_main+0x12>
	z_impl_k_yield();
    8ce8:	f000 fb36 	bl	9358 <z_impl_k_yield>
}
    8cec:	e799      	b.n	8c22 <work_queue_main+0x12>
	return node->next;
    8cee:	2700      	movs	r7, #0
    8cf0:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    8cf4:	463b      	mov	r3, r7
		if (wc->work == work) {
    8cf6:	6842      	ldr	r2, [r0, #4]
    8cf8:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    8cfa:	4601      	mov	r1, r0
		if (wc->work == work) {
    8cfc:	d10c      	bne.n	8d18 <work_queue_main+0x108>
	return node->next;
    8cfe:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    8d00:	b997      	cbnz	r7, 8d28 <work_queue_main+0x118>
    8d02:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    8d04:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    8d06:	4282      	cmp	r2, r0
    8d08:	d100      	bne.n	8d0c <work_queue_main+0xfc>
	list->tail = node;
    8d0a:	6071      	str	r1, [r6, #4]
	parent->next = child;
    8d0c:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    8d10:	f7ff ff1c 	bl	8b4c <z_impl_k_sem_give>
}
    8d14:	4639      	mov	r1, r7
    8d16:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    8d18:	f1ba 0f00 	cmp.w	sl, #0
    8d1c:	d0d8      	beq.n	8cd0 <work_queue_main+0xc0>
	return node->next;
    8d1e:	4650      	mov	r0, sl
    8d20:	460f      	mov	r7, r1
    8d22:	f8da a000 	ldr.w	sl, [sl]
    8d26:	e7e6      	b.n	8cf6 <work_queue_main+0xe6>
	return list->tail;
    8d28:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
    8d2a:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    8d2c:	4290      	cmp	r0, r2
	list->tail = node;
    8d2e:	bf08      	it	eq
    8d30:	6077      	streq	r7, [r6, #4]
}
    8d32:	e7eb      	b.n	8d0c <work_queue_main+0xfc>
    8d34:	2000192c 	.word	0x2000192c
    8d38:	20001d88 	.word	0x20001d88

00008d3c <submit_to_queue_locked>:
{
    8d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    8d3e:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8d40:	079a      	lsls	r2, r3, #30
{
    8d42:	4604      	mov	r4, r0
    8d44:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8d46:	f3c3 0540 	ubfx	r5, r3, #1, #1
    8d4a:	d41f      	bmi.n	8d8c <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    8d4c:	075f      	lsls	r7, r3, #29
    8d4e:	d41f      	bmi.n	8d90 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    8d50:	680a      	ldr	r2, [r1, #0]
    8d52:	b90a      	cbnz	r2, 8d58 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    8d54:	6882      	ldr	r2, [r0, #8]
    8d56:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    8d58:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    8d5a:	bf44      	itt	mi
    8d5c:	68a3      	ldrmi	r3, [r4, #8]
    8d5e:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    8d60:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    8d62:	bf4c      	ite	mi
    8d64:	2502      	movmi	r5, #2
		ret = 1;
    8d66:	2501      	movpl	r5, #1
	if (queue == NULL) {
    8d68:	b37f      	cbz	r7, 8dca <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    8d6a:	4b1b      	ldr	r3, [pc, #108]	; (8dd8 <submit_to_queue_locked+0x9c>)
    8d6c:	689b      	ldr	r3, [r3, #8]
    8d6e:	42bb      	cmp	r3, r7
    8d70:	d111      	bne.n	8d96 <submit_to_queue_locked+0x5a>
    8d72:	f002 f9a8 	bl	b0c6 <k_is_in_isr>
    8d76:	f080 0001 	eor.w	r0, r0, #1
    8d7a:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
    8d7c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    8d80:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    8d82:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    8d86:	d523      	bpl.n	8dd0 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    8d88:	b13a      	cbz	r2, 8d9a <submit_to_queue_locked+0x5e>
    8d8a:	b940      	cbnz	r0, 8d9e <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    8d8c:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    8d90:	2300      	movs	r3, #0
    8d92:	6033      	str	r3, [r6, #0]
	return ret;
    8d94:	e013      	b.n	8dbe <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    8d96:	2000      	movs	r0, #0
    8d98:	e7f0      	b.n	8d7c <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    8d9a:	071b      	lsls	r3, r3, #28
    8d9c:	d4f6      	bmi.n	8d8c <submit_to_queue_locked+0x50>
	parent->next = child;
    8d9e:	2300      	movs	r3, #0
    8da0:	6023      	str	r3, [r4, #0]
	return list->tail;
    8da2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    8da6:	b963      	cbnz	r3, 8dc2 <submit_to_queue_locked+0x86>
	list->head = node;
    8da8:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    8dac:	4638      	mov	r0, r7
    8dae:	f002 fa3b 	bl	b228 <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    8db2:	68e3      	ldr	r3, [r4, #12]
    8db4:	f043 0304 	orr.w	r3, r3, #4
    8db8:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    8dba:	6833      	ldr	r3, [r6, #0]
    8dbc:	60a3      	str	r3, [r4, #8]
}
    8dbe:	4628      	mov	r0, r5
    8dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    8dc2:	601c      	str	r4, [r3, #0]
	list->tail = node;
    8dc4:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    8dc8:	e7f0      	b.n	8dac <submit_to_queue_locked+0x70>
		return -EINVAL;
    8dca:	f06f 0515 	mvn.w	r5, #21
    8dce:	e7df      	b.n	8d90 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    8dd0:	f06f 0512 	mvn.w	r5, #18
    8dd4:	e7dc      	b.n	8d90 <submit_to_queue_locked+0x54>
    8dd6:	bf00      	nop
    8dd8:	20001904 	.word	0x20001904

00008ddc <k_work_submit>:
{
    8ddc:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    8dde:	4801      	ldr	r0, [pc, #4]	; (8de4 <k_work_submit+0x8>)
    8de0:	f002 ba51 	b.w	b286 <k_work_submit_to_queue>
    8de4:	20000930 	.word	0x20000930

00008de8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    8de8:	b5f0      	push	{r4, r5, r6, r7, lr}
    8dea:	b089      	sub	sp, #36	; 0x24
    8dec:	4604      	mov	r4, r0
	list->head = NULL;
    8dee:	2000      	movs	r0, #0
	list->tail = NULL;
    8df0:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    8df4:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    8df6:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    8dfa:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    8dfe:	f104 0090 	add.w	r0, r4, #144	; 0x90
    8e02:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    8e06:	b31d      	cbz	r5, 8e50 <k_work_queue_start+0x68>
    8e08:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    8e0a:	2800      	cmp	r0, #0
    8e0c:	f240 1001 	movw	r0, #257	; 0x101
    8e10:	bf08      	it	eq
    8e12:	2001      	moveq	r0, #1
	*flagp = flags;
    8e14:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    8e18:	2000      	movs	r0, #0
    8e1a:	f04f 36ff 	mov.w	r6, #4294967295
    8e1e:	f04f 37ff 	mov.w	r7, #4294967295
    8e22:	e9cd 3003 	strd	r3, r0, [sp, #12]
    8e26:	e9cd 0001 	strd	r0, r0, [sp, #4]
    8e2a:	e9cd 6706 	strd	r6, r7, [sp, #24]
    8e2e:	4b09      	ldr	r3, [pc, #36]	; (8e54 <k_work_queue_start+0x6c>)
    8e30:	9400      	str	r4, [sp, #0]
    8e32:	4620      	mov	r0, r4
    8e34:	f7ff fcf8 	bl	8828 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    8e38:	b125      	cbz	r5, 8e44 <k_work_queue_start+0x5c>
    8e3a:	6829      	ldr	r1, [r5, #0]
    8e3c:	b111      	cbz	r1, 8e44 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    8e3e:	4620      	mov	r0, r4
    8e40:	f002 f947 	bl	b0d2 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    8e44:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    8e46:	b009      	add	sp, #36	; 0x24
    8e48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    8e4c:	f002 b946 	b.w	b0dc <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    8e50:	2001      	movs	r0, #1
    8e52:	e7df      	b.n	8e14 <k_work_queue_start+0x2c>
    8e54:	00008c11 	.word	0x00008c11

00008e58 <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    8e58:	b513      	push	{r0, r1, r4, lr}
    8e5a:	9001      	str	r0, [sp, #4]
    8e5c:	4608      	mov	r0, r1
	__asm__ volatile(
    8e5e:	f04f 0120 	mov.w	r1, #32
    8e62:	f3ef 8411 	mrs	r4, BASEPRI
    8e66:	f381 8812 	msr	BASEPRI_MAX, r1
    8e6a:	f3bf 8f6f 	isb	sy
	return *flagp;
    8e6e:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    8e70:	f011 0f0e 	tst.w	r1, #14
    8e74:	d116      	bne.n	8ea4 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8e76:	ea53 0c02 	orrs.w	ip, r3, r2
    8e7a:	d108      	bne.n	8e8e <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    8e7c:	a901      	add	r1, sp, #4
    8e7e:	f7ff ff5d 	bl	8d3c <submit_to_queue_locked>
	__asm__ volatile(
    8e82:	f384 8811 	msr	BASEPRI, r4
    8e86:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    8e8a:	b002      	add	sp, #8
    8e8c:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
    8e8e:	f041 0108 	orr.w	r1, r1, #8
    8e92:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    8e94:	9901      	ldr	r1, [sp, #4]
    8e96:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    8e98:	3010      	adds	r0, #16
    8e9a:	4903      	ldr	r1, [pc, #12]	; (8ea8 <k_work_schedule_for_queue+0x50>)
    8e9c:	f000 fbcc 	bl	9638 <z_add_timeout>
	return ret;
    8ea0:	2001      	movs	r0, #1
    8ea2:	e7ee      	b.n	8e82 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    8ea4:	2000      	movs	r0, #0
    8ea6:	e7ec      	b.n	8e82 <k_work_schedule_for_queue+0x2a>
    8ea8:	0000b237 	.word	0x0000b237

00008eac <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
    8eac:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
    8eae:	4801      	ldr	r0, [pc, #4]	; (8eb4 <k_work_schedule+0x8>)
    8eb0:	f7ff bfd2 	b.w	8e58 <k_work_schedule_for_queue>
    8eb4:	20000930 	.word	0x20000930

00008eb8 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    8eb8:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    8eba:	4d07      	ldr	r5, [pc, #28]	; (8ed8 <z_reset_time_slice+0x20>)
    8ebc:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    8ebe:	b154      	cbz	r4, 8ed6 <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    8ec0:	f7fc fcba 	bl	5838 <sys_clock_elapsed>
    8ec4:	4b05      	ldr	r3, [pc, #20]	; (8edc <z_reset_time_slice+0x24>)
    8ec6:	4404      	add	r4, r0
    8ec8:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    8eca:	6828      	ldr	r0, [r5, #0]
    8ecc:	2100      	movs	r1, #0
	}
}
    8ece:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    8ed2:	f002 bb34 	b.w	b53e <z_set_timeout_expiry>
}
    8ed6:	bd38      	pop	{r3, r4, r5, pc}
    8ed8:	2000193c 	.word	0x2000193c
    8edc:	20001904 	.word	0x20001904

00008ee0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    8ee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8ee2:	4604      	mov	r4, r0
    8ee4:	460d      	mov	r5, r1
	__asm__ volatile(
    8ee6:	f04f 0320 	mov.w	r3, #32
    8eea:	f3ef 8711 	mrs	r7, BASEPRI
    8eee:	f383 8812 	msr	BASEPRI_MAX, r3
    8ef2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    8ef6:	4e10      	ldr	r6, [pc, #64]	; (8f38 <k_sched_time_slice_set+0x58>)
    8ef8:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    8efa:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    8efe:	f240 30e7 	movw	r0, #999	; 0x3e7
    8f02:	6131      	str	r1, [r6, #16]
    8f04:	2300      	movs	r3, #0
    8f06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8f0a:	fbe4 010c 	umlal	r0, r1, r4, ip
    8f0e:	f7f7 f8e7 	bl	e0 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    8f12:	2c00      	cmp	r4, #0
    8f14:	4b09      	ldr	r3, [pc, #36]	; (8f3c <k_sched_time_slice_set+0x5c>)
    8f16:	dc0a      	bgt.n	8f2e <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    8f18:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    8f1a:	4b09      	ldr	r3, [pc, #36]	; (8f40 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    8f1c:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    8f1e:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    8f20:	f7ff ffca 	bl	8eb8 <z_reset_time_slice>
	__asm__ volatile(
    8f24:	f387 8811 	msr	BASEPRI, r7
    8f28:	f3bf 8f6f 	isb	sy
	}
}
    8f2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    8f2e:	2802      	cmp	r0, #2
    8f30:	bfb8      	it	lt
    8f32:	2002      	movlt	r0, #2
    8f34:	e7f0      	b.n	8f18 <k_sched_time_slice_set+0x38>
    8f36:	bf00      	nop
    8f38:	20001904 	.word	0x20001904
    8f3c:	2000193c 	.word	0x2000193c
    8f40:	20001938 	.word	0x20001938

00008f44 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    8f44:	b949      	cbnz	r1, 8f5a <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    8f46:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    8f4a:	b930      	cbnz	r0, 8f5a <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    8f4c:	4b05      	ldr	r3, [pc, #20]	; (8f64 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    8f4e:	69da      	ldr	r2, [r3, #28]
    8f50:	689b      	ldr	r3, [r3, #8]
    8f52:	429a      	cmp	r2, r3
    8f54:	d001      	beq.n	8f5a <z_reschedule+0x16>
	ret = arch_swap(key);
    8f56:	f7f9 be29 	b.w	2bac <arch_swap>
    8f5a:	f381 8811 	msr	BASEPRI, r1
    8f5e:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    8f62:	4770      	bx	lr
    8f64:	20001904 	.word	0x20001904

00008f68 <k_sched_lock>:
	__asm__ volatile(
    8f68:	f04f 0320 	mov.w	r3, #32
    8f6c:	f3ef 8111 	mrs	r1, BASEPRI
    8f70:	f383 8812 	msr	BASEPRI_MAX, r3
    8f74:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    8f78:	4b04      	ldr	r3, [pc, #16]	; (8f8c <k_sched_lock+0x24>)
    8f7a:	689a      	ldr	r2, [r3, #8]
    8f7c:	7bd3      	ldrb	r3, [r2, #15]
    8f7e:	3b01      	subs	r3, #1
    8f80:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    8f82:	f381 8811 	msr	BASEPRI, r1
    8f86:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    8f8a:	4770      	bx	lr
    8f8c:	20001904 	.word	0x20001904

00008f90 <update_cache>:
{
    8f90:	b538      	push	{r3, r4, r5, lr}
    8f92:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    8f94:	480c      	ldr	r0, [pc, #48]	; (8fc8 <update_cache+0x38>)
    8f96:	4d0d      	ldr	r5, [pc, #52]	; (8fcc <update_cache+0x3c>)
    8f98:	f002 f9ef 	bl	b37a <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    8f9c:	4604      	mov	r4, r0
    8f9e:	b900      	cbnz	r0, 8fa2 <update_cache+0x12>
    8fa0:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    8fa2:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    8fa4:	b94a      	cbnz	r2, 8fba <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    8fa6:	7b5a      	ldrb	r2, [r3, #13]
    8fa8:	06d2      	lsls	r2, r2, #27
    8faa:	d106      	bne.n	8fba <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    8fac:	69a2      	ldr	r2, [r4, #24]
    8fae:	b922      	cbnz	r2, 8fba <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    8fb0:	89da      	ldrh	r2, [r3, #14]
    8fb2:	2a7f      	cmp	r2, #127	; 0x7f
    8fb4:	d901      	bls.n	8fba <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    8fb6:	61eb      	str	r3, [r5, #28]
}
    8fb8:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    8fba:	429c      	cmp	r4, r3
    8fbc:	d002      	beq.n	8fc4 <update_cache+0x34>
			z_reset_time_slice(thread);
    8fbe:	4620      	mov	r0, r4
    8fc0:	f7ff ff7a 	bl	8eb8 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    8fc4:	61ec      	str	r4, [r5, #28]
}
    8fc6:	e7f7      	b.n	8fb8 <update_cache+0x28>
    8fc8:	20001924 	.word	0x20001924
    8fcc:	20001904 	.word	0x20001904

00008fd0 <move_thread_to_end_of_prio_q>:
{
    8fd0:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    8fd2:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    8fd6:	7b43      	ldrb	r3, [r0, #13]
    8fd8:	2a00      	cmp	r2, #0
{
    8fda:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    8fdc:	da04      	bge.n	8fe8 <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    8fde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    8fe2:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    8fe4:	f002 f97d 	bl	b2e2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    8fe8:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    8fea:	4a15      	ldr	r2, [pc, #84]	; (9040 <move_thread_to_end_of_prio_q+0x70>)
    8fec:	f063 037f 	orn	r3, r3, #127	; 0x7f
    8ff0:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    8ff2:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8ff6:	f102 0520 	add.w	r5, r2, #32
    8ffa:	42ab      	cmp	r3, r5
    8ffc:	d01b      	beq.n	9036 <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    8ffe:	b1d3      	cbz	r3, 9036 <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    9000:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    9004:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    9008:	4286      	cmp	r6, r0
    900a:	d00f      	beq.n	902c <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    900c:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    900e:	2800      	cmp	r0, #0
    9010:	dd0c      	ble.n	902c <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    9012:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    9014:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    9018:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    901a:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    901c:	6890      	ldr	r0, [r2, #8]
    901e:	1a43      	subs	r3, r0, r1
    9020:	4258      	negs	r0, r3
}
    9022:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    9026:	4158      	adcs	r0, r3
    9028:	f7ff bfb2 	b.w	8f90 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    902c:	42a3      	cmp	r3, r4
    902e:	d002      	beq.n	9036 <move_thread_to_end_of_prio_q+0x66>
    9030:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9032:	2b00      	cmp	r3, #0
    9034:	d1e6      	bne.n	9004 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    9036:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    903a:	6021      	str	r1, [r4, #0]
	list->tail = node;
    903c:	6251      	str	r1, [r2, #36]	; 0x24
}
    903e:	e7ed      	b.n	901c <move_thread_to_end_of_prio_q+0x4c>
    9040:	20001904 	.word	0x20001904

00009044 <z_time_slice>:
{
    9044:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    9046:	f04f 0320 	mov.w	r3, #32
    904a:	f3ef 8511 	mrs	r5, BASEPRI
    904e:	f383 8812 	msr	BASEPRI_MAX, r3
    9052:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    9056:	4b17      	ldr	r3, [pc, #92]	; (90b4 <z_time_slice+0x70>)
    9058:	4a17      	ldr	r2, [pc, #92]	; (90b8 <z_time_slice+0x74>)
    905a:	689c      	ldr	r4, [r3, #8]
    905c:	6811      	ldr	r1, [r2, #0]
    905e:	428c      	cmp	r4, r1
    9060:	d107      	bne.n	9072 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    9062:	4620      	mov	r0, r4
    9064:	f7ff ff28 	bl	8eb8 <z_reset_time_slice>
	__asm__ volatile(
    9068:	f385 8811 	msr	BASEPRI, r5
    906c:	f3bf 8f6f 	isb	sy
}
    9070:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    9072:	2100      	movs	r1, #0
    9074:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    9076:	4a11      	ldr	r2, [pc, #68]	; (90bc <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    9078:	6812      	ldr	r2, [r2, #0]
    907a:	b1c2      	cbz	r2, 90ae <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    907c:	89e2      	ldrh	r2, [r4, #14]
    907e:	2a7f      	cmp	r2, #127	; 0x7f
    9080:	d815      	bhi.n	90ae <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    9082:	7b62      	ldrb	r2, [r4, #13]
    9084:	06d2      	lsls	r2, r2, #27
    9086:	d112      	bne.n	90ae <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    9088:	4a0d      	ldr	r2, [pc, #52]	; (90c0 <z_time_slice+0x7c>)
    908a:	f994 100e 	ldrsb.w	r1, [r4, #14]
    908e:	6812      	ldr	r2, [r2, #0]
    9090:	4291      	cmp	r1, r2
    9092:	db0c      	blt.n	90ae <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    9094:	4a0b      	ldr	r2, [pc, #44]	; (90c4 <z_time_slice+0x80>)
    9096:	4294      	cmp	r4, r2
    9098:	d009      	beq.n	90ae <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    909a:	691a      	ldr	r2, [r3, #16]
    909c:	4282      	cmp	r2, r0
    909e:	dc03      	bgt.n	90a8 <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    90a0:	4620      	mov	r0, r4
    90a2:	f7ff ff95 	bl	8fd0 <move_thread_to_end_of_prio_q>
    90a6:	e7dc      	b.n	9062 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    90a8:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    90aa:	611a      	str	r2, [r3, #16]
    90ac:	e7dc      	b.n	9068 <z_time_slice+0x24>
    90ae:	2200      	movs	r2, #0
    90b0:	e7fb      	b.n	90aa <z_time_slice+0x66>
    90b2:	bf00      	nop
    90b4:	20001904 	.word	0x20001904
    90b8:	20001934 	.word	0x20001934
    90bc:	2000193c 	.word	0x2000193c
    90c0:	20001938 	.word	0x20001938
    90c4:	20000830 	.word	0x20000830

000090c8 <ready_thread>:
{
    90c8:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    90ca:	f990 200d 	ldrsb.w	r2, [r0, #13]
    90ce:	7b43      	ldrb	r3, [r0, #13]
    90d0:	2a00      	cmp	r2, #0
    90d2:	db2a      	blt.n	912a <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    90d4:	06da      	lsls	r2, r3, #27
    90d6:	d128      	bne.n	912a <ready_thread+0x62>
    90d8:	6982      	ldr	r2, [r0, #24]
    90da:	bb32      	cbnz	r2, 912a <ready_thread+0x62>
	return list->head == list;
    90dc:	4a14      	ldr	r2, [pc, #80]	; (9130 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    90de:	f063 037f 	orn	r3, r3, #127	; 0x7f
    90e2:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    90e4:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    90e8:	f102 0520 	add.w	r5, r2, #32
    90ec:	42ab      	cmp	r3, r5
    90ee:	d017      	beq.n	9120 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    90f0:	b1b3      	cbz	r3, 9120 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    90f2:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    90f6:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    90fa:	428e      	cmp	r6, r1
    90fc:	d00b      	beq.n	9116 <ready_thread+0x4e>
		return b2 - b1;
    90fe:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    9100:	2900      	cmp	r1, #0
    9102:	dd08      	ble.n	9116 <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    9104:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    9106:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    910a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    910c:	6058      	str	r0, [r3, #4]
}
    910e:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    9110:	2000      	movs	r0, #0
    9112:	f7ff bf3d 	b.w	8f90 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    9116:	42a3      	cmp	r3, r4
    9118:	d002      	beq.n	9120 <ready_thread+0x58>
    911a:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    911c:	2b00      	cmp	r3, #0
    911e:	d1ea      	bne.n	90f6 <ready_thread+0x2e>
	node->prev = tail;
    9120:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    9124:	6020      	str	r0, [r4, #0]
	list->tail = node;
    9126:	6250      	str	r0, [r2, #36]	; 0x24
}
    9128:	e7f1      	b.n	910e <ready_thread+0x46>
}
    912a:	bc70      	pop	{r4, r5, r6}
    912c:	4770      	bx	lr
    912e:	bf00      	nop
    9130:	20001904 	.word	0x20001904

00009134 <z_sched_start>:
{
    9134:	b510      	push	{r4, lr}
	__asm__ volatile(
    9136:	f04f 0220 	mov.w	r2, #32
    913a:	f3ef 8411 	mrs	r4, BASEPRI
    913e:	f382 8812 	msr	BASEPRI_MAX, r2
    9142:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    9146:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    9148:	0751      	lsls	r1, r2, #29
    914a:	d404      	bmi.n	9156 <z_sched_start+0x22>
	__asm__ volatile(
    914c:	f384 8811 	msr	BASEPRI, r4
    9150:	f3bf 8f6f 	isb	sy
}
    9154:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    9156:	f022 0204 	bic.w	r2, r2, #4
    915a:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    915c:	f7ff ffb4 	bl	90c8 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    9160:	4621      	mov	r1, r4
    9162:	4802      	ldr	r0, [pc, #8]	; (916c <z_sched_start+0x38>)
}
    9164:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    9168:	f7ff beec 	b.w	8f44 <z_reschedule>
    916c:	20001d88 	.word	0x20001d88

00009170 <unready_thread>:
{
    9170:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    9172:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    9176:	7b43      	ldrb	r3, [r0, #13]
    9178:	2a00      	cmp	r2, #0
{
    917a:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    917c:	da04      	bge.n	9188 <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    917e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9182:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    9184:	f002 f8ad 	bl	b2e2 <sys_dlist_remove>
	update_cache(thread == _current);
    9188:	4b04      	ldr	r3, [pc, #16]	; (919c <unready_thread+0x2c>)
    918a:	6898      	ldr	r0, [r3, #8]
    918c:	1a43      	subs	r3, r0, r1
    918e:	4258      	negs	r0, r3
    9190:	4158      	adcs	r0, r3
}
    9192:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    9196:	f7ff befb 	b.w	8f90 <update_cache>
    919a:	bf00      	nop
    919c:	20001904 	.word	0x20001904

000091a0 <pend>:
{
    91a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    91a4:	4606      	mov	r6, r0
    91a6:	4615      	mov	r5, r2
    91a8:	461c      	mov	r4, r3
	__asm__ volatile(
    91aa:	f04f 0320 	mov.w	r3, #32
    91ae:	f3ef 8711 	mrs	r7, BASEPRI
    91b2:	f383 8812 	msr	BASEPRI_MAX, r3
    91b6:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    91ba:	f002 f916 	bl	b3ea <add_to_waitq_locked>
	__asm__ volatile(
    91be:	f387 8811 	msr	BASEPRI, r7
    91c2:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    91c6:	f1b4 3fff 	cmp.w	r4, #4294967295
    91ca:	bf08      	it	eq
    91cc:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    91d0:	d008      	beq.n	91e4 <pend+0x44>
    91d2:	462a      	mov	r2, r5
    91d4:	4623      	mov	r3, r4
    91d6:	f106 0018 	add.w	r0, r6, #24
    91da:	4903      	ldr	r1, [pc, #12]	; (91e8 <pend+0x48>)
}
    91dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    91e0:	f000 ba2a 	b.w	9638 <z_add_timeout>
    91e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    91e8:	0000b3a7 	.word	0x0000b3a7

000091ec <z_pend_curr>:
{
    91ec:	b510      	push	{r4, lr}
	pending_current = _current;
    91ee:	4b07      	ldr	r3, [pc, #28]	; (920c <z_pend_curr+0x20>)
    91f0:	6898      	ldr	r0, [r3, #8]
    91f2:	4b07      	ldr	r3, [pc, #28]	; (9210 <z_pend_curr+0x24>)
{
    91f4:	460c      	mov	r4, r1
	pending_current = _current;
    91f6:	6018      	str	r0, [r3, #0]
{
    91f8:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    91fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    91fe:	f7ff ffcf 	bl	91a0 <pend>
    9202:	4620      	mov	r0, r4
}
    9204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9208:	f7f9 bcd0 	b.w	2bac <arch_swap>
    920c:	20001904 	.word	0x20001904
    9210:	20001934 	.word	0x20001934

00009214 <z_set_prio>:
{
    9214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9216:	4604      	mov	r4, r0
	__asm__ volatile(
    9218:	f04f 0320 	mov.w	r3, #32
    921c:	f3ef 8611 	mrs	r6, BASEPRI
    9220:	f383 8812 	msr	BASEPRI_MAX, r3
    9224:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    9228:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    922a:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    922c:	b249      	sxtb	r1, r1
    922e:	d133      	bne.n	9298 <z_set_prio+0x84>
		if (need_sched) {
    9230:	6982      	ldr	r2, [r0, #24]
    9232:	bb8a      	cbnz	r2, 9298 <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9234:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9238:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    923a:	f002 f852 	bl	b2e2 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    923e:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    9240:	4a17      	ldr	r2, [pc, #92]	; (92a0 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    9242:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    9244:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9248:	7343      	strb	r3, [r0, #13]
    924a:	4610      	mov	r0, r2
    924c:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9250:	4283      	cmp	r3, r0
    9252:	d01b      	beq.n	928c <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9254:	b1d3      	cbz	r3, 928c <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    9256:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    9258:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    925c:	42a9      	cmp	r1, r5
    925e:	d010      	beq.n	9282 <z_set_prio+0x6e>
		return b2 - b1;
    9260:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    9262:	2d00      	cmp	r5, #0
    9264:	dd0d      	ble.n	9282 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    9266:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    9268:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    926c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    926e:	605c      	str	r4, [r3, #4]
			update_cache(1);
    9270:	2001      	movs	r0, #1
    9272:	f7ff fe8d 	bl	8f90 <update_cache>
    9276:	2001      	movs	r0, #1
	__asm__ volatile(
    9278:	f386 8811 	msr	BASEPRI, r6
    927c:	f3bf 8f6f 	isb	sy
}
    9280:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    9282:	42bb      	cmp	r3, r7
    9284:	d002      	beq.n	928c <z_set_prio+0x78>
    9286:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9288:	2b00      	cmp	r3, #0
    928a:	d1e5      	bne.n	9258 <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    928c:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    928e:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    9292:	601c      	str	r4, [r3, #0]
	list->tail = node;
    9294:	6254      	str	r4, [r2, #36]	; 0x24
}
    9296:	e7eb      	b.n	9270 <z_set_prio+0x5c>
			thread->base.prio = prio;
    9298:	73a1      	strb	r1, [r4, #14]
    929a:	2000      	movs	r0, #0
    929c:	e7ec      	b.n	9278 <z_set_prio+0x64>
    929e:	bf00      	nop
    92a0:	20001904 	.word	0x20001904

000092a4 <z_impl_k_thread_suspend>:
{
    92a4:	b570      	push	{r4, r5, r6, lr}
    92a6:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    92a8:	3018      	adds	r0, #24
    92aa:	f002 f922 	bl	b4f2 <z_abort_timeout>
	__asm__ volatile(
    92ae:	f04f 0320 	mov.w	r3, #32
    92b2:	f3ef 8611 	mrs	r6, BASEPRI
    92b6:	f383 8812 	msr	BASEPRI_MAX, r3
    92ba:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    92be:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    92c2:	7b63      	ldrb	r3, [r4, #13]
    92c4:	2a00      	cmp	r2, #0
    92c6:	da05      	bge.n	92d4 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    92c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    92cc:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    92ce:	4620      	mov	r0, r4
    92d0:	f002 f807 	bl	b2e2 <sys_dlist_remove>
		update_cache(thread == _current);
    92d4:	4d0b      	ldr	r5, [pc, #44]	; (9304 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    92d6:	7b63      	ldrb	r3, [r4, #13]
    92d8:	68a8      	ldr	r0, [r5, #8]
    92da:	f043 0310 	orr.w	r3, r3, #16
    92de:	7363      	strb	r3, [r4, #13]
    92e0:	1b03      	subs	r3, r0, r4
    92e2:	4258      	negs	r0, r3
    92e4:	4158      	adcs	r0, r3
    92e6:	f7ff fe53 	bl	8f90 <update_cache>
	__asm__ volatile(
    92ea:	f386 8811 	msr	BASEPRI, r6
    92ee:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    92f2:	68ab      	ldr	r3, [r5, #8]
    92f4:	42a3      	cmp	r3, r4
    92f6:	d103      	bne.n	9300 <z_impl_k_thread_suspend+0x5c>
}
    92f8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    92fc:	f002 b833 	b.w	b366 <z_reschedule_unlocked>
}
    9300:	bd70      	pop	{r4, r5, r6, pc}
    9302:	bf00      	nop
    9304:	20001904 	.word	0x20001904

00009308 <k_sched_unlock>:
{
    9308:	b510      	push	{r4, lr}
	__asm__ volatile(
    930a:	f04f 0320 	mov.w	r3, #32
    930e:	f3ef 8411 	mrs	r4, BASEPRI
    9312:	f383 8812 	msr	BASEPRI_MAX, r3
    9316:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    931a:	4b08      	ldr	r3, [pc, #32]	; (933c <k_sched_unlock+0x34>)
    931c:	689a      	ldr	r2, [r3, #8]
    931e:	7bd3      	ldrb	r3, [r2, #15]
    9320:	3301      	adds	r3, #1
    9322:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    9324:	2000      	movs	r0, #0
    9326:	f7ff fe33 	bl	8f90 <update_cache>
	__asm__ volatile(
    932a:	f384 8811 	msr	BASEPRI, r4
    932e:	f3bf 8f6f 	isb	sy
}
    9332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    9336:	f002 b816 	b.w	b366 <z_reschedule_unlocked>
    933a:	bf00      	nop
    933c:	20001904 	.word	0x20001904

00009340 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    9340:	4b04      	ldr	r3, [pc, #16]	; (9354 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    9342:	2100      	movs	r1, #0
    9344:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    9348:	e9c3 2208 	strd	r2, r2, [r3, #32]
    934c:	4608      	mov	r0, r1
    934e:	f7ff bdc7 	b.w	8ee0 <k_sched_time_slice_set>
    9352:	bf00      	nop
    9354:	20001904 	.word	0x20001904

00009358 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    9358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    935a:	f04f 0320 	mov.w	r3, #32
    935e:	f3ef 8511 	mrs	r5, BASEPRI
    9362:	f383 8812 	msr	BASEPRI_MAX, r3
    9366:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    936a:	491a      	ldr	r1, [pc, #104]	; (93d4 <z_impl_k_yield+0x7c>)
    936c:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    936e:	7b43      	ldrb	r3, [r0, #13]
    9370:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9374:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    9376:	f001 ffb4 	bl	b2e2 <sys_dlist_remove>
	}
	queue_thread(_current);
    937a:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    937c:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    937e:	4608      	mov	r0, r1
    9380:	f062 027f 	orn	r2, r2, #127	; 0x7f
    9384:	735a      	strb	r2, [r3, #13]
    9386:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    938a:	4282      	cmp	r2, r0
    938c:	d01c      	beq.n	93c8 <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    938e:	b1da      	cbz	r2, 93c8 <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    9390:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    9392:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    9396:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    939a:	42a6      	cmp	r6, r4
    939c:	d00f      	beq.n	93be <z_impl_k_yield+0x66>
		return b2 - b1;
    939e:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    93a0:	2c00      	cmp	r4, #0
    93a2:	dd0c      	ble.n	93be <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    93a4:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    93a6:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    93aa:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    93ac:	6053      	str	r3, [r2, #4]
	update_cache(1);
    93ae:	2001      	movs	r0, #1
    93b0:	f7ff fdee 	bl	8f90 <update_cache>
    93b4:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    93b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    93ba:	f7f9 bbf7 	b.w	2bac <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    93be:	42ba      	cmp	r2, r7
    93c0:	d002      	beq.n	93c8 <z_impl_k_yield+0x70>
    93c2:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    93c4:	2a00      	cmp	r2, #0
    93c6:	d1e6      	bne.n	9396 <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    93c8:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    93ca:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    93ce:	6013      	str	r3, [r2, #0]
	list->tail = node;
    93d0:	624b      	str	r3, [r1, #36]	; 0x24
}
    93d2:	e7ec      	b.n	93ae <z_impl_k_yield+0x56>
    93d4:	20001904 	.word	0x20001904

000093d8 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    93d8:	ea50 0301 	orrs.w	r3, r0, r1
{
    93dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    93e0:	4605      	mov	r5, r0
    93e2:	460e      	mov	r6, r1
	if (ticks == 0) {
    93e4:	d103      	bne.n	93ee <z_tick_sleep+0x16>
	z_impl_k_yield();
    93e6:	f7ff ffb7 	bl	9358 <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    93ea:	2000      	movs	r0, #0
    93ec:	e033      	b.n	9456 <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    93ee:	f06f 0401 	mvn.w	r4, #1
    93f2:	1a24      	subs	r4, r4, r0
    93f4:	f04f 33ff 	mov.w	r3, #4294967295
    93f8:	eb63 0301 	sbc.w	r3, r3, r1
    93fc:	2c01      	cmp	r4, #1
    93fe:	f173 0300 	sbcs.w	r3, r3, #0
    9402:	da02      	bge.n	940a <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    9404:	f002 f8b5 	bl	b572 <sys_clock_tick_get_32>
    9408:	1944      	adds	r4, r0, r5
    940a:	f04f 0320 	mov.w	r3, #32
    940e:	f3ef 8811 	mrs	r8, BASEPRI
    9412:	f383 8812 	msr	BASEPRI_MAX, r3
    9416:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    941a:	4f10      	ldr	r7, [pc, #64]	; (945c <z_tick_sleep+0x84>)
    941c:	4b10      	ldr	r3, [pc, #64]	; (9460 <z_tick_sleep+0x88>)
    941e:	68b8      	ldr	r0, [r7, #8]
    9420:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    9422:	f7ff fea5 	bl	9170 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    9426:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    9428:	490e      	ldr	r1, [pc, #56]	; (9464 <z_tick_sleep+0x8c>)
    942a:	462a      	mov	r2, r5
    942c:	4633      	mov	r3, r6
    942e:	3018      	adds	r0, #24
    9430:	f000 f902 	bl	9638 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    9434:	68ba      	ldr	r2, [r7, #8]
    9436:	7b53      	ldrb	r3, [r2, #13]
    9438:	f043 0310 	orr.w	r3, r3, #16
    943c:	7353      	strb	r3, [r2, #13]
    943e:	4640      	mov	r0, r8
    9440:	f7f9 fbb4 	bl	2bac <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    9444:	f002 f895 	bl	b572 <sys_clock_tick_get_32>
    9448:	1a20      	subs	r0, r4, r0
    944a:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    944e:	2801      	cmp	r0, #1
    9450:	f173 0300 	sbcs.w	r3, r3, #0
    9454:	dbc9      	blt.n	93ea <z_tick_sleep+0x12>
}
    9456:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    945a:	bf00      	nop
    945c:	20001904 	.word	0x20001904
    9460:	20001934 	.word	0x20001934
    9464:	0000b3a7 	.word	0x0000b3a7

00009468 <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9468:	f1b1 3fff 	cmp.w	r1, #4294967295
    946c:	bf08      	it	eq
    946e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    9472:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9474:	d106      	bne.n	9484 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    9476:	4b08      	ldr	r3, [pc, #32]	; (9498 <z_impl_k_sleep+0x30>)
    9478:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    947a:	f7ff ff13 	bl	92a4 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    947e:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    9482:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    9484:	f7ff ffa8 	bl	93d8 <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    9488:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    948c:	fb80 0303 	smull	r0, r3, r0, r3
    9490:	0bc0      	lsrs	r0, r0, #15
    9492:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    9496:	e7f4      	b.n	9482 <z_impl_k_sleep+0x1a>
    9498:	20001904 	.word	0x20001904

0000949c <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    949c:	4b01      	ldr	r3, [pc, #4]	; (94a4 <z_impl_z_current_get+0x8>)
    949e:	6898      	ldr	r0, [r3, #8]
    94a0:	4770      	bx	lr
    94a2:	bf00      	nop
    94a4:	20001904 	.word	0x20001904

000094a8 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    94a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    94ac:	4604      	mov	r4, r0
    94ae:	f04f 0320 	mov.w	r3, #32
    94b2:	f3ef 8611 	mrs	r6, BASEPRI
    94b6:	f383 8812 	msr	BASEPRI_MAX, r3
    94ba:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    94be:	7b43      	ldrb	r3, [r0, #13]
    94c0:	071a      	lsls	r2, r3, #28
    94c2:	d505      	bpl.n	94d0 <z_thread_abort+0x28>
	__asm__ volatile(
    94c4:	f386 8811 	msr	BASEPRI, r6
    94c8:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    94cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    94d0:	f023 0220 	bic.w	r2, r3, #32
    94d4:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    94d8:	09d2      	lsrs	r2, r2, #7
    94da:	d120      	bne.n	951e <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    94dc:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    94de:	68a3      	ldr	r3, [r4, #8]
    94e0:	b113      	cbz	r3, 94e8 <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    94e2:	4620      	mov	r0, r4
    94e4:	f001 ff05 	bl	b2f2 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    94e8:	f104 0018 	add.w	r0, r4, #24
    94ec:	f002 f801 	bl	b4f2 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    94f0:	f104 0758 	add.w	r7, r4, #88	; 0x58
    94f4:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    94f8:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    94fa:	42bd      	cmp	r5, r7
    94fc:	d000      	beq.n	9500 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    94fe:	b9b5      	cbnz	r5, 952e <z_thread_abort+0x86>
		update_cache(1);
    9500:	2001      	movs	r0, #1
    9502:	f7ff fd45 	bl	8f90 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    9506:	4b10      	ldr	r3, [pc, #64]	; (9548 <z_thread_abort+0xa0>)
    9508:	689b      	ldr	r3, [r3, #8]
    950a:	42a3      	cmp	r3, r4
    950c:	d1da      	bne.n	94c4 <z_thread_abort+0x1c>
    950e:	f3ef 8305 	mrs	r3, IPSR
    9512:	2b00      	cmp	r3, #0
    9514:	d1d6      	bne.n	94c4 <z_thread_abort+0x1c>
    9516:	4630      	mov	r0, r6
    9518:	f7f9 fb48 	bl	2bac <arch_swap>
	return ret;
    951c:	e7d2      	b.n	94c4 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    951e:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    9522:	f043 0308 	orr.w	r3, r3, #8
    9526:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    9528:	f001 fedb 	bl	b2e2 <sys_dlist_remove>
}
    952c:	e7d7      	b.n	94de <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    952e:	4628      	mov	r0, r5
    9530:	f001 fedf 	bl	b2f2 <unpend_thread_no_timeout>
    9534:	f105 0018 	add.w	r0, r5, #24
    9538:	f001 ffdb 	bl	b4f2 <z_abort_timeout>
    953c:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    9540:	4628      	mov	r0, r5
    9542:	f7ff fdc1 	bl	90c8 <ready_thread>
    9546:	e7d7      	b.n	94f8 <z_thread_abort+0x50>
    9548:	20001904 	.word	0x20001904

0000954c <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    954c:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    954e:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    9552:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    9554:	e9cd 6700 	strd	r6, r7, [sp]
    9558:	f7ff fe48 	bl	91ec <z_pend_curr>

	if (data != NULL) {
    955c:	b11c      	cbz	r4, 9566 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    955e:	4b03      	ldr	r3, [pc, #12]	; (956c <z_sched_wait+0x20>)
    9560:	689b      	ldr	r3, [r3, #8]
    9562:	695b      	ldr	r3, [r3, #20]
    9564:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    9566:	b002      	add	sp, #8
    9568:	bdd0      	pop	{r4, r6, r7, pc}
    956a:	bf00      	nop
    956c:	20001904 	.word	0x20001904

00009570 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    9570:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    9572:	4806      	ldr	r0, [pc, #24]	; (958c <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    9574:	4a06      	ldr	r2, [pc, #24]	; (9590 <z_data_copy+0x20>)
    9576:	4907      	ldr	r1, [pc, #28]	; (9594 <z_data_copy+0x24>)
    9578:	1a12      	subs	r2, r2, r0
    957a:	f001 fd79 	bl	b070 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    957e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    9582:	4a05      	ldr	r2, [pc, #20]	; (9598 <z_data_copy+0x28>)
    9584:	4905      	ldr	r1, [pc, #20]	; (959c <z_data_copy+0x2c>)
    9586:	4806      	ldr	r0, [pc, #24]	; (95a0 <z_data_copy+0x30>)
    9588:	f001 bd72 	b.w	b070 <z_early_memcpy>
    958c:	20000000 	.word	0x20000000
    9590:	20000248 	.word	0x20000248
    9594:	0000deac 	.word	0x0000deac
    9598:	00000000 	.word	0x00000000
    959c:	0000deac 	.word	0x0000deac
    95a0:	20000000 	.word	0x20000000

000095a4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    95a4:	4b03      	ldr	r3, [pc, #12]	; (95b4 <elapsed+0x10>)
    95a6:	681b      	ldr	r3, [r3, #0]
    95a8:	b90b      	cbnz	r3, 95ae <elapsed+0xa>
    95aa:	f7fc b945 	b.w	5838 <sys_clock_elapsed>
}
    95ae:	2000      	movs	r0, #0
    95b0:	4770      	bx	lr
    95b2:	bf00      	nop
    95b4:	20001940 	.word	0x20001940

000095b8 <next_timeout>:
	return list->head == list;
    95b8:	4b10      	ldr	r3, [pc, #64]	; (95fc <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    95ba:	b510      	push	{r4, lr}
    95bc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    95be:	429c      	cmp	r4, r3
    95c0:	bf08      	it	eq
    95c2:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    95c4:	f7ff ffee 	bl	95a4 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    95c8:	b1a4      	cbz	r4, 95f4 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    95ca:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    95ce:	1a1b      	subs	r3, r3, r0
    95d0:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    95d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    95d8:	f170 0200 	sbcs.w	r2, r0, #0
    95dc:	da0a      	bge.n	95f4 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    95de:	2800      	cmp	r0, #0
    95e0:	bfac      	ite	ge
    95e2:	4618      	movge	r0, r3
    95e4:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    95e6:	4b06      	ldr	r3, [pc, #24]	; (9600 <next_timeout+0x48>)
    95e8:	691b      	ldr	r3, [r3, #16]
    95ea:	b113      	cbz	r3, 95f2 <next_timeout+0x3a>
    95ec:	4298      	cmp	r0, r3
    95ee:	bfa8      	it	ge
    95f0:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    95f2:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    95f4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    95f8:	e7f5      	b.n	95e6 <next_timeout+0x2e>
    95fa:	bf00      	nop
    95fc:	200000f0 	.word	0x200000f0
    9600:	20001904 	.word	0x20001904

00009604 <remove_timeout>:
{
    9604:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    9606:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    9608:	b168      	cbz	r0, 9626 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    960a:	4a0a      	ldr	r2, [pc, #40]	; (9634 <remove_timeout+0x30>)
    960c:	6852      	ldr	r2, [r2, #4]
    960e:	4290      	cmp	r0, r2
    9610:	d009      	beq.n	9626 <remove_timeout+0x22>
	if (next(t) != NULL) {
    9612:	b143      	cbz	r3, 9626 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    9614:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    9618:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    961c:	1912      	adds	r2, r2, r4
    961e:	eb41 0105 	adc.w	r1, r1, r5
    9622:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    9626:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    9628:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    962a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    962c:	2300      	movs	r3, #0
	node->prev = NULL;
    962e:	e9c0 3300 	strd	r3, r3, [r0]
}
    9632:	bd30      	pop	{r4, r5, pc}
    9634:	200000f0 	.word	0x200000f0

00009638 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    9638:	f1b3 3fff 	cmp.w	r3, #4294967295
    963c:	bf08      	it	eq
    963e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    9642:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9644:	4604      	mov	r4, r0
    9646:	461f      	mov	r7, r3
    9648:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    964a:	d067      	beq.n	971c <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    964c:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    964e:	f04f 0320 	mov.w	r3, #32
    9652:	f3ef 8611 	mrs	r6, BASEPRI
    9656:	f383 8812 	msr	BASEPRI_MAX, r3
    965a:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    965e:	f06f 0201 	mvn.w	r2, #1
    9662:	1b53      	subs	r3, r2, r5
    9664:	f04f 3cff 	mov.w	ip, #4294967295
    9668:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    966c:	2b00      	cmp	r3, #0
    966e:	db1b      	blt.n	96a8 <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    9670:	4b2b      	ldr	r3, [pc, #172]	; (9720 <z_add_timeout+0xe8>)
    9672:	e9d3 1300 	ldrd	r1, r3, [r3]
    9676:	1a52      	subs	r2, r2, r1
    9678:	eb6c 0303 	sbc.w	r3, ip, r3
    967c:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    967e:	eb63 0307 	sbc.w	r3, r3, r7
    9682:	2d01      	cmp	r5, #1
    9684:	f173 0200 	sbcs.w	r2, r3, #0
    9688:	bfbc      	itt	lt
    968a:	2501      	movlt	r5, #1
    968c:	2300      	movlt	r3, #0
    968e:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    9692:	4824      	ldr	r0, [pc, #144]	; (9724 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    9694:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9698:	4283      	cmp	r3, r0
    969a:	d118      	bne.n	96ce <z_add_timeout+0x96>
	node->prev = tail;
    969c:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    96a0:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    96a4:	6044      	str	r4, [r0, #4]
}
    96a6:	e026      	b.n	96f6 <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    96a8:	f7ff ff7c 	bl	95a4 <elapsed>
    96ac:	3501      	adds	r5, #1
    96ae:	f147 0700 	adc.w	r7, r7, #0
    96b2:	182d      	adds	r5, r5, r0
    96b4:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    96b8:	e9c4 5704 	strd	r5, r7, [r4, #16]
    96bc:	e7e9      	b.n	9692 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    96be:	1a52      	subs	r2, r2, r1
    96c0:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    96c4:	459c      	cmp	ip, r3
    96c6:	e9c4 2504 	strd	r2, r5, [r4, #16]
    96ca:	d0e7      	beq.n	969c <z_add_timeout+0x64>
    96cc:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    96ce:	2b00      	cmp	r3, #0
    96d0:	d0e4      	beq.n	969c <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    96d2:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    96d6:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    96da:	428a      	cmp	r2, r1
    96dc:	eb75 0e07 	sbcs.w	lr, r5, r7
    96e0:	daed      	bge.n	96be <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    96e2:	1a8a      	subs	r2, r1, r2
    96e4:	eb67 0505 	sbc.w	r5, r7, r5
    96e8:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    96ec:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    96ee:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    96f2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    96f4:	605c      	str	r4, [r3, #4]
	return list->head == list;
    96f6:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    96f8:	4283      	cmp	r3, r0
    96fa:	d00b      	beq.n	9714 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    96fc:	429c      	cmp	r4, r3
    96fe:	d109      	bne.n	9714 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    9700:	f7ff ff5a 	bl	95b8 <next_timeout>

			if (next_time == 0 ||
    9704:	b118      	cbz	r0, 970e <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    9706:	4b08      	ldr	r3, [pc, #32]	; (9728 <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    9708:	691b      	ldr	r3, [r3, #16]
    970a:	4283      	cmp	r3, r0
    970c:	d002      	beq.n	9714 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    970e:	2100      	movs	r1, #0
    9710:	f7fc f860 	bl	57d4 <sys_clock_set_timeout>
	__asm__ volatile(
    9714:	f386 8811 	msr	BASEPRI, r6
    9718:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    971c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    971e:	bf00      	nop
    9720:	200009d0 	.word	0x200009d0
    9724:	200000f0 	.word	0x200000f0
    9728:	20001904 	.word	0x20001904

0000972c <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    972c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9730:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    9732:	f7ff fc87 	bl	9044 <z_time_slice>
	__asm__ volatile(
    9736:	f04f 0320 	mov.w	r3, #32
    973a:	f3ef 8411 	mrs	r4, BASEPRI
    973e:	f383 8812 	msr	BASEPRI_MAX, r3
    9742:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    9746:	4e24      	ldr	r6, [pc, #144]	; (97d8 <sys_clock_announce+0xac>)
	return list->head == list;
    9748:	f8df 8090 	ldr.w	r8, [pc, #144]	; 97dc <sys_clock_announce+0xb0>
    974c:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    974e:	4d24      	ldr	r5, [pc, #144]	; (97e0 <sys_clock_announce+0xb4>)
    9750:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    9754:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9756:	4540      	cmp	r0, r8
		curr_tick += dt;
    9758:	e9d5 1e00 	ldrd	r1, lr, [r5]
    975c:	ea4f 77e2 	mov.w	r7, r2, asr #31
    9760:	d00b      	beq.n	977a <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    9762:	b150      	cbz	r0, 977a <sys_clock_announce+0x4e>
    9764:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    9768:	429a      	cmp	r2, r3
    976a:	eb77 090c 	sbcs.w	r9, r7, ip
    976e:	da16      	bge.n	979e <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    9770:	1a9b      	subs	r3, r3, r2
    9772:	eb6c 0c07 	sbc.w	ip, ip, r7
    9776:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    977a:	1852      	adds	r2, r2, r1
    977c:	eb4e 0707 	adc.w	r7, lr, r7
    9780:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    9784:	2500      	movs	r5, #0
    9786:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    9788:	f7ff ff16 	bl	95b8 <next_timeout>
    978c:	4629      	mov	r1, r5
    978e:	f7fc f821 	bl	57d4 <sys_clock_set_timeout>
	__asm__ volatile(
    9792:	f384 8811 	msr	BASEPRI, r4
    9796:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    979a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    979e:	1859      	adds	r1, r3, r1
    97a0:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    97a4:	1ad3      	subs	r3, r2, r3
    97a6:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    97a8:	2200      	movs	r2, #0
    97aa:	2300      	movs	r3, #0
    97ac:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    97b0:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    97b4:	f7ff ff26 	bl	9604 <remove_timeout>
    97b8:	f384 8811 	msr	BASEPRI, r4
    97bc:	f3bf 8f6f 	isb	sy
		t->fn(t);
    97c0:	6883      	ldr	r3, [r0, #8]
    97c2:	4798      	blx	r3
	__asm__ volatile(
    97c4:	f04f 0320 	mov.w	r3, #32
    97c8:	f3ef 8411 	mrs	r4, BASEPRI
    97cc:	f383 8812 	msr	BASEPRI_MAX, r3
    97d0:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    97d4:	e7bc      	b.n	9750 <sys_clock_announce+0x24>
    97d6:	bf00      	nop
    97d8:	20001940 	.word	0x20001940
    97dc:	200000f0 	.word	0x200000f0
    97e0:	200009d0 	.word	0x200009d0

000097e4 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    97e4:	b510      	push	{r4, lr}
    97e6:	f04f 0320 	mov.w	r3, #32
    97ea:	f3ef 8411 	mrs	r4, BASEPRI
    97ee:	f383 8812 	msr	BASEPRI_MAX, r3
    97f2:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    97f6:	f7fc f81f 	bl	5838 <sys_clock_elapsed>
    97fa:	4a05      	ldr	r2, [pc, #20]	; (9810 <sys_clock_tick_get+0x2c>)
    97fc:	e9d2 3100 	ldrd	r3, r1, [r2]
    9800:	18c0      	adds	r0, r0, r3
    9802:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    9806:	f384 8811 	msr	BASEPRI, r4
    980a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    980e:	bd10      	pop	{r4, pc}
    9810:	200009d0 	.word	0x200009d0

00009814 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    9814:	b570      	push	{r4, r5, r6, lr}
    9816:	4604      	mov	r4, r0
	__asm__ volatile(
    9818:	f04f 0320 	mov.w	r3, #32
    981c:	f3ef 8511 	mrs	r5, BASEPRI
    9820:	f383 8812 	msr	BASEPRI_MAX, r3
    9824:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    9828:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    982c:	3301      	adds	r3, #1
    982e:	f142 0200 	adc.w	r2, r2, #0
    9832:	2b02      	cmp	r3, #2
    9834:	f172 0300 	sbcs.w	r3, r2, #0
    9838:	d304      	bcc.n	9844 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    983a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    983e:	4917      	ldr	r1, [pc, #92]	; (989c <z_timer_expiration_handler+0x88>)
    9840:	f7ff fefa 	bl	9638 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    9844:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9846:	3301      	adds	r3, #1
    9848:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    984a:	6a23      	ldr	r3, [r4, #32]
    984c:	b173      	cbz	r3, 986c <z_timer_expiration_handler+0x58>
	__asm__ volatile(
    984e:	f385 8811 	msr	BASEPRI, r5
    9852:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    9856:	6a23      	ldr	r3, [r4, #32]
    9858:	4620      	mov	r0, r4
    985a:	4798      	blx	r3
	__asm__ volatile(
    985c:	f04f 0320 	mov.w	r3, #32
    9860:	f3ef 8511 	mrs	r5, BASEPRI
    9864:	f383 8812 	msr	BASEPRI_MAX, r3
    9868:	f3bf 8f6f 	isb	sy
	return list->head == list;
    986c:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9870:	42a6      	cmp	r6, r4
    9872:	d000      	beq.n	9876 <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    9874:	b926      	cbnz	r6, 9880 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
    9876:	f385 8811 	msr	BASEPRI, r5
    987a:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    987e:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    9880:	4630      	mov	r0, r6
    9882:	f001 fd40 	bl	b306 <z_unpend_thread_no_timeout>
    9886:	2300      	movs	r3, #0
    9888:	67b3      	str	r3, [r6, #120]	; 0x78
    988a:	f385 8811 	msr	BASEPRI, r5
    988e:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    9892:	4630      	mov	r0, r6
}
    9894:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    9898:	f001 bd75 	b.w	b386 <z_ready_thread>
    989c:	00009815 	.word	0x00009815

000098a0 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    98a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    98a4:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    98a6:	f1b3 3fff 	cmp.w	r3, #4294967295
    98aa:	bf08      	it	eq
    98ac:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
    98b0:	4606      	mov	r6, r0
    98b2:	461c      	mov	r4, r3
    98b4:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    98b8:	4689      	mov	r9, r1
    98ba:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    98bc:	d03e      	beq.n	993c <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    98be:	f1b0 3fff 	cmp.w	r0, #4294967295
    98c2:	bf08      	it	eq
    98c4:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    98c8:	4615      	mov	r5, r2
    98ca:	4607      	mov	r7, r0
    98cc:	d014      	beq.n	98f8 <z_impl_k_timer_start+0x58>
    98ce:	ea50 0302 	orrs.w	r3, r0, r2
    98d2:	d011      	beq.n	98f8 <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    98d4:	f06f 0301 	mvn.w	r3, #1
    98d8:	1a9b      	subs	r3, r3, r2
    98da:	f04f 33ff 	mov.w	r3, #4294967295
    98de:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    98e2:	2b00      	cmp	r3, #0
    98e4:	da08      	bge.n	98f8 <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    98e6:	2a02      	cmp	r2, #2
    98e8:	f170 0300 	sbcs.w	r3, r0, #0
    98ec:	bfbc      	itt	lt
    98ee:	2502      	movlt	r5, #2
    98f0:	2700      	movlt	r7, #0
    98f2:	3d01      	subs	r5, #1
    98f4:	f147 37ff 	adc.w	r7, r7, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    98f8:	f06f 0301 	mvn.w	r3, #1
    98fc:	1a5b      	subs	r3, r3, r1
    98fe:	f04f 33ff 	mov.w	r3, #4294967295
    9902:	eb63 0304 	sbc.w	r3, r3, r4
    9906:	2b00      	cmp	r3, #0
    9908:	da09      	bge.n	991e <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    990a:	2901      	cmp	r1, #1
    990c:	f174 0300 	sbcs.w	r3, r4, #0
    9910:	bfbc      	itt	lt
    9912:	2101      	movlt	r1, #1
    9914:	2400      	movlt	r4, #0
    9916:	f111 39ff 	adds.w	r9, r1, #4294967295
    991a:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    991e:	4630      	mov	r0, r6
    9920:	f001 fde7 	bl	b4f2 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    9924:	2300      	movs	r3, #0
    9926:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
    9928:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    992c:	464a      	mov	r2, r9
    992e:	4643      	mov	r3, r8
    9930:	4630      	mov	r0, r6
    9932:	4903      	ldr	r1, [pc, #12]	; (9940 <z_impl_k_timer_start+0xa0>)
		     duration);
}
    9934:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9938:	f7ff be7e 	b.w	9638 <z_add_timeout>
}
    993c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9940:	00009815 	.word	0x00009815

00009944 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    9944:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9946:	4606      	mov	r6, r0
    9948:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    994a:	f001 fbbc 	bl	b0c6 <k_is_in_isr>
    994e:	b978      	cbnz	r0, 9970 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    9950:	4b0b      	ldr	r3, [pc, #44]	; (9980 <z_thread_aligned_alloc+0x3c>)
    9952:	689b      	ldr	r3, [r3, #8]
    9954:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
    9956:	b17c      	cbz	r4, 9978 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    9958:	1d2a      	adds	r2, r5, #4
    995a:	d209      	bcs.n	9970 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    995c:	2000      	movs	r0, #0
    995e:	2100      	movs	r1, #0
    9960:	e9cd 0100 	strd	r0, r1, [sp]
    9964:	f046 0104 	orr.w	r1, r6, #4
    9968:	4620      	mov	r0, r4
    996a:	f001 fe6d 	bl	b648 <k_heap_aligned_alloc>
	if (mem == NULL) {
    996e:	b908      	cbnz	r0, 9974 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    9970:	2400      	movs	r4, #0
	}

	return ret;
    9972:	e001      	b.n	9978 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
    9974:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    9976:	1d04      	adds	r4, r0, #4
}
    9978:	4620      	mov	r0, r4
    997a:	b002      	add	sp, #8
    997c:	bd70      	pop	{r4, r5, r6, pc}
    997e:	bf00      	nop
    9980:	20001904 	.word	0x20001904

00009984 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    9984:	4a02      	ldr	r2, [pc, #8]	; (9990 <boot_banner+0xc>)
    9986:	4903      	ldr	r1, [pc, #12]	; (9994 <boot_banner+0x10>)
    9988:	4803      	ldr	r0, [pc, #12]	; (9998 <boot_banner+0x14>)
    998a:	f000 b87a 	b.w	9a82 <printk>
    998e:	bf00      	nop
    9990:	0000bd50 	.word	0x0000bd50
    9994:	0000de75 	.word	0x0000de75
    9998:	0000de84 	.word	0x0000de84

0000999c <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    999c:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    999e:	4c06      	ldr	r4, [pc, #24]	; (99b8 <statics_init+0x1c>)
    99a0:	4d06      	ldr	r5, [pc, #24]	; (99bc <statics_init+0x20>)
    99a2:	42ac      	cmp	r4, r5
    99a4:	d301      	bcc.n	99aa <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    99a6:	2000      	movs	r0, #0
    99a8:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    99aa:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    99ae:	4620      	mov	r0, r4
    99b0:	f001 fe42 	bl	b638 <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    99b4:	3414      	adds	r4, #20
    99b6:	e7f4      	b.n	99a2 <statics_init+0x6>
    99b8:	2000016c 	.word	0x2000016c
    99bc:	2000016c 	.word	0x2000016c

000099c0 <main>:
 * SPDX-License-Identifier: Apache-2.0
 */

void main(void) {

}
    99c0:	4770      	bx	lr

000099c2 <cbpprintf_external>:
{
    99c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    99c6:	4607      	mov	r7, r0
    99c8:	460e      	mov	r6, r1
    99ca:	4690      	mov	r8, r2
	if (buf == NULL) {
    99cc:	461d      	mov	r5, r3
    99ce:	b30b      	cbz	r3, 9a14 <cbpprintf_external+0x52>
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    99d0:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = buf[2];
    99d2:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
    99d4:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = buf[3];
    99d8:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    99da:	441c      	add	r4, r3
    99dc:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    99e0:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
    99e2:	f04f 0900 	mov.w	r9, #0
    99e6:	45d1      	cmp	r9, sl
    99e8:	d308      	bcc.n	99fc <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    99ea:	686a      	ldr	r2, [r5, #4]
    99ec:	f105 0308 	add.w	r3, r5, #8
    99f0:	4641      	mov	r1, r8
    99f2:	4638      	mov	r0, r7
    99f4:	46b4      	mov	ip, r6
}
    99f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    99fa:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    99fc:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    9a00:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    9a04:	4620      	mov	r0, r4
    9a06:	f000 fe9a 	bl	a73e <strlen>
    9a0a:	3001      	adds	r0, #1
    9a0c:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    9a0e:	f109 0901 	add.w	r9, r9, #1
    9a12:	e7e8      	b.n	99e6 <cbpprintf_external+0x24>
}
    9a14:	f06f 0015 	mvn.w	r0, #21
    9a18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00009a1c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    9a1c:	4603      	mov	r3, r0
    9a1e:	b158      	cbz	r0, 9a38 <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9a20:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    9a22:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    9a26:	2a01      	cmp	r2, #1
    9a28:	d003      	beq.n	9a32 <sys_notify_validate+0x16>
    9a2a:	2a03      	cmp	r2, #3
    9a2c:	d104      	bne.n	9a38 <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    9a2e:	6802      	ldr	r2, [r0, #0]
    9a30:	b112      	cbz	r2, 9a38 <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    9a32:	2000      	movs	r0, #0
    9a34:	6098      	str	r0, [r3, #8]
    9a36:	4770      	bx	lr
		return -EINVAL;
    9a38:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    9a3c:	4770      	bx	lr

00009a3e <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9a3e:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    9a40:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    9a42:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    9a46:	2a03      	cmp	r2, #3
    9a48:	f04f 0200 	mov.w	r2, #0
{
    9a4c:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    9a4e:	bf0c      	ite	eq
    9a50:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    9a52:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    9a54:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    9a56:	4770      	bx	lr

00009a58 <arch_printk_char_out>:
}
    9a58:	2000      	movs	r0, #0
    9a5a:	4770      	bx	lr

00009a5c <str_out>:
{
    9a5c:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    9a5e:	688a      	ldr	r2, [r1, #8]
    9a60:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    9a62:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    9a64:	b114      	cbz	r4, 9a6c <str_out+0x10>
    9a66:	684b      	ldr	r3, [r1, #4]
    9a68:	4293      	cmp	r3, r2
    9a6a:	dc01      	bgt.n	9a70 <str_out+0x14>
		ctx->count++;
    9a6c:	608d      	str	r5, [r1, #8]
}
    9a6e:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    9a70:	3b01      	subs	r3, #1
    9a72:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    9a74:	bf08      	it	eq
    9a76:	2200      	moveq	r2, #0
    9a78:	608d      	str	r5, [r1, #8]
    9a7a:	bf0c      	ite	eq
    9a7c:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    9a7e:	54a0      	strbne	r0, [r4, r2]
    9a80:	e7f5      	b.n	9a6e <str_out+0x12>

00009a82 <printk>:
{
    9a82:	b40f      	push	{r0, r1, r2, r3}
    9a84:	b507      	push	{r0, r1, r2, lr}
    9a86:	a904      	add	r1, sp, #16
    9a88:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    9a8c:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    9a8e:	f000 fd51 	bl	a534 <z_log_vprintk>
}
    9a92:	b003      	add	sp, #12
    9a94:	f85d eb04 	ldr.w	lr, [sp], #4
    9a98:	b004      	add	sp, #16
    9a9a:	4770      	bx	lr

00009a9c <snprintk>:
{
    9a9c:	b40c      	push	{r2, r3}
    9a9e:	b507      	push	{r0, r1, r2, lr}
    9aa0:	ab04      	add	r3, sp, #16
    9aa2:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    9aa6:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    9aa8:	f7f7 f81a 	bl	ae0 <vsnprintk>
}
    9aac:	b003      	add	sp, #12
    9aae:	f85d eb04 	ldr.w	lr, [sp], #4
    9ab2:	b002      	add	sp, #8
    9ab4:	4770      	bx	lr

00009ab6 <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9ab6:	b510      	push	{r4, lr}
    9ab8:	4603      	mov	r3, r0
	return list->head;
    9aba:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9abc:	2200      	movs	r2, #0
    9abe:	b158      	cbz	r0, 9ad8 <sys_slist_find_and_remove+0x22>
    9ac0:	4288      	cmp	r0, r1
    9ac2:	d10f      	bne.n	9ae4 <sys_slist_find_and_remove+0x2e>
	return node->next;
    9ac4:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    9ac6:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    9ac8:	b93a      	cbnz	r2, 9ada <sys_slist_find_and_remove+0x24>
    9aca:	42a1      	cmp	r1, r4
	list->head = node;
    9acc:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    9ace:	d100      	bne.n	9ad2 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    9ad0:	6058      	str	r0, [r3, #4]
	parent->next = child;
    9ad2:	2300      	movs	r3, #0
    9ad4:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9ad6:	2001      	movs	r0, #1
    9ad8:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
    9ada:	42a1      	cmp	r1, r4
	parent->next = child;
    9adc:	6010      	str	r0, [r2, #0]
	list->tail = node;
    9ade:	bf08      	it	eq
    9ae0:	605a      	streq	r2, [r3, #4]
}
    9ae2:	e7f6      	b.n	9ad2 <sys_slist_find_and_remove+0x1c>
	return node->next;
    9ae4:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9ae6:	6800      	ldr	r0, [r0, #0]
    9ae8:	e7e9      	b.n	9abe <sys_slist_find_and_remove+0x8>

00009aea <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9aea:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    9aec:	f013 0307 	ands.w	r3, r3, #7
    9af0:	d105      	bne.n	9afe <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    9af2:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    9af4:	2b00      	cmp	r3, #0
    9af6:	bf0c      	ite	eq
    9af8:	2000      	moveq	r0, #0
    9afa:	2003      	movne	r0, #3
    9afc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    9afe:	2b02      	cmp	r3, #2
    9b00:	d105      	bne.n	9b0e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    9b02:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    9b04:	2b00      	cmp	r3, #0
    9b06:	bf14      	ite	ne
    9b08:	2000      	movne	r0, #0
    9b0a:	2004      	moveq	r0, #4
    9b0c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    9b0e:	2b01      	cmp	r3, #1
    9b10:	d105      	bne.n	9b1e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    9b12:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    9b14:	2b00      	cmp	r3, #0
    9b16:	bf0c      	ite	eq
    9b18:	2000      	moveq	r0, #0
    9b1a:	2005      	movne	r0, #5
    9b1c:	4770      	bx	lr
	int evt = EVT_NOP;
    9b1e:	2000      	movs	r0, #0
}
    9b20:	4770      	bx	lr

00009b22 <notify_one>:
{
    9b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9b26:	460d      	mov	r5, r1
    9b28:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9b2a:	4619      	mov	r1, r3
    9b2c:	1d28      	adds	r0, r5, #4
{
    9b2e:	4690      	mov	r8, r2
    9b30:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9b32:	f7ff ff84 	bl	9a3e <sys_notify_finalize>
	if (cb) {
    9b36:	4604      	mov	r4, r0
    9b38:	b138      	cbz	r0, 9b4a <notify_one+0x28>
		cb(mgr, cli, state, res);
    9b3a:	4633      	mov	r3, r6
    9b3c:	4642      	mov	r2, r8
    9b3e:	4629      	mov	r1, r5
    9b40:	4638      	mov	r0, r7
    9b42:	46a4      	mov	ip, r4
}
    9b44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    9b48:	4760      	bx	ip
}
    9b4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009b4e <transition_complete>:
{
    9b4e:	b410      	push	{r4}
	__asm__ volatile(
    9b50:	f04f 0420 	mov.w	r4, #32
    9b54:	f3ef 8211 	mrs	r2, BASEPRI
    9b58:	f384 8812 	msr	BASEPRI_MAX, r4
    9b5c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    9b60:	6141      	str	r1, [r0, #20]
}
    9b62:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    9b64:	2101      	movs	r1, #1
    9b66:	f7f6 bfcf 	b.w	b08 <process_event>

00009b6a <validate_args>:
{
    9b6a:	b510      	push	{r4, lr}
    9b6c:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    9b6e:	b140      	cbz	r0, 9b82 <validate_args+0x18>
    9b70:	b139      	cbz	r1, 9b82 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    9b72:	1d08      	adds	r0, r1, #4
    9b74:	f7ff ff52 	bl	9a1c <sys_notify_validate>
	if ((rv == 0)
    9b78:	b928      	cbnz	r0, 9b86 <validate_args+0x1c>
	    && ((cli->notify.flags
    9b7a:	68a3      	ldr	r3, [r4, #8]
    9b7c:	f033 0303 	bics.w	r3, r3, #3
    9b80:	d001      	beq.n	9b86 <validate_args+0x1c>
		rv = -EINVAL;
    9b82:	f06f 0015 	mvn.w	r0, #21
}
    9b86:	bd10      	pop	{r4, pc}

00009b88 <onoff_manager_init>:
{
    9b88:	b538      	push	{r3, r4, r5, lr}
    9b8a:	460c      	mov	r4, r1
	if ((mgr == NULL)
    9b8c:	4605      	mov	r5, r0
    9b8e:	b158      	cbz	r0, 9ba8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
    9b90:	b151      	cbz	r1, 9ba8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    9b92:	680b      	ldr	r3, [r1, #0]
    9b94:	b143      	cbz	r3, 9ba8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    9b96:	684b      	ldr	r3, [r1, #4]
    9b98:	b133      	cbz	r3, 9ba8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    9b9a:	221c      	movs	r2, #28
    9b9c:	2100      	movs	r1, #0
    9b9e:	f000 fdf5 	bl	a78c <memset>
    9ba2:	612c      	str	r4, [r5, #16]
	return 0;
    9ba4:	2000      	movs	r0, #0
}
    9ba6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9ba8:	f06f 0015 	mvn.w	r0, #21
    9bac:	e7fb      	b.n	9ba6 <onoff_manager_init+0x1e>

00009bae <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    9bae:	b570      	push	{r4, r5, r6, lr}
    9bb0:	4604      	mov	r4, r0
    9bb2:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    9bb4:	f7ff ffd9 	bl	9b6a <validate_args>

	if (rv < 0) {
    9bb8:	1e05      	subs	r5, r0, #0
    9bba:	db31      	blt.n	9c20 <onoff_request+0x72>
    9bbc:	f04f 0320 	mov.w	r3, #32
    9bc0:	f3ef 8111 	mrs	r1, BASEPRI
    9bc4:	f383 8812 	msr	BASEPRI_MAX, r3
    9bc8:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    9bcc:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9bce:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    9bd0:	f64f 75ff 	movw	r5, #65535	; 0xffff
    9bd4:	42ab      	cmp	r3, r5
    9bd6:	f000 0207 	and.w	r2, r0, #7
    9bda:	d02e      	beq.n	9c3a <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    9bdc:	2a02      	cmp	r2, #2
    9bde:	d10e      	bne.n	9bfe <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    9be0:	3301      	adds	r3, #1
    9be2:	8363      	strh	r3, [r4, #26]
	rv = state;
    9be4:	4615      	mov	r5, r2
		notify = true;
    9be6:	2301      	movs	r3, #1
	__asm__ volatile(
    9be8:	f381 8811 	msr	BASEPRI, r1
    9bec:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    9bf0:	b1b3      	cbz	r3, 9c20 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    9bf2:	2300      	movs	r3, #0
    9bf4:	4631      	mov	r1, r6
    9bf6:	4620      	mov	r0, r4
    9bf8:	f7ff ff93 	bl	9b22 <notify_one>
    9bfc:	e010      	b.n	9c20 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    9bfe:	0783      	lsls	r3, r0, #30
    9c00:	d001      	beq.n	9c06 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    9c02:	2a06      	cmp	r2, #6
    9c04:	d10e      	bne.n	9c24 <onoff_request+0x76>
	parent->next = child;
    9c06:	2300      	movs	r3, #0
    9c08:	6033      	str	r3, [r6, #0]
	return list->tail;
    9c0a:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    9c0c:	b993      	cbnz	r3, 9c34 <onoff_request+0x86>
	list->head = node;
    9c0e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    9c12:	4615      	mov	r5, r2
    9c14:	b962      	cbnz	r2, 9c30 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    9c16:	460a      	mov	r2, r1
    9c18:	4620      	mov	r0, r4
    9c1a:	2102      	movs	r1, #2
    9c1c:	f7f6 ff74 	bl	b08 <process_event>
		}
	}

	return rv;
}
    9c20:	4628      	mov	r0, r5
    9c22:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    9c24:	2a05      	cmp	r2, #5
    9c26:	bf0c      	ite	eq
    9c28:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    9c2c:	f06f 0504 	mvnne.w	r5, #4
    9c30:	2300      	movs	r3, #0
    9c32:	e7d9      	b.n	9be8 <onoff_request+0x3a>
	parent->next = child;
    9c34:	601e      	str	r6, [r3, #0]
	list->tail = node;
    9c36:	6066      	str	r6, [r4, #4]
}
    9c38:	e7eb      	b.n	9c12 <onoff_request+0x64>
		rv = -EAGAIN;
    9c3a:	f06f 050a 	mvn.w	r5, #10
    9c3e:	e7f7      	b.n	9c30 <onoff_request+0x82>

00009c40 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    9c40:	b510      	push	{r4, lr}
	__asm__ volatile(
    9c42:	f04f 0320 	mov.w	r3, #32
    9c46:	f3ef 8211 	mrs	r2, BASEPRI
    9c4a:	f383 8812 	msr	BASEPRI_MAX, r3
    9c4e:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9c52:	8b04      	ldrh	r4, [r0, #24]
    9c54:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    9c58:	2c02      	cmp	r4, #2
    9c5a:	d00a      	beq.n	9c72 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    9c5c:	2c01      	cmp	r4, #1
    9c5e:	bf0c      	ite	eq
    9c60:	f06f 0004 	mvneq.w	r0, #4
    9c64:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    9c68:	f382 8811 	msr	BASEPRI, r2
    9c6c:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    9c70:	e008      	b.n	9c84 <onoff_release+0x44>
	mgr->refs -= 1U;
    9c72:	8b43      	ldrh	r3, [r0, #26]
    9c74:	3b01      	subs	r3, #1
    9c76:	b29b      	uxth	r3, r3
    9c78:	8343      	strh	r3, [r0, #26]
	if (stop) {
    9c7a:	b923      	cbnz	r3, 9c86 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    9c7c:	4621      	mov	r1, r4
    9c7e:	f7f6 ff43 	bl	b08 <process_event>
	int rv = state;
    9c82:	4620      	mov	r0, r4
}
    9c84:	bd10      	pop	{r4, pc}
	int rv = state;
    9c86:	4620      	mov	r0, r4
    9c88:	e7ee      	b.n	9c68 <onoff_release+0x28>

00009c8a <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    9c8a:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    9c8c:	b1b0      	cbz	r0, 9cbc <onoff_cancel+0x32>
    9c8e:	b1a9      	cbz	r1, 9cbc <onoff_cancel+0x32>
	__asm__ volatile(
    9c90:	f04f 0220 	mov.w	r2, #32
    9c94:	f3ef 8511 	mrs	r5, BASEPRI
    9c98:	f382 8812 	msr	BASEPRI_MAX, r2
    9c9c:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9ca0:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    9ca2:	f7ff ff08 	bl	9ab6 <sys_slist_find_and_remove>
    9ca6:	b130      	cbz	r0, 9cb6 <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    9ca8:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    9cac:	f385 8811 	msr	BASEPRI, r5
    9cb0:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    9cb4:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    9cb6:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9cba:	e7f7      	b.n	9cac <onoff_cancel+0x22>
		return -EINVAL;
    9cbc:	f06f 0015 	mvn.w	r0, #21
    9cc0:	e7f8      	b.n	9cb4 <onoff_cancel+0x2a>

00009cc2 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    9cc2:	4604      	mov	r4, r0
    9cc4:	b508      	push	{r3, lr}
    9cc6:	4608      	mov	r0, r1
    9cc8:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    9cca:	461a      	mov	r2, r3
    9ccc:	47a0      	blx	r4
	return z_impl_z_current_get();
    9cce:	f7ff fbe5 	bl	949c <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    9cd2:	f7f9 fb73 	bl	33bc <z_impl_k_thread_abort>

00009cd6 <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    9cd6:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    9cda:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    9cdc:	0840      	lsrs	r0, r0, #1
    9cde:	4770      	bx	lr

00009ce0 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    9ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9ce2:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    9ce4:	f7ff fff7 	bl	9cd6 <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    9ce8:	fab0 f080 	clz	r0, r0
    9cec:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    9cf0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    9cf4:	00ca      	lsls	r2, r1, #3
    9cf6:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    9cfa:	1d17      	adds	r7, r2, #4
{
    9cfc:	460c      	mov	r4, r1
    9cfe:	3206      	adds	r2, #6
    9d00:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    9d02:	b956      	cbnz	r6, 9d1a <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    9d04:	2101      	movs	r1, #1
    9d06:	fa01 f000 	lsl.w	r0, r1, r0
    9d0a:	68d9      	ldr	r1, [r3, #12]
    9d0c:	4301      	orrs	r1, r0
    9d0e:	60d9      	str	r1, [r3, #12]
		b->next = c;
    9d10:	f8cc 4010 	str.w	r4, [ip, #16]
    9d14:	53dd      	strh	r5, [r3, r7]
    9d16:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    9d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    9d1a:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    9d1c:	3104      	adds	r1, #4
    9d1e:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    9d20:	53d8      	strh	r0, [r3, r7]
    9d22:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    9d26:	529e      	strh	r6, [r3, r2]
    9d28:	80c5      	strh	r5, [r0, #6]
    9d2a:	525d      	strh	r5, [r3, r1]
    9d2c:	e7f4      	b.n	9d18 <free_list_add+0x38>

00009d2e <free_list_remove_bidx>:
{
    9d2e:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    9d30:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    9d34:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    9d36:	4299      	cmp	r1, r3
    9d38:	f102 0104 	add.w	r1, r2, #4
    9d3c:	d10a      	bne.n	9d54 <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    9d3e:	2301      	movs	r3, #1
    9d40:	fa03 f202 	lsl.w	r2, r3, r2
    9d44:	68c3      	ldr	r3, [r0, #12]
    9d46:	ea23 0302 	bic.w	r3, r3, r2
    9d4a:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    9d4c:	2300      	movs	r3, #0
    9d4e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    9d52:	bd10      	pop	{r4, pc}
    9d54:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    9d56:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    9d5a:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    9d5e:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    9d62:	80cb      	strh	r3, [r1, #6]
    9d64:	8082      	strh	r2, [r0, #4]
}
    9d66:	e7f4      	b.n	9d52 <free_list_remove_bidx+0x24>

00009d68 <free_list_remove>:
{
    9d68:	b508      	push	{r3, lr}
    9d6a:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    9d6c:	f7ff ffb3 	bl	9cd6 <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    9d70:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    9d74:	f1c2 021f 	rsb	r2, r2, #31
    9d78:	4618      	mov	r0, r3
}
    9d7a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    9d7e:	f7ff bfd6 	b.w	9d2e <free_list_remove_bidx>

00009d82 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    9d82:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9d86:	fab1 f581 	clz	r5, r1
    9d8a:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    9d8e:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
    9d92:	4603      	mov	r3, r0
	if (b->next) {
    9d94:	693a      	ldr	r2, [r7, #16]
{
    9d96:	460e      	mov	r6, r1
	if (b->next) {
    9d98:	b1c2      	cbz	r2, 9dcc <alloc_chunk+0x4a>
    9d9a:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    9d9e:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
    9da0:	4618      	mov	r0, r3
    9da2:	4621      	mov	r1, r4
    9da4:	f7ff ff97 	bl	9cd6 <chunk_size>
    9da8:	42b0      	cmp	r0, r6
    9daa:	d306      	bcc.n	9dba <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
    9dac:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    9dae:	4618      	mov	r0, r3
    9db0:	f7ff ffbd 	bl	9d2e <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    9db4:	4620      	mov	r0, r4
    9db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    9dba:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
    9dbe:	f1b8 0801 	subs.w	r8, r8, #1
    9dc2:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
    9dc4:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
    9dc6:	d001      	beq.n	9dcc <alloc_chunk+0x4a>
    9dc8:	4282      	cmp	r2, r0
    9dca:	d1e8      	bne.n	9d9e <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    9dcc:	f1c5 0220 	rsb	r2, r5, #32
    9dd0:	f04f 34ff 	mov.w	r4, #4294967295
    9dd4:	4094      	lsls	r4, r2
    9dd6:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    9dd8:	4014      	ands	r4, r2
    9dda:	d0eb      	beq.n	9db4 <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
    9ddc:	fa94 f2a4 	rbit	r2, r4
    9de0:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    9de4:	1d11      	adds	r1, r2, #4
    9de6:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    9dea:	4621      	mov	r1, r4
    9dec:	e7df      	b.n	9dae <alloc_chunk+0x2c>

00009dee <merge_chunks>:
{
    9dee:	b538      	push	{r3, r4, r5, lr}
    9df0:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    9df2:	f7ff ff70 	bl	9cd6 <chunk_size>
{
    9df6:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    9df8:	4604      	mov	r4, r0
    9dfa:	4611      	mov	r1, r2
    9dfc:	4618      	mov	r0, r3
    9dfe:	f7ff ff6a 	bl	9cd6 <chunk_size>
		((uint16_t *)cmem)[f] = val;
    9e02:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    9e06:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9e08:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    9e0a:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    9e0c:	4618      	mov	r0, r3
    9e0e:	f7ff ff62 	bl	9cd6 <chunk_size>
	void *cmem = &buf[c];
    9e12:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    9e14:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    9e18:	bd38      	pop	{r3, r4, r5, pc}

00009e1a <split_chunks>:
{
    9e1a:	b538      	push	{r3, r4, r5, lr}
    9e1c:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    9e1e:	f7ff ff5a 	bl	9cd6 <chunk_size>
{
    9e22:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    9e24:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    9e26:	1a51      	subs	r1, r2, r1
    9e28:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    9e2c:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9e2e:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    9e30:	8060      	strh	r0, [r4, #2]
    9e32:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    9e36:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    9e38:	8044      	strh	r4, [r0, #2]
    9e3a:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    9e3e:	4618      	mov	r0, r3
    9e40:	4611      	mov	r1, r2
    9e42:	f7ff ff48 	bl	9cd6 <chunk_size>
	void *cmem = &buf[c];
    9e46:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    9e48:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    9e4c:	bd38      	pop	{r3, r4, r5, pc}

00009e4e <free_chunk>:
{
    9e4e:	b538      	push	{r3, r4, r5, lr}
    9e50:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    9e52:	f7ff ff40 	bl	9cd6 <chunk_size>
    9e56:	460c      	mov	r4, r1
    9e58:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    9e5a:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    9e5e:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    9e60:	07da      	lsls	r2, r3, #31
    9e62:	d40a      	bmi.n	9e7a <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    9e64:	4628      	mov	r0, r5
    9e66:	f7ff ff7f 	bl	9d68 <free_list_remove>
	return c + chunk_size(h, c);
    9e6a:	4621      	mov	r1, r4
    9e6c:	4628      	mov	r0, r5
    9e6e:	f7ff ff32 	bl	9cd6 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    9e72:	1822      	adds	r2, r4, r0
    9e74:	4628      	mov	r0, r5
    9e76:	f7ff ffba 	bl	9dee <merge_chunks>
		return ((uint16_t *)cmem)[f];
    9e7a:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    9e7e:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    9e80:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    9e84:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    9e86:	07db      	lsls	r3, r3, #31
    9e88:	d40c      	bmi.n	9ea4 <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    9e8a:	4628      	mov	r0, r5
    9e8c:	f7ff ff6c 	bl	9d68 <free_list_remove>
		return ((uint16_t *)cmem)[f];
    9e90:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    9e94:	4622      	mov	r2, r4
    9e96:	1a61      	subs	r1, r4, r1
    9e98:	4628      	mov	r0, r5
    9e9a:	f7ff ffa8 	bl	9dee <merge_chunks>
    9e9e:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    9ea2:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    9ea4:	4621      	mov	r1, r4
    9ea6:	4628      	mov	r0, r5
}
    9ea8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    9eac:	f7ff bf18 	b.w	9ce0 <free_list_add>

00009eb0 <sys_heap_free>:
	if (mem == NULL) {
    9eb0:	b161      	cbz	r1, 9ecc <sys_heap_free+0x1c>
    9eb2:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9eb4:	3904      	subs	r1, #4
    9eb6:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    9eb8:	f021 0307 	bic.w	r3, r1, #7
    9ebc:	4403      	add	r3, r0
	free_chunk(h, c);
    9ebe:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    9ec0:	885a      	ldrh	r2, [r3, #2]
    9ec2:	f022 0201 	bic.w	r2, r2, #1
    9ec6:	805a      	strh	r2, [r3, #2]
    9ec8:	f7ff bfc1 	b.w	9e4e <free_chunk>
}
    9ecc:	4770      	bx	lr

00009ece <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    9ece:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    9ed0:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    9ed2:	b909      	cbnz	r1, 9ed8 <sys_heap_alloc+0xa>
		return NULL;
    9ed4:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    9ed6:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    9ed8:	68ab      	ldr	r3, [r5, #8]
    9eda:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    9ede:	d9f9      	bls.n	9ed4 <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    9ee0:	310b      	adds	r1, #11
    9ee2:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    9ee4:	4621      	mov	r1, r4
    9ee6:	4628      	mov	r0, r5
    9ee8:	f7ff ff4b 	bl	9d82 <alloc_chunk>
	if (c == 0U) {
    9eec:	4606      	mov	r6, r0
    9eee:	2800      	cmp	r0, #0
    9ef0:	d0f0      	beq.n	9ed4 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    9ef2:	4601      	mov	r1, r0
    9ef4:	4628      	mov	r0, r5
    9ef6:	f7ff feee 	bl	9cd6 <chunk_size>
    9efa:	42a0      	cmp	r0, r4
    9efc:	d907      	bls.n	9f0e <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    9efe:	1932      	adds	r2, r6, r4
    9f00:	4628      	mov	r0, r5
    9f02:	f7ff ff8a 	bl	9e1a <split_chunks>
		free_list_add(h, c + chunk_sz);
    9f06:	4611      	mov	r1, r2
    9f08:	4628      	mov	r0, r5
    9f0a:	f7ff fee9 	bl	9ce0 <free_list_add>
	void *cmem = &buf[c];
    9f0e:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    9f12:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9f14:	8853      	ldrh	r3, [r2, #2]
    9f16:	f043 0301 	orr.w	r3, r3, #1
    9f1a:	8053      	strh	r3, [r2, #2]
    9f1c:	3004      	adds	r0, #4
	return mem;
    9f1e:	e7da      	b.n	9ed6 <sys_heap_alloc+0x8>

00009f20 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    9f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9f24:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    9f26:	424a      	negs	r2, r1
    9f28:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
    9f2c:	ea31 0202 	bics.w	r2, r1, r2
{
    9f30:	4603      	mov	r3, r0
	if (align != rew) {
    9f32:	d00a      	beq.n	9f4a <sys_heap_aligned_alloc+0x2a>
		return false;
    9f34:	2f04      	cmp	r7, #4
    9f36:	463a      	mov	r2, r7
    9f38:	46b9      	mov	r9, r7
    9f3a:	bf28      	it	cs
    9f3c:	2204      	movcs	r2, #4
		align -= rew;
    9f3e:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    9f40:	b974      	cbnz	r4, 9f60 <sys_heap_aligned_alloc+0x40>
		return NULL;
    9f42:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    9f44:	4628      	mov	r0, r5
    9f46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    9f4a:	2904      	cmp	r1, #4
    9f4c:	d804      	bhi.n	9f58 <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
    9f4e:	4621      	mov	r1, r4
}
    9f50:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    9f54:	f7ff bfbb 	b.w	9ece <sys_heap_alloc>
		rew = 0;
    9f58:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
    9f5c:	2204      	movs	r2, #4
    9f5e:	e7ef      	b.n	9f40 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
    9f60:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
    9f62:	68b3      	ldr	r3, [r6, #8]
    9f64:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    9f68:	d9eb      	bls.n	9f42 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    9f6a:	f104 010b 	add.w	r1, r4, #11
    9f6e:	4439      	add	r1, r7
    9f70:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    9f72:	08c9      	lsrs	r1, r1, #3
    9f74:	4630      	mov	r0, r6
    9f76:	f7ff ff04 	bl	9d82 <alloc_chunk>
	if (c0 == 0) {
    9f7a:	4680      	mov	r8, r0
    9f7c:	2800      	cmp	r0, #0
    9f7e:	d0e0      	beq.n	9f42 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    9f80:	f109 0504 	add.w	r5, r9, #4
    9f84:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    9f88:	1e7b      	subs	r3, r7, #1
    9f8a:	4435      	add	r5, r6
    9f8c:	441d      	add	r5, r3
    9f8e:	427f      	negs	r7, r7
    9f90:	403d      	ands	r5, r7
    9f92:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    9f96:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9f98:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    9f9a:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9f9c:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    9f9e:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    9fa2:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    9fa4:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    9fa8:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    9fac:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    9fb0:	d208      	bcs.n	9fc4 <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
    9fb2:	4601      	mov	r1, r0
    9fb4:	463a      	mov	r2, r7
    9fb6:	4630      	mov	r0, r6
    9fb8:	f7ff ff2f 	bl	9e1a <split_chunks>
		free_list_add(h, c0);
    9fbc:	4641      	mov	r1, r8
    9fbe:	4630      	mov	r0, r6
    9fc0:	f7ff fe8e 	bl	9ce0 <free_list_add>
	return c + chunk_size(h, c);
    9fc4:	4639      	mov	r1, r7
    9fc6:	4630      	mov	r0, r6
    9fc8:	f7ff fe85 	bl	9cd6 <chunk_size>
    9fcc:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    9fce:	4284      	cmp	r4, r0
    9fd0:	d207      	bcs.n	9fe2 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
    9fd2:	4630      	mov	r0, r6
    9fd4:	4622      	mov	r2, r4
    9fd6:	f7ff ff20 	bl	9e1a <split_chunks>
		free_list_add(h, c_end);
    9fda:	4621      	mov	r1, r4
    9fdc:	4630      	mov	r0, r6
    9fde:	f7ff fe7f 	bl	9ce0 <free_list_add>
	void *cmem = &buf[c];
    9fe2:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    9fe6:	8873      	ldrh	r3, [r6, #2]
    9fe8:	f043 0301 	orr.w	r3, r3, #1
    9fec:	8073      	strh	r3, [r6, #2]
    9fee:	e7a9      	b.n	9f44 <sys_heap_aligned_alloc+0x24>

00009ff0 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    9ff0:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    9ff2:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    9ff4:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    9ff6:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    9ffa:	f021 0107 	bic.w	r1, r1, #7
{
    9ffe:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    a000:	1acd      	subs	r5, r1, r3
    a002:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    a004:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
    a006:	fab2 f082 	clz	r0, r2
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    a00a:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
    a00e:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a010:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    a012:	2600      	movs	r6, #0
    a014:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    a016:	f1c0 0020 	rsb	r0, r0, #32
    a01a:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
    a01e:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
    a020:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    a022:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    a026:	4284      	cmp	r4, r0
    a028:	d118      	bne.n	a05c <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a02a:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    a02c:	f040 0001 	orr.w	r0, r0, #1
    a030:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
    a032:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    a036:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a038:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
    a03a:	801e      	strh	r6, [r3, #0]
    a03c:	8067      	strh	r7, [r4, #2]
    a03e:	195c      	adds	r4, r3, r5
    a040:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
    a044:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
    a048:	8066      	strh	r6, [r4, #2]
    a04a:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    a04c:	8850      	ldrh	r0, [r2, #2]
    a04e:	f040 0001 	orr.w	r0, r0, #1
    a052:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    a054:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    a056:	4618      	mov	r0, r3
    a058:	f7ff be42 	b.w	9ce0 <free_list_add>
		h->buckets[i].next = 0;
    a05c:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
    a060:	e7e1      	b.n	a026 <sys_heap_init+0x36>

0000a062 <encode_uint>:
{
    a062:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a066:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    a068:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    a06a:	2b6f      	cmp	r3, #111	; 0x6f
{
    a06c:	4680      	mov	r8, r0
    a06e:	460f      	mov	r7, r1
    a070:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    a072:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    a076:	d029      	beq.n	a0cc <encode_uint+0x6a>
    a078:	d824      	bhi.n	a0c4 <encode_uint+0x62>
		return 16;
    a07a:	2b58      	cmp	r3, #88	; 0x58
    a07c:	bf14      	ite	ne
    a07e:	260a      	movne	r6, #10
    a080:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    a082:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    a086:	4632      	mov	r2, r6
    a088:	2300      	movs	r3, #0
    a08a:	4640      	mov	r0, r8
    a08c:	4639      	mov	r1, r7
    a08e:	f7f6 f827 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    a092:	2a09      	cmp	r2, #9
    a094:	b2d4      	uxtb	r4, r2
    a096:	d81e      	bhi.n	a0d6 <encode_uint+0x74>
    a098:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    a09a:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    a09c:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    a09e:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    a0a2:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    a0a6:	d301      	bcc.n	a0ac <encode_uint+0x4a>
    a0a8:	45d1      	cmp	r9, sl
    a0aa:	d811      	bhi.n	a0d0 <encode_uint+0x6e>
	if (conv->flag_hash) {
    a0ac:	782b      	ldrb	r3, [r5, #0]
    a0ae:	069b      	lsls	r3, r3, #26
    a0b0:	d505      	bpl.n	a0be <encode_uint+0x5c>
		if (radix == 8) {
    a0b2:	2e08      	cmp	r6, #8
    a0b4:	d115      	bne.n	a0e2 <encode_uint+0x80>
			conv->altform_0 = true;
    a0b6:	78ab      	ldrb	r3, [r5, #2]
    a0b8:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    a0bc:	70ab      	strb	r3, [r5, #2]
}
    a0be:	4648      	mov	r0, r9
    a0c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    a0c4:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    a0c8:	2b70      	cmp	r3, #112	; 0x70
    a0ca:	e7d7      	b.n	a07c <encode_uint+0x1a>
	switch (specifier) {
    a0cc:	2608      	movs	r6, #8
    a0ce:	e7d8      	b.n	a082 <encode_uint+0x20>
		value /= radix;
    a0d0:	4680      	mov	r8, r0
    a0d2:	460f      	mov	r7, r1
    a0d4:	e7d7      	b.n	a086 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    a0d6:	f1bb 0f19 	cmp.w	fp, #25
    a0da:	bf94      	ite	ls
    a0dc:	3437      	addls	r4, #55	; 0x37
    a0de:	3457      	addhi	r4, #87	; 0x57
    a0e0:	e7db      	b.n	a09a <encode_uint+0x38>
		} else if (radix == 16) {
    a0e2:	2e10      	cmp	r6, #16
    a0e4:	d1eb      	bne.n	a0be <encode_uint+0x5c>
			conv->altform_0c = true;
    a0e6:	78ab      	ldrb	r3, [r5, #2]
    a0e8:	f043 0310 	orr.w	r3, r3, #16
    a0ec:	e7e6      	b.n	a0bc <encode_uint+0x5a>

0000a0ee <outs>:
{
    a0ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a0f2:	4607      	mov	r7, r0
    a0f4:	4688      	mov	r8, r1
    a0f6:	4615      	mov	r5, r2
    a0f8:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    a0fa:	4614      	mov	r4, r2
    a0fc:	42b4      	cmp	r4, r6
    a0fe:	eba4 0005 	sub.w	r0, r4, r5
    a102:	d302      	bcc.n	a10a <outs+0x1c>
    a104:	b93e      	cbnz	r6, a116 <outs+0x28>
    a106:	7823      	ldrb	r3, [r4, #0]
    a108:	b12b      	cbz	r3, a116 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    a10a:	f814 0b01 	ldrb.w	r0, [r4], #1
    a10e:	4641      	mov	r1, r8
    a110:	47b8      	blx	r7
		if (rc < 0) {
    a112:	2800      	cmp	r0, #0
    a114:	daf2      	bge.n	a0fc <outs+0xe>
}
    a116:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a11a <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    a11a:	4602      	mov	r2, r0
    a11c:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    a11e:	68c0      	ldr	r0, [r0, #12]
    a120:	6814      	ldr	r4, [r2, #0]
    a122:	42a0      	cmp	r0, r4
    a124:	d904      	bls.n	a130 <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    a126:	3801      	subs	r0, #1
    a128:	1b00      	subs	r0, r0, r4
    a12a:	6008      	str	r0, [r1, #0]

		return false;
    a12c:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
    a12e:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    a130:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
    a132:	b918      	cbnz	r0, a13c <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    a134:	3b01      	subs	r3, #1
    a136:	1b1b      	subs	r3, r3, r4
    a138:	600b      	str	r3, [r1, #0]
		return false;
    a13a:	e7f8      	b.n	a12e <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
    a13c:	1b1b      	subs	r3, r3, r4
    a13e:	600b      	str	r3, [r1, #0]
	return true;
    a140:	2001      	movs	r0, #1
    a142:	e7f4      	b.n	a12e <free_space+0x14>

0000a144 <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    a144:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    a146:	a901      	add	r1, sp, #4
{
    a148:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    a14a:	f7ff ffe6 	bl	a11a <free_space>
    a14e:	b120      	cbz	r0, a15a <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    a150:	9b01      	ldr	r3, [sp, #4]
    a152:	68e2      	ldr	r2, [r4, #12]
    a154:	3b01      	subs	r3, #1
    a156:	4413      	add	r3, r2
    a158:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    a15a:	9801      	ldr	r0, [sp, #4]
    a15c:	6a23      	ldr	r3, [r4, #32]
    a15e:	43c0      	mvns	r0, r0
}
    a160:	4418      	add	r0, r3
    a162:	b002      	add	sp, #8
    a164:	bd10      	pop	{r4, pc}

0000a166 <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
    a166:	b510      	push	{r4, lr}
    a168:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    a16a:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    a16c:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    a16e:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    a170:	07d2      	lsls	r2, r2, #31
    a172:	d502      	bpl.n	a17a <idx_inc+0x14>
		return i & (buffer->size - 1);
    a174:	3b01      	subs	r3, #1
    a176:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    a178:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    a17a:	4298      	cmp	r0, r3
    a17c:	bf28      	it	cs
    a17e:	1ac0      	subcs	r0, r0, r3
    a180:	e7fa      	b.n	a178 <idx_inc+0x12>

0000a182 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    a182:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    a184:	69c2      	ldr	r2, [r0, #28]
{
    a186:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
    a188:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    a18a:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    a18c:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    a190:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    a194:	462a      	mov	r2, r5
    a196:	6801      	ldr	r1, [r0, #0]
{
    a198:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    a19a:	f7ff ffe4 	bl	a166 <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    a19e:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    a1a0:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    a1a2:	462a      	mov	r2, r5
    a1a4:	4620      	mov	r0, r4
    a1a6:	f7ff ffde 	bl	a166 <idx_inc>
    a1aa:	6060      	str	r0, [r4, #4]
}
    a1ac:	bd38      	pop	{r3, r4, r5, pc}

0000a1ae <max_utilization_update>:
{
    a1ae:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    a1b0:	6903      	ldr	r3, [r0, #16]
    a1b2:	075b      	lsls	r3, r3, #29
{
    a1b4:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    a1b6:	d506      	bpl.n	a1c6 <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    a1b8:	6a45      	ldr	r5, [r0, #36]	; 0x24
    a1ba:	f7ff ffc3 	bl	a144 <get_usage>
    a1be:	4285      	cmp	r5, r0
    a1c0:	d902      	bls.n	a1c8 <max_utilization_update+0x1a>
    a1c2:	6a60      	ldr	r0, [r4, #36]	; 0x24
    a1c4:	6260      	str	r0, [r4, #36]	; 0x24
}
    a1c6:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    a1c8:	4620      	mov	r0, r4
    a1ca:	f7ff ffbb 	bl	a144 <get_usage>
    a1ce:	e7f9      	b.n	a1c4 <max_utilization_update+0x16>

0000a1d0 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    a1d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    a1d4:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    a1d8:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
    a1dc:	461f      	mov	r7, r3
	*user_packet = false;
    a1de:	2300      	movs	r3, #0
    a1e0:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
    a1e2:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    a1e6:	f003 0303 	and.w	r3, r3, #3
    a1ea:	2b02      	cmp	r3, #2
{
    a1ec:	4604      	mov	r4, r0
    a1ee:	468b      	mov	fp, r1
    a1f0:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    a1f2:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    a1f6:	d103      	bne.n	a200 <drop_item_locked+0x30>
		return item->skip.len;
    a1f8:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    a1fc:	08ad      	lsrs	r5, r5, #2
    a1fe:	d12e      	bne.n	a25e <drop_item_locked+0x8e>
    a200:	69a3      	ldr	r3, [r4, #24]
    a202:	4630      	mov	r0, r6
    a204:	4798      	blx	r3
    a206:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
    a208:	f1b8 0f00 	cmp.w	r8, #0
    a20c:	d036      	beq.n	a27c <drop_item_locked+0xac>
		if (item->hdr.busy) {
    a20e:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    a212:	079b      	lsls	r3, r3, #30
    a214:	d52f      	bpl.n	a276 <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
    a216:	f10b 0101 	add.w	r1, fp, #1
    a21a:	4620      	mov	r0, r4
    a21c:	f7ff ffb1 	bl	a182 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    a220:	6861      	ldr	r1, [r4, #4]
    a222:	462a      	mov	r2, r5
    a224:	4620      	mov	r0, r4
    a226:	f7ff ff9e 	bl	a166 <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    a22a:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    a22c:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    a22e:	462a      	mov	r2, r5
    a230:	4620      	mov	r0, r4
    a232:	f7ff ff98 	bl	a166 <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    a236:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    a238:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    a23a:	68e1      	ldr	r1, [r4, #12]
    a23c:	4620      	mov	r0, r4
    a23e:	f7ff ff92 	bl	a166 <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    a242:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
    a244:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
    a248:	f002 0203 	and.w	r2, r2, #3
    a24c:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    a24e:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    a252:	d10c      	bne.n	a26e <drop_item_locked+0x9e>
		return item->skip.len;
    a254:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
    a258:	089b      	lsrs	r3, r3, #2
    a25a:	d008      	beq.n	a26e <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
    a25c:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    a25e:	68e1      	ldr	r1, [r4, #12]
    a260:	462a      	mov	r2, r5
    a262:	4620      	mov	r0, r4
    a264:	f7ff ff7f 	bl	a166 <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    a268:	e9c4 0002 	strd	r0, r0, [r4, #8]
    a26c:	e007      	b.n	a27e <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
    a26e:	69a3      	ldr	r3, [r4, #24]
    a270:	4630      	mov	r0, r6
    a272:	4798      	blx	r3
    a274:	4405      	add	r5, r0
			*user_packet = true;
    a276:	2301      	movs	r3, #1
    a278:	703b      	strb	r3, [r7, #0]
    a27a:	e7f0      	b.n	a25e <drop_item_locked+0x8e>
		item = NULL;
    a27c:	4646      	mov	r6, r8
	}

	return item;
}
    a27e:	4630      	mov	r0, r6
    a280:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000a284 <mpsc_pbuf_init>:
{
    a284:	b538      	push	{r3, r4, r5, lr}
    a286:	460d      	mov	r5, r1
    a288:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    a28a:	221c      	movs	r2, #28
    a28c:	2100      	movs	r1, #0
    a28e:	f000 fa7d 	bl	a78c <memset>
	buffer->get_wlen = cfg->get_wlen;
    a292:	68eb      	ldr	r3, [r5, #12]
    a294:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    a296:	68ab      	ldr	r3, [r5, #8]
	buffer->size = cfg->size;
    a298:	686a      	ldr	r2, [r5, #4]
	buffer->notify_drop = cfg->notify_drop;
    a29a:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    a29c:	682b      	ldr	r3, [r5, #0]
    a29e:	61e3      	str	r3, [r4, #28]
	buffer->max_usage = 0;
    a2a0:	2300      	movs	r3, #0
    a2a2:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->size = cfg->size;
    a2a4:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
    a2a6:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    a2a8:	b122      	cbz	r2, a2b4 <mpsc_pbuf_init+0x30>
    a2aa:	1e51      	subs	r1, r2, #1
    a2ac:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    a2ae:	bf08      	it	eq
    a2b0:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
    a2b4:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    a2b6:	2201      	movs	r2, #1
    a2b8:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a2bc:	2100      	movs	r1, #0
}
    a2be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a2c2:	f000 bf9a 	b.w	b1fa <z_impl_k_sem_init>

0000a2c6 <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    a2c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a2ca:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    a2cc:	6a03      	ldr	r3, [r0, #32]
    a2ce:	3b01      	subs	r3, #1
    a2d0:	428b      	cmp	r3, r1
{
    a2d2:	b085      	sub	sp, #20
    a2d4:	4604      	mov	r4, r0
    a2d6:	460f      	mov	r7, r1
    a2d8:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
    a2da:	d364      	bcc.n	a3a6 <mpsc_pbuf_alloc+0xe0>
	union mpsc_pbuf_generic *dropped_item = NULL;
    a2dc:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
    a2de:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
    a2e0:	f100 0b28 	add.w	fp, r0, #40	; 0x28
	__asm__ volatile(
    a2e4:	f04f 0320 	mov.w	r3, #32
    a2e8:	f3ef 8611 	mrs	r6, BASEPRI
    a2ec:	f383 8812 	msr	BASEPRI_MAX, r3
    a2f0:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
    a2f4:	a903      	add	r1, sp, #12
    a2f6:	4620      	mov	r0, r4
    a2f8:	f7ff ff0f 	bl	a11a <free_space>
		if (free_wlen >= wlen) {
    a2fc:	9903      	ldr	r1, [sp, #12]
    a2fe:	42b9      	cmp	r1, r7
    a300:	d321      	bcc.n	a346 <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    a302:	6821      	ldr	r1, [r4, #0]
			item =
    a304:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    a306:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
    a30a:	f022 0203 	bic.w	r2, r2, #3
    a30e:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    a312:	4620      	mov	r0, r4
    a314:	463a      	mov	r2, r7
			item =
    a316:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
    a31a:	f7ff ff24 	bl	a166 <idx_inc>
		cont = false;
    a31e:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    a320:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
    a322:	f386 8811 	msr	BASEPRI, r6
    a326:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    a32a:	2b00      	cmp	r3, #0
    a32c:	d03d      	beq.n	a3aa <mpsc_pbuf_alloc+0xe4>
    a32e:	2d00      	cmp	r5, #0
    a330:	d0d8      	beq.n	a2e4 <mpsc_pbuf_alloc+0x1e>
    a332:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a336:	2b00      	cmp	r3, #0
    a338:	d0d4      	beq.n	a2e4 <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
    a33a:	4629      	mov	r1, r5
    a33c:	6963      	ldr	r3, [r4, #20]
    a33e:	4620      	mov	r0, r4
    a340:	4798      	blx	r3
			dropped_item = NULL;
    a342:	2500      	movs	r5, #0
    a344:	e7ce      	b.n	a2e4 <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
    a346:	b128      	cbz	r0, a354 <mpsc_pbuf_alloc+0x8e>
    a348:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
    a34a:	4620      	mov	r0, r4
    a34c:	f7ff ff19 	bl	a182 <add_skip_item>
			cont = true;
    a350:	9b01      	ldr	r3, [sp, #4]
    a352:	e7e6      	b.n	a322 <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    a354:	ea58 0309 	orrs.w	r3, r8, r9
    a358:	d017      	beq.n	a38a <mpsc_pbuf_alloc+0xc4>
			   !k_is_in_isr()) {
    a35a:	f000 feb4 	bl	b0c6 <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    a35e:	b9a0      	cbnz	r0, a38a <mpsc_pbuf_alloc+0xc4>
    a360:	f386 8811 	msr	BASEPRI, r6
    a364:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    a368:	4642      	mov	r2, r8
    a36a:	464b      	mov	r3, r9
    a36c:	4658      	mov	r0, fp
    a36e:	f7fe fc0d 	bl	8b8c <z_impl_k_sem_take>
	__asm__ volatile(
    a372:	f04f 0320 	mov.w	r3, #32
    a376:	f3ef 8611 	mrs	r6, BASEPRI
    a37a:	f383 8812 	msr	BASEPRI_MAX, r3
    a37e:	f3bf 8f6f 	isb	sy
			if (err == 0) {
    a382:	fab0 f380 	clz	r3, r0
    a386:	095b      	lsrs	r3, r3, #5
    a388:	e7cb      	b.n	a322 <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    a38a:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    a38c:	9903      	ldr	r1, [sp, #12]
    a38e:	f10d 030b 	add.w	r3, sp, #11
    a392:	f3c2 0240 	ubfx	r2, r2, #1, #1
    a396:	4620      	mov	r0, r4
    a398:	f7ff ff1a 	bl	a1d0 <drop_item_locked>
			cont = dropped_item != NULL;
    a39c:	1e03      	subs	r3, r0, #0
    a39e:	4605      	mov	r5, r0
    a3a0:	bf18      	it	ne
    a3a2:	2301      	movne	r3, #1
    a3a4:	e7bd      	b.n	a322 <mpsc_pbuf_alloc+0x5c>
		return NULL;
    a3a6:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    a3aa:	4650      	mov	r0, sl
    a3ac:	b005      	add	sp, #20
    a3ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000a3b2 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    a3b2:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    a3b4:	6983      	ldr	r3, [r0, #24]
{
    a3b6:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    a3b8:	4608      	mov	r0, r1
{
    a3ba:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    a3bc:	4798      	blx	r3
    a3be:	4602      	mov	r2, r0
    a3c0:	f04f 0320 	mov.w	r3, #32
    a3c4:	f3ef 8611 	mrs	r6, BASEPRI
    a3c8:	f383 8812 	msr	BASEPRI_MAX, r3
    a3cc:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    a3d0:	782b      	ldrb	r3, [r5, #0]
    a3d2:	f043 0301 	orr.w	r3, r3, #1
    a3d6:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    a3d8:	6861      	ldr	r1, [r4, #4]
    a3da:	4620      	mov	r0, r4
    a3dc:	f7ff fec3 	bl	a166 <idx_inc>
    a3e0:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    a3e2:	4620      	mov	r0, r4
    a3e4:	f7ff fee3 	bl	a1ae <max_utilization_update>
	__asm__ volatile(
    a3e8:	f386 8811 	msr	BASEPRI, r6
    a3ec:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    a3f0:	bd70      	pop	{r4, r5, r6, pc}

0000a3f2 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    a3f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a3f6:	4604      	mov	r4, r0
	__asm__ volatile(
    a3f8:	f04f 0320 	mov.w	r3, #32
    a3fc:	f3ef 8611 	mrs	r6, BASEPRI
    a400:	f383 8812 	msr	BASEPRI_MAX, r3
    a404:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    a408:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
    a40c:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    a40e:	bf88      	it	hi
    a410:	6a23      	ldrhi	r3, [r4, #32]
    a412:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    a414:	b1f3      	cbz	r3, a454 <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
    a416:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
    a418:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
    a41c:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
    a420:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
    a424:	d016      	beq.n	a454 <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
    a426:	2b02      	cmp	r3, #2
    a428:	d103      	bne.n	a432 <mpsc_pbuf_claim+0x40>
		return item->skip.len;
    a42a:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    a42e:	08ad      	lsrs	r5, r5, #2
    a430:	d115      	bne.n	a45e <mpsc_pbuf_claim+0x6c>
    a432:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
    a434:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
    a436:	d50f      	bpl.n	a458 <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
    a438:	f042 0202 	orr.w	r2, r2, #2
    a43c:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
    a440:	4640      	mov	r0, r8
    a442:	4798      	blx	r3
    a444:	4639      	mov	r1, r7
    a446:	4602      	mov	r2, r0
    a448:	4620      	mov	r0, r4
    a44a:	f7ff fe8c 	bl	a166 <idx_inc>
		cont = false;
    a44e:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
    a450:	60a0      	str	r0, [r4, #8]
    a452:	e011      	b.n	a478 <mpsc_pbuf_claim+0x86>
			item = NULL;
    a454:	4698      	mov	r8, r3
    a456:	e00f      	b.n	a478 <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
    a458:	4640      	mov	r0, r8
    a45a:	4798      	blx	r3
    a45c:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    a45e:	68a1      	ldr	r1, [r4, #8]
    a460:	462a      	mov	r2, r5
    a462:	4620      	mov	r0, r4
    a464:	f7ff fe7f 	bl	a166 <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
    a468:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    a46a:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    a46c:	462a      	mov	r2, r5
    a46e:	4620      	mov	r0, r4
    a470:	f7ff fe79 	bl	a166 <idx_inc>
				cont = true;
    a474:	2301      	movs	r3, #1
				buffer->rd_idx =
    a476:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    a478:	f386 8811 	msr	BASEPRI, r6
    a47c:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    a480:	2b00      	cmp	r3, #0
    a482:	d1b9      	bne.n	a3f8 <mpsc_pbuf_claim+0x6>

	return item;
}
    a484:	4640      	mov	r0, r8
    a486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a48a <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    a48a:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    a48c:	6983      	ldr	r3, [r0, #24]
{
    a48e:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    a490:	4608      	mov	r0, r1
{
    a492:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    a494:	4798      	blx	r3
    a496:	4602      	mov	r2, r0
	__asm__ volatile(
    a498:	f04f 0320 	mov.w	r3, #32
    a49c:	f3ef 8611 	mrs	r6, BASEPRI
    a4a0:	f383 8812 	msr	BASEPRI_MAX, r3
    a4a4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    a4a8:	782b      	ldrb	r3, [r5, #0]
    a4aa:	f36f 0300 	bfc	r3, #0, #1
    a4ae:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    a4b0:	6923      	ldr	r3, [r4, #16]
    a4b2:	079b      	lsls	r3, r3, #30
    a4b4:	d505      	bpl.n	a4c2 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    a4b6:	68e1      	ldr	r1, [r4, #12]
    a4b8:	69e3      	ldr	r3, [r4, #28]
    a4ba:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    a4be:	429d      	cmp	r5, r3
    a4c0:	d112      	bne.n	a4e8 <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
    a4c2:	782b      	ldrb	r3, [r5, #0]
    a4c4:	f36f 0341 	bfc	r3, #1, #1
    a4c8:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    a4ca:	68e1      	ldr	r1, [r4, #12]
    a4cc:	4620      	mov	r0, r4
    a4ce:	f7ff fe4a 	bl	a166 <idx_inc>
    a4d2:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    a4d4:	f386 8811 	msr	BASEPRI, r6
    a4d8:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    a4dc:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    a4e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a4e4:	f7fe bb32 	b.w	8b4c <z_impl_k_sem_give>
		witem->skip.len = wlen;
    a4e8:	682b      	ldr	r3, [r5, #0]
    a4ea:	f360 039f 	bfi	r3, r0, #2, #30
    a4ee:	602b      	str	r3, [r5, #0]
    a4f0:	e7f0      	b.n	a4d4 <mpsc_pbuf_free+0x4a>

0000a4f2 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    a4f2:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    a4f6:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    a4f8:	bf8a      	itet	hi
    a4fa:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    a4fc:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    a4fe:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    a500:	1e18      	subs	r0, r3, #0
    a502:	bf18      	it	ne
    a504:	2001      	movne	r0, #1
    a506:	4770      	bx	lr

0000a508 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    a508:	4770      	bx	lr

0000a50a <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    a50a:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    a50c:	075b      	lsls	r3, r3, #29
    a50e:	d40b      	bmi.n	a528 <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    a510:	6803      	ldr	r3, [r0, #0]
    a512:	8840      	ldrh	r0, [r0, #2]
    a514:	f3c3 2349 	ubfx	r3, r3, #9, #10
    a518:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    a51c:	4418      	add	r0, r3
    a51e:	3017      	adds	r0, #23
    a520:	f020 0007 	bic.w	r0, r0, #7
    a524:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
    a526:	4770      	bx	lr
	return 0;
    a528:	2000      	movs	r0, #0
}
    a52a:	4770      	bx	lr

0000a52c <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    a52c:	f000 bafb 	b.w	ab26 <sys_clock_cycle_get_32>

0000a530 <dummy_timestamp>:
    a530:	2000      	movs	r0, #0
    a532:	4770      	bx	lr

0000a534 <z_log_vprintk>:
{
    a534:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    a536:	2300      	movs	r3, #0
    a538:	e9cd 0102 	strd	r0, r1, [sp, #8]
    a53c:	e9cd 3300 	strd	r3, r3, [sp]
    a540:	461a      	mov	r2, r3
    a542:	4619      	mov	r1, r3
    a544:	4618      	mov	r0, r3
    a546:	f7f7 fb67 	bl	1c18 <z_impl_z_log_msg2_runtime_vcreate>
}
    a54a:	b005      	add	sp, #20
    a54c:	f85d fb04 	ldr.w	pc, [sp], #4

0000a550 <notify_drop>:
	z_log_dropped(true);
    a550:	2001      	movs	r0, #1
    a552:	f7f6 bfef 	b.w	1534 <z_log_dropped>

0000a556 <get_msg>:
{
    a556:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
    a558:	f7f7 f860 	bl	161c <z_log_msg2_claim>
}
    a55c:	bd08      	pop	{r3, pc}

0000a55e <z_log_get_tag>:
}
    a55e:	2000      	movs	r0, #0
    a560:	4770      	bx	lr

0000a562 <buffer_write>:
{
    a562:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a564:	4606      	mov	r6, r0
    a566:	460d      	mov	r5, r1
    a568:	4614      	mov	r4, r2
    a56a:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    a56c:	4621      	mov	r1, r4
    a56e:	4628      	mov	r0, r5
    a570:	463a      	mov	r2, r7
    a572:	47b0      	blx	r6
	} while (len != 0);
    a574:	1a24      	subs	r4, r4, r0
		buf += processed;
    a576:	4405      	add	r5, r0
	} while (len != 0);
    a578:	d1f8      	bne.n	a56c <buffer_write+0xa>
}
    a57a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a57c <log_output_flush>:
		     output->control_block->offset,
    a57c:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    a57e:	6881      	ldr	r1, [r0, #8]
{
    a580:	b510      	push	{r4, lr}
    a582:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    a584:	e9d2 2300 	ldrd	r2, r3, [r2]
    a588:	6800      	ldr	r0, [r0, #0]
    a58a:	f7ff ffea 	bl	a562 <buffer_write>
	output->control_block->offset = 0;
    a58e:	6863      	ldr	r3, [r4, #4]
    a590:	2200      	movs	r2, #0
    a592:	601a      	str	r2, [r3, #0]
}
    a594:	bd10      	pop	{r4, pc}

0000a596 <out_func>:
{
    a596:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    a598:	684b      	ldr	r3, [r1, #4]
    a59a:	681a      	ldr	r2, [r3, #0]
    a59c:	68cb      	ldr	r3, [r1, #12]
    a59e:	429a      	cmp	r2, r3
{
    a5a0:	4605      	mov	r5, r0
    a5a2:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    a5a4:	d102      	bne.n	a5ac <out_func+0x16>
		log_output_flush(out_ctx);
    a5a6:	4608      	mov	r0, r1
    a5a8:	f7ff ffe8 	bl	a57c <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    a5ac:	6863      	ldr	r3, [r4, #4]
    a5ae:	f3bf 8f5b 	dmb	ish
    a5b2:	e853 2f00 	ldrex	r2, [r3]
    a5b6:	1c51      	adds	r1, r2, #1
    a5b8:	e843 1000 	strex	r0, r1, [r3]
    a5bc:	2800      	cmp	r0, #0
    a5be:	d1f8      	bne.n	a5b2 <out_func+0x1c>
    a5c0:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    a5c4:	68a3      	ldr	r3, [r4, #8]
    a5c6:	549d      	strb	r5, [r3, r2]
}
    a5c8:	2000      	movs	r0, #0
    a5ca:	bd38      	pop	{r3, r4, r5, pc}

0000a5cc <cr_out_func>:
{
    a5cc:	b538      	push	{r3, r4, r5, lr}
    a5ce:	4605      	mov	r5, r0
    a5d0:	460c      	mov	r4, r1
	out_func(c, ctx);
    a5d2:	f7ff ffe0 	bl	a596 <out_func>
	if (c == '\n') {
    a5d6:	2d0a      	cmp	r5, #10
    a5d8:	d103      	bne.n	a5e2 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    a5da:	4621      	mov	r1, r4
    a5dc:	200d      	movs	r0, #13
    a5de:	f7ff ffda 	bl	a596 <out_func>
}
    a5e2:	2000      	movs	r0, #0
    a5e4:	bd38      	pop	{r3, r4, r5, pc}

0000a5e6 <z_log_msg2_finalize>:
{
    a5e6:	b570      	push	{r4, r5, r6, lr}
    a5e8:	460e      	mov	r6, r1
    a5ea:	4615      	mov	r5, r2
    a5ec:	4619      	mov	r1, r3
	if (!msg) {
    a5ee:	4604      	mov	r4, r0
    a5f0:	b918      	cbnz	r0, a5fa <z_log_msg2_finalize+0x14>
}
    a5f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    a5f6:	f7f6 bf9d 	b.w	1534 <z_log_dropped>
	if (data) {
    a5fa:	b143      	cbz	r3, a60e <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
    a5fc:	f100 0310 	add.w	r3, r0, #16
    a600:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    a604:	4418      	add	r0, r3
    a606:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    a60a:	f000 f8b4 	bl	a776 <memcpy>
	msg->hdr.source = source;
    a60e:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    a612:	4620      	mov	r0, r4
}
    a614:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    a618:	f7f7 b8c2 	b.w	17a0 <z_log_msg2_commit>

0000a61c <z_impl_z_log_msg2_static_create>:
{
    a61c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    a620:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    a624:	f3c1 2649 	ubfx	r6, r1, #9, #10
    a628:	b089      	sub	sp, #36	; 0x24
    a62a:	4681      	mov	r9, r0
    a62c:	460d      	mov	r5, r1
    a62e:	4690      	mov	r8, r2
    a630:	469a      	mov	sl, r3
    a632:	3417      	adds	r4, #23
	if (inlen > 0) {
    a634:	b386      	cbz	r6, a698 <z_impl_z_log_msg2_static_create+0x7c>
		len = cbprintf_package_copy(package, inlen,
    a636:	2302      	movs	r3, #2
    a638:	9300      	str	r3, [sp, #0]
    a63a:	f04f 0b04 	mov.w	fp, #4
    a63e:	2300      	movs	r3, #0
    a640:	af06      	add	r7, sp, #24
    a642:	4631      	mov	r1, r6
    a644:	461a      	mov	r2, r3
    a646:	f8cd b008 	str.w	fp, [sp, #8]
    a64a:	9701      	str	r7, [sp, #4]
    a64c:	4640      	mov	r0, r8
    a64e:	9605      	str	r6, [sp, #20]
    a650:	f7f6 f8f0 	bl	834 <cbprintf_package_copy>
		out_desc.package_len = len;
    a654:	f3c0 0309 	ubfx	r3, r0, #0, #10
    a658:	1918      	adds	r0, r3, r4
    a65a:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    a65e:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    a660:	461e      	mov	r6, r3
    a662:	9304      	str	r3, [sp, #16]
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    a664:	f7f6 ffd2 	bl	160c <z_log_msg2_alloc>
		if (msg) {
    a668:	4604      	mov	r4, r0
    a66a:	b150      	cbz	r0, a682 <z_impl_z_log_msg2_static_create+0x66>
			len = cbprintf_package_copy(package, inlen,
    a66c:	2302      	movs	r3, #2
    a66e:	9300      	str	r3, [sp, #0]
    a670:	f100 0210 	add.w	r2, r0, #16
    a674:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    a678:	9b04      	ldr	r3, [sp, #16]
    a67a:	9905      	ldr	r1, [sp, #20]
    a67c:	4640      	mov	r0, r8
    a67e:	f7f6 f8d9 	bl	834 <cbprintf_package_copy>
	z_log_msg2_finalize(msg, source, out_desc, data);
    a682:	f366 2552 	bfi	r5, r6, #9, #10
    a686:	4653      	mov	r3, sl
    a688:	462a      	mov	r2, r5
    a68a:	4649      	mov	r1, r9
    a68c:	4620      	mov	r0, r4
}
    a68e:	b009      	add	sp, #36	; 0x24
    a690:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg2_finalize(msg, source, out_desc, data);
    a694:	f7ff bfa7 	b.w	a5e6 <z_log_msg2_finalize>
    a698:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    a69c:	0880      	lsrs	r0, r0, #2
    a69e:	f7f6 ffb5 	bl	160c <z_log_msg2_alloc>
    a6a2:	4604      	mov	r4, r0
    a6a4:	e7ed      	b.n	a682 <z_impl_z_log_msg2_static_create+0x66>

0000a6a6 <usb_get_dev_data_by_cfg>:
	return list->head;
    a6a6:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    a6a8:	b140      	cbz	r0, a6bc <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    a6aa:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
    a6ae:	685b      	ldr	r3, [r3, #4]
    a6b0:	4299      	cmp	r1, r3
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    a6b2:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
    a6b6:	d001      	beq.n	a6bc <usb_get_dev_data_by_cfg+0x16>
	return node->next;
    a6b8:	6840      	ldr	r0, [r0, #4]
    a6ba:	e7f5      	b.n	a6a8 <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    a6bc:	4770      	bx	lr

0000a6be <usb_get_dev_data_by_iface>:
	return list->head;
    a6be:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    a6c0:	b150      	cbz	r0, a6d8 <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    a6c2:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
    a6c6:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    a6c8:	685b      	ldr	r3, [r3, #4]
    a6ca:	789b      	ldrb	r3, [r3, #2]
    a6cc:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    a6ce:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
    a6d2:	d001      	beq.n	a6d8 <usb_get_dev_data_by_iface+0x1a>
	return node->next;
    a6d4:	6840      	ldr	r0, [r0, #4]
    a6d6:	e7f3      	b.n	a6c0 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    a6d8:	4770      	bx	lr

0000a6da <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    a6da:	b530      	push	{r4, r5, lr}
	return list->head;
    a6dc:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    a6de:	b188      	cbz	r0, a704 <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    a6e0:	f850 3c04 	ldr.w	r3, [r0, #-4]
    a6e4:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    a6e6:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    a6e8:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    a6ea:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    a6ec:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    a6ee:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    a6f0:	b2dc      	uxtb	r4, r3
    a6f2:	42a5      	cmp	r5, r4
    a6f4:	d801      	bhi.n	a6fa <usb_get_dev_data_by_ep+0x20>
	return node->next;
    a6f6:	6840      	ldr	r0, [r0, #4]
    a6f8:	e7f1      	b.n	a6de <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    a6fa:	3301      	adds	r3, #1
    a6fc:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    a700:	428c      	cmp	r4, r1
    a702:	d1f5      	bne.n	a6f0 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    a704:	bd30      	pop	{r4, r5, pc}

0000a706 <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    a706:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    a708:	6800      	ldr	r0, [r0, #0]
    a70a:	f7f8 b977 	b.w	29fc <z_arm_fatal_error>

0000a70e <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    a70e:	2100      	movs	r1, #0
    a710:	2001      	movs	r0, #1
    a712:	f7f8 b973 	b.w	29fc <z_arm_fatal_error>

0000a716 <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    a716:	b508      	push	{r3, lr}
	handler();
    a718:	f7f8 fa2e 	bl	2b78 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    a71c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    a720:	f7f8 bb00 	b.w	2d24 <z_arm_exc_exit>

0000a724 <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    a724:	2300      	movs	r3, #0
    a726:	f7ff bf79 	b.w	a61c <z_impl_z_log_msg2_static_create>

0000a72a <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    a72a:	3901      	subs	r1, #1
    a72c:	4603      	mov	r3, r0
    a72e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    a732:	b90a      	cbnz	r2, a738 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    a734:	701a      	strb	r2, [r3, #0]

	return dest;
}
    a736:	4770      	bx	lr
		*d = *s;
    a738:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    a73c:	e7f7      	b.n	a72e <strcpy+0x4>

0000a73e <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    a73e:	4603      	mov	r3, r0
	size_t n = 0;
    a740:	2000      	movs	r0, #0

	while (*s != '\0') {
    a742:	5c1a      	ldrb	r2, [r3, r0]
    a744:	b902      	cbnz	r2, a748 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    a746:	4770      	bx	lr
		n++;
    a748:	3001      	adds	r0, #1
    a74a:	e7fa      	b.n	a742 <strlen+0x4>

0000a74c <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    a74c:	4603      	mov	r3, r0
	size_t n = 0;
    a74e:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    a750:	5c1a      	ldrb	r2, [r3, r0]
    a752:	b10a      	cbz	r2, a758 <strnlen+0xc>
    a754:	4288      	cmp	r0, r1
    a756:	d100      	bne.n	a75a <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    a758:	4770      	bx	lr
		n++;
    a75a:	3001      	adds	r0, #1
    a75c:	e7f8      	b.n	a750 <strnlen+0x4>

0000a75e <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    a75e:	1e43      	subs	r3, r0, #1
    a760:	3901      	subs	r1, #1
    a762:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    a766:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    a76a:	4282      	cmp	r2, r0
    a76c:	d101      	bne.n	a772 <strcmp+0x14>
    a76e:	2a00      	cmp	r2, #0
    a770:	d1f7      	bne.n	a762 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    a772:	1a10      	subs	r0, r2, r0
    a774:	4770      	bx	lr

0000a776 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    a776:	b510      	push	{r4, lr}
    a778:	1e43      	subs	r3, r0, #1
    a77a:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    a77c:	4291      	cmp	r1, r2
    a77e:	d100      	bne.n	a782 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    a780:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    a782:	f811 4b01 	ldrb.w	r4, [r1], #1
    a786:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    a78a:	e7f7      	b.n	a77c <memcpy+0x6>

0000a78c <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    a78c:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    a78e:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    a790:	4603      	mov	r3, r0
	while (n > 0) {
    a792:	4293      	cmp	r3, r2
    a794:	d100      	bne.n	a798 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    a796:	4770      	bx	lr
		*(d_byte++) = c_byte;
    a798:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    a79c:	e7f9      	b.n	a792 <memset+0x6>

0000a79e <_stdout_hook_default>:
}
    a79e:	f04f 30ff 	mov.w	r0, #4294967295
    a7a2:	4770      	bx	lr

0000a7a4 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    a7a4:	f04f 0220 	mov.w	r2, #32
    a7a8:	f3ef 8311 	mrs	r3, BASEPRI
    a7ac:	f382 8812 	msr	BASEPRI_MAX, r2
    a7b0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    a7b4:	f383 8811 	msr	BASEPRI, r3
    a7b8:	f3bf 8f6f 	isb	sy
}
    a7bc:	2000      	movs	r0, #0
    a7be:	4770      	bx	lr

0000a7c0 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    a7c0:	2806      	cmp	r0, #6
    a7c2:	d108      	bne.n	a7d6 <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    a7c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    a7c8:	2201      	movs	r2, #1
    a7ca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    a7ce:	f3bf 8f4f 	dsb	sy
        __WFE();
    a7d2:	bf20      	wfe
    while (true)
    a7d4:	e7fd      	b.n	a7d2 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    a7d6:	4770      	bx	lr

0000a7d8 <pm_state_exit_post_ops>:
    a7d8:	2300      	movs	r3, #0
    a7da:	f383 8811 	msr	BASEPRI, r3
    a7de:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    a7e2:	4770      	bx	lr

0000a7e4 <hid_interface_config>:
	struct usb_hid_config *desc =
		CONTAINER_OF(if_desc, struct usb_hid_config, if0);

	LOG_DBG("");

	desc->if0.bInterfaceNumber = bInterfaceNumber;
    a7e4:	7081      	strb	r1, [r0, #2]
#ifdef CONFIG_ENABLE_HID_INT_OUT_EP
	desc->if0.bNumEndpoints = 2;
#endif
}
    a7e6:	4770      	bx	lr

0000a7e8 <usb_hid_device_init>:
static int usb_hid_device_init(const struct device *dev)
{
	LOG_DBG("Init HID Device: dev %p (%s)", dev, dev->name);

	return 0;
}
    a7e8:	2000      	movs	r0, #0
    a7ea:	4770      	bx	lr

0000a7ec <z_log_msg2_static_create.constprop.0>:
    a7ec:	2300      	movs	r3, #0
    a7ee:	f7ff bf15 	b.w	a61c <z_impl_z_log_msg2_static_create>

0000a7f2 <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    a7f2:	6903      	ldr	r3, [r0, #16]
{
    a7f4:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
    a7f6:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    a7fa:	2300      	movs	r3, #0
    a7fc:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    a7fe:	7f83      	ldrb	r3, [r0, #30]
{
    a800:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    a802:	b113      	cbz	r3, a80a <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    a804:	7a40      	ldrb	r0, [r0, #9]
    a806:	f000 fbcf 	bl	afa8 <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    a80a:	2301      	movs	r3, #1
    a80c:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    a80e:	2300      	movs	r3, #0
    a810:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    a812:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    a814:	77a3      	strb	r3, [r4, #30]
}
    a816:	bd10      	pop	{r4, pc}

0000a818 <z_log_msg2_static_create.constprop.0>:
    a818:	2300      	movs	r3, #0
    a81a:	f7ff beff 	b.w	a61c <z_impl_z_log_msg2_static_create>

0000a81e <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    a81e:	f7fe b8a7 	b.w	8970 <z_impl_k_mutex_lock>

0000a822 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    a822:	f7fe b91d 	b.w	8a60 <z_impl_k_mutex_unlock>

0000a826 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    a826:	6903      	ldr	r3, [r0, #16]
    a828:	b2c9      	uxtb	r1, r1
    a82a:	220c      	movs	r2, #12
    a82c:	fb01 3302 	mla	r3, r1, r2, r3
    a830:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    a832:	f000 0007 	and.w	r0, r0, #7
    a836:	4770      	bx	lr

0000a838 <set_on_state>:
	__asm__ volatile(
    a838:	f04f 0320 	mov.w	r3, #32
    a83c:	f3ef 8211 	mrs	r2, BASEPRI
    a840:	f383 8812 	msr	BASEPRI_MAX, r3
    a844:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    a848:	6803      	ldr	r3, [r0, #0]
    a84a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a84e:	f043 0302 	orr.w	r3, r3, #2
    a852:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    a854:	f382 8811 	msr	BASEPRI, r2
    a858:	f3bf 8f6f 	isb	sy
}
    a85c:	4770      	bx	lr

0000a85e <stop>:
{
    a85e:	4603      	mov	r3, r0
    a860:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    a862:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    a864:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    a866:	f04f 0420 	mov.w	r4, #32
    a86a:	f3ef 8611 	mrs	r6, BASEPRI
    a86e:	f384 8812 	msr	BASEPRI_MAX, r4
    a872:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    a876:	250c      	movs	r5, #12
    a878:	fb05 0401 	mla	r4, r5, r1, r0
    a87c:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    a87e:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    a882:	d001      	beq.n	a888 <stop+0x2a>
    a884:	42a2      	cmp	r2, r4
    a886:	d111      	bne.n	a8ac <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    a888:	fb05 0001 	mla	r0, r5, r1, r0
    a88c:	2201      	movs	r2, #1
    a88e:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    a890:	2000      	movs	r0, #0
	__asm__ volatile(
    a892:	f386 8811 	msr	BASEPRI, r6
    a896:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    a89a:	b930      	cbnz	r0, a8aa <stop+0x4c>
	get_sub_config(dev, type)->stop();
    a89c:	685b      	ldr	r3, [r3, #4]
    a89e:	220c      	movs	r2, #12
    a8a0:	fb02 3101 	mla	r1, r2, r1, r3
    a8a4:	684b      	ldr	r3, [r1, #4]
    a8a6:	4798      	blx	r3
	return 0;
    a8a8:	2000      	movs	r0, #0
}
    a8aa:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    a8ac:	f04f 30ff 	mov.w	r0, #4294967295
    a8b0:	e7ef      	b.n	a892 <stop+0x34>

0000a8b2 <api_stop>:
	return stop(dev, subsys, CTX_API);
    a8b2:	2280      	movs	r2, #128	; 0x80
    a8b4:	f7ff bfd3 	b.w	a85e <stop>

0000a8b8 <async_start>:
{
    a8b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a8ba:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    a8bc:	6904      	ldr	r4, [r0, #16]
{
    a8be:	4605      	mov	r5, r0
    a8c0:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    a8c2:	f04f 0020 	mov.w	r0, #32
    a8c6:	f3ef 8c11 	mrs	ip, BASEPRI
    a8ca:	f380 8812 	msr	BASEPRI_MAX, r0
    a8ce:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    a8d2:	260c      	movs	r6, #12
    a8d4:	fb06 4601 	mla	r6, r6, r1, r4
    a8d8:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    a8da:	f000 0e07 	and.w	lr, r0, #7
    a8de:	f1be 0f01 	cmp.w	lr, #1
    a8e2:	d110      	bne.n	a906 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    a8e4:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    a8e6:	2600      	movs	r6, #0
	__asm__ volatile(
    a8e8:	f38c 8811 	msr	BASEPRI, ip
    a8ec:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    a8f0:	b93e      	cbnz	r6, a902 <async_start+0x4a>
	subdata->cb = cb;
    a8f2:	200c      	movs	r0, #12
    a8f4:	4341      	muls	r1, r0
    a8f6:	440c      	add	r4, r1
	subdata->user_data = user_data;
    a8f8:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    a8fc:	686b      	ldr	r3, [r5, #4]
    a8fe:	585b      	ldr	r3, [r3, r1]
    a900:	4798      	blx	r3
}
    a902:	4630      	mov	r0, r6
    a904:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    a906:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    a90a:	4287      	cmp	r7, r0
    a90c:	bf14      	ite	ne
    a90e:	f04f 36ff 	movne.w	r6, #4294967295
    a912:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    a916:	e7e7      	b.n	a8e8 <async_start+0x30>

0000a918 <api_start>:
{
    a918:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    a91a:	2480      	movs	r4, #128	; 0x80
    a91c:	9400      	str	r4, [sp, #0]
    a91e:	f7ff ffcb 	bl	a8b8 <async_start>
}
    a922:	b002      	add	sp, #8
    a924:	bd10      	pop	{r4, pc}

0000a926 <onoff_started_callback>:
	return &data->mgr[type];
    a926:	6900      	ldr	r0, [r0, #16]
{
    a928:	b410      	push	{r4}
	return &data->mgr[type];
    a92a:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    a92c:	241c      	movs	r4, #28
    a92e:	fb03 0004 	mla	r0, r3, r4, r0
    a932:	2100      	movs	r1, #0
}
    a934:	bc10      	pop	{r4}
	notify(mgr, 0);
    a936:	4710      	bx	r2

0000a938 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    a938:	2000      	movs	r0, #0
    a93a:	f000 ba0f 	b.w	ad5c <nrfx_clock_start>

0000a93e <blocking_start_callback>:
{
    a93e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    a940:	f7fe b904 	b.w	8b4c <z_impl_k_sem_give>

0000a944 <lfclk_stop>:
{
    a944:	b508      	push	{r3, lr}
		z_nrf_clock_calibration_lfclk_stopped();
    a946:	f7f9 ff6f 	bl	4828 <z_nrf_clock_calibration_lfclk_stopped>
}
    a94a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    a94e:	2000      	movs	r0, #0
    a950:	f000 ba3c 	b.w	adcc <nrfx_clock_stop>

0000a954 <timeout_handler>:
	start_cal_process();
    a954:	f7f9 bea4 	b.w	46a0 <start_cal_process>

0000a958 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a958:	6843      	ldr	r3, [r0, #4]
    a95a:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    a95c:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    a960:	600b      	str	r3, [r1, #0]
}
    a962:	2000      	movs	r0, #0
    a964:	4770      	bx	lr

0000a966 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a966:	6843      	ldr	r3, [r0, #4]
    a968:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    a96a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    a96e:	4042      	eors	r2, r0
    a970:	400a      	ands	r2, r1
    a972:	4042      	eors	r2, r0
    p_reg->OUT = value;
    a974:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    a978:	2000      	movs	r0, #0
    a97a:	4770      	bx	lr

0000a97c <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a97c:	6843      	ldr	r3, [r0, #4]
    a97e:	685b      	ldr	r3, [r3, #4]
}
    a980:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    a982:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    a986:	4770      	bx	lr

0000a988 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a988:	6843      	ldr	r3, [r0, #4]
    a98a:	685b      	ldr	r3, [r3, #4]
}
    a98c:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    a98e:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    a992:	4770      	bx	lr

0000a994 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    a994:	6843      	ldr	r3, [r0, #4]
    a996:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    a998:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    a99c:	404b      	eors	r3, r1
    p_reg->OUT = value;
    a99e:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    a9a2:	2000      	movs	r0, #0
    a9a4:	4770      	bx	lr

0000a9a6 <gpio_nrfx_manage_callback>:
	return port->data;
    a9a6:	6903      	ldr	r3, [r0, #16]
	return list->head;
    a9a8:	6858      	ldr	r0, [r3, #4]
{
    a9aa:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    a9ac:	b158      	cbz	r0, a9c6 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a9ae:	2400      	movs	r4, #0
    a9b0:	4281      	cmp	r1, r0
    a9b2:	d112      	bne.n	a9da <gpio_nrfx_manage_callback+0x34>
	return node->next;
    a9b4:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    a9b6:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    a9b8:	b954      	cbnz	r4, a9d0 <gpio_nrfx_manage_callback+0x2a>
    a9ba:	428d      	cmp	r5, r1
	list->head = node;
    a9bc:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    a9be:	d100      	bne.n	a9c2 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    a9c0:	6098      	str	r0, [r3, #8]
	parent->next = child;
    a9c2:	2000      	movs	r0, #0
    a9c4:	6008      	str	r0, [r1, #0]
	if (set) {
    a9c6:	b96a      	cbnz	r2, a9e4 <gpio_nrfx_manage_callback+0x3e>
	return 0;
    a9c8:	2000      	movs	r0, #0
}
    a9ca:	bd30      	pop	{r4, r5, pc}
    a9cc:	4628      	mov	r0, r5
    a9ce:	e7ef      	b.n	a9b0 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    a9d0:	428d      	cmp	r5, r1
	parent->next = child;
    a9d2:	6020      	str	r0, [r4, #0]
	list->tail = node;
    a9d4:	bf08      	it	eq
    a9d6:	609c      	streq	r4, [r3, #8]
}
    a9d8:	e7f3      	b.n	a9c2 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    a9da:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    a9dc:	4604      	mov	r4, r0
    a9de:	2d00      	cmp	r5, #0
    a9e0:	d1f4      	bne.n	a9cc <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    a9e2:	b13a      	cbz	r2, a9f4 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    a9e4:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    a9e6:	685a      	ldr	r2, [r3, #4]
    a9e8:	600a      	str	r2, [r1, #0]
	list->head = node;
    a9ea:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    a9ec:	2800      	cmp	r0, #0
    a9ee:	d1eb      	bne.n	a9c8 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    a9f0:	6099      	str	r1, [r3, #8]
}
    a9f2:	e7ea      	b.n	a9ca <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    a9f4:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    a9f8:	e7e7      	b.n	a9ca <gpio_nrfx_manage_callback+0x24>

0000a9fa <qdec_nrfx_sample_fetch>:
	if ((chan != SENSOR_CHAN_ALL) && (chan != SENSOR_CHAN_ROTATION)) {
    a9fa:	2939      	cmp	r1, #57	; 0x39
{
    a9fc:	b507      	push	{r0, r1, r2, lr}
	if ((chan != SENSOR_CHAN_ALL) && (chan != SENSOR_CHAN_ROTATION)) {
    a9fe:	d001      	beq.n	aa04 <qdec_nrfx_sample_fetch+0xa>
    aa00:	2922      	cmp	r1, #34	; 0x22
    aa02:	d10c      	bne.n	aa1e <qdec_nrfx_sample_fetch+0x24>
	nrfx_qdec_accumulators_read(&acc, &accdbl);
    aa04:	f10d 0106 	add.w	r1, sp, #6
    aa08:	a801      	add	r0, sp, #4
    aa0a:	f7fc fb73 	bl	70f4 <nrfx_qdec_accumulators_read>
	accumulate(data, acc);
    aa0e:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
    aa12:	f7fa f8db 	bl	4bcc <accumulate.constprop.0>
	return 0;
    aa16:	2000      	movs	r0, #0
}
    aa18:	b003      	add	sp, #12
    aa1a:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENOTSUP;
    aa1e:	f06f 0085 	mvn.w	r0, #133	; 0x85
    aa22:	e7f9      	b.n	aa18 <qdec_nrfx_sample_fetch+0x1e>

0000aa24 <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    aa24:	b530      	push	{r4, r5, lr}
    aa26:	4604      	mov	r4, r0
	while (*count) {
    aa28:	6808      	ldr	r0, [r1, #0]
    aa2a:	b908      	cbnz	r0, aa30 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
    aa2c:	6010      	str	r0, [r2, #0]
	return NULL;
    aa2e:	e004      	b.n	aa3a <spi_context_get_next_buf.constprop.0+0x16>
		if (((*current)->len / dfs) != 0) {
    aa30:	6823      	ldr	r3, [r4, #0]
    aa32:	685d      	ldr	r5, [r3, #4]
    aa34:	b115      	cbz	r5, aa3c <spi_context_get_next_buf.constprop.0+0x18>
			return (*current)->buf;
    aa36:	6818      	ldr	r0, [r3, #0]
			*buf_len = (*current)->len / dfs;
    aa38:	6015      	str	r5, [r2, #0]
}
    aa3a:	bd30      	pop	{r4, r5, pc}
		++(*current);
    aa3c:	3308      	adds	r3, #8
		--(*count);
    aa3e:	3801      	subs	r0, #1
		++(*current);
    aa40:	6023      	str	r3, [r4, #0]
		--(*count);
    aa42:	6008      	str	r0, [r1, #0]
    aa44:	e7f0      	b.n	aa28 <spi_context_get_next_buf.constprop.0+0x4>

0000aa46 <z_log_msg2_static_create.constprop.0>:
    aa46:	2300      	movs	r3, #0
    aa48:	f7ff bde8 	b.w	a61c <z_impl_z_log_msg2_static_create>

0000aa4c <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    aa4c:	4603      	mov	r3, r0
    aa4e:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    aa50:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    aa52:	7919      	ldrb	r1, [r3, #4]
    aa54:	2301      	movs	r3, #1
    aa56:	fa03 f101 	lsl.w	r1, r3, r1
    aa5a:	6903      	ldr	r3, [r0, #16]
    aa5c:	681b      	ldr	r3, [r3, #0]
    aa5e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    aa60:	bf18      	it	ne
    aa62:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    aa66:	b112      	cbz	r2, aa6e <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    aa68:	6883      	ldr	r3, [r0, #8]
    aa6a:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    aa6c:	4718      	bx	r3
    aa6e:	6883      	ldr	r3, [r0, #8]
    aa70:	691b      	ldr	r3, [r3, #16]
    aa72:	e7fb      	b.n	aa6c <gpio_pin_set_dt.isra.0+0x20>

0000aa74 <_spi_context_cs_control>:
{
    aa74:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    aa76:	6803      	ldr	r3, [r0, #0]
{
    aa78:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    aa7a:	b1e3      	cbz	r3, aab6 <_spi_context_cs_control+0x42>
    aa7c:	6898      	ldr	r0, [r3, #8]
    aa7e:	b1d0      	cbz	r0, aab6 <_spi_context_cs_control+0x42>
    aa80:	6805      	ldr	r5, [r0, #0]
    aa82:	b1c5      	cbz	r5, aab6 <_spi_context_cs_control+0x42>
		if (on) {
    aa84:	b149      	cbz	r1, aa9a <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    aa86:	2101      	movs	r1, #1
    aa88:	f7ff ffe0 	bl	aa4c <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    aa8c:	6823      	ldr	r3, [r4, #0]
    aa8e:	689b      	ldr	r3, [r3, #8]
    aa90:	6898      	ldr	r0, [r3, #8]
}
    aa92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    aa96:	f000 bd70 	b.w	b57a <z_impl_k_busy_wait>
			if (!force_off &&
    aa9a:	b912      	cbnz	r2, aaa2 <_spi_context_cs_control+0x2e>
    aa9c:	889b      	ldrh	r3, [r3, #4]
    aa9e:	04db      	lsls	r3, r3, #19
    aaa0:	d409      	bmi.n	aab6 <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
    aaa2:	6880      	ldr	r0, [r0, #8]
    aaa4:	f000 fd69 	bl	b57a <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    aaa8:	6823      	ldr	r3, [r4, #0]
    aaaa:	2100      	movs	r1, #0
    aaac:	6898      	ldr	r0, [r3, #8]
}
    aaae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    aab2:	f7ff bfcb 	b.w	aa4c <gpio_pin_set_dt.isra.0>
}
    aab6:	bd38      	pop	{r3, r4, r5, pc}

0000aab8 <spi_context_unlock_unconditionally>:
{
    aab8:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    aaba:	2201      	movs	r2, #1
    aabc:	2100      	movs	r1, #0
{
    aabe:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    aac0:	f7ff ffd8 	bl	aa74 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    aac4:	69a3      	ldr	r3, [r4, #24]
    aac6:	b933      	cbnz	r3, aad6 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    aac8:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    aaca:	f104 0010 	add.w	r0, r4, #16
}
    aace:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aad2:	f7fe b83b 	b.w	8b4c <z_impl_k_sem_give>
    aad6:	bd10      	pop	{r4, pc}

0000aad8 <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = dev->data;
    aad8:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    aada:	6803      	ldr	r3, [r0, #0]
    aadc:	428b      	cmp	r3, r1
{
    aade:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    aae0:	d106      	bne.n	aaf0 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    aae2:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
    aae6:	b934      	cbnz	r4, aaf6 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    aae8:	f7ff ffe6 	bl	aab8 <spi_context_unlock_unconditionally>
	return 0;
    aaec:	4620      	mov	r0, r4
}
    aaee:	bd10      	pop	{r4, pc}
		return -EINVAL;
    aaf0:	f06f 0015 	mvn.w	r0, #21
    aaf4:	e7fb      	b.n	aaee <spi_nrfx_release+0x16>
		return -EBUSY;
    aaf6:	f06f 000f 	mvn.w	r0, #15
    aafa:	e7f8      	b.n	aaee <spi_nrfx_release+0x16>

0000aafc <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    aafc:	b513      	push	{r0, r1, r4, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    aafe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    ab02:	2908      	cmp	r1, #8
    ab04:	6e13      	ldr	r3, [r2, #96]	; 0x60
    ab06:	6e52      	ldr	r2, [r2, #100]	; 0x64
	struct nrf_uid dev_id;
	uint32_t deviceid[2];

	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    ab08:	bf28      	it	cs
    ab0a:	2108      	movcs	r1, #8
    ab0c:	ba12      	rev	r2, r2
    ab0e:	9200      	str	r2, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    ab10:	ba1b      	rev	r3, r3
    ab12:	460c      	mov	r4, r1

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    ab14:	460a      	mov	r2, r1
    ab16:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    ab18:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    ab1a:	f7ff fe2c 	bl	a776 <memcpy>

	return length;
}
    ab1e:	4620      	mov	r0, r4
    ab20:	b002      	add	sp, #8
    ab22:	bd10      	pop	{r4, pc}

0000ab24 <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    ab24:	4770      	bx	lr

0000ab26 <sys_clock_cycle_get_32>:
{
    ab26:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    ab28:	f7fa fcd8 	bl	54dc <z_nrf_rtc_timer_read>
}
    ab2c:	bd08      	pop	{r3, pc}

0000ab2e <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    ab2e:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    ab30:	6843      	ldr	r3, [r0, #4]
    ab32:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    ab34:	7a03      	ldrb	r3, [r0, #8]
    ab36:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    ab3a:	3b01      	subs	r3, #1
    ab3c:	00db      	lsls	r3, r3, #3
    ab3e:	6845      	ldr	r5, [r0, #4]
    ab40:	6814      	ldr	r4, [r2, #0]
    ab42:	441d      	add	r5, r3
    ab44:	42ac      	cmp	r4, r5
    ab46:	d902      	bls.n	ab4e <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    ab48:	f06f 0001 	mvn.w	r0, #1
}
    ab4c:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    ab4e:	7965      	ldrb	r5, [r4, #5]
    ab50:	428d      	cmp	r5, r1
    ab52:	d002      	beq.n	ab5a <pinctrl_lookup_state+0x2c>
		(*state)++;
    ab54:	3408      	adds	r4, #8
    ab56:	6014      	str	r4, [r2, #0]
    ab58:	e7f1      	b.n	ab3e <pinctrl_lookup_state+0x10>
			return 0;
    ab5a:	2000      	movs	r0, #0
    ab5c:	e7f6      	b.n	ab4c <pinctrl_lookup_state+0x1e>

0000ab5e <nrf_pin_configure.constprop.0>:
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    ab5e:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    ab62:	2b00      	cmp	r3, #0
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
    ab64:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
    ab66:	f000 031f 	and.w	r3, r0, #31
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    ab6a:	bf08      	it	eq
    ab6c:	4614      	moveq	r4, r2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    ab6e:	f3c0 1281 	ubfx	r2, r0, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    ab72:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
    ab76:	bf18      	it	ne
    ab78:	2100      	movne	r1, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    ab7a:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
    ab7e:	ea42 0201 	orr.w	r2, r2, r1
    ab82:	bf18      	it	ne
    ab84:	2401      	movne	r4, #1
    reg->PIN_CNF[pin_number] = cnf;
    ab86:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    ab8a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    ab8e:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    ab92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    ab96:	bd10      	pop	{r4, pc}

0000ab98 <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    ab98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ab9c:	4614      	mov	r4, r2
    ab9e:	4680      	mov	r8, r0
    aba0:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    aba4:	2601      	movs	r6, #1
    p_reg->OUTCLR = clr_mask;
    aba6:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    abaa:	45a8      	cmp	r8, r5
    abac:	d101      	bne.n	abb2 <pinctrl_configure_pins+0x1a>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    abae:	2000      	movs	r0, #0
    abb0:	e00d      	b.n	abce <pinctrl_configure_pins+0x36>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    abb2:	f8d8 3000 	ldr.w	r3, [r8]
		switch (NRF_GET_FUN(pins[i])) {
    abb6:	0c1a      	lsrs	r2, r3, #16
    abb8:	2a1a      	cmp	r2, #26
    abba:	d03d      	beq.n	ac38 <pinctrl_configure_pins+0xa0>
    abbc:	d809      	bhi.n	abd2 <pinctrl_configure_pins+0x3a>
    abbe:	2a05      	cmp	r2, #5
    abc0:	d025      	beq.n	ac0e <pinctrl_configure_pins+0x76>
    abc2:	2a06      	cmp	r2, #6
    abc4:	d032      	beq.n	ac2c <pinctrl_configure_pins+0x94>
    abc6:	2a04      	cmp	r2, #4
    abc8:	d00c      	beq.n	abe4 <pinctrl_configure_pins+0x4c>
    abca:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    abce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (NRF_GET_FUN(pins[i])) {
    abd2:	2a1b      	cmp	r2, #27
    abd4:	d035      	beq.n	ac42 <pinctrl_configure_pins+0xaa>
    abd6:	2a1c      	cmp	r2, #28
    abd8:	d1f7      	bne.n	abca <pinctrl_configure_pins+0x32>
			NRF_PSEL_QDEC(reg, LED) = NRF_GET_PIN(pins[i]);
    abda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    abde:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    abe2:	e027      	b.n	ac34 <pinctrl_configure_pins+0x9c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    abe4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    abe8:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    abec:	f8d8 3000 	ldr.w	r3, [r8]
    abf0:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    abf4:	fa06 f303 	lsl.w	r3, r6, r3
    p_reg->OUTCLR = clr_mask;
    abf8:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    abfc:	2200      	movs	r2, #0
    abfe:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    ac00:	f8d8 0000 	ldr.w	r0, [r8]
    ac04:	f7ff ffab 	bl	ab5e <nrf_pin_configure.constprop.0>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    ac08:	f108 0804 	add.w	r8, r8, #4
    ac0c:	e7cd      	b.n	abaa <pinctrl_configure_pins+0x12>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    ac0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ac12:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    ac16:	f8d8 3000 	ldr.w	r3, [r8]
    ac1a:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    ac1e:	fa06 f303 	lsl.w	r3, r6, r3
    p_reg->OUTCLR = clr_mask;
    ac22:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    ac26:	2201      	movs	r2, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    ac28:	4611      	mov	r1, r2
    ac2a:	e7e9      	b.n	ac00 <pinctrl_configure_pins+0x68>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    ac2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ac30:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    ac34:	2200      	movs	r2, #0
    ac36:	e7f7      	b.n	ac28 <pinctrl_configure_pins+0x90>
			NRF_PSEL_QDEC(reg, A) = NRF_GET_PIN(pins[i]);
    ac38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ac3c:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    ac40:	e7f8      	b.n	ac34 <pinctrl_configure_pins+0x9c>
			NRF_PSEL_QDEC(reg, B) = NRF_GET_PIN(pins[i]);
    ac42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    ac46:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    ac4a:	e7f3      	b.n	ac34 <pinctrl_configure_pins+0x9c>

0000ac4c <ESB_SYS_TIMER_IRQHandler>:

	return 1;
}

ISR_DIRECT_DECLARE(ESB_SYS_TIMER_IRQHandler)
    ac4c:	4668      	mov	r0, sp
    ac4e:	f020 0107 	bic.w	r1, r0, #7
    ac52:	468d      	mov	sp, r1
    ac54:	b501      	push	{r0, lr}
{
	ISR_DIRECT_PM();
    ac56:	f7f7 ff81 	bl	2b5c <_arch_isr_direct_pm>
    ac5a:	f7f8 f863 	bl	2d24 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_SYS_TIMER_IRQHandler)
    ac5e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    ac62:	4685      	mov	sp, r0
    ac64:	4770      	bx	lr

0000ac66 <k_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    ac66:	f000 bc88 	b.w	b57a <z_impl_k_busy_wait>

0000ac6a <z_log_msg2_static_create.constprop.0>:
    ac6a:	2300      	movs	r3, #0
    ac6c:	f7ff bcd6 	b.w	a61c <z_impl_z_log_msg2_static_create>

0000ac70 <reg_write>:
{
    ac70:	b570      	push	{r4, r5, r6, lr}
    ac72:	460d      	mov	r5, r1
	err = spi_cs_ctrl(dev_data, true);
    ac74:	2101      	movs	r1, #1
{
    ac76:	4604      	mov	r4, r0
    ac78:	4616      	mov	r6, r2
	err = spi_cs_ctrl(dev_data, true);
    ac7a:	f7fa feef 	bl	5a5c <spi_cs_ctrl>
	if (err) {
    ac7e:	b930      	cbnz	r0, ac8e <reg_write+0x1e>
    ac80:	4632      	mov	r2, r6
    ac82:	4629      	mov	r1, r5
    ac84:	4620      	mov	r0, r4
}
    ac86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    ac8a:	f7fa bf0f 	b.w	5aac <reg_write.part.0>
    ac8e:	bd70      	pop	{r4, r5, r6, pc}

0000ac90 <pmw3360_async_init_power_up>:
	return reg_write(dev_data, PMW3360_REG_POWER_UP_RESET, 0x5A);
    ac90:	225a      	movs	r2, #90	; 0x5a
    ac92:	213a      	movs	r1, #58	; 0x3a
    ac94:	f7ff bfec 	b.w	ac70 <reg_write>

0000ac98 <gpio_pin_interrupt_configure.constprop.0>:
#endif

extern int z_impl_gpio_pin_interrupt_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_interrupt_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
    ac98:	b410      	push	{r4}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    ac9a:	6883      	ldr	r3, [r0, #8]
    ac9c:	699c      	ldr	r4, [r3, #24]
    ac9e:	f001 72b0 	and.w	r2, r1, #23068672	; 0x1600000
    aca2:	f001 63c0 	and.w	r3, r1, #100663296	; 0x6000000
    aca6:	46a4      	mov	ip, r4
    aca8:	2114      	movs	r1, #20
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
}
    acaa:	bc10      	pop	{r4}
    acac:	4760      	bx	ip

0000acae <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    acae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x10)
    acb2:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    acb6:	f1a0 0310 	sub.w	r3, r0, #16
    acba:	4258      	negs	r0, r3
    acbc:	4158      	adcs	r0, r3
    acbe:	4770      	bx	lr

0000acc0 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    acc0:	4700      	bx	r0

0000acc2 <nrfx_busy_wait>:
    acc2:	f000 bc5a 	b.w	b57a <z_impl_k_busy_wait>

0000acc6 <clock_stop>:
{
    acc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    acc8:	4604      	mov	r4, r0
    acca:	b118      	cbz	r0, acd4 <clock_stop+0xe>
    accc:	2801      	cmp	r0, #1
    acce:	d024      	beq.n	ad1a <clock_stop+0x54>
}
    acd0:	b003      	add	sp, #12
    acd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    acd4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    acd8:	2202      	movs	r2, #2
    acda:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    acde:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    ace2:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ace6:	2201      	movs	r2, #1
    ace8:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    acea:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    acec:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    acee:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    acf2:	bf14      	ite	ne
    acf4:	2500      	movne	r5, #0
    acf6:	f10d 0507 	addeq.w	r5, sp, #7
    acfa:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    acfe:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    ad02:	b1ac      	cbz	r4, ad30 <clock_stop+0x6a>
    ad04:	2c01      	cmp	r4, #1
    ad06:	d1e3      	bne.n	acd0 <clock_stop+0xa>
            if (p_clk_src != NULL)
    ad08:	b125      	cbz	r5, ad14 <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    ad0a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    ad0e:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    ad12:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    ad14:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    ad18:	e012      	b.n	ad40 <clock_stop+0x7a>
    p_reg->INTENCLR = mask;
    ad1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ad1e:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    ad20:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ad24:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    ad28:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    ad2c:	6058      	str	r0, [r3, #4]
}
    ad2e:	e7dc      	b.n	acea <clock_stop+0x24>
            if (p_clk_src != NULL)
    ad30:	b125      	cbz	r5, ad3c <clock_stop+0x76>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    ad32:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    ad36:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    ad3a:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    ad3c:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    ad40:	03db      	lsls	r3, r3, #15
    ad42:	d5c5      	bpl.n	acd0 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    ad44:	b92d      	cbnz	r5, ad52 <clock_stop+0x8c>
    ad46:	2001      	movs	r0, #1
    ad48:	f7ff ffbb 	bl	acc2 <nrfx_busy_wait>
    ad4c:	3f01      	subs	r7, #1
    ad4e:	d1d8      	bne.n	ad02 <clock_stop+0x3c>
    ad50:	e7be      	b.n	acd0 <clock_stop+0xa>
    ad52:	f89d 3007 	ldrb.w	r3, [sp, #7]
    ad56:	2b01      	cmp	r3, #1
    ad58:	d0f5      	beq.n	ad46 <clock_stop+0x80>
    ad5a:	e7b9      	b.n	acd0 <clock_stop+0xa>

0000ad5c <nrfx_clock_start>:
{
    ad5c:	b508      	push	{r3, lr}
    switch (domain)
    ad5e:	b110      	cbz	r0, ad66 <nrfx_clock_start+0xa>
    ad60:	2801      	cmp	r0, #1
    ad62:	d028      	beq.n	adb6 <nrfx_clock_start+0x5a>
}
    ad64:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    ad66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ad6a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    ad6e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    ad72:	03c9      	lsls	r1, r1, #15
    ad74:	d40b      	bmi.n	ad8e <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    ad76:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    ad7a:	07d0      	lsls	r0, r2, #31
    ad7c:	d50c      	bpl.n	ad98 <nrfx_clock_start+0x3c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    ad7e:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
    if (!is_correct_clk)
    ad82:	0792      	lsls	r2, r2, #30
    ad84:	d105      	bne.n	ad92 <nrfx_clock_start+0x36>
    p_reg->INTENSET = mask;
    ad86:	2202      	movs	r2, #2
    ad88:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    ad8c:	e7ea      	b.n	ad64 <nrfx_clock_start+0x8>
    if (!is_correct_clk)
    ad8e:	0791      	lsls	r1, r2, #30
    ad90:	d002      	beq.n	ad98 <nrfx_clock_start+0x3c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    ad92:	2000      	movs	r0, #0
    ad94:	f7ff ff97 	bl	acc6 <clock_stop>
    p_reg->LFCLKSRC = (uint32_t)(source);
    ad98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ad9c:	2200      	movs	r2, #0
    ad9e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    ada2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    ada6:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    adaa:	2202      	movs	r2, #2
    adac:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    adb0:	2201      	movs	r2, #1
    adb2:	609a      	str	r2, [r3, #8]
}
    adb4:	e7d6      	b.n	ad64 <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    adb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    adba:	2200      	movs	r2, #0
    adbc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    adc0:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    adc4:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    adc8:	6018      	str	r0, [r3, #0]
}
    adca:	e7cb      	b.n	ad64 <nrfx_clock_start+0x8>

0000adcc <nrfx_clock_stop>:
    clock_stop(domain);
    adcc:	f7ff bf7b 	b.w	acc6 <clock_stop>

0000add0 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    add0:	f000 001f 	and.w	r0, r0, #31
    add4:	0080      	lsls	r0, r0, #2
    add6:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    adda:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    adde:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    ade2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    ade6:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    adea:	4770      	bx	lr

0000adec <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    adec:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    adf0:	681a      	ldr	r2, [r3, #0]
    adf2:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    adf4:	bf1f      	itttt	ne
    adf6:	2200      	movne	r2, #0
    adf8:	601a      	strne	r2, [r3, #0]
    adfa:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    adfc:	2001      	movne	r0, #1
    adfe:	bf08      	it	eq
    ae00:	2000      	moveq	r0, #0
}
    ae02:	4770      	bx	lr

0000ae04 <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    ae04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ae08:	f44f 7260 	mov.w	r2, #896	; 0x380
    ae0c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    ae10:	4770      	bx	lr

0000ae12 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    ae12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ae16:	f44f 7260 	mov.w	r2, #896	; 0x380
    ae1a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    ae1e:	4770      	bx	lr

0000ae20 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    ae20:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    ae22:	f7fc f843 	bl	6eac <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    ae26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    ae2a:	f7fb bcad 	b.w	6788 <nrfx_clock_irq_handler>

0000ae2e <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    ae2e:	1c43      	adds	r3, r0, #1
    ae30:	d008      	beq.n	ae44 <spim_pin_uninit+0x16>
    *p_pin = pin_number & 0x1F;
    ae32:	f000 001f 	and.w	r0, r0, #31
    reg->PIN_CNF[pin_number] = cnf;
    ae36:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    ae3a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    ae3e:	2202      	movs	r2, #2
    ae40:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    ae44:	4770      	bx	lr

0000ae46 <nrf_gpio_pin_write>:
    *p_pin = pin_number & 0x1F;
    ae46:	f000 031f 	and.w	r3, r0, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    ae4a:	2001      	movs	r0, #1
    ae4c:	4098      	lsls	r0, r3
    ae4e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    if (value == 0)
    ae52:	b911      	cbnz	r1, ae5a <nrf_gpio_pin_write+0x14>
    p_reg->OUTCLR = clr_mask;
    ae54:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
    ae58:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
    ae5a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
    ae5e:	4770      	bx	lr

0000ae60 <set_ss_pin_state>:
{
    ae60:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    ae62:	7fc0      	ldrb	r0, [r0, #31]
    ae64:	28ff      	cmp	r0, #255	; 0xff
    ae66:	d006      	beq.n	ae76 <set_ss_pin_state+0x16>
                           p_cb->ss_active_high ? active : !active);
    ae68:	7f9b      	ldrb	r3, [r3, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
    ae6a:	079b      	lsls	r3, r3, #30
    ae6c:	bf58      	it	pl
    ae6e:	f081 0101 	eorpl.w	r1, r1, #1
    ae72:	f7ff bfe8 	b.w	ae46 <nrf_gpio_pin_write>
}
    ae76:	4770      	bx	lr

0000ae78 <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    ae78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x10)
    ae7c:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    ae80:	f1a0 0310 	sub.w	r3, r0, #16
    ae84:	4258      	negs	r0, r3
    ae86:	4158      	adcs	r0, r3
    ae88:	4770      	bx	lr

0000ae8a <nrfx_usbd_consumer>:
{
    ae8a:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    ae8c:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    ae8e:	680d      	ldr	r5, [r1, #0]
    ae90:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
    ae92:	bf97      	itett	ls
    ae94:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
    ae98:	2100      	movhi	r1, #0
        size -= data_size;
    ae9a:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    ae9c:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
    ae9e:	bf8e      	itee	hi
    aea0:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
    aea4:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    aea6:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
    aea8:	429a      	cmp	r2, r3
    aeaa:	d103      	bne.n	aeb4 <nrfx_usbd_consumer+0x2a>
    aeac:	1e20      	subs	r0, r4, #0
    aeae:	bf18      	it	ne
    aeb0:	2001      	movne	r0, #1
}
    aeb2:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
    aeb4:	2000      	movs	r0, #0
    aeb6:	e7fc      	b.n	aeb2 <nrfx_usbd_consumer+0x28>

0000aeb8 <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
    aeb8:	684b      	ldr	r3, [r1, #4]
{
    aeba:	b510      	push	{r4, lr}
    aebc:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
    aebe:	680c      	ldr	r4, [r1, #0]
    aec0:	bf28      	it	cs
    aec2:	461a      	movcs	r2, r3
    p_next->size = tx_size;
    aec4:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
    aec8:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
    aeca:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    aecc:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    aece:	441a      	add	r2, r3
}
    aed0:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    aed2:	600a      	str	r2, [r1, #0]
}
    aed4:	bf18      	it	ne
    aed6:	2001      	movne	r0, #1
    aed8:	bd10      	pop	{r4, pc}

0000aeda <nrfx_usbd_feeder_ram_zlp>:
{
    aeda:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
    aedc:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    aede:	680b      	ldr	r3, [r1, #0]
    aee0:	42a2      	cmp	r2, r4
    aee2:	bf28      	it	cs
    aee4:	4622      	movcs	r2, r4
    aee6:	2a00      	cmp	r2, #0
    aee8:	bf14      	ite	ne
    aeea:	461d      	movne	r5, r3
    aeec:	2500      	moveq	r5, #0
    p_next->size = tx_size;
    aeee:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
    aef2:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
    aef6:	441a      	add	r2, r3
    p_transfer->size -= tx_size;
    aef8:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    aefa:	600a      	str	r2, [r1, #0]
}
    aefc:	bf14      	ite	ne
    aefe:	2001      	movne	r0, #1
    af00:	2000      	moveq	r0, #0
    af02:	bd30      	pop	{r4, r5, pc}

0000af04 <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    af04:	f010 0f80 	tst.w	r0, #128	; 0x80
    af08:	bf14      	ite	ne
    af0a:	2300      	movne	r3, #0
    af0c:	2310      	moveq	r3, #16
    af0e:	f000 000f 	and.w	r0, r0, #15
}
    af12:	4418      	add	r0, r3
    af14:	4770      	bx	lr

0000af16 <ev_started_handler>:
}
    af16:	4770      	bx	lr

0000af18 <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    af18:	2087      	movs	r0, #135	; 0x87
    af1a:	f7fc bbbb 	b.w	7694 <nrf_usbd_epin_dma_handler>

0000af1e <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    af1e:	2086      	movs	r0, #134	; 0x86
    af20:	f7fc bbb8 	b.w	7694 <nrf_usbd_epin_dma_handler>

0000af24 <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    af24:	2085      	movs	r0, #133	; 0x85
    af26:	f7fc bbb5 	b.w	7694 <nrf_usbd_epin_dma_handler>

0000af2a <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    af2a:	2084      	movs	r0, #132	; 0x84
    af2c:	f7fc bbb2 	b.w	7694 <nrf_usbd_epin_dma_handler>

0000af30 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    af30:	2083      	movs	r0, #131	; 0x83
    af32:	f7fc bbaf 	b.w	7694 <nrf_usbd_epin_dma_handler>

0000af36 <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    af36:	2082      	movs	r0, #130	; 0x82
    af38:	f7fc bbac 	b.w	7694 <nrf_usbd_epin_dma_handler>

0000af3c <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    af3c:	2081      	movs	r0, #129	; 0x81
    af3e:	f7fc bba9 	b.w	7694 <nrf_usbd_epin_dma_handler>

0000af42 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    af42:	f7fc bbc3 	b.w	76cc <nrf_usbd_ep0in_dma_handler>

0000af46 <nrfx_usbd_ep_max_packet_size_set>:
{
    af46:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    af48:	f7fc fa66 	bl	7418 <ep_state_access>
    p_state->max_packet_size = size;
    af4c:	8181      	strh	r1, [r0, #12]
}
    af4e:	bd08      	pop	{r3, pc}

0000af50 <nrfx_usbd_ep_status_get>:
{
    af50:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    af52:	f7fc fa61 	bl	7418 <ep_state_access>
	__asm__ volatile(
    af56:	f04f 0220 	mov.w	r2, #32
    af5a:	f3ef 8311 	mrs	r3, BASEPRI
    af5e:	f382 8812 	msr	BASEPRI_MAX, r2
    af62:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    af66:	6882      	ldr	r2, [r0, #8]
    af68:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    af6a:	6802      	ldr	r2, [r0, #0]
    af6c:	b92a      	cbnz	r2, af7a <nrfx_usbd_ep_status_get+0x2a>
    af6e:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    af70:	f383 8811 	msr	BASEPRI, r3
    af74:	f3bf 8f6f 	isb	sy
}
    af78:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    af7a:	2004      	movs	r0, #4
    af7c:	e7f8      	b.n	af70 <nrfx_usbd_ep_status_get+0x20>

0000af7e <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    af7e:	2007      	movs	r0, #7
    af80:	f7fc be84 	b.w	7c8c <nrf_usbd_epout_dma_handler>

0000af84 <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    af84:	2006      	movs	r0, #6
    af86:	f7fc be81 	b.w	7c8c <nrf_usbd_epout_dma_handler>

0000af8a <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    af8a:	2005      	movs	r0, #5
    af8c:	f7fc be7e 	b.w	7c8c <nrf_usbd_epout_dma_handler>

0000af90 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    af90:	2004      	movs	r0, #4
    af92:	f7fc be7b 	b.w	7c8c <nrf_usbd_epout_dma_handler>

0000af96 <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    af96:	2003      	movs	r0, #3
    af98:	f7fc be78 	b.w	7c8c <nrf_usbd_epout_dma_handler>

0000af9c <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    af9c:	2002      	movs	r0, #2
    af9e:	f7fc be75 	b.w	7c8c <nrf_usbd_epout_dma_handler>

0000afa2 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    afa2:	2001      	movs	r0, #1
    afa4:	f7fc be72 	b.w	7c8c <nrf_usbd_epout_dma_handler>

0000afa8 <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    afa8:	f7fc bf66 	b.w	7e78 <usbd_ep_abort>

0000afac <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    afac:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    afae:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    afb0:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    afb2:	bf9c      	itt	ls
    afb4:	6880      	ldrls	r0, [r0, #8]
    afb6:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
    afb8:	3b01      	subs	r3, #1
    afba:	1a98      	subs	r0, r3, r2
}
    afbc:	4770      	bx	lr

0000afbe <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    afbe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    afc2:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    afc6:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    afc8:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    afcc:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    afce:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    afd0:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    afd2:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    afd4:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    afd6:	d904      	bls.n	afe2 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    afd8:	f7ff fbcd 	bl	a776 <memcpy>
    pRing->WrOff = NumBytesAtOnce;
    afdc:	60ec      	str	r4, [r5, #12]
}
    afde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    afe2:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
    afe4:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    afe8:	f7ff fbc5 	bl	a776 <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    afec:	6868      	ldr	r0, [r5, #4]
    afee:	4622      	mov	r2, r4
    aff0:	eb07 0108 	add.w	r1, r7, r8
    aff4:	e7f0      	b.n	afd8 <_WriteNoCheck+0x1a>

0000aff6 <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    aff6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    affa:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    affc:	4606      	mov	r6, r0
    affe:	4689      	mov	r9, r1
    b000:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    b002:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    b006:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    b008:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    b00a:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    b00c:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    b00e:	bf28      	it	cs
    b010:	18e4      	addcs	r4, r4, r3
    b012:	3c01      	subs	r4, #1
    b014:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    b016:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    b018:	42bc      	cmp	r4, r7
    b01a:	bf28      	it	cs
    b01c:	463c      	movcs	r4, r7
    b01e:	4294      	cmp	r4, r2
    b020:	bf28      	it	cs
    b022:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    b024:	4649      	mov	r1, r9
    b026:	4428      	add	r0, r5
    b028:	4622      	mov	r2, r4
    b02a:	f7ff fba4 	bl	a776 <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    b02e:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    b030:	4425      	add	r5, r4
      WrOff = 0u;
    b032:	42ab      	cmp	r3, r5
    b034:	bf08      	it	eq
    b036:	2500      	moveq	r5, #0
  } while (NumBytes);
    b038:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    b03a:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    b03c:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    b03e:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    b040:	d1e1      	bne.n	b006 <_WriteBlocking+0x10>
}
    b042:	4640      	mov	r0, r8
    b044:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000b048 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    b048:	f7fd b926 	b.w	8298 <_DoInit>

0000b04c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    b04c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    b04e:	f7ff fffb 	bl	b048 <SEGGER_RTT_Init>

	return 0;
}
    b052:	2000      	movs	r0, #0
    b054:	bd08      	pop	{r3, pc}

0000b056 <z_device_state_init>:
}
    b056:	4770      	bx	lr

0000b058 <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    b058:	b138      	cbz	r0, b06a <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    b05a:	68c3      	ldr	r3, [r0, #12]
    b05c:	8818      	ldrh	r0, [r3, #0]
    b05e:	f3c0 0008 	ubfx	r0, r0, #0, #9
    b062:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    b066:	4258      	negs	r0, r3
    b068:	4158      	adcs	r0, r3
}
    b06a:	4770      	bx	lr

0000b06c <z_early_memset>:
	(void) memset(dst, c, n);
    b06c:	f7ff bb8e 	b.w	a78c <memset>

0000b070 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    b070:	f7ff bb81 	b.w	a776 <memcpy>

0000b074 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    b074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b076:	4604      	mov	r4, r0
    b078:	460d      	mov	r5, r1
	__asm__ volatile(
    b07a:	f04f 0320 	mov.w	r3, #32
    b07e:	f3ef 8611 	mrs	r6, BASEPRI
    b082:	f383 8812 	msr	BASEPRI_MAX, r3
    b086:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    b08a:	6947      	ldr	r7, [r0, #20]
    b08c:	b977      	cbnz	r7, b0ac <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    b08e:	f000 f9eb 	bl	b468 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    b092:	b158      	cbz	r0, b0ac <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    b094:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    b096:	6142      	str	r2, [r0, #20]
    b098:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    b09a:	f000 f974 	bl	b386 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    b09e:	4631      	mov	r1, r6
    b0a0:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    b0a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    b0a8:	f7fd bf4c 	b.w	8f44 <z_reschedule>
	**(char ***) mem = slab->free_list;
    b0ac:	682b      	ldr	r3, [r5, #0]
    b0ae:	6962      	ldr	r2, [r4, #20]
    b0b0:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    b0b2:	682b      	ldr	r3, [r5, #0]
    b0b4:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    b0b6:	69a3      	ldr	r3, [r4, #24]
    b0b8:	3b01      	subs	r3, #1
    b0ba:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    b0bc:	f386 8811 	msr	BASEPRI, r6
    b0c0:	f3bf 8f6f 	isb	sy
}
    b0c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b0c6 <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b0c6:	f3ef 8005 	mrs	r0, IPSR
}
    b0ca:	3800      	subs	r0, #0
    b0cc:	bf18      	it	ne
    b0ce:	2001      	movne	r0, #1
    b0d0:	4770      	bx	lr

0000b0d2 <z_impl_k_thread_name_set>:
}
    b0d2:	f06f 0057 	mvn.w	r0, #87	; 0x57
    b0d6:	4770      	bx	lr

0000b0d8 <k_thread_name_get>:
}
    b0d8:	2000      	movs	r0, #0
    b0da:	4770      	bx	lr

0000b0dc <z_impl_k_thread_start>:
	z_sched_start(thread);
    b0dc:	f7fe b82a 	b.w	9134 <z_sched_start>

0000b0e0 <z_pm_save_idle_exit>:
{
    b0e0:	b508      	push	{r3, lr}
	pm_system_resume();
    b0e2:	f7f7 fb55 	bl	2790 <pm_system_resume>
}
    b0e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    b0ea:	f7ff bd1b 	b.w	ab24 <sys_clock_idle_exit>

0000b0ee <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    b0ee:	f990 300e 	ldrsb.w	r3, [r0, #14]
    b0f2:	428b      	cmp	r3, r1
    b0f4:	d001      	beq.n	b0fa <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    b0f6:	f7fe b88d 	b.w	9214 <z_set_prio>
}
    b0fa:	2000      	movs	r0, #0
    b0fc:	4770      	bx	lr

0000b0fe <z_impl_k_mutex_init>:
{
    b0fe:	4603      	mov	r3, r0
	mutex->owner = NULL;
    b100:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    b102:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
    b106:	e9c3 3300 	strd	r3, r3, [r3]
}
    b10a:	4770      	bx	lr

0000b10c <queue_insert>:
{
    b10c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b110:	4699      	mov	r9, r3
    b112:	4604      	mov	r4, r0
    b114:	f89d 3020 	ldrb.w	r3, [sp, #32]
    b118:	460d      	mov	r5, r1
    b11a:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    b11c:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
    b120:	f04f 0220 	mov.w	r2, #32
    b124:	f3ef 8611 	mrs	r6, BASEPRI
    b128:	f382 8812 	msr	BASEPRI_MAX, r2
    b12c:	f3bf 8f6f 	isb	sy
	if (is_append) {
    b130:	b103      	cbz	r3, b134 <queue_insert+0x28>
	return list->tail;
    b132:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    b134:	4638      	mov	r0, r7
    b136:	f000 f997 	bl	b468 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    b13a:	b158      	cbz	r0, b154 <queue_insert+0x48>
    b13c:	2400      	movs	r4, #0
    b13e:	6784      	str	r4, [r0, #120]	; 0x78
    b140:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    b144:	f000 f91f 	bl	b386 <z_ready_thread>
	z_reschedule(&queue->lock, key);
    b148:	4638      	mov	r0, r7
    b14a:	4631      	mov	r1, r6
    b14c:	f7fd fefa 	bl	8f44 <z_reschedule>
	return 0;
    b150:	2000      	movs	r0, #0
    b152:	e00c      	b.n	b16e <queue_insert+0x62>
	if (alloc) {
    b154:	f1b9 0f00 	cmp.w	r9, #0
    b158:	d01c      	beq.n	b194 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    b15a:	2108      	movs	r1, #8
    b15c:	f7fe fbf2 	bl	9944 <z_thread_aligned_alloc>
		if (anode == NULL) {
    b160:	b938      	cbnz	r0, b172 <queue_insert+0x66>
	__asm__ volatile(
    b162:	f386 8811 	msr	BASEPRI, r6
    b166:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    b16a:	f06f 000b 	mvn.w	r0, #11
}
    b16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    b172:	2301      	movs	r3, #1
		anode->data = data;
    b174:	f8c0 8004 	str.w	r8, [r0, #4]
    b178:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    b17a:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    b17c:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
    b180:	b965      	cbnz	r5, b19c <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    b182:	6823      	ldr	r3, [r4, #0]
    b184:	4313      	orrs	r3, r2
    b186:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    b188:	6863      	ldr	r3, [r4, #4]
	list->head = node;
    b18a:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    b18c:	2b00      	cmp	r3, #0
    b18e:	d1db      	bne.n	b148 <queue_insert+0x3c>
	list->tail = node;
    b190:	6060      	str	r0, [r4, #4]
}
    b192:	e7d9      	b.n	b148 <queue_insert+0x3c>
	node->next_and_flags = flags;
    b194:	f8c8 9000 	str.w	r9, [r8]
}
    b198:	4640      	mov	r0, r8
    b19a:	e7ee      	b.n	b17a <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    b19c:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    b19e:	f033 0303 	bics.w	r3, r3, #3
    b1a2:	d10b      	bne.n	b1bc <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
    b1a4:	6002      	str	r2, [r0, #0]
	return list->tail;
    b1a6:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    b1a8:	b912      	cbnz	r2, b1b0 <queue_insert+0xa4>
	list->head = node;
    b1aa:	e9c4 0000 	strd	r0, r0, [r4]
}
    b1ae:	e7cb      	b.n	b148 <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    b1b0:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    b1b2:	f003 0303 	and.w	r3, r3, #3
    b1b6:	4303      	orrs	r3, r0
    b1b8:	6013      	str	r3, [r2, #0]
    b1ba:	e7e9      	b.n	b190 <queue_insert+0x84>
    b1bc:	4313      	orrs	r3, r2
    b1be:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    b1c0:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    b1c2:	f003 0303 	and.w	r3, r3, #3
    b1c6:	4318      	orrs	r0, r3
    b1c8:	6028      	str	r0, [r5, #0]
}
    b1ca:	e7bd      	b.n	b148 <queue_insert+0x3c>

0000b1cc <z_queue_node_peek>:
{
    b1cc:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    b1ce:	4604      	mov	r4, r0
    b1d0:	b130      	cbz	r0, b1e0 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    b1d2:	6802      	ldr	r2, [r0, #0]
    b1d4:	0793      	lsls	r3, r2, #30
    b1d6:	d003      	beq.n	b1e0 <z_queue_node_peek+0x14>
		ret = anode->data;
    b1d8:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    b1da:	b109      	cbz	r1, b1e0 <z_queue_node_peek+0x14>
			k_free(anode);
    b1dc:	f000 fa25 	bl	b62a <k_free>
}
    b1e0:	4620      	mov	r0, r4
    b1e2:	bd10      	pop	{r4, pc}

0000b1e4 <k_queue_append>:
{
    b1e4:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    b1e6:	2301      	movs	r3, #1
    b1e8:	9300      	str	r3, [sp, #0]
    b1ea:	2300      	movs	r3, #0
{
    b1ec:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    b1ee:	4619      	mov	r1, r3
    b1f0:	f7ff ff8c 	bl	b10c <queue_insert>
}
    b1f4:	b003      	add	sp, #12
    b1f6:	f85d fb04 	ldr.w	pc, [sp], #4

0000b1fa <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    b1fa:	b13a      	cbz	r2, b20c <z_impl_k_sem_init+0x12>
    b1fc:	428a      	cmp	r2, r1
    b1fe:	d305      	bcc.n	b20c <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    b200:	e9c0 1202 	strd	r1, r2, [r0, #8]
    b204:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    b208:	2000      	movs	r0, #0
    b20a:	4770      	bx	lr
		return -EINVAL;
    b20c:	f06f 0015 	mvn.w	r0, #21
}
    b210:	4770      	bx	lr

0000b212 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    b212:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    b214:	2301      	movs	r3, #1
    b216:	408b      	lsls	r3, r1
    b218:	ea22 0303 	bic.w	r3, r2, r3
    b21c:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    b21e:	fa22 f001 	lsr.w	r0, r2, r1
}
    b222:	f000 0001 	and.w	r0, r0, #1
    b226:	4770      	bx	lr

0000b228 <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    b228:	b120      	cbz	r0, b234 <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    b22a:	2200      	movs	r2, #0
    b22c:	4611      	mov	r1, r2
    b22e:	3088      	adds	r0, #136	; 0x88
    b230:	f000 b942 	b.w	b4b8 <z_sched_wake>
}
    b234:	4770      	bx	lr

0000b236 <work_timeout>:
{
    b236:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b238:	4604      	mov	r4, r0
	__asm__ volatile(
    b23a:	f04f 0320 	mov.w	r3, #32
    b23e:	f3ef 8511 	mrs	r5, BASEPRI
    b242:	f383 8812 	msr	BASEPRI_MAX, r3
    b246:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    b24a:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    b24c:	f1a0 0610 	sub.w	r6, r0, #16
    b250:	2103      	movs	r1, #3
    b252:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    b254:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    b256:	f7ff ffdc 	bl	b212 <flag_test_and_clear>
    b25a:	b128      	cbz	r0, b268 <work_timeout+0x32>
		queue = dw->queue;
    b25c:	69a3      	ldr	r3, [r4, #24]
    b25e:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    b260:	a901      	add	r1, sp, #4
    b262:	4630      	mov	r0, r6
    b264:	f7fd fd6a 	bl	8d3c <submit_to_queue_locked>
	__asm__ volatile(
    b268:	f385 8811 	msr	BASEPRI, r5
    b26c:	f3bf 8f6f 	isb	sy
}
    b270:	b002      	add	sp, #8
    b272:	bd70      	pop	{r4, r5, r6, pc}

0000b274 <k_work_init>:
{
    b274:	b538      	push	{r3, r4, r5, lr}
    b276:	4604      	mov	r4, r0
    b278:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b27a:	2210      	movs	r2, #16
    b27c:	2100      	movs	r1, #0
    b27e:	f7ff fa85 	bl	a78c <memset>
    b282:	6065      	str	r5, [r4, #4]
}
    b284:	bd38      	pop	{r3, r4, r5, pc}

0000b286 <k_work_submit_to_queue>:
{
    b286:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b288:	9001      	str	r0, [sp, #4]
    b28a:	4608      	mov	r0, r1
	__asm__ volatile(
    b28c:	f04f 0320 	mov.w	r3, #32
    b290:	f3ef 8511 	mrs	r5, BASEPRI
    b294:	f383 8812 	msr	BASEPRI_MAX, r3
    b298:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    b29c:	a901      	add	r1, sp, #4
    b29e:	f7fd fd4d 	bl	8d3c <submit_to_queue_locked>
    b2a2:	4604      	mov	r4, r0
	__asm__ volatile(
    b2a4:	f385 8811 	msr	BASEPRI, r5
    b2a8:	f3bf 8f6f 	isb	sy
	if (ret > 0) {
    b2ac:	2800      	cmp	r0, #0
    b2ae:	dd09      	ble.n	b2c4 <k_work_submit_to_queue+0x3e>
	__asm__ volatile(
    b2b0:	f04f 0320 	mov.w	r3, #32
    b2b4:	f3ef 8011 	mrs	r0, BASEPRI
    b2b8:	f383 8812 	msr	BASEPRI_MAX, r3
    b2bc:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    b2c0:	f000 f845 	bl	b34e <z_reschedule_irqlock>
}
    b2c4:	4620      	mov	r0, r4
    b2c6:	b003      	add	sp, #12
    b2c8:	bd30      	pop	{r4, r5, pc}

0000b2ca <k_work_init_delayable>:
{
    b2ca:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    b2cc:	2230      	movs	r2, #48	; 0x30
{
    b2ce:	4604      	mov	r4, r0
    b2d0:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    b2d2:	2100      	movs	r1, #0
    b2d4:	f7ff fa5a 	bl	a78c <memset>
    b2d8:	f44f 7380 	mov.w	r3, #256	; 0x100
    b2dc:	6065      	str	r5, [r4, #4]
    b2de:	60e3      	str	r3, [r4, #12]
}
    b2e0:	bd38      	pop	{r3, r4, r5, pc}

0000b2e2 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    b2e2:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    b2e6:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    b2e8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b2ea:	2300      	movs	r3, #0
	node->prev = NULL;
    b2ec:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    b2f0:	4770      	bx	lr

0000b2f2 <unpend_thread_no_timeout>:
{
    b2f2:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    b2f4:	f7ff fff5 	bl	b2e2 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    b2f8:	7b43      	ldrb	r3, [r0, #13]
    b2fa:	f023 0302 	bic.w	r3, r3, #2
    b2fe:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    b300:	2300      	movs	r3, #0
    b302:	6083      	str	r3, [r0, #8]
}
    b304:	bd08      	pop	{r3, pc}

0000b306 <z_unpend_thread_no_timeout>:
{
    b306:	b508      	push	{r3, lr}
    b308:	f04f 0320 	mov.w	r3, #32
    b30c:	f3ef 8111 	mrs	r1, BASEPRI
    b310:	f383 8812 	msr	BASEPRI_MAX, r3
    b314:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    b318:	f7ff ffeb 	bl	b2f2 <unpend_thread_no_timeout>
	__asm__ volatile(
    b31c:	f381 8811 	msr	BASEPRI, r1
    b320:	f3bf 8f6f 	isb	sy
}
    b324:	bd08      	pop	{r3, pc}

0000b326 <z_unpend_thread>:
{
    b326:	b510      	push	{r4, lr}
	__asm__ volatile(
    b328:	f04f 0320 	mov.w	r3, #32
    b32c:	f3ef 8411 	mrs	r4, BASEPRI
    b330:	f383 8812 	msr	BASEPRI_MAX, r3
    b334:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    b338:	f7ff ffdb 	bl	b2f2 <unpend_thread_no_timeout>
	__asm__ volatile(
    b33c:	f384 8811 	msr	BASEPRI, r4
    b340:	f3bf 8f6f 	isb	sy
}
    b344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b348:	3018      	adds	r0, #24
    b34a:	f000 b8d2 	b.w	b4f2 <z_abort_timeout>

0000b34e <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    b34e:	4603      	mov	r3, r0
    b350:	b920      	cbnz	r0, b35c <z_reschedule_irqlock+0xe>
    b352:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    b356:	b90a      	cbnz	r2, b35c <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    b358:	f7f7 bc28 	b.w	2bac <arch_swap>
    b35c:	f383 8811 	msr	BASEPRI, r3
    b360:	f3bf 8f6f 	isb	sy
}
    b364:	4770      	bx	lr

0000b366 <z_reschedule_unlocked>:
	__asm__ volatile(
    b366:	f04f 0320 	mov.w	r3, #32
    b36a:	f3ef 8011 	mrs	r0, BASEPRI
    b36e:	f383 8812 	msr	BASEPRI_MAX, r3
    b372:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    b376:	f7ff bfea 	b.w	b34e <z_reschedule_irqlock>

0000b37a <z_priq_dumb_best>:
{
    b37a:	4603      	mov	r3, r0
	return list->head == list;
    b37c:	6800      	ldr	r0, [r0, #0]
}
    b37e:	4283      	cmp	r3, r0
    b380:	bf08      	it	eq
    b382:	2000      	moveq	r0, #0
    b384:	4770      	bx	lr

0000b386 <z_ready_thread>:
{
    b386:	b510      	push	{r4, lr}
    b388:	f04f 0320 	mov.w	r3, #32
    b38c:	f3ef 8411 	mrs	r4, BASEPRI
    b390:	f383 8812 	msr	BASEPRI_MAX, r3
    b394:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    b398:	f7fd fe96 	bl	90c8 <ready_thread>
	__asm__ volatile(
    b39c:	f384 8811 	msr	BASEPRI, r4
    b3a0:	f3bf 8f6f 	isb	sy
}
    b3a4:	bd10      	pop	{r4, pc}

0000b3a6 <z_thread_timeout>:
{
    b3a6:	b510      	push	{r4, lr}
    b3a8:	4601      	mov	r1, r0
	__asm__ volatile(
    b3aa:	f04f 0320 	mov.w	r3, #32
    b3ae:	f3ef 8411 	mrs	r4, BASEPRI
    b3b2:	f383 8812 	msr	BASEPRI_MAX, r3
    b3b6:	f3bf 8f6f 	isb	sy
		if (!killed) {
    b3ba:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    b3be:	f013 0f28 	tst.w	r3, #40	; 0x28
    b3c2:	d10d      	bne.n	b3e0 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    b3c4:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    b3c8:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    b3ca:	b10b      	cbz	r3, b3d0 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    b3cc:	f7ff ff91 	bl	b2f2 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    b3d0:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    b3d4:	f023 0314 	bic.w	r3, r3, #20
    b3d8:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    b3dc:	f7fd fe74 	bl	90c8 <ready_thread>
	__asm__ volatile(
    b3e0:	f384 8811 	msr	BASEPRI, r4
    b3e4:	f3bf 8f6f 	isb	sy
}
    b3e8:	bd10      	pop	{r4, pc}

0000b3ea <add_to_waitq_locked>:
{
    b3ea:	b538      	push	{r3, r4, r5, lr}
    b3ec:	4604      	mov	r4, r0
    b3ee:	460d      	mov	r5, r1
	unready_thread(thread);
    b3f0:	f7fd febe 	bl	9170 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    b3f4:	7b63      	ldrb	r3, [r4, #13]
    b3f6:	f043 0302 	orr.w	r3, r3, #2
    b3fa:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    b3fc:	b195      	cbz	r5, b424 <add_to_waitq_locked+0x3a>
    b3fe:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    b400:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b402:	429d      	cmp	r5, r3
    b404:	d015      	beq.n	b432 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b406:	b1a3      	cbz	r3, b432 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    b408:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    b40c:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    b410:	4291      	cmp	r1, r2
    b412:	d008      	beq.n	b426 <add_to_waitq_locked+0x3c>
		return b2 - b1;
    b414:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    b416:	2a00      	cmp	r2, #0
    b418:	dd05      	ble.n	b426 <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    b41a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    b41c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    b420:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    b422:	605c      	str	r4, [r3, #4]
}
    b424:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    b426:	686a      	ldr	r2, [r5, #4]
    b428:	4293      	cmp	r3, r2
    b42a:	d002      	beq.n	b432 <add_to_waitq_locked+0x48>
    b42c:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b42e:	2b00      	cmp	r3, #0
    b430:	d1ec      	bne.n	b40c <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    b432:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    b434:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    b438:	601c      	str	r4, [r3, #0]
	list->tail = node;
    b43a:	606c      	str	r4, [r5, #4]
}
    b43c:	e7f2      	b.n	b424 <add_to_waitq_locked+0x3a>

0000b43e <z_unpend1_no_timeout>:
{
    b43e:	b510      	push	{r4, lr}
	__asm__ volatile(
    b440:	f04f 0320 	mov.w	r3, #32
    b444:	f3ef 8411 	mrs	r4, BASEPRI
    b448:	f383 8812 	msr	BASEPRI_MAX, r3
    b44c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    b450:	f7ff ff93 	bl	b37a <z_priq_dumb_best>
		if (thread != NULL) {
    b454:	4601      	mov	r1, r0
    b456:	b108      	cbz	r0, b45c <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    b458:	f7ff ff4b 	bl	b2f2 <unpend_thread_no_timeout>
	__asm__ volatile(
    b45c:	f384 8811 	msr	BASEPRI, r4
    b460:	f3bf 8f6f 	isb	sy
}
    b464:	4608      	mov	r0, r1
    b466:	bd10      	pop	{r4, pc}

0000b468 <z_unpend_first_thread>:
{
    b468:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    b46a:	f04f 0320 	mov.w	r3, #32
    b46e:	f3ef 8511 	mrs	r5, BASEPRI
    b472:	f383 8812 	msr	BASEPRI_MAX, r3
    b476:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    b47a:	f7ff ff7e 	bl	b37a <z_priq_dumb_best>
		if (thread != NULL) {
    b47e:	4604      	mov	r4, r0
    b480:	b120      	cbz	r0, b48c <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    b482:	f7ff ff36 	bl	b2f2 <unpend_thread_no_timeout>
    b486:	3018      	adds	r0, #24
    b488:	f000 f833 	bl	b4f2 <z_abort_timeout>
	__asm__ volatile(
    b48c:	f385 8811 	msr	BASEPRI, r5
    b490:	f3bf 8f6f 	isb	sy
}
    b494:	4620      	mov	r0, r4
    b496:	bd38      	pop	{r3, r4, r5, pc}

0000b498 <z_unpend_all>:
{
    b498:	b538      	push	{r3, r4, r5, lr}
    b49a:	4605      	mov	r5, r0
	int need_sched = 0;
    b49c:	2000      	movs	r0, #0
	return list->head == list;
    b49e:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b4a0:	42a5      	cmp	r5, r4
    b4a2:	d000      	beq.n	b4a6 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    b4a4:	b904      	cbnz	r4, b4a8 <z_unpend_all+0x10>
}
    b4a6:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    b4a8:	4620      	mov	r0, r4
    b4aa:	f7ff ff3c 	bl	b326 <z_unpend_thread>
		z_ready_thread(thread);
    b4ae:	4620      	mov	r0, r4
    b4b0:	f7ff ff69 	bl	b386 <z_ready_thread>
		need_sched = 1;
    b4b4:	2001      	movs	r0, #1
    b4b6:	e7f2      	b.n	b49e <z_unpend_all+0x6>

0000b4b8 <z_sched_wake>:
{
    b4b8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    b4ba:	f04f 0320 	mov.w	r3, #32
    b4be:	f3ef 8511 	mrs	r5, BASEPRI
    b4c2:	f383 8812 	msr	BASEPRI_MAX, r3
    b4c6:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    b4ca:	f7ff ff56 	bl	b37a <z_priq_dumb_best>
		if (thread != NULL) {
    b4ce:	4604      	mov	r4, r0
    b4d0:	b150      	cbz	r0, b4e8 <z_sched_wake+0x30>
    b4d2:	6781      	str	r1, [r0, #120]	; 0x78
	thread->base.swap_data = data;
    b4d4:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    b4d6:	f7ff ff0c 	bl	b2f2 <unpend_thread_no_timeout>
    b4da:	3018      	adds	r0, #24
    b4dc:	f000 f809 	bl	b4f2 <z_abort_timeout>
			ready_thread(thread);
    b4e0:	4620      	mov	r0, r4
    b4e2:	f7fd fdf1 	bl	90c8 <ready_thread>
			ret = true;
    b4e6:	2001      	movs	r0, #1
	__asm__ volatile(
    b4e8:	f385 8811 	msr	BASEPRI, r5
    b4ec:	f3bf 8f6f 	isb	sy
}
    b4f0:	bd38      	pop	{r3, r4, r5, pc}

0000b4f2 <z_abort_timeout>:
{
    b4f2:	b510      	push	{r4, lr}
	__asm__ volatile(
    b4f4:	f04f 0220 	mov.w	r2, #32
    b4f8:	f3ef 8411 	mrs	r4, BASEPRI
    b4fc:	f382 8812 	msr	BASEPRI_MAX, r2
    b500:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    b504:	6803      	ldr	r3, [r0, #0]
    b506:	b13b      	cbz	r3, b518 <z_abort_timeout+0x26>
			remove_timeout(to);
    b508:	f7fe f87c 	bl	9604 <remove_timeout>
			ret = 0;
    b50c:	2000      	movs	r0, #0
	__asm__ volatile(
    b50e:	f384 8811 	msr	BASEPRI, r4
    b512:	f3bf 8f6f 	isb	sy
}
    b516:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    b518:	f06f 0015 	mvn.w	r0, #21
    b51c:	e7f7      	b.n	b50e <z_abort_timeout+0x1c>

0000b51e <z_get_next_timeout_expiry>:
{
    b51e:	b510      	push	{r4, lr}
	__asm__ volatile(
    b520:	f04f 0320 	mov.w	r3, #32
    b524:	f3ef 8411 	mrs	r4, BASEPRI
    b528:	f383 8812 	msr	BASEPRI_MAX, r3
    b52c:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    b530:	f7fe f842 	bl	95b8 <next_timeout>
	__asm__ volatile(
    b534:	f384 8811 	msr	BASEPRI, r4
    b538:	f3bf 8f6f 	isb	sy
}
    b53c:	bd10      	pop	{r4, pc}

0000b53e <z_set_timeout_expiry>:
{
    b53e:	b570      	push	{r4, r5, r6, lr}
    b540:	4604      	mov	r4, r0
    b542:	460d      	mov	r5, r1
	__asm__ volatile(
    b544:	f04f 0320 	mov.w	r3, #32
    b548:	f3ef 8611 	mrs	r6, BASEPRI
    b54c:	f383 8812 	msr	BASEPRI_MAX, r3
    b550:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    b554:	f7fe f830 	bl	95b8 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    b558:	2801      	cmp	r0, #1
    b55a:	dd05      	ble.n	b568 <z_set_timeout_expiry+0x2a>
    b55c:	42a0      	cmp	r0, r4
    b55e:	db03      	blt.n	b568 <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    b560:	4629      	mov	r1, r5
    b562:	4620      	mov	r0, r4
    b564:	f7fa f936 	bl	57d4 <sys_clock_set_timeout>
	__asm__ volatile(
    b568:	f386 8811 	msr	BASEPRI, r6
    b56c:	f3bf 8f6f 	isb	sy
}
    b570:	bd70      	pop	{r4, r5, r6, pc}

0000b572 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    b572:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    b574:	f7fe f936 	bl	97e4 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    b578:	bd08      	pop	{r3, pc}

0000b57a <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    b57a:	b108      	cbz	r0, b580 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    b57c:	f7f8 b838 	b.w	35f0 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    b580:	4770      	bx	lr

0000b582 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b582:	f1b1 3fff 	cmp.w	r1, #4294967295
    b586:	bf08      	it	eq
    b588:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    b58c:	b538      	push	{r3, r4, r5, lr}
    b58e:	4605      	mov	r5, r0
    b590:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b592:	d01d      	beq.n	b5d0 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    b594:	ea51 0300 	orrs.w	r3, r1, r0
    b598:	d103      	bne.n	b5a2 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    b59a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    b59e:	f7fe b921 	b.w	97e4 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    b5a2:	f06f 0301 	mvn.w	r3, #1
    b5a6:	1a18      	subs	r0, r3, r0
    b5a8:	f04f 33ff 	mov.w	r3, #4294967295
    b5ac:	eb63 0101 	sbc.w	r1, r3, r1
    b5b0:	2900      	cmp	r1, #0
    b5b2:	da0c      	bge.n	b5ce <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
    b5b4:	f7fe f916 	bl	97e4 <sys_clock_tick_get>
    b5b8:	2d01      	cmp	r5, #1
    b5ba:	4622      	mov	r2, r4
    b5bc:	f174 0400 	sbcs.w	r4, r4, #0
    b5c0:	462b      	mov	r3, r5
    b5c2:	bfbc      	itt	lt
    b5c4:	2301      	movlt	r3, #1
    b5c6:	2200      	movlt	r2, #0
    b5c8:	1818      	adds	r0, r3, r0
    b5ca:	eb41 0102 	adc.w	r1, r1, r2
}
    b5ce:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    b5d0:	f04f 30ff 	mov.w	r0, #4294967295
    b5d4:	4601      	mov	r1, r0
    b5d6:	e7fa      	b.n	b5ce <sys_clock_timeout_end_calc+0x4c>

0000b5d8 <k_timer_init>:
	timer->status = 0U;
    b5d8:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    b5da:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    b5de:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    b5e2:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    b5e6:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    b5ea:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    b5ec:	6343      	str	r3, [r0, #52]	; 0x34
}
    b5ee:	4770      	bx	lr

0000b5f0 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    b5f0:	b510      	push	{r4, lr}
    b5f2:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    b5f4:	f7ff ff7d 	bl	b4f2 <z_abort_timeout>

	if (inactive) {
    b5f8:	b9b0      	cbnz	r0, b628 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    b5fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
    b5fc:	b10b      	cbz	r3, b602 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    b5fe:	4620      	mov	r0, r4
    b600:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    b602:	f104 0018 	add.w	r0, r4, #24
    b606:	f7ff ff1a 	bl	b43e <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    b60a:	b168      	cbz	r0, b628 <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    b60c:	f7ff febb 	bl	b386 <z_ready_thread>
	__asm__ volatile(
    b610:	f04f 0320 	mov.w	r3, #32
    b614:	f3ef 8011 	mrs	r0, BASEPRI
    b618:	f383 8812 	msr	BASEPRI_MAX, r3
    b61c:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    b620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    b624:	f7ff be93 	b.w	b34e <z_reschedule_irqlock>
    b628:	bd10      	pop	{r4, pc}

0000b62a <k_free>:
	if (ptr != NULL) {
    b62a:	b120      	cbz	r0, b636 <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    b62c:	1f01      	subs	r1, r0, #4
    b62e:	f850 0c04 	ldr.w	r0, [r0, #-4]
    b632:	f000 b84a 	b.w	b6ca <k_heap_free>
}
    b636:	4770      	bx	lr

0000b638 <k_heap_init>:
{
    b638:	b410      	push	{r4}
    b63a:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    b63e:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    b642:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    b644:	f7fe bcd4 	b.w	9ff0 <sys_heap_init>

0000b648 <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    b648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b64c:	b085      	sub	sp, #20
    b64e:	4606      	mov	r6, r0
    b650:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    b652:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
    b656:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    b658:	f7ff ff93 	bl	b582 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    b65c:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    b660:	4605      	mov	r5, r0
    b662:	460f      	mov	r7, r1
    b664:	f04f 0320 	mov.w	r3, #32
    b668:	f3ef 8411 	mrs	r4, BASEPRI
    b66c:	f383 8812 	msr	BASEPRI_MAX, r3
    b670:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    b674:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    b678:	464a      	mov	r2, r9
    b67a:	4641      	mov	r1, r8
    b67c:	4630      	mov	r0, r6
    b67e:	f7fe fc4f 	bl	9f20 <sys_heap_aligned_alloc>
    b682:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    b684:	f7fe f8ae 	bl	97e4 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    b688:	9b03      	ldr	r3, [sp, #12]
    b68a:	b13b      	cbz	r3, b69c <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
    b68c:	f384 8811 	msr	BASEPRI, r4
    b690:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    b694:	4618      	mov	r0, r3
    b696:	b005      	add	sp, #20
    b698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    b69c:	1a28      	subs	r0, r5, r0
    b69e:	eb67 0101 	sbc.w	r1, r7, r1
    b6a2:	2801      	cmp	r0, #1
    b6a4:	f171 0200 	sbcs.w	r2, r1, #0
    b6a8:	dbf0      	blt.n	b68c <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    b6aa:	e9cd 0100 	strd	r0, r1, [sp]
    b6ae:	465a      	mov	r2, fp
    b6b0:	4621      	mov	r1, r4
    b6b2:	4650      	mov	r0, sl
    b6b4:	f7fd fd9a 	bl	91ec <z_pend_curr>
	__asm__ volatile(
    b6b8:	f04f 0320 	mov.w	r3, #32
    b6bc:	f3ef 8411 	mrs	r4, BASEPRI
    b6c0:	f383 8812 	msr	BASEPRI_MAX, r3
    b6c4:	f3bf 8f6f 	isb	sy
    b6c8:	e7d6      	b.n	b678 <k_heap_aligned_alloc+0x30>

0000b6ca <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    b6ca:	b538      	push	{r3, r4, r5, lr}
    b6cc:	4604      	mov	r4, r0
    b6ce:	f04f 0320 	mov.w	r3, #32
    b6d2:	f3ef 8511 	mrs	r5, BASEPRI
    b6d6:	f383 8812 	msr	BASEPRI_MAX, r3
    b6da:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    b6de:	f7fe fbe7 	bl	9eb0 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    b6e2:	f104 000c 	add.w	r0, r4, #12
    b6e6:	f7ff fed7 	bl	b498 <z_unpend_all>
    b6ea:	b130      	cbz	r0, b6fa <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    b6ec:	4629      	mov	r1, r5
    b6ee:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    b6f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    b6f6:	f7fd bc25 	b.w	8f44 <z_reschedule>
	__asm__ volatile(
    b6fa:	f385 8811 	msr	BASEPRI, r5
    b6fe:	f3bf 8f6f 	isb	sy
}
    b702:	bd38      	pop	{r3, r4, r5, pc}

0000b704 <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    b704:	4770      	bx	lr
	...

0000b708 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    b708:	f7fa beec 	b.w	64e4 <SystemInit>
