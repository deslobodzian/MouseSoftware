
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
    configure_callback(&mouse_three, &m3_button, &mouse.callback[2]);
    configure_callback(&mouse_four, &m4_button, &mouse.callback[3]);
    configure_callback(&mouse_five, &m5_button, &mouse.callback[4]);
}

void configure_callback(const struct gpio_dt_spec *spec, gpio_callback_handler_t handler, struct gpio_callback *callback) {
   0:	40 2c 00 20 c9 34 00 00 3d ab 00 00 9d 34 00 00     @,. .4..=....4..
 */
__syscall bool device_is_ready(const struct device *dev);

static inline bool z_impl_device_is_ready(const struct device *dev)
{
	return z_device_is_ready(dev);
  10:	9d 34 00 00 9d 34 00 00 9d 34 00 00 00 00 00 00     .4...4...4......
	...
	if (gpio == NULL) {
		/* Optional GPIO is missing. */
		// return 0;
	}
	if (!device_is_ready(gpio)) {
		LOG_ERR("GPIO port %s is not ready", gpio->name);
  2c:	1d 2e 00 00 9d 34 00 00 00 00 00 00 c9 2d 00 00     .....4.......-..
static inline int gpio_pin_configure_dt(const struct gpio_dt_spec *spec,
					gpio_flags_t extra_flags)
{
	return gpio_pin_configure(spec->port,
				  spec->pin,
				  spec->dt_flags | extra_flags);
  3c:	9d 34 00 00                                         .4..

00000040 <_irq_vector_table>:
	return gpio_pin_configure(spec->port,
  40:	cd 2e 00 00 e1 5b 00 00 cd 2e 00 00 cd 2e 00 00     .....[..........
		data->invert |= (gpio_port_pins_t)BIT(pin);
  50:	cd 2e 00 00 cd 2e 00 00 cd 2e 00 00 cd 2e 00 00     ................
  60:	cd 2e 00 00 cd 2e 00 00 73 b0 00 00 cd 2e 00 00     ........s.......
		// return -ENODEV;
	}
	ret = gpio_pin_configure_dt(spec, GPIO_INPUT);
	if (ret < 0) {
  70:	cd 2e 00 00 cd 2e 00 00 cd 2e 00 00 cd 2e 00 00     ................
		LOG_ERR("Failed to configure port %s pin %u, error: %d",
  80:	cd 2e 00 00 cd 2e 00 00 cd 2e 00 00 cd 2e 00 00     ................
  90:	51 5c 00 00 cd 2e 00 00 cd 2e 00 00 cd 2e 00 00     Q\..............
			gpio->name, pin, ret);
		// return ret;
	}
	ret = gpio_pin_get(gpio, pin);
  a0:	cd 2e 00 00 cd 2e 00 00 cd 2e 00 00 cd 2e 00 00     ................
	if (ret < 0) {
		LOG_ERR("Failed to get the state of port %s pin %u, error: %d",
  b0:	cd 2e 00 00 cd 2e 00 00 cd 2e 00 00 cd 2e 00 00     ................
  c0:	cd 2e 00 00 cd 2e 00 00 cd 2e 00 00 cd 2e 00 00     ................
  d0:	cd 2e 00 00 cd 2e 00 00 cd 2e 00 00 cd 2e 00 00     ................

Disassembly of section text:

000000e0 <__aeabi_uldivmod>:
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
	callback->pin_mask = pin_mask;
      e0:	b953      	cbnz	r3, f8 <__aeabi_uldivmod+0x18>
      e2:	b94a      	cbnz	r2, f8 <__aeabi_uldivmod+0x18>
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
      e4:	2900      	cmp	r1, #0
      e6:	bf08      	it	eq
      e8:	2800      	cmpeq	r0, #0
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
      ea:	bf1c      	itt	ne
      ec:	f04f 31ff 	movne.w	r1, #4294967295
	return gpio_pin_interrupt_configure(spec->port, spec->pin, flags);
      f0:	f04f 30ff 	movne.w	r0, #4294967295
	return api->pin_interrupt_configure(port, pin, mode, trig);
      f4:	f000 b80c 	b.w	110 <__aeabi_idiv0>
      f8:	f1ad 0c08 	sub.w	ip, sp, #8
      fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     100:	f000 f808 	bl	114 <__udivmoddi4>

	gpio_init_callback(callback, m1_button, BIT(pin));
	ret = gpio_add_callback(gpio, callback);
	
	ret = gpio_pin_interrupt_configure_dt(spec, GPIO_INT_EDGE_BOTH);
	if (ret < 0) {
     104:	f8dd e004 	ldr.w	lr, [sp, #4]
		LOG_ERR("Failed to configure interrupt for port %s pin %u, "
     108:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     10c:	b004      	add	sp, #16
     10e:	4770      	bx	lr

00000110 <__aeabi_idiv0>:
     110:	4770      	bx	lr
     112:	bf00      	nop

00000114 <__udivmoddi4>:
     114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     118:	4607      	mov	r7, r0
     11a:	468c      	mov	ip, r1
     11c:	4608      	mov	r0, r1
     11e:	9e09      	ldr	r6, [sp, #36]	; 0x24
     120:	4615      	mov	r5, r2
     122:	463c      	mov	r4, r7
     124:	4619      	mov	r1, r3
     126:	2b00      	cmp	r3, #0
     128:	f040 80c6 	bne.w	2b8 <CONFIG_USB_DEVICE_PID+0x98>
     12c:	4282      	cmp	r2, r0
     12e:	fab2 f782 	clz	r7, r2
			"error: %d",
			gpio->name, pin, ret);
		// return ret;
	}

    LOG_DBG("Set up button at %s pin %d", gpio->name, pin);
     132:	d946      	bls.n	1c2 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x55>
     134:	b14f      	cbz	r7, 14a <__udivmoddi4+0x36>
     136:	f1c7 0e20 	rsb	lr, r7, #32
     13a:	fa24 fe0e 	lsr.w	lr, r4, lr
     13e:	fa00 f307 	lsl.w	r3, r0, r7
     142:	40bd      	lsls	r5, r7
     144:	ea4e 0c03 	orr.w	ip, lr, r3
     148:	40bc      	lsls	r4, r7
     14a:	ea4f 4815 	mov.w	r8, r5, lsr #16
     14e:	fa1f fe85 	uxth.w	lr, r5
     152:	fbbc f9f8 	udiv	r9, ip, r8
     156:	0c22      	lsrs	r2, r4, #16
	// return 0;
}
     158:	fb08 c319 	mls	r3, r8, r9, ip
     15c:	fb09 fa0e 	mul.w	sl, r9, lr
     160:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
     164:	459a      	cmp	sl, r3
     166:	d928      	bls.n	1ba <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x4d>
     168:	18eb      	adds	r3, r5, r3
     16a:	f109 30ff 	add.w	r0, r9, #4294967295
     16e:	d204      	bcs.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     170:	459a      	cmp	sl, r3
     172:	d902      	bls.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     174:	f1a9 0002 	sub.w	r0, r9, #2
     178:	442b      	add	r3, r5
     17a:	eba3 030a 	sub.w	r3, r3, sl
     17e:	b2a4      	uxth	r4, r4
     180:	fbb3 f2f8 	udiv	r2, r3, r8
     184:	fb08 3312 	mls	r3, r8, r2, r3
     188:	fb02 fe0e 	mul.w	lr, r2, lr
     18c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     190:	45a6      	cmp	lr, r4
     192:	d914      	bls.n	1be <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x51>
     194:	192c      	adds	r4, r5, r4
     196:	f102 33ff 	add.w	r3, r2, #4294967295
     19a:	d203      	bcs.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     19c:	45a6      	cmp	lr, r4
     19e:	d901      	bls.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     1a0:	1e93      	subs	r3, r2, #2
     1a2:	442c      	add	r4, r5
     1a4:	eba4 040e 	sub.w	r4, r4, lr
     1a8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     1ac:	b11e      	cbz	r6, 1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     1ae:	40fc      	lsrs	r4, r7
     1b0:	2300      	movs	r3, #0
     1b2:	6034      	str	r4, [r6, #0]
     1b4:	6073      	str	r3, [r6, #4]
     1b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
     1ba:	4648      	mov	r0, r9
     1bc:	e7dd      	b.n	17a <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0xd>
     1be:	4613      	mov	r3, r2
     1c0:	e7f0      	b.n	1a4 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x37>
     1c2:	b902      	cbnz	r2, 1c6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x59>
     1c4:	deff      	udf	#255	; 0xff
     1c6:	bb87      	cbnz	r7, 22a <CONFIG_USB_DEVICE_PID+0xa>
     1c8:	1a83      	subs	r3, r0, r2
     1ca:	2101      	movs	r1, #1
     1cc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     1d0:	b2aa      	uxth	r2, r5
     1d2:	fbb3 fcfe 	udiv	ip, r3, lr
     1d6:	0c20      	lsrs	r0, r4, #16
     1d8:	fb0e 331c 	mls	r3, lr, ip, r3
     1dc:	fb0c f802 	mul.w	r8, ip, r2
     1e0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
     1e4:	4598      	cmp	r8, r3
     1e6:	d963      	bls.n	2b0 <CONFIG_USB_DEVICE_PID+0x90>
     1e8:	18eb      	adds	r3, r5, r3
     1ea:	f10c 30ff 	add.w	r0, ip, #4294967295
     1ee:	d204      	bcs.n	1fa <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6>
     1f0:	4598      	cmp	r8, r3
     1f2:	d902      	bls.n	1fa <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6>
     1f4:	f1ac 0002 	sub.w	r0, ip, #2
     1f8:	442b      	add	r3, r5
     1fa:	eba3 0308 	sub.w	r3, r3, r8
     1fe:	b2a4      	uxth	r4, r4
     200:	fbb3 fcfe 	udiv	ip, r3, lr
     204:	fb0e 331c 	mls	r3, lr, ip, r3
     208:	fb0c f202 	mul.w	r2, ip, r2
     20c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     210:	42a2      	cmp	r2, r4
     212:	d94f      	bls.n	2b4 <CONFIG_USB_DEVICE_PID+0x94>
     214:	192c      	adds	r4, r5, r4
     216:	f10c 33ff 	add.w	r3, ip, #4294967295
     21a:	d204      	bcs.n	226 <CONFIG_USB_DEVICE_PID+0x6>
     21c:	42a2      	cmp	r2, r4
     21e:	d902      	bls.n	226 <CONFIG_USB_DEVICE_PID+0x6>
     220:	f1ac 0302 	sub.w	r3, ip, #2
     224:	442c      	add	r4, r5
     226:	1aa4      	subs	r4, r4, r2
     228:	e7be      	b.n	1a8 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x3b>
     22a:	f1c7 0c20 	rsb	ip, r7, #32
     22e:	fa20 f80c 	lsr.w	r8, r0, ip
     232:	fa00 f307 	lsl.w	r3, r0, r7
     236:	fa24 fc0c 	lsr.w	ip, r4, ip
     23a:	40bd      	lsls	r5, r7
     23c:	ea4c 0203 	orr.w	r2, ip, r3
     240:	ea4f 4e15 	mov.w	lr, r5, lsr #16
     244:	b2ab      	uxth	r3, r5
     246:	fbb8 fcfe 	udiv	ip, r8, lr
     24a:	0c11      	lsrs	r1, r2, #16
     24c:	fb0e 801c 	mls	r0, lr, ip, r8
     250:	fb0c f903 	mul.w	r9, ip, r3
     254:	ea41 4000 	orr.w	r0, r1, r0, lsl #16
     258:	4581      	cmp	r9, r0
     25a:	fa04 f407 	lsl.w	r4, r4, r7
     25e:	d923      	bls.n	2a8 <CONFIG_USB_DEVICE_PID+0x88>
     260:	1828      	adds	r0, r5, r0
     262:	f10c 31ff 	add.w	r1, ip, #4294967295
     266:	d204      	bcs.n	272 <CONFIG_USB_DEVICE_PID+0x52>
     268:	4581      	cmp	r9, r0
     26a:	d902      	bls.n	272 <CONFIG_USB_DEVICE_PID+0x52>
     26c:	f1ac 0102 	sub.w	r1, ip, #2
     270:	4428      	add	r0, r5
     272:	eba0 0009 	sub.w	r0, r0, r9
     276:	b292      	uxth	r2, r2
     278:	fbb0 fcfe 	udiv	ip, r0, lr
     27c:	fb0e 001c 	mls	r0, lr, ip, r0
     280:	fb0c f803 	mul.w	r8, ip, r3
     284:	ea42 4300 	orr.w	r3, r2, r0, lsl #16
     288:	4598      	cmp	r8, r3
     28a:	d90f      	bls.n	2ac <CONFIG_USB_DEVICE_PID+0x8c>
     28c:	18eb      	adds	r3, r5, r3
     28e:	f10c 32ff 	add.w	r2, ip, #4294967295
     292:	d204      	bcs.n	29e <CONFIG_USB_DEVICE_PID+0x7e>
     294:	4598      	cmp	r8, r3
     296:	d902      	bls.n	29e <CONFIG_USB_DEVICE_PID+0x7e>
     298:	f1ac 0202 	sub.w	r2, ip, #2
     29c:	442b      	add	r3, r5
     29e:	eba3 0308 	sub.w	r3, r3, r8
     2a2:	ea42 4101 	orr.w	r1, r2, r1, lsl #16
     2a6:	e791      	b.n	1cc <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x5f>
     2a8:	4661      	mov	r1, ip
     2aa:	e7e2      	b.n	272 <CONFIG_USB_DEVICE_PID+0x52>
     2ac:	4662      	mov	r2, ip
     2ae:	e7f6      	b.n	29e <CONFIG_USB_DEVICE_PID+0x7e>
     2b0:	4660      	mov	r0, ip
     2b2:	e7a2      	b.n	1fa <CONFIG_CLOCK_CONTROL_NRF_ACCURACY+0x6>
     2b4:	4663      	mov	r3, ip
     2b6:	e7b6      	b.n	226 <CONFIG_USB_DEVICE_PID+0x6>
     2b8:	4283      	cmp	r3, r0
     2ba:	d905      	bls.n	2c8 <CONFIG_USB_DEVICE_PID+0xa8>
     2bc:	b10e      	cbz	r6, 2c2 <CONFIG_USB_DEVICE_PID+0xa2>
     2be:	e9c6 7000 	strd	r7, r0, [r6]
     2c2:	2100      	movs	r1, #0
     2c4:	4608      	mov	r0, r1
     2c6:	e776      	b.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     2c8:	fab3 f183 	clz	r1, r3
     2cc:	b981      	cbnz	r1, 2f0 <CONFIG_USB_DEVICE_PID+0xd0>
     2ce:	4283      	cmp	r3, r0
     2d0:	d301      	bcc.n	2d6 <CONFIG_USB_DEVICE_PID+0xb6>
     2d2:	42ba      	cmp	r2, r7
     2d4:	d80a      	bhi.n	2ec <CONFIG_USB_DEVICE_PID+0xcc>
     2d6:	1abc      	subs	r4, r7, r2
     2d8:	eb60 0303 	sbc.w	r3, r0, r3
     2dc:	2001      	movs	r0, #1
     2de:	469c      	mov	ip, r3
     2e0:	2e00      	cmp	r6, #0
     2e2:	d068      	beq.n	3b6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb6>
     2e4:	e9c6 4c00 	strd	r4, ip, [r6]
     2e8:	2100      	movs	r1, #0
     2ea:	e764      	b.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
     2ec:	4608      	mov	r0, r1
     2ee:	e7f7      	b.n	2e0 <CONFIG_USB_DEVICE_PID+0xc0>
     2f0:	f1c1 0c20 	rsb	ip, r1, #32
     2f4:	408b      	lsls	r3, r1
     2f6:	fa22 f40c 	lsr.w	r4, r2, ip
     2fa:	431c      	orrs	r4, r3
     2fc:	fa02 f501 	lsl.w	r5, r2, r1
     300:	fa00 f301 	lsl.w	r3, r0, r1
     304:	fa27 f20c 	lsr.w	r2, r7, ip
     308:	fa20 fb0c 	lsr.w	fp, r0, ip
     30c:	ea4f 4914 	mov.w	r9, r4, lsr #16
     310:	4313      	orrs	r3, r2
     312:	fbbb f8f9 	udiv	r8, fp, r9
     316:	fa1f fe84 	uxth.w	lr, r4
     31a:	fb09 bb18 	mls	fp, r9, r8, fp
     31e:	0c1a      	lsrs	r2, r3, #16
     320:	fb08 fa0e 	mul.w	sl, r8, lr
     324:	ea42 420b 	orr.w	r2, r2, fp, lsl #16
     328:	4592      	cmp	sl, r2
     32a:	fa07 f701 	lsl.w	r7, r7, r1
     32e:	d93e      	bls.n	3ae <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xae>
     330:	18a2      	adds	r2, r4, r2
     332:	f108 30ff 	add.w	r0, r8, #4294967295
     336:	d204      	bcs.n	342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     338:	4592      	cmp	sl, r2
     33a:	d902      	bls.n	342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     33c:	f1a8 0002 	sub.w	r0, r8, #2
     340:	4422      	add	r2, r4
     342:	eba2 020a 	sub.w	r2, r2, sl
     346:	b29b      	uxth	r3, r3
     348:	fbb2 f8f9 	udiv	r8, r2, r9
     34c:	fb09 2218 	mls	r2, r9, r8, r2
     350:	fb08 fe0e 	mul.w	lr, r8, lr
     354:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
     358:	4596      	cmp	lr, r2
     35a:	d92a      	bls.n	3b2 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb2>
     35c:	18a2      	adds	r2, r4, r2
     35e:	f108 33ff 	add.w	r3, r8, #4294967295
     362:	d204      	bcs.n	36e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6e>
     364:	4596      	cmp	lr, r2
     366:	d902      	bls.n	36e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6e>
     368:	f1a8 0302 	sub.w	r3, r8, #2
     36c:	4422      	add	r2, r4
     36e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
     372:	fba0 9305 	umull	r9, r3, r0, r5
     376:	eba2 020e 	sub.w	r2, r2, lr
     37a:	429a      	cmp	r2, r3
     37c:	46ce      	mov	lr, r9
     37e:	4698      	mov	r8, r3
     380:	d302      	bcc.n	388 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x88>
     382:	d106      	bne.n	392 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x92>
     384:	454f      	cmp	r7, r9
     386:	d204      	bcs.n	392 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x92>
     388:	ebb9 0e05 	subs.w	lr, r9, r5
     38c:	eb63 0804 	sbc.w	r8, r3, r4
     390:	3801      	subs	r0, #1
     392:	b186      	cbz	r6, 3b6 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0xb6>
     394:	ebb7 030e 	subs.w	r3, r7, lr
     398:	eb62 0708 	sbc.w	r7, r2, r8
     39c:	fa07 fc0c 	lsl.w	ip, r7, ip
     3a0:	40cb      	lsrs	r3, r1
     3a2:	ea4c 0303 	orr.w	r3, ip, r3
     3a6:	40cf      	lsrs	r7, r1
     3a8:	e9c6 3700 	strd	r3, r7, [r6]
     3ac:	e79c      	b.n	2e8 <CONFIG_USB_DEVICE_PID+0xc8>
     3ae:	4640      	mov	r0, r8
     3b0:	e7c7      	b.n	342 <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x42>
     3b2:	4643      	mov	r3, r8
     3b4:	e7db      	b.n	36e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x6e>
     3b6:	4631      	mov	r1, r6
     3b8:	e6fd      	b.n	1b6 <CONFIG_SYS_CLOCK_MAX_TIMEOUT_DAYS+0x49>
	...

000003bc <event_manager_thread>:

void stop_event_manager(event_manager_t* event_manager) {
    k_thread_abort(event_manager->event_manager_tid);
}

void event_manager_thread(void* arg1, void* arg2, void* arg3) {
     3bc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
                    //     hid_event->message[2],
                    //     hid_event->message[3],
                    //     hid_event->message[4],
                    //     hid_event->message[5]
                    // );
                    int ret = hid_write(&usb, hid_event->message);
     3be:	4e14      	ldr	r6, [pc, #80]	; (410 <CONFIG_LOG_BUFFER_SIZE+0x10>)
void event_manager_thread(void* arg1, void* arg2, void* arg3) {
     3c0:	4604      	mov	r4, r0
		union { struct { uintptr_t lo, hi; } split; k_timeout_t val; } parm1 = { .val = timeout };
		return (int) arch_syscall_invoke3(parm0.x, parm1.split.lo, parm1.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
     3c2:	f04f 32ff 	mov.w	r2, #4294967295
     3c6:	f04f 33ff 	mov.w	r3, #4294967295
     3ca:	f104 008c 	add.w	r0, r4, #140	; 0x8c
     3ce:	f008 fd97 	bl	8f00 <z_impl_k_sem_take>
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	unsigned int tmp;

	__asm__ volatile(
     3d2:	f04f 0320 	mov.w	r3, #32
     3d6:	f3ef 8511 	mrs	r5, BASEPRI
     3da:	f383 8812 	msr	BASEPRI_MAX, r3
     3de:	f3bf 8f6f 	isb	sy
        while (!is_queue_empty(&event_manager->event_queue)) {
     3e2:	f894 307a 	ldrb.w	r3, [r4, #122]	; 0x7a
     3e6:	b923      	cbnz	r3, 3f2 <CONFIG_LOG_PROCESS_THREAD_SLEEP_MS+0xa>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
     3e8:	f385 8811 	msr	BASEPRI, r5
     3ec:	f3bf 8f6f 	isb	sy
    for(;;) {
     3f0:	e7e7      	b.n	3c2 <event_manager_thread+0x6>
            event_t event = dequeue_event(&event_manager->event_queue);
     3f2:	4621      	mov	r1, r4
     3f4:	a801      	add	r0, sp, #4
     3f6:	f009 fca6 	bl	9d46 <dequeue_event>
            switch (event.type) {
     3fa:	f89d 3004 	ldrb.w	r3, [sp, #4]
     3fe:	2b03      	cmp	r3, #3
     400:	d8ef      	bhi.n	3e2 <event_manager_thread+0x26>
                    int ret = hid_write(&usb, hid_event->message);
     402:	9902      	ldr	r1, [sp, #8]
     404:	3101      	adds	r1, #1
     406:	b2c9      	uxtb	r1, r1
     408:	4630      	mov	r0, r6
     40a:	f009 fcd0 	bl	9dae <hid_write>
                    if (ret) {
     40e:	e7e8      	b.n	3e2 <event_manager_thread+0x26>
     410:	20000b14 	.word	0x20000b14

00000414 <init_event_manager>:
void init_event_manager(event_manager_t* event_manager) {
     414:	b510      	push	{r4, lr}
     416:	b088      	sub	sp, #32
     418:	4604      	mov	r4, r0
    init_event_queue(&event_manager->event_queue);
     41a:	f009 fc8b 	bl	9d34 <init_event_queue>
	return z_impl_k_sem_init(sem, initial_count, limit);
     41e:	220a      	movs	r2, #10
     420:	2100      	movs	r1, #0
     422:	f104 008c 	add.w	r0, r4, #140	; 0x8c
     426:	f00b f8fb 	bl	b620 <z_impl_k_sem_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
     42a:	2200      	movs	r2, #0
     42c:	2300      	movs	r3, #0
     42e:	e9cd 2306 	strd	r2, r3, [sp, #24]
     432:	2300      	movs	r3, #0
     434:	f06f 0208 	mvn.w	r2, #8
     438:	e9cd 2303 	strd	r2, r3, [sp, #12]
     43c:	e9cd 3301 	strd	r3, r3, [sp, #4]
     440:	4908      	ldr	r1, [pc, #32]	; (464 <init_event_manager+0x50>)
     442:	4b09      	ldr	r3, [pc, #36]	; (468 <init_event_manager+0x54>)
     444:	9400      	str	r4, [sp, #0]
     446:	f44f 7200 	mov.w	r2, #512	; 0x200
     44a:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
     44e:	f008 fba5 	bl	8b9c <z_impl_k_thread_create>
    event_manager->event_manager_tid = k_thread_create(
     452:	f8c4 009c 	str.w	r0, [r4, #156]	; 0x9c
	return z_impl_k_thread_name_set(thread, str);
     456:	4905      	ldr	r1, [pc, #20]	; (46c <init_event_manager+0x58>)
}
     458:	b008      	add	sp, #32
     45a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     45e:	f00b b84b 	b.w	b4f8 <z_impl_k_thread_name_set>
     462:	bf00      	nop
     464:	20001ee0 	.word	0x20001ee0
     468:	000003bd 	.word	0x000003bd
     46c:	0000c1a4 	.word	0x0000c1a4

00000470 <main>:
pmw3360_device pmw3360_dev;
FSM_Data fsm;


void main(void)
{
     470:	b508      	push	{r3, lr}
	return z_impl_k_sleep(timeout);
     472:	2100      	movs	r1, #0
     474:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     478:	f009 f9b0 	bl	97dc <z_impl_k_sleep>
     47c:	2100      	movs	r1, #0
     47e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
     482:	f009 f9ab 	bl	97dc <z_impl_k_sleep>
	// fsm.state = INIT_MODE;
	// init_usb(&usb);
	// init_pmw3360();
	// run_fsm(&fsm);
	k_sleep(K_MSEC(1000));
	init_event_manager(&manager);
     486:	4806      	ldr	r0, [pc, #24]	; (4a0 <main+0x30>)
     488:	f7ff ffc4 	bl	414 <init_event_manager>
	start_event_manager(&manager);
     48c:	4804      	ldr	r0, [pc, #16]	; (4a0 <main+0x30>)
     48e:	f009 fc79 	bl	9d84 <start_event_manager>

	motion_thread();
     492:	f009 fc86 	bl	9da2 <motion_thread>
     496:	2100      	movs	r1, #0
     498:	2021      	movs	r0, #33	; 0x21
     49a:	f009 f99f 	bl	97dc <z_impl_k_sleep>

	for (;;) {
     49e:	e7fa      	b.n	496 <main+0x26>
     4a0:	20000248 	.word	0x20000248

000004a4 <get_pmw3360_device>:
#include <zephyr/logging/log.h>
#include "structs.h"

LOG_MODULE_REGISTER(pmw3360_custom, CONFIG_LOG_DEFAULT_LEVEL);

const struct device *get_pmw3360_device(void) {
     4a4:	b5b0      	push	{r4, r5, r7, lr}
     4a6:	af00      	add	r7, sp, #0
     4a8:	4c17      	ldr	r4, [pc, #92]	; (508 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x20>)
     4aa:	4620      	mov	r0, r4
     4ac:	f00a ffe7 	bl	b47e <z_device_is_ready>
		LOG_ERR("Could not get %s device\n", DEVICE_DT_GET_ANY(pixart_pmw3360));
		return NULL;
	}
	
	if (!device_is_ready(dev)) {
		LOG_ERR("\nError: Device \"%s\" is not ready; "
     4b0:	6823      	ldr	r3, [r4, #0]
	if (!device_is_ready(dev)) {
     4b2:	4605      	mov	r5, r0
     4b4:	b9a0      	cbnz	r0, 4e0 <get_pmw3360_device+0x3c>
		LOG_ERR("\nError: Device \"%s\" is not ready; "
     4b6:	4915      	ldr	r1, [pc, #84]	; (50c <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x24>)
     4b8:	466c      	mov	r4, sp
     4ba:	b088      	sub	sp, #32
     4bc:	466a      	mov	r2, sp
     4be:	e9c2 1305 	strd	r1, r3, [r2, #20]
     4c2:	2302      	movs	r3, #2
     4c4:	7713      	strb	r3, [r2, #28]
     4c6:	4b12      	ldr	r3, [pc, #72]	; (510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>)
     4c8:	f842 3f10 	str.w	r3, [r2, #16]!
		(void) arch_syscall_invoke4(parm0.x, parm1.x, parm2.x, parm3.x, K_SYSCALL_Z_LOG_MSG2_STATIC_CREATE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_static_create(source, desc, package, data);
     4cc:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
     4d0:	4603      	mov	r3, r0
     4d2:	4810      	ldr	r0, [pc, #64]	; (514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>)
     4d4:	f00a fa9d 	bl	aa12 <z_impl_z_log_msg2_static_create>
		       "check the driver initialization logs for errors.\n",
		       dev->name);
		return NULL;
     4d8:	4628      	mov	r0, r5
     4da:	46a5      	mov	sp, r4
	}
	LOG_INF("Found device \"%s\", getting sensor data\n", dev->name);
	return dev;
}
     4dc:	46bd      	mov	sp, r7
     4de:	bdb0      	pop	{r4, r5, r7, pc}
	LOG_INF("Found device \"%s\", getting sensor data\n", dev->name);
     4e0:	490d      	ldr	r1, [pc, #52]	; (518 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x30>)
     4e2:	466d      	mov	r5, sp
     4e4:	b088      	sub	sp, #32
     4e6:	466a      	mov	r2, sp
     4e8:	e9c2 1305 	strd	r1, r3, [r2, #20]
     4ec:	2302      	movs	r3, #2
     4ee:	7713      	strb	r3, [r2, #28]
     4f0:	4b07      	ldr	r3, [pc, #28]	; (510 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x28>)
     4f2:	f842 3f10 	str.w	r3, [r2, #16]!
     4f6:	4807      	ldr	r0, [pc, #28]	; (514 <CONFIG_NRF_MODEM_SHMEM_CTRL_SIZE+0x2c>)
     4f8:	2300      	movs	r3, #0
     4fa:	f44f 51d6 	mov.w	r1, #6848	; 0x1ac0
     4fe:	f00a fa88 	bl	aa12 <z_impl_z_log_msg2_static_create>
	return dev;
     502:	4620      	mov	r0, r4
     504:	46ad      	mov	sp, r5
     506:	e7e9      	b.n	4dc <get_pmw3360_device+0x38>
     508:	0000bc58 	.word	0x0000bc58
     50c:	0000c1c8 	.word	0x0000c1c8
     510:	01000003 	.word	0x01000003
     514:	0000be18 	.word	0x0000be18
     518:	0000c21c 	.word	0x0000c21c

0000051c <init_pmw3360>:
    //         break;
    // }
    k_spin_unlock(&pmw3360_dev.state.lock, key);
}

void init_pmw3360(void) {
     51c:	b508      	push	{r3, lr}
    // set up pmw3360 device;
    pmw3360_dev.device = get_pmw3360_device();
     51e:	f7ff ffc1 	bl	4a4 <get_pmw3360_device>
     522:	4b08      	ldr	r3, [pc, #32]	; (544 <init_pmw3360+0x28>)
     524:	6118      	str	r0, [r3, #16]
	__asm__ volatile(
     526:	f04f 0120 	mov.w	r1, #32
     52a:	f3ef 8211 	mrs	r2, BASEPRI
     52e:	f381 8812 	msr	BASEPRI_MAX, r1
     532:	f3bf 8f6f 	isb	sy
    k_spinlock_key_t key = k_spin_lock(&pmw3360_dev.state.lock);
    pmw3360_dev.state.state = PMW3360_IDLE;
     536:	2102      	movs	r1, #2
     538:	7619      	strb	r1, [r3, #24]
	__asm__ volatile(
     53a:	f382 8811 	msr	BASEPRI, r2
     53e:	f3bf 8f6f 	isb	sy
    k_spin_unlock(&pmw3360_dev.state.lock, key);
    enable_trigger(pmw3360_dev.device);
}
     542:	bd08      	pop	{r3, pc}
     544:	20000af8 	.word	0x20000af8

00000548 <read_motion>:
int fetch_pmw3360_data(const struct device *pmw3360) {
    int rc = sensor_sample_fetch(pmw3360);
    return rc;
}

void read_motion(void) {
     548:	b598      	push	{r3, r4, r7, lr}
    int16_t dx;
    int16_t dy;

    int rc = fetch_pmw3360_data(pmw3360_dev.device);
     54a:	4c12      	ldr	r4, [pc, #72]	; (594 <read_motion+0x4c>)
void read_motion(void) {
     54c:	af00      	add	r7, sp, #0
    int rc = fetch_pmw3360_data(pmw3360_dev.device);
     54e:	6920      	ldr	r0, [r4, #16]
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
     550:	6883      	ldr	r3, [r0, #8]
     552:	2139      	movs	r1, #57	; 0x39
     554:	68db      	ldr	r3, [r3, #12]
     556:	4798      	blx	r3
    if (!rc) {
     558:	b928      	cbnz	r0, 566 <read_motion+0x1e>
        dx = get_dx(pmw3360_dev.device);
     55a:	6920      	ldr	r0, [r4, #16]
     55c:	f009 fc16 	bl	9d8c <get_dx>
        dy = get_dx(pmw3360_dev.device);
     560:	6920      	ldr	r0, [r4, #16]
     562:	f009 fc13 	bl	9d8c <get_dx>
    }

    LOG_DBG("dx: %i, dy: %i");
     566:	466c      	mov	r4, sp
     568:	b088      	sub	sp, #32
     56a:	466a      	mov	r2, sp
     56c:	4b0a      	ldr	r3, [pc, #40]	; (598 <read_motion+0x50>)
     56e:	6153      	str	r3, [r2, #20]
     570:	4b0a      	ldr	r3, [pc, #40]	; (59c <read_motion+0x54>)
     572:	6193      	str	r3, [r2, #24]
     574:	2303      	movs	r3, #3
     576:	f842 3f10 	str.w	r3, [r2, #16]!
     57a:	4809      	ldr	r0, [pc, #36]	; (5a0 <read_motion+0x58>)
     57c:	2300      	movs	r3, #0
     57e:	f44f 51c8 	mov.w	r1, #6400	; 0x1900
     582:	f00a fa46 	bl	aa12 <z_impl_z_log_msg2_static_create>
     586:	46a5      	mov	sp, r4
     588:	2100      	movs	r1, #0
     58a:	2021      	movs	r0, #33	; 0x21
     58c:	f009 f926 	bl	97dc <z_impl_k_sleep>

    // event_t event = create_motion_event(&motion_event);

    // enqueue_event(&manager.event_queue, event);
    // k_sem_give(&manager.event_sem);
}
     590:	46bd      	mov	sp, r7
     592:	bd98      	pop	{r3, r4, r7, pc}
     594:	20000af8 	.word	0x20000af8
     598:	0000c244 	.word	0x0000c244
     59c:	0000c266 	.word	0x0000c266
     5a0:	0000be18 	.word	0x0000be18

000005a4 <cbvprintf_package>:
	return z_strncpy(buf, str, max);
}

int cbvprintf_package(void *packaged, size_t len, uint32_t flags,
		      const char *fmt, va_list ap)
{
     5a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     5a8:	b08d      	sub	sp, #52	; 0x34
     5aa:	461f      	mov	r7, r3
     5ac:	9b16      	ldr	r3, [sp, #88]	; 0x58
     5ae:	9202      	str	r2, [sp, #8]
     5b0:	9300      	str	r3, [sp, #0]
	const char *s;
	bool parsing = false;
	/* Flag indicates that rw strings are stored as array with positions,
	 * instead of appending them to the package.
	 */
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     5b2:	f002 0304 	and.w	r3, r2, #4
	/* Get number of first read only strings present in the string.
	 * There is always at least 1 (fmt) but flags can indicate more, e.g
	 * fixed prefix appended to all strings.
	 */
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     5b6:	f3c2 02c2 	ubfx	r2, r2, #3, #3
	bool rws_pos_en = !!(flags & CBPRINTF_PACKAGE_ADD_RW_STR_POS);
     5ba:	9301      	str	r3, [sp, #4]
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     5bc:	1c53      	adds	r3, r2, #1

	/* Buffer must be aligned at least to size of a pointer. */
	if ((uintptr_t)packaged % sizeof(void *)) {
     5be:	0782      	lsls	r2, r0, #30
{
     5c0:	4605      	mov	r5, r0
     5c2:	460e      	mov	r6, r1
	int fros_cnt = 1 + Z_CBPRINTF_PACKAGE_FIRST_RO_STR_CNT_GET(flags);
     5c4:	9304      	str	r3, [sp, #16]
	if ((uintptr_t)packaged % sizeof(void *)) {
     5c6:	f040 8221 	bne.w	a0c <CONFIG_ISR_STACK_SIZE+0x20c>
	 *
	 * Given the next value to store is the format string pointer
	 * which is guaranteed to be at least 4 bytes, we just reserve
	 * a pointer size for the above to preserve alignment.
	 */
	buf += sizeof(char *);
     5ca:	1d04      	adds	r4, r0, #4
	 * When buf0 is NULL we don't store anything.
	 * Instead we count the needed space to store the data.
	 * In this case, incoming len argument indicates the anticipated
	 * buffer "misalignment" offset.
	 */
	if (buf0 == NULL) {
     5cc:	2800      	cmp	r0, #0
     5ce:	f040 8220 	bne.w	a12 <CONFIG_ISR_STACK_SIZE+0x212>
		buf += len % CBPRINTF_PACKAGE_ALIGNMENT;
     5d2:	f001 0607 	and.w	r6, r1, #7
     5d6:	1d34      	adds	r4, r6, #4
		 * the total as this won't be part of the buffer. To avoid
		 * going negative with an unsigned variable, we add an offset
		 * (CBPRINTF_PACKAGE_ALIGNMENT) that will be removed before
		 * returning.
		 */
		len = CBPRINTF_PACKAGE_ALIGNMENT - (len % CBPRINTF_PACKAGE_ALIGNMENT);
     5d8:	f1c6 0608 	rsb	r6, r6, #8
	unsigned int s_ro_cnt = 0; /* number of ro strings */
     5dc:	f04f 0a00 	mov.w	sl, #0
	 * which is in the middle of the following while() loop. That's the
	 * reason for the post-decrement on fmt as it will be incremented
	 * prior to the next (actually first) round of that loop.
	 */
	s = fmt--;
	align = VA_STACK_ALIGN(char *);
     5e0:	f04f 0804 	mov.w	r8, #4
	s = fmt--;
     5e4:	1e7b      	subs	r3, r7, #1
	unsigned int s_rw_cnt = 0; /* number of rw strings */
     5e6:	f8cd a00c 	str.w	sl, [sp, #12]
	unsigned int s_idx = 0;    /* index into str_ptr_pos[] */
     5ea:	4652      	mov	r2, sl
	bool parsing = false;
     5ec:	46d1      	mov	r9, sl
	size = sizeof(char *);
     5ee:	4641      	mov	r1, r8

		/* copy va_list data over to our buffer */
		if (*fmt == 's') {
			s = va_arg(ap, char *);
process_string:
			if (buf0 != NULL) {
     5f0:	b105      	cbz	r5, 5f4 <cbvprintf_package+0x50>
				*(const char **)buf = s;
     5f2:	6027      	str	r7, [r4, #0]
			}

			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     5f4:	9804      	ldr	r0, [sp, #16]
     5f6:	2800      	cmp	r0, #0
     5f8:	dc07      	bgt.n	60a <cbvprintf_package+0x66>
#else
	#define RO_START 0
	#define RO_END 0
#endif

	return (((const char *)addr >= (const char *)RO_START) &&
     5fa:	48cb      	ldr	r0, [pc, #812]	; (928 <CONFIG_ISR_STACK_SIZE+0x128>)
     5fc:	4287      	cmp	r7, r0
     5fe:	f0c0 8141 	bcc.w	884 <CONFIG_ISR_STACK_SIZE+0x84>
     602:	48ca      	ldr	r0, [pc, #808]	; (92c <CONFIG_ISR_STACK_SIZE+0x12c>)
     604:	4287      	cmp	r7, r0
     606:	f080 813d 	bcs.w	884 <CONFIG_ISR_STACK_SIZE+0x84>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);

			if (is_ro && !do_ro) {
     60a:	9802      	ldr	r0, [sp, #8]
     60c:	f010 0e02 	ands.w	lr, r0, #2
     610:	f000 8151 	beq.w	8b6 <CONFIG_ISR_STACK_SIZE+0xb6>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     614:	f04f 0c01 	mov.w	ip, #1
				/* nothing to do */
			} else {
				uint32_t s_ptr_idx = BUF_OFFSET / sizeof(int);
     618:	1b60      	subs	r0, r4, r5
				 * In the do_ro case we must consider
				 * room for possible STR_POS_RO_FLAG.
				 * Otherwise the index range is 8 bits
				 * and any overflow is caught later.
				 */
				if (do_ro && s_ptr_idx > STR_POS_MASK) {
     61a:	f1be 0f00 	cmp.w	lr, #0
     61e:	f000 8137 	beq.w	890 <CONFIG_ISR_STACK_SIZE+0x90>
     622:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
     626:	f0c0 8133 	bcc.w	890 <CONFIG_ISR_STACK_SIZE+0x90>
					__ASSERT(false, "String with too many arguments");
					return -EINVAL;
     62a:	f06f 0015 	mvn.w	r0, #21
     62e:	e0fe      	b.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
		if (!parsing) {
     630:	f1b9 0f00 	cmp.w	r9, #0
     634:	d108      	bne.n	648 <CONFIG_PMW3360_CPI+0x8>
			if (*fmt == '%') {
     636:	2825      	cmp	r0, #37	; 0x25
     638:	f040 8141 	bne.w	8be <CONFIG_ISR_STACK_SIZE+0xbe>
				parsing = true;
     63c:	f04f 0901 	mov.w	r9, #1
			align = VA_STACK_ALIGN(ptrdiff_t);
     640:	f04f 0804 	mov.w	r8, #4
			size = sizeof(intmax_t);
     644:	4641      	mov	r1, r8
     646:	e13a      	b.n	8be <CONFIG_ISR_STACK_SIZE+0xbe>
		switch (*fmt) {
     648:	282b      	cmp	r0, #43	; 0x2b
     64a:	d825      	bhi.n	698 <CONFIG_PMW3360_CPI+0x58>
     64c:	281f      	cmp	r0, #31
     64e:	d802      	bhi.n	656 <CONFIG_PMW3360_CPI+0x16>
			parsing = false;
     650:	f04f 0900 	mov.w	r9, #0
     654:	e133      	b.n	8be <CONFIG_ISR_STACK_SIZE+0xbe>
		switch (*fmt) {
     656:	f1a0 0c20 	sub.w	ip, r0, #32
     65a:	f1bc 0f0b 	cmp.w	ip, #11
     65e:	d8f7      	bhi.n	650 <CONFIG_PMW3360_CPI+0x10>
     660:	f20f 0e04 	addw	lr, pc, #4
     664:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
     668:	000008bf 	.word	0x000008bf
     66c:	00000651 	.word	0x00000651
     670:	00000651 	.word	0x00000651
     674:	000008bf 	.word	0x000008bf
     678:	00000651 	.word	0x00000651
     67c:	00000651 	.word	0x00000651
     680:	00000651 	.word	0x00000651
     684:	00000651 	.word	0x00000651
     688:	00000651 	.word	0x00000651
     68c:	00000651 	.word	0x00000651
     690:	0000084f 	.word	0x0000084f
     694:	000008bf 	.word	0x000008bf
     698:	f1a0 0c2d 	sub.w	ip, r0, #45	; 0x2d
     69c:	fa5f fe8c 	uxtb.w	lr, ip
     6a0:	f1be 0f4d 	cmp.w	lr, #77	; 0x4d
     6a4:	d8d4      	bhi.n	650 <CONFIG_PMW3360_CPI+0x10>
     6a6:	f1bc 0f4d 	cmp.w	ip, #77	; 0x4d
     6aa:	d8d1      	bhi.n	650 <CONFIG_PMW3360_CPI+0x10>
     6ac:	f20f 0e04 	addw	lr, pc, #4
     6b0:	f85e f02c 	ldr.w	pc, [lr, ip, lsl #2]
     6b4:	000008bf 	.word	0x000008bf
     6b8:	000008bf 	.word	0x000008bf
     6bc:	00000651 	.word	0x00000651
     6c0:	000008bf 	.word	0x000008bf
     6c4:	000008bf 	.word	0x000008bf
     6c8:	000008bf 	.word	0x000008bf
     6cc:	000008bf 	.word	0x000008bf
     6d0:	000008bf 	.word	0x000008bf
     6d4:	000008bf 	.word	0x000008bf
     6d8:	000008bf 	.word	0x000008bf
     6dc:	000008bf 	.word	0x000008bf
     6e0:	000008bf 	.word	0x000008bf
     6e4:	000008bf 	.word	0x000008bf
     6e8:	00000651 	.word	0x00000651
     6ec:	00000651 	.word	0x00000651
     6f0:	00000651 	.word	0x00000651
     6f4:	00000651 	.word	0x00000651
     6f8:	00000651 	.word	0x00000651
     6fc:	00000651 	.word	0x00000651
     700:	00000651 	.word	0x00000651
     704:	0000080b 	.word	0x0000080b
     708:	00000651 	.word	0x00000651
     70c:	00000651 	.word	0x00000651
     710:	00000651 	.word	0x00000651
     714:	0000080b 	.word	0x0000080b
     718:	0000080b 	.word	0x0000080b
     71c:	0000080b 	.word	0x0000080b
     720:	00000651 	.word	0x00000651
     724:	00000651 	.word	0x00000651
     728:	00000651 	.word	0x00000651
     72c:	00000651 	.word	0x00000651
     730:	000008bf 	.word	0x000008bf
     734:	00000651 	.word	0x00000651
     738:	00000651 	.word	0x00000651
     73c:	00000651 	.word	0x00000651
     740:	00000651 	.word	0x00000651
     744:	00000651 	.word	0x00000651
     748:	00000651 	.word	0x00000651
     74c:	00000651 	.word	0x00000651
     750:	00000651 	.word	0x00000651
     754:	00000651 	.word	0x00000651
     758:	00000651 	.word	0x00000651
     75c:	00000651 	.word	0x00000651
     760:	000007ed 	.word	0x000007ed
     764:	00000651 	.word	0x00000651
     768:	00000651 	.word	0x00000651
     76c:	00000651 	.word	0x00000651
     770:	00000651 	.word	0x00000651
     774:	00000651 	.word	0x00000651
     778:	00000651 	.word	0x00000651
     77c:	00000651 	.word	0x00000651
     780:	00000651 	.word	0x00000651
     784:	0000080b 	.word	0x0000080b
     788:	00000651 	.word	0x00000651
     78c:	000007ed 	.word	0x000007ed
     790:	000007ed 	.word	0x000007ed
     794:	0000080b 	.word	0x0000080b
     798:	0000080b 	.word	0x0000080b
     79c:	0000080b 	.word	0x0000080b
     7a0:	000008bf 	.word	0x000008bf
     7a4:	000007ed 	.word	0x000007ed
     7a8:	0000083f 	.word	0x0000083f
     7ac:	00000651 	.word	0x00000651
     7b0:	000008bf 	.word	0x000008bf
     7b4:	00000651 	.word	0x00000651
     7b8:	00000845 	.word	0x00000845
     7bc:	000007ed 	.word	0x000007ed
     7c0:	00000845 	.word	0x00000845
     7c4:	00000651 	.word	0x00000651
     7c8:	00000651 	.word	0x00000651
     7cc:	00000845 	.word	0x00000845
     7d0:	00000641 	.word	0x00000641
     7d4:	000007ed 	.word	0x000007ed
     7d8:	00000651 	.word	0x00000651
     7dc:	00000651 	.word	0x00000651
     7e0:	000007ed 	.word	0x000007ed
     7e4:	00000651 	.word	0x00000651
     7e8:	00000641 	.word	0x00000641
			if (fmt[-1] == 'l') {
     7ec:	f813 cc01 	ldrb.w	ip, [r3, #-1]
     7f0:	f1bc 0f6c 	cmp.w	ip, #108	; 0x6c
     7f4:	d129      	bne.n	84a <CONFIG_ISR_STACK_SIZE+0x4a>
				if (fmt[-2] == 'l') {
     7f6:	f813 1c02 	ldrb.w	r1, [r3, #-2]
     7fa:	296c      	cmp	r1, #108	; 0x6c
			parsing = false;
     7fc:	f04f 0900 	mov.w	r9, #0
				if (fmt[-2] == 'l') {
     800:	d03d      	beq.n	87e <CONFIG_ISR_STACK_SIZE+0x7e>
			align = VA_STACK_ALIGN(void *);
     802:	f04f 0804 	mov.w	r8, #4
					size = sizeof(long long);
     806:	4641      	mov	r1, r8
     808:	e021      	b.n	84e <CONFIG_ISR_STACK_SIZE+0x4e>
				v.ld = va_arg(ap, long double);
     80a:	9800      	ldr	r0, [sp, #0]
     80c:	f100 0b07 	add.w	fp, r0, #7
     810:	f02b 0007 	bic.w	r0, fp, #7
     814:	e8f0 8902 	ldrd	r8, r9, [r0], #8
			buf = (void *) ROUND_UP(buf, align);
     818:	3407      	adds	r4, #7
				v.ld = va_arg(ap, long double);
     81a:	9000      	str	r0, [sp, #0]
			buf = (void *) ROUND_UP(buf, align);
     81c:	f024 0407 	bic.w	r4, r4, #7
			if (buf0 != NULL) {
     820:	b155      	cbz	r5, 838 <CONFIG_ISR_STACK_SIZE+0x38>
				if (BUF_OFFSET + size > len) {
     822:	9805      	ldr	r0, [sp, #20]
     824:	4420      	add	r0, r4
     826:	42b0      	cmp	r0, r6
     828:	d904      	bls.n	834 <CONFIG_ISR_STACK_SIZE+0x34>
					return -ENOSPC;
     82a:	f06f 001b 	mvn.w	r0, #27
	return BUF_OFFSET;

#undef BUF_OFFSET
#undef STR_POS_RO_FLAG
#undef STR_POS_MASK
}
     82e:	b00d      	add	sp, #52	; 0x34
     830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
					*(long double *)buf = v.ld;
     834:	e9c4 8900 	strd	r8, r9, [r4]
			buf += size;
     838:	3408      	adds	r4, #8
			parsing = false;
     83a:	f04f 0900 	mov.w	r9, #0
			align = VA_STACK_ALIGN(intmax_t);
     83e:	f04f 0808 	mov.w	r8, #8
     842:	e6ff      	b.n	644 <CONFIG_PMW3360_CPI+0x4>
			parsing = false;
     844:	f04f 0900 	mov.w	r9, #0
     848:	e7db      	b.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
			parsing = false;
     84a:	f04f 0900 	mov.w	r9, #0
		buf = (void *) ROUND_UP(buf, align);
     84e:	3c01      	subs	r4, #1
     850:	4444      	add	r4, r8
     852:	f1c8 0c00 	rsb	ip, r8, #0
     856:	ea04 040c 	and.w	r4, r4, ip
		if (buf0 != NULL && BUF_OFFSET + size > len) {
     85a:	b125      	cbz	r5, 866 <CONFIG_ISR_STACK_SIZE+0x66>
     85c:	eba1 0c05 	sub.w	ip, r1, r5
     860:	44a4      	add	ip, r4
     862:	45b4      	cmp	ip, r6
     864:	d8e1      	bhi.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
		if (*fmt == 's') {
     866:	2873      	cmp	r0, #115	; 0x73
     868:	d152      	bne.n	910 <CONFIG_ISR_STACK_SIZE+0x110>
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     86a:	9804      	ldr	r0, [sp, #16]
			s = va_arg(ap, char *);
     86c:	f8dd b000 	ldr.w	fp, [sp]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     870:	3801      	subs	r0, #1
			s = va_arg(ap, char *);
     872:	f85b 7b04 	ldr.w	r7, [fp], #4
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     876:	9004      	str	r0, [sp, #16]
			s = va_arg(ap, char *);
     878:	f8cd b000 	str.w	fp, [sp]
     87c:	e6b8      	b.n	5f0 <cbvprintf_package+0x4c>
					align = VA_STACK_ALIGN(long long);
     87e:	f04f 0808 	mov.w	r8, #8
     882:	e7c0      	b.n	806 <CONFIG_ISR_STACK_SIZE+0x6>
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     884:	9802      	ldr	r0, [sp, #8]
			bool is_ro = (fros_cnt-- > 0) ? true : ptr_in_rodata(s);
     886:	f04f 0c00 	mov.w	ip, #0
			bool do_ro = !!(flags & CBPRINTF_PACKAGE_ADD_RO_STR_POS);
     88a:	f000 0e02 	and.w	lr, r0, #2
			if (is_ro && !do_ro) {
     88e:	e6c3      	b.n	618 <cbvprintf_package+0x74>
				if (s_idx >= ARRAY_SIZE(str_ptr_pos)) {
     890:	2a0f      	cmp	r2, #15
     892:	f63f aeca 	bhi.w	62a <cbvprintf_package+0x86>
				if (buf0 != NULL) {
     896:	b345      	cbz	r5, 8ea <CONFIG_ISR_STACK_SIZE+0xea>
					str_ptr_pos[s_idx] = s_ptr_idx;
     898:	f10d 0e30 	add.w	lr, sp, #48	; 0x30
     89c:	f3c0 0087 	ubfx	r0, r0, #2, #8
					if (is_ro) {
     8a0:	4496      	add	lr, r2
     8a2:	f1bc 0f00 	cmp.w	ip, #0
     8a6:	d01a      	beq.n	8de <CONFIG_ISR_STACK_SIZE+0xde>
						str_ptr_pos[s_idx] |= STR_POS_RO_FLAG;
     8a8:	f060 007f 	orn	r0, r0, #127	; 0x7f
     8ac:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_ro_cnt++;
     8b0:	f10a 0a01 	add.w	sl, sl, #1
				s_idx++;
     8b4:	3201      	adds	r2, #1
				if (BUF_OFFSET + size > len) {
     8b6:	f1c5 0008 	rsb	r0, r5, #8
			buf += sizeof(char *);
     8ba:	3404      	adds	r4, #4
				if (BUF_OFFSET + size > len) {
     8bc:	9005      	str	r0, [sp, #20]
	while (*++fmt != '\0') {
     8be:	f813 0f01 	ldrb.w	r0, [r3, #1]!
     8c2:	2800      	cmp	r0, #0
     8c4:	f47f aeb4 	bne.w	630 <cbvprintf_package+0x8c>
	if (BUF_OFFSET / sizeof(int) > 255) {
     8c8:	1b61      	subs	r1, r4, r5
     8ca:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
     8ce:	f4bf aeac 	bcs.w	62a <cbvprintf_package+0x86>
	if (buf0 == NULL) {
     8d2:	2d00      	cmp	r5, #0
     8d4:	d13e      	bne.n	954 <CONFIG_ISR_STACK_SIZE+0x154>
		return BUF_OFFSET + len - CBPRINTF_PACKAGE_ALIGNMENT;
     8d6:	f1a6 0408 	sub.w	r4, r6, #8
     8da:	1860      	adds	r0, r4, r1
     8dc:	e7a7      	b.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
					str_ptr_pos[s_idx] = s_ptr_idx;
     8de:	f80e 0c10 	strb.w	r0, [lr, #-16]
						s_rw_cnt++;
     8e2:	9803      	ldr	r0, [sp, #12]
     8e4:	3001      	adds	r0, #1
     8e6:	9003      	str	r0, [sp, #12]
     8e8:	e7e4      	b.n	8b4 <CONFIG_ISR_STACK_SIZE+0xb4>
				} else if (is_ro || rws_pos_en) {
     8ea:	f1bc 0f00 	cmp.w	ip, #0
     8ee:	d101      	bne.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     8f0:	9801      	ldr	r0, [sp, #4]
     8f2:	b108      	cbz	r0, 8f8 <CONFIG_ISR_STACK_SIZE+0xf8>
					len += 1;
     8f4:	3601      	adds	r6, #1
     8f6:	e7dd      	b.n	8b4 <CONFIG_ISR_STACK_SIZE+0xb4>
					len += strlen(s) + 1 + 1;
     8f8:	4638      	mov	r0, r7
     8fa:	e9cd 1206 	strd	r1, r2, [sp, #24]
     8fe:	9305      	str	r3, [sp, #20]
     900:	f00a f930 	bl	ab64 <strlen>
     904:	3602      	adds	r6, #2
     906:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
     90a:	9b05      	ldr	r3, [sp, #20]
     90c:	4406      	add	r6, r0
     90e:	e7d1      	b.n	8b4 <CONFIG_ISR_STACK_SIZE+0xb4>
		} else if (size == sizeof(int)) {
     910:	2904      	cmp	r1, #4
     912:	d10d      	bne.n	930 <CONFIG_ISR_STACK_SIZE+0x130>
			int v = va_arg(ap, int);
     914:	9800      	ldr	r0, [sp, #0]
     916:	f100 0c04 	add.w	ip, r0, #4
			if (buf0 != NULL) {
     91a:	b10d      	cbz	r5, 920 <CONFIG_ISR_STACK_SIZE+0x120>
			int v = va_arg(ap, int);
     91c:	6800      	ldr	r0, [r0, #0]
				*(int *)buf = v;
     91e:	6020      	str	r0, [r4, #0]
			buf += sizeof(int);
     920:	3404      	adds	r4, #4
			int v = va_arg(ap, int);
     922:	f8cd c000 	str.w	ip, [sp]
     926:	e7ca      	b.n	8be <CONFIG_ISR_STACK_SIZE+0xbe>
     928:	0000bb38 	.word	0x0000bb38
     92c:	0000e448 	.word	0x0000e448
		} else if (size == sizeof(long long)) {
     930:	2908      	cmp	r1, #8
     932:	f47f ae7a 	bne.w	62a <cbvprintf_package+0x86>
			long long v = va_arg(ap, long long);
     936:	9800      	ldr	r0, [sp, #0]
     938:	3007      	adds	r0, #7
     93a:	f020 0007 	bic.w	r0, r0, #7
     93e:	f100 0c08 	add.w	ip, r0, #8
     942:	f8cd c000 	str.w	ip, [sp]
			if (buf0 != NULL) {
     946:	b11d      	cbz	r5, 950 <CONFIG_ISR_STACK_SIZE+0x150>
			long long v = va_arg(ap, long long);
     948:	e9d0 bc00 	ldrd	fp, ip, [r0]
     94c:	e9c4 bc00 	strd	fp, ip, [r4]
			buf += sizeof(long long);
     950:	3408      	adds	r4, #8
     952:	e7b4      	b.n	8be <CONFIG_ISR_STACK_SIZE+0xbe>
	if (rws_pos_en) {
     954:	9b01      	ldr	r3, [sp, #4]
	*(char **)buf0 = NULL;
     956:	6028      	str	r0, [r5, #0]
	buf0[0] = BUF_OFFSET / sizeof(int);
     958:	0889      	lsrs	r1, r1, #2
     95a:	7029      	strb	r1, [r5, #0]
		buf0[3] = s_rw_cnt;
     95c:	f89d 100c 	ldrb.w	r1, [sp, #12]
	if (rws_pos_en) {
     960:	b1a3      	cbz	r3, 98c <CONFIG_ISR_STACK_SIZE+0x18c>
		buf0[1] = 0;
     962:	7068      	strb	r0, [r5, #1]
		buf0[3] = s_rw_cnt;
     964:	70e9      	strb	r1, [r5, #3]
	buf0[2] = s_ro_cnt;
     966:	f885 a002 	strb.w	sl, [r5, #2]
	if (s_ro_cnt) {
     96a:	f1ba 0f00 	cmp.w	sl, #0
     96e:	d006      	beq.n	97e <CONFIG_ISR_STACK_SIZE+0x17e>
     970:	a808      	add	r0, sp, #32
		for (i = 0; i < s_idx; i++) {
     972:	f04f 0c00 	mov.w	ip, #0
			if (BUF_OFFSET + 1 > len) {
     976:	f1c5 0e01 	rsb	lr, r5, #1
		for (i = 0; i < s_idx; i++) {
     97a:	4562      	cmp	r2, ip
     97c:	d10a      	bne.n	994 <CONFIG_ISR_STACK_SIZE+0x194>
     97e:	f10d 0820 	add.w	r8, sp, #32
     982:	eb08 0902 	add.w	r9, r8, r2
		if (BUF_OFFSET + 1 + size > len) {
     986:	f1c5 0b01 	rsb	fp, r5, #1
     98a:	e039      	b.n	a00 <CONFIG_ISR_STACK_SIZE+0x200>
		buf0[3] = 0;
     98c:	9b01      	ldr	r3, [sp, #4]
		buf0[1] = s_rw_cnt;
     98e:	7069      	strb	r1, [r5, #1]
		buf0[3] = 0;
     990:	70eb      	strb	r3, [r5, #3]
     992:	e7e8      	b.n	966 <CONFIG_ISR_STACK_SIZE+0x166>
			if (!(str_ptr_pos[i] & STR_POS_RO_FLAG)) {
     994:	f810 1b01 	ldrb.w	r1, [r0], #1
     998:	060b      	lsls	r3, r1, #24
     99a:	d508      	bpl.n	9ae <CONFIG_ISR_STACK_SIZE+0x1ae>
			if (BUF_OFFSET + 1 > len) {
     99c:	eb04 080e 	add.w	r8, r4, lr
     9a0:	45b0      	cmp	r8, r6
			uint8_t pos = str_ptr_pos[i] & STR_POS_MASK;
     9a2:	f001 017f 	and.w	r1, r1, #127	; 0x7f
			if (BUF_OFFSET + 1 > len) {
     9a6:	f63f af40 	bhi.w	82a <CONFIG_ISR_STACK_SIZE+0x2a>
			*buf++ = pos;
     9aa:	f804 1b01 	strb.w	r1, [r4], #1
		for (i = 0; i < s_idx; i++) {
     9ae:	f10c 0c01 	add.w	ip, ip, #1
     9b2:	e7e2      	b.n	97a <CONFIG_ISR_STACK_SIZE+0x17a>
		if (s_ro_cnt && str_ptr_pos[i] & STR_POS_RO_FLAG) {
     9b4:	f1ba 0f00 	cmp.w	sl, #0
     9b8:	d003      	beq.n	9c2 <CONFIG_ISR_STACK_SIZE+0x1c2>
     9ba:	f998 2000 	ldrsb.w	r2, [r8]
     9be:	2a00      	cmp	r2, #0
     9c0:	db1c      	blt.n	9fc <CONFIG_ISR_STACK_SIZE+0x1fc>
		if (rws_pos_en) {
     9c2:	9b01      	ldr	r3, [sp, #4]
     9c4:	bb03      	cbnz	r3, a08 <CONFIG_ISR_STACK_SIZE+0x208>
			s = *(char **)(buf0 + str_ptr_pos[i] * sizeof(int));
     9c6:	f898 2000 	ldrb.w	r2, [r8]
     9ca:	f855 7022 	ldr.w	r7, [r5, r2, lsl #2]
			*(char **)(buf0 + str_ptr_pos[i] * sizeof(int)) = NULL;
     9ce:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
			size = strlen(s) + 1;
     9d2:	4638      	mov	r0, r7
     9d4:	f00a f8c6 	bl	ab64 <strlen>
     9d8:	1c42      	adds	r2, r0, #1
		if (BUF_OFFSET + 1 + size > len) {
     9da:	eb04 010b 	add.w	r1, r4, fp
     9de:	4411      	add	r1, r2
     9e0:	42b1      	cmp	r1, r6
     9e2:	f63f af22 	bhi.w	82a <CONFIG_ISR_STACK_SIZE+0x2a>
		*buf++ = str_ptr_pos[i];
     9e6:	f898 1000 	ldrb.w	r1, [r8]
     9ea:	f804 1b01 	strb.w	r1, [r4], #1
		memcpy(buf, s, size);
     9ee:	4639      	mov	r1, r7
     9f0:	4620      	mov	r0, r4
     9f2:	9200      	str	r2, [sp, #0]
     9f4:	f00a f8d2 	bl	ab9c <memcpy>
		buf += size;
     9f8:	9a00      	ldr	r2, [sp, #0]
     9fa:	4414      	add	r4, r2
	for (i = 0; i < s_idx; i++) {
     9fc:	f108 0801 	add.w	r8, r8, #1
     a00:	45c1      	cmp	r9, r8
     a02:	d1d7      	bne.n	9b4 <CONFIG_ISR_STACK_SIZE+0x1b4>
	return BUF_OFFSET;
     a04:	1b60      	subs	r0, r4, r5
     a06:	e712      	b.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
			size = 0;
     a08:	2200      	movs	r2, #0
     a0a:	e7e6      	b.n	9da <CONFIG_ISR_STACK_SIZE+0x1da>
		return -EFAULT;
     a0c:	f06f 000d 	mvn.w	r0, #13
     a10:	e70d      	b.n	82e <CONFIG_ISR_STACK_SIZE+0x2e>
	if (buf0 != NULL && BUF_OFFSET + sizeof(char *) > len) {
     a12:	2907      	cmp	r1, #7
     a14:	f63f ade2 	bhi.w	5dc <cbvprintf_package+0x38>
     a18:	e707      	b.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     a1a:	bf00      	nop

00000a1c <cbprintf_package_copy>:
			  void *packaged,
			  size_t len,
			  uint32_t flags,
			  uint16_t *strl,
			  size_t strl_len)
{
     a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     a20:	b08b      	sub	sp, #44	; 0x2c
     a22:	4606      	mov	r6, r0
     a24:	f8dd b050 	ldr.w	fp, [sp, #80]	; 0x50
     a28:	9304      	str	r3, [sp, #16]
     a2a:	4614      	mov	r4, r2
	uint32_t *buf32 = in_packaged;
	unsigned int args_size, ros_nbr, rws_nbr;
	bool rw_cpy;
	bool ro_cpy;

	in_len != 0 ? in_len : get_package_len(in_packaged);
     a2c:	460f      	mov	r7, r1
     a2e:	b1b1      	cbz	r1, a5e <cbprintf_package_copy+0x42>

	/* Get number of RO string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	ros_nbr = buf[2];
     a30:	78b5      	ldrb	r5, [r6, #2]
     a32:	9505      	str	r5, [sp, #20]
	ro_cpy = ros_nbr &&
     a34:	bb35      	cbnz	r5, a84 <cbprintf_package_copy+0x68>
     a36:	46aa      	mov	sl, r5
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;

	/* Get number of RW string indexes in the package and check if copying
	 * includes appending those strings.
	 */
	rws_nbr = buf[3];
     a38:	78f3      	ldrb	r3, [r6, #3]
     a3a:	9301      	str	r3, [sp, #4]
	rw_cpy = rws_nbr > 0 &&
     a3c:	b113      	cbz	r3, a44 <cbprintf_package_copy+0x28>

	/* If flags are not set or appending request without rw string indexes
	 * present is chosen, just do a simple copy (or length calculation).
	 * Assuming that it is the most common case.
	 */
	if (!rw_cpy && !ro_cpy) {
     a3e:	f01b 0f02 	tst.w	fp, #2
     a42:	d122      	bne.n	a8a <cbprintf_package_copy+0x6e>
     a44:	f1ba 0f00 	cmp.w	sl, #0
     a48:	d11f      	bne.n	a8a <cbprintf_package_copy+0x6e>
		if (packaged) {
     a4a:	b124      	cbz	r4, a56 <cbprintf_package_copy+0x3a>
			memcpy(packaged, in_packaged, in_len);
     a4c:	463a      	mov	r2, r7
     a4e:	4631      	mov	r1, r6
     a50:	4620      	mov	r0, r4
     a52:	f00a f8a3 	bl	ab9c <memcpy>
			}

			str_pos++;
		}

		return out_len;
     a56:	4638      	mov	r0, r7
		rem -= cpy_len;
		dst += cpy_len;
	}

	return len - rem;
}
     a58:	b00b      	add	sp, #44	; 0x2c
     a5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	s_nbr     = buf[1];
     a5e:	f890 9001 	ldrb.w	r9, [r0, #1]
	buf += ros_nbr;
     a62:	78b5      	ldrb	r5, [r6, #2]
     a64:	7800      	ldrb	r0, [r0, #0]
     a66:	eb05 0580 	add.w	r5, r5, r0, lsl #2
     a6a:	4435      	add	r5, r6
	for (int i = 0; i < s_nbr; i++) {
     a6c:	468a      	mov	sl, r1
     a6e:	45ca      	cmp	sl, r9
     a70:	d2de      	bcs.n	a30 <cbprintf_package_copy+0x14>
		buf++;
     a72:	3501      	adds	r5, #1
		buf += strlen((const char *)buf) + 1;
     a74:	4628      	mov	r0, r5
     a76:	f00a f875 	bl	ab64 <strlen>
     a7a:	3001      	adds	r0, #1
     a7c:	4405      	add	r5, r0
	for (int i = 0; i < s_nbr; i++) {
     a7e:	f10a 0a01 	add.w	sl, sl, #1
     a82:	e7f4      	b.n	a6e <cbprintf_package_copy+0x52>
		(flags & CBPRINTF_PACKAGE_COPY_RO_STR) == CBPRINTF_PACKAGE_COPY_RO_STR;
     a84:	f00b 0a01 	and.w	sl, fp, #1
     a88:	e7d6      	b.n	a38 <cbprintf_package_copy+0x1c>
	args_size = buf[0] * sizeof(int);
     a8a:	f896 9000 	ldrb.w	r9, [r6]
     a8e:	ea4f 0389 	mov.w	r3, r9, lsl #2
     a92:	9303      	str	r3, [sp, #12]
	uint8_t *str_pos = &buf[args_size];
     a94:	eb06 0989 	add.w	r9, r6, r9, lsl #2
	if (packaged == NULL) {
     a98:	2c00      	cmp	r4, #0
     a9a:	d15b      	bne.n	b54 <cbprintf_package_copy+0x138>
		if (ro_cpy) {
     a9c:	f1ba 0f00 	cmp.w	sl, #0
     aa0:	d032      	beq.n	b08 <cbprintf_package_copy+0xec>
     aa2:	444d      	add	r5, r9
			for (int i = 0; i < ros_nbr; i++) {
     aa4:	454d      	cmp	r5, r9
     aa6:	d11d      	bne.n	ae4 <cbprintf_package_copy+0xc8>
     aa8:	46a9      	mov	r9, r5
		bool drop_ro_str_pos = !(flags &
     aaa:	f8dd a004 	ldr.w	sl, [sp, #4]
     aae:	f8df c204 	ldr.w	ip, [pc, #516]	; cb4 <cbprintf_package_copy+0x298>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     ab2:	4981      	ldr	r1, [pc, #516]	; (cb8 <cbprintf_package_copy+0x29c>)
		bool drop_ro_str_pos = !(flags &
     ab4:	f00b 0805 	and.w	r8, fp, #5
		for (int i = 0; i < rws_nbr; i++) {
     ab8:	464d      	mov	r5, r9
     aba:	44ca      	add	sl, r9
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     abc:	f00b 0202 	and.w	r2, fp, #2
		for (int i = 0; i < rws_nbr; i++) {
     ac0:	45aa      	cmp	sl, r5
     ac2:	d0c8      	beq.n	a56 <cbprintf_package_copy+0x3a>
			const char *str = *(const char **)&buf32[*str_pos];
     ac4:	f815 0b01 	ldrb.w	r0, [r5], #1
     ac8:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
     acc:	4560      	cmp	r0, ip
     ace:	d324      	bcc.n	b1a <cbprintf_package_copy+0xfe>
			if ((is_ro && flags & CBPRINTF_PACKAGE_COPY_RO_STR) ||
     ad0:	4288      	cmp	r0, r1
     ad2:	d222      	bcs.n	b1a <cbprintf_package_copy+0xfe>
     ad4:	f01b 0f01 	tst.w	fp, #1
     ad8:	d139      	bne.n	b4e <cbprintf_package_copy+0x132>
			if (is_ro && drop_ro_str_pos) {
     ada:	f1b8 0f00 	cmp.w	r8, #0
     ade:	d1ef      	bne.n	ac0 <cbprintf_package_copy+0xa4>
				out_len--;
     ae0:	3f01      	subs	r7, #1
		for (int i = 0; i < rws_nbr; i++) {
     ae2:	e7ed      	b.n	ac0 <cbprintf_package_copy+0xa4>
				const char *str = *(const char **)&buf32[*str_pos];
     ae4:	f819 3b01 	ldrb.w	r3, [r9], #1
		return 1 + strlen(str);
     ae8:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
     aec:	f00a f83a 	bl	ab64 <strlen>
				if (strl && strl_cnt < strl_len) {
     af0:	9b15      	ldr	r3, [sp, #84]	; 0x54
		return 1 + strlen(str);
     af2:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     af4:	b133      	cbz	r3, b04 <cbprintf_package_copy+0xe8>
     af6:	9b16      	ldr	r3, [sp, #88]	; 0x58
     af8:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
     afa:	bf3e      	ittt	cc
     afc:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
     afe:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
     b02:	3401      	addcc	r4, #1
				out_len += len;
     b04:	4407      	add	r7, r0
			for (int i = 0; i < ros_nbr; i++) {
     b06:	e7cd      	b.n	aa4 <cbprintf_package_copy+0x88>
			if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     b08:	b12d      	cbz	r5, b16 <cbprintf_package_copy+0xfa>
     b0a:	f01b 0404 	ands.w	r4, fp, #4
     b0e:	d0cc      	beq.n	aaa <cbprintf_package_copy+0x8e>
				str_pos += ros_nbr;
     b10:	44a9      	add	r9, r5
	size_t strl_cnt = 0;
     b12:	4654      	mov	r4, sl
     b14:	e7c9      	b.n	aaa <cbprintf_package_copy+0x8e>
     b16:	462c      	mov	r4, r5
     b18:	e7c7      	b.n	aaa <cbprintf_package_copy+0x8e>
			    (!is_ro && flags & CBPRINTF_PACKAGE_COPY_RW_STR)) {
     b1a:	2a00      	cmp	r2, #0
     b1c:	d0d0      	beq.n	ac0 <cbprintf_package_copy+0xa4>
     b1e:	f04f 0900 	mov.w	r9, #0
		return 1 + strlen(str);
     b22:	9201      	str	r2, [sp, #4]
     b24:	f00a f81e 	bl	ab64 <strlen>
				if (strl && strl_cnt < strl_len) {
     b28:	9b15      	ldr	r3, [sp, #84]	; 0x54
     b2a:	f8df c188 	ldr.w	ip, [pc, #392]	; cb4 <cbprintf_package_copy+0x298>
     b2e:	9a01      	ldr	r2, [sp, #4]
     b30:	4961      	ldr	r1, [pc, #388]	; (cb8 <cbprintf_package_copy+0x29c>)
		return 1 + strlen(str);
     b32:	3001      	adds	r0, #1
				if (strl && strl_cnt < strl_len) {
     b34:	b133      	cbz	r3, b44 <cbprintf_package_copy+0x128>
     b36:	9b16      	ldr	r3, [sp, #88]	; 0x58
     b38:	429c      	cmp	r4, r3
					strl[strl_cnt++] = (uint16_t)len;
     b3a:	bf3e      	ittt	cc
     b3c:	9b15      	ldrcc	r3, [sp, #84]	; 0x54
     b3e:	f823 0014 	strhcc.w	r0, [r3, r4, lsl #1]
     b42:	3401      	addcc	r4, #1
				out_len += len;
     b44:	4407      	add	r7, r0
			if (is_ro && drop_ro_str_pos) {
     b46:	f1b9 0f00 	cmp.w	r9, #0
     b4a:	d0b9      	beq.n	ac0 <cbprintf_package_copy+0xa4>
     b4c:	e7c5      	b.n	ada <cbprintf_package_copy+0xbe>
     b4e:	f04f 0901 	mov.w	r9, #1
     b52:	e7e6      	b.n	b22 <cbprintf_package_copy+0x106>
	memcpy(dst, in_packaged, args_size);
     b54:	9a03      	ldr	r2, [sp, #12]
     b56:	4631      	mov	r1, r6
     b58:	4620      	mov	r0, r4
     b5a:	f00a f81f 	bl	ab9c <memcpy>
	dst += args_size;
     b5e:	9b03      	ldr	r3, [sp, #12]
     b60:	18e3      	adds	r3, r4, r3
     b62:	9302      	str	r3, [sp, #8]
	if (ro_cpy) {
     b64:	f1ba 0f00 	cmp.w	sl, #0
     b68:	d00a      	beq.n	b80 <cbprintf_package_copy+0x164>
		memcpy(cpy_str_pos, str_pos, ros_nbr);
     b6a:	4649      	mov	r1, r9
     b6c:	462a      	mov	r2, r5
     b6e:	a806      	add	r0, sp, #24
     b70:	f00a f814 	bl	ab9c <memcpy>
		dst_hdr[2] = 0;
     b74:	2300      	movs	r3, #0
     b76:	70a3      	strb	r3, [r4, #2]
		str_pos += ros_nbr;
     b78:	44a9      	add	r9, r5
	dst += args_size;
     b7a:	f8dd 8008 	ldr.w	r8, [sp, #8]
     b7e:	e00d      	b.n	b9c <cbprintf_package_copy+0x180>
		if (ros_nbr && flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     b80:	b1bd      	cbz	r5, bb2 <cbprintf_package_copy+0x196>
     b82:	f01b 0f04 	tst.w	fp, #4
     b86:	d014      	beq.n	bb2 <cbprintf_package_copy+0x196>
			memcpy(dst, str_pos, ros_nbr);
     b88:	462a      	mov	r2, r5
     b8a:	4649      	mov	r1, r9
     b8c:	9802      	ldr	r0, [sp, #8]
     b8e:	f00a f805 	bl	ab9c <memcpy>
			dst += ros_nbr;
     b92:	9b02      	ldr	r3, [sp, #8]
			str_pos += ros_nbr;
     b94:	44a9      	add	r9, r5
			dst += ros_nbr;
     b96:	eb03 0805 	add.w	r8, r3, r5
		scpy_cnt = 0;
     b9a:	4655      	mov	r5, sl
     b9c:	9b01      	ldr	r3, [sp, #4]
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     b9e:	f00b 0e02 	and.w	lr, fp, #2
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     ba2:	f00b 0001 	and.w	r0, fp, #1
     ba6:	464a      	mov	r2, r9
     ba8:	eb09 0c03 	add.w	ip, r9, r3
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     bac:	f00b 0b04 	and.w	fp, fp, #4
     bb0:	e025      	b.n	bfe <cbprintf_package_copy+0x1e2>
			dst_hdr[2] = 0;
     bb2:	2500      	movs	r5, #0
     bb4:	70a5      	strb	r5, [r4, #2]
     bb6:	e7e0      	b.n	b7a <cbprintf_package_copy+0x15e>
		const char *str = *(const char **)&buf32[*str_pos];
     bb8:	f812 3b01 	ldrb.w	r3, [r2], #1
     bbc:	f8df a0f4 	ldr.w	sl, [pc, #244]	; cb4 <cbprintf_package_copy+0x298>
     bc0:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
     bc4:	4551      	cmp	r1, sl
     bc6:	d303      	bcc.n	bd0 <cbprintf_package_copy+0x1b4>
     bc8:	f8df a0ec 	ldr.w	sl, [pc, #236]	; cb8 <cbprintf_package_copy+0x29c>
     bcc:	4551      	cmp	r1, sl
     bce:	d305      	bcc.n	bdc <cbprintf_package_copy+0x1c0>
			if (flags & CBPRINTF_PACKAGE_COPY_RW_STR) {
     bd0:	f1be 0f00 	cmp.w	lr, #0
     bd4:	d103      	bne.n	bde <cbprintf_package_copy+0x1c2>
				*dst++ = *str_pos;
     bd6:	f808 3b01 	strb.w	r3, [r8], #1
	for (int i = 0; i < rws_nbr; i++) {
     bda:	e010      	b.n	bfe <cbprintf_package_copy+0x1e2>
			if (flags & CBPRINTF_PACKAGE_COPY_RO_STR) {
     bdc:	b138      	cbz	r0, bee <cbprintf_package_copy+0x1d2>
				cpy_str_pos[scpy_cnt++] = *str_pos;
     bde:	f10d 0a28 	add.w	sl, sp, #40	; 0x28
     be2:	1c69      	adds	r1, r5, #1
     be4:	4455      	add	r5, sl
     be6:	f805 3c10 	strb.w	r3, [r5, #-16]
     bea:	b2cd      	uxtb	r5, r1
     bec:	e007      	b.n	bfe <cbprintf_package_copy+0x1e2>
			} else if (flags & CBPRINTF_PACKAGE_COPY_KEEP_RO_STR) {
     bee:	f1bb 0f00 	cmp.w	fp, #0
     bf2:	d004      	beq.n	bfe <cbprintf_package_copy+0x1e2>
				*dst++ = *str_pos;
     bf4:	f808 3b01 	strb.w	r3, [r8], #1
				dst_hdr[2]++;
     bf8:	78a3      	ldrb	r3, [r4, #2]
     bfa:	3301      	adds	r3, #1
     bfc:	70a3      	strb	r3, [r4, #2]
	for (int i = 0; i < rws_nbr; i++) {
     bfe:	4594      	cmp	ip, r2
     c00:	d1da      	bne.n	bb8 <cbprintf_package_copy+0x19c>
	dst_hdr[1] += scpy_cnt;
     c02:	7863      	ldrb	r3, [r4, #1]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     c04:	9a01      	ldr	r2, [sp, #4]
	dst_hdr[1] += scpy_cnt;
     c06:	442b      	add	r3, r5
     c08:	7063      	strb	r3, [r4, #1]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
     c0a:	9b02      	ldr	r3, [sp, #8]
     c0c:	eba8 0b03 	sub.w	fp, r8, r3
     c10:	78a3      	ldrb	r3, [r4, #2]
     c12:	ebab 0b03 	sub.w	fp, fp, r3
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     c16:	9b05      	ldr	r3, [sp, #20]
	dst_hdr[3] = (uint8_t)(uintptr_t)(dst - dst_str_loc) - dst_hdr[2];
     c18:	f884 b003 	strb.w	fp, [r4, #3]
	size_t strs_len = in_len - (args_size + ros_nbr + rws_nbr);
     c1c:	4413      	add	r3, r2
     c1e:	1aff      	subs	r7, r7, r3
     c20:	9b03      	ldr	r3, [sp, #12]
     c22:	1aff      	subs	r7, r7, r3
	memcpy(dst, str_pos, strs_len);
     c24:	9b01      	ldr	r3, [sp, #4]
     c26:	4640      	mov	r0, r8
     c28:	463a      	mov	r2, r7
     c2a:	eb09 0103 	add.w	r1, r9, r3
	dst += strs_len;
     c2e:	44b8      	add	r8, r7
	memcpy(dst, str_pos, strs_len);
     c30:	f009 ffb4 	bl	ab9c <memcpy>
		return dst - dst_hdr;
     c34:	eba8 0004 	sub.w	r0, r8, r4
	if (scpy_cnt == 0) {
     c38:	2d00      	cmp	r5, #0
     c3a:	f43f af0d 	beq.w	a58 <cbprintf_package_copy+0x3c>
	size_t rem = len - ((size_t)(uintptr_t)(dst - dst_hdr));
     c3e:	9b04      	ldr	r3, [sp, #16]
     c40:	1a1c      	subs	r4, r3, r0
	if (rem <= scpy_cnt) {
     c42:	42a5      	cmp	r5, r4
     c44:	d302      	bcc.n	c4c <cbprintf_package_copy+0x230>
		return -ENOSPC;
     c46:	f06f 001b 	mvn.w	r0, #27
     c4a:	e705      	b.n	a58 <cbprintf_package_copy+0x3c>
	for (int i = 0; i < scpy_cnt; i++) {
     c4c:	f04f 0900 	mov.w	r9, #0
		uint8_t loc = cpy_str_pos[i];
     c50:	ab06      	add	r3, sp, #24
		uint16_t str_len = strl ? strl[i] : 0;
     c52:	9a15      	ldr	r2, [sp, #84]	; 0x54
		uint8_t loc = cpy_str_pos[i];
     c54:	f813 3009 	ldrb.w	r3, [r3, r9]
		const char *str = *(const char **)&buf32[loc];
     c58:	f856 1023 	ldr.w	r1, [r6, r3, lsl #2]
		uint16_t str_len = strl ? strl[i] : 0;
     c5c:	b1c2      	cbz	r2, c90 <cbprintf_package_copy+0x274>
     c5e:	f832 7019 	ldrh.w	r7, [r2, r9, lsl #1]
		*dst = loc;
     c62:	46c2      	mov	sl, r8
		rem--;
     c64:	f104 3bff 	add.w	fp, r4, #4294967295
		*dst = loc;
     c68:	f80a 3b01 	strb.w	r3, [sl], #1
	if (strl) {
     c6c:	b197      	cbz	r7, c94 <cbprintf_package_copy+0x278>
		memcpy(dst, str, strl);
     c6e:	463a      	mov	r2, r7
     c70:	4650      	mov	r0, sl
     c72:	f009 ff93 	bl	ab9c <memcpy>
	for (int i = 0; i < scpy_cnt; i++) {
     c76:	f109 0901 	add.w	r9, r9, #1
     c7a:	454d      	cmp	r5, r9
		rem -= cpy_len;
     c7c:	ebab 0407 	sub.w	r4, fp, r7
		dst += cpy_len;
     c80:	eb0a 0807 	add.w	r8, sl, r7
	for (int i = 0; i < scpy_cnt; i++) {
     c84:	dce4      	bgt.n	c50 <cbprintf_package_copy+0x234>
	return len - rem;
     c86:	9b04      	ldr	r3, [sp, #16]
     c88:	441f      	add	r7, r3
     c8a:	eba7 000b 	sub.w	r0, r7, fp
     c8e:	e6e3      	b.n	a58 <cbprintf_package_copy+0x3c>
		uint16_t str_len = strl ? strl[i] : 0;
     c90:	9f15      	ldr	r7, [sp, #84]	; 0x54
     c92:	e7e6      	b.n	c62 <cbprintf_package_copy+0x246>
     c94:	3901      	subs	r1, #1
	if (strl) {
     c96:	2301      	movs	r3, #1
	for (size_t i = 0; i < num; i++) {
     c98:	429c      	cmp	r4, r3
     c9a:	d0d4      	beq.n	c46 <cbprintf_package_copy+0x22a>
		dst[i] = src[i];
     c9c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
     ca0:	f808 2003 	strb.w	r2, [r8, r3]
		if (src[i] == '\0') {
     ca4:	1c58      	adds	r0, r3, #1
     ca6:	b912      	cbnz	r2, cae <cbprintf_package_copy+0x292>
		if (cpy_len < 0) {
     ca8:	1e1f      	subs	r7, r3, #0
     caa:	dae4      	bge.n	c76 <cbprintf_package_copy+0x25a>
     cac:	e7cb      	b.n	c46 <cbprintf_package_copy+0x22a>
     cae:	4603      	mov	r3, r0
     cb0:	e7f2      	b.n	c98 <cbprintf_package_copy+0x27c>
     cb2:	bf00      	nop
     cb4:	0000bb38 	.word	0x0000bb38
     cb8:	0000e448 	.word	0x0000e448

00000cbc <__printk_hook_install>:
 * routine that outputs one ASCII character at a time.
 * @param fn putc routine to install
 */
void __printk_hook_install(int (*fn)(int))
{
	_char_out = fn;
     cbc:	4b01      	ldr	r3, [pc, #4]	; (cc4 <__printk_hook_install+0x8>)
     cbe:	6018      	str	r0, [r3, #0]
}
     cc0:	4770      	bx	lr
     cc2:	bf00      	nop
     cc4:	20000000 	.word	0x20000000

00000cc8 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
     cc8:	b530      	push	{r4, r5, lr}
     cca:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
     ccc:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
     cd0:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
     cd2:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
     cd4:	a901      	add	r1, sp, #4
     cd6:	4805      	ldr	r0, [pc, #20]	; (cec <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
     cd8:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
     cda:	f000 f8e9 	bl	eb0 <cbvprintf>

	if (ctx.count < ctx.max) {
     cde:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
     ce2:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
     ce4:	bfb8      	it	lt
     ce6:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
     ce8:	b005      	add	sp, #20
     cea:	bd30      	pop	{r4, r5, pc}
     cec:	00009e53 	.word	0x00009e53

00000cf0 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
     cf0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     cf4:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
     cf8:	f019 0808 	ands.w	r8, r9, #8
{
     cfc:	4604      	mov	r4, r0
     cfe:	4693      	mov	fp, r2
	if (processing) {
     d00:	d00d      	beq.n	d1e <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
     d02:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
     d04:	bf0c      	ite	eq
     d06:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
     d0a:	f049 0920 	orrne.w	r9, r9, #32
     d0e:	f8a0 9018 	strh.w	r9, [r0, #24]
     d12:	f38b 8811 	msr	BASEPRI, fp
     d16:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
     d1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d1e:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
     d22:	2902      	cmp	r1, #2
     d24:	d107      	bne.n	d36 <process_event+0x46>
			evt = process_recheck(mgr);
     d26:	4620      	mov	r0, r4
     d28:	f009 f8da 	bl	9ee0 <process_recheck>
		if (evt == EVT_NOP) {
     d2c:	2800      	cmp	r0, #0
     d2e:	d0f0      	beq.n	d12 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
     d30:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d32:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
     d34:	d14e      	bne.n	dd4 <process_event+0xe4>
			res = mgr->last_res;
     d36:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d38:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
     d3a:	2f00      	cmp	r7, #0
     d3c:	da15      	bge.n	d6a <process_event+0x7a>
		*clients = mgr->clients;
     d3e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d40:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
     d44:	e9c4 8800 	strd	r8, r8, [r4]
     d48:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
     d4c:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
     d4e:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
     d50:	8b21      	ldrh	r1, [r4, #24]
     d52:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
     d56:	45ca      	cmp	sl, r9
     d58:	d002      	beq.n	d60 <process_event+0x70>
		if (do_monitors
     d5a:	68a3      	ldr	r3, [r4, #8]
     d5c:	2b00      	cmp	r3, #0
     d5e:	d15a      	bne.n	e16 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
     d60:	b90d      	cbnz	r5, d66 <process_event+0x76>
		    || (transit != NULL)) {
     d62:	2e00      	cmp	r6, #0
     d64:	d071      	beq.n	e4a <process_event+0x15a>
     d66:	2300      	movs	r3, #0
     d68:	e056      	b.n	e18 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
     d6a:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
     d6e:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
     d70:	2a01      	cmp	r2, #1
     d72:	d81e      	bhi.n	db2 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d74:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
     d78:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
     d7a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d7c:	b289      	uxth	r1, r1
     d7e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
     d82:	d10a      	bne.n	d9a <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     d84:	b13d      	cbz	r5, d96 <process_event+0xa6>
     d86:	8b63      	ldrh	r3, [r4, #26]
     d88:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
     d8a:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
     d8c:	3301      	adds	r3, #1
     d8e:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
     d90:	2a00      	cmp	r2, #0
     d92:	d1fa      	bne.n	d8a <process_event+0x9a>
     d94:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     d96:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
     d9a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     d9c:	4620      	mov	r0, r4
     d9e:	f009 f89f 	bl	9ee0 <process_recheck>
     da2:	4606      	mov	r6, r0
     da4:	2800      	cmp	r0, #0
     da6:	d0d3      	beq.n	d50 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     da8:	8b23      	ldrh	r3, [r4, #24]
     daa:	f043 0320 	orr.w	r3, r3, #32
     dae:	8323      	strh	r3, [r4, #24]
     db0:	e7cd      	b.n	d4e <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
     db2:	2b04      	cmp	r3, #4
     db4:	d10c      	bne.n	dd0 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     db6:	f021 0107 	bic.w	r1, r1, #7
     dba:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
     dbc:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
     dbe:	4620      	mov	r0, r4
     dc0:	f009 f88e 	bl	9ee0 <process_recheck>
     dc4:	4605      	mov	r5, r0
     dc6:	2800      	cmp	r0, #0
     dc8:	d0c1      	beq.n	d4e <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
     dca:	f041 0120 	orr.w	r1, r1, #32
     dce:	8321      	strh	r1, [r4, #24]
     dd0:	2500      	movs	r5, #0
     dd2:	e7bc      	b.n	d4e <process_event+0x5e>
		} else if (evt == EVT_START) {
     dd4:	2803      	cmp	r0, #3
     dd6:	d109      	bne.n	dec <process_event+0xfc>
			transit = mgr->transitions->start;
     dd8:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     dda:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
     dde:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     de0:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
     de4:	8323      	strh	r3, [r4, #24]
}
     de6:	2500      	movs	r5, #0
		res = 0;
     de8:	462f      	mov	r7, r5
     dea:	e7b1      	b.n	d50 <process_event+0x60>
		} else if (evt == EVT_STOP) {
     dec:	2804      	cmp	r0, #4
     dee:	d106      	bne.n	dfe <process_event+0x10e>
			transit = mgr->transitions->stop;
     df0:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     df2:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
     df6:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     df8:	f043 0304 	orr.w	r3, r3, #4
     dfc:	e7f2      	b.n	de4 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
     dfe:	2805      	cmp	r0, #5
     e00:	d106      	bne.n	e10 <process_event+0x120>
			transit = mgr->transitions->reset;
     e02:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e04:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
     e08:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
     e0a:	f043 0305 	orr.w	r3, r3, #5
     e0e:	e7e9      	b.n	de4 <process_event+0xf4>
     e10:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
     e12:	462e      	mov	r6, r5
     e14:	e7e8      	b.n	de8 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
     e16:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
     e18:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
     e1c:	8321      	strh	r1, [r4, #24]
     e1e:	f38b 8811 	msr	BASEPRI, fp
     e22:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
     e26:	b9fb      	cbnz	r3, e68 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
     e28:	bb85      	cbnz	r5, e8c <process_event+0x19c>
			if (transit != NULL) {
     e2a:	b116      	cbz	r6, e32 <process_event+0x142>
				transit(mgr, transition_complete);
     e2c:	491f      	ldr	r1, [pc, #124]	; (eac <process_event+0x1bc>)
     e2e:	4620      	mov	r0, r4
     e30:	47b0      	blx	r6
	__asm__ volatile(
     e32:	f04f 0320 	mov.w	r3, #32
     e36:	f3ef 8b11 	mrs	fp, BASEPRI
     e3a:	f383 8812 	msr	BASEPRI_MAX, r3
     e3e:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
     e42:	8b23      	ldrh	r3, [r4, #24]
     e44:	f023 0308 	bic.w	r3, r3, #8
     e48:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
     e4a:	8b23      	ldrh	r3, [r4, #24]
     e4c:	06da      	lsls	r2, r3, #27
     e4e:	d525      	bpl.n	e9c <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
     e50:	f023 0310 	bic.w	r3, r3, #16
     e54:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
     e56:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
     e58:	f8b4 9018 	ldrh.w	r9, [r4, #24]
     e5c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
     e60:	2900      	cmp	r1, #0
     e62:	f47f af5e 	bne.w	d22 <process_event+0x32>
out:
     e66:	e754      	b.n	d12 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
     e68:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     e6a:	2900      	cmp	r1, #0
     e6c:	d0dc      	beq.n	e28 <process_event+0x138>
	return node->next;
     e6e:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
     e72:	f8d1 b004 	ldr.w	fp, [r1, #4]
     e76:	463b      	mov	r3, r7
     e78:	4652      	mov	r2, sl
     e7a:	4620      	mov	r0, r4
     e7c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
     e7e:	f1b9 0f00 	cmp.w	r9, #0
     e82:	d0d1      	beq.n	e28 <process_event+0x138>
     e84:	4649      	mov	r1, r9
     e86:	f8d9 9000 	ldr.w	r9, [r9]
     e8a:	e7f2      	b.n	e72 <process_event+0x182>
     e8c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
     e8e:	463b      	mov	r3, r7
     e90:	4652      	mov	r2, sl
     e92:	4620      	mov	r0, r4
     e94:	682d      	ldr	r5, [r5, #0]
     e96:	f009 f83f 	bl	9f18 <notify_one>
     e9a:	e7c5      	b.n	e28 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
     e9c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
     ea0:	bf1e      	ittt	ne
     ea2:	f023 0320 	bicne.w	r3, r3, #32
     ea6:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
     ea8:	2102      	movne	r1, #2
     eaa:	e7d5      	b.n	e58 <process_event+0x168>
     eac:	00009f45 	.word	0x00009f45

00000eb0 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
     eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
     eb4:	b091      	sub	sp, #68	; 0x44
     eb6:	468b      	mov	fp, r1
     eb8:	9002      	str	r0, [sp, #8]
     eba:	4692      	mov	sl, r2
     ebc:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
     ebe:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
     ec0:	f89a 0000 	ldrb.w	r0, [sl]
     ec4:	b908      	cbnz	r0, eca <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
     ec6:	4628      	mov	r0, r5
     ec8:	e35f      	b.n	158a <CONFIG_FPROTECT_BLOCK_SIZE+0x58a>
		if (*fp != '%') {
     eca:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
     ecc:	f10a 0701 	add.w	r7, sl, #1
		if (*fp != '%') {
     ed0:	d007      	beq.n	ee2 <cbvprintf+0x32>
			OUTC('%');
     ed2:	9b02      	ldr	r3, [sp, #8]
     ed4:	4659      	mov	r1, fp
     ed6:	4798      	blx	r3
     ed8:	2800      	cmp	r0, #0
     eda:	f2c0 8356 	blt.w	158a <CONFIG_FPROTECT_BLOCK_SIZE+0x58a>
     ede:	3501      	adds	r5, #1
			break;
     ee0:	e212      	b.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
		} state = {
     ee2:	2218      	movs	r2, #24
     ee4:	2100      	movs	r1, #0
     ee6:	a80a      	add	r0, sp, #40	; 0x28
     ee8:	f009 fe63 	bl	abb2 <memset>
	if (*sp == '%') {
     eec:	f89a 3001 	ldrb.w	r3, [sl, #1]
     ef0:	2b25      	cmp	r3, #37	; 0x25
     ef2:	d078      	beq.n	fe6 <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x46>
     ef4:	2200      	movs	r2, #0
     ef6:	4610      	mov	r0, r2
     ef8:	4696      	mov	lr, r2
     efa:	4694      	mov	ip, r2
     efc:	4616      	mov	r6, r2
     efe:	4639      	mov	r1, r7
		switch (*sp) {
     f00:	f817 3b01 	ldrb.w	r3, [r7], #1
     f04:	2b2b      	cmp	r3, #43	; 0x2b
     f06:	f000 809d 	beq.w	1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>
     f0a:	f200 8094 	bhi.w	1036 <CONFIG_FPROTECT_BLOCK_SIZE+0x36>
     f0e:	2b20      	cmp	r3, #32
     f10:	f000 809b 	beq.w	104a <CONFIG_FPROTECT_BLOCK_SIZE+0x4a>
     f14:	2b23      	cmp	r3, #35	; 0x23
     f16:	f000 809b 	beq.w	1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>
     f1a:	b12e      	cbz	r6, f28 <cbvprintf+0x78>
     f1c:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     f20:	f046 0604 	orr.w	r6, r6, #4
     f24:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     f28:	f1bc 0f00 	cmp.w	ip, #0
     f2c:	d005      	beq.n	f3a <cbvprintf+0x8a>
     f2e:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     f32:	f046 0608 	orr.w	r6, r6, #8
     f36:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     f3a:	f1be 0f00 	cmp.w	lr, #0
     f3e:	d005      	beq.n	f4c <cbvprintf+0x9c>
     f40:	f89d 6030 	ldrb.w	r6, [sp, #48]	; 0x30
     f44:	f046 0610 	orr.w	r6, r6, #16
     f48:	f88d 6030 	strb.w	r6, [sp, #48]	; 0x30
     f4c:	b128      	cbz	r0, f5a <cbvprintf+0xaa>
     f4e:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
     f52:	f040 0020 	orr.w	r0, r0, #32
     f56:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
     f5a:	b12a      	cbz	r2, f68 <cbvprintf+0xb8>
     f5c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     f60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
     f64:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
     f68:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
     f6c:	f002 0044 	and.w	r0, r2, #68	; 0x44
     f70:	2844      	cmp	r0, #68	; 0x44
     f72:	d103      	bne.n	f7c <cbvprintf+0xcc>
		conv->flag_zero = false;
     f74:	f36f 1286 	bfc	r2, #6, #1
     f78:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
     f7c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     f80:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
     f82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
     f86:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
     f8a:	d17b      	bne.n	1084 <CONFIG_FPROTECT_BLOCK_SIZE+0x84>
		conv->width_star = true;
     f8c:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     f90:	f042 0201 	orr.w	r2, r2, #1
			++sp;
     f94:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
     f96:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
     f9a:	781a      	ldrb	r2, [r3, #0]
     f9c:	2a2e      	cmp	r2, #46	; 0x2e
     f9e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
     fa2:	bf0c      	ite	eq
     fa4:	2101      	moveq	r1, #1
     fa6:	2100      	movne	r1, #0
     fa8:	f361 0241 	bfi	r2, r1, #1, #1
     fac:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
     fb0:	d174      	bne.n	109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
	if (*sp == '*') {
     fb2:	785a      	ldrb	r2, [r3, #1]
     fb4:	2a2a      	cmp	r2, #42	; 0x2a
     fb6:	d06a      	beq.n	108e <CONFIG_FPROTECT_BLOCK_SIZE+0x8e>
	++sp;
     fb8:	3301      	adds	r3, #1
	size_t val = 0;
     fba:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
     fbc:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
     fbe:	4618      	mov	r0, r3
     fc0:	f810 2b01 	ldrb.w	r2, [r0], #1
     fc4:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
     fc8:	2f09      	cmp	r7, #9
     fca:	f240 808e 	bls.w	10ea <CONFIG_FPROTECT_BLOCK_SIZE+0xea>
	conv->unsupported |= ((conv->prec_value < 0)
     fce:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
     fd2:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
     fd4:	f3c2 0040 	ubfx	r0, r2, #1, #1
     fd8:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
     fdc:	f361 0241 	bfi	r2, r1, #1, #1
     fe0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
     fe4:	e05a      	b.n	109c <CONFIG_FPROTECT_BLOCK_SIZE+0x9c>
		conv->specifier = *sp++;
     fe6:	f10a 0702 	add.w	r7, sl, #2
     fea:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
     fee:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
     ff2:	07d9      	lsls	r1, r3, #31
     ff4:	f140 8149 	bpl.w	128a <CONFIG_FPROTECT_BLOCK_SIZE+0x28a>
			width = va_arg(ap, int);
     ff8:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
     ffc:	f1b9 0f00 	cmp.w	r9, #0
    1000:	da07      	bge.n	1012 <CONFIG_FPROTECT_BLOCK_SIZE+0x12>
				conv->flag_dash = true;
    1002:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1006:	f042 0204 	orr.w	r2, r2, #4
    100a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    100e:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    1012:	075a      	lsls	r2, r3, #29
    1014:	f140 8142 	bpl.w	129c <CONFIG_FPROTECT_BLOCK_SIZE+0x29c>
			int arg = va_arg(ap, int);
    1018:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    101c:	f1b8 0f00 	cmp.w	r8, #0
    1020:	f280 8141 	bge.w	12a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a6>
				conv->prec_present = false;
    1024:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1028:	f36f 0341 	bfc	r3, #1, #1
    102c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1030:	f04f 38ff 	mov.w	r8, #4294967295
    1034:	e137      	b.n	12a6 <CONFIG_FPROTECT_BLOCK_SIZE+0x2a6>
		switch (*sp) {
    1036:	2b2d      	cmp	r3, #45	; 0x2d
    1038:	d00c      	beq.n	1054 <CONFIG_FPROTECT_BLOCK_SIZE+0x54>
    103a:	2b30      	cmp	r3, #48	; 0x30
    103c:	f47f af6d 	bne.w	f1a <cbvprintf+0x6a>
			conv->flag_zero = true;
    1040:	2201      	movs	r2, #1
	} while (loop);
    1042:	e75c      	b.n	efe <cbvprintf+0x4e>
			conv->flag_plus = true;
    1044:	f04f 0c01 	mov.w	ip, #1
    1048:	e759      	b.n	efe <cbvprintf+0x4e>
			conv->flag_space = true;
    104a:	f04f 0e01 	mov.w	lr, #1
    104e:	e756      	b.n	efe <cbvprintf+0x4e>
			conv->flag_hash = true;
    1050:	2001      	movs	r0, #1
    1052:	e754      	b.n	efe <cbvprintf+0x4e>
		switch (*sp) {
    1054:	2601      	movs	r6, #1
    1056:	e752      	b.n	efe <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    1058:	fb0c 0202 	mla	r2, ip, r2, r0
    105c:	3a30      	subs	r2, #48	; 0x30
    105e:	4633      	mov	r3, r6
    1060:	461e      	mov	r6, r3
    1062:	f816 0b01 	ldrb.w	r0, [r6], #1
    1066:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    106a:	2f09      	cmp	r7, #9
    106c:	d9f4      	bls.n	1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>
	if (sp != wp) {
    106e:	4299      	cmp	r1, r3
    1070:	d093      	beq.n	f9a <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1072:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    1076:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    1078:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    107a:	f362 0141 	bfi	r1, r2, #1, #1
    107e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    1082:	e78a      	b.n	f9a <cbvprintf+0xea>
    1084:	460b      	mov	r3, r1
	size_t val = 0;
    1086:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    1088:	f04f 0c0a 	mov.w	ip, #10
    108c:	e7e8      	b.n	1060 <CONFIG_FPROTECT_BLOCK_SIZE+0x60>
		conv->prec_star = true;
    108e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1092:	f042 0204 	orr.w	r2, r2, #4
    1096:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    109a:	3302      	adds	r3, #2
	switch (*sp) {
    109c:	461f      	mov	r7, r3
    109e:	f817 2b01 	ldrb.w	r2, [r7], #1
    10a2:	2a6c      	cmp	r2, #108	; 0x6c
    10a4:	d041      	beq.n	112a <CONFIG_FPROTECT_BLOCK_SIZE+0x12a>
    10a6:	d825      	bhi.n	10f4 <CONFIG_FPROTECT_BLOCK_SIZE+0xf4>
    10a8:	2a68      	cmp	r2, #104	; 0x68
    10aa:	d02b      	beq.n	1104 <CONFIG_FPROTECT_BLOCK_SIZE+0x104>
    10ac:	2a6a      	cmp	r2, #106	; 0x6a
    10ae:	d046      	beq.n	113e <CONFIG_FPROTECT_BLOCK_SIZE+0x13e>
    10b0:	2a4c      	cmp	r2, #76	; 0x4c
    10b2:	d04c      	beq.n	114e <CONFIG_FPROTECT_BLOCK_SIZE+0x14e>
    10b4:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    10b6:	f817 2b01 	ldrb.w	r2, [r7], #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    10ba:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
	conv->specifier = *sp++;
    10be:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    10c2:	2a78      	cmp	r2, #120	; 0x78
    10c4:	f200 80d9 	bhi.w	127a <CONFIG_FPROTECT_BLOCK_SIZE+0x27a>
    10c8:	2a57      	cmp	r2, #87	; 0x57
    10ca:	d84d      	bhi.n	1168 <CONFIG_FPROTECT_BLOCK_SIZE+0x168>
    10cc:	2a41      	cmp	r2, #65	; 0x41
    10ce:	d003      	beq.n	10d8 <CONFIG_FPROTECT_BLOCK_SIZE+0xd8>
    10d0:	3a45      	subs	r2, #69	; 0x45
    10d2:	2a02      	cmp	r2, #2
    10d4:	f200 80d1 	bhi.w	127a <CONFIG_FPROTECT_BLOCK_SIZE+0x27a>
		conv->specifier_cat = SPECIFIER_FP;
    10d8:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    10dc:	2204      	movs	r2, #4
    10de:	f362 0302 	bfi	r3, r2, #0, #3
    10e2:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    10e6:	2301      	movs	r3, #1
			break;
    10e8:	e09e      	b.n	1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>
		val = 10U * val + *sp++ - '0';
    10ea:	fb06 2101 	mla	r1, r6, r1, r2
    10ee:	3930      	subs	r1, #48	; 0x30
    10f0:	4603      	mov	r3, r0
    10f2:	e764      	b.n	fbe <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x1e>
	switch (*sp) {
    10f4:	2a74      	cmp	r2, #116	; 0x74
    10f6:	d026      	beq.n	1146 <CONFIG_FPROTECT_BLOCK_SIZE+0x146>
    10f8:	2a7a      	cmp	r2, #122	; 0x7a
    10fa:	d1db      	bne.n	10b4 <CONFIG_FPROTECT_BLOCK_SIZE+0xb4>
		conv->length_mod = LENGTH_Z;
    10fc:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1100:	2206      	movs	r2, #6
    1102:	e00d      	b.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
		if (*++sp == 'h') {
    1104:	785a      	ldrb	r2, [r3, #1]
    1106:	2a68      	cmp	r2, #104	; 0x68
    1108:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    110c:	d106      	bne.n	111c <CONFIG_FPROTECT_BLOCK_SIZE+0x11c>
			conv->length_mod = LENGTH_HH;
    110e:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    1110:	f361 02c6 	bfi	r2, r1, #3, #4
    1114:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    1118:	1c9f      	adds	r7, r3, #2
    111a:	e7cc      	b.n	10b6 <CONFIG_FPROTECT_BLOCK_SIZE+0xb6>
			conv->length_mod = LENGTH_H;
    111c:	4613      	mov	r3, r2
    111e:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    1120:	f362 03c6 	bfi	r3, r2, #3, #4
    1124:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    1128:	e7c5      	b.n	10b6 <CONFIG_FPROTECT_BLOCK_SIZE+0xb6>
		if (*++sp == 'l') {
    112a:	785a      	ldrb	r2, [r3, #1]
    112c:	2a6c      	cmp	r2, #108	; 0x6c
    112e:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1132:	d101      	bne.n	1138 <CONFIG_FPROTECT_BLOCK_SIZE+0x138>
			conv->length_mod = LENGTH_LL;
    1134:	2104      	movs	r1, #4
    1136:	e7eb      	b.n	1110 <CONFIG_FPROTECT_BLOCK_SIZE+0x110>
			conv->length_mod = LENGTH_L;
    1138:	4613      	mov	r3, r2
    113a:	2203      	movs	r2, #3
    113c:	e7f0      	b.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
		conv->length_mod = LENGTH_J;
    113e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1142:	2205      	movs	r2, #5
    1144:	e7ec      	b.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
		conv->length_mod = LENGTH_T;
    1146:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    114a:	2207      	movs	r2, #7
    114c:	e7e8      	b.n	1120 <CONFIG_FPROTECT_BLOCK_SIZE+0x120>
		conv->unsupported = true;
    114e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1152:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    1156:	f023 0302 	bic.w	r3, r3, #2
    115a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    115e:	f043 0302 	orr.w	r3, r3, #2
    1162:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    1166:	e7a6      	b.n	10b6 <CONFIG_FPROTECT_BLOCK_SIZE+0xb6>
	switch (conv->specifier) {
    1168:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    116c:	2920      	cmp	r1, #32
    116e:	f200 8084 	bhi.w	127a <CONFIG_FPROTECT_BLOCK_SIZE+0x27a>
    1172:	a001      	add	r0, pc, #4	; (adr r0, 1178 <CONFIG_FPROTECT_BLOCK_SIZE+0x178>)
    1174:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1178:	0000123d 	.word	0x0000123d
    117c:	0000127b 	.word	0x0000127b
    1180:	0000127b 	.word	0x0000127b
    1184:	0000127b 	.word	0x0000127b
    1188:	0000127b 	.word	0x0000127b
    118c:	0000127b 	.word	0x0000127b
    1190:	0000127b 	.word	0x0000127b
    1194:	0000127b 	.word	0x0000127b
    1198:	0000127b 	.word	0x0000127b
    119c:	000010d9 	.word	0x000010d9
    11a0:	0000127b 	.word	0x0000127b
    11a4:	0000123d 	.word	0x0000123d
    11a8:	000011fd 	.word	0x000011fd
    11ac:	000010d9 	.word	0x000010d9
    11b0:	000010d9 	.word	0x000010d9
    11b4:	000010d9 	.word	0x000010d9
    11b8:	0000127b 	.word	0x0000127b
    11bc:	000011fd 	.word	0x000011fd
    11c0:	0000127b 	.word	0x0000127b
    11c4:	0000127b 	.word	0x0000127b
    11c8:	0000127b 	.word	0x0000127b
    11cc:	0000127b 	.word	0x0000127b
    11d0:	00001245 	.word	0x00001245
    11d4:	0000123d 	.word	0x0000123d
    11d8:	00001261 	.word	0x00001261
    11dc:	0000127b 	.word	0x0000127b
    11e0:	0000127b 	.word	0x0000127b
    11e4:	00001261 	.word	0x00001261
    11e8:	0000127b 	.word	0x0000127b
    11ec:	0000123d 	.word	0x0000123d
    11f0:	0000127b 	.word	0x0000127b
    11f4:	0000127b 	.word	0x0000127b
    11f8:	0000123d 	.word	0x0000123d
		conv->specifier_cat = SPECIFIER_SINT;
    11fc:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1200:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    1202:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    1206:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    120a:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    120c:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    1210:	bf02      	ittt	eq
    1212:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    1216:	f041 0101 	orreq.w	r1, r1, #1
    121a:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    121e:	2a63      	cmp	r2, #99	; 0x63
    1220:	d131      	bne.n	1286 <CONFIG_FPROTECT_BLOCK_SIZE+0x286>
			unsupported = (conv->length_mod != LENGTH_NONE);
    1222:	3b00      	subs	r3, #0
    1224:	bf18      	it	ne
    1226:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    1228:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    122c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1230:	430b      	orrs	r3, r1
    1232:	f363 0241 	bfi	r2, r3, #1, #1
    1236:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    123a:	e6d8      	b.n	fee <CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_PERIOD+0x4e>
		conv->specifier_cat = SPECIFIER_UINT;
    123c:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1240:	2002      	movs	r0, #2
    1242:	e7de      	b.n	1202 <CONFIG_FPROTECT_BLOCK_SIZE+0x202>
		conv->specifier_cat = SPECIFIER_PTR;
    1244:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1248:	f003 0378 	and.w	r3, r3, #120	; 0x78
    124c:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1250:	2103      	movs	r1, #3
    1252:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    1256:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    1258:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    125c:	4143      	adcs	r3, r0
    125e:	e7e3      	b.n	1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>
		conv->specifier_cat = SPECIFIER_PTR;
    1260:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1264:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    1266:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    126a:	f361 0202 	bfi	r2, r1, #0, #3
    126e:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1272:	bf14      	ite	ne
    1274:	2301      	movne	r3, #1
    1276:	2300      	moveq	r3, #0
    1278:	e7d6      	b.n	1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>
		conv->invalid = true;
    127a:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    127e:	f043 0301 	orr.w	r3, r3, #1
    1282:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    1286:	2300      	movs	r3, #0
    1288:	e7ce      	b.n	1228 <CONFIG_FPROTECT_BLOCK_SIZE+0x228>
		} else if (conv->width_present) {
    128a:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    128e:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1290:	bfb4      	ite	lt
    1292:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    1296:	f04f 39ff 	movge.w	r9, #4294967295
    129a:	e6ba      	b.n	1012 <CONFIG_FPROTECT_BLOCK_SIZE+0x12>
		} else if (conv->prec_present) {
    129c:	079b      	lsls	r3, r3, #30
    129e:	f57f aec7 	bpl.w	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
			precision = conv->prec_value;
    12a2:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    12a6:	f89d 1031 	ldrb.w	r1, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    12aa:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    12ac:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    12b0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    12b4:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    12b8:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    12ba:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    12be:	d138      	bne.n	1332 <CONFIG_FPROTECT_BLOCK_SIZE+0x332>
			switch (length_mod) {
    12c0:	1ecb      	subs	r3, r1, #3
    12c2:	2b04      	cmp	r3, #4
    12c4:	d822      	bhi.n	130c <CONFIG_FPROTECT_BLOCK_SIZE+0x30c>
    12c6:	e8df f003 	tbb	[pc, r3]
    12ca:	0903      	.short	0x0903
    12cc:	2109      	.short	0x2109
    12ce:	21          	.byte	0x21
    12cf:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    12d0:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    12d4:	17da      	asrs	r2, r3, #31
    12d6:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
    12da:	e006      	b.n	12ea <CONFIG_FPROTECT_BLOCK_SIZE+0x2ea>
					(sint_value_type)va_arg(ap, intmax_t);
    12dc:	3407      	adds	r4, #7
    12de:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    12e2:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    12e6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    12ea:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    12ee:	f013 0603 	ands.w	r6, r3, #3
    12f2:	d056      	beq.n	13a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x3a2>
			OUTS(sp, fp);
    12f4:	9802      	ldr	r0, [sp, #8]
    12f6:	463b      	mov	r3, r7
    12f8:	4652      	mov	r2, sl
    12fa:	4659      	mov	r1, fp
    12fc:	f009 f8f2 	bl	a4e4 <outs>
    1300:	2800      	cmp	r0, #0
    1302:	f2c0 8142 	blt.w	158a <CONFIG_FPROTECT_BLOCK_SIZE+0x58a>
    1306:	4405      	add	r5, r0
			continue;
    1308:	46ba      	mov	sl, r7
    130a:	e5d9      	b.n	ec0 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    130c:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    1310:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    1312:	ea4f 72e3 	mov.w	r2, r3, asr #31
    1316:	e9cd 320a 	strd	r3, r2, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    131a:	d105      	bne.n	1328 <CONFIG_FPROTECT_BLOCK_SIZE+0x328>
				value->uint = (unsigned char)value->uint;
    131c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    1320:	930a      	str	r3, [sp, #40]	; 0x28
    1322:	2300      	movs	r3, #0
    1324:	930b      	str	r3, [sp, #44]	; 0x2c
    1326:	e7e0      	b.n	12ea <CONFIG_FPROTECT_BLOCK_SIZE+0x2ea>
			} else if (length_mod == LENGTH_H) {
    1328:	2902      	cmp	r1, #2
    132a:	d1de      	bne.n	12ea <CONFIG_FPROTECT_BLOCK_SIZE+0x2ea>
				value->sint = (short)value->sint;
    132c:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
    1330:	e7d0      	b.n	12d4 <CONFIG_FPROTECT_BLOCK_SIZE+0x2d4>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1332:	2b02      	cmp	r3, #2
    1334:	d123      	bne.n	137e <CONFIG_FPROTECT_BLOCK_SIZE+0x37e>
			switch (length_mod) {
    1336:	1ecb      	subs	r3, r1, #3
    1338:	2b04      	cmp	r3, #4
    133a:	d813      	bhi.n	1364 <CONFIG_FPROTECT_BLOCK_SIZE+0x364>
    133c:	e8df f003 	tbb	[pc, r3]
    1340:	120a0a03 	.word	0x120a0a03
    1344:	12          	.byte	0x12
    1345:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    1346:	6822      	ldr	r2, [r4, #0]
    1348:	920a      	str	r2, [sp, #40]	; 0x28
    134a:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    134c:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    134e:	930b      	str	r3, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    1350:	4604      	mov	r4, r0
    1352:	e7ca      	b.n	12ea <CONFIG_FPROTECT_BLOCK_SIZE+0x2ea>
					(uint_value_type)va_arg(ap,
    1354:	1de0      	adds	r0, r4, #7
    1356:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    135a:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    135e:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				break;
    1362:	e7f5      	b.n	1350 <CONFIG_FPROTECT_BLOCK_SIZE+0x350>
					(uint_value_type)va_arg(ap, size_t);
    1364:	f854 3b04 	ldr.w	r3, [r4], #4
    1368:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    136a:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    136c:	f04f 0300 	mov.w	r3, #0
    1370:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    1372:	d0d3      	beq.n	131c <CONFIG_FPROTECT_BLOCK_SIZE+0x31c>
			} else if (length_mod == LENGTH_H) {
    1374:	2902      	cmp	r1, #2
    1376:	d1b8      	bne.n	12ea <CONFIG_FPROTECT_BLOCK_SIZE+0x2ea>
				value->uint = (unsigned short)value->uint;
    1378:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    137c:	e7d0      	b.n	1320 <CONFIG_FPROTECT_BLOCK_SIZE+0x320>
		} else if (specifier_cat == SPECIFIER_FP) {
    137e:	2b04      	cmp	r3, #4
    1380:	d109      	bne.n	1396 <CONFIG_FPROTECT_BLOCK_SIZE+0x396>
					(sint_value_type)va_arg(ap, long long);
    1382:	1de3      	adds	r3, r4, #7
    1384:	f023 0307 	bic.w	r3, r3, #7
    1388:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    138c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1390:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
    1394:	e7a9      	b.n	12ea <CONFIG_FPROTECT_BLOCK_SIZE+0x2ea>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1396:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1398:	bf04      	itt	eq
    139a:	f854 3b04 	ldreq.w	r3, [r4], #4
    139e:	930a      	streq	r3, [sp, #40]	; 0x28
    13a0:	e7a3      	b.n	12ea <CONFIG_FPROTECT_BLOCK_SIZE+0x2ea>
		switch (conv->specifier) {
    13a2:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    13a6:	2878      	cmp	r0, #120	; 0x78
    13a8:	d8ae      	bhi.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
    13aa:	2862      	cmp	r0, #98	; 0x62
    13ac:	d822      	bhi.n	13f4 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f4>
    13ae:	2825      	cmp	r0, #37	; 0x25
    13b0:	f43f ad8f 	beq.w	ed2 <cbvprintf+0x22>
    13b4:	2858      	cmp	r0, #88	; 0x58
    13b6:	d1a7      	bne.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
			bps = encode_uint(value->uint, conv, buf, bpe);
    13b8:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    13bc:	9300      	str	r3, [sp, #0]
    13be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    13c2:	ab04      	add	r3, sp, #16
    13c4:	aa0c      	add	r2, sp, #48	; 0x30
    13c6:	f009 f847 	bl	a458 <encode_uint>
    13ca:	4682      	mov	sl, r0
			if (precision >= 0) {
    13cc:	f1b8 0f00 	cmp.w	r8, #0
    13d0:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    13d4:	db0c      	blt.n	13f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f0>
				conv->flag_zero = false;
    13d6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    13da:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    13de:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    13e2:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    13e4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    13e8:	d902      	bls.n	13f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x3f0>
					conv->pad0_value = precision - (int)len;
    13ea:	eba8 0303 	sub.w	r3, r8, r3
    13ee:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    13f0:	4680      	mov	r8, r0
    13f2:	e03d      	b.n	1470 <CONFIG_FPROTECT_BLOCK_SIZE+0x470>
		switch (conv->specifier) {
    13f4:	3863      	subs	r0, #99	; 0x63
    13f6:	2815      	cmp	r0, #21
    13f8:	d886      	bhi.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
    13fa:	a201      	add	r2, pc, #4	; (adr r2, 1400 <CONFIG_FPROTECT_BLOCK_SIZE+0x400>)
    13fc:	f852 f020 	ldr.w	pc, [r2, r0, lsl #2]
    1400:	00001481 	.word	0x00001481
    1404:	000014e5 	.word	0x000014e5
    1408:	00001309 	.word	0x00001309
    140c:	00001309 	.word	0x00001309
    1410:	00001309 	.word	0x00001309
    1414:	00001309 	.word	0x00001309
    1418:	000014e5 	.word	0x000014e5
    141c:	00001309 	.word	0x00001309
    1420:	00001309 	.word	0x00001309
    1424:	00001309 	.word	0x00001309
    1428:	00001309 	.word	0x00001309
    142c:	0000153f 	.word	0x0000153f
    1430:	0000150d 	.word	0x0000150d
    1434:	00001511 	.word	0x00001511
    1438:	00001309 	.word	0x00001309
    143c:	00001309 	.word	0x00001309
    1440:	00001459 	.word	0x00001459
    1444:	00001309 	.word	0x00001309
    1448:	0000150d 	.word	0x0000150d
    144c:	00001309 	.word	0x00001309
    1450:	00001309 	.word	0x00001309
    1454:	0000150d 	.word	0x0000150d
			if (precision >= 0) {
    1458:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    145c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1460:	db0a      	blt.n	1478 <CONFIG_FPROTECT_BLOCK_SIZE+0x478>
				len = strnlen(bps, precision);
    1462:	4641      	mov	r1, r8
    1464:	4650      	mov	r0, sl
    1466:	f009 fb84 	bl	ab72 <strnlen>
			bpe = bps + len;
    146a:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    146e:	2600      	movs	r6, #0
		if (bps == NULL) {
    1470:	f1ba 0f00 	cmp.w	sl, #0
    1474:	d10c      	bne.n	1490 <CONFIG_FPROTECT_BLOCK_SIZE+0x490>
    1476:	e747      	b.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
				len = strlen(bps);
    1478:	4650      	mov	r0, sl
    147a:	f009 fb73 	bl	ab64 <strlen>
    147e:	e7f4      	b.n	146a <CONFIG_FPROTECT_BLOCK_SIZE+0x46a>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1480:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1482:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    1486:	2600      	movs	r6, #0
			bps = buf;
    1488:	f10d 0a10 	add.w	sl, sp, #16
			bpe = buf + 1;
    148c:	f10d 0811 	add.w	r8, sp, #17
		size_t nj_len = (bpe - bps);
    1490:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1494:	b106      	cbz	r6, 1498 <CONFIG_FPROTECT_BLOCK_SIZE+0x498>
			nj_len += 1U;
    1496:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1498:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    149c:	06d0      	lsls	r0, r2, #27
    149e:	d568      	bpl.n	1572 <CONFIG_FPROTECT_BLOCK_SIZE+0x572>
			nj_len += 2U;
    14a0:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    14a2:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    14a4:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    14a6:	bf48      	it	mi
    14a8:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    14aa:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    14ac:	bf48      	it	mi
    14ae:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    14b0:	f1b9 0f00 	cmp.w	r9, #0
    14b4:	dd76      	ble.n	15a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5a4>
			if (!conv->flag_dash) {
    14b6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    14ba:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    14be:	f3c2 0380 	ubfx	r3, r2, #2, #1
    14c2:	9303      	str	r3, [sp, #12]
    14c4:	0753      	lsls	r3, r2, #29
    14c6:	d46d      	bmi.n	15a4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5a4>
				if (conv->flag_zero) {
    14c8:	0650      	lsls	r0, r2, #25
    14ca:	d561      	bpl.n	1590 <CONFIG_FPROTECT_BLOCK_SIZE+0x590>
					if (sign != 0) {
    14cc:	b146      	cbz	r6, 14e0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4e0>
						OUTC(sign);
    14ce:	9b02      	ldr	r3, [sp, #8]
    14d0:	4659      	mov	r1, fp
    14d2:	4630      	mov	r0, r6
    14d4:	4798      	blx	r3
    14d6:	2800      	cmp	r0, #0
    14d8:	db57      	blt.n	158a <CONFIG_FPROTECT_BLOCK_SIZE+0x58a>
						sign = 0;
    14da:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    14dc:	3501      	adds	r5, #1
						sign = 0;
    14de:	461e      	mov	r6, r3
					pad = '0';
    14e0:	2330      	movs	r3, #48	; 0x30
    14e2:	e056      	b.n	1592 <CONFIG_FPROTECT_BLOCK_SIZE+0x592>
			if (conv->flag_plus) {
    14e4:	071e      	lsls	r6, r3, #28
    14e6:	d40f      	bmi.n	1508 <CONFIG_FPROTECT_BLOCK_SIZE+0x508>
				sign = ' ';
    14e8:	f013 0610 	ands.w	r6, r3, #16
    14ec:	bf18      	it	ne
    14ee:	2620      	movne	r6, #32
			sint = value->sint;
    14f0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    14f4:	2b00      	cmp	r3, #0
    14f6:	f6bf af5f 	bge.w	13b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b8>
				value->uint = (uint_value_type)-sint;
    14fa:	4252      	negs	r2, r2
    14fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1500:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    1504:	262d      	movs	r6, #45	; 0x2d
    1506:	e757      	b.n	13b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b8>
				sign = '+';
    1508:	262b      	movs	r6, #43	; 0x2b
    150a:	e7f1      	b.n	14f0 <CONFIG_FPROTECT_BLOCK_SIZE+0x4f0>
		switch (conv->specifier) {
    150c:	2600      	movs	r6, #0
    150e:	e753      	b.n	13b8 <CONFIG_FPROTECT_BLOCK_SIZE+0x3b8>
			if (value->ptr != NULL) {
    1510:	980a      	ldr	r0, [sp, #40]	; 0x28
    1512:	b340      	cbz	r0, 1566 <CONFIG_FPROTECT_BLOCK_SIZE+0x566>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1514:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1518:	9300      	str	r3, [sp, #0]
    151a:	aa0c      	add	r2, sp, #48	; 0x30
    151c:	ab04      	add	r3, sp, #16
    151e:	2100      	movs	r1, #0
    1520:	f008 ff9a 	bl	a458 <encode_uint>
				conv->altform_0c = true;
    1524:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    1528:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    152c:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1530:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1534:	4682      	mov	sl, r0
				conv->altform_0c = true;
    1536:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    153a:	2600      	movs	r6, #0
				goto prec_int_pad0;
    153c:	e746      	b.n	13cc <CONFIG_FPROTECT_BLOCK_SIZE+0x3cc>
				store_count(conv, value->ptr, count);
    153e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1540:	2907      	cmp	r1, #7
    1542:	f63f aee1 	bhi.w	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
    1546:	e8df f001 	tbb	[pc, r1]
    154a:	040c      	.short	0x040c
    154c:	08080c06 	.word	0x08080c06
    1550:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    1552:	701d      	strb	r5, [r3, #0]
		break;
    1554:	e6d8      	b.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
		*(short *)dp = (short)count;
    1556:	801d      	strh	r5, [r3, #0]
		break;
    1558:	e6d6      	b.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
		*(intmax_t *)dp = (intmax_t)count;
    155a:	17ea      	asrs	r2, r5, #31
    155c:	e9c3 5200 	strd	r5, r2, [r3]
		break;
    1560:	e6d2      	b.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1562:	601d      	str	r5, [r3, #0]
		break;
    1564:	e6d0      	b.n	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
			bps = "(nil)";
    1566:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 1630 <CONFIG_FPROTECT_BLOCK_SIZE+0x630>
    156a:	4606      	mov	r6, r0
			bpe = bps + 5;
    156c:	f10a 0805 	add.w	r8, sl, #5
    1570:	e78e      	b.n	1490 <CONFIG_FPROTECT_BLOCK_SIZE+0x490>
		} else if (conv->altform_0) {
    1572:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1574:	bf48      	it	mi
    1576:	3301      	addmi	r3, #1
    1578:	e793      	b.n	14a2 <CONFIG_FPROTECT_BLOCK_SIZE+0x4a2>
					OUTC(pad);
    157a:	4618      	mov	r0, r3
    157c:	9303      	str	r3, [sp, #12]
    157e:	4659      	mov	r1, fp
    1580:	9b02      	ldr	r3, [sp, #8]
    1582:	4798      	blx	r3
    1584:	2800      	cmp	r0, #0
    1586:	9b03      	ldr	r3, [sp, #12]
    1588:	da04      	bge.n	1594 <CONFIG_FPROTECT_BLOCK_SIZE+0x594>
#undef OUTS
#undef OUTC
}
    158a:	b011      	add	sp, #68	; 0x44
    158c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1590:	2320      	movs	r3, #32
    1592:	444d      	add	r5, r9
    1594:	464a      	mov	r2, r9
				while (width-- > 0) {
    1596:	2a00      	cmp	r2, #0
    1598:	eba5 0109 	sub.w	r1, r5, r9
    159c:	f109 39ff 	add.w	r9, r9, #4294967295
    15a0:	dceb      	bgt.n	157a <CONFIG_FPROTECT_BLOCK_SIZE+0x57a>
    15a2:	460d      	mov	r5, r1
		if (sign != 0) {
    15a4:	b136      	cbz	r6, 15b4 <CONFIG_FPROTECT_BLOCK_SIZE+0x5b4>
			OUTC(sign);
    15a6:	9b02      	ldr	r3, [sp, #8]
    15a8:	4659      	mov	r1, fp
    15aa:	4630      	mov	r0, r6
    15ac:	4798      	blx	r3
    15ae:	2800      	cmp	r0, #0
    15b0:	dbeb      	blt.n	158a <CONFIG_FPROTECT_BLOCK_SIZE+0x58a>
    15b2:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    15b4:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    15b8:	06d9      	lsls	r1, r3, #27
    15ba:	d401      	bmi.n	15c0 <CONFIG_FPROTECT_BLOCK_SIZE+0x5c0>
    15bc:	071a      	lsls	r2, r3, #28
    15be:	d506      	bpl.n	15ce <CONFIG_FPROTECT_BLOCK_SIZE+0x5ce>
				OUTC('0');
    15c0:	9b02      	ldr	r3, [sp, #8]
    15c2:	4659      	mov	r1, fp
    15c4:	2030      	movs	r0, #48	; 0x30
    15c6:	4798      	blx	r3
    15c8:	2800      	cmp	r0, #0
    15ca:	dbde      	blt.n	158a <CONFIG_FPROTECT_BLOCK_SIZE+0x58a>
    15cc:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    15ce:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    15d2:	06db      	lsls	r3, r3, #27
    15d4:	d507      	bpl.n	15e6 <CONFIG_FPROTECT_BLOCK_SIZE+0x5e6>
				OUTC(conv->specifier);
    15d6:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    15da:	9b02      	ldr	r3, [sp, #8]
    15dc:	4659      	mov	r1, fp
    15de:	4798      	blx	r3
    15e0:	2800      	cmp	r0, #0
    15e2:	dbd2      	blt.n	158a <CONFIG_FPROTECT_BLOCK_SIZE+0x58a>
    15e4:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    15e6:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    15e8:	442e      	add	r6, r5
    15ea:	1b73      	subs	r3, r6, r5
    15ec:	2b00      	cmp	r3, #0
    15ee:	dc16      	bgt.n	161e <CONFIG_FPROTECT_BLOCK_SIZE+0x61e>
			OUTS(bps, bpe);
    15f0:	9802      	ldr	r0, [sp, #8]
    15f2:	4643      	mov	r3, r8
    15f4:	4652      	mov	r2, sl
    15f6:	4659      	mov	r1, fp
    15f8:	f008 ff74 	bl	a4e4 <outs>
    15fc:	2800      	cmp	r0, #0
    15fe:	dbc4      	blt.n	158a <CONFIG_FPROTECT_BLOCK_SIZE+0x58a>
    1600:	4405      	add	r5, r0
		while (width > 0) {
    1602:	44a9      	add	r9, r5
    1604:	eba9 0305 	sub.w	r3, r9, r5
    1608:	2b00      	cmp	r3, #0
    160a:	f77f ae7d 	ble.w	1308 <CONFIG_FPROTECT_BLOCK_SIZE+0x308>
			OUTC(' ');
    160e:	9b02      	ldr	r3, [sp, #8]
    1610:	4659      	mov	r1, fp
    1612:	2020      	movs	r0, #32
    1614:	4798      	blx	r3
    1616:	2800      	cmp	r0, #0
    1618:	dbb7      	blt.n	158a <CONFIG_FPROTECT_BLOCK_SIZE+0x58a>
    161a:	3501      	adds	r5, #1
			--width;
    161c:	e7f2      	b.n	1604 <CONFIG_FPROTECT_BLOCK_SIZE+0x604>
				OUTC('0');
    161e:	9b02      	ldr	r3, [sp, #8]
    1620:	4659      	mov	r1, fp
    1622:	2030      	movs	r0, #48	; 0x30
    1624:	4798      	blx	r3
    1626:	2800      	cmp	r0, #0
    1628:	dbaf      	blt.n	158a <CONFIG_FPROTECT_BLOCK_SIZE+0x58a>
    162a:	3501      	adds	r5, #1
    162c:	e7dd      	b.n	15ea <CONFIG_FPROTECT_BLOCK_SIZE+0x5ea>
    162e:	bf00      	nop
    1630:	0000c286 	.word	0x0000c286

00001634 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    1634:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    1636:	4910      	ldr	r1, [pc, #64]	; (1678 <enable_logger+0x44>)
    1638:	4810      	ldr	r0, [pc, #64]	; (167c <enable_logger+0x48>)
{
    163a:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    163c:	2200      	movs	r2, #0
    163e:	f00a f9de 	bl	b9fe <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    1642:	4d0f      	ldr	r5, [pc, #60]	; (1680 <enable_logger+0x4c>)
    1644:	490f      	ldr	r1, [pc, #60]	; (1684 <enable_logger+0x50>)
    1646:	2200      	movs	r2, #0
    1648:	2300      	movs	r3, #0
    164a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    164e:	2400      	movs	r4, #0
    1650:	230e      	movs	r3, #14
    1652:	e9cd 3403 	strd	r3, r4, [sp, #12]
    1656:	e9cd 4401 	strd	r4, r4, [sp, #4]
    165a:	4b0b      	ldr	r3, [pc, #44]	; (1688 <enable_logger+0x54>)
    165c:	9400      	str	r4, [sp, #0]
    165e:	f44f 7240 	mov.w	r2, #768	; 0x300
    1662:	4628      	mov	r0, r5
    1664:	f007 fa9a 	bl	8b9c <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread, str);
    1668:	4908      	ldr	r1, [pc, #32]	; (168c <enable_logger+0x58>)
    166a:	4628      	mov	r0, r5
    166c:	f009 ff44 	bl	b4f8 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    1670:	4620      	mov	r0, r4
    1672:	b009      	add	sp, #36	; 0x24
    1674:	bd30      	pop	{r4, r5, pc}
    1676:	bf00      	nop
    1678:	00001691 	.word	0x00001691
    167c:	20000768 	.word	0x20000768
    1680:	200007a0 	.word	0x200007a0
    1684:	20002100 	.word	0x20002100
    1688:	000018b5 	.word	0x000018b5
    168c:	0000c28c 	.word	0x0000c28c

00001690 <log_process_thread_timer_expiry_fn>:
		(void) arch_syscall_invoke1(parm0.x, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    1690:	4801      	ldr	r0, [pc, #4]	; (1698 <log_process_thread_timer_expiry_fn+0x8>)
    1692:	f007 bc15 	b.w	8ec0 <z_impl_k_sem_give>
    1696:	bf00      	nop
    1698:	20000180 	.word	0x20000180

0000169c <log_format_func_t_get>:
}
    169c:	4b01      	ldr	r3, [pc, #4]	; (16a4 <log_format_func_t_get+0x8>)
    169e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    16a2:	4770      	bx	lr
    16a4:	0000bec8 	.word	0x0000bec8

000016a8 <log_init>:
{
    16a8:	b570      	push	{r4, r5, r6, lr}
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_add(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    16aa:	4b12      	ldr	r3, [pc, #72]	; (16f4 <log_init+0x4c>)
    16ac:	f3bf 8f5b 	dmb	ish
    16b0:	e853 5f00 	ldrex	r5, [r3]
    16b4:	1c6a      	adds	r2, r5, #1
    16b6:	e843 2100 	strex	r1, r2, [r3]
    16ba:	2900      	cmp	r1, #0
    16bc:	d1f8      	bne.n	16b0 <log_init+0x8>
    16be:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    16c2:	b92d      	cbnz	r5, 16d0 <log_init+0x28>
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    16c4:	4c0c      	ldr	r4, [pc, #48]	; (16f8 <log_init+0x50>)
    16c6:	4e0d      	ldr	r6, [pc, #52]	; (16fc <log_init+0x54>)
    16c8:	1b36      	subs	r6, r6, r4
    16ca:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    16cc:	42b5      	cmp	r5, r6
    16ce:	db00      	blt.n	16d2 <log_init+0x2a>
}
    16d0:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    16d2:	7b23      	ldrb	r3, [r4, #12]
    16d4:	b153      	cbz	r3, 16ec <log_init+0x44>
			if (backend->api->init != NULL) {
    16d6:	6823      	ldr	r3, [r4, #0]
    16d8:	699b      	ldr	r3, [r3, #24]
    16da:	b10b      	cbz	r3, 16e0 <log_init+0x38>
				backend->api->init(backend);
    16dc:	4620      	mov	r0, r4
    16de:	4798      	blx	r3
			log_backend_enable(backend,
    16e0:	6863      	ldr	r3, [r4, #4]
    16e2:	2204      	movs	r2, #4
    16e4:	6819      	ldr	r1, [r3, #0]
    16e6:	4620      	mov	r0, r4
    16e8:	f000 f992 	bl	1a10 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    16ec:	3501      	adds	r5, #1
    16ee:	3410      	adds	r4, #16
    16f0:	e7ec      	b.n	16cc <log_init+0x24>
    16f2:	bf00      	nop
    16f4:	20000b24 	.word	0x20000b24
    16f8:	0000be70 	.word	0x0000be70
    16fc:	0000be80 	.word	0x0000be80

00001700 <z_log_notify_backend_enabled>:
{
    1700:	b510      	push	{r4, lr}
	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD) && !backend_attached) {
    1702:	4c04      	ldr	r4, [pc, #16]	; (1714 <z_log_notify_backend_enabled+0x14>)
    1704:	7823      	ldrb	r3, [r4, #0]
    1706:	b913      	cbnz	r3, 170e <z_log_notify_backend_enabled+0xe>
    1708:	4803      	ldr	r0, [pc, #12]	; (1718 <z_log_notify_backend_enabled+0x18>)
    170a:	f007 fbd9 	bl	8ec0 <z_impl_k_sem_give>
	backend_attached = true;
    170e:	2301      	movs	r3, #1
    1710:	7023      	strb	r3, [r4, #0]
}
    1712:	bd10      	pop	{r4, pc}
    1714:	20001a8a 	.word	0x20001a8a
    1718:	20000180 	.word	0x20000180

0000171c <z_log_dropped>:
    171c:	4b0c      	ldr	r3, [pc, #48]	; (1750 <z_log_dropped+0x34>)
    171e:	f3bf 8f5b 	dmb	ish
    1722:	e853 2f00 	ldrex	r2, [r3]
    1726:	3201      	adds	r2, #1
    1728:	e843 2100 	strex	r1, r2, [r3]
    172c:	2900      	cmp	r1, #0
    172e:	d1f8      	bne.n	1722 <z_log_dropped+0x6>
    1730:	f3bf 8f5b 	dmb	ish
	if (buffered) {
    1734:	b158      	cbz	r0, 174e <z_log_dropped+0x32>
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_sub(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    1736:	f3bf 8f5b 	dmb	ish
    173a:	4b06      	ldr	r3, [pc, #24]	; (1754 <z_log_dropped+0x38>)
    173c:	e853 2f00 	ldrex	r2, [r3]
    1740:	3a01      	subs	r2, #1
    1742:	e843 2100 	strex	r1, r2, [r3]
    1746:	2900      	cmp	r1, #0
    1748:	d1f8      	bne.n	173c <z_log_dropped+0x20>
    174a:	f3bf 8f5b 	dmb	ish
}
    174e:	4770      	bx	lr
    1750:	20000b20 	.word	0x20000b20
    1754:	20000b1c 	.word	0x20000b1c

00001758 <z_log_dropped_read_and_clear>:
}
    1758:	2000      	movs	r0, #0
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    175a:	4b06      	ldr	r3, [pc, #24]	; (1774 <z_log_dropped_read_and_clear+0x1c>)
    175c:	f3bf 8f5b 	dmb	ish
    1760:	4602      	mov	r2, r0
    1762:	e853 0f00 	ldrex	r0, [r3]
    1766:	e843 2100 	strex	r1, r2, [r3]
    176a:	2900      	cmp	r1, #0
    176c:	d1f9      	bne.n	1762 <z_log_dropped_read_and_clear+0xa>
    176e:	f3bf 8f5b 	dmb	ish
    1772:	4770      	bx	lr
    1774:	20000b20 	.word	0x20000b20

00001778 <dropped_notify>:
{
    1778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t dropped = z_log_dropped_read_and_clear();
    177a:	f7ff ffed 	bl	1758 <z_log_dropped_read_and_clear>
    177e:	4c0a      	ldr	r4, [pc, #40]	; (17a8 <dropped_notify+0x30>)
    1780:	4d0a      	ldr	r5, [pc, #40]	; (17ac <dropped_notify+0x34>)
    1782:	1b2d      	subs	r5, r5, r4
    1784:	4607      	mov	r7, r0
    1786:	112d      	asrs	r5, r5, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    1788:	2600      	movs	r6, #0
    178a:	42ae      	cmp	r6, r5
    178c:	db00      	blt.n	1790 <dropped_notify+0x18>
}
    178e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    1790:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    1792:	795b      	ldrb	r3, [r3, #5]
    1794:	b12b      	cbz	r3, 17a2 <dropped_notify+0x2a>
	if (backend->api->dropped != NULL) {
    1796:	6823      	ldr	r3, [r4, #0]
    1798:	691b      	ldr	r3, [r3, #16]
    179a:	b113      	cbz	r3, 17a2 <dropped_notify+0x2a>
		backend->api->dropped(backend, cnt);
    179c:	4639      	mov	r1, r7
    179e:	4620      	mov	r0, r4
    17a0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    17a2:	3601      	adds	r6, #1
    17a4:	3410      	adds	r4, #16
    17a6:	e7f0      	b.n	178a <dropped_notify+0x12>
    17a8:	0000be70 	.word	0x0000be70
    17ac:	0000be80 	.word	0x0000be80

000017b0 <z_log_msg2_init>:
	mpsc_pbuf_init(&log_buffer, &mpsc_config);
    17b0:	4901      	ldr	r1, [pc, #4]	; (17b8 <z_log_msg2_init+0x8>)
    17b2:	4802      	ldr	r0, [pc, #8]	; (17bc <z_log_msg2_init+0xc>)
    17b4:	f008 bf61 	b.w	a67a <mpsc_pbuf_init>
    17b8:	0000bed4 	.word	0x0000bed4
    17bc:	20000b28 	.word	0x20000b28

000017c0 <log_core_init>:
	panic_mode = false;
    17c0:	4a08      	ldr	r2, [pc, #32]	; (17e4 <log_core_init+0x24>)
{
    17c2:	b508      	push	{r3, lr}
	panic_mode = false;
    17c4:	2300      	movs	r3, #0
    17c6:	7013      	strb	r3, [r2, #0]
	dropped_cnt = 0;
    17c8:	4a07      	ldr	r2, [pc, #28]	; (17e8 <log_core_init+0x28>)
    17ca:	6013      	str	r3, [r2, #0]
	timestamp_func = timestamp_getter;
    17cc:	4b07      	ldr	r3, [pc, #28]	; (17ec <log_core_init+0x2c>)
    17ce:	4a08      	ldr	r2, [pc, #32]	; (17f0 <log_core_init+0x30>)
    17d0:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    17d2:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    17d6:	f000 fafb 	bl	1dd0 <log_output_timestamp_freq_set>
}
    17da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		z_log_msg2_init();
    17de:	f7ff bfe7 	b.w	17b0 <z_log_msg2_init>
    17e2:	bf00      	nop
    17e4:	20001a8b 	.word	0x20001a8b
    17e8:	20000b20 	.word	0x20000b20
    17ec:	20000004 	.word	0x20000004
    17f0:	0000a923 	.word	0x0000a923

000017f4 <z_log_msg2_alloc>:
{
    17f4:	4601      	mov	r1, r0
	return (struct log_msg2 *)mpsc_pbuf_alloc(&log_buffer, wlen,
    17f6:	2200      	movs	r2, #0
    17f8:	4801      	ldr	r0, [pc, #4]	; (1800 <z_log_msg2_alloc+0xc>)
    17fa:	2300      	movs	r3, #0
    17fc:	f008 bf5e 	b.w	a6bc <mpsc_pbuf_alloc>
    1800:	20000b28 	.word	0x20000b28

00001804 <z_log_msg2_claim>:
	return (union log_msg2_generic *)mpsc_pbuf_claim(&log_buffer);
    1804:	4801      	ldr	r0, [pc, #4]	; (180c <z_log_msg2_claim+0x8>)
    1806:	f008 bfef 	b.w	a7e8 <mpsc_pbuf_claim>
    180a:	bf00      	nop
    180c:	20000b28 	.word	0x20000b28

00001810 <z_log_msg2_free>:
{
    1810:	4601      	mov	r1, r0
	mpsc_pbuf_free(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1812:	4801      	ldr	r0, [pc, #4]	; (1818 <z_log_msg2_free+0x8>)
    1814:	f009 b834 	b.w	a880 <mpsc_pbuf_free>
    1818:	20000b28 	.word	0x20000b28

0000181c <z_log_msg2_pending>:
	return mpsc_pbuf_is_pending(&log_buffer);
    181c:	4801      	ldr	r0, [pc, #4]	; (1824 <z_log_msg2_pending+0x8>)
    181e:	f009 b863 	b.w	a8e8 <mpsc_pbuf_is_pending>
    1822:	bf00      	nop
    1824:	20000b28 	.word	0x20000b28

00001828 <z_impl_log_process>:
	if (!backend_attached && !bypass) {
    1828:	4b1d      	ldr	r3, [pc, #116]	; (18a0 <z_impl_log_process+0x78>)
    182a:	781b      	ldrb	r3, [r3, #0]
{
    182c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1830:	4605      	mov	r5, r0
	if (!backend_attached && !bypass) {
    1832:	b903      	cbnz	r3, 1836 <z_impl_log_process+0xe>
    1834:	b388      	cbz	r0, 189a <z_impl_log_process+0x72>
	msg = get_msg();
    1836:	f009 f889 	bl	a94c <get_msg>
	if (msg.msg) {
    183a:	4606      	mov	r6, r0
    183c:	b118      	cbz	r0, 1846 <z_impl_log_process+0x1e>
		if (!bypass) {
    183e:	b16d      	cbz	r5, 185c <z_impl_log_process+0x34>
		z_log_msg2_free(msg.msg2);
    1840:	4630      	mov	r0, r6
    1842:	f7ff ffe5 	bl	1810 <z_log_msg2_free>
	if (!bypass && z_log_dropped_pending()) {
    1846:	b92d      	cbnz	r5, 1854 <z_impl_log_process+0x2c>
	return dropped_cnt > 0;
    1848:	4b16      	ldr	r3, [pc, #88]	; (18a4 <z_impl_log_process+0x7c>)
	if (!bypass && z_log_dropped_pending()) {
    184a:	681b      	ldr	r3, [r3, #0]
    184c:	2b00      	cmp	r3, #0
    184e:	dd01      	ble.n	1854 <z_impl_log_process+0x2c>
		dropped_notify();
    1850:	f7ff ff92 	bl	1778 <dropped_notify>
}
    1854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return z_log_msg2_pending();
    1858:	f7ff bfe0 	b.w	181c <z_log_msg2_pending>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    185c:	4b12      	ldr	r3, [pc, #72]	; (18a8 <z_impl_log_process+0x80>)
    185e:	f3bf 8f5b 	dmb	ish
    1862:	e853 2f00 	ldrex	r2, [r3]
    1866:	3a01      	subs	r2, #1
    1868:	e843 2100 	strex	r1, r2, [r3]
    186c:	2900      	cmp	r1, #0
    186e:	d1f8      	bne.n	1862 <z_impl_log_process+0x3a>
    1870:	f3bf 8f5b 	dmb	ish
	return __log_backends_end - __log_backends_start;
    1874:	4c0d      	ldr	r4, [pc, #52]	; (18ac <z_impl_log_process+0x84>)
    1876:	4f0e      	ldr	r7, [pc, #56]	; (18b0 <z_impl_log_process+0x88>)
    1878:	1b3f      	subs	r7, r7, r4
    187a:	113f      	asrs	r7, r7, #4
    187c:	46a8      	mov	r8, r5
		for (int i = 0; i < log_backend_count_get(); i++) {
    187e:	45b8      	cmp	r8, r7
    1880:	dade      	bge.n	1840 <z_impl_log_process+0x18>
	return backend->cb->active;
    1882:	6863      	ldr	r3, [r4, #4]
			if (log_backend_is_active(backend) &&
    1884:	795b      	ldrb	r3, [r3, #5]
    1886:	b123      	cbz	r3, 1892 <z_impl_log_process+0x6a>
	backend->api->process(backend, msg);
    1888:	6823      	ldr	r3, [r4, #0]
    188a:	4631      	mov	r1, r6
    188c:	681b      	ldr	r3, [r3, #0]
    188e:	4620      	mov	r0, r4
    1890:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    1892:	f108 0801 	add.w	r8, r8, #1
    1896:	3410      	adds	r4, #16
    1898:	e7f1      	b.n	187e <z_impl_log_process+0x56>
}
    189a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    189e:	bf00      	nop
    18a0:	20001a8a 	.word	0x20001a8a
    18a4:	20000b20 	.word	0x20000b20
    18a8:	20000b1c 	.word	0x20000b1c
    18ac:	0000be70 	.word	0x0000be70
    18b0:	0000be80 	.word	0x0000be80

000018b4 <log_process_thread_func>:
{
    18b4:	b510      	push	{r4, lr}
	log_init();
    18b6:	f7ff fef7 	bl	16a8 <log_init>
	return z_impl_z_current_get();
    18ba:	f007 ffa9 	bl	9810 <z_impl_z_current_get>
	proc_tid = process_tid;
    18be:	4b0c      	ldr	r3, [pc, #48]	; (18f0 <log_process_thread_func+0x3c>)
    18c0:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    18c2:	b130      	cbz	r0, 18d2 <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    18c4:	4b0b      	ldr	r3, [pc, #44]	; (18f4 <log_process_thread_func+0x40>)
	    process_tid &&
    18c6:	681b      	ldr	r3, [r3, #0]
    18c8:	2b09      	cmp	r3, #9
    18ca:	dd02      	ble.n	18d2 <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    18cc:	480a      	ldr	r0, [pc, #40]	; (18f8 <log_process_thread_func+0x44>)
    18ce:	f007 faf7 	bl	8ec0 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    18d2:	4c09      	ldr	r4, [pc, #36]	; (18f8 <log_process_thread_func+0x44>)
		union { uintptr_t x; bool val; } parm0 = { .val = bypass };
		return (bool) arch_syscall_invoke1(parm0.x, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    18d4:	2000      	movs	r0, #0
    18d6:	f7ff ffa7 	bl	1828 <z_impl_log_process>
		if (log_process(false) == false) {
    18da:	2800      	cmp	r0, #0
    18dc:	d1fa      	bne.n	18d4 <log_process_thread_func+0x20>
    18de:	f04f 32ff 	mov.w	r2, #4294967295
    18e2:	f04f 33ff 	mov.w	r3, #4294967295
    18e6:	4620      	mov	r0, r4
    18e8:	f007 fb0a 	bl	8f00 <z_impl_k_sem_take>
    18ec:	e7f2      	b.n	18d4 <log_process_thread_func+0x20>
    18ee:	bf00      	nop
    18f0:	20000b60 	.word	0x20000b60
    18f4:	20000b1c 	.word	0x20000b1c
    18f8:	20000180 	.word	0x20000180

000018fc <z_log_msg_post_finalize>:
{
    18fc:	b513      	push	{r0, r1, r4, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    18fe:	4b1d      	ldr	r3, [pc, #116]	; (1974 <z_log_msg_post_finalize+0x78>)
    1900:	f3bf 8f5b 	dmb	ish
    1904:	e853 2f00 	ldrex	r2, [r3]
    1908:	1c51      	adds	r1, r2, #1
    190a:	e843 1000 	strex	r0, r1, [r3]
    190e:	2800      	cmp	r0, #0
    1910:	d1f8      	bne.n	1904 <z_log_msg_post_finalize+0x8>
    1912:	f3bf 8f5b 	dmb	ish
	if (panic_mode) {
    1916:	4b18      	ldr	r3, [pc, #96]	; (1978 <z_log_msg_post_finalize+0x7c>)
    1918:	781b      	ldrb	r3, [r3, #0]
    191a:	b183      	cbz	r3, 193e <z_log_msg_post_finalize+0x42>
    191c:	f04f 0320 	mov.w	r3, #32
    1920:	f3ef 8411 	mrs	r4, BASEPRI
    1924:	f383 8812 	msr	BASEPRI_MAX, r3
    1928:	f3bf 8f6f 	isb	sy
    192c:	2000      	movs	r0, #0
    192e:	f7ff ff7b 	bl	1828 <z_impl_log_process>
	__asm__ volatile(
    1932:	f384 8811 	msr	BASEPRI, r4
    1936:	f3bf 8f6f 	isb	sy
}
    193a:	b002      	add	sp, #8
    193c:	bd10      	pop	{r4, pc}
	} else if (proc_tid != NULL && cnt == 0) {
    193e:	4b0f      	ldr	r3, [pc, #60]	; (197c <z_log_msg_post_finalize+0x80>)
    1940:	681b      	ldr	r3, [r3, #0]
    1942:	2b00      	cmp	r3, #0
    1944:	d0f9      	beq.n	193a <z_log_msg_post_finalize+0x3e>
    1946:	b952      	cbnz	r2, 195e <z_log_msg_post_finalize+0x62>
	z_impl_k_timer_start(timer, duration, period);
    1948:	2200      	movs	r2, #0
    194a:	2300      	movs	r3, #0
    194c:	e9cd 2300 	strd	r2, r3, [sp]
    1950:	480b      	ldr	r0, [pc, #44]	; (1980 <z_log_msg_post_finalize+0x84>)
    1952:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    1956:	2300      	movs	r3, #0
    1958:	f008 f95c 	bl	9c14 <z_impl_k_timer_start>
    195c:	e7ed      	b.n	193a <z_log_msg_post_finalize+0x3e>
		if ((cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    195e:	2a0a      	cmp	r2, #10
    1960:	d1eb      	bne.n	193a <z_log_msg_post_finalize+0x3e>
	z_impl_k_timer_stop(timer);
    1962:	4807      	ldr	r0, [pc, #28]	; (1980 <z_log_msg_post_finalize+0x84>)
    1964:	f00a f857 	bl	ba16 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    1968:	4806      	ldr	r0, [pc, #24]	; (1984 <z_log_msg_post_finalize+0x88>)
}
    196a:	b002      	add	sp, #8
    196c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    1970:	f007 baa6 	b.w	8ec0 <z_impl_k_sem_give>
    1974:	20000b1c 	.word	0x20000b1c
    1978:	20001a8b 	.word	0x20001a8b
    197c:	20000b60 	.word	0x20000b60
    1980:	20000768 	.word	0x20000768
    1984:	20000180 	.word	0x20000180

00001988 <z_log_msg2_commit>:
	msg->hdr.timestamp = timestamp_func();
    1988:	4b06      	ldr	r3, [pc, #24]	; (19a4 <z_log_msg2_commit+0x1c>)
{
    198a:	b510      	push	{r4, lr}
	msg->hdr.timestamp = timestamp_func();
    198c:	681b      	ldr	r3, [r3, #0]
{
    198e:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    1990:	4798      	blx	r3
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1992:	4621      	mov	r1, r4
	msg->hdr.timestamp = timestamp_func();
    1994:	60a0      	str	r0, [r4, #8]
	mpsc_pbuf_commit(&log_buffer, (union mpsc_pbuf_generic *)msg);
    1996:	4804      	ldr	r0, [pc, #16]	; (19a8 <z_log_msg2_commit+0x20>)
    1998:	f008 ff06 	bl	a7a8 <mpsc_pbuf_commit>
}
    199c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_log_msg_post_finalize();
    19a0:	f7ff bfac 	b.w	18fc <z_log_msg_post_finalize>
    19a4:	20000004 	.word	0x20000004
    19a8:	20000b28 	.word	0x20000b28

000019ac <z_impl_log_panic>:
{
    19ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    19ae:	4f0e      	ldr	r7, [pc, #56]	; (19e8 <z_impl_log_panic+0x3c>)
    19b0:	783d      	ldrb	r5, [r7, #0]
    19b2:	b975      	cbnz	r5, 19d2 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    19b4:	4c0d      	ldr	r4, [pc, #52]	; (19ec <z_impl_log_panic+0x40>)
    19b6:	4e0e      	ldr	r6, [pc, #56]	; (19f0 <z_impl_log_panic+0x44>)
	log_init();
    19b8:	f7ff fe76 	bl	16a8 <log_init>
    19bc:	1b36      	subs	r6, r6, r4
    19be:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    19c0:	42b5      	cmp	r5, r6
    19c2:	db07      	blt.n	19d4 <z_impl_log_panic+0x28>
    19c4:	2000      	movs	r0, #0
    19c6:	f7ff ff2f 	bl	1828 <z_impl_log_process>
		while (log_process(false) == true) {
    19ca:	2800      	cmp	r0, #0
    19cc:	d1fa      	bne.n	19c4 <z_impl_log_panic+0x18>
	panic_mode = true;
    19ce:	2301      	movs	r3, #1
    19d0:	703b      	strb	r3, [r7, #0]
}
    19d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    19d4:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    19d6:	795b      	ldrb	r3, [r3, #5]
    19d8:	b11b      	cbz	r3, 19e2 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    19da:	6823      	ldr	r3, [r4, #0]
    19dc:	4620      	mov	r0, r4
    19de:	695b      	ldr	r3, [r3, #20]
    19e0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    19e2:	3501      	adds	r5, #1
    19e4:	3410      	adds	r4, #16
    19e6:	e7eb      	b.n	19c0 <z_impl_log_panic+0x14>
    19e8:	20001a8b 	.word	0x20001a8b
    19ec:	0000be70 	.word	0x0000be70
    19f0:	0000be80 	.word	0x0000be80

000019f4 <log_source_name_get>:
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((const uint8_t *)data - (uint8_t *)__log_const_start)/
    19f4:	4a04      	ldr	r2, [pc, #16]	; (1a08 <log_source_name_get+0x14>)
    19f6:	4b05      	ldr	r3, [pc, #20]	; (1a0c <log_source_name_get+0x18>)
    19f8:	1a9b      	subs	r3, r3, r2
	return __log_const_start[source_id].name;
}

const char *log_source_name_get(uint32_t domain_id, uint32_t src_id)
{
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    19fa:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    19fe:	bf34      	ite	cc
    1a00:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
	return src_id < z_log_sources_count() ? log_name_get(src_id) : NULL;
    1a04:	2000      	movcs	r0, #0
}
    1a06:	4770      	bx	lr
    1a08:	0000bdb0 	.word	0x0000bdb0
    1a0c:	0000be70 	.word	0x0000be70

00001a10 <log_backend_enable>:
			uint32_t level)
{
	/* As first slot in filtering mask is reserved, backend ID has offset.*/
	uint32_t id = LOG_FILTER_FIRST_BACKEND_SLOT_IDX;

	id += backend - log_backend_get(0);
    1a10:	4a05      	ldr	r2, [pc, #20]	; (1a28 <log_backend_enable+0x18>)
	backend->cb->id = id;
    1a12:	6843      	ldr	r3, [r0, #4]
    1a14:	1a80      	subs	r0, r0, r2
    1a16:	1100      	asrs	r0, r0, #4
    1a18:	3001      	adds	r0, #1
	backend->cb->active = true;
    1a1a:	2201      	movs	r2, #1

	if (!IS_ENABLED(CONFIG_LOG1)) {
		__ASSERT(backend->api->process, "Backend does not support v2 API");
	}

	log_backend_id_set(backend, id);
    1a1c:	7118      	strb	r0, [r3, #4]
	backend->cb->ctx = ctx;
    1a1e:	6019      	str	r1, [r3, #0]
	backend->cb->active = true;
    1a20:	715a      	strb	r2, [r3, #5]
	backend_filter_set(backend, level);
	log_backend_activate(backend, ctx);

	z_log_notify_backend_enabled();
    1a22:	f7ff be6d 	b.w	1700 <z_log_notify_backend_enabled>
    1a26:	bf00      	nop
    1a28:	0000be70 	.word	0x0000be70

00001a2c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *output,
			   const char *fmt, ...)
{
    1a2c:	b40e      	push	{r1, r2, r3}
    1a2e:	b503      	push	{r0, r1, lr}
    1a30:	ab03      	add	r3, sp, #12
    1a32:	4601      	mov	r1, r0
    1a34:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1a38:	4804      	ldr	r0, [pc, #16]	; (1a4c <print_formatted+0x20>)
	va_start(args, fmt);
    1a3a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)output, fmt, args);
    1a3c:	f7ff fa38 	bl	eb0 <cbvprintf>
	va_end(args);

	return length;
}
    1a40:	b002      	add	sp, #8
    1a42:	f85d eb04 	ldr.w	lr, [sp], #4
    1a46:	b003      	add	sp, #12
    1a48:	4770      	bx	lr
    1a4a:	bf00      	nop
    1a4c:	0000a98d 	.word	0x0000a98d

00001a50 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    1a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1a54:	461d      	mov	r5, r3
    1a56:	9b08      	ldr	r3, [sp, #32]
    1a58:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1a5a:	06da      	lsls	r2, r3, #27
{
    1a5c:	4604      	mov	r4, r0
    1a5e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1a60:	d405      	bmi.n	1a6e <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1a62:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    1a64:	bf4c      	ite	mi
    1a66:	492a      	ldrmi	r1, [pc, #168]	; (1b10 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    1a68:	492a      	ldrpl	r1, [pc, #168]	; (1b14 <hexdump_line_print+0xc4>)
    1a6a:	f7ff ffdf 	bl	1a2c <print_formatted>
	newline_print(output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(output, " ");
    1a6e:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 1b18 <hexdump_line_print+0xc8>
{
    1a72:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    1a76:	45a8      	cmp	r8, r5
    1a78:	db2a      	blt.n	1ad0 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(output, "%02x ", data[i]);
		} else {
			print_formatted(output, "   ");
    1a7a:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1b1c <hexdump_line_print+0xcc>
			print_formatted(output, "%02x ", data[i]);
    1a7e:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 1b20 <hexdump_line_print+0xd0>
			print_formatted(output, " ");
    1a82:	f8df a094 	ldr.w	sl, [pc, #148]	; 1b18 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1a86:	2500      	movs	r5, #0
		if (i < length) {
    1a88:	42bd      	cmp	r5, r7
    1a8a:	d22f      	bcs.n	1aec <hexdump_line_print+0x9c>
			print_formatted(output, "%02x ", data[i]);
    1a8c:	5d72      	ldrb	r2, [r6, r5]
    1a8e:	4649      	mov	r1, r9
    1a90:	4620      	mov	r0, r4
    1a92:	f7ff ffcb 	bl	1a2c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1a96:	3501      	adds	r5, #1
    1a98:	2d10      	cmp	r5, #16
    1a9a:	d120      	bne.n	1ade <hexdump_line_print+0x8e>
		}
	}

	print_formatted(output, "|");
    1a9c:	4921      	ldr	r1, [pc, #132]	; (1b24 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(output, " ");
    1a9e:	f8df 8078 	ldr.w	r8, [pc, #120]	; 1b18 <hexdump_line_print+0xc8>
			print_formatted(output, "%c",
    1aa2:	f8df 9084 	ldr.w	r9, [pc, #132]	; 1b28 <hexdump_line_print+0xd8>
	print_formatted(output, "|");
    1aa6:	4620      	mov	r0, r4
    1aa8:	f7ff ffc0 	bl	1a2c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1aac:	2500      	movs	r5, #0
		if (i < length) {
    1aae:	42af      	cmp	r7, r5
    1ab0:	d928      	bls.n	1b04 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    1ab2:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    1ab4:	f1a2 0320 	sub.w	r3, r2, #32
    1ab8:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(output, "%c",
    1aba:	bf28      	it	cs
    1abc:	222e      	movcs	r2, #46	; 0x2e
    1abe:	4649      	mov	r1, r9
    1ac0:	4620      	mov	r0, r4
    1ac2:	f7ff ffb3 	bl	1a2c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    1ac6:	3501      	adds	r5, #1
    1ac8:	2d10      	cmp	r5, #16
    1aca:	d114      	bne.n	1af6 <hexdump_line_print+0xa6>
		}
	}
}
    1acc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(output, " ");
    1ad0:	4649      	mov	r1, r9
    1ad2:	4620      	mov	r0, r4
    1ad4:	f7ff ffaa 	bl	1a2c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    1ad8:	f108 0801 	add.w	r8, r8, #1
    1adc:	e7cb      	b.n	1a76 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    1ade:	076a      	lsls	r2, r5, #29
    1ae0:	d1d2      	bne.n	1a88 <hexdump_line_print+0x38>
			print_formatted(output, " ");
    1ae2:	4651      	mov	r1, sl
    1ae4:	4620      	mov	r0, r4
    1ae6:	f7ff ffa1 	bl	1a2c <print_formatted>
    1aea:	e7cd      	b.n	1a88 <hexdump_line_print+0x38>
			print_formatted(output, "   ");
    1aec:	4641      	mov	r1, r8
    1aee:	4620      	mov	r0, r4
    1af0:	f7ff ff9c 	bl	1a2c <print_formatted>
    1af4:	e7cf      	b.n	1a96 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    1af6:	076b      	lsls	r3, r5, #29
    1af8:	d1d9      	bne.n	1aae <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    1afa:	4641      	mov	r1, r8
    1afc:	4620      	mov	r0, r4
    1afe:	f7ff ff95 	bl	1a2c <print_formatted>
    1b02:	e7d4      	b.n	1aae <hexdump_line_print+0x5e>
			print_formatted(output, " ");
    1b04:	4641      	mov	r1, r8
    1b06:	4620      	mov	r0, r4
    1b08:	f7ff ff90 	bl	1a2c <print_formatted>
    1b0c:	e7db      	b.n	1ac6 <hexdump_line_print+0x76>
    1b0e:	bf00      	nop
    1b10:	0000c299 	.word	0x0000c299
    1b14:	0000c298 	.word	0x0000c298
    1b18:	0000c2a3 	.word	0x0000c2a3
    1b1c:	0000c2a1 	.word	0x0000c2a1
    1b20:	0000c29b 	.word	0x0000c29b
    1b24:	0000c2a5 	.word	0x0000c2a5
    1b28:	0000c2a7 	.word	0x0000c2a7

00001b2c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *output,
			 uint32_t flags, bool func_on, log_timestamp_t timestamp, uint8_t level,
			 uint8_t domain_id, int16_t source_id)
{
    1b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b30:	b087      	sub	sp, #28
    1b32:	461c      	mov	r4, r3
	uint32_t length = 0U;

	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1b34:	f001 0301 	and.w	r3, r1, #1
{
    1b38:	9205      	str	r2, [sp, #20]
    1b3a:	f89d 9040 	ldrb.w	r9, [sp, #64]	; 0x40
    1b3e:	f9bd a048 	ldrsh.w	sl, [sp, #72]	; 0x48
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    1b42:	9304      	str	r3, [sp, #16]
{
    1b44:	4607      	mov	r7, r0
    1b46:	4688      	mov	r8, r1
	bool stamp = flags & LOG_OUTPUT_FLAG_TIMESTAMP;
    1b48:	f001 0b02 	and.w	fp, r1, #2
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    1b4c:	f001 0608 	and.w	r6, r1, #8
	const char *tag = z_log_get_tag();
    1b50:	f008 ff00 	bl	a954 <z_log_get_tag>
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (tag) {
    1b54:	4602      	mov	r2, r0
    1b56:	2800      	cmp	r0, #0
    1b58:	d044      	beq.n	1be4 <prefix_print+0xb8>
		length += print_formatted(output, "%s ", tag);
    1b5a:	493a      	ldr	r1, [pc, #232]	; (1c44 <prefix_print+0x118>)
    1b5c:	4638      	mov	r0, r7
    1b5e:	f7ff ff65 	bl	1a2c <print_formatted>
    1b62:	4605      	mov	r5, r0
	}

	if (stamp) {
    1b64:	f1bb 0f00 	cmp.w	fp, #0
    1b68:	d008      	beq.n	1b7c <prefix_print+0x50>
	if (!format) {
    1b6a:	f018 0f44 	tst.w	r8, #68	; 0x44
    1b6e:	d13b      	bne.n	1be8 <prefix_print+0xbc>
		length = print_formatted(output, "[%08lu] ", timestamp);
    1b70:	4935      	ldr	r1, [pc, #212]	; (1c48 <prefix_print+0x11c>)
    1b72:	4622      	mov	r2, r4
    1b74:	4638      	mov	r0, r7
    1b76:	f7ff ff59 	bl	1a2c <print_formatted>
		length += timestamp_print(output, flags, timestamp);
    1b7a:	4405      	add	r5, r0
	if (color) {
    1b7c:	9b04      	ldr	r3, [sp, #16]
    1b7e:	b153      	cbz	r3, 1b96 <prefix_print+0x6a>
		const char *log_color = start && (colors[level] != NULL) ?
    1b80:	4b32      	ldr	r3, [pc, #200]	; (1c4c <prefix_print+0x120>)
		print_formatted(output, "%s", log_color);
    1b82:	4933      	ldr	r1, [pc, #204]	; (1c50 <prefix_print+0x124>)
		const char *log_color = start && (colors[level] != NULL) ?
    1b84:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
		print_formatted(output, "%s", log_color);
    1b88:	4b32      	ldr	r3, [pc, #200]	; (1c54 <prefix_print+0x128>)
    1b8a:	4638      	mov	r0, r7
    1b8c:	2a00      	cmp	r2, #0
    1b8e:	bf08      	it	eq
    1b90:	461a      	moveq	r2, r3
    1b92:	f7ff ff4b 	bl	1a2c <print_formatted>
	if (level_on) {
    1b96:	b13e      	cbz	r6, 1ba8 <prefix_print+0x7c>
		total += print_formatted(output, "<%s> ", severity[level]);
    1b98:	4b2f      	ldr	r3, [pc, #188]	; (1c58 <prefix_print+0x12c>)
    1b9a:	4930      	ldr	r1, [pc, #192]	; (1c5c <prefix_print+0x130>)
    1b9c:	f853 2029 	ldr.w	r2, [r3, r9, lsl #2]
    1ba0:	4638      	mov	r0, r7
    1ba2:	f7ff ff43 	bl	1a2c <print_formatted>
    1ba6:	4606      	mov	r6, r0
	if (source_id >= 0) {
    1ba8:	f1ba 0f00 	cmp.w	sl, #0
    1bac:	db16      	blt.n	1bdc <prefix_print+0xb0>
		total += print_formatted(output,
    1bae:	9b05      	ldr	r3, [sp, #20]
    1bb0:	2b00      	cmp	r3, #0
    1bb2:	d045      	beq.n	1c40 <prefix_print+0x114>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    1bb4:	2301      	movs	r3, #1
    1bb6:	fa03 f909 	lsl.w	r9, r3, r9
		total += print_formatted(output,
    1bba:	4b29      	ldr	r3, [pc, #164]	; (1c60 <prefix_print+0x134>)
    1bbc:	4c29      	ldr	r4, [pc, #164]	; (1c64 <prefix_print+0x138>)
    1bbe:	f019 0f10 	tst.w	r9, #16
    1bc2:	bf18      	it	ne
    1bc4:	461c      	movne	r4, r3
    1bc6:	4651      	mov	r1, sl
    1bc8:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
    1bcc:	f7ff ff12 	bl	19f4 <log_source_name_get>
    1bd0:	4621      	mov	r1, r4
    1bd2:	4602      	mov	r2, r0
    1bd4:	4638      	mov	r0, r7
    1bd6:	f7ff ff29 	bl	1a2c <print_formatted>
    1bda:	4406      	add	r6, r0
	length += ids_print(output, level_on, func_on,
			domain_id, source_id, level);


	return length;
}
    1bdc:	1970      	adds	r0, r6, r5
    1bde:	b007      	add	sp, #28
    1be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t length = 0U;
    1be4:	4605      	mov	r5, r0
    1be6:	e7bd      	b.n	1b64 <prefix_print+0x38>
	} else if (freq != 0U) {
    1be8:	4b1f      	ldr	r3, [pc, #124]	; (1c68 <prefix_print+0x13c>)
    1bea:	6818      	ldr	r0, [r3, #0]
    1bec:	2800      	cmp	r0, #0
    1bee:	d0c4      	beq.n	1b7a <prefix_print+0x4e>
		timestamp /= timestamp_div;
    1bf0:	4b1e      	ldr	r3, [pc, #120]	; (1c6c <prefix_print+0x140>)
		ms = (remainder * 1000U) / freq;
    1bf2:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		timestamp /= timestamp_div;
    1bf6:	681b      	ldr	r3, [r3, #0]
    1bf8:	fbb4 f4f3 	udiv	r4, r4, r3
		total_seconds = timestamp / freq;
    1bfc:	f44f 6161 	mov.w	r1, #3600	; 0xe10
    1c00:	fbb4 f3f0 	udiv	r3, r4, r0
		remainder = timestamp % freq;
    1c04:	fb00 4413 	mls	r4, r0, r3, r4
		ms = (remainder * 1000U) / freq;
    1c08:	fb08 f404 	mul.w	r4, r8, r4
		mins = seconds / 60U;
    1c0c:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
    1c10:	fbb3 f2f1 	udiv	r2, r3, r1
    1c14:	fb01 3112 	mls	r1, r1, r2, r3
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1c18:	fbb4 fef0 	udiv	lr, r4, r0
		mins = seconds / 60U;
    1c1c:	fbb1 f3fc 	udiv	r3, r1, ip
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1c20:	fb00 441e 	mls	r4, r0, lr, r4
				length = print_formatted(output,
    1c24:	fb0c 1113 	mls	r1, ip, r3, r1
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1c28:	fb08 f404 	mul.w	r4, r8, r4
				length = print_formatted(output,
    1c2c:	9100      	str	r1, [sp, #0]
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    1c2e:	fbb4 f0f0 	udiv	r0, r4, r0
				length = print_formatted(output,
    1c32:	490f      	ldr	r1, [pc, #60]	; (1c70 <prefix_print+0x144>)
    1c34:	e9cd e001 	strd	lr, r0, [sp, #4]
    1c38:	4638      	mov	r0, r7
    1c3a:	f7ff fef7 	bl	1a2c <print_formatted>
    1c3e:	e79c      	b.n	1b7a <prefix_print+0x4e>
		total += print_formatted(output,
    1c40:	4c08      	ldr	r4, [pc, #32]	; (1c64 <prefix_print+0x138>)
    1c42:	e7c0      	b.n	1bc6 <prefix_print+0x9a>
    1c44:	0000c2b8 	.word	0x0000c2b8
    1c48:	0000c2bc 	.word	0x0000c2bc
    1c4c:	0000bee8 	.word	0x0000bee8
    1c50:	0000cd78 	.word	0x0000cd78
    1c54:	0000c2aa 	.word	0x0000c2aa
    1c58:	0000befc 	.word	0x0000befc
    1c5c:	0000c2e1 	.word	0x0000c2e1
    1c60:	0000c2b4 	.word	0x0000c2b4
    1c64:	0000c2af 	.word	0x0000c2af
    1c68:	20000b64 	.word	0x20000b64
    1c6c:	20000b68 	.word	0x20000b68
    1c70:	0000c2c5 	.word	0x0000c2c5

00001c74 <postfix_print>:

static void postfix_print(const struct log_output *output,
			  uint32_t flags, uint8_t level)
{
    1c74:	b538      	push	{r3, r4, r5, lr}
    1c76:	460c      	mov	r4, r1
	if (color) {
    1c78:	07e1      	lsls	r1, r4, #31
{
    1c7a:	4605      	mov	r5, r0
	if (color) {
    1c7c:	d503      	bpl.n	1c86 <postfix_print+0x12>
		print_formatted(output, "%s", log_color);
    1c7e:	4a08      	ldr	r2, [pc, #32]	; (1ca0 <postfix_print+0x2c>)
    1c80:	4908      	ldr	r1, [pc, #32]	; (1ca4 <postfix_print+0x30>)
    1c82:	f7ff fed3 	bl	1a2c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    1c86:	06e2      	lsls	r2, r4, #27
    1c88:	d408      	bmi.n	1c9c <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    1c8a:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    1c8c:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    1c8e:	bf4c      	ite	mi
    1c90:	4905      	ldrmi	r1, [pc, #20]	; (1ca8 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    1c92:	4906      	ldrpl	r1, [pc, #24]	; (1cac <postfix_print+0x38>)
	color_postfix(output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(output, flags);
}
    1c94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    1c98:	f7ff bec8 	b.w	1a2c <print_formatted>
}
    1c9c:	bd38      	pop	{r3, r4, r5, pc}
    1c9e:	bf00      	nop
    1ca0:	0000c2aa 	.word	0x0000c2aa
    1ca4:	0000cd78 	.word	0x0000cd78
    1ca8:	0000c299 	.word	0x0000c299
    1cac:	0000c298 	.word	0x0000c298

00001cb0 <log_output_msg2_process>:
	log_output_flush(output);
}

void log_output_msg2_process(const struct log_output *output,
			     struct log_msg2 *msg, uint32_t flags)
{
    1cb0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 *
 * @return Log level.
 */
static inline uint8_t log_msg2_get_level(struct log_msg2 *msg)
{
	return msg->hdr.desc.level;
    1cb4:	880b      	ldrh	r3, [r1, #0]
	log_timestamp_t timestamp = log_msg2_get_timestamp(msg);
	uint8_t level = log_msg2_get_level(msg);
	bool raw_string = (level == LOG_LEVEL_INTERNAL_RAW_STRING);
	uint32_t prefix_offset;

	if (!raw_string) {
    1cb6:	f413 7fe0 	tst.w	r3, #448	; 0x1c0
{
    1cba:	4606      	mov	r6, r0
    1cbc:	460c      	mov	r4, r1
    1cbe:	4690      	mov	r8, r2
    1cc0:	f3c3 1982 	ubfx	r9, r3, #6, #3
	if (!raw_string) {
    1cc4:	d04d      	beq.n	1d62 <log_output_msg2_process+0xb2>
	return msg->hdr.desc.domain;
    1cc6:	780a      	ldrb	r2, [r1, #0]
 *
 * @return Pointer to the source data.
 */
static inline const void *log_msg2_get_source(struct log_msg2 *msg)
{
	return msg->hdr.source;
    1cc8:	684b      	ldr	r3, [r1, #4]
	return msg->hdr.desc.domain;
    1cca:	f3c2 02c2 	ubfx	r2, r2, #3, #3
		void *source = (void *)log_msg2_get_source(msg);
		uint8_t domain_id = log_msg2_get_domain(msg);
		int16_t source_id = source ?
    1cce:	2b00      	cmp	r3, #0
    1cd0:	d044      	beq.n	1d5c <log_output_msg2_process+0xac>
    1cd2:	4925      	ldr	r1, [pc, #148]	; (1d68 <log_output_msg2_process+0xb8>)
    1cd4:	1a5b      	subs	r3, r3, r1
    1cd6:	f343 03cf 	sbfx	r3, r3, #3, #16
			(IS_ENABLED(CONFIG_LOG_RUNTIME_FILTERING) ?
				log_dynamic_source_id(source) :
				log_const_source_id(source)) :
			-1;

		prefix_offset = prefix_print(output, flags, 0, timestamp,
    1cda:	e9cd 2301 	strd	r2, r3, [sp, #4]
    1cde:	f8cd 9000 	str.w	r9, [sp]
    1ce2:	68a3      	ldr	r3, [r4, #8]
    1ce4:	2200      	movs	r2, #0
    1ce6:	4641      	mov	r1, r8
    1ce8:	4630      	mov	r0, r6
    1cea:	f7ff ff1f 	bl	1b2c <prefix_print>
    1cee:	4682      	mov	sl, r0
 */
static inline uint8_t *log_msg2_get_package(struct log_msg2 *msg, size_t *len)
{
	*len = msg->hdr.desc.package_len;

	return msg->data;
    1cf0:	4625      	mov	r5, r4
	*len = msg->hdr.desc.package_len;
    1cf2:	f855 3b10 	ldr.w	r3, [r5], #16
	}

	size_t len;
	uint8_t *data = log_msg2_get_package(msg, &len);

	if (len) {
    1cf6:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1cfa:	b153      	cbz	r3, 1d12 <log_output_msg2_process+0x62>
 * returned from invoking @p out.
 */
static inline
int cbpprintf(cbprintf_cb out, void *ctx, void *packaged)
{
	return cbpprintf_external(out, cbvprintf, ctx, packaged);
    1cfc:	4f1b      	ldr	r7, [pc, #108]	; (1d6c <log_output_msg2_process+0xbc>)
    1cfe:	481c      	ldr	r0, [pc, #112]	; (1d70 <log_output_msg2_process+0xc0>)
    1d00:	491c      	ldr	r1, [pc, #112]	; (1d74 <log_output_msg2_process+0xc4>)
    1d02:	462b      	mov	r3, r5
    1d04:	4632      	mov	r2, r6
    1d06:	f1b9 0f00 	cmp.w	r9, #0
    1d0a:	bf08      	it	eq
    1d0c:	4638      	moveq	r0, r7
    1d0e:	f008 f853 	bl	9db8 <cbpprintf_external>
	*len = msg->hdr.desc.data_len;
    1d12:	8867      	ldrh	r7, [r4, #2]
    1d14:	f3c7 07cb 	ubfx	r7, r7, #3, #12
		(void)err;
		__ASSERT_NO_MSG(err >= 0);
	}

	data = log_msg2_get_data(msg, &len);
	if (len) {
    1d18:	b197      	cbz	r7, 1d40 <log_output_msg2_process+0x90>
	return msg->data + msg->hdr.desc.package_len;
    1d1a:	6823      	ldr	r3, [r4, #0]
    1d1c:	f3c3 2349 	ubfx	r3, r3, #9, #10
    1d20:	441d      	add	r5, r3
		length = MIN(len, HEXDUMP_BYTES_IN_LINE);
    1d22:	2f10      	cmp	r7, #16
    1d24:	463c      	mov	r4, r7
    1d26:	bf28      	it	cs
    1d28:	2410      	movcs	r4, #16
		hexdump_line_print(output, data, length,
    1d2a:	4629      	mov	r1, r5
    1d2c:	f8cd 8000 	str.w	r8, [sp]
    1d30:	4653      	mov	r3, sl
    1d32:	4622      	mov	r2, r4
    1d34:	4630      	mov	r0, r6
    1d36:	f7ff fe8b 	bl	1a50 <hexdump_line_print>
	} while (len);
    1d3a:	1b3f      	subs	r7, r7, r4
		data += length;
    1d3c:	4425      	add	r5, r4
	} while (len);
    1d3e:	d1f0      	bne.n	1d22 <log_output_msg2_process+0x72>
		log_msg2_hexdump(output, data, len, prefix_offset, flags);
	}

	if (!raw_string) {
    1d40:	f1b9 0f00 	cmp.w	r9, #0
    1d44:	d004      	beq.n	1d50 <log_output_msg2_process+0xa0>
		postfix_print(output, flags, level);
    1d46:	464a      	mov	r2, r9
    1d48:	4641      	mov	r1, r8
    1d4a:	4630      	mov	r0, r6
    1d4c:	f7ff ff92 	bl	1c74 <postfix_print>
	}

	log_output_flush(output);
    1d50:	4630      	mov	r0, r6
}
    1d52:	b004      	add	sp, #16
    1d54:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(output);
    1d58:	f008 be0b 	b.w	a972 <log_output_flush>
		int16_t source_id = source ?
    1d5c:	f04f 33ff 	mov.w	r3, #4294967295
    1d60:	e7bb      	b.n	1cda <log_output_msg2_process+0x2a>
		prefix_offset = 0;
    1d62:	46ca      	mov	sl, r9
    1d64:	e7c4      	b.n	1cf0 <log_output_msg2_process+0x40>
    1d66:	bf00      	nop
    1d68:	0000bdb0 	.word	0x0000bdb0
    1d6c:	0000a9c3 	.word	0x0000a9c3
    1d70:	0000a98d 	.word	0x0000a98d
    1d74:	00000eb1 	.word	0x00000eb1

00001d78 <log_output_dropped_process>:
	postfix_print(output, flags, level);
	log_output_flush(output);
}

void log_output_dropped_process(const struct log_output *output, uint32_t cnt)
{
    1d78:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1d7a:	f242 730f 	movw	r3, #9999	; 0x270f
    1d7e:	428b      	cmp	r3, r1
    1d80:	bf28      	it	cs
    1d82:	460b      	movcs	r3, r1
	log_output_func_t outf = output->func;
    1d84:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1d86:	4a0f      	ldr	r2, [pc, #60]	; (1dc4 <log_output_dropped_process+0x4c>)
{
    1d88:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1d8a:	2105      	movs	r1, #5
    1d8c:	4668      	mov	r0, sp
    1d8e:	f008 f880 	bl	9e92 <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1d92:	6863      	ldr	r3, [r4, #4]
    1d94:	490c      	ldr	r1, [pc, #48]	; (1dc8 <log_output_dropped_process+0x50>)
    1d96:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    1d98:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    1d9a:	220b      	movs	r2, #11
    1d9c:	4628      	mov	r0, r5
    1d9e:	f008 fddb 	bl	a958 <buffer_write>
		     output->control_block->ctx);
	buffer_write(outf, buf, len, output->control_block->ctx);
    1da2:	6863      	ldr	r3, [r4, #4]
    1da4:	4632      	mov	r2, r6
    1da6:	4669      	mov	r1, sp
    1da8:	4628      	mov	r0, r5
    1daa:	685b      	ldr	r3, [r3, #4]
    1dac:	f008 fdd4 	bl	a958 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    1db0:	6863      	ldr	r3, [r4, #4]
    1db2:	4906      	ldr	r1, [pc, #24]	; (1dcc <log_output_dropped_process+0x54>)
    1db4:	685b      	ldr	r3, [r3, #4]
    1db6:	221b      	movs	r2, #27
    1db8:	4628      	mov	r0, r5
    1dba:	f008 fdcd 	bl	a958 <buffer_write>
		     output->control_block->ctx);
}
    1dbe:	b002      	add	sp, #8
    1dc0:	bd70      	pop	{r4, r5, r6, pc}
    1dc2:	bf00      	nop
    1dc4:	0000caf6 	.word	0x0000caf6
    1dc8:	0000c323 	.word	0x0000c323
    1dcc:	0000c307 	.word	0x0000c307

00001dd0 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    1dd0:	4a08      	ldr	r2, [pc, #32]	; (1df4 <log_output_timestamp_freq_set+0x24>)
{
    1dd2:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    1dd4:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    1dd6:	4c08      	ldr	r4, [pc, #32]	; (1df8 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    1dd8:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    1dda:	2100      	movs	r1, #0
    1ddc:	42a0      	cmp	r0, r4
    1dde:	d804      	bhi.n	1dea <log_output_timestamp_freq_set+0x1a>
    1de0:	b101      	cbz	r1, 1de4 <log_output_timestamp_freq_set+0x14>
    1de2:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    1de4:	4b05      	ldr	r3, [pc, #20]	; (1dfc <log_output_timestamp_freq_set+0x2c>)
    1de6:	6018      	str	r0, [r3, #0]
}
    1de8:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    1dea:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    1dec:	005b      	lsls	r3, r3, #1
    1dee:	2101      	movs	r1, #1
    1df0:	e7f4      	b.n	1ddc <log_output_timestamp_freq_set+0xc>
    1df2:	bf00      	nop
    1df4:	20000b68 	.word	0x20000b68
    1df8:	000f4240 	.word	0x000f4240
    1dfc:	20000b64 	.word	0x20000b64

00001e00 <z_impl_z_log_msg2_runtime_vcreate>:
#endif

void z_impl_z_log_msg2_runtime_vcreate(uint8_t domain_id, const void *source,
				uint8_t level, const void *data, size_t dlen,
				uint32_t package_flags, const char *fmt, va_list ap)
{
    1e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e04:	b087      	sub	sp, #28
    1e06:	e9dd 5711 	ldrd	r5, r7, [sp, #68]	; 0x44
    1e0a:	469a      	mov	sl, r3
    1e0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
    1e0e:	f8dd b04c 	ldr.w	fp, [sp, #76]	; 0x4c
    1e12:	9303      	str	r3, [sp, #12]
    1e14:	4604      	mov	r4, r0
    1e16:	4689      	mov	r9, r1
    1e18:	4690      	mov	r8, r2
	int plen;

	if (fmt) {
    1e1a:	b3cf      	cbz	r7, 1e90 <z_impl_z_log_msg2_runtime_vcreate+0x90>
		va_list ap2;

		va_copy(ap2, ap);
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    1e1c:	f8cd b000 	str.w	fp, [sp]
    1e20:	463b      	mov	r3, r7
    1e22:	462a      	mov	r2, r5
    1e24:	2110      	movs	r1, #16
    1e26:	2000      	movs	r0, #0
		va_copy(ap2, ap);
    1e28:	f8cd b014 	str.w	fp, [sp, #20]
		plen = cbvprintf_package(NULL, Z_LOG_MSG2_ALIGN_OFFSET,
    1e2c:	f7fe fbba 	bl	5a4 <cbvprintf_package>
    1e30:	4606      	mov	r6, r0
	}

	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
	struct log_msg2 *msg;
	uint8_t *pkg;
	struct log_msg2_desc desc =
    1e32:	9a03      	ldr	r2, [sp, #12]
    1e34:	f008 0307 	and.w	r3, r8, #7
    1e38:	f004 0807 	and.w	r8, r4, #7
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1e3c:	f102 0017 	add.w	r0, r2, #23
	struct log_msg2_desc desc =
    1e40:	4c14      	ldr	r4, [pc, #80]	; (1e94 <z_impl_z_log_msg2_runtime_vcreate+0x94>)
    1e42:	ea4f 08c8 	mov.w	r8, r8, lsl #3
    1e46:	ea48 1883 	orr.w	r8, r8, r3, lsl #6
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1e4a:	4430      	add	r0, r6
	struct log_msg2_desc desc =
    1e4c:	4b12      	ldr	r3, [pc, #72]	; (1e98 <z_impl_z_log_msg2_runtime_vcreate+0x98>)
    1e4e:	ea04 2446 	and.w	r4, r4, r6, lsl #9
	size_t msg_wlen = Z_LOG_MSG2_ALIGNED_WLEN(plen, dlen);
    1e52:	f020 0007 	bic.w	r0, r0, #7
	struct log_msg2_desc desc =
    1e56:	ea48 0804 	orr.w	r8, r8, r4
    1e5a:	ea03 43c2 	and.w	r3, r3, r2, lsl #19
		Z_LOG_MSG_DESC_INITIALIZER(domain_id, level, plen, dlen);

	if (IS_ENABLED(CONFIG_LOG_MODE_DEFERRED) && BACKENDS_IN_USE()) {
		msg = z_log_msg2_alloc(msg_wlen);
    1e5e:	0880      	lsrs	r0, r0, #2
	struct log_msg2_desc desc =
    1e60:	ea48 0803 	orr.w	r8, r8, r3
		msg = z_log_msg2_alloc(msg_wlen);
    1e64:	f7ff fcc6 	bl	17f4 <z_log_msg2_alloc>
		if (IS_ENABLED(CONFIG_LOG_FRONTEND) && msg == NULL) {
			pkg = alloca(plen);
		} else {
			pkg = msg ? msg->data : NULL;
    1e68:	4604      	mov	r4, r0
    1e6a:	b140      	cbz	r0, 1e7e <z_impl_z_log_msg2_runtime_vcreate+0x7e>
	} else {
		msg = alloca(msg_wlen * sizeof(int));
		pkg = msg->data;
	}

	if (pkg && fmt) {
    1e6c:	b13f      	cbz	r7, 1e7e <z_impl_z_log_msg2_runtime_vcreate+0x7e>
		plen = cbvprintf_package(pkg, (size_t)plen, package_flags, fmt, ap);
    1e6e:	f8cd b000 	str.w	fp, [sp]
    1e72:	463b      	mov	r3, r7
    1e74:	462a      	mov	r2, r5
    1e76:	4631      	mov	r1, r6
    1e78:	3010      	adds	r0, #16
    1e7a:	f7fe fb93 	bl	5a4 <cbvprintf_package>
	if (IS_ENABLED(CONFIG_LOG_FRONTEND)) {
		log_frontend_msg(source, desc, pkg, data);
	}

	if (BACKENDS_IN_USE()) {
		z_log_msg2_finalize(msg, source, desc, data);
    1e7e:	4653      	mov	r3, sl
    1e80:	4642      	mov	r2, r8
    1e82:	4649      	mov	r1, r9
    1e84:	4620      	mov	r0, r4
	}
}
    1e86:	b007      	add	sp, #28
    1e88:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		z_log_msg2_finalize(msg, source, desc, data);
    1e8c:	f008 bda6 	b.w	a9dc <z_log_msg2_finalize>
		plen = 0;
    1e90:	463e      	mov	r6, r7
    1e92:	e7ce      	b.n	1e32 <z_impl_z_log_msg2_runtime_vcreate+0x32>
    1e94:	0007fe00 	.word	0x0007fe00
    1e98:	7ff80000 	.word	0x7ff80000

00001e9c <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    1e9c:	4b01      	ldr	r3, [pc, #4]	; (1ea4 <log_backend_rtt_init+0x8>)
    1e9e:	2201      	movs	r2, #1
    1ea0:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    1ea2:	4770      	bx	lr
    1ea4:	20001a9c 	.word	0x20001a9c

00001ea8 <format_set>:
	log_output_func(&log_output_rtt, &msg->log, flags);
}

static int format_set(const struct log_backend *const backend, uint32_t log_type)
{
	log_format_current = log_type;
    1ea8:	4b01      	ldr	r3, [pc, #4]	; (1eb0 <format_set+0x8>)
	return 0;
}
    1eaa:	2000      	movs	r0, #0
	log_format_current = log_type;
    1eac:	6019      	str	r1, [r3, #0]
}
    1eae:	4770      	bx	lr
    1eb0:	20000b74 	.word	0x20000b74

00001eb4 <panic>:
	panic_mode = true;
    1eb4:	4b02      	ldr	r3, [pc, #8]	; (1ec0 <panic+0xc>)
 * @param output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const output)
{
	log_output_flush(output);
    1eb6:	4803      	ldr	r0, [pc, #12]	; (1ec4 <panic+0x10>)
    1eb8:	2201      	movs	r2, #1
    1eba:	701a      	strb	r2, [r3, #0]
    1ebc:	f008 bd59 	b.w	a972 <log_output_flush>
    1ec0:	20001a9d 	.word	0x20001a9d
    1ec4:	0000bf30 	.word	0x0000bf30

00001ec8 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const output, uint32_t cnt)
{
	log_output_dropped_process(output, cnt);
    1ec8:	4801      	ldr	r0, [pc, #4]	; (1ed0 <dropped+0x8>)
    1eca:	f7ff bf55 	b.w	1d78 <log_output_dropped_process>
    1ece:	bf00      	nop
    1ed0:	0000bf30 	.word	0x0000bf30

00001ed4 <process>:
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1ed4:	4b06      	ldr	r3, [pc, #24]	; (1ef0 <process+0x1c>)
{
    1ed6:	b510      	push	{r4, lr}
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1ed8:	6818      	ldr	r0, [r3, #0]
{
    1eda:	460c      	mov	r4, r1
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1edc:	f7ff fbde 	bl	169c <log_format_func_t_get>
	log_output_func(&log_output_rtt, &msg->log, flags);
    1ee0:	4621      	mov	r1, r4
	log_format_func_t log_output_func = log_format_func_t_get(log_format_current);
    1ee2:	4603      	mov	r3, r0
}
    1ee4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	log_output_func(&log_output_rtt, &msg->log, flags);
    1ee8:	4802      	ldr	r0, [pc, #8]	; (1ef4 <process+0x20>)
    1eea:	220f      	movs	r2, #15
    1eec:	4718      	bx	r3
    1eee:	bf00      	nop
    1ef0:	20000b74 	.word	0x20000b74
    1ef4:	0000bf30 	.word	0x0000bf30

00001ef8 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    1ef8:	4b05      	ldr	r3, [pc, #20]	; (1f10 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    1efa:	781b      	ldrb	r3, [r3, #0]
    1efc:	b11b      	cbz	r3, 1f06 <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    1efe:	f241 3088 	movw	r0, #5000	; 0x1388
    1f02:	f009 bd4d 	b.w	b9a0 <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    1f06:	20a4      	movs	r0, #164	; 0xa4
    1f08:	2100      	movs	r1, #0
    1f0a:	f007 bc67 	b.w	97dc <z_impl_k_sleep>
    1f0e:	bf00      	nop
    1f10:	20001a9d 	.word	0x20001a9d

00001f14 <data_out_block_mode>:
{
    1f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_MODE_IMMEDIATE) || panic_mode;
    1f18:	f8df 908c 	ldr.w	r9, [pc, #140]	; 1fa8 <data_out_block_mode+0x94>
	return z_impl_k_mutex_lock(mutex, timeout);
    1f1c:	f8df a08c 	ldr.w	sl, [pc, #140]	; 1fac <data_out_block_mode+0x98>
{
    1f20:	4680      	mov	r8, r0
    1f22:	460f      	mov	r7, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    1f24:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    1f26:	f899 5000 	ldrb.w	r5, [r9]
    1f2a:	b9cd      	cbnz	r5, 1f60 <data_out_block_mode+0x4c>
    1f2c:	f04f 33ff 	mov.w	r3, #4294967295
    1f30:	f04f 32ff 	mov.w	r2, #4294967295
    1f34:	4650      	mov	r0, sl
    1f36:	f006 fed5 	bl	8ce4 <z_impl_k_mutex_lock>
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1f3a:	463a      	mov	r2, r7
    1f3c:	4641      	mov	r1, r8
    1f3e:	4628      	mov	r0, r5
    1f40:	f006 fb94 	bl	866c <SEGGER_RTT_WriteSkipNoLock>
    1f44:	4606      	mov	r6, r0
	return z_impl_k_mutex_unlock(mutex);
    1f46:	4650      	mov	r0, sl
    1f48:	f006 ff44 	bl	8dd4 <z_impl_k_mutex_unlock>
		if (ret) {
    1f4c:	4d18      	ldr	r5, [pc, #96]	; (1fb0 <data_out_block_mode+0x9c>)
    1f4e:	b1fe      	cbz	r6, 1f90 <data_out_block_mode+0x7c>
	host_present = true;
    1f50:	2301      	movs	r3, #1
    1f52:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    1f54:	f899 3000 	ldrb.w	r3, [r9]
    1f58:	b96b      	cbnz	r3, 1f76 <data_out_block_mode+0x62>
}
    1f5a:	4638      	mov	r0, r7
    1f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    1f60:	463a      	mov	r2, r7
    1f62:	4641      	mov	r1, r8
    1f64:	2000      	movs	r0, #0
    1f66:	f006 fb81 	bl	866c <SEGGER_RTT_WriteSkipNoLock>
    1f6a:	4606      	mov	r6, r0
    1f6c:	e7ee      	b.n	1f4c <data_out_block_mode+0x38>
	if (retry_cnt == 0) {
    1f6e:	b95c      	cbnz	r4, 1f88 <data_out_block_mode+0x74>
		host_present = false;
    1f70:	702c      	strb	r4, [r5, #0]
    1f72:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    1f76:	2000      	movs	r0, #0
    1f78:	f006 fbf4 	bl	8764 <SEGGER_RTT_HasDataUp>
    1f7c:	2800      	cmp	r0, #0
    1f7e:	d0ec      	beq.n	1f5a <data_out_block_mode+0x46>
    1f80:	782b      	ldrb	r3, [r5, #0]
    1f82:	2b00      	cmp	r3, #0
    1f84:	d1f3      	bne.n	1f6e <data_out_block_mode+0x5a>
    1f86:	e7e8      	b.n	1f5a <data_out_block_mode+0x46>
			on_failed_write(retry_cnt--);
    1f88:	3c01      	subs	r4, #1
    1f8a:	f7ff ffb5 	bl	1ef8 <on_failed_write.part.0>
    1f8e:	e7f2      	b.n	1f76 <data_out_block_mode+0x62>
		} else if (host_present) {
    1f90:	782b      	ldrb	r3, [r5, #0]
    1f92:	b113      	cbz	r3, 1f9a <data_out_block_mode+0x86>
	if (retry_cnt == 0) {
    1f94:	3c01      	subs	r4, #1
    1f96:	d104      	bne.n	1fa2 <data_out_block_mode+0x8e>
		host_present = false;
    1f98:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    1f9a:	782b      	ldrb	r3, [r5, #0]
    1f9c:	2b00      	cmp	r3, #0
    1f9e:	d1c2      	bne.n	1f26 <data_out_block_mode+0x12>
    1fa0:	e7db      	b.n	1f5a <data_out_block_mode+0x46>
    1fa2:	f7ff ffa9 	bl	1ef8 <on_failed_write.part.0>
    1fa6:	e7f8      	b.n	1f9a <data_out_block_mode+0x86>
    1fa8:	20001a9d 	.word	0x20001a9d
    1fac:	2000016c 	.word	0x2000016c
    1fb0:	20001a9c 	.word	0x20001a9c

00001fb4 <class_handler>:
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1fb4:	4b0c      	ldr	r3, [pc, #48]	; (1fe8 <class_handler+0x34>)
{
    1fb6:	b4f0      	push	{r4, r5, r6, r7}
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1fb8:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1fba:	4e0c      	ldr	r6, [pc, #48]	; (1fec <class_handler+0x38>)
    1fbc:	4b0c      	ldr	r3, [pc, #48]	; (1ff0 <class_handler+0x3c>)
    1fbe:	42b3      	cmp	r3, r6
    1fc0:	d303      	bcc.n	1fca <class_handler+0x16>
			return iface->class_handler(pSetup, len, data);
		}
	}

	return -ENOTSUP;
}
    1fc2:	f06f 0085 	mvn.w	r0, #133	; 0x85
    1fc6:	bcf0      	pop	{r4, r5, r6, r7}
    1fc8:	4770      	bx	lr
		if_descr = cfg_data->interface_descriptor;
    1fca:	685d      	ldr	r5, [r3, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1fcc:	42bd      	cmp	r5, r7
    1fce:	d309      	bcc.n	1fe4 <class_handler+0x30>
		if (iface->class_handler &&
    1fd0:	691c      	ldr	r4, [r3, #16]
    1fd2:	b13c      	cbz	r4, 1fe4 <class_handler+0x30>
		    if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    1fd4:	f895 c002 	ldrb.w	ip, [r5, #2]
    1fd8:	7905      	ldrb	r5, [r0, #4]
		if (iface->class_handler &&
    1fda:	45ac      	cmp	ip, r5
    1fdc:	d102      	bne.n	1fe4 <class_handler+0x30>
			return iface->class_handler(pSetup, len, data);
    1fde:	4623      	mov	r3, r4
}
    1fe0:	bcf0      	pop	{r4, r5, r6, r7}
			return iface->class_handler(pSetup, len, data);
    1fe2:	4718      	bx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1fe4:	3324      	adds	r3, #36	; 0x24
    1fe6:	e7ea      	b.n	1fbe <class_handler+0xa>
    1fe8:	20000b84 	.word	0x20000b84
    1fec:	20000248 	.word	0x20000248
    1ff0:	20000224 	.word	0x20000224

00001ff4 <custom_handler>:

static int custom_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    1ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct usb_interface_cfg_data *iface;

	LOG_DBG("bRequest 0x%02x, wIndex 0x%04x",
		pSetup->bRequest, pSetup->wIndex);

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    1ff8:	4c13      	ldr	r4, [pc, #76]	; (2048 <CONFIG_USB_DEVICE_VID+0x4a>)
    1ffa:	f8df 8050 	ldr.w	r8, [pc, #80]	; 204c <CONFIG_USB_DEVICE_VID+0x4e>
		if_descr = cfg_data->interface_descriptor;
		/*
		 * Wind forward until it is within the range
		 * of the current descriptor.
		 */
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    1ffe:	f8df 9050 	ldr.w	r9, [pc, #80]	; 2050 <CONFIG_USB_DEVICE_VID+0x52>
{
    2002:	4605      	mov	r5, r0
    2004:	460e      	mov	r6, r1
    2006:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2008:	4544      	cmp	r4, r8
    200a:	d303      	bcc.n	2014 <CONFIG_USB_DEVICE_VID+0x16>
			}
		}
	}

	return -ENOTSUP;
}
    200c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    2010:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if_descr = cfg_data->interface_descriptor;
    2014:	6862      	ldr	r2, [r4, #4]
		if ((uint8_t *)if_descr < usb_dev.descriptors) {
    2016:	f8d9 3024 	ldr.w	r3, [r9, #36]	; 0x24
    201a:	429a      	cmp	r2, r3
    201c:	d312      	bcc.n	2044 <CONFIG_USB_DEVICE_VID+0x46>
		if (iface->custom_handler == NULL) {
    201e:	69a3      	ldr	r3, [r4, #24]
    2020:	b183      	cbz	r3, 2044 <CONFIG_USB_DEVICE_VID+0x46>
		if (if_descr->bInterfaceNumber == (pSetup->wIndex & 0xFF)) {
    2022:	7890      	ldrb	r0, [r2, #2]
    2024:	7929      	ldrb	r1, [r5, #4]
    2026:	4288      	cmp	r0, r1
    2028:	d105      	bne.n	2036 <CONFIG_USB_DEVICE_VID+0x38>
			return iface->custom_handler(pSetup, len, data);
    202a:	463a      	mov	r2, r7
    202c:	4631      	mov	r1, r6
    202e:	4628      	mov	r0, r5
}
    2030:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			return iface->custom_handler(pSetup, len, data);
    2034:	4718      	bx	r3
			if (if_descr->bInterfaceClass == USB_BCC_AUDIO) {
    2036:	7952      	ldrb	r2, [r2, #5]
    2038:	2a01      	cmp	r2, #1
    203a:	d103      	bne.n	2044 <CONFIG_USB_DEVICE_VID+0x46>
				(void)iface->custom_handler(pSetup, len, data);
    203c:	463a      	mov	r2, r7
    203e:	4631      	mov	r1, r6
    2040:	4628      	mov	r0, r5
    2042:	4798      	blx	r3
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2044:	3424      	adds	r4, #36	; 0x24
    2046:	e7df      	b.n	2008 <CONFIG_USB_DEVICE_VID+0xa>
    2048:	20000224 	.word	0x20000224
    204c:	20000248 	.word	0x20000248
    2050:	20000b84 	.word	0x20000b84

00002054 <vendor_handler>:

static int vendor_handler(struct usb_setup_packet *pSetup,
			  int32_t *len, uint8_t **data)
{
    2054:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		if (!usb_handle_os_desc_feature(pSetup, len, data)) {
			return 0;
		}
	}

	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2058:	4c0b      	ldr	r4, [pc, #44]	; (2088 <vendor_handler+0x34>)
    205a:	f8df 8030 	ldr.w	r8, [pc, #48]	; 208c <vendor_handler+0x38>
{
    205e:	4605      	mov	r5, r0
    2060:	460e      	mov	r6, r1
    2062:	4617      	mov	r7, r2
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2064:	4544      	cmp	r4, r8
    2066:	d302      	bcc.n	206e <vendor_handler+0x1a>
				return 0;
			}
		}
	}

	return -ENOTSUP;
    2068:	f06f 0085 	mvn.w	r0, #133	; 0x85
    206c:	e009      	b.n	2082 <vendor_handler+0x2e>
		if (iface->vendor_handler) {
    206e:	6963      	ldr	r3, [r4, #20]
    2070:	b90b      	cbnz	r3, 2076 <vendor_handler+0x22>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2072:	3424      	adds	r4, #36	; 0x24
    2074:	e7f6      	b.n	2064 <vendor_handler+0x10>
			if (!iface->vendor_handler(pSetup, len, data)) {
    2076:	463a      	mov	r2, r7
    2078:	4631      	mov	r1, r6
    207a:	4628      	mov	r0, r5
    207c:	4798      	blx	r3
    207e:	2800      	cmp	r0, #0
    2080:	d1f7      	bne.n	2072 <vendor_handler+0x1e>
}
    2082:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    2086:	bf00      	nop
    2088:	20000224 	.word	0x20000224
    208c:	20000248 	.word	0x20000248

00002090 <usb_reset_alt_setting>:
	memset(usb_dev.alt_setting, 0, ARRAY_SIZE(usb_dev.alt_setting));
    2090:	4802      	ldr	r0, [pc, #8]	; (209c <usb_reset_alt_setting+0xc>)
    2092:	2208      	movs	r2, #8
    2094:	2100      	movs	r1, #0
    2096:	f008 bd8c 	b.w	abb2 <memset>
    209a:	bf00      	nop
    209c:	20000c3f 	.word	0x20000c3f

000020a0 <is_ep_valid.part.0>:
static bool is_ep_valid(uint8_t ep)
    20a0:	b570      	push	{r4, r5, r6, lr}
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    20a2:	4b0b      	ldr	r3, [pc, #44]	; (20d0 <is_ep_valid.part.0+0x30>)
    20a4:	4c0b      	ldr	r4, [pc, #44]	; (20d4 <is_ep_valid.part.0+0x34>)
    20a6:	42a3      	cmp	r3, r4
    20a8:	d301      	bcc.n	20ae <is_ep_valid.part.0+0xe>
	return false;
    20aa:	2000      	movs	r0, #0
}
    20ac:	bd70      	pop	{r4, r5, r6, pc}
		ep_data = cfg_data->endpoint;
    20ae:	6a19      	ldr	r1, [r3, #32]
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    20b0:	7f1e      	ldrb	r6, [r3, #28]
    20b2:	2200      	movs	r2, #0
			if (ep_data[n].ep_addr == ep) {
    20b4:	3904      	subs	r1, #4
		for (uint8_t n = 0; n < cfg_data->num_endpoints; n++) {
    20b6:	b2d5      	uxtb	r5, r2
    20b8:	42ae      	cmp	r6, r5
    20ba:	d801      	bhi.n	20c0 <is_ep_valid.part.0+0x20>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    20bc:	3324      	adds	r3, #36	; 0x24
    20be:	e7f2      	b.n	20a6 <is_ep_valid.part.0+0x6>
			if (ep_data[n].ep_addr == ep) {
    20c0:	3201      	adds	r2, #1
    20c2:	f811 5032 	ldrb.w	r5, [r1, r2, lsl #3]
    20c6:	4285      	cmp	r5, r0
    20c8:	d1f5      	bne.n	20b6 <is_ep_valid.part.0+0x16>
				return true;
    20ca:	2001      	movs	r0, #1
    20cc:	e7ee      	b.n	20ac <is_ep_valid.part.0+0xc>
    20ce:	bf00      	nop
    20d0:	20000224 	.word	0x20000224
    20d4:	20000248 	.word	0x20000248

000020d8 <usb_device_init.part.0>:

/*
 * This function configures the USB device stack based on USB descriptor and
 * usb_cfg_data.
 */
static int usb_device_init(const struct device *dev)
    20d8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	}

	/* register device descriptor */
	device_descriptor = usb_get_device_descriptor();
	if (!device_descriptor) {
		LOG_ERR("Failed to configure USB device stack");
    20da:	4b08      	ldr	r3, [pc, #32]	; (20fc <usb_device_init.part.0+0x24>)
    20dc:	9305      	str	r3, [sp, #20]
    20de:	2302      	movs	r3, #2
    20e0:	9304      	str	r3, [sp, #16]
    20e2:	4807      	ldr	r0, [pc, #28]	; (2100 <usb_device_init.part.0+0x28>)
    20e4:	2300      	movs	r3, #0
    20e6:	aa04      	add	r2, sp, #16
    20e8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    20ec:	f008 fc91 	bl	aa12 <z_impl_z_log_msg2_static_create>
	if (IS_ENABLED(CONFIG_USB_DEVICE_INITIALIZE_AT_BOOT)) {
		return usb_enable(NULL);
	}

	return 0;
}
    20f0:	f04f 30ff 	mov.w	r0, #4294967295
    20f4:	b007      	add	sp, #28
    20f6:	f85d fb04 	ldr.w	pc, [sp], #4
    20fa:	bf00      	nop
    20fc:	0000c33f 	.word	0x0000c33f
    2100:	0000be50 	.word	0x0000be50

00002104 <usb_halt_endpoint_req.isra.0>:
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    2104:	b573      	push	{r0, r1, r4, r5, r6, lr}
	uint8_t ep = setup->wIndex;
    2106:	b2c4      	uxtb	r4, r0
	if (USB_EP_GET_IDX(ep) == 0) {
    2108:	0663      	lsls	r3, r4, #25
static bool usb_halt_endpoint_req(struct usb_setup_packet *setup, bool halt)
    210a:	460d      	mov	r5, r1
	uint8_t ep = setup->wIndex;
    210c:	f88d 4007 	strb.w	r4, [sp, #7]
	if (USB_EP_GET_IDX(ep) == 0) {
    2110:	d007      	beq.n	2122 <usb_halt_endpoint_req.isra.0+0x1e>
    2112:	4620      	mov	r0, r4
    2114:	f7ff ffc4 	bl	20a0 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    2118:	b188      	cbz	r0, 213e <usb_halt_endpoint_req.isra.0+0x3a>
	return (usb_dev.configuration != 0);
    211a:	4b0f      	ldr	r3, [pc, #60]	; (2158 <usb_halt_endpoint_req.isra.0+0x54>)
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    211c:	f893 00ba 	ldrb.w	r0, [r3, #186]	; 0xba
    2120:	b168      	cbz	r0, 213e <usb_halt_endpoint_req.isra.0+0x3a>
		if (halt) {
    2122:	4e0d      	ldr	r6, [pc, #52]	; (2158 <usb_halt_endpoint_req.isra.0+0x54>)
			usb_dc_ep_set_stall(ep);
    2124:	4620      	mov	r0, r4
		if (halt) {
    2126:	b165      	cbz	r5, 2142 <usb_halt_endpoint_req.isra.0+0x3e>
			usb_dc_ep_set_stall(ep);
    2128:	f002 f994 	bl	4454 <usb_dc_ep_set_stall>
			if (usb_dev.status_callback) {
    212c:	69f3      	ldr	r3, [r6, #28]
    212e:	b90b      	cbnz	r3, 2134 <usb_halt_endpoint_req.isra.0+0x30>
		return true;
    2130:	2001      	movs	r0, #1
    2132:	e004      	b.n	213e <usb_halt_endpoint_req.isra.0+0x3a>
				usb_dev.status_callback(USB_DC_SET_HALT, &ep);
    2134:	2008      	movs	r0, #8
    2136:	f10d 0107 	add.w	r1, sp, #7
    213a:	4798      	blx	r3
		return true;
    213c:	4628      	mov	r0, r5
}
    213e:	b002      	add	sp, #8
    2140:	bd70      	pop	{r4, r5, r6, pc}
			usb_dc_ep_clear_stall(ep);
    2142:	f002 f9bf 	bl	44c4 <usb_dc_ep_clear_stall>
			if (usb_dev.status_callback) {
    2146:	69f3      	ldr	r3, [r6, #28]
    2148:	2b00      	cmp	r3, #0
    214a:	d0f1      	beq.n	2130 <usb_halt_endpoint_req.isra.0+0x2c>
				usb_dev.status_callback(USB_DC_CLEAR_HALT, &ep);
    214c:	f10d 0107 	add.w	r1, sp, #7
    2150:	2009      	movs	r0, #9
    2152:	4798      	blx	r3
    2154:	e7ec      	b.n	2130 <usb_halt_endpoint_req.isra.0+0x2c>
    2156:	bf00      	nop
    2158:	20000b84 	.word	0x20000b84

0000215c <set_endpoint>:
{
    215c:	b590      	push	{r4, r7, lr}
    215e:	b083      	sub	sp, #12
    2160:	af00      	add	r7, sp, #0
	ep_cfg.ep_addr = ep_desc->bEndpointAddress;
    2162:	7883      	ldrb	r3, [r0, #2]
    2164:	703b      	strb	r3, [r7, #0]
	ep_cfg.ep_mps = sys_le16_to_cpu(ep_desc->wMaxPacketSize);
    2166:	7903      	ldrb	r3, [r0, #4]
    2168:	7942      	ldrb	r2, [r0, #5]
    216a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    216e:	807b      	strh	r3, [r7, #2]
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    2170:	78c3      	ldrb	r3, [r0, #3]
	ret = usb_dc_ep_configure(&ep_cfg);
    2172:	4638      	mov	r0, r7
	ep_cfg.ep_type = ep_desc->bmAttributes & USB_EP_TRANSFER_TYPE_MASK;
    2174:	f003 0303 	and.w	r3, r3, #3
    2178:	713b      	strb	r3, [r7, #4]
	ret = usb_dc_ep_configure(&ep_cfg);
    217a:	f002 f939 	bl	43f0 <usb_dc_ep_configure>
	if (ret == -EALREADY) {
    217e:	f110 0f78 	cmn.w	r0, #120	; 0x78
	ret = usb_dc_ep_configure(&ep_cfg);
    2182:	4603      	mov	r3, r0
	if (ret == -EALREADY) {
    2184:	7838      	ldrb	r0, [r7, #0]
    2186:	d014      	beq.n	21b2 <set_endpoint+0x56>
	} else if (ret) {
    2188:	b19b      	cbz	r3, 21b2 <set_endpoint+0x56>
		LOG_ERR("Failed to configure endpoint 0x%02x", ep_cfg.ep_addr);
    218a:	4b13      	ldr	r3, [pc, #76]	; (21d8 <set_endpoint+0x7c>)
    218c:	466c      	mov	r4, sp
    218e:	b088      	sub	sp, #32
    2190:	466a      	mov	r2, sp
    2192:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    2196:	2303      	movs	r3, #3
    2198:	f842 3f10 	str.w	r3, [r2, #16]!
    219c:	480f      	ldr	r0, [pc, #60]	; (21dc <set_endpoint+0x80>)
    219e:	2300      	movs	r3, #0
    21a0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    21a4:	f008 fc35 	bl	aa12 <z_impl_z_log_msg2_static_create>
		return false;
    21a8:	2000      	movs	r0, #0
    21aa:	46a5      	mov	sp, r4
}
    21ac:	370c      	adds	r7, #12
    21ae:	46bd      	mov	sp, r7
    21b0:	bd90      	pop	{r4, r7, pc}
	ret = usb_dc_ep_enable(ep_cfg.ep_addr);
    21b2:	f002 f9c3 	bl	453c <usb_dc_ep_enable>
	if (ret == -EALREADY) {
    21b6:	f110 0f78 	cmn.w	r0, #120	; 0x78
    21ba:	d008      	beq.n	21ce <set_endpoint+0x72>
	} else if (ret) {
    21bc:	b138      	cbz	r0, 21ce <set_endpoint+0x72>
		LOG_ERR("Failed to enable endpoint 0x%02x", ep_cfg.ep_addr);
    21be:	783b      	ldrb	r3, [r7, #0]
    21c0:	4907      	ldr	r1, [pc, #28]	; (21e0 <set_endpoint+0x84>)
    21c2:	466c      	mov	r4, sp
    21c4:	b088      	sub	sp, #32
    21c6:	466a      	mov	r2, sp
    21c8:	e9c2 1305 	strd	r1, r3, [r2, #20]
    21cc:	e7e3      	b.n	2196 <set_endpoint+0x3a>
	usb_dev.configured = true;
    21ce:	4b05      	ldr	r3, [pc, #20]	; (21e4 <set_endpoint+0x88>)
    21d0:	2001      	movs	r0, #1
    21d2:	f883 00b9 	strb.w	r0, [r3, #185]	; 0xb9
	return true;
    21d6:	e7e9      	b.n	21ac <set_endpoint+0x50>
    21d8:	0000c364 	.word	0x0000c364
    21dc:	0000be50 	.word	0x0000be50
    21e0:	0000c388 	.word	0x0000c388
    21e4:	20000b84 	.word	0x20000b84

000021e8 <usb_handle_standard_request>:
{
    21e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (usb_dev.custom_req_handler &&
    21ec:	4ead      	ldr	r6, [pc, #692]	; (24a4 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0xa0>)
{
    21ee:	b083      	sub	sp, #12
	if (usb_dev.custom_req_handler &&
    21f0:	69b3      	ldr	r3, [r6, #24]
{
    21f2:	af00      	add	r7, sp, #0
    21f4:	4604      	mov	r4, r0
    21f6:	4688      	mov	r8, r1
    21f8:	4691      	mov	r9, r2
	if (usb_dev.custom_req_handler &&
    21fa:	b963      	cbnz	r3, 2216 <usb_handle_standard_request+0x2e>
	switch (setup->RequestType.recipient) {
    21fc:	7820      	ldrb	r0, [r4, #0]
    21fe:	f000 001f 	and.w	r0, r0, #31
    2202:	2801      	cmp	r0, #1
    2204:	f000 80ac 	beq.w	2360 <usb_handle_standard_request+0x178>
    2208:	2802      	cmp	r0, #2
    220a:	f000 812b 	beq.w	2464 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x60>
    220e:	b138      	cbz	r0, 2220 <usb_handle_standard_request+0x38>
		switch (setup->bRequest) {
    2210:	f06f 0015 	mvn.w	r0, #21
    2214:	e099      	b.n	234a <usb_handle_standard_request+0x162>
	    !usb_dev.custom_req_handler(setup, len, data_buf)) {
    2216:	4798      	blx	r3
	if (usb_dev.custom_req_handler &&
    2218:	2800      	cmp	r0, #0
    221a:	d1ef      	bne.n	21fc <usb_handle_standard_request+0x14>
	int rc = 0;
    221c:	2000      	movs	r0, #0
    221e:	e094      	b.n	234a <usb_handle_standard_request+0x162>
	if (usb_reqtype_is_to_host(setup)) {
    2220:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    2224:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    2226:	2a00      	cmp	r2, #0
    2228:	da32      	bge.n	2290 <usb_handle_standard_request+0xa8>
		switch (setup->bRequest) {
    222a:	2b06      	cmp	r3, #6
	uint8_t *data = *data_buf;
    222c:	f8d9 2000 	ldr.w	r2, [r9]
		switch (setup->bRequest) {
    2230:	d010      	beq.n	2254 <usb_handle_standard_request+0x6c>
    2232:	2b08      	cmp	r3, #8
    2234:	d025      	beq.n	2282 <usb_handle_standard_request+0x9a>
    2236:	2b00      	cmp	r3, #0
    2238:	d1ea      	bne.n	2210 <usb_handle_standard_request+0x28>
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    223a:	2101      	movs	r1, #1
	data[1] = 0U;
    223c:	7053      	strb	r3, [r2, #1]
		data[0] |= USB_GET_STATUS_SELF_POWERED;
    223e:	7011      	strb	r1, [r2, #0]
		data[0] |= (usb_dev.remote_wakeup ?
    2240:	f896 10c3 	ldrb.w	r1, [r6, #195]	; 0xc3
    2244:	2900      	cmp	r1, #0
    2246:	bf18      	it	ne
    2248:	2302      	movne	r3, #2
    224a:	f043 0301 	orr.w	r3, r3, #1
    224e:	7013      	strb	r3, [r2, #0]
		*len = 2;
    2250:	2302      	movs	r3, #2
    2252:	e01a      	b.n	228a <usb_handle_standard_request+0xa2>
			return usb_get_descriptor(setup, len, data_buf);
    2254:	8863      	ldrh	r3, [r4, #2]
	type = USB_GET_DESCRIPTOR_TYPE(setup->wValue);
    2256:	0a1a      	lsrs	r2, r3, #8
	if ((type == USB_DESC_INTERFACE) || (type == USB_DESC_ENDPOINT) ||
    2258:	1f11      	subs	r1, r2, #4
    225a:	2901      	cmp	r1, #1
    225c:	d9d8      	bls.n	2210 <usb_handle_standard_request+0x28>
    225e:	2a07      	cmp	r2, #7
    2260:	d8d6      	bhi.n	2210 <usb_handle_standard_request+0x28>
	index = USB_GET_DESCRIPTOR_INDEX(setup->wValue);
    2262:	b2d9      	uxtb	r1, r3
	p = (uint8_t *)usb_dev.descriptors;
    2264:	6a73      	ldr	r3, [r6, #36]	; 0x24
	while (p[DESC_bLength] != 0U) {
    2266:	781c      	ldrb	r4, [r3, #0]
    2268:	2c00      	cmp	r4, #0
    226a:	d0d1      	beq.n	2210 <usb_handle_standard_request+0x28>
		if (p[DESC_bDescriptorType] == type) {
    226c:	785d      	ldrb	r5, [r3, #1]
    226e:	4295      	cmp	r5, r2
    2270:	d103      	bne.n	227a <usb_handle_standard_request+0x92>
			if (cur_index == index) {
    2272:	4281      	cmp	r1, r0
    2274:	f000 8134 	beq.w	24e0 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0xdc>
			cur_index++;
    2278:	3001      	adds	r0, #1
		p += p[DESC_bLength];
    227a:	4423      	add	r3, r4
    227c:	e7f3      	b.n	2266 <usb_handle_standard_request+0x7e>
			*len = p[DESC_bLength];
    227e:	781b      	ldrb	r3, [r3, #0]
    2280:	e134      	b.n	24ec <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0xe8>
			data[0] = usb_dev.configuration;
    2282:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    2286:	7013      	strb	r3, [r2, #0]
			*len = 1;
    2288:	2301      	movs	r3, #1
		*len = 2;
    228a:	f8c8 3000 	str.w	r3, [r8]
		return true;
    228e:	e05c      	b.n	234a <usb_handle_standard_request+0x162>
		switch (setup->bRequest) {
    2290:	3b01      	subs	r3, #1
    2292:	2b08      	cmp	r3, #8
    2294:	d8bc      	bhi.n	2210 <usb_handle_standard_request+0x28>
    2296:	a201      	add	r2, pc, #4	; (adr r2, 229c <usb_handle_standard_request+0xb4>)
    2298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    229c:	0000233d 	.word	0x0000233d
    22a0:	00002211 	.word	0x00002211
    22a4:	00002353 	.word	0x00002353
    22a8:	00002211 	.word	0x00002211
    22ac:	000022c1 	.word	0x000022c1
    22b0:	00002211 	.word	0x00002211
    22b4:	00002211 	.word	0x00002211
    22b8:	00002211 	.word	0x00002211
    22bc:	000022cd 	.word	0x000022cd
			return !usb_dc_set_address(setup->wValue);
    22c0:	78a0      	ldrb	r0, [r4, #2]
    22c2:	f002 f859 	bl	4378 <usb_dc_set_address>
		if (usb_handle_std_device_req(setup, len, data_buf) == false) {
    22c6:	2800      	cmp	r0, #0
    22c8:	d0a8      	beq.n	221c <usb_handle_standard_request+0x34>
    22ca:	e7a1      	b.n	2210 <usb_handle_standard_request+0x28>
	if (setup->wValue == 0U) {
    22cc:	8865      	ldrh	r5, [r4, #2]
    22ce:	b155      	cbz	r5, 22e6 <usb_handle_standard_request+0xfe>
	uint8_t cur_config = 0xFF;
    22d0:	f04f 09ff 	mov.w	r9, #255	; 0xff
	uint8_t *p = (uint8_t *)usb_dev.descriptors;
    22d4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
	bool found = false;
    22d8:	2000      	movs	r0, #0
	uint8_t cur_alt_setting = 0xFF;
    22da:	46ca      	mov	sl, r9
	while (p[DESC_bLength] != 0U) {
    22dc:	f898 5000 	ldrb.w	r5, [r8]
    22e0:	b96d      	cbnz	r5, 22fe <usb_handle_standard_request+0x116>
	if (found) {
    22e2:	2800      	cmp	r0, #0
    22e4:	d094      	beq.n	2210 <usb_handle_standard_request+0x28>
		usb_reset_alt_setting();
    22e6:	f7ff fed3 	bl	2090 <usb_reset_alt_setting>
		usb_dev.configuration = setup->wValue;
    22ea:	8863      	ldrh	r3, [r4, #2]
    22ec:	f886 30ba 	strb.w	r3, [r6, #186]	; 0xba
		if (usb_dev.status_callback) {
    22f0:	69f3      	ldr	r3, [r6, #28]
    22f2:	2b00      	cmp	r3, #0
    22f4:	d092      	beq.n	221c <usb_handle_standard_request+0x34>
			usb_dev.status_callback(USB_DC_CONFIGURED,
    22f6:	496c      	ldr	r1, [pc, #432]	; (24a8 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0xa4>)
    22f8:	2003      	movs	r0, #3
    22fa:	4798      	blx	r3
    22fc:	e78e      	b.n	221c <usb_handle_standard_request+0x34>
		switch (p[DESC_bDescriptorType]) {
    22fe:	f898 3001 	ldrb.w	r3, [r8, #1]
    2302:	2b04      	cmp	r3, #4
    2304:	d00d      	beq.n	2322 <usb_handle_standard_request+0x13a>
    2306:	2b05      	cmp	r3, #5
    2308:	d00e      	beq.n	2328 <usb_handle_standard_request+0x140>
    230a:	2b02      	cmp	r3, #2
    230c:	d105      	bne.n	231a <usb_handle_standard_request+0x132>
			cur_config = p[CONF_DESC_bConfigurationValue];
    230e:	f898 9005 	ldrb.w	r9, [r8, #5]
			if (cur_config == setup->wValue) {
    2312:	8862      	ldrh	r2, [r4, #2]
				found = true;
    2314:	454a      	cmp	r2, r9
    2316:	bf08      	it	eq
    2318:	2001      	moveq	r0, #1
		p += p[DESC_bLength];
    231a:	f898 3000 	ldrb.w	r3, [r8]
    231e:	4498      	add	r8, r3
    2320:	e7dc      	b.n	22dc <usb_handle_standard_request+0xf4>
			cur_alt_setting =
    2322:	f898 a003 	ldrb.w	sl, [r8, #3]
			break;
    2326:	e7f8      	b.n	231a <usb_handle_standard_request+0x132>
			if ((cur_config != setup->wValue) ||
    2328:	8863      	ldrh	r3, [r4, #2]
    232a:	454b      	cmp	r3, r9
    232c:	d1f5      	bne.n	231a <usb_handle_standard_request+0x132>
    232e:	f1ba 0f00 	cmp.w	sl, #0
    2332:	d1f2      	bne.n	231a <usb_handle_standard_request+0x132>
			found = set_endpoint((struct usb_ep_descriptor *)p);
    2334:	4640      	mov	r0, r8
    2336:	f7ff ff11 	bl	215c <set_endpoint>
			break;
    233a:	e7ee      	b.n	231a <usb_handle_standard_request+0x132>
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    233c:	8863      	ldrh	r3, [r4, #2]
    233e:	2b01      	cmp	r3, #1
    2340:	f47f af66 	bne.w	2210 <usb_handle_standard_request+0x28>
					usb_dev.remote_wakeup = false;
    2344:	2000      	movs	r0, #0
    2346:	f886 00c3 	strb.w	r0, [r6, #195]	; 0xc3
}
    234a:	370c      	adds	r7, #12
    234c:	46bd      	mov	sp, r7
    234e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (setup->wValue == USB_SFS_REMOTE_WAKEUP) {
    2352:	8863      	ldrh	r3, [r4, #2]
    2354:	2b01      	cmp	r3, #1
    2356:	f47f af5b 	bne.w	2210 <usb_handle_standard_request+0x28>
					usb_dev.remote_wakeup = true;
    235a:	f886 30c3 	strb.w	r3, [r6, #195]	; 0xc3
					return true;
    235e:	e75d      	b.n	221c <usb_handle_standard_request+0x34>
	if (!is_device_configured() ||
    2360:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    2364:	2b00      	cmp	r3, #0
    2366:	f43f af53 	beq.w	2210 <usb_handle_standard_request+0x28>
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    236a:	6a75      	ldr	r5, [r6, #36]	; 0x24
	   (!is_interface_valid((uint8_t)setup->wIndex))) {
    236c:	f8b4 c004 	ldrh.w	ip, [r4, #4]
    2370:	7920      	ldrb	r0, [r4, #4]
	const uint8_t *p = (uint8_t *)usb_dev.descriptors;
    2372:	462b      	mov	r3, r5
	while (p[DESC_bLength] != 0U) {
    2374:	781a      	ldrb	r2, [r3, #0]
    2376:	2a00      	cmp	r2, #0
    2378:	f43f af4a 	beq.w	2210 <usb_handle_standard_request+0x28>
		if (p[DESC_bDescriptorType] == USB_DESC_CONFIGURATION) {
    237c:	7859      	ldrb	r1, [r3, #1]
    237e:	2902      	cmp	r1, #2
    2380:	d104      	bne.n	238c <usb_handle_standard_request+0x1a4>
			if (interface < cfg_descr->bNumInterfaces) {
    2382:	f893 e004 	ldrb.w	lr, [r3, #4]
    2386:	4586      	cmp	lr, r0
    2388:	f200 80b3 	bhi.w	24f2 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0xee>
		p += p[DESC_bLength];
    238c:	4413      	add	r3, r2
    238e:	e7f1      	b.n	2374 <usb_handle_standard_request+0x18c>
			data[0] = 0U;
    2390:	7010      	strb	r0, [r2, #0]
			data[1] = 0U;
    2392:	7050      	strb	r0, [r2, #1]
			*len = 2;
    2394:	f8c8 1000 	str.w	r1, [r8]
			return true;
    2398:	e7d7      	b.n	234a <usb_handle_standard_request+0x162>
		p += p[DESC_bLength];
    239a:	440d      	add	r5, r1
    239c:	e0b7      	b.n	250e <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x10a>
		if (setup->bRequest == USB_SREQ_SET_INTERFACE) {
    239e:	280b      	cmp	r0, #11
    23a0:	f47f af36 	bne.w	2210 <usb_handle_standard_request+0x28>
	bool ret = false;
    23a4:	f04f 0b00 	mov.w	fp, #0
	uint8_t cur_iface = 0xFF;
    23a8:	f04f 0aff 	mov.w	sl, #255	; 0xff
	uint8_t cur_alt_setting = 0xFF;
    23ac:	46d0      	mov	r8, sl
	const uint8_t *if_desc = NULL;
    23ae:	46d9      	mov	r9, fp
    23b0:	e006      	b.n	23c0 <usb_handle_standard_request+0x1d8>
		switch (p[DESC_bDescriptorType]) {
    23b2:	786b      	ldrb	r3, [r5, #1]
    23b4:	2b04      	cmp	r3, #4
    23b6:	d010      	beq.n	23da <usb_handle_standard_request+0x1f2>
    23b8:	2b05      	cmp	r3, #5
    23ba:	d024      	beq.n	2406 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x2>
		p += p[DESC_bLength];
    23bc:	782b      	ldrb	r3, [r5, #0]
    23be:	441d      	add	r5, r3
	while (p[DESC_bLength] != 0U) {
    23c0:	782b      	ldrb	r3, [r5, #0]
    23c2:	2b00      	cmp	r3, #0
    23c4:	d1f5      	bne.n	23b2 <usb_handle_standard_request+0x1ca>
	if (usb_dev.status_callback) {
    23c6:	69f3      	ldr	r3, [r6, #28]
    23c8:	b113      	cbz	r3, 23d0 <usb_handle_standard_request+0x1e8>
		usb_dev.status_callback(USB_DC_INTERFACE, if_desc);
    23ca:	4649      	mov	r1, r9
    23cc:	2007      	movs	r0, #7
    23ce:	4798      	blx	r3
		if (usb_handle_std_interface_req(setup, len, data_buf) == false) {
    23d0:	f1bb 0f00 	cmp.w	fp, #0
    23d4:	f47f af22 	bne.w	221c <usb_handle_standard_request+0x34>
    23d8:	e71a      	b.n	2210 <usb_handle_standard_request+0x28>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    23da:	f895 a002 	ldrb.w	sl, [r5, #2]
			if (cur_iface == setup->wIndex &&
    23de:	88a2      	ldrh	r2, [r4, #4]
			cur_alt_setting = p[INTF_DESC_bAlternateSetting];
    23e0:	f895 8003 	ldrb.w	r8, [r5, #3]
			if (cur_iface == setup->wIndex &&
    23e4:	4592      	cmp	sl, r2
    23e6:	4653      	mov	r3, sl
    23e8:	d1e8      	bne.n	23bc <usb_handle_standard_request+0x1d4>
			    cur_alt_setting == setup->wValue) {
    23ea:	8861      	ldrh	r1, [r4, #2]
			if (cur_iface == setup->wIndex &&
    23ec:	4588      	cmp	r8, r1
    23ee:	fa1f f288 	uxth.w	r2, r8
    23f2:	d1e3      	bne.n	23bc <usb_handle_standard_request+0x1d4>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    23f4:	2b07      	cmp	r3, #7
    23f6:	d833      	bhi.n	2460 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x5c>
		usb_dev.alt_setting[iface] = alt_setting;
    23f8:	4433      	add	r3, r6
		return true;
    23fa:	46a9      	mov	r9, r5
				ret = usb_set_alt_setting(setup->wIndex,
    23fc:	f883 20bb 	strb.w	r2, [r3, #187]	; 0xbb
	return true;
    2400:	f04f 0b01 	mov.w	fp, #1
    2404:	e7da      	b.n	23bc <usb_handle_standard_request+0x1d4>
			if (cur_iface == setup->wIndex) {
    2406:	88a3      	ldrh	r3, [r4, #4]
    2408:	4553      	cmp	r3, sl
    240a:	d1d7      	bne.n	23bc <usb_handle_standard_request+0x1d4>
	if (cur_alt_setting != alt_setting) {
    240c:	78a3      	ldrb	r3, [r4, #2]
    240e:	4543      	cmp	r3, r8
    2410:	d021      	beq.n	2456 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x52>
		ret = reset_endpoint(ep_desc);
    2412:	78ab      	ldrb	r3, [r5, #2]
	usb_cancel_transfer(ep_cfg.ep_addr);
    2414:	607b      	str	r3, [r7, #4]
    2416:	4618      	mov	r0, r3
    2418:	f000 fa4a 	bl	28b0 <usb_cancel_transfer>
	ret = usb_dc_ep_disable(ep_cfg.ep_addr);
    241c:	687b      	ldr	r3, [r7, #4]
    241e:	4618      	mov	r0, r3
    2420:	f002 f8b6 	bl	4590 <usb_dc_ep_disable>
	if (ret == -EALREADY) {
    2424:	f110 0f78 	cmn.w	r0, #120	; 0x78
    2428:	d0ea      	beq.n	2400 <usb_handle_standard_request+0x218>
	} else if (ret) {
    242a:	687b      	ldr	r3, [r7, #4]
    242c:	2800      	cmp	r0, #0
    242e:	d0e7      	beq.n	2400 <usb_handle_standard_request+0x218>
		LOG_ERR("Failed to disable endpoint 0x%02x", ep_cfg.ep_addr);
    2430:	491e      	ldr	r1, [pc, #120]	; (24ac <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0xa8>)
    2432:	46eb      	mov	fp, sp
    2434:	b088      	sub	sp, #32
    2436:	466a      	mov	r2, sp
    2438:	e9c2 1305 	strd	r1, r3, [r2, #20]
    243c:	2303      	movs	r3, #3
    243e:	f842 3f10 	str.w	r3, [r2, #16]!
    2442:	481b      	ldr	r0, [pc, #108]	; (24b0 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0xac>)
    2444:	2300      	movs	r3, #0
    2446:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    244a:	f008 fae2 	bl	aa12 <z_impl_z_log_msg2_static_create>
    244e:	46dd      	mov	sp, fp
	return false;
    2450:	f04f 0b00 	mov.w	fp, #0
    2454:	e7b2      	b.n	23bc <usb_handle_standard_request+0x1d4>
		ret = set_endpoint(ep_desc);
    2456:	4628      	mov	r0, r5
    2458:	f7ff fe80 	bl	215c <set_endpoint>
    245c:	4683      	mov	fp, r0
    245e:	e7ad      	b.n	23bc <usb_handle_standard_request+0x1d4>
    2460:	46a9      	mov	r9, r5
    2462:	e7f5      	b.n	2450 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x4c>
	if (usb_reqtype_is_to_host(setup)) {
    2464:	f994 2000 	ldrsb.w	r2, [r4]
		switch (setup->bRequest) {
    2468:	7863      	ldrb	r3, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    246a:	2a00      	cmp	r2, #0
    246c:	da22      	bge.n	24b4 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0xb0>
		if (setup->bRequest == USB_SREQ_GET_STATUS) {
    246e:	2b00      	cmp	r3, #0
    2470:	f47f aece 	bne.w	2210 <usb_handle_standard_request+0x28>
	uint8_t ep = setup->wIndex;
    2474:	7924      	ldrb	r4, [r4, #4]
	if (USB_EP_GET_IDX(ep) == 0) {
    2476:	0663      	lsls	r3, r4, #25
    2478:	d00a      	beq.n	2490 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0x8c>
    247a:	4620      	mov	r0, r4
    247c:	f7ff fe10 	bl	20a0 <is_ep_valid.part.0>
	if (!is_ep_valid(ep)) {
    2480:	2800      	cmp	r0, #0
    2482:	f43f aec5 	beq.w	2210 <usb_handle_standard_request+0x28>
	if ((USB_EP_GET_IDX(ep) == 0) || is_device_configured()) {
    2486:	f896 30ba 	ldrb.w	r3, [r6, #186]	; 0xba
    248a:	2b00      	cmp	r3, #0
    248c:	f43f aec0 	beq.w	2210 <usb_handle_standard_request+0x28>
    2490:	f8d9 5000 	ldr.w	r5, [r9]
		usb_dc_ep_is_stalled(ep, &data[0]);
    2494:	4620      	mov	r0, r4
    2496:	4629      	mov	r1, r5
    2498:	f002 f834 	bl	4504 <usb_dc_ep_is_stalled>
		data[1] = 0U;
    249c:	2000      	movs	r0, #0
    249e:	7068      	strb	r0, [r5, #1]
    24a0:	e6d6      	b.n	2250 <usb_handle_standard_request+0x68>
    24a2:	bf00      	nop
    24a4:	20000b84 	.word	0x20000b84
    24a8:	20000c3e 	.word	0x20000c3e
    24ac:	0000c3a9 	.word	0x0000c3a9
    24b0:	0000be50 	.word	0x0000be50
		switch (setup->bRequest) {
    24b4:	2b01      	cmp	r3, #1
    24b6:	d008      	beq.n	24ca <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0xc6>
    24b8:	2b03      	cmp	r3, #3
    24ba:	f47f aea9 	bne.w	2210 <usb_handle_standard_request+0x28>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    24be:	8863      	ldrh	r3, [r4, #2]
    24c0:	2b00      	cmp	r3, #0
    24c2:	f47f aea5 	bne.w	2210 <usb_handle_standard_request+0x28>
				return usb_halt_endpoint_req(setup, true);
    24c6:	2101      	movs	r1, #1
    24c8:	e003      	b.n	24d2 <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0xce>
			if (setup->wValue == USB_SFS_ENDPOINT_HALT) {
    24ca:	8861      	ldrh	r1, [r4, #2]
    24cc:	2900      	cmp	r1, #0
    24ce:	f47f ae9f 	bne.w	2210 <usb_handle_standard_request+0x28>
				return usb_halt_endpoint_req(setup, true);
    24d2:	88a0      	ldrh	r0, [r4, #4]
    24d4:	f7ff fe16 	bl	2104 <usb_halt_endpoint_req.isra.0>
		if (usb_handle_std_endpoint_req(setup, len, data_buf) == false) {
    24d8:	2800      	cmp	r0, #0
    24da:	f47f ae9f 	bne.w	221c <usb_handle_standard_request+0x34>
    24de:	e697      	b.n	2210 <usb_handle_standard_request+0x28>
		if (type == USB_DESC_CONFIGURATION) {
    24e0:	2a02      	cmp	r2, #2
		*data = p;
    24e2:	f8c9 3000 	str.w	r3, [r9]
		if (type == USB_DESC_CONFIGURATION) {
    24e6:	f47f aeca 	bne.w	227e <usb_handle_standard_request+0x96>
			*len = (p[CONF_DESC_wTotalLength]) |
    24ea:	885b      	ldrh	r3, [r3, #2]
				*len = 1;
    24ec:	f8c8 3000 	str.w	r3, [r8]
    24f0:	e694      	b.n	221c <usb_handle_standard_request+0x34>
	if (usb_reqtype_is_to_host(setup)) {
    24f2:	f994 3000 	ldrsb.w	r3, [r4]
		switch (setup->bRequest) {
    24f6:	7860      	ldrb	r0, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    24f8:	2b00      	cmp	r3, #0
    24fa:	f6bf af50 	bge.w	239e <usb_handle_standard_request+0x1b6>
    24fe:	f8d9 2000 	ldr.w	r2, [r9]
		switch (setup->bRequest) {
    2502:	2800      	cmp	r0, #0
    2504:	f43f af44 	beq.w	2390 <usb_handle_standard_request+0x1a8>
    2508:	280a      	cmp	r0, #10
    250a:	f47f ae81 	bne.w	2210 <usb_handle_standard_request+0x28>
	while (p[DESC_bLength] != 0U) {
    250e:	7829      	ldrb	r1, [r5, #0]
    2510:	2900      	cmp	r1, #0
    2512:	f43f ae7d 	beq.w	2210 <usb_handle_standard_request+0x28>
		if (p[DESC_bDescriptorType] == USB_DESC_INTERFACE) {
    2516:	786b      	ldrb	r3, [r5, #1]
    2518:	2b04      	cmp	r3, #4
    251a:	f47f af3e 	bne.w	239a <usb_handle_standard_request+0x1b2>
			cur_iface = p[INTF_DESC_bInterfaceNumber];
    251e:	78ab      	ldrb	r3, [r5, #2]
			if (cur_iface == setup->wIndex) {
    2520:	459c      	cmp	ip, r3
    2522:	f47f af3a 	bne.w	239a <usb_handle_standard_request+0x1b2>
	if (iface < ARRAY_SIZE(usb_dev.alt_setting)) {
    2526:	2b07      	cmp	r3, #7
		return usb_dev.alt_setting[iface];
    2528:	bf96      	itet	ls
    252a:	199b      	addls	r3, r3, r6
	return 0;
    252c:	2300      	movhi	r3, #0
		return usb_dev.alt_setting[iface];
    252e:	f893 30bb 	ldrbls.w	r3, [r3, #187]	; 0xbb
				data[0] = usb_get_alt_setting(cur_iface);
    2532:	7013      	strb	r3, [r2, #0]
				*len = 1;
    2534:	2301      	movs	r3, #1
    2536:	e7d9      	b.n	24ec <CONFIG_PMW3360_REST1_DOWNSHIFT_TIME_MS+0xe8>

00002538 <usb_set_config>:
	usb_dev.descriptors = usb_descriptors;
    2538:	4b05      	ldr	r3, [pc, #20]	; (2550 <usb_set_config+0x18>)
	usb_dev.req_handlers[type] = handler;
    253a:	4a06      	ldr	r2, [pc, #24]	; (2554 <usb_set_config+0x1c>)
    253c:	629a      	str	r2, [r3, #40]	; 0x28
    253e:	4a06      	ldr	r2, [pc, #24]	; (2558 <usb_set_config+0x20>)
    2540:	62da      	str	r2, [r3, #44]	; 0x2c
    2542:	4a06      	ldr	r2, [pc, #24]	; (255c <usb_set_config+0x24>)
    2544:	631a      	str	r2, [r3, #48]	; 0x30
	usb_dev.custom_req_handler = handler;
    2546:	4a06      	ldr	r2, [pc, #24]	; (2560 <usb_set_config+0x28>)
	usb_dev.descriptors = usb_descriptors;
    2548:	6258      	str	r0, [r3, #36]	; 0x24
	usb_dev.custom_req_handler = handler;
    254a:	619a      	str	r2, [r3, #24]
}
    254c:	2000      	movs	r0, #0
    254e:	4770      	bx	lr
    2550:	20000b84 	.word	0x20000b84
    2554:	000021e9 	.word	0x000021e9
    2558:	00001fb5 	.word	0x00001fb5
    255c:	00002055 	.word	0x00002055
    2560:	00001ff5 	.word	0x00001ff5

00002564 <usb_device_init>:
	if (usb_dev.enabled == true) {
    2564:	4b09      	ldr	r3, [pc, #36]	; (258c <usb_device_init+0x28>)
{
    2566:	b510      	push	{r4, lr}
	if (usb_dev.enabled == true) {
    2568:	f893 40b8 	ldrb.w	r4, [r3, #184]	; 0xb8
    256c:	b954      	cbnz	r4, 2584 <usb_device_init+0x20>
	device_descriptor = usb_get_device_descriptor();
    256e:	f000 f96d 	bl	284c <usb_get_device_descriptor>
	if (!device_descriptor) {
    2572:	b918      	cbnz	r0, 257c <usb_device_init+0x18>
}
    2574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2578:	f7ff bdae 	b.w	20d8 <usb_device_init.part.0>
	usb_set_config(device_descriptor);
    257c:	f7ff ffdc 	bl	2538 <usb_set_config>
	return 0;
    2580:	4620      	mov	r0, r4
}
    2582:	bd10      	pop	{r4, pc}
		return -EALREADY;
    2584:	f06f 0077 	mvn.w	r0, #119	; 0x77
    2588:	e7fb      	b.n	2582 <usb_device_init+0x1e>
    258a:	bf00      	nop
    258c:	20000b84 	.word	0x20000b84

00002590 <usb_update_sn_string_descriptor>:
 * case the device ID returned by the HWINFO driver is bigger, the lower
 * part is used for the USB Serial Number, as that part is usually having
 * more entropy.
 */
__weak uint8_t *usb_update_sn_string_descriptor(void)
{
    2590:	b530      	push	{r4, r5, lr}
	 * unless the user requested a longer serial number.
	 */
	const int usblen = sizeof(CONFIG_USB_DEVICE_SN) / 2;
	uint8_t hwid[MAX(16, sizeof(CONFIG_USB_DEVICE_SN) / 2)];
	static uint8_t sn[sizeof(CONFIG_USB_DEVICE_SN) + 1];
	const char hex[] = "0123456789ABCDEF";
    2592:	4b1f      	ldr	r3, [pc, #124]	; (2610 <usb_update_sn_string_descriptor+0x80>)
{
    2594:	b08b      	sub	sp, #44	; 0x2c
	const char hex[] = "0123456789ABCDEF";
    2596:	aa05      	add	r2, sp, #20
    2598:	f103 0510 	add.w	r5, r3, #16
    259c:	6818      	ldr	r0, [r3, #0]
    259e:	6859      	ldr	r1, [r3, #4]
    25a0:	4614      	mov	r4, r2
    25a2:	c403      	stmia	r4!, {r0, r1}
    25a4:	3308      	adds	r3, #8
    25a6:	42ab      	cmp	r3, r5
    25a8:	4622      	mov	r2, r4
    25aa:	d1f7      	bne.n	259c <usb_update_sn_string_descriptor+0xc>
    25ac:	781b      	ldrb	r3, [r3, #0]
    25ae:	7023      	strb	r3, [r4, #0]
	int hwlen, skip;

	memset(hwid, 0, sizeof(hwid));
    25b0:	2210      	movs	r2, #16
    25b2:	2100      	movs	r1, #0
    25b4:	a801      	add	r0, sp, #4
    25b6:	f008 fafc 	bl	abb2 <memset>
	memset(sn, 0, sizeof(sn));
    25ba:	2212      	movs	r2, #18
    25bc:	2100      	movs	r1, #0
    25be:	4815      	ldr	r0, [pc, #84]	; (2614 <usb_update_sn_string_descriptor+0x84>)
    25c0:	f008 faf7 	bl	abb2 <memset>
		union { uintptr_t x; size_t val; } parm1 = { .val = length };
		return (ssize_t) arch_syscall_invoke2(parm0.x, parm1.x, K_SYSCALL_HWINFO_GET_DEVICE_ID);
	}
#endif
	compiler_barrier();
	return z_impl_hwinfo_get_device_id(buffer, length);
    25c4:	2110      	movs	r1, #16
    25c6:	a801      	add	r0, sp, #4
    25c8:	f008 fcab 	bl	af22 <z_impl_hwinfo_get_device_id>

	hwlen = hwinfo_get_device_id(hwid, sizeof(hwid));
	if (hwlen > 0) {
    25cc:	2800      	cmp	r0, #0
    25ce:	dd1b      	ble.n	2608 <usb_update_sn_string_descriptor+0x78>
		skip = MAX(0, hwlen - usblen);
    25d0:	2808      	cmp	r0, #8
    25d2:	bfb8      	it	lt
    25d4:	2008      	movlt	r0, #8
    25d6:	3808      	subs	r0, #8
    25d8:	ab01      	add	r3, sp, #4
    25da:	4a0e      	ldr	r2, [pc, #56]	; (2614 <usb_update_sn_string_descriptor+0x84>)
    25dc:	4418      	add	r0, r3
		LOG_HEXDUMP_DBG(&hwid[skip], usblen, "Serial Number");
		for (int i = 0; i < usblen; i++) {
    25de:	2100      	movs	r1, #0
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    25e0:	f810 3b01 	ldrb.w	r3, [r0], #1
    25e4:	ac0a      	add	r4, sp, #40	; 0x28
    25e6:	eb04 1413 	add.w	r4, r4, r3, lsr #4
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    25ea:	f003 030f 	and.w	r3, r3, #15
			sn[i * 2] = hex[hwid[i + skip] >> 4];
    25ee:	f814 4c14 	ldrb.w	r4, [r4, #-20]
    25f2:	7014      	strb	r4, [r2, #0]
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    25f4:	ac0a      	add	r4, sp, #40	; 0x28
    25f6:	4423      	add	r3, r4
		for (int i = 0; i < usblen; i++) {
    25f8:	3101      	adds	r1, #1
			sn[i * 2 + 1] = hex[hwid[i + skip] & 0xF];
    25fa:	f813 3c14 	ldrb.w	r3, [r3, #-20]
    25fe:	7053      	strb	r3, [r2, #1]
		for (int i = 0; i < usblen; i++) {
    2600:	2908      	cmp	r1, #8
    2602:	f102 0202 	add.w	r2, r2, #2
    2606:	d1eb      	bne.n	25e0 <usb_update_sn_string_descriptor+0x50>
		}
	}

	return sn;
}
    2608:	4802      	ldr	r0, [pc, #8]	; (2614 <usb_update_sn_string_descriptor+0x84>)
    260a:	b00b      	add	sp, #44	; 0x2c
    260c:	bd30      	pop	{r4, r5, pc}
    260e:	bf00      	nop
    2610:	0000c3d6 	.word	0x0000c3d6
    2614:	20001a9e 	.word	0x20001a9e

00002618 <usb_fix_descriptor>:
 * Restrictions:
 * - just one device configuration (there is only one)
 * - string descriptor must be present
 */
static int usb_fix_descriptor(struct usb_desc_header *head)
{
    2618:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    261c:	b08b      	sub	sp, #44	; 0x2c
    261e:	4604      	mov	r4, r0
    2620:	af00      	add	r7, sp, #0
	struct usb_cfg_descriptor *cfg_descr = NULL;
	struct usb_if_descriptor *if_descr = NULL;
	struct usb_cfg_data *cfg_data = NULL;
	struct usb_ep_descriptor *ep_descr = NULL;
	uint8_t numof_ifaces = 0U;
	uint8_t str_descr_idx = 0U;
    2622:	2600      	movs	r6, #0
	uint32_t requested_ep = BIT(16) | BIT(0);
    2624:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
	uint8_t numof_ifaces = 0U;
    2628:	46b2      	mov	sl, r6
	struct usb_cfg_data *cfg_data = NULL;
    262a:	4635      	mov	r5, r6
	struct usb_cfg_descriptor *cfg_descr = NULL;
    262c:	46b0      	mov	r8, r6

	while (head->bLength != 0U) {
    262e:	7820      	ldrb	r0, [r4, #0]
    2630:	b938      	cbnz	r0, 2642 <usb_fix_descriptor+0x2a>

		/* Move to next descriptor */
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
	}

	if ((head + 1) != __usb_descriptor_end) {
    2632:	4b7c      	ldr	r3, [pc, #496]	; (2824 <usb_fix_descriptor+0x20c>)
    2634:	3402      	adds	r4, #2
    2636:	429c      	cmp	r4, r3
    2638:	d1f3      	bne.n	2622 <usb_fix_descriptor+0xa>
		LOG_DBG("try to fix next descriptor at %p", head + 1);
		return usb_fix_descriptor(head + 1);
	}

	return 0;
}
    263a:	372c      	adds	r7, #44	; 0x2c
    263c:	46bd      	mov	sp, r7
    263e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		switch (head->bDescriptorType) {
    2642:	7863      	ldrb	r3, [r4, #1]
    2644:	2b05      	cmp	r3, #5
    2646:	d805      	bhi.n	2654 <usb_fix_descriptor+0x3c>
    2648:	e8df f003 	tbb	[pc, r3]
    264c:	97030497 	.word	0x97030497
    2650:	2c07      	.short	0x2c07
    2652:	46a0      	mov	r8, r4
		head = (struct usb_desc_header *)((uint8_t *)head + head->bLength);
    2654:	7823      	ldrb	r3, [r4, #0]
    2656:	441c      	add	r4, r3
    2658:	e7e9      	b.n	262e <usb_fix_descriptor+0x16>
			if (if_descr->bAlternateSetting) {
    265a:	78e3      	ldrb	r3, [r4, #3]
    265c:	2b00      	cmp	r3, #0
    265e:	d1f9      	bne.n	2654 <usb_fix_descriptor+0x3c>
			if (if_descr->bInterfaceNumber == 0U) {
    2660:	78a3      	ldrb	r3, [r4, #2]
    2662:	b1e3      	cbz	r3, 269e <usb_fix_descriptor+0x86>
			numof_ifaces++;
    2664:	f10a 0a01 	add.w	sl, sl, #1
    2668:	fa5f fa8a 	uxtb.w	sl, sl
			break;
    266c:	e7f2      	b.n	2654 <usb_fix_descriptor+0x3c>
		if (cfg_data->interface_descriptor == iface) {
    266e:	686a      	ldr	r2, [r5, #4]
    2670:	4294      	cmp	r4, r2
    2672:	f000 80ce 	beq.w	2812 <usb_fix_descriptor+0x1fa>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    2676:	3524      	adds	r5, #36	; 0x24
    2678:	429d      	cmp	r5, r3
    267a:	d3f8      	bcc.n	266e <usb_fix_descriptor+0x56>
					LOG_ERR("There is no usb_cfg_data "
    267c:	4b6a      	ldr	r3, [pc, #424]	; (2828 <usb_fix_descriptor+0x210>)
    267e:	466d      	mov	r5, sp
    2680:	b088      	sub	sp, #32
    2682:	466a      	mov	r2, sp
    2684:	e9c2 3405 	strd	r3, r4, [r2, #20]
    2688:	2303      	movs	r3, #3
    268a:	f842 3f10 	str.w	r3, [r2, #16]!
    268e:	4867      	ldr	r0, [pc, #412]	; (282c <usb_fix_descriptor+0x214>)
    2690:	2300      	movs	r3, #0
    2692:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2696:	f008 f9bc 	bl	aa12 <z_impl_z_log_msg2_static_create>
    269a:	46ad      	mov	sp, r5
    269c:	e010      	b.n	26c0 <usb_fix_descriptor+0xa8>
	STRUCT_SECTION_FOREACH(usb_cfg_data, cfg_data) {
    269e:	4d64      	ldr	r5, [pc, #400]	; (2830 <usb_fix_descriptor+0x218>)
    26a0:	4b64      	ldr	r3, [pc, #400]	; (2834 <usb_fix_descriptor+0x21c>)
    26a2:	e7e9      	b.n	2678 <usb_fix_descriptor+0x60>
			if (!cfg_data) {
    26a4:	2d00      	cmp	r5, #0
    26a6:	d166      	bne.n	2776 <usb_fix_descriptor+0x15e>
				LOG_ERR("Uninitialized usb_cfg_data pointer, "
    26a8:	4b63      	ldr	r3, [pc, #396]	; (2838 <usb_fix_descriptor+0x220>)
				LOG_ERR("Failed to validate endpoints");
    26aa:	627b      	str	r3, [r7, #36]	; 0x24
    26ac:	2302      	movs	r3, #2
    26ae:	623b      	str	r3, [r7, #32]
    26b0:	2300      	movs	r3, #0
    26b2:	485e      	ldr	r0, [pc, #376]	; (282c <usb_fix_descriptor+0x214>)
    26b4:	f107 0220 	add.w	r2, r7, #32
    26b8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    26bc:	f008 f9a9 	bl	aa12 <z_impl_z_log_msg2_static_create>
					return -1;
    26c0:	f04f 30ff 	mov.w	r0, #4294967295
    26c4:	e7b9      	b.n	263a <usb_fix_descriptor+0x22>
		if (ep_descr->bEndpointAddress != ep_data[i].ep_addr) {
    26c6:	6a29      	ldr	r1, [r5, #32]
    26c8:	78a0      	ldrb	r0, [r4, #2]
    26ca:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
    26ce:	790b      	ldrb	r3, [r1, #4]
    26d0:	4298      	cmp	r0, r3
    26d2:	d005      	beq.n	26e0 <usb_fix_descriptor+0xc8>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    26d4:	3201      	adds	r2, #1
    26d6:	7f2b      	ldrb	r3, [r5, #28]
    26d8:	429a      	cmp	r2, r3
    26da:	d3f4      	bcc.n	26c6 <usb_fix_descriptor+0xae>
				LOG_ERR("Failed to validate endpoints");
    26dc:	4b57      	ldr	r3, [pc, #348]	; (283c <usb_fix_descriptor+0x224>)
    26de:	e7e4      	b.n	26aa <usb_fix_descriptor+0x92>
    26e0:	f04f 0901 	mov.w	r9, #1
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    26e4:	78e0      	ldrb	r0, [r4, #3]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    26e6:	f894 c005 	ldrb.w	ip, [r4, #5]
			ep_cfg.ep_type = (ep_descr->bmAttributes &
    26ea:	f000 0003 	and.w	r0, r0, #3
    26ee:	7538      	strb	r0, [r7, #20]
			ep_cfg.ep_mps = ep_descr->wMaxPacketSize;
    26f0:	7920      	ldrb	r0, [r4, #4]
    26f2:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
    26f6:	8278      	strh	r0, [r7, #18]
			if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    26f8:	f994 0002 	ldrsb.w	r0, [r4, #2]
    26fc:	2800      	cmp	r0, #0
    26fe:	fa5f f389 	uxtb.w	r3, r9
    2702:	da2a      	bge.n	275a <usb_fix_descriptor+0x142>
				if ((*requested_ep & (1U << (idx + 16U)))) {
    2704:	f109 0010 	add.w	r0, r9, #16
    2708:	f04f 0c01 	mov.w	ip, #1
    270c:	fa0c f000 	lsl.w	r0, ip, r0
    2710:	ea10 0f0b 	tst.w	r0, fp
    2714:	d129      	bne.n	276a <usb_fix_descriptor+0x152>
				ep_cfg.ep_addr = (USB_EP_DIR_IN | idx);
    2716:	f063 007f 	orn	r0, r3, #127	; 0x7f
    271a:	7438      	strb	r0, [r7, #16]
			if (!usb_dc_ep_check_cap(&ep_cfg)) {
    271c:	f107 0010 	add.w	r0, r7, #16
    2720:	e9c7 3101 	strd	r3, r1, [r7, #4]
    2724:	60fa      	str	r2, [r7, #12]
    2726:	f001 fe39 	bl	439c <usb_dc_ep_check_cap>
    272a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
    272e:	687b      	ldr	r3, [r7, #4]
    2730:	b9d8      	cbnz	r0, 276a <usb_fix_descriptor+0x152>
				ep_descr->bEndpointAddress = ep_cfg.ep_addr;
    2732:	7c3a      	ldrb	r2, [r7, #16]
    2734:	70a2      	strb	r2, [r4, #2]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    2736:	f012 0f80 	tst.w	r2, #128	; 0x80
					*requested_ep |= (1U << (idx + 16U));
    273a:	bf1c      	itt	ne
    273c:	3310      	addne	r3, #16
    273e:	b2db      	uxtbne	r3, r3
				ep_data[i].ep_addr = ep_cfg.ep_addr;
    2740:	710a      	strb	r2, [r1, #4]
				if (ep_cfg.ep_addr & USB_EP_DIR_IN) {
    2742:	f04f 0201 	mov.w	r2, #1
					*requested_ep |= (1U << (idx + 16U));
    2746:	bf15      	itete	ne
    2748:	fa02 f303 	lslne.w	r3, r2, r3
					*requested_ep |= (1U << idx);
    274c:	fa02 f209 	lsleq.w	r2, r2, r9
					*requested_ep |= (1U << (idx + 16U));
    2750:	ea4b 0b03 	orrne.w	fp, fp, r3
					*requested_ep |= (1U << idx);
    2754:	ea4b 0b02 	orreq.w	fp, fp, r2
				return 0;
    2758:	e77c      	b.n	2654 <usb_fix_descriptor+0x3c>
				if ((*requested_ep & (1U << (idx)))) {
    275a:	2001      	movs	r0, #1
    275c:	fa00 f009 	lsl.w	r0, r0, r9
    2760:	ea10 0f0b 	tst.w	r0, fp
    2764:	d101      	bne.n	276a <usb_fix_descriptor+0x152>
				ep_cfg.ep_addr = idx;
    2766:	743b      	strb	r3, [r7, #16]
    2768:	e7d8      	b.n	271c <usb_fix_descriptor+0x104>
		for (uint8_t idx = 1; idx < 16U; idx++) {
    276a:	f109 0901 	add.w	r9, r9, #1
    276e:	f1b9 0f10 	cmp.w	r9, #16
    2772:	d1b7      	bne.n	26e4 <usb_fix_descriptor+0xcc>
    2774:	e7ae      	b.n	26d4 <usb_fix_descriptor+0xbc>
	for (unsigned int i = 0; i < cfg_data->num_endpoints; i++) {
    2776:	2200      	movs	r2, #0
    2778:	e7ad      	b.n	26d6 <usb_fix_descriptor+0xbe>
			if (str_descr_idx == USB_DESC_SERIAL_NUMBER_IDX) {
    277a:	2e03      	cmp	r6, #3
    277c:	d12a      	bne.n	27d4 <usb_fix_descriptor+0x1bc>
	uint8_t *runtime_sn =  usb_update_sn_string_descriptor();
    277e:	f7ff ff07 	bl	2590 <usb_update_sn_string_descriptor>
	if (!runtime_sn) {
    2782:	4681      	mov	r9, r0
    2784:	b1a8      	cbz	r0, 27b2 <usb_fix_descriptor+0x19a>
	runtime_sn_len = strlen(runtime_sn);
    2786:	f008 f9ed 	bl	ab64 <strlen>
	if (!runtime_sn_len) {
    278a:	60f8      	str	r0, [r7, #12]
    278c:	b188      	cbz	r0, 27b2 <usb_fix_descriptor+0x19a>
	default_sn_len = strlen(CONFIG_USB_DEVICE_SN);
    278e:	482c      	ldr	r0, [pc, #176]	; (2840 <usb_fix_descriptor+0x228>)
    2790:	f008 f9e8 	bl	ab64 <strlen>
	if (runtime_sn_len != default_sn_len) {
    2794:	68fa      	ldr	r2, [r7, #12]
    2796:	4282      	cmp	r2, r0
    2798:	d017      	beq.n	27ca <usb_fix_descriptor+0x1b2>
		LOG_ERR("the new SN descriptor doesn't have the same "
    279a:	4b2a      	ldr	r3, [pc, #168]	; (2844 <usb_fix_descriptor+0x22c>)
    279c:	627b      	str	r3, [r7, #36]	; 0x24
    279e:	2302      	movs	r3, #2
    27a0:	623b      	str	r3, [r7, #32]
    27a2:	4822      	ldr	r0, [pc, #136]	; (282c <usb_fix_descriptor+0x214>)
    27a4:	2300      	movs	r3, #0
    27a6:	f107 0220 	add.w	r2, r7, #32
    27aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    27ae:	f008 f930 	bl	aa12 <z_impl_z_log_msg2_static_create>
	int idx_max = USB_BSTRING_UTF16LE_IDX_MAX(str_descr->bLength);
    27b2:	7823      	ldrb	r3, [r4, #0]
	for (int i = idx_max; i >= 0; i -= 2) {
    27b4:	f06f 0102 	mvn.w	r1, #2
    27b8:	18e2      	adds	r2, r4, r3
    27ba:	1b09      	subs	r1, r1, r4
    27bc:	eb04 0353 	add.w	r3, r4, r3, lsr #1
    27c0:	42d1      	cmn	r1, r2
    27c2:	d512      	bpl.n	27ea <usb_fix_descriptor+0x1d2>
			str_descr_idx += 1U;
    27c4:	3601      	adds	r6, #1
    27c6:	b2f6      	uxtb	r6, r6
			break;
    27c8:	e744      	b.n	2654 <usb_fix_descriptor+0x3c>
	memcpy(sn->bString, runtime_sn, runtime_sn_len);
    27ca:	4649      	mov	r1, r9
    27cc:	1ca0      	adds	r0, r4, #2
    27ce:	f008 f9e5 	bl	ab9c <memcpy>
    27d2:	e7ee      	b.n	27b2 <usb_fix_descriptor+0x19a>
			if (str_descr_idx) {
    27d4:	2e00      	cmp	r6, #0
    27d6:	d1ec      	bne.n	27b2 <usb_fix_descriptor+0x19a>
				if (!cfg_descr) {
    27d8:	f1b8 0f00 	cmp.w	r8, #0
    27dc:	d10e      	bne.n	27fc <usb_fix_descriptor+0x1e4>
					LOG_ERR("Incomplete device descriptor");
    27de:	4b1a      	ldr	r3, [pc, #104]	; (2848 <usb_fix_descriptor+0x230>)
    27e0:	627b      	str	r3, [r7, #36]	; 0x24
    27e2:	2302      	movs	r3, #2
    27e4:	623b      	str	r3, [r7, #32]
    27e6:	4643      	mov	r3, r8
    27e8:	e763      	b.n	26b2 <usb_fix_descriptor+0x9a>
		buf[i] = 0U;
    27ea:	f04f 0000 	mov.w	r0, #0
    27ee:	f802 0c01 	strb.w	r0, [r2, #-1]
		buf[i - 1] = buf[ascii_idx_max--];
    27f2:	f813 0901 	ldrb.w	r0, [r3], #-1
    27f6:	f802 0d02 	strb.w	r0, [r2, #-2]!
	for (int i = idx_max; i >= 0; i -= 2) {
    27fa:	e7e1      	b.n	27c0 <usb_fix_descriptor+0x1a8>
				sys_put_le16((uint8_t *)head - (uint8_t *)cfg_descr,
    27fc:	eba4 0308 	sub.w	r3, r4, r8
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
    2800:	f888 3002 	strb.w	r3, [r8, #2]
	dst[1] = val >> 8;
    2804:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2808:	f888 3003 	strb.w	r3, [r8, #3]
				cfg_descr->bNumInterfaces = numof_ifaces;
    280c:	f888 a004 	strb.w	sl, [r8, #4]
    2810:	e7d8      	b.n	27c4 <usb_fix_descriptor+0x1ac>
				if (cfg_data->interface_config) {
    2812:	68ab      	ldr	r3, [r5, #8]
    2814:	2b00      	cmp	r3, #0
    2816:	f43f af25 	beq.w	2664 <usb_fix_descriptor+0x4c>
					cfg_data->interface_config(head,
    281a:	4651      	mov	r1, sl
    281c:	4620      	mov	r0, r4
    281e:	4798      	blx	r3
    2820:	e720      	b.n	2664 <usb_fix_descriptor+0x4c>
    2822:	bf00      	nop
    2824:	20000222 	.word	0x20000222
    2828:	0000c4ad 	.word	0x0000c4ad
    282c:	0000be48 	.word	0x0000be48
    2830:	20000224 	.word	0x20000224
    2834:	20000248 	.word	0x20000248
    2838:	0000c3e7 	.word	0x0000c3e7
    283c:	0000c428 	.word	0x0000c428
    2840:	0000c3d6 	.word	0x0000c3d6
    2844:	0000c445 	.word	0x0000c445
    2848:	0000c490 	.word	0x0000c490

0000284c <usb_get_device_descriptor>:


uint8_t *usb_get_device_descriptor(void)
{
    284c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	LOG_DBG("__usb_descriptor_start %p", __usb_descriptor_start);
	LOG_DBG("__usb_descriptor_end %p", __usb_descriptor_end);

	if (usb_fix_descriptor(__usb_descriptor_start)) {
    284e:	480a      	ldr	r0, [pc, #40]	; (2878 <usb_get_device_descriptor+0x2c>)
    2850:	f7ff fee2 	bl	2618 <usb_fix_descriptor>
    2854:	b170      	cbz	r0, 2874 <usb_get_device_descriptor+0x28>
		LOG_ERR("Failed to fixup USB descriptor");
    2856:	4b09      	ldr	r3, [pc, #36]	; (287c <usb_get_device_descriptor+0x30>)
    2858:	9305      	str	r3, [sp, #20]
    285a:	2302      	movs	r3, #2
    285c:	9304      	str	r3, [sp, #16]
    285e:	4808      	ldr	r0, [pc, #32]	; (2880 <usb_get_device_descriptor+0x34>)
    2860:	2300      	movs	r3, #0
    2862:	aa04      	add	r2, sp, #16
    2864:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2868:	f008 f8d3 	bl	aa12 <z_impl_z_log_msg2_static_create>
		return NULL;
    286c:	2000      	movs	r0, #0
	}

	return (uint8_t *) __usb_descriptor_start;
}
    286e:	b007      	add	sp, #28
    2870:	f85d fb04 	ldr.w	pc, [sp], #4
	return (uint8_t *) __usb_descriptor_start;
    2874:	4800      	ldr	r0, [pc, #0]	; (2878 <usb_get_device_descriptor+0x2c>)
    2876:	e7fa      	b.n	286e <usb_get_device_descriptor+0x22>
    2878:	200001a0 	.word	0x200001a0
    287c:	0000c4cd 	.word	0x0000c4cd
    2880:	0000be48 	.word	0x0000be48

00002884 <usb_ep_get_transfer>:
/** Max number of parallel transfers */
static struct usb_transfer_data ut_data[CONFIG_USB_MAX_NUM_TRANSFERS];

/* Transfer management */
static struct usb_transfer_data *usb_ep_get_transfer(uint8_t ep)
{
    2884:	b510      	push	{r4, lr}
    2886:	4b09      	ldr	r3, [pc, #36]	; (28ac <usb_ep_get_transfer+0x28>)
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    2888:	2100      	movs	r1, #0
    288a:	461a      	mov	r2, r3
		if (ut_data[i].ep == ep && ut_data[i].status != 0) {
    288c:	781c      	ldrb	r4, [r3, #0]
    288e:	4284      	cmp	r4, r0
    2890:	d104      	bne.n	289c <usb_ep_get_transfer+0x18>
    2892:	685c      	ldr	r4, [r3, #4]
    2894:	b114      	cbz	r4, 289c <usb_ep_get_transfer+0x18>
			return &ut_data[i];
    2896:	eb02 1081 	add.w	r0, r2, r1, lsl #6
		}
	}

	return NULL;
}
    289a:	bd10      	pop	{r4, pc}
	for (int i = 0; i < ARRAY_SIZE(ut_data); i++) {
    289c:	3101      	adds	r1, #1
    289e:	2904      	cmp	r1, #4
    28a0:	f103 0340 	add.w	r3, r3, #64	; 0x40
    28a4:	d1f2      	bne.n	288c <usb_ep_get_transfer+0x8>
	return NULL;
    28a6:	2000      	movs	r0, #0
    28a8:	e7f7      	b.n	289a <usb_ep_get_transfer+0x16>
    28aa:	bf00      	nop
    28ac:	20000c48 	.word	0x20000c48

000028b0 <usb_cancel_transfer>:
	irq_unlock(key);
	return ret;
}

void usb_cancel_transfer(uint8_t ep)
{
    28b0:	b510      	push	{r4, lr}
	__asm__ volatile(
    28b2:	f04f 0320 	mov.w	r3, #32
    28b6:	f3ef 8411 	mrs	r4, BASEPRI
    28ba:	f383 8812 	msr	BASEPRI_MAX, r3
    28be:	f3bf 8f6f 	isb	sy
	struct usb_transfer_data *trans;
	unsigned int key;

	key = irq_lock();

	trans = usb_ep_get_transfer(ep);
    28c2:	f7ff ffdf 	bl	2884 <usb_ep_get_transfer>
	if (!trans) {
    28c6:	b150      	cbz	r0, 28de <usb_cancel_transfer+0x2e>
		goto done;
	}

	if (trans->status != -EBUSY) {
    28c8:	6843      	ldr	r3, [r0, #4]
    28ca:	3310      	adds	r3, #16
    28cc:	d107      	bne.n	28de <usb_cancel_transfer+0x2e>
		goto done;
	}

	trans->status = -ECANCELED;
    28ce:	f06f 038b 	mvn.w	r3, #139	; 0x8b
    28d2:	6043      	str	r3, [r0, #4]
	k_work_submit_to_queue(&USB_WORK_Q, &trans->work);
    28d4:	f100 012c 	add.w	r1, r0, #44	; 0x2c
    28d8:	4803      	ldr	r0, [pc, #12]	; (28e8 <usb_cancel_transfer+0x38>)
    28da:	f008 fee7 	bl	b6ac <k_work_submit_to_queue>
	__asm__ volatile(
    28de:	f384 8811 	msr	BASEPRI, r4
    28e2:	f3bf 8f6f 	isb	sy

done:
	irq_unlock(key);
}
    28e6:	bd10      	pop	{r4, pc}
    28e8:	20000a50 	.word	0x20000a50

000028ec <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    28ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    28f0:	4605      	mov	r5, r0
	__asm__ volatile(
    28f2:	f04f 0320 	mov.w	r3, #32
    28f6:	f3ef 8611 	mrs	r6, BASEPRI
    28fa:	f383 8812 	msr	BASEPRI_MAX, r3
    28fe:	f3bf 8f6f 	isb	sy
	return list->head;
    2902:	4b0e      	ldr	r3, [pc, #56]	; (293c <pm_state_notify+0x50>)
    2904:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    2906:	b19c      	cbz	r4, 2930 <pm_state_notify+0x44>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_cpus_pm_state[_current_cpu->id].state);
    2908:	4f0d      	ldr	r7, [pc, #52]	; (2940 <pm_state_notify+0x54>)
    290a:	f8df 8038 	ldr.w	r8, [pc, #56]	; 2944 <pm_state_notify+0x58>
    290e:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    2912:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    2916:	2d00      	cmp	r5, #0
    2918:	bf08      	it	eq
    291a:	4613      	moveq	r3, r2
		if (callback) {
    291c:	b12b      	cbz	r3, 292a <pm_state_notify+0x3e>
			callback(z_cpus_pm_state[_current_cpu->id].state);
    291e:	f898 2014 	ldrb.w	r2, [r8, #20]
    2922:	fb09 f202 	mul.w	r2, r9, r2
    2926:	5cb8      	ldrb	r0, [r7, r2]
    2928:	4798      	blx	r3
	return node->next;
    292a:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    292c:	2c00      	cmp	r4, #0
    292e:	d1f0      	bne.n	2912 <pm_state_notify+0x26>
	__asm__ volatile(
    2930:	f386 8811 	msr	BASEPRI, r6
    2934:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2938:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    293c:	20000d48 	.word	0x20000d48
    2940:	20000d50 	.word	0x20000d50
    2944:	20001a48 	.word	0x20001a48

00002948 <atomic_clear_bit.constprop.0>:
 */
static inline void atomic_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2948:	0942      	lsrs	r2, r0, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
    294a:	2301      	movs	r3, #1
    294c:	f000 001f 	and.w	r0, r0, #31
    2950:	fa03 f000 	lsl.w	r0, r3, r0
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    2954:	4b07      	ldr	r3, [pc, #28]	; (2974 <atomic_clear_bit.constprop.0+0x2c>)
    2956:	f3bf 8f5b 	dmb	ish
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    295a:	43c0      	mvns	r0, r0
    295c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    2960:	e853 2f00 	ldrex	r2, [r3]
    2964:	4002      	ands	r2, r0
    2966:	e843 2100 	strex	r1, r2, [r3]
    296a:	2900      	cmp	r1, #0
    296c:	d1f8      	bne.n	2960 <atomic_clear_bit.constprop.0+0x18>
    296e:	f3bf 8f5b 	dmb	ish
}
    2972:	4770      	bx	lr
    2974:	20000d5c 	.word	0x20000d5c

00002978 <pm_system_resume>:

void pm_system_resume(void)
{
    2978:	b538      	push	{r3, r4, r5, lr}
	uint8_t id = _current_cpu->id;
    297a:	4b1a      	ldr	r3, [pc, #104]	; (29e4 <pm_system_resume+0x6c>)
    297c:	7d1c      	ldrb	r4, [r3, #20]
    297e:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    2982:	f004 031f 	and.w	r3, r4, #31
    2986:	2201      	movs	r2, #1
    2988:	409a      	lsls	r2, r3
    298a:	4b17      	ldr	r3, [pc, #92]	; (29e8 <pm_system_resume+0x70>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    298c:	0961      	lsrs	r1, r4, #5
    298e:	43d0      	mvns	r0, r2
    2990:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    2994:	e853 1f00 	ldrex	r1, [r3]
    2998:	ea01 0500 	and.w	r5, r1, r0
    299c:	e843 5c00 	strex	ip, r5, [r3]
    29a0:	f1bc 0f00 	cmp.w	ip, #0
    29a4:	d1f6      	bne.n	2994 <pm_system_resume+0x1c>
    29a6:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    29aa:	4211      	tst	r1, r2
    29ac:	d013      	beq.n	29d6 <pm_system_resume+0x5e>
	if (pm_state_exit_post_ops != NULL) {
    29ae:	4b0f      	ldr	r3, [pc, #60]	; (29ec <pm_system_resume+0x74>)
    29b0:	4d0f      	ldr	r5, [pc, #60]	; (29f0 <pm_system_resume+0x78>)
    29b2:	b18b      	cbz	r3, 29d8 <pm_system_resume+0x60>
		pm_state_exit_post_ops(info->state, info->substate_id);
    29b4:	230c      	movs	r3, #12
    29b6:	4363      	muls	r3, r4
    29b8:	18ea      	adds	r2, r5, r3
    29ba:	5ce8      	ldrb	r0, [r5, r3]
    29bc:	7851      	ldrb	r1, [r2, #1]
    29be:	f008 f91e 	bl	abfe <pm_state_exit_post_ops>
		pm_exit_pos_ops(&z_cpus_pm_state[id]);
		pm_state_notify(false);
    29c2:	2000      	movs	r0, #0
    29c4:	f7ff ff92 	bl	28ec <pm_state_notify>
		z_cpus_pm_state[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    29c8:	230c      	movs	r3, #12
    29ca:	435c      	muls	r4, r3
    29cc:	192a      	adds	r2, r5, r4
    29ce:	2300      	movs	r3, #0
    29d0:	512b      	str	r3, [r5, r4]
    29d2:	e9c2 3301 	strd	r3, r3, [r2, #4]
			0, 0};
	}
}
    29d6:	bd38      	pop	{r3, r4, r5, pc}
    29d8:	f383 8811 	msr	BASEPRI, r3
    29dc:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    29e0:	e7ef      	b.n	29c2 <pm_system_resume+0x4a>
    29e2:	bf00      	nop
    29e4:	20001a48 	.word	0x20001a48
    29e8:	20000d60 	.word	0x20000d60
    29ec:	0000abff 	.word	0x0000abff
    29f0:	20000d50 	.word	0x20000d50

000029f4 <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    29f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    29f8:	4b32      	ldr	r3, [pc, #200]	; (2ac4 <pm_system_suspend+0xd0>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    29fa:	4a33      	ldr	r2, [pc, #204]	; (2ac8 <pm_system_suspend+0xd4>)
    29fc:	7d1c      	ldrb	r4, [r3, #20]
    29fe:	f3bf 8f5b 	dmb	ish
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    2a02:	0963      	lsrs	r3, r4, #5
    2a04:	ea4f 0983 	mov.w	r9, r3, lsl #2
    2a08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    2a0c:	4e2f      	ldr	r6, [pc, #188]	; (2acc <pm_system_suspend+0xd8>)
    2a0e:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    2a12:	f004 081f 	and.w	r8, r4, #31
    2a16:	fa43 f308 	asr.w	r3, r3, r8

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    2a1a:	f013 0f01 	tst.w	r3, #1
{
    2a1e:	4607      	mov	r7, r0
	if (!atomic_test_bit(z_cpus_pm_state_forced, id)) {
    2a20:	d10a      	bne.n	2a38 <pm_system_suspend+0x44>
		const struct pm_state_info *info;

		info = pm_policy_next_state(id, ticks);
    2a22:	4601      	mov	r1, r0
    2a24:	4620      	mov	r0, r4
    2a26:	f000 f869 	bl	2afc <pm_policy_next_state>
		if (info != NULL) {
    2a2a:	b128      	cbz	r0, 2a38 <pm_system_suspend+0x44>
			z_cpus_pm_state[id] = *info;
    2a2c:	c807      	ldmia	r0, {r0, r1, r2}
    2a2e:	230c      	movs	r3, #12
    2a30:	fb03 6304 	mla	r3, r3, r4, r6
    2a34:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		}
	}

	if (z_cpus_pm_state[id].state == PM_STATE_ACTIVE) {
    2a38:	230c      	movs	r3, #12
    2a3a:	4363      	muls	r3, r4
    2a3c:	18f2      	adds	r2, r6, r3
    2a3e:	5cf5      	ldrb	r5, [r6, r3]
    2a40:	b92d      	cbnz	r5, 2a4e <pm_system_suspend+0x5a>
		LOG_DBG("No PM operations done.");
		SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);
		ret = false;
		atomic_clear_bit(z_cpus_pm_state_forced, id);
    2a42:	4620      	mov	r0, r4
    2a44:	f7ff ff80 	bl	2948 <atomic_clear_bit.constprop.0>
		ret = false;
    2a48:	4628      	mov	r0, r5
	SYS_PORT_TRACING_FUNC_EXIT(pm, system_suspend, ticks,
				   z_cpus_pm_state[id].state);

end:
	return ret;
}
    2a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (ticks != K_TICKS_FOREVER) {
    2a4e:	1c7b      	adds	r3, r7, #1
    2a50:	d00f      	beq.n	2a72 <pm_system_suspend+0x7e>
		} else {
			return t * ((uint64_t)to_hz / from_hz);
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
    2a52:	f8d2 c008 	ldr.w	ip, [r2, #8]
    2a56:	481e      	ldr	r0, [pc, #120]	; (2ad0 <pm_system_suspend+0xdc>)
    2a58:	4a1e      	ldr	r2, [pc, #120]	; (2ad4 <pm_system_suspend+0xe0>)
    2a5a:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    2a5e:	2100      	movs	r1, #0
    2a60:	2300      	movs	r3, #0
    2a62:	fbec 0105 	umlal	r0, r1, ip, r5
    2a66:	f7fd fb3b 	bl	e0 <__aeabi_uldivmod>
		z_set_timeout_expiry(ticks -
    2a6a:	2101      	movs	r1, #1
    2a6c:	1a38      	subs	r0, r7, r0
    2a6e:	f008 ff79 	bl	b964 <z_set_timeout_expiry>
	k_sched_lock();
    2a72:	f006 fc33 	bl	92dc <k_sched_lock>
	pm_state_notify(true);
    2a76:	2001      	movs	r0, #1
    2a78:	f7ff ff38 	bl	28ec <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2a7c:	f3bf 8f5b 	dmb	ish
 * @param target Address of atomic variable or array.
 * @param bit Bit number (starting from 0).
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2a80:	2301      	movs	r3, #1
    2a82:	fa03 f808 	lsl.w	r8, r3, r8
    2a86:	4b14      	ldr	r3, [pc, #80]	; (2ad8 <pm_system_suspend+0xe4>)
    2a88:	4499      	add	r9, r3
    2a8a:	e859 3f00 	ldrex	r3, [r9]
    2a8e:	ea43 0308 	orr.w	r3, r3, r8
    2a92:	e849 3200 	strex	r2, r3, [r9]
    2a96:	2a00      	cmp	r2, #0
    2a98:	d1f7      	bne.n	2a8a <pm_system_suspend+0x96>
    2a9a:	f3bf 8f5b 	dmb	ish
	if (pm_state_set != NULL) {
    2a9e:	4b0f      	ldr	r3, [pc, #60]	; (2adc <pm_system_suspend+0xe8>)
    2aa0:	b133      	cbz	r3, 2ab0 <pm_system_suspend+0xbc>
		pm_state_set(info->state, info->substate_id);
    2aa2:	230c      	movs	r3, #12
    2aa4:	4363      	muls	r3, r4
    2aa6:	18f2      	adds	r2, r6, r3
    2aa8:	5cf0      	ldrb	r0, [r6, r3]
    2aaa:	7851      	ldrb	r1, [r2, #1]
    2aac:	f008 f89b 	bl	abe6 <pm_state_set>
	pm_system_resume();
    2ab0:	f7ff ff62 	bl	2978 <pm_system_resume>
	atomic_clear_bit(z_cpus_pm_state_forced, id);
    2ab4:	4620      	mov	r0, r4
    2ab6:	f7ff ff47 	bl	2948 <atomic_clear_bit.constprop.0>
	k_sched_unlock();
    2aba:	f006 fddf 	bl	967c <k_sched_unlock>
	bool ret = true;
    2abe:	2001      	movs	r0, #1
    2ac0:	e7c3      	b.n	2a4a <pm_system_suspend+0x56>
    2ac2:	bf00      	nop
    2ac4:	20001a48 	.word	0x20001a48
    2ac8:	20000d5c 	.word	0x20000d5c
    2acc:	20000d50 	.word	0x20000d50
    2ad0:	000f423f 	.word	0x000f423f
    2ad4:	000f4240 	.word	0x000f4240
    2ad8:	20000d60 	.word	0x20000d60
    2adc:	0000abe7 	.word	0x0000abe7

00002ae0 <pm_policy_state_lock_is_active>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    2ae0:	4b05      	ldr	r3, [pc, #20]	; (2af8 <pm_policy_state_lock_is_active+0x18>)
    2ae2:	f3bf 8f5b 	dmb	ish
    2ae6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    2aea:	f3bf 8f5b 	dmb	ish
}

bool pm_policy_state_lock_is_active(enum pm_state state)
{
	return (atomic_get(&state_lock_cnt[state]) != 0);
}
    2aee:	3800      	subs	r0, #0
    2af0:	bf18      	it	ne
    2af2:	2001      	movne	r0, #1
    2af4:	4770      	bx	lr
    2af6:	bf00      	nop
    2af8:	20000d64 	.word	0x20000d64

00002afc <pm_policy_next_state>:
{
    2afc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2b00:	b085      	sub	sp, #20
    2b02:	460f      	mov	r7, r1
	num_cpu_states = pm_state_cpu_get_all(cpu, &cpu_states);
    2b04:	a903      	add	r1, sp, #12
    2b06:	f000 f847 	bl	2b98 <pm_state_cpu_get_all>
    2b0a:	f8df 8080 	ldr.w	r8, [pc, #128]	; 2b8c <pm_policy_next_state+0x90>
    2b0e:	f8df a080 	ldr.w	sl, [pc, #128]	; 2b90 <pm_policy_next_state+0x94>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2b12:	1e44      	subs	r4, r0, #1
    2b14:	b224      	sxth	r4, r4
    2b16:	f04f 0b00 	mov.w	fp, #0
    2b1a:	1c63      	adds	r3, r4, #1
    2b1c:	d104      	bne.n	2b28 <pm_policy_next_state+0x2c>
	return NULL;
    2b1e:	2600      	movs	r6, #0
}
    2b20:	4630      	mov	r0, r6
    2b22:	b005      	add	sp, #20
    2b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		const struct pm_state_info *state = &cpu_states[i];
    2b28:	9a03      	ldr	r2, [sp, #12]
    2b2a:	eb04 0344 	add.w	r3, r4, r4, lsl #1
    2b2e:	eb02 0683 	add.w	r6, r2, r3, lsl #2
		if (pm_policy_state_lock_is_active(state->state)) {
    2b32:	f812 0023 	ldrb.w	r0, [r2, r3, lsl #2]
    2b36:	f7ff ffd3 	bl	2ae0 <pm_policy_state_lock_is_active>
    2b3a:	4605      	mov	r5, r0
    2b3c:	bb10      	cbnz	r0, 2b84 <pm_policy_next_state+0x88>
    2b3e:	6870      	ldr	r0, [r6, #4]
    2b40:	f44f 4900 	mov.w	r9, #32768	; 0x8000
    2b44:	46c4      	mov	ip, r8
    2b46:	4629      	mov	r1, r5
    2b48:	fbe0 c109 	umlal	ip, r1, r0, r9
    2b4c:	4652      	mov	r2, sl
    2b4e:	465b      	mov	r3, fp
    2b50:	4660      	mov	r0, ip
    2b52:	f7fd fac5 	bl	e0 <__aeabi_uldivmod>
    2b56:	9001      	str	r0, [sp, #4]
    2b58:	68b0      	ldr	r0, [r6, #8]
    2b5a:	46c4      	mov	ip, r8
    2b5c:	4629      	mov	r1, r5
    2b5e:	fbe0 c109 	umlal	ip, r1, r0, r9
    2b62:	465b      	mov	r3, fp
    2b64:	4652      	mov	r2, sl
    2b66:	4660      	mov	r0, ip
    2b68:	f7fd faba 	bl	e0 <__aeabi_uldivmod>
		if ((max_latency_ticks != K_TICKS_FOREVER) &&
    2b6c:	4b09      	ldr	r3, [pc, #36]	; (2b94 <pm_policy_next_state+0x98>)
    2b6e:	681b      	ldr	r3, [r3, #0]
    2b70:	1c59      	adds	r1, r3, #1
    2b72:	d001      	beq.n	2b78 <pm_policy_next_state+0x7c>
    2b74:	4283      	cmp	r3, r0
    2b76:	d905      	bls.n	2b84 <pm_policy_next_state+0x88>
		if ((ticks == K_TICKS_FOREVER) ||
    2b78:	1c7a      	adds	r2, r7, #1
    2b7a:	d0d1      	beq.n	2b20 <pm_policy_next_state+0x24>
		    (ticks >= (min_residency + exit_latency))) {
    2b7c:	9b01      	ldr	r3, [sp, #4]
    2b7e:	4418      	add	r0, r3
		if ((ticks == K_TICKS_FOREVER) ||
    2b80:	42b8      	cmp	r0, r7
    2b82:	d9cd      	bls.n	2b20 <pm_policy_next_state+0x24>
	for (int16_t i = (int16_t)num_cpu_states - 1; i >= 0; i--) {
    2b84:	3c01      	subs	r4, #1
    2b86:	b224      	sxth	r4, r4
    2b88:	e7c7      	b.n	2b1a <pm_policy_next_state+0x1e>
    2b8a:	bf00      	nop
    2b8c:	000f423f 	.word	0x000f423f
    2b90:	000f4240 	.word	0x000f4240
    2b94:	20000008 	.word	0x20000008

00002b98 <pm_state_cpu_get_all>:
	DT_FOREACH_CHILD(DT_PATH(cpus), NUM_CPU_STATES)
};

uint8_t pm_state_cpu_get_all(uint8_t cpu, const struct pm_state_info **states)
{
	if (cpu >= ARRAY_SIZE(cpus_states)) {
    2b98:	b908      	cbnz	r0, 2b9e <pm_state_cpu_get_all+0x6>
		return 0;
	}

	*states = cpus_states[cpu];
    2b9a:	4b02      	ldr	r3, [pc, #8]	; (2ba4 <pm_state_cpu_get_all+0xc>)
    2b9c:	600b      	str	r3, [r1, #0]

	return states_per_cpu[cpu];
}
    2b9e:	2000      	movs	r0, #0
    2ba0:	4770      	bx	lr
    2ba2:	bf00      	nop
    2ba4:	0000bf40 	.word	0x0000bf40

00002ba8 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    2ba8:	4901      	ldr	r1, [pc, #4]	; (2bb0 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    2baa:	2210      	movs	r2, #16
	str	r2, [r1]
    2bac:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2bae:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2bb0:	e000ed10 	.word	0xe000ed10

00002bb4 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2bb4:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    2bb6:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    2bb8:	f380 8811 	msr	BASEPRI, r0
	isb
    2bbc:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2bc0:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2bc4:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    2bc6:	b662      	cpsie	i
	isb
    2bc8:	f3bf 8f6f 	isb	sy

	bx	lr
    2bcc:	4770      	bx	lr
    2bce:	bf00      	nop

00002bd0 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2bd0:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2bd2:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2bd4:	f381 8811 	msr	BASEPRI, r1

	wfe
    2bd8:	bf20      	wfe

	msr	BASEPRI, r0
    2bda:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    2bde:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    2be0:	4770      	bx	lr
    2be2:	bf00      	nop

00002be4 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    2be4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2be8:	4681      	mov	r9, r0
    2bea:	af00      	add	r7, sp, #0

	if (esf != NULL) {
    2bec:	460c      	mov	r4, r1
    2bee:	2900      	cmp	r1, #0
    2bf0:	d04c      	beq.n	2c8c <z_arm_fatal_error+0xa8>
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    2bf2:	466e      	mov	r6, sp
    2bf4:	b08a      	sub	sp, #40	; 0x28
    2bf6:	466d      	mov	r5, sp
    2bf8:	e9d1 1200 	ldrd	r1, r2, [r1]
    2bfc:	68a3      	ldr	r3, [r4, #8]
    2bfe:	4827      	ldr	r0, [pc, #156]	; (2c9c <z_arm_fatal_error+0xb8>)
    2c00:	46a8      	mov	r8, r5
    2c02:	f04f 0a05 	mov.w	sl, #5
    2c06:	e9c5 0105 	strd	r0, r1, [r5, #20]
    2c0a:	e9c5 2307 	strd	r2, r3, [r5, #28]
    2c0e:	f848 af10 	str.w	sl, [r8, #16]!
    2c12:	4823      	ldr	r0, [pc, #140]	; (2ca0 <z_arm_fatal_error+0xbc>)
    2c14:	4642      	mov	r2, r8
    2c16:	2300      	movs	r3, #0
    2c18:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    2c1c:	f007 fef9 	bl	aa12 <z_impl_z_log_msg2_static_create>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    2c20:	e9d4 1203 	ldrd	r1, r2, [r4, #12]
    2c24:	6963      	ldr	r3, [r4, #20]
    2c26:	481f      	ldr	r0, [pc, #124]	; (2ca4 <z_arm_fatal_error+0xc0>)
    2c28:	f8c5 a010 	str.w	sl, [r5, #16]
    2c2c:	46b5      	mov	sp, r6
    2c2e:	e9c5 0105 	strd	r0, r1, [r5, #20]
    2c32:	46ad      	mov	sp, r5
    2c34:	e9c5 2307 	strd	r2, r3, [r5, #28]
    2c38:	4819      	ldr	r0, [pc, #100]	; (2ca0 <z_arm_fatal_error+0xbc>)
    2c3a:	4642      	mov	r2, r8
    2c3c:	2300      	movs	r3, #0
    2c3e:	f44f 5121 	mov.w	r1, #10304	; 0x2840
    2c42:	f007 fee6 	bl	aa12 <z_impl_z_log_msg2_static_create>
    2c46:	46b5      	mov	sp, r6
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    2c48:	b088      	sub	sp, #32
    2c4a:	466d      	mov	r5, sp
    2c4c:	69e3      	ldr	r3, [r4, #28]
    2c4e:	4a16      	ldr	r2, [pc, #88]	; (2ca8 <z_arm_fatal_error+0xc4>)
    2c50:	46a8      	mov	r8, r5
    2c52:	f04f 0a03 	mov.w	sl, #3
    2c56:	e9c5 2305 	strd	r2, r3, [r5, #20]
    2c5a:	f848 af10 	str.w	sl, [r8, #16]!
    2c5e:	4810      	ldr	r0, [pc, #64]	; (2ca0 <z_arm_fatal_error+0xbc>)
    2c60:	4642      	mov	r2, r8
    2c62:	2300      	movs	r3, #0
    2c64:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2c68:	f007 fed3 	bl	aa12 <z_impl_z_log_msg2_static_create>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    2c6c:	4a0f      	ldr	r2, [pc, #60]	; (2cac <z_arm_fatal_error+0xc8>)
    2c6e:	69a3      	ldr	r3, [r4, #24]
    2c70:	f8c5 a010 	str.w	sl, [r5, #16]
    2c74:	46b5      	mov	sp, r6
    2c76:	e9c5 2305 	strd	r2, r3, [r5, #20]
    2c7a:	46ad      	mov	sp, r5
    2c7c:	4808      	ldr	r0, [pc, #32]	; (2ca0 <z_arm_fatal_error+0xbc>)
    2c7e:	2300      	movs	r3, #0
    2c80:	4642      	mov	r2, r8
    2c82:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2c86:	f007 fec4 	bl	aa12 <z_impl_z_log_msg2_static_create>
    2c8a:	46b5      	mov	sp, r6
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    2c8c:	4621      	mov	r1, r4
    2c8e:	4648      	mov	r0, r9
    2c90:	f005 fdbc 	bl	880c <z_fatal_error>
}
    2c94:	46bd      	mov	sp, r7
    2c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    2c9a:	bf00      	nop
    2c9c:	0000c50b 	.word	0x0000c50b
    2ca0:	0000be00 	.word	0x0000be00
    2ca4:	0000c53a 	.word	0x0000c53a
    2ca8:	0000c569 	.word	0x0000c569
    2cac:	0000c578 	.word	0x0000c578

00002cb0 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2cb0:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2cb2:	2b00      	cmp	r3, #0
    2cb4:	db08      	blt.n	2cc8 <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2cb6:	2201      	movs	r2, #1
    2cb8:	f000 001f 	and.w	r0, r0, #31
    2cbc:	fa02 f000 	lsl.w	r0, r2, r0
    2cc0:	095b      	lsrs	r3, r3, #5
    2cc2:	4a02      	ldr	r2, [pc, #8]	; (2ccc <arch_irq_enable+0x1c>)
    2cc4:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    2cc8:	4770      	bx	lr
    2cca:	bf00      	nop
    2ccc:	e000e100 	.word	0xe000e100

00002cd0 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    2cd0:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2cd2:	2b00      	cmp	r3, #0
    2cd4:	db0d      	blt.n	2cf2 <arch_irq_disable+0x22>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    2cd6:	2201      	movs	r2, #1
    2cd8:	095b      	lsrs	r3, r3, #5
    2cda:	f000 001f 	and.w	r0, r0, #31
    2cde:	fa02 f000 	lsl.w	r0, r2, r0
    2ce2:	3320      	adds	r3, #32
    2ce4:	4a03      	ldr	r2, [pc, #12]	; (2cf4 <arch_irq_disable+0x24>)
    2ce6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2cea:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2cee:	f3bf 8f6f 	isb	sy
}
    2cf2:	4770      	bx	lr
    2cf4:	e000e100 	.word	0xe000e100

00002cf8 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2cf8:	4b05      	ldr	r3, [pc, #20]	; (2d10 <arch_irq_is_enabled+0x18>)
    2cfa:	0942      	lsrs	r2, r0, #5
    2cfc:	f000 001f 	and.w	r0, r0, #31
    2d00:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2d04:	2301      	movs	r3, #1
    2d06:	fa03 f000 	lsl.w	r0, r3, r0
}
    2d0a:	4010      	ands	r0, r2
    2d0c:	4770      	bx	lr
    2d0e:	bf00      	nop
    2d10:	e000e100 	.word	0xe000e100

00002d14 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    2d14:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    2d16:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d18:	bfa8      	it	ge
    2d1a:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
		prio += _IRQ_PRIO_OFFSET;
    2d1e:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d22:	bfb8      	it	lt
    2d24:	4b06      	ldrlt	r3, [pc, #24]	; (2d40 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d26:	ea4f 1141 	mov.w	r1, r1, lsl #5
    2d2a:	bfac      	ite	ge
    2d2c:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d30:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d34:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d36:	bfb4      	ite	lt
    2d38:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    2d3a:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    2d3e:	4770      	bx	lr
    2d40:	e000ed14 	.word	0xe000ed14

00002d44 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    2d44:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    2d46:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    2d48:	4b04      	ldr	r3, [pc, #16]	; (2d5c <_arch_isr_direct_pm+0x18>)
    2d4a:	699a      	ldr	r2, [r3, #24]
    2d4c:	b11a      	cbz	r2, 2d56 <_arch_isr_direct_pm+0x12>
		_kernel.idle = 0;
    2d4e:	2200      	movs	r2, #0
    2d50:	619a      	str	r2, [r3, #24]
		z_pm_save_idle_exit();
    2d52:	f008 fbd8 	bl	b506 <z_pm_save_idle_exit>
	|| defined(CONFIG_ARMV7_R) \
	|| defined(CONFIG_AARCH32_ARMV8_R) \
	|| defined(CONFIG_ARMV7_A)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    2d56:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    2d58:	bd08      	pop	{r3, pc}
    2d5a:	bf00      	nop
    2d5c:	20001a48 	.word	0x20001a48

00002d60 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    2d60:	bf30      	wfi
    b z_SysNmiOnReset
    2d62:	f7ff bffd 	b.w	2d60 <z_SysNmiOnReset>
    2d66:	bf00      	nop

00002d68 <z_arm_prep_c>:
 *
 * This routine prepares for the execution of and runs C code.
 *
 */
void z_arm_prep_c(void)
{
    2d68:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2d6a:	4b08      	ldr	r3, [pc, #32]	; (2d8c <z_arm_prep_c+0x24>)
    2d6c:	4a08      	ldr	r2, [pc, #32]	; (2d90 <z_arm_prep_c+0x28>)
    2d6e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    2d72:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    2d74:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2d78:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2d7c:	f005 fdde 	bl	893c <z_bss_zero>
	z_data_copy();
    2d80:	f006 fdb0 	bl	98e4 <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2d84:	f000 fb94 	bl	34b0 <z_arm_interrupt_init>
	z_cstart();
    2d88:	f005 fe1c 	bl	89c4 <z_cstart>
    2d8c:	00000000 	.word	0x00000000
    2d90:	e000ed00 	.word	0xe000ed00

00002d94 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2d94:	4a09      	ldr	r2, [pc, #36]	; (2dbc <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2d96:	490a      	ldr	r1, [pc, #40]	; (2dc0 <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2d98:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2d9a:	6809      	ldr	r1, [r1, #0]
    2d9c:	6799      	str	r1, [r3, #120]	; 0x78

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2d9e:	4909      	ldr	r1, [pc, #36]	; (2dc4 <arch_swap+0x30>)
	_current->arch.basepri = key;
    2da0:	6758      	str	r0, [r3, #116]	; 0x74
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2da2:	684b      	ldr	r3, [r1, #4]
    2da4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2da8:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    2daa:	2300      	movs	r3, #0
    2dac:	f383 8811 	msr	BASEPRI, r3
    2db0:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2db4:	6893      	ldr	r3, [r2, #8]
}
    2db6:	6f98      	ldr	r0, [r3, #120]	; 0x78
    2db8:	4770      	bx	lr
    2dba:	bf00      	nop
    2dbc:	20001a48 	.word	0x20001a48
    2dc0:	0000c160 	.word	0x0000c160
    2dc4:	e000ed00 	.word	0xe000ed00

00002dc8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    2dc8:	4912      	ldr	r1, [pc, #72]	; (2e14 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    2dca:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    2dcc:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    2dd0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    2dd2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    2dd6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2dda:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2ddc:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2de0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    2de4:	4f0c      	ldr	r7, [pc, #48]	; (2e18 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    2de6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2dea:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2dec:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2dee:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2df0:	6f50      	ldr	r0, [r2, #116]	; 0x74
    movs r3, #0
    2df2:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    2df4:	6753      	str	r3, [r2, #116]	; 0x74
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    2df6:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2dfa:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2dfc:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2dfe:	f000 fbf3 	bl	35e8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    2e02:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    2e06:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2e0a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2e0e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    2e12:	4770      	bx	lr
    ldr r1, =_kernel
    2e14:	20001a48 	.word	0x20001a48
    ldr v4, =_SCS_ICSR
    2e18:	e000ed04 	.word	0xe000ed04

00002e1c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2e1c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2e20:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    2e22:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    2e26:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2e2a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2e2c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2e30:	2902      	cmp	r1, #2
    beq _oops
    2e32:	d0ff      	beq.n	2e34 <_oops>

00002e34 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    2e34:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    2e36:	f007 fe79 	bl	ab2c <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2e3a:	bd01      	pop	{r0, pc}

00002e3c <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2e3c:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2e40:	9b00      	ldr	r3, [sp, #0]
    2e42:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    2e46:	490a      	ldr	r1, [pc, #40]	; (2e70 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2e48:	9b01      	ldr	r3, [sp, #4]
    2e4a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2e4e:	9b02      	ldr	r3, [sp, #8]
    2e50:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    2e54:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2e58:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2e5c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2e60:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    2e64:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    2e66:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    2e68:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    2e6a:	6743      	str	r3, [r0, #116]	; 0x74
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    2e6c:	4770      	bx	lr
    2e6e:	bf00      	nop
    2e70:	0000a0b9 	.word	0x0000a0b9

00002e74 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    2e74:	4a09      	ldr	r2, [pc, #36]	; (2e9c <z_check_thread_stack_fail+0x28>)
{
    2e76:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    2e78:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    2e7a:	b170      	cbz	r0, 2e9a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    2e7c:	f113 0f16 	cmn.w	r3, #22
    2e80:	6e40      	ldr	r0, [r0, #100]	; 0x64
    2e82:	d005      	beq.n	2e90 <z_check_thread_stack_fail+0x1c>
    2e84:	f1a0 0220 	sub.w	r2, r0, #32
    2e88:	429a      	cmp	r2, r3
    2e8a:	d805      	bhi.n	2e98 <z_check_thread_stack_fail+0x24>
    2e8c:	4283      	cmp	r3, r0
    2e8e:	d203      	bcs.n	2e98 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    2e90:	4281      	cmp	r1, r0
    2e92:	bf28      	it	cs
    2e94:	2000      	movcs	r0, #0
    2e96:	4770      	bx	lr
    2e98:	2000      	movs	r0, #0
}
    2e9a:	4770      	bx	lr
    2e9c:	20001a48 	.word	0x20001a48

00002ea0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    2ea0:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    2ea2:	4b09      	ldr	r3, [pc, #36]	; (2ec8 <arch_switch_to_main_thread+0x28>)
    2ea4:	6098      	str	r0, [r3, #8]
{
    2ea6:	460d      	mov	r5, r1
    2ea8:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    2eaa:	f000 fb9d 	bl	35e8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    2eae:	4620      	mov	r0, r4
    2eb0:	f385 8809 	msr	PSP, r5
    2eb4:	2100      	movs	r1, #0
    2eb6:	b663      	cpsie	if
    2eb8:	f381 8811 	msr	BASEPRI, r1
    2ebc:	f3bf 8f6f 	isb	sy
    2ec0:	2200      	movs	r2, #0
    2ec2:	2300      	movs	r3, #0
    2ec4:	f007 f8f8 	bl	a0b8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2ec8:	20001a48 	.word	0x20001a48

00002ecc <_isr_wrapper>:
 *
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    2ecc:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    2ece:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    2ed0:	4a0b      	ldr	r2, [pc, #44]	; (2f00 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    2ed2:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    2ed4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    2ed6:	bf1e      	ittt	ne
	movne	r1, #0
    2ed8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    2eda:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    2edc:	f008 fb13 	blne	b506 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    2ee0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    2ee2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    2ee6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    2eea:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    2eee:	4905      	ldr	r1, [pc, #20]	; (2f04 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    2ef0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    2ef2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    2ef4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    2ef6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    2efa:	4903      	ldr	r1, [pc, #12]	; (2f08 <_isr_wrapper+0x3c>)
	bx r1
    2efc:	4708      	bx	r1
    2efe:	0000      	.short	0x0000
	ldr r2, =_kernel
    2f00:	20001a48 	.word	0x20001a48
	ldr r1, =_sw_isr_table
    2f04:	0000bc70 	.word	0x0000bc70
	ldr r1, =z_arm_int_exit
    2f08:	00002f0d 	.word	0x00002f0d

00002f0c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2f0c:	4b04      	ldr	r3, [pc, #16]	; (2f20 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2f0e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2f10:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2f12:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2f14:	d003      	beq.n	2f1e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2f16:	4903      	ldr	r1, [pc, #12]	; (2f24 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2f18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2f1c:	600a      	str	r2, [r1, #0]

00002f1e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2f1e:	4770      	bx	lr
	ldr r3, =_kernel
    2f20:	20001a48 	.word	0x20001a48
	ldr r1, =_SCS_ICSR
    2f24:	e000ed04 	.word	0xe000ed04

00002f28 <bus_fault.constprop.0>:
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason.
 *
 */
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2f2c:	b086      	sub	sp, #24
    2f2e:	af00      	add	r7, sp, #0
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");
    2f30:	4b3c      	ldr	r3, [pc, #240]	; (3024 <bus_fault.constprop.0+0xfc>)
    2f32:	617b      	str	r3, [r7, #20]
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    2f34:	4606      	mov	r6, r0
    2f36:	460d      	mov	r5, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    2f38:	483b      	ldr	r0, [pc, #236]	; (3028 <bus_fault.constprop.0+0x100>)
    2f3a:	2402      	movs	r4, #2
    2f3c:	f107 0210 	add.w	r2, r7, #16
    2f40:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f44:	613c      	str	r4, [r7, #16]
    2f46:	f007 fe00 	bl	ab4a <z_log_msg2_static_create.constprop.0>

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2f4a:	4b38      	ldr	r3, [pc, #224]	; (302c <bus_fault.constprop.0+0x104>)
    2f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f4e:	04db      	lsls	r3, r3, #19
    2f50:	d509      	bpl.n	2f66 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Stacking error");
    2f52:	4b37      	ldr	r3, [pc, #220]	; (3030 <bus_fault.constprop.0+0x108>)
    2f54:	4834      	ldr	r0, [pc, #208]	; (3028 <bus_fault.constprop.0+0x100>)
    2f56:	f107 0210 	add.w	r2, r7, #16
    2f5a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f5e:	e9c7 4304 	strd	r4, r3, [r7, #16]
    2f62:	f007 fdf2 	bl	ab4a <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2f66:	4b31      	ldr	r3, [pc, #196]	; (302c <bus_fault.constprop.0+0x104>)
    2f68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2f6a:	051c      	lsls	r4, r3, #20
    2f6c:	d50a      	bpl.n	2f84 <bus_fault.constprop.0+0x5c>
		PR_FAULT_INFO("  Unstacking error");
    2f6e:	4b31      	ldr	r3, [pc, #196]	; (3034 <bus_fault.constprop.0+0x10c>)
    2f70:	617b      	str	r3, [r7, #20]
    2f72:	482d      	ldr	r0, [pc, #180]	; (3028 <bus_fault.constprop.0+0x100>)
    2f74:	2302      	movs	r3, #2
    2f76:	f107 0210 	add.w	r2, r7, #16
    2f7a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f7e:	613b      	str	r3, [r7, #16]
    2f80:	f007 fde3 	bl	ab4a <z_log_msg2_static_create.constprop.0>
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2f84:	4c29      	ldr	r4, [pc, #164]	; (302c <bus_fault.constprop.0+0x104>)
    2f86:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2f88:	0598      	lsls	r0, r3, #22
    2f8a:	d522      	bpl.n	2fd2 <bus_fault.constprop.0+0xaa>
		PR_FAULT_INFO("  Precise data bus error");
    2f8c:	4b2a      	ldr	r3, [pc, #168]	; (3038 <bus_fault.constprop.0+0x110>)
    2f8e:	617b      	str	r3, [r7, #20]
    2f90:	f107 0210 	add.w	r2, r7, #16
    2f94:	2302      	movs	r3, #2
    2f96:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2f9a:	4823      	ldr	r0, [pc, #140]	; (3028 <bus_fault.constprop.0+0x100>)
    2f9c:	613b      	str	r3, [r7, #16]
    2f9e:	f007 fdd4 	bl	ab4a <z_log_msg2_static_create.constprop.0>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2fa2:	6ba3      	ldr	r3, [r4, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2fa4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    2fa6:	0411      	lsls	r1, r2, #16
		PR_FAULT_INFO("  Precise data bus error");
    2fa8:	46e8      	mov	r8, sp
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2faa:	d512      	bpl.n	2fd2 <bus_fault.constprop.0+0xaa>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    2fac:	b088      	sub	sp, #32
    2fae:	4923      	ldr	r1, [pc, #140]	; (303c <bus_fault.constprop.0+0x114>)
    2fb0:	481d      	ldr	r0, [pc, #116]	; (3028 <bus_fault.constprop.0+0x100>)
    2fb2:	466a      	mov	r2, sp
    2fb4:	e9c2 1305 	strd	r1, r3, [r2, #20]
    2fb8:	2303      	movs	r3, #3
    2fba:	f842 3f10 	str.w	r3, [r2, #16]!
    2fbe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    2fc2:	f007 fdc2 	bl	ab4a <z_log_msg2_static_create.constprop.0>
    2fc6:	46c5      	mov	sp, r8
			if (from_hard_fault != 0) {
    2fc8:	b11e      	cbz	r6, 2fd2 <bus_fault.constprop.0+0xaa>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2fca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    2fcc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    2fd0:	62a3      	str	r3, [r4, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2fd2:	4b16      	ldr	r3, [pc, #88]	; (302c <bus_fault.constprop.0+0x104>)
    2fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2fd6:	055a      	lsls	r2, r3, #21
    2fd8:	d50a      	bpl.n	2ff0 <bus_fault.constprop.0+0xc8>
		PR_FAULT_INFO("  Imprecise data bus error");
    2fda:	4b19      	ldr	r3, [pc, #100]	; (3040 <bus_fault.constprop.0+0x118>)
    2fdc:	617b      	str	r3, [r7, #20]
    2fde:	4812      	ldr	r0, [pc, #72]	; (3028 <bus_fault.constprop.0+0x100>)
    2fe0:	2302      	movs	r3, #2
    2fe2:	f107 0210 	add.w	r2, r7, #16
    2fe6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    2fea:	613b      	str	r3, [r7, #16]
    2fec:	f007 fdad 	bl	ab4a <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2ff0:	4b0e      	ldr	r3, [pc, #56]	; (302c <bus_fault.constprop.0+0x104>)
    2ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    2ff4:	05db      	lsls	r3, r3, #23
    2ff6:	d50a      	bpl.n	300e <bus_fault.constprop.0+0xe6>
		PR_FAULT_INFO("  Instruction bus error");
    2ff8:	4b12      	ldr	r3, [pc, #72]	; (3044 <bus_fault.constprop.0+0x11c>)
    2ffa:	617b      	str	r3, [r7, #20]
    2ffc:	480a      	ldr	r0, [pc, #40]	; (3028 <bus_fault.constprop.0+0x100>)
    2ffe:	2302      	movs	r3, #2
    3000:	f107 0210 	add.w	r2, r7, #16
    3004:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3008:	613b      	str	r3, [r7, #16]
    300a:	f007 fd9e 	bl	ab4a <z_log_msg2_static_create.constprop.0>
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    300e:	4a07      	ldr	r2, [pc, #28]	; (302c <bus_fault.constprop.0+0x104>)
    3010:	6a93      	ldr	r3, [r2, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    3012:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    3014:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00

	return reason;
}
    3018:	3718      	adds	r7, #24
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    301a:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    301c:	7028      	strb	r0, [r5, #0]
}
    301e:	46bd      	mov	sp, r7
    3020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3024:	0000c5a6 	.word	0x0000c5a6
    3028:	0000be00 	.word	0x0000be00
    302c:	e000ed00 	.word	0xe000ed00
    3030:	0000c5bc 	.word	0x0000c5bc
    3034:	0000c5cd 	.word	0x0000c5cd
    3038:	0000c5e0 	.word	0x0000c5e0
    303c:	0000c5f9 	.word	0x0000c5f9
    3040:	0000c60e 	.word	0x0000c60e
    3044:	0000c629 	.word	0x0000c629

00003048 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    3048:	b510      	push	{r4, lr}
    304a:	b086      	sub	sp, #24
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");
    304c:	4b33      	ldr	r3, [pc, #204]	; (311c <usage_fault.constprop.0+0xd4>)
    304e:	4834      	ldr	r0, [pc, #208]	; (3120 <usage_fault.constprop.0+0xd8>)
    3050:	9305      	str	r3, [sp, #20]
    3052:	2402      	movs	r4, #2
    3054:	aa04      	add	r2, sp, #16
    3056:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    305a:	9404      	str	r4, [sp, #16]
    305c:	f007 fd75 	bl	ab4a <z_log_msg2_static_create.constprop.0>

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    3060:	4b30      	ldr	r3, [pc, #192]	; (3124 <usage_fault.constprop.0+0xdc>)
    3062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3064:	019b      	lsls	r3, r3, #6
    3066:	d508      	bpl.n	307a <usage_fault.constprop.0+0x32>
		PR_FAULT_INFO("  Division by zero");
    3068:	4b2f      	ldr	r3, [pc, #188]	; (3128 <usage_fault.constprop.0+0xe0>)
    306a:	482d      	ldr	r0, [pc, #180]	; (3120 <usage_fault.constprop.0+0xd8>)
    306c:	aa04      	add	r2, sp, #16
    306e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3072:	e9cd 4304 	strd	r4, r3, [sp, #16]
    3076:	f007 fd68 	bl	ab4a <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    307a:	4b2a      	ldr	r3, [pc, #168]	; (3124 <usage_fault.constprop.0+0xdc>)
    307c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    307e:	01dc      	lsls	r4, r3, #7
    3080:	d509      	bpl.n	3096 <usage_fault.constprop.0+0x4e>
		PR_FAULT_INFO("  Unaligned memory access");
    3082:	4b2a      	ldr	r3, [pc, #168]	; (312c <usage_fault.constprop.0+0xe4>)
    3084:	9305      	str	r3, [sp, #20]
    3086:	4826      	ldr	r0, [pc, #152]	; (3120 <usage_fault.constprop.0+0xd8>)
    3088:	2302      	movs	r3, #2
    308a:	aa04      	add	r2, sp, #16
    308c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3090:	9304      	str	r3, [sp, #16]
    3092:	f007 fd5a 	bl	ab4a <z_log_msg2_static_create.constprop.0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    3096:	4b23      	ldr	r3, [pc, #140]	; (3124 <usage_fault.constprop.0+0xdc>)
    3098:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    309a:	0318      	lsls	r0, r3, #12
    309c:	d509      	bpl.n	30b2 <usage_fault.constprop.0+0x6a>
		PR_FAULT_INFO("  No coprocessor instructions");
    309e:	4b24      	ldr	r3, [pc, #144]	; (3130 <usage_fault.constprop.0+0xe8>)
    30a0:	9305      	str	r3, [sp, #20]
    30a2:	481f      	ldr	r0, [pc, #124]	; (3120 <usage_fault.constprop.0+0xd8>)
    30a4:	2302      	movs	r3, #2
    30a6:	aa04      	add	r2, sp, #16
    30a8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    30ac:	9304      	str	r3, [sp, #16]
    30ae:	f007 fd4c 	bl	ab4a <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    30b2:	4b1c      	ldr	r3, [pc, #112]	; (3124 <usage_fault.constprop.0+0xdc>)
    30b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30b6:	0359      	lsls	r1, r3, #13
    30b8:	d509      	bpl.n	30ce <usage_fault.constprop.0+0x86>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    30ba:	4b1e      	ldr	r3, [pc, #120]	; (3134 <usage_fault.constprop.0+0xec>)
    30bc:	9305      	str	r3, [sp, #20]
    30be:	4818      	ldr	r0, [pc, #96]	; (3120 <usage_fault.constprop.0+0xd8>)
    30c0:	2302      	movs	r3, #2
    30c2:	aa04      	add	r2, sp, #16
    30c4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    30c8:	9304      	str	r3, [sp, #16]
    30ca:	f007 fd3e 	bl	ab4a <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    30ce:	4b15      	ldr	r3, [pc, #84]	; (3124 <usage_fault.constprop.0+0xdc>)
    30d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30d2:	039a      	lsls	r2, r3, #14
    30d4:	d509      	bpl.n	30ea <usage_fault.constprop.0+0xa2>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    30d6:	4b18      	ldr	r3, [pc, #96]	; (3138 <usage_fault.constprop.0+0xf0>)
    30d8:	9305      	str	r3, [sp, #20]
    30da:	4811      	ldr	r0, [pc, #68]	; (3120 <usage_fault.constprop.0+0xd8>)
    30dc:	2302      	movs	r3, #2
    30de:	aa04      	add	r2, sp, #16
    30e0:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    30e4:	9304      	str	r3, [sp, #16]
    30e6:	f007 fd30 	bl	ab4a <z_log_msg2_static_create.constprop.0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    30ea:	4b0e      	ldr	r3, [pc, #56]	; (3124 <usage_fault.constprop.0+0xdc>)
    30ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    30ee:	03db      	lsls	r3, r3, #15
    30f0:	d509      	bpl.n	3106 <usage_fault.constprop.0+0xbe>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    30f2:	4b12      	ldr	r3, [pc, #72]	; (313c <usage_fault.constprop.0+0xf4>)
    30f4:	9305      	str	r3, [sp, #20]
    30f6:	480a      	ldr	r0, [pc, #40]	; (3120 <usage_fault.constprop.0+0xd8>)
    30f8:	2302      	movs	r3, #2
    30fa:	aa04      	add	r2, sp, #16
    30fc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3100:	9304      	str	r3, [sp, #16]
    3102:	f007 fd22 	bl	ab4a <z_log_msg2_static_create.constprop.0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3106:	4a07      	ldr	r2, [pc, #28]	; (3124 <usage_fault.constprop.0+0xdc>)
    3108:	6a93      	ldr	r3, [r2, #40]	; 0x28
    310a:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    310e:	ea6f 4313 	mvn.w	r3, r3, lsr #16

	return reason;
}
    3112:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    3114:	6293      	str	r3, [r2, #40]	; 0x28
}
    3116:	b006      	add	sp, #24
    3118:	bd10      	pop	{r4, pc}
    311a:	bf00      	nop
    311c:	0000c641 	.word	0x0000c641
    3120:	0000be00 	.word	0x0000be00
    3124:	e000ed00 	.word	0xe000ed00
    3128:	0000c659 	.word	0x0000c659
    312c:	0000c66c 	.word	0x0000c66c
    3130:	0000c686 	.word	0x0000c686
    3134:	0000c6a4 	.word	0x0000c6a4
    3138:	0000c6c9 	.word	0x0000c6c9
    313c:	0000c6e3 	.word	0x0000c6e3

00003140 <mem_manage_fault>:
{
    3140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    3144:	b086      	sub	sp, #24
    3146:	af00      	add	r7, sp, #0
	PR_FAULT_INFO("***** MPU FAULT *****");
    3148:	4b43      	ldr	r3, [pc, #268]	; (3258 <mem_manage_fault+0x118>)
    314a:	617b      	str	r3, [r7, #20]
{
    314c:	4606      	mov	r6, r0
    314e:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    3150:	4842      	ldr	r0, [pc, #264]	; (325c <mem_manage_fault+0x11c>)
{
    3152:	4615      	mov	r5, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    3154:	2402      	movs	r4, #2
    3156:	f107 0210 	add.w	r2, r7, #16
    315a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    315e:	613c      	str	r4, [r7, #16]
    3160:	f007 fcf3 	bl	ab4a <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    3164:	4b3e      	ldr	r3, [pc, #248]	; (3260 <mem_manage_fault+0x120>)
    3166:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3168:	06d8      	lsls	r0, r3, #27
    316a:	d509      	bpl.n	3180 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Stacking error (context area might be"
    316c:	4b3d      	ldr	r3, [pc, #244]	; (3264 <mem_manage_fault+0x124>)
    316e:	483b      	ldr	r0, [pc, #236]	; (325c <mem_manage_fault+0x11c>)
    3170:	f107 0210 	add.w	r2, r7, #16
    3174:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3178:	e9c7 4304 	strd	r4, r3, [r7, #16]
    317c:	f007 fce5 	bl	ab4a <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    3180:	4b37      	ldr	r3, [pc, #220]	; (3260 <mem_manage_fault+0x120>)
    3182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    3184:	0719      	lsls	r1, r3, #28
    3186:	d50a      	bpl.n	319e <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Unstacking error");
    3188:	4b37      	ldr	r3, [pc, #220]	; (3268 <mem_manage_fault+0x128>)
    318a:	617b      	str	r3, [r7, #20]
    318c:	4833      	ldr	r0, [pc, #204]	; (325c <mem_manage_fault+0x11c>)
    318e:	2302      	movs	r3, #2
    3190:	f107 0210 	add.w	r2, r7, #16
    3194:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3198:	613b      	str	r3, [r7, #16]
    319a:	f007 fcd6 	bl	ab4a <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    319e:	4c30      	ldr	r4, [pc, #192]	; (3260 <mem_manage_fault+0x120>)
    31a0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    31a2:	079a      	lsls	r2, r3, #30
    31a4:	d423      	bmi.n	31ee <mem_manage_fault+0xae>
	uint32_t mmfar = -EINVAL;
    31a6:	f06f 0a15 	mvn.w	sl, #21
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    31aa:	4b2d      	ldr	r3, [pc, #180]	; (3260 <mem_manage_fault+0x120>)
    31ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    31ae:	07d8      	lsls	r0, r3, #31
    31b0:	d50a      	bpl.n	31c8 <mem_manage_fault+0x88>
		PR_FAULT_INFO("  Instruction Access Violation");
    31b2:	4b2e      	ldr	r3, [pc, #184]	; (326c <mem_manage_fault+0x12c>)
    31b4:	617b      	str	r3, [r7, #20]
    31b6:	4829      	ldr	r0, [pc, #164]	; (325c <mem_manage_fault+0x11c>)
    31b8:	2302      	movs	r3, #2
    31ba:	f107 0210 	add.w	r2, r7, #16
    31be:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    31c2:	613b      	str	r3, [r7, #16]
    31c4:	f007 fcc1 	bl	ab4a <z_log_msg2_static_create.constprop.0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    31c8:	4b25      	ldr	r3, [pc, #148]	; (3260 <mem_manage_fault+0x120>)
    31ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    31cc:	06d1      	lsls	r1, r2, #27
    31ce:	d435      	bmi.n	323c <mem_manage_fault+0xfc>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    31d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    31d2:	0792      	lsls	r2, r2, #30
    31d4:	d432      	bmi.n	323c <mem_manage_fault+0xfc>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    31d6:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    31d8:	4a21      	ldr	r2, [pc, #132]	; (3260 <mem_manage_fault+0x120>)
    31da:	6a93      	ldr	r3, [r2, #40]	; 0x28
    31dc:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    31e0:	6293      	str	r3, [r2, #40]	; 0x28
}
    31e2:	3718      	adds	r7, #24
	*recoverable = memory_fault_recoverable(esf, true);
    31e4:	2300      	movs	r3, #0
    31e6:	702b      	strb	r3, [r5, #0]
}
    31e8:	46bd      	mov	sp, r7
    31ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    31ee:	4b20      	ldr	r3, [pc, #128]	; (3270 <mem_manage_fault+0x130>)
    31f0:	617b      	str	r3, [r7, #20]
    31f2:	481a      	ldr	r0, [pc, #104]	; (325c <mem_manage_fault+0x11c>)
    31f4:	2302      	movs	r3, #2
    31f6:	f107 0210 	add.w	r2, r7, #16
    31fa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    31fe:	613b      	str	r3, [r7, #16]
    3200:	f007 fca3 	bl	ab4a <z_log_msg2_static_create.constprop.0>
		uint32_t temp = SCB->MMFAR;
    3204:	f8d4 a034 	ldr.w	sl, [r4, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    3208:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    320a:	061b      	lsls	r3, r3, #24
		PR_FAULT_INFO("  Data Access Violation");
    320c:	46e9      	mov	r9, sp
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    320e:	d5ca      	bpl.n	31a6 <mem_manage_fault+0x66>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    3210:	b088      	sub	sp, #32
    3212:	4b18      	ldr	r3, [pc, #96]	; (3274 <mem_manage_fault+0x134>)
    3214:	4811      	ldr	r0, [pc, #68]	; (325c <mem_manage_fault+0x11c>)
    3216:	466a      	mov	r2, sp
    3218:	e9c2 3a05 	strd	r3, sl, [r2, #20]
    321c:	2303      	movs	r3, #3
    321e:	f842 3f10 	str.w	r3, [r2, #16]!
    3222:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3226:	f007 fc90 	bl	ab4a <z_log_msg2_static_create.constprop.0>
    322a:	46cd      	mov	sp, r9
			if (from_hard_fault != 0) {
    322c:	f1b8 0f00 	cmp.w	r8, #0
    3230:	d0bb      	beq.n	31aa <mem_manage_fault+0x6a>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    3232:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    3234:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    3238:	62a3      	str	r3, [r4, #40]	; 0x28
    323a:	e7b6      	b.n	31aa <mem_manage_fault+0x6a>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    323c:	685b      	ldr	r3, [r3, #4]
    323e:	051b      	lsls	r3, r3, #20
    3240:	d5c9      	bpl.n	31d6 <mem_manage_fault+0x96>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    3242:	4631      	mov	r1, r6
    3244:	4650      	mov	r0, sl
    3246:	f7ff fe15 	bl	2e74 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    324a:	2800      	cmp	r0, #0
    324c:	d0c3      	beq.n	31d6 <mem_manage_fault+0x96>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    324e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    3252:	2002      	movs	r0, #2
    3254:	e7c0      	b.n	31d8 <mem_manage_fault+0x98>
    3256:	bf00      	nop
    3258:	0000c70e 	.word	0x0000c70e
    325c:	0000be00 	.word	0x0000be00
    3260:	e000ed00 	.word	0xe000ed00
    3264:	0000c724 	.word	0x0000c724
    3268:	0000c5cd 	.word	0x0000c5cd
    326c:	0000c785 	.word	0x0000c785
    3270:	0000c757 	.word	0x0000c757
    3274:	0000c76f 	.word	0x0000c76f

00003278 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    3278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    327c:	4b76      	ldr	r3, [pc, #472]	; (3458 <z_arm_fault+0x1e0>)
{
    327e:	b08b      	sub	sp, #44	; 0x2c
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3280:	f8d3 8004 	ldr.w	r8, [r3, #4]
{
    3284:	af00      	add	r7, sp, #0
    3286:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    3288:	f3c8 0408 	ubfx	r4, r8, #0, #9
    328c:	2600      	movs	r6, #0
    328e:	f386 8811 	msr	BASEPRI, r6
    3292:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    3296:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    329a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    329e:	d10e      	bne.n	32be <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    32a0:	f002 030c 	and.w	r3, r2, #12
    32a4:	2b08      	cmp	r3, #8
    32a6:	d10c      	bne.n	32c2 <z_arm_fault+0x4a>
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    32a8:	4b6c      	ldr	r3, [pc, #432]	; (345c <z_arm_fault+0x1e4>)
    32aa:	61fb      	str	r3, [r7, #28]
    32ac:	486c      	ldr	r0, [pc, #432]	; (3460 <z_arm_fault+0x1e8>)
    32ae:	2302      	movs	r3, #2
    32b0:	f107 0218 	add.w	r2, r7, #24
    32b4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    32b8:	61bb      	str	r3, [r7, #24]
    32ba:	f007 fc46 	bl	ab4a <z_log_msg2_static_create.constprop.0>
		return NULL;
    32be:	4635      	mov	r5, r6
    32c0:	e003      	b.n	32ca <z_arm_fault+0x52>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    32c2:	0712      	lsls	r2, r2, #28
    32c4:	d401      	bmi.n	32ca <z_arm_fault+0x52>
			ptr_esf = (z_arch_esf_t *)msp;
    32c6:	4605      	mov	r5, r0
			*nested_exc = true;
    32c8:	2601      	movs	r6, #1
	*recoverable = false;
    32ca:	2300      	movs	r3, #0
    32cc:	71fb      	strb	r3, [r7, #7]
	switch (fault) {
    32ce:	1ee3      	subs	r3, r4, #3
    32d0:	2b09      	cmp	r3, #9
    32d2:	f200 80a1 	bhi.w	3418 <z_arm_fault+0x1a0>
    32d6:	e8df f003 	tbb	[pc, r3]
    32da:	9405      	.short	0x9405
    32dc:	9f9f9197 	.word	0x9f9f9197
    32e0:	9a9f9f9f 	.word	0x9a9f9f9f
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    32e4:	f8df 8170 	ldr.w	r8, [pc, #368]	; 3458 <z_arm_fault+0x1e0>
	PR_FAULT_INFO("***** HARD FAULT *****");
    32e8:	4b5e      	ldr	r3, [pc, #376]	; (3464 <z_arm_fault+0x1ec>)
    32ea:	485d      	ldr	r0, [pc, #372]	; (3460 <z_arm_fault+0x1e8>)
    32ec:	61fb      	str	r3, [r7, #28]
    32ee:	f04f 0a02 	mov.w	sl, #2
    32f2:	f107 0218 	add.w	r2, r7, #24
    32f6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    32fa:	f8c7 a018 	str.w	sl, [r7, #24]
    32fe:	f007 fc24 	bl	ab4a <z_log_msg2_static_create.constprop.0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3302:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    3306:	f04f 0b00 	mov.w	fp, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    330a:	ea14 040a 	ands.w	r4, r4, sl
	PR_FAULT_INFO("***** HARD FAULT *****");
    330e:	46e9      	mov	r9, sp
	*recoverable = false;
    3310:	f887 b007 	strb.w	fp, [r7, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    3314:	d00b      	beq.n	332e <z_arm_fault+0xb6>
		PR_EXC("  Bus fault on vector table read");
    3316:	4b54      	ldr	r3, [pc, #336]	; (3468 <z_arm_fault+0x1f0>)
    3318:	e9c7 a306 	strd	sl, r3, [r7, #24]
	PR_FAULT_INFO(
    331c:	4850      	ldr	r0, [pc, #320]	; (3460 <z_arm_fault+0x1e8>)
    331e:	f107 0218 	add.w	r2, r7, #24
    3322:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3326:	f007 fc10 	bl	ab4a <z_log_msg2_static_create.constprop.0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    332a:	2400      	movs	r4, #0
}
    332c:	e00d      	b.n	334a <z_arm_fault+0xd2>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    332e:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    3332:	2b00      	cmp	r3, #0
    3334:	da25      	bge.n	3382 <z_arm_fault+0x10a>
		PR_EXC("  Debug event");
    3336:	4b4d      	ldr	r3, [pc, #308]	; (346c <z_arm_fault+0x1f4>)
    3338:	4849      	ldr	r0, [pc, #292]	; (3460 <z_arm_fault+0x1e8>)
    333a:	f107 0218 	add.w	r2, r7, #24
    333e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3342:	e9c7 a306 	strd	sl, r3, [r7, #24]
    3346:	f007 fc00 	bl	ab4a <z_log_msg2_static_create.constprop.0>
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    334a:	79fb      	ldrb	r3, [r7, #7]
    334c:	b9ab      	cbnz	r3, 337a <z_arm_fault+0x102>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    334e:	2220      	movs	r2, #32
    3350:	4629      	mov	r1, r5
    3352:	f107 0008 	add.w	r0, r7, #8
    3356:	f007 fc21 	bl	ab9c <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    335a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    335c:	2e00      	cmp	r6, #0
    335e:	d076      	beq.n	344e <z_arm_fault+0x1d6>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    3360:	f3c3 0208 	ubfx	r2, r3, #0, #9
    3364:	b922      	cbnz	r2, 3370 <z_arm_fault+0xf8>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    3366:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    336a:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    336e:	627b      	str	r3, [r7, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    3370:	f107 0108 	add.w	r1, r7, #8
    3374:	4620      	mov	r0, r4
    3376:	f7ff fc35 	bl	2be4 <z_arm_fatal_error>
}
    337a:	372c      	adds	r7, #44	; 0x2c
    337c:	46bd      	mov	sp, r7
    337e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    3382:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    3386:	005b      	lsls	r3, r3, #1
    3388:	d5df      	bpl.n	334a <z_arm_fault+0xd2>
		PR_EXC("  Fault escalation (see below)");
    338a:	4b39      	ldr	r3, [pc, #228]	; (3470 <z_arm_fault+0x1f8>)
    338c:	4834      	ldr	r0, [pc, #208]	; (3460 <z_arm_fault+0x1e8>)
    338e:	f107 0218 	add.w	r2, r7, #24
    3392:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3396:	e9c7 a306 	strd	sl, r3, [r7, #24]
    339a:	f007 fbd6 	bl	ab4a <z_log_msg2_static_create.constprop.0>
	uint16_t fault_insn = *(ret_addr - 1);
    339e:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    33a0:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    33a4:	f64d 7302 	movw	r3, #57090	; 0xdf02
    33a8:	429a      	cmp	r2, r3
    33aa:	d009      	beq.n	33c0 <z_arm_fault+0x148>
		} else if (SCB_MMFSR != 0) {
    33ac:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    33b0:	b1bb      	cbz	r3, 33e2 <z_arm_fault+0x16a>
			reason = mem_manage_fault(esf, 1, recoverable);
    33b2:	1dfa      	adds	r2, r7, #7
    33b4:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    33b6:	4628      	mov	r0, r5
    33b8:	f7ff fec2 	bl	3140 <mem_manage_fault>
    33bc:	4604      	mov	r4, r0
		break;
    33be:	e7c4      	b.n	334a <z_arm_fault+0xd2>
			PR_EXC("ARCH_EXCEPT with reason %x\n", esf->basic.r0);
    33c0:	b088      	sub	sp, #32
    33c2:	682b      	ldr	r3, [r5, #0]
    33c4:	492b      	ldr	r1, [pc, #172]	; (3474 <z_arm_fault+0x1fc>)
    33c6:	4826      	ldr	r0, [pc, #152]	; (3460 <z_arm_fault+0x1e8>)
    33c8:	466a      	mov	r2, sp
    33ca:	e9c2 1305 	strd	r1, r3, [r2, #20]
    33ce:	2303      	movs	r3, #3
    33d0:	f842 3f10 	str.w	r3, [r2, #16]!
    33d4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    33d8:	f007 fbb7 	bl	ab4a <z_log_msg2_static_create.constprop.0>
    33dc:	46cd      	mov	sp, r9
			reason = esf->basic.r0;
    33de:	682c      	ldr	r4, [r5, #0]
    33e0:	e7b3      	b.n	334a <z_arm_fault+0xd2>
		} else if (SCB_BFSR != 0) {
    33e2:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    33e6:	b123      	cbz	r3, 33f2 <z_arm_fault+0x17a>
			reason = bus_fault(esf, 1, recoverable);
    33e8:	1df9      	adds	r1, r7, #7
    33ea:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    33ec:	f7ff fd9c 	bl	2f28 <bus_fault.constprop.0>
    33f0:	e7e4      	b.n	33bc <z_arm_fault+0x144>
		} else if (SCB_UFSR != 0) {
    33f2:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    33f6:	b29b      	uxth	r3, r3
    33f8:	2b00      	cmp	r3, #0
    33fa:	d0a6      	beq.n	334a <z_arm_fault+0xd2>
		reason = usage_fault(esf);
    33fc:	f7ff fe24 	bl	3048 <usage_fault.constprop.0>
    3400:	e7dc      	b.n	33bc <z_arm_fault+0x144>
		reason = mem_manage_fault(esf, 0, recoverable);
    3402:	1dfa      	adds	r2, r7, #7
    3404:	2100      	movs	r1, #0
    3406:	e7d6      	b.n	33b6 <z_arm_fault+0x13e>
		reason = bus_fault(esf, 0, recoverable);
    3408:	1df9      	adds	r1, r7, #7
    340a:	2000      	movs	r0, #0
    340c:	e7ee      	b.n	33ec <z_arm_fault+0x174>
	PR_FAULT_INFO(
    340e:	4b1a      	ldr	r3, [pc, #104]	; (3478 <z_arm_fault+0x200>)
    3410:	61fb      	str	r3, [r7, #28]
    3412:	2302      	movs	r3, #2
    3414:	61bb      	str	r3, [r7, #24]
    3416:	e781      	b.n	331c <z_arm_fault+0xa4>
	PR_FAULT_INFO("***** %s %d) *****",
    3418:	4a18      	ldr	r2, [pc, #96]	; (347c <z_arm_fault+0x204>)
    341a:	4b19      	ldr	r3, [pc, #100]	; (3480 <z_arm_fault+0x208>)
    341c:	4919      	ldr	r1, [pc, #100]	; (3484 <z_arm_fault+0x20c>)
    341e:	4810      	ldr	r0, [pc, #64]	; (3460 <z_arm_fault+0x1e8>)
    3420:	f418 7ff8 	tst.w	r8, #496	; 0x1f0
    3424:	46e8      	mov	r8, sp
    3426:	b08a      	sub	sp, #40	; 0x28
    3428:	bf18      	it	ne
    342a:	4613      	movne	r3, r2
    342c:	466a      	mov	r2, sp
    342e:	e9c2 1305 	strd	r1, r3, [r2, #20]
    3432:	2302      	movs	r3, #2
    3434:	f882 3020 	strb.w	r3, [r2, #32]
    3438:	3c10      	subs	r4, #16
    343a:	4b13      	ldr	r3, [pc, #76]	; (3488 <z_arm_fault+0x210>)
    343c:	61d4      	str	r4, [r2, #28]
    343e:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    3442:	f842 3f10 	str.w	r3, [r2, #16]!
    3446:	f007 fb80 	bl	ab4a <z_log_msg2_static_create.constprop.0>
    344a:	46c5      	mov	sp, r8
    344c:	e76d      	b.n	332a <z_arm_fault+0xb2>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    344e:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    3452:	f023 0301 	bic.w	r3, r3, #1
    3456:	e78a      	b.n	336e <z_arm_fault+0xf6>
    3458:	e000ed00 	.word	0xe000ed00
    345c:	0000c7d2 	.word	0x0000c7d2
    3460:	0000be00 	.word	0x0000be00
    3464:	0000c7fd 	.word	0x0000c7fd
    3468:	0000c814 	.word	0x0000c814
    346c:	0000c835 	.word	0x0000c835
    3470:	0000c843 	.word	0x0000c843
    3474:	0000c862 	.word	0x0000c862
    3478:	0000c87e 	.word	0x0000c87e
    347c:	0000c7b9 	.word	0x0000c7b9
    3480:	0000c7a4 	.word	0x0000c7a4
    3484:	0000c8a2 	.word	0x0000c8a2
    3488:	01000004 	.word	0x01000004

0000348c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    348c:	4a02      	ldr	r2, [pc, #8]	; (3498 <z_arm_fault_init+0xc>)
    348e:	6953      	ldr	r3, [r2, #20]
    3490:	f043 0310 	orr.w	r3, r3, #16
    3494:	6153      	str	r3, [r2, #20]
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
#ifdef CONFIG_TRAP_UNALIGNED_ACCESS
	SCB->CCR |= SCB_CCR_UNALIGN_TRP_Msk;
#endif /* CONFIG_TRAP_UNALIGNED_ACCESS */
}
    3496:	4770      	bx	lr
    3498:	e000ed00 	.word	0xe000ed00

0000349c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    349c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    34a0:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    34a4:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    34a6:	4672      	mov	r2, lr
	bl z_arm_fault
    34a8:	f7ff fee6 	bl	3278 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    34ac:	bd01      	pop	{r0, pc}
    34ae:	bf00      	nop

000034b0 <z_arm_interrupt_init>:
    34b0:	4804      	ldr	r0, [pc, #16]	; (34c4 <z_arm_interrupt_init+0x14>)
 *
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    34b2:	2300      	movs	r3, #0
    34b4:	2120      	movs	r1, #32
    34b6:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    34b8:	3301      	adds	r3, #1
    34ba:	2b28      	cmp	r3, #40	; 0x28
    34bc:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    34c0:	d1f9      	bne.n	34b6 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    34c2:	4770      	bx	lr
    34c4:	e000e100 	.word	0xe000e100

000034c8 <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    34c8:	2000      	movs	r0, #0
    msr CONTROL, r0
    34ca:	f380 8814 	msr	CONTROL, r0
    isb
    34ce:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    34d2:	f008 fb2b 	bl	bb2c <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    34d6:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    34d8:	490d      	ldr	r1, [pc, #52]	; (3510 <__start+0x48>)
    str r0, [r1]
    34da:	6008      	str	r0, [r1, #0]
    dsb
    34dc:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    34e0:	480c      	ldr	r0, [pc, #48]	; (3514 <__start+0x4c>)
    msr msp, r0
    34e2:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    34e6:	f000 f82b 	bl	3540 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    34ea:	2020      	movs	r0, #32
    msr BASEPRI, r0
    34ec:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    34f0:	4809      	ldr	r0, [pc, #36]	; (3518 <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    34f2:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    34f6:	1840      	adds	r0, r0, r1
    msr PSP, r0
    34f8:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    34fc:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    3500:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    3502:	4308      	orrs	r0, r1
    msr CONTROL, r0
    3504:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    3508:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    350c:	f7ff fc2c 	bl	2d68 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    3510:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    3514:	20002c40 	.word	0x20002c40
    ldr r0, =z_interrupt_stacks
    3518:	20002d80 	.word	0x20002d80

0000351c <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    351c:	4907      	ldr	r1, [pc, #28]	; (353c <z_arm_clear_arm_mpu_config+0x20>)
    351e:	f8d1 2090 	ldr.w	r2, [r1, #144]	; 0x90

	for (i = 0; i < num_regions; i++) {
    3522:	2300      	movs	r3, #0
	int num_regions =
    3524:	f3c2 2207 	ubfx	r2, r2, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    3528:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    352a:	4293      	cmp	r3, r2
    352c:	d100      	bne.n	3530 <z_arm_clear_arm_mpu_config+0x14>
		ARM_MPU_ClrRegion(i);
	}
}
    352e:	4770      	bx	lr
  MPU->RNR = rnr;
    3530:	f8c1 3098 	str.w	r3, [r1, #152]	; 0x98
  MPU->RASR = 0U;
    3534:	f8c1 00a0 	str.w	r0, [r1, #160]	; 0xa0
	for (i = 0; i < num_regions; i++) {
    3538:	3301      	adds	r3, #1
    353a:	e7f6      	b.n	352a <z_arm_clear_arm_mpu_config+0xe>
    353c:	e000ed00 	.word	0xe000ed00

00003540 <z_arm_init_arch_hw_at_boot>:
 * This routine resets Cortex-M system control block
 * components and core registers.
 *
 */
void z_arm_init_arch_hw_at_boot(void)
{
    3540:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    3542:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    3544:	2300      	movs	r3, #0
    3546:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    354a:	f7ff ffe7 	bl	351c <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    354e:	4b14      	ldr	r3, [pc, #80]	; (35a0 <z_arm_init_arch_hw_at_boot+0x60>)
    3550:	f04f 32ff 	mov.w	r2, #4294967295
    3554:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    3558:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    355c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    3560:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    3564:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    3568:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    356c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    3570:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    3574:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    3578:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    357c:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    3580:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    3584:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    3588:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    358c:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    3590:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    3594:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    3596:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    359a:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    359e:	bd08      	pop	{r3, pc}
    35a0:	e000e100 	.word	0xe000e100

000035a4 <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    35a4:	4b08      	ldr	r3, [pc, #32]	; (35c8 <z_impl_k_thread_abort+0x24>)
    35a6:	689b      	ldr	r3, [r3, #8]
    35a8:	4283      	cmp	r3, r0
    35aa:	d10b      	bne.n	35c4 <z_impl_k_thread_abort+0x20>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    35ac:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    35b0:	b143      	cbz	r3, 35c4 <z_impl_k_thread_abort+0x20>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    35b2:	4b06      	ldr	r3, [pc, #24]	; (35cc <z_impl_k_thread_abort+0x28>)
    35b4:	685a      	ldr	r2, [r3, #4]
    35b6:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
    35ba:	605a      	str	r2, [r3, #4]
			/* Clear any system calls that may be pending
			 * as they have a higher priority than the PendSV
			 * handler and will check the stack of the thread
			 * being aborted.
			 */
			SCB->SHCSR &= ~SCB_SHCSR_SVCALLPENDED_Msk;
    35bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    35be:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    35c2:	625a      	str	r2, [r3, #36]	; 0x24
		}
	}

	z_thread_abort(thread);
    35c4:	f006 b92a 	b.w	981c <z_thread_abort>
    35c8:	20001a48 	.word	0x20001a48
    35cc:	e000ed00 	.word	0xe000ed00

000035d0 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    35d0:	4b02      	ldr	r3, [pc, #8]	; (35dc <z_arm_configure_static_mpu_regions+0xc>)
    35d2:	4a03      	ldr	r2, [pc, #12]	; (35e0 <z_arm_configure_static_mpu_regions+0x10>)
    35d4:	4803      	ldr	r0, [pc, #12]	; (35e4 <z_arm_configure_static_mpu_regions+0x14>)
    35d6:	2101      	movs	r1, #1
    35d8:	f000 b890 	b.w	36fc <arm_core_mpu_configure_static_mpu_regions>
    35dc:	20008000 	.word	0x20008000
    35e0:	20000000 	.word	0x20000000
    35e4:	0000bf40 	.word	0x0000bf40

000035e8 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    35e8:	6e42      	ldr	r2, [r0, #100]	; 0x64
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    35ea:	4b05      	ldr	r3, [pc, #20]	; (3600 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    35ec:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    35ee:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    35f0:	4a04      	ldr	r2, [pc, #16]	; (3604 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    35f2:	2120      	movs	r1, #32
    35f4:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    35f8:	4618      	mov	r0, r3
    35fa:	2101      	movs	r1, #1
    35fc:	f000 b888 	b.w	3710 <arm_core_mpu_configure_dynamic_mpu_regions>
    3600:	20000d80 	.word	0x20000d80
    3604:	150b0000 	.word	0x150b0000

00003608 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    3608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    360a:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 36c0 <mpu_configure_regions+0xb8>
    360e:	af00      	add	r7, sp, #0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    3610:	2500      	movs	r5, #0
    3612:	428d      	cmp	r5, r1
    3614:	da1a      	bge.n	364c <mpu_configure_regions+0x44>
		if (regions[i].size == 0U) {
    3616:	6844      	ldr	r4, [r0, #4]
    3618:	2c00      	cmp	r4, #0
    361a:	d04d      	beq.n	36b8 <mpu_configure_regions+0xb0>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    361c:	b1fb      	cbz	r3, 365e <mpu_configure_regions+0x56>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    361e:	f104 3eff 	add.w	lr, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    3622:	ea14 0f0e 	tst.w	r4, lr
    3626:	d014      	beq.n	3652 <mpu_configure_regions+0x4a>
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    3628:	4b26      	ldr	r3, [pc, #152]	; (36c4 <mpu_configure_regions+0xbc>)
    362a:	466c      	mov	r4, sp
    362c:	b088      	sub	sp, #32
    362e:	466a      	mov	r2, sp
    3630:	e9c2 3505 	strd	r3, r5, [r2, #20]
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3634:	2303      	movs	r3, #3
    3636:	f842 3f10 	str.w	r3, [r2, #16]!
    363a:	4823      	ldr	r0, [pc, #140]	; (36c8 <mpu_configure_regions+0xc0>)
    363c:	2300      	movs	r3, #0
    363e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3642:	f007 f9e6 	bl	aa12 <z_impl_z_log_msg2_static_create>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3646:	f06f 0215 	mvn.w	r2, #21
    364a:	46a5      	mov	sp, r4
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    364c:	4610      	mov	r0, r2
    364e:	46bd      	mov	sp, r7
    3650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    3652:	2c1f      	cmp	r4, #31
    3654:	d9e8      	bls.n	3628 <mpu_configure_regions+0x20>
		((part->start & (part->size - 1U)) == 0U);
    3656:	6806      	ldr	r6, [r0, #0]
		&&
    3658:	ea1e 0f06 	tst.w	lr, r6
    365c:	d1e4      	bne.n	3628 <mpu_configure_regions+0x20>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    365e:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    3660:	6806      	ldr	r6, [r0, #0]
#if defined(CONFIG_CPU_AARCH32_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    3662:	f8d0 e008 	ldr.w	lr, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    3666:	b2d2      	uxtb	r2, r2
	if (size <= 32U) {
    3668:	d914      	bls.n	3694 <mpu_configure_regions+0x8c>
	if (size > (1UL << 31)) {
    366a:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    366e:	d813      	bhi.n	3698 <mpu_configure_regions+0x90>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    3670:	3c01      	subs	r4, #1
    3672:	fab4 f484 	clz	r4, r4
    3676:	f1c4 041f 	rsb	r4, r4, #31
    367a:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    367c:	2a07      	cmp	r2, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    367e:	ea4e 0404 	orr.w	r4, lr, r4
    3682:	d90b      	bls.n	369c <mpu_configure_regions+0x94>
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    3684:	4911      	ldr	r1, [pc, #68]	; (36cc <mpu_configure_regions+0xc4>)
    3686:	466c      	mov	r4, sp
    3688:	b088      	sub	sp, #32
    368a:	466b      	mov	r3, sp
    368c:	e9c3 1205 	strd	r1, r2, [r3, #20]
    3690:	461a      	mov	r2, r3
    3692:	e7cf      	b.n	3634 <mpu_configure_regions+0x2c>
		return REGION_32B;
    3694:	2408      	movs	r4, #8
    3696:	e7f1      	b.n	367c <mpu_configure_regions+0x74>
		return REGION_4G;
    3698:	243e      	movs	r4, #62	; 0x3e
    369a:	e7ef      	b.n	367c <mpu_configure_regions+0x74>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    369c:	f026 061f 	bic.w	r6, r6, #31
				| MPU_RBAR_VALID_Msk | index;
    36a0:	4316      	orrs	r6, r2
    36a2:	f046 0610 	orr.w	r6, r6, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    36a6:	f044 0401 	orr.w	r4, r4, #1
    36aa:	f8cc 2098 	str.w	r2, [ip, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    36ae:	f8cc 609c 	str.w	r6, [ip, #156]	; 0x9c
		reg_index++;
    36b2:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    36b4:	f8cc 40a0 	str.w	r4, [ip, #160]	; 0xa0
	for (i = 0; i < regions_num; i++) {
    36b8:	3501      	adds	r5, #1
    36ba:	300c      	adds	r0, #12
    36bc:	e7a9      	b.n	3612 <mpu_configure_regions+0xa>
    36be:	bf00      	nop
    36c0:	e000ed00 	.word	0xe000ed00
    36c4:	0000c8b9 	.word	0x0000c8b9
    36c8:	0000bdf8 	.word	0x0000bdf8
    36cc:	0000c8dc 	.word	0x0000c8dc

000036d0 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    36d0:	4b04      	ldr	r3, [pc, #16]	; (36e4 <arm_core_mpu_enable+0x14>)
    36d2:	2205      	movs	r2, #5
    36d4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    36d8:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    36dc:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    36e0:	4770      	bx	lr
    36e2:	bf00      	nop
    36e4:	e000ed00 	.word	0xe000ed00

000036e8 <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    36e8:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    36ec:	4b02      	ldr	r3, [pc, #8]	; (36f8 <arm_core_mpu_disable+0x10>)
    36ee:	2200      	movs	r2, #0
    36f0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    36f4:	4770      	bx	lr
    36f6:	bf00      	nop
    36f8:	e000ed00 	.word	0xe000ed00

000036fc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    36fc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    36fe:	4c03      	ldr	r4, [pc, #12]	; (370c <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    3700:	2301      	movs	r3, #1
    3702:	7822      	ldrb	r2, [r4, #0]
    3704:	f7ff ff80 	bl	3608 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    3708:	7020      	strb	r0, [r4, #0]
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
			regions_num);
	}
}
    370a:	bd10      	pop	{r4, pc}
    370c:	20001ab0 	.word	0x20001ab0

00003710 <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    3710:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    3712:	4a09      	ldr	r2, [pc, #36]	; (3738 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    3714:	2300      	movs	r3, #0
    3716:	7812      	ldrb	r2, [r2, #0]
    3718:	f7ff ff76 	bl	3608 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    371c:	f110 0f16 	cmn.w	r0, #22
    3720:	d003      	beq.n	372a <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
  MPU->RNR = rnr;
    3722:	4b06      	ldr	r3, [pc, #24]	; (373c <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    3724:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    3726:	2807      	cmp	r0, #7
    3728:	dd00      	ble.n	372c <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    372a:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    372c:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    3730:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    3734:	3001      	adds	r0, #1
    3736:	e7f6      	b.n	3726 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    3738:	20001ab0 	.word	0x20001ab0
    373c:	e000ed00 	.word	0xe000ed00

00003740 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    3740:	4914      	ldr	r1, [pc, #80]	; (3794 <z_arm_mpu_init+0x54>)
    3742:	6808      	ldr	r0, [r1, #0]
    3744:	2808      	cmp	r0, #8
{
    3746:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    3748:	d821      	bhi.n	378e <z_arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    374a:	f7ff ffcd 	bl	36e8 <arm_core_mpu_disable>
    374e:	4c12      	ldr	r4, [pc, #72]	; (3798 <z_arm_mpu_init+0x58>)
    3750:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3752:	2200      	movs	r2, #0
    3754:	4290      	cmp	r0, r2
    3756:	f101 010c 	add.w	r1, r1, #12
    375a:	d105      	bne.n	3768 <z_arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    375c:	4b0f      	ldr	r3, [pc, #60]	; (379c <z_arm_mpu_init+0x5c>)
    375e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    3760:	f7ff ffb6 	bl	36d0 <arm_core_mpu_enable>
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
    3764:	2000      	movs	r0, #0
}
    3766:	bd10      	pop	{r4, pc}
    3768:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    376c:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    3770:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    3774:	4313      	orrs	r3, r2
    3776:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    377a:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    377e:	f851 3c04 	ldr.w	r3, [r1, #-4]
    3782:	f043 0301 	orr.w	r3, r3, #1
    3786:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    378a:	3201      	adds	r2, #1
    378c:	e7e2      	b.n	3754 <z_arm_mpu_init+0x14>
		return -1;
    378e:	f04f 30ff 	mov.w	r0, #4294967295
    3792:	e7e8      	b.n	3766 <z_arm_mpu_init+0x26>
    3794:	0000bf4c 	.word	0x0000bf4c
    3798:	e000ed00 	.word	0xe000ed00
    379c:	20001ab0 	.word	0x20001ab0

000037a0 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    37a0:	4b01      	ldr	r3, [pc, #4]	; (37a8 <__stdout_hook_install+0x8>)
    37a2:	6018      	str	r0, [r3, #0]
}
    37a4:	4770      	bx	lr
    37a6:	bf00      	nop
    37a8:	2000000c 	.word	0x2000000c

000037ac <sys_arch_reboot>:
    }
    else
    {
        p_gpregret = &((volatile uint32_t *)&p_reg->GPREGRET)[0];
    }
    *p_gpregret = val;
    37ac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    37b0:	b2c0      	uxtb	r0, r0
    37b2:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    37b6:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    37ba:	4905      	ldr	r1, [pc, #20]	; (37d0 <sys_arch_reboot+0x24>)
    37bc:	4b05      	ldr	r3, [pc, #20]	; (37d4 <sys_arch_reboot+0x28>)
    37be:	68ca      	ldr	r2, [r1, #12]
    37c0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    37c4:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    37c6:	60cb      	str	r3, [r1, #12]
    37c8:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    37cc:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    37ce:	e7fd      	b.n	37cc <sys_arch_reboot+0x20>
    37d0:	e000ed00 	.word	0xe000ed00
    37d4:	05fa0004 	.word	0x05fa0004

000037d8 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    37d8:	b120      	cbz	r0, 37e4 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    37da:	4b03      	ldr	r3, [pc, #12]	; (37e8 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    37dc:	0180      	lsls	r0, r0, #6
    37de:	f043 0301 	orr.w	r3, r3, #1
    37e2:	4718      	bx	r3
}

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    37e4:	4770      	bx	lr
    37e6:	bf00      	nop
    37e8:	0000bec0 	.word	0x0000bec0

000037ec <hid_status_cb.part.0>:
		break;
	}

}

static void hid_status_cb(struct usb_cfg_data *cfg,
    37ec:	b580      	push	{r7, lr}

	LOG_DBG("cfg %p status %d", cfg, status);

	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
	if (common == NULL) {
		LOG_WRN("Device data not found for cfg %p", cfg);
    37ee:	4b08      	ldr	r3, [pc, #32]	; (3810 <hid_status_cb.part.0+0x24>)
static void hid_status_cb(struct usb_cfg_data *cfg,
    37f0:	af00      	add	r7, sp, #0
		LOG_WRN("Device data not found for cfg %p", cfg);
    37f2:	b088      	sub	sp, #32
    37f4:	466a      	mov	r2, sp
    37f6:	e9c2 3005 	strd	r3, r0, [r2, #20]
    37fa:	2303      	movs	r3, #3
    37fc:	f842 3f10 	str.w	r3, [r2, #16]!
    3800:	4804      	ldr	r0, [pc, #16]	; (3814 <hid_status_cb.part.0+0x28>)
    3802:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    3806:	f007 fa04 	bl	ac12 <z_log_msg2_static_create.constprop.0>
	}

	dev_data = CONTAINER_OF(common, struct hid_device_info, common);

	hid_do_status_cb(dev_data, status, param);
}
    380a:	46bd      	mov	sp, r7
    380c:	bd80      	pop	{r7, pc}
    380e:	bf00      	nop
    3810:	0000c915 	.word	0x0000c915
    3814:	0000be58 	.word	0x0000be58

00003818 <hid_status_cb>:
{
    3818:	b570      	push	{r4, r5, r6, lr}
    381a:	4606      	mov	r6, r0
    381c:	b086      	sub	sp, #24
    381e:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_cfg(&usb_hid_devlist, cfg);
    3820:	4601      	mov	r1, r0
    3822:	4835      	ldr	r0, [pc, #212]	; (38f8 <hid_status_cb+0xe0>)
    3824:	f007 f952 	bl	aacc <usb_get_dev_data_by_cfg>
	if (common == NULL) {
    3828:	4604      	mov	r4, r0
    382a:	b928      	cbnz	r0, 3838 <hid_status_cb+0x20>
    382c:	4630      	mov	r0, r6
}
    382e:	b006      	add	sp, #24
    3830:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3834:	f7ff bfda 	b.w	37ec <hid_status_cb.part.0>
	switch (status) {
    3838:	2d0a      	cmp	r5, #10
    383a:	d85a      	bhi.n	38f2 <hid_status_cb+0xda>
    383c:	e8df f005 	tbb	[pc, r5]
    3840:	23211106 	.word	0x23211106
    3844:	59403432 	.word	0x59403432
    3848:	5959      	.short	0x5959
    384a:	30          	.byte	0x30
    384b:	00          	.byte	0x00
		LOG_INF("Device error");
    384c:	4b2b      	ldr	r3, [pc, #172]	; (38fc <hid_status_cb+0xe4>)
		LOG_INF("Unknown event");
    384e:	9305      	str	r3, [sp, #20]
    3850:	482b      	ldr	r0, [pc, #172]	; (3900 <hid_status_cb+0xe8>)
    3852:	2302      	movs	r3, #2
    3854:	aa04      	add	r2, sp, #16
    3856:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    385a:	9304      	str	r3, [sp, #16]
    385c:	f007 f9d9 	bl	ac12 <z_log_msg2_static_create.constprop.0>
    3860:	e01e      	b.n	38a0 <hid_status_cb+0x88>
		LOG_INF("Device reset detected");
    3862:	4b28      	ldr	r3, [pc, #160]	; (3904 <hid_status_cb+0xec>)
		LOG_INF("Device disconnected");
    3864:	9305      	str	r3, [sp, #20]
    3866:	4826      	ldr	r0, [pc, #152]	; (3900 <hid_status_cb+0xe8>)
    3868:	2302      	movs	r3, #2
    386a:	aa04      	add	r2, sp, #16
    386c:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    3870:	9304      	str	r3, [sp, #16]
    3872:	f007 f9ce 	bl	ac12 <z_log_msg2_static_create.constprop.0>
		dev_data->configured = false;
    3876:	2300      	movs	r3, #0
    3878:	f804 3c04 	strb.w	r3, [r4, #-4]
			dev_data->suspended = false;
    387c:	f804 3c03 	strb.w	r3, [r4, #-3]
    3880:	e00e      	b.n	38a0 <hid_status_cb+0x88>
		LOG_INF("Device connected");
    3882:	4b21      	ldr	r3, [pc, #132]	; (3908 <hid_status_cb+0xf0>)
    3884:	e7e3      	b.n	384e <hid_status_cb+0x36>
		LOG_INF("Device configured");
    3886:	4b21      	ldr	r3, [pc, #132]	; (390c <hid_status_cb+0xf4>)
    3888:	9305      	str	r3, [sp, #20]
    388a:	481d      	ldr	r0, [pc, #116]	; (3900 <hid_status_cb+0xe8>)
    388c:	2302      	movs	r3, #2
    388e:	aa04      	add	r2, sp, #16
    3890:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    3894:	9304      	str	r3, [sp, #16]
    3896:	f007 f9bc 	bl	ac12 <z_log_msg2_static_create.constprop.0>
		dev_data->configured = true;
    389a:	2301      	movs	r3, #1
    389c:	f804 3c04 	strb.w	r3, [r4, #-4]
}
    38a0:	b006      	add	sp, #24
    38a2:	bd70      	pop	{r4, r5, r6, pc}
		LOG_INF("Device disconnected");
    38a4:	4b1a      	ldr	r3, [pc, #104]	; (3910 <hid_status_cb+0xf8>)
    38a6:	e7dd      	b.n	3864 <hid_status_cb+0x4c>
		LOG_INF("Device suspended");
    38a8:	4b1a      	ldr	r3, [pc, #104]	; (3914 <hid_status_cb+0xfc>)
    38aa:	9305      	str	r3, [sp, #20]
    38ac:	4814      	ldr	r0, [pc, #80]	; (3900 <hid_status_cb+0xe8>)
    38ae:	2302      	movs	r3, #2
    38b0:	aa04      	add	r2, sp, #16
    38b2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    38b6:	9304      	str	r3, [sp, #16]
    38b8:	f007 f9ab 	bl	ac12 <z_log_msg2_static_create.constprop.0>
		dev_data->suspended = true;
    38bc:	2301      	movs	r3, #1
    38be:	e7dd      	b.n	387c <hid_status_cb+0x64>
		LOG_INF("Device resumed");
    38c0:	4b15      	ldr	r3, [pc, #84]	; (3918 <hid_status_cb+0x100>)
    38c2:	480f      	ldr	r0, [pc, #60]	; (3900 <hid_status_cb+0xe8>)
    38c4:	9305      	str	r3, [sp, #20]
    38c6:	2502      	movs	r5, #2
    38c8:	aa04      	add	r2, sp, #16
    38ca:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    38ce:	9504      	str	r5, [sp, #16]
    38d0:	f007 f99f 	bl	ac12 <z_log_msg2_static_create.constprop.0>
		if (dev_data->suspended) {
    38d4:	f814 3c03 	ldrb.w	r3, [r4, #-3]
    38d8:	2b00      	cmp	r3, #0
    38da:	d0e1      	beq.n	38a0 <hid_status_cb+0x88>
			LOG_INF("from suspend");
    38dc:	4b0f      	ldr	r3, [pc, #60]	; (391c <hid_status_cb+0x104>)
    38de:	4808      	ldr	r0, [pc, #32]	; (3900 <hid_status_cb+0xe8>)
    38e0:	aa04      	add	r2, sp, #16
    38e2:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    38e6:	e9cd 5304 	strd	r5, r3, [sp, #16]
    38ea:	f007 f992 	bl	ac12 <z_log_msg2_static_create.constprop.0>
			dev_data->suspended = false;
    38ee:	2300      	movs	r3, #0
    38f0:	e7c4      	b.n	387c <hid_status_cb+0x64>
		LOG_INF("Unknown event");
    38f2:	4b0b      	ldr	r3, [pc, #44]	; (3920 <hid_status_cb+0x108>)
    38f4:	e7ab      	b.n	384e <hid_status_cb+0x36>
    38f6:	bf00      	nop
    38f8:	20000da4 	.word	0x20000da4
    38fc:	0000c936 	.word	0x0000c936
    3900:	0000be58 	.word	0x0000be58
    3904:	0000c943 	.word	0x0000c943
    3908:	0000c959 	.word	0x0000c959
    390c:	0000c96a 	.word	0x0000c96a
    3910:	0000c97c 	.word	0x0000c97c
    3914:	0000c990 	.word	0x0000c990
    3918:	0000c9a1 	.word	0x0000c9a1
    391c:	0000c9b0 	.word	0x0000c9b0
    3920:	0000c9bd 	.word	0x0000c9bd

00003924 <hid_class_handle_req>:

static int hid_class_handle_req(struct usb_setup_packet *setup,
				int32_t *len, uint8_t **data)
{
    3924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    3928:	4604      	mov	r4, r0
    392a:	af00      	add	r7, sp, #0
    392c:	4688      	mov	r8, r1

	LOG_DBG("Class request:"
		"bRequest 0x%02x, bmRequestType 0x%02x len %d",
		setup->bRequest, setup->bmRequestType, *len);

	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
    392e:	7901      	ldrb	r1, [r0, #4]
    3930:	4827      	ldr	r0, [pc, #156]	; (39d0 <hid_class_handle_req+0xac>)
{
    3932:	4691      	mov	r9, r2
	common = usb_get_dev_data_by_iface(&usb_hid_devlist,
    3934:	f007 f8d6 	bl	aae4 <usb_get_dev_data_by_iface>
					   (uint8_t)setup->wIndex);
	if (common == NULL) {
    3938:	4606      	mov	r6, r0
    393a:	b9a0      	cbnz	r0, 3966 <hid_class_handle_req+0x42>
		LOG_WRN("Device data not found for interface %u",
    393c:	88a3      	ldrh	r3, [r4, #4]
    393e:	4925      	ldr	r1, [pc, #148]	; (39d4 <hid_class_handle_req+0xb0>)
    3940:	4825      	ldr	r0, [pc, #148]	; (39d8 <hid_class_handle_req+0xb4>)
    3942:	466c      	mov	r4, sp
    3944:	b088      	sub	sp, #32
    3946:	466a      	mov	r2, sp
    3948:	e9c2 1305 	strd	r1, r3, [r2, #20]
    394c:	2303      	movs	r3, #3
    394e:	f842 3f10 	str.w	r3, [r2, #16]!
    3952:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    3956:	f007 f95c 	bl	ac12 <z_log_msg2_static_create.constprop.0>
			setup->wIndex);
		return -ENODEV;
    395a:	f06f 0012 	mvn.w	r0, #18
    395e:	46a5      	mov	sp, r4
			break;
		}
	}

	return -ENOTSUP;
}
    3960:	46bd      	mov	sp, r7
    3962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if (usb_reqtype_is_to_host(setup)) {
    3966:	f994 3000 	ldrsb.w	r3, [r4]
	dev = common->dev;
    396a:	6800      	ldr	r0, [r0, #0]
		switch (setup->bRequest) {
    396c:	7865      	ldrb	r5, [r4, #1]
	if (usb_reqtype_is_to_host(setup)) {
    396e:	2b00      	cmp	r3, #0
    3970:	da13      	bge.n	399a <hid_class_handle_req+0x76>
		switch (setup->bRequest) {
    3972:	2d01      	cmp	r5, #1
    3974:	d005      	beq.n	3982 <hid_class_handle_req+0x5e>
    3976:	1eab      	subs	r3, r5, #2
		switch (setup->bRequest) {
    3978:	2b01      	cmp	r3, #1
    397a:	d819      	bhi.n	39b0 <hid_class_handle_req+0x8c>
				return hid_on_get_report(dev_data, setup, len,
    397c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3980:	e7ee      	b.n	3960 <hid_class_handle_req+0x3c>
			if (dev_data->ops && dev_data->ops->get_report) {
    3982:	f856 3c08 	ldr.w	r3, [r6, #-8]
    3986:	2b00      	cmp	r3, #0
    3988:	d0f8      	beq.n	397c <hid_class_handle_req+0x58>
    398a:	681d      	ldr	r5, [r3, #0]
			if (dev_data->ops && dev_data->ops->set_report) {
    398c:	2d00      	cmp	r5, #0
    398e:	d0f5      	beq.n	397c <hid_class_handle_req+0x58>
				return dev_data->ops->set_report(dev, setup,
    3990:	464b      	mov	r3, r9
    3992:	4642      	mov	r2, r8
    3994:	4621      	mov	r1, r4
    3996:	47a8      	blx	r5
    3998:	e7e2      	b.n	3960 <hid_class_handle_req+0x3c>
		switch (setup->bRequest) {
    399a:	2d09      	cmp	r5, #9
    399c:	d002      	beq.n	39a4 <hid_class_handle_req+0x80>
    399e:	f1a5 030a 	sub.w	r3, r5, #10
    39a2:	e7e9      	b.n	3978 <hid_class_handle_req+0x54>
			if (dev_data->ops && dev_data->ops->set_report) {
    39a4:	f856 3c08 	ldr.w	r3, [r6, #-8]
    39a8:	2b00      	cmp	r3, #0
    39aa:	d0e7      	beq.n	397c <hid_class_handle_req+0x58>
    39ac:	685d      	ldr	r5, [r3, #4]
    39ae:	e7ed      	b.n	398c <hid_class_handle_req+0x68>
			LOG_ERR("Unhandled request 0x%02x", setup->bRequest);
    39b0:	4b0a      	ldr	r3, [pc, #40]	; (39dc <hid_class_handle_req+0xb8>)
    39b2:	4809      	ldr	r0, [pc, #36]	; (39d8 <hid_class_handle_req+0xb4>)
    39b4:	466c      	mov	r4, sp
    39b6:	b088      	sub	sp, #32
    39b8:	466a      	mov	r2, sp
    39ba:	e9c2 3505 	strd	r3, r5, [r2, #20]
    39be:	2303      	movs	r3, #3
    39c0:	f842 3f10 	str.w	r3, [r2, #16]!
    39c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    39c8:	f007 f923 	bl	ac12 <z_log_msg2_static_create.constprop.0>
    39cc:	46a5      	mov	sp, r4
    39ce:	e7d5      	b.n	397c <hid_class_handle_req+0x58>
    39d0:	20000da4 	.word	0x20000da4
    39d4:	0000c9cb 	.word	0x0000c9cb
    39d8:	0000be58 	.word	0x0000be58
    39dc:	0000c9f2 	.word	0x0000c9f2

000039e0 <hid_custom_handle_req>:

static int hid_custom_handle_req(struct usb_setup_packet *setup,
				 int32_t *len, uint8_t **data)
{
    39e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	LOG_DBG("Standard request:"
		"bRequest 0x%02x, bmRequestType 0x%02x, len %d",
		setup->bRequest, setup->bmRequestType, setup->wLength);

	if (usb_reqtype_is_to_host(setup) &&
    39e4:	f990 3000 	ldrsb.w	r3, [r0]
    39e8:	2b00      	cmp	r3, #0
{
    39ea:	af00      	add	r7, sp, #0
    39ec:	4604      	mov	r4, r0
    39ee:	460e      	mov	r6, r1
    39f0:	4615      	mov	r5, r2
	if (usb_reqtype_is_to_host(setup) &&
    39f2:	da20      	bge.n	3a36 <hid_custom_handle_req+0x56>
	    setup->RequestType.recipient == USB_REQTYPE_RECIPIENT_INTERFACE &&
    39f4:	8803      	ldrh	r3, [r0, #0]
    39f6:	f023 03e0 	bic.w	r3, r3, #224	; 0xe0
    39fa:	b29b      	uxth	r3, r3
    39fc:	f240 6201 	movw	r2, #1537	; 0x601
    3a00:	4293      	cmp	r3, r2
    3a02:	d118      	bne.n	3a36 <hid_custom_handle_req+0x56>
	    setup->bRequest == USB_SREQ_GET_DESCRIPTOR) {
		uint8_t value = (uint8_t)(setup->wValue >> 8);
		uint8_t iface_num = (uint8_t)setup->wIndex;
    3a04:	f890 9004 	ldrb.w	r9, [r0, #4]
		uint8_t value = (uint8_t)(setup->wValue >> 8);
    3a08:	8843      	ldrh	r3, [r0, #2]
		struct hid_device_info *dev_data;
		struct usb_dev_data *common;
		const struct usb_cfg_data *cfg;
		const struct usb_hid_config *hid_desc;

		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
    3a0a:	481d      	ldr	r0, [pc, #116]	; (3a80 <hid_custom_handle_req+0xa0>)
    3a0c:	4649      	mov	r1, r9
		uint8_t value = (uint8_t)(setup->wValue >> 8);
    3a0e:	ea4f 2a13 	mov.w	sl, r3, lsr #8
		common = usb_get_dev_data_by_iface(&usb_hid_devlist, iface_num);
    3a12:	f007 f867 	bl	aae4 <usb_get_dev_data_by_iface>
		if (common == NULL) {
    3a16:	b988      	cbnz	r0, 3a3c <hid_custom_handle_req+0x5c>
			LOG_WRN("Device data not found for interface %u",
    3a18:	4b1a      	ldr	r3, [pc, #104]	; (3a84 <hid_custom_handle_req+0xa4>)
    3a1a:	481b      	ldr	r0, [pc, #108]	; (3a88 <hid_custom_handle_req+0xa8>)
    3a1c:	466c      	mov	r4, sp
    3a1e:	b088      	sub	sp, #32
    3a20:	466a      	mov	r2, sp
    3a22:	e9c2 3905 	strd	r3, r9, [r2, #20]
    3a26:	2303      	movs	r3, #3
    3a28:	f842 3f10 	str.w	r3, [r2, #16]!
    3a2c:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    3a30:	f007 f8ef 	bl	ac12 <z_log_msg2_static_create.constprop.0>
    3a34:	46a5      	mov	sp, r4
		}

		return 0;
	}

	return -EINVAL;
    3a36:	f06f 0015 	mvn.w	r0, #21
    3a3a:	e007      	b.n	3a4c <hid_custom_handle_req+0x6c>
		switch (value) {
    3a3c:	f1ba 0f21 	cmp.w	sl, #33	; 0x21
    3a40:	d007      	beq.n	3a52 <hid_custom_handle_req+0x72>
    3a42:	f1ba 0f22 	cmp.w	sl, #34	; 0x22
    3a46:	d011      	beq.n	3a6c <hid_custom_handle_req+0x8c>
    3a48:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    3a4c:	46bd      	mov	sp, r7
    3a4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			cfg = common->dev->config;
    3a52:	6803      	ldr	r3, [r0, #0]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
    3a54:	88e1      	ldrh	r1, [r4, #6]
			hid_desc = cfg->interface_descriptor;
    3a56:	685b      	ldr	r3, [r3, #4]
			*len = MIN(setup->wLength, hid_desc->if0_hid.bLength);
    3a58:	685b      	ldr	r3, [r3, #4]
    3a5a:	f813 2f09 	ldrb.w	r2, [r3, #9]!
    3a5e:	4291      	cmp	r1, r2
    3a60:	bf94      	ite	ls
    3a62:	6031      	strls	r1, [r6, #0]
    3a64:	6032      	strhi	r2, [r6, #0]
			*data = (uint8_t *)dev_data->report_desc;
    3a66:	602b      	str	r3, [r5, #0]
		return 0;
    3a68:	2000      	movs	r0, #0
			break;
    3a6a:	e7ef      	b.n	3a4c <hid_custom_handle_req+0x6c>
			*len = MIN(setup->wLength, dev_data->report_size);
    3a6c:	88e3      	ldrh	r3, [r4, #6]
    3a6e:	f850 2c0c 	ldr.w	r2, [r0, #-12]
    3a72:	429a      	cmp	r2, r3
    3a74:	bf94      	ite	ls
    3a76:	6032      	strls	r2, [r6, #0]
    3a78:	6033      	strhi	r3, [r6, #0]
			*data = (uint8_t *)dev_data->report_desc;
    3a7a:	f850 3c10 	ldr.w	r3, [r0, #-16]
    3a7e:	e7f2      	b.n	3a66 <hid_custom_handle_req+0x86>
    3a80:	20000da4 	.word	0x20000da4
    3a84:	0000c9cb 	.word	0x0000c9cb
    3a88:	0000be58 	.word	0x0000be58

00003a8c <hid_int_in.part.0>:

static void hid_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
    3a8c:	b580      	push	{r7, lr}
	struct hid_device_info *dev_data;
	struct usb_dev_data *common;

	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
	if (common == NULL) {
		LOG_WRN("Device data not found for endpoint %u", ep);
    3a8e:	4b08      	ldr	r3, [pc, #32]	; (3ab0 <hid_int_in.part.0+0x24>)
static void hid_int_in(uint8_t ep, enum usb_dc_ep_cb_status_code ep_status)
    3a90:	af00      	add	r7, sp, #0
		LOG_WRN("Device data not found for endpoint %u", ep);
    3a92:	b088      	sub	sp, #32
    3a94:	466a      	mov	r2, sp
    3a96:	e9c2 3005 	strd	r3, r0, [r2, #20]
    3a9a:	2303      	movs	r3, #3
    3a9c:	f842 3f10 	str.w	r3, [r2, #16]!
    3aa0:	4804      	ldr	r0, [pc, #16]	; (3ab4 <hid_int_in.part.0+0x28>)
    3aa2:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    3aa6:	f007 f8b4 	bl	ac12 <z_log_msg2_static_create.constprop.0>
	    dev_data->ops->int_in_ready == NULL) {
		return;
	}

	dev_data->ops->int_in_ready(common->dev);
}
    3aaa:	46bd      	mov	sp, r7
    3aac:	bd80      	pop	{r7, pc}
    3aae:	bf00      	nop
    3ab0:	0000ca0b 	.word	0x0000ca0b
    3ab4:	0000be58 	.word	0x0000be58

00003ab8 <hid_int_in>:
{
    3ab8:	b570      	push	{r4, r5, r6, lr}
    3aba:	4604      	mov	r4, r0
    3abc:	460d      	mov	r5, r1
	common = usb_get_dev_data_by_ep(&usb_hid_devlist, ep);
    3abe:	4601      	mov	r1, r0
    3ac0:	480a      	ldr	r0, [pc, #40]	; (3aec <hid_int_in+0x34>)
    3ac2:	f007 f81d 	bl	ab00 <usb_get_dev_data_by_ep>
	if (common == NULL) {
    3ac6:	b920      	cbnz	r0, 3ad2 <hid_int_in+0x1a>
    3ac8:	4620      	mov	r0, r4
}
    3aca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    3ace:	f7ff bfdd 	b.w	3a8c <hid_int_in.part.0>
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
    3ad2:	2d02      	cmp	r5, #2
    3ad4:	d108      	bne.n	3ae8 <hid_int_in+0x30>
    3ad6:	f850 3c08 	ldr.w	r3, [r0, #-8]
    3ada:	b12b      	cbz	r3, 3ae8 <hid_int_in+0x30>
	    dev_data->ops->int_in_ready == NULL) {
    3adc:	691b      	ldr	r3, [r3, #16]
	if (ep_status != USB_DC_EP_DATA_IN || dev_data->ops == NULL ||
    3ade:	b11b      	cbz	r3, 3ae8 <hid_int_in+0x30>
}
    3ae0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	dev_data->ops->int_in_ready(common->dev);
    3ae4:	6800      	ldr	r0, [r0, #0]
    3ae6:	4718      	bx	r3
}
    3ae8:	bd70      	pop	{r4, r5, r6, pc}
    3aea:	bf00      	nop
    3aec:	20000da4 	.word	0x20000da4

00003af0 <hid_int_ep_write>:
		&usb_hid_devlist);
}

int hid_int_ep_write(const struct device *dev, const uint8_t *data, uint32_t data_len,
		     uint32_t *bytes_ret)
{
    3af0:	b530      	push	{r4, r5, lr}
	const struct usb_cfg_data *cfg = dev->config;
    3af2:	6844      	ldr	r4, [r0, #4]
	struct hid_device_info *hid_dev_data = dev->data;
    3af4:	6900      	ldr	r0, [r0, #16]

	if (hid_dev_data->configured && !hid_dev_data->suspended) {
    3af6:	7b05      	ldrb	r5, [r0, #12]
{
    3af8:	b087      	sub	sp, #28
	if (hid_dev_data->configured && !hid_dev_data->suspended) {
    3afa:	b145      	cbz	r5, 3b0e <hid_int_ep_write+0x1e>
    3afc:	7b40      	ldrb	r0, [r0, #13]
    3afe:	b930      	cbnz	r0, 3b0e <hid_int_ep_write+0x1e>
		// LOG_WRN("Writing usb");
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
    3b00:	6a20      	ldr	r0, [r4, #32]
    3b02:	7900      	ldrb	r0, [r0, #4]
	} else {
		LOG_WRN("Device is not configured");
		return -EAGAIN;
	}

}
    3b04:	b007      	add	sp, #28
    3b06:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		return usb_write(cfg->endpoint[HID_INT_IN_EP_IDX].ep_addr, data,
    3b0a:	f006 bfc7 	b.w	aa9c <usb_write>
		LOG_WRN("Device is not configured");
    3b0e:	4b07      	ldr	r3, [pc, #28]	; (3b2c <hid_int_ep_write+0x3c>)
    3b10:	9305      	str	r3, [sp, #20]
    3b12:	4807      	ldr	r0, [pc, #28]	; (3b30 <hid_int_ep_write+0x40>)
    3b14:	2302      	movs	r3, #2
    3b16:	aa04      	add	r2, sp, #16
    3b18:	f44f 5184 	mov.w	r1, #4224	; 0x1080
    3b1c:	9304      	str	r3, [sp, #16]
    3b1e:	f007 f878 	bl	ac12 <z_log_msg2_static_create.constprop.0>
}
    3b22:	f06f 000a 	mvn.w	r0, #10
    3b26:	b007      	add	sp, #28
    3b28:	bd30      	pop	{r4, r5, pc}
    3b2a:	bf00      	nop
    3b2c:	0000ca31 	.word	0x0000ca31
    3b30:	0000be58 	.word	0x0000be58

00003b34 <endpoint_ctx>:
	return (uint8_t)ep;
}

static inline bool ep_is_valid(const uint8_t ep)
{
	uint8_t ep_num = USB_EP_GET_IDX(ep);
    3b34:	f000 037f 	and.w	r3, r0, #127	; 0x7f

	if (NRF_USBD_EPIN_CHECK(ep)) {
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    3b38:	2b08      	cmp	r3, #8
	if (NRF_USBD_EPIN_CHECK(ep)) {
    3b3a:	b242      	sxtb	r2, r0
		if (unlikely(ep_num == NRF_USBD_EPISO_FIRST)) {
    3b3c:	d004      	beq.n	3b48 <endpoint_ctx+0x14>
			if (CFG_EP_ISOIN_CNT == 0) {
				return false;
			}
		} else {
			if (ep_num >= CFG_EPIN_CNT) {
    3b3e:	f010 0f78 	tst.w	r0, #120	; 0x78
    3b42:	d001      	beq.n	3b48 <endpoint_ctx+0x14>
{
	struct nrf_usbd_ctx *ctx;
	uint8_t ep_num;

	if (!ep_is_valid(ep)) {
		return NULL;
    3b44:	2000      	movs	r0, #0
    3b46:	4770      	bx	lr
	}

	ctx = get_usbd_ctx();
	ep_num = NRF_USBD_EP_NR_GET(ep);

	if (NRF_USBD_EPIN_CHECK(ep)) {
    3b48:	2a00      	cmp	r2, #0
	ep_num = NRF_USBD_EP_NR_GET(ep);
    3b4a:	f000 030f 	and.w	r3, r0, #15
	if (NRF_USBD_EPIN_CHECK(ep)) {
    3b4e:	f000 0008 	and.w	r0, r0, #8
    3b52:	da05      	bge.n	3b60 <endpoint_ctx+0x2c>
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3b54:	b958      	cbnz	r0, 3b6e <endpoint_ctx+0x3a>
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
		} else {
			return &ctx->ep_ctx[ep_num];
    3b56:	4808      	ldr	r0, [pc, #32]	; (3b78 <endpoint_ctx+0x44>)
    3b58:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    3b5c:	304c      	adds	r0, #76	; 0x4c
    3b5e:	4770      	bx	lr
		}
	} else {
		if (unlikely(NRF_USBD_EPISO_CHECK(ep))) {
    3b60:	b938      	cbnz	r0, 3b72 <endpoint_ctx+0x3e>
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
		} else {
			return &ctx->ep_ctx[CFG_EPIN_CNT +
    3b62:	4805      	ldr	r0, [pc, #20]	; (3b78 <endpoint_ctx+0x44>)
    3b64:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    3b68:	f500 70b6 	add.w	r0, r0, #364	; 0x16c
    3b6c:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOIN_INDEX];
    3b6e:	4803      	ldr	r0, [pc, #12]	; (3b7c <endpoint_ctx+0x48>)
    3b70:	4770      	bx	lr
			return &ctx->ep_ctx[EP_ISOOUT_INDEX];
    3b72:	4803      	ldr	r0, [pc, #12]	; (3b80 <endpoint_ctx+0x4c>)
					    ep_num];
		}
	}

	return NULL;
}
    3b74:	4770      	bx	lr
    3b76:	bf00      	nop
    3b78:	200013ac 	.word	0x200013ac
    3b7c:	200014f8 	.word	0x200014f8
    3b80:	20001618 	.word	0x20001618

00003b84 <usbd_evt_put>:
 * @brief Enqueue USBD event.
 *
 * @param Pointer to the previously allocated and filled event structure.
 */
static inline void usbd_evt_put(struct usbd_event *ev)
{
    3b84:	4601      	mov	r1, r0
	k_fifo_put(&usbd_evt_fifo, ev);
    3b86:	4801      	ldr	r0, [pc, #4]	; (3b8c <usbd_evt_put+0x8>)
    3b88:	f007 bd3f 	b.w	b60a <k_queue_append>
    3b8c:	20000190 	.word	0x20000190

00003b90 <usbd_work_schedule>:
	k_work_submit_to_queue(&usbd_work_queue, &get_usbd_ctx()->usb_work);
    3b90:	4901      	ldr	r1, [pc, #4]	; (3b98 <usbd_work_schedule+0x8>)
    3b92:	4802      	ldr	r0, [pc, #8]	; (3b9c <usbd_work_schedule+0xc>)
    3b94:	f007 bd8a 	b.w	b6ac <k_work_submit_to_queue>
    3b98:	200013d4 	.word	0x200013d4
    3b9c:	20000820 	.word	0x20000820

00003ba0 <usb_init>:
	}
	return 0;
}

static int usb_init(const struct device *arg)
{
    3ba0:	b513      	push	{r0, r1, r4, lr}
	};

	/* Ignore the return value, as NRFX_ERROR_ALREADY_INITIALIZED is not
	 * a problem here.
	 */
	(void)nrfx_power_init(&power_config);
    3ba2:	480b      	ldr	r0, [pc, #44]	; (3bd0 <usb_init+0x30>)
    3ba4:	f003 fb02 	bl	71ac <nrfx_power_init>
	nrfx_power_usbevt_init(&usbevt_config);

	k_work_queue_start(&usbd_work_queue,
    3ba8:	2400      	movs	r4, #0
	nrfx_power_usbevt_init(&usbevt_config);
    3baa:	480a      	ldr	r0, [pc, #40]	; (3bd4 <usb_init+0x34>)
    3bac:	f003 fb28 	bl	7200 <nrfx_power_usbevt_init>
	k_work_queue_start(&usbd_work_queue,
    3bb0:	f04f 33ff 	mov.w	r3, #4294967295
    3bb4:	f44f 6280 	mov.w	r2, #1024	; 0x400
    3bb8:	4907      	ldr	r1, [pc, #28]	; (3bd8 <usb_init+0x38>)
    3bba:	4808      	ldr	r0, [pc, #32]	; (3bdc <usb_init+0x3c>)
    3bbc:	9400      	str	r4, [sp, #0]
    3bbe:	f005 facd 	bl	915c <k_work_queue_start>
			   usbd_work_queue_stack,
			   K_KERNEL_STACK_SIZEOF(usbd_work_queue_stack),
			   CONFIG_SYSTEM_WORKQUEUE_PRIORITY, NULL);

	k_work_init(&ctx->usb_work, usbd_work_handler);
    3bc2:	4907      	ldr	r1, [pc, #28]	; (3be0 <usb_init+0x40>)
    3bc4:	4807      	ldr	r0, [pc, #28]	; (3be4 <usb_init+0x44>)
    3bc6:	f007 fd68 	bl	b69a <k_work_init>

	return 0;
}
    3bca:	4620      	mov	r0, r4
    3bcc:	b002      	add	sp, #8
    3bce:	bd10      	pop	{r4, pc}
    3bd0:	0000cc53 	.word	0x0000cc53
    3bd4:	0000bf70 	.word	0x0000bf70
    3bd8:	20002420 	.word	0x20002420
    3bdc:	20000820 	.word	0x20000820
    3be0:	00003fd1 	.word	0x00003fd1
    3be4:	200013d4 	.word	0x200013d4

00003be8 <usbd_evt_get>:
	return z_impl_k_queue_get(queue, timeout);
    3be8:	4802      	ldr	r0, [pc, #8]	; (3bf4 <usbd_evt_get+0xc>)
    3bea:	2200      	movs	r2, #0
    3bec:	2300      	movs	r3, #0
    3bee:	f005 b933 	b.w	8e58 <z_impl_k_queue_get>
    3bf2:	bf00      	nop
    3bf4:	20000190 	.word	0x20000190

00003bf8 <usbd_evt_flush>:
{
    3bf8:	b510      	push	{r4, lr}
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3bfa:	4c05      	ldr	r4, [pc, #20]	; (3c10 <usbd_evt_flush+0x18>)
		ev = usbd_evt_get();
    3bfc:	f7ff fff4 	bl	3be8 <usbd_evt_get>
		if (ev) {
    3c00:	b120      	cbz	r0, 3c0c <usbd_evt_flush+0x14>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3c02:	1d01      	adds	r1, r0, #4
    3c04:	4620      	mov	r0, r4
    3c06:	f007 fc48 	bl	b49a <k_mem_slab_free>
	} while (ev != NULL);
    3c0a:	e7f7      	b.n	3bfc <usbd_evt_flush+0x4>
}
    3c0c:	bd10      	pop	{r4, pc}
    3c0e:	bf00      	nop
    3c10:	20000150 	.word	0x20000150

00003c14 <usbd_evt_alloc>:
{
    3c14:	b510      	push	{r4, lr}
    3c16:	b088      	sub	sp, #32
	if (k_mem_slab_alloc(&fifo_elem_slab,
    3c18:	4818      	ldr	r0, [pc, #96]	; (3c7c <usbd_evt_alloc+0x68>)
    3c1a:	2200      	movs	r2, #0
    3c1c:	2300      	movs	r3, #0
    3c1e:	a901      	add	r1, sp, #4
    3c20:	f004 ff5c 	bl	8adc <k_mem_slab_alloc>
    3c24:	b330      	cbz	r0, 3c74 <usbd_evt_alloc+0x60>
		LOG_ERR("USBD event allocation failed!");
    3c26:	4b16      	ldr	r3, [pc, #88]	; (3c80 <usbd_evt_alloc+0x6c>)
    3c28:	4816      	ldr	r0, [pc, #88]	; (3c84 <usbd_evt_alloc+0x70>)
    3c2a:	9307      	str	r3, [sp, #28]
    3c2c:	aa06      	add	r2, sp, #24
    3c2e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3c32:	2402      	movs	r4, #2
    3c34:	9406      	str	r4, [sp, #24]
    3c36:	f007 f802 	bl	ac3e <z_log_msg2_static_create.constprop.0>
		usbd_evt_flush();
    3c3a:	f7ff ffdd 	bl	3bf8 <usbd_evt_flush>
		if (k_mem_slab_alloc(&fifo_elem_slab, (void **)&block.data, K_NO_WAIT)) {
    3c3e:	480f      	ldr	r0, [pc, #60]	; (3c7c <usbd_evt_alloc+0x68>)
    3c40:	2200      	movs	r2, #0
    3c42:	2300      	movs	r3, #0
    3c44:	a901      	add	r1, sp, #4
    3c46:	f004 ff49 	bl	8adc <k_mem_slab_alloc>
    3c4a:	b150      	cbz	r0, 3c62 <usbd_evt_alloc+0x4e>
			LOG_ERR("USBD event memory corrupted");
    3c4c:	4b0e      	ldr	r3, [pc, #56]	; (3c88 <usbd_evt_alloc+0x74>)
    3c4e:	480d      	ldr	r0, [pc, #52]	; (3c84 <usbd_evt_alloc+0x70>)
    3c50:	aa06      	add	r2, sp, #24
    3c52:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    3c56:	e9cd 4306 	strd	r4, r3, [sp, #24]
    3c5a:	f006 fff0 	bl	ac3e <z_log_msg2_static_create.constprop.0>
			return NULL;
    3c5e:	2000      	movs	r0, #0
    3c60:	e00a      	b.n	3c78 <usbd_evt_alloc+0x64>
		ev = (struct usbd_event *)block.data;
    3c62:	9801      	ldr	r0, [sp, #4]
		ev->evt_type = USBD_EVT_REINIT;
    3c64:	2304      	movs	r3, #4
		ev->block = block;
    3c66:	6040      	str	r0, [r0, #4]
		ev->evt_type = USBD_EVT_REINIT;
    3c68:	7403      	strb	r3, [r0, #16]
		usbd_evt_put(ev);
    3c6a:	f7ff ff8b 	bl	3b84 <usbd_evt_put>
		usbd_work_schedule();
    3c6e:	f7ff ff8f 	bl	3b90 <usbd_work_schedule>
		return NULL;
    3c72:	e7f4      	b.n	3c5e <usbd_evt_alloc+0x4a>
	ev = (struct usbd_event *)block.data;
    3c74:	9801      	ldr	r0, [sp, #4]
	ev->block = block;
    3c76:	6040      	str	r0, [r0, #4]
}
    3c78:	b008      	add	sp, #32
    3c7a:	bd10      	pop	{r4, pc}
    3c7c:	20000150 	.word	0x20000150
    3c80:	0000ca58 	.word	0x0000ca58
    3c84:	0000be60 	.word	0x0000be60
    3c88:	0000ca76 	.word	0x0000ca76

00003c8c <usbd_event_transfer_data>:
{
    3c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		endpoint_ctx(p_event->data.eptransfer.ep);
    3c8e:	7881      	ldrb	r1, [r0, #2]
{
    3c90:	4606      	mov	r6, r0
    3c92:	af00      	add	r7, sp, #0
		endpoint_ctx(p_event->data.eptransfer.ep);
    3c94:	4608      	mov	r0, r1
    3c96:	f7ff ff4d 	bl	3b34 <endpoint_ctx>
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3c9a:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
    3c9c:	78f4      	ldrb	r4, [r6, #3]
		endpoint_ctx(p_event->data.eptransfer.ep);
    3c9e:	4605      	mov	r5, r0
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3ca0:	d523      	bpl.n	3cea <usbd_event_transfer_data+0x5e>
		switch (p_event->data.eptransfer.status) {
    3ca2:	b194      	cbz	r4, 3cca <usbd_event_transfer_data+0x3e>
    3ca4:	2c03      	cmp	r4, #3
    3ca6:	d01e      	beq.n	3ce6 <usbd_event_transfer_data+0x5a>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    3ca8:	4b2a      	ldr	r3, [pc, #168]	; (3d54 <usbd_event_transfer_data+0xc8>)
    3caa:	482b      	ldr	r0, [pc, #172]	; (3d58 <usbd_event_transfer_data+0xcc>)
    3cac:	466d      	mov	r5, sp
    3cae:	b088      	sub	sp, #32
    3cb0:	466a      	mov	r2, sp
    3cb2:	e9c2 3405 	strd	r3, r4, [r2, #20]
    3cb6:	2304      	movs	r3, #4
    3cb8:	61d1      	str	r1, [r2, #28]
    3cba:	f842 3f10 	str.w	r3, [r2, #16]!
    3cbe:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    3cc2:	f006 ffbc 	bl	ac3e <z_log_msg2_static_create.constprop.0>
    3cc6:	46ad      	mov	sp, r5
    3cc8:	e00d      	b.n	3ce6 <usbd_event_transfer_data+0x5a>
			struct usbd_event *ev = usbd_evt_alloc();
    3cca:	f7ff ffa3 	bl	3c14 <usbd_evt_alloc>
			if (!ev) {
    3cce:	4603      	mov	r3, r0
    3cd0:	b148      	cbz	r0, 3ce6 <usbd_event_transfer_data+0x5a>
			ev->evt_type = USBD_EVT_EP;
    3cd2:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    3cd4:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    3cd6:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    3cd8:	2203      	movs	r2, #3
    3cda:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    3cdc:	609d      	str	r5, [r3, #8]
			usbd_evt_put(ev);
    3cde:	f7ff ff51 	bl	3b84 <usbd_evt_put>
			usbd_work_schedule();
    3ce2:	f7ff ff55 	bl	3b90 <usbd_work_schedule>
}
    3ce6:	46bd      	mov	sp, r7
    3ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch (p_event->data.eptransfer.status) {
    3cea:	b154      	cbz	r4, 3d02 <usbd_event_transfer_data+0x76>
    3cec:	2c01      	cmp	r4, #1
    3cee:	d1db      	bne.n	3ca8 <usbd_event_transfer_data+0x1c>
			struct usbd_event *ev = usbd_evt_alloc();
    3cf0:	f7ff ff90 	bl	3c14 <usbd_evt_alloc>
			if (!ev) {
    3cf4:	4603      	mov	r3, r0
    3cf6:	2800      	cmp	r0, #0
    3cf8:	d0f5      	beq.n	3ce6 <usbd_event_transfer_data+0x5a>
			ep_ctx->read_pending = true;
    3cfa:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    3cfc:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    3cfe:	7304      	strb	r4, [r0, #12]
    3d00:	e7ec      	b.n	3cdc <usbd_event_transfer_data+0x50>
			struct usbd_event *ev = usbd_evt_alloc();
    3d02:	f7ff ff87 	bl	3c14 <usbd_evt_alloc>
			if (!ev) {
    3d06:	2800      	cmp	r0, #0
    3d08:	d0ed      	beq.n	3ce6 <usbd_event_transfer_data+0x5a>
				p_event->data.eptransfer.ep);
    3d0a:	78b2      	ldrb	r2, [r6, #2]

NRF_STATIC_INLINE uint32_t nrf_usbd_ep_amount_get(NRF_USBD_Type const * p_reg, uint8_t ep)
{
    uint32_t ret;

    if (NRF_USBD_EPIN_CHECK(ep))
    3d0c:	4b13      	ldr	r3, [pc, #76]	; (3d5c <usbd_event_transfer_data+0xd0>)
    3d0e:	f012 0f80 	tst.w	r2, #128	; 0x80
    3d12:	f002 0108 	and.w	r1, r2, #8
    3d16:	d011      	beq.n	3d3c <usbd_event_transfer_data+0xb0>
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    3d18:	b141      	cbz	r1, 3d2c <usbd_event_transfer_data+0xa0>
        {
            ret = p_reg->ISOIN.AMOUNT;
    3d1a:	f8d3 36a8 	ldr.w	r3, [r3, #1704]	; 0x6a8
			ep_ctx->buf.len = nrf_usbd_ep_amount_get(NRF_USBD,
    3d1e:	60eb      	str	r3, [r5, #12]
			ev->evt_type = USBD_EVT_EP;
    3d20:	2301      	movs	r3, #1
    3d22:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    3d24:	2302      	movs	r3, #2
    3d26:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    3d28:	6085      	str	r5, [r0, #8]
    3d2a:	e7d8      	b.n	3cde <usbd_event_transfer_data+0x52>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPIN[epnr].AMOUNT;
    3d2c:	f002 020f 	and.w	r2, r2, #15
    3d30:	2114      	movs	r1, #20
    3d32:	fb01 3302 	mla	r3, r1, r2, r3
    3d36:	f8d3 3608 	ldr.w	r3, [r3, #1544]	; 0x608
    3d3a:	e7f0      	b.n	3d1e <usbd_event_transfer_data+0x92>
        }
    }
    else
    {
        if (NRF_USBD_EPISO_CHECK(ep))
    3d3c:	b111      	cbz	r1, 3d44 <usbd_event_transfer_data+0xb8>
        {
            ret = p_reg->ISOOUT.AMOUNT;
    3d3e:	f8d3 37a8 	ldr.w	r3, [r3, #1960]	; 0x7a8
    3d42:	e7ec      	b.n	3d1e <usbd_event_transfer_data+0x92>
        }
        else
        {
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
            ret = p_reg->EPOUT[epnr].AMOUNT;
    3d44:	f002 020f 	and.w	r2, r2, #15
    3d48:	2114      	movs	r1, #20
    3d4a:	fb01 3302 	mla	r3, r1, r2, r3
    3d4e:	f8d3 3708 	ldr.w	r3, [r3, #1800]	; 0x708
    3d52:	e7e4      	b.n	3d1e <usbd_event_transfer_data+0x92>
    3d54:	0000ca92 	.word	0x0000ca92
    3d58:	0000be60 	.word	0x0000be60
    3d5c:	40027000 	.word	0x40027000

00003d60 <usb_dc_power_event_handler>:
{
    3d60:	b598      	push	{r3, r4, r7, lr}
    3d62:	2802      	cmp	r0, #2
    3d64:	af00      	add	r7, sp, #0
    3d66:	d811      	bhi.n	3d8c <usb_dc_power_event_handler+0x2c>
    3d68:	4b10      	ldr	r3, [pc, #64]	; (3dac <usb_dc_power_event_handler+0x4c>)
    3d6a:	5c1c      	ldrb	r4, [r3, r0]
	struct usbd_event *ev = usbd_evt_alloc();
    3d6c:	f7ff ff52 	bl	3c14 <usbd_evt_alloc>
	if (!ev) {
    3d70:	b150      	cbz	r0, 3d88 <usb_dc_power_event_handler+0x28>
	ev->evt_type = USBD_EVT_POWER;
    3d72:	2200      	movs	r2, #0
    3d74:	7402      	strb	r2, [r0, #16]
	ev->evt.pwr_evt.state = state;
    3d76:	7204      	strb	r4, [r0, #8]
	usbd_evt_put(ev);
    3d78:	f7ff ff04 	bl	3b84 <usbd_evt_put>
	if (usbd_ctx.attached) {
    3d7c:	4b0c      	ldr	r3, [pc, #48]	; (3db0 <usb_dc_power_event_handler+0x50>)
    3d7e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
    3d82:	b10b      	cbz	r3, 3d88 <usb_dc_power_event_handler+0x28>
		usbd_work_schedule();
    3d84:	f7ff ff04 	bl	3b90 <usbd_work_schedule>
}
    3d88:	46bd      	mov	sp, r7
    3d8a:	bd98      	pop	{r3, r4, r7, pc}
		LOG_ERR("Unknown USB power event %d", event);
    3d8c:	4b09      	ldr	r3, [pc, #36]	; (3db4 <usb_dc_power_event_handler+0x54>)
    3d8e:	466c      	mov	r4, sp
    3d90:	b088      	sub	sp, #32
    3d92:	466a      	mov	r2, sp
	switch (event) {
    3d94:	e9c2 3005 	strd	r3, r0, [r2, #20]
		LOG_ERR("Unknown USB power event %d", event);
    3d98:	2303      	movs	r3, #3
    3d9a:	f842 3f10 	str.w	r3, [r2, #16]!
    3d9e:	4806      	ldr	r0, [pc, #24]	; (3db8 <usb_dc_power_event_handler+0x58>)
    3da0:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3da4:	f006 ff4b 	bl	ac3e <z_log_msg2_static_create.constprop.0>
    3da8:	46a5      	mov	sp, r4
    3daa:	e7ed      	b.n	3d88 <usb_dc_power_event_handler+0x28>
    3dac:	0000cc50 	.word	0x0000cc50
    3db0:	200013ac 	.word	0x200013ac
    3db4:	0000cabe 	.word	0x0000cabe
    3db8:	0000be60 	.word	0x0000be60

00003dbc <hfxo_stop.constprop.0.isra.0>:
static int hfxo_stop(struct nrf_usbd_ctx *ctx)
    3dbc:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    3dbe:	490f      	ldr	r1, [pc, #60]	; (3dfc <hfxo_stop.constprop.0.isra.0+0x40>)
    3dc0:	f3bf 8f5b 	dmb	ish
    3dc4:	f101 0320 	add.w	r3, r1, #32
    3dc8:	2200      	movs	r2, #0
    3dca:	e853 0f00 	ldrex	r0, [r3]
    3dce:	2801      	cmp	r0, #1
    3dd0:	d103      	bne.n	3dda <hfxo_stop.constprop.0.isra.0+0x1e>
    3dd2:	e843 2400 	strex	r4, r2, [r3]
    3dd6:	2c00      	cmp	r4, #0
    3dd8:	d1f7      	bne.n	3dca <hfxo_stop.constprop.0.isra.0+0xe>
    3dda:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 1, 0)) {
    3dde:	d10b      	bne.n	3df8 <hfxo_stop.constprop.0.isra.0+0x3c>
		return onoff_cancel_or_release(ctx->hfxo_mgr, &ctx->hfxo_cli);
    3de0:	69cc      	ldr	r4, [r1, #28]
 * @retval negative other errors produced by onoff_release().
 */
static inline int onoff_cancel_or_release(struct onoff_manager *mgr,
					  struct onoff_client *cli)
{
	int rv = onoff_cancel(mgr, cli);
    3de2:	310c      	adds	r1, #12
    3de4:	4620      	mov	r0, r4
    3de6:	f006 f94b 	bl	a080 <onoff_cancel>

	if (rv == -EALREADY) {
    3dea:	3078      	adds	r0, #120	; 0x78
    3dec:	d104      	bne.n	3df8 <hfxo_stop.constprop.0.isra.0+0x3c>
		rv = onoff_release(mgr);
    3dee:	4620      	mov	r0, r4
}
    3df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    3df4:	f006 b91f 	b.w	a036 <onoff_release>
    3df8:	bd10      	pop	{r4, pc}
    3dfa:	bf00      	nop
    3dfc:	200013ac 	.word	0x200013ac

00003e00 <usbd_event_handler>:
{
    3e00:	b5f0      	push	{r4, r5, r6, r7, lr}
    3e02:	b089      	sub	sp, #36	; 0x24
    3e04:	4606      	mov	r6, r0
    3e06:	af00      	add	r7, sp, #0
	struct usbd_event evt = {0};
    3e08:	2214      	movs	r2, #20
    3e0a:	2100      	movs	r1, #0
    3e0c:	f107 000c 	add.w	r0, r7, #12
    3e10:	f006 fecf 	bl	abb2 <memset>
	switch (p_event->type) {
    3e14:	7833      	ldrb	r3, [r6, #0]
    3e16:	3b01      	subs	r3, #1
    3e18:	2b05      	cmp	r3, #5
    3e1a:	d820      	bhi.n	3e5e <usbd_event_handler+0x5e>
    3e1c:	e8df f003 	tbb	[pc, r3]
    3e20:	13130397 	.word	0x13130397
    3e24:	1589      	.short	0x1589
		evt.evt.pwr_evt.state = USBD_SUSPENDED;
    3e26:	2303      	movs	r3, #3
		evt.evt.pwr_evt.state = USBD_RESUMED;
    3e28:	753b      	strb	r3, [r7, #20]
		evt.evt_type = USBD_EVT_POWER;
    3e2a:	2400      	movs	r4, #0
		ev = usbd_evt_alloc();
    3e2c:	f7ff fef2 	bl	3c14 <usbd_evt_alloc>
		if (!ev) {
    3e30:	4603      	mov	r3, r0
    3e32:	b1a0      	cbz	r0, 3e5e <usbd_event_handler+0x5e>
		ev->evt_type = evt.evt_type;
    3e34:	7404      	strb	r4, [r0, #16]
		ev->evt = evt.evt;
    3e36:	f100 0208 	add.w	r2, r0, #8
    3e3a:	e9d7 0105 	ldrd	r0, r1, [r7, #20]
    3e3e:	e882 0003 	stmia.w	r2, {r0, r1}
		usbd_evt_put(ev);
    3e42:	4618      	mov	r0, r3
    3e44:	e030      	b.n	3ea8 <usbd_event_handler+0xa8>
		evt.evt.pwr_evt.state = USBD_RESUMED;
    3e46:	2304      	movs	r3, #4
    3e48:	e7ee      	b.n	3e28 <usbd_event_handler+0x28>
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    3e4a:	78b1      	ldrb	r1, [r6, #2]
    3e4c:	4608      	mov	r0, r1
    3e4e:	f7ff fe71 	bl	3b34 <endpoint_ctx>
		switch (ep_ctx->cfg.type) {
    3e52:	7a83      	ldrb	r3, [r0, #10]
		ep_ctx = endpoint_ctx(p_event->data.eptransfer.ep);
    3e54:	4605      	mov	r5, r0
		switch (ep_ctx->cfg.type) {
    3e56:	b12b      	cbz	r3, 3e64 <usbd_event_handler+0x64>
    3e58:	3b01      	subs	r3, #1
    3e5a:	2b02      	cmp	r3, #2
    3e5c:	d965      	bls.n	3f2a <usbd_event_handler+0x12a>
}
    3e5e:	3724      	adds	r7, #36	; 0x24
    3e60:	46bd      	mov	sp, r7
    3e62:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3e64:	060b      	lsls	r3, r1, #24
		switch (p_event->data.eptransfer.status) {
    3e66:	78f4      	ldrb	r4, [r6, #3]
	if (NRF_USBD_EPIN_CHECK(p_event->data.eptransfer.ep)) {
    3e68:	d523      	bpl.n	3eb2 <usbd_event_handler+0xb2>
		switch (p_event->data.eptransfer.status) {
    3e6a:	b194      	cbz	r4, 3e92 <usbd_event_handler+0x92>
    3e6c:	2c03      	cmp	r4, #3
    3e6e:	d0f6      	beq.n	3e5e <usbd_event_handler+0x5e>
			LOG_ERR("Unexpected event (nrfx_usbd): %d, ep 0x%02x",
    3e70:	4b38      	ldr	r3, [pc, #224]	; (3f54 <usbd_event_handler+0x154>)
    3e72:	4839      	ldr	r0, [pc, #228]	; (3f58 <usbd_event_handler+0x158>)
    3e74:	466d      	mov	r5, sp
    3e76:	b088      	sub	sp, #32
    3e78:	466a      	mov	r2, sp
    3e7a:	e9c2 3405 	strd	r3, r4, [r2, #20]
    3e7e:	2304      	movs	r3, #4
    3e80:	61d1      	str	r1, [r2, #28]
    3e82:	f842 3f10 	str.w	r3, [r2, #16]!
    3e86:	f44f 5101 	mov.w	r1, #8256	; 0x2040
    3e8a:	f006 fed8 	bl	ac3e <z_log_msg2_static_create.constprop.0>
    3e8e:	46ad      	mov	sp, r5
    3e90:	e7e5      	b.n	3e5e <usbd_event_handler+0x5e>
			struct usbd_event *ev = usbd_evt_alloc();
    3e92:	f7ff febf 	bl	3c14 <usbd_evt_alloc>
			if (!ev) {
    3e96:	4603      	mov	r3, r0
    3e98:	2800      	cmp	r0, #0
    3e9a:	d0e0      	beq.n	3e5e <usbd_event_handler+0x5e>
			ev->evt_type = USBD_EVT_EP;
    3e9c:	2201      	movs	r2, #1
			ep_ctx->write_in_progress = false;
    3e9e:	77ac      	strb	r4, [r5, #30]
			ev->evt_type = USBD_EVT_EP;
    3ea0:	7402      	strb	r2, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_WRITE_COMPLETE;
    3ea2:	2203      	movs	r2, #3
    3ea4:	7302      	strb	r2, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    3ea6:	609d      	str	r5, [r3, #8]
		usbd_evt_put(ev);
    3ea8:	f7ff fe6c 	bl	3b84 <usbd_evt_put>
		usbd_work_schedule();
    3eac:	f7ff fe70 	bl	3b90 <usbd_work_schedule>
    3eb0:	e7d5      	b.n	3e5e <usbd_event_handler+0x5e>
		switch (p_event->data.eptransfer.status) {
    3eb2:	b154      	cbz	r4, 3eca <usbd_event_handler+0xca>
    3eb4:	2c01      	cmp	r4, #1
    3eb6:	d1db      	bne.n	3e70 <usbd_event_handler+0x70>
			struct usbd_event *ev = usbd_evt_alloc();
    3eb8:	f7ff feac 	bl	3c14 <usbd_evt_alloc>
			if (!ev) {
    3ebc:	4603      	mov	r3, r0
    3ebe:	2800      	cmp	r0, #0
    3ec0:	d0cd      	beq.n	3e5e <usbd_event_handler+0x5e>
			ep_ctx->read_pending = true;
    3ec2:	776c      	strb	r4, [r5, #29]
			ev->evt_type = USBD_EVT_EP;
    3ec4:	7404      	strb	r4, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    3ec6:	7304      	strb	r4, [r0, #12]
    3ec8:	e7ed      	b.n	3ea6 <usbd_event_handler+0xa6>
			struct usbd_event *ev = usbd_evt_alloc();
    3eca:	f7ff fea3 	bl	3c14 <usbd_evt_alloc>
			if (!ev) {
    3ece:	4604      	mov	r4, r0
    3ed0:	2800      	cmp	r0, #0
    3ed2:	d0c4      	beq.n	3e5e <usbd_event_handler+0x5e>
			ev->evt_type = USBD_EVT_EP;
    3ed4:	2301      	movs	r3, #1
    3ed6:	7403      	strb	r3, [r0, #16]
			ev->evt.ep_evt.evt_type = EP_EVT_RECV_COMPLETE;
    3ed8:	2302      	movs	r3, #2
    3eda:	7303      	strb	r3, [r0, #12]
			ev->evt.ep_evt.ep = ep_ctx;
    3edc:	6085      	str	r5, [r0, #8]
			err_code = nrfx_usbd_ep_status_get(
    3ede:	f105 010c 	add.w	r1, r5, #12
    3ee2:	78b0      	ldrb	r0, [r6, #2]
    3ee4:	f007 fa47 	bl	b376 <nrfx_usbd_ep_status_get>
			if (err_code != NRFX_USBD_EP_OK) {
    3ee8:	b170      	cbz	r0, 3f08 <usbd_event_handler+0x108>
				LOG_ERR("_ep_status_get failed! Code: %d",
    3eea:	4b1c      	ldr	r3, [pc, #112]	; (3f5c <usbd_event_handler+0x15c>)
    3eec:	466e      	mov	r6, sp
    3eee:	b088      	sub	sp, #32
    3ef0:	466a      	mov	r2, sp
    3ef2:	e9c2 3005 	strd	r3, r0, [r2, #20]
    3ef6:	2303      	movs	r3, #3
    3ef8:	f842 3f10 	str.w	r3, [r2, #16]!
    3efc:	4816      	ldr	r0, [pc, #88]	; (3f58 <usbd_event_handler+0x158>)
    3efe:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    3f02:	f006 fe9c 	bl	ac3e <z_log_msg2_static_create.constprop.0>
    3f06:	46b5      	mov	sp, r6
			if (ctx->ctrl_read_len > ep_ctx->buf.len) {
    3f08:	4a15      	ldr	r2, [pc, #84]	; (3f60 <usbd_event_handler+0x160>)
    3f0a:	68e9      	ldr	r1, [r5, #12]
    3f0c:	f8b2 328c 	ldrh.w	r3, [r2, #652]	; 0x28c
    3f10:	428b      	cmp	r3, r1
    3f12:	d906      	bls.n	3f22 <usbd_event_handler+0x122>
				ctx->ctrl_read_len -= ep_ctx->buf.len;
    3f14:	1a5b      	subs	r3, r3, r1
    3f16:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
				nrfx_usbd_setup_data_clear();
    3f1a:	f004 f8f3 	bl	8104 <nrfx_usbd_setup_data_clear>
			usbd_evt_put(ev);
    3f1e:	4620      	mov	r0, r4
    3f20:	e7c2      	b.n	3ea8 <usbd_event_handler+0xa8>
				ctx->ctrl_read_len = 0U;
    3f22:	2300      	movs	r3, #0
    3f24:	f8a2 328c 	strh.w	r3, [r2, #652]	; 0x28c
    3f28:	e7f9      	b.n	3f1e <usbd_event_handler+0x11e>
			usbd_event_transfer_data(p_event);
    3f2a:	4630      	mov	r0, r6
    3f2c:	f7ff feae 	bl	3c8c <usbd_event_transfer_data>
	if (put_evt) {
    3f30:	e795      	b.n	3e5e <usbd_event_handler+0x5e>
		nrfx_usbd_setup_get(&drv_setup);
    3f32:	1d38      	adds	r0, r7, #4
    3f34:	f004 f8c0 	bl	80b8 <nrfx_usbd_setup_get>
		if ((drv_setup.bRequest != USB_SREQ_SET_ADDRESS)
    3f38:	797b      	ldrb	r3, [r7, #5]
    3f3a:	2b05      	cmp	r3, #5
    3f3c:	d103      	bne.n	3f46 <usbd_event_handler+0x146>
		    || (USB_REQTYPE_GET_TYPE(drv_setup.bmRequestType)
    3f3e:	793b      	ldrb	r3, [r7, #4]
    3f40:	f013 0f60 	tst.w	r3, #96	; 0x60
    3f44:	d08b      	beq.n	3e5e <usbd_event_handler+0x5e>
			evt.evt.ep_evt.ep = ep_ctx;
    3f46:	4b07      	ldr	r3, [pc, #28]	; (3f64 <usbd_event_handler+0x164>)
    3f48:	617b      	str	r3, [r7, #20]
			evt.evt_type = USBD_EVT_EP;
    3f4a:	2401      	movs	r4, #1
    3f4c:	e76e      	b.n	3e2c <usbd_event_handler+0x2c>
	switch (p_event->type) {
    3f4e:	2402      	movs	r4, #2
    3f50:	e76c      	b.n	3e2c <usbd_event_handler+0x2c>
    3f52:	bf00      	nop
    3f54:	0000ca92 	.word	0x0000ca92
    3f58:	0000be60 	.word	0x0000be60
    3f5c:	0000cad9 	.word	0x0000cad9
    3f60:	200013ac 	.word	0x200013ac
    3f64:	20001518 	.word	0x20001518

00003f68 <eps_ctx_init>:
{
    3f68:	b538      	push	{r3, r4, r5, lr}
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    3f6a:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    3f6c:	f064 007f 	orn	r0, r4, #127	; 0x7f
    3f70:	b2c0      	uxtb	r0, r0
    3f72:	f7ff fddf 	bl	3b34 <endpoint_ctx>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    3f76:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    3f78:	f006 fe4e 	bl	ac18 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPIN_CNT; i++) {
    3f7c:	2c08      	cmp	r4, #8
    3f7e:	d1f5      	bne.n	3f6c <eps_ctx_init+0x4>
    3f80:	4d0f      	ldr	r5, [pc, #60]	; (3fc0 <eps_ctx_init+0x58>)
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    3f82:	2400      	movs	r4, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    3f84:	b2e0      	uxtb	r0, r4
    3f86:	f7ff fdd5 	bl	3b34 <endpoint_ctx>
		if (!ep_ctx->buf.block.data) {
    3f8a:	6903      	ldr	r3, [r0, #16]
    3f8c:	b903      	cbnz	r3, 3f90 <eps_ctx_init+0x28>
			ep_ctx->buf.block.data = ep_out_bufs[i];
    3f8e:	6105      	str	r5, [r0, #16]
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    3f90:	3401      	adds	r4, #1
		ep_ctx_reset(ep_ctx);
    3f92:	f006 fe41 	bl	ac18 <ep_ctx_reset>
	for (i = 0U; i < CFG_EPOUT_CNT; i++) {
    3f96:	2c08      	cmp	r4, #8
    3f98:	f105 0540 	add.w	r5, r5, #64	; 0x40
    3f9c:	d1f2      	bne.n	3f84 <eps_ctx_init+0x1c>
		ep_ctx_reset(ep_ctx);
    3f9e:	4c09      	ldr	r4, [pc, #36]	; (3fc4 <eps_ctx_init+0x5c>)
    3fa0:	f504 70a6 	add.w	r0, r4, #332	; 0x14c
    3fa4:	f006 fe38 	bl	ac18 <ep_ctx_reset>
		if (!ep_ctx->buf.block.data) {
    3fa8:	f8d4 327c 	ldr.w	r3, [r4, #636]	; 0x27c
    3fac:	b913      	cbnz	r3, 3fb4 <eps_ctx_init+0x4c>
			ep_ctx->buf.block.data = ep_isoout_bufs[0];
    3fae:	4b06      	ldr	r3, [pc, #24]	; (3fc8 <eps_ctx_init+0x60>)
    3fb0:	f8c4 327c 	str.w	r3, [r4, #636]	; 0x27c
		ep_ctx_reset(ep_ctx);
    3fb4:	4805      	ldr	r0, [pc, #20]	; (3fcc <eps_ctx_init+0x64>)
    3fb6:	f006 fe2f 	bl	ac18 <ep_ctx_reset>
}
    3fba:	2000      	movs	r0, #0
    3fbc:	bd38      	pop	{r3, r4, r5, pc}
    3fbe:	bf00      	nop
    3fc0:	200011ac 	.word	0x200011ac
    3fc4:	200013ac 	.word	0x200013ac
    3fc8:	20000dac 	.word	0x20000dac
    3fcc:	20001618 	.word	0x20001618

00003fd0 <usbd_work_handler>:
{
    3fd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->ready;
    3fd4:	4caf      	ldr	r4, [pc, #700]	; (4294 <usbd_work_handler+0x2c4>)
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3fd6:	f8df 92c0 	ldr.w	r9, [pc, #704]	; 4298 <usbd_work_handler+0x2c8>
{
    3fda:	b086      	sub	sp, #24
    3fdc:	4680      	mov	r8, r0
    3fde:	af00      	add	r7, sp, #0
	while ((ev = usbd_evt_get()) != NULL) {
    3fe0:	f7ff fe02 	bl	3be8 <usbd_evt_get>
    3fe4:	4606      	mov	r6, r0
    3fe6:	b918      	cbnz	r0, 3ff0 <usbd_work_handler+0x20>
}
    3fe8:	3718      	adds	r7, #24
    3fea:	46bd      	mov	sp, r7
    3fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return get_usbd_ctx()->ready;
    3ff0:	f894 2025 	ldrb.w	r2, [r4, #37]	; 0x25
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    3ff4:	7c33      	ldrb	r3, [r6, #16]
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    3ff6:	f106 0a04 	add.w	sl, r6, #4
		if (!dev_ready() && ev->evt_type != USBD_EVT_POWER) {
    3ffa:	b93a      	cbnz	r2, 400c <usbd_work_handler+0x3c>
    3ffc:	2b00      	cmp	r3, #0
    3ffe:	f000 80ad 	beq.w	415c <usbd_work_handler+0x18c>
	k_mem_slab_free(&fifo_elem_slab, (void **)&ev->block.data);
    4002:	4651      	mov	r1, sl
    4004:	4648      	mov	r0, r9
    4006:	f007 fa48 	bl	b49a <k_mem_slab_free>
}
    400a:	e7e9      	b.n	3fe0 <usbd_work_handler+0x10>
		switch (ev->evt_type) {
    400c:	2b04      	cmp	r3, #4
    400e:	f200 8197 	bhi.w	4340 <usbd_work_handler+0x370>
    4012:	e8df f013 	tbh	[pc, r3, lsl #1]
    4016:	00a3      	.short	0x00a3
    4018:	01280005 	.word	0x01280005
    401c:	017a0153 	.word	0x017a0153
			if (!ctx->attached) {
    4020:	f818 3c04 	ldrb.w	r3, [r8, #-4]
    4024:	b983      	cbnz	r3, 4048 <usbd_work_handler+0x78>
				LOG_ERR("not attached, EP 0x%02x event dropped",
    4026:	68b3      	ldr	r3, [r6, #8]
    4028:	499c      	ldr	r1, [pc, #624]	; (429c <usbd_work_handler+0x2cc>)
    402a:	7a5b      	ldrb	r3, [r3, #9]
    402c:	489c      	ldr	r0, [pc, #624]	; (42a0 <usbd_work_handler+0x2d0>)
    402e:	466d      	mov	r5, sp
    4030:	b088      	sub	sp, #32
    4032:	466a      	mov	r2, sp
    4034:	e9c2 1305 	strd	r1, r3, [r2, #20]
    4038:	2303      	movs	r3, #3
    403a:	f842 3f10 	str.w	r3, [r2, #16]!
    403e:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4042:	f006 fdfc 	bl	ac3e <z_log_msg2_static_create.constprop.0>
    4046:	46ad      	mov	sp, r5
	switch (ep_evt->evt_type) {
    4048:	7b33      	ldrb	r3, [r6, #12]
	struct nrf_usbd_ep_ctx *ep_ctx = ep_evt->ep;
    404a:	68b5      	ldr	r5, [r6, #8]
	switch (ep_evt->evt_type) {
    404c:	2b03      	cmp	r3, #3
    404e:	d8d8      	bhi.n	4002 <usbd_work_handler+0x32>
    4050:	e8df f003 	tbb	[pc, r3]
    4054:	716c3d02 	.word	0x716c3d02
	usbd_setup = (struct usb_setup_packet *)ep_ctx->buf.data;
    4058:	696e      	ldr	r6, [r5, #20]
	memset(usbd_setup, 0, sizeof(struct usb_setup_packet));
    405a:	2208      	movs	r2, #8
    405c:	2100      	movs	r1, #0
    405e:	4630      	mov	r0, r6
    4060:	f006 fda7 	bl	abb2 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    4064:	4b8f      	ldr	r3, [pc, #572]	; (42a4 <usbd_work_handler+0x2d4>)
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    4066:	4890      	ldr	r0, [pc, #576]	; (42a8 <usbd_work_handler+0x2d8>)
    4068:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    406c:	7032      	strb	r2, [r6, #0]
    return (uint8_t)(p_reg->BREQUEST);
    406e:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    4072:	7072      	strb	r2, [r6, #1]
    const uint16_t val = p_reg->WVALUEL;
    4074:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    4078:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    407c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wValue = nrf_usbd_setup_wvalue_get(NRF_USBD);
    4080:	8072      	strh	r2, [r6, #2]
    const uint16_t val = p_reg->WINDEXL;
    4082:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    4086:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    408a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	usbd_setup->wIndex = nrf_usbd_setup_windex_get(NRF_USBD);
    408e:	80b2      	strh	r2, [r6, #4]
    const uint16_t val = p_reg->WLENGTHL;
    4090:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    4094:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    4098:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    409c:	2208      	movs	r2, #8
	usbd_setup->wLength = nrf_usbd_setup_wlength_get(NRF_USBD);
    409e:	80f3      	strh	r3, [r6, #6]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    40a0:	4631      	mov	r1, r6
	ep_ctx->buf.len = sizeof(struct usb_setup_packet);
    40a2:	60ea      	str	r2, [r5, #12]
	memcpy(&usbd_ctx.setup, usbd_setup, sizeof(struct usb_setup_packet));
    40a4:	f006 fd7a 	bl	ab9c <memcpy>
	ep_ctx->cfg.cb(ep_ctx->cfg.addr, USB_DC_EP_SETUP);
    40a8:	682b      	ldr	r3, [r5, #0]
    40aa:	7a68      	ldrb	r0, [r5, #9]
    40ac:	2100      	movs	r1, #0
    40ae:	4798      	blx	r3
	if (usb_reqtype_is_to_device(usbd_setup) && usbd_setup->wLength) {
    40b0:	f996 3000 	ldrsb.w	r3, [r6]
    40b4:	2b00      	cmp	r3, #0
    40b6:	db06      	blt.n	40c6 <usbd_work_handler+0xf6>
    40b8:	88f3      	ldrh	r3, [r6, #6]
    40ba:	b123      	cbz	r3, 40c6 <usbd_work_handler+0xf6>
		ctx->ctrl_read_len = usbd_setup->wLength;
    40bc:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
		nrfx_usbd_setup_data_clear();
    40c0:	f004 f820 	bl	8104 <nrfx_usbd_setup_data_clear>
    40c4:	e79d      	b.n	4002 <usbd_work_handler+0x32>
		ctx->ctrl_read_len = 0U;
    40c6:	2300      	movs	r3, #0
    40c8:	f8a4 328c 	strh.w	r3, [r4, #652]	; 0x28c
    40cc:	e799      	b.n	4002 <usbd_work_handler+0x32>
	if (!ep_ctx->read_pending) {
    40ce:	7f6b      	ldrb	r3, [r5, #29]
    40d0:	2b00      	cmp	r3, #0
    40d2:	d096      	beq.n	4002 <usbd_work_handler+0x32>
	if (!ep_ctx->read_complete) {
    40d4:	7f2b      	ldrb	r3, [r5, #28]
    40d6:	2b00      	cmp	r3, #0
    40d8:	d093      	beq.n	4002 <usbd_work_handler+0x32>
	ep_ctx->read_pending = false;
    40da:	2600      	movs	r6, #0
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    40dc:	4873      	ldr	r0, [pc, #460]	; (42ac <usbd_work_handler+0x2dc>)
	ep_ctx->read_pending = false;
    40de:	776e      	strb	r6, [r5, #29]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    40e0:	f04f 32ff 	mov.w	r2, #4294967295
    40e4:	f04f 33ff 	mov.w	r3, #4294967295
	ep_ctx->read_complete = false;
    40e8:	772e      	strb	r6, [r5, #28]
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    40ea:	f006 fdab 	bl	ac44 <k_mutex_lock.constprop.0.isra.0>
	NRFX_USBD_TRANSFER_OUT(transfer, ep_ctx->buf.data,
    40ee:	696b      	ldr	r3, [r5, #20]
    40f0:	603b      	str	r3, [r7, #0]
    40f2:	686b      	ldr	r3, [r5, #4]
    40f4:	e9c7 3601 	strd	r3, r6, [r7, #4]
	nrfx_err_t err = nrfx_usbd_ep_transfer(
    40f8:	4639      	mov	r1, r7
    40fa:	7a68      	ldrb	r0, [r5, #9]
    40fc:	f003 fe12 	bl	7d24 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    4100:	4b6b      	ldr	r3, [pc, #428]	; (42b0 <usbd_work_handler+0x2e0>)
    4102:	4298      	cmp	r0, r3
    4104:	d00e      	beq.n	4124 <usbd_work_handler+0x154>
		LOG_ERR("nRF USBD transfer error (OUT): 0x%02x", err);
    4106:	4b6b      	ldr	r3, [pc, #428]	; (42b4 <usbd_work_handler+0x2e4>)
    4108:	466d      	mov	r5, sp
    410a:	b088      	sub	sp, #32
    410c:	466a      	mov	r2, sp
    410e:	e9c2 3005 	strd	r3, r0, [r2, #20]
    4112:	2303      	movs	r3, #3
    4114:	f842 3f10 	str.w	r3, [r2, #16]!
    4118:	4861      	ldr	r0, [pc, #388]	; (42a0 <usbd_work_handler+0x2d0>)
    411a:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    411e:	f006 fd8e 	bl	ac3e <z_log_msg2_static_create.constprop.0>
    4122:	46ad      	mov	sp, r5
	k_mutex_unlock(&ctx->drv_lock);
    4124:	4861      	ldr	r0, [pc, #388]	; (42ac <usbd_work_handler+0x2dc>)
    4126:	f006 fd8f 	bl	ac48 <k_mutex_unlock.isra.0>
    412a:	e76a      	b.n	4002 <usbd_work_handler+0x32>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    412c:	682b      	ldr	r3, [r5, #0]
    412e:	2101      	movs	r1, #1
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4130:	7a68      	ldrb	r0, [r5, #9]
    4132:	4798      	blx	r3
		break;
    4134:	e765      	b.n	4002 <usbd_work_handler+0x32>
		if (ep_ctx->cfg.type == USB_DC_EP_CONTROL &&
    4136:	7aab      	ldrb	r3, [r5, #10]
    4138:	b96b      	cbnz	r3, 4156 <usbd_work_handler+0x186>
    413a:	7feb      	ldrb	r3, [r5, #31]
    413c:	b95b      	cbnz	r3, 4156 <usbd_work_handler+0x186>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    413e:	485b      	ldr	r0, [pc, #364]	; (42ac <usbd_work_handler+0x2dc>)
    4140:	f04f 32ff 	mov.w	r2, #4294967295
    4144:	f04f 33ff 	mov.w	r3, #4294967295
    4148:	f006 fd7c 	bl	ac44 <k_mutex_lock.constprop.0.isra.0>
			nrfx_usbd_setup_clear();
    414c:	f004 f80e 	bl	816c <nrfx_usbd_setup_clear>
			k_mutex_unlock(&ctx->drv_lock);
    4150:	4856      	ldr	r0, [pc, #344]	; (42ac <usbd_work_handler+0x2dc>)
    4152:	f006 fd79 	bl	ac48 <k_mutex_unlock.isra.0>
		ep_ctx->cfg.cb(ep_ctx->cfg.addr,
    4156:	682b      	ldr	r3, [r5, #0]
    4158:	2102      	movs	r1, #2
    415a:	e7e9      	b.n	4130 <usbd_work_handler+0x160>
	switch (pwr_evt->state) {
    415c:	7a33      	ldrb	r3, [r6, #8]
    415e:	2b04      	cmp	r3, #4
    4160:	f63f af4f 	bhi.w	4002 <usbd_work_handler+0x32>
    4164:	e8df f003 	tbb	[pc, r3]
    4168:	6925035b 	.word	0x6925035b
    416c:	75          	.byte	0x75
    416d:	00          	.byte	0x00
		if (!nrfx_usbd_is_enabled()) {
    416e:	f003 fd89 	bl	7c84 <nrfx_usbd_is_enabled>
    4172:	4605      	mov	r5, r0
    4174:	2800      	cmp	r0, #0
    4176:	f47f af44 	bne.w	4002 <usbd_work_handler+0x32>
			nrfx_usbd_enable();
    417a:	f003 fd1d 	bl	7bb8 <nrfx_usbd_enable>
    417e:	f3bf 8f5b 	dmb	ish
    4182:	494d      	ldr	r1, [pc, #308]	; (42b8 <usbd_work_handler+0x2e8>)
    4184:	2301      	movs	r3, #1
    4186:	e851 2f00 	ldrex	r2, [r1]
    418a:	2a00      	cmp	r2, #0
    418c:	d103      	bne.n	4196 <usbd_work_handler+0x1c6>
    418e:	e841 3000 	strex	r0, r3, [r1]
    4192:	2800      	cmp	r0, #0
    4194:	d1f7      	bne.n	4186 <usbd_work_handler+0x1b6>
    4196:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&ctx->clk_requested, 0, 1)) {
    419a:	f47f af32 	bne.w	4002 <usbd_work_handler+0x32>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    419e:	f841 5c10 	str.w	r5, [r1, #-16]
    41a2:	f841 5c08 	str.w	r5, [r1, #-8]
		return onoff_request(ctx->hfxo_mgr, &ctx->hfxo_cli);
    41a6:	69e0      	ldr	r0, [r4, #28]
    41a8:	6163      	str	r3, [r4, #20]
    41aa:	3914      	subs	r1, #20
    41ac:	f005 fefa 	bl	9fa4 <onoff_request>
    41b0:	e727      	b.n	4002 <usbd_work_handler+0x32>
	switch (pwr_evt->state) {
    41b2:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPIN(ep));
    41b4:	f065 007f 	orn	r0, r5, #127	; 0x7f
    41b8:	b2c0      	uxtb	r0, r0
    41ba:	f7ff fcbb 	bl	3b34 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    41be:	7a03      	ldrb	r3, [r0, #8]
    41c0:	b113      	cbz	r3, 41c8 <usbd_work_handler+0x1f8>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    41c2:	7a40      	ldrb	r0, [r0, #9]
    41c4:	f004 f9c0 	bl	8548 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPIN_CNT; i++) {
    41c8:	3501      	adds	r5, #1
    41ca:	2d08      	cmp	r5, #8
    41cc:	d1f2      	bne.n	41b4 <usbd_work_handler+0x1e4>
		if (ep_ctx->cfg.en) {
    41ce:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    41d2:	b11b      	cbz	r3, 41dc <usbd_work_handler+0x20c>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    41d4:	f894 0155 	ldrb.w	r0, [r4, #341]	; 0x155
    41d8:	f004 f9b6 	bl	8548 <nrfx_usbd_ep_enable>
	switch (pwr_evt->state) {
    41dc:	2500      	movs	r5, #0
	return endpoint_ctx(NRF_USBD_EPOUT(ep));
    41de:	b2e8      	uxtb	r0, r5
    41e0:	f7ff fca8 	bl	3b34 <endpoint_ctx>
		if (ep_ctx->cfg.en) {
    41e4:	7a03      	ldrb	r3, [r0, #8]
    41e6:	b113      	cbz	r3, 41ee <usbd_work_handler+0x21e>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    41e8:	7a40      	ldrb	r0, [r0, #9]
    41ea:	f004 f9ad 	bl	8548 <nrfx_usbd_ep_enable>
	for (i = 0; i < CFG_EPOUT_CNT; i++) {
    41ee:	3501      	adds	r5, #1
    41f0:	2d08      	cmp	r5, #8
    41f2:	d1f4      	bne.n	41de <usbd_work_handler+0x20e>
		if (ep_ctx->cfg.en) {
    41f4:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    41f8:	b11b      	cbz	r3, 4202 <usbd_work_handler+0x232>
			nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    41fa:	f894 0275 	ldrb.w	r0, [r4, #629]	; 0x275
    41fe:	f004 f9a3 	bl	8548 <nrfx_usbd_ep_enable>
		nrfx_usbd_start(true);
    4202:	2001      	movs	r0, #1
    4204:	f003 fd20 	bl	7c48 <nrfx_usbd_start>
		ctx->ready = true;
    4208:	2301      	movs	r3, #1
    420a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
		if (ctx->status_cb) {
    420e:	6823      	ldr	r3, [r4, #0]
    4210:	2b00      	cmp	r3, #0
    4212:	f43f aef6 	beq.w	4002 <usbd_work_handler+0x32>
			ctx->status_cb(USB_DC_CONNECTED, NULL);
    4216:	2100      	movs	r1, #0
    4218:	2002      	movs	r0, #2
				ctx->status_cb(USB_DC_RESET, NULL);
    421a:	4798      	blx	r3
    421c:	e6f1      	b.n	4002 <usbd_work_handler+0x32>
		ctx->ready = false;
    421e:	2500      	movs	r5, #0
    4220:	f884 5025 	strb.w	r5, [r4, #37]	; 0x25
		nrfx_usbd_disable();
    4224:	f004 f91a 	bl	845c <nrfx_usbd_disable>
		err = hfxo_stop(ctx);
    4228:	f7ff fdc8 	bl	3dbc <hfxo_stop.constprop.0.isra.0>
		if (ctx->status_cb) {
    422c:	6823      	ldr	r3, [r4, #0]
    422e:	2b00      	cmp	r3, #0
    4230:	f43f aee7 	beq.w	4002 <usbd_work_handler+0x32>
			ctx->status_cb(USB_DC_DISCONNECTED, NULL);
    4234:	4629      	mov	r1, r5
    4236:	2004      	movs	r0, #4
    4238:	e7ef      	b.n	421a <usbd_work_handler+0x24a>
		if (dev_ready()) {
    423a:	2a00      	cmp	r2, #0
    423c:	f43f aee1 	beq.w	4002 <usbd_work_handler+0x32>
			nrfx_usbd_suspend();
    4240:	f004 f926 	bl	8490 <nrfx_usbd_suspend>
			if (ctx->status_cb) {
    4244:	6823      	ldr	r3, [r4, #0]
    4246:	2b00      	cmp	r3, #0
    4248:	f43f aedb 	beq.w	4002 <usbd_work_handler+0x32>
				ctx->status_cb(USB_DC_SUSPEND, NULL);
    424c:	2100      	movs	r1, #0
    424e:	2005      	movs	r0, #5
    4250:	e7e3      	b.n	421a <usbd_work_handler+0x24a>
		if (ctx->status_cb && dev_ready()) {
    4252:	6823      	ldr	r3, [r4, #0]
    4254:	2b00      	cmp	r3, #0
    4256:	f43f aed4 	beq.w	4002 <usbd_work_handler+0x32>
    425a:	2a00      	cmp	r2, #0
    425c:	f43f aed1 	beq.w	4002 <usbd_work_handler+0x32>
			ctx->status_cb(USB_DC_RESUME, NULL);
    4260:	2100      	movs	r1, #0
    4262:	2006      	movs	r0, #6
    4264:	e7d9      	b.n	421a <usbd_work_handler+0x24a>
			k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4266:	f108 0510 	add.w	r5, r8, #16
    426a:	f04f 33ff 	mov.w	r3, #4294967295
    426e:	f04f 32ff 	mov.w	r2, #4294967295
    4272:	4628      	mov	r0, r5
    4274:	f006 fce6 	bl	ac44 <k_mutex_lock.constprop.0.isra.0>
			eps_ctx_init();
    4278:	f7ff fe76 	bl	3f68 <eps_ctx_init>
			k_mutex_unlock(&ctx->drv_lock);
    427c:	4628      	mov	r0, r5
    427e:	f006 fce3 	bl	ac48 <k_mutex_unlock.isra.0>
			if (ctx->status_cb) {
    4282:	f858 3c28 	ldr.w	r3, [r8, #-40]
    4286:	2b00      	cmp	r3, #0
    4288:	f43f aebb 	beq.w	4002 <usbd_work_handler+0x32>
				ctx->status_cb(USB_DC_RESET, NULL);
    428c:	2100      	movs	r1, #0
    428e:	2001      	movs	r0, #1
    4290:	e7c3      	b.n	421a <usbd_work_handler+0x24a>
    4292:	bf00      	nop
    4294:	200013ac 	.word	0x200013ac
    4298:	20000150 	.word	0x20000150
    429c:	0000caf9 	.word	0x0000caf9
    42a0:	0000be60 	.word	0x0000be60
    42a4:	40027000 	.word	0x40027000
    42a8:	200013b0 	.word	0x200013b0
    42ac:	200013e4 	.word	0x200013e4
    42b0:	0bad0000 	.word	0x0bad0000
    42b4:	0000cb1f 	.word	0x0000cb1f
    42b8:	200013cc 	.word	0x200013cc
	if (ep_ctx->cfg.en) {
    42bc:	f894 3274 	ldrb.w	r3, [r4, #628]	; 0x274
    42c0:	b193      	cbz	r3, 42e8 <usbd_work_handler+0x318>
		ep_ctx->read_pending = true;
    42c2:	2501      	movs	r5, #1
    42c4:	f884 5289 	strb.w	r5, [r4, #649]	; 0x289
		ep_ctx->read_complete = true;
    42c8:	f884 5288 	strb.w	r5, [r4, #648]	; 0x288
		ev = usbd_evt_alloc();
    42cc:	f7ff fca2 	bl	3c14 <usbd_evt_alloc>
		if (!ev) {
    42d0:	b990      	cbnz	r0, 42f8 <usbd_work_handler+0x328>
			LOG_ERR("Failed to alloc evt");
    42d2:	4b23      	ldr	r3, [pc, #140]	; (4360 <usbd_work_handler+0x390>)
    42d4:	617b      	str	r3, [r7, #20]
    42d6:	4823      	ldr	r0, [pc, #140]	; (4364 <usbd_work_handler+0x394>)
    42d8:	2302      	movs	r3, #2
    42da:	f107 0210 	add.w	r2, r7, #16
    42de:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    42e2:	613b      	str	r3, [r7, #16]
    42e4:	f006 fcab 	bl	ac3e <z_log_msg2_static_create.constprop.0>
			if (ctx->status_cb) {
    42e8:	f858 3c28 	ldr.w	r3, [r8, #-40]
    42ec:	2b00      	cmp	r3, #0
    42ee:	f43f ae88 	beq.w	4002 <usbd_work_handler+0x32>
				ctx->status_cb(USB_DC_SOF, NULL);
    42f2:	2100      	movs	r1, #0
    42f4:	200a      	movs	r0, #10
    42f6:	e790      	b.n	421a <usbd_work_handler+0x24a>
		ev->evt.ep_evt.ep = ep_ctx;
    42f8:	4a1b      	ldr	r2, [pc, #108]	; (4368 <usbd_work_handler+0x398>)
		ev->evt_type = USBD_EVT_EP;
    42fa:	7405      	strb	r5, [r0, #16]
		ev->evt.ep_evt.evt_type = EP_EVT_RECV_REQ;
    42fc:	7305      	strb	r5, [r0, #12]
		ev->evt.ep_evt.ep = ep_ctx;
    42fe:	6082      	str	r2, [r0, #8]
		usbd_evt_put(ev);
    4300:	f7ff fc40 	bl	3b84 <usbd_evt_put>
		usbd_work_schedule();
    4304:	f7ff fc44 	bl	3b90 <usbd_work_schedule>
    4308:	e7ee      	b.n	42e8 <usbd_work_handler+0x318>
				LOG_ERR("USBD event queue full!");
    430a:	4b18      	ldr	r3, [pc, #96]	; (436c <usbd_work_handler+0x39c>)
    430c:	4815      	ldr	r0, [pc, #84]	; (4364 <usbd_work_handler+0x394>)
    430e:	617b      	str	r3, [r7, #20]
    4310:	f107 0210 	add.w	r2, r7, #16
    4314:	2302      	movs	r3, #2
    4316:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    431a:	613b      	str	r3, [r7, #16]
    431c:	f006 fc8f 	bl	ac3e <z_log_msg2_static_create.constprop.0>
	nrfx_power_usbevt_disable();
    4320:	f006 ff8a 	bl	b238 <nrfx_power_usbevt_disable>
	nrfx_usbd_disable();
    4324:	f004 f89a 	bl	845c <nrfx_usbd_disable>
	nrfx_usbd_uninit();
    4328:	f003 fc3c 	bl	7ba4 <nrfx_usbd_uninit>
	usbd_evt_flush();
    432c:	f7ff fc64 	bl	3bf8 <usbd_evt_flush>
	ret = eps_ctx_init();
    4330:	f7ff fe1a 	bl	3f68 <eps_ctx_init>
	nrfx_power_usbevt_enable();
    4334:	f006 ff79 	bl	b22a <nrfx_power_usbevt_enable>
	err = nrfx_usbd_init(usbd_event_handler);
    4338:	480d      	ldr	r0, [pc, #52]	; (4370 <usbd_work_handler+0x3a0>)
    433a:	f003 fcad 	bl	7c98 <nrfx_usbd_init>
}
    433e:	e660      	b.n	4002 <usbd_work_handler+0x32>
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    4340:	490c      	ldr	r1, [pc, #48]	; (4374 <usbd_work_handler+0x3a4>)
    4342:	4808      	ldr	r0, [pc, #32]	; (4364 <usbd_work_handler+0x394>)
    4344:	466d      	mov	r5, sp
    4346:	b088      	sub	sp, #32
    4348:	466a      	mov	r2, sp
		switch (ev->evt_type) {
    434a:	e9c2 1305 	strd	r1, r3, [r2, #20]
			LOG_ERR("Unknown USBD event: %"PRId16, ev->evt_type);
    434e:	2303      	movs	r3, #3
    4350:	f842 3f10 	str.w	r3, [r2, #16]!
    4354:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4358:	f006 fc71 	bl	ac3e <z_log_msg2_static_create.constprop.0>
    435c:	46ad      	mov	sp, r5
    435e:	e650      	b.n	4002 <usbd_work_handler+0x32>
    4360:	0000cb45 	.word	0x0000cb45
    4364:	0000be60 	.word	0x0000be60
    4368:	20001618 	.word	0x20001618
    436c:	0000cb59 	.word	0x0000cb59
    4370:	00003e01 	.word	0x00003e01
    4374:	0000cb70 	.word	0x0000cb70

00004378 <usb_dc_set_address>:
	return get_usbd_ctx()->attached;
    4378:	4b07      	ldr	r3, [pc, #28]	; (4398 <usb_dc_set_address+0x20>)
	if (!dev_attached() || !dev_ready()) {
    437a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
    437e:	b13a      	cbz	r2, 4390 <usb_dc_set_address+0x18>
    4380:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	return 0;
    4384:	2b00      	cmp	r3, #0
    4386:	bf0c      	ite	eq
    4388:	f06f 0012 	mvneq.w	r0, #18
    438c:	2000      	movne	r0, #0
    438e:	4770      	bx	lr
		return -ENODEV;
    4390:	f06f 0012 	mvn.w	r0, #18
}
    4394:	4770      	bx	lr
    4396:	bf00      	nop
    4398:	200013ac 	.word	0x200013ac

0000439c <usb_dc_ep_check_cap>:
{
    439c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    439e:	4602      	mov	r2, r0
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    43a0:	7803      	ldrb	r3, [r0, #0]
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    43a2:	7912      	ldrb	r2, [r2, #4]
	uint8_t ep_idx = NRF_USBD_EP_NR_GET(ep_cfg->ep_addr);
    43a4:	f003 000f 	and.w	r0, r3, #15
	if ((ep_cfg->ep_type == USB_DC_EP_CONTROL) && ep_idx) {
    43a8:	b97a      	cbnz	r2, 43ca <usb_dc_ep_check_cap+0x2e>
    43aa:	b158      	cbz	r0, 43c4 <usb_dc_ep_check_cap+0x28>
		LOG_ERR("invalid endpoint configuration");
    43ac:	4b0d      	ldr	r3, [pc, #52]	; (43e4 <usb_dc_ep_check_cap+0x48>)
		LOG_ERR("invalid endpoint index/address");
    43ae:	480e      	ldr	r0, [pc, #56]	; (43e8 <usb_dc_ep_check_cap+0x4c>)
    43b0:	9305      	str	r3, [sp, #20]
    43b2:	aa04      	add	r2, sp, #16
    43b4:	2302      	movs	r3, #2
    43b6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    43ba:	9304      	str	r3, [sp, #16]
    43bc:	f006 fc3f 	bl	ac3e <z_log_msg2_static_create.constprop.0>
		return -1;
    43c0:	f04f 30ff 	mov.w	r0, #4294967295
}
    43c4:	b007      	add	sp, #28
    43c6:	f85d fb04 	ldr.w	pc, [sp], #4
	if (!NRF_USBD_EP_VALIDATE(ep_cfg->ep_addr)) {
    43ca:	2808      	cmp	r0, #8
    43cc:	d901      	bls.n	43d2 <usb_dc_ep_check_cap+0x36>
		LOG_ERR("invalid endpoint index/address");
    43ce:	4b07      	ldr	r3, [pc, #28]	; (43ec <usb_dc_ep_check_cap+0x50>)
    43d0:	e7ed      	b.n	43ae <usb_dc_ep_check_cap+0x12>
	if ((ep_cfg->ep_type == USB_DC_EP_ISOCHRONOUS) &&
    43d2:	2a01      	cmp	r2, #1
    43d4:	bf06      	itte	eq
    43d6:	f083 0008 	eoreq.w	r0, r3, #8
    43da:	f340 00c0 	sbfxeq	r0, r0, #3, #1
	return 0;
    43de:	2000      	movne	r0, #0
    43e0:	e7f0      	b.n	43c4 <usb_dc_ep_check_cap+0x28>
    43e2:	bf00      	nop
    43e4:	0000cb87 	.word	0x0000cb87
    43e8:	0000be60 	.word	0x0000be60
    43ec:	0000cba6 	.word	0x0000cba6

000043f0 <usb_dc_ep_configure>:
{
    43f0:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    43f2:	4b15      	ldr	r3, [pc, #84]	; (4448 <usb_dc_ep_configure+0x58>)
	if (!dev_attached()) {
    43f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
{
    43f8:	b086      	sub	sp, #24
    43fa:	4601      	mov	r1, r0
	if (!dev_attached()) {
    43fc:	b30b      	cbz	r3, 4442 <usb_dc_ep_configure+0x52>
	ep_ctx = endpoint_ctx(ep_cfg->ep_addr);
    43fe:	7804      	ldrb	r4, [r0, #0]
    4400:	4620      	mov	r0, r4
    4402:	f7ff fb97 	bl	3b34 <endpoint_ctx>
	if (!ep_ctx) {
    4406:	b198      	cbz	r0, 4430 <usb_dc_ep_configure+0x40>
	ep_ctx->cfg.addr = ep_cfg->ep_addr;
    4408:	7244      	strb	r4, [r0, #9]
	ep_ctx->cfg.type = ep_cfg->ep_type;
    440a:	790b      	ldrb	r3, [r1, #4]
    440c:	7283      	strb	r3, [r0, #10]
	ep_ctx->cfg.max_sz = ep_cfg->ep_mps;
    440e:	8849      	ldrh	r1, [r1, #2]
    4410:	6041      	str	r1, [r0, #4]
	if (!NRF_USBD_EPISO_CHECK(ep_cfg->ep_addr)) {
    4412:	0723      	lsls	r3, r4, #28
    4414:	d40f      	bmi.n	4436 <usb_dc_ep_configure+0x46>
		if ((ep_cfg->ep_mps & (ep_cfg->ep_mps - 1)) != 0U) {
    4416:	1e4b      	subs	r3, r1, #1
    4418:	420b      	tst	r3, r1
    441a:	d00c      	beq.n	4436 <usb_dc_ep_configure+0x46>
			LOG_ERR("EP max packet size must be a power of 2");
    441c:	4b0b      	ldr	r3, [pc, #44]	; (444c <usb_dc_ep_configure+0x5c>)
    441e:	9305      	str	r3, [sp, #20]
    4420:	480b      	ldr	r0, [pc, #44]	; (4450 <usb_dc_ep_configure+0x60>)
    4422:	2302      	movs	r3, #2
    4424:	aa04      	add	r2, sp, #16
    4426:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    442a:	9304      	str	r3, [sp, #16]
    442c:	f006 fc07 	bl	ac3e <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    4430:	f06f 0015 	mvn.w	r0, #21
    4434:	e003      	b.n	443e <usb_dc_ep_configure+0x4e>
	nrfx_usbd_ep_max_packet_size_set(ep_addr_to_nrfx(ep_cfg->ep_addr),
    4436:	4620      	mov	r0, r4
    4438:	f006 ff98 	bl	b36c <nrfx_usbd_ep_max_packet_size_set>
	return 0;
    443c:	2000      	movs	r0, #0
}
    443e:	b006      	add	sp, #24
    4440:	bd10      	pop	{r4, pc}
		return -ENODEV;
    4442:	f06f 0012 	mvn.w	r0, #18
    4446:	e7fa      	b.n	443e <usb_dc_ep_configure+0x4e>
    4448:	200013ac 	.word	0x200013ac
    444c:	0000cbc5 	.word	0x0000cbc5
    4450:	0000be60 	.word	0x0000be60

00004454 <usb_dc_ep_set_stall>:
{
    4454:	b510      	push	{r4, lr}
	return get_usbd_ctx()->attached;
    4456:	4b18      	ldr	r3, [pc, #96]	; (44b8 <usb_dc_ep_set_stall+0x64>)
	if (!dev_attached() || !dev_ready()) {
    4458:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    445c:	b086      	sub	sp, #24
    445e:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    4460:	b33a      	cbz	r2, 44b2 <usb_dc_ep_set_stall+0x5e>
    4462:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4466:	b323      	cbz	r3, 44b2 <usb_dc_ep_set_stall+0x5e>
	ep_ctx = endpoint_ctx(ep);
    4468:	f7ff fb64 	bl	3b34 <endpoint_ctx>
	if (!ep_ctx) {
    446c:	4604      	mov	r4, r0
    446e:	b1e8      	cbz	r0, 44ac <usb_dc_ep_set_stall+0x58>
	switch (ep_ctx->cfg.type) {
    4470:	7a83      	ldrb	r3, [r0, #10]
    4472:	2b01      	cmp	r3, #1
    4474:	d010      	beq.n	4498 <usb_dc_ep_set_stall+0x44>
    4476:	d908      	bls.n	448a <usb_dc_ep_set_stall+0x36>
    4478:	3b02      	subs	r3, #2
    447a:	2b01      	cmp	r3, #1
    447c:	d908      	bls.n	4490 <usb_dc_ep_set_stall+0x3c>
	ep_ctx->buf.curr = ep_ctx->buf.data;
    447e:	6963      	ldr	r3, [r4, #20]
    4480:	61a3      	str	r3, [r4, #24]
	ep_ctx->buf.len = 0U;
    4482:	2000      	movs	r0, #0
    4484:	60e0      	str	r0, [r4, #12]
}
    4486:	b006      	add	sp, #24
    4488:	bd10      	pop	{r4, pc}
		nrfx_usbd_setup_stall();
    448a:	f003 fe77 	bl	817c <nrfx_usbd_setup_stall>
		break;
    448e:	e7f6      	b.n	447e <usb_dc_ep_set_stall+0x2a>
		nrfx_usbd_ep_stall(ep_addr_to_nrfx(ep));
    4490:	4608      	mov	r0, r1
    4492:	f003 fde3 	bl	805c <nrfx_usbd_ep_stall>
		break;
    4496:	e7f2      	b.n	447e <usb_dc_ep_set_stall+0x2a>
		LOG_ERR("STALL unsupported on ISO endpoint");
    4498:	4b08      	ldr	r3, [pc, #32]	; (44bc <usb_dc_ep_set_stall+0x68>)
    449a:	9305      	str	r3, [sp, #20]
    449c:	4808      	ldr	r0, [pc, #32]	; (44c0 <usb_dc_ep_set_stall+0x6c>)
    449e:	2302      	movs	r3, #2
    44a0:	aa04      	add	r2, sp, #16
    44a2:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    44a6:	9304      	str	r3, [sp, #16]
    44a8:	f006 fbc9 	bl	ac3e <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    44ac:	f06f 0015 	mvn.w	r0, #21
    44b0:	e7e9      	b.n	4486 <usb_dc_ep_set_stall+0x32>
		return -ENODEV;
    44b2:	f06f 0012 	mvn.w	r0, #18
    44b6:	e7e6      	b.n	4486 <usb_dc_ep_set_stall+0x32>
    44b8:	200013ac 	.word	0x200013ac
    44bc:	0000cbed 	.word	0x0000cbed
    44c0:	0000be60 	.word	0x0000be60

000044c4 <usb_dc_ep_clear_stall>:
{
    44c4:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    44c6:	4b0e      	ldr	r3, [pc, #56]	; (4500 <usb_dc_ep_clear_stall+0x3c>)
	if (!dev_attached() || !dev_ready()) {
    44c8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    44cc:	4605      	mov	r5, r0
	if (!dev_attached() || !dev_ready()) {
    44ce:	b182      	cbz	r2, 44f2 <usb_dc_ep_clear_stall+0x2e>
    44d0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    44d4:	b16b      	cbz	r3, 44f2 <usb_dc_ep_clear_stall+0x2e>
	ep_ctx = endpoint_ctx(ep);
    44d6:	f7ff fb2d 	bl	3b34 <endpoint_ctx>
	if (!ep_ctx) {
    44da:	b168      	cbz	r0, 44f8 <usb_dc_ep_clear_stall+0x34>
	if (NRF_USBD_EPISO_CHECK(ep)) {
    44dc:	f015 0408 	ands.w	r4, r5, #8
    44e0:	d10a      	bne.n	44f8 <usb_dc_ep_clear_stall+0x34>
	nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    44e2:	4628      	mov	r0, r5
    44e4:	f003 fddc 	bl	80a0 <nrfx_usbd_ep_dtoggle_clear>
	nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    44e8:	4628      	mov	r0, r5
    44ea:	f004 f87f 	bl	85ec <nrfx_usbd_ep_stall_clear>
	return 0;
    44ee:	4620      	mov	r0, r4
}
    44f0:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    44f2:	f06f 0012 	mvn.w	r0, #18
    44f6:	e7fb      	b.n	44f0 <usb_dc_ep_clear_stall+0x2c>
		return -EINVAL;
    44f8:	f06f 0015 	mvn.w	r0, #21
    44fc:	e7f8      	b.n	44f0 <usb_dc_ep_clear_stall+0x2c>
    44fe:	bf00      	nop
    4500:	200013ac 	.word	0x200013ac

00004504 <usb_dc_ep_is_stalled>:
{
    4504:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4506:	4b0c      	ldr	r3, [pc, #48]	; (4538 <usb_dc_ep_is_stalled+0x34>)
	if (!dev_attached() || !dev_ready()) {
    4508:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    450c:	4605      	mov	r5, r0
    450e:	460c      	mov	r4, r1
	if (!dev_attached() || !dev_ready()) {
    4510:	b162      	cbz	r2, 452c <usb_dc_ep_is_stalled+0x28>
    4512:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    4516:	b14b      	cbz	r3, 452c <usb_dc_ep_is_stalled+0x28>
	ep_ctx = endpoint_ctx(ep);
    4518:	f7ff fb0c 	bl	3b34 <endpoint_ctx>
	if (!ep_ctx) {
    451c:	b148      	cbz	r0, 4532 <usb_dc_ep_is_stalled+0x2e>
	if (!stalled) {
    451e:	b141      	cbz	r1, 4532 <usb_dc_ep_is_stalled+0x2e>
	*stalled = (uint8_t) nrfx_usbd_ep_stall_check(ep_addr_to_nrfx(ep));
    4520:	4628      	mov	r0, r5
    4522:	f003 fda3 	bl	806c <nrfx_usbd_ep_stall_check>
    4526:	7020      	strb	r0, [r4, #0]
	return 0;
    4528:	2000      	movs	r0, #0
}
    452a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    452c:	f06f 0012 	mvn.w	r0, #18
    4530:	e7fb      	b.n	452a <usb_dc_ep_is_stalled+0x26>
		return -EINVAL;
    4532:	f06f 0015 	mvn.w	r0, #21
    4536:	e7f8      	b.n	452a <usb_dc_ep_is_stalled+0x26>
    4538:	200013ac 	.word	0x200013ac

0000453c <usb_dc_ep_enable>:
{
    453c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return get_usbd_ctx()->attached;
    453e:	4f13      	ldr	r7, [pc, #76]	; (458c <usb_dc_ep_enable+0x50>)
	if (!dev_attached()) {
    4540:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
{
    4544:	4604      	mov	r4, r0
	if (!dev_attached()) {
    4546:	b1bb      	cbz	r3, 4578 <usb_dc_ep_enable+0x3c>
	ep_ctx = endpoint_ctx(ep);
    4548:	f7ff faf4 	bl	3b34 <endpoint_ctx>
	if (!ep_ctx) {
    454c:	4605      	mov	r5, r0
    454e:	b1b0      	cbz	r0, 457e <usb_dc_ep_enable+0x42>
	if (!NRF_USBD_EPISO_CHECK(ep)) {
    4550:	0723      	lsls	r3, r4, #28
    4552:	d405      	bmi.n	4560 <usb_dc_ep_enable+0x24>
		nrfx_usbd_ep_dtoggle_clear(ep_addr_to_nrfx(ep));
    4554:	4620      	mov	r0, r4
    4556:	f003 fda3 	bl	80a0 <nrfx_usbd_ep_dtoggle_clear>
		nrfx_usbd_ep_stall_clear(ep_addr_to_nrfx(ep));
    455a:	4620      	mov	r0, r4
    455c:	f004 f846 	bl	85ec <nrfx_usbd_ep_stall_clear>
	if (ep_ctx->cfg.en) {
    4560:	7a2e      	ldrb	r6, [r5, #8]
    4562:	b97e      	cbnz	r6, 4584 <usb_dc_ep_enable+0x48>
	if (dev_ready()) {
    4564:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
	ep_ctx->cfg.en = true;
    4568:	2301      	movs	r3, #1
    456a:	722b      	strb	r3, [r5, #8]
	if (dev_ready()) {
    456c:	b118      	cbz	r0, 4576 <usb_dc_ep_enable+0x3a>
		nrfx_usbd_ep_enable(ep_addr_to_nrfx(ep));
    456e:	4620      	mov	r0, r4
    4570:	f003 ffea 	bl	8548 <nrfx_usbd_ep_enable>
	return 0;
    4574:	4630      	mov	r0, r6
}
    4576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENODEV;
    4578:	f06f 0012 	mvn.w	r0, #18
    457c:	e7fb      	b.n	4576 <usb_dc_ep_enable+0x3a>
		return -EINVAL;
    457e:	f06f 0015 	mvn.w	r0, #21
    4582:	e7f8      	b.n	4576 <usb_dc_ep_enable+0x3a>
		return -EALREADY;
    4584:	f06f 0077 	mvn.w	r0, #119	; 0x77
    4588:	e7f5      	b.n	4576 <usb_dc_ep_enable+0x3a>
    458a:	bf00      	nop
    458c:	200013ac 	.word	0x200013ac

00004590 <usb_dc_ep_disable>:
{
    4590:	b538      	push	{r3, r4, r5, lr}
	return get_usbd_ctx()->attached;
    4592:	4b11      	ldr	r3, [pc, #68]	; (45d8 <usb_dc_ep_disable+0x48>)
	if (!dev_attached() || !dev_ready()) {
    4594:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
{
    4598:	4601      	mov	r1, r0
	if (!dev_attached() || !dev_ready()) {
    459a:	b19a      	cbz	r2, 45c4 <usb_dc_ep_disable+0x34>
    459c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
    45a0:	b183      	cbz	r3, 45c4 <usb_dc_ep_disable+0x34>
	ep_ctx = endpoint_ctx(ep);
    45a2:	f7ff fac7 	bl	3b34 <endpoint_ctx>
	if (!ep_ctx) {
    45a6:	4605      	mov	r5, r0
    45a8:	b178      	cbz	r0, 45ca <usb_dc_ep_disable+0x3a>
	if (!ep_ctx->cfg.en) {
    45aa:	7a03      	ldrb	r3, [r0, #8]
    45ac:	b183      	cbz	r3, 45d0 <usb_dc_ep_disable+0x40>
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    45ae:	4608      	mov	r0, r1
	ep_ctx->write_in_progress = false;
    45b0:	2400      	movs	r4, #0
	nrfx_usbd_ep_disable(ep_addr_to_nrfx(ep));
    45b2:	f003 ff9d 	bl	84f0 <nrfx_usbd_ep_disable>
	ep_ctx_reset(ep_ctx);
    45b6:	4628      	mov	r0, r5
	ep_ctx->write_in_progress = false;
    45b8:	77ac      	strb	r4, [r5, #30]
	ep_ctx_reset(ep_ctx);
    45ba:	f006 fb2d 	bl	ac18 <ep_ctx_reset>
	ep_ctx->cfg.en = false;
    45be:	722c      	strb	r4, [r5, #8]
	return 0;
    45c0:	4620      	mov	r0, r4
}
    45c2:	bd38      	pop	{r3, r4, r5, pc}
		return -ENODEV;
    45c4:	f06f 0012 	mvn.w	r0, #18
    45c8:	e7fb      	b.n	45c2 <usb_dc_ep_disable+0x32>
		return -EINVAL;
    45ca:	f06f 0015 	mvn.w	r0, #21
    45ce:	e7f8      	b.n	45c2 <usb_dc_ep_disable+0x32>
		return -EALREADY;
    45d0:	f06f 0077 	mvn.w	r0, #119	; 0x77
    45d4:	e7f5      	b.n	45c2 <usb_dc_ep_disable+0x32>
    45d6:	bf00      	nop
    45d8:	200013ac 	.word	0x200013ac

000045dc <usb_dc_ep_write>:
{
    45dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return get_usbd_ctx()->attached;
    45e0:	f8df 911c 	ldr.w	r9, [pc, #284]	; 4700 <usb_dc_ep_write+0x124>
{
    45e4:	b084      	sub	sp, #16
    45e6:	461c      	mov	r4, r3
	if (!dev_attached() || !dev_ready()) {
    45e8:	f899 3024 	ldrb.w	r3, [r9, #36]	; 0x24
{
    45ec:	af00      	add	r7, sp, #0
    45ee:	4680      	mov	r8, r0
    45f0:	468a      	mov	sl, r1
    45f2:	4616      	mov	r6, r2
	if (!dev_attached() || !dev_ready()) {
    45f4:	2b00      	cmp	r3, #0
    45f6:	d07f      	beq.n	46f8 <usb_dc_ep_write+0x11c>
    45f8:	f899 3025 	ldrb.w	r3, [r9, #37]	; 0x25
    45fc:	2b00      	cmp	r3, #0
    45fe:	d07b      	beq.n	46f8 <usb_dc_ep_write+0x11c>
	if (NRF_USBD_EPOUT_CHECK(ep)) {
    4600:	f010 0f80 	tst.w	r0, #128	; 0x80
    4604:	d014      	beq.n	4630 <usb_dc_ep_write+0x54>
	ep_ctx = endpoint_ctx(ep);
    4606:	f7ff fa95 	bl	3b34 <endpoint_ctx>
	if (!ep_ctx) {
    460a:	4605      	mov	r5, r0
    460c:	b180      	cbz	r0, 4630 <usb_dc_ep_write+0x54>
	if (!ep_ctx->cfg.en) {
    460e:	7a03      	ldrb	r3, [r0, #8]
    4610:	b98b      	cbnz	r3, 4636 <usb_dc_ep_write+0x5a>
		LOG_ERR("Endpoint 0x%02x is not enabled", ep);
    4612:	4b3c      	ldr	r3, [pc, #240]	; (4704 <usb_dc_ep_write+0x128>)
    4614:	483c      	ldr	r0, [pc, #240]	; (4708 <usb_dc_ep_write+0x12c>)
    4616:	466c      	mov	r4, sp
    4618:	b088      	sub	sp, #32
    461a:	466a      	mov	r2, sp
    461c:	e9c2 3805 	strd	r3, r8, [r2, #20]
    4620:	2303      	movs	r3, #3
    4622:	f842 3f10 	str.w	r3, [r2, #16]!
    4626:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    462a:	f006 fb08 	bl	ac3e <z_log_msg2_static_create.constprop.0>
    462e:	46a5      	mov	sp, r4
		return -EINVAL;
    4630:	f06f 0415 	mvn.w	r4, #21
    4634:	e00f      	b.n	4656 <usb_dc_ep_write+0x7a>
	k_mutex_lock(&ctx->drv_lock, K_FOREVER);
    4636:	f04f 33ff 	mov.w	r3, #4294967295
    463a:	f04f 32ff 	mov.w	r2, #4294967295
    463e:	f109 0038 	add.w	r0, r9, #56	; 0x38
    4642:	f006 faff 	bl	ac44 <k_mutex_lock.constprop.0.isra.0>
	if (ep_ctx->write_in_progress) {
    4646:	7fab      	ldrb	r3, [r5, #30]
    4648:	b153      	cbz	r3, 4660 <usb_dc_ep_write+0x84>
		k_mutex_unlock(&ctx->drv_lock);
    464a:	f109 0038 	add.w	r0, r9, #56	; 0x38
    464e:	f006 fafb 	bl	ac48 <k_mutex_unlock.isra.0>
		return -EAGAIN;
    4652:	f06f 040a 	mvn.w	r4, #10
}
    4656:	4620      	mov	r0, r4
    4658:	3710      	adds	r7, #16
    465a:	46bd      	mov	sp, r7
    465c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!data_len && ep_ctx->trans_zlp) {
    4660:	b916      	cbnz	r6, 4668 <usb_dc_ep_write+0x8c>
    4662:	7feb      	ldrb	r3, [r5, #31]
    4664:	b103      	cbz	r3, 4668 <usb_dc_ep_write+0x8c>
		ep_ctx->trans_zlp = false;
    4666:	77ee      	strb	r6, [r5, #31]
	if (ep_ctx->cfg.type == USB_DC_EP_CONTROL) {
    4668:	7aab      	ldrb	r3, [r5, #10]
    466a:	b9bb      	cbnz	r3, 469c <usb_dc_ep_write+0xc0>
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    466c:	b15e      	cbz	r6, 4686 <usb_dc_ep_write+0xaa>
    466e:	f8b9 300a 	ldrh.w	r3, [r9, #10]
    4672:	429e      	cmp	r6, r3
    4674:	d207      	bcs.n	4686 <usb_dc_ep_write+0xaa>
		    !(data_len % ep_ctx->cfg.max_sz)) {
    4676:	686a      	ldr	r2, [r5, #4]
    4678:	fbb6 f3f2 	udiv	r3, r6, r2
    467c:	fb02 6313 	mls	r3, r2, r3, r6
		if (data_len && usbd_ctx.setup.wLength > data_len &&
    4680:	b90b      	cbnz	r3, 4686 <usb_dc_ep_write+0xaa>
			ep_ctx->trans_zlp = true;
    4682:	2301      	movs	r3, #1
    4684:	77eb      	strb	r3, [r5, #31]
	    && (nrfx_usbd_last_setup_dir_get() != ep)) {
    4686:	f003 fd81 	bl	818c <nrfx_usbd_last_setup_dir_get>
    468a:	4580      	cmp	r8, r0
    468c:	d006      	beq.n	469c <usb_dc_ep_write+0xc0>
		nrfx_usbd_setup_clear();
    468e:	f003 fd6d 	bl	816c <nrfx_usbd_setup_clear>
		k_mutex_unlock(&ctx->drv_lock);
    4692:	481e      	ldr	r0, [pc, #120]	; (470c <usb_dc_ep_write+0x130>)
    4694:	f006 fad8 	bl	ac48 <k_mutex_unlock.isra.0>
		return 0;
    4698:	2400      	movs	r4, #0
    469a:	e7dc      	b.n	4656 <usb_dc_ep_write+0x7a>
	ep_ctx->write_in_progress = true;
    469c:	2301      	movs	r3, #1
    469e:	77ab      	strb	r3, [r5, #30]
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    46a0:	f04f 0900 	mov.w	r9, #0
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    46a4:	1d39      	adds	r1, r7, #4
    46a6:	4640      	mov	r0, r8
	NRFX_USBD_TRANSFER_IN(transfer, data, data_len, 0);
    46a8:	e9c7 a601 	strd	sl, r6, [r7, #4]
    46ac:	f8c7 900c 	str.w	r9, [r7, #12]
	nrfx_err_t err = nrfx_usbd_ep_transfer(ep_addr_to_nrfx(ep), &transfer);
    46b0:	f003 fb38 	bl	7d24 <nrfx_usbd_ep_transfer>
	if (err != NRFX_SUCCESS) {
    46b4:	4b16      	ldr	r3, [pc, #88]	; (4710 <usb_dc_ep_write+0x134>)
    46b6:	4298      	cmp	r0, r3
    46b8:	d019      	beq.n	46ee <usb_dc_ep_write+0x112>
		ep_ctx->write_in_progress = false;
    46ba:	f885 901e 	strb.w	r9, [r5, #30]
		if (ret_bytes) {
    46be:	b10c      	cbz	r4, 46c4 <usb_dc_ep_write+0xe8>
			*ret_bytes = 0;
    46c0:	f8c4 9000 	str.w	r9, [r4]
		LOG_ERR("nRF USBD write error: %d", (uint32_t)err);
    46c4:	466c      	mov	r4, sp
    46c6:	4b13      	ldr	r3, [pc, #76]	; (4714 <usb_dc_ep_write+0x138>)
    46c8:	b088      	sub	sp, #32
    46ca:	466a      	mov	r2, sp
    46cc:	e9c2 3005 	strd	r3, r0, [r2, #20]
    46d0:	2303      	movs	r3, #3
    46d2:	f842 3f10 	str.w	r3, [r2, #16]!
    46d6:	480c      	ldr	r0, [pc, #48]	; (4708 <usb_dc_ep_write+0x12c>)
    46d8:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    46dc:	f006 faaf 	bl	ac3e <z_log_msg2_static_create.constprop.0>
    46e0:	46a5      	mov	sp, r4
		result = -EIO;
    46e2:	f06f 0404 	mvn.w	r4, #4
	k_mutex_unlock(&ctx->drv_lock);
    46e6:	4809      	ldr	r0, [pc, #36]	; (470c <usb_dc_ep_write+0x130>)
    46e8:	f006 faae 	bl	ac48 <k_mutex_unlock.isra.0>
	return result;
    46ec:	e7b3      	b.n	4656 <usb_dc_ep_write+0x7a>
		if (ret_bytes) {
    46ee:	2c00      	cmp	r4, #0
    46f0:	d0f9      	beq.n	46e6 <usb_dc_ep_write+0x10a>
			*ret_bytes = data_len;
    46f2:	6026      	str	r6, [r4, #0]
	int result = 0;
    46f4:	464c      	mov	r4, r9
    46f6:	e7f6      	b.n	46e6 <usb_dc_ep_write+0x10a>
		return -ENODEV;
    46f8:	f06f 0412 	mvn.w	r4, #18
    46fc:	e7ab      	b.n	4656 <usb_dc_ep_write+0x7a>
    46fe:	bf00      	nop
    4700:	200013ac 	.word	0x200013ac
    4704:	0000cc0f 	.word	0x0000cc0f
    4708:	0000be60 	.word	0x0000be60
    470c:	200013e4 	.word	0x200013e4
    4710:	0bad0000 	.word	0x0bad0000
    4714:	0000cc2e 	.word	0x0000cc2e

00004718 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    4718:	4b08      	ldr	r3, [pc, #32]	; (473c <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    471a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    471c:	1ac3      	subs	r3, r0, r3
{
    471e:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4720:	4907      	ldr	r1, [pc, #28]	; (4740 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    4722:	109b      	asrs	r3, r3, #2
{
    4724:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4726:	4359      	muls	r1, r3
    4728:	4806      	ldr	r0, [pc, #24]	; (4744 <onoff_stop+0x2c>)
    472a:	2240      	movs	r2, #64	; 0x40
    472c:	f006 faaa 	bl	ac84 <stop>
	notify(mgr, res);
    4730:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    4732:	4601      	mov	r1, r0
	notify(mgr, res);
    4734:	4620      	mov	r0, r4
}
    4736:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    473a:	4718      	bx	r3
    473c:	2000164c 	.word	0x2000164c
    4740:	b6db6db7 	.word	0xb6db6db7
    4744:	0000bbc8 	.word	0x0000bbc8

00004748 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4748:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    474a:	4c0c      	ldr	r4, [pc, #48]	; (477c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    474c:	4a0c      	ldr	r2, [pc, #48]	; (4780 <onoff_start+0x38>)
    474e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    4750:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4752:	9300      	str	r3, [sp, #0]
{
    4754:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4756:	460b      	mov	r3, r1
    4758:	490a      	ldr	r1, [pc, #40]	; (4784 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    475a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    475c:	4361      	muls	r1, r4
{
    475e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    4760:	4809      	ldr	r0, [pc, #36]	; (4788 <onoff_start+0x40>)
    4762:	f006 fabc 	bl	acde <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    4766:	1e01      	subs	r1, r0, #0
    4768:	da05      	bge.n	4776 <onoff_start+0x2e>
		notify(mgr, err);
    476a:	4630      	mov	r0, r6
    476c:	462b      	mov	r3, r5
	}
}
    476e:	b002      	add	sp, #8
    4770:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    4774:	4718      	bx	r3
}
    4776:	b002      	add	sp, #8
    4778:	bd70      	pop	{r4, r5, r6, pc}
    477a:	bf00      	nop
    477c:	2000164c 	.word	0x2000164c
    4780:	0000ad4d 	.word	0x0000ad4d
    4784:	b6db6db7 	.word	0xb6db6db7
    4788:	0000bbc8 	.word	0x0000bbc8

0000478c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    478c:	2200      	movs	r2, #0
{
    478e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4790:	2101      	movs	r1, #1
{
    4792:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4794:	4610      	mov	r0, r2
    4796:	f7fe fabd 	bl	2d14 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);

	nrfx_err = nrfx_clock_init(clock_event_handler);
    479a:	4811      	ldr	r0, [pc, #68]	; (47e0 <clk_init+0x54>)
    479c:	f002 f958 	bl	6a50 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    47a0:	4b10      	ldr	r3, [pc, #64]	; (47e4 <clk_init+0x58>)
    47a2:	4298      	cmp	r0, r3
    47a4:	d118      	bne.n	47d8 <clk_init+0x4c>
	hfclkaudio_init();

	if (IS_ENABLED(CONFIG_CLOCK_CONTROL_NRF_DRIVER_CALIBRATION)) {
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
    47a6:	6920      	ldr	r0, [r4, #16]
    47a8:	f000 f9dc 	bl	4b64 <z_nrf_clock_calibration_init>
	}

	nrfx_clock_enable();
    47ac:	f002 f962 	bl	6a74 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    47b0:	6926      	ldr	r6, [r4, #16]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    47b2:	490d      	ldr	r1, [pc, #52]	; (47e8 <clk_init+0x5c>)
    47b4:	4630      	mov	r0, r6
    47b6:	f005 fbe2 	bl	9f7e <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    47ba:	2800      	cmp	r0, #0
    47bc:	db0b      	blt.n	47d6 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    47be:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    47c0:	4909      	ldr	r1, [pc, #36]	; (47e8 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    47c2:	2501      	movs	r5, #1
    47c4:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    47c6:	f104 001c 	add.w	r0, r4, #28
    47ca:	f005 fbd8 	bl	9f7e <onoff_manager_init>
		if (err < 0) {
    47ce:	2800      	cmp	r0, #0
    47d0:	db01      	blt.n	47d6 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    47d2:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    47d4:	2000      	movs	r0, #0
}
    47d6:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    47d8:	f06f 0004 	mvn.w	r0, #4
    47dc:	e7fb      	b.n	47d6 <clk_init+0x4a>
    47de:	bf00      	nop
    47e0:	00004821 	.word	0x00004821
    47e4:	0bad0000 	.word	0x0bad0000
    47e8:	0000bfa4 	.word	0x0000bfa4

000047ec <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    47ec:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    47ee:	230c      	movs	r3, #12
    47f0:	4809      	ldr	r0, [pc, #36]	; (4818 <clkstarted_handle.constprop.0+0x2c>)
    47f2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    47f4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    47f6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    47f8:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    47fc:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    47fe:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    4800:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    4802:	4418      	add	r0, r3
    4804:	f006 fa2b 	bl	ac5e <set_on_state>
	if (callback) {
    4808:	b12d      	cbz	r5, 4816 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    480a:	4632      	mov	r2, r6
    480c:	462b      	mov	r3, r5
    480e:	4803      	ldr	r0, [pc, #12]	; (481c <clkstarted_handle.constprop.0+0x30>)
}
    4810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    4814:	4718      	bx	r3
}
    4816:	bd70      	pop	{r4, r5, r6, pc}
    4818:	2000164c 	.word	0x2000164c
    481c:	0000bbc8 	.word	0x0000bbc8

00004820 <clock_event_handler>:
	switch (event) {
    4820:	2801      	cmp	r0, #1
{
    4822:	b510      	push	{r4, lr}
    4824:	4604      	mov	r4, r0
	switch (event) {
    4826:	d00a      	beq.n	483e <clock_event_handler+0x1e>
    4828:	2803      	cmp	r0, #3
    482a:	d00c      	beq.n	4846 <clock_event_handler+0x26>
    482c:	b978      	cbnz	r0, 484e <clock_event_handler+0x2e>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    482e:	4b08      	ldr	r3, [pc, #32]	; (4850 <clock_event_handler+0x30>)
    4830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4832:	075b      	lsls	r3, r3, #29
    4834:	d10b      	bne.n	484e <clock_event_handler+0x2e>
}
    4836:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    483a:	f7ff bfd7 	b.w	47ec <clkstarted_handle.constprop.0>
			z_nrf_clock_calibration_lfclk_started();
    483e:	f000 f99f 	bl	4b80 <z_nrf_clock_calibration_lfclk_started>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4842:	4620      	mov	r0, r4
    4844:	e7f7      	b.n	4836 <clock_event_handler+0x16>
}
    4846:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			z_nrf_clock_calibration_done_handler();
    484a:	f000 b9a7 	b.w	4b9c <z_nrf_clock_calibration_done_handler>
}
    484e:	bd10      	pop	{r4, pc}
    4850:	2000164c 	.word	0x2000164c

00004854 <generic_hfclk_start>:
{
    4854:	b508      	push	{r3, lr}
	__asm__ volatile(
    4856:	f04f 0320 	mov.w	r3, #32
    485a:	f3ef 8111 	mrs	r1, BASEPRI
    485e:	f383 8812 	msr	BASEPRI_MAX, r3
    4862:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4866:	4a12      	ldr	r2, [pc, #72]	; (48b0 <generic_hfclk_start+0x5c>)
    4868:	6813      	ldr	r3, [r2, #0]
    486a:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    486e:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    4872:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4874:	d00c      	beq.n	4890 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4876:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    487a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    487e:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4882:	f013 0301 	ands.w	r3, r3, #1
    4886:	d003      	beq.n	4890 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    4888:	480a      	ldr	r0, [pc, #40]	; (48b4 <generic_hfclk_start+0x60>)
    488a:	f006 f9e8 	bl	ac5e <set_on_state>
			already_started = true;
    488e:	2301      	movs	r3, #1
	__asm__ volatile(
    4890:	f381 8811 	msr	BASEPRI, r1
    4894:	f3bf 8f6f 	isb	sy
	if (already_started) {
    4898:	b123      	cbz	r3, 48a4 <generic_hfclk_start+0x50>
}
    489a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    489e:	2000      	movs	r0, #0
    48a0:	f7ff bfa4 	b.w	47ec <clkstarted_handle.constprop.0>
}
    48a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    48a8:	2001      	movs	r0, #1
    48aa:	f006 bc6a 	b.w	b182 <nrfx_clock_start>
    48ae:	bf00      	nop
    48b0:	2000169c 	.word	0x2000169c
    48b4:	2000168c 	.word	0x2000168c

000048b8 <api_blocking_start>:
{
    48b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    48ba:	2200      	movs	r2, #0
    48bc:	2301      	movs	r3, #1
    48be:	e9cd 2302 	strd	r2, r3, [sp, #8]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    48c2:	4a09      	ldr	r2, [pc, #36]	; (48e8 <api_blocking_start+0x30>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    48c4:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    48c8:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    48ca:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    48ce:	f006 fa36 	bl	ad3e <api_start>
	if (err < 0) {
    48d2:	2800      	cmp	r0, #0
    48d4:	db05      	blt.n	48e2 <api_blocking_start+0x2a>
	return z_impl_k_sem_take(sem, timeout);
    48d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    48da:	2300      	movs	r3, #0
    48dc:	4668      	mov	r0, sp
    48de:	f004 fb0f 	bl	8f00 <z_impl_k_sem_take>
}
    48e2:	b005      	add	sp, #20
    48e4:	f85d fb04 	ldr.w	pc, [sp], #4
    48e8:	0000ad65 	.word	0x0000ad65

000048ec <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    48ec:	4b09      	ldr	r3, [pc, #36]	; (4914 <generic_hfclk_stop+0x28>)
    48ee:	f3bf 8f5b 	dmb	ish
    48f2:	e853 2f00 	ldrex	r2, [r3]
    48f6:	f022 0102 	bic.w	r1, r2, #2
    48fa:	e843 1000 	strex	r0, r1, [r3]
    48fe:	2800      	cmp	r0, #0
    4900:	d1f7      	bne.n	48f2 <generic_hfclk_stop+0x6>
    4902:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    4906:	07d3      	lsls	r3, r2, #31
    4908:	d402      	bmi.n	4910 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    490a:	2001      	movs	r0, #1
    490c:	f006 bc71 	b.w	b1f2 <nrfx_clock_stop>
}
    4910:	4770      	bx	lr
    4912:	bf00      	nop
    4914:	2000169c 	.word	0x2000169c

00004918 <z_nrf_clock_control_get_onoff>:
}
    4918:	4a02      	ldr	r2, [pc, #8]	; (4924 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    491a:	b2c3      	uxtb	r3, r0
}
    491c:	201c      	movs	r0, #28
    491e:	fb03 2000 	mla	r0, r3, r0, r2
    4922:	4770      	bx	lr
    4924:	2000164c 	.word	0x2000164c

00004928 <z_nrf_clock_control_lf_on>:
{
    4928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    492a:	4928      	ldr	r1, [pc, #160]	; (49cc <z_nrf_clock_control_lf_on+0xa4>)
    492c:	f3bf 8f5b 	dmb	ish
    4930:	4606      	mov	r6, r0
    4932:	2201      	movs	r2, #1
    4934:	e851 3f00 	ldrex	r3, [r1]
    4938:	e841 2000 	strex	r0, r2, [r1]
    493c:	2800      	cmp	r0, #0
    493e:	d1f9      	bne.n	4934 <z_nrf_clock_control_lf_on+0xc>
    4940:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4944:	b933      	cbnz	r3, 4954 <z_nrf_clock_control_lf_on+0x2c>
    4946:	4922      	ldr	r1, [pc, #136]	; (49d0 <z_nrf_clock_control_lf_on+0xa8>)
		err = onoff_request(mgr, &cli);
    4948:	4822      	ldr	r0, [pc, #136]	; (49d4 <z_nrf_clock_control_lf_on+0xac>)
    494a:	604b      	str	r3, [r1, #4]
    494c:	60cb      	str	r3, [r1, #12]
    494e:	608a      	str	r2, [r1, #8]
    4950:	f005 fb28 	bl	9fa4 <onoff_request>
	switch (start_mode) {
    4954:	1e73      	subs	r3, r6, #1
    4956:	2b01      	cmp	r3, #1
    4958:	d820      	bhi.n	499c <z_nrf_clock_control_lf_on+0x74>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    495a:	f006 fdc7 	bl	b4ec <k_is_in_isr>
    495e:	4604      	mov	r4, r0
    4960:	b910      	cbnz	r0, 4968 <z_nrf_clock_control_lf_on+0x40>
 */
static inline bool k_is_pre_kernel(void)
{
	extern bool z_sys_post_kernel; /* in init.c */

	return !z_sys_post_kernel;
    4962:	4b1d      	ldr	r3, [pc, #116]	; (49d8 <z_nrf_clock_control_lf_on+0xb0>)
	int key = isr_mode ? irq_lock() : 0;
    4964:	781b      	ldrb	r3, [r3, #0]
    4966:	bb53      	cbnz	r3, 49be <z_nrf_clock_control_lf_on+0x96>
	__asm__ volatile(
    4968:	f04f 0320 	mov.w	r3, #32
    496c:	f3ef 8511 	mrs	r5, BASEPRI
    4970:	f383 8812 	msr	BASEPRI_MAX, r3
    4974:	f3bf 8f6f 	isb	sy
    4978:	2401      	movs	r4, #1
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    497a:	f04f 4780 	mov.w	r7, #1073741824	; 0x40000000
    497e:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4982:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
    4986:	03d2      	lsls	r2, r2, #15
    4988:	d509      	bpl.n	499e <z_nrf_clock_control_lf_on+0x76>
	while (!(nrfx_clock_is_running(d, (void *)&type)
    498a:	079b      	lsls	r3, r3, #30
    498c:	d001      	beq.n	4992 <z_nrf_clock_control_lf_on+0x6a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    498e:	2e01      	cmp	r6, #1
    4990:	d105      	bne.n	499e <z_nrf_clock_control_lf_on+0x76>
	if (isr_mode) {
    4992:	b174      	cbz	r4, 49b2 <z_nrf_clock_control_lf_on+0x8a>
	__asm__ volatile(
    4994:	f385 8811 	msr	BASEPRI, r5
    4998:	f3bf 8f6f 	isb	sy
}
    499c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    499e:	b11c      	cbz	r4, 49a8 <z_nrf_clock_control_lf_on+0x80>
 *
 * @param key Interrupt locking key obtained from irq_lock().
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    49a0:	4628      	mov	r0, r5
    49a2:	f7fe f915 	bl	2bd0 <arch_cpu_atomic_idle>
}
    49a6:	e7ea      	b.n	497e <z_nrf_clock_control_lf_on+0x56>
	return z_impl_k_sleep(timeout);
    49a8:	2100      	movs	r1, #0
    49aa:	2021      	movs	r0, #33	; 0x21
    49ac:	f004 ff16 	bl	97dc <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    49b0:	e7e5      	b.n	497e <z_nrf_clock_control_lf_on+0x56>
    p_reg->INTENSET = mask;
    49b2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    49b6:	2202      	movs	r2, #2
    49b8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    49bc:	e7ee      	b.n	499c <z_nrf_clock_control_lf_on+0x74>
    p_reg->INTENCLR = mask;
    49be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    49c2:	2202      	movs	r2, #2
    49c4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    49c8:	4605      	mov	r5, r0
}
    49ca:	e7d6      	b.n	497a <z_nrf_clock_control_lf_on+0x52>
    49cc:	200016a0 	.word	0x200016a0
    49d0:	2000163c 	.word	0x2000163c
    49d4:	20001668 	.word	0x20001668
    49d8:	20001ecb 	.word	0x20001ecb

000049dc <temp_sensor_init.part.0>:
	total_cnt = 0;
	total_skips_cnt = 0;
}

#if CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP
static int temp_sensor_init(const struct device *arg)
    49dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
{
	temp_sensor = DEVICE_DT_GET_OR_NULL(TEMP_NODE);
	if ((temp_sensor != NULL) && !device_is_ready(temp_sensor)) {
		LOG_ERR("Temperature sensor not ready");
    49de:	4b08      	ldr	r3, [pc, #32]	; (4a00 <temp_sensor_init.part.0+0x24>)
    49e0:	9305      	str	r3, [sp, #20]
    49e2:	2302      	movs	r3, #2
    49e4:	9304      	str	r3, [sp, #16]
    49e6:	4807      	ldr	r0, [pc, #28]	; (4a04 <temp_sensor_init.part.0+0x28>)
    49e8:	2300      	movs	r3, #0
    49ea:	aa04      	add	r2, sp, #16
    49ec:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    49f0:	f006 f80f 	bl	aa12 <z_impl_z_log_msg2_static_create>
		return -ENODEV;
	}

	return 0;
}
    49f4:	f06f 0012 	mvn.w	r0, #18
    49f8:	b007      	add	sp, #28
    49fa:	f85d fb04 	ldr.w	pc, [sp], #4
    49fe:	bf00      	nop
    4a00:	0000cc74 	.word	0x0000cc74
    4a04:	0000bdc8 	.word	0x0000bdc8

00004a08 <start_cal_process>:
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4a08:	4b0d      	ldr	r3, [pc, #52]	; (4a40 <start_cal_process+0x38>)
    4a0a:	f3bf 8f5b 	dmb	ish
    4a0e:	2201      	movs	r2, #1
    4a10:	e853 1f00 	ldrex	r1, [r3]
    4a14:	2900      	cmp	r1, #0
    4a16:	d103      	bne.n	4a20 <start_cal_process+0x18>
    4a18:	e843 2000 	strex	r0, r2, [r3]
    4a1c:	2800      	cmp	r0, #0
    4a1e:	d1f7      	bne.n	4a10 <start_cal_process+0x8>
    4a20:	f3bf 8f5b 	dmb	ish
	if (atomic_cas(&cal_process_in_progress, 0, 1) == false) {
    4a24:	d10a      	bne.n	4a3c <start_cal_process+0x34>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
    4a26:	4907      	ldr	r1, [pc, #28]	; (4a44 <start_cal_process+0x3c>)
    4a28:	2300      	movs	r3, #0
    4a2a:	60cb      	str	r3, [r1, #12]
    4a2c:	4b06      	ldr	r3, [pc, #24]	; (4a48 <start_cal_process+0x40>)
    4a2e:	604b      	str	r3, [r1, #4]
    4a30:	2303      	movs	r3, #3
    4a32:	608b      	str	r3, [r1, #8]
	err = onoff_request(mgr, cli);
    4a34:	4b05      	ldr	r3, [pc, #20]	; (4a4c <start_cal_process+0x44>)
    4a36:	6818      	ldr	r0, [r3, #0]
    4a38:	f005 bab4 	b.w	9fa4 <onoff_request>
}
    4a3c:	4770      	bx	lr
    4a3e:	bf00      	nop
    4a40:	200016a4 	.word	0x200016a4
    4a44:	200016a8 	.word	0x200016a8
    4a48:	00004b39 	.word	0x00004b39
    4a4c:	200016b8 	.word	0x200016b8

00004a50 <temp_sensor_init>:
{
    4a50:	b508      	push	{r3, lr}
	temp_sensor = DEVICE_DT_GET_OR_NULL(TEMP_NODE);
    4a52:	4b06      	ldr	r3, [pc, #24]	; (4a6c <temp_sensor_init+0x1c>)
    4a54:	4806      	ldr	r0, [pc, #24]	; (4a70 <temp_sensor_init+0x20>)
    4a56:	6018      	str	r0, [r3, #0]
    4a58:	f006 fd11 	bl	b47e <z_device_is_ready>
	if ((temp_sensor != NULL) && !device_is_ready(temp_sensor)) {
    4a5c:	b918      	cbnz	r0, 4a66 <temp_sensor_init+0x16>
}
    4a5e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    4a62:	f7ff bfbb 	b.w	49dc <temp_sensor_init.part.0>
    4a66:	2000      	movs	r0, #0
    4a68:	bd08      	pop	{r3, pc}
    4a6a:	bf00      	nop
    4a6c:	200016bc 	.word	0x200016bc
    4a70:	0000bc40 	.word	0x0000bc40

00004a74 <start_cycle>:
{
    4a74:	b507      	push	{r0, r1, r2, lr}
	z_impl_k_timer_start(timer, duration, period);
    4a76:	2200      	movs	r2, #0
    4a78:	2300      	movs	r3, #0
    4a7a:	e9cd 2300 	strd	r2, r3, [sp]
    4a7e:	4808      	ldr	r0, [pc, #32]	; (4aa0 <start_cycle+0x2c>)
    4a80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4a84:	2300      	movs	r3, #0
    4a86:	f005 f8c5 	bl	9c14 <z_impl_k_timer_start>
	clk_release(&mgrs[CLOCK_CONTROL_NRF_TYPE_HFCLK]);
    4a8a:	4b06      	ldr	r3, [pc, #24]	; (4aa4 <start_cycle+0x30>)
	err = onoff_release(mgr);
    4a8c:	6818      	ldr	r0, [r3, #0]
    4a8e:	f005 fad2 	bl	a036 <onoff_release>
	cal_process_in_progress = 0;
    4a92:	4b05      	ldr	r3, [pc, #20]	; (4aa8 <start_cycle+0x34>)
    4a94:	2200      	movs	r2, #0
    4a96:	601a      	str	r2, [r3, #0]
}
    4a98:	b003      	add	sp, #12
    4a9a:	f85d fb04 	ldr.w	pc, [sp], #4
    4a9e:	bf00      	nop
    4aa0:	20000118 	.word	0x20000118
    4aa4:	200016b8 	.word	0x200016b8
    4aa8:	200016a4 	.word	0x200016a4

00004aac <measure_temperature>:
{
    4aac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	int rc = sensor_sample_fetch(temp_sensor);
    4aae:	4d1d      	ldr	r5, [pc, #116]	; (4b24 <measure_temperature+0x78>)
    4ab0:	6828      	ldr	r0, [r5, #0]
    4ab2:	6883      	ldr	r3, [r0, #8]
    4ab4:	4c1c      	ldr	r4, [pc, #112]	; (4b28 <measure_temperature+0x7c>)
    4ab6:	68db      	ldr	r3, [r3, #12]
    4ab8:	2139      	movs	r1, #57	; 0x39
    4aba:	4798      	blx	r3
	if (rc == 0) {
    4abc:	b170      	cbz	r0, 4adc <measure_temperature+0x30>
		calib_skip_cnt = 0;
    4abe:	2300      	movs	r3, #0
    4ac0:	7023      	strb	r3, [r4, #0]
	int16_t diff = 0;
    4ac2:	461a      	mov	r2, r3
	if ((calib_skip_cnt == 0) ||
    4ac4:	7821      	ldrb	r1, [r4, #0]
    4ac6:	b109      	cbz	r1, 4acc <measure_temperature+0x20>
    4ac8:	2a01      	cmp	r2, #1
    4aca:	dd20      	ble.n	4b0e <measure_temperature+0x62>
		prev_temperature = temperature;
    4acc:	4a17      	ldr	r2, [pc, #92]	; (4b2c <measure_temperature+0x80>)
    4ace:	8013      	strh	r3, [r2, #0]
	nrfx_clock_calibration_start();
    4ad0:	f001 ffe2 	bl	6a98 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    4ad4:	2301      	movs	r3, #1
    4ad6:	7023      	strb	r3, [r4, #0]
}
    4ad8:	b003      	add	sp, #12
    4ada:	bd30      	pop	{r4, r5, pc}
		rc = sensor_channel_get(temp_sensor, SENSOR_CHAN_DIE_TEMP,
    4adc:	6828      	ldr	r0, [r5, #0]
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
    4ade:	6883      	ldr	r3, [r0, #8]
    4ae0:	466a      	mov	r2, sp
    4ae2:	691b      	ldr	r3, [r3, #16]
    4ae4:	210c      	movs	r1, #12
    4ae6:	4798      	blx	r3
	if (rc == 0) {
    4ae8:	2800      	cmp	r0, #0
    4aea:	d1e8      	bne.n	4abe <measure_temperature+0x12>
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    4aec:	4a10      	ldr	r2, [pc, #64]	; (4b30 <measure_temperature+0x84>)
    4aee:	9b01      	ldr	r3, [sp, #4]
    4af0:	fb93 f3f2 	sdiv	r3, r3, r2
    4af4:	9a00      	ldr	r2, [sp, #0]
    4af6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
		diff = abs(temperature - prev_temperature);
    4afa:	4a0c      	ldr	r2, [pc, #48]	; (4b2c <measure_temperature+0x80>)
    4afc:	f9b2 2000 	ldrsh.w	r2, [r2]
	return (int16_t)(4 * val->val1 + val->val2 / 250000);
    4b00:	b21b      	sxth	r3, r3
		diff = abs(temperature - prev_temperature);
    4b02:	1a9a      	subs	r2, r3, r2
void srand(unsigned int seed);
#endif /* CONFIG_MINIMAL_LIBC_RAND */

static inline int abs(int __n)
{
	return (__n < 0) ? -__n : __n;
    4b04:	2a00      	cmp	r2, #0
    4b06:	bfb8      	it	lt
    4b08:	4252      	neglt	r2, r2
    4b0a:	b212      	sxth	r2, r2
    4b0c:	e7da      	b.n	4ac4 <measure_temperature+0x18>
		total_skips_cnt++;
    4b0e:	4a09      	ldr	r2, [pc, #36]	; (4b34 <measure_temperature+0x88>)
    4b10:	6813      	ldr	r3, [r2, #0]
		calib_skip_cnt--;
    4b12:	3901      	subs	r1, #1
		total_skips_cnt++;
    4b14:	3301      	adds	r3, #1
		calib_skip_cnt--;
    4b16:	7021      	strb	r1, [r4, #0]
		total_skips_cnt++;
    4b18:	6013      	str	r3, [r2, #0]
}
    4b1a:	b003      	add	sp, #12
    4b1c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
		start_cycle();
    4b20:	f7ff bfa8 	b.w	4a74 <start_cycle>
    4b24:	200016bc 	.word	0x200016bc
    4b28:	20001ab1 	.word	0x20001ab1
    4b2c:	20001a88 	.word	0x20001a88
    4b30:	0003d090 	.word	0x0003d090
    4b34:	200016c4 	.word	0x200016c4

00004b38 <cal_hf_callback>:
{
    4b38:	b508      	push	{r3, lr}
	if ((temp_sensor == NULL) || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    4b3a:	4b07      	ldr	r3, [pc, #28]	; (4b58 <cal_hf_callback+0x20>)
    4b3c:	681b      	ldr	r3, [r3, #0]
    4b3e:	b92b      	cbnz	r3, 4b4c <cal_hf_callback+0x14>
	nrfx_clock_calibration_start();
    4b40:	f001 ffaa 	bl	6a98 <nrfx_clock_calibration_start>
	calib_skip_cnt = CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP;
    4b44:	4b05      	ldr	r3, [pc, #20]	; (4b5c <cal_hf_callback+0x24>)
    4b46:	2201      	movs	r2, #1
    4b48:	701a      	strb	r2, [r3, #0]
}
    4b4a:	bd08      	pop	{r3, pc}
    4b4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		k_work_submit(&temp_measure_work);
    4b50:	4803      	ldr	r0, [pc, #12]	; (4b60 <cal_hf_callback+0x28>)
    4b52:	f004 bafd 	b.w	9150 <k_work_submit>
    4b56:	bf00      	nop
    4b58:	200016bc 	.word	0x200016bc
    4b5c:	20001ab1 	.word	0x20001ab1
    4b60:	20000018 	.word	0x20000018

00004b64 <z_nrf_clock_calibration_init>:
	mgrs = onoff_mgrs;
    4b64:	4b03      	ldr	r3, [pc, #12]	; (4b74 <z_nrf_clock_calibration_init+0x10>)
	total_cnt = 0;
    4b66:	4a04      	ldr	r2, [pc, #16]	; (4b78 <z_nrf_clock_calibration_init+0x14>)
	mgrs = onoff_mgrs;
    4b68:	6018      	str	r0, [r3, #0]
	total_cnt = 0;
    4b6a:	2300      	movs	r3, #0
    4b6c:	6013      	str	r3, [r2, #0]
	total_skips_cnt = 0;
    4b6e:	4a03      	ldr	r2, [pc, #12]	; (4b7c <z_nrf_clock_calibration_init+0x18>)
    4b70:	6013      	str	r3, [r2, #0]
}
    4b72:	4770      	bx	lr
    4b74:	200016b8 	.word	0x200016b8
    4b78:	200016c0 	.word	0x200016c0
    4b7c:	200016c4 	.word	0x200016c4

00004b80 <z_nrf_clock_calibration_lfclk_started>:
SYS_INIT(temp_sensor_init, APPLICATION, 0);
#endif /* CONFIG_CLOCK_CONTROL_NRF_CALIBRATION_MAX_SKIP */

static void start_unconditional_cal_process(void)
{
	calib_skip_cnt = 0;
    4b80:	4b02      	ldr	r3, [pc, #8]	; (4b8c <z_nrf_clock_calibration_lfclk_started+0xc>)
    4b82:	2200      	movs	r2, #0
    4b84:	701a      	strb	r2, [r3, #0]
	start_cal_process();
    4b86:	f7ff bf3f 	b.w	4a08 <start_cal_process>
    4b8a:	bf00      	nop
    4b8c:	20001ab1 	.word	0x20001ab1

00004b90 <z_nrf_clock_calibration_lfclk_stopped>:
	z_impl_k_timer_stop(timer);
    4b90:	4801      	ldr	r0, [pc, #4]	; (4b98 <z_nrf_clock_calibration_lfclk_stopped+0x8>)
    4b92:	f006 bf40 	b.w	ba16 <z_impl_k_timer_stop>
    4b96:	bf00      	nop
    4b98:	20000118 	.word	0x20000118

00004b9c <z_nrf_clock_calibration_done_handler>:
	LOG_DBG("Calibration stopped");
}

void z_nrf_clock_calibration_done_handler(void)
{
	total_cnt++;
    4b9c:	4a02      	ldr	r2, [pc, #8]	; (4ba8 <z_nrf_clock_calibration_done_handler+0xc>)
    4b9e:	6813      	ldr	r3, [r2, #0]
    4ba0:	3301      	adds	r3, #1
    4ba2:	6013      	str	r3, [r2, #0]
	LOG_DBG("Calibration done.");

	start_cycle();
    4ba4:	f7ff bf66 	b.w	4a74 <start_cycle>
    4ba8:	200016c0 	.word	0x200016c0

00004bac <rtt_console_init>:

	return character;
}

static int rtt_console_init(const struct device *d)
{
    4bac:	b510      	push	{r4, lr}
	ARG_UNUSED(d);

	__printk_hook_install(rtt_console_out);
    4bae:	4c04      	ldr	r4, [pc, #16]	; (4bc0 <rtt_console_init+0x14>)
    4bb0:	4620      	mov	r0, r4
    4bb2:	f7fc f883 	bl	cbc <__printk_hook_install>
	__stdout_hook_install(rtt_console_out);
    4bb6:	4620      	mov	r0, r4
    4bb8:	f7fe fdf2 	bl	37a0 <__stdout_hook_install>

	return 0;
}
    4bbc:	2000      	movs	r0, #0
    4bbe:	bd10      	pop	{r4, pc}
    4bc0:	00004bc5 	.word	0x00004bc5

00004bc4 <rtt_console_out>:
{
    4bc4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return z_impl_k_mutex_lock(mutex, timeout);
    4bc8:	f8df 805c 	ldr.w	r8, [pc, #92]	; 4c28 <rtt_console_out+0x64>
    4bcc:	4e17      	ldr	r6, [pc, #92]	; (4c2c <rtt_console_out+0x68>)
	char c = (char)character;
    4bce:	f88d 0007 	strb.w	r0, [sp, #7]
{
    4bd2:	4604      	mov	r4, r0
	char c = (char)character;
    4bd4:	2503      	movs	r5, #3
    4bd6:	f04f 33ff 	mov.w	r3, #4294967295
    4bda:	f04f 32ff 	mov.w	r2, #4294967295
    4bde:	4640      	mov	r0, r8
    4be0:	f004 f880 	bl	8ce4 <z_impl_k_mutex_lock>
		cnt = SEGGER_RTT_WriteNoLock(0, &c, 1);
    4be4:	2201      	movs	r2, #1
    4be6:	f10d 0107 	add.w	r1, sp, #7
    4bea:	2000      	movs	r0, #0
    4bec:	f003 fd8a 	bl	8704 <SEGGER_RTT_WriteNoLock>
    4bf0:	4607      	mov	r7, r0
	return z_impl_k_mutex_unlock(mutex);
    4bf2:	4640      	mov	r0, r8
    4bf4:	f004 f8ee 	bl	8dd4 <z_impl_k_mutex_unlock>
		if (cnt) {
    4bf8:	b12f      	cbz	r7, 4c06 <rtt_console_out+0x42>
			host_present = true;
    4bfa:	2301      	movs	r3, #1
    4bfc:	7033      	strb	r3, [r6, #0]
}
    4bfe:	4620      	mov	r0, r4
    4c00:	b002      	add	sp, #8
    4c02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		} else if (host_present) {
    4c06:	7833      	ldrb	r3, [r6, #0]
    4c08:	2b00      	cmp	r3, #0
    4c0a:	d0f8      	beq.n	4bfe <rtt_console_out+0x3a>
			if (max_cnt) {
    4c0c:	3d01      	subs	r5, #1
    4c0e:	d008      	beq.n	4c22 <rtt_console_out+0x5e>
	if (!IS_ENABLED(CONFIG_MULTITHREADING) || k_is_in_isr()) {
    4c10:	f006 fc6c 	bl	b4ec <k_is_in_isr>
    4c14:	2800      	cmp	r0, #0
    4c16:	d1de      	bne.n	4bd6 <rtt_console_out+0x12>
	return z_impl_k_sleep(timeout);
    4c18:	2100      	movs	r1, #0
    4c1a:	2042      	movs	r0, #66	; 0x42
    4c1c:	f004 fdde 	bl	97dc <z_impl_k_sleep>
    4c20:	e7d9      	b.n	4bd6 <rtt_console_out+0x12>
				host_present = false;
    4c22:	7035      	strb	r5, [r6, #0]
    4c24:	e7eb      	b.n	4bfe <rtt_console_out+0x3a>
    4c26:	bf00      	nop
    4c28:	2000016c 	.word	0x2000016c
    4c2c:	20001ab2 	.word	0x20001ab2

00004c30 <gpio_nrfx_pin_interrupt_configure>:

static int gpio_nrfx_pin_interrupt_configure(const struct device *port,
					     gpio_pin_t pin,
					     enum gpio_int_mode mode,
					     enum gpio_int_trig trig)
{
    4c30:	b530      	push	{r4, r5, lr}
	return port->config;
    4c32:	6840      	ldr	r0, [r0, #4]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4c34:	7b04      	ldrb	r4, [r0, #12]
    4c36:	f001 051f 	and.w	r5, r1, #31
	nrfx_err_t err;

	if (mode == GPIO_INT_MODE_DISABLED) {
    4c3a:	f5b2 1f00 	cmp.w	r2, #2097152	; 0x200000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    4c3e:	ea45 1544 	orr.w	r5, r5, r4, lsl #5
{
    4c42:	b085      	sub	sp, #20
    4c44:	f04f 0400 	mov.w	r4, #0
	if (mode == GPIO_INT_MODE_DISABLED) {
    4c48:	d104      	bne.n	4c54 <gpio_nrfx_pin_interrupt_configure+0x24>
		nrfx_gpiote_trigger_disable(abs_pin);
    4c4a:	4628      	mov	r0, r5
    4c4c:	f002 f9bc 	bl	6fc8 <nrfx_gpiote_trigger_disable>
		return -EIO;
	}

	nrfx_gpiote_trigger_enable(abs_pin, true);

	return 0;
    4c50:	2000      	movs	r0, #0
    4c52:	e02e      	b.n	4cb2 <gpio_nrfx_pin_interrupt_configure+0x82>
	if (mode == GPIO_INT_MODE_LEVEL) {
    4c54:	f5b2 0f80 	cmp.w	r2, #4194304	; 0x400000
	nrfx_gpiote_trigger_config_t trigger_config = {
    4c58:	e9cd 4402 	strd	r4, r4, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    4c5c:	d12b      	bne.n	4cb6 <gpio_nrfx_pin_interrupt_configure+0x86>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    4c5e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    4c62:	bf0c      	ite	eq
    4c64:	2304      	moveq	r3, #4
    4c66:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    4c68:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    4c6c:	6883      	ldr	r3, [r0, #8]
    4c6e:	fa23 f101 	lsr.w	r1, r3, r1
    4c72:	07c9      	lsls	r1, r1, #31
    4c74:	d42b      	bmi.n	4cce <gpio_nrfx_pin_interrupt_configure+0x9e>
    4c76:	f1b2 7fa0 	cmp.w	r2, #20971520	; 0x1400000
    4c7a:	d128      	bne.n	4cce <gpio_nrfx_pin_interrupt_configure+0x9e>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    4c7c:	f005 031f 	and.w	r3, r5, #31
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    4c80:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    4c84:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    4c88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    4c8c:	07db      	lsls	r3, r3, #31
    4c8e:	d41e      	bmi.n	4cce <gpio_nrfx_pin_interrupt_configure+0x9e>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    4c90:	f10d 0407 	add.w	r4, sp, #7
    4c94:	4621      	mov	r1, r4
    4c96:	4628      	mov	r0, r5
    4c98:	f002 f8fe 	bl	6e98 <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    4c9c:	4b14      	ldr	r3, [pc, #80]	; (4cf0 <gpio_nrfx_pin_interrupt_configure+0xc0>)
    4c9e:	4298      	cmp	r0, r3
    4ca0:	d114      	bne.n	4ccc <gpio_nrfx_pin_interrupt_configure+0x9c>
			err = nrfx_gpiote_channel_alloc(&ch);
    4ca2:	4620      	mov	r0, r4
    4ca4:	f002 f946 	bl	6f34 <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    4ca8:	4b12      	ldr	r3, [pc, #72]	; (4cf4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    4caa:	4298      	cmp	r0, r3
    4cac:	d00e      	beq.n	4ccc <gpio_nrfx_pin_interrupt_configure+0x9c>
				return -ENOMEM;
    4cae:	f06f 000b 	mvn.w	r0, #11
}
    4cb2:	b005      	add	sp, #20
    4cb4:	bd30      	pop	{r4, r5, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    4cb6:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
    4cba:	d005      	beq.n	4cc8 <gpio_nrfx_pin_interrupt_configure+0x98>
    4cbc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
    4cc0:	bf0c      	ite	eq
    4cc2:	2302      	moveq	r3, #2
    4cc4:	2301      	movne	r3, #1
    4cc6:	e7cf      	b.n	4c68 <gpio_nrfx_pin_interrupt_configure+0x38>
    4cc8:	2303      	movs	r3, #3
    4cca:	e7cd      	b.n	4c68 <gpio_nrfx_pin_interrupt_configure+0x38>
		trigger_config.p_in_channel = &ch;
    4ccc:	9403      	str	r4, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4cce:	2300      	movs	r3, #0
    4cd0:	4619      	mov	r1, r3
    4cd2:	aa02      	add	r2, sp, #8
    4cd4:	4628      	mov	r0, r5
    4cd6:	f001 ffb7 	bl	6c48 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4cda:	4b06      	ldr	r3, [pc, #24]	; (4cf4 <gpio_nrfx_pin_interrupt_configure+0xc4>)
    4cdc:	4298      	cmp	r0, r3
    4cde:	d104      	bne.n	4cea <gpio_nrfx_pin_interrupt_configure+0xba>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    4ce0:	2101      	movs	r1, #1
    4ce2:	4628      	mov	r0, r5
    4ce4:	f002 f92c 	bl	6f40 <nrfx_gpiote_trigger_enable>
    4ce8:	e7b2      	b.n	4c50 <gpio_nrfx_pin_interrupt_configure+0x20>
		return -EIO;
    4cea:	f06f 0004 	mvn.w	r0, #4
    4cee:	e7e0      	b.n	4cb2 <gpio_nrfx_pin_interrupt_configure+0x82>
    4cf0:	0bad0004 	.word	0x0bad0004
    4cf4:	0bad0000 	.word	0x0bad0000

00004cf8 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    4cf8:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    4cfa:	f002 f90b 	bl	6f14 <nrfx_gpiote_is_init>
    4cfe:	4604      	mov	r4, r0
    4d00:	b968      	cbnz	r0, 4d1e <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    4d02:	f002 f8df 	bl	6ec4 <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    4d06:	4b08      	ldr	r3, [pc, #32]	; (4d28 <gpio_nrfx_init+0x30>)
    4d08:	4298      	cmp	r0, r3
    4d0a:	d10a      	bne.n	4d22 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    4d0c:	4807      	ldr	r0, [pc, #28]	; (4d2c <gpio_nrfx_init+0x34>)
    4d0e:	4621      	mov	r1, r4
    4d10:	f002 f8bc 	bl	6e8c <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    4d14:	4622      	mov	r2, r4
    4d16:	2105      	movs	r1, #5
    4d18:	2006      	movs	r0, #6
    4d1a:	f7fd fffb 	bl	2d14 <z_arm_irq_priority_set>
		return 0;
    4d1e:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    4d20:	bd10      	pop	{r4, pc}
		return -EIO;
    4d22:	f06f 0004 	mvn.w	r0, #4
    4d26:	e7fb      	b.n	4d20 <gpio_nrfx_init+0x28>
    4d28:	0bad0000 	.word	0x0bad0000
    4d2c:	00004d31 	.word	0x00004d31

00004d30 <nrfx_gpio_handler>:
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4d30:	0943      	lsrs	r3, r0, #5
{
    4d32:	b570      	push	{r4, r5, r6, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    4d34:	d110      	bne.n	4d58 <nrfx_gpio_handler+0x28>
	return list->head;
    4d36:	4b09      	ldr	r3, [pc, #36]	; (4d5c <nrfx_gpio_handler+0x2c>)
    4d38:	6859      	ldr	r1, [r3, #4]
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4d3a:	b169      	cbz	r1, 4d58 <nrfx_gpio_handler+0x28>
	gpio_fire_callbacks(list, port, BIT(pin));
    4d3c:	2501      	movs	r5, #1
	return node->next;
    4d3e:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
    4d40:	4e07      	ldr	r6, [pc, #28]	; (4d60 <nrfx_gpio_handler+0x30>)
    4d42:	4085      	lsls	r5, r0
		if (cb->pin_mask & pins) {
    4d44:	688a      	ldr	r2, [r1, #8]
    4d46:	402a      	ands	r2, r5
    4d48:	d002      	beq.n	4d50 <nrfx_gpio_handler+0x20>
			cb->handler(port, cb, cb->pin_mask & pins);
    4d4a:	684b      	ldr	r3, [r1, #4]
    4d4c:	4630      	mov	r0, r6
    4d4e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    4d50:	b114      	cbz	r4, 4d58 <nrfx_gpio_handler+0x28>
    4d52:	4621      	mov	r1, r4
    4d54:	6824      	ldr	r4, [r4, #0]
    4d56:	e7f5      	b.n	4d44 <nrfx_gpio_handler+0x14>
}
    4d58:	bd70      	pop	{r4, r5, r6, pc}
    4d5a:	bf00      	nop
    4d5c:	200016c8 	.word	0x200016c8
    4d60:	0000bbe0 	.word	0x0000bbe0

00004d64 <gpio_nrfx_pin_configure>:
{
    4d64:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	return port->config;
    4d68:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4d6a:	7b3b      	ldrb	r3, [r7, #12]
    4d6c:	f001 051f 	and.w	r5, r1, #31
{
    4d70:	b085      	sub	sp, #20
    4d72:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    4d74:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    4d78:	4614      	mov	r4, r2
    4d7a:	b9ca      	cbnz	r2, 4db0 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    4d7c:	a902      	add	r1, sp, #8
    4d7e:	4628      	mov	r0, r5
    4d80:	f002 f88a 	bl	6e98 <nrfx_gpiote_channel_get>
    4d84:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    4d86:	4628      	mov	r0, r5
    4d88:	f002 f946 	bl	7018 <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    4d8c:	4b4a      	ldr	r3, [pc, #296]	; (4eb8 <gpio_nrfx_pin_configure+0x154>)
    4d8e:	4298      	cmp	r0, r3
    4d90:	d004      	beq.n	4d9c <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    4d92:	f06f 0004 	mvn.w	r0, #4
}
    4d96:	b005      	add	sp, #20
    4d98:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    4d9c:	4284      	cmp	r4, r0
    4d9e:	d105      	bne.n	4dac <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    4da0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    4da4:	f002 f8c0 	bl	6f28 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    4da8:	42a0      	cmp	r0, r4
    4daa:	d1f2      	bne.n	4d92 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4dac:	2000      	movs	r0, #0
    4dae:	e7f2      	b.n	4d96 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    4db0:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    4db4:	f10d 0103 	add.w	r1, sp, #3
    4db8:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    4dba:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    4dbe:	f002 f86b 	bl	6e98 <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4dc2:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    4dc4:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    4dc6:	aa02      	add	r2, sp, #8
    4dc8:	4649      	mov	r1, r9
    4dca:	4628      	mov	r0, r5
    4dcc:	f001 ff3c 	bl	6c48 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    4dd0:	4b39      	ldr	r3, [pc, #228]	; (4eb8 <gpio_nrfx_pin_configure+0x154>)
    4dd2:	4298      	cmp	r0, r3
    4dd4:	d002      	beq.n	4ddc <gpio_nrfx_pin_configure+0x78>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    4dd6:	f06f 0015 	mvn.w	r0, #21
    4dda:	e7dc      	b.n	4d96 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    4ddc:	4580      	cmp	r8, r0
    4dde:	d103      	bne.n	4de8 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    4de0:	f89d 0003 	ldrb.w	r0, [sp, #3]
    4de4:	f002 f8a0 	bl	6f28 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    4de8:	03a3      	lsls	r3, r4, #14
    4dea:	d551      	bpl.n	4e90 <gpio_nrfx_pin_configure+0x12c>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    4dec:	f240 6306 	movw	r3, #1542	; 0x606
    4df0:	4023      	ands	r3, r4
    4df2:	f240 2206 	movw	r2, #518	; 0x206
    4df6:	4293      	cmp	r3, r2
    4df8:	d03b      	beq.n	4e72 <gpio_nrfx_pin_configure+0x10e>
    4dfa:	d80c      	bhi.n	4e16 <gpio_nrfx_pin_configure+0xb2>
    4dfc:	2b06      	cmp	r3, #6
    4dfe:	d015      	beq.n	4e2c <gpio_nrfx_pin_configure+0xc8>
    4e00:	d804      	bhi.n	4e0c <gpio_nrfx_pin_configure+0xa8>
    4e02:	b19b      	cbz	r3, 4e2c <gpio_nrfx_pin_configure+0xc8>
    4e04:	2b02      	cmp	r3, #2
    4e06:	d1e6      	bne.n	4dd6 <gpio_nrfx_pin_configure+0x72>
    4e08:	2304      	movs	r3, #4
    4e0a:	e00f      	b.n	4e2c <gpio_nrfx_pin_configure+0xc8>
    4e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    4e10:	d1e1      	bne.n	4dd6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    4e12:	2301      	movs	r3, #1
    4e14:	e00a      	b.n	4e2c <gpio_nrfx_pin_configure+0xc8>
	switch (flags & (NRF_GPIO_DS_LOW_MASK | NRF_GPIO_DS_HIGH_MASK |
    4e16:	f240 4202 	movw	r2, #1026	; 0x402
    4e1a:	4293      	cmp	r3, r2
    4e1c:	d02b      	beq.n	4e76 <gpio_nrfx_pin_configure+0x112>
    4e1e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
    4e22:	d02a      	beq.n	4e7a <gpio_nrfx_pin_configure+0x116>
    4e24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
    4e28:	d1d5      	bne.n	4dd6 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    4e2a:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    4e2c:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    4e30:	f484 3380 	eor.w	r3, r4, #65536	; 0x10000
    4e34:	f3c3 4300 	ubfx	r3, r3, #16, #1
	if (flags & GPIO_PULL_UP) {
    4e38:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    4e3a:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    4e3e:	bf54      	ite	pl
    4e40:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    4e44:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4e46:	0321      	lsls	r1, r4, #12
		nrfx_gpiote_output_config_t output_config = {
    4e48:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    4e4c:	d517      	bpl.n	4e7e <gpio_nrfx_pin_configure+0x11a>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    4e4e:	687b      	ldr	r3, [r7, #4]
    4e50:	2101      	movs	r1, #1
    4e52:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    4e56:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    4e5a:	2200      	movs	r2, #0
    4e5c:	a901      	add	r1, sp, #4
    4e5e:	4628      	mov	r0, r5
    4e60:	f001 ff9c 	bl	6d9c <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4e64:	4b14      	ldr	r3, [pc, #80]	; (4eb8 <gpio_nrfx_pin_configure+0x154>)
    4e66:	4298      	cmp	r0, r3
    4e68:	bf14      	ite	ne
    4e6a:	f06f 0015 	mvnne.w	r0, #21
    4e6e:	2000      	moveq	r0, #0
    4e70:	e791      	b.n	4d96 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    4e72:	2307      	movs	r3, #7
    4e74:	e7da      	b.n	4e2c <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_D0H1;
    4e76:	2305      	movs	r3, #5
    4e78:	e7d8      	b.n	4e2c <gpio_nrfx_pin_configure+0xc8>
		*drive = NRF_GPIO_PIN_H0H1;
    4e7a:	2303      	movs	r3, #3
    4e7c:	e7d6      	b.n	4e2c <gpio_nrfx_pin_configure+0xc8>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    4e7e:	0362      	lsls	r2, r4, #13
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    4e80:	bf41      	itttt	mi
    4e82:	687b      	ldrmi	r3, [r7, #4]
    4e84:	2101      	movmi	r1, #1
    4e86:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    4e8a:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    4e8e:	e7e4      	b.n	4e5a <gpio_nrfx_pin_configure+0xf6>
	if (flags & GPIO_PULL_UP) {
    4e90:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4e92:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    4e96:	bf54      	ite	pl
    4e98:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    4e9c:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4e9e:	461a      	mov	r2, r3
    4ea0:	a901      	add	r1, sp, #4
    4ea2:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    4ea4:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    4ea8:	f001 fece 	bl	6c48 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    4eac:	4b02      	ldr	r3, [pc, #8]	; (4eb8 <gpio_nrfx_pin_configure+0x154>)
    4eae:	4298      	cmp	r0, r3
    4eb0:	f43f af7c 	beq.w	4dac <gpio_nrfx_pin_configure+0x48>
    4eb4:	e78f      	b.n	4dd6 <gpio_nrfx_pin_configure+0x72>
    4eb6:	bf00      	nop
    4eb8:	0bad0000 	.word	0x0bad0000

00004ebc <qdec_nrfx_channel_get>:
	const int32_t steps = DT_INST_PROP(0, steps);

	ARG_UNUSED(dev);
	LOG_DBG("");

	if (chan != SENSOR_CHAN_ROTATION) {
    4ebc:	2922      	cmp	r1, #34	; 0x22
{
    4ebe:	b510      	push	{r4, lr}
	if (chan != SENSOR_CHAN_ROTATION) {
    4ec0:	d115      	bne.n	4eee <qdec_nrfx_channel_get+0x32>
	__asm__ volatile(
    4ec2:	f04f 0320 	mov.w	r3, #32
    4ec6:	f3ef 8011 	mrs	r0, BASEPRI
    4eca:	f383 8812 	msr	BASEPRI_MAX, r3
    4ece:	f3bf 8f6f 	isb	sy
		return -ENOTSUP;
	}

	key = irq_lock();
	acc = data->acc;
    4ed2:	4908      	ldr	r1, [pc, #32]	; (4ef4 <qdec_nrfx_channel_get+0x38>)
	data->acc = 0;
    4ed4:	2400      	movs	r4, #0
	acc = data->acc;
    4ed6:	680b      	ldr	r3, [r1, #0]
	data->acc = 0;
    4ed8:	600c      	str	r4, [r1, #0]
	__asm__ volatile(
    4eda:	f380 8811 	msr	BASEPRI, r0
    4ede:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BUILD_ASSERT(steps > 0, "only positive number valid");
	BUILD_ASSERT(steps <= 2048, "overflow possible");

	val->val1 = (acc * FULL_ANGLE) / steps;
    4ee2:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
    4ee6:	6013      	str	r3, [r2, #0]
	val->val2 = (acc * FULL_ANGLE) - (val->val1 * steps);
    4ee8:	4620      	mov	r0, r4
    4eea:	6054      	str	r4, [r2, #4]
		val->val2 *= 1000000;
		val->val2 /= steps;
	}

	return 0;
}
    4eec:	bd10      	pop	{r4, pc}
		return -ENOTSUP;
    4eee:	f06f 0085 	mvn.w	r0, #133	; 0x85
    4ef2:	e7fb      	b.n	4eec <qdec_nrfx_channel_get+0x30>
    4ef4:	200016d4 	.word	0x200016d4

00004ef8 <qdec_nrfx_trigger_set>:
	unsigned int key;

	ARG_UNUSED(dev);
	LOG_DBG("");

	if (trig->type != SENSOR_TRIG_DATA_READY) {
    4ef8:	880b      	ldrh	r3, [r1, #0]
    4efa:	2b01      	cmp	r3, #1
    4efc:	d114      	bne.n	4f28 <qdec_nrfx_trigger_set+0x30>
		return -ENOTSUP;
	}

	if ((trig->chan != SENSOR_CHAN_ALL) &&
    4efe:	884b      	ldrh	r3, [r1, #2]
    4f00:	2b39      	cmp	r3, #57	; 0x39
    4f02:	d001      	beq.n	4f08 <qdec_nrfx_trigger_set+0x10>
    4f04:	2b22      	cmp	r3, #34	; 0x22
    4f06:	d10f      	bne.n	4f28 <qdec_nrfx_trigger_set+0x30>
	__asm__ volatile(
    4f08:	f04f 0120 	mov.w	r1, #32
    4f0c:	f3ef 8311 	mrs	r3, BASEPRI
    4f10:	f381 8812 	msr	BASEPRI_MAX, r1
    4f14:	f3bf 8f6f 	isb	sy
	    (trig->chan != SENSOR_CHAN_ROTATION)) {
		return -ENOTSUP;
	}

	key = irq_lock();
	data->data_ready_handler = handler;
    4f18:	4905      	ldr	r1, [pc, #20]	; (4f30 <qdec_nrfx_trigger_set+0x38>)
    4f1a:	604a      	str	r2, [r1, #4]
	__asm__ volatile(
    4f1c:	f383 8811 	msr	BASEPRI, r3
    4f20:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	return 0;
    4f24:	2000      	movs	r0, #0
    4f26:	4770      	bx	lr
		return -ENOTSUP;
    4f28:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    4f2c:	4770      	bx	lr
    4f2e:	bf00      	nop
    4f30:	200016d4 	.word	0x200016d4

00004f34 <accumulate.constprop.0>:
static void accumulate(struct qdec_nrfx_data *data, int16_t acc)
    4f34:	b510      	push	{r4, lr}
	__asm__ volatile(
    4f36:	f04f 0320 	mov.w	r3, #32
    4f3a:	f3ef 8111 	mrs	r1, BASEPRI
    4f3e:	f383 8812 	msr	BASEPRI_MAX, r3
    4f42:	f3bf 8f6f 	isb	sy
	bool overflow = ((acc > 0) && (ACC_MAX - acc < data->acc)) ||
    4f46:	2800      	cmp	r0, #0
    4f48:	4b0b      	ldr	r3, [pc, #44]	; (4f78 <accumulate.constprop.0+0x44>)
    4f4a:	dd0a      	ble.n	4f62 <accumulate.constprop.0+0x2e>
    4f4c:	681c      	ldr	r4, [r3, #0]
    4f4e:	f5c0 02b6 	rsb	r2, r0, #5963776	; 0x5b0000
    4f52:	f502 62b6 	add.w	r2, r2, #1456	; 0x5b0
    4f56:	42a2      	cmp	r2, r4
    4f58:	db09      	blt.n	4f6e <accumulate.constprop.0+0x3a>
		data->acc += acc;
    4f5a:	681a      	ldr	r2, [r3, #0]
    4f5c:	4410      	add	r0, r2
    4f5e:	6018      	str	r0, [r3, #0]
    4f60:	e005      	b.n	4f6e <accumulate.constprop.0+0x3a>
	bool overflow = ((acc > 0) && (ACC_MAX - acc < data->acc)) ||
    4f62:	d0fa      	beq.n	4f5a <accumulate.constprop.0+0x26>
			((acc < 0) && (ACC_MIN - acc > data->acc));
    4f64:	4a05      	ldr	r2, [pc, #20]	; (4f7c <accumulate.constprop.0+0x48>)
    4f66:	681c      	ldr	r4, [r3, #0]
    4f68:	1a12      	subs	r2, r2, r0
    4f6a:	42a2      	cmp	r2, r4
    4f6c:	ddf5      	ble.n	4f5a <accumulate.constprop.0+0x26>
	__asm__ volatile(
    4f6e:	f381 8811 	msr	BASEPRI, r1
    4f72:	f3bf 8f6f 	isb	sy
}
    4f76:	bd10      	pop	{r4, pc}
    4f78:	200016d4 	.word	0x200016d4
    4f7c:	ffa4fa50 	.word	0xffa4fa50

00004f80 <qdec_nrfx_event_handler>:

static void qdec_nrfx_event_handler(nrfx_qdec_event_t event)
{
    4f80:	b590      	push	{r4, r7, lr}
    4f82:	b085      	sub	sp, #20
    4f84:	af00      	add	r7, sp, #0
    4f86:	e9c7 0100 	strd	r0, r1, [r7]
    4f8a:	883b      	ldrh	r3, [r7, #0]
	sensor_trigger_handler_t handler;
	unsigned int key;

	switch (event.type) {
    4f8c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
    4f90:	d11d      	bne.n	4fce <qdec_nrfx_event_handler+0x4e>
	case NRF_QDEC_EVENT_REPORTRDY:
		accumulate(&qdec_nrfx_data, event.data.report.acc);
    4f92:	f9b7 0002 	ldrsh.w	r0, [r7, #2]
    4f96:	f7ff ffcd 	bl	4f34 <accumulate.constprop.0>
	__asm__ volatile(
    4f9a:	f04f 0320 	mov.w	r3, #32
    4f9e:	f3ef 8211 	mrs	r2, BASEPRI
    4fa2:	f383 8812 	msr	BASEPRI_MAX, r3
    4fa6:	f3bf 8f6f 	isb	sy

		key = irq_lock();
		handler = qdec_nrfx_data.data_ready_handler;
    4faa:	4b11      	ldr	r3, [pc, #68]	; (4ff0 <qdec_nrfx_event_handler+0x70>)
    4fac:	685b      	ldr	r3, [r3, #4]
	__asm__ volatile(
    4fae:	f382 8811 	msr	BASEPRI, r2
    4fb2:	f3bf 8f6f 	isb	sy
		irq_unlock(key);

		if (handler) {
    4fb6:	b13b      	cbz	r3, 4fc8 <qdec_nrfx_event_handler+0x48>
			struct sensor_trigger trig = {
    4fb8:	2201      	movs	r2, #1
    4fba:	81ba      	strh	r2, [r7, #12]
    4fbc:	2222      	movs	r2, #34	; 0x22
				.type = SENSOR_TRIG_DATA_READY,
				.chan = SENSOR_CHAN_ROTATION,
			};

			handler(DEVICE_DT_INST_GET(0), &trig);
    4fbe:	480d      	ldr	r0, [pc, #52]	; (4ff4 <qdec_nrfx_event_handler+0x74>)
			struct sensor_trigger trig = {
    4fc0:	81fa      	strh	r2, [r7, #14]
			handler(DEVICE_DT_INST_GET(0), &trig);
    4fc2:	f107 010c 	add.w	r1, r7, #12
    4fc6:	4798      	blx	r3

	default:
		LOG_ERR("unhandled event (0x%x)", event.type);
		break;
	}
}
    4fc8:	3714      	adds	r7, #20
    4fca:	46bd      	mov	sp, r7
    4fcc:	bd90      	pop	{r4, r7, pc}
		LOG_ERR("unhandled event (0x%x)", event.type);
    4fce:	490a      	ldr	r1, [pc, #40]	; (4ff8 <qdec_nrfx_event_handler+0x78>)
    4fd0:	466c      	mov	r4, sp
    4fd2:	b088      	sub	sp, #32
    4fd4:	466a      	mov	r2, sp
	switch (event.type) {
    4fd6:	e9c2 1305 	strd	r1, r3, [r2, #20]
		LOG_ERR("unhandled event (0x%x)", event.type);
    4fda:	2303      	movs	r3, #3
    4fdc:	f842 3f10 	str.w	r3, [r2, #16]!
    4fe0:	4806      	ldr	r0, [pc, #24]	; (4ffc <qdec_nrfx_event_handler+0x7c>)
    4fe2:	2300      	movs	r3, #0
    4fe4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    4fe8:	f005 fd13 	bl	aa12 <z_impl_z_log_msg2_static_create>
    4fec:	46a5      	mov	sp, r4
}
    4fee:	e7eb      	b.n	4fc8 <qdec_nrfx_event_handler+0x48>
    4ff0:	200016d4 	.word	0x200016d4
    4ff4:	0000bc28 	.word	0x0000bc28
    4ff8:	0000cc98 	.word	0x0000cc98
    4ffc:	0000be20 	.word	0x0000be20

00005000 <qdec_nrfx_init.part.0>:
#endif
}

NRF_DT_CHECK_PIN_ASSIGNMENTS(DT_DRV_INST(0), 1, a_pin, b_pin, led_pin);

static int qdec_nrfx_init(const struct device *dev)
    5000:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (ret < 0) {
		return ret;
	}
#endif

	nerr = nrfx_qdec_init(&config, qdec_nrfx_event_handler);
    5002:	491a      	ldr	r1, [pc, #104]	; (506c <qdec_nrfx_init.part.0+0x6c>)
    5004:	481a      	ldr	r0, [pc, #104]	; (5070 <qdec_nrfx_init.part.0+0x70>)
    5006:	f002 f9af 	bl	7368 <nrfx_qdec_init>
	if (nerr == NRFX_ERROR_INVALID_STATE) {
    500a:	4b1a      	ldr	r3, [pc, #104]	; (5074 <qdec_nrfx_init.part.0+0x74>)
    500c:	4298      	cmp	r0, r3
    500e:	d10f      	bne.n	5030 <qdec_nrfx_init.part.0+0x30>
		LOG_ERR("qdec already in use");
    5010:	4b19      	ldr	r3, [pc, #100]	; (5078 <qdec_nrfx_init.part.0+0x78>)
    5012:	9305      	str	r3, [sp, #20]
    5014:	2302      	movs	r3, #2
    5016:	9304      	str	r3, [sp, #16]
    5018:	4818      	ldr	r0, [pc, #96]	; (507c <qdec_nrfx_init.part.0+0x7c>)
    501a:	2300      	movs	r3, #0
    501c:	aa04      	add	r2, sp, #16
    501e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5022:	f005 fcf6 	bl	aa12 <z_impl_z_log_msg2_static_create>
		return -EBUSY;
    5026:	f06f 000f 	mvn.w	r0, #15

	qdec_nrfx_gpio_ctrl(true);
	nrfx_qdec_enable();

	return 0;
}
    502a:	b007      	add	sp, #28
    502c:	f85d fb04 	ldr.w	pc, [sp], #4
	} else if (nerr != NRFX_SUCCESS) {
    5030:	4b13      	ldr	r3, [pc, #76]	; (5080 <qdec_nrfx_init.part.0+0x80>)
    5032:	4298      	cmp	r0, r3
    5034:	d00d      	beq.n	5052 <qdec_nrfx_init.part.0+0x52>
		LOG_ERR("failed to initialize qdec");
    5036:	4b13      	ldr	r3, [pc, #76]	; (5084 <qdec_nrfx_init.part.0+0x84>)
    5038:	9305      	str	r3, [sp, #20]
    503a:	2302      	movs	r3, #2
    503c:	9304      	str	r3, [sp, #16]
    503e:	480f      	ldr	r0, [pc, #60]	; (507c <qdec_nrfx_init.part.0+0x7c>)
    5040:	2300      	movs	r3, #0
    5042:	aa04      	add	r2, sp, #16
    5044:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5048:	f005 fce3 	bl	aa12 <z_impl_z_log_msg2_static_create>
		return -EFAULT;
    504c:	f06f 000d 	mvn.w	r0, #13
    5050:	e7eb      	b.n	502a <qdec_nrfx_init.part.0+0x2a>
    p_reg->OUTCLR = clr_mask;
    5052:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    5056:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    505a:	f8c3 250c 	str.w	r2, [r3, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = cnf;
    505e:	2203      	movs	r2, #3
    5060:	f8c3 2778 	str.w	r2, [r3, #1912]	; 0x778
	nrfx_qdec_enable();
    5064:	f002 f9ec 	bl	7440 <nrfx_qdec_enable>
	return 0;
    5068:	2000      	movs	r0, #0
    506a:	e7de      	b.n	502a <qdec_nrfx_init.part.0+0x2a>
    506c:	00004f81 	.word	0x00004f81
    5070:	0000c000 	.word	0x0000c000
    5074:	0bad0005 	.word	0x0bad0005
    5078:	0000ccaf 	.word	0x0000ccaf
    507c:	0000be20 	.word	0x0000be20
    5080:	0bad0000 	.word	0x0bad0000
    5084:	0000ccc3 	.word	0x0000ccc3

00005088 <qdec_nrfx_init>:
{
    5088:	b507      	push	{r0, r1, r2, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    508a:	2200      	movs	r2, #0
    508c:	2101      	movs	r1, #1
    508e:	2012      	movs	r0, #18
    5090:	f7fd fe40 	bl	2d14 <z_arm_irq_priority_set>
				      uint8_t id)
{
	int ret;
	const struct pinctrl_state *state;

	ret = pinctrl_lookup_state(config, id, &state);
    5094:	480b      	ldr	r0, [pc, #44]	; (50c4 <qdec_nrfx_init+0x3c>)
    5096:	aa01      	add	r2, sp, #4
    5098:	2100      	movs	r1, #0
    509a:	f005 ff5b 	bl	af54 <pinctrl_lookup_state>
	if (ret < 0) {
    509e:	2800      	cmp	r0, #0
    50a0:	db0c      	blt.n	50bc <qdec_nrfx_init+0x34>
		return ret;
	}

	return pinctrl_apply_state_direct(config, state);
    50a2:	9b01      	ldr	r3, [sp, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    50a4:	4a08      	ldr	r2, [pc, #32]	; (50c8 <qdec_nrfx_init+0x40>)
    50a6:	7919      	ldrb	r1, [r3, #4]
    50a8:	6818      	ldr	r0, [r3, #0]
    50aa:	f005 ff88 	bl	afbe <pinctrl_configure_pins>
	if (ret < 0) {
    50ae:	2800      	cmp	r0, #0
    50b0:	db04      	blt.n	50bc <qdec_nrfx_init+0x34>
}
    50b2:	b003      	add	sp, #12
    50b4:	f85d eb04 	ldr.w	lr, [sp], #4
    50b8:	f7ff bfa2 	b.w	5000 <qdec_nrfx_init.part.0>
    50bc:	b003      	add	sp, #12
    50be:	f85d fb04 	ldr.w	pc, [sp], #4
    50c2:	bf00      	nop
    50c4:	0000bfe4 	.word	0x0000bfe4
    50c8:	40012000 	.word	0x40012000

000050cc <hfclk_on_callback>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)task);
}

NRF_STATIC_INLINE void nrf_temp_task_trigger(NRF_TEMP_Type * p_reg, nrf_temp_task_t task)
{
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    50cc:	4b01      	ldr	r3, [pc, #4]	; (50d4 <hfclk_on_callback+0x8>)
    50ce:	2201      	movs	r2, #1
    50d0:	601a      	str	r2, [r3, #0]
			      struct onoff_client *cli,
			      uint32_t state,
			      int res)
{
	nrf_temp_task_trigger(NRF_TEMP, NRF_TEMP_TASK_START);
}
    50d2:	4770      	bx	lr
    50d4:	4000c000 	.word	0x4000c000

000050d8 <temp_nrf5_channel_get>:
{
	struct temp_nrf5_data *data = dev->data;
	int32_t uval;


	if (chan != SENSOR_CHAN_DIE_TEMP) {
    50d8:	290c      	cmp	r1, #12
	struct temp_nrf5_data *data = dev->data;
    50da:	6903      	ldr	r3, [r0, #16]
	if (chan != SENSOR_CHAN_DIE_TEMP) {
    50dc:	d10b      	bne.n	50f6 <temp_nrf5_channel_get+0x1e>
		return -ENOTSUP;
	}

	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    50de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    50e0:	4906      	ldr	r1, [pc, #24]	; (50fc <temp_nrf5_channel_get+0x24>)
	val->val1 = uval / 1000000;
    50e2:	4807      	ldr	r0, [pc, #28]	; (5100 <temp_nrf5_channel_get+0x28>)
	uval = data->sample * TEMP_NRF5_TEMP_SCALE;
    50e4:	434b      	muls	r3, r1
	val->val1 = uval / 1000000;
    50e6:	fb93 f1f0 	sdiv	r1, r3, r0
	val->val2 = uval % 1000000;
    50ea:	fb00 3311 	mls	r3, r0, r1, r3
	val->val1 = uval / 1000000;
    50ee:	6011      	str	r1, [r2, #0]
	val->val2 = uval % 1000000;
    50f0:	6053      	str	r3, [r2, #4]

	LOG_DBG("Temperature:%d,%d", val->val1, val->val2);

	return 0;
    50f2:	2000      	movs	r0, #0
    50f4:	4770      	bx	lr
		return -ENOTSUP;
    50f6:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    50fa:	4770      	bx	lr
    50fc:	0003d090 	.word	0x0003d090
    5100:	000f4240 	.word	0x000f4240

00005104 <temp_nrf5_isr>:
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_temp_event_clear(NRF_TEMP_Type * p_reg, nrf_temp_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5104:	4b04      	ldr	r3, [pc, #16]	; (5118 <temp_nrf5_isr+0x14>)

static void temp_nrf5_isr(void *arg)
{
	const struct device *dev = (const struct device *)arg;
	struct temp_nrf5_data *data = dev->data;
    5106:	6900      	ldr	r0, [r0, #16]
    5108:	2200      	movs	r2, #0
    510a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    510e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	z_impl_k_sem_give(sem);
    5112:	f003 bed5 	b.w	8ec0 <z_impl_k_sem_give>
    5116:	bf00      	nop
    5118:	4000c000 	.word	0x4000c000

0000511c <temp_nrf5_sample_fetch>:
{
    511c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct temp_nrf5_data *data = dev->data;
    511e:	6905      	ldr	r5, [r0, #16]
	if (data->clk_mgr == NULL) {
    5120:	6aab      	ldr	r3, [r5, #40]	; 0x28
    5122:	b363      	cbz	r3, 517e <temp_nrf5_sample_fetch+0x62>
	if (chan != SENSOR_CHAN_ALL && chan != SENSOR_CHAN_DIE_TEMP) {
    5124:	2939      	cmp	r1, #57	; 0x39
    5126:	d001      	beq.n	512c <temp_nrf5_sample_fetch+0x10>
    5128:	290c      	cmp	r1, #12
    512a:	d12b      	bne.n	5184 <temp_nrf5_sample_fetch+0x68>
	k_mutex_lock(&data->mutex, K_FOREVER);
    512c:	f105 0610 	add.w	r6, r5, #16
	return z_impl_k_mutex_lock(mutex, timeout);
    5130:	f04f 32ff 	mov.w	r2, #4294967295
    5134:	f04f 33ff 	mov.w	r3, #4294967295
    5138:	4630      	mov	r0, r6
    513a:	f003 fdd3 	bl	8ce4 <z_impl_k_mutex_lock>
    513e:	4b13      	ldr	r3, [pc, #76]	; (518c <temp_nrf5_sample_fetch+0x70>)
    5140:	9301      	str	r3, [sp, #4]
	r = onoff_request(data->clk_mgr, &cli);
    5142:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5144:	2303      	movs	r3, #3
    5146:	2400      	movs	r4, #0
    5148:	4669      	mov	r1, sp
    514a:	9403      	str	r4, [sp, #12]
    514c:	9302      	str	r3, [sp, #8]
    514e:	f004 ff29 	bl	9fa4 <onoff_request>
	return z_impl_k_sem_take(sem, timeout);
    5152:	f04f 32ff 	mov.w	r2, #4294967295
    5156:	f04f 33ff 	mov.w	r3, #4294967295
    515a:	4628      	mov	r0, r5
    515c:	f003 fed0 	bl	8f00 <z_impl_k_sem_take>
	r = onoff_release(data->clk_mgr);
    5160:	6aa8      	ldr	r0, [r5, #40]	; 0x28
    5162:	f004 ff68 	bl	a036 <onoff_release>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event));
}

NRF_STATIC_INLINE int32_t nrf_temp_result_get(NRF_TEMP_Type const * p_reg)
{
    int32_t raw_measurement = p_reg->TEMP;
    5166:	4b0a      	ldr	r3, [pc, #40]	; (5190 <temp_nrf5_sample_fetch+0x74>)
    5168:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
	data->sample = nrf_temp_result_get(NRF_TEMP);
    516c:	626a      	str	r2, [r5, #36]	; 0x24
    *(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task) = 1;
    516e:	2201      	movs	r2, #1
    5170:	605a      	str	r2, [r3, #4]
	return z_impl_k_mutex_unlock(mutex);
    5172:	4630      	mov	r0, r6
    5174:	f003 fe2e 	bl	8dd4 <z_impl_k_mutex_unlock>
	return 0;
    5178:	4620      	mov	r0, r4
}
    517a:	b004      	add	sp, #16
    517c:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
    517e:	f06f 000a 	mvn.w	r0, #10
    5182:	e7fa      	b.n	517a <temp_nrf5_sample_fetch+0x5e>
		return -ENOTSUP;
    5184:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5188:	e7f7      	b.n	517a <temp_nrf5_sample_fetch+0x5e>
    518a:	bf00      	nop
    518c:	000050cd 	.word	0x000050cd
    5190:	4000c000 	.word	0x4000c000

00005194 <temp_nrf5_init>:
	.sample_fetch = temp_nrf5_sample_fetch,
	.channel_get = temp_nrf5_channel_get,
};

static int temp_nrf5_init(const struct device *dev)
{
    5194:	b510      	push	{r4, lr}
	struct temp_nrf5_data *data = dev->data;
    5196:	6904      	ldr	r4, [r0, #16]

	LOG_DBG("");

	/* A null clk_mgr indicates sensor has not been initialized */
	data->clk_mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_HF);
    5198:	2000      	movs	r0, #0
    519a:	f7ff fbbd 	bl	4918 <z_nrf_clock_control_get_onoff>
	data->clk_mgr =
    519e:	62a0      	str	r0, [r4, #40]	; 0x28
	return z_impl_k_sem_init(sem, initial_count, limit);
    51a0:	f04f 32ff 	mov.w	r2, #4294967295
    51a4:	2100      	movs	r1, #0
    51a6:	4620      	mov	r0, r4
    51a8:	f006 fa3a 	bl	b620 <z_impl_k_sem_init>
	return z_impl_k_mutex_init(mutex);
    51ac:	f104 0010 	add.w	r0, r4, #16
    51b0:	f006 f9b8 	bl	b524 <z_impl_k_mutex_init>
	__ASSERT_NO_MSG(data->clk_mgr);

	k_sem_init(&data->device_sync_sem, 0, K_SEM_MAX_LIMIT);
	k_mutex_init(&data->mutex);

	IRQ_CONNECT(
    51b4:	2200      	movs	r2, #0
    51b6:	2101      	movs	r1, #1
    51b8:	200c      	movs	r0, #12
    51ba:	f7fd fdab 	bl	2d14 <z_arm_irq_priority_set>
		DT_INST_IRQN(0),
		DT_INST_IRQ(0, priority),
		temp_nrf5_isr,
		DEVICE_DT_INST_GET(0),
		0);
	irq_enable(DT_INST_IRQN(0));
    51be:	200c      	movs	r0, #12
    51c0:	f7fd fd76 	bl	2cb0 <arch_irq_enable>
    p_reg->INTENSET = mask;
    51c4:	4b02      	ldr	r3, [pc, #8]	; (51d0 <temp_nrf5_init+0x3c>)
    51c6:	2201      	movs	r2, #1
    51c8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

	nrf_temp_int_enable(NRF_TEMP, NRF_TEMP_INT_DATARDY_MASK);

	return 0;
}
    51cc:	2000      	movs	r0, #0
    51ce:	bd10      	pop	{r4, pc}
    51d0:	4000c000 	.word	0x4000c000

000051d4 <spi_0_init>:
		      &spi_##idx##z_config,				       \
		      POST_KERNEL, CONFIG_SPI_INIT_PRIORITY,		       \
		      &spi_nrfx_driver_api)

#ifdef CONFIG_SPI_0_NRF_SPIM
SPI_NRFX_SPIM_DEVICE(0);
    51d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    51d8:	b083      	sub	sp, #12
    51da:	4604      	mov	r4, r0
    51dc:	af00      	add	r7, sp, #0
    51de:	6905      	ldr	r5, [r0, #16]
    51e0:	2200      	movs	r2, #0
    51e2:	2101      	movs	r1, #1
    51e4:	2003      	movs	r0, #3
    51e6:	f7fd fd95 	bl	2d14 <z_arm_irq_priority_set>
    51ea:	6863      	ldr	r3, [r4, #4]
    51ec:	6a5c      	ldr	r4, [r3, #36]	; 0x24
	ret = pinctrl_lookup_state(config, id, &state);
    51ee:	1d3a      	adds	r2, r7, #4
    51f0:	2100      	movs	r1, #0
    51f2:	4620      	mov	r0, r4
    51f4:	f005 feae 	bl	af54 <pinctrl_lookup_state>
	if (ret < 0) {
    51f8:	2800      	cmp	r0, #0
    51fa:	db30      	blt.n	525e <spi_0_init+0x8a>
	return pinctrl_apply_state_direct(config, state);
    51fc:	687b      	ldr	r3, [r7, #4]
	return pinctrl_configure_pins(state->pins, state->pin_cnt, reg);
    51fe:	6822      	ldr	r2, [r4, #0]
    5200:	7919      	ldrb	r1, [r3, #4]
    5202:	6818      	ldr	r0, [r3, #0]
    5204:	f005 fedb 	bl	afbe <pinctrl_configure_pins>
    5208:	2800      	cmp	r0, #0
    520a:	db28      	blt.n	525e <spi_0_init+0x8a>
static inline int spi_context_cs_configure_all(struct spi_context *ctx)
{
	int ret;
	const struct gpio_dt_spec *cs_gpio;

	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    520c:	68ac      	ldr	r4, [r5, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    520e:	2601      	movs	r6, #1
    5210:	e9d5 3202 	ldrd	r3, r2, [r5, #8]
    5214:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    5218:	429c      	cmp	r4, r3
    521a:	d304      	bcc.n	5226 <spi_0_init+0x52>
    521c:	4628      	mov	r0, r5
    521e:	f005 fe5e 	bl	aede <spi_context_unlock_unconditionally>
    5222:	2000      	movs	r0, #0
    5224:	e01b      	b.n	525e <spi_0_init+0x8a>
		if (!device_is_ready(cs_gpio->port)) {
    5226:	6820      	ldr	r0, [r4, #0]
    5228:	f006 f929 	bl	b47e <z_device_is_ready>
    522c:	b9d8      	cbnz	r0, 5266 <spi_0_init+0x92>
			LOG_ERR("CS GPIO port %s pin %d is not ready",
    522e:	6823      	ldr	r3, [r4, #0]
    5230:	481e      	ldr	r0, [pc, #120]	; (52ac <spi_0_init+0xd8>)
    5232:	6819      	ldr	r1, [r3, #0]
    5234:	7923      	ldrb	r3, [r4, #4]
    5236:	466c      	mov	r4, sp
    5238:	b08a      	sub	sp, #40	; 0x28
    523a:	466a      	mov	r2, sp
    523c:	e9c2 0105 	strd	r0, r1, [r2, #20]
    5240:	61d3      	str	r3, [r2, #28]
    5242:	2302      	movs	r3, #2
    5244:	f882 3020 	strb.w	r3, [r2, #32]
    5248:	4b19      	ldr	r3, [pc, #100]	; (52b0 <spi_0_init+0xdc>)
    524a:	481a      	ldr	r0, [pc, #104]	; (52b4 <spi_0_init+0xe0>)
    524c:	f842 3f10 	str.w	r3, [r2, #16]!
    5250:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    5254:	f005 fe0a 	bl	ae6c <z_log_msg2_static_create.constprop.0>
				cs_gpio->port->name, cs_gpio->pin);
			return -ENODEV;
    5258:	f06f 0012 	mvn.w	r0, #18
    525c:	46a5      	mov	sp, r4
    525e:	370c      	adds	r7, #12
    5260:	46bd      	mov	sp, r7
    5262:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return gpio_pin_configure(spec->port,
    5266:	6820      	ldr	r0, [r4, #0]
    5268:	7921      	ldrb	r1, [r4, #4]
				  spec->dt_flags | extra_flags);
    526a:	88e3      	ldrh	r3, [r4, #6]
	struct gpio_driver_data *data =
    526c:	f8d0 e010 	ldr.w	lr, [r0, #16]
	const struct gpio_driver_api *api =
    5270:	f8d0 9008 	ldr.w	r9, [r0, #8]
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5274:	f8de c000 	ldr.w	ip, [lr]
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
    5278:	07da      	lsls	r2, r3, #31
	return gpio_pin_configure(spec->port,
    527a:	bf54      	ite	pl
    527c:	f443 13b0 	orrpl.w	r3, r3, #1441792	; 0x160000
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH;
    5280:	f483 13d0 	eormi.w	r3, r3, #1703936	; 0x1a0000
	flags &= ~GPIO_OUTPUT_INIT_LOGICAL;
    5284:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
		data->invert |= (gpio_port_pins_t)BIT(pin);
    5288:	fa06 f801 	lsl.w	r8, r6, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
    528c:	07db      	lsls	r3, r3, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
    528e:	bf4c      	ite	mi
    5290:	ea4c 0308 	orrmi.w	r3, ip, r8
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    5294:	ea2c 0308 	bicpl.w	r3, ip, r8
    5298:	f8ce 3000 	str.w	r3, [lr]
	return api->pin_configure(port, pin, flags);
    529c:	f8d9 3000 	ldr.w	r3, [r9]
    52a0:	4798      	blx	r3
		}

		ret = gpio_pin_configure_dt(cs_gpio, GPIO_OUTPUT_INACTIVE);
		if (ret < 0) {
    52a2:	2800      	cmp	r0, #0
    52a4:	dbdb      	blt.n	525e <spi_0_init+0x8a>
	for (cs_gpio = ctx->cs_gpios; cs_gpio < &ctx->cs_gpios[ctx->num_cs_gpios]; cs_gpio++) {
    52a6:	3408      	adds	r4, #8
    52a8:	e7b2      	b.n	5210 <spi_0_init+0x3c>
    52aa:	bf00      	nop
    52ac:	0000ccfd 	.word	0x0000ccfd
    52b0:	01000004 	.word	0x01000004
    52b4:	0000be30 	.word	0x0000be30

000052b8 <transfer_next_chunk>:
{
    52b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct spi_nrfx_data *dev_data = dev->data;
    52ba:	6905      	ldr	r5, [r0, #16]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
    52bc:	6cab      	ldr	r3, [r5, #72]	; 0x48
		return ctx->rx_len;
    52be:	6d2c      	ldr	r4, [r5, #80]	; 0x50
{
    52c0:	b085      	sub	sp, #20
	if (!ctx->tx_len) {
    52c2:	b97b      	cbnz	r3, 52e4 <transfer_next_chunk+0x2c>
	if (chunk_len > 0) {
    52c4:	b99c      	cbnz	r4, 52ee <transfer_next_chunk+0x36>
	_spi_context_cs_control(ctx, on, false);
    52c6:	2200      	movs	r2, #0
    52c8:	4611      	mov	r1, r2
    52ca:	4628      	mov	r0, r5
    52cc:	f005 fde5 	bl	ae9a <_spi_context_cs_control>
	ctx->sync_status = status;
    52d0:	632c      	str	r4, [r5, #48]	; 0x30
	z_impl_k_sem_give(sem);
    52d2:	f105 0020 	add.w	r0, r5, #32
    52d6:	f003 fdf3 	bl	8ec0 <z_impl_k_sem_give>
	dev_data->busy = false;
    52da:	2300      	movs	r3, #0
    52dc:	f885 305c 	strb.w	r3, [r5, #92]	; 0x5c
}
    52e0:	b005      	add	sp, #20
    52e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	} else if (!ctx->rx_len) {
    52e4:	2c00      	cmp	r4, #0
    52e6:	d035      	beq.n	5354 <transfer_next_chunk+0x9c>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
    52e8:	429c      	cmp	r4, r3
    52ea:	bf28      	it	cs
    52ec:	461c      	movcs	r4, r3
		const uint8_t *tx_buf = ctx->tx_buf;
    52ee:	6c69      	ldr	r1, [r5, #68]	; 0x44
	const struct spi_nrfx_config *dev_config = dev->config;
    52f0:	6846      	ldr	r6, [r0, #4]
	return !!(ctx->tx_buf && ctx->tx_len);
    52f2:	b179      	cbz	r1, 5314 <transfer_next_chunk+0x5c>
    52f4:	b173      	cbz	r3, 5314 <transfer_next_chunk+0x5c>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    52f6:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
		if (spi_context_tx_buf_on(ctx) && !nrfx_is_in_ram(tx_buf)) {
    52fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    52fe:	d009      	beq.n	5314 <transfer_next_chunk+0x5c>
			if (chunk_len > sizeof(dev_data->buffer)) {
    5300:	2c08      	cmp	r4, #8
    5302:	bf28      	it	cs
    5304:	2408      	movcs	r4, #8
			memcpy(dev_data->buffer, tx_buf, chunk_len);
    5306:	f105 075e 	add.w	r7, r5, #94	; 0x5e
    530a:	4622      	mov	r2, r4
    530c:	4638      	mov	r0, r7
    530e:	f005 fc45 	bl	ab9c <memcpy>
			tx_buf = dev_data->buffer;
    5312:	4639      	mov	r1, r7
		if (chunk_len > dev_config->max_chunk_len) {
    5314:	68b2      	ldr	r2, [r6, #8]
    5316:	6c6b      	ldr	r3, [r5, #68]	; 0x44
		xfer.p_tx_buffer = tx_buf;
    5318:	9100      	str	r1, [sp, #0]
    531a:	4294      	cmp	r4, r2
    531c:	bf28      	it	cs
    531e:	4614      	movcs	r4, r2
		dev_data->chunk_len = chunk_len;
    5320:	65ac      	str	r4, [r5, #88]	; 0x58
    5322:	b11b      	cbz	r3, 532c <transfer_next_chunk+0x74>
    5324:	6cab      	ldr	r3, [r5, #72]	; 0x48
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
    5326:	2b00      	cmp	r3, #0
    5328:	bf18      	it	ne
    532a:	4623      	movne	r3, r4
    532c:	9301      	str	r3, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
    532e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
    5330:	9302      	str	r3, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
    5332:	b11b      	cbz	r3, 533c <transfer_next_chunk+0x84>
    5334:	6d2b      	ldr	r3, [r5, #80]	; 0x50
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    5336:	2b00      	cmp	r3, #0
    5338:	bf18      	it	ne
    533a:	4623      	movne	r3, r4
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    533c:	2200      	movs	r2, #0
    533e:	4669      	mov	r1, sp
    5340:	4630      	mov	r0, r6
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
    5342:	9303      	str	r3, [sp, #12]
			result = nrfx_spim_xfer(&dev_config->spim, &xfer, 0);
    5344:	f002 f986 	bl	7654 <nrfx_spim_xfer>
			if (result == NRFX_SUCCESS) {
    5348:	4b03      	ldr	r3, [pc, #12]	; (5358 <transfer_next_chunk+0xa0>)
    534a:	4298      	cmp	r0, r3
    534c:	d0c8      	beq.n	52e0 <transfer_next_chunk+0x28>
			error = -EIO;
    534e:	f06f 0404 	mvn.w	r4, #4
    5352:	e7b8      	b.n	52c6 <transfer_next_chunk+0xe>
    5354:	461c      	mov	r4, r3
    5356:	e7ca      	b.n	52ee <transfer_next_chunk+0x36>
    5358:	0bad0000 	.word	0x0bad0000

0000535c <event_handler>:
{
    535c:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    535e:	7803      	ldrb	r3, [r0, #0]
{
    5360:	b086      	sub	sp, #24
    5362:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPIM_EVENT_DONE) {
    5364:	2b00      	cmp	r3, #0
    5366:	d154      	bne.n	5412 <event_handler+0xb6>
	if (!ctx->tx_len) {
    5368:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    536a:	b163      	cbz	r3, 5386 <event_handler+0x2a>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
    536c:	6d8a      	ldr	r2, [r1, #88]	; 0x58
	if (len > ctx->tx_len) {
    536e:	429a      	cmp	r2, r3
    5370:	d91e      	bls.n	53b0 <event_handler+0x54>
		LOG_ERR("Update exceeds current buffer");
    5372:	4b29      	ldr	r3, [pc, #164]	; (5418 <event_handler+0xbc>)
    5374:	9305      	str	r3, [sp, #20]
    5376:	4829      	ldr	r0, [pc, #164]	; (541c <event_handler+0xc0>)
    5378:	2302      	movs	r3, #2
    537a:	aa04      	add	r2, sp, #16
    537c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5380:	9304      	str	r3, [sp, #16]
    5382:	f005 fd73 	bl	ae6c <z_log_msg2_static_create.constprop.0>
	if (!ctx->rx_len) {
    5386:	6d23      	ldr	r3, [r4, #80]	; 0x50
    5388:	b163      	cbz	r3, 53a4 <event_handler+0x48>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
    538a:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (len > ctx->rx_len) {
    538c:	429a      	cmp	r2, r3
    538e:	d927      	bls.n	53e0 <event_handler+0x84>
		LOG_ERR("Update exceeds current buffer");
    5390:	4b21      	ldr	r3, [pc, #132]	; (5418 <event_handler+0xbc>)
    5392:	9305      	str	r3, [sp, #20]
    5394:	4821      	ldr	r0, [pc, #132]	; (541c <event_handler+0xc0>)
    5396:	2302      	movs	r3, #2
    5398:	aa04      	add	r2, sp, #16
    539a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    539e:	9304      	str	r3, [sp, #16]
    53a0:	f005 fd64 	bl	ae6c <z_log_msg2_static_create.constprop.0>
		transfer_next_chunk(dev_data->dev);
    53a4:	6d60      	ldr	r0, [r4, #84]	; 0x54
}
    53a6:	b006      	add	sp, #24
    53a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
    53ac:	f7ff bf84 	b.w	52b8 <transfer_next_chunk>
	ctx->tx_len -= len;
    53b0:	1a9b      	subs	r3, r3, r2
    53b2:	648b      	str	r3, [r1, #72]	; 0x48
	if (!ctx->tx_len) {
    53b4:	b973      	cbnz	r3, 53d4 <event_handler+0x78>
		++ctx->current_tx;
    53b6:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    53b8:	3308      	adds	r3, #8
    53ba:	634b      	str	r3, [r1, #52]	; 0x34
		--ctx->tx_count;
    53bc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    53be:	3b01      	subs	r3, #1
    53c0:	638b      	str	r3, [r1, #56]	; 0x38
			spi_context_get_next_buf(&ctx->current_tx,
    53c2:	f101 0248 	add.w	r2, r1, #72	; 0x48
    53c6:	f104 0034 	add.w	r0, r4, #52	; 0x34
    53ca:	3138      	adds	r1, #56	; 0x38
    53cc:	f005 fd3d 	bl	ae4a <spi_context_get_next_buf.constprop.0>
		ctx->tx_buf = (const uint8_t *)
    53d0:	6460      	str	r0, [r4, #68]	; 0x44
    53d2:	e7d8      	b.n	5386 <event_handler+0x2a>
	} else if (ctx->tx_buf) {
    53d4:	6c4b      	ldr	r3, [r1, #68]	; 0x44
    53d6:	2b00      	cmp	r3, #0
    53d8:	d0d5      	beq.n	5386 <event_handler+0x2a>
		ctx->tx_buf += dfs * len;
    53da:	4413      	add	r3, r2
    53dc:	644b      	str	r3, [r1, #68]	; 0x44
    53de:	e7d2      	b.n	5386 <event_handler+0x2a>
	ctx->rx_len -= len;
    53e0:	1a9b      	subs	r3, r3, r2
    53e2:	6523      	str	r3, [r4, #80]	; 0x50
	if (!ctx->rx_len) {
    53e4:	b97b      	cbnz	r3, 5406 <event_handler+0xaa>
		++ctx->current_rx;
    53e6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    53e8:	3308      	adds	r3, #8
    53ea:	63e3      	str	r3, [r4, #60]	; 0x3c
		--ctx->rx_count;
    53ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
    53ee:	3b01      	subs	r3, #1
    53f0:	6423      	str	r3, [r4, #64]	; 0x40
			spi_context_get_next_buf(&ctx->current_rx,
    53f2:	f104 0250 	add.w	r2, r4, #80	; 0x50
    53f6:	f104 0140 	add.w	r1, r4, #64	; 0x40
    53fa:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    53fe:	f005 fd24 	bl	ae4a <spi_context_get_next_buf.constprop.0>
		ctx->rx_buf = (uint8_t *)
    5402:	64e0      	str	r0, [r4, #76]	; 0x4c
    5404:	e7ce      	b.n	53a4 <event_handler+0x48>
	} else if (ctx->rx_buf) {
    5406:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    5408:	2b00      	cmp	r3, #0
    540a:	d0cb      	beq.n	53a4 <event_handler+0x48>
		ctx->rx_buf += dfs * len;
    540c:	4413      	add	r3, r2
    540e:	64e3      	str	r3, [r4, #76]	; 0x4c
    5410:	e7c8      	b.n	53a4 <event_handler+0x48>
}
    5412:	b006      	add	sp, #24
    5414:	bd10      	pop	{r4, pc}
    5416:	bf00      	nop
    5418:	0000cd21 	.word	0x0000cd21
    541c:	0000be30 	.word	0x0000be30

00005420 <spi_nrfx_transceive>:
{
    5420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5424:	b08b      	sub	sp, #44	; 0x2c
    5426:	af00      	add	r7, sp, #0
    5428:	e9c7 3202 	strd	r3, r2, [r7, #8]
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    542c:	888b      	ldrh	r3, [r1, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    542e:	6904      	ldr	r4, [r0, #16]
    5430:	049b      	lsls	r3, r3, #18
{
    5432:	4683      	mov	fp, r0
    5434:	460e      	mov	r6, r1
    5436:	d434      	bmi.n	54a2 <spi_nrfx_transceive+0x82>
	return z_impl_k_sem_take(sem, timeout);
    5438:	f04f 32ff 	mov.w	r2, #4294967295
    543c:	f04f 33ff 	mov.w	r3, #4294967295
    5440:	f104 0010 	add.w	r0, r4, #16
    5444:	f003 fd5c 	bl	8f00 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
    5448:	6066      	str	r6, [r4, #4]
	struct spi_nrfx_data *dev_data = dev->data;
    544a:	f8db 8010 	ldr.w	r8, [fp, #16]
	if (dev_data->initialized && spi_context_configured(ctx, spi_cfg)) {
    544e:	f898 305d 	ldrb.w	r3, [r8, #93]	; 0x5d
    5452:	607b      	str	r3, [r7, #4]
    5454:	b123      	cbz	r3, 5460 <spi_nrfx_transceive+0x40>
    5456:	f8d8 3000 	ldr.w	r3, [r8]
    545a:	429e      	cmp	r6, r3
    545c:	f000 80d2 	beq.w	5604 <spi_nrfx_transceive+0x1e4>
	if (spi_cfg->operation & SPI_HALF_DUPLEX) {
    5460:	f8b6 c004 	ldrh.w	ip, [r6, #4]
    5464:	f41c 6f00 	tst.w	ip, #2048	; 0x800
    5468:	d022      	beq.n	54b0 <spi_nrfx_transceive+0x90>
		LOG_ERR("Half-duplex not supported");
    546a:	4b9b      	ldr	r3, [pc, #620]	; (56d8 <spi_nrfx_transceive+0x2b8>)
    546c:	627b      	str	r3, [r7, #36]	; 0x24
    546e:	489b      	ldr	r0, [pc, #620]	; (56dc <spi_nrfx_transceive+0x2bc>)
    5470:	2302      	movs	r3, #2
    5472:	f107 0220 	add.w	r2, r7, #32
    5476:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
    547a:	f06f 0585 	mvn.w	r5, #133	; 0x85
		LOG_ERR("Half-duplex not supported");
    547e:	623b      	str	r3, [r7, #32]
    5480:	f005 fcf4 	bl	ae6c <z_log_msg2_static_create.constprop.0>
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
    5484:	6823      	ldr	r3, [r4, #0]
    5486:	889b      	ldrh	r3, [r3, #4]
    5488:	f413 5300 	ands.w	r3, r3, #8192	; 0x2000
    548c:	d104      	bne.n	5498 <spi_nrfx_transceive+0x78>
		ctx->owner = NULL;
    548e:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    5490:	f104 0010 	add.w	r0, r4, #16
    5494:	f003 fd14 	bl	8ec0 <z_impl_k_sem_give>
}
    5498:	4628      	mov	r0, r5
    549a:	372c      	adds	r7, #44	; 0x2c
    549c:	46bd      	mov	sp, r7
    549e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
    54a2:	69a3      	ldr	r3, [r4, #24]
    54a4:	2b00      	cmp	r3, #0
    54a6:	d1c7      	bne.n	5438 <spi_nrfx_transceive+0x18>
		(k_sem_count_get(&ctx->lock) == 0) &&
    54a8:	6863      	ldr	r3, [r4, #4]
    54aa:	4299      	cmp	r1, r3
    54ac:	d1c4      	bne.n	5438 <spi_nrfx_transceive+0x18>
    54ae:	e7cc      	b.n	544a <spi_nrfx_transceive+0x2a>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
    54b0:	f01c 0f01 	tst.w	ip, #1
    54b4:	d015      	beq.n	54e2 <spi_nrfx_transceive+0xc2>
		LOG_ERR("Slave mode is not supported on %s", dev->name);
    54b6:	f8db 3000 	ldr.w	r3, [fp]
    54ba:	4989      	ldr	r1, [pc, #548]	; (56e0 <spi_nrfx_transceive+0x2c0>)
    54bc:	4887      	ldr	r0, [pc, #540]	; (56dc <spi_nrfx_transceive+0x2bc>)
    54be:	466d      	mov	r5, sp
    54c0:	b088      	sub	sp, #32
    54c2:	466a      	mov	r2, sp
    54c4:	e9c2 1305 	strd	r1, r3, [r2, #20]
    54c8:	2302      	movs	r3, #2
    54ca:	7713      	strb	r3, [r2, #28]
    54cc:	4b85      	ldr	r3, [pc, #532]	; (56e4 <spi_nrfx_transceive+0x2c4>)
    54ce:	f842 3f10 	str.w	r3, [r2, #16]!
    54d2:	f44f 51d2 	mov.w	r1, #6720	; 0x1a40
    54d6:	f005 fcc9 	bl	ae6c <z_log_msg2_static_create.constprop.0>
    54da:	46ad      	mov	sp, r5
		return -EINVAL;
    54dc:	f06f 0515 	mvn.w	r5, #21
    54e0:	e7d0      	b.n	5484 <spi_nrfx_transceive+0x64>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
    54e2:	f01c 0f08 	tst.w	ip, #8
    54e6:	d00b      	beq.n	5500 <spi_nrfx_transceive+0xe0>
		LOG_ERR("Loopback mode is not supported");
    54e8:	4b7f      	ldr	r3, [pc, #508]	; (56e8 <spi_nrfx_transceive+0x2c8>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    54ea:	627b      	str	r3, [r7, #36]	; 0x24
    54ec:	487b      	ldr	r0, [pc, #492]	; (56dc <spi_nrfx_transceive+0x2bc>)
    54ee:	2302      	movs	r3, #2
    54f0:	f107 0220 	add.w	r2, r7, #32
    54f4:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    54f8:	623b      	str	r3, [r7, #32]
    54fa:	f005 fcb7 	bl	ae6c <z_log_msg2_static_create.constprop.0>
    54fe:	e7ed      	b.n	54dc <spi_nrfx_transceive+0xbc>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
    5500:	f3cc 1345 	ubfx	r3, ip, #5, #6
    5504:	2b08      	cmp	r3, #8
    5506:	d001      	beq.n	550c <spi_nrfx_transceive+0xec>
		LOG_ERR("Word sizes other than 8 bits are not supported");
    5508:	4b78      	ldr	r3, [pc, #480]	; (56ec <spi_nrfx_transceive+0x2cc>)
    550a:	e7ee      	b.n	54ea <spi_nrfx_transceive+0xca>
	if (spi_cfg->frequency < 125000) {
    550c:	6835      	ldr	r5, [r6, #0]
    550e:	4b78      	ldr	r3, [pc, #480]	; (56f0 <spi_nrfx_transceive+0x2d0>)
    5510:	429d      	cmp	r5, r3
    5512:	d801      	bhi.n	5518 <spi_nrfx_transceive+0xf8>
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
    5514:	4b77      	ldr	r3, [pc, #476]	; (56f4 <spi_nrfx_transceive+0x2d4>)
    5516:	e7e8      	b.n	54ea <spi_nrfx_transceive+0xca>
	const struct spi_nrfx_config *dev_config = dev->config;
    5518:	f8db 9004 	ldr.w	r9, [fp, #4]
	uint32_t max_freq = dev_config->max_freq;
    551c:	f8d9 300c 	ldr.w	r3, [r9, #12]
    5520:	603b      	str	r3, [r7, #0]
	config = dev_config->def_config;
    5522:	f109 0a10 	add.w	sl, r9, #16
    5526:	e8ba 000f 	ldmia.w	sl!, {r0, r1, r2, r3}
    552a:	f107 0e10 	add.w	lr, r7, #16
    552e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    5532:	f8da 3000 	ldr.w	r3, [sl]
    5536:	f8ce 3000 	str.w	r3, [lr]
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    553a:	683b      	ldr	r3, [r7, #0]
    553c:	429d      	cmp	r5, r3
    553e:	bf28      	it	cs
    5540:	461d      	movcs	r5, r3
	if (frequency < 250000) {
    5542:	4b6d      	ldr	r3, [pc, #436]	; (56f8 <spi_nrfx_transceive+0x2d8>)
    5544:	429d      	cmp	r5, r3
    5546:	d945      	bls.n	55d4 <spi_nrfx_transceive+0x1b4>
	} else if (frequency < 500000) {
    5548:	4b6c      	ldr	r3, [pc, #432]	; (56fc <spi_nrfx_transceive+0x2dc>)
    554a:	429d      	cmp	r5, r3
    554c:	d945      	bls.n	55da <spi_nrfx_transceive+0x1ba>
	} else if (frequency < 1000000) {
    554e:	4b6c      	ldr	r3, [pc, #432]	; (5700 <spi_nrfx_transceive+0x2e0>)
    5550:	429d      	cmp	r5, r3
    5552:	d945      	bls.n	55e0 <spi_nrfx_transceive+0x1c0>
	} else if (frequency < 2000000) {
    5554:	4b6b      	ldr	r3, [pc, #428]	; (5704 <spi_nrfx_transceive+0x2e4>)
    5556:	429d      	cmp	r5, r3
    5558:	d945      	bls.n	55e6 <spi_nrfx_transceive+0x1c6>
	} else if (frequency < 4000000) {
    555a:	4b6b      	ldr	r3, [pc, #428]	; (5708 <spi_nrfx_transceive+0x2e8>)
    555c:	429d      	cmp	r5, r3
    555e:	d945      	bls.n	55ec <spi_nrfx_transceive+0x1cc>
		return NRF_SPIM_FREQ_8M;
    5560:	4b6a      	ldr	r3, [pc, #424]	; (570c <spi_nrfx_transceive+0x2ec>)
    5562:	429d      	cmp	r5, r3
    5564:	bf34      	ite	cc
    5566:	f04f 4580 	movcc.w	r5, #1073741824	; 0x40000000
    556a:	f04f 4500 	movcs.w	r5, #2147483648	; 0x80000000
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    556e:	f01c 0f02 	tst.w	ip, #2
	config.frequency = get_nrf_spim_frequency(MIN(spi_cfg->frequency,
    5572:	61bd      	str	r5, [r7, #24]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
    5574:	f00c 0304 	and.w	r3, ip, #4
    5578:	d03b      	beq.n	55f2 <spi_nrfx_transceive+0x1d2>
			return NRF_SPIM_MODE_2;
    557a:	2b00      	cmp	r3, #0
    557c:	bf14      	ite	ne
    557e:	2303      	movne	r3, #3
    5580:	2302      	moveq	r3, #2
	config.mode      = get_nrf_spim_mode(spi_cfg->operation);
    5582:	773b      	strb	r3, [r7, #28]
	if (dev_data->initialized) {
    5584:	687b      	ldr	r3, [r7, #4]
	if (operation & SPI_TRANSFER_LSB) {
    5586:	f3cc 1c00 	ubfx	ip, ip, #4, #1
	config.bit_order = get_nrf_spim_bit_order(spi_cfg->operation);
    558a:	f887 c01d 	strb.w	ip, [r7, #29]
	if (dev_data->initialized) {
    558e:	b12b      	cbz	r3, 559c <spi_nrfx_transceive+0x17c>
		nrfx_spim_uninit(&dev_config->spim);
    5590:	4648      	mov	r0, r9
    5592:	f002 f817 	bl	75c4 <nrfx_spim_uninit>
		dev_data->initialized = false;
    5596:	2300      	movs	r3, #0
    5598:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
	result = nrfx_spim_init(&dev_config->spim, &config,
    559c:	4643      	mov	r3, r8
    559e:	4a5c      	ldr	r2, [pc, #368]	; (5710 <spi_nrfx_transceive+0x2f0>)
    55a0:	f107 0110 	add.w	r1, r7, #16
    55a4:	4648      	mov	r0, r9
    55a6:	f001 ff65 	bl	7474 <nrfx_spim_init>
	if (result != NRFX_SUCCESS) {
    55aa:	4b5a      	ldr	r3, [pc, #360]	; (5714 <spi_nrfx_transceive+0x2f4>)
    55ac:	4298      	cmp	r0, r3
    55ae:	d024      	beq.n	55fa <spi_nrfx_transceive+0x1da>
		LOG_ERR("Failed to initialize nrfx driver: %08x", result);
    55b0:	466d      	mov	r5, sp
    55b2:	4b59      	ldr	r3, [pc, #356]	; (5718 <spi_nrfx_transceive+0x2f8>)
    55b4:	b088      	sub	sp, #32
    55b6:	466a      	mov	r2, sp
    55b8:	e9c2 3005 	strd	r3, r0, [r2, #20]
    55bc:	2303      	movs	r3, #3
    55be:	f842 3f10 	str.w	r3, [r2, #16]!
    55c2:	4846      	ldr	r0, [pc, #280]	; (56dc <spi_nrfx_transceive+0x2bc>)
    55c4:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    55c8:	f005 fc50 	bl	ae6c <z_log_msg2_static_create.constprop.0>
    55cc:	46ad      	mov	sp, r5
		return -EIO;
    55ce:	f06f 0504 	mvn.w	r5, #4
    55d2:	e757      	b.n	5484 <spi_nrfx_transceive+0x64>
		return NRF_SPIM_FREQ_125K;
    55d4:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
    55d8:	e7c9      	b.n	556e <spi_nrfx_transceive+0x14e>
		return NRF_SPIM_FREQ_250K;
    55da:	f04f 6580 	mov.w	r5, #67108864	; 0x4000000
    55de:	e7c6      	b.n	556e <spi_nrfx_transceive+0x14e>
		return NRF_SPIM_FREQ_500K;
    55e0:	f04f 6500 	mov.w	r5, #134217728	; 0x8000000
    55e4:	e7c3      	b.n	556e <spi_nrfx_transceive+0x14e>
		return NRF_SPIM_FREQ_1M;
    55e6:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
    55ea:	e7c0      	b.n	556e <spi_nrfx_transceive+0x14e>
		return NRF_SPIM_FREQ_2M;
    55ec:	f04f 5500 	mov.w	r5, #536870912	; 0x20000000
    55f0:	e7bd      	b.n	556e <spi_nrfx_transceive+0x14e>
			return NRF_SPIM_MODE_0;
    55f2:	3b00      	subs	r3, #0
    55f4:	bf18      	it	ne
    55f6:	2301      	movne	r3, #1
    55f8:	e7c3      	b.n	5582 <spi_nrfx_transceive+0x162>
	dev_data->initialized = true;
    55fa:	2301      	movs	r3, #1
    55fc:	f888 305d 	strb.w	r3, [r8, #93]	; 0x5d
	ctx->config = spi_cfg;
    5600:	f8c8 6000 	str.w	r6, [r8]
		dev_data->busy = true;
    5604:	2301      	movs	r3, #1
    5606:	f884 305c 	strb.w	r3, [r4, #92]	; 0x5c
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    560a:	68fb      	ldr	r3, [r7, #12]
    560c:	2b00      	cmp	r3, #0
    560e:	d152      	bne.n	56b6 <spi_nrfx_transceive+0x296>
    5610:	6363      	str	r3, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    5612:	461a      	mov	r2, r3
    5614:	63a2      	str	r2, [r4, #56]	; 0x38
		spi_context_get_next_buf(&ctx->current_tx, &ctx->tx_count,
    5616:	f104 0138 	add.w	r1, r4, #56	; 0x38
    561a:	f104 0248 	add.w	r2, r4, #72	; 0x48
    561e:	f104 0034 	add.w	r0, r4, #52	; 0x34
    5622:	f005 fc12 	bl	ae4a <spi_context_get_next_buf.constprop.0>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    5626:	68bb      	ldr	r3, [r7, #8]
	ctx->tx_buf = (const uint8_t *)
    5628:	6460      	str	r0, [r4, #68]	; 0x44
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    562a:	2b00      	cmp	r3, #0
    562c:	d14a      	bne.n	56c4 <spi_nrfx_transceive+0x2a4>
    562e:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    5630:	6423      	str	r3, [r4, #64]	; 0x40
		spi_context_get_next_buf(&ctx->current_rx, &ctx->rx_count,
    5632:	f104 0250 	add.w	r2, r4, #80	; 0x50
    5636:	f104 0140 	add.w	r1, r4, #64	; 0x40
    563a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
    563e:	f005 fc04 	bl	ae4a <spi_context_get_next_buf.constprop.0>
	ctx->sync_status = 0;
    5642:	2600      	movs	r6, #0
	_spi_context_cs_control(ctx, on, false);
    5644:	4632      	mov	r2, r6
	ctx->rx_buf = (uint8_t *)
    5646:	64e0      	str	r0, [r4, #76]	; 0x4c
	_spi_context_cs_control(ctx, on, false);
    5648:	2101      	movs	r1, #1
    564a:	4620      	mov	r0, r4
	ctx->sync_status = 0;
    564c:	6326      	str	r6, [r4, #48]	; 0x30
	_spi_context_cs_control(ctx, on, false);
    564e:	f005 fc24 	bl	ae9a <_spi_context_cs_control>
		transfer_next_chunk(dev);
    5652:	4658      	mov	r0, fp
    5654:	f7ff fe30 	bl	52b8 <transfer_next_chunk>
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    5658:	6d25      	ldr	r5, [r4, #80]	; 0x50
    565a:	6ca3      	ldr	r3, [r4, #72]	; 0x48
			     ctx->config->frequency;
    565c:	46a0      	mov	r8, r4
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    565e:	429d      	cmp	r5, r3
    5660:	bf38      	it	cc
    5662:	461d      	movcc	r5, r3
    5664:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
    5668:	435d      	muls	r5, r3
			     ctx->config->frequency;
    566a:	f858 3b20 	ldr.w	r3, [r8], #32
			/* Faster algorithm but source is first multiplied by target frequency
			 * and it can overflow even though final result would not overflow.
			 * Kconfig option shall prevent use of this algorithm when there is a
			 * risk of overflow.
			 */
			return ((t * to_hz + off) / from_hz);
    566e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
		timeout_ms = MAX(ctx->tx_len, ctx->rx_len) * 8 * 1000 /
    5672:	681b      	ldr	r3, [r3, #0]
    5674:	fbb5 f5f3 	udiv	r5, r5, r3
    5678:	4631      	mov	r1, r6
		timeout_ms += CONFIG_SPI_COMPLETION_TIMEOUT_TOLERANCE;
    567a:	35c8      	adds	r5, #200	; 0xc8
    567c:	f240 30e7 	movw	r0, #999	; 0x3e7
    5680:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5684:	2300      	movs	r3, #0
    5686:	fbe5 010c 	umlal	r0, r1, r5, ip
    568a:	f7fa fd29 	bl	e0 <__aeabi_uldivmod>
    568e:	4602      	mov	r2, r0
    5690:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
    5692:	4640      	mov	r0, r8
    5694:	f003 fc34 	bl	8f00 <z_impl_k_sem_take>
	if (k_sem_take(&ctx->sync, timeout)) {
    5698:	b1e0      	cbz	r0, 56d4 <spi_nrfx_transceive+0x2b4>
		LOG_ERR("Timeout waiting for transfer complete");
    569a:	4b20      	ldr	r3, [pc, #128]	; (571c <spi_nrfx_transceive+0x2fc>)
    569c:	627b      	str	r3, [r7, #36]	; 0x24
    569e:	480f      	ldr	r0, [pc, #60]	; (56dc <spi_nrfx_transceive+0x2bc>)
    56a0:	2302      	movs	r3, #2
    56a2:	f107 0220 	add.w	r2, r7, #32
    56a6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    56aa:	623b      	str	r3, [r7, #32]
		return -ETIMEDOUT;
    56ac:	f06f 0573 	mvn.w	r5, #115	; 0x73
		LOG_ERR("Timeout waiting for transfer complete");
    56b0:	f005 fbdc 	bl	ae6c <z_log_msg2_static_create.constprop.0>
		return -ETIMEDOUT;
    56b4:	e6e6      	b.n	5484 <spi_nrfx_transceive+0x64>
	ctx->current_tx = tx_bufs ? tx_bufs->buffers : NULL;
    56b6:	68fb      	ldr	r3, [r7, #12]
    56b8:	681a      	ldr	r2, [r3, #0]
    56ba:	6362      	str	r2, [r4, #52]	; 0x34
	ctx->tx_count = ctx->current_tx ? tx_bufs->count : 0;
    56bc:	2a00      	cmp	r2, #0
    56be:	d0a9      	beq.n	5614 <spi_nrfx_transceive+0x1f4>
    56c0:	685a      	ldr	r2, [r3, #4]
    56c2:	e7a7      	b.n	5614 <spi_nrfx_transceive+0x1f4>
	ctx->current_rx = rx_bufs ? rx_bufs->buffers : NULL;
    56c4:	68bb      	ldr	r3, [r7, #8]
    56c6:	681b      	ldr	r3, [r3, #0]
    56c8:	63e3      	str	r3, [r4, #60]	; 0x3c
	ctx->rx_count = ctx->current_rx ? rx_bufs->count : 0;
    56ca:	2b00      	cmp	r3, #0
    56cc:	d0b0      	beq.n	5630 <spi_nrfx_transceive+0x210>
    56ce:	68bb      	ldr	r3, [r7, #8]
    56d0:	685b      	ldr	r3, [r3, #4]
    56d2:	e7ad      	b.n	5630 <spi_nrfx_transceive+0x210>
	status = ctx->sync_status;
    56d4:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return status;
    56d6:	e6d5      	b.n	5484 <spi_nrfx_transceive+0x64>
    56d8:	0000cd3f 	.word	0x0000cd3f
    56dc:	0000be30 	.word	0x0000be30
    56e0:	0000cd59 	.word	0x0000cd59
    56e4:	01000003 	.word	0x01000003
    56e8:	0000cd7b 	.word	0x0000cd7b
    56ec:	0000cd9a 	.word	0x0000cd9a
    56f0:	0001e847 	.word	0x0001e847
    56f4:	0000cdc9 	.word	0x0000cdc9
    56f8:	0003d08f 	.word	0x0003d08f
    56fc:	0007a11f 	.word	0x0007a11f
    5700:	000f423f 	.word	0x000f423f
    5704:	001e847f 	.word	0x001e847f
    5708:	003d08ff 	.word	0x003d08ff
    570c:	007a1200 	.word	0x007a1200
    5710:	0000535d 	.word	0x0000535d
    5714:	0bad0000 	.word	0x0bad0000
    5718:	0000cdfa 	.word	0x0000cdfa
    571c:	0000ce21 	.word	0x0000ce21

00005720 <compare_int_lock>:
	return 0;
#endif
}

static bool compare_int_lock(int32_t chan)
{
    5720:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    5722:	2301      	movs	r3, #1
    5724:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5726:	4a11      	ldr	r2, [pc, #68]	; (576c <compare_int_lock+0x4c>)
    5728:	f3bf 8f5b 	dmb	ish
    572c:	43dc      	mvns	r4, r3
    572e:	e852 1f00 	ldrex	r1, [r2]
    5732:	ea01 0c04 	and.w	ip, r1, r4
    5736:	e842 ce00 	strex	lr, ip, [r2]
    573a:	f1be 0f00 	cmp.w	lr, #0
    573e:	d1f6      	bne.n	572e <compare_int_lock+0xe>
    5740:	f3bf 8f5b 	dmb	ish

	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    5744:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    5748:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENSET = mask;
}

NRF_STATIC_INLINE void nrf_rtc_int_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
    574c:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    5750:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    5754:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    5758:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    575c:	f3bf 8f6f 	isb	sy

	__DMB();
	__ISB();

	return prev & BIT(chan);
    5760:	420b      	tst	r3, r1
}
    5762:	bf14      	ite	ne
    5764:	2001      	movne	r0, #1
    5766:	2000      	moveq	r0, #0
    5768:	bd10      	pop	{r4, pc}
    576a:	bf00      	nop
    576c:	2000170c 	.word	0x2000170c

00005770 <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5770:	4919      	ldr	r1, [pc, #100]	; (57d8 <sys_clock_timeout_handler+0x68>)
{
    5772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5774:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    5776:	f022 457f 	bic.w	r5, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    577a:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    577c:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    5780:	f5a5 1300 	sub.w	r3, r5, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    5784:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    5786:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    578a:	d222      	bcs.n	57d2 <sys_clock_timeout_handler+0x62>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    578c:	4b13      	ldr	r3, [pc, #76]	; (57dc <sys_clock_timeout_handler+0x6c>)
    578e:	681b      	ldr	r3, [r3, #0]
    5790:	0a1a      	lsrs	r2, r3, #8
    5792:	061b      	lsls	r3, r3, #24
    5794:	195e      	adds	r6, r3, r5
    5796:	4b12      	ldr	r3, [pc, #72]	; (57e0 <sys_clock_timeout_handler+0x70>)
    5798:	f142 0700 	adc.w	r7, r2, #0
    579c:	e9c3 6700 	strd	r6, r7, [r3]
		return true;
    57a0:	2601      	movs	r6, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    57a2:	f004 f97d 	bl	9aa0 <sys_clock_announce>
    return p_reg->CC[ch];
    57a6:	00a3      	lsls	r3, r4, #2
    57a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    57ac:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    57b0:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    57b4:	42aa      	cmp	r2, r5
    57b6:	d10b      	bne.n	57d0 <sys_clock_timeout_handler+0x60>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    57b8:	b91e      	cbnz	r6, 57c2 <sys_clock_timeout_handler+0x52>
    p_reg->CC[ch] = cc_val;
    57ba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    57be:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    57c2:	4b08      	ldr	r3, [pc, #32]	; (57e4 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    57c4:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    57c8:	fa00 f404 	lsl.w	r4, r0, r4
    57cc:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    57d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return false;
    57d2:	2600      	movs	r6, #0
    57d4:	e7e5      	b.n	57a2 <sys_clock_timeout_handler+0x32>
    57d6:	bf00      	nop
    57d8:	200008d8 	.word	0x200008d8
    57dc:	20001710 	.word	0x20001710
    57e0:	200008c0 	.word	0x200008c0
    57e4:	40011000 	.word	0x40011000

000057e8 <compare_int_unlock>:
	if (key) {
    57e8:	b319      	cbz	r1, 5832 <compare_int_unlock+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    57ea:	f3bf 8f5b 	dmb	ish
		atomic_or(&int_mask, BIT(chan));
    57ee:	2301      	movs	r3, #1
    57f0:	4a10      	ldr	r2, [pc, #64]	; (5834 <compare_int_unlock+0x4c>)
    57f2:	4083      	lsls	r3, r0
    57f4:	e852 1f00 	ldrex	r1, [r2]
    57f8:	4319      	orrs	r1, r3
    57fa:	e842 1c00 	strex	ip, r1, [r2]
    57fe:	f1bc 0f00 	cmp.w	ip, #0
    5802:	d1f7      	bne.n	57f4 <compare_int_unlock+0xc>
    5804:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    5808:	4a0b      	ldr	r2, [pc, #44]	; (5838 <compare_int_unlock+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    580a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    580e:	4083      	lsls	r3, r0
    5810:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5814:	4b09      	ldr	r3, [pc, #36]	; (583c <compare_int_unlock+0x54>)
    5816:	f3bf 8f5b 	dmb	ish
    581a:	681b      	ldr	r3, [r3, #0]
    581c:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    5820:	fa23 f000 	lsr.w	r0, r3, r0
    5824:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5826:	bf42      	ittt	mi
    5828:	4b05      	ldrmi	r3, [pc, #20]	; (5840 <compare_int_unlock+0x58>)
    582a:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    582e:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    5832:	4770      	bx	lr
    5834:	2000170c 	.word	0x2000170c
    5838:	40011000 	.word	0x40011000
    583c:	20001708 	.word	0x20001708
    5840:	e000e100 	.word	0xe000e100

00005844 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    5844:	4b0d      	ldr	r3, [pc, #52]	; (587c <z_nrf_rtc_timer_read+0x38>)
    5846:	6818      	ldr	r0, [r3, #0]
    5848:	0a01      	lsrs	r1, r0, #8
    584a:	0600      	lsls	r0, r0, #24
  __ASM volatile ("dmb 0xF":::"memory");
    584c:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    5850:	4b0b      	ldr	r3, [pc, #44]	; (5880 <z_nrf_rtc_timer_read+0x3c>)
    5852:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    5856:	1818      	adds	r0, r3, r0
    5858:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    585c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    5860:	d20a      	bcs.n	5878 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    5862:	4b08      	ldr	r3, [pc, #32]	; (5884 <z_nrf_rtc_timer_read+0x40>)
    5864:	e9d3 2300 	ldrd	r2, r3, [r3]
    5868:	4290      	cmp	r0, r2
    586a:	eb71 0303 	sbcs.w	r3, r1, r3
    586e:	d203      	bcs.n	5878 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    5870:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    5874:	f141 0100 	adc.w	r1, r1, #0
}
    5878:	4770      	bx	lr
    587a:	bf00      	nop
    587c:	20001710 	.word	0x20001710
    5880:	40011000 	.word	0x40011000
    5884:	200008c0 	.word	0x200008c0

00005888 <compare_set>:
{
    5888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    588c:	b085      	sub	sp, #20
    588e:	4616      	mov	r6, r2
    5890:	4698      	mov	r8, r3
    5892:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    5894:	f7ff ff44 	bl	5720 <compare_int_lock>
    5898:	9000      	str	r0, [sp, #0]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    589a:	f7ff ffd3 	bl	5844 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    589e:	42b0      	cmp	r0, r6
    58a0:	eb71 0308 	sbcs.w	r3, r1, r8
    58a4:	d278      	bcs.n	5998 <compare_set+0x110>
		if (target_time - curr_time > COUNTER_SPAN) {
    58a6:	4b46      	ldr	r3, [pc, #280]	; (59c0 <compare_set+0x138>)
    58a8:	1a30      	subs	r0, r6, r0
    58aa:	eb68 0101 	sbc.w	r1, r8, r1
    58ae:	4298      	cmp	r0, r3
    58b0:	f171 0300 	sbcs.w	r3, r1, #0
    58b4:	f080 8081 	bcs.w	59ba <compare_set+0x132>
		if (target_time != cc_data[chan].target_time) {
    58b8:	4b42      	ldr	r3, [pc, #264]	; (59c4 <compare_set+0x13c>)
    58ba:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    58be:	e9d3 ab02 	ldrd	sl, fp, [r3, #8]
    58c2:	45d8      	cmp	r8, fp
    58c4:	bf08      	it	eq
    58c6:	4556      	cmpeq	r6, sl
    58c8:	d051      	beq.n	596e <compare_set+0xe6>
    58ca:	ea4f 0985 	mov.w	r9, r5, lsl #2
    58ce:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    58d2:	f105 0750 	add.w	r7, r5, #80	; 0x50
    58d6:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
    58da:	00bf      	lsls	r7, r7, #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    58dc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    58e0:	fa01 f305 	lsl.w	r3, r1, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    58e4:	b2bf      	uxth	r7, r7
	return absolute_time & COUNTER_MAX;
    58e6:	f026 427f 	bic.w	r2, r6, #4278190080	; 0xff000000
    58ea:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    58ee:	9301      	str	r3, [sp, #4]
    return p_reg->CC[ch];
    58f0:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    58f4:	4b34      	ldr	r3, [pc, #208]	; (59c8 <compare_set+0x140>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    58f6:	f507 3788 	add.w	r7, r7, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    58fa:	4614      	mov	r4, r2
     return p_reg->COUNTER;
    58fc:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    5900:	1a40      	subs	r0, r0, r1
    5902:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5906:	f021 4c7f 	bic.w	ip, r1, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    590a:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    590c:	f8c9 c540 	str.w	ip, [r9, #1344]	; 0x540
    5910:	d107      	bne.n	5922 <compare_set+0x9a>
    5912:	e9cd 2102 	strd	r2, r1, [sp, #8]
	z_impl_k_busy_wait(usec_to_wait);
    5916:	2013      	movs	r0, #19
    5918:	f006 f842 	bl	b9a0 <z_impl_k_busy_wait>
    591c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
    5920:	4b29      	ldr	r3, [pc, #164]	; (59c8 <compare_set+0x140>)
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    5922:	f101 0c02 	add.w	ip, r1, #2
	return (a - b) & COUNTER_MAX;
    5926:	eba4 000c 	sub.w	r0, r4, ip
    592a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    592e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5932:	bf88      	it	hi
    5934:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5936:	2000      	movs	r0, #0
    5938:	6038      	str	r0, [r7, #0]
    593a:	6838      	ldr	r0, [r7, #0]
    p_reg->EVTENSET = mask;
    593c:	9801      	ldr	r0, [sp, #4]
    593e:	f8c3 0344 	str.w	r0, [r3, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    5942:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    5946:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    594a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    594e:	4281      	cmp	r1, r0
    5950:	d006      	beq.n	5960 <compare_set+0xd8>
	return (a - b) & COUNTER_MAX;
    5952:	1a20      	subs	r0, r4, r0
    5954:	3802      	subs	r0, #2
    5956:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    595a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    595e:	d819      	bhi.n	5994 <compare_set+0x10c>
	return (a - b) & COUNTER_MAX;
    5960:	1aa4      	subs	r4, r4, r2
    5962:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    5966:	eb14 0a06 	adds.w	sl, r4, r6
    596a:	f148 0b00 	adc.w	fp, r8, #0
	cc_data[chan].target_time = target_time;
    596e:	4915      	ldr	r1, [pc, #84]	; (59c4 <compare_set+0x13c>)
	cc_data[chan].callback = handler;
    5970:	980e      	ldr	r0, [sp, #56]	; 0x38
	cc_data[chan].target_time = target_time;
    5972:	012b      	lsls	r3, r5, #4
    5974:	eb01 1205 	add.w	r2, r1, r5, lsl #4
    5978:	e9c2 ab02 	strd	sl, fp, [r2, #8]
	cc_data[chan].callback = handler;
    597c:	50c8      	str	r0, [r1, r3]
	cc_data[chan].user_context = user_data;
    597e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5980:	6053      	str	r3, [r2, #4]
	return ret;
    5982:	2400      	movs	r4, #0
	compare_int_unlock(chan, key);
    5984:	4628      	mov	r0, r5
    5986:	9900      	ldr	r1, [sp, #0]
    5988:	f7ff ff2e 	bl	57e8 <compare_int_unlock>
}
    598c:	4620      	mov	r0, r4
    598e:	b005      	add	sp, #20
    5990:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5994:	4620      	mov	r0, r4
    5996:	e7b1      	b.n	58fc <compare_set+0x74>
		atomic_or(&force_isr_mask, BIT(chan));
    5998:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    599a:	4a0c      	ldr	r2, [pc, #48]	; (59cc <compare_set+0x144>)
    599c:	f3bf 8f5b 	dmb	ish
    59a0:	40ab      	lsls	r3, r5
    59a2:	e852 1f00 	ldrex	r1, [r2]
    59a6:	4319      	orrs	r1, r3
    59a8:	e842 1000 	strex	r0, r1, [r2]
    59ac:	2800      	cmp	r0, #0
    59ae:	d1f8      	bne.n	59a2 <compare_set+0x11a>
    59b0:	f3bf 8f5b 	dmb	ish
    59b4:	46b2      	mov	sl, r6
    59b6:	46c3      	mov	fp, r8
    59b8:	e7d9      	b.n	596e <compare_set+0xe6>
			return -EINVAL;
    59ba:	f06f 0415 	mvn.w	r4, #21
    59be:	e7e1      	b.n	5984 <compare_set+0xfc>
    59c0:	01000001 	.word	0x01000001
    59c4:	200008c8 	.word	0x200008c8
    59c8:	40011000 	.word	0x40011000
    59cc:	20001708 	.word	0x20001708

000059d0 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    59d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    59d2:	4b19      	ldr	r3, [pc, #100]	; (5a38 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    59d4:	4d19      	ldr	r5, [pc, #100]	; (5a3c <sys_clock_driver_init+0x6c>)
    59d6:	2400      	movs	r4, #0
    59d8:	f04f 30ff 	mov.w	r0, #4294967295
    59dc:	f04f 31ff 	mov.w	r1, #4294967295
    59e0:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    59e4:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    59e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    59ec:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    59f0:	4b13      	ldr	r3, [pc, #76]	; (5a40 <sys_clock_driver_init+0x70>)
    59f2:	2602      	movs	r6, #2
    59f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    59f8:	2101      	movs	r1, #1
    59fa:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    59fe:	2011      	movs	r0, #17
    5a00:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    5a04:	4622      	mov	r2, r4
    5a06:	f7fd f985 	bl	2d14 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    5a0a:	2011      	movs	r0, #17
    5a0c:	f7fd f950 	bl	2cb0 <arch_irq_enable>

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    5a10:	4a0c      	ldr	r2, [pc, #48]	; (5a44 <sys_clock_driver_init+0x74>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    5a12:	2301      	movs	r3, #1
    5a14:	60ab      	str	r3, [r5, #8]
    5a16:	602b      	str	r3, [r5, #0]
    5a18:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    5a1a:	4b0b      	ldr	r3, [pc, #44]	; (5a48 <sys_clock_driver_init+0x78>)
    5a1c:	4a0b      	ldr	r2, [pc, #44]	; (5a4c <sys_clock_driver_init+0x7c>)
    5a1e:	9300      	str	r3, [sp, #0]
    5a20:	9401      	str	r4, [sp, #4]
    5a22:	2300      	movs	r3, #0
    5a24:	4620      	mov	r0, r4
    5a26:	f7ff ff2f 	bl	5888 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    5a2a:	4630      	mov	r0, r6
    5a2c:	f7fe ff7c 	bl	4928 <z_nrf_clock_control_lf_on>

	return 0;
}
    5a30:	4620      	mov	r0, r4
    5a32:	b002      	add	sp, #8
    5a34:	bd70      	pop	{r4, r5, r6, pc}
    5a36:	bf00      	nop
    5a38:	200008c8 	.word	0x200008c8
    5a3c:	40011000 	.word	0x40011000
    5a40:	e000e100 	.word	0xe000e100
    5a44:	2000170c 	.word	0x2000170c
    5a48:	00005771 	.word	0x00005771
    5a4c:	007fffff 	.word	0x007fffff

00005a50 <rtc_nrf_isr>:
{
    5a50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    5a54:	4c35      	ldr	r4, [pc, #212]	; (5b2c <rtc_nrf_isr+0xdc>)
    5a56:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    5a5a:	079a      	lsls	r2, r3, #30
    5a5c:	d50b      	bpl.n	5a76 <rtc_nrf_isr+0x26>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5a5e:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    5a62:	b143      	cbz	r3, 5a76 <rtc_nrf_isr+0x26>
		overflow_cnt++;
    5a64:	4a32      	ldr	r2, [pc, #200]	; (5b30 <rtc_nrf_isr+0xe0>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5a66:	2300      	movs	r3, #0
    5a68:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    5a6c:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    5a70:	6813      	ldr	r3, [r2, #0]
    5a72:	3301      	adds	r3, #1
    5a74:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    5a76:	f04f 0320 	mov.w	r3, #32
    5a7a:	f3ef 8211 	mrs	r2, BASEPRI
    5a7e:	f383 8812 	msr	BASEPRI_MAX, r3
    5a82:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    5a86:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    5a8a:	03db      	lsls	r3, r3, #15
    5a8c:	d512      	bpl.n	5ab4 <rtc_nrf_isr+0x64>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5a8e:	f3bf 8f5b 	dmb	ish
    5a92:	4b28      	ldr	r3, [pc, #160]	; (5b34 <rtc_nrf_isr+0xe4>)
    5a94:	e853 1f00 	ldrex	r1, [r3]
    5a98:	f021 0001 	bic.w	r0, r1, #1
    5a9c:	e843 0600 	strex	r6, r0, [r3]
    5aa0:	2e00      	cmp	r6, #0
    5aa2:	d1f7      	bne.n	5a94 <rtc_nrf_isr+0x44>
    5aa4:	f3bf 8f5b 	dmb	ish
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5aa8:	2900      	cmp	r1, #0
    5aaa:	d136      	bne.n	5b1a <rtc_nrf_isr+0xca>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5aac:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		if (result) {
    5ab0:	2b00      	cmp	r3, #0
    5ab2:	d132      	bne.n	5b1a <rtc_nrf_isr+0xca>
{
    5ab4:	2300      	movs	r3, #0
	__asm__ volatile(
    5ab6:	f382 8811 	msr	BASEPRI, r2
    5aba:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    5abe:	b34b      	cbz	r3, 5b14 <rtc_nrf_isr+0xc4>
		curr_time = z_nrf_rtc_timer_read();
    5ac0:	f7ff fec0 	bl	5844 <z_nrf_rtc_timer_read>
	__asm__ volatile(
    5ac4:	f04f 0320 	mov.w	r3, #32
    5ac8:	f3ef 8c11 	mrs	ip, BASEPRI
    5acc:	f383 8812 	msr	BASEPRI_MAX, r3
    5ad0:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    5ad4:	4b18      	ldr	r3, [pc, #96]	; (5b38 <rtc_nrf_isr+0xe8>)
    5ad6:	e9d3 6702 	ldrd	r6, r7, [r3, #8]
		if (curr_time >= expire_time) {
    5ada:	42b0      	cmp	r0, r6
    5adc:	eb71 0207 	sbcs.w	r2, r1, r7
    5ae0:	f04f 0200 	mov.w	r2, #0
    5ae4:	d320      	bcc.n	5b28 <rtc_nrf_isr+0xd8>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5ae6:	f04f 38ff 	mov.w	r8, #4294967295
    5aea:	f04f 39ff 	mov.w	r9, #4294967295
			user_context = cc_data[chan].user_context;
    5aee:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    5af2:	e9c3 8902 	strd	r8, r9, [r3, #8]
			cc_data[chan].callback = NULL;
    5af6:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    5af8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    5afc:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    5b00:	f38c 8811 	msr	BASEPRI, ip
    5b04:	f3bf 8f6f 	isb	sy
		if (handler) {
    5b08:	b121      	cbz	r1, 5b14 <rtc_nrf_isr+0xc4>
			handler(chan, expire_time, user_context);
    5b0a:	9500      	str	r5, [sp, #0]
    5b0c:	4632      	mov	r2, r6
    5b0e:	463b      	mov	r3, r7
    5b10:	2000      	movs	r0, #0
    5b12:	4788      	blx	r1
}
    5b14:	b003      	add	sp, #12
    5b16:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5b1a:	2300      	movs	r3, #0
    5b1c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
    5b20:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    5b24:	2301      	movs	r3, #1
}
    5b26:	e7c6      	b.n	5ab6 <rtc_nrf_isr+0x66>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    5b28:	4611      	mov	r1, r2
    5b2a:	e7e9      	b.n	5b00 <rtc_nrf_isr+0xb0>
    5b2c:	40011000 	.word	0x40011000
    5b30:	20001710 	.word	0x20001710
    5b34:	20001708 	.word	0x20001708
    5b38:	200008c8 	.word	0x200008c8

00005b3c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5b3c:	1c43      	adds	r3, r0, #1
{
    5b3e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5b40:	d021      	beq.n	5b86 <sys_clock_set_timeout+0x4a>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5b42:	2801      	cmp	r0, #1
    5b44:	dd21      	ble.n	5b8a <sys_clock_set_timeout+0x4e>
    5b46:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5b4a:	da20      	bge.n	5b8e <sys_clock_set_timeout+0x52>
    5b4c:	1e44      	subs	r4, r0, #1
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    5b4e:	f7ff fe79 	bl	5844 <z_nrf_rtc_timer_read>
    5b52:	4b10      	ldr	r3, [pc, #64]	; (5b94 <sys_clock_set_timeout+0x58>)
    5b54:	e9d3 1300 	ldrd	r1, r3, [r3]
    5b58:	1a40      	subs	r0, r0, r1
		ticks = 0;
    5b5a:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    5b5e:	bf28      	it	cs
    5b60:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    5b62:	3001      	adds	r0, #1
    5b64:	1902      	adds	r2, r0, r4
	uint64_t target_time = cyc + last_count;
    5b66:	480c      	ldr	r0, [pc, #48]	; (5b98 <sys_clock_set_timeout+0x5c>)
    5b68:	4282      	cmp	r2, r0
    5b6a:	bf28      	it	cs
    5b6c:	4602      	movcs	r2, r0
    5b6e:	1852      	adds	r2, r2, r1
    5b70:	f04f 0000 	mov.w	r0, #0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    5b74:	4909      	ldr	r1, [pc, #36]	; (5b9c <sys_clock_set_timeout+0x60>)
    5b76:	9001      	str	r0, [sp, #4]
    5b78:	9100      	str	r1, [sp, #0]
    5b7a:	f143 0300 	adc.w	r3, r3, #0
    5b7e:	f7ff fe83 	bl	5888 <compare_set>
}
    5b82:	b002      	add	sp, #8
    5b84:	bd10      	pop	{r4, pc}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    5b86:	4804      	ldr	r0, [pc, #16]	; (5b98 <sys_clock_set_timeout+0x5c>)
    5b88:	e7e0      	b.n	5b4c <sys_clock_set_timeout+0x10>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    5b8a:	2400      	movs	r4, #0
    5b8c:	e7df      	b.n	5b4e <sys_clock_set_timeout+0x12>
    5b8e:	4c02      	ldr	r4, [pc, #8]	; (5b98 <sys_clock_set_timeout+0x5c>)
    5b90:	e7dd      	b.n	5b4e <sys_clock_set_timeout+0x12>
    5b92:	bf00      	nop
    5b94:	200008d8 	.word	0x200008d8
    5b98:	007fffff 	.word	0x007fffff
    5b9c:	00005771 	.word	0x00005771

00005ba0 <sys_clock_elapsed>:
{
    5ba0:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    5ba2:	f7ff fe4f 	bl	5844 <z_nrf_rtc_timer_read>
    5ba6:	4b02      	ldr	r3, [pc, #8]	; (5bb0 <sys_clock_elapsed+0x10>)
    5ba8:	681b      	ldr	r3, [r3, #0]
}
    5baa:	1ac0      	subs	r0, r0, r3
    5bac:	bd08      	pop	{r3, pc}
    5bae:	bf00      	nop
    5bb0:	200008d8 	.word	0x200008d8

00005bb4 <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    5bb4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	z_impl_log_panic();
    5bb6:	f7fb fef9 	bl	19ac <z_impl_log_panic>
	defined(CONFIG_SPM_SERVICE_NS_HANDLER_FROM_SPM_FAULT)
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
    5bba:	4b07      	ldr	r3, [pc, #28]	; (5bd8 <k_sys_fatal_error_handler+0x24>)
    5bbc:	9305      	str	r3, [sp, #20]
    5bbe:	2302      	movs	r3, #2
    5bc0:	9304      	str	r3, [sp, #16]
    5bc2:	4806      	ldr	r0, [pc, #24]	; (5bdc <k_sys_fatal_error_handler+0x28>)
    5bc4:	2300      	movs	r3, #0
    5bc6:	aa04      	add	r2, sp, #16
    5bc8:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5bcc:	f004 ff21 	bl	aa12 <z_impl_z_log_msg2_static_create>
		sys_arch_reboot(0);
    5bd0:	2000      	movs	r0, #0
    5bd2:	f7fd fdeb 	bl	37ac <sys_arch_reboot>
		for (;;) {
			/* Spin endlessly */
		}
	}

	CODE_UNREACHABLE;
    5bd6:	bf00      	nop
    5bd8:	0000ce5b 	.word	0x0000ce5b
    5bdc:	0000bde0 	.word	0x0000bde0

00005be0 <RADIO_IRQHandler>:
	irq_unlock(key);
}

static void radio_irq_handler(void)
{
	if (NRF_RADIO->EVENTS_READY &&
    5be0:	4b19      	ldr	r3, [pc, #100]	; (5c48 <RADIO_IRQHandler+0x68>)
			event_handler(&event);
		}
	}
}

ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    5be2:	4668      	mov	r0, sp
    5be4:	f020 0107 	bic.w	r1, r0, #7
	if (NRF_RADIO->EVENTS_READY &&
    5be8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    5bec:	468d      	mov	sp, r1
    5bee:	b501      	push	{r0, lr}
	if (NRF_RADIO->EVENTS_READY &&
    5bf0:	b14a      	cbz	r2, 5c06 <RADIO_IRQHandler+0x26>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_READY_Msk)) {
    5bf2:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_READY &&
    5bf6:	07d0      	lsls	r0, r2, #31
		NRF_RADIO->EVENTS_READY = 0;
    5bf8:	bf41      	itttt	mi
    5bfa:	2200      	movmi	r2, #0
    5bfc:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
		ESB_SYS_TIMER->TASKS_START;
    5c00:	f503 4310 	addmi.w	r3, r3, #36864	; 0x9000
    5c04:	681b      	ldrmi	r3, [r3, #0]
	if (NRF_RADIO->EVENTS_END &&
    5c06:	4b10      	ldr	r3, [pc, #64]	; (5c48 <RADIO_IRQHandler+0x68>)
    5c08:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    5c0c:	b132      	cbz	r2, 5c1c <RADIO_IRQHandler+0x3c>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_END_Msk)) {
    5c0e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_END &&
    5c12:	0711      	lsls	r1, r2, #28
		NRF_RADIO->EVENTS_END = 0;
    5c14:	bf44      	itt	mi
    5c16:	2200      	movmi	r2, #0
    5c18:	f8c3 210c 	strmi.w	r2, [r3, #268]	; 0x10c
	if (NRF_RADIO->EVENTS_DISABLED &&
    5c1c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    5c20:	b152      	cbz	r2, 5c38 <RADIO_IRQHandler+0x58>
	    (NRF_RADIO->INTENSET & RADIO_INTENSET_DISABLED_Msk)) {
    5c22:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (NRF_RADIO->EVENTS_DISABLED &&
    5c26:	06d2      	lsls	r2, r2, #27
    5c28:	d506      	bpl.n	5c38 <RADIO_IRQHandler+0x58>
		NRF_RADIO->EVENTS_DISABLED = 0;
    5c2a:	2200      	movs	r2, #0
    5c2c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
		if (on_radio_disabled) {
    5c30:	4b06      	ldr	r3, [pc, #24]	; (5c4c <RADIO_IRQHandler+0x6c>)
    5c32:	681b      	ldr	r3, [r3, #0]
    5c34:	b103      	cbz	r3, 5c38 <RADIO_IRQHandler+0x58>
			on_radio_disabled();
    5c36:	4798      	blx	r3
{
	radio_irq_handler();

	ISR_DIRECT_PM();
    5c38:	f7fd f884 	bl	2d44 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING_ISR
	sys_trace_isr_exit();
#endif
	if (maybe_swap != 0) {
		z_arm_int_exit();
    5c3c:	f7fd f966 	bl	2f0c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(RADIO_IRQHandler)
    5c40:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    5c44:	4685      	mov	sp, r0
    5c46:	4770      	bx	lr
    5c48:	40001000 	.word	0x40001000
    5c4c:	20001720 	.word	0x20001720

00005c50 <SWI0_EGU0_IRQHandler>:

	return 1;
}


ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    5c50:	4668      	mov	r0, sp
    5c52:	f020 0107 	bic.w	r1, r0, #7
    5c56:	468d      	mov	sp, r1
    5c58:	b531      	push	{r0, r4, r5, lr}
	event.tx_attempts = last_tx_attempts;
    5c5a:	4b1b      	ldr	r3, [pc, #108]	; (5cc8 <SWI0_EGU0_IRQHandler+0x78>)
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    5c5c:	b082      	sub	sp, #8
	event.tx_attempts = last_tx_attempts;
    5c5e:	681b      	ldr	r3, [r3, #0]
    5c60:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
    5c62:	f04f 0320 	mov.w	r3, #32
    5c66:	f3ef 8111 	mrs	r1, BASEPRI
    5c6a:	f383 8812 	msr	BASEPRI_MAX, r3
    5c6e:	f3bf 8f6f 	isb	sy
	*interrupts = interrupt_flags;
    5c72:	4b16      	ldr	r3, [pc, #88]	; (5ccc <SWI0_EGU0_IRQHandler+0x7c>)
	interrupt_flags = 0;
    5c74:	2200      	movs	r2, #0
	*interrupts = interrupt_flags;
    5c76:	681d      	ldr	r5, [r3, #0]
	interrupt_flags = 0;
    5c78:	601a      	str	r2, [r3, #0]
	__asm__ volatile(
    5c7a:	f381 8811 	msr	BASEPRI, r1
    5c7e:	f3bf 8f6f 	isb	sy
	if (event_handler != NULL) {
    5c82:	4c13      	ldr	r4, [pc, #76]	; (5cd0 <SWI0_EGU0_IRQHandler+0x80>)
    5c84:	6823      	ldr	r3, [r4, #0]
    5c86:	b1ab      	cbz	r3, 5cb4 <SWI0_EGU0_IRQHandler+0x64>
		if (interrupts & INT_TX_SUCCESS_MSK) {
    5c88:	07e9      	lsls	r1, r5, #31
    5c8a:	d503      	bpl.n	5c94 <SWI0_EGU0_IRQHandler+0x44>
			event.evt_id = ESB_EVENT_TX_SUCCESS;
    5c8c:	f88d 2000 	strb.w	r2, [sp]
			event_handler(&event);
    5c90:	4668      	mov	r0, sp
    5c92:	4798      	blx	r3
		if (interrupts & INT_TX_FAILED_MSK) {
    5c94:	07aa      	lsls	r2, r5, #30
    5c96:	d505      	bpl.n	5ca4 <SWI0_EGU0_IRQHandler+0x54>
			event.evt_id = ESB_EVENT_TX_FAILED;
    5c98:	2301      	movs	r3, #1
    5c9a:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    5c9e:	4668      	mov	r0, sp
    5ca0:	6823      	ldr	r3, [r4, #0]
    5ca2:	4798      	blx	r3
		if (interrupts & INT_RX_DATA_RECEIVED_MSK) {
    5ca4:	076b      	lsls	r3, r5, #29
    5ca6:	d505      	bpl.n	5cb4 <SWI0_EGU0_IRQHandler+0x64>
			event.evt_id = ESB_EVENT_RX_RECEIVED;
    5ca8:	2302      	movs	r3, #2
    5caa:	f88d 3000 	strb.w	r3, [sp]
			event_handler(&event);
    5cae:	4668      	mov	r0, sp
    5cb0:	6823      	ldr	r3, [r4, #0]
    5cb2:	4798      	blx	r3
{
	esb_evt_irq_handler();

	ISR_DIRECT_PM();
    5cb4:	f7fd f846 	bl	2d44 <_arch_isr_direct_pm>
    5cb8:	f7fd f928 	bl	2f0c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_EVT_IRQHandler)
    5cbc:	b002      	add	sp, #8
    5cbe:	e8bd 4031 	ldmia.w	sp!, {r0, r4, r5, lr}
    5cc2:	4685      	mov	sp, r0
    5cc4:	4770      	bx	lr
    5cc6:	bf00      	nop
    5cc8:	2000171c 	.word	0x2000171c
    5ccc:	20001718 	.word	0x20001718
    5cd0:	20001714 	.word	0x20001714

00005cd4 <pmw3360_channel_get>:
{
	struct pmw3360_data *dev_data = &pmw3360_data;

	ARG_UNUSED(dev);

	if (unlikely(!dev_data->ready)) {
    5cd4:	4b0b      	ldr	r3, [pc, #44]	; (5d04 <pmw3360_channel_get+0x30>)
    5cd6:	f893 0068 	ldrb.w	r0, [r3, #104]	; 0x68
    5cda:	b178      	cbz	r0, 5cfc <pmw3360_channel_get+0x28>
		LOG_DBG("Device is not initialized yet");
		return -EBUSY;
	}

	switch (chan) {
    5cdc:	2923      	cmp	r1, #35	; 0x23
    5cde:	d004      	beq.n	5cea <pmw3360_channel_get+0x16>
    5ce0:	2924      	cmp	r1, #36	; 0x24
    5ce2:	d008      	beq.n	5cf6 <pmw3360_channel_get+0x22>
    5ce4:	f06f 0085 	mvn.w	r0, #133	; 0x85
    5ce8:	4770      	bx	lr
	case SENSOR_CHAN_POS_DX:
		val->val1 = dev_data->x;
    5cea:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
		val->val2 = 0;
		break;

	case SENSOR_CHAN_POS_DY:
		val->val1 = dev_data->y;
    5cee:	6013      	str	r3, [r2, #0]
		val->val2 = 0;
    5cf0:	2000      	movs	r0, #0
    5cf2:	6050      	str	r0, [r2, #4]
		break;
    5cf4:	4770      	bx	lr
		val->val1 = dev_data->y;
    5cf6:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
    5cfa:	e7f8      	b.n	5cee <pmw3360_channel_get+0x1a>
		return -EBUSY;
    5cfc:	f06f 000f 	mvn.w	r0, #15
	default:
		return -ENOTSUP;
	}

	return 0;
}
    5d00:	4770      	bx	lr
    5d02:	bf00      	nop
    5d04:	200008e0 	.word	0x200008e0

00005d08 <pmw3360_async_init>:
{
    5d08:	b570      	push	{r4, r5, r6, lr}
	dev_data->err = async_init_fn[dev_data->async_init_step](dev_data);
    5d0a:	4c22      	ldr	r4, [pc, #136]	; (5d94 <pmw3360_async_init+0x8c>)
    5d0c:	4b22      	ldr	r3, [pc, #136]	; (5d98 <pmw3360_async_init+0x90>)
    5d0e:	f894 2060 	ldrb.w	r2, [r4, #96]	; 0x60
{
    5d12:	b086      	sub	sp, #24
	dev_data->err = async_init_fn[dev_data->async_init_step](dev_data);
    5d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
    5d18:	4620      	mov	r0, r4
    5d1a:	4798      	blx	r3
    5d1c:	4601      	mov	r1, r0
    5d1e:	6660      	str	r0, [r4, #100]	; 0x64
	if (dev_data->err) {
    5d20:	b158      	cbz	r0, 5d3a <pmw3360_async_init+0x32>
		LOG_ERR("PMW3360 initialization failed");
    5d22:	4b1e      	ldr	r3, [pc, #120]	; (5d9c <pmw3360_async_init+0x94>)
    5d24:	9305      	str	r3, [sp, #20]
    5d26:	2302      	movs	r3, #2
    5d28:	9304      	str	r3, [sp, #16]
    5d2a:	aa04      	add	r2, sp, #16
    5d2c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
			LOG_INF("PMW3360 initialized");
    5d30:	481b      	ldr	r0, [pc, #108]	; (5da0 <pmw3360_async_init+0x98>)
    5d32:	f005 f9ad 	bl	b090 <z_log_msg2_static_create.constprop.0>
}
    5d36:	b006      	add	sp, #24
    5d38:	bd70      	pop	{r4, r5, r6, pc}
		dev_data->async_init_step++;
    5d3a:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
    5d3e:	3301      	adds	r3, #1
    5d40:	b2db      	uxtb	r3, r3
		if (dev_data->async_init_step == ASYNC_INIT_STEP_COUNT) {
    5d42:	2b05      	cmp	r3, #5
		dev_data->async_init_step++;
    5d44:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		if (dev_data->async_init_step == ASYNC_INIT_STEP_COUNT) {
    5d48:	d10a      	bne.n	5d60 <pmw3360_async_init+0x58>
			dev_data->ready = true;
    5d4a:	2301      	movs	r3, #1
    5d4c:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
			LOG_INF("PMW3360 initialized");
    5d50:	4b14      	ldr	r3, [pc, #80]	; (5da4 <pmw3360_async_init+0x9c>)
    5d52:	9305      	str	r3, [sp, #20]
    5d54:	2302      	movs	r3, #2
    5d56:	9304      	str	r3, [sp, #16]
    5d58:	aa04      	add	r2, sp, #16
    5d5a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    5d5e:	e7e7      	b.n	5d30 <pmw3360_async_init+0x28>
					K_MSEC(async_init_delay[
    5d60:	4a11      	ldr	r2, [pc, #68]	; (5da8 <pmw3360_async_init+0xa0>)
    5d62:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
    5d66:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    5d6a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
    5d6e:	f240 30e7 	movw	r0, #999	; 0x3e7
    5d72:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    5d76:	2300      	movs	r3, #0
    5d78:	fbc5 0106 	smlal	r0, r1, r5, r6
    5d7c:	f7fa f9b0 	bl	e0 <__aeabi_uldivmod>
    5d80:	4602      	mov	r2, r0
    5d82:	460b      	mov	r3, r1
			k_work_schedule(&dev_data->init_work,
    5d84:	f104 0030 	add.w	r0, r4, #48	; 0x30
}
    5d88:	b006      	add	sp, #24
    5d8a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			k_work_schedule(&dev_data->init_work,
    5d8e:	f003 ba47 	b.w	9220 <k_work_schedule>
    5d92:	bf00      	nop
    5d94:	200008e0 	.word	0x200008e0
    5d98:	0000c0b0 	.word	0x0000c0b0
    5d9c:	0000ce78 	.word	0x0000ce78
    5da0:	0000be10 	.word	0x0000be10
    5da4:	0000ce96 	.word	0x0000ce96
    5da8:	0000c09c 	.word	0x0000c09c

00005dac <spi_write.constprop.0>:
 * @param tx_bufs Buffer array where data to be sent originates from.
 *
 * @retval 0 If successful.
 * @retval -errno Negative errno code on failure.
 */
static inline int spi_write(const struct device *dev,
    5dac:	b410      	push	{r4}
    5dae:	460a      	mov	r2, r1
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    5db0:	6883      	ldr	r3, [r0, #8]
    5db2:	4903      	ldr	r1, [pc, #12]	; (5dc0 <spi_write.constprop.0+0x14>)
    5db4:	681c      	ldr	r4, [r3, #0]
    5db6:	2300      	movs	r3, #0
    5db8:	46a4      	mov	ip, r4
			    const struct spi_config *config,
			    const struct spi_buf_set *tx_bufs)
{
	return spi_transceive(dev, config, tx_bufs, NULL);
}
    5dba:	bc10      	pop	{r4}
	return api->transceive(dev, config, tx_bufs, rx_bufs);
    5dbc:	4760      	bx	ip
    5dbe:	bf00      	nop
    5dc0:	0000c0d8 	.word	0x0000c0d8

00005dc4 <spi_cs_ctrl>:
{
    5dc4:	b530      	push	{r4, r5, lr}
    5dc6:	4604      	mov	r4, r0
    5dc8:	b087      	sub	sp, #28
	if (!enable) {
    5dca:	460d      	mov	r5, r1
    5dcc:	b911      	cbnz	r1, 5dd4 <spi_cs_ctrl+0x10>
		k_busy_wait(T_NCS_SCLK);
    5dce:	2001      	movs	r0, #1
    5dd0:	f005 f95c 	bl	b08c <k_busy_wait>
	err = gpio_pin_set_raw(dev_data->cs_gpio_dev, PMW3360_CS_GPIO_PIN, val);
    5dd4:	6820      	ldr	r0, [r4, #0]
	if (value != 0)	{
    5dd6:	b9b5      	cbnz	r5, 5e06 <spi_cs_ctrl+0x42>
	return api->port_set_bits_raw(port, pins);
    5dd8:	6883      	ldr	r3, [r0, #8]
    5dda:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    5ddc:	2140      	movs	r1, #64	; 0x40
    5dde:	4798      	blx	r3
    5de0:	4604      	mov	r4, r0
	if (err) {
    5de2:	b148      	cbz	r0, 5df8 <spi_cs_ctrl+0x34>
		LOG_ERR("SPI CS ctrl failed");
    5de4:	4b09      	ldr	r3, [pc, #36]	; (5e0c <spi_cs_ctrl+0x48>)
    5de6:	9305      	str	r3, [sp, #20]
    5de8:	4809      	ldr	r0, [pc, #36]	; (5e10 <spi_cs_ctrl+0x4c>)
    5dea:	2302      	movs	r3, #2
    5dec:	aa04      	add	r2, sp, #16
    5dee:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5df2:	9304      	str	r3, [sp, #16]
    5df4:	f005 f94c 	bl	b090 <z_log_msg2_static_create.constprop.0>
	if (enable) {
    5df8:	b115      	cbz	r5, 5e00 <spi_cs_ctrl+0x3c>
		k_busy_wait(T_NCS_SCLK);
    5dfa:	2001      	movs	r0, #1
    5dfc:	f005 f946 	bl	b08c <k_busy_wait>
}
    5e00:	4620      	mov	r0, r4
    5e02:	b007      	add	sp, #28
    5e04:	bd30      	pop	{r4, r5, pc}
    5e06:	6883      	ldr	r3, [r0, #8]
    5e08:	691b      	ldr	r3, [r3, #16]
    5e0a:	e7e7      	b.n	5ddc <spi_cs_ctrl+0x18>
    5e0c:	0000ceaa 	.word	0x0000ceaa
    5e10:	0000be10 	.word	0x0000be10

00005e14 <reg_write.part.0>:
static int reg_write(struct pmw3360_data *dev_data, uint8_t reg, uint8_t val)
    5e14:	b570      	push	{r4, r5, r6, lr}
    5e16:	b08c      	sub	sp, #48	; 0x30
	const struct spi_buf tx_buf = {
    5e18:	ab01      	add	r3, sp, #4
	uint8_t buf[] = {
    5e1a:	f061 017f 	orn	r1, r1, #127	; 0x7f
	const struct spi_buf tx_buf = {
    5e1e:	9302      	str	r3, [sp, #8]
	const struct spi_buf_set tx = {
    5e20:	ab02      	add	r3, sp, #8
	uint8_t buf[] = {
    5e22:	f88d 1004 	strb.w	r1, [sp, #4]
	const struct spi_buf_set tx = {
    5e26:	9304      	str	r3, [sp, #16]
static int reg_write(struct pmw3360_data *dev_data, uint8_t reg, uint8_t val)
    5e28:	4605      	mov	r5, r0
	const struct spi_buf_set tx = {
    5e2a:	2301      	movs	r3, #1
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    5e2c:	6880      	ldr	r0, [r0, #8]
	uint8_t buf[] = {
    5e2e:	f88d 2005 	strb.w	r2, [sp, #5]
	const struct spi_buf tx_buf = {
    5e32:	2602      	movs	r6, #2
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    5e34:	a904      	add	r1, sp, #16
	const struct spi_buf tx_buf = {
    5e36:	9603      	str	r6, [sp, #12]
	const struct spi_buf_set tx = {
    5e38:	9305      	str	r3, [sp, #20]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    5e3a:	f7ff ffb7 	bl	5dac <spi_write.constprop.0>
	if (err) {
    5e3e:	4604      	mov	r4, r0
    5e40:	b158      	cbz	r0, 5e5a <reg_write.part.0+0x46>
		LOG_ERR("Reg write failed on SPI write");
    5e42:	4b0e      	ldr	r3, [pc, #56]	; (5e7c <reg_write.part.0+0x68>)
    5e44:	480e      	ldr	r0, [pc, #56]	; (5e80 <reg_write.part.0+0x6c>)
    5e46:	aa0a      	add	r2, sp, #40	; 0x28
    5e48:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5e4c:	e9cd 630a 	strd	r6, r3, [sp, #40]	; 0x28
    5e50:	f005 f91e 	bl	b090 <z_log_msg2_static_create.constprop.0>
}
    5e54:	4620      	mov	r0, r4
    5e56:	b00c      	add	sp, #48	; 0x30
    5e58:	bd70      	pop	{r4, r5, r6, pc}
	k_busy_wait(T_SCLK_NCS_WR);
    5e5a:	2022      	movs	r0, #34	; 0x22
    5e5c:	f005 f916 	bl	b08c <k_busy_wait>
	err = spi_cs_ctrl(dev_data, false);
    5e60:	4621      	mov	r1, r4
    5e62:	4628      	mov	r0, r5
    5e64:	f7ff ffae 	bl	5dc4 <spi_cs_ctrl>
	if (err) {
    5e68:	4604      	mov	r4, r0
    5e6a:	2800      	cmp	r0, #0
    5e6c:	d1f2      	bne.n	5e54 <reg_write.part.0+0x40>
	k_busy_wait(T_SWX);
    5e6e:	2092      	movs	r0, #146	; 0x92
    5e70:	f005 f90c 	bl	b08c <k_busy_wait>
	dev_data->last_read_burst = false;
    5e74:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69
	return 0;
    5e78:	e7ec      	b.n	5e54 <reg_write.part.0+0x40>
    5e7a:	bf00      	nop
    5e7c:	0000cebd 	.word	0x0000cebd
    5e80:	0000be10 	.word	0x0000be10

00005e84 <update_cpi>:
{
    5e84:	b5f0      	push	{r4, r5, r6, r7, lr}
	if ((cpi > PMW3360_MAX_CPI) || (cpi < PMW3360_MIN_CPI)) {
    5e86:	f1a1 0264 	sub.w	r2, r1, #100	; 0x64
    5e8a:	f642 637c 	movw	r3, #11900	; 0x2e7c
{
    5e8e:	b087      	sub	sp, #28
	if ((cpi > PMW3360_MAX_CPI) || (cpi < PMW3360_MIN_CPI)) {
    5e90:	429a      	cmp	r2, r3
{
    5e92:	4605      	mov	r5, r0
    5e94:	af00      	add	r7, sp, #0
	if ((cpi > PMW3360_MAX_CPI) || (cpi < PMW3360_MIN_CPI)) {
    5e96:	d914      	bls.n	5ec2 <update_cpi+0x3e>
		LOG_ERR("CPI value %u out of range", cpi);
    5e98:	466c      	mov	r4, sp
    5e9a:	4b1e      	ldr	r3, [pc, #120]	; (5f14 <update_cpi+0x90>)
    5e9c:	481e      	ldr	r0, [pc, #120]	; (5f18 <update_cpi+0x94>)
    5e9e:	b088      	sub	sp, #32
    5ea0:	466a      	mov	r2, sp
    5ea2:	e9c2 3105 	strd	r3, r1, [r2, #20]
    5ea6:	2303      	movs	r3, #3
    5ea8:	f842 3f10 	str.w	r3, [r2, #16]!
    5eac:	f44f 51c2 	mov.w	r1, #6208	; 0x1840
    5eb0:	f005 f8ee 	bl	b090 <z_log_msg2_static_create.constprop.0>
    5eb4:	46a5      	mov	sp, r4
		return -EINVAL;
    5eb6:	f06f 0415 	mvn.w	r4, #21
}
    5eba:	4620      	mov	r0, r4
    5ebc:	371c      	adds	r7, #28
    5ebe:	46bd      	mov	sp, r7
    5ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	LOG_INF("Setting CPI to %u (reg value 0x%x)", cpi, value);
    5ec2:	4b16      	ldr	r3, [pc, #88]	; (5f1c <update_cpi+0x98>)
    5ec4:	4814      	ldr	r0, [pc, #80]	; (5f18 <update_cpi+0x94>)
    5ec6:	466e      	mov	r6, sp
    5ec8:	b088      	sub	sp, #32
    5eca:	466a      	mov	r2, sp
	uint8_t value = (cpi / 100) - 1;
    5ecc:	2464      	movs	r4, #100	; 0x64
    5ece:	fbb1 f4f4 	udiv	r4, r1, r4
    5ed2:	3c01      	subs	r4, #1
	LOG_INF("Setting CPI to %u (reg value 0x%x)", cpi, value);
    5ed4:	e9c2 3105 	strd	r3, r1, [r2, #20]
	uint8_t value = (cpi / 100) - 1;
    5ed8:	b2e4      	uxtb	r4, r4
	LOG_INF("Setting CPI to %u (reg value 0x%x)", cpi, value);
    5eda:	2304      	movs	r3, #4
    5edc:	61d4      	str	r4, [r2, #28]
    5ede:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    5ee2:	f842 3f10 	str.w	r3, [r2, #16]!
    5ee6:	f005 f8d3 	bl	b090 <z_log_msg2_static_create.constprop.0>
	int err = reg_write(dev_data, PMW3360_REG_CONFIG1, value);
    5eea:	4622      	mov	r2, r4
    5eec:	46b5      	mov	sp, r6
    5eee:	210f      	movs	r1, #15
    5ef0:	4628      	mov	r0, r5
    5ef2:	f005 f8d0 	bl	b096 <reg_write>
	if (err) {
    5ef6:	4604      	mov	r4, r0
    5ef8:	2800      	cmp	r0, #0
    5efa:	d0de      	beq.n	5eba <update_cpi+0x36>
		LOG_ERR("Failed to change CPI");
    5efc:	4b08      	ldr	r3, [pc, #32]	; (5f20 <update_cpi+0x9c>)
    5efe:	617b      	str	r3, [r7, #20]
    5f00:	4805      	ldr	r0, [pc, #20]	; (5f18 <update_cpi+0x94>)
    5f02:	2302      	movs	r3, #2
    5f04:	f107 0210 	add.w	r2, r7, #16
    5f08:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5f0c:	613b      	str	r3, [r7, #16]
    5f0e:	f005 f8bf 	bl	b090 <z_log_msg2_static_create.constprop.0>
    5f12:	e7d2      	b.n	5eba <update_cpi+0x36>
    5f14:	0000cedb 	.word	0x0000cedb
    5f18:	0000be10 	.word	0x0000be10
    5f1c:	0000cef5 	.word	0x0000cef5
    5f20:	0000cf18 	.word	0x0000cf18

00005f24 <update_downshift_time>:
{
    5f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	switch (reg_addr) {
    5f28:	2917      	cmp	r1, #23
{
    5f2a:	b086      	sub	sp, #24
    5f2c:	4606      	mov	r6, r0
    5f2e:	af00      	add	r7, sp, #0
    5f30:	460d      	mov	r5, r1
    5f32:	4614      	mov	r4, r2
	switch (reg_addr) {
    5f34:	d015      	beq.n	5f62 <update_downshift_time+0x3e>
    5f36:	291a      	cmp	r1, #26
    5f38:	d02c      	beq.n	5f94 <update_downshift_time+0x70>
    5f3a:	2914      	cmp	r1, #20
    5f3c:	d02e      	beq.n	5f9c <update_downshift_time+0x78>
		LOG_ERR("Not supported");
    5f3e:	4b2d      	ldr	r3, [pc, #180]	; (5ff4 <update_downshift_time+0xd0>)
    5f40:	617b      	str	r3, [r7, #20]
    5f42:	482d      	ldr	r0, [pc, #180]	; (5ff8 <update_downshift_time+0xd4>)
    5f44:	2302      	movs	r3, #2
    5f46:	f107 0210 	add.w	r2, r7, #16
    5f4a:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -ENOTSUP;
    5f4e:	f06f 0485 	mvn.w	r4, #133	; 0x85
		LOG_ERR("Not supported");
    5f52:	613b      	str	r3, [r7, #16]
    5f54:	f005 f89c 	bl	b090 <z_log_msg2_static_create.constprop.0>
}
    5f58:	4620      	mov	r0, r4
    5f5a:	3718      	adds	r7, #24
    5f5c:	46bd      	mov	sp, r7
    5f5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		maxtime = 81600;
    5f62:	4a26      	ldr	r2, [pc, #152]	; (5ffc <update_downshift_time+0xd8>)
		mintime = 320;
    5f64:	f44f 73a0 	mov.w	r3, #320	; 0x140
	if ((time > maxtime) || (time < mintime)) {
    5f68:	4294      	cmp	r4, r2
    5f6a:	d801      	bhi.n	5f70 <update_downshift_time+0x4c>
    5f6c:	429c      	cmp	r4, r3
    5f6e:	d219      	bcs.n	5fa4 <update_downshift_time+0x80>
		LOG_WRN("Downshift time %u out of range", time);
    5f70:	4b23      	ldr	r3, [pc, #140]	; (6000 <update_downshift_time+0xdc>)
    5f72:	4821      	ldr	r0, [pc, #132]	; (5ff8 <update_downshift_time+0xd4>)
    5f74:	466d      	mov	r5, sp
    5f76:	b088      	sub	sp, #32
    5f78:	466a      	mov	r2, sp
    5f7a:	e9c2 3405 	strd	r3, r4, [r2, #20]
    5f7e:	2303      	movs	r3, #3
    5f80:	f842 3f10 	str.w	r3, [r2, #16]!
    5f84:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    5f88:	f005 f882 	bl	b090 <z_log_msg2_static_create.constprop.0>
		return -EINVAL;
    5f8c:	f06f 0415 	mvn.w	r4, #21
    5f90:	46ad      	mov	sp, r5
    5f92:	e7e1      	b.n	5f58 <update_downshift_time+0x34>
	switch (reg_addr) {
    5f94:	4a1b      	ldr	r2, [pc, #108]	; (6004 <update_downshift_time+0xe0>)
    5f96:	f44f 6348 	mov.w	r3, #3200	; 0xc80
    5f9a:	e7e5      	b.n	5f68 <update_downshift_time+0x44>
		mintime = 10;
    5f9c:	230a      	movs	r3, #10
		maxtime = 2550;
    5f9e:	f640 12f6 	movw	r2, #2550	; 0x9f6
    5fa2:	e7e1      	b.n	5f68 <update_downshift_time+0x44>
	LOG_INF("Set downshift time to %u ms (reg value 0x%x)", time, value);
    5fa4:	4918      	ldr	r1, [pc, #96]	; (6008 <update_downshift_time+0xe4>)
	uint8_t value = time / mintime;
    5fa6:	fbb4 f3f3 	udiv	r3, r4, r3
	LOG_INF("Set downshift time to %u ms (reg value 0x%x)", time, value);
    5faa:	46e8      	mov	r8, sp
    5fac:	b088      	sub	sp, #32
    5fae:	466a      	mov	r2, sp
    5fb0:	e9c2 1405 	strd	r1, r4, [r2, #20]
    5fb4:	b2dc      	uxtb	r4, r3
    5fb6:	2304      	movs	r3, #4
    5fb8:	61d4      	str	r4, [r2, #28]
    5fba:	480f      	ldr	r0, [pc, #60]	; (5ff8 <update_downshift_time+0xd4>)
    5fbc:	f842 3f10 	str.w	r3, [r2, #16]!
    5fc0:	f44f 5103 	mov.w	r1, #8384	; 0x20c0
    5fc4:	f005 f864 	bl	b090 <z_log_msg2_static_create.constprop.0>
	int err = reg_write(dev_data, reg_addr, value);
    5fc8:	4622      	mov	r2, r4
    5fca:	46c5      	mov	sp, r8
    5fcc:	4629      	mov	r1, r5
    5fce:	4630      	mov	r0, r6
    5fd0:	f005 f861 	bl	b096 <reg_write>
	if (err) {
    5fd4:	4604      	mov	r4, r0
    5fd6:	2800      	cmp	r0, #0
    5fd8:	d0be      	beq.n	5f58 <update_downshift_time+0x34>
		LOG_ERR("Failed to change downshift time");
    5fda:	4b0c      	ldr	r3, [pc, #48]	; (600c <update_downshift_time+0xe8>)
    5fdc:	617b      	str	r3, [r7, #20]
    5fde:	4806      	ldr	r0, [pc, #24]	; (5ff8 <update_downshift_time+0xd4>)
    5fe0:	2302      	movs	r3, #2
    5fe2:	f107 0210 	add.w	r2, r7, #16
    5fe6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    5fea:	613b      	str	r3, [r7, #16]
    5fec:	f005 f850 	bl	b090 <z_log_msg2_static_create.constprop.0>
    5ff0:	e7b2      	b.n	5f58 <update_downshift_time+0x34>
    5ff2:	bf00      	nop
    5ff4:	0000cf2d 	.word	0x0000cf2d
    5ff8:	0000be10 	.word	0x0000be10
    5ffc:	00013ec0 	.word	0x00013ec0
    6000:	0000cf3b 	.word	0x0000cf3b
    6004:	000c7380 	.word	0x000c7380
    6008:	0000cf5a 	.word	0x0000cf5a
    600c:	0000cf87 	.word	0x0000cf87

00006010 <pmw3360_async_init_configure>:
{
    6010:	b510      	push	{r4, lr}
	err = update_cpi(dev_data, CONFIG_PMW3360_CPI);
    6012:	f44f 61c8 	mov.w	r1, #1600	; 0x640
{
    6016:	4604      	mov	r4, r0
	err = update_cpi(dev_data, CONFIG_PMW3360_CPI);
    6018:	f7ff ff34 	bl	5e84 <update_cpi>
	if (!err) {
    601c:	b9a0      	cbnz	r0, 6048 <pmw3360_async_init_configure+0x38>
		err = update_downshift_time(dev_data,
    601e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
    6022:	2114      	movs	r1, #20
    6024:	4620      	mov	r0, r4
    6026:	f7ff ff7d 	bl	5f24 <update_downshift_time>
	if (!err) {
    602a:	b968      	cbnz	r0, 6048 <pmw3360_async_init_configure+0x38>
		err = update_downshift_time(dev_data,
    602c:	f242 4204 	movw	r2, #9220	; 0x2404
    6030:	2117      	movs	r1, #23
    6032:	4620      	mov	r0, r4
    6034:	f7ff ff76 	bl	5f24 <update_downshift_time>
	if (!err) {
    6038:	b930      	cbnz	r0, 6048 <pmw3360_async_init_configure+0x38>
		err = update_downshift_time(dev_data,
    603a:	4620      	mov	r0, r4
    603c:	4a03      	ldr	r2, [pc, #12]	; (604c <pmw3360_async_init_configure+0x3c>)
}
    603e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		err = update_downshift_time(dev_data,
    6042:	211a      	movs	r1, #26
    6044:	f7ff bf6e 	b.w	5f24 <update_downshift_time>
}
    6048:	bd10      	pop	{r4, pc}
    604a:	bf00      	nop
    604c:	000249f0 	.word	0x000249f0

00006050 <update_sample_time.constprop.0>:
static int update_sample_time(struct pmw3360_data *dev_data,
    6050:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if ((sample_time > maxtime) || (sample_time < mintime)) {
    6054:	1e56      	subs	r6, r2, #1
static int update_sample_time(struct pmw3360_data *dev_data,
    6056:	b086      	sub	sp, #24
	if ((sample_time > maxtime) || (sample_time < mintime)) {
    6058:	f5b6 6f1b 	cmp.w	r6, #2480	; 0x9b0
static int update_sample_time(struct pmw3360_data *dev_data,
    605c:	4604      	mov	r4, r0
    605e:	af00      	add	r7, sp, #0
    6060:	460d      	mov	r5, r1
    6062:	4613      	mov	r3, r2
	if ((sample_time > maxtime) || (sample_time < mintime)) {
    6064:	d315      	bcc.n	6092 <update_sample_time.constprop.0+0x42>
		LOG_WRN("Sample time %u out of range", sample_time);
    6066:	466c      	mov	r4, sp
    6068:	491f      	ldr	r1, [pc, #124]	; (60e8 <update_sample_time.constprop.0+0x98>)
    606a:	4820      	ldr	r0, [pc, #128]	; (60ec <update_sample_time.constprop.0+0x9c>)
    606c:	b088      	sub	sp, #32
    606e:	466a      	mov	r2, sp
    6070:	e9c2 1305 	strd	r1, r3, [r2, #20]
    6074:	2303      	movs	r3, #3
    6076:	f842 3f10 	str.w	r3, [r2, #16]!
    607a:	f44f 51c4 	mov.w	r1, #6272	; 0x1880
    607e:	f005 f807 	bl	b090 <z_log_msg2_static_create.constprop.0>
    6082:	46a5      	mov	sp, r4
		return -EINVAL;
    6084:	f06f 0415 	mvn.w	r4, #21
}
    6088:	4620      	mov	r0, r4
    608a:	3718      	adds	r7, #24
    608c:	46bd      	mov	sp, r7
    608e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LOG_INF("Set sample time to %u ms", sample_time);
    6092:	4917      	ldr	r1, [pc, #92]	; (60f0 <update_sample_time.constprop.0+0xa0>)
    6094:	4815      	ldr	r0, [pc, #84]	; (60ec <update_sample_time.constprop.0+0x9c>)
    6096:	46e8      	mov	r8, sp
    6098:	b088      	sub	sp, #32
    609a:	466a      	mov	r2, sp
    609c:	e9c2 1305 	strd	r1, r3, [r2, #20]
    60a0:	2303      	movs	r3, #3
    60a2:	f842 3f10 	str.w	r3, [r2, #16]!
    60a6:	f44f 51c6 	mov.w	r1, #6336	; 0x18c0
    60aa:	f004 fff1 	bl	b090 <z_log_msg2_static_create.constprop.0>
	int err = reg_write(dev_data, reg_addr_lower, buf[0]);
    60ae:	4621      	mov	r1, r4
    60b0:	4810      	ldr	r0, [pc, #64]	; (60f4 <update_sample_time.constprop.0+0xa4>)
    60b2:	46c5      	mov	sp, r8
    60b4:	b2f2      	uxtb	r2, r6
    60b6:	f004 ffee 	bl	b096 <reg_write>
	if (!err) {
    60ba:	4604      	mov	r4, r0
    60bc:	b938      	cbnz	r0, 60ce <update_sample_time.constprop.0+0x7e>
		err = reg_write(dev_data, reg_addr_upper, buf[1]);
    60be:	480d      	ldr	r0, [pc, #52]	; (60f4 <update_sample_time.constprop.0+0xa4>)
    60c0:	f3c6 2207 	ubfx	r2, r6, #8, #8
    60c4:	4629      	mov	r1, r5
    60c6:	f004 ffe6 	bl	b096 <reg_write>
    60ca:	4604      	mov	r4, r0
    60cc:	e7dc      	b.n	6088 <update_sample_time.constprop.0+0x38>
		LOG_ERR("Failed to change sample time");
    60ce:	4b0a      	ldr	r3, [pc, #40]	; (60f8 <update_sample_time.constprop.0+0xa8>)
    60d0:	617b      	str	r3, [r7, #20]
    60d2:	4806      	ldr	r0, [pc, #24]	; (60ec <update_sample_time.constprop.0+0x9c>)
    60d4:	2302      	movs	r3, #2
    60d6:	f107 0210 	add.w	r2, r7, #16
    60da:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    60de:	613b      	str	r3, [r7, #16]
    60e0:	f004 ffd6 	bl	b090 <z_log_msg2_static_create.constprop.0>
    60e4:	e7d0      	b.n	6088 <update_sample_time.constprop.0+0x38>
    60e6:	bf00      	nop
    60e8:	0000cfa7 	.word	0x0000cfa7
    60ec:	0000be10 	.word	0x0000be10
    60f0:	0000cfc3 	.word	0x0000cfc3
    60f4:	200008e0 	.word	0x200008e0
    60f8:	0000cfdc 	.word	0x0000cfdc

000060fc <pmw3360_async_init_fw_load_continue>:
{
    60fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    60fe:	b08f      	sub	sp, #60	; 0x3c
	LOG_INF("Uploading optical sensor firmware...");
    6100:	4b35      	ldr	r3, [pc, #212]	; (61d8 <pmw3360_async_init_fw_load_continue+0xdc>)
    6102:	930d      	str	r3, [sp, #52]	; 0x34
{
    6104:	4605      	mov	r5, r0
	LOG_INF("Uploading optical sensor firmware...");
    6106:	aa0c      	add	r2, sp, #48	; 0x30
    6108:	4834      	ldr	r0, [pc, #208]	; (61dc <pmw3360_async_init_fw_load_continue+0xe0>)
    610a:	f44f 5186 	mov.w	r1, #4288	; 0x10c0
    610e:	2602      	movs	r6, #2
    6110:	960c      	str	r6, [sp, #48]	; 0x30
    6112:	f004 ffbd 	bl	b090 <z_log_msg2_static_create.constprop.0>
	err = reg_write(dev_data, PMW3360_REG_SROM_ENABLE, 0x18);
    6116:	2218      	movs	r2, #24
    6118:	2113      	movs	r1, #19
    611a:	4628      	mov	r0, r5
    611c:	f004 ffbb 	bl	b096 <reg_write>
	if (err) {
    6120:	4604      	mov	r4, r0
    6122:	b148      	cbz	r0, 6138 <pmw3360_async_init_fw_load_continue+0x3c>
		LOG_ERR("Cannot start SROM download");
    6124:	4b2e      	ldr	r3, [pc, #184]	; (61e0 <pmw3360_async_init_fw_load_continue+0xe4>)
    6126:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
		LOG_ERR("Cannot write firmware to sensor");
    612a:	482c      	ldr	r0, [pc, #176]	; (61dc <pmw3360_async_init_fw_load_continue+0xe0>)
    612c:	aa0c      	add	r2, sp, #48	; 0x30
    612e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6132:	f004 ffad 	bl	b090 <z_log_msg2_static_create.constprop.0>
    6136:	e029      	b.n	618c <pmw3360_async_init_fw_load_continue+0x90>
	err = burst_write(dev_data, PMW3360_REG_SROM_LOAD_BURST,
    6138:	4b2a      	ldr	r3, [pc, #168]	; (61e4 <pmw3360_async_init_fw_load_continue+0xe8>)
	err = spi_cs_ctrl(dev_data, true);
    613a:	2101      	movs	r1, #1
	err = burst_write(dev_data, PMW3360_REG_SROM_LOAD_BURST,
    613c:	681b      	ldr	r3, [r3, #0]
    613e:	9301      	str	r3, [sp, #4]
	err = spi_cs_ctrl(dev_data, true);
    6140:	4628      	mov	r0, r5
    6142:	f7ff fe3f 	bl	5dc4 <spi_cs_ctrl>
	if (err) {
    6146:	4604      	mov	r4, r0
    6148:	bb60      	cbnz	r0, 61a4 <pmw3360_async_init_fw_load_continue+0xa8>
	uint8_t write_buf = reg | SPI_WRITE_BIT;
    614a:	23e2      	movs	r3, #226	; 0xe2
    614c:	f88d 300f 	strb.w	r3, [sp, #15]
	struct spi_buf tx_buf = {
    6150:	f10d 030f 	add.w	r3, sp, #15
    6154:	9304      	str	r3, [sp, #16]
	const struct spi_buf_set tx = {
    6156:	aa04      	add	r2, sp, #16
	struct spi_buf tx_buf = {
    6158:	2301      	movs	r3, #1
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    615a:	68a8      	ldr	r0, [r5, #8]
	struct spi_buf tx_buf = {
    615c:	9305      	str	r3, [sp, #20]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    615e:	a906      	add	r1, sp, #24
	const struct spi_buf_set tx = {
    6160:	e9cd 2306 	strd	r2, r3, [sp, #24]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    6164:	f7ff fe22 	bl	5dac <spi_write.constprop.0>
	if (err) {
    6168:	4604      	mov	r4, r0
    616a:	b990      	cbnz	r0, 6192 <pmw3360_async_init_fw_load_continue+0x96>
    616c:	4f1e      	ldr	r7, [pc, #120]	; (61e8 <pmw3360_async_init_fw_load_continue+0xec>)
	for (size_t i = 0; i < size; i++) {
    616e:	4606      	mov	r6, r0
    6170:	9b01      	ldr	r3, [sp, #4]
    6172:	42b3      	cmp	r3, r6
    6174:	d11b      	bne.n	61ae <pmw3360_async_init_fw_load_continue+0xb2>
	err = spi_cs_ctrl(dev_data, false);
    6176:	2100      	movs	r1, #0
    6178:	4628      	mov	r0, r5
    617a:	f7ff fe23 	bl	5dc4 <spi_cs_ctrl>
	if (err) {
    617e:	4604      	mov	r4, r0
    6180:	b980      	cbnz	r0, 61a4 <pmw3360_async_init_fw_load_continue+0xa8>
	k_busy_wait(T_BEXIT);
    6182:	2001      	movs	r0, #1
    6184:	f004 ff82 	bl	b08c <k_busy_wait>
	dev_data->last_read_burst = false;
    6188:	f885 4069 	strb.w	r4, [r5, #105]	; 0x69
}
    618c:	4620      	mov	r0, r4
    618e:	b00f      	add	sp, #60	; 0x3c
    6190:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Burst write failed on SPI write");
    6192:	4b16      	ldr	r3, [pc, #88]	; (61ec <pmw3360_async_init_fw_load_continue+0xf0>)
    6194:	e9cd 630c 	strd	r6, r3, [sp, #48]	; 0x30
			LOG_ERR("Burst write failed on SPI write (data)");
    6198:	4810      	ldr	r0, [pc, #64]	; (61dc <pmw3360_async_init_fw_load_continue+0xe0>)
    619a:	aa0c      	add	r2, sp, #48	; 0x30
    619c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    61a0:	f004 ff76 	bl	b090 <z_log_msg2_static_create.constprop.0>
		LOG_ERR("Cannot write firmware to sensor");
    61a4:	4b12      	ldr	r3, [pc, #72]	; (61f0 <pmw3360_async_init_fw_load_continue+0xf4>)
    61a6:	930d      	str	r3, [sp, #52]	; 0x34
    61a8:	2302      	movs	r3, #2
    61aa:	930c      	str	r3, [sp, #48]	; 0x30
    61ac:	e7bd      	b.n	612a <pmw3360_async_init_fw_load_continue+0x2e>
		write_buf = buf[i];
    61ae:	f817 3b01 	ldrb.w	r3, [r7], #1
		err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    61b2:	68a8      	ldr	r0, [r5, #8]
		write_buf = buf[i];
    61b4:	f88d 300f 	strb.w	r3, [sp, #15]
		err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    61b8:	a906      	add	r1, sp, #24
    61ba:	f7ff fdf7 	bl	5dac <spi_write.constprop.0>
		if (err) {
    61be:	4604      	mov	r4, r0
    61c0:	b120      	cbz	r0, 61cc <pmw3360_async_init_fw_load_continue+0xd0>
			LOG_ERR("Burst write failed on SPI write (data)");
    61c2:	4b0c      	ldr	r3, [pc, #48]	; (61f4 <pmw3360_async_init_fw_load_continue+0xf8>)
    61c4:	930d      	str	r3, [sp, #52]	; 0x34
    61c6:	2302      	movs	r3, #2
    61c8:	930c      	str	r3, [sp, #48]	; 0x30
    61ca:	e7e5      	b.n	6198 <pmw3360_async_init_fw_load_continue+0x9c>
		k_busy_wait(T_BRSEP);
    61cc:	200f      	movs	r0, #15
    61ce:	f004 ff5d 	bl	b08c <k_busy_wait>
	for (size_t i = 0; i < size; i++) {
    61d2:	3601      	adds	r6, #1
    61d4:	e7cc      	b.n	6170 <pmw3360_async_init_fw_load_continue+0x74>
    61d6:	bf00      	nop
    61d8:	0000cff9 	.word	0x0000cff9
    61dc:	0000be10 	.word	0x0000be10
    61e0:	0000d01e 	.word	0x0000d01e
    61e4:	0000c0e4 	.word	0x0000c0e4
    61e8:	0000d316 	.word	0x0000d316
    61ec:	0000d039 	.word	0x0000d039
    61f0:	0000d080 	.word	0x0000d080
    61f4:	0000d059 	.word	0x0000d059

000061f8 <irq_handler>:
{
    61f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	err = gpio_pin_interrupt_configure(pmw3360_data.irq_gpio_dev,
    61fa:	4b0e      	ldr	r3, [pc, #56]	; (6234 <irq_handler+0x3c>)
    61fc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    6200:	6858      	ldr	r0, [r3, #4]
    6202:	f004 ff5c 	bl	b0be <gpio_pin_interrupt_configure.constprop.0>
	if (unlikely(err)) {
    6206:	b178      	cbz	r0, 6228 <irq_handler+0x30>
		LOG_ERR("Cannot disable IRQ");
    6208:	4b0b      	ldr	r3, [pc, #44]	; (6238 <irq_handler+0x40>)
    620a:	9305      	str	r3, [sp, #20]
    620c:	480b      	ldr	r0, [pc, #44]	; (623c <irq_handler+0x44>)
    620e:	2302      	movs	r3, #2
    6210:	aa04      	add	r2, sp, #16
    6212:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6216:	9304      	str	r3, [sp, #16]
    6218:	f004 ff3a 	bl	b090 <z_log_msg2_static_create.constprop.0>
		k_panic();
    621c:	4040      	eors	r0, r0
    621e:	f380 8811 	msr	BASEPRI, r0
    6222:	f04f 0004 	mov.w	r0, #4
    6226:	df02      	svc	2
	k_work_submit(&pmw3360_data.trigger_handler_work);
    6228:	4805      	ldr	r0, [pc, #20]	; (6240 <irq_handler+0x48>)
}
    622a:	b007      	add	sp, #28
    622c:	f85d eb04 	ldr.w	lr, [sp], #4
	k_work_submit(&pmw3360_data.trigger_handler_work);
    6230:	f002 bf8e 	b.w	9150 <k_work_submit>
    6234:	200008e0 	.word	0x200008e0
    6238:	0000d0a0 	.word	0x0000d0a0
    623c:	0000be10 	.word	0x0000be10
    6240:	20000900 	.word	0x20000900

00006244 <trigger_handler>:
{
    6244:	b530      	push	{r4, r5, lr}
    6246:	b089      	sub	sp, #36	; 0x24
	__asm__ volatile(
    6248:	f04f 0320 	mov.w	r3, #32
    624c:	f3ef 8211 	mrs	r2, BASEPRI
    6250:	f383 8812 	msr	BASEPRI_MAX, r3
    6254:	f3bf 8f6f 	isb	sy
	handler = pmw3360_data.data_ready_handler;
    6258:	4c1a      	ldr	r4, [pc, #104]	; (62c4 <trigger_handler+0x80>)
    625a:	69e3      	ldr	r3, [r4, #28]
	__asm__ volatile(
    625c:	f382 8811 	msr	BASEPRI, r2
    6260:	f3bf 8f6f 	isb	sy
	if (!handler) {
    6264:	b363      	cbz	r3, 62c0 <trigger_handler+0x7c>
	struct sensor_trigger trig = {
    6266:	2201      	movs	r2, #1
    6268:	f8ad 2004 	strh.w	r2, [sp, #4]
    626c:	2239      	movs	r2, #57	; 0x39
	handler(DEVICE_DT_INST_GET(0), &trig);
    626e:	4816      	ldr	r0, [pc, #88]	; (62c8 <trigger_handler+0x84>)
	struct sensor_trigger trig = {
    6270:	f8ad 2006 	strh.w	r2, [sp, #6]
	handler(DEVICE_DT_INST_GET(0), &trig);
    6274:	a901      	add	r1, sp, #4
    6276:	4798      	blx	r3
	__asm__ volatile(
    6278:	f04f 0320 	mov.w	r3, #32
    627c:	f3ef 8511 	mrs	r5, BASEPRI
    6280:	f383 8812 	msr	BASEPRI_MAX, r3
    6284:	f3bf 8f6f 	isb	sy
	if (pmw3360_data.data_ready_handler) {
    6288:	69e0      	ldr	r0, [r4, #28]
    628a:	b120      	cbz	r0, 6296 <trigger_handler+0x52>
		err = gpio_pin_interrupt_configure(pmw3360_data.irq_gpio_dev,
    628c:	6860      	ldr	r0, [r4, #4]
    628e:	f04f 7110 	mov.w	r1, #37748736	; 0x2400000
    6292:	f004 ff14 	bl	b0be <gpio_pin_interrupt_configure.constprop.0>
	__asm__ volatile(
    6296:	f385 8811 	msr	BASEPRI, r5
    629a:	f3bf 8f6f 	isb	sy
	if (unlikely(err)) {
    629e:	b178      	cbz	r0, 62c0 <trigger_handler+0x7c>
		LOG_ERR("Cannot re-enable IRQ");
    62a0:	4b0a      	ldr	r3, [pc, #40]	; (62cc <trigger_handler+0x88>)
    62a2:	9307      	str	r3, [sp, #28]
    62a4:	480a      	ldr	r0, [pc, #40]	; (62d0 <trigger_handler+0x8c>)
    62a6:	2302      	movs	r3, #2
    62a8:	aa06      	add	r2, sp, #24
    62aa:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    62ae:	9306      	str	r3, [sp, #24]
    62b0:	f004 feee 	bl	b090 <z_log_msg2_static_create.constprop.0>
		k_panic();
    62b4:	4040      	eors	r0, r0
    62b6:	f380 8811 	msr	BASEPRI, r0
    62ba:	f04f 0004 	mov.w	r0, #4
    62be:	df02      	svc	2
}
    62c0:	b009      	add	sp, #36	; 0x24
    62c2:	bd30      	pop	{r4, r5, pc}
    62c4:	200008e0 	.word	0x200008e0
    62c8:	0000bc58 	.word	0x0000bc58
    62cc:	0000d0b3 	.word	0x0000d0b3
    62d0:	0000be10 	.word	0x0000be10

000062d4 <pmw3360_trigger_set>:
	struct pmw3360_data *dev_data = &pmw3360_data;
	int err;

	ARG_UNUSED(dev);

	if (unlikely(trig->type != SENSOR_TRIG_DATA_READY)) {
    62d4:	880b      	ldrh	r3, [r1, #0]
    62d6:	2b01      	cmp	r3, #1
{
    62d8:	b570      	push	{r4, r5, r6, lr}
    62da:	4615      	mov	r5, r2
	if (unlikely(trig->type != SENSOR_TRIG_DATA_READY)) {
    62dc:	d11e      	bne.n	631c <pmw3360_trigger_set+0x48>
		return -ENOTSUP;
	}

	if (unlikely(trig->chan != SENSOR_CHAN_ALL)) {
    62de:	884b      	ldrh	r3, [r1, #2]
    62e0:	2b39      	cmp	r3, #57	; 0x39
    62e2:	d11b      	bne.n	631c <pmw3360_trigger_set+0x48>
		return -ENOTSUP;
	}

	if (unlikely(!dev_data->ready)) {
    62e4:	4c10      	ldr	r4, [pc, #64]	; (6328 <pmw3360_trigger_set+0x54>)
    62e6:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
    62ea:	b1d3      	cbz	r3, 6322 <pmw3360_trigger_set+0x4e>
	__asm__ volatile(
    62ec:	f04f 0320 	mov.w	r3, #32
    62f0:	f3ef 8611 	mrs	r6, BASEPRI
    62f4:	f383 8812 	msr	BASEPRI_MAX, r3
    62f8:	f3bf 8f6f 	isb	sy
		return -EBUSY;
	}

	k_spinlock_key_t key = k_spin_lock(&dev_data->lock);

	if (handler) {
    62fc:	b15a      	cbz	r2, 6316 <pmw3360_trigger_set+0x42>
		err = gpio_pin_interrupt_configure(dev_data->irq_gpio_dev,
    62fe:	f04f 7110 	mov.w	r1, #37748736	; 0x2400000
						   PMW3360_IRQ_GPIO_PIN,
						   GPIO_INT_LEVEL_LOW);
	} else {
		err = gpio_pin_interrupt_configure(dev_data->irq_gpio_dev,
    6302:	6860      	ldr	r0, [r4, #4]
    6304:	f004 fedb 	bl	b0be <gpio_pin_interrupt_configure.constprop.0>
						   PMW3360_IRQ_GPIO_PIN,
						   GPIO_INT_DISABLE);
	}

	if (!err) {
    6308:	b900      	cbnz	r0, 630c <pmw3360_trigger_set+0x38>
		dev_data->data_ready_handler = handler;
    630a:	61e5      	str	r5, [r4, #28]
	__asm__ volatile(
    630c:	f386 8811 	msr	BASEPRI, r6
    6310:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&dev_data->lock, key);

	return err;
}
    6314:	bd70      	pop	{r4, r5, r6, pc}
		err = gpio_pin_interrupt_configure(dev_data->irq_gpio_dev,
    6316:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
    631a:	e7f2      	b.n	6302 <pmw3360_trigger_set+0x2e>
		return -ENOTSUP;
    631c:	f06f 0085 	mvn.w	r0, #133	; 0x85
    6320:	e7f8      	b.n	6314 <pmw3360_trigger_set+0x40>
		return -EBUSY;
    6322:	f06f 000f 	mvn.w	r0, #15
    6326:	e7f5      	b.n	6314 <pmw3360_trigger_set+0x40>
    6328:	200008e0 	.word	0x200008e0

0000632c <reg_read>:
{
    632c:	b5f0      	push	{r4, r5, r6, r7, lr}
    632e:	b091      	sub	sp, #68	; 0x44
    6330:	4607      	mov	r7, r0
    6332:	f88d 1007 	strb.w	r1, [sp, #7]
	err = spi_cs_ctrl(dev_data, true);
    6336:	2101      	movs	r1, #1
{
    6338:	4616      	mov	r6, r2
	err = spi_cs_ctrl(dev_data, true);
    633a:	f7ff fd43 	bl	5dc4 <spi_cs_ctrl>
	if (err) {
    633e:	4604      	mov	r4, r0
    6340:	b9b8      	cbnz	r0, 6372 <reg_read+0x46>
	const struct spi_buf tx_buf = {
    6342:	f10d 0307 	add.w	r3, sp, #7
    6346:	9302      	str	r3, [sp, #8]
    6348:	2501      	movs	r5, #1
	const struct spi_buf_set tx = {
    634a:	ab02      	add	r3, sp, #8
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    634c:	68b8      	ldr	r0, [r7, #8]
	const struct spi_buf tx_buf = {
    634e:	9503      	str	r5, [sp, #12]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    6350:	a904      	add	r1, sp, #16
	const struct spi_buf_set tx = {
    6352:	e9cd 3504 	strd	r3, r5, [sp, #16]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    6356:	f7ff fd29 	bl	5dac <spi_write.constprop.0>
	if (err) {
    635a:	4604      	mov	r4, r0
    635c:	b160      	cbz	r0, 6378 <reg_read+0x4c>
		LOG_ERR("Reg read failed on SPI write");
    635e:	4b16      	ldr	r3, [pc, #88]	; (63b8 <reg_read+0x8c>)
		LOG_ERR("Reg read failed on SPI read");
    6360:	930f      	str	r3, [sp, #60]	; 0x3c
    6362:	4816      	ldr	r0, [pc, #88]	; (63bc <reg_read+0x90>)
    6364:	2302      	movs	r3, #2
    6366:	aa0e      	add	r2, sp, #56	; 0x38
    6368:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    636c:	930e      	str	r3, [sp, #56]	; 0x38
    636e:	f004 fe8f 	bl	b090 <z_log_msg2_static_create.constprop.0>
}
    6372:	4620      	mov	r0, r4
    6374:	b011      	add	sp, #68	; 0x44
    6376:	bdf0      	pop	{r4, r5, r6, r7, pc}
	k_busy_wait(T_SRAD);
    6378:	20a0      	movs	r0, #160	; 0xa0
    637a:	f004 fe87 	bl	b08c <k_busy_wait>
	const struct spi_buf_set rx = {
    637e:	ab06      	add	r3, sp, #24
	struct spi_buf rx_buf = {
    6380:	e9cd 6506 	strd	r6, r5, [sp, #24]
	const struct spi_buf_set rx = {
    6384:	e9cd 3508 	strd	r3, r5, [sp, #32]
	err = spi_read(dev_data->spi_dev, &spi_cfg, &rx);
    6388:	68b8      	ldr	r0, [r7, #8]
    638a:	6883      	ldr	r3, [r0, #8]
    638c:	490c      	ldr	r1, [pc, #48]	; (63c0 <reg_read+0x94>)
    638e:	681d      	ldr	r5, [r3, #0]
    6390:	4622      	mov	r2, r4
    6392:	ab08      	add	r3, sp, #32
    6394:	47a8      	blx	r5
	if (err) {
    6396:	4604      	mov	r4, r0
    6398:	b108      	cbz	r0, 639e <reg_read+0x72>
		LOG_ERR("Reg read failed on SPI read");
    639a:	4b0a      	ldr	r3, [pc, #40]	; (63c4 <reg_read+0x98>)
    639c:	e7e0      	b.n	6360 <reg_read+0x34>
	err = spi_cs_ctrl(dev_data, false);
    639e:	4601      	mov	r1, r0
    63a0:	4638      	mov	r0, r7
    63a2:	f7ff fd0f 	bl	5dc4 <spi_cs_ctrl>
	if (err) {
    63a6:	4604      	mov	r4, r0
    63a8:	2800      	cmp	r0, #0
    63aa:	d1e2      	bne.n	6372 <reg_read+0x46>
	k_busy_wait(T_SRX);
    63ac:	2013      	movs	r0, #19
    63ae:	f004 fe6d 	bl	b08c <k_busy_wait>
	dev_data->last_read_burst = false;
    63b2:	f887 4069 	strb.w	r4, [r7, #105]	; 0x69
	return 0;
    63b6:	e7dc      	b.n	6372 <reg_read+0x46>
    63b8:	0000d0c8 	.word	0x0000d0c8
    63bc:	0000be10 	.word	0x0000be10
    63c0:	0000c0d8 	.word	0x0000c0d8
    63c4:	0000d0e5 	.word	0x0000d0e5

000063c8 <pmw3360_async_init_fw_load_verify>:
{
    63c8:	b530      	push	{r4, r5, lr}
    63ca:	b089      	sub	sp, #36	; 0x24
	err = reg_read(dev_data, PMW3360_REG_SROM_ID, &fw_id);
    63cc:	f10d 0206 	add.w	r2, sp, #6
    63d0:	212a      	movs	r1, #42	; 0x2a
{
    63d2:	4605      	mov	r5, r0
	err = reg_read(dev_data, PMW3360_REG_SROM_ID, &fw_id);
    63d4:	f7ff ffaa 	bl	632c <reg_read>
	if (err) {
    63d8:	4604      	mov	r4, r0
    63da:	b150      	cbz	r0, 63f2 <pmw3360_async_init_fw_load_verify+0x2a>
		LOG_ERR("Cannot obtain firmware id");
    63dc:	4b1b      	ldr	r3, [pc, #108]	; (644c <pmw3360_async_init_fw_load_verify+0x84>)
		LOG_ERR("Cannot enable REST modes");
    63de:	9307      	str	r3, [sp, #28]
    63e0:	481b      	ldr	r0, [pc, #108]	; (6450 <pmw3360_async_init_fw_load_verify+0x88>)
    63e2:	2302      	movs	r3, #2
    63e4:	aa06      	add	r2, sp, #24
    63e6:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    63ea:	9306      	str	r3, [sp, #24]
    63ec:	f004 fe50 	bl	b090 <z_log_msg2_static_create.constprop.0>
    63f0:	e00f      	b.n	6412 <pmw3360_async_init_fw_load_verify+0x4a>
	if (fw_id != PMW3360_FIRMWARE_ID) {
    63f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
    63f6:	2b04      	cmp	r3, #4
    63f8:	d00e      	beq.n	6418 <pmw3360_async_init_fw_load_verify+0x50>
		LOG_ERR("Chip is not running from SROM!");
    63fa:	4b16      	ldr	r3, [pc, #88]	; (6454 <pmw3360_async_init_fw_load_verify+0x8c>)
		LOG_ERR("Invalid product id!");
    63fc:	9307      	str	r3, [sp, #28]
    63fe:	4814      	ldr	r0, [pc, #80]	; (6450 <pmw3360_async_init_fw_load_verify+0x88>)
    6400:	2302      	movs	r3, #2
    6402:	aa06      	add	r2, sp, #24
    6404:	f44f 5182 	mov.w	r1, #4160	; 0x1040
		return -EIO;
    6408:	f06f 0404 	mvn.w	r4, #4
		LOG_ERR("Invalid product id!");
    640c:	9306      	str	r3, [sp, #24]
    640e:	f004 fe3f 	bl	b090 <z_log_msg2_static_create.constprop.0>
}
    6412:	4620      	mov	r0, r4
    6414:	b009      	add	sp, #36	; 0x24
    6416:	bd30      	pop	{r4, r5, pc}
	err = reg_read(dev_data, PMW3360_REG_PRODUCT_ID, &product_id);
    6418:	4601      	mov	r1, r0
    641a:	f10d 0207 	add.w	r2, sp, #7
    641e:	4628      	mov	r0, r5
    6420:	f7ff ff84 	bl	632c <reg_read>
	if (err) {
    6424:	4604      	mov	r4, r0
    6426:	b108      	cbz	r0, 642c <pmw3360_async_init_fw_load_verify+0x64>
		LOG_ERR("Cannot obtain product id");
    6428:	4b0b      	ldr	r3, [pc, #44]	; (6458 <pmw3360_async_init_fw_load_verify+0x90>)
    642a:	e7d8      	b.n	63de <pmw3360_async_init_fw_load_verify+0x16>
	if (product_id != PMW3360_PRODUCT_ID) {
    642c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    6430:	2b42      	cmp	r3, #66	; 0x42
    6432:	d001      	beq.n	6438 <pmw3360_async_init_fw_load_verify+0x70>
		LOG_ERR("Invalid product id!");
    6434:	4b09      	ldr	r3, [pc, #36]	; (645c <pmw3360_async_init_fw_load_verify+0x94>)
    6436:	e7e1      	b.n	63fc <pmw3360_async_init_fw_load_verify+0x34>
	err = reg_write(dev_data, PMW3360_REG_CONFIG2, 0x20);
    6438:	2220      	movs	r2, #32
    643a:	2110      	movs	r1, #16
    643c:	4628      	mov	r0, r5
    643e:	f004 fe2a 	bl	b096 <reg_write>
	if (err) {
    6442:	4604      	mov	r4, r0
    6444:	2800      	cmp	r0, #0
    6446:	d0e4      	beq.n	6412 <pmw3360_async_init_fw_load_verify+0x4a>
		LOG_ERR("Cannot enable REST modes");
    6448:	4b05      	ldr	r3, [pc, #20]	; (6460 <pmw3360_async_init_fw_load_verify+0x98>)
    644a:	e7c8      	b.n	63de <pmw3360_async_init_fw_load_verify+0x16>
    644c:	0000d101 	.word	0x0000d101
    6450:	0000be10 	.word	0x0000be10
    6454:	0000d11b 	.word	0x0000d11b
    6458:	0000d13a 	.word	0x0000d13a
    645c:	0000d153 	.word	0x0000d153
    6460:	0000d167 	.word	0x0000d167

00006464 <pmw3360_async_init_fw_load_start>:
{
    6464:	b570      	push	{r4, r5, r6, lr}
    6466:	4606      	mov	r6, r0
    6468:	b086      	sub	sp, #24
	for (uint8_t reg = 0x02; (reg <= 0x06) && !err; reg++) {
    646a:	2502      	movs	r5, #2
		err = reg_read(dev_data, reg, buf);
    646c:	4629      	mov	r1, r5
    646e:	466a      	mov	r2, sp
    6470:	4630      	mov	r0, r6
    6472:	f7ff ff5b 	bl	632c <reg_read>
	for (uint8_t reg = 0x02; (reg <= 0x06) && !err; reg++) {
    6476:	3501      	adds	r5, #1
    6478:	b2ed      	uxtb	r5, r5
    647a:	2d07      	cmp	r5, #7
		err = reg_read(dev_data, reg, buf);
    647c:	4604      	mov	r4, r0
	for (uint8_t reg = 0x02; (reg <= 0x06) && !err; reg++) {
    647e:	d00e      	beq.n	649e <pmw3360_async_init_fw_load_start+0x3a>
    6480:	2800      	cmp	r0, #0
    6482:	d0f3      	beq.n	646c <pmw3360_async_init_fw_load_start+0x8>
		LOG_ERR("Cannot read from data registers");
    6484:	4b10      	ldr	r3, [pc, #64]	; (64c8 <pmw3360_async_init_fw_load_start+0x64>)
		LOG_ERR("Cannot initialize SROM");
    6486:	9305      	str	r3, [sp, #20]
    6488:	4810      	ldr	r0, [pc, #64]	; (64cc <pmw3360_async_init_fw_load_start+0x68>)
    648a:	2302      	movs	r3, #2
    648c:	aa04      	add	r2, sp, #16
    648e:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6492:	9304      	str	r3, [sp, #16]
    6494:	f004 fdfc 	bl	b090 <z_log_msg2_static_create.constprop.0>
}
    6498:	4620      	mov	r0, r4
    649a:	b006      	add	sp, #24
    649c:	bd70      	pop	{r4, r5, r6, pc}
	if (err) {
    649e:	2800      	cmp	r0, #0
    64a0:	d1f0      	bne.n	6484 <pmw3360_async_init_fw_load_start+0x20>
	err = reg_write(dev_data, PMW3360_REG_CONFIG2, 0x00);
    64a2:	4602      	mov	r2, r0
    64a4:	2110      	movs	r1, #16
    64a6:	4630      	mov	r0, r6
    64a8:	f004 fdf5 	bl	b096 <reg_write>
	if (err) {
    64ac:	4604      	mov	r4, r0
    64ae:	b108      	cbz	r0, 64b4 <pmw3360_async_init_fw_load_start+0x50>
		LOG_ERR("Cannot disable REST mode");
    64b0:	4b07      	ldr	r3, [pc, #28]	; (64d0 <pmw3360_async_init_fw_load_start+0x6c>)
    64b2:	e7e8      	b.n	6486 <pmw3360_async_init_fw_load_start+0x22>
	err = reg_write(dev_data, PMW3360_REG_SROM_ENABLE, 0x1D);
    64b4:	221d      	movs	r2, #29
    64b6:	2113      	movs	r1, #19
    64b8:	4630      	mov	r0, r6
    64ba:	f004 fdec 	bl	b096 <reg_write>
	if (err) {
    64be:	4604      	mov	r4, r0
    64c0:	2800      	cmp	r0, #0
    64c2:	d0e9      	beq.n	6498 <pmw3360_async_init_fw_load_start+0x34>
		LOG_ERR("Cannot initialize SROM");
    64c4:	4b03      	ldr	r3, [pc, #12]	; (64d4 <pmw3360_async_init_fw_load_start+0x70>)
    64c6:	e7de      	b.n	6486 <pmw3360_async_init_fw_load_start+0x22>
    64c8:	0000d180 	.word	0x0000d180
    64cc:	0000be10 	.word	0x0000be10
    64d0:	0000d1a0 	.word	0x0000d1a0
    64d4:	0000d1b9 	.word	0x0000d1b9

000064d8 <pmw3360_attr_set>:

static int pmw3360_attr_set(const struct device *dev, enum sensor_channel chan,
			    enum sensor_attribute attr,
			    const struct sensor_value *val)
{
    64d8:	b5b0      	push	{r4, r5, r7, lr}
	struct pmw3360_data *dev_data = &pmw3360_data;
	int err;

	ARG_UNUSED(dev);

	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    64da:	2939      	cmp	r1, #57	; 0x39
{
    64dc:	b088      	sub	sp, #32
    64de:	af00      	add	r7, sp, #0
	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    64e0:	d179      	bne.n	65d6 <pmw3360_attr_set+0xfe>
		return -ENOTSUP;
	}

	if (unlikely(!dev_data->ready)) {
    64e2:	4940      	ldr	r1, [pc, #256]	; (65e4 <pmw3360_attr_set+0x10c>)
    64e4:	f891 1068 	ldrb.w	r1, [r1, #104]	; 0x68
    64e8:	2900      	cmp	r1, #0
    64ea:	d077      	beq.n	65dc <pmw3360_attr_set+0x104>
		LOG_DBG("Device is not initialized yet");
		return -EBUSY;
	}

	switch ((uint32_t)attr) {
    64ec:	3a0e      	subs	r2, #14
    64ee:	2a07      	cmp	r2, #7
    64f0:	d866      	bhi.n	65c0 <pmw3360_attr_set+0xe8>
    64f2:	e8df f002 	tbb	[pc, r2]
    64f6:	0a04      	.short	0x0a04
    64f8:	5754514b 	.word	0x5754514b
    64fc:	615d      	.short	0x615d
	case PMW3360_ATTR_CPI:
		err = update_cpi(dev_data, PMW3360_SVALUE_TO_CPI(*val));
    64fe:	6819      	ldr	r1, [r3, #0]
    6500:	4838      	ldr	r0, [pc, #224]	; (65e4 <pmw3360_attr_set+0x10c>)
    6502:	f7ff fcbf 	bl	5e84 <update_cpi>
					PMW3360_REG_CONFIG2,
					PMW3360_SVALUE_TO_BOOL(*val));
		break;

	case PMW3360_ATTR_RUN_DOWNSHIFT_TIME:
		err = update_downshift_time(dev_data,
    6506:	4604      	mov	r4, r0
					    PMW3360_REG_RUN_DOWNSHIFT,
					    PMW3360_SVALUE_TO_TIME(*val));
		break;
    6508:	e012      	b.n	6530 <pmw3360_attr_set+0x58>
	int err = reg_read(dev_data, reg_addr, &value);
    650a:	4836      	ldr	r0, [pc, #216]	; (65e4 <pmw3360_attr_set+0x10c>)
					PMW3360_SVALUE_TO_BOOL(*val));
    650c:	681d      	ldr	r5, [r3, #0]
	int err = reg_read(dev_data, reg_addr, &value);
    650e:	1dfa      	adds	r2, r7, #7
    6510:	2110      	movs	r1, #16
    6512:	f7ff ff0b 	bl	632c <reg_read>
	if (err) {
    6516:	4604      	mov	r4, r0
    6518:	b170      	cbz	r0, 6538 <pmw3360_attr_set+0x60>
		LOG_ERR("Failed to read Config2 register");
    651a:	4b33      	ldr	r3, [pc, #204]	; (65e8 <pmw3360_attr_set+0x110>)
    651c:	61fb      	str	r3, [r7, #28]
    651e:	2302      	movs	r3, #2
    6520:	61bb      	str	r3, [r7, #24]
		LOG_ERR("Failed to set rest mode");
    6522:	4832      	ldr	r0, [pc, #200]	; (65ec <pmw3360_attr_set+0x114>)
    6524:	f107 0218 	add.w	r2, r7, #24
    6528:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    652c:	f004 fdb0 	bl	b090 <z_log_msg2_static_create.constprop.0>
		LOG_ERR("Unknown attribute");
		return -ENOTSUP;
	}

	return err;
}
    6530:	4620      	mov	r0, r4
    6532:	3720      	adds	r7, #32
    6534:	46bd      	mov	sp, r7
    6536:	bdb0      	pop	{r4, r5, r7, pc}
	WRITE_BIT(value, PMW3360_REST_EN_POS, enable);
    6538:	79fb      	ldrb	r3, [r7, #7]
    653a:	b325      	cbz	r5, 6586 <pmw3360_attr_set+0xae>
    653c:	f043 0320 	orr.w	r3, r3, #32
	LOG_INF("%sable rest modes", (enable) ? ("En") : ("Dis"));
    6540:	4a2b      	ldr	r2, [pc, #172]	; (65f0 <pmw3360_attr_set+0x118>)
	WRITE_BIT(value, PMW3360_REST_EN_POS, enable);
    6542:	71fb      	strb	r3, [r7, #7]
	LOG_INF("%sable rest modes", (enable) ? ("En") : ("Dis"));
    6544:	4b2b      	ldr	r3, [pc, #172]	; (65f4 <pmw3360_attr_set+0x11c>)
    6546:	492c      	ldr	r1, [pc, #176]	; (65f8 <pmw3360_attr_set+0x120>)
    6548:	4828      	ldr	r0, [pc, #160]	; (65ec <pmw3360_attr_set+0x114>)
    654a:	466c      	mov	r4, sp
    654c:	b088      	sub	sp, #32
    654e:	2d00      	cmp	r5, #0
    6550:	bf08      	it	eq
    6552:	4613      	moveq	r3, r2
    6554:	466a      	mov	r2, sp
    6556:	e9c2 1305 	strd	r1, r3, [r2, #20]
    655a:	2502      	movs	r5, #2
    655c:	4b27      	ldr	r3, [pc, #156]	; (65fc <pmw3360_attr_set+0x124>)
    655e:	7715      	strb	r5, [r2, #28]
    6560:	f44f 51d6 	mov.w	r1, #6848	; 0x1ac0
    6564:	f842 3f10 	str.w	r3, [r2, #16]!
    6568:	f004 fd92 	bl	b090 <z_log_msg2_static_create.constprop.0>
	err = reg_write(dev_data, reg_addr, value);
    656c:	481d      	ldr	r0, [pc, #116]	; (65e4 <pmw3360_attr_set+0x10c>)
    656e:	79fa      	ldrb	r2, [r7, #7]
    6570:	46a5      	mov	sp, r4
    6572:	2110      	movs	r1, #16
    6574:	f004 fd8f 	bl	b096 <reg_write>
	if (err) {
    6578:	4604      	mov	r4, r0
    657a:	2800      	cmp	r0, #0
    657c:	d0d8      	beq.n	6530 <pmw3360_attr_set+0x58>
		LOG_ERR("Failed to set rest mode");
    657e:	4b20      	ldr	r3, [pc, #128]	; (6600 <pmw3360_attr_set+0x128>)
    6580:	e9c7 5306 	strd	r5, r3, [r7, #24]
    6584:	e7cd      	b.n	6522 <pmw3360_attr_set+0x4a>
	WRITE_BIT(value, PMW3360_REST_EN_POS, enable);
    6586:	f003 03df 	and.w	r3, r3, #223	; 0xdf
    658a:	e7d9      	b.n	6540 <pmw3360_attr_set+0x68>
		err = update_downshift_time(dev_data,
    658c:	681a      	ldr	r2, [r3, #0]
    658e:	2114      	movs	r1, #20
    6590:	4814      	ldr	r0, [pc, #80]	; (65e4 <pmw3360_attr_set+0x10c>)
    6592:	f7ff fcc7 	bl	5f24 <update_downshift_time>
    6596:	e7b6      	b.n	6506 <pmw3360_attr_set+0x2e>
		err = update_downshift_time(dev_data,
    6598:	681a      	ldr	r2, [r3, #0]
    659a:	2117      	movs	r1, #23
    659c:	e7f8      	b.n	6590 <pmw3360_attr_set+0xb8>
		err = update_downshift_time(dev_data,
    659e:	681a      	ldr	r2, [r3, #0]
    65a0:	211a      	movs	r1, #26
    65a2:	e7f5      	b.n	6590 <pmw3360_attr_set+0xb8>
		err = update_sample_time(dev_data,
    65a4:	681a      	ldr	r2, [r3, #0]
    65a6:	2116      	movs	r1, #22
    65a8:	2015      	movs	r0, #21
		err = update_sample_time(dev_data,
    65aa:	f7ff fd51 	bl	6050 <update_sample_time.constprop.0>
    65ae:	e7aa      	b.n	6506 <pmw3360_attr_set+0x2e>
		err = update_sample_time(dev_data,
    65b0:	681a      	ldr	r2, [r3, #0]
    65b2:	2119      	movs	r1, #25
    65b4:	2018      	movs	r0, #24
    65b6:	e7f8      	b.n	65aa <pmw3360_attr_set+0xd2>
		err = update_sample_time(dev_data,
    65b8:	681a      	ldr	r2, [r3, #0]
    65ba:	211c      	movs	r1, #28
    65bc:	201b      	movs	r0, #27
    65be:	e7f4      	b.n	65aa <pmw3360_attr_set+0xd2>
		LOG_ERR("Unknown attribute");
    65c0:	4b10      	ldr	r3, [pc, #64]	; (6604 <pmw3360_attr_set+0x12c>)
    65c2:	61fb      	str	r3, [r7, #28]
    65c4:	4809      	ldr	r0, [pc, #36]	; (65ec <pmw3360_attr_set+0x114>)
    65c6:	2302      	movs	r3, #2
    65c8:	f107 0218 	add.w	r2, r7, #24
    65cc:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    65d0:	61bb      	str	r3, [r7, #24]
    65d2:	f004 fd5d 	bl	b090 <z_log_msg2_static_create.constprop.0>
		return -ENOTSUP;
    65d6:	f06f 0485 	mvn.w	r4, #133	; 0x85
    65da:	e7a9      	b.n	6530 <pmw3360_attr_set+0x58>
		return -EBUSY;
    65dc:	f06f 040f 	mvn.w	r4, #15
    65e0:	e7a6      	b.n	6530 <pmw3360_attr_set+0x58>
    65e2:	bf00      	nop
    65e4:	200008e0 	.word	0x200008e0
    65e8:	0000d1d7 	.word	0x0000d1d7
    65ec:	0000be10 	.word	0x0000be10
    65f0:	0000d1d3 	.word	0x0000d1d3
    65f4:	0000d1d0 	.word	0x0000d1d0
    65f8:	0000d1f7 	.word	0x0000d1f7
    65fc:	01000003 	.word	0x01000003
    6600:	0000d209 	.word	0x0000d209
    6604:	0000d221 	.word	0x0000d221

00006608 <pmw3360_sample_fetch>:
{
    6608:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    660a:	2939      	cmp	r1, #57	; 0x39
{
    660c:	b093      	sub	sp, #76	; 0x4c
	if (unlikely(chan != SENSOR_CHAN_ALL)) {
    660e:	d15b      	bne.n	66c8 <pmw3360_sample_fetch+0xc0>
	if (unlikely(!dev_data->ready)) {
    6610:	4d30      	ldr	r5, [pc, #192]	; (66d4 <pmw3360_sample_fetch+0xcc>)
    6612:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
    6616:	2b00      	cmp	r3, #0
    6618:	d059      	beq.n	66ce <pmw3360_sample_fetch+0xc6>
	if (!dev_data->last_read_burst) {
    661a:	f895 2069 	ldrb.w	r2, [r5, #105]	; 0x69
    661e:	b302      	cbz	r2, 6662 <pmw3360_sample_fetch+0x5a>
	err = spi_cs_ctrl(dev_data, true);
    6620:	482c      	ldr	r0, [pc, #176]	; (66d4 <pmw3360_sample_fetch+0xcc>)
    6622:	2101      	movs	r1, #1
    6624:	f7ff fbce 	bl	5dc4 <spi_cs_ctrl>
	if (err) {
    6628:	4604      	mov	r4, r0
    662a:	bb08      	cbnz	r0, 6670 <pmw3360_sample_fetch+0x68>
	uint8_t reg_buf[] = {
    662c:	2350      	movs	r3, #80	; 0x50
    662e:	f88d 3004 	strb.w	r3, [sp, #4]
	const struct spi_buf tx_buf = {
    6632:	ab01      	add	r3, sp, #4
    6634:	9304      	str	r3, [sp, #16]
    6636:	2601      	movs	r6, #1
	const struct spi_buf_set tx = {
    6638:	ab04      	add	r3, sp, #16
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    663a:	68a8      	ldr	r0, [r5, #8]
	const struct spi_buf tx_buf = {
    663c:	9605      	str	r6, [sp, #20]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    663e:	a906      	add	r1, sp, #24
	const struct spi_buf_set tx = {
    6640:	e9cd 3606 	strd	r3, r6, [sp, #24]
	err = spi_write(dev_data->spi_dev, &spi_cfg, &tx);
    6644:	f7ff fbb2 	bl	5dac <spi_write.constprop.0>
	if (err) {
    6648:	4604      	mov	r4, r0
    664a:	b1a0      	cbz	r0, 6676 <pmw3360_sample_fetch+0x6e>
		LOG_ERR("Motion burst failed on SPI write");
    664c:	4b22      	ldr	r3, [pc, #136]	; (66d8 <pmw3360_sample_fetch+0xd0>)
		LOG_ERR("Motion burst failed on SPI read");
    664e:	9311      	str	r3, [sp, #68]	; 0x44
    6650:	4822      	ldr	r0, [pc, #136]	; (66dc <pmw3360_sample_fetch+0xd4>)
    6652:	2302      	movs	r3, #2
    6654:	aa10      	add	r2, sp, #64	; 0x40
    6656:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    665a:	9310      	str	r3, [sp, #64]	; 0x40
    665c:	f004 fd18 	bl	b090 <z_log_msg2_static_create.constprop.0>
		return err;
    6660:	e006      	b.n	6670 <pmw3360_sample_fetch+0x68>
		err = reg_write(dev_data, PMW3360_REG_MOTION_BURST, 0x00);
    6662:	2150      	movs	r1, #80	; 0x50
    6664:	4628      	mov	r0, r5
    6666:	f004 fd16 	bl	b096 <reg_write>
		if (err) {
    666a:	4604      	mov	r4, r0
    666c:	2800      	cmp	r0, #0
    666e:	d0d7      	beq.n	6620 <pmw3360_sample_fetch+0x18>
}
    6670:	4620      	mov	r0, r4
    6672:	b013      	add	sp, #76	; 0x4c
    6674:	bdf0      	pop	{r4, r5, r6, r7, pc}
	k_busy_wait(T_SRAD_MOTBR);
    6676:	2023      	movs	r0, #35	; 0x23
    6678:	f004 fd08 	bl	b08c <k_busy_wait>
	const struct spi_buf rx_buf = {
    667c:	ab02      	add	r3, sp, #8
    667e:	9308      	str	r3, [sp, #32]
    6680:	2306      	movs	r3, #6
    6682:	9309      	str	r3, [sp, #36]	; 0x24
	const struct spi_buf_set rx = {
    6684:	ab08      	add	r3, sp, #32
    6686:	e9cd 360a 	strd	r3, r6, [sp, #40]	; 0x28
	err = spi_read(dev_data->spi_dev, &spi_cfg, &rx);
    668a:	68a8      	ldr	r0, [r5, #8]
    668c:	6883      	ldr	r3, [r0, #8]
    668e:	4914      	ldr	r1, [pc, #80]	; (66e0 <pmw3360_sample_fetch+0xd8>)
    6690:	681f      	ldr	r7, [r3, #0]
    6692:	4622      	mov	r2, r4
    6694:	ab0a      	add	r3, sp, #40	; 0x28
    6696:	47b8      	blx	r7
	if (err) {
    6698:	4604      	mov	r4, r0
    669a:	b108      	cbz	r0, 66a0 <pmw3360_sample_fetch+0x98>
		LOG_ERR("Motion burst failed on SPI read");
    669c:	4b11      	ldr	r3, [pc, #68]	; (66e4 <pmw3360_sample_fetch+0xdc>)
    669e:	e7d6      	b.n	664e <pmw3360_sample_fetch+0x46>
	err = spi_cs_ctrl(dev_data, false);
    66a0:	4601      	mov	r1, r0
    66a2:	480c      	ldr	r0, [pc, #48]	; (66d4 <pmw3360_sample_fetch+0xcc>)
    66a4:	f7ff fb8e 	bl	5dc4 <spi_cs_ctrl>
	if (err) {
    66a8:	4604      	mov	r4, r0
    66aa:	2800      	cmp	r0, #0
    66ac:	d1e0      	bne.n	6670 <pmw3360_sample_fetch+0x68>
	k_busy_wait(T_BEXIT);
    66ae:	4630      	mov	r0, r6
    66b0:	f004 fcec 	bl	b08c <k_busy_wait>
			dev_data->x = -x;
    66b4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline uint16_t sys_get_le16(const uint8_t src[2])
{
	return ((uint16_t)src[1] << 8) | src[0];
    66b8:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
	dev_data->last_read_burst = true;
    66bc:	f885 6069 	strb.w	r6, [r5, #105]	; 0x69
			dev_data->x = -x;
    66c0:	425b      	negs	r3, r3
    66c2:	832b      	strh	r3, [r5, #24]
			dev_data->y = y;
    66c4:	836a      	strh	r2, [r5, #26]
    66c6:	e7d3      	b.n	6670 <pmw3360_sample_fetch+0x68>
		return -ENOTSUP;
    66c8:	f06f 0485 	mvn.w	r4, #133	; 0x85
    66cc:	e7d0      	b.n	6670 <pmw3360_sample_fetch+0x68>
		return -EBUSY;
    66ce:	f06f 040f 	mvn.w	r4, #15
    66d2:	e7cd      	b.n	6670 <pmw3360_sample_fetch+0x68>
    66d4:	200008e0 	.word	0x200008e0
    66d8:	0000d233 	.word	0x0000d233
    66dc:	0000be10 	.word	0x0000be10
    66e0:	0000c0d8 	.word	0x0000c0d8
    66e4:	0000d254 	.word	0x0000d254

000066e8 <pmw3360_init>:
{
    66e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	k_work_init(&dev_data->trigger_handler_work, trigger_handler);
    66ea:	4d45      	ldr	r5, [pc, #276]	; (6800 <pmw3360_init+0x118>)
    66ec:	4945      	ldr	r1, [pc, #276]	; (6804 <pmw3360_init+0x11c>)
{
    66ee:	b087      	sub	sp, #28
	k_work_init(&dev_data->trigger_handler_work, trigger_handler);
    66f0:	f105 0020 	add.w	r0, r5, #32
    66f4:	f004 ffd1 	bl	b69a <k_work_init>
		union { uintptr_t x; const char * val; } parm0 = { .val = name };
		return (const struct device *) arch_syscall_invoke1(parm0.x, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    66f8:	4843      	ldr	r0, [pc, #268]	; (6808 <pmw3360_init+0x120>)
    66fa:	f002 f85d 	bl	87b8 <z_impl_device_get_binding>
	dev_data->cs_gpio_dev =
    66fe:	6028      	str	r0, [r5, #0]
	if (!dev_data->cs_gpio_dev) {
    6700:	b960      	cbnz	r0, 671c <pmw3360_init+0x34>
		LOG_ERR("Cannot get CS GPIO device");
    6702:	4b42      	ldr	r3, [pc, #264]	; (680c <pmw3360_init+0x124>)
		LOG_ERR("Cannot get SPI device");
    6704:	9305      	str	r3, [sp, #20]
    6706:	4842      	ldr	r0, [pc, #264]	; (6810 <pmw3360_init+0x128>)
    6708:	2302      	movs	r3, #2
    670a:	aa04      	add	r2, sp, #16
    670c:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6710:	9304      	str	r3, [sp, #16]
		return -ENXIO;
    6712:	f06f 0405 	mvn.w	r4, #5
		LOG_ERR("Cannot get SPI device");
    6716:	f004 fcbb 	bl	b090 <z_log_msg2_static_create.constprop.0>
	if (err) {
    671a:	e012      	b.n	6742 <pmw3360_init+0x5a>
	struct gpio_driver_data *data =
    671c:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
    671e:	6881      	ldr	r1, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    6720:	6813      	ldr	r3, [r2, #0]
    6722:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    6726:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    6728:	680b      	ldr	r3, [r1, #0]
    672a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    672e:	2106      	movs	r1, #6
    6730:	4798      	blx	r3
	if (!err) {
    6732:	4604      	mov	r4, r0
    6734:	b940      	cbnz	r0, 6748 <pmw3360_init+0x60>
		err = spi_cs_ctrl(dev_data, false);
    6736:	4601      	mov	r1, r0
    6738:	4628      	mov	r0, r5
    673a:	f7ff fb43 	bl	5dc4 <spi_cs_ctrl>
	if (err) {
    673e:	4604      	mov	r4, r0
    6740:	b168      	cbz	r0, 675e <pmw3360_init+0x76>
}
    6742:	4620      	mov	r0, r4
    6744:	b007      	add	sp, #28
    6746:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LOG_ERR("Cannot configure CS PIN");
    6748:	4b32      	ldr	r3, [pc, #200]	; (6814 <pmw3360_init+0x12c>)
		LOG_ERR("Cannot add IRQ GPIO callback");
    674a:	9305      	str	r3, [sp, #20]
    674c:	4830      	ldr	r0, [pc, #192]	; (6810 <pmw3360_init+0x128>)
    674e:	2302      	movs	r3, #2
    6750:	aa04      	add	r2, sp, #16
    6752:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    6756:	9304      	str	r3, [sp, #16]
    6758:	f004 fc9a 	bl	b090 <z_log_msg2_static_create.constprop.0>
    675c:	e7f1      	b.n	6742 <pmw3360_init+0x5a>
    675e:	482a      	ldr	r0, [pc, #168]	; (6808 <pmw3360_init+0x120>)
    6760:	f002 f82a 	bl	87b8 <z_impl_device_get_binding>
	dev_data->irq_gpio_dev =
    6764:	6068      	str	r0, [r5, #4]
	if (!dev_data->irq_gpio_dev) {
    6766:	b908      	cbnz	r0, 676c <pmw3360_init+0x84>
		LOG_ERR("Cannot get IRQ GPIO device");
    6768:	4b2b      	ldr	r3, [pc, #172]	; (6818 <pmw3360_init+0x130>)
    676a:	e7cb      	b.n	6704 <pmw3360_init+0x1c>
	struct gpio_driver_data *data =
    676c:	6902      	ldr	r2, [r0, #16]
	const struct gpio_driver_api *api =
    676e:	6881      	ldr	r1, [r0, #8]
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    6770:	6813      	ldr	r3, [r2, #0]
    6772:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
    6776:	6013      	str	r3, [r2, #0]
	return api->pin_configure(port, pin, flags);
    6778:	680b      	ldr	r3, [r1, #0]
    677a:	4a28      	ldr	r2, [pc, #160]	; (681c <pmw3360_init+0x134>)
    677c:	2114      	movs	r1, #20
    677e:	4798      	blx	r3
	if (err) {
    6780:	4604      	mov	r4, r0
    6782:	b108      	cbz	r0, 6788 <pmw3360_init+0xa0>
		LOG_ERR("Cannot configure IRQ GPIO");
    6784:	4b26      	ldr	r3, [pc, #152]	; (6820 <pmw3360_init+0x138>)
    6786:	e7e0      	b.n	674a <pmw3360_init+0x62>
	callback->handler = handler;
    6788:	4b26      	ldr	r3, [pc, #152]	; (6824 <pmw3360_init+0x13c>)
	err = gpio_add_callback(dev_data->irq_gpio_dev, &dev_data->irq_gpio_cb);
    678a:	6868      	ldr	r0, [r5, #4]
    678c:	612b      	str	r3, [r5, #16]
	callback->pin_mask = pin_mask;
    678e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
    6792:	616b      	str	r3, [r5, #20]
	if (api->manage_callback == NULL) {
    6794:	6883      	ldr	r3, [r0, #8]
    6796:	69db      	ldr	r3, [r3, #28]
    6798:	b13b      	cbz	r3, 67aa <pmw3360_init+0xc2>
	return api->manage_callback(port, callback, true);
    679a:	2201      	movs	r2, #1
    679c:	f105 010c 	add.w	r1, r5, #12
    67a0:	4798      	blx	r3
	if (err) {
    67a2:	4604      	mov	r4, r0
    67a4:	b318      	cbz	r0, 67ee <pmw3360_init+0x106>
		LOG_ERR("Cannot add IRQ GPIO callback");
    67a6:	4b20      	ldr	r3, [pc, #128]	; (6828 <pmw3360_init+0x140>)
    67a8:	e7cf      	b.n	674a <pmw3360_init+0x62>
		return -ENOTSUP;
    67aa:	f06f 0485 	mvn.w	r4, #133	; 0x85
    67ae:	e7fa      	b.n	67a6 <pmw3360_init+0xbe>
	k_work_init_delayable(&dev_data->init_work, pmw3360_async_init);
    67b0:	f105 0030 	add.w	r0, r5, #48	; 0x30
    67b4:	491d      	ldr	r1, [pc, #116]	; (682c <pmw3360_init+0x144>)
    67b6:	f004 ff9b 	bl	b6f0 <k_work_init_delayable>
			K_MSEC(async_init_delay[dev_data->async_init_step]));
    67ba:	f895 2060 	ldrb.w	r2, [r5, #96]	; 0x60
    67be:	4b1c      	ldr	r3, [pc, #112]	; (6830 <pmw3360_init+0x148>)
    67c0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
    67c4:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    67c8:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
    67cc:	4621      	mov	r1, r4
    67ce:	f240 30e7 	movw	r0, #999	; 0x3e7
    67d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    67d6:	2300      	movs	r3, #0
    67d8:	fbc6 0107 	smlal	r0, r1, r6, r7
    67dc:	f7f9 fc80 	bl	e0 <__aeabi_uldivmod>
    67e0:	4602      	mov	r2, r0
    67e2:	460b      	mov	r3, r1
	k_work_schedule(&dev_data->init_work,
    67e4:	f105 0030 	add.w	r0, r5, #48	; 0x30
    67e8:	f002 fd1a 	bl	9220 <k_work_schedule>
	return err;
    67ec:	e7a9      	b.n	6742 <pmw3360_init+0x5a>
    67ee:	4811      	ldr	r0, [pc, #68]	; (6834 <pmw3360_init+0x14c>)
    67f0:	f001 ffe2 	bl	87b8 <z_impl_device_get_binding>
	dev_data->spi_dev = device_get_binding(PMW3360_SPI_DEV_NAME);
    67f4:	60a8      	str	r0, [r5, #8]
	if (!dev_data->spi_dev) {
    67f6:	2800      	cmp	r0, #0
    67f8:	d1da      	bne.n	67b0 <pmw3360_init+0xc8>
		LOG_ERR("Cannot get SPI device");
    67fa:	4b0f      	ldr	r3, [pc, #60]	; (6838 <pmw3360_init+0x150>)
    67fc:	e782      	b.n	6704 <pmw3360_init+0x1c>
    67fe:	bf00      	nop
    6800:	200008e0 	.word	0x200008e0
    6804:	00006245 	.word	0x00006245
    6808:	0000cc91 	.word	0x0000cc91
    680c:	0000d274 	.word	0x0000d274
    6810:	0000be10 	.word	0x0000be10
    6814:	0000d28e 	.word	0x0000d28e
    6818:	0000d2a6 	.word	0x0000d2a6
    681c:	00010010 	.word	0x00010010
    6820:	0000d2c1 	.word	0x0000d2c1
    6824:	000061f9 	.word	0x000061f9
    6828:	0000d2db 	.word	0x0000d2db
    682c:	00005d09 	.word	0x00005d09
    6830:	0000c09c 	.word	0x0000c09c
    6834:	0000ce47 	.word	0x0000ce47
    6838:	0000d2f8 	.word	0x0000d2f8

0000683c <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    683c:	4a02      	ldr	r2, [pc, #8]	; (6848 <nvmc_wait+0xc>)
    683e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    6842:	2b00      	cmp	r3, #0
    6844:	d0fb      	beq.n	683e <nvmc_wait+0x2>
}
    6846:	4770      	bx	lr
    6848:	4001e000 	.word	0x4001e000

0000684c <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    684c:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    684e:	f004 fc41 	bl	b0d4 <nrf52_errata_136>
    6852:	b140      	cbz	r0, 6866 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    6854:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6858:	2200      	movs	r2, #0
    685a:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    685e:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    6862:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    6866:	f004 fc35 	bl	b0d4 <nrf52_errata_136>
    686a:	2800      	cmp	r0, #0
    686c:	d046      	beq.n	68fc <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    686e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    6872:	4b4c      	ldr	r3, [pc, #304]	; (69a4 <SystemInit+0x158>)
    6874:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    6878:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    687c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    6880:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    6884:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    6888:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    688c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    6890:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    6894:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    6898:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    689c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    68a0:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    68a4:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    68a8:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    68ac:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    68b0:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    68b4:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    68b8:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    68bc:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    68c0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    68c4:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    68c8:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    68cc:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    68d0:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    68d4:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    68d8:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    68dc:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    68e0:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    68e4:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    68e8:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    68ec:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    68f0:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    68f4:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    68f8:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    68fc:	f004 fbea 	bl	b0d4 <nrf52_errata_136>
    6900:	b148      	cbz	r0, 6916 <SystemInit+0xca>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    6902:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6906:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    690a:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    690c:	bf44      	itt	mi
    690e:	f06f 0201 	mvnmi.w	r2, #1
    6912:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    6916:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)
            if (var1 == 0x10)
    691a:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
    691e:	2a10      	cmp	r2, #16
    6920:	d10e      	bne.n	6940 <SystemInit+0xf4>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    6922:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
    6926:	2b03      	cmp	r3, #3
    6928:	d802      	bhi.n	6930 <SystemInit+0xe4>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    692a:	4a1f      	ldr	r2, [pc, #124]	; (69a8 <SystemInit+0x15c>)
    692c:	5cd3      	ldrb	r3, [r2, r3]
    692e:	b13b      	cbz	r3, 6940 <SystemInit+0xf4>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    6930:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    6934:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    6938:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    693c:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    6940:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    6944:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    6948:	2a00      	cmp	r2, #0
    694a:	db03      	blt.n	6954 <SystemInit+0x108>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    694c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    6950:	2b00      	cmp	r3, #0
    6952:	da22      	bge.n	699a <SystemInit+0x14e>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    6954:	4915      	ldr	r1, [pc, #84]	; (69ac <SystemInit+0x160>)
    6956:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    6958:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    695c:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    6960:	2412      	movs	r4, #18
    nvmc_wait();
    6962:	f7ff ff6b 	bl	683c <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    6966:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    696a:	f7ff ff67 	bl	683c <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    696e:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    6972:	f7ff ff63 	bl	683c <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    6976:	2300      	movs	r3, #0
    6978:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    697c:	f7ff ff5e 	bl	683c <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    6980:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    6984:	490a      	ldr	r1, [pc, #40]	; (69b0 <SystemInit+0x164>)
    6986:	4b0b      	ldr	r3, [pc, #44]	; (69b4 <SystemInit+0x168>)
    6988:	68ca      	ldr	r2, [r1, #12]
    698a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    698e:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    6990:	60cb      	str	r3, [r1, #12]
    6992:	f3bf 8f4f 	dsb	sy
    __NOP();
    6996:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    6998:	e7fd      	b.n	6996 <SystemInit+0x14a>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    699a:	4b07      	ldr	r3, [pc, #28]	; (69b8 <SystemInit+0x16c>)
    699c:	4a07      	ldr	r2, [pc, #28]	; (69bc <SystemInit+0x170>)
    699e:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    69a0:	bd10      	pop	{r4, pc}
    69a2:	bf00      	nop
    69a4:	4000c000 	.word	0x4000c000
    69a8:	0000e314 	.word	0x0000e314
    69ac:	4001e000 	.word	0x4001e000
    69b0:	e000ed00 	.word	0xe000ed00
    69b4:	05fa0004 	.word	0x05fa0004
    69b8:	20000090 	.word	0x20000090
    69bc:	03d09000 	.word	0x03d09000

000069c0 <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    69c0:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    69c2:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    69c4:	6802      	ldr	r2, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    69c6:	fab2 f382 	clz	r3, r2
    69ca:	f1c3 031f 	rsb	r3, r3, #31
        if (idx < 0) {
    69ce:	1c5e      	adds	r6, r3, #1
        idx = 31 - NRF_CLZ(prev_mask);
    69d0:	b2dc      	uxtb	r4, r3
        if (idx < 0) {
    69d2:	d014      	beq.n	69fe <nrfx_flag32_alloc+0x3e>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    69d4:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    69d8:	fa05 f303 	lsl.w	r3, r5, r3
    69dc:	ea22 0303 	bic.w	r3, r2, r3
    69e0:	e850 6f00 	ldrex	r6, [r0]
    69e4:	4296      	cmp	r6, r2
    69e6:	d104      	bne.n	69f2 <nrfx_flag32_alloc+0x32>
    69e8:	e840 3c00 	strex	ip, r3, [r0]
    69ec:	f1bc 0f00 	cmp.w	ip, #0
    69f0:	d1f6      	bne.n	69e0 <nrfx_flag32_alloc+0x20>
    69f2:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    69f6:	d1e5      	bne.n	69c4 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    69f8:	4802      	ldr	r0, [pc, #8]	; (6a04 <nrfx_flag32_alloc+0x44>)
    *p_flag = idx;
    69fa:	700c      	strb	r4, [r1, #0]
}
    69fc:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    69fe:	4802      	ldr	r0, [pc, #8]	; (6a08 <nrfx_flag32_alloc+0x48>)
    6a00:	e7fc      	b.n	69fc <nrfx_flag32_alloc+0x3c>
    6a02:	bf00      	nop
    6a04:	0bad0000 	.word	0x0bad0000
    6a08:	0bad0002 	.word	0x0bad0002

00006a0c <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    6a0c:	6803      	ldr	r3, [r0, #0]
    6a0e:	40cb      	lsrs	r3, r1
    6a10:	07db      	lsls	r3, r3, #31
{
    6a12:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    6a14:	d415      	bmi.n	6a42 <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    6a16:	2301      	movs	r3, #1
    6a18:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    6a1c:	6803      	ldr	r3, [r0, #0]
    6a1e:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    6a22:	ea41 0203 	orr.w	r2, r1, r3
    6a26:	e850 4f00 	ldrex	r4, [r0]
    6a2a:	429c      	cmp	r4, r3
    6a2c:	d104      	bne.n	6a38 <nrfx_flag32_free+0x2c>
    6a2e:	e840 2c00 	strex	ip, r2, [r0]
    6a32:	f1bc 0f00 	cmp.w	ip, #0
    6a36:	d1f6      	bne.n	6a26 <nrfx_flag32_free+0x1a>
    6a38:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    6a3c:	d1ee      	bne.n	6a1c <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    6a3e:	4802      	ldr	r0, [pc, #8]	; (6a48 <nrfx_flag32_free+0x3c>)
}
    6a40:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6a42:	4802      	ldr	r0, [pc, #8]	; (6a4c <nrfx_flag32_free+0x40>)
    6a44:	e7fc      	b.n	6a40 <nrfx_flag32_free+0x34>
    6a46:	bf00      	nop
    6a48:	0bad0000 	.word	0x0bad0000
    6a4c:	0bad0004 	.word	0x0bad0004

00006a50 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    6a50:	4b05      	ldr	r3, [pc, #20]	; (6a68 <nrfx_clock_init+0x18>)
    6a52:	791a      	ldrb	r2, [r3, #4]
    6a54:	b92a      	cbnz	r2, 6a62 <nrfx_clock_init+0x12>
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    }
    else
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    6a56:	715a      	strb	r2, [r3, #5]
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    6a58:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
    6a5a:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
    6a5c:	711a      	strb	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
    6a5e:	4803      	ldr	r0, [pc, #12]	; (6a6c <nrfx_clock_init+0x1c>)
    6a60:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    6a62:	4803      	ldr	r0, [pc, #12]	; (6a70 <nrfx_clock_init+0x20>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6a64:	4770      	bx	lr
    6a66:	bf00      	nop
    6a68:	20001724 	.word	0x20001724
    6a6c:	0bad0000 	.word	0x0bad0000
    6a70:	0bad000c 	.word	0x0bad000c

00006a74 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    6a74:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    6a76:	2000      	movs	r0, #0
    6a78:	f7fc f93e 	bl	2cf8 <arch_irq_is_enabled>
    6a7c:	b908      	cbnz	r0, 6a82 <nrfx_clock_enable+0xe>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    6a7e:	f7fc f917 	bl	2cb0 <arch_irq_enable>
    return false;
}

NRF_STATIC_INLINE void nrf_clock_lf_src_set(NRF_CLOCK_Type * p_reg, nrf_clock_lfclk_t source)
{
    p_reg->LFCLKSRC = (uint32_t)(source);
    6a82:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6a86:	2200      	movs	r2, #0
    6a88:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
#endif
#if NRF_CLOCK_HAS_HFCLK192M
    nrf_clock_hfclk192m_src_set(NRF_CLOCK, (nrf_clock_hfclk_t)NRFX_CLOCK_CONFIG_HFCLK192M_SRC);
#endif
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
    6a8c:	4b01      	ldr	r3, [pc, #4]	; (6a94 <nrfx_clock_enable+0x20>)
    6a8e:	2201      	movs	r2, #1
    6a90:	701a      	strb	r2, [r3, #0]
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    6a92:	bd08      	pop	{r3, pc}
    6a94:	20001ab3 	.word	0x20001ab3

00006a98 <nrfx_clock_calibration_start>:
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6a98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6a9c:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6aa0:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    6aa4:	03c8      	lsls	r0, r1, #15
    6aa6:	d516      	bpl.n	6ad6 <nrfx_clock_calibration_start+0x3e>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_HFCLK, &clk_src))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (clk_src != NRF_CLOCK_HFCLK_HIGH_ACCURACY)
    6aa8:	07d1      	lsls	r1, r2, #31
    6aaa:	d514      	bpl.n	6ad6 <nrfx_clock_calibration_start+0x3e>
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6aac:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
    6ab0:	03d2      	lsls	r2, r2, #15
    6ab2:	d510      	bpl.n	6ad6 <nrfx_clock_calibration_start+0x3e>
    if (!nrfx_clock_is_running(NRF_CLOCK_DOMAIN_LFCLK, NULL))
    {
        return NRFX_ERROR_INVALID_STATE;
    }

    if (m_clock_cb.cal_state == CAL_STATE_IDLE)
    6ab4:	490a      	ldr	r1, [pc, #40]	; (6ae0 <nrfx_clock_calibration_start+0x48>)
    6ab6:	794a      	ldrb	r2, [r1, #5]
    6ab8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
    6abc:	b96a      	cbnz	r2, 6ada <nrfx_clock_calibration_start+0x42>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6abe:	f8c3 010c 	str.w	r0, [r3, #268]	; 0x10c
    6ac2:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c
    nrfx_err_t err_code = NRFX_SUCCESS;
    6ac6:	4807      	ldr	r0, [pc, #28]	; (6ae4 <nrfx_clock_calibration_start+0x4c>)
    p_reg->INTENSET = mask;
    6ac8:	2208      	movs	r2, #8
    6aca:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    {
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_CAL;
    6ace:	2201      	movs	r2, #1
    6ad0:	714a      	strb	r2, [r1, #5]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6ad2:	611a      	str	r2, [r3, #16]
}
    6ad4:	4770      	bx	lr
        return NRFX_ERROR_INVALID_STATE;
    6ad6:	4804      	ldr	r0, [pc, #16]	; (6ae8 <nrfx_clock_calibration_start+0x50>)
    6ad8:	4770      	bx	lr
#endif
        nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_CAL);
    }
    else
    {
        err_code = NRFX_ERROR_BUSY;
    6ada:	4804      	ldr	r0, [pc, #16]	; (6aec <nrfx_clock_calibration_start+0x54>)

    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    6adc:	4770      	bx	lr
    6ade:	bf00      	nop
    6ae0:	20001724 	.word	0x20001724
    6ae4:	0bad0000 	.word	0x0bad0000
    6ae8:	0bad0005 	.word	0x0bad0005
    6aec:	0bad000b 	.word	0x0bad000b

00006af0 <nrfx_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6af0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    6af4:	b510      	push	{r4, lr}
    6af6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    6afa:	b152      	cbz	r2, 6b12 <nrfx_clock_irq_handler+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6afc:	2000      	movs	r0, #0
    6afe:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
    6b02:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
    6b06:	2201      	movs	r2, #1
    6b08:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        {
            m_clock_cb.hfclk_started = true;
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    6b0c:	4b16      	ldr	r3, [pc, #88]	; (6b68 <nrfx_clock_irq_handler+0x78>)
    6b0e:	681b      	ldr	r3, [r3, #0]
    6b10:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6b12:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6b16:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    6b1a:	b15a      	cbz	r2, 6b34 <nrfx_clock_irq_handler+0x44>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b1c:	2200      	movs	r2, #0
    6b1e:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    6b22:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENCLR = mask;
    6b26:	2202      	movs	r2, #2
    6b28:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        else
#endif
        {
            // After the LF clock external source start invoke user callback.
            nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_LF_STARTED_MASK);
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    6b2c:	4b0e      	ldr	r3, [pc, #56]	; (6b68 <nrfx_clock_irq_handler+0x78>)
    6b2e:	2001      	movs	r0, #1
    6b30:	681b      	ldr	r3, [r3, #0]
    6b32:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6b34:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6b38:	f8d3 210c 	ldr.w	r2, [r3, #268]	; 0x10c

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CTTO);
    }
#endif // NRF_CLOCK_HAS_CALIBRATION_TIMER && NRFX_CHECK(NRFX_CLOCK_CONFIG_CT_ENABLED)

    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_DONE) &&
    6b3c:	b192      	cbz	r2, 6b64 <nrfx_clock_irq_handler+0x74>
    return p_reg->INTENSET & mask;
    6b3e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    6b42:	0712      	lsls	r2, r2, #28
    6b44:	d50e      	bpl.n	6b64 <nrfx_clock_irq_handler+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6b46:	2200      	movs	r2, #0
    6b48:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
    6b4c:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
    p_reg->INTENCLR = mask;
    6b50:	2108      	movs	r1, #8
    6b52:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
        *(volatile uint32_t *)0x40000C34 = 0x00000000;
#endif
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_DONE);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_DONE");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_DONE_MASK);
        m_clock_cb.cal_state = CAL_STATE_IDLE;
    6b56:	4b04      	ldr	r3, [pc, #16]	; (6b68 <nrfx_clock_irq_handler+0x78>)
    6b58:	715a      	strb	r2, [r3, #5]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    6b5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_CAL_DONE);
    6b5e:	681b      	ldr	r3, [r3, #0]
    6b60:	2003      	movs	r0, #3
    6b62:	4718      	bx	r3
}
    6b64:	bd10      	pop	{r4, pc}
    6b66:	bf00      	nop
    6b68:	20001724 	.word	0x20001724

00006b6c <pin_in_use_by_te>:
 *
 * @return True if pin uses GPIOTE task/event.
 */
static bool pin_in_use_by_te(uint32_t pin)
{
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    6b6c:	4b03      	ldr	r3, [pc, #12]	; (6b7c <pin_in_use_by_te+0x10>)
    6b6e:	3008      	adds	r0, #8
    6b70:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
}
    6b74:	f3c0 1040 	ubfx	r0, r0, #5, #1
    6b78:	4770      	bx	lr
    6b7a:	bf00      	nop
    6b7c:	20000094 	.word	0x20000094

00006b80 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    6b80:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6b82:	f100 0308 	add.w	r3, r0, #8
    6b86:	4c0c      	ldr	r4, [pc, #48]	; (6bb8 <call_handler+0x38>)
    6b88:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    6b8c:	05da      	lsls	r2, r3, #23
{
    6b8e:	4605      	mov	r5, r0
    6b90:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6b92:	d507      	bpl.n	6ba4 <call_handler+0x24>
    6b94:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    6b98:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    6b9c:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    6ba0:	6852      	ldr	r2, [r2, #4]
    6ba2:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    6ba4:	68a3      	ldr	r3, [r4, #8]
    6ba6:	b12b      	cbz	r3, 6bb4 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6ba8:	68e2      	ldr	r2, [r4, #12]
    6baa:	4631      	mov	r1, r6
    6bac:	4628      	mov	r0, r5
    }
}
    6bae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    6bb2:	4718      	bx	r3
}
    6bb4:	bd70      	pop	{r4, r5, r6, pc}
    6bb6:	bf00      	nop
    6bb8:	20000094 	.word	0x20000094

00006bbc <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6bbc:	4a12      	ldr	r2, [pc, #72]	; (6c08 <release_handler+0x4c>)
    6bbe:	3008      	adds	r0, #8
{
    6bc0:	b410      	push	{r4}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    6bc2:	f832 3010 	ldrh.w	r3, [r2, r0, lsl #1]
    6bc6:	05d9      	lsls	r1, r3, #23
    6bc8:	d51b      	bpl.n	6c02 <release_handler+0x46>
    6bca:	f3c3 2143 	ubfx	r1, r3, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    6bce:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6bd2:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6bd6:	f102 0410 	add.w	r4, r2, #16
    6bda:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    6bdc:	f834 3b02 	ldrh.w	r3, [r4], #2
    6be0:	f413 7f80 	tst.w	r3, #256	; 0x100
    6be4:	d003      	beq.n	6bee <release_handler+0x32>
    6be6:	f3c3 2343 	ubfx	r3, r3, #9, #4
    6bea:	4299      	cmp	r1, r3
    6bec:	d009      	beq.n	6c02 <release_handler+0x46>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    6bee:	3001      	adds	r0, #1
    6bf0:	2820      	cmp	r0, #32
    6bf2:	d1f3      	bne.n	6bdc <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    6bf4:	2300      	movs	r3, #0
    6bf6:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    6bfa:	4804      	ldr	r0, [pc, #16]	; (6c0c <release_handler+0x50>)
}
    6bfc:	bc10      	pop	{r4}
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    6bfe:	f7ff bf05 	b.w	6a0c <nrfx_flag32_free>
}
    6c02:	bc10      	pop	{r4}
    6c04:	4770      	bx	lr
    6c06:	bf00      	nop
    6c08:	20000094 	.word	0x20000094
    6c0c:	200000e8 	.word	0x200000e8

00006c10 <pin_handler_trigger_uninit>:
{
    6c10:	b538      	push	{r3, r4, r5, lr}
    6c12:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    6c14:	f7ff ffaa 	bl	6b6c <pin_in_use_by_te>
    6c18:	4c09      	ldr	r4, [pc, #36]	; (6c40 <pin_handler_trigger_uninit+0x30>)
    6c1a:	f102 0508 	add.w	r5, r2, #8
    6c1e:	b140      	cbz	r0, 6c32 <pin_handler_trigger_uninit+0x22>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6c20:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    6c24:	4907      	ldr	r1, [pc, #28]	; (6c44 <pin_handler_trigger_uninit+0x34>)
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    6c26:	0b5b      	lsrs	r3, r3, #13
    6c28:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    6c2c:	2000      	movs	r0, #0
    6c2e:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    release_handler(pin);
    6c32:	4610      	mov	r0, r2
    6c34:	f7ff ffc2 	bl	6bbc <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    6c38:	2300      	movs	r3, #0
    6c3a:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    6c3e:	bd38      	pop	{r3, r4, r5, pc}
    6c40:	20000094 	.word	0x20000094
    6c44:	40006000 	.word	0x40006000

00006c48 <nrfx_gpiote_input_configure>:
{
    6c48:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6c4c:	4604      	mov	r4, r0
    6c4e:	461e      	mov	r6, r3
    if (p_input_config)
    6c50:	b309      	cbz	r1, 6c96 <nrfx_gpiote_input_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6c52:	4f4d      	ldr	r7, [pc, #308]	; (6d88 <nrfx_gpiote_input_configure+0x140>)
    6c54:	f100 0808 	add.w	r8, r0, #8
    6c58:	f837 5018 	ldrh.w	r5, [r7, r8, lsl #1]
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    6c5c:	07ab      	lsls	r3, r5, #30
    6c5e:	d506      	bpl.n	6c6e <nrfx_gpiote_input_configure+0x26>
    6c60:	f7ff ff84 	bl	6b6c <pin_in_use_by_te>
        if (pin_is_task_output(pin))
    6c64:	b118      	cbz	r0, 6c6e <nrfx_gpiote_input_configure+0x26>
            return NRFX_ERROR_INVALID_PARAM;
    6c66:	4849      	ldr	r0, [pc, #292]	; (6d8c <nrfx_gpiote_input_configure+0x144>)
}
    6c68:	b002      	add	sp, #8
    6c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    *p_pin = pin_number & 0x1F;
    6c6e:	f004 001f 	and.w	r0, r4, #31
    6c72:	0080      	lsls	r0, r0, #2
    6c74:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6c78:	7809      	ldrb	r1, [r1, #0]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6c7a:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    6c7e:	f025 0502 	bic.w	r5, r5, #2
    cnf &= ~to_update;
    6c82:	f023 030f 	bic.w	r3, r3, #15
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    6c86:	f045 0501 	orr.w	r5, r5, #1
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6c8a:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
    6c8e:	f827 5018 	strh.w	r5, [r7, r8, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    6c92:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_trigger_config)
    6c96:	b192      	cbz	r2, 6cbe <nrfx_gpiote_input_configure+0x76>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6c98:	4b3b      	ldr	r3, [pc, #236]	; (6d88 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    6c9a:	7815      	ldrb	r5, [r2, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    6c9c:	6852      	ldr	r2, [r2, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6c9e:	f104 0008 	add.w	r0, r4, #8
    6ca2:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    6ca6:	078f      	lsls	r7, r1, #30
    6ca8:	d50c      	bpl.n	6cc4 <nrfx_gpiote_input_configure+0x7c>
            if (use_evt)
    6caa:	2a00      	cmp	r2, #0
    6cac:	d1db      	bne.n	6c66 <nrfx_gpiote_input_configure+0x1e>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    6cae:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    6cb2:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    6cb6:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
    6cba:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    6cbe:	bbce      	cbnz	r6, 6d34 <nrfx_gpiote_input_configure+0xec>
    return NRFX_SUCCESS;
    6cc0:	4833      	ldr	r0, [pc, #204]	; (6d90 <nrfx_gpiote_input_configure+0x148>)
    6cc2:	e7d1      	b.n	6c68 <nrfx_gpiote_input_configure+0x20>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    6cc4:	f021 0120 	bic.w	r1, r1, #32
    6cc8:	04c9      	lsls	r1, r1, #19
    6cca:	0cc9      	lsrs	r1, r1, #19
    6ccc:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    6cd0:	2a00      	cmp	r2, #0
    6cd2:	d0ec      	beq.n	6cae <nrfx_gpiote_input_configure+0x66>
                if (!edge)
    6cd4:	2d03      	cmp	r5, #3
    6cd6:	d8c6      	bhi.n	6c66 <nrfx_gpiote_input_configure+0x1e>
                uint8_t ch = *p_trigger_config->p_in_channel;
    6cd8:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    6cda:	b92d      	cbnz	r5, 6ce8 <nrfx_gpiote_input_configure+0xa0>
    6cdc:	4a2d      	ldr	r2, [pc, #180]	; (6d94 <nrfx_gpiote_input_configure+0x14c>)
    6cde:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    6ce2:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    6ce6:	e7e2      	b.n	6cae <nrfx_gpiote_input_configure+0x66>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6ce8:	00ba      	lsls	r2, r7, #2
    6cea:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6cee:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6cf2:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    6cf6:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    6cfa:	f02c 0c03 	bic.w	ip, ip, #3
    6cfe:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    6d02:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    6d06:	f42c 3c47 	bic.w	ip, ip, #203776	; 0x31c00
    6d0a:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    6d0e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6d12:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    6d16:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    6d1a:	f40c 5cf8 	and.w	ip, ip, #7936	; 0x1f00
    6d1e:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
    6d22:	ea4c 0c0e 	orr.w	ip, ip, lr
    6d26:	f041 0120 	orr.w	r1, r1, #32
    6d2a:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    6d2e:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    6d32:	e7bc      	b.n	6cae <nrfx_gpiote_input_configure+0x66>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    6d34:	e9d6 7600 	ldrd	r7, r6, [r6]
    release_handler(pin);
    6d38:	4620      	mov	r0, r4
    6d3a:	f7ff ff3f 	bl	6bbc <release_handler>
    if (!handler)
    6d3e:	2f00      	cmp	r7, #0
    6d40:	d0be      	beq.n	6cc0 <nrfx_gpiote_input_configure+0x78>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    6d42:	4d11      	ldr	r5, [pc, #68]	; (6d88 <nrfx_gpiote_input_configure+0x140>)
    6d44:	682b      	ldr	r3, [r5, #0]
    6d46:	429f      	cmp	r7, r3
    6d48:	d104      	bne.n	6d54 <nrfx_gpiote_input_configure+0x10c>
    6d4a:	686b      	ldr	r3, [r5, #4]
    6d4c:	429e      	cmp	r6, r3
    6d4e:	d101      	bne.n	6d54 <nrfx_gpiote_input_configure+0x10c>
    6d50:	2200      	movs	r2, #0
    6d52:	e009      	b.n	6d68 <nrfx_gpiote_input_configure+0x120>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    6d54:	4810      	ldr	r0, [pc, #64]	; (6d98 <nrfx_gpiote_input_configure+0x150>)
    6d56:	f10d 0107 	add.w	r1, sp, #7
    6d5a:	f7ff fe31 	bl	69c0 <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    6d5e:	4b0c      	ldr	r3, [pc, #48]	; (6d90 <nrfx_gpiote_input_configure+0x148>)
    6d60:	4298      	cmp	r0, r3
    6d62:	d181      	bne.n	6c68 <nrfx_gpiote_input_configure+0x20>
        handler_id = (int32_t)id;
    6d64:	f89d 2007 	ldrb.w	r2, [sp, #7]
    m_cb.handlers[handler_id].handler = handler;
    6d68:	f845 7032 	str.w	r7, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    6d6c:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6d70:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    6d72:	605e      	str	r6, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    6d74:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    6d78:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    6d7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6d80:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    6d84:	e79c      	b.n	6cc0 <nrfx_gpiote_input_configure+0x78>
    6d86:	bf00      	nop
    6d88:	20000094 	.word	0x20000094
    6d8c:	0bad0004 	.word	0x0bad0004
    6d90:	0bad0000 	.word	0x0bad0000
    6d94:	40006000 	.word	0x40006000
    6d98:	200000e8 	.word	0x200000e8

00006d9c <nrfx_gpiote_output_configure>:
{
    6d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d9e:	4604      	mov	r4, r0
    if (p_config)
    6da0:	b371      	cbz	r1, 6e00 <nrfx_gpiote_output_configure+0x64>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6da2:	4e37      	ldr	r6, [pc, #220]	; (6e80 <nrfx_gpiote_output_configure+0xe4>)
    6da4:	f100 0708 	add.w	r7, r0, #8
    6da8:	f836 5017 	ldrh.w	r5, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    6dac:	07ab      	lsls	r3, r5, #30
    6dae:	d404      	bmi.n	6dba <nrfx_gpiote_output_configure+0x1e>
    6db0:	f7ff fedc 	bl	6b6c <pin_in_use_by_te>
    6db4:	b108      	cbz	r0, 6dba <nrfx_gpiote_output_configure+0x1e>
    return NRFX_SUCCESS;
    6db6:	4833      	ldr	r0, [pc, #204]	; (6e84 <nrfx_gpiote_output_configure+0xe8>)
}
    6db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    6dba:	f015 0f1c 	tst.w	r5, #28
    6dbe:	784b      	ldrb	r3, [r1, #1]
    6dc0:	d001      	beq.n	6dc6 <nrfx_gpiote_output_configure+0x2a>
    6dc2:	2b01      	cmp	r3, #1
    6dc4:	d0f7      	beq.n	6db6 <nrfx_gpiote_output_configure+0x1a>
    *p_pin = pin_number & 0x1F;
    6dc6:	f004 001f 	and.w	r0, r4, #31
    6dca:	0080      	lsls	r0, r0, #2
    6dcc:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    6dd0:	f891 e000 	ldrb.w	lr, [r1]
    uint32_t cnf = reg->PIN_CNF[pin_number];
    6dd4:	f8d0 c700 	ldr.w	ip, [r0, #1792]	; 0x700
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    6dd8:	7889      	ldrb	r1, [r1, #2]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    6dda:	005b      	lsls	r3, r3, #1
    cnf &= ~to_update;
    6ddc:	f42c 6ce1 	bic.w	ip, ip, #1800	; 0x708
    6de0:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
    6de4:	f02c 0c07 	bic.w	ip, ip, #7
    6de8:	ea43 030c 	orr.w	r3, r3, ip
    6dec:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    6df0:	f045 0503 	orr.w	r5, r5, #3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    6df4:	f043 0301 	orr.w	r3, r3, #1
    6df8:	f826 5017 	strh.w	r5, [r6, r7, lsl #1]
    reg->PIN_CNF[pin_number] = cnf;
    6dfc:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
    if (p_task_config)
    6e00:	b90a      	cbnz	r2, 6e06 <nrfx_gpiote_output_configure+0x6a>
    return NRFX_SUCCESS;
    6e02:	4821      	ldr	r0, [pc, #132]	; (6e88 <nrfx_gpiote_output_configure+0xec>)
    6e04:	e7d8      	b.n	6db8 <nrfx_gpiote_output_configure+0x1c>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6e06:	4e1e      	ldr	r6, [pc, #120]	; (6e80 <nrfx_gpiote_output_configure+0xe4>)
    6e08:	f104 0708 	add.w	r7, r4, #8
    6e0c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    6e10:	0783      	lsls	r3, r0, #30
    6e12:	d5d0      	bpl.n	6db6 <nrfx_gpiote_output_configure+0x1a>
        uint32_t ch = p_task_config->task_ch;
    6e14:	f892 c000 	ldrb.w	ip, [r2]
    p_reg->CONFIG[idx] = 0;
    6e18:	4661      	mov	r1, ip
    6e1a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    6e1c:	f020 0020 	bic.w	r0, r0, #32
    6e20:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    6e24:	04c0      	lsls	r0, r0, #19
    6e26:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    6e2a:	0cc0      	lsrs	r0, r0, #19
    6e2c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    6e30:	2300      	movs	r3, #0
    6e32:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    6e36:	7855      	ldrb	r5, [r2, #1]
    6e38:	2d00      	cmp	r5, #0
    6e3a:	d0e2      	beq.n	6e02 <nrfx_gpiote_output_configure+0x66>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    6e3c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    6e40:	7892      	ldrb	r2, [r2, #2]
    6e42:	f423 1398 	bic.w	r3, r3, #1245184	; 0x130000
    6e46:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    6e4a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6e4e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    6e52:	0223      	lsls	r3, r4, #8
    6e54:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6e58:	042d      	lsls	r5, r5, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6e5a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    6e5e:	f405 3540 	and.w	r5, r5, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    6e62:	0512      	lsls	r2, r2, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6e64:	432b      	orrs	r3, r5
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    6e66:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    6e6a:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    6e6e:	4313      	orrs	r3, r2
    6e70:	f040 0020 	orr.w	r0, r0, #32
    6e74:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    6e78:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    6e7c:	e7c1      	b.n	6e02 <nrfx_gpiote_output_configure+0x66>
    6e7e:	bf00      	nop
    6e80:	20000094 	.word	0x20000094
    6e84:	0bad0004 	.word	0x0bad0004
    6e88:	0bad0000 	.word	0x0bad0000

00006e8c <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    6e8c:	4b01      	ldr	r3, [pc, #4]	; (6e94 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    6e8e:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    6e92:	4770      	bx	lr
    6e94:	20000094 	.word	0x20000094

00006e98 <nrfx_gpiote_channel_get>:
{
    6e98:	b508      	push	{r3, lr}
    6e9a:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin))
    6e9c:	f7ff fe66 	bl	6b6c <pin_in_use_by_te>
    6ea0:	b138      	cbz	r0, 6eb2 <nrfx_gpiote_channel_get+0x1a>
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6ea2:	4b05      	ldr	r3, [pc, #20]	; (6eb8 <nrfx_gpiote_channel_get+0x20>)
        return NRFX_SUCCESS;
    6ea4:	4805      	ldr	r0, [pc, #20]	; (6ebc <nrfx_gpiote_channel_get+0x24>)
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6ea6:	3208      	adds	r2, #8
    6ea8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    6eac:	0b5b      	lsrs	r3, r3, #13
    6eae:	700b      	strb	r3, [r1, #0]
}
    6eb0:	bd08      	pop	{r3, pc}
        return NRFX_ERROR_INVALID_PARAM;
    6eb2:	4803      	ldr	r0, [pc, #12]	; (6ec0 <nrfx_gpiote_channel_get+0x28>)
    6eb4:	e7fc      	b.n	6eb0 <nrfx_gpiote_channel_get+0x18>
    6eb6:	bf00      	nop
    6eb8:	20000094 	.word	0x20000094
    6ebc:	0bad0000 	.word	0x0bad0000
    6ec0:	0bad0004 	.word	0x0bad0004

00006ec4 <nrfx_gpiote_init>:
{
    6ec4:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    6ec6:	4c0f      	ldr	r4, [pc, #60]	; (6f04 <nrfx_gpiote_init+0x40>)
    6ec8:	f894 5058 	ldrb.w	r5, [r4, #88]	; 0x58
    6ecc:	b9bd      	cbnz	r5, 6efe <nrfx_gpiote_init+0x3a>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    6ece:	2240      	movs	r2, #64	; 0x40
    6ed0:	4629      	mov	r1, r5
    6ed2:	f104 0010 	add.w	r0, r4, #16
    6ed6:	f003 fe6c 	bl	abb2 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    6eda:	2006      	movs	r0, #6
    6edc:	f7fb fee8 	bl	2cb0 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6ee0:	4b09      	ldr	r3, [pc, #36]	; (6f08 <nrfx_gpiote_init+0x44>)
    return err_code;
    6ee2:	480a      	ldr	r0, [pc, #40]	; (6f0c <nrfx_gpiote_init+0x48>)
    6ee4:	f8c3 517c 	str.w	r5, [r3, #380]	; 0x17c
    6ee8:	f8d3 217c 	ldr.w	r2, [r3, #380]	; 0x17c
    p_reg->INTENSET = mask;
    6eec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    6ef0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    6ef4:	2301      	movs	r3, #1
    6ef6:	f884 3058 	strb.w	r3, [r4, #88]	; 0x58
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    6efa:	6563      	str	r3, [r4, #84]	; 0x54
}
    6efc:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    6efe:	4804      	ldr	r0, [pc, #16]	; (6f10 <nrfx_gpiote_init+0x4c>)
    6f00:	e7fc      	b.n	6efc <nrfx_gpiote_init+0x38>
    6f02:	bf00      	nop
    6f04:	20000094 	.word	0x20000094
    6f08:	40006000 	.word	0x40006000
    6f0c:	0bad0000 	.word	0x0bad0000
    6f10:	0bad0005 	.word	0x0bad0005

00006f14 <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    6f14:	4b03      	ldr	r3, [pc, #12]	; (6f24 <nrfx_gpiote_is_init+0x10>)
    6f16:	f893 0058 	ldrb.w	r0, [r3, #88]	; 0x58
}
    6f1a:	3800      	subs	r0, #0
    6f1c:	bf18      	it	ne
    6f1e:	2001      	movne	r0, #1
    6f20:	4770      	bx	lr
    6f22:	bf00      	nop
    6f24:	20000094 	.word	0x20000094

00006f28 <nrfx_gpiote_channel_free>:
{
    6f28:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    6f2a:	4801      	ldr	r0, [pc, #4]	; (6f30 <nrfx_gpiote_channel_free+0x8>)
    6f2c:	f7ff bd6e 	b.w	6a0c <nrfx_flag32_free>
    6f30:	200000e4 	.word	0x200000e4

00006f34 <nrfx_gpiote_channel_alloc>:
{
    6f34:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    6f36:	4801      	ldr	r0, [pc, #4]	; (6f3c <nrfx_gpiote_channel_alloc+0x8>)
    6f38:	f7ff bd42 	b.w	69c0 <nrfx_flag32_alloc>
    6f3c:	200000e4 	.word	0x200000e4

00006f40 <nrfx_gpiote_trigger_enable>:
{
    6f40:	b510      	push	{r4, lr}
    6f42:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6f44:	f7ff fe12 	bl	6b6c <pin_in_use_by_te>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6f48:	f102 0408 	add.w	r4, r2, #8
    6f4c:	4b1c      	ldr	r3, [pc, #112]	; (6fc0 <nrfx_gpiote_trigger_enable+0x80>)
    6f4e:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6f52:	b1e0      	cbz	r0, 6f8e <nrfx_gpiote_trigger_enable+0x4e>
    6f54:	f013 0402 	ands.w	r4, r3, #2
    6f58:	d119      	bne.n	6f8e <nrfx_gpiote_trigger_enable+0x4e>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6f5a:	0b5b      	lsrs	r3, r3, #13
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    6f5c:	009a      	lsls	r2, r3, #2
    return ((uint32_t)p_reg + event);
    6f5e:	f102 4080 	add.w	r0, r2, #1073741824	; 0x40000000
    6f62:	f500 40c2 	add.w	r0, r0, #24832	; 0x6100
    6f66:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    6f6a:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    6f6e:	6004      	str	r4, [r0, #0]
    6f70:	6800      	ldr	r0, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    6f72:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    6f76:	f040 0001 	orr.w	r0, r0, #1
    6f7a:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
        if (int_enable)
    6f7e:	b129      	cbz	r1, 6f8c <nrfx_gpiote_trigger_enable+0x4c>
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    6f80:	2201      	movs	r2, #1
    6f82:	fa02 f303 	lsl.w	r3, r2, r3
    p_reg->INTENSET = mask;
    6f86:	4a0f      	ldr	r2, [pc, #60]	; (6fc4 <nrfx_gpiote_trigger_enable+0x84>)
    6f88:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    6f8c:	bd10      	pop	{r4, pc}
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    6f8e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    6f92:	2b04      	cmp	r3, #4
    6f94:	d010      	beq.n	6fb8 <nrfx_gpiote_trigger_enable+0x78>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    6f96:	2b05      	cmp	r3, #5
    6f98:	d010      	beq.n	6fbc <nrfx_gpiote_trigger_enable+0x7c>
    return p_reg->IN;
    6f9a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    6f9e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
    *p_pin = pin_number & 0x1F;
    6fa2:	f002 031f 	and.w	r3, r2, #31
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    6fa6:	40d9      	lsrs	r1, r3
    6fa8:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    6fac:	3102      	adds	r1, #2
}
    6fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    6fb2:	4610      	mov	r0, r2
    6fb4:	f004 b91f 	b.w	b1f6 <nrf_gpio_cfg_sense_set>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    6fb8:	2103      	movs	r1, #3
    6fba:	e7f8      	b.n	6fae <nrfx_gpiote_trigger_enable+0x6e>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    6fbc:	2102      	movs	r1, #2
    6fbe:	e7f6      	b.n	6fae <nrfx_gpiote_trigger_enable+0x6e>
    6fc0:	20000094 	.word	0x20000094
    6fc4:	40006000 	.word	0x40006000

00006fc8 <nrfx_gpiote_trigger_disable>:
{
    6fc8:	b508      	push	{r3, lr}
    6fca:	4602      	mov	r2, r0
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6fcc:	f7ff fdce 	bl	6b6c <pin_in_use_by_te>
    6fd0:	b1c0      	cbz	r0, 7004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    6fd2:	f102 0108 	add.w	r1, r2, #8
    6fd6:	4b0e      	ldr	r3, [pc, #56]	; (7010 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x10>)
    6fd8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    6fdc:	0799      	lsls	r1, r3, #30
    6fde:	d411      	bmi.n	7004 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x4>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    6fe0:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    6fe2:	2201      	movs	r2, #1
    6fe4:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    6fe6:	009b      	lsls	r3, r3, #2
    6fe8:	490a      	ldr	r1, [pc, #40]	; (7014 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x14>)
    6fea:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    6fee:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    6ff2:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    6ff6:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    6ffa:	f022 0203 	bic.w	r2, r2, #3
    6ffe:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    7002:	bd08      	pop	{r3, pc}
    7004:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    7008:	2100      	movs	r1, #0
    700a:	4610      	mov	r0, r2
    700c:	f004 b8f3 	b.w	b1f6 <nrf_gpio_cfg_sense_set>
    7010:	20000094 	.word	0x20000094
    7014:	40006000 	.word	0x40006000

00007018 <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    7018:	4b0d      	ldr	r3, [pc, #52]	; (7050 <nrfx_gpiote_pin_uninit+0x38>)
    701a:	f100 0208 	add.w	r2, r0, #8
{
    701e:	b510      	push	{r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    7020:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    7024:	07db      	lsls	r3, r3, #31
{
    7026:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    7028:	d50f      	bpl.n	704a <nrfx_gpiote_pin_uninit+0x32>
    nrfx_gpiote_trigger_disable(pin);
    702a:	f7ff ffcd 	bl	6fc8 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    702e:	4620      	mov	r0, r4
    *p_pin = pin_number & 0x1F;
    7030:	f004 041f 	and.w	r4, r4, #31
    7034:	f7ff fdec 	bl	6c10 <pin_handler_trigger_uninit>
    reg->PIN_CNF[pin_number] = cnf;
    7038:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    703c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    7040:	2202      	movs	r2, #2
    7042:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    7046:	4803      	ldr	r0, [pc, #12]	; (7054 <nrfx_gpiote_pin_uninit+0x3c>)
}
    7048:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    704a:	4803      	ldr	r0, [pc, #12]	; (7058 <nrfx_gpiote_pin_uninit+0x40>)
    704c:	e7fc      	b.n	7048 <nrfx_gpiote_pin_uninit+0x30>
    704e:	bf00      	nop
    7050:	20000094 	.word	0x20000094
    7054:	0bad0000 	.word	0x0bad0000
    7058:	0bad0004 	.word	0x0bad0004

0000705c <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    705c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7060:	4b4e      	ldr	r3, [pc, #312]	; (719c <nrfx_gpiote_irq_handler+0x140>)
    return p_reg->INTENSET & mask;
    7062:	484f      	ldr	r0, [pc, #316]	; (71a0 <nrfx_gpiote_irq_handler+0x144>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7064:	494f      	ldr	r1, [pc, #316]	; (71a4 <nrfx_gpiote_irq_handler+0x148>)
    uint32_t status = 0;
    7066:	2500      	movs	r5, #0
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    7068:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    706a:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    706c:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    706e:	b136      	cbz	r6, 707e <nrfx_gpiote_irq_handler+0x22>
    return p_reg->INTENSET & mask;
    7070:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    7074:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    7076:	bf1e      	ittt	ne
    7078:	601c      	strne	r4, [r3, #0]
    707a:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    707c:	4315      	orrne	r5, r2
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    707e:	3304      	adds	r3, #4
    7080:	428b      	cmp	r3, r1
        }
        mask <<= 1;
    7082:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    7086:	d1f1      	bne.n	706c <nrfx_gpiote_irq_handler+0x10>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7088:	4b45      	ldr	r3, [pc, #276]	; (71a0 <nrfx_gpiote_irq_handler+0x144>)
    708a:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    708e:	b1bb      	cbz	r3, 70c0 <nrfx_gpiote_irq_handler+0x64>
        *p_masks = gpio_regs[i]->LATCH;
    7090:	f04f 46a0 	mov.w	r6, #1342177280	; 0x50000000
    7094:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    7098:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    709a:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    709e:	af01      	add	r7, sp, #4
    70a0:	f04f 0801 	mov.w	r8, #1
            while (latch[i])
    70a4:	9c01      	ldr	r4, [sp, #4]
    70a6:	b96c      	cbnz	r4, 70c4 <nrfx_gpiote_irq_handler+0x68>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    70a8:	4b3d      	ldr	r3, [pc, #244]	; (71a0 <nrfx_gpiote_irq_handler+0x144>)
    70aa:	f8c3 417c 	str.w	r4, [r3, #380]	; 0x17c
    70ae:	f8d3 317c 	ldr.w	r3, [r3, #380]	; 0x17c
        *p_masks = gpio_regs[i]->LATCH;
    70b2:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    70b6:	9301      	str	r3, [sp, #4]
        gpio_regs[i]->LATCH = *p_masks;
    70b8:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        if (latch[port_idx])
    70bc:	2b00      	cmp	r3, #0
    70be:	d1ee      	bne.n	709e <nrfx_gpiote_irq_handler+0x42>
        mask &= ~NRFX_BIT(ch);
    70c0:	2401      	movs	r4, #1
    70c2:	e066      	b.n	7192 <nrfx_gpiote_irq_handler+0x136>
                uint32_t pin = NRF_CTZ(latch[i]);
    70c4:	fa94 f4a4 	rbit	r4, r4
    70c8:	fab4 f484 	clz	r4, r4
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    70cc:	4a36      	ldr	r2, [pc, #216]	; (71a8 <nrfx_gpiote_irq_handler+0x14c>)
    70ce:	f104 0308 	add.w	r3, r4, #8
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    70d2:	08e0      	lsrs	r0, r4, #3
    70d4:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
    bit = BITMASK_RELBIT_GET(bit);
    70d8:	f004 0307 	and.w	r3, r4, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    70dc:	fa08 f203 	lsl.w	r2, r8, r3
    70e0:	5c3b      	ldrb	r3, [r7, r0]
    70e2:	ea23 0302 	bic.w	r3, r3, r2
    70e6:	543b      	strb	r3, [r7, r0]
    70e8:	00a3      	lsls	r3, r4, #2
    70ea:	f103 49a0 	add.w	r9, r3, #1342177280	; 0x50000000
    70ee:	f3c1 0a82 	ubfx	sl, r1, #2, #3
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    70f2:	f8d9 2700 	ldr.w	r2, [r9, #1792]	; 0x700
    if (is_level(trigger))
    70f6:	06cb      	lsls	r3, r1, #27
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    70f8:	46d3      	mov	fp, sl
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    70fa:	f3c2 4201 	ubfx	r2, r2, #16, #2
    if (is_level(trigger))
    70fe:	d518      	bpl.n	7132 <nrfx_gpiote_irq_handler+0xd6>
        call_handler(pin, trigger);
    7100:	4659      	mov	r1, fp
    7102:	4620      	mov	r0, r4
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    7104:	fa5f fa82 	uxtb.w	sl, r2
    7108:	f7ff fd3a 	bl	6b80 <call_handler>
    710c:	f8d9 3700 	ldr.w	r3, [r9, #1792]	; 0x700
        if (nrf_gpio_pin_sense_get(pin) == sense)
    7110:	f3c3 4301 	ubfx	r3, r3, #16, #2
    7114:	459a      	cmp	sl, r3
    7116:	d107      	bne.n	7128 <nrfx_gpiote_irq_handler+0xcc>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    7118:	2100      	movs	r1, #0
    711a:	4620      	mov	r0, r4
    711c:	f004 f86b 	bl	b1f6 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    7120:	4651      	mov	r1, sl
    7122:	4620      	mov	r0, r4
    7124:	f004 f867 	bl	b1f6 <nrf_gpio_cfg_sense_set>
    reg->LATCH = (1 << pin_number);
    7128:	fa08 f404 	lsl.w	r4, r8, r4
    712c:	f8c6 4520 	str.w	r4, [r6, #1312]	; 0x520
}
    7130:	e7b8      	b.n	70a4 <nrfx_gpiote_irq_handler+0x48>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    7132:	2a02      	cmp	r2, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    7134:	bf0c      	ite	eq
    7136:	2103      	moveq	r1, #3
    7138:	2102      	movne	r1, #2
    713a:	4620      	mov	r0, r4
    713c:	f004 f85b 	bl	b1f6 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    7140:	f1ba 0f03 	cmp.w	sl, #3
    7144:	d004      	beq.n	7150 <nrfx_gpiote_irq_handler+0xf4>
    7146:	2a02      	cmp	r2, #2
    7148:	d107      	bne.n	715a <nrfx_gpiote_irq_handler+0xfe>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    714a:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    714e:	d1eb      	bne.n	7128 <nrfx_gpiote_irq_handler+0xcc>
            call_handler(pin, trigger);
    7150:	4659      	mov	r1, fp
    7152:	4620      	mov	r0, r4
    7154:	f7ff fd14 	bl	6b80 <call_handler>
    7158:	e7e6      	b.n	7128 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    715a:	2a03      	cmp	r2, #3
    715c:	d1e4      	bne.n	7128 <nrfx_gpiote_irq_handler+0xcc>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    715e:	f1ba 0f02 	cmp.w	sl, #2
    7162:	e7f4      	b.n	714e <nrfx_gpiote_irq_handler+0xf2>
        uint32_t ch = NRF_CTZ(mask);
    7164:	fa95 f3a5 	rbit	r3, r5
    7168:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    716c:	fa04 f203 	lsl.w	r2, r4, r3
    7170:	009b      	lsls	r3, r3, #2
    7172:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7176:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    717a:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    717e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    7182:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    7186:	f3c0 2004 	ubfx	r0, r0, #8, #5
    718a:	f3c1 4101 	ubfx	r1, r1, #16, #2
    718e:	f7ff fcf7 	bl	6b80 <call_handler>
    while (mask)
    7192:	2d00      	cmp	r5, #0
    7194:	d1e6      	bne.n	7164 <nrfx_gpiote_irq_handler+0x108>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    7196:	b003      	add	sp, #12
    7198:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    719c:	40006100 	.word	0x40006100
    71a0:	40006000 	.word	0x40006000
    71a4:	40006120 	.word	0x40006120
    71a8:	20000094 	.word	0x20000094

000071ac <nrfx_power_init>:
    return m_usbevt_handler;
}
#endif

nrfx_err_t nrfx_power_init(nrfx_power_config_t const * p_config)
{
    71ac:	b510      	push	{r4, lr}
    NRFX_ASSERT(p_config);
    if (m_initialized)
    71ae:	4c0b      	ldr	r4, [pc, #44]	; (71dc <nrfx_power_init+0x30>)
{
    71b0:	4603      	mov	r3, r0
    if (m_initialized)
    71b2:	7820      	ldrb	r0, [r4, #0]
    71b4:	b978      	cbnz	r0, 71d6 <nrfx_power_init+0x2a>
#elif NRF_REGULATORS_HAS_DCDCEN_VDDH
    nrf_regulators_dcdcen_vddh_set(NRF_REGULATORS, p_config->dcdcenhv);
#endif

#if NRF_POWER_HAS_DCDCEN
    nrf_power_dcdcen_set(NRF_POWER, p_config->dcdcen);
    71b6:	781b      	ldrb	r3, [r3, #0]
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    71b8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    71bc:	f003 0301 	and.w	r3, r3, #1
    71c0:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    71c4:	f7fb fd98 	bl	2cf8 <arch_irq_is_enabled>
    71c8:	b908      	cbnz	r0, 71ce <nrfx_power_init+0x22>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    71ca:	f7fb fd71 	bl	2cb0 <arch_irq_enable>
#endif
#endif // defined(REGULATORS_PRESENT)

    nrfx_power_clock_irq_init();

    m_initialized = true;
    71ce:	2301      	movs	r3, #1
    return NRFX_SUCCESS;
    71d0:	4803      	ldr	r0, [pc, #12]	; (71e0 <nrfx_power_init+0x34>)
    m_initialized = true;
    71d2:	7023      	strb	r3, [r4, #0]
}
    71d4:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_ALREADY_INITIALIZED;
    71d6:	4803      	ldr	r0, [pc, #12]	; (71e4 <nrfx_power_init+0x38>)
    71d8:	e7fc      	b.n	71d4 <nrfx_power_init+0x28>
    71da:	bf00      	nop
    71dc:	20001ab4 	.word	0x20001ab4
    71e0:	0bad0000 	.word	0x0bad0000
    71e4:	0bad000c 	.word	0x0bad000c

000071e8 <nrfx_power_usbevt_uninit>:
    p_reg->INTENCLR = mask;
    71e8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    71ec:	f44f 7260 	mov.w	r2, #896	; 0x380
    71f0:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}

void nrfx_power_usbevt_uninit(void)
{
    nrfx_power_usbevt_disable();
    m_usbevt_handler = NULL;
    71f4:	4b01      	ldr	r3, [pc, #4]	; (71fc <nrfx_power_usbevt_uninit+0x14>)
    71f6:	2200      	movs	r2, #0
    71f8:	601a      	str	r2, [r3, #0]
}
    71fa:	4770      	bx	lr
    71fc:	20001734 	.word	0x20001734

00007200 <nrfx_power_usbevt_init>:
{
    7200:	b508      	push	{r3, lr}
    nrfx_power_usbevt_uninit();
    7202:	f7ff fff1 	bl	71e8 <nrfx_power_usbevt_uninit>
    if (p_config->handler != NULL)
    7206:	6803      	ldr	r3, [r0, #0]
    7208:	b10b      	cbz	r3, 720e <nrfx_power_usbevt_init+0xe>
        m_usbevt_handler = p_config->handler;
    720a:	4a01      	ldr	r2, [pc, #4]	; (7210 <nrfx_power_usbevt_init+0x10>)
    720c:	6013      	str	r3, [r2, #0]
}
    720e:	bd08      	pop	{r3, pc}
    7210:	20001734 	.word	0x20001734

00007214 <nrfx_power_irq_handler>:
    return p_reg->INTENSET;
    7214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000

#endif /* NRF_POWER_HAS_USBREG */


void nrfx_power_irq_handler(void)
{
    7218:	b510      	push	{r4, lr}
    721a:	f8d3 4304 	ldr.w	r4, [r3, #772]	; 0x304
    uint32_t enabled = nrf_power_int_enable_get(NRF_POWER);
    /* Prevent "unused variable" warning when all below blocks are disabled. */
    (void)enabled;

#if NRFX_POWER_SUPPORTS_POFCON
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    721e:	0762      	lsls	r2, r4, #29
    7220:	d507      	bpl.n	7232 <nrfx_power_irq_handler+0x1e>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_POFWARN))
    7222:	f44f 7084 	mov.w	r0, #264	; 0x108
    7226:	f003 fff4 	bl	b212 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_POFWARN_MASK)) &&
    722a:	b110      	cbz	r0, 7232 <nrfx_power_irq_handler+0x1e>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_pofwarn_handler != NULL);
        m_pofwarn_handler();
    722c:	4b1e      	ldr	r3, [pc, #120]	; (72a8 <nrfx_power_irq_handler+0x94>)
    722e:	681b      	ldr	r3, [r3, #0]
    7230:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_SLEEPEVT
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    7232:	06a3      	lsls	r3, r4, #26
    7234:	d508      	bpl.n	7248 <nrfx_power_irq_handler+0x34>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPENTER))
    7236:	f44f 708a 	mov.w	r0, #276	; 0x114
    723a:	f003 ffea 	bl	b212 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPENTER_MASK)) &&
    723e:	b118      	cbz	r0, 7248 <nrfx_power_irq_handler+0x34>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_ENTER);
    7240:	4b1a      	ldr	r3, [pc, #104]	; (72ac <nrfx_power_irq_handler+0x98>)
    7242:	2000      	movs	r0, #0
    7244:	681b      	ldr	r3, [r3, #0]
    7246:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    7248:	0660      	lsls	r0, r4, #25
    724a:	d508      	bpl.n	725e <nrfx_power_irq_handler+0x4a>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_SLEEPEXIT))
    724c:	f44f 708c 	mov.w	r0, #280	; 0x118
    7250:	f003 ffdf 	bl	b212 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_SLEEPEXIT_MASK)) &&
    7254:	b118      	cbz	r0, 725e <nrfx_power_irq_handler+0x4a>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_sleepevt_handler != NULL);
        m_sleepevt_handler(NRFX_POWER_SLEEP_EVT_EXIT);
    7256:	4b15      	ldr	r3, [pc, #84]	; (72ac <nrfx_power_irq_handler+0x98>)
    7258:	2001      	movs	r0, #1
    725a:	681b      	ldr	r3, [r3, #0]
    725c:	4798      	blx	r3
    }
#endif
#if NRF_POWER_HAS_USBREG
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    725e:	0621      	lsls	r1, r4, #24
    7260:	d508      	bpl.n	7274 <nrfx_power_irq_handler+0x60>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBDETECTED))
    7262:	f44f 708e 	mov.w	r0, #284	; 0x11c
    7266:	f003 ffd4 	bl	b212 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBDETECTED_MASK)) &&
    726a:	b118      	cbz	r0, 7274 <nrfx_power_irq_handler+0x60>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_DETECTED);
    726c:	4b10      	ldr	r3, [pc, #64]	; (72b0 <nrfx_power_irq_handler+0x9c>)
    726e:	2000      	movs	r0, #0
    7270:	681b      	ldr	r3, [r3, #0]
    7272:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    7274:	05e2      	lsls	r2, r4, #23
    7276:	d508      	bpl.n	728a <nrfx_power_irq_handler+0x76>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBREMOVED))
    7278:	f44f 7090 	mov.w	r0, #288	; 0x120
    727c:	f003 ffc9 	bl	b212 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBREMOVED_MASK)) &&
    7280:	b118      	cbz	r0, 728a <nrfx_power_irq_handler+0x76>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_REMOVED);
    7282:	4b0b      	ldr	r3, [pc, #44]	; (72b0 <nrfx_power_irq_handler+0x9c>)
    7284:	2001      	movs	r0, #1
    7286:	681b      	ldr	r3, [r3, #0]
    7288:	4798      	blx	r3
    }
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    728a:	05a3      	lsls	r3, r4, #22
    728c:	d50a      	bpl.n	72a4 <nrfx_power_irq_handler+0x90>
        nrf_power_event_get_and_clear(NRF_POWER, NRF_POWER_EVENT_USBPWRRDY))
    728e:	f44f 7092 	mov.w	r0, #292	; 0x124
    7292:	f003 ffbe 	bl	b212 <nrf_power_event_get_and_clear.constprop.0>
    if ((0 != (enabled & NRF_POWER_INT_USBPWRRDY_MASK)) &&
    7296:	b128      	cbz	r0, 72a4 <nrfx_power_irq_handler+0x90>
    {
        /* Cannot be null if event is enabled */
        NRFX_ASSERT(m_usbevt_handler != NULL);
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    7298:	4b05      	ldr	r3, [pc, #20]	; (72b0 <nrfx_power_irq_handler+0x9c>)
    }
#endif
}
    729a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_usbevt_handler(NRFX_POWER_USB_EVT_READY);
    729e:	681b      	ldr	r3, [r3, #0]
    72a0:	2002      	movs	r0, #2
    72a2:	4718      	bx	r3
}
    72a4:	bd10      	pop	{r4, pc}
    72a6:	bf00      	nop
    72a8:	2000172c 	.word	0x2000172c
    72ac:	20001730 	.word	0x20001730
    72b0:	20001734 	.word	0x20001734

000072b4 <nrfx_qdec_irq_handler>:
static nrfx_qdec_event_handler_t m_qdec_event_handler = NULL;
static nrfx_drv_state_t m_state = NRFX_DRV_STATE_UNINITIALIZED;
static bool m_skip_gpio_cfg;

void nrfx_qdec_irq_handler(void)
{
    72b4:	b513      	push	{r0, r1, r4, lr}
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE bool nrf_qdec_event_check(NRF_QDEC_Type const * p_reg, nrf_qdec_event_t event)
{
    return (bool)*(volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event);
    72b6:	4c2a      	ldr	r4, [pc, #168]	; (7360 <nrfx_qdec_irq_handler+0xac>)
    72b8:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    nrfx_qdec_event_t event;
    if ( nrf_qdec_event_check(NRF_QDEC, NRF_QDEC_EVENT_SAMPLERDY) &&
    72bc:	b1b3      	cbz	r3, 72ec <nrfx_qdec_irq_handler+0x38>
    return p_reg->INTENSET & mask; // when read this register will return the value of INTEN.
    72be:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    72c2:	07d9      	lsls	r1, r3, #31
    72c4:	d512      	bpl.n	72ec <nrfx_qdec_irq_handler+0x38>
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event) ) = 0;
    72c6:	2300      	movs	r3, #0
    72c8:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    72cc:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
         nrf_qdec_int_enable_check(NRF_QDEC, NRF_QDEC_INT_SAMPLERDY_MASK) )
    {
        nrf_qdec_event_clear(NRF_QDEC, NRF_QDEC_EVENT_SAMPLERDY);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_QDEC_EVENT_SAMPLERDY));

        event.type = NRF_QDEC_EVENT_SAMPLERDY;
    72d0:	f44f 7380 	mov.w	r3, #256	; 0x100
    72d4:	f8ad 3000 	strh.w	r3, [sp]
    return (nrf_qdec_sampleper_t)(p_reg->SAMPLEPER);
}

NRF_STATIC_INLINE int32_t nrf_qdec_sample_get(NRF_QDEC_Type const * p_reg)
{
    return p_reg->SAMPLE;
    72d8:	f8d4 350c 	ldr.w	r3, [r4, #1292]	; 0x50c
        event.data.sample.value = (int8_t)nrf_qdec_sample_get(NRF_QDEC);
    72dc:	f88d 3002 	strb.w	r3, [sp, #2]
        m_qdec_event_handler(event);
    72e0:	4b20      	ldr	r3, [pc, #128]	; (7364 <nrfx_qdec_irq_handler+0xb0>)
    72e2:	aa02      	add	r2, sp, #8
    72e4:	e912 0003 	ldmdb	r2, {r0, r1}
    72e8:	681b      	ldr	r3, [r3, #0]
    72ea:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event);
    72ec:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    }

    if ( nrf_qdec_event_check(NRF_QDEC, NRF_QDEC_EVENT_REPORTRDY) &&
    72f0:	b1d3      	cbz	r3, 7328 <nrfx_qdec_irq_handler+0x74>
    return p_reg->INTENSET & mask; // when read this register will return the value of INTEN.
    72f2:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    72f6:	079a      	lsls	r2, r3, #30
    72f8:	d516      	bpl.n	7328 <nrfx_qdec_irq_handler+0x74>
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event) ) = 0;
    72fa:	2300      	movs	r3, #0
    72fc:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
    7300:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
         nrf_qdec_int_enable_check(NRF_QDEC, NRF_QDEC_INT_REPORTRDY_MASK) )
    {
        nrf_qdec_event_clear(NRF_QDEC, NRF_QDEC_EVENT_REPORTRDY);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_QDEC_EVENT_REPORTRDY));

        event.type = NRF_QDEC_EVENT_REPORTRDY;
    7304:	f44f 7382 	mov.w	r3, #260	; 0x104
    7308:	f8ad 3000 	strh.w	r3, [sp]
    return p_reg->ACC;
}

NRF_STATIC_INLINE int32_t nrf_qdec_accread_get(NRF_QDEC_Type const * p_reg)
{
    return p_reg->ACCREAD;
    730c:	f8d4 3518 	ldr.w	r3, [r4, #1304]	; 0x518

        event.data.report.acc    = (int16_t)nrf_qdec_accread_get(NRF_QDEC);
    7310:	f8ad 3002 	strh.w	r3, [sp, #2]
    return p_reg->ACCDBL;
}

NRF_STATIC_INLINE uint32_t nrf_qdec_accdblread_get(NRF_QDEC_Type const * p_reg)
{
    return p_reg->ACCDBLREAD;
    7314:	f8d4 3548 	ldr.w	r3, [r4, #1352]	; 0x548
        event.data.report.accdbl = (uint16_t)nrf_qdec_accdblread_get(NRF_QDEC);
    7318:	f8ad 3004 	strh.w	r3, [sp, #4]
        m_qdec_event_handler(event);
    731c:	4b11      	ldr	r3, [pc, #68]	; (7364 <nrfx_qdec_irq_handler+0xb0>)
    731e:	aa02      	add	r2, sp, #8
    7320:	e912 0003 	ldmdb	r2, {r0, r1}
    7324:	681b      	ldr	r3, [r3, #0]
    7326:	4798      	blx	r3
    return (bool)*(volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event);
    7328:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    }

    if ( nrf_qdec_event_check(NRF_QDEC, NRF_QDEC_EVENT_ACCOF) &&
    732c:	b1ab      	cbz	r3, 735a <nrfx_qdec_irq_handler+0xa6>
    return p_reg->INTENSET & mask; // when read this register will return the value of INTEN.
    732e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
    7332:	075b      	lsls	r3, r3, #29
    7334:	d511      	bpl.n	735a <nrfx_qdec_irq_handler+0xa6>
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)event) ) = 0;
    7336:	2300      	movs	r3, #0
    7338:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
    733c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
         nrf_qdec_int_enable_check(NRF_QDEC, NRF_QDEC_INT_ACCOF_MASK) )
    {
        nrf_qdec_event_clear(NRF_QDEC, NRF_QDEC_EVENT_ACCOF);
        NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRF_QDEC_EVENT_ACCOF));

        event.type = NRF_QDEC_EVENT_ACCOF;
    7340:	f44f 7384 	mov.w	r3, #264	; 0x108
    7344:	f8ad 3000 	strh.w	r3, [sp]
        m_qdec_event_handler(event);
    7348:	aa02      	add	r2, sp, #8
    734a:	4b06      	ldr	r3, [pc, #24]	; (7364 <nrfx_qdec_irq_handler+0xb0>)
    734c:	e912 0003 	ldmdb	r2, {r0, r1}
    7350:	681b      	ldr	r3, [r3, #0]
    }
}
    7352:	b002      	add	sp, #8
    7354:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        m_qdec_event_handler(event);
    7358:	4718      	bx	r3
}
    735a:	b002      	add	sp, #8
    735c:	bd10      	pop	{r4, pc}
    735e:	bf00      	nop
    7360:	40012000 	.word	0x40012000
    7364:	20001738 	.word	0x20001738

00007368 <nrfx_qdec_init>:


nrfx_err_t nrfx_qdec_init(nrfx_qdec_config_t const * p_config,
                          nrfx_qdec_event_handler_t  event_handler)
{
    7368:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(p_config);
    NRFX_ASSERT(event_handler);
    nrfx_err_t err_code;

    if (m_state != NRFX_DRV_STATE_UNINITIALIZED)
    736a:	4c2f      	ldr	r4, [pc, #188]	; (7428 <nrfx_qdec_init+0xc0>)
    736c:	7823      	ldrb	r3, [r4, #0]
    736e:	2b00      	cmp	r3, #0
    7370:	d157      	bne.n	7422 <nrfx_qdec_init+0xba>
                         __func__,
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }

    m_qdec_event_handler = event_handler;
    7372:	4b2e      	ldr	r3, [pc, #184]	; (742c <nrfx_qdec_init+0xc4>)
    m_skip_gpio_cfg = p_config->skip_gpio_cfg;
    7374:	7e02      	ldrb	r2, [r0, #24]
    m_qdec_event_handler = event_handler;
    7376:	6019      	str	r1, [r3, #0]
    m_skip_gpio_cfg = p_config->skip_gpio_cfg;
    7378:	4b2d      	ldr	r3, [pc, #180]	; (7430 <nrfx_qdec_init+0xc8>)
    737a:	701a      	strb	r2, [r3, #0]

    if (!p_config->skip_gpio_cfg)
    737c:	b9c2      	cbnz	r2, 73b0 <nrfx_qdec_init+0x48>
    *p_pin = pin_number & 0x1F;
    737e:	6843      	ldr	r3, [r0, #4]
    7380:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    7384:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    7388:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    738c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    *p_pin = pin_number & 0x1F;
    7390:	6883      	ldr	r3, [r0, #8]
    7392:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    7396:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    739a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    {
        nrf_gpio_cfg_input(p_config->psela, NRF_GPIO_PIN_NOPULL);
        nrf_gpio_cfg_input(p_config->pselb, NRF_GPIO_PIN_NOPULL);
        if (p_config->pselled != NRF_QDEC_LED_NOT_CONNECTED)
    739e:	68c3      	ldr	r3, [r0, #12]
    73a0:	1c5d      	adds	r5, r3, #1
    *p_pin = pin_number & 0x1F;
    73a2:	bf1e      	ittt	ne
    73a4:	f003 031f 	andne.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    73a8:	f503 73e0 	addne.w	r3, r3, #448	; 0x1c0
    73ac:	f841 2023 	strne.w	r2, [r1, r3, lsl #2]
        {
            nrf_gpio_cfg_input(p_config->pselled, NRF_GPIO_PIN_NOPULL);
        }
    }
    if (!p_config->skip_psel_cfg)
    73b0:	7e42      	ldrb	r2, [r0, #25]
    73b2:	4b20      	ldr	r3, [pc, #128]	; (7434 <nrfx_qdec_init+0xcc>)
    73b4:	b942      	cbnz	r2, 73c8 <nrfx_qdec_init+0x60>
    {
        nrf_qdec_pins_set(NRF_QDEC, p_config->psela, p_config->pselb, p_config->pselled);
    73b6:	e9d0 5101 	ldrd	r5, r1, [r0, #4]
    73ba:	68c2      	ldr	r2, [r0, #12]
    p_reg->PSEL.A = phase_a_pin;
    73bc:	f8c3 5520 	str.w	r5, [r3, #1312]	; 0x520
    p_reg->PSEL.B = phase_b_pin;
    73c0:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
    p_reg->PSEL.LED = led_pin;
    73c4:	f8c3 251c 	str.w	r2, [r3, #1308]	; 0x51c
    p_reg->SAMPLEPER = sampleper;
    73c8:	7842      	ldrb	r2, [r0, #1]
    73ca:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    return p_reg->PSEL.LED;
    73ce:	f8d3 251c 	ldr.w	r2, [r3, #1308]	; 0x51c
    }

    nrf_qdec_sampleper_set(NRF_QDEC, p_config->sampleper);
    // Change the period and polarity of the LED only when it is used,
    // otherwise the ledpre field might have an invalid value.
    if (nrf_qdec_led_pin_get(NRF_QDEC) != NRF_QDEC_LED_NOT_CONNECTED)
    73d2:	3201      	adds	r2, #1
    {
        nrf_qdec_ledpre_set(NRF_QDEC, p_config->ledpre);
    73d4:	bf1f      	itttt	ne
    73d6:	6902      	ldrne	r2, [r0, #16]
}

NRF_STATIC_INLINE void nrf_qdec_ledpre_set(NRF_QDEC_Type * p_reg, uint32_t time_us)
{
    p_reg->LEDPRE = time_us;
    73d8:	f8c3 2540 	strne.w	r2, [r3, #1344]	; 0x540
    return (reportper == NRF_QDEC_REPORTPER_10) ? 10 : reportper * 40;
}

NRF_STATIC_INLINE void nrf_qdec_ledpol_set(NRF_QDEC_Type * p_reg, nrf_qdec_ledpol_t pol)
{
    p_reg->LEDPOL = pol;
    73dc:	7d02      	ldrbne	r2, [r0, #20]
    73de:	f8c3 2504 	strne.w	r2, [r3, #1284]	; 0x504
        nrf_qdec_ledpol_set(NRF_QDEC, p_config->ledpol);
    }

    if (p_config->dbfen)
    73e2:	7d42      	ldrb	r2, [r0, #21]
    73e4:	b102      	cbz	r2, 73e8 <nrfx_qdec_init+0x80>
    p_reg->DBFEN = NRF_QDEC_DBFEN_ENABLE;
    73e6:	2201      	movs	r2, #1
    p_reg->DBFEN = NRF_QDEC_DBFEN_DISABLE;
    73e8:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
        nrf_qdec_dbfen_disable(NRF_QDEC);
    }

    uint32_t int_mask = NRF_QDEC_INT_ACCOF_MASK;

    if (p_config->reportper != NRF_QDEC_REPORTPER_DISABLED)
    73ec:	7801      	ldrb	r1, [r0, #0]
    73ee:	2910      	cmp	r1, #16
    p_reg->SHORTS |= mask;
    73f0:	bf1f      	itttt	ne
    73f2:	f8d3 2200 	ldrne.w	r2, [r3, #512]	; 0x200
    73f6:	f042 0201 	orrne.w	r2, r2, #1
    73fa:	f8c3 2200 	strne.w	r2, [r3, #512]	; 0x200
    p_reg->REPORTPER = reportper;
    73fe:	f8c3 1510 	strne.w	r1, [r3, #1296]	; 0x510
        nrf_qdec_shorts_enable(NRF_QDEC, NRF_QDEC_SHORT_REPORTRDY_READCLRACC_MASK);
        nrf_qdec_reportper_set(NRF_QDEC, p_config->reportper);
        int_mask |= NRF_QDEC_INT_REPORTRDY_MASK;
    }

    if (p_config->sample_inten)
    7402:	7d81      	ldrb	r1, [r0, #22]
        int_mask |= NRF_QDEC_INT_REPORTRDY_MASK;
    7404:	bf14      	ite	ne
    7406:	2206      	movne	r2, #6
    uint32_t int_mask = NRF_QDEC_INT_ACCOF_MASK;
    7408:	2204      	moveq	r2, #4
    if (p_config->sample_inten)
    740a:	b109      	cbz	r1, 7410 <nrfx_qdec_init+0xa8>
    {
        int_mask |= NRF_QDEC_INT_SAMPLERDY_MASK;
    740c:	f042 0201 	orr.w	r2, r2, #1
    p_reg->INTENSET = mask; // writing 0 has no effect
    7410:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    }

    nrf_qdec_int_enable(NRF_QDEC, int_mask);
    NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_QDEC), p_config->interrupt_priority);
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_QDEC));
    7414:	2012      	movs	r0, #18
    7416:	f7fb fc4b 	bl	2cb0 <arch_irq_enable>

    m_state = NRFX_DRV_STATE_INITIALIZED;
    741a:	2301      	movs	r3, #1

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    741c:	4806      	ldr	r0, [pc, #24]	; (7438 <nrfx_qdec_init+0xd0>)
    m_state = NRFX_DRV_STATE_INITIALIZED;
    741e:	7023      	strb	r3, [r4, #0]
}
    7420:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    7422:	4806      	ldr	r0, [pc, #24]	; (743c <nrfx_qdec_init+0xd4>)
    7424:	e7fc      	b.n	7420 <nrfx_qdec_init+0xb8>
    7426:	bf00      	nop
    7428:	20001ab6 	.word	0x20001ab6
    742c:	20001738 	.word	0x20001738
    7430:	20001ab5 	.word	0x20001ab5
    7434:	40012000 	.word	0x40012000
    7438:	0bad0000 	.word	0x0bad0000
    743c:	0bad0005 	.word	0x0bad0005

00007440 <nrfx_qdec_enable>:
    p_reg->ENABLE = NRF_QDEC_ENABLE;
    7440:	4b04      	ldr	r3, [pc, #16]	; (7454 <nrfx_qdec_enable+0x14>)
    7442:	2201      	movs	r2, #1
    7444:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    *( (volatile uint32_t *)( (uint8_t *)p_reg + (uint32_t)task) ) = 1;
    7448:	601a      	str	r2, [r3, #0]
void nrfx_qdec_enable(void)
{
    NRFX_ASSERT(m_state == NRFX_DRV_STATE_INITIALIZED);
    nrf_qdec_enable(NRF_QDEC);
    nrf_qdec_task_trigger(NRF_QDEC, NRF_QDEC_TASK_START);
    m_state = NRFX_DRV_STATE_POWERED_ON;
    744a:	4b03      	ldr	r3, [pc, #12]	; (7458 <nrfx_qdec_enable+0x18>)
    744c:	2202      	movs	r2, #2
    744e:	701a      	strb	r2, [r3, #0]
    NRFX_LOG_INFO("Enabled.");
}
    7450:	4770      	bx	lr
    7452:	bf00      	nop
    7454:	40012000 	.word	0x40012000
    7458:	20001ab6 	.word	0x20001ab6

0000745c <nrfx_qdec_accumulators_read>:
    745c:	4b04      	ldr	r3, [pc, #16]	; (7470 <nrfx_qdec_accumulators_read+0x14>)
    745e:	2201      	movs	r2, #1
    7460:	609a      	str	r2, [r3, #8]
    return p_reg->ACCREAD;
    7462:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    return p_reg->ACCDBLREAD;
    7466:	f8d3 3548 	ldr.w	r3, [r3, #1352]	; 0x548
void nrfx_qdec_accumulators_read(int16_t * p_acc, int16_t * p_accdbl)
{
    NRFX_ASSERT(m_state == NRFX_DRV_STATE_POWERED_ON);
    nrf_qdec_task_trigger(NRF_QDEC, NRF_QDEC_TASK_READCLRACC);

    *p_acc    = (int16_t)nrf_qdec_accread_get(NRF_QDEC);
    746a:	8002      	strh	r2, [r0, #0]
    *p_accdbl = (int16_t)nrf_qdec_accdblread_get(NRF_QDEC);
    746c:	800b      	strh	r3, [r1, #0]

    NRFX_LOG_DEBUG("Accumulators data, ACC register:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_acc, sizeof(p_acc[0]));
    NRFX_LOG_DEBUG("Accumulators data, ACCDBL register:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_accdbl, sizeof(p_accdbl[0]));
}
    746e:	4770      	bx	lr
    7470:	40012000 	.word	0x40012000

00007474 <nrfx_spim_init>:

nrfx_err_t nrfx_spim_init(nrfx_spim_t const *        p_instance,
                          nrfx_spim_config_t const * p_config,
                          nrfx_spim_evt_handler_t    handler,
                          void *                     p_context)
{
    7474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7478:	4606      	mov	r6, r0
    NRFX_ASSERT(p_config);
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    747a:	4d4f      	ldr	r5, [pc, #316]	; (75b8 <nrfx_spim_init+0x144>)
{
    747c:	460c      	mov	r4, r1
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    747e:	7931      	ldrb	r1, [r6, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    7480:	014f      	lsls	r7, r1, #5
    7482:	eb05 1141 	add.w	r1, r5, r1, lsl #5
{
    7486:	4610      	mov	r0, r2
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    7488:	7f0a      	ldrb	r2, [r1, #28]
    748a:	2a00      	cmp	r2, #0
    748c:	f040 8092 	bne.w	75b4 <nrfx_spim_init+0x140>
    NRF_SPIM_Type * p_spim = (NRF_SPIM_Type *)p_instance->p_reg;
    7490:	6832      	ldr	r2, [r6, #0]
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
    7492:	51e8      	str	r0, [r5, r7]
    p_cb->p_context = p_context;
    7494:	604b      	str	r3, [r1, #4]

    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    7496:	7be0      	ldrb	r0, [r4, #15]
    7498:	7f8b      	ldrb	r3, [r1, #30]
    p_cb->ss_active_high = p_config->ss_active_high;
    749a:	f894 c004 	ldrb.w	ip, [r4, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    749e:	f360 0300 	bfi	r3, r0, #0, #1
    p_cb->ss_active_high = p_config->ss_active_high;
    74a2:	f36c 0341 	bfi	r3, ip, #1, #1
    74a6:	778b      	strb	r3, [r1, #30]
#if NRFX_CHECK(NRFX_SPIM_EXTENDED_ENABLED)
    p_cb->use_hw_ss = p_config->use_hw_ss;
#endif
    p_cb->ss_pin = p_config->ss_pin;
    74a8:	78e3      	ldrb	r3, [r4, #3]
    74aa:	77cb      	strb	r3, [r1, #31]

    configure_pins(p_instance, p_config);
    74ac:	f8d6 8000 	ldr.w	r8, [r6]
    if (!p_config->skip_gpio_cfg)
    74b0:	2800      	cmp	r0, #0
    74b2:	d13d      	bne.n	7530 <nrfx_spim_init+0xbc>
        nrf_gpio_pin_write(p_config->sck_pin,
    74b4:	7b21      	ldrb	r1, [r4, #12]
    74b6:	7820      	ldrb	r0, [r4, #0]
    74b8:	2901      	cmp	r1, #1
    74ba:	bf94      	ite	ls
    74bc:	2100      	movls	r1, #0
    74be:	2101      	movhi	r1, #1
    74c0:	f003 fed4 	bl	b26c <nrf_gpio_pin_write>
    *p_pin = pin_number & 0x1F;
    74c4:	7823      	ldrb	r3, [r4, #0]
    74c6:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    74ca:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    74ce:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
    74d2:	2101      	movs	r1, #1
    74d4:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        if (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    74d8:	7863      	ldrb	r3, [r4, #1]
    74da:	2bff      	cmp	r3, #255	; 0xff
    74dc:	d009      	beq.n	74f2 <nrfx_spim_init+0x7e>
    *p_pin = pin_number & 0x1F;
    74de:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    74e2:	4099      	lsls	r1, r3
    reg->PIN_CNF[pin_number] = cnf;
    74e4:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    p_reg->OUTCLR = clr_mask;
    74e8:	f8c0 150c 	str.w	r1, [r0, #1292]	; 0x50c
    reg->PIN_CNF[pin_number] = cnf;
    74ec:	2103      	movs	r1, #3
    74ee:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        if (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    74f2:	78a3      	ldrb	r3, [r4, #2]
    74f4:	2bff      	cmp	r3, #255	; 0xff
    74f6:	d009      	beq.n	750c <nrfx_spim_init+0x98>
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    74f8:	7ba1      	ldrb	r1, [r4, #14]
    *p_pin = pin_number & 0x1F;
    74fa:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    74fe:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7502:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    7506:	0089      	lsls	r1, r1, #2
    reg->PIN_CNF[pin_number] = cnf;
    7508:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        if (p_config->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    750c:	78e0      	ldrb	r0, [r4, #3]
    750e:	28ff      	cmp	r0, #255	; 0xff
    7510:	d00e      	beq.n	7530 <nrfx_spim_init+0xbc>
                               p_config->ss_active_high ? 0 : 1);
    7512:	7921      	ldrb	r1, [r4, #4]
            nrf_gpio_pin_write(p_config->ss_pin,
    7514:	f081 0101 	eor.w	r1, r1, #1
    7518:	f003 fea8 	bl	b26c <nrf_gpio_pin_write>
    *p_pin = pin_number & 0x1F;
    751c:	78e3      	ldrb	r3, [r4, #3]
    751e:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    7522:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7526:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
    752a:	2003      	movs	r0, #3
    752c:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
    if (!p_config->skip_psel_cfg)
    7530:	7c23      	ldrb	r3, [r4, #16]
    7532:	b993      	cbnz	r3, 755a <nrfx_spim_init+0xe6>
        uint32_t mosi_pin = (p_config->mosi_pin != NRFX_SPIM_PIN_NOT_USED)
    7534:	7863      	ldrb	r3, [r4, #1]
        nrf_spim_pins_set(p_spim, p_config->sck_pin, mosi_pin, miso_pin);
    7536:	7820      	ldrb	r0, [r4, #0]
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    7538:	2bff      	cmp	r3, #255	; 0xff
    753a:	bf18      	it	ne
    753c:	4619      	movne	r1, r3
        uint32_t miso_pin = (p_config->miso_pin != NRFX_SPIM_PIN_NOT_USED)
    753e:	78a3      	ldrb	r3, [r4, #2]
NRF_STATIC_INLINE void nrf_spim_pins_set(NRF_SPIM_Type * p_reg,
                                         uint32_t        sck_pin,
                                         uint32_t        mosi_pin,
                                         uint32_t        miso_pin)
{
    p_reg->PSEL.SCK  = sck_pin;
    7540:	f8c8 0508 	str.w	r0, [r8, #1288]	; 0x508
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    7544:	bf08      	it	eq
    7546:	f04f 31ff 	moveq.w	r1, #4294967295
                            : NRF_SPIM_PIN_NOT_CONNECTED;
    754a:	2bff      	cmp	r3, #255	; 0xff
    754c:	bf08      	it	eq
    754e:	f04f 33ff 	moveq.w	r3, #4294967295
    p_reg->PSEL.MOSI = mosi_pin;
    7552:	f8c8 150c 	str.w	r1, [r8, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
    7556:	f8c8 3510 	str.w	r3, [r8, #1296]	; 0x510
#endif // defined(SPIM_STALLSTAT_TX_Msk)

NRF_STATIC_INLINE void nrf_spim_frequency_set(NRF_SPIM_Type *      p_reg,
                                              nrf_spim_frequency_t frequency)
{
    p_reg->FREQUENCY = (uint32_t)frequency;
    755a:	68a3      	ldr	r3, [r4, #8]
    755c:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
NRF_STATIC_INLINE void nrf_spim_configure(NRF_SPIM_Type *      p_reg,
                                          nrf_spim_mode_t      spi_mode,
                                          nrf_spim_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPIM_BIT_ORDER_MSB_FIRST ?
        SPIM_CONFIG_ORDER_MsbFirst : SPIM_CONFIG_ORDER_LsbFirst);
    7560:	7b63      	ldrb	r3, [r4, #13]
    // Change rx delay
    nrf_spim_iftiming_set(p_spim, p_config->rx_delay);
#endif

    nrf_spim_frequency_set(p_spim, p_config->frequency);
    nrf_spim_configure(p_spim, p_config->mode, p_config->bit_order);
    7562:	7b21      	ldrb	r1, [r4, #12]
    7564:	3b00      	subs	r3, #0
    7566:	bf18      	it	ne
    7568:	2301      	movne	r3, #1
    switch (spi_mode)
    756a:	2902      	cmp	r1, #2
    756c:	d01c      	beq.n	75a8 <nrfx_spim_init+0x134>
    756e:	2903      	cmp	r1, #3
    7570:	d01d      	beq.n	75ae <nrfx_spim_init+0x13a>
    7572:	2901      	cmp	r1, #1
    7574:	d101      	bne.n	757a <nrfx_spim_init+0x106>
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Leading    << SPIM_CONFIG_CPHA_Pos);
        break;

    case NRF_SPIM_MODE_1:
        config |= (SPIM_CONFIG_CPOL_ActiveHigh << SPIM_CONFIG_CPOL_Pos) |
    7576:	f043 0302 	orr.w	r3, r3, #2
    case NRF_SPIM_MODE_3:
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
                  (SPIM_CONFIG_CPHA_Trailing   << SPIM_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
    757a:	f8c2 3554 	str.w	r3, [r2, #1364]	; 0x554
}

NRF_STATIC_INLINE void nrf_spim_orc_set(NRF_SPIM_Type * p_reg,
                                        uint8_t         orc)
{
    p_reg->ORC = orc;
    757e:	79a3      	ldrb	r3, [r4, #6]
    7580:	f8c2 35c0 	str.w	r3, [r2, #1472]	; 0x5c0
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Enabled << SPIM_ENABLE_ENABLE_Pos);
    7584:	2307      	movs	r3, #7
    7586:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

    nrf_spim_orc_set(p_spim, p_config->orc);

    nrf_spim_enable(p_spim);

    if (p_cb->handler)
    758a:	59eb      	ldr	r3, [r5, r7]
    758c:	b123      	cbz	r3, 7598 <nrfx_spim_init+0x124>
    return ((((uint32_t)p_object) & 0x3u) == 0u);
}

NRF_STATIC_INLINE IRQn_Type nrfx_get_irq_number(void const * p_reg)
{
    return (IRQn_Type)NRFX_IRQ_NUMBER_GET(p_reg);
    758e:	6830      	ldr	r0, [r6, #0]
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
    7590:	f340 3007 	sbfx	r0, r0, #12, #8
    7594:	f7fb fb8c 	bl	2cb0 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
    7598:	443d      	add	r5, r7
    759a:	2300      	movs	r3, #0
    759c:	776b      	strb	r3, [r5, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    759e:	4807      	ldr	r0, [pc, #28]	; (75bc <nrfx_spim_init+0x148>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    75a0:	2301      	movs	r3, #1
    75a2:	772b      	strb	r3, [r5, #28]
}
    75a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    75a8:	f043 0304 	orr.w	r3, r3, #4
        break;
    75ac:	e7e5      	b.n	757a <nrfx_spim_init+0x106>
        config |= (SPIM_CONFIG_CPOL_ActiveLow  << SPIM_CONFIG_CPOL_Pos) |
    75ae:	f043 0306 	orr.w	r3, r3, #6
        break;
    75b2:	e7e2      	b.n	757a <nrfx_spim_init+0x106>
        return err_code;
    75b4:	4802      	ldr	r0, [pc, #8]	; (75c0 <nrfx_spim_init+0x14c>)
    75b6:	e7f5      	b.n	75a4 <nrfx_spim_init+0x130>
    75b8:	2000173c 	.word	0x2000173c
    75bc:	0bad0000 	.word	0x0bad0000
    75c0:	0bad0005 	.word	0x0bad0005

000075c4 <nrfx_spim_uninit>:

    nrf_gpio_cfg_default(pin);
}

void nrfx_spim_uninit(nrfx_spim_t const * p_instance)
{
    75c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    75c6:	7903      	ldrb	r3, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    NRF_SPIM_Type * p_spim = p_instance->p_reg;

    if (p_cb->handler)
    75c8:	4d20      	ldr	r5, [pc, #128]	; (764c <nrfx_spim_uninit+0x88>)
    NRF_SPIM_Type * p_spim = p_instance->p_reg;
    75ca:	6804      	ldr	r4, [r0, #0]
    if (p_cb->handler)
    75cc:	015e      	lsls	r6, r3, #5
    75ce:	eb05 1743 	add.w	r7, r5, r3, lsl #5
    75d2:	59ab      	ldr	r3, [r5, r6]
    75d4:	b1b3      	cbz	r3, 7604 <nrfx_spim_uninit+0x40>
    {
        NRFX_IRQ_DISABLE(nrfx_get_irq_number(p_instance->p_reg));
    75d6:	f344 3007 	sbfx	r0, r4, #12, #8
    75da:	f7fb fb79 	bl	2cd0 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    75de:	4b1c      	ldr	r3, [pc, #112]	; (7650 <nrfx_spim_uninit+0x8c>)
    75e0:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
        nrf_spim_int_disable(p_spim, NRF_SPIM_ALL_INTS_MASK);
        if (p_cb->transfer_in_progress)
    75e4:	7f7b      	ldrb	r3, [r7, #29]
    75e6:	b16b      	cbz	r3, 7604 <nrfx_spim_uninit+0x40>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    75e8:	2301      	movs	r3, #1
    75ea:	6163      	str	r3, [r4, #20]
    75ec:	2764      	movs	r7, #100	; 0x64
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    75ee:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    NRFX_WAIT_FOR(nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_STOPPED), 100, 1, stopped);
    75f2:	b923      	cbnz	r3, 75fe <nrfx_spim_uninit+0x3a>
    75f4:	2001      	movs	r0, #1
    75f6:	f003 fd77 	bl	b0e8 <nrfx_busy_wait>
    75fa:	3f01      	subs	r7, #1
    75fc:	d1f7      	bne.n	75ee <nrfx_spim_uninit+0x2a>
    p_cb->transfer_in_progress = false;
    75fe:	19ab      	adds	r3, r5, r6
    7600:	2200      	movs	r2, #0
    7602:	775a      	strb	r2, [r3, #29]
    p_reg->ENABLE = (SPIM_ENABLE_ENABLE_Disabled << SPIM_ENABLE_ENABLE_Pos);
    7604:	2300      	movs	r3, #0
        }
    }

    nrf_spim_disable(p_spim);

    if (!p_cb->skip_gpio_cfg)
    7606:	19a9      	adds	r1, r5, r6
    7608:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    760c:	7f8b      	ldrb	r3, [r1, #30]
    760e:	07db      	lsls	r3, r3, #31
    7610:	d417      	bmi.n	7642 <nrfx_spim_uninit+0x7e>
    return p_reg->PSEL.SCK;
    7612:	f8d4 0508 	ldr.w	r0, [r4, #1288]	; 0x508
    {
        spim_pin_uninit(nrf_spim_sck_pin_get(p_spim));
    7616:	f003 fe1d 	bl	b254 <spim_pin_uninit>
    return p_reg->PSEL.MISO;
    761a:	f8d4 0510 	ldr.w	r0, [r4, #1296]	; 0x510
        spim_pin_uninit(nrf_spim_miso_pin_get(p_spim));
    761e:	f003 fe19 	bl	b254 <spim_pin_uninit>
    return p_reg->PSEL.MOSI;
    7622:	f8d4 050c 	ldr.w	r0, [r4, #1292]	; 0x50c
        spim_pin_uninit(nrf_spim_mosi_pin_get(p_spim));
    7626:	f003 fe15 	bl	b254 <spim_pin_uninit>
        if (SPIM_DCX_PRESENT_VALIDATE(p_instance->drv_inst_idx))
        {
            spim_pin_uninit(nrf_spim_dcx_pin_get(p_spim));
        }
#endif
        if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    762a:	7fcb      	ldrb	r3, [r1, #31]
    762c:	2bff      	cmp	r3, #255	; 0xff
    762e:	d008      	beq.n	7642 <nrfx_spim_uninit+0x7e>
    *p_pin = pin_number & 0x1F;
    7630:	f003 031f 	and.w	r3, r3, #31
    reg->PIN_CNF[pin_number] = cnf;
    7634:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    7638:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
    763c:	2102      	movs	r1, #2
    763e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

#if NRFX_CHECK(NRFX_PRS_ENABLED)
    nrfx_prs_release(p_instance->p_reg);
#endif

    p_cb->state = NRFX_DRV_STATE_UNINITIALIZED;
    7642:	4435      	add	r5, r6
    7644:	2300      	movs	r3, #0
    7646:	772b      	strb	r3, [r5, #28]
}
    7648:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    764a:	bf00      	nop
    764c:	2000173c 	.word	0x2000173c
    7650:	00080152 	.word	0x00080152

00007654 <nrfx_spim_xfer>:
}

nrfx_err_t nrfx_spim_xfer(nrfx_spim_t const *           p_instance,
                          nrfx_spim_xfer_desc_t const * p_xfer_desc,
                          uint32_t                      flags)
{
    7654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spim_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
    7658:	4f36      	ldr	r7, [pc, #216]	; (7734 <nrfx_spim_xfer+0xe0>)
    765a:	7903      	ldrb	r3, [r0, #4]
    765c:	eb07 1843 	add.w	r8, r7, r3, lsl #5
{
    7660:	4614      	mov	r4, r2
#endif
                (p_cb->ss_pin == NRFX_SPIM_PIN_NOT_USED));

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
    7662:	f898 201d 	ldrb.w	r2, [r8, #29]
{
    7666:	4681      	mov	r9, r0
    7668:	460d      	mov	r5, r1
    if (p_cb->transfer_in_progress)
    766a:	015e      	lsls	r6, r3, #5
    766c:	2a00      	cmp	r2, #0
    766e:	d15f      	bne.n	7730 <nrfx_spim_xfer+0xdc>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler && !(flags & (NRFX_SPIM_FLAG_REPEATED_XFER |
    7670:	59ba      	ldr	r2, [r7, r6]
    7672:	b12a      	cbz	r2, 7680 <nrfx_spim_xfer+0x2c>
    7674:	f014 0f14 	tst.w	r4, #20
                                        NRFX_SPIM_FLAG_NO_XFER_EVT_HANDLER)))
        {
            p_cb->transfer_in_progress = true;
    7678:	bf04      	itt	eq
    767a:	2201      	moveq	r2, #1
    767c:	f888 201d 	strbeq.w	r2, [r8, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
    7680:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    7684:	eb07 0c06 	add.w	ip, r7, r6
    7688:	f10c 0c0c 	add.w	ip, ip, #12
    768c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

    set_ss_pin_state(p_cb, true);
    7690:	2101      	movs	r1, #1
    7692:	4640      	mov	r0, r8
    7694:	f003 fdf7 	bl	b286 <set_ss_pin_state>
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    7698:	6829      	ldr	r1, [r5, #0]
    769a:	b121      	cbz	r1, 76a6 <nrfx_spim_xfer+0x52>
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    769c:	f001 4360 	and.w	r3, r1, #3758096384	; 0xe0000000
    76a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    76a4:	d106      	bne.n	76b4 <nrfx_spim_xfer+0x60>
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    76a6:	68aa      	ldr	r2, [r5, #8]
    if ((p_xfer_desc->p_tx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_tx_buffer)) ||
    76a8:	b152      	cbz	r2, 76c0 <nrfx_spim_xfer+0x6c>
    76aa:	f002 4360 	and.w	r3, r2, #3758096384	; 0xe0000000
        (p_xfer_desc->p_rx_buffer != NULL && !nrfx_is_in_ram(p_xfer_desc->p_rx_buffer)))
    76ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    76b2:	d005      	beq.n	76c0 <nrfx_spim_xfer+0x6c>
        p_cb->transfer_in_progress = false;
    76b4:	443e      	add	r6, r7
    76b6:	2300      	movs	r3, #0
        return err_code;
    76b8:	481f      	ldr	r0, [pc, #124]	; (7738 <nrfx_spim_xfer+0xe4>)
        p_cb->transfer_in_progress = false;
    76ba:	7773      	strb	r3, [r6, #29]

    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
}
    76bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    return spim_xfer(p_instance->p_reg, p_cb,  p_xfer_desc, flags);
    76c0:	f8d9 3000 	ldr.w	r3, [r9]
    nrf_spim_tx_buffer_set(p_spim, p_xfer_desc->p_tx_buffer, p_xfer_desc->tx_length);
    76c4:	6868      	ldr	r0, [r5, #4]
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    76c6:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    nrf_spim_rx_buffer_set(p_spim, p_xfer_desc->p_rx_buffer, p_xfer_desc->rx_length);
    76ca:	68e9      	ldr	r1, [r5, #12]
    p_reg->TXD.MAXCNT = length;
    76cc:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    76d0:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    76d4:	2200      	movs	r2, #0
    p_reg->RXD.MAXCNT = length;
    76d6:	f8c3 1538 	str.w	r1, [r3, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    76da:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    76de:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    if (NRFX_SPIM_FLAG_TX_POSTINC & flags)
    76e2:	f014 0201 	ands.w	r2, r4, #1
}


NRF_STATIC_INLINE void nrf_spim_tx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_ArrayList << SPIM_TXD_LIST_LIST_Pos;
    76e6:	bf18      	it	ne
    76e8:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_tx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->TXD.LIST = SPIM_TXD_LIST_LIST_Disabled << SPIM_TXD_LIST_LIST_Pos;
    76ea:	f8c3 2550 	str.w	r2, [r3, #1360]	; 0x550
    if (NRFX_SPIM_FLAG_RX_POSTINC & flags)
    76ee:	f014 0202 	ands.w	r2, r4, #2
}

NRF_STATIC_INLINE void nrf_spim_rx_list_enable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_ArrayList << SPIM_RXD_LIST_LIST_Pos;
    76f2:	bf18      	it	ne
    76f4:	2201      	movne	r2, #1
}

NRF_STATIC_INLINE void nrf_spim_rx_list_disable(NRF_SPIM_Type * p_reg)
{
    p_reg->RXD.LIST = SPIM_RXD_LIST_LIST_Disabled << SPIM_RXD_LIST_LIST_Pos;
    76f6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    76fa:	f014 0208 	ands.w	r2, r4, #8
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    76fe:	bf04      	itt	eq
    7700:	2101      	moveq	r1, #1
    7702:	6119      	streq	r1, [r3, #16]
    if (!p_cb->handler)
    7704:	59b9      	ldr	r1, [r7, r6]
    7706:	b949      	cbnz	r1, 771c <nrfx_spim_xfer+0xc8>
        if (!(flags & NRFX_SPIM_FLAG_HOLD_XFER))
    7708:	b912      	cbnz	r2, 7710 <nrfx_spim_xfer+0xbc>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    770a:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    770e:	e7fb      	b.n	7708 <nrfx_spim_xfer+0xb4>
        set_ss_pin_state(p_cb, false);
    7710:	2100      	movs	r1, #0
    7712:	4640      	mov	r0, r8
    7714:	f003 fdb7 	bl	b286 <set_ss_pin_state>
    return err_code;
    7718:	4808      	ldr	r0, [pc, #32]	; (773c <nrfx_spim_xfer+0xe8>)
}
    771a:	e7cf      	b.n	76bc <nrfx_spim_xfer+0x68>
    if (!enable)
    771c:	f014 0f04 	tst.w	r4, #4
    7720:	f04f 0240 	mov.w	r2, #64	; 0x40
    p_reg->INTENCLR = mask;
    7724:	bf14      	ite	ne
    7726:	f8c3 2308 	strne.w	r2, [r3, #776]	; 0x308
    p_reg->INTENSET = mask;
    772a:	f8c3 2304 	streq.w	r2, [r3, #772]	; 0x304
    772e:	e7f3      	b.n	7718 <nrfx_spim_xfer+0xc4>
        return err_code;
    7730:	4803      	ldr	r0, [pc, #12]	; (7740 <nrfx_spim_xfer+0xec>)
    7732:	e7c3      	b.n	76bc <nrfx_spim_xfer+0x68>
    7734:	2000173c 	.word	0x2000173c
    7738:	0bad000a 	.word	0x0bad000a
    773c:	0bad0000 	.word	0x0bad0000
    7740:	0bad000b 	.word	0x0bad000b

00007744 <nrfx_spim_0_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7744:	4b0c      	ldr	r3, [pc, #48]	; (7778 <nrfx_spim_0_irq_handler+0x34>)
    7746:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
    }
}

#if NRFX_CHECK(NRFX_SPIM0_ENABLED)
void nrfx_spim_0_irq_handler(void)
{
    774a:	b510      	push	{r4, lr}
    if (nrf_spim_event_check(p_spim, NRF_SPIM_EVENT_END))
    774c:	b192      	cbz	r2, 7774 <nrfx_spim_0_irq_handler+0x30>
    set_ss_pin_state(p_cb, false);
    774e:	4a0b      	ldr	r2, [pc, #44]	; (777c <nrfx_spim_0_irq_handler+0x38>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    7750:	2400      	movs	r4, #0
    7752:	f8c3 4118 	str.w	r4, [r3, #280]	; 0x118
    7756:	4621      	mov	r1, r4
    7758:	4610      	mov	r0, r2
    775a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
    775e:	f003 fd92 	bl	b286 <set_ss_pin_state>
    p_cb->evt.type = NRFX_SPIM_EVENT_DONE;
    7762:	7214      	strb	r4, [r2, #8]
    p_cb->transfer_in_progress = false;
    7764:	7754      	strb	r4, [r2, #29]
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    7766:	e9d2 3100 	ldrd	r3, r1, [r2]
    irq_handler(NRF_SPIM0, &m_cb[NRFX_SPIM0_INST_IDX]);
}
    776a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
    776e:	f102 0008 	add.w	r0, r2, #8
    7772:	4718      	bx	r3
}
    7774:	bd10      	pop	{r4, pc}
    7776:	bf00      	nop
    7778:	40003000 	.word	0x40003000
    777c:	2000173c 	.word	0x2000173c

00007780 <ep_state_access>:
 * @param ep Endpoint number.
 */
static inline usbd_ep_state_t* ep_state_access(nrfx_usbd_ep_t ep)
{
    NRFX_USBD_ASSERT_EP_VALID(ep);
    return ((NRF_USBD_EPIN_CHECK(ep) ? m_ep_state.ep_in : m_ep_state.ep_out) +
    7780:	4b05      	ldr	r3, [pc, #20]	; (7798 <ep_state_access+0x18>)
    7782:	f010 0f80 	tst.w	r0, #128	; 0x80
    7786:	f1a3 0290 	sub.w	r2, r3, #144	; 0x90
    778a:	bf08      	it	eq
    778c:	4613      	moveq	r3, r2
        NRF_USBD_EP_NR_GET(ep));
    778e:	f000 000f 	and.w	r0, r0, #15
}
    7792:	eb03 1000 	add.w	r0, r3, r0, lsl #4
    7796:	4770      	bx	lr
    7798:	200018cc 	.word	0x200018cc

0000779c <ev_usbreset_handler>:
 * Interrupt runtimes that would be vectorized using @ref m_isr.
 * @{
 */

static void ev_usbreset_handler(void)
{
    779c:	b507      	push	{r0, r1, r2, lr}
    m_bus_suspend = false;
    779e:	4a09      	ldr	r2, [pc, #36]	; (77c4 <ev_usbreset_handler+0x28>)
    77a0:	2300      	movs	r3, #0
    77a2:	7013      	strb	r3, [r2, #0]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    77a4:	4a08      	ldr	r2, [pc, #32]	; (77c8 <ev_usbreset_handler+0x2c>)

    const nrfx_usbd_evt_t evt = {
    77a6:	f8ad 3005 	strh.w	r3, [sp, #5]
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    77aa:	7013      	strb	r3, [r2, #0]
    const nrfx_usbd_evt_t evt = {
    77ac:	f88d 3007 	strb.w	r3, [sp, #7]
    77b0:	2301      	movs	r3, #1
    77b2:	f88d 3004 	strb.w	r3, [sp, #4]
            .type = NRFX_USBD_EVT_RESET
    };

    m_event_handler(&evt);
    77b6:	4b05      	ldr	r3, [pc, #20]	; (77cc <ev_usbreset_handler+0x30>)
    77b8:	a801      	add	r0, sp, #4
    77ba:	681b      	ldr	r3, [r3, #0]
    77bc:	4798      	blx	r3
}
    77be:	b003      	add	sp, #12
    77c0:	f85d fb04 	ldr.w	pc, [sp], #4
    77c4:	20001ab7 	.word	0x20001ab7
    77c8:	20001aba 	.word	0x20001aba
    77cc:	2000195c 	.word	0x2000195c

000077d0 <ev_usbevent_handler>:
    return p_reg->EVENTCAUSE;
    77d0:	4b21      	ldr	r3, [pc, #132]	; (7858 <ev_usbevent_handler+0x88>)
    };
    m_event_handler(&evt);
}

static void ev_usbevent_handler(void)
{
    77d2:	b513      	push	{r0, r1, r4, lr}
    77d4:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
    p_reg->EVENTCAUSE = flags;
    77d8:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    if (event & NRF_USBD_EVENTCAUSE_ISOOUTCRC_MASK)
    {
        NRFX_LOG_DEBUG("USBD event: ISOOUTCRC");
        /* Currently no support */
    }
    if (event & NRF_USBD_EVENTCAUSE_SUSPEND_MASK)
    77dc:	05e1      	lsls	r1, r4, #23
    (void) p_reg->EVENTCAUSE;
    77de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    77e2:	d50e      	bpl.n	7802 <ev_usbevent_handler+0x32>
    {
        NRFX_LOG_DEBUG("USBD event: SUSPEND");
        m_bus_suspend = true;
    77e4:	4b1d      	ldr	r3, [pc, #116]	; (785c <ev_usbevent_handler+0x8c>)
    77e6:	2201      	movs	r2, #1
    77e8:	701a      	strb	r2, [r3, #0]
        const nrfx_usbd_evt_t evt = {
    77ea:	2300      	movs	r3, #0
    77ec:	f8ad 3005 	strh.w	r3, [sp, #5]
    77f0:	f88d 3007 	strb.w	r3, [sp, #7]
    77f4:	2302      	movs	r3, #2
    77f6:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_SUSPEND
        };
        m_event_handler(&evt);
    77fa:	4b19      	ldr	r3, [pc, #100]	; (7860 <ev_usbevent_handler+0x90>)
    77fc:	a801      	add	r0, sp, #4
    77fe:	681b      	ldr	r3, [r3, #0]
    7800:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    7802:	05a2      	lsls	r2, r4, #22
    7804:	d50d      	bpl.n	7822 <ev_usbevent_handler+0x52>
    {
        NRFX_LOG_DEBUG("USBD event: RESUME");
        m_bus_suspend = false;
    7806:	4a15      	ldr	r2, [pc, #84]	; (785c <ev_usbevent_handler+0x8c>)
    7808:	2300      	movs	r3, #0
    780a:	7013      	strb	r3, [r2, #0]
        const nrfx_usbd_evt_t evt = {
    780c:	f8ad 3005 	strh.w	r3, [sp, #5]
    7810:	f88d 3007 	strb.w	r3, [sp, #7]
    7814:	2303      	movs	r3, #3
    7816:	f88d 3004 	strb.w	r3, [sp, #4]
                .type = NRFX_USBD_EVT_RESUME
        };
        m_event_handler(&evt);
    781a:	4b11      	ldr	r3, [pc, #68]	; (7860 <ev_usbevent_handler+0x90>)
    781c:	a801      	add	r0, sp, #4
    781e:	681b      	ldr	r3, [r3, #0]
    7820:	4798      	blx	r3
    }
    if (event & NRF_USBD_EVENTCAUSE_WUREQ_MASK)
    7822:	0563      	lsls	r3, r4, #21
    7824:	d515      	bpl.n	7852 <ev_usbevent_handler+0x82>
    {
        NRFX_LOG_DEBUG("USBD event: WUREQ (%s)", m_bus_suspend ? "In Suspend" : "Active");
        if (m_bus_suspend)
    7826:	4a0d      	ldr	r2, [pc, #52]	; (785c <ev_usbevent_handler+0x8c>)
    7828:	7813      	ldrb	r3, [r2, #0]
    782a:	b193      	cbz	r3, 7852 <ev_usbevent_handler+0x82>
        {
            NRFX_ASSERT(!nrf_usbd_lowpower_check(NRF_USBD));
            m_bus_suspend = false;
    782c:	2300      	movs	r3, #0
    782e:	7013      	strb	r3, [r2, #0]
    p_reg->DPDMVALUE = ((uint32_t)val) << USBD_DPDMVALUE_STATE_Pos;
    7830:	4a09      	ldr	r2, [pc, #36]	; (7858 <ev_usbevent_handler+0x88>)
    7832:	2101      	movs	r1, #1
    7834:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7838:	6591      	str	r1, [r2, #88]	; 0x58
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    783a:	6d92      	ldr	r2, [r2, #88]	; 0x58

            nrf_usbd_dpdmvalue_set(NRF_USBD, NRF_USBD_DPDMVALUE_RESUME);
            nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_DRIVEDPDM);

            const nrfx_usbd_evt_t evt = {
    783c:	f8ad 3005 	strh.w	r3, [sp, #5]
    7840:	f88d 3007 	strb.w	r3, [sp, #7]
    7844:	2304      	movs	r3, #4
    7846:	f88d 3004 	strb.w	r3, [sp, #4]
                    .type = NRFX_USBD_EVT_WUREQ
            };
            m_event_handler(&evt);
    784a:	4b05      	ldr	r3, [pc, #20]	; (7860 <ev_usbevent_handler+0x90>)
    784c:	a801      	add	r0, sp, #4
    784e:	681b      	ldr	r3, [r3, #0]
    7850:	4798      	blx	r3
        }
    }
}
    7852:	b002      	add	sp, #8
    7854:	bd10      	pop	{r4, pc}
    7856:	bf00      	nop
    7858:	40027000 	.word	0x40027000
    785c:	20001ab7 	.word	0x20001ab7
    7860:	2000195c 	.word	0x2000195c

00007864 <usbd_errata_187_211_begin>:
	__asm__ volatile(
    7864:	f04f 0320 	mov.w	r3, #32
    7868:	f3ef 8011 	mrs	r0, BASEPRI
    786c:	f383 8812 	msr	BASEPRI_MAX, r3
    7870:	f3bf 8f6f 	isb	sy
 * @brief Begin erratas 187 and 211.
 */
static inline void usbd_errata_187_211_begin(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    7874:	4b0a      	ldr	r3, [pc, #40]	; (78a0 <usbd_errata_187_211_begin+0x3c>)
    7876:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    787a:	2203      	movs	r2, #3
    787c:	b961      	cbnz	r1, 7898 <usbd_errata_187_211_begin+0x34>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    787e:	f249 3175 	movw	r1, #37749	; 0x9375
    7882:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    7886:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    788a:	f8c3 1c00 	str.w	r1, [r3, #3072]	; 0xc00
	__asm__ volatile(
    788e:	f380 8811 	msr	BASEPRI, r0
    7892:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    7896:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000003;
    7898:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    789c:	e7f7      	b.n	788e <usbd_errata_187_211_begin+0x2a>
    789e:	bf00      	nop
    78a0:	4006e000 	.word	0x4006e000

000078a4 <usbd_errata_187_211_end>:
	__asm__ volatile(
    78a4:	f04f 0320 	mov.w	r3, #32
    78a8:	f3ef 8011 	mrs	r0, BASEPRI
    78ac:	f383 8812 	msr	BASEPRI_MAX, r3
    78b0:	f3bf 8f6f 	isb	sy
 * @brief End erratas 187 and 211.
 */
static inline void usbd_errata_187_211_end(void)
{
    NRFX_CRITICAL_SECTION_ENTER();
    if (*((volatile uint32_t *)(0x4006EC00)) == 0x00000000)
    78b4:	4b0a      	ldr	r3, [pc, #40]	; (78e0 <usbd_errata_187_211_end+0x3c>)
    78b6:	f8d3 1c00 	ldr.w	r1, [r3, #3072]	; 0xc00
    78ba:	b961      	cbnz	r1, 78d6 <usbd_errata_187_211_end+0x32>
    {
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    78bc:	f249 3275 	movw	r2, #37749	; 0x9375
    78c0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    78c4:	f8c3 1d14 	str.w	r1, [r3, #3348]	; 0xd14
        *((volatile uint32_t *)(0x4006EC00)) = 0x00009375;
    78c8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
	__asm__ volatile(
    78cc:	f380 8811 	msr	BASEPRI, r0
    78d0:	f3bf 8f6f 	isb	sy
    else
    {
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    78d4:	4770      	bx	lr
        *((volatile uint32_t *)(0x4006ED14)) = 0x00000000;
    78d6:	2200      	movs	r2, #0
    78d8:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
    78dc:	e7f6      	b.n	78cc <usbd_errata_187_211_end+0x28>
    78de:	bf00      	nop
    78e0:	4006e000 	.word	0x4006e000

000078e4 <nrfx_usbd_feeder_flash>:
{
    78e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    78e6:	684d      	ldr	r5, [r1, #4]
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    78e8:	4f0b      	ldr	r7, [pc, #44]	; (7918 <nrfx_usbd_feeder_flash+0x34>)
    78ea:	4295      	cmp	r5, r2
    78ec:	bf28      	it	cs
    78ee:	4615      	movcs	r5, r2
{
    78f0:	460c      	mov	r4, r1
    78f2:	4606      	mov	r6, r0
    memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    78f4:	462a      	mov	r2, r5
    78f6:	6809      	ldr	r1, [r1, #0]
    78f8:	4638      	mov	r0, r7
    78fa:	f003 f94f 	bl	ab9c <memcpy>
    p_transfer->size -= tx_size;
    78fe:	6860      	ldr	r0, [r4, #4]
    p_transfer->p_data.addr += tx_size;
    7900:	6822      	ldr	r2, [r4, #0]
    p_transfer->size -= tx_size;
    7902:	1b40      	subs	r0, r0, r5
    p_next->size = tx_size;
    7904:	e9c6 7500 	strd	r7, r5, [r6]
    p_transfer->p_data.addr += tx_size;
    7908:	442a      	add	r2, r5
    p_transfer->size -= tx_size;
    790a:	6060      	str	r0, [r4, #4]
}
    790c:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    790e:	6022      	str	r2, [r4, #0]
}
    7910:	bf18      	it	ne
    7912:	2001      	movne	r0, #1
    7914:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7916:	bf00      	nop
    7918:	20001960 	.word	0x20001960

0000791c <nrfx_usbd_feeder_flash_zlp>:
{
    791c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    size_t tx_size  = p_transfer->size;
    791e:	684c      	ldr	r4, [r1, #4]
    if (tx_size > ep_size)
    7920:	4294      	cmp	r4, r2
    7922:	bf28      	it	cs
    7924:	4614      	movcs	r4, r2
{
    7926:	4606      	mov	r6, r0
    7928:	460d      	mov	r5, r1
    if (tx_size != 0)
    792a:	b18c      	cbz	r4, 7950 <nrfx_usbd_feeder_flash_zlp+0x34>
        memcpy(p_buffer, (p_transfer->p_data.tx), tx_size);
    792c:	4f09      	ldr	r7, [pc, #36]	; (7954 <nrfx_usbd_feeder_flash_zlp+0x38>)
    792e:	6809      	ldr	r1, [r1, #0]
    7930:	4622      	mov	r2, r4
    7932:	4638      	mov	r0, r7
    7934:	f003 f932 	bl	ab9c <memcpy>
        p_next->p_data.tx = p_buffer;
    7938:	6037      	str	r7, [r6, #0]
    p_transfer->size -= tx_size;
    793a:	686b      	ldr	r3, [r5, #4]
    p_next->size = tx_size;
    793c:	6074      	str	r4, [r6, #4]
    p_transfer->size -= tx_size;
    793e:	1b1b      	subs	r3, r3, r4
    7940:	606b      	str	r3, [r5, #4]
    p_transfer->p_data.addr += tx_size;
    7942:	682b      	ldr	r3, [r5, #0]
}
    7944:	1e20      	subs	r0, r4, #0
    p_transfer->p_data.addr += tx_size;
    7946:	4423      	add	r3, r4
    7948:	602b      	str	r3, [r5, #0]
}
    794a:	bf18      	it	ne
    794c:	2001      	movne	r0, #1
    794e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        p_next->p_data.tx = NULL;
    7950:	6004      	str	r4, [r0, #0]
    7952:	e7f2      	b.n	793a <nrfx_usbd_feeder_flash_zlp+0x1e>
    7954:	20001960 	.word	0x20001960

00007958 <usbd_enable>:

/**
 * @brief Enable USBD peripheral.
 */
static void usbd_enable(void)
{
    7958:	b508      	push	{r3, lr}
}

/* Errata: USB cannot be enabled. **/
static inline bool nrfx_usbd_errata_187(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    795a:	f003 fca0 	bl	b29e <nrf52_errata_187>
    if (nrfx_usbd_errata_187())
    795e:	b108      	cbz	r0, 7964 <usbd_enable+0xc>
    {
        usbd_errata_187_211_begin();
    7960:	f7ff ff80 	bl	7864 <usbd_errata_187_211_begin>
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Enabled << USBD_ENABLE_ENABLE_Pos;
    7964:	4b0b      	ldr	r3, [pc, #44]	; (7994 <usbd_enable+0x3c>)
    7966:	2201      	movs	r2, #1
    7968:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    796c:	f8d3 2500 	ldr.w	r2, [r3, #1280]	; 0x500
    return p_reg->EVENTCAUSE;
    7970:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    while (0 == (eventcause & nrf_usbd_eventcause_get(NRF_USBD)))
    7974:	0512      	lsls	r2, r2, #20
    7976:	d5fb      	bpl.n	7970 <usbd_enable+0x18>
    p_reg->EVENTCAUSE = flags;
    7978:	f44f 6200 	mov.w	r2, #2048	; 0x800
    797c:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    7980:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
    7984:	f003 fc8b 	bl	b29e <nrf52_errata_187>
    if (nrfx_usbd_errata_171())
    {
        usbd_errata_171_end();
    }

    if (nrfx_usbd_errata_187())
    7988:	b118      	cbz	r0, 7992 <usbd_enable+0x3a>
    {
        usbd_errata_187_211_end();
    }
}
    798a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        usbd_errata_187_211_end();
    798e:	f7ff bf89 	b.w	78a4 <usbd_errata_187_211_end>
}
    7992:	bd08      	pop	{r3, pc}
    7994:	40027000 	.word	0x40027000

00007998 <ev_sof_handler>:
{
    7998:	b507      	push	{r0, r1, r2, lr}
    nrfx_usbd_evt_t evt =  {
    799a:	2300      	movs	r3, #0
    799c:	f88d 3004 	strb.w	r3, [sp, #4]
    return p_reg->FRAMECNTR;
    79a0:	4b0b      	ldr	r3, [pc, #44]	; (79d0 <ev_sof_handler+0x38>)
    79a2:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
            .data = { .sof = { .framecnt = (uint16_t)nrf_usbd_framecntr_get(NRF_USBD) }}
    79a6:	f8ad 2006 	strh.w	r2, [sp, #6]
    size_t size_isoout = p_reg->SIZE.ISOOUT;
    79aa:	f8d3 34c0 	ldr.w	r3, [r3, #1216]	; 0x4c0
    m_ep_ready |= iso_ready_mask;
    79ae:	4a09      	ldr	r2, [pc, #36]	; (79d4 <ev_sof_handler+0x3c>)
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    79b0:	2b00      	cmp	r3, #0
    m_ep_ready |= iso_ready_mask;
    79b2:	6813      	ldr	r3, [r2, #0]
        iso_ready_mask |= (1U << ep2bit(NRFX_USBD_EPOUT8));
    79b4:	bf0c      	ite	eq
    79b6:	f44f 7180 	moveq.w	r1, #256	; 0x100
    79ba:	f04f 2101 	movne.w	r1, #16777472	; 0x1000100
    m_ep_ready |= iso_ready_mask;
    79be:	430b      	orrs	r3, r1
    79c0:	6013      	str	r3, [r2, #0]
    m_event_handler(&evt);
    79c2:	4b05      	ldr	r3, [pc, #20]	; (79d8 <ev_sof_handler+0x40>)
    79c4:	a801      	add	r0, sp, #4
    79c6:	681b      	ldr	r3, [r3, #0]
    79c8:	4798      	blx	r3
}
    79ca:	b003      	add	sp, #12
    79cc:	f85d fb04 	ldr.w	pc, [sp], #4
    79d0:	40027000 	.word	0x40027000
    79d4:	20001838 	.word	0x20001838
    79d8:	2000195c 	.word	0x2000195c

000079dc <atomic_and.constprop.0.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    79dc:	4b06      	ldr	r3, [pc, #24]	; (79f8 <atomic_and.constprop.0.isra.0+0x1c>)
    79de:	f3bf 8f5b 	dmb	ish
    79e2:	e853 2f00 	ldrex	r2, [r3]
    79e6:	4002      	ands	r2, r0
    79e8:	e843 2100 	strex	r1, r2, [r3]
    79ec:	2900      	cmp	r1, #0
    79ee:	d1f8      	bne.n	79e2 <atomic_and.constprop.0.isra.0+0x6>
    79f0:	f3bf 8f5b 	dmb	ish
}
    79f4:	4770      	bx	lr
    79f6:	bf00      	nop
    79f8:	200017c8 	.word	0x200017c8

000079fc <nrf_usbd_epin_dma_handler>:
{
    79fc:	b508      	push	{r3, lr}
    m_dma_pending = false;
    79fe:	4b0c      	ldr	r3, [pc, #48]	; (7a30 <nrf_usbd_epin_dma_handler+0x34>)
    7a00:	2200      	movs	r2, #0
    7a02:	701a      	strb	r2, [r3, #0]
{
    7a04:	4601      	mov	r1, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    7a06:	f7ff febb 	bl	7780 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7a0a:	7b83      	ldrb	r3, [r0, #14]
    7a0c:	2b03      	cmp	r3, #3
    7a0e:	d10a      	bne.n	7a26 <nrf_usbd_epin_dma_handler+0x2a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7a10:	4608      	mov	r0, r1
    7a12:	f003 fc8a 	bl	b32a <ep2bit>
    7a16:	2301      	movs	r3, #1
    7a18:	fa03 f000 	lsl.w	r0, r3, r0
    7a1c:	43c0      	mvns	r0, r0
}
    7a1e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7a22:	f7ff bfdb 	b.w	79dc <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    7a26:	6803      	ldr	r3, [r0, #0]
    7a28:	2b00      	cmp	r3, #0
    7a2a:	d0f1      	beq.n	7a10 <nrf_usbd_epin_dma_handler+0x14>
}
    7a2c:	bd08      	pop	{r3, pc}
    7a2e:	bf00      	nop
    7a30:	20001ab8 	.word	0x20001ab8

00007a34 <nrf_usbd_ep0in_dma_handler>:
    m_dma_pending = false;
    7a34:	4b08      	ldr	r3, [pc, #32]	; (7a58 <nrf_usbd_ep0in_dma_handler+0x24>)
    7a36:	2200      	movs	r2, #0
    7a38:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7a3a:	4b08      	ldr	r3, [pc, #32]	; (7a5c <nrf_usbd_ep0in_dma_handler+0x28>)
    7a3c:	f893 209e 	ldrb.w	r2, [r3, #158]	; 0x9e
    7a40:	2a03      	cmp	r2, #3
    7a42:	d103      	bne.n	7a4c <nrf_usbd_ep0in_dma_handler+0x18>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7a44:	f06f 0001 	mvn.w	r0, #1
    7a48:	f7ff bfc8 	b.w	79dc <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    7a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    7a50:	2b00      	cmp	r3, #0
    7a52:	d0f7      	beq.n	7a44 <nrf_usbd_ep0in_dma_handler+0x10>
}
    7a54:	4770      	bx	lr
    7a56:	bf00      	nop
    7a58:	20001ab8 	.word	0x20001ab8
    7a5c:	2000183c 	.word	0x2000183c

00007a60 <usbd_ep_data_handler>:
    m_ep_ready |= (1U << bitpos);
    7a60:	2201      	movs	r2, #1
{
    7a62:	b573      	push	{r0, r1, r4, r5, r6, lr}
    m_ep_ready |= (1U << bitpos);
    7a64:	fa02 f501 	lsl.w	r5, r2, r1
    7a68:	491c      	ldr	r1, [pc, #112]	; (7adc <usbd_ep_data_handler+0x7c>)
    7a6a:	4e1d      	ldr	r6, [pc, #116]	; (7ae0 <usbd_ep_data_handler+0x80>)
    7a6c:	680b      	ldr	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    7a6e:	f010 0f80 	tst.w	r0, #128	; 0x80
    m_ep_ready |= (1U << bitpos);
    7a72:	ea43 0305 	orr.w	r3, r3, r5
{
    7a76:	4604      	mov	r4, r0
    m_ep_ready |= (1U << bitpos);
    7a78:	600b      	str	r3, [r1, #0]
    if (NRF_USBD_EPIN_CHECK(ep))
    7a7a:	d024      	beq.n	7ac6 <usbd_ep_data_handler+0x66>
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    7a7c:	f000 020f 	and.w	r2, r0, #15
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7a80:	4b18      	ldr	r3, [pc, #96]	; (7ae4 <usbd_ep_data_handler+0x84>)
    7a82:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    7a86:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7a8a:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7a8e:	681a      	ldr	r2, [r3, #0]
    if (ret)
    7a90:	b132      	cbz	r2, 7aa0 <usbd_ep_data_handler+0x40>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    7a92:	2200      	movs	r2, #0
    7a94:	601a      	str	r2, [r3, #0]
            if (ep != NRFX_USBD_EPIN0)
    7a96:	2880      	cmp	r0, #128	; 0x80
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    7a98:	681b      	ldr	r3, [r3, #0]
    7a9a:	d011      	beq.n	7ac0 <usbd_ep_data_handler+0x60>
                nrf_usbd_epin_dma_handler(ep);
    7a9c:	f7ff ffae 	bl	79fc <nrf_usbd_epin_dma_handler>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    7aa0:	6831      	ldr	r1, [r6, #0]
    7aa2:	4029      	ands	r1, r5
    7aa4:	d10a      	bne.n	7abc <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7aa6:	2306      	movs	r3, #6
    7aa8:	f88d 3004 	strb.w	r3, [sp, #4]
    7aac:	f88d 4006 	strb.w	r4, [sp, #6]
    7ab0:	f88d 1007 	strb.w	r1, [sp, #7]
            m_event_handler(&evt);
    7ab4:	4b0c      	ldr	r3, [pc, #48]	; (7ae8 <usbd_ep_data_handler+0x88>)
    7ab6:	a801      	add	r0, sp, #4
    7ab8:	681b      	ldr	r3, [r3, #0]
    7aba:	4798      	blx	r3
}
    7abc:	b002      	add	sp, #8
    7abe:	bd70      	pop	{r4, r5, r6, pc}
                nrf_usbd_ep0in_dma_handler();
    7ac0:	f7ff ffb8 	bl	7a34 <nrf_usbd_ep0in_dma_handler>
    7ac4:	e7ec      	b.n	7aa0 <usbd_ep_data_handler+0x40>
        if (0 == (m_ep_dma_waiting & (1U << bitpos)))
    7ac6:	6833      	ldr	r3, [r6, #0]
    7ac8:	421d      	tst	r5, r3
    7aca:	d1f7      	bne.n	7abc <usbd_ep_data_handler+0x5c>
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_WAITING);
    7acc:	2306      	movs	r3, #6
    7ace:	f88d 3004 	strb.w	r3, [sp, #4]
    7ad2:	f88d 0006 	strb.w	r0, [sp, #6]
    7ad6:	f88d 2007 	strb.w	r2, [sp, #7]
    7ada:	e7eb      	b.n	7ab4 <usbd_ep_data_handler+0x54>
    7adc:	20001838 	.word	0x20001838
    7ae0:	200017c8 	.word	0x200017c8
    7ae4:	0000c178 	.word	0x0000c178
    7ae8:	2000195c 	.word	0x2000195c

00007aec <ev_setup_data_handler>:
{
    7aec:	b508      	push	{r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    7aee:	4b05      	ldr	r3, [pc, #20]	; (7b04 <ev_setup_data_handler+0x18>)
    7af0:	781a      	ldrb	r2, [r3, #0]
    7af2:	4610      	mov	r0, r2
    7af4:	f003 fc19 	bl	b32a <ep2bit>
}
    7af8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    usbd_ep_data_handler(m_last_setup_dir, ep2bit(m_last_setup_dir));
    7afc:	4601      	mov	r1, r0
    7afe:	4610      	mov	r0, r2
    7b00:	f7ff bfae 	b.w	7a60 <usbd_ep_data_handler>
    7b04:	20001aba 	.word	0x20001aba

00007b08 <ev_dma_epout8_handler>:
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    7b08:	b507      	push	{r0, r1, r2, lr}
    m_dma_pending = false;
    7b0a:	4b0e      	ldr	r3, [pc, #56]	; (7b44 <ev_dma_epout8_handler+0x3c>)
    7b0c:	2200      	movs	r2, #0
    7b0e:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7b10:	4b0d      	ldr	r3, [pc, #52]	; (7b48 <ev_dma_epout8_handler+0x40>)
    7b12:	f893 208e 	ldrb.w	r2, [r3, #142]	; 0x8e
    7b16:	2a03      	cmp	r2, #3
    7b18:	d010      	beq.n	7b3c <ev_dma_epout8_handler+0x34>
    else if (p_state->handler.consumer == NULL)
    7b1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    7b1e:	b96b      	cbnz	r3, 7b3c <ev_dma_epout8_handler+0x34>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7b20:	f06f 7080 	mvn.w	r0, #16777216	; 0x1000000
    7b24:	f7ff ff5a 	bl	79dc <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7b28:	2306      	movs	r3, #6
    7b2a:	f88d 3004 	strb.w	r3, [sp, #4]
    7b2e:	2308      	movs	r3, #8
    7b30:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    7b34:	4b05      	ldr	r3, [pc, #20]	; (7b4c <ev_dma_epout8_handler+0x44>)
    7b36:	a801      	add	r0, sp, #4
    7b38:	681b      	ldr	r3, [r3, #0]
    7b3a:	4798      	blx	r3
static void ev_dma_epout8_handler(void) { nrf_usbd_epoutiso_dma_handler(NRFX_USBD_EPOUT8); }
    7b3c:	b003      	add	sp, #12
    7b3e:	f85d fb04 	ldr.w	pc, [sp], #4
    7b42:	bf00      	nop
    7b44:	20001ab8 	.word	0x20001ab8
    7b48:	2000183c 	.word	0x2000183c
    7b4c:	2000195c 	.word	0x2000195c

00007b50 <ev_dma_epin8_handler>:
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    7b50:	b507      	push	{r0, r1, r2, lr}
    m_dma_pending = false;
    7b52:	4b11      	ldr	r3, [pc, #68]	; (7b98 <ev_dma_epin8_handler+0x48>)
    7b54:	2200      	movs	r2, #0
    7b56:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    7b58:	4b10      	ldr	r3, [pc, #64]	; (7b9c <ev_dma_epin8_handler+0x4c>)
    7b5a:	f893 211e 	ldrb.w	r2, [r3, #286]	; 0x11e
    7b5e:	2a03      	cmp	r2, #3
    7b60:	d106      	bne.n	7b70 <ev_dma_epin8_handler+0x20>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7b62:	f46f 7080 	mvn.w	r0, #256	; 0x100
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    7b66:	b003      	add	sp, #12
    7b68:	f85d eb04 	ldr.w	lr, [sp], #4
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7b6c:	f7ff bf36 	b.w	79dc <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.feeder == NULL)
    7b70:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    7b74:	b96b      	cbnz	r3, 7b92 <ev_dma_epin8_handler+0x42>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    7b76:	f46f 7080 	mvn.w	r0, #256	; 0x100
    7b7a:	f7ff ff2f 	bl	79dc <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    7b7e:	2306      	movs	r3, #6
    7b80:	f88d 3004 	strb.w	r3, [sp, #4]
    7b84:	2388      	movs	r3, #136	; 0x88
    7b86:	f8ad 3006 	strh.w	r3, [sp, #6]
        m_event_handler(&evt);
    7b8a:	4b05      	ldr	r3, [pc, #20]	; (7ba0 <ev_dma_epin8_handler+0x50>)
    7b8c:	a801      	add	r0, sp, #4
    7b8e:	681b      	ldr	r3, [r3, #0]
    7b90:	4798      	blx	r3
static void ev_dma_epin8_handler(void)  { nrf_usbd_epiniso_dma_handler(NRFX_USBD_EPIN8 ); }
    7b92:	b003      	add	sp, #12
    7b94:	f85d fb04 	ldr.w	pc, [sp], #4
    7b98:	20001ab8 	.word	0x20001ab8
    7b9c:	2000183c 	.word	0x2000183c
    7ba0:	2000195c 	.word	0x2000195c

00007ba4 <nrfx_usbd_uninit>:

void nrfx_usbd_uninit(void)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    m_event_handler = NULL;
    7ba4:	4a02      	ldr	r2, [pc, #8]	; (7bb0 <nrfx_usbd_uninit+0xc>)
    7ba6:	2300      	movs	r3, #0
    7ba8:	6013      	str	r3, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_UNINITIALIZED;
    7baa:	4a02      	ldr	r2, [pc, #8]	; (7bb4 <nrfx_usbd_uninit+0x10>)
    7bac:	7013      	strb	r3, [r2, #0]
    return;
}
    7bae:	4770      	bx	lr
    7bb0:	2000195c 	.word	0x2000195c
    7bb4:	20001ab9 	.word	0x20001ab9

00007bb8 <nrfx_usbd_enable>:


void nrfx_usbd_enable(void)
{
    7bb8:	b570      	push	{r4, r5, r6, lr}
    p_reg->EVENTCAUSE = flags;
    7bba:	4c1c      	ldr	r4, [pc, #112]	; (7c2c <nrfx_usbd_enable+0x74>)
    7bbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
    7bc0:	f8c4 3400 	str.w	r3, [r4, #1024]	; 0x400
    (void) p_reg->EVENTCAUSE;
    7bc4:	f8d4 3400 	ldr.w	r3, [r4, #1024]	; 0x400
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_INITIALIZED);

    /* Prepare for READY event receiving */
    nrf_usbd_eventcause_clear(NRF_USBD, NRF_USBD_EVENTCAUSE_READY_MASK);

    usbd_enable();
    7bc8:	f7ff fec6 	bl	7958 <usbd_enable>
}

/* Errata: Unexpected behavior after reset. **/
static inline bool nrfx_usbd_errata_223(void)
{
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_223();
    7bcc:	f003 fb67 	bl	b29e <nrf52_errata_187>

    if (nrfx_usbd_errata_223() && m_first_enable)
    7bd0:	b150      	cbz	r0, 7be8 <nrfx_usbd_enable+0x30>
    7bd2:	4d17      	ldr	r5, [pc, #92]	; (7c30 <nrfx_usbd_enable+0x78>)
    7bd4:	782b      	ldrb	r3, [r5, #0]
    7bd6:	b13b      	cbz	r3, 7be8 <nrfx_usbd_enable+0x30>
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    7bd8:	2600      	movs	r6, #0
    7bda:	f8c4 6500 	str.w	r6, [r4, #1280]	; 0x500
    (void) p_reg->ENABLE;
    7bde:	f8d4 3500 	ldr.w	r3, [r4, #1280]	; 0x500
    {
         nrf_usbd_disable(NRF_USBD);

         usbd_enable();
    7be2:	f7ff feb9 	bl	7958 <usbd_enable>

         m_first_enable = false;
    7be6:	702e      	strb	r6, [r5, #0]
    return NRFX_USBD_ERRATA_ENABLE && nrf52_errata_187();
    7be8:	f003 fb59 	bl	b29e <nrf52_errata_187>
    }

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() || nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    7bec:	b108      	cbz	r0, 7bf2 <nrfx_usbd_enable+0x3a>
#endif
    {
        usbd_errata_187_211_begin();
    7bee:	f7ff fe39 	bl	7864 <usbd_errata_187_211_begin>
    p_reg->ISOSPLIT = split << USBD_ISOSPLIT_SPLIT_Pos;
    7bf2:	4a0e      	ldr	r2, [pc, #56]	; (7c2c <nrfx_usbd_enable+0x74>)
    7bf4:	2380      	movs	r3, #128	; 0x80
    7bf6:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    p_reg->ISOINCONFIG = ((uint32_t)config) << USBD_ISOINCONFIG_RESPONSE_Pos;
    7bfa:	2300      	movs	r3, #0
    7bfc:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
    else
    {
        nrfx_usbd_isoinconfig_set(NRF_USBD_ISOINCONFIG_NORESP);
    }

    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    7c00:	4a0c      	ldr	r2, [pc, #48]	; (7c34 <nrfx_usbd_enable+0x7c>)
    7c02:	f240 11ff 	movw	r1, #511	; 0x1ff
    7c06:	6011      	str	r1, [r2, #0]
    m_ep_dma_waiting = 0;
    7c08:	4a0b      	ldr	r2, [pc, #44]	; (7c38 <nrfx_usbd_enable+0x80>)
    7c0a:	6013      	str	r3, [r2, #0]
    m_dma_pending = false;
    7c0c:	4a0b      	ldr	r2, [pc, #44]	; (7c3c <nrfx_usbd_enable+0x84>)
    7c0e:	7013      	strb	r3, [r2, #0]
    usbd_dma_pending_clear();
    m_last_setup_dir = NRFX_USBD_EPOUT0;
    7c10:	4a0b      	ldr	r2, [pc, #44]	; (7c40 <nrfx_usbd_enable+0x88>)
    7c12:	7013      	strb	r3, [r2, #0]

    m_drv_state = NRFX_DRV_STATE_POWERED_ON;
    7c14:	4b0b      	ldr	r3, [pc, #44]	; (7c44 <nrfx_usbd_enable+0x8c>)
    7c16:	2202      	movs	r2, #2
    7c18:	701a      	strb	r2, [r3, #0]
    7c1a:	f003 fb40 	bl	b29e <nrf52_errata_187>

#if NRFX_USBD_USE_WORKAROUND_FOR_ANOMALY_211
    if (nrfx_usbd_errata_187() && !nrfx_usbd_errata_211())
#else
    if (nrfx_usbd_errata_187())
    7c1e:	b118      	cbz	r0, 7c28 <nrfx_usbd_enable+0x70>
#endif
    {
        usbd_errata_187_211_end();
    }
}
    7c20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        usbd_errata_187_211_end();
    7c24:	f7ff be3e 	b.w	78a4 <usbd_errata_187_211_end>
}
    7c28:	bd70      	pop	{r4, r5, r6, pc}
    7c2a:	bf00      	nop
    7c2c:	40027000 	.word	0x40027000
    7c30:	200000f8 	.word	0x200000f8
    7c34:	20001838 	.word	0x20001838
    7c38:	200017c8 	.word	0x200017c8
    7c3c:	20001ab8 	.word	0x20001ab8
    7c40:	20001aba 	.word	0x20001aba
    7c44:	20001ab9 	.word	0x20001ab9

00007c48 <nrfx_usbd_start>:
}

void nrfx_usbd_start(bool enable_sof)
{
    NRFX_ASSERT(m_drv_state == NRFX_DRV_STATE_POWERED_ON);
    m_bus_suspend = false;
    7c48:	4b0a      	ldr	r3, [pc, #40]	; (7c74 <nrfx_usbd_start+0x2c>)
    7c4a:	2200      	movs	r2, #0
{
    7c4c:	b510      	push	{r4, lr}
    m_bus_suspend = false;
    7c4e:	701a      	strb	r2, [r3, #0]
       NRF_USBD_INT_EP0SETUP_MASK     |
       NRF_USBD_INT_DATAEP_MASK;

   if (enable_sof)
   {
       ints_to_enable |= NRF_USBD_INT_SOF_MASK;
    7c50:	4a09      	ldr	r2, [pc, #36]	; (7c78 <nrfx_usbd_start+0x30>)
    7c52:	4b0a      	ldr	r3, [pc, #40]	; (7c7c <nrfx_usbd_start+0x34>)
    p_reg->INTENSET = mask;
    7c54:	4c0a      	ldr	r4, [pc, #40]	; (7c80 <nrfx_usbd_start+0x38>)
    7c56:	2800      	cmp	r0, #0
    7c58:	bf18      	it	ne
    7c5a:	4613      	movne	r3, r2
    7c5c:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
   /* Enable all required interrupts */
   nrf_usbd_int_enable(NRF_USBD, ints_to_enable);

   /* Enable interrupt globally */
   NRFX_IRQ_PRIORITY_SET(USBD_IRQn, NRFX_USBD_DEFAULT_CONFIG_IRQ_PRIORITY);
   NRFX_IRQ_ENABLE(USBD_IRQn);
    7c60:	2027      	movs	r0, #39	; 0x27
    7c62:	f7fb f825 	bl	2cb0 <arch_irq_enable>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Enabled << USBD_USBPULLUP_CONNECT_Pos;
    7c66:	2301      	movs	r3, #1
    7c68:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    (void) p_reg->USBPULLUP;
    7c6c:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504

   /* Enable pullups */
   nrf_usbd_pullup_enable(NRF_USBD);
}
    7c70:	bd10      	pop	{r4, pc}
    7c72:	bf00      	nop
    7c74:	20001ab7 	.word	0x20001ab7
    7c78:	01e01407 	.word	0x01e01407
    7c7c:	01c01407 	.word	0x01c01407
    7c80:	40027000 	.word	0x40027000

00007c84 <nrfx_usbd_is_enabled>:
    return (m_drv_state >= NRFX_DRV_STATE_INITIALIZED);
}

bool nrfx_usbd_is_enabled(void)
{
    return (m_drv_state >= NRFX_DRV_STATE_POWERED_ON);
    7c84:	4b03      	ldr	r3, [pc, #12]	; (7c94 <nrfx_usbd_is_enabled+0x10>)
    7c86:	7818      	ldrb	r0, [r3, #0]
}
    7c88:	2801      	cmp	r0, #1
    7c8a:	bf94      	ite	ls
    7c8c:	2000      	movls	r0, #0
    7c8e:	2001      	movhi	r0, #1
    7c90:	4770      	bx	lr
    7c92:	bf00      	nop
    7c94:	20001ab9 	.word	0x20001ab9

00007c98 <nrfx_usbd_init>:
{
    7c98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    if (m_drv_state != NRFX_DRV_STATE_UNINITIALIZED)
    7c9c:	4b1d      	ldr	r3, [pc, #116]	; (7d14 <nrfx_usbd_init+0x7c>)
    7c9e:	781c      	ldrb	r4, [r3, #0]
    7ca0:	2c00      	cmp	r4, #0
    7ca2:	d135      	bne.n	7d10 <nrfx_usbd_init+0x78>
    m_event_handler = event_handler;
    7ca4:	4a1c      	ldr	r2, [pc, #112]	; (7d18 <nrfx_usbd_init+0x80>)
    7ca6:	6010      	str	r0, [r2, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    7ca8:	2201      	movs	r2, #1
    7caa:	701a      	strb	r2, [r3, #0]
    7cac:	4625      	mov	r5, r4
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7cae:	f240 18ff 	movw	r8, #511	; 0x1ff
        p_state->status = NRFX_USBD_EP_OK;
    7cb2:	4627      	mov	r7, r4
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    7cb4:	f065 067f 	orn	r6, r5, #127	; 0x7f
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7cb8:	f015 0f08 	tst.w	r5, #8
        nrfx_usbd_ep_t ep = NRFX_USBD_EPIN(n);
    7cbc:	b2f6      	uxtb	r6, r6
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7cbe:	bf14      	ite	ne
    7cc0:	4641      	movne	r1, r8
    7cc2:	2140      	moveq	r1, #64	; 0x40
    7cc4:	4630      	mov	r0, r6
    7cc6:	f003 fb51 	bl	b36c <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    7cca:	4630      	mov	r0, r6
    7ccc:	f7ff fd58 	bl	7780 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    7cd0:	3501      	adds	r5, #1
    7cd2:	2d09      	cmp	r5, #9
        p_state->status = NRFX_USBD_EP_OK;
    7cd4:	7387      	strb	r7, [r0, #14]
        p_state->handler.feeder = NULL;
    7cd6:	6007      	str	r7, [r0, #0]
        p_state->transfer_cnt = 0;
    7cd8:	6087      	str	r7, [r0, #8]
    for (n = 0; n < NRF_USBD_EPIN_CNT; ++n)
    7cda:	d1eb      	bne.n	7cb4 <nrfx_usbd_init+0x1c>
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7cdc:	2140      	movs	r1, #64	; 0x40
        p_state->status = NRFX_USBD_EP_OK;
    7cde:	2500      	movs	r5, #0
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7ce0:	f240 16ff 	movw	r6, #511	; 0x1ff
    7ce4:	4620      	mov	r0, r4
    7ce6:	f003 fb41 	bl	b36c <nrfx_usbd_ep_max_packet_size_set>
        usbd_ep_state_t * p_state = ep_state_access(ep);
    7cea:	4620      	mov	r0, r4
    7cec:	f7ff fd48 	bl	7780 <ep_state_access>
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    7cf0:	3401      	adds	r4, #1
    7cf2:	b2e4      	uxtb	r4, r4
    7cf4:	2c09      	cmp	r4, #9
        p_state->status = NRFX_USBD_EP_OK;
    7cf6:	7385      	strb	r5, [r0, #14]
        p_state->handler.consumer = NULL;
    7cf8:	6005      	str	r5, [r0, #0]
        p_state->transfer_cnt = 0;
    7cfa:	6085      	str	r5, [r0, #8]
    for (n = 0; n < NRF_USBD_EPOUT_CNT; ++n)
    7cfc:	d102      	bne.n	7d04 <nrfx_usbd_init+0x6c>
    return NRFX_SUCCESS;
    7cfe:	4807      	ldr	r0, [pc, #28]	; (7d1c <nrfx_usbd_init+0x84>)
}
    7d00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        nrfx_usbd_ep_max_packet_size_set(ep, NRF_USBD_EPISO_CHECK(ep) ?
    7d04:	f014 0f08 	tst.w	r4, #8
    7d08:	bf14      	ite	ne
    7d0a:	4631      	movne	r1, r6
    7d0c:	2140      	moveq	r1, #64	; 0x40
    7d0e:	e7e9      	b.n	7ce4 <nrfx_usbd_init+0x4c>
        return NRFX_ERROR_INVALID_STATE;
    7d10:	4803      	ldr	r0, [pc, #12]	; (7d20 <nrfx_usbd_init+0x88>)
    7d12:	e7f5      	b.n	7d00 <nrfx_usbd_init+0x68>
    7d14:	20001ab9 	.word	0x20001ab9
    7d18:	2000195c 	.word	0x2000195c
    7d1c:	0bad0000 	.word	0x0bad0000
    7d20:	0bad0005 	.word	0x0bad0005

00007d24 <nrfx_usbd_ep_transfer>:
}

nrfx_err_t nrfx_usbd_ep_transfer(
    nrfx_usbd_ep_t               ep,
    nrfx_usbd_transfer_t const * p_transfer)
{
    7d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7d28:	4605      	mov	r5, r0
	__asm__ volatile(
    7d2a:	f04f 0320 	mov.w	r3, #32
    7d2e:	f3ef 8811 	mrs	r8, BASEPRI
    7d32:	f383 8812 	msr	BASEPRI_MAX, r3
    7d36:	f3bf 8f6f 	isb	sy
    const uint8_t ep_bitpos = ep2bit(ep);
    NRFX_ASSERT(NULL != p_transfer);

    NRFX_CRITICAL_SECTION_ENTER();
    /* Setup data transaction can go only in one direction at a time */
    if ((NRF_USBD_EP_NR_GET(ep) == 0) && (ep != m_last_setup_dir))
    7d3a:	f010 040f 	ands.w	r4, r0, #15
    7d3e:	d103      	bne.n	7d48 <nrfx_usbd_ep_transfer+0x24>
    7d40:	4b27      	ldr	r3, [pc, #156]	; (7de0 <__kernel_ram_size+0x28>)
    7d42:	781b      	ldrb	r3, [r3, #0]
    7d44:	4283      	cmp	r3, r0
    7d46:	d146      	bne.n	7dd6 <__kernel_ram_size+0x1e>
            (NRFX_USBD_ISO_DEBUG || (!NRF_USBD_EPISO_CHECK(ep))))
        {
            NRFX_LOG_DEBUG("Transfer failed: Invalid EPr\n");
        }
    }
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    7d48:	4b26      	ldr	r3, [pc, #152]	; (7de4 <__kernel_ram_size+0x2c>)
    7d4a:	4f27      	ldr	r7, [pc, #156]	; (7de8 <__kernel_ram_size+0x30>)
    7d4c:	681a      	ldr	r2, [r3, #0]
    7d4e:	683e      	ldr	r6, [r7, #0]
    const uint8_t ep_bitpos = ep2bit(ep);
    7d50:	4628      	mov	r0, r5
    7d52:	f003 faea 	bl	b32a <ep2bit>
    else if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK)) & (1U << ep_bitpos))
    7d56:	43d2      	mvns	r2, r2
    7d58:	b292      	uxth	r2, r2
    7d5a:	f04f 0901 	mov.w	r9, #1
    7d5e:	4332      	orrs	r2, r6
    7d60:	fa09 f900 	lsl.w	r9, r9, r0
    7d64:	ea12 0f09 	tst.w	r2, r9
    7d68:	d137      	bne.n	7dda <__kernel_ram_size+0x22>
            NRFX_LOG_DEBUG("Transfer failed: EP is busy");
        }
    }
    else
    {
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    7d6a:	4628      	mov	r0, r5
    7d6c:	f7ff fd08 	bl	7780 <ep_state_access>
        /* Prepare transfer context and handler description */
        nrfx_usbd_transfer_t * p_context;
        if (NRF_USBD_EPIN_CHECK(ep))
        {
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    7d70:	220c      	movs	r2, #12
    7d72:	4354      	muls	r4, r2
        if (NRF_USBD_EPIN_CHECK(ep))
    7d74:	062a      	lsls	r2, r5, #24
        usbd_ep_state_t * p_state =  ep_state_access(ep);
    7d76:	4603      	mov	r3, r0
        if (NRF_USBD_EPIN_CHECK(ep))
    7d78:	d529      	bpl.n	7dce <__kernel_ram_size+0x16>
            p_context = m_ep_feeder_state + NRF_USBD_EP_NR_GET(ep);
    7d7a:	4a1c      	ldr	r2, [pc, #112]	; (7dec <__kernel_ram_size+0x34>)
    7d7c:	6808      	ldr	r0, [r1, #0]
    7d7e:	4414      	add	r4, r2
    7d80:	f000 4060 	and.w	r0, r0, #3758096384	; 0xe0000000
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
            {
                /* RAM */
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    7d84:	688a      	ldr	r2, [r1, #8]
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    7d86:	f1b0 5f00 	cmp.w	r0, #536870912	; 0x20000000
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    7d8a:	f002 0201 	and.w	r2, r2, #1
            if (nrfx_is_in_ram(p_transfer->p_data.tx))
    7d8e:	d119      	bne.n	7dc4 <__kernel_ram_size+0xc>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    7d90:	b9b2      	cbnz	r2, 7dc0 <__kernel_ram_size+0x8>
                {
                    p_state->handler.feeder = nrfx_usbd_feeder_ram;
    7d92:	4a17      	ldr	r2, [pc, #92]	; (7df0 <__kernel_ram_size+0x38>)
        }
        else
        {
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
            NRFX_ASSERT((p_transfer->p_data.rx == NULL) || (nrfx_is_in_ram(p_transfer->p_data.rx)));
            p_state->handler.consumer = nrfx_usbd_consumer;
    7d94:	601a      	str	r2, [r3, #0]
        }
        *p_context = *p_transfer;
    7d96:	c907      	ldmia	r1, {r0, r1, r2}
    7d98:	e884 0007 	stmia.w	r4, {r0, r1, r2}
        p_state->p_context = p_context;

        p_state->transfer_cnt = 0;
    7d9c:	2200      	movs	r2, #0
    7d9e:	609a      	str	r2, [r3, #8]
        p_state->status    =  NRFX_USBD_EP_OK;
    7da0:	739a      	strb	r2, [r3, #14]
        p_state->p_context = p_context;
    7da2:	605c      	str	r4, [r3, #4]
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7da4:	4b13      	ldr	r3, [pc, #76]	; (7df4 <__kernel_ram_size+0x3c>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
        ret = NRFX_SUCCESS;
    7da6:	4814      	ldr	r0, [pc, #80]	; (7df8 <__kernel_ram_size+0x40>)
        m_ep_dma_waiting   |= 1U << ep_bitpos;
    7da8:	ea46 0609 	orr.w	r6, r6, r9
    7dac:	2280      	movs	r2, #128	; 0x80
    7dae:	603e      	str	r6, [r7, #0]
    7db0:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	__asm__ volatile(
    7db4:	f388 8811 	msr	BASEPRI, r8
    7db8:	f3bf 8f6f 	isb	sy
        usbd_int_rise();
    }
    NRFX_CRITICAL_SECTION_EXIT();
    return ret;
}
    7dbc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                    p_state->handler.feeder = nrfx_usbd_feeder_ram_zlp;
    7dc0:	4a0e      	ldr	r2, [pc, #56]	; (7dfc <__kernel_ram_size+0x44>)
    7dc2:	e7e7      	b.n	7d94 <nrfx_usbd_ep_transfer+0x70>
                if (0 == (p_transfer->flags & NRFX_USBD_TRANSFER_ZLP_FLAG))
    7dc4:	b90a      	cbnz	r2, 7dca <__kernel_ram_size+0x12>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash;
    7dc6:	4a0e      	ldr	r2, [pc, #56]	; (7e00 <__kernel_ram_size+0x48>)
    7dc8:	e7e4      	b.n	7d94 <nrfx_usbd_ep_transfer+0x70>
                    p_state->handler.feeder = nrfx_usbd_feeder_flash_zlp;
    7dca:	4a0e      	ldr	r2, [pc, #56]	; (7e04 <__kernel_ram_size+0x4c>)
    7dcc:	e7e2      	b.n	7d94 <nrfx_usbd_ep_transfer+0x70>
            p_context = m_ep_consumer_state + NRF_USBD_EP_NR_GET(ep);
    7dce:	4a0e      	ldr	r2, [pc, #56]	; (7e08 <__kernel_ram_size+0x50>)
    7dd0:	4414      	add	r4, r2
            p_state->handler.consumer = nrfx_usbd_consumer;
    7dd2:	4a0e      	ldr	r2, [pc, #56]	; (7e0c <__kernel_ram_size+0x54>)
    7dd4:	e7de      	b.n	7d94 <nrfx_usbd_ep_transfer+0x70>
        ret = NRFX_ERROR_INVALID_ADDR;
    7dd6:	480e      	ldr	r0, [pc, #56]	; (7e10 <__kernel_ram_size+0x58>)
    7dd8:	e7ec      	b.n	7db4 <nrfx_usbd_ep_transfer+0x90>
        ret = NRFX_ERROR_BUSY;
    7dda:	480e      	ldr	r0, [pc, #56]	; (7e14 <__kernel_ram_size+0x5c>)
    7ddc:	e7ea      	b.n	7db4 <nrfx_usbd_ep_transfer+0x90>
    7dde:	bf00      	nop
    7de0:	20001aba 	.word	0x20001aba
    7de4:	20001838 	.word	0x20001838
    7de8:	200017c8 	.word	0x200017c8
    7dec:	200017cc 	.word	0x200017cc
    7df0:	0000b2df 	.word	0x0000b2df
    7df4:	e000e100 	.word	0xe000e100
    7df8:	0bad0000 	.word	0x0bad0000
    7dfc:	0000b301 	.word	0x0000b301
    7e00:	000078e5 	.word	0x000078e5
    7e04:	0000791d 	.word	0x0000791d
    7e08:	2000175c 	.word	0x2000175c
    7e0c:	0000b2b1 	.word	0x0000b2b1
    7e10:	0bad000a 	.word	0x0bad000a
    7e14:	0bad000b 	.word	0x0bad000b

00007e18 <nrfx_usbd_epout_size_get>:
    if (NRF_USBD_EPISO_CHECK(ep))
    7e18:	f010 0f08 	tst.w	r0, #8
    7e1c:	4b07      	ldr	r3, [pc, #28]	; (7e3c <nrfx_usbd_epout_size_get+0x24>)
    7e1e:	d006      	beq.n	7e2e <nrfx_usbd_epout_size_get+0x16>
        size_t size_isoout = p_reg->SIZE.ISOOUT;
    7e20:	f8d3 04c0 	ldr.w	r0, [r3, #1216]	; 0x4c0
            size_isoout = 0;
    7e24:	f410 3f80 	tst.w	r0, #65536	; 0x10000
    7e28:	bf18      	it	ne
    7e2a:	2000      	movne	r0, #0
    7e2c:	4770      	bx	lr
    return p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    7e2e:	f000 000f 	and.w	r0, r0, #15
    7e32:	f500 7094 	add.w	r0, r0, #296	; 0x128
    7e36:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
}

size_t nrfx_usbd_epout_size_get(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_epout_size_get(NRF_USBD, ep_to_hal(ep));
}
    7e3a:	4770      	bx	lr
    7e3c:	40027000 	.word	0x40027000

00007e40 <usbd_dmareq_process>:
{
    7e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (!m_dma_pending)
    7e44:	f8df 814c 	ldr.w	r8, [pc, #332]	; 7f94 <usbd_dmareq_process+0x154>
    7e48:	f898 3000 	ldrb.w	r3, [r8]
{
    7e4c:	b085      	sub	sp, #20
    if (!m_dma_pending)
    7e4e:	2b00      	cmp	r3, #0
    7e50:	d164      	bne.n	7f1c <usbd_dmareq_process+0xdc>
        while (0 != (req = m_ep_dma_waiting & m_ep_ready))
    7e52:	f8df 9144 	ldr.w	r9, [pc, #324]	; 7f98 <usbd_dmareq_process+0x158>
    7e56:	4e51      	ldr	r6, [pc, #324]	; (7f9c <usbd_dmareq_process+0x15c>)
    7e58:	f8d9 1000 	ldr.w	r1, [r9]
    7e5c:	6833      	ldr	r3, [r6, #0]
    7e5e:	4019      	ands	r1, r3
    7e60:	d05c      	beq.n	7f1c <usbd_dmareq_process+0xdc>
            if (NRFX_USBD_CONFIG_DMASCHEDULER_ISO_BOOST && ((req & USBD_EPISO_BIT_MASK) != 0))
    7e62:	f011 2301 	ands.w	r3, r1, #16777472	; 0x1000100
    return NRF_CTZ(req);
    7e66:	bf14      	ite	ne
    7e68:	fa93 f1a3 	rbitne	r1, r3
    7e6c:	fa91 f1a1 	rbiteq	r1, r1
    7e70:	fab1 f181 	clz	r1, r1
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7e74:	290f      	cmp	r1, #15
    7e76:	bf8a      	itet	hi
    7e78:	f1a1 0410 	subhi.w	r4, r1, #16
    7e7c:	f041 0480 	orrls.w	r4, r1, #128	; 0x80
    7e80:	b2e4      	uxtbhi	r4, r4
            usbd_ep_state_t * p_state = ep_state_access(ep);
    7e82:	4620      	mov	r0, r4
    7e84:	f7ff fc7c 	bl	7780 <ep_state_access>
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    7e88:	f04f 0b01 	mov.w	fp, #1
            if (NRF_USBD_EPIN_CHECK(ep))
    7e8c:	fa4f fa84 	sxtb.w	sl, r4
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    7e90:	fa0b f101 	lsl.w	r1, fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
    7e94:	f1ba 0f00 	cmp.w	sl, #0
            usbd_ep_state_t * p_state = ep_state_access(ep);
    7e98:	4605      	mov	r5, r0
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    7e9a:	ea6f 0b01 	mvn.w	fp, r1
            if (NRF_USBD_EPIN_CHECK(ep))
    7e9e:	da40      	bge.n	7f22 <usbd_dmareq_process+0xe2>
                continue_transfer = p_state->handler.feeder(
    7ea0:	6803      	ldr	r3, [r0, #0]
    7ea2:	8982      	ldrh	r2, [r0, #12]
    7ea4:	6841      	ldr	r1, [r0, #4]
    7ea6:	a802      	add	r0, sp, #8
    7ea8:	4798      	blx	r3
                if (!continue_transfer)
    7eaa:	b900      	cbnz	r0, 7eae <usbd_dmareq_process+0x6e>
                    p_state->handler.consumer = NULL;
    7eac:	6028      	str	r0, [r5, #0]
    m_dma_pending = true;
    7eae:	2301      	movs	r3, #1
            m_ep_ready &= ~(1U << pos);
    7eb0:	6831      	ldr	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
    7eb2:	9a03      	ldr	r2, [sp, #12]
    m_dma_pending = true;
    7eb4:	f888 3000 	strb.w	r3, [r8]
            p_state->transfer_cnt += transfer.size;
    7eb8:	68ab      	ldr	r3, [r5, #8]
            m_ep_ready &= ~(1U << pos);
    7eba:	ea01 010b 	and.w	r1, r1, fp
            p_state->transfer_cnt += transfer.size;
    7ebe:	4413      	add	r3, r2
    if (NRF_USBD_EPIN_CHECK(ep))
    7ec0:	f1ba 0f00 	cmp.w	sl, #0
            m_ep_ready &= ~(1U << pos);
    7ec4:	6031      	str	r1, [r6, #0]
            p_state->transfer_cnt += transfer.size;
    7ec6:	60ab      	str	r3, [r5, #8]
            nrf_usbd_ep_easydma_set(NRF_USBD, ep, transfer.p_data.addr, (uint32_t)transfer.size);
    7ec8:	f004 0008 	and.w	r0, r4, #8
    7ecc:	9902      	ldr	r1, [sp, #8]
    7ece:	4b34      	ldr	r3, [pc, #208]	; (7fa0 <usbd_dmareq_process+0x160>)
            uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    7ed0:	f004 040f 	and.w	r4, r4, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    7ed4:	da4f      	bge.n	7f76 <usbd_dmareq_process+0x136>
        if (NRF_USBD_EPISO_CHECK(ep))
    7ed6:	2800      	cmp	r0, #0
    7ed8:	d045      	beq.n	7f66 <usbd_dmareq_process+0x126>
            p_reg->ISOIN.PTR    = ptr;
    7eda:	f8c3 16a0 	str.w	r1, [r3, #1696]	; 0x6a0
            p_reg->ISOIN.MAXCNT = maxcnt;
    7ede:	f8c3 26a4 	str.w	r2, [r3, #1700]	; 0x6a4
    return (nrf_usbd_task_t)(
    7ee2:	2304      	movs	r3, #4
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7ee4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    return (volatile uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    7ee8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7eec:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    7ef0:	2201      	movs	r2, #1
    7ef2:	601a      	str	r2, [r3, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    7ef4:	681b      	ldr	r3, [r3, #0]
    return (NRF_USBD_EPIN_CHECK(ep) ? epin_endev : epout_endev)[NRF_USBD_EP_NR_GET(ep)];
    7ef6:	4a2b      	ldr	r2, [pc, #172]	; (7fa4 <usbd_dmareq_process+0x164>)
    7ef8:	4b2b      	ldr	r3, [pc, #172]	; (7fa8 <usbd_dmareq_process+0x168>)
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7efa:	4929      	ldr	r1, [pc, #164]	; (7fa0 <usbd_dmareq_process+0x160>)
    7efc:	ea13 032a 	ands.w	r3, r3, sl, asr #32
    7f00:	bf38      	it	cc
    7f02:	4613      	movcc	r3, r2
    7f04:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    7f08:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    7f0c:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    7f10:	681a      	ldr	r2, [r3, #0]
            while (!nrf_usbd_event_check(NRF_USBD, nrfx_usbd_ep_to_endevent(ep)) &&
    7f12:	b91a      	cbnz	r2, 7f1c <usbd_dmareq_process+0xdc>
    7f14:	f8d1 2100 	ldr.w	r2, [r1, #256]	; 0x100
    7f18:	2a00      	cmp	r2, #0
    7f1a:	d0f9      	beq.n	7f10 <usbd_dmareq_process+0xd0>
}
    7f1c:	b005      	add	sp, #20
    7f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    7f22:	4620      	mov	r0, r4
    7f24:	f7ff ff78 	bl	7e18 <nrfx_usbd_epout_size_get>
                continue_transfer = p_state->handler.consumer(
    7f28:	89aa      	ldrh	r2, [r5, #12]
    7f2a:	6869      	ldr	r1, [r5, #4]
    7f2c:	f8d5 c000 	ldr.w	ip, [r5]
    7f30:	4603      	mov	r3, r0
                const size_t rx_size = nrfx_usbd_epout_size_get(ep);
    7f32:	4607      	mov	r7, r0
                continue_transfer = p_state->handler.consumer(
    7f34:	a802      	add	r0, sp, #8
    7f36:	47e0      	blx	ip
                if (transfer.p_data.rx == NULL)
    7f38:	9a02      	ldr	r2, [sp, #8]
    7f3a:	2a00      	cmp	r2, #0
    7f3c:	d0b5      	beq.n	7eaa <usbd_dmareq_process+0x6a>
                else if (transfer.size < rx_size)
    7f3e:	9a03      	ldr	r2, [sp, #12]
    7f40:	4297      	cmp	r7, r2
    7f42:	d9b2      	bls.n	7eaa <usbd_dmareq_process+0x6a>
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    7f44:	2702      	movs	r7, #2
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    7f46:	4658      	mov	r0, fp
                    p_state->status = NRFX_USBD_EP_OVERLOAD;
    7f48:	73af      	strb	r7, [r5, #14]
                    (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << pos)));
    7f4a:	f7ff fd47 	bl	79dc <atomic_and.constprop.0.isra.0>
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    7f4e:	2306      	movs	r3, #6
    7f50:	f88d 3004 	strb.w	r3, [sp, #4]
                    m_event_handler(&evt);
    7f54:	4b15      	ldr	r3, [pc, #84]	; (7fac <usbd_dmareq_process+0x16c>)
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    7f56:	f88d 4006 	strb.w	r4, [sp, #6]
                    m_event_handler(&evt);
    7f5a:	681b      	ldr	r3, [r3, #0]
                    NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OVERLOAD);
    7f5c:	f88d 7007 	strb.w	r7, [sp, #7]
                    m_event_handler(&evt);
    7f60:	a801      	add	r0, sp, #4
    7f62:	4798      	blx	r3
                    continue;
    7f64:	e778      	b.n	7e58 <usbd_dmareq_process+0x18>
            p_reg->EPIN[epnr].PTR    = ptr;
    7f66:	2014      	movs	r0, #20
    7f68:	fb00 3304 	mla	r3, r0, r4, r3
    7f6c:	f8c3 1600 	str.w	r1, [r3, #1536]	; 0x600
            p_reg->EPIN[epnr].MAXCNT = maxcnt;
    7f70:	f8c3 2604 	str.w	r2, [r3, #1540]	; 0x604
    7f74:	e7b5      	b.n	7ee2 <usbd_dmareq_process+0xa2>
        if (NRF_USBD_EPISO_CHECK(ep))
    7f76:	b128      	cbz	r0, 7f84 <usbd_dmareq_process+0x144>
            p_reg->ISOOUT.PTR    = ptr;
    7f78:	f8c3 17a0 	str.w	r1, [r3, #1952]	; 0x7a0
            p_reg->ISOOUT.MAXCNT = maxcnt;
    7f7c:	f8c3 27a4 	str.w	r2, [r3, #1956]	; 0x7a4
    return (nrf_usbd_task_t)(
    7f80:	2328      	movs	r3, #40	; 0x28
    7f82:	e7af      	b.n	7ee4 <usbd_dmareq_process+0xa4>
            p_reg->EPOUT[epnr].PTR    = ptr;
    7f84:	2014      	movs	r0, #20
    7f86:	fb00 3304 	mla	r3, r0, r4, r3
    7f8a:	f8c3 1700 	str.w	r1, [r3, #1792]	; 0x700
            p_reg->EPOUT[epnr].MAXCNT = maxcnt;
    7f8e:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    7f92:	e7f5      	b.n	7f80 <usbd_dmareq_process+0x140>
    7f94:	20001ab8 	.word	0x20001ab8
    7f98:	200017c8 	.word	0x200017c8
    7f9c:	20001838 	.word	0x20001838
    7fa0:	40027000 	.word	0x40027000
    7fa4:	0000c18a 	.word	0x0000c18a
    7fa8:	0000c178 	.word	0x0000c178
    7fac:	2000195c 	.word	0x2000195c

00007fb0 <ev_epdata_handler>:
{
    7fb0:	b538      	push	{r3, r4, r5, lr}
    return p_reg->EPDATASTATUS;
    7fb2:	4b0f      	ldr	r3, [pc, #60]	; (7ff0 <ev_epdata_handler+0x40>)
    7fb4:	f8d3 446c 	ldr.w	r4, [r3, #1132]	; 0x46c
    p_reg->EPDATASTATUS = flags;
    7fb8:	f8c3 446c 	str.w	r4, [r3, #1132]	; 0x46c
        dataepstatus &= ~(1UL << bitpos);
    7fbc:	2501      	movs	r5, #1
    while (dataepstatus)
    7fbe:	b91c      	cbnz	r4, 7fc8 <ev_epdata_handler+0x18>
}
    7fc0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
        usbd_dmareq_process();
    7fc4:	f7ff bf3c 	b.w	7e40 <usbd_dmareq_process>
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    7fc8:	fa94 f3a4 	rbit	r3, r4
    7fcc:	fab3 f383 	clz	r3, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7fd0:	2b0f      	cmp	r3, #15
    7fd2:	bfc8      	it	gt
    7fd4:	f1a3 0010 	subgt.w	r0, r3, #16
        uint8_t bitpos    = NRF_CTZ(dataepstatus);
    7fd8:	4619      	mov	r1, r3
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    7fda:	bfd4      	ite	le
    7fdc:	f043 0080 	orrle.w	r0, r3, #128	; 0x80
    7fe0:	b2c0      	uxtbgt	r0, r0
        dataepstatus &= ~(1UL << bitpos);
    7fe2:	fa05 f303 	lsl.w	r3, r5, r3
    7fe6:	ea24 0403 	bic.w	r4, r4, r3
        (void)(usbd_ep_data_handler(ep, bitpos));
    7fea:	f7ff fd39 	bl	7a60 <usbd_ep_data_handler>
    7fee:	e7e6      	b.n	7fbe <ev_epdata_handler+0xe>
    7ff0:	40027000 	.word	0x40027000

00007ff4 <nrf_usbd_epout_dma_handler>:
    m_dma_pending = false;
    7ff4:	4b17      	ldr	r3, [pc, #92]	; (8054 <CONFIG_PM_SRAM_SIZE+0x54>)
{
    7ff6:	b537      	push	{r0, r1, r2, r4, r5, lr}
    m_dma_pending = false;
    7ff8:	2200      	movs	r2, #0
    7ffa:	701a      	strb	r2, [r3, #0]
{
    7ffc:	4604      	mov	r4, r0
    usbd_ep_state_t * p_state = ep_state_access(ep);
    7ffe:	f7ff fbbf 	bl	7780 <ep_state_access>
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    8002:	7b83      	ldrb	r3, [r0, #14]
    8004:	2b03      	cmp	r3, #3
    8006:	d10d      	bne.n	8024 <CONFIG_PM_SRAM_SIZE+0x24>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8008:	4620      	mov	r0, r4
    800a:	f003 f98e 	bl	b32a <ep2bit>
    800e:	2301      	movs	r3, #1
    8010:	fa03 f000 	lsl.w	r0, r3, r0
    8014:	43c0      	mvns	r0, r0
    8016:	f7ff fce1 	bl	79dc <atomic_and.constprop.0.isra.0>
}
    801a:	b003      	add	sp, #12
    801c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    usbd_dmareq_process();
    8020:	f7ff bf0e 	b.w	7e40 <usbd_dmareq_process>
    else if (p_state->handler.consumer == NULL)
    8024:	6805      	ldr	r5, [r0, #0]
    8026:	2d00      	cmp	r5, #0
    8028:	d1f7      	bne.n	801a <CONFIG_PM_SRAM_SIZE+0x1a>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    802a:	4620      	mov	r0, r4
    802c:	f003 f97d 	bl	b32a <ep2bit>
    8030:	2301      	movs	r3, #1
    8032:	fa03 f000 	lsl.w	r0, r3, r0
    8036:	43c0      	mvns	r0, r0
    8038:	f7ff fcd0 	bl	79dc <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    803c:	2306      	movs	r3, #6
    803e:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    8042:	4b05      	ldr	r3, [pc, #20]	; (8058 <CONFIG_PM_SRAM_SIZE+0x58>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8044:	f88d 4006 	strb.w	r4, [sp, #6]
        m_event_handler(&evt);
    8048:	681b      	ldr	r3, [r3, #0]
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    804a:	f88d 5007 	strb.w	r5, [sp, #7]
        m_event_handler(&evt);
    804e:	a801      	add	r0, sp, #4
    8050:	4798      	blx	r3
    8052:	e7e2      	b.n	801a <CONFIG_PM_SRAM_SIZE+0x1a>
    8054:	20001ab8 	.word	0x20001ab8
    8058:	2000195c 	.word	0x2000195c

0000805c <nrfx_usbd_ep_stall>:
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_Stall << USBD_EPSTALL_STALL_Pos) | ep;
    805c:	4b02      	ldr	r3, [pc, #8]	; (8068 <nrfx_usbd_ep_stall+0xc>)
    805e:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    8062:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518

void nrfx_usbd_ep_stall(nrfx_usbd_ep_t ep)
{
    NRFX_LOG_DEBUG("USB: EP %x stalled.", ep);
    nrf_usbd_ep_stall(NRF_USBD, ep_to_hal(ep));
}
    8066:	4770      	bx	lr
    8068:	40027000 	.word	0x40027000

0000806c <nrfx_usbd_ep_stall_check>:
    if (NRF_USBD_EPISO_CHECK(ep))
    806c:	0702      	lsls	r2, r0, #28
    806e:	d413      	bmi.n	8098 <nrfx_usbd_ep_stall_check+0x2c>
        return p_reg->HALTED.EPIN[epnr];
    8070:	f000 030f 	and.w	r3, r0, #15
    if (NRF_USBD_EPIN_CHECK(ep))
    8074:	f010 0f80 	tst.w	r0, #128	; 0x80
    8078:	4a08      	ldr	r2, [pc, #32]	; (809c <nrfx_usbd_ep_stall_check+0x30>)
        return p_reg->HALTED.EPOUT[epnr];
    807a:	bf0b      	itete	eq
    807c:	f503 7388 	addeq.w	r3, r3, #272	; 0x110
        return p_reg->HALTED.EPIN[epnr];
    8080:	f503 7384 	addne.w	r3, r3, #264	; 0x108
        return p_reg->HALTED.EPOUT[epnr];
    8084:	eb02 0383 	addeq.w	r3, r2, r3, lsl #2
        return p_reg->HALTED.EPIN[epnr];
    8088:	f852 0023 	ldrne.w	r0, [r2, r3, lsl #2]
        return p_reg->HALTED.EPOUT[epnr];
    808c:	bf08      	it	eq
    808e:	6858      	ldreq	r0, [r3, #4]
    return USBD_HALTED_EPOUT_GETSTATUS_Halted == nrf_usbd_halted_get(p_reg, ep);
    8090:	1e43      	subs	r3, r0, #1
    8092:	4258      	negs	r0, r3
    8094:	4158      	adcs	r0, r3
    8096:	4770      	bx	lr
        return false;
    8098:	2000      	movs	r0, #0
}

bool nrfx_usbd_ep_stall_check(nrfx_usbd_ep_t ep)
{
    return nrf_usbd_ep_is_stall(NRF_USBD, ep_to_hal(ep));
}
    809a:	4770      	bx	lr
    809c:	40027000 	.word	0x40027000

000080a0 <nrfx_usbd_ep_dtoggle_clear>:
    p_reg->DTOGGLE = ep | (NRF_USBD_DTOGGLE_NOP << USBD_DTOGGLE_VALUE_Pos);
    80a0:	4b04      	ldr	r3, [pc, #16]	; (80b4 <nrfx_usbd_ep_dtoggle_clear+0x14>)
    80a2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    p_reg->DTOGGLE = ep | (op << USBD_DTOGGLE_VALUE_Pos);
    80a6:	f440 7080 	orr.w	r0, r0, #256	; 0x100
    80aa:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    (void) p_reg->DTOGGLE;
    80ae:	f8d3 350c 	ldr.w	r3, [r3, #1292]	; 0x50c

void nrfx_usbd_ep_dtoggle_clear(nrfx_usbd_ep_t ep)
{
    nrf_usbd_dtoggle_set(NRF_USBD, ep, NRF_USBD_DTOGGLE_DATA0);
}
    80b2:	4770      	bx	lr
    80b4:	40027000 	.word	0x40027000

000080b8 <nrfx_usbd_setup_get>:

void nrfx_usbd_setup_get(nrfx_usbd_setup_t * p_setup)
{
    80b8:	b510      	push	{r4, lr}
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    80ba:	2208      	movs	r2, #8
    80bc:	2100      	movs	r1, #0
{
    80be:	4604      	mov	r4, r0
    memset(p_setup, 0, sizeof(nrfx_usbd_setup_t));
    80c0:	f002 fd77 	bl	abb2 <memset>
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    80c4:	4b0e      	ldr	r3, [pc, #56]	; (8100 <nrfx_usbd_setup_get+0x48>)
    80c6:	f8d3 2480 	ldr.w	r2, [r3, #1152]	; 0x480
    80ca:	7022      	strb	r2, [r4, #0]
    return (uint8_t)(p_reg->BREQUEST);
    80cc:	f8d3 2484 	ldr.w	r2, [r3, #1156]	; 0x484
    80d0:	7062      	strb	r2, [r4, #1]
    const uint16_t val = p_reg->WVALUEL;
    80d2:	f8d3 2488 	ldr.w	r2, [r3, #1160]	; 0x488
    return (uint16_t)(val | ((p_reg->WVALUEH) << 8));
    80d6:	f8d3 148c 	ldr.w	r1, [r3, #1164]	; 0x48c
    80da:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->bmRequestType = nrf_usbd_setup_bmrequesttype_get(NRF_USBD);
    p_setup->bRequest      = nrf_usbd_setup_brequest_get(NRF_USBD);
    p_setup->wValue        = nrf_usbd_setup_wvalue_get(NRF_USBD);
    80de:	8062      	strh	r2, [r4, #2]
    const uint16_t val = p_reg->WINDEXL;
    80e0:	f8d3 2490 	ldr.w	r2, [r3, #1168]	; 0x490
    return (uint16_t)(val | ((p_reg->WINDEXH) << 8));
    80e4:	f8d3 1494 	ldr.w	r1, [r3, #1172]	; 0x494
    80e8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    p_setup->wIndex        = nrf_usbd_setup_windex_get(NRF_USBD);
    80ec:	80a2      	strh	r2, [r4, #4]
    const uint16_t val = p_reg->WLENGTHL;
    80ee:	f8d3 2498 	ldr.w	r2, [r3, #1176]	; 0x498
    return (uint16_t)(val | ((p_reg->WLENGTHH) << 8));
    80f2:	f8d3 349c 	ldr.w	r3, [r3, #1180]	; 0x49c
    80f6:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    p_setup->wLength       = nrf_usbd_setup_wlength_get(NRF_USBD);
    80fa:	80e3      	strh	r3, [r4, #6]
}
    80fc:	bd10      	pop	{r4, pc}
    80fe:	bf00      	nop
    8100:	40027000 	.word	0x40027000

00008104 <nrfx_usbd_setup_data_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    8104:	4b02      	ldr	r3, [pc, #8]	; (8110 <nrfx_usbd_setup_data_clear+0xc>)
    8106:	2201      	movs	r2, #1
    8108:	64da      	str	r2, [r3, #76]	; 0x4c
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    810a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c

void nrfx_usbd_setup_data_clear(void)
{
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0RCVOUT);
}
    810c:	4770      	bx	lr
    810e:	bf00      	nop
    8110:	40027000 	.word	0x40027000

00008114 <ev_dma_epout0_handler>:
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    8114:	b513      	push	{r0, r1, r4, lr}
    m_dma_pending = false;
    8116:	4b12      	ldr	r3, [pc, #72]	; (8160 <ev_dma_epout0_handler+0x4c>)
    8118:	2200      	movs	r2, #0
    811a:	701a      	strb	r2, [r3, #0]
    if (NRFX_USBD_EP_ABORTED == p_state->status)
    811c:	4b11      	ldr	r3, [pc, #68]	; (8164 <ev_dma_epout0_handler+0x50>)
    811e:	7b9a      	ldrb	r2, [r3, #14]
    8120:	2a03      	cmp	r2, #3
    8122:	d106      	bne.n	8132 <ev_dma_epout0_handler+0x1e>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8124:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    8128:	b002      	add	sp, #8
    812a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    812e:	f7ff bc55 	b.w	79dc <atomic_and.constprop.0.isra.0>
    else if (p_state->handler.consumer == NULL)
    8132:	681c      	ldr	r4, [r3, #0]
    8134:	b974      	cbnz	r4, 8154 <ev_dma_epout0_handler+0x40>
        (void)(NRFX_ATOMIC_FETCH_AND(&m_ep_dma_waiting, ~(1U << ep2bit(ep))));
    8136:	f46f 3080 	mvn.w	r0, #65536	; 0x10000
    813a:	f7ff fc4f 	bl	79dc <atomic_and.constprop.0.isra.0>
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    813e:	2306      	movs	r3, #6
    8140:	f88d 3004 	strb.w	r3, [sp, #4]
        m_event_handler(&evt);
    8144:	4b08      	ldr	r3, [pc, #32]	; (8168 <ev_dma_epout0_handler+0x54>)
        NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_OK);
    8146:	f8ad 4006 	strh.w	r4, [sp, #6]
        m_event_handler(&evt);
    814a:	681b      	ldr	r3, [r3, #0]
    814c:	a801      	add	r0, sp, #4
    814e:	4798      	blx	r3
static void ev_dma_epout0_handler(void) { nrf_usbd_ep0out_dma_handler(); }
    8150:	b002      	add	sp, #8
    8152:	bd10      	pop	{r4, pc}
    8154:	b002      	add	sp, #8
    8156:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        nrfx_usbd_setup_data_clear();
    815a:	f7ff bfd3 	b.w	8104 <nrfx_usbd_setup_data_clear>
    815e:	bf00      	nop
    8160:	20001ab8 	.word	0x20001ab8
    8164:	2000183c 	.word	0x2000183c
    8168:	2000195c 	.word	0x2000195c

0000816c <nrfx_usbd_setup_clear>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    816c:	4b02      	ldr	r3, [pc, #8]	; (8178 <nrfx_usbd_setup_clear+0xc>)
    816e:	2201      	movs	r2, #1
    8170:	651a      	str	r2, [r3, #80]	; 0x50
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8172:	6d1b      	ldr	r3, [r3, #80]	; 0x50

void nrfx_usbd_setup_clear(void)
{
    NRFX_LOG_DEBUG(">> ep0status >>");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STATUS);
}
    8174:	4770      	bx	lr
    8176:	bf00      	nop
    8178:	40027000 	.word	0x40027000

0000817c <nrfx_usbd_setup_stall>:
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)task)) = 1UL;
    817c:	4b02      	ldr	r3, [pc, #8]	; (8188 <nrfx_usbd_setup_stall+0xc>)
    817e:	2201      	movs	r2, #1
    8180:	655a      	str	r2, [r3, #84]	; 0x54
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)task));
    8182:	6d5b      	ldr	r3, [r3, #84]	; 0x54

void nrfx_usbd_setup_stall(void)
{
    NRFX_LOG_DEBUG("Setup stalled.");
    nrf_usbd_task_trigger(NRF_USBD, NRF_USBD_TASK_EP0STALL);
}
    8184:	4770      	bx	lr
    8186:	bf00      	nop
    8188:	40027000 	.word	0x40027000

0000818c <nrfx_usbd_last_setup_dir_get>:

nrfx_usbd_ep_t nrfx_usbd_last_setup_dir_get(void)
{
    return m_last_setup_dir;
}
    818c:	4b01      	ldr	r3, [pc, #4]	; (8194 <nrfx_usbd_last_setup_dir_get+0x8>)
    818e:	7818      	ldrb	r0, [r3, #0]
    8190:	4770      	bx	lr
    8192:	bf00      	nop
    8194:	20001aba 	.word	0x20001aba

00008198 <nrfx_usbd_transfer_out_drop>:

void nrfx_usbd_transfer_out_drop(nrfx_usbd_ep_t ep)
{
    8198:	b510      	push	{r4, lr}
    819a:	4602      	mov	r2, r0
	__asm__ volatile(
    819c:	f04f 0320 	mov.w	r3, #32
    81a0:	f3ef 8411 	mrs	r4, BASEPRI
    81a4:	f383 8812 	msr	BASEPRI_MAX, r3
    81a8:	f3bf 8f6f 	isb	sy
    NRFX_ASSERT(NRF_USBD_EPOUT_CHECK(ep));

    NRFX_CRITICAL_SECTION_ENTER();
    m_ep_ready &= ~(1U << ep2bit(ep));
    81ac:	f003 f8bd 	bl	b32a <ep2bit>
    81b0:	490d      	ldr	r1, [pc, #52]	; (81e8 <nrfx_usbd_transfer_out_drop+0x50>)
    81b2:	2301      	movs	r3, #1
    81b4:	fa03 f000 	lsl.w	r0, r3, r0
    81b8:	680b      	ldr	r3, [r1, #0]
    81ba:	ea23 0300 	bic.w	r3, r3, r0
    81be:	600b      	str	r3, [r1, #0]
    if (!NRF_USBD_EPISO_CHECK(ep))
    81c0:	f012 0108 	ands.w	r1, r2, #8
    81c4:	d10a      	bne.n	81dc <nrfx_usbd_transfer_out_drop+0x44>
    p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)] = 0;
    81c6:	f002 030f 	and.w	r3, r2, #15
    81ca:	009b      	lsls	r3, r3, #2
    81cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    81d0:	f503 331c 	add.w	r3, r3, #159744	; 0x27000
    81d4:	f8c3 14a0 	str.w	r1, [r3, #1184]	; 0x4a0
    (void) p_reg->SIZE.EPOUT[NRF_USBD_EP_NR_GET(ep)];
    81d8:	f8d3 34a0 	ldr.w	r3, [r3, #1184]	; 0x4a0
	__asm__ volatile(
    81dc:	f384 8811 	msr	BASEPRI, r4
    81e0:	f3bf 8f6f 	isb	sy
    {
        nrf_usbd_epout_clear(NRF_USBD, ep);
    }
    NRFX_CRITICAL_SECTION_EXIT();
}
    81e4:	bd10      	pop	{r4, pc}
    81e6:	bf00      	nop
    81e8:	20001838 	.word	0x20001838

000081ec <usbd_ep_abort>:
{
    81ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    81ee:	4601      	mov	r1, r0
	__asm__ volatile(
    81f0:	f04f 0320 	mov.w	r3, #32
    81f4:	f3ef 8511 	mrs	r5, BASEPRI
    81f8:	f383 8812 	msr	BASEPRI_MAX, r3
    81fc:	f3bf 8f6f 	isb	sy
    usbd_ep_state_t * p_state = ep_state_access(ep);
    8200:	f7ff fabe 	bl	7780 <ep_state_access>
    8204:	4606      	mov	r6, r0
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    8206:	4608      	mov	r0, r1
    8208:	f003 f88f 	bl	b32a <ep2bit>
    820c:	2201      	movs	r2, #1
    if (NRF_USBD_EPOUT_CHECK(ep))
    820e:	f011 0f80 	tst.w	r1, #128	; 0x80
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    8212:	fa02 f200 	lsl.w	r2, r2, r0
    8216:	482e      	ldr	r0, [pc, #184]	; (82d0 <usbd_ep_abort+0xe4>)
    if (NRF_USBD_EPOUT_CHECK(ep))
    8218:	d118      	bne.n	824c <usbd_ep_abort+0x60>
        if ((~m_ep_dma_waiting) & (1U << ep2bit(ep)))
    821a:	6803      	ldr	r3, [r0, #0]
    821c:	ea32 0403 	bics.w	r4, r2, r3
    8220:	d00a      	beq.n	8238 <usbd_ep_abort+0x4c>
            nrfx_usbd_transfer_out_drop(ep);
    8222:	4608      	mov	r0, r1
    8224:	f7ff ffb8 	bl	8198 <nrfx_usbd_transfer_out_drop>
        p_state->status = NRFX_USBD_EP_ABORTED;
    8228:	2303      	movs	r3, #3
    822a:	73b3      	strb	r3, [r6, #14]
	__asm__ volatile(
    822c:	f385 8811 	msr	BASEPRI, r5
    8230:	f3bf 8f6f 	isb	sy
}
    8234:	b003      	add	sp, #12
    8236:	bdf0      	pop	{r4, r5, r6, r7, pc}
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8238:	ea23 0302 	bic.w	r3, r3, r2
            p_state->handler.consumer = NULL;
    823c:	6034      	str	r4, [r6, #0]
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    823e:	6003      	str	r3, [r0, #0]
            m_ep_ready &= ~(1U << ep2bit(ep));
    8240:	4b24      	ldr	r3, [pc, #144]	; (82d4 <usbd_ep_abort+0xe8>)
    8242:	6818      	ldr	r0, [r3, #0]
    8244:	ea20 0002 	bic.w	r0, r0, r2
    8248:	6018      	str	r0, [r3, #0]
    824a:	e7ed      	b.n	8228 <usbd_ep_abort+0x3c>
        if(!NRF_USBD_EPISO_CHECK(ep))
    824c:	070b      	lsls	r3, r1, #28
    824e:	d415      	bmi.n	827c <usbd_ep_abort+0x90>
            if(ep != NRFX_USBD_EPIN0)
    8250:	2980      	cmp	r1, #128	; 0x80
    8252:	4b21      	ldr	r3, [pc, #132]	; (82d8 <usbd_ep_abort+0xec>)
    8254:	d02f      	beq.n	82b6 <usbd_ep_abort+0xca>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B6 + (2u * (NRF_USBD_EP_NR_GET(ep) - 1));
    8256:	f001 040f 	and.w	r4, r1, #15
    825a:	f204 34da 	addw	r4, r4, #986	; 0x3da
    825e:	0064      	lsls	r4, r4, #1
    8260:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    8264:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8268:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    826c:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    826e:	f044 0402 	orr.w	r4, r4, #2
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    8272:	433c      	orrs	r4, r7
    8274:	f8c3 4804 	str.w	r4, [r3, #2052]	; 0x804
                (void)(*((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)));
    8278:	f8d3 3804 	ldr.w	r3, [r3, #2052]	; 0x804
        if ((m_ep_dma_waiting | (~m_ep_ready)) & (1U << ep2bit(ep)))
    827c:	4f15      	ldr	r7, [pc, #84]	; (82d4 <usbd_ep_abort+0xe8>)
    827e:	6804      	ldr	r4, [r0, #0]
    8280:	683b      	ldr	r3, [r7, #0]
    8282:	ea64 0c03 	orn	ip, r4, r3
    8286:	ea1c 0f02 	tst.w	ip, r2
    828a:	d0cf      	beq.n	822c <usbd_ep_abort+0x40>
            m_ep_ready       |=   1U << ep2bit(ep) ;
    828c:	4313      	orrs	r3, r2
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    828e:	ea24 0402 	bic.w	r4, r4, r2
            m_ep_ready       |=   1U << ep2bit(ep) ;
    8292:	603b      	str	r3, [r7, #0]
            p_state->handler.feeder = NULL;
    8294:	2300      	movs	r3, #0
            m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    8296:	6004      	str	r4, [r0, #0]
            p_state->handler.feeder = NULL;
    8298:	6033      	str	r3, [r6, #0]
            p_state->status = NRFX_USBD_EP_ABORTED;
    829a:	2303      	movs	r3, #3
    829c:	73b3      	strb	r3, [r6, #14]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    829e:	f88d 3007 	strb.w	r3, [sp, #7]
            m_event_handler(&evt);
    82a2:	4b0e      	ldr	r3, [pc, #56]	; (82dc <usbd_ep_abort+0xf0>)
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    82a4:	f88d 1006 	strb.w	r1, [sp, #6]
    82a8:	2206      	movs	r2, #6
            m_event_handler(&evt);
    82aa:	681b      	ldr	r3, [r3, #0]
            NRFX_USBD_EP_TRANSFER_EVENT(evt, ep, NRFX_USBD_EP_ABORTED);
    82ac:	f88d 2004 	strb.w	r2, [sp, #4]
            m_event_handler(&evt);
    82b0:	a801      	add	r0, sp, #4
    82b2:	4798      	blx	r3
    82b4:	e7ba      	b.n	822c <usbd_ep_abort+0x40>
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x800)) = 0x7B4;
    82b6:	f240 74b4 	movw	r4, #1972	; 0x7b4
    82ba:	f8c3 4800 	str.w	r4, [r3, #2048]	; 0x800
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    82be:	f8d3 4804 	ldr.w	r4, [r3, #2052]	; 0x804
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    82c2:	f8d3 7804 	ldr.w	r7, [r3, #2052]	; 0x804
                uint8_t temp = *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804));
    82c6:	b2e4      	uxtb	r4, r4
                *((volatile uint32_t *)((uint32_t)(NRF_USBD) + 0x804)) |= temp;
    82c8:	f044 0404 	orr.w	r4, r4, #4
    82cc:	e7d1      	b.n	8272 <usbd_ep_abort+0x86>
    82ce:	bf00      	nop
    82d0:	200017c8 	.word	0x200017c8
    82d4:	20001838 	.word	0x20001838
    82d8:	40027000 	.word	0x40027000
    82dc:	2000195c 	.word	0x2000195c

000082e0 <ev_setup_handler>:
{
    82e0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    return (uint8_t)(p_reg->BMREQUESTTYPE);
    82e2:	4b17      	ldr	r3, [pc, #92]	; (8340 <ev_setup_handler+0x60>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    82e4:	4c17      	ldr	r4, [pc, #92]	; (8344 <ev_setup_handler+0x64>)
    82e6:	f8d3 5480 	ldr.w	r5, [r3, #1152]	; 0x480
    82ea:	6823      	ldr	r3, [r4, #0]
        & (1U <<ep2bit(m_last_setup_dir)))
    82ec:	4e16      	ldr	r6, [pc, #88]	; (8348 <ev_setup_handler+0x68>)
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    82ee:	43da      	mvns	r2, r3
    82f0:	4b16      	ldr	r3, [pc, #88]	; (834c <ev_setup_handler+0x6c>)
        & (1U <<ep2bit(m_last_setup_dir)))
    82f2:	7831      	ldrb	r1, [r6, #0]
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    82f4:	681b      	ldr	r3, [r3, #0]
    82f6:	b292      	uxth	r2, r2
        & (1U <<ep2bit(m_last_setup_dir)))
    82f8:	4608      	mov	r0, r1
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    82fa:	431a      	orrs	r2, r3
        & (1U <<ep2bit(m_last_setup_dir)))
    82fc:	f003 f815 	bl	b32a <ep2bit>
    8300:	2301      	movs	r3, #1
    8302:	4083      	lsls	r3, r0
    if ((m_ep_dma_waiting | ((~m_ep_ready) & NRFX_USBD_EPIN_BIT_MASK))
    8304:	4213      	tst	r3, r2
    8306:	d002      	beq.n	830e <ev_setup_handler+0x2e>
        usbd_ep_abort(m_last_setup_dir);
    8308:	4608      	mov	r0, r1
    830a:	f7ff ff6f 	bl	81ec <usbd_ep_abort>
        NRFX_USBD_EPOUT0 : NRFX_USBD_EPIN0;
    830e:	f005 0580 	and.w	r5, r5, #128	; 0x80
    (void)(NRFX_ATOMIC_FETCH_AND(
    8312:	f06f 1001 	mvn.w	r0, #65537	; 0x10001
    m_last_setup_dir =
    8316:	7035      	strb	r5, [r6, #0]
    (void)(NRFX_ATOMIC_FETCH_AND(
    8318:	f7ff fb60 	bl	79dc <atomic_and.constprop.0.isra.0>
    m_ep_ready |= 1U << ep2bit(NRFX_USBD_EPIN0);
    831c:	6823      	ldr	r3, [r4, #0]
    831e:	f043 0301 	orr.w	r3, r3, #1
    8322:	6023      	str	r3, [r4, #0]
    const nrfx_usbd_evt_t evt = {
    8324:	2300      	movs	r3, #0
    8326:	f8ad 3005 	strh.w	r3, [sp, #5]
    832a:	f88d 3007 	strb.w	r3, [sp, #7]
    832e:	2305      	movs	r3, #5
    8330:	f88d 3004 	strb.w	r3, [sp, #4]
    m_event_handler(&evt);
    8334:	4b06      	ldr	r3, [pc, #24]	; (8350 <ev_setup_handler+0x70>)
    8336:	a801      	add	r0, sp, #4
    8338:	681b      	ldr	r3, [r3, #0]
    833a:	4798      	blx	r3
}
    833c:	b002      	add	sp, #8
    833e:	bd70      	pop	{r4, r5, r6, pc}
    8340:	40027000 	.word	0x40027000
    8344:	20001838 	.word	0x20001838
    8348:	20001aba 	.word	0x20001aba
    834c:	200017c8 	.word	0x200017c8
    8350:	2000195c 	.word	0x2000195c

00008354 <nrfx_usbd_irq_handler>:
    return p_reg->INTENSET;
    8354:	4b1b      	ldr	r3, [pc, #108]	; (83c4 <nrfx_usbd_irq_handler+0x70>)
    8356:	f8d3 0304 	ldr.w	r0, [r3, #772]	; 0x304
    uint32_t active = 0;
    835a:	2300      	movs	r3, #0
{
    835c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
            active |= 1UL << event_nr;
    8360:	2401      	movs	r4, #1
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    8362:	461d      	mov	r5, r3
    while (to_process)
    8364:	b970      	cbnz	r0, 8384 <nrfx_usbd_irq_handler+0x30>
        m_isr[event_nr]();
    8366:	4f18      	ldr	r7, [pc, #96]	; (83c8 <nrfx_usbd_irq_handler+0x74>)
    bool setup_active = 0 != (active & NRF_USBD_INT_EP0SETUP_MASK);
    8368:	f403 0600 	and.w	r6, r3, #8388608	; 0x800000
    active &= ~NRF_USBD_INT_EP0SETUP_MASK;
    836c:	f423 0400 	bic.w	r4, r3, #8388608	; 0x800000
        active &= ~(1UL << event_nr);
    8370:	f04f 0801 	mov.w	r8, #1
    while (active)
    8374:	b9bc      	cbnz	r4, 83a6 <nrfx_usbd_irq_handler+0x52>
    usbd_dmareq_process();
    8376:	f7ff fd63 	bl	7e40 <usbd_dmareq_process>
    if (setup_active)
    837a:	b306      	cbz	r6, 83be <nrfx_usbd_irq_handler+0x6a>
}
    837c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        m_isr[USBD_INTEN_EP0SETUP_Pos]();
    8380:	f7ff bfae 	b.w	82e0 <ev_setup_handler>
        uint8_t event_nr = NRF_CTZ(to_process);
    8384:	fa90 f2a0 	rbit	r2, r0
    8388:	fab2 f282 	clz	r2, r2
    return (volatile const uint32_t*)(((uint8_t *)p_reg) + (uint32_t)offset);
    838c:	490f      	ldr	r1, [pc, #60]	; (83cc <nrfx_usbd_irq_handler+0x78>)
}

NRF_STATIC_INLINE uint32_t nrfx_bitpos_to_event(uint32_t bit)
{
    static const uint32_t event_reg_offset = 0x100u;
    return event_reg_offset + (bit * sizeof(uint32_t));
    838e:	0096      	lsls	r6, r2, #2
    8390:	4431      	add	r1, r6
            active |= 1UL << event_nr;
    8392:	fa04 f202 	lsl.w	r2, r4, r2
    return (bool)*nrf_usbd_getRegPtr_c(p_reg, (uint32_t)event);
    8396:	680e      	ldr	r6, [r1, #0]
    if (ret)
    8398:	b116      	cbz	r6, 83a0 <nrfx_usbd_irq_handler+0x4c>
    *(nrf_usbd_getRegPtr(p_reg, (uint32_t)event)) = 0UL;
    839a:	600d      	str	r5, [r1, #0]
    (void)*(nrf_usbd_getRegPtr(p_reg, (uint32_t)event));
    839c:	6809      	ldr	r1, [r1, #0]
    839e:	4313      	orrs	r3, r2
        to_process &= ~(1UL << event_nr);
    83a0:	ea20 0002 	bic.w	r0, r0, r2
    83a4:	e7de      	b.n	8364 <nrfx_usbd_irq_handler+0x10>
        uint8_t event_nr = NRF_CTZ(active);
    83a6:	fa94 f5a4 	rbit	r5, r4
    83aa:	fab5 f585 	clz	r5, r5
        m_isr[event_nr]();
    83ae:	f857 3025 	ldr.w	r3, [r7, r5, lsl #2]
        active &= ~(1UL << event_nr);
    83b2:	fa08 f505 	lsl.w	r5, r8, r5
        m_isr[event_nr]();
    83b6:	4798      	blx	r3
        active &= ~(1UL << event_nr);
    83b8:	ea24 0405 	bic.w	r4, r4, r5
    83bc:	e7da      	b.n	8374 <nrfx_usbd_irq_handler+0x20>
}
    83be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    83c2:	bf00      	nop
    83c4:	40027000 	.word	0x40027000
    83c8:	0000c0e8 	.word	0x0000c0e8
    83cc:	40027100 	.word	0x40027100

000083d0 <usbd_ep_abort_all>:
{
    83d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    uint32_t ep_waiting = m_ep_dma_waiting | (m_ep_ready & NRFX_USBD_EPOUT_BIT_MASK);
    83d2:	4e11      	ldr	r6, [pc, #68]	; (8418 <usbd_ep_abort_all+0x48>)
    83d4:	4b11      	ldr	r3, [pc, #68]	; (841c <usbd_ep_abort_all+0x4c>)
    83d6:	6834      	ldr	r4, [r6, #0]
    83d8:	681b      	ldr	r3, [r3, #0]
    83da:	0c24      	lsrs	r4, r4, #16
    83dc:	0424      	lsls	r4, r4, #16
    83de:	431c      	orrs	r4, r3
        ep_waiting &= ~(1U << bitpos);
    83e0:	2701      	movs	r7, #1
    while (0 != ep_waiting)
    83e2:	b91c      	cbnz	r4, 83ec <usbd_ep_abort_all+0x1c>
    m_ep_ready = (((1U << NRF_USBD_EPIN_CNT) - 1U) << NRFX_USBD_EPIN_BITPOS_0);
    83e4:	f240 13ff 	movw	r3, #511	; 0x1ff
    83e8:	6033      	str	r3, [r6, #0]
}
    83ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    83ec:	fa94 f5a4 	rbit	r5, r4
    83f0:	fab5 f585 	clz	r5, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    83f4:	2d0f      	cmp	r5, #15
        uint8_t bitpos = NRF_CTZ(ep_waiting);
    83f6:	4628      	mov	r0, r5
    return (nrfx_usbd_ep_t)((bitpos >= NRFX_USBD_EPOUT_BITPOS_0) ?
    83f8:	bfc6      	itte	gt
    83fa:	f1a5 0010 	subgt.w	r0, r5, #16
    83fe:	b2c0      	uxtbgt	r0, r0
    8400:	f040 0080 	orrle.w	r0, r0, #128	; 0x80
        if (!NRF_USBD_EPISO_CHECK(bit2ep(bitpos)))
    8404:	0703      	lsls	r3, r0, #28
    8406:	d401      	bmi.n	840c <usbd_ep_abort_all+0x3c>
            usbd_ep_abort(bit2ep(bitpos));
    8408:	f7ff fef0 	bl	81ec <usbd_ep_abort>
        ep_waiting &= ~(1U << bitpos);
    840c:	fa07 f505 	lsl.w	r5, r7, r5
    8410:	ea24 0405 	bic.w	r4, r4, r5
    8414:	e7e5      	b.n	83e2 <usbd_ep_abort_all+0x12>
    8416:	bf00      	nop
    8418:	20001838 	.word	0x20001838
    841c:	200017c8 	.word	0x200017c8

00008420 <nrfx_usbd_stop>:
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    8420:	4b0c      	ldr	r3, [pc, #48]	; (8454 <nrfx_usbd_stop+0x34>)
    8422:	2280      	movs	r2, #128	; 0x80
{
    8424:	b510      	push	{r4, lr}
    if (NRFX_IRQ_IS_ENABLED(USBD_IRQn))
    8426:	2027      	movs	r0, #39	; 0x27
    8428:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    842c:	f7fa fc64 	bl	2cf8 <arch_irq_is_enabled>
    8430:	b170      	cbz	r0, 8450 <nrfx_usbd_stop+0x30>
    p_reg->USBPULLUP = USBD_USBPULLUP_CONNECT_Disabled << USBD_USBPULLUP_CONNECT_Pos;
    8432:	4c09      	ldr	r4, [pc, #36]	; (8458 <nrfx_usbd_stop+0x38>)
        usbd_ep_abort_all();
    8434:	f7ff ffcc 	bl	83d0 <usbd_ep_abort_all>
    8438:	2300      	movs	r3, #0
    843a:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
        NRFX_IRQ_DISABLE(USBD_IRQn);
    843e:	2027      	movs	r0, #39	; 0x27
    (void) p_reg->USBPULLUP;
    8440:	f8d4 3504 	ldr.w	r3, [r4, #1284]	; 0x504
    8444:	f7fa fc44 	bl	2cd0 <arch_irq_disable>
    p_reg->INTENCLR = mask;
    8448:	f04f 33ff 	mov.w	r3, #4294967295
    844c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
}
    8450:	bd10      	pop	{r4, pc}
    8452:	bf00      	nop
    8454:	e000e100 	.word	0xe000e100
    8458:	40027000 	.word	0x40027000

0000845c <nrfx_usbd_disable>:
{
    845c:	b508      	push	{r3, lr}
    nrfx_usbd_stop();
    845e:	f7ff ffdf 	bl	8420 <nrfx_usbd_stop>
    return p_reg->INTENSET;
    8462:	4b08      	ldr	r3, [pc, #32]	; (8484 <nrfx_usbd_disable+0x28>)
    8464:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    p_reg->INTENCLR = mask;
    8468:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->ENABLE = USBD_ENABLE_ENABLE_Disabled << USBD_ENABLE_ENABLE_Pos;
    846c:	2200      	movs	r2, #0
    846e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    (void) p_reg->ENABLE;
    8472:	f8d3 3500 	ldr.w	r3, [r3, #1280]	; 0x500
    m_dma_pending = false;
    8476:	4b04      	ldr	r3, [pc, #16]	; (8488 <nrfx_usbd_disable+0x2c>)
    8478:	701a      	strb	r2, [r3, #0]
    m_drv_state = NRFX_DRV_STATE_INITIALIZED;
    847a:	4b04      	ldr	r3, [pc, #16]	; (848c <nrfx_usbd_disable+0x30>)
    847c:	2201      	movs	r2, #1
    847e:	701a      	strb	r2, [r3, #0]
}
    8480:	bd08      	pop	{r3, pc}
    8482:	bf00      	nop
    8484:	40027000 	.word	0x40027000
    8488:	20001ab8 	.word	0x20001ab8
    848c:	20001ab9 	.word	0x20001ab9

00008490 <nrfx_usbd_suspend>:
{
    8490:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    8492:	f04f 0320 	mov.w	r3, #32
    8496:	f3ef 8511 	mrs	r5, BASEPRI
    849a:	f383 8812 	msr	BASEPRI_MAX, r3
    849e:	f3bf 8f6f 	isb	sy
    if (m_bus_suspend)
    84a2:	4b11      	ldr	r3, [pc, #68]	; (84e8 <nrfx_usbd_suspend+0x58>)
    84a4:	781b      	ldrb	r3, [r3, #0]
    84a6:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    84aa:	b933      	cbnz	r3, 84ba <nrfx_usbd_suspend+0x2a>
    bool suspended = false;
    84ac:	2400      	movs	r4, #0
	__asm__ volatile(
    84ae:	f385 8811 	msr	BASEPRI, r5
    84b2:	f3bf 8f6f 	isb	sy
}
    84b6:	4620      	mov	r0, r4
    84b8:	bd38      	pop	{r3, r4, r5, pc}
        usbd_ep_abort_all();
    84ba:	f7ff ff89 	bl	83d0 <usbd_ep_abort_all>
    return p_reg->EVENTCAUSE;
    84be:	4b0b      	ldr	r3, [pc, #44]	; (84ec <nrfx_usbd_suspend+0x5c>)
    84c0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        if (!(nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK))
    84c4:	f412 7200 	ands.w	r2, r2, #512	; 0x200
    84c8:	d1f0      	bne.n	84ac <nrfx_usbd_suspend+0x1c>
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_LowPower << USBD_LOWPOWER_LOWPOWER_Pos;
    84ca:	2101      	movs	r1, #1
    84cc:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    84d0:	f8d3 152c 	ldr.w	r1, [r3, #1324]	; 0x52c
    return p_reg->EVENTCAUSE;
    84d4:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
            if (nrf_usbd_eventcause_get(NRF_USBD) & NRF_USBD_EVENTCAUSE_RESUME_MASK)
    84d8:	0589      	lsls	r1, r1, #22
    p_reg->LOWPOWER = USBD_LOWPOWER_LOWPOWER_ForceNormal << USBD_LOWPOWER_LOWPOWER_Pos;
    84da:	bf42      	ittt	mi
    84dc:	f8c3 252c 	strmi.w	r2, [r3, #1324]	; 0x52c
    (void) p_reg->LOWPOWER;
    84e0:	f8d3 352c 	ldrmi.w	r3, [r3, #1324]	; 0x52c
    bool suspended = false;
    84e4:	4614      	movmi	r4, r2
}
    84e6:	e7e2      	b.n	84ae <nrfx_usbd_suspend+0x1e>
    84e8:	20001ab7 	.word	0x20001ab7
    84ec:	40027000 	.word	0x40027000

000084f0 <nrfx_usbd_ep_disable>:
{
    84f0:	b510      	push	{r4, lr}
    84f2:	4604      	mov	r4, r0
    usbd_ep_abort(ep);
    84f4:	f7ff fe7a 	bl	81ec <usbd_ep_abort>
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    84f8:	4a10      	ldr	r2, [pc, #64]	; (853c <nrfx_usbd_ep_disable+0x4c>)
    if (NRF_USBD_EPIN_CHECK(ep))
    84fa:	f014 0f80 	tst.w	r4, #128	; 0x80
    uint8_t epnr = NRF_USBD_EP_NR_GET(ep);
    84fe:	f004 000f 	and.w	r0, r4, #15
        p_reg->EPINEN &= ~(1UL << epnr);
    8502:	f04f 0301 	mov.w	r3, #1
    8506:	bf14      	ite	ne
    8508:	f8d2 1510 	ldrne.w	r1, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    850c:	f8d2 1514 	ldreq.w	r1, [r2, #1300]	; 0x514
        p_reg->EPINEN &= ~(1UL << epnr);
    8510:	fa03 f300 	lsl.w	r3, r3, r0
    8514:	ea6f 0303 	mvn.w	r3, r3
    8518:	bf15      	itete	ne
    851a:	400b      	andne	r3, r1
        p_reg->EPOUTEN &= ~(1UL << epnr);
    851c:	400b      	andeq	r3, r1
        p_reg->EPINEN &= ~(1UL << epnr);
    851e:	f8c2 3510 	strne.w	r3, [r2, #1296]	; 0x510
        p_reg->EPOUTEN &= ~(1UL << epnr);
    8522:	f8c2 3514 	streq.w	r3, [r2, #1300]	; 0x514
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    8526:	bf14      	ite	ne
    8528:	4b05      	ldrne	r3, [pc, #20]	; (8540 <nrfx_usbd_ep_disable+0x50>)
    852a:	4b06      	ldreq	r3, [pc, #24]	; (8544 <nrfx_usbd_ep_disable+0x54>)
    852c:	5c1a      	ldrb	r2, [r3, r0]
    852e:	2301      	movs	r3, #1
    8530:	4093      	lsls	r3, r2
    p_reg->INTENCLR = mask;
    8532:	4a02      	ldr	r2, [pc, #8]	; (853c <nrfx_usbd_ep_disable+0x4c>)
    8534:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
}
    8538:	bd10      	pop	{r4, pc}
    853a:	bf00      	nop
    853c:	40027000 	.word	0x40027000
    8540:	0000e318 	.word	0x0000e318
    8544:	0000e321 	.word	0x0000e321

00008548 <nrfx_usbd_ep_enable>:
{
    8548:	b570      	push	{r4, r5, r6, lr}
    return 1UL << (NRF_USBD_EPIN_CHECK(ep) ? epin_bitpos : epout_bitpos)[NRF_USBD_EP_NR_GET(ep)];
    854a:	b243      	sxtb	r3, r0
    854c:	2b00      	cmp	r3, #0
    854e:	4b23      	ldr	r3, [pc, #140]	; (85dc <nrfx_usbd_ep_enable+0x94>)
    8550:	4a23      	ldr	r2, [pc, #140]	; (85e0 <nrfx_usbd_ep_enable+0x98>)
    8552:	bfa8      	it	ge
    8554:	461a      	movge	r2, r3
    8556:	f000 030f 	and.w	r3, r0, #15
    855a:	f04f 0401 	mov.w	r4, #1
    855e:	5cd1      	ldrb	r1, [r2, r3]
    p_reg->INTENSET = mask;
    8560:	4a20      	ldr	r2, [pc, #128]	; (85e4 <nrfx_usbd_ep_enable+0x9c>)
    8562:	fa04 f101 	lsl.w	r1, r4, r1
{
    8566:	4605      	mov	r5, r0
    8568:	f8c2 1304 	str.w	r1, [r2, #772]	; 0x304
    if (NRF_USBD_EPIN_CHECK(ep))
    856c:	da0c      	bge.n	8588 <nrfx_usbd_ep_enable+0x40>
        return 0 != (p_reg->EPINEN & (1UL << epnr));
    856e:	f8d2 1510 	ldr.w	r1, [r2, #1296]	; 0x510
    8572:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    8574:	07c8      	lsls	r0, r1, #31
    8576:	d406      	bmi.n	8586 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPINEN |= 1UL << epnr;
    8578:	f8d2 0510 	ldr.w	r0, [r2, #1296]	; 0x510
    857c:	fa04 f303 	lsl.w	r3, r4, r3
    8580:	4303      	orrs	r3, r0
    8582:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
}
    8586:	bd70      	pop	{r4, r5, r6, pc}
        return 0 != (p_reg->EPOUTEN & (1UL << epnr));
    8588:	f8d2 1514 	ldr.w	r1, [r2, #1300]	; 0x514
    858c:	40d9      	lsrs	r1, r3
    if (nrf_usbd_ep_enable_check(NRF_USBD, ep))
    858e:	07c9      	lsls	r1, r1, #31
    8590:	d4f9      	bmi.n	8586 <nrfx_usbd_ep_enable+0x3e>
        p_reg->EPOUTEN |= 1UL << epnr;
    8592:	f8d2 6514 	ldr.w	r6, [r2, #1300]	; 0x514
    8596:	fa04 f103 	lsl.w	r1, r4, r3
    859a:	4331      	orrs	r1, r6
    859c:	f8c2 1514 	str.w	r1, [r2, #1300]	; 0x514
    if ((NRF_USBD_EP_NR_GET(ep) != 0) &&
    85a0:	2b00      	cmp	r3, #0
    85a2:	d0f0      	beq.n	8586 <nrfx_usbd_ep_enable+0x3e>
        NRF_USBD_EPOUT_CHECK(ep) &&
    85a4:	0703      	lsls	r3, r0, #28
    85a6:	d4ee      	bmi.n	8586 <nrfx_usbd_ep_enable+0x3e>
	__asm__ volatile(
    85a8:	f04f 0320 	mov.w	r3, #32
    85ac:	f3ef 8611 	mrs	r6, BASEPRI
    85b0:	f383 8812 	msr	BASEPRI_MAX, r3
    85b4:	f3bf 8f6f 	isb	sy
        nrfx_usbd_transfer_out_drop(ep);
    85b8:	f7ff fdee 	bl	8198 <nrfx_usbd_transfer_out_drop>
        m_ep_dma_waiting &= ~(1U << ep2bit(ep));
    85bc:	4628      	mov	r0, r5
    85be:	f002 feb4 	bl	b32a <ep2bit>
    85c2:	4a09      	ldr	r2, [pc, #36]	; (85e8 <nrfx_usbd_ep_enable+0xa0>)
    85c4:	6813      	ldr	r3, [r2, #0]
    85c6:	fa04 f000 	lsl.w	r0, r4, r0
    85ca:	ea23 0000 	bic.w	r0, r3, r0
    85ce:	6010      	str	r0, [r2, #0]
	__asm__ volatile(
    85d0:	f386 8811 	msr	BASEPRI, r6
    85d4:	f3bf 8f6f 	isb	sy
}
    85d8:	e7d5      	b.n	8586 <nrfx_usbd_ep_enable+0x3e>
    85da:	bf00      	nop
    85dc:	0000e321 	.word	0x0000e321
    85e0:	0000e318 	.word	0x0000e318
    85e4:	40027000 	.word	0x40027000
    85e8:	200017c8 	.word	0x200017c8

000085ec <nrfx_usbd_ep_stall_clear>:
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    85ec:	0603      	lsls	r3, r0, #24
{
    85ee:	b510      	push	{r4, lr}
    85f0:	4604      	mov	r4, r0
    if (NRF_USBD_EPOUT_CHECK(ep) && nrfx_usbd_ep_stall_check(ep))
    85f2:	d405      	bmi.n	8600 <nrfx_usbd_ep_stall_clear+0x14>
    85f4:	f7ff fd3a 	bl	806c <nrfx_usbd_ep_stall_check>
    85f8:	b110      	cbz	r0, 8600 <nrfx_usbd_ep_stall_clear+0x14>
        nrfx_usbd_transfer_out_drop(ep);
    85fa:	4620      	mov	r0, r4
    85fc:	f7ff fdcc 	bl	8198 <nrfx_usbd_transfer_out_drop>
    p_reg->EPSTALL = (USBD_EPSTALL_STALL_UnStall << USBD_EPSTALL_STALL_Pos) | ep;
    8600:	4b01      	ldr	r3, [pc, #4]	; (8608 <nrfx_usbd_ep_stall_clear+0x1c>)
    8602:	f8c3 4518 	str.w	r4, [r3, #1304]	; 0x518
}
    8606:	bd10      	pop	{r4, pc}
    8608:	40027000 	.word	0x40027000

0000860c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
    860c:	b510      	push	{r4, lr}
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    860e:	4c11      	ldr	r4, [pc, #68]	; (8654 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    8610:	4a11      	ldr	r2, [pc, #68]	; (8658 <_DoInit+0x4c>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
    8612:	4912      	ldr	r1, [pc, #72]	; (865c <_DoInit+0x50>)
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    8614:	2303      	movs	r3, #3
    8616:	6123      	str	r3, [r4, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    8618:	6163      	str	r3, [r4, #20]
  p->aUp[0].pBuffer       = _acUpBuffer;
    861a:	4b11      	ldr	r3, [pc, #68]	; (8660 <_DoInit+0x54>)
  p->aUp[0].sName         = "Terminal";
    861c:	61a2      	str	r2, [r4, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
    861e:	61e3      	str	r3, [r4, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
    8620:	f44f 6380 	mov.w	r3, #1024	; 0x400
    8624:	6223      	str	r3, [r4, #32]
  p->aUp[0].RdOff         = 0u;
    8626:	2300      	movs	r3, #0
    8628:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    862a:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    862c:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].sName         = "Terminal";
    862e:	6622      	str	r2, [r4, #96]	; 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
    8630:	4a0c      	ldr	r2, [pc, #48]	; (8664 <_DoInit+0x58>)
    8632:	6662      	str	r2, [r4, #100]	; 0x64
  STRCPY((char*)&p->acID[7], "RTT");
    8634:	1de0      	adds	r0, r4, #7
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
    8636:	2210      	movs	r2, #16
    8638:	66a2      	str	r2, [r4, #104]	; 0x68
  p->aDown[0].RdOff         = 0u;
    863a:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    863c:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    863e:	6763      	str	r3, [r4, #116]	; 0x74
  STRCPY((char*)&p->acID[7], "RTT");
    8640:	f002 fa86 	bl	ab50 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  STRCPY((char*)&p->acID[0], "SEGGER");
    8644:	4908      	ldr	r1, [pc, #32]	; (8668 <_DoInit+0x5c>)
    8646:	4620      	mov	r0, r4
    8648:	f002 fa82 	bl	ab50 <strcpy>
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
  p->acID[6] = ' ';
    864c:	2320      	movs	r3, #32
    864e:	71a3      	strb	r3, [r4, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
}
    8650:	bd10      	pop	{r4, pc}
    8652:	bf00      	nop
    8654:	200019a0 	.word	0x200019a0
    8658:	0000e32a 	.word	0x0000e32a
    865c:	0000e333 	.word	0x0000e333
    8660:	20001acb 	.word	0x20001acb
    8664:	20001abb 	.word	0x20001abb
    8668:	0000e337 	.word	0x0000e337

0000866c <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    866c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  RdOff = pRing->RdOff;
    8670:	4f23      	ldr	r7, [pc, #140]	; (8700 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    8672:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    8676:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    8678:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    867c:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    867e:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    8680:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    8682:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    8684:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    8686:	d834      	bhi.n	86f2 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    8688:	f8d2 a020 	ldr.w	sl, [r2, #32]
    868c:	ebaa 0905 	sub.w	r9, sl, r5
    8690:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    8694:	4294      	cmp	r4, r2
    8696:	d811      	bhi.n	86bc <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    8698:	f04f 0918 	mov.w	r9, #24
    869c:	fb06 9309 	mla	r3, r6, r9, r9
    86a0:	443b      	add	r3, r7
      memcpy((void*)pDst, pData, NumBytes);
    86a2:	4622      	mov	r2, r4
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    86a4:	6858      	ldr	r0, [r3, #4]
      memcpy((void*)pDst, pData, NumBytes);
    86a6:	4641      	mov	r1, r8
    86a8:	4428      	add	r0, r5
    86aa:	f002 fa77 	bl	ab9c <memcpy>
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = WrOff + NumBytes;
    86ae:	fb09 7606 	mla	r6, r9, r6, r7
    86b2:	442c      	add	r4, r5
      if (NumBytes) {
        pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
        memcpy((void*)pDst, pData + Rem, NumBytes);
      }
      RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
      pRing->WrOff = NumBytes;
    86b4:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    86b6:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    86b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    86bc:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    86be:	429c      	cmp	r4, r3
    86c0:	d81b      	bhi.n	86fa <SEGGER_RTT_WriteSkipNoLock+0x8e>
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    86c2:	fb00 bb0b 	mla	fp, r0, fp, fp
    86c6:	44bb      	add	fp, r7
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    86c8:	464a      	mov	r2, r9
      pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    86ca:	f8db 0004 	ldr.w	r0, [fp, #4]
    86ce:	442c      	add	r4, r5
      memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
    86d0:	4428      	add	r0, r5
    86d2:	f002 fa63 	bl	ab9c <memcpy>
      if (NumBytes) {
    86d6:	ebb4 040a 	subs.w	r4, r4, sl
    86da:	d006      	beq.n	86ea <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy((void*)pDst, pData + Rem, NumBytes);
    86dc:	f8db 0004 	ldr.w	r0, [fp, #4]
    86e0:	4622      	mov	r2, r4
    86e2:	eb08 0109 	add.w	r1, r8, r9
    86e6:	f002 fa59 	bl	ab9c <memcpy>
      pRing->WrOff = NumBytes;
    86ea:	2018      	movs	r0, #24
    86ec:	fb00 7606 	mla	r6, r0, r6, r7
    86f0:	e7e0      	b.n	86b4 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    86f2:	3b01      	subs	r3, #1
    86f4:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    86f6:	42a3      	cmp	r3, r4
    86f8:	d2ce      	bcs.n	8698 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    86fa:	2000      	movs	r0, #0
    86fc:	e7dc      	b.n	86b8 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    86fe:	bf00      	nop
    8700:	200019a0 	.word	0x200019a0

00008704 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    8704:	b570      	push	{r4, r5, r6, lr}
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
    8706:	4b16      	ldr	r3, [pc, #88]	; (8760 <SEGGER_RTT_WriteNoLock+0x5c>)
    8708:	2418      	movs	r4, #24
    870a:	fb00 4504 	mla	r5, r0, r4, r4
    870e:	441d      	add	r5, r3
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
    8710:	fb04 3300 	mla	r3, r4, r0, r3
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    8714:	4616      	mov	r6, r2
  switch (pRing->Flags) {
    8716:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    8718:	2c01      	cmp	r4, #1
    871a:	d00e      	beq.n	873a <SEGGER_RTT_WriteNoLock+0x36>
    871c:	2c02      	cmp	r4, #2
    871e:	d018      	beq.n	8752 <SEGGER_RTT_WriteNoLock+0x4e>
    8720:	b9e4      	cbnz	r4, 875c <SEGGER_RTT_WriteNoLock+0x58>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
    8722:	4628      	mov	r0, r5
    8724:	f002 fe55 	bl	b3d2 <_GetAvailWriteSpace>
    if (Avail < NumBytes) {
    8728:	4286      	cmp	r6, r0
    872a:	d804      	bhi.n	8736 <SEGGER_RTT_WriteNoLock+0x32>
      Status = 0u;
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    872c:	4632      	mov	r2, r6
    872e:	4628      	mov	r0, r5
    8730:	f002 fe58 	bl	b3e4 <_WriteNoCheck>
    8734:	4634      	mov	r4, r6
  }
  //
  // Finish up.
  //
  return Status;
}
    8736:	4620      	mov	r0, r4
    8738:	bd70      	pop	{r4, r5, r6, pc}
    Avail = _GetAvailWriteSpace(pRing);
    873a:	4628      	mov	r0, r5
    873c:	f002 fe49 	bl	b3d2 <_GetAvailWriteSpace>
    Status = Avail < NumBytes ? Avail : NumBytes;
    8740:	4286      	cmp	r6, r0
    8742:	4634      	mov	r4, r6
    8744:	bf28      	it	cs
    8746:	4604      	movcs	r4, r0
    _WriteNoCheck(pRing, pData, Status);
    8748:	4622      	mov	r2, r4
    874a:	4628      	mov	r0, r5
    874c:	f002 fe4a 	bl	b3e4 <_WriteNoCheck>
    break;
    8750:	e7f1      	b.n	8736 <SEGGER_RTT_WriteNoLock+0x32>
    Status = _WriteBlocking(pRing, pData, NumBytes);
    8752:	4628      	mov	r0, r5
}
    8754:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    Status = _WriteBlocking(pRing, pData, NumBytes);
    8758:	f002 be60 	b.w	b41c <_WriteBlocking>
  switch (pRing->Flags) {
    875c:	2400      	movs	r4, #0
  return Status;
    875e:	e7ea      	b.n	8736 <SEGGER_RTT_WriteNoLock+0x32>
    8760:	200019a0 	.word	0x200019a0

00008764 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
  v = pRing->RdOff;
    8764:	4b03      	ldr	r3, [pc, #12]	; (8774 <SEGGER_RTT_HasDataUp+0x10>)
    8766:	2218      	movs	r2, #24
    8768:	fb02 3300 	mla	r3, r2, r0, r3
    876c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    876e:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    8770:	1a80      	subs	r0, r0, r2
    8772:	4770      	bx	lr
    8774:	200019a0 	.word	0x200019a0

00008778 <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    8778:	4b0e      	ldr	r3, [pc, #56]	; (87b4 <z_sys_init_run_level+0x3c>)
{
    877a:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    877c:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    8780:	3001      	adds	r0, #1
    8782:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    8786:	42a6      	cmp	r6, r4
    8788:	d800      	bhi.n	878c <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    878a:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    878c:	e9d4 3500 	ldrd	r3, r5, [r4]
    8790:	4628      	mov	r0, r5
    8792:	4798      	blx	r3
		if (dev != NULL) {
    8794:	b165      	cbz	r5, 87b0 <z_sys_init_run_level+0x38>
				dev->state->init_res = rc;
    8796:	68eb      	ldr	r3, [r5, #12]
			if (rc != 0) {
    8798:	b130      	cbz	r0, 87a8 <z_sys_init_run_level+0x30>
				if (rc < 0) {
    879a:	2800      	cmp	r0, #0
    879c:	bfb8      	it	lt
    879e:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    87a0:	28ff      	cmp	r0, #255	; 0xff
    87a2:	bfa8      	it	ge
    87a4:	20ff      	movge	r0, #255	; 0xff
    87a6:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    87a8:	785a      	ldrb	r2, [r3, #1]
    87aa:	f042 0201 	orr.w	r2, r2, #1
    87ae:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    87b0:	3408      	adds	r4, #8
    87b2:	e7e8      	b.n	8786 <z_sys_init_run_level+0xe>
    87b4:	0000c14c 	.word	0x0000c14c

000087b8 <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    87b8:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    87ba:	4605      	mov	r5, r0
    87bc:	b910      	cbnz	r0, 87c4 <z_impl_device_get_binding+0xc>
		return NULL;
    87be:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    87c0:	4620      	mov	r0, r4
    87c2:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    87c4:	7803      	ldrb	r3, [r0, #0]
    87c6:	2b00      	cmp	r3, #0
    87c8:	d0f9      	beq.n	87be <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    87ca:	4c0e      	ldr	r4, [pc, #56]	; (8804 <z_impl_device_get_binding+0x4c>)
    87cc:	4e0e      	ldr	r6, [pc, #56]	; (8808 <z_impl_device_get_binding+0x50>)
    87ce:	42b4      	cmp	r4, r6
    87d0:	d108      	bne.n	87e4 <z_impl_device_get_binding+0x2c>
	for (dev = __device_start; dev != __device_end; dev++) {
    87d2:	4c0c      	ldr	r4, [pc, #48]	; (8804 <z_impl_device_get_binding+0x4c>)
    87d4:	42b4      	cmp	r4, r6
    87d6:	d0f2      	beq.n	87be <z_impl_device_get_binding+0x6>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    87d8:	4620      	mov	r0, r4
    87da:	f002 fe50 	bl	b47e <z_device_is_ready>
    87de:	b950      	cbnz	r0, 87f6 <z_impl_device_get_binding+0x3e>
	for (dev = __device_start; dev != __device_end; dev++) {
    87e0:	3418      	adds	r4, #24
    87e2:	e7f7      	b.n	87d4 <z_impl_device_get_binding+0x1c>
		if (z_device_is_ready(dev) && (dev->name == name)) {
    87e4:	4620      	mov	r0, r4
    87e6:	f002 fe4a 	bl	b47e <z_device_is_ready>
    87ea:	b110      	cbz	r0, 87f2 <z_impl_device_get_binding+0x3a>
    87ec:	6823      	ldr	r3, [r4, #0]
    87ee:	42ab      	cmp	r3, r5
    87f0:	d0e6      	beq.n	87c0 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    87f2:	3418      	adds	r4, #24
    87f4:	e7eb      	b.n	87ce <z_impl_device_get_binding+0x16>
		if (z_device_is_ready(dev) && (strcmp(name, dev->name) == 0)) {
    87f6:	6821      	ldr	r1, [r4, #0]
    87f8:	4628      	mov	r0, r5
    87fa:	f002 f9c3 	bl	ab84 <strcmp>
    87fe:	2800      	cmp	r0, #0
    8800:	d1ee      	bne.n	87e0 <z_impl_device_get_binding+0x28>
    8802:	e7dd      	b.n	87c0 <z_impl_device_get_binding+0x8>
    8804:	0000bbc8 	.word	0x0000bbc8
    8808:	0000bc70 	.word	0x0000bc70

0000880c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    880c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8810:	b086      	sub	sp, #24
    8812:	4605      	mov	r5, r0
    8814:	af00      	add	r7, sp, #0
    8816:	460e      	mov	r6, r1
	__asm__ volatile(
    8818:	f04f 0320 	mov.w	r3, #32
    881c:	f3ef 8811 	mrs	r8, BASEPRI
    8820:	f383 8812 	msr	BASEPRI_MAX, r3
    8824:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    8828:	f000 fff2 	bl	9810 <z_impl_z_current_get>
    882c:	2d04      	cmp	r5, #4
    882e:	bf96      	itet	ls
    8830:	4b2c      	ldrls	r3, [pc, #176]	; (88e4 <z_fatal_error+0xd8>)
    8832:	4b2d      	ldrhi	r3, [pc, #180]	; (88e8 <z_fatal_error+0xdc>)
    8834:	f853 3025 	ldrls.w	r3, [r3, r5, lsl #2]
			k_current_get() : NULL;

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
    8838:	492c      	ldr	r1, [pc, #176]	; (88ec <z_fatal_error+0xe0>)
    883a:	46e9      	mov	r9, sp
    883c:	b08a      	sub	sp, #40	; 0x28
    883e:	466a      	mov	r2, sp
    8840:	f04f 0a00 	mov.w	sl, #0
    8844:	61d3      	str	r3, [r2, #28]
    8846:	2303      	movs	r3, #3
    8848:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
    884c:	4b28      	ldr	r3, [pc, #160]	; (88f0 <z_fatal_error+0xe4>)
    884e:	f8c2 a020 	str.w	sl, [r2, #32]
    8852:	e9c2 1505 	strd	r1, r5, [r2, #20]
    8856:	4604      	mov	r4, r0
    8858:	f842 3f10 	str.w	r3, [r2, #16]!
    885c:	4825      	ldr	r0, [pc, #148]	; (88f4 <z_fatal_error+0xe8>)
    885e:	4653      	mov	r3, sl
    8860:	f44f 5129 	mov.w	r1, #10816	; 0x2a40
    8864:	f002 f8d5 	bl	aa12 <z_impl_z_log_msg2_static_create>
    8868:	46cd      	mov	sp, r9
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
    886a:	b17e      	cbz	r6, 888c <z_fatal_error+0x80>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
    886c:	69f3      	ldr	r3, [r6, #28]
    886e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    8872:	b15b      	cbz	r3, 888c <z_fatal_error+0x80>
		LOG_ERR("Fault during interrupt handling\n");
    8874:	4b20      	ldr	r3, [pc, #128]	; (88f8 <z_fatal_error+0xec>)
    8876:	617b      	str	r3, [r7, #20]
    8878:	2302      	movs	r3, #2
    887a:	613b      	str	r3, [r7, #16]
    887c:	481d      	ldr	r0, [pc, #116]	; (88f4 <z_fatal_error+0xe8>)
    887e:	4653      	mov	r3, sl
    8880:	f107 0210 	add.w	r2, r7, #16
    8884:	f44f 5182 	mov.w	r1, #4160	; 0x1040
    8888:	f002 f8c3 	bl	aa12 <z_impl_z_log_msg2_static_create>
	const char *thread_name = (thread != NULL) ? k_thread_name_get(thread) : NULL;
    888c:	b12c      	cbz	r4, 889a <z_fatal_error+0x8e>
    888e:	4620      	mov	r0, r4
    8890:	f002 fe35 	bl	b4fe <k_thread_name_get>
	if ((thread_name == NULL) || (thread_name[0] == '\0')) {
    8894:	b108      	cbz	r0, 889a <z_fatal_error+0x8e>
    8896:	7803      	ldrb	r3, [r0, #0]
    8898:	b903      	cbnz	r3, 889c <z_fatal_error+0x90>
		thread_name = "unknown";
    889a:	4818      	ldr	r0, [pc, #96]	; (88fc <z_fatal_error+0xf0>)
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
    889c:	4b18      	ldr	r3, [pc, #96]	; (8900 <z_fatal_error+0xf4>)
    889e:	46e9      	mov	r9, sp
    88a0:	b08a      	sub	sp, #40	; 0x28
    88a2:	466a      	mov	r2, sp
    88a4:	e9c2 3405 	strd	r3, r4, [r2, #20]
    88a8:	2303      	movs	r3, #3
    88aa:	f882 3020 	strb.w	r3, [r2, #32]
    88ae:	4b15      	ldr	r3, [pc, #84]	; (8904 <z_fatal_error+0xf8>)
    88b0:	61d0      	str	r0, [r2, #28]
    88b2:	f842 3f10 	str.w	r3, [r2, #16]!
    88b6:	2300      	movs	r3, #0
    88b8:	480e      	ldr	r0, [pc, #56]	; (88f4 <z_fatal_error+0xe8>)
    88ba:	f44f 5109 	mov.w	r1, #8768	; 0x2240
    88be:	f002 f8a8 	bl	aa12 <z_impl_z_log_msg2_static_create>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    88c2:	4631      	mov	r1, r6
    88c4:	46cd      	mov	sp, r9
    88c6:	4628      	mov	r0, r5
    88c8:	f7fd f974 	bl	5bb4 <k_sys_fatal_error_handler>
	__asm__ volatile(
    88cc:	f388 8811 	msr	BASEPRI, r8
    88d0:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    88d4:	4620      	mov	r0, r4
    88d6:	f7fa fe65 	bl	35a4 <z_impl_k_thread_abort>
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    88da:	3718      	adds	r7, #24
    88dc:	46bd      	mov	sp, r7
    88de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    88e2:	bf00      	nop
    88e4:	0000c164 	.word	0x0000c164
    88e8:	0000e33e 	.word	0x0000e33e
    88ec:	0000e354 	.word	0x0000e354
    88f0:	01000005 	.word	0x01000005
    88f4:	0000be00 	.word	0x0000be00
    88f8:	0000e37c 	.word	0x0000e37c
    88fc:	0000e34c 	.word	0x0000e34c
    8900:	0000e39d 	.word	0x0000e39d
    8904:	01000004 	.word	0x01000004

00008908 <bg_thread_main>:
 * This routine completes kernel initialization by invoking the remaining
 * init functions, then invokes application's main() routine.
 */
__boot_func
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
    8908:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
    890a:	4b0a      	ldr	r3, [pc, #40]	; (8934 <bg_thread_main+0x2c>)
    890c:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    890e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    8910:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    8912:	f7ff ff31 	bl	8778 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
    8916:	f001 f9ef 	bl	9cf8 <boot_banner>
	void z_cpp_init_static(void);
	z_cpp_init_static();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    891a:	2003      	movs	r0, #3
    891c:	f7ff ff2c 	bl	8778 <z_sys_init_run_level>

	z_init_static_threads();
    8920:	f000 f968 	bl	8bf4 <z_init_static_threads>
	z_mem_manage_boot_finish();
#endif /* CONFIG_MMU */

	extern void main(void);

	main();
    8924:	f7f7 fda4 	bl	470 <main>

	/* Mark nonessential since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    8928:	4a03      	ldr	r2, [pc, #12]	; (8938 <bg_thread_main+0x30>)
    892a:	7b13      	ldrb	r3, [r2, #12]
    892c:	f023 0301 	bic.w	r3, r3, #1
    8930:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    8932:	bd08      	pop	{r3, pc}
    8934:	20001ecb 	.word	0x20001ecb
    8938:	200009d0 	.word	0x200009d0

0000893c <z_bss_zero>:
{
    893c:	b508      	push	{r3, lr}
	z_early_memset(__bss_start, 0, __bss_end - __bss_start);
    893e:	4803      	ldr	r0, [pc, #12]	; (894c <z_bss_zero+0x10>)
    8940:	4a03      	ldr	r2, [pc, #12]	; (8950 <z_bss_zero+0x14>)
    8942:	2100      	movs	r1, #0
    8944:	1a12      	subs	r2, r2, r0
    8946:	f002 fda4 	bl	b492 <z_early_memset>
}
    894a:	bd08      	pop	{r3, pc}
    894c:	20000248 	.word	0x20000248
    8950:	20001ecc 	.word	0x20001ecc

00008954 <z_init_cpu>:
	thread->base.is_idle = 1U;
#endif
}

void z_init_cpu(int id)
{
    8954:	b570      	push	{r4, r5, r6, lr}
	z_setup_new_thread(thread, stack,
    8956:	2300      	movs	r3, #0
{
    8958:	b086      	sub	sp, #24
	z_setup_new_thread(thread, stack,
    895a:	2201      	movs	r2, #1
    895c:	e9cd 2304 	strd	r2, r3, [sp, #16]
	struct k_thread *thread = &z_idle_threads[i];
    8960:	4e13      	ldr	r6, [pc, #76]	; (89b0 <z_init_cpu+0x5c>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    8962:	4d14      	ldr	r5, [pc, #80]	; (89b4 <z_init_cpu+0x60>)
	z_setup_new_thread(thread, stack,
    8964:	9301      	str	r3, [sp, #4]
    8966:	220f      	movs	r2, #15
    8968:	e9cd 3202 	strd	r3, r2, [sp, #8]
    896c:	4912      	ldr	r1, [pc, #72]	; (89b8 <z_init_cpu+0x64>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    896e:	2318      	movs	r3, #24
    8970:	fb03 5500 	mla	r5, r3, r0, r5
	struct k_thread *thread = &z_idle_threads[i];
    8974:	eb06 16c0 	add.w	r6, r6, r0, lsl #7
{
    8978:	4604      	mov	r4, r0
	z_setup_new_thread(thread, stack,
    897a:	f44f 7090 	mov.w	r0, #288	; 0x120
    897e:	fb00 1104 	mla	r1, r0, r4, r1
    8982:	4b0e      	ldr	r3, [pc, #56]	; (89bc <z_init_cpu+0x68>)
    8984:	9500      	str	r5, [sp, #0]
    8986:	f44f 7280 	mov.w	r2, #256	; 0x100
    898a:	4630      	mov	r0, r6
    898c:	f000 f8d4 	bl	8b38 <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    8990:	7b73      	ldrb	r3, [r6, #13]
	init_idle_thread(id);
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
	_kernel.cpus[id].id = id;
	_kernel.cpus[id].irq_stack =
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    8992:	480b      	ldr	r0, [pc, #44]	; (89c0 <z_init_cpu+0x6c>)
	_kernel.cpus[id].id = id;
    8994:	752c      	strb	r4, [r5, #20]
    8996:	f023 0304 	bic.w	r3, r3, #4
    899a:	7373      	strb	r3, [r6, #13]
		(Z_KERNEL_STACK_BUFFER(z_interrupt_stacks[id]) +
    899c:	f44f 6302 	mov.w	r3, #2080	; 0x820
    89a0:	fb03 0404 	mla	r4, r3, r4, r0
    89a4:	441c      	add	r4, r3
	_kernel.cpus[id].idle_thread = &z_idle_threads[id];
    89a6:	60ee      	str	r6, [r5, #12]
	_kernel.cpus[id].irq_stack =
    89a8:	606c      	str	r4, [r5, #4]
		 K_KERNEL_STACK_SIZEOF(z_interrupt_stacks[id]));
#ifdef CONFIG_SCHED_THREAD_USAGE_ALL
	_kernel.cpus[id].usage.track_usage =
		CONFIG_SCHED_THREAD_USAGE_AUTO_ENABLE;
#endif
}
    89aa:	b006      	add	sp, #24
    89ac:	bd70      	pop	{r4, r5, r6, pc}
    89ae:	bf00      	nop
    89b0:	20000950 	.word	0x20000950
    89b4:	20001a48 	.word	0x20001a48
    89b8:	20002c60 	.word	0x20002c60
    89bc:	00008cad 	.word	0x00008cad
    89c0:	20002d80 	.word	0x20002d80

000089c4 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    89c4:	b580      	push	{r7, lr}
 * pointer) register, and switched to automatically when taking an exception.
 *
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    89c6:	4b2d      	ldr	r3, [pc, #180]	; (8a7c <z_cstart+0xb8>)
    89c8:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    89ca:	f383 8808 	msr	MSP, r3
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    89ce:	4d2c      	ldr	r5, [pc, #176]	; (8a80 <z_cstart+0xbc>)
	k_thread_system_pool_assign(dummy_thread);
#else
	dummy_thread->resource_pool = NULL;
#endif

	_current_cpu->current = dummy_thread;
    89d0:	4e2c      	ldr	r6, [pc, #176]	; (8a84 <z_cstart+0xc0>)
    89d2:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    89d4:	4f2c      	ldr	r7, [pc, #176]	; (8a88 <z_cstart+0xc4>)
    89d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    89da:	2400      	movs	r4, #0
    89dc:	616b      	str	r3, [r5, #20]
    89de:	23e0      	movs	r3, #224	; 0xe0
    89e0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    89e4:	77ec      	strb	r4, [r5, #31]
    89e6:	762c      	strb	r4, [r5, #24]
    89e8:	766c      	strb	r4, [r5, #25]
    89ea:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    89ec:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    89ee:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    89f2:	626b      	str	r3, [r5, #36]	; 0x24
    89f4:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    89f8:	f7fa fd48 	bl	348c <z_arm_fault_init>
	z_arm_cpu_idle_init();
    89fc:	f7fa f8d4 	bl	2ba8 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    8a00:	f04f 33ff 	mov.w	r3, #4294967295
    8a04:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    8a06:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    8a08:	f7fa fe9a 	bl	3740 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    8a0c:	f7fa fde0 	bl	35d0 <z_arm_configure_static_mpu_regions>
	gcov_static_init();

	/* perform any architecture-specific initialization */
	arch_kernel_init();

	LOG_CORE_INIT();
    8a10:	f7f8 fed6 	bl	17c0 <log_core_init>
	dummy_thread->base.user_options = K_ESSENTIAL;
    8a14:	f240 1301 	movw	r3, #257	; 0x101
    8a18:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    8a1c:	ab06      	add	r3, sp, #24
    8a1e:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    8a20:	e9cd 441f 	strd	r4, r4, [sp, #124]	; 0x7c
	dummy_thread->resource_pool = NULL;
    8a24:	9422      	str	r4, [sp, #136]	; 0x88
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    8a26:	f002 fd29 	bl	b47c <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    8a2a:	4620      	mov	r0, r4
    8a2c:	f7ff fea4 	bl	8778 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    8a30:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    8a32:	4d16      	ldr	r5, [pc, #88]	; (8a8c <z_cstart+0xc8>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    8a34:	f7ff fea0 	bl	8778 <z_sys_init_run_level>
	z_sched_init();
    8a38:	f000 fe3c 	bl	96b4 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    8a3c:	4b14      	ldr	r3, [pc, #80]	; (8a90 <z_cstart+0xcc>)
	_kernel.ready_q.cache = &z_main_thread;
    8a3e:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    8a40:	9305      	str	r3, [sp, #20]
    8a42:	2301      	movs	r3, #1
    8a44:	4913      	ldr	r1, [pc, #76]	; (8a94 <z_cstart+0xd0>)
    8a46:	9400      	str	r4, [sp, #0]
    8a48:	e9cd 4303 	strd	r4, r3, [sp, #12]
    8a4c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8a50:	463b      	mov	r3, r7
    8a52:	e9cd 4401 	strd	r4, r4, [sp, #4]
    8a56:	4628      	mov	r0, r5
    8a58:	f000 f86e 	bl	8b38 <z_setup_new_thread>
    8a5c:	7b6a      	ldrb	r2, [r5, #13]
    8a5e:	4606      	mov	r6, r0
    8a60:	f022 0204 	bic.w	r2, r2, #4
	z_ready_thread(&z_main_thread);
    8a64:	4628      	mov	r0, r5
    8a66:	736a      	strb	r2, [r5, #13]
    8a68:	f002 fea0 	bl	b7ac <z_ready_thread>
	z_init_cpu(0);
    8a6c:	4620      	mov	r0, r4
    8a6e:	f7ff ff71 	bl	8954 <z_init_cpu>
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    8a72:	463a      	mov	r2, r7
    8a74:	4631      	mov	r1, r6
    8a76:	4628      	mov	r0, r5
    8a78:	f7fa fa12 	bl	2ea0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    8a7c:	200035a0 	.word	0x200035a0
    8a80:	e000ed00 	.word	0xe000ed00
    8a84:	20001a48 	.word	0x20001a48
    8a88:	00008909 	.word	0x00008909
    8a8c:	200009d0 	.word	0x200009d0
    8a90:	0000e3ff 	.word	0x0000e3ff
    8a94:	20002840 	.word	0x20002840

00008a98 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return 0 on success, fails otherwise.
 */
static int init_mem_slab_module(const struct device *dev)
{
    8a98:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    8a9a:	4b0e      	ldr	r3, [pc, #56]	; (8ad4 <init_mem_slab_module+0x3c>)
    8a9c:	4c0e      	ldr	r4, [pc, #56]	; (8ad8 <init_mem_slab_module+0x40>)
    8a9e:	42a3      	cmp	r3, r4
    8aa0:	d301      	bcc.n	8aa6 <init_mem_slab_module+0xe>
			goto out;
		}
		z_object_init(slab);
	}

out:
    8aa2:	2000      	movs	r0, #0
	return rc;
}
    8aa4:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    8aa6:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
    8aaa:	ea41 0200 	orr.w	r2, r1, r0
    8aae:	f012 0203 	ands.w	r2, r2, #3
    8ab2:	d10b      	bne.n	8acc <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
    8ab4:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
    8ab6:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
    8ab8:	42aa      	cmp	r2, r5
    8aba:	d101      	bne.n	8ac0 <init_mem_slab_module+0x28>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    8abc:	331c      	adds	r3, #28
    8abe:	e7ee      	b.n	8a9e <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
    8ac0:	695e      	ldr	r6, [r3, #20]
    8ac2:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    8ac4:	3201      	adds	r2, #1
		slab->free_list = p;
    8ac6:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
    8ac8:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
    8aca:	e7f5      	b.n	8ab8 <init_mem_slab_module+0x20>
	return rc;
    8acc:	f06f 0015 	mvn.w	r0, #21
    8ad0:	e7e8      	b.n	8aa4 <init_mem_slab_module+0xc>
    8ad2:	bf00      	nop
    8ad4:	20000150 	.word	0x20000150
    8ad8:	2000016c 	.word	0x2000016c

00008adc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    8adc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8ade:	460c      	mov	r4, r1
	__asm__ volatile(
    8ae0:	f04f 0520 	mov.w	r5, #32
    8ae4:	f3ef 8111 	mrs	r1, BASEPRI
    8ae8:	f385 8812 	msr	BASEPRI_MAX, r5
    8aec:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    8af0:	6945      	ldr	r5, [r0, #20]
    8af2:	b15d      	cbz	r5, 8b0c <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
    8af4:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
    8af6:	682b      	ldr	r3, [r5, #0]
    8af8:	6143      	str	r3, [r0, #20]
		slab->num_used++;
    8afa:	6983      	ldr	r3, [r0, #24]
    8afc:	3301      	adds	r3, #1
    8afe:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    8b00:	2000      	movs	r0, #0
	__asm__ volatile(
    8b02:	f381 8811 	msr	BASEPRI, r1
    8b06:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    8b0a:	e011      	b.n	8b30 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    8b0c:	ea52 0c03 	orrs.w	ip, r2, r3
    8b10:	d103      	bne.n	8b1a <k_mem_slab_alloc+0x3e>
		*mem = NULL;
    8b12:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
    8b14:	f06f 000b 	mvn.w	r0, #11
    8b18:	e7f3      	b.n	8b02 <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    8b1a:	e9cd 2300 	strd	r2, r3, [sp]
    8b1e:	4602      	mov	r2, r0
    8b20:	3008      	adds	r0, #8
    8b22:	f000 fd1d 	bl	9560 <z_pend_curr>
		if (result == 0) {
    8b26:	b918      	cbnz	r0, 8b30 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
    8b28:	4b02      	ldr	r3, [pc, #8]	; (8b34 <k_mem_slab_alloc+0x58>)
    8b2a:	689b      	ldr	r3, [r3, #8]
    8b2c:	695b      	ldr	r3, [r3, #20]
    8b2e:	6023      	str	r3, [r4, #0]
}
    8b30:	b003      	add	sp, #12
    8b32:	bd30      	pop	{r4, r5, pc}
    8b34:	20001a48 	.word	0x20001a48

00008b38 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    8b38:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    8b3c:	9e0e      	ldr	r6, [sp, #56]	; 0x38
    8b3e:	7306      	strb	r6, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
    8b40:	2604      	movs	r6, #4
    8b42:	7346      	strb	r6, [r0, #13]

	thread_base->prio = priority;
    8b44:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    8b46:	7386      	strb	r6, [r0, #14]
	SYS_DLIST_FOR_EACH_CONTAINER(&((wq)->waitq), thread_ptr, \
				     base.qnode_dlist)

static inline void z_waitq_init(_wait_q_t *w)
{
	sys_dlist_init(&w->waitq);
    8b48:	f100 0558 	add.w	r5, r0, #88	; 0x58
{
    8b4c:	460f      	mov	r7, r1
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    8b4e:	1dd6      	adds	r6, r2, #7
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
	list->tail = (sys_dnode_t *)list;
    8b50:	e9c0 5516 	strd	r5, r5, [r0, #88]	; 0x58
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8b54:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->pended_on = NULL;
    8b56:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    8b58:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    8b5c:	3720      	adds	r7, #32
 */

static inline void sys_dnode_init(sys_dnode_t *node)
{
	node->next = NULL;
	node->prev = NULL;
    8b5e:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
    8b62:	e9c0 7619 	strd	r7, r6, [r0, #100]	; 0x64
	thread_base->pended_on = NULL;
    8b66:	6085      	str	r5, [r0, #8]

	thread_base->sched_locked = 0U;
    8b68:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
    8b6a:	66c5      	str	r5, [r0, #108]	; 0x6c
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    8b6c:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8b70:	9202      	str	r2, [sp, #8]
    8b72:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    8b74:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
    8b76:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8b78:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    8b7a:	9200      	str	r2, [sp, #0]
    8b7c:	4642      	mov	r2, r8
{
    8b7e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    8b80:	f7fa f95c 	bl	2e3c <arch_new_thread>
	if (!_current) {
    8b84:	4b04      	ldr	r3, [pc, #16]	; (8b98 <z_setup_new_thread+0x60>)
	new_thread->init_data = NULL;
    8b86:	6565      	str	r5, [r4, #84]	; 0x54
	if (!_current) {
    8b88:	689b      	ldr	r3, [r3, #8]
    8b8a:	b103      	cbz	r3, 8b8e <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
    8b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
	return stack_ptr;
    8b8e:	6723      	str	r3, [r4, #112]	; 0x70
}
    8b90:	4640      	mov	r0, r8
    8b92:	b004      	add	sp, #16
    8b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b98:	20001a48 	.word	0x20001a48

00008b9c <z_impl_k_thread_create>:
{
    8b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b9e:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8ba0:	2700      	movs	r7, #0
    8ba2:	9705      	str	r7, [sp, #20]
    8ba4:	9f10      	ldr	r7, [sp, #64]	; 0x40
    8ba6:	9704      	str	r7, [sp, #16]
    8ba8:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    8baa:	9703      	str	r7, [sp, #12]
    8bac:	9f0e      	ldr	r7, [sp, #56]	; 0x38
    8bae:	9702      	str	r7, [sp, #8]
{
    8bb0:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8bb4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    8bb6:	9701      	str	r7, [sp, #4]
    8bb8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
    8bba:	9700      	str	r7, [sp, #0]
{
    8bbc:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    8bbe:	f7ff ffbb 	bl	8b38 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    8bc2:	f1b5 3fff 	cmp.w	r5, #4294967295
    8bc6:	bf08      	it	eq
    8bc8:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    8bcc:	d005      	beq.n	8bda <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8bce:	ea55 0306 	orrs.w	r3, r5, r6
    8bd2:	d105      	bne.n	8be0 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
    8bd4:	4620      	mov	r0, r4
    8bd6:	f000 fc67 	bl	94a8 <z_sched_start>
}
    8bda:	4620      	mov	r0, r4
    8bdc:	b007      	add	sp, #28
    8bde:	bdf0      	pop	{r4, r5, r6, r7, pc}

extern void z_thread_timeout(struct _timeout *timeout);

static inline void z_add_thread_timeout(struct k_thread *thread, k_timeout_t ticks)
{
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    8be0:	4903      	ldr	r1, [pc, #12]	; (8bf0 <z_impl_k_thread_create+0x54>)
    8be2:	4632      	mov	r2, r6
    8be4:	462b      	mov	r3, r5
    8be6:	f104 0018 	add.w	r0, r4, #24
    8bea:	f000 fedf 	bl	99ac <z_add_timeout>
    8bee:	e7f4      	b.n	8bda <z_impl_k_thread_create+0x3e>
    8bf0:	0000b7cd 	.word	0x0000b7cd

00008bf4 <z_init_static_threads>:
{
    8bf4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8bf8:	4c29      	ldr	r4, [pc, #164]	; (8ca0 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
    8bfa:	4d2a      	ldr	r5, [pc, #168]	; (8ca4 <z_init_static_threads+0xb0>)
{
    8bfc:	b087      	sub	sp, #28
    8bfe:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
    8c00:	42ae      	cmp	r6, r5
    8c02:	f104 0430 	add.w	r4, r4, #48	; 0x30
    8c06:	d30f      	bcc.n	8c28 <z_init_static_threads+0x34>
	k_sched_lock();
    8c08:	f000 fb68 	bl	92dc <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    8c0c:	4c24      	ldr	r4, [pc, #144]	; (8ca0 <z_init_static_threads+0xac>)
    8c0e:	f8df 9098 	ldr.w	r9, [pc, #152]	; 8ca8 <z_init_static_threads+0xb4>
    8c12:	f44f 4600 	mov.w	r6, #32768	; 0x8000
    8c16:	f240 37e7 	movw	r7, #999	; 0x3e7
    8c1a:	42ac      	cmp	r4, r5
    8c1c:	d320      	bcc.n	8c60 <z_init_static_threads+0x6c>
}
    8c1e:	b007      	add	sp, #28
    8c20:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
    8c24:	f000 bd2a 	b.w	967c <k_sched_unlock>
		z_setup_new_thread(
    8c28:	f854 3c04 	ldr.w	r3, [r4, #-4]
    8c2c:	9305      	str	r3, [sp, #20]
    8c2e:	f854 3c10 	ldr.w	r3, [r4, #-16]
    8c32:	9304      	str	r3, [sp, #16]
    8c34:	f854 3c14 	ldr.w	r3, [r4, #-20]
    8c38:	9303      	str	r3, [sp, #12]
    8c3a:	f854 3c18 	ldr.w	r3, [r4, #-24]
    8c3e:	9302      	str	r3, [sp, #8]
    8c40:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    8c44:	9301      	str	r3, [sp, #4]
    8c46:	f854 3c20 	ldr.w	r3, [r4, #-32]
    8c4a:	9300      	str	r3, [sp, #0]
    8c4c:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    8c50:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    8c54:	f7ff ff70 	bl	8b38 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    8c58:	f854 3c30 	ldr.w	r3, [r4, #-48]
    8c5c:	655e      	str	r6, [r3, #84]	; 0x54
	_FOREACH_STATIC_THREAD(thread_data) {
    8c5e:	e7ce      	b.n	8bfe <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    8c60:	6a63      	ldr	r3, [r4, #36]	; 0x24
    8c62:	1c5a      	adds	r2, r3, #1
    8c64:	d00d      	beq.n	8c82 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
    8c66:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    8c6a:	2100      	movs	r1, #0
    8c6c:	4638      	mov	r0, r7
    8c6e:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8c72:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
    8c76:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    8c7a:	d104      	bne.n	8c86 <z_init_static_threads+0x92>
	z_sched_start(thread);
    8c7c:	4640      	mov	r0, r8
    8c7e:	f000 fc13 	bl	94a8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    8c82:	3430      	adds	r4, #48	; 0x30
    8c84:	e7c9      	b.n	8c1a <z_init_static_threads+0x26>
    8c86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    8c8a:	2300      	movs	r3, #0
    8c8c:	f7f7 fa28 	bl	e0 <__aeabi_uldivmod>
    8c90:	4602      	mov	r2, r0
    8c92:	460b      	mov	r3, r1
    8c94:	f108 0018 	add.w	r0, r8, #24
    8c98:	4649      	mov	r1, r9
    8c9a:	f000 fe87 	bl	99ac <z_add_timeout>
    8c9e:	e7f0      	b.n	8c82 <z_init_static_threads+0x8e>
    8ca0:	20000118 	.word	0x20000118
    8ca4:	20000118 	.word	0x20000118
    8ca8:	0000b7cd 	.word	0x0000b7cd

00008cac <idle>:
#endif	/* CONFIG_PM */
	sys_clock_idle_exit();
}

void idle(void *unused1, void *unused2, void *unused3)
{
    8cac:	b508      	push	{r3, lr}
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    8cae:	4c0b      	ldr	r4, [pc, #44]	; (8cdc <idle+0x30>)
	return !z_sys_post_kernel;
    8cb0:	4d0b      	ldr	r5, [pc, #44]	; (8ce0 <idle+0x34>)
	__asm__ volatile(
    8cb2:	f04f 0220 	mov.w	r2, #32
    8cb6:	f3ef 8311 	mrs	r3, BASEPRI
    8cba:	f382 8812 	msr	BASEPRI_MAX, r2
    8cbe:	f3bf 8f6f 	isb	sy
    8cc2:	f002 fe3f 	bl	b944 <z_get_next_timeout_expiry>
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    8cc6:	782b      	ldrb	r3, [r5, #0]
		_kernel.idle = z_get_next_timeout_expiry();
    8cc8:	61a0      	str	r0, [r4, #24]
		if (k_is_pre_kernel() || !pm_system_suspend(_kernel.idle)) {
    8cca:	b913      	cbnz	r3, 8cd2 <idle+0x26>
	arch_cpu_idle();
    8ccc:	f7f9 ff72 	bl	2bb4 <arch_cpu_idle>
}
    8cd0:	e7ef      	b.n	8cb2 <idle+0x6>
    8cd2:	f7f9 fe8f 	bl	29f4 <pm_system_suspend>
    8cd6:	2800      	cmp	r0, #0
    8cd8:	d1eb      	bne.n	8cb2 <idle+0x6>
    8cda:	e7f7      	b.n	8ccc <idle+0x20>
    8cdc:	20001a48 	.word	0x20001a48
    8ce0:	20001ecb 	.word	0x20001ecb

00008ce4 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    8ce4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8ce8:	4604      	mov	r4, r0
    8cea:	4617      	mov	r7, r2
    8cec:	461e      	mov	r6, r3
    8cee:	f04f 0320 	mov.w	r3, #32
    8cf2:	f3ef 8811 	mrs	r8, BASEPRI
    8cf6:	f383 8812 	msr	BASEPRI_MAX, r3
    8cfa:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    8cfe:	68c3      	ldr	r3, [r0, #12]
    8d00:	4a32      	ldr	r2, [pc, #200]	; (8dcc <z_impl_k_mutex_lock+0xe8>)
    8d02:	b16b      	cbz	r3, 8d20 <z_impl_k_mutex_lock+0x3c>
    8d04:	6880      	ldr	r0, [r0, #8]
    8d06:	6891      	ldr	r1, [r2, #8]
    8d08:	4288      	cmp	r0, r1
    8d0a:	d019      	beq.n	8d40 <z_impl_k_mutex_lock+0x5c>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    8d0c:	ea57 0306 	orrs.w	r3, r7, r6
    8d10:	d118      	bne.n	8d44 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
    8d12:	f388 8811 	msr	BASEPRI, r8
    8d16:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    8d1a:	f06f 000f 	mvn.w	r0, #15
    8d1e:	e00c      	b.n	8d3a <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
    8d20:	6891      	ldr	r1, [r2, #8]
    8d22:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    8d26:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    8d28:	3301      	adds	r3, #1
    8d2a:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    8d2c:	6893      	ldr	r3, [r2, #8]
    8d2e:	60a3      	str	r3, [r4, #8]
    8d30:	f388 8811 	msr	BASEPRI, r8
    8d34:	f3bf 8f6f 	isb	sy
		return 0;
    8d38:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    8d3a:	b002      	add	sp, #8
    8d3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    8d40:	6921      	ldr	r1, [r4, #16]
    8d42:	e7f0      	b.n	8d26 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    8d44:	f991 100e 	ldrsb.w	r1, [r1, #14]
    8d48:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    8d4c:	4299      	cmp	r1, r3
    8d4e:	bfa8      	it	ge
    8d50:	4619      	movge	r1, r3
    8d52:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    8d56:	4291      	cmp	r1, r2
    8d58:	bfb8      	it	lt
    8d5a:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    8d5c:	428b      	cmp	r3, r1
    8d5e:	dd2e      	ble.n	8dbe <z_impl_k_mutex_lock+0xda>
		resched = adjust_owner_prio(mutex, new_prio);
    8d60:	f002 fbd8 	bl	b514 <adjust_owner_prio.isra.0>
    8d64:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    8d66:	e9cd 7600 	strd	r7, r6, [sp]
    8d6a:	4819      	ldr	r0, [pc, #100]	; (8dd0 <z_impl_k_mutex_lock+0xec>)
    8d6c:	4622      	mov	r2, r4
    8d6e:	4641      	mov	r1, r8
    8d70:	f000 fbf6 	bl	9560 <z_pend_curr>
	if (got_mutex == 0) {
    8d74:	2800      	cmp	r0, #0
    8d76:	d0e0      	beq.n	8d3a <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
    8d78:	f04f 0320 	mov.w	r3, #32
    8d7c:	f3ef 8611 	mrs	r6, BASEPRI
    8d80:	f383 8812 	msr	BASEPRI_MAX, r3
    8d84:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    8d88:	6823      	ldr	r3, [r4, #0]
    8d8a:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8d8c:	429c      	cmp	r4, r3
    8d8e:	d00a      	beq.n	8da6 <z_impl_k_mutex_lock+0xc2>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    8d90:	b14b      	cbz	r3, 8da6 <z_impl_k_mutex_lock+0xc2>
    8d92:	f993 300e 	ldrsb.w	r3, [r3, #14]
    8d96:	4299      	cmp	r1, r3
    8d98:	bfa8      	it	ge
    8d9a:	4619      	movge	r1, r3
    8d9c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    8da0:	4299      	cmp	r1, r3
    8da2:	bfb8      	it	lt
    8da4:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    8da6:	68a0      	ldr	r0, [r4, #8]
    8da8:	f002 fbb4 	bl	b514 <adjust_owner_prio.isra.0>
    8dac:	b900      	cbnz	r0, 8db0 <z_impl_k_mutex_lock+0xcc>
	if (resched) {
    8dae:	b145      	cbz	r5, 8dc2 <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
    8db0:	4807      	ldr	r0, [pc, #28]	; (8dd0 <z_impl_k_mutex_lock+0xec>)
    8db2:	4631      	mov	r1, r6
    8db4:	f000 fa80 	bl	92b8 <z_reschedule>
	return -EAGAIN;
    8db8:	f06f 000a 	mvn.w	r0, #10
    8dbc:	e7bd      	b.n	8d3a <z_impl_k_mutex_lock+0x56>
	bool resched = false;
    8dbe:	2500      	movs	r5, #0
    8dc0:	e7d1      	b.n	8d66 <z_impl_k_mutex_lock+0x82>
	__asm__ volatile(
    8dc2:	f386 8811 	msr	BASEPRI, r6
    8dc6:	f3bf 8f6f 	isb	sy
    8dca:	e7f5      	b.n	8db8 <z_impl_k_mutex_lock+0xd4>
    8dcc:	20001a48 	.word	0x20001a48
    8dd0:	20001ecc 	.word	0x20001ecc

00008dd4 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    8dd4:	b538      	push	{r3, r4, r5, lr}

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    8dd6:	6883      	ldr	r3, [r0, #8]
{
    8dd8:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
    8dda:	2b00      	cmp	r3, #0
    8ddc:	d032      	beq.n	8e44 <z_impl_k_mutex_unlock+0x70>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    8dde:	4a1c      	ldr	r2, [pc, #112]	; (8e50 <z_impl_k_mutex_unlock+0x7c>)
    8de0:	6892      	ldr	r2, [r2, #8]
    8de2:	4293      	cmp	r3, r2
    8de4:	d131      	bne.n	8e4a <z_impl_k_mutex_unlock+0x76>
static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1U, "");

	--_current->base.sched_locked;
    8de6:	7bda      	ldrb	r2, [r3, #15]
    8de8:	3a01      	subs	r2, #1
    8dea:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    8dec:	68c3      	ldr	r3, [r0, #12]
    8dee:	2b01      	cmp	r3, #1
    8df0:	d905      	bls.n	8dfe <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
    8df2:	3b01      	subs	r3, #1
    8df4:	60c3      	str	r3, [r0, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    8df6:	f000 fc41 	bl	967c <k_sched_unlock>

	return 0;
    8dfa:	2000      	movs	r0, #0
}
    8dfc:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    8dfe:	f04f 0320 	mov.w	r3, #32
    8e02:	f3ef 8511 	mrs	r5, BASEPRI
    8e06:	f383 8812 	msr	BASEPRI_MAX, r3
    8e0a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    8e0e:	6901      	ldr	r1, [r0, #16]
    8e10:	6880      	ldr	r0, [r0, #8]
    8e12:	f002 fb7f 	bl	b514 <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    8e16:	4620      	mov	r0, r4
    8e18:	f002 fd39 	bl	b88e <z_unpend_first_thread>
	mutex->owner = new_owner;
    8e1c:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    8e1e:	b158      	cbz	r0, 8e38 <z_impl_k_mutex_unlock+0x64>
		mutex->owner_orig_prio = new_owner->base.prio;
    8e20:	f990 200e 	ldrsb.w	r2, [r0, #14]
    8e24:	6122      	str	r2, [r4, #16]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    8e26:	2200      	movs	r2, #0
    8e28:	6782      	str	r2, [r0, #120]	; 0x78
		z_ready_thread(new_owner);
    8e2a:	f002 fcbf 	bl	b7ac <z_ready_thread>
		z_reschedule(&lock, key);
    8e2e:	4809      	ldr	r0, [pc, #36]	; (8e54 <z_impl_k_mutex_unlock+0x80>)
    8e30:	4629      	mov	r1, r5
    8e32:	f000 fa41 	bl	92b8 <z_reschedule>
    8e36:	e7de      	b.n	8df6 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
    8e38:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    8e3a:	f385 8811 	msr	BASEPRI, r5
    8e3e:	f3bf 8f6f 	isb	sy
    8e42:	e7d8      	b.n	8df6 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
    8e44:	f06f 0015 	mvn.w	r0, #21
    8e48:	e7d8      	b.n	8dfc <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
    8e4a:	f04f 30ff 	mov.w	r0, #4294967295
    8e4e:	e7d5      	b.n	8dfc <z_impl_k_mutex_unlock+0x28>
    8e50:	20001a48 	.word	0x20001a48
    8e54:	20001ecc 	.word	0x20001ecc

00008e58 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
    8e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8e5a:	4611      	mov	r1, r2
	__asm__ volatile(
    8e5c:	f04f 0220 	mov.w	r2, #32
    8e60:	f3ef 8511 	mrs	r5, BASEPRI
    8e64:	f382 8812 	msr	BASEPRI_MAX, r2
    8e68:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
    8e6c:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_queue, get, queue, timeout);

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
    8e6e:	b19c      	cbz	r4, 8e98 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    8e70:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    8e72:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    8e74:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
    8e78:	4294      	cmp	r4, r2
	list->head = node;
    8e7a:	6003      	str	r3, [r0, #0]
	list->tail = node;
    8e7c:	bf08      	it	eq
    8e7e:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
    8e80:	2101      	movs	r1, #1
    8e82:	4620      	mov	r0, r4
    8e84:	f002 fbb5 	bl	b5f2 <z_queue_node_peek>
    8e88:	4604      	mov	r4, r0
	__asm__ volatile(
    8e8a:	f385 8811 	msr	BASEPRI, r5
    8e8e:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_queue, get, queue, timeout,
		(ret != 0) ? NULL : _current->base.swap_data);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
    8e92:	4620      	mov	r0, r4
    8e94:	b003      	add	sp, #12
    8e96:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8e98:	ea51 0203 	orrs.w	r2, r1, r3
    8e9c:	d0f5      	beq.n	8e8a <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    8e9e:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
    8ea2:	e9cd 1300 	strd	r1, r3, [sp]
    8ea6:	4610      	mov	r0, r2
    8ea8:	4629      	mov	r1, r5
    8eaa:	f000 fb59 	bl	9560 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
    8eae:	2800      	cmp	r0, #0
    8eb0:	d1ef      	bne.n	8e92 <z_impl_k_queue_get+0x3a>
    8eb2:	4b02      	ldr	r3, [pc, #8]	; (8ebc <z_impl_k_queue_get+0x64>)
    8eb4:	689b      	ldr	r3, [r3, #8]
    8eb6:	695c      	ldr	r4, [r3, #20]
    8eb8:	e7eb      	b.n	8e92 <z_impl_k_queue_get+0x3a>
    8eba:	bf00      	nop
    8ebc:	20001a48 	.word	0x20001a48

00008ec0 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    8ec0:	b538      	push	{r3, r4, r5, lr}
    8ec2:	4604      	mov	r4, r0
	__asm__ volatile(
    8ec4:	f04f 0320 	mov.w	r3, #32
    8ec8:	f3ef 8511 	mrs	r5, BASEPRI
    8ecc:	f383 8812 	msr	BASEPRI_MAX, r3
    8ed0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    8ed4:	f002 fcdb 	bl	b88e <z_unpend_first_thread>

	if (thread != NULL) {
    8ed8:	b148      	cbz	r0, 8eee <z_impl_k_sem_give+0x2e>
    8eda:	2200      	movs	r2, #0
    8edc:	6782      	str	r2, [r0, #120]	; 0x78
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    8ede:	f002 fc65 	bl	b7ac <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    8ee2:	4629      	mov	r1, r5
    8ee4:	4805      	ldr	r0, [pc, #20]	; (8efc <z_impl_k_sem_give+0x3c>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    8ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    8eea:	f000 b9e5 	b.w	92b8 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    8eee:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    8ef2:	429a      	cmp	r2, r3
    8ef4:	bf18      	it	ne
    8ef6:	3301      	addne	r3, #1
    8ef8:	60a3      	str	r3, [r4, #8]
}
    8efa:	e7f2      	b.n	8ee2 <z_impl_k_sem_give+0x22>
    8efc:	20001ecc 	.word	0x20001ecc

00008f00 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    8f00:	b513      	push	{r0, r1, r4, lr}
    8f02:	f04f 0420 	mov.w	r4, #32
    8f06:	f3ef 8111 	mrs	r1, BASEPRI
    8f0a:	f384 8812 	msr	BASEPRI_MAX, r4
    8f0e:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    8f12:	6884      	ldr	r4, [r0, #8]
    8f14:	b144      	cbz	r4, 8f28 <z_impl_k_sem_take+0x28>
		sem->count--;
    8f16:	3c01      	subs	r4, #1
    8f18:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
    8f1a:	f381 8811 	msr	BASEPRI, r1
    8f1e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    8f22:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    8f24:	b002      	add	sp, #8
    8f26:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    8f28:	ea52 0403 	orrs.w	r4, r2, r3
    8f2c:	d106      	bne.n	8f3c <z_impl_k_sem_take+0x3c>
    8f2e:	f381 8811 	msr	BASEPRI, r1
    8f32:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    8f36:	f06f 000f 	mvn.w	r0, #15
    8f3a:	e7f3      	b.n	8f24 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    8f3c:	e9cd 2300 	strd	r2, r3, [sp]
    8f40:	4602      	mov	r2, r0
    8f42:	4802      	ldr	r0, [pc, #8]	; (8f4c <z_impl_k_sem_take+0x4c>)
    8f44:	f000 fb0c 	bl	9560 <z_pend_curr>
	return ret;
    8f48:	e7ec      	b.n	8f24 <z_impl_k_sem_take+0x24>
    8f4a:	bf00      	nop
    8f4c:	20001ecc 	.word	0x20001ecc

00008f50 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    8f50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    8f52:	4b09      	ldr	r3, [pc, #36]	; (8f78 <k_sys_work_q_init+0x28>)
    8f54:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    8f56:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    8f58:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    8f5a:	9300      	str	r3, [sp, #0]
    8f5c:	4907      	ldr	r1, [pc, #28]	; (8f7c <k_sys_work_q_init+0x2c>)
    8f5e:	4808      	ldr	r0, [pc, #32]	; (8f80 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    8f60:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    8f64:	f04f 33ff 	mov.w	r3, #4294967295
    8f68:	f44f 6280 	mov.w	r2, #1024	; 0x400
    8f6c:	f000 f8f6 	bl	915c <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    8f70:	4620      	mov	r0, r4
    8f72:	b004      	add	sp, #16
    8f74:	bd10      	pop	{r4, pc}
    8f76:	bf00      	nop
    8f78:	0000e407 	.word	0x0000e407
    8f7c:	200035a0 	.word	0x200035a0
    8f80:	20000a50 	.word	0x20000a50

00008f84 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    8f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return list->head;
    8f88:	4e47      	ldr	r6, [pc, #284]	; (90a8 <work_queue_main+0x124>)
    8f8a:	b085      	sub	sp, #20
    8f8c:	4604      	mov	r4, r0
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
					   K_FOREVER, NULL);
    8f8e:	f04f 38ff 	mov.w	r8, #4294967295
    8f92:	f04f 39ff 	mov.w	r9, #4294967295
	__asm__ volatile(
    8f96:	f04f 0320 	mov.w	r3, #32
    8f9a:	f3ef 8711 	mrs	r7, BASEPRI
    8f9e:	f383 8812 	msr	BASEPRI_MAX, r3
    8fa2:	f3bf 8f6f 	isb	sy
    8fa6:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    8faa:	b98d      	cbnz	r5, 8fd0 <work_queue_main+0x4c>
		} else if (flag_test_and_clear(&queue->flags,
    8fac:	2102      	movs	r1, #2
    8fae:	f104 0098 	add.w	r0, r4, #152	; 0x98
    8fb2:	f002 fb41 	bl	b638 <flag_test_and_clear>
    8fb6:	2800      	cmp	r0, #0
    8fb8:	d135      	bne.n	9026 <work_queue_main+0xa2>
			(void)z_sched_wait(&lock, key, &queue->notifyq,
    8fba:	2300      	movs	r3, #0
    8fbc:	e9cd 8900 	strd	r8, r9, [sp]
    8fc0:	9302      	str	r3, [sp, #8]
    8fc2:	f104 0288 	add.w	r2, r4, #136	; 0x88
    8fc6:	4639      	mov	r1, r7
    8fc8:	4838      	ldr	r0, [pc, #224]	; (90ac <work_queue_main+0x128>)
    8fca:	f000 fc79 	bl	98c0 <z_sched_wait>
			continue;
    8fce:	e7e2      	b.n	8f96 <work_queue_main+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8fd0:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
	return node->next;
    8fd4:	682b      	ldr	r3, [r5, #0]
	list->head = node;
    8fd6:	f8c4 3080 	str.w	r3, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    8fda:	4295      	cmp	r5, r2
    8fdc:	d101      	bne.n	8fe2 <work_queue_main+0x5e>
	list->tail = node;
    8fde:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    8fe2:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    8fe6:	f043 0302 	orr.w	r3, r3, #2
    8fea:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    8fee:	68eb      	ldr	r3, [r5, #12]
    8ff0:	f023 0304 	bic.w	r3, r3, #4
    8ff4:	f043 0301 	orr.w	r3, r3, #1
    8ff8:	60eb      	str	r3, [r5, #12]
			handler = work->handler;
    8ffa:	686b      	ldr	r3, [r5, #4]
	__asm__ volatile(
    8ffc:	f387 8811 	msr	BASEPRI, r7
    9000:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
		handler(work);
    9004:	4628      	mov	r0, r5
    9006:	4798      	blx	r3
	__asm__ volatile(
    9008:	f04f 0320 	mov.w	r3, #32
    900c:	f3ef 8b11 	mrs	fp, BASEPRI
    9010:	f383 8812 	msr	BASEPRI_MAX, r3
    9014:	f3bf 8f6f 	isb	sy
	*flagp &= ~BIT(bit);
    9018:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    901a:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    901c:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    9020:	d40b      	bmi.n	903a <work_queue_main+0xb6>
	*flagp &= ~BIT(bit);
    9022:	60ea      	str	r2, [r5, #12]
    9024:	e00e      	b.n	9044 <work_queue_main+0xc0>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    9026:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    902a:	2200      	movs	r2, #0
    902c:	2101      	movs	r1, #1
    902e:	4628      	mov	r0, r5
    9030:	f002 fc55 	bl	b8de <z_sched_wake>
    9034:	2800      	cmp	r0, #0
    9036:	d1f8      	bne.n	902a <work_queue_main+0xa6>
    9038:	e7bf      	b.n	8fba <work_queue_main+0x36>
	return list->head;
    903a:	6830      	ldr	r0, [r6, #0]
	*flagp &= ~BIT(bit);
    903c:	f023 0303 	bic.w	r3, r3, #3
    9040:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    9042:	b970      	cbnz	r0, 9062 <work_queue_main+0xde>
	*flagp &= ~BIT(bit);
    9044:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    9048:	f023 0302 	bic.w	r3, r3, #2
    904c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__asm__ volatile(
    9050:	f38b 8811 	msr	BASEPRI, fp
    9054:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    9058:	05d8      	lsls	r0, r3, #23
    905a:	d49c      	bmi.n	8f96 <work_queue_main+0x12>
	z_impl_k_yield();
    905c:	f000 fb36 	bl	96cc <z_impl_k_yield>
}
    9060:	e799      	b.n	8f96 <work_queue_main+0x12>
	return node->next;
    9062:	2700      	movs	r7, #0
    9064:	f8d0 a000 	ldr.w	sl, [r0]
	parent->next = child;
    9068:	463b      	mov	r3, r7
		if (wc->work == work) {
    906a:	6842      	ldr	r2, [r0, #4]
    906c:	4295      	cmp	r5, r2
			sys_slist_remove(&pending_cancels, prev, &wc->node);
    906e:	4601      	mov	r1, r0
		if (wc->work == work) {
    9070:	d10c      	bne.n	908c <work_queue_main+0x108>
	return node->next;
    9072:	6801      	ldr	r1, [r0, #0]
 */
static inline void sys_slist_remove(sys_slist_t *list,
				    sys_snode_t *prev_node,
				    sys_snode_t *node);

Z_GENLIST_REMOVE(slist, snode)
    9074:	b997      	cbnz	r7, 909c <work_queue_main+0x118>
    9076:	6872      	ldr	r2, [r6, #4]
	list->head = node;
    9078:	6031      	str	r1, [r6, #0]
Z_GENLIST_REMOVE(slist, snode)
    907a:	4282      	cmp	r2, r0
    907c:	d100      	bne.n	9080 <work_queue_main+0xfc>
	list->tail = node;
    907e:	6071      	str	r1, [r6, #4]
	parent->next = child;
    9080:	f840 3b08 	str.w	r3, [r0], #8
	z_impl_k_sem_give(sem);
    9084:	f7ff ff1c 	bl	8ec0 <z_impl_k_sem_give>
}
    9088:	4639      	mov	r1, r7
    908a:	2300      	movs	r3, #0
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    908c:	f1ba 0f00 	cmp.w	sl, #0
    9090:	d0d8      	beq.n	9044 <work_queue_main+0xc0>
	return node->next;
    9092:	4650      	mov	r0, sl
    9094:	460f      	mov	r7, r1
    9096:	f8da a000 	ldr.w	sl, [sl]
    909a:	e7e6      	b.n	906a <work_queue_main+0xe6>
	return list->tail;
    909c:	6872      	ldr	r2, [r6, #4]
	parent->next = child;
    909e:	6039      	str	r1, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    90a0:	4290      	cmp	r0, r2
	list->tail = node;
    90a2:	bf08      	it	eq
    90a4:	6077      	streq	r7, [r6, #4]
}
    90a6:	e7eb      	b.n	9080 <work_queue_main+0xfc>
    90a8:	20001a70 	.word	0x20001a70
    90ac:	20001ecc 	.word	0x20001ecc

000090b0 <submit_to_queue_locked>:
{
    90b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return (*flagp & BIT(bit)) != 0U;
    90b2:	68c3      	ldr	r3, [r0, #12]
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    90b4:	079a      	lsls	r2, r3, #30
{
    90b6:	4604      	mov	r4, r0
    90b8:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    90ba:	f3c3 0540 	ubfx	r5, r3, #1, #1
    90be:	d41f      	bmi.n	9100 <submit_to_queue_locked+0x50>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    90c0:	075f      	lsls	r7, r3, #29
    90c2:	d41f      	bmi.n	9104 <submit_to_queue_locked+0x54>
		if (*queuep == NULL) {
    90c4:	680a      	ldr	r2, [r1, #0]
    90c6:	b90a      	cbnz	r2, 90cc <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    90c8:	6882      	ldr	r2, [r0, #8]
    90ca:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    90cc:	07d8      	lsls	r0, r3, #31
			*queuep = work->queue;
    90ce:	bf44      	itt	mi
    90d0:	68a3      	ldrmi	r3, [r4, #8]
    90d2:	6033      	strmi	r3, [r6, #0]
		int rc = queue_submit_locked(*queuep, work);
    90d4:	6837      	ldr	r7, [r6, #0]
			ret = 2;
    90d6:	bf4c      	ite	mi
    90d8:	2502      	movmi	r5, #2
		ret = 1;
    90da:	2501      	movpl	r5, #1
	if (queue == NULL) {
    90dc:	b37f      	cbz	r7, 913e <submit_to_queue_locked+0x8e>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    90de:	4b1b      	ldr	r3, [pc, #108]	; (914c <submit_to_queue_locked+0x9c>)
    90e0:	689b      	ldr	r3, [r3, #8]
    90e2:	42bb      	cmp	r3, r7
    90e4:	d111      	bne.n	910a <submit_to_queue_locked+0x5a>
    90e6:	f002 fa01 	bl	b4ec <k_is_in_isr>
    90ea:	f080 0001 	eor.w	r0, r0, #1
    90ee:	b2c0      	uxtb	r0, r0
	return (*flagp & BIT(bit)) != 0U;
    90f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    90f4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    90f6:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    90fa:	d523      	bpl.n	9144 <submit_to_queue_locked+0x94>
	} else if (draining && !chained) {
    90fc:	b13a      	cbz	r2, 910e <submit_to_queue_locked+0x5e>
    90fe:	b940      	cbnz	r0, 9112 <submit_to_queue_locked+0x62>
		ret = -EBUSY;
    9100:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    9104:	2300      	movs	r3, #0
    9106:	6033      	str	r3, [r6, #0]
	return ret;
    9108:	e013      	b.n	9132 <submit_to_queue_locked+0x82>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    910a:	2000      	movs	r0, #0
    910c:	e7f0      	b.n	90f0 <submit_to_queue_locked+0x40>
	} else if (plugged && !draining) {
    910e:	071b      	lsls	r3, r3, #28
    9110:	d4f6      	bmi.n	9100 <submit_to_queue_locked+0x50>
	parent->next = child;
    9112:	2300      	movs	r3, #0
    9114:	6023      	str	r3, [r4, #0]
	return list->tail;
    9116:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
Z_GENLIST_APPEND(slist, snode)
    911a:	b963      	cbnz	r3, 9136 <submit_to_queue_locked+0x86>
	list->head = node;
    911c:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    9120:	4638      	mov	r0, r7
    9122:	f002 fa94 	bl	b64e <notify_queue_locked.isra.0>
	*flagp |= BIT(bit);
    9126:	68e3      	ldr	r3, [r4, #12]
    9128:	f043 0304 	orr.w	r3, r3, #4
    912c:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    912e:	6833      	ldr	r3, [r6, #0]
    9130:	60a3      	str	r3, [r4, #8]
}
    9132:	4628      	mov	r0, r5
    9134:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    9136:	601c      	str	r4, [r3, #0]
	list->tail = node;
    9138:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    913c:	e7f0      	b.n	9120 <submit_to_queue_locked+0x70>
		return -EINVAL;
    913e:	f06f 0515 	mvn.w	r5, #21
    9142:	e7df      	b.n	9104 <submit_to_queue_locked+0x54>
		ret = -ENODEV;
    9144:	f06f 0512 	mvn.w	r5, #18
    9148:	e7dc      	b.n	9104 <submit_to_queue_locked+0x54>
    914a:	bf00      	nop
    914c:	20001a48 	.word	0x20001a48

00009150 <k_work_submit>:
{
    9150:	4601      	mov	r1, r0
	int ret = k_work_submit_to_queue(&k_sys_work_q, work);
    9152:	4801      	ldr	r0, [pc, #4]	; (9158 <k_work_submit+0x8>)
    9154:	f002 baaa 	b.w	b6ac <k_work_submit_to_queue>
    9158:	20000a50 	.word	0x20000a50

0000915c <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    915c:	b5f0      	push	{r4, r5, r6, r7, lr}
    915e:	b089      	sub	sp, #36	; 0x24
    9160:	4604      	mov	r4, r0
	list->head = NULL;
    9162:	2000      	movs	r0, #0
	list->tail = NULL;
    9164:	e9c4 0020 	strd	r0, r0, [r4, #128]	; 0x80
    9168:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    916a:	f104 0088 	add.w	r0, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    916e:	e9c4 0022 	strd	r0, r0, [r4, #136]	; 0x88
    9172:	f104 0090 	add.w	r0, r4, #144	; 0x90
    9176:	e9c4 0024 	strd	r0, r0, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    917a:	b31d      	cbz	r5, 91c4 <k_work_queue_start+0x68>
    917c:	7928      	ldrb	r0, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    917e:	2800      	cmp	r0, #0
    9180:	f240 1001 	movw	r0, #257	; 0x101
    9184:	bf08      	it	eq
    9186:	2001      	moveq	r0, #1
	*flagp = flags;
    9188:	f8c4 0098 	str.w	r0, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    918c:	2000      	movs	r0, #0
    918e:	f04f 36ff 	mov.w	r6, #4294967295
    9192:	f04f 37ff 	mov.w	r7, #4294967295
    9196:	e9cd 3003 	strd	r3, r0, [sp, #12]
    919a:	e9cd 0001 	strd	r0, r0, [sp, #4]
    919e:	e9cd 6706 	strd	r6, r7, [sp, #24]
    91a2:	4b09      	ldr	r3, [pc, #36]	; (91c8 <k_work_queue_start+0x6c>)
    91a4:	9400      	str	r4, [sp, #0]
    91a6:	4620      	mov	r0, r4
    91a8:	f7ff fcf8 	bl	8b9c <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    91ac:	b125      	cbz	r5, 91b8 <k_work_queue_start+0x5c>
    91ae:	6829      	ldr	r1, [r5, #0]
    91b0:	b111      	cbz	r1, 91b8 <k_work_queue_start+0x5c>
	return z_impl_k_thread_name_set(thread, str);
    91b2:	4620      	mov	r0, r4
    91b4:	f002 f9a0 	bl	b4f8 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    91b8:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    91ba:	b009      	add	sp, #36	; 0x24
    91bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    91c0:	f002 b99f 	b.w	b502 <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    91c4:	2001      	movs	r0, #1
    91c6:	e7df      	b.n	9188 <k_work_queue_start+0x2c>
    91c8:	00008f85 	.word	0x00008f85

000091cc <k_work_schedule_for_queue>:
}

int k_work_schedule_for_queue(struct k_work_q *queue,
			       struct k_work_delayable *dwork,
			       k_timeout_t delay)
{
    91cc:	b513      	push	{r0, r1, r4, lr}
    91ce:	9001      	str	r0, [sp, #4]
    91d0:	4608      	mov	r0, r1
	__asm__ volatile(
    91d2:	f04f 0120 	mov.w	r1, #32
    91d6:	f3ef 8411 	mrs	r4, BASEPRI
    91da:	f381 8812 	msr	BASEPRI_MAX, r1
    91de:	f3bf 8f6f 	isb	sy
	return *flagp;
    91e2:	68c1      	ldr	r1, [r0, #12]
	struct k_work *work = &dwork->work;
	int ret = 0;
	k_spinlock_key_t key = k_spin_lock(&lock);

	/* Schedule the work item if it's idle or running. */
	if ((work_busy_get_locked(work) & ~K_WORK_RUNNING) == 0U) {
    91e4:	f011 0f0e 	tst.w	r1, #14
    91e8:	d116      	bne.n	9218 <k_work_schedule_for_queue+0x4c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    91ea:	ea53 0c02 	orrs.w	ip, r3, r2
    91ee:	d108      	bne.n	9202 <k_work_schedule_for_queue+0x36>
		return submit_to_queue_locked(work, queuep);
    91f0:	a901      	add	r1, sp, #4
    91f2:	f7ff ff5d 	bl	90b0 <submit_to_queue_locked>
	__asm__ volatile(
    91f6:	f384 8811 	msr	BASEPRI, r4
    91fa:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&lock, key);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work, schedule_for_queue, queue, dwork, delay, ret);

	return ret;
}
    91fe:	b002      	add	sp, #8
    9200:	bd10      	pop	{r4, pc}
	*flagp |= BIT(bit);
    9202:	f041 0108 	orr.w	r1, r1, #8
    9206:	60c1      	str	r1, [r0, #12]
	dwork->queue = *queuep;
    9208:	9901      	ldr	r1, [sp, #4]
    920a:	6281      	str	r1, [r0, #40]	; 0x28
	z_add_timeout(&dwork->timeout, work_timeout, delay);
    920c:	3010      	adds	r0, #16
    920e:	4903      	ldr	r1, [pc, #12]	; (921c <k_work_schedule_for_queue+0x50>)
    9210:	f000 fbcc 	bl	99ac <z_add_timeout>
	return ret;
    9214:	2001      	movs	r0, #1
    9216:	e7ee      	b.n	91f6 <k_work_schedule_for_queue+0x2a>
	int ret = 0;
    9218:	2000      	movs	r0, #0
    921a:	e7ec      	b.n	91f6 <k_work_schedule_for_queue+0x2a>
    921c:	0000b65d 	.word	0x0000b65d

00009220 <k_work_schedule>:

int k_work_schedule(struct k_work_delayable *dwork,
				   k_timeout_t delay)
{
    9220:	4601      	mov	r1, r0
	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_work, schedule, dwork, delay);

	int ret = k_work_schedule_for_queue(&k_sys_work_q, dwork, delay);
    9222:	4801      	ldr	r0, [pc, #4]	; (9228 <k_work_schedule+0x8>)
    9224:	f7ff bfd2 	b.w	91cc <k_work_schedule_for_queue>
    9228:	20000a50 	.word	0x20000a50

0000922c <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(struct k_thread *curr)
{
    922c:	b538      	push	{r3, r4, r5, lr}
	int ret = slice_ticks;
    922e:	4d07      	ldr	r5, [pc, #28]	; (924c <z_reset_time_slice+0x20>)
    9230:	682c      	ldr	r4, [r5, #0]
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time(curr) != 0) {
    9232:	b154      	cbz	r4, 924a <z_reset_time_slice+0x1e>
		_current_cpu->slice_ticks = slice_time(curr) + sys_clock_elapsed();
    9234:	f7fc fcb4 	bl	5ba0 <sys_clock_elapsed>
    9238:	4b05      	ldr	r3, [pc, #20]	; (9250 <z_reset_time_slice+0x24>)
    923a:	4404      	add	r4, r0
    923c:	611c      	str	r4, [r3, #16]
		z_set_timeout_expiry(slice_time(curr), false);
    923e:	6828      	ldr	r0, [r5, #0]
    9240:	2100      	movs	r1, #0
	}
}
    9242:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_set_timeout_expiry(slice_time(curr), false);
    9246:	f002 bb8d 	b.w	b964 <z_set_timeout_expiry>
}
    924a:	bd38      	pop	{r3, r4, r5, pc}
    924c:	20001a80 	.word	0x20001a80
    9250:	20001a48 	.word	0x20001a48

00009254 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    9254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    9256:	4604      	mov	r4, r0
    9258:	460d      	mov	r5, r1
	__asm__ volatile(
    925a:	f04f 0320 	mov.w	r3, #32
    925e:	f3ef 8711 	mrs	r7, BASEPRI
    9262:	f383 8812 	msr	BASEPRI_MAX, r3
    9266:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    926a:	4e10      	ldr	r6, [pc, #64]	; (92ac <k_sched_time_slice_set+0x58>)
    926c:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    926e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    9272:	f240 30e7 	movw	r0, #999	; 0x3e7
    9276:	6131      	str	r1, [r6, #16]
    9278:	2300      	movs	r3, #0
    927a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    927e:	fbe4 010c 	umlal	r0, r1, r4, ip
    9282:	f7f6 ff2d 	bl	e0 <__aeabi_uldivmod>
		slice_ticks = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    9286:	2c00      	cmp	r4, #0
    9288:	4b09      	ldr	r3, [pc, #36]	; (92b0 <k_sched_time_slice_set+0x5c>)
    928a:	dc0a      	bgt.n	92a2 <k_sched_time_slice_set+0x4e>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_ticks = MAX(2, slice_ticks);
    928c:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    928e:	4b09      	ldr	r3, [pc, #36]	; (92b4 <k_sched_time_slice_set+0x60>)
		z_reset_time_slice(_current);
    9290:	68b0      	ldr	r0, [r6, #8]
		slice_max_prio = prio;
    9292:	601d      	str	r5, [r3, #0]
		z_reset_time_slice(_current);
    9294:	f7ff ffca 	bl	922c <z_reset_time_slice>
	__asm__ volatile(
    9298:	f387 8811 	msr	BASEPRI, r7
    929c:	f3bf 8f6f 	isb	sy
	}
}
    92a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_ticks = MAX(2, slice_ticks);
    92a2:	2802      	cmp	r0, #2
    92a4:	bfb8      	it	lt
    92a6:	2002      	movlt	r0, #2
    92a8:	e7f0      	b.n	928c <k_sched_time_slice_set+0x38>
    92aa:	bf00      	nop
    92ac:	20001a48 	.word	0x20001a48
    92b0:	20001a80 	.word	0x20001a80
    92b4:	20001a7c 	.word	0x20001a7c

000092b8 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
    92b8:	b949      	cbnz	r1, 92ce <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    92ba:	f3ef 8005 	mrs	r0, IPSR
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
    92be:	b930      	cbnz	r0, 92ce <z_reschedule+0x16>
	new_thread = _kernel.ready_q.cache;
    92c0:	4b05      	ldr	r3, [pc, #20]	; (92d8 <z_reschedule+0x20>)
	if (resched(key.key) && need_swap()) {
    92c2:	69da      	ldr	r2, [r3, #28]
    92c4:	689b      	ldr	r3, [r3, #8]
    92c6:	429a      	cmp	r2, r3
    92c8:	d001      	beq.n	92ce <z_reschedule+0x16>
	ret = arch_swap(key);
    92ca:	f7f9 bd63 	b.w	2d94 <arch_swap>
    92ce:	f381 8811 	msr	BASEPRI, r1
    92d2:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    92d6:	4770      	bx	lr
    92d8:	20001a48 	.word	0x20001a48

000092dc <k_sched_lock>:
	__asm__ volatile(
    92dc:	f04f 0320 	mov.w	r3, #32
    92e0:	f3ef 8111 	mrs	r1, BASEPRI
    92e4:	f383 8812 	msr	BASEPRI_MAX, r3
    92e8:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
    92ec:	4b04      	ldr	r3, [pc, #16]	; (9300 <k_sched_lock+0x24>)
    92ee:	689a      	ldr	r2, [r3, #8]
    92f0:	7bd3      	ldrb	r3, [r2, #15]
    92f2:	3b01      	subs	r3, #1
    92f4:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
    92f6:	f381 8811 	msr	BASEPRI, r1
    92fa:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    92fe:	4770      	bx	lr
    9300:	20001a48 	.word	0x20001a48

00009304 <update_cache>:
{
    9304:	b538      	push	{r3, r4, r5, lr}
    9306:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    9308:	480c      	ldr	r0, [pc, #48]	; (933c <update_cache+0x38>)
    930a:	4d0d      	ldr	r5, [pc, #52]	; (9340 <update_cache+0x3c>)
    930c:	f002 fa48 	bl	b7a0 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    9310:	4604      	mov	r4, r0
    9312:	b900      	cbnz	r0, 9316 <update_cache+0x12>
    9314:	68ec      	ldr	r4, [r5, #12]
	if (z_is_thread_prevented_from_running(_current)) {
    9316:	68ab      	ldr	r3, [r5, #8]
	if (preempt_ok != 0) {
    9318:	b94a      	cbnz	r2, 932e <update_cache+0x2a>
	if (z_is_thread_prevented_from_running(_current)) {
    931a:	7b5a      	ldrb	r2, [r3, #13]
    931c:	06d2      	lsls	r2, r2, #27
    931e:	d106      	bne.n	932e <update_cache+0x2a>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    9320:	69a2      	ldr	r2, [r4, #24]
    9322:	b922      	cbnz	r2, 932e <update_cache+0x2a>
	if (is_preempt(_current) || is_metairq(thread)) {
    9324:	89da      	ldrh	r2, [r3, #14]
    9326:	2a7f      	cmp	r2, #127	; 0x7f
    9328:	d901      	bls.n	932e <update_cache+0x2a>
		_kernel.ready_q.cache = _current;
    932a:	61eb      	str	r3, [r5, #28]
}
    932c:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    932e:	429c      	cmp	r4, r3
    9330:	d002      	beq.n	9338 <update_cache+0x34>
			z_reset_time_slice(thread);
    9332:	4620      	mov	r0, r4
    9334:	f7ff ff7a 	bl	922c <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    9338:	61ec      	str	r4, [r5, #28]
}
    933a:	e7f7      	b.n	932c <update_cache+0x28>
    933c:	20001a68 	.word	0x20001a68
    9340:	20001a48 	.word	0x20001a48

00009344 <move_thread_to_end_of_prio_q>:
{
    9344:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    9346:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    934a:	7b43      	ldrb	r3, [r0, #13]
    934c:	2a00      	cmp	r2, #0
{
    934e:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    9350:	da04      	bge.n	935c <move_thread_to_end_of_prio_q+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9352:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9356:	7343      	strb	r3, [r0, #13]

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
    9358:	f002 f9d6 	bl	b708 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    935c:	7b4b      	ldrb	r3, [r1, #13]
	return list->head == list;
    935e:	4a15      	ldr	r2, [pc, #84]	; (93b4 <move_thread_to_end_of_prio_q+0x70>)
    9360:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9364:	734b      	strb	r3, [r1, #13]
 */

static inline sys_dnode_t *sys_dlist_peek_next_no_check(sys_dlist_t *list,
							sys_dnode_t *node)
{
	return (node == list->tail) ? NULL : node->next;
    9366:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    936a:	f102 0520 	add.w	r5, r2, #32
    936e:	42ab      	cmp	r3, r5
    9370:	d01b      	beq.n	93aa <move_thread_to_end_of_prio_q+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9372:	b1d3      	cbz	r3, 93aa <move_thread_to_end_of_prio_q+0x66>
	int32_t b1 = thread_1->base.prio;
    9374:	f991 600e 	ldrsb.w	r6, [r1, #14]
	int32_t b2 = thread_2->base.prio;
    9378:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    937c:	4286      	cmp	r6, r0
    937e:	d00f      	beq.n	93a0 <move_thread_to_end_of_prio_q+0x5c>
		return b2 - b1;
    9380:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    9382:	2800      	cmp	r0, #0
    9384:	dd0c      	ble.n	93a0 <move_thread_to_end_of_prio_q+0x5c>
 * @param successor the position before which "node" will be inserted
 * @param node the element to insert
 */
static inline void sys_dlist_insert(sys_dnode_t *successor, sys_dnode_t *node)
{
	sys_dnode_t *const prev = successor->prev;
    9386:	6858      	ldr	r0, [r3, #4]

	node->prev = prev;
	node->next = successor;
    9388:	e9c1 3000 	strd	r3, r0, [r1]
	prev->next = node;
    938c:	6001      	str	r1, [r0, #0]
	successor->prev = node;
    938e:	6059      	str	r1, [r3, #4]
	update_cache(thread == _current);
    9390:	6890      	ldr	r0, [r2, #8]
    9392:	1a43      	subs	r3, r0, r1
    9394:	4258      	negs	r0, r3
}
    9396:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    939a:	4158      	adcs	r0, r3
    939c:	f7ff bfb2 	b.w	9304 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    93a0:	42a3      	cmp	r3, r4
    93a2:	d002      	beq.n	93aa <move_thread_to_end_of_prio_q+0x66>
    93a4:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    93a6:	2b00      	cmp	r3, #0
    93a8:	d1e6      	bne.n	9378 <move_thread_to_end_of_prio_q+0x34>
	node->prev = tail;
    93aa:	e9c1 5400 	strd	r5, r4, [r1]
	tail->next = node;
    93ae:	6021      	str	r1, [r4, #0]
	list->tail = node;
    93b0:	6251      	str	r1, [r2, #36]	; 0x24
}
    93b2:	e7ed      	b.n	9390 <move_thread_to_end_of_prio_q+0x4c>
    93b4:	20001a48 	.word	0x20001a48

000093b8 <z_time_slice>:
{
    93b8:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    93ba:	f04f 0320 	mov.w	r3, #32
    93be:	f3ef 8511 	mrs	r5, BASEPRI
    93c2:	f383 8812 	msr	BASEPRI_MAX, r3
    93c6:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
    93ca:	4b17      	ldr	r3, [pc, #92]	; (9428 <z_time_slice+0x70>)
    93cc:	4a17      	ldr	r2, [pc, #92]	; (942c <z_time_slice+0x74>)
    93ce:	689c      	ldr	r4, [r3, #8]
    93d0:	6811      	ldr	r1, [r2, #0]
    93d2:	428c      	cmp	r4, r1
    93d4:	d107      	bne.n	93e6 <z_time_slice+0x2e>
	z_reset_time_slice(curr);
    93d6:	4620      	mov	r0, r4
    93d8:	f7ff ff28 	bl	922c <z_reset_time_slice>
	__asm__ volatile(
    93dc:	f385 8811 	msr	BASEPRI, r5
    93e0:	f3bf 8f6f 	isb	sy
}
    93e4:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
    93e6:	2100      	movs	r1, #0
    93e8:	6011      	str	r1, [r2, #0]
	int ret = slice_ticks;
    93ea:	4a11      	ldr	r2, [pc, #68]	; (9430 <z_time_slice+0x78>)
	if (slice_time(_current) && sliceable(_current)) {
    93ec:	6812      	ldr	r2, [r2, #0]
    93ee:	b1c2      	cbz	r2, 9422 <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
    93f0:	89e2      	ldrh	r2, [r4, #14]
    93f2:	2a7f      	cmp	r2, #127	; 0x7f
    93f4:	d815      	bhi.n	9422 <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
    93f6:	7b62      	ldrb	r2, [r4, #13]
    93f8:	06d2      	lsls	r2, r2, #27
    93fa:	d112      	bne.n	9422 <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    93fc:	4a0d      	ldr	r2, [pc, #52]	; (9434 <z_time_slice+0x7c>)
    93fe:	f994 100e 	ldrsb.w	r1, [r4, #14]
    9402:	6812      	ldr	r2, [r2, #0]
    9404:	4291      	cmp	r1, r2
    9406:	db0c      	blt.n	9422 <z_time_slice+0x6a>
	if (slice_time(_current) && sliceable(_current)) {
    9408:	4a0b      	ldr	r2, [pc, #44]	; (9438 <z_time_slice+0x80>)
    940a:	4294      	cmp	r4, r2
    940c:	d009      	beq.n	9422 <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
    940e:	691a      	ldr	r2, [r3, #16]
    9410:	4282      	cmp	r2, r0
    9412:	dc03      	bgt.n	941c <z_time_slice+0x64>
		move_thread_to_end_of_prio_q(curr);
    9414:	4620      	mov	r0, r4
    9416:	f7ff ff95 	bl	9344 <move_thread_to_end_of_prio_q>
    941a:	e7dc      	b.n	93d6 <z_time_slice+0x1e>
			_current_cpu->slice_ticks -= ticks;
    941c:	1a12      	subs	r2, r2, r0
		_current_cpu->slice_ticks = 0;
    941e:	611a      	str	r2, [r3, #16]
    9420:	e7dc      	b.n	93dc <z_time_slice+0x24>
    9422:	2200      	movs	r2, #0
    9424:	e7fb      	b.n	941e <z_time_slice+0x66>
    9426:	bf00      	nop
    9428:	20001a48 	.word	0x20001a48
    942c:	20001a78 	.word	0x20001a78
    9430:	20001a80 	.word	0x20001a80
    9434:	20001a7c 	.word	0x20001a7c
    9438:	20000950 	.word	0x20000950

0000943c <ready_thread>:
{
    943c:	b470      	push	{r4, r5, r6}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    943e:	f990 200d 	ldrsb.w	r2, [r0, #13]
    9442:	7b43      	ldrb	r3, [r0, #13]
    9444:	2a00      	cmp	r2, #0
    9446:	db2a      	blt.n	949e <ready_thread+0x62>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    9448:	06da      	lsls	r2, r3, #27
    944a:	d128      	bne.n	949e <ready_thread+0x62>
    944c:	6982      	ldr	r2, [r0, #24]
    944e:	bb32      	cbnz	r2, 949e <ready_thread+0x62>
	return list->head == list;
    9450:	4a14      	ldr	r2, [pc, #80]	; (94a4 <ready_thread+0x68>)
	thread->base.thread_state |= _THREAD_QUEUED;
    9452:	f063 037f 	orn	r3, r3, #127	; 0x7f
    9456:	7343      	strb	r3, [r0, #13]
	return (node == list->tail) ? NULL : node->next;
    9458:	e9d2 3408 	ldrd	r3, r4, [r2, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    945c:	f102 0520 	add.w	r5, r2, #32
    9460:	42ab      	cmp	r3, r5
    9462:	d017      	beq.n	9494 <ready_thread+0x58>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9464:	b1b3      	cbz	r3, 9494 <ready_thread+0x58>
	int32_t b1 = thread_1->base.prio;
    9466:	f990 600e 	ldrsb.w	r6, [r0, #14]
	int32_t b2 = thread_2->base.prio;
    946a:	f993 100e 	ldrsb.w	r1, [r3, #14]
	if (b1 != b2) {
    946e:	428e      	cmp	r6, r1
    9470:	d00b      	beq.n	948a <ready_thread+0x4e>
		return b2 - b1;
    9472:	1b89      	subs	r1, r1, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    9474:	2900      	cmp	r1, #0
    9476:	dd08      	ble.n	948a <ready_thread+0x4e>
	sys_dnode_t *const prev = successor->prev;
    9478:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    947a:	e9c0 3200 	strd	r3, r2, [r0]
	prev->next = node;
    947e:	6010      	str	r0, [r2, #0]
	successor->prev = node;
    9480:	6058      	str	r0, [r3, #4]
}
    9482:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
    9484:	2000      	movs	r0, #0
    9486:	f7ff bf3d 	b.w	9304 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    948a:	42a3      	cmp	r3, r4
    948c:	d002      	beq.n	9494 <ready_thread+0x58>
    948e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9490:	2b00      	cmp	r3, #0
    9492:	d1ea      	bne.n	946a <ready_thread+0x2e>
	node->prev = tail;
    9494:	e9c0 5400 	strd	r5, r4, [r0]
	tail->next = node;
    9498:	6020      	str	r0, [r4, #0]
	list->tail = node;
    949a:	6250      	str	r0, [r2, #36]	; 0x24
}
    949c:	e7f1      	b.n	9482 <ready_thread+0x46>
}
    949e:	bc70      	pop	{r4, r5, r6}
    94a0:	4770      	bx	lr
    94a2:	bf00      	nop
    94a4:	20001a48 	.word	0x20001a48

000094a8 <z_sched_start>:
{
    94a8:	b510      	push	{r4, lr}
	__asm__ volatile(
    94aa:	f04f 0220 	mov.w	r2, #32
    94ae:	f3ef 8411 	mrs	r4, BASEPRI
    94b2:	f382 8812 	msr	BASEPRI_MAX, r2
    94b6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
    94ba:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
    94bc:	0751      	lsls	r1, r2, #29
    94be:	d404      	bmi.n	94ca <z_sched_start+0x22>
	__asm__ volatile(
    94c0:	f384 8811 	msr	BASEPRI, r4
    94c4:	f3bf 8f6f 	isb	sy
}
    94c8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    94ca:	f022 0204 	bic.w	r2, r2, #4
    94ce:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
    94d0:	f7ff ffb4 	bl	943c <ready_thread>
	z_reschedule(&sched_spinlock, key);
    94d4:	4621      	mov	r1, r4
    94d6:	4802      	ldr	r0, [pc, #8]	; (94e0 <z_sched_start+0x38>)
}
    94d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
    94dc:	f7ff beec 	b.w	92b8 <z_reschedule>
    94e0:	20001ecc 	.word	0x20001ecc

000094e4 <unready_thread>:
{
    94e4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
    94e6:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
    94ea:	7b43      	ldrb	r3, [r0, #13]
    94ec:	2a00      	cmp	r2, #0
{
    94ee:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
    94f0:	da04      	bge.n	94fc <unready_thread+0x18>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    94f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    94f6:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    94f8:	f002 f906 	bl	b708 <sys_dlist_remove>
	update_cache(thread == _current);
    94fc:	4b04      	ldr	r3, [pc, #16]	; (9510 <unready_thread+0x2c>)
    94fe:	6898      	ldr	r0, [r3, #8]
    9500:	1a43      	subs	r3, r0, r1
    9502:	4258      	negs	r0, r3
    9504:	4158      	adcs	r0, r3
}
    9506:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
    950a:	f7ff befb 	b.w	9304 <update_cache>
    950e:	bf00      	nop
    9510:	20001a48 	.word	0x20001a48

00009514 <pend>:
{
    9514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9518:	4606      	mov	r6, r0
    951a:	4615      	mov	r5, r2
    951c:	461c      	mov	r4, r3
	__asm__ volatile(
    951e:	f04f 0320 	mov.w	r3, #32
    9522:	f3ef 8711 	mrs	r7, BASEPRI
    9526:	f383 8812 	msr	BASEPRI_MAX, r3
    952a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
    952e:	f002 f96f 	bl	b810 <add_to_waitq_locked>
	__asm__ volatile(
    9532:	f387 8811 	msr	BASEPRI, r7
    9536:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    953a:	f1b4 3fff 	cmp.w	r4, #4294967295
    953e:	bf08      	it	eq
    9540:	f1b5 3fff 	cmpeq.w	r5, #4294967295
    9544:	d008      	beq.n	9558 <pend+0x44>
    9546:	462a      	mov	r2, r5
    9548:	4623      	mov	r3, r4
    954a:	f106 0018 	add.w	r0, r6, #24
    954e:	4903      	ldr	r1, [pc, #12]	; (955c <pend+0x48>)
}
    9550:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    9554:	f000 ba2a 	b.w	99ac <z_add_timeout>
    9558:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    955c:	0000b7cd 	.word	0x0000b7cd

00009560 <z_pend_curr>:
{
    9560:	b510      	push	{r4, lr}
	pending_current = _current;
    9562:	4b07      	ldr	r3, [pc, #28]	; (9580 <z_pend_curr+0x20>)
    9564:	6898      	ldr	r0, [r3, #8]
    9566:	4b07      	ldr	r3, [pc, #28]	; (9584 <z_pend_curr+0x24>)
{
    9568:	460c      	mov	r4, r1
	pending_current = _current;
    956a:	6018      	str	r0, [r3, #0]
{
    956c:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    956e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    9572:	f7ff ffcf 	bl	9514 <pend>
    9576:	4620      	mov	r0, r4
}
    9578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    957c:	f7f9 bc0a 	b.w	2d94 <arch_swap>
    9580:	20001a48 	.word	0x20001a48
    9584:	20001a78 	.word	0x20001a78

00009588 <z_set_prio>:
{
    9588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    958a:	4604      	mov	r4, r0
	__asm__ volatile(
    958c:	f04f 0320 	mov.w	r3, #32
    9590:	f3ef 8611 	mrs	r6, BASEPRI
    9594:	f383 8812 	msr	BASEPRI_MAX, r3
    9598:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
    959c:	7b43      	ldrb	r3, [r0, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    959e:	06da      	lsls	r2, r3, #27
				thread->base.prio = prio;
    95a0:	b249      	sxtb	r1, r1
    95a2:	d133      	bne.n	960c <z_set_prio+0x84>
		if (need_sched) {
    95a4:	6982      	ldr	r2, [r0, #24]
    95a6:	bb8a      	cbnz	r2, 960c <z_set_prio+0x84>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    95a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    95ac:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    95ae:	f002 f8ab 	bl	b708 <sys_dlist_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    95b2:	7b43      	ldrb	r3, [r0, #13]
	return list->head == list;
    95b4:	4a17      	ldr	r2, [pc, #92]	; (9614 <z_set_prio+0x8c>)
				thread->base.prio = prio;
    95b6:	7381      	strb	r1, [r0, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    95b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    95bc:	7343      	strb	r3, [r0, #13]
    95be:	4610      	mov	r0, r2
    95c0:	f850 3f20 	ldr.w	r3, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    95c4:	4283      	cmp	r3, r0
    95c6:	d01b      	beq.n	9600 <z_set_prio+0x78>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    95c8:	b1d3      	cbz	r3, 9600 <z_set_prio+0x78>
	return (node == list->tail) ? NULL : node->next;
    95ca:	6a57      	ldr	r7, [r2, #36]	; 0x24
	int32_t b2 = thread_2->base.prio;
    95cc:	f993 500e 	ldrsb.w	r5, [r3, #14]
	if (b1 != b2) {
    95d0:	42a9      	cmp	r1, r5
    95d2:	d010      	beq.n	95f6 <z_set_prio+0x6e>
		return b2 - b1;
    95d4:	1a6d      	subs	r5, r5, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    95d6:	2d00      	cmp	r5, #0
    95d8:	dd0d      	ble.n	95f6 <z_set_prio+0x6e>
	sys_dnode_t *const prev = successor->prev;
    95da:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    95dc:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    95e0:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    95e2:	605c      	str	r4, [r3, #4]
			update_cache(1);
    95e4:	2001      	movs	r0, #1
    95e6:	f7ff fe8d 	bl	9304 <update_cache>
    95ea:	2001      	movs	r0, #1
	__asm__ volatile(
    95ec:	f386 8811 	msr	BASEPRI, r6
    95f0:	f3bf 8f6f 	isb	sy
}
    95f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    95f6:	42bb      	cmp	r3, r7
    95f8:	d002      	beq.n	9600 <z_set_prio+0x78>
    95fa:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    95fc:	2b00      	cmp	r3, #0
    95fe:	d1e5      	bne.n	95cc <z_set_prio+0x44>
	sys_dnode_t *const tail = list->tail;
    9600:	6a53      	ldr	r3, [r2, #36]	; 0x24
	node->prev = tail;
    9602:	e9c4 0300 	strd	r0, r3, [r4]
	tail->next = node;
    9606:	601c      	str	r4, [r3, #0]
	list->tail = node;
    9608:	6254      	str	r4, [r2, #36]	; 0x24
}
    960a:	e7eb      	b.n	95e4 <z_set_prio+0x5c>
			thread->base.prio = prio;
    960c:	73a1      	strb	r1, [r4, #14]
    960e:	2000      	movs	r0, #0
    9610:	e7ec      	b.n	95ec <z_set_prio+0x64>
    9612:	bf00      	nop
    9614:	20001a48 	.word	0x20001a48

00009618 <z_impl_k_thread_suspend>:
{
    9618:	b570      	push	{r4, r5, r6, lr}
    961a:	4604      	mov	r4, r0
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    961c:	3018      	adds	r0, #24
    961e:	f002 f97b 	bl	b918 <z_abort_timeout>
	__asm__ volatile(
    9622:	f04f 0320 	mov.w	r3, #32
    9626:	f3ef 8611 	mrs	r6, BASEPRI
    962a:	f383 8812 	msr	BASEPRI_MAX, r3
    962e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
    9632:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return (thread->base.thread_state & state) != 0U;
    9636:	7b63      	ldrb	r3, [r4, #13]
    9638:	2a00      	cmp	r2, #0
    963a:	da05      	bge.n	9648 <z_impl_k_thread_suspend+0x30>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    963c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    9640:	7363      	strb	r3, [r4, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    9642:	4620      	mov	r0, r4
    9644:	f002 f860 	bl	b708 <sys_dlist_remove>
		update_cache(thread == _current);
    9648:	4d0b      	ldr	r5, [pc, #44]	; (9678 <z_impl_k_thread_suspend+0x60>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    964a:	7b63      	ldrb	r3, [r4, #13]
    964c:	68a8      	ldr	r0, [r5, #8]
    964e:	f043 0310 	orr.w	r3, r3, #16
    9652:	7363      	strb	r3, [r4, #13]
    9654:	1b03      	subs	r3, r0, r4
    9656:	4258      	negs	r0, r3
    9658:	4158      	adcs	r0, r3
    965a:	f7ff fe53 	bl	9304 <update_cache>
	__asm__ volatile(
    965e:	f386 8811 	msr	BASEPRI, r6
    9662:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    9666:	68ab      	ldr	r3, [r5, #8]
    9668:	42a3      	cmp	r3, r4
    966a:	d103      	bne.n	9674 <z_impl_k_thread_suspend+0x5c>
}
    966c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    9670:	f002 b88c 	b.w	b78c <z_reschedule_unlocked>
}
    9674:	bd70      	pop	{r4, r5, r6, pc}
    9676:	bf00      	nop
    9678:	20001a48 	.word	0x20001a48

0000967c <k_sched_unlock>:
{
    967c:	b510      	push	{r4, lr}
	__asm__ volatile(
    967e:	f04f 0320 	mov.w	r3, #32
    9682:	f3ef 8411 	mrs	r4, BASEPRI
    9686:	f383 8812 	msr	BASEPRI_MAX, r3
    968a:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
    968e:	4b08      	ldr	r3, [pc, #32]	; (96b0 <k_sched_unlock+0x34>)
    9690:	689a      	ldr	r2, [r3, #8]
    9692:	7bd3      	ldrb	r3, [r2, #15]
    9694:	3301      	adds	r3, #1
    9696:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    9698:	2000      	movs	r0, #0
    969a:	f7ff fe33 	bl	9304 <update_cache>
	__asm__ volatile(
    969e:	f384 8811 	msr	BASEPRI, r4
    96a2:	f3bf 8f6f 	isb	sy
}
    96a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
    96aa:	f002 b86f 	b.w	b78c <z_reschedule_unlocked>
    96ae:	bf00      	nop
    96b0:	20001a48 	.word	0x20001a48

000096b4 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    96b4:	4b04      	ldr	r3, [pc, #16]	; (96c8 <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    96b6:	2100      	movs	r1, #0
    96b8:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    96bc:	e9c3 2208 	strd	r2, r2, [r3, #32]
    96c0:	4608      	mov	r0, r1
    96c2:	f7ff bdc7 	b.w	9254 <k_sched_time_slice_set>
    96c6:	bf00      	nop
    96c8:	20001a48 	.word	0x20001a48

000096cc <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    96cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
    96ce:	f04f 0320 	mov.w	r3, #32
    96d2:	f3ef 8511 	mrs	r5, BASEPRI
    96d6:	f383 8812 	msr	BASEPRI_MAX, r3
    96da:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    96de:	491a      	ldr	r1, [pc, #104]	; (9748 <z_impl_k_yield+0x7c>)
    96e0:	6888      	ldr	r0, [r1, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    96e2:	7b43      	ldrb	r3, [r0, #13]
    96e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    96e8:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    96ea:	f002 f80d 	bl	b708 <sys_dlist_remove>
	}
	queue_thread(_current);
    96ee:	688b      	ldr	r3, [r1, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    96f0:	7b5a      	ldrb	r2, [r3, #13]
	return list->head == list;
    96f2:	4608      	mov	r0, r1
    96f4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    96f8:	735a      	strb	r2, [r3, #13]
    96fa:	f850 2f20 	ldr.w	r2, [r0, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    96fe:	4282      	cmp	r2, r0
    9700:	d01c      	beq.n	973c <z_impl_k_yield+0x70>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9702:	b1da      	cbz	r2, 973c <z_impl_k_yield+0x70>
	return (node == list->tail) ? NULL : node->next;
    9704:	6a4f      	ldr	r7, [r1, #36]	; 0x24
	int32_t b1 = thread_1->base.prio;
    9706:	f993 600e 	ldrsb.w	r6, [r3, #14]
	int32_t b2 = thread_2->base.prio;
    970a:	f992 400e 	ldrsb.w	r4, [r2, #14]
	if (b1 != b2) {
    970e:	42a6      	cmp	r6, r4
    9710:	d00f      	beq.n	9732 <z_impl_k_yield+0x66>
		return b2 - b1;
    9712:	1ba4      	subs	r4, r4, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    9714:	2c00      	cmp	r4, #0
    9716:	dd0c      	ble.n	9732 <z_impl_k_yield+0x66>
	sys_dnode_t *const prev = successor->prev;
    9718:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
    971a:	e9c3 2100 	strd	r2, r1, [r3]
	prev->next = node;
    971e:	600b      	str	r3, [r1, #0]
	successor->prev = node;
    9720:	6053      	str	r3, [r2, #4]
	update_cache(1);
    9722:	2001      	movs	r0, #1
    9724:	f7ff fdee 	bl	9304 <update_cache>
    9728:	4628      	mov	r0, r5
	z_swap(&sched_spinlock, key);
}
    972a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    972e:	f7f9 bb31 	b.w	2d94 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    9732:	42ba      	cmp	r2, r7
    9734:	d002      	beq.n	973c <z_impl_k_yield+0x70>
    9736:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    9738:	2a00      	cmp	r2, #0
    973a:	d1e6      	bne.n	970a <z_impl_k_yield+0x3e>
	sys_dnode_t *const tail = list->tail;
    973c:	6a4a      	ldr	r2, [r1, #36]	; 0x24
	node->prev = tail;
    973e:	e9c3 0200 	strd	r0, r2, [r3]
	tail->next = node;
    9742:	6013      	str	r3, [r2, #0]
	list->tail = node;
    9744:	624b      	str	r3, [r1, #36]	; 0x24
}
    9746:	e7ec      	b.n	9722 <z_impl_k_yield+0x56>
    9748:	20001a48 	.word	0x20001a48

0000974c <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    974c:	ea50 0301 	orrs.w	r3, r0, r1
{
    9750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9754:	4605      	mov	r5, r0
    9756:	460e      	mov	r6, r1
	if (ticks == 0) {
    9758:	d103      	bne.n	9762 <z_tick_sleep+0x16>
	z_impl_k_yield();
    975a:	f7ff ffb7 	bl	96cc <z_impl_k_yield>
	if (ticks > 0) {
		return ticks;
	}
#endif

	return 0;
    975e:	2000      	movs	r0, #0
    9760:	e033      	b.n	97ca <z_tick_sleep+0x7e>
	if (Z_TICK_ABS(ticks) <= 0) {
    9762:	f06f 0401 	mvn.w	r4, #1
    9766:	1a24      	subs	r4, r4, r0
    9768:	f04f 33ff 	mov.w	r3, #4294967295
    976c:	eb63 0301 	sbc.w	r3, r3, r1
    9770:	2c01      	cmp	r4, #1
    9772:	f173 0300 	sbcs.w	r3, r3, #0
    9776:	da02      	bge.n	977e <z_tick_sleep+0x32>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    9778:	f002 f90e 	bl	b998 <sys_clock_tick_get_32>
    977c:	1944      	adds	r4, r0, r5
    977e:	f04f 0320 	mov.w	r3, #32
    9782:	f3ef 8811 	mrs	r8, BASEPRI
    9786:	f383 8812 	msr	BASEPRI_MAX, r3
    978a:	f3bf 8f6f 	isb	sy
	pending_current = _current;
    978e:	4f10      	ldr	r7, [pc, #64]	; (97d0 <z_tick_sleep+0x84>)
    9790:	4b10      	ldr	r3, [pc, #64]	; (97d4 <z_tick_sleep+0x88>)
    9792:	68b8      	ldr	r0, [r7, #8]
    9794:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    9796:	f7ff fea5 	bl	94e4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    979a:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    979c:	490e      	ldr	r1, [pc, #56]	; (97d8 <z_tick_sleep+0x8c>)
    979e:	462a      	mov	r2, r5
    97a0:	4633      	mov	r3, r6
    97a2:	3018      	adds	r0, #24
    97a4:	f000 f902 	bl	99ac <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    97a8:	68ba      	ldr	r2, [r7, #8]
    97aa:	7b53      	ldrb	r3, [r2, #13]
    97ac:	f043 0310 	orr.w	r3, r3, #16
    97b0:	7353      	strb	r3, [r2, #13]
    97b2:	4640      	mov	r0, r8
    97b4:	f7f9 faee 	bl	2d94 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    97b8:	f002 f8ee 	bl	b998 <sys_clock_tick_get_32>
    97bc:	1a20      	subs	r0, r4, r0
    97be:	eb63 0303 	sbc.w	r3, r3, r3
	if (ticks > 0) {
    97c2:	2801      	cmp	r0, #1
    97c4:	f173 0300 	sbcs.w	r3, r3, #0
    97c8:	dbc9      	blt.n	975e <z_tick_sleep+0x12>
}
    97ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    97ce:	bf00      	nop
    97d0:	20001a48 	.word	0x20001a48
    97d4:	20001a78 	.word	0x20001a78
    97d8:	0000b7cd 	.word	0x0000b7cd

000097dc <z_impl_k_sleep>:
	__ASSERT(!arch_is_in_isr(), "");

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    97dc:	f1b1 3fff 	cmp.w	r1, #4294967295
    97e0:	bf08      	it	eq
    97e2:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    97e6:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    97e8:	d106      	bne.n	97f8 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
    97ea:	4b08      	ldr	r3, [pc, #32]	; (980c <z_impl_k_sleep+0x30>)
    97ec:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    97ee:	f7ff ff13 	bl	9618 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    97f2:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    97f6:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
    97f8:	f7ff ffa8 	bl	974c <z_tick_sleep>
			return ((t * to_hz + off) / from_hz);
    97fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    9800:	fb80 0303 	smull	r0, r3, r0, r3
    9804:	0bc0      	lsrs	r0, r0, #15
    9806:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return ret;
    980a:	e7f4      	b.n	97f6 <z_impl_k_sleep+0x1a>
    980c:	20001a48 	.word	0x20001a48

00009810 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    9810:	4b01      	ldr	r3, [pc, #4]	; (9818 <z_impl_z_current_get+0x8>)
    9812:	6898      	ldr	r0, [r3, #8]
    9814:	4770      	bx	lr
    9816:	bf00      	nop
    9818:	20001a48 	.word	0x20001a48

0000981c <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    981c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9820:	4604      	mov	r4, r0
    9822:	f04f 0320 	mov.w	r3, #32
    9826:	f3ef 8611 	mrs	r6, BASEPRI
    982a:	f383 8812 	msr	BASEPRI_MAX, r3
    982e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    9832:	7b43      	ldrb	r3, [r0, #13]
    9834:	071a      	lsls	r2, r3, #28
    9836:	d505      	bpl.n	9844 <z_thread_abort+0x28>
	__asm__ volatile(
    9838:	f386 8811 	msr	BASEPRI, r6
    983c:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    9840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    9844:	f023 0220 	bic.w	r2, r3, #32
    9848:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    984c:	09d2      	lsrs	r2, r2, #7
    984e:	d120      	bne.n	9892 <z_thread_abort+0x76>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    9850:	7341      	strb	r1, [r0, #13]
		if (thread->base.pended_on != NULL) {
    9852:	68a3      	ldr	r3, [r4, #8]
    9854:	b113      	cbz	r3, 985c <z_thread_abort+0x40>
			unpend_thread_no_timeout(thread);
    9856:	4620      	mov	r0, r4
    9858:	f001 ff5e 	bl	b718 <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    985c:	f104 0018 	add.w	r0, r4, #24
    9860:	f002 f85a 	bl	b918 <z_abort_timeout>
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    9864:	f104 0758 	add.w	r7, r4, #88	; 0x58
    9868:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    986c:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    986e:	42bd      	cmp	r5, r7
    9870:	d000      	beq.n	9874 <z_thread_abort+0x58>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    9872:	b9b5      	cbnz	r5, 98a2 <z_thread_abort+0x86>
		update_cache(1);
    9874:	2001      	movs	r0, #1
    9876:	f7ff fd45 	bl	9304 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    987a:	4b10      	ldr	r3, [pc, #64]	; (98bc <z_thread_abort+0xa0>)
    987c:	689b      	ldr	r3, [r3, #8]
    987e:	42a3      	cmp	r3, r4
    9880:	d1da      	bne.n	9838 <z_thread_abort+0x1c>
    9882:	f3ef 8305 	mrs	r3, IPSR
    9886:	2b00      	cmp	r3, #0
    9888:	d1d6      	bne.n	9838 <z_thread_abort+0x1c>
    988a:	4630      	mov	r0, r6
    988c:	f7f9 fa82 	bl	2d94 <arch_swap>
	return ret;
    9890:	e7d2      	b.n	9838 <z_thread_abort+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    9892:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    9896:	f043 0308 	orr.w	r3, r3, #8
    989a:	7343      	strb	r3, [r0, #13]
	sys_dlist_remove(&thread->base.qnode_dlist);
    989c:	f001 ff34 	bl	b708 <sys_dlist_remove>
}
    98a0:	e7d7      	b.n	9852 <z_thread_abort+0x36>
		unpend_thread_no_timeout(thread);
    98a2:	4628      	mov	r0, r5
    98a4:	f001 ff38 	bl	b718 <unpend_thread_no_timeout>
    98a8:	f105 0018 	add.w	r0, r5, #24
    98ac:	f002 f834 	bl	b918 <z_abort_timeout>
    98b0:	f8c5 8078 	str.w	r8, [r5, #120]	; 0x78
		ready_thread(thread);
    98b4:	4628      	mov	r0, r5
    98b6:	f7ff fdc1 	bl	943c <ready_thread>
    98ba:	e7d7      	b.n	986c <z_thread_abort+0x50>
    98bc:	20001a48 	.word	0x20001a48

000098c0 <z_sched_wait>:
	return ret;
}

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    98c0:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    98c2:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    98c6:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    98c8:	e9cd 6700 	strd	r6, r7, [sp]
    98cc:	f7ff fe48 	bl	9560 <z_pend_curr>

	if (data != NULL) {
    98d0:	b11c      	cbz	r4, 98da <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    98d2:	4b03      	ldr	r3, [pc, #12]	; (98e0 <z_sched_wait+0x20>)
    98d4:	689b      	ldr	r3, [r3, #8]
    98d6:	695b      	ldr	r3, [r3, #20]
    98d8:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    98da:	b002      	add	sp, #8
    98dc:	bdd0      	pop	{r4, r6, r7, pc}
    98de:	bf00      	nop
    98e0:	20001a48 	.word	0x20001a48

000098e4 <z_data_copy>:
 * @brief Copy the data section from ROM to RAM
 *
 * This routine copies the data section from ROM to RAM.
 */
void z_data_copy(void)
{
    98e4:	b508      	push	{r3, lr}
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
		       __data_region_end - __data_region_start);
    98e6:	4806      	ldr	r0, [pc, #24]	; (9900 <z_data_copy+0x1c>)
	z_early_memcpy(&__data_region_start, &__data_region_load_start,
    98e8:	4a06      	ldr	r2, [pc, #24]	; (9904 <z_data_copy+0x20>)
    98ea:	4907      	ldr	r1, [pc, #28]	; (9908 <z_data_copy+0x24>)
    98ec:	1a12      	subs	r2, r2, r0
    98ee:	f001 fdd2 	bl	b496 <z_early_memcpy>
#else
	z_early_memcpy(&_app_smem_start, &_app_smem_rom_start,
		       _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    98f2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_early_memcpy(&__ramfunc_start, &__ramfunc_load_start,
    98f6:	4a05      	ldr	r2, [pc, #20]	; (990c <z_data_copy+0x28>)
    98f8:	4905      	ldr	r1, [pc, #20]	; (9910 <z_data_copy+0x2c>)
    98fa:	4806      	ldr	r0, [pc, #24]	; (9914 <z_data_copy+0x30>)
    98fc:	f001 bdcb 	b.w	b496 <z_early_memcpy>
    9900:	20000000 	.word	0x20000000
    9904:	20000248 	.word	0x20000248
    9908:	0000e448 	.word	0x0000e448
    990c:	00000000 	.word	0x00000000
    9910:	0000e448 	.word	0x0000e448
    9914:	20000000 	.word	0x20000000

00009918 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    9918:	4b03      	ldr	r3, [pc, #12]	; (9928 <elapsed+0x10>)
    991a:	681b      	ldr	r3, [r3, #0]
    991c:	b90b      	cbnz	r3, 9922 <elapsed+0xa>
    991e:	f7fc b93f 	b.w	5ba0 <sys_clock_elapsed>
}
    9922:	2000      	movs	r0, #0
    9924:	4770      	bx	lr
    9926:	bf00      	nop
    9928:	20001a84 	.word	0x20001a84

0000992c <next_timeout>:
	return list->head == list;
    992c:	4b10      	ldr	r3, [pc, #64]	; (9970 <next_timeout+0x44>)

static int32_t next_timeout(void)
{
    992e:	b510      	push	{r4, lr}
    9930:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9932:	429c      	cmp	r4, r3
    9934:	bf08      	it	eq
    9936:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    9938:	f7ff ffee 	bl	9918 <elapsed>
	int32_t ret;

	if ((to == NULL) ||
    993c:	b1a4      	cbz	r4, 9968 <next_timeout+0x3c>
	    ((int64_t)(to->dticks - ticks_elapsed) > (int64_t)INT_MAX)) {
    993e:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
    9942:	1a1b      	subs	r3, r3, r0
    9944:	eb62 70e0 	sbc.w	r0, r2, r0, asr #31
	if ((to == NULL) ||
    9948:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
    994c:	f170 0200 	sbcs.w	r2, r0, #0
    9950:	da0a      	bge.n	9968 <next_timeout+0x3c>
		ret = MAX_WAIT;
	} else {
		ret = MAX(0, to->dticks - ticks_elapsed);
    9952:	2800      	cmp	r0, #0
    9954:	bfac      	ite	ge
    9956:	4618      	movge	r0, r3
    9958:	2000      	movlt	r0, #0
	}

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    995a:	4b06      	ldr	r3, [pc, #24]	; (9974 <next_timeout+0x48>)
    995c:	691b      	ldr	r3, [r3, #16]
    995e:	b113      	cbz	r3, 9966 <next_timeout+0x3a>
    9960:	4298      	cmp	r0, r3
    9962:	bfa8      	it	ge
    9964:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    9966:	bd10      	pop	{r4, pc}
		ret = MAX_WAIT;
    9968:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    996c:	e7f5      	b.n	995a <next_timeout+0x2e>
    996e:	bf00      	nop
    9970:	200000f0 	.word	0x200000f0
    9974:	20001a48 	.word	0x20001a48

00009978 <remove_timeout>:
{
    9978:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
    997a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    997c:	b168      	cbz	r0, 999a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
    997e:	4a0a      	ldr	r2, [pc, #40]	; (99a8 <remove_timeout+0x30>)
    9980:	6852      	ldr	r2, [r2, #4]
    9982:	4290      	cmp	r0, r2
    9984:	d009      	beq.n	999a <remove_timeout+0x22>
	if (next(t) != NULL) {
    9986:	b143      	cbz	r3, 999a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    9988:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    998c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    9990:	1912      	adds	r2, r2, r4
    9992:	eb41 0105 	adc.w	r1, r1, r5
    9996:	e9c3 2104 	strd	r2, r1, [r3, #16]
 * @param node the node to remove
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	sys_dnode_t *const prev = node->prev;
    999a:	6842      	ldr	r2, [r0, #4]
	sys_dnode_t *const next = node->next;

	prev->next = next;
    999c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    999e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    99a0:	2300      	movs	r3, #0
	node->prev = NULL;
    99a2:	e9c0 3300 	strd	r3, r3, [r0]
}
    99a6:	bd30      	pop	{r4, r5, pc}
    99a8:	200000f0 	.word	0x200000f0

000099ac <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    99ac:	f1b3 3fff 	cmp.w	r3, #4294967295
    99b0:	bf08      	it	eq
    99b2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    99b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    99b8:	4604      	mov	r4, r0
    99ba:	461f      	mov	r7, r3
    99bc:	4615      	mov	r5, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    99be:	d067      	beq.n	9a90 <z_add_timeout+0xe4>
#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
    99c0:	6081      	str	r1, [r0, #8]
	__asm__ volatile(
    99c2:	f04f 0320 	mov.w	r3, #32
    99c6:	f3ef 8611 	mrs	r6, BASEPRI
    99ca:	f383 8812 	msr	BASEPRI_MAX, r3
    99ce:	f3bf 8f6f 	isb	sy

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    99d2:	f06f 0201 	mvn.w	r2, #1
    99d6:	1b53      	subs	r3, r2, r5
    99d8:	f04f 3cff 	mov.w	ip, #4294967295
    99dc:	eb6c 0307 	sbc.w	r3, ip, r7
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    99e0:	2b00      	cmp	r3, #0
    99e2:	db1b      	blt.n	9a1c <z_add_timeout+0x70>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    99e4:	4b2b      	ldr	r3, [pc, #172]	; (9a94 <z_add_timeout+0xe8>)
    99e6:	e9d3 1300 	ldrd	r1, r3, [r3]
    99ea:	1a52      	subs	r2, r2, r1
    99ec:	eb6c 0303 	sbc.w	r3, ip, r3
    99f0:	1b55      	subs	r5, r2, r5

			to->dticks = MAX(1, ticks);
    99f2:	eb63 0307 	sbc.w	r3, r3, r7
    99f6:	2d01      	cmp	r5, #1
    99f8:	f173 0200 	sbcs.w	r2, r3, #0
    99fc:	bfbc      	itt	lt
    99fe:	2501      	movlt	r5, #1
    9a00:	2300      	movlt	r3, #0
    9a02:	e9c0 5304 	strd	r5, r3, [r0, #16]
	return list->head == list;
    9a06:	4824      	ldr	r0, [pc, #144]	; (9a98 <z_add_timeout+0xec>)
	sys_dnode_t *const tail = list->tail;
    9a08:	e9d0 3c00 	ldrd	r3, ip, [r0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9a0c:	4283      	cmp	r3, r0
    9a0e:	d118      	bne.n	9a42 <z_add_timeout+0x96>
	node->prev = tail;
    9a10:	e9c4 0c00 	strd	r0, ip, [r4]
	tail->next = node;
    9a14:	f8cc 4000 	str.w	r4, [ip]
	list->tail = node;
    9a18:	6044      	str	r4, [r0, #4]
}
    9a1a:	e026      	b.n	9a6a <z_add_timeout+0xbe>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    9a1c:	f7ff ff7c 	bl	9918 <elapsed>
    9a20:	3501      	adds	r5, #1
    9a22:	f147 0700 	adc.w	r7, r7, #0
    9a26:	182d      	adds	r5, r5, r0
    9a28:	eb47 77e0 	adc.w	r7, r7, r0, asr #31
    9a2c:	e9c4 5704 	strd	r5, r7, [r4, #16]
    9a30:	e7e9      	b.n	9a06 <z_add_timeout+0x5a>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    9a32:	1a52      	subs	r2, r2, r1
    9a34:	eb65 0507 	sbc.w	r5, r5, r7
	return (node == list->tail) ? NULL : node->next;
    9a38:	459c      	cmp	ip, r3
    9a3a:	e9c4 2504 	strd	r2, r5, [r4, #16]
    9a3e:	d0e7      	beq.n	9a10 <z_add_timeout+0x64>
    9a40:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    9a42:	2b00      	cmp	r3, #0
    9a44:	d0e4      	beq.n	9a10 <z_add_timeout+0x64>
			if (t->dticks > to->dticks) {
    9a46:	e9d3 1704 	ldrd	r1, r7, [r3, #16]
    9a4a:	e9d4 2504 	ldrd	r2, r5, [r4, #16]
    9a4e:	428a      	cmp	r2, r1
    9a50:	eb75 0e07 	sbcs.w	lr, r5, r7
    9a54:	daed      	bge.n	9a32 <z_add_timeout+0x86>
				t->dticks -= to->dticks;
    9a56:	1a8a      	subs	r2, r1, r2
    9a58:	eb67 0505 	sbc.w	r5, r7, r5
    9a5c:	e9c3 2504 	strd	r2, r5, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    9a60:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    9a62:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    9a66:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    9a68:	605c      	str	r4, [r3, #4]
	return list->head == list;
    9a6a:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9a6c:	4283      	cmp	r3, r0
    9a6e:	d00b      	beq.n	9a88 <z_add_timeout+0xdc>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    9a70:	429c      	cmp	r4, r3
    9a72:	d109      	bne.n	9a88 <z_add_timeout+0xdc>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    9a74:	f7ff ff5a 	bl	992c <next_timeout>

			if (next_time == 0 ||
    9a78:	b118      	cbz	r0, 9a82 <z_add_timeout+0xd6>
			    _current_cpu->slice_ticks != next_time) {
    9a7a:	4b08      	ldr	r3, [pc, #32]	; (9a9c <z_add_timeout+0xf0>)
			if (next_time == 0 ||
    9a7c:	691b      	ldr	r3, [r3, #16]
    9a7e:	4283      	cmp	r3, r0
    9a80:	d002      	beq.n	9a88 <z_add_timeout+0xdc>
				sys_clock_set_timeout(next_time, false);
    9a82:	2100      	movs	r1, #0
    9a84:	f7fc f85a 	bl	5b3c <sys_clock_set_timeout>
	__asm__ volatile(
    9a88:	f386 8811 	msr	BASEPRI, r6
    9a8c:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    9a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9a92:	bf00      	nop
    9a94:	20000af0 	.word	0x20000af0
    9a98:	200000f0 	.word	0x200000f0
    9a9c:	20001a48 	.word	0x20001a48

00009aa0 <sys_clock_announce>:
		}
	}
}

void sys_clock_announce(int32_t ticks)
{
    9aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9aa4:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    9aa6:	f7ff fc87 	bl	93b8 <z_time_slice>
	__asm__ volatile(
    9aaa:	f04f 0320 	mov.w	r3, #32
    9aae:	f3ef 8411 	mrs	r4, BASEPRI
    9ab2:	f383 8812 	msr	BASEPRI_MAX, r3
    9ab6:	f3bf 8f6f 	isb	sy
		announce_remaining += ticks;
		k_spin_unlock(&timeout_lock, key);
		return;
	}

	announce_remaining = ticks;
    9aba:	4e24      	ldr	r6, [pc, #144]	; (9b4c <sys_clock_announce+0xac>)
	return list->head == list;
    9abc:	f8df 8090 	ldr.w	r8, [pc, #144]	; 9b50 <sys_clock_announce+0xb0>
    9ac0:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
    9ac2:	4d24      	ldr	r5, [pc, #144]	; (9b54 <sys_clock_announce+0xb4>)
    9ac4:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
    9ac8:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9aca:	4540      	cmp	r0, r8
		curr_tick += dt;
    9acc:	e9d5 1e00 	ldrd	r1, lr, [r5]
    9ad0:	ea4f 77e2 	mov.w	r7, r2, asr #31
    9ad4:	d00b      	beq.n	9aee <sys_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
    9ad6:	b150      	cbz	r0, 9aee <sys_clock_announce+0x4e>
    9ad8:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
    9adc:	429a      	cmp	r2, r3
    9ade:	eb77 090c 	sbcs.w	r9, r7, ip
    9ae2:	da16      	bge.n	9b12 <sys_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    9ae4:	1a9b      	subs	r3, r3, r2
    9ae6:	eb6c 0c07 	sbc.w	ip, ip, r7
    9aea:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
    9aee:	1852      	adds	r2, r2, r1
    9af0:	eb4e 0707 	adc.w	r7, lr, r7
    9af4:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
    9af8:	2500      	movs	r5, #0
    9afa:	6035      	str	r5, [r6, #0]

	sys_clock_set_timeout(next_timeout(), false);
    9afc:	f7ff ff16 	bl	992c <next_timeout>
    9b00:	4629      	mov	r1, r5
    9b02:	f7fc f81b 	bl	5b3c <sys_clock_set_timeout>
	__asm__ volatile(
    9b06:	f384 8811 	msr	BASEPRI, r4
    9b0a:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    9b0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
    9b12:	1859      	adds	r1, r3, r1
    9b14:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
    9b18:	1ad3      	subs	r3, r2, r3
    9b1a:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
    9b1c:	2200      	movs	r2, #0
    9b1e:	2300      	movs	r3, #0
    9b20:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
    9b24:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
    9b28:	f7ff ff26 	bl	9978 <remove_timeout>
    9b2c:	f384 8811 	msr	BASEPRI, r4
    9b30:	f3bf 8f6f 	isb	sy
		t->fn(t);
    9b34:	6883      	ldr	r3, [r0, #8]
    9b36:	4798      	blx	r3
	__asm__ volatile(
    9b38:	f04f 0320 	mov.w	r3, #32
    9b3c:	f3ef 8411 	mrs	r4, BASEPRI
    9b40:	f383 8812 	msr	BASEPRI_MAX, r3
    9b44:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
    9b48:	e7bc      	b.n	9ac4 <sys_clock_announce+0x24>
    9b4a:	bf00      	nop
    9b4c:	20001a84 	.word	0x20001a84
    9b50:	200000f0 	.word	0x200000f0
    9b54:	20000af0 	.word	0x20000af0

00009b58 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    9b58:	b510      	push	{r4, lr}
    9b5a:	f04f 0320 	mov.w	r3, #32
    9b5e:	f3ef 8411 	mrs	r4, BASEPRI
    9b62:	f383 8812 	msr	BASEPRI_MAX, r3
    9b66:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    9b6a:	f7fc f819 	bl	5ba0 <sys_clock_elapsed>
    9b6e:	4a05      	ldr	r2, [pc, #20]	; (9b84 <sys_clock_tick_get+0x2c>)
    9b70:	e9d2 3100 	ldrd	r3, r1, [r2]
    9b74:	18c0      	adds	r0, r0, r3
    9b76:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
    9b7a:	f384 8811 	msr	BASEPRI, r4
    9b7e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    9b82:	bd10      	pop	{r4, pc}
    9b84:	20000af0 	.word	0x20000af0

00009b88 <z_timer_expiration_handler>:
 * @brief Handle expiration of a kernel timer object.
 *
 * @param t  Timeout used by the timer.
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    9b88:	b570      	push	{r4, r5, r6, lr}
    9b8a:	4604      	mov	r4, r0
	__asm__ volatile(
    9b8c:	f04f 0320 	mov.w	r3, #32
    9b90:	f3ef 8511 	mrs	r5, BASEPRI
    9b94:	f383 8812 	msr	BASEPRI_MAX, r3
    9b98:	f3bf 8f6f 	isb	sy

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    9b9c:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
    9ba0:	3301      	adds	r3, #1
    9ba2:	f142 0200 	adc.w	r2, r2, #0
    9ba6:	2b02      	cmp	r3, #2
    9ba8:	f172 0300 	sbcs.w	r3, r2, #0
    9bac:	d304      	bcc.n	9bb8 <z_timer_expiration_handler+0x30>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9bae:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
    9bb2:	4917      	ldr	r1, [pc, #92]	; (9c10 <z_timer_expiration_handler+0x88>)
    9bb4:	f7ff fefa 	bl	99ac <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    9bb8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    9bba:	3301      	adds	r3, #1
    9bbc:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    9bbe:	6a23      	ldr	r3, [r4, #32]
    9bc0:	b173      	cbz	r3, 9be0 <z_timer_expiration_handler+0x58>
	__asm__ volatile(
    9bc2:	f385 8811 	msr	BASEPRI, r5
    9bc6:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    9bca:	6a23      	ldr	r3, [r4, #32]
    9bcc:	4620      	mov	r0, r4
    9bce:	4798      	blx	r3
	__asm__ volatile(
    9bd0:	f04f 0320 	mov.w	r3, #32
    9bd4:	f3ef 8511 	mrs	r5, BASEPRI
    9bd8:	f383 8812 	msr	BASEPRI_MAX, r3
    9bdc:	f3bf 8f6f 	isb	sy
	return list->head == list;
    9be0:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    9be4:	42a6      	cmp	r6, r4
    9be6:	d000      	beq.n	9bea <z_timer_expiration_handler+0x62>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    9be8:	b926      	cbnz	r6, 9bf4 <z_timer_expiration_handler+0x6c>
	__asm__ volatile(
    9bea:	f385 8811 	msr	BASEPRI, r5
    9bee:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    9bf2:	bd70      	pop	{r4, r5, r6, pc}
	z_unpend_thread_no_timeout(thread);
    9bf4:	4630      	mov	r0, r6
    9bf6:	f001 fd99 	bl	b72c <z_unpend_thread_no_timeout>
    9bfa:	2300      	movs	r3, #0
    9bfc:	67b3      	str	r3, [r6, #120]	; 0x78
    9bfe:	f385 8811 	msr	BASEPRI, r5
    9c02:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    9c06:	4630      	mov	r0, r6
}
    9c08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_ready_thread(thread);
    9c0c:	f001 bdce 	b.w	b7ac <z_ready_thread>
    9c10:	00009b89 	.word	0x00009b89

00009c14 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    9c14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9c18:	4611      	mov	r1, r2
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    9c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
    9c1e:	bf08      	it	eq
    9c20:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
    9c24:	4606      	mov	r6, r0
    9c26:	461c      	mov	r4, r3
    9c28:	e9dd 2008 	ldrd	r2, r0, [sp, #32]
    9c2c:	4689      	mov	r9, r1
    9c2e:	4698      	mov	r8, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    9c30:	d03e      	beq.n	9cb0 <z_impl_k_timer_start+0x9c>
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    9c32:	f1b0 3fff 	cmp.w	r0, #4294967295
    9c36:	bf08      	it	eq
    9c38:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    9c3c:	4615      	mov	r5, r2
    9c3e:	4607      	mov	r7, r0
    9c40:	d014      	beq.n	9c6c <z_impl_k_timer_start+0x58>
    9c42:	ea50 0302 	orrs.w	r3, r0, r2
    9c46:	d011      	beq.n	9c6c <z_impl_k_timer_start+0x58>
	    Z_TICK_ABS(period.ticks) < 0) {
    9c48:	f06f 0301 	mvn.w	r3, #1
    9c4c:	1a9b      	subs	r3, r3, r2
    9c4e:	f04f 33ff 	mov.w	r3, #4294967295
    9c52:	eb63 0300 	sbc.w	r3, r3, r0
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    9c56:	2b00      	cmp	r3, #0
    9c58:	da08      	bge.n	9c6c <z_impl_k_timer_start+0x58>
		period.ticks = MAX(period.ticks - 1, 1);
    9c5a:	2a02      	cmp	r2, #2
    9c5c:	f170 0300 	sbcs.w	r3, r0, #0
    9c60:	bfbc      	itt	lt
    9c62:	2502      	movlt	r5, #2
    9c64:	2700      	movlt	r7, #0
    9c66:	3d01      	subs	r5, #1
    9c68:	f147 37ff 	adc.w	r7, r7, #4294967295
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    9c6c:	f06f 0301 	mvn.w	r3, #1
    9c70:	1a5b      	subs	r3, r3, r1
    9c72:	f04f 33ff 	mov.w	r3, #4294967295
    9c76:	eb63 0304 	sbc.w	r3, r3, r4
    9c7a:	2b00      	cmp	r3, #0
    9c7c:	da09      	bge.n	9c92 <z_impl_k_timer_start+0x7e>
		duration.ticks = MAX(duration.ticks - 1, 0);
    9c7e:	2901      	cmp	r1, #1
    9c80:	f174 0300 	sbcs.w	r3, r4, #0
    9c84:	bfbc      	itt	lt
    9c86:	2101      	movlt	r1, #1
    9c88:	2400      	movlt	r4, #0
    9c8a:	f111 39ff 	adds.w	r9, r1, #4294967295
    9c8e:	f144 38ff 	adc.w	r8, r4, #4294967295
	}

	(void)z_abort_timeout(&timer->timeout);
    9c92:	4630      	mov	r0, r6
    9c94:	f001 fe40 	bl	b918 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    9c98:	2300      	movs	r3, #0
    9c9a:	6333      	str	r3, [r6, #48]	; 0x30
	timer->period = period;
    9c9c:	e9c6 570a 	strd	r5, r7, [r6, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9ca0:	464a      	mov	r2, r9
    9ca2:	4643      	mov	r3, r8
    9ca4:	4630      	mov	r0, r6
    9ca6:	4903      	ldr	r1, [pc, #12]	; (9cb4 <z_impl_k_timer_start+0xa0>)
		     duration);
}
    9ca8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    9cac:	f7ff be7e 	b.w	99ac <z_add_timeout>
}
    9cb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9cb4:	00009b89 	.word	0x00009b89

00009cb8 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
    9cb8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9cba:	4606      	mov	r6, r0
    9cbc:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
    9cbe:	f001 fc15 	bl	b4ec <k_is_in_isr>
    9cc2:	b978      	cbnz	r0, 9ce4 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
    9cc4:	4b0b      	ldr	r3, [pc, #44]	; (9cf4 <z_thread_aligned_alloc+0x3c>)
    9cc6:	689b      	ldr	r3, [r3, #8]
    9cc8:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	}

	if (heap != NULL) {
    9cca:	b17c      	cbz	r4, 9cec <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
    9ccc:	1d2a      	adds	r2, r5, #4
    9cce:	d209      	bcs.n	9ce4 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
    9cd0:	2000      	movs	r0, #0
    9cd2:	2100      	movs	r1, #0
    9cd4:	e9cd 0100 	strd	r0, r1, [sp]
    9cd8:	f046 0104 	orr.w	r1, r6, #4
    9cdc:	4620      	mov	r0, r4
    9cde:	f001 fec6 	bl	ba6e <k_heap_aligned_alloc>
	if (mem == NULL) {
    9ce2:	b908      	cbnz	r0, 9ce8 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
    9ce4:	2400      	movs	r4, #0
	}

	return ret;
    9ce6:	e001      	b.n	9cec <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
    9ce8:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
    9cea:	1d04      	adds	r4, r0, #4
}
    9cec:	4620      	mov	r0, r4
    9cee:	b002      	add	sp, #8
    9cf0:	bd70      	pop	{r4, r5, r6, pc}
    9cf2:	bf00      	nop
    9cf4:	20001a48 	.word	0x20001a48

00009cf8 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    9cf8:	4a02      	ldr	r2, [pc, #8]	; (9d04 <boot_banner+0xc>)
    9cfa:	4903      	ldr	r1, [pc, #12]	; (9d08 <boot_banner+0x10>)
    9cfc:	4803      	ldr	r0, [pc, #12]	; (9d0c <boot_banner+0x14>)
    9cfe:	f000 b8bb 	b.w	9e78 <printk>
    9d02:	bf00      	nop
    9d04:	0000c29a 	.word	0x0000c29a
    9d08:	0000e410 	.word	0x0000e410
    9d0c:	0000e41f 	.word	0x0000e41f

00009d10 <statics_init>:

	SYS_PORT_TRACING_OBJ_INIT(k_heap, h);
}

static int statics_init(const struct device *unused)
{
    9d10:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	STRUCT_SECTION_FOREACH(k_heap, h) {
    9d12:	4c06      	ldr	r4, [pc, #24]	; (9d2c <statics_init+0x1c>)
    9d14:	4d06      	ldr	r5, [pc, #24]	; (9d30 <statics_init+0x20>)
    9d16:	42ac      	cmp	r4, r5
    9d18:	d301      	bcc.n	9d1e <statics_init+0xe>
		{
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
		}
	}
	return 0;
}
    9d1a:	2000      	movs	r0, #0
    9d1c:	bd38      	pop	{r3, r4, r5, pc}
			k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
    9d1e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
    9d22:	4620      	mov	r0, r4
    9d24:	f001 fe9b 	bl	ba5e <k_heap_init>
	STRUCT_SECTION_FOREACH(k_heap, h) {
    9d28:	3414      	adds	r4, #20
    9d2a:	e7f4      	b.n	9d16 <statics_init+0x6>
    9d2c:	2000016c 	.word	0x2000016c
    9d30:	2000016c 	.word	0x2000016c

00009d34 <init_event_queue>:
    event_queue->head = 0;
    9d34:	2100      	movs	r1, #0
    9d36:	f8a0 1078 	strh.w	r1, [r0, #120]	; 0x78
    event_queue->count = 0;
    9d3a:	f880 107a 	strb.w	r1, [r0, #122]	; 0x7a
	return z_impl_k_sem_init(sem, initial_count, limit);
    9d3e:	220a      	movs	r2, #10
    9d40:	307c      	adds	r0, #124	; 0x7c
    9d42:	f001 bc6d 	b.w	b620 <z_impl_k_sem_init>

00009d46 <dequeue_event>:
event_t dequeue_event(event_queue_t* event_queue) {
    9d46:	b570      	push	{r4, r5, r6, lr}
    return event_queue->count == 0;
    9d48:	f891 607a 	ldrb.w	r6, [r1, #122]	; 0x7a
event_t dequeue_event(event_queue_t* event_queue) {
    9d4c:	4603      	mov	r3, r0
    9d4e:	460c      	mov	r4, r1
    if (is_queue_empty(event_queue)) {
    9d50:	b91e      	cbnz	r6, 9d5a <dequeue_event+0x14>
        return event;
    9d52:	2204      	movs	r2, #4
    return event;
    9d54:	701a      	strb	r2, [r3, #0]
}
    9d56:	4618      	mov	r0, r3
    9d58:	bd70      	pop	{r4, r5, r6, pc}
    event = event_queue->events[event_queue->head];
    9d5a:	f891 5078 	ldrb.w	r5, [r1, #120]	; 0x78
    9d5e:	220c      	movs	r2, #12
    9d60:	fb02 1205 	mla	r2, r2, r5, r1
    9d64:	ca07      	ldmia	r2, {r0, r1, r2}
    9d66:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    9d6a:	eb05 0245 	add.w	r2, r5, r5, lsl #1
    event_queue->head = (event_queue->head + 1) & NUM_EVENTS;
    9d6e:	3501      	adds	r5, #1
    9d70:	f005 050a 	and.w	r5, r5, #10
    event_queue->count--;
    9d74:	3e01      	subs	r6, #1
    event = event_queue->events[event_queue->head];
    9d76:	f814 2022 	ldrb.w	r2, [r4, r2, lsl #2]
    event_queue->head = (event_queue->head + 1) & NUM_EVENTS;
    9d7a:	f884 5078 	strb.w	r5, [r4, #120]	; 0x78
    event_queue->count--;
    9d7e:	f884 607a 	strb.w	r6, [r4, #122]	; 0x7a
    9d82:	e7e7      	b.n	9d54 <dequeue_event+0xe>

00009d84 <start_event_manager>:
    k_thread_start(event_manager->event_manager_tid);
    9d84:	f8d0 009c 	ldr.w	r0, [r0, #156]	; 0x9c
	z_impl_k_thread_start(thread);
    9d88:	f001 bbbb 	b.w	b502 <z_impl_k_thread_start>

00009d8c <get_dx>:
    //     }
    //     k_spin_unlock(&pmw3360_dev.state.lock, key);
    }
}

int16_t get_dx(const struct device *pmw3360) {
    9d8c:	b507      	push	{r0, r1, r2, lr}
    9d8e:	6883      	ldr	r3, [r0, #8]
    9d90:	466a      	mov	r2, sp
    9d92:	691b      	ldr	r3, [r3, #16]
    9d94:	2123      	movs	r1, #35	; 0x23
    9d96:	4798      	blx	r3
    struct sensor_value x;
	sensor_channel_get(pmw3360, SENSOR_CHAN_POS_DX, &x);
    return x.val1;
}
    9d98:	f9bd 0000 	ldrsh.w	r0, [sp]
    9d9c:	b003      	add	sp, #12
    9d9e:	f85d fb04 	ldr.w	pc, [sp], #4

00009da2 <motion_thread>:
void motion_thread(void) {
    9da2:	b508      	push	{r3, lr}
    init_pmw3360();
    9da4:	f7f6 fbba 	bl	51c <init_pmw3360>
        read_motion();
    9da8:	f7f6 fbce 	bl	548 <read_motion>
    for (;;) {
    9dac:	e7fc      	b.n	9da8 <motion_thread+0x6>

00009dae <hid_write>:
    // return usb_enable(status_callback);
}

int hid_write(USB_Data *data, uint8_t msg) {
    int ret = 0;
    ret = hid_int_ep_write(data->device, msg, 6, NULL);
    9dae:	6800      	ldr	r0, [r0, #0]
    9db0:	2300      	movs	r3, #0
    9db2:	2206      	movs	r2, #6
    9db4:	f7f9 be9c 	b.w	3af0 <hid_int_ep_write>

00009db8 <cbpprintf_external>:
{
    9db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9dbc:	4607      	mov	r7, r0
    9dbe:	460e      	mov	r6, r1
    9dc0:	4690      	mov	r8, r2
	if (buf == NULL) {
    9dc2:	461d      	mov	r5, r3
    9dc4:	b30b      	cbz	r3, 9e0a <cbpprintf_external+0x52>
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    9dc6:	7818      	ldrb	r0, [r3, #0]
	ros_nbr   = buf[2];
    9dc8:	789c      	ldrb	r4, [r3, #2]
	s_nbr     = buf[1];
    9dca:	f893 a001 	ldrb.w	sl, [r3, #1]
	rws_nbr   = buf[3];
    9dce:	78db      	ldrb	r3, [r3, #3]
	s = (char *)(buf + args_size + ros_nbr + rws_nbr);
    9dd0:	441c      	add	r4, r3
    9dd2:	eb04 0480 	add.w	r4, r4, r0, lsl #2
    9dd6:	442c      	add	r4, r5
	for (i = 0; i < s_nbr; i++) {
    9dd8:	f04f 0900 	mov.w	r9, #0
    9ddc:	45d1      	cmp	r9, sl
    9dde:	d308      	bcc.n	9df2 <cbpprintf_external+0x3a>
	return formatter(out, ctx, fmt, u.ap);
    9de0:	686a      	ldr	r2, [r5, #4]
    9de2:	f105 0308 	add.w	r3, r5, #8
    9de6:	4641      	mov	r1, r8
    9de8:	4638      	mov	r0, r7
    9dea:	46b4      	mov	ip, r6
}
    9dec:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return formatter(out, ctx, fmt, u.ap);
    9df0:	4760      	bx	ip
		ps = (char **)(buf + s_idx * sizeof(int));
    9df2:	f814 3b01 	ldrb.w	r3, [r4], #1
		*ps = s;
    9df6:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
		s += strlen(s) + 1;
    9dfa:	4620      	mov	r0, r4
    9dfc:	f000 feb2 	bl	ab64 <strlen>
    9e00:	3001      	adds	r0, #1
    9e02:	4404      	add	r4, r0
	for (i = 0; i < s_nbr; i++) {
    9e04:	f109 0901 	add.w	r9, r9, #1
    9e08:	e7e8      	b.n	9ddc <cbpprintf_external+0x24>
}
    9e0a:	f06f 0015 	mvn.w	r0, #21
    9e0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00009e12 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
    9e12:	4603      	mov	r3, r0
    9e14:	b158      	cbz	r0, 9e2e <sys_notify_validate+0x1c>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9e16:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    9e18:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
    9e1c:	2a01      	cmp	r2, #1
    9e1e:	d003      	beq.n	9e28 <sys_notify_validate+0x16>
    9e20:	2a03      	cmp	r2, #3
    9e22:	d104      	bne.n	9e2e <sys_notify_validate+0x1c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		if (notify->method.callback == NULL) {
    9e24:	6802      	ldr	r2, [r0, #0]
    9e26:	b112      	cbz	r2, 9e2e <sys_notify_validate+0x1c>
		break;
	}

	/* Clear the result here instead of in all callers. */
	if (rv == 0) {
		notify->result = 0;
    9e28:	2000      	movs	r0, #0
    9e2a:	6098      	str	r0, [r3, #8]
    9e2c:	4770      	bx	lr
		return -EINVAL;
    9e2e:	f06f 0015 	mvn.w	r0, #21
	}

	return rv;
}
    9e32:	4770      	bx	lr

00009e34 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    9e34:	6842      	ldr	r2, [r0, #4]
	uint32_t method = sys_notify_get_method(notify);

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
    9e36:	6081      	str	r1, [r0, #8]
	return method & SYS_NOTIFY_METHOD_MASK;
    9e38:	f002 0203 	and.w	r2, r2, #3
	switch (method) {
    9e3c:	2a03      	cmp	r2, #3
    9e3e:	f04f 0200 	mov.w	r2, #0
{
    9e42:	4603      	mov	r3, r0
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    9e44:	bf0c      	ite	eq
    9e46:	6800      	ldreq	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    9e48:	4610      	movne	r0, r2
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    9e4a:	605a      	str	r2, [r3, #4]
	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    9e4c:	4770      	bx	lr

00009e4e <arch_printk_char_out>:
}
    9e4e:	2000      	movs	r0, #0
    9e50:	4770      	bx	lr

00009e52 <str_out>:
{
    9e52:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    9e54:	688a      	ldr	r2, [r1, #8]
    9e56:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
    9e58:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
    9e5a:	b114      	cbz	r4, 9e62 <str_out+0x10>
    9e5c:	684b      	ldr	r3, [r1, #4]
    9e5e:	4293      	cmp	r3, r2
    9e60:	dc01      	bgt.n	9e66 <str_out+0x14>
		ctx->count++;
    9e62:	608d      	str	r5, [r1, #8]
}
    9e64:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
    9e66:	3b01      	subs	r3, #1
    9e68:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
    9e6a:	bf08      	it	eq
    9e6c:	2200      	moveq	r2, #0
    9e6e:	608d      	str	r5, [r1, #8]
    9e70:	bf0c      	ite	eq
    9e72:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
    9e74:	54a0      	strbne	r0, [r4, r2]
    9e76:	e7f5      	b.n	9e64 <str_out+0x12>

00009e78 <printk>:
{
    9e78:	b40f      	push	{r0, r1, r2, r3}
    9e7a:	b507      	push	{r0, r1, r2, lr}
    9e7c:	a904      	add	r1, sp, #16
    9e7e:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    9e82:	9101      	str	r1, [sp, #4]
		z_log_vprintk(fmt, ap);
    9e84:	f000 fd51 	bl	a92a <z_log_vprintk>
}
    9e88:	b003      	add	sp, #12
    9e8a:	f85d eb04 	ldr.w	lr, [sp], #4
    9e8e:	b004      	add	sp, #16
    9e90:	4770      	bx	lr

00009e92 <snprintk>:
{
    9e92:	b40c      	push	{r2, r3}
    9e94:	b507      	push	{r0, r1, r2, lr}
    9e96:	ab04      	add	r3, sp, #16
    9e98:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
    9e9c:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
    9e9e:	f7f6 ff13 	bl	cc8 <vsnprintk>
}
    9ea2:	b003      	add	sp, #12
    9ea4:	f85d eb04 	ldr.w	lr, [sp], #4
    9ea8:	b002      	add	sp, #8
    9eaa:	4770      	bx	lr

00009eac <sys_slist_find_and_remove>:
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9eac:	b510      	push	{r4, lr}
    9eae:	4603      	mov	r3, r0
	return list->head;
    9eb0:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9eb2:	2200      	movs	r2, #0
    9eb4:	b158      	cbz	r0, 9ece <sys_slist_find_and_remove+0x22>
    9eb6:	4288      	cmp	r0, r1
    9eb8:	d10f      	bne.n	9eda <sys_slist_find_and_remove+0x2e>
	return node->next;
    9eba:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    9ebc:	685c      	ldr	r4, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    9ebe:	b93a      	cbnz	r2, 9ed0 <sys_slist_find_and_remove+0x24>
    9ec0:	42a1      	cmp	r1, r4
	list->head = node;
    9ec2:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
    9ec4:	d100      	bne.n	9ec8 <sys_slist_find_and_remove+0x1c>
	list->tail = node;
    9ec6:	6058      	str	r0, [r3, #4]
	parent->next = child;
    9ec8:	2300      	movs	r3, #0
    9eca:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9ecc:	2001      	movs	r0, #1
    9ece:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
    9ed0:	42a1      	cmp	r1, r4
	parent->next = child;
    9ed2:	6010      	str	r0, [r2, #0]
	list->tail = node;
    9ed4:	bf08      	it	eq
    9ed6:	605a      	streq	r2, [r3, #4]
}
    9ed8:	e7f6      	b.n	9ec8 <sys_slist_find_and_remove+0x1c>
	return node->next;
    9eda:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    9edc:	6800      	ldr	r0, [r0, #0]
    9ede:	e7e9      	b.n	9eb4 <sys_slist_find_and_remove+0x8>

00009ee0 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9ee0:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
    9ee2:	f013 0307 	ands.w	r3, r3, #7
    9ee6:	d105      	bne.n	9ef4 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    9ee8:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
    9eea:	2b00      	cmp	r3, #0
    9eec:	bf0c      	ite	eq
    9eee:	2000      	moveq	r0, #0
    9ef0:	2003      	movne	r0, #3
    9ef2:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    9ef4:	2b02      	cmp	r3, #2
    9ef6:	d105      	bne.n	9f04 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    9ef8:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
    9efa:	2b00      	cmp	r3, #0
    9efc:	bf14      	ite	ne
    9efe:	2000      	movne	r0, #0
    9f00:	2004      	moveq	r0, #4
    9f02:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    9f04:	2b01      	cmp	r3, #1
    9f06:	d105      	bne.n	9f14 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    9f08:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
    9f0a:	2b00      	cmp	r3, #0
    9f0c:	bf0c      	ite	eq
    9f0e:	2000      	moveq	r0, #0
    9f10:	2005      	movne	r0, #5
    9f12:	4770      	bx	lr
	int evt = EVT_NOP;
    9f14:	2000      	movs	r0, #0
}
    9f16:	4770      	bx	lr

00009f18 <notify_one>:
{
    9f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9f1c:	460d      	mov	r5, r1
    9f1e:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9f20:	4619      	mov	r1, r3
    9f22:	1d28      	adds	r0, r5, #4
{
    9f24:	4690      	mov	r8, r2
    9f26:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    9f28:	f7ff ff84 	bl	9e34 <sys_notify_finalize>
	if (cb) {
    9f2c:	4604      	mov	r4, r0
    9f2e:	b138      	cbz	r0, 9f40 <notify_one+0x28>
		cb(mgr, cli, state, res);
    9f30:	4633      	mov	r3, r6
    9f32:	4642      	mov	r2, r8
    9f34:	4629      	mov	r1, r5
    9f36:	4638      	mov	r0, r7
    9f38:	46a4      	mov	ip, r4
}
    9f3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    9f3e:	4760      	bx	ip
}
    9f40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009f44 <transition_complete>:
{
    9f44:	b410      	push	{r4}
	__asm__ volatile(
    9f46:	f04f 0420 	mov.w	r4, #32
    9f4a:	f3ef 8211 	mrs	r2, BASEPRI
    9f4e:	f384 8812 	msr	BASEPRI_MAX, r4
    9f52:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
    9f56:	6141      	str	r1, [r0, #20]
}
    9f58:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
    9f5a:	2101      	movs	r1, #1
    9f5c:	f7f6 bec8 	b.w	cf0 <process_event>

00009f60 <validate_args>:
{
    9f60:	b510      	push	{r4, lr}
    9f62:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    9f64:	b140      	cbz	r0, 9f78 <validate_args+0x18>
    9f66:	b139      	cbz	r1, 9f78 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    9f68:	1d08      	adds	r0, r1, #4
    9f6a:	f7ff ff52 	bl	9e12 <sys_notify_validate>
	if ((rv == 0)
    9f6e:	b928      	cbnz	r0, 9f7c <validate_args+0x1c>
	    && ((cli->notify.flags
    9f70:	68a3      	ldr	r3, [r4, #8]
    9f72:	f033 0303 	bics.w	r3, r3, #3
    9f76:	d001      	beq.n	9f7c <validate_args+0x1c>
		rv = -EINVAL;
    9f78:	f06f 0015 	mvn.w	r0, #21
}
    9f7c:	bd10      	pop	{r4, pc}

00009f7e <onoff_manager_init>:
{
    9f7e:	b538      	push	{r3, r4, r5, lr}
    9f80:	460c      	mov	r4, r1
	if ((mgr == NULL)
    9f82:	4605      	mov	r5, r0
    9f84:	b158      	cbz	r0, 9f9e <onoff_manager_init+0x20>
	    || (transitions == NULL)
    9f86:	b151      	cbz	r1, 9f9e <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    9f88:	680b      	ldr	r3, [r1, #0]
    9f8a:	b143      	cbz	r3, 9f9e <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    9f8c:	684b      	ldr	r3, [r1, #4]
    9f8e:	b133      	cbz	r3, 9f9e <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    9f90:	221c      	movs	r2, #28
    9f92:	2100      	movs	r1, #0
    9f94:	f000 fe0d 	bl	abb2 <memset>
    9f98:	612c      	str	r4, [r5, #16]
	return 0;
    9f9a:	2000      	movs	r0, #0
}
    9f9c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    9f9e:	f06f 0015 	mvn.w	r0, #21
    9fa2:	e7fb      	b.n	9f9c <onoff_manager_init+0x1e>

00009fa4 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    9fa4:	b570      	push	{r4, r5, r6, lr}
    9fa6:	4604      	mov	r4, r0
    9fa8:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    9faa:	f7ff ffd9 	bl	9f60 <validate_args>

	if (rv < 0) {
    9fae:	1e05      	subs	r5, r0, #0
    9fb0:	db31      	blt.n	a016 <onoff_request+0x72>
    9fb2:	f04f 0320 	mov.w	r3, #32
    9fb6:	f3ef 8111 	mrs	r1, BASEPRI
    9fba:	f383 8812 	msr	BASEPRI_MAX, r3
    9fbe:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    9fc2:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    9fc4:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
    9fc6:	f64f 75ff 	movw	r5, #65535	; 0xffff
    9fca:	42ab      	cmp	r3, r5
    9fcc:	f000 0207 	and.w	r2, r0, #7
    9fd0:	d02e      	beq.n	a030 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    9fd2:	2a02      	cmp	r2, #2
    9fd4:	d10e      	bne.n	9ff4 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    9fd6:	3301      	adds	r3, #1
    9fd8:	8363      	strh	r3, [r4, #26]
	rv = state;
    9fda:	4615      	mov	r5, r2
		notify = true;
    9fdc:	2301      	movs	r3, #1
	__asm__ volatile(
    9fde:	f381 8811 	msr	BASEPRI, r1
    9fe2:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    9fe6:	b1b3      	cbz	r3, a016 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
    9fe8:	2300      	movs	r3, #0
    9fea:	4631      	mov	r1, r6
    9fec:	4620      	mov	r0, r4
    9fee:	f7ff ff93 	bl	9f18 <notify_one>
    9ff2:	e010      	b.n	a016 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
    9ff4:	0783      	lsls	r3, r0, #30
    9ff6:	d001      	beq.n	9ffc <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
    9ff8:	2a06      	cmp	r2, #6
    9ffa:	d10e      	bne.n	a01a <onoff_request+0x76>
	parent->next = child;
    9ffc:	2300      	movs	r3, #0
    9ffe:	6033      	str	r3, [r6, #0]
	return list->tail;
    a000:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
    a002:	b993      	cbnz	r3, a02a <onoff_request+0x86>
	list->head = node;
    a004:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
    a008:	4615      	mov	r5, r2
    a00a:	b962      	cbnz	r2, a026 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
    a00c:	460a      	mov	r2, r1
    a00e:	4620      	mov	r0, r4
    a010:	2102      	movs	r1, #2
    a012:	f7f6 fe6d 	bl	cf0 <process_event>
		}
	}

	return rv;
}
    a016:	4628      	mov	r0, r5
    a018:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
    a01a:	2a05      	cmp	r2, #5
    a01c:	bf0c      	ite	eq
    a01e:	f06f 0585 	mvneq.w	r5, #133	; 0x85
    a022:	f06f 0504 	mvnne.w	r5, #4
    a026:	2300      	movs	r3, #0
    a028:	e7d9      	b.n	9fde <onoff_request+0x3a>
	parent->next = child;
    a02a:	601e      	str	r6, [r3, #0]
	list->tail = node;
    a02c:	6066      	str	r6, [r4, #4]
}
    a02e:	e7eb      	b.n	a008 <onoff_request+0x64>
		rv = -EAGAIN;
    a030:	f06f 050a 	mvn.w	r5, #10
    a034:	e7f7      	b.n	a026 <onoff_request+0x82>

0000a036 <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
    a036:	b510      	push	{r4, lr}
	__asm__ volatile(
    a038:	f04f 0320 	mov.w	r3, #32
    a03c:	f3ef 8211 	mrs	r2, BASEPRI
    a040:	f383 8812 	msr	BASEPRI_MAX, r3
    a044:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a048:	8b04      	ldrh	r4, [r0, #24]
    a04a:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
    a04e:	2c02      	cmp	r4, #2
    a050:	d00a      	beq.n	a068 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
    a052:	2c01      	cmp	r4, #1
    a054:	bf0c      	ite	eq
    a056:	f06f 0004 	mvneq.w	r0, #4
    a05a:	f06f 0085 	mvnne.w	r0, #133	; 0x85
	__asm__ volatile(
    a05e:	f382 8811 	msr	BASEPRI, r2
    a062:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
    a066:	e008      	b.n	a07a <onoff_release+0x44>
	mgr->refs -= 1U;
    a068:	8b43      	ldrh	r3, [r0, #26]
    a06a:	3b01      	subs	r3, #1
    a06c:	b29b      	uxth	r3, r3
    a06e:	8343      	strh	r3, [r0, #26]
	if (stop) {
    a070:	b923      	cbnz	r3, a07c <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
    a072:	4621      	mov	r1, r4
    a074:	f7f6 fe3c 	bl	cf0 <process_event>
	int rv = state;
    a078:	4620      	mov	r0, r4
}
    a07a:	bd10      	pop	{r4, pc}
	int rv = state;
    a07c:	4620      	mov	r0, r4
    a07e:	e7ee      	b.n	a05e <onoff_release+0x28>

0000a080 <onoff_cancel>:
	return rv;
}

int onoff_cancel(struct onoff_manager *mgr,
		 struct onoff_client *cli)
{
    a080:	b538      	push	{r3, r4, r5, lr}
	if ((mgr == NULL) || (cli == NULL)) {
    a082:	b1b0      	cbz	r0, a0b2 <onoff_cancel+0x32>
    a084:	b1a9      	cbz	r1, a0b2 <onoff_cancel+0x32>
	__asm__ volatile(
    a086:	f04f 0220 	mov.w	r2, #32
    a08a:	f3ef 8511 	mrs	r5, BASEPRI
    a08e:	f382 8812 	msr	BASEPRI_MAX, r2
    a092:	f3bf 8f6f 	isb	sy
		return -EINVAL;
	}

	int rv = -EALREADY;
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    a096:	8b04      	ldrh	r4, [r0, #24]

	if (sys_slist_find_and_remove(&mgr->clients, &cli->node)) {
    a098:	f7ff ff08 	bl	9eac <sys_slist_find_and_remove>
    a09c:	b130      	cbz	r0, a0ac <onoff_cancel+0x2c>
		__ASSERT_NO_MSG((state == ONOFF_STATE_TO_ON)
				|| (state == ONOFF_STATE_TO_OFF)
				|| (state == ONOFF_STATE_RESETTING));
		rv = state;
    a09e:	f004 0007 	and.w	r0, r4, #7
	__asm__ volatile(
    a0a2:	f385 8811 	msr	BASEPRI, r5
    a0a6:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&mgr->lock, key);

	return rv;
}
    a0aa:	bd38      	pop	{r3, r4, r5, pc}
	int rv = -EALREADY;
    a0ac:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a0b0:	e7f7      	b.n	a0a2 <onoff_cancel+0x22>
		return -EINVAL;
    a0b2:	f06f 0015 	mvn.w	r0, #21
    a0b6:	e7f8      	b.n	a0aa <onoff_cancel+0x2a>

0000a0b8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    a0b8:	4604      	mov	r4, r0
    a0ba:	b508      	push	{r3, lr}
    a0bc:	4608      	mov	r0, r1
    a0be:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    a0c0:	461a      	mov	r2, r3
    a0c2:	47a0      	blx	r4
	return z_impl_z_current_get();
    a0c4:	f7ff fba4 	bl	9810 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    a0c8:	f7f9 fa6c 	bl	35a4 <z_impl_k_thread_abort>

0000a0cc <chunk_size>:
	void *cmem = &buf[c];

	if (big_heap(h)) {
		return ((uint32_t *)cmem)[f];
	} else {
		return ((uint16_t *)cmem)[f];
    a0cc:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    a0d0:	8840      	ldrh	r0, [r0, #2]
}

static inline chunksz_t chunk_size(struct z_heap *h, chunkid_t c)
{
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
}
    a0d2:	0840      	lsrs	r0, r0, #1
    a0d4:	4770      	bx	lr

0000a0d6 <free_list_add>:
	h->free_bytes += chunksz_to_bytes(h, chunk_size(h, c));
#endif
}

static void free_list_add(struct z_heap *h, chunkid_t c)
{
    a0d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a0d8:	4603      	mov	r3, r0
	if (!solo_free_header(h, c)) {
		int bidx = bucket_idx(h, chunk_size(h, c));
    a0da:	f7ff fff7 	bl	a0cc <chunk_size>
}

static inline int bucket_idx(struct z_heap *h, chunksz_t sz)
{
	unsigned int usable_sz = sz - min_chunk_size(h) + 1;
	return 31 - __builtin_clz(usable_sz);
    a0de:	fab0 f080 	clz	r0, r0
    a0e2:	f1c0 001f 	rsb	r0, r0, #31
	if (b->next == 0U) {
    a0e6:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
	void *cmem = &buf[c];
    a0ea:	00ca      	lsls	r2, r1, #3
    a0ec:	f8dc 6010 	ldr.w	r6, [ip, #16]
		((uint16_t *)cmem)[f] = val;
    a0f0:	1d17      	adds	r7, r2, #4
{
    a0f2:	460c      	mov	r4, r1
    a0f4:	3206      	adds	r2, #6
    a0f6:	b28d      	uxth	r5, r1
	if (b->next == 0U) {
    a0f8:	b956      	cbnz	r6, a110 <free_list_add+0x3a>
		h->avail_buckets |= BIT(bidx);
    a0fa:	2101      	movs	r1, #1
    a0fc:	fa01 f000 	lsl.w	r0, r1, r0
    a100:	68d9      	ldr	r1, [r3, #12]
    a102:	4301      	orrs	r1, r0
    a104:	60d9      	str	r1, [r3, #12]
		b->next = c;
    a106:	f8cc 4010 	str.w	r4, [ip, #16]
    a10a:	53dd      	strh	r5, [r3, r7]
    a10c:	529d      	strh	r5, [r3, r2]
		free_list_add_bidx(h, c, bidx);
	}
}
    a10e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	void *cmem = &buf[c];
    a110:	00f1      	lsls	r1, r6, #3
		return ((uint16_t *)cmem)[f];
    a112:	3104      	adds	r1, #4
    a114:	5a58      	ldrh	r0, [r3, r1]
		((uint16_t *)cmem)[f] = val;
    a116:	53d8      	strh	r0, [r3, r7]
    a118:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    a11c:	529e      	strh	r6, [r3, r2]
    a11e:	80c5      	strh	r5, [r0, #6]
    a120:	525d      	strh	r5, [r3, r1]
    a122:	e7f4      	b.n	a10e <free_list_add+0x38>

0000a124 <free_list_remove_bidx>:
{
    a124:	b510      	push	{r4, lr}
		return ((uint16_t *)cmem)[f];
    a126:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
    a12a:	88e3      	ldrh	r3, [r4, #6]
	if (next_free_chunk(h, c) == c) {
    a12c:	4299      	cmp	r1, r3
    a12e:	f102 0104 	add.w	r1, r2, #4
    a132:	d10a      	bne.n	a14a <free_list_remove_bidx+0x26>
		h->avail_buckets &= ~BIT(bidx);
    a134:	2301      	movs	r3, #1
    a136:	fa03 f202 	lsl.w	r2, r3, r2
    a13a:	68c3      	ldr	r3, [r0, #12]
    a13c:	ea23 0302 	bic.w	r3, r3, r2
    a140:	60c3      	str	r3, [r0, #12]
		b->next = 0;
    a142:	2300      	movs	r3, #0
    a144:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
}
    a148:	bd10      	pop	{r4, pc}
    a14a:	88a2      	ldrh	r2, [r4, #4]
		b->next = second;
    a14c:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
		((uint16_t *)cmem)[f] = val;
    a150:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
    a154:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
    a158:	80cb      	strh	r3, [r1, #6]
    a15a:	8082      	strh	r2, [r0, #4]
}
    a15c:	e7f4      	b.n	a148 <free_list_remove_bidx+0x24>

0000a15e <free_list_remove>:
{
    a15e:	b508      	push	{r3, lr}
    a160:	4603      	mov	r3, r0
		int bidx = bucket_idx(h, chunk_size(h, c));
    a162:	f7ff ffb3 	bl	a0cc <chunk_size>
	return 31 - __builtin_clz(usable_sz);
    a166:	fab0 f280 	clz	r2, r0
		free_list_remove_bidx(h, c, bidx);
    a16a:	f1c2 021f 	rsb	r2, r2, #31
    a16e:	4618      	mov	r0, r3
}
    a170:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		free_list_remove_bidx(h, c, bidx);
    a174:	f7ff bfd6 	b.w	a124 <free_list_remove_bidx>

0000a178 <alloc_chunk>:

	return chunk_sz - (addr - chunk_base);
}

static chunkid_t alloc_chunk(struct z_heap *h, chunksz_t sz)
{
    a178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a17c:	fab1 f581 	clz	r5, r1
    a180:	f1c5 091f 	rsb	r9, r5, #31
	 * course.  But even in pathological situations we still
	 * maintain our constant time performance and at worst see
	 * fragmentation waste of the order of the block allocated
	 * only.
	 */
	if (b->next) {
    a184:	eb00 0789 	add.w	r7, r0, r9, lsl #2
{
    a188:	4603      	mov	r3, r0
	if (b->next) {
    a18a:	693a      	ldr	r2, [r7, #16]
{
    a18c:	460e      	mov	r6, r1
	if (b->next) {
    a18e:	b1c2      	cbz	r2, a1c2 <alloc_chunk+0x4a>
    a190:	f04f 0803 	mov.w	r8, #3
		chunkid_t first = b->next;
		int i = CONFIG_SYS_HEAP_ALLOC_LOOPS;
		do {
			chunkid_t c = b->next;
    a194:	693c      	ldr	r4, [r7, #16]
			if (chunk_size(h, c) >= sz) {
    a196:	4618      	mov	r0, r3
    a198:	4621      	mov	r1, r4
    a19a:	f7ff ff97 	bl	a0cc <chunk_size>
    a19e:	42b0      	cmp	r0, r6
    a1a0:	d306      	bcc.n	a1b0 <alloc_chunk+0x38>
				free_list_remove_bidx(h, c, bi);
    a1a2:	464a      	mov	r2, r9

	if (bmask != 0U) {
		int minbucket = __builtin_ctz(bmask);
		chunkid_t c = h->buckets[minbucket].next;

		free_list_remove_bidx(h, c, minbucket);
    a1a4:	4618      	mov	r0, r3
    a1a6:	f7ff ffbd 	bl	a124 <free_list_remove_bidx>
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
    a1aa:	4620      	mov	r0, r4
    a1ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return ((uint16_t *)cmem)[f];
    a1b0:	eb03 00c4 	add.w	r0, r3, r4, lsl #3
		} while (--i && b->next != first);
    a1b4:	f1b8 0801 	subs.w	r8, r8, #1
    a1b8:	88c0      	ldrh	r0, [r0, #6]
			b->next = next_free_chunk(h, c);
    a1ba:	6138      	str	r0, [r7, #16]
		} while (--i && b->next != first);
    a1bc:	d001      	beq.n	a1c2 <alloc_chunk+0x4a>
    a1be:	4282      	cmp	r2, r0
    a1c0:	d1e8      	bne.n	a194 <alloc_chunk+0x1c>
	uint32_t bmask = h->avail_buckets & ~BIT_MASK(bi + 1);
    a1c2:	f1c5 0220 	rsb	r2, r5, #32
    a1c6:	f04f 34ff 	mov.w	r4, #4294967295
    a1ca:	4094      	lsls	r4, r2
    a1cc:	68da      	ldr	r2, [r3, #12]
	if (bmask != 0U) {
    a1ce:	4014      	ands	r4, r2
    a1d0:	d0eb      	beq.n	a1aa <alloc_chunk+0x32>
		int minbucket = __builtin_ctz(bmask);
    a1d2:	fa94 f2a4 	rbit	r2, r4
    a1d6:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
    a1da:	1d11      	adds	r1, r2, #4
    a1dc:	f853 4021 	ldr.w	r4, [r3, r1, lsl #2]
		free_list_remove_bidx(h, c, minbucket);
    a1e0:	4621      	mov	r1, r4
    a1e2:	e7df      	b.n	a1a4 <alloc_chunk+0x2c>

0000a1e4 <merge_chunks>:
{
    a1e4:	b538      	push	{r3, r4, r5, lr}
    a1e6:	4603      	mov	r3, r0
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    a1e8:	f7ff ff70 	bl	a0cc <chunk_size>
{
    a1ec:	460d      	mov	r5, r1
	chunksz_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
    a1ee:	4604      	mov	r4, r0
    a1f0:	4611      	mov	r1, r2
    a1f2:	4618      	mov	r0, r3
    a1f4:	f7ff ff6a 	bl	a0cc <chunk_size>
		((uint16_t *)cmem)[f] = val;
    a1f8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
    a1fc:	4404      	add	r4, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a1fe:	0060      	lsls	r0, r4, #1
		((uint16_t *)cmem)[f] = val;
    a200:	8068      	strh	r0, [r5, #2]
	return c + chunk_size(h, c);
    a202:	4618      	mov	r0, r3
    a204:	f7ff ff62 	bl	a0cc <chunk_size>
	void *cmem = &buf[c];
    a208:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    a20a:	f823 4031 	strh.w	r4, [r3, r1, lsl #3]
}
    a20e:	bd38      	pop	{r3, r4, r5, pc}

0000a210 <split_chunks>:
{
    a210:	b538      	push	{r3, r4, r5, lr}
    a212:	4603      	mov	r3, r0
	chunksz_t sz0 = chunk_size(h, lc);
    a214:	f7ff ff5a 	bl	a0cc <chunk_size>
{
    a218:	460c      	mov	r4, r1
	chunksz_t rsz = sz0 - lsz;
    a21a:	1aa5      	subs	r5, r4, r2
	chunksz_t lsz = rc - lc;
    a21c:	1a51      	subs	r1, r2, r1
    a21e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
	chunksz_t rsz = sz0 - lsz;
    a222:	4405      	add	r5, r0
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a224:	0048      	lsls	r0, r1, #1
		((uint16_t *)cmem)[f] = val;
    a226:	8060      	strh	r0, [r4, #2]
    a228:	eb03 00c2 	add.w	r0, r3, r2, lsl #3
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a22c:	006c      	lsls	r4, r5, #1
		((uint16_t *)cmem)[f] = val;
    a22e:	8044      	strh	r4, [r0, #2]
    a230:	f823 1032 	strh.w	r1, [r3, r2, lsl #3]
	return c + chunk_size(h, c);
    a234:	4618      	mov	r0, r3
    a236:	4611      	mov	r1, r2
    a238:	f7ff ff48 	bl	a0cc <chunk_size>
	void *cmem = &buf[c];
    a23c:	4401      	add	r1, r0
		((uint16_t *)cmem)[f] = val;
    a23e:	f823 5031 	strh.w	r5, [r3, r1, lsl #3]
}
    a242:	bd38      	pop	{r3, r4, r5, pc}

0000a244 <free_chunk>:
{
    a244:	b538      	push	{r3, r4, r5, lr}
    a246:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
    a248:	f7ff ff40 	bl	a0cc <chunk_size>
    a24c:	460c      	mov	r4, r1
    a24e:	4401      	add	r1, r0
		return ((uint16_t *)cmem)[f];
    a250:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a254:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, right_chunk(h, c))) {
    a256:	07da      	lsls	r2, r3, #31
    a258:	d40a      	bmi.n	a270 <free_chunk+0x2c>
		free_list_remove(h, right_chunk(h, c));
    a25a:	4628      	mov	r0, r5
    a25c:	f7ff ff7f 	bl	a15e <free_list_remove>
	return c + chunk_size(h, c);
    a260:	4621      	mov	r1, r4
    a262:	4628      	mov	r0, r5
    a264:	f7ff ff32 	bl	a0cc <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
    a268:	1822      	adds	r2, r4, r0
    a26a:	4628      	mov	r0, r5
    a26c:	f7ff ffba 	bl	a1e4 <merge_chunks>
		return ((uint16_t *)cmem)[f];
    a270:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    a274:	1a61      	subs	r1, r4, r1
		return ((uint16_t *)cmem)[f];
    a276:	eb05 03c1 	add.w	r3, r5, r1, lsl #3
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
    a27a:	885b      	ldrh	r3, [r3, #2]
	if (!chunk_used(h, left_chunk(h, c))) {
    a27c:	07db      	lsls	r3, r3, #31
    a27e:	d40c      	bmi.n	a29a <free_chunk+0x56>
		free_list_remove(h, left_chunk(h, c));
    a280:	4628      	mov	r0, r5
    a282:	f7ff ff6c 	bl	a15e <free_list_remove>
		return ((uint16_t *)cmem)[f];
    a286:	f835 1034 	ldrh.w	r1, [r5, r4, lsl #3]
		merge_chunks(h, left_chunk(h, c), c);
    a28a:	4622      	mov	r2, r4
    a28c:	1a61      	subs	r1, r4, r1
    a28e:	4628      	mov	r0, r5
    a290:	f7ff ffa8 	bl	a1e4 <merge_chunks>
    a294:	f835 3034 	ldrh.w	r3, [r5, r4, lsl #3]
	return c - chunk_field(h, c, LEFT_SIZE);
    a298:	1ae4      	subs	r4, r4, r3
	free_list_add(h, c);
    a29a:	4621      	mov	r1, r4
    a29c:	4628      	mov	r0, r5
}
    a29e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	free_list_add(h, c);
    a2a2:	f7ff bf18 	b.w	a0d6 <free_list_add>

0000a2a6 <sys_heap_free>:
	if (mem == NULL) {
    a2a6:	b161      	cbz	r1, a2c2 <sys_heap_free+0x1c>
    a2a8:	6800      	ldr	r0, [r0, #0]
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a2aa:	3904      	subs	r1, #4
    a2ac:	1a09      	subs	r1, r1, r0
	void *cmem = &buf[c];
    a2ae:	f021 0307 	bic.w	r3, r1, #7
    a2b2:	4403      	add	r3, r0
	free_chunk(h, c);
    a2b4:	08c9      	lsrs	r1, r1, #3
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
    a2b6:	885a      	ldrh	r2, [r3, #2]
    a2b8:	f022 0201 	bic.w	r2, r2, #1
    a2bc:	805a      	strh	r2, [r3, #2]
    a2be:	f7ff bfc1 	b.w	a244 <free_chunk>
}
    a2c2:	4770      	bx	lr

0000a2c4 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
    a2c4:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
    a2c6:	6805      	ldr	r5, [r0, #0]
	void *mem;

	if (bytes == 0U || size_too_big(h, bytes)) {
    a2c8:	b909      	cbnz	r1, a2ce <sys_heap_alloc+0xa>
		return NULL;
    a2ca:	2000      	movs	r0, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    a2cc:	bd70      	pop	{r4, r5, r6, pc}
	if (bytes == 0U || size_too_big(h, bytes)) {
    a2ce:	68ab      	ldr	r3, [r5, #8]
    a2d0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
    a2d4:	d9f9      	bls.n	a2ca <sys_heap_alloc+0x6>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a2d6:	310b      	adds	r1, #11
    a2d8:	08cc      	lsrs	r4, r1, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
    a2da:	4621      	mov	r1, r4
    a2dc:	4628      	mov	r0, r5
    a2de:	f7ff ff4b 	bl	a178 <alloc_chunk>
	if (c == 0U) {
    a2e2:	4606      	mov	r6, r0
    a2e4:	2800      	cmp	r0, #0
    a2e6:	d0f0      	beq.n	a2ca <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
    a2e8:	4601      	mov	r1, r0
    a2ea:	4628      	mov	r0, r5
    a2ec:	f7ff feee 	bl	a0cc <chunk_size>
    a2f0:	42a0      	cmp	r0, r4
    a2f2:	d907      	bls.n	a304 <sys_heap_alloc+0x40>
		split_chunks(h, c, c + chunk_sz);
    a2f4:	1932      	adds	r2, r6, r4
    a2f6:	4628      	mov	r0, r5
    a2f8:	f7ff ff8a 	bl	a210 <split_chunks>
		free_list_add(h, c + chunk_sz);
    a2fc:	4611      	mov	r1, r2
    a2fe:	4628      	mov	r0, r5
    a300:	f7ff fee9 	bl	a0d6 <free_list_add>
	void *cmem = &buf[c];
    a304:	eb05 02c6 	add.w	r2, r5, r6, lsl #3
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
    a308:	4610      	mov	r0, r2
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    a30a:	8853      	ldrh	r3, [r2, #2]
    a30c:	f043 0301 	orr.w	r3, r3, #1
    a310:	8053      	strh	r3, [r2, #2]
    a312:	3004      	adds	r0, #4
	return mem;
    a314:	e7da      	b.n	a2cc <sys_heap_alloc+0x8>

0000a316 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
    a316:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a31a:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rew = align & -align;
    a31c:	424a      	negs	r2, r1
    a31e:	ea02 0701 	and.w	r7, r2, r1
	if (align != rew) {
    a322:	ea31 0202 	bics.w	r2, r1, r2
{
    a326:	4603      	mov	r3, r0
	if (align != rew) {
    a328:	d00a      	beq.n	a340 <sys_heap_aligned_alloc+0x2a>
		return false;
    a32a:	2f04      	cmp	r7, #4
    a32c:	463a      	mov	r2, r7
    a32e:	46b9      	mov	r9, r7
    a330:	bf28      	it	cs
    a332:	2204      	movcs	r2, #4
		align -= rew;
    a334:	1bcf      	subs	r7, r1, r7
		rew = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
    a336:	b974      	cbnz	r4, a356 <sys_heap_aligned_alloc+0x40>
		return NULL;
    a338:	2500      	movs	r5, #0
	heap_listener_notify_alloc(HEAP_ID_FROM_POINTER(heap), mem,
				   chunksz_to_bytes(h, chunk_size(h, c)));
#endif

	return mem;
}
    a33a:	4628      	mov	r0, r5
    a33c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (align <= chunk_header_bytes(h)) {
    a340:	2904      	cmp	r1, #4
    a342:	d804      	bhi.n	a34e <sys_heap_aligned_alloc+0x38>
			return sys_heap_alloc(heap, bytes);
    a344:	4621      	mov	r1, r4
}
    a346:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
    a34a:	f7ff bfbb 	b.w	a2c4 <sys_heap_alloc>
		rew = 0;
    a34e:	f04f 0900 	mov.w	r9, #0
		gap = chunk_header_bytes(h);
    a352:	2204      	movs	r2, #4
    a354:	e7ef      	b.n	a336 <sys_heap_aligned_alloc+0x20>
	struct z_heap *h = heap->heap;
    a356:	681e      	ldr	r6, [r3, #0]
	if (bytes == 0 || size_too_big(h, bytes)) {
    a358:	68b3      	ldr	r3, [r6, #8]
    a35a:	ebb3 0fd4 	cmp.w	r3, r4, lsr #3
    a35e:	d9eb      	bls.n	a338 <sys_heap_aligned_alloc+0x22>
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a360:	f104 010b 	add.w	r1, r4, #11
    a364:	4439      	add	r1, r7
    a366:	1a89      	subs	r1, r1, r2
	chunkid_t c0 = alloc_chunk(h, padded_sz);
    a368:	08c9      	lsrs	r1, r1, #3
    a36a:	4630      	mov	r0, r6
    a36c:	f7ff ff04 	bl	a178 <alloc_chunk>
	if (c0 == 0) {
    a370:	4680      	mov	r8, r0
    a372:	2800      	cmp	r0, #0
    a374:	d0e0      	beq.n	a338 <sys_heap_aligned_alloc+0x22>
	mem = (uint8_t *) ROUND_UP(mem + rew, align) - rew;
    a376:	f109 0504 	add.w	r5, r9, #4
    a37a:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
    a37e:	1e7b      	subs	r3, r7, #1
    a380:	4435      	add	r5, r6
    a382:	441d      	add	r5, r3
    a384:	427f      	negs	r7, r7
    a386:	403d      	ands	r5, r7
    a388:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a38c:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a38e:	1f2b      	subs	r3, r5, #4
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a390:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a392:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
    a394:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
    a398:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
    a39a:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
    a39e:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
    a3a2:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
    a3a6:	d208      	bcs.n	a3ba <sys_heap_aligned_alloc+0xa4>
		split_chunks(h, c0, c);
    a3a8:	4601      	mov	r1, r0
    a3aa:	463a      	mov	r2, r7
    a3ac:	4630      	mov	r0, r6
    a3ae:	f7ff ff2f 	bl	a210 <split_chunks>
		free_list_add(h, c0);
    a3b2:	4641      	mov	r1, r8
    a3b4:	4630      	mov	r0, r6
    a3b6:	f7ff fe8e 	bl	a0d6 <free_list_add>
	return c + chunk_size(h, c);
    a3ba:	4639      	mov	r1, r7
    a3bc:	4630      	mov	r0, r6
    a3be:	f7ff fe85 	bl	a0cc <chunk_size>
    a3c2:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
    a3c4:	4284      	cmp	r4, r0
    a3c6:	d207      	bcs.n	a3d8 <sys_heap_aligned_alloc+0xc2>
		split_chunks(h, c, c_end);
    a3c8:	4630      	mov	r0, r6
    a3ca:	4622      	mov	r2, r4
    a3cc:	f7ff ff20 	bl	a210 <split_chunks>
		free_list_add(h, c_end);
    a3d0:	4621      	mov	r1, r4
    a3d2:	4630      	mov	r0, r6
    a3d4:	f7ff fe7f 	bl	a0d6 <free_list_add>
	void *cmem = &buf[c];
    a3d8:	eb06 06c7 	add.w	r6, r6, r7, lsl #3
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    a3dc:	8873      	ldrh	r3, [r6, #2]
    a3de:	f043 0301 	orr.w	r3, r3, #1
    a3e2:	8073      	strh	r3, [r6, #2]
    a3e4:	e7a9      	b.n	a33a <sys_heap_aligned_alloc+0x24>

0000a3e6 <sys_heap_init>:
		__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");
	}

	/* Reserve the end marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
    a3e6:	3a04      	subs	r2, #4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a3e8:	1dcb      	adds	r3, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a3ea:	4411      	add	r1, r2
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
    a3ec:	f023 0307 	bic.w	r3, r3, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
    a3f0:	f021 0107 	bic.w	r1, r1, #7
{
    a3f4:	b4f0      	push	{r4, r5, r6, r7}
	chunksz_t heap_sz = (end - addr) / CHUNK_UNIT;
    a3f6:	1acd      	subs	r5, r1, r3
    a3f8:	08ea      	lsrs	r2, r5, #3

	CHECK(end > addr);
	__ASSERT(heap_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
    a3fa:	6003      	str	r3, [r0, #0]
	return 31 - __builtin_clz(usable_sz);
    a3fc:	fab2 f082 	clz	r0, r2
	h->allocated_bytes = 0;
	h->max_allocated_bytes = 0;
#endif

	int nb_buckets = bucket_idx(h, heap_sz) + 1;
	chunksz_t chunk0_size = chunksz(sizeof(struct z_heap) +
    a400:	f1c0 0424 	rsb	r4, r0, #36	; 0x24
    a404:	00a4      	lsls	r4, r4, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
    a406:	3407      	adds	r4, #7
	h->avail_buckets = 0;
    a408:	2600      	movs	r6, #0
    a40a:	08e1      	lsrs	r1, r4, #3
	int nb_buckets = bucket_idx(h, heap_sz) + 1;
    a40c:	f1c0 0020 	rsb	r0, r0, #32
    a410:	f103 0410 	add.w	r4, r3, #16
	h->end_chunk = heap_sz;
    a414:	609a      	str	r2, [r3, #8]
	h->avail_buckets = 0;
    a416:	60de      	str	r6, [r3, #12]
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) <= heap_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
    a418:	eb04 0080 	add.w	r0, r4, r0, lsl #2
    a41c:	4284      	cmp	r4, r0
    a41e:	d118      	bne.n	a452 <sys_heap_init+0x6c>
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a420:	0048      	lsls	r0, r1, #1
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    a422:	f040 0001 	orr.w	r0, r0, #1
    a426:	8058      	strh	r0, [r3, #2]
		((uint16_t *)cmem)[f] = val;
    a428:	eb03 04c1 	add.w	r4, r3, r1, lsl #3
	set_chunk_size(h, 0, chunk0_size);
	set_left_chunk_size(h, 0, 0);
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, heap_sz - chunk0_size);
    a42c:	1a50      	subs	r0, r2, r1
	chunk_set(h, c, SIZE_AND_USED, size << 1);
    a42e:	0047      	lsls	r7, r0, #1
		((uint16_t *)cmem)[f] = val;
    a430:	801e      	strh	r6, [r3, #0]
    a432:	8067      	strh	r7, [r4, #2]
    a434:	195c      	adds	r4, r3, r5
    a436:	f823 1031 	strh.w	r1, [r3, r1, lsl #3]
	void *cmem = &buf[c];
    a43a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
		((uint16_t *)cmem)[f] = val;
    a43e:	8066      	strh	r6, [r4, #2]
    a440:	5358      	strh	r0, [r3, r5]
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
    a442:	8850      	ldrh	r0, [r2, #2]
    a444:	f040 0001 	orr.w	r0, r0, #1
    a448:	8050      	strh	r0, [r2, #2]
	set_chunk_size(h, heap_sz, 0);
	set_left_chunk_size(h, heap_sz, heap_sz - chunk0_size);
	set_chunk_used(h, heap_sz, true);

	free_list_add(h, chunk0_size);
}
    a44a:	bcf0      	pop	{r4, r5, r6, r7}
	free_list_add(h, chunk0_size);
    a44c:	4618      	mov	r0, r3
    a44e:	f7ff be42 	b.w	a0d6 <free_list_add>
		h->buckets[i].next = 0;
    a452:	f844 6b04 	str.w	r6, [r4], #4
	for (int i = 0; i < nb_buckets; i++) {
    a456:	e7e1      	b.n	a41c <sys_heap_init+0x36>

0000a458 <encode_uint>:
{
    a458:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a45c:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
    a45e:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
    a460:	2b6f      	cmp	r3, #111	; 0x6f
{
    a462:	4680      	mov	r8, r0
    a464:	460f      	mov	r7, r1
    a466:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    a468:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
    a46c:	d029      	beq.n	a4c2 <encode_uint+0x6a>
    a46e:	d824      	bhi.n	a4ba <encode_uint+0x62>
		return 16;
    a470:	2b58      	cmp	r3, #88	; 0x58
    a472:	bf14      	ite	ne
    a474:	260a      	movne	r6, #10
    a476:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
    a478:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
    a47c:	4632      	mov	r2, r6
    a47e:	2300      	movs	r3, #0
    a480:	4640      	mov	r0, r8
    a482:	4639      	mov	r1, r7
    a484:	f7f5 fe2c 	bl	e0 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    a488:	2a09      	cmp	r2, #9
    a48a:	b2d4      	uxtb	r4, r2
    a48c:	d81e      	bhi.n	a4cc <encode_uint+0x74>
    a48e:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    a490:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
    a492:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
    a494:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
    a498:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
    a49c:	d301      	bcc.n	a4a2 <encode_uint+0x4a>
    a49e:	45d1      	cmp	r9, sl
    a4a0:	d811      	bhi.n	a4c6 <encode_uint+0x6e>
	if (conv->flag_hash) {
    a4a2:	782b      	ldrb	r3, [r5, #0]
    a4a4:	069b      	lsls	r3, r3, #26
    a4a6:	d505      	bpl.n	a4b4 <encode_uint+0x5c>
		if (radix == 8) {
    a4a8:	2e08      	cmp	r6, #8
    a4aa:	d115      	bne.n	a4d8 <encode_uint+0x80>
			conv->altform_0 = true;
    a4ac:	78ab      	ldrb	r3, [r5, #2]
    a4ae:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    a4b2:	70ab      	strb	r3, [r5, #2]
}
    a4b4:	4648      	mov	r0, r9
    a4b6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    a4ba:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    a4be:	2b70      	cmp	r3, #112	; 0x70
    a4c0:	e7d7      	b.n	a472 <encode_uint+0x1a>
	switch (specifier) {
    a4c2:	2608      	movs	r6, #8
    a4c4:	e7d8      	b.n	a478 <encode_uint+0x20>
		value /= radix;
    a4c6:	4680      	mov	r8, r0
    a4c8:	460f      	mov	r7, r1
    a4ca:	e7d7      	b.n	a47c <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    a4cc:	f1bb 0f19 	cmp.w	fp, #25
    a4d0:	bf94      	ite	ls
    a4d2:	3437      	addls	r4, #55	; 0x37
    a4d4:	3457      	addhi	r4, #87	; 0x57
    a4d6:	e7db      	b.n	a490 <encode_uint+0x38>
		} else if (radix == 16) {
    a4d8:	2e10      	cmp	r6, #16
    a4da:	d1eb      	bne.n	a4b4 <encode_uint+0x5c>
			conv->altform_0c = true;
    a4dc:	78ab      	ldrb	r3, [r5, #2]
    a4de:	f043 0310 	orr.w	r3, r3, #16
    a4e2:	e7e6      	b.n	a4b2 <encode_uint+0x5a>

0000a4e4 <outs>:
{
    a4e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a4e8:	4607      	mov	r7, r0
    a4ea:	4688      	mov	r8, r1
    a4ec:	4615      	mov	r5, r2
    a4ee:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    a4f0:	4614      	mov	r4, r2
    a4f2:	42b4      	cmp	r4, r6
    a4f4:	eba4 0005 	sub.w	r0, r4, r5
    a4f8:	d302      	bcc.n	a500 <outs+0x1c>
    a4fa:	b93e      	cbnz	r6, a50c <outs+0x28>
    a4fc:	7823      	ldrb	r3, [r4, #0]
    a4fe:	b12b      	cbz	r3, a50c <outs+0x28>
		int rc = out((int)*sp++, ctx);
    a500:	f814 0b01 	ldrb.w	r0, [r4], #1
    a504:	4641      	mov	r1, r8
    a506:	47b8      	blx	r7
		if (rc < 0) {
    a508:	2800      	cmp	r0, #0
    a50a:	daf2      	bge.n	a4f2 <outs+0xe>
}
    a50c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a510 <free_space>:
	err = k_sem_init(&buffer->sem, 0, 1);
	__ASSERT_NO_MSG(err == 0);
}

static inline bool free_space(struct mpsc_pbuf_buffer *buffer, uint32_t *res)
{
    a510:	4602      	mov	r2, r0
    a512:	b510      	push	{r4, lr}
	if (buffer->rd_idx > buffer->tmp_wr_idx) {
    a514:	68c0      	ldr	r0, [r0, #12]
    a516:	6814      	ldr	r4, [r2, #0]
    a518:	42a0      	cmp	r0, r4
    a51a:	d904      	bls.n	a526 <free_space+0x16>
		*res =  buffer->rd_idx - buffer->tmp_wr_idx - 1;
    a51c:	3801      	subs	r0, #1
    a51e:	1b00      	subs	r0, r0, r4
    a520:	6008      	str	r0, [r1, #0]

		return false;
    a522:	2000      	movs	r0, #0
	}

	*res = buffer->size - buffer->tmp_wr_idx;

	return true;
}
    a524:	bd10      	pop	{r4, pc}
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    a526:	6a13      	ldr	r3, [r2, #32]
	} else if (!buffer->rd_idx) {
    a528:	b918      	cbnz	r0, a532 <free_space+0x22>
		*res = buffer->size - buffer->tmp_wr_idx - 1;
    a52a:	3b01      	subs	r3, #1
    a52c:	1b1b      	subs	r3, r3, r4
    a52e:	600b      	str	r3, [r1, #0]
		return false;
    a530:	e7f8      	b.n	a524 <free_space+0x14>
	*res = buffer->size - buffer->tmp_wr_idx;
    a532:	1b1b      	subs	r3, r3, r4
    a534:	600b      	str	r3, [r1, #0]
	return true;
    a536:	2001      	movs	r0, #1
    a538:	e7f4      	b.n	a524 <free_space+0x14>

0000a53a <get_usage>:

	return true;
}

static inline uint32_t get_usage(struct mpsc_pbuf_buffer *buffer)
{
    a53a:	b513      	push	{r0, r1, r4, lr}
	uint32_t f;

	if (free_space(buffer, &f)) {
    a53c:	a901      	add	r1, sp, #4
{
    a53e:	4604      	mov	r4, r0
	if (free_space(buffer, &f)) {
    a540:	f7ff ffe6 	bl	a510 <free_space>
    a544:	b120      	cbz	r0, a550 <get_usage+0x16>
		f += (buffer->rd_idx - 1);
    a546:	9b01      	ldr	r3, [sp, #4]
    a548:	68e2      	ldr	r2, [r4, #12]
    a54a:	3b01      	subs	r3, #1
    a54c:	4413      	add	r3, r2
    a54e:	9301      	str	r3, [sp, #4]
	}

	return buffer->size - 1 - f;
    a550:	9801      	ldr	r0, [sp, #4]
    a552:	6a23      	ldr	r3, [r4, #32]
    a554:	43c0      	mvns	r0, r0
}
    a556:	4418      	add	r0, r3
    a558:	b002      	add	sp, #8
    a55a:	bd10      	pop	{r4, pc}

0000a55c <idx_inc>:
	return !item->hdr.valid && !item->hdr.busy;
}

static inline uint32_t idx_inc(struct mpsc_pbuf_buffer *buffer,
				uint32_t idx, uint32_t val)
{
    a55c:	b510      	push	{r4, lr}
    a55e:	4604      	mov	r4, r0
	uint32_t i = idx + val;
    a560:	1888      	adds	r0, r1, r2

	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    a562:	6922      	ldr	r2, [r4, #16]
		return i & (buffer->size - 1);
    a564:	6a23      	ldr	r3, [r4, #32]
	if (buffer->flags & MPSC_PBUF_SIZE_POW2) {
    a566:	07d2      	lsls	r2, r2, #31
    a568:	d502      	bpl.n	a570 <idx_inc+0x14>
		return i & (buffer->size - 1);
    a56a:	3b01      	subs	r3, #1
    a56c:	4018      	ands	r0, r3
	}

	return (i >= buffer->size) ? i - buffer->size : i;
}
    a56e:	bd10      	pop	{r4, pc}
	return (i >= buffer->size) ? i - buffer->size : i;
    a570:	4298      	cmp	r0, r3
    a572:	bf28      	it	cs
    a574:	1ac0      	subcs	r0, r0, r3
    a576:	e7fa      	b.n	a56e <idx_inc+0x12>

0000a578 <add_skip_item>:

	return 0;
}

static void add_skip_item(struct mpsc_pbuf_buffer *buffer, uint32_t wlen)
{
    a578:	b538      	push	{r3, r4, r5, lr}
	union mpsc_pbuf_generic skip = {
		.skip = { .valid = 0, .busy = 1, .len = wlen }
	};

	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    a57a:	69c2      	ldr	r2, [r0, #28]
{
    a57c:	460d      	mov	r5, r1
	union mpsc_pbuf_generic skip = {
    a57e:	008b      	lsls	r3, r1, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    a580:	6801      	ldr	r1, [r0, #0]
	union mpsc_pbuf_generic skip = {
    a582:	f043 0302 	orr.w	r3, r3, #2
	buffer->buf[buffer->tmp_wr_idx] = skip.raw;
    a586:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    a58a:	462a      	mov	r2, r5
    a58c:	6801      	ldr	r1, [r0, #0]
{
    a58e:	4604      	mov	r4, r0
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    a590:	f7ff ffe4 	bl	a55c <idx_inc>
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    a594:	6861      	ldr	r1, [r4, #4]
	buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, wlen);
    a596:	6020      	str	r0, [r4, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    a598:	462a      	mov	r2, r5
    a59a:	4620      	mov	r0, r4
    a59c:	f7ff ffde 	bl	a55c <idx_inc>
    a5a0:	6060      	str	r0, [r4, #4]
}
    a5a2:	bd38      	pop	{r3, r4, r5, pc}

0000a5a4 <max_utilization_update>:
{
    a5a4:	b538      	push	{r3, r4, r5, lr}
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    a5a6:	6903      	ldr	r3, [r0, #16]
    a5a8:	075b      	lsls	r3, r3, #29
{
    a5aa:	4604      	mov	r4, r0
	if (!(buffer->flags & MPSC_PBUF_MAX_UTILIZATION)) {
    a5ac:	d506      	bpl.n	a5bc <max_utilization_update+0x18>
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    a5ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
    a5b0:	f7ff ffc3 	bl	a53a <get_usage>
    a5b4:	4285      	cmp	r5, r0
    a5b6:	d902      	bls.n	a5be <max_utilization_update+0x1a>
    a5b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    a5ba:	6260      	str	r0, [r4, #36]	; 0x24
}
    a5bc:	bd38      	pop	{r3, r4, r5, pc}
	buffer->max_usage = MAX(buffer->max_usage, get_usage(buffer));
    a5be:	4620      	mov	r0, r4
    a5c0:	f7ff ffbb 	bl	a53a <get_usage>
    a5c4:	e7f9      	b.n	a5ba <max_utilization_update+0x16>

0000a5c6 <drop_item_locked>:
 */
static union mpsc_pbuf_generic *drop_item_locked(struct mpsc_pbuf_buffer *buffer,
						 uint32_t free_wlen,
						 bool allow_drop,
						 bool *user_packet)
{
    a5c6:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	union mpsc_pbuf_generic *item;
	uint32_t rd_wlen;
	uint32_t skip_wlen;

	*user_packet = false;
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    a5ca:	f8d0 a00c 	ldr.w	sl, [r0, #12]
    a5ce:	f8d0 901c 	ldr.w	r9, [r0, #28]
{
    a5d2:	461f      	mov	r7, r3
	*user_packet = false;
    a5d4:	2300      	movs	r3, #0
    a5d6:	703b      	strb	r3, [r7, #0]
	if (item->hdr.busy && !item->hdr.valid) {
    a5d8:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    a5dc:	f003 0303 	and.w	r3, r3, #3
    a5e0:	2b02      	cmp	r3, #2
{
    a5e2:	4604      	mov	r4, r0
    a5e4:	468b      	mov	fp, r1
    a5e6:	4690      	mov	r8, r2
	item = (union mpsc_pbuf_generic *)&buffer->buf[buffer->rd_idx];
    a5e8:	eb09 068a 	add.w	r6, r9, sl, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    a5ec:	d103      	bne.n	a5f6 <drop_item_locked+0x30>
		return item->skip.len;
    a5ee:	f859 502a 	ldr.w	r5, [r9, sl, lsl #2]
	skip_wlen = get_skip(item);

	rd_wlen = skip_wlen ? skip_wlen : buffer->get_wlen(item);
    a5f2:	08ad      	lsrs	r5, r5, #2
    a5f4:	d12e      	bne.n	a654 <drop_item_locked+0x8e>
    a5f6:	69a3      	ldr	r3, [r4, #24]
    a5f8:	4630      	mov	r0, r6
    a5fa:	4798      	blx	r3
    a5fc:	4605      	mov	r5, r0
	if (skip_wlen) {
		allow_drop = true;
	} else if (allow_drop) {
    a5fe:	f1b8 0f00 	cmp.w	r8, #0
    a602:	d036      	beq.n	a672 <drop_item_locked+0xac>
		if (item->hdr.busy) {
    a604:	f819 302a 	ldrb.w	r3, [r9, sl, lsl #2]
    a608:	079b      	lsls	r3, r3, #30
    a60a:	d52f      	bpl.n	a66c <drop_item_locked+0xa6>
			/* item is currently processed and cannot be overwritten. */
			add_skip_item(buffer, free_wlen + 1);
    a60c:	f10b 0101 	add.w	r1, fp, #1
    a610:	4620      	mov	r0, r4
    a612:	f7ff ffb1 	bl	a578 <add_skip_item>
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    a616:	6861      	ldr	r1, [r4, #4]
    a618:	462a      	mov	r2, r5
    a61a:	4620      	mov	r0, r4
    a61c:	f7ff ff9e 	bl	a55c <idx_inc>
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    a620:	6821      	ldr	r1, [r4, #0]
			buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, rd_wlen);
    a622:	6060      	str	r0, [r4, #4]
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    a624:	462a      	mov	r2, r5
    a626:	4620      	mov	r0, r4
    a628:	f7ff ff98 	bl	a55c <idx_inc>

			/* Get next itme followed the busy one. */
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    a62c:	462a      	mov	r2, r5
			buffer->tmp_wr_idx = idx_inc(buffer, buffer->tmp_wr_idx, rd_wlen);
    a62e:	6020      	str	r0, [r4, #0]
			uint32_t next_rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    a630:	68e1      	ldr	r1, [r4, #12]
    a632:	4620      	mov	r0, r4
    a634:	f7ff ff92 	bl	a55c <idx_inc>

			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    a638:	69e3      	ldr	r3, [r4, #28]
	if (item->hdr.busy && !item->hdr.valid) {
    a63a:	f813 2020 	ldrb.w	r2, [r3, r0, lsl #2]
    a63e:	f002 0203 	and.w	r2, r2, #3
    a642:	2a02      	cmp	r2, #2
			item = (union mpsc_pbuf_generic *)&buffer->buf[next_rd_idx];
    a644:	eb03 0680 	add.w	r6, r3, r0, lsl #2
	if (item->hdr.busy && !item->hdr.valid) {
    a648:	d10c      	bne.n	a664 <drop_item_locked+0x9e>
		return item->skip.len;
    a64a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
			skip_wlen = get_skip(item);
			if (skip_wlen) {
    a64e:	089b      	lsrs	r3, r3, #2
    a650:	d008      	beq.n	a664 <drop_item_locked+0x9e>
				rd_wlen += skip_wlen;
    a652:	441d      	add	r5, r3
	} else {
		item = NULL;
	}

	if (allow_drop) {
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, rd_wlen);
    a654:	68e1      	ldr	r1, [r4, #12]
    a656:	462a      	mov	r2, r5
    a658:	4620      	mov	r0, r4
    a65a:	f7ff ff7f 	bl	a55c <idx_inc>
		buffer->tmp_rd_idx = buffer->rd_idx;
    a65e:	e9c4 0002 	strd	r0, r0, [r4, #8]
    a662:	e007      	b.n	a674 <drop_item_locked+0xae>
				rd_wlen += buffer->get_wlen(item);
    a664:	69a3      	ldr	r3, [r4, #24]
    a666:	4630      	mov	r0, r6
    a668:	4798      	blx	r3
    a66a:	4405      	add	r5, r0
			*user_packet = true;
    a66c:	2301      	movs	r3, #1
    a66e:	703b      	strb	r3, [r7, #0]
    a670:	e7f0      	b.n	a654 <drop_item_locked+0x8e>
		item = NULL;
    a672:	4646      	mov	r6, r8
	}

	return item;
}
    a674:	4630      	mov	r0, r6
    a676:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000a67a <mpsc_pbuf_init>:
{
    a67a:	b538      	push	{r3, r4, r5, lr}
    a67c:	460d      	mov	r5, r1
    a67e:	4604      	mov	r4, r0
	memset(buffer, 0, offsetof(struct mpsc_pbuf_buffer, buf));
    a680:	221c      	movs	r2, #28
    a682:	2100      	movs	r1, #0
    a684:	f000 fa95 	bl	abb2 <memset>
	buffer->get_wlen = cfg->get_wlen;
    a688:	68eb      	ldr	r3, [r5, #12]
    a68a:	61a3      	str	r3, [r4, #24]
	buffer->notify_drop = cfg->notify_drop;
    a68c:	68ab      	ldr	r3, [r5, #8]
	buffer->size = cfg->size;
    a68e:	686a      	ldr	r2, [r5, #4]
	buffer->notify_drop = cfg->notify_drop;
    a690:	6163      	str	r3, [r4, #20]
	buffer->buf = cfg->buf;
    a692:	682b      	ldr	r3, [r5, #0]
    a694:	61e3      	str	r3, [r4, #28]
	buffer->max_usage = 0;
    a696:	2300      	movs	r3, #0
    a698:	6263      	str	r3, [r4, #36]	; 0x24
	buffer->size = cfg->size;
    a69a:	6222      	str	r2, [r4, #32]
	buffer->flags = cfg->flags;
    a69c:	692b      	ldr	r3, [r5, #16]
 * @param x value to check
 * @return true if @p x is a power of two, false otherwise
 */
static inline bool is_power_of_two(unsigned int x)
{
	return (x != 0U) && ((x & (x - 1U)) == 0U);
    a69e:	b122      	cbz	r2, a6aa <mpsc_pbuf_init+0x30>
    a6a0:	1e51      	subs	r1, r2, #1
    a6a2:	4211      	tst	r1, r2
		buffer->flags |= MPSC_PBUF_SIZE_POW2;
    a6a4:	bf08      	it	eq
    a6a6:	f043 0301 	orreq.w	r3, r3, #1
	buffer->flags = cfg->flags;
    a6aa:	6123      	str	r3, [r4, #16]
	return z_impl_k_sem_init(sem, initial_count, limit);
    a6ac:	2201      	movs	r2, #1
    a6ae:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a6b2:	2100      	movs	r1, #0
}
    a6b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    a6b8:	f000 bfb2 	b.w	b620 <z_impl_k_sem_init>

0000a6bc <mpsc_pbuf_alloc>:

}

union mpsc_pbuf_generic *mpsc_pbuf_alloc(struct mpsc_pbuf_buffer *buffer,
					 size_t wlen, k_timeout_t timeout)
{
    a6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    a6c0:	4699      	mov	r9, r3
	uint32_t free_wlen;
	bool valid_drop;

	MPSC_PBUF_DBG(buffer, "alloc %d words, ", (int)wlen);

	if (wlen > (buffer->size - 1)) {
    a6c2:	6a03      	ldr	r3, [r0, #32]
    a6c4:	3b01      	subs	r3, #1
    a6c6:	428b      	cmp	r3, r1
{
    a6c8:	b085      	sub	sp, #20
    a6ca:	4604      	mov	r4, r0
    a6cc:	460f      	mov	r7, r1
    a6ce:	4690      	mov	r8, r2
	if (wlen > (buffer->size - 1)) {
    a6d0:	d364      	bcc.n	a79c <mpsc_pbuf_alloc+0xe0>
	union mpsc_pbuf_generic *dropped_item = NULL;
    a6d2:	2500      	movs	r5, #0
	union mpsc_pbuf_generic *item = NULL;
    a6d4:	46aa      	mov	sl, r5
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
			   !k_is_in_isr()) {
			int err;

			k_spin_unlock(&buffer->lock, key);
			err = k_sem_take(&buffer->sem, timeout);
    a6d6:	f100 0b28 	add.w	fp, r0, #40	; 0x28
	__asm__ volatile(
    a6da:	f04f 0320 	mov.w	r3, #32
    a6de:	f3ef 8611 	mrs	r6, BASEPRI
    a6e2:	f383 8812 	msr	BASEPRI_MAX, r3
    a6e6:	f3bf 8f6f 	isb	sy
		wrap = free_space(buffer, &free_wlen);
    a6ea:	a903      	add	r1, sp, #12
    a6ec:	4620      	mov	r0, r4
    a6ee:	f7ff ff0f 	bl	a510 <free_space>
		if (free_wlen >= wlen) {
    a6f2:	9903      	ldr	r1, [sp, #12]
    a6f4:	42b9      	cmp	r1, r7
    a6f6:	d321      	bcc.n	a73c <mpsc_pbuf_alloc+0x80>
			    (union mpsc_pbuf_generic *)&buffer->buf[buffer->tmp_wr_idx];
    a6f8:	6821      	ldr	r1, [r4, #0]
			item =
    a6fa:	69e3      	ldr	r3, [r4, #28]
			item->hdr.valid = 0;
    a6fc:	f813 2021 	ldrb.w	r2, [r3, r1, lsl #2]
    a700:	f022 0203 	bic.w	r2, r2, #3
    a704:	f803 2021 	strb.w	r2, [r3, r1, lsl #2]
			buffer->tmp_wr_idx = idx_inc(buffer,
    a708:	4620      	mov	r0, r4
    a70a:	463a      	mov	r2, r7
			item =
    a70c:	eb03 0a81 	add.w	sl, r3, r1, lsl #2
			buffer->tmp_wr_idx = idx_inc(buffer,
    a710:	f7ff ff24 	bl	a55c <idx_inc>
		cont = false;
    a714:	2300      	movs	r3, #0
			buffer->tmp_wr_idx = idx_inc(buffer,
    a716:	6020      	str	r0, [r4, #0]
	__asm__ volatile(
    a718:	f386 8811 	msr	BASEPRI, r6
    a71c:	f3bf 8f6f 	isb	sy
			cont = dropped_item != NULL;
		}

		k_spin_unlock(&buffer->lock, key);

		if (cont && dropped_item && valid_drop) {
    a720:	2b00      	cmp	r3, #0
    a722:	d03d      	beq.n	a7a0 <mpsc_pbuf_alloc+0xe4>
    a724:	2d00      	cmp	r5, #0
    a726:	d0d8      	beq.n	a6da <mpsc_pbuf_alloc+0x1e>
    a728:	f89d 300b 	ldrb.w	r3, [sp, #11]
    a72c:	2b00      	cmp	r3, #0
    a72e:	d0d4      	beq.n	a6da <mpsc_pbuf_alloc+0x1e>
			/* Notify about item being dropped. */
			buffer->notify_drop(buffer, dropped_item);
    a730:	4629      	mov	r1, r5
    a732:	6963      	ldr	r3, [r4, #20]
    a734:	4620      	mov	r0, r4
    a736:	4798      	blx	r3
			dropped_item = NULL;
    a738:	2500      	movs	r5, #0
    a73a:	e7ce      	b.n	a6da <mpsc_pbuf_alloc+0x1e>
		} else if (wrap) {
    a73c:	b128      	cbz	r0, a74a <mpsc_pbuf_alloc+0x8e>
    a73e:	9001      	str	r0, [sp, #4]
			add_skip_item(buffer, free_wlen);
    a740:	4620      	mov	r0, r4
    a742:	f7ff ff19 	bl	a578 <add_skip_item>
			cont = true;
    a746:	9b01      	ldr	r3, [sp, #4]
    a748:	e7e6      	b.n	a718 <mpsc_pbuf_alloc+0x5c>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    a74a:	ea58 0309 	orrs.w	r3, r8, r9
    a74e:	d017      	beq.n	a780 <mpsc_pbuf_alloc+0xc4>
			   !k_is_in_isr()) {
    a750:	f000 fecc 	bl	b4ec <k_is_in_isr>
		} else if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
    a754:	b9a0      	cbnz	r0, a780 <mpsc_pbuf_alloc+0xc4>
    a756:	f386 8811 	msr	BASEPRI, r6
    a75a:	f3bf 8f6f 	isb	sy
	return z_impl_k_sem_take(sem, timeout);
    a75e:	4642      	mov	r2, r8
    a760:	464b      	mov	r3, r9
    a762:	4658      	mov	r0, fp
    a764:	f7fe fbcc 	bl	8f00 <z_impl_k_sem_take>
	__asm__ volatile(
    a768:	f04f 0320 	mov.w	r3, #32
    a76c:	f3ef 8611 	mrs	r6, BASEPRI
    a770:	f383 8812 	msr	BASEPRI_MAX, r3
    a774:	f3bf 8f6f 	isb	sy
			if (err == 0) {
    a778:	fab0 f380 	clz	r3, r0
    a77c:	095b      	lsrs	r3, r3, #5
    a77e:	e7cb      	b.n	a718 <mpsc_pbuf_alloc+0x5c>
			bool user_drop = buffer->flags & MPSC_PBUF_MODE_OVERWRITE;
    a780:	6922      	ldr	r2, [r4, #16]
			dropped_item = drop_item_locked(buffer, free_wlen,
    a782:	9903      	ldr	r1, [sp, #12]
    a784:	f10d 030b 	add.w	r3, sp, #11
    a788:	f3c2 0240 	ubfx	r2, r2, #1, #1
    a78c:	4620      	mov	r0, r4
    a78e:	f7ff ff1a 	bl	a5c6 <drop_item_locked>
			cont = dropped_item != NULL;
    a792:	1e03      	subs	r3, r0, #0
    a794:	4605      	mov	r5, r0
    a796:	bf18      	it	ne
    a798:	2301      	movne	r3, #1
    a79a:	e7bd      	b.n	a718 <mpsc_pbuf_alloc+0x5c>
		return NULL;
    a79c:	f04f 0a00 	mov.w	sl, #0
		/* During test fill with 0's to simplify message comparison */
		memset(item, 0, sizeof(int) * wlen);
	}

	return item;
}
    a7a0:	4650      	mov	r0, sl
    a7a2:	b005      	add	sp, #20
    a7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000a7a8 <mpsc_pbuf_commit>:

void mpsc_pbuf_commit(struct mpsc_pbuf_buffer *buffer,
		       union mpsc_pbuf_generic *item)
{
    a7a8:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    a7aa:	6983      	ldr	r3, [r0, #24]
{
    a7ac:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    a7ae:	4608      	mov	r0, r1
{
    a7b0:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    a7b2:	4798      	blx	r3
    a7b4:	4602      	mov	r2, r0
    a7b6:	f04f 0320 	mov.w	r3, #32
    a7ba:	f3ef 8611 	mrs	r6, BASEPRI
    a7be:	f383 8812 	msr	BASEPRI_MAX, r3
    a7c2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&buffer->lock);

	item->hdr.valid = 1;
    a7c6:	782b      	ldrb	r3, [r5, #0]
    a7c8:	f043 0301 	orr.w	r3, r3, #1
    a7cc:	702b      	strb	r3, [r5, #0]
	buffer->wr_idx = idx_inc(buffer, buffer->wr_idx, wlen);
    a7ce:	6861      	ldr	r1, [r4, #4]
    a7d0:	4620      	mov	r0, r4
    a7d2:	f7ff fec3 	bl	a55c <idx_inc>
    a7d6:	6060      	str	r0, [r4, #4]
	max_utilization_update(buffer);
    a7d8:	4620      	mov	r0, r4
    a7da:	f7ff fee3 	bl	a5a4 <max_utilization_update>
	__asm__ volatile(
    a7de:	f386 8811 	msr	BASEPRI, r6
    a7e2:	f3bf 8f6f 	isb	sy
	k_spin_unlock(&buffer->lock, key);
	MPSC_PBUF_DBG(buffer, "committed %p ", item);
}
    a7e6:	bd70      	pop	{r4, r5, r6, pc}

0000a7e8 <mpsc_pbuf_claim>:
		}
	} while (cont);
}

const union mpsc_pbuf_generic *mpsc_pbuf_claim(struct mpsc_pbuf_buffer *buffer)
{
    a7e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a7ec:	4604      	mov	r4, r0
	__asm__ volatile(
    a7ee:	f04f 0320 	mov.w	r3, #32
    a7f2:	f3ef 8611 	mrs	r6, BASEPRI
    a7f6:	f383 8812 	msr	BASEPRI_MAX, r3
    a7fa:	f3bf 8f6f 	isb	sy
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    a7fe:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
    a802:	429f      	cmp	r7, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    a804:	bf88      	it	hi
    a806:	6a23      	ldrhi	r3, [r4, #32]
    a808:	1bdb      	subs	r3, r3, r7
		key = k_spin_lock(&buffer->lock);
		wrap = available(buffer, &a);
		item = (union mpsc_pbuf_generic *)
			&buffer->buf[buffer->tmp_rd_idx];

		if (!a || is_invalid(item)) {
    a80a:	b1f3      	cbz	r3, a84a <mpsc_pbuf_claim+0x62>
		item = (union mpsc_pbuf_generic *)
    a80c:	69e1      	ldr	r1, [r4, #28]
	return !item->hdr.valid && !item->hdr.busy;
    a80e:	f811 2027 	ldrb.w	r2, [r1, r7, lsl #2]
		if (!a || is_invalid(item)) {
    a812:	f012 0303 	ands.w	r3, r2, #3
		item = (union mpsc_pbuf_generic *)
    a816:	eb01 0887 	add.w	r8, r1, r7, lsl #2
		if (!a || is_invalid(item)) {
    a81a:	d016      	beq.n	a84a <mpsc_pbuf_claim+0x62>
	if (item->hdr.busy && !item->hdr.valid) {
    a81c:	2b02      	cmp	r3, #2
    a81e:	d103      	bne.n	a828 <mpsc_pbuf_claim+0x40>
		return item->skip.len;
    a820:	f851 5027 	ldr.w	r5, [r1, r7, lsl #2]
			item = NULL;
		} else {
			uint32_t skip = get_skip(item);

			if (skip || !is_valid(item)) {
    a824:	08ad      	lsrs	r5, r5, #2
    a826:	d115      	bne.n	a854 <mpsc_pbuf_claim+0x6c>
    a828:	07d0      	lsls	r0, r2, #31
				cont = true;
			} else {
				item->hdr.busy = 1;
				buffer->tmp_rd_idx =
					idx_inc(buffer, buffer->tmp_rd_idx,
						buffer->get_wlen(item));
    a82a:	69a3      	ldr	r3, [r4, #24]
			if (skip || !is_valid(item)) {
    a82c:	d50f      	bpl.n	a84e <mpsc_pbuf_claim+0x66>
				item->hdr.busy = 1;
    a82e:	f042 0202 	orr.w	r2, r2, #2
    a832:	f801 2027 	strb.w	r2, [r1, r7, lsl #2]
					idx_inc(buffer, buffer->tmp_rd_idx,
    a836:	4640      	mov	r0, r8
    a838:	4798      	blx	r3
    a83a:	4639      	mov	r1, r7
    a83c:	4602      	mov	r2, r0
    a83e:	4620      	mov	r0, r4
    a840:	f7ff fe8c 	bl	a55c <idx_inc>
		cont = false;
    a844:	2300      	movs	r3, #0
				buffer->tmp_rd_idx =
    a846:	60a0      	str	r0, [r4, #8]
    a848:	e011      	b.n	a86e <mpsc_pbuf_claim+0x86>
			item = NULL;
    a84a:	4698      	mov	r8, r3
    a84c:	e00f      	b.n	a86e <mpsc_pbuf_claim+0x86>
					skip ? skip : buffer->get_wlen(item);
    a84e:	4640      	mov	r0, r8
    a850:	4798      	blx	r3
    a852:	4605      	mov	r5, r0
				      idx_inc(buffer, buffer->tmp_rd_idx, inc);
    a854:	68a1      	ldr	r1, [r4, #8]
    a856:	462a      	mov	r2, r5
    a858:	4620      	mov	r0, r4
    a85a:	f7ff fe7f 	bl	a55c <idx_inc>
					idx_inc(buffer, buffer->rd_idx, inc);
    a85e:	68e1      	ldr	r1, [r4, #12]
				buffer->tmp_rd_idx =
    a860:	60a0      	str	r0, [r4, #8]
					idx_inc(buffer, buffer->rd_idx, inc);
    a862:	462a      	mov	r2, r5
    a864:	4620      	mov	r0, r4
    a866:	f7ff fe79 	bl	a55c <idx_inc>
				cont = true;
    a86a:	2301      	movs	r3, #1
				buffer->rd_idx =
    a86c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    a86e:	f386 8811 	msr	BASEPRI, r6
    a872:	f3bf 8f6f 	isb	sy

		if (!cont) {
			MPSC_PBUF_DBG(buffer, "claimed: %p ", item);
		}
		k_spin_unlock(&buffer->lock, key);
	} while (cont);
    a876:	2b00      	cmp	r3, #0
    a878:	d1b9      	bne.n	a7ee <mpsc_pbuf_claim+0x6>

	return item;
}
    a87a:	4640      	mov	r0, r8
    a87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000a880 <mpsc_pbuf_free>:

void mpsc_pbuf_free(struct mpsc_pbuf_buffer *buffer,
		     const union mpsc_pbuf_generic *item)
{
    a880:	b570      	push	{r4, r5, r6, lr}
	uint32_t wlen = buffer->get_wlen(item);
    a882:	6983      	ldr	r3, [r0, #24]
{
    a884:	4604      	mov	r4, r0
	uint32_t wlen = buffer->get_wlen(item);
    a886:	4608      	mov	r0, r1
{
    a888:	460d      	mov	r5, r1
	uint32_t wlen = buffer->get_wlen(item);
    a88a:	4798      	blx	r3
    a88c:	4602      	mov	r2, r0
	__asm__ volatile(
    a88e:	f04f 0320 	mov.w	r3, #32
    a892:	f3ef 8611 	mrs	r6, BASEPRI
    a896:	f383 8812 	msr	BASEPRI_MAX, r3
    a89a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&buffer->lock);
	union mpsc_pbuf_generic *witem = (union mpsc_pbuf_generic *)item;

	witem->hdr.valid = 0;
    a89e:	782b      	ldrb	r3, [r5, #0]
    a8a0:	f36f 0300 	bfc	r3, #0, #1
    a8a4:	702b      	strb	r3, [r5, #0]
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    a8a6:	6923      	ldr	r3, [r4, #16]
    a8a8:	079b      	lsls	r3, r3, #30
    a8aa:	d505      	bpl.n	a8b8 <mpsc_pbuf_free+0x38>
		 ((uint32_t *)item == &buffer->buf[buffer->rd_idx])) {
    a8ac:	68e1      	ldr	r1, [r4, #12]
    a8ae:	69e3      	ldr	r3, [r4, #28]
    a8b0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
	if (!(buffer->flags & MPSC_PBUF_MODE_OVERWRITE) ||
    a8b4:	429d      	cmp	r5, r3
    a8b6:	d112      	bne.n	a8de <mpsc_pbuf_free+0x5e>
		witem->hdr.busy = 0;
    a8b8:	782b      	ldrb	r3, [r5, #0]
    a8ba:	f36f 0341 	bfc	r3, #1, #1
    a8be:	702b      	strb	r3, [r5, #0]
		buffer->rd_idx = idx_inc(buffer, buffer->rd_idx, wlen);
    a8c0:	68e1      	ldr	r1, [r4, #12]
    a8c2:	4620      	mov	r0, r4
    a8c4:	f7ff fe4a 	bl	a55c <idx_inc>
    a8c8:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
    a8ca:	f386 8811 	msr	BASEPRI, r6
    a8ce:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    a8d2:	f104 0028 	add.w	r0, r4, #40	; 0x28
	}
	MPSC_PBUF_DBG(buffer, "freed: %p ", item);

	k_spin_unlock(&buffer->lock, key);
	k_sem_give(&buffer->sem);
}
    a8d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a8da:	f7fe baf1 	b.w	8ec0 <z_impl_k_sem_give>
		witem->skip.len = wlen;
    a8de:	682b      	ldr	r3, [r5, #0]
    a8e0:	f360 039f 	bfi	r3, r0, #2, #30
    a8e4:	602b      	str	r3, [r5, #0]
    a8e6:	e7f0      	b.n	a8ca <mpsc_pbuf_free+0x4a>

0000a8e8 <mpsc_pbuf_is_pending>:
	if (buffer->tmp_rd_idx <= buffer->wr_idx) {
    a8e8:	e9d0 2301 	ldrd	r2, r3, [r0, #4]
    a8ec:	4293      	cmp	r3, r2
	*res = buffer->size - buffer->tmp_rd_idx;
    a8ee:	bf8a      	itet	hi
    a8f0:	6a00      	ldrhi	r0, [r0, #32]
		*res = (buffer->wr_idx - buffer->tmp_rd_idx);
    a8f2:	1ad3      	subls	r3, r2, r3
	*res = buffer->size - buffer->tmp_rd_idx;
    a8f4:	1ac3      	subhi	r3, r0, r3
	uint32_t a;

	(void)available(buffer, &a);

	return a ? true : false;
}
    a8f6:	1e18      	subs	r0, r3, #0
    a8f8:	bf18      	it	ne
    a8fa:	2001      	movne	r0, #1
    a8fc:	4770      	bx	lr

0000a8fe <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_LEGACY_INCLUDE_PATH, 1);

GEN_ABS_SYM_END
    a8fe:	4770      	bx	lr

0000a900 <log_msg2_generic_get_wlen>:
	return msg->generic.type == Z_LOG_MSG2_LOG;
    a900:	7803      	ldrb	r3, [r0, #0]
	if (z_log_item_is_msg(generic_msg)) {
    a902:	075b      	lsls	r3, r3, #29
    a904:	d40b      	bmi.n	a91e <log_msg2_generic_get_wlen+0x1e>
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    a906:	6803      	ldr	r3, [r0, #0]
    a908:	8840      	ldrh	r0, [r0, #2]
    a90a:	f3c3 2349 	ubfx	r3, r3, #9, #10
    a90e:	f3c0 00cb 	ubfx	r0, r0, #3, #12
    a912:	4418      	add	r0, r3
    a914:	3017      	adds	r0, #23
    a916:	f020 0007 	bic.w	r0, r0, #7
    a91a:	0880      	lsrs	r0, r0, #2
		return log_msg2_get_total_wlen(msg->hdr.desc);
    a91c:	4770      	bx	lr
	return 0;
    a91e:	2000      	movs	r0, #0
}
    a920:	4770      	bx	lr

0000a922 <default_get_timestamp>:
#ifndef _ASMLANGUAGE
extern uint32_t sys_clock_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return sys_clock_cycle_get_32();
    a922:	f000 bb13 	b.w	af4c <sys_clock_cycle_get_32>

0000a926 <dummy_timestamp>:
    a926:	2000      	movs	r0, #0
    a928:	4770      	bx	lr

0000a92a <z_log_vprintk>:
{
    a92a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		va_end(parm7.val);
		return;
	}
#endif
	compiler_barrier();
	z_impl_z_log_msg2_runtime_vcreate(domain_id, source, level, data, dlen, package_flags, fmt, ap);
    a92c:	2300      	movs	r3, #0
    a92e:	e9cd 0102 	strd	r0, r1, [sp, #8]
    a932:	e9cd 3300 	strd	r3, r3, [sp]
    a936:	461a      	mov	r2, r3
    a938:	4619      	mov	r1, r3
    a93a:	4618      	mov	r0, r3
    a93c:	f7f7 fa60 	bl	1e00 <z_impl_z_log_msg2_runtime_vcreate>
}
    a940:	b005      	add	sp, #20
    a942:	f85d fb04 	ldr.w	pc, [sp], #4

0000a946 <notify_drop>:
	z_log_dropped(true);
    a946:	2001      	movs	r0, #1
    a948:	f7f6 bee8 	b.w	171c <z_log_dropped>

0000a94c <get_msg>:
{
    a94c:	b508      	push	{r3, lr}
		msg.msg2 = z_log_msg2_claim();
    a94e:	f7f6 ff59 	bl	1804 <z_log_msg2_claim>
}
    a952:	bd08      	pop	{r3, pc}

0000a954 <z_log_get_tag>:
}
    a954:	2000      	movs	r0, #0
    a956:	4770      	bx	lr

0000a958 <buffer_write>:
{
    a958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a95a:	4606      	mov	r6, r0
    a95c:	460d      	mov	r5, r1
    a95e:	4614      	mov	r4, r2
    a960:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
    a962:	4621      	mov	r1, r4
    a964:	4628      	mov	r0, r5
    a966:	463a      	mov	r2, r7
    a968:	47b0      	blx	r6
	} while (len != 0);
    a96a:	1a24      	subs	r4, r4, r0
		buf += processed;
    a96c:	4405      	add	r5, r0
	} while (len != 0);
    a96e:	d1f8      	bne.n	a962 <buffer_write+0xa>
}
    a970:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000a972 <log_output_flush>:
		     output->control_block->offset,
    a972:	6842      	ldr	r2, [r0, #4]
	buffer_write(output->func, output->buf,
    a974:	6881      	ldr	r1, [r0, #8]
{
    a976:	b510      	push	{r4, lr}
    a978:	4604      	mov	r4, r0
	buffer_write(output->func, output->buf,
    a97a:	e9d2 2300 	ldrd	r2, r3, [r2]
    a97e:	6800      	ldr	r0, [r0, #0]
    a980:	f7ff ffea 	bl	a958 <buffer_write>
	output->control_block->offset = 0;
    a984:	6863      	ldr	r3, [r4, #4]
    a986:	2200      	movs	r2, #0
    a988:	601a      	str	r2, [r3, #0]
}
    a98a:	bd10      	pop	{r4, pc}

0000a98c <out_func>:
{
    a98c:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
    a98e:	684b      	ldr	r3, [r1, #4]
    a990:	681a      	ldr	r2, [r3, #0]
    a992:	68cb      	ldr	r3, [r1, #12]
    a994:	429a      	cmp	r2, r3
{
    a996:	4605      	mov	r5, r0
    a998:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
    a99a:	d102      	bne.n	a9a2 <out_func+0x16>
		log_output_flush(out_ctx);
    a99c:	4608      	mov	r0, r1
    a99e:	f7ff ffe8 	bl	a972 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    a9a2:	6863      	ldr	r3, [r4, #4]
    a9a4:	f3bf 8f5b 	dmb	ish
    a9a8:	e853 2f00 	ldrex	r2, [r3]
    a9ac:	1c51      	adds	r1, r2, #1
    a9ae:	e843 1000 	strex	r0, r1, [r3]
    a9b2:	2800      	cmp	r0, #0
    a9b4:	d1f8      	bne.n	a9a8 <out_func+0x1c>
    a9b6:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
    a9ba:	68a3      	ldr	r3, [r4, #8]
    a9bc:	549d      	strb	r5, [r3, r2]
}
    a9be:	2000      	movs	r0, #0
    a9c0:	bd38      	pop	{r3, r4, r5, pc}

0000a9c2 <cr_out_func>:
{
    a9c2:	b538      	push	{r3, r4, r5, lr}
    a9c4:	4605      	mov	r5, r0
    a9c6:	460c      	mov	r4, r1
	out_func(c, ctx);
    a9c8:	f7ff ffe0 	bl	a98c <out_func>
	if (c == '\n') {
    a9cc:	2d0a      	cmp	r5, #10
    a9ce:	d103      	bne.n	a9d8 <cr_out_func+0x16>
		out_func((int)'\r', ctx);
    a9d0:	4621      	mov	r1, r4
    a9d2:	200d      	movs	r0, #13
    a9d4:	f7ff ffda 	bl	a98c <out_func>
}
    a9d8:	2000      	movs	r0, #0
    a9da:	bd38      	pop	{r3, r4, r5, pc}

0000a9dc <z_log_msg2_finalize>:
{
    a9dc:	b570      	push	{r4, r5, r6, lr}
    a9de:	460e      	mov	r6, r1
    a9e0:	4615      	mov	r5, r2
    a9e2:	4619      	mov	r1, r3
	if (!msg) {
    a9e4:	4604      	mov	r4, r0
    a9e6:	b918      	cbnz	r0, a9f0 <z_log_msg2_finalize+0x14>
}
    a9e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_log_dropped(false);
    a9ec:	f7f6 be96 	b.w	171c <z_log_dropped>
	if (data) {
    a9f0:	b143      	cbz	r3, aa04 <z_log_msg2_finalize+0x28>
		uint8_t *d = msg->data + desc.package_len;
    a9f2:	f100 0310 	add.w	r3, r0, #16
    a9f6:	f3c2 2049 	ubfx	r0, r2, #9, #10
		memcpy(d, data, desc.data_len);
    a9fa:	4418      	add	r0, r3
    a9fc:	f3c2 42cb 	ubfx	r2, r2, #19, #12
    aa00:	f000 f8cc 	bl	ab9c <memcpy>
	msg->hdr.source = source;
    aa04:	e9c4 5600 	strd	r5, r6, [r4]
	z_log_msg2_commit(msg);
    aa08:	4620      	mov	r0, r4
}
    aa0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_log_msg2_commit(msg);
    aa0e:	f7f6 bfbb 	b.w	1988 <z_log_msg2_commit>

0000aa12 <z_impl_z_log_msg2_static_create>:
{
    aa12:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return Z_LOG_MSG2_ALIGNED_WLEN(desc.package_len, desc.data_len);
    aa16:	f3c1 44cb 	ubfx	r4, r1, #19, #12
    aa1a:	f3c1 2649 	ubfx	r6, r1, #9, #10
    aa1e:	b089      	sub	sp, #36	; 0x24
    aa20:	4681      	mov	r9, r0
    aa22:	460d      	mov	r5, r1
    aa24:	4690      	mov	r8, r2
    aa26:	469a      	mov	sl, r3
    aa28:	3417      	adds	r4, #23
	if (inlen > 0) {
    aa2a:	b386      	cbz	r6, aa8e <z_impl_z_log_msg2_static_create+0x7c>
		len = cbprintf_package_copy(package, inlen,
    aa2c:	2302      	movs	r3, #2
    aa2e:	9300      	str	r3, [sp, #0]
    aa30:	f04f 0b04 	mov.w	fp, #4
    aa34:	2300      	movs	r3, #0
    aa36:	af06      	add	r7, sp, #24
    aa38:	4631      	mov	r1, r6
    aa3a:	461a      	mov	r2, r3
    aa3c:	f8cd b008 	str.w	fp, [sp, #8]
    aa40:	9701      	str	r7, [sp, #4]
    aa42:	4640      	mov	r0, r8
    aa44:	9605      	str	r6, [sp, #20]
    aa46:	f7f5 ffe9 	bl	a1c <cbprintf_package_copy>
		out_desc.package_len = len;
    aa4a:	f3c0 0309 	ubfx	r3, r0, #0, #10
    aa4e:	1918      	adds	r0, r3, r4
    aa50:	f020 0007 	bic.w	r0, r0, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    aa54:	0880      	lsrs	r0, r0, #2
		out_desc.package_len = len;
    aa56:	461e      	mov	r6, r3
    aa58:	9304      	str	r3, [sp, #16]
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    aa5a:	f7f6 fecb 	bl	17f4 <z_log_msg2_alloc>
		if (msg) {
    aa5e:	4604      	mov	r4, r0
    aa60:	b150      	cbz	r0, aa78 <z_impl_z_log_msg2_static_create+0x66>
			len = cbprintf_package_copy(package, inlen,
    aa62:	2302      	movs	r3, #2
    aa64:	9300      	str	r3, [sp, #0]
    aa66:	f100 0210 	add.w	r2, r0, #16
    aa6a:	e9cd 7b01 	strd	r7, fp, [sp, #4]
    aa6e:	9b04      	ldr	r3, [sp, #16]
    aa70:	9905      	ldr	r1, [sp, #20]
    aa72:	4640      	mov	r0, r8
    aa74:	f7f5 ffd2 	bl	a1c <cbprintf_package_copy>
	z_log_msg2_finalize(msg, source, out_desc, data);
    aa78:	f366 2552 	bfi	r5, r6, #9, #10
    aa7c:	4653      	mov	r3, sl
    aa7e:	462a      	mov	r2, r5
    aa80:	4649      	mov	r1, r9
    aa82:	4620      	mov	r0, r4
}
    aa84:	b009      	add	sp, #36	; 0x24
    aa86:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	z_log_msg2_finalize(msg, source, out_desc, data);
    aa8a:	f7ff bfa7 	b.w	a9dc <z_log_msg2_finalize>
    aa8e:	f024 0007 	bic.w	r0, r4, #7
		msg = z_log_msg2_alloc(log_msg2_get_total_wlen(out_desc));
    aa92:	0880      	lsrs	r0, r0, #2
    aa94:	f7f6 feae 	bl	17f4 <z_log_msg2_alloc>
    aa98:	4604      	mov	r4, r0
    aa9a:	e7ed      	b.n	aa78 <z_impl_z_log_msg2_static_create+0x66>

0000aa9c <usb_write>:
{
    aa9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    aaa0:	4606      	mov	r6, r0
    aaa2:	460f      	mov	r7, r1
    aaa4:	4690      	mov	r8, r2
    aaa6:	4699      	mov	r9, r3
    aaa8:	2504      	movs	r5, #4
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    aaaa:	464b      	mov	r3, r9
    aaac:	4642      	mov	r2, r8
    aaae:	4639      	mov	r1, r7
    aab0:	4630      	mov	r0, r6
    aab2:	f7f9 fd93 	bl	45dc <usb_dc_ep_write>
		if (ret == -EAGAIN) {
    aab6:	f110 0f0b 	cmn.w	r0, #11
		ret = usb_dc_ep_write(ep, data, data_len, bytes_ret);
    aaba:	4604      	mov	r4, r0
		if (ret == -EAGAIN) {
    aabc:	d103      	bne.n	aac6 <usb_write+0x2a>
	z_impl_k_yield();
    aabe:	f7fe fe05 	bl	96cc <z_impl_k_yield>
	} while (ret == -EAGAIN && tries--);
    aac2:	3d01      	subs	r5, #1
    aac4:	d1f1      	bne.n	aaaa <usb_write+0xe>
}
    aac6:	4620      	mov	r0, r4
    aac8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000aacc <usb_get_dev_data_by_cfg>:
	return list->head;
    aacc:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_cfg(sys_slist_t *list,
					     struct usb_cfg_data *cfg)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    aace:	b140      	cbz	r0, aae2 <usb_get_dev_data_by_cfg+0x16>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg_cur = dev->config;
    aad0:	f850 3c04 	ldr.w	r3, [r0, #-4]

		if (cfg_cur == cfg) {
    aad4:	685b      	ldr	r3, [r3, #4]
    aad6:	4299      	cmp	r1, r3
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    aad8:	f1a0 0004 	sub.w	r0, r0, #4
		if (cfg_cur == cfg) {
    aadc:	d001      	beq.n	aae2 <usb_get_dev_data_by_cfg+0x16>
	return node->next;
    aade:	6840      	ldr	r0, [r0, #4]
    aae0:	e7f5      	b.n	aace <usb_get_dev_data_by_cfg+0x2>
	}

	LOG_DBG("Device data not found for cfg %p", cfg);

	return NULL;
}
    aae2:	4770      	bx	lr

0000aae4 <usb_get_dev_data_by_iface>:
	return list->head;
    aae4:	6800      	ldr	r0, [r0, #0]
struct usb_dev_data *usb_get_dev_data_by_iface(sys_slist_t *list,
					       uint8_t iface_num)
{
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    aae6:	b150      	cbz	r0, aafe <usb_get_dev_data_by_iface+0x1a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    aae8:	f850 3c04 	ldr.w	r3, [r0, #-4]
		const struct usb_if_descriptor *if_desc =
    aaec:	685b      	ldr	r3, [r3, #4]
						cfg->interface_descriptor;

		if (if_desc->bInterfaceNumber == iface_num) {
    aaee:	685b      	ldr	r3, [r3, #4]
    aaf0:	789b      	ldrb	r3, [r3, #2]
    aaf2:	428b      	cmp	r3, r1
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    aaf4:	f1a0 0004 	sub.w	r0, r0, #4
		if (if_desc->bInterfaceNumber == iface_num) {
    aaf8:	d001      	beq.n	aafe <usb_get_dev_data_by_iface+0x1a>
	return node->next;
    aafa:	6840      	ldr	r0, [r0, #4]
    aafc:	e7f3      	b.n	aae6 <usb_get_dev_data_by_iface+0x2>
	}

	LOG_DBG("Device data not found for iface number %u", iface_num);

	return NULL;
}
    aafe:	4770      	bx	lr

0000ab00 <usb_get_dev_data_by_ep>:

struct usb_dev_data *usb_get_dev_data_by_ep(sys_slist_t *list, uint8_t ep)
{
    ab00:	b530      	push	{r4, r5, lr}
	return list->head;
    ab02:	6800      	ldr	r0, [r0, #0]
	struct usb_dev_data *dev_data;

	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    ab04:	b188      	cbz	r0, ab2a <usb_get_dev_data_by_ep+0x2a>
		const struct device *dev = dev_data->dev;
		const struct usb_cfg_data *cfg = dev->config;
    ab06:	f850 3c04 	ldr.w	r3, [r0, #-4]
    ab0a:	685b      	ldr	r3, [r3, #4]
		const struct usb_ep_cfg_data *ep_data = cfg->endpoint;
    ab0c:	6a1a      	ldr	r2, [r3, #32]

		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    ab0e:	7f1d      	ldrb	r5, [r3, #28]
	SYS_SLIST_FOR_EACH_CONTAINER(list, dev_data, node) {
    ab10:	3804      	subs	r0, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    ab12:	2300      	movs	r3, #0
			if (ep_data[i].ep_addr == ep) {
    ab14:	3a04      	subs	r2, #4
		for (uint8_t i = 0; i < cfg->num_endpoints; i++) {
    ab16:	b2dc      	uxtb	r4, r3
    ab18:	42a5      	cmp	r5, r4
    ab1a:	d801      	bhi.n	ab20 <usb_get_dev_data_by_ep+0x20>
	return node->next;
    ab1c:	6840      	ldr	r0, [r0, #4]
    ab1e:	e7f1      	b.n	ab04 <usb_get_dev_data_by_ep+0x4>
			if (ep_data[i].ep_addr == ep) {
    ab20:	3301      	adds	r3, #1
    ab22:	f812 4033 	ldrb.w	r4, [r2, r3, lsl #3]
    ab26:	428c      	cmp	r4, r1
    ab28:	d1f5      	bne.n	ab16 <usb_get_dev_data_by_ep+0x16>
	}

	LOG_DBG("Device data not found for ep %u", ep);

	return NULL;
}
    ab2a:	bd30      	pop	{r4, r5, pc}

0000ab2c <z_do_kernel_oops>:
 *   fault handler will executed instead of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    ab2c:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
    ab2e:	6800      	ldr	r0, [r0, #0]
    ab30:	f7f8 b858 	b.w	2be4 <z_arm_fatal_error>

0000ab34 <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    ab34:	2100      	movs	r1, #0
    ab36:	2001      	movs	r0, #1
    ab38:	f7f8 b854 	b.w	2be4 <z_arm_fatal_error>

0000ab3c <z_arm_nmi>:
 * Simply call what is installed in 'static void(*handler)(void)'.
 *
 */

void z_arm_nmi(void)
{
    ab3c:	b508      	push	{r3, lr}
	handler();
    ab3e:	f7f8 f90f 	bl	2d60 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    ab42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    ab46:	f7f8 b9e1 	b.w	2f0c <z_arm_exc_exit>

0000ab4a <z_log_msg2_static_create.constprop.0>:
	z_impl_z_log_msg2_static_create(source, desc, package, data);
    ab4a:	2300      	movs	r3, #0
    ab4c:	f7ff bf61 	b.w	aa12 <z_impl_z_log_msg2_static_create>

0000ab50 <strcpy>:

char *strcpy(char *ZRESTRICT d, const char *ZRESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
    ab50:	3901      	subs	r1, #1
    ab52:	4603      	mov	r3, r0
    ab54:	f811 2f01 	ldrb.w	r2, [r1, #1]!
    ab58:	b90a      	cbnz	r2, ab5e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
    ab5a:	701a      	strb	r2, [r3, #0]

	return dest;
}
    ab5c:	4770      	bx	lr
		*d = *s;
    ab5e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
    ab62:	e7f7      	b.n	ab54 <strcpy+0x4>

0000ab64 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    ab64:	4603      	mov	r3, r0
	size_t n = 0;
    ab66:	2000      	movs	r0, #0

	while (*s != '\0') {
    ab68:	5c1a      	ldrb	r2, [r3, r0]
    ab6a:	b902      	cbnz	r2, ab6e <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    ab6c:	4770      	bx	lr
		n++;
    ab6e:	3001      	adds	r0, #1
    ab70:	e7fa      	b.n	ab68 <strlen+0x4>

0000ab72 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    ab72:	4603      	mov	r3, r0
	size_t n = 0;
    ab74:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    ab76:	5c1a      	ldrb	r2, [r3, r0]
    ab78:	b10a      	cbz	r2, ab7e <strnlen+0xc>
    ab7a:	4288      	cmp	r0, r1
    ab7c:	d100      	bne.n	ab80 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    ab7e:	4770      	bx	lr
		n++;
    ab80:	3001      	adds	r0, #1
    ab82:	e7f8      	b.n	ab76 <strnlen+0x4>

0000ab84 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    ab84:	1e43      	subs	r3, r0, #1
    ab86:	3901      	subs	r1, #1
    ab88:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    ab8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    ab90:	4282      	cmp	r2, r0
    ab92:	d101      	bne.n	ab98 <strcmp+0x14>
    ab94:	2a00      	cmp	r2, #0
    ab96:	d1f7      	bne.n	ab88 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    ab98:	1a10      	subs	r0, r2, r0
    ab9a:	4770      	bx	lr

0000ab9c <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    ab9c:	b510      	push	{r4, lr}
    ab9e:	1e43      	subs	r3, r0, #1
    aba0:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    aba2:	4291      	cmp	r1, r2
    aba4:	d100      	bne.n	aba8 <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    aba6:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    aba8:	f811 4b01 	ldrb.w	r4, [r1], #1
    abac:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    abb0:	e7f7      	b.n	aba2 <memcpy+0x6>

0000abb2 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    abb2:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    abb4:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    abb6:	4603      	mov	r3, r0
	while (n > 0) {
    abb8:	4293      	cmp	r3, r2
    abba:	d100      	bne.n	abbe <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    abbc:	4770      	bx	lr
		*(d_byte++) = c_byte;
    abbe:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    abc2:	e7f9      	b.n	abb8 <memset+0x6>

0000abc4 <_stdout_hook_default>:
}
    abc4:	f04f 30ff 	mov.w	r0, #4294967295
    abc8:	4770      	bx	lr

0000abca <nordicsemi_nrf52_init>:
	__asm__ volatile(
    abca:	f04f 0220 	mov.w	r2, #32
    abce:	f3ef 8311 	mrs	r3, BASEPRI
    abd2:	f382 8812 	msr	BASEPRI_MAX, r2
    abd6:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
    abda:	f383 8811 	msr	BASEPRI, r3
    abde:	f3bf 8f6f 	isb	sy
}
    abe2:	2000      	movs	r0, #0
    abe4:	4770      	bx	lr

0000abe6 <pm_state_set>:
/* Invoke Low Power/System Off specific Tasks */
__weak void pm_state_set(enum pm_state state, uint8_t substate_id)
{
	ARG_UNUSED(substate_id);

	switch (state) {
    abe6:	2806      	cmp	r0, #6
    abe8:	d108      	bne.n	abfc <pm_state_set+0x16>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    abea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    abee:	2201      	movs	r2, #1
    abf0:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    abf4:	f3bf 8f4f 	dsb	sy
        __WFE();
    abf8:	bf20      	wfe
    while (true)
    abfa:	e7fd      	b.n	abf8 <pm_state_set+0x12>
		break;
	default:
		LOG_DBG("Unsupported power state %u", state);
		break;
	}
}
    abfc:	4770      	bx	lr

0000abfe <pm_state_exit_post_ops>:
    abfe:	2300      	movs	r3, #0
    ac00:	f383 8811 	msr	BASEPRI, r3
    ac04:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    ac08:	4770      	bx	lr

0000ac0a <hid_interface_config>:
	desc->if0.bInterfaceNumber = bInterfaceNumber;
    ac0a:	7081      	strb	r1, [r0, #2]
}
    ac0c:	4770      	bx	lr

0000ac0e <usb_hid_device_init>:
static int usb_hid_device_init(const struct device *dev)
{
	LOG_DBG("Init HID Device: dev %p (%s)", dev, dev->name);

	return 0;
}
    ac0e:	2000      	movs	r0, #0
    ac10:	4770      	bx	lr

0000ac12 <z_log_msg2_static_create.constprop.0>:
    ac12:	2300      	movs	r3, #0
    ac14:	f7ff befd 	b.w	aa12 <z_impl_z_log_msg2_static_create>

0000ac18 <ep_ctx_reset>:
	ep_ctx->buf.data = ep_ctx->buf.block.data;
    ac18:	6903      	ldr	r3, [r0, #16]
{
    ac1a:	b510      	push	{r4, lr}
	ep_ctx->buf.curr = ep_ctx->buf.data;
    ac1c:	e9c0 3305 	strd	r3, r3, [r0, #20]
	ep_ctx->buf.len  = 0U;
    ac20:	2300      	movs	r3, #0
    ac22:	60c3      	str	r3, [r0, #12]
	if (ep_ctx->write_in_progress) {
    ac24:	7f83      	ldrb	r3, [r0, #30]
{
    ac26:	4604      	mov	r4, r0
	if (ep_ctx->write_in_progress) {
    ac28:	b113      	cbz	r3, ac30 <ep_ctx_reset+0x18>
		nrfx_usbd_ep_abort(ep_addr_to_nrfx(ep_ctx->cfg.addr));
    ac2a:	7a40      	ldrb	r0, [r0, #9]
    ac2c:	f000 fbcf 	bl	b3ce <nrfx_usbd_ep_abort>
	ep_ctx->read_complete = true;
    ac30:	2301      	movs	r3, #1
    ac32:	7723      	strb	r3, [r4, #28]
	ep_ctx->read_pending = false;
    ac34:	2300      	movs	r3, #0
    ac36:	7763      	strb	r3, [r4, #29]
	ep_ctx->trans_zlp = false;
    ac38:	77e3      	strb	r3, [r4, #31]
	ep_ctx->write_in_progress = false;
    ac3a:	77a3      	strb	r3, [r4, #30]
}
    ac3c:	bd10      	pop	{r4, pc}

0000ac3e <z_log_msg2_static_create.constprop.0>:
    ac3e:	2300      	movs	r3, #0
    ac40:	f7ff bee7 	b.w	aa12 <z_impl_z_log_msg2_static_create>

0000ac44 <k_mutex_lock.constprop.0.isra.0>:
	return z_impl_k_mutex_lock(mutex, timeout);
    ac44:	f7fe b84e 	b.w	8ce4 <z_impl_k_mutex_lock>

0000ac48 <k_mutex_unlock.isra.0>:
	return z_impl_k_mutex_unlock(mutex);
    ac48:	f7fe b8c4 	b.w	8dd4 <z_impl_k_mutex_unlock>

0000ac4c <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
    ac4c:	6903      	ldr	r3, [r0, #16]
    ac4e:	b2c9      	uxtb	r1, r1
    ac50:	220c      	movs	r2, #12
    ac52:	fb01 3302 	mla	r3, r1, r2, r3
    ac56:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
    ac58:	f000 0007 	and.w	r0, r0, #7
    ac5c:	4770      	bx	lr

0000ac5e <set_on_state>:
	__asm__ volatile(
    ac5e:	f04f 0320 	mov.w	r3, #32
    ac62:	f3ef 8211 	mrs	r2, BASEPRI
    ac66:	f383 8812 	msr	BASEPRI_MAX, r3
    ac6a:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    ac6e:	6803      	ldr	r3, [r0, #0]
    ac70:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    ac74:	f043 0302 	orr.w	r3, r3, #2
    ac78:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    ac7a:	f382 8811 	msr	BASEPRI, r2
    ac7e:	f3bf 8f6f 	isb	sy
}
    ac82:	4770      	bx	lr

0000ac84 <stop>:
{
    ac84:	4603      	mov	r3, r0
    ac86:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
    ac88:	6900      	ldr	r0, [r0, #16]
	return &data->subsys[type];
    ac8a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    ac8c:	f04f 0420 	mov.w	r4, #32
    ac90:	f3ef 8611 	mrs	r6, BASEPRI
    ac94:	f384 8812 	msr	BASEPRI_MAX, r4
    ac98:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    ac9c:	250c      	movs	r5, #12
    ac9e:	fb05 0401 	mla	r4, r5, r1, r0
    aca2:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    aca4:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
    aca8:	d001      	beq.n	acae <stop+0x2a>
    acaa:	42a2      	cmp	r2, r4
    acac:	d111      	bne.n	acd2 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    acae:	fb05 0001 	mla	r0, r5, r1, r0
    acb2:	2201      	movs	r2, #1
    acb4:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
    acb6:	2000      	movs	r0, #0
	__asm__ volatile(
    acb8:	f386 8811 	msr	BASEPRI, r6
    acbc:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    acc0:	b930      	cbnz	r0, acd0 <stop+0x4c>
	get_sub_config(dev, type)->stop();
    acc2:	685b      	ldr	r3, [r3, #4]
    acc4:	220c      	movs	r2, #12
    acc6:	fb02 3101 	mla	r1, r2, r1, r3
    acca:	684b      	ldr	r3, [r1, #4]
    accc:	4798      	blx	r3
	return 0;
    acce:	2000      	movs	r0, #0
}
    acd0:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
    acd2:	f04f 30ff 	mov.w	r0, #4294967295
    acd6:	e7ef      	b.n	acb8 <stop+0x34>

0000acd8 <api_stop>:
	return stop(dev, subsys, CTX_API);
    acd8:	2280      	movs	r2, #128	; 0x80
    acda:	f7ff bfd3 	b.w	ac84 <stop>

0000acde <async_start>:
{
    acde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ace0:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
    ace2:	6904      	ldr	r4, [r0, #16]
{
    ace4:	4605      	mov	r5, r0
    ace6:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
    ace8:	f04f 0020 	mov.w	r0, #32
    acec:	f3ef 8c11 	mrs	ip, BASEPRI
    acf0:	f380 8812 	msr	BASEPRI_MAX, r0
    acf4:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    acf8:	260c      	movs	r6, #12
    acfa:	fb06 4601 	mla	r6, r6, r1, r4
    acfe:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    ad00:	f000 0e07 	and.w	lr, r0, #7
    ad04:	f1be 0f01 	cmp.w	lr, #1
    ad08:	d110      	bne.n	ad2c <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    ad0a:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
    ad0c:	2600      	movs	r6, #0
	__asm__ volatile(
    ad0e:	f38c 8811 	msr	BASEPRI, ip
    ad12:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    ad16:	b93e      	cbnz	r6, ad28 <async_start+0x4a>
	subdata->cb = cb;
    ad18:	200c      	movs	r0, #12
    ad1a:	4341      	muls	r1, r0
    ad1c:	440c      	add	r4, r1
	subdata->user_data = user_data;
    ad1e:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    ad22:	686b      	ldr	r3, [r5, #4]
    ad24:	585b      	ldr	r3, [r3, r1]
    ad26:	4798      	blx	r3
}
    ad28:	4630      	mov	r0, r6
    ad2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    ad2c:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
    ad30:	4287      	cmp	r7, r0
    ad32:	bf14      	ite	ne
    ad34:	f04f 36ff 	movne.w	r6, #4294967295
    ad38:	f06f 0677 	mvneq.w	r6, #119	; 0x77
    ad3c:	e7e7      	b.n	ad0e <async_start+0x30>

0000ad3e <api_start>:
{
    ad3e:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
    ad40:	2480      	movs	r4, #128	; 0x80
    ad42:	9400      	str	r4, [sp, #0]
    ad44:	f7ff ffcb 	bl	acde <async_start>
}
    ad48:	b002      	add	sp, #8
    ad4a:	bd10      	pop	{r4, pc}

0000ad4c <onoff_started_callback>:
	return &data->mgr[type];
    ad4c:	6900      	ldr	r0, [r0, #16]
{
    ad4e:	b410      	push	{r4}
	return &data->mgr[type];
    ad50:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    ad52:	241c      	movs	r4, #28
    ad54:	fb03 0004 	mla	r0, r3, r4, r0
    ad58:	2100      	movs	r1, #0
}
    ad5a:	bc10      	pop	{r4}
	notify(mgr, 0);
    ad5c:	4710      	bx	r2

0000ad5e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    ad5e:	2000      	movs	r0, #0
    ad60:	f000 ba0f 	b.w	b182 <nrfx_clock_start>

0000ad64 <blocking_start_callback>:
{
    ad64:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    ad66:	f7fe b8ab 	b.w	8ec0 <z_impl_k_sem_give>

0000ad6a <lfclk_stop>:
{
    ad6a:	b508      	push	{r3, lr}
		z_nrf_clock_calibration_lfclk_stopped();
    ad6c:	f7f9 ff10 	bl	4b90 <z_nrf_clock_calibration_lfclk_stopped>
}
    ad70:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    ad74:	2000      	movs	r0, #0
    ad76:	f000 ba3c 	b.w	b1f2 <nrfx_clock_stop>

0000ad7a <timeout_handler>:
	start_cal_process();
    ad7a:	f7f9 be45 	b.w	4a08 <start_cal_process>

0000ad7e <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ad7e:	6843      	ldr	r3, [r0, #4]
    ad80:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    ad82:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    ad86:	600b      	str	r3, [r1, #0]
}
    ad88:	2000      	movs	r0, #0
    ad8a:	4770      	bx	lr

0000ad8c <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ad8c:	6843      	ldr	r3, [r0, #4]
    ad8e:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    ad90:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    ad94:	4042      	eors	r2, r0
    ad96:	400a      	ands	r2, r1
    ad98:	4042      	eors	r2, r0
    p_reg->OUT = value;
    ad9a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    ad9e:	2000      	movs	r0, #0
    ada0:	4770      	bx	lr

0000ada2 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    ada2:	6843      	ldr	r3, [r0, #4]
    ada4:	685b      	ldr	r3, [r3, #4]
}
    ada6:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    ada8:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    adac:	4770      	bx	lr

0000adae <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    adae:	6843      	ldr	r3, [r0, #4]
    adb0:	685b      	ldr	r3, [r3, #4]
}
    adb2:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    adb4:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    adb8:	4770      	bx	lr

0000adba <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    adba:	6843      	ldr	r3, [r0, #4]
    adbc:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    adbe:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    adc2:	404b      	eors	r3, r1
    p_reg->OUT = value;
    adc4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    adc8:	2000      	movs	r0, #0
    adca:	4770      	bx	lr

0000adcc <gpio_nrfx_manage_callback>:
	return port->data;
    adcc:	6903      	ldr	r3, [r0, #16]
	return list->head;
    adce:	6858      	ldr	r0, [r3, #4]
{
    add0:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
    add2:	b158      	cbz	r0, adec <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    add4:	2400      	movs	r4, #0
    add6:	4281      	cmp	r1, r0
    add8:	d112      	bne.n	ae00 <gpio_nrfx_manage_callback+0x34>
	return node->next;
    adda:	6808      	ldr	r0, [r1, #0]
	return list->tail;
    addc:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
    adde:	b954      	cbnz	r4, adf6 <gpio_nrfx_manage_callback+0x2a>
    ade0:	428d      	cmp	r5, r1
	list->head = node;
    ade2:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
    ade4:	d100      	bne.n	ade8 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
    ade6:	6098      	str	r0, [r3, #8]
	parent->next = child;
    ade8:	2000      	movs	r0, #0
    adea:	6008      	str	r0, [r1, #0]
	if (set) {
    adec:	b96a      	cbnz	r2, ae0a <gpio_nrfx_manage_callback+0x3e>
	return 0;
    adee:	2000      	movs	r0, #0
}
    adf0:	bd30      	pop	{r4, r5, pc}
    adf2:	4628      	mov	r0, r5
    adf4:	e7ef      	b.n	add6 <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
    adf6:	428d      	cmp	r5, r1
	parent->next = child;
    adf8:	6020      	str	r0, [r4, #0]
	list->tail = node;
    adfa:	bf08      	it	eq
    adfc:	609c      	streq	r4, [r3, #8]
}
    adfe:	e7f3      	b.n	ade8 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
    ae00:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    ae02:	4604      	mov	r4, r0
    ae04:	2d00      	cmp	r5, #0
    ae06:	d1f4      	bne.n	adf2 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
    ae08:	b13a      	cbz	r2, ae1a <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
    ae0a:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
    ae0c:	685a      	ldr	r2, [r3, #4]
    ae0e:	600a      	str	r2, [r1, #0]
	list->head = node;
    ae10:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
    ae12:	2800      	cmp	r0, #0
    ae14:	d1eb      	bne.n	adee <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
    ae16:	6099      	str	r1, [r3, #8]
}
    ae18:	e7ea      	b.n	adf0 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
    ae1a:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    ae1e:	e7e7      	b.n	adf0 <gpio_nrfx_manage_callback+0x24>

0000ae20 <qdec_nrfx_sample_fetch>:
	if ((chan != SENSOR_CHAN_ALL) && (chan != SENSOR_CHAN_ROTATION)) {
    ae20:	2939      	cmp	r1, #57	; 0x39
{
    ae22:	b507      	push	{r0, r1, r2, lr}
	if ((chan != SENSOR_CHAN_ALL) && (chan != SENSOR_CHAN_ROTATION)) {
    ae24:	d001      	beq.n	ae2a <qdec_nrfx_sample_fetch+0xa>
    ae26:	2922      	cmp	r1, #34	; 0x22
    ae28:	d10c      	bne.n	ae44 <qdec_nrfx_sample_fetch+0x24>
	nrfx_qdec_accumulators_read(&acc, &accdbl);
    ae2a:	f10d 0106 	add.w	r1, sp, #6
    ae2e:	a801      	add	r0, sp, #4
    ae30:	f7fc fb14 	bl	745c <nrfx_qdec_accumulators_read>
	accumulate(data, acc);
    ae34:	f9bd 0004 	ldrsh.w	r0, [sp, #4]
    ae38:	f7fa f87c 	bl	4f34 <accumulate.constprop.0>
	return 0;
    ae3c:	2000      	movs	r0, #0
}
    ae3e:	b003      	add	sp, #12
    ae40:	f85d fb04 	ldr.w	pc, [sp], #4
		return -ENOTSUP;
    ae44:	f06f 0085 	mvn.w	r0, #133	; 0x85
    ae48:	e7f9      	b.n	ae3e <qdec_nrfx_sample_fetch+0x1e>

0000ae4a <spi_context_get_next_buf.constprop.0>:
static inline void *spi_context_get_next_buf(const struct spi_buf **current,
    ae4a:	b530      	push	{r4, r5, lr}
    ae4c:	4604      	mov	r4, r0
	while (*count) {
    ae4e:	6808      	ldr	r0, [r1, #0]
    ae50:	b908      	cbnz	r0, ae56 <spi_context_get_next_buf.constprop.0+0xc>
	*buf_len = 0;
    ae52:	6010      	str	r0, [r2, #0]
	return NULL;
    ae54:	e004      	b.n	ae60 <spi_context_get_next_buf.constprop.0+0x16>
		if (((*current)->len / dfs) != 0) {
    ae56:	6823      	ldr	r3, [r4, #0]
    ae58:	685d      	ldr	r5, [r3, #4]
    ae5a:	b115      	cbz	r5, ae62 <spi_context_get_next_buf.constprop.0+0x18>
			return (*current)->buf;
    ae5c:	6818      	ldr	r0, [r3, #0]
			*buf_len = (*current)->len / dfs;
    ae5e:	6015      	str	r5, [r2, #0]
}
    ae60:	bd30      	pop	{r4, r5, pc}
		++(*current);
    ae62:	3308      	adds	r3, #8
		--(*count);
    ae64:	3801      	subs	r0, #1
		++(*current);
    ae66:	6023      	str	r3, [r4, #0]
		--(*count);
    ae68:	6008      	str	r0, [r1, #0]
    ae6a:	e7f0      	b.n	ae4e <spi_context_get_next_buf.constprop.0+0x4>

0000ae6c <z_log_msg2_static_create.constprop.0>:
    ae6c:	2300      	movs	r3, #0
    ae6e:	f7ff bdd0 	b.w	aa12 <z_impl_z_log_msg2_static_create>

0000ae72 <gpio_pin_set_dt.isra.0>:
static inline int gpio_pin_set_dt(const struct gpio_dt_spec *spec, int value)
    ae72:	4603      	mov	r3, r0
    ae74:	460a      	mov	r2, r1
	return gpio_pin_set(spec->port, spec->pin, value);
    ae76:	6800      	ldr	r0, [r0, #0]
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    ae78:	7919      	ldrb	r1, [r3, #4]
    ae7a:	2301      	movs	r3, #1
    ae7c:	fa03 f101 	lsl.w	r1, r3, r1
    ae80:	6903      	ldr	r3, [r0, #16]
    ae82:	681b      	ldr	r3, [r3, #0]
    ae84:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
    ae86:	bf18      	it	ne
    ae88:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
    ae8c:	b112      	cbz	r2, ae94 <gpio_pin_set_dt.isra.0+0x22>
	return api->port_set_bits_raw(port, pins);
    ae8e:	6883      	ldr	r3, [r0, #8]
    ae90:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
    ae92:	4718      	bx	r3
    ae94:	6883      	ldr	r3, [r0, #8]
    ae96:	691b      	ldr	r3, [r3, #16]
    ae98:	e7fb      	b.n	ae92 <gpio_pin_set_dt.isra.0+0x20>

0000ae9a <_spi_context_cs_control>:
{
    ae9a:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    ae9c:	6803      	ldr	r3, [r0, #0]
{
    ae9e:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio.port) {
    aea0:	b1e3      	cbz	r3, aedc <_spi_context_cs_control+0x42>
    aea2:	6898      	ldr	r0, [r3, #8]
    aea4:	b1d0      	cbz	r0, aedc <_spi_context_cs_control+0x42>
    aea6:	6805      	ldr	r5, [r0, #0]
    aea8:	b1c5      	cbz	r5, aedc <_spi_context_cs_control+0x42>
		if (on) {
    aeaa:	b149      	cbz	r1, aec0 <_spi_context_cs_control+0x26>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 1);
    aeac:	2101      	movs	r1, #1
    aeae:	f7ff ffe0 	bl	ae72 <gpio_pin_set_dt.isra.0>
			k_busy_wait(ctx->config->cs->delay);
    aeb2:	6823      	ldr	r3, [r4, #0]
    aeb4:	689b      	ldr	r3, [r3, #8]
    aeb6:	6898      	ldr	r0, [r3, #8]
}
    aeb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
    aebc:	f000 bd70 	b.w	b9a0 <z_impl_k_busy_wait>
			if (!force_off &&
    aec0:	b912      	cbnz	r2, aec8 <_spi_context_cs_control+0x2e>
    aec2:	889b      	ldrh	r3, [r3, #4]
    aec4:	04db      	lsls	r3, r3, #19
    aec6:	d409      	bmi.n	aedc <_spi_context_cs_control+0x42>
			k_busy_wait(ctx->config->cs->delay);
    aec8:	6880      	ldr	r0, [r0, #8]
    aeca:	f000 fd69 	bl	b9a0 <z_impl_k_busy_wait>
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    aece:	6823      	ldr	r3, [r4, #0]
    aed0:	2100      	movs	r1, #0
    aed2:	6898      	ldr	r0, [r3, #8]
}
    aed4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set_dt(&ctx->config->cs->gpio, 0);
    aed8:	f7ff bfcb 	b.w	ae72 <gpio_pin_set_dt.isra.0>
}
    aedc:	bd38      	pop	{r3, r4, r5, pc}

0000aede <spi_context_unlock_unconditionally>:
{
    aede:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
    aee0:	2201      	movs	r2, #1
    aee2:	2100      	movs	r1, #0
{
    aee4:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
    aee6:	f7ff ffd8 	bl	ae9a <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
    aeea:	69a3      	ldr	r3, [r4, #24]
    aeec:	b933      	cbnz	r3, aefc <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
    aeee:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
    aef0:	f104 0010 	add.w	r0, r4, #16
}
    aef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    aef8:	f7fd bfe2 	b.w	8ec0 <z_impl_k_sem_give>
    aefc:	bd10      	pop	{r4, pc}

0000aefe <spi_nrfx_release>:
	struct spi_nrfx_data *dev_data = dev->data;
    aefe:	6900      	ldr	r0, [r0, #16]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    af00:	6803      	ldr	r3, [r0, #0]
    af02:	428b      	cmp	r3, r1
{
    af04:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
    af06:	d106      	bne.n	af16 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
    af08:	f890 405c 	ldrb.w	r4, [r0, #92]	; 0x5c
    af0c:	b934      	cbnz	r4, af1c <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
    af0e:	f7ff ffe6 	bl	aede <spi_context_unlock_unconditionally>
	return 0;
    af12:	4620      	mov	r0, r4
}
    af14:	bd10      	pop	{r4, pc}
		return -EINVAL;
    af16:	f06f 0015 	mvn.w	r0, #21
    af1a:	e7fb      	b.n	af14 <spi_nrfx_release+0x16>
		return -EBUSY;
    af1c:	f06f 000f 	mvn.w	r0, #15
    af20:	e7f8      	b.n	af14 <spi_nrfx_release+0x16>

0000af22 <z_impl_hwinfo_get_device_id>:
struct nrf_uid {
	uint32_t id[2];
};

ssize_t z_impl_hwinfo_get_device_id(uint8_t *buffer, size_t length)
{
    af22:	b513      	push	{r0, r1, r4, lr}
NRF_STATIC_INLINE uint32_t nrf_ficr_deviceid_get(NRF_FICR_Type const * p_reg, uint32_t reg_id)
{
#if defined(FICR_INFO_DEVICEID_DEVICEID_Msk)
    return p_reg->INFO.DEVICEID[reg_id];
#else
    return p_reg->DEVICEID[reg_id];
    af24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    af28:	2908      	cmp	r1, #8
    af2a:	6e13      	ldr	r3, [r2, #96]	; 0x60
    af2c:	6e52      	ldr	r2, [r2, #100]	; 0x64
	struct nrf_uid dev_id;
	uint32_t deviceid[2];

	soc_secure_read_deviceid(deviceid);

	dev_id.id[0] = sys_cpu_to_be32(deviceid[1]);
    af2e:	bf28      	it	cs
    af30:	2108      	movcs	r1, #8
    af32:	ba12      	rev	r2, r2
    af34:	9200      	str	r2, [sp, #0]
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    af36:	ba1b      	rev	r3, r3
    af38:	460c      	mov	r4, r1

	if (length > sizeof(dev_id.id)) {
		length = sizeof(dev_id.id);
	}

	memcpy(buffer, dev_id.id, length);
    af3a:	460a      	mov	r2, r1
    af3c:	4669      	mov	r1, sp
	dev_id.id[1] = sys_cpu_to_be32(deviceid[0]);
    af3e:	9301      	str	r3, [sp, #4]
	memcpy(buffer, dev_id.id, length);
    af40:	f7ff fe2c 	bl	ab9c <memcpy>

	return length;
}
    af44:	4620      	mov	r0, r4
    af46:	b002      	add	sp, #8
    af48:	bd10      	pop	{r4, pc}

0000af4a <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    af4a:	4770      	bx	lr

0000af4c <sys_clock_cycle_get_32>:
{
    af4c:	b508      	push	{r3, lr}
	return (uint32_t)z_nrf_rtc_timer_read();
    af4e:	f7fa fc79 	bl	5844 <z_nrf_rtc_timer_read>
}
    af52:	bd08      	pop	{r3, pc}

0000af54 <pinctrl_lookup_state>:

#include <drivers/pinctrl.h>

int pinctrl_lookup_state(const struct pinctrl_dev_config *config, uint8_t id,
			 const struct pinctrl_state **state)
{
    af54:	b530      	push	{r4, r5, lr}
	*state = &config->states[0];
    af56:	6843      	ldr	r3, [r0, #4]
    af58:	6013      	str	r3, [r2, #0]
	while (*state <= &config->states[config->state_cnt - 1U]) {
    af5a:	7a03      	ldrb	r3, [r0, #8]
    af5c:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
    af60:	3b01      	subs	r3, #1
    af62:	00db      	lsls	r3, r3, #3
    af64:	6845      	ldr	r5, [r0, #4]
    af66:	6814      	ldr	r4, [r2, #0]
    af68:	441d      	add	r5, r3
    af6a:	42ac      	cmp	r4, r5
    af6c:	d902      	bls.n	af74 <pinctrl_lookup_state+0x20>
		}

		(*state)++;
	}

	return -ENOENT;
    af6e:	f06f 0001 	mvn.w	r0, #1
}
    af72:	bd30      	pop	{r4, r5, pc}
		if (id == (*state)->id) {
    af74:	7965      	ldrb	r5, [r4, #5]
    af76:	428d      	cmp	r5, r1
    af78:	d002      	beq.n	af80 <pinctrl_lookup_state+0x2c>
		(*state)++;
    af7a:	3408      	adds	r4, #8
    af7c:	6014      	str	r4, [r2, #0]
    af7e:	e7f1      	b.n	af64 <pinctrl_lookup_state+0x10>
			return 0;
    af80:	2000      	movs	r0, #0
    af82:	e7f6      	b.n	af72 <pinctrl_lookup_state+0x1e>

0000af84 <nrf_pin_configure.constprop.0>:
				       nrf_gpio_pin_dir_t dir,
				       nrf_gpio_pin_input_t input,
				       nrf_gpio_pin_drive_t drive)
{
	/* force input direction and disconnected buffer for low power */
	if (NRF_GET_LP(pin) == NRF_LP_ENABLE) {
    af84:	f400 5380 	and.w	r3, r0, #4096	; 0x1000
		dir = NRF_GPIO_PIN_DIR_INPUT;
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    af88:	2b00      	cmp	r3, #0
__unused static void nrf_pin_configure(pinctrl_soc_pin_t pin,
    af8a:	b510      	push	{r4, lr}
    *p_pin = pin_number & 0x1F;
    af8c:	f000 031f 	and.w	r3, r0, #31
		input = NRF_GPIO_PIN_INPUT_DISCONNECT;
    af90:	bf08      	it	eq
    af92:	4614      	moveq	r4, r2
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    af94:	f3c0 1281 	ubfx	r2, r0, #6, #2
           ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos) |
    af98:	f400 6070 	and.w	r0, r0, #3840	; 0xf00
    af9c:	bf18      	it	ne
    af9e:	2100      	movne	r1, #0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    afa0:	ea40 0282 	orr.w	r2, r0, r2, lsl #2
    afa4:	ea42 0201 	orr.w	r2, r2, r1
    afa8:	bf18      	it	ne
    afaa:	2401      	movne	r4, #1
    reg->PIN_CNF[pin_number] = cnf;
    afac:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    afb0:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    afb4:	ea42 0244 	orr.w	r2, r2, r4, lsl #1
    reg->PIN_CNF[pin_number] = cnf;
    afb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	}

	nrf_gpio_cfg(NRF_GET_PIN(pin), dir, input, NRF_GET_PULL(pin),
		     NRF_GET_DRIVE(pin), NRF_GPIO_PIN_NOSENSE);
}
    afbc:	bd10      	pop	{r4, pc}

0000afbe <pinctrl_configure_pins>:

int pinctrl_configure_pins(const pinctrl_soc_pin_t *pins, uint8_t pin_cnt,
			   uintptr_t reg)
{
    afbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    afc2:	4614      	mov	r4, r2
    afc4:	4680      	mov	r8, r0
    afc6:	eb00 0581 	add.w	r5, r0, r1, lsl #2
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    afca:	2601      	movs	r6, #1
    p_reg->OUTCLR = clr_mask;
    afcc:	f04f 47a0 	mov.w	r7, #1342177280	; 0x50000000
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    afd0:	45a8      	cmp	r8, r5
    afd2:	d101      	bne.n	afd8 <pinctrl_configure_pins+0x1a>
		default:
			return -ENOTSUP;
		}
	}

	return 0;
    afd4:	2000      	movs	r0, #0
    afd6:	e00d      	b.n	aff4 <pinctrl_configure_pins+0x36>
		__unused nrf_gpio_pin_drive_t drive = NRF_GET_DRIVE(pins[i]);
    afd8:	f8d8 3000 	ldr.w	r3, [r8]
		switch (NRF_GET_FUN(pins[i])) {
    afdc:	0c1a      	lsrs	r2, r3, #16
    afde:	2a1a      	cmp	r2, #26
    afe0:	d03d      	beq.n	b05e <pinctrl_configure_pins+0xa0>
    afe2:	d809      	bhi.n	aff8 <pinctrl_configure_pins+0x3a>
    afe4:	2a05      	cmp	r2, #5
    afe6:	d025      	beq.n	b034 <pinctrl_configure_pins+0x76>
    afe8:	2a06      	cmp	r2, #6
    afea:	d032      	beq.n	b052 <pinctrl_configure_pins+0x94>
    afec:	2a04      	cmp	r2, #4
    afee:	d00c      	beq.n	b00a <pinctrl_configure_pins+0x4c>
    aff0:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    aff4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		switch (NRF_GET_FUN(pins[i])) {
    aff8:	2a1b      	cmp	r2, #27
    affa:	d035      	beq.n	b068 <pinctrl_configure_pins+0xaa>
    affc:	2a1c      	cmp	r2, #28
    affe:	d1f7      	bne.n	aff0 <pinctrl_configure_pins+0x32>
			NRF_PSEL_QDEC(reg, LED) = NRF_GET_PIN(pins[i]);
    b000:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b004:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    b008:	e027      	b.n	b05a <pinctrl_configure_pins+0x9c>
			NRF_PSEL_SPIM(reg, SCK) = NRF_GET_PIN(pins[i]);
    b00a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b00e:	f8c4 3508 	str.w	r3, [r4, #1288]	; 0x508
    *p_pin = pin_number & 0x1F;
    b012:	f8d8 3000 	ldr.w	r3, [r8]
    b016:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    b01a:	fa06 f303 	lsl.w	r3, r6, r3
    p_reg->OUTCLR = clr_mask;
    b01e:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    b022:	2200      	movs	r2, #0
    b024:	2101      	movs	r1, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b026:	f8d8 0000 	ldr.w	r0, [r8]
    b02a:	f7ff ffab 	bl	af84 <nrf_pin_configure.constprop.0>
	for (uint8_t i = 0U; i < pin_cnt; i++) {
    b02e:	f108 0804 	add.w	r8, r8, #4
    b032:	e7cd      	b.n	afd0 <pinctrl_configure_pins+0x12>
			NRF_PSEL_SPIM(reg, MOSI) = NRF_GET_PIN(pins[i]);
    b034:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b038:	f8c4 350c 	str.w	r3, [r4, #1292]	; 0x50c
    *p_pin = pin_number & 0x1F;
    b03c:	f8d8 3000 	ldr.w	r3, [r8]
    b040:	f003 031f 	and.w	r3, r3, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    b044:	fa06 f303 	lsl.w	r3, r6, r3
    p_reg->OUTCLR = clr_mask;
    b048:	f8c7 350c 	str.w	r3, [r7, #1292]	; 0x50c
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_OUTPUT,
    b04c:	2201      	movs	r2, #1
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b04e:	4611      	mov	r1, r2
    b050:	e7e9      	b.n	b026 <pinctrl_configure_pins+0x68>
			NRF_PSEL_SPIM(reg, MISO) = NRF_GET_PIN(pins[i]);
    b052:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b056:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b05a:	2200      	movs	r2, #0
    b05c:	e7f7      	b.n	b04e <pinctrl_configure_pins+0x90>
			NRF_PSEL_QDEC(reg, A) = NRF_GET_PIN(pins[i]);
    b05e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b062:	f8c4 3520 	str.w	r3, [r4, #1312]	; 0x520
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b066:	e7f8      	b.n	b05a <pinctrl_configure_pins+0x9c>
			NRF_PSEL_QDEC(reg, B) = NRF_GET_PIN(pins[i]);
    b068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    b06c:	f8c4 3524 	str.w	r3, [r4, #1316]	; 0x524
			nrf_pin_configure(pins[i], NRF_GPIO_PIN_DIR_INPUT,
    b070:	e7f3      	b.n	b05a <pinctrl_configure_pins+0x9c>

0000b072 <ESB_SYS_TIMER_IRQHandler>:

	return 1;
}

ISR_DIRECT_DECLARE(ESB_SYS_TIMER_IRQHandler)
    b072:	4668      	mov	r0, sp
    b074:	f020 0107 	bic.w	r1, r0, #7
    b078:	468d      	mov	sp, r1
    b07a:	b501      	push	{r0, lr}
{
	ISR_DIRECT_PM();
    b07c:	f7f7 fe62 	bl	2d44 <_arch_isr_direct_pm>
    b080:	f7f7 ff44 	bl	2f0c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(ESB_SYS_TIMER_IRQHandler)
    b084:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    b088:	4685      	mov	sp, r0
    b08a:	4770      	bx	lr

0000b08c <k_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    b08c:	f000 bc88 	b.w	b9a0 <z_impl_k_busy_wait>

0000b090 <z_log_msg2_static_create.constprop.0>:
    b090:	2300      	movs	r3, #0
    b092:	f7ff bcbe 	b.w	aa12 <z_impl_z_log_msg2_static_create>

0000b096 <reg_write>:
{
    b096:	b570      	push	{r4, r5, r6, lr}
    b098:	460d      	mov	r5, r1
	err = spi_cs_ctrl(dev_data, true);
    b09a:	2101      	movs	r1, #1
{
    b09c:	4604      	mov	r4, r0
    b09e:	4616      	mov	r6, r2
	err = spi_cs_ctrl(dev_data, true);
    b0a0:	f7fa fe90 	bl	5dc4 <spi_cs_ctrl>
	if (err) {
    b0a4:	b930      	cbnz	r0, b0b4 <reg_write+0x1e>
    b0a6:	4632      	mov	r2, r6
    b0a8:	4629      	mov	r1, r5
    b0aa:	4620      	mov	r0, r4
}
    b0ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b0b0:	f7fa beb0 	b.w	5e14 <reg_write.part.0>
    b0b4:	bd70      	pop	{r4, r5, r6, pc}

0000b0b6 <pmw3360_async_init_power_up>:
	return reg_write(dev_data, PMW3360_REG_POWER_UP_RESET, 0x5A);
    b0b6:	225a      	movs	r2, #90	; 0x5a
    b0b8:	213a      	movs	r1, #58	; 0x3a
    b0ba:	f7ff bfec 	b.w	b096 <reg_write>

0000b0be <gpio_pin_interrupt_configure.constprop.0>:
#endif

extern int z_impl_gpio_pin_interrupt_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags);

__pinned_func
static inline int gpio_pin_interrupt_configure(const struct device * port, gpio_pin_t pin, gpio_flags_t flags)
    b0be:	b410      	push	{r4}
	return api->pin_interrupt_configure(port, pin, mode, trig);
    b0c0:	6883      	ldr	r3, [r0, #8]
    b0c2:	699c      	ldr	r4, [r3, #24]
    b0c4:	f001 72b0 	and.w	r2, r1, #23068672	; 0x1600000
    b0c8:	f001 63c0 	and.w	r3, r1, #100663296	; 0x6000000
    b0cc:	46a4      	mov	ip, r4
    b0ce:	2114      	movs	r1, #20
		return (int) arch_syscall_invoke3(parm0.x, parm1.x, parm2.x, K_SYSCALL_GPIO_PIN_INTERRUPT_CONFIGURE);
	}
#endif
	compiler_barrier();
	return z_impl_gpio_pin_interrupt_configure(port, pin, flags);
}
    b0d0:	bc10      	pop	{r4}
    b0d2:	4760      	bx	ip

0000b0d4 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    b0d4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x10)
    b0d8:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    b0dc:	f1a0 0310 	sub.w	r3, r0, #16
    b0e0:	4258      	negs	r0, r3
    b0e2:	4158      	adcs	r0, r3
    b0e4:	4770      	bx	lr

0000b0e6 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    b0e6:	4700      	bx	r0

0000b0e8 <nrfx_busy_wait>:
    b0e8:	f000 bc5a 	b.w	b9a0 <z_impl_k_busy_wait>

0000b0ec <clock_stop>:
{
    b0ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    switch (domain)
    b0ee:	4604      	mov	r4, r0
    b0f0:	b118      	cbz	r0, b0fa <clock_stop+0xe>
    b0f2:	2801      	cmp	r0, #1
    b0f4:	d024      	beq.n	b140 <clock_stop+0x54>
}
    b0f6:	b003      	add	sp, #12
    b0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b0fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b0fe:	2202      	movs	r2, #2
    b100:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b104:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
    b108:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b10c:	2201      	movs	r2, #1
    b10e:	60da      	str	r2, [r3, #12]
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    b110:	2301      	movs	r3, #1
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    b112:	429c      	cmp	r4, r3
    nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    b114:	f88d 3007 	strb.w	r3, [sp, #7]
    nrf_clock_hfclk_t *p_clk_src = (domain == NRF_CLOCK_DOMAIN_HFCLK) ? &clk_src : NULL;
    b118:	bf14      	ite	ne
    b11a:	2500      	movne	r5, #0
    b11c:	f10d 0507 	addeq.w	r5, sp, #7
    b120:	f242 7710 	movw	r7, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b124:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    switch (domain)
    b128:	b1ac      	cbz	r4, b156 <clock_stop+0x6a>
    b12a:	2c01      	cmp	r4, #1
    b12c:	d1e3      	bne.n	b0f6 <clock_stop+0xa>
            if (p_clk_src != NULL)
    b12e:	b125      	cbz	r5, b13a <clock_stop+0x4e>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    b130:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    b134:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    b138:	702b      	strb	r3, [r5, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    b13a:	f8d6 340c 	ldr.w	r3, [r6, #1036]	; 0x40c
    b13e:	e012      	b.n	b166 <clock_stop+0x7a>
    p_reg->INTENCLR = mask;
    b140:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b144:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    b146:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b14a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    b14e:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b152:	6058      	str	r0, [r3, #4]
}
    b154:	e7dc      	b.n	b110 <clock_stop+0x24>
            if (p_clk_src != NULL)
    b156:	b125      	cbz	r5, b162 <clock_stop+0x76>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b158:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    b15c:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    b160:	602b      	str	r3, [r5, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b162:	f8d6 3418 	ldr.w	r3, [r6, #1048]	; 0x418
    b166:	03db      	lsls	r3, r3, #15
    b168:	d5c5      	bpl.n	b0f6 <clock_stop+0xa>
    NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, p_clk_src) ||
    b16a:	b92d      	cbnz	r5, b178 <clock_stop+0x8c>
    b16c:	2001      	movs	r0, #1
    b16e:	f7ff ffbb 	bl	b0e8 <nrfx_busy_wait>
    b172:	3f01      	subs	r7, #1
    b174:	d1d8      	bne.n	b128 <clock_stop+0x3c>
    b176:	e7be      	b.n	b0f6 <clock_stop+0xa>
    b178:	f89d 3007 	ldrb.w	r3, [sp, #7]
    b17c:	2b01      	cmp	r3, #1
    b17e:	d0f5      	beq.n	b16c <clock_stop+0x80>
    b180:	e7b9      	b.n	b0f6 <clock_stop+0xa>

0000b182 <nrfx_clock_start>:
{
    b182:	b508      	push	{r3, lr}
    switch (domain)
    b184:	b110      	cbz	r0, b18c <nrfx_clock_start+0xa>
    b186:	2801      	cmp	r0, #1
    b188:	d028      	beq.n	b1dc <nrfx_clock_start+0x5a>
}
    b18a:	bd08      	pop	{r3, pc}
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    b18c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b190:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    b194:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
    b198:	03c9      	lsls	r1, r1, #15
    b19a:	d40b      	bmi.n	b1b4 <nrfx_clock_start+0x32>
            return ((p_reg->LFCLKRUN & CLOCK_LFCLKRUN_STATUS_Msk)
    b19c:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
                else if (nrf_clock_start_task_check(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK))
    b1a0:	07d0      	lsls	r0, r2, #31
    b1a2:	d50c      	bpl.n	b1be <nrfx_clock_start+0x3c>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    b1a4:	f8d3 241c 	ldr.w	r2, [r3, #1052]	; 0x41c
    if (!is_correct_clk)
    b1a8:	0792      	lsls	r2, r2, #30
    b1aa:	d105      	bne.n	b1b8 <nrfx_clock_start+0x36>
    p_reg->INTENSET = mask;
    b1ac:	2202      	movs	r2, #2
    b1ae:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
                        break;
    b1b2:	e7ea      	b.n	b18a <nrfx_clock_start+0x8>
    if (!is_correct_clk)
    b1b4:	0791      	lsls	r1, r2, #30
    b1b6:	d002      	beq.n	b1be <nrfx_clock_start+0x3c>
        clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    b1b8:	2000      	movs	r0, #0
    b1ba:	f7ff ff97 	bl	b0ec <clock_stop>
    p_reg->LFCLKSRC = (uint32_t)(source);
    b1be:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b1c2:	2200      	movs	r2, #0
    b1c4:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b1c8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    b1cc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
    b1d0:	2202      	movs	r2, #2
    b1d2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b1d6:	2201      	movs	r2, #1
    b1d8:	609a      	str	r2, [r3, #8]
}
    b1da:	e7d6      	b.n	b18a <nrfx_clock_start+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b1dc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b1e0:	2200      	movs	r2, #0
    b1e2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    b1e6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
    b1ea:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    b1ee:	6018      	str	r0, [r3, #0]
}
    b1f0:	e7cb      	b.n	b18a <nrfx_clock_start+0x8>

0000b1f2 <nrfx_clock_stop>:
    clock_stop(domain);
    b1f2:	f7ff bf7b 	b.w	b0ec <clock_stop>

0000b1f6 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
    b1f6:	f000 001f 	and.w	r0, r0, #31
    b1fa:	0080      	lsls	r0, r0, #2
    b1fc:	f100 40a0 	add.w	r0, r0, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number];
    b200:	f8d0 3700 	ldr.w	r3, [r0, #1792]	; 0x700
    cnf &= ~to_update;
    b204:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    b208:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
    reg->PIN_CNF[pin_number] = cnf;
    b20c:	f8c0 3700 	str.w	r3, [r0, #1792]	; 0x700
}
    b210:	4770      	bx	lr

0000b212 <nrf_power_event_get_and_clear.constprop.0>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b212:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
    b216:	681a      	ldr	r2, [r3, #0]
    b218:	2a00      	cmp	r2, #0
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    b21a:	bf1f      	itttt	ne
    b21c:	2200      	movne	r2, #0
    b21e:	601a      	strne	r2, [r3, #0]
    b220:	681b      	ldrne	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    b222:	2001      	movne	r0, #1
    b224:	bf08      	it	eq
    b226:	2000      	moveq	r0, #0
}
    b228:	4770      	bx	lr

0000b22a <nrfx_power_usbevt_enable>:
    p_reg->INTENSET = mask;
    b22a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b22e:	f44f 7260 	mov.w	r2, #896	; 0x380
    b232:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    b236:	4770      	bx	lr

0000b238 <nrfx_power_usbevt_disable>:
    p_reg->INTENCLR = mask;
    b238:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    b23c:	f44f 7260 	mov.w	r2, #896	; 0x380
    b240:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
}
    b244:	4770      	bx	lr

0000b246 <nrfx_power_clock_irq_handler>:
 * a library with nrfx is created. In such case, forcing a linker to use this
 * function instead of another one defined as weak will require additional
 * actions, and might be even impossible.
 */
void nrfx_power_clock_irq_handler(void)
{
    b246:	b508      	push	{r3, lr}
    nrfx_power_irq_handler();
    b248:	f7fb ffe4 	bl	7214 <nrfx_power_irq_handler>
    nrfx_clock_irq_handler();
}
    b24c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_irq_handler();
    b250:	f7fb bc4e 	b.w	6af0 <nrfx_clock_irq_handler>

0000b254 <spim_pin_uninit>:
    if (pin == NRF_SPIM_PIN_NOT_CONNECTED)
    b254:	1c43      	adds	r3, r0, #1
    b256:	d008      	beq.n	b26a <spim_pin_uninit+0x16>
    *p_pin = pin_number & 0x1F;
    b258:	f000 001f 	and.w	r0, r0, #31
    reg->PIN_CNF[pin_number] = cnf;
    b25c:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
    b260:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    b264:	2202      	movs	r2, #2
    b266:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
    b26a:	4770      	bx	lr

0000b26c <nrf_gpio_pin_write>:
    *p_pin = pin_number & 0x1F;
    b26c:	f000 031f 	and.w	r3, r0, #31
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    b270:	2001      	movs	r0, #1
    b272:	4098      	lsls	r0, r3
    b274:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    if (value == 0)
    b278:	b911      	cbnz	r1, b280 <nrf_gpio_pin_write+0x14>
    p_reg->OUTCLR = clr_mask;
    b27a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
    b27e:	4770      	bx	lr
    p_reg->OUTSET = set_mask;
    b280:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
    b284:	4770      	bx	lr

0000b286 <set_ss_pin_state>:
{
    b286:	4603      	mov	r3, r0
    if (p_cb->ss_pin != NRFX_SPIM_PIN_NOT_USED)
    b288:	7fc0      	ldrb	r0, [r0, #31]
    b28a:	28ff      	cmp	r0, #255	; 0xff
    b28c:	d006      	beq.n	b29c <set_ss_pin_state+0x16>
                           p_cb->ss_active_high ? active : !active);
    b28e:	7f9b      	ldrb	r3, [r3, #30]
        nrf_gpio_pin_write(p_cb->ss_pin,
    b290:	079b      	lsls	r3, r3, #30
    b292:	bf58      	it	pl
    b294:	f081 0101 	eorpl.w	r1, r1, #1
    b298:	f7ff bfe8 	b.w	b26c <nrf_gpio_pin_write>
}
    b29c:	4770      	bx	lr

0000b29e <nrf52_errata_187>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    b29e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            if (var1 == 0x10)
    b2a2:	f8d3 0130 	ldr.w	r0, [r3, #304]	; 0x130
}
    b2a6:	f1a0 0310 	sub.w	r3, r0, #16
    b2aa:	4258      	negs	r0, r3
    b2ac:	4158      	adcs	r0, r3
    b2ae:	4770      	bx	lr

0000b2b0 <nrfx_usbd_consumer>:
{
    b2b0:	b530      	push	{r4, r5, lr}
    size_t size = p_transfer->size;
    b2b2:	684c      	ldr	r4, [r1, #4]
    if (size < data_size)
    b2b4:	680d      	ldr	r5, [r1, #0]
    b2b6:	42a3      	cmp	r3, r4
        p_next->p_data = p_transfer->p_data;
    b2b8:	bf97      	itett	ls
    b2ba:	e9c0 5300 	strdls	r5, r3, [r0]
        p_next->size = 0;
    b2be:	2100      	movhi	r1, #0
        size -= data_size;
    b2c0:	1ae4      	subls	r4, r4, r3
        p_transfer->p_data.addr += data_size;
    b2c2:	18ed      	addls	r5, r5, r3
        p_next->p_data = p_transfer->p_data;
    b2c4:	bf8e      	itee	hi
    b2c6:	e9c0 5100 	strdhi	r5, r1, [r0]
        p_transfer->size = size;
    b2ca:	604c      	strls	r4, [r1, #4]
        p_transfer->p_data.addr += data_size;
    b2cc:	600d      	strls	r5, [r1, #0]
    return (ep_size == data_size) && (size != 0);
    b2ce:	429a      	cmp	r2, r3
    b2d0:	d103      	bne.n	b2da <nrfx_usbd_consumer+0x2a>
    b2d2:	1e20      	subs	r0, r4, #0
    b2d4:	bf18      	it	ne
    b2d6:	2001      	movne	r0, #1
}
    b2d8:	bd30      	pop	{r4, r5, pc}
    return (ep_size == data_size) && (size != 0);
    b2da:	2000      	movs	r0, #0
    b2dc:	e7fc      	b.n	b2d8 <nrfx_usbd_consumer+0x28>

0000b2de <nrfx_usbd_feeder_ram>:
    size_t tx_size = p_transfer->size;
    b2de:	684b      	ldr	r3, [r1, #4]
{
    b2e0:	b510      	push	{r4, lr}
    b2e2:	429a      	cmp	r2, r3
    p_next->p_data = p_transfer->p_data;
    b2e4:	680c      	ldr	r4, [r1, #0]
    b2e6:	bf28      	it	cs
    b2e8:	461a      	movcs	r2, r3
    p_next->size = tx_size;
    b2ea:	e9c0 4200 	strd	r4, r2, [r0]
    p_transfer->size -= tx_size;
    b2ee:	1a98      	subs	r0, r3, r2
    p_transfer->p_data.addr += tx_size;
    b2f0:	680b      	ldr	r3, [r1, #0]
    p_transfer->size -= tx_size;
    b2f2:	6048      	str	r0, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    b2f4:	441a      	add	r2, r3
}
    b2f6:	3800      	subs	r0, #0
    p_transfer->p_data.addr += tx_size;
    b2f8:	600a      	str	r2, [r1, #0]
}
    b2fa:	bf18      	it	ne
    b2fc:	2001      	movne	r0, #1
    b2fe:	bd10      	pop	{r4, pc}

0000b300 <nrfx_usbd_feeder_ram_zlp>:
{
    b300:	b530      	push	{r4, r5, lr}
    size_t tx_size = p_transfer->size;
    b302:	684c      	ldr	r4, [r1, #4]
    p_next->p_data.tx = (tx_size == 0) ? NULL : p_transfer->p_data.tx;
    b304:	680b      	ldr	r3, [r1, #0]
    b306:	42a2      	cmp	r2, r4
    b308:	bf28      	it	cs
    b30a:	4622      	movcs	r2, r4
    b30c:	2a00      	cmp	r2, #0
    b30e:	bf14      	ite	ne
    b310:	461d      	movne	r5, r3
    b312:	2500      	moveq	r5, #0
    p_next->size = tx_size;
    b314:	e9c0 5200 	strd	r5, r2, [r0]
    p_transfer->size -= tx_size;
    b318:	eba4 0402 	sub.w	r4, r4, r2
    p_transfer->p_data.addr += tx_size;
    b31c:	441a      	add	r2, r3
    p_transfer->size -= tx_size;
    b31e:	604c      	str	r4, [r1, #4]
    p_transfer->p_data.addr += tx_size;
    b320:	600a      	str	r2, [r1, #0]
}
    b322:	bf14      	ite	ne
    b324:	2001      	movne	r0, #1
    b326:	2000      	moveq	r0, #0
    b328:	bd30      	pop	{r4, r5, pc}

0000b32a <ep2bit>:
    return NRFX_USBD_EP_BITPOS(ep);
    b32a:	f010 0f80 	tst.w	r0, #128	; 0x80
    b32e:	bf14      	ite	ne
    b330:	2300      	movne	r3, #0
    b332:	2310      	moveq	r3, #16
    b334:	f000 000f 	and.w	r0, r0, #15
}
    b338:	4418      	add	r0, r3
    b33a:	4770      	bx	lr

0000b33c <ev_started_handler>:
}
    b33c:	4770      	bx	lr

0000b33e <ev_dma_epin7_handler>:
static void ev_dma_epin7_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN7 ); }
    b33e:	2087      	movs	r0, #135	; 0x87
    b340:	f7fc bb5c 	b.w	79fc <nrf_usbd_epin_dma_handler>

0000b344 <ev_dma_epin6_handler>:
static void ev_dma_epin6_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN6 ); }
    b344:	2086      	movs	r0, #134	; 0x86
    b346:	f7fc bb59 	b.w	79fc <nrf_usbd_epin_dma_handler>

0000b34a <ev_dma_epin5_handler>:
static void ev_dma_epin5_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN5 ); }
    b34a:	2085      	movs	r0, #133	; 0x85
    b34c:	f7fc bb56 	b.w	79fc <nrf_usbd_epin_dma_handler>

0000b350 <ev_dma_epin4_handler>:
static void ev_dma_epin4_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN4 ); }
    b350:	2084      	movs	r0, #132	; 0x84
    b352:	f7fc bb53 	b.w	79fc <nrf_usbd_epin_dma_handler>

0000b356 <ev_dma_epin3_handler>:
static void ev_dma_epin3_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN3 ); }
    b356:	2083      	movs	r0, #131	; 0x83
    b358:	f7fc bb50 	b.w	79fc <nrf_usbd_epin_dma_handler>

0000b35c <ev_dma_epin2_handler>:
static void ev_dma_epin2_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN2 ); }
    b35c:	2082      	movs	r0, #130	; 0x82
    b35e:	f7fc bb4d 	b.w	79fc <nrf_usbd_epin_dma_handler>

0000b362 <ev_dma_epin1_handler>:
static void ev_dma_epin1_handler(void)  { nrf_usbd_epin_dma_handler(NRFX_USBD_EPIN1 ); }
    b362:	2081      	movs	r0, #129	; 0x81
    b364:	f7fc bb4a 	b.w	79fc <nrf_usbd_epin_dma_handler>

0000b368 <ev_dma_epin0_handler>:
static void ev_dma_epin0_handler(void)  { nrf_usbd_ep0in_dma_handler(); }
    b368:	f7fc bb64 	b.w	7a34 <nrf_usbd_ep0in_dma_handler>

0000b36c <nrfx_usbd_ep_max_packet_size_set>:
{
    b36c:	b508      	push	{r3, lr}
    usbd_ep_state_t * p_state = ep_state_access(ep);
    b36e:	f7fc fa07 	bl	7780 <ep_state_access>
    p_state->max_packet_size = size;
    b372:	8181      	strh	r1, [r0, #12]
}
    b374:	bd08      	pop	{r3, pc}

0000b376 <nrfx_usbd_ep_status_get>:
{
    b376:	b508      	push	{r3, lr}
    usbd_ep_state_t const * p_state = ep_state_access(ep);
    b378:	f7fc fa02 	bl	7780 <ep_state_access>
	__asm__ volatile(
    b37c:	f04f 0220 	mov.w	r2, #32
    b380:	f3ef 8311 	mrs	r3, BASEPRI
    b384:	f382 8812 	msr	BASEPRI_MAX, r2
    b388:	f3bf 8f6f 	isb	sy
    *p_size = p_state->transfer_cnt;
    b38c:	6882      	ldr	r2, [r0, #8]
    b38e:	600a      	str	r2, [r1, #0]
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    b390:	6802      	ldr	r2, [r0, #0]
    b392:	b92a      	cbnz	r2, b3a0 <nrfx_usbd_ep_status_get+0x2a>
    b394:	7b80      	ldrb	r0, [r0, #14]
	__asm__ volatile(
    b396:	f383 8811 	msr	BASEPRI, r3
    b39a:	f3bf 8f6f 	isb	sy
}
    b39e:	bd08      	pop	{r3, pc}
    ret = (p_state->handler.consumer == NULL) ? p_state->status : NRFX_USBD_EP_BUSY;
    b3a0:	2004      	movs	r0, #4
    b3a2:	e7f8      	b.n	b396 <nrfx_usbd_ep_status_get+0x20>

0000b3a4 <ev_dma_epout7_handler>:
static void ev_dma_epout7_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT7); }
    b3a4:	2007      	movs	r0, #7
    b3a6:	f7fc be25 	b.w	7ff4 <nrf_usbd_epout_dma_handler>

0000b3aa <ev_dma_epout6_handler>:
static void ev_dma_epout6_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT6); }
    b3aa:	2006      	movs	r0, #6
    b3ac:	f7fc be22 	b.w	7ff4 <nrf_usbd_epout_dma_handler>

0000b3b0 <ev_dma_epout5_handler>:
static void ev_dma_epout5_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT5); }
    b3b0:	2005      	movs	r0, #5
    b3b2:	f7fc be1f 	b.w	7ff4 <nrf_usbd_epout_dma_handler>

0000b3b6 <ev_dma_epout4_handler>:
static void ev_dma_epout4_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT4); }
    b3b6:	2004      	movs	r0, #4
    b3b8:	f7fc be1c 	b.w	7ff4 <nrf_usbd_epout_dma_handler>

0000b3bc <ev_dma_epout3_handler>:
static void ev_dma_epout3_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT3); }
    b3bc:	2003      	movs	r0, #3
    b3be:	f7fc be19 	b.w	7ff4 <nrf_usbd_epout_dma_handler>

0000b3c2 <ev_dma_epout2_handler>:
static void ev_dma_epout2_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT2); }
    b3c2:	2002      	movs	r0, #2
    b3c4:	f7fc be16 	b.w	7ff4 <nrf_usbd_epout_dma_handler>

0000b3c8 <ev_dma_epout1_handler>:
static void ev_dma_epout1_handler(void) { nrf_usbd_epout_dma_handler(NRFX_USBD_EPOUT1); }
    b3c8:	2001      	movs	r0, #1
    b3ca:	f7fc be13 	b.w	7ff4 <nrf_usbd_epout_dma_handler>

0000b3ce <nrfx_usbd_ep_abort>:
    usbd_ep_abort(ep);
    b3ce:	f7fc bf0d 	b.w	81ec <usbd_ep_abort>

0000b3d2 <_GetAvailWriteSpace>:
  RdOff = pRing->RdOff;
    b3d2:	6903      	ldr	r3, [r0, #16]
  WrOff = pRing->WrOff;
    b3d4:	68c2      	ldr	r2, [r0, #12]
  if (RdOff <= WrOff) {
    b3d6:	4293      	cmp	r3, r2
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
    b3d8:	bf9c      	itt	ls
    b3da:	6880      	ldrls	r0, [r0, #8]
    b3dc:	181b      	addls	r3, r3, r0
    r = RdOff - WrOff - 1u;
    b3de:	3b01      	subs	r3, #1
    b3e0:	1a98      	subs	r0, r3, r2
}
    b3e2:	4770      	bx	lr

0000b3e4 <_WriteNoCheck>:
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    b3e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  Rem = pRing->SizeOfBuffer - WrOff;
    b3e8:	e9d0 9402 	ldrd	r9, r4, [r0, #8]
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    b3ec:	4605      	mov	r5, r0
  Rem = pRing->SizeOfBuffer - WrOff;
    b3ee:	eba9 0804 	sub.w	r8, r9, r4
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    b3f2:	6840      	ldr	r0, [r0, #4]
  if (Rem > NumBytes) {
    b3f4:	4590      	cmp	r8, r2
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    b3f6:	4420      	add	r0, r4
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
    b3f8:	460f      	mov	r7, r1
    pRing->WrOff = WrOff + NumBytes;
    b3fa:	4414      	add	r4, r2
  if (Rem > NumBytes) {
    b3fc:	d904      	bls.n	b408 <_WriteNoCheck+0x24>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    b3fe:	f7ff fbcd 	bl	ab9c <memcpy>
    pRing->WrOff = NumBytesAtOnce;
    b402:	60ec      	str	r4, [r5, #12]
}
    b404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    b408:	4642      	mov	r2, r8
    NumBytesAtOnce = NumBytes - Rem;
    b40a:	eba4 0409 	sub.w	r4, r4, r9
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
    b40e:	f7ff fbc5 	bl	ab9c <memcpy>
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    b412:	6868      	ldr	r0, [r5, #4]
    b414:	4622      	mov	r2, r4
    b416:	eb07 0108 	add.w	r1, r7, r8
    b41a:	e7f0      	b.n	b3fe <_WriteNoCheck+0x1a>

0000b41c <_WriteBlocking>:
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    b41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  WrOff = pRing->WrOff;
    b420:	68c5      	ldr	r5, [r0, #12]
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
    b422:	4606      	mov	r6, r0
    b424:	4689      	mov	r9, r1
    b426:	4617      	mov	r7, r2
  NumBytesWritten = 0u;
    b428:	f04f 0800 	mov.w	r8, #0
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
    b42c:	6934      	ldr	r4, [r6, #16]
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    b42e:	68b3      	ldr	r3, [r6, #8]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
    b430:	6870      	ldr	r0, [r6, #4]
    if (RdOff > WrOff) {
    b432:	42a5      	cmp	r5, r4
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
    b434:	bf28      	it	cs
    b436:	18e4      	addcs	r4, r4, r3
    b438:	3c01      	subs	r4, #1
    b43a:	1b62      	subs	r2, r4, r5
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
    b43c:	1b5c      	subs	r4, r3, r5
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
    b43e:	42bc      	cmp	r4, r7
    b440:	bf28      	it	cs
    b442:	463c      	movcs	r4, r7
    b444:	4294      	cmp	r4, r2
    b446:	bf28      	it	cs
    b448:	4614      	movcs	r4, r2
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
    b44a:	4649      	mov	r1, r9
    b44c:	4428      	add	r0, r5
    b44e:	4622      	mov	r2, r4
    b450:	f7ff fba4 	bl	ab9c <memcpy>
    if (WrOff == pRing->SizeOfBuffer) {
    b454:	68b3      	ldr	r3, [r6, #8]
    WrOff           += NumBytesToWrite;
    b456:	4425      	add	r5, r4
      WrOff = 0u;
    b458:	42ab      	cmp	r3, r5
    b45a:	bf08      	it	eq
    b45c:	2500      	moveq	r5, #0
  } while (NumBytes);
    b45e:	1b3f      	subs	r7, r7, r4
    NumBytesWritten += NumBytesToWrite;
    b460:	44a0      	add	r8, r4
    pBuffer         += NumBytesToWrite;
    b462:	44a1      	add	r9, r4
    pRing->WrOff = WrOff;
    b464:	60f5      	str	r5, [r6, #12]
  } while (NumBytes);
    b466:	d1e1      	bne.n	b42c <_WriteBlocking+0x10>
}
    b468:	4640      	mov	r0, r8
    b46a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000b46e <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
    b46e:	f7fd b8cd 	b.w	860c <_DoInit>

0000b472 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
    b472:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
    b474:	f7ff fffb 	bl	b46e <SEGGER_RTT_Init>

	return 0;
}
    b478:	2000      	movs	r0, #0
    b47a:	bd08      	pop	{r3, pc}

0000b47c <z_device_state_init>:
}
    b47c:	4770      	bx	lr

0000b47e <z_device_is_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    b47e:	b138      	cbz	r0, b490 <z_device_is_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    b480:	68c3      	ldr	r3, [r0, #12]
    b482:	8818      	ldrh	r0, [r3, #0]
    b484:	f3c0 0008 	ubfx	r0, r0, #0, #9
    b488:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    b48c:	4258      	negs	r0, r3
    b48e:	4158      	adcs	r0, r3
}
    b490:	4770      	bx	lr

0000b492 <z_early_memset>:
	(void) memset(dst, c, n);
    b492:	f7ff bb8e 	b.w	abb2 <memset>

0000b496 <z_early_memcpy>:
	(void) memcpy(dst, src, n);
    b496:	f7ff bb81 	b.w	ab9c <memcpy>

0000b49a <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    b49a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b49c:	4604      	mov	r4, r0
    b49e:	460d      	mov	r5, r1
	__asm__ volatile(
    b4a0:	f04f 0320 	mov.w	r3, #32
    b4a4:	f3ef 8611 	mrs	r6, BASEPRI
    b4a8:	f383 8812 	msr	BASEPRI_MAX, r3
    b4ac:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&slab->lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    b4b0:	6947      	ldr	r7, [r0, #20]
    b4b2:	b977      	cbnz	r7, b4d2 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    b4b4:	f000 f9eb 	bl	b88e <z_unpend_first_thread>

		if (pending_thread != NULL) {
    b4b8:	b158      	cbz	r0, b4d2 <k_mem_slab_free+0x38>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    b4ba:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    b4bc:	6142      	str	r2, [r0, #20]
    b4be:	6787      	str	r7, [r0, #120]	; 0x78
			z_ready_thread(pending_thread);
    b4c0:	f000 f974 	bl	b7ac <z_ready_thread>
			z_reschedule(&slab->lock, key);
    b4c4:	4631      	mov	r1, r6
    b4c6:	f104 0008 	add.w	r0, r4, #8
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    b4ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&slab->lock, key);
    b4ce:	f7fd bef3 	b.w	92b8 <z_reschedule>
	**(char ***) mem = slab->free_list;
    b4d2:	682b      	ldr	r3, [r5, #0]
    b4d4:	6962      	ldr	r2, [r4, #20]
    b4d6:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    b4d8:	682b      	ldr	r3, [r5, #0]
    b4da:	6163      	str	r3, [r4, #20]
	slab->num_used--;
    b4dc:	69a3      	ldr	r3, [r4, #24]
    b4de:	3b01      	subs	r3, #1
    b4e0:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
    b4e2:	f386 8811 	msr	BASEPRI, r6
    b4e6:	f3bf 8f6f 	isb	sy
}
    b4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0000b4ec <k_is_in_isr>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    b4ec:	f3ef 8005 	mrs	r0, IPSR
}
    b4f0:	3800      	subs	r0, #0
    b4f2:	bf18      	it	ne
    b4f4:	2001      	movne	r0, #1
    b4f6:	4770      	bx	lr

0000b4f8 <z_impl_k_thread_name_set>:
}
    b4f8:	f06f 0057 	mvn.w	r0, #87	; 0x57
    b4fc:	4770      	bx	lr

0000b4fe <k_thread_name_get>:
}
    b4fe:	2000      	movs	r0, #0
    b500:	4770      	bx	lr

0000b502 <z_impl_k_thread_start>:
	z_sched_start(thread);
    b502:	f7fd bfd1 	b.w	94a8 <z_sched_start>

0000b506 <z_pm_save_idle_exit>:
{
    b506:	b508      	push	{r3, lr}
	pm_system_resume();
    b508:	f7f7 fa36 	bl	2978 <pm_system_resume>
}
    b50c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    b510:	f7ff bd1b 	b.w	af4a <sys_clock_idle_exit>

0000b514 <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
    b514:	f990 300e 	ldrsb.w	r3, [r0, #14]
    b518:	428b      	cmp	r3, r1
    b51a:	d001      	beq.n	b520 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
    b51c:	f7fe b834 	b.w	9588 <z_set_prio>
}
    b520:	2000      	movs	r0, #0
    b522:	4770      	bx	lr

0000b524 <z_impl_k_mutex_init>:
{
    b524:	4603      	mov	r3, r0
	mutex->owner = NULL;
    b526:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    b528:	e9c3 0002 	strd	r0, r0, [r3, #8]
	list->tail = (sys_dnode_t *)list;
    b52c:	e9c3 3300 	strd	r3, r3, [r3]
}
    b530:	4770      	bx	lr

0000b532 <queue_insert>:
{
    b532:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    b536:	4699      	mov	r9, r3
    b538:	4604      	mov	r4, r0
    b53a:	f89d 3020 	ldrb.w	r3, [sp, #32]
    b53e:	460d      	mov	r5, r1
    b540:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
    b542:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
    b546:	f04f 0220 	mov.w	r2, #32
    b54a:	f3ef 8611 	mrs	r6, BASEPRI
    b54e:	f382 8812 	msr	BASEPRI_MAX, r2
    b552:	f3bf 8f6f 	isb	sy
	if (is_append) {
    b556:	b103      	cbz	r3, b55a <queue_insert+0x28>
	return list->tail;
    b558:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
    b55a:	4638      	mov	r0, r7
    b55c:	f000 f997 	bl	b88e <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
    b560:	b158      	cbz	r0, b57a <queue_insert+0x48>
    b562:	2400      	movs	r4, #0
    b564:	6784      	str	r4, [r0, #120]	; 0x78
    b566:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
    b56a:	f000 f91f 	bl	b7ac <z_ready_thread>
	z_reschedule(&queue->lock, key);
    b56e:	4638      	mov	r0, r7
    b570:	4631      	mov	r1, r6
    b572:	f7fd fea1 	bl	92b8 <z_reschedule>
	return 0;
    b576:	2000      	movs	r0, #0
    b578:	e00c      	b.n	b594 <queue_insert+0x62>
	if (alloc) {
    b57a:	f1b9 0f00 	cmp.w	r9, #0
    b57e:	d01c      	beq.n	b5ba <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
    b580:	2108      	movs	r1, #8
    b582:	f7fe fb99 	bl	9cb8 <z_thread_aligned_alloc>
		if (anode == NULL) {
    b586:	b938      	cbnz	r0, b598 <queue_insert+0x66>
	__asm__ volatile(
    b588:	f386 8811 	msr	BASEPRI, r6
    b58c:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
    b590:	f06f 000b 	mvn.w	r0, #11
}
    b594:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
    b598:	2301      	movs	r3, #1
		anode->data = data;
    b59a:	f8c0 8004 	str.w	r8, [r0, #4]
    b59e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    b5a0:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    b5a2:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
    b5a6:	b965      	cbnz	r5, b5c2 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
    b5a8:	6823      	ldr	r3, [r4, #0]
    b5aa:	4313      	orrs	r3, r2
    b5ac:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    b5ae:	6863      	ldr	r3, [r4, #4]
	list->head = node;
    b5b0:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
    b5b2:	2b00      	cmp	r3, #0
    b5b4:	d1db      	bne.n	b56e <queue_insert+0x3c>
	list->tail = node;
    b5b6:	6060      	str	r0, [r4, #4]
}
    b5b8:	e7d9      	b.n	b56e <queue_insert+0x3c>
	node->next_and_flags = flags;
    b5ba:	f8c8 9000 	str.w	r9, [r8]
}
    b5be:	4640      	mov	r0, r8
    b5c0:	e7ee      	b.n	b5a0 <queue_insert+0x6e>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
    b5c2:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
    b5c4:	f033 0303 	bics.w	r3, r3, #3
    b5c8:	d10b      	bne.n	b5e2 <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
    b5ca:	6002      	str	r2, [r0, #0]
	return list->tail;
    b5cc:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
    b5ce:	b912      	cbnz	r2, b5d6 <queue_insert+0xa4>
	list->head = node;
    b5d0:	e9c4 0000 	strd	r0, r0, [r4]
}
    b5d4:	e7cb      	b.n	b56e <queue_insert+0x3c>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    b5d6:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    b5d8:	f003 0303 	and.w	r3, r3, #3
    b5dc:	4303      	orrs	r3, r0
    b5de:	6013      	str	r3, [r2, #0]
    b5e0:	e7e9      	b.n	b5b6 <queue_insert+0x84>
    b5e2:	4313      	orrs	r3, r2
    b5e4:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    b5e6:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
    b5e8:	f003 0303 	and.w	r3, r3, #3
    b5ec:	4318      	orrs	r0, r3
    b5ee:	6028      	str	r0, [r5, #0]
}
    b5f0:	e7bd      	b.n	b56e <queue_insert+0x3c>

0000b5f2 <z_queue_node_peek>:
{
    b5f2:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
    b5f4:	4604      	mov	r4, r0
    b5f6:	b130      	cbz	r0, b606 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
    b5f8:	6802      	ldr	r2, [r0, #0]
    b5fa:	0793      	lsls	r3, r2, #30
    b5fc:	d003      	beq.n	b606 <z_queue_node_peek+0x14>
		ret = anode->data;
    b5fe:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
    b600:	b109      	cbz	r1, b606 <z_queue_node_peek+0x14>
			k_free(anode);
    b602:	f000 fa25 	bl	ba50 <k_free>
}
    b606:	4620      	mov	r0, r4
    b608:	bd10      	pop	{r4, pc}

0000b60a <k_queue_append>:
{
    b60a:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
    b60c:	2301      	movs	r3, #1
    b60e:	9300      	str	r3, [sp, #0]
    b610:	2300      	movs	r3, #0
{
    b612:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
    b614:	4619      	mov	r1, r3
    b616:	f7ff ff8c 	bl	b532 <queue_insert>
}
    b61a:	b003      	add	sp, #12
    b61c:	f85d fb04 	ldr.w	pc, [sp], #4

0000b620 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    b620:	b13a      	cbz	r2, b632 <z_impl_k_sem_init+0x12>
    b622:	428a      	cmp	r2, r1
    b624:	d305      	bcc.n	b632 <z_impl_k_sem_init+0x12>
	sem->limit = limit;
    b626:	e9c0 1202 	strd	r1, r2, [r0, #8]
    b62a:	e9c0 0000 	strd	r0, r0, [r0]
	return 0;
    b62e:	2000      	movs	r0, #0
    b630:	4770      	bx	lr
		return -EINVAL;
    b632:	f06f 0015 	mvn.w	r0, #21
}
    b636:	4770      	bx	lr

0000b638 <flag_test_and_clear>:
	return (*flagp & BIT(bit)) != 0U;
    b638:	6802      	ldr	r2, [r0, #0]
	*flagp &= ~BIT(bit);
    b63a:	2301      	movs	r3, #1
    b63c:	408b      	lsls	r3, r1
    b63e:	ea22 0303 	bic.w	r3, r2, r3
    b642:	6003      	str	r3, [r0, #0]
	return (*flagp & BIT(bit)) != 0U;
    b644:	fa22 f001 	lsr.w	r0, r2, r1
}
    b648:	f000 0001 	and.w	r0, r0, #1
    b64c:	4770      	bx	lr

0000b64e <notify_queue_locked.isra.0>:
	if (queue != NULL) {
    b64e:	b120      	cbz	r0, b65a <notify_queue_locked.isra.0+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    b650:	2200      	movs	r2, #0
    b652:	4611      	mov	r1, r2
    b654:	3088      	adds	r0, #136	; 0x88
    b656:	f000 b942 	b.w	b8de <z_sched_wake>
}
    b65a:	4770      	bx	lr

0000b65c <work_timeout>:
{
    b65c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    b65e:	4604      	mov	r4, r0
	__asm__ volatile(
    b660:	f04f 0320 	mov.w	r3, #32
    b664:	f3ef 8511 	mrs	r5, BASEPRI
    b668:	f383 8812 	msr	BASEPRI_MAX, r3
    b66c:	f3bf 8f6f 	isb	sy
	struct k_work_q *queue = NULL;
    b670:	2300      	movs	r3, #0
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    b672:	f1a0 0610 	sub.w	r6, r0, #16
    b676:	2103      	movs	r1, #3
    b678:	3804      	subs	r0, #4
	struct k_work_q *queue = NULL;
    b67a:	9301      	str	r3, [sp, #4]
	if (flag_test_and_clear(&wp->flags, K_WORK_DELAYED_BIT)) {
    b67c:	f7ff ffdc 	bl	b638 <flag_test_and_clear>
    b680:	b128      	cbz	r0, b68e <work_timeout+0x32>
		queue = dw->queue;
    b682:	69a3      	ldr	r3, [r4, #24]
    b684:	9301      	str	r3, [sp, #4]
		(void)submit_to_queue_locked(wp, &queue);
    b686:	a901      	add	r1, sp, #4
    b688:	4630      	mov	r0, r6
    b68a:	f7fd fd11 	bl	90b0 <submit_to_queue_locked>
	__asm__ volatile(
    b68e:	f385 8811 	msr	BASEPRI, r5
    b692:	f3bf 8f6f 	isb	sy
}
    b696:	b002      	add	sp, #8
    b698:	bd70      	pop	{r4, r5, r6, pc}

0000b69a <k_work_init>:
{
    b69a:	b538      	push	{r3, r4, r5, lr}
    b69c:	4604      	mov	r4, r0
    b69e:	460d      	mov	r5, r1
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b6a0:	2210      	movs	r2, #16
    b6a2:	2100      	movs	r1, #0
    b6a4:	f7ff fa85 	bl	abb2 <memset>
    b6a8:	6065      	str	r5, [r4, #4]
}
    b6aa:	bd38      	pop	{r3, r4, r5, pc}

0000b6ac <k_work_submit_to_queue>:
{
    b6ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
    b6ae:	9001      	str	r0, [sp, #4]
    b6b0:	4608      	mov	r0, r1
	__asm__ volatile(
    b6b2:	f04f 0320 	mov.w	r3, #32
    b6b6:	f3ef 8511 	mrs	r5, BASEPRI
    b6ba:	f383 8812 	msr	BASEPRI_MAX, r3
    b6be:	f3bf 8f6f 	isb	sy
	int ret = submit_to_queue_locked(work, &queue);
    b6c2:	a901      	add	r1, sp, #4
    b6c4:	f7fd fcf4 	bl	90b0 <submit_to_queue_locked>
    b6c8:	4604      	mov	r4, r0
	__asm__ volatile(
    b6ca:	f385 8811 	msr	BASEPRI, r5
    b6ce:	f3bf 8f6f 	isb	sy
	if (ret > 0) {
    b6d2:	2800      	cmp	r0, #0
    b6d4:	dd09      	ble.n	b6ea <k_work_submit_to_queue+0x3e>
	__asm__ volatile(
    b6d6:	f04f 0320 	mov.w	r3, #32
    b6da:	f3ef 8011 	mrs	r0, BASEPRI
    b6de:	f383 8812 	msr	BASEPRI_MAX, r3
    b6e2:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    b6e6:	f000 f845 	bl	b774 <z_reschedule_irqlock>
}
    b6ea:	4620      	mov	r0, r4
    b6ec:	b003      	add	sp, #12
    b6ee:	bd30      	pop	{r4, r5, pc}

0000b6f0 <k_work_init_delayable>:
{
    b6f0:	b538      	push	{r3, r4, r5, lr}
	*dwork = (struct k_work_delayable){
    b6f2:	2230      	movs	r2, #48	; 0x30
{
    b6f4:	4604      	mov	r4, r0
    b6f6:	460d      	mov	r5, r1
	*dwork = (struct k_work_delayable){
    b6f8:	2100      	movs	r1, #0
    b6fa:	f7ff fa5a 	bl	abb2 <memset>
    b6fe:	f44f 7380 	mov.w	r3, #256	; 0x100
    b702:	6065      	str	r5, [r4, #4]
    b704:	60e3      	str	r3, [r4, #12]
}
    b706:	bd38      	pop	{r3, r4, r5, pc}

0000b708 <sys_dlist_remove>:
	sys_dnode_t *const next = node->next;
    b708:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    b70c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    b70e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    b710:	2300      	movs	r3, #0
	node->prev = NULL;
    b712:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dnode_init(node);
}
    b716:	4770      	bx	lr

0000b718 <unpend_thread_no_timeout>:
{
    b718:	b508      	push	{r3, lr}
	sys_dlist_remove(&thread->base.qnode_dlist);
    b71a:	f7ff fff5 	bl	b708 <sys_dlist_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    b71e:	7b43      	ldrb	r3, [r0, #13]
    b720:	f023 0302 	bic.w	r3, r3, #2
    b724:	7343      	strb	r3, [r0, #13]
	thread->base.pended_on = NULL;
    b726:	2300      	movs	r3, #0
    b728:	6083      	str	r3, [r0, #8]
}
    b72a:	bd08      	pop	{r3, pc}

0000b72c <z_unpend_thread_no_timeout>:
{
    b72c:	b508      	push	{r3, lr}
    b72e:	f04f 0320 	mov.w	r3, #32
    b732:	f3ef 8111 	mrs	r1, BASEPRI
    b736:	f383 8812 	msr	BASEPRI_MAX, r3
    b73a:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    b73e:	f7ff ffeb 	bl	b718 <unpend_thread_no_timeout>
	__asm__ volatile(
    b742:	f381 8811 	msr	BASEPRI, r1
    b746:	f3bf 8f6f 	isb	sy
}
    b74a:	bd08      	pop	{r3, pc}

0000b74c <z_unpend_thread>:
{
    b74c:	b510      	push	{r4, lr}
	__asm__ volatile(
    b74e:	f04f 0320 	mov.w	r3, #32
    b752:	f3ef 8411 	mrs	r4, BASEPRI
    b756:	f383 8812 	msr	BASEPRI_MAX, r3
    b75a:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
    b75e:	f7ff ffdb 	bl	b718 <unpend_thread_no_timeout>
	__asm__ volatile(
    b762:	f384 8811 	msr	BASEPRI, r4
    b766:	f3bf 8f6f 	isb	sy
}
    b76a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    b76e:	3018      	adds	r0, #24
    b770:	f000 b8d2 	b.w	b918 <z_abort_timeout>

0000b774 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    b774:	4603      	mov	r3, r0
    b776:	b920      	cbnz	r0, b782 <z_reschedule_irqlock+0xe>
    b778:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    b77c:	b90a      	cbnz	r2, b782 <z_reschedule_irqlock+0xe>
	ret = arch_swap(key);
    b77e:	f7f7 bb09 	b.w	2d94 <arch_swap>
    b782:	f383 8811 	msr	BASEPRI, r3
    b786:	f3bf 8f6f 	isb	sy
}
    b78a:	4770      	bx	lr

0000b78c <z_reschedule_unlocked>:
	__asm__ volatile(
    b78c:	f04f 0320 	mov.w	r3, #32
    b790:	f3ef 8011 	mrs	r0, BASEPRI
    b794:	f383 8812 	msr	BASEPRI_MAX, r3
    b798:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    b79c:	f7ff bfea 	b.w	b774 <z_reschedule_irqlock>

0000b7a0 <z_priq_dumb_best>:
{
    b7a0:	4603      	mov	r3, r0
	return list->head == list;
    b7a2:	6800      	ldr	r0, [r0, #0]
}
    b7a4:	4283      	cmp	r3, r0
    b7a6:	bf08      	it	eq
    b7a8:	2000      	moveq	r0, #0
    b7aa:	4770      	bx	lr

0000b7ac <z_ready_thread>:
{
    b7ac:	b510      	push	{r4, lr}
    b7ae:	f04f 0320 	mov.w	r3, #32
    b7b2:	f3ef 8411 	mrs	r4, BASEPRI
    b7b6:	f383 8812 	msr	BASEPRI_MAX, r3
    b7ba:	f3bf 8f6f 	isb	sy
			ready_thread(thread);
    b7be:	f7fd fe3d 	bl	943c <ready_thread>
	__asm__ volatile(
    b7c2:	f384 8811 	msr	BASEPRI, r4
    b7c6:	f3bf 8f6f 	isb	sy
}
    b7ca:	bd10      	pop	{r4, pc}

0000b7cc <z_thread_timeout>:
{
    b7cc:	b510      	push	{r4, lr}
    b7ce:	4601      	mov	r1, r0
	__asm__ volatile(
    b7d0:	f04f 0320 	mov.w	r3, #32
    b7d4:	f3ef 8411 	mrs	r4, BASEPRI
    b7d8:	f383 8812 	msr	BASEPRI_MAX, r3
    b7dc:	f3bf 8f6f 	isb	sy
		if (!killed) {
    b7e0:	f810 3c0b 	ldrb.w	r3, [r0, #-11]
    b7e4:	f013 0f28 	tst.w	r3, #40	; 0x28
    b7e8:	d10d      	bne.n	b806 <z_thread_timeout+0x3a>
			if (thread->base.pended_on != NULL) {
    b7ea:	f851 3c10 	ldr.w	r3, [r1, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    b7ee:	3818      	subs	r0, #24
			if (thread->base.pended_on != NULL) {
    b7f0:	b10b      	cbz	r3, b7f6 <z_thread_timeout+0x2a>
				unpend_thread_no_timeout(thread);
    b7f2:	f7ff ff91 	bl	b718 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    b7f6:	f811 3c0b 	ldrb.w	r3, [r1, #-11]
    b7fa:	f023 0314 	bic.w	r3, r3, #20
    b7fe:	f801 3c0b 	strb.w	r3, [r1, #-11]
			ready_thread(thread);
    b802:	f7fd fe1b 	bl	943c <ready_thread>
	__asm__ volatile(
    b806:	f384 8811 	msr	BASEPRI, r4
    b80a:	f3bf 8f6f 	isb	sy
}
    b80e:	bd10      	pop	{r4, pc}

0000b810 <add_to_waitq_locked>:
{
    b810:	b538      	push	{r3, r4, r5, lr}
    b812:	4604      	mov	r4, r0
    b814:	460d      	mov	r5, r1
	unready_thread(thread);
    b816:	f7fd fe65 	bl	94e4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    b81a:	7b63      	ldrb	r3, [r4, #13]
    b81c:	f043 0302 	orr.w	r3, r3, #2
    b820:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    b822:	b195      	cbz	r5, b84a <add_to_waitq_locked+0x3a>
    b824:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
    b826:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b828:	429d      	cmp	r5, r3
    b82a:	d015      	beq.n	b858 <add_to_waitq_locked+0x48>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b82c:	b1a3      	cbz	r3, b858 <add_to_waitq_locked+0x48>
	int32_t b1 = thread_1->base.prio;
    b82e:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    b832:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    b836:	4291      	cmp	r1, r2
    b838:	d008      	beq.n	b84c <add_to_waitq_locked+0x3c>
		return b2 - b1;
    b83a:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    b83c:	2a00      	cmp	r2, #0
    b83e:	dd05      	ble.n	b84c <add_to_waitq_locked+0x3c>
	sys_dnode_t *const prev = successor->prev;
    b840:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    b842:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    b846:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    b848:	605c      	str	r4, [r3, #4]
}
    b84a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    b84c:	686a      	ldr	r2, [r5, #4]
    b84e:	4293      	cmp	r3, r2
    b850:	d002      	beq.n	b858 <add_to_waitq_locked+0x48>
    b852:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    b854:	2b00      	cmp	r3, #0
    b856:	d1ec      	bne.n	b832 <add_to_waitq_locked+0x22>
	sys_dnode_t *const tail = list->tail;
    b858:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    b85a:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    b85e:	601c      	str	r4, [r3, #0]
	list->tail = node;
    b860:	606c      	str	r4, [r5, #4]
}
    b862:	e7f2      	b.n	b84a <add_to_waitq_locked+0x3a>

0000b864 <z_unpend1_no_timeout>:
{
    b864:	b510      	push	{r4, lr}
	__asm__ volatile(
    b866:	f04f 0320 	mov.w	r3, #32
    b86a:	f3ef 8411 	mrs	r4, BASEPRI
    b86e:	f383 8812 	msr	BASEPRI_MAX, r3
    b872:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    b876:	f7ff ff93 	bl	b7a0 <z_priq_dumb_best>
		if (thread != NULL) {
    b87a:	4601      	mov	r1, r0
    b87c:	b108      	cbz	r0, b882 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
    b87e:	f7ff ff4b 	bl	b718 <unpend_thread_no_timeout>
	__asm__ volatile(
    b882:	f384 8811 	msr	BASEPRI, r4
    b886:	f3bf 8f6f 	isb	sy
}
    b88a:	4608      	mov	r0, r1
    b88c:	bd10      	pop	{r4, pc}

0000b88e <z_unpend_first_thread>:
{
    b88e:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    b890:	f04f 0320 	mov.w	r3, #32
    b894:	f3ef 8511 	mrs	r5, BASEPRI
    b898:	f383 8812 	msr	BASEPRI_MAX, r3
    b89c:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    b8a0:	f7ff ff7e 	bl	b7a0 <z_priq_dumb_best>
		if (thread != NULL) {
    b8a4:	4604      	mov	r4, r0
    b8a6:	b120      	cbz	r0, b8b2 <z_unpend_first_thread+0x24>
			unpend_thread_no_timeout(thread);
    b8a8:	f7ff ff36 	bl	b718 <unpend_thread_no_timeout>
    b8ac:	3018      	adds	r0, #24
    b8ae:	f000 f833 	bl	b918 <z_abort_timeout>
	__asm__ volatile(
    b8b2:	f385 8811 	msr	BASEPRI, r5
    b8b6:	f3bf 8f6f 	isb	sy
}
    b8ba:	4620      	mov	r0, r4
    b8bc:	bd38      	pop	{r3, r4, r5, pc}

0000b8be <z_unpend_all>:
{
    b8be:	b538      	push	{r3, r4, r5, lr}
    b8c0:	4605      	mov	r5, r0
	int need_sched = 0;
    b8c2:	2000      	movs	r0, #0
	return list->head == list;
    b8c4:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    b8c6:	42a5      	cmp	r5, r4
    b8c8:	d000      	beq.n	b8cc <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    b8ca:	b904      	cbnz	r4, b8ce <z_unpend_all+0x10>
}
    b8cc:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
    b8ce:	4620      	mov	r0, r4
    b8d0:	f7ff ff3c 	bl	b74c <z_unpend_thread>
		z_ready_thread(thread);
    b8d4:	4620      	mov	r0, r4
    b8d6:	f7ff ff69 	bl	b7ac <z_ready_thread>
		need_sched = 1;
    b8da:	2001      	movs	r0, #1
    b8dc:	e7f2      	b.n	b8c4 <z_unpend_all+0x6>

0000b8de <z_sched_wake>:
{
    b8de:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    b8e0:	f04f 0320 	mov.w	r3, #32
    b8e4:	f3ef 8511 	mrs	r5, BASEPRI
    b8e8:	f383 8812 	msr	BASEPRI_MAX, r3
    b8ec:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
    b8f0:	f7ff ff56 	bl	b7a0 <z_priq_dumb_best>
		if (thread != NULL) {
    b8f4:	4604      	mov	r4, r0
    b8f6:	b150      	cbz	r0, b90e <z_sched_wake+0x30>
    b8f8:	6781      	str	r1, [r0, #120]	; 0x78
	thread->base.swap_data = data;
    b8fa:	6142      	str	r2, [r0, #20]
			unpend_thread_no_timeout(thread);
    b8fc:	f7ff ff0c 	bl	b718 <unpend_thread_no_timeout>
    b900:	3018      	adds	r0, #24
    b902:	f000 f809 	bl	b918 <z_abort_timeout>
			ready_thread(thread);
    b906:	4620      	mov	r0, r4
    b908:	f7fd fd98 	bl	943c <ready_thread>
			ret = true;
    b90c:	2001      	movs	r0, #1
	__asm__ volatile(
    b90e:	f385 8811 	msr	BASEPRI, r5
    b912:	f3bf 8f6f 	isb	sy
}
    b916:	bd38      	pop	{r3, r4, r5, pc}

0000b918 <z_abort_timeout>:
{
    b918:	b510      	push	{r4, lr}
	__asm__ volatile(
    b91a:	f04f 0220 	mov.w	r2, #32
    b91e:	f3ef 8411 	mrs	r4, BASEPRI
    b922:	f382 8812 	msr	BASEPRI_MAX, r2
    b926:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
    b92a:	6803      	ldr	r3, [r0, #0]
    b92c:	b13b      	cbz	r3, b93e <z_abort_timeout+0x26>
			remove_timeout(to);
    b92e:	f7fe f823 	bl	9978 <remove_timeout>
			ret = 0;
    b932:	2000      	movs	r0, #0
	__asm__ volatile(
    b934:	f384 8811 	msr	BASEPRI, r4
    b938:	f3bf 8f6f 	isb	sy
}
    b93c:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
    b93e:	f06f 0015 	mvn.w	r0, #21
    b942:	e7f7      	b.n	b934 <z_abort_timeout+0x1c>

0000b944 <z_get_next_timeout_expiry>:
{
    b944:	b510      	push	{r4, lr}
	__asm__ volatile(
    b946:	f04f 0320 	mov.w	r3, #32
    b94a:	f3ef 8411 	mrs	r4, BASEPRI
    b94e:	f383 8812 	msr	BASEPRI_MAX, r3
    b952:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
    b956:	f7fd ffe9 	bl	992c <next_timeout>
	__asm__ volatile(
    b95a:	f384 8811 	msr	BASEPRI, r4
    b95e:	f3bf 8f6f 	isb	sy
}
    b962:	bd10      	pop	{r4, pc}

0000b964 <z_set_timeout_expiry>:
{
    b964:	b570      	push	{r4, r5, r6, lr}
    b966:	4604      	mov	r4, r0
    b968:	460d      	mov	r5, r1
	__asm__ volatile(
    b96a:	f04f 0320 	mov.w	r3, #32
    b96e:	f3ef 8611 	mrs	r6, BASEPRI
    b972:	f383 8812 	msr	BASEPRI_MAX, r3
    b976:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
    b97a:	f7fd ffd7 	bl	992c <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    b97e:	2801      	cmp	r0, #1
    b980:	dd05      	ble.n	b98e <z_set_timeout_expiry+0x2a>
    b982:	42a0      	cmp	r0, r4
    b984:	db03      	blt.n	b98e <z_set_timeout_expiry+0x2a>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    b986:	4629      	mov	r1, r5
    b988:	4620      	mov	r0, r4
    b98a:	f7fa f8d7 	bl	5b3c <sys_clock_set_timeout>
	__asm__ volatile(
    b98e:	f386 8811 	msr	BASEPRI, r6
    b992:	f3bf 8f6f 	isb	sy
}
    b996:	bd70      	pop	{r4, r5, r6, pc}

0000b998 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    b998:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    b99a:	f7fe f8dd 	bl	9b58 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    b99e:	bd08      	pop	{r3, pc}

0000b9a0 <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    b9a0:	b108      	cbz	r0, b9a6 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    b9a2:	f7f7 bf19 	b.w	37d8 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    b9a6:	4770      	bx	lr

0000b9a8 <sys_clock_timeout_end_calc>:
 */
uint64_t sys_clock_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b9a8:	f1b1 3fff 	cmp.w	r1, #4294967295
    b9ac:	bf08      	it	eq
    b9ae:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    b9b2:	b538      	push	{r3, r4, r5, lr}
    b9b4:	4605      	mov	r5, r0
    b9b6:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    b9b8:	d01d      	beq.n	b9f6 <sys_clock_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    b9ba:	ea51 0300 	orrs.w	r3, r1, r0
    b9be:	d103      	bne.n	b9c8 <sys_clock_timeout_end_calc+0x20>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
			return Z_TICK_ABS(dt);
		}
		return sys_clock_tick_get() + MAX(1, dt);
	}
}
    b9c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return sys_clock_tick_get();
    b9c4:	f7fe b8c8 	b.w	9b58 <sys_clock_tick_get>
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
    b9c8:	f06f 0301 	mvn.w	r3, #1
    b9cc:	1a18      	subs	r0, r3, r0
    b9ce:	f04f 33ff 	mov.w	r3, #4294967295
    b9d2:	eb63 0101 	sbc.w	r1, r3, r1
    b9d6:	2900      	cmp	r1, #0
    b9d8:	da0c      	bge.n	b9f4 <sys_clock_timeout_end_calc+0x4c>
		return sys_clock_tick_get() + MAX(1, dt);
    b9da:	f7fe f8bd 	bl	9b58 <sys_clock_tick_get>
    b9de:	2d01      	cmp	r5, #1
    b9e0:	4622      	mov	r2, r4
    b9e2:	f174 0400 	sbcs.w	r4, r4, #0
    b9e6:	462b      	mov	r3, r5
    b9e8:	bfbc      	itt	lt
    b9ea:	2301      	movlt	r3, #1
    b9ec:	2200      	movlt	r2, #0
    b9ee:	1818      	adds	r0, r3, r0
    b9f0:	eb41 0102 	adc.w	r1, r1, r2
}
    b9f4:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
    b9f6:	f04f 30ff 	mov.w	r0, #4294967295
    b9fa:	4601      	mov	r1, r0
    b9fc:	e7fa      	b.n	b9f4 <sys_clock_timeout_end_calc+0x4c>

0000b9fe <k_timer_init>:
	timer->status = 0U;
    b9fe:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
    ba00:	e9c0 1208 	strd	r1, r2, [r0, #32]
	sys_dlist_init(&w->waitq);
    ba04:	f100 0218 	add.w	r2, r0, #24
	list->tail = (sys_dnode_t *)list;
    ba08:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
    ba0c:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
    ba10:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
    ba12:	6343      	str	r3, [r0, #52]	; 0x34
}
    ba14:	4770      	bx	lr

0000ba16 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    ba16:	b510      	push	{r4, lr}
    ba18:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    ba1a:	f7ff ff7d 	bl	b918 <z_abort_timeout>

	if (inactive) {
    ba1e:	b9b0      	cbnz	r0, ba4e <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    ba20:	6a63      	ldr	r3, [r4, #36]	; 0x24
    ba22:	b10b      	cbz	r3, ba28 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    ba24:	4620      	mov	r0, r4
    ba26:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    ba28:	f104 0018 	add.w	r0, r4, #24
    ba2c:	f7ff ff1a 	bl	b864 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    ba30:	b168      	cbz	r0, ba4e <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    ba32:	f7ff febb 	bl	b7ac <z_ready_thread>
	__asm__ volatile(
    ba36:	f04f 0320 	mov.w	r3, #32
    ba3a:	f3ef 8011 	mrs	r0, BASEPRI
    ba3e:	f383 8812 	msr	BASEPRI_MAX, r3
    ba42:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    ba46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
    ba4a:	f7ff be93 	b.w	b774 <z_reschedule_irqlock>
    ba4e:	bd10      	pop	{r4, pc}

0000ba50 <k_free>:
	if (ptr != NULL) {
    ba50:	b120      	cbz	r0, ba5c <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
    ba52:	1f01      	subs	r1, r0, #4
    ba54:	f850 0c04 	ldr.w	r0, [r0, #-4]
    ba58:	f000 b84a 	b.w	baf0 <k_heap_free>
}
    ba5c:	4770      	bx	lr

0000ba5e <k_heap_init>:
{
    ba5e:	b410      	push	{r4}
    ba60:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
    ba64:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
    ba68:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
    ba6a:	f7fe bcbc 	b.w	a3e6 <sys_heap_init>

0000ba6e <k_heap_aligned_alloc>:
SYS_INIT(statics_init, POST_KERNEL, 0);
#endif /* CONFIG_DEMAND_PAGING && !CONFIG_LINKER_GENERIC_SECTIONS_PRESENT_AT_BOOT */

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
    ba6e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ba72:	b085      	sub	sp, #20
    ba74:	4606      	mov	r6, r0
    ba76:	4688      	mov	r8, r1
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    ba78:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
    ba7c:	4691      	mov	r9, r2
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    ba7e:	f7ff ff93 	bl	b9a8 <sys_clock_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
    ba82:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = sys_clock_timeout_end_calc(timeout);
    ba86:	4605      	mov	r5, r0
    ba88:	460f      	mov	r7, r1
    ba8a:	f04f 0320 	mov.w	r3, #32
    ba8e:	f3ef 8411 	mrs	r4, BASEPRI
    ba92:	f383 8812 	msr	BASEPRI_MAX, r3
    ba96:	f3bf 8f6f 	isb	sy
			/**
			 * @todo	Trace attempt to avoid empty trace segments
			 */
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    ba9a:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
    ba9e:	464a      	mov	r2, r9
    baa0:	4641      	mov	r1, r8
    baa2:	4630      	mov	r0, r6
    baa4:	f7fe fc37 	bl	a316 <sys_heap_aligned_alloc>
    baa8:	9003      	str	r0, [sp, #12]
		now = sys_clock_tick_get();
    baaa:	f7fe f855 	bl	9b58 <sys_clock_tick_get>
		if (!IS_ENABLED(CONFIG_MULTITHREADING) ||
    baae:	9b03      	ldr	r3, [sp, #12]
    bab0:	b13b      	cbz	r3, bac2 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
    bab2:	f384 8811 	msr	BASEPRI, r4
    bab6:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_heap, aligned_alloc, h, timeout, ret);

	k_spin_unlock(&h->lock, key);
	return ret;
}
    baba:	4618      	mov	r0, r3
    babc:	b005      	add	sp, #20
    babe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    (ret != NULL) || ((end - now) <= 0)) {
    bac2:	1a28      	subs	r0, r5, r0
    bac4:	eb67 0101 	sbc.w	r1, r7, r1
    bac8:	2801      	cmp	r0, #1
    baca:	f171 0200 	sbcs.w	r2, r1, #0
    bace:	dbf0      	blt.n	bab2 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
    bad0:	e9cd 0100 	strd	r0, r1, [sp]
    bad4:	465a      	mov	r2, fp
    bad6:	4621      	mov	r1, r4
    bad8:	4650      	mov	r0, sl
    bada:	f7fd fd41 	bl	9560 <z_pend_curr>
	__asm__ volatile(
    bade:	f04f 0320 	mov.w	r3, #32
    bae2:	f3ef 8411 	mrs	r4, BASEPRI
    bae6:	f383 8812 	msr	BASEPRI_MAX, r3
    baea:	f3bf 8f6f 	isb	sy
    baee:	e7d6      	b.n	ba9e <k_heap_aligned_alloc+0x30>

0000baf0 <k_heap_free>:

	return ret;
}

void k_heap_free(struct k_heap *h, void *mem)
{
    baf0:	b538      	push	{r3, r4, r5, lr}
    baf2:	4604      	mov	r4, r0
    baf4:	f04f 0320 	mov.w	r3, #32
    baf8:	f3ef 8511 	mrs	r5, BASEPRI
    bafc:	f383 8812 	msr	BASEPRI_MAX, r3
    bb00:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
    bb04:	f7fe fbcf 	bl	a2a6 <sys_heap_free>

	SYS_PORT_TRACING_OBJ_FUNC(k_heap, free, h);
	if (IS_ENABLED(CONFIG_MULTITHREADING) && z_unpend_all(&h->wait_q) != 0) {
    bb08:	f104 000c 	add.w	r0, r4, #12
    bb0c:	f7ff fed7 	bl	b8be <z_unpend_all>
    bb10:	b130      	cbz	r0, bb20 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
    bb12:	4629      	mov	r1, r5
    bb14:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
    bb18:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
    bb1c:	f7fd bbcc 	b.w	92b8 <z_reschedule>
	__asm__ volatile(
    bb20:	f385 8811 	msr	BASEPRI, r5
    bb24:	f3bf 8f6f 	isb	sy
}
    bb28:	bd38      	pop	{r3, r4, r5, pc}

0000bb2a <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    bb2a:	4770      	bx	lr

0000bb2c <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    bb2c:	f7fa be8e 	b.w	684c <SystemInit>
